[;, public, static, final, int, JSDOC_INFO_PROP, =, 29, ,, VAR_ARGS_NAME, =, 30, ,, INCRDECR_PROP, =, 32, ,, QUOTED_PROP, =, 36]
[,, VAR_ARGS_NAME, =, 30, ,, INCRDECR_PROP, =, 32, ,, QUOTED_PROP, =, 36, ,, OPT_ARG_NAME, =, 37, ,, SYNTHETIC_BLOCK_PROP, =, 38]
[,, INCRDECR_PROP, =, 32, ,, QUOTED_PROP, =, 36, ,, OPT_ARG_NAME, =, 37, ,, SYNTHETIC_BLOCK_PROP, =, 38, ,, EMPTY_BLOCK, =, 39]
[,, QUOTED_PROP, =, 36, ,, OPT_ARG_NAME, =, 37, ,, SYNTHETIC_BLOCK_PROP, =, 38, ,, EMPTY_BLOCK, =, 39, ,, ORIGINALNAME_PROP, =, 40]
[,, OPT_ARG_NAME, =, 37, ,, SYNTHETIC_BLOCK_PROP, =, 38, ,, EMPTY_BLOCK, =, 39, ,, ORIGINALNAME_PROP, =, 40, ,, SIDE_EFFECT_FLAGS, =, 42]
[,, SYNTHETIC_BLOCK_PROP, =, 38, ,, EMPTY_BLOCK, =, 39, ,, ORIGINALNAME_PROP, =, 40, ,, SIDE_EFFECT_FLAGS, =, 42, ,, IS_CONSTANT_NAME, =, 43]
[,, EMPTY_BLOCK, =, 39, ,, ORIGINALNAME_PROP, =, 40, ,, SIDE_EFFECT_FLAGS, =, 42, ,, IS_CONSTANT_NAME, =, 43, ,, IS_NAMESPACE, =, 46]
[,, ORIGINALNAME_PROP, =, 40, ,, SIDE_EFFECT_FLAGS, =, 42, ,, IS_CONSTANT_NAME, =, 43, ,, IS_NAMESPACE, =, 46, ,, IS_DISPATCHER, =, 47]
[,, SIDE_EFFECT_FLAGS, =, 42, ,, IS_CONSTANT_NAME, =, 43, ,, IS_NAMESPACE, =, 46, ,, IS_DISPATCHER, =, 47, ,, DIRECTIVES, =, 48]
[,, IS_CONSTANT_NAME, =, 43, ,, IS_NAMESPACE, =, 46, ,, IS_DISPATCHER, =, 47, ,, DIRECTIVES, =, 48, ,, DIRECT_EVAL, =, 49]
[,, IS_NAMESPACE, =, 46, ,, IS_DISPATCHER, =, 47, ,, DIRECTIVES, =, 48, ,, DIRECT_EVAL, =, 49, ,, FREE_CALL, =, 50]
[,, IS_DISPATCHER, =, 47, ,, DIRECTIVES, =, 48, ,, DIRECT_EVAL, =, 49, ,, FREE_CALL, =, 50, ,, STATIC_SOURCE_FILE, =, 51]
[,, DIRECTIVES, =, 48, ,, DIRECT_EVAL, =, 49, ,, FREE_CALL, =, 50, ,, STATIC_SOURCE_FILE, =, 51, ,, LENGTH, =, 52]
[,, DIRECT_EVAL, =, 49, ,, FREE_CALL, =, 50, ,, STATIC_SOURCE_FILE, =, 51, ,, LENGTH, =, 52, ,, INPUT_ID, =, 53]
[,, FREE_CALL, =, 50, ,, STATIC_SOURCE_FILE, =, 51, ,, LENGTH, =, 52, ,, INPUT_ID, =, 53, ,, SLASH_V, =, 54]
[,, STATIC_SOURCE_FILE, =, 51, ,, LENGTH, =, 52, ,, INPUT_ID, =, 53, ,, SLASH_V, =, 54, ,, INFERRED_FUNCTION, =, 55]
[,, LENGTH, =, 52, ,, INPUT_ID, =, 53, ,, SLASH_V, =, 54, ,, INFERRED_FUNCTION, =, 55, ,, LAST_PROP, =, 55]
[,, INPUT_ID, =, 53, ,, SLASH_V, =, 54, ,, INFERRED_FUNCTION, =, 55, ,, LAST_PROP, =, 55, ;, public, static, final]
[,, SLASH_V, =, 54, ,, INFERRED_FUNCTION, =, 55, ,, LAST_PROP, =, 55, ;, public, static, final, int, DECR_FLAG, =, 0x1]
[,, INFERRED_FUNCTION, =, 55, ,, LAST_PROP, =, 55, ;, public, static, final, int, DECR_FLAG, =, 0x1, ,, POST_FLAG, =, 0x2]
[,, LAST_PROP, =, 55, ;, public, static, final, int, DECR_FLAG, =, 0x1, ,, POST_FLAG, =, 0x2, ;, private, static, final]
[;, public, static, final, int, DECR_FLAG, =, 0x1, ,, POST_FLAG, =, 0x2, ;, private, static, final, String, propToString, (, int]
[,, POST_FLAG, =, 0x2, ;, private, static, final, String, propToString, (, int, propType, ), {, switch, (, propType, ), {]
[;, private, static, final, String, propToString, (, int, propType, ), {, switch, (, propType, ), {, case, VAR_ARGS_NAME, :, return]
[), {, case, VAR_ARGS_NAME, :, return, "var_args_name", ;, case, JSDOC_INFO_PROP, :, return, "jsdoc_info", ;, case, INCRDECR_PROP, :, return, "incrdecr", ;]
[:, return, "var_args_name", ;, case, JSDOC_INFO_PROP, :, return, "jsdoc_info", ;, case, INCRDECR_PROP, :, return, "incrdecr", ;, case, QUOTED_PROP, :, return]
[;, case, JSDOC_INFO_PROP, :, return, "jsdoc_info", ;, case, INCRDECR_PROP, :, return, "incrdecr", ;, case, QUOTED_PROP, :, return, "quoted", ;, case]
[:, return, "jsdoc_info", ;, case, INCRDECR_PROP, :, return, "incrdecr", ;, case, QUOTED_PROP, :, return, "quoted", ;, case, OPT_ARG_NAME, :, return]
[;, case, INCRDECR_PROP, :, return, "incrdecr", ;, case, QUOTED_PROP, :, return, "quoted", ;, case, OPT_ARG_NAME, :, return, "opt_arg", ;, case]
[:, return, "incrdecr", ;, case, QUOTED_PROP, :, return, "quoted", ;, case, OPT_ARG_NAME, :, return, "opt_arg", ;, case, SYNTHETIC_BLOCK_PROP, :, return]
[;, case, QUOTED_PROP, :, return, "quoted", ;, case, OPT_ARG_NAME, :, return, "opt_arg", ;, case, SYNTHETIC_BLOCK_PROP, :, return, "synthetic", ;, case]
[:, return, "quoted", ;, case, OPT_ARG_NAME, :, return, "opt_arg", ;, case, SYNTHETIC_BLOCK_PROP, :, return, "synthetic", ;, case, EMPTY_BLOCK, :, return]
[;, case, OPT_ARG_NAME, :, return, "opt_arg", ;, case, SYNTHETIC_BLOCK_PROP, :, return, "synthetic", ;, case, EMPTY_BLOCK, :, return, "empty_block", ;, case]
[:, return, "opt_arg", ;, case, SYNTHETIC_BLOCK_PROP, :, return, "synthetic", ;, case, EMPTY_BLOCK, :, return, "empty_block", ;, case, ORIGINALNAME_PROP, :, return]
[;, case, SYNTHETIC_BLOCK_PROP, :, return, "synthetic", ;, case, EMPTY_BLOCK, :, return, "empty_block", ;, case, ORIGINALNAME_PROP, :, return, "originalname", ;, case]
[:, return, "synthetic", ;, case, EMPTY_BLOCK, :, return, "empty_block", ;, case, ORIGINALNAME_PROP, :, return, "originalname", ;, case, SIDE_EFFECT_FLAGS, :, return]
[;, case, EMPTY_BLOCK, :, return, "empty_block", ;, case, ORIGINALNAME_PROP, :, return, "originalname", ;, case, SIDE_EFFECT_FLAGS, :, return, "side_effect_flags", ;, case]
[:, return, "empty_block", ;, case, ORIGINALNAME_PROP, :, return, "originalname", ;, case, SIDE_EFFECT_FLAGS, :, return, "side_effect_flags", ;, case, IS_CONSTANT_NAME, :, return]
[;, case, ORIGINALNAME_PROP, :, return, "originalname", ;, case, SIDE_EFFECT_FLAGS, :, return, "side_effect_flags", ;, case, IS_CONSTANT_NAME, :, return, "is_constant_name", ;, case]
[:, return, "originalname", ;, case, SIDE_EFFECT_FLAGS, :, return, "side_effect_flags", ;, case, IS_CONSTANT_NAME, :, return, "is_constant_name", ;, case, IS_NAMESPACE, :, return]
[;, case, SIDE_EFFECT_FLAGS, :, return, "side_effect_flags", ;, case, IS_CONSTANT_NAME, :, return, "is_constant_name", ;, case, IS_NAMESPACE, :, return, "is_namespace", ;, case]
[:, return, "side_effect_flags", ;, case, IS_CONSTANT_NAME, :, return, "is_constant_name", ;, case, IS_NAMESPACE, :, return, "is_namespace", ;, case, IS_DISPATCHER, :, return]
[;, case, IS_CONSTANT_NAME, :, return, "is_constant_name", ;, case, IS_NAMESPACE, :, return, "is_namespace", ;, case, IS_DISPATCHER, :, return, "is_dispatcher", ;, case]
[:, return, "is_constant_name", ;, case, IS_NAMESPACE, :, return, "is_namespace", ;, case, IS_DISPATCHER, :, return, "is_dispatcher", ;, case, DIRECTIVES, :, return]
[;, case, IS_NAMESPACE, :, return, "is_namespace", ;, case, IS_DISPATCHER, :, return, "is_dispatcher", ;, case, DIRECTIVES, :, return, "directives", ;, case]
[:, return, "is_namespace", ;, case, IS_DISPATCHER, :, return, "is_dispatcher", ;, case, DIRECTIVES, :, return, "directives", ;, case, DIRECT_EVAL, :, return]
[;, case, IS_DISPATCHER, :, return, "is_dispatcher", ;, case, DIRECTIVES, :, return, "directives", ;, case, DIRECT_EVAL, :, return, "direct_eval", ;, case]
[:, return, "is_dispatcher", ;, case, DIRECTIVES, :, return, "directives", ;, case, DIRECT_EVAL, :, return, "direct_eval", ;, case, FREE_CALL, :, return]
[;, case, DIRECTIVES, :, return, "directives", ;, case, DIRECT_EVAL, :, return, "direct_eval", ;, case, FREE_CALL, :, return, "free_call", ;, case]
[:, return, "directives", ;, case, DIRECT_EVAL, :, return, "direct_eval", ;, case, FREE_CALL, :, return, "free_call", ;, case, STATIC_SOURCE_FILE, :, return]
[;, case, DIRECT_EVAL, :, return, "direct_eval", ;, case, FREE_CALL, :, return, "free_call", ;, case, STATIC_SOURCE_FILE, :, return, "source_file", ;, case]
[:, return, "direct_eval", ;, case, FREE_CALL, :, return, "free_call", ;, case, STATIC_SOURCE_FILE, :, return, "source_file", ;, case, INPUT_ID, :, return]
[;, case, FREE_CALL, :, return, "free_call", ;, case, STATIC_SOURCE_FILE, :, return, "source_file", ;, case, INPUT_ID, :, return, "input_id", ;, case]
[:, return, "free_call", ;, case, STATIC_SOURCE_FILE, :, return, "source_file", ;, case, INPUT_ID, :, return, "input_id", ;, case, LENGTH, :, return]
[;, case, STATIC_SOURCE_FILE, :, return, "source_file", ;, case, INPUT_ID, :, return, "input_id", ;, case, LENGTH, :, return, "length", ;, case]
[:, return, "source_file", ;, case, INPUT_ID, :, return, "input_id", ;, case, LENGTH, :, return, "length", ;, case, SLASH_V, :, return]
[;, case, INPUT_ID, :, return, "input_id", ;, case, LENGTH, :, return, "length", ;, case, SLASH_V, :, return, "slash_v", ;, case]
[:, return, "input_id", ;, case, LENGTH, :, return, "length", ;, case, SLASH_V, :, return, "slash_v", ;, case, INFERRED_FUNCTION, :, return]
[;, case, LENGTH, :, return, "length", ;, case, SLASH_V, :, return, "slash_v", ;, case, INFERRED_FUNCTION, :, return, "inferred", ;, default]
[:, return, "length", ;, case, SLASH_V, :, return, "slash_v", ;, case, INFERRED_FUNCTION, :, return, "inferred", ;, default, :, throw, new]
[;, case, SLASH_V, :, return, "slash_v", ;, case, INFERRED_FUNCTION, :, return, "inferred", ;, default, :, throw, new, IllegalStateException, (, "unexpect prop id "]
[:, return, "slash_v", ;, case, INFERRED_FUNCTION, :, return, "inferred", ;, default, :, throw, new, IllegalStateException, (, "unexpect prop id ", +, propType, )]
[;, case, INFERRED_FUNCTION, :, return, "inferred", ;, default, :, throw, new, IllegalStateException, (, "unexpect prop id ", +, propType, ), ;, }, }]
[:, return, "inferred", ;, default, :, throw, new, IllegalStateException, (, "unexpect prop id ", +, propType, ), ;, }, }, private, static, class]
[;, default, :, throw, new, IllegalStateException, (, "unexpect prop id ", +, propType, ), ;, }, }, private, static, class, NumberNode, extends, Node]
[;, }, }, private, static, class, NumberNode, extends, Node, {, private, static, final, long, serialVersionUID, =, 1L, ;, NumberNode, (]
[), ;, }, }, private, static, class, NumberNode, extends, Node, {, private, static, final, long, serialVersionUID, =, 1L, ;, NumberNode]
[+, propType, ), ;, }, }, private, static, class, NumberNode, extends, Node, {, private, static, final, long, serialVersionUID, =, 1L]
[), ;, }, }, private, static, class, NumberNode, extends, Node, {, private, static, final, long, serialVersionUID, =, 1L, ;, NumberNode]
[;, NumberNode, (, double, number, ), {, super, (, Token, ., NUMBER, ), ;, this, ., number, =, number, ;]
[), ;, this, ., number, =, number, ;, }, public, NumberNode, (, double, number, ,, int, lineno, ,, int, charno]
[., NUMBER, ), ;, this, ., number, =, number, ;, }, public, NumberNode, (, double, number, ,, int, lineno, ,]
[=, number, ;, }, public, NumberNode, (, double, number, ,, int, lineno, ,, int, charno, ), {, super, (, Token]
[., number, =, number, ;, }, public, NumberNode, (, double, number, ,, int, lineno, ,, int, charno, ), {, super]
[;, }, public, NumberNode, (, double, number, ,, int, lineno, ,, int, charno, ), {, super, (, Token, ., NUMBER]
[,, lineno, ,, charno, ), ;, this, ., number, =, number, ;, }, @, Override, public, double, getDouble, (, )]
[., NUMBER, ,, lineno, ,, charno, ), ;, this, ., number, =, number, ;, }, @, Override, public, double, getDouble]
[,, charno, ), ;, this, ., number, =, number, ;, }, @, Override, public, double, getDouble, (, ), {, return]
[), ;, this, ., number, =, number, ;, }, @, Override, public, double, getDouble, (, ), {, return, this, .]
[=, number, ;, }, @, Override, public, double, getDouble, (, ), {, return, this, ., number, ;, }, @, Override]
[., number, =, number, ;, }, @, Override, public, double, getDouble, (, ), {, return, this, ., number, ;, }]
[;, }, @, Override, public, double, getDouble, (, ), {, return, this, ., number, ;, }, @, Override, public, void]
[;, }, @, Override, public, void, setDouble, (, double, d, ), {, this, ., number, =, d, ;, }, @]
[., number, ;, }, @, Override, public, void, setDouble, (, double, d, ), {, this, ., number, =, d, ;]
[=, d, ;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, boolean]
[., number, =, d, ;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, )]
[;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, boolean, equivalent, =]
[;, if, (, equivalent, ), {, double, thisValue, =, getDouble, (, ), ;, double, thatValue, =, (, (, NumberNode, )]
[., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, ), ;, if, (, equivalent, ), {, double, thisValue, =, getDouble, (]
[,, compareJsType, ,, recurse, ), ;, if, (, equivalent, ), {, double, thisValue, =, getDouble, (, ), ;, double, thatValue]
[,, recurse, ), ;, if, (, equivalent, ), {, double, thisValue, =, getDouble, (, ), ;, double, thatValue, =, (]
[), ;, if, (, equivalent, ), {, double, thisValue, =, getDouble, (, ), ;, double, thatValue, =, (, (, NumberNode]
[), {, double, thisValue, =, getDouble, (, ), ;, double, thatValue, =, (, (, NumberNode, ), node, ), ., getDouble]
[;, double, thatValue, =, (, (, NumberNode, ), node, ), ., getDouble, (, ), ;, if, (, thisValue, ==, thatValue]
[;, if, (, thisValue, ==, thatValue, ), {, return, (, thisValue, !=, 0.0, ), ||, (, 1, /, thisValue, ==]
[., getDouble, (, ), ;, if, (, thisValue, ==, thatValue, ), {, return, (, thisValue, !=, 0.0, ), ||, (]
[), ., getDouble, (, ), ;, if, (, thisValue, ==, thatValue, ), {, return, (, thisValue, !=, 0.0, ), ||]
[), ., getDouble, (, ), ;, if, (, thisValue, ==, thatValue, ), {, return, (, thisValue, !=, 0.0, ), ||]
[), {, return, (, thisValue, !=, 0.0, ), ||, (, 1, /, thisValue, ==, 1, /, thatValue, ), ;, }]
[==, thatValue, ), {, return, (, thisValue, !=, 0.0, ), ||, (, 1, /, thisValue, ==, 1, /, thatValue, )]
[), {, return, (, thisValue, !=, 0.0, ), ||, (, 1, /, thisValue, ==, 1, /, thatValue, ), ;, }]
[;, }, }, return, false, ;, }, private, double, number, ;, }, private, static, class, StringNode, extends, Node, {, private]
[||, (, 1, /, thisValue, ==, 1, /, thatValue, ), ;, }, }, return, false, ;, }, private, double, number]
[), ||, (, 1, /, thisValue, ==, 1, /, thatValue, ), ;, }, }, return, false, ;, }, private, double]
[!=, 0.0, ), ||, (, 1, /, thisValue, ==, 1, /, thatValue, ), ;, }, }, return, false, ;, }]
[), ||, (, 1, /, thisValue, ==, 1, /, thatValue, ), ;, }, }, return, false, ;, }, private, double]
[;, }, }, return, false, ;, }, private, double, number, ;, }, private, static, class, StringNode, extends, Node, {, private]
[), ;, }, }, return, false, ;, }, private, double, number, ;, }, private, static, class, StringNode, extends, Node, {]
[==, 1, /, thatValue, ), ;, }, }, return, false, ;, }, private, double, number, ;, }, private, static, class]
[/, thisValue, ==, 1, /, thatValue, ), ;, }, }, return, false, ;, }, private, double, number, ;, }, private]
[==, 1, /, thatValue, ), ;, }, }, return, false, ;, }, private, double, number, ;, }, private, static, class]
[), ;, }, }, return, false, ;, }, private, double, number, ;, }, private, static, class, StringNode, extends, Node, {]
[/, thatValue, ), ;, }, }, return, false, ;, }, private, double, number, ;, }, private, static, class, StringNode, extends]
[), ;, }, }, return, false, ;, }, private, double, number, ;, }, private, static, class, StringNode, extends, Node, {]
[;, }, private, double, number, ;, }, private, static, class, StringNode, extends, Node, {, private, static, final, long, serialVersionUID, =]
[;, StringNode, (, int, type, ,, String, str, ), {, super, (, type, ), ;, if, (, null, ==, str]
[), ;, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str]
[), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str, =, str, ;, }, StringNode, (, int]
[==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str, =, str, ;, }, StringNode]
[), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str, =, str, ;, }, StringNode, (, int]
[;, }, this, ., str, =, str, ;, }, StringNode, (, int, type, ,, String, str, ,, int, lineno, ,]
[), ;, }, this, ., str, =, str, ;, }, StringNode, (, int, type, ,, String, str, ,, int, lineno]
[=, str, ;, }, StringNode, (, int, type, ,, String, str, ,, int, lineno, ,, int, charno, ), {, super]
[., str, =, str, ;, }, StringNode, (, int, type, ,, String, str, ,, int, lineno, ,, int, charno, )]
[;, }, StringNode, (, int, type, ,, String, str, ,, int, lineno, ,, int, charno, ), {, super, (, type]
[,, lineno, ,, charno, ), ;, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;]
[,, charno, ), ;, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this]
[), ;, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str]
[), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str, =, str, ;, }, @, Override, public]
[==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str, =, str, ;, }, @]
[), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str, =, str, ;, }, @, Override, public]
[;, }, this, ., str, =, str, ;, }, @, Override, public, String, getString, (, ), {, return, this, .]
[), ;, }, this, ., str, =, str, ;, }, @, Override, public, String, getString, (, ), {, return, this]
[=, str, ;, }, @, Override, public, String, getString, (, ), {, return, this, ., str, ;, }, @, Override]
[., str, =, str, ;, }, @, Override, public, String, getString, (, ), {, return, this, ., str, ;, }]
[;, }, @, Override, public, String, getString, (, ), {, return, this, ., str, ;, }, @, Override, public, void]
[;, }, @, Override, public, void, setString, (, String, str, ), {, if, (, null, ==, str, ), {, throw]
[., str, ;, }, @, Override, public, void, setString, (, String, str, ), {, if, (, null, ==, str, )]
[), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str, =, str, ;, }, @, Override, boolean]
[==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str, =, str, ;, }, @]
[), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str, =, str, ;, }, @, Override, boolean]
[;, }, this, ., str, =, str, ;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,]
[), ;, }, this, ., str, =, str, ;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType]
[=, str, ;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, return]
[., str, =, str, ;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, )]
[;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, return, (, super]
[;, }, @, Override, public, boolean, isQuotedString, (, ), {, return, getBooleanProp, (, QUOTED_PROP, ), ;, }, @, Override, public]
[), ;, }, @, Override, public, boolean, isQuotedString, (, ), {, return, getBooleanProp, (, QUOTED_PROP, ), ;, }, @, Override]
[&&, this, ., str, ., equals, (, (, (, StringNode, ), node, ), ., str, ), ), ;, }, @]
[., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, ), &&, this, ., str, ., equals, (, (, (, StringNode, )]
[,, compareJsType, ,, recurse, ), &&, this, ., str, ., equals, (, (, (, StringNode, ), node, ), ., str]
[,, recurse, ), &&, this, ., str, ., equals, (, (, (, StringNode, ), node, ), ., str, ), )]
[), &&, this, ., str, ., equals, (, (, (, StringNode, ), node, ), ., str, ), ), ;, }]
[), ;, }, @, Override, public, boolean, isQuotedString, (, ), {, return, getBooleanProp, (, QUOTED_PROP, ), ;, }, @, Override]
[., equals, (, (, (, StringNode, ), node, ), ., str, ), ), ;, }, @, Override, public, boolean, isQuotedString]
[., str, ., equals, (, (, (, StringNode, ), node, ), ., str, ), ), ;, }, @, Override, public]
[), ), ;, }, @, Override, public, boolean, isQuotedString, (, ), {, return, getBooleanProp, (, QUOTED_PROP, ), ;, }, @]
[., str, ), ), ;, }, @, Override, public, boolean, isQuotedString, (, ), {, return, getBooleanProp, (, QUOTED_PROP, ), ;]
[), ., str, ), ), ;, }, @, Override, public, boolean, isQuotedString, (, ), {, return, getBooleanProp, (, QUOTED_PROP, )]
[), ., str, ), ), ;, }, @, Override, public, boolean, isQuotedString, (, ), {, return, getBooleanProp, (, QUOTED_PROP, )]
[;, }, @, Override, public, void, setQuotedString, (, ), {, putBooleanProp, (, QUOTED_PROP, ,, true, ), ;, }, private, String]
[), ;, }, @, Override, public, void, setQuotedString, (, ), {, putBooleanProp, (, QUOTED_PROP, ,, true, ), ;, }, private]
[;, }, private, String, str, ;, }, private, interface, PropListItem, {, int, getType, (, ), ;, PropListItem, getNext, (, )]
[,, true, ), ;, }, private, String, str, ;, }, private, interface, PropListItem, {, int, getType, (, ), ;, PropListItem]
[), ;, }, private, String, str, ;, }, private, interface, PropListItem, {, int, getType, (, ), ;, PropListItem, getNext, (]
[;, private, final, PropListItem, next, ;, private, final, int, propType, ;, AbstractPropListItem, (, int, propType, ,, PropListItem, next, ), {]
[=, propType, ;, this, ., next, =, next, ;, }, @, Override, public, int, getType, (, ), {, return, propType]
[., propType, =, propType, ;, this, ., next, =, next, ;, }, @, Override, public, int, getType, (, ), {]
[;, this, ., next, =, next, ;, }, @, Override, public, int, getType, (, ), {, return, propType, ;, }]
[=, next, ;, }, @, Override, public, int, getType, (, ), {, return, propType, ;, }, @, Override, public, PropListItem]
[., next, =, next, ;, }, @, Override, public, int, getType, (, ), {, return, propType, ;, }, @, Override]
[;, }, @, Override, public, int, getType, (, ), {, return, propType, ;, }, @, Override, public, PropListItem, getNext, (]
[;, }, @, Override, public, PropListItem, getNext, (, ), {, return, next, ;, }, @, Override, public, abstract, PropListItem, chain]
[;, }, @, Override, public, abstract, PropListItem, chain, (, PropListItem, next, ), ;, }, private, static, class, ObjectPropListItem, extends, AbstractPropListItem]
[;, private, final, Object, objectValue, ;, ObjectPropListItem, (, int, propType, ,, Object, objectValue, ,, PropListItem, next, ), {, super, (]
[,, next, ), ;, this, ., objectValue, =, objectValue, ;, }, @, Override, public, int, getIntValue, (, ), {, throw]
[), ;, this, ., objectValue, =, objectValue, ;, }, @, Override, public, int, getIntValue, (, ), {, throw, new, UnsupportedOperationException]
[=, objectValue, ;, }, @, Override, public, int, getIntValue, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, @]
[., objectValue, =, objectValue, ;, }, @, Override, public, int, getIntValue, (, ), {, throw, new, UnsupportedOperationException, (, ), ;]
[;, }, @, Override, public, int, getIntValue, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, @, Override, public]
[;, }, @, Override, public, Object, getObjectValue, (, ), {, return, objectValue, ;, }, @, Override, public, String, toString, (]
[;, }, @, Override, public, String, toString, (, ), {, return, objectValue, ==, null, ?, "null", :, objectValue, ., toString]
[;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return, new, ObjectPropListItem, (, getType, (, ), ,]
[?, "null", :, objectValue, ., toString, (, ), ;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {]
[==, null, ?, "null", :, objectValue, ., toString, (, ), ;, }, @, Override, public, PropListItem, chain, (, PropListItem, next]
[?, "null", :, objectValue, ., toString, (, ), ;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {]
[:, objectValue, ., toString, (, ), ;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return, new]
[;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return, new, ObjectPropListItem, (, getType, (, ), ,]
[., toString, (, ), ;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return, new, ObjectPropListItem, (]
[;, }, }, private, static, class, IntPropListItem, extends, AbstractPropListItem, {, private, static, final, long, serialVersionUID, =, 1L, ;, final, int]
[,, objectValue, ,, next, ), ;, }, }, private, static, class, IntPropListItem, extends, AbstractPropListItem, {, private, static, final, long, serialVersionUID]
[,, next, ), ;, }, }, private, static, class, IntPropListItem, extends, AbstractPropListItem, {, private, static, final, long, serialVersionUID, =, 1L]
[), ;, }, }, private, static, class, IntPropListItem, extends, AbstractPropListItem, {, private, static, final, long, serialVersionUID, =, 1L, ;, final]
[;, final, int, intValue, ;, IntPropListItem, (, int, propType, ,, int, intValue, ,, PropListItem, next, ), {, super, (, propType]
[,, next, ), ;, this, ., intValue, =, intValue, ;, }, @, Override, public, int, getIntValue, (, ), {, return]
[), ;, this, ., intValue, =, intValue, ;, }, @, Override, public, int, getIntValue, (, ), {, return, intValue, ;]
[=, intValue, ;, }, @, Override, public, int, getIntValue, (, ), {, return, intValue, ;, }, @, Override, public, Object]
[., intValue, =, intValue, ;, }, @, Override, public, int, getIntValue, (, ), {, return, intValue, ;, }, @, Override]
[;, }, @, Override, public, int, getIntValue, (, ), {, return, intValue, ;, }, @, Override, public, Object, getObjectValue, (]
[;, }, @, Override, public, Object, getObjectValue, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, @, Override, public]
[;, }, @, Override, public, String, toString, (, ), {, return, String, ., valueOf, (, intValue, ), ;, }, @]
[;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return, new, IntPropListItem, (, getType, (, ), ,]
[., valueOf, (, intValue, ), ;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return, new, IntPropListItem]
[), ;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return, new, IntPropListItem, (, getType, (, )]
[;, }, }, public, Node, (, int, nodeType, ), {, type, =, nodeType, ;, parent, =, null, ;, sourcePosition, =]
[,, intValue, ,, next, ), ;, }, }, public, Node, (, int, nodeType, ), {, type, =, nodeType, ;, parent]
[,, next, ), ;, }, }, public, Node, (, int, nodeType, ), {, type, =, nodeType, ;, parent, =, null]
[), ;, }, }, public, Node, (, int, nodeType, ), {, type, =, nodeType, ;, parent, =, null, ;, sourcePosition]
[=, nodeType, ;, parent, =, null, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node]
[;, parent, =, null, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, child, )]
[=, null, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, child, ), {, Preconditions]
[;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, child, ), {, Preconditions, ., checkArgument]
[=, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, child, ), {, Preconditions, ., checkArgument, (, child]
[;, }, public, Node, (, int, nodeType, ,, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==]
[;, }, public, Node, (, int, nodeType, ,, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==]
[;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =]
[., checkArgument, (, child, ., parent, ==, null, ,, "new child has existing parent", ), ;, Preconditions, ., checkArgument, (, child, ., next, ==]
[,, "new child has existing parent", ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType]
[==, null, ,, "new child has existing parent", ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ,, "new child has existing sibling", ), ;, type]
[., parent, ==, null, ,, "new child has existing parent", ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ,, "new child has existing sibling", )]
[,, "new child has existing parent", ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType]
[), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType, ;, parent]
[;, type, =, nodeType, ;, parent, =, null, ;, first, =, last, =, child, ;, child, ., next, =, null]
[., checkArgument, (, child, ., next, ==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;]
[,, "new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, last, =, child, ;, child, .]
[==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, last, =, child, ;]
[., next, ==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, last, =]
[,, "new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, last, =, child, ;, child, .]
[), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, last, =, child, ;, child, ., next, =]
[=, nodeType, ;, parent, =, null, ;, first, =, last, =, child, ;, child, ., next, =, null, ;, child]
[;, parent, =, null, ;, first, =, last, =, child, ;, child, ., next, =, null, ;, child, ., parent]
[=, null, ;, first, =, last, =, child, ;, child, ., next, =, null, ;, child, ., parent, =, this]
[;, first, =, last, =, child, ;, child, ., next, =, null, ;, child, ., parent, =, this, ;, sourcePosition]
[=, last, =, child, ;, child, ., next, =, null, ;, child, ., parent, =, this, ;, sourcePosition, =, -]
[=, child, ;, child, ., next, =, null, ;, child, ., parent, =, this, ;, sourcePosition, =, -, 1, ;]
[;, child, ., next, =, null, ;, child, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public]
[=, null, ;, child, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType]
[., next, =, null, ;, child, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (]
[;, child, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node]
[=, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right]
[., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,]
[;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right, ), {]
[=, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right, ), {, Preconditions, .]
[;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right, ), {, Preconditions, ., checkArgument, (, left]
[;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right, ), {, Preconditions, ., checkArgument, (, left]
[;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right, .]
[., checkArgument, (, left, ., parent, ==, null, ,, "first new child has existing parent", ), ;, Preconditions, ., checkArgument, (, left, ., next, ==]
[,, "first new child has existing parent", ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument]
[==, null, ,, "first new child has existing parent", ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions]
[., parent, ==, null, ,, "first new child has existing parent", ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", )]
[,, "first new child has existing parent", ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right]
[;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (, right, .]
[., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==]
[,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument]
[==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", ), ;, Preconditions]
[., next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", )]
[,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (, right]
[;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =]
[., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (, right, ., next, ==]
[,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ,, "second new child has existing sibling", ), ;, type, =, nodeType]
[==, null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ,, "second new child has existing sibling", ), ;, type]
[., parent, ==, null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ,, "second new child has existing sibling", )]
[,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ,, "second new child has existing sibling", ), ;, type, =, nodeType]
[), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent]
[;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next]
[., checkArgument, (, right, ., next, ==, null, ,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;]
[,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;]
[==, null, ,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =]
[., next, ==, null, ,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;]
[,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;]
[), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, .]
[=, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, right]
[;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, right, ;, left]
[=, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, right, ;, left, ., parent]
[;, first, =, left, ;, last, =, right, ;, left, ., next, =, right, ;, left, ., parent, =, this]
[=, left, ;, last, =, right, ;, left, ., next, =, right, ;, left, ., parent, =, this, ;, right]
[;, last, =, right, ;, left, ., next, =, right, ;, left, ., parent, =, this, ;, right, ., next]
[=, right, ;, left, ., next, =, right, ;, left, ., parent, =, this, ;, right, ., next, =, null]
[;, left, ., next, =, right, ;, left, ., parent, =, this, ;, right, ., next, =, null, ;, right]
[=, right, ;, left, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this]
[., next, =, right, ;, left, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent]
[;, left, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition]
[=, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;]
[., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -]
[;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public]
[=, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType]
[., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (]
[;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node]
[=, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid]
[., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,]
[;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node]
[=, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, right, )]
[;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, right, ), {, Preconditions, .]
[;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, right, ), {, Preconditions, .]
[;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==]
[., checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent]
[==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid]
[., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent]
[;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==]
[., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next]
[==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid]
[., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next]
[;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==]
[., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent]
[==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right]
[., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent]
[;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==]
[., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next]
[==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right]
[., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next]
[;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;]
[., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null]
[==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent]
[., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType]
[), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null]
[;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next]
[., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =]
[), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, .]
[==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;]
[., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =]
[), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, .]
[=, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid]
[;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left]
[=, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent]
[;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this]
[=, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid]
[;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next]
[=, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, right]
[;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, right, ;, mid]
[=, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, right, ;, mid, ., parent, =, this]
[., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, right, ;, mid, ., parent]
[;, left, ., parent, =, this, ;, mid, ., next, =, right, ;, mid, ., parent, =, this, ;, right]
[=, this, ;, mid, ., next, =, right, ;, mid, ., parent, =, this, ;, right, ., next, =, null]
[., parent, =, this, ;, mid, ., next, =, right, ;, mid, ., parent, =, this, ;, right, ., next]
[;, mid, ., next, =, right, ;, mid, ., parent, =, this, ;, right, ., next, =, null, ;, right]
[=, right, ;, mid, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this]
[., next, =, right, ;, mid, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent]
[;, mid, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition]
[=, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;]
[., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -]
[;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public]
[=, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType]
[., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (]
[;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node]
[=, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid]
[., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,]
[;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node]
[=, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, mid2, ,]
[;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, mid2, ,, Node, right, )]
[;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, mid2, ,, Node, right, )]
[;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==]
[., checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent]
[==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid]
[., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent]
[;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==]
[., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next]
[==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid]
[., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next]
[;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., parent, ==]
[., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., parent]
[==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2]
[., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., parent]
[;, Preconditions, ., checkArgument, (, mid2, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., next, ==]
[., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., parent, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, mid2, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., next]
[==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2]
[., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., parent, ==, null, ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, mid2, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., next]
[;, Preconditions, ., checkArgument, (, mid2, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==]
[., checkArgument, (, mid2, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., next, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, mid2, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent]
[==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right]
[., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., next, ==, null, ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, mid2, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent]
[;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==]
[., checkArgument, (, mid2, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next]
[==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right]
[., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next]
[;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;]
[., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null]
[==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent]
[., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType]
[), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null]
[;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next]
[., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =]
[), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, .]
[==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;]
[., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =]
[), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, .]
[=, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid]
[;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left]
[=, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent]
[;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this]
[=, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid]
[;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next]
[=, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, mid2]
[;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, mid2, ;, mid]
[=, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, mid2, ;, mid, ., parent, =, this]
[., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, mid2, ;, mid, ., parent]
[;, left, ., parent, =, this, ;, mid, ., next, =, mid2, ;, mid, ., parent, =, this, ;, mid2]
[=, this, ;, mid, ., next, =, mid2, ;, mid, ., parent, =, this, ;, mid2, ., next, =, right]
[., parent, =, this, ;, mid, ., next, =, mid2, ;, mid, ., parent, =, this, ;, mid2, ., next]
[;, mid, ., next, =, mid2, ;, mid, ., parent, =, this, ;, mid2, ., next, =, right, ;, mid2]
[=, mid2, ;, mid, ., parent, =, this, ;, mid2, ., next, =, right, ;, mid2, ., parent, =, this]
[., next, =, mid2, ;, mid, ., parent, =, this, ;, mid2, ., next, =, right, ;, mid2, ., parent]
[;, mid, ., parent, =, this, ;, mid2, ., next, =, right, ;, mid2, ., parent, =, this, ;, right]
[=, this, ;, mid2, ., next, =, right, ;, mid2, ., parent, =, this, ;, right, ., next, =, null]
[., parent, =, this, ;, mid2, ., next, =, right, ;, mid2, ., parent, =, this, ;, right, ., next]
[;, mid2, ., next, =, right, ;, mid2, ., parent, =, this, ;, right, ., next, =, null, ;, right]
[=, right, ;, mid2, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this]
[., next, =, right, ;, mid2, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent]
[;, mid2, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition]
[=, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;]
[., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -]
[;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public]
[=, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType]
[., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (]
[;, right, ., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, int]
[=, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, int, lineno, ,, int, charno]
[., parent, =, this, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, int, lineno, ,]
[;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, int, lineno, ,, int, charno, ), {]
[=, -, 1, ;, }, public, Node, (, int, nodeType, ,, int, lineno, ,, int, charno, ), {, type, =]
[;, }, public, Node, (, int, nodeType, ,, int, lineno, ,, int, charno, ), {, type, =, nodeType, ;, parent]
[;, }, public, Node, (, int, nodeType, ,, int, lineno, ,, int, charno, ), {, type, =, nodeType, ;, parent]
[=, nodeType, ;, parent, =, null, ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (]
[;, parent, =, null, ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType]
[=, null, ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node]
[;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, child, ,]
[=, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, child, ,, int, lineno]
[;, }, public, Node, (, int, nodeType, ,, Node, child, ,, int, lineno, ,, int, charno, ), {, this, (]
[,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, child, ,, int, lineno, ,, int, charno, )]
[), ;, }, public, Node, (, int, nodeType, ,, Node, child, ,, int, lineno, ,, int, charno, ), {, this]
[,, child, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,]
[), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, left]
[=, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right]
[;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right, ,, int, lineno, ,, int, charno, )]
[,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right, ,, int, lineno, ,]
[), ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right, ,, int, lineno, ,, int, charno]
[,, left, ,, right, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int]
[,, right, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,]
[), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, left]
[=, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid]
[;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, right, ,, int, lineno, ,]
[,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, right, ,]
[), ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, right, ,, int, lineno]
[,, left, ,, mid, ,, right, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node]
[,, mid, ,, right, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int]
[,, right, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,]
[), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, left]
[=, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid]
[;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, mid2, ,, Node, right, ,]
[,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, mid2, ,]
[), ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, mid2, ,, Node, right]
[,, left, ,, mid, ,, mid2, ,, right, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }]
[,, mid, ,, mid2, ,, right, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node]
[,, mid2, ,, right, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int]
[,, right, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,]
[), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, []
[=, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, [, ], children, ,]
[;, }, public, Node, (, int, nodeType, ,, Node, [, ], children, ,, int, lineno, ,, int, charno, ), {]
[,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, [, ], children, ,, int, lineno, ,, int]
[), ;, }, public, Node, (, int, nodeType, ,, Node, [, ], children, ,, int, lineno, ,, int, charno, )]
[,, children, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,]
[), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, []
[=, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, [, ], children, )]
[;, }, public, Node, (, int, nodeType, ,, Node, [, ], children, ), {, this, ., type, =, nodeType, ;]
[,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, [, ], children, ), {, this, ., type]
[), ;, }, public, Node, (, int, nodeType, ,, Node, [, ], children, ), {, this, ., type, =, nodeType]
[=, nodeType, ;, parent, =, null, ;, if, (, children, ., length, !=, 0, ), {, this, ., first, =]
[., type, =, nodeType, ;, parent, =, null, ;, if, (, children, ., length, !=, 0, ), {, this, .]
[;, parent, =, null, ;, if, (, children, ., length, !=, 0, ), {, this, ., first, =, children, []
[=, null, ;, if, (, children, ., length, !=, 0, ), {, this, ., first, =, children, [, 0, ]]
[;, if, (, children, ., length, !=, 0, ), {, this, ., first, =, children, [, 0, ], ;, this]
[), {, this, ., first, =, children, [, 0, ], ;, this, ., last, =, children, [, children, ., length]
[!=, 0, ), {, this, ., first, =, children, [, 0, ], ;, this, ., last, =, children, [, children]
[., length, !=, 0, ), {, this, ., first, =, children, [, 0, ], ;, this, ., last, =, children]
[), {, this, ., first, =, children, [, 0, ], ;, this, ., last, =, children, [, children, ., length]
[=, children, [, 0, ], ;, this, ., last, =, children, [, children, ., length, -, 1, ], ;, for]
[., first, =, children, [, 0, ], ;, this, ., last, =, children, [, children, ., length, -, 1, ]]
[;, this, ., last, =, children, [, children, ., length, -, 1, ], ;, for, (, int, i, =, 1]
[[, 0, ], ;, this, ., last, =, children, [, children, ., length, -, 1, ], ;, for, (, int]
[], ;, this, ., last, =, children, [, children, ., length, -, 1, ], ;, for, (, int, i, =]
[=, children, [, children, ., length, -, 1, ], ;, for, (, int, i, =, 1, ;, i, <, children]
[., last, =, children, [, children, ., length, -, 1, ], ;, for, (, int, i, =, 1, ;, i]
[;, for, (, int, i, =, 1, ;, i, <, children, ., length, ;, i, ++, ), {, if, (]
[[, children, ., length, -, 1, ], ;, for, (, int, i, =, 1, ;, i, <, children, ., length]
[], ;, for, (, int, i, =, 1, ;, i, <, children, ., length, ;, i, ++, ), {, if]
[-, 1, ], ;, for, (, int, i, =, 1, ;, i, <, children, ., length, ;, i, ++, )]
[., length, -, 1, ], ;, for, (, int, i, =, 1, ;, i, <, children, ., length, ;, i]
[], ;, for, (, int, i, =, 1, ;, i, <, children, ., length, ;, i, ++, ), {, if]
[;, i, <, children, ., length, ;, i, ++, ), {, if, (, null, !=, children, [, i, -, 1]
[;, i, ++, ), {, if, (, null, !=, children, [, i, -, 1, ], ., next, ), {, throw]
[<, children, ., length, ;, i, ++, ), {, if, (, null, !=, children, [, i, -, 1, ], .]
[;, i, ++, ), {, if, (, null, !=, children, [, i, -, 1, ], ., next, ), {, throw]
[., length, ;, i, ++, ), {, if, (, null, !=, children, [, i, -, 1, ], ., next, )]
[), {, if, (, null, !=, children, [, i, -, 1, ], ., next, ), {, throw, new, IllegalArgumentException, (]
[++, ), {, if, (, null, !=, children, [, i, -, 1, ], ., next, ), {, throw, new, IllegalArgumentException]
[), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children, [, i, -, 1, ], ., next, =, children]
[!=, children, [, i, -, 1, ], ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children]
[), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children, [, i, -, 1, ], ., next, =, children]
[., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children, [, i, -, 1, ], ., next]
[[, i, -, 1, ], ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children, [, i]
[], ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children, [, i, -, 1, ], .]
[-, 1, ], ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children, [, i, -, 1]
[], ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children, [, i, -, 1, ], .]
[;, }, children, [, i, -, 1, ], ., next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (]
[), ;, }, children, [, i, -, 1, ], ., next, =, children, [, i, ], ;, Preconditions, ., checkArgument]
[=, children, [, i, ], ;, Preconditions, ., checkArgument, (, children, [, i, -, 1, ], ., parent, ==, null]
[., next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (, children, [, i, -, 1, ], ., parent]
[[, i, -, 1, ], ., next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (, children, [, i]
[], ., next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (, children, [, i, -, 1, ], .]
[-, 1, ], ., next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (, children, [, i, -, 1]
[], ., next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (, children, [, i, -, 1, ], .]
[;, Preconditions, ., checkArgument, (, children, [, i, -, 1, ], ., parent, ==, null, ), ;, children, [, i]
[[, i, ], ;, Preconditions, ., checkArgument, (, children, [, i, -, 1, ], ., parent, ==, null, ), ;]
[], ;, Preconditions, ., checkArgument, (, children, [, i, -, 1, ], ., parent, ==, null, ), ;, children, []
[;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (, children, [, children]
[., checkArgument, (, children, [, i, -, 1, ], ., parent, ==, null, ), ;, children, [, i, -, 1]
[), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (, children, []
[==, null, ), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (]
[., parent, ==, null, ), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions, .]
[[, i, -, 1, ], ., parent, ==, null, ), ;, children, [, i, -, 1, ], ., parent, =]
[], ., parent, ==, null, ), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions]
[-, 1, ], ., parent, ==, null, ), ;, children, [, i, -, 1, ], ., parent, =, this, ;]
[], ., parent, ==, null, ), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions]
[), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (, children, []
[=, this, ;, }, Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1, ], ., parent, ==, null]
[., parent, =, this, ;, }, Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1, ], ., parent]
[[, i, -, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (, children, [, children, ., length]
[], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1, ], .]
[-, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1]
[], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1, ], .]
[;, }, Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1, ], ., parent, ==, null, ), ;]
[;, children, [, children, ., length, -, 1, ], ., parent, =, this, ;, if, (, null, !=, this, .]
[., checkArgument, (, children, [, children, ., length, -, 1, ], ., parent, ==, null, ), ;, children, [, children]
[), ;, children, [, children, ., length, -, 1, ], ., parent, =, this, ;, if, (, null, !=, this]
[==, null, ), ;, children, [, children, ., length, -, 1, ], ., parent, =, this, ;, if, (, null]
[., parent, ==, null, ), ;, children, [, children, ., length, -, 1, ], ., parent, =, this, ;, if]
[[, children, ., length, -, 1, ], ., parent, ==, null, ), ;, children, [, children, ., length, -, 1]
[], ., parent, ==, null, ), ;, children, [, children, ., length, -, 1, ], ., parent, =, this, ;]
[-, 1, ], ., parent, ==, null, ), ;, children, [, children, ., length, -, 1, ], ., parent, =]
[., length, -, 1, ], ., parent, ==, null, ), ;, children, [, children, ., length, -, 1, ], .]
[], ., parent, ==, null, ), ;, children, [, children, ., length, -, 1, ], ., parent, =, this, ;]
[), ;, children, [, children, ., length, -, 1, ], ., parent, =, this, ;, if, (, null, !=, this]
[=, this, ;, if, (, null, !=, this, ., last, ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", )]
[., parent, =, this, ;, if, (, null, !=, this, ., last, ., next, ), {, throw, new, IllegalArgumentException, (]
[[, children, ., length, -, 1, ], ., parent, =, this, ;, if, (, null, !=, this, ., last, .]
[], ., parent, =, this, ;, if, (, null, !=, this, ., last, ., next, ), {, throw, new, IllegalArgumentException]
[-, 1, ], ., parent, =, this, ;, if, (, null, !=, this, ., last, ., next, ), {, throw]
[., length, -, 1, ], ., parent, =, this, ;, if, (, null, !=, this, ., last, ., next, )]
[], ., parent, =, this, ;, if, (, null, !=, this, ., last, ., next, ), {, throw, new, IllegalArgumentException]
[;, if, (, null, !=, this, ., last, ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }]
[), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, }, }, public, static, Node, newNumber, (, double, number, )]
[!=, this, ., last, ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, }, }, public, static]
[), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, }, }, public, static, Node, newNumber, (, double, number, )]
[., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, }, }, public, static, Node, newNumber, (, double]
[., last, ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, }, }, public, static, Node, newNumber]
[;, }, }, }, public, static, Node, newNumber, (, double, number, ), {, return, new, NumberNode, (, number, ), ;]
[), ;, }, }, }, public, static, Node, newNumber, (, double, number, ), {, return, new, NumberNode, (, number, )]
[;, }, public, static, Node, newNumber, (, double, number, ,, int, lineno, ,, int, charno, ), {, return, new, NumberNode]
[), ;, }, public, static, Node, newNumber, (, double, number, ,, int, lineno, ,, int, charno, ), {, return, new]
[;, }, public, static, Node, newString, (, String, str, ), {, return, new, StringNode, (, Token, ., STRING, ,, str]
[,, lineno, ,, charno, ), ;, }, public, static, Node, newString, (, String, str, ), {, return, new, StringNode, (]
[,, charno, ), ;, }, public, static, Node, newString, (, String, str, ), {, return, new, StringNode, (, Token, .]
[), ;, }, public, static, Node, newString, (, String, str, ), {, return, new, StringNode, (, Token, ., STRING, ,]
[;, }, public, static, Node, newString, (, int, type, ,, String, str, ), {, return, new, StringNode, (, type, ,]
[,, str, ), ;, }, public, static, Node, newString, (, int, type, ,, String, str, ), {, return, new, StringNode]
[., STRING, ,, str, ), ;, }, public, static, Node, newString, (, int, type, ,, String, str, ), {, return]
[), ;, }, public, static, Node, newString, (, int, type, ,, String, str, ), {, return, new, StringNode, (, type]
[;, }, public, static, Node, newString, (, String, str, ,, int, lineno, ,, int, charno, ), {, return, new, StringNode]
[,, str, ), ;, }, public, static, Node, newString, (, String, str, ,, int, lineno, ,, int, charno, ), {]
[), ;, }, public, static, Node, newString, (, String, str, ,, int, lineno, ,, int, charno, ), {, return, new]
[;, }, public, static, Node, newString, (, int, type, ,, String, str, ,, int, lineno, ,, int, charno, ), {]
[,, str, ,, lineno, ,, charno, ), ;, }, public, static, Node, newString, (, int, type, ,, String, str, ,]
[., STRING, ,, str, ,, lineno, ,, charno, ), ;, }, public, static, Node, newString, (, int, type, ,, String]
[,, lineno, ,, charno, ), ;, }, public, static, Node, newString, (, int, type, ,, String, str, ,, int, lineno]
[,, charno, ), ;, }, public, static, Node, newString, (, int, type, ,, String, str, ,, int, lineno, ,, int]
[), ;, }, public, static, Node, newString, (, int, type, ,, String, str, ,, int, lineno, ,, int, charno, )]
[;, }, public, int, getType, (, ), {, return, type, ;, }, public, void, setType, (, int, type, ), {]
[,, str, ,, lineno, ,, charno, ), ;, }, public, int, getType, (, ), {, return, type, ;, }, public]
[,, lineno, ,, charno, ), ;, }, public, int, getType, (, ), {, return, type, ;, }, public, void, setType]
[,, charno, ), ;, }, public, int, getType, (, ), {, return, type, ;, }, public, void, setType, (, int]
[), ;, }, public, int, getType, (, ), {, return, type, ;, }, public, void, setType, (, int, type, )]
[;, }, public, void, setType, (, int, type, ), {, this, ., type, =, type, ;, }, public, boolean, hasChildren]
[=, type, ;, }, public, boolean, hasChildren, (, ), {, return, first, !=, null, ;, }, public, Node, getFirstChild, (]
[., type, =, type, ;, }, public, boolean, hasChildren, (, ), {, return, first, !=, null, ;, }, public, Node]
[;, }, public, boolean, hasChildren, (, ), {, return, first, !=, null, ;, }, public, Node, getFirstChild, (, ), {]
[;, }, public, Node, getFirstChild, (, ), {, return, first, ;, }, public, Node, getLastChild, (, ), {, return, last]
[!=, null, ;, }, public, Node, getFirstChild, (, ), {, return, first, ;, }, public, Node, getLastChild, (, ), {]
[;, }, public, Node, getFirstChild, (, ), {, return, first, ;, }, public, Node, getLastChild, (, ), {, return, last]
[;, }, public, Node, getLastChild, (, ), {, return, last, ;, }, public, Node, getNext, (, ), {, return, next]
[;, }, public, Node, getNext, (, ), {, return, next, ;, }, public, Node, getChildBefore, (, Node, child, ), {]
[;, }, public, Node, getChildBefore, (, Node, child, ), {, if, (, child, ==, first, ), {, return, null, ;]
[), {, return, null, ;, }, Node, n, =, first, ;, while, (, n, ., next, !=, child, ), {]
[==, first, ), {, return, null, ;, }, Node, n, =, first, ;, while, (, n, ., next, !=, child]
[), {, return, null, ;, }, Node, n, =, first, ;, while, (, n, ., next, !=, child, ), {]
[;, }, Node, n, =, first, ;, while, (, n, ., next, !=, child, ), {, n, =, n, .]
[;, while, (, n, ., next, !=, child, ), {, n, =, n, ., next, ;, if, (, n, ==]
[), {, n, =, n, ., next, ;, if, (, n, ==, null, ), {, throw, new, RuntimeException, (, "node is not a child"]
[!=, child, ), {, n, =, n, ., next, ;, if, (, n, ==, null, ), {, throw, new, RuntimeException]
[., next, !=, child, ), {, n, =, n, ., next, ;, if, (, n, ==, null, ), {, throw]
[), {, n, =, n, ., next, ;, if, (, n, ==, null, ), {, throw, new, RuntimeException, (, "node is not a child"]
[=, n, ., next, ;, if, (, n, ==, null, ), {, throw, new, RuntimeException, (, "node is not a child", ), ;, }]
[;, if, (, n, ==, null, ), {, throw, new, RuntimeException, (, "node is not a child", ), ;, }, }, return, n, ;]
[., next, ;, if, (, n, ==, null, ), {, throw, new, RuntimeException, (, "node is not a child", ), ;, }, }, return]
[), {, throw, new, RuntimeException, (, "node is not a child", ), ;, }, }, return, n, ;, }, public, Node, getChildAtIndex, (, int]
[==, null, ), {, throw, new, RuntimeException, (, "node is not a child", ), ;, }, }, return, n, ;, }, public, Node, getChildAtIndex]
[), {, throw, new, RuntimeException, (, "node is not a child", ), ;, }, }, return, n, ;, }, public, Node, getChildAtIndex, (, int]
[;, }, }, return, n, ;, }, public, Node, getChildAtIndex, (, int, i, ), {, Node, n, =, first, ;]
[), ;, }, }, return, n, ;, }, public, Node, getChildAtIndex, (, int, i, ), {, Node, n, =, first]
[;, }, public, Node, getChildAtIndex, (, int, i, ), {, Node, n, =, first, ;, while, (, i, >, 0]
[;, while, (, i, >, 0, ), {, n, =, n, ., next, ;, i, --, ;, }, return, n]
[), {, n, =, n, ., next, ;, i, --, ;, }, return, n, ;, }, public, int, getIndexOfChild, (]
[>, 0, ), {, n, =, n, ., next, ;, i, --, ;, }, return, n, ;, }, public, int]
[), {, n, =, n, ., next, ;, i, --, ;, }, return, n, ;, }, public, int, getIndexOfChild, (]
[=, n, ., next, ;, i, --, ;, }, return, n, ;, }, public, int, getIndexOfChild, (, Node, child, )]
[;, i, --, ;, }, return, n, ;, }, public, int, getIndexOfChild, (, Node, child, ), {, Node, n, =]
[., next, ;, i, --, ;, }, return, n, ;, }, public, int, getIndexOfChild, (, Node, child, ), {, Node]
[;, }, return, n, ;, }, public, int, getIndexOfChild, (, Node, child, ), {, Node, n, =, first, ;, int]
[--, ;, }, return, n, ;, }, public, int, getIndexOfChild, (, Node, child, ), {, Node, n, =, first, ;]
[;, }, public, int, getIndexOfChild, (, Node, child, ), {, Node, n, =, first, ;, int, i, =, 0, ;]
[;, int, i, =, 0, ;, while, (, n, !=, null, ), {, if, (, child, ==, n, ), {]
[;, while, (, n, !=, null, ), {, if, (, child, ==, n, ), {, return, i, ;, }, n]
[), {, if, (, child, ==, n, ), {, return, i, ;, }, n, =, n, ., next, ;, i]
[!=, null, ), {, if, (, child, ==, n, ), {, return, i, ;, }, n, =, n, ., next]
[), {, if, (, child, ==, n, ), {, return, i, ;, }, n, =, n, ., next, ;, i]
[), {, return, i, ;, }, n, =, n, ., next, ;, i, ++, ;, }, return, -, 1, ;]
[==, n, ), {, return, i, ;, }, n, =, n, ., next, ;, i, ++, ;, }, return, -]
[), {, return, i, ;, }, n, =, n, ., next, ;, i, ++, ;, }, return, -, 1, ;]
[;, }, n, =, n, ., next, ;, i, ++, ;, }, return, -, 1, ;, }, public, Node, getLastSibling]
[=, n, ., next, ;, i, ++, ;, }, return, -, 1, ;, }, public, Node, getLastSibling, (, ), {]
[;, i, ++, ;, }, return, -, 1, ;, }, public, Node, getLastSibling, (, ), {, Node, n, =, this]
[., next, ;, i, ++, ;, }, return, -, 1, ;, }, public, Node, getLastSibling, (, ), {, Node, n]
[;, }, return, -, 1, ;, }, public, Node, getLastSibling, (, ), {, Node, n, =, this, ;, while, (]
[++, ;, }, return, -, 1, ;, }, public, Node, getLastSibling, (, ), {, Node, n, =, this, ;, while]
[;, }, public, Node, getLastSibling, (, ), {, Node, n, =, this, ;, while, (, n, ., next, !=, null]
[;, }, public, Node, getLastSibling, (, ), {, Node, n, =, this, ;, while, (, n, ., next, !=, null]
[;, while, (, n, ., next, !=, null, ), {, n, =, n, ., next, ;, }, return, n, ;]
[), {, n, =, n, ., next, ;, }, return, n, ;, }, public, void, addChildToFront, (, Node, child, )]
[!=, null, ), {, n, =, n, ., next, ;, }, return, n, ;, }, public, void, addChildToFront, (, Node]
[., next, !=, null, ), {, n, =, n, ., next, ;, }, return, n, ;, }, public, void, addChildToFront]
[), {, n, =, n, ., next, ;, }, return, n, ;, }, public, void, addChildToFront, (, Node, child, )]
[=, n, ., next, ;, }, return, n, ;, }, public, void, addChildToFront, (, Node, child, ), {, Preconditions, .]
[;, }, return, n, ;, }, public, void, addChildToFront, (, Node, child, ), {, Preconditions, ., checkArgument, (, child, .]
[., next, ;, }, return, n, ;, }, public, void, addChildToFront, (, Node, child, ), {, Preconditions, ., checkArgument, (]
[;, }, public, void, addChildToFront, (, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, )]
[;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;, child, .]
[., checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;, child]
[==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this]
[., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent]
[), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;, child]
[;, child, ., parent, =, this, ;, child, ., next, =, first, ;, first, =, child, ;, if, (, last]
[., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;, child, ., next, =]
[), ;, child, ., parent, =, this, ;, child, ., next, =, first, ;, first, =, child, ;, if, (]
[==, null, ), ;, child, ., parent, =, this, ;, child, ., next, =, first, ;, first, =, child, ;]
[., next, ==, null, ), ;, child, ., parent, =, this, ;, child, ., next, =, first, ;, first, =]
[), ;, child, ., parent, =, this, ;, child, ., next, =, first, ;, first, =, child, ;, if, (]
[=, this, ;, child, ., next, =, first, ;, first, =, child, ;, if, (, last, ==, null, ), {]
[., parent, =, this, ;, child, ., next, =, first, ;, first, =, child, ;, if, (, last, ==, null]
[;, child, ., next, =, first, ;, first, =, child, ;, if, (, last, ==, null, ), {, last, =]
[=, first, ;, first, =, child, ;, if, (, last, ==, null, ), {, last, =, child, ;, }, }]
[., next, =, first, ;, first, =, child, ;, if, (, last, ==, null, ), {, last, =, child, ;]
[;, first, =, child, ;, if, (, last, ==, null, ), {, last, =, child, ;, }, }, public, void]
[=, child, ;, if, (, last, ==, null, ), {, last, =, child, ;, }, }, public, void, addChildToBack, (]
[;, if, (, last, ==, null, ), {, last, =, child, ;, }, }, public, void, addChildToBack, (, Node, child]
[), {, last, =, child, ;, }, }, public, void, addChildToBack, (, Node, child, ), {, Preconditions, ., checkArgument, (]
[==, null, ), {, last, =, child, ;, }, }, public, void, addChildToBack, (, Node, child, ), {, Preconditions, .]
[), {, last, =, child, ;, }, }, public, void, addChildToBack, (, Node, child, ), {, Preconditions, ., checkArgument, (]
[=, child, ;, }, }, public, void, addChildToBack, (, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent]
[;, }, }, public, void, addChildToBack, (, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null]
[;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;, child, .]
[., checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, )]
[), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;, child]
[==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this]
[., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent]
[), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;, child]
[;, child, ., parent, =, this, ;, child, ., next, =, null, ;, if, (, last, ==, null, ), {]
[., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;, child, ., next, =]
[), ;, child, ., parent, =, this, ;, child, ., next, =, null, ;, if, (, last, ==, null, )]
[==, null, ), ;, child, ., parent, =, this, ;, child, ., next, =, null, ;, if, (, last, ==]
[., next, ==, null, ), ;, child, ., parent, =, this, ;, child, ., next, =, null, ;, if, (]
[), ;, child, ., parent, =, this, ;, child, ., next, =, null, ;, if, (, last, ==, null, )]
[=, this, ;, child, ., next, =, null, ;, if, (, last, ==, null, ), {, first, =, last, =]
[., parent, =, this, ;, child, ., next, =, null, ;, if, (, last, ==, null, ), {, first, =]
[;, child, ., next, =, null, ;, if, (, last, ==, null, ), {, first, =, last, =, child, ;]
[=, null, ;, if, (, last, ==, null, ), {, first, =, last, =, child, ;, return, ;, }, last]
[., next, =, null, ;, if, (, last, ==, null, ), {, first, =, last, =, child, ;, return, ;]
[;, if, (, last, ==, null, ), {, first, =, last, =, child, ;, return, ;, }, last, ., next]
[), {, first, =, last, =, child, ;, return, ;, }, last, ., next, =, child, ;, last, =, child]
[==, null, ), {, first, =, last, =, child, ;, return, ;, }, last, ., next, =, child, ;, last]
[), {, first, =, last, =, child, ;, return, ;, }, last, ., next, =, child, ;, last, =, child]
[=, last, =, child, ;, return, ;, }, last, ., next, =, child, ;, last, =, child, ;, }, public]
[=, child, ;, return, ;, }, last, ., next, =, child, ;, last, =, child, ;, }, public, void, addChildrenToFront]
[;, return, ;, }, last, ., next, =, child, ;, last, =, child, ;, }, public, void, addChildrenToFront, (, Node]
[=, child, ;, last, =, child, ;, }, public, void, addChildrenToFront, (, Node, children, ), {, for, (, Node, child]
[., next, =, child, ;, last, =, child, ;, }, public, void, addChildrenToFront, (, Node, children, ), {, for, (]
[;, last, =, child, ;, }, public, void, addChildrenToFront, (, Node, children, ), {, for, (, Node, child, =, children]
[=, child, ;, }, public, void, addChildrenToFront, (, Node, children, ), {, for, (, Node, child, =, children, ;, child]
[;, }, public, void, addChildrenToFront, (, Node, children, ), {, for, (, Node, child, =, children, ;, child, !=, null]
[;, child, !=, null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==]
[;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, child]
[!=, null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, )]
[;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, child]
[=, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent]
[), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent, =, this, ;, }]
[., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent, =, this]
[;, child, ., parent, =, this, ;, }, Node, lastSib, =, children, ., getLastSibling, (, ), ;, lastSib, ., next]
[., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent, =, this, ;, }, Node, lastSib, =]
[), ;, child, ., parent, =, this, ;, }, Node, lastSib, =, children, ., getLastSibling, (, ), ;, lastSib, .]
[==, null, ), ;, child, ., parent, =, this, ;, }, Node, lastSib, =, children, ., getLastSibling, (, ), ;]
[., parent, ==, null, ), ;, child, ., parent, =, this, ;, }, Node, lastSib, =, children, ., getLastSibling, (]
[), ;, child, ., parent, =, this, ;, }, Node, lastSib, =, children, ., getLastSibling, (, ), ;, lastSib, .]
[=, this, ;, }, Node, lastSib, =, children, ., getLastSibling, (, ), ;, lastSib, ., next, =, first, ;, first]
[., parent, =, this, ;, }, Node, lastSib, =, children, ., getLastSibling, (, ), ;, lastSib, ., next, =, first]
[;, }, Node, lastSib, =, children, ., getLastSibling, (, ), ;, lastSib, ., next, =, first, ;, first, =, children]
[;, lastSib, ., next, =, first, ;, first, =, children, ;, if, (, last, ==, null, ), {, last, =]
[., getLastSibling, (, ), ;, lastSib, ., next, =, first, ;, first, =, children, ;, if, (, last, ==, null]
[=, first, ;, first, =, children, ;, if, (, last, ==, null, ), {, last, =, lastSib, ;, }, }]
[., next, =, first, ;, first, =, children, ;, if, (, last, ==, null, ), {, last, =, lastSib, ;]
[;, first, =, children, ;, if, (, last, ==, null, ), {, last, =, lastSib, ;, }, }, public, void]
[=, children, ;, if, (, last, ==, null, ), {, last, =, lastSib, ;, }, }, public, void, addChildrenToBack, (]
[;, if, (, last, ==, null, ), {, last, =, lastSib, ;, }, }, public, void, addChildrenToBack, (, Node, children]
[), {, last, =, lastSib, ;, }, }, public, void, addChildrenToBack, (, Node, children, ), {, addChildrenAfter, (, children, ,]
[==, null, ), {, last, =, lastSib, ;, }, }, public, void, addChildrenToBack, (, Node, children, ), {, addChildrenAfter, (]
[), {, last, =, lastSib, ;, }, }, public, void, addChildrenToBack, (, Node, children, ), {, addChildrenAfter, (, children, ,]
[=, lastSib, ;, }, }, public, void, addChildrenToBack, (, Node, children, ), {, addChildrenAfter, (, children, ,, getLastChild, (, )]
[;, }, }, public, void, addChildrenToBack, (, Node, children, ), {, addChildrenAfter, (, children, ,, getLastChild, (, ), ), ;]
[;, }, public, void, addChildBefore, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, !=, null]
[,, getLastChild, (, ), ), ;, }, public, void, addChildBefore, (, Node, newChild, ,, Node, node, ), {, Preconditions, .]
[), ;, }, public, void, addChildBefore, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, !=]
[;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, .]
[., checkArgument, (, node, !=, null, &&, node, ., parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (]
[,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument]
[&&, node, ., parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,]
[!=, null, &&, node, ., parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==]
[&&, node, ., parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,]
[,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument]
[==, this, ,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions]
[., parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", )]
[,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild]
[;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (, first, ==, node, )]
[., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==]
[,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (, first]
[==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, if]
[., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", )]
[,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (, first]
[), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (, first, ==, node]
[;, if, (, first, ==, node, ), {, newChild, ., parent, =, this, ;, newChild, ., next, =, first, ;]
[., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (, first, ==, node, ), {, newChild]
[,, "The new child node already has a parent.", ), ;, if, (, first, ==, node, ), {, newChild, ., parent, =, this, ;, newChild, ., next]
[==, null, ,, "The new child node already has a parent.", ), ;, if, (, first, ==, node, ), {, newChild, ., parent, =, this, ;, newChild]
[., parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (, first, ==, node, ), {, newChild, ., parent, =, this]
[,, "The new child node already has a parent.", ), ;, if, (, first, ==, node, ), {, newChild, ., parent, =, this, ;, newChild, ., next]
[), ;, if, (, first, ==, node, ), {, newChild, ., parent, =, this, ;, newChild, ., next, =, first]
[), {, newChild, ., parent, =, this, ;, newChild, ., next, =, first, ;, first, =, newChild, ;, return, ;]
[==, node, ), {, newChild, ., parent, =, this, ;, newChild, ., next, =, first, ;, first, =, newChild, ;]
[), {, newChild, ., parent, =, this, ;, newChild, ., next, =, first, ;, first, =, newChild, ;, return, ;]
[=, this, ;, newChild, ., next, =, first, ;, first, =, newChild, ;, return, ;, }, Node, prev, =, getChildBefore]
[., parent, =, this, ;, newChild, ., next, =, first, ;, first, =, newChild, ;, return, ;, }, Node, prev]
[;, newChild, ., next, =, first, ;, first, =, newChild, ;, return, ;, }, Node, prev, =, getChildBefore, (, node]
[=, first, ;, first, =, newChild, ;, return, ;, }, Node, prev, =, getChildBefore, (, node, ), ;, addChildAfter, (]
[., next, =, first, ;, first, =, newChild, ;, return, ;, }, Node, prev, =, getChildBefore, (, node, ), ;]
[;, first, =, newChild, ;, return, ;, }, Node, prev, =, getChildBefore, (, node, ), ;, addChildAfter, (, newChild, ,]
[=, newChild, ;, return, ;, }, Node, prev, =, getChildBefore, (, node, ), ;, addChildAfter, (, newChild, ,, prev, )]
[;, return, ;, }, Node, prev, =, getChildBefore, (, node, ), ;, addChildAfter, (, newChild, ,, prev, ), ;, }]
[;, addChildAfter, (, newChild, ,, prev, ), ;, }, public, void, addChildAfter, (, Node, newChild, ,, Node, node, ), {]
[), ;, addChildAfter, (, newChild, ,, prev, ), ;, }, public, void, addChildAfter, (, Node, newChild, ,, Node, node, )]
[;, }, public, void, addChildAfter, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (, newChild, ., next]
[,, prev, ), ;, }, public, void, addChildAfter, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (]
[), ;, }, public, void, addChildAfter, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (, newChild, .]
[;, addChildrenAfter, (, newChild, ,, node, ), ;, }, public, void, addChildrenAfter, (, Node, children, ,, Node, node, ), {]
[., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, addChildrenAfter, (, newChild, ,, node, ), ;, }]
[,, "The new child node has siblings.", ), ;, addChildrenAfter, (, newChild, ,, node, ), ;, }, public, void, addChildrenAfter, (, Node, children, ,, Node]
[==, null, ,, "The new child node has siblings.", ), ;, addChildrenAfter, (, newChild, ,, node, ), ;, }, public, void, addChildrenAfter, (, Node, children]
[., next, ==, null, ,, "The new child node has siblings.", ), ;, addChildrenAfter, (, newChild, ,, node, ), ;, }, public, void, addChildrenAfter, (]
[,, "The new child node has siblings.", ), ;, addChildrenAfter, (, newChild, ,, node, ), ;, }, public, void, addChildrenAfter, (, Node, children, ,, Node]
[), ;, addChildrenAfter, (, newChild, ,, node, ), ;, }, public, void, addChildrenAfter, (, Node, children, ,, Node, node, )]
[;, }, public, void, addChildrenAfter, (, Node, children, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, ==, null]
[,, node, ), ;, }, public, void, addChildrenAfter, (, Node, children, ,, Node, node, ), {, Preconditions, ., checkArgument, (]
[), ;, }, public, void, addChildrenAfter, (, Node, children, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, ==]
[;, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {, Preconditions]
[., checkArgument, (, node, ==, null, ||, node, ., parent, ==, this, ), ;, for, (, Node, child, =, children]
[), ;, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {]
[||, node, ., parent, ==, this, ), ;, for, (, Node, child, =, children, ;, child, !=, null, ;, child]
[==, null, ||, node, ., parent, ==, this, ), ;, for, (, Node, child, =, children, ;, child, !=, null]
[||, node, ., parent, ==, this, ), ;, for, (, Node, child, =, children, ;, child, !=, null, ;, child]
[), ;, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {]
[==, this, ), ;, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next]
[., parent, ==, this, ), ;, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =, child]
[), ;, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {]
[;, child, !=, null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==]
[;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, child]
[!=, null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, )]
[;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, child]
[=, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent]
[), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent, =, this, ;, }]
[., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent, =, this]
[;, child, ., parent, =, this, ;, }, Node, lastSibling, =, children, ., getLastSibling, (, ), ;, if, (, node]
[., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent, =, this, ;, }, Node, lastSibling, =]
[), ;, child, ., parent, =, this, ;, }, Node, lastSibling, =, children, ., getLastSibling, (, ), ;, if, (]
[==, null, ), ;, child, ., parent, =, this, ;, }, Node, lastSibling, =, children, ., getLastSibling, (, ), ;]
[., parent, ==, null, ), ;, child, ., parent, =, this, ;, }, Node, lastSibling, =, children, ., getLastSibling, (]
[), ;, child, ., parent, =, this, ;, }, Node, lastSibling, =, children, ., getLastSibling, (, ), ;, if, (]
[=, this, ;, }, Node, lastSibling, =, children, ., getLastSibling, (, ), ;, if, (, node, !=, null, ), {]
[., parent, =, this, ;, }, Node, lastSibling, =, children, ., getLastSibling, (, ), ;, if, (, node, !=, null]
[;, }, Node, lastSibling, =, children, ., getLastSibling, (, ), ;, if, (, node, !=, null, ), {, Node, oldNext]
[;, if, (, node, !=, null, ), {, Node, oldNext, =, node, ., next, ;, node, ., next, =, children]
[., getLastSibling, (, ), ;, if, (, node, !=, null, ), {, Node, oldNext, =, node, ., next, ;, node]
[), {, Node, oldNext, =, node, ., next, ;, node, ., next, =, children, ;, lastSibling, ., next, =, oldNext]
[!=, null, ), {, Node, oldNext, =, node, ., next, ;, node, ., next, =, children, ;, lastSibling, ., next]
[), {, Node, oldNext, =, node, ., next, ;, node, ., next, =, children, ;, lastSibling, ., next, =, oldNext]
[;, node, ., next, =, children, ;, lastSibling, ., next, =, oldNext, ;, if, (, node, ==, last, ), {]
[., next, ;, node, ., next, =, children, ;, lastSibling, ., next, =, oldNext, ;, if, (, node, ==, last]
[=, children, ;, lastSibling, ., next, =, oldNext, ;, if, (, node, ==, last, ), {, last, =, lastSibling, ;]
[., next, =, children, ;, lastSibling, ., next, =, oldNext, ;, if, (, node, ==, last, ), {, last, =]
[;, lastSibling, ., next, =, oldNext, ;, if, (, node, ==, last, ), {, last, =, lastSibling, ;, }, }]
[=, oldNext, ;, if, (, node, ==, last, ), {, last, =, lastSibling, ;, }, }, else, {, if, (]
[., next, =, oldNext, ;, if, (, node, ==, last, ), {, last, =, lastSibling, ;, }, }, else, {]
[;, if, (, node, ==, last, ), {, last, =, lastSibling, ;, }, }, else, {, if, (, first, !=]
[), {, last, =, lastSibling, ;, }, }, else, {, if, (, first, !=, null, ), {, lastSibling, ., next]
[==, last, ), {, last, =, lastSibling, ;, }, }, else, {, if, (, first, !=, null, ), {, lastSibling]
[), {, last, =, lastSibling, ;, }, }, else, {, if, (, first, !=, null, ), {, lastSibling, ., next]
[=, lastSibling, ;, }, }, else, {, if, (, first, !=, null, ), {, lastSibling, ., next, =, first, ;]
[;, }, }, else, {, if, (, first, !=, null, ), {, lastSibling, ., next, =, first, ;, }, else]
[), {, lastSibling, ., next, =, first, ;, }, else, {, last, =, lastSibling, ;, }, first, =, children, ;]
[!=, null, ), {, lastSibling, ., next, =, first, ;, }, else, {, last, =, lastSibling, ;, }, first, =]
[), {, lastSibling, ., next, =, first, ;, }, else, {, last, =, lastSibling, ;, }, first, =, children, ;]
[=, first, ;, }, else, {, last, =, lastSibling, ;, }, first, =, children, ;, }, }, public, void, removeChild]
[., next, =, first, ;, }, else, {, last, =, lastSibling, ;, }, first, =, children, ;, }, }, public]
[;, }, else, {, last, =, lastSibling, ;, }, first, =, children, ;, }, }, public, void, removeChild, (, Node]
[=, lastSibling, ;, }, first, =, children, ;, }, }, public, void, removeChild, (, Node, child, ), {, Node, prev]
[;, }, first, =, children, ;, }, }, public, void, removeChild, (, Node, child, ), {, Node, prev, =, getChildBefore]
[=, children, ;, }, }, public, void, removeChild, (, Node, child, ), {, Node, prev, =, getChildBefore, (, child, )]
[;, }, }, public, void, removeChild, (, Node, child, ), {, Node, prev, =, getChildBefore, (, child, ), ;, if]
[;, if, (, prev, ==, null, ), first, =, first, ., next, ;, else, prev, ., next, =, child, .]
[), ;, if, (, prev, ==, null, ), first, =, first, ., next, ;, else, prev, ., next, =, child]
[), first, =, first, ., next, ;, else, prev, ., next, =, child, ., next, ;, if, (, child, ==]
[==, null, ), first, =, first, ., next, ;, else, prev, ., next, =, child, ., next, ;, if, (]
[), first, =, first, ., next, ;, else, prev, ., next, =, child, ., next, ;, if, (, child, ==]
[=, first, ., next, ;, else, prev, ., next, =, child, ., next, ;, if, (, child, ==, last, )]
[;, else, prev, ., next, =, child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;]
[., next, ;, else, prev, ., next, =, child, ., next, ;, if, (, child, ==, last, ), last, =]
[=, child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =, null]
[., next, =, child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next]
[;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =, null, ;, child, ., parent]
[., next, ;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =, null, ;, child]
[), last, =, prev, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }, public, void]
[==, last, ), last, =, prev, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }]
[), last, =, prev, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }, public, void]
[=, prev, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }, public, void, replaceChild, (]
[;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }, public, void, replaceChild, (, Node, child]
[=, null, ;, child, ., parent, =, null, ;, }, public, void, replaceChild, (, Node, child, ,, Node, newChild, )]
[., next, =, null, ;, child, ., parent, =, null, ;, }, public, void, replaceChild, (, Node, child, ,, Node]
[;, child, ., parent, =, null, ;, }, public, void, replaceChild, (, Node, child, ,, Node, newChild, ), {, Preconditions]
[=, null, ;, }, public, void, replaceChild, (, Node, child, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (, newChild]
[., parent, =, null, ;, }, public, void, replaceChild, (, Node, child, ,, Node, newChild, ), {, Preconditions, ., checkArgument]
[;, }, public, void, replaceChild, (, Node, child, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (, newChild, ., next]
[;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, child, )]
[., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==]
[,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom]
[==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild]
[., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", )]
[,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom]
[), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, child]
[;, newChild, ., copyInformationFrom, (, child, ), ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =]
[., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, child, ), ;, newChild]
[,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, child, ), ;, newChild, ., next, =, child, ., next, ;, newChild]
[==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, child, ), ;, newChild, ., next, =, child, ., next]
[., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, child, ), ;, newChild, ., next, =, child]
[,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, child, ), ;, newChild, ., next, =, child, ., next, ;, newChild]
[), ;, newChild, ., copyInformationFrom, (, child, ), ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent]
[;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =, this, ;, if, (, child, ==, first]
[., copyInformationFrom, (, child, ), ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =, this, ;]
[), ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =, this, ;, if, (, child, ==]
[=, child, ., next, ;, newChild, ., parent, =, this, ;, if, (, child, ==, first, ), {, first, =]
[., next, =, child, ., next, ;, newChild, ., parent, =, this, ;, if, (, child, ==, first, ), {]
[;, newChild, ., parent, =, this, ;, if, (, child, ==, first, ), {, first, =, newChild, ;, }, else]
[., next, ;, newChild, ., parent, =, this, ;, if, (, child, ==, first, ), {, first, =, newChild, ;]
[=, this, ;, if, (, child, ==, first, ), {, first, =, newChild, ;, }, else, {, Node, prev, =]
[., parent, =, this, ;, if, (, child, ==, first, ), {, first, =, newChild, ;, }, else, {, Node]
[;, if, (, child, ==, first, ), {, first, =, newChild, ;, }, else, {, Node, prev, =, getChildBefore, (]
[), {, first, =, newChild, ;, }, else, {, Node, prev, =, getChildBefore, (, child, ), ;, prev, ., next]
[==, first, ), {, first, =, newChild, ;, }, else, {, Node, prev, =, getChildBefore, (, child, ), ;, prev]
[), {, first, =, newChild, ;, }, else, {, Node, prev, =, getChildBefore, (, child, ), ;, prev, ., next]
[=, newChild, ;, }, else, {, Node, prev, =, getChildBefore, (, child, ), ;, prev, ., next, =, newChild, ;]
[;, }, else, {, Node, prev, =, getChildBefore, (, child, ), ;, prev, ., next, =, newChild, ;, }, if]
[;, prev, ., next, =, newChild, ;, }, if, (, child, ==, last, ), last, =, newChild, ;, child, .]
[), ;, prev, ., next, =, newChild, ;, }, if, (, child, ==, last, ), last, =, newChild, ;, child]
[=, newChild, ;, }, if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =, null, ;]
[., next, =, newChild, ;, }, if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =]
[;, }, if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =, null, ;, child, .]
[), last, =, newChild, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }, public, void]
[==, last, ), last, =, newChild, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }]
[), last, =, newChild, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }, public, void]
[=, newChild, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }, public, void, replaceChildAfter, (]
[;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }, public, void, replaceChildAfter, (, Node, prevChild]
[=, null, ;, child, ., parent, =, null, ;, }, public, void, replaceChildAfter, (, Node, prevChild, ,, Node, newChild, )]
[., next, =, null, ;, child, ., parent, =, null, ;, }, public, void, replaceChildAfter, (, Node, prevChild, ,, Node]
[;, child, ., parent, =, null, ;, }, public, void, replaceChildAfter, (, Node, prevChild, ,, Node, newChild, ), {, Preconditions]
[=, null, ;, }, public, void, replaceChildAfter, (, Node, prevChild, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (, prevChild]
[., parent, =, null, ;, }, public, void, replaceChildAfter, (, Node, prevChild, ,, Node, newChild, ), {, Preconditions, ., checkArgument]
[;, }, public, void, replaceChildAfter, (, Node, prevChild, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (, prevChild, ., parent]
[;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, .]
[., checkArgument, (, prevChild, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==]
[,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument]
[==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions]
[., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", )]
[,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument]
[), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild]
[;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, prevChild, )]
[., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==]
[,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom]
[==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild]
[., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", )]
[,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom]
[), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, prevChild]
[;, newChild, ., copyInformationFrom, (, prevChild, ), ;, Node, child, =, prevChild, ., next, ;, newChild, ., next, =, child]
[., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, prevChild, ), ;, Node]
[,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, prevChild, ), ;, Node, child, =, prevChild, ., next, ;, newChild, .]
[==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, prevChild, ), ;, Node, child, =, prevChild, ., next, ;]
[., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, prevChild, ), ;, Node, child, =, prevChild, .]
[,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, prevChild, ), ;, Node, child, =, prevChild, ., next, ;, newChild, .]
[), ;, newChild, ., copyInformationFrom, (, prevChild, ), ;, Node, child, =, prevChild, ., next, ;, newChild, ., next, =]
[;, Node, child, =, prevChild, ., next, ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =]
[., copyInformationFrom, (, prevChild, ), ;, Node, child, =, prevChild, ., next, ;, newChild, ., next, =, child, ., next]
[), ;, Node, child, =, prevChild, ., next, ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent]
[;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =, this, ;, prevChild, ., next, =, newChild]
[., next, ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =, this, ;, prevChild, ., next]
[=, child, ., next, ;, newChild, ., parent, =, this, ;, prevChild, ., next, =, newChild, ;, if, (, child]
[., next, =, child, ., next, ;, newChild, ., parent, =, this, ;, prevChild, ., next, =, newChild, ;, if]
[;, newChild, ., parent, =, this, ;, prevChild, ., next, =, newChild, ;, if, (, child, ==, last, ), last]
[., next, ;, newChild, ., parent, =, this, ;, prevChild, ., next, =, newChild, ;, if, (, child, ==, last]
[=, this, ;, prevChild, ., next, =, newChild, ;, if, (, child, ==, last, ), last, =, newChild, ;, child]
[., parent, =, this, ;, prevChild, ., next, =, newChild, ;, if, (, child, ==, last, ), last, =, newChild]
[;, prevChild, ., next, =, newChild, ;, if, (, child, ==, last, ), last, =, newChild, ;, child, ., next]
[=, newChild, ;, if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =, null, ;, child]
[., next, =, newChild, ;, if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =, null]
[;, if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =, null, ;, child, ., parent]
[), last, =, newChild, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }, @, VisibleForTesting]
[==, last, ), last, =, newChild, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }]
[), last, =, newChild, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }, @, VisibleForTesting]
[=, newChild, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }, @, VisibleForTesting, PropListItem, lookupProperty]
[;, child, ., next, =, null, ;, child, ., parent, =, null, ;, }, @, VisibleForTesting, PropListItem, lookupProperty, (, int]
[=, null, ;, child, ., parent, =, null, ;, }, @, VisibleForTesting, PropListItem, lookupProperty, (, int, propType, ), {, PropListItem]
[., next, =, null, ;, child, ., parent, =, null, ;, }, @, VisibleForTesting, PropListItem, lookupProperty, (, int, propType, )]
[;, child, ., parent, =, null, ;, }, @, VisibleForTesting, PropListItem, lookupProperty, (, int, propType, ), {, PropListItem, x, =]
[=, null, ;, }, @, VisibleForTesting, PropListItem, lookupProperty, (, int, propType, ), {, PropListItem, x, =, propListHead, ;, while, (]
[., parent, =, null, ;, }, @, VisibleForTesting, PropListItem, lookupProperty, (, int, propType, ), {, PropListItem, x, =, propListHead, ;]
[;, }, @, VisibleForTesting, PropListItem, lookupProperty, (, int, propType, ), {, PropListItem, x, =, propListHead, ;, while, (, x, !=]
[;, while, (, x, !=, null, &&, propType, !=, x, ., getType, (, ), ), {, x, =, x, .]
[), {, x, =, x, ., getNext, (, ), ;, }, return, x, ;, }, public, Node, clonePropsFrom, (, Node]
[&&, propType, !=, x, ., getType, (, ), ), {, x, =, x, ., getNext, (, ), ;, }, return]
[!=, null, &&, propType, !=, x, ., getType, (, ), ), {, x, =, x, ., getNext, (, ), ;]
[&&, propType, !=, x, ., getType, (, ), ), {, x, =, x, ., getNext, (, ), ;, }, return]
[), {, x, =, x, ., getNext, (, ), ;, }, return, x, ;, }, public, Node, clonePropsFrom, (, Node]
[!=, x, ., getType, (, ), ), {, x, =, x, ., getNext, (, ), ;, }, return, x, ;]
[), {, x, =, x, ., getNext, (, ), ;, }, return, x, ;, }, public, Node, clonePropsFrom, (, Node]
[., getType, (, ), ), {, x, =, x, ., getNext, (, ), ;, }, return, x, ;, }, public]
[=, x, ., getNext, (, ), ;, }, return, x, ;, }, public, Node, clonePropsFrom, (, Node, other, ), {]
[;, }, return, x, ;, }, public, Node, clonePropsFrom, (, Node, other, ), {, Preconditions, ., checkState, (, this, .]
[., getNext, (, ), ;, }, return, x, ;, }, public, Node, clonePropsFrom, (, Node, other, ), {, Preconditions, .]
[;, }, public, Node, clonePropsFrom, (, Node, other, ), {, Preconditions, ., checkState, (, this, ., propListHead, ==, null, ,]
[;, this, ., propListHead, =, other, ., propListHead, ;, return, this, ;, }, public, void, removeProp, (, int, propType, )]
[., checkState, (, this, ., propListHead, ==, null, ,, "Node has existing properties.", ), ;, this, ., propListHead, =, other, ., propListHead, ;]
[,, "Node has existing properties.", ), ;, this, ., propListHead, =, other, ., propListHead, ;, return, this, ;, }, public, void, removeProp, (]
[==, null, ,, "Node has existing properties.", ), ;, this, ., propListHead, =, other, ., propListHead, ;, return, this, ;, }, public, void]
[., propListHead, ==, null, ,, "Node has existing properties.", ), ;, this, ., propListHead, =, other, ., propListHead, ;, return, this, ;, }]
[,, "Node has existing properties.", ), ;, this, ., propListHead, =, other, ., propListHead, ;, return, this, ;, }, public, void, removeProp, (]
[), ;, this, ., propListHead, =, other, ., propListHead, ;, return, this, ;, }, public, void, removeProp, (, int, propType]
[=, other, ., propListHead, ;, return, this, ;, }, public, void, removeProp, (, int, propType, ), {, PropListItem, result, =]
[., propListHead, =, other, ., propListHead, ;, return, this, ;, }, public, void, removeProp, (, int, propType, ), {, PropListItem]
[;, return, this, ;, }, public, void, removeProp, (, int, propType, ), {, PropListItem, result, =, removeProp, (, propListHead, ,]
[., propListHead, ;, return, this, ;, }, public, void, removeProp, (, int, propType, ), {, PropListItem, result, =, removeProp, (]
[;, }, public, void, removeProp, (, int, propType, ), {, PropListItem, result, =, removeProp, (, propListHead, ,, propType, ), ;]
[;, if, (, result, !=, propListHead, ), {, propListHead, =, result, ;, }, }, private, PropListItem, removeProp, (, PropListItem, item]
[,, propType, ), ;, if, (, result, !=, propListHead, ), {, propListHead, =, result, ;, }, }, private, PropListItem, removeProp]
[), ;, if, (, result, !=, propListHead, ), {, propListHead, =, result, ;, }, }, private, PropListItem, removeProp, (, PropListItem]
[), {, propListHead, =, result, ;, }, }, private, PropListItem, removeProp, (, PropListItem, item, ,, int, propType, ), {, if]
[!=, propListHead, ), {, propListHead, =, result, ;, }, }, private, PropListItem, removeProp, (, PropListItem, item, ,, int, propType, )]
[), {, propListHead, =, result, ;, }, }, private, PropListItem, removeProp, (, PropListItem, item, ,, int, propType, ), {, if]
[=, result, ;, }, }, private, PropListItem, removeProp, (, PropListItem, item, ,, int, propType, ), {, if, (, item, ==]
[;, }, }, private, PropListItem, removeProp, (, PropListItem, item, ,, int, propType, ), {, if, (, item, ==, null, )]
[), {, return, null, ;, }, else, if, (, item, ., getType, (, ), ==, propType, ), {, return, item]
[==, null, ), {, return, null, ;, }, else, if, (, item, ., getType, (, ), ==, propType, ), {]
[), {, return, null, ;, }, else, if, (, item, ., getType, (, ), ==, propType, ), {, return, item]
[;, }, else, if, (, item, ., getType, (, ), ==, propType, ), {, return, item, ., getNext, (, )]
[), {, return, item, ., getNext, (, ), ;, }, else, {, PropListItem, result, =, removeProp, (, item, ., getNext]
[==, propType, ), {, return, item, ., getNext, (, ), ;, }, else, {, PropListItem, result, =, removeProp, (, item]
[., getType, (, ), ==, propType, ), {, return, item, ., getNext, (, ), ;, }, else, {, PropListItem, result]
[), {, return, item, ., getNext, (, ), ;, }, else, {, PropListItem, result, =, removeProp, (, item, ., getNext]
[;, }, else, {, PropListItem, result, =, removeProp, (, item, ., getNext, (, ), ,, propType, ), ;, if, (]
[., getNext, (, ), ;, }, else, {, PropListItem, result, =, removeProp, (, item, ., getNext, (, ), ,, propType]
[;, if, (, result, !=, item, ., getNext, (, ), ), {, return, item, ., chain, (, result, ), ;]
[,, propType, ), ;, if, (, result, !=, item, ., getNext, (, ), ), {, return, item, ., chain, (]
[., getNext, (, ), ,, propType, ), ;, if, (, result, !=, item, ., getNext, (, ), ), {, return]
[), ;, if, (, result, !=, item, ., getNext, (, ), ), {, return, item, ., chain, (, result, )]
[), {, return, item, ., chain, (, result, ), ;, }, else, {, return, item, ;, }, }, }, public]
[!=, item, ., getNext, (, ), ), {, return, item, ., chain, (, result, ), ;, }, else, {, return]
[), {, return, item, ., chain, (, result, ), ;, }, else, {, return, item, ;, }, }, }, public]
[., getNext, (, ), ), {, return, item, ., chain, (, result, ), ;, }, else, {, return, item, ;]
[;, }, else, {, return, item, ;, }, }, }, public, Object, getProp, (, int, propType, ), {, PropListItem, item]
[., chain, (, result, ), ;, }, else, {, return, item, ;, }, }, }, public, Object, getProp, (, int]
[), ;, }, else, {, return, item, ;, }, }, }, public, Object, getProp, (, int, propType, ), {, PropListItem]
[;, }, }, }, public, Object, getProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;]
[;, if, (, item, ==, null, ), {, return, null, ;, }, return, item, ., getObjectValue, (, ), ;, }]
[), ;, if, (, item, ==, null, ), {, return, null, ;, }, return, item, ., getObjectValue, (, ), ;]
[), {, return, null, ;, }, return, item, ., getObjectValue, (, ), ;, }, public, boolean, getBooleanProp, (, int, propType]
[==, null, ), {, return, null, ;, }, return, item, ., getObjectValue, (, ), ;, }, public, boolean, getBooleanProp, (]
[), {, return, null, ;, }, return, item, ., getObjectValue, (, ), ;, }, public, boolean, getBooleanProp, (, int, propType]
[;, }, return, item, ., getObjectValue, (, ), ;, }, public, boolean, getBooleanProp, (, int, propType, ), {, return, getIntProp]
[;, }, public, boolean, getBooleanProp, (, int, propType, ), {, return, getIntProp, (, propType, ), !=, 0, ;, }, public]
[., getObjectValue, (, ), ;, }, public, boolean, getBooleanProp, (, int, propType, ), {, return, getIntProp, (, propType, ), !=]
[;, }, public, int, getIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (]
[!=, 0, ;, }, public, int, getIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;]
[), !=, 0, ;, }, public, int, getIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, )]
[;, }, public, int, getIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (]
[;, if, (, item, ==, null, ), {, return, 0, ;, }, return, item, ., getIntValue, (, ), ;, }]
[), ;, if, (, item, ==, null, ), {, return, 0, ;, }, return, item, ., getIntValue, (, ), ;]
[), {, return, 0, ;, }, return, item, ., getIntValue, (, ), ;, }, public, int, getExistingIntProp, (, int, propType]
[==, null, ), {, return, 0, ;, }, return, item, ., getIntValue, (, ), ;, }, public, int, getExistingIntProp, (]
[), {, return, 0, ;, }, return, item, ., getIntValue, (, ), ;, }, public, int, getExistingIntProp, (, int, propType]
[;, }, return, item, ., getIntValue, (, ), ;, }, public, int, getExistingIntProp, (, int, propType, ), {, PropListItem, item]
[;, }, public, int, getExistingIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (]
[., getIntValue, (, ), ;, }, public, int, getExistingIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType]
[;, if, (, item, ==, null, ), {, throw, new, IllegalStateException, (, "missing prop: ", +, propType, ), ;, }, return, item]
[), ;, if, (, item, ==, null, ), {, throw, new, IllegalStateException, (, "missing prop: ", +, propType, ), ;, }, return]
[), {, throw, new, IllegalStateException, (, "missing prop: ", +, propType, ), ;, }, return, item, ., getIntValue, (, ), ;, }]
[==, null, ), {, throw, new, IllegalStateException, (, "missing prop: ", +, propType, ), ;, }, return, item, ., getIntValue, (, )]
[), {, throw, new, IllegalStateException, (, "missing prop: ", +, propType, ), ;, }, return, item, ., getIntValue, (, ), ;, }]
[;, }, return, item, ., getIntValue, (, ), ;, }, public, void, putProp, (, int, propType, ,, Object, value, )]
[), ;, }, return, item, ., getIntValue, (, ), ;, }, public, void, putProp, (, int, propType, ,, Object, value]
[+, propType, ), ;, }, return, item, ., getIntValue, (, ), ;, }, public, void, putProp, (, int, propType, ,]
[), ;, }, return, item, ., getIntValue, (, ), ;, }, public, void, putProp, (, int, propType, ,, Object, value]
[;, }, public, void, putProp, (, int, propType, ,, Object, value, ), {, removeProp, (, propType, ), ;, if, (]
[., getIntValue, (, ), ;, }, public, void, putProp, (, int, propType, ,, Object, value, ), {, removeProp, (, propType]
[;, if, (, value, !=, null, ), {, propListHead, =, createProp, (, propType, ,, value, ,, propListHead, ), ;, }]
[), ;, if, (, value, !=, null, ), {, propListHead, =, createProp, (, propType, ,, value, ,, propListHead, ), ;]
[), {, propListHead, =, createProp, (, propType, ,, value, ,, propListHead, ), ;, }, }, public, void, putBooleanProp, (, int]
[!=, null, ), {, propListHead, =, createProp, (, propType, ,, value, ,, propListHead, ), ;, }, }, public, void, putBooleanProp]
[), {, propListHead, =, createProp, (, propType, ,, value, ,, propListHead, ), ;, }, }, public, void, putBooleanProp, (, int]
[=, createProp, (, propType, ,, value, ,, propListHead, ), ;, }, }, public, void, putBooleanProp, (, int, propType, ,, boolean]
[;, }, }, public, void, putBooleanProp, (, int, propType, ,, boolean, value, ), {, putIntProp, (, propType, ,, value, ?]
[,, value, ,, propListHead, ), ;, }, }, public, void, putBooleanProp, (, int, propType, ,, boolean, value, ), {, putIntProp]
[,, propListHead, ), ;, }, }, public, void, putBooleanProp, (, int, propType, ,, boolean, value, ), {, putIntProp, (, propType]
[), ;, }, }, public, void, putBooleanProp, (, int, propType, ,, boolean, value, ), {, putIntProp, (, propType, ,, value]
[;, }, public, void, putIntProp, (, int, propType, ,, int, value, ), {, removeProp, (, propType, ), ;, if, (]
[,, value, ?, 1, :, 0, ), ;, }, public, void, putIntProp, (, int, propType, ,, int, value, ), {]
[), ;, }, public, void, putIntProp, (, int, propType, ,, int, value, ), {, removeProp, (, propType, ), ;, if]
[?, 1, :, 0, ), ;, }, public, void, putIntProp, (, int, propType, ,, int, value, ), {, removeProp, (]
[:, 0, ), ;, }, public, void, putIntProp, (, int, propType, ,, int, value, ), {, removeProp, (, propType, )]
[), ;, }, public, void, putIntProp, (, int, propType, ,, int, value, ), {, removeProp, (, propType, ), ;, if]
[;, if, (, value, !=, 0, ), {, propListHead, =, createProp, (, propType, ,, value, ,, propListHead, ), ;, }]
[), ;, if, (, value, !=, 0, ), {, propListHead, =, createProp, (, propType, ,, value, ,, propListHead, ), ;]
[), {, propListHead, =, createProp, (, propType, ,, value, ,, propListHead, ), ;, }, }, PropListItem, createProp, (, int, propType]
[!=, 0, ), {, propListHead, =, createProp, (, propType, ,, value, ,, propListHead, ), ;, }, }, PropListItem, createProp, (]
[), {, propListHead, =, createProp, (, propType, ,, value, ,, propListHead, ), ;, }, }, PropListItem, createProp, (, int, propType]
[=, createProp, (, propType, ,, value, ,, propListHead, ), ;, }, }, PropListItem, createProp, (, int, propType, ,, Object, value]
[;, }, }, PropListItem, createProp, (, int, propType, ,, Object, value, ,, PropListItem, next, ), {, return, new, ObjectPropListItem, (]
[,, value, ,, propListHead, ), ;, }, }, PropListItem, createProp, (, int, propType, ,, Object, value, ,, PropListItem, next, )]
[,, propListHead, ), ;, }, }, PropListItem, createProp, (, int, propType, ,, Object, value, ,, PropListItem, next, ), {, return]
[), ;, }, }, PropListItem, createProp, (, int, propType, ,, Object, value, ,, PropListItem, next, ), {, return, new, ObjectPropListItem]
[;, }, PropListItem, createProp, (, int, propType, ,, int, value, ,, PropListItem, next, ), {, return, new, IntPropListItem, (, propType]
[,, value, ,, next, ), ;, }, PropListItem, createProp, (, int, propType, ,, int, value, ,, PropListItem, next, ), {]
[,, next, ), ;, }, PropListItem, createProp, (, int, propType, ,, int, value, ,, PropListItem, next, ), {, return, new]
[), ;, }, PropListItem, createProp, (, int, propType, ,, int, value, ,, PropListItem, next, ), {, return, new, IntPropListItem, (]
[;, }, private, int, [, ], getSortedPropTypes, (, ), {, int, count, =, 0, ;, for, (, PropListItem, x, =]
[,, value, ,, next, ), ;, }, private, int, [, ], getSortedPropTypes, (, ), {, int, count, =, 0, ;]
[,, next, ), ;, }, private, int, [, ], getSortedPropTypes, (, ), {, int, count, =, 0, ;, for, (]
[), ;, }, private, int, [, ], getSortedPropTypes, (, ), {, int, count, =, 0, ;, for, (, PropListItem, x]
[;, for, (, PropListItem, x, =, propListHead, ;, x, !=, null, ;, x, =, x, ., getNext, (, ), )]
[;, x, !=, null, ;, x, =, x, ., getNext, (, ), ), {, count, ++, ;, }, int, []
[;, x, =, x, ., getNext, (, ), ), {, count, ++, ;, }, int, [, ], keys, =, new]
[!=, null, ;, x, =, x, ., getNext, (, ), ), {, count, ++, ;, }, int, [, ], keys]
[;, x, =, x, ., getNext, (, ), ), {, count, ++, ;, }, int, [, ], keys, =, new]
[=, x, ., getNext, (, ), ), {, count, ++, ;, }, int, [, ], keys, =, new, int, []
[), {, count, ++, ;, }, int, [, ], keys, =, new, int, [, count, ], ;, for, (, PropListItem]
[., getNext, (, ), ), {, count, ++, ;, }, int, [, ], keys, =, new, int, [, count, ]]
[;, }, int, [, ], keys, =, new, int, [, count, ], ;, for, (, PropListItem, x, =, propListHead, ;]
[++, ;, }, int, [, ], keys, =, new, int, [, count, ], ;, for, (, PropListItem, x, =, propListHead]
[;, for, (, PropListItem, x, =, propListHead, ;, x, !=, null, ;, x, =, x, ., getNext, (, ), )]
[], ;, for, (, PropListItem, x, =, propListHead, ;, x, !=, null, ;, x, =, x, ., getNext, (, )]
[;, x, !=, null, ;, x, =, x, ., getNext, (, ), ), {, count, --, ;, keys, [, count]
[;, x, =, x, ., getNext, (, ), ), {, count, --, ;, keys, [, count, ], =, x, .]
[!=, null, ;, x, =, x, ., getNext, (, ), ), {, count, --, ;, keys, [, count, ], =]
[;, x, =, x, ., getNext, (, ), ), {, count, --, ;, keys, [, count, ], =, x, .]
[=, x, ., getNext, (, ), ), {, count, --, ;, keys, [, count, ], =, x, ., getType, (]
[), {, count, --, ;, keys, [, count, ], =, x, ., getType, (, ), ;, }, Arrays, ., sort]
[., getNext, (, ), ), {, count, --, ;, keys, [, count, ], =, x, ., getType, (, ), ;]
[;, keys, [, count, ], =, x, ., getType, (, ), ;, }, Arrays, ., sort, (, keys, ), ;]
[--, ;, keys, [, count, ], =, x, ., getType, (, ), ;, }, Arrays, ., sort, (, keys, )]
[=, x, ., getType, (, ), ;, }, Arrays, ., sort, (, keys, ), ;, return, keys, ;, }, public]
[[, count, ], =, x, ., getType, (, ), ;, }, Arrays, ., sort, (, keys, ), ;, return, keys]
[], =, x, ., getType, (, ), ;, }, Arrays, ., sort, (, keys, ), ;, return, keys, ;, }]
[;, }, Arrays, ., sort, (, keys, ), ;, return, keys, ;, }, public, double, getDouble, (, ), throws, UnsupportedOperationException]
[., getType, (, ), ;, }, Arrays, ., sort, (, keys, ), ;, return, keys, ;, }, public, double, getDouble]
[;, return, keys, ;, }, public, double, getDouble, (, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, )]
[., sort, (, keys, ), ;, return, keys, ;, }, public, double, getDouble, (, ), throws, UnsupportedOperationException, {, if, (]
[), ;, return, keys, ;, }, public, double, getDouble, (, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (]
[;, }, public, double, getDouble, (, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==, Token, .]
[), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a number node", )]
[==, Token, ., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (]
[., getType, (, ), ==, Token, ., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {]
[), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a number node", )]
[., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +]
[;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a number node", ), ;, }, }, public, void, setDouble, (, double]
[), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a number node", ), ;, }, }, public, void, setDouble, (]
[;, }, }, public, void, setDouble, (, double, s, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, )]
[), ;, }, }, public, void, setDouble, (, double, s, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (]
[+, " is not a number node", ), ;, }, }, public, void, setDouble, (, double, s, ), throws, UnsupportedOperationException, {, if, (, this, .]
[), ;, }, }, public, void, setDouble, (, double, s, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (]
[), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a string node", )]
[==, Token, ., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (]
[., getType, (, ), ==, Token, ., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {]
[), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a string node", )]
[., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +]
[;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a string node", ), ;, }, }, public, String, getString, (, )]
[), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a string node", ), ;, }, }, public, String, getString, (]
[;, }, }, public, String, getString, (, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==, Token]
[), ;, }, }, public, String, getString, (, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==]
[+, " is not a string node", ), ;, }, }, public, String, getString, (, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (]
[), ;, }, }, public, String, getString, (, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==]
[), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a string node", )]
[==, Token, ., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (]
[., getType, (, ), ==, Token, ., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {]
[), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a string node", )]
[., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +]
[;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a string node", ), ;, }, }, public, void, setString, (, String]
[), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a string node", ), ;, }, }, public, void, setString, (]
[;, }, }, public, void, setString, (, String, s, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, )]
[), ;, }, }, public, void, setString, (, String, s, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (]
[+, " is not a string node", ), ;, }, }, public, void, setString, (, String, s, ), throws, UnsupportedOperationException, {, if, (, this, .]
[), ;, }, }, public, void, setString, (, String, s, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (]
[), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a string node", )]
[==, Token, ., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (]
[., getType, (, ), ==, Token, ., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {]
[), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a string node", )]
[., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +]
[;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a string node", ), ;, }, }, @, Override, public, String, toString]
[), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +, " is not a string node", ), ;, }, }, @, Override, public, String]
[;, }, }, @, Override, public, String, toString, (, ), {, return, toString, (, true, ,, true, ,, true, )]
[), ;, }, }, @, Override, public, String, toString, (, ), {, return, toString, (, true, ,, true, ,, true]
[+, " is not a string node", ), ;, }, }, @, Override, public, String, toString, (, ), {, return, toString, (, true, ,, true]
[), ;, }, }, @, Override, public, String, toString, (, ), {, return, toString, (, true, ,, true, ,, true]
[;, }, public, String, toString, (, boolean, printSource, ,, boolean, printAnnotations, ,, boolean, printType, ), {, StringBuilder, sb, =, new]
[,, true, ,, true, ), ;, }, public, String, toString, (, boolean, printSource, ,, boolean, printAnnotations, ,, boolean, printType, )]
[,, true, ), ;, }, public, String, toString, (, boolean, printSource, ,, boolean, printAnnotations, ,, boolean, printType, ), {, StringBuilder]
[), ;, }, public, String, toString, (, boolean, printSource, ,, boolean, printAnnotations, ,, boolean, printType, ), {, StringBuilder, sb, =]
[;, toString, (, sb, ,, printSource, ,, printAnnotations, ,, printType, ), ;, return, sb, ., toString, (, ), ;, }]
[;, return, sb, ., toString, (, ), ;, }, private, void, toString, (, StringBuilder, sb, ,, boolean, printSource, ,, boolean]
[,, printSource, ,, printAnnotations, ,, printType, ), ;, return, sb, ., toString, (, ), ;, }, private, void, toString, (]
[,, printAnnotations, ,, printType, ), ;, return, sb, ., toString, (, ), ;, }, private, void, toString, (, StringBuilder, sb]
[,, printType, ), ;, return, sb, ., toString, (, ), ;, }, private, void, toString, (, StringBuilder, sb, ,, boolean]
[), ;, return, sb, ., toString, (, ), ;, }, private, void, toString, (, StringBuilder, sb, ,, boolean, printSource, ,]
[;, }, private, void, toString, (, StringBuilder, sb, ,, boolean, printSource, ,, boolean, printAnnotations, ,, boolean, printType, ), {, sb]
[., toString, (, ), ;, }, private, void, toString, (, StringBuilder, sb, ,, boolean, printSource, ,, boolean, printAnnotations, ,, boolean]
[;, if, (, this, instanceof, StringNode, ), {, sb, ., append, (, ' ', ), ;, sb, ., append, (, getString]
[., append, (, Token, ., name, (, type, ), ), ;, if, (, this, instanceof, StringNode, ), {, sb, .]
[), ;, if, (, this, instanceof, StringNode, ), {, sb, ., append, (, ' ', ), ;, sb, ., append, (]
[., name, (, type, ), ), ;, if, (, this, instanceof, StringNode, ), {, sb, ., append, (, ' ', )]
[), ), ;, if, (, this, instanceof, StringNode, ), {, sb, ., append, (, ' ', ), ;, sb, ., append]
[), {, sb, ., append, (, ' ', ), ;, sb, ., append, (, getString, (, ), ), ;, }, else]
[instanceof, StringNode, ), {, sb, ., append, (, ' ', ), ;, sb, ., append, (, getString, (, ), ), ;]
[;, sb, ., append, (, getString, (, ), ), ;, }, else, if, (, type, ==, Token, ., FUNCTION, )]
[., append, (, ' ', ), ;, sb, ., append, (, getString, (, ), ), ;, }, else, if, (, type]
[), ;, sb, ., append, (, getString, (, ), ), ;, }, else, if, (, type, ==, Token, ., FUNCTION]
[;, }, else, if, (, type, ==, Token, ., FUNCTION, ), {, sb, ., append, (, ' ', ), ;, if]
[., append, (, getString, (, ), ), ;, }, else, if, (, type, ==, Token, ., FUNCTION, ), {, sb]
[), ;, }, else, if, (, type, ==, Token, ., FUNCTION, ), {, sb, ., append, (, ' ', ), ;]
[), {, sb, ., append, (, ' ', ), ;, if, (, first, ==, null, ||, first, ., getType, (, )]
[==, Token, ., FUNCTION, ), {, sb, ., append, (, ' ', ), ;, if, (, first, ==, null, ||, first]
[), {, sb, ., append, (, ' ', ), ;, if, (, first, ==, null, ||, first, ., getType, (, )]
[., FUNCTION, ), {, sb, ., append, (, ' ', ), ;, if, (, first, ==, null, ||, first, ., getType]
[;, if, (, first, ==, null, ||, first, ., getType, (, ), !=, Token, ., NAME, ), {, sb, .]
[., append, (, ' ', ), ;, if, (, first, ==, null, ||, first, ., getType, (, ), !=, Token, .]
[), ;, if, (, first, ==, null, ||, first, ., getType, (, ), !=, Token, ., NAME, ), {, sb]
[), {, sb, ., append, (, "<invalid>", ), ;, }, else, {, sb, ., append, (, first, ., getString, (]
[||, first, ., getType, (, ), !=, Token, ., NAME, ), {, sb, ., append, (, "<invalid>", ), ;, }]
[==, null, ||, first, ., getType, (, ), !=, Token, ., NAME, ), {, sb, ., append, (, "<invalid>", )]
[||, first, ., getType, (, ), !=, Token, ., NAME, ), {, sb, ., append, (, "<invalid>", ), ;, }]
[), {, sb, ., append, (, "<invalid>", ), ;, }, else, {, sb, ., append, (, first, ., getString, (]
[!=, Token, ., NAME, ), {, sb, ., append, (, "<invalid>", ), ;, }, else, {, sb, ., append, (]
[., getType, (, ), !=, Token, ., NAME, ), {, sb, ., append, (, "<invalid>", ), ;, }, else, {]
[), {, sb, ., append, (, "<invalid>", ), ;, }, else, {, sb, ., append, (, first, ., getString, (]
[., NAME, ), {, sb, ., append, (, "<invalid>", ), ;, }, else, {, sb, ., append, (, first, .]
[;, }, else, {, sb, ., append, (, first, ., getString, (, ), ), ;, }, }, else, if, (]
[., append, (, "<invalid>", ), ;, }, else, {, sb, ., append, (, first, ., getString, (, ), ), ;]
[), ;, }, else, {, sb, ., append, (, first, ., getString, (, ), ), ;, }, }, else, if]
[;, }, }, else, if, (, type, ==, Token, ., NUMBER, ), {, sb, ., append, (, ' ', ), ;]
[., append, (, first, ., getString, (, ), ), ;, }, }, else, if, (, type, ==, Token, ., NUMBER]
[), ;, }, }, else, if, (, type, ==, Token, ., NUMBER, ), {, sb, ., append, (, ' ', )]
[., getString, (, ), ), ;, }, }, else, if, (, type, ==, Token, ., NUMBER, ), {, sb, .]
[), {, sb, ., append, (, ' ', ), ;, sb, ., append, (, getDouble, (, ), ), ;, }, if]
[==, Token, ., NUMBER, ), {, sb, ., append, (, ' ', ), ;, sb, ., append, (, getDouble, (, )]
[), {, sb, ., append, (, ' ', ), ;, sb, ., append, (, getDouble, (, ), ), ;, }, if]
[., NUMBER, ), {, sb, ., append, (, ' ', ), ;, sb, ., append, (, getDouble, (, ), ), ;]
[;, sb, ., append, (, getDouble, (, ), ), ;, }, if, (, printSource, ), {, int, lineno, =, getLineno]
[., append, (, ' ', ), ;, sb, ., append, (, getDouble, (, ), ), ;, }, if, (, printSource, )]
[), ;, sb, ., append, (, getDouble, (, ), ), ;, }, if, (, printSource, ), {, int, lineno, =]
[;, }, if, (, printSource, ), {, int, lineno, =, getLineno, (, ), ;, if, (, lineno, !=, -, 1]
[., append, (, getDouble, (, ), ), ;, }, if, (, printSource, ), {, int, lineno, =, getLineno, (, )]
[), ;, }, if, (, printSource, ), {, int, lineno, =, getLineno, (, ), ;, if, (, lineno, !=, -]
[), {, int, lineno, =, getLineno, (, ), ;, if, (, lineno, !=, -, 1, ), {, sb, ., append]
[;, if, (, lineno, !=, -, 1, ), {, sb, ., append, (, ' ', ), ;, sb, ., append, (]
[), {, sb, ., append, (, ' ', ), ;, sb, ., append, (, lineno, ), ;, }, }, if, (]
[!=, -, 1, ), {, sb, ., append, (, ' ', ), ;, sb, ., append, (, lineno, ), ;, }]
[), {, sb, ., append, (, ' ', ), ;, sb, ., append, (, lineno, ), ;, }, }, if, (]
[), {, sb, ., append, (, ' ', ), ;, sb, ., append, (, lineno, ), ;, }, }, if, (]
[;, sb, ., append, (, lineno, ), ;, }, }, if, (, printAnnotations, ), {, int, [, ], keys, =]
[., append, (, ' ', ), ;, sb, ., append, (, lineno, ), ;, }, }, if, (, printAnnotations, ), {]
[), ;, sb, ., append, (, lineno, ), ;, }, }, if, (, printAnnotations, ), {, int, [, ], keys]
[;, }, }, if, (, printAnnotations, ), {, int, [, ], keys, =, getSortedPropTypes, (, ), ;, for, (, int]
[., append, (, lineno, ), ;, }, }, if, (, printAnnotations, ), {, int, [, ], keys, =, getSortedPropTypes, (]
[), ;, }, }, if, (, printAnnotations, ), {, int, [, ], keys, =, getSortedPropTypes, (, ), ;, for, (]
[), {, int, [, ], keys, =, getSortedPropTypes, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, keys, ., length, ;, i, ++, ), {, int, type]
[;, i, <, keys, ., length, ;, i, ++, ), {, int, type, =, keys, [, i, ], ;, PropListItem]
[;, i, ++, ), {, int, type, =, keys, [, i, ], ;, PropListItem, x, =, lookupProperty, (, type, )]
[<, keys, ., length, ;, i, ++, ), {, int, type, =, keys, [, i, ], ;, PropListItem, x, =]
[;, i, ++, ), {, int, type, =, keys, [, i, ], ;, PropListItem, x, =, lookupProperty, (, type, )]
[., length, ;, i, ++, ), {, int, type, =, keys, [, i, ], ;, PropListItem, x, =, lookupProperty, (]
[), {, int, type, =, keys, [, i, ], ;, PropListItem, x, =, lookupProperty, (, type, ), ;, sb, .]
[++, ), {, int, type, =, keys, [, i, ], ;, PropListItem, x, =, lookupProperty, (, type, ), ;, sb]
[;, PropListItem, x, =, lookupProperty, (, type, ), ;, sb, ., append, (, " [", ), ;, sb, ., append, (]
[[, i, ], ;, PropListItem, x, =, lookupProperty, (, type, ), ;, sb, ., append, (, " [", ), ;, sb]
[], ;, PropListItem, x, =, lookupProperty, (, type, ), ;, sb, ., append, (, " [", ), ;, sb, ., append]
[;, sb, ., append, (, " [", ), ;, sb, ., append, (, propToString, (, type, ), ), ;, sb, .]
[), ;, sb, ., append, (, " [", ), ;, sb, ., append, (, propToString, (, type, ), ), ;, sb]
[;, sb, ., append, (, propToString, (, type, ), ), ;, sb, ., append, (, ": ", ), ;, String, value]
[., append, (, " [", ), ;, sb, ., append, (, propToString, (, type, ), ), ;, sb, ., append, (]
[), ;, sb, ., append, (, propToString, (, type, ), ), ;, sb, ., append, (, ": ", ), ;, String]
[;, sb, ., append, (, ": ", ), ;, String, value, ;, switch, (, type, ), {, default, :, value, =]
[., append, (, propToString, (, type, ), ), ;, sb, ., append, (, ": ", ), ;, String, value, ;, switch]
[), ;, sb, ., append, (, ": ", ), ;, String, value, ;, switch, (, type, ), {, default, :, value]
[), ), ;, sb, ., append, (, ": ", ), ;, String, value, ;, switch, (, type, ), {, default, :]
[;, String, value, ;, switch, (, type, ), {, default, :, value, =, x, ., toString, (, ), ;, break]
[., append, (, ": ", ), ;, String, value, ;, switch, (, type, ), {, default, :, value, =, x, .]
[), ;, String, value, ;, switch, (, type, ), {, default, :, value, =, x, ., toString, (, ), ;]
[), {, default, :, value, =, x, ., toString, (, ), ;, break, ;, }, sb, ., append, (, value]
[=, x, ., toString, (, ), ;, break, ;, }, sb, ., append, (, value, ), ;, sb, ., append]
[;, break, ;, }, sb, ., append, (, value, ), ;, sb, ., append, (, ']', ), ;, }, }]
[., toString, (, ), ;, break, ;, }, sb, ., append, (, value, ), ;, sb, ., append, (, ']']
[;, sb, ., append, (, ']', ), ;, }, }, if, (, printType, ), {, if, (, jsType, !=, null]
[., append, (, value, ), ;, sb, ., append, (, ']', ), ;, }, }, if, (, printType, ), {]
[), ;, sb, ., append, (, ']', ), ;, }, }, if, (, printType, ), {, if, (, jsType, !=]
[;, }, }, if, (, printType, ), {, if, (, jsType, !=, null, ), {, String, jsTypeString, =, jsType, .]
[., append, (, ']', ), ;, }, }, if, (, printType, ), {, if, (, jsType, !=, null, ), {]
[), ;, }, }, if, (, printType, ), {, if, (, jsType, !=, null, ), {, String, jsTypeString, =, jsType]
[), {, if, (, jsType, !=, null, ), {, String, jsTypeString, =, jsType, ., toString, (, ), ;, if, (]
[), {, String, jsTypeString, =, jsType, ., toString, (, ), ;, if, (, jsTypeString, !=, null, ), {, sb, .]
[!=, null, ), {, String, jsTypeString, =, jsType, ., toString, (, ), ;, if, (, jsTypeString, !=, null, ), {]
[), {, String, jsTypeString, =, jsType, ., toString, (, ), ;, if, (, jsTypeString, !=, null, ), {, sb, .]
[;, if, (, jsTypeString, !=, null, ), {, sb, ., append, (, " : ", ), ;, sb, ., append, (, jsTypeString]
[., toString, (, ), ;, if, (, jsTypeString, !=, null, ), {, sb, ., append, (, " : ", ), ;, sb]
[), {, sb, ., append, (, " : ", ), ;, sb, ., append, (, jsTypeString, ), ;, }, }, }, }]
[!=, null, ), {, sb, ., append, (, " : ", ), ;, sb, ., append, (, jsTypeString, ), ;, }, }]
[), {, sb, ., append, (, " : ", ), ;, sb, ., append, (, jsTypeString, ), ;, }, }, }, }]
[;, sb, ., append, (, jsTypeString, ), ;, }, }, }, }, public, String, toStringTree, (, ), {, return, toStringTreeImpl]
[., append, (, " : ", ), ;, sb, ., append, (, jsTypeString, ), ;, }, }, }, }, public, String, toStringTree]
[), ;, sb, ., append, (, jsTypeString, ), ;, }, }, }, }, public, String, toStringTree, (, ), {, return]
[;, }, }, }, }, public, String, toStringTree, (, ), {, return, toStringTreeImpl, (, ), ;, }, private, String, toStringTreeImpl]
[., append, (, jsTypeString, ), ;, }, }, }, }, public, String, toStringTree, (, ), {, return, toStringTreeImpl, (, )]
[), ;, }, }, }, }, public, String, toStringTree, (, ), {, return, toStringTreeImpl, (, ), ;, }, private, String]
[;, }, private, String, toStringTreeImpl, (, ), {, try, {, StringBuilder, s, =, new, StringBuilder, (, ), ;, appendStringTree, (]
[;, appendStringTree, (, s, ), ;, return, s, ., toString, (, ), ;, }, catch, (, IOException, e, ), {]
[;, return, s, ., toString, (, ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, "Should not happen\n"]
[), ;, return, s, ., toString, (, ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (]
[;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, "Should not happen\n", +, e, ), ;, }, }, public]
[., toString, (, ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, "Should not happen\n", +, e, )]
[;, }, }, public, void, appendStringTree, (, Appendable, appendable, ), throws, IOException, {, toStringTreeHelper, (, this, ,, 0, ,, appendable]
[), ;, }, }, public, void, appendStringTree, (, Appendable, appendable, ), throws, IOException, {, toStringTreeHelper, (, this, ,, 0, ,]
[+, e, ), ;, }, }, public, void, appendStringTree, (, Appendable, appendable, ), throws, IOException, {, toStringTreeHelper, (, this, ,]
[), ;, }, }, public, void, appendStringTree, (, Appendable, appendable, ), throws, IOException, {, toStringTreeHelper, (, this, ,, 0, ,]
[;, }, private, static, void, toStringTreeHelper, (, Node, n, ,, int, level, ,, Appendable, sb, ), throws, IOException, {, for]
[,, 0, ,, appendable, ), ;, }, private, static, void, toStringTreeHelper, (, Node, n, ,, int, level, ,, Appendable, sb]
[,, appendable, ), ;, }, private, static, void, toStringTreeHelper, (, Node, n, ,, int, level, ,, Appendable, sb, ), throws]
[), ;, }, private, static, void, toStringTreeHelper, (, Node, n, ,, int, level, ,, Appendable, sb, ), throws, IOException, {]
[;, i, !=, level, ;, ++, i, ), {, sb, ., append, (, "    ", ), ;, }, sb, ., append]
[;, ++, i, ), {, sb, ., append, (, "    ", ), ;, }, sb, ., append, (, n, ., toString]
[!=, level, ;, ++, i, ), {, sb, ., append, (, "    ", ), ;, }, sb, ., append, (, n]
[;, ++, i, ), {, sb, ., append, (, "    ", ), ;, }, sb, ., append, (, n, ., toString]
[), {, sb, ., append, (, "    ", ), ;, }, sb, ., append, (, n, ., toString, (, ), )]
[), {, sb, ., append, (, "    ", ), ;, }, sb, ., append, (, n, ., toString, (, ), )]
[;, }, sb, ., append, (, n, ., toString, (, ), ), ;, sb, ., append, (, '\n', ), ;]
[., append, (, "    ", ), ;, }, sb, ., append, (, n, ., toString, (, ), ), ;, sb, .]
[), ;, }, sb, ., append, (, n, ., toString, (, ), ), ;, sb, ., append, (, '\n', )]
[;, sb, ., append, (, '\n', ), ;, for, (, Node, cursor, =, n, ., getFirstChild, (, ), ;, cursor]
[., append, (, n, ., toString, (, ), ), ;, sb, ., append, (, '\n', ), ;, for, (, Node]
[), ;, sb, ., append, (, '\n', ), ;, for, (, Node, cursor, =, n, ., getFirstChild, (, ), ;]
[., toString, (, ), ), ;, sb, ., append, (, '\n', ), ;, for, (, Node, cursor, =, n, .]
[;, for, (, Node, cursor, =, n, ., getFirstChild, (, ), ;, cursor, !=, null, ;, cursor, =, cursor, .]
[., append, (, '\n', ), ;, for, (, Node, cursor, =, n, ., getFirstChild, (, ), ;, cursor, !=, null]
[), ;, for, (, Node, cursor, =, n, ., getFirstChild, (, ), ;, cursor, !=, null, ;, cursor, =, cursor]
[;, cursor, !=, null, ;, cursor, =, cursor, ., getNext, (, ), ), {, toStringTreeHelper, (, cursor, ,, level, +]
[., getFirstChild, (, ), ;, cursor, !=, null, ;, cursor, =, cursor, ., getNext, (, ), ), {, toStringTreeHelper, (]
[;, cursor, =, cursor, ., getNext, (, ), ), {, toStringTreeHelper, (, cursor, ,, level, +, 1, ,, sb, )]
[!=, null, ;, cursor, =, cursor, ., getNext, (, ), ), {, toStringTreeHelper, (, cursor, ,, level, +, 1, ,]
[;, cursor, =, cursor, ., getNext, (, ), ), {, toStringTreeHelper, (, cursor, ,, level, +, 1, ,, sb, )]
[=, cursor, ., getNext, (, ), ), {, toStringTreeHelper, (, cursor, ,, level, +, 1, ,, sb, ), ;, }]
[), {, toStringTreeHelper, (, cursor, ,, level, +, 1, ,, sb, ), ;, }, }, int, type, ;, Node, next]
[., getNext, (, ), ), {, toStringTreeHelper, (, cursor, ,, level, +, 1, ,, sb, ), ;, }, }, int]
[;, }, }, int, type, ;, Node, next, ;, private, Node, first, ;, private, Node, last, ;, private, PropListItem, propListHead]
[,, level, +, 1, ,, sb, ), ;, }, }, int, type, ;, Node, next, ;, private, Node, first, ;]
[,, sb, ), ;, }, }, int, type, ;, Node, next, ;, private, Node, first, ;, private, Node, last, ;]
[+, 1, ,, sb, ), ;, }, }, int, type, ;, Node, next, ;, private, Node, first, ;, private, Node]
[,, sb, ), ;, }, }, int, type, ;, Node, next, ;, private, Node, first, ;, private, Node, last, ;]
[), ;, }, }, int, type, ;, Node, next, ;, private, Node, first, ;, private, Node, last, ;, private, PropListItem]
[;, public, static, final, int, MAX_COLUMN_NUMBER, =, (, 1, <<, COLUMN_BITS, ), -, 1, ;, public, static, final, int, COLUMN_MASK]
[;, public, static, final, int, COLUMN_MASK, =, MAX_COLUMN_NUMBER, ;, private, int, sourcePosition, ;, private, JSType, jsType, ;, private, Node, parent]
[-, 1, ;, public, static, final, int, COLUMN_MASK, =, MAX_COLUMN_NUMBER, ;, private, int, sourcePosition, ;, private, JSType, jsType, ;, private]
[), -, 1, ;, public, static, final, int, COLUMN_MASK, =, MAX_COLUMN_NUMBER, ;, private, int, sourcePosition, ;, private, JSType, jsType, ;]
[<<, COLUMN_BITS, ), -, 1, ;, public, static, final, int, COLUMN_MASK, =, MAX_COLUMN_NUMBER, ;, private, int, sourcePosition, ;, private, JSType]
[), -, 1, ;, public, static, final, int, COLUMN_MASK, =, MAX_COLUMN_NUMBER, ;, private, int, sourcePosition, ;, private, JSType, jsType, ;]
[;, public, static, final, int, COLUMN_MASK, =, MAX_COLUMN_NUMBER, ;, private, int, sourcePosition, ;, private, JSType, jsType, ;, private, Node, parent]
[;, private, int, sourcePosition, ;, private, JSType, jsType, ;, private, Node, parent, ;, public, void, setStaticSourceFile, (, StaticSourceFile, file, )]
[;, }, public, void, setSourceFileForTesting, (, String, name, ), {, this, ., putProp, (, STATIC_SOURCE_FILE, ,, new, SimpleSourceFile, (, name]
[., putProp, (, STATIC_SOURCE_FILE, ,, file, ), ;, }, public, void, setSourceFileForTesting, (, String, name, ), {, this, ., putProp]
[,, file, ), ;, }, public, void, setSourceFileForTesting, (, String, name, ), {, this, ., putProp, (, STATIC_SOURCE_FILE, ,, new]
[), ;, }, public, void, setSourceFileForTesting, (, String, name, ), {, this, ., putProp, (, STATIC_SOURCE_FILE, ,, new, SimpleSourceFile, (]
[;, }, public, String, getSourceFileName, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==, null, ?]
[., putProp, (, STATIC_SOURCE_FILE, ,, new, SimpleSourceFile, (, name, ,, false, ), ), ;, }, public, String, getSourceFileName, (, )]
[,, new, SimpleSourceFile, (, name, ,, false, ), ), ;, }, public, String, getSourceFileName, (, ), {, StaticSourceFile, file, =]
[), ;, }, public, String, getSourceFileName, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==, null]
[,, false, ), ), ;, }, public, String, getSourceFileName, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return]
[), ), ;, }, public, String, getSourceFileName, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==]
[;, return, file, ==, null, ?, null, :, file, ., getName, (, ), ;, }, public, StaticSourceFile, getStaticSourceFile, (, )]
[;, }, public, StaticSourceFile, getStaticSourceFile, (, ), {, return, (, (, StaticSourceFile, ), this, ., getProp, (, STATIC_SOURCE_FILE, ), )]
[?, null, :, file, ., getName, (, ), ;, }, public, StaticSourceFile, getStaticSourceFile, (, ), {, return, (, (, StaticSourceFile]
[==, null, ?, null, :, file, ., getName, (, ), ;, }, public, StaticSourceFile, getStaticSourceFile, (, ), {, return, (]
[?, null, :, file, ., getName, (, ), ;, }, public, StaticSourceFile, getStaticSourceFile, (, ), {, return, (, (, StaticSourceFile]
[:, file, ., getName, (, ), ;, }, public, StaticSourceFile, getStaticSourceFile, (, ), {, return, (, (, StaticSourceFile, ), this]
[;, }, public, StaticSourceFile, getStaticSourceFile, (, ), {, return, (, (, StaticSourceFile, ), this, ., getProp, (, STATIC_SOURCE_FILE, ), )]
[., getName, (, ), ;, }, public, StaticSourceFile, getStaticSourceFile, (, ), {, return, (, (, StaticSourceFile, ), this, ., getProp]
[;, }, public, void, setInputId, (, InputId, inputId, ), {, this, ., putProp, (, INPUT_ID, ,, inputId, ), ;, }]
[), ;, }, public, void, setInputId, (, InputId, inputId, ), {, this, ., putProp, (, INPUT_ID, ,, inputId, ), ;]
[), ;, }, public, void, setInputId, (, InputId, inputId, ), {, this, ., putProp, (, INPUT_ID, ,, inputId, ), ;]
[., getProp, (, STATIC_SOURCE_FILE, ), ), ;, }, public, void, setInputId, (, InputId, inputId, ), {, this, ., putProp, (]
[), ), ;, }, public, void, setInputId, (, InputId, inputId, ), {, this, ., putProp, (, INPUT_ID, ,, inputId, )]
[;, }, public, InputId, getInputId, (, ), {, return, (, (, InputId, ), this, ., getProp, (, INPUT_ID, ), )]
[., putProp, (, INPUT_ID, ,, inputId, ), ;, }, public, InputId, getInputId, (, ), {, return, (, (, InputId, )]
[,, inputId, ), ;, }, public, InputId, getInputId, (, ), {, return, (, (, InputId, ), this, ., getProp, (]
[), ;, }, public, InputId, getInputId, (, ), {, return, (, (, InputId, ), this, ., getProp, (, INPUT_ID, )]
[;, }, public, boolean, isFromExterns, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==, null, ?]
[), ;, }, public, boolean, isFromExterns, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==, null]
[), ;, }, public, boolean, isFromExterns, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==, null]
[., getProp, (, INPUT_ID, ), ), ;, }, public, boolean, isFromExterns, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, )]
[), ), ;, }, public, boolean, isFromExterns, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==]
[;, return, file, ==, null, ?, false, :, file, ., isExtern, (, ), ;, }, public, int, getLength, (, )]
[;, }, public, int, getLength, (, ), {, return, getIntProp, (, LENGTH, ), ;, }, public, void, setLength, (, int]
[?, false, :, file, ., isExtern, (, ), ;, }, public, int, getLength, (, ), {, return, getIntProp, (, LENGTH]
[==, null, ?, false, :, file, ., isExtern, (, ), ;, }, public, int, getLength, (, ), {, return, getIntProp]
[?, false, :, file, ., isExtern, (, ), ;, }, public, int, getLength, (, ), {, return, getIntProp, (, LENGTH]
[:, file, ., isExtern, (, ), ;, }, public, int, getLength, (, ), {, return, getIntProp, (, LENGTH, ), ;]
[;, }, public, int, getLength, (, ), {, return, getIntProp, (, LENGTH, ), ;, }, public, void, setLength, (, int]
[., isExtern, (, ), ;, }, public, int, getLength, (, ), {, return, getIntProp, (, LENGTH, ), ;, }, public]
[;, }, public, void, setLength, (, int, length, ), {, putIntProp, (, LENGTH, ,, length, ), ;, }, public, int]
[), ;, }, public, void, setLength, (, int, length, ), {, putIntProp, (, LENGTH, ,, length, ), ;, }, public]
[;, }, public, int, getLineno, (, ), {, return, extractLineno, (, sourcePosition, ), ;, }, public, int, getCharno, (, )]
[,, length, ), ;, }, public, int, getLineno, (, ), {, return, extractLineno, (, sourcePosition, ), ;, }, public, int]
[), ;, }, public, int, getLineno, (, ), {, return, extractLineno, (, sourcePosition, ), ;, }, public, int, getCharno, (]
[;, }, public, int, getCharno, (, ), {, return, extractCharno, (, sourcePosition, ), ;, }, public, int, getSourceOffset, (, )]
[), ;, }, public, int, getCharno, (, ), {, return, extractCharno, (, sourcePosition, ), ;, }, public, int, getSourceOffset, (]
[;, }, public, int, getSourceOffset, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, if, (, file, ==, null]
[), ;, }, public, int, getSourceOffset, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, if, (, file, ==]
[;, if, (, file, ==, null, ), {, return, -, 1, ;, }, int, lineno, =, getLineno, (, ), ;]
[), {, return, -, 1, ;, }, int, lineno, =, getLineno, (, ), ;, if, (, lineno, ==, -, 1]
[==, null, ), {, return, -, 1, ;, }, int, lineno, =, getLineno, (, ), ;, if, (, lineno, ==]
[), {, return, -, 1, ;, }, int, lineno, =, getLineno, (, ), ;, if, (, lineno, ==, -, 1]
[;, }, int, lineno, =, getLineno, (, ), ;, if, (, lineno, ==, -, 1, ), {, return, -, 1]
[;, }, int, lineno, =, getLineno, (, ), ;, if, (, lineno, ==, -, 1, ), {, return, -, 1]
[;, if, (, lineno, ==, -, 1, ), {, return, -, 1, ;, }, return, file, ., getLineOffset, (, lineno]
[), {, return, -, 1, ;, }, return, file, ., getLineOffset, (, lineno, ), +, getCharno, (, ), ;, }]
[==, -, 1, ), {, return, -, 1, ;, }, return, file, ., getLineOffset, (, lineno, ), +, getCharno, (]
[), {, return, -, 1, ;, }, return, file, ., getLineOffset, (, lineno, ), +, getCharno, (, ), ;, }]
[), {, return, -, 1, ;, }, return, file, ., getLineOffset, (, lineno, ), +, getCharno, (, ), ;, }]
[;, }, return, file, ., getLineOffset, (, lineno, ), +, getCharno, (, ), ;, }, public, int, getSourcePosition, (, )]
[;, }, return, file, ., getLineOffset, (, lineno, ), +, getCharno, (, ), ;, }, public, int, getSourcePosition, (, )]
[;, }, public, int, getSourcePosition, (, ), {, return, sourcePosition, ;, }, public, void, setLineno, (, int, lineno, ), {]
[+, getCharno, (, ), ;, }, public, int, getSourcePosition, (, ), {, return, sourcePosition, ;, }, public, void, setLineno, (]
[., getLineOffset, (, lineno, ), +, getCharno, (, ), ;, }, public, int, getSourcePosition, (, ), {, return, sourcePosition, ;]
[), +, getCharno, (, ), ;, }, public, int, getSourcePosition, (, ), {, return, sourcePosition, ;, }, public, void, setLineno]
[;, }, public, int, getSourcePosition, (, ), {, return, sourcePosition, ;, }, public, void, setLineno, (, int, lineno, ), {]
[;, }, public, void, setLineno, (, int, lineno, ), {, int, charno, =, getCharno, (, ), ;, if, (, charno]
[;, if, (, charno, ==, -, 1, ), {, charno, =, 0, ;, }, sourcePosition, =, mergeLineCharNo, (, lineno, ,]
[), {, charno, =, 0, ;, }, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, void, setCharno]
[==, -, 1, ), {, charno, =, 0, ;, }, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }]
[), {, charno, =, 0, ;, }, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, void, setCharno]
[), {, charno, =, 0, ;, }, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, void, setCharno]
[=, 0, ;, }, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, void, setCharno, (, int, charno]
[;, }, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, void, setCharno, (, int, charno, ), {]
[=, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, void, setCharno, (, int, charno, ), {, sourcePosition, =, mergeLineCharNo]
[;, }, public, void, setCharno, (, int, charno, ), {, sourcePosition, =, mergeLineCharNo, (, getLineno, (, ), ,, charno, )]
[,, charno, ), ;, }, public, void, setCharno, (, int, charno, ), {, sourcePosition, =, mergeLineCharNo, (, getLineno, (, )]
[), ;, }, public, void, setCharno, (, int, charno, ), {, sourcePosition, =, mergeLineCharNo, (, getLineno, (, ), ,, charno]
[=, mergeLineCharNo, (, getLineno, (, ), ,, charno, ), ;, }, public, void, setSourceEncodedPosition, (, int, sourcePosition, ), {, this]
[;, }, public, void, setSourceEncodedPosition, (, int, sourcePosition, ), {, this, ., sourcePosition, =, sourcePosition, ;, }, public, void, setSourceEncodedPositionForTree]
[,, charno, ), ;, }, public, void, setSourceEncodedPosition, (, int, sourcePosition, ), {, this, ., sourcePosition, =, sourcePosition, ;, }]
[), ;, }, public, void, setSourceEncodedPosition, (, int, sourcePosition, ), {, this, ., sourcePosition, =, sourcePosition, ;, }, public, void]
[=, sourcePosition, ;, }, public, void, setSourceEncodedPositionForTree, (, int, sourcePosition, ), {, this, ., sourcePosition, =, sourcePosition, ;, for, (]
[., sourcePosition, =, sourcePosition, ;, }, public, void, setSourceEncodedPositionForTree, (, int, sourcePosition, ), {, this, ., sourcePosition, =, sourcePosition, ;]
[;, }, public, void, setSourceEncodedPositionForTree, (, int, sourcePosition, ), {, this, ., sourcePosition, =, sourcePosition, ;, for, (, Node, child]
[=, sourcePosition, ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, .]
[., sourcePosition, =, sourcePosition, ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., setSourceEncodedPositionForTree, (, sourcePosition, )]
[;, child, =, child, ., getNext, (, ), ), {, child, ., setSourceEncodedPositionForTree, (, sourcePosition, ), ;, }, }, protected]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., setSourceEncodedPositionForTree, (, sourcePosition, ), ;, }]
[;, child, =, child, ., getNext, (, ), ), {, child, ., setSourceEncodedPositionForTree, (, sourcePosition, ), ;, }, }, protected]
[=, child, ., getNext, (, ), ), {, child, ., setSourceEncodedPositionForTree, (, sourcePosition, ), ;, }, }, protected, static, int]
[), {, child, ., setSourceEncodedPositionForTree, (, sourcePosition, ), ;, }, }, protected, static, int, mergeLineCharNo, (, int, lineno, ,, int]
[., getNext, (, ), ), {, child, ., setSourceEncodedPositionForTree, (, sourcePosition, ), ;, }, }, protected, static, int, mergeLineCharNo, (]
[;, }, }, protected, static, int, mergeLineCharNo, (, int, lineno, ,, int, charno, ), {, if, (, lineno, <, 0]
[., setSourceEncodedPositionForTree, (, sourcePosition, ), ;, }, }, protected, static, int, mergeLineCharNo, (, int, lineno, ,, int, charno, ), {]
[), ;, }, }, protected, static, int, mergeLineCharNo, (, int, lineno, ,, int, charno, ), {, if, (, lineno, <]
[), {, return, -, 1, ;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, ), !=, 0, ), {]
[||, charno, <, 0, ), {, return, -, 1, ;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, )]
[<, 0, ||, charno, <, 0, ), {, return, -, 1, ;, }, else, if, (, (, charno, &, ~]
[||, charno, <, 0, ), {, return, -, 1, ;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, )]
[), {, return, -, 1, ;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, ), !=, 0, ), {]
[<, 0, ), {, return, -, 1, ;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, ), !=, 0]
[), {, return, -, 1, ;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, ), !=, 0, ), {]
[;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, ), !=, 0, ), {, return, lineno, <<, COLUMN_BITS, |]
[;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, ), !=, 0, ), {, return, lineno, <<, COLUMN_BITS, |]
[), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return, lineno, <<, COLUMN_BITS, |, (, charno, &]
[!=, 0, ), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return, lineno, <<, COLUMN_BITS, |, (]
[), !=, 0, ), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return, lineno, <<, COLUMN_BITS, |]
[&, ~, COLUMN_MASK, ), !=, 0, ), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return, lineno]
[), !=, 0, ), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return, lineno, <<, COLUMN_BITS, |]
[), !=, 0, ), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return, lineno, <<, COLUMN_BITS, |]
[), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return, lineno, <<, COLUMN_BITS, |, (, charno, &]
[;, }, else, {, return, lineno, <<, COLUMN_BITS, |, (, charno, &, COLUMN_MASK, ), ;, }, }, protected, static, int]
[|, COLUMN_MASK, ;, }, else, {, return, lineno, <<, COLUMN_BITS, |, (, charno, &, COLUMN_MASK, ), ;, }, }, protected]
[<<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return, lineno, <<, COLUMN_BITS, |, (, charno, &, COLUMN_MASK, ), ;, }]
[|, COLUMN_MASK, ;, }, else, {, return, lineno, <<, COLUMN_BITS, |, (, charno, &, COLUMN_MASK, ), ;, }, }, protected]
[;, }, else, {, return, lineno, <<, COLUMN_BITS, |, (, charno, &, COLUMN_MASK, ), ;, }, }, protected, static, int]
[;, }, }, protected, static, int, extractLineno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, ), {]
[|, (, charno, &, COLUMN_MASK, ), ;, }, }, protected, static, int, extractLineno, (, int, lineCharNo, ), {, if, (]
[<<, COLUMN_BITS, |, (, charno, &, COLUMN_MASK, ), ;, }, }, protected, static, int, extractLineno, (, int, lineCharNo, ), {]
[|, (, charno, &, COLUMN_MASK, ), ;, }, }, protected, static, int, extractLineno, (, int, lineCharNo, ), {, if, (]
[;, }, }, protected, static, int, extractLineno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, ), {]
[), ;, }, }, protected, static, int, extractLineno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, )]
[&, COLUMN_MASK, ), ;, }, }, protected, static, int, extractLineno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==, -]
[), ;, }, }, protected, static, int, extractLineno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, )]
[), {, return, -, 1, ;, }, else, {, return, lineCharNo, >, >, >, COLUMN_BITS, ;, }, }, protected, static]
[==, -, 1, ), {, return, -, 1, ;, }, else, {, return, lineCharNo, >, >, >, COLUMN_BITS, ;, }]
[), {, return, -, 1, ;, }, else, {, return, lineCharNo, >, >, >, COLUMN_BITS, ;, }, }, protected, static]
[), {, return, -, 1, ;, }, else, {, return, lineCharNo, >, >, >, COLUMN_BITS, ;, }, }, protected, static]
[;, }, else, {, return, lineCharNo, >, >, >, COLUMN_BITS, ;, }, }, protected, static, int, extractCharno, (, int, lineCharNo]
[;, }, else, {, return, lineCharNo, >, >, >, COLUMN_BITS, ;, }, }, protected, static, int, extractCharno, (, int, lineCharNo]
[;, }, }, protected, static, int, extractCharno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, ), {]
[>, >, >, COLUMN_BITS, ;, }, }, protected, static, int, extractCharno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==]
[;, }, }, protected, static, int, extractCharno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, ), {]
[), {, return, -, 1, ;, }, else, {, return, lineCharNo, &, COLUMN_MASK, ;, }, }, public, Iterable, <, Node]
[==, -, 1, ), {, return, -, 1, ;, }, else, {, return, lineCharNo, &, COLUMN_MASK, ;, }, }, public]
[), {, return, -, 1, ;, }, else, {, return, lineCharNo, &, COLUMN_MASK, ;, }, }, public, Iterable, <, Node]
[), {, return, -, 1, ;, }, else, {, return, lineCharNo, &, COLUMN_MASK, ;, }, }, public, Iterable, <, Node]
[;, }, else, {, return, lineCharNo, &, COLUMN_MASK, ;, }, }, public, Iterable, <, Node, >, children, (, ), {]
[;, }, else, {, return, lineCharNo, &, COLUMN_MASK, ;, }, }, public, Iterable, <, Node, >, children, (, ), {]
[;, }, }, public, Iterable, <, Node, >, children, (, ), {, if, (, first, ==, null, ), {, return]
[&, COLUMN_MASK, ;, }, }, public, Iterable, <, Node, >, children, (, ), {, if, (, first, ==, null, )]
[;, }, }, public, Iterable, <, Node, >, children, (, ), {, if, (, first, ==, null, ), {, return]
[), {, return, Collections, ., emptySet, (, ), ;, }, else, {, return, new, SiblingNodeIterable, (, first, ), ;, }]
[==, null, ), {, return, Collections, ., emptySet, (, ), ;, }, else, {, return, new, SiblingNodeIterable, (, first, )]
[), {, return, Collections, ., emptySet, (, ), ;, }, else, {, return, new, SiblingNodeIterable, (, first, ), ;, }]
[;, }, else, {, return, new, SiblingNodeIterable, (, first, ), ;, }, }, public, Iterable, <, Node, >, siblings, (]
[., emptySet, (, ), ;, }, else, {, return, new, SiblingNodeIterable, (, first, ), ;, }, }, public, Iterable, <]
[;, }, }, public, Iterable, <, Node, >, siblings, (, ), {, return, new, SiblingNodeIterable, (, this, ), ;, }]
[), ;, }, }, public, Iterable, <, Node, >, siblings, (, ), {, return, new, SiblingNodeIterable, (, this, ), ;]
[;, }, private, static, final, class, SiblingNodeIterable, implements, Iterable, <, Node, >, ,, Iterator, <, Node, >, {, private, final]
[), ;, }, private, static, final, class, SiblingNodeIterable, implements, Iterable, <, Node, >, ,, Iterator, <, Node, >, {, private]
[=, start, ;, this, ., current, =, start, ;, this, ., used, =, false, ;, }, @, Override, public, Iterator]
[., start, =, start, ;, this, ., current, =, start, ;, this, ., used, =, false, ;, }, @, Override]
[;, this, ., current, =, start, ;, this, ., used, =, false, ;, }, @, Override, public, Iterator, <, Node]
[=, start, ;, this, ., used, =, false, ;, }, @, Override, public, Iterator, <, Node, >, iterator, (, )]
[., current, =, start, ;, this, ., used, =, false, ;, }, @, Override, public, Iterator, <, Node, >, iterator]
[;, this, ., used, =, false, ;, }, @, Override, public, Iterator, <, Node, >, iterator, (, ), {, if]
[=, false, ;, }, @, Override, public, Iterator, <, Node, >, iterator, (, ), {, if, (, !, used, )]
[., used, =, false, ;, }, @, Override, public, Iterator, <, Node, >, iterator, (, ), {, if, (, !]
[;, }, @, Override, public, Iterator, <, Node, >, iterator, (, ), {, if, (, !, used, ), {, used]
[), {, used, =, true, ;, return, this, ;, }, else, {, return, (, new, SiblingNodeIterable, (, start, ), )]
[), {, used, =, true, ;, return, this, ;, }, else, {, return, (, new, SiblingNodeIterable, (, start, ), )]
[=, true, ;, return, this, ;, }, else, {, return, (, new, SiblingNodeIterable, (, start, ), ), ., iterator, (]
[;, return, this, ;, }, else, {, return, (, new, SiblingNodeIterable, (, start, ), ), ., iterator, (, ), ;]
[;, }, else, {, return, (, new, SiblingNodeIterable, (, start, ), ), ., iterator, (, ), ;, }, }, @]
[;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, current, !=, null, ;, }, @, Override, public]
[., iterator, (, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, current, !=, null, ;]
[), ., iterator, (, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, current, !=, null]
[), ), ., iterator, (, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, current, !=]
[;, }, @, Override, public, Node, next, (, ), {, if, (, current, ==, null, ), {, throw, new, NoSuchElementException]
[!=, null, ;, }, @, Override, public, Node, next, (, ), {, if, (, current, ==, null, ), {, throw]
[;, }, @, Override, public, Node, next, (, ), {, if, (, current, ==, null, ), {, throw, new, NoSuchElementException]
[), {, throw, new, NoSuchElementException, (, ), ;, }, try, {, return, current, ;, }, finally, {, current, =, current]
[==, null, ), {, throw, new, NoSuchElementException, (, ), ;, }, try, {, return, current, ;, }, finally, {, current]
[), {, throw, new, NoSuchElementException, (, ), ;, }, try, {, return, current, ;, }, finally, {, current, =, current]
[;, }, try, {, return, current, ;, }, finally, {, current, =, current, ., getNext, (, ), ;, }, }]
[;, }, finally, {, current, =, current, ., getNext, (, ), ;, }, }, @, Override, public, void, remove, (]
[=, current, ., getNext, (, ), ;, }, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException]
[;, }, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, PropListItem]
[., getNext, (, ), ;, }, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, )]
[;, }, }, PropListItem, getPropListHeadForTesting, (, ), {, return, propListHead, ;, }, public, Node, getParent, (, ), {, return, parent]
[;, }, public, Node, getParent, (, ), {, return, parent, ;, }, public, Node, getAncestor, (, int, level, ), {]
[;, }, public, Node, getAncestor, (, int, level, ), {, Preconditions, ., checkArgument, (, level, >=, 0, ), ;, Node]
[;, Node, node, =, this, ;, while, (, node, !=, null, &&, level, --, >, 0, ), {, node, =]
[., checkArgument, (, level, >=, 0, ), ;, Node, node, =, this, ;, while, (, node, !=, null, &&, level]
[), ;, Node, node, =, this, ;, while, (, node, !=, null, &&, level, --, >, 0, ), {, node]
[>=, 0, ), ;, Node, node, =, this, ;, while, (, node, !=, null, &&, level, --, >, 0, )]
[), ;, Node, node, =, this, ;, while, (, node, !=, null, &&, level, --, >, 0, ), {, node]
[;, while, (, node, !=, null, &&, level, --, >, 0, ), {, node, =, node, ., getParent, (, )]
[), {, node, =, node, ., getParent, (, ), ;, }, return, node, ;, }, public, AncestorIterable, getAncestors, (, )]
[&&, level, --, >, 0, ), {, node, =, node, ., getParent, (, ), ;, }, return, node, ;, }]
[!=, null, &&, level, --, >, 0, ), {, node, =, node, ., getParent, (, ), ;, }, return, node]
[&&, level, --, >, 0, ), {, node, =, node, ., getParent, (, ), ;, }, return, node, ;, }]
[), {, node, =, node, ., getParent, (, ), ;, }, return, node, ;, }, public, AncestorIterable, getAncestors, (, )]
[>, 0, ), {, node, =, node, ., getParent, (, ), ;, }, return, node, ;, }, public, AncestorIterable, getAncestors]
[--, >, 0, ), {, node, =, node, ., getParent, (, ), ;, }, return, node, ;, }, public, AncestorIterable]
[), {, node, =, node, ., getParent, (, ), ;, }, return, node, ;, }, public, AncestorIterable, getAncestors, (, )]
[=, node, ., getParent, (, ), ;, }, return, node, ;, }, public, AncestorIterable, getAncestors, (, ), {, return, new]
[;, }, return, node, ;, }, public, AncestorIterable, getAncestors, (, ), {, return, new, AncestorIterable, (, this, ., getParent, (]
[., getParent, (, ), ;, }, return, node, ;, }, public, AncestorIterable, getAncestors, (, ), {, return, new, AncestorIterable, (]
[;, }, public, AncestorIterable, getAncestors, (, ), {, return, new, AncestorIterable, (, this, ., getParent, (, ), ), ;, }]
[;, }, public, static, class, AncestorIterable, implements, Iterable, <, Node, >, {, private, Node, cur, ;, AncestorIterable, (, Node, cur]
[), ;, }, public, static, class, AncestorIterable, implements, Iterable, <, Node, >, {, private, Node, cur, ;, AncestorIterable, (, Node]
[., getParent, (, ), ), ;, }, public, static, class, AncestorIterable, implements, Iterable, <, Node, >, {, private, Node, cur]
[=, cur, ;, }, @, Override, public, Iterator, <, Node, >, iterator, (, ), {, return, new, Iterator, <, Node]
[., cur, =, cur, ;, }, @, Override, public, Iterator, <, Node, >, iterator, (, ), {, return, new, Iterator]
[;, }, @, Override, public, Iterator, <, Node, >, iterator, (, ), {, return, new, Iterator, <, Node, >, (]
[;, }, }, public, boolean, hasOneChild, (, ), {, return, first, !=, null, &&, first, ==, last, ;, }, public]
[;, }, @, Override, public, Node, next, (, ), {, if, (, !, hasNext, (, ), ), throw, new, NoSuchElementException]
[!=, null, ;, }, @, Override, public, Node, next, (, ), {, if, (, !, hasNext, (, ), ), throw]
[;, }, @, Override, public, Node, next, (, ), {, if, (, !, hasNext, (, ), ), throw, new, NoSuchElementException]
[), throw, new, NoSuchElementException, (, ), ;, Node, n, =, cur, ;, cur, =, cur, ., getParent, (, ), ;]
[), throw, new, NoSuchElementException, (, ), ;, Node, n, =, cur, ;, cur, =, cur, ., getParent, (, ), ;]
[;, Node, n, =, cur, ;, cur, =, cur, ., getParent, (, ), ;, return, n, ;, }, @, Override]
[;, cur, =, cur, ., getParent, (, ), ;, return, n, ;, }, @, Override, public, void, remove, (, )]
[=, cur, ., getParent, (, ), ;, return, n, ;, }, @, Override, public, void, remove, (, ), {, throw]
[;, return, n, ;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }]
[., getParent, (, ), ;, return, n, ;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException]
[;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, ;, }]
[;, }, }, ;, }, }, public, boolean, hasOneChild, (, ), {, return, first, !=, null, &&, first, ==, last]
[;, }, public, boolean, hasMoreThanOneChild, (, ), {, return, first, !=, null, &&, first, !=, last, ;, }, public, int]
[&&, first, ==, last, ;, }, public, boolean, hasMoreThanOneChild, (, ), {, return, first, !=, null, &&, first, !=, last]
[!=, null, &&, first, ==, last, ;, }, public, boolean, hasMoreThanOneChild, (, ), {, return, first, !=, null, &&, first]
[&&, first, ==, last, ;, }, public, boolean, hasMoreThanOneChild, (, ), {, return, first, !=, null, &&, first, !=, last]
[;, }, public, boolean, hasMoreThanOneChild, (, ), {, return, first, !=, null, &&, first, !=, last, ;, }, public, int]
[==, last, ;, }, public, boolean, hasMoreThanOneChild, (, ), {, return, first, !=, null, &&, first, !=, last, ;, }]
[;, }, public, boolean, hasMoreThanOneChild, (, ), {, return, first, !=, null, &&, first, !=, last, ;, }, public, int]
[;, }, public, int, getChildCount, (, ), {, int, c, =, 0, ;, for, (, Node, n, =, first, ;]
[&&, first, !=, last, ;, }, public, int, getChildCount, (, ), {, int, c, =, 0, ;, for, (, Node]
[!=, null, &&, first, !=, last, ;, }, public, int, getChildCount, (, ), {, int, c, =, 0, ;, for]
[&&, first, !=, last, ;, }, public, int, getChildCount, (, ), {, int, c, =, 0, ;, for, (, Node]
[;, }, public, int, getChildCount, (, ), {, int, c, =, 0, ;, for, (, Node, n, =, first, ;]
[!=, last, ;, }, public, int, getChildCount, (, ), {, int, c, =, 0, ;, for, (, Node, n, =]
[;, }, public, int, getChildCount, (, ), {, int, c, =, 0, ;, for, (, Node, n, =, first, ;]
[;, for, (, Node, n, =, first, ;, n, !=, null, ;, n, =, n, ., next, ), c, ++]
[;, n, !=, null, ;, n, =, n, ., next, ), c, ++, ;, return, c, ;, }, public, boolean]
[;, n, =, n, ., next, ), c, ++, ;, return, c, ;, }, public, boolean, hasChild, (, Node, child]
[!=, null, ;, n, =, n, ., next, ), c, ++, ;, return, c, ;, }, public, boolean, hasChild, (]
[;, n, =, n, ., next, ), c, ++, ;, return, c, ;, }, public, boolean, hasChild, (, Node, child]
[=, n, ., next, ), c, ++, ;, return, c, ;, }, public, boolean, hasChild, (, Node, child, ), {]
[), c, ++, ;, return, c, ;, }, public, boolean, hasChild, (, Node, child, ), {, for, (, Node, n]
[., next, ), c, ++, ;, return, c, ;, }, public, boolean, hasChild, (, Node, child, ), {, for, (]
[;, return, c, ;, }, public, boolean, hasChild, (, Node, child, ), {, for, (, Node, n, =, first, ;]
[++, ;, return, c, ;, }, public, boolean, hasChild, (, Node, child, ), {, for, (, Node, n, =, first]
[;, }, public, boolean, hasChild, (, Node, child, ), {, for, (, Node, n, =, first, ;, n, !=, null]
[;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (, child, ==, n, )]
[;, n, =, n, ., getNext, (, ), ), {, if, (, child, ==, n, ), {, return, true, ;]
[!=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (, child, ==, n, ), {, return]
[;, n, =, n, ., getNext, (, ), ), {, if, (, child, ==, n, ), {, return, true, ;]
[=, n, ., getNext, (, ), ), {, if, (, child, ==, n, ), {, return, true, ;, }, }]
[), {, if, (, child, ==, n, ), {, return, true, ;, }, }, return, false, ;, }, public, String]
[., getNext, (, ), ), {, if, (, child, ==, n, ), {, return, true, ;, }, }, return, false]
[), {, return, true, ;, }, }, return, false, ;, }, public, String, checkTreeEquals, (, Node, node2, ), {, NodeMismatch]
[==, n, ), {, return, true, ;, }, }, return, false, ;, }, public, String, checkTreeEquals, (, Node, node2, )]
[), {, return, true, ;, }, }, return, false, ;, }, public, String, checkTreeEquals, (, Node, node2, ), {, NodeMismatch]
[;, }, }, return, false, ;, }, public, String, checkTreeEquals, (, Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (]
[;, }, public, String, checkTreeEquals, (, Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (]
[;, if, (, diff, !=, null, ), {, return, "Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2]
[), ;, if, (, diff, !=, null, ), {, return, "Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +]
[), {, return, "Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: "]
[!=, null, ), {, return, "Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, )]
[), {, return, "Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: "]
[;, }, return, null, ;, }, NodeMismatch, checkTreeEqualsImpl, (, Node, node2, ), {, if, (, !, isEquivalentTo, (, node2, ,]
[+, diff, ., nodeB, ., toStringTree, (, ), ;, }, return, null, ;, }, NodeMismatch, checkTreeEqualsImpl, (, Node, node2, )]
[+, "\n\nSubtree2: ", +, diff, ., nodeB, ., toStringTree, (, ), ;, }, return, null, ;, }, NodeMismatch, checkTreeEqualsImpl, (, Node]
[+, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: ", +, diff, ., nodeB, ., toStringTree, (, ), ;, }]
[+, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: ", +, diff, ., nodeB, ., toStringTree, (, )]
[+, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: ", +, diff]
[+, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: "]
[+, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree]
[+, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA]
[+, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree]
[+, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: "]
[+, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: ", +, diff]
[+, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: ", +, diff, ., nodeB, ., toStringTree, (, )]
[., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: ", +, diff, ., nodeB]
[+, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: ", +, diff, ., nodeB, ., toStringTree, (, ), ;, }]
[+, "\n\nSubtree2: ", +, diff, ., nodeB, ., toStringTree, (, ), ;, }, return, null, ;, }, NodeMismatch, checkTreeEqualsImpl, (, Node]
[., toStringTree, (, ), +, "\n\nSubtree2: ", +, diff, ., nodeB, ., toStringTree, (, ), ;, }, return, null, ;, }]
[., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: ", +, diff, ., nodeB, ., toStringTree, (, ), ;, }, return, null]
[+, diff, ., nodeB, ., toStringTree, (, ), ;, }, return, null, ;, }, NodeMismatch, checkTreeEqualsImpl, (, Node, node2, )]
[;, }, return, null, ;, }, NodeMismatch, checkTreeEqualsImpl, (, Node, node2, ), {, if, (, !, isEquivalentTo, (, node2, ,]
[., toStringTree, (, ), ;, }, return, null, ;, }, NodeMismatch, checkTreeEqualsImpl, (, Node, node2, ), {, if, (, !]
[., nodeB, ., toStringTree, (, ), ;, }, return, null, ;, }, NodeMismatch, checkTreeEqualsImpl, (, Node, node2, ), {, if]
[;, }, NodeMismatch, checkTreeEqualsImpl, (, Node, node2, ), {, if, (, !, isEquivalentTo, (, node2, ,, false, ,, false, )]
[), {, return, new, NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,]
[), {, return, new, NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,]
[,, false, ,, false, ), ), {, return, new, NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =]
[,, false, ), ), {, return, new, NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =, null, ;]
[), ), {, return, new, NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n]
[;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =]
[,, node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =, first]
[), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2]
[;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;, res, ==]
[=, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n]
[,, n2, =, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next]
[=, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next, ,, n2]
[;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next]
[., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2]
[;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, node2, ==, null, )]
[&&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (]
[==, null, &&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {]
[&&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (]
[;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, node2, ==, null, )]
[!=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, node2, ==]
[;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, node2, ==, null, )]
[=, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, node2, ==, null, ), {, throw]
[,, n2, =, n2, ., next, ), {, if, (, node2, ==, null, ), {, throw, new, IllegalStateException, (, )]
[., next, ,, n2, =, n2, ., next, ), {, if, (, node2, ==, null, ), {, throw, new, IllegalStateException]
[=, n2, ., next, ), {, if, (, node2, ==, null, ), {, throw, new, IllegalStateException, (, ), ;, }]
[), {, if, (, node2, ==, null, ), {, throw, new, IllegalStateException, (, ), ;, }, res, =, n, .]
[., next, ), {, if, (, node2, ==, null, ), {, throw, new, IllegalStateException, (, ), ;, }, res, =]
[), {, throw, new, IllegalStateException, (, ), ;, }, res, =, n, ., checkTreeEqualsImpl, (, n2, ), ;, if, (]
[==, null, ), {, throw, new, IllegalStateException, (, ), ;, }, res, =, n, ., checkTreeEqualsImpl, (, n2, ), ;]
[), {, throw, new, IllegalStateException, (, ), ;, }, res, =, n, ., checkTreeEqualsImpl, (, n2, ), ;, if, (]
[;, }, res, =, n, ., checkTreeEqualsImpl, (, n2, ), ;, if, (, res, !=, null, ), {, return, res]
[=, n, ., checkTreeEqualsImpl, (, n2, ), ;, if, (, res, !=, null, ), {, return, res, ;, }, }]
[;, if, (, res, !=, null, ), {, return, res, ;, }, }, return, res, ;, }, NodeMismatch, checkTreeTypeAwareEqualsImpl, (]
[., checkTreeEqualsImpl, (, n2, ), ;, if, (, res, !=, null, ), {, return, res, ;, }, }, return, res]
[), ;, if, (, res, !=, null, ), {, return, res, ;, }, }, return, res, ;, }, NodeMismatch, checkTreeTypeAwareEqualsImpl]
[), {, return, res, ;, }, }, return, res, ;, }, NodeMismatch, checkTreeTypeAwareEqualsImpl, (, Node, node2, ), {, if, (]
[!=, null, ), {, return, res, ;, }, }, return, res, ;, }, NodeMismatch, checkTreeTypeAwareEqualsImpl, (, Node, node2, ), {]
[), {, return, res, ;, }, }, return, res, ;, }, NodeMismatch, checkTreeTypeAwareEqualsImpl, (, Node, node2, ), {, if, (]
[;, }, }, return, res, ;, }, NodeMismatch, checkTreeTypeAwareEqualsImpl, (, Node, node2, ), {, if, (, !, isEquivalentTo, (, node2]
[;, }, NodeMismatch, checkTreeTypeAwareEqualsImpl, (, Node, node2, ), {, if, (, !, isEquivalentTo, (, node2, ,, true, ,, false, )]
[), {, return, new, NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,]
[), {, return, new, NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,]
[,, true, ,, false, ), ), {, return, new, NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =]
[,, false, ), ), {, return, new, NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =, null, ;]
[), ), {, return, new, NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n]
[;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =]
[,, node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =, first]
[), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2]
[;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;, res, ==]
[=, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n]
[,, n2, =, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next]
[=, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next, ,, n2]
[;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next]
[., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2]
[;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (]
[&&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, res, =]
[==, null, &&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {]
[&&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, res, =]
[;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (]
[!=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, res, =, n, .]
[;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (]
[=, n, ., next, ,, n2, =, n2, ., next, ), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (, n2, )]
[,, n2, =, n2, ., next, ), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (, n2, ), ;, if, (, res]
[., next, ,, n2, =, n2, ., next, ), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (, n2, ), ;, if]
[=, n2, ., next, ), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (, n2, ), ;, if, (, res, !=, null]
[), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (, n2, ), ;, if, (, res, !=, null, ), {, return, res]
[., next, ), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (, n2, ), ;, if, (, res, !=, null, ), {]
[=, n, ., checkTreeTypeAwareEqualsImpl, (, n2, ), ;, if, (, res, !=, null, ), {, return, res, ;, }, }]
[;, if, (, res, !=, null, ), {, return, res, ;, }, }, return, res, ;, }, public, boolean, isEquivalentTo]
[., checkTreeTypeAwareEqualsImpl, (, n2, ), ;, if, (, res, !=, null, ), {, return, res, ;, }, }, return, res]
[), ;, if, (, res, !=, null, ), {, return, res, ;, }, }, return, res, ;, }, public, boolean]
[), {, return, res, ;, }, }, return, res, ;, }, public, boolean, isEquivalentTo, (, Node, node, ), {, return]
[!=, null, ), {, return, res, ;, }, }, return, res, ;, }, public, boolean, isEquivalentTo, (, Node, node, )]
[), {, return, res, ;, }, }, return, res, ;, }, public, boolean, isEquivalentTo, (, Node, node, ), {, return]
[;, }, }, return, res, ;, }, public, boolean, isEquivalentTo, (, Node, node, ), {, return, isEquivalentTo, (, node, ,]
[;, }, public, boolean, isEquivalentTo, (, Node, node, ), {, return, isEquivalentTo, (, node, ,, false, ,, true, ), ;]
[;, }, public, boolean, isEquivalentToTyped, (, Node, node, ), {, return, isEquivalentTo, (, node, ,, true, ,, true, ), ;]
[,, false, ,, true, ), ;, }, public, boolean, isEquivalentToTyped, (, Node, node, ), {, return, isEquivalentTo, (, node, ,]
[,, true, ), ;, }, public, boolean, isEquivalentToTyped, (, Node, node, ), {, return, isEquivalentTo, (, node, ,, true, ,]
[), ;, }, public, boolean, isEquivalentToTyped, (, Node, node, ), {, return, isEquivalentTo, (, node, ,, true, ,, true, )]
[;, }, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, if, (, type, !=, node]
[,, true, ,, true, ), ;, }, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {]
[,, true, ), ;, }, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, if, (]
[), ;, }, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, if, (, type, !=]
[), {, return, false, ;, }, if, (, compareJsType, &&, !, JSType, ., isEquivalent, (, jsType, ,, node, ., getJSType]
[||, this, ., getClass, (, ), !=, node, ., getClass, (, ), ), {, return, false, ;, }, if, (]
[||, getChildCount, (, ), !=, node, ., getChildCount, (, ), ||, this, ., getClass, (, ), !=, node, ., getClass]
[!=, node, ., getType, (, ), ||, getChildCount, (, ), !=, node, ., getChildCount, (, ), ||, this, ., getClass]
[||, getChildCount, (, ), !=, node, ., getChildCount, (, ), ||, this, ., getClass, (, ), !=, node, ., getClass]
[., getType, (, ), ||, getChildCount, (, ), !=, node, ., getChildCount, (, ), ||, this, ., getClass, (, )]
[||, this, ., getClass, (, ), !=, node, ., getClass, (, ), ), {, return, false, ;, }, if, (]
[!=, node, ., getChildCount, (, ), ||, this, ., getClass, (, ), !=, node, ., getClass, (, ), ), {]
[||, this, ., getClass, (, ), !=, node, ., getClass, (, ), ), {, return, false, ;, }, if, (]
[., getChildCount, (, ), ||, this, ., getClass, (, ), !=, node, ., getClass, (, ), ), {, return, false]
[), {, return, false, ;, }, if, (, compareJsType, &&, !, JSType, ., isEquivalent, (, jsType, ,, node, ., getJSType]
[!=, node, ., getClass, (, ), ), {, return, false, ;, }, if, (, compareJsType, &&, !, JSType, ., isEquivalent]
[., getClass, (, ), !=, node, ., getClass, (, ), ), {, return, false, ;, }, if, (, compareJsType, &&]
[), {, return, false, ;, }, if, (, compareJsType, &&, !, JSType, ., isEquivalent, (, jsType, ,, node, ., getJSType]
[., getClass, (, ), ), {, return, false, ;, }, if, (, compareJsType, &&, !, JSType, ., isEquivalent, (, jsType]
[;, }, if, (, compareJsType, &&, !, JSType, ., isEquivalent, (, jsType, ,, node, ., getJSType, (, ), ), )]
[), {, return, false, ;, }, if, (, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, )]
[&&, !, JSType, ., isEquivalent, (, jsType, ,, node, ., getJSType, (, ), ), ), {, return, false, ;, }]
[), {, return, false, ;, }, if, (, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, )]
[), {, return, false, ;, }, if, (, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, )]
[., isEquivalent, (, jsType, ,, node, ., getJSType, (, ), ), ), {, return, false, ;, }, if, (, type]
[,, node, ., getJSType, (, ), ), ), {, return, false, ;, }, if, (, type, ==, Token, ., INC]
[), ), {, return, false, ;, }, if, (, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC]
[., getJSType, (, ), ), ), {, return, false, ;, }, if, (, type, ==, Token, ., INC, ||, type]
[;, }, if, (, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ), {, int, post1, =]
[), {, int, post1, =, this, ., getIntProp, (, INCRDECR_PROP, ), ;, int, post2, =, node, ., getIntProp, (, INCRDECR_PROP]
[||, type, ==, Token, ., DEC, ), {, int, post1, =, this, ., getIntProp, (, INCRDECR_PROP, ), ;, int, post2]
[==, Token, ., INC, ||, type, ==, Token, ., DEC, ), {, int, post1, =, this, ., getIntProp, (, INCRDECR_PROP]
[||, type, ==, Token, ., DEC, ), {, int, post1, =, this, ., getIntProp, (, INCRDECR_PROP, ), ;, int, post2]
[., INC, ||, type, ==, Token, ., DEC, ), {, int, post1, =, this, ., getIntProp, (, INCRDECR_PROP, ), ;]
[), {, int, post1, =, this, ., getIntProp, (, INCRDECR_PROP, ), ;, int, post2, =, node, ., getIntProp, (, INCRDECR_PROP]
[==, Token, ., DEC, ), {, int, post1, =, this, ., getIntProp, (, INCRDECR_PROP, ), ;, int, post2, =, node]
[), {, int, post1, =, this, ., getIntProp, (, INCRDECR_PROP, ), ;, int, post2, =, node, ., getIntProp, (, INCRDECR_PROP]
[., DEC, ), {, int, post1, =, this, ., getIntProp, (, INCRDECR_PROP, ), ;, int, post2, =, node, ., getIntProp]
[;, int, post2, =, node, ., getIntProp, (, INCRDECR_PROP, ), ;, if, (, post1, !=, post2, ), {, return, false]
[., getIntProp, (, INCRDECR_PROP, ), ;, int, post2, =, node, ., getIntProp, (, INCRDECR_PROP, ), ;, if, (, post1, !=]
[), ;, int, post2, =, node, ., getIntProp, (, INCRDECR_PROP, ), ;, if, (, post1, !=, post2, ), {, return]
[;, if, (, post1, !=, post2, ), {, return, false, ;, }, }, else, if, (, type, ==, Token, .]
[., getIntProp, (, INCRDECR_PROP, ), ;, if, (, post1, !=, post2, ), {, return, false, ;, }, }, else, if]
[), ;, if, (, post1, !=, post2, ), {, return, false, ;, }, }, else, if, (, type, ==, Token]
[), {, return, false, ;, }, }, else, if, (, type, ==, Token, ., STRING, ||, type, ==, Token, .]
[!=, post2, ), {, return, false, ;, }, }, else, if, (, type, ==, Token, ., STRING, ||, type, ==]
[), {, return, false, ;, }, }, else, if, (, type, ==, Token, ., STRING, ||, type, ==, Token, .]
[;, }, }, else, if, (, type, ==, Token, ., STRING, ||, type, ==, Token, ., STRING_KEY, ), {, if]
[), {, if, (, type, ==, Token, ., STRING_KEY, ), {, int, quoted1, =, this, ., getIntProp, (, QUOTED_PROP, )]
[||, type, ==, Token, ., STRING_KEY, ), {, if, (, type, ==, Token, ., STRING_KEY, ), {, int, quoted1, =]
[==, Token, ., STRING, ||, type, ==, Token, ., STRING_KEY, ), {, if, (, type, ==, Token, ., STRING_KEY, )]
[||, type, ==, Token, ., STRING_KEY, ), {, if, (, type, ==, Token, ., STRING_KEY, ), {, int, quoted1, =]
[., STRING, ||, type, ==, Token, ., STRING_KEY, ), {, if, (, type, ==, Token, ., STRING_KEY, ), {, int]
[), {, if, (, type, ==, Token, ., STRING_KEY, ), {, int, quoted1, =, this, ., getIntProp, (, QUOTED_PROP, )]
[==, Token, ., STRING_KEY, ), {, if, (, type, ==, Token, ., STRING_KEY, ), {, int, quoted1, =, this, .]
[), {, if, (, type, ==, Token, ., STRING_KEY, ), {, int, quoted1, =, this, ., getIntProp, (, QUOTED_PROP, )]
[., STRING_KEY, ), {, if, (, type, ==, Token, ., STRING_KEY, ), {, int, quoted1, =, this, ., getIntProp, (]
[), {, int, quoted1, =, this, ., getIntProp, (, QUOTED_PROP, ), ;, int, quoted2, =, node, ., getIntProp, (, QUOTED_PROP]
[==, Token, ., STRING_KEY, ), {, int, quoted1, =, this, ., getIntProp, (, QUOTED_PROP, ), ;, int, quoted2, =, node]
[), {, int, quoted1, =, this, ., getIntProp, (, QUOTED_PROP, ), ;, int, quoted2, =, node, ., getIntProp, (, QUOTED_PROP]
[., STRING_KEY, ), {, int, quoted1, =, this, ., getIntProp, (, QUOTED_PROP, ), ;, int, quoted2, =, node, ., getIntProp]
[;, int, quoted2, =, node, ., getIntProp, (, QUOTED_PROP, ), ;, if, (, quoted1, !=, quoted2, ), {, return, false]
[., getIntProp, (, QUOTED_PROP, ), ;, int, quoted2, =, node, ., getIntProp, (, QUOTED_PROP, ), ;, if, (, quoted1, !=]
[), ;, int, quoted2, =, node, ., getIntProp, (, QUOTED_PROP, ), ;, if, (, quoted1, !=, quoted2, ), {, return]
[;, if, (, quoted1, !=, quoted2, ), {, return, false, ;, }, }, int, slashV1, =, this, ., getIntProp, (]
[., getIntProp, (, QUOTED_PROP, ), ;, if, (, quoted1, !=, quoted2, ), {, return, false, ;, }, }, int, slashV1]
[), ;, if, (, quoted1, !=, quoted2, ), {, return, false, ;, }, }, int, slashV1, =, this, ., getIntProp]
[), {, return, false, ;, }, }, int, slashV1, =, this, ., getIntProp, (, SLASH_V, ), ;, int, slashV2, =]
[!=, quoted2, ), {, return, false, ;, }, }, int, slashV1, =, this, ., getIntProp, (, SLASH_V, ), ;, int]
[), {, return, false, ;, }, }, int, slashV1, =, this, ., getIntProp, (, SLASH_V, ), ;, int, slashV2, =]
[;, }, }, int, slashV1, =, this, ., getIntProp, (, SLASH_V, ), ;, int, slashV2, =, node, ., getIntProp, (]
[;, int, slashV2, =, node, ., getIntProp, (, SLASH_V, ), ;, if, (, slashV1, !=, slashV2, ), {, return, false]
[., getIntProp, (, SLASH_V, ), ;, int, slashV2, =, node, ., getIntProp, (, SLASH_V, ), ;, if, (, slashV1, !=]
[), ;, int, slashV2, =, node, ., getIntProp, (, SLASH_V, ), ;, if, (, slashV1, !=, slashV2, ), {, return]
[;, if, (, slashV1, !=, slashV2, ), {, return, false, ;, }, }, else, if, (, type, ==, Token, .]
[., getIntProp, (, SLASH_V, ), ;, if, (, slashV1, !=, slashV2, ), {, return, false, ;, }, }, else, if]
[), ;, if, (, slashV1, !=, slashV2, ), {, return, false, ;, }, }, else, if, (, type, ==, Token]
[), {, return, false, ;, }, }, else, if, (, type, ==, Token, ., CALL, ), {, if, (, this]
[!=, slashV2, ), {, return, false, ;, }, }, else, if, (, type, ==, Token, ., CALL, ), {, if]
[), {, return, false, ;, }, }, else, if, (, type, ==, Token, ., CALL, ), {, if, (, this]
[;, }, }, else, if, (, type, ==, Token, ., CALL, ), {, if, (, this, ., getBooleanProp, (, FREE_CALL]
[), {, if, (, this, ., getBooleanProp, (, FREE_CALL, ), !=, node, ., getBooleanProp, (, FREE_CALL, ), ), {, return]
[==, Token, ., CALL, ), {, if, (, this, ., getBooleanProp, (, FREE_CALL, ), !=, node, ., getBooleanProp, (, FREE_CALL]
[), {, if, (, this, ., getBooleanProp, (, FREE_CALL, ), !=, node, ., getBooleanProp, (, FREE_CALL, ), ), {, return]
[., CALL, ), {, if, (, this, ., getBooleanProp, (, FREE_CALL, ), !=, node, ., getBooleanProp, (, FREE_CALL, ), )]
[), {, return, false, ;, }, }, if, (, recurse, ), {, Node, n, ,, n2, ;, for, (, n]
[!=, node, ., getBooleanProp, (, FREE_CALL, ), ), {, return, false, ;, }, }, if, (, recurse, ), {, Node]
[., getBooleanProp, (, FREE_CALL, ), !=, node, ., getBooleanProp, (, FREE_CALL, ), ), {, return, false, ;, }, }, if]
[), !=, node, ., getBooleanProp, (, FREE_CALL, ), ), {, return, false, ;, }, }, if, (, recurse, ), {]
[), {, return, false, ;, }, }, if, (, recurse, ), {, Node, n, ,, n2, ;, for, (, n]
[., getBooleanProp, (, FREE_CALL, ), ), {, return, false, ;, }, }, if, (, recurse, ), {, Node, n, ,]
[), ), {, return, false, ;, }, }, if, (, recurse, ), {, Node, n, ,, n2, ;, for, (]
[;, }, }, if, (, recurse, ), {, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2]
[), {, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node, ., first, ;, n]
[=, first, ,, n2, =, node, ., first, ;, n, !=, null, ;, n, =, n, ., next, ,, n2]
[,, n2, =, node, ., first, ;, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2]
[=, node, ., first, ;, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next]
[;, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (]
[., first, ;, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {]
[;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, !, n, ., isEquivalentTo]
[!=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, !, n]
[;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, !, n, ., isEquivalentTo]
[=, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, !, n, ., isEquivalentTo, (, n2]
[,, n2, =, n2, ., next, ), {, if, (, !, n, ., isEquivalentTo, (, n2, ,, compareJsType, ,, true]
[., next, ,, n2, =, n2, ., next, ), {, if, (, !, n, ., isEquivalentTo, (, n2, ,, compareJsType]
[=, n2, ., next, ), {, if, (, !, n, ., isEquivalentTo, (, n2, ,, compareJsType, ,, true, ), )]
[), {, if, (, !, n, ., isEquivalentTo, (, n2, ,, compareJsType, ,, true, ), ), {, return, false, ;]
[., next, ), {, if, (, !, n, ., isEquivalentTo, (, n2, ,, compareJsType, ,, true, ), ), {, return]
[), {, return, false, ;, }, }, }, return, true, ;, }, public, String, getQualifiedName, (, ), {, if, (]
[), {, return, false, ;, }, }, }, return, true, ;, }, public, String, getQualifiedName, (, ), {, if, (]
[., isEquivalentTo, (, n2, ,, compareJsType, ,, true, ), ), {, return, false, ;, }, }, }, return, true, ;]
[,, compareJsType, ,, true, ), ), {, return, false, ;, }, }, }, return, true, ;, }, public, String, getQualifiedName]
[,, true, ), ), {, return, false, ;, }, }, }, return, true, ;, }, public, String, getQualifiedName, (, )]
[), ), {, return, false, ;, }, }, }, return, true, ;, }, public, String, getQualifiedName, (, ), {, if]
[;, }, }, }, return, true, ;, }, public, String, getQualifiedName, (, ), {, if, (, type, ==, Token, .]
[;, }, public, String, getQualifiedName, (, ), {, if, (, type, ==, Token, ., NAME, ), {, String, name, =]
[), {, String, name, =, getString, (, ), ;, return, name, ., isEmpty, (, ), ?, null, :, name, ;]
[==, Token, ., NAME, ), {, String, name, =, getString, (, ), ;, return, name, ., isEmpty, (, ), ?]
[), {, String, name, =, getString, (, ), ;, return, name, ., isEmpty, (, ), ?, null, :, name, ;]
[., NAME, ), {, String, name, =, getString, (, ), ;, return, name, ., isEmpty, (, ), ?, null, :]
[;, return, name, ., isEmpty, (, ), ?, null, :, name, ;, }, else, if, (, type, ==, Token, .]
[;, }, else, if, (, type, ==, Token, ., GETPROP, ), {, String, left, =, getFirstChild, (, ), ., getQualifiedName]
[?, null, :, name, ;, }, else, if, (, type, ==, Token, ., GETPROP, ), {, String, left, =, getFirstChild]
[., isEmpty, (, ), ?, null, :, name, ;, }, else, if, (, type, ==, Token, ., GETPROP, ), {]
[:, name, ;, }, else, if, (, type, ==, Token, ., GETPROP, ), {, String, left, =, getFirstChild, (, )]
[;, }, else, if, (, type, ==, Token, ., GETPROP, ), {, String, left, =, getFirstChild, (, ), ., getQualifiedName]
[), {, String, left, =, getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, left, ==, null, ), {]
[==, Token, ., GETPROP, ), {, String, left, =, getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, left]
[), {, String, left, =, getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, left, ==, null, ), {]
[., GETPROP, ), {, String, left, =, getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, left, ==, null]
[;, if, (, left, ==, null, ), {, return, null, ;, }, return, left, +, ".", +, getLastChild, (, )]
[., getQualifiedName, (, ), ;, if, (, left, ==, null, ), {, return, null, ;, }, return, left, +, "."]
[), {, return, null, ;, }, return, left, +, ".", +, getLastChild, (, ), ., getString, (, ), ;, }]
[==, null, ), {, return, null, ;, }, return, left, +, ".", +, getLastChild, (, ), ., getString, (, )]
[), {, return, null, ;, }, return, left, +, ".", +, getLastChild, (, ), ., getString, (, ), ;, }]
[;, }, return, left, +, ".", +, getLastChild, (, ), ., getString, (, ), ;, }, else, if, (, type]
[;, }, else, if, (, type, ==, Token, ., THIS, ), {, return, "this", ;, }, else, {, return, null]
[+, getLastChild, (, ), ., getString, (, ), ;, }, else, if, (, type, ==, Token, ., THIS, ), {]
[+, ".", +, getLastChild, (, ), ., getString, (, ), ;, }, else, if, (, type, ==, Token, ., THIS]
[+, getLastChild, (, ), ., getString, (, ), ;, }, else, if, (, type, ==, Token, ., THIS, ), {]
[;, }, else, if, (, type, ==, Token, ., THIS, ), {, return, "this", ;, }, else, {, return, null]
[., getString, (, ), ;, }, else, if, (, type, ==, Token, ., THIS, ), {, return, "this", ;, }]
[), {, return, "this", ;, }, else, {, return, null, ;, }, }, public, boolean, isQualifiedName, (, ), {, switch]
[==, Token, ., THIS, ), {, return, "this", ;, }, else, {, return, null, ;, }, }, public, boolean, isQualifiedName]
[), {, return, "this", ;, }, else, {, return, null, ;, }, }, public, boolean, isQualifiedName, (, ), {, switch]
[., THIS, ), {, return, "this", ;, }, else, {, return, null, ;, }, }, public, boolean, isQualifiedName, (, )]
[;, }, else, {, return, null, ;, }, }, public, boolean, isQualifiedName, (, ), {, switch, (, getType, (, )]
[;, }, }, public, boolean, isQualifiedName, (, ), {, switch, (, getType, (, ), ), {, case, Token, ., NAME]
[), {, case, Token, ., NAME, :, return, getString, (, ), ., isEmpty, (, ), ?, false, :, true, ;]
[:, return, getString, (, ), ., isEmpty, (, ), ?, false, :, true, ;, case, Token, ., THIS, :, return]
[., NAME, :, return, getString, (, ), ., isEmpty, (, ), ?, false, :, true, ;, case, Token, ., THIS]
[;, case, Token, ., THIS, :, return, true, ;, case, Token, ., GETPROP, :, return, getFirstChild, (, ), ., isQualifiedName]
[?, false, :, true, ;, case, Token, ., THIS, :, return, true, ;, case, Token, ., GETPROP, :, return, getFirstChild]
[., isEmpty, (, ), ?, false, :, true, ;, case, Token, ., THIS, :, return, true, ;, case, Token, .]
[:, true, ;, case, Token, ., THIS, :, return, true, ;, case, Token, ., GETPROP, :, return, getFirstChild, (, )]
[;, case, Token, ., THIS, :, return, true, ;, case, Token, ., GETPROP, :, return, getFirstChild, (, ), ., isQualifiedName]
[:, return, true, ;, case, Token, ., GETPROP, :, return, getFirstChild, (, ), ., isQualifiedName, (, ), ;, default, :]
[., THIS, :, return, true, ;, case, Token, ., GETPROP, :, return, getFirstChild, (, ), ., isQualifiedName, (, ), ;]
[;, case, Token, ., GETPROP, :, return, getFirstChild, (, ), ., isQualifiedName, (, ), ;, default, :, return, false, ;]
[:, return, getFirstChild, (, ), ., isQualifiedName, (, ), ;, default, :, return, false, ;, }, }, public, boolean, isUnscopedQualifiedName]
[., GETPROP, :, return, getFirstChild, (, ), ., isQualifiedName, (, ), ;, default, :, return, false, ;, }, }, public]
[;, default, :, return, false, ;, }, }, public, boolean, isUnscopedQualifiedName, (, ), {, switch, (, getType, (, ), )]
[., isQualifiedName, (, ), ;, default, :, return, false, ;, }, }, public, boolean, isUnscopedQualifiedName, (, ), {, switch, (]
[;, }, }, public, boolean, isUnscopedQualifiedName, (, ), {, switch, (, getType, (, ), ), {, case, Token, ., NAME]
[), {, case, Token, ., NAME, :, return, getString, (, ), ., isEmpty, (, ), ?, false, :, true, ;]
[:, return, getString, (, ), ., isEmpty, (, ), ?, false, :, true, ;, case, Token, ., GETPROP, :, return]
[., NAME, :, return, getString, (, ), ., isEmpty, (, ), ?, false, :, true, ;, case, Token, ., GETPROP]
[;, case, Token, ., GETPROP, :, return, getFirstChild, (, ), ., isUnscopedQualifiedName, (, ), ;, default, :, return, false, ;]
[?, false, :, true, ;, case, Token, ., GETPROP, :, return, getFirstChild, (, ), ., isUnscopedQualifiedName, (, ), ;, default]
[., isEmpty, (, ), ?, false, :, true, ;, case, Token, ., GETPROP, :, return, getFirstChild, (, ), ., isUnscopedQualifiedName]
[:, true, ;, case, Token, ., GETPROP, :, return, getFirstChild, (, ), ., isUnscopedQualifiedName, (, ), ;, default, :, return]
[;, case, Token, ., GETPROP, :, return, getFirstChild, (, ), ., isUnscopedQualifiedName, (, ), ;, default, :, return, false, ;]
[:, return, getFirstChild, (, ), ., isUnscopedQualifiedName, (, ), ;, default, :, return, false, ;, }, }, public, Node, detachFromParent]
[., GETPROP, :, return, getFirstChild, (, ), ., isUnscopedQualifiedName, (, ), ;, default, :, return, false, ;, }, }, public]
[;, default, :, return, false, ;, }, }, public, Node, detachFromParent, (, ), {, Preconditions, ., checkState, (, parent, !=]
[., isUnscopedQualifiedName, (, ), ;, default, :, return, false, ;, }, }, public, Node, detachFromParent, (, ), {, Preconditions, .]
[;, }, }, public, Node, detachFromParent, (, ), {, Preconditions, ., checkState, (, parent, !=, null, ), ;, parent, .]
[;, parent, ., removeChild, (, this, ), ;, return, this, ;, }, public, Node, removeFirstChild, (, ), {, Node, child]
[., checkState, (, parent, !=, null, ), ;, parent, ., removeChild, (, this, ), ;, return, this, ;, }, public]
[), ;, parent, ., removeChild, (, this, ), ;, return, this, ;, }, public, Node, removeFirstChild, (, ), {, Node]
[!=, null, ), ;, parent, ., removeChild, (, this, ), ;, return, this, ;, }, public, Node, removeFirstChild, (, )]
[), ;, parent, ., removeChild, (, this, ), ;, return, this, ;, }, public, Node, removeFirstChild, (, ), {, Node]
[;, return, this, ;, }, public, Node, removeFirstChild, (, ), {, Node, child, =, first, ;, if, (, child, !=]
[., removeChild, (, this, ), ;, return, this, ;, }, public, Node, removeFirstChild, (, ), {, Node, child, =, first]
[), ;, return, this, ;, }, public, Node, removeFirstChild, (, ), {, Node, child, =, first, ;, if, (, child]
[;, }, public, Node, removeFirstChild, (, ), {, Node, child, =, first, ;, if, (, child, !=, null, ), {]
[;, if, (, child, !=, null, ), {, removeChild, (, child, ), ;, }, return, child, ;, }, public, Node]
[), {, removeChild, (, child, ), ;, }, return, child, ;, }, public, Node, removeChildren, (, ), {, Node, children]
[!=, null, ), {, removeChild, (, child, ), ;, }, return, child, ;, }, public, Node, removeChildren, (, ), {]
[), {, removeChild, (, child, ), ;, }, return, child, ;, }, public, Node, removeChildren, (, ), {, Node, children]
[;, }, return, child, ;, }, public, Node, removeChildren, (, ), {, Node, children, =, first, ;, for, (, Node]
[), ;, }, return, child, ;, }, public, Node, removeChildren, (, ), {, Node, children, =, first, ;, for, (]
[;, }, public, Node, removeChildren, (, ), {, Node, children, =, first, ;, for, (, Node, child, =, first, ;]
[;, for, (, Node, child, =, first, ;, child, !=, null, ;, child, =, child, ., getNext, (, ), )]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., parent, =, null, ;]
[;, child, =, child, ., getNext, (, ), ), {, child, ., parent, =, null, ;, }, first, =, null]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., parent, =, null, ;, }, first]
[;, child, =, child, ., getNext, (, ), ), {, child, ., parent, =, null, ;, }, first, =, null]
[=, child, ., getNext, (, ), ), {, child, ., parent, =, null, ;, }, first, =, null, ;, last]
[), {, child, ., parent, =, null, ;, }, first, =, null, ;, last, =, null, ;, return, children, ;]
[., getNext, (, ), ), {, child, ., parent, =, null, ;, }, first, =, null, ;, last, =, null]
[=, null, ;, }, first, =, null, ;, last, =, null, ;, return, children, ;, }, public, void, detachChildren, (]
[., parent, =, null, ;, }, first, =, null, ;, last, =, null, ;, return, children, ;, }, public, void]
[;, }, first, =, null, ;, last, =, null, ;, return, children, ;, }, public, void, detachChildren, (, ), {]
[=, null, ;, last, =, null, ;, return, children, ;, }, public, void, detachChildren, (, ), {, for, (, Node]
[;, last, =, null, ;, return, children, ;, }, public, void, detachChildren, (, ), {, for, (, Node, child, =]
[=, null, ;, return, children, ;, }, public, void, detachChildren, (, ), {, for, (, Node, child, =, first, ;]
[;, return, children, ;, }, public, void, detachChildren, (, ), {, for, (, Node, child, =, first, ;, child, !=]
[;, }, public, void, detachChildren, (, ), {, for, (, Node, child, =, first, ;, child, !=, null, ;, )]
[;, child, !=, null, ;, ), {, Node, nextChild, =, child, ., getNext, (, ), ;, child, ., parent, =]
[;, ), {, Node, nextChild, =, child, ., getNext, (, ), ;, child, ., parent, =, null, ;, child, .]
[!=, null, ;, ), {, Node, nextChild, =, child, ., getNext, (, ), ;, child, ., parent, =, null, ;]
[;, ), {, Node, nextChild, =, child, ., getNext, (, ), ;, child, ., parent, =, null, ;, child, .]
[;, child, ., parent, =, null, ;, child, ., next, =, null, ;, child, =, nextChild, ;, }, first, =]
[., getNext, (, ), ;, child, ., parent, =, null, ;, child, ., next, =, null, ;, child, =, nextChild]
[=, null, ;, child, ., next, =, null, ;, child, =, nextChild, ;, }, first, =, null, ;, last, =]
[., parent, =, null, ;, child, ., next, =, null, ;, child, =, nextChild, ;, }, first, =, null, ;]
[;, child, ., next, =, null, ;, child, =, nextChild, ;, }, first, =, null, ;, last, =, null, ;]
[=, null, ;, child, =, nextChild, ;, }, first, =, null, ;, last, =, null, ;, }, public, Node, removeChildAfter]
[., next, =, null, ;, child, =, nextChild, ;, }, first, =, null, ;, last, =, null, ;, }, public]
[;, child, =, nextChild, ;, }, first, =, null, ;, last, =, null, ;, }, public, Node, removeChildAfter, (, Node]
[=, nextChild, ;, }, first, =, null, ;, last, =, null, ;, }, public, Node, removeChildAfter, (, Node, prev, )]
[;, }, first, =, null, ;, last, =, null, ;, }, public, Node, removeChildAfter, (, Node, prev, ), {, Preconditions]
[=, null, ;, last, =, null, ;, }, public, Node, removeChildAfter, (, Node, prev, ), {, Preconditions, ., checkArgument, (]
[;, last, =, null, ;, }, public, Node, removeChildAfter, (, Node, prev, ), {, Preconditions, ., checkArgument, (, prev, .]
[=, null, ;, }, public, Node, removeChildAfter, (, Node, prev, ), {, Preconditions, ., checkArgument, (, prev, ., parent, ==]
[;, }, public, Node, removeChildAfter, (, Node, prev, ), {, Preconditions, ., checkArgument, (, prev, ., parent, ==, this, ,]
[;, Preconditions, ., checkArgument, (, prev, ., next, !=, null, ,, "no next sibling.", ), ;, Node, child, =, prev, ., next]
[., checkArgument, (, prev, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, prev, ., next, !=]
[,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, prev, ., next, !=, null, ,, "no next sibling.", ), ;, Node, child, =]
[==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, prev, ., next, !=, null, ,, "no next sibling.", ), ;, Node]
[., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, prev, ., next, !=, null, ,, "no next sibling.", )]
[,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, prev, ., next, !=, null, ,, "no next sibling.", ), ;, Node, child, =]
[), ;, Preconditions, ., checkArgument, (, prev, ., next, !=, null, ,, "no next sibling.", ), ;, Node, child, =, prev, .]
[;, Node, child, =, prev, ., next, ;, prev, ., next, =, child, ., next, ;, if, (, child, ==]
[., checkArgument, (, prev, ., next, !=, null, ,, "no next sibling.", ), ;, Node, child, =, prev, ., next, ;, prev]
[,, "no next sibling.", ), ;, Node, child, =, prev, ., next, ;, prev, ., next, =, child, ., next, ;, if]
[!=, null, ,, "no next sibling.", ), ;, Node, child, =, prev, ., next, ;, prev, ., next, =, child, ., next]
[., next, !=, null, ,, "no next sibling.", ), ;, Node, child, =, prev, ., next, ;, prev, ., next, =, child]
[,, "no next sibling.", ), ;, Node, child, =, prev, ., next, ;, prev, ., next, =, child, ., next, ;, if]
[), ;, Node, child, =, prev, ., next, ;, prev, ., next, =, child, ., next, ;, if, (, child]
[;, prev, ., next, =, child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;, child]
[., next, ;, prev, ., next, =, child, ., next, ;, if, (, child, ==, last, ), last, =, prev]
[=, child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =, null]
[., next, =, child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next]
[;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =, null, ;, child, ., parent]
[., next, ;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =, null, ;, child]
[), last, =, prev, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, return, child, ;]
[==, last, ), last, =, prev, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, return]
[), last, =, prev, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, return, child, ;]
[=, prev, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, return, child, ;, }, public]
[;, child, ., next, =, null, ;, child, ., parent, =, null, ;, return, child, ;, }, public, Node, cloneNode]
[=, null, ;, child, ., parent, =, null, ;, return, child, ;, }, public, Node, cloneNode, (, ), {, Node]
[., next, =, null, ;, child, ., parent, =, null, ;, return, child, ;, }, public, Node, cloneNode, (, )]
[;, child, ., parent, =, null, ;, return, child, ;, }, public, Node, cloneNode, (, ), {, Node, result, ;]
[=, null, ;, return, child, ;, }, public, Node, cloneNode, (, ), {, Node, result, ;, try, {, result, =]
[., parent, =, null, ;, return, child, ;, }, public, Node, cloneNode, (, ), {, Node, result, ;, try, {]
[;, return, child, ;, }, public, Node, cloneNode, (, ), {, Node, result, ;, try, {, result, =, (, Node]
[;, }, public, Node, cloneNode, (, ), {, Node, result, ;, try, {, result, =, (, Node, ), super, .]
[=, (, Node, ), super, ., clone, (, ), ;, result, ., next, =, null, ;, result, ., first, =]
[;, result, ., next, =, null, ;, result, ., first, =, null, ;, result, ., last, =, null, ;, result]
[;, result, ., next, =, null, ;, result, ., first, =, null, ;, result, ., last, =, null, ;, result]
[., clone, (, ), ;, result, ., next, =, null, ;, result, ., first, =, null, ;, result, ., last]
[=, null, ;, result, ., first, =, null, ;, result, ., last, =, null, ;, result, ., parent, =, null]
[., next, =, null, ;, result, ., first, =, null, ;, result, ., last, =, null, ;, result, ., parent]
[;, result, ., first, =, null, ;, result, ., last, =, null, ;, result, ., parent, =, null, ;, }]
[=, null, ;, result, ., last, =, null, ;, result, ., parent, =, null, ;, }, catch, (, CloneNotSupportedException, e]
[., first, =, null, ;, result, ., last, =, null, ;, result, ., parent, =, null, ;, }, catch, (]
[;, result, ., last, =, null, ;, result, ., parent, =, null, ;, }, catch, (, CloneNotSupportedException, e, ), {]
[=, null, ;, result, ., parent, =, null, ;, }, catch, (, CloneNotSupportedException, e, ), {, throw, new, RuntimeException, (]
[., last, =, null, ;, result, ., parent, =, null, ;, }, catch, (, CloneNotSupportedException, e, ), {, throw, new]
[;, result, ., parent, =, null, ;, }, catch, (, CloneNotSupportedException, e, ), {, throw, new, RuntimeException, (, e, .]
[=, null, ;, }, catch, (, CloneNotSupportedException, e, ), {, throw, new, RuntimeException, (, e, ., getMessage, (, ), )]
[., parent, =, null, ;, }, catch, (, CloneNotSupportedException, e, ), {, throw, new, RuntimeException, (, e, ., getMessage, (]
[;, }, catch, (, CloneNotSupportedException, e, ), {, throw, new, RuntimeException, (, e, ., getMessage, (, ), ), ;, }]
[;, }, return, result, ;, }, public, Node, cloneTree, (, ), {, Node, result, =, cloneNode, (, ), ;, for]
[), ;, }, return, result, ;, }, public, Node, cloneTree, (, ), {, Node, result, =, cloneNode, (, ), ;]
[., getMessage, (, ), ), ;, }, return, result, ;, }, public, Node, cloneTree, (, ), {, Node, result, =]
[;, }, public, Node, cloneTree, (, ), {, Node, result, =, cloneNode, (, ), ;, for, (, Node, n2, =]
[;, for, (, Node, n2, =, getFirstChild, (, ), ;, n2, !=, null, ;, n2, =, n2, ., getNext, (]
[;, n2, !=, null, ;, n2, =, n2, ., getNext, (, ), ), {, Node, n2clone, =, n2, ., cloneTree]
[;, n2, =, n2, ., getNext, (, ), ), {, Node, n2clone, =, n2, ., cloneTree, (, ), ;, n2clone]
[!=, null, ;, n2, =, n2, ., getNext, (, ), ), {, Node, n2clone, =, n2, ., cloneTree, (, )]
[;, n2, =, n2, ., getNext, (, ), ), {, Node, n2clone, =, n2, ., cloneTree, (, ), ;, n2clone]
[=, n2, ., getNext, (, ), ), {, Node, n2clone, =, n2, ., cloneTree, (, ), ;, n2clone, ., parent]
[), {, Node, n2clone, =, n2, ., cloneTree, (, ), ;, n2clone, ., parent, =, result, ;, if, (, result]
[., getNext, (, ), ), {, Node, n2clone, =, n2, ., cloneTree, (, ), ;, n2clone, ., parent, =, result]
[;, n2clone, ., parent, =, result, ;, if, (, result, ., last, !=, null, ), {, result, ., last, .]
[., cloneTree, (, ), ;, n2clone, ., parent, =, result, ;, if, (, result, ., last, !=, null, ), {]
[=, result, ;, if, (, result, ., last, !=, null, ), {, result, ., last, ., next, =, n2clone, ;]
[., parent, =, result, ;, if, (, result, ., last, !=, null, ), {, result, ., last, ., next, =]
[;, if, (, result, ., last, !=, null, ), {, result, ., last, ., next, =, n2clone, ;, }, if]
[), {, result, ., last, ., next, =, n2clone, ;, }, if, (, result, ., first, ==, null, ), {]
[!=, null, ), {, result, ., last, ., next, =, n2clone, ;, }, if, (, result, ., first, ==, null]
[., last, !=, null, ), {, result, ., last, ., next, =, n2clone, ;, }, if, (, result, ., first]
[), {, result, ., last, ., next, =, n2clone, ;, }, if, (, result, ., first, ==, null, ), {]
[=, n2clone, ;, }, if, (, result, ., first, ==, null, ), {, result, ., first, =, n2clone, ;, }]
[., next, =, n2clone, ;, }, if, (, result, ., first, ==, null, ), {, result, ., first, =, n2clone]
[., last, ., next, =, n2clone, ;, }, if, (, result, ., first, ==, null, ), {, result, ., first]
[;, }, if, (, result, ., first, ==, null, ), {, result, ., first, =, n2clone, ;, }, result, .]
[), {, result, ., first, =, n2clone, ;, }, result, ., last, =, n2clone, ;, }, return, result, ;, }]
[==, null, ), {, result, ., first, =, n2clone, ;, }, result, ., last, =, n2clone, ;, }, return, result]
[., first, ==, null, ), {, result, ., first, =, n2clone, ;, }, result, ., last, =, n2clone, ;, }]
[), {, result, ., first, =, n2clone, ;, }, result, ., last, =, n2clone, ;, }, return, result, ;, }]
[=, n2clone, ;, }, result, ., last, =, n2clone, ;, }, return, result, ;, }, public, Node, copyInformationFrom, (, Node]
[., first, =, n2clone, ;, }, result, ., last, =, n2clone, ;, }, return, result, ;, }, public, Node, copyInformationFrom]
[;, }, result, ., last, =, n2clone, ;, }, return, result, ;, }, public, Node, copyInformationFrom, (, Node, other, )]
[=, n2clone, ;, }, return, result, ;, }, public, Node, copyInformationFrom, (, Node, other, ), {, if, (, getProp, (]
[., last, =, n2clone, ;, }, return, result, ;, }, public, Node, copyInformationFrom, (, Node, other, ), {, if, (]
[;, }, return, result, ;, }, public, Node, copyInformationFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, )]
[;, }, public, Node, copyInformationFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==, null, ), {]
[), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE]
[==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp]
[), ==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (]
[), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE]
[;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (]
[,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {]
[), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp]
[., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (]
[), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, .]
[), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;]
[==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, .]
[), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other]
[), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;]
[;, sourcePosition, =, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node, copyInformationFromForTree, (, Node, other, ), {]
[,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;, }, return, this, ;, }]
[), ;, sourcePosition, =, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node, copyInformationFromForTree, (, Node, other, )]
[., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node]
[), ), ;, sourcePosition, =, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node, copyInformationFromForTree, (, Node, other]
[=, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node, copyInformationFromForTree, (, Node, other, ), {, copyInformationFrom, (]
[;, }, return, this, ;, }, public, Node, copyInformationFromForTree, (, Node, other, ), {, copyInformationFrom, (, other, ), ;, for]
[., sourcePosition, ;, }, return, this, ;, }, public, Node, copyInformationFromForTree, (, Node, other, ), {, copyInformationFrom, (, other, )]
[;, }, public, Node, copyInformationFromForTree, (, Node, other, ), {, copyInformationFrom, (, other, ), ;, for, (, Node, child, =]
[;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (]
[), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., copyInformationFromForTree, (, other, )]
[;, child, =, child, ., getNext, (, ), ), {, child, ., copyInformationFromForTree, (, other, ), ;, }, return, this]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., copyInformationFromForTree, (, other, ), ;, }]
[;, child, =, child, ., getNext, (, ), ), {, child, ., copyInformationFromForTree, (, other, ), ;, }, return, this]
[=, child, ., getNext, (, ), ), {, child, ., copyInformationFromForTree, (, other, ), ;, }, return, this, ;, }]
[), {, child, ., copyInformationFromForTree, (, other, ), ;, }, return, this, ;, }, public, Node, useSourceInfoFrom, (, Node, other]
[., getNext, (, ), ), {, child, ., copyInformationFromForTree, (, other, ), ;, }, return, this, ;, }, public, Node]
[;, }, return, this, ;, }, public, Node, useSourceInfoFrom, (, Node, other, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, .]
[., copyInformationFromForTree, (, other, ), ;, }, return, this, ;, }, public, Node, useSourceInfoFrom, (, Node, other, ), {, putProp]
[), ;, }, return, this, ;, }, public, Node, useSourceInfoFrom, (, Node, other, ), {, putProp, (, ORIGINALNAME_PROP, ,, other]
[;, }, public, Node, useSourceInfoFrom, (, Node, other, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, )]
[;, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;, return]
[,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), )]
[), ;, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;]
[., getProp, (, ORIGINALNAME_PROP, ), ), ;, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition]
[), ), ;, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition]
[;, sourcePosition, =, other, ., sourcePosition, ;, return, this, ;, }, public, Node, srcref, (, Node, other, ), {, return]
[,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;, return, this, ;, }, public]
[), ;, sourcePosition, =, other, ., sourcePosition, ;, return, this, ;, }, public, Node, srcref, (, Node, other, ), {]
[., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;, return, this, ;, }, public, Node, srcref]
[), ), ;, sourcePosition, =, other, ., sourcePosition, ;, return, this, ;, }, public, Node, srcref, (, Node, other, )]
[=, other, ., sourcePosition, ;, return, this, ;, }, public, Node, srcref, (, Node, other, ), {, return, useSourceInfoFrom, (]
[;, return, this, ;, }, public, Node, srcref, (, Node, other, ), {, return, useSourceInfoFrom, (, other, ), ;, }]
[., sourcePosition, ;, return, this, ;, }, public, Node, srcref, (, Node, other, ), {, return, useSourceInfoFrom, (, other, )]
[;, }, public, Node, srcref, (, Node, other, ), {, return, useSourceInfoFrom, (, other, ), ;, }, public, Node, useSourceInfoFromForTree]
[;, }, public, Node, useSourceInfoFromForTree, (, Node, other, ), {, useSourceInfoFrom, (, other, ), ;, for, (, Node, child, =]
[), ;, }, public, Node, useSourceInfoFromForTree, (, Node, other, ), {, useSourceInfoFrom, (, other, ), ;, for, (, Node, child]
[;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (]
[), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., useSourceInfoFromForTree, (, other, )]
[;, child, =, child, ., getNext, (, ), ), {, child, ., useSourceInfoFromForTree, (, other, ), ;, }, return, this]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., useSourceInfoFromForTree, (, other, ), ;, }]
[;, child, =, child, ., getNext, (, ), ), {, child, ., useSourceInfoFromForTree, (, other, ), ;, }, return, this]
[=, child, ., getNext, (, ), ), {, child, ., useSourceInfoFromForTree, (, other, ), ;, }, return, this, ;, }]
[), {, child, ., useSourceInfoFromForTree, (, other, ), ;, }, return, this, ;, }, public, Node, srcrefTree, (, Node, other]
[., getNext, (, ), ), {, child, ., useSourceInfoFromForTree, (, other, ), ;, }, return, this, ;, }, public, Node]
[;, }, return, this, ;, }, public, Node, srcrefTree, (, Node, other, ), {, return, useSourceInfoFromForTree, (, other, ), ;]
[., useSourceInfoFromForTree, (, other, ), ;, }, return, this, ;, }, public, Node, srcrefTree, (, Node, other, ), {, return]
[), ;, }, return, this, ;, }, public, Node, srcrefTree, (, Node, other, ), {, return, useSourceInfoFromForTree, (, other, )]
[;, }, public, Node, srcrefTree, (, Node, other, ), {, return, useSourceInfoFromForTree, (, other, ), ;, }, public, Node, useSourceInfoIfMissingFrom]
[;, }, public, Node, useSourceInfoIfMissingFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==, null, ), {]
[), ;, }, public, Node, useSourceInfoIfMissingFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==, null, )]
[), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE]
[==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp]
[), ==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (]
[), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE]
[;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (]
[,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {]
[), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp]
[., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (]
[), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, .]
[), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;]
[==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, .]
[), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other]
[), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;]
[;, sourcePosition, =, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node, useSourceInfoIfMissingFromForTree, (, Node, other, ), {]
[,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;, }, return, this, ;, }]
[), ;, sourcePosition, =, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node, useSourceInfoIfMissingFromForTree, (, Node, other, )]
[., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node]
[), ), ;, sourcePosition, =, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node, useSourceInfoIfMissingFromForTree, (, Node, other]
[=, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node, useSourceInfoIfMissingFromForTree, (, Node, other, ), {, useSourceInfoIfMissingFrom, (]
[;, }, return, this, ;, }, public, Node, useSourceInfoIfMissingFromForTree, (, Node, other, ), {, useSourceInfoIfMissingFrom, (, other, ), ;, for]
[., sourcePosition, ;, }, return, this, ;, }, public, Node, useSourceInfoIfMissingFromForTree, (, Node, other, ), {, useSourceInfoIfMissingFrom, (, other, )]
[;, }, public, Node, useSourceInfoIfMissingFromForTree, (, Node, other, ), {, useSourceInfoIfMissingFrom, (, other, ), ;, for, (, Node, child, =]
[;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (]
[), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., useSourceInfoIfMissingFromForTree, (, other, )]
[;, child, =, child, ., getNext, (, ), ), {, child, ., useSourceInfoIfMissingFromForTree, (, other, ), ;, }, return, this]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., useSourceInfoIfMissingFromForTree, (, other, ), ;, }]
[;, child, =, child, ., getNext, (, ), ), {, child, ., useSourceInfoIfMissingFromForTree, (, other, ), ;, }, return, this]
[=, child, ., getNext, (, ), ), {, child, ., useSourceInfoIfMissingFromForTree, (, other, ), ;, }, return, this, ;, }]
[), {, child, ., useSourceInfoIfMissingFromForTree, (, other, ), ;, }, return, this, ;, }, public, JSType, getJSType, (, ), {]
[., getNext, (, ), ), {, child, ., useSourceInfoIfMissingFromForTree, (, other, ), ;, }, return, this, ;, }, public, JSType]
[;, }, return, this, ;, }, public, JSType, getJSType, (, ), {, return, jsType, ;, }, public, void, setJSType, (]
[., useSourceInfoIfMissingFromForTree, (, other, ), ;, }, return, this, ;, }, public, JSType, getJSType, (, ), {, return, jsType, ;]
[), ;, }, return, this, ;, }, public, JSType, getJSType, (, ), {, return, jsType, ;, }, public, void, setJSType]
[;, }, public, JSType, getJSType, (, ), {, return, jsType, ;, }, public, void, setJSType, (, JSType, jsType, ), {]
[;, }, public, void, setJSType, (, JSType, jsType, ), {, this, ., jsType, =, jsType, ;, }, public, FileLevelJsDocBuilder, getJsDocBuilderForNode]
[=, jsType, ;, }, public, FileLevelJsDocBuilder, getJsDocBuilderForNode, (, ), {, return, new, FileLevelJsDocBuilder, (, ), ;, }, public, class, FileLevelJsDocBuilder]
[., jsType, =, jsType, ;, }, public, FileLevelJsDocBuilder, getJsDocBuilderForNode, (, ), {, return, new, FileLevelJsDocBuilder, (, ), ;, }, public]
[;, }, public, FileLevelJsDocBuilder, getJsDocBuilderForNode, (, ), {, return, new, FileLevelJsDocBuilder, (, ), ;, }, public, class, FileLevelJsDocBuilder, {, public]
[;, }, public, class, FileLevelJsDocBuilder, {, public, void, append, (, String, fileLevelComment, ), {, JSDocInfo, jsDocInfo, =, getJSDocInfo, (, )]
[;, if, (, jsDocInfo, ==, null, ), {, jsDocInfo, =, new, JSDocInfo, (, false, ), ;, }, String, license, =]
[), {, jsDocInfo, =, new, JSDocInfo, (, false, ), ;, }, String, license, =, jsDocInfo, ., getLicense, (, ), ;]
[==, null, ), {, jsDocInfo, =, new, JSDocInfo, (, false, ), ;, }, String, license, =, jsDocInfo, ., getLicense, (]
[), {, jsDocInfo, =, new, JSDocInfo, (, false, ), ;, }, String, license, =, jsDocInfo, ., getLicense, (, ), ;]
[=, new, JSDocInfo, (, false, ), ;, }, String, license, =, jsDocInfo, ., getLicense, (, ), ;, if, (, license]
[;, }, String, license, =, jsDocInfo, ., getLicense, (, ), ;, if, (, license, ==, null, ), {, license, =]
[), ;, }, String, license, =, jsDocInfo, ., getLicense, (, ), ;, if, (, license, ==, null, ), {, license]
[;, if, (, license, ==, null, ), {, license, =, "", ;, }, jsDocInfo, ., setLicense, (, license, +, fileLevelComment]
[., getLicense, (, ), ;, if, (, license, ==, null, ), {, license, =, "", ;, }, jsDocInfo, ., setLicense]
[), {, license, =, "", ;, }, jsDocInfo, ., setLicense, (, license, +, fileLevelComment, ), ;, setJSDocInfo, (, jsDocInfo, )]
[==, null, ), {, license, =, "", ;, }, jsDocInfo, ., setLicense, (, license, +, fileLevelComment, ), ;, setJSDocInfo, (]
[), {, license, =, "", ;, }, jsDocInfo, ., setLicense, (, license, +, fileLevelComment, ), ;, setJSDocInfo, (, jsDocInfo, )]
[=, "", ;, }, jsDocInfo, ., setLicense, (, license, +, fileLevelComment, ), ;, setJSDocInfo, (, jsDocInfo, ), ;, }, }]
[;, }, jsDocInfo, ., setLicense, (, license, +, fileLevelComment, ), ;, setJSDocInfo, (, jsDocInfo, ), ;, }, }, public, JSDocInfo]
[;, setJSDocInfo, (, jsDocInfo, ), ;, }, }, public, JSDocInfo, getJSDocInfo, (, ), {, return, (, JSDocInfo, ), getProp, (]
[., setLicense, (, license, +, fileLevelComment, ), ;, setJSDocInfo, (, jsDocInfo, ), ;, }, }, public, JSDocInfo, getJSDocInfo, (, )]
[), ;, setJSDocInfo, (, jsDocInfo, ), ;, }, }, public, JSDocInfo, getJSDocInfo, (, ), {, return, (, JSDocInfo, ), getProp]
[+, fileLevelComment, ), ;, setJSDocInfo, (, jsDocInfo, ), ;, }, }, public, JSDocInfo, getJSDocInfo, (, ), {, return, (, JSDocInfo]
[), ;, setJSDocInfo, (, jsDocInfo, ), ;, }, }, public, JSDocInfo, getJSDocInfo, (, ), {, return, (, JSDocInfo, ), getProp]
[;, }, }, public, JSDocInfo, getJSDocInfo, (, ), {, return, (, JSDocInfo, ), getProp, (, JSDOC_INFO_PROP, ), ;, }, public]
[), ;, }, }, public, JSDocInfo, getJSDocInfo, (, ), {, return, (, JSDocInfo, ), getProp, (, JSDOC_INFO_PROP, ), ;, }]
[;, }, public, Node, setJSDocInfo, (, JSDocInfo, info, ), {, putProp, (, JSDOC_INFO_PROP, ,, info, ), ;, return, this, ;]
[;, }, public, Node, setJSDocInfo, (, JSDocInfo, info, ), {, putProp, (, JSDOC_INFO_PROP, ,, info, ), ;, return, this, ;]
[), ;, }, public, Node, setJSDocInfo, (, JSDocInfo, info, ), {, putProp, (, JSDOC_INFO_PROP, ,, info, ), ;, return, this]
[;, return, this, ;, }, public, void, setVarArgs, (, boolean, varArgs, ), {, putBooleanProp, (, VAR_ARGS_NAME, ,, varArgs, ), ;]
[,, info, ), ;, return, this, ;, }, public, void, setVarArgs, (, boolean, varArgs, ), {, putBooleanProp, (, VAR_ARGS_NAME, ,]
[), ;, return, this, ;, }, public, void, setVarArgs, (, boolean, varArgs, ), {, putBooleanProp, (, VAR_ARGS_NAME, ,, varArgs, )]
[;, }, public, void, setVarArgs, (, boolean, varArgs, ), {, putBooleanProp, (, VAR_ARGS_NAME, ,, varArgs, ), ;, }, public, boolean]
[;, }, public, boolean, isVarArgs, (, ), {, return, getBooleanProp, (, VAR_ARGS_NAME, ), ;, }, public, void, setOptionalArg, (, boolean]
[,, varArgs, ), ;, }, public, boolean, isVarArgs, (, ), {, return, getBooleanProp, (, VAR_ARGS_NAME, ), ;, }, public, void]
[), ;, }, public, boolean, isVarArgs, (, ), {, return, getBooleanProp, (, VAR_ARGS_NAME, ), ;, }, public, void, setOptionalArg, (]
[;, }, public, void, setOptionalArg, (, boolean, optionalArg, ), {, putBooleanProp, (, OPT_ARG_NAME, ,, optionalArg, ), ;, }, public, boolean]
[), ;, }, public, void, setOptionalArg, (, boolean, optionalArg, ), {, putBooleanProp, (, OPT_ARG_NAME, ,, optionalArg, ), ;, }, public]
[;, }, public, boolean, isOptionalArg, (, ), {, return, getBooleanProp, (, OPT_ARG_NAME, ), ;, }, public, void, setIsSyntheticBlock, (, boolean]
[,, optionalArg, ), ;, }, public, boolean, isOptionalArg, (, ), {, return, getBooleanProp, (, OPT_ARG_NAME, ), ;, }, public, void]
[), ;, }, public, boolean, isOptionalArg, (, ), {, return, getBooleanProp, (, OPT_ARG_NAME, ), ;, }, public, void, setIsSyntheticBlock, (]
[;, }, public, void, setIsSyntheticBlock, (, boolean, val, ), {, putBooleanProp, (, SYNTHETIC_BLOCK_PROP, ,, val, ), ;, }, public, boolean]
[), ;, }, public, void, setIsSyntheticBlock, (, boolean, val, ), {, putBooleanProp, (, SYNTHETIC_BLOCK_PROP, ,, val, ), ;, }, public]
[;, }, public, boolean, isSyntheticBlock, (, ), {, return, getBooleanProp, (, SYNTHETIC_BLOCK_PROP, ), ;, }, public, void, setDirectives, (, Set]
[,, val, ), ;, }, public, boolean, isSyntheticBlock, (, ), {, return, getBooleanProp, (, SYNTHETIC_BLOCK_PROP, ), ;, }, public, void]
[), ;, }, public, boolean, isSyntheticBlock, (, ), {, return, getBooleanProp, (, SYNTHETIC_BLOCK_PROP, ), ;, }, public, void, setDirectives, (]
[;, }, public, void, setDirectives, (, Set, <, String, >, val, ), {, putProp, (, DIRECTIVES, ,, val, ), ;]
[), ;, }, public, void, setDirectives, (, Set, <, String, >, val, ), {, putProp, (, DIRECTIVES, ,, val, )]
[;, }, @, SuppressWarnings, (, "unchecked", ), public, Set, <, String, >, getDirectives, (, ), {, return, (, Set, <]
[,, val, ), ;, }, @, SuppressWarnings, (, "unchecked", ), public, Set, <, String, >, getDirectives, (, ), {, return]
[), ;, }, @, SuppressWarnings, (, "unchecked", ), public, Set, <, String, >, getDirectives, (, ), {, return, (, Set]
[public, Set, <, String, >, getDirectives, (, ), {, return, (, Set, <, String, >, ), getProp, (, DIRECTIVES, )]
[), public, Set, <, String, >, getDirectives, (, ), {, return, (, Set, <, String, >, ), getProp, (, DIRECTIVES]
[;, }, public, void, addSuppression, (, String, warning, ), {, if, (, getJSDocInfo, (, ), ==, null, ), {, setJSDocInfo]
[;, }, public, void, addSuppression, (, String, warning, ), {, if, (, getJSDocInfo, (, ), ==, null, ), {, setJSDocInfo]
[), ;, }, public, void, addSuppression, (, String, warning, ), {, if, (, getJSDocInfo, (, ), ==, null, ), {]
[), {, setJSDocInfo, (, new, JSDocInfo, (, false, ), ), ;, }, getJSDocInfo, (, ), ., addSuppression, (, warning, )]
[==, null, ), {, setJSDocInfo, (, new, JSDocInfo, (, false, ), ), ;, }, getJSDocInfo, (, ), ., addSuppression, (]
[), {, setJSDocInfo, (, new, JSDocInfo, (, false, ), ), ;, }, getJSDocInfo, (, ), ., addSuppression, (, warning, )]
[;, }, getJSDocInfo, (, ), ., addSuppression, (, warning, ), ;, }, public, void, setWasEmptyNode, (, boolean, val, ), {]
[), ;, }, getJSDocInfo, (, ), ., addSuppression, (, warning, ), ;, }, public, void, setWasEmptyNode, (, boolean, val, )]
[), ), ;, }, getJSDocInfo, (, ), ., addSuppression, (, warning, ), ;, }, public, void, setWasEmptyNode, (, boolean, val]
[;, }, public, void, setWasEmptyNode, (, boolean, val, ), {, putBooleanProp, (, EMPTY_BLOCK, ,, val, ), ;, }, public, boolean]
[., addSuppression, (, warning, ), ;, }, public, void, setWasEmptyNode, (, boolean, val, ), {, putBooleanProp, (, EMPTY_BLOCK, ,, val]
[), ;, }, public, void, setWasEmptyNode, (, boolean, val, ), {, putBooleanProp, (, EMPTY_BLOCK, ,, val, ), ;, }, public]
[;, }, public, boolean, wasEmptyNode, (, ), {, return, getBooleanProp, (, EMPTY_BLOCK, ), ;, }, final, public, static, int, FLAG_GLOBAL_STATE_UNMODIFIED]
[,, val, ), ;, }, public, boolean, wasEmptyNode, (, ), {, return, getBooleanProp, (, EMPTY_BLOCK, ), ;, }, final, public]
[), ;, }, public, boolean, wasEmptyNode, (, ), {, return, getBooleanProp, (, EMPTY_BLOCK, ), ;, }, final, public, static, int]
[;, }, final, public, static, int, FLAG_GLOBAL_STATE_UNMODIFIED, =, 1, ;, final, public, static, int, FLAG_THIS_UNMODIFIED, =, 2, ;, final, public]
[), ;, }, final, public, static, int, FLAG_GLOBAL_STATE_UNMODIFIED, =, 1, ;, final, public, static, int, FLAG_THIS_UNMODIFIED, =, 2, ;, final]
[;, final, public, static, int, FLAG_THIS_UNMODIFIED, =, 2, ;, final, public, static, int, FLAG_ARGUMENTS_UNMODIFIED, =, 4, ;, final, public, static]
[;, final, public, static, int, FLAG_ARGUMENTS_UNMODIFIED, =, 4, ;, final, public, static, int, FLAG_NO_THROWS, =, 8, ;, final, public, static]
[;, final, public, static, int, FLAG_NO_THROWS, =, 8, ;, final, public, static, int, FLAG_LOCAL_RESULTS, =, 16, ;, final, public, static]
[;, final, public, static, int, FLAG_LOCAL_RESULTS, =, 16, ;, final, public, static, int, SIDE_EFFECTS_FLAGS_MASK, =, 31, ;, final, public, static]
[;, final, public, static, int, SIDE_EFFECTS_FLAGS_MASK, =, 31, ;, final, public, static, int, SIDE_EFFECTS_ALL, =, 0, ;, final, public, static]
[;, final, public, static, int, SIDE_EFFECTS_ALL, =, 0, ;, final, public, static, int, NO_SIDE_EFFECTS, =, FLAG_GLOBAL_STATE_UNMODIFIED, |, FLAG_THIS_UNMODIFIED, |, FLAG_ARGUMENTS_UNMODIFIED]
[;, final, public, static, int, NO_SIDE_EFFECTS, =, FLAG_GLOBAL_STATE_UNMODIFIED, |, FLAG_THIS_UNMODIFIED, |, FLAG_ARGUMENTS_UNMODIFIED, |, FLAG_NO_THROWS, ;, public, void, setSideEffectFlags, (, int]
[;, public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (, getType, (, ), ==, Token, ., CALL]
[|, FLAG_NO_THROWS, ;, public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (, getType, (, ), ==, Token]
[|, FLAG_ARGUMENTS_UNMODIFIED, |, FLAG_NO_THROWS, ;, public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (, getType, (, )]
[|, FLAG_THIS_UNMODIFIED, |, FLAG_ARGUMENTS_UNMODIFIED, |, FLAG_NO_THROWS, ;, public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (, getType]
[|, FLAG_ARGUMENTS_UNMODIFIED, |, FLAG_NO_THROWS, ;, public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (, getType, (, )]
[|, FLAG_NO_THROWS, ;, public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (, getType, (, ), ==, Token]
[;, public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (, getType, (, ), ==, Token, ., CALL]
[;, putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags, ), ;, }, public, void, setSideEffectFlags, (, SideEffectFlags, flags, ), {, setSideEffectFlags, (, flags]
[., checkArgument, (, getType, (, ), ==, Token, ., CALL, ||, getType, (, ), ==, Token, ., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got "]
[,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType, (, ), ), ), ;, putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags, ), ;]
[||, getType, (, ), ==, Token, ., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType, (, ), ), )]
[==, Token, ., CALL, ||, getType, (, ), ==, Token, ., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType]
[||, getType, (, ), ==, Token, ., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType, (, ), ), )]
[., CALL, ||, getType, (, ), ==, Token, ., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType, (, )]
[,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType, (, ), ), ), ;, putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags, ), ;]
[==, Token, ., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType, (, ), ), ), ;, putIntProp, (, SIDE_EFFECT_FLAGS]
[,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType, (, ), ), ), ;, putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags, ), ;]
[., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType, (, ), ), ), ;, putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags]
[), ;, putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags, ), ;, }, public, void, setSideEffectFlags, (, SideEffectFlags, flags, ), {, setSideEffectFlags, (]
[+, Token, ., name, (, getType, (, ), ), ), ;, putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags, ), ;, }, public]
[), ;, putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags, ), ;, }, public, void, setSideEffectFlags, (, SideEffectFlags, flags, ), {, setSideEffectFlags, (]
[., name, (, getType, (, ), ), ), ;, putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags, ), ;, }, public, void, setSideEffectFlags]
[), ), ;, putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags, ), ;, }, public, void, setSideEffectFlags, (, SideEffectFlags, flags, ), {, setSideEffectFlags]
[;, }, public, void, setSideEffectFlags, (, SideEffectFlags, flags, ), {, setSideEffectFlags, (, flags, ., valueOf, (, ), ), ;, }]
[,, flags, ), ;, }, public, void, setSideEffectFlags, (, SideEffectFlags, flags, ), {, setSideEffectFlags, (, flags, ., valueOf, (, )]
[), ;, }, public, void, setSideEffectFlags, (, SideEffectFlags, flags, ), {, setSideEffectFlags, (, flags, ., valueOf, (, ), ), ;]
[;, }, public, int, getSideEffectFlags, (, ), {, return, getIntProp, (, SIDE_EFFECT_FLAGS, ), ;, }, public, static, class, SideEffectFlags, {]
[), ;, }, public, int, getSideEffectFlags, (, ), {, return, getIntProp, (, SIDE_EFFECT_FLAGS, ), ;, }, public, static, class, SideEffectFlags]
[., valueOf, (, ), ), ;, }, public, int, getSideEffectFlags, (, ), {, return, getIntProp, (, SIDE_EFFECT_FLAGS, ), ;, }]
[;, }, public, static, class, SideEffectFlags, {, private, int, value, =, Node, ., SIDE_EFFECTS_ALL, ;, public, SideEffectFlags, (, ), {]
[), ;, }, public, static, class, SideEffectFlags, {, private, int, value, =, Node, ., SIDE_EFFECTS_ALL, ;, public, SideEffectFlags, (, )]
[;, public, SideEffectFlags, (, ), {, }, public, SideEffectFlags, (, int, value, ), {, this, ., value, =, value, ;]
[., SIDE_EFFECTS_ALL, ;, public, SideEffectFlags, (, ), {, }, public, SideEffectFlags, (, int, value, ), {, this, ., value, =]
[=, value, ;, }, public, int, valueOf, (, ), {, return, value, ;, }, public, void, setAllFlags, (, ), {]
[., value, =, value, ;, }, public, int, valueOf, (, ), {, return, value, ;, }, public, void, setAllFlags, (]
[;, }, public, int, valueOf, (, ), {, return, value, ;, }, public, void, setAllFlags, (, ), {, value, =]
[;, }, public, void, setAllFlags, (, ), {, value, =, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearAllFlags, (, )]
[=, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearAllFlags, (, ), {, value, =, Node, ., NO_SIDE_EFFECTS, |, Node, .]
[;, }, public, void, clearAllFlags, (, ), {, value, =, Node, ., NO_SIDE_EFFECTS, |, Node, ., FLAG_LOCAL_RESULTS, ;, }, public]
[., SIDE_EFFECTS_ALL, ;, }, public, void, clearAllFlags, (, ), {, value, =, Node, ., NO_SIDE_EFFECTS, |, Node, ., FLAG_LOCAL_RESULTS, ;]
[=, Node, ., NO_SIDE_EFFECTS, |, Node, ., FLAG_LOCAL_RESULTS, ;, }, public, boolean, areAllFlagsSet, (, ), {, return, value, ==, Node]
[;, }, public, boolean, areAllFlagsSet, (, ), {, return, value, ==, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearSideEffectFlags, (]
[|, Node, ., FLAG_LOCAL_RESULTS, ;, }, public, boolean, areAllFlagsSet, (, ), {, return, value, ==, Node, ., SIDE_EFFECTS_ALL, ;, }]
[., NO_SIDE_EFFECTS, |, Node, ., FLAG_LOCAL_RESULTS, ;, }, public, boolean, areAllFlagsSet, (, ), {, return, value, ==, Node, ., SIDE_EFFECTS_ALL]
[;, }, public, boolean, areAllFlagsSet, (, ), {, return, value, ==, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearSideEffectFlags, (]
[., FLAG_LOCAL_RESULTS, ;, }, public, boolean, areAllFlagsSet, (, ), {, return, value, ==, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void]
[;, }, public, void, clearSideEffectFlags, (, ), {, value, |=, Node, ., NO_SIDE_EFFECTS, ;, }, public, void, setMutatesGlobalState, (, )]
[==, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearSideEffectFlags, (, ), {, value, |=, Node, ., NO_SIDE_EFFECTS, ;, }, public]
[;, }, public, void, clearSideEffectFlags, (, ), {, value, |=, Node, ., NO_SIDE_EFFECTS, ;, }, public, void, setMutatesGlobalState, (, )]
[., SIDE_EFFECTS_ALL, ;, }, public, void, clearSideEffectFlags, (, ), {, value, |=, Node, ., NO_SIDE_EFFECTS, ;, }, public, void, setMutatesGlobalState]
[|=, Node, ., NO_SIDE_EFFECTS, ;, }, public, void, setMutatesGlobalState, (, ), {, removeFlag, (, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, ), ;, removeFlag]
[;, }, public, void, setMutatesGlobalState, (, ), {, removeFlag, (, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, ), ;, removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED]
[., NO_SIDE_EFFECTS, ;, }, public, void, setMutatesGlobalState, (, ), {, removeFlag, (, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, ), ;, removeFlag, (, Node]
[;, removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, ), ;, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setThrows, (]
[), ;, removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, ), ;, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setThrows]
[., FLAG_GLOBAL_STATE_UNMODIFIED, ), ;, removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, ), ;, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public]
[;, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setThrows, (, ), {, removeFlag, (, Node, ., FLAG_NO_THROWS]
[), ;, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setThrows, (, ), {, removeFlag, (, Node, .]
[., FLAG_ARGUMENTS_UNMODIFIED, ), ;, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setThrows, (, ), {, removeFlag, (]
[;, }, public, void, setThrows, (, ), {, removeFlag, (, Node, ., FLAG_NO_THROWS, ), ;, }, public, void, setMutatesThis, (]
[), ;, }, public, void, setThrows, (, ), {, removeFlag, (, Node, ., FLAG_NO_THROWS, ), ;, }, public, void, setMutatesThis]
[., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setThrows, (, ), {, removeFlag, (, Node, ., FLAG_NO_THROWS, ), ;, }, public]
[;, }, public, void, setMutatesThis, (, ), {, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setMutatesArguments, (]
[), ;, }, public, void, setMutatesThis, (, ), {, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setMutatesArguments]
[., FLAG_NO_THROWS, ), ;, }, public, void, setMutatesThis, (, ), {, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public]
[;, }, public, void, setMutatesArguments, (, ), {, removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, ), ;, }, public, void, setReturnsTainted, (]
[), ;, }, public, void, setMutatesArguments, (, ), {, removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, ), ;, }, public, void, setReturnsTainted]
[., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setMutatesArguments, (, ), {, removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, ), ;, }, public]
[;, }, public, void, setReturnsTainted, (, ), {, removeFlag, (, Node, ., FLAG_LOCAL_RESULTS, ), ;, }, private, void, removeFlag, (]
[), ;, }, public, void, setReturnsTainted, (, ), {, removeFlag, (, Node, ., FLAG_LOCAL_RESULTS, ), ;, }, private, void, removeFlag]
[., FLAG_ARGUMENTS_UNMODIFIED, ), ;, }, public, void, setReturnsTainted, (, ), {, removeFlag, (, Node, ., FLAG_LOCAL_RESULTS, ), ;, }, private]
[;, }, private, void, removeFlag, (, int, flag, ), {, value, &=, ~, flag, ;, }, }, public, boolean, isOnlyModifiesThisCall]
[), ;, }, private, void, removeFlag, (, int, flag, ), {, value, &=, ~, flag, ;, }, }, public, boolean]
[., FLAG_LOCAL_RESULTS, ), ;, }, private, void, removeFlag, (, int, flag, ), {, value, &=, ~, flag, ;, }, }]
[&=, ~, flag, ;, }, }, public, boolean, isOnlyModifiesThisCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), &, Node]
[;, }, }, public, boolean, isOnlyModifiesThisCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), &, Node, ., NO_SIDE_EFFECTS, ,]
[;, }, }, public, boolean, isOnlyModifiesThisCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), &, Node, ., NO_SIDE_EFFECTS, ,]
[;, }, public, boolean, isNoSideEffectsCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), ,, NO_SIDE_EFFECTS, ), ;, }, public]
[,, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, |, Node, ., FLAG_ARGUMENTS_UNMODIFIED, |, Node, ., FLAG_NO_THROWS, ), ;, }, public, boolean, isNoSideEffectsCall, (, )]
[&, Node, ., NO_SIDE_EFFECTS, ,, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, |, Node, ., FLAG_ARGUMENTS_UNMODIFIED, |, Node, ., FLAG_NO_THROWS, ), ;, }, public]
[,, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, |, Node, ., FLAG_ARGUMENTS_UNMODIFIED, |, Node, ., FLAG_NO_THROWS, ), ;, }, public, boolean, isNoSideEffectsCall, (, )]
[., NO_SIDE_EFFECTS, ,, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, |, Node, ., FLAG_ARGUMENTS_UNMODIFIED, |, Node, ., FLAG_NO_THROWS, ), ;, }, public, boolean, isNoSideEffectsCall]
[), ;, }, public, boolean, isNoSideEffectsCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), ,, NO_SIDE_EFFECTS, ), ;, }]
[|, Node, ., FLAG_NO_THROWS, ), ;, }, public, boolean, isNoSideEffectsCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), ,]
[|, Node, ., FLAG_ARGUMENTS_UNMODIFIED, |, Node, ., FLAG_NO_THROWS, ), ;, }, public, boolean, isNoSideEffectsCall, (, ), {, return, areBitFlagsSet, (]
[., FLAG_GLOBAL_STATE_UNMODIFIED, |, Node, ., FLAG_ARGUMENTS_UNMODIFIED, |, Node, ., FLAG_NO_THROWS, ), ;, }, public, boolean, isNoSideEffectsCall, (, ), {, return]
[|, Node, ., FLAG_NO_THROWS, ), ;, }, public, boolean, isNoSideEffectsCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), ,]
[., FLAG_ARGUMENTS_UNMODIFIED, |, Node, ., FLAG_NO_THROWS, ), ;, }, public, boolean, isNoSideEffectsCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (]
[), ;, }, public, boolean, isNoSideEffectsCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), ,, NO_SIDE_EFFECTS, ), ;, }]
[., FLAG_NO_THROWS, ), ;, }, public, boolean, isNoSideEffectsCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), ,, NO_SIDE_EFFECTS, )]
[;, }, public, boolean, isLocalResultCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), ,, FLAG_LOCAL_RESULTS, ), ;, }, private]
[,, NO_SIDE_EFFECTS, ), ;, }, public, boolean, isLocalResultCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), ,, FLAG_LOCAL_RESULTS, )]
[), ;, }, public, boolean, isLocalResultCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), ,, FLAG_LOCAL_RESULTS, ), ;, }]
[;, }, private, boolean, areBitFlagsSet, (, int, value, ,, int, flags, ), {, return, (, value, &, flags, ), ==]
[,, FLAG_LOCAL_RESULTS, ), ;, }, private, boolean, areBitFlagsSet, (, int, value, ,, int, flags, ), {, return, (, value, &]
[), ;, }, private, boolean, areBitFlagsSet, (, int, value, ,, int, flags, ), {, return, (, value, &, flags, )]
[;, }, public, boolean, isQuotedString, (, ), {, return, false, ;, }, public, void, setQuotedString, (, ), {, throw, new]
[==, flags, ;, }, public, boolean, isQuotedString, (, ), {, return, false, ;, }, public, void, setQuotedString, (, ), {]
[), ==, flags, ;, }, public, boolean, isQuotedString, (, ), {, return, false, ;, }, public, void, setQuotedString, (, )]
[&, flags, ), ==, flags, ;, }, public, boolean, isQuotedString, (, ), {, return, false, ;, }, public, void, setQuotedString]
[), ==, flags, ;, }, public, boolean, isQuotedString, (, ), {, return, false, ;, }, public, void, setQuotedString, (, )]
[;, }, public, boolean, isQuotedString, (, ), {, return, false, ;, }, public, void, setQuotedString, (, ), {, throw, new]
[;, }, public, void, setQuotedString, (, ), {, throw, new, IllegalStateException, (, "not a StringNode", ), ;, }, static, class, NodeMismatch, {]
[;, }, static, class, NodeMismatch, {, final, Node, nodeA, ;, final, Node, nodeB, ;, NodeMismatch, (, Node, nodeA, ,, Node]
[), ;, }, static, class, NodeMismatch, {, final, Node, nodeA, ;, final, Node, nodeB, ;, NodeMismatch, (, Node, nodeA, ,]
[=, nodeA, ;, this, ., nodeB, =, nodeB, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {]
[., nodeA, =, nodeA, ;, this, ., nodeB, =, nodeB, ;, }, @, Override, public, boolean, equals, (, Object, object]
[;, this, ., nodeB, =, nodeB, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (]
[=, nodeB, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (, object, instanceof, NodeMismatch, )]
[., nodeB, =, nodeB, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (, object, instanceof]
[;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (, object, instanceof, NodeMismatch, ), {, NodeMismatch]
[), {, NodeMismatch, that, =, (, NodeMismatch, ), object, ;, return, that, ., nodeA, ., equals, (, this, ., nodeA]
[instanceof, NodeMismatch, ), {, NodeMismatch, that, =, (, NodeMismatch, ), object, ;, return, that, ., nodeA, ., equals, (, this]
[;, return, that, ., nodeA, ., equals, (, this, ., nodeA, ), &&, that, ., nodeB, ., equals, (, this]
[;, return, that, ., nodeA, ., equals, (, this, ., nodeA, ), &&, that, ., nodeB, ., equals, (, this]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, nodeA]
[&&, that, ., nodeB, ., equals, (, this, ., nodeB, ), ;, }, return, false, ;, }, @, Override, public]
[., equals, (, this, ., nodeA, ), &&, that, ., nodeB, ., equals, (, this, ., nodeB, ), ;, }]
[., nodeA, ., equals, (, this, ., nodeA, ), &&, that, ., nodeB, ., equals, (, this, ., nodeB, )]
[), &&, that, ., nodeB, ., equals, (, this, ., nodeB, ), ;, }, return, false, ;, }, @, Override]
[., nodeA, ), &&, that, ., nodeB, ., equals, (, this, ., nodeB, ), ;, }, return, false, ;, }]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, nodeA]
[., equals, (, this, ., nodeB, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, )]
[., nodeB, ., equals, (, this, ., nodeB, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode]
[), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (]
[., nodeB, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, .]
[;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, nodeA, ,, nodeB, ), ;]
[;, }, }, public, boolean, isAdd, (, ), {, return, this, ., getType, (, ), ==, Token, ., ADD, ;]
[., hashCode, (, nodeA, ,, nodeB, ), ;, }, }, public, boolean, isAdd, (, ), {, return, this, ., getType]
[,, nodeB, ), ;, }, }, public, boolean, isAdd, (, ), {, return, this, ., getType, (, ), ==, Token]
[), ;, }, }, public, boolean, isAdd, (, ), {, return, this, ., getType, (, ), ==, Token, ., ADD]
[;, }, public, boolean, isAnd, (, ), {, return, this, ., getType, (, ), ==, Token, ., AND, ;, }]
[==, Token, ., ADD, ;, }, public, boolean, isAnd, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., ADD, ;, }, public, boolean, isAnd, (, ), {, return, this, ., getType]
[;, }, public, boolean, isAnd, (, ), {, return, this, ., getType, (, ), ==, Token, ., AND, ;, }]
[., ADD, ;, }, public, boolean, isAnd, (, ), {, return, this, ., getType, (, ), ==, Token, ., AND]
[;, }, public, boolean, isArrayLit, (, ), {, return, this, ., getType, (, ), ==, Token, ., ARRAYLIT, ;, }]
[==, Token, ., AND, ;, }, public, boolean, isArrayLit, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., AND, ;, }, public, boolean, isArrayLit, (, ), {, return, this, ., getType]
[;, }, public, boolean, isArrayLit, (, ), {, return, this, ., getType, (, ), ==, Token, ., ARRAYLIT, ;, }]
[., AND, ;, }, public, boolean, isArrayLit, (, ), {, return, this, ., getType, (, ), ==, Token, ., ARRAYLIT]
[;, }, public, boolean, isAssign, (, ), {, return, this, ., getType, (, ), ==, Token, ., ASSIGN, ;, }]
[==, Token, ., ARRAYLIT, ;, }, public, boolean, isAssign, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., ARRAYLIT, ;, }, public, boolean, isAssign, (, ), {, return, this, ., getType]
[;, }, public, boolean, isAssign, (, ), {, return, this, ., getType, (, ), ==, Token, ., ASSIGN, ;, }]
[., ARRAYLIT, ;, }, public, boolean, isAssign, (, ), {, return, this, ., getType, (, ), ==, Token, ., ASSIGN]
[;, }, public, boolean, isAssignAdd, (, ), {, return, this, ., getType, (, ), ==, Token, ., ASSIGN_ADD, ;, }]
[==, Token, ., ASSIGN, ;, }, public, boolean, isAssignAdd, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., ASSIGN, ;, }, public, boolean, isAssignAdd, (, ), {, return, this, ., getType]
[;, }, public, boolean, isAssignAdd, (, ), {, return, this, ., getType, (, ), ==, Token, ., ASSIGN_ADD, ;, }]
[., ASSIGN, ;, }, public, boolean, isAssignAdd, (, ), {, return, this, ., getType, (, ), ==, Token, ., ASSIGN_ADD]
[;, }, public, boolean, isBlock, (, ), {, return, this, ., getType, (, ), ==, Token, ., BLOCK, ;, }]
[==, Token, ., ASSIGN_ADD, ;, }, public, boolean, isBlock, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., ASSIGN_ADD, ;, }, public, boolean, isBlock, (, ), {, return, this, ., getType]
[;, }, public, boolean, isBlock, (, ), {, return, this, ., getType, (, ), ==, Token, ., BLOCK, ;, }]
[., ASSIGN_ADD, ;, }, public, boolean, isBlock, (, ), {, return, this, ., getType, (, ), ==, Token, ., BLOCK]
[;, }, public, boolean, isBreak, (, ), {, return, this, ., getType, (, ), ==, Token, ., BREAK, ;, }]
[==, Token, ., BLOCK, ;, }, public, boolean, isBreak, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., BLOCK, ;, }, public, boolean, isBreak, (, ), {, return, this, ., getType]
[;, }, public, boolean, isBreak, (, ), {, return, this, ., getType, (, ), ==, Token, ., BREAK, ;, }]
[., BLOCK, ;, }, public, boolean, isBreak, (, ), {, return, this, ., getType, (, ), ==, Token, ., BREAK]
[;, }, public, boolean, isCall, (, ), {, return, this, ., getType, (, ), ==, Token, ., CALL, ;, }]
[==, Token, ., BREAK, ;, }, public, boolean, isCall, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., BREAK, ;, }, public, boolean, isCall, (, ), {, return, this, ., getType]
[;, }, public, boolean, isCall, (, ), {, return, this, ., getType, (, ), ==, Token, ., CALL, ;, }]
[., BREAK, ;, }, public, boolean, isCall, (, ), {, return, this, ., getType, (, ), ==, Token, ., CALL]
[;, }, public, boolean, isCase, (, ), {, return, this, ., getType, (, ), ==, Token, ., CASE, ;, }]
[==, Token, ., CALL, ;, }, public, boolean, isCase, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., CALL, ;, }, public, boolean, isCase, (, ), {, return, this, ., getType]
[;, }, public, boolean, isCase, (, ), {, return, this, ., getType, (, ), ==, Token, ., CASE, ;, }]
[., CALL, ;, }, public, boolean, isCase, (, ), {, return, this, ., getType, (, ), ==, Token, ., CASE]
[;, }, public, boolean, isCast, (, ), {, return, this, ., getType, (, ), ==, Token, ., CAST, ;, }]
[==, Token, ., CASE, ;, }, public, boolean, isCast, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., CASE, ;, }, public, boolean, isCast, (, ), {, return, this, ., getType]
[;, }, public, boolean, isCast, (, ), {, return, this, ., getType, (, ), ==, Token, ., CAST, ;, }]
[., CASE, ;, }, public, boolean, isCast, (, ), {, return, this, ., getType, (, ), ==, Token, ., CAST]
[;, }, public, boolean, isCatch, (, ), {, return, this, ., getType, (, ), ==, Token, ., CATCH, ;, }]
[==, Token, ., CAST, ;, }, public, boolean, isCatch, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., CAST, ;, }, public, boolean, isCatch, (, ), {, return, this, ., getType]
[;, }, public, boolean, isCatch, (, ), {, return, this, ., getType, (, ), ==, Token, ., CATCH, ;, }]
[., CAST, ;, }, public, boolean, isCatch, (, ), {, return, this, ., getType, (, ), ==, Token, ., CATCH]
[;, }, public, boolean, isComma, (, ), {, return, this, ., getType, (, ), ==, Token, ., COMMA, ;, }]
[==, Token, ., CATCH, ;, }, public, boolean, isComma, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., CATCH, ;, }, public, boolean, isComma, (, ), {, return, this, ., getType]
[;, }, public, boolean, isComma, (, ), {, return, this, ., getType, (, ), ==, Token, ., COMMA, ;, }]
[., CATCH, ;, }, public, boolean, isComma, (, ), {, return, this, ., getType, (, ), ==, Token, ., COMMA]
[;, }, public, boolean, isContinue, (, ), {, return, this, ., getType, (, ), ==, Token, ., CONTINUE, ;, }]
[==, Token, ., COMMA, ;, }, public, boolean, isContinue, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., COMMA, ;, }, public, boolean, isContinue, (, ), {, return, this, ., getType]
[;, }, public, boolean, isContinue, (, ), {, return, this, ., getType, (, ), ==, Token, ., CONTINUE, ;, }]
[., COMMA, ;, }, public, boolean, isContinue, (, ), {, return, this, ., getType, (, ), ==, Token, ., CONTINUE]
[;, }, public, boolean, isDebugger, (, ), {, return, this, ., getType, (, ), ==, Token, ., DEBUGGER, ;, }]
[==, Token, ., CONTINUE, ;, }, public, boolean, isDebugger, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., CONTINUE, ;, }, public, boolean, isDebugger, (, ), {, return, this, ., getType]
[;, }, public, boolean, isDebugger, (, ), {, return, this, ., getType, (, ), ==, Token, ., DEBUGGER, ;, }]
[., CONTINUE, ;, }, public, boolean, isDebugger, (, ), {, return, this, ., getType, (, ), ==, Token, ., DEBUGGER]
[;, }, public, boolean, isDec, (, ), {, return, this, ., getType, (, ), ==, Token, ., DEC, ;, }]
[==, Token, ., DEBUGGER, ;, }, public, boolean, isDec, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., DEBUGGER, ;, }, public, boolean, isDec, (, ), {, return, this, ., getType]
[;, }, public, boolean, isDec, (, ), {, return, this, ., getType, (, ), ==, Token, ., DEC, ;, }]
[., DEBUGGER, ;, }, public, boolean, isDec, (, ), {, return, this, ., getType, (, ), ==, Token, ., DEC]
[;, }, public, boolean, isDefaultCase, (, ), {, return, this, ., getType, (, ), ==, Token, ., DEFAULT_CASE, ;, }]
[==, Token, ., DEC, ;, }, public, boolean, isDefaultCase, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., DEC, ;, }, public, boolean, isDefaultCase, (, ), {, return, this, ., getType]
[;, }, public, boolean, isDefaultCase, (, ), {, return, this, ., getType, (, ), ==, Token, ., DEFAULT_CASE, ;, }]
[., DEC, ;, }, public, boolean, isDefaultCase, (, ), {, return, this, ., getType, (, ), ==, Token, ., DEFAULT_CASE]
[;, }, public, boolean, isDelProp, (, ), {, return, this, ., getType, (, ), ==, Token, ., DELPROP, ;, }]
[==, Token, ., DEFAULT_CASE, ;, }, public, boolean, isDelProp, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., DEFAULT_CASE, ;, }, public, boolean, isDelProp, (, ), {, return, this, ., getType]
[;, }, public, boolean, isDelProp, (, ), {, return, this, ., getType, (, ), ==, Token, ., DELPROP, ;, }]
[., DEFAULT_CASE, ;, }, public, boolean, isDelProp, (, ), {, return, this, ., getType, (, ), ==, Token, ., DELPROP]
[;, }, public, boolean, isDo, (, ), {, return, this, ., getType, (, ), ==, Token, ., DO, ;, }]
[==, Token, ., DELPROP, ;, }, public, boolean, isDo, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., DELPROP, ;, }, public, boolean, isDo, (, ), {, return, this, ., getType]
[;, }, public, boolean, isDo, (, ), {, return, this, ., getType, (, ), ==, Token, ., DO, ;, }]
[., DELPROP, ;, }, public, boolean, isDo, (, ), {, return, this, ., getType, (, ), ==, Token, ., DO]
[;, }, public, boolean, isEmpty, (, ), {, return, this, ., getType, (, ), ==, Token, ., EMPTY, ;, }]
[==, Token, ., DO, ;, }, public, boolean, isEmpty, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., DO, ;, }, public, boolean, isEmpty, (, ), {, return, this, ., getType]
[;, }, public, boolean, isEmpty, (, ), {, return, this, ., getType, (, ), ==, Token, ., EMPTY, ;, }]
[., DO, ;, }, public, boolean, isEmpty, (, ), {, return, this, ., getType, (, ), ==, Token, ., EMPTY]
[;, }, public, boolean, isExprResult, (, ), {, return, this, ., getType, (, ), ==, Token, ., EXPR_RESULT, ;, }]
[==, Token, ., EMPTY, ;, }, public, boolean, isExprResult, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., EMPTY, ;, }, public, boolean, isExprResult, (, ), {, return, this, ., getType]
[;, }, public, boolean, isExprResult, (, ), {, return, this, ., getType, (, ), ==, Token, ., EXPR_RESULT, ;, }]
[., EMPTY, ;, }, public, boolean, isExprResult, (, ), {, return, this, ., getType, (, ), ==, Token, ., EXPR_RESULT]
[;, }, public, boolean, isFalse, (, ), {, return, this, ., getType, (, ), ==, Token, ., FALSE, ;, }]
[==, Token, ., EXPR_RESULT, ;, }, public, boolean, isFalse, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., EXPR_RESULT, ;, }, public, boolean, isFalse, (, ), {, return, this, ., getType]
[;, }, public, boolean, isFalse, (, ), {, return, this, ., getType, (, ), ==, Token, ., FALSE, ;, }]
[., EXPR_RESULT, ;, }, public, boolean, isFalse, (, ), {, return, this, ., getType, (, ), ==, Token, ., FALSE]
[;, }, public, boolean, isFor, (, ), {, return, this, ., getType, (, ), ==, Token, ., FOR, ;, }]
[==, Token, ., FALSE, ;, }, public, boolean, isFor, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., FALSE, ;, }, public, boolean, isFor, (, ), {, return, this, ., getType]
[;, }, public, boolean, isFor, (, ), {, return, this, ., getType, (, ), ==, Token, ., FOR, ;, }]
[., FALSE, ;, }, public, boolean, isFor, (, ), {, return, this, ., getType, (, ), ==, Token, ., FOR]
[;, }, public, boolean, isFunction, (, ), {, return, this, ., getType, (, ), ==, Token, ., FUNCTION, ;, }]
[==, Token, ., FOR, ;, }, public, boolean, isFunction, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., FOR, ;, }, public, boolean, isFunction, (, ), {, return, this, ., getType]
[;, }, public, boolean, isFunction, (, ), {, return, this, ., getType, (, ), ==, Token, ., FUNCTION, ;, }]
[., FOR, ;, }, public, boolean, isFunction, (, ), {, return, this, ., getType, (, ), ==, Token, ., FUNCTION]
[;, }, public, boolean, isGetterDef, (, ), {, return, this, ., getType, (, ), ==, Token, ., GETTER_DEF, ;, }]
[==, Token, ., FUNCTION, ;, }, public, boolean, isGetterDef, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., FUNCTION, ;, }, public, boolean, isGetterDef, (, ), {, return, this, ., getType]
[;, }, public, boolean, isGetterDef, (, ), {, return, this, ., getType, (, ), ==, Token, ., GETTER_DEF, ;, }]
[., FUNCTION, ;, }, public, boolean, isGetterDef, (, ), {, return, this, ., getType, (, ), ==, Token, ., GETTER_DEF]
[;, }, public, boolean, isGetElem, (, ), {, return, this, ., getType, (, ), ==, Token, ., GETELEM, ;, }]
[==, Token, ., GETTER_DEF, ;, }, public, boolean, isGetElem, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., GETTER_DEF, ;, }, public, boolean, isGetElem, (, ), {, return, this, ., getType]
[;, }, public, boolean, isGetElem, (, ), {, return, this, ., getType, (, ), ==, Token, ., GETELEM, ;, }]
[., GETTER_DEF, ;, }, public, boolean, isGetElem, (, ), {, return, this, ., getType, (, ), ==, Token, ., GETELEM]
[;, }, public, boolean, isGetProp, (, ), {, return, this, ., getType, (, ), ==, Token, ., GETPROP, ;, }]
[==, Token, ., GETELEM, ;, }, public, boolean, isGetProp, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., GETELEM, ;, }, public, boolean, isGetProp, (, ), {, return, this, ., getType]
[;, }, public, boolean, isGetProp, (, ), {, return, this, ., getType, (, ), ==, Token, ., GETPROP, ;, }]
[., GETELEM, ;, }, public, boolean, isGetProp, (, ), {, return, this, ., getType, (, ), ==, Token, ., GETPROP]
[;, }, public, boolean, isHook, (, ), {, return, this, ., getType, (, ), ==, Token, ., HOOK, ;, }]
[==, Token, ., GETPROP, ;, }, public, boolean, isHook, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., GETPROP, ;, }, public, boolean, isHook, (, ), {, return, this, ., getType]
[;, }, public, boolean, isHook, (, ), {, return, this, ., getType, (, ), ==, Token, ., HOOK, ;, }]
[., GETPROP, ;, }, public, boolean, isHook, (, ), {, return, this, ., getType, (, ), ==, Token, ., HOOK]
[;, }, public, boolean, isIf, (, ), {, return, this, ., getType, (, ), ==, Token, ., IF, ;, }]
[==, Token, ., HOOK, ;, }, public, boolean, isIf, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., HOOK, ;, }, public, boolean, isIf, (, ), {, return, this, ., getType]
[;, }, public, boolean, isIf, (, ), {, return, this, ., getType, (, ), ==, Token, ., IF, ;, }]
[., HOOK, ;, }, public, boolean, isIf, (, ), {, return, this, ., getType, (, ), ==, Token, ., IF]
[;, }, public, boolean, isIn, (, ), {, return, this, ., getType, (, ), ==, Token, ., IN, ;, }]
[==, Token, ., IF, ;, }, public, boolean, isIn, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., IF, ;, }, public, boolean, isIn, (, ), {, return, this, ., getType]
[;, }, public, boolean, isIn, (, ), {, return, this, ., getType, (, ), ==, Token, ., IN, ;, }]
[., IF, ;, }, public, boolean, isIn, (, ), {, return, this, ., getType, (, ), ==, Token, ., IN]
[;, }, public, boolean, isInc, (, ), {, return, this, ., getType, (, ), ==, Token, ., INC, ;, }]
[==, Token, ., IN, ;, }, public, boolean, isInc, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., IN, ;, }, public, boolean, isInc, (, ), {, return, this, ., getType]
[;, }, public, boolean, isInc, (, ), {, return, this, ., getType, (, ), ==, Token, ., INC, ;, }]
[., IN, ;, }, public, boolean, isInc, (, ), {, return, this, ., getType, (, ), ==, Token, ., INC]
[;, }, public, boolean, isInstanceOf, (, ), {, return, this, ., getType, (, ), ==, Token, ., INSTANCEOF, ;, }]
[==, Token, ., INC, ;, }, public, boolean, isInstanceOf, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., INC, ;, }, public, boolean, isInstanceOf, (, ), {, return, this, ., getType]
[;, }, public, boolean, isInstanceOf, (, ), {, return, this, ., getType, (, ), ==, Token, ., INSTANCEOF, ;, }]
[., INC, ;, }, public, boolean, isInstanceOf, (, ), {, return, this, ., getType, (, ), ==, Token, ., INSTANCEOF]
[;, }, public, boolean, isLabel, (, ), {, return, this, ., getType, (, ), ==, Token, ., LABEL, ;, }]
[==, Token, ., INSTANCEOF, ;, }, public, boolean, isLabel, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., INSTANCEOF, ;, }, public, boolean, isLabel, (, ), {, return, this, ., getType]
[;, }, public, boolean, isLabel, (, ), {, return, this, ., getType, (, ), ==, Token, ., LABEL, ;, }]
[., INSTANCEOF, ;, }, public, boolean, isLabel, (, ), {, return, this, ., getType, (, ), ==, Token, ., LABEL]
[;, }, public, boolean, isLabelName, (, ), {, return, this, ., getType, (, ), ==, Token, ., LABEL_NAME, ;, }]
[==, Token, ., LABEL, ;, }, public, boolean, isLabelName, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., LABEL, ;, }, public, boolean, isLabelName, (, ), {, return, this, ., getType]
[;, }, public, boolean, isLabelName, (, ), {, return, this, ., getType, (, ), ==, Token, ., LABEL_NAME, ;, }]
[., LABEL, ;, }, public, boolean, isLabelName, (, ), {, return, this, ., getType, (, ), ==, Token, ., LABEL_NAME]
[;, }, public, boolean, isName, (, ), {, return, this, ., getType, (, ), ==, Token, ., NAME, ;, }]
[==, Token, ., LABEL_NAME, ;, }, public, boolean, isName, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., LABEL_NAME, ;, }, public, boolean, isName, (, ), {, return, this, ., getType]
[;, }, public, boolean, isName, (, ), {, return, this, ., getType, (, ), ==, Token, ., NAME, ;, }]
[., LABEL_NAME, ;, }, public, boolean, isName, (, ), {, return, this, ., getType, (, ), ==, Token, ., NAME]
[;, }, public, boolean, isNE, (, ), {, return, this, ., getType, (, ), ==, Token, ., NE, ;, }]
[==, Token, ., NAME, ;, }, public, boolean, isNE, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., NAME, ;, }, public, boolean, isNE, (, ), {, return, this, ., getType]
[;, }, public, boolean, isNE, (, ), {, return, this, ., getType, (, ), ==, Token, ., NE, ;, }]
[., NAME, ;, }, public, boolean, isNE, (, ), {, return, this, ., getType, (, ), ==, Token, ., NE]
[;, }, public, boolean, isNew, (, ), {, return, this, ., getType, (, ), ==, Token, ., NEW, ;, }]
[==, Token, ., NE, ;, }, public, boolean, isNew, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., NE, ;, }, public, boolean, isNew, (, ), {, return, this, ., getType]
[;, }, public, boolean, isNew, (, ), {, return, this, ., getType, (, ), ==, Token, ., NEW, ;, }]
[., NE, ;, }, public, boolean, isNew, (, ), {, return, this, ., getType, (, ), ==, Token, ., NEW]
[;, }, public, boolean, isNot, (, ), {, return, this, ., getType, (, ), ==, Token, ., NOT, ;, }]
[==, Token, ., NEW, ;, }, public, boolean, isNot, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., NEW, ;, }, public, boolean, isNot, (, ), {, return, this, ., getType]
[;, }, public, boolean, isNot, (, ), {, return, this, ., getType, (, ), ==, Token, ., NOT, ;, }]
[., NEW, ;, }, public, boolean, isNot, (, ), {, return, this, ., getType, (, ), ==, Token, ., NOT]
[;, }, public, boolean, isNull, (, ), {, return, this, ., getType, (, ), ==, Token, ., NULL, ;, }]
[==, Token, ., NOT, ;, }, public, boolean, isNull, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., NOT, ;, }, public, boolean, isNull, (, ), {, return, this, ., getType]
[;, }, public, boolean, isNull, (, ), {, return, this, ., getType, (, ), ==, Token, ., NULL, ;, }]
[., NOT, ;, }, public, boolean, isNull, (, ), {, return, this, ., getType, (, ), ==, Token, ., NULL]
[;, }, public, boolean, isNumber, (, ), {, return, this, ., getType, (, ), ==, Token, ., NUMBER, ;, }]
[==, Token, ., NULL, ;, }, public, boolean, isNumber, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., NULL, ;, }, public, boolean, isNumber, (, ), {, return, this, ., getType]
[;, }, public, boolean, isNumber, (, ), {, return, this, ., getType, (, ), ==, Token, ., NUMBER, ;, }]
[., NULL, ;, }, public, boolean, isNumber, (, ), {, return, this, ., getType, (, ), ==, Token, ., NUMBER]
[;, }, public, boolean, isObjectLit, (, ), {, return, this, ., getType, (, ), ==, Token, ., OBJECTLIT, ;, }]
[==, Token, ., NUMBER, ;, }, public, boolean, isObjectLit, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., NUMBER, ;, }, public, boolean, isObjectLit, (, ), {, return, this, ., getType]
[;, }, public, boolean, isObjectLit, (, ), {, return, this, ., getType, (, ), ==, Token, ., OBJECTLIT, ;, }]
[., NUMBER, ;, }, public, boolean, isObjectLit, (, ), {, return, this, ., getType, (, ), ==, Token, ., OBJECTLIT]
[;, }, public, boolean, isOr, (, ), {, return, this, ., getType, (, ), ==, Token, ., OR, ;, }]
[==, Token, ., OBJECTLIT, ;, }, public, boolean, isOr, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., OBJECTLIT, ;, }, public, boolean, isOr, (, ), {, return, this, ., getType]
[;, }, public, boolean, isOr, (, ), {, return, this, ., getType, (, ), ==, Token, ., OR, ;, }]
[., OBJECTLIT, ;, }, public, boolean, isOr, (, ), {, return, this, ., getType, (, ), ==, Token, ., OR]
[;, }, public, boolean, isParamList, (, ), {, return, this, ., getType, (, ), ==, Token, ., PARAM_LIST, ;, }]
[==, Token, ., OR, ;, }, public, boolean, isParamList, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., OR, ;, }, public, boolean, isParamList, (, ), {, return, this, ., getType]
[;, }, public, boolean, isParamList, (, ), {, return, this, ., getType, (, ), ==, Token, ., PARAM_LIST, ;, }]
[., OR, ;, }, public, boolean, isParamList, (, ), {, return, this, ., getType, (, ), ==, Token, ., PARAM_LIST]
[;, }, public, boolean, isRegExp, (, ), {, return, this, ., getType, (, ), ==, Token, ., REGEXP, ;, }]
[==, Token, ., PARAM_LIST, ;, }, public, boolean, isRegExp, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., PARAM_LIST, ;, }, public, boolean, isRegExp, (, ), {, return, this, ., getType]
[;, }, public, boolean, isRegExp, (, ), {, return, this, ., getType, (, ), ==, Token, ., REGEXP, ;, }]
[., PARAM_LIST, ;, }, public, boolean, isRegExp, (, ), {, return, this, ., getType, (, ), ==, Token, ., REGEXP]
[;, }, public, boolean, isReturn, (, ), {, return, this, ., getType, (, ), ==, Token, ., RETURN, ;, }]
[==, Token, ., REGEXP, ;, }, public, boolean, isReturn, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., REGEXP, ;, }, public, boolean, isReturn, (, ), {, return, this, ., getType]
[;, }, public, boolean, isReturn, (, ), {, return, this, ., getType, (, ), ==, Token, ., RETURN, ;, }]
[., REGEXP, ;, }, public, boolean, isReturn, (, ), {, return, this, ., getType, (, ), ==, Token, ., RETURN]
[;, }, public, boolean, isScript, (, ), {, return, this, ., getType, (, ), ==, Token, ., SCRIPT, ;, }]
[==, Token, ., RETURN, ;, }, public, boolean, isScript, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., RETURN, ;, }, public, boolean, isScript, (, ), {, return, this, ., getType]
[;, }, public, boolean, isScript, (, ), {, return, this, ., getType, (, ), ==, Token, ., SCRIPT, ;, }]
[., RETURN, ;, }, public, boolean, isScript, (, ), {, return, this, ., getType, (, ), ==, Token, ., SCRIPT]
[;, }, public, boolean, isSetterDef, (, ), {, return, this, ., getType, (, ), ==, Token, ., SETTER_DEF, ;, }]
[==, Token, ., SCRIPT, ;, }, public, boolean, isSetterDef, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., SCRIPT, ;, }, public, boolean, isSetterDef, (, ), {, return, this, ., getType]
[;, }, public, boolean, isSetterDef, (, ), {, return, this, ., getType, (, ), ==, Token, ., SETTER_DEF, ;, }]
[., SCRIPT, ;, }, public, boolean, isSetterDef, (, ), {, return, this, ., getType, (, ), ==, Token, ., SETTER_DEF]
[;, }, public, boolean, isString, (, ), {, return, this, ., getType, (, ), ==, Token, ., STRING, ;, }]
[==, Token, ., SETTER_DEF, ;, }, public, boolean, isString, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., SETTER_DEF, ;, }, public, boolean, isString, (, ), {, return, this, ., getType]
[;, }, public, boolean, isString, (, ), {, return, this, ., getType, (, ), ==, Token, ., STRING, ;, }]
[., SETTER_DEF, ;, }, public, boolean, isString, (, ), {, return, this, ., getType, (, ), ==, Token, ., STRING]
[;, }, public, boolean, isStringKey, (, ), {, return, this, ., getType, (, ), ==, Token, ., STRING_KEY, ;, }]
[==, Token, ., STRING, ;, }, public, boolean, isStringKey, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., STRING, ;, }, public, boolean, isStringKey, (, ), {, return, this, ., getType]
[;, }, public, boolean, isStringKey, (, ), {, return, this, ., getType, (, ), ==, Token, ., STRING_KEY, ;, }]
[., STRING, ;, }, public, boolean, isStringKey, (, ), {, return, this, ., getType, (, ), ==, Token, ., STRING_KEY]
[;, }, public, boolean, isSwitch, (, ), {, return, this, ., getType, (, ), ==, Token, ., SWITCH, ;, }]
[==, Token, ., STRING_KEY, ;, }, public, boolean, isSwitch, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., STRING_KEY, ;, }, public, boolean, isSwitch, (, ), {, return, this, ., getType]
[;, }, public, boolean, isSwitch, (, ), {, return, this, ., getType, (, ), ==, Token, ., SWITCH, ;, }]
[., STRING_KEY, ;, }, public, boolean, isSwitch, (, ), {, return, this, ., getType, (, ), ==, Token, ., SWITCH]
[;, }, public, boolean, isThis, (, ), {, return, this, ., getType, (, ), ==, Token, ., THIS, ;, }]
[==, Token, ., SWITCH, ;, }, public, boolean, isThis, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., SWITCH, ;, }, public, boolean, isThis, (, ), {, return, this, ., getType]
[;, }, public, boolean, isThis, (, ), {, return, this, ., getType, (, ), ==, Token, ., THIS, ;, }]
[., SWITCH, ;, }, public, boolean, isThis, (, ), {, return, this, ., getType, (, ), ==, Token, ., THIS]
[;, }, public, boolean, isThrow, (, ), {, return, this, ., getType, (, ), ==, Token, ., THROW, ;, }]
[==, Token, ., THIS, ;, }, public, boolean, isThrow, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., THIS, ;, }, public, boolean, isThrow, (, ), {, return, this, ., getType]
[;, }, public, boolean, isThrow, (, ), {, return, this, ., getType, (, ), ==, Token, ., THROW, ;, }]
[., THIS, ;, }, public, boolean, isThrow, (, ), {, return, this, ., getType, (, ), ==, Token, ., THROW]
[;, }, public, boolean, isTrue, (, ), {, return, this, ., getType, (, ), ==, Token, ., TRUE, ;, }]
[==, Token, ., THROW, ;, }, public, boolean, isTrue, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., THROW, ;, }, public, boolean, isTrue, (, ), {, return, this, ., getType]
[;, }, public, boolean, isTrue, (, ), {, return, this, ., getType, (, ), ==, Token, ., TRUE, ;, }]
[., THROW, ;, }, public, boolean, isTrue, (, ), {, return, this, ., getType, (, ), ==, Token, ., TRUE]
[;, }, public, boolean, isTry, (, ), {, return, this, ., getType, (, ), ==, Token, ., TRY, ;, }]
[==, Token, ., TRUE, ;, }, public, boolean, isTry, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., TRUE, ;, }, public, boolean, isTry, (, ), {, return, this, ., getType]
[;, }, public, boolean, isTry, (, ), {, return, this, ., getType, (, ), ==, Token, ., TRY, ;, }]
[., TRUE, ;, }, public, boolean, isTry, (, ), {, return, this, ., getType, (, ), ==, Token, ., TRY]
[;, }, public, boolean, isTypeOf, (, ), {, return, this, ., getType, (, ), ==, Token, ., TYPEOF, ;, }]
[==, Token, ., TRY, ;, }, public, boolean, isTypeOf, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., TRY, ;, }, public, boolean, isTypeOf, (, ), {, return, this, ., getType]
[;, }, public, boolean, isTypeOf, (, ), {, return, this, ., getType, (, ), ==, Token, ., TYPEOF, ;, }]
[., TRY, ;, }, public, boolean, isTypeOf, (, ), {, return, this, ., getType, (, ), ==, Token, ., TYPEOF]
[;, }, public, boolean, isVar, (, ), {, return, this, ., getType, (, ), ==, Token, ., VAR, ;, }]
[==, Token, ., TYPEOF, ;, }, public, boolean, isVar, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., TYPEOF, ;, }, public, boolean, isVar, (, ), {, return, this, ., getType]
[;, }, public, boolean, isVar, (, ), {, return, this, ., getType, (, ), ==, Token, ., VAR, ;, }]
[., TYPEOF, ;, }, public, boolean, isVar, (, ), {, return, this, ., getType, (, ), ==, Token, ., VAR]
[;, }, public, boolean, isVoid, (, ), {, return, this, ., getType, (, ), ==, Token, ., VOID, ;, }]
[==, Token, ., VAR, ;, }, public, boolean, isVoid, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., VAR, ;, }, public, boolean, isVoid, (, ), {, return, this, ., getType]
[;, }, public, boolean, isVoid, (, ), {, return, this, ., getType, (, ), ==, Token, ., VOID, ;, }]
[., VAR, ;, }, public, boolean, isVoid, (, ), {, return, this, ., getType, (, ), ==, Token, ., VOID]
[;, }, public, boolean, isWhile, (, ), {, return, this, ., getType, (, ), ==, Token, ., WHILE, ;, }]
[==, Token, ., VOID, ;, }, public, boolean, isWhile, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., VOID, ;, }, public, boolean, isWhile, (, ), {, return, this, ., getType]
[;, }, public, boolean, isWhile, (, ), {, return, this, ., getType, (, ), ==, Token, ., WHILE, ;, }]
[., VOID, ;, }, public, boolean, isWhile, (, ), {, return, this, ., getType, (, ), ==, Token, ., WHILE]
[;, }, public, boolean, isWith, (, ), {, return, this, ., getType, (, ), ==, Token, ., WITH, ;, }]
[==, Token, ., WHILE, ;, }, public, boolean, isWith, (, ), {, return, this, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., WHILE, ;, }, public, boolean, isWith, (, ), {, return, this, ., getType]
[;, }, public, boolean, isWith, (, ), {, return, this, ., getType, (, ), ==, Token, ., WITH, ;, }]
[., WHILE, ;, }, public, boolean, isWith, (, ), {, return, this, ., getType, (, ), ==, Token, ., WITH]
[;, }, }]
[==, Token, ., WITH, ;, }, }]
[., getType, (, ), ==, Token, ., WITH, ;, }, }]
[;, }, }]
[., WITH, ;, }, }]
