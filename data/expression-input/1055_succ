[;, private, final, AbstractCompiler, compiler, ;, private, final, String, logFunction, ;, RuntimeTypeCheck, (, AbstractCompiler, compiler, ,, @, Nullable, String, logFunction]
[;, }, private, String, getName, (, JSType, type, ), {, if, (, type, ., isInstanceType, (, ), ), {, return]
[., compareTo, (, getName, (, t2, ), ), ;, }, private, String, getName, (, JSType, type, ), {, if, (]
[), ., compareTo, (, getName, (, t2, ), ), ;, }, private, String, getName, (, JSType, type, ), {, if]
[), ;, }, private, String, getName, (, JSType, type, ), {, if, (, type, ., isInstanceType, (, ), ), {]
[), ), ;, }, private, String, getName, (, JSType, type, ), {, if, (, type, ., isInstanceType, (, ), )]
[), {, return, (, (, ObjectType, ), type, ), ., getReferenceName, (, ), ;, }, else, if, (, type, .]
[., isInstanceType, (, ), ), {, return, (, (, ObjectType, ), type, ), ., getReferenceName, (, ), ;, }, else]
[;, }, else, if, (, type, ., isNullType, (, ), ||, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType]
[., getReferenceName, (, ), ;, }, else, if, (, type, ., isNullType, (, ), ||, type, ., isBooleanValueType, (, )]
[), ., getReferenceName, (, ), ;, }, else, if, (, type, ., isNullType, (, ), ||, type, ., isBooleanValueType, (]
[), ., getReferenceName, (, ), ;, }, else, if, (, type, ., isNullType, (, ), ||, type, ., isBooleanValueType, (]
[), {, return, type, ., toString, (, ), ;, }, else, {, return, "", ;, }, }, }, ;, private]
[||, type, ., isVoidType, (, ), ), {, return, type, ., toString, (, ), ;, }, else, {, return, ""]
[||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return, type, ., toString, (, )]
[||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {]
[||, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type]
[., isNullType, (, ), ||, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType]
[||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {]
[., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType]
[||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return, type, ., toString, (, )]
[., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return, type]
[||, type, ., isVoidType, (, ), ), {, return, type, ., toString, (, ), ;, }, else, {, return, ""]
[., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return, type, ., toString, (, ), ;, }]
[), {, return, type, ., toString, (, ), ;, }, else, {, return, "", ;, }, }, }, ;, private]
[., isVoidType, (, ), ), {, return, type, ., toString, (, ), ;, }, else, {, return, "", ;, }]
[;, }, else, {, return, "", ;, }, }, }, ;, private, final, AbstractCompiler, compiler, ;, private, final, String, logFunction]
[., toString, (, ), ;, }, else, {, return, "", ;, }, }, }, ;, private, final, AbstractCompiler, compiler, ;]
[;, }, }, }, ;, private, final, AbstractCompiler, compiler, ;, private, final, String, logFunction, ;, RuntimeTypeCheck, (, AbstractCompiler, compiler, ,]
[=, compiler, ;, this, ., logFunction, =, logFunction, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., compiler, =, compiler, ;, this, ., logFunction, =, logFunction, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., logFunction, =, logFunction, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, logFunction, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., logFunction, =, logFunction, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AddChecks, (, ), ), ;, addBoilerplateCode, (, ), ;, }]
[., traverse, (, compiler, ,, root, ,, new, AddMarkers, (, compiler, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, root, ,, new, AddMarkers, (, compiler, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AddChecks]
[,, new, AddMarkers, (, compiler, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AddChecks, (, )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AddChecks, (, ), ), ;, addBoilerplateCode, (, ), ;]
[), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AddChecks, (, ), ), ;, addBoilerplateCode, (, )]
[;, addBoilerplateCode, (, ), ;, }, private, static, class, AddMarkers, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, final, AbstractCompiler, compiler, ;]
[., traverse, (, compiler, ,, root, ,, new, AddChecks, (, ), ), ;, addBoilerplateCode, (, ), ;, }, private, static]
[,, root, ,, new, AddChecks, (, ), ), ;, addBoilerplateCode, (, ), ;, }, private, static, class, AddMarkers, extends, NodeTraversal]
[,, new, AddChecks, (, ), ), ;, addBoilerplateCode, (, ), ;, }, private, static, class, AddMarkers, extends, NodeTraversal, ., AbstractPostOrderCallback]
[), ;, addBoilerplateCode, (, ), ;, }, private, static, class, AddMarkers, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, final, AbstractCompiler, compiler]
[;, }, private, static, class, AddMarkers, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, final, AbstractCompiler, compiler, ;, private, AddMarkers, (, AbstractCompiler]
[=, compiler, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., compiler, =, compiler, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, visitFunction, (, t, ,, n, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n]
[., isFunction, (, ), ), {, visitFunction, (, t, ,, n, ), ;, }, }, private, void, visitFunction, (, NodeTraversal]
[;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, funType, =, n, ., getJSType]
[,, n, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, funType, =]
[), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, funType, =, n, .]
[;, if, (, funType, !=, null, &&, !, funType, ., isConstructor, (, ), ), {, return, ;, }, Node, nodeToInsertAfter]
[., toMaybeFunctionType, (, ), ;, if, (, funType, !=, null, &&, !, funType, ., isConstructor, (, ), ), {, return]
[., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, if, (, funType, !=, null, &&, !, funType, ., isConstructor, (]
[), {, return, ;, }, Node, nodeToInsertAfter, =, findNodeToInsertAfter, (, n, ), ;, nodeToInsertAfter, =, addMarker, (, funType, ,, nodeToInsertAfter]
[&&, !, funType, ., isConstructor, (, ), ), {, return, ;, }, Node, nodeToInsertAfter, =, findNodeToInsertAfter, (, n, ), ;]
[!=, null, &&, !, funType, ., isConstructor, (, ), ), {, return, ;, }, Node, nodeToInsertAfter, =, findNodeToInsertAfter, (, n]
[&&, !, funType, ., isConstructor, (, ), ), {, return, ;, }, Node, nodeToInsertAfter, =, findNodeToInsertAfter, (, n, ), ;]
[), {, return, ;, }, Node, nodeToInsertAfter, =, findNodeToInsertAfter, (, n, ), ;, nodeToInsertAfter, =, addMarker, (, funType, ,, nodeToInsertAfter]
[), {, return, ;, }, Node, nodeToInsertAfter, =, findNodeToInsertAfter, (, n, ), ;, nodeToInsertAfter, =, addMarker, (, funType, ,, nodeToInsertAfter]
[., isConstructor, (, ), ), {, return, ;, }, Node, nodeToInsertAfter, =, findNodeToInsertAfter, (, n, ), ;, nodeToInsertAfter, =, addMarker]
[;, nodeToInsertAfter, =, addMarker, (, funType, ,, nodeToInsertAfter, ,, null, ), ;, TreeSet, <, ObjectType, >, stuff, =, Sets, .]
[), ;, nodeToInsertAfter, =, addMarker, (, funType, ,, nodeToInsertAfter, ,, null, ), ;, TreeSet, <, ObjectType, >, stuff, =, Sets]
[=, addMarker, (, funType, ,, nodeToInsertAfter, ,, null, ), ;, TreeSet, <, ObjectType, >, stuff, =, Sets, ., newTreeSet, (]
[;, TreeSet, <, ObjectType, >, stuff, =, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (, stuff, ,]
[,, nodeToInsertAfter, ,, null, ), ;, TreeSet, <, ObjectType, >, stuff, =, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables]
[,, null, ), ;, TreeSet, <, ObjectType, >, stuff, =, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll]
[), ;, TreeSet, <, ObjectType, >, stuff, =, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (, stuff]
[;, Iterables, ., addAll, (, stuff, ,, funType, ., getAllImplementedInterfaces, (, ), ), ;, for, (, ObjectType, interfaceType, :, stuff]
[., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (, stuff, ,, funType, ., getAllImplementedInterfaces, (, ), ), ;, for]
[), ;, Iterables, ., addAll, (, stuff, ,, funType, ., getAllImplementedInterfaces, (, ), ), ;, for, (, ObjectType, interfaceType, :]
[;, for, (, ObjectType, interfaceType, :, stuff, ), {, nodeToInsertAfter, =, addMarker, (, funType, ,, nodeToInsertAfter, ,, interfaceType, ), ;]
[., addAll, (, stuff, ,, funType, ., getAllImplementedInterfaces, (, ), ), ;, for, (, ObjectType, interfaceType, :, stuff, ), {]
[,, funType, ., getAllImplementedInterfaces, (, ), ), ;, for, (, ObjectType, interfaceType, :, stuff, ), {, nodeToInsertAfter, =, addMarker, (]
[), ;, for, (, ObjectType, interfaceType, :, stuff, ), {, nodeToInsertAfter, =, addMarker, (, funType, ,, nodeToInsertAfter, ,, interfaceType, )]
[., getAllImplementedInterfaces, (, ), ), ;, for, (, ObjectType, interfaceType, :, stuff, ), {, nodeToInsertAfter, =, addMarker, (, funType, ,]
[), {, nodeToInsertAfter, =, addMarker, (, funType, ,, nodeToInsertAfter, ,, interfaceType, ), ;, }, }, private, Node, addMarker, (, FunctionType]
[=, addMarker, (, funType, ,, nodeToInsertAfter, ,, interfaceType, ), ;, }, }, private, Node, addMarker, (, FunctionType, funType, ,, Node]
[;, }, }, private, Node, addMarker, (, FunctionType, funType, ,, Node, nodeToInsertAfter, ,, @, Nullable, ObjectType, interfaceType, ), {, if]
[,, nodeToInsertAfter, ,, interfaceType, ), ;, }, }, private, Node, addMarker, (, FunctionType, funType, ,, Node, nodeToInsertAfter, ,, @, Nullable]
[,, interfaceType, ), ;, }, }, private, Node, addMarker, (, FunctionType, funType, ,, Node, nodeToInsertAfter, ,, @, Nullable, ObjectType, interfaceType]
[), ;, }, }, private, Node, addMarker, (, FunctionType, funType, ,, Node, nodeToInsertAfter, ,, @, Nullable, ObjectType, interfaceType, ), {]
[), {, return, nodeToInsertAfter, ;, }, String, className, =, NodeUtil, ., getFunctionName, (, funType, ., getSource, (, ), ), ;]
[==, null, ), {, return, nodeToInsertAfter, ;, }, String, className, =, NodeUtil, ., getFunctionName, (, funType, ., getSource, (, )]
[., getSource, (, ), ==, null, ), {, return, nodeToInsertAfter, ;, }, String, className, =, NodeUtil, ., getFunctionName, (, funType]
[), {, return, nodeToInsertAfter, ;, }, String, className, =, NodeUtil, ., getFunctionName, (, funType, ., getSource, (, ), ), ;]
[;, }, String, className, =, NodeUtil, ., getFunctionName, (, funType, ., getSource, (, ), ), ;, if, (, className, ==]
[;, if, (, className, ==, null, ), {, return, nodeToInsertAfter, ;, }, Node, classNode, =, NodeUtil, ., newQualifiedNameNode, (, compiler]
[., getFunctionName, (, funType, ., getSource, (, ), ), ;, if, (, className, ==, null, ), {, return, nodeToInsertAfter, ;]
[), ;, if, (, className, ==, null, ), {, return, nodeToInsertAfter, ;, }, Node, classNode, =, NodeUtil, ., newQualifiedNameNode, (]
[., getSource, (, ), ), ;, if, (, className, ==, null, ), {, return, nodeToInsertAfter, ;, }, Node, classNode, =]
[), {, return, nodeToInsertAfter, ;, }, Node, classNode, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className]
[==, null, ), {, return, nodeToInsertAfter, ;, }, Node, classNode, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, )]
[), {, return, nodeToInsertAfter, ;, }, Node, classNode, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className]
[;, }, Node, classNode, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, ), ;, Node, marker]
[;, Node, marker, =, IR, ., string, (, interfaceType, ==, null, ?, "instance_of__", +, className, :, "implements__", +, interfaceType, .]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, ), ;, Node, marker, =, IR, ., string, (, interfaceType]
[,, className, ), ;, Node, marker, =, IR, ., string, (, interfaceType, ==, null, ?, "instance_of__", +, className, :, "implements__"]
[., getCodingConvention, (, ), ,, className, ), ;, Node, marker, =, IR, ., string, (, interfaceType, ==, null, ?, "instance_of__"]
[), ;, Node, marker, =, IR, ., string, (, interfaceType, ==, null, ?, "instance_of__", +, className, :, "implements__", +, interfaceType]
[;, Node, assign, =, IR, ., exprResult, (, IR, ., assign, (, IR, ., getelem, (, IR, ., getprop, (]
[., string, (, interfaceType, ==, null, ?, "instance_of__", +, className, :, "implements__", +, interfaceType, ., getReferenceName, (, ), ), ;]
[), ;, Node, assign, =, IR, ., exprResult, (, IR, ., assign, (, IR, ., getelem, (, IR, ., getprop]
[?, "instance_of__", +, className, :, "implements__", +, interfaceType, ., getReferenceName, (, ), ), ;, Node, assign, =, IR, ., exprResult]
[==, null, ?, "instance_of__", +, className, :, "implements__", +, interfaceType, ., getReferenceName, (, ), ), ;, Node, assign, =, IR]
[?, "instance_of__", +, className, :, "implements__", +, interfaceType, ., getReferenceName, (, ), ), ;, Node, assign, =, IR, ., exprResult]
[:, "implements__", +, interfaceType, ., getReferenceName, (, ), ), ;, Node, assign, =, IR, ., exprResult, (, IR, ., assign]
[+, className, :, "implements__", +, interfaceType, ., getReferenceName, (, ), ), ;, Node, assign, =, IR, ., exprResult, (, IR]
[:, "implements__", +, interfaceType, ., getReferenceName, (, ), ), ;, Node, assign, =, IR, ., exprResult, (, IR, ., assign]
[), ;, Node, assign, =, IR, ., exprResult, (, IR, ., assign, (, IR, ., getelem, (, IR, ., getprop]
[+, interfaceType, ., getReferenceName, (, ), ), ;, Node, assign, =, IR, ., exprResult, (, IR, ., assign, (, IR]
[), ;, Node, assign, =, IR, ., exprResult, (, IR, ., assign, (, IR, ., getelem, (, IR, ., getprop]
[., getReferenceName, (, ), ), ;, Node, assign, =, IR, ., exprResult, (, IR, ., assign, (, IR, ., getelem]
[;, nodeToInsertAfter, ., getParent, (, ), ., addChildAfter, (, assign, ,, nodeToInsertAfter, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., exprResult, (, IR, ., assign, (, IR, ., getelem, (, IR, ., getprop, (, classNode, ,, IR, ., string]
[), ;, nodeToInsertAfter, ., getParent, (, ), ., addChildAfter, (, assign, ,, nodeToInsertAfter, ), ;, compiler, ., reportCodeChange, (, )]
[., assign, (, IR, ., getelem, (, IR, ., getprop, (, classNode, ,, IR, ., string, (, "prototype", ), )]
[,, IR, ., trueNode, (, ), ), ), ;, nodeToInsertAfter, ., getParent, (, ), ., addChildAfter, (, assign, ,, nodeToInsertAfter]
[., getelem, (, IR, ., getprop, (, classNode, ,, IR, ., string, (, "prototype", ), ), ,, marker, ), ,]
[,, marker, ), ,, IR, ., trueNode, (, ), ), ), ;, nodeToInsertAfter, ., getParent, (, ), ., addChildAfter, (]
[., getprop, (, classNode, ,, IR, ., string, (, "prototype", ), ), ,, marker, ), ,, IR, ., trueNode, (]
[,, IR, ., string, (, "prototype", ), ), ,, marker, ), ,, IR, ., trueNode, (, ), ), ), ;]
[), ,, marker, ), ,, IR, ., trueNode, (, ), ), ), ;, nodeToInsertAfter, ., getParent, (, ), ., addChildAfter]
[., string, (, "prototype", ), ), ,, marker, ), ,, IR, ., trueNode, (, ), ), ), ;, nodeToInsertAfter, .]
[), ), ,, marker, ), ,, IR, ., trueNode, (, ), ), ), ;, nodeToInsertAfter, ., getParent, (, ), .]
[), ,, IR, ., trueNode, (, ), ), ), ;, nodeToInsertAfter, ., getParent, (, ), ., addChildAfter, (, assign, ,]
[), ), ;, nodeToInsertAfter, ., getParent, (, ), ., addChildAfter, (, assign, ,, nodeToInsertAfter, ), ;, compiler, ., reportCodeChange, (]
[., trueNode, (, ), ), ), ;, nodeToInsertAfter, ., getParent, (, ), ., addChildAfter, (, assign, ,, nodeToInsertAfter, ), ;]
[;, compiler, ., reportCodeChange, (, ), ;, nodeToInsertAfter, =, assign, ;, return, nodeToInsertAfter, ;, }, private, Node, findNodeToInsertAfter, (, Node]
[., addChildAfter, (, assign, ,, nodeToInsertAfter, ), ;, compiler, ., reportCodeChange, (, ), ;, nodeToInsertAfter, =, assign, ;, return, nodeToInsertAfter]
[., getParent, (, ), ., addChildAfter, (, assign, ,, nodeToInsertAfter, ), ;, compiler, ., reportCodeChange, (, ), ;, nodeToInsertAfter, =]
[,, nodeToInsertAfter, ), ;, compiler, ., reportCodeChange, (, ), ;, nodeToInsertAfter, =, assign, ;, return, nodeToInsertAfter, ;, }, private, Node]
[), ;, compiler, ., reportCodeChange, (, ), ;, nodeToInsertAfter, =, assign, ;, return, nodeToInsertAfter, ;, }, private, Node, findNodeToInsertAfter, (]
[;, nodeToInsertAfter, =, assign, ;, return, nodeToInsertAfter, ;, }, private, Node, findNodeToInsertAfter, (, Node, n, ), {, Node, nodeToInsertAfter, =]
[., reportCodeChange, (, ), ;, nodeToInsertAfter, =, assign, ;, return, nodeToInsertAfter, ;, }, private, Node, findNodeToInsertAfter, (, Node, n, )]
[=, assign, ;, return, nodeToInsertAfter, ;, }, private, Node, findNodeToInsertAfter, (, Node, n, ), {, Node, nodeToInsertAfter, =, findEnclosingConstructorDeclaration, (]
[;, return, nodeToInsertAfter, ;, }, private, Node, findNodeToInsertAfter, (, Node, n, ), {, Node, nodeToInsertAfter, =, findEnclosingConstructorDeclaration, (, n, )]
[;, }, private, Node, findNodeToInsertAfter, (, Node, n, ), {, Node, nodeToInsertAfter, =, findEnclosingConstructorDeclaration, (, n, ), ;, Node, next]
[;, Node, next, =, nodeToInsertAfter, ., getNext, (, ), ;, while, (, next, !=, null, &&, isClassDefiningCall, (, next, )]
[), ;, Node, next, =, nodeToInsertAfter, ., getNext, (, ), ;, while, (, next, !=, null, &&, isClassDefiningCall, (, next]
[;, while, (, next, !=, null, &&, isClassDefiningCall, (, next, ), ), {, nodeToInsertAfter, =, next, ;, next, =, nodeToInsertAfter]
[., getNext, (, ), ;, while, (, next, !=, null, &&, isClassDefiningCall, (, next, ), ), {, nodeToInsertAfter, =, next]
[), {, nodeToInsertAfter, =, next, ;, next, =, nodeToInsertAfter, ., getNext, (, ), ;, }, return, nodeToInsertAfter, ;, }, private]
[&&, isClassDefiningCall, (, next, ), ), {, nodeToInsertAfter, =, next, ;, next, =, nodeToInsertAfter, ., getNext, (, ), ;, }]
[!=, null, &&, isClassDefiningCall, (, next, ), ), {, nodeToInsertAfter, =, next, ;, next, =, nodeToInsertAfter, ., getNext, (, )]
[&&, isClassDefiningCall, (, next, ), ), {, nodeToInsertAfter, =, next, ;, next, =, nodeToInsertAfter, ., getNext, (, ), ;, }]
[), {, nodeToInsertAfter, =, next, ;, next, =, nodeToInsertAfter, ., getNext, (, ), ;, }, return, nodeToInsertAfter, ;, }, private]
[), ), {, nodeToInsertAfter, =, next, ;, next, =, nodeToInsertAfter, ., getNext, (, ), ;, }, return, nodeToInsertAfter, ;, }]
[=, next, ;, next, =, nodeToInsertAfter, ., getNext, (, ), ;, }, return, nodeToInsertAfter, ;, }, private, Node, findEnclosingConstructorDeclaration, (]
[;, next, =, nodeToInsertAfter, ., getNext, (, ), ;, }, return, nodeToInsertAfter, ;, }, private, Node, findEnclosingConstructorDeclaration, (, Node, n]
[=, nodeToInsertAfter, ., getNext, (, ), ;, }, return, nodeToInsertAfter, ;, }, private, Node, findEnclosingConstructorDeclaration, (, Node, n, ), {]
[;, }, return, nodeToInsertAfter, ;, }, private, Node, findEnclosingConstructorDeclaration, (, Node, n, ), {, while, (, !, n, ., getParent]
[., getNext, (, ), ;, }, return, nodeToInsertAfter, ;, }, private, Node, findEnclosingConstructorDeclaration, (, Node, n, ), {, while, (]
[;, }, private, Node, findEnclosingConstructorDeclaration, (, Node, n, ), {, while, (, !, n, ., getParent, (, ), ., isScript]
[), {, n, =, n, ., getParent, (, ), ;, }, return, n, ;, }, private, boolean, isClassDefiningCall, (, Node]
[&&, !, n, ., getParent, (, ), ., isBlock, (, ), ), {, n, =, n, ., getParent, (, )]
[&&, !, n, ., getParent, (, ), ., isBlock, (, ), ), {, n, =, n, ., getParent, (, )]
[., isScript, (, ), &&, !, n, ., getParent, (, ), ., isBlock, (, ), ), {, n, =, n]
[., getParent, (, ), ., isScript, (, ), &&, !, n, ., getParent, (, ), ., isBlock, (, ), )]
[), {, n, =, n, ., getParent, (, ), ;, }, return, n, ;, }, private, boolean, isClassDefiningCall, (, Node]
[), {, n, =, n, ., getParent, (, ), ;, }, return, n, ;, }, private, boolean, isClassDefiningCall, (, Node]
[., isBlock, (, ), ), {, n, =, n, ., getParent, (, ), ;, }, return, n, ;, }, private]
[., getParent, (, ), ., isBlock, (, ), ), {, n, =, n, ., getParent, (, ), ;, }, return]
[=, n, ., getParent, (, ), ;, }, return, n, ;, }, private, boolean, isClassDefiningCall, (, Node, next, ), {]
[;, }, return, n, ;, }, private, boolean, isClassDefiningCall, (, Node, next, ), {, return, NodeUtil, ., isExprCall, (, next]
[., getParent, (, ), ;, }, return, n, ;, }, private, boolean, isClassDefiningCall, (, Node, next, ), {, return, NodeUtil]
[;, }, private, boolean, isClassDefiningCall, (, Node, next, ), {, return, NodeUtil, ., isExprCall, (, next, ), &&, compiler, .]
[;, }, }, private, class, AddChecks, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, AddChecks, (, ), {, }, @, Override, public]
[&&, compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, next, ., getFirstChild, (, ), ), !=, null, ;, }, }]
[., isExprCall, (, next, ), &&, compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, next, ., getFirstChild, (, ), )]
[), &&, compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, next, ., getFirstChild, (, ), ), !=, null, ;, }]
[;, }, }, private, class, AddChecks, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, AddChecks, (, ), {, }, @, Override, public]
[!=, null, ;, }, }, private, class, AddChecks, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, AddChecks, (, ), {, }, @]
[., getClassesDefinedByCall, (, next, ., getFirstChild, (, ), ), !=, null, ;, }, }, private, class, AddChecks, extends, NodeTraversal, .]
[., getCodingConvention, (, ), ., getClassesDefinedByCall, (, next, ., getFirstChild, (, ), ), !=, null, ;, }, }, private, class]
[), !=, null, ;, }, }, private, class, AddChecks, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, AddChecks, (, ), {, }]
[., getFirstChild, (, ), ), !=, null, ;, }, }, private, class, AddChecks, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, AddChecks]
[;, }, }, private, class, AddChecks, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, AddChecks, (, ), {, }, @, Override, public]
[), {, visitFunction, (, t, ,, n, ), ;, }, else, if, (, n, ., isReturn, (, ), ), {]
[., isFunction, (, ), ), {, visitFunction, (, t, ,, n, ), ;, }, else, if, (, n, ., isReturn]
[;, }, else, if, (, n, ., isReturn, (, ), ), {, visitReturn, (, t, ,, n, ), ;, }]
[,, n, ), ;, }, else, if, (, n, ., isReturn, (, ), ), {, visitReturn, (, t, ,, n]
[), ;, }, else, if, (, n, ., isReturn, (, ), ), {, visitReturn, (, t, ,, n, ), ;]
[), {, visitReturn, (, t, ,, n, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n]
[., isReturn, (, ), ), {, visitReturn, (, t, ,, n, ), ;, }, }, private, void, visitFunction, (, NodeTraversal]
[;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, funType, =, JSType, ., toMaybeFunctionType]
[,, n, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, funType, =]
[), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, funType, =, JSType, .]
[;, Node, block, =, n, ., getLastChild, (, ), ;, Node, paramName, =, NodeUtil, ., getFunctionParameters, (, n, ), .]
[., toMaybeFunctionType, (, n, ., getJSType, (, ), ), ;, Node, block, =, n, ., getLastChild, (, ), ;, Node]
[), ;, Node, block, =, n, ., getLastChild, (, ), ;, Node, paramName, =, NodeUtil, ., getFunctionParameters, (, n, )]
[., getJSType, (, ), ), ;, Node, block, =, n, ., getLastChild, (, ), ;, Node, paramName, =, NodeUtil, .]
[;, Node, paramName, =, NodeUtil, ., getFunctionParameters, (, n, ), ., getFirstChild, (, ), ;, Node, insertionPoint, =, null, ;]
[., getLastChild, (, ), ;, Node, paramName, =, NodeUtil, ., getFunctionParameters, (, n, ), ., getFirstChild, (, ), ;, Node]
[;, Node, insertionPoint, =, null, ;, for, (, Node, next, =, block, ., getFirstChild, (, ), ;, next, !=, null]
[., getFirstChild, (, ), ;, Node, insertionPoint, =, null, ;, for, (, Node, next, =, block, ., getFirstChild, (, )]
[., getFunctionParameters, (, n, ), ., getFirstChild, (, ), ;, Node, insertionPoint, =, null, ;, for, (, Node, next, =]
[), ., getFirstChild, (, ), ;, Node, insertionPoint, =, null, ;, for, (, Node, next, =, block, ., getFirstChild, (]
[;, for, (, Node, next, =, block, ., getFirstChild, (, ), ;, next, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (]
[;, next, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, next, ), ;, next, =, next, ., getNext, (, ), )]
[., getFirstChild, (, ), ;, next, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, next, ), ;, next, =, next, .]
[;, next, =, next, ., getNext, (, ), ), {, insertionPoint, =, next, ;, }, for, (, Node, paramType, :]
[&&, NodeUtil, ., isFunctionDeclaration, (, next, ), ;, next, =, next, ., getNext, (, ), ), {, insertionPoint, =, next]
[!=, null, &&, NodeUtil, ., isFunctionDeclaration, (, next, ), ;, next, =, next, ., getNext, (, ), ), {, insertionPoint]
[&&, NodeUtil, ., isFunctionDeclaration, (, next, ), ;, next, =, next, ., getNext, (, ), ), {, insertionPoint, =, next]
[;, next, =, next, ., getNext, (, ), ), {, insertionPoint, =, next, ;, }, for, (, Node, paramType, :]
[., isFunctionDeclaration, (, next, ), ;, next, =, next, ., getNext, (, ), ), {, insertionPoint, =, next, ;, }]
[), ;, next, =, next, ., getNext, (, ), ), {, insertionPoint, =, next, ;, }, for, (, Node, paramType]
[=, next, ., getNext, (, ), ), {, insertionPoint, =, next, ;, }, for, (, Node, paramType, :, funType, .]
[), {, insertionPoint, =, next, ;, }, for, (, Node, paramType, :, funType, ., getParameters, (, ), ), {, if]
[., getNext, (, ), ), {, insertionPoint, =, next, ;, }, for, (, Node, paramType, :, funType, ., getParameters, (]
[=, next, ;, }, for, (, Node, paramType, :, funType, ., getParameters, (, ), ), {, if, (, paramName, ==]
[;, }, for, (, Node, paramType, :, funType, ., getParameters, (, ), ), {, if, (, paramName, ==, null, )]
[), {, if, (, paramName, ==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (, paramType, ., getJSType]
[., getParameters, (, ), ), {, if, (, paramName, ==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode]
[), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (, paramType, ., getJSType, (, ), ,, paramName, ., cloneTree, (]
[==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (, paramType, ., getJSType, (, ), ,, paramName, .]
[), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (, paramType, ., getJSType, (, ), ,, paramName, ., cloneTree, (]
[;, if, (, checkNode, ==, null, ), {, paramName, =, paramName, ., getNext, (, ), ;, continue, ;, }, checkNode]
[,, paramName, ., cloneTree, (, ), ), ;, if, (, checkNode, ==, null, ), {, paramName, =, paramName, ., getNext]
[., getJSType, (, ), ,, paramName, ., cloneTree, (, ), ), ;, if, (, checkNode, ==, null, ), {, paramName]
[), ;, if, (, checkNode, ==, null, ), {, paramName, =, paramName, ., getNext, (, ), ;, continue, ;, }]
[., cloneTree, (, ), ), ;, if, (, checkNode, ==, null, ), {, paramName, =, paramName, ., getNext, (, )]
[), {, paramName, =, paramName, ., getNext, (, ), ;, continue, ;, }, checkNode, =, IR, ., exprResult, (, checkNode]
[==, null, ), {, paramName, =, paramName, ., getNext, (, ), ;, continue, ;, }, checkNode, =, IR, ., exprResult]
[), {, paramName, =, paramName, ., getNext, (, ), ;, continue, ;, }, checkNode, =, IR, ., exprResult, (, checkNode]
[=, paramName, ., getNext, (, ), ;, continue, ;, }, checkNode, =, IR, ., exprResult, (, checkNode, ), ;, if]
[;, continue, ;, }, checkNode, =, IR, ., exprResult, (, checkNode, ), ;, if, (, insertionPoint, ==, null, ), {]
[., getNext, (, ), ;, continue, ;, }, checkNode, =, IR, ., exprResult, (, checkNode, ), ;, if, (, insertionPoint]
[=, IR, ., exprResult, (, checkNode, ), ;, if, (, insertionPoint, ==, null, ), {, block, ., addChildToFront, (, checkNode]
[;, if, (, insertionPoint, ==, null, ), {, block, ., addChildToFront, (, checkNode, ), ;, }, else, {, block, .]
[., exprResult, (, checkNode, ), ;, if, (, insertionPoint, ==, null, ), {, block, ., addChildToFront, (, checkNode, ), ;]
[), ;, if, (, insertionPoint, ==, null, ), {, block, ., addChildToFront, (, checkNode, ), ;, }, else, {, block]
[), {, block, ., addChildToFront, (, checkNode, ), ;, }, else, {, block, ., addChildAfter, (, checkNode, ,, insertionPoint, )]
[==, null, ), {, block, ., addChildToFront, (, checkNode, ), ;, }, else, {, block, ., addChildAfter, (, checkNode, ,]
[), {, block, ., addChildToFront, (, checkNode, ), ;, }, else, {, block, ., addChildAfter, (, checkNode, ,, insertionPoint, )]
[;, }, else, {, block, ., addChildAfter, (, checkNode, ,, insertionPoint, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[., addChildToFront, (, checkNode, ), ;, }, else, {, block, ., addChildAfter, (, checkNode, ,, insertionPoint, ), ;, }, compiler]
[), ;, }, else, {, block, ., addChildAfter, (, checkNode, ,, insertionPoint, ), ;, }, compiler, ., reportCodeChange, (, )]
[;, }, compiler, ., reportCodeChange, (, ), ;, paramName, =, paramName, ., getNext, (, ), ;, insertionPoint, =, checkNode, ;]
[., addChildAfter, (, checkNode, ,, insertionPoint, ), ;, }, compiler, ., reportCodeChange, (, ), ;, paramName, =, paramName, ., getNext]
[,, insertionPoint, ), ;, }, compiler, ., reportCodeChange, (, ), ;, paramName, =, paramName, ., getNext, (, ), ;, insertionPoint]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, paramName, =, paramName, ., getNext, (, ), ;, insertionPoint, =, checkNode]
[;, paramName, =, paramName, ., getNext, (, ), ;, insertionPoint, =, checkNode, ;, }, }, private, void, visitReturn, (, NodeTraversal]
[., reportCodeChange, (, ), ;, paramName, =, paramName, ., getNext, (, ), ;, insertionPoint, =, checkNode, ;, }, }, private]
[=, paramName, ., getNext, (, ), ;, insertionPoint, =, checkNode, ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,]
[;, insertionPoint, =, checkNode, ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, Node, function]
[., getNext, (, ), ;, insertionPoint, =, checkNode, ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n]
[=, checkNode, ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, Node, function, =, t]
[;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, Node, function, =, t, ., getEnclosingFunction]
[;, FunctionType, funType, =, function, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, Node, retValue, =, n, ., getFirstChild]
[., getEnclosingFunction, (, ), ;, FunctionType, funType, =, function, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, Node, retValue]
[;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (, retValue, ==, null, ), {, return, ;, }]
[., toMaybeFunctionType, (, ), ;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (, retValue, ==, null, )]
[., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (]
[;, if, (, retValue, ==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (, funType, ., getReturnType, (]
[., getFirstChild, (, ), ;, if, (, retValue, ==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (]
[), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (, funType, ., getReturnType, (, ), ,, retValue, ., cloneTree, (]
[==, null, ), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (, funType, ., getReturnType, (, ), ,, retValue, .]
[), {, return, ;, }, Node, checkNode, =, createCheckTypeCallNode, (, funType, ., getReturnType, (, ), ,, retValue, ., cloneTree, (]
[;, if, (, checkNode, ==, null, ), {, return, ;, }, n, ., replaceChild, (, retValue, ,, checkNode, ), ;]
[,, retValue, ., cloneTree, (, ), ), ;, if, (, checkNode, ==, null, ), {, return, ;, }, n, .]
[., getReturnType, (, ), ,, retValue, ., cloneTree, (, ), ), ;, if, (, checkNode, ==, null, ), {, return]
[), ;, if, (, checkNode, ==, null, ), {, return, ;, }, n, ., replaceChild, (, retValue, ,, checkNode, )]
[., cloneTree, (, ), ), ;, if, (, checkNode, ==, null, ), {, return, ;, }, n, ., replaceChild, (]
[), {, return, ;, }, n, ., replaceChild, (, retValue, ,, checkNode, ), ;, compiler, ., reportCodeChange, (, ), ;]
[==, null, ), {, return, ;, }, n, ., replaceChild, (, retValue, ,, checkNode, ), ;, compiler, ., reportCodeChange, (]
[), {, return, ;, }, n, ., replaceChild, (, retValue, ,, checkNode, ), ;, compiler, ., reportCodeChange, (, ), ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, createCheckTypeCallNode, (, JSType, type, ,, Node, expr, ), {, Node]
[., replaceChild, (, retValue, ,, checkNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, createCheckTypeCallNode, (, JSType]
[,, checkNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, createCheckTypeCallNode, (, JSType, type, ,, Node, expr]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, createCheckTypeCallNode, (, JSType, type, ,, Node, expr, ), {]
[;, }, private, Node, createCheckTypeCallNode, (, JSType, type, ,, Node, expr, ), {, Node, arrayNode, =, IR, ., arraylit, (]
[., reportCodeChange, (, ), ;, }, private, Node, createCheckTypeCallNode, (, JSType, type, ,, Node, expr, ), {, Node, arrayNode, =]
[;, Collection, <, JSType, >, alternates, ;, if, (, type, ., isUnionType, (, ), ), {, alternates, =, Sets, .]
[., arraylit, (, ), ;, Collection, <, JSType, >, alternates, ;, if, (, type, ., isUnionType, (, ), ), {]
[), {, alternates, =, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (, alternates, ,, type, ., toMaybeUnionType]
[., isUnionType, (, ), ), {, alternates, =, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (, alternates]
[=, Sets, ., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (, alternates, ,, type, ., toMaybeUnionType, (, ), .]
[;, Iterables, ., addAll, (, alternates, ,, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), ;, }, else]
[., newTreeSet, (, ALPHA, ), ;, Iterables, ., addAll, (, alternates, ,, type, ., toMaybeUnionType, (, ), ., getAlternates, (]
[), ;, Iterables, ., addAll, (, alternates, ,, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), ;, }]
[;, }, else, {, alternates, =, ImmutableList, ., of, (, type, ), ;, }, for, (, JSType, alternate, :, alternates]
[., addAll, (, alternates, ,, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), ;, }, else, {, alternates]
[,, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), ;, }, else, {, alternates, =, ImmutableList, ., of]
[), ;, }, else, {, alternates, =, ImmutableList, ., of, (, type, ), ;, }, for, (, JSType, alternate, :]
[., getAlternates, (, ), ), ;, }, else, {, alternates, =, ImmutableList, ., of, (, type, ), ;, }, for]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), ;, }, else, {, alternates, =, ImmutableList, ., of, (, type]
[=, ImmutableList, ., of, (, type, ), ;, }, for, (, JSType, alternate, :, alternates, ), {, Node, checkerNode, =]
[;, }, for, (, JSType, alternate, :, alternates, ), {, Node, checkerNode, =, createCheckerNode, (, alternate, ), ;, if, (]
[., of, (, type, ), ;, }, for, (, JSType, alternate, :, alternates, ), {, Node, checkerNode, =, createCheckerNode, (]
[), ;, }, for, (, JSType, alternate, :, alternates, ), {, Node, checkerNode, =, createCheckerNode, (, alternate, ), ;, if]
[), {, Node, checkerNode, =, createCheckerNode, (, alternate, ), ;, if, (, checkerNode, ==, null, ), {, return, null, ;]
[;, if, (, checkerNode, ==, null, ), {, return, null, ;, }, arrayNode, ., addChildToBack, (, checkerNode, ), ;, }]
[), ;, if, (, checkerNode, ==, null, ), {, return, null, ;, }, arrayNode, ., addChildToBack, (, checkerNode, ), ;]
[), {, return, null, ;, }, arrayNode, ., addChildToBack, (, checkerNode, ), ;, }, return, IR, ., call, (, jsCode]
[==, null, ), {, return, null, ;, }, arrayNode, ., addChildToBack, (, checkerNode, ), ;, }, return, IR, ., call]
[), {, return, null, ;, }, arrayNode, ., addChildToBack, (, checkerNode, ), ;, }, return, IR, ., call, (, jsCode]
[;, }, arrayNode, ., addChildToBack, (, checkerNode, ), ;, }, return, IR, ., call, (, jsCode, (, "checkType", ), ,]
[;, }, return, IR, ., call, (, jsCode, (, "checkType", ), ,, expr, ,, arrayNode, ), ;, }, private, Node]
[., addChildToBack, (, checkerNode, ), ;, }, return, IR, ., call, (, jsCode, (, "checkType", ), ,, expr, ,, arrayNode]
[), ;, }, return, IR, ., call, (, jsCode, (, "checkType", ), ,, expr, ,, arrayNode, ), ;, }, private]
[;, }, private, Node, createCheckerNode, (, JSType, type, ), {, if, (, type, ., isNullType, (, ), ), {, return]
[., call, (, jsCode, (, "checkType", ), ,, expr, ,, arrayNode, ), ;, }, private, Node, createCheckerNode, (, JSType, type]
[,, expr, ,, arrayNode, ), ;, }, private, Node, createCheckerNode, (, JSType, type, ), {, if, (, type, ., isNullType]
[), ,, expr, ,, arrayNode, ), ;, }, private, Node, createCheckerNode, (, JSType, type, ), {, if, (, type, .]
[,, arrayNode, ), ;, }, private, Node, createCheckerNode, (, JSType, type, ), {, if, (, type, ., isNullType, (, )]
[), ;, }, private, Node, createCheckerNode, (, JSType, type, ), {, if, (, type, ., isNullType, (, ), ), {]
[), {, return, jsCode, (, "nullChecker", ), ;, }, else, if, (, type, ., isBooleanValueType, (, ), ||, type, .]
[., isNullType, (, ), ), {, return, jsCode, (, "nullChecker", ), ;, }, else, if, (, type, ., isBooleanValueType, (]
[;, }, else, if, (, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType]
[), ;, }, else, if, (, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, .]
[), {, return, IR, ., call, (, jsCode, (, "valueChecker", ), ,, IR, ., string, (, type, ., toString, (]
[||, type, ., isVoidType, (, ), ), {, return, IR, ., call, (, jsCode, (, "valueChecker", ), ,, IR, .]
[||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return, IR, ., call, (, jsCode]
[||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {]
[., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType]
[||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return, IR, ., call, (, jsCode]
[., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return, IR]
[||, type, ., isVoidType, (, ), ), {, return, IR, ., call, (, jsCode, (, "valueChecker", ), ,, IR, .]
[., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return, IR, ., call, (, jsCode, (, "valueChecker"]
[), {, return, IR, ., call, (, jsCode, (, "valueChecker", ), ,, IR, ., string, (, type, ., toString, (]
[., isVoidType, (, ), ), {, return, IR, ., call, (, jsCode, (, "valueChecker", ), ,, IR, ., string, (]
[;, }, else, if, (, type, ., isInstanceType, (, ), ), {, ObjectType, objType, =, (, ObjectType, ), type, ;]
[., call, (, jsCode, (, "valueChecker", ), ,, IR, ., string, (, type, ., toString, (, ), ), ), ;]
[,, IR, ., string, (, type, ., toString, (, ), ), ), ;, }, else, if, (, type, ., isInstanceType]
[), ,, IR, ., string, (, type, ., toString, (, ), ), ), ;, }, else, if, (, type, .]
[), ;, }, else, if, (, type, ., isInstanceType, (, ), ), {, ObjectType, objType, =, (, ObjectType, ), type]
[., string, (, type, ., toString, (, ), ), ), ;, }, else, if, (, type, ., isInstanceType, (, )]
[), ), ;, }, else, if, (, type, ., isInstanceType, (, ), ), {, ObjectType, objType, =, (, ObjectType, )]
[., toString, (, ), ), ), ;, }, else, if, (, type, ., isInstanceType, (, ), ), {, ObjectType, objType]
[), {, ObjectType, objType, =, (, ObjectType, ), type, ;, String, refName, =, objType, ., getReferenceName, (, ), ;, StaticSourceFile]
[., isInstanceType, (, ), ), {, ObjectType, objType, =, (, ObjectType, ), type, ;, String, refName, =, objType, ., getReferenceName]
[;, String, refName, =, objType, ., getReferenceName, (, ), ;, StaticSourceFile, sourceFile, =, NodeUtil, ., getSourceFile, (, objType, ., getConstructor]
[;, String, refName, =, objType, ., getReferenceName, (, ), ;, StaticSourceFile, sourceFile, =, NodeUtil, ., getSourceFile, (, objType, ., getConstructor]
[;, StaticSourceFile, sourceFile, =, NodeUtil, ., getSourceFile, (, objType, ., getConstructor, (, ), ., getSource, (, ), ), ;, if]
[., getReferenceName, (, ), ;, StaticSourceFile, sourceFile, =, NodeUtil, ., getSourceFile, (, objType, ., getConstructor, (, ), ., getSource, (]
[;, if, (, sourceFile, ==, null, ||, sourceFile, ., isExtern, (, ), ), {, return, IR, ., call, (, jsCode]
[., getSourceFile, (, objType, ., getConstructor, (, ), ., getSource, (, ), ), ;, if, (, sourceFile, ==, null, ||]
[), ;, if, (, sourceFile, ==, null, ||, sourceFile, ., isExtern, (, ), ), {, return, IR, ., call, (]
[., getSource, (, ), ), ;, if, (, sourceFile, ==, null, ||, sourceFile, ., isExtern, (, ), ), {, return]
[., getConstructor, (, ), ., getSource, (, ), ), ;, if, (, sourceFile, ==, null, ||, sourceFile, ., isExtern, (]
[), {, return, IR, ., call, (, jsCode, (, "externClassChecker", ), ,, IR, ., string, (, refName, ), ), ;]
[||, sourceFile, ., isExtern, (, ), ), {, return, IR, ., call, (, jsCode, (, "externClassChecker", ), ,, IR, .]
[==, null, ||, sourceFile, ., isExtern, (, ), ), {, return, IR, ., call, (, jsCode, (, "externClassChecker", ), ,]
[||, sourceFile, ., isExtern, (, ), ), {, return, IR, ., call, (, jsCode, (, "externClassChecker", ), ,, IR, .]
[), {, return, IR, ., call, (, jsCode, (, "externClassChecker", ), ,, IR, ., string, (, refName, ), ), ;]
[., isExtern, (, ), ), {, return, IR, ., call, (, jsCode, (, "externClassChecker", ), ,, IR, ., string, (]
[;, }, return, IR, ., call, (, jsCode, (, objType, ., getConstructor, (, ), ., isInterface, (, ), ?, "interfaceChecker"]
[., call, (, jsCode, (, "externClassChecker", ), ,, IR, ., string, (, refName, ), ), ;, }, return, IR, .]
[,, IR, ., string, (, refName, ), ), ;, }, return, IR, ., call, (, jsCode, (, objType, ., getConstructor]
[), ,, IR, ., string, (, refName, ), ), ;, }, return, IR, ., call, (, jsCode, (, objType, .]
[), ;, }, return, IR, ., call, (, jsCode, (, objType, ., getConstructor, (, ), ., isInterface, (, ), ?]
[., string, (, refName, ), ), ;, }, return, IR, ., call, (, jsCode, (, objType, ., getConstructor, (, )]
[), ), ;, }, return, IR, ., call, (, jsCode, (, objType, ., getConstructor, (, ), ., isInterface, (, )]
[;, }, else, {, return, null, ;, }, }, }, private, void, addBoilerplateCode, (, ), {, Node, newNode, =, compiler]
[., call, (, jsCode, (, objType, ., getConstructor, (, ), ., isInterface, (, ), ?, "interfaceChecker", :, "classChecker", ), ,]
[,, IR, ., string, (, refName, ), ), ;, }, else, {, return, null, ;, }, }, }, private, void]
[), ,, IR, ., string, (, refName, ), ), ;, }, else, {, return, null, ;, }, }, }, private]
[?, "interfaceChecker", :, "classChecker", ), ,, IR, ., string, (, refName, ), ), ;, }, else, {, return, null, ;]
[., isInterface, (, ), ?, "interfaceChecker", :, "classChecker", ), ,, IR, ., string, (, refName, ), ), ;, }, else]
[., getConstructor, (, ), ., isInterface, (, ), ?, "interfaceChecker", :, "classChecker", ), ,, IR, ., string, (, refName, )]
[:, "classChecker", ), ,, IR, ., string, (, refName, ), ), ;, }, else, {, return, null, ;, }, }]
[), ,, IR, ., string, (, refName, ), ), ;, }, else, {, return, null, ;, }, }, }, private]
[), ;, }, else, {, return, null, ;, }, }, }, private, void, addBoilerplateCode, (, ), {, Node, newNode, =]
[., string, (, refName, ), ), ;, }, else, {, return, null, ;, }, }, }, private, void, addBoilerplateCode, (]
[), ), ;, }, else, {, return, null, ;, }, }, }, private, void, addBoilerplateCode, (, ), {, Node, newNode]
[;, }, }, }, private, void, addBoilerplateCode, (, ), {, Node, newNode, =, compiler, ., ensureLibraryInjected, (, "runtime_type_check", ), ;]
[;, if, (, newNode, !=, null, &&, logFunction, !=, null, ), {, Node, logOverride, =, IR, ., exprResult, (, IR]
[., ensureLibraryInjected, (, "runtime_type_check", ), ;, if, (, newNode, !=, null, &&, logFunction, !=, null, ), {, Node, logOverride, =]
[), ;, if, (, newNode, !=, null, &&, logFunction, !=, null, ), {, Node, logOverride, =, IR, ., exprResult, (]
[), {, Node, logOverride, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention]
[&&, logFunction, !=, null, ), {, Node, logOverride, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode]
[!=, null, &&, logFunction, !=, null, ), {, Node, logOverride, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil]
[&&, logFunction, !=, null, ), {, Node, logOverride, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode]
[), {, Node, logOverride, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention]
[!=, null, ), {, Node, logOverride, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler]
[), {, Node, logOverride, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention]
[;, newNode, ., getParent, (, ), ., addChildAfter, (, logOverride, ,, newNode, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.log", ), ,]
[), ;, newNode, ., getParent, (, ), ., addChildAfter, (, logOverride, ,, newNode, ), ;, compiler, ., reportCodeChange, (, )]
[., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.log", ), ,, NodeUtil, ., newQualifiedNameNode, (]
[,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, logFunction, ), ), ), ;, newNode, ., getParent, (]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.log", ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (]
[,, "$jscomp.typecheck.log", ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, logFunction, ), ), ), ;, newNode]
[., getCodingConvention, (, ), ,, "$jscomp.typecheck.log", ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, logFunction, )]
[), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, logFunction, ), ), ), ;, newNode, ., getParent]
[), ), ;, newNode, ., getParent, (, ), ., addChildAfter, (, logOverride, ,, newNode, ), ;, compiler, ., reportCodeChange, (]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, logFunction, ), ), ), ;, newNode, ., getParent, (, ), .]
[,, logFunction, ), ), ), ;, newNode, ., getParent, (, ), ., addChildAfter, (, logOverride, ,, newNode, ), ;, compiler]
[., getCodingConvention, (, ), ,, logFunction, ), ), ), ;, newNode, ., getParent, (, ), ., addChildAfter, (, logOverride, ,]
[), ), ), ;, newNode, ., getParent, (, ), ., addChildAfter, (, logOverride, ,, newNode, ), ;, compiler, ., reportCodeChange]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, jsCode, (, String, prop, ), {, return, NodeUtil, .]
[., addChildAfter, (, logOverride, ,, newNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, jsCode, (]
[., getParent, (, ), ., addChildAfter, (, logOverride, ,, newNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[,, newNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, jsCode, (, String, prop, ), {]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, jsCode, (, String, prop, ), {, return, NodeUtil]
[;, }, }, private, Node, jsCode, (, String, prop, ), {, return, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (]
[., reportCodeChange, (, ), ;, }, }, private, Node, jsCode, (, String, prop, ), {, return, NodeUtil, ., newQualifiedNameNode, (]
[;, }, }]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.", +, prop, ), ;, }, }]
[,, "$jscomp.typecheck.", +, prop, ), ;, }, }]
[., getCodingConvention, (, ), ,, "$jscomp.typecheck.", +, prop, ), ;, }, }]
[), ;, }, }]
[+, prop, ), ;, }, }]
[), ;, }, }]
