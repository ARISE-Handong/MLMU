[;, private, final, DctNormalization, normalization, ;, public, FastCosineTransformer, (, final, DctNormalization, normalization, ), {, this, ., normalization, =, normalization, ;]
[=, normalization, ;, }, public, double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, )]
[., normalization, =, normalization, ;, }, public, double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType]
[;, }, public, double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), throws, MathIllegalArgumentException]
[), {, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0]
[==, TransformType, ., FORWARD, ), {, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =, FastMath]
[), {, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0]
[., FORWARD, ), {, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =, FastMath, ., sqrt]
[), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, (, f, ., length, -, 1, ), )]
[==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, (, f, ., length]
[), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, (, f, ., length, -, 1, ), )]
[., ORTHOGONAL_DCT_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, (, f, ., length, -, 1]
[;, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,, s, ), ;, }, return, fct, (, f, )]
[., sqrt, (, 2.0, /, (, f, ., length, -, 1, ), ), ;, return, TransformUtils, ., scaleArray, (, fct]
[), ;, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,, s, ), ;, }, return, fct, (, f]
[/, (, f, ., length, -, 1, ), ), ;, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,]
[), ;, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,, s, ), ;, }, return, fct, (, f]
[), ), ;, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,, s, ), ;, }, return, fct, (]
[-, 1, ), ), ;, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,, s, ), ;, }, return]
[., length, -, 1, ), ), ;, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,, s, ), ;]
[), ), ;, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,, s, ), ;, }, return, fct, (]
[;, }, return, fct, (, f, ), ;, }, final, double, s2, =, 2.0, /, (, f, ., length, -]
[., scaleArray, (, fct, (, f, ), ,, s, ), ;, }, return, fct, (, f, ), ;, }, final]
[,, s, ), ;, }, return, fct, (, f, ), ;, }, final, double, s2, =, 2.0, /, (, f]
[), ,, s, ), ;, }, return, fct, (, f, ), ;, }, final, double, s2, =, 2.0, /, (]
[), ;, }, return, fct, (, f, ), ;, }, final, double, s2, =, 2.0, /, (, f, ., length]
[;, }, final, double, s2, =, 2.0, /, (, f, ., length, -, 1, ), ;, final, double, s1, ;]
[), ;, }, final, double, s2, =, 2.0, /, (, f, ., length, -, 1, ), ;, final, double, s1]
[;, final, double, s1, ;, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, s1, =, FastMath, ., sqrt, (]
[/, (, f, ., length, -, 1, ), ;, final, double, s1, ;, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I]
[;, final, double, s1, ;, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, s1, =, FastMath, ., sqrt, (]
[), ;, final, double, s1, ;, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, s1, =, FastMath, ., sqrt]
[-, 1, ), ;, final, double, s1, ;, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, s1, =, FastMath]
[., length, -, 1, ), ;, final, double, s1, ;, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, s1]
[), ;, final, double, s1, ;, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, s1, =, FastMath, ., sqrt]
[), {, s1, =, FastMath, ., sqrt, (, s2, ), ;, }, else, {, s1, =, s2, ;, }, return]
[==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, s1, =, FastMath, ., sqrt, (, s2, ), ;, }, else, {, s1, =]
[), {, s1, =, FastMath, ., sqrt, (, s2, ), ;, }, else, {, s1, =, s2, ;, }, return]
[., ORTHOGONAL_DCT_I, ), {, s1, =, FastMath, ., sqrt, (, s2, ), ;, }, else, {, s1, =, s2, ;]
[=, FastMath, ., sqrt, (, s2, ), ;, }, else, {, s1, =, s2, ;, }, return, TransformUtils, ., scaleArray]
[;, }, else, {, s1, =, s2, ;, }, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,, s1]
[., sqrt, (, s2, ), ;, }, else, {, s1, =, s2, ;, }, return, TransformUtils, ., scaleArray, (, fct]
[), ;, }, else, {, s1, =, s2, ;, }, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,]
[=, s2, ;, }, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,, s1, ), ;, }, public, double]
[;, }, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,, s1, ), ;, }, public, double, [, ]]
[;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,, final, double, max, ,]
[., scaleArray, (, fct, (, f, ), ,, s1, ), ;, }, public, double, [, ], transform, (, final, UnivariateFunction]
[,, s1, ), ;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,, final]
[), ,, s1, ), ;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,]
[), ;, }, public, double, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,, final, double, max]
[;, return, transform, (, data, ,, type, ), ;, }, protected, double, [, ], fct, (, double, [, ], f]
[., sample, (, f, ,, min, ,, max, ,, n, ), ;, return, transform, (, data, ,, type, ), ;]
[,, min, ,, max, ,, n, ), ;, return, transform, (, data, ,, type, ), ;, }, protected, double, []
[,, max, ,, n, ), ;, return, transform, (, data, ,, type, ), ;, }, protected, double, [, ], fct]
[,, n, ), ;, return, transform, (, data, ,, type, ), ;, }, protected, double, [, ], fct, (, double]
[), ;, return, transform, (, data, ,, type, ), ;, }, protected, double, [, ], fct, (, double, [, ]]
[;, }, protected, double, [, ], fct, (, double, [, ], f, ), throws, MathIllegalArgumentException, {, final, double, [, ]]
[,, type, ), ;, }, protected, double, [, ], fct, (, double, [, ], f, ), throws, MathIllegalArgumentException, {, final]
[), ;, }, protected, double, [, ], fct, (, double, [, ], f, ), throws, MathIllegalArgumentException, {, final, double, []
[;, final, int, n, =, f, ., length, -, 1, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, )]
[], ;, final, int, n, =, f, ., length, -, 1, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n]
[., length, ], ;, final, int, n, =, f, ., length, -, 1, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo]
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_PLUS_ONE, ,]
[-, 1, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, .]
[., length, -, 1, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (]
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_PLUS_ONE, ,]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_PLUS_ONE, ,, Integer, ., valueOf, (, f, ., length, ), ), ;]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_PLUS_ONE, ,, Integer, ., valueOf, (, f, ., length, ), ), ;]
[., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_PLUS_ONE, ,, Integer, ., valueOf, (, f]
[), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_PLUS_ONE, ,, Integer, ., valueOf, (, f, ., length, ), )]
[;, }, if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.5, *, (, f, [, 0]
[,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (, n, ==, 1, ), {, transformed]
[., NOT_POWER_OF_TWO_PLUS_ONE, ,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (, n, ==, 1, )]
[), ;, }, if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.5, *, (, f, []
[., valueOf, (, f, ., length, ), ), ;, }, if, (, n, ==, 1, ), {, transformed, [, 0]
[), ), ;, }, if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.5, *, (, f]
[., length, ), ), ;, }, if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.5, *]
[), {, transformed, [, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, 1, ], )]
[==, 1, ), {, transformed, [, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, 1]
[), {, transformed, [, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, 1, ], )]
[=, 0.5, *, (, f, [, 0, ], +, f, [, 1, ], ), ;, transformed, [, 1, ], =]
[[, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, 1, ], ), ;, transformed, []
[], =, 0.5, *, (, f, [, 0, ], +, f, [, 1, ], ), ;, transformed, [, 1, ]]
[;, transformed, [, 1, ], =, 0.5, *, (, f, [, 0, ], -, f, [, 1, ], ), ;]
[*, (, f, [, 0, ], +, f, [, 1, ], ), ;, transformed, [, 1, ], =, 0.5, *]
[;, transformed, [, 1, ], =, 0.5, *, (, f, [, 0, ], -, f, [, 1, ], ), ;]
[), ;, transformed, [, 1, ], =, 0.5, *, (, f, [, 0, ], -, f, [, 1, ], )]
[+, f, [, 1, ], ), ;, transformed, [, 1, ], =, 0.5, *, (, f, [, 0, ], -]
[[, 0, ], +, f, [, 1, ], ), ;, transformed, [, 1, ], =, 0.5, *, (, f, []
[], +, f, [, 1, ], ), ;, transformed, [, 1, ], =, 0.5, *, (, f, [, 0, ]]
[), ;, transformed, [, 1, ], =, 0.5, *, (, f, [, 0, ], -, f, [, 1, ], )]
[[, 1, ], ), ;, transformed, [, 1, ], =, 0.5, *, (, f, [, 0, ], -, f, []
[], ), ;, transformed, [, 1, ], =, 0.5, *, (, f, [, 0, ], -, f, [, 1, ]]
[=, 0.5, *, (, f, [, 0, ], -, f, [, 1, ], ), ;, return, transformed, ;, }, final]
[[, 1, ], =, 0.5, *, (, f, [, 0, ], -, f, [, 1, ], ), ;, return, transformed]
[], =, 0.5, *, (, f, [, 0, ], -, f, [, 1, ], ), ;, return, transformed, ;, }]
[;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0]
[*, (, f, [, 0, ], -, f, [, 1, ], ), ;, return, transformed, ;, }, final, double, []
[;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0]
[), ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x, []
[-, f, [, 1, ], ), ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, []
[[, 0, ], -, f, [, 1, ], ), ;, return, transformed, ;, }, final, double, [, ], x, =]
[], -, f, [, 1, ], ), ;, return, transformed, ;, }, final, double, [, ], x, =, new, double]
[), ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x, []
[[, 1, ], ), ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ]]
[], ), ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x]
[;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =, 0.5]
[;, x, [, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, n, ], ), ;]
[], ;, x, [, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, n, ], )]
[=, 0.5, *, (, f, [, 0, ], +, f, [, n, ], ), ;, x, [, n, >, >]
[[, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, n, ], ), ;, x, []
[], =, 0.5, *, (, f, [, 0, ], +, f, [, n, ], ), ;, x, [, n, >]
[;, x, [, n, >, >, 1, ], =, f, [, n, >, >, 1, ], ;, double, t1, =]
[*, (, f, [, 0, ], +, f, [, n, ], ), ;, x, [, n, >, >, 1, ]]
[;, x, [, n, >, >, 1, ], =, f, [, n, >, >, 1, ], ;, double, t1, =]
[), ;, x, [, n, >, >, 1, ], =, f, [, n, >, >, 1, ], ;, double, t1]
[+, f, [, n, ], ), ;, x, [, n, >, >, 1, ], =, f, [, n, >, >]
[[, 0, ], +, f, [, n, ], ), ;, x, [, n, >, >, 1, ], =, f, []
[], +, f, [, n, ], ), ;, x, [, n, >, >, 1, ], =, f, [, n, >]
[), ;, x, [, n, >, >, 1, ], =, f, [, n, >, >, 1, ], ;, double, t1]
[[, n, ], ), ;, x, [, n, >, >, 1, ], =, f, [, n, >, >, 1, ]]
[], ), ;, x, [, n, >, >, 1, ], =, f, [, n, >, >, 1, ], ;, double]
[=, f, [, n, >, >, 1, ], ;, double, t1, =, 0.5, *, (, f, [, 0, ], -]
[[, n, >, >, 1, ], =, f, [, n, >, >, 1, ], ;, double, t1, =, 0.5, *]
[], =, f, [, n, >, >, 1, ], ;, double, t1, =, 0.5, *, (, f, [, 0, ]]
[>, >, 1, ], =, f, [, n, >, >, 1, ], ;, double, t1, =, 0.5, *, (, f]
[], =, f, [, n, >, >, 1, ], ;, double, t1, =, 0.5, *, (, f, [, 0, ]]
[;, double, t1, =, 0.5, *, (, f, [, 0, ], -, f, [, n, ], ), ;, for, (]
[[, n, >, >, 1, ], ;, double, t1, =, 0.5, *, (, f, [, 0, ], -, f, []
[], ;, double, t1, =, 0.5, *, (, f, [, 0, ], -, f, [, n, ], ), ;, for]
[>, >, 1, ], ;, double, t1, =, 0.5, *, (, f, [, 0, ], -, f, [, n, ]]
[], ;, double, t1, =, 0.5, *, (, f, [, 0, ], -, f, [, n, ], ), ;, for]
[;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, )]
[*, (, f, [, 0, ], -, f, [, n, ], ), ;, for, (, int, i, =, 1, ;]
[;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, )]
[), ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++]
[-, f, [, n, ], ), ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >]
[[, 0, ], -, f, [, n, ], ), ;, for, (, int, i, =, 1, ;, i, <, (]
[], -, f, [, n, ], ), ;, for, (, int, i, =, 1, ;, i, <, (, n, >]
[), ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++]
[[, n, ], ), ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, )]
[], ), ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i]
[;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, 0.5, *]
[;, i, ++, ), {, final, double, a, =, 0.5, *, (, f, [, i, ], +, f, [, n]
[<, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, 0.5, *, (, f]
[;, i, ++, ), {, final, double, a, =, 0.5, *, (, f, [, i, ], +, f, [, n]
[), ;, i, ++, ), {, final, double, a, =, 0.5, *, (, f, [, i, ], +, f, []
[>, >, 1, ), ;, i, ++, ), {, final, double, a, =, 0.5, *, (, f, [, i, ]]
[), ;, i, ++, ), {, final, double, a, =, 0.5, *, (, f, [, i, ], +, f, []
[), {, final, double, a, =, 0.5, *, (, f, [, i, ], +, f, [, n, -, i, ]]
[++, ), {, final, double, a, =, 0.5, *, (, f, [, i, ], +, f, [, n, -, i]
[;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f]
[*, (, f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =, FastMath]
[;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f]
[), ;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (]
[+, f, [, n, -, i, ], ), ;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath]
[[, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =, FastMath, ., sin, (]
[], +, f, [, n, -, i, ], ), ;, final, double, b, =, FastMath, ., sin, (, i, *]
[), ;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (]
[[, n, -, i, ], ), ;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI]
[], ), ;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *]
[-, i, ], ), ;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n]
[], ), ;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *]
[;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n, ), *, (, f]
[*, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, final, double, c, =, FastMath]
[., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -, f, []
[), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, final, double, c, =]
[/, n, ), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, final, double]
[*, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -, f, [, n, -, i, ]]
[/, n, ), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, final, double]
[., PI, /, n, ), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;]
[), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, final, double, c, =]
[;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n, ), *, (, f]
[), ;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n, ), *, (]
[-, f, [, n, -, i, ], ), ;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath]
[[, i, ], -, f, [, n, -, i, ], ), ;, final, double, c, =, FastMath, ., cos, (]
[], -, f, [, n, -, i, ], ), ;, final, double, c, =, FastMath, ., cos, (, i, *]
[), ;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n, ), *, (]
[[, n, -, i, ], ), ;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI]
[], ), ;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n, ), *]
[-, i, ], ), ;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n]
[], ), ;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n, ), *]
[;, x, [, i, ], =, a, -, b, ;, x, [, n, -, i, ], =, a, +, b]
[*, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =]
[., cos, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -, f, []
[), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ]]
[/, n, ), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, x, []
[*, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -, f, [, n, -, i, ]]
[/, n, ), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, x, []
[., PI, /, n, ), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;]
[), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ]]
[;, x, [, i, ], =, a, -, b, ;, x, [, n, -, i, ], =, a, +, b]
[), ;, x, [, i, ], =, a, -, b, ;, x, [, n, -, i, ], =, a, +]
[-, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, -, b, ;, x, []
[[, i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, -, b]
[], -, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, -, b, ;, x]
[), ;, x, [, i, ], =, a, -, b, ;, x, [, n, -, i, ], =, a, +]
[[, n, -, i, ], ), ;, x, [, i, ], =, a, -, b, ;, x, [, n, -]
[], ), ;, x, [, i, ], =, a, -, b, ;, x, [, n, -, i, ], =, a]
[-, i, ], ), ;, x, [, i, ], =, a, -, b, ;, x, [, n, -, i, ]]
[], ), ;, x, [, i, ], =, a, -, b, ;, x, [, n, -, i, ], =, a]
[=, a, -, b, ;, x, [, n, -, i, ], =, a, +, b, ;, t1, +=, c, ;]
[[, i, ], =, a, -, b, ;, x, [, n, -, i, ], =, a, +, b, ;, t1]
[], =, a, -, b, ;, x, [, n, -, i, ], =, a, +, b, ;, t1, +=, c]
[;, x, [, n, -, i, ], =, a, +, b, ;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;]
[-, b, ;, x, [, n, -, i, ], =, a, +, b, ;, t1, +=, c, ;, }, FastFourierTransformer]
[;, x, [, n, -, i, ], =, a, +, b, ;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;]
[=, a, +, b, ;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, .]
[[, n, -, i, ], =, a, +, b, ;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;, transformer, =]
[], =, a, +, b, ;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization]
[-, i, ], =, a, +, b, ;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer]
[], =, a, +, b, ;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization]
[;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex]
[+, b, ;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, )]
[;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex]
[+=, c, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ]]
[;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =]
[=, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,]
[;, Complex, [, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0]
[), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, []
[., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;]
[;, transformed, [, 0, ], =, y, [, 0, ], ., getReal, (, ), ;, transformed, [, 1, ], =]
[., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, y, [, 0, ], .]
[,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, y, [, 0, ], ., getReal, (, ), ;]
[), ;, transformed, [, 0, ], =, y, [, 0, ], ., getReal, (, ), ;, transformed, [, 1, ]]
[., FORWARD, ), ;, transformed, [, 0, ], =, y, [, 0, ], ., getReal, (, ), ;, transformed, []
[=, y, [, 0, ], ., getReal, (, ), ;, transformed, [, 1, ], =, t1, ;, for, (, int]
[[, 0, ], =, y, [, 0, ], ., getReal, (, ), ;, transformed, [, 1, ], =, t1, ;]
[], =, y, [, 0, ], ., getReal, (, ), ;, transformed, [, 1, ], =, t1, ;, for, (]
[;, transformed, [, 1, ], =, t1, ;, for, (, int, i, =, 1, ;, i, <, (, n, >]
[., getReal, (, ), ;, transformed, [, 1, ], =, t1, ;, for, (, int, i, =, 1, ;, i]
[[, 0, ], ., getReal, (, ), ;, transformed, [, 1, ], =, t1, ;, for, (, int, i, =]
[], ., getReal, (, ), ;, transformed, [, 1, ], =, t1, ;, for, (, int, i, =, 1, ;]
[=, t1, ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i]
[[, 1, ], =, t1, ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1]
[], =, t1, ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;]
[;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, )]
[;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ]]
[;, i, ++, ), {, transformed, [, 2, *, i, ], =, y, [, i, ], ., getReal, (, )]
[<, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ], =, y]
[;, i, ++, ), {, transformed, [, 2, *, i, ], =, y, [, i, ], ., getReal, (, )]
[), ;, i, ++, ), {, transformed, [, 2, *, i, ], =, y, [, i, ], ., getReal, (]
[>, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ], =, y, [, i, ]]
[), ;, i, ++, ), {, transformed, [, 2, *, i, ], =, y, [, i, ], ., getReal, (]
[), {, transformed, [, 2, *, i, ], =, y, [, i, ], ., getReal, (, ), ;, transformed, []
[++, ), {, transformed, [, 2, *, i, ], =, y, [, i, ], ., getReal, (, ), ;, transformed]
[=, y, [, i, ], ., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =, transformed]
[[, 2, *, i, ], =, y, [, i, ], ., getReal, (, ), ;, transformed, [, 2, *, i]
[], =, y, [, i, ], ., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =]
[*, i, ], =, y, [, i, ], ., getReal, (, ), ;, transformed, [, 2, *, i, +, 1]
[], =, y, [, i, ], ., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =]
[;, transformed, [, 2, *, i, +, 1, ], =, transformed, [, 2, *, i, -, 1, ], -, y]
[., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =, transformed, [, 2, *, i, -]
[[, i, ], ., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =, transformed, [, 2]
[], ., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =, transformed, [, 2, *, i]
[=, transformed, [, 2, *, i, -, 1, ], -, y, [, i, ], ., getImaginary, (, ), ;, }]
[[, 2, *, i, +, 1, ], =, transformed, [, 2, *, i, -, 1, ], -, y, [, i]
[], =, transformed, [, 2, *, i, -, 1, ], -, y, [, i, ], ., getImaginary, (, ), ;]
[+, 1, ], =, transformed, [, 2, *, i, -, 1, ], -, y, [, i, ], ., getImaginary, (]
[*, i, +, 1, ], =, transformed, [, 2, *, i, -, 1, ], -, y, [, i, ], .]
[+, 1, ], =, transformed, [, 2, *, i, -, 1, ], -, y, [, i, ], ., getImaginary, (]
[], =, transformed, [, 2, *, i, -, 1, ], -, y, [, i, ], ., getImaginary, (, ), ;]
[;, }, transformed, [, n, ], =, y, [, n, >, >, 1, ], ., getReal, (, ), ;, return]
[-, y, [, i, ], ., getImaginary, (, ), ;, }, transformed, [, n, ], =, y, [, n, >]
[[, 2, *, i, -, 1, ], -, y, [, i, ], ., getImaginary, (, ), ;, }, transformed, []
[], -, y, [, i, ], ., getImaginary, (, ), ;, }, transformed, [, n, ], =, y, [, n]
[-, 1, ], -, y, [, i, ], ., getImaginary, (, ), ;, }, transformed, [, n, ], =, y]
[*, i, -, 1, ], -, y, [, i, ], ., getImaginary, (, ), ;, }, transformed, [, n, ]]
[-, 1, ], -, y, [, i, ], ., getImaginary, (, ), ;, }, transformed, [, n, ], =, y]
[], -, y, [, i, ], ., getImaginary, (, ), ;, }, transformed, [, n, ], =, y, [, n]
[;, }, transformed, [, n, ], =, y, [, n, >, >, 1, ], ., getReal, (, ), ;, return]
[., getImaginary, (, ), ;, }, transformed, [, n, ], =, y, [, n, >, >, 1, ], ., getReal]
[[, i, ], ., getImaginary, (, ), ;, }, transformed, [, n, ], =, y, [, n, >, >, 1]
[], ., getImaginary, (, ), ;, }, transformed, [, n, ], =, y, [, n, >, >, 1, ], .]
[=, y, [, n, >, >, 1, ], ., getReal, (, ), ;, return, transformed, ;, }, }]
[[, n, ], =, y, [, n, >, >, 1, ], ., getReal, (, ), ;, return, transformed, ;, }]
[], =, y, [, n, >, >, 1, ], ., getReal, (, ), ;, return, transformed, ;, }, }]
[;, return, transformed, ;, }, }]
[., getReal, (, ), ;, return, transformed, ;, }, }]
[[, n, >, >, 1, ], ., getReal, (, ), ;, return, transformed, ;, }, }]
[], ., getReal, (, ), ;, return, transformed, ;, }, }]
[>, >, 1, ], ., getReal, (, ), ;, return, transformed, ;, }, }]
[], ., getReal, (, ), ;, return, transformed, ;, }, }]
[;, }, }]
