[;, private, static, final, double, DEFAULT_KHI, =, 2, ;, private, static, final, double, DEFAULT_GAMMA, =, 0.5, ;, private, static, final]
[;, private, static, final, double, DEFAULT_GAMMA, =, 0.5, ;, private, static, final, double, DEFAULT_SIGMA, =, 0.5, ;, private, final, double]
[;, private, static, final, double, DEFAULT_SIGMA, =, 0.5, ;, private, final, double, rho, ;, private, final, double, khi, ;, private]
[;, private, final, double, rho, ;, private, final, double, khi, ;, private, final, double, gamma, ;, private, final, double, sigma]
[,, 1d, ), ;, }, public, NelderMeadSimplex, (, final, int, n, ,, double, sideLength, ), {, this, (, n, ,]
[), ;, }, public, NelderMeadSimplex, (, final, int, n, ,, double, sideLength, ), {, this, (, n, ,, sideLength, ,]
[,, sideLength, ,, DEFAULT_RHO, ,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ,, DEFAULT_SIGMA, ), ;, }, public, NelderMeadSimplex, (, final, int, n, ,]
[,, DEFAULT_RHO, ,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ,, DEFAULT_SIGMA, ), ;, }, public, NelderMeadSimplex, (, final, int, n, ,, double, sideLength]
[,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ,, DEFAULT_SIGMA, ), ;, }, public, NelderMeadSimplex, (, final, int, n, ,, double, sideLength, ,, final]
[,, DEFAULT_GAMMA, ,, DEFAULT_SIGMA, ), ;, }, public, NelderMeadSimplex, (, final, int, n, ,, double, sideLength, ,, final, double, rho]
[,, DEFAULT_SIGMA, ), ;, }, public, NelderMeadSimplex, (, final, int, n, ,, double, sideLength, ,, final, double, rho, ,, final]
[), ;, }, public, NelderMeadSimplex, (, final, int, n, ,, double, sideLength, ,, final, double, rho, ,, final, double, khi]
[,, sideLength, ), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =]
[), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;]
[=, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma]
[., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma]
[;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }]
[=, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }, public, NelderMeadSimplex, (, final]
[., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }, public, NelderMeadSimplex]
[;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }, public, NelderMeadSimplex, (, final, int, n]
[=, gamma, ;, this, ., sigma, =, sigma, ;, }, public, NelderMeadSimplex, (, final, int, n, ,, final, double, rho]
[., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }, public, NelderMeadSimplex, (, final, int, n, ,, final]
[;, this, ., sigma, =, sigma, ;, }, public, NelderMeadSimplex, (, final, int, n, ,, final, double, rho, ,, final]
[=, sigma, ;, }, public, NelderMeadSimplex, (, final, int, n, ,, final, double, rho, ,, final, double, khi, ,, final]
[., sigma, =, sigma, ;, }, public, NelderMeadSimplex, (, final, int, n, ,, final, double, rho, ,, final, double, khi]
[;, }, public, NelderMeadSimplex, (, final, int, n, ,, final, double, rho, ,, final, double, khi, ,, final, double, gamma]
[,, 1d, ,, rho, ,, khi, ,, gamma, ,, sigma, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ]]
[,, rho, ,, khi, ,, gamma, ,, sigma, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, )]
[,, khi, ,, gamma, ,, sigma, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, ), {, this]
[,, gamma, ,, sigma, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, ), {, this, (, steps]
[,, sigma, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, ), {, this, (, steps, ,, DEFAULT_RHO]
[), ;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, ), {, this, (, steps, ,, DEFAULT_RHO, ,, DEFAULT_KHI]
[,, DEFAULT_RHO, ,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ,, DEFAULT_SIGMA, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, ,]
[,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ,, DEFAULT_SIGMA, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, ,, final, double]
[,, DEFAULT_GAMMA, ,, DEFAULT_SIGMA, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, ,, final, double, rho, ,]
[,, DEFAULT_SIGMA, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, ,, final, double, rho, ,, final, double]
[), ;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, ,, final, double, rho, ,, final, double, khi, ,]
[), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;]
[=, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma]
[., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma]
[;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }]
[=, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }, public, NelderMeadSimplex, (, final]
[., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }, public, NelderMeadSimplex]
[;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }, public, NelderMeadSimplex, (, final, double, []
[=, gamma, ;, this, ., sigma, =, sigma, ;, }, public, NelderMeadSimplex, (, final, double, [, ], [, ], referenceSimplex]
[., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }, public, NelderMeadSimplex, (, final, double, [, ], []
[;, this, ., sigma, =, sigma, ;, }, public, NelderMeadSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {]
[=, sigma, ;, }, public, NelderMeadSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, this, (, referenceSimplex, ,]
[., sigma, =, sigma, ;, }, public, NelderMeadSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, this, (]
[;, }, public, NelderMeadSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, this, (, referenceSimplex, ,, DEFAULT_RHO, ,]
[,, DEFAULT_RHO, ,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ,, DEFAULT_SIGMA, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], [, ]]
[,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ,, DEFAULT_SIGMA, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], [, ], referenceSimplex, ,]
[,, DEFAULT_GAMMA, ,, DEFAULT_SIGMA, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], [, ], referenceSimplex, ,, final, double]
[,, DEFAULT_SIGMA, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], [, ], referenceSimplex, ,, final, double, rho, ,]
[), ;, }, public, NelderMeadSimplex, (, final, double, [, ], [, ], referenceSimplex, ,, final, double, rho, ,, final, double]
[), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;]
[=, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma]
[., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma]
[;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }]
[=, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }, @, Override, public, void]
[., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }, @, Override]
[;, this, ., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }, @, Override, public, void, iterate, (]
[=, gamma, ;, this, ., sigma, =, sigma, ;, }, @, Override, public, void, iterate, (, final, MultivariateFunction, evaluationFunction, ,]
[., gamma, =, gamma, ;, this, ., sigma, =, sigma, ;, }, @, Override, public, void, iterate, (, final, MultivariateFunction]
[;, this, ., sigma, =, sigma, ;, }, @, Override, public, void, iterate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator]
[=, sigma, ;, }, @, Override, public, void, iterate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator]
[., sigma, =, sigma, ;, }, @, Override, public, void, iterate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair]
[;, }, @, Override, public, void, iterate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator, ), {]
[;, final, PointValuePair, best, =, getPoint, (, 0, ), ;, final, PointValuePair, secondBest, =, getPoint, (, n, -, 1, )]
[;, final, PointValuePair, secondBest, =, getPoint, (, n, -, 1, ), ;, final, PointValuePair, worst, =, getPoint, (, n, )]
[), ;, final, PointValuePair, secondBest, =, getPoint, (, n, -, 1, ), ;, final, PointValuePair, worst, =, getPoint, (, n]
[;, final, PointValuePair, worst, =, getPoint, (, n, ), ;, final, double, [, ], xWorst, =, worst, ., getPointRef, (]
[), ;, final, PointValuePair, worst, =, getPoint, (, n, ), ;, final, double, [, ], xWorst, =, worst, ., getPointRef]
[-, 1, ), ;, final, PointValuePair, worst, =, getPoint, (, n, ), ;, final, double, [, ], xWorst, =, worst]
[), ;, final, PointValuePair, worst, =, getPoint, (, n, ), ;, final, double, [, ], xWorst, =, worst, ., getPointRef]
[;, final, double, [, ], xWorst, =, worst, ., getPointRef, (, ), ;, final, double, [, ], centroid, =, new]
[), ;, final, double, [, ], xWorst, =, worst, ., getPointRef, (, ), ;, final, double, [, ], centroid, =]
[;, final, double, [, ], centroid, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[., getPointRef, (, ), ;, final, double, [, ], centroid, =, new, double, [, n, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, [, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, []
[;, i, <, n, ;, i, ++, ), {, final, double, [, ], x, =, getPoint, (, i, ), .]
[;, i, ++, ), {, final, double, [, ], x, =, getPoint, (, i, ), ., getPointRef, (, ), ;]
[<, n, ;, i, ++, ), {, final, double, [, ], x, =, getPoint, (, i, ), ., getPointRef, (]
[;, i, ++, ), {, final, double, [, ], x, =, getPoint, (, i, ), ., getPointRef, (, ), ;]
[), {, final, double, [, ], x, =, getPoint, (, i, ), ., getPointRef, (, ), ;, for, (, int]
[++, ), {, final, double, [, ], x, =, getPoint, (, i, ), ., getPointRef, (, ), ;, for, (]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, centroid, [, j, ]]
[., getPointRef, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[), ., getPointRef, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, )]
[;, j, <, n, ;, j, ++, ), {, centroid, [, j, ], +=, x, [, j, ], ;, }]
[;, j, ++, ), {, centroid, [, j, ], +=, x, [, j, ], ;, }, }, final, double, scaling]
[<, n, ;, j, ++, ), {, centroid, [, j, ], +=, x, [, j, ], ;, }, }, final]
[;, j, ++, ), {, centroid, [, j, ], +=, x, [, j, ], ;, }, }, final, double, scaling]
[), {, centroid, [, j, ], +=, x, [, j, ], ;, }, }, final, double, scaling, =, 1.0, /]
[++, ), {, centroid, [, j, ], +=, x, [, j, ], ;, }, }, final, double, scaling, =, 1.0]
[+=, x, [, j, ], ;, }, }, final, double, scaling, =, 1.0, /, n, ;, for, (, int, j]
[[, j, ], +=, x, [, j, ], ;, }, }, final, double, scaling, =, 1.0, /, n, ;, for]
[], +=, x, [, j, ], ;, }, }, final, double, scaling, =, 1.0, /, n, ;, for, (, int]
[;, }, }, final, double, scaling, =, 1.0, /, n, ;, for, (, int, j, =, 0, ;, j, <]
[[, j, ], ;, }, }, final, double, scaling, =, 1.0, /, n, ;, for, (, int, j, =, 0]
[], ;, }, }, final, double, scaling, =, 1.0, /, n, ;, for, (, int, j, =, 0, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, centroid, [, j, ]]
[/, n, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, centroid, []
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, centroid, [, j, ]]
[;, j, <, n, ;, j, ++, ), {, centroid, [, j, ], *=, scaling, ;, }, final, double, []
[;, j, ++, ), {, centroid, [, j, ], *=, scaling, ;, }, final, double, [, ], xR, =, new]
[<, n, ;, j, ++, ), {, centroid, [, j, ], *=, scaling, ;, }, final, double, [, ], xR]
[;, j, ++, ), {, centroid, [, j, ], *=, scaling, ;, }, final, double, [, ], xR, =, new]
[), {, centroid, [, j, ], *=, scaling, ;, }, final, double, [, ], xR, =, new, double, [, n]
[++, ), {, centroid, [, j, ], *=, scaling, ;, }, final, double, [, ], xR, =, new, double, []
[*=, scaling, ;, }, final, double, [, ], xR, =, new, double, [, n, ], ;, for, (, int, j]
[[, j, ], *=, scaling, ;, }, final, double, [, ], xR, =, new, double, [, n, ], ;, for]
[], *=, scaling, ;, }, final, double, [, ], xR, =, new, double, [, n, ], ;, for, (, int]
[;, }, final, double, [, ], xR, =, new, double, [, n, ], ;, for, (, int, j, =, 0]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xR, [, j, ]]
[], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xR, [, j]
[;, j, <, n, ;, j, ++, ), {, xR, [, j, ], =, centroid, [, j, ], +, rho]
[;, j, ++, ), {, xR, [, j, ], =, centroid, [, j, ], +, rho, *, (, centroid, []
[<, n, ;, j, ++, ), {, xR, [, j, ], =, centroid, [, j, ], +, rho, *, (]
[;, j, ++, ), {, xR, [, j, ], =, centroid, [, j, ], +, rho, *, (, centroid, []
[), {, xR, [, j, ], =, centroid, [, j, ], +, rho, *, (, centroid, [, j, ], -]
[++, ), {, xR, [, j, ], =, centroid, [, j, ], +, rho, *, (, centroid, [, j, ]]
[=, centroid, [, j, ], +, rho, *, (, centroid, [, j, ], -, xWorst, [, j, ], ), ;]
[[, j, ], =, centroid, [, j, ], +, rho, *, (, centroid, [, j, ], -, xWorst, [, j]
[], =, centroid, [, j, ], +, rho, *, (, centroid, [, j, ], -, xWorst, [, j, ], )]
[;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value, (, xR, ), ,, false, )]
[+, rho, *, (, centroid, [, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, reflected, =]
[[, j, ], +, rho, *, (, centroid, [, j, ], -, xWorst, [, j, ], ), ;, }, final]
[], +, rho, *, (, centroid, [, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, reflected]
[;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value, (, xR, ), ,, false, )]
[*, (, centroid, [, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, reflected, =, new, PointValuePair]
[;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value, (, xR, ), ,, false, )]
[), ;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value, (, xR, ), ,, false]
[-, xWorst, [, j, ], ), ;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value]
[[, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,]
[], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, .]
[), ;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value, (, xR, ), ,, false]
[[, j, ], ), ;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value, (, xR]
[], ), ;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value, (, xR, ), ,]
[;, if, (, comparator, ., compare, (, best, ,, reflected, ), <=, 0, &&, comparator, ., compare, (, reflected, ,]
[,, evaluationFunction, ., value, (, xR, ), ,, false, ), ;, if, (, comparator, ., compare, (, best, ,, reflected]
[,, false, ), ;, if, (, comparator, ., compare, (, best, ,, reflected, ), <=, 0, &&, comparator, ., compare]
[., value, (, xR, ), ,, false, ), ;, if, (, comparator, ., compare, (, best, ,, reflected, ), <=]
[), ,, false, ), ;, if, (, comparator, ., compare, (, best, ,, reflected, ), <=, 0, &&, comparator, .]
[), ;, if, (, comparator, ., compare, (, best, ,, reflected, ), <=, 0, &&, comparator, ., compare, (, reflected]
[), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, else, if, (, comparator, ., compare, (, reflected, ,, best]
[&&, comparator, ., compare, (, reflected, ,, secondBest, ), <, 0, ), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;]
[<=, 0, &&, comparator, ., compare, (, reflected, ,, secondBest, ), <, 0, ), {, replaceWorstPoint, (, reflected, ,, comparator]
[., compare, (, best, ,, reflected, ), <=, 0, &&, comparator, ., compare, (, reflected, ,, secondBest, ), <, 0]
[,, reflected, ), <=, 0, &&, comparator, ., compare, (, reflected, ,, secondBest, ), <, 0, ), {, replaceWorstPoint, (]
[), <=, 0, &&, comparator, ., compare, (, reflected, ,, secondBest, ), <, 0, ), {, replaceWorstPoint, (, reflected, ,]
[&&, comparator, ., compare, (, reflected, ,, secondBest, ), <, 0, ), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;]
[), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, else, if, (, comparator, ., compare, (, reflected, ,, best]
[<, 0, ), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, else, if, (, comparator, ., compare, (, reflected]
[., compare, (, reflected, ,, secondBest, ), <, 0, ), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, else]
[,, secondBest, ), <, 0, ), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, else, if, (, comparator, .]
[), <, 0, ), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, else, if, (, comparator, ., compare, (]
[), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, else, if, (, comparator, ., compare, (, reflected, ,, best]
[;, }, else, if, (, comparator, ., compare, (, reflected, ,, best, ), <, 0, ), {, final, double, []
[,, comparator, ), ;, }, else, if, (, comparator, ., compare, (, reflected, ,, best, ), <, 0, ), {]
[), ;, }, else, if, (, comparator, ., compare, (, reflected, ,, best, ), <, 0, ), {, final, double]
[), {, final, double, [, ], xE, =, new, double, [, n, ], ;, for, (, int, j, =, 0]
[<, 0, ), {, final, double, [, ], xE, =, new, double, [, n, ], ;, for, (, int, j]
[., compare, (, reflected, ,, best, ), <, 0, ), {, final, double, [, ], xE, =, new, double, []
[,, best, ), <, 0, ), {, final, double, [, ], xE, =, new, double, [, n, ], ;, for]
[), <, 0, ), {, final, double, [, ], xE, =, new, double, [, n, ], ;, for, (, int]
[), {, final, double, [, ], xE, =, new, double, [, n, ], ;, for, (, int, j, =, 0]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xE, [, j, ]]
[], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xE, [, j]
[;, j, <, n, ;, j, ++, ), {, xE, [, j, ], =, centroid, [, j, ], +, khi]
[;, j, ++, ), {, xE, [, j, ], =, centroid, [, j, ], +, khi, *, (, xR, []
[<, n, ;, j, ++, ), {, xE, [, j, ], =, centroid, [, j, ], +, khi, *, (]
[;, j, ++, ), {, xE, [, j, ], =, centroid, [, j, ], +, khi, *, (, xR, []
[), {, xE, [, j, ], =, centroid, [, j, ], +, khi, *, (, xR, [, j, ], -]
[++, ), {, xE, [, j, ], =, centroid, [, j, ], +, khi, *, (, xR, [, j, ]]
[=, centroid, [, j, ], +, khi, *, (, xR, [, j, ], -, centroid, [, j, ], ), ;]
[[, j, ], =, centroid, [, j, ], +, khi, *, (, xR, [, j, ], -, centroid, [, j]
[], =, centroid, [, j, ], +, khi, *, (, xR, [, j, ], -, centroid, [, j, ], )]
[;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, ., value, (, xE, ), ,, false, )]
[+, khi, *, (, xR, [, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, expanded, =]
[[, j, ], +, khi, *, (, xR, [, j, ], -, centroid, [, j, ], ), ;, }, final]
[], +, khi, *, (, xR, [, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, expanded]
[;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, ., value, (, xE, ), ,, false, )]
[*, (, xR, [, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, expanded, =, new, PointValuePair]
[;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, ., value, (, xE, ), ,, false, )]
[), ;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, ., value, (, xE, ), ,, false]
[-, centroid, [, j, ], ), ;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, ., value]
[[, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,]
[], -, centroid, [, j, ], ), ;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, .]
[), ;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, ., value, (, xE, ), ,, false]
[[, j, ], ), ;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, ., value, (, xE]
[], ), ;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, ., value, (, xE, ), ,]
[;, if, (, comparator, ., compare, (, expanded, ,, reflected, ), <, 0, ), {, replaceWorstPoint, (, expanded, ,, comparator]
[,, evaluationFunction, ., value, (, xE, ), ,, false, ), ;, if, (, comparator, ., compare, (, expanded, ,, reflected]
[,, false, ), ;, if, (, comparator, ., compare, (, expanded, ,, reflected, ), <, 0, ), {, replaceWorstPoint, (]
[., value, (, xE, ), ,, false, ), ;, if, (, comparator, ., compare, (, expanded, ,, reflected, ), <]
[), ,, false, ), ;, if, (, comparator, ., compare, (, expanded, ,, reflected, ), <, 0, ), {, replaceWorstPoint]
[), ;, if, (, comparator, ., compare, (, expanded, ,, reflected, ), <, 0, ), {, replaceWorstPoint, (, expanded, ,]
[), {, replaceWorstPoint, (, expanded, ,, comparator, ), ;, }, else, {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }]
[<, 0, ), {, replaceWorstPoint, (, expanded, ,, comparator, ), ;, }, else, {, replaceWorstPoint, (, reflected, ,, comparator, )]
[., compare, (, expanded, ,, reflected, ), <, 0, ), {, replaceWorstPoint, (, expanded, ,, comparator, ), ;, }, else]
[,, reflected, ), <, 0, ), {, replaceWorstPoint, (, expanded, ,, comparator, ), ;, }, else, {, replaceWorstPoint, (, reflected]
[), <, 0, ), {, replaceWorstPoint, (, expanded, ,, comparator, ), ;, }, else, {, replaceWorstPoint, (, reflected, ,, comparator]
[), {, replaceWorstPoint, (, expanded, ,, comparator, ), ;, }, else, {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }]
[;, }, else, {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, }, else, {, if, (, comparator, ., compare]
[,, comparator, ), ;, }, else, {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, }, else, {, if, (]
[), ;, }, else, {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, }, else, {, if, (, comparator, .]
[;, }, }, else, {, if, (, comparator, ., compare, (, reflected, ,, worst, ), <, 0, ), {, final]
[,, comparator, ), ;, }, }, else, {, if, (, comparator, ., compare, (, reflected, ,, worst, ), <, 0]
[), ;, }, }, else, {, if, (, comparator, ., compare, (, reflected, ,, worst, ), <, 0, ), {]
[), {, final, double, [, ], xC, =, new, double, [, n, ], ;, for, (, int, j, =, 0]
[<, 0, ), {, final, double, [, ], xC, =, new, double, [, n, ], ;, for, (, int, j]
[., compare, (, reflected, ,, worst, ), <, 0, ), {, final, double, [, ], xC, =, new, double, []
[,, worst, ), <, 0, ), {, final, double, [, ], xC, =, new, double, [, n, ], ;, for]
[), <, 0, ), {, final, double, [, ], xC, =, new, double, [, n, ], ;, for, (, int]
[), {, final, double, [, ], xC, =, new, double, [, n, ], ;, for, (, int, j, =, 0]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ]]
[], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, [, j]
[;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], +, gamma]
[;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], +, gamma, *, (, xR, []
[<, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], +, gamma, *, (]
[;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], +, gamma, *, (, xR, []
[), {, xC, [, j, ], =, centroid, [, j, ], +, gamma, *, (, xR, [, j, ], -]
[++, ), {, xC, [, j, ], =, centroid, [, j, ], +, gamma, *, (, xR, [, j, ]]
[=, centroid, [, j, ], +, gamma, *, (, xR, [, j, ], -, centroid, [, j, ], ), ;]
[[, j, ], =, centroid, [, j, ], +, gamma, *, (, xR, [, j, ], -, centroid, [, j]
[], =, centroid, [, j, ], +, gamma, *, (, xR, [, j, ], -, centroid, [, j, ], )]
[;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, )]
[+, gamma, *, (, xR, [, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, outContracted, =]
[[, j, ], +, gamma, *, (, xR, [, j, ], -, centroid, [, j, ], ), ;, }, final]
[], +, gamma, *, (, xR, [, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, outContracted]
[;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, )]
[*, (, xR, [, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, outContracted, =, new, PointValuePair]
[;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, )]
[), ;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false]
[-, centroid, [, j, ], ), ;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value]
[[, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,]
[], -, centroid, [, j, ], ), ;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, .]
[), ;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false]
[[, j, ], ), ;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC]
[], ), ;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,]
[;, if, (, comparator, ., compare, (, outContracted, ,, reflected, ), <=, 0, ), {, replaceWorstPoint, (, outContracted, ,, comparator]
[,, evaluationFunction, ., value, (, xC, ), ,, false, ), ;, if, (, comparator, ., compare, (, outContracted, ,, reflected]
[,, false, ), ;, if, (, comparator, ., compare, (, outContracted, ,, reflected, ), <=, 0, ), {, replaceWorstPoint, (]
[., value, (, xC, ), ,, false, ), ;, if, (, comparator, ., compare, (, outContracted, ,, reflected, ), <=]
[), ,, false, ), ;, if, (, comparator, ., compare, (, outContracted, ,, reflected, ), <=, 0, ), {, replaceWorstPoint]
[), ;, if, (, comparator, ., compare, (, outContracted, ,, reflected, ), <=, 0, ), {, replaceWorstPoint, (, outContracted, ,]
[), {, replaceWorstPoint, (, outContracted, ,, comparator, ), ;, return, ;, }, }, else, {, final, double, [, ], xC]
[<=, 0, ), {, replaceWorstPoint, (, outContracted, ,, comparator, ), ;, return, ;, }, }, else, {, final, double, []
[., compare, (, outContracted, ,, reflected, ), <=, 0, ), {, replaceWorstPoint, (, outContracted, ,, comparator, ), ;, return, ;]
[,, reflected, ), <=, 0, ), {, replaceWorstPoint, (, outContracted, ,, comparator, ), ;, return, ;, }, }, else, {]
[), <=, 0, ), {, replaceWorstPoint, (, outContracted, ,, comparator, ), ;, return, ;, }, }, else, {, final, double]
[), {, replaceWorstPoint, (, outContracted, ,, comparator, ), ;, return, ;, }, }, else, {, final, double, [, ], xC]
[;, return, ;, }, }, else, {, final, double, [, ], xC, =, new, double, [, n, ], ;, for]
[,, comparator, ), ;, return, ;, }, }, else, {, final, double, [, ], xC, =, new, double, [, n]
[), ;, return, ;, }, }, else, {, final, double, [, ], xC, =, new, double, [, n, ], ;]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ]]
[], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, [, j]
[;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], -, gamma]
[;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], -, gamma, *, (, centroid, []
[<, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], -, gamma, *, (]
[;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], -, gamma, *, (, centroid, []
[), {, xC, [, j, ], =, centroid, [, j, ], -, gamma, *, (, centroid, [, j, ], -]
[++, ), {, xC, [, j, ], =, centroid, [, j, ], -, gamma, *, (, centroid, [, j, ]]
[=, centroid, [, j, ], -, gamma, *, (, centroid, [, j, ], -, xWorst, [, j, ], ), ;]
[[, j, ], =, centroid, [, j, ], -, gamma, *, (, centroid, [, j, ], -, xWorst, [, j]
[], =, centroid, [, j, ], -, gamma, *, (, centroid, [, j, ], -, xWorst, [, j, ], )]
[;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, )]
[-, gamma, *, (, centroid, [, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, inContracted, =]
[[, j, ], -, gamma, *, (, centroid, [, j, ], -, xWorst, [, j, ], ), ;, }, final]
[], -, gamma, *, (, centroid, [, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, inContracted]
[;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, )]
[*, (, centroid, [, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, inContracted, =, new, PointValuePair]
[;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, )]
[), ;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false]
[-, xWorst, [, j, ], ), ;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value]
[[, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,]
[], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, .]
[), ;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false]
[[, j, ], ), ;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC]
[], ), ;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,]
[;, if, (, comparator, ., compare, (, inContracted, ,, worst, ), <, 0, ), {, replaceWorstPoint, (, inContracted, ,, comparator]
[,, evaluationFunction, ., value, (, xC, ), ,, false, ), ;, if, (, comparator, ., compare, (, inContracted, ,, worst]
[,, false, ), ;, if, (, comparator, ., compare, (, inContracted, ,, worst, ), <, 0, ), {, replaceWorstPoint, (]
[., value, (, xC, ), ,, false, ), ;, if, (, comparator, ., compare, (, inContracted, ,, worst, ), <]
[), ,, false, ), ;, if, (, comparator, ., compare, (, inContracted, ,, worst, ), <, 0, ), {, replaceWorstPoint]
[), ;, if, (, comparator, ., compare, (, inContracted, ,, worst, ), <, 0, ), {, replaceWorstPoint, (, inContracted, ,]
[), {, replaceWorstPoint, (, inContracted, ,, comparator, ), ;, return, ;, }, }, final, double, [, ], xSmallest, =, getPoint]
[<, 0, ), {, replaceWorstPoint, (, inContracted, ,, comparator, ), ;, return, ;, }, }, final, double, [, ], xSmallest]
[., compare, (, inContracted, ,, worst, ), <, 0, ), {, replaceWorstPoint, (, inContracted, ,, comparator, ), ;, return, ;]
[,, worst, ), <, 0, ), {, replaceWorstPoint, (, inContracted, ,, comparator, ), ;, return, ;, }, }, final, double]
[), <, 0, ), {, replaceWorstPoint, (, inContracted, ,, comparator, ), ;, return, ;, }, }, final, double, [, ]]
[), {, replaceWorstPoint, (, inContracted, ,, comparator, ), ;, return, ;, }, }, final, double, [, ], xSmallest, =, getPoint]
[;, return, ;, }, }, final, double, [, ], xSmallest, =, getPoint, (, 0, ), ., getPointRef, (, ), ;]
[,, comparator, ), ;, return, ;, }, }, final, double, [, ], xSmallest, =, getPoint, (, 0, ), ., getPointRef]
[), ;, return, ;, }, }, final, double, [, ], xSmallest, =, getPoint, (, 0, ), ., getPointRef, (, )]
[;, for, (, int, i, =, 1, ;, i, <=, n, ;, i, ++, ), {, final, double, [, ]]
[., getPointRef, (, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, i, ++, ), {]
[), ., getPointRef, (, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, i, ++, )]
[;, i, <=, n, ;, i, ++, ), {, final, double, [, ], x, =, getPoint, (, i, ), .]
[;, i, ++, ), {, final, double, [, ], x, =, getPoint, (, i, ), ., getPoint, (, ), ;]
[<=, n, ;, i, ++, ), {, final, double, [, ], x, =, getPoint, (, i, ), ., getPoint, (]
[;, i, ++, ), {, final, double, [, ], x, =, getPoint, (, i, ), ., getPoint, (, ), ;]
[), {, final, double, [, ], x, =, getPoint, (, i, ), ., getPoint, (, ), ;, for, (, int]
[++, ), {, final, double, [, ], x, =, getPoint, (, i, ), ., getPoint, (, ), ;, for, (]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, x, [, j, ]]
[., getPoint, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[), ., getPoint, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, )]
[;, j, <, n, ;, j, ++, ), {, x, [, j, ], =, xSmallest, [, j, ], +, sigma]
[;, j, ++, ), {, x, [, j, ], =, xSmallest, [, j, ], +, sigma, *, (, x, []
[<, n, ;, j, ++, ), {, x, [, j, ], =, xSmallest, [, j, ], +, sigma, *, (]
[;, j, ++, ), {, x, [, j, ], =, xSmallest, [, j, ], +, sigma, *, (, x, []
[), {, x, [, j, ], =, xSmallest, [, j, ], +, sigma, *, (, x, [, j, ], -]
[++, ), {, x, [, j, ], =, xSmallest, [, j, ], +, sigma, *, (, x, [, j, ]]
[=, xSmallest, [, j, ], +, sigma, *, (, x, [, j, ], -, xSmallest, [, j, ], ), ;]
[[, j, ], =, xSmallest, [, j, ], +, sigma, *, (, x, [, j, ], -, xSmallest, [, j]
[], =, xSmallest, [, j, ], +, sigma, *, (, x, [, j, ], -, xSmallest, [, j, ], )]
[;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,, Double, ., NaN, ,, false, ), ), ;, }]
[+, sigma, *, (, x, [, j, ], -, xSmallest, [, j, ], ), ;, }, setPoint, (, i, ,]
[[, j, ], +, sigma, *, (, x, [, j, ], -, xSmallest, [, j, ], ), ;, }, setPoint]
[], +, sigma, *, (, x, [, j, ], -, xSmallest, [, j, ], ), ;, }, setPoint, (, i]
[;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,, Double, ., NaN, ,, false, ), ), ;, }]
[*, (, x, [, j, ], -, xSmallest, [, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair]
[;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,, Double, ., NaN, ,, false, ), ), ;, }]
[), ;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,, Double, ., NaN, ,, false, ), ), ;]
[-, xSmallest, [, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,, Double, ., NaN]
[[, j, ], -, xSmallest, [, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,]
[], -, xSmallest, [, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,, Double, .]
[), ;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,, Double, ., NaN, ,, false, ), ), ;]
[[, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,, Double, ., NaN, ,, false]
[], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,, Double, ., NaN, ,, false, ), )]
[;, }, evaluate, (, evaluationFunction, ,, comparator, ), ;, }, }, }]
[,, new, PointValuePair, (, x, ,, Double, ., NaN, ,, false, ), ), ;, }, evaluate, (, evaluationFunction, ,, comparator]
[), ;, }, evaluate, (, evaluationFunction, ,, comparator, ), ;, }, }, }]
[,, Double, ., NaN, ,, false, ), ), ;, }, evaluate, (, evaluationFunction, ,, comparator, ), ;, }, }, }]
[,, false, ), ), ;, }, evaluate, (, evaluationFunction, ,, comparator, ), ;, }, }, }]
[., NaN, ,, false, ), ), ;, }, evaluate, (, evaluationFunction, ,, comparator, ), ;, }, }, }]
[), ), ;, }, evaluate, (, evaluationFunction, ,, comparator, ), ;, }, }, }]
[;, }, }, }]
[,, comparator, ), ;, }, }, }]
[), ;, }, }, }]
