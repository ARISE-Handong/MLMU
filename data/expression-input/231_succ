[public, class, VarargCapturingMatcher, <, T, >, extends, ArgumentMatcher, <, T, >, implements, CapturesArguments, ,, VarargMatcher, ,, Serializable, {, private, static]
[), public, class, VarargCapturingMatcher, <, T, >, extends, ArgumentMatcher, <, T, >, implements, CapturesArguments, ,, VarargMatcher, ,, Serializable, {, private]
[;, private, final, LinkedList, <, List, <, T, >, >, arguments, =, new, LinkedList, <, List, <, T, >, >]
[;, public, boolean, matches, (, Object, argument, ), {, return, true, ;, }, public, void, describeTo, (, Description, description, )]
[;, }, public, void, describeTo, (, Description, description, ), {, description, ., appendText, (, "<Capturing variable argument>", ), ;, }, public, List]
[;, }, public, List, <, T, >, getLastVarargs, (, ), {, if, (, arguments, ., isEmpty, (, ), ), {]
[., appendText, (, "<Capturing variable argument>", ), ;, }, public, List, <, T, >, getLastVarargs, (, ), {, if, (, arguments, .]
[), ;, }, public, List, <, T, >, getLastVarargs, (, ), {, if, (, arguments, ., isEmpty, (, ), )]
[), {, new, Reporter, (, ), ., noArgumentValueWasCaptured, (, ), ;, return, null, ;, }, else, {, return, arguments, .]
[., isEmpty, (, ), ), {, new, Reporter, (, ), ., noArgumentValueWasCaptured, (, ), ;, return, null, ;, }, else]
[;, return, null, ;, }, else, {, return, arguments, ., getLast, (, ), ;, }, }, public, List, <, List]
[., noArgumentValueWasCaptured, (, ), ;, return, null, ;, }, else, {, return, arguments, ., getLast, (, ), ;, }, }]
[;, }, else, {, return, arguments, ., getLast, (, ), ;, }, }, public, List, <, List, <, T, >]
[;, }, }, public, List, <, List, <, T, >, >, getAllVarargs, (, ), {, return, arguments, ;, }, public]
[., getLast, (, ), ;, }, }, public, List, <, List, <, T, >, >, getAllVarargs, (, ), {, return]
[;, }, public, void, captureFrom, (, Object, varArgArray, ), {, List, <, T, >, vararg, =, unpackAsList, (, varArgArray, )]
[;, this, ., arguments, ., add, (, vararg, ), ;, }, private, List, <, T, >, unpackAsList, (, Object, varArgArray]
[), ;, this, ., arguments, ., add, (, vararg, ), ;, }, private, List, <, T, >, unpackAsList, (, Object]
[;, }, private, List, <, T, >, unpackAsList, (, Object, varArgArray, ), {, if, (, varArgArray, instanceof, Object, [, ]]
[., add, (, vararg, ), ;, }, private, List, <, T, >, unpackAsList, (, Object, varArgArray, ), {, if, (]
[., arguments, ., add, (, vararg, ), ;, }, private, List, <, T, >, unpackAsList, (, Object, varArgArray, ), {]
[), ;, }, private, List, <, T, >, unpackAsList, (, Object, varArgArray, ), {, if, (, varArgArray, instanceof, Object, []
[), {, return, Arrays, ., asList, (, (, T, [, ], ), varArgArray, ), ;, }, else, if, (, varArgArray]
[instanceof, Object, [, ], ), {, return, Arrays, ., asList, (, (, T, [, ], ), varArgArray, ), ;, }]
[;, }, else, if, (, varArgArray, ., getClass, (, ), ., isArray, (, ), ), {, Object, [, ], primitiveArray]
[., asList, (, (, T, [, ], ), varArgArray, ), ;, }, else, if, (, varArgArray, ., getClass, (, )]
[), ;, }, else, if, (, varArgArray, ., getClass, (, ), ., isArray, (, ), ), {, Object, [, ]]
[), ;, }, else, if, (, varArgArray, ., getClass, (, ), ., isArray, (, ), ), {, Object, [, ]]
[), {, Object, [, ], primitiveArray, =, new, Object, [, Array, ., getLength, (, varArgArray, ), ], ;, for, (]
[., isArray, (, ), ), {, Object, [, ], primitiveArray, =, new, Object, [, Array, ., getLength, (, varArgArray, )]
[., getClass, (, ), ., isArray, (, ), ), {, Object, [, ], primitiveArray, =, new, Object, [, Array, .]
[;, for, (, int, i, =, 0, ;, i, <, primitiveArray, ., length, ;, i, ++, ), {, primitiveArray, []
[], ;, for, (, int, i, =, 0, ;, i, <, primitiveArray, ., length, ;, i, ++, ), {, primitiveArray]
[., getLength, (, varArgArray, ), ], ;, for, (, int, i, =, 0, ;, i, <, primitiveArray, ., length, ;]
[), ], ;, for, (, int, i, =, 0, ;, i, <, primitiveArray, ., length, ;, i, ++, ), {]
[;, i, <, primitiveArray, ., length, ;, i, ++, ), {, primitiveArray, [, i, ], =, Array, ., get, (]
[;, i, ++, ), {, primitiveArray, [, i, ], =, Array, ., get, (, varArgArray, ,, i, ), ;, }]
[<, primitiveArray, ., length, ;, i, ++, ), {, primitiveArray, [, i, ], =, Array, ., get, (, varArgArray, ,]
[;, i, ++, ), {, primitiveArray, [, i, ], =, Array, ., get, (, varArgArray, ,, i, ), ;, }]
[., length, ;, i, ++, ), {, primitiveArray, [, i, ], =, Array, ., get, (, varArgArray, ,, i, )]
[), {, primitiveArray, [, i, ], =, Array, ., get, (, varArgArray, ,, i, ), ;, }, return, Arrays, .]
[++, ), {, primitiveArray, [, i, ], =, Array, ., get, (, varArgArray, ,, i, ), ;, }, return, Arrays]
[=, Array, ., get, (, varArgArray, ,, i, ), ;, }, return, Arrays, ., asList, (, (, T, [, ]]
[[, i, ], =, Array, ., get, (, varArgArray, ,, i, ), ;, }, return, Arrays, ., asList, (, (]
[], =, Array, ., get, (, varArgArray, ,, i, ), ;, }, return, Arrays, ., asList, (, (, T, []
[;, }, return, Arrays, ., asList, (, (, T, [, ], ), primitiveArray, ), ;, }, else, {, return, Collections]
[., get, (, varArgArray, ,, i, ), ;, }, return, Arrays, ., asList, (, (, T, [, ], ), primitiveArray]
[,, i, ), ;, }, return, Arrays, ., asList, (, (, T, [, ], ), primitiveArray, ), ;, }, else]
[), ;, }, return, Arrays, ., asList, (, (, T, [, ], ), primitiveArray, ), ;, }, else, {, return]
[;, }, else, {, return, Collections, ., singletonList, (, (, T, ), varArgArray, ), ;, }, }, }]
[., asList, (, (, T, [, ], ), primitiveArray, ), ;, }, else, {, return, Collections, ., singletonList, (, (]
[), ;, }, else, {, return, Collections, ., singletonList, (, (, T, ), varArgArray, ), ;, }, }, }]
[), ;, }, else, {, return, Collections, ., singletonList, (, (, T, ), varArgArray, ), ;, }, }, }]
[;, }, }, }]
[., singletonList, (, (, T, ), varArgArray, ), ;, }, }, }]
[), ;, }, }, }]
[), ;, }, }, }]
