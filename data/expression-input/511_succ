[;, public, static, final, BigFraction, ONE, =, new, BigFraction, (, 1, ), ;, public, static, final, BigFraction, ZERO, =, new]
[), ;, public, static, final, BigFraction, ONE, =, new, BigFraction, (, 1, ), ;, public, static, final, BigFraction, ZERO, =]
[;, public, static, final, BigFraction, ZERO, =, new, BigFraction, (, 0, ), ;, public, static, final, BigFraction, MINUS_ONE, =, new]
[), ;, public, static, final, BigFraction, ZERO, =, new, BigFraction, (, 0, ), ;, public, static, final, BigFraction, MINUS_ONE, =]
[;, public, static, final, BigFraction, MINUS_ONE, =, new, BigFraction, (, -, 1, ), ;, public, static, final, BigFraction, FOUR_FIFTHS, =]
[), ;, public, static, final, BigFraction, MINUS_ONE, =, new, BigFraction, (, -, 1, ), ;, public, static, final, BigFraction, FOUR_FIFTHS]
[;, public, static, final, BigFraction, FOUR_FIFTHS, =, new, BigFraction, (, 4, ,, 5, ), ;, public, static, final, BigFraction, ONE_FIFTH]
[), ;, public, static, final, BigFraction, FOUR_FIFTHS, =, new, BigFraction, (, 4, ,, 5, ), ;, public, static, final, BigFraction]
[), ;, public, static, final, BigFraction, FOUR_FIFTHS, =, new, BigFraction, (, 4, ,, 5, ), ;, public, static, final, BigFraction]
[;, public, static, final, BigFraction, ONE_FIFTH, =, new, BigFraction, (, 1, ,, 5, ), ;, public, static, final, BigFraction, ONE_HALF]
[,, 5, ), ;, public, static, final, BigFraction, ONE_FIFTH, =, new, BigFraction, (, 1, ,, 5, ), ;, public, static]
[), ;, public, static, final, BigFraction, ONE_FIFTH, =, new, BigFraction, (, 1, ,, 5, ), ;, public, static, final, BigFraction]
[;, public, static, final, BigFraction, ONE_HALF, =, new, BigFraction, (, 1, ,, 2, ), ;, public, static, final, BigFraction, ONE_QUARTER]
[,, 5, ), ;, public, static, final, BigFraction, ONE_HALF, =, new, BigFraction, (, 1, ,, 2, ), ;, public, static]
[), ;, public, static, final, BigFraction, ONE_HALF, =, new, BigFraction, (, 1, ,, 2, ), ;, public, static, final, BigFraction]
[;, public, static, final, BigFraction, ONE_QUARTER, =, new, BigFraction, (, 1, ,, 4, ), ;, public, static, final, BigFraction, ONE_THIRD]
[,, 2, ), ;, public, static, final, BigFraction, ONE_QUARTER, =, new, BigFraction, (, 1, ,, 4, ), ;, public, static]
[), ;, public, static, final, BigFraction, ONE_QUARTER, =, new, BigFraction, (, 1, ,, 4, ), ;, public, static, final, BigFraction]
[;, public, static, final, BigFraction, ONE_THIRD, =, new, BigFraction, (, 1, ,, 3, ), ;, public, static, final, BigFraction, THREE_FIFTHS]
[,, 4, ), ;, public, static, final, BigFraction, ONE_THIRD, =, new, BigFraction, (, 1, ,, 3, ), ;, public, static]
[), ;, public, static, final, BigFraction, ONE_THIRD, =, new, BigFraction, (, 1, ,, 3, ), ;, public, static, final, BigFraction]
[;, public, static, final, BigFraction, THREE_FIFTHS, =, new, BigFraction, (, 3, ,, 5, ), ;, public, static, final, BigFraction, THREE_QUARTERS]
[,, 3, ), ;, public, static, final, BigFraction, THREE_FIFTHS, =, new, BigFraction, (, 3, ,, 5, ), ;, public, static]
[), ;, public, static, final, BigFraction, THREE_FIFTHS, =, new, BigFraction, (, 3, ,, 5, ), ;, public, static, final, BigFraction]
[;, public, static, final, BigFraction, THREE_QUARTERS, =, new, BigFraction, (, 3, ,, 4, ), ;, public, static, final, BigFraction, TWO_FIFTHS]
[,, 5, ), ;, public, static, final, BigFraction, THREE_QUARTERS, =, new, BigFraction, (, 3, ,, 4, ), ;, public, static]
[), ;, public, static, final, BigFraction, THREE_QUARTERS, =, new, BigFraction, (, 3, ,, 4, ), ;, public, static, final, BigFraction]
[;, public, static, final, BigFraction, TWO_FIFTHS, =, new, BigFraction, (, 2, ,, 5, ), ;, public, static, final, BigFraction, TWO_QUARTERS]
[,, 4, ), ;, public, static, final, BigFraction, TWO_FIFTHS, =, new, BigFraction, (, 2, ,, 5, ), ;, public, static]
[), ;, public, static, final, BigFraction, TWO_FIFTHS, =, new, BigFraction, (, 2, ,, 5, ), ;, public, static, final, BigFraction]
[;, public, static, final, BigFraction, TWO_QUARTERS, =, new, BigFraction, (, 2, ,, 4, ), ;, public, static, final, BigFraction, TWO_THIRDS]
[,, 5, ), ;, public, static, final, BigFraction, TWO_QUARTERS, =, new, BigFraction, (, 2, ,, 4, ), ;, public, static]
[), ;, public, static, final, BigFraction, TWO_QUARTERS, =, new, BigFraction, (, 2, ,, 4, ), ;, public, static, final, BigFraction]
[;, public, static, final, BigFraction, TWO_THIRDS, =, new, BigFraction, (, 2, ,, 3, ), ;, private, static, final, long, serialVersionUID]
[,, 4, ), ;, public, static, final, BigFraction, TWO_THIRDS, =, new, BigFraction, (, 2, ,, 3, ), ;, private, static]
[), ;, public, static, final, BigFraction, TWO_THIRDS, =, new, BigFraction, (, 2, ,, 3, ), ;, private, static, final, long]
[;, private, static, final, long, serialVersionUID, =, -, 5630213147331578515L, ;, private, static, final, BigInteger, ONE_HUNDRED, =, BigInteger, ., valueOf, (]
[,, 3, ), ;, private, static, final, long, serialVersionUID, =, -, 5630213147331578515L, ;, private, static, final, BigInteger, ONE_HUNDRED, =, BigInteger]
[), ;, private, static, final, long, serialVersionUID, =, -, 5630213147331578515L, ;, private, static, final, BigInteger, ONE_HUNDRED, =, BigInteger, ., valueOf]
[;, private, static, final, BigInteger, ONE_HUNDRED, =, BigInteger, ., valueOf, (, 100, ), ;, private, final, BigInteger, numerator, ;, private]
[;, private, static, final, BigInteger, ONE_HUNDRED, =, BigInteger, ., valueOf, (, 100, ), ;, private, final, BigInteger, numerator, ;, private]
[;, private, final, BigInteger, numerator, ;, private, final, BigInteger, denominator, ;, public, BigFraction, (, final, BigInteger, num, ), {, this]
[., valueOf, (, 100, ), ;, private, final, BigInteger, numerator, ;, private, final, BigInteger, denominator, ;, public, BigFraction, (, final]
[), ;, private, final, BigInteger, numerator, ;, private, final, BigInteger, denominator, ;, public, BigFraction, (, final, BigInteger, num, ), {]
[,, BigInteger, ., ONE, ), ;, }, public, BigFraction, (, BigInteger, num, ,, BigInteger, den, ), {, MathUtils, ., checkNotNull]
[), ;, }, public, BigFraction, (, BigInteger, num, ,, BigInteger, den, ), {, MathUtils, ., checkNotNull, (, num, ,, LocalizedFormats]
[., ONE, ), ;, }, public, BigFraction, (, BigInteger, num, ,, BigInteger, den, ), {, MathUtils, ., checkNotNull, (, num]
[;, MathUtils, ., checkNotNull, (, den, ,, LocalizedFormats, ., DENOMINATOR, ), ;, if, (, BigInteger, ., ZERO, ., equals, (]
[., checkNotNull, (, num, ,, LocalizedFormats, ., NUMERATOR, ), ;, MathUtils, ., checkNotNull, (, den, ,, LocalizedFormats, ., DENOMINATOR, )]
[,, LocalizedFormats, ., NUMERATOR, ), ;, MathUtils, ., checkNotNull, (, den, ,, LocalizedFormats, ., DENOMINATOR, ), ;, if, (, BigInteger]
[), ;, MathUtils, ., checkNotNull, (, den, ,, LocalizedFormats, ., DENOMINATOR, ), ;, if, (, BigInteger, ., ZERO, ., equals]
[., NUMERATOR, ), ;, MathUtils, ., checkNotNull, (, den, ,, LocalizedFormats, ., DENOMINATOR, ), ;, if, (, BigInteger, ., ZERO]
[;, if, (, BigInteger, ., ZERO, ., equals, (, den, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., ZERO_DENOMINATOR]
[., checkNotNull, (, den, ,, LocalizedFormats, ., DENOMINATOR, ), ;, if, (, BigInteger, ., ZERO, ., equals, (, den, )]
[,, LocalizedFormats, ., DENOMINATOR, ), ;, if, (, BigInteger, ., ZERO, ., equals, (, den, ), ), {, throw, new]
[), ;, if, (, BigInteger, ., ZERO, ., equals, (, den, ), ), {, throw, new, ZeroException, (, LocalizedFormats, .]
[., DENOMINATOR, ), ;, if, (, BigInteger, ., ZERO, ., equals, (, den, ), ), {, throw, new, ZeroException, (]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (]
[., equals, (, den, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, if, (, BigInteger]
[., ZERO, ., equals, (, den, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, if]
[), ), {, throw, new, ZeroException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, if, (, BigInteger, ., ZERO, ., equals]
[;, }, if, (, BigInteger, ., ZERO, ., equals, (, num, ), ), {, numerator, =, BigInteger, ., ZERO, ;]
[), ;, }, if, (, BigInteger, ., ZERO, ., equals, (, num, ), ), {, numerator, =, BigInteger, ., ZERO]
[., ZERO_DENOMINATOR, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (, num, ), ), {, numerator, =, BigInteger]
[), {, numerator, =, BigInteger, ., ZERO, ;, denominator, =, BigInteger, ., ONE, ;, }, else, {, final, BigInteger, gcd]
[., equals, (, num, ), ), {, numerator, =, BigInteger, ., ZERO, ;, denominator, =, BigInteger, ., ONE, ;, }]
[., ZERO, ., equals, (, num, ), ), {, numerator, =, BigInteger, ., ZERO, ;, denominator, =, BigInteger, ., ONE]
[), ), {, numerator, =, BigInteger, ., ZERO, ;, denominator, =, BigInteger, ., ONE, ;, }, else, {, final, BigInteger]
[=, BigInteger, ., ZERO, ;, denominator, =, BigInteger, ., ONE, ;, }, else, {, final, BigInteger, gcd, =, num, .]
[;, denominator, =, BigInteger, ., ONE, ;, }, else, {, final, BigInteger, gcd, =, num, ., gcd, (, den, )]
[., ZERO, ;, denominator, =, BigInteger, ., ONE, ;, }, else, {, final, BigInteger, gcd, =, num, ., gcd, (]
[=, BigInteger, ., ONE, ;, }, else, {, final, BigInteger, gcd, =, num, ., gcd, (, den, ), ;, if]
[;, }, else, {, final, BigInteger, gcd, =, num, ., gcd, (, den, ), ;, if, (, BigInteger, ., ONE]
[., ONE, ;, }, else, {, final, BigInteger, gcd, =, num, ., gcd, (, den, ), ;, if, (, BigInteger]
[;, if, (, BigInteger, ., ONE, ., compareTo, (, gcd, ), <, 0, ), {, num, =, num, ., divide]
[., gcd, (, den, ), ;, if, (, BigInteger, ., ONE, ., compareTo, (, gcd, ), <, 0, ), {]
[), ;, if, (, BigInteger, ., ONE, ., compareTo, (, gcd, ), <, 0, ), {, num, =, num, .]
[), {, num, =, num, ., divide, (, gcd, ), ;, den, =, den, ., divide, (, gcd, ), ;]
[<, 0, ), {, num, =, num, ., divide, (, gcd, ), ;, den, =, den, ., divide, (, gcd]
[., compareTo, (, gcd, ), <, 0, ), {, num, =, num, ., divide, (, gcd, ), ;, den, =]
[., ONE, ., compareTo, (, gcd, ), <, 0, ), {, num, =, num, ., divide, (, gcd, ), ;]
[), <, 0, ), {, num, =, num, ., divide, (, gcd, ), ;, den, =, den, ., divide, (]
[), {, num, =, num, ., divide, (, gcd, ), ;, den, =, den, ., divide, (, gcd, ), ;]
[=, num, ., divide, (, gcd, ), ;, den, =, den, ., divide, (, gcd, ), ;, }, if, (]
[;, den, =, den, ., divide, (, gcd, ), ;, }, if, (, BigInteger, ., ZERO, ., compareTo, (, den]
[., divide, (, gcd, ), ;, den, =, den, ., divide, (, gcd, ), ;, }, if, (, BigInteger, .]
[), ;, den, =, den, ., divide, (, gcd, ), ;, }, if, (, BigInteger, ., ZERO, ., compareTo, (]
[=, den, ., divide, (, gcd, ), ;, }, if, (, BigInteger, ., ZERO, ., compareTo, (, den, ), >]
[;, }, if, (, BigInteger, ., ZERO, ., compareTo, (, den, ), >, 0, ), {, num, =, num, .]
[., divide, (, gcd, ), ;, }, if, (, BigInteger, ., ZERO, ., compareTo, (, den, ), >, 0, )]
[), ;, }, if, (, BigInteger, ., ZERO, ., compareTo, (, den, ), >, 0, ), {, num, =, num]
[), {, num, =, num, ., negate, (, ), ;, den, =, den, ., negate, (, ), ;, }, numerator]
[>, 0, ), {, num, =, num, ., negate, (, ), ;, den, =, den, ., negate, (, ), ;]
[., compareTo, (, den, ), >, 0, ), {, num, =, num, ., negate, (, ), ;, den, =, den]
[., ZERO, ., compareTo, (, den, ), >, 0, ), {, num, =, num, ., negate, (, ), ;, den]
[), >, 0, ), {, num, =, num, ., negate, (, ), ;, den, =, den, ., negate, (, )]
[), {, num, =, num, ., negate, (, ), ;, den, =, den, ., negate, (, ), ;, }, numerator]
[=, num, ., negate, (, ), ;, den, =, den, ., negate, (, ), ;, }, numerator, =, num, ;]
[;, den, =, den, ., negate, (, ), ;, }, numerator, =, num, ;, denominator, =, den, ;, }, }]
[., negate, (, ), ;, den, =, den, ., negate, (, ), ;, }, numerator, =, num, ;, denominator, =]
[=, den, ., negate, (, ), ;, }, numerator, =, num, ;, denominator, =, den, ;, }, }, public, BigFraction]
[;, }, numerator, =, num, ;, denominator, =, den, ;, }, }, public, BigFraction, (, final, double, value, ), throws]
[., negate, (, ), ;, }, numerator, =, num, ;, denominator, =, den, ;, }, }, public, BigFraction, (, final]
[=, num, ;, denominator, =, den, ;, }, }, public, BigFraction, (, final, double, value, ), throws, MathIllegalArgumentException, {, if]
[;, denominator, =, den, ;, }, }, public, BigFraction, (, final, double, value, ), throws, MathIllegalArgumentException, {, if, (, Double]
[=, den, ;, }, }, public, BigFraction, (, final, double, value, ), throws, MathIllegalArgumentException, {, if, (, Double, ., isNaN]
[;, }, }, public, BigFraction, (, final, double, value, ), throws, MathIllegalArgumentException, {, if, (, Double, ., isNaN, (, value]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NAN_VALUE_CONVERSION, ), ;, }, if, (, Double, ., isInfinite, (, value, )]
[., isNaN, (, value, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NAN_VALUE_CONVERSION, ), ;, }, if, (, Double]
[), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NAN_VALUE_CONVERSION, ), ;, }, if, (, Double, ., isInfinite, (, value]
[;, }, if, (, Double, ., isInfinite, (, value, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_VALUE_CONVERSION, )]
[), ;, }, if, (, Double, ., isInfinite, (, value, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_VALUE_CONVERSION]
[., NAN_VALUE_CONVERSION, ), ;, }, if, (, Double, ., isInfinite, (, value, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_VALUE_CONVERSION, ), ;, }, final, long, bits, =, Double, ., doubleToLongBits, (]
[., isInfinite, (, value, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_VALUE_CONVERSION, ), ;, }, final, long, bits]
[), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_VALUE_CONVERSION, ), ;, }, final, long, bits, =, Double, ., doubleToLongBits]
[;, }, final, long, bits, =, Double, ., doubleToLongBits, (, value, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L]
[), ;, }, final, long, bits, =, Double, ., doubleToLongBits, (, value, ), ;, final, long, sign, =, bits, &]
[., INFINITE_VALUE_CONVERSION, ), ;, }, final, long, bits, =, Double, ., doubleToLongBits, (, value, ), ;, final, long, sign, =]
[;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, final, long, exponent, =, bits, &, 0x7ff0000000000000L, ;, long, m, =]
[., doubleToLongBits, (, value, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, final, long, exponent, =, bits, &]
[), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, final, long, exponent, =, bits, &, 0x7ff0000000000000L, ;, long, m]
[;, final, long, exponent, =, bits, &, 0x7ff0000000000000L, ;, long, m, =, bits, &, 0x000fffffffffffffL, ;, if, (, exponent, !=]
[&, 0x8000000000000000L, ;, final, long, exponent, =, bits, &, 0x7ff0000000000000L, ;, long, m, =, bits, &, 0x000fffffffffffffL, ;, if, (]
[;, final, long, exponent, =, bits, &, 0x7ff0000000000000L, ;, long, m, =, bits, &, 0x000fffffffffffffL, ;, if, (, exponent, !=]
[;, long, m, =, bits, &, 0x000fffffffffffffL, ;, if, (, exponent, !=, 0, ), {, m, |=, 0x0010000000000000L, ;, }]
[&, 0x7ff0000000000000L, ;, long, m, =, bits, &, 0x000fffffffffffffL, ;, if, (, exponent, !=, 0, ), {, m, |=, 0x0010000000000000L]
[;, long, m, =, bits, &, 0x000fffffffffffffL, ;, if, (, exponent, !=, 0, ), {, m, |=, 0x0010000000000000L, ;, }]
[;, if, (, exponent, !=, 0, ), {, m, |=, 0x0010000000000000L, ;, }, if, (, sign, !=, 0, ), {]
[&, 0x000fffffffffffffL, ;, if, (, exponent, !=, 0, ), {, m, |=, 0x0010000000000000L, ;, }, if, (, sign, !=, 0]
[;, if, (, exponent, !=, 0, ), {, m, |=, 0x0010000000000000L, ;, }, if, (, sign, !=, 0, ), {]
[), {, m, |=, 0x0010000000000000L, ;, }, if, (, sign, !=, 0, ), {, m, =, -, m, ;, }]
[!=, 0, ), {, m, |=, 0x0010000000000000L, ;, }, if, (, sign, !=, 0, ), {, m, =, -, m]
[), {, m, |=, 0x0010000000000000L, ;, }, if, (, sign, !=, 0, ), {, m, =, -, m, ;, }]
[|=, 0x0010000000000000L, ;, }, if, (, sign, !=, 0, ), {, m, =, -, m, ;, }, int, k, =]
[;, }, if, (, sign, !=, 0, ), {, m, =, -, m, ;, }, int, k, =, (, (]
[), {, m, =, -, m, ;, }, int, k, =, (, (, int, ), (, exponent, >, >, 52]
[!=, 0, ), {, m, =, -, m, ;, }, int, k, =, (, (, int, ), (, exponent, >]
[), {, m, =, -, m, ;, }, int, k, =, (, (, int, ), (, exponent, >, >, 52]
[=, -, m, ;, }, int, k, =, (, (, int, ), (, exponent, >, >, 52, ), ), -]
[;, }, int, k, =, (, (, int, ), (, exponent, >, >, 52, ), ), -, 1075, ;, while]
[;, }, int, k, =, (, (, int, ), (, exponent, >, >, 52, ), ), -, 1075, ;, while]
[;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m, &, 0x1, ), ==]
[-, 1075, ;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m, &, 0x1]
[), -, 1075, ;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m, &]
[), -, 1075, ;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m, &]
[), ), -, 1075, ;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m]
[>, >, 52, ), ), -, 1075, ;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&]
[), ), -, 1075, ;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m]
[;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m, &, 0x1, ), ==]
[), {, m, =, m, >, >, 1, ;, ++, k, ;, }, if, (, k, <, 0, ), {]
[&&, (, (, m, &, 0x1, ), ==, 0, ), ), {, m, =, m, >, >, 1, ;, ++]
[), &&, (, (, m, &, 0x1, ), ==, 0, ), ), {, m, =, m, >, >, 1, ;]
[!=, 0, ), &&, (, (, m, &, 0x1, ), ==, 0, ), ), {, m, =, m, >, >]
[), !=, 0, ), &&, (, (, m, &, 0x1, ), ==, 0, ), ), {, m, =, m, >]
[&, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m, &, 0x1, ), ==, 0, ), ), {, m, =]
[), !=, 0, ), &&, (, (, m, &, 0x1, ), ==, 0, ), ), {, m, =, m, >]
[), &&, (, (, m, &, 0x1, ), ==, 0, ), ), {, m, =, m, >, >, 1, ;]
[), {, m, =, m, >, >, 1, ;, ++, k, ;, }, if, (, k, <, 0, ), {]
[), ), {, m, =, m, >, >, 1, ;, ++, k, ;, }, if, (, k, <, 0, )]
[==, 0, ), ), {, m, =, m, >, >, 1, ;, ++, k, ;, }, if, (, k, <]
[), ==, 0, ), ), {, m, =, m, >, >, 1, ;, ++, k, ;, }, if, (, k]
[&, 0x1, ), ==, 0, ), ), {, m, =, m, >, >, 1, ;, ++, k, ;, }, if]
[), ==, 0, ), ), {, m, =, m, >, >, 1, ;, ++, k, ;, }, if, (, k]
[), ), {, m, =, m, >, >, 1, ;, ++, k, ;, }, if, (, k, <, 0, )]
[=, m, >, >, 1, ;, ++, k, ;, }, if, (, k, <, 0, ), {, numerator, =, BigInteger]
[;, ++, k, ;, }, if, (, k, <, 0, ), {, numerator, =, BigInteger, ., valueOf, (, m, )]
[>, >, 1, ;, ++, k, ;, }, if, (, k, <, 0, ), {, numerator, =, BigInteger, ., valueOf]
[;, ++, k, ;, }, if, (, k, <, 0, ), {, numerator, =, BigInteger, ., valueOf, (, m, )]
[;, }, if, (, k, <, 0, ), {, numerator, =, BigInteger, ., valueOf, (, m, ), ;, denominator, =]
[;, }, if, (, k, <, 0, ), {, numerator, =, BigInteger, ., valueOf, (, m, ), ;, denominator, =]
[), {, numerator, =, BigInteger, ., valueOf, (, m, ), ;, denominator, =, BigInteger, ., ZERO, ., flipBit, (, -]
[<, 0, ), {, numerator, =, BigInteger, ., valueOf, (, m, ), ;, denominator, =, BigInteger, ., ZERO, ., flipBit]
[), {, numerator, =, BigInteger, ., valueOf, (, m, ), ;, denominator, =, BigInteger, ., ZERO, ., flipBit, (, -]
[=, BigInteger, ., valueOf, (, m, ), ;, denominator, =, BigInteger, ., ZERO, ., flipBit, (, -, k, ), ;]
[;, denominator, =, BigInteger, ., ZERO, ., flipBit, (, -, k, ), ;, }, else, {, numerator, =, BigInteger, .]
[., valueOf, (, m, ), ;, denominator, =, BigInteger, ., ZERO, ., flipBit, (, -, k, ), ;, }, else]
[), ;, denominator, =, BigInteger, ., ZERO, ., flipBit, (, -, k, ), ;, }, else, {, numerator, =, BigInteger]
[=, BigInteger, ., ZERO, ., flipBit, (, -, k, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (]
[;, }, else, {, numerator, =, BigInteger, ., valueOf, (, m, ), ., multiply, (, BigInteger, ., ZERO, ., flipBit]
[., flipBit, (, -, k, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, m, ), ., multiply]
[., ZERO, ., flipBit, (, -, k, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, m, )]
[), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, m, ), ., multiply, (, BigInteger, ., ZERO, .]
[), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, m, ), ., multiply, (, BigInteger, ., ZERO, .]
[=, BigInteger, ., valueOf, (, m, ), ., multiply, (, BigInteger, ., ZERO, ., flipBit, (, k, ), ), ;]
[;, denominator, =, BigInteger, ., ONE, ;, }, }, public, BigFraction, (, final, double, value, ,, final, double, epsilon, ,]
[., multiply, (, BigInteger, ., ZERO, ., flipBit, (, k, ), ), ;, denominator, =, BigInteger, ., ONE, ;, }]
[., valueOf, (, m, ), ., multiply, (, BigInteger, ., ZERO, ., flipBit, (, k, ), ), ;, denominator, =]
[), ., multiply, (, BigInteger, ., ZERO, ., flipBit, (, k, ), ), ;, denominator, =, BigInteger, ., ONE, ;]
[), ;, denominator, =, BigInteger, ., ONE, ;, }, }, public, BigFraction, (, final, double, value, ,, final, double, epsilon]
[., flipBit, (, k, ), ), ;, denominator, =, BigInteger, ., ONE, ;, }, }, public, BigFraction, (, final, double]
[., ZERO, ., flipBit, (, k, ), ), ;, denominator, =, BigInteger, ., ONE, ;, }, }, public, BigFraction, (]
[), ), ;, denominator, =, BigInteger, ., ONE, ;, }, }, public, BigFraction, (, final, double, value, ,, final, double]
[=, BigInteger, ., ONE, ;, }, }, public, BigFraction, (, final, double, value, ,, final, double, epsilon, ,, final, int]
[;, }, }, public, BigFraction, (, final, double, value, ,, final, double, epsilon, ,, final, int, maxIterations, ), throws, FractionConversionException]
[., ONE, ;, }, }, public, BigFraction, (, final, double, value, ,, final, double, epsilon, ,, final, int, maxIterations, )]
[,, epsilon, ,, Integer, ., MAX_VALUE, ,, maxIterations, ), ;, }, private, BigFraction, (, final, double, value, ,, final, double]
[,, Integer, ., MAX_VALUE, ,, maxIterations, ), ;, }, private, BigFraction, (, final, double, value, ,, final, double, epsilon, ,]
[,, maxIterations, ), ;, }, private, BigFraction, (, final, double, value, ,, final, double, epsilon, ,, final, int, maxDenominator, ,]
[., MAX_VALUE, ,, maxIterations, ), ;, }, private, BigFraction, (, final, double, value, ,, final, double, epsilon, ,, final, int]
[), ;, }, private, BigFraction, (, final, double, value, ,, final, double, epsilon, ,, final, int, maxDenominator, ,, int, maxIterations]
[;, double, r0, =, value, ;, long, a0, =, (, long, ), FastMath, ., floor, (, r0, ), ;, if]
[., MAX_VALUE, ;, double, r0, =, value, ;, long, a0, =, (, long, ), FastMath, ., floor, (, r0, )]
[;, long, a0, =, (, long, ), FastMath, ., floor, (, r0, ), ;, if, (, a0, >, overflow, )]
[;, if, (, a0, >, overflow, ), {, throw, new, FractionConversionException, (, value, ,, a0, ,, 1l, ), ;, }]
[;, if, (, a0, >, overflow, ), {, throw, new, FractionConversionException, (, value, ,, a0, ,, 1l, ), ;, }]
[., floor, (, r0, ), ;, if, (, a0, >, overflow, ), {, throw, new, FractionConversionException, (, value, ,, a0]
[), ;, if, (, a0, >, overflow, ), {, throw, new, FractionConversionException, (, value, ,, a0, ,, 1l, ), ;]
[), {, throw, new, FractionConversionException, (, value, ,, a0, ,, 1l, ), ;, }, if, (, FastMath, ., abs, (]
[>, overflow, ), {, throw, new, FractionConversionException, (, value, ,, a0, ,, 1l, ), ;, }, if, (, FastMath, .]
[), {, throw, new, FractionConversionException, (, value, ,, a0, ,, 1l, ), ;, }, if, (, FastMath, ., abs, (]
[;, }, if, (, FastMath, ., abs, (, a0, -, value, ), <, epsilon, ), {, numerator, =, BigInteger, .]
[,, a0, ,, 1l, ), ;, }, if, (, FastMath, ., abs, (, a0, -, value, ), <, epsilon, )]
[,, 1l, ), ;, }, if, (, FastMath, ., abs, (, a0, -, value, ), <, epsilon, ), {, numerator]
[), ;, }, if, (, FastMath, ., abs, (, a0, -, value, ), <, epsilon, ), {, numerator, =, BigInteger]
[), {, numerator, =, BigInteger, ., valueOf, (, a0, ), ;, denominator, =, BigInteger, ., ONE, ;, return, ;, }]
[<, epsilon, ), {, numerator, =, BigInteger, ., valueOf, (, a0, ), ;, denominator, =, BigInteger, ., ONE, ;, return]
[., abs, (, a0, -, value, ), <, epsilon, ), {, numerator, =, BigInteger, ., valueOf, (, a0, ), ;]
[), <, epsilon, ), {, numerator, =, BigInteger, ., valueOf, (, a0, ), ;, denominator, =, BigInteger, ., ONE, ;]
[-, value, ), <, epsilon, ), {, numerator, =, BigInteger, ., valueOf, (, a0, ), ;, denominator, =, BigInteger, .]
[), <, epsilon, ), {, numerator, =, BigInteger, ., valueOf, (, a0, ), ;, denominator, =, BigInteger, ., ONE, ;]
[), {, numerator, =, BigInteger, ., valueOf, (, a0, ), ;, denominator, =, BigInteger, ., ONE, ;, return, ;, }]
[=, BigInteger, ., valueOf, (, a0, ), ;, denominator, =, BigInteger, ., ONE, ;, return, ;, }, long, p0, =]
[;, denominator, =, BigInteger, ., ONE, ;, return, ;, }, long, p0, =, 1, ;, long, q0, =, 0, ;]
[., valueOf, (, a0, ), ;, denominator, =, BigInteger, ., ONE, ;, return, ;, }, long, p0, =, 1, ;]
[), ;, denominator, =, BigInteger, ., ONE, ;, return, ;, }, long, p0, =, 1, ;, long, q0, =, 0]
[=, BigInteger, ., ONE, ;, return, ;, }, long, p0, =, 1, ;, long, q0, =, 0, ;, long, p1]
[;, return, ;, }, long, p0, =, 1, ;, long, q0, =, 0, ;, long, p1, =, a0, ;, long]
[., ONE, ;, return, ;, }, long, p0, =, 1, ;, long, q0, =, 0, ;, long, p1, =, a0]
[;, long, q0, =, 0, ;, long, p1, =, a0, ;, long, q1, =, 1, ;, long, p2, =, 0]
[;, long, p1, =, a0, ;, long, q1, =, 1, ;, long, p2, =, 0, ;, long, q2, =, 1]
[;, long, q1, =, 1, ;, long, p2, =, 0, ;, long, q2, =, 1, ;, int, n, =, 0]
[;, long, p2, =, 0, ;, long, q2, =, 1, ;, int, n, =, 0, ;, boolean, stop, =, false]
[;, long, q2, =, 1, ;, int, n, =, 0, ;, boolean, stop, =, false, ;, do, {, ++, n]
[;, int, n, =, 0, ;, boolean, stop, =, false, ;, do, {, ++, n, ;, final, double, r1, =]
[;, boolean, stop, =, false, ;, do, {, ++, n, ;, final, double, r1, =, 1.0, /, (, r0, -]
[;, do, {, ++, n, ;, final, double, r1, =, 1.0, /, (, r0, -, a0, ), ;, final, long]
[;, final, double, r1, =, 1.0, /, (, r0, -, a0, ), ;, final, long, a1, =, (, long, )]
[;, final, double, r1, =, 1.0, /, (, r0, -, a0, ), ;, final, long, a1, =, (, long, )]
[;, final, long, a1, =, (, long, ), FastMath, ., floor, (, r1, ), ;, p2, =, (, a1, *]
[/, (, r0, -, a0, ), ;, final, long, a1, =, (, long, ), FastMath, ., floor, (, r1, )]
[;, final, long, a1, =, (, long, ), FastMath, ., floor, (, r1, ), ;, p2, =, (, a1, *]
[), ;, final, long, a1, =, (, long, ), FastMath, ., floor, (, r1, ), ;, p2, =, (, a1]
[-, a0, ), ;, final, long, a1, =, (, long, ), FastMath, ., floor, (, r1, ), ;, p2, =]
[), ;, final, long, a1, =, (, long, ), FastMath, ., floor, (, r1, ), ;, p2, =, (, a1]
[;, p2, =, (, a1, *, p1, ), +, p0, ;, q2, =, (, a1, *, q1, ), +, q0]
[;, p2, =, (, a1, *, p1, ), +, p0, ;, q2, =, (, a1, *, q1, ), +, q0]
[., floor, (, r1, ), ;, p2, =, (, a1, *, p1, ), +, p0, ;, q2, =, (, a1]
[), ;, p2, =, (, a1, *, p1, ), +, p0, ;, q2, =, (, a1, *, q1, ), +]
[=, (, a1, *, p1, ), +, p0, ;, q2, =, (, a1, *, q1, ), +, q0, ;, if]
[;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (, (, p2, >, overflow, ), ||, (]
[+, p0, ;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (, (, p2, >, overflow, )]
[), +, p0, ;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (, (, p2, >, overflow]
[*, p1, ), +, p0, ;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (, (, p2]
[), +, p0, ;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (, (, p2, >, overflow]
[;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (, (, p2, >, overflow, ), ||, (]
[=, (, a1, *, q1, ), +, q0, ;, if, (, (, p2, >, overflow, ), ||, (, q2, >]
[;, if, (, (, p2, >, overflow, ), ||, (, q2, >, overflow, ), ), {, throw, new, FractionConversionException, (]
[+, q0, ;, if, (, (, p2, >, overflow, ), ||, (, q2, >, overflow, ), ), {, throw, new]
[), +, q0, ;, if, (, (, p2, >, overflow, ), ||, (, q2, >, overflow, ), ), {, throw]
[*, q1, ), +, q0, ;, if, (, (, p2, >, overflow, ), ||, (, q2, >, overflow, ), )]
[), +, q0, ;, if, (, (, p2, >, overflow, ), ||, (, q2, >, overflow, ), ), {, throw]
[;, if, (, (, p2, >, overflow, ), ||, (, q2, >, overflow, ), ), {, throw, new, FractionConversionException, (]
[), {, throw, new, FractionConversionException, (, value, ,, p2, ,, q2, ), ;, }, final, double, convergent, =, (, double]
[||, (, q2, >, overflow, ), ), {, throw, new, FractionConversionException, (, value, ,, p2, ,, q2, ), ;, }]
[), ||, (, q2, >, overflow, ), ), {, throw, new, FractionConversionException, (, value, ,, p2, ,, q2, ), ;]
[>, overflow, ), ||, (, q2, >, overflow, ), ), {, throw, new, FractionConversionException, (, value, ,, p2, ,, q2]
[), ||, (, q2, >, overflow, ), ), {, throw, new, FractionConversionException, (, value, ,, p2, ,, q2, ), ;]
[), {, throw, new, FractionConversionException, (, value, ,, p2, ,, q2, ), ;, }, final, double, convergent, =, (, double]
[), ), {, throw, new, FractionConversionException, (, value, ,, p2, ,, q2, ), ;, }, final, double, convergent, =, (]
[>, overflow, ), ), {, throw, new, FractionConversionException, (, value, ,, p2, ,, q2, ), ;, }, final, double, convergent]
[), ), {, throw, new, FractionConversionException, (, value, ,, p2, ,, q2, ), ;, }, final, double, convergent, =, (]
[;, }, final, double, convergent, =, (, double, ), p2, /, (, double, ), q2, ;, if, (, (, n]
[,, p2, ,, q2, ), ;, }, final, double, convergent, =, (, double, ), p2, /, (, double, ), q2]
[,, q2, ), ;, }, final, double, convergent, =, (, double, ), p2, /, (, double, ), q2, ;, if]
[), ;, }, final, double, convergent, =, (, double, ), p2, /, (, double, ), q2, ;, if, (, (]
[;, if, (, (, n, <, maxIterations, ), &&, (, FastMath, ., abs, (, convergent, -, value, ), >, epsilon]
[/, (, double, ), q2, ;, if, (, (, n, <, maxIterations, ), &&, (, FastMath, ., abs, (, convergent]
[/, (, double, ), q2, ;, if, (, (, n, <, maxIterations, ), &&, (, FastMath, ., abs, (, convergent]
[;, if, (, (, n, <, maxIterations, ), &&, (, FastMath, ., abs, (, convergent, -, value, ), >, epsilon]
[;, if, (, (, n, <, maxIterations, ), &&, (, FastMath, ., abs, (, convergent, -, value, ), >, epsilon]
[), {, p0, =, p1, ;, p1, =, p2, ;, q0, =, q1, ;, q1, =, q2, ;, a0, =]
[&&, (, q2, <, maxDenominator, ), ), {, p0, =, p1, ;, p1, =, p2, ;, q0, =, q1, ;]
[&&, (, FastMath, ., abs, (, convergent, -, value, ), >, epsilon, ), &&, (, q2, <, maxDenominator, ), )]
[), &&, (, FastMath, ., abs, (, convergent, -, value, ), >, epsilon, ), &&, (, q2, <, maxDenominator, )]
[<, maxIterations, ), &&, (, FastMath, ., abs, (, convergent, -, value, ), >, epsilon, ), &&, (, q2, <]
[), &&, (, FastMath, ., abs, (, convergent, -, value, ), >, epsilon, ), &&, (, q2, <, maxDenominator, )]
[&&, (, q2, <, maxDenominator, ), ), {, p0, =, p1, ;, p1, =, p2, ;, q0, =, q1, ;]
[), &&, (, q2, <, maxDenominator, ), ), {, p0, =, p1, ;, p1, =, p2, ;, q0, =, q1]
[>, epsilon, ), &&, (, q2, <, maxDenominator, ), ), {, p0, =, p1, ;, p1, =, p2, ;, q0]
[., abs, (, convergent, -, value, ), >, epsilon, ), &&, (, q2, <, maxDenominator, ), ), {, p0, =]
[), >, epsilon, ), &&, (, q2, <, maxDenominator, ), ), {, p0, =, p1, ;, p1, =, p2, ;]
[-, value, ), >, epsilon, ), &&, (, q2, <, maxDenominator, ), ), {, p0, =, p1, ;, p1, =]
[), >, epsilon, ), &&, (, q2, <, maxDenominator, ), ), {, p0, =, p1, ;, p1, =, p2, ;]
[), &&, (, q2, <, maxDenominator, ), ), {, p0, =, p1, ;, p1, =, p2, ;, q0, =, q1]
[), {, p0, =, p1, ;, p1, =, p2, ;, q0, =, q1, ;, q1, =, q2, ;, a0, =]
[), ), {, p0, =, p1, ;, p1, =, p2, ;, q0, =, q1, ;, q1, =, q2, ;, a0]
[<, maxDenominator, ), ), {, p0, =, p1, ;, p1, =, p2, ;, q0, =, q1, ;, q1, =, q2]
[), ), {, p0, =, p1, ;, p1, =, p2, ;, q0, =, q1, ;, q1, =, q2, ;, a0]
[=, p1, ;, p1, =, p2, ;, q0, =, q1, ;, q1, =, q2, ;, a0, =, a1, ;, r0]
[;, p1, =, p2, ;, q0, =, q1, ;, q1, =, q2, ;, a0, =, a1, ;, r0, =, r1]
[=, p2, ;, q0, =, q1, ;, q1, =, q2, ;, a0, =, a1, ;, r0, =, r1, ;, }]
[;, q0, =, q1, ;, q1, =, q2, ;, a0, =, a1, ;, r0, =, r1, ;, }, else, {]
[=, q1, ;, q1, =, q2, ;, a0, =, a1, ;, r0, =, r1, ;, }, else, {, stop, =]
[;, q1, =, q2, ;, a0, =, a1, ;, r0, =, r1, ;, }, else, {, stop, =, true, ;]
[=, q2, ;, a0, =, a1, ;, r0, =, r1, ;, }, else, {, stop, =, true, ;, }, }]
[;, a0, =, a1, ;, r0, =, r1, ;, }, else, {, stop, =, true, ;, }, }, while, (]
[=, a1, ;, r0, =, r1, ;, }, else, {, stop, =, true, ;, }, }, while, (, !, stop]
[;, r0, =, r1, ;, }, else, {, stop, =, true, ;, }, }, while, (, !, stop, ), ;]
[=, r1, ;, }, else, {, stop, =, true, ;, }, }, while, (, !, stop, ), ;, if, (]
[;, }, else, {, stop, =, true, ;, }, }, while, (, !, stop, ), ;, if, (, n, >=]
[=, true, ;, }, }, while, (, !, stop, ), ;, if, (, n, >=, maxIterations, ), {, throw, new]
[;, }, }, while, (, !, stop, ), ;, if, (, n, >=, maxIterations, ), {, throw, new, FractionConversionException, (]
[), ;, if, (, n, >=, maxIterations, ), {, throw, new, FractionConversionException, (, value, ,, maxIterations, ), ;, }, if]
[), ;, if, (, n, >=, maxIterations, ), {, throw, new, FractionConversionException, (, value, ,, maxIterations, ), ;, }, if]
[), {, throw, new, FractionConversionException, (, value, ,, maxIterations, ), ;, }, if, (, q2, <, maxDenominator, ), {, numerator]
[>=, maxIterations, ), {, throw, new, FractionConversionException, (, value, ,, maxIterations, ), ;, }, if, (, q2, <, maxDenominator, )]
[), {, throw, new, FractionConversionException, (, value, ,, maxIterations, ), ;, }, if, (, q2, <, maxDenominator, ), {, numerator]
[;, }, if, (, q2, <, maxDenominator, ), {, numerator, =, BigInteger, ., valueOf, (, p2, ), ;, denominator, =]
[,, maxIterations, ), ;, }, if, (, q2, <, maxDenominator, ), {, numerator, =, BigInteger, ., valueOf, (, p2, )]
[), ;, }, if, (, q2, <, maxDenominator, ), {, numerator, =, BigInteger, ., valueOf, (, p2, ), ;, denominator]
[), {, numerator, =, BigInteger, ., valueOf, (, p2, ), ;, denominator, =, BigInteger, ., valueOf, (, q2, ), ;]
[<, maxDenominator, ), {, numerator, =, BigInteger, ., valueOf, (, p2, ), ;, denominator, =, BigInteger, ., valueOf, (, q2]
[), {, numerator, =, BigInteger, ., valueOf, (, p2, ), ;, denominator, =, BigInteger, ., valueOf, (, q2, ), ;]
[=, BigInteger, ., valueOf, (, p2, ), ;, denominator, =, BigInteger, ., valueOf, (, q2, ), ;, }, else, {]
[;, denominator, =, BigInteger, ., valueOf, (, q2, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, p1]
[., valueOf, (, p2, ), ;, denominator, =, BigInteger, ., valueOf, (, q2, ), ;, }, else, {, numerator, =]
[), ;, denominator, =, BigInteger, ., valueOf, (, q2, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (]
[=, BigInteger, ., valueOf, (, q2, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, p1, ), ;]
[;, }, else, {, numerator, =, BigInteger, ., valueOf, (, p1, ), ;, denominator, =, BigInteger, ., valueOf, (, q1]
[., valueOf, (, q2, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, p1, ), ;, denominator, =]
[), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, p1, ), ;, denominator, =, BigInteger, ., valueOf, (]
[=, BigInteger, ., valueOf, (, p1, ), ;, denominator, =, BigInteger, ., valueOf, (, q1, ), ;, }, }, public]
[;, denominator, =, BigInteger, ., valueOf, (, q1, ), ;, }, }, public, BigFraction, (, final, double, value, ,, final]
[., valueOf, (, p1, ), ;, denominator, =, BigInteger, ., valueOf, (, q1, ), ;, }, }, public, BigFraction, (]
[), ;, denominator, =, BigInteger, ., valueOf, (, q1, ), ;, }, }, public, BigFraction, (, final, double, value, ,]
[=, BigInteger, ., valueOf, (, q1, ), ;, }, }, public, BigFraction, (, final, double, value, ,, final, int, maxDenominator]
[;, }, }, public, BigFraction, (, final, double, value, ,, final, int, maxDenominator, ), throws, FractionConversionException, {, this, (, value]
[., valueOf, (, q1, ), ;, }, }, public, BigFraction, (, final, double, value, ,, final, int, maxDenominator, ), throws]
[), ;, }, }, public, BigFraction, (, final, double, value, ,, final, int, maxDenominator, ), throws, FractionConversionException, {, this, (]
[,, 0, ,, maxDenominator, ,, 100, ), ;, }, public, BigFraction, (, final, int, num, ), {, this, (, BigInteger]
[,, maxDenominator, ,, 100, ), ;, }, public, BigFraction, (, final, int, num, ), {, this, (, BigInteger, ., valueOf]
[,, 100, ), ;, }, public, BigFraction, (, final, int, num, ), {, this, (, BigInteger, ., valueOf, (, num]
[), ;, }, public, BigFraction, (, final, int, num, ), {, this, (, BigInteger, ., valueOf, (, num, ), ,]
[,, BigInteger, ., ONE, ), ;, }, public, BigFraction, (, final, int, num, ,, final, int, den, ), {, this]
[., valueOf, (, num, ), ,, BigInteger, ., ONE, ), ;, }, public, BigFraction, (, final, int, num, ,, final]
[), ,, BigInteger, ., ONE, ), ;, }, public, BigFraction, (, final, int, num, ,, final, int, den, ), {]
[), ;, }, public, BigFraction, (, final, int, num, ,, final, int, den, ), {, this, (, BigInteger, ., valueOf]
[., ONE, ), ;, }, public, BigFraction, (, final, int, num, ,, final, int, den, ), {, this, (, BigInteger]
[,, BigInteger, ., valueOf, (, den, ), ), ;, }, public, BigFraction, (, final, long, num, ), {, this, (]
[., valueOf, (, num, ), ,, BigInteger, ., valueOf, (, den, ), ), ;, }, public, BigFraction, (, final, long]
[), ,, BigInteger, ., valueOf, (, den, ), ), ;, }, public, BigFraction, (, final, long, num, ), {, this]
[), ;, }, public, BigFraction, (, final, long, num, ), {, this, (, BigInteger, ., valueOf, (, num, ), ,]
[., valueOf, (, den, ), ), ;, }, public, BigFraction, (, final, long, num, ), {, this, (, BigInteger, .]
[), ), ;, }, public, BigFraction, (, final, long, num, ), {, this, (, BigInteger, ., valueOf, (, num, )]
[,, BigInteger, ., ONE, ), ;, }, public, BigFraction, (, final, long, num, ,, final, long, den, ), {, this]
[., valueOf, (, num, ), ,, BigInteger, ., ONE, ), ;, }, public, BigFraction, (, final, long, num, ,, final]
[), ,, BigInteger, ., ONE, ), ;, }, public, BigFraction, (, final, long, num, ,, final, long, den, ), {]
[), ;, }, public, BigFraction, (, final, long, num, ,, final, long, den, ), {, this, (, BigInteger, ., valueOf]
[., ONE, ), ;, }, public, BigFraction, (, final, long, num, ,, final, long, den, ), {, this, (, BigInteger]
[,, BigInteger, ., valueOf, (, den, ), ), ;, }, public, static, BigFraction, getReducedFraction, (, final, int, numerator, ,, final]
[., valueOf, (, num, ), ,, BigInteger, ., valueOf, (, den, ), ), ;, }, public, static, BigFraction, getReducedFraction, (]
[), ,, BigInteger, ., valueOf, (, den, ), ), ;, }, public, static, BigFraction, getReducedFraction, (, final, int, numerator, ,]
[), ;, }, public, static, BigFraction, getReducedFraction, (, final, int, numerator, ,, final, int, denominator, ), {, if, (, numerator]
[., valueOf, (, den, ), ), ;, }, public, static, BigFraction, getReducedFraction, (, final, int, numerator, ,, final, int, denominator]
[), ), ;, }, public, static, BigFraction, getReducedFraction, (, final, int, numerator, ,, final, int, denominator, ), {, if, (]
[), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator, ,, denominator, ), ;, }, public, BigFraction, abs, (]
[==, 0, ), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator, ,, denominator, ), ;, }, public, BigFraction]
[), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator, ,, denominator, ), ;, }, public, BigFraction, abs, (]
[;, }, return, new, BigFraction, (, numerator, ,, denominator, ), ;, }, public, BigFraction, abs, (, ), {, return, (]
[;, }, public, BigFraction, abs, (, ), {, return, (, BigInteger, ., ZERO, ., compareTo, (, numerator, ), <=, 0]
[,, denominator, ), ;, }, public, BigFraction, abs, (, ), {, return, (, BigInteger, ., ZERO, ., compareTo, (, numerator]
[), ;, }, public, BigFraction, abs, (, ), {, return, (, BigInteger, ., ZERO, ., compareTo, (, numerator, ), <=]
[;, }, public, BigFraction, add, (, final, BigInteger, bg, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, bg, ), ;]
[?, this, :, negate, (, ), ;, }, public, BigFraction, add, (, final, BigInteger, bg, ), throws, NullArgumentException, {, MathUtils]
[), ?, this, :, negate, (, ), ;, }, public, BigFraction, add, (, final, BigInteger, bg, ), throws, NullArgumentException, {]
[<=, 0, ), ?, this, :, negate, (, ), ;, }, public, BigFraction, add, (, final, BigInteger, bg, ), throws]
[., compareTo, (, numerator, ), <=, 0, ), ?, this, :, negate, (, ), ;, }, public, BigFraction, add, (]
[., ZERO, ., compareTo, (, numerator, ), <=, 0, ), ?, this, :, negate, (, ), ;, }, public, BigFraction]
[), <=, 0, ), ?, this, :, negate, (, ), ;, }, public, BigFraction, add, (, final, BigInteger, bg, )]
[), ?, this, :, negate, (, ), ;, }, public, BigFraction, add, (, final, BigInteger, bg, ), throws, NullArgumentException, {]
[:, negate, (, ), ;, }, public, BigFraction, add, (, final, BigInteger, bg, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull]
[;, }, public, BigFraction, add, (, final, BigInteger, bg, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, bg, ), ;]
[;, return, new, BigFraction, (, numerator, ., add, (, denominator, ., multiply, (, bg, ), ), ,, denominator, ), ;]
[., checkNotNull, (, bg, ), ;, return, new, BigFraction, (, numerator, ., add, (, denominator, ., multiply, (, bg, )]
[), ;, return, new, BigFraction, (, numerator, ., add, (, denominator, ., multiply, (, bg, ), ), ,, denominator, )]
[;, }, public, BigFraction, add, (, final, int, i, ), {, return, add, (, BigInteger, ., valueOf, (, i, )]
[,, denominator, ), ;, }, public, BigFraction, add, (, final, int, i, ), {, return, add, (, BigInteger, ., valueOf]
[., add, (, denominator, ., multiply, (, bg, ), ), ,, denominator, ), ;, }, public, BigFraction, add, (, final]
[), ,, denominator, ), ;, }, public, BigFraction, add, (, final, int, i, ), {, return, add, (, BigInteger, .]
[., multiply, (, bg, ), ), ,, denominator, ), ;, }, public, BigFraction, add, (, final, int, i, ), {]
[), ), ,, denominator, ), ;, }, public, BigFraction, add, (, final, int, i, ), {, return, add, (, BigInteger]
[), ;, }, public, BigFraction, add, (, final, int, i, ), {, return, add, (, BigInteger, ., valueOf, (, i]
[;, }, public, BigFraction, add, (, final, long, l, ), {, return, add, (, BigInteger, ., valueOf, (, l, )]
[), ;, }, public, BigFraction, add, (, final, long, l, ), {, return, add, (, BigInteger, ., valueOf, (, l]
[., valueOf, (, i, ), ), ;, }, public, BigFraction, add, (, final, long, l, ), {, return, add, (]
[), ), ;, }, public, BigFraction, add, (, final, long, l, ), {, return, add, (, BigInteger, ., valueOf, (]
[;, }, public, BigFraction, add, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new]
[), ;, }, public, BigFraction, add, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw]
[., valueOf, (, l, ), ), ;, }, public, BigFraction, add, (, final, BigFraction, fraction, ), {, if, (, fraction]
[), ), ;, }, public, BigFraction, add, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, ZERO, ., equals, (, fraction, )]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, ZERO, ., equals, (]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, ZERO, ., equals, (, fraction, )]
[;, }, if, (, ZERO, ., equals, (, fraction, ), ), {, return, this, ;, }, BigInteger, num, =, null]
[), ;, }, if, (, ZERO, ., equals, (, fraction, ), ), {, return, this, ;, }, BigInteger, num, =]
[., FRACTION, ), ;, }, if, (, ZERO, ., equals, (, fraction, ), ), {, return, this, ;, }, BigInteger]
[), {, return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (, denominator, .]
[., equals, (, fraction, ), ), {, return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null]
[), ), {, return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (, denominator]
[;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (, fraction, .]
[;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {, num, =]
[;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {, num, =, numerator, ., add, (, fraction]
[), {, num, =, numerator, ., add, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {]
[., equals, (, fraction, ., denominator, ), ), {, num, =, numerator, ., add, (, fraction, ., numerator, ), ;]
[), ), {, num, =, numerator, ., add, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else]
[., denominator, ), ), {, num, =, numerator, ., add, (, fraction, ., numerator, ), ;, den, =, denominator, ;]
[=, numerator, ., add, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (]
[;, den, =, denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), )]
[., add, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (, numerator, .]
[), ;, den, =, denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, )]
[., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, .]
[=, denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., add]
[;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., add, (, (]
[=, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., add, (, (, fraction, ., numerator, ), .]
[;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (, num, ,, den]
[., add, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply]
[), ., add, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =, denominator, .]
[., multiply, (, fraction, ., denominator, ), ), ., add, (, (, fraction, ., numerator, ), ., multiply, (, denominator]
[), ), ., add, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =, denominator]
[., denominator, ), ), ., add, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den]
[), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (, num, ,]
[., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return]
[), ., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }]
[., numerator, ), ., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, )]
[), ), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (, num]
[=, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (, num, ,, den, ), ;]
[;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, public, BigDecimal, bigDecimalValue, (, ), {, return, new]
[., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, public]
[), ;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, public, BigDecimal, bigDecimalValue, (, ), {, return]
[., denominator, ), ;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, public, BigDecimal, bigDecimalValue, (, )]
[;, }, public, BigDecimal, bigDecimalValue, (, ), {, return, new, BigDecimal, (, numerator, ), ., divide, (, new, BigDecimal, (]
[,, den, ), ;, }, public, BigDecimal, bigDecimalValue, (, ), {, return, new, BigDecimal, (, numerator, ), ., divide, (]
[), ;, }, public, BigDecimal, bigDecimalValue, (, ), {, return, new, BigDecimal, (, numerator, ), ., divide, (, new, BigDecimal]
[;, }, public, BigDecimal, bigDecimalValue, (, final, int, roundingMode, ), {, return, new, BigDecimal, (, numerator, ), ., divide, (]
[., divide, (, new, BigDecimal, (, denominator, ), ), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, roundingMode, ), {]
[), ., divide, (, new, BigDecimal, (, denominator, ), ), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, roundingMode, )]
[), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, roundingMode, ), {, return, new, BigDecimal, (, numerator, ), ., divide]
[), ), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, roundingMode, ), {, return, new, BigDecimal, (, numerator, ), .]
[;, }, public, BigDecimal, bigDecimalValue, (, final, int, scale, ,, final, int, roundingMode, ), {, return, new, BigDecimal, (, numerator]
[., divide, (, new, BigDecimal, (, denominator, ), ,, roundingMode, ), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, scale]
[), ., divide, (, new, BigDecimal, (, denominator, ), ,, roundingMode, ), ;, }, public, BigDecimal, bigDecimalValue, (, final, int]
[,, roundingMode, ), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, scale, ,, final, int, roundingMode, ), {, return, new]
[), ,, roundingMode, ), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, scale, ,, final, int, roundingMode, ), {, return]
[), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, scale, ,, final, int, roundingMode, ), {, return, new, BigDecimal, (]
[;, }, public, int, compareTo, (, final, BigFraction, object, ), {, BigInteger, nOd, =, numerator, ., multiply, (, object, .]
[., divide, (, new, BigDecimal, (, denominator, ), ,, scale, ,, roundingMode, ), ;, }, public, int, compareTo, (, final]
[), ., divide, (, new, BigDecimal, (, denominator, ), ,, scale, ,, roundingMode, ), ;, }, public, int, compareTo, (]
[,, scale, ,, roundingMode, ), ;, }, public, int, compareTo, (, final, BigFraction, object, ), {, BigInteger, nOd, =, numerator]
[), ,, scale, ,, roundingMode, ), ;, }, public, int, compareTo, (, final, BigFraction, object, ), {, BigInteger, nOd, =]
[,, roundingMode, ), ;, }, public, int, compareTo, (, final, BigFraction, object, ), {, BigInteger, nOd, =, numerator, ., multiply]
[), ;, }, public, int, compareTo, (, final, BigFraction, object, ), {, BigInteger, nOd, =, numerator, ., multiply, (, object]
[;, BigInteger, dOn, =, denominator, ., multiply, (, object, ., numerator, ), ;, return, nOd, ., compareTo, (, dOn, )]
[., multiply, (, object, ., denominator, ), ;, BigInteger, dOn, =, denominator, ., multiply, (, object, ., numerator, ), ;]
[), ;, BigInteger, dOn, =, denominator, ., multiply, (, object, ., numerator, ), ;, return, nOd, ., compareTo, (, dOn]
[., denominator, ), ;, BigInteger, dOn, =, denominator, ., multiply, (, object, ., numerator, ), ;, return, nOd, ., compareTo]
[;, return, nOd, ., compareTo, (, dOn, ), ;, }, public, BigFraction, divide, (, final, BigInteger, bg, ), {, if]
[., multiply, (, object, ., numerator, ), ;, return, nOd, ., compareTo, (, dOn, ), ;, }, public, BigFraction, divide]
[), ;, return, nOd, ., compareTo, (, dOn, ), ;, }, public, BigFraction, divide, (, final, BigInteger, bg, ), {]
[., numerator, ), ;, return, nOd, ., compareTo, (, dOn, ), ;, }, public, BigFraction, divide, (, final, BigInteger, bg]
[;, }, public, BigFraction, divide, (, final, BigInteger, bg, ), {, if, (, bg, ==, null, ), {, throw, new]
[., compareTo, (, dOn, ), ;, }, public, BigFraction, divide, (, final, BigInteger, bg, ), {, if, (, bg, ==]
[), ;, }, public, BigFraction, divide, (, final, BigInteger, bg, ), {, if, (, bg, ==, null, ), {, throw]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, .]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (]
[;, }, if, (, BigInteger, ., ZERO, ., equals, (, bg, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, .]
[), ;, }, if, (, BigInteger, ., ZERO, ., equals, (, bg, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats]
[., FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (, bg, ), ), {, throw, new, MathArithmeticException]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return, new, BigFraction, (, numerator, ,, denominator, .]
[., equals, (, bg, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return, new, BigFraction]
[., ZERO, ., equals, (, bg, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return]
[), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return, new, BigFraction, (, numerator, ,, denominator]
[;, }, return, new, BigFraction, (, numerator, ,, denominator, ., multiply, (, bg, ), ), ;, }, public, BigFraction, divide]
[), ;, }, return, new, BigFraction, (, numerator, ,, denominator, ., multiply, (, bg, ), ), ;, }, public, BigFraction]
[., ZERO_DENOMINATOR, ), ;, }, return, new, BigFraction, (, numerator, ,, denominator, ., multiply, (, bg, ), ), ;, }]
[;, }, public, BigFraction, divide, (, final, int, i, ), {, return, divide, (, BigInteger, ., valueOf, (, i, )]
[,, denominator, ., multiply, (, bg, ), ), ;, }, public, BigFraction, divide, (, final, int, i, ), {, return]
[), ;, }, public, BigFraction, divide, (, final, int, i, ), {, return, divide, (, BigInteger, ., valueOf, (, i]
[., multiply, (, bg, ), ), ;, }, public, BigFraction, divide, (, final, int, i, ), {, return, divide, (]
[), ), ;, }, public, BigFraction, divide, (, final, int, i, ), {, return, divide, (, BigInteger, ., valueOf, (]
[;, }, public, BigFraction, divide, (, final, long, l, ), {, return, divide, (, BigInteger, ., valueOf, (, l, )]
[), ;, }, public, BigFraction, divide, (, final, long, l, ), {, return, divide, (, BigInteger, ., valueOf, (, l]
[., valueOf, (, i, ), ), ;, }, public, BigFraction, divide, (, final, long, l, ), {, return, divide, (]
[), ), ;, }, public, BigFraction, divide, (, final, long, l, ), {, return, divide, (, BigInteger, ., valueOf, (]
[;, }, public, BigFraction, divide, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new]
[), ;, }, public, BigFraction, divide, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw]
[., valueOf, (, l, ), ), ;, }, public, BigFraction, divide, (, final, BigFraction, fraction, ), {, if, (, fraction]
[), ), ;, }, public, BigFraction, divide, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, .]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (]
[;, }, if, (, BigInteger, ., ZERO, ., equals, (, fraction, ., numerator, ), ), {, throw, new, MathArithmeticException, (]
[), ;, }, if, (, BigInteger, ., ZERO, ., equals, (, fraction, ., numerator, ), ), {, throw, new, MathArithmeticException]
[., FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (, fraction, ., numerator, ), ), {, throw]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return, multiply, (, fraction, ., reciprocal, (, )]
[., equals, (, fraction, ., numerator, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return]
[., ZERO, ., equals, (, fraction, ., numerator, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;]
[), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return, multiply, (, fraction, ., reciprocal, (]
[., numerator, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return, multiply, (, fraction, .]
[;, }, return, multiply, (, fraction, ., reciprocal, (, ), ), ;, }, @, Override, public, double, doubleValue, (, )]
[), ;, }, return, multiply, (, fraction, ., reciprocal, (, ), ), ;, }, @, Override, public, double, doubleValue, (]
[., ZERO_DENOMINATOR, ), ;, }, return, multiply, (, fraction, ., reciprocal, (, ), ), ;, }, @, Override, public, double]
[;, }, @, Override, public, double, doubleValue, (, ), {, double, result, =, numerator, ., doubleValue, (, ), /, denominator]
[), ;, }, @, Override, public, double, doubleValue, (, ), {, double, result, =, numerator, ., doubleValue, (, ), /]
[., reciprocal, (, ), ), ;, }, @, Override, public, double, doubleValue, (, ), {, double, result, =, numerator, .]
[;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (, numerator, .]
[/, denominator, ., doubleValue, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =]
[., doubleValue, (, ), /, denominator, ., doubleValue, (, ), ;, if, (, Double, ., isNaN, (, result, ), )]
[;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (, numerator, .]
[., doubleValue, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =, Math, .]
[), {, int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, )]
[., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,]
[), ), {, int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (]
[;, result, =, numerator, ., shiftRight, (, shift, ), ., doubleValue, (, ), /, denominator, ., shiftRight, (, shift, )]
[-, FastMath, ., getExponent, (, Double, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., doubleValue]
[., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (]
[,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Double, ., MAX_VALUE, ), ;, result, =, numerator]
[., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Double, ., MAX_VALUE, )]
[), -, FastMath, ., getExponent, (, Double, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), .]
[., bitLength, (, ), ), -, FastMath, ., getExponent, (, Double, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight]
[;, result, =, numerator, ., shiftRight, (, shift, ), ., doubleValue, (, ), /, denominator, ., shiftRight, (, shift, )]
[., getExponent, (, Double, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., doubleValue, (, )]
[), ;, result, =, numerator, ., shiftRight, (, shift, ), ., doubleValue, (, ), /, denominator, ., shiftRight, (, shift]
[., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., doubleValue, (, ), /, denominator, ., shiftRight]
[=, numerator, ., shiftRight, (, shift, ), ., doubleValue, (, ), /, denominator, ., shiftRight, (, shift, ), ., doubleValue]
[;, }, return, result, ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, boolean, ret, =]
[/, denominator, ., shiftRight, (, shift, ), ., doubleValue, (, ), ;, }, return, result, ;, }, @, Override, public]
[., doubleValue, (, ), /, denominator, ., shiftRight, (, shift, ), ., doubleValue, (, ), ;, }, return, result, ;]
[., shiftRight, (, shift, ), ., doubleValue, (, ), /, denominator, ., shiftRight, (, shift, ), ., doubleValue, (, )]
[), ., doubleValue, (, ), /, denominator, ., shiftRight, (, shift, ), ., doubleValue, (, ), ;, }, return, result]
[;, }, return, result, ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, boolean, ret, =]
[., doubleValue, (, ), ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, final, Object, other, )]
[., shiftRight, (, shift, ), ., doubleValue, (, ), ;, }, return, result, ;, }, @, Override, public, boolean, equals]
[), ., doubleValue, (, ), ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, final, Object, other]
[;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, boolean, ret, =, false, ;, if, (]
[;, if, (, this, ==, other, ), {, ret, =, true, ;, }, else, if, (, other, instanceof, BigFraction, )]
[), {, ret, =, true, ;, }, else, if, (, other, instanceof, BigFraction, ), {, BigFraction, rhs, =, (, (]
[==, other, ), {, ret, =, true, ;, }, else, if, (, other, instanceof, BigFraction, ), {, BigFraction, rhs, =]
[), {, ret, =, true, ;, }, else, if, (, other, instanceof, BigFraction, ), {, BigFraction, rhs, =, (, (]
[=, true, ;, }, else, if, (, other, instanceof, BigFraction, ), {, BigFraction, rhs, =, (, (, BigFraction, ), other]
[;, }, else, if, (, other, instanceof, BigFraction, ), {, BigFraction, rhs, =, (, (, BigFraction, ), other, ), .]
[), {, BigFraction, rhs, =, (, (, BigFraction, ), other, ), ., reduce, (, ), ;, BigFraction, thisOne, =, this]
[instanceof, BigFraction, ), {, BigFraction, rhs, =, (, (, BigFraction, ), other, ), ., reduce, (, ), ;, BigFraction, thisOne]
[;, BigFraction, thisOne, =, this, ., reduce, (, ), ;, ret, =, thisOne, ., numerator, ., equals, (, rhs, .]
[., reduce, (, ), ;, BigFraction, thisOne, =, this, ., reduce, (, ), ;, ret, =, thisOne, ., numerator, .]
[), ., reduce, (, ), ;, BigFraction, thisOne, =, this, ., reduce, (, ), ;, ret, =, thisOne, ., numerator]
[), ., reduce, (, ), ;, BigFraction, thisOne, =, this, ., reduce, (, ), ;, ret, =, thisOne, ., numerator]
[;, ret, =, thisOne, ., numerator, ., equals, (, rhs, ., numerator, ), &&, thisOne, ., denominator, ., equals, (]
[., reduce, (, ), ;, ret, =, thisOne, ., numerator, ., equals, (, rhs, ., numerator, ), &&, thisOne, .]
[=, thisOne, ., numerator, ., equals, (, rhs, ., numerator, ), &&, thisOne, ., denominator, ., equals, (, rhs, .]
[;, }, return, ret, ;, }, @, Override, public, float, floatValue, (, ), {, float, result, =, numerator, ., floatValue]
[&&, thisOne, ., denominator, ., equals, (, rhs, ., denominator, ), ;, }, return, ret, ;, }, @, Override, public]
[., equals, (, rhs, ., numerator, ), &&, thisOne, ., denominator, ., equals, (, rhs, ., denominator, ), ;, }]
[., numerator, ., equals, (, rhs, ., numerator, ), &&, thisOne, ., denominator, ., equals, (, rhs, ., denominator, )]
[), &&, thisOne, ., denominator, ., equals, (, rhs, ., denominator, ), ;, }, return, ret, ;, }, @, Override]
[., numerator, ), &&, thisOne, ., denominator, ., equals, (, rhs, ., denominator, ), ;, }, return, ret, ;, }]
[;, }, return, ret, ;, }, @, Override, public, float, floatValue, (, ), {, float, result, =, numerator, ., floatValue]
[., equals, (, rhs, ., denominator, ), ;, }, return, ret, ;, }, @, Override, public, float, floatValue, (, )]
[., denominator, ., equals, (, rhs, ., denominator, ), ;, }, return, ret, ;, }, @, Override, public, float, floatValue]
[), ;, }, return, ret, ;, }, @, Override, public, float, floatValue, (, ), {, float, result, =, numerator, .]
[., denominator, ), ;, }, return, ret, ;, }, @, Override, public, float, floatValue, (, ), {, float, result, =]
[;, }, @, Override, public, float, floatValue, (, ), {, float, result, =, numerator, ., floatValue, (, ), /, denominator]
[;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (, numerator, .]
[/, denominator, ., floatValue, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =]
[., floatValue, (, ), /, denominator, ., floatValue, (, ), ;, if, (, Double, ., isNaN, (, result, ), )]
[;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (, numerator, .]
[., floatValue, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =, Math, .]
[), {, int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, )]
[., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,]
[), ), {, int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (]
[;, result, =, numerator, ., shiftRight, (, shift, ), ., floatValue, (, ), /, denominator, ., shiftRight, (, shift, )]
[-, FastMath, ., getExponent, (, Float, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., floatValue]
[., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (]
[,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Float, ., MAX_VALUE, ), ;, result, =, numerator]
[., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Float, ., MAX_VALUE, )]
[), -, FastMath, ., getExponent, (, Float, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), .]
[., bitLength, (, ), ), -, FastMath, ., getExponent, (, Float, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight]
[;, result, =, numerator, ., shiftRight, (, shift, ), ., floatValue, (, ), /, denominator, ., shiftRight, (, shift, )]
[., getExponent, (, Float, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., floatValue, (, )]
[), ;, result, =, numerator, ., shiftRight, (, shift, ), ., floatValue, (, ), /, denominator, ., shiftRight, (, shift]
[., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., floatValue, (, ), /, denominator, ., shiftRight]
[=, numerator, ., shiftRight, (, shift, ), ., floatValue, (, ), /, denominator, ., shiftRight, (, shift, ), ., floatValue]
[;, }, return, result, ;, }, public, BigInteger, getDenominator, (, ), {, return, denominator, ;, }, public, int, getDenominatorAsInt, (]
[/, denominator, ., shiftRight, (, shift, ), ., floatValue, (, ), ;, }, return, result, ;, }, public, BigInteger, getDenominator]
[., floatValue, (, ), /, denominator, ., shiftRight, (, shift, ), ., floatValue, (, ), ;, }, return, result, ;]
[., shiftRight, (, shift, ), ., floatValue, (, ), /, denominator, ., shiftRight, (, shift, ), ., floatValue, (, )]
[), ., floatValue, (, ), /, denominator, ., shiftRight, (, shift, ), ., floatValue, (, ), ;, }, return, result]
[;, }, return, result, ;, }, public, BigInteger, getDenominator, (, ), {, return, denominator, ;, }, public, int, getDenominatorAsInt, (]
[., floatValue, (, ), ;, }, return, result, ;, }, public, BigInteger, getDenominator, (, ), {, return, denominator, ;, }]
[., shiftRight, (, shift, ), ., floatValue, (, ), ;, }, return, result, ;, }, public, BigInteger, getDenominator, (, )]
[), ., floatValue, (, ), ;, }, return, result, ;, }, public, BigInteger, getDenominator, (, ), {, return, denominator, ;]
[;, }, public, BigInteger, getDenominator, (, ), {, return, denominator, ;, }, public, int, getDenominatorAsInt, (, ), {, return, denominator]
[;, }, public, int, getDenominatorAsInt, (, ), {, return, denominator, ., intValue, (, ), ;, }, public, long, getDenominatorAsLong, (]
[;, }, public, long, getDenominatorAsLong, (, ), {, return, denominator, ., longValue, (, ), ;, }, public, BigInteger, getNumerator, (]
[., intValue, (, ), ;, }, public, long, getDenominatorAsLong, (, ), {, return, denominator, ., longValue, (, ), ;, }]
[;, }, public, BigInteger, getNumerator, (, ), {, return, numerator, ;, }, public, int, getNumeratorAsInt, (, ), {, return, numerator]
[., longValue, (, ), ;, }, public, BigInteger, getNumerator, (, ), {, return, numerator, ;, }, public, int, getNumeratorAsInt, (]
[;, }, public, int, getNumeratorAsInt, (, ), {, return, numerator, ., intValue, (, ), ;, }, public, long, getNumeratorAsLong, (]
[;, }, public, long, getNumeratorAsLong, (, ), {, return, numerator, ., longValue, (, ), ;, }, @, Override, public, int]
[., intValue, (, ), ;, }, public, long, getNumeratorAsLong, (, ), {, return, numerator, ., longValue, (, ), ;, }]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 37, *, (, 37, *, 17, +, numerator, .]
[., longValue, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 37, *, (, 37, *]
[;, }, @, Override, public, int, intValue, (, ), {, return, numerator, ., divide, (, denominator, ), ., intValue, (]
[+, denominator, ., hashCode, (, ), ;, }, @, Override, public, int, intValue, (, ), {, return, numerator, ., divide]
[*, (, 37, *, 17, +, numerator, ., hashCode, (, ), ), +, denominator, ., hashCode, (, ), ;, }]
[+, denominator, ., hashCode, (, ), ;, }, @, Override, public, int, intValue, (, ), {, return, numerator, ., divide]
[), +, denominator, ., hashCode, (, ), ;, }, @, Override, public, int, intValue, (, ), {, return, numerator, .]
[+, numerator, ., hashCode, (, ), ), +, denominator, ., hashCode, (, ), ;, }, @, Override, public, int, intValue]
[*, 17, +, numerator, ., hashCode, (, ), ), +, denominator, ., hashCode, (, ), ;, }, @, Override, public]
[+, numerator, ., hashCode, (, ), ), +, denominator, ., hashCode, (, ), ;, }, @, Override, public, int, intValue]
[), +, denominator, ., hashCode, (, ), ;, }, @, Override, public, int, intValue, (, ), {, return, numerator, .]
[., hashCode, (, ), ), +, denominator, ., hashCode, (, ), ;, }, @, Override, public, int, intValue, (, )]
[;, }, @, Override, public, int, intValue, (, ), {, return, numerator, ., divide, (, denominator, ), ., intValue, (]
[., hashCode, (, ), ;, }, @, Override, public, int, intValue, (, ), {, return, numerator, ., divide, (, denominator]
[;, }, @, Override, public, long, longValue, (, ), {, return, numerator, ., divide, (, denominator, ), ., longValue, (]
[., intValue, (, ), ;, }, @, Override, public, long, longValue, (, ), {, return, numerator, ., divide, (, denominator]
[., divide, (, denominator, ), ., intValue, (, ), ;, }, @, Override, public, long, longValue, (, ), {, return]
[), ., intValue, (, ), ;, }, @, Override, public, long, longValue, (, ), {, return, numerator, ., divide, (]
[;, }, public, BigFraction, multiply, (, final, BigInteger, bg, ), {, if, (, bg, ==, null, ), {, throw, new]
[., longValue, (, ), ;, }, public, BigFraction, multiply, (, final, BigInteger, bg, ), {, if, (, bg, ==, null]
[., divide, (, denominator, ), ., longValue, (, ), ;, }, public, BigFraction, multiply, (, final, BigInteger, bg, ), {]
[), ., longValue, (, ), ;, }, public, BigFraction, multiply, (, final, BigInteger, bg, ), {, if, (, bg, ==]
[), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (, bg, ., multiply, (, numerator, ), ,]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (, bg, ., multiply, (, numerator]
[), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (, bg, ., multiply, (, numerator, ), ,]
[;, }, return, new, BigFraction, (, bg, ., multiply, (, numerator, ), ,, denominator, ), ;, }, public, BigFraction, multiply]
[;, }, public, BigFraction, multiply, (, final, int, i, ), {, return, multiply, (, BigInteger, ., valueOf, (, i, )]
[,, denominator, ), ;, }, public, BigFraction, multiply, (, final, int, i, ), {, return, multiply, (, BigInteger, ., valueOf]
[., multiply, (, numerator, ), ,, denominator, ), ;, }, public, BigFraction, multiply, (, final, int, i, ), {, return]
[), ,, denominator, ), ;, }, public, BigFraction, multiply, (, final, int, i, ), {, return, multiply, (, BigInteger, .]
[), ;, }, public, BigFraction, multiply, (, final, int, i, ), {, return, multiply, (, BigInteger, ., valueOf, (, i]
[;, }, public, BigFraction, multiply, (, final, long, l, ), {, return, multiply, (, BigInteger, ., valueOf, (, l, )]
[), ;, }, public, BigFraction, multiply, (, final, long, l, ), {, return, multiply, (, BigInteger, ., valueOf, (, l]
[., valueOf, (, i, ), ), ;, }, public, BigFraction, multiply, (, final, long, l, ), {, return, multiply, (]
[), ), ;, }, public, BigFraction, multiply, (, final, long, l, ), {, return, multiply, (, BigInteger, ., valueOf, (]
[;, }, public, BigFraction, multiply, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new]
[), ;, }, public, BigFraction, multiply, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw]
[., valueOf, (, l, ), ), ;, }, public, BigFraction, multiply, (, final, BigFraction, fraction, ), {, if, (, fraction]
[), ), ;, }, public, BigFraction, multiply, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, numerator, ., equals, (, BigInteger, .]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, numerator, ., equals, (]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, numerator, ., equals, (, BigInteger, .]
[;, }, if, (, numerator, ., equals, (, BigInteger, ., ZERO, ), ||, fraction, ., numerator, ., equals, (, BigInteger]
[), ;, }, if, (, numerator, ., equals, (, BigInteger, ., ZERO, ), ||, fraction, ., numerator, ., equals, (]
[., FRACTION, ), ;, }, if, (, numerator, ., equals, (, BigInteger, ., ZERO, ), ||, fraction, ., numerator, .]
[), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator, ., multiply, (, fraction, ., numerator, ), ,, denominator]
[||, fraction, ., numerator, ., equals, (, BigInteger, ., ZERO, ), ), {, return, ZERO, ;, }, return, new, BigFraction]
[., equals, (, BigInteger, ., ZERO, ), ||, fraction, ., numerator, ., equals, (, BigInteger, ., ZERO, ), ), {]
[), ||, fraction, ., numerator, ., equals, (, BigInteger, ., ZERO, ), ), {, return, ZERO, ;, }, return, new]
[., ZERO, ), ||, fraction, ., numerator, ., equals, (, BigInteger, ., ZERO, ), ), {, return, ZERO, ;, }]
[), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator, ., multiply, (, fraction, ., numerator, ), ,, denominator]
[., equals, (, BigInteger, ., ZERO, ), ), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator, ., multiply]
[., numerator, ., equals, (, BigInteger, ., ZERO, ), ), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator]
[), ), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator, ., multiply, (, fraction, ., numerator, ), ,]
[., ZERO, ), ), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator, ., multiply, (, fraction, ., numerator]
[;, }, return, new, BigFraction, (, numerator, ., multiply, (, fraction, ., numerator, ), ,, denominator, ., multiply, (, fraction]
[;, }, public, BigFraction, negate, (, ), {, return, new, BigFraction, (, numerator, ., negate, (, ), ,, denominator, )]
[,, denominator, ., multiply, (, fraction, ., denominator, ), ), ;, }, public, BigFraction, negate, (, ), {, return, new]
[., multiply, (, fraction, ., numerator, ), ,, denominator, ., multiply, (, fraction, ., denominator, ), ), ;, }, public]
[), ,, denominator, ., multiply, (, fraction, ., denominator, ), ), ;, }, public, BigFraction, negate, (, ), {, return]
[., numerator, ), ,, denominator, ., multiply, (, fraction, ., denominator, ), ), ;, }, public, BigFraction, negate, (, )]
[), ;, }, public, BigFraction, negate, (, ), {, return, new, BigFraction, (, numerator, ., negate, (, ), ,, denominator]
[., multiply, (, fraction, ., denominator, ), ), ;, }, public, BigFraction, negate, (, ), {, return, new, BigFraction, (]
[), ), ;, }, public, BigFraction, negate, (, ), {, return, new, BigFraction, (, numerator, ., negate, (, ), ,]
[., denominator, ), ), ;, }, public, BigFraction, negate, (, ), {, return, new, BigFraction, (, numerator, ., negate, (]
[;, }, public, double, percentageValue, (, ), {, return, multiply, (, ONE_HUNDRED, ), ., doubleValue, (, ), ;, }, public]
[,, denominator, ), ;, }, public, double, percentageValue, (, ), {, return, multiply, (, ONE_HUNDRED, ), ., doubleValue, (, )]
[., negate, (, ), ,, denominator, ), ;, }, public, double, percentageValue, (, ), {, return, multiply, (, ONE_HUNDRED, )]
[), ;, }, public, double, percentageValue, (, ), {, return, multiply, (, ONE_HUNDRED, ), ., doubleValue, (, ), ;, }]
[;, }, public, BigFraction, pow, (, final, int, exponent, ), {, if, (, exponent, <, 0, ), {, return, new]
[., doubleValue, (, ), ;, }, public, BigFraction, pow, (, final, int, exponent, ), {, if, (, exponent, <, 0]
[), ., doubleValue, (, ), ;, }, public, BigFraction, pow, (, final, int, exponent, ), {, if, (, exponent, <]
[), {, return, new, BigFraction, (, denominator, ., pow, (, -, exponent, ), ,, numerator, ., pow, (, -, exponent]
[<, 0, ), {, return, new, BigFraction, (, denominator, ., pow, (, -, exponent, ), ,, numerator, ., pow, (]
[), {, return, new, BigFraction, (, denominator, ., pow, (, -, exponent, ), ,, numerator, ., pow, (, -, exponent]
[;, }, return, new, BigFraction, (, numerator, ., pow, (, exponent, ), ,, denominator, ., pow, (, exponent, ), )]
[,, numerator, ., pow, (, -, exponent, ), ), ;, }, return, new, BigFraction, (, numerator, ., pow, (, exponent]
[., pow, (, -, exponent, ), ,, numerator, ., pow, (, -, exponent, ), ), ;, }, return, new, BigFraction]
[), ,, numerator, ., pow, (, -, exponent, ), ), ;, }, return, new, BigFraction, (, numerator, ., pow, (]
[), ,, numerator, ., pow, (, -, exponent, ), ), ;, }, return, new, BigFraction, (, numerator, ., pow, (]
[), ;, }, return, new, BigFraction, (, numerator, ., pow, (, exponent, ), ,, denominator, ., pow, (, exponent, )]
[., pow, (, -, exponent, ), ), ;, }, return, new, BigFraction, (, numerator, ., pow, (, exponent, ), ,]
[), ), ;, }, return, new, BigFraction, (, numerator, ., pow, (, exponent, ), ,, denominator, ., pow, (, exponent]
[), ), ;, }, return, new, BigFraction, (, numerator, ., pow, (, exponent, ), ,, denominator, ., pow, (, exponent]
[;, }, public, BigFraction, pow, (, final, long, exponent, ), {, if, (, exponent, <, 0, ), {, return, new]
[,, denominator, ., pow, (, exponent, ), ), ;, }, public, BigFraction, pow, (, final, long, exponent, ), {, if]
[., pow, (, exponent, ), ,, denominator, ., pow, (, exponent, ), ), ;, }, public, BigFraction, pow, (, final]
[), ,, denominator, ., pow, (, exponent, ), ), ;, }, public, BigFraction, pow, (, final, long, exponent, ), {]
[), ;, }, public, BigFraction, pow, (, final, long, exponent, ), {, if, (, exponent, <, 0, ), {, return]
[., pow, (, exponent, ), ), ;, }, public, BigFraction, pow, (, final, long, exponent, ), {, if, (, exponent]
[), ), ;, }, public, BigFraction, pow, (, final, long, exponent, ), {, if, (, exponent, <, 0, ), {]
[), {, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, -, exponent, ), ,, ArithmeticUtils, ., pow, (]
[<, 0, ), {, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, -, exponent, ), ,, ArithmeticUtils, .]
[), {, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, -, exponent, ), ,, ArithmeticUtils, ., pow, (]
[;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow, (, denominator]
[,, ArithmeticUtils, ., pow, (, numerator, ,, -, exponent, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow]
[., pow, (, denominator, ,, -, exponent, ), ,, ArithmeticUtils, ., pow, (, numerator, ,, -, exponent, ), ), ;]
[,, -, exponent, ), ,, ArithmeticUtils, ., pow, (, numerator, ,, -, exponent, ), ), ;, }, return, new, BigFraction]
[), ,, ArithmeticUtils, ., pow, (, numerator, ,, -, exponent, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, .]
[), ,, ArithmeticUtils, ., pow, (, numerator, ,, -, exponent, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, .]
[), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow, (]
[., pow, (, numerator, ,, -, exponent, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator]
[,, -, exponent, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,]
[), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow]
[), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow]
[;, }, public, BigFraction, pow, (, final, BigInteger, exponent, ), {, if, (, exponent, ., compareTo, (, BigInteger, ., ZERO]
[,, ArithmeticUtils, ., pow, (, denominator, ,, exponent, ), ), ;, }, public, BigFraction, pow, (, final, BigInteger, exponent, )]
[., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow, (, denominator, ,, exponent, ), ), ;, }, public]
[,, exponent, ), ,, ArithmeticUtils, ., pow, (, denominator, ,, exponent, ), ), ;, }, public, BigFraction, pow, (, final]
[), ,, ArithmeticUtils, ., pow, (, denominator, ,, exponent, ), ), ;, }, public, BigFraction, pow, (, final, BigInteger, exponent]
[), ;, }, public, BigFraction, pow, (, final, BigInteger, exponent, ), {, if, (, exponent, ., compareTo, (, BigInteger, .]
[., pow, (, denominator, ,, exponent, ), ), ;, }, public, BigFraction, pow, (, final, BigInteger, exponent, ), {, if]
[,, exponent, ), ), ;, }, public, BigFraction, pow, (, final, BigInteger, exponent, ), {, if, (, exponent, ., compareTo]
[), ), ;, }, public, BigFraction, pow, (, final, BigInteger, exponent, ), {, if, (, exponent, ., compareTo, (, BigInteger]
[), {, final, BigInteger, eNeg, =, exponent, ., negate, (, ), ;, return, new, BigFraction, (, ArithmeticUtils, ., pow, (]
[<, 0, ), {, final, BigInteger, eNeg, =, exponent, ., negate, (, ), ;, return, new, BigFraction, (, ArithmeticUtils, .]
[., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, final, BigInteger, eNeg, =, exponent, ., negate, (, )]
[), <, 0, ), {, final, BigInteger, eNeg, =, exponent, ., negate, (, ), ;, return, new, BigFraction, (, ArithmeticUtils]
[., ZERO, ), <, 0, ), {, final, BigInteger, eNeg, =, exponent, ., negate, (, ), ;, return, new, BigFraction]
[), {, final, BigInteger, eNeg, =, exponent, ., negate, (, ), ;, return, new, BigFraction, (, ArithmeticUtils, ., pow, (]
[;, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, eNeg, ), ,, ArithmeticUtils, ., pow, (, numerator, ,]
[., negate, (, ), ;, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, eNeg, ), ,, ArithmeticUtils, .]
[;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow, (, denominator]
[,, ArithmeticUtils, ., pow, (, numerator, ,, eNeg, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (]
[., pow, (, denominator, ,, eNeg, ), ,, ArithmeticUtils, ., pow, (, numerator, ,, eNeg, ), ), ;, }, return]
[,, eNeg, ), ,, ArithmeticUtils, ., pow, (, numerator, ,, eNeg, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils]
[), ,, ArithmeticUtils, ., pow, (, numerator, ,, eNeg, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow]
[), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow, (]
[., pow, (, numerator, ,, eNeg, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,]
[,, eNeg, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils]
[), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow]
[;, }, public, double, pow, (, final, double, exponent, ), {, return, FastMath, ., pow, (, numerator, ., doubleValue, (]
[,, ArithmeticUtils, ., pow, (, denominator, ,, exponent, ), ), ;, }, public, double, pow, (, final, double, exponent, )]
[., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow, (, denominator, ,, exponent, ), ), ;, }, public]
[,, exponent, ), ,, ArithmeticUtils, ., pow, (, denominator, ,, exponent, ), ), ;, }, public, double, pow, (, final]
[), ,, ArithmeticUtils, ., pow, (, denominator, ,, exponent, ), ), ;, }, public, double, pow, (, final, double, exponent]
[), ;, }, public, double, pow, (, final, double, exponent, ), {, return, FastMath, ., pow, (, numerator, ., doubleValue]
[., pow, (, denominator, ,, exponent, ), ), ;, }, public, double, pow, (, final, double, exponent, ), {, return]
[,, exponent, ), ), ;, }, public, double, pow, (, final, double, exponent, ), {, return, FastMath, ., pow, (]
[), ), ;, }, public, double, pow, (, final, double, exponent, ), {, return, FastMath, ., pow, (, numerator, .]
[;, }, public, BigFraction, reciprocal, (, ), {, return, new, BigFraction, (, denominator, ,, numerator, ), ;, }, public, BigFraction]
[/, FastMath, ., pow, (, denominator, ., doubleValue, (, ), ,, exponent, ), ;, }, public, BigFraction, reciprocal, (, )]
[., pow, (, numerator, ., doubleValue, (, ), ,, exponent, ), /, FastMath, ., pow, (, denominator, ., doubleValue, (]
[,, exponent, ), /, FastMath, ., pow, (, denominator, ., doubleValue, (, ), ,, exponent, ), ;, }, public, BigFraction]
[., doubleValue, (, ), ,, exponent, ), /, FastMath, ., pow, (, denominator, ., doubleValue, (, ), ,, exponent, )]
[), /, FastMath, ., pow, (, denominator, ., doubleValue, (, ), ,, exponent, ), ;, }, public, BigFraction, reciprocal, (]
[;, }, public, BigFraction, reciprocal, (, ), {, return, new, BigFraction, (, denominator, ,, numerator, ), ;, }, public, BigFraction]
[., pow, (, denominator, ., doubleValue, (, ), ,, exponent, ), ;, }, public, BigFraction, reciprocal, (, ), {, return]
[,, exponent, ), ;, }, public, BigFraction, reciprocal, (, ), {, return, new, BigFraction, (, denominator, ,, numerator, ), ;]
[., doubleValue, (, ), ,, exponent, ), ;, }, public, BigFraction, reciprocal, (, ), {, return, new, BigFraction, (, denominator]
[), ;, }, public, BigFraction, reciprocal, (, ), {, return, new, BigFraction, (, denominator, ,, numerator, ), ;, }, public]
[;, }, public, BigFraction, reduce, (, ), {, final, BigInteger, gcd, =, numerator, ., gcd, (, denominator, ), ;, return]
[,, numerator, ), ;, }, public, BigFraction, reduce, (, ), {, final, BigInteger, gcd, =, numerator, ., gcd, (, denominator]
[), ;, }, public, BigFraction, reduce, (, ), {, final, BigInteger, gcd, =, numerator, ., gcd, (, denominator, ), ;]
[;, return, new, BigFraction, (, numerator, ., divide, (, gcd, ), ,, denominator, ., divide, (, gcd, ), ), ;]
[., gcd, (, denominator, ), ;, return, new, BigFraction, (, numerator, ., divide, (, gcd, ), ,, denominator, ., divide]
[), ;, return, new, BigFraction, (, numerator, ., divide, (, gcd, ), ,, denominator, ., divide, (, gcd, ), )]
[;, }, public, BigFraction, subtract, (, final, BigInteger, bg, ), {, if, (, bg, ==, null, ), {, throw, new]
[,, denominator, ., divide, (, gcd, ), ), ;, }, public, BigFraction, subtract, (, final, BigInteger, bg, ), {, if]
[., divide, (, gcd, ), ,, denominator, ., divide, (, gcd, ), ), ;, }, public, BigFraction, subtract, (, final]
[), ,, denominator, ., divide, (, gcd, ), ), ;, }, public, BigFraction, subtract, (, final, BigInteger, bg, ), {]
[), ;, }, public, BigFraction, subtract, (, final, BigInteger, bg, ), {, if, (, bg, ==, null, ), {, throw]
[., divide, (, gcd, ), ), ;, }, public, BigFraction, subtract, (, final, BigInteger, bg, ), {, if, (, bg]
[), ), ;, }, public, BigFraction, subtract, (, final, BigInteger, bg, ), {, if, (, bg, ==, null, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (, numerator, ., subtract, (, denominator, ., multiply]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (, numerator, ., subtract, (, denominator]
[), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (, numerator, ., subtract, (, denominator, ., multiply]
[;, }, return, new, BigFraction, (, numerator, ., subtract, (, denominator, ., multiply, (, bg, ), ), ,, denominator, )]
[;, }, public, BigFraction, subtract, (, final, int, i, ), {, return, subtract, (, BigInteger, ., valueOf, (, i, )]
[,, denominator, ), ;, }, public, BigFraction, subtract, (, final, int, i, ), {, return, subtract, (, BigInteger, ., valueOf]
[., subtract, (, denominator, ., multiply, (, bg, ), ), ,, denominator, ), ;, }, public, BigFraction, subtract, (, final]
[), ,, denominator, ), ;, }, public, BigFraction, subtract, (, final, int, i, ), {, return, subtract, (, BigInteger, .]
[., multiply, (, bg, ), ), ,, denominator, ), ;, }, public, BigFraction, subtract, (, final, int, i, ), {]
[), ), ,, denominator, ), ;, }, public, BigFraction, subtract, (, final, int, i, ), {, return, subtract, (, BigInteger]
[), ;, }, public, BigFraction, subtract, (, final, int, i, ), {, return, subtract, (, BigInteger, ., valueOf, (, i]
[;, }, public, BigFraction, subtract, (, final, long, l, ), {, return, subtract, (, BigInteger, ., valueOf, (, l, )]
[), ;, }, public, BigFraction, subtract, (, final, long, l, ), {, return, subtract, (, BigInteger, ., valueOf, (, l]
[., valueOf, (, i, ), ), ;, }, public, BigFraction, subtract, (, final, long, l, ), {, return, subtract, (]
[), ), ;, }, public, BigFraction, subtract, (, final, long, l, ), {, return, subtract, (, BigInteger, ., valueOf, (]
[;, }, public, BigFraction, subtract, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new]
[), ;, }, public, BigFraction, subtract, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw]
[., valueOf, (, l, ), ), ;, }, public, BigFraction, subtract, (, final, BigFraction, fraction, ), {, if, (, fraction]
[), ), ;, }, public, BigFraction, subtract, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, ZERO, ., equals, (, fraction, )]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, ZERO, ., equals, (]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, ZERO, ., equals, (, fraction, )]
[;, }, if, (, ZERO, ., equals, (, fraction, ), ), {, return, this, ;, }, BigInteger, num, =, null]
[), ;, }, if, (, ZERO, ., equals, (, fraction, ), ), {, return, this, ;, }, BigInteger, num, =]
[., FRACTION, ), ;, }, if, (, ZERO, ., equals, (, fraction, ), ), {, return, this, ;, }, BigInteger]
[), {, return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (, denominator, .]
[., equals, (, fraction, ), ), {, return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null]
[), ), {, return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (, denominator]
[;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (, fraction, .]
[;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {, num, =]
[;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {, num, =, numerator, ., subtract, (, fraction]
[), {, num, =, numerator, ., subtract, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {]
[., equals, (, fraction, ., denominator, ), ), {, num, =, numerator, ., subtract, (, fraction, ., numerator, ), ;]
[), ), {, num, =, numerator, ., subtract, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else]
[., denominator, ), ), {, num, =, numerator, ., subtract, (, fraction, ., numerator, ), ;, den, =, denominator, ;]
[=, numerator, ., subtract, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (]
[;, den, =, denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), )]
[., subtract, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (, numerator, .]
[), ;, den, =, denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, )]
[., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, .]
[=, denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., subtract]
[;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., subtract, (, (]
[=, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., subtract, (, (, fraction, ., numerator, ), .]
[;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (, num, ,, den]
[., subtract, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply]
[), ., subtract, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =, denominator, .]
[., multiply, (, fraction, ., denominator, ), ), ., subtract, (, (, fraction, ., numerator, ), ., multiply, (, denominator]
[), ), ., subtract, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =, denominator]
[., denominator, ), ), ., subtract, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den]
[), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (, num, ,]
[., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return]
[), ., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }]
[., numerator, ), ., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, )]
[), ), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (, num]
[=, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (, num, ,, den, ), ;]
[;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, @, Override, public, String, toString, (, ), {]
[., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, @]
[), ;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, @, Override, public, String, toString, (, )]
[., denominator, ), ;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, @, Override, public, String, toString]
[;, }, @, Override, public, String, toString, (, ), {, String, str, =, null, ;, if, (, BigInteger, ., ONE]
[,, den, ), ;, }, @, Override, public, String, toString, (, ), {, String, str, =, null, ;, if, (]
[), ;, }, @, Override, public, String, toString, (, ), {, String, str, =, null, ;, if, (, BigInteger, .]
[;, if, (, BigInteger, ., ONE, ., equals, (, denominator, ), ), {, str, =, numerator, ., toString, (, )]
[), {, str, =, numerator, ., toString, (, ), ;, }, else, if, (, BigInteger, ., ZERO, ., equals, (]
[., equals, (, denominator, ), ), {, str, =, numerator, ., toString, (, ), ;, }, else, if, (, BigInteger]
[., ONE, ., equals, (, denominator, ), ), {, str, =, numerator, ., toString, (, ), ;, }, else, if]
[), ), {, str, =, numerator, ., toString, (, ), ;, }, else, if, (, BigInteger, ., ZERO, ., equals]
[=, numerator, ., toString, (, ), ;, }, else, if, (, BigInteger, ., ZERO, ., equals, (, numerator, ), )]
[;, }, else, if, (, BigInteger, ., ZERO, ., equals, (, numerator, ), ), {, str, =, "0", ;, }]
[., toString, (, ), ;, }, else, if, (, BigInteger, ., ZERO, ., equals, (, numerator, ), ), {, str]
[), {, str, =, "0", ;, }, else, {, str, =, numerator, +, " / ", +, denominator, ;, }, return, str]
[., equals, (, numerator, ), ), {, str, =, "0", ;, }, else, {, str, =, numerator, +, " / ", +]
[., ZERO, ., equals, (, numerator, ), ), {, str, =, "0", ;, }, else, {, str, =, numerator, +]
[), ), {, str, =, "0", ;, }, else, {, str, =, numerator, +, " / ", +, denominator, ;, }, return]
[=, "0", ;, }, else, {, str, =, numerator, +, " / ", +, denominator, ;, }, return, str, ;, }, public]
[;, }, else, {, str, =, numerator, +, " / ", +, denominator, ;, }, return, str, ;, }, public, BigFractionField, getField]
[=, numerator, +, " / ", +, denominator, ;, }, return, str, ;, }, public, BigFractionField, getField, (, ), {, return, BigFractionField]
[;, }, return, str, ;, }, public, BigFractionField, getField, (, ), {, return, BigFractionField, ., getInstance, (, ), ;, }]
[+, denominator, ;, }, return, str, ;, }, public, BigFractionField, getField, (, ), {, return, BigFractionField, ., getInstance, (, )]
[+, " / ", +, denominator, ;, }, return, str, ;, }, public, BigFractionField, getField, (, ), {, return, BigFractionField, ., getInstance]
[+, denominator, ;, }, return, str, ;, }, public, BigFractionField, getField, (, ), {, return, BigFractionField, ., getInstance, (, )]
[;, }, return, str, ;, }, public, BigFractionField, getField, (, ), {, return, BigFractionField, ., getInstance, (, ), ;, }]
[;, }, public, BigFractionField, getField, (, ), {, return, BigFractionField, ., getInstance, (, ), ;, }, }]
[;, }, }]
[., getInstance, (, ), ;, }, }]
