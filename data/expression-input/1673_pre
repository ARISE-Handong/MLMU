[commons, ., math3, ., util, ., Pair, ;, public, class, GaussIntegratorFactory, {, private, final, BaseRuleFactory, <, Double, >, legendre, =]
[final, BaseRuleFactory, <, Double, >, legendre, =, new, LegendreRuleFactory, (, ), ;, private, final, BaseRuleFactory, <, BigDecimal, >, legendreHighPrecision, =]
[final, BaseRuleFactory, <, BigDecimal, >, legendreHighPrecision, =, new, LegendreHighPrecisionRuleFactory, (, ), ;, private, final, BaseRuleFactory, <, Double, >, hermite, =]
[BaseRuleFactory, <, Double, >, hermite, =, new, HermiteRuleFactory, (, ), ;, public, GaussIntegrator, legendre, (, int, numberOfPoints, ), {, return]
[>, hermite, =, new, HermiteRuleFactory, (, ), ;, public, GaussIntegrator, legendre, (, int, numberOfPoints, ), {, return, new, GaussIntegrator, (]
[=, new, HermiteRuleFactory, (, ), ;, public, GaussIntegrator, legendre, (, int, numberOfPoints, ), {, return, new, GaussIntegrator, (, getRule, (]
[HermiteRuleFactory, (, ), ;, public, GaussIntegrator, legendre, (, int, numberOfPoints, ), {, return, new, GaussIntegrator, (, getRule, (, legendre, ,]
[), ;, }, public, GaussIntegrator, legendre, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return]
[public, GaussIntegrator, legendre, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (]
[legendre, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, transform, (]
[int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, transform, (, getRule, (]
[,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, transform, (, getRule, (, legendre, ,]
[,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, transform, (, getRule, (, legendre, ,, numberOfPoints, ), ,]
[upperBound, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, transform, (, getRule, (, legendre, ,, numberOfPoints, ), ,, lowerBound, ,]
[), ,, lowerBound, ,, upperBound, ), ), ;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, {, return]
[,, upperBound, ), ), ;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (]
[), ), ;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, getRule, (]
[;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, getRule, (, legendreHighPrecision, ,]
[), ;, }, public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return]
[public, GaussIntegrator, legendreHighPrecision, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (]
[legendreHighPrecision, (, int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, transform, (]
[int, numberOfPoints, ,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, transform, (, getRule, (]
[,, double, lowerBound, ,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, transform, (, getRule, (, legendreHighPrecision, ,]
[,, double, upperBound, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, transform, (, getRule, (, legendreHighPrecision, ,, numberOfPoints, ), ,]
[upperBound, ), throws, NotStrictlyPositiveException, {, return, new, GaussIntegrator, (, transform, (, getRule, (, legendreHighPrecision, ,, numberOfPoints, ), ,, lowerBound, ,]
[,, numberOfPoints, ), ,, lowerBound, ,, upperBound, ), ), ;, }, public, SymmetricGaussIntegrator, hermite, (, int, numberOfPoints, ), {, return]
[,, lowerBound, ,, upperBound, ), ), ;, }, public, SymmetricGaussIntegrator, hermite, (, int, numberOfPoints, ), {, return, new, SymmetricGaussIntegrator, (]
[,, upperBound, ), ), ;, }, public, SymmetricGaussIntegrator, hermite, (, int, numberOfPoints, ), {, return, new, SymmetricGaussIntegrator, (, getRule, (]
[), ), ;, }, public, SymmetricGaussIntegrator, hermite, (, int, numberOfPoints, ), {, return, new, SymmetricGaussIntegrator, (, getRule, (, hermite, ,]
[>, getRule, (, BaseRuleFactory, <, ?, extends, Number, >, factory, ,, int, numberOfPoints, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, return]
[>, getRule, (, BaseRuleFactory, <, ?, extends, Number, >, factory, ,, int, numberOfPoints, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, return]
[<, ?, extends, Number, >, factory, ,, int, numberOfPoints, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException, {, return, factory, ., getRule, (]
[,, double, [, ], >, rule, ,, double, a, ,, double, b, ), {, final, double, [, ], points, =]
[,, double, [, ], >, rule, ,, double, a, ,, double, b, ), {, final, double, [, ], points, =]
[), {, final, double, [, ], points, =, rule, ., getFirst, (, ), ;, final, double, [, ], weights, =]
[), {, final, double, [, ], points, =, rule, ., getFirst, (, ), ;, final, double, [, ], weights, =]
[getFirst, (, ), ;, final, double, [, ], weights, =, rule, ., getSecond, (, ), ;, final, double, scale, =]
[getFirst, (, ), ;, final, double, [, ], weights, =, rule, ., getSecond, (, ), ;, final, double, scale, =]
[(, ), ;, final, double, [, ], weights, =, rule, ., getSecond, (, ), ;, final, double, scale, =, (]
[(, ), ;, final, double, [, ], weights, =, rule, ., getSecond, (, ), ;, final, double, scale, =, (]
[;, final, double, [, ], weights, =, rule, ., getSecond, (, ), ;, final, double, scale, =, (, b, -]
[[, ], weights, =, rule, ., getSecond, (, ), ;, final, double, scale, =, (, b, -, a, ), /]
[getSecond, (, ), ;, final, double, scale, =, (, b, -, a, ), /, 2, ;, final, double, shift, =]
[getSecond, (, ), ;, final, double, scale, =, (, b, -, a, ), /, 2, ;, final, double, shift, =]
[), ;, final, double, scale, =, (, b, -, a, ), /, 2, ;, final, double, shift, =, a, +]
[b, -, a, ), /, 2, ;, final, double, shift, =, a, +, scale, ;, for, (, int, i, =]
[a, ), /, 2, ;, final, double, shift, =, a, +, scale, ;, for, (, int, i, =, 0, ;]
[a, ), /, 2, ;, final, double, shift, =, a, +, scale, ;, for, (, int, i, =, 0, ;]
[/, 2, ;, final, double, shift, =, a, +, scale, ;, for, (, int, i, =, 0, ;, i, <]
[/, 2, ;, final, double, shift, =, a, +, scale, ;, for, (, int, i, =, 0, ;, i, <]
[double, shift, =, a, +, scale, ;, for, (, int, i, =, 0, ;, i, <, points, ., length, ;]
[double, shift, =, a, +, scale, ;, for, (, int, i, =, 0, ;, i, <, points, ., length, ;]
[+, scale, ;, for, (, int, i, =, 0, ;, i, <, points, ., length, ;, i, ++, ), {]
[+, scale, ;, for, (, int, i, =, 0, ;, i, <, points, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, points, ., length, ;, i, ++, ), {, points, []
[int, i, =, 0, ;, i, <, points, ., length, ;, i, ++, ), {, points, [, i, ], =]
[int, i, =, 0, ;, i, <, points, ., length, ;, i, ++, ), {, points, [, i, ], =]
[int, i, =, 0, ;, i, <, points, ., length, ;, i, ++, ), {, points, [, i, ], =]
[int, i, =, 0, ;, i, <, points, ., length, ;, i, ++, ), {, points, [, i, ], =]
[=, 0, ;, i, <, points, ., length, ;, i, ++, ), {, points, [, i, ], =, points, []
[i, <, points, ., length, ;, i, ++, ), {, points, [, i, ], =, points, [, i, ], *]
[points, ., length, ;, i, ++, ), {, points, [, i, ], =, points, [, i, ], *, scale, +]
[length, ;, i, ++, ), {, points, [, i, ], =, points, [, i, ], *, scale, +, shift, ;]
[length, ;, i, ++, ), {, points, [, i, ], =, points, [, i, ], *, scale, +, shift, ;]
[i, ++, ), {, points, [, i, ], =, points, [, i, ], *, scale, +, shift, ;, weights, []
[{, points, [, i, ], =, points, [, i, ], *, scale, +, shift, ;, weights, [, i, ], *=]
[], =, points, [, i, ], *, scale, +, shift, ;, weights, [, i, ], *=, scale, ;, }, return]
[[, i, ], *=, scale, ;, }, return, new, Pair, <, double, [, ], ,, double, [, ], >, (]
[], *=, scale, ;, }, return, new, Pair, <, double, [, ], ,, double, [, ], >, (, points, ,]
