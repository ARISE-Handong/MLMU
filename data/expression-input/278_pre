[., math3, ., optimization, ., MultivariateOptimizer, ;, import, org, ., apache, ., commons, ., math3, ., optimization, ., OptimizationData, ;]
[optimization, ., MultivariateOptimizer, ;, import, org, ., apache, ., commons, ., math3, ., optimization, ., OptimizationData, ;, @, SuppressWarnings, (]
[BaseAbstractMultivariateOptimizer, <, MultivariateFunction, >, implements, MultivariateOptimizer, {, private, AbstractSimplex, simplex, ;, @, Deprecated, public, SimplexOptimizer, (, ), {, this, (]
[(, new, SimpleValueChecker, (, ), ), ;, }, public, SimplexOptimizer, (, ConvergenceChecker, <, PointValuePair, >, checker, ), {, super, (]
[), {, super, (, checker, ), ;, }, public, SimplexOptimizer, (, double, rel, ,, double, abs, ), {, this, (]
[(, checker, ), ;, }, public, SimplexOptimizer, (, double, rel, ,, double, abs, ), {, this, (, new, SimpleValueChecker, (]
[), ;, }, public, SimplexOptimizer, (, double, rel, ,, double, abs, ), {, this, (, new, SimpleValueChecker, (, rel, ,]
[new, SimpleValueChecker, (, rel, ,, abs, ), ), ;, }, @, Deprecated, public, void, setSimplex, (, AbstractSimplex, simplex, ), {]
[(, rel, ,, abs, ), ), ;, }, @, Deprecated, public, void, setSimplex, (, AbstractSimplex, simplex, ), {, parseOptimizationData, (]
[@, Override, protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, MultivariateFunction, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), {]
[protected, PointValuePair, optimizeInternal, (, int, maxEval, ,, MultivariateFunction, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), {, parseOptimizationData, (]
[int, maxEval, ,, MultivariateFunction, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), {, parseOptimizationData, (, optData, ), ;, return]
[int, maxEval, ,, MultivariateFunction, f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), {, parseOptimizationData, (, optData, ), ;, return]
[f, ,, GoalType, goalType, ,, OptimizationData, ..., optData, ), {, parseOptimizationData, (, optData, ), ;, return, super, ., optimizeInternal, (]
[GoalType, goalType, ,, OptimizationData, ..., optData, ), {, parseOptimizationData, (, optData, ), ;, return, super, ., optimizeInternal, (, maxEval, ,]
[,, OptimizationData, ..., optData, ), {, parseOptimizationData, (, optData, ), ;, return, super, ., optimizeInternal, (, maxEval, ,, f, ,]
[..., optData, ), {, parseOptimizationData, (, optData, ), ;, return, super, ., optimizeInternal, (, maxEval, ,, f, ,, goalType, ,]
[goalType, ,, optData, ), ;, }, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {, for, (, OptimizationData, data, :]
[}, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {, for, (, OptimizationData, data, :, optData, ), {, if, (]
[}, private, void, parseOptimizationData, (, OptimizationData, ..., optData, ), {, for, (, OptimizationData, data, :, optData, ), {, if, (]
[OptimizationData, ..., optData, ), {, for, (, OptimizationData, data, :, optData, ), {, if, (, data, instanceof, AbstractSimplex, ), {]
[optData, ), {, for, (, OptimizationData, data, :, optData, ), {, if, (, data, instanceof, AbstractSimplex, ), {, simplex, =]
[for, (, OptimizationData, data, :, optData, ), {, if, (, data, instanceof, AbstractSimplex, ), {, simplex, =, (, AbstractSimplex, )]
[(, AbstractSimplex, ), data, ;, continue, ;, }, }, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, if, (]
[(, AbstractSimplex, ), data, ;, continue, ;, }, }, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, if, (]
[), data, ;, continue, ;, }, }, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, if, (, simplex, ==]
[;, }, }, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, if, (, simplex, ==, null, ), {, throw]
[), {, if, (, simplex, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, MultivariateFunction, evalFunc, =]
[final, MultivariateFunction, evalFunc, =, new, MultivariateFunction, (, ), {, public, double, value, (, double, [, ], point, ), {, return]
[evalFunc, =, new, MultivariateFunction, (, ), {, public, double, value, (, double, [, ], point, ), {, return, computeObjectiveValue, (]
[(, double, [, ], point, ), {, return, computeObjectiveValue, (, point, ), ;, }, }, ;, final, boolean, isMinim, =]
[(, double, [, ], point, ), {, return, computeObjectiveValue, (, point, ), ;, }, }, ;, final, boolean, isMinim, =]
[point, ), {, return, computeObjectiveValue, (, point, ), ;, }, }, ;, final, boolean, isMinim, =, getGoalType, (, ), ==]
[point, ), {, return, computeObjectiveValue, (, point, ), ;, }, }, ;, final, boolean, isMinim, =, getGoalType, (, ), ==]
[;, final, boolean, isMinim, =, getGoalType, (, ), ==, GoalType, ., MINIMIZE, ;, final, Comparator, <, PointValuePair, >, comparator, =]
[(, ), {, public, int, compare, (, final, PointValuePair, o1, ,, final, PointValuePair, o2, ), {, final, double, v1, =]
[(, ), {, public, int, compare, (, final, PointValuePair, o1, ,, final, PointValuePair, o2, ), {, final, double, v1, =]
[,, final, PointValuePair, o2, ), {, final, double, v1, =, o1, ., getValue, (, ), ;, final, double, v2, =]
[,, final, PointValuePair, o2, ), {, final, double, v1, =, o1, ., getValue, (, ), ;, final, double, v2, =]
[double, v1, =, o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return]
[double, v1, =, o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return]
[=, o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return, isMinim, ?]
[=, o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return, isMinim, ?]
[(, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return, isMinim, ?, Double, ., compare, (]
[;, final, double, v2, =, o2, ., getValue, (, ), ;, return, isMinim, ?, Double, ., compare, (, v1, ,]
[v2, =, o2, ., getValue, (, ), ;, return, isMinim, ?, Double, ., compare, (, v1, ,, v2, ), :]
[v2, =, o2, ., getValue, (, ), ;, return, isMinim, ?, Double, ., compare, (, v1, ,, v2, ), :]
[getValue, (, ), ;, return, isMinim, ?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (]
[), ;, return, isMinim, ?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,]
[., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,, v1, ), ;, }, }, ;]
[., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,, v1, ), ;, }, }, ;]
[,, v2, ), :, Double, ., compare, (, v2, ,, v1, ), ;, }, }, ;, simplex, ., build, (]
[., compare, (, v2, ,, v1, ), ;, }, }, ;, simplex, ., build, (, getStartPoint, (, ), ), ;]
[., compare, (, v2, ,, v1, ), ;, }, }, ;, simplex, ., build, (, getStartPoint, (, ), ), ;]
[,, v1, ), ;, }, }, ;, simplex, ., build, (, getStartPoint, (, ), ), ;, simplex, ., evaluate, (]
[), ;, }, }, ;, simplex, ., build, (, getStartPoint, (, ), ), ;, simplex, ., evaluate, (, evalFunc, ,]
[(, getStartPoint, (, ), ), ;, simplex, ., evaluate, (, evalFunc, ,, comparator, ), ;, PointValuePair, [, ], previous, =]
[;, simplex, ., evaluate, (, evalFunc, ,, comparator, ), ;, PointValuePair, [, ], previous, =, null, ;, int, iteration, =]
[;, PointValuePair, [, ], previous, =, null, ;, int, iteration, =, 0, ;, final, ConvergenceChecker, <, PointValuePair, >, checker, =]
[null, ;, int, iteration, =, 0, ;, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, while, (]
[0, ;, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, while, (, true, ), {, if, (]
[0, ;, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, while, (, true, ), {, if, (]
[final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, while, (, true, ), {, if, (, iteration, >]
[=, getConvergenceChecker, (, ), ;, while, (, true, ), {, if, (, iteration, >, 0, ), {, boolean, converged, =]
[true, ), {, if, (, iteration, >, 0, ), {, boolean, converged, =, true, ;, for, (, int, i, =]
[{, if, (, iteration, >, 0, ), {, boolean, converged, =, true, ;, for, (, int, i, =, 0, ;]
[{, if, (, iteration, >, 0, ), {, boolean, converged, =, true, ;, for, (, int, i, =, 0, ;]
[(, iteration, >, 0, ), {, boolean, converged, =, true, ;, for, (, int, i, =, 0, ;, i, <]
[(, iteration, >, 0, ), {, boolean, converged, =, true, ;, for, (, int, i, =, 0, ;, i, <]
[boolean, converged, =, true, ;, for, (, int, i, =, 0, ;, i, <, simplex, ., getSize, (, ), ;]
[boolean, converged, =, true, ;, for, (, int, i, =, 0, ;, i, <, simplex, ., getSize, (, ), ;]
[int, i, =, 0, ;, i, <, simplex, ., getSize, (, ), ;, i, ++, ), {, PointValuePair, prev, =]
[int, i, =, 0, ;, i, <, simplex, ., getSize, (, ), ;, i, ++, ), {, PointValuePair, prev, =]
[=, 0, ;, i, <, simplex, ., getSize, (, ), ;, i, ++, ), {, PointValuePair, prev, =, previous, []
[i, <, simplex, ., getSize, (, ), ;, i, ++, ), {, PointValuePair, prev, =, previous, [, i, ], ;]
[simplex, ., getSize, (, ), ;, i, ++, ), {, PointValuePair, prev, =, previous, [, i, ], ;, converged, =]
[simplex, ., getSize, (, ), ;, i, ++, ), {, PointValuePair, prev, =, previous, [, i, ], ;, converged, =]
[getSize, (, ), ;, i, ++, ), {, PointValuePair, prev, =, previous, [, i, ], ;, converged, =, converged, &&]
[getSize, (, ), ;, i, ++, ), {, PointValuePair, prev, =, previous, [, i, ], ;, converged, =, converged, &&]
[i, ++, ), {, PointValuePair, prev, =, previous, [, i, ], ;, converged, =, converged, &&, checker, ., converged, (]
[), {, PointValuePair, prev, =, previous, [, i, ], ;, converged, =, converged, &&, checker, ., converged, (, iteration, ,]
[PointValuePair, prev, =, previous, [, i, ], ;, converged, =, converged, &&, checker, ., converged, (, iteration, ,, prev, ,]
[PointValuePair, prev, =, previous, [, i, ], ;, converged, =, converged, &&, checker, ., converged, (, iteration, ,, prev, ,]
[[, i, ], ;, converged, =, converged, &&, checker, ., converged, (, iteration, ,, prev, ,, simplex, ., getPoint, (]
[&&, checker, ., converged, (, iteration, ,, prev, ,, simplex, ., getPoint, (, i, ), ), ;, }, if, (]
[(, iteration, ,, prev, ,, simplex, ., getPoint, (, i, ), ), ;, }, if, (, converged, ), {, return]
[(, iteration, ,, prev, ,, simplex, ., getPoint, (, i, ), ), ;, }, if, (, converged, ), {, return]
[,, simplex, ., getPoint, (, i, ), ), ;, }, if, (, converged, ), {, return, simplex, ., getPoint, (]
[i, ), ), ;, }, if, (, converged, ), {, return, simplex, ., getPoint, (, 0, ), ;, }, }]
[), ;, }, if, (, converged, ), {, return, simplex, ., getPoint, (, 0, ), ;, }, }, previous, =]
[), ;, }, if, (, converged, ), {, return, simplex, ., getPoint, (, 0, ), ;, }, }, previous, =]
[), {, return, simplex, ., getPoint, (, 0, ), ;, }, }, previous, =, simplex, ., getPoints, (, ), ;]
[), {, return, simplex, ., getPoint, (, 0, ), ;, }, }, previous, =, simplex, ., getPoints, (, ), ;]
[., getPoint, (, 0, ), ;, }, }, previous, =, simplex, ., getPoints, (, ), ;, simplex, ., iterate, (]
[(, 0, ), ;, }, }, previous, =, simplex, ., getPoints, (, ), ;, simplex, ., iterate, (, evalFunc, ,]
[;, }, }, previous, =, simplex, ., getPoints, (, ), ;, simplex, ., iterate, (, evalFunc, ,, comparator, ), ;]
[}, }, previous, =, simplex, ., getPoints, (, ), ;, simplex, ., iterate, (, evalFunc, ,, comparator, ), ;, ++]
