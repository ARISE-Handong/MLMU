[CodingConvention, codingConvention, ;, private, final, boolean, removeGlobals, ;, private, boolean, preserveFunctionExpressionNames, ;, private, final, Set, <, Var, >, referenced, =]
[CodingConvention, codingConvention, ;, private, final, boolean, removeGlobals, ;, private, boolean, preserveFunctionExpressionNames, ;, private, final, Set, <, Var, >, referenced, =]
[Set, <, Var, >, referenced, =, Sets, ., newHashSet, (, ), ;, private, final, List, <, Var, >, maybeUnreferenced, =]
[Set, <, Var, >, referenced, =, Sets, ., newHashSet, (, ), ;, private, final, List, <, Var, >, maybeUnreferenced, =]
[List, <, Var, >, maybeUnreferenced, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Scope, >, allFunctionScopes, =]
[List, <, Var, >, maybeUnreferenced, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Scope, >, allFunctionScopes, =]
[Scope, >, allFunctionScopes, =, Lists, ., newArrayList, (, ), ;, private, final, Multimap, <, Var, ,, Assign, >, assignsByVar, =]
[Scope, >, allFunctionScopes, =, Lists, ., newArrayList, (, ), ;, private, final, Multimap, <, Var, ,, Assign, >, assignsByVar, =]
[Assign, >, assignsByVar, =, ArrayListMultimap, ., create, (, ), ;, private, final, Map, <, Node, ,, Assign, >, assignsByNode, =]
[Assign, >, assignsByVar, =, ArrayListMultimap, ., create, (, ), ;, private, final, Map, <, Node, ,, Assign, >, assignsByNode, =]
[Assign, >, assignsByNode, =, Maps, ., newHashMap, (, ), ;, private, final, Multimap, <, Var, ,, Node, >, classDefiningCalls, =]
[Assign, >, assignsByNode, =, Maps, ., newHashMap, (, ), ;, private, final, Multimap, <, Var, ,, Node, >, classDefiningCalls, =]
[Node, >, classDefiningCalls, =, ArrayListMultimap, ., create, (, ), ;, private, final, Multimap, <, Var, ,, Continuation, >, continuations, =]
[Node, >, classDefiningCalls, =, ArrayListMultimap, ., create, (, ), ;, private, final, Multimap, <, Var, ,, Continuation, >, continuations, =]
[;, private, CallSiteOptimizer, callSiteOptimizer, ;, RemoveUnusedVars, (, AbstractCompiler, compiler, ,, boolean, removeGlobals, ,, boolean, preserveFunctionExpressionNames, ,, boolean, modifyCallSites, ), {]
[;, private, CallSiteOptimizer, callSiteOptimizer, ;, RemoveUnusedVars, (, AbstractCompiler, compiler, ,, boolean, removeGlobals, ,, boolean, preserveFunctionExpressionNames, ,, boolean, modifyCallSites, ), {]
[;, RemoveUnusedVars, (, AbstractCompiler, compiler, ,, boolean, removeGlobals, ,, boolean, preserveFunctionExpressionNames, ,, boolean, modifyCallSites, ), {, this, ., compiler, =]
[(, AbstractCompiler, compiler, ,, boolean, removeGlobals, ,, boolean, preserveFunctionExpressionNames, ,, boolean, modifyCallSites, ), {, this, ., compiler, =, compiler, ;]
[(, AbstractCompiler, compiler, ,, boolean, removeGlobals, ,, boolean, preserveFunctionExpressionNames, ,, boolean, modifyCallSites, ), {, this, ., compiler, =, compiler, ;]
[boolean, removeGlobals, ,, boolean, preserveFunctionExpressionNames, ,, boolean, modifyCallSites, ), {, this, ., compiler, =, compiler, ;, this, ., codingConvention, =]
[boolean, removeGlobals, ,, boolean, preserveFunctionExpressionNames, ,, boolean, modifyCallSites, ), {, this, ., compiler, =, compiler, ;, this, ., codingConvention, =]
[boolean, modifyCallSites, ), {, this, ., compiler, =, compiler, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;]
[boolean, modifyCallSites, ), {, this, ., compiler, =, compiler, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;]
[this, ., compiler, =, compiler, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., removeGlobals, =]
[compiler, =, compiler, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., removeGlobals, =, removeGlobals, ;]
[compiler, =, compiler, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., removeGlobals, =, removeGlobals, ;]
[this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., removeGlobals, =, removeGlobals, ;, this, ., preserveFunctionExpressionNames, =]
[codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., removeGlobals, =, removeGlobals, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;]
[codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., removeGlobals, =, removeGlobals, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;]
[getCodingConvention, (, ), ;, this, ., removeGlobals, =, removeGlobals, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, this, ., modifyCallSites, =]
[this, ., modifyCallSites, =, modifyCallSites, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., modifyCallSites, =, modifyCallSites, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[modifyCallSites, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[modifyCallSites, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[modifyCallSites, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, SimpleDefinitionFinder, defFinder, =]
[checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, SimpleDefinitionFinder, defFinder, =, null, ;, if, (]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, SimpleDefinitionFinder, defFinder, =, null, ;, if, (, modifyCallSites, ), {]
[(, ), ., isNormalized, (, ), ), ;, SimpleDefinitionFinder, defFinder, =, null, ;, if, (, modifyCallSites, ), {, defFinder, =]
[isNormalized, (, ), ), ;, SimpleDefinitionFinder, defFinder, =, null, ;, if, (, modifyCallSites, ), {, defFinder, =, new, SimpleDefinitionFinder, (]
[), ;, SimpleDefinitionFinder, defFinder, =, null, ;, if, (, modifyCallSites, ), {, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[), ;, SimpleDefinitionFinder, defFinder, =, null, ;, if, (, modifyCallSites, ), {, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[=, null, ;, if, (, modifyCallSites, ), {, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (]
[;, if, (, modifyCallSites, ), {, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,]
[), {, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, }]
[defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, }, process, (]
[new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, }, process, (, externs, ,]
[(, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, }, process, (, externs, ,, root, ,]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, defFinder, ), {, if, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, modifyCallSites, ), {]
[Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, modifyCallSites, ), {]
[(, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, modifyCallSites, ), {, Preconditions, ., checkNotNull, (]
[,, Node, root, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, modifyCallSites, ), {, Preconditions, ., checkNotNull, (, defFinder, ), ;]
[root, ,, SimpleDefinitionFinder, defFinder, ), {, if, (, modifyCallSites, ), {, Preconditions, ., checkNotNull, (, defFinder, ), ;, callSiteOptimizer, =]
[defFinder, ), {, if, (, modifyCallSites, ), {, Preconditions, ., checkNotNull, (, defFinder, ), ;, callSiteOptimizer, =, new, CallSiteOptimizer, (]
[{, if, (, modifyCallSites, ), {, Preconditions, ., checkNotNull, (, defFinder, ), ;, callSiteOptimizer, =, new, CallSiteOptimizer, (, compiler, ,]
[), {, Preconditions, ., checkNotNull, (, defFinder, ), ;, callSiteOptimizer, =, new, CallSiteOptimizer, (, compiler, ,, defFinder, ), ;, }]
[Preconditions, ., checkNotNull, (, defFinder, ), ;, callSiteOptimizer, =, new, CallSiteOptimizer, (, compiler, ,, defFinder, ), ;, }, traverseAndRemoveUnusedReferences, (]
[), ;, callSiteOptimizer, =, new, CallSiteOptimizer, (, compiler, ,, defFinder, ), ;, }, traverseAndRemoveUnusedReferences, (, root, ), ;, if, (]
[), ;, callSiteOptimizer, =, new, CallSiteOptimizer, (, compiler, ,, defFinder, ), ;, }, traverseAndRemoveUnusedReferences, (, root, ), ;, if, (]
[callSiteOptimizer, =, new, CallSiteOptimizer, (, compiler, ,, defFinder, ), ;, }, traverseAndRemoveUnusedReferences, (, root, ), ;, if, (, callSiteOptimizer, !=]
[CallSiteOptimizer, (, compiler, ,, defFinder, ), ;, }, traverseAndRemoveUnusedReferences, (, root, ), ;, if, (, callSiteOptimizer, !=, null, ), {]
[CallSiteOptimizer, (, compiler, ,, defFinder, ), ;, }, traverseAndRemoveUnusedReferences, (, root, ), ;, if, (, callSiteOptimizer, !=, null, ), {]
[{, callSiteOptimizer, ., applyChanges, (, ), ;, }, }, private, void, traverseAndRemoveUnusedReferences, (, Node, root, ), {, Scope, scope, =]
[{, callSiteOptimizer, ., applyChanges, (, ), ;, }, }, private, void, traverseAndRemoveUnusedReferences, (, Node, root, ), {, Scope, scope, =]
[applyChanges, (, ), ;, }, }, private, void, traverseAndRemoveUnusedReferences, (, Node, root, ), {, Scope, scope, =, new, SyntacticScopeCreator, (]
[}, private, void, traverseAndRemoveUnusedReferences, (, Node, root, ), {, Scope, scope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (]
[void, traverseAndRemoveUnusedReferences, (, Node, root, ), {, Scope, scope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, root, ,]
[Node, root, ), {, Scope, scope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, root, ,, null, ), ;]
[), {, Scope, scope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, root, ,, null, ), ;, traverseNode, (]
[Scope, scope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, root, ,, null, ), ;, traverseNode, (, root, ,]
[=, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, root, ,, null, ), ;, traverseNode, (, root, ,, null, ,]
[), ., createScope, (, root, ,, null, ), ;, traverseNode, (, root, ,, null, ,, scope, ), ;, if, (]
[(, root, ,, null, ), ;, traverseNode, (, root, ,, null, ,, scope, ), ;, if, (, removeGlobals, ), {]
[,, null, ), ;, traverseNode, (, root, ,, null, ,, scope, ), ;, if, (, removeGlobals, ), {, collectMaybeUnreferencedVars, (]
[traverseNode, (, root, ,, null, ,, scope, ), ;, if, (, removeGlobals, ), {, collectMaybeUnreferencedVars, (, scope, ), ;, }]
[null, ,, scope, ), ;, if, (, removeGlobals, ), {, collectMaybeUnreferencedVars, (, scope, ), ;, }, interpretAssigns, (, ), ;]
[{, collectMaybeUnreferencedVars, (, scope, ), ;, }, interpretAssigns, (, ), ;, removeUnreferencedVars, (, ), ;, for, (, Scope, fnScope, :]
[scope, ), ;, }, interpretAssigns, (, ), ;, removeUnreferencedVars, (, ), ;, for, (, Scope, fnScope, :, allFunctionScopes, ), {]
[;, }, interpretAssigns, (, ), ;, removeUnreferencedVars, (, ), ;, for, (, Scope, fnScope, :, allFunctionScopes, ), {, removeUnreferencedFunctionArgs, (]
[;, }, }, private, void, traverseNode, (, Node, n, ,, Node, parent, ,, Scope, scope, ), {, int, type, =]
[;, }, }, private, void, traverseNode, (, Node, n, ,, Node, parent, ,, Scope, scope, ), {, int, type, =]
[,, Node, parent, ,, Scope, scope, ), {, int, type, =, n, ., getType, (, ), ;, Var, var, =]
[Scope, scope, ), {, int, type, =, n, ., getType, (, ), ;, Var, var, =, null, ;, switch, (]
[int, type, =, n, ., getType, (, ), ;, Var, var, =, null, ;, switch, (, type, ), {, case]
[int, type, =, n, ., getType, (, ), ;, Var, var, =, null, ;, switch, (, type, ), {, case]
[(, ), ;, Var, var, =, null, ;, switch, (, type, ), {, case, Token, ., FUNCTION, :, if, (]
[(, ), ;, Var, var, =, null, ;, switch, (, type, ), {, case, Token, ., FUNCTION, :, if, (]
[var, =, null, ;, switch, (, type, ), {, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (]
[switch, (, type, ), {, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {]
[type, ), {, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, var, =]
[type, ), {, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, var, =]
[Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, var, =, scope, ., getVar, (]
[Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, var, =, scope, ., getVar, (]
[Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, var, =, scope, ., getVar, (]
[var, =, scope, ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }, if, (]
[var, =, scope, ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }, if, (]
[var, =, scope, ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }, if, (]
[scope, ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }, if, (, var, !=]
[getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }, if, (, var, !=, null, &&]
[n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }, if, (, var, !=, null, &&, isRemovableVar, (]
[), ., getString, (, ), ), ;, }, if, (, var, !=, null, &&, isRemovableVar, (, var, ), ), {]
[), ., getString, (, ), ), ;, }, if, (, var, !=, null, &&, isRemovableVar, (, var, ), ), {]
[), ), ;, }, if, (, var, !=, null, &&, isRemovableVar, (, var, ), ), {, continuations, ., put, (]
[;, }, if, (, var, !=, null, &&, isRemovableVar, (, var, ), ), {, continuations, ., put, (, var, ,]
[(, var, !=, null, &&, isRemovableVar, (, var, ), ), {, continuations, ., put, (, var, ,, new, Continuation, (]
[!=, null, &&, isRemovableVar, (, var, ), ), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,]
[), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, }, else, {]
[continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, }, else, {, traverseFunction, (]
[put, (, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, }, else, {, traverseFunction, (, n, ,]
[n, ,, scope, ), ), ;, }, else, {, traverseFunction, (, n, ,, scope, ), ;, }, return, ;, case]
[n, ,, scope, ), ), ;, }, else, {, traverseFunction, (, n, ,, scope, ), ;, }, return, ;, case]
[else, {, traverseFunction, (, n, ,, scope, ), ;, }, return, ;, case, Token, ., ASSIGN, :, Assign, maybeAssign, =]
[else, {, traverseFunction, (, n, ,, scope, ), ;, }, return, ;, case, Token, ., ASSIGN, :, Assign, maybeAssign, =]
[n, ,, scope, ), ;, }, return, ;, case, Token, ., ASSIGN, :, Assign, maybeAssign, =, Assign, ., maybeCreateAssign, (]
[}, return, ;, case, Token, ., ASSIGN, :, Assign, maybeAssign, =, Assign, ., maybeCreateAssign, (, n, ), ;, if, (]
[}, return, ;, case, Token, ., ASSIGN, :, Assign, maybeAssign, =, Assign, ., maybeCreateAssign, (, n, ), ;, if, (]
[;, case, Token, ., ASSIGN, :, Assign, maybeAssign, =, Assign, ., maybeCreateAssign, (, n, ), ;, if, (, maybeAssign, !=]
[., ASSIGN, :, Assign, maybeAssign, =, Assign, ., maybeCreateAssign, (, n, ), ;, if, (, maybeAssign, !=, null, ), {]
[:, Assign, maybeAssign, =, Assign, ., maybeCreateAssign, (, n, ), ;, if, (, maybeAssign, !=, null, ), {, var, =]
[:, Assign, maybeAssign, =, Assign, ., maybeCreateAssign, (, n, ), ;, if, (, maybeAssign, !=, null, ), {, var, =]
[Assign, ., maybeCreateAssign, (, n, ), ;, if, (, maybeAssign, !=, null, ), {, var, =, scope, ., getVar, (]
[Assign, ., maybeCreateAssign, (, n, ), ;, if, (, maybeAssign, !=, null, ), {, var, =, scope, ., getVar, (]
[Assign, ., maybeCreateAssign, (, n, ), ;, if, (, maybeAssign, !=, null, ), {, var, =, scope, ., getVar, (]
[null, ), {, var, =, scope, ., getVar, (, maybeAssign, ., nameNode, ., getString, (, ), ), ;, if, (]
[null, ), {, var, =, scope, ., getVar, (, maybeAssign, ., nameNode, ., getString, (, ), ), ;, if, (]
[{, var, =, scope, ., getVar, (, maybeAssign, ., nameNode, ., getString, (, ), ), ;, if, (, var, !=]
[scope, ., getVar, (, maybeAssign, ., nameNode, ., getString, (, ), ), ;, if, (, var, !=, null, ), {]
[scope, ., getVar, (, maybeAssign, ., nameNode, ., getString, (, ), ), ;, if, (, var, !=, null, ), {]
[maybeAssign, ., nameNode, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, assignsByVar, ., put, (]
[nameNode, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, assignsByVar, ., put, (, var, ,]
[(, ), ), ;, if, (, var, !=, null, ), {, assignsByVar, ., put, (, var, ,, maybeAssign, ), ;]
[(, ), ), ;, if, (, var, !=, null, ), {, assignsByVar, ., put, (, var, ,, maybeAssign, ), ;]
[if, (, var, !=, null, ), {, assignsByVar, ., put, (, var, ,, maybeAssign, ), ;, assignsByNode, ., put, (]
[if, (, var, !=, null, ), {, assignsByVar, ., put, (, var, ,, maybeAssign, ), ;, assignsByNode, ., put, (]
[null, ), {, assignsByVar, ., put, (, var, ,, maybeAssign, ), ;, assignsByNode, ., put, (, maybeAssign, ., nameNode, ,]
[put, (, var, ,, maybeAssign, ), ;, assignsByNode, ., put, (, maybeAssign, ., nameNode, ,, maybeAssign, ), ;, if, (]
[put, (, var, ,, maybeAssign, ), ;, assignsByNode, ., put, (, maybeAssign, ., nameNode, ,, maybeAssign, ), ;, if, (]
[var, ,, maybeAssign, ), ;, assignsByNode, ., put, (, maybeAssign, ., nameNode, ,, maybeAssign, ), ;, if, (, isRemovableVar, (]
[), ;, assignsByNode, ., put, (, maybeAssign, ., nameNode, ,, maybeAssign, ), ;, if, (, isRemovableVar, (, var, ), &&]
[;, assignsByNode, ., put, (, maybeAssign, ., nameNode, ,, maybeAssign, ), ;, if, (, isRemovableVar, (, var, ), &&, !]
[;, assignsByNode, ., put, (, maybeAssign, ., nameNode, ,, maybeAssign, ), ;, if, (, isRemovableVar, (, var, ), &&, !]
[maybeAssign, ., nameNode, ,, maybeAssign, ), ;, if, (, isRemovableVar, (, var, ), &&, !, maybeAssign, ., mayHaveSecondarySideEffects, ), {]
[maybeAssign, ., nameNode, ,, maybeAssign, ), ;, if, (, isRemovableVar, (, var, ), &&, !, maybeAssign, ., mayHaveSecondarySideEffects, ), {]
[maybeAssign, ), ;, if, (, isRemovableVar, (, var, ), &&, !, maybeAssign, ., mayHaveSecondarySideEffects, ), {, continuations, ., put, (]
[;, if, (, isRemovableVar, (, var, ), &&, !, maybeAssign, ., mayHaveSecondarySideEffects, ), {, continuations, ., put, (, var, ,]
[isRemovableVar, (, var, ), &&, !, maybeAssign, ., mayHaveSecondarySideEffects, ), {, continuations, ., put, (, var, ,, new, Continuation, (]
[var, ), &&, !, maybeAssign, ., mayHaveSecondarySideEffects, ), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,]
[(, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, }, }, break, ;, case]
[(, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, }, }, break, ;, case]
[,, scope, ), ), ;, return, ;, }, }, }, break, ;, case, Token, ., CALL, :, Var, modifiedVar, =]
[return, ;, }, }, }, break, ;, case, Token, ., CALL, :, Var, modifiedVar, =, null, ;, SubclassRelationship, subclassRelationship, =]
[return, ;, }, }, }, break, ;, case, Token, ., CALL, :, Var, modifiedVar, =, null, ;, SubclassRelationship, subclassRelationship, =]
[}, break, ;, case, Token, ., CALL, :, Var, modifiedVar, =, null, ;, SubclassRelationship, subclassRelationship, =, codingConvention, ., getClassesDefinedByCall, (]
[., CALL, :, Var, modifiedVar, =, null, ;, SubclassRelationship, subclassRelationship, =, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (]
[., CALL, :, Var, modifiedVar, =, null, ;, SubclassRelationship, subclassRelationship, =, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (]
[:, Var, modifiedVar, =, null, ;, SubclassRelationship, subclassRelationship, =, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (, subclassRelationship, !=]
[=, null, ;, SubclassRelationship, subclassRelationship, =, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (, subclassRelationship, !=, null, ), {]
[;, SubclassRelationship, subclassRelationship, =, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (, subclassRelationship, !=, null, ), {, modifiedVar, =]
[;, SubclassRelationship, subclassRelationship, =, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (, subclassRelationship, !=, null, ), {, modifiedVar, =]
[codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (, subclassRelationship, !=, null, ), {, modifiedVar, =, scope, ., getVar, (]
[codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (, subclassRelationship, !=, null, ), {, modifiedVar, =, scope, ., getVar, (]
[null, ), {, modifiedVar, =, scope, ., getVar, (, subclassRelationship, ., subclassName, ), ;, }, else, {, String, className, =]
[null, ), {, modifiedVar, =, scope, ., getVar, (, subclassRelationship, ., subclassName, ), ;, }, else, {, String, className, =]
[=, scope, ., getVar, (, subclassRelationship, ., subclassName, ), ;, }, else, {, String, className, =, codingConvention, ., getSingletonGetterClassName, (]
[subclassRelationship, ., subclassName, ), ;, }, else, {, String, className, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (]
[subclassRelationship, ., subclassName, ), ;, }, else, {, String, className, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (]
[subclassName, ), ;, }, else, {, String, className, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, className, !=]
[}, else, {, String, className, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, className, !=, null, ), {]
[{, String, className, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, className, !=, null, ), {, modifiedVar, =]
[{, String, className, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, className, !=, null, ), {, modifiedVar, =]
[codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, className, !=, null, ), {, modifiedVar, =, scope, ., getVar, (]
[if, (, className, !=, null, ), {, modifiedVar, =, scope, ., getVar, (, className, ), ;, }, }, if, (]
[if, (, className, !=, null, ), {, modifiedVar, =, scope, ., getVar, (, className, ), ;, }, }, if, (]
[if, (, className, !=, null, ), {, modifiedVar, =, scope, ., getVar, (, className, ), ;, }, }, if, (]
[if, (, className, !=, null, ), {, modifiedVar, =, scope, ., getVar, (, className, ), ;, }, }, if, (]
[className, !=, null, ), {, modifiedVar, =, scope, ., getVar, (, className, ), ;, }, }, if, (, modifiedVar, !=]
[null, ), {, modifiedVar, =, scope, ., getVar, (, className, ), ;, }, }, if, (, modifiedVar, !=, null, &&]
[null, ), {, modifiedVar, =, scope, ., getVar, (, className, ), ;, }, }, if, (, modifiedVar, !=, null, &&]
[., getVar, (, className, ), ;, }, }, if, (, modifiedVar, !=, null, &&, modifiedVar, ., isGlobal, (, ), &&]
[getVar, (, className, ), ;, }, }, if, (, modifiedVar, !=, null, &&, modifiedVar, ., isGlobal, (, ), &&, !]
[getVar, (, className, ), ;, }, }, if, (, modifiedVar, !=, null, &&, modifiedVar, ., isGlobal, (, ), &&, !]
[;, }, }, if, (, modifiedVar, !=, null, &&, modifiedVar, ., isGlobal, (, ), &&, !, referenced, ., contains, (]
[(, modifiedVar, !=, null, &&, modifiedVar, ., isGlobal, (, ), &&, !, referenced, ., contains, (, modifiedVar, ), ), {]
[(, modifiedVar, !=, null, &&, modifiedVar, ., isGlobal, (, ), &&, !, referenced, ., contains, (, modifiedVar, ), ), {]
[&&, modifiedVar, ., isGlobal, (, ), &&, !, referenced, ., contains, (, modifiedVar, ), ), {, classDefiningCalls, ., put, (]
[., isGlobal, (, ), &&, !, referenced, ., contains, (, modifiedVar, ), ), {, classDefiningCalls, ., put, (, modifiedVar, ,]
[), &&, !, referenced, ., contains, (, modifiedVar, ), ), {, classDefiningCalls, ., put, (, modifiedVar, ,, parent, ), ;]
[), &&, !, referenced, ., contains, (, modifiedVar, ), ), {, classDefiningCalls, ., put, (, modifiedVar, ,, parent, ), ;]
[., contains, (, modifiedVar, ), ), {, classDefiningCalls, ., put, (, modifiedVar, ,, parent, ), ;, continuations, ., put, (]
[(, modifiedVar, ), ), {, classDefiningCalls, ., put, (, modifiedVar, ,, parent, ), ;, continuations, ., put, (, modifiedVar, ,]
[), {, classDefiningCalls, ., put, (, modifiedVar, ,, parent, ), ;, continuations, ., put, (, modifiedVar, ,, new, Continuation, (]
[classDefiningCalls, ., put, (, modifiedVar, ,, parent, ), ;, continuations, ., put, (, modifiedVar, ,, new, Continuation, (, n, ,]
[., put, (, modifiedVar, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, break, ;, case]
[., put, (, modifiedVar, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, break, ;, case]
[,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, break, ;, case, Token, ., NAME, :]
[Continuation, (, n, ,, scope, ), ), ;, return, ;, }, break, ;, case, Token, ., NAME, :, var, =]
[Continuation, (, n, ,, scope, ), ), ;, return, ;, }, break, ;, case, Token, ., NAME, :, var, =]
[scope, ), ), ;, return, ;, }, break, ;, case, Token, ., NAME, :, var, =, scope, ., getVar, (]
[scope, ), ), ;, return, ;, }, break, ;, case, Token, ., NAME, :, var, =, scope, ., getVar, (]
[case, Token, ., NAME, :, var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[case, Token, ., NAME, :, var, =, scope, ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[(, n, ., getString, (, ), ), ;, if, (, parent, ., isVar, (, ), ), {, Node, value, =]
[(, n, ., getString, (, ), ), ;, if, (, parent, ., isVar, (, ), ), {, Node, value, =]
[if, (, parent, ., isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (]
[if, (, parent, ., isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (]
[if, (, parent, ., isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (]
[if, (, parent, ., isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (]
[if, (, parent, ., isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (]
[parent, ., isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, !=]
[isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&]
[isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&]
[), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&, var, !=]
[{, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&, var, !=, null, &&]
[value, =, n, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&, var, !=, null, &&, isRemovableVar, (]
[., getFirstChild, (, ), ;, if, (, value, !=, null, &&, var, !=, null, &&, isRemovableVar, (, var, ), &&]
[getFirstChild, (, ), ;, if, (, value, !=, null, &&, var, !=, null, &&, isRemovableVar, (, var, ), &&, !]
[getFirstChild, (, ), ;, if, (, value, !=, null, &&, var, !=, null, &&, isRemovableVar, (, var, ), &&, !]
[if, (, value, !=, null, &&, var, !=, null, &&, isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (]
[value, !=, null, &&, var, !=, null, &&, isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,]
[var, !=, null, &&, isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), {]
[var, !=, null, &&, isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), {]
[isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), {, continuations, ., put, (]
[var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), {, continuations, ., put, (, var, ,]
[!, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), {, continuations, ., put, (, var, ,, new, Continuation, (]
[., mayHaveSideEffects, (, value, ,, compiler, ), ), {, continuations, ., put, (, var, ,, new, Continuation, (, n, ,]
[(, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, }, else, {, if, (]
[(, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, }, else, {, if, (]
[(, var, ,, new, Continuation, (, n, ,, scope, ), ), ;, return, ;, }, }, else, {, if, (]
[Continuation, (, n, ,, scope, ), ), ;, return, ;, }, }, else, {, if, (, "arguments", ., equals, (]
[Continuation, (, n, ,, scope, ), ), ;, return, ;, }, }, else, {, if, (, "arguments", ., equals, (]
[;, return, ;, }, }, else, {, if, (, "arguments", ., equals, (, n, ., getString, (, ), ), &&]
[;, return, ;, }, }, else, {, if, (, "arguments", ., equals, (, n, ., getString, (, ), ), &&]
[., equals, (, n, ., getString, (, ), ), &&, scope, ., isLocal, (, ), ), {, Node, lp, =]
[., equals, (, n, ., getString, (, ), ), &&, scope, ., isLocal, (, ), ), {, Node, lp, =]
[., equals, (, n, ., getString, (, ), ), &&, scope, ., isLocal, (, ), ), {, Node, lp, =]
[., equals, (, n, ., getString, (, ), ), &&, scope, ., isLocal, (, ), ), {, Node, lp, =]
[=, scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, a, =]
[=, scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, a, =]
[., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, a, =, lp, ., getFirstChild, (, ), ;]
[., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, a, =, lp, ., getFirstChild, (, ), ;]
[(, ), ., getNext, (, ), ;, for, (, Node, a, =, lp, ., getFirstChild, (, ), ;, a, !=]
[., getNext, (, ), ;, for, (, Node, a, =, lp, ., getFirstChild, (, ), ;, a, !=, null, ;]
[(, ), ;, for, (, Node, a, =, lp, ., getFirstChild, (, ), ;, a, !=, null, ;, a, =]
[(, ), ;, for, (, Node, a, =, lp, ., getFirstChild, (, ), ;, a, !=, null, ;, a, =]
[=, lp, ., getFirstChild, (, ), ;, a, !=, null, ;, a, =, a, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, a, !=, null, ;, a, =, a, ., getNext, (, ), ), {, markReferencedVar, (]
[., getFirstChild, (, ), ;, a, !=, null, ;, a, =, a, ., getNext, (, ), ), {, markReferencedVar, (]
[;, a, !=, null, ;, a, =, a, ., getNext, (, ), ), {, markReferencedVar, (, scope, ., getVar, (]
[;, a, !=, null, ;, a, =, a, ., getNext, (, ), ), {, markReferencedVar, (, scope, ., getVar, (]
[), {, markReferencedVar, (, scope, ., getVar, (, a, ., getString, (, ), ), ), ;, }, }, if, (]
[), {, markReferencedVar, (, scope, ., getVar, (, a, ., getString, (, ), ), ), ;, }, }, if, (]
[markReferencedVar, (, scope, ., getVar, (, a, ., getString, (, ), ), ), ;, }, }, if, (, var, !=]
[(, a, ., getString, (, ), ), ), ;, }, }, if, (, var, !=, null, ), {, if, (]
[., getString, (, ), ), ), ;, }, }, if, (, var, !=, null, ), {, if, (, isRemovableVar, (]
[;, }, }, if, (, var, !=, null, ), {, if, (, isRemovableVar, (, var, ), ), {, if, (]
[}, }, if, (, var, !=, null, ), {, if, (, isRemovableVar, (, var, ), ), {, if, (, !]
[}, }, if, (, var, !=, null, ), {, if, (, isRemovableVar, (, var, ), ), {, if, (, !]
[var, !=, null, ), {, if, (, isRemovableVar, (, var, ), ), {, if, (, !, assignsByNode, ., containsKey, (]
[{, if, (, isRemovableVar, (, var, ), ), {, if, (, !, assignsByNode, ., containsKey, (, n, ), ), {]
[(, isRemovableVar, (, var, ), ), {, if, (, !, assignsByNode, ., containsKey, (, n, ), ), {, markReferencedVar, (]
[if, (, !, assignsByNode, ., containsKey, (, n, ), ), {, markReferencedVar, (, var, ), ;, }, }, else, {]
[!, assignsByNode, ., containsKey, (, n, ), ), {, markReferencedVar, (, var, ), ;, }, }, else, {, markReferencedVar, (]
[}, }, else, {, markReferencedVar, (, var, ), ;, }, }, }, break, ;, }, for, (, Node, c, =]
[}, }, else, {, markReferencedVar, (, var, ), ;, }, }, }, break, ;, }, for, (, Node, c, =]
[var, ), ;, }, }, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[var, ), ;, }, }, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[;, }, }, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[}, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, traverseNode, (]
[(, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, traverseNode, (, c, ,]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, traverseNode, (, c, ,, n, ,]
[(, c, ,, n, ,, scope, ), ;, }, }, private, boolean, isRemovableVar, (, Var, var, ), {, if, (]
[(, c, ,, n, ,, scope, ), ;, }, }, private, boolean, isRemovableVar, (, Var, var, ), {, if, (]
[c, ,, n, ,, scope, ), ;, }, }, private, boolean, isRemovableVar, (, Var, var, ), {, if, (, !]
[n, ,, scope, ), ;, }, }, private, boolean, isRemovableVar, (, Var, var, ), {, if, (, !, removeGlobals, &&]
[n, ,, scope, ), ;, }, }, private, boolean, isRemovableVar, (, Var, var, ), {, if, (, !, removeGlobals, &&]
[boolean, isRemovableVar, (, Var, var, ), {, if, (, !, removeGlobals, &&, var, ., isGlobal, (, ), ), {, return]
[), {, if, (, !, removeGlobals, &&, var, ., isGlobal, (, ), ), {, return, false, ;, }, if, (]
[), {, if, (, !, removeGlobals, &&, var, ., isGlobal, (, ), ), {, return, false, ;, }, if, (]
[!, removeGlobals, &&, var, ., isGlobal, (, ), ), {, return, false, ;, }, if, (, referenced, ., contains, (]
[isGlobal, (, ), ), {, return, false, ;, }, if, (, referenced, ., contains, (, var, ), ), {, return]
[return, false, ;, }, if, (, referenced, ., contains, (, var, ), ), {, return, false, ;, }, if, (]
[return, false, ;, }, if, (, referenced, ., contains, (, var, ), ), {, return, false, ;, }, if, (]
[if, (, referenced, ., contains, (, var, ), ), {, return, false, ;, }, if, (, codingConvention, ., isExported, (]
[if, (, referenced, ., contains, (, var, ), ), {, return, false, ;, }, if, (, codingConvention, ., isExported, (]
[{, return, false, ;, }, if, (, codingConvention, ., isExported, (, var, ., getName, (, ), ), ), {, return]
[}, if, (, codingConvention, ., isExported, (, var, ., getName, (, ), ), ), {, return, false, ;, }, return]
[{, return, false, ;, }, return, true, ;, }, private, void, traverseFunction, (, Node, n, ,, Scope, parentScope, ), {]
[{, return, false, ;, }, return, true, ;, }, private, void, traverseFunction, (, Node, n, ,, Scope, parentScope, ), {]
[}, return, true, ;, }, private, void, traverseFunction, (, Node, n, ,, Scope, parentScope, ), {, Preconditions, ., checkState, (]
[}, return, true, ;, }, private, void, traverseFunction, (, Node, n, ,, Scope, parentScope, ), {, Preconditions, ., checkState, (]
[}, return, true, ;, }, private, void, traverseFunction, (, Node, n, ,, Scope, parentScope, ), {, Preconditions, ., checkState, (]
[void, traverseFunction, (, Node, n, ,, Scope, parentScope, ), {, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==]
[Node, n, ,, Scope, parentScope, ), {, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 3, ), ;]
[Node, n, ,, Scope, parentScope, ), {, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 3, ), ;]
[parentScope, ), {, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 3, ), ;, Preconditions, ., checkState, (]
[parentScope, ), {, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 3, ), ;, Preconditions, ., checkState, (]
[), ==, 3, ), ;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, body, =]
[), ==, 3, ), ;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, body, =]
[., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, body, =, n, ., getLastChild, (, ), ;]
[., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, body, =, n, ., getLastChild, (, ), ;]
[., isFunction, (, ), ), ;, final, Node, body, =, n, ., getLastChild, (, ), ;, Preconditions, ., checkState, (]
[., isFunction, (, ), ), ;, final, Node, body, =, n, ., getLastChild, (, ), ;, Preconditions, ., checkState, (]
[., isFunction, (, ), ), ;, final, Node, body, =, n, ., getLastChild, (, ), ;, Preconditions, ., checkState, (]
[., isFunction, (, ), ), ;, final, Node, body, =, n, ., getLastChild, (, ), ;, Preconditions, ., checkState, (]
[final, Node, body, =, n, ., getLastChild, (, ), ;, Preconditions, ., checkState, (, body, ., getNext, (, ), ==]
[body, =, n, ., getLastChild, (, ), ;, Preconditions, ., checkState, (, body, ., getNext, (, ), ==, null, &&]
[body, =, n, ., getLastChild, (, ), ;, Preconditions, ., checkState, (, body, ., getNext, (, ), ==, null, &&]
[checkState, (, body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ), ;, Scope, fnScope, =]
[checkState, (, body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ), ;, Scope, fnScope, =]
[., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ), ;, Scope, fnScope, =, new, SyntacticScopeCreator, (]
[null, &&, body, ., isBlock, (, ), ), ;, Scope, fnScope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (]
[body, ., isBlock, (, ), ), ;, Scope, fnScope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, n, ,]
[(, ), ), ;, Scope, fnScope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, n, ,, parentScope, ), ;]
[), ;, Scope, fnScope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, n, ,, parentScope, ), ;, traverseNode, (]
[Scope, fnScope, =, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, n, ,, parentScope, ), ;, traverseNode, (, body, ,]
[=, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, n, ,, parentScope, ), ;, traverseNode, (, body, ,, n, ,]
[(, compiler, ), ., createScope, (, n, ,, parentScope, ), ;, traverseNode, (, body, ,, n, ,, fnScope, ), ;]
[), ., createScope, (, n, ,, parentScope, ), ;, traverseNode, (, body, ,, n, ,, fnScope, ), ;, collectMaybeUnreferencedVars, (]
[(, n, ,, parentScope, ), ;, traverseNode, (, body, ,, n, ,, fnScope, ), ;, collectMaybeUnreferencedVars, (, fnScope, ), ;]
[(, n, ,, parentScope, ), ;, traverseNode, (, body, ,, n, ,, fnScope, ), ;, collectMaybeUnreferencedVars, (, fnScope, ), ;]
[), ;, traverseNode, (, body, ,, n, ,, fnScope, ), ;, collectMaybeUnreferencedVars, (, fnScope, ), ;, allFunctionScopes, ., add, (]
[fnScope, ), ;, }, private, void, collectMaybeUnreferencedVars, (, Scope, scope, ), {, for, (, Iterator, <, Var, >, it, =]
[fnScope, ), ;, }, private, void, collectMaybeUnreferencedVars, (, Scope, scope, ), {, for, (, Iterator, <, Var, >, it, =]
[collectMaybeUnreferencedVars, (, Scope, scope, ), {, for, (, Iterator, <, Var, >, it, =, scope, ., getVars, (, ), ;]
[collectMaybeUnreferencedVars, (, Scope, scope, ), {, for, (, Iterator, <, Var, >, it, =, scope, ., getVars, (, ), ;]
[>, it, =, scope, ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, var, =]
[>, it, =, scope, ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, var, =]
[;, it, ., hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (, ), ;, if, (]
[., hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (, ), ;, if, (, isRemovableVar, (]
[;, ), {, Var, var, =, it, ., next, (, ), ;, if, (, isRemovableVar, (, var, ), ), {]
[;, ), {, Var, var, =, it, ., next, (, ), ;, if, (, isRemovableVar, (, var, ), ), {]
[var, =, it, ., next, (, ), ;, if, (, isRemovableVar, (, var, ), ), {, maybeUnreferenced, ., add, (]
[., add, (, var, ), ;, }, }, }, private, void, removeUnreferencedFunctionArgs, (, Scope, fnScope, ), {, Node, function, =]
[., add, (, var, ), ;, }, }, }, private, void, removeUnreferencedFunctionArgs, (, Scope, fnScope, ), {, Node, function, =]
[}, }, }, private, void, removeUnreferencedFunctionArgs, (, Scope, fnScope, ), {, Node, function, =, fnScope, ., getRootNode, (, ), ;]
[}, }, }, private, void, removeUnreferencedFunctionArgs, (, Scope, fnScope, ), {, Node, function, =, fnScope, ., getRootNode, (, ), ;]
[void, removeUnreferencedFunctionArgs, (, Scope, fnScope, ), {, Node, function, =, fnScope, ., getRootNode, (, ), ;, Preconditions, ., checkState, (]
[void, removeUnreferencedFunctionArgs, (, Scope, fnScope, ), {, Node, function, =, fnScope, ., getRootNode, (, ), ;, Preconditions, ., checkState, (]
[=, fnScope, ., getRootNode, (, ), ;, Preconditions, ., checkState, (, function, ., isFunction, (, ), ), ;, if, (]
[=, fnScope, ., getRootNode, (, ), ;, Preconditions, ., checkState, (, function, ., isFunction, (, ), ), ;, if, (]
[(, ), ;, Preconditions, ., checkState, (, function, ., isFunction, (, ), ), ;, if, (, NodeUtil, ., isGetOrSetKey, (]
[(, ), ;, Preconditions, ., checkState, (, function, ., isFunction, (, ), ), ;, if, (, NodeUtil, ., isGetOrSetKey, (]
[if, (, NodeUtil, ., isGetOrSetKey, (, function, ., getParent, (, ), ), ), {, return, ;, }, Node, argList, =]
[NodeUtil, ., isGetOrSetKey, (, function, ., getParent, (, ), ), ), {, return, ;, }, Node, argList, =, getFunctionArgList, (]
[getParent, (, ), ), ), {, return, ;, }, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, modifyCallers, =]
[getParent, (, ), ), ), {, return, ;, }, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, modifyCallers, =]
[), ), ), {, return, ;, }, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, modifyCallers, =, modifyCallSites, &&]
[), ), ), {, return, ;, }, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, modifyCallers, =, modifyCallSites, &&]
[return, ;, }, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, modifyCallers, =, modifyCallSites, &&, callSiteOptimizer, ., canModifyCallers, (]
[=, getFunctionArgList, (, function, ), ;, boolean, modifyCallers, =, modifyCallSites, &&, callSiteOptimizer, ., canModifyCallers, (, function, ), ;, if, (]
[getFunctionArgList, (, function, ), ;, boolean, modifyCallers, =, modifyCallSites, &&, callSiteOptimizer, ., canModifyCallers, (, function, ), ;, if, (, !]
[modifyCallSites, &&, callSiteOptimizer, ., canModifyCallers, (, function, ), ;, if, (, !, modifyCallers, ), {, Node, lastArg, ;, while, (]
[modifyCallSites, &&, callSiteOptimizer, ., canModifyCallers, (, function, ), ;, if, (, !, modifyCallers, ), {, Node, lastArg, ;, while, (]
[&&, callSiteOptimizer, ., canModifyCallers, (, function, ), ;, if, (, !, modifyCallers, ), {, Node, lastArg, ;, while, (, (]
[., canModifyCallers, (, function, ), ;, if, (, !, modifyCallers, ), {, Node, lastArg, ;, while, (, (, lastArg, =]
[., canModifyCallers, (, function, ), ;, if, (, !, modifyCallers, ), {, Node, lastArg, ;, while, (, (, lastArg, =]
[(, !, modifyCallers, ), {, Node, lastArg, ;, while, (, (, lastArg, =, argList, ., getLastChild, (, ), ), !=]
[lastArg, ;, while, (, (, lastArg, =, argList, ., getLastChild, (, ), ), !=, null, ), {, Var, var, =]
[lastArg, ;, while, (, (, lastArg, =, argList, ., getLastChild, (, ), ), !=, null, ), {, Var, var, =]
[(, lastArg, =, argList, ., getLastChild, (, ), ), !=, null, ), {, Var, var, =, fnScope, ., getVar, (]
[(, lastArg, =, argList, ., getLastChild, (, ), ), !=, null, ), {, Var, var, =, fnScope, ., getVar, (]
[!=, null, ), {, Var, var, =, fnScope, ., getVar, (, lastArg, ., getString, (, ), ), ;, if, (]
[null, ), {, Var, var, =, fnScope, ., getVar, (, lastArg, ., getString, (, ), ), ;, if, (, !]
[null, ), {, Var, var, =, fnScope, ., getVar, (, lastArg, ., getString, (, ), ), ;, if, (, !]
[var, =, fnScope, ., getVar, (, lastArg, ., getString, (, ), ), ;, if, (, !, referenced, ., contains, (]
[getVar, (, lastArg, ., getString, (, ), ), ;, if, (, !, referenced, ., contains, (, var, ), ), {]
[getVar, (, lastArg, ., getString, (, ), ), ;, if, (, !, referenced, ., contains, (, var, ), ), {]
[getString, (, ), ), ;, if, (, !, referenced, ., contains, (, var, ), ), {, argList, ., removeChild, (]
[), ;, if, (, !, referenced, ., contains, (, var, ), ), {, argList, ., removeChild, (, lastArg, ), ;]
[), ;, if, (, !, referenced, ., contains, (, var, ), ), {, argList, ., removeChild, (, lastArg, ), ;]
[(, lastArg, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, break, ;, }, }, }, else, {]
[(, lastArg, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, break, ;, }, }, }, else, {]
[compiler, ., reportCodeChange, (, ), ;, }, else, {, break, ;, }, }, }, else, {, callSiteOptimizer, ., optimize, (]
[reportCodeChange, (, ), ;, }, else, {, break, ;, }, }, }, else, {, callSiteOptimizer, ., optimize, (, fnScope, ,]
[., optimize, (, fnScope, ,, referenced, ), ;, }, }, private, static, Node, getFunctionArgList, (, Node, function, ), {, return]
[., optimize, (, fnScope, ,, referenced, ), ;, }, }, private, static, Node, getFunctionArgList, (, Node, function, ), {, return]
[., optimize, (, fnScope, ,, referenced, ), ;, }, }, private, static, Node, getFunctionArgList, (, Node, function, ), {, return]
[CallSiteOptimizer, {, private, final, AbstractCompiler, compiler, ;, private, final, SimpleDefinitionFinder, defFinder, ;, private, final, List, <, Node, >, toRemove, =]
[CallSiteOptimizer, {, private, final, AbstractCompiler, compiler, ;, private, final, SimpleDefinitionFinder, defFinder, ;, private, final, List, <, Node, >, toRemove, =]
[List, <, Node, >, toRemove, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Node, >, toReplaceWithZero, =]
[List, <, Node, >, toRemove, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Node, >, toReplaceWithZero, =]
[<, Node, >, toReplaceWithZero, =, Lists, ., newArrayList, (, ), ;, CallSiteOptimizer, (, AbstractCompiler, compiler, ,, SimpleDefinitionFinder, defFinder, ), {]
[<, Node, >, toReplaceWithZero, =, Lists, ., newArrayList, (, ), ;, CallSiteOptimizer, (, AbstractCompiler, compiler, ,, SimpleDefinitionFinder, defFinder, ), {]
[=, Lists, ., newArrayList, (, ), ;, CallSiteOptimizer, (, AbstractCompiler, compiler, ,, SimpleDefinitionFinder, defFinder, ), {, this, ., compiler, =]
[., newArrayList, (, ), ;, CallSiteOptimizer, (, AbstractCompiler, compiler, ,, SimpleDefinitionFinder, defFinder, ), {, this, ., compiler, =, compiler, ;]
[., newArrayList, (, ), ;, CallSiteOptimizer, (, AbstractCompiler, compiler, ,, SimpleDefinitionFinder, defFinder, ), {, this, ., compiler, =, compiler, ;]
[;, CallSiteOptimizer, (, AbstractCompiler, compiler, ,, SimpleDefinitionFinder, defFinder, ), {, this, ., compiler, =, compiler, ;, this, ., defFinder, =]
[defFinder, ;, }, public, void, optimize, (, Scope, fnScope, ,, Set, <, Var, >, referenced, ), {, Node, function, =]
[defFinder, ;, }, public, void, optimize, (, Scope, fnScope, ,, Set, <, Var, >, referenced, ), {, Node, function, =]
[(, Scope, fnScope, ,, Set, <, Var, >, referenced, ), {, Node, function, =, fnScope, ., getRootNode, (, ), ;]
[(, Scope, fnScope, ,, Set, <, Var, >, referenced, ), {, Node, function, =, fnScope, ., getRootNode, (, ), ;]
[Set, <, Var, >, referenced, ), {, Node, function, =, fnScope, ., getRootNode, (, ), ;, Preconditions, ., checkState, (]
[Set, <, Var, >, referenced, ), {, Node, function, =, fnScope, ., getRootNode, (, ), ;, Preconditions, ., checkState, (]
[fnScope, ., getRootNode, (, ), ;, Preconditions, ., checkState, (, function, ., isFunction, (, ), ), ;, Node, argList, =]
[getRootNode, (, ), ;, Preconditions, ., checkState, (, function, ., isFunction, (, ), ), ;, Node, argList, =, getFunctionArgList, (]
[checkState, (, function, ., isFunction, (, ), ), ;, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, changeCallSignature, =]
[function, ., isFunction, (, ), ), ;, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, changeCallSignature, =, canChangeSignature, (]
[(, ), ), ;, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, changeCallSignature, =, canChangeSignature, (, function, ), ;]
[), ;, Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, changeCallSignature, =, canChangeSignature, (, function, ), ;, markUnreferencedFunctionArgs, (]
[Node, argList, =, getFunctionArgList, (, function, ), ;, boolean, changeCallSignature, =, canChangeSignature, (, function, ), ;, markUnreferencedFunctionArgs, (, fnScope, ,]
[=, getFunctionArgList, (, function, ), ;, boolean, changeCallSignature, =, canChangeSignature, (, function, ), ;, markUnreferencedFunctionArgs, (, fnScope, ,, function, ,]
[(, function, ), ;, boolean, changeCallSignature, =, canChangeSignature, (, function, ), ;, markUnreferencedFunctionArgs, (, fnScope, ,, function, ,, referenced, ,]
[(, function, ), ;, boolean, changeCallSignature, =, canChangeSignature, (, function, ), ;, markUnreferencedFunctionArgs, (, fnScope, ,, function, ,, referenced, ,]
[=, canChangeSignature, (, function, ), ;, markUnreferencedFunctionArgs, (, fnScope, ,, function, ,, referenced, ,, argList, ., getFirstChild, (, ), ,]
[(, function, ), ;, markUnreferencedFunctionArgs, (, fnScope, ,, function, ,, referenced, ,, argList, ., getFirstChild, (, ), ,, 0, ,]
[(, ), ,, 0, ,, changeCallSignature, ), ;, }, public, void, applyChanges, (, ), {, for, (, Node, n, :]
[0, ,, changeCallSignature, ), ;, }, public, void, applyChanges, (, ), {, for, (, Node, n, :, toRemove, ), {]
[0, ,, changeCallSignature, ), ;, }, public, void, applyChanges, (, ), {, for, (, Node, n, :, toRemove, ), {]
[0, ,, changeCallSignature, ), ;, }, public, void, applyChanges, (, ), {, for, (, Node, n, :, toRemove, ), {]
[applyChanges, (, ), {, for, (, Node, n, :, toRemove, ), {, n, ., getParent, (, ), ., removeChild, (]
[{, for, (, Node, n, :, toRemove, ), {, n, ., getParent, (, ), ., removeChild, (, n, ), ;]
[{, for, (, Node, n, :, toRemove, ), {, n, ., getParent, (, ), ., removeChild, (, n, ), ;]
[(, ), ., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, for, (, Node, n, :]
[removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, for, (, Node, n, :, toReplaceWithZero, ), {]
[removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, for, (, Node, n, :, toReplaceWithZero, ), {]
[removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, for, (, Node, n, :, toReplaceWithZero, ), {]
[(, ), ;, }, for, (, Node, n, :, toReplaceWithZero, ), {, n, ., getParent, (, ), ., replaceChild, (]
[;, }, for, (, Node, n, :, toReplaceWithZero, ), {, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[;, }, for, (, Node, n, :, toReplaceWithZero, ), {, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[;, }, for, (, Node, n, :, toReplaceWithZero, ), {, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[Node, n, :, toReplaceWithZero, ), {, n, ., getParent, (, ), ., replaceChild, (, n, ,, IR, ., number, (]
[{, n, ., getParent, (, ), ., replaceChild, (, n, ,, IR, ., number, (, 0, ), ., srcref, (]
[(, ), ., replaceChild, (, n, ,, IR, ., number, (, 0, ), ., srcref, (, n, ), ), ;]
[(, ), ., replaceChild, (, n, ,, IR, ., number, (, 0, ), ., srcref, (, n, ), ), ;]
[function, ,, Set, <, Var, >, referenced, ,, Node, param, ,, int, paramIndex, ,, boolean, canChangeSignature, ), {, if, (]
[function, ,, Set, <, Var, >, referenced, ,, Node, param, ,, int, paramIndex, ,, boolean, canChangeSignature, ), {, if, (]
[Set, <, Var, >, referenced, ,, Node, param, ,, int, paramIndex, ,, boolean, canChangeSignature, ), {, if, (, param, !=]
[Node, param, ,, int, paramIndex, ,, boolean, canChangeSignature, ), {, if, (, param, !=, null, ), {, boolean, hasFollowing, =]
[,, int, paramIndex, ,, boolean, canChangeSignature, ), {, if, (, param, !=, null, ), {, boolean, hasFollowing, =, markUnreferencedFunctionArgs, (]
[paramIndex, ,, boolean, canChangeSignature, ), {, if, (, param, !=, null, ), {, boolean, hasFollowing, =, markUnreferencedFunctionArgs, (, scope, ,]
[boolean, canChangeSignature, ), {, if, (, param, !=, null, ), {, boolean, hasFollowing, =, markUnreferencedFunctionArgs, (, scope, ,, function, ,]
[), {, if, (, param, !=, null, ), {, boolean, hasFollowing, =, markUnreferencedFunctionArgs, (, scope, ,, function, ,, referenced, ,]
[), {, if, (, param, !=, null, ), {, boolean, hasFollowing, =, markUnreferencedFunctionArgs, (, scope, ,, function, ,, referenced, ,]
[null, ), {, boolean, hasFollowing, =, markUnreferencedFunctionArgs, (, scope, ,, function, ,, referenced, ,, param, ., getNext, (, ), ,]
[null, ), {, boolean, hasFollowing, =, markUnreferencedFunctionArgs, (, scope, ,, function, ,, referenced, ,, param, ., getNext, (, ), ,]
[{, boolean, hasFollowing, =, markUnreferencedFunctionArgs, (, scope, ,, function, ,, referenced, ,, param, ., getNext, (, ), ,, paramIndex, +]
[hasFollowing, =, markUnreferencedFunctionArgs, (, scope, ,, function, ,, referenced, ,, param, ., getNext, (, ), ,, paramIndex, +, 1, ,]
[function, ,, referenced, ,, param, ., getNext, (, ), ,, paramIndex, +, 1, ,, canChangeSignature, ), ;, Var, var, =]
[function, ,, referenced, ,, param, ., getNext, (, ), ,, paramIndex, +, 1, ,, canChangeSignature, ), ;, Var, var, =]
[param, ., getNext, (, ), ,, paramIndex, +, 1, ,, canChangeSignature, ), ;, Var, var, =, scope, ., getVar, (]
[param, ., getNext, (, ), ,, paramIndex, +, 1, ,, canChangeSignature, ), ;, Var, var, =, scope, ., getVar, (]
[,, canChangeSignature, ), ;, Var, var, =, scope, ., getVar, (, param, ., getString, (, ), ), ;, if, (]
[canChangeSignature, ), ;, Var, var, =, scope, ., getVar, (, param, ., getString, (, ), ), ;, if, (, !]
[canChangeSignature, ), ;, Var, var, =, scope, ., getVar, (, param, ., getString, (, ), ), ;, if, (, !]
[var, =, scope, ., getVar, (, param, ., getString, (, ), ), ;, if, (, !, referenced, ., contains, (]
[getVar, (, param, ., getString, (, ), ), ;, if, (, !, referenced, ., contains, (, var, ), ), {]
[getVar, (, param, ., getString, (, ), ), ;, if, (, !, referenced, ., contains, (, var, ), ), {]
[getString, (, ), ), ;, if, (, !, referenced, ., contains, (, var, ), ), {, Preconditions, ., checkNotNull, (]
[(, !, referenced, ., contains, (, var, ), ), {, Preconditions, ., checkNotNull, (, var, ), ;, boolean, modifyAllCallSites, =]
[(, !, referenced, ., contains, (, var, ), ), {, Preconditions, ., checkNotNull, (, var, ), ;, boolean, modifyAllCallSites, =]
[referenced, ., contains, (, var, ), ), {, Preconditions, ., checkNotNull, (, var, ), ;, boolean, modifyAllCallSites, =, canChangeSignature, ||]
[., contains, (, var, ), ), {, Preconditions, ., checkNotNull, (, var, ), ;, boolean, modifyAllCallSites, =, canChangeSignature, ||, !]
[), ), {, Preconditions, ., checkNotNull, (, var, ), ;, boolean, modifyAllCallSites, =, canChangeSignature, ||, !, hasFollowing, ;, if, (]
[Preconditions, ., checkNotNull, (, var, ), ;, boolean, modifyAllCallSites, =, canChangeSignature, ||, !, hasFollowing, ;, if, (, modifyAllCallSites, ), {]
[checkNotNull, (, var, ), ;, boolean, modifyAllCallSites, =, canChangeSignature, ||, !, hasFollowing, ;, if, (, modifyAllCallSites, ), {, modifyAllCallSites, =]
[var, ), ;, boolean, modifyAllCallSites, =, canChangeSignature, ||, !, hasFollowing, ;, if, (, modifyAllCallSites, ), {, modifyAllCallSites, =, canRemoveArgFromCallSites, (]
[;, boolean, modifyAllCallSites, =, canChangeSignature, ||, !, hasFollowing, ;, if, (, modifyAllCallSites, ), {, modifyAllCallSites, =, canRemoveArgFromCallSites, (, function, ,]
[canChangeSignature, ||, !, hasFollowing, ;, if, (, modifyAllCallSites, ), {, modifyAllCallSites, =, canRemoveArgFromCallSites, (, function, ,, paramIndex, ), ;, }]
[!, hasFollowing, ;, if, (, modifyAllCallSites, ), {, modifyAllCallSites, =, canRemoveArgFromCallSites, (, function, ,, paramIndex, ), ;, }, tryRemoveArgFromCallSites, (]
[;, if, (, modifyAllCallSites, ), {, modifyAllCallSites, =, canRemoveArgFromCallSites, (, function, ,, paramIndex, ), ;, }, tryRemoveArgFromCallSites, (, function, ,]
[(, modifyAllCallSites, ), {, modifyAllCallSites, =, canRemoveArgFromCallSites, (, function, ,, paramIndex, ), ;, }, tryRemoveArgFromCallSites, (, function, ,, paramIndex, ,]
[=, canRemoveArgFromCallSites, (, function, ,, paramIndex, ), ;, }, tryRemoveArgFromCallSites, (, function, ,, paramIndex, ,, modifyAllCallSites, ), ;, if, (]
[=, canRemoveArgFromCallSites, (, function, ,, paramIndex, ), ;, }, tryRemoveArgFromCallSites, (, function, ,, paramIndex, ,, modifyAllCallSites, ), ;, if, (]
[(, function, ,, paramIndex, ), ;, }, tryRemoveArgFromCallSites, (, function, ,, paramIndex, ,, modifyAllCallSites, ), ;, if, (, modifyAllCallSites, ||]
[function, ,, paramIndex, ), ;, }, tryRemoveArgFromCallSites, (, function, ,, paramIndex, ,, modifyAllCallSites, ), ;, if, (, modifyAllCallSites, ||, !]
[), ;, }, tryRemoveArgFromCallSites, (, function, ,, paramIndex, ,, modifyAllCallSites, ), ;, if, (, modifyAllCallSites, ||, !, hasFollowing, ), {]
[), ;, }, tryRemoveArgFromCallSites, (, function, ,, paramIndex, ,, modifyAllCallSites, ), ;, if, (, modifyAllCallSites, ||, !, hasFollowing, ), {]
[(, function, ,, paramIndex, ,, modifyAllCallSites, ), ;, if, (, modifyAllCallSites, ||, !, hasFollowing, ), {, toRemove, ., add, (]
[,, modifyAllCallSites, ), ;, if, (, modifyAllCallSites, ||, !, hasFollowing, ), {, toRemove, ., add, (, param, ), ;, return]
[(, modifyAllCallSites, ||, !, hasFollowing, ), {, toRemove, ., add, (, param, ), ;, return, hasFollowing, ;, }, }, return]
[), {, toRemove, ., add, (, param, ), ;, return, hasFollowing, ;, }, }, return, true, ;, }, else, {]
[toRemove, ., add, (, param, ), ;, return, hasFollowing, ;, }, }, return, true, ;, }, else, {, tryRemoveAllFollowingArgs, (]
[add, (, param, ), ;, return, hasFollowing, ;, }, }, return, true, ;, }, else, {, tryRemoveAllFollowingArgs, (, function, ,]
[add, (, param, ), ;, return, hasFollowing, ;, }, }, return, true, ;, }, else, {, tryRemoveAllFollowingArgs, (, function, ,]
[param, ), ;, return, hasFollowing, ;, }, }, return, true, ;, }, else, {, tryRemoveAllFollowingArgs, (, function, ,, paramIndex, -]
[hasFollowing, ;, }, }, return, true, ;, }, else, {, tryRemoveAllFollowingArgs, (, function, ,, paramIndex, -, 1, ), ;, return]
[;, return, false, ;, }, }, private, boolean, canRemoveArgFromCallSites, (, Node, function, ,, int, argIndex, ), {, Definition, definition, =]
[false, ;, }, }, private, boolean, canRemoveArgFromCallSites, (, Node, function, ,, int, argIndex, ), {, Definition, definition, =, getFunctionDefinition, (]
[Node, function, ,, int, argIndex, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, for, (, UseSite, site, :]
[Node, function, ,, int, argIndex, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, for, (, UseSite, site, :]
[argIndex, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, for, (, UseSite, site, :, defFinder, ., getUseSites, (]
[getFunctionDefinition, (, function, ), ;, for, (, UseSite, site, :, defFinder, ., getUseSites, (, definition, ), ), {, if, (]
[function, ), ;, for, (, UseSite, site, :, defFinder, ., getUseSites, (, definition, ), ), {, if, (, isModifiableCallSite, (]
[:, defFinder, ., getUseSites, (, definition, ), ), {, if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =]
[., getUseSites, (, definition, ), ), {, if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (]
[(, definition, ), ), {, if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,]
[if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (]
[if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (]
[if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (]
[isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (, arg, !=]
[site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (, arg, !=, null, &&]
[site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (, arg, !=, null, &&]
[Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (, arg, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (]
[=, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (, arg, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, arg, ,]
[argIndex, ), ;, if, (, arg, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), {, return]
[null, &&, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), {, return, false, ;, }, }, else, {, return]
[(, arg, ,, compiler, ), ), {, return, false, ;, }, }, else, {, return, false, ;, }, }, return]
[true, ;, }, private, void, tryRemoveArgFromCallSites, (, Node, function, ,, int, argIndex, ,, boolean, canModifyAllSites, ), {, Definition, definition, =]
[}, private, void, tryRemoveArgFromCallSites, (, Node, function, ,, int, argIndex, ,, boolean, canModifyAllSites, ), {, Definition, definition, =, getFunctionDefinition, (]
[int, argIndex, ,, boolean, canModifyAllSites, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, for, (, UseSite, site, :]
[int, argIndex, ,, boolean, canModifyAllSites, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, for, (, UseSite, site, :]
[canModifyAllSites, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, for, (, UseSite, site, :, defFinder, ., getUseSites, (]
[getFunctionDefinition, (, function, ), ;, for, (, UseSite, site, :, defFinder, ., getUseSites, (, definition, ), ), {, if, (]
[function, ), ;, for, (, UseSite, site, :, defFinder, ., getUseSites, (, definition, ), ), {, if, (, isModifiableCallSite, (]
[:, defFinder, ., getUseSites, (, definition, ), ), {, if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =]
[., getUseSites, (, definition, ), ), {, if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (]
[(, definition, ), ), {, if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,]
[if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (]
[if, (, isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (]
[isModifiableCallSite, (, site, ), ), {, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (, arg, !=]
[Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (, arg, !=, null, ), {, Node, argParent, =]
[Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, ), ;, if, (, arg, !=, null, ), {, Node, argParent, =]
[), ;, if, (, arg, !=, null, ), {, Node, argParent, =, arg, ., getParent, (, ), ;, if, (]
[), ;, if, (, arg, !=, null, ), {, Node, argParent, =, arg, ., getParent, (, ), ;, if, (]
[if, (, arg, !=, null, ), {, Node, argParent, =, arg, ., getParent, (, ), ;, if, (, canModifyAllSites, ||]
[(, arg, !=, null, ), {, Node, argParent, =, arg, ., getParent, (, ), ;, if, (, canModifyAllSites, ||, (]
[(, arg, !=, null, ), {, Node, argParent, =, arg, ., getParent, (, ), ;, if, (, canModifyAllSites, ||, (]
[(, arg, !=, null, ), {, Node, argParent, =, arg, ., getParent, (, ), ;, if, (, canModifyAllSites, ||, (]
[(, arg, !=, null, ), {, Node, argParent, =, arg, ., getParent, (, ), ;, if, (, canModifyAllSites, ||, (]
[Node, argParent, =, arg, ., getParent, (, ), ;, if, (, canModifyAllSites, ||, (, arg, ., getNext, (, ), ==]
[=, arg, ., getParent, (, ), ;, if, (, canModifyAllSites, ||, (, arg, ., getNext, (, ), ==, null, &&]
[arg, ., getParent, (, ), ;, if, (, canModifyAllSites, ||, (, arg, ., getNext, (, ), ==, null, &&, !]
[arg, ., getParent, (, ), ;, if, (, canModifyAllSites, ||, (, arg, ., getNext, (, ), ==, null, &&, !]
[), ;, if, (, canModifyAllSites, ||, (, arg, ., getNext, (, ), ==, null, &&, !, NodeUtil, ., mayHaveSideEffects, (]
[if, (, canModifyAllSites, ||, (, arg, ., getNext, (, ), ==, null, &&, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,]
[arg, ., getNext, (, ), ==, null, &&, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), ), {]
[arg, ., getNext, (, ), ==, null, &&, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), ), {]
[), ==, null, &&, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), ), ), {, toRemove, ., add, (]
[(, arg, ,, compiler, ), ), ), {, toRemove, ., add, (, arg, ), ;, }, else, {, if, (]
[(, arg, ,, compiler, ), ), ), {, toRemove, ., add, (, arg, ), ;, }, else, {, if, (]
[arg, ,, compiler, ), ), ), {, toRemove, ., add, (, arg, ), ;, }, else, {, if, (, !]
[arg, ,, compiler, ), ), ), {, toRemove, ., add, (, arg, ), ;, }, else, {, if, (, !]
[), ), {, toRemove, ., add, (, arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (]
[{, toRemove, ., add, (, arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,]
[add, (, arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), &&]
[(, arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), &&, (]
[(, arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), &&, (]
[arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), &&, (, !]
[arg, ), ;, }, else, {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), &&, (, !]
[if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), &&, (, !, arg, ., isNumber, (, ), ||]
[if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), &&, (, !, arg, ., isNumber, (, ), ||]
[if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), &&, (, !, arg, ., isNumber, (, ), ||]
[(, arg, ,, compiler, ), &&, (, !, arg, ., isNumber, (, ), ||, arg, ., getDouble, (, ), !=]
[), &&, (, !, arg, ., isNumber, (, ), ||, arg, ., getDouble, (, ), !=, 0, ), ), {]
[), &&, (, !, arg, ., isNumber, (, ), ||, arg, ., getDouble, (, ), !=, 0, ), ), {]
[arg, ., isNumber, (, ), ||, arg, ., getDouble, (, ), !=, 0, ), ), {, toReplaceWithZero, ., add, (]
[}, }, }, }, }, private, void, tryRemoveAllFollowingArgs, (, Node, function, ,, final, int, argIndex, ), {, Definition, definition, =]
[}, }, }, private, void, tryRemoveAllFollowingArgs, (, Node, function, ,, final, int, argIndex, ), {, Definition, definition, =, getFunctionDefinition, (]
[function, ,, final, int, argIndex, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, for, (, UseSite, site, :]
[function, ,, final, int, argIndex, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, for, (, UseSite, site, :]
[argIndex, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, for, (, UseSite, site, :, defFinder, ., getUseSites, (]
[getFunctionDefinition, (, function, ), ;, for, (, UseSite, site, :, defFinder, ., getUseSites, (, definition, ), ), {, if, (]
[(, function, ), ;, for, (, UseSite, site, :, defFinder, ., getUseSites, (, definition, ), ), {, if, (, !]
[), ;, for, (, UseSite, site, :, defFinder, ., getUseSites, (, definition, ), ), {, if, (, !, isModifiableCallSite, (]
[(, definition, ), ), {, if, (, !, isModifiableCallSite, (, site, ), ), {, continue, ;, }, Node, arg, =]
[), ), {, if, (, !, isModifiableCallSite, (, site, ), ), {, continue, ;, }, Node, arg, =, getArgumentForCallOrNewOrDotCall, (]
[{, if, (, !, isModifiableCallSite, (, site, ), ), {, continue, ;, }, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,]
[{, if, (, !, isModifiableCallSite, (, site, ), ), {, continue, ;, }, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,]
[(, !, isModifiableCallSite, (, site, ), ), {, continue, ;, }, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, +]
[), ), {, continue, ;, }, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, +, 1, ), ;, while, (]
[), ), {, continue, ;, }, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, +, 1, ), ;, while, (]
[{, continue, ;, }, Node, arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, +, 1, ), ;, while, (, arg, !=]
[arg, =, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, +, 1, ), ;, while, (, arg, !=, null, ), {, if, (]
[=, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, +, 1, ), ;, while, (, arg, !=, null, ), {, if, (, !]
[=, getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, +, 1, ), ;, while, (, arg, !=, null, ), {, if, (, !]
[,, argIndex, +, 1, ), ;, while, (, arg, !=, null, ), {, if, (, !, NodeUtil, ., mayHaveSideEffects, (]
[), ;, while, (, arg, !=, null, ), {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ), ), {]
[), ;, while, (, arg, !=, null, ), {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ), ), {]
[arg, !=, null, ), {, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ), ), {, toRemove, ., add, (]
[{, if, (, !, NodeUtil, ., mayHaveSideEffects, (, arg, ), ), {, toRemove, ., add, (, arg, ), ;, }]
[(, !, NodeUtil, ., mayHaveSideEffects, (, arg, ), ), {, toRemove, ., add, (, arg, ), ;, }, arg, =]
[(, !, NodeUtil, ., mayHaveSideEffects, (, arg, ), ), {, toRemove, ., add, (, arg, ), ;, }, arg, =]
[;, }, }, }, private, static, Node, getArgumentForCallOrNewOrDotCall, (, UseSite, site, ,, final, int, argIndex, ), {, int, adjustedArgIndex, =]
[static, Node, getArgumentForCallOrNewOrDotCall, (, UseSite, site, ,, final, int, argIndex, ), {, int, adjustedArgIndex, =, argIndex, ;, Node, parent, =]
[static, Node, getArgumentForCallOrNewOrDotCall, (, UseSite, site, ,, final, int, argIndex, ), {, int, adjustedArgIndex, =, argIndex, ;, Node, parent, =]
[static, Node, getArgumentForCallOrNewOrDotCall, (, UseSite, site, ,, final, int, argIndex, ), {, int, adjustedArgIndex, =, argIndex, ;, Node, parent, =]
[), {, int, adjustedArgIndex, =, argIndex, ;, Node, parent, =, site, ., node, ., getParent, (, ), ;, if, (]
[), {, int, adjustedArgIndex, =, argIndex, ;, Node, parent, =, site, ., node, ., getParent, (, ), ;, if, (]
[=, argIndex, ;, Node, parent, =, site, ., node, ., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectCall, (]
[parent, =, site, ., node, ., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectCall, (, parent, ), ), {]
[parent, =, site, ., node, ., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectCall, (, parent, ), ), {]
[., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectCall, (, parent, ), ), {, adjustedArgIndex, ++, ;, }, return]
[., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectCall, (, parent, ), ), {, adjustedArgIndex, ++, ;, }, return]
[;, if, (, NodeUtil, ., isFunctionObjectCall, (, parent, ), ), {, adjustedArgIndex, ++, ;, }, return, NodeUtil, ., getArgumentForCallOrNew, (]
[(, NodeUtil, ., isFunctionObjectCall, (, parent, ), ), {, adjustedArgIndex, ++, ;, }, return, NodeUtil, ., getArgumentForCallOrNew, (, parent, ,]
[return, NodeUtil, ., getArgumentForCallOrNew, (, parent, ,, adjustedArgIndex, ), ;, }, boolean, canModifyCallers, (, Node, function, ), {, if, (]
[return, NodeUtil, ., getArgumentForCallOrNew, (, parent, ,, adjustedArgIndex, ), ;, }, boolean, canModifyCallers, (, Node, function, ), {, if, (]
[(, parent, ,, adjustedArgIndex, ), ;, }, boolean, canModifyCallers, (, Node, function, ), {, if, (, NodeUtil, ., isVarArgsFunction, (]
[;, }, boolean, canModifyCallers, (, Node, function, ), {, if, (, NodeUtil, ., isVarArgsFunction, (, function, ), ), {, return]
[function, ), {, if, (, NodeUtil, ., isVarArgsFunction, (, function, ), ), {, return, false, ;, }, DefinitionSite, defSite, =]
[function, ), {, if, (, NodeUtil, ., isVarArgsFunction, (, function, ), ), {, return, false, ;, }, DefinitionSite, defSite, =]
[(, NodeUtil, ., isVarArgsFunction, (, function, ), ), {, return, false, ;, }, DefinitionSite, defSite, =, defFinder, ., getDefinitionForFunction, (]
[function, ), ), {, return, false, ;, }, DefinitionSite, defSite, =, defFinder, ., getDefinitionForFunction, (, function, ), ;, if, (]
[function, ), ), {, return, false, ;, }, DefinitionSite, defSite, =, defFinder, ., getDefinitionForFunction, (, function, ), ;, if, (]
[), {, return, false, ;, }, DefinitionSite, defSite, =, defFinder, ., getDefinitionForFunction, (, function, ), ;, if, (, defSite, ==]
[;, }, DefinitionSite, defSite, =, defFinder, ., getDefinitionForFunction, (, function, ), ;, if, (, defSite, ==, null, ), {, return]
[., getDefinitionForFunction, (, function, ), ;, if, (, defSite, ==, null, ), {, return, false, ;, }, Definition, definition, =]
[., getDefinitionForFunction, (, function, ), ;, if, (, defSite, ==, null, ), {, return, false, ;, }, Definition, definition, =]
[if, (, defSite, ==, null, ), {, return, false, ;, }, Definition, definition, =, defSite, ., definition, ;, if, (]
[(, defSite, ==, null, ), {, return, false, ;, }, Definition, definition, =, defSite, ., definition, ;, if, (, !]
[(, defSite, ==, null, ), {, return, false, ;, }, Definition, definition, =, defSite, ., definition, ;, if, (, !]
[), {, return, false, ;, }, Definition, definition, =, defSite, ., definition, ;, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (]
[}, Definition, definition, =, defSite, ., definition, ;, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, function, ), ), {, return]
[defSite, ., definition, ;, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, function, ), ), {, return, false, ;, }, return]
[defSite, ., definition, ;, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, function, ), ), {, return, false, ;, }, return]
[if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, function, ), ), {, return, false, ;, }, return, defFinder, ., canModifyDefinition, (]
[}, return, defFinder, ., canModifyDefinition, (, definition, ), ;, }, private, static, boolean, isModifiableCallSite, (, UseSite, site, ), {, return]
[}, return, defFinder, ., canModifyDefinition, (, definition, ), ;, }, private, static, boolean, isModifiableCallSite, (, UseSite, site, ), {, return]
[}, return, defFinder, ., canModifyDefinition, (, definition, ), ;, }, private, static, boolean, isModifiableCallSite, (, UseSite, site, ), {, return]
[canModifyDefinition, (, definition, ), ;, }, private, static, boolean, isModifiableCallSite, (, UseSite, site, ), {, return, SimpleDefinitionFinder, ., isCallOrNewSite, (]
[), ;, }, private, static, boolean, isModifiableCallSite, (, UseSite, site, ), {, return, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), &&]
[;, }, private, static, boolean, isModifiableCallSite, (, UseSite, site, ), {, return, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), &&, !]
[;, }, private, static, boolean, isModifiableCallSite, (, UseSite, site, ), {, return, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), &&, !]
[boolean, isModifiableCallSite, (, UseSite, site, ), {, return, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), &&, !, NodeUtil, ., isFunctionObjectApply, (]
[boolean, isModifiableCallSite, (, UseSite, site, ), {, return, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), &&, !, NodeUtil, ., isFunctionObjectApply, (]
[boolean, isModifiableCallSite, (, UseSite, site, ), {, return, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), &&, !, NodeUtil, ., isFunctionObjectApply, (]
[., node, ., getParent, (, ), ), ;, }, private, boolean, canChangeSignature, (, Node, function, ), {, Definition, definition, =]
[., getParent, (, ), ), ;, }, private, boolean, canChangeSignature, (, Node, function, ), {, Definition, definition, =, getFunctionDefinition, (]
[}, private, boolean, canChangeSignature, (, Node, function, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, CodingConvention, convention, =]
[}, private, boolean, canChangeSignature, (, Node, function, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, CodingConvention, convention, =]
[function, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;]
[function, ), {, Definition, definition, =, getFunctionDefinition, (, function, ), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;]
[definition, =, getFunctionDefinition, (, function, ), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, Preconditions, ., checkState, (]
[=, getFunctionDefinition, (, function, ), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, Preconditions, ., checkState, (, !]
[=, getFunctionDefinition, (, function, ), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, Preconditions, ., checkState, (, !]
[), ;, Preconditions, ., checkState, (, !, definition, ., isExtern, (, ), ), ;, Collection, <, UseSite, >, useSites, =]
[), ;, Preconditions, ., checkState, (, !, definition, ., isExtern, (, ), ), ;, Collection, <, UseSite, >, useSites, =]
[checkState, (, !, definition, ., isExtern, (, ), ), ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (]
[), ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :]
[useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Node, parent, =]
[useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Node, parent, =]
[useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Node, parent, =]
[(, UseSite, site, :, useSites, ), {, Node, parent, =, site, ., node, ., getParent, (, ), ;, if, (]
[(, UseSite, site, :, useSites, ), {, Node, parent, =, site, ., node, ., getParent, (, ), ;, if, (]
[site, :, useSites, ), {, Node, parent, =, site, ., node, ., getParent, (, ), ;, if, (, parent, ==]
[site, ., node, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, continue, ;, }, if, (]
[site, ., node, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, continue, ;, }, if, (]
[site, ., node, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, continue, ;, }, if, (]
[), ;, if, (, parent, ==, null, ), {, continue, ;, }, if, (, parent, ., isCall, (, ), &&]
[), ;, if, (, parent, ==, null, ), {, continue, ;, }, if, (, parent, ., isCall, (, ), &&]
[), ;, if, (, parent, ==, null, ), {, continue, ;, }, if, (, parent, ., isCall, (, ), &&]
[parent, ==, null, ), {, continue, ;, }, if, (, parent, ., isCall, (, ), &&, convention, ., getClassesDefinedByCall, (]
[), {, continue, ;, }, if, (, parent, ., isCall, (, ), &&, convention, ., getClassesDefinedByCall, (, parent, ), !=]
[., isCall, (, ), &&, convention, ., getClassesDefinedByCall, (, parent, ), !=, null, ), {, continue, ;, }, if, (]
[isCall, (, ), &&, convention, ., getClassesDefinedByCall, (, parent, ), !=, null, ), {, continue, ;, }, if, (, !]
[isCall, (, ), &&, convention, ., getClassesDefinedByCall, (, parent, ), !=, null, ), {, continue, ;, }, if, (, !]
[convention, ., getClassesDefinedByCall, (, parent, ), !=, null, ), {, continue, ;, }, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (]
[!=, null, ), {, continue, ;, }, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, if, (]
[null, ), {, continue, ;, }, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, if, (, !]
[), {, continue, ;, }, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, if, (, !, (]
[), {, continue, ;, }, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, if, (, !, (]
[), {, continue, ;, }, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, if, (, !, (]
[(, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, if, (, !, (, parent, ., isGetProp, (, ), &&]
[(, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, if, (, !, (, parent, ., isGetProp, (, ), &&]
[isCallOrNewSite, (, site, ), ), {, if, (, !, (, parent, ., isGetProp, (, ), &&, NodeUtil, ., isFunctionObjectCall, (]
[isCallOrNewSite, (, site, ), ), {, if, (, !, (, parent, ., isGetProp, (, ), &&, NodeUtil, ., isFunctionObjectCall, (]
[parent, ., isGetProp, (, ), &&, NodeUtil, ., isFunctionObjectCall, (, parent, ., getParent, (, ), ), ), ), {, return]
[NodeUtil, ., isFunctionObjectCall, (, parent, ., getParent, (, ), ), ), ), {, return, false, ;, }, }, if, (]
[NodeUtil, ., isFunctionObjectCall, (, parent, ., getParent, (, ), ), ), ), {, return, false, ;, }, }, if, (]
[parent, ., getParent, (, ), ), ), ), {, return, false, ;, }, }, if, (, NodeUtil, ., isFunctionObjectApply, (]
[), ), ), {, return, false, ;, }, }, if, (, NodeUtil, ., isFunctionObjectApply, (, parent, ), ), {, return]
[;, }, }, if, (, NodeUtil, ., isFunctionObjectApply, (, parent, ), ), {, return, false, ;, }, Node, nameNode, =]
[;, }, }, if, (, NodeUtil, ., isFunctionObjectApply, (, parent, ), ), {, return, false, ;, }, Node, nameNode, =]
[), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =]
[), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =]
[false, ;, }, Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (]
[Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;]
[Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;]
[., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, Preconditions, ., checkState, (]
[., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, Preconditions, ., checkState, (]
[., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, Preconditions, ., checkState, (]
[>, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., size, (, ), ==]
[defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., size, (, ), ==, 1, ), ;]
[defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., size, (, ), ==, 1, ), ;]
[nameNode, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., size, (, ), ==, 1, ), ;, Preconditions, ., checkState, (]
[nameNode, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., size, (, ), ==, 1, ), ;, Preconditions, ., checkState, (]
[., checkState, (, singleSiteDefinitions, ., size, (, ), ==, 1, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (]
[(, ), ==, 1, ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, }, return]
[definition, ), ), ;, }, return, true, ;, }, private, Definition, getFunctionDefinition, (, Node, function, ), {, DefinitionSite, definitionSite, =]
[definition, ), ), ;, }, return, true, ;, }, private, Definition, getFunctionDefinition, (, Node, function, ), {, DefinitionSite, definitionSite, =]
[}, return, true, ;, }, private, Definition, getFunctionDefinition, (, Node, function, ), {, DefinitionSite, definitionSite, =, defFinder, ., getDefinitionForFunction, (]
[;, }, private, Definition, getFunctionDefinition, (, Node, function, ), {, DefinitionSite, definitionSite, =, defFinder, ., getDefinitionForFunction, (, function, ), ;]
[;, }, private, Definition, getFunctionDefinition, (, Node, function, ), {, DefinitionSite, definitionSite, =, defFinder, ., getDefinitionForFunction, (, function, ), ;]
[getFunctionDefinition, (, Node, function, ), {, DefinitionSite, definitionSite, =, defFinder, ., getDefinitionForFunction, (, function, ), ;, Preconditions, ., checkNotNull, (]
[DefinitionSite, definitionSite, =, defFinder, ., getDefinitionForFunction, (, function, ), ;, Preconditions, ., checkNotNull, (, definitionSite, ), ;, Definition, definition, =]
[DefinitionSite, definitionSite, =, defFinder, ., getDefinitionForFunction, (, function, ), ;, Preconditions, ., checkNotNull, (, definitionSite, ), ;, Definition, definition, =]
[., getDefinitionForFunction, (, function, ), ;, Preconditions, ., checkNotNull, (, definitionSite, ), ;, Definition, definition, =, definitionSite, ., definition, ;]
[., getDefinitionForFunction, (, function, ), ;, Preconditions, ., checkNotNull, (, definitionSite, ), ;, Definition, definition, =, definitionSite, ., definition, ;]
[), ;, Preconditions, ., checkNotNull, (, definitionSite, ), ;, Definition, definition, =, definitionSite, ., definition, ;, Preconditions, ., checkState, (]
[;, Preconditions, ., checkNotNull, (, definitionSite, ), ;, Definition, definition, =, definitionSite, ., definition, ;, Preconditions, ., checkState, (, !]
[;, Preconditions, ., checkNotNull, (, definitionSite, ), ;, Definition, definition, =, definitionSite, ., definition, ;, Preconditions, ., checkState, (, !]
[definitionSite, ), ;, Definition, definition, =, definitionSite, ., definition, ;, Preconditions, ., checkState, (, !, definitionSite, ., inExterns, ), ;]
[definitionSite, ), ;, Definition, definition, =, definitionSite, ., definition, ;, Preconditions, ., checkState, (, !, definitionSite, ., inExterns, ), ;]
[definition, =, definitionSite, ., definition, ;, Preconditions, ., checkState, (, !, definitionSite, ., inExterns, ), ;, Preconditions, ., checkState, (]
[definition, =, definitionSite, ., definition, ;, Preconditions, ., checkState, (, !, definitionSite, ., inExterns, ), ;, Preconditions, ., checkState, (]
[definition, =, definitionSite, ., definition, ;, Preconditions, ., checkState, (, !, definitionSite, ., inExterns, ), ;, Preconditions, ., checkState, (]
[Preconditions, ., checkState, (, !, definitionSite, ., inExterns, ), ;, Preconditions, ., checkState, (, definition, ., getRValue, (, ), ==]
[!, definitionSite, ., inExterns, ), ;, Preconditions, ., checkState, (, definition, ., getRValue, (, ), ==, function, ), ;, return]
[(, ), ==, function, ), ;, return, definition, ;, }, }, private, void, interpretAssigns, (, ), {, boolean, changes, =]
[), ;, return, definition, ;, }, }, private, void, interpretAssigns, (, ), {, boolean, changes, =, false, ;, do, {]
[return, definition, ;, }, }, private, void, interpretAssigns, (, ), {, boolean, changes, =, false, ;, do, {, changes, =]
[interpretAssigns, (, ), {, boolean, changes, =, false, ;, do, {, changes, =, false, ;, for, (, int, current, =]
[), {, boolean, changes, =, false, ;, do, {, changes, =, false, ;, for, (, int, current, =, 0, ;]
[), {, boolean, changes, =, false, ;, do, {, changes, =, false, ;, for, (, int, current, =, 0, ;]
[boolean, changes, =, false, ;, do, {, changes, =, false, ;, for, (, int, current, =, 0, ;, current, <]
[boolean, changes, =, false, ;, do, {, changes, =, false, ;, for, (, int, current, =, 0, ;, current, <]
[{, changes, =, false, ;, for, (, int, current, =, 0, ;, current, <, maybeUnreferenced, ., size, (, ), ;]
[{, changes, =, false, ;, for, (, int, current, =, 0, ;, current, <, maybeUnreferenced, ., size, (, ), ;]
[int, current, =, 0, ;, current, <, maybeUnreferenced, ., size, (, ), ;, current, ++, ), {, Var, var, =]
[int, current, =, 0, ;, current, <, maybeUnreferenced, ., size, (, ), ;, current, ++, ), {, Var, var, =]
[;, current, <, maybeUnreferenced, ., size, (, ), ;, current, ++, ), {, Var, var, =, maybeUnreferenced, ., get, (]
[size, (, ), ;, current, ++, ), {, Var, var, =, maybeUnreferenced, ., get, (, current, ), ;, if, (]
[size, (, ), ;, current, ++, ), {, Var, var, =, maybeUnreferenced, ., get, (, current, ), ;, if, (]
[current, ++, ), {, Var, var, =, maybeUnreferenced, ., get, (, current, ), ;, if, (, referenced, ., contains, (]
[Var, var, =, maybeUnreferenced, ., get, (, current, ), ;, if, (, referenced, ., contains, (, var, ), ), {]
[Var, var, =, maybeUnreferenced, ., get, (, current, ), ;, if, (, referenced, ., contains, (, var, ), ), {]
[., get, (, current, ), ;, if, (, referenced, ., contains, (, var, ), ), {, maybeUnreferenced, ., remove, (]
[current, ), ;, if, (, referenced, ., contains, (, var, ), ), {, maybeUnreferenced, ., remove, (, current, ), ;]
[current, ), ;, if, (, referenced, ., contains, (, var, ), ), {, maybeUnreferenced, ., remove, (, current, ), ;]
[var, ), ), {, maybeUnreferenced, ., remove, (, current, ), ;, current, --, ;, }, else, {, boolean, assignedToUnknownValue, =]
[., remove, (, current, ), ;, current, --, ;, }, else, {, boolean, assignedToUnknownValue, =, false, ;, boolean, hasPropertyAssign, =]
[), ;, current, --, ;, }, else, {, boolean, assignedToUnknownValue, =, false, ;, boolean, hasPropertyAssign, =, false, ;, if, (]
[), ;, current, --, ;, }, else, {, boolean, assignedToUnknownValue, =, false, ;, boolean, hasPropertyAssign, =, false, ;, if, (]
[), ;, current, --, ;, }, else, {, boolean, assignedToUnknownValue, =, false, ;, boolean, hasPropertyAssign, =, false, ;, if, (]
[), ;, current, --, ;, }, else, {, boolean, assignedToUnknownValue, =, false, ;, boolean, hasPropertyAssign, =, false, ;, if, (]
[=, false, ;, boolean, hasPropertyAssign, =, false, ;, if, (, var, ., getParentNode, (, ), ., isVar, (, ), &&]
[false, ;, boolean, hasPropertyAssign, =, false, ;, if, (, var, ., getParentNode, (, ), ., isVar, (, ), &&, !]
[false, ;, boolean, hasPropertyAssign, =, false, ;, if, (, var, ., getParentNode, (, ), ., isVar, (, ), &&, !]
[=, false, ;, if, (, var, ., getParentNode, (, ), ., isVar, (, ), &&, !, NodeUtil, ., isForIn, (]
[=, false, ;, if, (, var, ., getParentNode, (, ), ., isVar, (, ), &&, !, NodeUtil, ., isForIn, (]
[=, false, ;, if, (, var, ., getParentNode, (, ), ., isVar, (, ), &&, !, NodeUtil, ., isForIn, (]
[!, NodeUtil, ., isForIn, (, var, ., getParentNode, (, ), ., getParent, (, ), ), ), {, Node, value, =]
[!, NodeUtil, ., isForIn, (, var, ., getParentNode, (, ), ., getParent, (, ), ), ), {, Node, value, =]
[., getParentNode, (, ), ., getParent, (, ), ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;]
[(, ), ., getParent, (, ), ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =]
[(, ), ., getParent, (, ), ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =]
[(, ), ., getParent, (, ), ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =]
[., getParent, (, ), ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =, value, !=]
[(, ), ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =, value, !=, null, &&]
[), ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =, value, !=, null, &&, !]
[), ), ), {, Node, value, =, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =, value, !=, null, &&, !]
[Node, value, =, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =, value, !=, null, &&, !, NodeUtil, ., isLiteralValue, (]
[=, var, ., getInitialValue, (, ), ;, assignedToUnknownValue, =, value, !=, null, &&, !, NodeUtil, ., isLiteralValue, (, value, ,]
[;, assignedToUnknownValue, =, value, !=, null, &&, !, NodeUtil, ., isLiteralValue, (, value, ,, true, ), ;, }, else, {]
[=, value, !=, null, &&, !, NodeUtil, ., isLiteralValue, (, value, ,, true, ), ;, }, else, {, assignedToUnknownValue, =]
[NodeUtil, ., isLiteralValue, (, value, ,, true, ), ;, }, else, {, assignedToUnknownValue, =, true, ;, }, boolean, maybeEscaped, =]
[), ;, }, else, {, assignedToUnknownValue, =, true, ;, }, boolean, maybeEscaped, =, false, ;, for, (, Assign, assign, :]
[), ;, }, else, {, assignedToUnknownValue, =, true, ;, }, boolean, maybeEscaped, =, false, ;, for, (, Assign, assign, :]
[{, assignedToUnknownValue, =, true, ;, }, boolean, maybeEscaped, =, false, ;, for, (, Assign, assign, :, assignsByVar, ., get, (]
[boolean, maybeEscaped, =, false, ;, for, (, Assign, assign, :, assignsByVar, ., get, (, var, ), ), {, if, (]
[boolean, maybeEscaped, =, false, ;, for, (, Assign, assign, :, assignsByVar, ., get, (, var, ), ), {, if, (]
[for, (, Assign, assign, :, assignsByVar, ., get, (, var, ), ), {, if, (, assign, ., isPropertyAssign, ), {]
[Assign, assign, :, assignsByVar, ., get, (, var, ), ), {, if, (, assign, ., isPropertyAssign, ), {, hasPropertyAssign, =]
[(, var, ), ), {, if, (, assign, ., isPropertyAssign, ), {, hasPropertyAssign, =, true, ;, }, else, if, (]
[var, ), ), {, if, (, assign, ., isPropertyAssign, ), {, hasPropertyAssign, =, true, ;, }, else, if, (, !]
[var, ), ), {, if, (, assign, ., isPropertyAssign, ), {, hasPropertyAssign, =, true, ;, }, else, if, (, !]
[if, (, assign, ., isPropertyAssign, ), {, hasPropertyAssign, =, true, ;, }, else, if, (, !, NodeUtil, ., isLiteralValue, (]
[if, (, assign, ., isPropertyAssign, ), {, hasPropertyAssign, =, true, ;, }, else, if, (, !, NodeUtil, ., isLiteralValue, (]
[if, (, assign, ., isPropertyAssign, ), {, hasPropertyAssign, =, true, ;, }, else, if, (, !, NodeUtil, ., isLiteralValue, (]
[=, true, ;, }, else, if, (, !, NodeUtil, ., isLiteralValue, (, assign, ., assignNode, ., getLastChild, (, ), ,]
[else, if, (, !, NodeUtil, ., isLiteralValue, (, assign, ., assignNode, ., getLastChild, (, ), ,, true, ), ), {]
[(, !, NodeUtil, ., isLiteralValue, (, assign, ., assignNode, ., getLastChild, (, ), ,, true, ), ), {, assignedToUnknownValue, =]
[(, assign, ., assignNode, ., getLastChild, (, ), ,, true, ), ), {, assignedToUnknownValue, =, true, ;, }, if, (]
[(, assign, ., assignNode, ., getLastChild, (, ), ,, true, ), ), {, assignedToUnknownValue, =, true, ;, }, if, (]
[getLastChild, (, ), ,, true, ), ), {, assignedToUnknownValue, =, true, ;, }, if, (, assign, ., maybeAliased, ), {]
[), ,, true, ), ), {, assignedToUnknownValue, =, true, ;, }, if, (, assign, ., maybeAliased, ), {, maybeEscaped, =]
[assignedToUnknownValue, =, true, ;, }, if, (, assign, ., maybeAliased, ), {, maybeEscaped, =, true, ;, }, }, if, (]
[assignedToUnknownValue, =, true, ;, }, if, (, assign, ., maybeAliased, ), {, maybeEscaped, =, true, ;, }, }, if, (]
[=, true, ;, }, if, (, assign, ., maybeAliased, ), {, maybeEscaped, =, true, ;, }, }, if, (, (]
[=, true, ;, }, if, (, assign, ., maybeAliased, ), {, maybeEscaped, =, true, ;, }, }, if, (, (]
[;, }, if, (, assign, ., maybeAliased, ), {, maybeEscaped, =, true, ;, }, }, if, (, (, assignedToUnknownValue, ||]
[(, assign, ., maybeAliased, ), {, maybeEscaped, =, true, ;, }, }, if, (, (, assignedToUnknownValue, ||, maybeEscaped, ), &&]
[maybeAliased, ), {, maybeEscaped, =, true, ;, }, }, if, (, (, assignedToUnknownValue, ||, maybeEscaped, ), &&, hasPropertyAssign, ), {]
[{, maybeEscaped, =, true, ;, }, }, if, (, (, assignedToUnknownValue, ||, maybeEscaped, ), &&, hasPropertyAssign, ), {, changes, =]
[{, maybeEscaped, =, true, ;, }, }, if, (, (, assignedToUnknownValue, ||, maybeEscaped, ), &&, hasPropertyAssign, ), {, changes, =]
[=, true, ;, }, }, if, (, (, assignedToUnknownValue, ||, maybeEscaped, ), &&, hasPropertyAssign, ), {, changes, =, markReferencedVar, (]
[}, }, if, (, (, assignedToUnknownValue, ||, maybeEscaped, ), &&, hasPropertyAssign, ), {, changes, =, markReferencedVar, (, var, ), ||]
[if, (, (, assignedToUnknownValue, ||, maybeEscaped, ), &&, hasPropertyAssign, ), {, changes, =, markReferencedVar, (, var, ), ||, changes, ;]
[if, (, (, assignedToUnknownValue, ||, maybeEscaped, ), &&, hasPropertyAssign, ), {, changes, =, markReferencedVar, (, var, ), ||, changes, ;]
[||, maybeEscaped, ), &&, hasPropertyAssign, ), {, changes, =, markReferencedVar, (, var, ), ||, changes, ;, maybeUnreferenced, ., remove, (]
[&&, hasPropertyAssign, ), {, changes, =, markReferencedVar, (, var, ), ||, changes, ;, maybeUnreferenced, ., remove, (, current, ), ;]
[&&, hasPropertyAssign, ), {, changes, =, markReferencedVar, (, var, ), ||, changes, ;, maybeUnreferenced, ., remove, (, current, ), ;]
[), ||, changes, ;, maybeUnreferenced, ., remove, (, current, ), ;, current, --, ;, }, }, }, }, while, (]
[}, while, (, changes, ), ;, }, private, void, removeAllAssigns, (, Var, var, ), {, for, (, Assign, assign, :]
[}, while, (, changes, ), ;, }, private, void, removeAllAssigns, (, Var, var, ), {, for, (, Assign, assign, :]
[), ;, }, private, void, removeAllAssigns, (, Var, var, ), {, for, (, Assign, assign, :, assignsByVar, ., get, (]
[void, removeAllAssigns, (, Var, var, ), {, for, (, Assign, assign, :, assignsByVar, ., get, (, var, ), ), {]
[void, removeAllAssigns, (, Var, var, ), {, for, (, Assign, assign, :, assignsByVar, ., get, (, var, ), ), {]
[{, for, (, Assign, assign, :, assignsByVar, ., get, (, var, ), ), {, assign, ., remove, (, ), ;]
[{, for, (, Assign, assign, :, assignsByVar, ., get, (, var, ), ), {, assign, ., remove, (, ), ;]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, markReferencedVar, (, Var, var, ), {, if, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, markReferencedVar, (, Var, var, ), {, if, (]
[reportCodeChange, (, ), ;, }, }, private, boolean, markReferencedVar, (, Var, var, ), {, if, (, referenced, ., add, (]
[(, Var, var, ), {, if, (, referenced, ., add, (, var, ), ), {, for, (, Continuation, c, :]
[(, Var, var, ), {, if, (, referenced, ., add, (, var, ), ), {, for, (, Continuation, c, :]
[{, if, (, referenced, ., add, (, var, ), ), {, for, (, Continuation, c, :, continuations, ., get, (]
[., add, (, var, ), ), {, for, (, Continuation, c, :, continuations, ., get, (, var, ), ), {]
[., add, (, var, ), ), {, for, (, Continuation, c, :, continuations, ., get, (, var, ), ), {]
[(, Continuation, c, :, continuations, ., get, (, var, ), ), {, c, ., apply, (, ), ;, }, return]
[continuations, ., get, (, var, ), ), {, c, ., apply, (, ), ;, }, return, true, ;, }, return]
[), ;, }, return, true, ;, }, return, false, ;, }, private, void, removeUnreferencedVars, (, ), {, CodingConvention, convention, =]
[}, private, void, removeUnreferencedVars, (, ), {, CodingConvention, convention, =, codingConvention, ;, for, (, Iterator, <, Var, >, it, =]
[}, private, void, removeUnreferencedVars, (, ), {, CodingConvention, convention, =, codingConvention, ;, for, (, Iterator, <, Var, >, it, =]
[{, CodingConvention, convention, =, codingConvention, ;, for, (, Iterator, <, Var, >, it, =, maybeUnreferenced, ., iterator, (, ), ;]
[{, CodingConvention, convention, =, codingConvention, ;, for, (, Iterator, <, Var, >, it, =, maybeUnreferenced, ., iterator, (, ), ;]
[>, it, =, maybeUnreferenced, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, var, =]
[>, it, =, maybeUnreferenced, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, var, =]
[hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (, ), ;, for, (, Node, exprCallNode, :]
[hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (, ), ;, for, (, Node, exprCallNode, :]
[), {, Var, var, =, it, ., next, (, ), ;, for, (, Node, exprCallNode, :, classDefiningCalls, ., get, (]
[=, it, ., next, (, ), ;, for, (, Node, exprCallNode, :, classDefiningCalls, ., get, (, var, ), ), {]
[=, it, ., next, (, ), ;, for, (, Node, exprCallNode, :, classDefiningCalls, ., get, (, var, ), ), {]
[(, ), ;, for, (, Node, exprCallNode, :, classDefiningCalls, ., get, (, var, ), ), {, NodeUtil, ., removeChild, (]
[(, ), ;, for, (, Node, exprCallNode, :, classDefiningCalls, ., get, (, var, ), ), {, NodeUtil, ., removeChild, (]
[exprCallNode, :, classDefiningCalls, ., get, (, var, ), ), {, NodeUtil, ., removeChild, (, exprCallNode, ., getParent, (, ), ,]
[., get, (, var, ), ), {, NodeUtil, ., removeChild, (, exprCallNode, ., getParent, (, ), ,, exprCallNode, ), ;]
[., get, (, var, ), ), {, NodeUtil, ., removeChild, (, exprCallNode, ., getParent, (, ), ,, exprCallNode, ), ;]
[NodeUtil, ., removeChild, (, exprCallNode, ., getParent, (, ), ,, exprCallNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[removeChild, (, exprCallNode, ., getParent, (, ), ,, exprCallNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, removeAllAssigns, (]
[., getParent, (, ), ,, exprCallNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, removeAllAssigns, (, var, ), ;]
[., getParent, (, ), ,, exprCallNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, removeAllAssigns, (, var, ), ;]
[,, exprCallNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, removeAllAssigns, (, var, ), ;, compiler, ., addToDebugLog, (]
[,, exprCallNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, removeAllAssigns, (, var, ), ;, compiler, ., addToDebugLog, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, removeAllAssigns, (, var, ), ;, compiler, ., addToDebugLog, (, "Unreferenced var: ", +]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, removeAllAssigns, (, var, ), ;, compiler, ., addToDebugLog, (, "Unreferenced var: ", +]
[}, removeAllAssigns, (, var, ), ;, compiler, ., addToDebugLog, (, "Unreferenced var: ", +, var, ., name, ), ;, Node, nameNode, =]
[}, removeAllAssigns, (, var, ), ;, compiler, ., addToDebugLog, (, "Unreferenced var: ", +, var, ., name, ), ;, Node, nameNode, =]
[., addToDebugLog, (, "Unreferenced var: ", +, var, ., name, ), ;, Node, nameNode, =, var, ., nameNode, ;, Node, toRemove, =]
[., addToDebugLog, (, "Unreferenced var: ", +, var, ., name, ), ;, Node, nameNode, =, var, ., nameNode, ;, Node, toRemove, =]
[;, Node, nameNode, =, var, ., nameNode, ;, Node, toRemove, =, nameNode, ., getParent, (, ), ;, Node, parent, =]
[;, Node, nameNode, =, var, ., nameNode, ;, Node, toRemove, =, nameNode, ., getParent, (, ), ;, Node, parent, =]
[nameNode, ;, Node, toRemove, =, nameNode, ., getParent, (, ), ;, Node, parent, =, toRemove, ., getParent, (, ), ;]
[nameNode, ;, Node, toRemove, =, nameNode, ., getParent, (, ), ;, Node, parent, =, toRemove, ., getParent, (, ), ;]
[=, nameNode, ., getParent, (, ), ;, Node, parent, =, toRemove, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[=, nameNode, ., getParent, (, ), ;, Node, parent, =, toRemove, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[=, nameNode, ., getParent, (, ), ;, Node, parent, =, toRemove, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[=, nameNode, ., getParent, (, ), ;, Node, parent, =, toRemove, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[;, Node, parent, =, toRemove, ., getParent, (, ), ;, Preconditions, ., checkState, (, toRemove, ., isVar, (, ), ||]
[;, Node, parent, =, toRemove, ., getParent, (, ), ;, Preconditions, ., checkState, (, toRemove, ., isVar, (, ), ||]
[getParent, (, ), ;, Preconditions, ., checkState, (, toRemove, ., isVar, (, ), ||, toRemove, ., isFunction, (, ), ||]
[getParent, (, ), ;, Preconditions, ., checkState, (, toRemove, ., isVar, (, ), ||, toRemove, ., isFunction, (, ), ||]
[getParent, (, ), ;, Preconditions, ., checkState, (, toRemove, ., isVar, (, ), ||, toRemove, ., isFunction, (, ), ||]
[checkState, (, toRemove, ., isVar, (, ), ||, toRemove, ., isFunction, (, ), ||, toRemove, ., isParamList, (, ), &&]
[checkState, (, toRemove, ., isVar, (, ), ||, toRemove, ., isFunction, (, ), ||, toRemove, ., isParamList, (, ), &&]
[), ||, toRemove, ., isFunction, (, ), ||, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ,]
[(, ), ||, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ,, "We should only declare vars and functions and function args", ), ;, if, (]
[(, ), ||, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ,, "We should only declare vars and functions and function args", ), ;, if, (]
[(, ), ||, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ,, "We should only declare vars and functions and function args", ), ;, if, (]
[(, ), &&, parent, ., isFunction, (, ), ,, "We should only declare vars and functions and function args", ), ;, if, (, toRemove, ., isParamList, (, ), &&]
[(, ), &&, parent, ., isFunction, (, ), ,, "We should only declare vars and functions and function args", ), ;, if, (, toRemove, ., isParamList, (, ), &&]
[;, if, (, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ), {, }, else, if, (]
[;, if, (, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ), {, }, else, if, (]
[., isParamList, (, ), &&, parent, ., isFunction, (, ), ), {, }, else, if, (, NodeUtil, ., isFunctionExpression, (]
[., isFunction, (, ), ), {, }, else, if, (, NodeUtil, ., isFunctionExpression, (, toRemove, ), ), {, if, (]
[isFunction, (, ), ), {, }, else, if, (, NodeUtil, ., isFunctionExpression, (, toRemove, ), ), {, if, (, !]
[), {, }, else, if, (, NodeUtil, ., isFunctionExpression, (, toRemove, ), ), {, if, (, !, preserveFunctionExpressionNames, ), {]
[), {, }, else, if, (, NodeUtil, ., isFunctionExpression, (, toRemove, ), ), {, if, (, !, preserveFunctionExpressionNames, ), {]
[), {, }, else, if, (, NodeUtil, ., isFunctionExpression, (, toRemove, ), ), {, if, (, !, preserveFunctionExpressionNames, ), {]
[isFunctionExpression, (, toRemove, ), ), {, if, (, !, preserveFunctionExpressionNames, ), {, toRemove, ., getFirstChild, (, ), ., setString, (]
[), ), {, if, (, !, preserveFunctionExpressionNames, ), {, toRemove, ., getFirstChild, (, ), ., setString, (, "", ), ;]
[), ), {, if, (, !, preserveFunctionExpressionNames, ), {, toRemove, ., getFirstChild, (, ), ., setString, (, "", ), ;]
[getFirstChild, (, ), ., setString, (, "", ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (]
[getFirstChild, (, ), ., setString, (, "", ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (]
[getFirstChild, (, ), ., setString, (, "", ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (]
[getFirstChild, (, ), ., setString, (, "", ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (]
[), ., setString, (, "", ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, parent, !=]
[setString, (, "", ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, parent, !=, null, &&]
[setString, (, "", ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, parent, !=, null, &&]
[., reportCodeChange, (, ), ;, }, }, else, if, (, parent, !=, null, &&, parent, ., isFor, (, ), &&]
[., reportCodeChange, (, ), ;, }, }, else, if, (, parent, !=, null, &&, parent, ., isFor, (, ), &&]
[., reportCodeChange, (, ), ;, }, }, else, if, (, parent, !=, null, &&, parent, ., isFor, (, ), &&]
[}, else, if, (, parent, !=, null, &&, parent, ., isFor, (, ), &&, parent, ., getChildCount, (, ), <]
[&&, parent, ., isFor, (, ), &&, parent, ., getChildCount, (, ), <, 4, ), {, }, else, if, (]
[&&, parent, ., isFor, (, ), &&, parent, ., getChildCount, (, ), <, 4, ), {, }, else, if, (]
[&&, parent, ., isFor, (, ), &&, parent, ., getChildCount, (, ), <, 4, ), {, }, else, if, (]
[&&, parent, ., isFor, (, ), &&, parent, ., getChildCount, (, ), <, 4, ), {, }, else, if, (]
[&&, parent, ., getChildCount, (, ), <, 4, ), {, }, else, if, (, toRemove, ., isVar, (, ), &&]
[&&, parent, ., getChildCount, (, ), <, 4, ), {, }, else, if, (, toRemove, ., isVar, (, ), &&]
[<, 4, ), {, }, else, if, (, toRemove, ., isVar, (, ), &&, nameNode, ., hasChildren, (, ), &&]
[<, 4, ), {, }, else, if, (, toRemove, ., isVar, (, ), &&, nameNode, ., hasChildren, (, ), &&]
[}, else, if, (, toRemove, ., isVar, (, ), &&, nameNode, ., hasChildren, (, ), &&, NodeUtil, ., mayHaveSideEffects, (]
[}, else, if, (, toRemove, ., isVar, (, ), &&, nameNode, ., hasChildren, (, ), &&, NodeUtil, ., mayHaveSideEffects, (]
[isVar, (, ), &&, nameNode, ., hasChildren, (, ), &&, NodeUtil, ., mayHaveSideEffects, (, nameNode, ., getFirstChild, (, ), ,]
[hasChildren, (, ), &&, NodeUtil, ., mayHaveSideEffects, (, nameNode, ., getFirstChild, (, ), ,, compiler, ), ), {, if, (]
[hasChildren, (, ), &&, NodeUtil, ., mayHaveSideEffects, (, nameNode, ., getFirstChild, (, ), ,, compiler, ), ), {, if, (]
[hasChildren, (, ), &&, NodeUtil, ., mayHaveSideEffects, (, nameNode, ., getFirstChild, (, ), ,, compiler, ), ), {, if, (]
[mayHaveSideEffects, (, nameNode, ., getFirstChild, (, ), ,, compiler, ), ), {, if, (, toRemove, ., getChildCount, (, ), ==]
[., getFirstChild, (, ), ,, compiler, ), ), {, if, (, toRemove, ., getChildCount, (, ), ==, 1, ), {]
[., getFirstChild, (, ), ,, compiler, ), ), {, if, (, toRemove, ., getChildCount, (, ), ==, 1, ), {]
[,, compiler, ), ), {, if, (, toRemove, ., getChildCount, (, ), ==, 1, ), {, parent, ., replaceChild, (]
[), ), {, if, (, toRemove, ., getChildCount, (, ), ==, 1, ), {, parent, ., replaceChild, (, toRemove, ,]
[), ), {, if, (, toRemove, ., getChildCount, (, ), ==, 1, ), {, parent, ., replaceChild, (, toRemove, ,]
[(, toRemove, ., getChildCount, (, ), ==, 1, ), {, parent, ., replaceChild, (, toRemove, ,, IR, ., exprResult, (]
[(, toRemove, ., getChildCount, (, ), ==, 1, ), {, parent, ., replaceChild, (, toRemove, ,, IR, ., exprResult, (]
[), {, parent, ., replaceChild, (, toRemove, ,, IR, ., exprResult, (, nameNode, ., removeFirstChild, (, ), ), ), ;]
[), {, parent, ., replaceChild, (, toRemove, ,, IR, ., exprResult, (, nameNode, ., removeFirstChild, (, ), ), ), ;]
[(, nameNode, ., removeFirstChild, (, ), ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (]
[(, nameNode, ., removeFirstChild, (, ), ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (]
[(, nameNode, ., removeFirstChild, (, ), ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, toRemove, ., isVar, (, ), &&]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, toRemove, ., isVar, (, ), &&]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, toRemove, ., isVar, (, ), &&]
[(, ), ;, }, }, else, if, (, toRemove, ., isVar, (, ), &&, toRemove, ., getChildCount, (, ), >]
[}, }, else, if, (, toRemove, ., isVar, (, ), &&, toRemove, ., getChildCount, (, ), >, 1, ), {]
[}, }, else, if, (, toRemove, ., isVar, (, ), &&, toRemove, ., getChildCount, (, ), >, 1, ), {]
[(, toRemove, ., isVar, (, ), &&, toRemove, ., getChildCount, (, ), >, 1, ), {, toRemove, ., removeChild, (]
[isVar, (, ), &&, toRemove, ., getChildCount, (, ), >, 1, ), {, toRemove, ., removeChild, (, nameNode, ), ;]
[isVar, (, ), &&, toRemove, ., getChildCount, (, ), >, 1, ), {, toRemove, ., removeChild, (, nameNode, ), ;]
[1, ), {, toRemove, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (]
[1, ), {, toRemove, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (]
[{, toRemove, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, parent, !=]
[removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, parent, !=, null, ), {]
[removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, parent, !=, null, ), {]
[;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, parent, !=, null, ), {, NodeUtil, ., removeChild, (]
[., reportCodeChange, (, ), ;, }, else, if, (, parent, !=, null, ), {, NodeUtil, ., removeChild, (, parent, ,]
[), ;, }, else, if, (, parent, !=, null, ), {, NodeUtil, ., removeChild, (, parent, ,, toRemove, ), ;]
[), ;, }, else, if, (, parent, !=, null, ), {, NodeUtil, ., removeChild, (, parent, ,, toRemove, ), ;]
[{, private, final, Node, node, ;, private, final, Scope, scope, ;, Continuation, (, Node, node, ,, Scope, scope, ), {]
[{, private, final, Node, node, ;, private, final, Scope, scope, ;, Continuation, (, Node, node, ,, Scope, scope, ), {]
[node, ;, private, final, Scope, scope, ;, Continuation, (, Node, node, ,, Scope, scope, ), {, this, ., node, =]
[private, final, Scope, scope, ;, Continuation, (, Node, node, ,, Scope, scope, ), {, this, ., node, =, node, ;]
[private, final, Scope, scope, ;, Continuation, (, Node, node, ,, Scope, scope, ), {, this, ., node, =, node, ;]
[;, Continuation, (, Node, node, ,, Scope, scope, ), {, this, ., node, =, node, ;, this, ., scope, =]
[this, ., node, =, node, ;, this, ., scope, =, scope, ;, }, void, apply, (, ), {, if, (]
[this, ., node, =, node, ;, this, ., scope, =, scope, ;, }, void, apply, (, ), {, if, (]
[node, ;, this, ., scope, =, scope, ;, }, void, apply, (, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (]
[scope, =, scope, ;, }, void, apply, (, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, node, ), ), {]
[scope, ;, }, void, apply, (, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, node, ), ), {, traverseFunction, (]
[}, void, apply, (, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, node, ), ), {, traverseFunction, (, node, ,]
[(, node, ), ), {, traverseFunction, (, node, ,, scope, ), ;, }, else, {, for, (, Node, child, =]
[(, node, ), ), {, traverseFunction, (, node, ,, scope, ), ;, }, else, {, for, (, Node, child, =]
[(, node, ,, scope, ), ;, }, else, {, for, (, Node, child, =, node, ., getFirstChild, (, ), ;]
[(, node, ,, scope, ), ;, }, else, {, for, (, Node, child, =, node, ., getFirstChild, (, ), ;]
[,, scope, ), ;, }, else, {, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=]
[), ;, }, else, {, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;]
[}, else, {, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[}, else, {, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[=, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, traverseNode, (]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, traverseNode, (, child, ,]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, traverseNode, (, child, ,, node, ,]
[final, boolean, mayHaveSecondarySideEffects, ;, final, boolean, maybeAliased, ;, Assign, (, Node, assignNode, ,, Node, nameNode, ,, boolean, isPropertyAssign, ), {]
[final, boolean, mayHaveSecondarySideEffects, ;, final, boolean, maybeAliased, ;, Assign, (, Node, assignNode, ,, Node, nameNode, ,, boolean, isPropertyAssign, ), {]
[final, boolean, maybeAliased, ;, Assign, (, Node, assignNode, ,, Node, nameNode, ,, boolean, isPropertyAssign, ), {, Preconditions, ., checkState, (]
[final, boolean, maybeAliased, ;, Assign, (, Node, assignNode, ,, Node, nameNode, ,, boolean, isPropertyAssign, ), {, Preconditions, ., checkState, (]
[Assign, (, Node, assignNode, ,, Node, nameNode, ,, boolean, isPropertyAssign, ), {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (]
[,, Node, nameNode, ,, boolean, isPropertyAssign, ), {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, ), ), ;]
[,, Node, nameNode, ,, boolean, isPropertyAssign, ), {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, ), ), ;]
[boolean, isPropertyAssign, ), {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, ), ), ;, this, ., assignNode, =]
[), {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, ), ), ;, this, ., assignNode, =, assignNode, ;]
[), {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, ), ), ;, this, ., assignNode, =, assignNode, ;]
[checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, ), ), ;, this, ., assignNode, =, assignNode, ;, this, ., nameNode, =]
[NodeUtil, ., isAssignmentOp, (, assignNode, ), ), ;, this, ., assignNode, =, assignNode, ;, this, ., nameNode, =, nameNode, ;]
[NodeUtil, ., isAssignmentOp, (, assignNode, ), ), ;, this, ., assignNode, =, assignNode, ;, this, ., nameNode, =, nameNode, ;]
[assignNode, ), ), ;, this, ., assignNode, =, assignNode, ;, this, ., nameNode, =, nameNode, ;, this, ., isPropertyAssign, =]
[), ;, this, ., assignNode, =, assignNode, ;, this, ., nameNode, =, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;]
[), ;, this, ., assignNode, =, assignNode, ;, this, ., nameNode, =, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;]
[assignNode, =, assignNode, ;, this, ., nameNode, =, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =]
[assignNode, =, assignNode, ;, this, ., nameNode, =, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =]
[this, ., nameNode, =, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (]
[=, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;]
[=, nameNode, ;, this, ., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;]
[., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =]
[., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =]
[., isPropertyAssign, =, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =]
[=, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =, maybeAliased, ||]
[=, isPropertyAssign, ;, this, ., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =, maybeAliased, ||]
[., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =, maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (]
[., maybeAliased, =, NodeUtil, ., isExpressionResultUsed, (, assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =, maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (]
[assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =, maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getFirstChild, (, ), ), ||]
[assignNode, ), ;, this, ., mayHaveSecondarySideEffects, =, maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getFirstChild, (, ), ), ||]
[., mayHaveSecondarySideEffects, =, maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getFirstChild, (, ), ), ||, NodeUtil, ., mayHaveSideEffects, (]
[., mayHaveSecondarySideEffects, =, maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getFirstChild, (, ), ), ||, NodeUtil, ., mayHaveSideEffects, (]
[NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getLastChild, (, ), ), ;, }, static, Assign, maybeCreateAssign, (, Node, assignNode, ), {]
[NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getLastChild, (, ), ), ;, }, static, Assign, maybeCreateAssign, (, Node, assignNode, ), {]
[assignNode, ., getLastChild, (, ), ), ;, }, static, Assign, maybeCreateAssign, (, Node, assignNode, ), {, Preconditions, ., checkState, (]
[assignNode, ., getLastChild, (, ), ), ;, }, static, Assign, maybeCreateAssign, (, Node, assignNode, ), {, Preconditions, ., checkState, (]
[), ), ;, }, static, Assign, maybeCreateAssign, (, Node, assignNode, ), {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (]
[(, Node, assignNode, ), {, Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, ), ), ;, boolean, isPropAssign, =]
[Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, ), ), ;, boolean, isPropAssign, =, false, ;, Node, current, =]
[Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, ), ), ;, boolean, isPropAssign, =, false, ;, Node, current, =]
[assignNode, ), ), ;, boolean, isPropAssign, =, false, ;, Node, current, =, assignNode, ., getFirstChild, (, ), ;, if, (]
[assignNode, ), ), ;, boolean, isPropAssign, =, false, ;, Node, current, =, assignNode, ., getFirstChild, (, ), ;, if, (]
[boolean, isPropAssign, =, false, ;, Node, current, =, assignNode, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (]
[;, Node, current, =, assignNode, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (, current, ), ), {]
[current, =, assignNode, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (, current, ), ), {, current, =]
[current, =, assignNode, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (, current, ), ), {, current, =]
[), ;, if, (, NodeUtil, ., isGet, (, current, ), ), {, current, =, current, ., getFirstChild, (, ), ;]
[if, (, NodeUtil, ., isGet, (, current, ), ), {, current, =, current, ., getFirstChild, (, ), ;, isPropAssign, =]
[isGet, (, current, ), ), {, current, =, current, ., getFirstChild, (, ), ;, isPropAssign, =, true, ;, if, (]
[isGet, (, current, ), ), {, current, =, current, ., getFirstChild, (, ), ;, isPropAssign, =, true, ;, if, (]
[isGet, (, current, ), ), {, current, =, current, ., getFirstChild, (, ), ;, isPropAssign, =, true, ;, if, (]
[current, =, current, ., getFirstChild, (, ), ;, isPropAssign, =, true, ;, if, (, current, ., isGetProp, (, ), &&]
[current, =, current, ., getFirstChild, (, ), ;, isPropAssign, =, true, ;, if, (, current, ., isGetProp, (, ), &&]
[current, =, current, ., getFirstChild, (, ), ;, isPropAssign, =, true, ;, if, (, current, ., isGetProp, (, ), &&]
[current, =, current, ., getFirstChild, (, ), ;, isPropAssign, =, true, ;, if, (, current, ., isGetProp, (, ), &&]
[if, (, current, ., isGetProp, (, ), &&, current, ., getLastChild, (, ), ., getString, (, ), ., equals, (]
[isGetProp, (, ), &&, current, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ), {]
[), &&, current, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ), {, current, =]
[), &&, current, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ), {, current, =]
[), ., equals, (, "prototype", ), ), {, current, =, current, ., getFirstChild, (, ), ;, }, }, if, (]
[), ., equals, (, "prototype", ), ), {, current, =, current, ., getFirstChild, (, ), ;, }, }, if, (]
[current, =, current, ., getFirstChild, (, ), ;, }, }, if, (, current, ., isName, (, ), ), {, return]
[., getFirstChild, (, ), ;, }, }, if, (, current, ., isName, (, ), ), {, return, new, Assign, (]
[(, ), ;, }, }, if, (, current, ., isName, (, ), ), {, return, new, Assign, (, assignNode, ,]
[;, }, }, if, (, current, ., isName, (, ), ), {, return, new, Assign, (, assignNode, ,, current, ,]
[current, ., isName, (, ), ), {, return, new, Assign, (, assignNode, ,, current, ,, isPropAssign, ), ;, }, return]
[assignNode, ,, current, ,, isPropAssign, ), ;, }, return, null, ;, }, void, remove, (, ), {, Node, parent, =]
[assignNode, ,, current, ,, isPropAssign, ), ;, }, return, null, ;, }, void, remove, (, ), {, Node, parent, =]
[return, null, ;, }, void, remove, (, ), {, Node, parent, =, assignNode, ., getParent, (, ), ;, if, (]
[(, ), {, Node, parent, =, assignNode, ., getParent, (, ), ;, if, (, mayHaveSecondarySideEffects, ), {, Node, replacement, =]
[(, ), {, Node, parent, =, assignNode, ., getParent, (, ), ;, if, (, mayHaveSecondarySideEffects, ), {, Node, replacement, =]
[(, ), {, Node, parent, =, assignNode, ., getParent, (, ), ;, if, (, mayHaveSecondarySideEffects, ), {, Node, replacement, =]
[), {, Node, replacement, =, assignNode, ., getLastChild, (, ), ., detachFromParent, (, ), ;, for, (, Node, current, =]
[), {, Node, replacement, =, assignNode, ., getLastChild, (, ), ., detachFromParent, (, ), ;, for, (, Node, current, =]
[., getLastChild, (, ), ., detachFromParent, (, ), ;, for, (, Node, current, =, assignNode, ., getFirstChild, (, ), ;]
[getLastChild, (, ), ., detachFromParent, (, ), ;, for, (, Node, current, =, assignNode, ., getFirstChild, (, ), ;, !]
[getLastChild, (, ), ., detachFromParent, (, ), ;, for, (, Node, current, =, assignNode, ., getFirstChild, (, ), ;, !]
[), ;, for, (, Node, current, =, assignNode, ., getFirstChild, (, ), ;, !, current, ., isName, (, ), ;]
[for, (, Node, current, =, assignNode, ., getFirstChild, (, ), ;, !, current, ., isName, (, ), ;, current, =]
[for, (, Node, current, =, assignNode, ., getFirstChild, (, ), ;, !, current, ., isName, (, ), ;, current, =]
[), ;, !, current, ., isName, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, if, (]
[), ;, !, current, ., isName, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, if, (]
[), ;, current, =, current, ., getFirstChild, (, ), ), {, if, (, current, ., isGetElem, (, ), ), {]
[current, =, current, ., getFirstChild, (, ), ), {, if, (, current, ., isGetElem, (, ), ), {, replacement, =]
[current, =, current, ., getFirstChild, (, ), ), {, if, (, current, ., isGetElem, (, ), ), {, replacement, =]
[getFirstChild, (, ), ), {, if, (, current, ., isGetElem, (, ), ), {, replacement, =, IR, ., comma, (]
[getFirstChild, (, ), ), {, if, (, current, ., isGetElem, (, ), ), {, replacement, =, IR, ., comma, (]
[getFirstChild, (, ), ), {, if, (, current, ., isGetElem, (, ), ), {, replacement, =, IR, ., comma, (]
[(, ), ), {, replacement, =, IR, ., comma, (, current, ., getLastChild, (, ), ., detachFromParent, (, ), ,]
[{, replacement, =, IR, ., comma, (, current, ., getLastChild, (, ), ., detachFromParent, (, ), ,, replacement, ), ;]
[{, replacement, =, IR, ., comma, (, current, ., getLastChild, (, ), ., detachFromParent, (, ), ,, replacement, ), ;]
[., comma, (, current, ., getLastChild, (, ), ., detachFromParent, (, ), ,, replacement, ), ;, replacement, ., copyInformationFrom, (]
[getLastChild, (, ), ., detachFromParent, (, ), ,, replacement, ), ;, replacement, ., copyInformationFrom, (, current, ), ;, }, }]
[getLastChild, (, ), ., detachFromParent, (, ), ,, replacement, ), ;, replacement, ., copyInformationFrom, (, current, ), ;, }, }]
[detachFromParent, (, ), ,, replacement, ), ;, replacement, ., copyInformationFrom, (, current, ), ;, }, }, parent, ., replaceChild, (]
[), ,, replacement, ), ;, replacement, ., copyInformationFrom, (, current, ), ;, }, }, parent, ., replaceChild, (, assignNode, ,]
[current, ), ;, }, }, parent, ., replaceChild, (, assignNode, ,, replacement, ), ;, }, else, {, Node, gramps, =]
[current, ), ;, }, }, parent, ., replaceChild, (, assignNode, ,, replacement, ), ;, }, else, {, Node, gramps, =]
[(, assignNode, ,, replacement, ), ;, }, else, {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[(, assignNode, ,, replacement, ), ;, }, else, {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[else, {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {]
[else, {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {]
[=, parent, ., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {, gramps, ., removeChild, (]
[;, if, (, parent, ., isExprResult, (, ), ), {, gramps, ., removeChild, (, parent, ), ;, }, else, {]
[;, if, (, parent, ., isExprResult, (, ), ), {, gramps, ., removeChild, (, parent, ), ;, }, else, {]
[., isExprResult, (, ), ), {, gramps, ., removeChild, (, parent, ), ;, }, else, {, parent, ., replaceChild, (]
[(, ), ), {, gramps, ., removeChild, (, parent, ), ;, }, else, {, parent, ., replaceChild, (, assignNode, ,]
[(, ), ), {, gramps, ., removeChild, (, parent, ), ;, }, else, {, parent, ., replaceChild, (, assignNode, ,]
[(, ), ), {, gramps, ., removeChild, (, parent, ), ;, }, else, {, parent, ., replaceChild, (, assignNode, ,]
