[[, ], [, ], startConfiguration, ;, private, final, int, dimension, ;, protected, AbstractSimplex, (, int, n, ), {, this, (]
[[, ], startConfiguration, ;, private, final, int, dimension, ;, protected, AbstractSimplex, (, int, n, ), {, this, (, n, ,]
[this, (, n, ,, 1d, ), ;, }, protected, AbstractSimplex, (, int, n, ,, double, sideLength, ), {, this, (]
[n, ,, 1d, ), ;, }, protected, AbstractSimplex, (, int, n, ,, double, sideLength, ), {, this, (, createHypercubeSteps, (]
[1d, ), ;, }, protected, AbstractSimplex, (, int, n, ,, double, sideLength, ), {, this, (, createHypercubeSteps, (, n, ,]
[(, n, ,, sideLength, ), ), ;, }, protected, AbstractSimplex, (, final, double, [, ], steps, ), {, if, (]
[(, n, ,, sideLength, ), ), ;, }, protected, AbstractSimplex, (, final, double, [, ], steps, ), {, if, (]
[,, sideLength, ), ), ;, }, protected, AbstractSimplex, (, final, double, [, ], steps, ), {, if, (, steps, ==]
[;, }, protected, AbstractSimplex, (, final, double, [, ], steps, ), {, if, (, steps, ==, null, ), {, throw]
[], steps, ), {, if, (, steps, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[], steps, ), {, if, (, steps, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[], steps, ), {, if, (, steps, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, steps, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, steps, ., length, ==]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, steps, ., length, ==, 0, ), {, throw]
[(, ), ;, }, if, (, steps, ., length, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }]
[;, }, if, (, steps, ., length, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, dimension, =]
[;, }, if, (, steps, ., length, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, dimension, =]
[steps, ., length, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, dimension, =, steps, ., length, ;]
[length, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, dimension, =, steps, ., length, ;, startConfiguration, =]
[), {, throw, new, ZeroException, (, ), ;, }, dimension, =, steps, ., length, ;, startConfiguration, =, new, double, []
[new, ZeroException, (, ), ;, }, dimension, =, steps, ., length, ;, startConfiguration, =, new, double, [, dimension, ], []
[steps, ., length, ;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =]
[length, ;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =, 0, ;]
[length, ;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =, 0, ;]
[startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[(, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, double, [, ], vertexI, =]
[(, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, double, [, ], vertexI, =]
[i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, double, [, ], vertexI, =, startConfiguration, []
[i, ++, ), {, final, double, [, ], vertexI, =, startConfiguration, [, i, ], ;, for, (, int, j, =]
[), {, final, double, [, ], vertexI, =, startConfiguration, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, double, [, ], vertexI, =, startConfiguration, [, i, ], ;, for, (, int, j, =, 0, ;]
[final, double, [, ], vertexI, =, startConfiguration, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[final, double, [, ], vertexI, =, startConfiguration, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[[, ], vertexI, =, startConfiguration, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, i, +]
[vertexI, =, startConfiguration, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;]
[vertexI, =, startConfiguration, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;]
[;, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, j, ++, ), {, if, (]
[;, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, j, ++, ), {, if, (]
[;, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, j, ++, ), {, if, (]
[(, int, j, =, 0, ;, j, <, i, +, 1, ;, j, ++, ), {, if, (, steps, []
[=, 0, ;, j, <, i, +, 1, ;, j, ++, ), {, if, (, steps, [, j, ], ==]
[<, i, +, 1, ;, j, ++, ), {, if, (, steps, [, j, ], ==, 0, ), {, throw]
[1, ;, j, ++, ), {, if, (, steps, [, j, ], ==, 0, ), {, throw, new, ZeroException, (]
[1, ;, j, ++, ), {, if, (, steps, [, j, ], ==, 0, ), {, throw, new, ZeroException, (]
[if, (, steps, [, j, ], ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }]
[if, (, steps, [, j, ], ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }]
[j, ], ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }, System, ., arraycopy, (]
[==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }, System, ., arraycopy, (, steps, ,]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }, System, ., arraycopy, (, steps, ,, 0, ,]
[throw, new, ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }, System, ., arraycopy, (, steps, ,, 0, ,, vertexI, ,]
[ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }, System, ., arraycopy, (, steps, ,, 0, ,, vertexI, ,, 0, ,]
[ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }, System, ., arraycopy, (, steps, ,, 0, ,, vertexI, ,, 0, ,]
[LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }, System, ., arraycopy, (, steps, ,, 0, ,, vertexI, ,, 0, ,, j, +]
[1, ), ;, }, }, }, protected, AbstractSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, if, (]
[1, ), ;, }, }, }, protected, AbstractSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, if, (]
[1, ), ;, }, }, }, protected, AbstractSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, if, (]
[}, }, protected, AbstractSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, if, (, referenceSimplex, ., length, <=]
[(, final, double, [, ], [, ], referenceSimplex, ), {, if, (, referenceSimplex, ., length, <=, 0, ), {, throw]
[[, ], [, ], referenceSimplex, ), {, if, (, referenceSimplex, ., length, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[[, ], [, ], referenceSimplex, ), {, if, (, referenceSimplex, ., length, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[referenceSimplex, ), {, if, (, referenceSimplex, ., length, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SIMPLEX_NEED_ONE_POINT, ,]
[referenceSimplex, ), {, if, (, referenceSimplex, ., length, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SIMPLEX_NEED_ONE_POINT, ,]
[., length, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SIMPLEX_NEED_ONE_POINT, ,, referenceSimplex, ., length, ), ;, }]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SIMPLEX_NEED_ONE_POINT, ,, referenceSimplex, ., length, ), ;, }, dimension, =]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SIMPLEX_NEED_ONE_POINT, ,, referenceSimplex, ., length, ), ;, }, dimension, =]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SIMPLEX_NEED_ONE_POINT, ,, referenceSimplex, ., length, ), ;, }, dimension, =]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SIMPLEX_NEED_ONE_POINT, ,, referenceSimplex, ., length, ), ;, }, dimension, =, referenceSimplex, ., length, -]
[NotStrictlyPositiveException, (, LocalizedFormats, ., SIMPLEX_NEED_ONE_POINT, ,, referenceSimplex, ., length, ), ;, }, dimension, =, referenceSimplex, ., length, -, 1, ;]
[LocalizedFormats, ., SIMPLEX_NEED_ONE_POINT, ,, referenceSimplex, ., length, ), ;, }, dimension, =, referenceSimplex, ., length, -, 1, ;, startConfiguration, =]
[,, referenceSimplex, ., length, ), ;, }, dimension, =, referenceSimplex, ., length, -, 1, ;, startConfiguration, =, new, double, []
[length, ), ;, }, dimension, =, referenceSimplex, ., length, -, 1, ;, startConfiguration, =, new, double, [, dimension, ], []
[-, 1, ;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, final, double, [, ], ref0, =]
[-, 1, ;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, final, double, [, ], ref0, =]
[;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, final, double, [, ], ref0, =, referenceSimplex, []
[[, dimension, ], ;, final, double, [, ], ref0, =, referenceSimplex, [, 0, ], ;, for, (, int, i, =]
[], ;, final, double, [, ], ref0, =, referenceSimplex, [, 0, ], ;, for, (, int, i, =, 0, ;]
[], ;, final, double, [, ], ref0, =, referenceSimplex, [, 0, ], ;, for, (, int, i, =, 0, ;]
[final, double, [, ], ref0, =, referenceSimplex, [, 0, ], ;, for, (, int, i, =, 0, ;, i, <]
[final, double, [, ], ref0, =, referenceSimplex, [, 0, ], ;, for, (, int, i, =, 0, ;, i, <]
[ref0, =, referenceSimplex, [, 0, ], ;, for, (, int, i, =, 0, ;, i, <, referenceSimplex, ., length, ;]
[ref0, =, referenceSimplex, [, 0, ], ;, for, (, int, i, =, 0, ;, i, <, referenceSimplex, ., length, ;]
[i, =, 0, ;, i, <, referenceSimplex, ., length, ;, i, ++, ), {, final, double, [, ], refI, =]
[i, =, 0, ;, i, <, referenceSimplex, ., length, ;, i, ++, ), {, final, double, [, ], refI, =]
[0, ;, i, <, referenceSimplex, ., length, ;, i, ++, ), {, final, double, [, ], refI, =, referenceSimplex, []
[., length, ;, i, ++, ), {, final, double, [, ], refI, =, referenceSimplex, [, i, ], ;, if, (]
[., length, ;, i, ++, ), {, final, double, [, ], refI, =, referenceSimplex, [, i, ], ;, if, (]
[., length, ;, i, ++, ), {, final, double, [, ], refI, =, referenceSimplex, [, i, ], ;, if, (]
[++, ), {, final, double, [, ], refI, =, referenceSimplex, [, i, ], ;, if, (, refI, ., length, !=]
[double, [, ], refI, =, referenceSimplex, [, i, ], ;, if, (, refI, ., length, !=, dimension, ), {, throw]
[refI, =, referenceSimplex, [, i, ], ;, if, (, refI, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (]
[refI, =, referenceSimplex, [, i, ], ;, if, (, refI, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (]
[i, ], ;, if, (, refI, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, refI, ., length, ,]
[dimension, ), {, throw, new, DimensionMismatchException, (, refI, ., length, ,, dimension, ), ;, }, for, (, int, j, =]
[{, throw, new, DimensionMismatchException, (, refI, ., length, ,, dimension, ), ;, }, for, (, int, j, =, 0, ;]
[{, throw, new, DimensionMismatchException, (, refI, ., length, ,, dimension, ), ;, }, for, (, int, j, =, 0, ;]
[new, DimensionMismatchException, (, refI, ., length, ,, dimension, ), ;, }, for, (, int, j, =, 0, ;, j, <]
[(, refI, ., length, ,, dimension, ), ;, }, for, (, int, j, =, 0, ;, j, <, i, ;]
[(, refI, ., length, ,, dimension, ), ;, }, for, (, int, j, =, 0, ;, j, <, i, ;]
[(, int, j, =, 0, ;, j, <, i, ;, j, ++, ), {, final, double, [, ], refJ, =]
[(, int, j, =, 0, ;, j, <, i, ;, j, ++, ), {, final, double, [, ], refJ, =]
[j, =, 0, ;, j, <, i, ;, j, ++, ), {, final, double, [, ], refJ, =, referenceSimplex, []
[i, ;, j, ++, ), {, final, double, [, ], refJ, =, referenceSimplex, [, j, ], ;, boolean, allEquals, =]
[double, [, ], refJ, =, referenceSimplex, [, j, ], ;, boolean, allEquals, =, true, ;, for, (, int, k, =]
[], refJ, =, referenceSimplex, [, j, ], ;, boolean, allEquals, =, true, ;, for, (, int, k, =, 0, ;]
[], refJ, =, referenceSimplex, [, j, ], ;, boolean, allEquals, =, true, ;, for, (, int, k, =, 0, ;]
[=, referenceSimplex, [, j, ], ;, boolean, allEquals, =, true, ;, for, (, int, k, =, 0, ;, k, <]
[[, j, ], ;, boolean, allEquals, =, true, ;, for, (, int, k, =, 0, ;, k, <, dimension, ;]
[[, j, ], ;, boolean, allEquals, =, true, ;, for, (, int, k, =, 0, ;, k, <, dimension, ;]
[=, true, ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, if, (]
[=, true, ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, if, (]
[=, true, ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, if, (]
[;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, if, (, refI, []
[int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, if, (, refI, [, k, ], !=]
[int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, if, (, refI, [, k, ], !=]
[=, 0, ;, k, <, dimension, ;, k, ++, ), {, if, (, refI, [, k, ], !=, refJ, []
[<, dimension, ;, k, ++, ), {, if, (, refI, [, k, ], !=, refJ, [, k, ], ), {]
[;, k, ++, ), {, if, (, refI, [, k, ], !=, refJ, [, k, ], ), {, allEquals, =]
[[, k, ], !=, refJ, [, k, ], ), {, allEquals, =, false, ;, break, ;, }, }, if, (]
[refJ, [, k, ], ), {, allEquals, =, false, ;, break, ;, }, }, if, (, allEquals, ), {, throw]
[], ), {, allEquals, =, false, ;, break, ;, }, }, if, (, allEquals, ), {, throw, new, MathIllegalArgumentException, (]
[], ), {, allEquals, =, false, ;, break, ;, }, }, if, (, allEquals, ), {, throw, new, MathIllegalArgumentException, (]
[=, false, ;, break, ;, }, }, if, (, allEquals, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ,]
[;, break, ;, }, }, if, (, allEquals, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ,, i, ,]
[allEquals, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ,, i, ,, j, ), ;, }, }, if, (]
[allEquals, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ,, i, ,, j, ), ;, }, }, if, (]
[{, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ,, i, ,, j, ), ;, }, }, if, (, i, >]
[i, ,, j, ), ;, }, }, if, (, i, >, 0, ), {, final, double, [, ], confI, =]
[i, ,, j, ), ;, }, }, if, (, i, >, 0, ), {, final, double, [, ], confI, =]
[j, ), ;, }, }, if, (, i, >, 0, ), {, final, double, [, ], confI, =, startConfiguration, []
[j, ), ;, }, }, if, (, i, >, 0, ), {, final, double, [, ], confI, =, startConfiguration, []
[;, }, }, if, (, i, >, 0, ), {, final, double, [, ], confI, =, startConfiguration, [, i, -]
[), {, final, double, [, ], confI, =, startConfiguration, [, i, -, 1, ], ;, for, (, int, k, =]
[final, double, [, ], confI, =, startConfiguration, [, i, -, 1, ], ;, for, (, int, k, =, 0, ;]
[final, double, [, ], confI, =, startConfiguration, [, i, -, 1, ], ;, for, (, int, k, =, 0, ;]
[[, ], confI, =, startConfiguration, [, i, -, 1, ], ;, for, (, int, k, =, 0, ;, k, <]
[confI, =, startConfiguration, [, i, -, 1, ], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;]
[confI, =, startConfiguration, [, i, -, 1, ], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;]
[i, -, 1, ], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {]
[i, -, 1, ], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {]
[1, ], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, confI, []
[for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, confI, [, k, ], =]
[for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, confI, [, k, ], =]
[for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, confI, [, k, ], =]
[int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, confI, [, k, ], =, refI, []
[0, ;, k, <, dimension, ;, k, ++, ), {, confI, [, k, ], =, refI, [, k, ], -]
[0, ;, k, <, dimension, ;, k, ++, ), {, confI, [, k, ], =, refI, [, k, ], -]
[k, <, dimension, ;, k, ++, ), {, confI, [, k, ], =, refI, [, k, ], -, ref0, []
[[, k, ], -, ref0, [, k, ], ;, }, }, }, }, public, int, getDimension, (, ), {, return]
[}, }, }, public, int, getDimension, (, ), {, return, dimension, ;, }, public, int, getSize, (, ), {, return]
[}, }, }, public, int, getDimension, (, ), {, return, dimension, ;, }, public, int, getSize, (, ), {, return]
[Comparator, <, PointValuePair, >, comparator, ), ;, public, void, build, (, final, double, [, ], startPoint, ), {, if, (]
[Comparator, <, PointValuePair, >, comparator, ), ;, public, void, build, (, final, double, [, ], startPoint, ), {, if, (]
[PointValuePair, >, comparator, ), ;, public, void, build, (, final, double, [, ], startPoint, ), {, if, (, dimension, !=]
[PointValuePair, >, comparator, ), ;, public, void, build, (, final, double, [, ], startPoint, ), {, if, (, dimension, !=]
[void, build, (, final, double, [, ], startPoint, ), {, if, (, dimension, !=, startPoint, ., length, ), {, throw]
[final, double, [, ], startPoint, ), {, if, (, dimension, !=, startPoint, ., length, ), {, throw, new, DimensionMismatchException, (]
[[, ], startPoint, ), {, if, (, dimension, !=, startPoint, ., length, ), {, throw, new, DimensionMismatchException, (, dimension, ,]
[[, ], startPoint, ), {, if, (, dimension, !=, startPoint, ., length, ), {, throw, new, DimensionMismatchException, (, dimension, ,]
[(, dimension, !=, startPoint, ., length, ), {, throw, new, DimensionMismatchException, (, dimension, ,, startPoint, ., length, ), ;, }]
[!=, startPoint, ., length, ), {, throw, new, DimensionMismatchException, (, dimension, ,, startPoint, ., length, ), ;, }, simplex, =]
[length, ), {, throw, new, DimensionMismatchException, (, dimension, ,, startPoint, ., length, ), ;, }, simplex, =, new, PointValuePair, []
[length, ), {, throw, new, DimensionMismatchException, (, dimension, ,, startPoint, ., length, ), ;, }, simplex, =, new, PointValuePair, []
[{, throw, new, DimensionMismatchException, (, dimension, ,, startPoint, ., length, ), ;, }, simplex, =, new, PointValuePair, [, dimension, +]
[DimensionMismatchException, (, dimension, ,, startPoint, ., length, ), ;, }, simplex, =, new, PointValuePair, [, dimension, +, 1, ], ;]
[DimensionMismatchException, (, dimension, ,, startPoint, ., length, ), ;, }, simplex, =, new, PointValuePair, [, dimension, +, 1, ], ;]
[dimension, ,, startPoint, ., length, ), ;, }, simplex, =, new, PointValuePair, [, dimension, +, 1, ], ;, simplex, []
[., length, ), ;, }, simplex, =, new, PointValuePair, [, dimension, +, 1, ], ;, simplex, [, 0, ], =]
[;, }, simplex, =, new, PointValuePair, [, dimension, +, 1, ], ;, simplex, [, 0, ], =, new, PointValuePair, (]
[simplex, =, new, PointValuePair, [, dimension, +, 1, ], ;, simplex, [, 0, ], =, new, PointValuePair, (, startPoint, ,]
[simplex, =, new, PointValuePair, [, dimension, +, 1, ], ;, simplex, [, 0, ], =, new, PointValuePair, (, startPoint, ,]
[simplex, [, 0, ], =, new, PointValuePair, (, startPoint, ,, Double, ., NaN, ), ;, for, (, int, i, =]
[0, ], =, new, PointValuePair, (, startPoint, ,, Double, ., NaN, ), ;, for, (, int, i, =, 0, ;]
[0, ], =, new, PointValuePair, (, startPoint, ,, Double, ., NaN, ), ;, for, (, int, i, =, 0, ;]
[=, new, PointValuePair, (, startPoint, ,, Double, ., NaN, ), ;, for, (, int, i, =, 0, ;, i, <]
[PointValuePair, (, startPoint, ,, Double, ., NaN, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[PointValuePair, (, startPoint, ,, Double, ., NaN, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[(, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, double, [, ], confI, =]
[(, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, double, [, ], confI, =]
[i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, double, [, ], confI, =, startConfiguration, []
[++, ), {, final, double, [, ], confI, =, startConfiguration, [, i, ], ;, final, double, [, ], vertexI, =]
[final, double, [, ], confI, =, startConfiguration, [, i, ], ;, final, double, [, ], vertexI, =, new, double, []
[i, ], ;, final, double, [, ], vertexI, =, new, double, [, dimension, ], ;, for, (, int, k, =]
[;, final, double, [, ], vertexI, =, new, double, [, dimension, ], ;, for, (, int, k, =, 0, ;]
[;, final, double, [, ], vertexI, =, new, double, [, dimension, ], ;, for, (, int, k, =, 0, ;]
[double, [, ], vertexI, =, new, double, [, dimension, ], ;, for, (, int, k, =, 0, ;, k, <]
[], vertexI, =, new, double, [, dimension, ], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;]
[], vertexI, =, new, double, [, dimension, ], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;]
[double, [, dimension, ], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {]
[double, [, dimension, ], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {]
[dimension, ], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, vertexI, []
[for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, vertexI, [, k, ], =]
[for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, vertexI, [, k, ], =]
[for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, vertexI, [, k, ], =]
[int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, vertexI, [, k, ], =, startPoint, []
[0, ;, k, <, dimension, ;, k, ++, ), {, vertexI, [, k, ], =, startPoint, [, k, ], +]
[0, ;, k, <, dimension, ;, k, ++, ), {, vertexI, [, k, ], =, startPoint, [, k, ], +]
[k, <, dimension, ;, k, ++, ), {, vertexI, [, k, ], =, startPoint, [, k, ], +, confI, []
[k, ++, ), {, vertexI, [, k, ], =, startPoint, [, k, ], +, confI, [, k, ], ;, }]
[k, ++, ), {, vertexI, [, k, ], =, startPoint, [, k, ], +, confI, [, k, ], ;, }]
[), {, vertexI, [, k, ], =, startPoint, [, k, ], +, confI, [, k, ], ;, }, simplex, []
[), {, vertexI, [, k, ], =, startPoint, [, k, ], +, confI, [, k, ], ;, }, simplex, []
[vertexI, [, k, ], =, startPoint, [, k, ], +, confI, [, k, ], ;, }, simplex, [, i, +]
[], =, startPoint, [, k, ], +, confI, [, k, ], ;, }, simplex, [, i, +, 1, ], =]
[[, k, ], +, confI, [, k, ], ;, }, simplex, [, i, +, 1, ], =, new, PointValuePair, (]
[], +, confI, [, k, ], ;, }, simplex, [, i, +, 1, ], =, new, PointValuePair, (, vertexI, ,]
[], +, confI, [, k, ], ;, }, simplex, [, i, +, 1, ], =, new, PointValuePair, (, vertexI, ,]
[void, evaluate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator, ), {, for, (, int, i, =]
[(, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator, ), {, for, (, int, i, =, 0, ;]
[(, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator, ), {, for, (, int, i, =, 0, ;]
[MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator, ), {, for, (, int, i, =, 0, ;, i, <]
[MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator, ), {, for, (, int, i, =, 0, ;, i, <]
[Comparator, <, PointValuePair, >, comparator, ), {, for, (, int, i, =, 0, ;, i, <, simplex, ., length, ;]
[Comparator, <, PointValuePair, >, comparator, ), {, for, (, int, i, =, 0, ;, i, <, simplex, ., length, ;]
[(, int, i, =, 0, ;, i, <, simplex, ., length, ;, i, ++, ), {, final, PointValuePair, vertex, =]
[(, int, i, =, 0, ;, i, <, simplex, ., length, ;, i, ++, ), {, final, PointValuePair, vertex, =]
[i, =, 0, ;, i, <, simplex, ., length, ;, i, ++, ), {, final, PointValuePair, vertex, =, simplex, []
[;, i, ++, ), {, final, PointValuePair, vertex, =, simplex, [, i, ], ;, final, double, [, ], point, =]
[;, i, ++, ), {, final, PointValuePair, vertex, =, simplex, [, i, ], ;, final, double, [, ], point, =]
[=, simplex, [, i, ], ;, final, double, [, ], point, =, vertex, ., getPointRef, (, ), ;, if, (]
[=, simplex, [, i, ], ;, final, double, [, ], point, =, vertex, ., getPointRef, (, ), ;, if, (]
[], ;, final, double, [, ], point, =, vertex, ., getPointRef, (, ), ;, if, (, Double, ., isNaN, (]
[], ;, final, double, [, ], point, =, vertex, ., getPointRef, (, ), ;, if, (, Double, ., isNaN, (]
[vertex, ., getPointRef, (, ), ;, if, (, Double, ., isNaN, (, vertex, ., getValue, (, ), ), ), {]
[vertex, ., getPointRef, (, ), ;, if, (, Double, ., isNaN, (, vertex, ., getValue, (, ), ), ), {]
[getPointRef, (, ), ;, if, (, Double, ., isNaN, (, vertex, ., getValue, (, ), ), ), {, simplex, []
[;, if, (, Double, ., isNaN, (, vertex, ., getValue, (, ), ), ), {, simplex, [, i, ], =]
[Double, ., isNaN, (, vertex, ., getValue, (, ), ), ), {, simplex, [, i, ], =, new, PointValuePair, (]
[isNaN, (, vertex, ., getValue, (, ), ), ), {, simplex, [, i, ], =, new, PointValuePair, (, point, ,]
[isNaN, (, vertex, ., getValue, (, ), ), ), {, simplex, [, i, ], =, new, PointValuePair, (, point, ,]
[getValue, (, ), ), ), {, simplex, [, i, ], =, new, PointValuePair, (, point, ,, evaluationFunction, ., value, (]
[), ), {, simplex, [, i, ], =, new, PointValuePair, (, point, ,, evaluationFunction, ., value, (, point, ), ,]
[i, ], =, new, PointValuePair, (, point, ,, evaluationFunction, ., value, (, point, ), ,, false, ), ;, }, }]
[i, ], =, new, PointValuePair, (, point, ,, evaluationFunction, ., value, (, point, ), ,, false, ), ;, }, }]
[PointValuePair, (, point, ,, evaluationFunction, ., value, (, point, ), ,, false, ), ;, }, }, Arrays, ., sort, (]
[point, ,, evaluationFunction, ., value, (, point, ), ,, false, ), ;, }, }, Arrays, ., sort, (, simplex, ,]
[protected, void, replaceWorstPoint, (, PointValuePair, pointValuePair, ,, final, Comparator, <, PointValuePair, >, comparator, ), {, for, (, int, i, =]
[replaceWorstPoint, (, PointValuePair, pointValuePair, ,, final, Comparator, <, PointValuePair, >, comparator, ), {, for, (, int, i, =, 0, ;]
[replaceWorstPoint, (, PointValuePair, pointValuePair, ,, final, Comparator, <, PointValuePair, >, comparator, ), {, for, (, int, i, =, 0, ;]
[PointValuePair, pointValuePair, ,, final, Comparator, <, PointValuePair, >, comparator, ), {, for, (, int, i, =, 0, ;, i, <]
[,, final, Comparator, <, PointValuePair, >, comparator, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[,, final, Comparator, <, PointValuePair, >, comparator, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[comparator, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (]
[comparator, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (]
[comparator, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (, comparator, ., compare, (]
[(, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (, comparator, ., compare, (]
[i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, if, (, comparator, ., compare, (, simplex, []
[;, i, <, dimension, ;, i, ++, ), {, if, (, comparator, ., compare, (, simplex, [, i, ], ,]
[dimension, ;, i, ++, ), {, if, (, comparator, ., compare, (, simplex, [, i, ], ,, pointValuePair, ), >]
[if, (, comparator, ., compare, (, simplex, [, i, ], ,, pointValuePair, ), >, 0, ), {, PointValuePair, tmp, =]
[if, (, comparator, ., compare, (, simplex, [, i, ], ,, pointValuePair, ), >, 0, ), {, PointValuePair, tmp, =]
[comparator, ., compare, (, simplex, [, i, ], ,, pointValuePair, ), >, 0, ), {, PointValuePair, tmp, =, simplex, []
[(, simplex, [, i, ], ,, pointValuePair, ), >, 0, ), {, PointValuePair, tmp, =, simplex, [, i, ], ;]
[(, simplex, [, i, ], ,, pointValuePair, ), >, 0, ), {, PointValuePair, tmp, =, simplex, [, i, ], ;]
[[, i, ], ,, pointValuePair, ), >, 0, ), {, PointValuePair, tmp, =, simplex, [, i, ], ;, simplex, []
[,, pointValuePair, ), >, 0, ), {, PointValuePair, tmp, =, simplex, [, i, ], ;, simplex, [, i, ], =]
[), >, 0, ), {, PointValuePair, tmp, =, simplex, [, i, ], ;, simplex, [, i, ], =, pointValuePair, ;]
[0, ), {, PointValuePair, tmp, =, simplex, [, i, ], ;, simplex, [, i, ], =, pointValuePair, ;, pointValuePair, =]
[tmp, =, simplex, [, i, ], ;, simplex, [, i, ], =, pointValuePair, ;, pointValuePair, =, tmp, ;, }, }]
[tmp, =, simplex, [, i, ], ;, simplex, [, i, ], =, pointValuePair, ;, pointValuePair, =, tmp, ;, }, }]
[simplex, [, i, ], ;, simplex, [, i, ], =, pointValuePair, ;, pointValuePair, =, tmp, ;, }, }, simplex, []
[], ;, simplex, [, i, ], =, pointValuePair, ;, pointValuePair, =, tmp, ;, }, }, simplex, [, dimension, ], =]
[dimension, ], =, pointValuePair, ;, }, public, PointValuePair, [, ], getPoints, (, ), {, final, PointValuePair, [, ], copy, =]
[pointValuePair, ;, }, public, PointValuePair, [, ], getPoints, (, ), {, final, PointValuePair, [, ], copy, =, new, PointValuePair, []
[pointValuePair, ;, }, public, PointValuePair, [, ], getPoints, (, ), {, final, PointValuePair, [, ], copy, =, new, PointValuePair, []
[[, ], getPoints, (, ), {, final, PointValuePair, [, ], copy, =, new, PointValuePair, [, simplex, ., length, ], ;]
[[, ], getPoints, (, ), {, final, PointValuePair, [, ], copy, =, new, PointValuePair, [, simplex, ., length, ], ;]
[), {, final, PointValuePair, [, ], copy, =, new, PointValuePair, [, simplex, ., length, ], ;, System, ., arraycopy, (]
[final, PointValuePair, [, ], copy, =, new, PointValuePair, [, simplex, ., length, ], ;, System, ., arraycopy, (, simplex, ,]
[[, ], copy, =, new, PointValuePair, [, simplex, ., length, ], ;, System, ., arraycopy, (, simplex, ,, 0, ,]
[copy, =, new, PointValuePair, [, simplex, ., length, ], ;, System, ., arraycopy, (, simplex, ,, 0, ,, copy, ,]
[new, PointValuePair, [, simplex, ., length, ], ;, System, ., arraycopy, (, simplex, ,, 0, ,, copy, ,, 0, ,]
[new, PointValuePair, [, simplex, ., length, ], ;, System, ., arraycopy, (, simplex, ,, 0, ,, copy, ,, 0, ,]
[], ;, System, ., arraycopy, (, simplex, ,, 0, ,, copy, ,, 0, ,, simplex, ., length, ), ;, return]
[,, simplex, ., length, ), ;, return, copy, ;, }, public, PointValuePair, getPoint, (, int, index, ), {, if, (]
[,, simplex, ., length, ), ;, return, copy, ;, }, public, PointValuePair, getPoint, (, int, index, ), {, if, (]
[,, simplex, ., length, ), ;, return, copy, ;, }, public, PointValuePair, getPoint, (, int, index, ), {, if, (]
[., length, ), ;, return, copy, ;, }, public, PointValuePair, getPoint, (, int, index, ), {, if, (, index, <]
[), ;, return, copy, ;, }, public, PointValuePair, getPoint, (, int, index, ), {, if, (, index, <, 0, ||]
[), ;, return, copy, ;, }, public, PointValuePair, getPoint, (, int, index, ), {, if, (, index, <, 0, ||]
[return, copy, ;, }, public, PointValuePair, getPoint, (, int, index, ), {, if, (, index, <, 0, ||, index, >=]
[return, copy, ;, }, public, PointValuePair, getPoint, (, int, index, ), {, if, (, index, <, 0, ||, index, >=]
[getPoint, (, int, index, ), {, if, (, index, <, 0, ||, index, >=, simplex, ., length, ), {, throw]
[index, ), {, if, (, index, <, 0, ||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (]
[{, if, (, index, <, 0, ||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,]
[(, index, <, 0, ||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,]
[(, index, <, 0, ||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,]
[(, index, <, 0, ||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,]
[||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -]
[length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }, return]
[length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }, return]
[{, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }, return, simplex, []
[return, simplex, [, index, ], ;, }, protected, void, setPoint, (, int, index, ,, PointValuePair, point, ), {, if, (]
[return, simplex, [, index, ], ;, }, protected, void, setPoint, (, int, index, ,, PointValuePair, point, ), {, if, (]
[return, simplex, [, index, ], ;, }, protected, void, setPoint, (, int, index, ,, PointValuePair, point, ), {, if, (]
[[, index, ], ;, }, protected, void, setPoint, (, int, index, ,, PointValuePair, point, ), {, if, (, index, <]
[], ;, }, protected, void, setPoint, (, int, index, ,, PointValuePair, point, ), {, if, (, index, <, 0, ||]
[], ;, }, protected, void, setPoint, (, int, index, ,, PointValuePair, point, ), {, if, (, index, <, 0, ||]
[}, protected, void, setPoint, (, int, index, ,, PointValuePair, point, ), {, if, (, index, <, 0, ||, index, >=]
[}, protected, void, setPoint, (, int, index, ,, PointValuePair, point, ), {, if, (, index, <, 0, ||, index, >=]
[index, ,, PointValuePair, point, ), {, if, (, index, <, 0, ||, index, >=, simplex, ., length, ), {, throw]
[point, ), {, if, (, index, <, 0, ||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (]
[{, if, (, index, <, 0, ||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,]
[(, index, <, 0, ||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,]
[(, index, <, 0, ||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,]
[(, index, <, 0, ||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,]
[||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -]
[., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }]
[., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }, simplex, []
[new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }, simplex, [, index, ], =]
[simplex, [, index, ], =, point, ;, }, protected, void, setPoints, (, PointValuePair, [, ], points, ), {, if, (]
[simplex, [, index, ], =, point, ;, }, protected, void, setPoints, (, PointValuePair, [, ], points, ), {, if, (]
[simplex, [, index, ], =, point, ;, }, protected, void, setPoints, (, PointValuePair, [, ], points, ), {, if, (]
[=, point, ;, }, protected, void, setPoints, (, PointValuePair, [, ], points, ), {, if, (, points, ., length, !=]
[=, point, ;, }, protected, void, setPoints, (, PointValuePair, [, ], points, ), {, if, (, points, ., length, !=]
[setPoints, (, PointValuePair, [, ], points, ), {, if, (, points, ., length, !=, simplex, ., length, ), {, throw]
[[, ], points, ), {, if, (, points, ., length, !=, simplex, ., length, ), {, throw, new, DimensionMismatchException, (]
[[, ], points, ), {, if, (, points, ., length, !=, simplex, ., length, ), {, throw, new, DimensionMismatchException, (]
[{, if, (, points, ., length, !=, simplex, ., length, ), {, throw, new, DimensionMismatchException, (, points, ., length, ,]
[{, if, (, points, ., length, !=, simplex, ., length, ), {, throw, new, DimensionMismatchException, (, points, ., length, ,]
[!=, simplex, ., length, ), {, throw, new, DimensionMismatchException, (, points, ., length, ,, simplex, ., length, ), ;, }]
[., length, ), {, throw, new, DimensionMismatchException, (, points, ., length, ,, simplex, ., length, ), ;, }, simplex, =]
[private, static, double, [, ], createHypercubeSteps, (, int, n, ,, double, sideLength, ), {, final, double, [, ], steps, =]
[[, ], createHypercubeSteps, (, int, n, ,, double, sideLength, ), {, final, double, [, ], steps, =, new, double, []
[sideLength, ), {, final, double, [, ], steps, =, new, double, [, n, ], ;, for, (, int, i, =]
[{, final, double, [, ], steps, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[{, final, double, [, ], steps, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], steps, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], steps, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], steps, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, steps, []
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, steps, [, i, ], =]
[=, 0, ;, i, <, n, ;, i, ++, ), {, steps, [, i, ], =, sideLength, ;, }, return]
