[;, private, Scope, scope, ;, private, InputId, inputId, ;, private, final, RedeclarationHandler, redeclarationHandler, ;, private, static, final, String, ARGUMENTS, =]
[;, private, final, RedeclarationHandler, redeclarationHandler, ;, private, static, final, String, ARGUMENTS, =, "arguments", ;, public, static, final, DiagnosticType, VAR_MULTIPLY_DECLARED_ERROR, =]
[;, private, final, RedeclarationHandler, redeclarationHandler, ;, private, static, final, String, ARGUMENTS, =, "arguments", ;, public, static, final, DiagnosticType, VAR_MULTIPLY_DECLARED_ERROR, =]
[redeclarationHandler, ;, private, static, final, String, ARGUMENTS, =, "arguments", ;, public, static, final, DiagnosticType, VAR_MULTIPLY_DECLARED_ERROR, =, DiagnosticType, ., error, (]
[private, static, final, String, ARGUMENTS, =, "arguments", ;, public, static, final, DiagnosticType, VAR_MULTIPLY_DECLARED_ERROR, =, DiagnosticType, ., error, (, "JSC_VAR_MULTIPLY_DECLARED_ERROR", ,]
[static, final, DiagnosticType, VAR_MULTIPLY_DECLARED_ERROR, =, DiagnosticType, ., error, (, "JSC_VAR_MULTIPLY_DECLARED_ERROR", ,, "Variable {0} first declared in {1}", ), ;, public, static, final, DiagnosticType, VAR_ARGUMENTS_SHADOWED_ERROR, =]
[static, final, DiagnosticType, VAR_MULTIPLY_DECLARED_ERROR, =, DiagnosticType, ., error, (, "JSC_VAR_MULTIPLY_DECLARED_ERROR", ,, "Variable {0} first declared in {1}", ), ;, public, static, final, DiagnosticType, VAR_ARGUMENTS_SHADOWED_ERROR, =]
[=, DiagnosticType, ., error, (, "JSC_VAR_MULTIPLY_DECLARED_ERROR", ,, "Variable {0} first declared in {1}", ), ;, public, static, final, DiagnosticType, VAR_ARGUMENTS_SHADOWED_ERROR, =, DiagnosticType, ., error, (]
[., error, (, "JSC_VAR_MULTIPLY_DECLARED_ERROR", ,, "Variable {0} first declared in {1}", ), ;, public, static, final, DiagnosticType, VAR_ARGUMENTS_SHADOWED_ERROR, =, DiagnosticType, ., error, (, "JSC_VAR_ARGUMENTS_SHADOWED_ERROR", ,]
[static, final, DiagnosticType, VAR_ARGUMENTS_SHADOWED_ERROR, =, DiagnosticType, ., error, (, "JSC_VAR_ARGUMENTS_SHADOWED_ERROR", ,, "Shadowing \"arguments\" is not allowed", ), ;, SyntacticScopeCreator, (, AbstractCompiler, compiler, ), {]
[static, final, DiagnosticType, VAR_ARGUMENTS_SHADOWED_ERROR, =, DiagnosticType, ., error, (, "JSC_VAR_ARGUMENTS_SHADOWED_ERROR", ,, "Shadowing \"arguments\" is not allowed", ), ;, SyntacticScopeCreator, (, AbstractCompiler, compiler, ), {]
[=, DiagnosticType, ., error, (, "JSC_VAR_ARGUMENTS_SHADOWED_ERROR", ,, "Shadowing \"arguments\" is not allowed", ), ;, SyntacticScopeCreator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[., error, (, "JSC_VAR_ARGUMENTS_SHADOWED_ERROR", ,, "Shadowing \"arguments\" is not allowed", ), ;, SyntacticScopeCreator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[., error, (, "JSC_VAR_ARGUMENTS_SHADOWED_ERROR", ,, "Shadowing \"arguments\" is not allowed", ), ;, SyntacticScopeCreator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[,, "Shadowing \"arguments\" is not allowed", ), ;, SyntacticScopeCreator, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., redeclarationHandler, =]
[;, this, ., redeclarationHandler, =, new, DefaultRedeclarationHandler, (, ), ;, }, SyntacticScopeCreator, (, AbstractCompiler, compiler, ,, RedeclarationHandler, redeclarationHandler, ), {]
[;, this, ., redeclarationHandler, =, new, DefaultRedeclarationHandler, (, ), ;, }, SyntacticScopeCreator, (, AbstractCompiler, compiler, ,, RedeclarationHandler, redeclarationHandler, ), {]
[=, new, DefaultRedeclarationHandler, (, ), ;, }, SyntacticScopeCreator, (, AbstractCompiler, compiler, ,, RedeclarationHandler, redeclarationHandler, ), {, this, ., compiler, =]
[DefaultRedeclarationHandler, (, ), ;, }, SyntacticScopeCreator, (, AbstractCompiler, compiler, ,, RedeclarationHandler, redeclarationHandler, ), {, this, ., compiler, =, compiler, ;]
[DefaultRedeclarationHandler, (, ), ;, }, SyntacticScopeCreator, (, AbstractCompiler, compiler, ,, RedeclarationHandler, redeclarationHandler, ), {, this, ., compiler, =, compiler, ;]
[}, SyntacticScopeCreator, (, AbstractCompiler, compiler, ,, RedeclarationHandler, redeclarationHandler, ), {, this, ., compiler, =, compiler, ;, this, ., redeclarationHandler, =]
[this, ., redeclarationHandler, =, redeclarationHandler, ;, }, @, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {]
[redeclarationHandler, =, redeclarationHandler, ;, }, @, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {, inputId, =]
[}, @, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {, inputId, =, null, ;, if, (]
[}, @, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {, inputId, =, null, ;, if, (]
[Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {, inputId, =, null, ;, if, (, parent, ==]
[createScope, (, Node, n, ,, Scope, parent, ), {, inputId, =, null, ;, if, (, parent, ==, null, ), {]
[Node, n, ,, Scope, parent, ), {, inputId, =, null, ;, if, (, parent, ==, null, ), {, scope, =]
[Node, n, ,, Scope, parent, ), {, inputId, =, null, ;, if, (, parent, ==, null, ), {, scope, =]
[parent, ), {, inputId, =, null, ;, if, (, parent, ==, null, ), {, scope, =, Scope, ., createGlobalScope, (]
[;, if, (, parent, ==, null, ), {, scope, =, Scope, ., createGlobalScope, (, n, ), ;, }, else, {]
[(, parent, ==, null, ), {, scope, =, Scope, ., createGlobalScope, (, n, ), ;, }, else, {, scope, =]
[null, ), {, scope, =, Scope, ., createGlobalScope, (, n, ), ;, }, else, {, scope, =, new, Scope, (]
[{, scope, =, Scope, ., createGlobalScope, (, n, ), ;, }, else, {, scope, =, new, Scope, (, parent, ,]
[., createGlobalScope, (, n, ), ;, }, else, {, scope, =, new, Scope, (, parent, ,, n, ), ;, }]
[(, n, ), ;, }, else, {, scope, =, new, Scope, (, parent, ,, n, ), ;, }, scanRoot, (]
[), ;, }, else, {, scope, =, new, Scope, (, parent, ,, n, ), ;, }, scanRoot, (, n, ,]
[else, {, scope, =, new, Scope, (, parent, ,, n, ), ;, }, scanRoot, (, n, ,, parent, ), ;]
[scope, =, new, Scope, (, parent, ,, n, ), ;, }, scanRoot, (, n, ,, parent, ), ;, inputId, =]
[parent, ,, n, ), ;, }, scanRoot, (, n, ,, parent, ), ;, inputId, =, null, ;, Scope, returnedScope, =]
[n, ), ;, }, scanRoot, (, n, ,, parent, ), ;, inputId, =, null, ;, Scope, returnedScope, =, scope, ;]
[;, }, scanRoot, (, n, ,, parent, ), ;, inputId, =, null, ;, Scope, returnedScope, =, scope, ;, scope, =]
[(, n, ,, parent, ), ;, inputId, =, null, ;, Scope, returnedScope, =, scope, ;, scope, =, null, ;, return]
[=, null, ;, return, returnedScope, ;, }, private, void, scanRoot, (, Node, n, ,, Scope, parent, ), {, if, (]
[=, null, ;, return, returnedScope, ;, }, private, void, scanRoot, (, Node, n, ,, Scope, parent, ), {, if, (]
[scanRoot, (, Node, n, ,, Scope, parent, ), {, if, (, n, ., isFunction, (, ), ), {, if, (]
[scanRoot, (, Node, n, ,, Scope, parent, ), {, if, (, n, ., isFunction, (, ), ), {, if, (]
[Node, n, ,, Scope, parent, ), {, if, (, n, ., isFunction, (, ), ), {, if, (, inputId, ==]
[Scope, parent, ), {, if, (, n, ., isFunction, (, ), ), {, if, (, inputId, ==, null, ), {]
[), {, if, (, n, ., isFunction, (, ), ), {, if, (, inputId, ==, null, ), {, inputId, =]
[), {, if, (, n, ., isFunction, (, ), ), {, if, (, inputId, ==, null, ), {, inputId, =]
[n, ., isFunction, (, ), ), {, if, (, inputId, ==, null, ), {, inputId, =, NodeUtil, ., getInputId, (]
[(, inputId, ==, null, ), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, final, Node, fnNameNode, =]
[(, inputId, ==, null, ), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, final, Node, fnNameNode, =]
[getInputId, (, n, ), ;, }, final, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, final, Node, args, =]
[getInputId, (, n, ), ;, }, final, Node, fnNameNode, =, n, ., getFirstChild, (, ), ;, final, Node, args, =]
[n, ., getFirstChild, (, ), ;, final, Node, args, =, fnNameNode, ., getNext, (, ), ;, final, Node, body, =]
[n, ., getFirstChild, (, ), ;, final, Node, args, =, fnNameNode, ., getNext, (, ), ;, final, Node, body, =]
[=, fnNameNode, ., getNext, (, ), ;, final, Node, body, =, args, ., getNext, (, ), ;, String, fnName, =]
[=, fnNameNode, ., getNext, (, ), ;, final, Node, body, =, args, ., getNext, (, ), ;, String, fnName, =]
[Node, body, =, args, ., getNext, (, ), ;, String, fnName, =, fnNameNode, ., getString, (, ), ;, if, (]
[Node, body, =, args, ., getNext, (, ), ;, String, fnName, =, fnNameNode, ., getString, (, ), ;, if, (]
[body, =, args, ., getNext, (, ), ;, String, fnName, =, fnNameNode, ., getString, (, ), ;, if, (, !]
[body, =, args, ., getNext, (, ), ;, String, fnName, =, fnNameNode, ., getString, (, ), ;, if, (, !]
[), ;, String, fnName, =, fnNameNode, ., getString, (, ), ;, if, (, !, fnName, ., isEmpty, (, ), &&]
[), ;, String, fnName, =, fnNameNode, ., getString, (, ), ;, if, (, !, fnName, ., isEmpty, (, ), &&]
[=, fnNameNode, ., getString, (, ), ;, if, (, !, fnName, ., isEmpty, (, ), &&, NodeUtil, ., isFunctionExpression, (]
[(, ), ;, if, (, !, fnName, ., isEmpty, (, ), &&, NodeUtil, ., isFunctionExpression, (, n, ), ), {]
[;, if, (, !, fnName, ., isEmpty, (, ), &&, NodeUtil, ., isFunctionExpression, (, n, ), ), {, declareVar, (]
[fnName, ., isEmpty, (, ), &&, NodeUtil, ., isFunctionExpression, (, n, ), ), {, declareVar, (, fnNameNode, ), ;, }]
[fnName, ., isEmpty, (, ), &&, NodeUtil, ., isFunctionExpression, (, n, ), ), {, declareVar, (, fnNameNode, ), ;, }]
[), &&, NodeUtil, ., isFunctionExpression, (, n, ), ), {, declareVar, (, fnNameNode, ), ;, }, Preconditions, ., checkState, (]
[), &&, NodeUtil, ., isFunctionExpression, (, n, ), ), {, declareVar, (, fnNameNode, ), ;, }, Preconditions, ., checkState, (]
[fnNameNode, ), ;, }, Preconditions, ., checkState, (, args, ., isParamList, (, ), ), ;, for, (, Node, a, =]
[fnNameNode, ), ;, }, Preconditions, ., checkState, (, args, ., isParamList, (, ), ), ;, for, (, Node, a, =]
[checkState, (, args, ., isParamList, (, ), ), ;, for, (, Node, a, =, args, ., getFirstChild, (, ), ;]
[checkState, (, args, ., isParamList, (, ), ), ;, for, (, Node, a, =, args, ., getFirstChild, (, ), ;]
[args, ., isParamList, (, ), ), ;, for, (, Node, a, =, args, ., getFirstChild, (, ), ;, a, !=]
[isParamList, (, ), ), ;, for, (, Node, a, =, args, ., getFirstChild, (, ), ;, a, !=, null, ;]
[), ), ;, for, (, Node, a, =, args, ., getFirstChild, (, ), ;, a, !=, null, ;, a, =]
[), ), ;, for, (, Node, a, =, args, ., getFirstChild, (, ), ;, a, !=, null, ;, a, =]
[=, args, ., getFirstChild, (, ), ;, a, !=, null, ;, a, =, a, ., getNext, (, ), ), {]
[=, args, ., getFirstChild, (, ), ;, a, !=, null, ;, a, =, a, ., getNext, (, ), ), {]
[(, ), ;, a, !=, null, ;, a, =, a, ., getNext, (, ), ), {, Preconditions, ., checkState, (]
[(, ), ;, a, !=, null, ;, a, =, a, ., getNext, (, ), ), {, Preconditions, ., checkState, (]
[a, =, a, ., getNext, (, ), ), {, Preconditions, ., checkState, (, a, ., isName, (, ), ), ;]
[a, ., getNext, (, ), ), {, Preconditions, ., checkState, (, a, ., isName, (, ), ), ;, declareVar, (]
[), ), {, Preconditions, ., checkState, (, a, ., isName, (, ), ), ;, declareVar, (, a, ), ;, }]
[{, Preconditions, ., checkState, (, a, ., isName, (, ), ), ;, declareVar, (, a, ), ;, }, scanVars, (]
[., checkState, (, a, ., isName, (, ), ), ;, declareVar, (, a, ), ;, }, scanVars, (, body, ,]
[(, ), ), ;, declareVar, (, a, ), ;, }, scanVars, (, body, ,, n, ), ;, }, else, {]
[(, ), ), ;, declareVar, (, a, ), ;, }, scanVars, (, body, ,, n, ), ;, }, else, {]
[declareVar, (, a, ), ;, }, scanVars, (, body, ,, n, ), ;, }, else, {, Preconditions, ., checkState, (]
[declareVar, (, a, ), ;, }, scanVars, (, body, ,, n, ), ;, }, else, {, Preconditions, ., checkState, (]
[declareVar, (, a, ), ;, }, scanVars, (, body, ,, n, ), ;, }, else, {, Preconditions, ., checkState, (]
[scanVars, (, body, ,, n, ), ;, }, else, {, Preconditions, ., checkState, (, scope, ., getParent, (, ), ==]
[,, n, ), ;, }, else, {, Preconditions, ., checkState, (, scope, ., getParent, (, ), ==, null, ), ;]
[), ;, }, else, {, Preconditions, ., checkState, (, scope, ., getParent, (, ), ==, null, ), ;, scanVars, (]
[}, else, {, Preconditions, ., checkState, (, scope, ., getParent, (, ), ==, null, ), ;, scanVars, (, n, ,]
[n, ,, null, ), ;, }, }, private, void, scanVars, (, Node, n, ,, Node, parent, ), {, switch, (]
[n, ,, null, ), ;, }, }, private, void, scanVars, (, Node, n, ,, Node, parent, ), {, switch, (]
[void, scanVars, (, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[void, scanVars, (, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[{, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :, for, (, Node, child, =]
[{, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :, for, (, Node, child, =]
[(, ), ), {, case, Token, ., VAR, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[(, ), ), {, case, Token, ., VAR, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[), {, case, Token, ., VAR, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =]
[for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =]
[., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;]
[(, ), ;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, declareVar, (]
[child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, declareVar, (, child, ), ;]
[null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, declareVar, (, child, ), ;, child, =]
[=, child, ., getNext, (, ), ;, declareVar, (, child, ), ;, child, =, next, ;, }, return, ;, case]
[=, child, ., getNext, (, ), ;, declareVar, (, child, ), ;, child, =, next, ;, }, return, ;, case]
[;, declareVar, (, child, ), ;, child, =, next, ;, }, return, ;, case, Token, ., FUNCTION, :, if, (]
[;, declareVar, (, child, ), ;, child, =, next, ;, }, return, ;, case, Token, ., FUNCTION, :, if, (]
[), ;, child, =, next, ;, }, return, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionExpression, (]
[Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionExpression, (, n, ), ), {, return, ;, }, String, fnName, =]
[Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionExpression, (, n, ), ), {, return, ;, }, String, fnName, =]
[Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionExpression, (, n, ), ), {, return, ;, }, String, fnName, =]
[), {, return, ;, }, String, fnName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[), {, return, ;, }, String, fnName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[getFirstChild, (, ), ., getString, (, ), ;, if, (, fnName, ., isEmpty, (, ), ), {, return, ;, }]
[), ., getString, (, ), ;, if, (, fnName, ., isEmpty, (, ), ), {, return, ;, }, declareVar, (]
[), ., getString, (, ), ;, if, (, fnName, ., isEmpty, (, ), ), {, return, ;, }, declareVar, (]
[isEmpty, (, ), ), {, return, ;, }, declareVar, (, n, ., getFirstChild, (, ), ), ;, return, ;, case]
[isEmpty, (, ), ), {, return, ;, }, declareVar, (, n, ., getFirstChild, (, ), ), ;, return, ;, case]
[{, return, ;, }, declareVar, (, n, ., getFirstChild, (, ), ), ;, return, ;, case, Token, ., CATCH, :]
[{, return, ;, }, declareVar, (, n, ., getFirstChild, (, ), ), ;, return, ;, case, Token, ., CATCH, :]
[declareVar, (, n, ., getFirstChild, (, ), ), ;, return, ;, case, Token, ., CATCH, :, Preconditions, ., checkState, (]
[declareVar, (, n, ., getFirstChild, (, ), ), ;, return, ;, case, Token, ., CATCH, :, Preconditions, ., checkState, (]
[declareVar, (, n, ., getFirstChild, (, ), ), ;, return, ;, case, Token, ., CATCH, :, Preconditions, ., checkState, (]
[), ), ;, return, ;, case, Token, ., CATCH, :, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==]
[return, ;, case, Token, ., CATCH, :, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;]
[return, ;, case, Token, ., CATCH, :, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;]
[., CATCH, :, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, Preconditions, ., checkState, (]
[., CATCH, :, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, Preconditions, ., checkState, (]
[., CATCH, :, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, ), ;, Preconditions, ., checkState, (]
[;, Preconditions, ., checkState, (, n, ., getFirstChild, (, ), ., isName, (, ), ), ;, final, Node, var, =]
[;, Preconditions, ., checkState, (, n, ., getFirstChild, (, ), ., isName, (, ), ), ;, final, Node, var, =]
[., isName, (, ), ), ;, final, Node, var, =, n, ., getFirstChild, (, ), ;, final, Node, block, =]
[., isName, (, ), ), ;, final, Node, var, =, n, ., getFirstChild, (, ), ;, final, Node, block, =]
[final, Node, var, =, n, ., getFirstChild, (, ), ;, final, Node, block, =, var, ., getNext, (, ), ;]
[var, =, n, ., getFirstChild, (, ), ;, final, Node, block, =, var, ., getNext, (, ), ;, declareVar, (]
[., getFirstChild, (, ), ;, final, Node, block, =, var, ., getNext, (, ), ;, declareVar, (, var, ), ;]
[(, ), ;, final, Node, block, =, var, ., getNext, (, ), ;, declareVar, (, var, ), ;, scanVars, (]
[;, final, Node, block, =, var, ., getNext, (, ), ;, declareVar, (, var, ), ;, scanVars, (, block, ,]
[., getNext, (, ), ;, declareVar, (, var, ), ;, scanVars, (, block, ,, n, ), ;, return, ;, case]
[., getNext, (, ), ;, declareVar, (, var, ), ;, scanVars, (, block, ,, n, ), ;, return, ;, case]
[;, declareVar, (, var, ), ;, scanVars, (, block, ,, n, ), ;, return, ;, case, Token, ., SCRIPT, :]
[(, var, ), ;, scanVars, (, block, ,, n, ), ;, return, ;, case, Token, ., SCRIPT, :, inputId, =]
[(, var, ), ;, scanVars, (, block, ,, n, ), ;, return, ;, case, Token, ., SCRIPT, :, inputId, =]
[block, ,, n, ), ;, return, ;, case, Token, ., SCRIPT, :, inputId, =, n, ., getInputId, (, ), ;]
[block, ,, n, ), ;, return, ;, case, Token, ., SCRIPT, :, inputId, =, n, ., getInputId, (, ), ;]
[;, return, ;, case, Token, ., SCRIPT, :, inputId, =, n, ., getInputId, (, ), ;, Preconditions, ., checkNotNull, (]
[inputId, =, n, ., getInputId, (, ), ;, Preconditions, ., checkNotNull, (, inputId, ), ;, break, ;, }, if, (]
[inputId, =, n, ., getInputId, (, ), ;, Preconditions, ., checkNotNull, (, inputId, ), ;, break, ;, }, if, (]
[inputId, =, n, ., getInputId, (, ), ;, Preconditions, ., checkNotNull, (, inputId, ), ;, break, ;, }, if, (]
[getInputId, (, ), ;, Preconditions, ., checkNotNull, (, inputId, ), ;, break, ;, }, if, (, NodeUtil, ., isControlStructure, (]
[;, Preconditions, ., checkNotNull, (, inputId, ), ;, break, ;, }, if, (, NodeUtil, ., isControlStructure, (, n, ), ||]
[;, Preconditions, ., checkNotNull, (, inputId, ), ;, break, ;, }, if, (, NodeUtil, ., isControlStructure, (, n, ), ||]
[(, inputId, ), ;, break, ;, }, if, (, NodeUtil, ., isControlStructure, (, n, ), ||, NodeUtil, ., isStatementBlock, (]
[NodeUtil, ., isControlStructure, (, n, ), ||, NodeUtil, ., isStatementBlock, (, n, ), ), {, for, (, Node, child, =]
[NodeUtil, ., isControlStructure, (, n, ), ||, NodeUtil, ., isStatementBlock, (, n, ), ), {, for, (, Node, child, =]
[||, NodeUtil, ., isStatementBlock, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[||, NodeUtil, ., isStatementBlock, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[., isStatementBlock, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =]
[for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =]
[., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;]
[(, ), ;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, scanVars, (]
[;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, scanVars, (, child, ,]
[null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, scanVars, (, child, ,, n, ), ;]
[), {, Node, next, =, child, ., getNext, (, ), ;, scanVars, (, child, ,, n, ), ;, child, =]
[public, void, onRedeclaration, (, Scope, s, ,, String, name, ,, Node, n, ,, CompilerInput, input, ), {, Node, parent, =]
[public, void, onRedeclaration, (, Scope, s, ,, String, name, ,, Node, n, ,, CompilerInput, input, ), {, Node, parent, =]
[name, ,, Node, n, ,, CompilerInput, input, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[name, ,, Node, n, ,, CompilerInput, input, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[n, ., getParent, (, ), ;, if, (, scope, ., isGlobal, (, ), ), {, Scope, ., Var, origVar, =]
[n, ., getParent, (, ), ;, if, (, scope, ., isGlobal, (, ), ), {, Scope, ., Var, origVar, =]
[), ;, if, (, scope, ., isGlobal, (, ), ), {, Scope, ., Var, origVar, =, scope, ., getVar, (]
[isGlobal, (, ), ), {, Scope, ., Var, origVar, =, scope, ., getVar, (, name, ), ;, Node, origParent, =]
[isGlobal, (, ), ), {, Scope, ., Var, origVar, =, scope, ., getVar, (, name, ), ;, Node, origParent, =]
[origVar, =, scope, ., getVar, (, name, ), ;, Node, origParent, =, origVar, ., getParentNode, (, ), ;, if, (]
[origVar, =, scope, ., getVar, (, name, ), ;, Node, origParent, =, origVar, ., getParentNode, (, ), ;, if, (]
[origVar, =, scope, ., getVar, (, name, ), ;, Node, origParent, =, origVar, ., getParentNode, (, ), ;, if, (]
[name, ), ;, Node, origParent, =, origVar, ., getParentNode, (, ), ;, if, (, origParent, ., isCatch, (, ), &&]
[name, ), ;, Node, origParent, =, origVar, ., getParentNode, (, ), ;, if, (, origParent, ., isCatch, (, ), &&]
[(, origParent, ., isCatch, (, ), &&, parent, ., isCatch, (, ), ), {, return, ;, }, boolean, allowDupe, =]
[., isCatch, (, ), &&, parent, ., isCatch, (, ), ), {, return, ;, }, boolean, allowDupe, =, hasDuplicateDeclarationSuppression, (]
[(, ), &&, parent, ., isCatch, (, ), ), {, return, ;, }, boolean, allowDupe, =, hasDuplicateDeclarationSuppression, (, n, ,]
[isCatch, (, ), ), {, return, ;, }, boolean, allowDupe, =, hasDuplicateDeclarationSuppression, (, n, ,, origVar, ), ;, if, (]
[(, ), ), {, return, ;, }, boolean, allowDupe, =, hasDuplicateDeclarationSuppression, (, n, ,, origVar, ), ;, if, (, !]
[{, return, ;, }, boolean, allowDupe, =, hasDuplicateDeclarationSuppression, (, n, ,, origVar, ), ;, if, (, !, allowDupe, ), {]
[{, return, ;, }, boolean, allowDupe, =, hasDuplicateDeclarationSuppression, (, n, ,, origVar, ), ;, if, (, !, allowDupe, ), {]
[boolean, allowDupe, =, hasDuplicateDeclarationSuppression, (, n, ,, origVar, ), ;, if, (, !, allowDupe, ), {, compiler, ., report, (]
[boolean, allowDupe, =, hasDuplicateDeclarationSuppression, (, n, ,, origVar, ), ;, if, (, !, allowDupe, ), {, compiler, ., report, (]
[(, n, ,, origVar, ), ;, if, (, !, allowDupe, ), {, compiler, ., report, (, JSError, ., make, (]
[(, n, ,, origVar, ), ;, if, (, !, allowDupe, ), {, compiler, ., report, (, JSError, ., make, (]
[), ;, if, (, !, allowDupe, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (]
[(, !, allowDupe, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,]
[allowDupe, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,]
[{, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,]
[., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,]
[report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (]
[report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (]
[report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (]
[report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (]
[make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (, origVar, ., input, !=]
[NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (, origVar, ., input, !=, null, ?]
[NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (, origVar, ., input, !=, null, ?]
[NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (, origVar, ., input, !=, null, ?]
[,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (, origVar, ., input, !=, null, ?, origVar, ., input, ., getName, (, ), :]
[null, ?, origVar, ., input, ., getName, (, ), :, "??", ), ), ), ;, }, }, else, if, (]
[null, ?, origVar, ., input, ., getName, (, ), :, "??", ), ), ), ;, }, }, else, if, (]
[null, ?, origVar, ., input, ., getName, (, ), :, "??", ), ), ), ;, }, }, else, if, (]
[input, ., getName, (, ), :, "??", ), ), ), ;, }, }, else, if, (, name, ., equals, (]
[(, ), :, "??", ), ), ), ;, }, }, else, if, (, name, ., equals, (, ARGUMENTS, ), &&]
[), :, "??", ), ), ), ;, }, }, else, if, (, name, ., equals, (, ARGUMENTS, ), &&, !]
[), :, "??", ), ), ), ;, }, }, else, if, (, name, ., equals, (, ARGUMENTS, ), &&, !]
[), ), ;, }, }, else, if, (, name, ., equals, (, ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration, (]
[}, else, if, (, name, ., equals, (, ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration, (, n, ), ), {]
[}, else, if, (, name, ., equals, (, ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration, (, n, ), ), {]
[name, ., equals, (, ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration, (, n, ), ), {, compiler, ., report, (]
[name, ., equals, (, ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration, (, n, ), ), {, compiler, ., report, (]
[ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration, (, n, ), ), {, compiler, ., report, (, JSError, ., make, (]
[ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration, (, n, ), ), {, compiler, ., report, (, JSError, ., make, (]
[NodeUtil, ., isVarDeclaration, (, n, ), ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (]
[(, n, ), ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,]
[), ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,]
[n, ), ,, n, ,, VAR_ARGUMENTS_SHADOWED_ERROR, ), ), ;, }, }, }, private, void, declareVar, (, Node, n, ), {]
[n, ), ,, n, ,, VAR_ARGUMENTS_SHADOWED_ERROR, ), ), ;, }, }, }, private, void, declareVar, (, Node, n, ), {]
[,, VAR_ARGUMENTS_SHADOWED_ERROR, ), ), ;, }, }, }, private, void, declareVar, (, Node, n, ), {, Preconditions, ., checkState, (]
[,, VAR_ARGUMENTS_SHADOWED_ERROR, ), ), ;, }, }, }, private, void, declareVar, (, Node, n, ), {, Preconditions, ., checkState, (]
[declareVar, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, CompilerInput, input, =]
[declareVar, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, CompilerInput, input, =]
[), {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, CompilerInput, input, =, compiler, ., getInput, (]
[n, ., isName, (, ), ), ;, CompilerInput, input, =, compiler, ., getInput, (, inputId, ), ;, String, name, =]
[n, ., isName, (, ), ), ;, CompilerInput, input, =, compiler, ., getInput, (, inputId, ), ;, String, name, =]
[input, =, compiler, ., getInput, (, inputId, ), ;, String, name, =, n, ., getString, (, ), ;, if, (]
[input, =, compiler, ., getInput, (, inputId, ), ;, String, name, =, n, ., getString, (, ), ;, if, (]
[input, =, compiler, ., getInput, (, inputId, ), ;, String, name, =, n, ., getString, (, ), ;, if, (]
[getInput, (, inputId, ), ;, String, name, =, n, ., getString, (, ), ;, if, (, scope, ., isDeclared, (]
[inputId, ), ;, String, name, =, n, ., getString, (, ), ;, if, (, scope, ., isDeclared, (, name, ,]
[String, name, =, n, ., getString, (, ), ;, if, (, scope, ., isDeclared, (, name, ,, false, ), ||]
[name, =, n, ., getString, (, ), ;, if, (, scope, ., isDeclared, (, name, ,, false, ), ||, (]
[name, =, n, ., getString, (, ), ;, if, (, scope, ., isDeclared, (, name, ,, false, ), ||, (]
[name, =, n, ., getString, (, ), ;, if, (, scope, ., isDeclared, (, name, ,, false, ), ||, (]
[), ;, if, (, scope, ., isDeclared, (, name, ,, false, ), ||, (, scope, ., isLocal, (, ), &&]
[), ;, if, (, scope, ., isDeclared, (, name, ,, false, ), ||, (, scope, ., isLocal, (, ), &&]
[scope, ., isDeclared, (, name, ,, false, ), ||, (, scope, ., isLocal, (, ), &&, name, ., equals, (]
[,, false, ), ||, (, scope, ., isLocal, (, ), &&, name, ., equals, (, ARGUMENTS, ), ), ), {]
[,, false, ), ||, (, scope, ., isLocal, (, ), &&, name, ., equals, (, ARGUMENTS, ), ), ), {]
[(, scope, ., isLocal, (, ), &&, name, ., equals, (, ARGUMENTS, ), ), ), {, redeclarationHandler, ., onRedeclaration, (]
[., isLocal, (, ), &&, name, ., equals, (, ARGUMENTS, ), ), ), {, redeclarationHandler, ., onRedeclaration, (, scope, ,]
[(, ), &&, name, ., equals, (, ARGUMENTS, ), ), ), {, redeclarationHandler, ., onRedeclaration, (, scope, ,, name, ,]
[&&, name, ., equals, (, ARGUMENTS, ), ), ), {, redeclarationHandler, ., onRedeclaration, (, scope, ,, name, ,, n, ,]
[), ), ), {, redeclarationHandler, ., onRedeclaration, (, scope, ,, name, ,, n, ,, input, ), ;, }, else, {]
[), ), ), {, redeclarationHandler, ., onRedeclaration, (, scope, ,, name, ,, n, ,, input, ), ;, }, else, {]
[redeclarationHandler, ., onRedeclaration, (, scope, ,, name, ,, n, ,, input, ), ;, }, else, {, scope, ., declare, (]
[onRedeclaration, (, scope, ,, name, ,, n, ,, input, ), ;, }, else, {, scope, ., declare, (, name, ,]
[scope, ,, name, ,, n, ,, input, ), ;, }, else, {, scope, ., declare, (, name, ,, n, ,]
[name, ,, n, ,, input, ), ;, }, else, {, scope, ., declare, (, name, ,, n, ,, null, ,]
[null, ,, input, ), ;, }, }, static, boolean, hasDuplicateDeclarationSuppression, (, Node, n, ,, Scope, ., Var, origVar, ), {]
[null, ,, input, ), ;, }, }, static, boolean, hasDuplicateDeclarationSuppression, (, Node, n, ,, Scope, ., Var, origVar, ), {]
[;, }, }, static, boolean, hasDuplicateDeclarationSuppression, (, Node, n, ,, Scope, ., Var, origVar, ), {, Preconditions, ., checkState, (]
[;, }, }, static, boolean, hasDuplicateDeclarationSuppression, (, Node, n, ,, Scope, ., Var, origVar, ), {, Preconditions, ., checkState, (]
[Scope, ., Var, origVar, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, Node, parent, =]
[Scope, ., Var, origVar, ), {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, Node, parent, =]
[(, n, ., isName, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, Node, origParent, =]
[(, n, ., isName, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, Node, origParent, =]
[parent, =, n, ., getParent, (, ), ;, Node, origParent, =, origVar, ., getParentNode, (, ), ;, JSDocInfo, info, =]
[parent, =, n, ., getParent, (, ), ;, Node, origParent, =, origVar, ., getParentNode, (, ), ;, JSDocInfo, info, =]
[Node, origParent, =, origVar, ., getParentNode, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[Node, origParent, =, origVar, ., getParentNode, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[=, origVar, ., getParentNode, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==]
[getParentNode, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {]
[), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =]
[), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =]
[), ;, if, (, info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (]
[), ;, if, (, info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (]
[), ;, if, (, info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (]
[if, (, info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=]
[info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&]
[info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&]
[info, ==, null, ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&]
[., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (]
[}, if, (, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ), {, return]
[info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ), {, return, true, ;, }]
[null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ), {, return, true, ;, }, info, =]
[null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ), {, return, true, ;, }, info, =]
[null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), ), {, return, true, ;, }, info, =]
["duplicate", ), ), {, return, true, ;, }, info, =, origVar, ., nameNode, ., getJSDocInfo, (, ), ;, if, (]
["duplicate", ), ), {, return, true, ;, }, info, =, origVar, ., nameNode, ., getJSDocInfo, (, ), ;, if, (]
[), {, return, true, ;, }, info, =, origVar, ., nameNode, ., getJSDocInfo, (, ), ;, if, (, info, ==]
[true, ;, }, info, =, origVar, ., nameNode, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {]
[}, info, =, origVar, ., nameNode, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =]
[}, info, =, origVar, ., nameNode, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =]
[(, ), ;, if, (, info, ==, null, ), {, info, =, origParent, ., getJSDocInfo, (, ), ;, }, return]
[), ;, if, (, info, ==, null, ), {, info, =, origParent, ., getJSDocInfo, (, ), ;, }, return, (]
[), ;, if, (, info, ==, null, ), {, info, =, origParent, ., getJSDocInfo, (, ), ;, }, return, (]
[), ;, if, (, info, ==, null, ), {, info, =, origParent, ., getJSDocInfo, (, ), ;, }, return, (]
[if, (, info, ==, null, ), {, info, =, origParent, ., getJSDocInfo, (, ), ;, }, return, (, info, !=]
[info, ==, null, ), {, info, =, origParent, ., getJSDocInfo, (, ), ;, }, return, (, info, !=, null, &&]
[info, ==, null, ), {, info, =, origParent, ., getJSDocInfo, (, ), ;, }, return, (, info, !=, null, &&]
[info, ==, null, ), {, info, =, origParent, ., getJSDocInfo, (, ), ;, }, return, (, info, !=, null, &&]
[., getJSDocInfo, (, ), ;, }, return, (, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (]
[getSuppressions, (, ), ., contains, (, "duplicate", ), ), ;, }, static, Scope, generateUntypedTopScope, (, AbstractCompiler, compiler, ), {, return]
[getSuppressions, (, ), ., contains, (, "duplicate", ), ), ;, }, static, Scope, generateUntypedTopScope, (, AbstractCompiler, compiler, ), {, return]
[., contains, (, "duplicate", ), ), ;, }, static, Scope, generateUntypedTopScope, (, AbstractCompiler, compiler, ), {, return, new, SyntacticScopeCreator, (]
[), ;, }, static, Scope, generateUntypedTopScope, (, AbstractCompiler, compiler, ), {, return, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (]
[), ;, }, static, Scope, generateUntypedTopScope, (, AbstractCompiler, compiler, ), {, return, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (]
[(, AbstractCompiler, compiler, ), {, return, new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, compiler, ., getRoot, (, ), ,]
