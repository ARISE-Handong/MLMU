[import, java, ., util, ., List, ;, class, OptimizeArgumentsArray, implements, CompilerPass, ,, ScopedCallback, {, private, static, final, String, ARGUMENTS, =]
[OptimizeArgumentsArray, implements, CompilerPass, ,, ScopedCallback, {, private, static, final, String, ARGUMENTS, =, "arguments", ;, private, static, final, String, PARAMETER_PREFIX, =]
[=, "arguments", ;, private, static, final, String, PARAMETER_PREFIX, =, "JSCompiler_OptimizeArgumentsArray_p", ;, private, final, String, paramPredix, ;, private, int, uniqueId, =]
[uniqueId, =, 0, ;, private, final, AbstractCompiler, compiler, ;, private, final, Deque, <, List, <, Node, >, >, argumentsAccessStack, =]
[uniqueId, =, 0, ;, private, final, AbstractCompiler, compiler, ;, private, final, Deque, <, List, <, Node, >, >, argumentsAccessStack, =]
[List, <, Node, >, >, argumentsAccessStack, =, Lists, ., newLinkedList, (, ), ;, private, List, <, Node, >, currentArgumentsAccess, =]
[(, ), ;, private, List, <, Node, >, currentArgumentsAccess, =, null, ;, OptimizeArgumentsArray, (, AbstractCompiler, compiler, ), {, this, (]
[;, private, List, <, Node, >, currentArgumentsAccess, =, null, ;, OptimizeArgumentsArray, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,]
[compiler, ), {, this, (, compiler, ,, PARAMETER_PREFIX, ), ;, }, OptimizeArgumentsArray, (, AbstractCompiler, compiler, ,, String, paramPrefix, ), {]
[compiler, ), {, this, (, compiler, ,, PARAMETER_PREFIX, ), ;, }, OptimizeArgumentsArray, (, AbstractCompiler, compiler, ,, String, paramPrefix, ), {]
[(, compiler, ,, PARAMETER_PREFIX, ), ;, }, OptimizeArgumentsArray, (, AbstractCompiler, compiler, ,, String, paramPrefix, ), {, this, ., compiler, =]
[(, compiler, ,, PARAMETER_PREFIX, ), ;, }, OptimizeArgumentsArray, (, AbstractCompiler, compiler, ,, String, paramPrefix, ), {, this, ., compiler, =]
[), ;, }, OptimizeArgumentsArray, (, AbstractCompiler, compiler, ,, String, paramPrefix, ), {, this, ., compiler, =, Preconditions, ., checkNotNull, (]
[OptimizeArgumentsArray, (, AbstractCompiler, compiler, ,, String, paramPrefix, ), {, this, ., compiler, =, Preconditions, ., checkNotNull, (, compiler, ), ;]
[OptimizeArgumentsArray, (, AbstractCompiler, compiler, ,, String, paramPrefix, ), {, this, ., compiler, =, Preconditions, ., checkNotNull, (, compiler, ), ;]
[,, String, paramPrefix, ), {, this, ., compiler, =, Preconditions, ., checkNotNull, (, compiler, ), ;, this, ., paramPredix, =]
[,, String, paramPrefix, ), {, this, ., compiler, =, Preconditions, ., checkNotNull, (, compiler, ), ;, this, ., paramPredix, =]
[{, this, ., compiler, =, Preconditions, ., checkNotNull, (, compiler, ), ;, this, ., paramPredix, =, Preconditions, ., checkNotNull, (]
[., checkNotNull, (, paramPrefix, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[., checkNotNull, (, paramPrefix, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, Preconditions, ., checkNotNull, (]
[Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, Preconditions, ., checkNotNull, (, root, ), ,]
[., checkNotNull, (, root, ), ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, traversal, ), {]
[., checkNotNull, (, root, ), ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, traversal, ), {]
[), ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, traversal, ), {, Preconditions, ., checkNotNull, (]
[@, Override, public, void, enterScope, (, NodeTraversal, traversal, ), {, Preconditions, ., checkNotNull, (, traversal, ), ;, Node, function, =]
[@, Override, public, void, enterScope, (, NodeTraversal, traversal, ), {, Preconditions, ., checkNotNull, (, traversal, ), ;, Node, function, =]
[), {, Preconditions, ., checkNotNull, (, traversal, ), ;, Node, function, =, traversal, ., getScopeRoot, (, ), ;, if, (]
[{, Preconditions, ., checkNotNull, (, traversal, ), ;, Node, function, =, traversal, ., getScopeRoot, (, ), ;, if, (, !]
[{, Preconditions, ., checkNotNull, (, traversal, ), ;, Node, function, =, traversal, ., getScopeRoot, (, ), ;, if, (, !]
[., getScopeRoot, (, ), ;, if, (, !, function, ., isFunction, (, ), ), {, return, ;, }, if, (]
[., getScopeRoot, (, ), ;, if, (, !, function, ., isFunction, (, ), ), {, return, ;, }, if, (]
[(, ), ;, if, (, !, function, ., isFunction, (, ), ), {, return, ;, }, if, (, currentArgumentsAccess, !=]
[if, (, !, function, ., isFunction, (, ), ), {, return, ;, }, if, (, currentArgumentsAccess, !=, null, ), {]
[if, (, !, function, ., isFunction, (, ), ), {, return, ;, }, if, (, currentArgumentsAccess, !=, null, ), {]
[., isFunction, (, ), ), {, return, ;, }, if, (, currentArgumentsAccess, !=, null, ), {, argumentsAccessStack, ., push, (]
[), {, return, ;, }, if, (, currentArgumentsAccess, !=, null, ), {, argumentsAccessStack, ., push, (, currentArgumentsAccess, ), ;, }]
[return, ;, }, if, (, currentArgumentsAccess, !=, null, ), {, argumentsAccessStack, ., push, (, currentArgumentsAccess, ), ;, }, currentArgumentsAccess, =]
[return, ;, }, if, (, currentArgumentsAccess, !=, null, ), {, argumentsAccessStack, ., push, (, currentArgumentsAccess, ), ;, }, currentArgumentsAccess, =]
[}, currentArgumentsAccess, =, Lists, ., newLinkedList, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, traversal, ), {]
[}, currentArgumentsAccess, =, Lists, ., newLinkedList, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, traversal, ), {]
[., newLinkedList, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, traversal, ), {, Preconditions, ., checkNotNull, (]
[}, @, Override, public, void, exitScope, (, NodeTraversal, traversal, ), {, Preconditions, ., checkNotNull, (, traversal, ), ;, if, (]
[}, @, Override, public, void, exitScope, (, NodeTraversal, traversal, ), {, Preconditions, ., checkNotNull, (, traversal, ), ;, if, (]
[Override, public, void, exitScope, (, NodeTraversal, traversal, ), {, Preconditions, ., checkNotNull, (, traversal, ), ;, if, (, currentArgumentsAccess, ==]
[{, Preconditions, ., checkNotNull, (, traversal, ), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (]
[., checkNotNull, (, traversal, ), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, tryReplaceArguments, (]
[., checkNotNull, (, traversal, ), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, tryReplaceArguments, (]
[currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, tryReplaceArguments, (, traversal, ., getScope, (, ), ), ), {]
[currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, tryReplaceArguments, (, traversal, ., getScope, (, ), ), ), {]
[currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, tryReplaceArguments, (, traversal, ., getScope, (, ), ), ), {]
[., getScope, (, ), ), ), {, traversal, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, if, (]
[getScope, (, ), ), ), {, traversal, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, if, (, !]
[getScope, (, ), ), ), {, traversal, ., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, if, (, !]
[., getCompiler, (, ), ., reportCodeChange, (, ), ;, }, if, (, !, argumentsAccessStack, ., isEmpty, (, ), ), {]
[(, ), ., reportCodeChange, (, ), ;, }, if, (, !, argumentsAccessStack, ., isEmpty, (, ), ), {, currentArgumentsAccess, =]
[(, ), ., reportCodeChange, (, ), ;, }, if, (, !, argumentsAccessStack, ., isEmpty, (, ), ), {, currentArgumentsAccess, =]
[(, !, argumentsAccessStack, ., isEmpty, (, ), ), {, currentArgumentsAccess, =, argumentsAccessStack, ., pop, (, ), ;, }, else, {]
[argumentsAccessStack, ., isEmpty, (, ), ), {, currentArgumentsAccess, =, argumentsAccessStack, ., pop, (, ), ;, }, else, {, currentArgumentsAccess, =]
[;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, node, ,, Node, parent, ), {, return]
[return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {]
[return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {]
[@, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, Preconditions, ., checkNotNull, (]
[void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, Preconditions, ., checkNotNull, (, traversal, ), ;]
[void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, Preconditions, ., checkNotNull, (, traversal, ), ;]
[traversal, ,, Node, node, ,, Node, parent, ), {, Preconditions, ., checkNotNull, (, traversal, ), ;, Preconditions, ., checkNotNull, (]
[Node, parent, ), {, Preconditions, ., checkNotNull, (, traversal, ), ;, Preconditions, ., checkNotNull, (, node, ), ;, if, (]
[Node, parent, ), {, Preconditions, ., checkNotNull, (, traversal, ), ;, Preconditions, ., checkNotNull, (, node, ), ;, if, (]
[), {, Preconditions, ., checkNotNull, (, traversal, ), ;, Preconditions, ., checkNotNull, (, node, ), ;, if, (, currentArgumentsAccess, ==]
[;, Preconditions, ., checkNotNull, (, node, ), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (]
[;, Preconditions, ., checkNotNull, (, node, ), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (]
[;, Preconditions, ., checkNotNull, (, node, ), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (]
[), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, node, ., isName, (, ), &&]
[), ;, if, (, currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, node, ., isName, (, ), &&]
[currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, node, ., isName, (, ), &&, ARGUMENTS, ., equals, (]
[currentArgumentsAccess, ==, null, ), {, return, ;, }, if, (, node, ., isName, (, ), &&, ARGUMENTS, ., equals, (]
[if, (, node, ., isName, (, ), &&, ARGUMENTS, ., equals, (, node, ., getString, (, ), ), ), {]
[if, (, node, ., isName, (, ), &&, ARGUMENTS, ., equals, (, node, ., getString, (, ), ), ), {]
[isName, (, ), &&, ARGUMENTS, ., equals, (, node, ., getString, (, ), ), ), {, currentArgumentsAccess, ., add, (]
[currentArgumentsAccess, ., add, (, node, ), ;, }, }, private, boolean, tryReplaceArguments, (, Scope, scope, ), {, Node, parametersList, =]
[currentArgumentsAccess, ., add, (, node, ), ;, }, }, private, boolean, tryReplaceArguments, (, Scope, scope, ), {, Node, parametersList, =]
[currentArgumentsAccess, ., add, (, node, ), ;, }, }, private, boolean, tryReplaceArguments, (, Scope, scope, ), {, Node, parametersList, =]
[currentArgumentsAccess, ., add, (, node, ), ;, }, }, private, boolean, tryReplaceArguments, (, Scope, scope, ), {, Node, parametersList, =]
[scope, ), {, Node, parametersList, =, scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;]
[scope, ), {, Node, parametersList, =, scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;]
[parametersList, =, scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, Preconditions, ., checkState, (]
[parametersList, =, scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, Preconditions, ., checkState, (]
[), ., getNext, (, ), ;, Preconditions, ., checkState, (, parametersList, ., isParamList, (, ), ), ;, boolean, changed, =]
[;, Preconditions, ., checkState, (, parametersList, ., isParamList, (, ), ), ;, boolean, changed, =, false, ;, int, numNamedParameter, =]
[;, Preconditions, ., checkState, (, parametersList, ., isParamList, (, ), ), ;, boolean, changed, =, false, ;, int, numNamedParameter, =]
[), ), ;, boolean, changed, =, false, ;, int, numNamedParameter, =, parametersList, ., getChildCount, (, ), ;, int, highestIndex, =]
[), ), ;, boolean, changed, =, false, ;, int, numNamedParameter, =, parametersList, ., getChildCount, (, ), ;, int, highestIndex, =]
[;, boolean, changed, =, false, ;, int, numNamedParameter, =, parametersList, ., getChildCount, (, ), ;, int, highestIndex, =, numNamedParameter, -]
[numNamedParameter, =, parametersList, ., getChildCount, (, ), ;, int, highestIndex, =, numNamedParameter, -, 1, ;, for, (, Node, ref, :]
[), ;, int, highestIndex, =, numNamedParameter, -, 1, ;, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, getElem, =]
[), ;, int, highestIndex, =, numNamedParameter, -, 1, ;, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, getElem, =]
[;, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, getElem, =, ref, ., getParent, (, ), ;, if, (]
[for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, getElem, =, ref, ., getParent, (, ), ;, if, (, !]
[for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, getElem, =, ref, ., getParent, (, ), ;, if, (, !]
[Node, getElem, =, ref, ., getParent, (, ), ;, if, (, !, getElem, ., isGetElem, (, ), ), {, return]
[(, ), ;, if, (, !, getElem, ., isGetElem, (, ), ), {, return, false, ;, }, Node, index, =]
[(, ), ;, if, (, !, getElem, ., isGetElem, (, ), ), {, return, false, ;, }, Node, index, =]
[isGetElem, (, ), ), {, return, false, ;, }, Node, index, =, ref, ., getNext, (, ), ;, if, (]
[(, ), ), {, return, false, ;, }, Node, index, =, ref, ., getNext, (, ), ;, if, (, !]
[(, ), ), {, return, false, ;, }, Node, index, =, ref, ., getNext, (, ), ;, if, (, !]
[Node, index, =, ref, ., getNext, (, ), ;, if, (, !, index, ., isNumber, (, ), ), {, return]
[(, ), ;, if, (, !, index, ., isNumber, (, ), ), {, return, false, ;, }, Node, getElemParent, =]
[(, ), ;, if, (, !, index, ., isNumber, (, ), ), {, return, false, ;, }, Node, getElemParent, =]
[isNumber, (, ), ), {, return, false, ;, }, Node, getElemParent, =, getElem, ., getParent, (, ), ;, if, (]
[isNumber, (, ), ), {, return, false, ;, }, Node, getElemParent, =, getElem, ., getParent, (, ), ;, if, (]
[isNumber, (, ), ), {, return, false, ;, }, Node, getElemParent, =, getElem, ., getParent, (, ), ;, if, (]
[false, ;, }, Node, getElemParent, =, getElem, ., getParent, (, ), ;, if, (, getElemParent, ., isCall, (, ), &&]
[false, ;, }, Node, getElemParent, =, getElem, ., getParent, (, ), ;, if, (, getElemParent, ., isCall, (, ), &&]
[false, ;, }, Node, getElemParent, =, getElem, ., getParent, (, ), ;, if, (, getElemParent, ., isCall, (, ), &&]
[getElem, ., getParent, (, ), ;, if, (, getElemParent, ., isCall, (, ), &&, getElemParent, ., getFirstChild, (, ), ==]
[), ;, if, (, getElemParent, ., isCall, (, ), &&, getElemParent, ., getFirstChild, (, ), ==, getElem, ), {, return]
[isCall, (, ), &&, getElemParent, ., getFirstChild, (, ), ==, getElem, ), {, return, false, ;, }, int, value, =]
[&&, getElemParent, ., getFirstChild, (, ), ==, getElem, ), {, return, false, ;, }, int, value, =, (, int, )]
[&&, getElemParent, ., getFirstChild, (, ), ==, getElem, ), {, return, false, ;, }, int, value, =, (, int, )]
[), {, return, false, ;, }, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (]
[), {, return, false, ;, }, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (]
[return, false, ;, }, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (, value, >]
[}, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (, value, >, highestIndex, ), {]
[value, =, (, int, ), index, ., getDouble, (, ), ;, if, (, value, >, highestIndex, ), {, highestIndex, =]
[getDouble, (, ), ;, if, (, value, >, highestIndex, ), {, highestIndex, =, value, ;, }, }, int, numExtraArgs, =]
[getDouble, (, ), ;, if, (, value, >, highestIndex, ), {, highestIndex, =, value, ;, }, }, int, numExtraArgs, =]
[getDouble, (, ), ;, if, (, value, >, highestIndex, ), {, highestIndex, =, value, ;, }, }, int, numExtraArgs, =]
[), ;, if, (, value, >, highestIndex, ), {, highestIndex, =, value, ;, }, }, int, numExtraArgs, =, highestIndex, -]
[if, (, value, >, highestIndex, ), {, highestIndex, =, value, ;, }, }, int, numExtraArgs, =, highestIndex, -, numNamedParameter, +]
[highestIndex, =, value, ;, }, }, int, numExtraArgs, =, highestIndex, -, numNamedParameter, +, 1, ;, String, [, ], argNames, =]
[;, }, }, int, numExtraArgs, =, highestIndex, -, numNamedParameter, +, 1, ;, String, [, ], argNames, =, new, String, []
[numNamedParameter, +, 1, ;, String, [, ], argNames, =, new, String, [, numExtraArgs, ], ;, for, (, int, i, =]
[1, ;, String, [, ], argNames, =, new, String, [, numExtraArgs, ], ;, for, (, int, i, =, 0, ;]
[1, ;, String, [, ], argNames, =, new, String, [, numExtraArgs, ], ;, for, (, int, i, =, 0, ;]
[String, [, ], argNames, =, new, String, [, numExtraArgs, ], ;, for, (, int, i, =, 0, ;, i, <]
[], argNames, =, new, String, [, numExtraArgs, ], ;, for, (, int, i, =, 0, ;, i, <, numExtraArgs, ;]
[], argNames, =, new, String, [, numExtraArgs, ], ;, for, (, int, i, =, 0, ;, i, <, numExtraArgs, ;]
[], ;, for, (, int, i, =, 0, ;, i, <, numExtraArgs, ;, i, ++, ), {, String, name, =]
[int, i, =, 0, ;, i, <, numExtraArgs, ;, i, ++, ), {, String, name, =, getNewName, (, ), ;]
[int, i, =, 0, ;, i, <, numExtraArgs, ;, i, ++, ), {, String, name, =, getNewName, (, ), ;]
[=, 0, ;, i, <, numExtraArgs, ;, i, ++, ), {, String, name, =, getNewName, (, ), ;, argNames, []
[i, <, numExtraArgs, ;, i, ++, ), {, String, name, =, getNewName, (, ), ;, argNames, [, i, ], =]
[numExtraArgs, ;, i, ++, ), {, String, name, =, getNewName, (, ), ;, argNames, [, i, ], =, name, ;]
[numExtraArgs, ;, i, ++, ), {, String, name, =, getNewName, (, ), ;, argNames, [, i, ], =, name, ;]
[), {, String, name, =, getNewName, (, ), ;, argNames, [, i, ], =, name, ;, parametersList, ., addChildrenToBack, (]
[), {, String, name, =, getNewName, (, ), ;, argNames, [, i, ], =, name, ;, parametersList, ., addChildrenToBack, (]
[=, getNewName, (, ), ;, argNames, [, i, ], =, name, ;, parametersList, ., addChildrenToBack, (, IR, ., name, (]
[;, argNames, [, i, ], =, name, ;, parametersList, ., addChildrenToBack, (, IR, ., name, (, name, ), ), ;]
[[, i, ], =, name, ;, parametersList, ., addChildrenToBack, (, IR, ., name, (, name, ), ), ;, changed, =]
[addChildrenToBack, (, IR, ., name, (, name, ), ), ;, changed, =, true, ;, }, for, (, Node, ref, :]
[name, ), ), ;, changed, =, true, ;, }, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, index, =]
[name, ), ), ;, changed, =, true, ;, }, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, index, =]
[}, for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, index, =, ref, ., getNext, (, ), ;, if, (]
[for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, index, =, ref, ., getNext, (, ), ;, if, (, !]
[for, (, Node, ref, :, currentArgumentsAccess, ), {, Node, index, =, ref, ., getNext, (, ), ;, if, (, !]
[getNext, (, ), ;, if, (, !, index, ., isNumber, (, ), ), {, continue, ;, }, int, value, =]
[;, if, (, !, index, ., isNumber, (, ), ), {, continue, ;, }, int, value, =, (, int, )]
[;, if, (, !, index, ., isNumber, (, ), ), {, continue, ;, }, int, value, =, (, int, )]
[), ), {, continue, ;, }, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (]
[), ), {, continue, ;, }, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (]
[{, continue, ;, }, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (, value, >=]
[}, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (, value, >=, numNamedParameter, ), {]
[}, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (, value, >=, numNamedParameter, ), {]
[}, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (, value, >=, numNamedParameter, ), {]
[}, int, value, =, (, int, ), index, ., getDouble, (, ), ;, if, (, value, >=, numNamedParameter, ), {]
[;, if, (, value, >=, numNamedParameter, ), {, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (]
[;, if, (, value, >=, numNamedParameter, ), {, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (]
[), {, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,]
[), {, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,]
[getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, IR, ., name, (]
[getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, IR, ., name, (]
[), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, IR, ., name, (, argNames, []
[), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, IR, ., name, (, argNames, []
[getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, IR, ., name, (, argNames, [, value, -]
[,, IR, ., name, (, argNames, [, value, -, numNamedParameter, ], ), ), ;, }, else, {, Node, name, =]
[,, IR, ., name, (, argNames, [, value, -, numNamedParameter, ], ), ), ;, }, else, {, Node, name, =]
[), ), ;, }, else, {, Node, name, =, parametersList, ., getFirstChild, (, ), ;, for, (, int, i, =]
[;, }, else, {, Node, name, =, parametersList, ., getFirstChild, (, ), ;, for, (, int, i, =, 0, ;]
[;, }, else, {, Node, name, =, parametersList, ., getFirstChild, (, ), ;, for, (, int, i, =, 0, ;]
[else, {, Node, name, =, parametersList, ., getFirstChild, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[Node, name, =, parametersList, ., getFirstChild, (, ), ;, for, (, int, i, =, 0, ;, i, <, value, ;]
[Node, name, =, parametersList, ., getFirstChild, (, ), ;, for, (, int, i, =, 0, ;, i, <, value, ;]
[., getFirstChild, (, ), ;, for, (, int, i, =, 0, ;, i, <, value, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, value, ;, i, ++, ), {, name, =]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, value, ;, i, ++, ), {, name, =]
[=, 0, ;, i, <, value, ;, i, ++, ), {, name, =, name, ., getNext, (, ), ;, }]
[=, 0, ;, i, <, value, ;, i, ++, ), {, name, =, name, ., getNext, (, ), ;, }]
[=, 0, ;, i, <, value, ;, i, ++, ), {, name, =, name, ., getNext, (, ), ;, }]
[=, 0, ;, i, <, value, ;, i, ++, ), {, name, =, name, ., getNext, (, ), ;, }]
[=, name, ., getNext, (, ), ;, }, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (]
[=, name, ., getNext, (, ), ;, }, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (]
[;, }, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,]
[;, }, ref, ., getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,]
[getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, IR, ., name, (]
[getParent, (, ), ., getParent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, IR, ., name, (]
[(, ref, ., getParent, (, ), ,, IR, ., name, (, name, ., getString, (, ), ), ), ;, }]
[., getParent, (, ), ,, IR, ., name, (, name, ., getString, (, ), ), ), ;, }, changed, =]
[,, IR, ., name, (, name, ., getString, (, ), ), ), ;, }, changed, =, true, ;, }, return]
[), ), ;, }, changed, =, true, ;, }, return, changed, ;, }, private, String, getNewName, (, ), {, return]
[), ), ;, }, changed, =, true, ;, }, return, changed, ;, }, private, String, getNewName, (, ), {, return]
[;, }, changed, =, true, ;, }, return, changed, ;, }, private, String, getNewName, (, ), {, return, paramPredix, +]
[;, }, changed, =, true, ;, }, return, changed, ;, }, private, String, getNewName, (, ), {, return, paramPredix, +]
