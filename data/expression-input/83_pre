[public, class, IntervalXYDelegate, implements, DatasetChangeListener, ,, DomainInfo, ,, Serializable, ,, Cloneable, ,, PublicCloneable, {, private, static, final, long, serialVersionUID, =]
[class, IntervalXYDelegate, implements, DatasetChangeListener, ,, DomainInfo, ,, Serializable, ,, Cloneable, ,, PublicCloneable, {, private, static, final, long, serialVersionUID, =, -]
[double, intervalPositionFactor, ;, private, double, fixedIntervalWidth, ;, private, double, autoIntervalWidth, ;, public, IntervalXYDelegate, (, XYDataset, dataset, ), {, this, (]
[;, private, double, fixedIntervalWidth, ;, private, double, autoIntervalWidth, ;, public, IntervalXYDelegate, (, XYDataset, dataset, ), {, this, (, dataset, ,]
[this, (, dataset, ,, true, ), ;, }, public, IntervalXYDelegate, (, XYDataset, dataset, ,, boolean, autoWidth, ), {, if, (]
[this, (, dataset, ,, true, ), ;, }, public, IntervalXYDelegate, (, XYDataset, dataset, ,, boolean, autoWidth, ), {, if, (]
[dataset, ,, true, ), ;, }, public, IntervalXYDelegate, (, XYDataset, dataset, ,, boolean, autoWidth, ), {, if, (, dataset, ==]
[;, }, public, IntervalXYDelegate, (, XYDataset, dataset, ,, boolean, autoWidth, ), {, if, (, dataset, ==, null, ), {, throw]
[IntervalXYDelegate, (, XYDataset, dataset, ,, boolean, autoWidth, ), {, if, (, dataset, ==, null, ), {, throw, new, IllegalArgumentException, (]
[,, boolean, autoWidth, ), {, if, (, dataset, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }]
[,, boolean, autoWidth, ), {, if, (, dataset, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }]
[{, if, (, dataset, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, this, ., dataset, =]
[(, dataset, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, this, ., dataset, =, dataset, ;]
[(, dataset, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, this, ., dataset, =, dataset, ;]
[), {, throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, this, ., dataset, =, dataset, ;, this, ., autoWidth, =]
[throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, this, ., dataset, =, dataset, ;, this, ., autoWidth, =, autoWidth, ;]
[throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, this, ., dataset, =, dataset, ;, this, ., autoWidth, =, autoWidth, ;]
["Null 'dataset' argument.", ), ;, }, this, ., dataset, =, dataset, ;, this, ., autoWidth, =, autoWidth, ;, this, ., intervalPositionFactor, =]
[;, }, this, ., dataset, =, dataset, ;, this, ., autoWidth, =, autoWidth, ;, this, ., intervalPositionFactor, =, 0.5, ;]
[;, }, this, ., dataset, =, dataset, ;, this, ., autoWidth, =, autoWidth, ;, this, ., intervalPositionFactor, =, 0.5, ;]
[dataset, =, dataset, ;, this, ., autoWidth, =, autoWidth, ;, this, ., intervalPositionFactor, =, 0.5, ;, this, ., autoIntervalWidth, =]
[dataset, =, dataset, ;, this, ., autoWidth, =, autoWidth, ;, this, ., intervalPositionFactor, =, 0.5, ;, this, ., autoIntervalWidth, =]
[this, ., autoWidth, =, autoWidth, ;, this, ., intervalPositionFactor, =, 0.5, ;, this, ., autoIntervalWidth, =, Double, ., POSITIVE_INFINITY, ;]
[this, ., autoWidth, =, autoWidth, ;, this, ., intervalPositionFactor, =, 0.5, ;, this, ., autoIntervalWidth, =, Double, ., POSITIVE_INFINITY, ;]
[autoWidth, ;, this, ., intervalPositionFactor, =, 0.5, ;, this, ., autoIntervalWidth, =, Double, ., POSITIVE_INFINITY, ;, this, ., fixedIntervalWidth, =]
[autoIntervalWidth, =, Double, ., POSITIVE_INFINITY, ;, this, ., fixedIntervalWidth, =, 1.0, ;, }, public, boolean, isAutoWidth, (, ), {, return]
[autoIntervalWidth, =, Double, ., POSITIVE_INFINITY, ;, this, ., fixedIntervalWidth, =, 1.0, ;, }, public, boolean, isAutoWidth, (, ), {, return]
[public, boolean, isAutoWidth, (, ), {, return, this, ., autoWidth, ;, }, public, void, setAutoWidth, (, boolean, b, ), {]
[public, boolean, isAutoWidth, (, ), {, return, this, ., autoWidth, ;, }, public, void, setAutoWidth, (, boolean, b, ), {]
[), {, return, this, ., autoWidth, ;, }, public, void, setAutoWidth, (, boolean, b, ), {, this, ., autoWidth, =]
[., autoWidth, ;, }, public, void, setAutoWidth, (, boolean, b, ), {, this, ., autoWidth, =, b, ;, if, (]
[}, public, void, setAutoWidth, (, boolean, b, ), {, this, ., autoWidth, =, b, ;, if, (, b, ), {]
[}, public, void, setAutoWidth, (, boolean, b, ), {, this, ., autoWidth, =, b, ;, if, (, b, ), {]
[(, boolean, b, ), {, this, ., autoWidth, =, b, ;, if, (, b, ), {, this, ., autoIntervalWidth, =]
[b, ), {, this, ., autoIntervalWidth, =, recalculateInterval, (, ), ;, }, }, public, double, getIntervalPositionFactor, (, ), {, return]
[b, ), {, this, ., autoIntervalWidth, =, recalculateInterval, (, ), ;, }, }, public, double, getIntervalPositionFactor, (, ), {, return]
[getIntervalPositionFactor, (, ), {, return, this, ., intervalPositionFactor, ;, }, public, void, setIntervalPositionFactor, (, double, d, ), {, if, (]
[getIntervalPositionFactor, (, ), {, return, this, ., intervalPositionFactor, ;, }, public, void, setIntervalPositionFactor, (, double, d, ), {, if, (]
[getIntervalPositionFactor, (, ), {, return, this, ., intervalPositionFactor, ;, }, public, void, setIntervalPositionFactor, (, double, d, ), {, if, (]
[), {, return, this, ., intervalPositionFactor, ;, }, public, void, setIntervalPositionFactor, (, double, d, ), {, if, (, d, <]
[return, this, ., intervalPositionFactor, ;, }, public, void, setIntervalPositionFactor, (, double, d, ), {, if, (, d, <, 0.0, ||]
[return, this, ., intervalPositionFactor, ;, }, public, void, setIntervalPositionFactor, (, double, d, ), {, if, (, d, <, 0.0, ||]
[., intervalPositionFactor, ;, }, public, void, setIntervalPositionFactor, (, double, d, ), {, if, (, d, <, 0.0, ||, 1.0, <]
[public, void, setIntervalPositionFactor, (, double, d, ), {, if, (, d, <, 0.0, ||, 1.0, <, d, ), {, throw]
[(, double, d, ), {, if, (, d, <, 0.0, ||, 1.0, <, d, ), {, throw, new, IllegalArgumentException, (]
[{, if, (, d, <, 0.0, ||, 1.0, <, d, ), {, throw, new, IllegalArgumentException, (, "Argument 'd' outside valid range.", ), ;, }]
[{, if, (, d, <, 0.0, ||, 1.0, <, d, ), {, throw, new, IllegalArgumentException, (, "Argument 'd' outside valid range.", ), ;, }]
[<, 0.0, ||, 1.0, <, d, ), {, throw, new, IllegalArgumentException, (, "Argument 'd' outside valid range.", ), ;, }, this, ., intervalPositionFactor, =]
[IllegalArgumentException, (, "Argument 'd' outside valid range.", ), ;, }, this, ., intervalPositionFactor, =, d, ;, }, public, double, getFixedIntervalWidth, (, ), {, return]
[IllegalArgumentException, (, "Argument 'd' outside valid range.", ), ;, }, this, ., intervalPositionFactor, =, d, ;, }, public, double, getFixedIntervalWidth, (, ), {, return]
[getFixedIntervalWidth, (, ), {, return, this, ., fixedIntervalWidth, ;, }, public, void, setFixedIntervalWidth, (, double, w, ), {, if, (]
[getFixedIntervalWidth, (, ), {, return, this, ., fixedIntervalWidth, ;, }, public, void, setFixedIntervalWidth, (, double, w, ), {, if, (]
[), {, return, this, ., fixedIntervalWidth, ;, }, public, void, setFixedIntervalWidth, (, double, w, ), {, if, (, w, <]
[., fixedIntervalWidth, ;, }, public, void, setFixedIntervalWidth, (, double, w, ), {, if, (, w, <, 0.0, ), {, throw]
[}, public, void, setFixedIntervalWidth, (, double, w, ), {, if, (, w, <, 0.0, ), {, throw, new, IllegalArgumentException, (]
[(, double, w, ), {, if, (, w, <, 0.0, ), {, throw, new, IllegalArgumentException, (, "Negative 'w' argument.", ), ;, }]
[(, double, w, ), {, if, (, w, <, 0.0, ), {, throw, new, IllegalArgumentException, (, "Negative 'w' argument.", ), ;, }]
[{, if, (, w, <, 0.0, ), {, throw, new, IllegalArgumentException, (, "Negative 'w' argument.", ), ;, }, this, ., fixedIntervalWidth, =]
[(, w, <, 0.0, ), {, throw, new, IllegalArgumentException, (, "Negative 'w' argument.", ), ;, }, this, ., fixedIntervalWidth, =, w, ;]
[(, w, <, 0.0, ), {, throw, new, IllegalArgumentException, (, "Negative 'w' argument.", ), ;, }, this, ., fixedIntervalWidth, =, w, ;]
[), {, throw, new, IllegalArgumentException, (, "Negative 'w' argument.", ), ;, }, this, ., fixedIntervalWidth, =, w, ;, this, ., autoWidth, =]
[., fixedIntervalWidth, =, w, ;, this, ., autoWidth, =, false, ;, }, public, double, getIntervalWidth, (, ), {, if, (]
[., fixedIntervalWidth, =, w, ;, this, ., autoWidth, =, false, ;, }, public, double, getIntervalWidth, (, ), {, if, (]
[;, this, ., autoWidth, =, false, ;, }, public, double, getIntervalWidth, (, ), {, if, (, isAutoWidth, (, ), &&]
[this, ., autoWidth, =, false, ;, }, public, double, getIntervalWidth, (, ), {, if, (, isAutoWidth, (, ), &&, !]
[this, ., autoWidth, =, false, ;, }, public, double, getIntervalWidth, (, ), {, if, (, isAutoWidth, (, ), &&, !]
[false, ;, }, public, double, getIntervalWidth, (, ), {, if, (, isAutoWidth, (, ), &&, !, Double, ., isInfinite, (]
[false, ;, }, public, double, getIntervalWidth, (, ), {, if, (, isAutoWidth, (, ), &&, !, Double, ., isInfinite, (]
[), {, if, (, isAutoWidth, (, ), &&, !, Double, ., isInfinite, (, this, ., autoIntervalWidth, ), ), {, return]
[), {, if, (, isAutoWidth, (, ), &&, !, Double, ., isInfinite, (, this, ., autoIntervalWidth, ), ), {, return]
[!, Double, ., isInfinite, (, this, ., autoIntervalWidth, ), ), {, return, this, ., autoIntervalWidth, ;, }, else, {, return]
[!, Double, ., isInfinite, (, this, ., autoIntervalWidth, ), ), {, return, this, ., autoIntervalWidth, ;, }, else, {, return]
[this, ., fixedIntervalWidth, ;, }, }, public, Number, getStartX, (, int, series, ,, int, item, ), {, Number, startX, =]
[}, public, Number, getStartX, (, int, series, ,, int, item, ), {, Number, startX, =, null, ;, Number, x, =]
[}, public, Number, getStartX, (, int, series, ,, int, item, ), {, Number, startX, =, null, ;, Number, x, =]
[}, public, Number, getStartX, (, int, series, ,, int, item, ), {, Number, startX, =, null, ;, Number, x, =]
[series, ,, int, item, ), {, Number, startX, =, null, ;, Number, x, =, this, ., dataset, ., getX, (]
[int, item, ), {, Number, startX, =, null, ;, Number, x, =, this, ., dataset, ., getX, (, series, ,]
[startX, =, null, ;, Number, x, =, this, ., dataset, ., getX, (, series, ,, item, ), ;, if, (]
[startX, =, null, ;, Number, x, =, this, ., dataset, ., getX, (, series, ,, item, ), ;, if, (]
[null, ;, Number, x, =, this, ., dataset, ., getX, (, series, ,, item, ), ;, if, (, x, !=]
[x, =, this, ., dataset, ., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {]
[this, ., dataset, ., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {, startX, =]
[., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {, startX, =, new, Double, (]
[., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {, startX, =, new, Double, (]
[., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {, startX, =, new, Double, (]
[), ;, if, (, x, !=, null, ), {, startX, =, new, Double, (, x, ., doubleValue, (, ), -]
[;, if, (, x, !=, null, ), {, startX, =, new, Double, (, x, ., doubleValue, (, ), -, (]
[;, if, (, x, !=, null, ), {, startX, =, new, Double, (, x, ., doubleValue, (, ), -, (]
[!=, null, ), {, startX, =, new, Double, (, x, ., doubleValue, (, ), -, (, getIntervalPositionFactor, (, ), *]
[(, x, ., doubleValue, (, ), -, (, getIntervalPositionFactor, (, ), *, getIntervalWidth, (, ), ), ), ;, }, return]
[), ), ;, }, return, startX, ;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, return]
[), ), ;, }, return, startX, ;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, return]
[), ), ;, }, return, startX, ;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, return]
[), ), ;, }, return, startX, ;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, return]
[;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, return, this, ., dataset, ., getXValue, (]
[public, double, getStartXValue, (, int, series, ,, int, item, ), {, return, this, ., dataset, ., getXValue, (, series, ,]
[(, int, series, ,, int, item, ), {, return, this, ., dataset, ., getXValue, (, series, ,, item, ), -]
[(, int, series, ,, int, item, ), {, return, this, ., dataset, ., getXValue, (, series, ,, item, ), -]
[int, item, ), {, return, this, ., dataset, ., getXValue, (, series, ,, item, ), -, getIntervalPositionFactor, (, ), *]
[*, getIntervalWidth, (, ), ;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, Number, endX, =]
[}, public, Number, getEndX, (, int, series, ,, int, item, ), {, Number, endX, =, null, ;, Number, x, =]
[}, public, Number, getEndX, (, int, series, ,, int, item, ), {, Number, endX, =, null, ;, Number, x, =]
[}, public, Number, getEndX, (, int, series, ,, int, item, ), {, Number, endX, =, null, ;, Number, x, =]
[series, ,, int, item, ), {, Number, endX, =, null, ;, Number, x, =, this, ., dataset, ., getX, (]
[int, item, ), {, Number, endX, =, null, ;, Number, x, =, this, ., dataset, ., getX, (, series, ,]
[endX, =, null, ;, Number, x, =, this, ., dataset, ., getX, (, series, ,, item, ), ;, if, (]
[endX, =, null, ;, Number, x, =, this, ., dataset, ., getX, (, series, ,, item, ), ;, if, (]
[null, ;, Number, x, =, this, ., dataset, ., getX, (, series, ,, item, ), ;, if, (, x, !=]
[x, =, this, ., dataset, ., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {]
[this, ., dataset, ., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {, endX, =]
[., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {, endX, =, new, Double, (]
[., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {, endX, =, new, Double, (]
[., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {, endX, =, new, Double, (]
[), ;, if, (, x, !=, null, ), {, endX, =, new, Double, (, x, ., doubleValue, (, ), +]
[;, if, (, x, !=, null, ), {, endX, =, new, Double, (, x, ., doubleValue, (, ), +, (]
[;, if, (, x, !=, null, ), {, endX, =, new, Double, (, x, ., doubleValue, (, ), +, (]
[if, (, x, !=, null, ), {, endX, =, new, Double, (, x, ., doubleValue, (, ), +, (, (]
[if, (, x, !=, null, ), {, endX, =, new, Double, (, x, ., doubleValue, (, ), +, (, (]
[x, !=, null, ), {, endX, =, new, Double, (, x, ., doubleValue, (, ), +, (, (, 1.0, -]
[endX, =, new, Double, (, x, ., doubleValue, (, ), +, (, (, 1.0, -, getIntervalPositionFactor, (, ), ), *]
[(, ), +, (, (, 1.0, -, getIntervalPositionFactor, (, ), ), *, getIntervalWidth, (, ), ), ), ;, }, return]
[), ), ;, }, return, endX, ;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, return]
[), ), ;, }, return, endX, ;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, return]
[), ), ;, }, return, endX, ;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, return]
[), ), ;, }, return, endX, ;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, return]
[;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, return, this, ., dataset, ., getXValue, (]
[public, double, getEndXValue, (, int, series, ,, int, item, ), {, return, this, ., dataset, ., getXValue, (, series, ,]
[(, int, series, ,, int, item, ), {, return, this, ., dataset, ., getXValue, (, series, ,, item, ), +]
[(, int, series, ,, int, item, ), {, return, this, ., dataset, ., getXValue, (, series, ,, item, ), +]
[int, series, ,, int, item, ), {, return, this, ., dataset, ., getXValue, (, series, ,, item, ), +, (]
[int, series, ,, int, item, ), {, return, this, ., dataset, ., getXValue, (, series, ,, item, ), +, (]
[,, int, item, ), {, return, this, ., dataset, ., getXValue, (, series, ,, item, ), +, (, 1.0, -]
[return, this, ., dataset, ., getXValue, (, series, ,, item, ), +, (, 1.0, -, getIntervalPositionFactor, (, ), ), *]
[(, ), ), *, getIntervalWidth, (, ), ;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, double, result, =]
[(, ), ), *, getIntervalWidth, (, ), ;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, double, result, =]
[;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, double, result, =, Double, ., NaN, ;, Range, r, =]
[public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, double, result, =, Double, ., NaN, ;, Range, r, =, getDomainBounds, (]
[includeInterval, ), {, double, result, =, Double, ., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (]
[includeInterval, ), {, double, result, =, Double, ., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (]
[{, double, result, =, Double, ., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (, r, !=]
[=, Double, ., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (, r, !=, null, ), {]
[., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (, r, !=, null, ), {, result, =]
[., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (, r, !=, null, ), {, result, =]
[includeInterval, ), ;, if, (, r, !=, null, ), {, result, =, r, ., getLowerBound, (, ), ;, }, return]
[getLowerBound, (, ), ;, }, return, result, ;, }, public, double, getDomainUpperBound, (, boolean, includeInterval, ), {, double, result, =]
[getLowerBound, (, ), ;, }, return, result, ;, }, public, double, getDomainUpperBound, (, boolean, includeInterval, ), {, double, result, =]
[;, }, public, double, getDomainUpperBound, (, boolean, includeInterval, ), {, double, result, =, Double, ., NaN, ;, Range, r, =]
[public, double, getDomainUpperBound, (, boolean, includeInterval, ), {, double, result, =, Double, ., NaN, ;, Range, r, =, getDomainBounds, (]
[includeInterval, ), {, double, result, =, Double, ., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (]
[includeInterval, ), {, double, result, =, Double, ., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (]
[{, double, result, =, Double, ., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (, r, !=]
[=, Double, ., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (, r, !=, null, ), {]
[., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (, r, !=, null, ), {, result, =]
[., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (, r, !=, null, ), {, result, =]
[includeInterval, ), ;, if, (, r, !=, null, ), {, result, =, r, ., getUpperBound, (, ), ;, }, return]
[getUpperBound, (, ), ;, }, return, result, ;, }, public, Range, getDomainBounds, (, boolean, includeInterval, ), {, Range, range, =]
[getUpperBound, (, ), ;, }, return, result, ;, }, public, Range, getDomainBounds, (, boolean, includeInterval, ), {, Range, range, =]
[}, return, result, ;, }, public, Range, getDomainBounds, (, boolean, includeInterval, ), {, Range, range, =, DatasetUtilities, ., findDomainBounds, (]
[}, return, result, ;, }, public, Range, getDomainBounds, (, boolean, includeInterval, ), {, Range, range, =, DatasetUtilities, ., findDomainBounds, (]
[}, public, Range, getDomainBounds, (, boolean, includeInterval, ), {, Range, range, =, DatasetUtilities, ., findDomainBounds, (, this, ., dataset, ,]
[boolean, includeInterval, ), {, Range, range, =, DatasetUtilities, ., findDomainBounds, (, this, ., dataset, ,, false, ), ;, if, (]
[boolean, includeInterval, ), {, Range, range, =, DatasetUtilities, ., findDomainBounds, (, this, ., dataset, ,, false, ), ;, if, (]
[), {, Range, range, =, DatasetUtilities, ., findDomainBounds, (, this, ., dataset, ,, false, ), ;, if, (, includeInterval, &&]
[), {, Range, range, =, DatasetUtilities, ., findDomainBounds, (, this, ., dataset, ,, false, ), ;, if, (, includeInterval, &&]
[Range, range, =, DatasetUtilities, ., findDomainBounds, (, this, ., dataset, ,, false, ), ;, if, (, includeInterval, &&, range, !=]
[(, this, ., dataset, ,, false, ), ;, if, (, includeInterval, &&, range, !=, null, ), {, double, lowerAdj, =]
[(, this, ., dataset, ,, false, ), ;, if, (, includeInterval, &&, range, !=, null, ), {, double, lowerAdj, =]
[,, false, ), ;, if, (, includeInterval, &&, range, !=, null, ), {, double, lowerAdj, =, getIntervalWidth, (, ), *]
[&&, range, !=, null, ), {, double, lowerAdj, =, getIntervalWidth, (, ), *, getIntervalPositionFactor, (, ), ;, double, upperAdj, =]
[&&, range, !=, null, ), {, double, lowerAdj, =, getIntervalWidth, (, ), *, getIntervalPositionFactor, (, ), ;, double, upperAdj, =]
[), {, double, lowerAdj, =, getIntervalWidth, (, ), *, getIntervalPositionFactor, (, ), ;, double, upperAdj, =, getIntervalWidth, (, ), -]
[double, lowerAdj, =, getIntervalWidth, (, ), *, getIntervalPositionFactor, (, ), ;, double, upperAdj, =, getIntervalWidth, (, ), -, lowerAdj, ;]
[=, getIntervalWidth, (, ), *, getIntervalPositionFactor, (, ), ;, double, upperAdj, =, getIntervalWidth, (, ), -, lowerAdj, ;, range, =]
[), *, getIntervalPositionFactor, (, ), ;, double, upperAdj, =, getIntervalWidth, (, ), -, lowerAdj, ;, range, =, new, Range, (]
[), *, getIntervalPositionFactor, (, ), ;, double, upperAdj, =, getIntervalWidth, (, ), -, lowerAdj, ;, range, =, new, Range, (]
[), *, getIntervalPositionFactor, (, ), ;, double, upperAdj, =, getIntervalWidth, (, ), -, lowerAdj, ;, range, =, new, Range, (]
[double, upperAdj, =, getIntervalWidth, (, ), -, lowerAdj, ;, range, =, new, Range, (, range, ., getLowerBound, (, ), -]
[=, getIntervalWidth, (, ), -, lowerAdj, ;, range, =, new, Range, (, range, ., getLowerBound, (, ), -, lowerAdj, ,]
[=, getIntervalWidth, (, ), -, lowerAdj, ;, range, =, new, Range, (, range, ., getLowerBound, (, ), -, lowerAdj, ,]
[=, getIntervalWidth, (, ), -, lowerAdj, ;, range, =, new, Range, (, range, ., getLowerBound, (, ), -, lowerAdj, ,]
[;, range, =, new, Range, (, range, ., getLowerBound, (, ), -, lowerAdj, ,, range, ., getUpperBound, (, ), +]
[(, range, ., getLowerBound, (, ), -, lowerAdj, ,, range, ., getUpperBound, (, ), +, upperAdj, ), ;, }, return]
[), +, upperAdj, ), ;, }, return, range, ;, }, public, void, datasetChanged, (, DatasetChangeEvent, e, ), {, if, (]
[), +, upperAdj, ), ;, }, return, range, ;, }, public, void, datasetChanged, (, DatasetChangeEvent, e, ), {, if, (]
[}, return, range, ;, }, public, void, datasetChanged, (, DatasetChangeEvent, e, ), {, if, (, this, ., autoWidth, ), {]
[}, return, range, ;, }, public, void, datasetChanged, (, DatasetChangeEvent, e, ), {, if, (, this, ., autoWidth, ), {]
[}, public, void, datasetChanged, (, DatasetChangeEvent, e, ), {, if, (, this, ., autoWidth, ), {, this, ., autoIntervalWidth, =]
[{, this, ., autoIntervalWidth, =, recalculateInterval, (, ), ;, }, }, private, double, recalculateInterval, (, ), {, double, result, =]
[{, this, ., autoIntervalWidth, =, recalculateInterval, (, ), ;, }, }, private, double, recalculateInterval, (, ), {, double, result, =]
[), ;, }, }, private, double, recalculateInterval, (, ), {, double, result, =, Double, ., POSITIVE_INFINITY, ;, int, seriesCount, =]
[), ;, }, }, private, double, recalculateInterval, (, ), {, double, result, =, Double, ., POSITIVE_INFINITY, ;, int, seriesCount, =]
[), ;, }, }, private, double, recalculateInterval, (, ), {, double, result, =, Double, ., POSITIVE_INFINITY, ;, int, seriesCount, =]
[Double, ., POSITIVE_INFINITY, ;, int, seriesCount, =, this, ., dataset, ., getSeriesCount, (, ), ;, for, (, int, series, =]
[POSITIVE_INFINITY, ;, int, seriesCount, =, this, ., dataset, ., getSeriesCount, (, ), ;, for, (, int, series, =, 0, ;]
[POSITIVE_INFINITY, ;, int, seriesCount, =, this, ., dataset, ., getSeriesCount, (, ), ;, for, (, int, series, =, 0, ;]
[int, seriesCount, =, this, ., dataset, ., getSeriesCount, (, ), ;, for, (, int, series, =, 0, ;, series, <]
[=, this, ., dataset, ., getSeriesCount, (, ), ;, for, (, int, series, =, 0, ;, series, <, seriesCount, ;]
[=, this, ., dataset, ., getSeriesCount, (, ), ;, for, (, int, series, =, 0, ;, series, <, seriesCount, ;]
[., getSeriesCount, (, ), ;, for, (, int, series, =, 0, ;, series, <, seriesCount, ;, series, ++, ), {]
[(, ), ;, for, (, int, series, =, 0, ;, series, <, seriesCount, ;, series, ++, ), {, result, =]
[(, ), ;, for, (, int, series, =, 0, ;, series, <, seriesCount, ;, series, ++, ), {, result, =]
[(, int, series, =, 0, ;, series, <, seriesCount, ;, series, ++, ), {, result, =, Math, ., min, (]
[series, =, 0, ;, series, <, seriesCount, ;, series, ++, ), {, result, =, Math, ., min, (, result, ,]
[0, ;, series, <, seriesCount, ;, series, ++, ), {, result, =, Math, ., min, (, result, ,, calculateIntervalForSeries, (]
[series, ++, ), {, result, =, Math, ., min, (, result, ,, calculateIntervalForSeries, (, series, ), ), ;, }, return]
[series, ), ), ;, }, return, result, ;, }, private, double, calculateIntervalForSeries, (, int, series, ), {, double, result, =]
[series, ), ), ;, }, return, result, ;, }, private, double, calculateIntervalForSeries, (, int, series, ), {, double, result, =]
[;, }, private, double, calculateIntervalForSeries, (, int, series, ), {, double, result, =, Double, ., POSITIVE_INFINITY, ;, int, itemCount, =]
[;, }, private, double, calculateIntervalForSeries, (, int, series, ), {, double, result, =, Double, ., POSITIVE_INFINITY, ;, int, itemCount, =]
[;, }, private, double, calculateIntervalForSeries, (, int, series, ), {, double, result, =, Double, ., POSITIVE_INFINITY, ;, int, itemCount, =]
[int, series, ), {, double, result, =, Double, ., POSITIVE_INFINITY, ;, int, itemCount, =, this, ., dataset, ., getItemCount, (]
[result, =, Double, ., POSITIVE_INFINITY, ;, int, itemCount, =, this, ., dataset, ., getItemCount, (, series, ), ;, if, (]
[result, =, Double, ., POSITIVE_INFINITY, ;, int, itemCount, =, this, ., dataset, ., getItemCount, (, series, ), ;, if, (]
[Double, ., POSITIVE_INFINITY, ;, int, itemCount, =, this, ., dataset, ., getItemCount, (, series, ), ;, if, (, itemCount, >]
[=, this, ., dataset, ., getItemCount, (, series, ), ;, if, (, itemCount, >, 1, ), {, double, prev, =]
[=, this, ., dataset, ., getItemCount, (, series, ), ;, if, (, itemCount, >, 1, ), {, double, prev, =]
[=, this, ., dataset, ., getItemCount, (, series, ), ;, if, (, itemCount, >, 1, ), {, double, prev, =]
[(, series, ), ;, if, (, itemCount, >, 1, ), {, double, prev, =, this, ., dataset, ., getXValue, (]
[), ;, if, (, itemCount, >, 1, ), {, double, prev, =, this, ., dataset, ., getXValue, (, series, ,]
[{, double, prev, =, this, ., dataset, ., getXValue, (, series, ,, 0, ), ;, for, (, int, item, =]
[prev, =, this, ., dataset, ., getXValue, (, series, ,, 0, ), ;, for, (, int, item, =, 1, ;]
[prev, =, this, ., dataset, ., getXValue, (, series, ,, 0, ), ;, for, (, int, item, =, 1, ;]
[this, ., dataset, ., getXValue, (, series, ,, 0, ), ;, for, (, int, item, =, 1, ;, item, <]
[dataset, ., getXValue, (, series, ,, 0, ), ;, for, (, int, item, =, 1, ;, item, <, itemCount, ;]
[dataset, ., getXValue, (, series, ,, 0, ), ;, for, (, int, item, =, 1, ;, item, <, itemCount, ;]
[), ;, for, (, int, item, =, 1, ;, item, <, itemCount, ;, item, ++, ), {, double, x, =]
[), ;, for, (, int, item, =, 1, ;, item, <, itemCount, ;, item, ++, ), {, double, x, =]
[), ;, for, (, int, item, =, 1, ;, item, <, itemCount, ;, item, ++, ), {, double, x, =]
[=, 1, ;, item, <, itemCount, ;, item, ++, ), {, double, x, =, this, ., dataset, ., getXValue, (]
[;, item, <, itemCount, ;, item, ++, ), {, double, x, =, this, ., dataset, ., getXValue, (, series, ,]
[itemCount, ;, item, ++, ), {, double, x, =, this, ., dataset, ., getXValue, (, series, ,, item, ), ;]
[item, ++, ), {, double, x, =, this, ., dataset, ., getXValue, (, series, ,, item, ), ;, result, =]
[item, ++, ), {, double, x, =, this, ., dataset, ., getXValue, (, series, ,, item, ), ;, result, =]
[double, x, =, this, ., dataset, ., getXValue, (, series, ,, item, ), ;, result, =, Math, ., min, (]
[=, this, ., dataset, ., getXValue, (, series, ,, item, ), ;, result, =, Math, ., min, (, result, ,]
[=, this, ., dataset, ., getXValue, (, series, ,, item, ), ;, result, =, Math, ., min, (, result, ,]
[., dataset, ., getXValue, (, series, ,, item, ), ;, result, =, Math, ., min, (, result, ,, x, -]
[getXValue, (, series, ,, item, ), ;, result, =, Math, ., min, (, result, ,, x, -, prev, ), ;]
[series, ,, item, ), ;, result, =, Math, ., min, (, result, ,, x, -, prev, ), ;, prev, =]
[result, =, Math, ., min, (, result, ,, x, -, prev, ), ;, prev, =, x, ;, }, }, return]
[prev, =, x, ;, }, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[prev, =, x, ;, }, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[x, ;, }, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, IntervalXYDelegate, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, IntervalXYDelegate, ), ), {, return, false, ;, }, IntervalXYDelegate, that, =]
[if, (, !, (, obj, instanceof, IntervalXYDelegate, ), ), {, return, false, ;, }, IntervalXYDelegate, that, =, (, IntervalXYDelegate, )]
[obj, instanceof, IntervalXYDelegate, ), ), {, return, false, ;, }, IntervalXYDelegate, that, =, (, IntervalXYDelegate, ), obj, ;, if, (]
[obj, instanceof, IntervalXYDelegate, ), ), {, return, false, ;, }, IntervalXYDelegate, that, =, (, IntervalXYDelegate, ), obj, ;, if, (]
[obj, instanceof, IntervalXYDelegate, ), ), {, return, false, ;, }, IntervalXYDelegate, that, =, (, IntervalXYDelegate, ), obj, ;, if, (]
[), {, return, false, ;, }, IntervalXYDelegate, that, =, (, IntervalXYDelegate, ), obj, ;, if, (, this, ., autoWidth, !=]
[), {, return, false, ;, }, IntervalXYDelegate, that, =, (, IntervalXYDelegate, ), obj, ;, if, (, this, ., autoWidth, !=]
[IntervalXYDelegate, that, =, (, IntervalXYDelegate, ), obj, ;, if, (, this, ., autoWidth, !=, that, ., autoWidth, ), {, return]
[), obj, ;, if, (, this, ., autoWidth, !=, that, ., autoWidth, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., autoWidth, !=, that, ., autoWidth, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., autoWidth, !=, that, ., autoWidth, ), {, return, false, ;, }, if, (]
[(, this, ., autoWidth, !=, that, ., autoWidth, ), {, return, false, ;, }, if, (, this, ., intervalPositionFactor, !=]
[(, this, ., autoWidth, !=, that, ., autoWidth, ), {, return, false, ;, }, if, (, this, ., intervalPositionFactor, !=]
[., autoWidth, ), {, return, false, ;, }, if, (, this, ., intervalPositionFactor, !=, that, ., intervalPositionFactor, ), {, return]
[false, ;, }, if, (, this, ., intervalPositionFactor, !=, that, ., intervalPositionFactor, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., intervalPositionFactor, !=, that, ., intervalPositionFactor, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., intervalPositionFactor, !=, that, ., intervalPositionFactor, ), {, return, false, ;, }, if, (]
[(, this, ., intervalPositionFactor, !=, that, ., intervalPositionFactor, ), {, return, false, ;, }, if, (, this, ., fixedIntervalWidth, !=]
[(, this, ., intervalPositionFactor, !=, that, ., intervalPositionFactor, ), {, return, false, ;, }, if, (, this, ., fixedIntervalWidth, !=]
[., intervalPositionFactor, ), {, return, false, ;, }, if, (, this, ., fixedIntervalWidth, !=, that, ., fixedIntervalWidth, ), {, return]
[return, false, ;, }, if, (, this, ., fixedIntervalWidth, !=, that, ., fixedIntervalWidth, ), {, return, false, ;, }, return]
[fixedIntervalWidth, ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return]
[fixedIntervalWidth, ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return]
[throws, CloneNotSupportedException, {, return, super, ., clone, (, ), ;, }, public, int, hashCode, (, ), {, int, hash, =]
[{, return, super, ., clone, (, ), ;, }, public, int, hashCode, (, ), {, int, hash, =, 5, ;]
[super, ., clone, (, ), ;, }, public, int, hashCode, (, ), {, int, hash, =, 5, ;, hash, =]
[super, ., clone, (, ), ;, }, public, int, hashCode, (, ), {, int, hash, =, 5, ;, hash, =]
[), ;, }, public, int, hashCode, (, ), {, int, hash, =, 5, ;, hash, =, HashUtilities, ., hashCode, (]
[}, public, int, hashCode, (, ), {, int, hash, =, 5, ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[}, public, int, hashCode, (, ), {, int, hash, =, 5, ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[), {, int, hash, =, 5, ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., autoWidth, ), ;]
[int, hash, =, 5, ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., autoWidth, ), ;, hash, =]
[int, hash, =, 5, ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., autoWidth, ), ;, hash, =]
[;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., autoWidth, ), ;, hash, =, HashUtilities, ., hashCode, (]
[=, HashUtilities, ., hashCode, (, hash, ,, this, ., autoWidth, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[=, HashUtilities, ., hashCode, (, hash, ,, this, ., autoWidth, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[hash, ,, this, ., autoWidth, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalPositionFactor, ), ;]
[this, ., autoWidth, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalPositionFactor, ), ;, hash, =]
[this, ., autoWidth, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalPositionFactor, ), ;, hash, =]
[;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalPositionFactor, ), ;, hash, =, HashUtilities, ., hashCode, (]
[=, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalPositionFactor, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[=, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalPositionFactor, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[,, this, ., intervalPositionFactor, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., fixedIntervalWidth, ), ;, return]
