[;, private, final, Collection, <, SourceFile, >, srcs, ;, private, final, Collection, <, SourceFile, >, deps, ;, private, final, String]
[., getLogger, (, DepsGenerator, ., class, ., getName, (, ), ), ;, private, final, Collection, <, SourceFile, >, srcs, ;]
[), ;, private, final, Collection, <, SourceFile, >, srcs, ;, private, final, Collection, <, SourceFile, >, deps, ;, private, final]
[., getName, (, ), ), ;, private, final, Collection, <, SourceFile, >, srcs, ;, private, final, Collection, <, SourceFile, >]
[;, static, final, DiagnosticType, NEVER_PROVIDED_ERROR, =, DiagnosticType, ., error, (, "DEPS_NEVER_PROVIDED", ,, "Namespace \"{0}\" is required but never provided.", ), ;, static, final, DiagnosticType, DUPE_PROVIDES_WARNING, =]
[., warning, (, "DEPS_SAME_FILE", ,, "Namespace \"{0}\" is both required and provided in the same file.", ), ;, static, final, DiagnosticType, NEVER_PROVIDED_ERROR, =, DiagnosticType, ., error, (, "DEPS_NEVER_PROVIDED", ,, "Namespace \"{0}\" is required but never provided."]
[,, "Namespace \"{0}\" is both required and provided in the same file.", ), ;, static, final, DiagnosticType, NEVER_PROVIDED_ERROR, =, DiagnosticType, ., error, (, "DEPS_NEVER_PROVIDED", ,, "Namespace \"{0}\" is required but never provided.", ), ;, static, final]
[), ;, static, final, DiagnosticType, NEVER_PROVIDED_ERROR, =, DiagnosticType, ., error, (, "DEPS_NEVER_PROVIDED", ,, "Namespace \"{0}\" is required but never provided.", ), ;, static, final, DiagnosticType, DUPE_PROVIDES_WARNING]
[;, static, final, DiagnosticType, DUPE_PROVIDES_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_PROVIDES", ,, "Multiple calls to goog.provide(\"{0}\")", ), ;, static, final, DiagnosticType, MULTIPLE_PROVIDES_ERROR, =]
[., error, (, "DEPS_NEVER_PROVIDED", ,, "Namespace \"{0}\" is required but never provided.", ), ;, static, final, DiagnosticType, DUPE_PROVIDES_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_PROVIDES", ,, "Multiple calls to goog.provide(\"{0}\")"]
[,, "Namespace \"{0}\" is required but never provided.", ), ;, static, final, DiagnosticType, DUPE_PROVIDES_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_PROVIDES", ,, "Multiple calls to goog.provide(\"{0}\")", ), ;, static, final]
[), ;, static, final, DiagnosticType, DUPE_PROVIDES_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_PROVIDES", ,, "Multiple calls to goog.provide(\"{0}\")", ), ;, static, final, DiagnosticType, MULTIPLE_PROVIDES_ERROR]
[;, static, final, DiagnosticType, MULTIPLE_PROVIDES_ERROR, =, DiagnosticType, ., error, (, "DEPS_DUPE_PROVIDES", ,, "Namespace \"{0}\" is already provided in other file {1}", ), ;, static, final, DiagnosticType, DUPE_REQUIRE_WARNING, =]
[., warning, (, "DEPS_DUPE_PROVIDES", ,, "Multiple calls to goog.provide(\"{0}\")", ), ;, static, final, DiagnosticType, MULTIPLE_PROVIDES_ERROR, =, DiagnosticType, ., error, (, "DEPS_DUPE_PROVIDES", ,, "Namespace \"{0}\" is already provided in other file {1}"]
[,, "Multiple calls to goog.provide(\"{0}\")", ), ;, static, final, DiagnosticType, MULTIPLE_PROVIDES_ERROR, =, DiagnosticType, ., error, (, "DEPS_DUPE_PROVIDES", ,, "Namespace \"{0}\" is already provided in other file {1}", ), ;, static, final]
[), ;, static, final, DiagnosticType, MULTIPLE_PROVIDES_ERROR, =, DiagnosticType, ., error, (, "DEPS_DUPE_PROVIDES", ,, "Namespace \"{0}\" is already provided in other file {1}", ), ;, static, final, DiagnosticType, DUPE_REQUIRE_WARNING]
[;, static, final, DiagnosticType, DUPE_REQUIRE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_REQUIRES", ,, "Namespace \"{0}\" is required multiple times", ), ;, static, final, DiagnosticType, NO_DEPS_WARNING, =]
[., error, (, "DEPS_DUPE_PROVIDES", ,, "Namespace \"{0}\" is already provided in other file {1}", ), ;, static, final, DiagnosticType, DUPE_REQUIRE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_REQUIRES", ,, "Namespace \"{0}\" is required multiple times"]
[,, "Namespace \"{0}\" is already provided in other file {1}", ), ;, static, final, DiagnosticType, DUPE_REQUIRE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_REQUIRES", ,, "Namespace \"{0}\" is required multiple times", ), ;, static, final]
[), ;, static, final, DiagnosticType, DUPE_REQUIRE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_DUPE_REQUIRES", ,, "Namespace \"{0}\" is required multiple times", ), ;, static, final, DiagnosticType, NO_DEPS_WARNING]
[;, static, final, DiagnosticType, NO_DEPS_WARNING, =, DiagnosticType, ., warning, (, "DEPS_NO_DEPS", ,, "No dependencies found in file", ), ;, public, DepsGenerator, (, Collection, <]
[., warning, (, "DEPS_DUPE_REQUIRES", ,, "Namespace \"{0}\" is required multiple times", ), ;, static, final, DiagnosticType, NO_DEPS_WARNING, =, DiagnosticType, ., warning, (, "DEPS_NO_DEPS", ,, "No dependencies found in file"]
[,, "Namespace \"{0}\" is required multiple times", ), ;, static, final, DiagnosticType, NO_DEPS_WARNING, =, DiagnosticType, ., warning, (, "DEPS_NO_DEPS", ,, "No dependencies found in file", ), ;, public, DepsGenerator]
[), ;, static, final, DiagnosticType, NO_DEPS_WARNING, =, DiagnosticType, ., warning, (, "DEPS_NO_DEPS", ,, "No dependencies found in file", ), ;, public, DepsGenerator, (, Collection]
[;, public, DepsGenerator, (, Collection, <, SourceFile, >, deps, ,, Collection, <, SourceFile, >, srcs, ,, InclusionStrategy, mergeStrategy, ,, String]
[., warning, (, "DEPS_NO_DEPS", ,, "No dependencies found in file", ), ;, public, DepsGenerator, (, Collection, <, SourceFile, >, deps, ,, Collection, <, SourceFile]
[,, "No dependencies found in file", ), ;, public, DepsGenerator, (, Collection, <, SourceFile, >, deps, ,, Collection, <, SourceFile, >, srcs, ,, InclusionStrategy]
[), ;, public, DepsGenerator, (, Collection, <, SourceFile, >, deps, ,, Collection, <, SourceFile, >, srcs, ,, InclusionStrategy, mergeStrategy, ,]
[=, deps, ;, this, ., srcs, =, srcs, ;, this, ., mergeStrategy, =, mergeStrategy, ;, this, ., closurePathAbs, =, closurePathAbs]
[., deps, =, deps, ;, this, ., srcs, =, srcs, ;, this, ., mergeStrategy, =, mergeStrategy, ;, this, ., closurePathAbs]
[;, this, ., srcs, =, srcs, ;, this, ., mergeStrategy, =, mergeStrategy, ;, this, ., closurePathAbs, =, closurePathAbs, ;, this]
[=, srcs, ;, this, ., mergeStrategy, =, mergeStrategy, ;, this, ., closurePathAbs, =, closurePathAbs, ;, this, ., errorManager, =, errorManager]
[., srcs, =, srcs, ;, this, ., mergeStrategy, =, mergeStrategy, ;, this, ., closurePathAbs, =, closurePathAbs, ;, this, ., errorManager]
[;, this, ., mergeStrategy, =, mergeStrategy, ;, this, ., closurePathAbs, =, closurePathAbs, ;, this, ., errorManager, =, errorManager, ;, }]
[=, mergeStrategy, ;, this, ., closurePathAbs, =, closurePathAbs, ;, this, ., errorManager, =, errorManager, ;, }, public, String, computeDependencyCalls, (]
[., mergeStrategy, =, mergeStrategy, ;, this, ., closurePathAbs, =, closurePathAbs, ;, this, ., errorManager, =, errorManager, ;, }, public, String]
[;, this, ., closurePathAbs, =, closurePathAbs, ;, this, ., errorManager, =, errorManager, ;, }, public, String, computeDependencyCalls, (, ), throws]
[=, closurePathAbs, ;, this, ., errorManager, =, errorManager, ;, }, public, String, computeDependencyCalls, (, ), throws, IOException, {, Map, <]
[., closurePathAbs, =, closurePathAbs, ;, this, ., errorManager, =, errorManager, ;, }, public, String, computeDependencyCalls, (, ), throws, IOException, {]
[;, this, ., errorManager, =, errorManager, ;, }, public, String, computeDependencyCalls, (, ), throws, IOException, {, Map, <, String, ,]
[=, errorManager, ;, }, public, String, computeDependencyCalls, (, ), throws, IOException, {, Map, <, String, ,, DependencyInfo, >, depsFiles, =]
[., errorManager, =, errorManager, ;, }, public, String, computeDependencyCalls, (, ), throws, IOException, {, Map, <, String, ,, DependencyInfo, >]
[;, }, public, String, computeDependencyCalls, (, ), throws, IOException, {, Map, <, String, ,, DependencyInfo, >, depsFiles, =, parseDepsFiles, (]
[;, logger, ., fine, (, "preparsedFiles: ", +, depsFiles, ), ;, Map, <, String, ,, DependencyInfo, >, jsFiles, =, parseSources, (]
[;, Map, <, String, ,, DependencyInfo, >, jsFiles, =, parseSources, (, depsFiles, ., keySet, (, ), ), ;, if, (]
[., fine, (, "preparsedFiles: ", +, depsFiles, ), ;, Map, <, String, ,, DependencyInfo, >, jsFiles, =, parseSources, (, depsFiles, .]
[), ;, Map, <, String, ,, DependencyInfo, >, jsFiles, =, parseSources, (, depsFiles, ., keySet, (, ), ), ;, if]
[+, depsFiles, ), ;, Map, <, String, ,, DependencyInfo, >, jsFiles, =, parseSources, (, depsFiles, ., keySet, (, ), )]
[), ;, Map, <, String, ,, DependencyInfo, >, jsFiles, =, parseSources, (, depsFiles, ., keySet, (, ), ), ;, if]
[;, if, (, errorManager, ., getErrorCount, (, ), >, 0, ), {, return, null, ;, }, cleanUpDuplicatedFiles, (, depsFiles, ,]
[), ;, if, (, errorManager, ., getErrorCount, (, ), >, 0, ), {, return, null, ;, }, cleanUpDuplicatedFiles, (, depsFiles]
[., keySet, (, ), ), ;, if, (, errorManager, ., getErrorCount, (, ), >, 0, ), {, return, null, ;]
[), {, return, null, ;, }, cleanUpDuplicatedFiles, (, depsFiles, ,, jsFiles, ), ;, validateDependencies, (, depsFiles, ., values, (, )]
[>, 0, ), {, return, null, ;, }, cleanUpDuplicatedFiles, (, depsFiles, ,, jsFiles, ), ;, validateDependencies, (, depsFiles, ., values]
[., getErrorCount, (, ), >, 0, ), {, return, null, ;, }, cleanUpDuplicatedFiles, (, depsFiles, ,, jsFiles, ), ;, validateDependencies]
[), {, return, null, ;, }, cleanUpDuplicatedFiles, (, depsFiles, ,, jsFiles, ), ;, validateDependencies, (, depsFiles, ., values, (, )]
[;, }, cleanUpDuplicatedFiles, (, depsFiles, ,, jsFiles, ), ;, validateDependencies, (, depsFiles, ., values, (, ), ,, jsFiles, ., values]
[;, validateDependencies, (, depsFiles, ., values, (, ), ,, jsFiles, ., values, (, ), ), ;, if, (, errorManager, .]
[,, jsFiles, ), ;, validateDependencies, (, depsFiles, ., values, (, ), ,, jsFiles, ., values, (, ), ), ;, if]
[), ;, validateDependencies, (, depsFiles, ., values, (, ), ,, jsFiles, ., values, (, ), ), ;, if, (, errorManager]
[;, if, (, errorManager, ., getErrorCount, (, ), >, 0, ), {, return, null, ;, }, ByteArrayOutputStream, output, =, new]
[,, jsFiles, ., values, (, ), ), ;, if, (, errorManager, ., getErrorCount, (, ), >, 0, ), {, return]
[., values, (, ), ,, jsFiles, ., values, (, ), ), ;, if, (, errorManager, ., getErrorCount, (, ), >]
[), ;, if, (, errorManager, ., getErrorCount, (, ), >, 0, ), {, return, null, ;, }, ByteArrayOutputStream, output, =]
[., values, (, ), ), ;, if, (, errorManager, ., getErrorCount, (, ), >, 0, ), {, return, null, ;]
[), {, return, null, ;, }, ByteArrayOutputStream, output, =, new, ByteArrayOutputStream, (, ), ;, writeDepsContent, (, depsFiles, ,, jsFiles, ,]
[>, 0, ), {, return, null, ;, }, ByteArrayOutputStream, output, =, new, ByteArrayOutputStream, (, ), ;, writeDepsContent, (, depsFiles, ,]
[., getErrorCount, (, ), >, 0, ), {, return, null, ;, }, ByteArrayOutputStream, output, =, new, ByteArrayOutputStream, (, ), ;]
[), {, return, null, ;, }, ByteArrayOutputStream, output, =, new, ByteArrayOutputStream, (, ), ;, writeDepsContent, (, depsFiles, ,, jsFiles, ,]
[;, }, ByteArrayOutputStream, output, =, new, ByteArrayOutputStream, (, ), ;, writeDepsContent, (, depsFiles, ,, jsFiles, ,, new, PrintStream, (, output]
[;, writeDepsContent, (, depsFiles, ,, jsFiles, ,, new, PrintStream, (, output, ), ), ;, return, new, String, (, output, .]
[;, return, new, String, (, output, ., toByteArray, (, ), ), ;, }, protected, void, cleanUpDuplicatedFiles, (, Map, <, String]
[,, jsFiles, ,, new, PrintStream, (, output, ), ), ;, return, new, String, (, output, ., toByteArray, (, ), )]
[,, new, PrintStream, (, output, ), ), ;, return, new, String, (, output, ., toByteArray, (, ), ), ;, }]
[), ;, return, new, String, (, output, ., toByteArray, (, ), ), ;, }, protected, void, cleanUpDuplicatedFiles, (, Map, <]
[), ), ;, return, new, String, (, output, ., toByteArray, (, ), ), ;, }, protected, void, cleanUpDuplicatedFiles, (, Map]
[;, }, protected, void, cleanUpDuplicatedFiles, (, Map, <, String, ,, DependencyInfo, >, depsFiles, ,, Map, <, String, ,, DependencyInfo, >]
[), ;, }, protected, void, cleanUpDuplicatedFiles, (, Map, <, String, ,, DependencyInfo, >, depsFiles, ,, Map, <, String, ,, DependencyInfo]
[., toByteArray, (, ), ), ;, }, protected, void, cleanUpDuplicatedFiles, (, Map, <, String, ,, DependencyInfo, >, depsFiles, ,, Map]
[;, for, (, String, path, :, depsPathsCopy, ), {, if, (, mergeStrategy, !=, InclusionStrategy, ., WHEN_IN_SRCS, ), {, jsFiles, .]
[., newHashSet, (, depsFiles, ., keySet, (, ), ), ;, for, (, String, path, :, depsPathsCopy, ), {, if, (]
[), ;, for, (, String, path, :, depsPathsCopy, ), {, if, (, mergeStrategy, !=, InclusionStrategy, ., WHEN_IN_SRCS, ), {, jsFiles]
[., keySet, (, ), ), ;, for, (, String, path, :, depsPathsCopy, ), {, if, (, mergeStrategy, !=, InclusionStrategy, .]
[), {, if, (, mergeStrategy, !=, InclusionStrategy, ., WHEN_IN_SRCS, ), {, jsFiles, ., remove, (, path, ), ;, }, }]
[), {, jsFiles, ., remove, (, path, ), ;, }, }, for, (, String, path, :, jsFiles, ., keySet, (]
[!=, InclusionStrategy, ., WHEN_IN_SRCS, ), {, jsFiles, ., remove, (, path, ), ;, }, }, for, (, String, path, :]
[), {, jsFiles, ., remove, (, path, ), ;, }, }, for, (, String, path, :, jsFiles, ., keySet, (]
[., WHEN_IN_SRCS, ), {, jsFiles, ., remove, (, path, ), ;, }, }, for, (, String, path, :, jsFiles, .]
[;, }, }, for, (, String, path, :, jsFiles, ., keySet, (, ), ), {, depsFiles, ., remove, (, path]
[., remove, (, path, ), ;, }, }, for, (, String, path, :, jsFiles, ., keySet, (, ), ), {]
[), ;, }, }, for, (, String, path, :, jsFiles, ., keySet, (, ), ), {, depsFiles, ., remove, (]
[), {, depsFiles, ., remove, (, path, ), ;, }, }, private, void, validateDependencies, (, Iterable, <, DependencyInfo, >, preparsedFileDepedencies]
[., keySet, (, ), ), {, depsFiles, ., remove, (, path, ), ;, }, }, private, void, validateDependencies, (, Iterable]
[;, }, }, private, void, validateDependencies, (, Iterable, <, DependencyInfo, >, preparsedFileDepedencies, ,, Iterable, <, DependencyInfo, >, parsedFileDependencies, ), {]
[., remove, (, path, ), ;, }, }, private, void, validateDependencies, (, Iterable, <, DependencyInfo, >, preparsedFileDepedencies, ,, Iterable, <]
[), ;, }, }, private, void, validateDependencies, (, Iterable, <, DependencyInfo, >, preparsedFileDepedencies, ,, Iterable, <, DependencyInfo, >, parsedFileDependencies, )]
[;, addToProvideMap, (, preparsedFileDepedencies, ,, providesMap, ), ;, addToProvideMap, (, parsedFileDependencies, ,, providesMap, ), ;, for, (, DependencyInfo, depInfo, :]
[., newHashMap, (, ), ;, addToProvideMap, (, preparsedFileDepedencies, ,, providesMap, ), ;, addToProvideMap, (, parsedFileDependencies, ,, providesMap, ), ;, for]
[;, addToProvideMap, (, parsedFileDependencies, ,, providesMap, ), ;, for, (, DependencyInfo, depInfo, :, parsedFileDependencies, ), {, List, <, String, >]
[,, providesMap, ), ;, addToProvideMap, (, parsedFileDependencies, ,, providesMap, ), ;, for, (, DependencyInfo, depInfo, :, parsedFileDependencies, ), {, List]
[), ;, addToProvideMap, (, parsedFileDependencies, ,, providesMap, ), ;, for, (, DependencyInfo, depInfo, :, parsedFileDependencies, ), {, List, <, String]
[;, for, (, DependencyInfo, depInfo, :, parsedFileDependencies, ), {, List, <, String, >, requires, =, Lists, ., newArrayList, (, depInfo]
[,, providesMap, ), ;, for, (, DependencyInfo, depInfo, :, parsedFileDependencies, ), {, List, <, String, >, requires, =, Lists, .]
[), ;, for, (, DependencyInfo, depInfo, :, parsedFileDependencies, ), {, List, <, String, >, requires, =, Lists, ., newArrayList, (]
[), {, List, <, String, >, requires, =, Lists, ., newArrayList, (, depInfo, ., getRequires, (, ), ), ;, for]
[;, for, (, int, i, =, 0, ,, l, =, requires, ., size, (, ), ;, i, <, l, ;]
[., newArrayList, (, depInfo, ., getRequires, (, ), ), ;, for, (, int, i, =, 0, ,, l, =, requires]
[), ;, for, (, int, i, =, 0, ,, l, =, requires, ., size, (, ), ;, i, <, l]
[., getRequires, (, ), ), ;, for, (, int, i, =, 0, ,, l, =, requires, ., size, (, )]
[,, l, =, requires, ., size, (, ), ;, i, <, l, ;, ++, i, ), {, String, namespace, =]
[;, i, <, l, ;, ++, i, ), {, String, namespace, =, requires, ., get, (, i, ), ;, if]
[., size, (, ), ;, i, <, l, ;, ++, i, ), {, String, namespace, =, requires, ., get, (]
[;, ++, i, ), {, String, namespace, =, requires, ., get, (, i, ), ;, if, (, requires, ., subList]
[<, l, ;, ++, i, ), {, String, namespace, =, requires, ., get, (, i, ), ;, if, (, requires]
[;, ++, i, ), {, String, namespace, =, requires, ., get, (, i, ), ;, if, (, requires, ., subList]
[), {, String, namespace, =, requires, ., get, (, i, ), ;, if, (, requires, ., subList, (, i, +]
[), {, String, namespace, =, requires, ., get, (, i, ), ;, if, (, requires, ., subList, (, i, +]
[;, if, (, requires, ., subList, (, i, +, 1, ,, l, ), ., contains, (, namespace, ), ), {]
[., get, (, i, ), ;, if, (, requires, ., subList, (, i, +, 1, ,, l, ), ., contains]
[), ;, if, (, requires, ., subList, (, i, +, 1, ,, l, ), ., contains, (, namespace, ), )]
[), {, reportDuplicateRequire, (, namespace, ,, depInfo, ), ;, }, DependencyInfo, provider, =, providesMap, ., get, (, namespace, ), ;]
[., contains, (, namespace, ), ), {, reportDuplicateRequire, (, namespace, ,, depInfo, ), ;, }, DependencyInfo, provider, =, providesMap, .]
[., subList, (, i, +, 1, ,, l, ), ., contains, (, namespace, ), ), {, reportDuplicateRequire, (, namespace, ,]
[,, l, ), ., contains, (, namespace, ), ), {, reportDuplicateRequire, (, namespace, ,, depInfo, ), ;, }, DependencyInfo, provider]
[+, 1, ,, l, ), ., contains, (, namespace, ), ), {, reportDuplicateRequire, (, namespace, ,, depInfo, ), ;, }]
[,, l, ), ., contains, (, namespace, ), ), {, reportDuplicateRequire, (, namespace, ,, depInfo, ), ;, }, DependencyInfo, provider]
[), ., contains, (, namespace, ), ), {, reportDuplicateRequire, (, namespace, ,, depInfo, ), ;, }, DependencyInfo, provider, =, providesMap]
[), ), {, reportDuplicateRequire, (, namespace, ,, depInfo, ), ;, }, DependencyInfo, provider, =, providesMap, ., get, (, namespace, )]
[;, }, DependencyInfo, provider, =, providesMap, ., get, (, namespace, ), ;, if, (, provider, ==, null, ), {, reportUndefinedNamespace]
[,, depInfo, ), ;, }, DependencyInfo, provider, =, providesMap, ., get, (, namespace, ), ;, if, (, provider, ==, null]
[), ;, }, DependencyInfo, provider, =, providesMap, ., get, (, namespace, ), ;, if, (, provider, ==, null, ), {]
[;, if, (, provider, ==, null, ), {, reportUndefinedNamespace, (, namespace, ,, depInfo, ), ;, }, else, if, (, provider]
[., get, (, namespace, ), ;, if, (, provider, ==, null, ), {, reportUndefinedNamespace, (, namespace, ,, depInfo, ), ;]
[), ;, if, (, provider, ==, null, ), {, reportUndefinedNamespace, (, namespace, ,, depInfo, ), ;, }, else, if, (]
[), {, reportUndefinedNamespace, (, namespace, ,, depInfo, ), ;, }, else, if, (, provider, ==, depInfo, ), {, reportSameFile, (]
[==, null, ), {, reportUndefinedNamespace, (, namespace, ,, depInfo, ), ;, }, else, if, (, provider, ==, depInfo, ), {]
[), {, reportUndefinedNamespace, (, namespace, ,, depInfo, ), ;, }, else, if, (, provider, ==, depInfo, ), {, reportSameFile, (]
[;, }, else, if, (, provider, ==, depInfo, ), {, reportSameFile, (, namespace, ,, depInfo, ), ;, }, }, }]
[,, depInfo, ), ;, }, else, if, (, provider, ==, depInfo, ), {, reportSameFile, (, namespace, ,, depInfo, ), ;]
[), ;, }, else, if, (, provider, ==, depInfo, ), {, reportSameFile, (, namespace, ,, depInfo, ), ;, }, }]
[), {, reportSameFile, (, namespace, ,, depInfo, ), ;, }, }, }, }, private, void, reportSameFile, (, String, namespace, ,]
[==, depInfo, ), {, reportSameFile, (, namespace, ,, depInfo, ), ;, }, }, }, }, private, void, reportSameFile, (, String]
[), {, reportSameFile, (, namespace, ,, depInfo, ), ;, }, }, }, }, private, void, reportSameFile, (, String, namespace, ,]
[;, }, }, }, }, private, void, reportSameFile, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (]
[,, depInfo, ), ;, }, }, }, }, private, void, reportSameFile, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager]
[), ;, }, }, }, }, private, void, reportSameFile, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report]
[;, }, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, ., ERROR]
[., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,]
[,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,, SAME_FILE_WARNING, ,, namespace]
[., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,, SAME_FILE_WARNING]
[), ;, }, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, .]
[., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,, SAME_FILE_WARNING, ,, namespace, ), )]
[,, -, 1, ,, -, 1, ,, SAME_FILE_WARNING, ,, namespace, ), ), ;, }, private, void, reportUndefinedNamespace, (, String, namespace]
[., getName, (, ), ,, -, 1, ,, -, 1, ,, SAME_FILE_WARNING, ,, namespace, ), ), ;, }, private, void]
[,, -, 1, ,, SAME_FILE_WARNING, ,, namespace, ), ), ;, }, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo]
[,, -, 1, ,, SAME_FILE_WARNING, ,, namespace, ), ), ;, }, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo]
[,, SAME_FILE_WARNING, ,, namespace, ), ), ;, }, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager]
[,, SAME_FILE_WARNING, ,, namespace, ), ), ;, }, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager]
[,, namespace, ), ), ;, }, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report]
[), ), ;, }, private, void, reportUndefinedNamespace, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel]
[;, }, private, void, reportDuplicateProvide, (, String, namespace, ,, DependencyInfo, firstDep, ,, DependencyInfo, secondDep, ), {, if, (, firstDep, ==]
[., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,]
[,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,, NEVER_PROVIDED_ERROR, ,, namespace]
[., ERROR, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,, NEVER_PROVIDED_ERROR]
[), ;, }, private, void, reportDuplicateProvide, (, String, namespace, ,, DependencyInfo, firstDep, ,, DependencyInfo, secondDep, ), {, if, (, firstDep]
[., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,, NEVER_PROVIDED_ERROR, ,, namespace, ), )]
[,, -, 1, ,, -, 1, ,, NEVER_PROVIDED_ERROR, ,, namespace, ), ), ;, }, private, void, reportDuplicateProvide, (, String, namespace]
[., getName, (, ), ,, -, 1, ,, -, 1, ,, NEVER_PROVIDED_ERROR, ,, namespace, ), ), ;, }, private, void]
[,, -, 1, ,, NEVER_PROVIDED_ERROR, ,, namespace, ), ), ;, }, private, void, reportDuplicateProvide, (, String, namespace, ,, DependencyInfo, firstDep]
[,, -, 1, ,, NEVER_PROVIDED_ERROR, ,, namespace, ), ), ;, }, private, void, reportDuplicateProvide, (, String, namespace, ,, DependencyInfo, firstDep]
[,, NEVER_PROVIDED_ERROR, ,, namespace, ), ), ;, }, private, void, reportDuplicateProvide, (, String, namespace, ,, DependencyInfo, firstDep, ,, DependencyInfo, secondDep]
[,, NEVER_PROVIDED_ERROR, ,, namespace, ), ), ;, }, private, void, reportDuplicateProvide, (, String, namespace, ,, DependencyInfo, firstDep, ,, DependencyInfo, secondDep]
[,, namespace, ), ), ;, }, private, void, reportDuplicateProvide, (, String, namespace, ,, DependencyInfo, firstDep, ,, DependencyInfo, secondDep, ), {]
[), ), ;, }, private, void, reportDuplicateProvide, (, String, namespace, ,, DependencyInfo, firstDep, ,, DependencyInfo, secondDep, ), {, if, (]
[), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, firstDep, ., getName, (, ), ,]
[==, secondDep, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, firstDep, ., getName, (]
[), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, firstDep, ., getName, (, ), ,]
[;, }, else, {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, secondDep, ., getName, (]
[., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, firstDep, ., getName, (, ), ,, -, 1, ,]
[,, JSError, ., make, (, firstDep, ., getName, (, ), ,, -, 1, ,, -, 1, ,, DUPE_PROVIDES_WARNING, ,, namespace]
[., WARNING, ,, JSError, ., make, (, firstDep, ., getName, (, ), ,, -, 1, ,, -, 1, ,, DUPE_PROVIDES_WARNING]
[), ;, }, else, {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, secondDep, ., getName]
[., make, (, firstDep, ., getName, (, ), ,, -, 1, ,, -, 1, ,, DUPE_PROVIDES_WARNING, ,, namespace, ), )]
[,, -, 1, ,, -, 1, ,, DUPE_PROVIDES_WARNING, ,, namespace, ), ), ;, }, else, {, errorManager, ., report, (]
[., getName, (, ), ,, -, 1, ,, -, 1, ,, DUPE_PROVIDES_WARNING, ,, namespace, ), ), ;, }, else, {]
[,, -, 1, ,, DUPE_PROVIDES_WARNING, ,, namespace, ), ), ;, }, else, {, errorManager, ., report, (, CheckLevel, ., ERROR]
[,, -, 1, ,, DUPE_PROVIDES_WARNING, ,, namespace, ), ), ;, }, else, {, errorManager, ., report, (, CheckLevel, ., ERROR]
[,, DUPE_PROVIDES_WARNING, ,, namespace, ), ), ;, }, else, {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, .]
[,, DUPE_PROVIDES_WARNING, ,, namespace, ), ), ;, }, else, {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, .]
[,, namespace, ), ), ;, }, else, {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (]
[), ), ;, }, else, {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, secondDep, .]
[;, }, }, private, void, reportDuplicateRequire, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel, .]
[., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, secondDep, ., getName, (, ), ,, -, 1, ,]
[,, JSError, ., make, (, secondDep, ., getName, (, ), ,, -, 1, ,, -, 1, ,, MULTIPLE_PROVIDES_ERROR, ,, namespace]
[., ERROR, ,, JSError, ., make, (, secondDep, ., getName, (, ), ,, -, 1, ,, -, 1, ,, MULTIPLE_PROVIDES_ERROR]
[), ;, }, }, private, void, reportDuplicateRequire, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (, CheckLevel]
[., make, (, secondDep, ., getName, (, ), ,, -, 1, ,, -, 1, ,, MULTIPLE_PROVIDES_ERROR, ,, namespace, ,, firstDep]
[,, -, 1, ,, -, 1, ,, MULTIPLE_PROVIDES_ERROR, ,, namespace, ,, firstDep, ., getName, (, ), ), ), ;, }]
[., getName, (, ), ,, -, 1, ,, -, 1, ,, MULTIPLE_PROVIDES_ERROR, ,, namespace, ,, firstDep, ., getName, (, )]
[,, -, 1, ,, MULTIPLE_PROVIDES_ERROR, ,, namespace, ,, firstDep, ., getName, (, ), ), ), ;, }, }, private, void]
[,, -, 1, ,, MULTIPLE_PROVIDES_ERROR, ,, namespace, ,, firstDep, ., getName, (, ), ), ), ;, }, }, private, void]
[,, MULTIPLE_PROVIDES_ERROR, ,, namespace, ,, firstDep, ., getName, (, ), ), ), ;, }, }, private, void, reportDuplicateRequire, (, String]
[,, MULTIPLE_PROVIDES_ERROR, ,, namespace, ,, firstDep, ., getName, (, ), ), ), ;, }, }, private, void, reportDuplicateRequire, (, String]
[,, namespace, ,, firstDep, ., getName, (, ), ), ), ;, }, }, private, void, reportDuplicateRequire, (, String, namespace, ,]
[,, firstDep, ., getName, (, ), ), ), ;, }, }, private, void, reportDuplicateRequire, (, String, namespace, ,, DependencyInfo, depInfo]
[), ), ;, }, }, private, void, reportDuplicateRequire, (, String, namespace, ,, DependencyInfo, depInfo, ), {, errorManager, ., report, (]
[., getName, (, ), ), ), ;, }, }, private, void, reportDuplicateRequire, (, String, namespace, ,, DependencyInfo, depInfo, ), {]
[;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError, .]
[., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,]
[,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,, DUPE_REQUIRE_WARNING, ,, namespace]
[., WARNING, ,, JSError, ., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,, DUPE_REQUIRE_WARNING]
[), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,, JSError]
[., make, (, depInfo, ., getName, (, ), ,, -, 1, ,, -, 1, ,, DUPE_REQUIRE_WARNING, ,, namespace, ), )]
[,, -, 1, ,, -, 1, ,, DUPE_REQUIRE_WARNING, ,, namespace, ), ), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath]
[., getName, (, ), ,, -, 1, ,, -, 1, ,, DUPE_REQUIRE_WARNING, ,, namespace, ), ), ;, }, private, void]
[,, -, 1, ,, DUPE_REQUIRE_WARNING, ,, namespace, ), ), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager]
[,, -, 1, ,, DUPE_REQUIRE_WARNING, ,, namespace, ), ), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager]
[,, DUPE_REQUIRE_WARNING, ,, namespace, ), ), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager, ., report, (]
[,, DUPE_REQUIRE_WARNING, ,, namespace, ), ), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager, ., report, (]
[,, namespace, ), ), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager, ., report, (, CheckLevel, .]
[), ), ;, }, private, void, reportNoDepsInDepsFile, (, String, filePath, ), {, errorManager, ., report, (, CheckLevel, ., WARNING, ,]
[;, }, private, void, addToProvideMap, (, Iterable, <, DependencyInfo, >, depInfos, ,, Map, <, String, ,, DependencyInfo, >, providesMap, )]
[., report, (, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, -, 1, ,, -, 1, ,, NO_DEPS_WARNING]
[,, JSError, ., make, (, filePath, ,, -, 1, ,, -, 1, ,, NO_DEPS_WARNING, ), ), ;, }, private, void]
[., WARNING, ,, JSError, ., make, (, filePath, ,, -, 1, ,, -, 1, ,, NO_DEPS_WARNING, ), ), ;, }]
[), ;, }, private, void, addToProvideMap, (, Iterable, <, DependencyInfo, >, depInfos, ,, Map, <, String, ,, DependencyInfo, >, providesMap]
[., make, (, filePath, ,, -, 1, ,, -, 1, ,, NO_DEPS_WARNING, ), ), ;, }, private, void, addToProvideMap, (]
[,, -, 1, ,, -, 1, ,, NO_DEPS_WARNING, ), ), ;, }, private, void, addToProvideMap, (, Iterable, <, DependencyInfo, >]
[,, -, 1, ,, NO_DEPS_WARNING, ), ), ;, }, private, void, addToProvideMap, (, Iterable, <, DependencyInfo, >, depInfos, ,, Map]
[,, -, 1, ,, NO_DEPS_WARNING, ), ), ;, }, private, void, addToProvideMap, (, Iterable, <, DependencyInfo, >, depInfos, ,, Map]
[,, NO_DEPS_WARNING, ), ), ;, }, private, void, addToProvideMap, (, Iterable, <, DependencyInfo, >, depInfos, ,, Map, <, String, ,]
[,, NO_DEPS_WARNING, ), ), ;, }, private, void, addToProvideMap, (, Iterable, <, DependencyInfo, >, depInfos, ,, Map, <, String, ,]
[), ), ;, }, private, void, addToProvideMap, (, Iterable, <, DependencyInfo, >, depInfos, ,, Map, <, String, ,, DependencyInfo, >]
[), {, for, (, String, provide, :, depInfo, ., getProvides, (, ), ), {, DependencyInfo, prevValue, =, providesMap, ., put]
[), {, DependencyInfo, prevValue, =, providesMap, ., put, (, provide, ,, depInfo, ), ;, if, (, prevValue, !=, null, )]
[., getProvides, (, ), ), {, DependencyInfo, prevValue, =, providesMap, ., put, (, provide, ,, depInfo, ), ;, if, (]
[;, if, (, prevValue, !=, null, ), {, reportDuplicateProvide, (, provide, ,, prevValue, ,, depInfo, ), ;, }, }, }]
[., put, (, provide, ,, depInfo, ), ;, if, (, prevValue, !=, null, ), {, reportDuplicateProvide, (, provide, ,, prevValue]
[,, depInfo, ), ;, if, (, prevValue, !=, null, ), {, reportDuplicateProvide, (, provide, ,, prevValue, ,, depInfo, ), ;]
[), ;, if, (, prevValue, !=, null, ), {, reportDuplicateProvide, (, provide, ,, prevValue, ,, depInfo, ), ;, }, }]
[), {, reportDuplicateProvide, (, provide, ,, prevValue, ,, depInfo, ), ;, }, }, }, }, protected, DepsFileParser, createDepsFileParser, (, )]
[!=, null, ), {, reportDuplicateProvide, (, provide, ,, prevValue, ,, depInfo, ), ;, }, }, }, }, protected, DepsFileParser, createDepsFileParser]
[), {, reportDuplicateProvide, (, provide, ,, prevValue, ,, depInfo, ), ;, }, }, }, }, protected, DepsFileParser, createDepsFileParser, (, )]
[;, }, }, }, }, protected, DepsFileParser, createDepsFileParser, (, ), {, DepsFileParser, depsParser, =, new, DepsFileParser, (, errorManager, ), ;]
[,, prevValue, ,, depInfo, ), ;, }, }, }, }, protected, DepsFileParser, createDepsFileParser, (, ), {, DepsFileParser, depsParser, =, new]
[,, depInfo, ), ;, }, }, }, }, protected, DepsFileParser, createDepsFileParser, (, ), {, DepsFileParser, depsParser, =, new, DepsFileParser, (]
[), ;, }, }, }, }, protected, DepsFileParser, createDepsFileParser, (, ), {, DepsFileParser, depsParser, =, new, DepsFileParser, (, errorManager, )]
[;, depsParser, ., setShortcutMode, (, true, ), ;, return, depsParser, ;, }, protected, boolean, shouldSkipDepsFile, (, SourceFile, file, ), {]
[), ;, depsParser, ., setShortcutMode, (, true, ), ;, return, depsParser, ;, }, protected, boolean, shouldSkipDepsFile, (, SourceFile, file, )]
[;, return, depsParser, ;, }, protected, boolean, shouldSkipDepsFile, (, SourceFile, file, ), {, return, false, ;, }, private, Map, <]
[., setShortcutMode, (, true, ), ;, return, depsParser, ;, }, protected, boolean, shouldSkipDepsFile, (, SourceFile, file, ), {, return, false]
[), ;, return, depsParser, ;, }, protected, boolean, shouldSkipDepsFile, (, SourceFile, file, ), {, return, false, ;, }, private, Map]
[;, }, protected, boolean, shouldSkipDepsFile, (, SourceFile, file, ), {, return, false, ;, }, private, Map, <, String, ,, DependencyInfo]
[;, }, private, Map, <, String, ,, DependencyInfo, >, parseDepsFiles, (, ), throws, IOException, {, DepsFileParser, depsParser, =, createDepsFileParser, (]
[;, Map, <, String, ,, DependencyInfo, >, depsFiles, =, Maps, ., newHashMap, (, ), ;, for, (, SourceFile, file, :]
[;, for, (, SourceFile, file, :, deps, ), {, if, (, !, shouldSkipDepsFile, (, file, ), ), {, List, <]
[., newHashMap, (, ), ;, for, (, SourceFile, file, :, deps, ), {, if, (, !, shouldSkipDepsFile, (, file, )]
[), {, if, (, !, shouldSkipDepsFile, (, file, ), ), {, List, <, DependencyInfo, >, depInfos, =, depsParser, ., parseFileReader]
[), {, List, <, DependencyInfo, >, depInfos, =, depsParser, ., parseFileReader, (, file, ., getName, (, ), ,, file, .]
[), {, List, <, DependencyInfo, >, depInfos, =, depsParser, ., parseFileReader, (, file, ., getName, (, ), ,, file, .]
[), ), {, List, <, DependencyInfo, >, depInfos, =, depsParser, ., parseFileReader, (, file, ., getName, (, ), ,, file]
[;, if, (, depInfos, ., isEmpty, (, ), ), {, reportNoDepsInDepsFile, (, file, ., getName, (, ), ), ;, }]
[., parseFileReader, (, file, ., getName, (, ), ,, file, ., getCodeReader, (, ), ), ;, if, (, depInfos, .]
[,, file, ., getCodeReader, (, ), ), ;, if, (, depInfos, ., isEmpty, (, ), ), {, reportNoDepsInDepsFile, (, file]
[., getName, (, ), ,, file, ., getCodeReader, (, ), ), ;, if, (, depInfos, ., isEmpty, (, ), )]
[), ;, if, (, depInfos, ., isEmpty, (, ), ), {, reportNoDepsInDepsFile, (, file, ., getName, (, ), ), ;]
[., getCodeReader, (, ), ), ;, if, (, depInfos, ., isEmpty, (, ), ), {, reportNoDepsInDepsFile, (, file, ., getName]
[), {, reportNoDepsInDepsFile, (, file, ., getName, (, ), ), ;, }, else, {, for, (, DependencyInfo, info, :, depInfos]
[., isEmpty, (, ), ), {, reportNoDepsInDepsFile, (, file, ., getName, (, ), ), ;, }, else, {, for, (]
[;, }, else, {, for, (, DependencyInfo, info, :, depInfos, ), {, depsFiles, ., put, (, info, ., getPathRelativeToClosureBase, (]
[), ;, }, else, {, for, (, DependencyInfo, info, :, depInfos, ), {, depsFiles, ., put, (, info, ., getPathRelativeToClosureBase]
[., getName, (, ), ), ;, }, else, {, for, (, DependencyInfo, info, :, depInfos, ), {, depsFiles, ., put]
[), {, depsFiles, ., put, (, info, ., getPathRelativeToClosureBase, (, ), ,, info, ), ;, }, }, }, }, for]
[;, }, }, }, }, for, (, SourceFile, src, :, srcs, ), {, if, (, (, new, File, (, src]
[., put, (, info, ., getPathRelativeToClosureBase, (, ), ,, info, ), ;, }, }, }, }, for, (, SourceFile, src]
[,, info, ), ;, }, }, }, }, for, (, SourceFile, src, :, srcs, ), {, if, (, (, new]
[., getPathRelativeToClosureBase, (, ), ,, info, ), ;, }, }, }, }, for, (, SourceFile, src, :, srcs, ), {]
[), ;, }, }, }, }, for, (, SourceFile, src, :, srcs, ), {, if, (, (, new, File, (]
[), {, if, (, (, new, File, (, src, ., getName, (, ), ), ), ., exists, (, ), &&]
[), {, List, <, DependencyInfo, >, srcInfos, =, depsParser, ., parseFileReader, (, src, ., getName, (, ), ,, src, .]
[&&, !, shouldSkipDepsFile, (, src, ), ), {, List, <, DependencyInfo, >, srcInfos, =, depsParser, ., parseFileReader, (, src, .]
[., exists, (, ), &&, !, shouldSkipDepsFile, (, src, ), ), {, List, <, DependencyInfo, >, srcInfos, =, depsParser, .]
[), ., exists, (, ), &&, !, shouldSkipDepsFile, (, src, ), ), {, List, <, DependencyInfo, >, srcInfos, =, depsParser]
[), ), ., exists, (, ), &&, !, shouldSkipDepsFile, (, src, ), ), {, List, <, DependencyInfo, >, srcInfos, =]
[., getName, (, ), ), ), ., exists, (, ), &&, !, shouldSkipDepsFile, (, src, ), ), {, List, <]
[), {, List, <, DependencyInfo, >, srcInfos, =, depsParser, ., parseFileReader, (, src, ., getName, (, ), ,, src, .]
[), {, List, <, DependencyInfo, >, srcInfos, =, depsParser, ., parseFileReader, (, src, ., getName, (, ), ,, src, .]
[), ), {, List, <, DependencyInfo, >, srcInfos, =, depsParser, ., parseFileReader, (, src, ., getName, (, ), ,, src]
[;, for, (, DependencyInfo, info, :, srcInfos, ), {, depsFiles, ., put, (, info, ., getPathRelativeToClosureBase, (, ), ,, info]
[., parseFileReader, (, src, ., getName, (, ), ,, src, ., getCodeReader, (, ), ), ;, for, (, DependencyInfo, info]
[,, src, ., getCodeReader, (, ), ), ;, for, (, DependencyInfo, info, :, srcInfos, ), {, depsFiles, ., put, (]
[., getName, (, ), ,, src, ., getCodeReader, (, ), ), ;, for, (, DependencyInfo, info, :, srcInfos, ), {]
[), ;, for, (, DependencyInfo, info, :, srcInfos, ), {, depsFiles, ., put, (, info, ., getPathRelativeToClosureBase, (, ), ,]
[., getCodeReader, (, ), ), ;, for, (, DependencyInfo, info, :, srcInfos, ), {, depsFiles, ., put, (, info, .]
[), {, depsFiles, ., put, (, info, ., getPathRelativeToClosureBase, (, ), ,, info, ), ;, }, }, }, return, depsFiles]
[;, }, }, }, return, depsFiles, ;, }, private, Map, <, String, ,, DependencyInfo, >, parseSources, (, Set, <, String]
[., put, (, info, ., getPathRelativeToClosureBase, (, ), ,, info, ), ;, }, }, }, return, depsFiles, ;, }, private]
[,, info, ), ;, }, }, }, return, depsFiles, ;, }, private, Map, <, String, ,, DependencyInfo, >, parseSources, (]
[., getPathRelativeToClosureBase, (, ), ,, info, ), ;, }, }, }, return, depsFiles, ;, }, private, Map, <, String, ,]
[), ;, }, }, }, return, depsFiles, ;, }, private, Map, <, String, ,, DependencyInfo, >, parseSources, (, Set, <]
[;, }, private, Map, <, String, ,, DependencyInfo, >, parseSources, (, Set, <, String, >, preparsedFiles, ), throws, IOException, {]
[;, JsFileParser, jsParser, =, new, JsFileParser, (, errorManager, ), ;, for, (, SourceFile, file, :, srcs, ), {, String, closureRelativePath]
[., newHashMap, (, ), ;, JsFileParser, jsParser, =, new, JsFileParser, (, errorManager, ), ;, for, (, SourceFile, file, :, srcs]
[;, for, (, SourceFile, file, :, srcs, ), {, String, closureRelativePath, =, PathUtil, ., makeRelative, (, closurePathAbs, ,, PathUtil, .]
[), ;, for, (, SourceFile, file, :, srcs, ), {, String, closureRelativePath, =, PathUtil, ., makeRelative, (, closurePathAbs, ,, PathUtil]
[), {, String, closureRelativePath, =, PathUtil, ., makeRelative, (, closurePathAbs, ,, PathUtil, ., makeAbsolute, (, file, ., getName, (, )]
[;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||, !, preparsedFiles]
[., makeRelative, (, closurePathAbs, ,, PathUtil, ., makeAbsolute, (, file, ., getName, (, ), ), ), ;, logger, ., fine]
[,, PathUtil, ., makeAbsolute, (, file, ., getName, (, ), ), ), ;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath]
[), ;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||, !]
[., makeAbsolute, (, file, ., getName, (, ), ), ), ;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;]
[), ), ;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||]
[., getName, (, ), ), ), ;, logger, ., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (, InclusionStrategy, .]
[;, if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||, !, preparsedFiles, ., contains, (, closureRelativePath, ), ), {, DependencyInfo, depInfo]
[., fine, (, "Closure-relative path: ", +, closureRelativePath, ), ;, if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||, !, preparsedFiles, ., contains]
[), ;, if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||, !, preparsedFiles, ., contains, (, closureRelativePath, ), ), {, DependencyInfo]
[+, closureRelativePath, ), ;, if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||, !, preparsedFiles, ., contains, (, closureRelativePath, ), )]
[), ;, if, (, InclusionStrategy, ., WHEN_IN_SRCS, ==, mergeStrategy, ||, !, preparsedFiles, ., contains, (, closureRelativePath, ), ), {, DependencyInfo]
[), {, DependencyInfo, depInfo, =, jsParser, ., parseFile, (, file, ., getName, (, ), ,, closureRelativePath, ,, file, ., getCode]
[||, !, preparsedFiles, ., contains, (, closureRelativePath, ), ), {, DependencyInfo, depInfo, =, jsParser, ., parseFile, (, file, ., getName]
[==, mergeStrategy, ||, !, preparsedFiles, ., contains, (, closureRelativePath, ), ), {, DependencyInfo, depInfo, =, jsParser, ., parseFile, (, file]
[., WHEN_IN_SRCS, ==, mergeStrategy, ||, !, preparsedFiles, ., contains, (, closureRelativePath, ), ), {, DependencyInfo, depInfo, =, jsParser, ., parseFile]
[||, !, preparsedFiles, ., contains, (, closureRelativePath, ), ), {, DependencyInfo, depInfo, =, jsParser, ., parseFile, (, file, ., getName]
[), {, DependencyInfo, depInfo, =, jsParser, ., parseFile, (, file, ., getName, (, ), ,, closureRelativePath, ,, file, ., getCode]
[), {, DependencyInfo, depInfo, =, jsParser, ., parseFile, (, file, ., getName, (, ), ,, closureRelativePath, ,, file, ., getCode]
[., contains, (, closureRelativePath, ), ), {, DependencyInfo, depInfo, =, jsParser, ., parseFile, (, file, ., getName, (, ), ,]
[), ), {, DependencyInfo, depInfo, =, jsParser, ., parseFile, (, file, ., getName, (, ), ,, closureRelativePath, ,, file, .]
[;, file, ., clearCachedSource, (, ), ;, parsedFiles, ., put, (, closureRelativePath, ,, depInfo, ), ;, }, }, return, parsedFiles]
[., parseFile, (, file, ., getName, (, ), ,, closureRelativePath, ,, file, ., getCode, (, ), ), ;, file, .]
[,, closureRelativePath, ,, file, ., getCode, (, ), ), ;, file, ., clearCachedSource, (, ), ;, parsedFiles, ., put, (]
[., getName, (, ), ,, closureRelativePath, ,, file, ., getCode, (, ), ), ;, file, ., clearCachedSource, (, ), ;]
[,, file, ., getCode, (, ), ), ;, file, ., clearCachedSource, (, ), ;, parsedFiles, ., put, (, closureRelativePath, ,]
[), ;, file, ., clearCachedSource, (, ), ;, parsedFiles, ., put, (, closureRelativePath, ,, depInfo, ), ;, }, }, return]
[., getCode, (, ), ), ;, file, ., clearCachedSource, (, ), ;, parsedFiles, ., put, (, closureRelativePath, ,, depInfo, )]
[;, parsedFiles, ., put, (, closureRelativePath, ,, depInfo, ), ;, }, }, return, parsedFiles, ;, }, private, void, writeDepsContent, (]
[., clearCachedSource, (, ), ;, parsedFiles, ., put, (, closureRelativePath, ,, depInfo, ), ;, }, }, return, parsedFiles, ;, }]
[;, }, }, return, parsedFiles, ;, }, private, void, writeDepsContent, (, Map, <, String, ,, DependencyInfo, >, depsFiles, ,, Map]
[., put, (, closureRelativePath, ,, depInfo, ), ;, }, }, return, parsedFiles, ;, }, private, void, writeDepsContent, (, Map, <]
[,, depInfo, ), ;, }, }, return, parsedFiles, ;, }, private, void, writeDepsContent, (, Map, <, String, ,, DependencyInfo, >]
[), ;, }, }, return, parsedFiles, ;, }, private, void, writeDepsContent, (, Map, <, String, ,, DependencyInfo, >, depsFiles, ,]
[;, }, private, void, writeDepsContent, (, Map, <, String, ,, DependencyInfo, >, depsFiles, ,, Map, <, String, ,, DependencyInfo, >]
[;, if, (, mergeStrategy, ==, InclusionStrategy, ., ALWAYS, ), {, Multimap, <, String, ,, DependencyInfo, >, infosIndex, =, Multimaps, .]
[,, jsFiles, ., values, (, ), ), ;, if, (, mergeStrategy, ==, InclusionStrategy, ., ALWAYS, ), {, Multimap, <, String]
[), ;, if, (, mergeStrategy, ==, InclusionStrategy, ., ALWAYS, ), {, Multimap, <, String, ,, DependencyInfo, >, infosIndex, =, Multimaps]
[., values, (, ), ), ;, if, (, mergeStrategy, ==, InclusionStrategy, ., ALWAYS, ), {, Multimap, <, String, ,, DependencyInfo]
[), {, Multimap, <, String, ,, DependencyInfo, >, infosIndex, =, Multimaps, ., index, (, depsFiles, ., values, (, ), ,]
[==, InclusionStrategy, ., ALWAYS, ), {, Multimap, <, String, ,, DependencyInfo, >, infosIndex, =, Multimaps, ., index, (, depsFiles, .]
[), {, Multimap, <, String, ,, DependencyInfo, >, infosIndex, =, Multimaps, ., index, (, depsFiles, ., values, (, ), ,]
[., ALWAYS, ), {, Multimap, <, String, ,, DependencyInfo, >, infosIndex, =, Multimaps, ., index, (, depsFiles, ., values, (]
[;, for, (, String, depsPath, :, infosIndex, ., keySet, (, ), ), {, String, path, =, formatPathToDepsFile, (, depsPath, )]
[., index, (, depsFiles, ., values, (, ), ,, new, Function, <, DependencyInfo, ,, String, >, (, ), {, @]
[,, new, Function, <, DependencyInfo, ,, String, >, (, ), {, @, Override, public, String, apply, (, DependencyInfo, from, )]
[., values, (, ), ,, new, Function, <, DependencyInfo, ,, String, >, (, ), {, @, Override, public, String, apply]
[), ;, for, (, String, depsPath, :, infosIndex, ., keySet, (, ), ), {, String, path, =, formatPathToDepsFile, (, depsPath]
[;, }, }, ), ;, for, (, String, depsPath, :, infosIndex, ., keySet, (, ), ), {, String, path, =]
[., getName, (, ), ;, }, }, ), ;, for, (, String, depsPath, :, infosIndex, ., keySet, (, ), )]
[), {, String, path, =, formatPathToDepsFile, (, depsPath, ), ;, out, ., println, (, "\n// Included from: ", +, path, ), ;, writeDepInfos]
[., keySet, (, ), ), {, String, path, =, formatPathToDepsFile, (, depsPath, ), ;, out, ., println, (, "\n// Included from: ", +]
[;, out, ., println, (, "\n// Included from: ", +, path, ), ;, writeDepInfos, (, out, ,, infosIndex, ., get, (, depsPath, )]
[), ;, out, ., println, (, "\n// Included from: ", +, path, ), ;, writeDepInfos, (, out, ,, infosIndex, ., get, (, depsPath]
[;, writeDepInfos, (, out, ,, infosIndex, ., get, (, depsPath, ), ), ;, }, }, }, protected, String, formatPathToDepsFile, (]
[., println, (, "\n// Included from: ", +, path, ), ;, writeDepInfos, (, out, ,, infosIndex, ., get, (, depsPath, ), ), ;]
[), ;, writeDepInfos, (, out, ,, infosIndex, ., get, (, depsPath, ), ), ;, }, }, }, protected, String, formatPathToDepsFile]
[+, path, ), ;, writeDepInfos, (, out, ,, infosIndex, ., get, (, depsPath, ), ), ;, }, }, }, protected]
[), ;, writeDepInfos, (, out, ,, infosIndex, ., get, (, depsPath, ), ), ;, }, }, }, protected, String, formatPathToDepsFile]
[;, }, }, }, protected, String, formatPathToDepsFile, (, String, path, ), {, return, path, ;, }, private, void, writeDepInfos, (]
[,, infosIndex, ., get, (, depsPath, ), ), ;, }, }, }, protected, String, formatPathToDepsFile, (, String, path, ), {]
[), ;, }, }, }, protected, String, formatPathToDepsFile, (, String, path, ), {, return, path, ;, }, private, void, writeDepInfos]
[., get, (, depsPath, ), ), ;, }, }, }, protected, String, formatPathToDepsFile, (, String, path, ), {, return, path]
[), ), ;, }, }, }, protected, String, formatPathToDepsFile, (, String, path, ), {, return, path, ;, }, private, void]
[;, }, private, void, writeDepInfos, (, PrintStream, out, ,, Collection, <, DependencyInfo, >, depInfos, ), throws, IOException, {, for, (]
[), {, Collection, <, String, >, provides, =, depInfo, ., getProvides, (, ), ;, Collection, <, String, >, requires, =]
[;, Collection, <, String, >, requires, =, depInfo, ., getRequires, (, ), ;, out, ., print, (, "goog.addDependency('", +, depInfo]
[., getProvides, (, ), ;, Collection, <, String, >, requires, =, depInfo, ., getRequires, (, ), ;, out, ., print]
[;, out, ., print, (, "goog.addDependency('", +, depInfo, ., getPathRelativeToClosureBase, (, ), +, "', ", ), ;, writeJsArray, (, out, ,]
[., getRequires, (, ), ;, out, ., print, (, "goog.addDependency('", +, depInfo, ., getPathRelativeToClosureBase, (, ), +, "', ", ), ;]
[;, writeJsArray, (, out, ,, provides, ), ;, out, ., print, (, ", ", ), ;, writeJsArray, (, out, ,, requires]
[., print, (, "goog.addDependency('", +, depInfo, ., getPathRelativeToClosureBase, (, ), +, "', ", ), ;, writeJsArray, (, out, ,, provides, )]
[), ;, writeJsArray, (, out, ,, provides, ), ;, out, ., print, (, ", ", ), ;, writeJsArray, (, out, ,]
[+, "', ", ), ;, writeJsArray, (, out, ,, provides, ), ;, out, ., print, (, ", ", ), ;, writeJsArray, (]
[+, depInfo, ., getPathRelativeToClosureBase, (, ), +, "', ", ), ;, writeJsArray, (, out, ,, provides, ), ;, out, ., print]
[+, "', ", ), ;, writeJsArray, (, out, ,, provides, ), ;, out, ., print, (, ", ", ), ;, writeJsArray, (]
[., getPathRelativeToClosureBase, (, ), +, "', ", ), ;, writeJsArray, (, out, ,, provides, ), ;, out, ., print, (, ", "]
[), ;, writeJsArray, (, out, ,, provides, ), ;, out, ., print, (, ", ", ), ;, writeJsArray, (, out, ,]
[;, out, ., print, (, ", ", ), ;, writeJsArray, (, out, ,, requires, ), ;, out, ., println, (, ");"]
[,, provides, ), ;, out, ., print, (, ", ", ), ;, writeJsArray, (, out, ,, requires, ), ;, out, .]
[), ;, out, ., print, (, ", ", ), ;, writeJsArray, (, out, ,, requires, ), ;, out, ., println, (]
[;, writeJsArray, (, out, ,, requires, ), ;, out, ., println, (, ");", ), ;, }, }, private, static, void]
[., print, (, ", ", ), ;, writeJsArray, (, out, ,, requires, ), ;, out, ., println, (, ");", ), ;]
[), ;, writeJsArray, (, out, ,, requires, ), ;, out, ., println, (, ");", ), ;, }, }, private, static]
[;, out, ., println, (, ");", ), ;, }, }, private, static, void, writeJsArray, (, PrintStream, out, ,, Collection, <]
[,, requires, ), ;, out, ., println, (, ");", ), ;, }, }, private, static, void, writeJsArray, (, PrintStream, out]
[), ;, out, ., println, (, ");", ), ;, }, }, private, static, void, writeJsArray, (, PrintStream, out, ,, Collection]
[;, }, }, private, static, void, writeJsArray, (, PrintStream, out, ,, Collection, <, String, >, values, ), {, if, (]
[., println, (, ");", ), ;, }, }, private, static, void, writeJsArray, (, PrintStream, out, ,, Collection, <, String, >]
[), ;, }, }, private, static, void, writeJsArray, (, PrintStream, out, ,, Collection, <, String, >, values, ), {, if]
[), {, out, ., print, (, "[]", ), ;, }, else, {, out, ., print, (, "['", ), ;, out]
[., isEmpty, (, ), ), {, out, ., print, (, "[]", ), ;, }, else, {, out, ., print, (]
[;, }, else, {, out, ., print, (, "['", ), ;, out, ., print, (, Joiner, ., on, (, "', '"]
[., print, (, "[]", ), ;, }, else, {, out, ., print, (, "['", ), ;, out, ., print, (]
[), ;, }, else, {, out, ., print, (, "['", ), ;, out, ., print, (, Joiner, ., on, (]
[;, out, ., print, (, Joiner, ., on, (, "', '", ), ., join, (, values, ), ), ;, out, .]
[., print, (, "['", ), ;, out, ., print, (, Joiner, ., on, (, "', '", ), ., join, (, values]
[), ;, out, ., print, (, Joiner, ., on, (, "', '", ), ., join, (, values, ), ), ;, out]
[;, out, ., print, (, "']", ), ;, }, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, Collection, <, String]
[., print, (, Joiner, ., on, (, "', '", ), ., join, (, values, ), ), ;, out, ., print, (]
[), ;, out, ., print, (, "']", ), ;, }, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, Collection, <]
[., join, (, values, ), ), ;, out, ., print, (, "']", ), ;, }, }, static, List, <, SourceFile]
[., on, (, "', '", ), ., join, (, values, ), ), ;, out, ., print, (, "']", ), ;, }]
[), ., join, (, values, ), ), ;, out, ., print, (, "']", ), ;, }, }, static, List, <]
[), ), ;, out, ., print, (, "']", ), ;, }, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, Collection]
[;, }, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, Collection, <, String, >, paths, ), {, List, <, SourceFile]
[., print, (, "']", ), ;, }, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, Collection, <, String, >, paths]
[), ;, }, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, Collection, <, String, >, paths, ), {, List, <]
[;, for, (, String, path, :, paths, ), {, files, ., add, (, SourceFile, ., fromFile, (, path, ), )]
[., newArrayList, (, ), ;, for, (, String, path, :, paths, ), {, files, ., add, (, SourceFile, ., fromFile]
[), {, files, ., add, (, SourceFile, ., fromFile, (, path, ), ), ;, }, return, files, ;, }, static]
[;, }, return, files, ;, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, String, ..., paths, ), {, return, createSourceFilesFromPaths]
[., add, (, SourceFile, ., fromFile, (, path, ), ), ;, }, return, files, ;, }, static, List, <, SourceFile]
[), ;, }, return, files, ;, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, String, ..., paths, ), {, return]
[., fromFile, (, path, ), ), ;, }, return, files, ;, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, String]
[), ), ;, }, return, files, ;, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, String, ..., paths, ), {]
[;, }, static, List, <, SourceFile, >, createSourceFilesFromPaths, (, String, ..., paths, ), {, return, createSourceFilesFromPaths, (, Arrays, ., asList]
[;, }, }]
[), ;, }, }]
[., asList, (, paths, ), ), ;, }, }]
[), ), ;, }, }]
