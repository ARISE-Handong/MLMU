[;, private, final, boolean, late, ;, PeepholeReplaceKnownMethods, (, boolean, late, ), {, this, ., late, =, late, ;, }, @]
[), ;, private, final, boolean, late, ;, PeepholeReplaceKnownMethods, (, boolean, late, ), {, this, ., late, =, late, ;, }]
[=, late, ;, }, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, subtree, ., isCall, (, )]
[., late, =, late, ;, }, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, subtree, ., isCall]
[;, }, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, subtree, ., isCall, (, ), ), {]
[), {, return, tryFoldKnownMethods, (, subtree, ), ;, }, return, subtree, ;, }, private, Node, tryFoldKnownMethods, (, Node, subtree, )]
[., isCall, (, ), ), {, return, tryFoldKnownMethods, (, subtree, ), ;, }, return, subtree, ;, }, private, Node, tryFoldKnownMethods]
[;, }, return, subtree, ;, }, private, Node, tryFoldKnownMethods, (, Node, subtree, ), {, subtree, =, tryFoldArrayJoin, (, subtree, )]
[), ;, }, return, subtree, ;, }, private, Node, tryFoldKnownMethods, (, Node, subtree, ), {, subtree, =, tryFoldArrayJoin, (, subtree]
[;, }, private, Node, tryFoldKnownMethods, (, Node, subtree, ), {, subtree, =, tryFoldArrayJoin, (, subtree, ), ;, if, (, subtree]
[=, tryFoldArrayJoin, (, subtree, ), ;, if, (, subtree, ., isCall, (, ), ), {, Node, callTarget, =, subtree, .]
[;, if, (, subtree, ., isCall, (, ), ), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if]
[), ;, if, (, subtree, ., isCall, (, ), ), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;]
[), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ), {, return, subtree]
[., isCall, (, ), ), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null]
[;, if, (, callTarget, ==, null, ), {, return, subtree, ;, }, if, (, NodeUtil, ., isGet, (, callTarget, )]
[., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ), {, return, subtree, ;, }, if, (, NodeUtil, .]
[), {, return, subtree, ;, }, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, subtree, =, tryFoldKnownStringMethods, (]
[==, null, ), {, return, subtree, ;, }, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, subtree, =]
[), {, return, subtree, ;, }, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, subtree, =, tryFoldKnownStringMethods, (]
[;, }, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, subtree, =, tryFoldKnownStringMethods, (, subtree, ), ;, }]
[), {, subtree, =, tryFoldKnownStringMethods, (, subtree, ), ;, }, else, {, subtree, =, tryFoldKnownNumericMethods, (, subtree, ), ;, }]
[., isGet, (, callTarget, ), ), {, subtree, =, tryFoldKnownStringMethods, (, subtree, ), ;, }, else, {, subtree, =, tryFoldKnownNumericMethods]
[), ), {, subtree, =, tryFoldKnownStringMethods, (, subtree, ), ;, }, else, {, subtree, =, tryFoldKnownNumericMethods, (, subtree, ), ;]
[=, tryFoldKnownStringMethods, (, subtree, ), ;, }, else, {, subtree, =, tryFoldKnownNumericMethods, (, subtree, ), ;, }, }, return, subtree]
[;, }, else, {, subtree, =, tryFoldKnownNumericMethods, (, subtree, ), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownStringMethods]
[), ;, }, else, {, subtree, =, tryFoldKnownNumericMethods, (, subtree, ), ;, }, }, return, subtree, ;, }, private, Node]
[=, tryFoldKnownNumericMethods, (, subtree, ), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownStringMethods, (, Node, subtree, ), {]
[;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownStringMethods, (, Node, subtree, ), {, Preconditions, ., checkArgument, (, subtree]
[), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownStringMethods, (, Node, subtree, ), {, Preconditions, ., checkArgument, (]
[;, }, private, Node, tryFoldKnownStringMethods, (, Node, subtree, ), {, Preconditions, ., checkArgument, (, subtree, ., isCall, (, ), )]
[;, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ), {, return, subtree, ;]
[., checkArgument, (, subtree, ., isCall, (, ), ), ;, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if]
[), ;, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ), {, return, subtree]
[., isCall, (, ), ), ;, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null]
[;, if, (, callTarget, ==, null, ), {, return, subtree, ;, }, if, (, !, NodeUtil, ., isGet, (, callTarget]
[., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ), {, return, subtree, ;, }, if, (, !, NodeUtil]
[), {, return, subtree, ;, }, if, (, !, NodeUtil, ., isGet, (, callTarget, ), ), {, return, subtree, ;]
[==, null, ), {, return, subtree, ;, }, if, (, !, NodeUtil, ., isGet, (, callTarget, ), ), {, return]
[), {, return, subtree, ;, }, if, (, !, NodeUtil, ., isGet, (, callTarget, ), ), {, return, subtree, ;]
[;, }, if, (, !, NodeUtil, ., isGet, (, callTarget, ), ), {, return, subtree, ;, }, Node, stringNode, =]
[), {, return, subtree, ;, }, Node, stringNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, stringNode, .]
[), {, return, subtree, ;, }, Node, stringNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, stringNode, .]
[., isGet, (, callTarget, ), ), {, return, subtree, ;, }, Node, stringNode, =, callTarget, ., getFirstChild, (, ), ;]
[), ), {, return, subtree, ;, }, Node, stringNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, stringNode]
[;, }, Node, stringNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, stringNode, ., getNext, (, ), ;]
[;, Node, functionName, =, stringNode, ., getNext, (, ), ;, if, (, (, !, stringNode, ., isString, (, ), )]
[., getFirstChild, (, ), ;, Node, functionName, =, stringNode, ., getNext, (, ), ;, if, (, (, !, stringNode, .]
[;, if, (, (, !, stringNode, ., isString, (, ), ), ||, (, !, functionName, ., isString, (, ), )]
[., getNext, (, ), ;, if, (, (, !, stringNode, ., isString, (, ), ), ||, (, !, functionName, .]
[), {, return, subtree, ;, }, String, functionNameString, =, functionName, ., getString, (, ), ;, Node, firstArg, =, callTarget, .]
[||, (, !, functionName, ., isString, (, ), ), ), {, return, subtree, ;, }, String, functionNameString, =, functionName, .]
[), ||, (, !, functionName, ., isString, (, ), ), ), {, return, subtree, ;, }, String, functionNameString, =, functionName]
[), ||, (, !, functionName, ., isString, (, ), ), ), {, return, subtree, ;, }, String, functionNameString, =, functionName]
[., isString, (, ), ), ||, (, !, functionName, ., isString, (, ), ), ), {, return, subtree, ;, }]
[), {, return, subtree, ;, }, String, functionNameString, =, functionName, ., getString, (, ), ;, Node, firstArg, =, callTarget, .]
[), ), {, return, subtree, ;, }, String, functionNameString, =, functionName, ., getString, (, ), ;, Node, firstArg, =, callTarget]
[), ), {, return, subtree, ;, }, String, functionNameString, =, functionName, ., getString, (, ), ;, Node, firstArg, =, callTarget]
[., isString, (, ), ), ), {, return, subtree, ;, }, String, functionNameString, =, functionName, ., getString, (, ), ;]
[;, }, String, functionNameString, =, functionName, ., getString, (, ), ;, Node, firstArg, =, callTarget, ., getNext, (, ), ;]
[;, Node, firstArg, =, callTarget, ., getNext, (, ), ;, if, (, functionNameString, ., equals, (, "split", ), ), {]
[., getString, (, ), ;, Node, firstArg, =, callTarget, ., getNext, (, ), ;, if, (, functionNameString, ., equals, (]
[;, if, (, functionNameString, ., equals, (, "split", ), ), {, subtree, =, tryFoldStringSplit, (, subtree, ,, stringNode, ,, firstArg]
[., getNext, (, ), ;, if, (, functionNameString, ., equals, (, "split", ), ), {, subtree, =, tryFoldStringSplit, (, subtree]
[), {, subtree, =, tryFoldStringSplit, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, firstArg, ==, null]
[., equals, (, "split", ), ), {, subtree, =, tryFoldStringSplit, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else]
[), ), {, subtree, =, tryFoldStringSplit, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, firstArg, ==]
[=, tryFoldStringSplit, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, firstArg, ==, null, ), {, if]
[;, }, else, if, (, firstArg, ==, null, ), {, if, (, functionNameString, ., equals, (, "toLowerCase", ), ), {]
[,, stringNode, ,, firstArg, ), ;, }, else, if, (, firstArg, ==, null, ), {, if, (, functionNameString, ., equals]
[,, firstArg, ), ;, }, else, if, (, firstArg, ==, null, ), {, if, (, functionNameString, ., equals, (, "toLowerCase"]
[), ;, }, else, if, (, firstArg, ==, null, ), {, if, (, functionNameString, ., equals, (, "toLowerCase", ), )]
[), {, if, (, functionNameString, ., equals, (, "toLowerCase", ), ), {, subtree, =, tryFoldStringToLowerCase, (, subtree, ,, stringNode, )]
[==, null, ), {, if, (, functionNameString, ., equals, (, "toLowerCase", ), ), {, subtree, =, tryFoldStringToLowerCase, (, subtree, ,]
[), {, if, (, functionNameString, ., equals, (, "toLowerCase", ), ), {, subtree, =, tryFoldStringToLowerCase, (, subtree, ,, stringNode, )]
[), {, subtree, =, tryFoldStringToLowerCase, (, subtree, ,, stringNode, ), ;, }, else, if, (, functionNameString, ., equals, (, "toUpperCase"]
[., equals, (, "toLowerCase", ), ), {, subtree, =, tryFoldStringToLowerCase, (, subtree, ,, stringNode, ), ;, }, else, if, (]
[), ), {, subtree, =, tryFoldStringToLowerCase, (, subtree, ,, stringNode, ), ;, }, else, if, (, functionNameString, ., equals, (]
[=, tryFoldStringToLowerCase, (, subtree, ,, stringNode, ), ;, }, else, if, (, functionNameString, ., equals, (, "toUpperCase", ), ), {]
[;, }, else, if, (, functionNameString, ., equals, (, "toUpperCase", ), ), {, subtree, =, tryFoldStringToUpperCase, (, subtree, ,, stringNode]
[,, stringNode, ), ;, }, else, if, (, functionNameString, ., equals, (, "toUpperCase", ), ), {, subtree, =, tryFoldStringToUpperCase, (]
[), ;, }, else, if, (, functionNameString, ., equals, (, "toUpperCase", ), ), {, subtree, =, tryFoldStringToUpperCase, (, subtree, ,]
[), {, subtree, =, tryFoldStringToUpperCase, (, subtree, ,, stringNode, ), ;, }, return, subtree, ;, }, else, if, (, NodeUtil]
[., equals, (, "toUpperCase", ), ), {, subtree, =, tryFoldStringToUpperCase, (, subtree, ,, stringNode, ), ;, }, return, subtree, ;]
[), ), {, subtree, =, tryFoldStringToUpperCase, (, subtree, ,, stringNode, ), ;, }, return, subtree, ;, }, else, if, (]
[=, tryFoldStringToUpperCase, (, subtree, ,, stringNode, ), ;, }, return, subtree, ;, }, else, if, (, NodeUtil, ., isImmutableValue, (]
[;, }, return, subtree, ;, }, else, if, (, NodeUtil, ., isImmutableValue, (, firstArg, ), ), {, if, (, functionNameString]
[,, stringNode, ), ;, }, return, subtree, ;, }, else, if, (, NodeUtil, ., isImmutableValue, (, firstArg, ), ), {]
[), ;, }, return, subtree, ;, }, else, if, (, NodeUtil, ., isImmutableValue, (, firstArg, ), ), {, if, (]
[;, }, else, if, (, NodeUtil, ., isImmutableValue, (, firstArg, ), ), {, if, (, functionNameString, ., equals, (, "indexOf"]
[), {, if, (, functionNameString, ., equals, (, "indexOf", ), ||, functionNameString, ., equals, (, "lastIndexOf", ), ), {, subtree]
[., isImmutableValue, (, firstArg, ), ), {, if, (, functionNameString, ., equals, (, "indexOf", ), ||, functionNameString, ., equals, (]
[), ), {, if, (, functionNameString, ., equals, (, "indexOf", ), ||, functionNameString, ., equals, (, "lastIndexOf", ), ), {]
[), {, subtree, =, tryFoldStringIndexOf, (, subtree, ,, functionNameString, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString]
[||, functionNameString, ., equals, (, "lastIndexOf", ), ), {, subtree, =, tryFoldStringIndexOf, (, subtree, ,, functionNameString, ,, stringNode, ,, firstArg]
[., equals, (, "indexOf", ), ||, functionNameString, ., equals, (, "lastIndexOf", ), ), {, subtree, =, tryFoldStringIndexOf, (, subtree, ,]
[), ||, functionNameString, ., equals, (, "lastIndexOf", ), ), {, subtree, =, tryFoldStringIndexOf, (, subtree, ,, functionNameString, ,, stringNode, ,]
[), {, subtree, =, tryFoldStringIndexOf, (, subtree, ,, functionNameString, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString]
[., equals, (, "lastIndexOf", ), ), {, subtree, =, tryFoldStringIndexOf, (, subtree, ,, functionNameString, ,, stringNode, ,, firstArg, ), ;]
[), ), {, subtree, =, tryFoldStringIndexOf, (, subtree, ,, functionNameString, ,, stringNode, ,, firstArg, ), ;, }, else, if, (]
[=, tryFoldStringIndexOf, (, subtree, ,, functionNameString, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (]
[;, }, else, if, (, functionNameString, ., equals, (, "substr", ), ), {, subtree, =, tryFoldStringSubstr, (, subtree, ,, stringNode]
[,, functionNameString, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "substr", ), ), {]
[,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "substr", ), ), {, subtree, =]
[,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "substr", ), ), {, subtree, =, tryFoldStringSubstr, (]
[), ;, }, else, if, (, functionNameString, ., equals, (, "substr", ), ), {, subtree, =, tryFoldStringSubstr, (, subtree, ,]
[), {, subtree, =, tryFoldStringSubstr, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals]
[., equals, (, "substr", ), ), {, subtree, =, tryFoldStringSubstr, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else]
[), ), {, subtree, =, tryFoldStringSubstr, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, .]
[=, tryFoldStringSubstr, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "substring", )]
[;, }, else, if, (, functionNameString, ., equals, (, "substring", ), ), {, subtree, =, tryFoldStringSubstring, (, subtree, ,, stringNode]
[,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "substring", ), ), {, subtree, =]
[,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "substring", ), ), {, subtree, =, tryFoldStringSubstring, (]
[), ;, }, else, if, (, functionNameString, ., equals, (, "substring", ), ), {, subtree, =, tryFoldStringSubstring, (, subtree, ,]
[), {, subtree, =, tryFoldStringSubstring, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals]
[., equals, (, "substring", ), ), {, subtree, =, tryFoldStringSubstring, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else]
[), ), {, subtree, =, tryFoldStringSubstring, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, .]
[=, tryFoldStringSubstring, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "charAt", )]
[;, }, else, if, (, functionNameString, ., equals, (, "charAt", ), ), {, subtree, =, tryFoldStringCharAt, (, subtree, ,, stringNode]
[,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "charAt", ), ), {, subtree, =]
[,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "charAt", ), ), {, subtree, =, tryFoldStringCharAt, (]
[), ;, }, else, if, (, functionNameString, ., equals, (, "charAt", ), ), {, subtree, =, tryFoldStringCharAt, (, subtree, ,]
[), {, subtree, =, tryFoldStringCharAt, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals]
[., equals, (, "charAt", ), ), {, subtree, =, tryFoldStringCharAt, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else]
[), ), {, subtree, =, tryFoldStringCharAt, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, .]
[=, tryFoldStringCharAt, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "charCodeAt", )]
[;, }, else, if, (, functionNameString, ., equals, (, "charCodeAt", ), ), {, subtree, =, tryFoldStringCharCodeAt, (, subtree, ,, stringNode]
[,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "charCodeAt", ), ), {, subtree, =]
[,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "charCodeAt", ), ), {, subtree, =, tryFoldStringCharCodeAt, (]
[), ;, }, else, if, (, functionNameString, ., equals, (, "charCodeAt", ), ), {, subtree, =, tryFoldStringCharCodeAt, (, subtree, ,]
[), {, subtree, =, tryFoldStringCharCodeAt, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, }, return, subtree, ;, }, private]
[., equals, (, "charCodeAt", ), ), {, subtree, =, tryFoldStringCharCodeAt, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, }]
[), ), {, subtree, =, tryFoldStringCharCodeAt, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, }, return, subtree, ;, }]
[=, tryFoldStringCharCodeAt, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownNumericMethods, (]
[;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownNumericMethods, (, Node, subtree, ), {, Preconditions, ., checkArgument, (, subtree]
[,, stringNode, ,, firstArg, ), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownNumericMethods, (, Node, subtree, ), {]
[,, firstArg, ), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownNumericMethods, (, Node, subtree, ), {, Preconditions, .]
[), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownNumericMethods, (, Node, subtree, ), {, Preconditions, ., checkArgument, (]
[;, }, private, Node, tryFoldKnownNumericMethods, (, Node, subtree, ), {, Preconditions, ., checkArgument, (, subtree, ., isCall, (, ), )]
[;, if, (, isASTNormalized, (, ), ), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, !]
[., checkArgument, (, subtree, ., isCall, (, ), ), ;, if, (, isASTNormalized, (, ), ), {, Node, callTarget, =]
[), ;, if, (, isASTNormalized, (, ), ), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (]
[., isCall, (, ), ), ;, if, (, isASTNormalized, (, ), ), {, Node, callTarget, =, subtree, ., getFirstChild, (]
[), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, !, callTarget, ., isName, (, ), )]
[;, if, (, !, callTarget, ., isName, (, ), ), {, return, subtree, ;, }, String, functionNameString, =, callTarget, .]
[., getFirstChild, (, ), ;, if, (, !, callTarget, ., isName, (, ), ), {, return, subtree, ;, }, String]
[), {, return, subtree, ;, }, String, functionNameString, =, callTarget, ., getString, (, ), ;, Node, firstArgument, =, callTarget, .]
[), {, return, subtree, ;, }, String, functionNameString, =, callTarget, ., getString, (, ), ;, Node, firstArgument, =, callTarget, .]
[., isName, (, ), ), {, return, subtree, ;, }, String, functionNameString, =, callTarget, ., getString, (, ), ;, Node]
[;, }, String, functionNameString, =, callTarget, ., getString, (, ), ;, Node, firstArgument, =, callTarget, ., getNext, (, ), ;]
[;, Node, firstArgument, =, callTarget, ., getNext, (, ), ;, if, (, (, firstArgument, !=, null, ), &&, (, firstArgument]
[., getString, (, ), ;, Node, firstArgument, =, callTarget, ., getNext, (, ), ;, if, (, (, firstArgument, !=, null]
[;, if, (, (, firstArgument, !=, null, ), &&, (, firstArgument, ., isString, (, ), ||, firstArgument, ., isNumber, (]
[., getNext, (, ), ;, if, (, (, firstArgument, !=, null, ), &&, (, firstArgument, ., isString, (, ), ||]
[), {, if, (, functionNameString, ., equals, (, "parseInt", ), ||, functionNameString, ., equals, (, "parseFloat", ), ), {, subtree]
[&&, (, firstArgument, ., isString, (, ), ||, firstArgument, ., isNumber, (, ), ), ), {, if, (, functionNameString, .]
[), &&, (, firstArgument, ., isString, (, ), ||, firstArgument, ., isNumber, (, ), ), ), {, if, (, functionNameString]
[!=, null, ), &&, (, firstArgument, ., isString, (, ), ||, firstArgument, ., isNumber, (, ), ), ), {, if]
[), &&, (, firstArgument, ., isString, (, ), ||, firstArgument, ., isNumber, (, ), ), ), {, if, (, functionNameString]
[), {, if, (, functionNameString, ., equals, (, "parseInt", ), ||, functionNameString, ., equals, (, "parseFloat", ), ), {, subtree]
[), ), {, if, (, functionNameString, ., equals, (, "parseInt", ), ||, functionNameString, ., equals, (, "parseFloat", ), ), {]
[||, firstArgument, ., isNumber, (, ), ), ), {, if, (, functionNameString, ., equals, (, "parseInt", ), ||, functionNameString, .]
[., isString, (, ), ||, firstArgument, ., isNumber, (, ), ), ), {, if, (, functionNameString, ., equals, (, "parseInt"]
[), ), {, if, (, functionNameString, ., equals, (, "parseInt", ), ||, functionNameString, ., equals, (, "parseFloat", ), ), {]
[., isNumber, (, ), ), ), {, if, (, functionNameString, ., equals, (, "parseInt", ), ||, functionNameString, ., equals, (]
[), {, subtree, =, tryFoldParseNumber, (, subtree, ,, functionNameString, ,, firstArgument, ), ;, }, }, }, return, subtree, ;, }]
[||, functionNameString, ., equals, (, "parseFloat", ), ), {, subtree, =, tryFoldParseNumber, (, subtree, ,, functionNameString, ,, firstArgument, ), ;]
[., equals, (, "parseInt", ), ||, functionNameString, ., equals, (, "parseFloat", ), ), {, subtree, =, tryFoldParseNumber, (, subtree, ,]
[), ||, functionNameString, ., equals, (, "parseFloat", ), ), {, subtree, =, tryFoldParseNumber, (, subtree, ,, functionNameString, ,, firstArgument, )]
[), {, subtree, =, tryFoldParseNumber, (, subtree, ,, functionNameString, ,, firstArgument, ), ;, }, }, }, return, subtree, ;, }]
[., equals, (, "parseFloat", ), ), {, subtree, =, tryFoldParseNumber, (, subtree, ,, functionNameString, ,, firstArgument, ), ;, }, }]
[), ), {, subtree, =, tryFoldParseNumber, (, subtree, ,, functionNameString, ,, firstArgument, ), ;, }, }, }, return, subtree, ;]
[=, tryFoldParseNumber, (, subtree, ,, functionNameString, ,, firstArgument, ), ;, }, }, }, return, subtree, ;, }, private, Node, tryFoldStringToLowerCase]
[;, }, }, }, return, subtree, ;, }, private, Node, tryFoldStringToLowerCase, (, Node, subtree, ,, Node, stringNode, ), {, String]
[,, functionNameString, ,, firstArgument, ), ;, }, }, }, return, subtree, ;, }, private, Node, tryFoldStringToLowerCase, (, Node, subtree, ,]
[,, firstArgument, ), ;, }, }, }, return, subtree, ;, }, private, Node, tryFoldStringToLowerCase, (, Node, subtree, ,, Node, stringNode]
[), ;, }, }, }, return, subtree, ;, }, private, Node, tryFoldStringToLowerCase, (, Node, subtree, ,, Node, stringNode, ), {]
[;, }, private, Node, tryFoldStringToLowerCase, (, Node, subtree, ,, Node, stringNode, ), {, String, lowered, =, stringNode, ., getString, (]
[;, Node, replacement, =, IR, ., string, (, lowered, ), ;, subtree, ., getParent, (, ), ., replaceChild, (, subtree]
[., toLowerCase, (, ROOT_LOCALE, ), ;, Node, replacement, =, IR, ., string, (, lowered, ), ;, subtree, ., getParent, (]
[., getString, (, ), ., toLowerCase, (, ROOT_LOCALE, ), ;, Node, replacement, =, IR, ., string, (, lowered, ), ;]
[), ;, Node, replacement, =, IR, ., string, (, lowered, ), ;, subtree, ., getParent, (, ), ., replaceChild, (]
[;, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement]
[., string, (, lowered, ), ;, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, ), ;, reportCodeChange]
[), ;, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, ), ;, reportCodeChange, (, ), ;, return]
[;, reportCodeChange, (, ), ;, return, replacement, ;, }, private, Node, tryFoldStringToUpperCase, (, Node, subtree, ,, Node, stringNode, ), {]
[., replaceChild, (, subtree, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, private, Node, tryFoldStringToUpperCase, (]
[., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }]
[,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, private, Node, tryFoldStringToUpperCase, (, Node, subtree, ,, Node]
[), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, private, Node, tryFoldStringToUpperCase, (, Node, subtree, ,, Node, stringNode, )]
[;, return, replacement, ;, }, private, Node, tryFoldStringToUpperCase, (, Node, subtree, ,, Node, stringNode, ), {, String, upped, =, stringNode]
[;, }, private, Node, tryFoldStringToUpperCase, (, Node, subtree, ,, Node, stringNode, ), {, String, upped, =, stringNode, ., getString, (]
[;, Node, replacement, =, IR, ., string, (, upped, ), ;, subtree, ., getParent, (, ), ., replaceChild, (, subtree]
[., toUpperCase, (, ROOT_LOCALE, ), ;, Node, replacement, =, IR, ., string, (, upped, ), ;, subtree, ., getParent, (]
[., getString, (, ), ., toUpperCase, (, ROOT_LOCALE, ), ;, Node, replacement, =, IR, ., string, (, upped, ), ;]
[), ;, Node, replacement, =, IR, ., string, (, upped, ), ;, subtree, ., getParent, (, ), ., replaceChild, (]
[;, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement]
[., string, (, upped, ), ;, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, ), ;, reportCodeChange]
[), ;, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, ), ;, reportCodeChange, (, ), ;, return]
[;, reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, normalizeNumericString, (, String, input, ), {, if, (, input]
[., replaceChild, (, subtree, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, normalizeNumericString, (]
[., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }]
[,, replacement, ), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, normalizeNumericString, (, String, input, ), {]
[), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, normalizeNumericString, (, String, input, ), {, if, (]
[;, return, replacement, ;, }, private, String, normalizeNumericString, (, String, input, ), {, if, (, input, ==, null, ||, input]
[;, }, private, String, normalizeNumericString, (, String, input, ), {, if, (, input, ==, null, ||, input, ., length, (]
[), {, return, input, ;, }, int, startIndex, =, 0, ,, endIndex, =, input, ., length, (, ), -, 1]
[||, input, ., length, (, ), ==, 0, ), {, return, input, ;, }, int, startIndex, =, 0, ,, endIndex]
[==, null, ||, input, ., length, (, ), ==, 0, ), {, return, input, ;, }, int, startIndex, =, 0]
[||, input, ., length, (, ), ==, 0, ), {, return, input, ;, }, int, startIndex, =, 0, ,, endIndex]
[), {, return, input, ;, }, int, startIndex, =, 0, ,, endIndex, =, input, ., length, (, ), -, 1]
[==, 0, ), {, return, input, ;, }, int, startIndex, =, 0, ,, endIndex, =, input, ., length, (, )]
[., length, (, ), ==, 0, ), {, return, input, ;, }, int, startIndex, =, 0, ,, endIndex, =, input]
[), {, return, input, ;, }, int, startIndex, =, 0, ,, endIndex, =, input, ., length, (, ), -, 1]
[;, }, int, startIndex, =, 0, ,, endIndex, =, input, ., length, (, ), -, 1, ;, while, (, startIndex]
[,, endIndex, =, input, ., length, (, ), -, 1, ;, while, (, startIndex, <, input, ., length, (, )]
[;, while, (, startIndex, <, input, ., length, (, ), &&, input, ., charAt, (, startIndex, ), ==, '0', &&]
[-, 1, ;, while, (, startIndex, <, input, ., length, (, ), &&, input, ., charAt, (, startIndex, ), ==]
[., length, (, ), -, 1, ;, while, (, startIndex, <, input, ., length, (, ), &&, input, ., charAt]
[;, while, (, startIndex, <, input, ., length, (, ), &&, input, ., charAt, (, startIndex, ), ==, '0', &&]
[), {, startIndex, ++, ;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, ), {, while, (]
[&&, input, ., charAt, (, startIndex, ), !=, '.', ), {, startIndex, ++, ;, }, if, (, input, ., indexOf]
[&&, input, ., charAt, (, startIndex, ), ==, '0', &&, input, ., charAt, (, startIndex, ), !=, '.', ), {]
[<, input, ., length, (, ), &&, input, ., charAt, (, startIndex, ), ==, '0', &&, input, ., charAt, (]
[&&, input, ., charAt, (, startIndex, ), ==, '0', &&, input, ., charAt, (, startIndex, ), !=, '.', ), {]
[., length, (, ), &&, input, ., charAt, (, startIndex, ), ==, '0', &&, input, ., charAt, (, startIndex, )]
[&&, input, ., charAt, (, startIndex, ), !=, '.', ), {, startIndex, ++, ;, }, if, (, input, ., indexOf]
[==, '0', &&, input, ., charAt, (, startIndex, ), !=, '.', ), {, startIndex, ++, ;, }, if, (, input]
[., charAt, (, startIndex, ), ==, '0', &&, input, ., charAt, (, startIndex, ), !=, '.', ), {, startIndex, ++]
[), ==, '0', &&, input, ., charAt, (, startIndex, ), !=, '.', ), {, startIndex, ++, ;, }, if, (]
[&&, input, ., charAt, (, startIndex, ), !=, '.', ), {, startIndex, ++, ;, }, if, (, input, ., indexOf]
[), {, startIndex, ++, ;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, ), {, while, (]
[!=, '.', ), {, startIndex, ++, ;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, ), {]
[., charAt, (, startIndex, ), !=, '.', ), {, startIndex, ++, ;, }, if, (, input, ., indexOf, (, '.']
[), !=, '.', ), {, startIndex, ++, ;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, )]
[), {, startIndex, ++, ;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, ), {, while, (]
[;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, ), {, while, (, endIndex, >=, 0, &&]
[++, ;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, ), {, while, (, endIndex, >=, 0]
[), {, while, (, endIndex, >=, 0, &&, input, ., charAt, (, endIndex, ), ==, '0', ), {, endIndex, --]
[>=, 0, ), {, while, (, endIndex, >=, 0, &&, input, ., charAt, (, endIndex, ), ==, '0', ), {]
[., indexOf, (, '.', ), >=, 0, ), {, while, (, endIndex, >=, 0, &&, input, ., charAt, (, endIndex]
[), >=, 0, ), {, while, (, endIndex, >=, 0, &&, input, ., charAt, (, endIndex, ), ==, '0', )]
[), {, while, (, endIndex, >=, 0, &&, input, ., charAt, (, endIndex, ), ==, '0', ), {, endIndex, --]
[), {, endIndex, --, ;, }, if, (, input, ., charAt, (, endIndex, ), ==, '.', ), {, endIndex, --]
[&&, input, ., charAt, (, endIndex, ), ==, '0', ), {, endIndex, --, ;, }, if, (, input, ., charAt]
[>=, 0, &&, input, ., charAt, (, endIndex, ), ==, '0', ), {, endIndex, --, ;, }, if, (, input]
[&&, input, ., charAt, (, endIndex, ), ==, '0', ), {, endIndex, --, ;, }, if, (, input, ., charAt]
[), {, endIndex, --, ;, }, if, (, input, ., charAt, (, endIndex, ), ==, '.', ), {, endIndex, --]
[==, '0', ), {, endIndex, --, ;, }, if, (, input, ., charAt, (, endIndex, ), ==, '.', ), {]
[., charAt, (, endIndex, ), ==, '0', ), {, endIndex, --, ;, }, if, (, input, ., charAt, (, endIndex]
[), ==, '0', ), {, endIndex, --, ;, }, if, (, input, ., charAt, (, endIndex, ), ==, '.', )]
[), {, endIndex, --, ;, }, if, (, input, ., charAt, (, endIndex, ), ==, '.', ), {, endIndex, --]
[;, }, if, (, input, ., charAt, (, endIndex, ), ==, '.', ), {, endIndex, --, ;, }, }, if]
[--, ;, }, if, (, input, ., charAt, (, endIndex, ), ==, '.', ), {, endIndex, --, ;, }, }]
[), {, endIndex, --, ;, }, }, if, (, startIndex, >=, endIndex, ), {, return, input, ;, }, return, input]
[==, '.', ), {, endIndex, --, ;, }, }, if, (, startIndex, >=, endIndex, ), {, return, input, ;, }]
[., charAt, (, endIndex, ), ==, '.', ), {, endIndex, --, ;, }, }, if, (, startIndex, >=, endIndex, )]
[), ==, '.', ), {, endIndex, --, ;, }, }, if, (, startIndex, >=, endIndex, ), {, return, input, ;]
[), {, endIndex, --, ;, }, }, if, (, startIndex, >=, endIndex, ), {, return, input, ;, }, return, input]
[;, }, }, if, (, startIndex, >=, endIndex, ), {, return, input, ;, }, return, input, ., substring, (, startIndex]
[--, ;, }, }, if, (, startIndex, >=, endIndex, ), {, return, input, ;, }, return, input, ., substring, (]
[), {, return, input, ;, }, return, input, ., substring, (, startIndex, ,, endIndex, +, 1, ), ;, }, private]
[>=, endIndex, ), {, return, input, ;, }, return, input, ., substring, (, startIndex, ,, endIndex, +, 1, ), ;]
[), {, return, input, ;, }, return, input, ., substring, (, startIndex, ,, endIndex, +, 1, ), ;, }, private]
[;, }, return, input, ., substring, (, startIndex, ,, endIndex, +, 1, ), ;, }, private, Node, tryFoldParseNumber, (, Node]
[;, }, private, Node, tryFoldParseNumber, (, Node, n, ,, String, functionName, ,, Node, firstArg, ), {, Preconditions, ., checkArgument, (]
[., substring, (, startIndex, ,, endIndex, +, 1, ), ;, }, private, Node, tryFoldParseNumber, (, Node, n, ,, String, functionName]
[,, endIndex, +, 1, ), ;, }, private, Node, tryFoldParseNumber, (, Node, n, ,, String, functionName, ,, Node, firstArg, )]
[), ;, }, private, Node, tryFoldParseNumber, (, Node, n, ,, String, functionName, ,, Node, firstArg, ), {, Preconditions, ., checkArgument]
[+, 1, ), ;, }, private, Node, tryFoldParseNumber, (, Node, n, ,, String, functionName, ,, Node, firstArg, ), {, Preconditions]
[), ;, }, private, Node, tryFoldParseNumber, (, Node, n, ,, String, functionName, ,, Node, firstArg, ), {, Preconditions, ., checkArgument]
[;, boolean, isParseInt, =, functionName, ., equals, (, "parseInt", ), ;, Node, secondArg, =, firstArg, ., getNext, (, ), ;]
[., checkArgument, (, n, ., isCall, (, ), ), ;, boolean, isParseInt, =, functionName, ., equals, (, "parseInt", ), ;]
[), ;, boolean, isParseInt, =, functionName, ., equals, (, "parseInt", ), ;, Node, secondArg, =, firstArg, ., getNext, (, )]
[., isCall, (, ), ), ;, boolean, isParseInt, =, functionName, ., equals, (, "parseInt", ), ;, Node, secondArg, =, firstArg]
[;, Node, secondArg, =, firstArg, ., getNext, (, ), ;, int, radix, =, 0, ;, if, (, secondArg, !=, null]
[., equals, (, "parseInt", ), ;, Node, secondArg, =, firstArg, ., getNext, (, ), ;, int, radix, =, 0, ;]
[), ;, Node, secondArg, =, firstArg, ., getNext, (, ), ;, int, radix, =, 0, ;, if, (, secondArg, !=]
[;, int, radix, =, 0, ;, if, (, secondArg, !=, null, ), {, if, (, !, isParseInt, ), {, return]
[., getNext, (, ), ;, int, radix, =, 0, ;, if, (, secondArg, !=, null, ), {, if, (, !]
[;, if, (, secondArg, !=, null, ), {, if, (, !, isParseInt, ), {, return, n, ;, }, if, (]
[), {, if, (, !, isParseInt, ), {, return, n, ;, }, if, (, secondArg, ., getNext, (, ), !=]
[!=, null, ), {, if, (, !, isParseInt, ), {, return, n, ;, }, if, (, secondArg, ., getNext, (]
[), {, if, (, !, isParseInt, ), {, return, n, ;, }, if, (, secondArg, ., getNext, (, ), !=]
[), {, return, n, ;, }, if, (, secondArg, ., getNext, (, ), !=, null, ||, !, secondArg, ., isNumber]
[), {, return, n, ;, }, if, (, secondArg, ., getNext, (, ), !=, null, ||, !, secondArg, ., isNumber]
[;, }, if, (, secondArg, ., getNext, (, ), !=, null, ||, !, secondArg, ., isNumber, (, ), ), {]
[), {, return, n, ;, }, else, {, double, tmpRadix, =, secondArg, ., getDouble, (, ), ;, if, (, tmpRadix]
[||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else, {, double, tmpRadix, =, secondArg, .]
[!=, null, ||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else, {, double, tmpRadix, =]
[., getNext, (, ), !=, null, ||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else]
[||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else, {, double, tmpRadix, =, secondArg, .]
[), {, return, n, ;, }, else, {, double, tmpRadix, =, secondArg, ., getDouble, (, ), ;, if, (, tmpRadix]
[), {, return, n, ;, }, else, {, double, tmpRadix, =, secondArg, ., getDouble, (, ), ;, if, (, tmpRadix]
[., isNumber, (, ), ), {, return, n, ;, }, else, {, double, tmpRadix, =, secondArg, ., getDouble, (, )]
[;, }, else, {, double, tmpRadix, =, secondArg, ., getDouble, (, ), ;, if, (, tmpRadix, !=, (, int, )]
[;, if, (, tmpRadix, !=, (, int, ), tmpRadix, ), return, n, ;, radix, =, (, int, ), tmpRadix, ;]
[., getDouble, (, ), ;, if, (, tmpRadix, !=, (, int, ), tmpRadix, ), return, n, ;, radix, =, (]
[), return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (, radix, <, 0, ||, radix, ==, 1]
[!=, (, int, ), tmpRadix, ), return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (, radix, <]
[), return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (, radix, <, 0, ||, radix, ==, 1]
[), return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (, radix, <, 0, ||, radix, ==, 1]
[;, radix, =, (, int, ), tmpRadix, ;, if, (, radix, <, 0, ||, radix, ==, 1, ||, radix, >]
[=, (, int, ), tmpRadix, ;, if, (, radix, <, 0, ||, radix, ==, 1, ||, radix, >, 36, )]
[;, if, (, radix, <, 0, ||, radix, ==, 1, ||, radix, >, 36, ), {, return, n, ;, }]
[;, if, (, radix, <, 0, ||, radix, ==, 1, ||, radix, >, 36, ), {, return, n, ;, }]
[), {, return, n, ;, }, }, }, String, stringVal, =, null, ;, Double, checkVal, ;, if, (, firstArg, .]
[||, radix, >, 36, ), {, return, n, ;, }, }, }, String, stringVal, =, null, ;, Double, checkVal, ;]
[||, radix, ==, 1, ||, radix, >, 36, ), {, return, n, ;, }, }, }, String, stringVal, =, null]
[<, 0, ||, radix, ==, 1, ||, radix, >, 36, ), {, return, n, ;, }, }, }, String, stringVal]
[||, radix, ==, 1, ||, radix, >, 36, ), {, return, n, ;, }, }, }, String, stringVal, =, null]
[||, radix, >, 36, ), {, return, n, ;, }, }, }, String, stringVal, =, null, ;, Double, checkVal, ;]
[==, 1, ||, radix, >, 36, ), {, return, n, ;, }, }, }, String, stringVal, =, null, ;, Double]
[||, radix, >, 36, ), {, return, n, ;, }, }, }, String, stringVal, =, null, ;, Double, checkVal, ;]
[), {, return, n, ;, }, }, }, String, stringVal, =, null, ;, Double, checkVal, ;, if, (, firstArg, .]
[>, 36, ), {, return, n, ;, }, }, }, String, stringVal, =, null, ;, Double, checkVal, ;, if, (]
[), {, return, n, ;, }, }, }, String, stringVal, =, null, ;, Double, checkVal, ;, if, (, firstArg, .]
[;, }, }, }, String, stringVal, =, null, ;, Double, checkVal, ;, if, (, firstArg, ., isNumber, (, ), )]
[;, Double, checkVal, ;, if, (, firstArg, ., isNumber, (, ), ), {, checkVal, =, NodeUtil, ., getNumberValue, (, firstArg]
[), {, checkVal, =, NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (, !, (, radix, ==, 0, ||, radix]
[., isNumber, (, ), ), {, checkVal, =, NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (, !, (, radix]
[=, NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (, !, (, radix, ==, 0, ||, radix, ==, 10, )]
[;, if, (, !, (, radix, ==, 0, ||, radix, ==, 10, ), &&, isParseInt, ), {, stringVal, =, String]
[., getNumberValue, (, firstArg, ), ;, if, (, !, (, radix, ==, 0, ||, radix, ==, 10, ), &&, isParseInt]
[), ;, if, (, !, (, radix, ==, 0, ||, radix, ==, 10, ), &&, isParseInt, ), {, stringVal, =]
[), {, stringVal, =, String, ., valueOf, (, checkVal, ., intValue, (, ), ), ;, }, else, {, Node, numericNode]
[&&, isParseInt, ), {, stringVal, =, String, ., valueOf, (, checkVal, ., intValue, (, ), ), ;, }, else, {]
[&&, isParseInt, ), {, stringVal, =, String, ., valueOf, (, checkVal, ., intValue, (, ), ), ;, }, else, {]
[), &&, isParseInt, ), {, stringVal, =, String, ., valueOf, (, checkVal, ., intValue, (, ), ), ;, }, else]
[||, radix, ==, 10, ), &&, isParseInt, ), {, stringVal, =, String, ., valueOf, (, checkVal, ., intValue, (, )]
[==, 0, ||, radix, ==, 10, ), &&, isParseInt, ), {, stringVal, =, String, ., valueOf, (, checkVal, ., intValue]
[||, radix, ==, 10, ), &&, isParseInt, ), {, stringVal, =, String, ., valueOf, (, checkVal, ., intValue, (, )]
[), &&, isParseInt, ), {, stringVal, =, String, ., valueOf, (, checkVal, ., intValue, (, ), ), ;, }, else]
[==, 10, ), &&, isParseInt, ), {, stringVal, =, String, ., valueOf, (, checkVal, ., intValue, (, ), ), ;]
[), &&, isParseInt, ), {, stringVal, =, String, ., valueOf, (, checkVal, ., intValue, (, ), ), ;, }, else]
[), {, stringVal, =, String, ., valueOf, (, checkVal, ., intValue, (, ), ), ;, }, else, {, Node, numericNode]
[=, String, ., valueOf, (, checkVal, ., intValue, (, ), ), ;, }, else, {, Node, numericNode, ;, if, (]
[;, }, else, {, Node, numericNode, ;, if, (, isParseInt, ), {, numericNode, =, IR, ., number, (, checkVal, .]
[., valueOf, (, checkVal, ., intValue, (, ), ), ;, }, else, {, Node, numericNode, ;, if, (, isParseInt, )]
[), ;, }, else, {, Node, numericNode, ;, if, (, isParseInt, ), {, numericNode, =, IR, ., number, (, checkVal]
[., intValue, (, ), ), ;, }, else, {, Node, numericNode, ;, if, (, isParseInt, ), {, numericNode, =, IR]
[), {, numericNode, =, IR, ., number, (, checkVal, ., intValue, (, ), ), ;, }, else, {, numericNode, =]
[=, IR, ., number, (, checkVal, ., intValue, (, ), ), ;, }, else, {, numericNode, =, IR, ., number]
[;, }, else, {, numericNode, =, IR, ., number, (, checkVal, ), ;, }, n, ., getParent, (, ), .]
[., number, (, checkVal, ., intValue, (, ), ), ;, }, else, {, numericNode, =, IR, ., number, (, checkVal]
[), ;, }, else, {, numericNode, =, IR, ., number, (, checkVal, ), ;, }, n, ., getParent, (, )]
[., intValue, (, ), ), ;, }, else, {, numericNode, =, IR, ., number, (, checkVal, ), ;, }, n]
[=, IR, ., number, (, checkVal, ), ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, numericNode]
[;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, numericNode, ), ;, reportCodeChange, (, ), ;, return]
[., number, (, checkVal, ), ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, numericNode, ), ;]
[), ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, numericNode, ), ;, reportCodeChange, (, ), ;]
[;, reportCodeChange, (, ), ;, return, numericNode, ;, }, }, else, {, stringVal, =, NodeUtil, ., getStringValue, (, firstArg, )]
[., replaceChild, (, n, ,, numericNode, ), ;, reportCodeChange, (, ), ;, return, numericNode, ;, }, }, else, {, stringVal]
[., getParent, (, ), ., replaceChild, (, n, ,, numericNode, ), ;, reportCodeChange, (, ), ;, return, numericNode, ;, }]
[,, numericNode, ), ;, reportCodeChange, (, ), ;, return, numericNode, ;, }, }, else, {, stringVal, =, NodeUtil, ., getStringValue]
[), ;, reportCodeChange, (, ), ;, return, numericNode, ;, }, }, else, {, stringVal, =, NodeUtil, ., getStringValue, (, firstArg]
[;, return, numericNode, ;, }, }, else, {, stringVal, =, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (, stringVal]
[;, }, }, else, {, stringVal, =, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (, stringVal, ==, null, )]
[=, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (, stringVal, ==, null, ), {, return, n, ;, }, checkVal]
[;, if, (, stringVal, ==, null, ), {, return, n, ;, }, checkVal, =, NodeUtil, ., getStringNumberValue, (, stringVal, )]
[., getStringValue, (, firstArg, ), ;, if, (, stringVal, ==, null, ), {, return, n, ;, }, checkVal, =, NodeUtil]
[), ;, if, (, stringVal, ==, null, ), {, return, n, ;, }, checkVal, =, NodeUtil, ., getStringNumberValue, (, stringVal]
[), {, return, n, ;, }, checkVal, =, NodeUtil, ., getStringNumberValue, (, stringVal, ), ;, if, (, checkVal, ==, null]
[==, null, ), {, return, n, ;, }, checkVal, =, NodeUtil, ., getStringNumberValue, (, stringVal, ), ;, if, (, checkVal]
[), {, return, n, ;, }, checkVal, =, NodeUtil, ., getStringNumberValue, (, stringVal, ), ;, if, (, checkVal, ==, null]
[;, }, checkVal, =, NodeUtil, ., getStringNumberValue, (, stringVal, ), ;, if, (, checkVal, ==, null, ), {, return, n]
[=, NodeUtil, ., getStringNumberValue, (, stringVal, ), ;, if, (, checkVal, ==, null, ), {, return, n, ;, }, stringVal]
[;, if, (, checkVal, ==, null, ), {, return, n, ;, }, stringVal, =, NodeUtil, ., trimJsWhiteSpace, (, stringVal, )]
[., getStringNumberValue, (, stringVal, ), ;, if, (, checkVal, ==, null, ), {, return, n, ;, }, stringVal, =, NodeUtil]
[), ;, if, (, checkVal, ==, null, ), {, return, n, ;, }, stringVal, =, NodeUtil, ., trimJsWhiteSpace, (, stringVal]
[), {, return, n, ;, }, stringVal, =, NodeUtil, ., trimJsWhiteSpace, (, stringVal, ), ;, if, (, stringVal, ., length]
[==, null, ), {, return, n, ;, }, stringVal, =, NodeUtil, ., trimJsWhiteSpace, (, stringVal, ), ;, if, (, stringVal]
[), {, return, n, ;, }, stringVal, =, NodeUtil, ., trimJsWhiteSpace, (, stringVal, ), ;, if, (, stringVal, ., length]
[;, }, stringVal, =, NodeUtil, ., trimJsWhiteSpace, (, stringVal, ), ;, if, (, stringVal, ., length, (, ), ==, 0]
[=, NodeUtil, ., trimJsWhiteSpace, (, stringVal, ), ;, if, (, stringVal, ., length, (, ), ==, 0, ), {, return]
[;, if, (, stringVal, ., length, (, ), ==, 0, ), {, return, n, ;, }, }, Node, newNode, ;]
[., trimJsWhiteSpace, (, stringVal, ), ;, if, (, stringVal, ., length, (, ), ==, 0, ), {, return, n, ;]
[), ;, if, (, stringVal, ., length, (, ), ==, 0, ), {, return, n, ;, }, }, Node, newNode]
[), {, return, n, ;, }, }, Node, newNode, ;, if, (, stringVal, ., equals, (, "0", ), ), {]
[==, 0, ), {, return, n, ;, }, }, Node, newNode, ;, if, (, stringVal, ., equals, (, "0", )]
[., length, (, ), ==, 0, ), {, return, n, ;, }, }, Node, newNode, ;, if, (, stringVal, .]
[), {, return, n, ;, }, }, Node, newNode, ;, if, (, stringVal, ., equals, (, "0", ), ), {]
[;, }, }, Node, newNode, ;, if, (, stringVal, ., equals, (, "0", ), ), {, newNode, =, IR, .]
[), {, newNode, =, IR, ., number, (, 0, ), ;, }, else, if, (, isParseInt, ), {, if, (]
[., equals, (, "0", ), ), {, newNode, =, IR, ., number, (, 0, ), ;, }, else, if, (]
[), ), {, newNode, =, IR, ., number, (, 0, ), ;, }, else, if, (, isParseInt, ), {, if]
[=, IR, ., number, (, 0, ), ;, }, else, if, (, isParseInt, ), {, if, (, radix, ==, 0]
[;, }, else, if, (, isParseInt, ), {, if, (, radix, ==, 0, ||, radix, ==, 16, ), {, if]
[., number, (, 0, ), ;, }, else, if, (, isParseInt, ), {, if, (, radix, ==, 0, ||, radix]
[), ;, }, else, if, (, isParseInt, ), {, if, (, radix, ==, 0, ||, radix, ==, 16, ), {]
[), {, if, (, radix, ==, 0, ||, radix, ==, 16, ), {, if, (, stringVal, ., length, (, )]
[), {, if, (, stringVal, ., length, (, ), >, 1, &&, stringVal, ., substring, (, 0, ,, 2, )]
[||, radix, ==, 16, ), {, if, (, stringVal, ., length, (, ), >, 1, &&, stringVal, ., substring, (]
[==, 0, ||, radix, ==, 16, ), {, if, (, stringVal, ., length, (, ), >, 1, &&, stringVal, .]
[||, radix, ==, 16, ), {, if, (, stringVal, ., length, (, ), >, 1, &&, stringVal, ., substring, (]
[), {, if, (, stringVal, ., length, (, ), >, 1, &&, stringVal, ., substring, (, 0, ,, 2, )]
[==, 16, ), {, if, (, stringVal, ., length, (, ), >, 1, &&, stringVal, ., substring, (, 0, ,]
[), {, if, (, stringVal, ., length, (, ), >, 1, &&, stringVal, ., substring, (, 0, ,, 2, )]
[), {, radix, =, 16, ;, stringVal, =, stringVal, ., substring, (, 2, ), ;, }, else, if, (, radix]
[&&, stringVal, ., substring, (, 0, ,, 2, ), ., equalsIgnoreCase, (, "0x", ), ), {, radix, =, 16, ;]
[>, 1, &&, stringVal, ., substring, (, 0, ,, 2, ), ., equalsIgnoreCase, (, "0x", ), ), {, radix, =]
[., length, (, ), >, 1, &&, stringVal, ., substring, (, 0, ,, 2, ), ., equalsIgnoreCase, (, "0x", )]
[&&, stringVal, ., substring, (, 0, ,, 2, ), ., equalsIgnoreCase, (, "0x", ), ), {, radix, =, 16, ;]
[), {, radix, =, 16, ;, stringVal, =, stringVal, ., substring, (, 2, ), ;, }, else, if, (, radix]
[., equalsIgnoreCase, (, "0x", ), ), {, radix, =, 16, ;, stringVal, =, stringVal, ., substring, (, 2, ), ;]
[., substring, (, 0, ,, 2, ), ., equalsIgnoreCase, (, "0x", ), ), {, radix, =, 16, ;, stringVal, =]
[,, 2, ), ., equalsIgnoreCase, (, "0x", ), ), {, radix, =, 16, ;, stringVal, =, stringVal, ., substring, (]
[), ., equalsIgnoreCase, (, "0x", ), ), {, radix, =, 16, ;, stringVal, =, stringVal, ., substring, (, 2, )]
[), ), {, radix, =, 16, ;, stringVal, =, stringVal, ., substring, (, 2, ), ;, }, else, if, (]
[=, 16, ;, stringVal, =, stringVal, ., substring, (, 2, ), ;, }, else, if, (, radix, ==, 0, )]
[;, stringVal, =, stringVal, ., substring, (, 2, ), ;, }, else, if, (, radix, ==, 0, ), {, if]
[=, stringVal, ., substring, (, 2, ), ;, }, else, if, (, radix, ==, 0, ), {, if, (, !]
[;, }, else, if, (, radix, ==, 0, ), {, if, (, !, isEcmaScript5OrGreater, (, ), &&, stringVal, ., substring]
[., substring, (, 2, ), ;, }, else, if, (, radix, ==, 0, ), {, if, (, !, isEcmaScript5OrGreater, (]
[), ;, }, else, if, (, radix, ==, 0, ), {, if, (, !, isEcmaScript5OrGreater, (, ), &&, stringVal, .]
[), {, if, (, !, isEcmaScript5OrGreater, (, ), &&, stringVal, ., substring, (, 0, ,, 1, ), ., equals, (]
[==, 0, ), {, if, (, !, isEcmaScript5OrGreater, (, ), &&, stringVal, ., substring, (, 0, ,, 1, ), .]
[), {, if, (, !, isEcmaScript5OrGreater, (, ), &&, stringVal, ., substring, (, 0, ,, 1, ), ., equals, (]
[), {, return, n, ;, }, radix, =, 10, ;, }, }, int, newVal, =, 0, ;, try, {, newVal]
[&&, stringVal, ., substring, (, 0, ,, 1, ), ., equals, (, "0", ), ), {, return, n, ;, }]
[&&, stringVal, ., substring, (, 0, ,, 1, ), ., equals, (, "0", ), ), {, return, n, ;, }]
[), {, return, n, ;, }, radix, =, 10, ;, }, }, int, newVal, =, 0, ;, try, {, newVal]
[., equals, (, "0", ), ), {, return, n, ;, }, radix, =, 10, ;, }, }, int, newVal, =]
[., substring, (, 0, ,, 1, ), ., equals, (, "0", ), ), {, return, n, ;, }, radix, =]
[,, 1, ), ., equals, (, "0", ), ), {, return, n, ;, }, radix, =, 10, ;, }, }]
[), ., equals, (, "0", ), ), {, return, n, ;, }, radix, =, 10, ;, }, }, int, newVal]
[), ), {, return, n, ;, }, radix, =, 10, ;, }, }, int, newVal, =, 0, ;, try, {]
[;, }, radix, =, 10, ;, }, }, int, newVal, =, 0, ;, try, {, newVal, =, Integer, ., parseInt]
[=, 10, ;, }, }, int, newVal, =, 0, ;, try, {, newVal, =, Integer, ., parseInt, (, stringVal, ,]
[;, }, }, int, newVal, =, 0, ;, try, {, newVal, =, Integer, ., parseInt, (, stringVal, ,, radix, )]
[;, try, {, newVal, =, Integer, ., parseInt, (, stringVal, ,, radix, ), ;, }, catch, (, NumberFormatException, e, )]
[=, Integer, ., parseInt, (, stringVal, ,, radix, ), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;]
[;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, newNode, =, IR, ., number, (, newVal, )]
[., parseInt, (, stringVal, ,, radix, ), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, newNode]
[,, radix, ), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, newNode, =, IR, ., number]
[), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, newNode, =, IR, ., number, (, newVal]
[;, }, newNode, =, IR, ., number, (, newVal, ), ;, }, else, {, String, normalizedNewVal, =, "0", ;, try]
[=, IR, ., number, (, newVal, ), ;, }, else, {, String, normalizedNewVal, =, "0", ;, try, {, double, newVal]
[;, }, else, {, String, normalizedNewVal, =, "0", ;, try, {, double, newVal, =, Double, ., parseDouble, (, stringVal, )]
[., number, (, newVal, ), ;, }, else, {, String, normalizedNewVal, =, "0", ;, try, {, double, newVal, =, Double]
[), ;, }, else, {, String, normalizedNewVal, =, "0", ;, try, {, double, newVal, =, Double, ., parseDouble, (, stringVal]
[;, try, {, double, newVal, =, Double, ., parseDouble, (, stringVal, ), ;, newNode, =, IR, ., number, (, newVal]
[;, newNode, =, IR, ., number, (, newVal, ), ;, normalizedNewVal, =, normalizeNumericString, (, String, ., valueOf, (, newVal, )]
[., parseDouble, (, stringVal, ), ;, newNode, =, IR, ., number, (, newVal, ), ;, normalizedNewVal, =, normalizeNumericString, (, String]
[), ;, newNode, =, IR, ., number, (, newVal, ), ;, normalizedNewVal, =, normalizeNumericString, (, String, ., valueOf, (, newVal]
[=, IR, ., number, (, newVal, ), ;, normalizedNewVal, =, normalizeNumericString, (, String, ., valueOf, (, newVal, ), ), ;]
[;, normalizedNewVal, =, normalizeNumericString, (, String, ., valueOf, (, newVal, ), ), ;, }, catch, (, NumberFormatException, e, ), {]
[., number, (, newVal, ), ;, normalizedNewVal, =, normalizeNumericString, (, String, ., valueOf, (, newVal, ), ), ;, }, catch]
[), ;, normalizedNewVal, =, normalizeNumericString, (, String, ., valueOf, (, newVal, ), ), ;, }, catch, (, NumberFormatException, e, )]
[=, normalizeNumericString, (, String, ., valueOf, (, newVal, ), ), ;, }, catch, (, NumberFormatException, e, ), {, return, n]
[;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, if, (, !, normalizeNumericString, (, stringVal, ), .]
[), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, if, (, !, normalizeNumericString, (, stringVal, )]
[., valueOf, (, newVal, ), ), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, if, (]
[), ), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, if, (, !, normalizeNumericString, (, stringVal]
[;, }, if, (, !, normalizeNumericString, (, stringVal, ), ., equals, (, normalizedNewVal, ), ), {, return, n, ;, }]
[), {, return, n, ;, }, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, ), ;]
[), {, return, n, ;, }, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, ), ;]
[., equals, (, normalizedNewVal, ), ), {, return, n, ;, }, }, n, ., getParent, (, ), ., replaceChild, (]
[), ., equals, (, normalizedNewVal, ), ), {, return, n, ;, }, }, n, ., getParent, (, ), ., replaceChild]
[), ), {, return, n, ;, }, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, )]
[;, }, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, ), ;, reportCodeChange, (, ), ;]
[;, reportCodeChange, (, ), ;, return, newNode, ;, }, private, Node, tryFoldStringIndexOf, (, Node, n, ,, String, functionName, ,, Node]
[., replaceChild, (, n, ,, newNode, ), ;, reportCodeChange, (, ), ;, return, newNode, ;, }, private, Node, tryFoldStringIndexOf, (]
[., getParent, (, ), ., replaceChild, (, n, ,, newNode, ), ;, reportCodeChange, (, ), ;, return, newNode, ;, }]
[,, newNode, ), ;, reportCodeChange, (, ), ;, return, newNode, ;, }, private, Node, tryFoldStringIndexOf, (, Node, n, ,, String]
[), ;, reportCodeChange, (, ), ;, return, newNode, ;, }, private, Node, tryFoldStringIndexOf, (, Node, n, ,, String, functionName, ,]
[;, return, newNode, ;, }, private, Node, tryFoldStringIndexOf, (, Node, n, ,, String, functionName, ,, Node, lstringNode, ,, Node, firstArg]
[;, }, private, Node, tryFoldStringIndexOf, (, Node, n, ,, String, functionName, ,, Node, lstringNode, ,, Node, firstArg, ), {, Preconditions]
[;, Preconditions, ., checkArgument, (, lstringNode, ., isString, (, ), ), ;, String, lstring, =, NodeUtil, ., getStringValue, (, lstringNode]
[., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, lstringNode, ., isString, (, ), )]
[), ;, Preconditions, ., checkArgument, (, lstringNode, ., isString, (, ), ), ;, String, lstring, =, NodeUtil, ., getStringValue, (]
[., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, lstringNode, ., isString, (, ), ), ;, String, lstring, =]
[;, String, lstring, =, NodeUtil, ., getStringValue, (, lstringNode, ), ;, boolean, isIndexOf, =, functionName, ., equals, (, "indexOf", )]
[., checkArgument, (, lstringNode, ., isString, (, ), ), ;, String, lstring, =, NodeUtil, ., getStringValue, (, lstringNode, ), ;]
[), ;, String, lstring, =, NodeUtil, ., getStringValue, (, lstringNode, ), ;, boolean, isIndexOf, =, functionName, ., equals, (, "indexOf"]
[., isString, (, ), ), ;, String, lstring, =, NodeUtil, ., getStringValue, (, lstringNode, ), ;, boolean, isIndexOf, =, functionName]
[;, boolean, isIndexOf, =, functionName, ., equals, (, "indexOf", ), ;, Node, secondArg, =, firstArg, ., getNext, (, ), ;]
[., getStringValue, (, lstringNode, ), ;, boolean, isIndexOf, =, functionName, ., equals, (, "indexOf", ), ;, Node, secondArg, =, firstArg]
[), ;, boolean, isIndexOf, =, functionName, ., equals, (, "indexOf", ), ;, Node, secondArg, =, firstArg, ., getNext, (, )]
[;, Node, secondArg, =, firstArg, ., getNext, (, ), ;, String, searchValue, =, NodeUtil, ., getStringValue, (, firstArg, ), ;]
[., equals, (, "indexOf", ), ;, Node, secondArg, =, firstArg, ., getNext, (, ), ;, String, searchValue, =, NodeUtil, .]
[), ;, Node, secondArg, =, firstArg, ., getNext, (, ), ;, String, searchValue, =, NodeUtil, ., getStringValue, (, firstArg, )]
[;, String, searchValue, =, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (, searchValue, ==, null, ), {, return, n]
[., getNext, (, ), ;, String, searchValue, =, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (, searchValue, ==, null]
[;, if, (, searchValue, ==, null, ), {, return, n, ;, }, int, fromIndex, =, isIndexOf, ?, 0, :, lstring]
[., getStringValue, (, firstArg, ), ;, if, (, searchValue, ==, null, ), {, return, n, ;, }, int, fromIndex, =]
[), ;, if, (, searchValue, ==, null, ), {, return, n, ;, }, int, fromIndex, =, isIndexOf, ?, 0, :]
[), {, return, n, ;, }, int, fromIndex, =, isIndexOf, ?, 0, :, lstring, ., length, (, ), ;, if]
[==, null, ), {, return, n, ;, }, int, fromIndex, =, isIndexOf, ?, 0, :, lstring, ., length, (, )]
[), {, return, n, ;, }, int, fromIndex, =, isIndexOf, ?, 0, :, lstring, ., length, (, ), ;, if]
[;, }, int, fromIndex, =, isIndexOf, ?, 0, :, lstring, ., length, (, ), ;, if, (, secondArg, !=, null]
[;, if, (, secondArg, !=, null, ), {, if, (, secondArg, ., getNext, (, ), !=, null, ||, !, secondArg]
[?, 0, :, lstring, ., length, (, ), ;, if, (, secondArg, !=, null, ), {, if, (, secondArg, .]
[:, lstring, ., length, (, ), ;, if, (, secondArg, !=, null, ), {, if, (, secondArg, ., getNext, (]
[;, if, (, secondArg, !=, null, ), {, if, (, secondArg, ., getNext, (, ), !=, null, ||, !, secondArg]
[., length, (, ), ;, if, (, secondArg, !=, null, ), {, if, (, secondArg, ., getNext, (, ), !=]
[), {, if, (, secondArg, ., getNext, (, ), !=, null, ||, !, secondArg, ., isNumber, (, ), ), {]
[!=, null, ), {, if, (, secondArg, ., getNext, (, ), !=, null, ||, !, secondArg, ., isNumber, (, )]
[), {, if, (, secondArg, ., getNext, (, ), !=, null, ||, !, secondArg, ., isNumber, (, ), ), {]
[), {, return, n, ;, }, else, {, fromIndex, =, (, int, ), secondArg, ., getDouble, (, ), ;, }]
[||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else, {, fromIndex, =, (, int, )]
[!=, null, ||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else, {, fromIndex, =, (]
[., getNext, (, ), !=, null, ||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else]
[||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else, {, fromIndex, =, (, int, )]
[), {, return, n, ;, }, else, {, fromIndex, =, (, int, ), secondArg, ., getDouble, (, ), ;, }]
[), {, return, n, ;, }, else, {, fromIndex, =, (, int, ), secondArg, ., getDouble, (, ), ;, }]
[., isNumber, (, ), ), {, return, n, ;, }, else, {, fromIndex, =, (, int, ), secondArg, ., getDouble]
[;, }, else, {, fromIndex, =, (, int, ), secondArg, ., getDouble, (, ), ;, }, }, int, indexVal, =]
[=, (, int, ), secondArg, ., getDouble, (, ), ;, }, }, int, indexVal, =, isIndexOf, ?, lstring, ., indexOf]
[;, }, }, int, indexVal, =, isIndexOf, ?, lstring, ., indexOf, (, searchValue, ,, fromIndex, ), :, lstring, ., lastIndexOf]
[;, }, }, int, indexVal, =, isIndexOf, ?, lstring, ., indexOf, (, searchValue, ,, fromIndex, ), :, lstring, ., lastIndexOf]
[., getDouble, (, ), ;, }, }, int, indexVal, =, isIndexOf, ?, lstring, ., indexOf, (, searchValue, ,, fromIndex, )]
[;, Node, newNode, =, IR, ., number, (, indexVal, ), ;, n, ., getParent, (, ), ., replaceChild, (, n]
[?, lstring, ., indexOf, (, searchValue, ,, fromIndex, ), :, lstring, ., lastIndexOf, (, searchValue, ,, fromIndex, ), ;, Node]
[:, lstring, ., lastIndexOf, (, searchValue, ,, fromIndex, ), ;, Node, newNode, =, IR, ., number, (, indexVal, ), ;]
[., indexOf, (, searchValue, ,, fromIndex, ), :, lstring, ., lastIndexOf, (, searchValue, ,, fromIndex, ), ;, Node, newNode, =]
[,, fromIndex, ), :, lstring, ., lastIndexOf, (, searchValue, ,, fromIndex, ), ;, Node, newNode, =, IR, ., number, (]
[), :, lstring, ., lastIndexOf, (, searchValue, ,, fromIndex, ), ;, Node, newNode, =, IR, ., number, (, indexVal, )]
[;, Node, newNode, =, IR, ., number, (, indexVal, ), ;, n, ., getParent, (, ), ., replaceChild, (, n]
[., lastIndexOf, (, searchValue, ,, fromIndex, ), ;, Node, newNode, =, IR, ., number, (, indexVal, ), ;, n, .]
[,, fromIndex, ), ;, Node, newNode, =, IR, ., number, (, indexVal, ), ;, n, ., getParent, (, ), .]
[), ;, Node, newNode, =, IR, ., number, (, indexVal, ), ;, n, ., getParent, (, ), ., replaceChild, (]
[;, n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, ), ;, reportCodeChange, (, ), ;, return, newNode]
[., number, (, indexVal, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, ), ;, reportCodeChange]
[), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, ), ;, reportCodeChange, (, ), ;, return]
[;, reportCodeChange, (, ), ;, return, newNode, ;, }, private, Node, tryFoldArrayJoin, (, Node, n, ), {, Node, callTarget, =]
[., replaceChild, (, n, ,, newNode, ), ;, reportCodeChange, (, ), ;, return, newNode, ;, }, private, Node, tryFoldArrayJoin, (]
[., getParent, (, ), ., replaceChild, (, n, ,, newNode, ), ;, reportCodeChange, (, ), ;, return, newNode, ;, }]
[,, newNode, ), ;, reportCodeChange, (, ), ;, return, newNode, ;, }, private, Node, tryFoldArrayJoin, (, Node, n, ), {]
[), ;, reportCodeChange, (, ), ;, return, newNode, ;, }, private, Node, tryFoldArrayJoin, (, Node, n, ), {, Node, callTarget]
[;, return, newNode, ;, }, private, Node, tryFoldArrayJoin, (, Node, n, ), {, Node, callTarget, =, n, ., getFirstChild, (]
[;, }, private, Node, tryFoldArrayJoin, (, Node, n, ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, if]
[;, if, (, callTarget, ==, null, ||, !, callTarget, ., isGetProp, (, ), ), {, return, n, ;, }, Node]
[., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ||, !, callTarget, ., isGetProp, (, ), ), {, return]
[), {, return, n, ;, }, Node, right, =, callTarget, ., getNext, (, ), ;, if, (, right, !=, null]
[||, !, callTarget, ., isGetProp, (, ), ), {, return, n, ;, }, Node, right, =, callTarget, ., getNext, (]
[==, null, ||, !, callTarget, ., isGetProp, (, ), ), {, return, n, ;, }, Node, right, =, callTarget, .]
[||, !, callTarget, ., isGetProp, (, ), ), {, return, n, ;, }, Node, right, =, callTarget, ., getNext, (]
[), {, return, n, ;, }, Node, right, =, callTarget, ., getNext, (, ), ;, if, (, right, !=, null]
[), {, return, n, ;, }, Node, right, =, callTarget, ., getNext, (, ), ;, if, (, right, !=, null]
[., isGetProp, (, ), ), {, return, n, ;, }, Node, right, =, callTarget, ., getNext, (, ), ;, if]
[;, }, Node, right, =, callTarget, ., getNext, (, ), ;, if, (, right, !=, null, ), {, if, (]
[;, if, (, right, !=, null, ), {, if, (, right, ., getNext, (, ), !=, null, ||, !, NodeUtil]
[., getNext, (, ), ;, if, (, right, !=, null, ), {, if, (, right, ., getNext, (, ), !=]
[), {, if, (, right, ., getNext, (, ), !=, null, ||, !, NodeUtil, ., isImmutableValue, (, right, ), )]
[!=, null, ), {, if, (, right, ., getNext, (, ), !=, null, ||, !, NodeUtil, ., isImmutableValue, (, right]
[), {, if, (, right, ., getNext, (, ), !=, null, ||, !, NodeUtil, ., isImmutableValue, (, right, ), )]
[), {, return, n, ;, }, }, Node, arrayNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, arrayNode]
[||, !, NodeUtil, ., isImmutableValue, (, right, ), ), {, return, n, ;, }, }, Node, arrayNode, =, callTarget, .]
[!=, null, ||, !, NodeUtil, ., isImmutableValue, (, right, ), ), {, return, n, ;, }, }, Node, arrayNode, =]
[., getNext, (, ), !=, null, ||, !, NodeUtil, ., isImmutableValue, (, right, ), ), {, return, n, ;, }]
[||, !, NodeUtil, ., isImmutableValue, (, right, ), ), {, return, n, ;, }, }, Node, arrayNode, =, callTarget, .]
[), {, return, n, ;, }, }, Node, arrayNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, arrayNode]
[), {, return, n, ;, }, }, Node, arrayNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, arrayNode]
[., isImmutableValue, (, right, ), ), {, return, n, ;, }, }, Node, arrayNode, =, callTarget, ., getFirstChild, (, )]
[), ), {, return, n, ;, }, }, Node, arrayNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =]
[;, }, }, Node, arrayNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, arrayNode, ., getNext, (, )]
[;, Node, functionName, =, arrayNode, ., getNext, (, ), ;, if, (, !, arrayNode, ., isArrayLit, (, ), ||, !]
[., getFirstChild, (, ), ;, Node, functionName, =, arrayNode, ., getNext, (, ), ;, if, (, !, arrayNode, ., isArrayLit]
[;, if, (, !, arrayNode, ., isArrayLit, (, ), ||, !, functionName, ., getString, (, ), ., equals, (, "join"]
[., getNext, (, ), ;, if, (, !, arrayNode, ., isArrayLit, (, ), ||, !, functionName, ., getString, (, )]
[), {, return, n, ;, }, if, (, right, !=, null, &&, right, ., isString, (, ), &&, ",", .]
[||, !, functionName, ., getString, (, ), ., equals, (, "join", ), ), {, return, n, ;, }, if, (]
[||, !, functionName, ., getString, (, ), ., equals, (, "join", ), ), {, return, n, ;, }, if, (]
[., isArrayLit, (, ), ||, !, functionName, ., getString, (, ), ., equals, (, "join", ), ), {, return, n]
[), {, return, n, ;, }, if, (, right, !=, null, &&, right, ., isString, (, ), &&, ",", .]
[), {, return, n, ;, }, if, (, right, !=, null, &&, right, ., isString, (, ), &&, ",", .]
[., equals, (, "join", ), ), {, return, n, ;, }, if, (, right, !=, null, &&, right, ., isString]
[., getString, (, ), ., equals, (, "join", ), ), {, return, n, ;, }, if, (, right, !=, null]
[), ), {, return, n, ;, }, if, (, right, !=, null, &&, right, ., isString, (, ), &&, ","]
[;, }, if, (, right, !=, null, &&, right, ., isString, (, ), &&, ",", ., equals, (, right, .]
[), {, n, ., removeChild, (, right, ), ;, reportCodeChange, (, ), ;, }, String, joinString, =, (, right, ==]
[&&, ",", ., equals, (, right, ., getString, (, ), ), ), {, n, ., removeChild, (, right, ), ;]
[&&, right, ., isString, (, ), &&, ",", ., equals, (, right, ., getString, (, ), ), ), {, n]
[!=, null, &&, right, ., isString, (, ), &&, ",", ., equals, (, right, ., getString, (, ), ), )]
[&&, right, ., isString, (, ), &&, ",", ., equals, (, right, ., getString, (, ), ), ), {, n]
[&&, ",", ., equals, (, right, ., getString, (, ), ), ), {, n, ., removeChild, (, right, ), ;]
[., isString, (, ), &&, ",", ., equals, (, right, ., getString, (, ), ), ), {, n, ., removeChild]
[), {, n, ., removeChild, (, right, ), ;, reportCodeChange, (, ), ;, }, String, joinString, =, (, right, ==]
[., equals, (, right, ., getString, (, ), ), ), {, n, ., removeChild, (, right, ), ;, reportCodeChange, (]
[), ), {, n, ., removeChild, (, right, ), ;, reportCodeChange, (, ), ;, }, String, joinString, =, (, right]
[., getString, (, ), ), ), {, n, ., removeChild, (, right, ), ;, reportCodeChange, (, ), ;, }, String]
[;, reportCodeChange, (, ), ;, }, String, joinString, =, (, right, ==, null, ), ?, ",", :, NodeUtil, ., getStringValue]
[., removeChild, (, right, ), ;, reportCodeChange, (, ), ;, }, String, joinString, =, (, right, ==, null, ), ?]
[), ;, reportCodeChange, (, ), ;, }, String, joinString, =, (, right, ==, null, ), ?, ",", :, NodeUtil, .]
[;, }, String, joinString, =, (, right, ==, null, ), ?, ",", :, NodeUtil, ., getStringValue, (, right, ), ;]
[;, List, <, Node, >, arrayFoldedChildren, =, Lists, ., newLinkedList, (, ), ;, StringBuilder, sb, =, null, ;, int, foldedSize]
[?, ",", :, NodeUtil, ., getStringValue, (, right, ), ;, List, <, Node, >, arrayFoldedChildren, =, Lists, ., newLinkedList, (]
[), ?, ",", :, NodeUtil, ., getStringValue, (, right, ), ;, List, <, Node, >, arrayFoldedChildren, =, Lists, ., newLinkedList]
[==, null, ), ?, ",", :, NodeUtil, ., getStringValue, (, right, ), ;, List, <, Node, >, arrayFoldedChildren, =, Lists]
[), ?, ",", :, NodeUtil, ., getStringValue, (, right, ), ;, List, <, Node, >, arrayFoldedChildren, =, Lists, ., newLinkedList]
[:, NodeUtil, ., getStringValue, (, right, ), ;, List, <, Node, >, arrayFoldedChildren, =, Lists, ., newLinkedList, (, ), ;]
[;, List, <, Node, >, arrayFoldedChildren, =, Lists, ., newLinkedList, (, ), ;, StringBuilder, sb, =, null, ;, int, foldedSize]
[., getStringValue, (, right, ), ;, List, <, Node, >, arrayFoldedChildren, =, Lists, ., newLinkedList, (, ), ;, StringBuilder, sb]
[), ;, List, <, Node, >, arrayFoldedChildren, =, Lists, ., newLinkedList, (, ), ;, StringBuilder, sb, =, null, ;, int]
[;, StringBuilder, sb, =, null, ;, int, foldedSize, =, 0, ;, Node, prev, =, null, ;, Node, elem, =, arrayNode]
[., newLinkedList, (, ), ;, StringBuilder, sb, =, null, ;, int, foldedSize, =, 0, ;, Node, prev, =, null, ;]
[;, int, foldedSize, =, 0, ;, Node, prev, =, null, ;, Node, elem, =, arrayNode, ., getFirstChild, (, ), ;]
[;, Node, prev, =, null, ;, Node, elem, =, arrayNode, ., getFirstChild, (, ), ;, while, (, elem, !=, null]
[;, Node, elem, =, arrayNode, ., getFirstChild, (, ), ;, while, (, elem, !=, null, ), {, if, (, NodeUtil]
[;, while, (, elem, !=, null, ), {, if, (, NodeUtil, ., isImmutableValue, (, elem, ), ||, elem, ., isEmpty]
[., getFirstChild, (, ), ;, while, (, elem, !=, null, ), {, if, (, NodeUtil, ., isImmutableValue, (, elem, )]
[), {, if, (, NodeUtil, ., isImmutableValue, (, elem, ), ||, elem, ., isEmpty, (, ), ), {, if, (]
[!=, null, ), {, if, (, NodeUtil, ., isImmutableValue, (, elem, ), ||, elem, ., isEmpty, (, ), ), {]
[), {, if, (, NodeUtil, ., isImmutableValue, (, elem, ), ||, elem, ., isEmpty, (, ), ), {, if, (]
[), {, if, (, sb, ==, null, ), {, sb, =, new, StringBuilder, (, ), ;, }, else, {, sb]
[||, elem, ., isEmpty, (, ), ), {, if, (, sb, ==, null, ), {, sb, =, new, StringBuilder, (]
[., isImmutableValue, (, elem, ), ||, elem, ., isEmpty, (, ), ), {, if, (, sb, ==, null, ), {]
[), ||, elem, ., isEmpty, (, ), ), {, if, (, sb, ==, null, ), {, sb, =, new, StringBuilder]
[), {, if, (, sb, ==, null, ), {, sb, =, new, StringBuilder, (, ), ;, }, else, {, sb]
[., isEmpty, (, ), ), {, if, (, sb, ==, null, ), {, sb, =, new, StringBuilder, (, ), ;]
[), {, sb, =, new, StringBuilder, (, ), ;, }, else, {, sb, ., append, (, joinString, ), ;, }]
[==, null, ), {, sb, =, new, StringBuilder, (, ), ;, }, else, {, sb, ., append, (, joinString, )]
[), {, sb, =, new, StringBuilder, (, ), ;, }, else, {, sb, ., append, (, joinString, ), ;, }]
[=, new, StringBuilder, (, ), ;, }, else, {, sb, ., append, (, joinString, ), ;, }, sb, ., append]
[;, }, else, {, sb, ., append, (, joinString, ), ;, }, sb, ., append, (, NodeUtil, ., getArrayElementStringValue, (]
[;, }, sb, ., append, (, NodeUtil, ., getArrayElementStringValue, (, elem, ), ), ;, }, else, {, if, (, sb]
[., append, (, joinString, ), ;, }, sb, ., append, (, NodeUtil, ., getArrayElementStringValue, (, elem, ), ), ;, }]
[), ;, }, sb, ., append, (, NodeUtil, ., getArrayElementStringValue, (, elem, ), ), ;, }, else, {, if, (]
[;, }, else, {, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=]
[., append, (, NodeUtil, ., getArrayElementStringValue, (, elem, ), ), ;, }, else, {, if, (, sb, !=, null, )]
[), ;, }, else, {, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize]
[., getArrayElementStringValue, (, elem, ), ), ;, }, else, {, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull]
[), ), ;, }, else, {, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;]
[), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren]
[!=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2]
[), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren]
[;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb]
[., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (]
[), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (]
[+=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString]
[;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, )]
[+, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (]
[., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString, (, )]
[;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, )]
[;, sb, =, null, ;, }, foldedSize, +=, InlineCostEstimator, ., getCost, (, elem, ), ;, arrayFoldedChildren, ., add, (, elem]
[., add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;]
[), ;, sb, =, null, ;, }, foldedSize, +=, InlineCostEstimator, ., getCost, (, elem, ), ;, arrayFoldedChildren, ., add, (]
[., copyInformationFrom, (, prev, ), ), ;, sb, =, null, ;, }, foldedSize, +=, InlineCostEstimator, ., getCost, (, elem, )]
[., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;, sb, =, null, ;]
[), ., copyInformationFrom, (, prev, ), ), ;, sb, =, null, ;, }, foldedSize, +=, InlineCostEstimator, ., getCost, (, elem]
[., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;, sb, =, null, ;, }, foldedSize, +=, InlineCostEstimator]
[), ), ;, sb, =, null, ;, }, foldedSize, +=, InlineCostEstimator, ., getCost, (, elem, ), ;, arrayFoldedChildren, ., add]
[=, null, ;, }, foldedSize, +=, InlineCostEstimator, ., getCost, (, elem, ), ;, arrayFoldedChildren, ., add, (, elem, ), ;]
[;, }, foldedSize, +=, InlineCostEstimator, ., getCost, (, elem, ), ;, arrayFoldedChildren, ., add, (, elem, ), ;, }, prev]
[+=, InlineCostEstimator, ., getCost, (, elem, ), ;, arrayFoldedChildren, ., add, (, elem, ), ;, }, prev, =, elem, ;]
[;, arrayFoldedChildren, ., add, (, elem, ), ;, }, prev, =, elem, ;, elem, =, elem, ., getNext, (, )]
[., getCost, (, elem, ), ;, arrayFoldedChildren, ., add, (, elem, ), ;, }, prev, =, elem, ;, elem, =]
[), ;, arrayFoldedChildren, ., add, (, elem, ), ;, }, prev, =, elem, ;, elem, =, elem, ., getNext, (]
[;, }, prev, =, elem, ;, elem, =, elem, ., getNext, (, ), ;, }, if, (, sb, !=, null]
[., add, (, elem, ), ;, }, prev, =, elem, ;, elem, =, elem, ., getNext, (, ), ;, }]
[), ;, }, prev, =, elem, ;, elem, =, elem, ., getNext, (, ), ;, }, if, (, sb, !=]
[=, elem, ;, elem, =, elem, ., getNext, (, ), ;, }, if, (, sb, !=, null, ), {, Preconditions]
[;, elem, =, elem, ., getNext, (, ), ;, }, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull]
[=, elem, ., getNext, (, ), ;, }, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev]
[;, }, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, .]
[., getNext, (, ), ;, }, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;]
[), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren]
[!=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2]
[), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren]
[;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb]
[., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (]
[), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (]
[+=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString]
[;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, )]
[+, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (]
[., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString, (, )]
[;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, )]
[;, }, foldedSize, +=, arrayFoldedChildren, ., size, (, ), -, 1, ;, int, originalSize, =, InlineCostEstimator, ., getCost, (, n]
[., add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;]
[), ;, }, foldedSize, +=, arrayFoldedChildren, ., size, (, ), -, 1, ;, int, originalSize, =, InlineCostEstimator, ., getCost, (]
[., copyInformationFrom, (, prev, ), ), ;, }, foldedSize, +=, arrayFoldedChildren, ., size, (, ), -, 1, ;, int, originalSize]
[., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;, }, foldedSize, +=, arrayFoldedChildren]
[), ., copyInformationFrom, (, prev, ), ), ;, }, foldedSize, +=, arrayFoldedChildren, ., size, (, ), -, 1, ;, int]
[., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;, }, foldedSize, +=, arrayFoldedChildren, ., size, (, )]
[), ), ;, }, foldedSize, +=, arrayFoldedChildren, ., size, (, ), -, 1, ;, int, originalSize, =, InlineCostEstimator, ., getCost]
[+=, arrayFoldedChildren, ., size, (, ), -, 1, ;, int, originalSize, =, InlineCostEstimator, ., getCost, (, n, ), ;, switch]
[;, int, originalSize, =, InlineCostEstimator, ., getCost, (, n, ), ;, switch, (, arrayFoldedChildren, ., size, (, ), ), {]
[-, 1, ;, int, originalSize, =, InlineCostEstimator, ., getCost, (, n, ), ;, switch, (, arrayFoldedChildren, ., size, (, )]
[., size, (, ), -, 1, ;, int, originalSize, =, InlineCostEstimator, ., getCost, (, n, ), ;, switch, (, arrayFoldedChildren]
[;, int, originalSize, =, InlineCostEstimator, ., getCost, (, n, ), ;, switch, (, arrayFoldedChildren, ., size, (, ), ), {]
[;, switch, (, arrayFoldedChildren, ., size, (, ), ), {, case, 0, :, Node, emptyStringNode, =, IR, ., string, (]
[., getCost, (, n, ), ;, switch, (, arrayFoldedChildren, ., size, (, ), ), {, case, 0, :, Node, emptyStringNode]
[), ;, switch, (, arrayFoldedChildren, ., size, (, ), ), {, case, 0, :, Node, emptyStringNode, =, IR, ., string]
[), {, case, 0, :, Node, emptyStringNode, =, IR, ., string, (, "", ), ;, n, ., getParent, (, )]
[., size, (, ), ), {, case, 0, :, Node, emptyStringNode, =, IR, ., string, (, "", ), ;, n]
[:, Node, emptyStringNode, =, IR, ., string, (, "", ), ;, n, ., getParent, (, ), ., replaceChild, (, n]
[;, n, ., getParent, (, ), ., replaceChild, (, n, ,, emptyStringNode, ), ;, reportCodeChange, (, ), ;, return, emptyStringNode]
[., string, (, "", ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, emptyStringNode, ), ;, reportCodeChange]
[), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, emptyStringNode, ), ;, reportCodeChange, (, ), ;, return]
[;, reportCodeChange, (, ), ;, return, emptyStringNode, ;, case, 1, :, Node, foldedStringNode, =, arrayFoldedChildren, ., remove, (, 0, )]
[., replaceChild, (, n, ,, emptyStringNode, ), ;, reportCodeChange, (, ), ;, return, emptyStringNode, ;, case, 1, :, Node, foldedStringNode]
[., getParent, (, ), ., replaceChild, (, n, ,, emptyStringNode, ), ;, reportCodeChange, (, ), ;, return, emptyStringNode, ;, case]
[,, emptyStringNode, ), ;, reportCodeChange, (, ), ;, return, emptyStringNode, ;, case, 1, :, Node, foldedStringNode, =, arrayFoldedChildren, ., remove]
[), ;, reportCodeChange, (, ), ;, return, emptyStringNode, ;, case, 1, :, Node, foldedStringNode, =, arrayFoldedChildren, ., remove, (, 0]
[;, return, emptyStringNode, ;, case, 1, :, Node, foldedStringNode, =, arrayFoldedChildren, ., remove, (, 0, ), ;, if, (, foldedSize]
[;, case, 1, :, Node, foldedStringNode, =, arrayFoldedChildren, ., remove, (, 0, ), ;, if, (, foldedSize, >, originalSize, )]
[:, Node, foldedStringNode, =, arrayFoldedChildren, ., remove, (, 0, ), ;, if, (, foldedSize, >, originalSize, ), {, return, n]
[;, if, (, foldedSize, >, originalSize, ), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, if, (]
[., remove, (, 0, ), ;, if, (, foldedSize, >, originalSize, ), {, return, n, ;, }, arrayNode, ., detachChildren]
[), ;, if, (, foldedSize, >, originalSize, ), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, if]
[), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, if, (, !, foldedStringNode, ., isString, (, )]
[>, originalSize, ), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, if, (, !, foldedStringNode, ., isString]
[), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, if, (, !, foldedStringNode, ., isString, (, )]
[;, }, arrayNode, ., detachChildren, (, ), ;, if, (, !, foldedStringNode, ., isString, (, ), ), {, Node, replacement]
[;, if, (, !, foldedStringNode, ., isString, (, ), ), {, Node, replacement, =, IR, ., add, (, IR, .]
[., detachChildren, (, ), ;, if, (, !, foldedStringNode, ., isString, (, ), ), {, Node, replacement, =, IR, .]
[), {, Node, replacement, =, IR, ., add, (, IR, ., string, (, "", ), ., srcref, (, n, )]
[), {, Node, replacement, =, IR, ., add, (, IR, ., string, (, "", ), ., srcref, (, n, )]
[., isString, (, ), ), {, Node, replacement, =, IR, ., add, (, IR, ., string, (, "", ), .]
[;, foldedStringNode, =, replacement, ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, foldedStringNode, ), ;, reportCodeChange]
[., add, (, IR, ., string, (, "", ), ., srcref, (, n, ), ,, foldedStringNode, ), ;, foldedStringNode, =]
[,, foldedStringNode, ), ;, foldedStringNode, =, replacement, ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, foldedStringNode]
[., srcref, (, n, ), ,, foldedStringNode, ), ;, foldedStringNode, =, replacement, ;, }, n, ., getParent, (, ), .]
[., string, (, "", ), ., srcref, (, n, ), ,, foldedStringNode, ), ;, foldedStringNode, =, replacement, ;, }, n]
[), ., srcref, (, n, ), ,, foldedStringNode, ), ;, foldedStringNode, =, replacement, ;, }, n, ., getParent, (, )]
[), ,, foldedStringNode, ), ;, foldedStringNode, =, replacement, ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[), ;, foldedStringNode, =, replacement, ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, foldedStringNode, ), ;]
[=, replacement, ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, foldedStringNode, ), ;, reportCodeChange, (, )]
[;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, foldedStringNode, ), ;, reportCodeChange, (, ), ;, return]
[;, reportCodeChange, (, ), ;, return, foldedStringNode, ;, default, :, if, (, arrayFoldedChildren, ., size, (, ), ==, arrayNode, .]
[., replaceChild, (, n, ,, foldedStringNode, ), ;, reportCodeChange, (, ), ;, return, foldedStringNode, ;, default, :, if, (, arrayFoldedChildren]
[., getParent, (, ), ., replaceChild, (, n, ,, foldedStringNode, ), ;, reportCodeChange, (, ), ;, return, foldedStringNode, ;, default]
[,, foldedStringNode, ), ;, reportCodeChange, (, ), ;, return, foldedStringNode, ;, default, :, if, (, arrayFoldedChildren, ., size, (, )]
[), ;, reportCodeChange, (, ), ;, return, foldedStringNode, ;, default, :, if, (, arrayFoldedChildren, ., size, (, ), ==, arrayNode]
[;, return, foldedStringNode, ;, default, :, if, (, arrayFoldedChildren, ., size, (, ), ==, arrayNode, ., getChildCount, (, ), )]
[;, default, :, if, (, arrayFoldedChildren, ., size, (, ), ==, arrayNode, ., getChildCount, (, ), ), {, return, n]
[), {, return, n, ;, }, int, kJoinOverhead, =, "[].join()", ., length, (, ), ;, foldedSize, +=, kJoinOverhead, ;, foldedSize]
[==, arrayNode, ., getChildCount, (, ), ), {, return, n, ;, }, int, kJoinOverhead, =, "[].join()", ., length, (, )]
[., size, (, ), ==, arrayNode, ., getChildCount, (, ), ), {, return, n, ;, }, int, kJoinOverhead, =, "[].join()"]
[), {, return, n, ;, }, int, kJoinOverhead, =, "[].join()", ., length, (, ), ;, foldedSize, +=, kJoinOverhead, ;, foldedSize]
[., getChildCount, (, ), ), {, return, n, ;, }, int, kJoinOverhead, =, "[].join()", ., length, (, ), ;, foldedSize]
[;, }, int, kJoinOverhead, =, "[].join()", ., length, (, ), ;, foldedSize, +=, kJoinOverhead, ;, foldedSize, +=, (, right, !=]
[;, foldedSize, +=, kJoinOverhead, ;, foldedSize, +=, (, right, !=, null, ), ?, InlineCostEstimator, ., getCost, (, right, ), :]
[., length, (, ), ;, foldedSize, +=, kJoinOverhead, ;, foldedSize, +=, (, right, !=, null, ), ?, InlineCostEstimator, ., getCost]
[+=, kJoinOverhead, ;, foldedSize, +=, (, right, !=, null, ), ?, InlineCostEstimator, ., getCost, (, right, ), :, 0, ;]
[;, foldedSize, +=, (, right, !=, null, ), ?, InlineCostEstimator, ., getCost, (, right, ), :, 0, ;, if, (]
[+=, (, right, !=, null, ), ?, InlineCostEstimator, ., getCost, (, right, ), :, 0, ;, if, (, foldedSize, >]
[;, if, (, foldedSize, >, originalSize, ), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, for, (]
[?, InlineCostEstimator, ., getCost, (, right, ), :, 0, ;, if, (, foldedSize, >, originalSize, ), {, return, n, ;]
[), ?, InlineCostEstimator, ., getCost, (, right, ), :, 0, ;, if, (, foldedSize, >, originalSize, ), {, return, n]
[!=, null, ), ?, InlineCostEstimator, ., getCost, (, right, ), :, 0, ;, if, (, foldedSize, >, originalSize, ), {]
[), ?, InlineCostEstimator, ., getCost, (, right, ), :, 0, ;, if, (, foldedSize, >, originalSize, ), {, return, n]
[:, 0, ;, if, (, foldedSize, >, originalSize, ), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;]
[., getCost, (, right, ), :, 0, ;, if, (, foldedSize, >, originalSize, ), {, return, n, ;, }, arrayNode]
[), :, 0, ;, if, (, foldedSize, >, originalSize, ), {, return, n, ;, }, arrayNode, ., detachChildren, (, )]
[;, if, (, foldedSize, >, originalSize, ), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, for, (]
[), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, for, (, Node, node, :, arrayFoldedChildren, ), {]
[>, originalSize, ), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, for, (, Node, node, :, arrayFoldedChildren]
[), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, for, (, Node, node, :, arrayFoldedChildren, ), {]
[;, }, arrayNode, ., detachChildren, (, ), ;, for, (, Node, node, :, arrayFoldedChildren, ), {, arrayNode, ., addChildToBack, (]
[;, for, (, Node, node, :, arrayFoldedChildren, ), {, arrayNode, ., addChildToBack, (, node, ), ;, }, reportCodeChange, (, )]
[., detachChildren, (, ), ;, for, (, Node, node, :, arrayFoldedChildren, ), {, arrayNode, ., addChildToBack, (, node, ), ;]
[), {, arrayNode, ., addChildToBack, (, node, ), ;, }, reportCodeChange, (, ), ;, break, ;, }, return, n, ;]
[;, }, reportCodeChange, (, ), ;, break, ;, }, return, n, ;, }, private, Node, tryFoldStringSubstr, (, Node, n, ,]
[., addChildToBack, (, node, ), ;, }, reportCodeChange, (, ), ;, break, ;, }, return, n, ;, }, private, Node]
[), ;, }, reportCodeChange, (, ), ;, break, ;, }, return, n, ;, }, private, Node, tryFoldStringSubstr, (, Node, n]
[;, break, ;, }, return, n, ;, }, private, Node, tryFoldStringSubstr, (, Node, n, ,, Node, stringNode, ,, Node, arg1]
[;, }, private, Node, tryFoldStringSubstr, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, start, ,, length, ;, String, stringAsString, =]
[., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), )]
[), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, start, ,, length, ;, String, stringAsString]
[., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, start, ,]
[;, int, start, ,, length, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null]
[., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, start, ,, length, ;, String, stringAsString, =, stringNode, .]
[), ;, int, start, ,, length, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=]
[., isString, (, ), ), ;, int, start, ,, length, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;]
[;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), ), {, start, =, (, int, ), arg1]
[., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), ), {, start, =]
[), {, start, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }]
[&&, arg1, ., isNumber, (, ), ), {, start, =, (, int, ), arg1, ., getDouble, (, ), ;, }]
[!=, null, &&, arg1, ., isNumber, (, ), ), {, start, =, (, int, ), arg1, ., getDouble, (, )]
[&&, arg1, ., isNumber, (, ), ), {, start, =, (, int, ), arg1, ., getDouble, (, ), ;, }]
[), {, start, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }]
[., isNumber, (, ), ), {, start, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {]
[=, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, Node, arg2, =]
[;, }, else, {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2]
[;, }, else, {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2]
[., getDouble, (, ), ;, }, else, {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, )]
[;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (]
[;, if, (, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, length, =, (]
[., getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), )]
[), {, if, (, arg2, ., isNumber, (, ), ), {, length, =, (, int, ), arg2, ., getDouble, (]
[!=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, length, =, (, int, ), arg2, .]
[), {, if, (, arg2, ., isNumber, (, ), ), {, length, =, (, int, ), arg2, ., getDouble, (]
[), {, length, =, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {, return, n, ;, }]
[., isNumber, (, ), ), {, length, =, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {]
[=, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, arg2]
[;, }, else, {, return, n, ;, }, if, (, arg2, ., getNext, (, ), !=, null, ), {, return]
[;, }, else, {, return, n, ;, }, if, (, arg2, ., getNext, (, ), !=, null, ), {, return]
[., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, arg2, ., getNext, (, ), !=]
[;, }, if, (, arg2, ., getNext, (, ), !=, null, ), {, return, n, ;, }, }, else, {]
[), {, return, n, ;, }, }, else, {, length, =, stringAsString, ., length, (, ), -, start, ;, }]
[!=, null, ), {, return, n, ;, }, }, else, {, length, =, stringAsString, ., length, (, ), -, start]
[., getNext, (, ), !=, null, ), {, return, n, ;, }, }, else, {, length, =, stringAsString, ., length]
[), {, return, n, ;, }, }, else, {, length, =, stringAsString, ., length, (, ), -, start, ;, }]
[;, }, }, else, {, length, =, stringAsString, ., length, (, ), -, start, ;, }, if, (, (, start]
[=, stringAsString, ., length, (, ), -, start, ;, }, if, (, (, start, +, length, ), >, stringAsString, .]
[;, }, if, (, (, start, +, length, ), >, stringAsString, ., length, (, ), ||, (, length, <, 0]
[-, start, ;, }, if, (, (, start, +, length, ), >, stringAsString, ., length, (, ), ||, (, length]
[., length, (, ), -, start, ;, }, if, (, (, start, +, length, ), >, stringAsString, ., length, (]
[;, }, if, (, (, start, +, length, ), >, stringAsString, ., length, (, ), ||, (, length, <, 0]
[), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, start, +, length, ), ;]
[||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start]
[||, (, length, <, 0, ), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result]
[>, stringAsString, ., length, (, ), ||, (, length, <, 0, ), ||, (, start, <, 0, ), ), {]
[), >, stringAsString, ., length, (, ), ||, (, length, <, 0, ), ||, (, start, <, 0, ), )]
[+, length, ), >, stringAsString, ., length, (, ), ||, (, length, <, 0, ), ||, (, start, <, 0]
[), >, stringAsString, ., length, (, ), ||, (, length, <, 0, ), ||, (, start, <, 0, ), )]
[||, (, length, <, 0, ), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result]
[., length, (, ), ||, (, length, <, 0, ), ||, (, start, <, 0, ), ), {, return, n]
[||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start]
[), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (]
[<, 0, ), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, .]
[), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (]
[), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, start, +, length, ), ;]
[), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, start, +, length, )]
[<, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, start, +]
[), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, start, +, length, )]
[;, }, String, result, =, stringAsString, ., substring, (, start, ,, start, +, length, ), ;, Node, resultNode, =, IR]
[;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[., substring, (, start, ,, start, +, length, ), ;, Node, resultNode, =, IR, ., string, (, result, ), ;]
[,, start, +, length, ), ;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =, n]
[), ;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =, n, ., getParent, (, )]
[+, length, ), ;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =, n, ., getParent]
[), ;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =, n, ., getParent, (, )]
[;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange]
[., string, (, result, ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;]
[;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node]
[., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode]
[;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node, tryFoldStringSubstring, (, Node, n, ,, Node, stringNode, ,, Node]
[., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node, tryFoldStringSubstring, (]
[,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node, tryFoldStringSubstring, (, Node, n, ,, Node]
[), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node, tryFoldStringSubstring, (, Node, n, ,, Node, stringNode, ,]
[;, return, resultNode, ;, }, private, Node, tryFoldStringSubstring, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions]
[;, }, private, Node, tryFoldStringSubstring, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, start, ,, end, ;, String, stringAsString, =]
[., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), )]
[), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, start, ,, end, ;, String, stringAsString]
[., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, start, ,]
[;, int, start, ,, end, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null]
[., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, start, ,, end, ;, String, stringAsString, =, stringNode, .]
[), ;, int, start, ,, end, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=]
[., isString, (, ), ), ;, int, start, ,, end, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;]
[;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), ), {, start, =, (, int, ), arg1]
[., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), ), {, start, =]
[), {, start, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }]
[&&, arg1, ., isNumber, (, ), ), {, start, =, (, int, ), arg1, ., getDouble, (, ), ;, }]
[!=, null, &&, arg1, ., isNumber, (, ), ), {, start, =, (, int, ), arg1, ., getDouble, (, )]
[&&, arg1, ., isNumber, (, ), ), {, start, =, (, int, ), arg1, ., getDouble, (, ), ;, }]
[), {, start, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }]
[., isNumber, (, ), ), {, start, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {]
[=, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, Node, arg2, =]
[;, }, else, {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2]
[;, }, else, {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2]
[., getDouble, (, ), ;, }, else, {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, )]
[;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (]
[;, if, (, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, end, =, (]
[., getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), )]
[), {, if, (, arg2, ., isNumber, (, ), ), {, end, =, (, int, ), arg2, ., getDouble, (]
[!=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, end, =, (, int, ), arg2, .]
[), {, if, (, arg2, ., isNumber, (, ), ), {, end, =, (, int, ), arg2, ., getDouble, (]
[), {, end, =, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {, return, n, ;, }]
[., isNumber, (, ), ), {, end, =, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {]
[=, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, arg2]
[;, }, else, {, return, n, ;, }, if, (, arg2, ., getNext, (, ), !=, null, ), {, return]
[;, }, else, {, return, n, ;, }, if, (, arg2, ., getNext, (, ), !=, null, ), {, return]
[., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, arg2, ., getNext, (, ), !=]
[;, }, if, (, arg2, ., getNext, (, ), !=, null, ), {, return, n, ;, }, }, else, {]
[), {, return, n, ;, }, }, else, {, end, =, stringAsString, ., length, (, ), ;, }, if, (]
[!=, null, ), {, return, n, ;, }, }, else, {, end, =, stringAsString, ., length, (, ), ;, }]
[., getNext, (, ), !=, null, ), {, return, n, ;, }, }, else, {, end, =, stringAsString, ., length]
[), {, return, n, ;, }, }, else, {, end, =, stringAsString, ., length, (, ), ;, }, if, (]
[;, }, }, else, {, end, =, stringAsString, ., length, (, ), ;, }, if, (, (, end, >, stringAsString]
[=, stringAsString, ., length, (, ), ;, }, if, (, (, end, >, stringAsString, ., length, (, ), ), ||]
[;, }, if, (, (, end, >, stringAsString, ., length, (, ), ), ||, (, start, >, stringAsString, ., length]
[., length, (, ), ;, }, if, (, (, end, >, stringAsString, ., length, (, ), ), ||, (, start]
[), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, end, ), ;, Node, resultNode]
[||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start]
[||, (, end, <, 0, ), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result]
[||, (, start, >, stringAsString, ., length, (, ), ), ||, (, end, <, 0, ), ||, (, start, <]
[), ||, (, start, >, stringAsString, ., length, (, ), ), ||, (, end, <, 0, ), ||, (, start]
[>, stringAsString, ., length, (, ), ), ||, (, start, >, stringAsString, ., length, (, ), ), ||, (, end]
[), ||, (, start, >, stringAsString, ., length, (, ), ), ||, (, end, <, 0, ), ||, (, start]
[., length, (, ), ), ||, (, start, >, stringAsString, ., length, (, ), ), ||, (, end, <, 0]
[||, (, end, <, 0, ), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result]
[), ||, (, end, <, 0, ), ||, (, start, <, 0, ), ), {, return, n, ;, }, String]
[>, stringAsString, ., length, (, ), ), ||, (, end, <, 0, ), ||, (, start, <, 0, ), )]
[), ||, (, end, <, 0, ), ||, (, start, <, 0, ), ), {, return, n, ;, }, String]
[., length, (, ), ), ||, (, end, <, 0, ), ||, (, start, <, 0, ), ), {, return]
[||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start]
[), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (]
[<, 0, ), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, .]
[), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (]
[), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, end, ), ;, Node, resultNode]
[), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, end, ), ;, Node]
[<, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, end, )]
[), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, end, ), ;, Node]
[;, }, String, result, =, stringAsString, ., substring, (, start, ,, end, ), ;, Node, resultNode, =, IR, ., string]
[;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[., substring, (, start, ,, end, ), ;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent]
[,, end, ), ;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =, n, ., getParent]
[), ;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =, n, ., getParent, (, )]
[;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange]
[., string, (, result, ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;]
[;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node]
[., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode]
[;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node, tryFoldStringCharAt, (, Node, n, ,, Node, stringNode, ,, Node]
[., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node, tryFoldStringCharAt, (]
[,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node, tryFoldStringCharAt, (, Node, n, ,, Node]
[), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node, tryFoldStringCharAt, (, Node, n, ,, Node, stringNode, ,]
[;, return, resultNode, ;, }, private, Node, tryFoldStringCharAt, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions]
[;, }, private, Node, tryFoldStringCharAt, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, .]
[., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), )]
[), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode]
[., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, index, ;]
[;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1]
[., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (]
[), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&]
[., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null]
[., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext]
[), {, index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }]
[&&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int, ), arg1, ., getDouble, (, )]
[&&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int]
[!=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =]
[&&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int]
[&&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int, ), arg1, ., getDouble, (, )]
[., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int, ), arg1]
[), {, index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }]
[==, null, ), {, index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n]
[., getNext, (, ), ==, null, ), {, index, =, (, int, ), arg1, ., getDouble, (, ), ;, }]
[), {, index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }]
[=, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, index]
[;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||, stringAsString, ., length, (, ), <=]
[;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||, stringAsString, ., length, (, ), <=]
[., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||, stringAsString, .]
[;, }, if, (, index, <, 0, ||, stringAsString, ., length, (, ), <=, index, ), {, return, n, ;]
[), {, return, n, ;, }, Node, resultNode, =, IR, ., string, (, stringAsString, ., substring, (, index, ,, index]
[||, stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., string]
[<, 0, ||, stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR]
[||, stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., string]
[), {, return, n, ;, }, Node, resultNode, =, IR, ., string, (, stringAsString, ., substring, (, index, ,, index]
[<=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., string, (, stringAsString, ., substring, (, index]
[., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., string, (, stringAsString]
[), {, return, n, ;, }, Node, resultNode, =, IR, ., string, (, stringAsString, ., substring, (, index, ,, index]
[;, }, Node, resultNode, =, IR, ., string, (, stringAsString, ., substring, (, index, ,, index, +, 1, ), )]
[;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange]
[., string, (, stringAsString, ., substring, (, index, ,, index, +, 1, ), ), ;, Node, parent, =, n, .]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;]
[., substring, (, index, ,, index, +, 1, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[,, index, +, 1, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (]
[), ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, )]
[+, 1, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,]
[), ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, )]
[;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node]
[., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode]
[;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node, tryFoldStringCharCodeAt, (, Node, n, ,, Node, stringNode, ,, Node]
[., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node, tryFoldStringCharCodeAt, (]
[,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node, tryFoldStringCharCodeAt, (, Node, n, ,, Node]
[), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, Node, tryFoldStringCharCodeAt, (, Node, n, ,, Node, stringNode, ,]
[;, return, resultNode, ;, }, private, Node, tryFoldStringCharCodeAt, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions]
[;, }, private, Node, tryFoldStringCharCodeAt, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, .]
[., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), )]
[), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode]
[., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, index, ;]
[;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1]
[., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (]
[), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&]
[., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null]
[., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext]
[), {, index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }]
[&&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int, ), arg1, ., getDouble, (, )]
[&&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int]
[!=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =]
[&&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int]
[&&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int, ), arg1, ., getDouble, (, )]
[., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int, ), arg1]
[), {, index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }]
[==, null, ), {, index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n]
[., getNext, (, ), ==, null, ), {, index, =, (, int, ), arg1, ., getDouble, (, ), ;, }]
[), {, index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }]
[=, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, index]
[;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||, stringAsString, ., length, (, ), <=]
[;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||, stringAsString, ., length, (, ), <=]
[., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||, stringAsString, .]
[;, }, if, (, index, <, 0, ||, stringAsString, ., length, (, ), <=, index, ), {, return, n, ;]
[), {, return, n, ;, }, Node, resultNode, =, IR, ., number, (, stringAsString, ., charAt, (, index, ), )]
[||, stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., number]
[<, 0, ||, stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR]
[||, stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., number]
[), {, return, n, ;, }, Node, resultNode, =, IR, ., number, (, stringAsString, ., charAt, (, index, ), )]
[<=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., number, (, stringAsString, ., charAt, (, index]
[., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., number, (, stringAsString]
[), {, return, n, ;, }, Node, resultNode, =, IR, ., number, (, stringAsString, ., charAt, (, index, ), )]
[;, }, Node, resultNode, =, IR, ., number, (, stringAsString, ., charAt, (, index, ), ), ;, Node, parent, =]
[;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange]
[., number, (, stringAsString, ., charAt, (, index, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;]
[., charAt, (, index, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (]
[), ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, )]
[;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, int]
[., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode]
[;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, int, jsSplitMatch, (, String, stringValue, ,, int, startIndex, ,, String]
[., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, int, jsSplitMatch, (]
[,, resultNode, ), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, int, jsSplitMatch, (, String, stringValue, ,, int]
[), ;, reportCodeChange, (, ), ;, return, resultNode, ;, }, private, int, jsSplitMatch, (, String, stringValue, ,, int, startIndex, ,]
[;, return, resultNode, ;, }, private, int, jsSplitMatch, (, String, stringValue, ,, int, startIndex, ,, String, separator, ), {, if]
[;, }, private, int, jsSplitMatch, (, String, stringValue, ,, int, startIndex, ,, String, separator, ), {, if, (, startIndex, +]
[), {, return, -, 1, ;, }, int, matchIndex, =, stringValue, ., indexOf, (, separator, ,, startIndex, ), ;, if]
[>, stringValue, ., length, (, ), ), {, return, -, 1, ;, }, int, matchIndex, =, stringValue, ., indexOf, (]
[+, separator, ., length, (, ), >, stringValue, ., length, (, ), ), {, return, -, 1, ;, }, int]
[>, stringValue, ., length, (, ), ), {, return, -, 1, ;, }, int, matchIndex, =, stringValue, ., indexOf, (]
[., length, (, ), >, stringValue, ., length, (, ), ), {, return, -, 1, ;, }, int, matchIndex, =]
[), {, return, -, 1, ;, }, int, matchIndex, =, stringValue, ., indexOf, (, separator, ,, startIndex, ), ;, if]
[., length, (, ), ), {, return, -, 1, ;, }, int, matchIndex, =, stringValue, ., indexOf, (, separator, ,]
[;, }, int, matchIndex, =, stringValue, ., indexOf, (, separator, ,, startIndex, ), ;, if, (, matchIndex, <, 0, )]
[;, }, int, matchIndex, =, stringValue, ., indexOf, (, separator, ,, startIndex, ), ;, if, (, matchIndex, <, 0, )]
[;, if, (, matchIndex, <, 0, ), {, return, -, 1, ;, }, return, matchIndex, ;, }, private, String, []
[., indexOf, (, separator, ,, startIndex, ), ;, if, (, matchIndex, <, 0, ), {, return, -, 1, ;, }]
[,, startIndex, ), ;, if, (, matchIndex, <, 0, ), {, return, -, 1, ;, }, return, matchIndex, ;, }]
[), ;, if, (, matchIndex, <, 0, ), {, return, -, 1, ;, }, return, matchIndex, ;, }, private, String]
[), {, return, -, 1, ;, }, return, matchIndex, ;, }, private, String, [, ], jsSplit, (, String, stringValue, ,]
[<, 0, ), {, return, -, 1, ;, }, return, matchIndex, ;, }, private, String, [, ], jsSplit, (, String]
[), {, return, -, 1, ;, }, return, matchIndex, ;, }, private, String, [, ], jsSplit, (, String, stringValue, ,]
[;, }, return, matchIndex, ;, }, private, String, [, ], jsSplit, (, String, stringValue, ,, String, separator, ,, int, limit]
[;, }, return, matchIndex, ;, }, private, String, [, ], jsSplit, (, String, stringValue, ,, String, separator, ,, int, limit]
[;, }, private, String, [, ], jsSplit, (, String, stringValue, ,, String, separator, ,, int, limit, ), {, Preconditions, .]
[;, Preconditions, ., checkArgument, (, stringValue, !=, null, ), ;, if, (, limit, ==, 0, ), {, return, new, String]
[., checkArgument, (, limit, >=, 0, ), ;, Preconditions, ., checkArgument, (, stringValue, !=, null, ), ;, if, (, limit]
[), ;, Preconditions, ., checkArgument, (, stringValue, !=, null, ), ;, if, (, limit, ==, 0, ), {, return, new]
[>=, 0, ), ;, Preconditions, ., checkArgument, (, stringValue, !=, null, ), ;, if, (, limit, ==, 0, ), {]
[), ;, Preconditions, ., checkArgument, (, stringValue, !=, null, ), ;, if, (, limit, ==, 0, ), {, return, new]
[;, if, (, limit, ==, 0, ), {, return, new, String, [, 0, ], ;, }, if, (, separator, ==]
[., checkArgument, (, stringValue, !=, null, ), ;, if, (, limit, ==, 0, ), {, return, new, String, [, 0]
[), ;, if, (, limit, ==, 0, ), {, return, new, String, [, 0, ], ;, }, if, (, separator]
[!=, null, ), ;, if, (, limit, ==, 0, ), {, return, new, String, [, 0, ], ;, }, if]
[), ;, if, (, limit, ==, 0, ), {, return, new, String, [, 0, ], ;, }, if, (, separator]
[), {, return, new, String, [, 0, ], ;, }, if, (, separator, ==, null, ), {, return, new, String]
[==, 0, ), {, return, new, String, [, 0, ], ;, }, if, (, separator, ==, null, ), {, return]
[), {, return, new, String, [, 0, ], ;, }, if, (, separator, ==, null, ), {, return, new, String]
[;, }, if, (, separator, ==, null, ), {, return, new, String, [, ], {, stringValue, }, ;, }, List]
[], ;, }, if, (, separator, ==, null, ), {, return, new, String, [, ], {, stringValue, }, ;, }]
[), {, return, new, String, [, ], {, stringValue, }, ;, }, List, <, String, >, splitStrings, =, Lists, .]
[==, null, ), {, return, new, String, [, ], {, stringValue, }, ;, }, List, <, String, >, splitStrings, =]
[), {, return, new, String, [, ], {, stringValue, }, ;, }, List, <, String, >, splitStrings, =, Lists, .]
[;, }, List, <, String, >, splitStrings, =, Lists, ., newArrayList, (, ), ;, if, (, separator, ., length, (]
[;, }, List, <, String, >, splitStrings, =, Lists, ., newArrayList, (, ), ;, if, (, separator, ., length, (]
[}, ;, }, List, <, String, >, splitStrings, =, Lists, ., newArrayList, (, ), ;, if, (, separator, ., length]
[;, if, (, separator, ., length, (, ), ==, 0, ), {, for, (, int, i, =, 0, ;, i]
[., newArrayList, (, ), ;, if, (, separator, ., length, (, ), ==, 0, ), {, for, (, int, i]
[), {, for, (, int, i, =, 0, ;, i, <, stringValue, ., length, (, ), &&, i, <, limit]
[==, 0, ), {, for, (, int, i, =, 0, ;, i, <, stringValue, ., length, (, ), &&, i]
[., length, (, ), ==, 0, ), {, for, (, int, i, =, 0, ;, i, <, stringValue, ., length]
[), {, for, (, int, i, =, 0, ;, i, <, stringValue, ., length, (, ), &&, i, <, limit]
[;, i, <, stringValue, ., length, (, ), &&, i, <, limit, ;, i, ++, ), {, splitStrings, ., add]
[;, i, ++, ), {, splitStrings, ., add, (, stringValue, ., substring, (, i, ,, i, +, 1, ), )]
[&&, i, <, limit, ;, i, ++, ), {, splitStrings, ., add, (, stringValue, ., substring, (, i, ,, i]
[<, stringValue, ., length, (, ), &&, i, <, limit, ;, i, ++, ), {, splitStrings, ., add, (, stringValue]
[&&, i, <, limit, ;, i, ++, ), {, splitStrings, ., add, (, stringValue, ., substring, (, i, ,, i]
[., length, (, ), &&, i, <, limit, ;, i, ++, ), {, splitStrings, ., add, (, stringValue, ., substring]
[;, i, ++, ), {, splitStrings, ., add, (, stringValue, ., substring, (, i, ,, i, +, 1, ), )]
[<, limit, ;, i, ++, ), {, splitStrings, ., add, (, stringValue, ., substring, (, i, ,, i, +, 1]
[;, i, ++, ), {, splitStrings, ., add, (, stringValue, ., substring, (, i, ,, i, +, 1, ), )]
[), {, splitStrings, ., add, (, stringValue, ., substring, (, i, ,, i, +, 1, ), ), ;, }, }]
[++, ), {, splitStrings, ., add, (, stringValue, ., substring, (, i, ,, i, +, 1, ), ), ;, }]
[;, }, }, else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (, (, matchIndex, =, jsSplitMatch, (, stringValue]
[., add, (, stringValue, ., substring, (, i, ,, i, +, 1, ), ), ;, }, }, else, {, int]
[), ;, }, }, else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (, (, matchIndex, =, jsSplitMatch, (]
[., substring, (, i, ,, i, +, 1, ), ), ;, }, }, else, {, int, startIndex, =, 0, ,]
[,, i, +, 1, ), ), ;, }, }, else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (]
[), ), ;, }, }, else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (, (, matchIndex, =, jsSplitMatch]
[+, 1, ), ), ;, }, }, else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (, (, matchIndex]
[), ), ;, }, }, else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (, (, matchIndex, =, jsSplitMatch]
[,, matchIndex, ;, while, (, (, matchIndex, =, jsSplitMatch, (, stringValue, ,, startIndex, ,, separator, ), ), >=, 0, &&]
[), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,, matchIndex, ), ), ;, startIndex, =, matchIndex, +]
[&&, splitStrings, ., size, (, ), <, limit, ), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,]
[>=, 0, &&, splitStrings, ., size, (, ), <, limit, ), {, splitStrings, ., add, (, stringValue, ., substring, (]
[=, jsSplitMatch, (, stringValue, ,, startIndex, ,, separator, ), ), >=, 0, &&, splitStrings, ., size, (, ), <, limit]
[), >=, 0, &&, splitStrings, ., size, (, ), <, limit, ), {, splitStrings, ., add, (, stringValue, ., substring]
[,, startIndex, ,, separator, ), ), >=, 0, &&, splitStrings, ., size, (, ), <, limit, ), {, splitStrings, .]
[,, separator, ), ), >=, 0, &&, splitStrings, ., size, (, ), <, limit, ), {, splitStrings, ., add, (]
[), ), >=, 0, &&, splitStrings, ., size, (, ), <, limit, ), {, splitStrings, ., add, (, stringValue, .]
[&&, splitStrings, ., size, (, ), <, limit, ), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,]
[), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,, matchIndex, ), ), ;, startIndex, =, matchIndex, +]
[<, limit, ), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,, matchIndex, ), ), ;, startIndex, =]
[., size, (, ), <, limit, ), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,, matchIndex, )]
[), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,, matchIndex, ), ), ;, startIndex, =, matchIndex, +]
[;, startIndex, =, matchIndex, +, separator, ., length, (, ), ;, }, if, (, splitStrings, ., size, (, ), <]
[., add, (, stringValue, ., substring, (, startIndex, ,, matchIndex, ), ), ;, startIndex, =, matchIndex, +, separator, ., length]
[), ;, startIndex, =, matchIndex, +, separator, ., length, (, ), ;, }, if, (, splitStrings, ., size, (, )]
[., substring, (, startIndex, ,, matchIndex, ), ), ;, startIndex, =, matchIndex, +, separator, ., length, (, ), ;, }]
[,, matchIndex, ), ), ;, startIndex, =, matchIndex, +, separator, ., length, (, ), ;, }, if, (, splitStrings, .]
[), ), ;, startIndex, =, matchIndex, +, separator, ., length, (, ), ;, }, if, (, splitStrings, ., size, (]
[=, matchIndex, +, separator, ., length, (, ), ;, }, if, (, splitStrings, ., size, (, ), <, limit, )]
[;, }, if, (, splitStrings, ., size, (, ), <, limit, ), {, if, (, startIndex, <, stringValue, ., length]
[+, separator, ., length, (, ), ;, }, if, (, splitStrings, ., size, (, ), <, limit, ), {, if]
[;, }, if, (, splitStrings, ., size, (, ), <, limit, ), {, if, (, startIndex, <, stringValue, ., length]
[., length, (, ), ;, }, if, (, splitStrings, ., size, (, ), <, limit, ), {, if, (, startIndex]
[), {, if, (, startIndex, <, stringValue, ., length, (, ), ), {, splitStrings, ., add, (, stringValue, ., substring]
[<, limit, ), {, if, (, startIndex, <, stringValue, ., length, (, ), ), {, splitStrings, ., add, (, stringValue]
[., size, (, ), <, limit, ), {, if, (, startIndex, <, stringValue, ., length, (, ), ), {, splitStrings]
[), {, if, (, startIndex, <, stringValue, ., length, (, ), ), {, splitStrings, ., add, (, stringValue, ., substring]
[), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ), ), ;, }, else, {, splitStrings, ., add]
[<, stringValue, ., length, (, ), ), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ), ), ;]
[), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ), ), ;, }, else, {, splitStrings, ., add]
[., length, (, ), ), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ), ), ;, }, else]
[;, }, else, {, splitStrings, ., add, (, "", ), ;, }, }, }, return, splitStrings, ., toArray, (, new]
[., add, (, stringValue, ., substring, (, startIndex, ), ), ;, }, else, {, splitStrings, ., add, (, "", )]
[), ;, }, else, {, splitStrings, ., add, (, "", ), ;, }, }, }, return, splitStrings, ., toArray, (]
[., substring, (, startIndex, ), ), ;, }, else, {, splitStrings, ., add, (, "", ), ;, }, }, }]
[), ), ;, }, else, {, splitStrings, ., add, (, "", ), ;, }, }, }, return, splitStrings, ., toArray]
[;, }, }, }, return, splitStrings, ., toArray, (, new, String, [, splitStrings, ., size, (, ), ], ), ;]
[., add, (, "", ), ;, }, }, }, return, splitStrings, ., toArray, (, new, String, [, splitStrings, ., size]
[), ;, }, }, }, return, splitStrings, ., toArray, (, new, String, [, splitStrings, ., size, (, ), ], )]
[;, }, private, Node, tryFoldStringSplit, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, if, (, late, )]
[., toArray, (, new, String, [, splitStrings, ., size, (, ), ], ), ;, }, private, Node, tryFoldStringSplit, (, Node]
[), ;, }, private, Node, tryFoldStringSplit, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, if, (, late]
[], ), ;, }, private, Node, tryFoldStringSplit, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, if, (]
[., size, (, ), ], ), ;, }, private, Node, tryFoldStringSplit, (, Node, n, ,, Node, stringNode, ,, Node, arg1]
[), {, return, n, ;, }, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument]
[;, }, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString]
[;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, String, separator, =, null, ;, String, stringValue, =]
[., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), )]
[), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, String, separator, =, null, ;, String, stringValue]
[., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, String, separator, =]
[;, String, separator, =, null, ;, String, stringValue, =, stringNode, ., getString, (, ), ;, int, limit, =, stringValue, .]
[., checkArgument, (, stringNode, ., isString, (, ), ), ;, String, separator, =, null, ;, String, stringValue, =, stringNode, .]
[), ;, String, separator, =, null, ;, String, stringValue, =, stringNode, ., getString, (, ), ;, int, limit, =, stringValue]
[., isString, (, ), ), ;, String, separator, =, null, ;, String, stringValue, =, stringNode, ., getString, (, ), ;]
[;, String, stringValue, =, stringNode, ., getString, (, ), ;, int, limit, =, stringValue, ., length, (, ), +, 1]
[;, int, limit, =, stringValue, ., length, (, ), +, 1, ;, if, (, arg1, !=, null, ), {, if]
[., getString, (, ), ;, int, limit, =, stringValue, ., length, (, ), +, 1, ;, if, (, arg1, !=]
[;, if, (, arg1, !=, null, ), {, if, (, arg1, ., isString, (, ), ), {, separator, =, arg1]
[+, 1, ;, if, (, arg1, !=, null, ), {, if, (, arg1, ., isString, (, ), ), {, separator]
[., length, (, ), +, 1, ;, if, (, arg1, !=, null, ), {, if, (, arg1, ., isString, (]
[;, if, (, arg1, !=, null, ), {, if, (, arg1, ., isString, (, ), ), {, separator, =, arg1]
[), {, if, (, arg1, ., isString, (, ), ), {, separator, =, arg1, ., getString, (, ), ;, }]
[!=, null, ), {, if, (, arg1, ., isString, (, ), ), {, separator, =, arg1, ., getString, (, )]
[), {, if, (, arg1, ., isString, (, ), ), {, separator, =, arg1, ., getString, (, ), ;, }]
[), {, separator, =, arg1, ., getString, (, ), ;, }, else, if, (, !, arg1, ., isNull, (, )]
[., isString, (, ), ), {, separator, =, arg1, ., getString, (, ), ;, }, else, if, (, !, arg1]
[=, arg1, ., getString, (, ), ;, }, else, if, (, !, arg1, ., isNull, (, ), ), {, return]
[;, }, else, if, (, !, arg1, ., isNull, (, ), ), {, return, n, ;, }, Node, arg2, =]
[., getString, (, ), ;, }, else, if, (, !, arg1, ., isNull, (, ), ), {, return, n, ;]
[), {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=, null]
[), {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=, null]
[., isNull, (, ), ), {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if]
[;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (]
[;, if, (, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, limit, =, Math]
[., getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), )]
[), {, if, (, arg2, ., isNumber, (, ), ), {, limit, =, Math, ., min, (, (, int, )]
[!=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, limit, =, Math, ., min, (, (]
[), {, if, (, arg2, ., isNumber, (, ), ), {, limit, =, Math, ., min, (, (, int, )]
[), {, limit, =, Math, ., min, (, (, int, ), arg2, ., getDouble, (, ), ,, limit, ), ;]
[., isNumber, (, ), ), {, limit, =, Math, ., min, (, (, int, ), arg2, ., getDouble, (, )]
[=, Math, ., min, (, (, int, ), arg2, ., getDouble, (, ), ,, limit, ), ;, if, (, limit]
[;, if, (, limit, <, 0, ), {, return, n, ;, }, }, else, {, return, n, ;, }, }]
[., min, (, (, int, ), arg2, ., getDouble, (, ), ,, limit, ), ;, if, (, limit, <, 0]
[,, limit, ), ;, if, (, limit, <, 0, ), {, return, n, ;, }, }, else, {, return, n]
[,, limit, ), ;, if, (, limit, <, 0, ), {, return, n, ;, }, }, else, {, return, n]
[., getDouble, (, ), ,, limit, ), ;, if, (, limit, <, 0, ), {, return, n, ;, }, }]
[), ;, if, (, limit, <, 0, ), {, return, n, ;, }, }, else, {, return, n, ;, }]
[), {, return, n, ;, }, }, else, {, return, n, ;, }, }, }, String, [, ], stringArray, =]
[<, 0, ), {, return, n, ;, }, }, else, {, return, n, ;, }, }, }, String, [, ]]
[), {, return, n, ;, }, }, else, {, return, n, ;, }, }, }, String, [, ], stringArray, =]
[;, }, }, else, {, return, n, ;, }, }, }, String, [, ], stringArray, =, jsSplit, (, stringValue, ,]
[;, }, }, }, String, [, ], stringArray, =, jsSplit, (, stringValue, ,, separator, ,, limit, ), ;, Node, arrayOfStrings]
[;, Node, arrayOfStrings, =, IR, ., arraylit, (, ), ;, for, (, int, i, =, 0, ;, i, <, stringArray]
[,, separator, ,, limit, ), ;, Node, arrayOfStrings, =, IR, ., arraylit, (, ), ;, for, (, int, i, =]
[,, limit, ), ;, Node, arrayOfStrings, =, IR, ., arraylit, (, ), ;, for, (, int, i, =, 0, ;]
[), ;, Node, arrayOfStrings, =, IR, ., arraylit, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, stringArray, ., length, ;, i, ++, ), {, arrayOfStrings, .]
[., arraylit, (, ), ;, for, (, int, i, =, 0, ;, i, <, stringArray, ., length, ;, i, ++]
[;, i, <, stringArray, ., length, ;, i, ++, ), {, arrayOfStrings, ., addChildToBack, (, IR, ., string, (, stringArray]
[;, i, ++, ), {, arrayOfStrings, ., addChildToBack, (, IR, ., string, (, stringArray, [, i, ], ), ., srcref]
[<, stringArray, ., length, ;, i, ++, ), {, arrayOfStrings, ., addChildToBack, (, IR, ., string, (, stringArray, [, i]
[;, i, ++, ), {, arrayOfStrings, ., addChildToBack, (, IR, ., string, (, stringArray, [, i, ], ), ., srcref]
[., length, ;, i, ++, ), {, arrayOfStrings, ., addChildToBack, (, IR, ., string, (, stringArray, [, i, ], )]
[), {, arrayOfStrings, ., addChildToBack, (, IR, ., string, (, stringArray, [, i, ], ), ., srcref, (, stringNode, )]
[++, ), {, arrayOfStrings, ., addChildToBack, (, IR, ., string, (, stringArray, [, i, ], ), ., srcref, (, stringNode]
[;, }, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, arrayOfStrings, ), ;]
[., addChildToBack, (, IR, ., string, (, stringArray, [, i, ], ), ., srcref, (, stringNode, ), ), ;, }]
[), ;, }, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, arrayOfStrings, )]
[., srcref, (, stringNode, ), ), ;, }, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild]
[., string, (, stringArray, [, i, ], ), ., srcref, (, stringNode, ), ), ;, }, Node, parent, =, n]
[), ., srcref, (, stringNode, ), ), ;, }, Node, parent, =, n, ., getParent, (, ), ;, parent, .]
[[, i, ], ), ., srcref, (, stringNode, ), ), ;, }, Node, parent, =, n, ., getParent, (, )]
[], ), ., srcref, (, stringNode, ), ), ;, }, Node, parent, =, n, ., getParent, (, ), ;, parent]
[), ), ;, }, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, arrayOfStrings]
[;, parent, ., replaceChild, (, n, ,, arrayOfStrings, ), ;, reportCodeChange, (, ), ;, return, arrayOfStrings, ;, }, }]
[., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, arrayOfStrings, ), ;, reportCodeChange, (, ), ;, return, arrayOfStrings]
[;, reportCodeChange, (, ), ;, return, arrayOfStrings, ;, }, }]
[., replaceChild, (, n, ,, arrayOfStrings, ), ;, reportCodeChange, (, ), ;, return, arrayOfStrings, ;, }, }]
[,, arrayOfStrings, ), ;, reportCodeChange, (, ), ;, return, arrayOfStrings, ;, }, }]
[), ;, reportCodeChange, (, ), ;, return, arrayOfStrings, ;, }, }]
[;, return, arrayOfStrings, ;, }, }]
[;, }, }]
