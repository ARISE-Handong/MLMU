[ControlFlowGraph, ., Branch, >, entry, ;, ControlFlowGraph, (, N, entry, ,, boolean, nodeAnnotations, ,, boolean, edgeAnnotations, ), {, super, (]
[Branch, >, entry, ;, ControlFlowGraph, (, N, entry, ,, boolean, nodeAnnotations, ,, boolean, edgeAnnotations, ), {, super, (, nodeAnnotations, ,]
[;, ControlFlowGraph, (, N, entry, ,, boolean, nodeAnnotations, ,, boolean, edgeAnnotations, ), {, super, (, nodeAnnotations, ,, edgeAnnotations, ), ;]
[(, N, entry, ,, boolean, nodeAnnotations, ,, boolean, edgeAnnotations, ), {, super, (, nodeAnnotations, ,, edgeAnnotations, ), ;, implicitReturn, =]
[entry, ,, boolean, nodeAnnotations, ,, boolean, edgeAnnotations, ), {, super, (, nodeAnnotations, ,, edgeAnnotations, ), ;, implicitReturn, =, createDirectedGraphNode, (]
[nodeAnnotations, ,, boolean, edgeAnnotations, ), {, super, (, nodeAnnotations, ,, edgeAnnotations, ), ;, implicitReturn, =, createDirectedGraphNode, (, null, ), ;]
[nodeAnnotations, ,, boolean, edgeAnnotations, ), {, super, (, nodeAnnotations, ,, edgeAnnotations, ), ;, implicitReturn, =, createDirectedGraphNode, (, null, ), ;]
[), {, super, (, nodeAnnotations, ,, edgeAnnotations, ), ;, implicitReturn, =, createDirectedGraphNode, (, null, ), ;, this, ., entry, =]
[super, (, nodeAnnotations, ,, edgeAnnotations, ), ;, implicitReturn, =, createDirectedGraphNode, (, null, ), ;, this, ., entry, =, createDirectedGraphNode, (]
[createDirectedGraphNode, (, entry, ), ;, }, public, DiGraphNode, <, N, ,, ControlFlowGraph, ., Branch, >, getImplicitReturn, (, ), {, return]
[), {, return, implicitReturn, ;, }, public, DiGraphNode, <, N, ,, ControlFlowGraph, ., Branch, >, getEntry, (, ), {, return]
[return, entry, ;, }, public, boolean, isImplicitReturn, (, DiGraphNode, <, N, ,, ControlFlowGraph, ., Branch, >, node, ), {, return]
[return, entry, ;, }, public, boolean, isImplicitReturn, (, DiGraphNode, <, N, ,, ControlFlowGraph, ., Branch, >, node, ), {, return]
[;, }, public, boolean, isImplicitReturn, (, DiGraphNode, <, N, ,, ControlFlowGraph, ., Branch, >, node, ), {, return, node, ==]
[node, ), {, return, node, ==, implicitReturn, ;, }, public, void, connectToImplicitReturn, (, N, srcValue, ,, Branch, edgeValue, ), {]
[node, ), {, return, node, ==, implicitReturn, ;, }, public, void, connectToImplicitReturn, (, N, srcValue, ,, Branch, edgeValue, ), {]
[node, ==, implicitReturn, ;, }, public, void, connectToImplicitReturn, (, N, srcValue, ,, Branch, edgeValue, ), {, super, ., connect, (]
[implicitReturn, ;, }, public, void, connectToImplicitReturn, (, N, srcValue, ,, Branch, edgeValue, ), {, super, ., connect, (, srcValue, ,]
[}, public, void, connectToImplicitReturn, (, N, srcValue, ,, Branch, edgeValue, ), {, super, ., connect, (, srcValue, ,, edgeValue, ,]
[), ;, }, public, Comparator, <, DiGraphNode, <, N, ,, Branch, >, >, getOptionalNodeComparator, (, boolean, isForward, ), {, return]
[enum, Branch, {, ON_TRUE, ,, ON_FALSE, ,, UNCOND, ,, ON_EX, ,, SYN_BLOCK, ;, public, boolean, isConditional, (, ), {, return]
[enum, Branch, {, ON_TRUE, ,, ON_FALSE, ,, UNCOND, ,, ON_EX, ,, SYN_BLOCK, ;, public, boolean, isConditional, (, ), {, return]
[enum, Branch, {, ON_TRUE, ,, ON_FALSE, ,, UNCOND, ,, ON_EX, ,, SYN_BLOCK, ;, public, boolean, isConditional, (, ), {, return]
[{, ON_TRUE, ,, ON_FALSE, ,, UNCOND, ,, ON_EX, ,, SYN_BLOCK, ;, public, boolean, isConditional, (, ), {, return, this, ==]
[,, ON_FALSE, ,, UNCOND, ,, ON_EX, ,, SYN_BLOCK, ;, public, boolean, isConditional, (, ), {, return, this, ==, ON_TRUE, ||]
[,, ON_FALSE, ,, UNCOND, ,, ON_EX, ,, SYN_BLOCK, ;, public, boolean, isConditional, (, ), {, return, this, ==, ON_TRUE, ||]
[,, UNCOND, ,, ON_EX, ,, SYN_BLOCK, ;, public, boolean, isConditional, (, ), {, return, this, ==, ON_TRUE, ||, this, ==]
[{, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, if, (]
[Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, if, (, parent, ==]
[shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ), {, return]
[,, Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ), {, return, true, ;, }, return]
[Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ), {, return, true, ;, }, return, !]
[,, Node, parent, ), {, if, (, parent, ==, null, ), {, return, true, ;, }, return, !, isEnteringNewCfgNode, (]
[!, isEnteringNewCfgNode, (, n, ), ;, }, }, public, static, boolean, isEnteringNewCfgNode, (, Node, n, ), {, Node, parent, =]
[!, isEnteringNewCfgNode, (, n, ), ;, }, }, public, static, boolean, isEnteringNewCfgNode, (, Node, n, ), {, Node, parent, =]
[public, static, boolean, isEnteringNewCfgNode, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, switch, (]
[public, static, boolean, isEnteringNewCfgNode, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, switch, (]
[{, Node, parent, =, n, ., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case]
[{, Node, parent, =, n, ., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case]
[., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case]
[., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case]
[switch, (, parent, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case]
[switch, (, parent, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case]
[(, ), ), {, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., TRY, :, return]
[{, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., TRY, :, return, true, ;, case]
[{, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., TRY, :, return, true, ;, case]
[:, case, Token, ., SCRIPT, :, case, Token, ., TRY, :, return, true, ;, case, Token, ., FUNCTION, :, return]
[:, case, Token, ., SCRIPT, :, case, Token, ., TRY, :, return, true, ;, case, Token, ., FUNCTION, :, return]
[Token, ., SCRIPT, :, case, Token, ., TRY, :, return, true, ;, case, Token, ., FUNCTION, :, return, n, !=]
[Token, ., SCRIPT, :, case, Token, ., TRY, :, return, true, ;, case, Token, ., FUNCTION, :, return, n, !=]
[Token, ., SCRIPT, :, case, Token, ., TRY, :, return, true, ;, case, Token, ., FUNCTION, :, return, n, !=]
[;, case, Token, ., FUNCTION, :, return, n, !=, parent, ., getFirstChild, (, ), ., getNext, (, ), ;, case]
[;, case, Token, ., FUNCTION, :, return, n, !=, parent, ., getFirstChild, (, ), ., getNext, (, ), ;, case]
[:, return, n, !=, parent, ., getFirstChild, (, ), ., getNext, (, ), ;, case, Token, ., WHILE, :, case]
[:, return, n, !=, parent, ., getFirstChild, (, ), ., getNext, (, ), ;, case, Token, ., WHILE, :, case]
[., getFirstChild, (, ), ., getNext, (, ), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case]
[., getFirstChild, (, ), ., getNext, (, ), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case]
[getNext, (, ), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, return]
[getNext, (, ), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, return]
[getNext, (, ), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, return]
[case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, return, NodeUtil, ., getConditionExpression, (]
[WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, return, NodeUtil, ., getConditionExpression, (, parent, ), !=]
[Token, ., DO, :, case, Token, ., IF, :, return, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ;, case]
[Token, ., DO, :, case, Token, ., IF, :, return, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ;, case]
[., IF, :, return, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ;, case, Token, ., FOR, :, if, (]
[., IF, :, return, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ;, case, Token, ., FOR, :, if, (]
[NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (]
[), !=, n, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, parent, ), ), {, return]
[), !=, n, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, parent, ), ), {, return]
[n, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, parent, ), ), {, return, n, !=]
[n, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, parent, ), ), {, return, n, !=]
[., isForIn, (, parent, ), ), {, return, n, !=, parent, ., getFirstChild, (, ), ;, }, else, {, return]
[., isForIn, (, parent, ), ), {, return, n, !=, parent, ., getFirstChild, (, ), ;, }, else, {, return]
[., isForIn, (, parent, ), ), {, return, n, !=, parent, ., getFirstChild, (, ), ;, }, else, {, return]
[), ), {, return, n, !=, parent, ., getFirstChild, (, ), ;, }, else, {, return, NodeUtil, ., getConditionExpression, (]
[return, n, !=, parent, ., getFirstChild, (, ), ;, }, else, {, return, NodeUtil, ., getConditionExpression, (, parent, ), !=]
[., getFirstChild, (, ), ;, }, else, {, return, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ;, }, case]
[., getFirstChild, (, ), ;, }, else, {, return, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ;, }, case]
[}, else, {, return, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ;, }, case, Token, ., SWITCH, :, case]
[}, else, {, return, NodeUtil, ., getConditionExpression, (, parent, ), !=, n, ;, }, case, Token, ., SWITCH, :, case]
[., getConditionExpression, (, parent, ), !=, n, ;, }, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case]
[., getConditionExpression, (, parent, ), !=, n, ;, }, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case]
[!=, n, ;, }, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, ., CATCH, :, case]
[!=, n, ;, }, case, Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, ., CATCH, :, case]
[Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, ., CATCH, :, case, Token, ., WITH, :, return]
[Token, ., SWITCH, :, case, Token, ., CASE, :, case, Token, ., CATCH, :, case, Token, ., WITH, :, return]
[SWITCH, :, case, Token, ., CASE, :, case, Token, ., CATCH, :, case, Token, ., WITH, :, return, n, !=]
[SWITCH, :, case, Token, ., CASE, :, case, Token, ., CATCH, :, case, Token, ., WITH, :, return, n, !=]
[., CATCH, :, case, Token, ., WITH, :, return, n, !=, parent, ., getFirstChild, (, ), ;, default, :, return]
