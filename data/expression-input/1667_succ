[;, private, final, boolean, assumeStrictThis, ;, private, final, boolean, assumeMinimumCapture, ;, public, FunctionInjector, (, AbstractCompiler, compiler, ,, Supplier, <, String]
[., newHashSet, (, ), ;, private, final, boolean, assumeStrictThis, ;, private, final, boolean, assumeMinimumCapture, ;, public, FunctionInjector, (, AbstractCompiler, compiler]
[;, Preconditions, ., checkNotNull, (, safeNameIdSupplier, ), ;, this, ., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;]
[., checkNotNull, (, compiler, ), ;, Preconditions, ., checkNotNull, (, safeNameIdSupplier, ), ;, this, ., compiler, =, compiler, ;, this]
[), ;, Preconditions, ., checkNotNull, (, safeNameIdSupplier, ), ;, this, ., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier]
[;, this, ., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, this, ., allowDecomposition, =, allowDecomposition, ;, this]
[., checkNotNull, (, safeNameIdSupplier, ), ;, this, ., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, this, .]
[), ;, this, ., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, this, ., allowDecomposition, =, allowDecomposition, ;]
[=, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, this, ., allowDecomposition, =, allowDecomposition, ;, this, ., assumeStrictThis, =, assumeStrictThis]
[., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, this, ., allowDecomposition, =, allowDecomposition, ;, this, ., assumeStrictThis]
[;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, this, ., allowDecomposition, =, allowDecomposition, ;, this, ., assumeStrictThis, =, assumeStrictThis, ;, this]
[=, safeNameIdSupplier, ;, this, ., allowDecomposition, =, allowDecomposition, ;, this, ., assumeStrictThis, =, assumeStrictThis, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture]
[., safeNameIdSupplier, =, safeNameIdSupplier, ;, this, ., allowDecomposition, =, allowDecomposition, ;, this, ., assumeStrictThis, =, assumeStrictThis, ;, this, ., assumeMinimumCapture]
[;, this, ., allowDecomposition, =, allowDecomposition, ;, this, ., assumeStrictThis, =, assumeStrictThis, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, }]
[=, allowDecomposition, ;, this, ., assumeStrictThis, =, assumeStrictThis, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, }, enum, InliningMode, {, DIRECT]
[., allowDecomposition, =, allowDecomposition, ;, this, ., assumeStrictThis, =, assumeStrictThis, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, }, enum, InliningMode]
[;, this, ., assumeStrictThis, =, assumeStrictThis, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, }, enum, InliningMode, {, DIRECT, ,, BLOCK]
[=, assumeStrictThis, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, }, enum, InliningMode, {, DIRECT, ,, BLOCK, }, static, class, Reference]
[., assumeStrictThis, =, assumeStrictThis, ;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, }, enum, InliningMode, {, DIRECT, ,, BLOCK, }, static]
[;, this, ., assumeMinimumCapture, =, assumeMinimumCapture, ;, }, enum, InliningMode, {, DIRECT, ,, BLOCK, }, static, class, Reference, {, final]
[=, assumeMinimumCapture, ;, }, enum, InliningMode, {, DIRECT, ,, BLOCK, }, static, class, Reference, {, final, Node, callNode, ;, final]
[., assumeMinimumCapture, =, assumeMinimumCapture, ;, }, enum, InliningMode, {, DIRECT, ,, BLOCK, }, static, class, Reference, {, final, Node, callNode]
[;, }, enum, InliningMode, {, DIRECT, ,, BLOCK, }, static, class, Reference, {, final, Node, callNode, ;, final, JSModule, module]
[=, callNode, ;, this, ., module, =, module, ;, this, ., mode, =, mode, ;, }, }, private, static, final]
[., callNode, =, callNode, ;, this, ., module, =, module, ;, this, ., mode, =, mode, ;, }, }, private]
[;, this, ., module, =, module, ;, this, ., mode, =, mode, ;, }, }, private, static, final, int, NAME_COST_ESTIMATE]
[=, module, ;, this, ., mode, =, mode, ;, }, }, private, static, final, int, NAME_COST_ESTIMATE, =, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST]
[., module, =, module, ;, this, ., mode, =, mode, ;, }, }, private, static, final, int, NAME_COST_ESTIMATE, =, InlineCostEstimator]
[;, this, ., mode, =, mode, ;, }, }, private, static, final, int, NAME_COST_ESTIMATE, =, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ;, private]
[=, mode, ;, }, }, private, static, final, int, NAME_COST_ESTIMATE, =, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ;, private, static, final, int, COMMA_COST]
[., mode, =, mode, ;, }, }, private, static, final, int, NAME_COST_ESTIMATE, =, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ;, private, static, final]
[;, }, }, private, static, final, int, NAME_COST_ESTIMATE, =, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ;, private, static, final, int, COMMA_COST, =, 1]
[;, private, static, final, int, COMMA_COST, =, 1, ;, private, static, final, int, PAREN_COST, =, 2, ;, boolean, doesFunctionMeetMinimumRequirements, (]
[., ESTIMATED_IDENTIFIER_COST, ;, private, static, final, int, COMMA_COST, =, 1, ;, private, static, final, int, PAREN_COST, =, 2, ;, boolean]
[;, private, static, final, int, PAREN_COST, =, 2, ;, boolean, doesFunctionMeetMinimumRequirements, (, final, String, fnName, ,, Node, fnNode, ), {]
[;, boolean, doesFunctionMeetMinimumRequirements, (, final, String, fnName, ,, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode]
[;, if, (, !, compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, fnNode, ), ), {, return, false, ;, }]
[., getFunctionBody, (, fnNode, ), ;, if, (, !, compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, fnNode, ), )]
[), ;, if, (, !, compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, fnNode, ), ), {, return, false, ;]
[), {, return, false, ;, }, final, String, fnRecursionName, =, fnNode, ., getFirstChild, (, ), ., getString, (, ), ;]
[), {, return, false, ;, }, final, String, fnRecursionName, =, fnNode, ., getFirstChild, (, ), ., getString, (, ), ;]
[., isInlinableFunction, (, fnNode, ), ), {, return, false, ;, }, final, String, fnRecursionName, =, fnNode, ., getFirstChild, (, )]
[., getCodingConvention, (, ), ., isInlinableFunction, (, fnNode, ), ), {, return, false, ;, }, final, String, fnRecursionName, =, fnNode]
[), ), {, return, false, ;, }, final, String, fnRecursionName, =, fnNode, ., getFirstChild, (, ), ., getString, (, )]
[;, }, final, String, fnRecursionName, =, fnNode, ., getFirstChild, (, ), ., getString, (, ), ;, Preconditions, ., checkState, (]
[;, Preconditions, ., checkState, (, fnRecursionName, !=, null, ), ;, boolean, referencesArguments, =, NodeUtil, ., isNameReferenced, (, block, ,, "arguments"]
[., getString, (, ), ;, Preconditions, ., checkState, (, fnRecursionName, !=, null, ), ;, boolean, referencesArguments, =, NodeUtil, ., isNameReferenced]
[., getFirstChild, (, ), ., getString, (, ), ;, Preconditions, ., checkState, (, fnRecursionName, !=, null, ), ;, boolean, referencesArguments]
[;, boolean, referencesArguments, =, NodeUtil, ., isNameReferenced, (, block, ,, "arguments", ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, Predicate, <, Node]
[., checkState, (, fnRecursionName, !=, null, ), ;, boolean, referencesArguments, =, NodeUtil, ., isNameReferenced, (, block, ,, "arguments", ,, NodeUtil]
[), ;, boolean, referencesArguments, =, NodeUtil, ., isNameReferenced, (, block, ,, "arguments", ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, Predicate, <]
[!=, null, ), ;, boolean, referencesArguments, =, NodeUtil, ., isNameReferenced, (, block, ,, "arguments", ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;]
[), ;, boolean, referencesArguments, =, NodeUtil, ., isNameReferenced, (, block, ,, "arguments", ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, Predicate, <]
[;, Predicate, <, Node, >, p, =, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply]
[., isNameReferenced, (, block, ,, "arguments", ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, Predicate, <, Node, >, p, =, new, Predicate]
[,, "arguments", ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, Predicate, <, Node, >, p, =, new, Predicate, <, Node, >, (]
[,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, Predicate, <, Node, >, p, =, new, Predicate, <, Node, >, (, ), {]
[), ;, Predicate, <, Node, >, p, =, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean]
[., MATCH_NOT_FUNCTION, ), ;, Predicate, <, Node, >, p, =, new, Predicate, <, Node, >, (, ), {, @, Override]
[;, return, !, referencesArguments, &&, !, NodeUtil, ., has, (, block, ,, p, ,, Predicates, ., <, Node, >, alwaysTrue]
[), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ||, (, !, fnName, ., isEmpty, (]
[., isName, (, ), ), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ||, (, !]
[;, }, return, false, ;, }, }, ;, return, !, referencesArguments, &&, !, NodeUtil, ., has, (, block, ,, p]
[||, (, !, fnRecursionName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnRecursionName, ), )]
[||, (, !, fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnName, ), )]
[., equals, (, "eval", ), ||, (, !, fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), .]
[., getString, (, ), ., equals, (, "eval", ), ||, (, !, fnName, ., isEmpty, (, ), &&, n, .]
[), ||, (, !, fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnName, )]
[||, (, !, fnRecursionName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnRecursionName, ), )]
[), ||, (, !, fnRecursionName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnRecursionName, )]
[&&, n, ., getString, (, ), ., equals, (, fnName, ), ), ||, (, !, fnRecursionName, ., isEmpty, (, )]
[&&, n, ., getString, (, ), ., equals, (, fnName, ), ), ||, (, !, fnRecursionName, ., isEmpty, (, )]
[., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnName, ), ), ||, (, !, fnRecursionName]
[), ||, (, !, fnRecursionName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnRecursionName, )]
[., equals, (, fnName, ), ), ||, (, !, fnRecursionName, ., isEmpty, (, ), &&, n, ., getString, (, )]
[., getString, (, ), ., equals, (, fnName, ), ), ||, (, !, fnRecursionName, ., isEmpty, (, ), &&, n]
[), ), ||, (, !, fnRecursionName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnRecursionName]
[;, }, return, false, ;, }, }, ;, return, !, referencesArguments, &&, !, NodeUtil, ., has, (, block, ,, p]
[), ;, }, return, false, ;, }, }, ;, return, !, referencesArguments, &&, !, NodeUtil, ., has, (, block, ,]
[&&, n, ., getString, (, ), ., equals, (, fnRecursionName, ), ), ;, }, return, false, ;, }, }, ;]
[&&, n, ., getString, (, ), ., equals, (, fnRecursionName, ), ), ;, }, return, false, ;, }, }, ;]
[., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnRecursionName, ), ), ;, }, return, false]
[), ;, }, return, false, ;, }, }, ;, return, !, referencesArguments, &&, !, NodeUtil, ., has, (, block, ,]
[., equals, (, fnRecursionName, ), ), ;, }, return, false, ;, }, }, ;, return, !, referencesArguments, &&, !, NodeUtil]
[., getString, (, ), ., equals, (, fnRecursionName, ), ), ;, }, return, false, ;, }, }, ;, return, !]
[), ), ;, }, return, false, ;, }, }, ;, return, !, referencesArguments, &&, !, NodeUtil, ., has, (, block]
[;, }, }, ;, return, !, referencesArguments, &&, !, NodeUtil, ., has, (, block, ,, p, ,, Predicates, ., <]
[;, }, CanInlineResult, canInlineReferenceToFunction, (, NodeTraversal, t, ,, Node, callNode, ,, Node, fnNode, ,, Set, <, String, >, needAliases, ,]
[&&, !, NodeUtil, ., has, (, block, ,, p, ,, Predicates, ., <, Node, >, alwaysTrue, (, ), ), ;]
[&&, !, NodeUtil, ., has, (, block, ,, p, ,, Predicates, ., <, Node, >, alwaysTrue, (, ), ), ;]
[;, }, CanInlineResult, canInlineReferenceToFunction, (, NodeTraversal, t, ,, Node, callNode, ,, Node, fnNode, ,, Set, <, String, >, needAliases, ,]
[;, }, CanInlineResult, canInlineReferenceToFunction, (, NodeTraversal, t, ,, Node, callNode, ,, Node, fnNode, ,, Set, <, String, >, needAliases, ,]
[., has, (, block, ,, p, ,, Predicates, ., <, Node, >, alwaysTrue, (, ), ), ;, }, CanInlineResult, canInlineReferenceToFunction]
[,, p, ,, Predicates, ., <, Node, >, alwaysTrue, (, ), ), ;, }, CanInlineResult, canInlineReferenceToFunction, (, NodeTraversal, t, ,]
[,, Predicates, ., <, Node, >, alwaysTrue, (, ), ), ;, }, CanInlineResult, canInlineReferenceToFunction, (, NodeTraversal, t, ,, Node, callNode]
[), ;, }, CanInlineResult, canInlineReferenceToFunction, (, NodeTraversal, t, ,, Node, callNode, ,, Node, fnNode, ,, Set, <, String, >, needAliases]
[., <, Node, >, alwaysTrue, (, ), ), ;, }, CanInlineResult, canInlineReferenceToFunction, (, NodeTraversal, t, ,, Node, callNode, ,, Node]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, containsFunctions, ), {, if, (, !, assumeMinimumCapture, &&, !, t]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, containsFunctions, ), {, if, (, !, assumeMinimumCapture, &&, !, t]
[), ), {, return, CanInlineResult, ., NO, ;, }, if, (, containsFunctions, ), {, if, (, !, assumeMinimumCapture, &&, !]
[;, }, if, (, containsFunctions, ), {, if, (, !, assumeMinimumCapture, &&, !, t, ., inGlobalScope, (, ), ), {]
[., NO, ;, }, if, (, containsFunctions, ), {, if, (, !, assumeMinimumCapture, &&, !, t, ., inGlobalScope, (, )]
[), {, if, (, !, assumeMinimumCapture, &&, !, t, ., inGlobalScope, (, ), ), {, return, CanInlineResult, ., NO, ;]
[), {, return, CanInlineResult, ., NO, ;, }, else, if, (, NodeUtil, ., isWithinLoop, (, callNode, ), ), {, return]
[&&, !, t, ., inGlobalScope, (, ), ), {, return, CanInlineResult, ., NO, ;, }, else, if, (, NodeUtil, .]
[&&, !, t, ., inGlobalScope, (, ), ), {, return, CanInlineResult, ., NO, ;, }, else, if, (, NodeUtil, .]
[), {, return, CanInlineResult, ., NO, ;, }, else, if, (, NodeUtil, ., isWithinLoop, (, callNode, ), ), {, return]
[), {, return, CanInlineResult, ., NO, ;, }, else, if, (, NodeUtil, ., isWithinLoop, (, callNode, ), ), {, return]
[., inGlobalScope, (, ), ), {, return, CanInlineResult, ., NO, ;, }, else, if, (, NodeUtil, ., isWithinLoop, (, callNode]
[;, }, else, if, (, NodeUtil, ., isWithinLoop, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, }]
[., NO, ;, }, else, if, (, NodeUtil, ., isWithinLoop, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;]
[), {, return, CanInlineResult, ., NO, ;, }, }, if, (, referencesThis, &&, !, NodeUtil, ., isFunctionObjectCall, (, callNode, )]
[., isWithinLoop, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, }, if, (, referencesThis, &&, !, NodeUtil]
[), ), {, return, CanInlineResult, ., NO, ;, }, }, if, (, referencesThis, &&, !, NodeUtil, ., isFunctionObjectCall, (, callNode]
[;, }, }, if, (, referencesThis, &&, !, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, return, CanInlineResult, ., NO]
[., NO, ;, }, }, if, (, referencesThis, &&, !, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, return, CanInlineResult]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, canInlineReferenceDirectly, (]
[&&, !, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, mode, ==]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, canInlineReferenceDirectly, (]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, canInlineReferenceDirectly, (]
[., isFunctionObjectCall, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, mode, ==, InliningMode, ., DIRECT]
[), ), {, return, CanInlineResult, ., NO, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, canInlineReferenceDirectly]
[;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, canInlineReferenceDirectly, (, callNode, ,, fnNode, ), ;, }]
[., NO, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, canInlineReferenceDirectly, (, callNode, ,, fnNode, )]
[), {, return, canInlineReferenceDirectly, (, callNode, ,, fnNode, ), ;, }, else, {, return, canInlineReferenceAsStatementBlock, (, t, ,, callNode, ,]
[==, InliningMode, ., DIRECT, ), {, return, canInlineReferenceDirectly, (, callNode, ,, fnNode, ), ;, }, else, {, return, canInlineReferenceAsStatementBlock, (]
[), {, return, canInlineReferenceDirectly, (, callNode, ,, fnNode, ), ;, }, else, {, return, canInlineReferenceAsStatementBlock, (, t, ,, callNode, ,]
[., DIRECT, ), {, return, canInlineReferenceDirectly, (, callNode, ,, fnNode, ), ;, }, else, {, return, canInlineReferenceAsStatementBlock, (, t, ,]
[;, }, else, {, return, canInlineReferenceAsStatementBlock, (, t, ,, callNode, ,, fnNode, ,, needAliases, ), ;, }, }, private, boolean]
[,, fnNode, ), ;, }, else, {, return, canInlineReferenceAsStatementBlock, (, t, ,, callNode, ,, fnNode, ,, needAliases, ), ;, }]
[), ;, }, else, {, return, canInlineReferenceAsStatementBlock, (, t, ,, callNode, ,, fnNode, ,, needAliases, ), ;, }, }, private]
[;, }, }, private, boolean, isSupportedCallType, (, Node, callNode, ), {, if, (, !, callNode, ., getFirstChild, (, ), .]
[,, callNode, ,, fnNode, ,, needAliases, ), ;, }, }, private, boolean, isSupportedCallType, (, Node, callNode, ), {, if, (]
[,, fnNode, ,, needAliases, ), ;, }, }, private, boolean, isSupportedCallType, (, Node, callNode, ), {, if, (, !, callNode]
[,, needAliases, ), ;, }, }, private, boolean, isSupportedCallType, (, Node, callNode, ), {, if, (, !, callNode, ., getFirstChild]
[), ;, }, }, private, boolean, isSupportedCallType, (, Node, callNode, ), {, if, (, !, callNode, ., getFirstChild, (, )]
[), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, !, assumeStrictThis, ), {, Node, thisValue]
[), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, !, assumeStrictThis, ), {, Node, thisValue]
[., isName, (, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, !, assumeStrictThis]
[., getFirstChild, (, ), ., isName, (, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {]
[), {, if, (, !, assumeStrictThis, ), {, Node, thisValue, =, callNode, ., getFirstChild, (, ), ., getNext, (, )]
[., isFunctionObjectCall, (, callNode, ), ), {, if, (, !, assumeStrictThis, ), {, Node, thisValue, =, callNode, ., getFirstChild, (]
[), ), {, if, (, !, assumeStrictThis, ), {, Node, thisValue, =, callNode, ., getFirstChild, (, ), ., getNext, (]
[), {, Node, thisValue, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, thisValue, ==, null]
[), {, Node, thisValue, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, thisValue, ==, null]
[;, if, (, thisValue, ==, null, ||, !, thisValue, ., isThis, (, ), ), {, return, false, ;, }, }]
[., getNext, (, ), ;, if, (, thisValue, ==, null, ||, !, thisValue, ., isThis, (, ), ), {, return]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, thisValue, ==, null, ||, !, thisValue, ., isThis, (]
[), {, return, false, ;, }, }, }, else, if, (, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), {, return]
[||, !, thisValue, ., isThis, (, ), ), {, return, false, ;, }, }, }, else, if, (, NodeUtil, .]
[==, null, ||, !, thisValue, ., isThis, (, ), ), {, return, false, ;, }, }, }, else, if, (]
[||, !, thisValue, ., isThis, (, ), ), {, return, false, ;, }, }, }, else, if, (, NodeUtil, .]
[), {, return, false, ;, }, }, }, else, if, (, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), {, return]
[), {, return, false, ;, }, }, }, else, if, (, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), {, return]
[., isThis, (, ), ), {, return, false, ;, }, }, }, else, if, (, NodeUtil, ., isFunctionObjectApply, (, callNode]
[;, }, }, }, else, if, (, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), {, return, false, ;, }, }]
[), {, return, false, ;, }, }, return, true, ;, }, Node, inline, (, NodeTraversal, t, ,, Node, callNode, ,]
[., isFunctionObjectApply, (, callNode, ), ), {, return, false, ;, }, }, return, true, ;, }, Node, inline, (, NodeTraversal]
[), ), {, return, false, ;, }, }, return, true, ;, }, Node, inline, (, NodeTraversal, t, ,, Node, callNode]
[;, }, }, return, true, ;, }, Node, inline, (, NodeTraversal, t, ,, Node, callNode, ,, String, fnName, ,, Node]
[;, }, Node, inline, (, NodeTraversal, t, ,, Node, callNode, ,, String, fnName, ,, Node, fnNode, ,, InliningMode, mode, )]
[;, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, inlineReturnValue, (, callNode, ,, fnNode, ), ;, }, else]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, if, (, mode, ==, InliningMode, .]
[), ;, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, inlineReturnValue, (, callNode, ,, fnNode, ), ;, }]
[., isNormalized, (, ), ), ;, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, inlineReturnValue, (, callNode, ,]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return]
[), {, return, inlineReturnValue, (, callNode, ,, fnNode, ), ;, }, else, {, return, inlineFunction, (, callNode, ,, fnNode, ,]
[==, InliningMode, ., DIRECT, ), {, return, inlineReturnValue, (, callNode, ,, fnNode, ), ;, }, else, {, return, inlineFunction, (]
[), {, return, inlineReturnValue, (, callNode, ,, fnNode, ), ;, }, else, {, return, inlineFunction, (, callNode, ,, fnNode, ,]
[., DIRECT, ), {, return, inlineReturnValue, (, callNode, ,, fnNode, ), ;, }, else, {, return, inlineFunction, (, callNode, ,]
[;, }, else, {, return, inlineFunction, (, callNode, ,, fnNode, ,, fnName, ), ;, }, }, private, Node, inlineReturnValue, (]
[,, fnNode, ), ;, }, else, {, return, inlineFunction, (, callNode, ,, fnNode, ,, fnName, ), ;, }, }, private]
[), ;, }, else, {, return, inlineFunction, (, callNode, ,, fnNode, ,, fnName, ), ;, }, }, private, Node, inlineReturnValue]
[;, }, }, private, Node, inlineReturnValue, (, Node, callNode, ,, Node, fnNode, ), {, Node, block, =, fnNode, ., getLastChild]
[,, fnNode, ,, fnName, ), ;, }, }, private, Node, inlineReturnValue, (, Node, callNode, ,, Node, fnNode, ), {, Node]
[,, fnName, ), ;, }, }, private, Node, inlineReturnValue, (, Node, callNode, ,, Node, fnNode, ), {, Node, block, =]
[), ;, }, }, private, Node, inlineReturnValue, (, Node, callNode, ,, Node, fnNode, ), {, Node, block, =, fnNode, .]
[;, Node, callParentNode, =, callNode, ., getParent, (, ), ;, Map, <, String, ,, Node, >, argMap, =, FunctionArgumentInjector, .]
[., getLastChild, (, ), ;, Node, callParentNode, =, callNode, ., getParent, (, ), ;, Map, <, String, ,, Node, >]
[;, Map, <, String, ,, Node, >, argMap, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,, this, ., safeNameIdSupplier]
[., getParent, (, ), ;, Map, <, String, ,, Node, >, argMap, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode]
[;, Node, newExpression, ;, if, (, !, block, ., hasChildren, (, ), ), {, Node, srcLocation, =, block, ;, newExpression]
[., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,, this, ., safeNameIdSupplier, ), ;, Node, newExpression, ;, if, (, !, block, .]
[,, callNode, ,, this, ., safeNameIdSupplier, ), ;, Node, newExpression, ;, if, (, !, block, ., hasChildren, (, ), )]
[,, this, ., safeNameIdSupplier, ), ;, Node, newExpression, ;, if, (, !, block, ., hasChildren, (, ), ), {, Node]
[), ;, Node, newExpression, ;, if, (, !, block, ., hasChildren, (, ), ), {, Node, srcLocation, =, block, ;]
[., safeNameIdSupplier, ), ;, Node, newExpression, ;, if, (, !, block, ., hasChildren, (, ), ), {, Node, srcLocation, =]
[), {, Node, srcLocation, =, block, ;, newExpression, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, else, {, Node]
[), {, Node, srcLocation, =, block, ;, newExpression, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, else, {, Node]
[., hasChildren, (, ), ), {, Node, srcLocation, =, block, ;, newExpression, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;]
[;, newExpression, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, else, {, Node, returnNode, =, block, ., getFirstChild, (]
[=, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, else, {, Node, returnNode, =, block, ., getFirstChild, (, ), ;]
[;, }, else, {, Node, returnNode, =, block, ., getFirstChild, (, ), ;, Preconditions, ., checkArgument, (, returnNode, ., isReturn]
[., newUndefinedNode, (, srcLocation, ), ;, }, else, {, Node, returnNode, =, block, ., getFirstChild, (, ), ;, Preconditions, .]
[), ;, }, else, {, Node, returnNode, =, block, ., getFirstChild, (, ), ;, Preconditions, ., checkArgument, (, returnNode, .]
[;, Preconditions, ., checkArgument, (, returnNode, ., isReturn, (, ), ), ;, Node, safeReturnNode, =, returnNode, ., cloneTree, (, )]
[., getFirstChild, (, ), ;, Preconditions, ., checkArgument, (, returnNode, ., isReturn, (, ), ), ;, Node, safeReturnNode, =, returnNode]
[;, Node, safeReturnNode, =, returnNode, ., cloneTree, (, ), ;, Node, inlineResult, =, FunctionArgumentInjector, ., inject, (, null, ,, safeReturnNode]
[., checkArgument, (, returnNode, ., isReturn, (, ), ), ;, Node, safeReturnNode, =, returnNode, ., cloneTree, (, ), ;, Node]
[), ;, Node, safeReturnNode, =, returnNode, ., cloneTree, (, ), ;, Node, inlineResult, =, FunctionArgumentInjector, ., inject, (, null, ,]
[., isReturn, (, ), ), ;, Node, safeReturnNode, =, returnNode, ., cloneTree, (, ), ;, Node, inlineResult, =, FunctionArgumentInjector, .]
[;, Node, inlineResult, =, FunctionArgumentInjector, ., inject, (, null, ,, safeReturnNode, ,, null, ,, argMap, ), ;, Preconditions, ., checkArgument]
[., cloneTree, (, ), ;, Node, inlineResult, =, FunctionArgumentInjector, ., inject, (, null, ,, safeReturnNode, ,, null, ,, argMap, )]
[;, Preconditions, ., checkArgument, (, safeReturnNode, ==, inlineResult, ), ;, newExpression, =, safeReturnNode, ., removeFirstChild, (, ), ;, }, callParentNode]
[., inject, (, null, ,, safeReturnNode, ,, null, ,, argMap, ), ;, Preconditions, ., checkArgument, (, safeReturnNode, ==, inlineResult, )]
[,, safeReturnNode, ,, null, ,, argMap, ), ;, Preconditions, ., checkArgument, (, safeReturnNode, ==, inlineResult, ), ;, newExpression, =, safeReturnNode]
[,, null, ,, argMap, ), ;, Preconditions, ., checkArgument, (, safeReturnNode, ==, inlineResult, ), ;, newExpression, =, safeReturnNode, ., removeFirstChild]
[,, argMap, ), ;, Preconditions, ., checkArgument, (, safeReturnNode, ==, inlineResult, ), ;, newExpression, =, safeReturnNode, ., removeFirstChild, (, )]
[), ;, Preconditions, ., checkArgument, (, safeReturnNode, ==, inlineResult, ), ;, newExpression, =, safeReturnNode, ., removeFirstChild, (, ), ;, }]
[;, newExpression, =, safeReturnNode, ., removeFirstChild, (, ), ;, }, callParentNode, ., replaceChild, (, callNode, ,, newExpression, ), ;, return]
[., checkArgument, (, safeReturnNode, ==, inlineResult, ), ;, newExpression, =, safeReturnNode, ., removeFirstChild, (, ), ;, }, callParentNode, ., replaceChild]
[), ;, newExpression, =, safeReturnNode, ., removeFirstChild, (, ), ;, }, callParentNode, ., replaceChild, (, callNode, ,, newExpression, ), ;]
[==, inlineResult, ), ;, newExpression, =, safeReturnNode, ., removeFirstChild, (, ), ;, }, callParentNode, ., replaceChild, (, callNode, ,, newExpression]
[), ;, newExpression, =, safeReturnNode, ., removeFirstChild, (, ), ;, }, callParentNode, ., replaceChild, (, callNode, ,, newExpression, ), ;]
[=, safeReturnNode, ., removeFirstChild, (, ), ;, }, callParentNode, ., replaceChild, (, callNode, ,, newExpression, ), ;, return, newExpression, ;]
[;, }, callParentNode, ., replaceChild, (, callNode, ,, newExpression, ), ;, return, newExpression, ;, }, private, enum, CallSiteType, {, UNSUPPORTED]
[., removeFirstChild, (, ), ;, }, callParentNode, ., replaceChild, (, callNode, ,, newExpression, ), ;, return, newExpression, ;, }, private]
[;, return, newExpression, ;, }, private, enum, CallSiteType, {, UNSUPPORTED, (, ), {, @, Override, public, void, prepare, (, FunctionInjector]
[., replaceChild, (, callNode, ,, newExpression, ), ;, return, newExpression, ;, }, private, enum, CallSiteType, {, UNSUPPORTED, (, ), {]
[,, newExpression, ), ;, return, newExpression, ;, }, private, enum, CallSiteType, {, UNSUPPORTED, (, ), {, @, Override, public, void]
[), ;, return, newExpression, ;, }, private, enum, CallSiteType, {, UNSUPPORTED, (, ), {, @, Override, public, void, prepare, (]
[;, }, private, enum, CallSiteType, {, UNSUPPORTED, (, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,, Node]
[;, }, }, ,, SIMPLE_CALL, (, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, )]
[), ;, }, }, ,, SIMPLE_CALL, (, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode]
[;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;]
[., moveExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (]
[., getDecomposer, (, ), ., moveExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;]
[), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, )]
[;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;, }]
[., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;, callSiteType, ., prepare, (, injector]
[), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;]
[;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;, }, }, ,, DECOMPOSABLE_EXPRESSION, (, ), {, @, Override, public]
[., checkState, (, this, !=, callSiteType, ), ;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;, }, }, ,]
[), ;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;, }, }, ,, DECOMPOSABLE_EXPRESSION, (, ), {, @, Override]
[!=, callSiteType, ), ;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;, }, }, ,, DECOMPOSABLE_EXPRESSION, (, ), {]
[), ;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;, }, }, ,, DECOMPOSABLE_EXPRESSION, (, ), {, @, Override]
[;, }, }, ,, DECOMPOSABLE_EXPRESSION, (, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, )]
[., prepare, (, injector, ,, callNode, ), ;, }, }, ,, DECOMPOSABLE_EXPRESSION, (, ), {, @, Override, public, void, prepare]
[,, callNode, ), ;, }, }, ,, DECOMPOSABLE_EXPRESSION, (, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,]
[), ;, }, }, ,, DECOMPOSABLE_EXPRESSION, (, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode]
[;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;]
[., maybeExposeExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (]
[., getDecomposer, (, ), ., maybeExposeExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;]
[), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, )]
[;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;, }]
[., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;, callSiteType, ., prepare, (, injector]
[), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;]
[;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;, }, }, ;, public, abstract, void, prepare, (, FunctionInjector, injector]
[., checkState, (, this, !=, callSiteType, ), ;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;, }, }, ;]
[), ;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;, }, }, ;, public, abstract, void, prepare, (, FunctionInjector]
[!=, callSiteType, ), ;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;, }, }, ;, public, abstract, void, prepare]
[), ;, callSiteType, ., prepare, (, injector, ,, callNode, ), ;, }, }, ;, public, abstract, void, prepare, (, FunctionInjector]
[;, }, }, ;, public, abstract, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, ), ;, }, private, CallSiteType, classifyCallSite]
[., prepare, (, injector, ,, callNode, ), ;, }, }, ;, public, abstract, void, prepare, (, FunctionInjector, injector, ,, Node]
[,, callNode, ), ;, }, }, ;, public, abstract, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, ), ;, }]
[), ;, }, }, ;, public, abstract, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, ), ;, }, private, CallSiteType]
[;, Node, grandParent, =, parent, ., getParent, (, ), ;, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {]
[., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, if, (, NodeUtil, ., isExprCall, (]
[;, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {, return, CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (]
[., getParent, (, ), ;, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {, return, CallSiteType, ., SIMPLE_CALL, ;]
[), {, return, CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (, NodeUtil, ., isExprAssign, (, grandParent, ), &&, !, NodeUtil]
[., isExprCall, (, parent, ), ), {, return, CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (, NodeUtil, ., isExprAssign, (]
[), ), {, return, CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (, NodeUtil, ., isExprAssign, (, grandParent, ), &&, !]
[;, }, else, if, (, NodeUtil, ., isExprAssign, (, grandParent, ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent]
[., SIMPLE_CALL, ;, }, else, if, (, NodeUtil, ., isExprAssign, (, grandParent, ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode]
[), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (, parent, ., isName, (, ), &&, !, NodeUtil, .]
[&&, !, NodeUtil, ., isConstantName, (, parent, ., getFirstChild, (, ), ), ), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }]
[&&, parent, ., getFirstChild, (, ), ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ., getFirstChild, (]
[&&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, ), &&, parent, ., getFirstChild, (, ), ., isName, (, )]
[., isExprAssign, (, grandParent, ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, ), &&, parent, ., getFirstChild, (]
[), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, ), &&, parent, ., getFirstChild, (, ), ., isName, (]
[&&, parent, ., getFirstChild, (, ), ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ., getFirstChild, (]
[&&, parent, ., getFirstChild, (, ), ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ., getFirstChild, (]
[., isVarOrSimpleAssignLhs, (, callNode, ,, parent, ), &&, parent, ., getFirstChild, (, ), ., isName, (, ), &&, !, NodeUtil]
[,, parent, ), &&, parent, ., getFirstChild, (, ), ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent]
[), &&, parent, ., getFirstChild, (, ), ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ., getFirstChild]
[&&, !, NodeUtil, ., isConstantName, (, parent, ., getFirstChild, (, ), ), ), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }]
[., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ., getFirstChild, (, ), ), ), {, return, CallSiteType]
[., getFirstChild, (, ), ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ., getFirstChild, (, ), )]
[), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (, parent, ., isName, (, ), &&, !, NodeUtil, .]
[), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (, parent, ., isName, (, ), &&, !, NodeUtil, .]
[., isConstantName, (, parent, ., getFirstChild, (, ), ), ), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (]
[), ), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (, parent, ., isName, (, ), &&, !, NodeUtil]
[., getFirstChild, (, ), ), ), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (, parent, ., isName, (]
[;, }, else, if, (, parent, ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ), &&, grandParent]
[., SIMPLE_ASSIGNMENT, ;, }, else, if, (, parent, ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, )]
[), {, return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }, else, {, Node, expressionRoot, =, ExpressionDecomposer, ., findExpressionRoot, (, callNode, ), ;]
[&&, grandParent, ., hasOneChild, (, ), ), {, return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }, else, {, Node, expressionRoot, =, ExpressionDecomposer]
[&&, grandParent, ., isVar, (, ), &&, grandParent, ., hasOneChild, (, ), ), {, return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }]
[&&, !, NodeUtil, ., isConstantName, (, parent, ), &&, grandParent, ., isVar, (, ), &&, grandParent, ., hasOneChild, (, )]
[., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ), &&, grandParent, ., isVar, (, ), &&, grandParent]
[&&, grandParent, ., isVar, (, ), &&, grandParent, ., hasOneChild, (, ), ), {, return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }]
[&&, grandParent, ., isVar, (, ), &&, grandParent, ., hasOneChild, (, ), ), {, return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }]
[., isConstantName, (, parent, ), &&, grandParent, ., isVar, (, ), &&, grandParent, ., hasOneChild, (, ), ), {, return]
[), &&, grandParent, ., isVar, (, ), &&, grandParent, ., hasOneChild, (, ), ), {, return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;]
[&&, grandParent, ., hasOneChild, (, ), ), {, return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }, else, {, Node, expressionRoot, =, ExpressionDecomposer]
[., isVar, (, ), &&, grandParent, ., hasOneChild, (, ), ), {, return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }, else, {]
[), {, return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }, else, {, Node, expressionRoot, =, ExpressionDecomposer, ., findExpressionRoot, (, callNode, ), ;]
[., hasOneChild, (, ), ), {, return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }, else, {, Node, expressionRoot, =, ExpressionDecomposer, ., findExpressionRoot]
[;, }, else, {, Node, expressionRoot, =, ExpressionDecomposer, ., findExpressionRoot, (, callNode, ), ;, if, (, expressionRoot, !=, null, )]
[., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }, else, {, Node, expressionRoot, =, ExpressionDecomposer, ., findExpressionRoot, (, callNode, ), ;, if, (, expressionRoot, !=]
[;, if, (, expressionRoot, !=, null, ), {, ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,, knownConstants, )]
[., findExpressionRoot, (, callNode, ), ;, if, (, expressionRoot, !=, null, ), {, ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer, (, compiler]
[), ;, if, (, expressionRoot, !=, null, ), {, ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,, knownConstants]
[), {, ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,, knownConstants, ), ;, DecompositionType, type, =, decomposer, .]
[!=, null, ), {, ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,, knownConstants, ), ;, DecompositionType, type, =]
[), {, ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,, knownConstants, ), ;, DecompositionType, type, =, decomposer, .]
[;, DecompositionType, type, =, decomposer, ., canExposeExpression, (, callNode, ), ;, if, (, type, ==, DecompositionType, ., MOVABLE, ), {]
[,, safeNameIdSupplier, ,, knownConstants, ), ;, DecompositionType, type, =, decomposer, ., canExposeExpression, (, callNode, ), ;, if, (, type, ==]
[,, knownConstants, ), ;, DecompositionType, type, =, decomposer, ., canExposeExpression, (, callNode, ), ;, if, (, type, ==, DecompositionType, .]
[), ;, DecompositionType, type, =, decomposer, ., canExposeExpression, (, callNode, ), ;, if, (, type, ==, DecompositionType, ., MOVABLE, )]
[;, if, (, type, ==, DecompositionType, ., MOVABLE, ), {, return, CallSiteType, ., EXPRESSION, ;, }, else, if, (, type]
[., canExposeExpression, (, callNode, ), ;, if, (, type, ==, DecompositionType, ., MOVABLE, ), {, return, CallSiteType, ., EXPRESSION, ;]
[), ;, if, (, type, ==, DecompositionType, ., MOVABLE, ), {, return, CallSiteType, ., EXPRESSION, ;, }, else, if, (]
[), {, return, CallSiteType, ., EXPRESSION, ;, }, else, if, (, type, ==, DecompositionType, ., DECOMPOSABLE, ), {, return, CallSiteType]
[==, DecompositionType, ., MOVABLE, ), {, return, CallSiteType, ., EXPRESSION, ;, }, else, if, (, type, ==, DecompositionType, ., DECOMPOSABLE]
[), {, return, CallSiteType, ., EXPRESSION, ;, }, else, if, (, type, ==, DecompositionType, ., DECOMPOSABLE, ), {, return, CallSiteType]
[., MOVABLE, ), {, return, CallSiteType, ., EXPRESSION, ;, }, else, if, (, type, ==, DecompositionType, ., DECOMPOSABLE, ), {]
[;, }, else, if, (, type, ==, DecompositionType, ., DECOMPOSABLE, ), {, return, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ;, }, else, {]
[., EXPRESSION, ;, }, else, if, (, type, ==, DecompositionType, ., DECOMPOSABLE, ), {, return, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ;, }]
[), {, return, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ;, }, else, {, Preconditions, ., checkState, (, type, ==, DecompositionType, ., UNDECOMPOSABLE, )]
[==, DecompositionType, ., DECOMPOSABLE, ), {, return, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ;, }, else, {, Preconditions, ., checkState, (, type, ==]
[), {, return, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ;, }, else, {, Preconditions, ., checkState, (, type, ==, DecompositionType, ., UNDECOMPOSABLE, )]
[., DECOMPOSABLE, ), {, return, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ;, }, else, {, Preconditions, ., checkState, (, type, ==, DecompositionType, .]
[;, }, else, {, Preconditions, ., checkState, (, type, ==, DecompositionType, ., UNDECOMPOSABLE, ), ;, }, }, }, return, CallSiteType]
[., DECOMPOSABLE_EXPRESSION, ;, }, else, {, Preconditions, ., checkState, (, type, ==, DecompositionType, ., UNDECOMPOSABLE, ), ;, }, }, }]
[;, }, }, }, return, CallSiteType, ., UNSUPPORTED, ;, }, private, ExpressionDecomposer, getDecomposer, (, ), {, return, new, ExpressionDecomposer, (]
[., checkState, (, type, ==, DecompositionType, ., UNDECOMPOSABLE, ), ;, }, }, }, return, CallSiteType, ., UNSUPPORTED, ;, }, private]
[), ;, }, }, }, return, CallSiteType, ., UNSUPPORTED, ;, }, private, ExpressionDecomposer, getDecomposer, (, ), {, return, new, ExpressionDecomposer]
[==, DecompositionType, ., UNDECOMPOSABLE, ), ;, }, }, }, return, CallSiteType, ., UNSUPPORTED, ;, }, private, ExpressionDecomposer, getDecomposer, (, )]
[), ;, }, }, }, return, CallSiteType, ., UNSUPPORTED, ;, }, private, ExpressionDecomposer, getDecomposer, (, ), {, return, new, ExpressionDecomposer]
[., UNDECOMPOSABLE, ), ;, }, }, }, return, CallSiteType, ., UNSUPPORTED, ;, }, private, ExpressionDecomposer, getDecomposer, (, ), {, return]
[;, }, private, ExpressionDecomposer, getDecomposer, (, ), {, return, new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,, knownConstants, ), ;, }]
[., UNSUPPORTED, ;, }, private, ExpressionDecomposer, getDecomposer, (, ), {, return, new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,, knownConstants, )]
[;, }, void, maybePrepareCall, (, Node, callNode, ), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, callSiteType, ., prepare]
[,, safeNameIdSupplier, ,, knownConstants, ), ;, }, void, maybePrepareCall, (, Node, callNode, ), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode]
[,, knownConstants, ), ;, }, void, maybePrepareCall, (, Node, callNode, ), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;]
[), ;, }, void, maybePrepareCall, (, Node, callNode, ), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, callSiteType, .]
[;, callSiteType, ., prepare, (, this, ,, callNode, ), ;, }, private, Node, inlineFunction, (, Node, callNode, ,, Node, fnNode]
[), ;, callSiteType, ., prepare, (, this, ,, callNode, ), ;, }, private, Node, inlineFunction, (, Node, callNode, ,, Node]
[;, }, private, Node, inlineFunction, (, Node, callNode, ,, Node, fnNode, ,, String, fnName, ), {, Node, parent, =, callNode]
[., prepare, (, this, ,, callNode, ), ;, }, private, Node, inlineFunction, (, Node, callNode, ,, Node, fnNode, ,, String]
[,, callNode, ), ;, }, private, Node, inlineFunction, (, Node, callNode, ,, Node, fnNode, ,, String, fnName, ), {, Node]
[), ;, }, private, Node, inlineFunction, (, Node, callNode, ,, Node, fnNode, ,, String, fnName, ), {, Node, parent, =]
[;, Node, grandParent, =, parent, ., getParent, (, ), ;, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, Preconditions, .]
[., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, CallSiteType, callSiteType, =, classifyCallSite, (, callNode]
[;, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, Preconditions, ., checkArgument, (, callSiteType, !=, CallSiteType, ., UNSUPPORTED, ), ;]
[., getParent, (, ), ;, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, Preconditions, ., checkArgument, (, callSiteType, !=, CallSiteType]
[;, Preconditions, ., checkArgument, (, callSiteType, !=, CallSiteType, ., UNSUPPORTED, ), ;, boolean, isCallInLoop, =, NodeUtil, ., isWithinLoop, (, callNode]
[), ;, Preconditions, ., checkArgument, (, callSiteType, !=, CallSiteType, ., UNSUPPORTED, ), ;, boolean, isCallInLoop, =, NodeUtil, ., isWithinLoop, (]
[;, boolean, isCallInLoop, =, NodeUtil, ., isWithinLoop, (, callNode, ), ;, String, resultName, =, null, ;, boolean, needsDefaultReturnResult, =, true]
[., checkArgument, (, callSiteType, !=, CallSiteType, ., UNSUPPORTED, ), ;, boolean, isCallInLoop, =, NodeUtil, ., isWithinLoop, (, callNode, ), ;]
[), ;, boolean, isCallInLoop, =, NodeUtil, ., isWithinLoop, (, callNode, ), ;, String, resultName, =, null, ;, boolean, needsDefaultReturnResult, =]
[!=, CallSiteType, ., UNSUPPORTED, ), ;, boolean, isCallInLoop, =, NodeUtil, ., isWithinLoop, (, callNode, ), ;, String, resultName, =, null]
[), ;, boolean, isCallInLoop, =, NodeUtil, ., isWithinLoop, (, callNode, ), ;, String, resultName, =, null, ;, boolean, needsDefaultReturnResult, =]
[., UNSUPPORTED, ), ;, boolean, isCallInLoop, =, NodeUtil, ., isWithinLoop, (, callNode, ), ;, String, resultName, =, null, ;, boolean]
[;, String, resultName, =, null, ;, boolean, needsDefaultReturnResult, =, true, ;, switch, (, callSiteType, ), {, case, SIMPLE_ASSIGNMENT, :, resultName]
[., isWithinLoop, (, callNode, ), ;, String, resultName, =, null, ;, boolean, needsDefaultReturnResult, =, true, ;, switch, (, callSiteType, )]
[), ;, String, resultName, =, null, ;, boolean, needsDefaultReturnResult, =, true, ;, switch, (, callSiteType, ), {, case, SIMPLE_ASSIGNMENT, :]
[;, boolean, needsDefaultReturnResult, =, true, ;, switch, (, callSiteType, ), {, case, SIMPLE_ASSIGNMENT, :, resultName, =, parent, ., getFirstChild, (]
[;, switch, (, callSiteType, ), {, case, SIMPLE_ASSIGNMENT, :, resultName, =, parent, ., getFirstChild, (, ), ., getString, (, )]
[), {, case, SIMPLE_ASSIGNMENT, :, resultName, =, parent, ., getFirstChild, (, ), ., getString, (, ), ;, break, ;, case]
[:, resultName, =, parent, ., getFirstChild, (, ), ., getString, (, ), ;, break, ;, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, resultName, =]
[=, parent, ., getFirstChild, (, ), ., getString, (, ), ;, break, ;, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, resultName, =, parent, .]
[;, break, ;, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, resultName, =, parent, ., getString, (, ), ;, break, ;, case, SIMPLE_CALL, :, resultName]
[., getString, (, ), ;, break, ;, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, resultName, =, parent, ., getString, (, ), ;, break, ;]
[., getFirstChild, (, ), ., getString, (, ), ;, break, ;, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, resultName, =, parent, ., getString, (]
[:, resultName, =, parent, ., getString, (, ), ;, break, ;, case, SIMPLE_CALL, :, resultName, =, null, ;, needsDefaultReturnResult, =]
[=, parent, ., getString, (, ), ;, break, ;, case, SIMPLE_CALL, :, resultName, =, null, ;, needsDefaultReturnResult, =, false, ;]
[;, break, ;, case, SIMPLE_CALL, :, resultName, =, null, ;, needsDefaultReturnResult, =, false, ;, break, ;, case, EXPRESSION, :, throw]
[., getString, (, ), ;, break, ;, case, SIMPLE_CALL, :, resultName, =, null, ;, needsDefaultReturnResult, =, false, ;, break, ;]
[:, resultName, =, null, ;, needsDefaultReturnResult, =, false, ;, break, ;, case, EXPRESSION, :, throw, new, IllegalStateException, (, "Movable expressions must be moved before inlining.", )]
[=, null, ;, needsDefaultReturnResult, =, false, ;, break, ;, case, EXPRESSION, :, throw, new, IllegalStateException, (, "Movable expressions must be moved before inlining.", ), ;, case]
[;, needsDefaultReturnResult, =, false, ;, break, ;, case, EXPRESSION, :, throw, new, IllegalStateException, (, "Movable expressions must be moved before inlining.", ), ;, case, DECOMPOSABLE_EXPRESSION, :]
[=, false, ;, break, ;, case, EXPRESSION, :, throw, new, IllegalStateException, (, "Movable expressions must be moved before inlining.", ), ;, case, DECOMPOSABLE_EXPRESSION, :, throw, new]
[;, break, ;, case, EXPRESSION, :, throw, new, IllegalStateException, (, "Movable expressions must be moved before inlining.", ), ;, case, DECOMPOSABLE_EXPRESSION, :, throw, new, IllegalStateException, (]
[:, throw, new, IllegalStateException, (, "Movable expressions must be moved before inlining.", ), ;, case, DECOMPOSABLE_EXPRESSION, :, throw, new, IllegalStateException, (, "Decomposable expressions must be decomposed before inlining.", ), ;, default, :]
[;, case, DECOMPOSABLE_EXPRESSION, :, throw, new, IllegalStateException, (, "Decomposable expressions must be decomposed before inlining.", ), ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", ), ;]
[), ;, case, DECOMPOSABLE_EXPRESSION, :, throw, new, IllegalStateException, (, "Decomposable expressions must be decomposed before inlining.", ), ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", )]
[:, throw, new, IllegalStateException, (, "Decomposable expressions must be decomposed before inlining.", ), ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", ), ;, }, FunctionToBlockMutator, mutator]
[;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", ), ;, }, FunctionToBlockMutator, mutator, =, new, FunctionToBlockMutator, (, compiler, ,, this]
[), ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", ), ;, }, FunctionToBlockMutator, mutator, =, new, FunctionToBlockMutator, (, compiler, ,]
[;, }, FunctionToBlockMutator, mutator, =, new, FunctionToBlockMutator, (, compiler, ,, this, ., safeNameIdSupplier, ), ;, Node, newBlock, =, mutator, .]
[), ;, }, FunctionToBlockMutator, mutator, =, new, FunctionToBlockMutator, (, compiler, ,, this, ., safeNameIdSupplier, ), ;, Node, newBlock, =, mutator]
[;, Node, newBlock, =, mutator, ., mutate, (, fnName, ,, fnNode, ,, callNode, ,, resultName, ,, needsDefaultReturnResult, ,, isCallInLoop, )]
[,, this, ., safeNameIdSupplier, ), ;, Node, newBlock, =, mutator, ., mutate, (, fnName, ,, fnNode, ,, callNode, ,, resultName]
[), ;, Node, newBlock, =, mutator, ., mutate, (, fnName, ,, fnNode, ,, callNode, ,, resultName, ,, needsDefaultReturnResult, ,, isCallInLoop]
[., safeNameIdSupplier, ), ;, Node, newBlock, =, mutator, ., mutate, (, fnName, ,, fnNode, ,, callNode, ,, resultName, ,, needsDefaultReturnResult]
[;, Node, greatGrandParent, =, grandParent, ., getParent, (, ), ;, switch, (, callSiteType, ), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, parent, .]
[., mutate, (, fnName, ,, fnNode, ,, callNode, ,, resultName, ,, needsDefaultReturnResult, ,, isCallInLoop, ), ;, Node, greatGrandParent, =, grandParent]
[,, fnNode, ,, callNode, ,, resultName, ,, needsDefaultReturnResult, ,, isCallInLoop, ), ;, Node, greatGrandParent, =, grandParent, ., getParent, (, )]
[,, callNode, ,, resultName, ,, needsDefaultReturnResult, ,, isCallInLoop, ), ;, Node, greatGrandParent, =, grandParent, ., getParent, (, ), ;, switch]
[,, resultName, ,, needsDefaultReturnResult, ,, isCallInLoop, ), ;, Node, greatGrandParent, =, grandParent, ., getParent, (, ), ;, switch, (, callSiteType]
[,, needsDefaultReturnResult, ,, isCallInLoop, ), ;, Node, greatGrandParent, =, grandParent, ., getParent, (, ), ;, switch, (, callSiteType, ), {]
[,, isCallInLoop, ), ;, Node, greatGrandParent, =, grandParent, ., getParent, (, ), ;, switch, (, callSiteType, ), {, case, VAR_DECL_SIMPLE_ASSIGNMENT]
[), ;, Node, greatGrandParent, =, grandParent, ., getParent, (, ), ;, switch, (, callSiteType, ), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, parent]
[;, switch, (, callSiteType, ), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, parent, ., removeChild, (, parent, ., getFirstChild, (, ), ), ;]
[., getParent, (, ), ;, switch, (, callSiteType, ), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, parent, ., removeChild, (, parent, ., getFirstChild]
[), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, parent, ., removeChild, (, parent, ., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (]
[:, parent, ., removeChild, (, parent, ., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (, parent, ., getFirstChild, (]
[;, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, null, ), ;, greatGrandParent, ., addChildAfter, (, newBlock, ,]
[., removeChild, (, parent, ., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==]
[), ;, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, null, ), ;, greatGrandParent, ., addChildAfter, (, newBlock]
[., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, null, ), ;, greatGrandParent]
[;, greatGrandParent, ., addChildAfter, (, newBlock, ,, grandParent, ), ;, break, ;, case, SIMPLE_ASSIGNMENT, :, Preconditions, ., checkState, (, grandParent]
[., checkState, (, parent, ., getFirstChild, (, ), ==, null, ), ;, greatGrandParent, ., addChildAfter, (, newBlock, ,, grandParent, )]
[), ;, greatGrandParent, ., addChildAfter, (, newBlock, ,, grandParent, ), ;, break, ;, case, SIMPLE_ASSIGNMENT, :, Preconditions, ., checkState, (]
[==, null, ), ;, greatGrandParent, ., addChildAfter, (, newBlock, ,, grandParent, ), ;, break, ;, case, SIMPLE_ASSIGNMENT, :, Preconditions, .]
[., getFirstChild, (, ), ==, null, ), ;, greatGrandParent, ., addChildAfter, (, newBlock, ,, grandParent, ), ;, break, ;, case]
[), ;, greatGrandParent, ., addChildAfter, (, newBlock, ,, grandParent, ), ;, break, ;, case, SIMPLE_ASSIGNMENT, :, Preconditions, ., checkState, (]
[;, break, ;, case, SIMPLE_ASSIGNMENT, :, Preconditions, ., checkState, (, grandParent, ., isExprResult, (, ), ), ;, greatGrandParent, ., replaceChild]
[., addChildAfter, (, newBlock, ,, grandParent, ), ;, break, ;, case, SIMPLE_ASSIGNMENT, :, Preconditions, ., checkState, (, grandParent, ., isExprResult]
[,, grandParent, ), ;, break, ;, case, SIMPLE_ASSIGNMENT, :, Preconditions, ., checkState, (, grandParent, ., isExprResult, (, ), ), ;]
[), ;, break, ;, case, SIMPLE_ASSIGNMENT, :, Preconditions, ., checkState, (, grandParent, ., isExprResult, (, ), ), ;, greatGrandParent, .]
[:, Preconditions, ., checkState, (, grandParent, ., isExprResult, (, ), ), ;, greatGrandParent, ., replaceChild, (, grandParent, ,, newBlock, )]
[;, greatGrandParent, ., replaceChild, (, grandParent, ,, newBlock, ), ;, break, ;, case, SIMPLE_CALL, :, Preconditions, ., checkState, (, parent]
[., checkState, (, grandParent, ., isExprResult, (, ), ), ;, greatGrandParent, ., replaceChild, (, grandParent, ,, newBlock, ), ;, break]
[), ;, greatGrandParent, ., replaceChild, (, grandParent, ,, newBlock, ), ;, break, ;, case, SIMPLE_CALL, :, Preconditions, ., checkState, (]
[., isExprResult, (, ), ), ;, greatGrandParent, ., replaceChild, (, grandParent, ,, newBlock, ), ;, break, ;, case, SIMPLE_CALL, :]
[;, break, ;, case, SIMPLE_CALL, :, Preconditions, ., checkState, (, parent, ., isExprResult, (, ), ), ;, grandParent, ., replaceChild]
[., replaceChild, (, grandParent, ,, newBlock, ), ;, break, ;, case, SIMPLE_CALL, :, Preconditions, ., checkState, (, parent, ., isExprResult]
[,, newBlock, ), ;, break, ;, case, SIMPLE_CALL, :, Preconditions, ., checkState, (, parent, ., isExprResult, (, ), ), ;]
[), ;, break, ;, case, SIMPLE_CALL, :, Preconditions, ., checkState, (, parent, ., isExprResult, (, ), ), ;, grandParent, .]
[:, Preconditions, ., checkState, (, parent, ., isExprResult, (, ), ), ;, grandParent, ., replaceChild, (, parent, ,, newBlock, )]
[;, grandParent, ., replaceChild, (, parent, ,, newBlock, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", )]
[., checkState, (, parent, ., isExprResult, (, ), ), ;, grandParent, ., replaceChild, (, parent, ,, newBlock, ), ;, break]
[), ;, grandParent, ., replaceChild, (, parent, ,, newBlock, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type."]
[., isExprResult, (, ), ), ;, grandParent, ., replaceChild, (, parent, ,, newBlock, ), ;, break, ;, default, :, throw]
[;, break, ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", ), ;, }, return, newBlock, ;, }, boolean, isDirectCallNodeReplacementPossible, (]
[., replaceChild, (, parent, ,, newBlock, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", ), ;, }]
[,, newBlock, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", ), ;, }, return, newBlock, ;, }]
[), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", ), ;, }, return, newBlock, ;, }, boolean, isDirectCallNodeReplacementPossible]
[;, }, return, newBlock, ;, }, boolean, isDirectCallNodeReplacementPossible, (, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody, (]
[), ;, }, return, newBlock, ;, }, boolean, isDirectCallNodeReplacementPossible, (, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody]
[;, }, boolean, isDirectCallNodeReplacementPossible, (, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if]
[;, if, (, !, block, ., hasChildren, (, ), ), {, return, true, ;, }, else, if, (, block, .]
[., getFunctionBody, (, fnNode, ), ;, if, (, !, block, ., hasChildren, (, ), ), {, return, true, ;, }]
[), ;, if, (, !, block, ., hasChildren, (, ), ), {, return, true, ;, }, else, if, (, block]
[), {, return, true, ;, }, else, if, (, block, ., hasOneChild, (, ), ), {, if, (, block, .]
[), {, return, true, ;, }, else, if, (, block, ., hasOneChild, (, ), ), {, if, (, block, .]
[., hasChildren, (, ), ), {, return, true, ;, }, else, if, (, block, ., hasOneChild, (, ), ), {]
[;, }, else, if, (, block, ., hasOneChild, (, ), ), {, if, (, block, ., getFirstChild, (, ), .]
[), {, if, (, block, ., getFirstChild, (, ), ., isReturn, (, ), &&, block, ., getFirstChild, (, ), .]
[., hasOneChild, (, ), ), {, if, (, block, ., getFirstChild, (, ), ., isReturn, (, ), &&, block, .]
[), {, return, true, ;, }, }, return, false, ;, }, enum, CanInlineResult, {, YES, ,, AFTER_PREPARATION, ,, NO, }]
[&&, block, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, return, true, ;, }, }, return]
[., isReturn, (, ), &&, block, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, return, true]
[., getFirstChild, (, ), ., isReturn, (, ), &&, block, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null]
[), {, return, true, ;, }, }, return, false, ;, }, enum, CanInlineResult, {, YES, ,, AFTER_PREPARATION, ,, NO, }]
[!=, null, ), {, return, true, ;, }, }, return, false, ;, }, enum, CanInlineResult, {, YES, ,, AFTER_PREPARATION, ,]
[., getFirstChild, (, ), !=, null, ), {, return, true, ;, }, }, return, false, ;, }, enum, CanInlineResult, {]
[., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, return, true, ;, }, }, return, false, ;]
[), {, return, true, ;, }, }, return, false, ;, }, enum, CanInlineResult, {, YES, ,, AFTER_PREPARATION, ,, NO, }]
[;, }, }, return, false, ;, }, enum, CanInlineResult, {, YES, ,, AFTER_PREPARATION, ,, NO, }, private, CanInlineResult, canInlineReferenceAsStatementBlock, (]
[;, }, enum, CanInlineResult, {, YES, ,, AFTER_PREPARATION, ,, NO, }, private, CanInlineResult, canInlineReferenceAsStatementBlock, (, NodeTraversal, t, ,, Node, callNode]
[;, if, (, callSiteType, ==, CallSiteType, ., UNSUPPORTED, ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition]
[), ;, if, (, callSiteType, ==, CallSiteType, ., UNSUPPORTED, ), {, return, CanInlineResult, ., NO, ;, }, if, (, !]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||]
[==, CallSiteType, ., UNSUPPORTED, ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&, (, callSiteType, ==]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||]
[., UNSUPPORTED, ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&, (, callSiteType, ==, CallSiteType, .]
[;, }, if, (, !, allowDecomposition, &&, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, )]
[., NO, ;, }, if, (, !, allowDecomposition, &&, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, .]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,, namesToAlias]
[&&, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), ), {, return, CanInlineResult, ., NO]
[&&, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), ), {, return, CanInlineResult, ., NO]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,, namesToAlias]
[), ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,]
[||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (]
[==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), ), {, return, CanInlineResult, ., NO, ;, }, if]
[||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (]
[., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, !]
[), ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,]
[==, CallSiteType, ., EXPRESSION, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,]
[), ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,]
[., EXPRESSION, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,, callNode, ,]
[;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,, namesToAlias, ), ), {, return, CanInlineResult, .]
[., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,, namesToAlias, ), ), {, return]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, .]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, .]
[,, callNode, ,, fnNode, ,, namesToAlias, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, callSiteType, ==, CallSiteType]
[,, fnNode, ,, namesToAlias, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION]
[,, namesToAlias, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType]
[), ), {, return, CanInlineResult, ., NO, ;, }, if, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType]
[;, }, if, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), {, return, CanInlineResult, .]
[., NO, ;, }, if, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), {, return]
[), {, return, CanInlineResult, ., AFTER_PREPARATION, ;, }, else, {, return, CanInlineResult, ., YES, ;, }, }, private, boolean, callMeetsBlockInliningRequirements]
[||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), {, return, CanInlineResult, ., AFTER_PREPARATION, ;, }, else, {, return, CanInlineResult, ., YES]
[==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), {, return, CanInlineResult, ., AFTER_PREPARATION, ;, }, else, {]
[||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), {, return, CanInlineResult, ., AFTER_PREPARATION, ;, }, else, {, return, CanInlineResult, ., YES]
[., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), {, return, CanInlineResult, ., AFTER_PREPARATION, ;, }, else, {, return, CanInlineResult]
[), {, return, CanInlineResult, ., AFTER_PREPARATION, ;, }, else, {, return, CanInlineResult, ., YES, ;, }, }, private, boolean, callMeetsBlockInliningRequirements]
[==, CallSiteType, ., EXPRESSION, ), {, return, CanInlineResult, ., AFTER_PREPARATION, ;, }, else, {, return, CanInlineResult, ., YES, ;, }]
[), {, return, CanInlineResult, ., AFTER_PREPARATION, ;, }, else, {, return, CanInlineResult, ., YES, ;, }, }, private, boolean, callMeetsBlockInliningRequirements]
[., EXPRESSION, ), {, return, CanInlineResult, ., AFTER_PREPARATION, ;, }, else, {, return, CanInlineResult, ., YES, ;, }, }, private]
[;, }, else, {, return, CanInlineResult, ., YES, ;, }, }, private, boolean, callMeetsBlockInliningRequirements, (, NodeTraversal, t, ,, Node, callNode]
[., AFTER_PREPARATION, ;, }, else, {, return, CanInlineResult, ., YES, ;, }, }, private, boolean, callMeetsBlockInliningRequirements, (, NodeTraversal, t, ,]
[;, }, }, private, boolean, callMeetsBlockInliningRequirements, (, NodeTraversal, t, ,, Node, callNode, ,, final, Node, fnNode, ,, Set, <, String]
[., YES, ;, }, }, private, boolean, callMeetsBlockInliningRequirements, (, NodeTraversal, t, ,, Node, callNode, ,, final, Node, fnNode, ,, Set]
[;, boolean, fnContainsVars, =, NodeUtil, ., has, (, NodeUtil, ., getFunctionBody, (, fnNode, ), ,, new, NodeUtil, ., MatchDeclaration, (]
[., assumeMinimumCapture, ;, boolean, fnContainsVars, =, NodeUtil, ., has, (, NodeUtil, ., getFunctionBody, (, fnNode, ), ,, new, NodeUtil, .]
[;, boolean, forbidTemps, =, false, ;, if, (, !, t, ., inGlobalScope, (, ), ), {, Node, fnCaller, =, t]
[., has, (, NodeUtil, ., getFunctionBody, (, fnNode, ), ,, new, NodeUtil, ., MatchDeclaration, (, ), ,, new, NodeUtil, .]
[,, new, NodeUtil, ., MatchDeclaration, (, ), ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, boolean, forbidTemps, =, false]
[., getFunctionBody, (, fnNode, ), ,, new, NodeUtil, ., MatchDeclaration, (, ), ,, new, NodeUtil, ., MatchShallowStatement, (, ), )]
[), ,, new, NodeUtil, ., MatchDeclaration, (, ), ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, boolean, forbidTemps, =]
[,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, boolean, forbidTemps, =, false, ;, if, (, !, t, ., inGlobalScope]
[), ;, boolean, forbidTemps, =, false, ;, if, (, !, t, ., inGlobalScope, (, ), ), {, Node, fnCaller, =]
[;, if, (, !, t, ., inGlobalScope, (, ), ), {, Node, fnCaller, =, t, ., getScopeRoot, (, ), ;]
[), {, Node, fnCaller, =, t, ., getScopeRoot, (, ), ;, Node, fnCallerBody, =, fnCaller, ., getLastChild, (, ), ;]
[), {, Node, fnCaller, =, t, ., getScopeRoot, (, ), ;, Node, fnCallerBody, =, fnCaller, ., getLastChild, (, ), ;]
[., inGlobalScope, (, ), ), {, Node, fnCaller, =, t, ., getScopeRoot, (, ), ;, Node, fnCallerBody, =, fnCaller, .]
[;, Node, fnCallerBody, =, fnCaller, ., getLastChild, (, ), ;, Predicate, <, Node, >, match, =, new, Predicate, <, Node]
[., getScopeRoot, (, ), ;, Node, fnCallerBody, =, fnCaller, ., getLastChild, (, ), ;, Predicate, <, Node, >, match, =]
[;, Predicate, <, Node, >, match, =, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply]
[., getLastChild, (, ), ;, Predicate, <, Node, >, match, =, new, Predicate, <, Node, >, (, ), {, @]
[;, forbidTemps, =, NodeUtil, ., has, (, fnCallerBody, ,, match, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, if, (, fnContainsVars]
[), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ;, }, if, (, !, assumeMinimumCapture, &&]
[., isName, (, ), ), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ;, }, if]
[;, }, if, (, !, assumeMinimumCapture, &&, n, ., isFunction, (, ), ), {, return, n, !=, fnNode, ;, }]
[., equals, (, "eval", ), ;, }, if, (, !, assumeMinimumCapture, &&, n, ., isFunction, (, ), ), {, return]
[., getString, (, ), ., equals, (, "eval", ), ;, }, if, (, !, assumeMinimumCapture, &&, n, ., isFunction, (]
[), ;, }, if, (, !, assumeMinimumCapture, &&, n, ., isFunction, (, ), ), {, return, n, !=, fnNode, ;]
[), {, return, n, !=, fnNode, ;, }, return, false, ;, }, }, ;, forbidTemps, =, NodeUtil, ., has, (]
[&&, n, ., isFunction, (, ), ), {, return, n, !=, fnNode, ;, }, return, false, ;, }, }, ;]
[&&, n, ., isFunction, (, ), ), {, return, n, !=, fnNode, ;, }, return, false, ;, }, }, ;]
[), {, return, n, !=, fnNode, ;, }, return, false, ;, }, }, ;, forbidTemps, =, NodeUtil, ., has, (]
[., isFunction, (, ), ), {, return, n, !=, fnNode, ;, }, return, false, ;, }, }, ;, forbidTemps, =]
[;, }, return, false, ;, }, }, ;, forbidTemps, =, NodeUtil, ., has, (, fnCallerBody, ,, match, ,, NodeUtil, .]
[!=, fnNode, ;, }, return, false, ;, }, }, ;, forbidTemps, =, NodeUtil, ., has, (, fnCallerBody, ,, match, ,]
[;, }, return, false, ;, }, }, ;, forbidTemps, =, NodeUtil, ., has, (, fnCallerBody, ,, match, ,, NodeUtil, .]
[;, }, }, ;, forbidTemps, =, NodeUtil, ., has, (, fnCallerBody, ,, match, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }]
[=, NodeUtil, ., has, (, fnCallerBody, ,, match, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, if, (, fnContainsVars, &&, forbidTemps]
[;, }, if, (, fnContainsVars, &&, forbidTemps, ), {, return, false, ;, }, if, (, forbidTemps, ), {, Map, <]
[., has, (, fnCallerBody, ,, match, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, if, (, fnContainsVars, &&, forbidTemps, ), {]
[,, match, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, if, (, fnContainsVars, &&, forbidTemps, ), {, return, false, ;, }]
[,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, if, (, fnContainsVars, &&, forbidTemps, ), {, return, false, ;, }, if, (]
[), ;, }, if, (, fnContainsVars, &&, forbidTemps, ), {, return, false, ;, }, if, (, forbidTemps, ), {, Map]
[., MATCH_NOT_FUNCTION, ), ;, }, if, (, fnContainsVars, &&, forbidTemps, ), {, return, false, ;, }, if, (, forbidTemps, )]
[), {, return, false, ;, }, if, (, forbidTemps, ), {, Map, <, String, ,, Node, >, args, =, FunctionArgumentInjector]
[&&, forbidTemps, ), {, return, false, ;, }, if, (, forbidTemps, ), {, Map, <, String, ,, Node, >, args]
[), {, return, false, ;, }, if, (, forbidTemps, ), {, Map, <, String, ,, Node, >, args, =, FunctionArgumentInjector]
[;, }, if, (, forbidTemps, ), {, Map, <, String, ,, Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode]
[), {, Map, <, String, ,, Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,, this, .]
[;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, ), {, Set, <, String, >]
[., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !, args, ., isEmpty, (]
[,, callNode, ,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (]
[,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, )]
[), ;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, ), {, Set, <, String]
[., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, ), {, Set]
[;, if, (, hasArgs, ), {, Set, <, String, >, allNamesToAlias, =, Sets, ., newHashSet, (, namesToAlias, ), ;, FunctionArgumentInjector]
[;, if, (, hasArgs, ), {, Set, <, String, >, allNamesToAlias, =, Sets, ., newHashSet, (, namesToAlias, ), ;, FunctionArgumentInjector]
[., isEmpty, (, ), ;, if, (, hasArgs, ), {, Set, <, String, >, allNamesToAlias, =, Sets, ., newHashSet, (]
[), {, Set, <, String, >, allNamesToAlias, =, Sets, ., newHashSet, (, namesToAlias, ), ;, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, fnNode]
[;, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, fnNode, ,, args, ,, allNamesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, if, (]
[., newHashSet, (, namesToAlias, ), ;, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, fnNode, ,, args, ,, allNamesToAlias, ,, compiler, ., getCodingConvention, (]
[), ;, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, fnNode, ,, args, ,, allNamesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, if]
[;, if, (, !, allNamesToAlias, ., isEmpty, (, ), ), {, return, false, ;, }, }, }, return, true, ;]
[., maybeAddTempsForCallArguments, (, fnNode, ,, args, ,, allNamesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, if, (, !, allNamesToAlias]
[,, args, ,, allNamesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, if, (, !, allNamesToAlias, ., isEmpty, (, )]
[,, allNamesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, if, (, !, allNamesToAlias, ., isEmpty, (, ), ), {]
[,, compiler, ., getCodingConvention, (, ), ), ;, if, (, !, allNamesToAlias, ., isEmpty, (, ), ), {, return, false]
[), ;, if, (, !, allNamesToAlias, ., isEmpty, (, ), ), {, return, false, ;, }, }, }, return, true]
[., getCodingConvention, (, ), ), ;, if, (, !, allNamesToAlias, ., isEmpty, (, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, }, }, return, true, ;, }, private, CanInlineResult, canInlineReferenceDirectly, (, Node, callNode, ,, Node]
[), {, return, false, ;, }, }, }, return, true, ;, }, private, CanInlineResult, canInlineReferenceDirectly, (, Node, callNode, ,, Node]
[., isEmpty, (, ), ), {, return, false, ;, }, }, }, return, true, ;, }, private, CanInlineResult, canInlineReferenceDirectly, (]
[;, }, }, }, return, true, ;, }, private, CanInlineResult, canInlineReferenceDirectly, (, Node, callNode, ,, Node, fnNode, ), {, if]
[;, }, private, CanInlineResult, canInlineReferenceDirectly, (, Node, callNode, ,, Node, fnNode, ), {, if, (, !, isDirectCallNodeReplacementPossible, (, fnNode, )]
[), {, return, CanInlineResult, ., NO, ;, }, Node, block, =, fnNode, ., getLastChild, (, ), ;, Node, cArg, =]
[), {, return, CanInlineResult, ., NO, ;, }, Node, block, =, fnNode, ., getLastChild, (, ), ;, Node, cArg, =]
[), ), {, return, CanInlineResult, ., NO, ;, }, Node, block, =, fnNode, ., getLastChild, (, ), ;, Node, cArg]
[;, }, Node, block, =, fnNode, ., getLastChild, (, ), ;, Node, cArg, =, callNode, ., getFirstChild, (, ), .]
[., NO, ;, }, Node, block, =, fnNode, ., getLastChild, (, ), ;, Node, cArg, =, callNode, ., getFirstChild, (]
[;, Node, cArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !, callNode, ., getFirstChild]
[., getLastChild, (, ), ;, Node, cArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[;, if, (, !, callNode, ., getFirstChild, (, ), ., isName, (, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall]
[., getNext, (, ), ;, if, (, !, callNode, ., getFirstChild, (, ), ., isName, (, ), ), {, if]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !, callNode, ., getFirstChild, (, ), ., isName, (]
[), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, cArg, ==, null, ||, !, cArg]
[), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, cArg, ==, null, ||, !, cArg]
[., isName, (, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, cArg, ==]
[., getFirstChild, (, ), ., isName, (, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {]
[), {, if, (, cArg, ==, null, ||, !, cArg, ., isThis, (, ), ), {, return, CanInlineResult, ., NO]
[., isFunctionObjectCall, (, callNode, ), ), {, if, (, cArg, ==, null, ||, !, cArg, ., isThis, (, ), )]
[), ), {, if, (, cArg, ==, null, ||, !, cArg, ., isThis, (, ), ), {, return, CanInlineResult, .]
[), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Preconditions]
[||, !, cArg, ., isThis, (, ), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext]
[==, null, ||, !, cArg, ., isThis, (, ), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg]
[||, !, cArg, ., isThis, (, ), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext]
[), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Preconditions]
[), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Preconditions]
[., isThis, (, ), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;]
[;, }, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (, !, NodeUtil, .]
[., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (, !]
[=, cArg, ., getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode]
[;, }, else, {, Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), ;, }, }, Node]
[., getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), )]
[;, }, }, Node, fnParam, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, while, (, cArg]
[., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), ;, }, }, Node, fnParam, =, NodeUtil, ., getFunctionParameters]
[), ;, }, }, Node, fnParam, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, while, (]
[), ;, }, }, Node, fnParam, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, while, (]
[., isFunctionObjectApply, (, callNode, ), ), ;, }, }, Node, fnParam, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild]
[), ), ;, }, }, Node, fnParam, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, while]
[;, while, (, cArg, !=, null, ||, fnParam, !=, null, ), {, if, (, fnParam, !=, null, ), {, if]
[., getFirstChild, (, ), ;, while, (, cArg, !=, null, ||, fnParam, !=, null, ), {, if, (, fnParam, !=]
[., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, while, (, cArg, !=, null, ||, fnParam, !=, null, )]
[), ., getFirstChild, (, ), ;, while, (, cArg, !=, null, ||, fnParam, !=, null, ), {, if, (, fnParam]
[), {, if, (, fnParam, !=, null, ), {, if, (, cArg, !=, null, ), {, if, (, NodeUtil, .]
[||, fnParam, !=, null, ), {, if, (, fnParam, !=, null, ), {, if, (, cArg, !=, null, ), {]
[!=, null, ||, fnParam, !=, null, ), {, if, (, fnParam, !=, null, ), {, if, (, cArg, !=, null]
[||, fnParam, !=, null, ), {, if, (, fnParam, !=, null, ), {, if, (, cArg, !=, null, ), {]
[), {, if, (, fnParam, !=, null, ), {, if, (, cArg, !=, null, ), {, if, (, NodeUtil, .]
[!=, null, ), {, if, (, fnParam, !=, null, ), {, if, (, cArg, !=, null, ), {, if, (]
[), {, if, (, fnParam, !=, null, ), {, if, (, cArg, !=, null, ), {, if, (, NodeUtil, .]
[), {, if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler, ), &&]
[!=, null, ), {, if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler]
[), {, if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler, ), &&]
[), {, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler, ), &&, NodeUtil, ., getNameReferenceCount, (, block, ,, fnParam]
[!=, null, ), {, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler, ), &&, NodeUtil, ., getNameReferenceCount, (, block]
[), {, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler, ), &&, NodeUtil, ., getNameReferenceCount, (, block, ,, fnParam]
[), {, return, CanInlineResult, ., NO, ;, }, }, fnParam, =, fnParam, ., getNext, (, ), ;, }, if, (]
[&&, NodeUtil, ., getNameReferenceCount, (, block, ,, fnParam, ., getString, (, ), ), >, 1, ), {, return, CanInlineResult, .]
[., mayEffectMutableState, (, cArg, ,, compiler, ), &&, NodeUtil, ., getNameReferenceCount, (, block, ,, fnParam, ., getString, (, ), )]
[,, compiler, ), &&, NodeUtil, ., getNameReferenceCount, (, block, ,, fnParam, ., getString, (, ), ), >, 1, ), {]
[), &&, NodeUtil, ., getNameReferenceCount, (, block, ,, fnParam, ., getString, (, ), ), >, 1, ), {, return, CanInlineResult]
[), {, return, CanInlineResult, ., NO, ;, }, }, fnParam, =, fnParam, ., getNext, (, ), ;, }, if, (]
[>, 1, ), {, return, CanInlineResult, ., NO, ;, }, }, fnParam, =, fnParam, ., getNext, (, ), ;, }]
[., getNameReferenceCount, (, block, ,, fnParam, ., getString, (, ), ), >, 1, ), {, return, CanInlineResult, ., NO, ;]
[,, fnParam, ., getString, (, ), ), >, 1, ), {, return, CanInlineResult, ., NO, ;, }, }, fnParam, =]
[), >, 1, ), {, return, CanInlineResult, ., NO, ;, }, }, fnParam, =, fnParam, ., getNext, (, ), ;]
[., getString, (, ), ), >, 1, ), {, return, CanInlineResult, ., NO, ;, }, }, fnParam, =, fnParam, .]
[), {, return, CanInlineResult, ., NO, ;, }, }, fnParam, =, fnParam, ., getNext, (, ), ;, }, if, (]
[;, }, }, fnParam, =, fnParam, ., getNext, (, ), ;, }, if, (, cArg, !=, null, ), {, if]
[., NO, ;, }, }, fnParam, =, fnParam, ., getNext, (, ), ;, }, if, (, cArg, !=, null, )]
[=, fnParam, ., getNext, (, ), ;, }, if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayHaveSideEffects]
[;, }, if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ,, compiler, ), )]
[., getNext, (, ), ;, }, if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg]
[), {, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ,, compiler, ), ), {, return, CanInlineResult, ., NO, ;, }]
[!=, null, ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ,, compiler, ), ), {, return, CanInlineResult, ., NO]
[), {, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ,, compiler, ), ), {, return, CanInlineResult, ., NO, ;, }]
[), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, }, return, CanInlineResult]
[., mayHaveSideEffects, (, cArg, ,, compiler, ), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext]
[,, compiler, ), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }]
[), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, }, return]
[;, }, cArg, =, cArg, ., getNext, (, ), ;, }, }, return, CanInlineResult, ., YES, ;, }, boolean, inliningLowersCost]
[., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, }, return, CanInlineResult, ., YES, ;, }]
[=, cArg, ., getNext, (, ), ;, }, }, return, CanInlineResult, ., YES, ;, }, boolean, inliningLowersCost, (, JSModule, fnModule]
[;, }, }, return, CanInlineResult, ., YES, ;, }, boolean, inliningLowersCost, (, JSModule, fnModule, ,, Node, fnNode, ,, Collection, <]
[., getNext, (, ), ;, }, }, return, CanInlineResult, ., YES, ;, }, boolean, inliningLowersCost, (, JSModule, fnModule, ,, Node]
[;, }, boolean, inliningLowersCost, (, JSModule, fnModule, ,, Node, fnNode, ,, Collection, <, ?, extends, Reference, >, refs, ,, Set]
[., YES, ;, }, boolean, inliningLowersCost, (, JSModule, fnModule, ,, Node, fnNode, ,, Collection, <, ?, extends, Reference, >, refs]
[;, if, (, referenceCount, ==, 0, ), {, return, true, ;, }, int, referencesUsingBlockInlining, =, 0, ;, boolean, checkModules, =]
[., size, (, ), ;, if, (, referenceCount, ==, 0, ), {, return, true, ;, }, int, referencesUsingBlockInlining, =, 0]
[), {, return, true, ;, }, int, referencesUsingBlockInlining, =, 0, ;, boolean, checkModules, =, isRemovable, &&, fnModule, !=, null, ;]
[==, 0, ), {, return, true, ;, }, int, referencesUsingBlockInlining, =, 0, ;, boolean, checkModules, =, isRemovable, &&, fnModule, !=]
[), {, return, true, ;, }, int, referencesUsingBlockInlining, =, 0, ;, boolean, checkModules, =, isRemovable, &&, fnModule, !=, null, ;]
[;, }, int, referencesUsingBlockInlining, =, 0, ;, boolean, checkModules, =, isRemovable, &&, fnModule, !=, null, ;, JSModuleGraph, moduleGraph, =, compiler]
[;, boolean, checkModules, =, isRemovable, &&, fnModule, !=, null, ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for]
[;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Reference, ref, :, refs, ), {, if, (]
[&&, fnModule, !=, null, ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Reference, ref, :, refs]
[;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Reference, ref, :, refs, ), {, if, (]
[!=, null, ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Reference, ref, :, refs, ), {]
[;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Reference, ref, :, refs, ), {, if, (]
[;, for, (, Reference, ref, :, refs, ), {, if, (, ref, ., mode, ==, InliningMode, ., BLOCK, ), {]
[., getModuleGraph, (, ), ;, for, (, Reference, ref, :, refs, ), {, if, (, ref, ., mode, ==, InliningMode]
[), {, if, (, ref, ., mode, ==, InliningMode, ., BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules]
[), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules, &&, ref, ., module, !=, null, ), {, if, (, ref]
[==, InliningMode, ., BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules, &&, ref, ., module, !=, null, )]
[., mode, ==, InliningMode, ., BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules, &&, ref, ., module, !=]
[), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules, &&, ref, ., module, !=, null, ), {, if, (, ref]
[., BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules, &&, ref, ., module, !=, null, ), {, if]
[;, }, if, (, checkModules, &&, ref, ., module, !=, null, ), {, if, (, ref, ., module, !=, fnModule]
[++, ;, }, if, (, checkModules, &&, ref, ., module, !=, null, ), {, if, (, ref, ., module, !=]
[), {, if, (, ref, ., module, !=, fnModule, &&, !, moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule]
[&&, ref, ., module, !=, null, ), {, if, (, ref, ., module, !=, fnModule, &&, !, moduleGraph, ., dependsOn]
[), {, if, (, ref, ., module, !=, fnModule, &&, !, moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule]
[!=, null, ), {, if, (, ref, ., module, !=, fnModule, &&, !, moduleGraph, ., dependsOn, (, ref, ., module]
[., module, !=, null, ), {, if, (, ref, ., module, !=, fnModule, &&, !, moduleGraph, ., dependsOn, (, ref]
[), {, if, (, ref, ., module, !=, fnModule, &&, !, moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule]
[), {, isRemovable, =, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;]
[&&, !, moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule, ), ), {, isRemovable, =, false, ;, checkModules, =]
[!=, fnModule, &&, !, moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule, ), ), {, isRemovable, =, false, ;]
[., module, !=, fnModule, &&, !, moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule, ), ), {, isRemovable, =]
[&&, !, moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule, ), ), {, isRemovable, =, false, ;, checkModules, =]
[), {, isRemovable, =, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;]
[), {, isRemovable, =, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;]
[., dependsOn, (, ref, ., module, ,, fnModule, ), ), {, isRemovable, =, false, ;, checkModules, =, false, ;, }]
[,, fnModule, ), ), {, isRemovable, =, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount]
[., module, ,, fnModule, ), ), {, isRemovable, =, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining]
[), ), {, isRemovable, =, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining]
[=, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (, referenceCount]
[;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (, referenceCount, ==, 1]
[=, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (, referenceCount, ==, 1, &&, isRemovable]
[;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (, referenceCount, ==, 1, &&, isRemovable, &&, referencesUsingDirectInlining]
[;, if, (, referenceCount, ==, 1, &&, isRemovable, &&, referencesUsingDirectInlining, ==, 1, ), {, return, true, ;, }, int, callCost]
[-, referencesUsingBlockInlining, ;, if, (, referenceCount, ==, 1, &&, isRemovable, &&, referencesUsingDirectInlining, ==, 1, ), {, return, true, ;, }]
[;, if, (, referenceCount, ==, 1, &&, isRemovable, &&, referencesUsingDirectInlining, ==, 1, ), {, return, true, ;, }, int, callCost]
[), {, return, true, ;, }, int, callCost, =, estimateCallCost, (, fnNode, ,, referencesThis, ), ;, int, overallCallCost, =, callCost]
[&&, referencesUsingDirectInlining, ==, 1, ), {, return, true, ;, }, int, callCost, =, estimateCallCost, (, fnNode, ,, referencesThis, ), ;]
[&&, isRemovable, &&, referencesUsingDirectInlining, ==, 1, ), {, return, true, ;, }, int, callCost, =, estimateCallCost, (, fnNode, ,, referencesThis]
[==, 1, &&, isRemovable, &&, referencesUsingDirectInlining, ==, 1, ), {, return, true, ;, }, int, callCost, =, estimateCallCost, (, fnNode]
[&&, isRemovable, &&, referencesUsingDirectInlining, ==, 1, ), {, return, true, ;, }, int, callCost, =, estimateCallCost, (, fnNode, ,, referencesThis]
[&&, referencesUsingDirectInlining, ==, 1, ), {, return, true, ;, }, int, callCost, =, estimateCallCost, (, fnNode, ,, referencesThis, ), ;]
[), {, return, true, ;, }, int, callCost, =, estimateCallCost, (, fnNode, ,, referencesThis, ), ;, int, overallCallCost, =, callCost]
[==, 1, ), {, return, true, ;, }, int, callCost, =, estimateCallCost, (, fnNode, ,, referencesThis, ), ;, int, overallCallCost]
[), {, return, true, ;, }, int, callCost, =, estimateCallCost, (, fnNode, ,, referencesThis, ), ;, int, overallCallCost, =, callCost]
[;, }, int, callCost, =, estimateCallCost, (, fnNode, ,, referencesThis, ), ;, int, overallCallCost, =, callCost, *, referenceCount, ;, int]
[;, int, overallCallCost, =, callCost, *, referenceCount, ;, int, costDeltaDirect, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., DIRECT]
[,, referencesThis, ), ;, int, overallCallCost, =, callCost, *, referenceCount, ;, int, costDeltaDirect, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,]
[), ;, int, overallCallCost, =, callCost, *, referenceCount, ;, int, costDeltaDirect, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, .]
[;, int, costDeltaDirect, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., DIRECT, ), ;, int, costDeltaBlock, =, inlineCostDelta, (]
[*, referenceCount, ;, int, costDeltaDirect, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., DIRECT, ), ;, int, costDeltaBlock, =]
[;, int, costDeltaDirect, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., DIRECT, ), ;, int, costDeltaBlock, =, inlineCostDelta, (]
[;, int, costDeltaBlock, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., BLOCK, ), ;, return, doesLowerCost, (, fnNode, ,]
[,, namesToAlias, ,, InliningMode, ., DIRECT, ), ;, int, costDeltaBlock, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., BLOCK]
[,, InliningMode, ., DIRECT, ), ;, int, costDeltaBlock, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., BLOCK, ), ;]
[), ;, int, costDeltaBlock, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., BLOCK, ), ;, return, doesLowerCost, (, fnNode]
[., DIRECT, ), ;, int, costDeltaBlock, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., BLOCK, ), ;, return, doesLowerCost]
[;, return, doesLowerCost, (, fnNode, ,, overallCallCost, ,, referencesUsingDirectInlining, ,, costDeltaDirect, ,, referencesUsingBlockInlining, ,, costDeltaBlock, ,, isRemovable, ), ;, }]
[,, namesToAlias, ,, InliningMode, ., BLOCK, ), ;, return, doesLowerCost, (, fnNode, ,, overallCallCost, ,, referencesUsingDirectInlining, ,, costDeltaDirect, ,, referencesUsingBlockInlining]
[,, InliningMode, ., BLOCK, ), ;, return, doesLowerCost, (, fnNode, ,, overallCallCost, ,, referencesUsingDirectInlining, ,, costDeltaDirect, ,, referencesUsingBlockInlining, ,, costDeltaBlock]
[), ;, return, doesLowerCost, (, fnNode, ,, overallCallCost, ,, referencesUsingDirectInlining, ,, costDeltaDirect, ,, referencesUsingBlockInlining, ,, costDeltaBlock, ,, isRemovable, ), ;]
[., BLOCK, ), ;, return, doesLowerCost, (, fnNode, ,, overallCallCost, ,, referencesUsingDirectInlining, ,, costDeltaDirect, ,, referencesUsingBlockInlining, ,, costDeltaBlock, ,, isRemovable]
[;, }, private, boolean, doesLowerCost, (, Node, fnNode, ,, int, callCost, ,, int, directInlines, ,, int, costDeltaDirect, ,, int, blockInlines]
[,, overallCallCost, ,, referencesUsingDirectInlining, ,, costDeltaDirect, ,, referencesUsingBlockInlining, ,, costDeltaBlock, ,, isRemovable, ), ;, }, private, boolean, doesLowerCost, (, Node]
[,, referencesUsingDirectInlining, ,, costDeltaDirect, ,, referencesUsingBlockInlining, ,, costDeltaBlock, ,, isRemovable, ), ;, }, private, boolean, doesLowerCost, (, Node, fnNode, ,]
[,, costDeltaDirect, ,, referencesUsingBlockInlining, ,, costDeltaBlock, ,, isRemovable, ), ;, }, private, boolean, doesLowerCost, (, Node, fnNode, ,, int, callCost]
[,, referencesUsingBlockInlining, ,, costDeltaBlock, ,, isRemovable, ), ;, }, private, boolean, doesLowerCost, (, Node, fnNode, ,, int, callCost, ,, int]
[,, costDeltaBlock, ,, isRemovable, ), ;, }, private, boolean, doesLowerCost, (, Node, fnNode, ,, int, callCost, ,, int, directInlines, ,]
[,, isRemovable, ), ;, }, private, boolean, doesLowerCost, (, Node, fnNode, ,, int, callCost, ,, int, directInlines, ,, int, costDeltaDirect]
[), ;, }, private, boolean, doesLowerCost, (, Node, fnNode, ,, int, callCost, ,, int, directInlines, ,, int, costDeltaDirect, ,, int]
[;, if, (, fnInstanceCount, ==, 0, ), {, if, (, blockInlines, >, 0, &&, costDeltaBlock, >, 0, ), {, return]
[-, (, removable, ?, 1, :, 0, ), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (, blockInlines, >]
[+, blockInlines, -, (, removable, ?, 1, :, 0, ), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (]
[-, (, removable, ?, 1, :, 0, ), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (, blockInlines, >]
[;, if, (, fnInstanceCount, ==, 0, ), {, if, (, blockInlines, >, 0, &&, costDeltaBlock, >, 0, ), {, return]
[), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (, blockInlines, >, 0, &&, costDeltaBlock, >, 0, ), {]
[?, 1, :, 0, ), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (, blockInlines, >, 0, &&, costDeltaBlock]
[:, 0, ), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (, blockInlines, >, 0, &&, costDeltaBlock, >, 0]
[), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (, blockInlines, >, 0, &&, costDeltaBlock, >, 0, ), {]
[), {, if, (, blockInlines, >, 0, &&, costDeltaBlock, >, 0, ), {, return, false, ;, }, return, true, ;]
[==, 0, ), {, if, (, blockInlines, >, 0, &&, costDeltaBlock, >, 0, ), {, return, false, ;, }, return]
[), {, if, (, blockInlines, >, 0, &&, costDeltaBlock, >, 0, ), {, return, false, ;, }, return, true, ;]
[), {, return, false, ;, }, return, true, ;, }, int, costDelta, =, (, directInlines, *, costDeltaDirect, ), +, (]
[&&, costDeltaBlock, >, 0, ), {, return, false, ;, }, return, true, ;, }, int, costDelta, =, (, directInlines, *]
[>, 0, &&, costDeltaBlock, >, 0, ), {, return, false, ;, }, return, true, ;, }, int, costDelta, =, (]
[&&, costDeltaBlock, >, 0, ), {, return, false, ;, }, return, true, ;, }, int, costDelta, =, (, directInlines, *]
[), {, return, false, ;, }, return, true, ;, }, int, costDelta, =, (, directInlines, *, costDeltaDirect, ), +, (]
[>, 0, ), {, return, false, ;, }, return, true, ;, }, int, costDelta, =, (, directInlines, *, costDeltaDirect, )]
[), {, return, false, ;, }, return, true, ;, }, int, costDelta, =, (, directInlines, *, costDeltaDirect, ), +, (]
[;, }, return, true, ;, }, int, costDelta, =, (, directInlines, *, costDeltaDirect, ), +, (, blockInlines, *, costDeltaBlock, )]
[;, }, int, costDelta, =, (, directInlines, *, costDeltaDirect, ), +, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =]
[;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (, fnNode, ,, threshold]
[+, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return, InlineCostEstimator]
[), +, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return]
[*, costDeltaDirect, ), +, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount]
[), +, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return]
[;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (, fnNode, ,, threshold]
[), ;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (, fnNode, ,]
[*, costDeltaBlock, ), ;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (]
[), ;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (, fnNode, ,]
[;, return, InlineCostEstimator, ., getCost, (, fnNode, ,, threshold, +, 1, ), <=, threshold, ;, }, private, static, int, estimateCallCost]
[/, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (, fnNode, ,, threshold, +, 1, ), <=, threshold, ;, }, private, static]
[), /, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (, fnNode, ,, threshold, +, 1, ), <=, threshold, ;, }, private]
[-, costDelta, ), /, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (, fnNode, ,, threshold, +, 1, ), <=, threshold, ;]
[), /, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (, fnNode, ,, threshold, +, 1, ), <=, threshold, ;, }, private]
[;, return, InlineCostEstimator, ., getCost, (, fnNode, ,, threshold, +, 1, ), <=, threshold, ;, }, private, static, int, estimateCallCost]
[;, }, private, static, int, estimateCallCost, (, Node, fnNode, ,, boolean, referencesThis, ), {, Node, argsNode, =, NodeUtil, ., getFunctionParameters]
[<=, threshold, ;, }, private, static, int, estimateCallCost, (, Node, fnNode, ,, boolean, referencesThis, ), {, Node, argsNode, =, NodeUtil]
[., getCost, (, fnNode, ,, threshold, +, 1, ), <=, threshold, ;, }, private, static, int, estimateCallCost, (, Node, fnNode]
[,, threshold, +, 1, ), <=, threshold, ;, }, private, static, int, estimateCallCost, (, Node, fnNode, ,, boolean, referencesThis, )]
[), <=, threshold, ;, }, private, static, int, estimateCallCost, (, Node, fnNode, ,, boolean, referencesThis, ), {, Node, argsNode, =]
[+, 1, ), <=, threshold, ;, }, private, static, int, estimateCallCost, (, Node, fnNode, ,, boolean, referencesThis, ), {, Node]
[), <=, threshold, ;, }, private, static, int, estimateCallCost, (, Node, fnNode, ,, boolean, referencesThis, ), {, Node, argsNode, =]
[;, }, private, static, int, estimateCallCost, (, Node, fnNode, ,, boolean, referencesThis, ), {, Node, argsNode, =, NodeUtil, ., getFunctionParameters]
[;, int, numArgs, =, argsNode, ., getChildCount, (, ), ;, int, callCost, =, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (, numArgs]
[., getFunctionParameters, (, fnNode, ), ;, int, numArgs, =, argsNode, ., getChildCount, (, ), ;, int, callCost, =, NAME_COST_ESTIMATE, +]
[), ;, int, numArgs, =, argsNode, ., getChildCount, (, ), ;, int, callCost, =, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (]
[;, int, callCost, =, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (, numArgs, >, 0, ), {, callCost, +=, (, numArgs, *]
[., getChildCount, (, ), ;, int, callCost, =, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (, numArgs, >, 0, ), {, callCost]
[;, if, (, numArgs, >, 0, ), {, callCost, +=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (, (, numArgs, -]
[+, PAREN_COST, ;, if, (, numArgs, >, 0, ), {, callCost, +=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (, (]
[;, if, (, numArgs, >, 0, ), {, callCost, +=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (, (, numArgs, -]
[), {, callCost, +=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (, (, numArgs, -, 1, ), *, COMMA_COST, ), ;]
[>, 0, ), {, callCost, +=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (, (, numArgs, -, 1, ), *, COMMA_COST]
[), {, callCost, +=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (, (, numArgs, -, 1, ), *, COMMA_COST, ), ;]
[+=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (, (, numArgs, -, 1, ), *, COMMA_COST, ), ;, }, if, (]
[;, }, if, (, referencesThis, ), {, callCost, +=, 5, +, 5, ;, }, return, callCost, ;, }, private, static]
[+, (, (, numArgs, -, 1, ), *, COMMA_COST, ), ;, }, if, (, referencesThis, ), {, callCost, +=, 5]
[), +, (, (, numArgs, -, 1, ), *, COMMA_COST, ), ;, }, if, (, referencesThis, ), {, callCost, +=]
[*, NAME_COST_ESTIMATE, ), +, (, (, numArgs, -, 1, ), *, COMMA_COST, ), ;, }, if, (, referencesThis, ), {]
[), +, (, (, numArgs, -, 1, ), *, COMMA_COST, ), ;, }, if, (, referencesThis, ), {, callCost, +=]
[;, }, if, (, referencesThis, ), {, callCost, +=, 5, +, 5, ;, }, return, callCost, ;, }, private, static]
[), ;, }, if, (, referencesThis, ), {, callCost, +=, 5, +, 5, ;, }, return, callCost, ;, }, private]
[*, COMMA_COST, ), ;, }, if, (, referencesThis, ), {, callCost, +=, 5, +, 5, ;, }, return, callCost, ;]
[), *, COMMA_COST, ), ;, }, if, (, referencesThis, ), {, callCost, +=, 5, +, 5, ;, }, return, callCost]
[-, 1, ), *, COMMA_COST, ), ;, }, if, (, referencesThis, ), {, callCost, +=, 5, +, 5, ;, }]
[), *, COMMA_COST, ), ;, }, if, (, referencesThis, ), {, callCost, +=, 5, +, 5, ;, }, return, callCost]
[), ;, }, if, (, referencesThis, ), {, callCost, +=, 5, +, 5, ;, }, return, callCost, ;, }, private]
[), {, callCost, +=, 5, +, 5, ;, }, return, callCost, ;, }, private, static, int, inlineCostDelta, (, Node, fnNode]
[+=, 5, +, 5, ;, }, return, callCost, ;, }, private, static, int, inlineCostDelta, (, Node, fnNode, ,, Set, <]
[;, }, return, callCost, ;, }, private, static, int, inlineCostDelta, (, Node, fnNode, ,, Set, <, String, >, namesToAlias, ,]
[+, 5, ;, }, return, callCost, ;, }, private, static, int, inlineCostDelta, (, Node, fnNode, ,, Set, <, String, >]
[;, }, return, callCost, ;, }, private, static, int, inlineCostDelta, (, Node, fnNode, ,, Set, <, String, >, namesToAlias, ,]
[;, }, private, static, int, inlineCostDelta, (, Node, fnNode, ,, Set, <, String, >, namesToAlias, ,, InliningMode, mode, ), {]
[;, int, commaCount, =, (, paramCount, >, 1, ), ?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =, 15]
[., getChildCount, (, ), ;, int, commaCount, =, (, paramCount, >, 1, ), ?, paramCount, -, 1, :, 0, ;]
[., getFunctionParameters, (, fnNode, ), ., getChildCount, (, ), ;, int, commaCount, =, (, paramCount, >, 1, ), ?, paramCount]
[), ., getChildCount, (, ), ;, int, commaCount, =, (, paramCount, >, 1, ), ?, paramCount, -, 1, :, 0]
[;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block, =, fnNode]
[?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST]
[), ?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (, paramCount, *, InlineCostEstimator, .]
[>, 1, ), ?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (, paramCount, *]
[), ?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (, paramCount, *, InlineCostEstimator, .]
[:, 0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block]
[-, 1, :, 0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;]
[:, 0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block]
[;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block, =, fnNode]
[;, Node, block, =, fnNode, ., getLastChild, (, ), ;, if, (, !, block, ., hasChildren, (, ), ), {]
[+, (, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block, =, fnNode, ., getLastChild, (, ), ;, if, (]
[+, commaCount, +, (, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block, =, fnNode, ., getLastChild, (, ), ;]
[+, (, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block, =, fnNode, ., getLastChild, (, ), ;, if, (]
[;, Node, block, =, fnNode, ., getLastChild, (, ), ;, if, (, !, block, ., hasChildren, (, ), ), {]
[), ;, Node, block, =, fnNode, ., getLastChild, (, ), ;, if, (, !, block, ., hasChildren, (, ), )]
[*, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block, =, fnNode, ., getLastChild, (, ), ;, if, (, !, block, .]
[), ;, Node, block, =, fnNode, ., getLastChild, (, ), ;, if, (, !, block, ., hasChildren, (, ), )]
[., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block, =, fnNode, ., getLastChild, (, ), ;, if, (, !, block, ., hasChildren, (]
[;, if, (, !, block, ., hasChildren, (, ), ), {, return, -, costDeltaFunctionOverhead, ;, }, if, (, mode, ==]
[., getLastChild, (, ), ;, if, (, !, block, ., hasChildren, (, ), ), {, return, -, costDeltaFunctionOverhead, ;, }]
[), {, return, -, costDeltaFunctionOverhead, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, -, (, costDeltaFunctionOverhead]
[), {, return, -, costDeltaFunctionOverhead, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, -, (, costDeltaFunctionOverhead]
[., hasChildren, (, ), ), {, return, -, costDeltaFunctionOverhead, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {]
[;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, -, (, costDeltaFunctionOverhead, +, 7, ), ;, }]
[;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, -, (, costDeltaFunctionOverhead, +, 7, ), ;, }]
[), {, return, -, (, costDeltaFunctionOverhead, +, 7, ), ;, }, else, {, int, aliasCount, =, namesToAlias, ., size, (]
[==, InliningMode, ., DIRECT, ), {, return, -, (, costDeltaFunctionOverhead, +, 7, ), ;, }, else, {, int, aliasCount, =]
[), {, return, -, (, costDeltaFunctionOverhead, +, 7, ), ;, }, else, {, int, aliasCount, =, namesToAlias, ., size, (]
[., DIRECT, ), {, return, -, (, costDeltaFunctionOverhead, +, 7, ), ;, }, else, {, int, aliasCount, =, namesToAlias, .]
[;, }, else, {, int, aliasCount, =, namesToAlias, ., size, (, ), ;, final, int, INLINE_BLOCK_OVERHEAD, =, 4, ;, final]
[;, }, else, {, int, aliasCount, =, namesToAlias, ., size, (, ), ;, final, int, INLINE_BLOCK_OVERHEAD, =, 4, ;, final]
[), ;, }, else, {, int, aliasCount, =, namesToAlias, ., size, (, ), ;, final, int, INLINE_BLOCK_OVERHEAD, =, 4, ;]
[+, 7, ), ;, }, else, {, int, aliasCount, =, namesToAlias, ., size, (, ), ;, final, int, INLINE_BLOCK_OVERHEAD, =]
[), ;, }, else, {, int, aliasCount, =, namesToAlias, ., size, (, ), ;, final, int, INLINE_BLOCK_OVERHEAD, =, 4, ;]
[;, final, int, INLINE_BLOCK_OVERHEAD, =, 4, ;, final, int, PER_RETURN_OVERHEAD, =, 2, ;, final, int, PER_RETURN_RESULT_OVERHEAD, =, 3, ;, final]
[., size, (, ), ;, final, int, INLINE_BLOCK_OVERHEAD, =, 4, ;, final, int, PER_RETURN_OVERHEAD, =, 2, ;, final, int, PER_RETURN_RESULT_OVERHEAD]
[;, final, int, PER_RETURN_OVERHEAD, =, 2, ;, final, int, PER_RETURN_RESULT_OVERHEAD, =, 3, ;, final, int, PER_ALIAS_OVERHEAD, =, 3, ;, int]
[;, final, int, PER_RETURN_RESULT_OVERHEAD, =, 3, ;, final, int, PER_ALIAS_OVERHEAD, =, 3, ;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (]
[;, final, int, PER_ALIAS_OVERHEAD, =, 3, ;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,]
[;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, )]
[;, int, resultCount, =, (, returnCount, >, 0, ), ?, returnCount, -, 1, :, 0, ;, int, baseOverhead, =, (]
[., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, int, resultCount, =]
[,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, int, resultCount, =, (, returnCount, >, 0]
[,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, int, resultCount, =, (, returnCount, >, 0, ), ?, returnCount, -]
[., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, int, resultCount, =, (, returnCount, >, 0, ), ?]
[), ;, int, resultCount, =, (, returnCount, >, 0, ), ?, returnCount, -, 1, :, 0, ;, int, baseOverhead, =]
[;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +, returnCount]
[?, returnCount, -, 1, :, 0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;]
[), ?, returnCount, -, 1, :, 0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0]
[>, 0, ), ?, returnCount, -, 1, :, 0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD]
[), ?, returnCount, -, 1, :, 0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0]
[:, 0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead]
[-, 1, :, 0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead]
[:, 0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead]
[;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +, returnCount]
[;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (]
[?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *]
[), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount]
[>, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD]
[), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount]
[:, 0, ;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD, ;]
[;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (]
[;, return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (, Set, <, String, >, knownConstants, )]
[+, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (, Set, <]
[+, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }, public, void]
[+, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (, overhead, -, costDeltaFunctionOverhead, ), ;]
[+, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }, public, void]
[*, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }]
[+, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }, public, void]
[+, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (, Set, <]
[*, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (]
[+, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (, Set, <]
[;, return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (, Set, <, String, >, knownConstants, )]
[*, PER_ALIAS_OVERHEAD, ;, return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (, Set, <, String, >]
[;, return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (, Set, <, String, >, knownConstants, )]
[;, }, }, public, void, setKnownConstants, (, Set, <, String, >, knownConstants, ), {, Preconditions, ., checkState, (, this, .]
[), ;, }, }, public, void, setKnownConstants, (, Set, <, String, >, knownConstants, ), {, Preconditions, ., checkState, (, this]
[-, costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (, Set, <, String, >, knownConstants, ), {, Preconditions, ., checkState]
[), ;, }, }, public, void, setKnownConstants, (, Set, <, String, >, knownConstants, ), {, Preconditions, ., checkState, (, this]
[;, this, ., knownConstants, =, knownConstants, ;, }, }]
[., checkState, (, this, ., knownConstants, ., isEmpty, (, ), ), ;, this, ., knownConstants, =, knownConstants, ;, }, }]
[), ;, this, ., knownConstants, =, knownConstants, ;, }, }]
[., isEmpty, (, ), ), ;, this, ., knownConstants, =, knownConstants, ;, }, }]
[., knownConstants, ., isEmpty, (, ), ), ;, this, ., knownConstants, =, knownConstants, ;, }, }]
[=, knownConstants, ;, }, }]
[., knownConstants, =, knownConstants, ;, }, }]
[;, }, }]
