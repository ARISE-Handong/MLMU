[;, private, final, double, relativeThreshold, ;, private, final, double, absoluteThreshold, ;, private, final, LineSearch, line, ;, public, PowellOptimizer, (, double]
[*, FastMath, ., ulp, (, 1d, ), ;, private, final, double, relativeThreshold, ;, private, final, double, absoluteThreshold, ;, private, final]
[;, private, final, double, relativeThreshold, ;, private, final, double, absoluteThreshold, ;, private, final, LineSearch, line, ;, public, PowellOptimizer, (, double]
[., ulp, (, 1d, ), ;, private, final, double, relativeThreshold, ;, private, final, double, absoluteThreshold, ;, private, final, LineSearch, line]
[), ;, private, final, double, relativeThreshold, ;, private, final, double, absoluteThreshold, ;, private, final, LineSearch, line, ;, public, PowellOptimizer, (]
[,, abs, ,, FastMath, ., sqrt, (, rel, ), ,, FastMath, ., sqrt, (, abs, ), ,, checker, ), ;]
[,, FastMath, ., sqrt, (, rel, ), ,, FastMath, ., sqrt, (, abs, ), ,, checker, ), ;, }, public]
[,, FastMath, ., sqrt, (, abs, ), ,, checker, ), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs]
[., sqrt, (, rel, ), ,, FastMath, ., sqrt, (, abs, ), ,, checker, ), ;, }, public, PowellOptimizer, (]
[), ,, FastMath, ., sqrt, (, abs, ), ,, checker, ), ;, }, public, PowellOptimizer, (, double, rel, ,, double]
[,, checker, ), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ,, double, lineRel, ,, double, lineAbs, ,]
[., sqrt, (, abs, ), ,, checker, ), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ,, double]
[), ,, checker, ), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ,, double, lineRel, ,, double, lineAbs]
[), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ,, double, lineRel, ,, double, lineAbs, ,, ConvergenceChecker, <]
[), ;, if, (, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;]
[), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=, 0, )]
[<, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=]
[), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=, 0, )]
[;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel]
[,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, )]
[,, true, ), ;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }]
[), ;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =]
[), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;, line, =]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;]
[), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;, line, =]
[;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;, line, =, new, LineSearch, (, lineRel, ,, lineAbs, ), ;]
[), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;, line, =, new, LineSearch, (, lineRel, ,, lineAbs, )]
[=, rel, ;, absoluteThreshold, =, abs, ;, line, =, new, LineSearch, (, lineRel, ,, lineAbs, ), ;, }, public, PowellOptimizer]
[;, absoluteThreshold, =, abs, ;, line, =, new, LineSearch, (, lineRel, ,, lineAbs, ), ;, }, public, PowellOptimizer, (, double]
[=, abs, ;, line, =, new, LineSearch, (, lineRel, ,, lineAbs, ), ;, }, public, PowellOptimizer, (, double, rel, ,]
[;, line, =, new, LineSearch, (, lineRel, ,, lineAbs, ), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs]
[=, new, LineSearch, (, lineRel, ,, lineAbs, ), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ), {]
[;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ), {, this, (, rel, ,, abs, ,, null, )]
[,, lineAbs, ), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ), {, this, (, rel, ,, abs]
[), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ), {, this, (, rel, ,, abs, ,, null]
[,, abs, ,, null, ), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ,, double, lineRel, ,, double]
[,, null, ), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ,, double, lineRel, ,, double, lineAbs, )]
[), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ,, double, lineRel, ,, double, lineAbs, ), {, this]
[,, abs, ,, lineRel, ,, lineAbs, ,, null, ), ;, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final]
[,, lineRel, ,, lineAbs, ,, null, ), ;, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, GoalType, goal]
[,, lineAbs, ,, null, ), ;, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, GoalType, goal, =, getGoalType]
[,, null, ), ;, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, GoalType, goal, =, getGoalType, (, )]
[), ;, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, GoalType, goal, =, getGoalType, (, ), ;, final]
[;, final, double, [, ], guess, =, getStartPoint, (, ), ;, final, int, n, =, guess, ., length, ;, final]
[;, final, int, n, =, guess, ., length, ;, final, double, [, ], [, ], direc, =, new, double, []
[;, final, double, [, ], [, ], direc, =, new, double, [, n, ], [, n, ], ;, for, (]
[., length, ;, final, double, [, ], [, ], direc, =, new, double, [, n, ], [, n, ], ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, direc, [, i, ]]
[], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, direc, [, i]
[;, i, <, n, ;, i, ++, ), {, direc, [, i, ], [, i, ], =, 1, ;, }]
[;, i, ++, ), {, direc, [, i, ], [, i, ], =, 1, ;, }, final, ConvergenceChecker, <, PointValuePair]
[<, n, ;, i, ++, ), {, direc, [, i, ], [, i, ], =, 1, ;, }, final, ConvergenceChecker]
[;, i, ++, ), {, direc, [, i, ], [, i, ], =, 1, ;, }, final, ConvergenceChecker, <, PointValuePair]
[), {, direc, [, i, ], [, i, ], =, 1, ;, }, final, ConvergenceChecker, <, PointValuePair, >, checker, =]
[++, ), {, direc, [, i, ], [, i, ], =, 1, ;, }, final, ConvergenceChecker, <, PointValuePair, >, checker]
[=, 1, ;, }, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, double, [, ], x, =]
[[, i, ], =, 1, ;, }, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, double, []
[[, i, ], [, i, ], =, 1, ;, }, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, )]
[], [, i, ], =, 1, ;, }, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, double]
[], =, 1, ;, }, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, double, [, ], x]
[;, }, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, double, [, ], x, =, guess, ;]
[;, double, [, ], x, =, guess, ;, double, fVal, =, computeObjectiveValue, (, x, ), ;, double, [, ], x1]
[;, double, fVal, =, computeObjectiveValue, (, x, ), ;, double, [, ], x1, =, x, ., clone, (, ), ;]
[;, double, [, ], x1, =, x, ., clone, (, ), ;, int, iter, =, 0, ;, while, (, true]
[), ;, double, [, ], x1, =, x, ., clone, (, ), ;, int, iter, =, 0, ;, while, (]
[;, int, iter, =, 0, ;, while, (, true, ), {, ++, iter, ;, double, fX, =, fVal, ;, double]
[., clone, (, ), ;, int, iter, =, 0, ;, while, (, true, ), {, ++, iter, ;, double, fX]
[;, while, (, true, ), {, ++, iter, ;, double, fX, =, fVal, ;, double, fX2, =, 0, ;, double]
[), {, ++, iter, ;, double, fX, =, fVal, ;, double, fX2, =, 0, ;, double, delta, =, 0, ;]
[;, double, fX, =, fVal, ;, double, fX2, =, 0, ;, double, delta, =, 0, ;, int, bigInd, =, 0]
[;, double, fX, =, fVal, ;, double, fX2, =, 0, ;, double, delta, =, 0, ;, int, bigInd, =, 0]
[;, double, fX2, =, 0, ;, double, delta, =, 0, ;, int, bigInd, =, 0, ;, double, alphaMin, =, 0]
[;, double, delta, =, 0, ;, int, bigInd, =, 0, ;, double, alphaMin, =, 0, ;, for, (, int, i]
[;, int, bigInd, =, 0, ;, double, alphaMin, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[;, double, alphaMin, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, [, ]]
[;, i, <, n, ;, i, ++, ), {, final, double, [, ], d, =, MathArrays, ., copyOf, (, direc]
[;, i, ++, ), {, final, double, [, ], d, =, MathArrays, ., copyOf, (, direc, [, i, ], )]
[<, n, ;, i, ++, ), {, final, double, [, ], d, =, MathArrays, ., copyOf, (, direc, [, i]
[;, i, ++, ), {, final, double, [, ], d, =, MathArrays, ., copyOf, (, direc, [, i, ], )]
[), {, final, double, [, ], d, =, MathArrays, ., copyOf, (, direc, [, i, ], ), ;, fX2, =]
[++, ), {, final, double, [, ], d, =, MathArrays, ., copyOf, (, direc, [, i, ], ), ;, fX2]
[;, fX2, =, fVal, ;, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;, fVal, =]
[., copyOf, (, direc, [, i, ], ), ;, fX2, =, fVal, ;, final, UnivariatePointValuePair, optimum, =, line, ., search]
[), ;, fX2, =, fVal, ;, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;, fVal]
[[, i, ], ), ;, fX2, =, fVal, ;, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d]
[], ), ;, fX2, =, fVal, ;, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;]
[=, fVal, ;, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;, fVal, =, optimum, .]
[;, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;, fVal, =, optimum, ., getValue, (]
[;, fVal, =, optimum, ., getValue, (, ), ;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, []
[., search, (, x, ,, d, ), ;, fVal, =, optimum, ., getValue, (, ), ;, alphaMin, =, optimum, .]
[,, d, ), ;, fVal, =, optimum, ., getValue, (, ), ;, alphaMin, =, optimum, ., getPoint, (, ), ;]
[), ;, fVal, =, optimum, ., getValue, (, ), ;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double]
[=, optimum, ., getValue, (, ), ;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, [, ], []
[;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x]
[., getValue, (, ), ;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result]
[=, optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d]
[;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =]
[., getPoint, (, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin]
[;, x, =, result, [, 0, ], ;, if, (, (, fX2, -, fVal, ), >, delta, ), {, delta]
[,, d, ,, alphaMin, ), ;, x, =, result, [, 0, ], ;, if, (, (, fX2, -, fVal, )]
[,, alphaMin, ), ;, x, =, result, [, 0, ], ;, if, (, (, fX2, -, fVal, ), >, delta]
[), ;, x, =, result, [, 0, ], ;, if, (, (, fX2, -, fVal, ), >, delta, ), {]
[=, result, [, 0, ], ;, if, (, (, fX2, -, fVal, ), >, delta, ), {, delta, =, fX2]
[;, if, (, (, fX2, -, fVal, ), >, delta, ), {, delta, =, fX2, -, fVal, ;, bigInd, =]
[[, 0, ], ;, if, (, (, fX2, -, fVal, ), >, delta, ), {, delta, =, fX2, -, fVal]
[], ;, if, (, (, fX2, -, fVal, ), >, delta, ), {, delta, =, fX2, -, fVal, ;, bigInd]
[), {, delta, =, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (]
[>, delta, ), {, delta, =, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =, 2]
[), >, delta, ), {, delta, =, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =]
[-, fVal, ), >, delta, ), {, delta, =, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean]
[), >, delta, ), {, delta, =, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =]
[), {, delta, =, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (]
[=, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal]
[;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=, (, relativeThreshold]
[-, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=]
[;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=, (, relativeThreshold]
[=, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=, (, relativeThreshold, *, (]
[;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=, (, relativeThreshold, *, (, FastMath, .]
[;, final, PointValuePair, previous, =, new, PointValuePair, (, x1, ,, fX, ), ;, final, PointValuePair, current, =, new, PointValuePair, (]
[<=, (, relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (, fVal, ), ), +]
[*, (, fX, -, fVal, ), <=, (, relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +, FastMath, .]
[<=, (, relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (, fVal, ), ), +]
[), <=, (, relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (, fVal, ), )]
[-, fVal, ), <=, (, relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (, fVal]
[), <=, (, relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (, fVal, ), )]
[;, final, PointValuePair, previous, =, new, PointValuePair, (, x1, ,, fX, ), ;, final, PointValuePair, current, =, new, PointValuePair, (]
[), ;, final, PointValuePair, previous, =, new, PointValuePair, (, x1, ,, fX, ), ;, final, PointValuePair, current, =, new, PointValuePair]
[+, absoluteThreshold, ), ;, final, PointValuePair, previous, =, new, PointValuePair, (, x1, ,, fX, ), ;, final, PointValuePair, current, =]
[*, (, FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (, fVal, ), ), +, absoluteThreshold, ), ;]
[+, absoluteThreshold, ), ;, final, PointValuePair, previous, =, new, PointValuePair, (, x1, ,, fX, ), ;, final, PointValuePair, current, =]
[), +, absoluteThreshold, ), ;, final, PointValuePair, previous, =, new, PointValuePair, (, x1, ,, fX, ), ;, final, PointValuePair, current]
[+, FastMath, ., abs, (, fVal, ), ), +, absoluteThreshold, ), ;, final, PointValuePair, previous, =, new, PointValuePair, (, x1]
[., abs, (, fX, ), +, FastMath, ., abs, (, fVal, ), ), +, absoluteThreshold, ), ;, final, PointValuePair, previous]
[), +, FastMath, ., abs, (, fVal, ), ), +, absoluteThreshold, ), ;, final, PointValuePair, previous, =, new, PointValuePair, (]
[), +, absoluteThreshold, ), ;, final, PointValuePair, previous, =, new, PointValuePair, (, x1, ,, fX, ), ;, final, PointValuePair, current]
[., abs, (, fVal, ), ), +, absoluteThreshold, ), ;, final, PointValuePair, previous, =, new, PointValuePair, (, x1, ,, fX]
[), ), +, absoluteThreshold, ), ;, final, PointValuePair, previous, =, new, PointValuePair, (, x1, ,, fX, ), ;, final, PointValuePair]
[), ;, final, PointValuePair, previous, =, new, PointValuePair, (, x1, ,, fX, ), ;, final, PointValuePair, current, =, new, PointValuePair]
[;, final, PointValuePair, current, =, new, PointValuePair, (, x, ,, fVal, ), ;, if, (, !, stop, &&, checker, !=]
[,, fX, ), ;, final, PointValuePair, current, =, new, PointValuePair, (, x, ,, fVal, ), ;, if, (, !, stop]
[), ;, final, PointValuePair, current, =, new, PointValuePair, (, x, ,, fVal, ), ;, if, (, !, stop, &&, checker]
[;, if, (, !, stop, &&, checker, !=, null, ), {, stop, =, checker, ., converged, (, iter, ,, previous]
[,, fVal, ), ;, if, (, !, stop, &&, checker, !=, null, ), {, stop, =, checker, ., converged, (]
[), ;, if, (, !, stop, &&, checker, !=, null, ), {, stop, =, checker, ., converged, (, iter, ,]
[), {, stop, =, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, }, if, (, stop, )]
[&&, checker, !=, null, ), {, stop, =, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, }]
[&&, checker, !=, null, ), {, stop, =, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, }]
[), {, stop, =, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, }, if, (, stop, )]
[!=, null, ), {, stop, =, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, }, if, (]
[), {, stop, =, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, }, if, (, stop, )]
[=, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, }, if, (, stop, ), {, if, (]
[;, }, if, (, stop, ), {, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, return, (, fVal, <]
[., converged, (, iter, ,, previous, ,, current, ), ;, }, if, (, stop, ), {, if, (, goal, ==]
[,, previous, ,, current, ), ;, }, if, (, stop, ), {, if, (, goal, ==, GoalType, ., MINIMIZE, )]
[,, current, ), ;, }, if, (, stop, ), {, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, return]
[), ;, }, if, (, stop, ), {, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, return, (, fVal]
[), {, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, return, (, fVal, <, fX, ), ?, current, :]
[), {, return, (, fVal, <, fX, ), ?, current, :, previous, ;, }, else, {, return, (, fVal, >]
[==, GoalType, ., MINIMIZE, ), {, return, (, fVal, <, fX, ), ?, current, :, previous, ;, }, else, {]
[), {, return, (, fVal, <, fX, ), ?, current, :, previous, ;, }, else, {, return, (, fVal, >]
[., MINIMIZE, ), {, return, (, fVal, <, fX, ), ?, current, :, previous, ;, }, else, {, return, (]
[;, }, else, {, return, (, fVal, >, fX, ), ?, current, :, previous, ;, }, }, final, double, []
[?, current, :, previous, ;, }, else, {, return, (, fVal, >, fX, ), ?, current, :, previous, ;, }]
[), ?, current, :, previous, ;, }, else, {, return, (, fVal, >, fX, ), ?, current, :, previous, ;]
[<, fX, ), ?, current, :, previous, ;, }, else, {, return, (, fVal, >, fX, ), ?, current, :]
[), ?, current, :, previous, ;, }, else, {, return, (, fVal, >, fX, ), ?, current, :, previous, ;]
[:, previous, ;, }, else, {, return, (, fVal, >, fX, ), ?, current, :, previous, ;, }, }, final]
[;, }, else, {, return, (, fVal, >, fX, ), ?, current, :, previous, ;, }, }, final, double, []
[;, }, }, final, double, [, ], d, =, new, double, [, n, ], ;, final, double, [, ], x2]
[?, current, :, previous, ;, }, }, final, double, [, ], d, =, new, double, [, n, ], ;, final]
[), ?, current, :, previous, ;, }, }, final, double, [, ], d, =, new, double, [, n, ], ;]
[>, fX, ), ?, current, :, previous, ;, }, }, final, double, [, ], d, =, new, double, [, n]
[), ?, current, :, previous, ;, }, }, final, double, [, ], d, =, new, double, [, n, ], ;]
[:, previous, ;, }, }, final, double, [, ], d, =, new, double, [, n, ], ;, final, double, []
[;, }, }, final, double, [, ], d, =, new, double, [, n, ], ;, final, double, [, ], x2]
[;, final, double, [, ], x2, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[], ;, final, double, [, ], x2, =, new, double, [, n, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, d, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, d, [, i]
[;, i, <, n, ;, i, ++, ), {, d, [, i, ], =, x, [, i, ], -, x1]
[;, i, ++, ), {, d, [, i, ], =, x, [, i, ], -, x1, [, i, ], ;]
[<, n, ;, i, ++, ), {, d, [, i, ], =, x, [, i, ], -, x1, [, i]
[;, i, ++, ), {, d, [, i, ], =, x, [, i, ], -, x1, [, i, ], ;]
[), {, d, [, i, ], =, x, [, i, ], -, x1, [, i, ], ;, x2, [, i]
[++, ), {, d, [, i, ], =, x, [, i, ], -, x1, [, i, ], ;, x2, []
[=, x, [, i, ], -, x1, [, i, ], ;, x2, [, i, ], =, 2, *, x, []
[[, i, ], =, x, [, i, ], -, x1, [, i, ], ;, x2, [, i, ], =, 2]
[], =, x, [, i, ], -, x1, [, i, ], ;, x2, [, i, ], =, 2, *, x]
[;, x2, [, i, ], =, 2, *, x, [, i, ], -, x1, [, i, ], ;, }, x1]
[-, x1, [, i, ], ;, x2, [, i, ], =, 2, *, x, [, i, ], -, x1, []
[[, i, ], -, x1, [, i, ], ;, x2, [, i, ], =, 2, *, x, [, i, ]]
[], -, x1, [, i, ], ;, x2, [, i, ], =, 2, *, x, [, i, ], -, x1]
[;, x2, [, i, ], =, 2, *, x, [, i, ], -, x1, [, i, ], ;, }, x1]
[[, i, ], ;, x2, [, i, ], =, 2, *, x, [, i, ], -, x1, [, i, ]]
[], ;, x2, [, i, ], =, 2, *, x, [, i, ], -, x1, [, i, ], ;, }]
[=, 2, *, x, [, i, ], -, x1, [, i, ], ;, }, x1, =, x, ., clone, (]
[[, i, ], =, 2, *, x, [, i, ], -, x1, [, i, ], ;, }, x1, =, x]
[], =, 2, *, x, [, i, ], -, x1, [, i, ], ;, }, x1, =, x, ., clone]
[;, }, x1, =, x, ., clone, (, ), ;, fX2, =, computeObjectiveValue, (, x2, ), ;, if, (, fX]
[-, x1, [, i, ], ;, }, x1, =, x, ., clone, (, ), ;, fX2, =, computeObjectiveValue, (, x2]
[*, x, [, i, ], -, x1, [, i, ], ;, }, x1, =, x, ., clone, (, ), ;]
[-, x1, [, i, ], ;, }, x1, =, x, ., clone, (, ), ;, fX2, =, computeObjectiveValue, (, x2]
[[, i, ], -, x1, [, i, ], ;, }, x1, =, x, ., clone, (, ), ;, fX2, =]
[], -, x1, [, i, ], ;, }, x1, =, x, ., clone, (, ), ;, fX2, =, computeObjectiveValue, (]
[;, }, x1, =, x, ., clone, (, ), ;, fX2, =, computeObjectiveValue, (, x2, ), ;, if, (, fX]
[[, i, ], ;, }, x1, =, x, ., clone, (, ), ;, fX2, =, computeObjectiveValue, (, x2, ), ;]
[], ;, }, x1, =, x, ., clone, (, ), ;, fX2, =, computeObjectiveValue, (, x2, ), ;, if, (]
[=, x, ., clone, (, ), ;, fX2, =, computeObjectiveValue, (, x2, ), ;, if, (, fX, >, fX2, )]
[;, fX2, =, computeObjectiveValue, (, x2, ), ;, if, (, fX, >, fX2, ), {, double, t, =, 2, *]
[., clone, (, ), ;, fX2, =, computeObjectiveValue, (, x2, ), ;, if, (, fX, >, fX2, ), {, double]
[=, computeObjectiveValue, (, x2, ), ;, if, (, fX, >, fX2, ), {, double, t, =, 2, *, (, fX]
[;, if, (, fX, >, fX2, ), {, double, t, =, 2, *, (, fX, +, fX2, -, 2, *]
[), ;, if, (, fX, >, fX2, ), {, double, t, =, 2, *, (, fX, +, fX2, -, 2]
[), {, double, t, =, 2, *, (, fX, +, fX2, -, 2, *, fVal, ), ;, double, temp, =]
[>, fX2, ), {, double, t, =, 2, *, (, fX, +, fX2, -, 2, *, fVal, ), ;, double]
[), {, double, t, =, 2, *, (, fX, +, fX2, -, 2, *, fVal, ), ;, double, temp, =]
[;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX, -]
[*, (, fX, +, fX2, -, 2, *, fVal, ), ;, double, temp, =, fX, -, fVal, -, delta, ;]
[;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX, -]
[), ;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX]
[-, 2, *, fVal, ), ;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *, temp]
[+, fX2, -, 2, *, fVal, ), ;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp]
[-, 2, *, fVal, ), ;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *, temp]
[), ;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX]
[*, fVal, ), ;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp]
[), ;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX]
[;, t, *=, temp, *, temp, ;, temp, =, fX, -, fX2, ;, t, -=, delta, *, temp, *, temp]
[-, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX, -, fX2, ;, t, -=, delta, *, temp]
[-, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX, -, fX2, ;, t, -=, delta]
[-, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX, -, fX2, ;, t, -=, delta, *, temp]
[;, t, *=, temp, *, temp, ;, temp, =, fX, -, fX2, ;, t, -=, delta, *, temp, *, temp]
[*=, temp, *, temp, ;, temp, =, fX, -, fX2, ;, t, -=, delta, *, temp, *, temp, ;, if]
[;, temp, =, fX, -, fX2, ;, t, -=, delta, *, temp, *, temp, ;, if, (, t, <, 0.0]
[*, temp, ;, temp, =, fX, -, fX2, ;, t, -=, delta, *, temp, *, temp, ;, if, (, t]
[;, temp, =, fX, -, fX2, ;, t, -=, delta, *, temp, *, temp, ;, if, (, t, <, 0.0]
[=, fX, -, fX2, ;, t, -=, delta, *, temp, *, temp, ;, if, (, t, <, 0.0, ), {]
[;, t, -=, delta, *, temp, *, temp, ;, if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =]
[-, fX2, ;, t, -=, delta, *, temp, *, temp, ;, if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair]
[;, t, -=, delta, *, temp, *, temp, ;, if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =]
[-=, delta, *, temp, *, temp, ;, if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =, line, .]
[;, if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, )]
[*, temp, ;, if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,]
[*, temp, *, temp, ;, if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =, line, ., search, (]
[*, temp, ;, if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,]
[;, if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, )]
[), {, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;, fVal, =, optimum, ., getValue]
[<, 0.0, ), {, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;, fVal, =, optimum]
[), {, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;, fVal, =, optimum, ., getValue]
[;, fVal, =, optimum, ., getValue, (, ), ;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, []
[., search, (, x, ,, d, ), ;, fVal, =, optimum, ., getValue, (, ), ;, alphaMin, =, optimum, .]
[,, d, ), ;, fVal, =, optimum, ., getValue, (, ), ;, alphaMin, =, optimum, ., getPoint, (, ), ;]
[), ;, fVal, =, optimum, ., getValue, (, ), ;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double]
[=, optimum, ., getValue, (, ), ;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, [, ], []
[;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x]
[., getValue, (, ), ;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result]
[=, optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d]
[;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =]
[., getPoint, (, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin]
[;, x, =, result, [, 0, ], ;, final, int, lastInd, =, n, -, 1, ;, direc, [, bigInd, ]]
[,, d, ,, alphaMin, ), ;, x, =, result, [, 0, ], ;, final, int, lastInd, =, n, -, 1]
[,, alphaMin, ), ;, x, =, result, [, 0, ], ;, final, int, lastInd, =, n, -, 1, ;, direc]
[), ;, x, =, result, [, 0, ], ;, final, int, lastInd, =, n, -, 1, ;, direc, [, bigInd]
[=, result, [, 0, ], ;, final, int, lastInd, =, n, -, 1, ;, direc, [, bigInd, ], =, direc]
[;, final, int, lastInd, =, n, -, 1, ;, direc, [, bigInd, ], =, direc, [, lastInd, ], ;, direc]
[[, 0, ], ;, final, int, lastInd, =, n, -, 1, ;, direc, [, bigInd, ], =, direc, [, lastInd]
[], ;, final, int, lastInd, =, n, -, 1, ;, direc, [, bigInd, ], =, direc, [, lastInd, ], ;]
[;, direc, [, bigInd, ], =, direc, [, lastInd, ], ;, direc, [, lastInd, ], =, result, [, 1, ]]
[-, 1, ;, direc, [, bigInd, ], =, direc, [, lastInd, ], ;, direc, [, lastInd, ], =, result, []
[;, direc, [, bigInd, ], =, direc, [, lastInd, ], ;, direc, [, lastInd, ], =, result, [, 1, ]]
[=, direc, [, lastInd, ], ;, direc, [, lastInd, ], =, result, [, 1, ], ;, }, }, }, }]
[[, bigInd, ], =, direc, [, lastInd, ], ;, direc, [, lastInd, ], =, result, [, 1, ], ;, }]
[], =, direc, [, lastInd, ], ;, direc, [, lastInd, ], =, result, [, 1, ], ;, }, }, }]
[;, direc, [, lastInd, ], =, result, [, 1, ], ;, }, }, }, }, private, double, [, ], []
[[, lastInd, ], ;, direc, [, lastInd, ], =, result, [, 1, ], ;, }, }, }, }, private, double]
[], ;, direc, [, lastInd, ], =, result, [, 1, ], ;, }, }, }, }, private, double, [, ]]
[=, result, [, 1, ], ;, }, }, }, }, private, double, [, ], [, ], newPointAndDirection, (, double, []
[[, lastInd, ], =, result, [, 1, ], ;, }, }, }, }, private, double, [, ], [, ], newPointAndDirection]
[], =, result, [, 1, ], ;, }, }, }, }, private, double, [, ], [, ], newPointAndDirection, (, double]
[;, }, }, }, }, private, double, [, ], [, ], newPointAndDirection, (, double, [, ], p, ,, double, []
[[, 1, ], ;, }, }, }, }, private, double, [, ], [, ], newPointAndDirection, (, double, [, ], p]
[], ;, }, }, }, }, private, double, [, ], [, ], newPointAndDirection, (, double, [, ], p, ,, double]
[;, final, double, [, ], nP, =, new, double, [, n, ], ;, final, double, [, ], nD, =, new]
[., length, ;, final, double, [, ], nP, =, new, double, [, n, ], ;, final, double, [, ], nD]
[;, final, double, [, ], nD, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[], ;, final, double, [, ], nD, =, new, double, [, n, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, nD, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, nD, [, i]
[;, i, <, n, ;, i, ++, ), {, nD, [, i, ], =, d, [, i, ], *, optimum]
[;, i, ++, ), {, nD, [, i, ], =, d, [, i, ], *, optimum, ;, nP, [, i]
[<, n, ;, i, ++, ), {, nD, [, i, ], =, d, [, i, ], *, optimum, ;, nP]
[;, i, ++, ), {, nD, [, i, ], =, d, [, i, ], *, optimum, ;, nP, [, i]
[), {, nD, [, i, ], =, d, [, i, ], *, optimum, ;, nP, [, i, ], =, p]
[++, ), {, nD, [, i, ], =, d, [, i, ], *, optimum, ;, nP, [, i, ], =]
[=, d, [, i, ], *, optimum, ;, nP, [, i, ], =, p, [, i, ], +, nD, []
[[, i, ], =, d, [, i, ], *, optimum, ;, nP, [, i, ], =, p, [, i, ]]
[], =, d, [, i, ], *, optimum, ;, nP, [, i, ], =, p, [, i, ], +, nD]
[;, nP, [, i, ], =, p, [, i, ], +, nD, [, i, ], ;, }, final, double, []
[*, optimum, ;, nP, [, i, ], =, p, [, i, ], +, nD, [, i, ], ;, }, final]
[[, i, ], *, optimum, ;, nP, [, i, ], =, p, [, i, ], +, nD, [, i, ]]
[], *, optimum, ;, nP, [, i, ], =, p, [, i, ], +, nD, [, i, ], ;, }]
[;, nP, [, i, ], =, p, [, i, ], +, nD, [, i, ], ;, }, final, double, []
[=, p, [, i, ], +, nD, [, i, ], ;, }, final, double, [, ], [, ], result, =]
[[, i, ], =, p, [, i, ], +, nD, [, i, ], ;, }, final, double, [, ], []
[], =, p, [, i, ], +, nD, [, i, ], ;, }, final, double, [, ], [, ], result]
[;, }, final, double, [, ], [, ], result, =, new, double, [, 2, ], [, ], ;, result, []
[+, nD, [, i, ], ;, }, final, double, [, ], [, ], result, =, new, double, [, 2, ]]
[[, i, ], +, nD, [, i, ], ;, }, final, double, [, ], [, ], result, =, new, double]
[], +, nD, [, i, ], ;, }, final, double, [, ], [, ], result, =, new, double, [, 2]
[;, }, final, double, [, ], [, ], result, =, new, double, [, 2, ], [, ], ;, result, []
[[, i, ], ;, }, final, double, [, ], [, ], result, =, new, double, [, 2, ], [, ]]
[], ;, }, final, double, [, ], [, ], result, =, new, double, [, 2, ], [, ], ;, result]
[;, result, [, 0, ], =, nP, ;, result, [, 1, ], =, nD, ;, return, result, ;, }, private]
[], [, ], ;, result, [, 0, ], =, nP, ;, result, [, 1, ], =, nD, ;, return, result]
[=, nP, ;, result, [, 1, ], =, nD, ;, return, result, ;, }, private, class, LineSearch, extends, BrentOptimizer, {]
[[, 0, ], =, nP, ;, result, [, 1, ], =, nD, ;, return, result, ;, }, private, class, LineSearch]
[], =, nP, ;, result, [, 1, ], =, nD, ;, return, result, ;, }, private, class, LineSearch, extends, BrentOptimizer]
[;, result, [, 1, ], =, nD, ;, return, result, ;, }, private, class, LineSearch, extends, BrentOptimizer, {, private, static]
[=, nD, ;, return, result, ;, }, private, class, LineSearch, extends, BrentOptimizer, {, private, static, final, double, REL_TOL_UNUSED, =, 1e-15]
[[, 1, ], =, nD, ;, return, result, ;, }, private, class, LineSearch, extends, BrentOptimizer, {, private, static, final, double]
[], =, nD, ;, return, result, ;, }, private, class, LineSearch, extends, BrentOptimizer, {, private, static, final, double, REL_TOL_UNUSED, =]
[;, return, result, ;, }, private, class, LineSearch, extends, BrentOptimizer, {, private, static, final, double, REL_TOL_UNUSED, =, 1e-15, ;, private]
[;, }, private, class, LineSearch, extends, BrentOptimizer, {, private, static, final, double, REL_TOL_UNUSED, =, 1e-15, ;, private, static, final, double]
[;, private, static, final, double, ABS_TOL_UNUSED, =, Double, ., MIN_VALUE, ;, private, final, BracketFinder, bracket, =, new, BracketFinder, (, )]
[;, private, final, BracketFinder, bracket, =, new, BracketFinder, (, ), ;, LineSearch, (, double, rel, ,, double, abs, ), {]
[., MIN_VALUE, ;, private, final, BracketFinder, bracket, =, new, BracketFinder, (, ), ;, LineSearch, (, double, rel, ,, double, abs]
[;, LineSearch, (, double, rel, ,, double, abs, ), {, super, (, REL_TOL_UNUSED, ,, ABS_TOL_UNUSED, ,, new, SimpleUnivariateValueChecker, (, rel]
[,, ABS_TOL_UNUSED, ,, new, SimpleUnivariateValueChecker, (, rel, ,, abs, ), ), ;, }, public, UnivariatePointValuePair, search, (, final, double, []
[,, new, SimpleUnivariateValueChecker, (, rel, ,, abs, ), ), ;, }, public, UnivariatePointValuePair, search, (, final, double, [, ], p]
[), ;, }, public, UnivariatePointValuePair, search, (, final, double, [, ], p, ,, final, double, [, ], d, ), {]
[,, abs, ), ), ;, }, public, UnivariatePointValuePair, search, (, final, double, [, ], p, ,, final, double, [, ]]
[), ), ;, }, public, UnivariatePointValuePair, search, (, final, double, [, ], p, ,, final, double, [, ], d, )]
[;, final, UnivariateFunction, f, =, new, UnivariateFunction, (, ), {, public, double, value, (, double, alpha, ), {, final, double]
[., length, ;, final, UnivariateFunction, f, =, new, UnivariateFunction, (, ), {, public, double, value, (, double, alpha, ), {]
[;, final, GoalType, goal, =, PowellOptimizer, ., this, ., getGoalType, (, ), ;, bracket, ., search, (, f, ,, goal]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, x, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, x, [, i]
[;, i, <, n, ;, i, ++, ), {, x, [, i, ], =, p, [, i, ], +, alpha]
[;, i, ++, ), {, x, [, i, ], =, p, [, i, ], +, alpha, *, d, [, i]
[<, n, ;, i, ++, ), {, x, [, i, ], =, p, [, i, ], +, alpha, *, d]
[;, i, ++, ), {, x, [, i, ], =, p, [, i, ], +, alpha, *, d, [, i]
[), {, x, [, i, ], =, p, [, i, ], +, alpha, *, d, [, i, ], ;, }]
[++, ), {, x, [, i, ], =, p, [, i, ], +, alpha, *, d, [, i, ], ;]
[=, p, [, i, ], +, alpha, *, d, [, i, ], ;, }, final, double, obj, =, PowellOptimizer, .]
[[, i, ], =, p, [, i, ], +, alpha, *, d, [, i, ], ;, }, final, double, obj]
[], =, p, [, i, ], +, alpha, *, d, [, i, ], ;, }, final, double, obj, =, PowellOptimizer]
[;, }, final, double, obj, =, PowellOptimizer, ., this, ., computeObjectiveValue, (, x, ), ;, return, obj, ;, }, }]
[+, alpha, *, d, [, i, ], ;, }, final, double, obj, =, PowellOptimizer, ., this, ., computeObjectiveValue, (, x]
[[, i, ], +, alpha, *, d, [, i, ], ;, }, final, double, obj, =, PowellOptimizer, ., this, .]
[], +, alpha, *, d, [, i, ], ;, }, final, double, obj, =, PowellOptimizer, ., this, ., computeObjectiveValue, (]
[;, }, final, double, obj, =, PowellOptimizer, ., this, ., computeObjectiveValue, (, x, ), ;, return, obj, ;, }, }]
[*, d, [, i, ], ;, }, final, double, obj, =, PowellOptimizer, ., this, ., computeObjectiveValue, (, x, ), ;]
[;, }, final, double, obj, =, PowellOptimizer, ., this, ., computeObjectiveValue, (, x, ), ;, return, obj, ;, }, }]
[[, i, ], ;, }, final, double, obj, =, PowellOptimizer, ., this, ., computeObjectiveValue, (, x, ), ;, return, obj]
[], ;, }, final, double, obj, =, PowellOptimizer, ., this, ., computeObjectiveValue, (, x, ), ;, return, obj, ;, }]
[;, return, obj, ;, }, }, ;, final, GoalType, goal, =, PowellOptimizer, ., this, ., getGoalType, (, ), ;, bracket]
[., computeObjectiveValue, (, x, ), ;, return, obj, ;, }, }, ;, final, GoalType, goal, =, PowellOptimizer, ., this, .]
[), ;, return, obj, ;, }, }, ;, final, GoalType, goal, =, PowellOptimizer, ., this, ., getGoalType, (, ), ;]
[;, }, }, ;, final, GoalType, goal, =, PowellOptimizer, ., this, ., getGoalType, (, ), ;, bracket, ., search, (]
[;, bracket, ., search, (, f, ,, goal, ,, 0, ,, 1, ), ;, return, optimize, (, Integer, ., MAX_VALUE]
[., getGoalType, (, ), ;, bracket, ., search, (, f, ,, goal, ,, 0, ,, 1, ), ;, return, optimize]
[;, return, optimize, (, Integer, ., MAX_VALUE, ,, f, ,, goal, ,, bracket, ., getLo, (, ), ,, bracket, .]
[., search, (, f, ,, goal, ,, 0, ,, 1, ), ;, return, optimize, (, Integer, ., MAX_VALUE, ,, f]
[,, goal, ,, 0, ,, 1, ), ;, return, optimize, (, Integer, ., MAX_VALUE, ,, f, ,, goal, ,, bracket]
[,, 0, ,, 1, ), ;, return, optimize, (, Integer, ., MAX_VALUE, ,, f, ,, goal, ,, bracket, ., getLo]
[,, 1, ), ;, return, optimize, (, Integer, ., MAX_VALUE, ,, f, ,, goal, ,, bracket, ., getLo, (, )]
[), ;, return, optimize, (, Integer, ., MAX_VALUE, ,, f, ,, goal, ,, bracket, ., getLo, (, ), ,, bracket]
[;, }, }, }]
[,, f, ,, goal, ,, bracket, ., getLo, (, ), ,, bracket, ., getHi, (, ), ,, bracket, ., getMid]
[., MAX_VALUE, ,, f, ,, goal, ,, bracket, ., getLo, (, ), ,, bracket, ., getHi, (, ), ,, bracket]
[,, goal, ,, bracket, ., getLo, (, ), ,, bracket, ., getHi, (, ), ,, bracket, ., getMid, (, )]
[,, bracket, ., getLo, (, ), ,, bracket, ., getHi, (, ), ,, bracket, ., getMid, (, ), ), ;]
[,, bracket, ., getHi, (, ), ,, bracket, ., getMid, (, ), ), ;, }, }, }]
[., getLo, (, ), ,, bracket, ., getHi, (, ), ,, bracket, ., getMid, (, ), ), ;, }, }]
[,, bracket, ., getMid, (, ), ), ;, }, }, }]
[., getHi, (, ), ,, bracket, ., getMid, (, ), ), ;, }, }, }]
[), ;, }, }, }]
[., getMid, (, ), ), ;, }, }, }]
