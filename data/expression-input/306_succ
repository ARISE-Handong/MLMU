[;, static, final, DiagnosticType, MALFORMED_REGEXP, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_REGEXP", ,, "Malformed Regular Expression: {0}", ), ;, private, final, AbstractCompiler, compiler, ;]
[., warning, (, "JSC_REGEXP_REFERENCE", ,, "References to the global RegExp object prevents ", +, "optimization of regular expressions.", ), ;, static, final, DiagnosticType, MALFORMED_REGEXP, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_REGEXP"]
[,, "References to the global RegExp object prevents ", +, "optimization of regular expressions.", ), ;, static, final, DiagnosticType, MALFORMED_REGEXP, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_REGEXP", ,, "Malformed Regular Expression: {0}", ), ;]
[), ;, static, final, DiagnosticType, MALFORMED_REGEXP, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_REGEXP", ,, "Malformed Regular Expression: {0}", ), ;, private, final, AbstractCompiler, compiler]
[+, "optimization of regular expressions.", ), ;, static, final, DiagnosticType, MALFORMED_REGEXP, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_REGEXP", ,, "Malformed Regular Expression: {0}", ), ;, private, final]
[), ;, static, final, DiagnosticType, MALFORMED_REGEXP, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_REGEXP", ,, "Malformed Regular Expression: {0}", ), ;, private, final, AbstractCompiler, compiler]
[;, private, final, AbstractCompiler, compiler, ;, private, boolean, globalRegExpPropertiesUsed, =, false, ;, public, boolean, isGlobalRegExpPropertiesUsed, (, ), {, return, globalRegExpPropertiesUsed]
[., warning, (, "JSC_MALFORMED_REGEXP", ,, "Malformed Regular Expression: {0}", ), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, globalRegExpPropertiesUsed, =, false, ;, public]
[,, "Malformed Regular Expression: {0}", ), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, globalRegExpPropertiesUsed, =, false, ;, public, boolean, isGlobalRegExpPropertiesUsed, (, )]
[), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, globalRegExpPropertiesUsed, =, false, ;, public, boolean, isGlobalRegExpPropertiesUsed, (, ), {, return]
[;, public, boolean, isGlobalRegExpPropertiesUsed, (, ), {, return, globalRegExpPropertiesUsed, ;, }, public, CheckRegExp, (, AbstractCompiler, compiler, ), {, this, .]
[;, }, public, CheckRegExp, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override, public, void]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[), {, String, name, =, n, ., getString, (, ), ;, if, (, name, ., equals, (, "RegExp", ), &&]
[., isReferenceName, (, n, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (, name, .]
[), ), {, String, name, =, n, ., getString, (, ), ;, if, (, name, ., equals, (, "RegExp", )]
[;, if, (, name, ., equals, (, "RegExp", ), &&, t, ., getScope, (, ), ., getVar, (, name, )]
[., getString, (, ), ;, if, (, name, ., equals, (, "RegExp", ), &&, t, ., getScope, (, ), .]
[), {, int, parentType, =, parent, ., getType, (, ), ;, boolean, first, =, (, n, ==, parent, ., getFirstChild]
[&&, t, ., getScope, (, ), ., getVar, (, name, ), ==, null, ), {, int, parentType, =, parent, .]
[., equals, (, "RegExp", ), &&, t, ., getScope, (, ), ., getVar, (, name, ), ==, null, ), {]
[), &&, t, ., getScope, (, ), ., getVar, (, name, ), ==, null, ), {, int, parentType, =, parent]
[), {, int, parentType, =, parent, ., getType, (, ), ;, boolean, first, =, (, n, ==, parent, ., getFirstChild]
[==, null, ), {, int, parentType, =, parent, ., getType, (, ), ;, boolean, first, =, (, n, ==, parent]
[., getVar, (, name, ), ==, null, ), {, int, parentType, =, parent, ., getType, (, ), ;, boolean, first]
[., getScope, (, ), ., getVar, (, name, ), ==, null, ), {, int, parentType, =, parent, ., getType, (]
[), ==, null, ), {, int, parentType, =, parent, ., getType, (, ), ;, boolean, first, =, (, n, ==]
[), {, int, parentType, =, parent, ., getType, (, ), ;, boolean, first, =, (, n, ==, parent, ., getFirstChild]
[;, boolean, first, =, (, n, ==, parent, ., getFirstChild, (, ), ), ;, if, (, !, (, (, parentType]
[., getType, (, ), ;, boolean, first, =, (, n, ==, parent, ., getFirstChild, (, ), ), ;, if, (]
[;, if, (, !, (, (, parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token, .]
[), ;, if, (, !, (, (, parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token]
[==, parent, ., getFirstChild, (, ), ), ;, if, (, !, (, (, parentType, ==, Token, ., NEW, &&, first]
[), ;, if, (, !, (, (, parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token]
[., getFirstChild, (, ), ), ;, if, (, !, (, (, parentType, ==, Token, ., NEW, &&, first, ), ||]
[), {, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =, true, ;, }, }, }, else, if]
[), {, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =, true, ;, }, }, }, else, if]
[), ), {, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =, true, ;, }, }, }, else]
[||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), ), ), {, t, ., report, (, n, ,]
[||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first]
[), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !]
[&&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF]
[==, Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType]
[&&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF]
[., NEW, &&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token]
[), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !]
[||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), ), ), {, t, ., report, (, n, ,]
[), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), ), ), {, t, ., report, (, n]
[&&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), ), ), {, t, ., report]
[==, Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), ), )]
[&&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), ), ), {, t, ., report]
[., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), ), ), {, t]
[), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), ), ), {, t, ., report, (, n]
[), ), {, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =, true, ;, }, }, }, else]
[), ), ), {, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =, true, ;, }, }, }]
[&&, !, first, ), ), ), {, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =, true, ;]
[==, Token, ., INSTANCEOF, &&, !, first, ), ), ), {, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;]
[&&, !, first, ), ), ), {, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =, true, ;]
[., INSTANCEOF, &&, !, first, ), ), ), {, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =]
[), ), ), {, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =, true, ;, }, }, }]
[), ), ), {, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =, true, ;, }, }, }]
[;, globalRegExpPropertiesUsed, =, true, ;, }, }, }, else, if, (, n, ., isRegExp, (, ), ), {, String, pattern]
[., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =, true, ;, }, }, }, else, if, (, n, .]
[,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =, true, ;, }, }, }, else, if, (, n, ., isRegExp, (, ), )]
[), ;, globalRegExpPropertiesUsed, =, true, ;, }, }, }, else, if, (, n, ., isRegExp, (, ), ), {, String]
[=, true, ;, }, }, }, else, if, (, n, ., isRegExp, (, ), ), {, String, pattern, =, n]
[;, }, }, }, else, if, (, n, ., isRegExp, (, ), ), {, String, pattern, =, n, ., getFirstChild]
[), {, String, pattern, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =, n, .]
[., isRegExp, (, ), ), {, String, pattern, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, String]
[;, String, flags, =, n, ., getChildCount, (, ), ==, 2, ?, n, ., getLastChild, (, ), ., getString, (]
[., getString, (, ), ;, String, flags, =, n, ., getChildCount, (, ), ==, 2, ?, n, ., getLastChild, (]
[., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =, n, ., getChildCount, (, ), ==, 2, ?]
[;, try, {, RegExpTree, ., parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, t]
[?, n, ., getLastChild, (, ), ., getString, (, ), :, "", ;, try, {, RegExpTree, ., parseRegExp, (, pattern]
[==, 2, ?, n, ., getLastChild, (, ), ., getString, (, ), :, "", ;, try, {, RegExpTree, ., parseRegExp]
[., getChildCount, (, ), ==, 2, ?, n, ., getLastChild, (, ), ., getString, (, ), :, "", ;, try]
[?, n, ., getLastChild, (, ), ., getString, (, ), :, "", ;, try, {, RegExpTree, ., parseRegExp, (, pattern]
[:, "", ;, try, {, RegExpTree, ., parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, )]
[., getString, (, ), :, "", ;, try, {, RegExpTree, ., parseRegExp, (, pattern, ,, flags, ), ;, }, catch]
[., getLastChild, (, ), ., getString, (, ), :, "", ;, try, {, RegExpTree, ., parseRegExp, (, pattern, ,, flags]
[;, try, {, RegExpTree, ., parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, t]
[;, }, catch, (, IllegalArgumentException, ex, ), {, t, ., report, (, n, ,, MALFORMED_REGEXP, ,, ex, ., getMessage, (]
[., parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, t, ., report, (, n]
[,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, t, ., report, (, n, ,, MALFORMED_REGEXP, ,, ex]
[), ;, }, catch, (, IllegalArgumentException, ex, ), {, t, ., report, (, n, ,, MALFORMED_REGEXP, ,, ex, ., getMessage]
[;, }, }, }, }]
[., report, (, n, ,, MALFORMED_REGEXP, ,, ex, ., getMessage, (, ), ), ;, }, }, }, }]
[,, MALFORMED_REGEXP, ,, ex, ., getMessage, (, ), ), ;, }, }, }, }]
[,, ex, ., getMessage, (, ), ), ;, }, }, }, }]
[), ;, }, }, }, }]
[., getMessage, (, ), ), ;, }, }, }, }]
