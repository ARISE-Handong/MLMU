[optimizeSubtree, (, Node, subtree, ), ;, protected, void, report, (, DiagnosticType, diagnostic, ,, Node, n, ), {, JSError, error, =]
[optimizeSubtree, (, Node, subtree, ), ;, protected, void, report, (, DiagnosticType, diagnostic, ,, Node, n, ), {, JSError, error, =]
[), ;, protected, void, report, (, DiagnosticType, diagnostic, ,, Node, n, ), {, JSError, error, =, JSError, ., make, (]
[), ;, protected, void, report, (, DiagnosticType, diagnostic, ,, Node, n, ), {, JSError, error, =, JSError, ., make, (]
[report, (, DiagnosticType, diagnostic, ,, Node, n, ), {, JSError, error, =, JSError, ., make, (, NodeUtil, ., getSourceName, (]
[diagnostic, ,, Node, n, ), {, JSError, error, =, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,]
[Node, n, ), {, JSError, error, =, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,]
[), {, JSError, error, =, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, diagnostic, ,]
[), {, JSError, error, =, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, diagnostic, ,]
[make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, diagnostic, ,, n, ., toString, (, ), ), ;]
[make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, diagnostic, ,, n, ., toString, (, ), ), ;]
[getSourceName, (, n, ), ,, n, ,, diagnostic, ,, n, ., toString, (, ), ), ;, compiler, ., report, (]
[., toString, (, ), ), ;, compiler, ., report, (, error, ), ;, }, protected, void, reportCodeChange, (, ), {]
[., toString, (, ), ), ;, compiler, ., report, (, error, ), ;, }, protected, void, reportCodeChange, (, ), {]
[), ;, compiler, ., report, (, error, ), ;, }, protected, void, reportCodeChange, (, ), {, Preconditions, ., checkNotNull, (]
[., report, (, error, ), ;, }, protected, void, reportCodeChange, (, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;]
[., report, (, error, ), ;, }, protected, void, reportCodeChange, (, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, protected, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, protected, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {]
[reportCodeChange, (, ), ;, }, protected, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, Preconditions, ., checkNotNull, (]
[}, protected, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, return]
[}, protected, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, return]
[(, Node, n1, ,, Node, n2, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, return, compiler, ., areNodesEqualForInlining, (]
[n1, ,, Node, n2, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, return, compiler, ., areNodesEqualForInlining, (, n1, ,]
[compiler, ), ;, return, compiler, ., areNodesEqualForInlining, (, n1, ,, n2, ), ;, }, protected, boolean, isASTNormalized, (, ), {]
[compiler, ), ;, return, compiler, ., areNodesEqualForInlining, (, n1, ,, n2, ), ;, }, protected, boolean, isASTNormalized, (, ), {]
[compiler, ., areNodesEqualForInlining, (, n1, ,, n2, ), ;, }, protected, boolean, isASTNormalized, (, ), {, Preconditions, ., checkNotNull, (]
[n1, ,, n2, ), ;, }, protected, boolean, isASTNormalized, (, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, return]
[n1, ,, n2, ), ;, }, protected, boolean, isASTNormalized, (, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, return]
[n1, ,, n2, ), ;, }, protected, boolean, isASTNormalized, (, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, return]
[;, return, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ;, }, void, beginTraversal, (, AbstractCompiler, compiler, ), {]
[;, return, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ;, }, void, beginTraversal, (, AbstractCompiler, compiler, ), {]
[getLifeCycleStage, (, ), ., isNormalized, (, ), ;, }, void, beginTraversal, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[beginTraversal, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, void, endTraversal, (, AbstractCompiler, compiler, ), {]
[beginTraversal, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, void, endTraversal, (, AbstractCompiler, compiler, ), {]
[), {, this, ., compiler, =, compiler, ;, }, void, endTraversal, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[(, AbstractCompiler, compiler, ), {, this, ., compiler, =, null, ;, }, boolean, mayEffectMutableState, (, Node, n, ), {, return]
[(, AbstractCompiler, compiler, ), {, this, ., compiler, =, null, ;, }, boolean, mayEffectMutableState, (, Node, n, ), {, return]
[{, this, ., compiler, =, null, ;, }, boolean, mayEffectMutableState, (, Node, n, ), {, return, NodeUtil, ., mayEffectMutableState, (]
[., compiler, =, null, ;, }, boolean, mayEffectMutableState, (, Node, n, ), {, return, NodeUtil, ., mayEffectMutableState, (, n, ,]
[{, return, NodeUtil, ., mayEffectMutableState, (, n, ,, compiler, ), ;, }, boolean, mayHaveSideEffects, (, Node, n, ), {, return]
[{, return, NodeUtil, ., mayEffectMutableState, (, n, ,, compiler, ), ;, }, boolean, mayHaveSideEffects, (, Node, n, ), {, return]
[mayEffectMutableState, (, n, ,, compiler, ), ;, }, boolean, mayHaveSideEffects, (, Node, n, ), {, return, NodeUtil, ., mayHaveSideEffects, (]
[n, ,, compiler, ), ;, }, boolean, mayHaveSideEffects, (, Node, n, ), {, return, NodeUtil, ., mayHaveSideEffects, (, n, ,]
[{, return, NodeUtil, ., mayHaveSideEffects, (, n, ,, compiler, ), ;, }, boolean, nodeTypeMayHaveSideEffects, (, Node, n, ), {, return]
[{, return, NodeUtil, ., mayHaveSideEffects, (, n, ,, compiler, ), ;, }, boolean, nodeTypeMayHaveSideEffects, (, Node, n, ), {, return]
[mayHaveSideEffects, (, n, ,, compiler, ), ;, }, boolean, nodeTypeMayHaveSideEffects, (, Node, n, ), {, return, NodeUtil, ., nodeTypeMayHaveSideEffects, (]
[n, ,, compiler, ), ;, }, boolean, nodeTypeMayHaveSideEffects, (, Node, n, ), {, return, NodeUtil, ., nodeTypeMayHaveSideEffects, (, n, ,]
[n, ), {, return, NodeUtil, ., nodeTypeMayHaveSideEffects, (, n, ,, compiler, ), ;, }, boolean, isEcmaScript5OrGreater, (, ), {, return]
[n, ), {, return, NodeUtil, ., nodeTypeMayHaveSideEffects, (, n, ,, compiler, ), ;, }, boolean, isEcmaScript5OrGreater, (, ), {, return]
[n, ), {, return, NodeUtil, ., nodeTypeMayHaveSideEffects, (, n, ,, compiler, ), ;, }, boolean, isEcmaScript5OrGreater, (, ), {, return]
[{, return, NodeUtil, ., nodeTypeMayHaveSideEffects, (, n, ,, compiler, ), ;, }, boolean, isEcmaScript5OrGreater, (, ), {, return, compiler, !=]
[NodeUtil, ., nodeTypeMayHaveSideEffects, (, n, ,, compiler, ), ;, }, boolean, isEcmaScript5OrGreater, (, ), {, return, compiler, !=, null, &&]
[NodeUtil, ., nodeTypeMayHaveSideEffects, (, n, ,, compiler, ), ;, }, boolean, isEcmaScript5OrGreater, (, ), {, return, compiler, !=, null, &&]
[), {, return, compiler, !=, null, &&, compiler, ., acceptEcmaScript5, (, ), ;, }, CodingConvention, getCodingConvention, (, ), {, return]
[), {, return, compiler, !=, null, &&, compiler, ., acceptEcmaScript5, (, ), ;, }, CodingConvention, getCodingConvention, (, ), {, return]
[getCodingConvention, (, ), ;, }, @, VisibleForTesting, static, Node, validateResult, (, Node, n, ), {, done, :, {, if, (]
[getCodingConvention, (, ), ;, }, @, VisibleForTesting, static, Node, validateResult, (, Node, n, ), {, done, :, {, if, (]
[getCodingConvention, (, ), ;, }, @, VisibleForTesting, static, Node, validateResult, (, Node, n, ), {, done, :, {, if, (]
[getCodingConvention, (, ), ;, }, @, VisibleForTesting, static, Node, validateResult, (, Node, n, ), {, done, :, {, if, (]
[), ;, }, @, VisibleForTesting, static, Node, validateResult, (, Node, n, ), {, done, :, {, if, (, n, !=]
[}, @, VisibleForTesting, static, Node, validateResult, (, Node, n, ), {, done, :, {, if, (, n, !=, null, &&]
[@, VisibleForTesting, static, Node, validateResult, (, Node, n, ), {, done, :, {, if, (, n, !=, null, &&, !]
[@, VisibleForTesting, static, Node, validateResult, (, Node, n, ), {, done, :, {, if, (, n, !=, null, &&, !]
[Node, n, ), {, done, :, {, if, (, n, !=, null, &&, !, n, ., isScript, (, ), &&]
[n, ), {, done, :, {, if, (, n, !=, null, &&, !, n, ., isScript, (, ), &&, (]
[n, ), {, done, :, {, if, (, n, !=, null, &&, !, n, ., isScript, (, ), &&, (]
[), {, done, :, {, if, (, n, !=, null, &&, !, n, ., isScript, (, ), &&, (, !]
[), {, done, :, {, if, (, n, !=, null, &&, !, n, ., isScript, (, ), &&, (, !]
[(, n, !=, null, &&, !, n, ., isScript, (, ), &&, (, !, n, ., isBlock, (, ), ||]
[n, !=, null, &&, !, n, ., isScript, (, ), &&, (, !, n, ., isBlock, (, ), ||, !]
[n, !=, null, &&, !, n, ., isScript, (, ), &&, (, !, n, ., isBlock, (, ), ||, !]
[n, ., isBlock, (, ), ||, !, n, ., isSyntheticBlock, (, ), ), ), {, for, (, Node, parent, :]
[n, ., isBlock, (, ), ||, !, n, ., isSyntheticBlock, (, ), ), ), {, for, (, Node, parent, :]
[isSyntheticBlock, (, ), ), ), {, for, (, Node, parent, :, n, ., getAncestors, (, ), ), {, if, (]
[isSyntheticBlock, (, ), ), ), {, for, (, Node, parent, :, n, ., getAncestors, (, ), ), {, if, (]
[., getAncestors, (, ), ), {, if, (, parent, ., isScript, (, ), ), {, break, done, ;, }, }]
[., getAncestors, (, ), ), {, if, (, parent, ., isScript, (, ), ), {, break, done, ;, }, }]
[), {, if, (, parent, ., isScript, (, ), ), {, break, done, ;, }, }, Preconditions, ., checkState, (]
[isScript, (, ), ), {, break, done, ;, }, }, Preconditions, ., checkState, (, false, ), ;, }, }, return]
