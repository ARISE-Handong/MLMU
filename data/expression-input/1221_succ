[;, protected, List, <, Object, >, list, ;, protected, NumberTransformer, transformer, ;, public, ListUnivariateImpl, (, ), {, this, (, new]
[;, protected, List, <, Object, >, list, ;, protected, NumberTransformer, transformer, ;, public, ListUnivariateImpl, (, ), {, this, (, new]
[), ;, }, public, ListUnivariateImpl, (, List, <, Object, >, list, ), {, this, (, list, ,, new, DefaultTransformer, (]
[,, new, DefaultTransformer, (, ), ), ;, }, public, ListUnivariateImpl, (, List, <, Object, >, list, ,, NumberTransformer, transformer, )]
[), ;, }, public, ListUnivariateImpl, (, List, <, Object, >, list, ,, NumberTransformer, transformer, ), {, super, (, ), ;]
[=, list, ;, this, ., transformer, =, transformer, ;, }, @, Override, public, double, [, ], getValues, (, ), {]
[., list, =, list, ;, this, ., transformer, =, transformer, ;, }, @, Override, public, double, [, ], getValues, (]
[;, this, ., transformer, =, transformer, ;, }, @, Override, public, double, [, ], getValues, (, ), {, int, length]
[=, transformer, ;, }, @, Override, public, double, [, ], getValues, (, ), {, int, length, =, list, ., size]
[., transformer, =, transformer, ;, }, @, Override, public, double, [, ], getValues, (, ), {, int, length, =, list]
[;, }, @, Override, public, double, [, ], getValues, (, ), {, int, length, =, list, ., size, (, )]
[;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list]
[., size, (, ), ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW]
[;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, length, =]
[), {, length, =, list, ., size, (, ), -, FastMath, ., max, (, 0, ,, list, ., size, (]
[&&, wSize, <, list, ., size, (, ), ), {, length, =, list, ., size, (, ), -, FastMath, .]
[!=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, length, =, list, ., size, (]
[&&, wSize, <, list, ., size, (, ), ), {, length, =, list, ., size, (, ), -, FastMath, .]
[., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, length, =, list, ., size, (, ), -]
[), {, length, =, list, ., size, (, ), -, FastMath, ., max, (, 0, ,, list, ., size, (]
[<, list, ., size, (, ), ), {, length, =, list, ., size, (, ), -, FastMath, ., max, (]
[), {, length, =, list, ., size, (, ), -, FastMath, ., max, (, 0, ,, list, ., size, (]
[., size, (, ), ), {, length, =, list, ., size, (, ), -, FastMath, ., max, (, 0, ,]
[=, list, ., size, (, ), -, FastMath, ., max, (, 0, ,, list, ., size, (, ), -, wSize]
[;, }, double, [, ], copiedArray, =, new, double, [, length, ], ;, for, (, int, i, =, 0, ;]
[-, FastMath, ., max, (, 0, ,, list, ., size, (, ), -, wSize, ), ;, }, double, [, ]]
[., size, (, ), -, FastMath, ., max, (, 0, ,, list, ., size, (, ), -, wSize, ), ;]
[;, }, double, [, ], copiedArray, =, new, double, [, length, ], ;, for, (, int, i, =, 0, ;]
[., max, (, 0, ,, list, ., size, (, ), -, wSize, ), ;, }, double, [, ], copiedArray, =]
[,, list, ., size, (, ), -, wSize, ), ;, }, double, [, ], copiedArray, =, new, double, [, length]
[), ;, }, double, [, ], copiedArray, =, new, double, [, length, ], ;, for, (, int, i, =, 0]
[-, wSize, ), ;, }, double, [, ], copiedArray, =, new, double, [, length, ], ;, for, (, int, i]
[., size, (, ), -, wSize, ), ;, }, double, [, ], copiedArray, =, new, double, [, length, ], ;]
[), ;, }, double, [, ], copiedArray, =, new, double, [, length, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, copiedArray, ., length, ;, i, ++, ), {, copiedArray, []
[], ;, for, (, int, i, =, 0, ;, i, <, copiedArray, ., length, ;, i, ++, ), {, copiedArray]
[;, i, <, copiedArray, ., length, ;, i, ++, ), {, copiedArray, [, i, ], =, getElement, (, i, )]
[;, i, ++, ), {, copiedArray, [, i, ], =, getElement, (, i, ), ;, }, return, copiedArray, ;, }]
[<, copiedArray, ., length, ;, i, ++, ), {, copiedArray, [, i, ], =, getElement, (, i, ), ;, }]
[;, i, ++, ), {, copiedArray, [, i, ], =, getElement, (, i, ), ;, }, return, copiedArray, ;, }]
[., length, ;, i, ++, ), {, copiedArray, [, i, ], =, getElement, (, i, ), ;, }, return, copiedArray]
[), {, copiedArray, [, i, ], =, getElement, (, i, ), ;, }, return, copiedArray, ;, }, @, Override, public]
[++, ), {, copiedArray, [, i, ], =, getElement, (, i, ), ;, }, return, copiedArray, ;, }, @, Override]
[=, getElement, (, i, ), ;, }, return, copiedArray, ;, }, @, Override, public, double, getElement, (, int, index, )]
[[, i, ], =, getElement, (, i, ), ;, }, return, copiedArray, ;, }, @, Override, public, double, getElement, (]
[], =, getElement, (, i, ), ;, }, return, copiedArray, ;, }, @, Override, public, double, getElement, (, int, index]
[;, }, return, copiedArray, ;, }, @, Override, public, double, getElement, (, int, index, ), {, double, value, =, Double]
[), ;, }, return, copiedArray, ;, }, @, Override, public, double, getElement, (, int, index, ), {, double, value, =]
[;, }, @, Override, public, double, getElement, (, int, index, ), {, double, value, =, Double, ., NaN, ;, int]
[;, int, calcIndex, =, index, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, .]
[., NaN, ;, int, calcIndex, =, index, ;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=]
[;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list]
[;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, calcIndex, =]
[), {, calcIndex, =, (, list, ., size, (, ), -, wSize, ), +, index, ;, }, try, {, value]
[&&, wSize, <, list, ., size, (, ), ), {, calcIndex, =, (, list, ., size, (, ), -, wSize]
[!=, DescriptiveStatistics, ., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, calcIndex, =, (, list, ., size]
[&&, wSize, <, list, ., size, (, ), ), {, calcIndex, =, (, list, ., size, (, ), -, wSize]
[., INFINITE_WINDOW, &&, wSize, <, list, ., size, (, ), ), {, calcIndex, =, (, list, ., size, (, )]
[), {, calcIndex, =, (, list, ., size, (, ), -, wSize, ), +, index, ;, }, try, {, value]
[<, list, ., size, (, ), ), {, calcIndex, =, (, list, ., size, (, ), -, wSize, ), +]
[), {, calcIndex, =, (, list, ., size, (, ), -, wSize, ), +, index, ;, }, try, {, value]
[., size, (, ), ), {, calcIndex, =, (, list, ., size, (, ), -, wSize, ), +, index, ;]
[=, (, list, ., size, (, ), -, wSize, ), +, index, ;, }, try, {, value, =, transformer, .]
[;, }, try, {, value, =, transformer, ., transform, (, list, ., get, (, calcIndex, ), ), ;, }, catch]
[+, index, ;, }, try, {, value, =, transformer, ., transform, (, list, ., get, (, calcIndex, ), ), ;]
[), +, index, ;, }, try, {, value, =, transformer, ., transform, (, list, ., get, (, calcIndex, ), )]
[-, wSize, ), +, index, ;, }, try, {, value, =, transformer, ., transform, (, list, ., get, (, calcIndex]
[., size, (, ), -, wSize, ), +, index, ;, }, try, {, value, =, transformer, ., transform, (, list]
[), +, index, ;, }, try, {, value, =, transformer, ., transform, (, list, ., get, (, calcIndex, ), )]
[;, }, try, {, value, =, transformer, ., transform, (, list, ., get, (, calcIndex, ), ), ;, }, catch]
[=, transformer, ., transform, (, list, ., get, (, calcIndex, ), ), ;, }, catch, (, MathIllegalArgumentException, e, ), {]
[;, }, catch, (, MathIllegalArgumentException, e, ), {, e, ., printStackTrace, (, ), ;, }, return, value, ;, }, @]
[., transform, (, list, ., get, (, calcIndex, ), ), ;, }, catch, (, MathIllegalArgumentException, e, ), {, e, .]
[), ;, }, catch, (, MathIllegalArgumentException, e, ), {, e, ., printStackTrace, (, ), ;, }, return, value, ;, }]
[., get, (, calcIndex, ), ), ;, }, catch, (, MathIllegalArgumentException, e, ), {, e, ., printStackTrace, (, ), ;]
[), ), ;, }, catch, (, MathIllegalArgumentException, e, ), {, e, ., printStackTrace, (, ), ;, }, return, value, ;]
[;, }, return, value, ;, }, @, Override, public, long, getN, (, ), {, int, n, =, 0, ;, final]
[., printStackTrace, (, ), ;, }, return, value, ;, }, @, Override, public, long, getN, (, ), {, int, n]
[;, }, @, Override, public, long, getN, (, ), {, int, n, =, 0, ;, final, int, wSize, =, getWindowSize]
[;, final, int, wSize, =, getWindowSize, (, ), ;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, ), {, if, (]
[;, if, (, wSize, !=, DescriptiveStatistics, ., INFINITE_WINDOW, ), {, if, (, list, ., size, (, ), >, wSize, )]
[), {, if, (, list, ., size, (, ), >, wSize, ), {, n, =, wSize, ;, }, else, {]
[!=, DescriptiveStatistics, ., INFINITE_WINDOW, ), {, if, (, list, ., size, (, ), >, wSize, ), {, n, =, wSize]
[), {, if, (, list, ., size, (, ), >, wSize, ), {, n, =, wSize, ;, }, else, {]
[., INFINITE_WINDOW, ), {, if, (, list, ., size, (, ), >, wSize, ), {, n, =, wSize, ;, }]
[), {, n, =, wSize, ;, }, else, {, n, =, list, ., size, (, ), ;, }, }, else]
[>, wSize, ), {, n, =, wSize, ;, }, else, {, n, =, list, ., size, (, ), ;, }]
[., size, (, ), >, wSize, ), {, n, =, wSize, ;, }, else, {, n, =, list, ., size]
[), {, n, =, wSize, ;, }, else, {, n, =, list, ., size, (, ), ;, }, }, else]
[=, wSize, ;, }, else, {, n, =, list, ., size, (, ), ;, }, }, else, {, n, =]
[;, }, else, {, n, =, list, ., size, (, ), ;, }, }, else, {, n, =, list, .]
[=, list, ., size, (, ), ;, }, }, else, {, n, =, list, ., size, (, ), ;, }]
[;, }, }, else, {, n, =, list, ., size, (, ), ;, }, return, n, ;, }, @, Override]
[., size, (, ), ;, }, }, else, {, n, =, list, ., size, (, ), ;, }, return, n]
[=, list, ., size, (, ), ;, }, return, n, ;, }, @, Override, public, void, addValue, (, double, v]
[;, }, return, n, ;, }, @, Override, public, void, addValue, (, double, v, ), {, list, ., add, (]
[., size, (, ), ;, }, return, n, ;, }, @, Override, public, void, addValue, (, double, v, ), {]
[;, }, @, Override, public, void, addValue, (, double, v, ), {, list, ., add, (, Double, ., valueOf, (]
[;, }, public, void, addObject, (, Object, o, ), {, list, ., add, (, o, ), ;, }, @, Override]
[., add, (, Double, ., valueOf, (, v, ), ), ;, }, public, void, addObject, (, Object, o, ), {]
[), ;, }, public, void, addObject, (, Object, o, ), {, list, ., add, (, o, ), ;, }, @]
[., valueOf, (, v, ), ), ;, }, public, void, addObject, (, Object, o, ), {, list, ., add, (]
[), ), ;, }, public, void, addObject, (, Object, o, ), {, list, ., add, (, o, ), ;, }]
[;, }, @, Override, public, void, clear, (, ), {, list, ., clear, (, ), ;, }, @, Override, public]
[., add, (, o, ), ;, }, @, Override, public, void, clear, (, ), {, list, ., clear, (, )]
[), ;, }, @, Override, public, void, clear, (, ), {, list, ., clear, (, ), ;, }, @, Override]
[;, }, @, Override, public, double, apply, (, UnivariateStatistic, stat, ), {, double, [, ], v, =, this, ., getValues]
[., clear, (, ), ;, }, @, Override, public, double, apply, (, UnivariateStatistic, stat, ), {, double, [, ], v]
[;, if, (, v, !=, null, ), {, return, stat, ., evaluate, (, v, ,, 0, ,, v, ., length]
[., getValues, (, ), ;, if, (, v, !=, null, ), {, return, stat, ., evaluate, (, v, ,, 0]
[), {, return, stat, ., evaluate, (, v, ,, 0, ,, v, ., length, ), ;, }, return, Double, .]
[!=, null, ), {, return, stat, ., evaluate, (, v, ,, 0, ,, v, ., length, ), ;, }, return]
[), {, return, stat, ., evaluate, (, v, ,, 0, ,, v, ., length, ), ;, }, return, Double, .]
[;, }, return, Double, ., NaN, ;, }, public, NumberTransformer, getTransformer, (, ), {, return, transformer, ;, }, public, void]
[., evaluate, (, v, ,, 0, ,, v, ., length, ), ;, }, return, Double, ., NaN, ;, }, public]
[,, 0, ,, v, ., length, ), ;, }, return, Double, ., NaN, ;, }, public, NumberTransformer, getTransformer, (, )]
[,, v, ., length, ), ;, }, return, Double, ., NaN, ;, }, public, NumberTransformer, getTransformer, (, ), {, return]
[), ;, }, return, Double, ., NaN, ;, }, public, NumberTransformer, getTransformer, (, ), {, return, transformer, ;, }, public]
[., length, ), ;, }, return, Double, ., NaN, ;, }, public, NumberTransformer, getTransformer, (, ), {, return, transformer, ;]
[;, }, public, NumberTransformer, getTransformer, (, ), {, return, transformer, ;, }, public, void, setTransformer, (, NumberTransformer, transformer, ), {]
[., NaN, ;, }, public, NumberTransformer, getTransformer, (, ), {, return, transformer, ;, }, public, void, setTransformer, (, NumberTransformer, transformer]
[;, }, public, void, setTransformer, (, NumberTransformer, transformer, ), {, this, ., transformer, =, transformer, ;, }, @, Override, public]
[=, transformer, ;, }, @, Override, public, void, setWindowSize, (, int, windowSize, ), {, super, ., setWindowSize, (, windowSize, )]
[., transformer, =, transformer, ;, }, @, Override, public, void, setWindowSize, (, int, windowSize, ), {, super, ., setWindowSize, (]
[;, }, @, Override, public, void, setWindowSize, (, int, windowSize, ), {, super, ., setWindowSize, (, windowSize, ), ;, int]
[;, int, extra, =, list, ., size, (, ), -, windowSize, ;, for, (, int, i, =, 0, ;, i]
[., setWindowSize, (, windowSize, ), ;, int, extra, =, list, ., size, (, ), -, windowSize, ;, for, (, int]
[), ;, int, extra, =, list, ., size, (, ), -, windowSize, ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, extra, ;, i, ++, ), {, list, ., remove, (]
[-, windowSize, ;, for, (, int, i, =, 0, ;, i, <, extra, ;, i, ++, ), {, list, .]
[., size, (, ), -, windowSize, ;, for, (, int, i, =, 0, ;, i, <, extra, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, extra, ;, i, ++, ), {, list, ., remove, (]
[;, i, <, extra, ;, i, ++, ), {, list, ., remove, (, 0, ), ;, }, }, }]
[;, i, ++, ), {, list, ., remove, (, 0, ), ;, }, }, }]
[<, extra, ;, i, ++, ), {, list, ., remove, (, 0, ), ;, }, }, }]
[;, i, ++, ), {, list, ., remove, (, 0, ), ;, }, }, }]
[), {, list, ., remove, (, 0, ), ;, }, }, }]
[++, ), {, list, ., remove, (, 0, ), ;, }, }, }]
[;, }, }, }]
[., remove, (, 0, ), ;, }, }, }]
[), ;, }, }, }]
