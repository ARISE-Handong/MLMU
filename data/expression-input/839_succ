[;, }, public, Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, cc, =, toContentConstraint, (, constraint, )]
[), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, cc, =, toContentConstraint, (, constraint]
[;, LengthConstraintType, w, =, cc, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;, Size2D]
[), ;, LengthConstraintType, w, =, cc, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;]
[;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (, w, ==, LengthConstraintType]
[., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if]
[;, Size2D, contentSize, =, null, ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType]
[., getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if]
[;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else]
[==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, g2]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else]
[., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, g2, ), ;]
[), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {]
[==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType]
[), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {]
[., NONE, ), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE]
[=, arrangeNN, (, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;]
[), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType]
[), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {]
[., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;]
[), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, )]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==]
[), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, )]
[., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, .]
[;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE]
[), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange]
[==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeRN, (, g2]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange]
[., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeRN, (, g2, ,, cc]
[), {, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (, h]
[==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange, (, ), ), ;, }]
[), {, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (, h]
[., NONE, ), {, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if]
[=, arrangeRN, (, g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, g2, ,, cc, .]
[,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, g2, ,, cc]
[., getWidthRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR]
[), {, contentSize, =, arrangeRR, (, g2, ,, cc, ., getWidthRange, (, ), ,, cc, ., getHeightRange, (, ), )]
[==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, g2, ,, cc, ., getWidthRange, (, ), ,, cc, .]
[), {, contentSize, =, arrangeRR, (, g2, ,, cc, ., getWidthRange, (, ), ,, cc, ., getHeightRange, (, ), )]
[., RANGE, ), {, contentSize, =, arrangeRR, (, g2, ,, cc, ., getWidthRange, (, ), ,, cc, ., getHeightRange, (]
[=, arrangeRR, (, g2, ,, cc, ., getWidthRange, (, ), ,, cc, ., getHeightRange, (, ), ), ;, }, else]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }]
[,, cc, ., getWidthRange, (, ), ,, cc, ., getHeightRange, (, ), ), ;, }, else, if, (, h, ==]
[,, cc, ., getHeightRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw]
[., getWidthRange, (, ), ,, cc, ., getHeightRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;]
[., getHeightRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException]
[), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, )]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==]
[), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, )]
[., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, .]
[;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE]
[), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth]
[==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (, g2]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth]
[., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (, g2, ,, cc]
[), {, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth, (, ), ), ;, }, else, if, (, h]
[==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth, (, ), ), ;, }]
[), {, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth, (, ), ), ;, }, else, if, (, h]
[., NONE, ), {, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth, (, ), ), ;, }, else, if]
[=, arrangeFN, (, g2, ,, cc, ., getWidth, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }]
[,, cc, ., getWidth, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;]
[., getWidth, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException]
[), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType]
[), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {]
[., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;]
[), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, if, (, contentSize, ., width, <=, 0.0, ||, contentSize]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, if, (, contentSize, ., width]
[), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, if, (, contentSize, ., width, <=, 0.0, ||, contentSize]
[., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, if, (, contentSize, ., width, <=, 0.0]
[;, }, }, if, (, contentSize, ., width, <=, 0.0, ||, contentSize, ., height, <=, 0.0, ), {, return, new]
[), ;, }, }, if, (, contentSize, ., width, <=, 0.0, ||, contentSize, ., height, <=, 0.0, ), {, return]
[), {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, else, {, return, new, Size2D, (, calculateTotalWidth, (]
[||, contentSize, ., height, <=, 0.0, ), {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, else, {]
[<=, 0.0, ||, contentSize, ., height, <=, 0.0, ), {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }]
[., width, <=, 0.0, ||, contentSize, ., height, <=, 0.0, ), {, return, new, Size2D, (, 0.0, ,, 0.0, )]
[||, contentSize, ., height, <=, 0.0, ), {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, else, {]
[), {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, else, {, return, new, Size2D, (, calculateTotalWidth, (]
[<=, 0.0, ), {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, else, {, return, new, Size2D, (]
[., height, <=, 0.0, ), {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, else, {, return, new]
[), {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, else, {, return, new, Size2D, (, calculateTotalWidth, (]
[;, }, else, {, return, new, Size2D, (, calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,, calculateTotalHeight, (, contentSize]
[,, 0.0, ), ;, }, else, {, return, new, Size2D, (, calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,]
[), ;, }, else, {, return, new, Size2D, (, calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,, calculateTotalHeight, (]
[;, }, }, protected, Size2D, arrangeNN, (, Graphics2D, g2, ), {, Range, max, =, new, Range, (, 0.0, ,, Float]
[,, calculateTotalHeight, (, contentSize, ., getHeight, (, ), ), ), ;, }, }, protected, Size2D, arrangeNN, (, Graphics2D, g2, )]
[), ,, calculateTotalHeight, (, contentSize, ., getHeight, (, ), ), ), ;, }, }, protected, Size2D, arrangeNN, (, Graphics2D, g2]
[., getWidth, (, ), ), ,, calculateTotalHeight, (, contentSize, ., getHeight, (, ), ), ), ;, }, }, protected, Size2D]
[), ;, }, }, protected, Size2D, arrangeNN, (, Graphics2D, g2, ), {, Range, max, =, new, Range, (, 0.0, ,]
[), ), ;, }, }, protected, Size2D, arrangeNN, (, Graphics2D, g2, ), {, Range, max, =, new, Range, (, 0.0]
[., getHeight, (, ), ), ), ;, }, }, protected, Size2D, arrangeNN, (, Graphics2D, g2, ), {, Range, max, =]
[;, return, arrangeRR, (, g2, ,, max, ,, max, ), ;, }, protected, Size2D, arrangeRN, (, Graphics2D, g2, ,, Range]
[,, Float, ., MAX_VALUE, ), ;, return, arrangeRR, (, g2, ,, max, ,, max, ), ;, }, protected, Size2D, arrangeRN]
[), ;, return, arrangeRR, (, g2, ,, max, ,, max, ), ;, }, protected, Size2D, arrangeRN, (, Graphics2D, g2, ,]
[., MAX_VALUE, ), ;, return, arrangeRR, (, g2, ,, max, ,, max, ), ;, }, protected, Size2D, arrangeRN, (, Graphics2D]
[;, }, protected, Size2D, arrangeRN, (, Graphics2D, g2, ,, Range, widthRange, ), {, Size2D, s, =, arrangeNN, (, g2, )]
[,, max, ,, max, ), ;, }, protected, Size2D, arrangeRN, (, Graphics2D, g2, ,, Range, widthRange, ), {, Size2D, s]
[,, max, ), ;, }, protected, Size2D, arrangeRN, (, Graphics2D, g2, ,, Range, widthRange, ), {, Size2D, s, =, arrangeNN]
[), ;, }, protected, Size2D, arrangeRN, (, Graphics2D, g2, ,, Range, widthRange, ), {, Size2D, s, =, arrangeNN, (, g2]
[;, if, (, widthRange, ., contains, (, s, ., getWidth, (, ), ), ), {, return, s, ;, }, double]
[), ;, if, (, widthRange, ., contains, (, s, ., getWidth, (, ), ), ), {, return, s, ;, }]
[), {, return, s, ;, }, double, ww, =, widthRange, ., constrain, (, s, ., getWidth, (, ), ), ;]
[., contains, (, s, ., getWidth, (, ), ), ), {, return, s, ;, }, double, ww, =, widthRange, .]
[), ), {, return, s, ;, }, double, ww, =, widthRange, ., constrain, (, s, ., getWidth, (, ), )]
[., getWidth, (, ), ), ), {, return, s, ;, }, double, ww, =, widthRange, ., constrain, (, s, .]
[;, }, double, ww, =, widthRange, ., constrain, (, s, ., getWidth, (, ), ), ;, return, arrangeFN, (, g2]
[;, return, arrangeFN, (, g2, ,, ww, ), ;, }, protected, Size2D, arrangeFN, (, Graphics2D, g2, ,, double, w, )]
[., constrain, (, s, ., getWidth, (, ), ), ;, return, arrangeFN, (, g2, ,, ww, ), ;, }, protected]
[), ;, return, arrangeFN, (, g2, ,, ww, ), ;, }, protected, Size2D, arrangeFN, (, Graphics2D, g2, ,, double, w]
[., getWidth, (, ), ), ;, return, arrangeFN, (, g2, ,, ww, ), ;, }, protected, Size2D, arrangeFN, (, Graphics2D]
[;, }, protected, Size2D, arrangeFN, (, Graphics2D, g2, ,, double, w, ), {, g2, ., setFont, (, getFont, (, )]
[,, ww, ), ;, }, protected, Size2D, arrangeFN, (, Graphics2D, g2, ,, double, w, ), {, g2, ., setFont, (]
[), ;, }, protected, Size2D, arrangeFN, (, Graphics2D, g2, ,, double, w, ), {, g2, ., setFont, (, getFont, (]
[;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (]
[., setFont, (, getFont, (, ), ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getFont, (, ), ), ;]
[), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds]
[;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (, bounds]
[., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2]
[), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[;, if, (, bounds, ., getWidth, (, ), <=, w, ), {, return, new, Size2D, (, w, ,, bounds, .]
[., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=]
[,, g2, ,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=, w, ), {, return, new, Size2D]
[,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=, w, ), {, return, new, Size2D, (, w]
[), ;, if, (, bounds, ., getWidth, (, ), <=, w, ), {, return, new, Size2D, (, w, ,, bounds]
[), {, return, new, Size2D, (, w, ,, bounds, ., getHeight, (, ), ), ;, }, else, {, return, new]
[<=, w, ), {, return, new, Size2D, (, w, ,, bounds, ., getHeight, (, ), ), ;, }, else, {]
[., getWidth, (, ), <=, w, ), {, return, new, Size2D, (, w, ,, bounds, ., getHeight, (, ), )]
[), {, return, new, Size2D, (, w, ,, bounds, ., getHeight, (, ), ), ;, }, else, {, return, new]
[;, }, else, {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, }, protected, Size2D, arrangeRR, (, Graphics2D]
[,, bounds, ., getHeight, (, ), ), ;, }, else, {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;]
[), ;, }, else, {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, }, protected, Size2D, arrangeRR, (]
[., getHeight, (, ), ), ;, }, else, {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, }]
[;, }, }, protected, Size2D, arrangeRR, (, Graphics2D, g2, ,, Range, widthRange, ,, Range, heightRange, ), {, g2, ., setFont]
[,, 0.0, ), ;, }, }, protected, Size2D, arrangeRR, (, Graphics2D, g2, ,, Range, widthRange, ,, Range, heightRange, ), {]
[), ;, }, }, protected, Size2D, arrangeRR, (, Graphics2D, g2, ,, Range, widthRange, ,, Range, heightRange, ), {, g2, .]
[;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (]
[., setFont, (, getFont, (, ), ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getFont, (, ), ), ;]
[), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds]
[;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (, bounds]
[., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2]
[), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[;, if, (, bounds, ., getWidth, (, ), <=, widthRange, ., getUpperBound, (, ), &&, bounds, ., getHeight, (, )]
[., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=]
[,, g2, ,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=, widthRange, ., getUpperBound, (, ), &&]
[,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=, widthRange, ., getUpperBound, (, ), &&, bounds, .]
[), ;, if, (, bounds, ., getWidth, (, ), <=, widthRange, ., getUpperBound, (, ), &&, bounds, ., getHeight, (]
[), {, return, new, Size2D, (, bounds, ., getWidth, (, ), ,, bounds, ., getHeight, (, ), ), ;, }]
[&&, bounds, ., getHeight, (, ), <=, heightRange, ., getUpperBound, (, ), ), {, return, new, Size2D, (, bounds, .]
[<=, widthRange, ., getUpperBound, (, ), &&, bounds, ., getHeight, (, ), <=, heightRange, ., getUpperBound, (, ), ), {]
[., getWidth, (, ), <=, widthRange, ., getUpperBound, (, ), &&, bounds, ., getHeight, (, ), <=, heightRange, ., getUpperBound]
[&&, bounds, ., getHeight, (, ), <=, heightRange, ., getUpperBound, (, ), ), {, return, new, Size2D, (, bounds, .]
[., getUpperBound, (, ), &&, bounds, ., getHeight, (, ), <=, heightRange, ., getUpperBound, (, ), ), {, return, new]
[), {, return, new, Size2D, (, bounds, ., getWidth, (, ), ,, bounds, ., getHeight, (, ), ), ;, }]
[<=, heightRange, ., getUpperBound, (, ), ), {, return, new, Size2D, (, bounds, ., getWidth, (, ), ,, bounds, .]
[., getHeight, (, ), <=, heightRange, ., getUpperBound, (, ), ), {, return, new, Size2D, (, bounds, ., getWidth, (]
[), {, return, new, Size2D, (, bounds, ., getWidth, (, ), ,, bounds, ., getHeight, (, ), ), ;, }]
[., getUpperBound, (, ), ), {, return, new, Size2D, (, bounds, ., getWidth, (, ), ,, bounds, ., getHeight, (]
[;, }, else, {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, }, public, Object, draw, (, Graphics2D]
[,, bounds, ., getHeight, (, ), ), ;, }, else, {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;]
[., getWidth, (, ), ,, bounds, ., getHeight, (, ), ), ;, }, else, {, return, new, Size2D, (, 0.0]
[), ;, }, else, {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, }, public, Object, draw, (]
[., getHeight, (, ), ), ;, }, else, {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, }]
[;, }, }, public, Object, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Object, params, ), {, if, (, area]
[,, 0.0, ), ;, }, }, public, Object, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Object, params, ), {]
[), ;, }, }, public, Object, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Object, params, ), {, if, (]
[), {, return, null, ;, }, area, =, trimMargin, (, area, ), ;, drawBorder, (, g2, ,, area, ), ;]
[., isEmpty, (, ), ), {, return, null, ;, }, area, =, trimMargin, (, area, ), ;, drawBorder, (, g2]
[;, }, area, =, trimMargin, (, area, ), ;, drawBorder, (, g2, ,, area, ), ;, area, =, trimBorder, (]
[=, trimMargin, (, area, ), ;, drawBorder, (, g2, ,, area, ), ;, area, =, trimBorder, (, area, ), ;]
[;, drawBorder, (, g2, ,, area, ), ;, area, =, trimBorder, (, area, ), ;, area, =, trimPadding, (, area]
[), ;, drawBorder, (, g2, ,, area, ), ;, area, =, trimBorder, (, area, ), ;, area, =, trimPadding, (]
[;, area, =, trimBorder, (, area, ), ;, area, =, trimPadding, (, area, ), ;, g2, ., setFont, (, getFont]
[,, area, ), ;, area, =, trimBorder, (, area, ), ;, area, =, trimPadding, (, area, ), ;, g2, .]
[), ;, area, =, trimBorder, (, area, ), ;, area, =, trimPadding, (, area, ), ;, g2, ., setFont, (]
[=, trimBorder, (, area, ), ;, area, =, trimPadding, (, area, ), ;, g2, ., setFont, (, getFont, (, )]
[;, area, =, trimPadding, (, area, ), ;, g2, ., setFont, (, getFont, (, ), ), ;, g2, ., setPaint]
[), ;, area, =, trimPadding, (, area, ), ;, g2, ., setFont, (, getFont, (, ), ), ;, g2, .]
[=, trimPadding, (, area, ), ;, g2, ., setFont, (, getFont, (, ), ), ;, g2, ., setPaint, (, getPaint]
[;, g2, ., setFont, (, getFont, (, ), ), ;, g2, ., setPaint, (, getPaint, (, ), ), ;, TextUtilities]
[), ;, g2, ., setFont, (, getFont, (, ), ), ;, g2, ., setPaint, (, getPaint, (, ), ), ;]
[;, g2, ., setPaint, (, getPaint, (, ), ), ;, TextUtilities, ., drawAlignedString, (, getText, (, ), ,, g2, ,]
[., setFont, (, getFont, (, ), ), ;, g2, ., setPaint, (, getPaint, (, ), ), ;, TextUtilities, ., drawAlignedString]
[), ;, g2, ., setPaint, (, getPaint, (, ), ), ;, TextUtilities, ., drawAlignedString, (, getText, (, ), ,, g2]
[;, TextUtilities, ., drawAlignedString, (, getText, (, ), ,, g2, ,, (, float, ), area, ., getMinX, (, ), ,]
[., setPaint, (, getPaint, (, ), ), ;, TextUtilities, ., drawAlignedString, (, getText, (, ), ,, g2, ,, (, float]
[), ;, TextUtilities, ., drawAlignedString, (, getText, (, ), ,, g2, ,, (, float, ), area, ., getMinX, (, )]
[;, return, null, ;, }, }]
[., drawAlignedString, (, getText, (, ), ,, g2, ,, (, float, ), area, ., getMinX, (, ), ,, (, float]
[,, g2, ,, (, float, ), area, ., getMinX, (, ), ,, (, float, ), area, ., getMinY, (, )]
[,, (, float, ), area, ., getMinX, (, ), ,, (, float, ), area, ., getMinY, (, ), ,, TextAnchor]
[,, (, float, ), area, ., getMinY, (, ), ,, TextAnchor, ., TOP_LEFT, ), ;, return, null, ;, }, }]
[,, (, float, ), area, ., getMinY, (, ), ,, TextAnchor, ., TOP_LEFT, ), ;, return, null, ;, }, }]
[., getMinX, (, ), ,, (, float, ), area, ., getMinY, (, ), ,, TextAnchor, ., TOP_LEFT, ), ;, return]
[,, TextAnchor, ., TOP_LEFT, ), ;, return, null, ;, }, }]
[,, TextAnchor, ., TOP_LEFT, ), ;, return, null, ;, }, }]
[., getMinY, (, ), ,, TextAnchor, ., TOP_LEFT, ), ;, return, null, ;, }, }]
[), ;, return, null, ;, }, }]
[., TOP_LEFT, ), ;, return, null, ;, }, }]
[;, }, }]
