[;, private, final, CommandLineConfig, config, ;, private, Appendable, jsOutput, ;, private, final, PrintStream, err, ;, private, A, compiler, ;, private]
[., error, (, "JSC_OUTPUT_SAME_AS_INPUT_ERROR", ,, "Bad output file (already listed as input file): {0}", ), ;, private, final, CommandLineConfig, config, ;, private, Appendable, jsOutput, ;, private, final, PrintStream]
[,, "Bad output file (already listed as input file): {0}", ), ;, private, final, CommandLineConfig, config, ;, private, Appendable, jsOutput, ;, private, final, PrintStream, err, ;, private, A]
[), ;, private, final, CommandLineConfig, config, ;, private, Appendable, jsOutput, ;, private, final, PrintStream, err, ;, private, A, compiler, ;]
[;, private, Supplier, <, List, <, SourceFile, >, >, externsSupplierForTesting, =, null, ;, private, Supplier, <, List, <, SourceFile, >]
[;, private, Supplier, <, List, <, SourceFile, >, >, inputsSupplierForTesting, =, null, ;, private, Supplier, <, List, <, JSModule, >]
[;, private, Supplier, <, List, <, JSModule, >, >, modulesSupplierForTesting, =, null, ;, private, Function, <, Integer, ,, Boolean, >]
[;, private, Function, <, Integer, ,, Boolean, >, exitCodeReceiverForTesting, =, null, ;, private, Map, <, String, ,, String, >, rootRelativePathsMap]
[;, private, Map, <, String, ,, String, >, rootRelativePathsMap, =, null, ;, private, Map, <, String, ,, String, >, parsedModuleWrappers]
[;, private, Map, <, String, ,, String, >, parsedModuleWrappers, =, null, ;, private, static, final, int, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, =, 100, ;]
[;, private, static, final, int, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, =, 100, ;, private, static, final, String, OUTPUT_MARKER, =, "%output%", ;, private, static, final]
[;, private, static, final, String, OUTPUT_MARKER, =, "%output%", ;, private, static, final, String, OUTPUT_MARKER_JS_STRING, =, "%output|jsstring%", ;, private, final, RunTimeStats]
[;, private, static, final, String, OUTPUT_MARKER_JS_STRING, =, "%output|jsstring%", ;, private, final, RunTimeStats, runTimeStats, =, new, RunTimeStats, (, ), ;, AbstractCommandLineRunner]
[;, private, final, RunTimeStats, runTimeStats, =, new, RunTimeStats, (, ), ;, AbstractCommandLineRunner, (, ), {, this, (, System, ., out]
[;, AbstractCommandLineRunner, (, ), {, this, (, System, ., out, ,, System, ., err, ), ;, }, AbstractCommandLineRunner, (, PrintStream]
[,, System, ., err, ), ;, }, AbstractCommandLineRunner, (, PrintStream, out, ,, PrintStream, err, ), {, this, ., config, =]
[., out, ,, System, ., err, ), ;, }, AbstractCommandLineRunner, (, PrintStream, out, ,, PrintStream, err, ), {, this, .]
[), ;, }, AbstractCommandLineRunner, (, PrintStream, out, ,, PrintStream, err, ), {, this, ., config, =, new, CommandLineConfig, (, )]
[., err, ), ;, }, AbstractCommandLineRunner, (, PrintStream, out, ,, PrintStream, err, ), {, this, ., config, =, new, CommandLineConfig]
[=, new, CommandLineConfig, (, ), ;, this, ., jsOutput, =, Preconditions, ., checkNotNull, (, out, ), ;, this, ., err]
[., config, =, new, CommandLineConfig, (, ), ;, this, ., jsOutput, =, Preconditions, ., checkNotNull, (, out, ), ;, this]
[;, this, ., jsOutput, =, Preconditions, ., checkNotNull, (, out, ), ;, this, ., err, =, Preconditions, ., checkNotNull, (]
[=, Preconditions, ., checkNotNull, (, out, ), ;, this, ., err, =, Preconditions, ., checkNotNull, (, err, ), ;, }]
[., jsOutput, =, Preconditions, ., checkNotNull, (, out, ), ;, this, ., err, =, Preconditions, ., checkNotNull, (, err, )]
[;, this, ., err, =, Preconditions, ., checkNotNull, (, err, ), ;, }, @, VisibleForTesting, void, enableTestMode, (, Supplier, <]
[., checkNotNull, (, out, ), ;, this, ., err, =, Preconditions, ., checkNotNull, (, err, ), ;, }, @, VisibleForTesting]
[), ;, this, ., err, =, Preconditions, ., checkNotNull, (, err, ), ;, }, @, VisibleForTesting, void, enableTestMode, (, Supplier]
[=, Preconditions, ., checkNotNull, (, err, ), ;, }, @, VisibleForTesting, void, enableTestMode, (, Supplier, <, List, <, SourceFile, >]
[., err, =, Preconditions, ., checkNotNull, (, err, ), ;, }, @, VisibleForTesting, void, enableTestMode, (, Supplier, <, List, <]
[;, }, @, VisibleForTesting, void, enableTestMode, (, Supplier, <, List, <, SourceFile, >, >, externsSupplier, ,, Supplier, <, List, <]
[., checkNotNull, (, err, ), ;, }, @, VisibleForTesting, void, enableTestMode, (, Supplier, <, List, <, SourceFile, >, >, externsSupplier]
[), ;, }, @, VisibleForTesting, void, enableTestMode, (, Supplier, <, List, <, SourceFile, >, >, externsSupplier, ,, Supplier, <, List]
[;, testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;, this, ., modulesSupplierForTesting]
[., checkArgument, (, inputsSupplier, ==, null, ^, modulesSupplier, ==, null, ), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =]
[), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;, this, .]
[^, modulesSupplier, ==, null, ), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =]
[==, null, ^, modulesSupplier, ==, null, ), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, .]
[^, modulesSupplier, ==, null, ), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =]
[), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;, this, .]
[==, null, ), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;]
[), ;, testMode, =, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;, this, .]
[=, true, ;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;, this, ., modulesSupplierForTesting, =, modulesSupplier]
[;, this, ., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;, this, ., modulesSupplierForTesting, =, modulesSupplier, ;, this]
[=, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;, this, ., modulesSupplierForTesting, =, modulesSupplier, ;, this, ., exitCodeReceiverForTesting, =, exitCodeReceiver]
[., externsSupplierForTesting, =, externsSupplier, ;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;, this, ., modulesSupplierForTesting, =, modulesSupplier, ;, this, ., exitCodeReceiverForTesting]
[;, this, ., inputsSupplierForTesting, =, inputsSupplier, ;, this, ., modulesSupplierForTesting, =, modulesSupplier, ;, this, ., exitCodeReceiverForTesting, =, exitCodeReceiver, ;, }]
[=, inputsSupplier, ;, this, ., modulesSupplierForTesting, =, modulesSupplier, ;, this, ., exitCodeReceiverForTesting, =, exitCodeReceiver, ;, }, protected, boolean, isInTestMode, (]
[., inputsSupplierForTesting, =, inputsSupplier, ;, this, ., modulesSupplierForTesting, =, modulesSupplier, ;, this, ., exitCodeReceiverForTesting, =, exitCodeReceiver, ;, }, protected, boolean]
[;, this, ., modulesSupplierForTesting, =, modulesSupplier, ;, this, ., exitCodeReceiverForTesting, =, exitCodeReceiver, ;, }, protected, boolean, isInTestMode, (, ), {]
[=, modulesSupplier, ;, this, ., exitCodeReceiverForTesting, =, exitCodeReceiver, ;, }, protected, boolean, isInTestMode, (, ), {, return, testMode, ;, }]
[., modulesSupplierForTesting, =, modulesSupplier, ;, this, ., exitCodeReceiverForTesting, =, exitCodeReceiver, ;, }, protected, boolean, isInTestMode, (, ), {, return, testMode]
[;, this, ., exitCodeReceiverForTesting, =, exitCodeReceiver, ;, }, protected, boolean, isInTestMode, (, ), {, return, testMode, ;, }, protected, CommandLineConfig]
[=, exitCodeReceiver, ;, }, protected, boolean, isInTestMode, (, ), {, return, testMode, ;, }, protected, CommandLineConfig, getCommandLineConfig, (, ), {]
[., exitCodeReceiverForTesting, =, exitCodeReceiver, ;, }, protected, boolean, isInTestMode, (, ), {, return, testMode, ;, }, protected, CommandLineConfig, getCommandLineConfig, (]
[;, }, protected, boolean, isInTestMode, (, ), {, return, testMode, ;, }, protected, CommandLineConfig, getCommandLineConfig, (, ), {, return, config]
[;, }, protected, CommandLineConfig, getCommandLineConfig, (, ), {, return, config, ;, }, protected, abstract, A, createCompiler, (, ), ;, protected]
[;, }, protected, abstract, A, createCompiler, (, ), ;, protected, abstract, B, createOptions, (, ), ;, protected, DiagnosticGroups, getDiagnosticGroups, (]
[), {, return, new, DiagnosticGroups, (, ), ;, }, return, compiler, ., getDiagnosticGroups, (, ), ;, }, @, Deprecated, protected]
[==, null, ), {, return, new, DiagnosticGroups, (, ), ;, }, return, compiler, ., getDiagnosticGroups, (, ), ;, }, @]
[), {, return, new, DiagnosticGroups, (, ), ;, }, return, compiler, ., getDiagnosticGroups, (, ), ;, }, @, Deprecated, protected]
[;, }, return, compiler, ., getDiagnosticGroups, (, ), ;, }, @, Deprecated, protected, void, initOptionsFromFlags, (, CompilerOptions, options, ), {]
[;, }, @, Deprecated, protected, void, initOptionsFromFlags, (, CompilerOptions, options, ), {, }, static, DependencyOptions, createDependencyOptions, (, boolean, manageClosureDependencies, ,]
[., getDiagnosticGroups, (, ), ;, }, @, Deprecated, protected, void, initOptionsFromFlags, (, CompilerOptions, options, ), {, }, static, DependencyOptions, createDependencyOptions]
[), {, if, (, closureEntryPoints, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "When only_closure_dependencies is ", +, "on, you must specify at least one closure_entry_point", ), ;]
[), {, throw, new, FlagUsageException, (, "When only_closure_dependencies is ", +, "on, you must specify at least one closure_entry_point", ), ;, }, return, new, DependencyOptions, (, ), ., setDependencyPruning, (]
[., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "When only_closure_dependencies is ", +, "on, you must specify at least one closure_entry_point", ), ;, }, return, new, DependencyOptions, (]
[;, }, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (]
[), ;, }, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping]
[+, "on, you must specify at least one closure_entry_point", ), ;, }, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, )]
[), ;, }, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping]
[;, }, else, if, (, processCommonJSModules, ), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, false, ), ., setDependencySorting]
[., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, processCommonJSModules, ), {, return, new, DependencyOptions, (, ), ., setDependencyPruning]
[., setMoocherDropping, (, true, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, processCommonJSModules, ), {, return, new]
[., setDependencySorting, (, true, ), ., setMoocherDropping, (, true, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (]
[., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, true, ), ., setEntryPoints, (, closureEntryPoints, )]
[), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, true, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if]
[), ., setMoocherDropping, (, true, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, processCommonJSModules, ), {, return]
[), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, processCommonJSModules, ), {, return, new, DependencyOptions, (, ), .]
[), ;, }, else, if, (, processCommonJSModules, ), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, false, ), .]
[), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, false, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (]
[;, }, else, if, (, manageClosureDependencies, ||, closureEntryPoints, ., size, (, ), >, 0, ), {, return, new, DependencyOptions, (]
[., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, manageClosureDependencies, ||, closureEntryPoints, ., size, (, ), >, 0, )]
[., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, manageClosureDependencies, ||, closureEntryPoints, ., size]
[., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (]
[., setDependencyPruning, (, false, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, )]
[), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if]
[), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, manageClosureDependencies, ||, closureEntryPoints, .]
[), ., setEntryPoints, (, closureEntryPoints, ), ;, }, else, if, (, manageClosureDependencies, ||, closureEntryPoints, ., size, (, ), >, 0]
[), ;, }, else, if, (, manageClosureDependencies, ||, closureEntryPoints, ., size, (, ), >, 0, ), {, return, new, DependencyOptions]
[), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (]
[||, closureEntryPoints, ., size, (, ), >, 0, ), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, )]
[), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (]
[>, 0, ), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), .]
[., size, (, ), >, 0, ), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting]
[), {, return, new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (]
[;, }, return, null, ;, }, protected, void, setRunOptions, (, CompilerOptions, options, ), throws, FlagUsageException, ,, IOException, {, DiagnosticGroups, diagnosticGroups]
[., setEntryPoints, (, closureEntryPoints, ), ;, }, return, null, ;, }, protected, void, setRunOptions, (, CompilerOptions, options, ), throws, FlagUsageException]
[., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, return, null, ;, }, protected, void, setRunOptions, (]
[., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, return, null, ;]
[., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, )]
[), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, return, null]
[), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, ), ;, }, return, null, ;, }, protected, void, setRunOptions]
[), ., setEntryPoints, (, closureEntryPoints, ), ;, }, return, null, ;, }, protected, void, setRunOptions, (, CompilerOptions, options, ), throws]
[), ;, }, return, null, ;, }, protected, void, setRunOptions, (, CompilerOptions, options, ), throws, FlagUsageException, ,, IOException, {, DiagnosticGroups]
[;, }, protected, void, setRunOptions, (, CompilerOptions, options, ), throws, FlagUsageException, ,, IOException, {, DiagnosticGroups, diagnosticGroups, =, getDiagnosticGroups, (, )]
[;, if, (, config, ., warningGuards, !=, null, ), {, for, (, WarningGuardSpec, ., Entry, entry, :, config, ., warningGuards]
[), {, for, (, WarningGuardSpec, ., Entry, entry, :, config, ., warningGuards, ., entries, ), {, diagnosticGroups, ., setWarningLevel, (]
[!=, null, ), {, for, (, WarningGuardSpec, ., Entry, entry, :, config, ., warningGuards, ., entries, ), {, diagnosticGroups, .]
[., warningGuards, !=, null, ), {, for, (, WarningGuardSpec, ., Entry, entry, :, config, ., warningGuards, ., entries, ), {]
[), {, for, (, WarningGuardSpec, ., Entry, entry, :, config, ., warningGuards, ., entries, ), {, diagnosticGroups, ., setWarningLevel, (]
[), {, diagnosticGroups, ., setWarningLevel, (, options, ,, entry, ., groupName, ,, entry, ., level, ), ;, }, }, if]
[., entries, ), {, diagnosticGroups, ., setWarningLevel, (, options, ,, entry, ., groupName, ,, entry, ., level, ), ;, }]
[., warningGuards, ., entries, ), {, diagnosticGroups, ., setWarningLevel, (, options, ,, entry, ., groupName, ,, entry, ., level, )]
[;, }, }, if, (, !, config, ., warningsWhitelistFile, ., isEmpty, (, ), ), {, options, ., addWarningsGuard, (, WhitelistWarningsGuard]
[., setWarningLevel, (, options, ,, entry, ., groupName, ,, entry, ., level, ), ;, }, }, if, (, !, config]
[,, entry, ., groupName, ,, entry, ., level, ), ;, }, }, if, (, !, config, ., warningsWhitelistFile, ., isEmpty]
[,, entry, ., level, ), ;, }, }, if, (, !, config, ., warningsWhitelistFile, ., isEmpty, (, ), ), {]
[., groupName, ,, entry, ., level, ), ;, }, }, if, (, !, config, ., warningsWhitelistFile, ., isEmpty, (, )]
[), ;, }, }, if, (, !, config, ., warningsWhitelistFile, ., isEmpty, (, ), ), {, options, ., addWarningsGuard, (]
[., level, ), ;, }, }, if, (, !, config, ., warningsWhitelistFile, ., isEmpty, (, ), ), {, options, .]
[), {, options, ., addWarningsGuard, (, WhitelistWarningsGuard, ., fromFile, (, new, File, (, config, ., warningsWhitelistFile, ), ), ), ;]
[), {, options, ., addWarningsGuard, (, WhitelistWarningsGuard, ., fromFile, (, new, File, (, config, ., warningsWhitelistFile, ), ), ), ;]
[., isEmpty, (, ), ), {, options, ., addWarningsGuard, (, WhitelistWarningsGuard, ., fromFile, (, new, File, (, config, ., warningsWhitelistFile]
[., warningsWhitelistFile, ., isEmpty, (, ), ), {, options, ., addWarningsGuard, (, WhitelistWarningsGuard, ., fromFile, (, new, File, (, config]
[;, }, createDefineOrTweakReplacements, (, config, ., define, ,, options, ,, false, ), ;, options, ., setTweakProcessing, (, config, ., tweakProcessing]
[., addWarningsGuard, (, WhitelistWarningsGuard, ., fromFile, (, new, File, (, config, ., warningsWhitelistFile, ), ), ), ;, }, createDefineOrTweakReplacements, (]
[), ;, }, createDefineOrTweakReplacements, (, config, ., define, ,, options, ,, false, ), ;, options, ., setTweakProcessing, (, config, .]
[., fromFile, (, new, File, (, config, ., warningsWhitelistFile, ), ), ), ;, }, createDefineOrTweakReplacements, (, config, ., define, ,]
[), ), ;, }, createDefineOrTweakReplacements, (, config, ., define, ,, options, ,, false, ), ;, options, ., setTweakProcessing, (, config]
[), ), ), ;, }, createDefineOrTweakReplacements, (, config, ., define, ,, options, ,, false, ), ;, options, ., setTweakProcessing, (]
[., warningsWhitelistFile, ), ), ), ;, }, createDefineOrTweakReplacements, (, config, ., define, ,, options, ,, false, ), ;, options, .]
[;, options, ., setTweakProcessing, (, config, ., tweakProcessing, ), ;, createDefineOrTweakReplacements, (, config, ., tweak, ,, options, ,, true, )]
[,, options, ,, false, ), ;, options, ., setTweakProcessing, (, config, ., tweakProcessing, ), ;, createDefineOrTweakReplacements, (, config, ., tweak]
[., define, ,, options, ,, false, ), ;, options, ., setTweakProcessing, (, config, ., tweakProcessing, ), ;, createDefineOrTweakReplacements, (, config]
[,, false, ), ;, options, ., setTweakProcessing, (, config, ., tweakProcessing, ), ;, createDefineOrTweakReplacements, (, config, ., tweak, ,, options]
[), ;, options, ., setTweakProcessing, (, config, ., tweakProcessing, ), ;, createDefineOrTweakReplacements, (, config, ., tweak, ,, options, ,, true]
[;, createDefineOrTweakReplacements, (, config, ., tweak, ,, options, ,, true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (, config, ., manageClosureDependencies]
[., setTweakProcessing, (, config, ., tweakProcessing, ), ;, createDefineOrTweakReplacements, (, config, ., tweak, ,, options, ,, true, ), ;, DependencyOptions]
[), ;, createDefineOrTweakReplacements, (, config, ., tweak, ,, options, ,, true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (, config, .]
[., tweakProcessing, ), ;, createDefineOrTweakReplacements, (, config, ., tweak, ,, options, ,, true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (]
[;, DependencyOptions, depOptions, =, createDependencyOptions, (, config, ., manageClosureDependencies, ,, config, ., onlyClosureDependencies, ,, config, ., processCommonJSModules, ,, config, .]
[,, options, ,, true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (, config, ., manageClosureDependencies, ,, config, ., onlyClosureDependencies, ,, config]
[., tweak, ,, options, ,, true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (, config, ., manageClosureDependencies, ,, config, ., onlyClosureDependencies]
[,, true, ), ;, DependencyOptions, depOptions, =, createDependencyOptions, (, config, ., manageClosureDependencies, ,, config, ., onlyClosureDependencies, ,, config, ., processCommonJSModules]
[), ;, DependencyOptions, depOptions, =, createDependencyOptions, (, config, ., manageClosureDependencies, ,, config, ., onlyClosureDependencies, ,, config, ., processCommonJSModules, ,, config]
[;, if, (, depOptions, !=, null, ), {, options, ., setDependencyOptions, (, depOptions, ), ;, }, options, ., devMode, =]
[,, config, ., onlyClosureDependencies, ,, config, ., processCommonJSModules, ,, config, ., closureEntryPoints, ), ;, if, (, depOptions, !=, null, )]
[., manageClosureDependencies, ,, config, ., onlyClosureDependencies, ,, config, ., processCommonJSModules, ,, config, ., closureEntryPoints, ), ;, if, (, depOptions, !=]
[,, config, ., processCommonJSModules, ,, config, ., closureEntryPoints, ), ;, if, (, depOptions, !=, null, ), {, options, ., setDependencyOptions]
[., onlyClosureDependencies, ,, config, ., processCommonJSModules, ,, config, ., closureEntryPoints, ), ;, if, (, depOptions, !=, null, ), {, options]
[,, config, ., closureEntryPoints, ), ;, if, (, depOptions, !=, null, ), {, options, ., setDependencyOptions, (, depOptions, ), ;]
[., processCommonJSModules, ,, config, ., closureEntryPoints, ), ;, if, (, depOptions, !=, null, ), {, options, ., setDependencyOptions, (, depOptions]
[), ;, if, (, depOptions, !=, null, ), {, options, ., setDependencyOptions, (, depOptions, ), ;, }, options, ., devMode]
[., closureEntryPoints, ), ;, if, (, depOptions, !=, null, ), {, options, ., setDependencyOptions, (, depOptions, ), ;, }, options]
[), {, options, ., setDependencyOptions, (, depOptions, ), ;, }, options, ., devMode, =, config, ., jscompDevMode, ;, options, .]
[!=, null, ), {, options, ., setDependencyOptions, (, depOptions, ), ;, }, options, ., devMode, =, config, ., jscompDevMode, ;]
[), {, options, ., setDependencyOptions, (, depOptions, ), ;, }, options, ., devMode, =, config, ., jscompDevMode, ;, options, .]
[;, }, options, ., devMode, =, config, ., jscompDevMode, ;, options, ., setCodingConvention, (, config, ., codingConvention, ), ;, options]
[., setDependencyOptions, (, depOptions, ), ;, }, options, ., devMode, =, config, ., jscompDevMode, ;, options, ., setCodingConvention, (, config]
[), ;, }, options, ., devMode, =, config, ., jscompDevMode, ;, options, ., setCodingConvention, (, config, ., codingConvention, ), ;]
[=, config, ., jscompDevMode, ;, options, ., setCodingConvention, (, config, ., codingConvention, ), ;, options, ., setSummaryDetailLevel, (, config, .]
[., devMode, =, config, ., jscompDevMode, ;, options, ., setCodingConvention, (, config, ., codingConvention, ), ;, options, ., setSummaryDetailLevel, (]
[;, options, ., setCodingConvention, (, config, ., codingConvention, ), ;, options, ., setSummaryDetailLevel, (, config, ., summaryDetailLevel, ), ;, options]
[., jscompDevMode, ;, options, ., setCodingConvention, (, config, ., codingConvention, ), ;, options, ., setSummaryDetailLevel, (, config, ., summaryDetailLevel, )]
[;, options, ., setSummaryDetailLevel, (, config, ., summaryDetailLevel, ), ;, options, ., setTrustedStrings, (, true, ), ;, legacyOutputCharset, =, options]
[., setCodingConvention, (, config, ., codingConvention, ), ;, options, ., setSummaryDetailLevel, (, config, ., summaryDetailLevel, ), ;, options, ., setTrustedStrings]
[), ;, options, ., setSummaryDetailLevel, (, config, ., summaryDetailLevel, ), ;, options, ., setTrustedStrings, (, true, ), ;, legacyOutputCharset, =]
[., codingConvention, ), ;, options, ., setSummaryDetailLevel, (, config, ., summaryDetailLevel, ), ;, options, ., setTrustedStrings, (, true, ), ;]
[;, options, ., setTrustedStrings, (, true, ), ;, legacyOutputCharset, =, options, ., outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2, =]
[., setSummaryDetailLevel, (, config, ., summaryDetailLevel, ), ;, options, ., setTrustedStrings, (, true, ), ;, legacyOutputCharset, =, options, ., outputCharset]
[), ;, options, ., setTrustedStrings, (, true, ), ;, legacyOutputCharset, =, options, ., outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2]
[., summaryDetailLevel, ), ;, options, ., setTrustedStrings, (, true, ), ;, legacyOutputCharset, =, options, ., outputCharset, =, getLegacyOutputCharset, (, )]
[;, legacyOutputCharset, =, options, ., outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2, =, getOutputCharset2, (, ), ;, inputCharset, =, getInputCharset]
[., setTrustedStrings, (, true, ), ;, legacyOutputCharset, =, options, ., outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2, =, getOutputCharset2, (]
[), ;, legacyOutputCharset, =, options, ., outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2, =, getOutputCharset2, (, ), ;, inputCharset, =]
[=, options, ., outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2, =, getOutputCharset2, (, ), ;, inputCharset, =, getInputCharset, (, )]
[=, getLegacyOutputCharset, (, ), ;, outputCharset2, =, getOutputCharset2, (, ), ;, inputCharset, =, getInputCharset, (, ), ;, if, (, config]
[., outputCharset, =, getLegacyOutputCharset, (, ), ;, outputCharset2, =, getOutputCharset2, (, ), ;, inputCharset, =, getInputCharset, (, ), ;, if]
[;, outputCharset2, =, getOutputCharset2, (, ), ;, inputCharset, =, getInputCharset, (, ), ;, if, (, config, ., jsOutputFile, ., length]
[=, getOutputCharset2, (, ), ;, inputCharset, =, getInputCharset, (, ), ;, if, (, config, ., jsOutputFile, ., length, (, )]
[;, inputCharset, =, getInputCharset, (, ), ;, if, (, config, ., jsOutputFile, ., length, (, ), >, 0, ), {]
[=, getInputCharset, (, ), ;, if, (, config, ., jsOutputFile, ., length, (, ), >, 0, ), {, if, (]
[;, if, (, config, ., jsOutputFile, ., length, (, ), >, 0, ), {, if, (, config, ., skipNormalOutputs, )]
[), {, if, (, config, ., skipNormalOutputs, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and js_output_file", +, " cannot be used together.", ), ;, }, }]
[>, 0, ), {, if, (, config, ., skipNormalOutputs, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and js_output_file", +, " cannot be used together.", ), ;]
[., length, (, ), >, 0, ), {, if, (, config, ., skipNormalOutputs, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and js_output_file"]
[., jsOutputFile, ., length, (, ), >, 0, ), {, if, (, config, ., skipNormalOutputs, ), {, throw, new, FlagUsageException]
[), {, if, (, config, ., skipNormalOutputs, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and js_output_file", +, " cannot be used together.", ), ;, }, }]
[), {, throw, new, FlagUsageException, (, "skip_normal_outputs and js_output_file", +, " cannot be used together.", ), ;, }, }, if, (, config, ., skipNormalOutputs, &&, config]
[., skipNormalOutputs, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and js_output_file", +, " cannot be used together.", ), ;, }, }, if, (, config, ., skipNormalOutputs]
[;, }, }, if, (, config, ., skipNormalOutputs, &&, config, ., printAst, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +]
[), ;, }, }, if, (, config, ., skipNormalOutputs, &&, config, ., printAst, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot"]
[+, " cannot be used together.", ), ;, }, }, if, (, config, ., skipNormalOutputs, &&, config, ., printAst, ), {, throw, new, FlagUsageException]
[), ;, }, }, if, (, config, ., skipNormalOutputs, &&, config, ., printAst, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot"]
[), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +, " be used together.", ), ;, }, if, (, config, ., skipNormalOutputs, &&, config, .]
[&&, config, ., printAst, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +, " be used together.", ), ;, }, if, (, config, .]
[., skipNormalOutputs, &&, config, ., printAst, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +, " be used together.", ), ;, }, if, (]
[), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +, " be used together.", ), ;, }, if, (, config, ., skipNormalOutputs, &&, config, .]
[., printAst, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +, " be used together.", ), ;, }, if, (, config, ., skipNormalOutputs, &&]
[;, }, if, (, config, ., skipNormalOutputs, &&, config, ., printTree, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +, " be used together."]
[), ;, }, if, (, config, ., skipNormalOutputs, &&, config, ., printTree, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +]
[+, " be used together.", ), ;, }, if, (, config, ., skipNormalOutputs, &&, config, ., printTree, ), {, throw, new, FlagUsageException, (]
[), ;, }, if, (, config, ., skipNormalOutputs, &&, config, ., printTree, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +]
[), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +, " be used together.", ), ;, }, if, (, config, ., createSourceMap, ., length, (]
[&&, config, ., printTree, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +, " be used together.", ), ;, }, if, (, config, .]
[., skipNormalOutputs, &&, config, ., printTree, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +, " be used together.", ), ;, }, if, (]
[), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +, " be used together.", ), ;, }, if, (, config, ., createSourceMap, ., length, (]
[., printTree, ), {, throw, new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +, " be used together.", ), ;, }, if, (, config, ., createSourceMap, .]
[;, }, if, (, config, ., createSourceMap, ., length, (, ), >, 0, ), {, options, ., sourceMapOutputPath, =, config]
[), ;, }, if, (, config, ., createSourceMap, ., length, (, ), >, 0, ), {, options, ., sourceMapOutputPath, =]
[+, " be used together.", ), ;, }, if, (, config, ., createSourceMap, ., length, (, ), >, 0, ), {, options, .]
[), ;, }, if, (, config, ., createSourceMap, ., length, (, ), >, 0, ), {, options, ., sourceMapOutputPath, =]
[), {, options, ., sourceMapOutputPath, =, config, ., createSourceMap, ;, }, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;, options]
[>, 0, ), {, options, ., sourceMapOutputPath, =, config, ., createSourceMap, ;, }, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel]
[., length, (, ), >, 0, ), {, options, ., sourceMapOutputPath, =, config, ., createSourceMap, ;, }, options, ., sourceMapDetailLevel]
[., createSourceMap, ., length, (, ), >, 0, ), {, options, ., sourceMapOutputPath, =, config, ., createSourceMap, ;, }, options]
[), {, options, ., sourceMapOutputPath, =, config, ., createSourceMap, ;, }, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;, options]
[=, config, ., createSourceMap, ;, }, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =, config, .]
[., sourceMapOutputPath, =, config, ., createSourceMap, ;, }, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =]
[;, }, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =, config, ., sourceMapFormat, ;, if, (]
[., createSourceMap, ;, }, options, ., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =, config, ., sourceMapFormat, ;]
[=, config, ., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =, config, ., sourceMapFormat, ;, if, (, !, config, ., variableMapInputFile, .]
[., sourceMapDetailLevel, =, config, ., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =, config, ., sourceMapFormat, ;, if, (, !, config, .]
[;, options, ., sourceMapFormat, =, config, ., sourceMapFormat, ;, if, (, !, config, ., variableMapInputFile, ., equals, (, "", )]
[., sourceMapDetailLevel, ;, options, ., sourceMapFormat, =, config, ., sourceMapFormat, ;, if, (, !, config, ., variableMapInputFile, ., equals, (]
[=, config, ., sourceMapFormat, ;, if, (, !, config, ., variableMapInputFile, ., equals, (, "", ), ), {, options, .]
[., sourceMapFormat, =, config, ., sourceMapFormat, ;, if, (, !, config, ., variableMapInputFile, ., equals, (, "", ), ), {]
[;, if, (, !, config, ., variableMapInputFile, ., equals, (, "", ), ), {, options, ., inputVariableMap, =, VariableMap, .]
[., sourceMapFormat, ;, if, (, !, config, ., variableMapInputFile, ., equals, (, "", ), ), {, options, ., inputVariableMap, =]
[), {, options, ., inputVariableMap, =, VariableMap, ., load, (, config, ., variableMapInputFile, ), ;, }, if, (, !, config]
[), {, options, ., inputVariableMap, =, VariableMap, ., load, (, config, ., variableMapInputFile, ), ;, }, if, (, !, config]
[., equals, (, "", ), ), {, options, ., inputVariableMap, =, VariableMap, ., load, (, config, ., variableMapInputFile, ), ;]
[., variableMapInputFile, ., equals, (, "", ), ), {, options, ., inputVariableMap, =, VariableMap, ., load, (, config, ., variableMapInputFile]
[), ), {, options, ., inputVariableMap, =, VariableMap, ., load, (, config, ., variableMapInputFile, ), ;, }, if, (, !]
[=, VariableMap, ., load, (, config, ., variableMapInputFile, ), ;, }, if, (, !, config, ., propertyMapInputFile, ., equals, (]
[., inputVariableMap, =, VariableMap, ., load, (, config, ., variableMapInputFile, ), ;, }, if, (, !, config, ., propertyMapInputFile, .]
[;, }, if, (, !, config, ., propertyMapInputFile, ., equals, (, "", ), ), {, options, ., inputPropertyMap, =, VariableMap]
[., load, (, config, ., variableMapInputFile, ), ;, }, if, (, !, config, ., propertyMapInputFile, ., equals, (, "", )]
[), ;, }, if, (, !, config, ., propertyMapInputFile, ., equals, (, "", ), ), {, options, ., inputPropertyMap, =]
[., variableMapInputFile, ), ;, }, if, (, !, config, ., propertyMapInputFile, ., equals, (, "", ), ), {, options, .]
[), {, options, ., inputPropertyMap, =, VariableMap, ., load, (, config, ., propertyMapInputFile, ), ;, }, if, (, config, .]
[), {, options, ., inputPropertyMap, =, VariableMap, ., load, (, config, ., propertyMapInputFile, ), ;, }, if, (, config, .]
[., equals, (, "", ), ), {, options, ., inputPropertyMap, =, VariableMap, ., load, (, config, ., propertyMapInputFile, ), ;]
[., propertyMapInputFile, ., equals, (, "", ), ), {, options, ., inputPropertyMap, =, VariableMap, ., load, (, config, ., propertyMapInputFile]
[), ), {, options, ., inputPropertyMap, =, VariableMap, ., load, (, config, ., propertyMapInputFile, ), ;, }, if, (, config]
[=, VariableMap, ., load, (, config, ., propertyMapInputFile, ), ;, }, if, (, config, ., languageIn, ., length, (, )]
[., inputPropertyMap, =, VariableMap, ., load, (, config, ., propertyMapInputFile, ), ;, }, if, (, config, ., languageIn, ., length]
[;, }, if, (, config, ., languageIn, ., length, (, ), >, 0, ), {, CompilerOptions, ., LanguageMode, languageMode, =]
[., load, (, config, ., propertyMapInputFile, ), ;, }, if, (, config, ., languageIn, ., length, (, ), >, 0]
[), ;, }, if, (, config, ., languageIn, ., length, (, ), >, 0, ), {, CompilerOptions, ., LanguageMode, languageMode]
[., propertyMapInputFile, ), ;, }, if, (, config, ., languageIn, ., length, (, ), >, 0, ), {, CompilerOptions, .]
[), {, CompilerOptions, ., LanguageMode, languageMode, =, CompilerOptions, ., LanguageMode, ., fromString, (, config, ., languageIn, ), ;, if, (]
[>, 0, ), {, CompilerOptions, ., LanguageMode, languageMode, =, CompilerOptions, ., LanguageMode, ., fromString, (, config, ., languageIn, ), ;]
[., length, (, ), >, 0, ), {, CompilerOptions, ., LanguageMode, languageMode, =, CompilerOptions, ., LanguageMode, ., fromString, (, config]
[., languageIn, ., length, (, ), >, 0, ), {, CompilerOptions, ., LanguageMode, languageMode, =, CompilerOptions, ., LanguageMode, ., fromString]
[), {, CompilerOptions, ., LanguageMode, languageMode, =, CompilerOptions, ., LanguageMode, ., fromString, (, config, ., languageIn, ), ;, if, (]
[;, if, (, languageMode, !=, null, ), {, options, ., setLanguageIn, (, languageMode, ), ;, }, else, {, throw, new]
[., fromString, (, config, ., languageIn, ), ;, if, (, languageMode, !=, null, ), {, options, ., setLanguageIn, (, languageMode]
[., LanguageMode, ., fromString, (, config, ., languageIn, ), ;, if, (, languageMode, !=, null, ), {, options, ., setLanguageIn]
[), ;, if, (, languageMode, !=, null, ), {, options, ., setLanguageIn, (, languageMode, ), ;, }, else, {, throw]
[., languageIn, ), ;, if, (, languageMode, !=, null, ), {, options, ., setLanguageIn, (, languageMode, ), ;, }, else]
[), {, options, ., setLanguageIn, (, languageMode, ), ;, }, else, {, throw, new, FlagUsageException, (, "Unknown language `", +, config, .]
[!=, null, ), {, options, ., setLanguageIn, (, languageMode, ), ;, }, else, {, throw, new, FlagUsageException, (, "Unknown language `", +]
[), {, options, ., setLanguageIn, (, languageMode, ), ;, }, else, {, throw, new, FlagUsageException, (, "Unknown language `", +, config, .]
[;, }, else, {, throw, new, FlagUsageException, (, "Unknown language `", +, config, ., languageIn, +, "' specified.", ), ;, }, }, if]
[., setLanguageIn, (, languageMode, ), ;, }, else, {, throw, new, FlagUsageException, (, "Unknown language `", +, config, ., languageIn, +, "' specified."]
[), ;, }, else, {, throw, new, FlagUsageException, (, "Unknown language `", +, config, ., languageIn, +, "' specified.", ), ;, }, }]
[;, }, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {, Set, <, String, >, uniqueNames]
[), ;, }, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {, Set, <, String, >]
[+, "' specified.", ), ;, }, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {, Set, <]
[+, config, ., languageIn, +, "' specified.", ), ;, }, }, if, (, !, config, ., outputManifests, ., isEmpty, (, )]
[+, "' specified.", ), ;, }, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {, Set, <]
[., languageIn, +, "' specified.", ), ;, }, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {]
[), ;, }, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {, Set, <, String, >]
[), {, Set, <, String, >, uniqueNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :, config]
[), {, Set, <, String, >, uniqueNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :, config]
[., isEmpty, (, ), ), {, Set, <, String, >, uniqueNames, =, Sets, ., newHashSet, (, ), ;, for, (]
[., outputManifests, ., isEmpty, (, ), ), {, Set, <, String, >, uniqueNames, =, Sets, ., newHashSet, (, ), ;]
[;, for, (, String, filename, :, config, ., outputManifests, ), {, if, (, !, uniqueNames, ., add, (, filename, )]
[., newHashSet, (, ), ;, for, (, String, filename, :, config, ., outputManifests, ), {, if, (, !, uniqueNames, .]
[), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (, "output_manifest flags specify ", +, "duplicate file names: "]
[., outputManifests, ), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (, "output_manifest flags specify "]
[), {, throw, new, FlagUsageException, (, "output_manifest flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, if, (, !, config]
[), {, throw, new, FlagUsageException, (, "output_manifest flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, if, (, !, config]
[., add, (, filename, ), ), {, throw, new, FlagUsageException, (, "output_manifest flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }]
[), ), {, throw, new, FlagUsageException, (, "output_manifest flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, if, (, !]
[;, }, }, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, Set, <, String, >]
[), ;, }, }, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, Set, <, String]
[+, filename, ), ;, }, }, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, Set]
[+, "duplicate file names: ", +, filename, ), ;, }, }, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), )]
[+, filename, ), ;, }, }, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, Set]
[), ;, }, }, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, Set, <, String]
[), {, Set, <, String, >, uniqueNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :, config]
[), {, Set, <, String, >, uniqueNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, filename, :, config]
[., isEmpty, (, ), ), {, Set, <, String, >, uniqueNames, =, Sets, ., newHashSet, (, ), ;, for, (]
[., outputBundles, ., isEmpty, (, ), ), {, Set, <, String, >, uniqueNames, =, Sets, ., newHashSet, (, ), ;]
[;, for, (, String, filename, :, config, ., outputBundles, ), {, if, (, !, uniqueNames, ., add, (, filename, )]
[., newHashSet, (, ), ;, for, (, String, filename, :, config, ., outputBundles, ), {, if, (, !, uniqueNames, .]
[), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (, "output_bundle flags specify ", +, "duplicate file names: "]
[., outputBundles, ), {, if, (, !, uniqueNames, ., add, (, filename, ), ), {, throw, new, FlagUsageException, (, "output_bundle flags specify "]
[), {, throw, new, FlagUsageException, (, "output_bundle flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, options, ., acceptConstKeyword, =]
[), {, throw, new, FlagUsageException, (, "output_bundle flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, options, ., acceptConstKeyword, =]
[., add, (, filename, ), ), {, throw, new, FlagUsageException, (, "output_bundle flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }]
[), ), {, throw, new, FlagUsageException, (, "output_bundle flags specify ", +, "duplicate file names: ", +, filename, ), ;, }, }, }, options, ., acceptConstKeyword]
[;, }, }, }, options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;]
[), ;, }, }, }, options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules]
[+, filename, ), ;, }, }, }, options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config]
[+, "duplicate file names: ", +, filename, ), ;, }, }, }, options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules]
[+, filename, ), ;, }, }, }, options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config]
[), ;, }, }, }, options, ., acceptConstKeyword, =, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules]
[=, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;, options, ., processCommonJSModules, =, config, ., processCommonJSModules]
[., acceptConstKeyword, =, config, ., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;, options, ., processCommonJSModules, =, config]
[;, options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;, options, ., processCommonJSModules, =, config, ., processCommonJSModules, ;, options, ., commonJSModulePathPrefix]
[., acceptConstKeyword, ;, options, ., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;, options, ., processCommonJSModules, =, config, ., processCommonJSModules, ;, options]
[=, config, ., transformAMDToCJSModules, ;, options, ., processCommonJSModules, =, config, ., processCommonJSModules, ;, options, ., commonJSModulePathPrefix, =, config, ., commonJSModulePathPrefix]
[., transformAMDToCJSModules, =, config, ., transformAMDToCJSModules, ;, options, ., processCommonJSModules, =, config, ., processCommonJSModules, ;, options, ., commonJSModulePathPrefix, =, config]
[;, options, ., processCommonJSModules, =, config, ., processCommonJSModules, ;, options, ., commonJSModulePathPrefix, =, config, ., commonJSModulePathPrefix, ;, }, final, protected]
[., transformAMDToCJSModules, ;, options, ., processCommonJSModules, =, config, ., processCommonJSModules, ;, options, ., commonJSModulePathPrefix, =, config, ., commonJSModulePathPrefix, ;, }]
[=, config, ., processCommonJSModules, ;, options, ., commonJSModulePathPrefix, =, config, ., commonJSModulePathPrefix, ;, }, final, protected, A, getCompiler, (, )]
[., processCommonJSModules, =, config, ., processCommonJSModules, ;, options, ., commonJSModulePathPrefix, =, config, ., commonJSModulePathPrefix, ;, }, final, protected, A, getCompiler]
[;, options, ., commonJSModulePathPrefix, =, config, ., commonJSModulePathPrefix, ;, }, final, protected, A, getCompiler, (, ), {, return, compiler, ;]
[., processCommonJSModules, ;, options, ., commonJSModulePathPrefix, =, config, ., commonJSModulePathPrefix, ;, }, final, protected, A, getCompiler, (, ), {, return]
[=, config, ., commonJSModulePathPrefix, ;, }, final, protected, A, getCompiler, (, ), {, return, compiler, ;, }, final, public, void]
[., commonJSModulePathPrefix, =, config, ., commonJSModulePathPrefix, ;, }, final, protected, A, getCompiler, (, ), {, return, compiler, ;, }, final]
[;, }, final, protected, A, getCompiler, (, ), {, return, compiler, ;, }, final, public, void, run, (, ), {]
[., commonJSModulePathPrefix, ;, }, final, protected, A, getCompiler, (, ), {, return, compiler, ;, }, final, public, void, run, (]
[;, }, final, public, void, run, (, ), {, int, result, =, 0, ;, int, runs, =, 1, ;, if]
[;, int, runs, =, 1, ;, if, (, config, ., computePhaseOrdering, ), {, runs, =, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, ;, PhaseOptimizer, ., randomizeLoops]
[;, if, (, config, ., computePhaseOrdering, ), {, runs, =, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, ;, PhaseOptimizer, ., randomizeLoops, (, ), ;, }, try]
[), {, runs, =, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, ;, PhaseOptimizer, ., randomizeLoops, (, ), ;, }, try, {, for, (, int, i, =]
[., computePhaseOrdering, ), {, runs, =, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, ;, PhaseOptimizer, ., randomizeLoops, (, ), ;, }, try, {, for, (, int]
[=, NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER, ;, PhaseOptimizer, ., randomizeLoops, (, ), ;, }, try, {, for, (, int, i, =, 0, ;, i]
[;, PhaseOptimizer, ., randomizeLoops, (, ), ;, }, try, {, for, (, int, i, =, 0, ;, i, <, runs]
[;, }, try, {, for, (, int, i, =, 0, ;, i, <, runs, &&, result, ==, 0, ;, i]
[., randomizeLoops, (, ), ;, }, try, {, for, (, int, i, =, 0, ;, i, <, runs, &&, result]
[;, i, <, runs, &&, result, ==, 0, ;, i, ++, ), {, runTimeStats, ., recordStartRun, (, ), ;, result]
[;, i, ++, ), {, runTimeStats, ., recordStartRun, (, ), ;, result, =, doRun, (, ), ;, runTimeStats, ., recordEndRun]
[&&, result, ==, 0, ;, i, ++, ), {, runTimeStats, ., recordStartRun, (, ), ;, result, =, doRun, (, )]
[<, runs, &&, result, ==, 0, ;, i, ++, ), {, runTimeStats, ., recordStartRun, (, ), ;, result, =, doRun]
[&&, result, ==, 0, ;, i, ++, ), {, runTimeStats, ., recordStartRun, (, ), ;, result, =, doRun, (, )]
[;, i, ++, ), {, runTimeStats, ., recordStartRun, (, ), ;, result, =, doRun, (, ), ;, runTimeStats, ., recordEndRun]
[==, 0, ;, i, ++, ), {, runTimeStats, ., recordStartRun, (, ), ;, result, =, doRun, (, ), ;, runTimeStats]
[;, i, ++, ), {, runTimeStats, ., recordStartRun, (, ), ;, result, =, doRun, (, ), ;, runTimeStats, ., recordEndRun]
[), {, runTimeStats, ., recordStartRun, (, ), ;, result, =, doRun, (, ), ;, runTimeStats, ., recordEndRun, (, ), ;]
[++, ), {, runTimeStats, ., recordStartRun, (, ), ;, result, =, doRun, (, ), ;, runTimeStats, ., recordEndRun, (, )]
[;, result, =, doRun, (, ), ;, runTimeStats, ., recordEndRun, (, ), ;, }, }, catch, (, AbstractCommandLineRunner, ., FlagUsageException]
[., recordStartRun, (, ), ;, result, =, doRun, (, ), ;, runTimeStats, ., recordEndRun, (, ), ;, }, }, catch]
[=, doRun, (, ), ;, runTimeStats, ., recordEndRun, (, ), ;, }, }, catch, (, AbstractCommandLineRunner, ., FlagUsageException, e, )]
[;, runTimeStats, ., recordEndRun, (, ), ;, }, }, catch, (, AbstractCommandLineRunner, ., FlagUsageException, e, ), {, System, ., err]
[;, }, }, catch, (, AbstractCommandLineRunner, ., FlagUsageException, e, ), {, System, ., err, ., println, (, e, ., getMessage]
[., recordEndRun, (, ), ;, }, }, catch, (, AbstractCommandLineRunner, ., FlagUsageException, e, ), {, System, ., err, ., println]
[;, result, =, -, 1, ;, }, catch, (, Throwable, t, ), {, t, ., printStackTrace, (, ), ;, result]
[., println, (, e, ., getMessage, (, ), ), ;, result, =, -, 1, ;, }, catch, (, Throwable, t]
[., err, ., println, (, e, ., getMessage, (, ), ), ;, result, =, -, 1, ;, }, catch, (]
[), ;, result, =, -, 1, ;, }, catch, (, Throwable, t, ), {, t, ., printStackTrace, (, ), ;]
[., getMessage, (, ), ), ;, result, =, -, 1, ;, }, catch, (, Throwable, t, ), {, t, .]
[=, -, 1, ;, }, catch, (, Throwable, t, ), {, t, ., printStackTrace, (, ), ;, result, =, -]
[;, }, catch, (, Throwable, t, ), {, t, ., printStackTrace, (, ), ;, result, =, -, 2, ;, }]
[;, }, catch, (, Throwable, t, ), {, t, ., printStackTrace, (, ), ;, result, =, -, 2, ;, }]
[;, result, =, -, 2, ;, }, if, (, config, ., computePhaseOrdering, ), {, runTimeStats, ., outputBestPhaseOrdering, (, ), ;]
[., printStackTrace, (, ), ;, result, =, -, 2, ;, }, if, (, config, ., computePhaseOrdering, ), {, runTimeStats, .]
[=, -, 2, ;, }, if, (, config, ., computePhaseOrdering, ), {, runTimeStats, ., outputBestPhaseOrdering, (, ), ;, }, try]
[;, }, if, (, config, ., computePhaseOrdering, ), {, runTimeStats, ., outputBestPhaseOrdering, (, ), ;, }, try, {, if, (]
[;, }, if, (, config, ., computePhaseOrdering, ), {, runTimeStats, ., outputBestPhaseOrdering, (, ), ;, }, try, {, if, (]
[), {, runTimeStats, ., outputBestPhaseOrdering, (, ), ;, }, try, {, if, (, jsOutput, instanceof, Closeable, ), {, (, (]
[., computePhaseOrdering, ), {, runTimeStats, ., outputBestPhaseOrdering, (, ), ;, }, try, {, if, (, jsOutput, instanceof, Closeable, ), {]
[;, }, try, {, if, (, jsOutput, instanceof, Closeable, ), {, (, (, Closeable, ), jsOutput, ), ., close, (]
[., outputBestPhaseOrdering, (, ), ;, }, try, {, if, (, jsOutput, instanceof, Closeable, ), {, (, (, Closeable, ), jsOutput]
[), {, (, (, Closeable, ), jsOutput, ), ., close, (, ), ;, }, }, catch, (, IOException, e, )]
[instanceof, Closeable, ), {, (, (, Closeable, ), jsOutput, ), ., close, (, ), ;, }, }, catch, (, IOException]
[;, }, }, catch, (, IOException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, if, (]
[., close, (, ), ;, }, }, catch, (, IOException, e, ), {, throw, Throwables, ., propagate, (, e, )]
[), ., close, (, ), ;, }, }, catch, (, IOException, e, ), {, throw, Throwables, ., propagate, (, e]
[), ., close, (, ), ;, }, }, catch, (, IOException, e, ), {, throw, Throwables, ., propagate, (, e]
[;, }, if, (, testMode, ), {, exitCodeReceiverForTesting, ., apply, (, result, ), ;, }, else, {, System, ., exit]
[., propagate, (, e, ), ;, }, if, (, testMode, ), {, exitCodeReceiverForTesting, ., apply, (, result, ), ;, }]
[), ;, }, if, (, testMode, ), {, exitCodeReceiverForTesting, ., apply, (, result, ), ;, }, else, {, System, .]
[), {, exitCodeReceiverForTesting, ., apply, (, result, ), ;, }, else, {, System, ., exit, (, result, ), ;, }]
[;, }, else, {, System, ., exit, (, result, ), ;, }, }, protected, PrintStream, getErrorPrintStream, (, ), {, return]
[., apply, (, result, ), ;, }, else, {, System, ., exit, (, result, ), ;, }, }, protected, PrintStream]
[), ;, }, else, {, System, ., exit, (, result, ), ;, }, }, protected, PrintStream, getErrorPrintStream, (, ), {]
[;, }, }, protected, PrintStream, getErrorPrintStream, (, ), {, return, err, ;, }, public, static, class, FlagUsageException, extends, Exception, {]
[., exit, (, result, ), ;, }, }, protected, PrintStream, getErrorPrintStream, (, ), {, return, err, ;, }, public, static]
[), ;, }, }, protected, PrintStream, getErrorPrintStream, (, ), {, return, err, ;, }, public, static, class, FlagUsageException, extends, Exception]
[;, }, public, static, class, FlagUsageException, extends, Exception, {, private, static, final, long, serialVersionUID, =, 1L, ;, public, FlagUsageException, (]
[;, public, FlagUsageException, (, String, message, ), {, super, (, message, ), ;, }, }, protected, List, <, SourceFile, >]
[), ;, }, }, protected, List, <, SourceFile, >, createInputs, (, List, <, String, >, files, ,, boolean, allowStdIn, )]
[;, boolean, usingStdin, =, false, ;, for, (, String, filename, :, files, ), {, if, (, !, "-", ., equals]
[), ;, boolean, usingStdin, =, false, ;, for, (, String, filename, :, files, ), {, if, (, !, "-", .]
[., size, (, ), ), ;, boolean, usingStdin, =, false, ;, for, (, String, filename, :, files, ), {, if]
[;, for, (, String, filename, :, files, ), {, if, (, !, "-", ., equals, (, filename, ), ), {]
[), {, if, (, !, "-", ., equals, (, filename, ), ), {, SourceFile, newFile, =, SourceFile, ., fromFile, (]
[), {, SourceFile, newFile, =, SourceFile, ., fromFile, (, filename, ,, inputCharset, ), ;, inputs, ., add, (, newFile, )]
[), {, SourceFile, newFile, =, SourceFile, ., fromFile, (, filename, ,, inputCharset, ), ;, inputs, ., add, (, newFile, )]
[., equals, (, filename, ), ), {, SourceFile, newFile, =, SourceFile, ., fromFile, (, filename, ,, inputCharset, ), ;, inputs]
[), ), {, SourceFile, newFile, =, SourceFile, ., fromFile, (, filename, ,, inputCharset, ), ;, inputs, ., add, (, newFile]
[;, inputs, ., add, (, newFile, ), ;, }, else, {, if, (, !, allowStdIn, ), {, throw, new, FlagUsageException]
[., fromFile, (, filename, ,, inputCharset, ), ;, inputs, ., add, (, newFile, ), ;, }, else, {, if, (]
[,, inputCharset, ), ;, inputs, ., add, (, newFile, ), ;, }, else, {, if, (, !, allowStdIn, ), {]
[), ;, inputs, ., add, (, newFile, ), ;, }, else, {, if, (, !, allowStdIn, ), {, throw, new]
[;, }, else, {, if, (, !, allowStdIn, ), {, throw, new, FlagUsageException, (, "Can't specify stdin.", ), ;, }, if, (]
[., add, (, newFile, ), ;, }, else, {, if, (, !, allowStdIn, ), {, throw, new, FlagUsageException, (, "Can't specify stdin."]
[), ;, }, else, {, if, (, !, allowStdIn, ), {, throw, new, FlagUsageException, (, "Can't specify stdin.", ), ;, }, if]
[), {, throw, new, FlagUsageException, (, "Can't specify stdin.", ), ;, }, if, (, usingStdin, ), {, throw, new, FlagUsageException, (, "Can't specify stdin twice."]
[), {, throw, new, FlagUsageException, (, "Can't specify stdin.", ), ;, }, if, (, usingStdin, ), {, throw, new, FlagUsageException, (, "Can't specify stdin twice."]
[;, }, if, (, usingStdin, ), {, throw, new, FlagUsageException, (, "Can't specify stdin twice.", ), ;, }, if, (, !, config, .]
[), ;, }, if, (, usingStdin, ), {, throw, new, FlagUsageException, (, "Can't specify stdin twice.", ), ;, }, if, (, !, config]
[), {, throw, new, FlagUsageException, (, "Can't specify stdin twice.", ), ;, }, if, (, !, config, ., outputManifests, ., isEmpty, (, )]
[;, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Manifest files cannot be generated ", +]
[), ;, }, if, (, !, config, ., outputManifests, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Manifest files cannot be generated "]
[), {, throw, new, FlagUsageException, (, "Manifest files cannot be generated ", +, "when the input is from stdin.", ), ;, }, if, (, !, config, ., outputBundles, ., isEmpty]
[), {, throw, new, FlagUsageException, (, "Manifest files cannot be generated ", +, "when the input is from stdin.", ), ;, }, if, (, !, config, ., outputBundles, ., isEmpty]
[., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Manifest files cannot be generated ", +, "when the input is from stdin.", ), ;, }, if, (, !, config]
[., outputManifests, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Manifest files cannot be generated ", +, "when the input is from stdin.", ), ;, }, if, (]
[;, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Bundle files cannot be generated ", +]
[), ;, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Bundle files cannot be generated "]
[+, "when the input is from stdin.", ), ;, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, throw, new, FlagUsageException]
[), ;, }, if, (, !, config, ., outputBundles, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Bundle files cannot be generated "]
[), {, throw, new, FlagUsageException, (, "Bundle files cannot be generated ", +, "when the input is from stdin.", ), ;, }, inputs, ., add, (, SourceFile, ., fromInputStream, (]
[), {, throw, new, FlagUsageException, (, "Bundle files cannot be generated ", +, "when the input is from stdin.", ), ;, }, inputs, ., add, (, SourceFile, ., fromInputStream, (]
[., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Bundle files cannot be generated ", +, "when the input is from stdin.", ), ;, }, inputs, ., add, (]
[., outputBundles, ., isEmpty, (, ), ), {, throw, new, FlagUsageException, (, "Bundle files cannot be generated ", +, "when the input is from stdin.", ), ;, }, inputs, .]
[;, }, inputs, ., add, (, SourceFile, ., fromInputStream, (, "stdin", ,, System, ., in, ), ), ;, usingStdin, =]
[), ;, }, inputs, ., add, (, SourceFile, ., fromInputStream, (, "stdin", ,, System, ., in, ), ), ;, usingStdin]
[+, "when the input is from stdin.", ), ;, }, inputs, ., add, (, SourceFile, ., fromInputStream, (, "stdin", ,, System, ., in, ), )]
[), ;, }, inputs, ., add, (, SourceFile, ., fromInputStream, (, "stdin", ,, System, ., in, ), ), ;, usingStdin]
[;, usingStdin, =, true, ;, }, }, return, inputs, ;, }, private, List, <, SourceFile, >, createSourceInputs, (, List, <]
[., add, (, SourceFile, ., fromInputStream, (, "stdin", ,, System, ., in, ), ), ;, usingStdin, =, true, ;, }]
[), ;, usingStdin, =, true, ;, }, }, return, inputs, ;, }, private, List, <, SourceFile, >, createSourceInputs, (, List]
[., fromInputStream, (, "stdin", ,, System, ., in, ), ), ;, usingStdin, =, true, ;, }, }, return, inputs, ;]
[,, System, ., in, ), ), ;, usingStdin, =, true, ;, }, }, return, inputs, ;, }, private, List, <]
[), ), ;, usingStdin, =, true, ;, }, }, return, inputs, ;, }, private, List, <, SourceFile, >, createSourceInputs, (]
[., in, ), ), ;, usingStdin, =, true, ;, }, }, return, inputs, ;, }, private, List, <, SourceFile, >]
[=, true, ;, }, }, return, inputs, ;, }, private, List, <, SourceFile, >, createSourceInputs, (, List, <, String, >]
[;, }, }, return, inputs, ;, }, private, List, <, SourceFile, >, createSourceInputs, (, List, <, String, >, files, )]
[;, }, private, List, <, SourceFile, >, createSourceInputs, (, List, <, String, >, files, ), throws, FlagUsageException, ,, IOException, {]
[), {, return, inputsSupplierForTesting, ., get, (, ), ;, }, if, (, files, ., isEmpty, (, ), ), {, files]
[;, }, if, (, files, ., isEmpty, (, ), ), {, files, =, Collections, ., singletonList, (, "-", ), ;]
[., get, (, ), ;, }, if, (, files, ., isEmpty, (, ), ), {, files, =, Collections, ., singletonList]
[), {, files, =, Collections, ., singletonList, (, "-", ), ;, }, try, {, return, createInputs, (, files, ,, true]
[., isEmpty, (, ), ), {, files, =, Collections, ., singletonList, (, "-", ), ;, }, try, {, return, createInputs]
[=, Collections, ., singletonList, (, "-", ), ;, }, try, {, return, createInputs, (, files, ,, true, ), ;, }]
[;, }, try, {, return, createInputs, (, files, ,, true, ), ;, }, catch, (, FlagUsageException, e, ), {, throw]
[., singletonList, (, "-", ), ;, }, try, {, return, createInputs, (, files, ,, true, ), ;, }, catch, (]
[), ;, }, try, {, return, createInputs, (, files, ,, true, ), ;, }, catch, (, FlagUsageException, e, ), {]
[;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (, "Bad --js flag. ", +, e, ., getMessage, (, ), )]
[,, true, ), ;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (, "Bad --js flag. ", +, e, ., getMessage]
[), ;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (, "Bad --js flag. ", +, e, ., getMessage, (, )]
[;, }, }, private, List, <, SourceFile, >, createExternInputs, (, List, <, String, >, files, ), throws, FlagUsageException, ,, IOException]
[), ;, }, }, private, List, <, SourceFile, >, createExternInputs, (, List, <, String, >, files, ), throws, FlagUsageException, ,]
[+, e, ., getMessage, (, ), ), ;, }, }, private, List, <, SourceFile, >, createExternInputs, (, List, <, String]
[), ;, }, }, private, List, <, SourceFile, >, createExternInputs, (, List, <, String, >, files, ), throws, FlagUsageException, ,]
[., getMessage, (, ), ), ;, }, }, private, List, <, SourceFile, >, createExternInputs, (, List, <, String, >, files]
[), {, return, ImmutableList, ., of, (, SourceFile, ., fromCode, (, "/dev/null", ,, "", ), ), ;, }, try, {]
[., isEmpty, (, ), ), {, return, ImmutableList, ., of, (, SourceFile, ., fromCode, (, "/dev/null", ,, "", ), )]
[;, }, try, {, return, createInputs, (, files, ,, false, ), ;, }, catch, (, FlagUsageException, e, ), {, throw]
[., of, (, SourceFile, ., fromCode, (, "/dev/null", ,, "", ), ), ;, }, try, {, return, createInputs, (, files]
[), ;, }, try, {, return, createInputs, (, files, ,, false, ), ;, }, catch, (, FlagUsageException, e, ), {]
[., fromCode, (, "/dev/null", ,, "", ), ), ;, }, try, {, return, createInputs, (, files, ,, false, ), ;]
[,, "", ), ), ;, }, try, {, return, createInputs, (, files, ,, false, ), ;, }, catch, (, FlagUsageException]
[), ), ;, }, try, {, return, createInputs, (, files, ,, false, ), ;, }, catch, (, FlagUsageException, e, )]
[;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (, "Bad --externs flag. ", +, e, ., getMessage, (, ), )]
[,, false, ), ;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (, "Bad --externs flag. ", +, e, ., getMessage]
[), ;, }, catch, (, FlagUsageException, e, ), {, throw, new, FlagUsageException, (, "Bad --externs flag. ", +, e, ., getMessage, (, )]
[;, }, }, List, <, JSModule, >, createJsModules, (, List, <, String, >, specs, ,, List, <, String, >, jsFiles]
[), ;, }, }, List, <, JSModule, >, createJsModules, (, List, <, String, >, specs, ,, List, <, String, >]
[+, e, ., getMessage, (, ), ), ;, }, }, List, <, JSModule, >, createJsModules, (, List, <, String, >]
[), ;, }, }, List, <, JSModule, >, createJsModules, (, List, <, String, >, specs, ,, List, <, String, >]
[., getMessage, (, ), ), ;, }, }, List, <, JSModule, >, createJsModules, (, List, <, String, >, specs, ,]
[), {, return, modulesSupplierForTesting, ., get, (, ), ;, }, Preconditions, ., checkState, (, specs, !=, null, ), ;, Preconditions]
[;, }, Preconditions, ., checkState, (, specs, !=, null, ), ;, Preconditions, ., checkState, (, !, specs, ., isEmpty, (]
[., get, (, ), ;, }, Preconditions, ., checkState, (, specs, !=, null, ), ;, Preconditions, ., checkState, (, !]
[;, Preconditions, ., checkState, (, !, specs, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, jsFiles, !=, null]
[., checkState, (, specs, !=, null, ), ;, Preconditions, ., checkState, (, !, specs, ., isEmpty, (, ), ), ;]
[), ;, Preconditions, ., checkState, (, !, specs, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, jsFiles, !=]
[!=, null, ), ;, Preconditions, ., checkState, (, !, specs, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (]
[), ;, Preconditions, ., checkState, (, !, specs, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, jsFiles, !=]
[;, Preconditions, ., checkState, (, jsFiles, !=, null, ), ;, final, int, totalNumJsFiles, =, jsFiles, ., size, (, ), ;]
[., checkState, (, !, specs, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, jsFiles, !=, null, ), ;]
[), ;, Preconditions, ., checkState, (, jsFiles, !=, null, ), ;, final, int, totalNumJsFiles, =, jsFiles, ., size, (, )]
[), ;, Preconditions, ., checkState, (, jsFiles, !=, null, ), ;, final, int, totalNumJsFiles, =, jsFiles, ., size, (, )]
[., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, jsFiles, !=, null, ), ;, final, int, totalNumJsFiles, =, jsFiles]
[;, final, int, totalNumJsFiles, =, jsFiles, ., size, (, ), ;, int, nextJsFileIndex, =, 0, ;, Map, <, String, ,]
[., checkState, (, jsFiles, !=, null, ), ;, final, int, totalNumJsFiles, =, jsFiles, ., size, (, ), ;, int, nextJsFileIndex]
[), ;, final, int, totalNumJsFiles, =, jsFiles, ., size, (, ), ;, int, nextJsFileIndex, =, 0, ;, Map, <, String]
[!=, null, ), ;, final, int, totalNumJsFiles, =, jsFiles, ., size, (, ), ;, int, nextJsFileIndex, =, 0, ;, Map]
[), ;, final, int, totalNumJsFiles, =, jsFiles, ., size, (, ), ;, int, nextJsFileIndex, =, 0, ;, Map, <, String]
[;, int, nextJsFileIndex, =, 0, ;, Map, <, String, ,, JSModule, >, modulesByName, =, Maps, ., newLinkedHashMap, (, ), ;]
[., size, (, ), ;, int, nextJsFileIndex, =, 0, ;, Map, <, String, ,, JSModule, >, modulesByName, =, Maps, .]
[;, Map, <, String, ,, JSModule, >, modulesByName, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, String, spec, :]
[;, for, (, String, spec, :, specs, ), {, String, [, ], parts, =, spec, ., split, (, ":", )]
[., newLinkedHashMap, (, ), ;, for, (, String, spec, :, specs, ), {, String, [, ], parts, =, spec, .]
[), {, String, [, ], parts, =, spec, ., split, (, ":", ), ;, if, (, parts, ., length, <]
[;, if, (, parts, ., length, <, 2, ||, parts, ., length, >, 4, ), {, throw, new, FlagUsageException, (]
[., split, (, ":", ), ;, if, (, parts, ., length, <, 2, ||, parts, ., length, >, 4, )]
[), ;, if, (, parts, ., length, <, 2, ||, parts, ., length, >, 4, ), {, throw, new, FlagUsageException]
[), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, ), ;, }, String, name, =, parts, [, 0]
[||, parts, ., length, >, 4, ), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, ), ;, }]
[<, 2, ||, parts, ., length, >, 4, ), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, )]
[., length, <, 2, ||, parts, ., length, >, 4, ), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +]
[||, parts, ., length, >, 4, ), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, ), ;, }]
[), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, ), ;, }, String, name, =, parts, [, 0]
[>, 4, ), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, ), ;, }, String, name, =, parts]
[., length, >, 4, ), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, ), ;, }, String, name]
[), {, throw, new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, ), ;, }, String, name, =, parts, [, 0]
[;, }, String, name, =, parts, [, 0, ], ;, checkModuleName, (, name, ), ;, if, (, modulesByName, ., containsKey]
[), ;, }, String, name, =, parts, [, 0, ], ;, checkModuleName, (, name, ), ;, if, (, modulesByName, .]
[+, spec, ), ;, }, String, name, =, parts, [, 0, ], ;, checkModuleName, (, name, ), ;, if, (]
[+, "module spec: ", +, spec, ), ;, }, String, name, =, parts, [, 0, ], ;, checkModuleName, (, name, ), ;]
[+, spec, ), ;, }, String, name, =, parts, [, 0, ], ;, checkModuleName, (, name, ), ;, if, (]
[), ;, }, String, name, =, parts, [, 0, ], ;, checkModuleName, (, name, ), ;, if, (, modulesByName, .]
[;, checkModuleName, (, name, ), ;, if, (, modulesByName, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (]
[[, 0, ], ;, checkModuleName, (, name, ), ;, if, (, modulesByName, ., containsKey, (, name, ), ), {, throw]
[], ;, checkModuleName, (, name, ), ;, if, (, modulesByName, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException]
[;, if, (, modulesByName, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (, "Duplicate module name: ", +, name, ), ;]
[), ;, if, (, modulesByName, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (, "Duplicate module name: ", +, name, )]
[), {, throw, new, FlagUsageException, (, "Duplicate module name: ", +, name, ), ;, }, JSModule, module, =, new, JSModule, (, name, )]
[., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (, "Duplicate module name: ", +, name, ), ;, }, JSModule, module, =]
[), ), {, throw, new, FlagUsageException, (, "Duplicate module name: ", +, name, ), ;, }, JSModule, module, =, new, JSModule, (, name]
[;, }, JSModule, module, =, new, JSModule, (, name, ), ;, int, numJsFiles, =, -, 1, ;, try, {, numJsFiles]
[), ;, }, JSModule, module, =, new, JSModule, (, name, ), ;, int, numJsFiles, =, -, 1, ;, try, {]
[+, name, ), ;, }, JSModule, module, =, new, JSModule, (, name, ), ;, int, numJsFiles, =, -, 1, ;]
[), ;, }, JSModule, module, =, new, JSModule, (, name, ), ;, int, numJsFiles, =, -, 1, ;, try, {]
[;, int, numJsFiles, =, -, 1, ;, try, {, numJsFiles, =, Integer, ., parseInt, (, parts, [, 1, ], )]
[), ;, int, numJsFiles, =, -, 1, ;, try, {, numJsFiles, =, Integer, ., parseInt, (, parts, [, 1, ]]
[;, try, {, numJsFiles, =, Integer, ., parseInt, (, parts, [, 1, ], ), ;, }, catch, (, NumberFormatException, ignored]
[;, try, {, numJsFiles, =, Integer, ., parseInt, (, parts, [, 1, ], ), ;, }, catch, (, NumberFormatException, ignored]
[=, Integer, ., parseInt, (, parts, [, 1, ], ), ;, }, catch, (, NumberFormatException, ignored, ), {, numJsFiles, =]
[;, }, catch, (, NumberFormatException, ignored, ), {, numJsFiles, =, -, 1, ;, }, if, (, numJsFiles, <, 0, )]
[., parseInt, (, parts, [, 1, ], ), ;, }, catch, (, NumberFormatException, ignored, ), {, numJsFiles, =, -, 1]
[), ;, }, catch, (, NumberFormatException, ignored, ), {, numJsFiles, =, -, 1, ;, }, if, (, numJsFiles, <, 0]
[[, 1, ], ), ;, }, catch, (, NumberFormatException, ignored, ), {, numJsFiles, =, -, 1, ;, }, if, (]
[], ), ;, }, catch, (, NumberFormatException, ignored, ), {, numJsFiles, =, -, 1, ;, }, if, (, numJsFiles, <]
[=, -, 1, ;, }, if, (, numJsFiles, <, 0, ), {, throw, new, FlagUsageException, (, "Invalid JS file count '", +, parts, []
[;, }, if, (, numJsFiles, <, 0, ), {, throw, new, FlagUsageException, (, "Invalid JS file count '", +, parts, [, 1, ], +]
[;, }, if, (, numJsFiles, <, 0, ), {, throw, new, FlagUsageException, (, "Invalid JS file count '", +, parts, [, 1, ], +]
[), {, throw, new, FlagUsageException, (, "Invalid JS file count '", +, parts, [, 1, ], +, "' for module: ", +, name, ), ;, }, if]
[<, 0, ), {, throw, new, FlagUsageException, (, "Invalid JS file count '", +, parts, [, 1, ], +, "' for module: ", +, name, ), ;]
[), {, throw, new, FlagUsageException, (, "Invalid JS file count '", +, parts, [, 1, ], +, "' for module: ", +, name, ), ;, }, if]
[;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +]
[), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (, nextJsFileIndex]
[+, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +]
[+, "' for module: ", +, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (]
[+, parts, [, 1, ], +, "' for module: ", +, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, )]
[+, "' for module: ", +, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (]
[[, 1, ], +, "' for module: ", +, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw]
[], +, "' for module: ", +, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException]
[+, name, ), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +]
[), ;, }, if, (, nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (, nextJsFileIndex]
[), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, ), +, " more in module:", +, name, )]
[>, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, ), +, " more in module:", +]
[+, numJsFiles, >, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, ), +]
[>, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, ), +, " more in module:", +]
[), {, throw, new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, ), +, " more in module:", +, name, )]
[;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,, nextJsFileIndex, +, numJsFiles, ), ;, for]
[), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,, nextJsFileIndex, +, numJsFiles, ), ;]
[+, name, ), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,, nextJsFileIndex, +, numJsFiles]
[+, " more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,, nextJsFileIndex]
[+, (, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, ), +, " more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles]
[+, " more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,, nextJsFileIndex]
[), +, " more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,]
[-, totalNumJsFiles, ), +, " more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (]
[+, numJsFiles, -, totalNumJsFiles, ), +, " more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, .]
[-, totalNumJsFiles, ), +, " more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (]
[), +, " more in module:", +, name, ), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,]
[+, name, ), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,, nextJsFileIndex, +, numJsFiles]
[), ;, }, List, <, String, >, moduleJsFiles, =, jsFiles, ., subList, (, nextJsFileIndex, ,, nextJsFileIndex, +, numJsFiles, ), ;]
[;, for, (, SourceFile, input, :, createInputs, (, moduleJsFiles, ,, false, ), ), {, module, ., add, (, input, )]
[., subList, (, nextJsFileIndex, ,, nextJsFileIndex, +, numJsFiles, ), ;, for, (, SourceFile, input, :, createInputs, (, moduleJsFiles, ,, false]
[,, nextJsFileIndex, +, numJsFiles, ), ;, for, (, SourceFile, input, :, createInputs, (, moduleJsFiles, ,, false, ), ), {, module]
[), ;, for, (, SourceFile, input, :, createInputs, (, moduleJsFiles, ,, false, ), ), {, module, ., add, (, input]
[+, numJsFiles, ), ;, for, (, SourceFile, input, :, createInputs, (, moduleJsFiles, ,, false, ), ), {, module, ., add]
[), ;, for, (, SourceFile, input, :, createInputs, (, moduleJsFiles, ,, false, ), ), {, module, ., add, (, input]
[), {, module, ., add, (, input, ), ;, }, nextJsFileIndex, +=, numJsFiles, ;, if, (, parts, ., length, >]
[,, false, ), ), {, module, ., add, (, input, ), ;, }, nextJsFileIndex, +=, numJsFiles, ;, if, (, parts]
[), ), {, module, ., add, (, input, ), ;, }, nextJsFileIndex, +=, numJsFiles, ;, if, (, parts, ., length]
[;, }, nextJsFileIndex, +=, numJsFiles, ;, if, (, parts, ., length, >, 2, ), {, String, depList, =, parts, []
[., add, (, input, ), ;, }, nextJsFileIndex, +=, numJsFiles, ;, if, (, parts, ., length, >, 2, ), {]
[), ;, }, nextJsFileIndex, +=, numJsFiles, ;, if, (, parts, ., length, >, 2, ), {, String, depList, =, parts]
[+=, numJsFiles, ;, if, (, parts, ., length, >, 2, ), {, String, depList, =, parts, [, 2, ], ;]
[;, if, (, parts, ., length, >, 2, ), {, String, depList, =, parts, [, 2, ], ;, if, (]
[), {, String, depList, =, parts, [, 2, ], ;, if, (, depList, ., length, (, ), >, 0, )]
[>, 2, ), {, String, depList, =, parts, [, 2, ], ;, if, (, depList, ., length, (, ), >]
[., length, >, 2, ), {, String, depList, =, parts, [, 2, ], ;, if, (, depList, ., length, (]
[), {, String, depList, =, parts, [, 2, ], ;, if, (, depList, ., length, (, ), >, 0, )]
[;, if, (, depList, ., length, (, ), >, 0, ), {, String, [, ], deps, =, depList, ., split]
[[, 2, ], ;, if, (, depList, ., length, (, ), >, 0, ), {, String, [, ], deps, =]
[], ;, if, (, depList, ., length, (, ), >, 0, ), {, String, [, ], deps, =, depList, .]
[), {, String, [, ], deps, =, depList, ., split, (, ",", ), ;, for, (, String, dep, :, deps]
[>, 0, ), {, String, [, ], deps, =, depList, ., split, (, ",", ), ;, for, (, String, dep]
[., length, (, ), >, 0, ), {, String, [, ], deps, =, depList, ., split, (, ",", ), ;]
[), {, String, [, ], deps, =, depList, ., split, (, ",", ), ;, for, (, String, dep, :, deps]
[;, for, (, String, dep, :, deps, ), {, JSModule, other, =, modulesByName, ., get, (, dep, ), ;, if]
[., split, (, ",", ), ;, for, (, String, dep, :, deps, ), {, JSModule, other, =, modulesByName, ., get]
[), ;, for, (, String, dep, :, deps, ), {, JSModule, other, =, modulesByName, ., get, (, dep, ), ;]
[), {, JSModule, other, =, modulesByName, ., get, (, dep, ), ;, if, (, other, ==, null, ), {, throw]
[;, if, (, other, ==, null, ), {, throw, new, FlagUsageException, (, "Module '", +, name, +, "' depends on unknown module '", +, dep, +]
[., get, (, dep, ), ;, if, (, other, ==, null, ), {, throw, new, FlagUsageException, (, "Module '", +, name]
[), ;, if, (, other, ==, null, ), {, throw, new, FlagUsageException, (, "Module '", +, name, +, "' depends on unknown module '", +, dep]
[), {, throw, new, FlagUsageException, (, "Module '", +, name, +, "' depends on unknown module '", +, dep, +, "'. Be sure to list modules in dependency order.", ), ;, }, module, .]
[==, null, ), {, throw, new, FlagUsageException, (, "Module '", +, name, +, "' depends on unknown module '", +, dep, +, "'. Be sure to list modules in dependency order.", ), ;, }]
[), {, throw, new, FlagUsageException, (, "Module '", +, name, +, "' depends on unknown module '", +, dep, +, "'. Be sure to list modules in dependency order.", ), ;, }, module, .]
[;, }, module, ., addDependency, (, other, ), ;, }, }, }, modulesByName, ., put, (, name, ,, module, )]
[), ;, }, module, ., addDependency, (, other, ), ;, }, }, }, modulesByName, ., put, (, name, ,, module]
[+, "'. Be sure to list modules in dependency order.", ), ;, }, module, ., addDependency, (, other, ), ;, }, }, }, modulesByName, ., put, (, name]
[+, dep, +, "'. Be sure to list modules in dependency order.", ), ;, }, module, ., addDependency, (, other, ), ;, }, }, }, modulesByName, ., put]
[+, "' depends on unknown module '", +, dep, +, "'. Be sure to list modules in dependency order.", ), ;, }, module, ., addDependency, (, other, ), ;, }, }, }, modulesByName]
[+, name, +, "' depends on unknown module '", +, dep, +, "'. Be sure to list modules in dependency order.", ), ;, }, module, ., addDependency, (, other, ), ;, }, }]
[+, "' depends on unknown module '", +, dep, +, "'. Be sure to list modules in dependency order.", ), ;, }, module, ., addDependency, (, other, ), ;, }, }, }, modulesByName]
[+, dep, +, "'. Be sure to list modules in dependency order.", ), ;, }, module, ., addDependency, (, other, ), ;, }, }, }, modulesByName, ., put]
[+, "'. Be sure to list modules in dependency order.", ), ;, }, module, ., addDependency, (, other, ), ;, }, }, }, modulesByName, ., put, (, name]
[), ;, }, module, ., addDependency, (, other, ), ;, }, }, }, modulesByName, ., put, (, name, ,, module]
[;, }, }, }, modulesByName, ., put, (, name, ,, module, ), ;, }, if, (, nextJsFileIndex, <, totalNumJsFiles, )]
[., addDependency, (, other, ), ;, }, }, }, modulesByName, ., put, (, name, ,, module, ), ;, }, if]
[), ;, }, }, }, modulesByName, ., put, (, name, ,, module, ), ;, }, if, (, nextJsFileIndex, <, totalNumJsFiles]
[;, }, if, (, nextJsFileIndex, <, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Too many JS files specified. Expected ", +, nextJsFileIndex, +, " but found ", +, totalNumJsFiles]
[., put, (, name, ,, module, ), ;, }, if, (, nextJsFileIndex, <, totalNumJsFiles, ), {, throw, new, FlagUsageException, (]
[,, module, ), ;, }, if, (, nextJsFileIndex, <, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Too many JS files specified. Expected ", +, nextJsFileIndex, +]
[), ;, }, if, (, nextJsFileIndex, <, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Too many JS files specified. Expected ", +, nextJsFileIndex, +, " but found ", +]
[), {, throw, new, FlagUsageException, (, "Too many JS files specified. Expected ", +, nextJsFileIndex, +, " but found ", +, totalNumJsFiles, ), ;, }, return, Lists, ., newArrayList]
[<, totalNumJsFiles, ), {, throw, new, FlagUsageException, (, "Too many JS files specified. Expected ", +, nextJsFileIndex, +, " but found ", +, totalNumJsFiles, ), ;, }, return, Lists]
[), {, throw, new, FlagUsageException, (, "Too many JS files specified. Expected ", +, nextJsFileIndex, +, " but found ", +, totalNumJsFiles, ), ;, }, return, Lists, ., newArrayList]
[;, }, return, Lists, ., newArrayList, (, modulesByName, ., values, (, ), ), ;, }, protected, void, checkModuleName, (, String]
[), ;, }, return, Lists, ., newArrayList, (, modulesByName, ., values, (, ), ), ;, }, protected, void, checkModuleName, (]
[+, totalNumJsFiles, ), ;, }, return, Lists, ., newArrayList, (, modulesByName, ., values, (, ), ), ;, }, protected, void]
[+, " but found ", +, totalNumJsFiles, ), ;, }, return, Lists, ., newArrayList, (, modulesByName, ., values, (, ), ), ;, }]
[+, nextJsFileIndex, +, " but found ", +, totalNumJsFiles, ), ;, }, return, Lists, ., newArrayList, (, modulesByName, ., values, (, ), )]
[+, " but found ", +, totalNumJsFiles, ), ;, }, return, Lists, ., newArrayList, (, modulesByName, ., values, (, ), ), ;, }]
[+, totalNumJsFiles, ), ;, }, return, Lists, ., newArrayList, (, modulesByName, ., values, (, ), ), ;, }, protected, void]
[), ;, }, return, Lists, ., newArrayList, (, modulesByName, ., values, (, ), ), ;, }, protected, void, checkModuleName, (]
[;, }, protected, void, checkModuleName, (, String, name, ), throws, FlagUsageException, {, if, (, !, TokenStream, ., isJSIdentifier, (, name]
[., newArrayList, (, modulesByName, ., values, (, ), ), ;, }, protected, void, checkModuleName, (, String, name, ), throws, FlagUsageException]
[), ;, }, protected, void, checkModuleName, (, String, name, ), throws, FlagUsageException, {, if, (, !, TokenStream, ., isJSIdentifier, (]
[., values, (, ), ), ;, }, protected, void, checkModuleName, (, String, name, ), throws, FlagUsageException, {, if, (, !]
[), {, throw, new, FlagUsageException, (, "Invalid module name: '", +, name, +, "'", ), ;, }, }, static, Map, <, String, ,]
[), {, throw, new, FlagUsageException, (, "Invalid module name: '", +, name, +, "'", ), ;, }, }, static, Map, <, String, ,]
[., isJSIdentifier, (, name, ), ), {, throw, new, FlagUsageException, (, "Invalid module name: '", +, name, +, "'", ), ;, }, }]
[), ), {, throw, new, FlagUsageException, (, "Invalid module name: '", +, name, +, "'", ), ;, }, }, static, Map, <, String]
[;, }, }, static, Map, <, String, ,, String, >, parseModuleWrappers, (, List, <, String, >, specs, ,, List, <]
[), ;, }, }, static, Map, <, String, ,, String, >, parseModuleWrappers, (, List, <, String, >, specs, ,, List]
[+, "'", ), ;, }, }, static, Map, <, String, ,, String, >, parseModuleWrappers, (, List, <, String, >, specs]
[+, name, +, "'", ), ;, }, }, static, Map, <, String, ,, String, >, parseModuleWrappers, (, List, <, String]
[+, "'", ), ;, }, }, static, Map, <, String, ,, String, >, parseModuleWrappers, (, List, <, String, >, specs]
[), ;, }, }, static, Map, <, String, ,, String, >, parseModuleWrappers, (, List, <, String, >, specs, ,, List]
[;, Map, <, String, ,, String, >, wrappers, =, Maps, ., newHashMapWithExpectedSize, (, modules, ., size, (, ), ), ;]
[., checkState, (, specs, !=, null, ), ;, Map, <, String, ,, String, >, wrappers, =, Maps, ., newHashMapWithExpectedSize, (]
[), ;, Map, <, String, ,, String, >, wrappers, =, Maps, ., newHashMapWithExpectedSize, (, modules, ., size, (, ), )]
[!=, null, ), ;, Map, <, String, ,, String, >, wrappers, =, Maps, ., newHashMapWithExpectedSize, (, modules, ., size, (]
[), ;, Map, <, String, ,, String, >, wrappers, =, Maps, ., newHashMapWithExpectedSize, (, modules, ., size, (, ), )]
[;, for, (, JSModule, m, :, modules, ), {, wrappers, ., put, (, m, ., getName, (, ), ,, ""]
[., newHashMapWithExpectedSize, (, modules, ., size, (, ), ), ;, for, (, JSModule, m, :, modules, ), {, wrappers, .]
[), ;, for, (, JSModule, m, :, modules, ), {, wrappers, ., put, (, m, ., getName, (, ), ,]
[., size, (, ), ), ;, for, (, JSModule, m, :, modules, ), {, wrappers, ., put, (, m, .]
[), {, wrappers, ., put, (, m, ., getName, (, ), ,, "", ), ;, }, for, (, String, spec]
[;, }, for, (, String, spec, :, specs, ), {, int, pos, =, spec, ., indexOf, (, ':', ), ;]
[., put, (, m, ., getName, (, ), ,, "", ), ;, }, for, (, String, spec, :, specs, )]
[,, "", ), ;, }, for, (, String, spec, :, specs, ), {, int, pos, =, spec, ., indexOf, (]
[., getName, (, ), ,, "", ), ;, }, for, (, String, spec, :, specs, ), {, int, pos, =]
[), ;, }, for, (, String, spec, :, specs, ), {, int, pos, =, spec, ., indexOf, (, ':', )]
[), {, int, pos, =, spec, ., indexOf, (, ':', ), ;, if, (, pos, ==, -, 1, ), {]
[;, if, (, pos, ==, -, 1, ), {, throw, new, FlagUsageException, (, "Expected module wrapper to have ", +, "<name>:<wrapper> format: ", +, spec, ), ;]
[., indexOf, (, ':', ), ;, if, (, pos, ==, -, 1, ), {, throw, new, FlagUsageException, (, "Expected module wrapper to have ", +]
[), ;, if, (, pos, ==, -, 1, ), {, throw, new, FlagUsageException, (, "Expected module wrapper to have ", +, "<name>:<wrapper> format: ", +, spec, )]
[), {, throw, new, FlagUsageException, (, "Expected module wrapper to have ", +, "<name>:<wrapper> format: ", +, spec, ), ;, }, String, name, =, spec, ., substring]
[==, -, 1, ), {, throw, new, FlagUsageException, (, "Expected module wrapper to have ", +, "<name>:<wrapper> format: ", +, spec, ), ;, }, String, name, =]
[), {, throw, new, FlagUsageException, (, "Expected module wrapper to have ", +, "<name>:<wrapper> format: ", +, spec, ), ;, }, String, name, =, spec, ., substring]
[), {, throw, new, FlagUsageException, (, "Expected module wrapper to have ", +, "<name>:<wrapper> format: ", +, spec, ), ;, }, String, name, =, spec, ., substring]
[;, }, String, name, =, spec, ., substring, (, 0, ,, pos, ), ;, if, (, !, wrappers, ., containsKey]
[), ;, }, String, name, =, spec, ., substring, (, 0, ,, pos, ), ;, if, (, !, wrappers, .]
[+, spec, ), ;, }, String, name, =, spec, ., substring, (, 0, ,, pos, ), ;, if, (, !]
[+, "<name>:<wrapper> format: ", +, spec, ), ;, }, String, name, =, spec, ., substring, (, 0, ,, pos, ), ;, if]
[+, spec, ), ;, }, String, name, =, spec, ., substring, (, 0, ,, pos, ), ;, if, (, !]
[), ;, }, String, name, =, spec, ., substring, (, 0, ,, pos, ), ;, if, (, !, wrappers, .]
[;, if, (, !, wrappers, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (, "Unknown module: '", +, name, +]
[., substring, (, 0, ,, pos, ), ;, if, (, !, wrappers, ., containsKey, (, name, ), ), {, throw]
[,, pos, ), ;, if, (, !, wrappers, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (, "Unknown module: '"]
[), ;, if, (, !, wrappers, ., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (, "Unknown module: '", +, name]
[), {, throw, new, FlagUsageException, (, "Unknown module: '", +, name, +, "'", ), ;, }, String, wrapper, =, spec, ., substring]
[), {, throw, new, FlagUsageException, (, "Unknown module: '", +, name, +, "'", ), ;, }, String, wrapper, =, spec, ., substring]
[., containsKey, (, name, ), ), {, throw, new, FlagUsageException, (, "Unknown module: '", +, name, +, "'", ), ;, }, String]
[), ), {, throw, new, FlagUsageException, (, "Unknown module: '", +, name, +, "'", ), ;, }, String, wrapper, =, spec, .]
[;, }, String, wrapper, =, spec, ., substring, (, pos, +, 1, ), ;, if, (, !, wrapper, ., contains]
[), ;, }, String, wrapper, =, spec, ., substring, (, pos, +, 1, ), ;, if, (, !, wrapper, .]
[+, "'", ), ;, }, String, wrapper, =, spec, ., substring, (, pos, +, 1, ), ;, if, (, !]
[+, name, +, "'", ), ;, }, String, wrapper, =, spec, ., substring, (, pos, +, 1, ), ;, if]
[+, "'", ), ;, }, String, wrapper, =, spec, ., substring, (, pos, +, 1, ), ;, if, (, !]
[), ;, }, String, wrapper, =, spec, ., substring, (, pos, +, 1, ), ;, if, (, !, wrapper, .]
[;, if, (, !, wrapper, ., contains, (, "%s", ), ), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +, wrapper, +]
[., substring, (, pos, +, 1, ), ;, if, (, !, wrapper, ., contains, (, "%s", ), ), {, throw]
[), ;, if, (, !, wrapper, ., contains, (, "%s", ), ), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +, wrapper]
[+, 1, ), ;, if, (, !, wrapper, ., contains, (, "%s", ), ), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '"]
[), ;, if, (, !, wrapper, ., contains, (, "%s", ), ), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +, wrapper]
[), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +, wrapper, +, "'", ), ;, }, wrappers, ., put, (, name, ,]
[), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +, wrapper, +, "'", ), ;, }, wrappers, ., put, (, name, ,]
[., contains, (, "%s", ), ), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +, wrapper, +, "'", ), ;, }, wrappers]
[), ), {, throw, new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +, wrapper, +, "'", ), ;, }, wrappers, ., put, (, name]
[;, }, wrappers, ., put, (, name, ,, wrapper, ), ;, }, return, wrappers, ;, }, private, String, getModuleOutputFileName, (]
[), ;, }, wrappers, ., put, (, name, ,, wrapper, ), ;, }, return, wrappers, ;, }, private, String, getModuleOutputFileName]
[+, "'", ), ;, }, wrappers, ., put, (, name, ,, wrapper, ), ;, }, return, wrappers, ;, }, private]
[+, wrapper, +, "'", ), ;, }, wrappers, ., put, (, name, ,, wrapper, ), ;, }, return, wrappers, ;]
[+, "'", ), ;, }, wrappers, ., put, (, name, ,, wrapper, ), ;, }, return, wrappers, ;, }, private]
[), ;, }, wrappers, ., put, (, name, ,, wrapper, ), ;, }, return, wrappers, ;, }, private, String, getModuleOutputFileName]
[;, }, return, wrappers, ;, }, private, String, getModuleOutputFileName, (, JSModule, m, ), {, return, config, ., moduleOutputPathPrefix, +, m]
[., put, (, name, ,, wrapper, ), ;, }, return, wrappers, ;, }, private, String, getModuleOutputFileName, (, JSModule, m, )]
[,, wrapper, ), ;, }, return, wrappers, ;, }, private, String, getModuleOutputFileName, (, JSModule, m, ), {, return, config, .]
[), ;, }, return, wrappers, ;, }, private, String, getModuleOutputFileName, (, JSModule, m, ), {, return, config, ., moduleOutputPathPrefix, +]
[;, }, private, String, getModuleOutputFileName, (, JSModule, m, ), {, return, config, ., moduleOutputPathPrefix, +, m, ., getName, (, )]
[;, }, @, VisibleForTesting, void, writeModuleOutput, (, Appendable, out, ,, JSModule, m, ), throws, FlagUsageException, ,, IOException, {, if, (]
[+, ".js", ;, }, @, VisibleForTesting, void, writeModuleOutput, (, Appendable, out, ,, JSModule, m, ), throws, FlagUsageException, ,, IOException, {]
[+, m, ., getName, (, ), +, ".js", ;, }, @, VisibleForTesting, void, writeModuleOutput, (, Appendable, out, ,, JSModule, m]
[., moduleOutputPathPrefix, +, m, ., getName, (, ), +, ".js", ;, }, @, VisibleForTesting, void, writeModuleOutput, (, Appendable, out, ,]
[+, ".js", ;, }, @, VisibleForTesting, void, writeModuleOutput, (, Appendable, out, ,, JSModule, m, ), throws, FlagUsageException, ,, IOException, {]
[., getName, (, ), +, ".js", ;, }, @, VisibleForTesting, void, writeModuleOutput, (, Appendable, out, ,, JSModule, m, ), throws]
[;, }, @, VisibleForTesting, void, writeModuleOutput, (, Appendable, out, ,, JSModule, m, ), throws, FlagUsageException, ,, IOException, {, if, (]
[), {, parsedModuleWrappers, =, parseModuleWrappers, (, config, ., moduleWrapper, ,, Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), .]
[==, null, ), {, parsedModuleWrappers, =, parseModuleWrappers, (, config, ., moduleWrapper, ,, Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (]
[), {, parsedModuleWrappers, =, parseModuleWrappers, (, config, ., moduleWrapper, ,, Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), .]
[=, parseModuleWrappers, (, config, ., moduleWrapper, ,, Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, )]
[;, }, String, fileName, =, getModuleOutputFileName, (, m, ), ;, String, baseName, =, new, File, (, fileName, ), ., getName]
[,, Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), ), ;, }, String, fileName]
[., moduleWrapper, ,, Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), ), ;, }]
[), ;, }, String, fileName, =, getModuleOutputFileName, (, m, ), ;, String, baseName, =, new, File, (, fileName, ), .]
[., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), ), ;, }, String, fileName, =, getModuleOutputFileName]
[), ), ;, }, String, fileName, =, getModuleOutputFileName, (, m, ), ;, String, baseName, =, new, File, (, fileName, )]
[., getAllModules, (, ), ), ), ;, }, String, fileName, =, getModuleOutputFileName, (, m, ), ;, String, baseName, =, new]
[., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), ), ;, }, String, fileName, =, getModuleOutputFileName, (, m, ), ;]
[;, String, baseName, =, new, File, (, fileName, ), ., getName, (, ), ;, writeOutput, (, out, ,, compiler, ,]
[), ;, String, baseName, =, new, File, (, fileName, ), ., getName, (, ), ;, writeOutput, (, out, ,, compiler]
[;, writeOutput, (, out, ,, compiler, ,, compiler, ., toSource, (, m, ), ,, parsedModuleWrappers, ., get, (, m, .]
[., getName, (, ), ;, writeOutput, (, out, ,, compiler, ,, compiler, ., toSource, (, m, ), ,, parsedModuleWrappers, .]
[), ., getName, (, ), ;, writeOutput, (, out, ,, compiler, ,, compiler, ., toSource, (, m, ), ,, parsedModuleWrappers]
[;, }, static, void, writeOutput, (, Appendable, out, ,, Compiler, compiler, ,, String, code, ,, String, wrapper, ,, String, codePlaceholder]
[,, compiler, ,, compiler, ., toSource, (, m, ), ,, parsedModuleWrappers, ., get, (, m, ., getName, (, ), )]
[,, compiler, ., toSource, (, m, ), ,, parsedModuleWrappers, ., get, (, m, ., getName, (, ), ), ., replace]
[,, parsedModuleWrappers, ., get, (, m, ., getName, (, ), ), ., replace, (, "%basename%", ,, baseName, ), ,, "%s"]
[., toSource, (, m, ), ,, parsedModuleWrappers, ., get, (, m, ., getName, (, ), ), ., replace, (, "%basename%"]
[), ,, parsedModuleWrappers, ., get, (, m, ., getName, (, ), ), ., replace, (, "%basename%", ,, baseName, ), ,]
[,, "%s", ,, null, ), ;, }, static, void, writeOutput, (, Appendable, out, ,, Compiler, compiler, ,, String, code, ,]
[., replace, (, "%basename%", ,, baseName, ), ,, "%s", ,, null, ), ;, }, static, void, writeOutput, (, Appendable, out]
[., get, (, m, ., getName, (, ), ), ., replace, (, "%basename%", ,, baseName, ), ,, "%s", ,, null]
[), ., replace, (, "%basename%", ,, baseName, ), ,, "%s", ,, null, ), ;, }, static, void, writeOutput, (, Appendable]
[., getName, (, ), ), ., replace, (, "%basename%", ,, baseName, ), ,, "%s", ,, null, ), ;, }, static]
[,, baseName, ), ,, "%s", ,, null, ), ;, }, static, void, writeOutput, (, Appendable, out, ,, Compiler, compiler, ,]
[), ,, "%s", ,, null, ), ;, }, static, void, writeOutput, (, Appendable, out, ,, Compiler, compiler, ,, String, code]
[,, null, ), ;, }, static, void, writeOutput, (, Appendable, out, ,, Compiler, compiler, ,, String, code, ,, String, wrapper]
[), ;, }, static, void, writeOutput, (, Appendable, out, ,, Compiler, compiler, ,, String, code, ,, String, wrapper, ,, String]
[;, if, (, pos, !=, -, 1, ), {, String, prefix, =, "", ;, if, (, pos, >, 0, )]
[., indexOf, (, codePlaceholder, ), ;, if, (, pos, !=, -, 1, ), {, String, prefix, =, "", ;, if]
[), ;, if, (, pos, !=, -, 1, ), {, String, prefix, =, "", ;, if, (, pos, >, 0]
[), {, String, prefix, =, "", ;, if, (, pos, >, 0, ), {, prefix, =, wrapper, ., substring, (]
[!=, -, 1, ), {, String, prefix, =, "", ;, if, (, pos, >, 0, ), {, prefix, =, wrapper]
[), {, String, prefix, =, "", ;, if, (, pos, >, 0, ), {, prefix, =, wrapper, ., substring, (]
[), {, String, prefix, =, "", ;, if, (, pos, >, 0, ), {, prefix, =, wrapper, ., substring, (]
[;, if, (, pos, >, 0, ), {, prefix, =, wrapper, ., substring, (, 0, ,, pos, ), ;, out]
[), {, prefix, =, wrapper, ., substring, (, 0, ,, pos, ), ;, out, ., append, (, prefix, ), ;]
[>, 0, ), {, prefix, =, wrapper, ., substring, (, 0, ,, pos, ), ;, out, ., append, (, prefix]
[), {, prefix, =, wrapper, ., substring, (, 0, ,, pos, ), ;, out, ., append, (, prefix, ), ;]
[=, wrapper, ., substring, (, 0, ,, pos, ), ;, out, ., append, (, prefix, ), ;, }, out, .]
[;, out, ., append, (, prefix, ), ;, }, out, ., append, (, escaper, ==, null, ?, code, :, escaper]
[., substring, (, 0, ,, pos, ), ;, out, ., append, (, prefix, ), ;, }, out, ., append, (]
[,, pos, ), ;, out, ., append, (, prefix, ), ;, }, out, ., append, (, escaper, ==, null, ?]
[), ;, out, ., append, (, prefix, ), ;, }, out, ., append, (, escaper, ==, null, ?, code, :]
[;, }, out, ., append, (, escaper, ==, null, ?, code, :, escaper, ., apply, (, code, ), ), ;]
[., append, (, prefix, ), ;, }, out, ., append, (, escaper, ==, null, ?, code, :, escaper, ., apply]
[), ;, }, out, ., append, (, escaper, ==, null, ?, code, :, escaper, ., apply, (, code, ), )]
[;, int, suffixStart, =, pos, +, codePlaceholder, ., length, (, ), ;, if, (, suffixStart, !=, wrapper, ., length, (]
[., append, (, escaper, ==, null, ?, code, :, escaper, ., apply, (, code, ), ), ;, int, suffixStart, =]
[), ;, int, suffixStart, =, pos, +, codePlaceholder, ., length, (, ), ;, if, (, suffixStart, !=, wrapper, ., length]
[?, code, :, escaper, ., apply, (, code, ), ), ;, int, suffixStart, =, pos, +, codePlaceholder, ., length, (]
[==, null, ?, code, :, escaper, ., apply, (, code, ), ), ;, int, suffixStart, =, pos, +, codePlaceholder, .]
[?, code, :, escaper, ., apply, (, code, ), ), ;, int, suffixStart, =, pos, +, codePlaceholder, ., length, (]
[:, escaper, ., apply, (, code, ), ), ;, int, suffixStart, =, pos, +, codePlaceholder, ., length, (, ), ;]
[), ;, int, suffixStart, =, pos, +, codePlaceholder, ., length, (, ), ;, if, (, suffixStart, !=, wrapper, ., length]
[., apply, (, code, ), ), ;, int, suffixStart, =, pos, +, codePlaceholder, ., length, (, ), ;, if, (]
[), ), ;, int, suffixStart, =, pos, +, codePlaceholder, ., length, (, ), ;, if, (, suffixStart, !=, wrapper, .]
[;, if, (, suffixStart, !=, wrapper, ., length, (, ), ), {, out, ., append, (, wrapper, ., substring, (]
[+, codePlaceholder, ., length, (, ), ;, if, (, suffixStart, !=, wrapper, ., length, (, ), ), {, out, .]
[;, if, (, suffixStart, !=, wrapper, ., length, (, ), ), {, out, ., append, (, wrapper, ., substring, (]
[., length, (, ), ;, if, (, suffixStart, !=, wrapper, ., length, (, ), ), {, out, ., append, (]
[), {, out, ., append, (, wrapper, ., substring, (, suffixStart, ), ), ;, }, out, ., append, (, '\n']
[!=, wrapper, ., length, (, ), ), {, out, ., append, (, wrapper, ., substring, (, suffixStart, ), ), ;]
[), {, out, ., append, (, wrapper, ., substring, (, suffixStart, ), ), ;, }, out, ., append, (, '\n']
[., length, (, ), ), {, out, ., append, (, wrapper, ., substring, (, suffixStart, ), ), ;, }, out]
[;, }, out, ., append, (, '\n', ), ;, if, (, compiler, !=, null, &&, compiler, ., getSourceMap, (, )]
[., append, (, wrapper, ., substring, (, suffixStart, ), ), ;, }, out, ., append, (, '\n', ), ;, if]
[), ;, }, out, ., append, (, '\n', ), ;, if, (, compiler, !=, null, &&, compiler, ., getSourceMap, (]
[., substring, (, suffixStart, ), ), ;, }, out, ., append, (, '\n', ), ;, if, (, compiler, !=, null]
[), ), ;, }, out, ., append, (, '\n', ), ;, if, (, compiler, !=, null, &&, compiler, ., getSourceMap]
[;, if, (, compiler, !=, null, &&, compiler, ., getSourceMap, (, ), !=, null, ), {, compiler, ., getSourceMap, (]
[., append, (, '\n', ), ;, if, (, compiler, !=, null, &&, compiler, ., getSourceMap, (, ), !=, null, )]
[), ;, if, (, compiler, !=, null, &&, compiler, ., getSourceMap, (, ), !=, null, ), {, compiler, ., getSourceMap]
[), {, compiler, ., getSourceMap, (, ), ., setWrapperPrefix, (, prefix, ), ;, }, }, else, {, out, ., append]
[&&, compiler, ., getSourceMap, (, ), !=, null, ), {, compiler, ., getSourceMap, (, ), ., setWrapperPrefix, (, prefix, )]
[!=, null, &&, compiler, ., getSourceMap, (, ), !=, null, ), {, compiler, ., getSourceMap, (, ), ., setWrapperPrefix, (]
[&&, compiler, ., getSourceMap, (, ), !=, null, ), {, compiler, ., getSourceMap, (, ), ., setWrapperPrefix, (, prefix, )]
[), {, compiler, ., getSourceMap, (, ), ., setWrapperPrefix, (, prefix, ), ;, }, }, else, {, out, ., append]
[!=, null, ), {, compiler, ., getSourceMap, (, ), ., setWrapperPrefix, (, prefix, ), ;, }, }, else, {, out]
[., getSourceMap, (, ), !=, null, ), {, compiler, ., getSourceMap, (, ), ., setWrapperPrefix, (, prefix, ), ;, }]
[), {, compiler, ., getSourceMap, (, ), ., setWrapperPrefix, (, prefix, ), ;, }, }, else, {, out, ., append]
[;, }, }, else, {, out, ., append, (, code, ), ;, out, ., append, (, '\n', ), ;, }]
[., setWrapperPrefix, (, prefix, ), ;, }, }, else, {, out, ., append, (, code, ), ;, out, ., append]
[., getSourceMap, (, ), ., setWrapperPrefix, (, prefix, ), ;, }, }, else, {, out, ., append, (, code, )]
[), ;, }, }, else, {, out, ., append, (, code, ), ;, out, ., append, (, '\n', ), ;]
[;, out, ., append, (, '\n', ), ;, }, }, private, static, void, maybeCreateDirsForPath, (, String, pathPrefix, ), {, if]
[., append, (, code, ), ;, out, ., append, (, '\n', ), ;, }, }, private, static, void, maybeCreateDirsForPath, (]
[), ;, out, ., append, (, '\n', ), ;, }, }, private, static, void, maybeCreateDirsForPath, (, String, pathPrefix, ), {]
[;, }, }, private, static, void, maybeCreateDirsForPath, (, String, pathPrefix, ), {, if, (, pathPrefix, ., length, (, ), >]
[., append, (, '\n', ), ;, }, }, private, static, void, maybeCreateDirsForPath, (, String, pathPrefix, ), {, if, (, pathPrefix]
[), ;, }, }, private, static, void, maybeCreateDirsForPath, (, String, pathPrefix, ), {, if, (, pathPrefix, ., length, (, )]
[), {, String, dirName, =, pathPrefix, ., charAt, (, pathPrefix, ., length, (, ), -, 1, ), ==, File, .]
[>, 0, ), {, String, dirName, =, pathPrefix, ., charAt, (, pathPrefix, ., length, (, ), -, 1, ), ==]
[., length, (, ), >, 0, ), {, String, dirName, =, pathPrefix, ., charAt, (, pathPrefix, ., length, (, )]
[), {, String, dirName, =, pathPrefix, ., charAt, (, pathPrefix, ., length, (, ), -, 1, ), ==, File, .]
[;, if, (, dirName, !=, null, ), {, new, File, (, dirName, ), ., mkdirs, (, ), ;, }, }]
[?, pathPrefix, ., substring, (, 0, ,, pathPrefix, ., length, (, ), -, 1, ), :, new, File, (, pathPrefix]
[==, File, ., separatorChar, ?, pathPrefix, ., substring, (, 0, ,, pathPrefix, ., length, (, ), -, 1, ), :]
[., charAt, (, pathPrefix, ., length, (, ), -, 1, ), ==, File, ., separatorChar, ?, pathPrefix, ., substring, (]
[), ==, File, ., separatorChar, ?, pathPrefix, ., substring, (, 0, ,, pathPrefix, ., length, (, ), -, 1, )]
[-, 1, ), ==, File, ., separatorChar, ?, pathPrefix, ., substring, (, 0, ,, pathPrefix, ., length, (, ), -]
[., length, (, ), -, 1, ), ==, File, ., separatorChar, ?, pathPrefix, ., substring, (, 0, ,, pathPrefix, .]
[), ==, File, ., separatorChar, ?, pathPrefix, ., substring, (, 0, ,, pathPrefix, ., length, (, ), -, 1, )]
[?, pathPrefix, ., substring, (, 0, ,, pathPrefix, ., length, (, ), -, 1, ), :, new, File, (, pathPrefix]
[., separatorChar, ?, pathPrefix, ., substring, (, 0, ,, pathPrefix, ., length, (, ), -, 1, ), :, new, File]
[:, new, File, (, pathPrefix, ), ., getParent, (, ), ;, if, (, dirName, !=, null, ), {, new, File]
[., substring, (, 0, ,, pathPrefix, ., length, (, ), -, 1, ), :, new, File, (, pathPrefix, ), .]
[,, pathPrefix, ., length, (, ), -, 1, ), :, new, File, (, pathPrefix, ), ., getParent, (, ), ;]
[), :, new, File, (, pathPrefix, ), ., getParent, (, ), ;, if, (, dirName, !=, null, ), {, new]
[-, 1, ), :, new, File, (, pathPrefix, ), ., getParent, (, ), ;, if, (, dirName, !=, null, )]
[., length, (, ), -, 1, ), :, new, File, (, pathPrefix, ), ., getParent, (, ), ;, if, (]
[), :, new, File, (, pathPrefix, ), ., getParent, (, ), ;, if, (, dirName, !=, null, ), {, new]
[;, if, (, dirName, !=, null, ), {, new, File, (, dirName, ), ., mkdirs, (, ), ;, }, }]
[., getParent, (, ), ;, if, (, dirName, !=, null, ), {, new, File, (, dirName, ), ., mkdirs, (]
[), ., getParent, (, ), ;, if, (, dirName, !=, null, ), {, new, File, (, dirName, ), ., mkdirs]
[), {, new, File, (, dirName, ), ., mkdirs, (, ), ;, }, }, }, protected, int, doRun, (, )]
[!=, null, ), {, new, File, (, dirName, ), ., mkdirs, (, ), ;, }, }, }, protected, int, doRun]
[), {, new, File, (, dirName, ), ., mkdirs, (, ), ;, }, }, }, protected, int, doRun, (, )]
[;, }, }, }, protected, int, doRun, (, ), throws, FlagUsageException, ,, IOException, {, Compiler, ., setLoggingLevel, (, Level, .]
[., mkdirs, (, ), ;, }, }, }, protected, int, doRun, (, ), throws, FlagUsageException, ,, IOException, {, Compiler, .]
[), ., mkdirs, (, ), ;, }, }, }, protected, int, doRun, (, ), throws, FlagUsageException, ,, IOException, {, Compiler]
[;, List, <, SourceFile, >, externs, =, createExterns, (, ), ;, compiler, =, createCompiler, (, ), ;, B, options, =]
[., setLoggingLevel, (, Level, ., parse, (, config, ., loggingLevel, ), ), ;, List, <, SourceFile, >, externs, =, createExterns]
[), ;, List, <, SourceFile, >, externs, =, createExterns, (, ), ;, compiler, =, createCompiler, (, ), ;, B, options]
[., parse, (, config, ., loggingLevel, ), ), ;, List, <, SourceFile, >, externs, =, createExterns, (, ), ;, compiler]
[), ), ;, List, <, SourceFile, >, externs, =, createExterns, (, ), ;, compiler, =, createCompiler, (, ), ;, B]
[., loggingLevel, ), ), ;, List, <, SourceFile, >, externs, =, createExterns, (, ), ;, compiler, =, createCompiler, (, )]
[;, compiler, =, createCompiler, (, ), ;, B, options, =, createOptions, (, ), ;, List, <, JSModule, >, modules, =]
[=, createCompiler, (, ), ;, B, options, =, createOptions, (, ), ;, List, <, JSModule, >, modules, =, null, ;]
[;, B, options, =, createOptions, (, ), ;, List, <, JSModule, >, modules, =, null, ;, Result, result, =, null]
[;, List, <, JSModule, >, modules, =, null, ;, Result, result, =, null, ;, setRunOptions, (, options, ), ;, boolean]
[;, Result, result, =, null, ;, setRunOptions, (, options, ), ;, boolean, writeOutputToFile, =, !, config, ., jsOutputFile, ., isEmpty]
[;, setRunOptions, (, options, ), ;, boolean, writeOutputToFile, =, !, config, ., jsOutputFile, ., isEmpty, (, ), ;, List, <]
[;, boolean, writeOutputToFile, =, !, config, ., jsOutputFile, ., isEmpty, (, ), ;, List, <, String, >, outputFileNames, =, Lists]
[), ;, boolean, writeOutputToFile, =, !, config, ., jsOutputFile, ., isEmpty, (, ), ;, List, <, String, >, outputFileNames, =]
[;, List, <, String, >, outputFileNames, =, Lists, ., newArrayList, (, ), ;, if, (, writeOutputToFile, ), {, outputFileNames, .]
[;, List, <, String, >, outputFileNames, =, Lists, ., newArrayList, (, ), ;, if, (, writeOutputToFile, ), {, outputFileNames, .]
[., isEmpty, (, ), ;, List, <, String, >, outputFileNames, =, Lists, ., newArrayList, (, ), ;, if, (, writeOutputToFile]
[., jsOutputFile, ., isEmpty, (, ), ;, List, <, String, >, outputFileNames, =, Lists, ., newArrayList, (, ), ;, if]
[;, if, (, writeOutputToFile, ), {, outputFileNames, ., add, (, config, ., jsOutputFile, ), ;, jsOutput, =, fileNameToLegacyOutputWriter, (, config]
[., newArrayList, (, ), ;, if, (, writeOutputToFile, ), {, outputFileNames, ., add, (, config, ., jsOutputFile, ), ;, jsOutput]
[), {, outputFileNames, ., add, (, config, ., jsOutputFile, ), ;, jsOutput, =, fileNameToLegacyOutputWriter, (, config, ., jsOutputFile, ), ;]
[;, jsOutput, =, fileNameToLegacyOutputWriter, (, config, ., jsOutputFile, ), ;, }, else, if, (, jsOutput, instanceof, OutputStream, ), {, jsOutput]
[., add, (, config, ., jsOutputFile, ), ;, jsOutput, =, fileNameToLegacyOutputWriter, (, config, ., jsOutputFile, ), ;, }, else, if]
[), ;, jsOutput, =, fileNameToLegacyOutputWriter, (, config, ., jsOutputFile, ), ;, }, else, if, (, jsOutput, instanceof, OutputStream, ), {]
[., jsOutputFile, ), ;, jsOutput, =, fileNameToLegacyOutputWriter, (, config, ., jsOutputFile, ), ;, }, else, if, (, jsOutput, instanceof, OutputStream]
[=, fileNameToLegacyOutputWriter, (, config, ., jsOutputFile, ), ;, }, else, if, (, jsOutput, instanceof, OutputStream, ), {, jsOutput, =, streamToLegacyOutputWriter]
[;, }, else, if, (, jsOutput, instanceof, OutputStream, ), {, jsOutput, =, streamToLegacyOutputWriter, (, (, OutputStream, ), jsOutput, ), ;]
[), ;, }, else, if, (, jsOutput, instanceof, OutputStream, ), {, jsOutput, =, streamToLegacyOutputWriter, (, (, OutputStream, ), jsOutput, )]
[., jsOutputFile, ), ;, }, else, if, (, jsOutput, instanceof, OutputStream, ), {, jsOutput, =, streamToLegacyOutputWriter, (, (, OutputStream, )]
[), {, jsOutput, =, streamToLegacyOutputWriter, (, (, OutputStream, ), jsOutput, ), ;, }, List, <, String, >, jsFiles, =, config]
[instanceof, OutputStream, ), {, jsOutput, =, streamToLegacyOutputWriter, (, (, OutputStream, ), jsOutput, ), ;, }, List, <, String, >, jsFiles]
[=, streamToLegacyOutputWriter, (, (, OutputStream, ), jsOutput, ), ;, }, List, <, String, >, jsFiles, =, config, ., js, ;]
[;, }, List, <, String, >, jsFiles, =, config, ., js, ;, List, <, String, >, moduleSpecs, =, config, .]
[), ;, }, List, <, String, >, jsFiles, =, config, ., js, ;, List, <, String, >, moduleSpecs, =, config]
[), ;, }, List, <, String, >, jsFiles, =, config, ., js, ;, List, <, String, >, moduleSpecs, =, config]
[;, List, <, String, >, moduleSpecs, =, config, ., module, ;, boolean, createCommonJsModules, =, false, ;, if, (, options, .]
[., js, ;, List, <, String, >, moduleSpecs, =, config, ., module, ;, boolean, createCommonJsModules, =, false, ;, if, (]
[;, boolean, createCommonJsModules, =, false, ;, if, (, options, ., processCommonJSModules, ), {, if, (, moduleSpecs, ., size, (, )]
[., module, ;, boolean, createCommonJsModules, =, false, ;, if, (, options, ., processCommonJSModules, ), {, if, (, moduleSpecs, ., size]
[;, if, (, options, ., processCommonJSModules, ), {, if, (, moduleSpecs, ., size, (, ), ==, 1, &&, "auto", .]
[), {, if, (, moduleSpecs, ., size, (, ), ==, 1, &&, "auto", ., equals, (, moduleSpecs, ., get, (]
[., processCommonJSModules, ), {, if, (, moduleSpecs, ., size, (, ), ==, 1, &&, "auto", ., equals, (, moduleSpecs, .]
[), {, createCommonJsModules, =, true, ;, moduleSpecs, ., remove, (, 0, ), ;, }, }, if, (, !, moduleSpecs, .]
[&&, "auto", ., equals, (, moduleSpecs, ., get, (, 0, ), ), ), {, createCommonJsModules, =, true, ;, moduleSpecs, .]
[==, 1, &&, "auto", ., equals, (, moduleSpecs, ., get, (, 0, ), ), ), {, createCommonJsModules, =, true, ;]
[., size, (, ), ==, 1, &&, "auto", ., equals, (, moduleSpecs, ., get, (, 0, ), ), ), {]
[&&, "auto", ., equals, (, moduleSpecs, ., get, (, 0, ), ), ), {, createCommonJsModules, =, true, ;, moduleSpecs, .]
[), {, createCommonJsModules, =, true, ;, moduleSpecs, ., remove, (, 0, ), ;, }, }, if, (, !, moduleSpecs, .]
[., equals, (, moduleSpecs, ., get, (, 0, ), ), ), {, createCommonJsModules, =, true, ;, moduleSpecs, ., remove, (]
[), ), {, createCommonJsModules, =, true, ;, moduleSpecs, ., remove, (, 0, ), ;, }, }, if, (, !, moduleSpecs]
[., get, (, 0, ), ), ), {, createCommonJsModules, =, true, ;, moduleSpecs, ., remove, (, 0, ), ;, }]
[), ), ), {, createCommonJsModules, =, true, ;, moduleSpecs, ., remove, (, 0, ), ;, }, }, if, (, !]
[=, true, ;, moduleSpecs, ., remove, (, 0, ), ;, }, }, if, (, !, moduleSpecs, ., isEmpty, (, )]
[;, moduleSpecs, ., remove, (, 0, ), ;, }, }, if, (, !, moduleSpecs, ., isEmpty, (, ), ), {]
[;, }, }, if, (, !, moduleSpecs, ., isEmpty, (, ), ), {, modules, =, createJsModules, (, moduleSpecs, ,, jsFiles]
[., remove, (, 0, ), ;, }, }, if, (, !, moduleSpecs, ., isEmpty, (, ), ), {, modules, =]
[), ;, }, }, if, (, !, moduleSpecs, ., isEmpty, (, ), ), {, modules, =, createJsModules, (, moduleSpecs, ,]
[), {, modules, =, createJsModules, (, moduleSpecs, ,, jsFiles, ), ;, for, (, JSModule, m, :, modules, ), {, outputFileNames]
[), {, modules, =, createJsModules, (, moduleSpecs, ,, jsFiles, ), ;, for, (, JSModule, m, :, modules, ), {, outputFileNames]
[., isEmpty, (, ), ), {, modules, =, createJsModules, (, moduleSpecs, ,, jsFiles, ), ;, for, (, JSModule, m, :]
[=, createJsModules, (, moduleSpecs, ,, jsFiles, ), ;, for, (, JSModule, m, :, modules, ), {, outputFileNames, ., add, (]
[;, for, (, JSModule, m, :, modules, ), {, outputFileNames, ., add, (, getModuleOutputFileName, (, m, ), ), ;, }]
[,, jsFiles, ), ;, for, (, JSModule, m, :, modules, ), {, outputFileNames, ., add, (, getModuleOutputFileName, (, m, )]
[), ;, for, (, JSModule, m, :, modules, ), {, outputFileNames, ., add, (, getModuleOutputFileName, (, m, ), ), ;]
[), {, outputFileNames, ., add, (, getModuleOutputFileName, (, m, ), ), ;, }, if, (, config, ., skipNormalOutputs, ), {]
[;, }, if, (, config, ., skipNormalOutputs, ), {, compiler, ., initModules, (, externs, ,, modules, ,, options, ), ;]
[., add, (, getModuleOutputFileName, (, m, ), ), ;, }, if, (, config, ., skipNormalOutputs, ), {, compiler, ., initModules]
[), ;, }, if, (, config, ., skipNormalOutputs, ), {, compiler, ., initModules, (, externs, ,, modules, ,, options, )]
[), ), ;, }, if, (, config, ., skipNormalOutputs, ), {, compiler, ., initModules, (, externs, ,, modules, ,, options]
[), {, compiler, ., initModules, (, externs, ,, modules, ,, options, ), ;, }, else, {, result, =, compiler, .]
[., skipNormalOutputs, ), {, compiler, ., initModules, (, externs, ,, modules, ,, options, ), ;, }, else, {, result, =]
[;, }, else, {, result, =, compiler, ., compileModules, (, externs, ,, modules, ,, options, ), ;, }, }, else]
[., initModules, (, externs, ,, modules, ,, options, ), ;, }, else, {, result, =, compiler, ., compileModules, (, externs]
[,, modules, ,, options, ), ;, }, else, {, result, =, compiler, ., compileModules, (, externs, ,, modules, ,, options]
[,, options, ), ;, }, else, {, result, =, compiler, ., compileModules, (, externs, ,, modules, ,, options, ), ;]
[), ;, }, else, {, result, =, compiler, ., compileModules, (, externs, ,, modules, ,, options, ), ;, }, }]
[=, compiler, ., compileModules, (, externs, ,, modules, ,, options, ), ;, }, }, else, {, List, <, SourceFile, >]
[;, }, }, else, {, List, <, SourceFile, >, inputs, =, createSourceInputs, (, jsFiles, ), ;, if, (, config, .]
[., compileModules, (, externs, ,, modules, ,, options, ), ;, }, }, else, {, List, <, SourceFile, >, inputs, =]
[,, modules, ,, options, ), ;, }, }, else, {, List, <, SourceFile, >, inputs, =, createSourceInputs, (, jsFiles, )]
[,, options, ), ;, }, }, else, {, List, <, SourceFile, >, inputs, =, createSourceInputs, (, jsFiles, ), ;, if]
[), ;, }, }, else, {, List, <, SourceFile, >, inputs, =, createSourceInputs, (, jsFiles, ), ;, if, (, config]
[;, if, (, config, ., skipNormalOutputs, ), {, compiler, ., init, (, externs, ,, inputs, ,, options, ), ;, }]
[), ;, if, (, config, ., skipNormalOutputs, ), {, compiler, ., init, (, externs, ,, inputs, ,, options, ), ;]
[), {, compiler, ., init, (, externs, ,, inputs, ,, options, ), ;, }, else, {, result, =, compiler, .]
[., skipNormalOutputs, ), {, compiler, ., init, (, externs, ,, inputs, ,, options, ), ;, }, else, {, result, =]
[;, }, else, {, result, =, compiler, ., compile, (, externs, ,, inputs, ,, options, ), ;, }, }, if]
[., init, (, externs, ,, inputs, ,, options, ), ;, }, else, {, result, =, compiler, ., compile, (, externs]
[,, inputs, ,, options, ), ;, }, else, {, result, =, compiler, ., compile, (, externs, ,, inputs, ,, options]
[,, options, ), ;, }, else, {, result, =, compiler, ., compile, (, externs, ,, inputs, ,, options, ), ;]
[), ;, }, else, {, result, =, compiler, ., compile, (, externs, ,, inputs, ,, options, ), ;, }, }]
[=, compiler, ., compile, (, externs, ,, inputs, ,, options, ), ;, }, }, if, (, createCommonJsModules, ), {, modules]
[;, }, }, if, (, createCommonJsModules, ), {, modules, =, Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), .]
[., compile, (, externs, ,, inputs, ,, options, ), ;, }, }, if, (, createCommonJsModules, ), {, modules, =, Lists]
[,, inputs, ,, options, ), ;, }, }, if, (, createCommonJsModules, ), {, modules, =, Lists, ., newArrayList, (, compiler]
[,, options, ), ;, }, }, if, (, createCommonJsModules, ), {, modules, =, Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph]
[), ;, }, }, if, (, createCommonJsModules, ), {, modules, =, Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, )]
[), {, modules, =, Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), ;, for]
[=, Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), ;, for, (, JSModule, m]
[;, for, (, JSModule, m, :, modules, ), {, outputFileNames, ., add, (, getModuleOutputFileName, (, m, ), ), ;, }]
[., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), ;, for, (, JSModule, m, :, modules]
[), ;, for, (, JSModule, m, :, modules, ), {, outputFileNames, ., add, (, getModuleOutputFileName, (, m, ), ), ;]
[., getAllModules, (, ), ), ;, for, (, JSModule, m, :, modules, ), {, outputFileNames, ., add, (, getModuleOutputFileName, (]
[., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), ;, for, (, JSModule, m, :, modules, ), {, outputFileNames, .]
[), {, outputFileNames, ., add, (, getModuleOutputFileName, (, m, ), ), ;, }, }, for, (, String, outputFileName, :, outputFileNames]
[;, }, }, for, (, String, outputFileName, :, outputFileNames, ), {, if, (, compiler, ., getSourceFileByName, (, outputFileName, ), !=]
[., add, (, getModuleOutputFileName, (, m, ), ), ;, }, }, for, (, String, outputFileName, :, outputFileNames, ), {, if]
[), ;, }, }, for, (, String, outputFileName, :, outputFileNames, ), {, if, (, compiler, ., getSourceFileByName, (, outputFileName, )]
[), ), ;, }, }, for, (, String, outputFileName, :, outputFileNames, ), {, if, (, compiler, ., getSourceFileByName, (, outputFileName]
[), {, if, (, compiler, ., getSourceFileByName, (, outputFileName, ), !=, null, ), {, compiler, ., report, (, JSError, .]
[), {, compiler, ., report, (, JSError, ., make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName, ), ), ;, return, 1, ;, }]
[!=, null, ), {, compiler, ., report, (, JSError, ., make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName, ), ), ;, return, 1]
[., getSourceFileByName, (, outputFileName, ), !=, null, ), {, compiler, ., report, (, JSError, ., make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName]
[), !=, null, ), {, compiler, ., report, (, JSError, ., make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName, ), ), ;, return]
[), {, compiler, ., report, (, JSError, ., make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName, ), ), ;, return, 1, ;, }]
[;, return, 1, ;, }, }, int, errCode, =, processResults, (, result, ,, modules, ,, options, ), ;, if, (]
[., report, (, JSError, ., make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName, ), ), ;, return, 1, ;, }, }, int, errCode]
[), ;, return, 1, ;, }, }, int, errCode, =, processResults, (, result, ,, modules, ,, options, ), ;, if]
[., make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName, ), ), ;, return, 1, ;, }, }, int, errCode, =, processResults, (, result]
[,, outputFileName, ), ), ;, return, 1, ;, }, }, int, errCode, =, processResults, (, result, ,, modules, ,, options]
[), ), ;, return, 1, ;, }, }, int, errCode, =, processResults, (, result, ,, modules, ,, options, ), ;]
[;, }, }, int, errCode, =, processResults, (, result, ,, modules, ,, options, ), ;, if, (, jsOutput, instanceof, Flushable]
[;, if, (, jsOutput, instanceof, Flushable, ), {, (, (, Flushable, ), jsOutput, ), ., flush, (, ), ;, }]
[,, modules, ,, options, ), ;, if, (, jsOutput, instanceof, Flushable, ), {, (, (, Flushable, ), jsOutput, ), .]
[,, options, ), ;, if, (, jsOutput, instanceof, Flushable, ), {, (, (, Flushable, ), jsOutput, ), ., flush, (]
[), ;, if, (, jsOutput, instanceof, Flushable, ), {, (, (, Flushable, ), jsOutput, ), ., flush, (, ), ;]
[), {, (, (, Flushable, ), jsOutput, ), ., flush, (, ), ;, }, return, errCode, ;, }, int, processResults]
[instanceof, Flushable, ), {, (, (, Flushable, ), jsOutput, ), ., flush, (, ), ;, }, return, errCode, ;, }]
[;, }, return, errCode, ;, }, int, processResults, (, Result, result, ,, List, <, JSModule, >, modules, ,, B, options]
[., flush, (, ), ;, }, return, errCode, ;, }, int, processResults, (, Result, result, ,, List, <, JSModule, >]
[), ., flush, (, ), ;, }, return, errCode, ;, }, int, processResults, (, Result, result, ,, List, <, JSModule]
[), ., flush, (, ), ;, }, return, errCode, ;, }, int, processResults, (, Result, result, ,, List, <, JSModule]
[;, }, int, processResults, (, Result, result, ,, List, <, JSModule, >, modules, ,, B, options, ), throws, FlagUsageException, ,]
[), {, return, 0, ;, }, if, (, config, ., printPassGraph, ), {, if, (, compiler, ., getRoot, (, )]
[., computePhaseOrdering, ), {, return, 0, ;, }, if, (, config, ., printPassGraph, ), {, if, (, compiler, ., getRoot]
[;, }, if, (, config, ., printPassGraph, ), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {]
[), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {, return, 1, ;, }, else, {, jsOutput]
[., printPassGraph, ), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {, return, 1, ;, }, else]
[), {, return, 1, ;, }, else, {, jsOutput, ., append, (, DotFormatter, ., toDot, (, compiler, ., getPassConfig, (]
[==, null, ), {, return, 1, ;, }, else, {, jsOutput, ., append, (, DotFormatter, ., toDot, (, compiler, .]
[., getRoot, (, ), ==, null, ), {, return, 1, ;, }, else, {, jsOutput, ., append, (, DotFormatter, .]
[), {, return, 1, ;, }, else, {, jsOutput, ., append, (, DotFormatter, ., toDot, (, compiler, ., getPassConfig, (]
[;, }, else, {, jsOutput, ., append, (, DotFormatter, ., toDot, (, compiler, ., getPassConfig, (, ), ., getPassGraph, (]
[;, jsOutput, ., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, ., printAst, ), {]
[., append, (, DotFormatter, ., toDot, (, compiler, ., getPassConfig, (, ), ., getPassGraph, (, ), ), ), ;, jsOutput]
[), ;, jsOutput, ., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, ., printAst, )]
[., toDot, (, compiler, ., getPassConfig, (, ), ., getPassGraph, (, ), ), ), ;, jsOutput, ., append, (, '\n']
[), ), ;, jsOutput, ., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, ., printAst]
[., getPassGraph, (, ), ), ), ;, jsOutput, ., append, (, '\n', ), ;, return, 0, ;, }, }, if]
[., getPassConfig, (, ), ., getPassGraph, (, ), ), ), ;, jsOutput, ., append, (, '\n', ), ;, return, 0]
[;, return, 0, ;, }, }, if, (, config, ., printAst, ), {, if, (, compiler, ., getRoot, (, )]
[., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, ., printAst, ), {, if, (]
[), ;, return, 0, ;, }, }, if, (, config, ., printAst, ), {, if, (, compiler, ., getRoot, (]
[;, }, }, if, (, config, ., printAst, ), {, if, (, compiler, ., getRoot, (, ), ==, null, )]
[), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {, return, 1, ;, }, else, {, ControlFlowGraph]
[., printAst, ), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {, return, 1, ;, }, else]
[), {, return, 1, ;, }, else, {, ControlFlowGraph, <, Node, >, cfg, =, compiler, ., computeCFG, (, ), ;]
[==, null, ), {, return, 1, ;, }, else, {, ControlFlowGraph, <, Node, >, cfg, =, compiler, ., computeCFG, (]
[., getRoot, (, ), ==, null, ), {, return, 1, ;, }, else, {, ControlFlowGraph, <, Node, >, cfg, =]
[), {, return, 1, ;, }, else, {, ControlFlowGraph, <, Node, >, cfg, =, compiler, ., computeCFG, (, ), ;]
[;, }, else, {, ControlFlowGraph, <, Node, >, cfg, =, compiler, ., computeCFG, (, ), ;, DotFormatter, ., appendDot, (]
[;, DotFormatter, ., appendDot, (, compiler, ., getRoot, (, ), ., getLastChild, (, ), ,, cfg, ,, jsOutput, ), ;]
[., computeCFG, (, ), ;, DotFormatter, ., appendDot, (, compiler, ., getRoot, (, ), ., getLastChild, (, ), ,, cfg]
[;, jsOutput, ., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, ., printTree, ), {]
[., appendDot, (, compiler, ., getRoot, (, ), ., getLastChild, (, ), ,, cfg, ,, jsOutput, ), ;, jsOutput, .]
[,, cfg, ,, jsOutput, ), ;, jsOutput, ., append, (, '\n', ), ;, return, 0, ;, }, }, if, (]
[., getLastChild, (, ), ,, cfg, ,, jsOutput, ), ;, jsOutput, ., append, (, '\n', ), ;, return, 0, ;]
[., getRoot, (, ), ., getLastChild, (, ), ,, cfg, ,, jsOutput, ), ;, jsOutput, ., append, (, '\n', )]
[,, jsOutput, ), ;, jsOutput, ., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, .]
[), ;, jsOutput, ., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, ., printTree, )]
[;, return, 0, ;, }, }, if, (, config, ., printTree, ), {, if, (, compiler, ., getRoot, (, )]
[., append, (, '\n', ), ;, return, 0, ;, }, }, if, (, config, ., printTree, ), {, if, (]
[), ;, return, 0, ;, }, }, if, (, config, ., printTree, ), {, if, (, compiler, ., getRoot, (]
[;, }, }, if, (, config, ., printTree, ), {, if, (, compiler, ., getRoot, (, ), ==, null, )]
[), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {, jsOutput, ., append, (, "Code contains errors; no tree was generated.\n", ), ;]
[., printTree, ), {, if, (, compiler, ., getRoot, (, ), ==, null, ), {, jsOutput, ., append, (, "Code contains errors; no tree was generated.\n"]
[), {, jsOutput, ., append, (, "Code contains errors; no tree was generated.\n", ), ;, return, 1, ;, }, else, {, compiler, ., getRoot, (, )]
[==, null, ), {, jsOutput, ., append, (, "Code contains errors; no tree was generated.\n", ), ;, return, 1, ;, }, else, {, compiler, ., getRoot]
[., getRoot, (, ), ==, null, ), {, jsOutput, ., append, (, "Code contains errors; no tree was generated.\n", ), ;, return, 1, ;, }, else]
[), {, jsOutput, ., append, (, "Code contains errors; no tree was generated.\n", ), ;, return, 1, ;, }, else, {, compiler, ., getRoot, (, )]
[;, return, 1, ;, }, else, {, compiler, ., getRoot, (, ), ., appendStringTree, (, jsOutput, ), ;, jsOutput, .]
[., append, (, "Code contains errors; no tree was generated.\n", ), ;, return, 1, ;, }, else, {, compiler, ., getRoot, (, ), ., appendStringTree, (]
[), ;, return, 1, ;, }, else, {, compiler, ., getRoot, (, ), ., appendStringTree, (, jsOutput, ), ;, jsOutput]
[;, }, else, {, compiler, ., getRoot, (, ), ., appendStringTree, (, jsOutput, ), ;, jsOutput, ., append, (, "\n"]
[;, jsOutput, ., append, (, "\n", ), ;, return, 0, ;, }, }, rootRelativePathsMap, =, constructRootRelativePathsMap, (, ), ;, if]
[., appendStringTree, (, jsOutput, ), ;, jsOutput, ., append, (, "\n", ), ;, return, 0, ;, }, }, rootRelativePathsMap, =]
[., getRoot, (, ), ., appendStringTree, (, jsOutput, ), ;, jsOutput, ., append, (, "\n", ), ;, return, 0, ;]
[), ;, jsOutput, ., append, (, "\n", ), ;, return, 0, ;, }, }, rootRelativePathsMap, =, constructRootRelativePathsMap, (, ), ;]
[;, return, 0, ;, }, }, rootRelativePathsMap, =, constructRootRelativePathsMap, (, ), ;, if, (, config, ., skipNormalOutputs, ), {, outputManifest]
[., append, (, "\n", ), ;, return, 0, ;, }, }, rootRelativePathsMap, =, constructRootRelativePathsMap, (, ), ;, if, (, config]
[), ;, return, 0, ;, }, }, rootRelativePathsMap, =, constructRootRelativePathsMap, (, ), ;, if, (, config, ., skipNormalOutputs, ), {]
[;, }, }, rootRelativePathsMap, =, constructRootRelativePathsMap, (, ), ;, if, (, config, ., skipNormalOutputs, ), {, outputManifest, (, ), ;]
[=, constructRootRelativePathsMap, (, ), ;, if, (, config, ., skipNormalOutputs, ), {, outputManifest, (, ), ;, outputBundle, (, ), ;]
[;, if, (, config, ., skipNormalOutputs, ), {, outputManifest, (, ), ;, outputBundle, (, ), ;, outputModuleGraphJson, (, ), ;]
[), {, outputManifest, (, ), ;, outputBundle, (, ), ;, outputModuleGraphJson, (, ), ;, return, 0, ;, }, else, if]
[., skipNormalOutputs, ), {, outputManifest, (, ), ;, outputBundle, (, ), ;, outputModuleGraphJson, (, ), ;, return, 0, ;, }]
[;, outputBundle, (, ), ;, outputModuleGraphJson, (, ), ;, return, 0, ;, }, else, if, (, result, ., success, )]
[;, outputModuleGraphJson, (, ), ;, return, 0, ;, }, else, if, (, result, ., success, ), {, outputModuleGraphJson, (, )]
[;, return, 0, ;, }, else, if, (, result, ., success, ), {, outputModuleGraphJson, (, ), ;, if, (, modules]
[;, }, else, if, (, result, ., success, ), {, outputModuleGraphJson, (, ), ;, if, (, modules, ==, null, )]
[), {, outputModuleGraphJson, (, ), ;, if, (, modules, ==, null, ), {, outputSingleBinary, (, ), ;, outputSourceMap, (, options]
[., success, ), {, outputModuleGraphJson, (, ), ;, if, (, modules, ==, null, ), {, outputSingleBinary, (, ), ;, outputSourceMap]
[;, if, (, modules, ==, null, ), {, outputSingleBinary, (, ), ;, outputSourceMap, (, options, ,, config, ., jsOutputFile, )]
[), {, outputSingleBinary, (, ), ;, outputSourceMap, (, options, ,, config, ., jsOutputFile, ), ;, }, else, {, outputModuleBinaryAndSourceMaps, (]
[==, null, ), {, outputSingleBinary, (, ), ;, outputSourceMap, (, options, ,, config, ., jsOutputFile, ), ;, }, else, {]
[), {, outputSingleBinary, (, ), ;, outputSourceMap, (, options, ,, config, ., jsOutputFile, ), ;, }, else, {, outputModuleBinaryAndSourceMaps, (]
[;, outputSourceMap, (, options, ,, config, ., jsOutputFile, ), ;, }, else, {, outputModuleBinaryAndSourceMaps, (, modules, ,, options, ), ;]
[;, }, else, {, outputModuleBinaryAndSourceMaps, (, modules, ,, options, ), ;, }, if, (, options, ., externExportsPath, !=, null, )]
[,, config, ., jsOutputFile, ), ;, }, else, {, outputModuleBinaryAndSourceMaps, (, modules, ,, options, ), ;, }, if, (, options]
[), ;, }, else, {, outputModuleBinaryAndSourceMaps, (, modules, ,, options, ), ;, }, if, (, options, ., externExportsPath, !=, null]
[., jsOutputFile, ), ;, }, else, {, outputModuleBinaryAndSourceMaps, (, modules, ,, options, ), ;, }, if, (, options, ., externExportsPath]
[;, }, if, (, options, ., externExportsPath, !=, null, ), {, Writer, eeOut, =, openExternExportsStream, (, options, ,, config, .]
[,, options, ), ;, }, if, (, options, ., externExportsPath, !=, null, ), {, Writer, eeOut, =, openExternExportsStream, (, options]
[), ;, }, if, (, options, ., externExportsPath, !=, null, ), {, Writer, eeOut, =, openExternExportsStream, (, options, ,, config]
[), {, Writer, eeOut, =, openExternExportsStream, (, options, ,, config, ., jsOutputFile, ), ;, eeOut, ., append, (, result, .]
[!=, null, ), {, Writer, eeOut, =, openExternExportsStream, (, options, ,, config, ., jsOutputFile, ), ;, eeOut, ., append, (]
[., externExportsPath, !=, null, ), {, Writer, eeOut, =, openExternExportsStream, (, options, ,, config, ., jsOutputFile, ), ;, eeOut, .]
[), {, Writer, eeOut, =, openExternExportsStream, (, options, ,, config, ., jsOutputFile, ), ;, eeOut, ., append, (, result, .]
[;, eeOut, ., append, (, result, ., externExport, ), ;, eeOut, ., close, (, ), ;, }, outputNameMaps, (, options]
[,, config, ., jsOutputFile, ), ;, eeOut, ., append, (, result, ., externExport, ), ;, eeOut, ., close, (, )]
[), ;, eeOut, ., append, (, result, ., externExport, ), ;, eeOut, ., close, (, ), ;, }, outputNameMaps, (]
[., jsOutputFile, ), ;, eeOut, ., append, (, result, ., externExport, ), ;, eeOut, ., close, (, ), ;, }]
[;, eeOut, ., close, (, ), ;, }, outputNameMaps, (, options, ), ;, outputManifest, (, ), ;, outputBundle, (, )]
[., append, (, result, ., externExport, ), ;, eeOut, ., close, (, ), ;, }, outputNameMaps, (, options, ), ;]
[), ;, eeOut, ., close, (, ), ;, }, outputNameMaps, (, options, ), ;, outputManifest, (, ), ;, outputBundle, (]
[., externExport, ), ;, eeOut, ., close, (, ), ;, }, outputNameMaps, (, options, ), ;, outputManifest, (, ), ;]
[;, }, outputNameMaps, (, options, ), ;, outputManifest, (, ), ;, outputBundle, (, ), ;, }, return, Math, ., min]
[., close, (, ), ;, }, outputNameMaps, (, options, ), ;, outputManifest, (, ), ;, outputBundle, (, ), ;, }]
[;, outputManifest, (, ), ;, outputBundle, (, ), ;, }, return, Math, ., min, (, result, ., errors, ., length]
[), ;, outputManifest, (, ), ;, outputBundle, (, ), ;, }, return, Math, ., min, (, result, ., errors, .]
[;, outputBundle, (, ), ;, }, return, Math, ., min, (, result, ., errors, ., length, ,, 0x7f, ), ;]
[;, }, return, Math, ., min, (, result, ., errors, ., length, ,, 0x7f, ), ;, }, Function, <, String]
[;, }, Function, <, String, ,, String, >, getJavascriptEscaper, (, ), {, throw, new, UnsupportedOperationException, (, "SourceCodeEscapers is not in the standard release of Guava yet :(", ), ;, }]
[., min, (, result, ., errors, ., length, ,, 0x7f, ), ;, }, Function, <, String, ,, String, >, getJavascriptEscaper]
[,, 0x7f, ), ;, }, Function, <, String, ,, String, >, getJavascriptEscaper, (, ), {, throw, new, UnsupportedOperationException, (, "SourceCodeEscapers is not in the standard release of Guava yet :("]
[., length, ,, 0x7f, ), ;, }, Function, <, String, ,, String, >, getJavascriptEscaper, (, ), {, throw, new, UnsupportedOperationException]
[., errors, ., length, ,, 0x7f, ), ;, }, Function, <, String, ,, String, >, getJavascriptEscaper, (, ), {, throw]
[), ;, }, Function, <, String, ,, String, >, getJavascriptEscaper, (, ), {, throw, new, UnsupportedOperationException, (, "SourceCodeEscapers is not in the standard release of Guava yet :(", ), ;]
[;, }, void, outputSingleBinary, (, ), throws, IOException, {, Function, <, String, ,, String, >, escaper, =, null, ;, String]
[), ;, }, void, outputSingleBinary, (, ), throws, IOException, {, Function, <, String, ,, String, >, escaper, =, null, ;]
[;, String, marker, =, OUTPUT_MARKER, ;, if, (, config, ., outputWrapper, ., contains, (, OUTPUT_MARKER_JS_STRING, ), ), {, marker, =]
[;, if, (, config, ., outputWrapper, ., contains, (, OUTPUT_MARKER_JS_STRING, ), ), {, marker, =, OUTPUT_MARKER_JS_STRING, ;, escaper, =, getJavascriptEscaper]
[), {, marker, =, OUTPUT_MARKER_JS_STRING, ;, escaper, =, getJavascriptEscaper, (, ), ;, }, writeOutput, (, jsOutput, ,, compiler, ,, compiler]
[., contains, (, OUTPUT_MARKER_JS_STRING, ), ), {, marker, =, OUTPUT_MARKER_JS_STRING, ;, escaper, =, getJavascriptEscaper, (, ), ;, }, writeOutput, (]
[., outputWrapper, ., contains, (, OUTPUT_MARKER_JS_STRING, ), ), {, marker, =, OUTPUT_MARKER_JS_STRING, ;, escaper, =, getJavascriptEscaper, (, ), ;, }]
[), ), {, marker, =, OUTPUT_MARKER_JS_STRING, ;, escaper, =, getJavascriptEscaper, (, ), ;, }, writeOutput, (, jsOutput, ,, compiler, ,]
[=, OUTPUT_MARKER_JS_STRING, ;, escaper, =, getJavascriptEscaper, (, ), ;, }, writeOutput, (, jsOutput, ,, compiler, ,, compiler, ., toSource, (]
[;, escaper, =, getJavascriptEscaper, (, ), ;, }, writeOutput, (, jsOutput, ,, compiler, ,, compiler, ., toSource, (, ), ,]
[=, getJavascriptEscaper, (, ), ;, }, writeOutput, (, jsOutput, ,, compiler, ,, compiler, ., toSource, (, ), ,, config, .]
[;, }, writeOutput, (, jsOutput, ,, compiler, ,, compiler, ., toSource, (, ), ,, config, ., outputWrapper, ,, marker, ,]
[;, }, private, void, outputModuleBinaryAndSourceMaps, (, List, <, JSModule, >, modules, ,, B, options, ), throws, FlagUsageException, ,, IOException, {]
[,, compiler, ,, compiler, ., toSource, (, ), ,, config, ., outputWrapper, ,, marker, ,, escaper, ), ;, }, private]
[,, compiler, ., toSource, (, ), ,, config, ., outputWrapper, ,, marker, ,, escaper, ), ;, }, private, void, outputModuleBinaryAndSourceMaps]
[,, config, ., outputWrapper, ,, marker, ,, escaper, ), ;, }, private, void, outputModuleBinaryAndSourceMaps, (, List, <, JSModule, >, modules]
[., toSource, (, ), ,, config, ., outputWrapper, ,, marker, ,, escaper, ), ;, }, private, void, outputModuleBinaryAndSourceMaps, (, List]
[,, marker, ,, escaper, ), ;, }, private, void, outputModuleBinaryAndSourceMaps, (, List, <, JSModule, >, modules, ,, B, options, )]
[., outputWrapper, ,, marker, ,, escaper, ), ;, }, private, void, outputModuleBinaryAndSourceMaps, (, List, <, JSModule, >, modules, ,, B]
[,, escaper, ), ;, }, private, void, outputModuleBinaryAndSourceMaps, (, List, <, JSModule, >, modules, ,, B, options, ), throws, FlagUsageException]
[), ;, }, private, void, outputModuleBinaryAndSourceMaps, (, List, <, JSModule, >, modules, ,, B, options, ), throws, FlagUsageException, ,, IOException]
[=, parseModuleWrappers, (, config, ., moduleWrapper, ,, modules, ), ;, maybeCreateDirsForPath, (, config, ., moduleOutputPathPrefix, ), ;, Writer, mapOut, =]
[;, maybeCreateDirsForPath, (, config, ., moduleOutputPathPrefix, ), ;, Writer, mapOut, =, null, ;, if, (, !, shouldGenerateMapPerModule, (, options, )]
[,, modules, ), ;, maybeCreateDirsForPath, (, config, ., moduleOutputPathPrefix, ), ;, Writer, mapOut, =, null, ;, if, (, !, shouldGenerateMapPerModule]
[., moduleWrapper, ,, modules, ), ;, maybeCreateDirsForPath, (, config, ., moduleOutputPathPrefix, ), ;, Writer, mapOut, =, null, ;, if, (]
[), ;, maybeCreateDirsForPath, (, config, ., moduleOutputPathPrefix, ), ;, Writer, mapOut, =, null, ;, if, (, !, shouldGenerateMapPerModule, (, options]
[;, Writer, mapOut, =, null, ;, if, (, !, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath]
[), ;, Writer, mapOut, =, null, ;, if, (, !, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =, fileNameToOutputWriter2, (]
[., moduleOutputPathPrefix, ), ;, Writer, mapOut, =, null, ;, if, (, !, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =]
[;, if, (, !, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, null, )]
[), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, null, ), ), ;, }, for, (, JSModule, m, :]
[), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, null, ), ), ;, }, for, (, JSModule, m, :]
[), ), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, null, ), ), ;, }, for, (, JSModule, m]
[=, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, null, ), ), ;, }, for, (, JSModule, m, :, modules, ), {]
[;, }, for, (, JSModule, m, :, modules, ), {, if, (, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =]
[), ;, }, for, (, JSModule, m, :, modules, ), {, if, (, shouldGenerateMapPerModule, (, options, ), ), {, mapOut]
[,, null, ), ), ;, }, for, (, JSModule, m, :, modules, ), {, if, (, shouldGenerateMapPerModule, (, options, )]
[), ), ;, }, for, (, JSModule, m, :, modules, ), {, if, (, shouldGenerateMapPerModule, (, options, ), ), {]
[), {, if, (, shouldGenerateMapPerModule, (, options, ), ), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, m, )]
[), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, m, ), ), ;, }, Writer, writer, =, fileNameToLegacyOutputWriter, (]
[), ), {, mapOut, =, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, m, ), ), ;, }, Writer, writer, =, fileNameToLegacyOutputWriter]
[=, fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, m, ), ), ;, }, Writer, writer, =, fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (, m]
[;, }, Writer, writer, =, fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (, m, ), ), ;, if, (, options, ., sourceMapOutputPath, !=, null]
[), ;, }, Writer, writer, =, fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (, m, ), ), ;, if, (, options, ., sourceMapOutputPath, !=]
[,, m, ), ), ;, }, Writer, writer, =, fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (, m, ), ), ;, if, (, options]
[), ), ;, }, Writer, writer, =, fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (, m, ), ), ;, if, (, options, ., sourceMapOutputPath]
[;, if, (, options, ., sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., reset, (, ), ;]
[), ;, if, (, options, ., sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., reset, (, )]
[), ), ;, if, (, options, ., sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., reset, (]
[), {, compiler, ., getSourceMap, (, ), ., reset, (, ), ;, }, writeModuleOutput, (, writer, ,, m, ), ;]
[!=, null, ), {, compiler, ., getSourceMap, (, ), ., reset, (, ), ;, }, writeModuleOutput, (, writer, ,, m]
[., sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., reset, (, ), ;, }, writeModuleOutput, (, writer]
[), {, compiler, ., getSourceMap, (, ), ., reset, (, ), ;, }, writeModuleOutput, (, writer, ,, m, ), ;]
[;, }, writeModuleOutput, (, writer, ,, m, ), ;, if, (, options, ., sourceMapOutputPath, !=, null, ), {, compiler, .]
[., reset, (, ), ;, }, writeModuleOutput, (, writer, ,, m, ), ;, if, (, options, ., sourceMapOutputPath, !=, null]
[., getSourceMap, (, ), ., reset, (, ), ;, }, writeModuleOutput, (, writer, ,, m, ), ;, if, (, options]
[;, if, (, options, ., sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., appendTo, (, mapOut, ,]
[,, m, ), ;, if, (, options, ., sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., appendTo]
[), ;, if, (, options, ., sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., appendTo, (, mapOut]
[), {, compiler, ., getSourceMap, (, ), ., appendTo, (, mapOut, ,, m, ., getName, (, ), ), ;, }]
[!=, null, ), {, compiler, ., getSourceMap, (, ), ., appendTo, (, mapOut, ,, m, ., getName, (, ), )]
[., sourceMapOutputPath, !=, null, ), {, compiler, ., getSourceMap, (, ), ., appendTo, (, mapOut, ,, m, ., getName, (]
[), {, compiler, ., getSourceMap, (, ), ., appendTo, (, mapOut, ,, m, ., getName, (, ), ), ;, }]
[;, }, writer, ., close, (, ), ;, if, (, shouldGenerateMapPerModule, (, options, ), &&, mapOut, !=, null, ), {]
[., appendTo, (, mapOut, ,, m, ., getName, (, ), ), ;, }, writer, ., close, (, ), ;, if]
[., getSourceMap, (, ), ., appendTo, (, mapOut, ,, m, ., getName, (, ), ), ;, }, writer, ., close]
[,, m, ., getName, (, ), ), ;, }, writer, ., close, (, ), ;, if, (, shouldGenerateMapPerModule, (, options]
[), ;, }, writer, ., close, (, ), ;, if, (, shouldGenerateMapPerModule, (, options, ), &&, mapOut, !=, null, )]
[., getName, (, ), ), ;, }, writer, ., close, (, ), ;, if, (, shouldGenerateMapPerModule, (, options, ), &&]
[;, if, (, shouldGenerateMapPerModule, (, options, ), &&, mapOut, !=, null, ), {, mapOut, ., close, (, ), ;, mapOut]
[., close, (, ), ;, if, (, shouldGenerateMapPerModule, (, options, ), &&, mapOut, !=, null, ), {, mapOut, ., close]
[), {, mapOut, ., close, (, ), ;, mapOut, =, null, ;, }, }, if, (, mapOut, !=, null, )]
[&&, mapOut, !=, null, ), {, mapOut, ., close, (, ), ;, mapOut, =, null, ;, }, }, if, (]
[), &&, mapOut, !=, null, ), {, mapOut, ., close, (, ), ;, mapOut, =, null, ;, }, }, if]
[), {, mapOut, ., close, (, ), ;, mapOut, =, null, ;, }, }, if, (, mapOut, !=, null, )]
[!=, null, ), {, mapOut, ., close, (, ), ;, mapOut, =, null, ;, }, }, if, (, mapOut, !=]
[), {, mapOut, ., close, (, ), ;, mapOut, =, null, ;, }, }, if, (, mapOut, !=, null, )]
[;, mapOut, =, null, ;, }, }, if, (, mapOut, !=, null, ), {, mapOut, ., close, (, ), ;]
[., close, (, ), ;, mapOut, =, null, ;, }, }, if, (, mapOut, !=, null, ), {, mapOut, .]
[=, null, ;, }, }, if, (, mapOut, !=, null, ), {, mapOut, ., close, (, ), ;, }, }]
[;, }, }, if, (, mapOut, !=, null, ), {, mapOut, ., close, (, ), ;, }, }, private, Charset]
[), {, mapOut, ., close, (, ), ;, }, }, private, Charset, getInputCharset, (, ), throws, FlagUsageException, {, if, (]
[!=, null, ), {, mapOut, ., close, (, ), ;, }, }, private, Charset, getInputCharset, (, ), throws, FlagUsageException, {]
[), {, mapOut, ., close, (, ), ;, }, }, private, Charset, getInputCharset, (, ), throws, FlagUsageException, {, if, (]
[;, }, }, private, Charset, getInputCharset, (, ), throws, FlagUsageException, {, if, (, !, config, ., charset, ., isEmpty, (]
[., close, (, ), ;, }, }, private, Charset, getInputCharset, (, ), throws, FlagUsageException, {, if, (, !, config, .]
[), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config]
[), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config]
[., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw]
[., charset, ., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), )]
[), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (, config]
[), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (, config]
[., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;]
[), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (]
[., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, .]
[;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return, Charsets, ., UTF_8, ;, }, private]
[), ;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return, Charsets, ., UTF_8, ;, }]
[+, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return, Charsets, ., UTF_8]
[., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return, Charsets]
[), ;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return, Charsets, ., UTF_8, ;, }]
[;, }, return, Charsets, ., UTF_8, ;, }, private, String, getLegacyOutputCharset, (, ), throws, FlagUsageException, {, if, (, !, config]
[., forName, (, config, ., charset, ), ;, }, return, Charsets, ., UTF_8, ;, }, private, String, getLegacyOutputCharset, (, )]
[), ;, }, return, Charsets, ., UTF_8, ;, }, private, String, getLegacyOutputCharset, (, ), throws, FlagUsageException, {, if, (, !]
[., charset, ), ;, }, return, Charsets, ., UTF_8, ;, }, private, String, getLegacyOutputCharset, (, ), throws, FlagUsageException, {, if]
[;, }, private, String, getLegacyOutputCharset, (, ), throws, FlagUsageException, {, if, (, !, config, ., charset, ., isEmpty, (, )]
[., UTF_8, ;, }, private, String, getLegacyOutputCharset, (, ), throws, FlagUsageException, {, if, (, !, config, ., charset, ., isEmpty]
[), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config]
[), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config]
[., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw]
[., charset, ., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), )]
[), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, config, ., charset, ;, }]
[), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, config, ., charset, ;, }]
[., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;]
[), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, config, ., charset, ;]
[., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, config, .]
[;, }, return, config, ., charset, ;, }, return, "US-ASCII", ;, }, private, Charset, getOutputCharset2, (, ), throws, FlagUsageException, {]
[), ;, }, return, config, ., charset, ;, }, return, "US-ASCII", ;, }, private, Charset, getOutputCharset2, (, ), throws, FlagUsageException]
[+, " is not a valid charset name.", ), ;, }, return, config, ., charset, ;, }, return, "US-ASCII", ;, }, private, Charset, getOutputCharset2, (, )]
[., charset, +, " is not a valid charset name.", ), ;, }, return, config, ., charset, ;, }, return, "US-ASCII", ;, }, private, Charset, getOutputCharset2]
[), ;, }, return, config, ., charset, ;, }, return, "US-ASCII", ;, }, private, Charset, getOutputCharset2, (, ), throws, FlagUsageException]
[;, }, return, "US-ASCII", ;, }, private, Charset, getOutputCharset2, (, ), throws, FlagUsageException, {, if, (, !, config, ., charset]
[., charset, ;, }, return, "US-ASCII", ;, }, private, Charset, getOutputCharset2, (, ), throws, FlagUsageException, {, if, (, !, config]
[;, }, private, Charset, getOutputCharset2, (, ), throws, FlagUsageException, {, if, (, !, config, ., charset, ., isEmpty, (, )]
[), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config]
[), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config]
[., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), ), {, throw]
[., charset, ., isEmpty, (, ), ), {, if, (, !, Charset, ., isSupported, (, config, ., charset, ), )]
[), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (, config]
[), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (, config]
[., isSupported, (, config, ., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;]
[), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (]
[., charset, ), ), {, throw, new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, .]
[;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return, Charsets, ., UTF_8, ;, }, protected]
[), ;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return, Charsets, ., UTF_8, ;, }]
[+, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return, Charsets, ., UTF_8]
[., charset, +, " is not a valid charset name.", ), ;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return, Charsets]
[), ;, }, return, Charset, ., forName, (, config, ., charset, ), ;, }, return, Charsets, ., UTF_8, ;, }]
[;, }, return, Charsets, ., UTF_8, ;, }, protected, List, <, SourceFile, >, createExterns, (, ), throws, FlagUsageException, ,, IOException]
[., forName, (, config, ., charset, ), ;, }, return, Charsets, ., UTF_8, ;, }, protected, List, <, SourceFile, >]
[), ;, }, return, Charsets, ., UTF_8, ;, }, protected, List, <, SourceFile, >, createExterns, (, ), throws, FlagUsageException, ,]
[., charset, ), ;, }, return, Charsets, ., UTF_8, ;, }, protected, List, <, SourceFile, >, createExterns, (, ), throws]
[;, }, protected, List, <, SourceFile, >, createExterns, (, ), throws, FlagUsageException, ,, IOException, {, return, isInTestMode, (, ), ?]
[., UTF_8, ;, }, protected, List, <, SourceFile, >, createExterns, (, ), throws, FlagUsageException, ,, IOException, {, return, isInTestMode, (]
[;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, ), {, return, options, ., sourceMapOutputPath, !=, null, &&, options, ., sourceMapOutputPath]
[?, externsSupplierForTesting, ., get, (, ), :, createExternInputs, (, config, ., externs, ), ;, }, private, boolean, shouldGenerateMapPerModule, (, B]
[:, createExternInputs, (, config, ., externs, ), ;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, ), {, return, options, .]
[., get, (, ), :, createExternInputs, (, config, ., externs, ), ;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, )]
[;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, ), {, return, options, ., sourceMapOutputPath, !=, null, &&, options, ., sourceMapOutputPath]
[), ;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, ), {, return, options, ., sourceMapOutputPath, !=, null, &&, options, .]
[., externs, ), ;, }, private, boolean, shouldGenerateMapPerModule, (, B, options, ), {, return, options, ., sourceMapOutputPath, !=, null, &&]
[;, }, private, Writer, openExternExportsStream, (, B, options, ,, String, path, ), throws, IOException, {, if, (, options, ., externExportsPath]
[&&, options, ., sourceMapOutputPath, ., contains, (, "%outname%", ), ;, }, private, Writer, openExternExportsStream, (, B, options, ,, String, path]
[!=, null, &&, options, ., sourceMapOutputPath, ., contains, (, "%outname%", ), ;, }, private, Writer, openExternExportsStream, (, B, options, ,]
[., sourceMapOutputPath, !=, null, &&, options, ., sourceMapOutputPath, ., contains, (, "%outname%", ), ;, }, private, Writer, openExternExportsStream, (, B]
[&&, options, ., sourceMapOutputPath, ., contains, (, "%outname%", ), ;, }, private, Writer, openExternExportsStream, (, B, options, ,, String, path]
[;, }, private, Writer, openExternExportsStream, (, B, options, ,, String, path, ), throws, IOException, {, if, (, options, ., externExportsPath]
[., contains, (, "%outname%", ), ;, }, private, Writer, openExternExportsStream, (, B, options, ,, String, path, ), throws, IOException, {]
[., sourceMapOutputPath, ., contains, (, "%outname%", ), ;, }, private, Writer, openExternExportsStream, (, B, options, ,, String, path, ), throws]
[), ;, }, private, Writer, openExternExportsStream, (, B, options, ,, String, path, ), throws, IOException, {, if, (, options, .]
[), {, return, null, ;, }, String, exPath, =, options, ., externExportsPath, ;, if, (, !, exPath, ., contains, (]
[==, null, ), {, return, null, ;, }, String, exPath, =, options, ., externExportsPath, ;, if, (, !, exPath, .]
[., externExportsPath, ==, null, ), {, return, null, ;, }, String, exPath, =, options, ., externExportsPath, ;, if, (, !]
[), {, return, null, ;, }, String, exPath, =, options, ., externExportsPath, ;, if, (, !, exPath, ., contains, (]
[;, }, String, exPath, =, options, ., externExportsPath, ;, if, (, !, exPath, ., contains, (, File, ., separator, )]
[;, if, (, !, exPath, ., contains, (, File, ., separator, ), ), {, File, outputFile, =, new, File, (]
[., externExportsPath, ;, if, (, !, exPath, ., contains, (, File, ., separator, ), ), {, File, outputFile, =, new]
[), {, File, outputFile, =, new, File, (, path, ), ;, exPath, =, outputFile, ., getParent, (, ), +, File]
[), {, File, outputFile, =, new, File, (, path, ), ;, exPath, =, outputFile, ., getParent, (, ), +, File]
[., contains, (, File, ., separator, ), ), {, File, outputFile, =, new, File, (, path, ), ;, exPath, =]
[), ), {, File, outputFile, =, new, File, (, path, ), ;, exPath, =, outputFile, ., getParent, (, ), +]
[., separator, ), ), {, File, outputFile, =, new, File, (, path, ), ;, exPath, =, outputFile, ., getParent, (]
[;, exPath, =, outputFile, ., getParent, (, ), +, File, ., separatorChar, +, exPath, ;, }, return, fileNameToOutputWriter2, (, exPath]
[), ;, exPath, =, outputFile, ., getParent, (, ), +, File, ., separatorChar, +, exPath, ;, }, return, fileNameToOutputWriter2, (]
[=, outputFile, ., getParent, (, ), +, File, ., separatorChar, +, exPath, ;, }, return, fileNameToOutputWriter2, (, exPath, ), ;]
[;, }, return, fileNameToOutputWriter2, (, exPath, ), ;, }, private, String, expandCommandLinePath, (, String, path, ,, JSModule, forModule, ), {]
[+, exPath, ;, }, return, fileNameToOutputWriter2, (, exPath, ), ;, }, private, String, expandCommandLinePath, (, String, path, ,, JSModule, forModule]
[+, File, ., separatorChar, +, exPath, ;, }, return, fileNameToOutputWriter2, (, exPath, ), ;, }, private, String, expandCommandLinePath, (, String]
[., getParent, (, ), +, File, ., separatorChar, +, exPath, ;, }, return, fileNameToOutputWriter2, (, exPath, ), ;, }, private]
[+, exPath, ;, }, return, fileNameToOutputWriter2, (, exPath, ), ;, }, private, String, expandCommandLinePath, (, String, path, ,, JSModule, forModule]
[., separatorChar, +, exPath, ;, }, return, fileNameToOutputWriter2, (, exPath, ), ;, }, private, String, expandCommandLinePath, (, String, path, ,]
[;, }, return, fileNameToOutputWriter2, (, exPath, ), ;, }, private, String, expandCommandLinePath, (, String, path, ,, JSModule, forModule, ), {]
[;, }, private, String, expandCommandLinePath, (, String, path, ,, JSModule, forModule, ), {, String, sub, ;, if, (, forModule, !=]
[), ;, }, private, String, expandCommandLinePath, (, String, path, ,, JSModule, forModule, ), {, String, sub, ;, if, (, forModule]
[), {, sub, =, config, ., moduleOutputPathPrefix, +, forModule, ., getName, (, ), +, ".js", ;, }, else, if, (]
[!=, null, ), {, sub, =, config, ., moduleOutputPathPrefix, +, forModule, ., getName, (, ), +, ".js", ;, }, else]
[), {, sub, =, config, ., moduleOutputPathPrefix, +, forModule, ., getName, (, ), +, ".js", ;, }, else, if, (]
[=, config, ., moduleOutputPathPrefix, +, forModule, ., getName, (, ), +, ".js", ;, }, else, if, (, !, config, .]
[;, }, else, if, (, !, config, ., module, ., isEmpty, (, ), ), {, sub, =, config, ., moduleOutputPathPrefix]
[+, ".js", ;, }, else, if, (, !, config, ., module, ., isEmpty, (, ), ), {, sub, =, config]
[+, forModule, ., getName, (, ), +, ".js", ;, }, else, if, (, !, config, ., module, ., isEmpty, (]
[., moduleOutputPathPrefix, +, forModule, ., getName, (, ), +, ".js", ;, }, else, if, (, !, config, ., module, .]
[+, ".js", ;, }, else, if, (, !, config, ., module, ., isEmpty, (, ), ), {, sub, =, config]
[., getName, (, ), +, ".js", ;, }, else, if, (, !, config, ., module, ., isEmpty, (, ), )]
[;, }, else, if, (, !, config, ., module, ., isEmpty, (, ), ), {, sub, =, config, ., moduleOutputPathPrefix]
[), {, sub, =, config, ., moduleOutputPathPrefix, ;, }, else, {, sub, =, config, ., jsOutputFile, ;, }, return, path]
[), {, sub, =, config, ., moduleOutputPathPrefix, ;, }, else, {, sub, =, config, ., jsOutputFile, ;, }, return, path]
[., isEmpty, (, ), ), {, sub, =, config, ., moduleOutputPathPrefix, ;, }, else, {, sub, =, config, ., jsOutputFile]
[., module, ., isEmpty, (, ), ), {, sub, =, config, ., moduleOutputPathPrefix, ;, }, else, {, sub, =, config]
[=, config, ., moduleOutputPathPrefix, ;, }, else, {, sub, =, config, ., jsOutputFile, ;, }, return, path, ., replace, (]
[;, }, else, {, sub, =, config, ., jsOutputFile, ;, }, return, path, ., replace, (, "%outname%", ,, sub, )]
[., moduleOutputPathPrefix, ;, }, else, {, sub, =, config, ., jsOutputFile, ;, }, return, path, ., replace, (, "%outname%", ,]
[=, config, ., jsOutputFile, ;, }, return, path, ., replace, (, "%outname%", ,, sub, ), ;, }, @, VisibleForTesting, String]
[;, }, return, path, ., replace, (, "%outname%", ,, sub, ), ;, }, @, VisibleForTesting, String, expandSourceMapPath, (, B, options]
[., jsOutputFile, ;, }, return, path, ., replace, (, "%outname%", ,, sub, ), ;, }, @, VisibleForTesting, String, expandSourceMapPath, (]
[;, }, @, VisibleForTesting, String, expandSourceMapPath, (, B, options, ,, JSModule, forModule, ), {, if, (, Strings, ., isNullOrEmpty, (]
[., replace, (, "%outname%", ,, sub, ), ;, }, @, VisibleForTesting, String, expandSourceMapPath, (, B, options, ,, JSModule, forModule, )]
[,, sub, ), ;, }, @, VisibleForTesting, String, expandSourceMapPath, (, B, options, ,, JSModule, forModule, ), {, if, (, Strings]
[), ;, }, @, VisibleForTesting, String, expandSourceMapPath, (, B, options, ,, JSModule, forModule, ), {, if, (, Strings, ., isNullOrEmpty]
[), {, return, null, ;, }, return, expandCommandLinePath, (, options, ., sourceMapOutputPath, ,, forModule, ), ;, }, private, Writer, fileNameToLegacyOutputWriter]
[., isNullOrEmpty, (, options, ., sourceMapOutputPath, ), ), {, return, null, ;, }, return, expandCommandLinePath, (, options, ., sourceMapOutputPath, ,]
[), ), {, return, null, ;, }, return, expandCommandLinePath, (, options, ., sourceMapOutputPath, ,, forModule, ), ;, }, private, Writer]
[., sourceMapOutputPath, ), ), {, return, null, ;, }, return, expandCommandLinePath, (, options, ., sourceMapOutputPath, ,, forModule, ), ;, }]
[;, }, return, expandCommandLinePath, (, options, ., sourceMapOutputPath, ,, forModule, ), ;, }, private, Writer, fileNameToLegacyOutputWriter, (, String, fileName, )]
[;, }, private, Writer, fileNameToLegacyOutputWriter, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, ), {, return]
[,, forModule, ), ;, }, private, Writer, fileNameToLegacyOutputWriter, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null]
[., sourceMapOutputPath, ,, forModule, ), ;, }, private, Writer, fileNameToLegacyOutputWriter, (, String, fileName, ), throws, IOException, {, if, (, fileName]
[), ;, }, private, Writer, fileNameToLegacyOutputWriter, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, ), {]
[), {, return, null, ;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }, return, streamToLegacyOutputWriter]
[==, null, ), {, return, null, ;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }]
[), {, return, null, ;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }, return, streamToLegacyOutputWriter]
[;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }, return, streamToLegacyOutputWriter, (, filenameToOutputStream, (, fileName]
[), {, return, new, StringWriter, (, ), ;, }, return, streamToLegacyOutputWriter, (, filenameToOutputStream, (, fileName, ), ), ;, }, private]
[;, }, return, streamToLegacyOutputWriter, (, filenameToOutputStream, (, fileName, ), ), ;, }, private, Writer, fileNameToOutputWriter2, (, String, fileName, ), throws]
[;, }, private, Writer, fileNameToOutputWriter2, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, ), {, return]
[), ;, }, private, Writer, fileNameToOutputWriter2, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, ), {]
[), ), ;, }, private, Writer, fileNameToOutputWriter2, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, )]
[), {, return, null, ;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }, return, streamToOutputWriter2]
[==, null, ), {, return, null, ;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }]
[), {, return, null, ;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }, return, streamToOutputWriter2]
[;, }, if, (, testMode, ), {, return, new, StringWriter, (, ), ;, }, return, streamToOutputWriter2, (, filenameToOutputStream, (, fileName]
[), {, return, new, StringWriter, (, ), ;, }, return, streamToOutputWriter2, (, filenameToOutputStream, (, fileName, ), ), ;, }, protected]
[;, }, return, streamToOutputWriter2, (, filenameToOutputStream, (, fileName, ), ), ;, }, protected, OutputStream, filenameToOutputStream, (, String, fileName, ), throws]
[;, }, protected, OutputStream, filenameToOutputStream, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, ), {, return]
[), ;, }, protected, OutputStream, filenameToOutputStream, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, ), {]
[), ), ;, }, protected, OutputStream, filenameToOutputStream, (, String, fileName, ), throws, IOException, {, if, (, fileName, ==, null, )]
[), {, return, null, ;, }, return, new, FileOutputStream, (, fileName, ), ;, }, private, Writer, streamToLegacyOutputWriter, (, OutputStream, stream]
[==, null, ), {, return, null, ;, }, return, new, FileOutputStream, (, fileName, ), ;, }, private, Writer, streamToLegacyOutputWriter, (]
[), {, return, null, ;, }, return, new, FileOutputStream, (, fileName, ), ;, }, private, Writer, streamToLegacyOutputWriter, (, OutputStream, stream]
[;, }, return, new, FileOutputStream, (, fileName, ), ;, }, private, Writer, streamToLegacyOutputWriter, (, OutputStream, stream, ), throws, IOException, {]
[;, }, private, Writer, streamToLegacyOutputWriter, (, OutputStream, stream, ), throws, IOException, {, if, (, legacyOutputCharset, ==, null, ), {, return]
[), ;, }, private, Writer, streamToLegacyOutputWriter, (, OutputStream, stream, ), throws, IOException, {, if, (, legacyOutputCharset, ==, null, ), {]
[), {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return, new, BufferedWriter, (]
[==, null, ), {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return, new]
[), {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return, new, BufferedWriter, (]
[;, }, else, {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ,, legacyOutputCharset, ), ), ;, }, }, private]
[), ;, }, else, {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ,, legacyOutputCharset, ), ), ;, }, }]
[), ), ;, }, else, {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ,, legacyOutputCharset, ), ), ;, }]
[;, }, }, private, Writer, streamToOutputWriter2, (, OutputStream, stream, ), {, if, (, outputCharset2, ==, null, ), {, return, new]
[), ;, }, }, private, Writer, streamToOutputWriter2, (, OutputStream, stream, ), {, if, (, outputCharset2, ==, null, ), {, return]
[,, legacyOutputCharset, ), ), ;, }, }, private, Writer, streamToOutputWriter2, (, OutputStream, stream, ), {, if, (, outputCharset2, ==, null]
[), ), ;, }, }, private, Writer, streamToOutputWriter2, (, OutputStream, stream, ), {, if, (, outputCharset2, ==, null, ), {]
[), {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return, new, BufferedWriter, (]
[==, null, ), {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return, new]
[), {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), ), ;, }, else, {, return, new, BufferedWriter, (]
[;, }, else, {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ,, outputCharset2, ), ), ;, }, }, private]
[), ;, }, else, {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ,, outputCharset2, ), ), ;, }, }]
[), ), ;, }, else, {, return, new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ,, outputCharset2, ), ), ;, }]
[;, }, }, private, void, outputSourceMap, (, B, options, ,, String, associatedName, ), throws, IOException, {, if, (, Strings, .]
[), ;, }, }, private, void, outputSourceMap, (, B, options, ,, String, associatedName, ), throws, IOException, {, if, (, Strings]
[,, outputCharset2, ), ), ;, }, }, private, void, outputSourceMap, (, B, options, ,, String, associatedName, ), throws, IOException, {]
[), ), ;, }, }, private, void, outputSourceMap, (, B, options, ,, String, associatedName, ), throws, IOException, {, if, (]
[), {, return, ;, }, String, outName, =, expandSourceMapPath, (, options, ,, null, ), ;, Writer, out, =, fileNameToOutputWriter2, (]
[., isNullOrEmpty, (, options, ., sourceMapOutputPath, ), ), {, return, ;, }, String, outName, =, expandSourceMapPath, (, options, ,, null]
[), ), {, return, ;, }, String, outName, =, expandSourceMapPath, (, options, ,, null, ), ;, Writer, out, =, fileNameToOutputWriter2]
[., sourceMapOutputPath, ), ), {, return, ;, }, String, outName, =, expandSourceMapPath, (, options, ,, null, ), ;, Writer, out]
[;, Writer, out, =, fileNameToOutputWriter2, (, outName, ), ;, compiler, ., getSourceMap, (, ), ., appendTo, (, out, ,, associatedName]
[,, null, ), ;, Writer, out, =, fileNameToOutputWriter2, (, outName, ), ;, compiler, ., getSourceMap, (, ), ., appendTo, (]
[), ;, Writer, out, =, fileNameToOutputWriter2, (, outName, ), ;, compiler, ., getSourceMap, (, ), ., appendTo, (, out, ,]
[;, compiler, ., getSourceMap, (, ), ., appendTo, (, out, ,, associatedName, ), ;, out, ., close, (, ), ;]
[), ;, compiler, ., getSourceMap, (, ), ., appendTo, (, out, ,, associatedName, ), ;, out, ., close, (, )]
[;, out, ., close, (, ), ;, }, private, String, getMapPath, (, String, outputFile, ), {, String, basePath, =, ""]
[., appendTo, (, out, ,, associatedName, ), ;, out, ., close, (, ), ;, }, private, String, getMapPath, (, String]
[., getSourceMap, (, ), ., appendTo, (, out, ,, associatedName, ), ;, out, ., close, (, ), ;, }, private]
[,, associatedName, ), ;, out, ., close, (, ), ;, }, private, String, getMapPath, (, String, outputFile, ), {, String]
[), ;, out, ., close, (, ), ;, }, private, String, getMapPath, (, String, outputFile, ), {, String, basePath, =]
[;, }, private, String, getMapPath, (, String, outputFile, ), {, String, basePath, =, "", ;, if, (, outputFile, ., equals]
[., close, (, ), ;, }, private, String, getMapPath, (, String, outputFile, ), {, String, basePath, =, "", ;, if]
[;, if, (, outputFile, ., equals, (, "", ), ), {, if, (, !, config, ., moduleOutputPathPrefix, ., equals, (]
[), {, if, (, !, config, ., moduleOutputPathPrefix, ., equals, (, "", ), ), {, basePath, =, config, ., moduleOutputPathPrefix]
[., equals, (, "", ), ), {, if, (, !, config, ., moduleOutputPathPrefix, ., equals, (, "", ), ), {]
[), ), {, if, (, !, config, ., moduleOutputPathPrefix, ., equals, (, "", ), ), {, basePath, =, config, .]
[), {, basePath, =, config, ., moduleOutputPathPrefix, ;, }, else, {, basePath, =, "jscompiler", ;, }, }, else, {, File]
[), {, basePath, =, config, ., moduleOutputPathPrefix, ;, }, else, {, basePath, =, "jscompiler", ;, }, }, else, {, File]
[., equals, (, "", ), ), {, basePath, =, config, ., moduleOutputPathPrefix, ;, }, else, {, basePath, =, "jscompiler", ;]
[., moduleOutputPathPrefix, ., equals, (, "", ), ), {, basePath, =, config, ., moduleOutputPathPrefix, ;, }, else, {, basePath, =]
[), ), {, basePath, =, config, ., moduleOutputPathPrefix, ;, }, else, {, basePath, =, "jscompiler", ;, }, }, else, {]
[=, config, ., moduleOutputPathPrefix, ;, }, else, {, basePath, =, "jscompiler", ;, }, }, else, {, File, file, =, new]
[;, }, else, {, basePath, =, "jscompiler", ;, }, }, else, {, File, file, =, new, File, (, outputFile, )]
[., moduleOutputPathPrefix, ;, }, else, {, basePath, =, "jscompiler", ;, }, }, else, {, File, file, =, new, File, (]
[=, "jscompiler", ;, }, }, else, {, File, file, =, new, File, (, outputFile, ), ;, String, outputFileName, =, file]
[;, }, }, else, {, File, file, =, new, File, (, outputFile, ), ;, String, outputFileName, =, file, ., getName]
[;, String, outputFileName, =, file, ., getName, (, ), ;, if, (, outputFileName, ., endsWith, (, ".js", ), ), {]
[), ;, String, outputFileName, =, file, ., getName, (, ), ;, if, (, outputFileName, ., endsWith, (, ".js", ), )]
[;, if, (, outputFileName, ., endsWith, (, ".js", ), ), {, outputFileName, =, outputFileName, ., substring, (, 0, ,, outputFileName]
[., getName, (, ), ;, if, (, outputFileName, ., endsWith, (, ".js", ), ), {, outputFileName, =, outputFileName, ., substring]
[), {, outputFileName, =, outputFileName, ., substring, (, 0, ,, outputFileName, ., length, (, ), -, 3, ), ;, }]
[., endsWith, (, ".js", ), ), {, outputFileName, =, outputFileName, ., substring, (, 0, ,, outputFileName, ., length, (, )]
[), ), {, outputFileName, =, outputFileName, ., substring, (, 0, ,, outputFileName, ., length, (, ), -, 3, ), ;]
[=, outputFileName, ., substring, (, 0, ,, outputFileName, ., length, (, ), -, 3, ), ;, }, basePath, =, file]
[;, }, basePath, =, file, ., getParent, (, ), +, File, ., separatorChar, +, outputFileName, ;, }, return, basePath, ;]
[., substring, (, 0, ,, outputFileName, ., length, (, ), -, 3, ), ;, }, basePath, =, file, ., getParent]
[,, outputFileName, ., length, (, ), -, 3, ), ;, }, basePath, =, file, ., getParent, (, ), +, File]
[), ;, }, basePath, =, file, ., getParent, (, ), +, File, ., separatorChar, +, outputFileName, ;, }, return, basePath]
[-, 3, ), ;, }, basePath, =, file, ., getParent, (, ), +, File, ., separatorChar, +, outputFileName, ;, }]
[., length, (, ), -, 3, ), ;, }, basePath, =, file, ., getParent, (, ), +, File, ., separatorChar]
[), ;, }, basePath, =, file, ., getParent, (, ), +, File, ., separatorChar, +, outputFileName, ;, }, return, basePath]
[=, file, ., getParent, (, ), +, File, ., separatorChar, +, outputFileName, ;, }, return, basePath, ;, }, private, void]
[;, }, return, basePath, ;, }, private, void, outputNameMaps, (, B, options, ), throws, FlagUsageException, ,, IOException, {, String, propertyMapOutputPath]
[+, outputFileName, ;, }, return, basePath, ;, }, private, void, outputNameMaps, (, B, options, ), throws, FlagUsageException, ,, IOException, {]
[+, File, ., separatorChar, +, outputFileName, ;, }, return, basePath, ;, }, private, void, outputNameMaps, (, B, options, ), throws]
[., getParent, (, ), +, File, ., separatorChar, +, outputFileName, ;, }, return, basePath, ;, }, private, void, outputNameMaps, (]
[+, outputFileName, ;, }, return, basePath, ;, }, private, void, outputNameMaps, (, B, options, ), throws, FlagUsageException, ,, IOException, {]
[., separatorChar, +, outputFileName, ;, }, return, basePath, ;, }, private, void, outputNameMaps, (, B, options, ), throws, FlagUsageException, ,]
[;, }, return, basePath, ;, }, private, void, outputNameMaps, (, B, options, ), throws, FlagUsageException, ,, IOException, {, String, propertyMapOutputPath]
[;, }, private, void, outputNameMaps, (, B, options, ), throws, FlagUsageException, ,, IOException, {, String, propertyMapOutputPath, =, null, ;, String]
[;, String, variableMapOutputPath, =, null, ;, String, functionInformationMapOutputPath, =, null, ;, if, (, config, ., createNameMapFiles, ), {, String, basePath]
[;, String, functionInformationMapOutputPath, =, null, ;, if, (, config, ., createNameMapFiles, ), {, String, basePath, =, getMapPath, (, config, .]
[;, if, (, config, ., createNameMapFiles, ), {, String, basePath, =, getMapPath, (, config, ., jsOutputFile, ), ;, propertyMapOutputPath, =]
[), {, String, basePath, =, getMapPath, (, config, ., jsOutputFile, ), ;, propertyMapOutputPath, =, basePath, +, "_props_map.out", ;, variableMapOutputPath, =]
[., createNameMapFiles, ), {, String, basePath, =, getMapPath, (, config, ., jsOutputFile, ), ;, propertyMapOutputPath, =, basePath, +, "_props_map.out", ;]
[;, propertyMapOutputPath, =, basePath, +, "_props_map.out", ;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }]
[), ;, propertyMapOutputPath, =, basePath, +, "_props_map.out", ;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;]
[., jsOutputFile, ), ;, propertyMapOutputPath, =, basePath, +, "_props_map.out", ;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +]
[=, basePath, +, "_props_map.out", ;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }, if, (]
[;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }, if, (, !, config, ., variableMapOutputFile]
[+, "_props_map.out", ;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }, if, (, !, config]
[;, variableMapOutputPath, =, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }, if, (, !, config, ., variableMapOutputFile]
[=, basePath, +, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }, if, (, !, config, ., variableMapOutputFile, ., equals]
[;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }, if, (, !, config, ., variableMapOutputFile, ., equals, (, "", ), )]
[+, "_vars_map.out", ;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }, if, (, !, config, ., variableMapOutputFile, ., equals, (, ""]
[;, functionInformationMapOutputPath, =, basePath, +, "_functions_map.out", ;, }, if, (, !, config, ., variableMapOutputFile, ., equals, (, "", ), )]
[=, basePath, +, "_functions_map.out", ;, }, if, (, !, config, ., variableMapOutputFile, ., equals, (, "", ), ), {, if]
[;, }, if, (, !, config, ., variableMapOutputFile, ., equals, (, "", ), ), {, if, (, variableMapOutputPath, !=, null]
[+, "_functions_map.out", ;, }, if, (, !, config, ., variableMapOutputFile, ., equals, (, "", ), ), {, if, (, variableMapOutputPath]
[;, }, if, (, !, config, ., variableMapOutputFile, ., equals, (, "", ), ), {, if, (, variableMapOutputPath, !=, null]
[), {, if, (, variableMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, variableMapOutputPath]
[), {, if, (, variableMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, variableMapOutputPath]
[., equals, (, "", ), ), {, if, (, variableMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +]
[., variableMapOutputFile, ., equals, (, "", ), ), {, if, (, variableMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (]
[), ), {, if, (, variableMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }]
[), {, throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, variableMapOutputPath, =, config, ., variableMapOutputFile, ;, }, if]
[!=, null, ), {, throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, variableMapOutputPath, =, config, ., variableMapOutputFile, ;]
[), {, throw, new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, variableMapOutputPath, =, config, ., variableMapOutputFile, ;, }, if]
[;, }, variableMapOutputPath, =, config, ., variableMapOutputFile, ;, }, if, (, !, config, ., propertyMapOutputFile, ., equals, (, "", )]
[), ;, }, variableMapOutputPath, =, config, ., variableMapOutputFile, ;, }, if, (, !, config, ., propertyMapOutputFile, ., equals, (, ""]
[+, "create_name_map_files cannot both be used simultaniously.", ), ;, }, variableMapOutputPath, =, config, ., variableMapOutputFile, ;, }, if, (, !, config, ., propertyMapOutputFile, ., equals]
[), ;, }, variableMapOutputPath, =, config, ., variableMapOutputFile, ;, }, if, (, !, config, ., propertyMapOutputFile, ., equals, (, ""]
[=, config, ., variableMapOutputFile, ;, }, if, (, !, config, ., propertyMapOutputFile, ., equals, (, "", ), ), {, if]
[;, }, if, (, !, config, ., propertyMapOutputFile, ., equals, (, "", ), ), {, if, (, propertyMapOutputPath, !=, null]
[., variableMapOutputFile, ;, }, if, (, !, config, ., propertyMapOutputFile, ., equals, (, "", ), ), {, if, (, propertyMapOutputPath]
[), {, if, (, propertyMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath]
[), {, if, (, propertyMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath]
[., equals, (, "", ), ), {, if, (, propertyMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags property_map_output_file and ", +]
[., propertyMapOutputFile, ., equals, (, "", ), ), {, if, (, propertyMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (]
[), ), {, if, (, propertyMapOutputPath, !=, null, ), {, throw, new, FlagUsageException, (, "The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }]
[), {, throw, new, FlagUsageException, (, "The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath, =, config, ., propertyMapOutputFile, ;, }, if]
[!=, null, ), {, throw, new, FlagUsageException, (, "The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath, =, config, ., propertyMapOutputFile, ;]
[), {, throw, new, FlagUsageException, (, "The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath, =, config, ., propertyMapOutputFile, ;, }, if]
[;, }, propertyMapOutputPath, =, config, ., propertyMapOutputFile, ;, }, if, (, variableMapOutputPath, !=, null, ), {, if, (, compiler, .]
[), ;, }, propertyMapOutputPath, =, config, ., propertyMapOutputFile, ;, }, if, (, variableMapOutputPath, !=, null, ), {, if, (, compiler]
[+, "create_name_map_files cannot both be used simultaniously.", ), ;, }, propertyMapOutputPath, =, config, ., propertyMapOutputFile, ;, }, if, (, variableMapOutputPath, !=, null, ), {, if]
[), ;, }, propertyMapOutputPath, =, config, ., propertyMapOutputFile, ;, }, if, (, variableMapOutputPath, !=, null, ), {, if, (, compiler]
[=, config, ., propertyMapOutputFile, ;, }, if, (, variableMapOutputPath, !=, null, ), {, if, (, compiler, ., getVariableMap, (, )]
[;, }, if, (, variableMapOutputPath, !=, null, ), {, if, (, compiler, ., getVariableMap, (, ), !=, null, ), {]
[., propertyMapOutputFile, ;, }, if, (, variableMapOutputPath, !=, null, ), {, if, (, compiler, ., getVariableMap, (, ), !=, null]
[), {, if, (, compiler, ., getVariableMap, (, ), !=, null, ), {, compiler, ., getVariableMap, (, ), ., save]
[!=, null, ), {, if, (, compiler, ., getVariableMap, (, ), !=, null, ), {, compiler, ., getVariableMap, (, )]
[), {, if, (, compiler, ., getVariableMap, (, ), !=, null, ), {, compiler, ., getVariableMap, (, ), ., save]
[), {, compiler, ., getVariableMap, (, ), ., save, (, variableMapOutputPath, ), ;, }, }, if, (, propertyMapOutputPath, !=, null]
[!=, null, ), {, compiler, ., getVariableMap, (, ), ., save, (, variableMapOutputPath, ), ;, }, }, if, (, propertyMapOutputPath]
[., getVariableMap, (, ), !=, null, ), {, compiler, ., getVariableMap, (, ), ., save, (, variableMapOutputPath, ), ;, }]
[), {, compiler, ., getVariableMap, (, ), ., save, (, variableMapOutputPath, ), ;, }, }, if, (, propertyMapOutputPath, !=, null]
[;, }, }, if, (, propertyMapOutputPath, !=, null, ), {, if, (, compiler, ., getPropertyMap, (, ), !=, null, )]
[., save, (, variableMapOutputPath, ), ;, }, }, if, (, propertyMapOutputPath, !=, null, ), {, if, (, compiler, ., getPropertyMap]
[., getVariableMap, (, ), ., save, (, variableMapOutputPath, ), ;, }, }, if, (, propertyMapOutputPath, !=, null, ), {, if]
[), ;, }, }, if, (, propertyMapOutputPath, !=, null, ), {, if, (, compiler, ., getPropertyMap, (, ), !=, null]
[), {, if, (, compiler, ., getPropertyMap, (, ), !=, null, ), {, compiler, ., getPropertyMap, (, ), ., save]
[!=, null, ), {, if, (, compiler, ., getPropertyMap, (, ), !=, null, ), {, compiler, ., getPropertyMap, (, )]
[), {, if, (, compiler, ., getPropertyMap, (, ), !=, null, ), {, compiler, ., getPropertyMap, (, ), ., save]
[), {, compiler, ., getPropertyMap, (, ), ., save, (, propertyMapOutputPath, ), ;, }, }, if, (, functionInformationMapOutputPath, !=, null]
[!=, null, ), {, compiler, ., getPropertyMap, (, ), ., save, (, propertyMapOutputPath, ), ;, }, }, if, (, functionInformationMapOutputPath]
[., getPropertyMap, (, ), !=, null, ), {, compiler, ., getPropertyMap, (, ), ., save, (, propertyMapOutputPath, ), ;, }]
[), {, compiler, ., getPropertyMap, (, ), ., save, (, propertyMapOutputPath, ), ;, }, }, if, (, functionInformationMapOutputPath, !=, null]
[;, }, }, if, (, functionInformationMapOutputPath, !=, null, ), {, if, (, compiler, ., getFunctionalInformationMap, (, ), !=, null, )]
[., save, (, propertyMapOutputPath, ), ;, }, }, if, (, functionInformationMapOutputPath, !=, null, ), {, if, (, compiler, ., getFunctionalInformationMap]
[., getPropertyMap, (, ), ., save, (, propertyMapOutputPath, ), ;, }, }, if, (, functionInformationMapOutputPath, !=, null, ), {, if]
[), ;, }, }, if, (, functionInformationMapOutputPath, !=, null, ), {, if, (, compiler, ., getFunctionalInformationMap, (, ), !=, null]
[), {, if, (, compiler, ., getFunctionalInformationMap, (, ), !=, null, ), {, OutputStream, file, =, filenameToOutputStream, (, functionInformationMapOutputPath, )]
[!=, null, ), {, if, (, compiler, ., getFunctionalInformationMap, (, ), !=, null, ), {, OutputStream, file, =, filenameToOutputStream, (]
[), {, if, (, compiler, ., getFunctionalInformationMap, (, ), !=, null, ), {, OutputStream, file, =, filenameToOutputStream, (, functionInformationMapOutputPath, )]
[), {, OutputStream, file, =, filenameToOutputStream, (, functionInformationMapOutputPath, ), ;, CodedOutputStream, outputStream, =, CodedOutputStream, ., newInstance, (, file, ), ;]
[!=, null, ), {, OutputStream, file, =, filenameToOutputStream, (, functionInformationMapOutputPath, ), ;, CodedOutputStream, outputStream, =, CodedOutputStream, ., newInstance, (, file]
[., getFunctionalInformationMap, (, ), !=, null, ), {, OutputStream, file, =, filenameToOutputStream, (, functionInformationMapOutputPath, ), ;, CodedOutputStream, outputStream, =, CodedOutputStream]
[), {, OutputStream, file, =, filenameToOutputStream, (, functionInformationMapOutputPath, ), ;, CodedOutputStream, outputStream, =, CodedOutputStream, ., newInstance, (, file, ), ;]
[;, CodedOutputStream, outputStream, =, CodedOutputStream, ., newInstance, (, file, ), ;, compiler, ., getFunctionalInformationMap, (, ), ., writeTo, (, outputStream]
[), ;, CodedOutputStream, outputStream, =, CodedOutputStream, ., newInstance, (, file, ), ;, compiler, ., getFunctionalInformationMap, (, ), ., writeTo, (]
[;, compiler, ., getFunctionalInformationMap, (, ), ., writeTo, (, outputStream, ), ;, outputStream, ., flush, (, ), ;, file, .]
[., newInstance, (, file, ), ;, compiler, ., getFunctionalInformationMap, (, ), ., writeTo, (, outputStream, ), ;, outputStream, ., flush]
[), ;, compiler, ., getFunctionalInformationMap, (, ), ., writeTo, (, outputStream, ), ;, outputStream, ., flush, (, ), ;, file]
[;, outputStream, ., flush, (, ), ;, file, ., flush, (, ), ;, file, ., close, (, ), ;, }]
[., writeTo, (, outputStream, ), ;, outputStream, ., flush, (, ), ;, file, ., flush, (, ), ;, file, .]
[., getFunctionalInformationMap, (, ), ., writeTo, (, outputStream, ), ;, outputStream, ., flush, (, ), ;, file, ., flush, (]
[), ;, outputStream, ., flush, (, ), ;, file, ., flush, (, ), ;, file, ., close, (, ), ;]
[;, file, ., flush, (, ), ;, file, ., close, (, ), ;, }, }, }, @, VisibleForTesting, static, void]
[., flush, (, ), ;, file, ., flush, (, ), ;, file, ., close, (, ), ;, }, }, }]
[;, file, ., close, (, ), ;, }, }, }, @, VisibleForTesting, static, void, createDefineOrTweakReplacements, (, List, <, String, >]
[., flush, (, ), ;, file, ., close, (, ), ;, }, }, }, @, VisibleForTesting, static, void, createDefineOrTweakReplacements, (]
[;, }, }, }, @, VisibleForTesting, static, void, createDefineOrTweakReplacements, (, List, <, String, >, definitions, ,, CompilerOptions, options, ,, boolean]
[., close, (, ), ;, }, }, }, @, VisibleForTesting, static, void, createDefineOrTweakReplacements, (, List, <, String, >, definitions, ,]
[), {, String, [, ], assignment, =, override, ., split, (, "=", ,, 2, ), ;, String, defName, =, assignment]
[;, String, defName, =, assignment, [, 0, ], ;, if, (, defName, ., length, (, ), >, 0, ), {]
[., split, (, "=", ,, 2, ), ;, String, defName, =, assignment, [, 0, ], ;, if, (, defName, .]
[,, 2, ), ;, String, defName, =, assignment, [, 0, ], ;, if, (, defName, ., length, (, ), >]
[), ;, String, defName, =, assignment, [, 0, ], ;, if, (, defName, ., length, (, ), >, 0, )]
[;, if, (, defName, ., length, (, ), >, 0, ), {, String, defValue, =, assignment, ., length, ==, 1]
[[, 0, ], ;, if, (, defName, ., length, (, ), >, 0, ), {, String, defValue, =, assignment, .]
[], ;, if, (, defName, ., length, (, ), >, 0, ), {, String, defValue, =, assignment, ., length, ==]
[), {, String, defValue, =, assignment, ., length, ==, 1, ?, "true", :, assignment, [, 1, ], ;, boolean, isTrue]
[>, 0, ), {, String, defValue, =, assignment, ., length, ==, 1, ?, "true", :, assignment, [, 1, ], ;]
[., length, (, ), >, 0, ), {, String, defValue, =, assignment, ., length, ==, 1, ?, "true", :, assignment]
[), {, String, defValue, =, assignment, ., length, ==, 1, ?, "true", :, assignment, [, 1, ], ;, boolean, isTrue]
[;, boolean, isTrue, =, defValue, ., equals, (, "true", ), ;, boolean, isFalse, =, defValue, ., equals, (, "false", )]
[?, "true", :, assignment, [, 1, ], ;, boolean, isTrue, =, defValue, ., equals, (, "true", ), ;, boolean, isFalse]
[==, 1, ?, "true", :, assignment, [, 1, ], ;, boolean, isTrue, =, defValue, ., equals, (, "true", ), ;]
[., length, ==, 1, ?, "true", :, assignment, [, 1, ], ;, boolean, isTrue, =, defValue, ., equals, (, "true"]
[?, "true", :, assignment, [, 1, ], ;, boolean, isTrue, =, defValue, ., equals, (, "true", ), ;, boolean, isFalse]
[:, assignment, [, 1, ], ;, boolean, isTrue, =, defValue, ., equals, (, "true", ), ;, boolean, isFalse, =, defValue]
[;, boolean, isTrue, =, defValue, ., equals, (, "true", ), ;, boolean, isFalse, =, defValue, ., equals, (, "false", )]
[[, 1, ], ;, boolean, isTrue, =, defValue, ., equals, (, "true", ), ;, boolean, isFalse, =, defValue, ., equals]
[], ;, boolean, isTrue, =, defValue, ., equals, (, "true", ), ;, boolean, isFalse, =, defValue, ., equals, (, "false"]
[;, boolean, isFalse, =, defValue, ., equals, (, "false", ), ;, if, (, isTrue, ||, isFalse, ), {, if, (]
[., equals, (, "true", ), ;, boolean, isFalse, =, defValue, ., equals, (, "false", ), ;, if, (, isTrue, ||]
[), ;, boolean, isFalse, =, defValue, ., equals, (, "false", ), ;, if, (, isTrue, ||, isFalse, ), {, if]
[;, if, (, isTrue, ||, isFalse, ), {, if, (, tweaks, ), {, options, ., setTweakToBooleanLiteral, (, defName, ,, isTrue]
[., equals, (, "false", ), ;, if, (, isTrue, ||, isFalse, ), {, if, (, tweaks, ), {, options, .]
[), ;, if, (, isTrue, ||, isFalse, ), {, if, (, tweaks, ), {, options, ., setTweakToBooleanLiteral, (, defName, ,]
[), {, if, (, tweaks, ), {, options, ., setTweakToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, else, {, options]
[||, isFalse, ), {, if, (, tweaks, ), {, options, ., setTweakToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, else]
[), {, if, (, tweaks, ), {, options, ., setTweakToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, else, {, options]
[), {, options, ., setTweakToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, else, {, options, ., setDefineToBooleanLiteral, (, defName, ,]
[;, }, else, {, options, ., setDefineToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, continue, ;, }, else, if, (]
[., setTweakToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, else, {, options, ., setDefineToBooleanLiteral, (, defName, ,, isTrue, ), ;]
[,, isTrue, ), ;, }, else, {, options, ., setDefineToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, continue, ;, }]
[), ;, }, else, {, options, ., setDefineToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, continue, ;, }, else, if]
[;, }, continue, ;, }, else, if, (, defValue, ., length, (, ), >, 1, &&, (, (, defValue, .]
[., setDefineToBooleanLiteral, (, defName, ,, isTrue, ), ;, }, continue, ;, }, else, if, (, defValue, ., length, (, )]
[,, isTrue, ), ;, }, continue, ;, }, else, if, (, defValue, ., length, (, ), >, 1, &&, (]
[), ;, }, continue, ;, }, else, if, (, defValue, ., length, (, ), >, 1, &&, (, (, defValue]
[), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (, ), -, 1, ), ;]
[&&, (, (, defValue, ., charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (]
[>, 1, &&, (, (, defValue, ., charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (, defValue, .]
[., length, (, ), >, 1, &&, (, (, defValue, ., charAt, (, 0, ), ==, '\'', &&, defValue, .]
[&&, (, (, defValue, ., charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (]
[), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (, ), -, 1, ), ;]
[), ), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (, ), -, 1, )]
[||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (, )]
[), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (]
[&&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||, (, defValue, .]
[==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||, (]
[., charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, )]
[), ==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||]
[&&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||, (, defValue, .]
[), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (]
[==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue, .]
[., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||, (, defValue, ., charAt, (]
[), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue]
[-, 1, ), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt]
[., length, (, ), -, 1, ), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"']
[), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue]
[), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (]
[), ), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (, ), -, 1, )]
[), ), ), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (, ), -, 1]
[&&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\"', ), ), ), {, String]
[==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\"', ), ), )]
[., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, )]
[), ==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\"', ), )]
[&&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\"', ), ), ), {, String]
[), ), ), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (, ), -, 1]
[==, '\"', ), ), ), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (, )]
[., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\"', ), ), ), {, String, maybeStringVal, =]
[), ==, '\"', ), ), ), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (]
[-, 1, ), ==, '\"', ), ), ), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, .]
[., length, (, ), -, 1, ), ==, '\"', ), ), ), {, String, maybeStringVal, =, defValue, ., substring, (]
[), ==, '\"', ), ), ), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (]
[), ), ), {, String, maybeStringVal, =, defValue, ., substring, (, 1, ,, defValue, ., length, (, ), -, 1]
[;, if, (, maybeStringVal, ., indexOf, (, defValue, ., charAt, (, 0, ), ), ==, -, 1, ), {, if]
[., substring, (, 1, ,, defValue, ., length, (, ), -, 1, ), ;, if, (, maybeStringVal, ., indexOf, (]
[,, defValue, ., length, (, ), -, 1, ), ;, if, (, maybeStringVal, ., indexOf, (, defValue, ., charAt, (]
[), ;, if, (, maybeStringVal, ., indexOf, (, defValue, ., charAt, (, 0, ), ), ==, -, 1, ), {]
[-, 1, ), ;, if, (, maybeStringVal, ., indexOf, (, defValue, ., charAt, (, 0, ), ), ==, -, 1]
[., length, (, ), -, 1, ), ;, if, (, maybeStringVal, ., indexOf, (, defValue, ., charAt, (, 0, )]
[), ;, if, (, maybeStringVal, ., indexOf, (, defValue, ., charAt, (, 0, ), ), ==, -, 1, ), {]
[), {, if, (, tweaks, ), {, options, ., setTweakToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, else, {, options]
[==, -, 1, ), {, if, (, tweaks, ), {, options, ., setTweakToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }]
[., indexOf, (, defValue, ., charAt, (, 0, ), ), ==, -, 1, ), {, if, (, tweaks, ), {]
[), ==, -, 1, ), {, if, (, tweaks, ), {, options, ., setTweakToStringLiteral, (, defName, ,, maybeStringVal, ), ;]
[., charAt, (, 0, ), ), ==, -, 1, ), {, if, (, tweaks, ), {, options, ., setTweakToStringLiteral, (]
[), ), ==, -, 1, ), {, if, (, tweaks, ), {, options, ., setTweakToStringLiteral, (, defName, ,, maybeStringVal, )]
[), {, if, (, tweaks, ), {, options, ., setTweakToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, else, {, options]
[), {, if, (, tweaks, ), {, options, ., setTweakToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, else, {, options]
[), {, options, ., setTweakToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, else, {, options, ., setDefineToStringLiteral, (, defName, ,]
[;, }, else, {, options, ., setDefineToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, continue, ;, }, }, else, {]
[., setTweakToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, else, {, options, ., setDefineToStringLiteral, (, defName, ,, maybeStringVal, ), ;]
[,, maybeStringVal, ), ;, }, else, {, options, ., setDefineToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, continue, ;, }]
[), ;, }, else, {, options, ., setDefineToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, continue, ;, }, }, else]
[;, }, continue, ;, }, }, else, {, try, {, double, value, =, Double, ., parseDouble, (, defValue, ), ;]
[., setDefineToStringLiteral, (, defName, ,, maybeStringVal, ), ;, }, continue, ;, }, }, else, {, try, {, double, value, =]
[,, maybeStringVal, ), ;, }, continue, ;, }, }, else, {, try, {, double, value, =, Double, ., parseDouble, (]
[), ;, }, continue, ;, }, }, else, {, try, {, double, value, =, Double, ., parseDouble, (, defValue, )]
[;, if, (, tweaks, ), {, options, ., setTweakToDoubleLiteral, (, defName, ,, value, ), ;, }, else, {, options, .]
[., parseDouble, (, defValue, ), ;, if, (, tweaks, ), {, options, ., setTweakToDoubleLiteral, (, defName, ,, value, ), ;]
[), ;, if, (, tweaks, ), {, options, ., setTweakToDoubleLiteral, (, defName, ,, value, ), ;, }, else, {, options]
[), {, options, ., setTweakToDoubleLiteral, (, defName, ,, value, ), ;, }, else, {, options, ., setDefineToDoubleLiteral, (, defName, ,]
[;, }, else, {, options, ., setDefineToDoubleLiteral, (, defName, ,, value, ), ;, }, continue, ;, }, catch, (, NumberFormatException]
[., setTweakToDoubleLiteral, (, defName, ,, value, ), ;, }, else, {, options, ., setDefineToDoubleLiteral, (, defName, ,, value, ), ;]
[,, value, ), ;, }, else, {, options, ., setDefineToDoubleLiteral, (, defName, ,, value, ), ;, }, continue, ;, }]
[), ;, }, else, {, options, ., setDefineToDoubleLiteral, (, defName, ,, value, ), ;, }, continue, ;, }, catch, (]
[;, }, continue, ;, }, catch, (, NumberFormatException, e, ), {, }, }, }, if, (, tweaks, ), {, throw]
[., setDefineToDoubleLiteral, (, defName, ,, value, ), ;, }, continue, ;, }, catch, (, NumberFormatException, e, ), {, }, }]
[,, value, ), ;, }, continue, ;, }, catch, (, NumberFormatException, e, ), {, }, }, }, if, (, tweaks]
[), ;, }, continue, ;, }, catch, (, NumberFormatException, e, ), {, }, }, }, if, (, tweaks, ), {]
[), {, throw, new, RuntimeException, (, "--tweak flag syntax invalid: ", +, override, ), ;, }, throw, new, RuntimeException, (, "--define flag syntax invalid: ", +, override, )]
[;, }, throw, new, RuntimeException, (, "--define flag syntax invalid: ", +, override, ), ;, }, }, private, boolean, shouldGenerateOutputPerModule, (, String, output, )]
[), ;, }, throw, new, RuntimeException, (, "--define flag syntax invalid: ", +, override, ), ;, }, }, private, boolean, shouldGenerateOutputPerModule, (, String, output]
[+, override, ), ;, }, throw, new, RuntimeException, (, "--define flag syntax invalid: ", +, override, ), ;, }, }, private, boolean, shouldGenerateOutputPerModule, (]
[), ;, }, throw, new, RuntimeException, (, "--define flag syntax invalid: ", +, override, ), ;, }, }, private, boolean, shouldGenerateOutputPerModule, (, String, output]
[;, }, }, private, boolean, shouldGenerateOutputPerModule, (, String, output, ), {, return, !, config, ., module, ., isEmpty, (, )]
[), ;, }, }, private, boolean, shouldGenerateOutputPerModule, (, String, output, ), {, return, !, config, ., module, ., isEmpty, (]
[+, override, ), ;, }, }, private, boolean, shouldGenerateOutputPerModule, (, String, output, ), {, return, !, config, ., module, .]
[), ;, }, }, private, boolean, shouldGenerateOutputPerModule, (, String, output, ), {, return, !, config, ., module, ., isEmpty, (]
[;, }, private, void, outputManifest, (, ), throws, IOException, {, outputManifestOrBundle, (, config, ., outputManifests, ,, true, ), ;, }]
[&&, output, ., contains, (, "%outname%", ), ;, }, private, void, outputManifest, (, ), throws, IOException, {, outputManifestOrBundle, (, config]
[&&, output, !=, null, &&, output, ., contains, (, "%outname%", ), ;, }, private, void, outputManifest, (, ), throws, IOException]
[&&, output, !=, null, &&, output, ., contains, (, "%outname%", ), ;, }, private, void, outputManifest, (, ), throws, IOException]
[., isEmpty, (, ), &&, output, !=, null, &&, output, ., contains, (, "%outname%", ), ;, }, private, void, outputManifest]
[., module, ., isEmpty, (, ), &&, output, !=, null, &&, output, ., contains, (, "%outname%", ), ;, }, private]
[&&, output, ., contains, (, "%outname%", ), ;, }, private, void, outputManifest, (, ), throws, IOException, {, outputManifestOrBundle, (, config]
[!=, null, &&, output, ., contains, (, "%outname%", ), ;, }, private, void, outputManifest, (, ), throws, IOException, {, outputManifestOrBundle]
[&&, output, ., contains, (, "%outname%", ), ;, }, private, void, outputManifest, (, ), throws, IOException, {, outputManifestOrBundle, (, config]
[;, }, private, void, outputManifest, (, ), throws, IOException, {, outputManifestOrBundle, (, config, ., outputManifests, ,, true, ), ;, }]
[., contains, (, "%outname%", ), ;, }, private, void, outputManifest, (, ), throws, IOException, {, outputManifestOrBundle, (, config, ., outputManifests]
[), ;, }, private, void, outputManifest, (, ), throws, IOException, {, outputManifestOrBundle, (, config, ., outputManifests, ,, true, ), ;]
[;, }, private, void, outputBundle, (, ), throws, IOException, {, outputManifestOrBundle, (, config, ., outputBundles, ,, false, ), ;, }]
[,, true, ), ;, }, private, void, outputBundle, (, ), throws, IOException, {, outputManifestOrBundle, (, config, ., outputBundles, ,, false]
[., outputManifests, ,, true, ), ;, }, private, void, outputBundle, (, ), throws, IOException, {, outputManifestOrBundle, (, config, ., outputBundles]
[), ;, }, private, void, outputBundle, (, ), throws, IOException, {, outputManifestOrBundle, (, config, ., outputBundles, ,, false, ), ;]
[;, }, private, void, outputManifestOrBundle, (, List, <, String, >, outputFiles, ,, boolean, isManifest, ), throws, IOException, {, if, (]
[,, false, ), ;, }, private, void, outputManifestOrBundle, (, List, <, String, >, outputFiles, ,, boolean, isManifest, ), throws, IOException]
[., outputBundles, ,, false, ), ;, }, private, void, outputManifestOrBundle, (, List, <, String, >, outputFiles, ,, boolean, isManifest, )]
[), ;, }, private, void, outputManifestOrBundle, (, List, <, String, >, outputFiles, ,, boolean, isManifest, ), throws, IOException, {, if]
[), {, return, ;, }, for, (, String, output, :, outputFiles, ), {, if, (, output, ., isEmpty, (, )]
[., isEmpty, (, ), ), {, return, ;, }, for, (, String, output, :, outputFiles, ), {, if, (, output]
[), {, if, (, output, ., isEmpty, (, ), ), {, continue, ;, }, if, (, shouldGenerateOutputPerModule, (, output, )]
[), {, continue, ;, }, if, (, shouldGenerateOutputPerModule, (, output, ), ), {, JSModuleGraph, graph, =, compiler, ., getDegenerateModuleGraph, (]
[., isEmpty, (, ), ), {, continue, ;, }, if, (, shouldGenerateOutputPerModule, (, output, ), ), {, JSModuleGraph, graph, =]
[), {, JSModuleGraph, graph, =, compiler, ., getDegenerateModuleGraph, (, ), ;, Iterable, <, JSModule, >, modules, =, graph, ., getAllModules]
[), ), {, JSModuleGraph, graph, =, compiler, ., getDegenerateModuleGraph, (, ), ;, Iterable, <, JSModule, >, modules, =, graph, .]
[;, Iterable, <, JSModule, >, modules, =, graph, ., getAllModules, (, ), ;, for, (, JSModule, module, :, modules, )]
[., getDegenerateModuleGraph, (, ), ;, Iterable, <, JSModule, >, modules, =, graph, ., getAllModules, (, ), ;, for, (, JSModule]
[;, for, (, JSModule, module, :, modules, ), {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,, module, )]
[., getAllModules, (, ), ;, for, (, JSModule, module, :, modules, ), {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (]
[), {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,, module, ), ), ;, if, (, isManifest, ), {]
[;, if, (, isManifest, ), {, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {]
[), ;, if, (, isManifest, ), {, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else]
[,, module, ), ), ;, if, (, isManifest, ), {, printManifestTo, (, module, ., getInputs, (, ), ,, out, )]
[), ), ;, if, (, isManifest, ), {, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }]
[), {, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (, module, .]
[;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, out, ., close, (]
[,, out, ), ;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, out]
[., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,, out]
[), ;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, out, ., close]
[;, }, out, ., close, (, ), ;, }, }, else, {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output]
[,, out, ), ;, }, out, ., close, (, ), ;, }, }, else, {, Writer, out, =, fileNameToOutputWriter2, (]
[., getInputs, (, ), ,, out, ), ;, }, out, ., close, (, ), ;, }, }, else, {, Writer]
[), ;, }, out, ., close, (, ), ;, }, }, else, {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (]
[;, }, }, else, {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,, null, ), ), ;, if, (]
[., close, (, ), ;, }, }, else, {, Writer, out, =, fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,, null, )]
[;, if, (, config, ., module, ., isEmpty, (, ), ), {, if, (, isManifest, ), {, printManifestTo, (, compiler]
[), ;, if, (, config, ., module, ., isEmpty, (, ), ), {, if, (, isManifest, ), {, printManifestTo, (]
[,, null, ), ), ;, if, (, config, ., module, ., isEmpty, (, ), ), {, if, (, isManifest, )]
[), ), ;, if, (, config, ., module, ., isEmpty, (, ), ), {, if, (, isManifest, ), {, printManifestTo]
[), {, if, (, isManifest, ), {, printManifestTo, (, compiler, ., getInputsInOrder, (, ), ,, out, ), ;, }, else]
[., isEmpty, (, ), ), {, if, (, isManifest, ), {, printManifestTo, (, compiler, ., getInputsInOrder, (, ), ,, out]
[., module, ., isEmpty, (, ), ), {, if, (, isManifest, ), {, printManifestTo, (, compiler, ., getInputsInOrder, (, )]
[), {, printManifestTo, (, compiler, ., getInputsInOrder, (, ), ,, out, ), ;, }, else, {, printBundleTo, (, compiler, .]
[;, }, else, {, printBundleTo, (, compiler, ., getInputsInOrder, (, ), ,, out, ), ;, }, }, else, {, printModuleGraphManifestOrBundleTo]
[,, out, ), ;, }, else, {, printBundleTo, (, compiler, ., getInputsInOrder, (, ), ,, out, ), ;, }, }]
[., getInputsInOrder, (, ), ,, out, ), ;, }, else, {, printBundleTo, (, compiler, ., getInputsInOrder, (, ), ,, out]
[), ;, }, else, {, printBundleTo, (, compiler, ., getInputsInOrder, (, ), ,, out, ), ;, }, }, else, {]
[;, }, }, else, {, printModuleGraphManifestOrBundleTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,, out, ,, isManifest, ), ;, }, out]
[,, out, ), ;, }, }, else, {, printModuleGraphManifestOrBundleTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,, out, ,, isManifest, )]
[., getInputsInOrder, (, ), ,, out, ), ;, }, }, else, {, printModuleGraphManifestOrBundleTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,]
[), ;, }, }, else, {, printModuleGraphManifestOrBundleTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,, out, ,, isManifest, ), ;, }]
[;, }, out, ., close, (, ), ;, }, }, }, private, void, outputModuleGraphJson, (, ), throws, IOException, {, if]
[,, out, ,, isManifest, ), ;, }, out, ., close, (, ), ;, }, }, }, private, void, outputModuleGraphJson, (]
[., getDegenerateModuleGraph, (, ), ,, out, ,, isManifest, ), ;, }, out, ., close, (, ), ;, }, }, }]
[,, isManifest, ), ;, }, out, ., close, (, ), ;, }, }, }, private, void, outputModuleGraphJson, (, ), throws]
[), ;, }, out, ., close, (, ), ;, }, }, }, private, void, outputModuleGraphJson, (, ), throws, IOException, {]
[;, }, }, }, private, void, outputModuleGraphJson, (, ), throws, IOException, {, if, (, config, ., outputModuleDependencies, !=, null, &&]
[., close, (, ), ;, }, }, }, private, void, outputModuleGraphJson, (, ), throws, IOException, {, if, (, config, .]
[), {, Writer, out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;, printModuleGraphJsonTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,]
[&&, config, ., outputModuleDependencies, !=, "", ), {, Writer, out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;, printModuleGraphJsonTo, (]
[!=, null, &&, config, ., outputModuleDependencies, !=, "", ), {, Writer, out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;]
[., outputModuleDependencies, !=, null, &&, config, ., outputModuleDependencies, !=, "", ), {, Writer, out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies]
[&&, config, ., outputModuleDependencies, !=, "", ), {, Writer, out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;, printModuleGraphJsonTo, (]
[), {, Writer, out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;, printModuleGraphJsonTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,]
[!=, "", ), {, Writer, out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;, printModuleGraphJsonTo, (, compiler, ., getDegenerateModuleGraph, (]
[., outputModuleDependencies, !=, "", ), {, Writer, out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;, printModuleGraphJsonTo, (, compiler, .]
[), {, Writer, out, =, fileNameToOutputWriter2, (, config, ., outputModuleDependencies, ), ;, printModuleGraphJsonTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,]
[;, printModuleGraphJsonTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,, out, ), ;, out, ., close, (, ), ;, }, }]
[), ;, printModuleGraphJsonTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,, out, ), ;, out, ., close, (, ), ;, }]
[., outputModuleDependencies, ), ;, printModuleGraphJsonTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,, out, ), ;, out, ., close, (, )]
[;, out, ., close, (, ), ;, }, }, @, VisibleForTesting, void, printModuleGraphJsonTo, (, JSModuleGraph, graph, ,, Appendable, out, )]
[,, out, ), ;, out, ., close, (, ), ;, }, }, @, VisibleForTesting, void, printModuleGraphJsonTo, (, JSModuleGraph, graph, ,]
[., getDegenerateModuleGraph, (, ), ,, out, ), ;, out, ., close, (, ), ;, }, }, @, VisibleForTesting, void, printModuleGraphJsonTo]
[), ;, out, ., close, (, ), ;, }, }, @, VisibleForTesting, void, printModuleGraphJsonTo, (, JSModuleGraph, graph, ,, Appendable, out]
[;, }, }, @, VisibleForTesting, void, printModuleGraphJsonTo, (, JSModuleGraph, graph, ,, Appendable, out, ), throws, IOException, {, out, ., append]
[., close, (, ), ;, }, }, @, VisibleForTesting, void, printModuleGraphJsonTo, (, JSModuleGraph, graph, ,, Appendable, out, ), throws, IOException]
[;, }, @, VisibleForTesting, void, printModuleGraphManifestOrBundleTo, (, JSModuleGraph, graph, ,, Appendable, out, ,, boolean, isManifest, ), throws, IOException, {, Joiner]
[., append, (, compiler, ., getDegenerateModuleGraph, (, ), ., toJson, (, ), ., toString, (, ), ), ;, }, @]
[), ;, }, @, VisibleForTesting, void, printModuleGraphManifestOrBundleTo, (, JSModuleGraph, graph, ,, Appendable, out, ,, boolean, isManifest, ), throws, IOException, {]
[., toString, (, ), ), ;, }, @, VisibleForTesting, void, printModuleGraphManifestOrBundleTo, (, JSModuleGraph, graph, ,, Appendable, out, ,, boolean, isManifest]
[., toJson, (, ), ., toString, (, ), ), ;, }, @, VisibleForTesting, void, printModuleGraphManifestOrBundleTo, (, JSModuleGraph, graph, ,, Appendable]
[., getDegenerateModuleGraph, (, ), ., toJson, (, ), ., toString, (, ), ), ;, }, @, VisibleForTesting, void, printModuleGraphManifestOrBundleTo, (]
[;, boolean, requiresNewline, =, false, ;, for, (, JSModule, module, :, graph, ., getAllModules, (, ), ), {, if, (]
[., on, (, ",", ), ;, boolean, requiresNewline, =, false, ;, for, (, JSModule, module, :, graph, ., getAllModules, (]
[), ;, boolean, requiresNewline, =, false, ;, for, (, JSModule, module, :, graph, ., getAllModules, (, ), ), {, if]
[;, for, (, JSModule, module, :, graph, ., getAllModules, (, ), ), {, if, (, requiresNewline, ), {, out, .]
[), {, if, (, requiresNewline, ), {, out, ., append, (, "\n", ), ;, }, if, (, isManifest, ), {]
[., getAllModules, (, ), ), {, if, (, requiresNewline, ), {, out, ., append, (, "\n", ), ;, }, if]
[), {, out, ., append, (, "\n", ), ;, }, if, (, isManifest, ), {, String, dependencies, =, commas, .]
[;, }, if, (, isManifest, ), {, String, dependencies, =, commas, ., join, (, module, ., getSortedDependencyNames, (, ), )]
[., append, (, "\n", ), ;, }, if, (, isManifest, ), {, String, dependencies, =, commas, ., join, (, module]
[), ;, }, if, (, isManifest, ), {, String, dependencies, =, commas, ., join, (, module, ., getSortedDependencyNames, (, )]
[), {, String, dependencies, =, commas, ., join, (, module, ., getSortedDependencyNames, (, ), ), ;, out, ., append, (]
[;, out, ., append, (, String, ., format, (, "{%s%s}\n", ,, module, ., getName, (, ), ,, dependencies, ., isEmpty]
[., join, (, module, ., getSortedDependencyNames, (, ), ), ;, out, ., append, (, String, ., format, (, "{%s%s}\n", ,]
[), ;, out, ., append, (, String, ., format, (, "{%s%s}\n", ,, module, ., getName, (, ), ,, dependencies, .]
[., getSortedDependencyNames, (, ), ), ;, out, ., append, (, String, ., format, (, "{%s%s}\n", ,, module, ., getName, (]
[;, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (, module, ., getInputs]
[., append, (, String, ., format, (, "{%s%s}\n", ,, module, ., getName, (, ), ,, dependencies, ., isEmpty, (, )]
[), ;, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (, module, .]
[., format, (, "{%s%s}\n", ,, module, ., getName, (, ), ,, dependencies, ., isEmpty, (, ), ?, "", :, ":"]
[,, module, ., getName, (, ), ,, dependencies, ., isEmpty, (, ), ?, "", :, ":", +, dependencies, ), )]
[,, dependencies, ., isEmpty, (, ), ?, "", :, ":", +, dependencies, ), ), ;, printManifestTo, (, module, ., getInputs]
[., getName, (, ), ,, dependencies, ., isEmpty, (, ), ?, "", :, ":", +, dependencies, ), ), ;, printManifestTo]
[), ), ;, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (, module]
[?, "", :, ":", +, dependencies, ), ), ;, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;]
[., isEmpty, (, ), ?, "", :, ":", +, dependencies, ), ), ;, printManifestTo, (, module, ., getInputs, (, )]
[:, ":", +, dependencies, ), ), ;, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else]
[), ), ;, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (, module]
[+, dependencies, ), ), ;, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo]
[), ), ;, printManifestTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (, module]
[;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, requiresNewline, =, true, ;]
[,, out, ), ;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, requiresNewline]
[., getInputs, (, ), ,, out, ), ;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,, out]
[), ;, }, else, {, printBundleTo, (, module, ., getInputs, (, ), ,, out, ), ;, }, requiresNewline, =, true]
[;, }, requiresNewline, =, true, ;, }, }, private, void, printManifestTo, (, Iterable, <, CompilerInput, >, inputs, ,, Appendable, out]
[,, out, ), ;, }, requiresNewline, =, true, ;, }, }, private, void, printManifestTo, (, Iterable, <, CompilerInput, >, inputs]
[., getInputs, (, ), ,, out, ), ;, }, requiresNewline, =, true, ;, }, }, private, void, printManifestTo, (, Iterable]
[), ;, }, requiresNewline, =, true, ;, }, }, private, void, printManifestTo, (, Iterable, <, CompilerInput, >, inputs, ,, Appendable]
[=, true, ;, }, }, private, void, printManifestTo, (, Iterable, <, CompilerInput, >, inputs, ,, Appendable, out, ), throws, IOException]
[;, }, }, private, void, printManifestTo, (, Iterable, <, CompilerInput, >, inputs, ,, Appendable, out, ), throws, IOException, {, for]
[), {, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName, =, rootRelativePath]
[;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;, out, ., append, (]
[., get, (, input, ., getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input]
[), ;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;, out, ., append]
[., getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, )]
[;, out, ., append, (, displayName, ), ;, out, ., append, (, "\n", ), ;, }, }, private, void, printBundleTo]
[?, rootRelativePath, :, input, ., getName, (, ), ;, out, ., append, (, displayName, ), ;, out, ., append, (]
[!=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;, out, ., append, (, displayName, ), ;, out, .]
[?, rootRelativePath, :, input, ., getName, (, ), ;, out, ., append, (, displayName, ), ;, out, ., append, (]
[:, input, ., getName, (, ), ;, out, ., append, (, displayName, ), ;, out, ., append, (, "\n", )]
[;, out, ., append, (, displayName, ), ;, out, ., append, (, "\n", ), ;, }, }, private, void, printBundleTo]
[., getName, (, ), ;, out, ., append, (, displayName, ), ;, out, ., append, (, "\n", ), ;, }]
[;, out, ., append, (, "\n", ), ;, }, }, private, void, printBundleTo, (, Iterable, <, CompilerInput, >, inputs, ,]
[., append, (, displayName, ), ;, out, ., append, (, "\n", ), ;, }, }, private, void, printBundleTo, (, Iterable]
[), ;, out, ., append, (, "\n", ), ;, }, }, private, void, printBundleTo, (, Iterable, <, CompilerInput, >, inputs]
[;, }, }, private, void, printBundleTo, (, Iterable, <, CompilerInput, >, inputs, ,, Appendable, out, ), throws, IOException, {, for]
[., append, (, "\n", ), ;, }, }, private, void, printBundleTo, (, Iterable, <, CompilerInput, >, inputs, ,, Appendable, out]
[), ;, }, }, private, void, printBundleTo, (, Iterable, <, CompilerInput, >, inputs, ,, Appendable, out, ), throws, IOException, {]
[), {, if, (, input, ., getName, (, ), ., equals, (, Compiler, ., createFillFileName, (, Compiler, ., SINGLETON_MODULE_NAME, )]
[), {, Preconditions, ., checkState, (, 1, ==, Iterables, ., size, (, inputs, ), ), ;, return, ;, }, String]
[., equals, (, Compiler, ., createFillFileName, (, Compiler, ., SINGLETON_MODULE_NAME, ), ), ), {, Preconditions, ., checkState, (, 1, ==]
[., getName, (, ), ., equals, (, Compiler, ., createFillFileName, (, Compiler, ., SINGLETON_MODULE_NAME, ), ), ), {, Preconditions, .]
[), ), {, Preconditions, ., checkState, (, 1, ==, Iterables, ., size, (, inputs, ), ), ;, return, ;, }]
[., createFillFileName, (, Compiler, ., SINGLETON_MODULE_NAME, ), ), ), {, Preconditions, ., checkState, (, 1, ==, Iterables, ., size, (]
[), ), ), {, Preconditions, ., checkState, (, 1, ==, Iterables, ., size, (, inputs, ), ), ;, return, ;]
[., SINGLETON_MODULE_NAME, ), ), ), {, Preconditions, ., checkState, (, 1, ==, Iterables, ., size, (, inputs, ), ), ;]
[;, return, ;, }, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String, displayName]
[., checkState, (, 1, ==, Iterables, ., size, (, inputs, ), ), ;, return, ;, }, String, rootRelativePath, =, rootRelativePathsMap]
[), ;, return, ;, }, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String]
[==, Iterables, ., size, (, inputs, ), ), ;, return, ;, }, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input]
[), ;, return, ;, }, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;, String]
[., size, (, inputs, ), ), ;, return, ;, }, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName]
[), ), ;, return, ;, }, String, rootRelativePath, =, rootRelativePathsMap, ., get, (, input, ., getName, (, ), ), ;]
[;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;, File, file, =, new]
[., get, (, input, ., getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input]
[), ;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;, File, file, =]
[., getName, (, ), ), ;, String, displayName, =, rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, )]
[;, File, file, =, new, File, (, input, ., getName, (, ), ), ;, out, ., append, (, "//", )]
[?, rootRelativePath, :, input, ., getName, (, ), ;, File, file, =, new, File, (, input, ., getName, (, )]
[!=, null, ?, rootRelativePath, :, input, ., getName, (, ), ;, File, file, =, new, File, (, input, ., getName]
[?, rootRelativePath, :, input, ., getName, (, ), ;, File, file, =, new, File, (, input, ., getName, (, )]
[:, input, ., getName, (, ), ;, File, file, =, new, File, (, input, ., getName, (, ), ), ;]
[;, File, file, =, new, File, (, input, ., getName, (, ), ), ;, out, ., append, (, "//", )]
[., getName, (, ), ;, File, file, =, new, File, (, input, ., getName, (, ), ), ;, out, .]
[;, out, ., append, (, "//", ), ;, out, ., append, (, displayName, ), ;, out, ., append, (, "\n"]
[), ;, out, ., append, (, "//", ), ;, out, ., append, (, displayName, ), ;, out, ., append, (]
[., getName, (, ), ), ;, out, ., append, (, "//", ), ;, out, ., append, (, displayName, ), ;]
[;, out, ., append, (, displayName, ), ;, out, ., append, (, "\n", ), ;, Files, ., copy, (, file]
[., append, (, "//", ), ;, out, ., append, (, displayName, ), ;, out, ., append, (, "\n", ), ;]
[), ;, out, ., append, (, displayName, ), ;, out, ., append, (, "\n", ), ;, Files, ., copy, (]
[;, out, ., append, (, "\n", ), ;, Files, ., copy, (, file, ,, inputCharset, ,, out, ), ;, out]
[., append, (, displayName, ), ;, out, ., append, (, "\n", ), ;, Files, ., copy, (, file, ,, inputCharset]
[), ;, out, ., append, (, "\n", ), ;, Files, ., copy, (, file, ,, inputCharset, ,, out, ), ;]
[;, Files, ., copy, (, file, ,, inputCharset, ,, out, ), ;, out, ., append, (, "\n", ), ;, }]
[., append, (, "\n", ), ;, Files, ., copy, (, file, ,, inputCharset, ,, out, ), ;, out, ., append]
[), ;, Files, ., copy, (, file, ,, inputCharset, ,, out, ), ;, out, ., append, (, "\n", ), ;]
[;, out, ., append, (, "\n", ), ;, }, }, private, Map, <, String, ,, String, >, constructRootRelativePathsMap, (, )]
[., copy, (, file, ,, inputCharset, ,, out, ), ;, out, ., append, (, "\n", ), ;, }, }, private]
[,, inputCharset, ,, out, ), ;, out, ., append, (, "\n", ), ;, }, }, private, Map, <, String, ,]
[,, out, ), ;, out, ., append, (, "\n", ), ;, }, }, private, Map, <, String, ,, String, >]
[), ;, out, ., append, (, "\n", ), ;, }, }, private, Map, <, String, ,, String, >, constructRootRelativePathsMap, (]
[;, }, }, private, Map, <, String, ,, String, >, constructRootRelativePathsMap, (, ), {, Map, <, String, ,, String, >]
[., append, (, "\n", ), ;, }, }, private, Map, <, String, ,, String, >, constructRootRelativePathsMap, (, ), {, Map]
[), ;, }, }, private, Map, <, String, ,, String, >, constructRootRelativePathsMap, (, ), {, Map, <, String, ,, String]
[;, for, (, String, mapString, :, config, ., manifestMaps, ), {, int, colonIndex, =, mapString, ., indexOf, (, ':', )]
[., newLinkedHashMap, (, ), ;, for, (, String, mapString, :, config, ., manifestMaps, ), {, int, colonIndex, =, mapString, .]
[), {, int, colonIndex, =, mapString, ., indexOf, (, ':', ), ;, Preconditions, ., checkState, (, colonIndex, >, 0, )]
[., manifestMaps, ), {, int, colonIndex, =, mapString, ., indexOf, (, ':', ), ;, Preconditions, ., checkState, (, colonIndex, >]
[;, Preconditions, ., checkState, (, colonIndex, >, 0, ), ;, String, execPath, =, mapString, ., substring, (, 0, ,, colonIndex]
[., indexOf, (, ':', ), ;, Preconditions, ., checkState, (, colonIndex, >, 0, ), ;, String, execPath, =, mapString, .]
[), ;, Preconditions, ., checkState, (, colonIndex, >, 0, ), ;, String, execPath, =, mapString, ., substring, (, 0, ,]
[;, String, execPath, =, mapString, ., substring, (, 0, ,, colonIndex, ), ;, String, rootRelativePath, =, mapString, ., substring, (]
[., checkState, (, colonIndex, >, 0, ), ;, String, execPath, =, mapString, ., substring, (, 0, ,, colonIndex, ), ;]
[), ;, String, execPath, =, mapString, ., substring, (, 0, ,, colonIndex, ), ;, String, rootRelativePath, =, mapString, ., substring]
[>, 0, ), ;, String, execPath, =, mapString, ., substring, (, 0, ,, colonIndex, ), ;, String, rootRelativePath, =, mapString]
[), ;, String, execPath, =, mapString, ., substring, (, 0, ,, colonIndex, ), ;, String, rootRelativePath, =, mapString, ., substring]
[;, String, rootRelativePath, =, mapString, ., substring, (, colonIndex, +, 1, ), ;, Preconditions, ., checkState, (, rootRelativePath, ., indexOf]
[., substring, (, 0, ,, colonIndex, ), ;, String, rootRelativePath, =, mapString, ., substring, (, colonIndex, +, 1, ), ;]
[,, colonIndex, ), ;, String, rootRelativePath, =, mapString, ., substring, (, colonIndex, +, 1, ), ;, Preconditions, ., checkState, (]
[), ;, String, rootRelativePath, =, mapString, ., substring, (, colonIndex, +, 1, ), ;, Preconditions, ., checkState, (, rootRelativePath, .]
[;, Preconditions, ., checkState, (, rootRelativePath, ., indexOf, (, ':', ), ==, -, 1, ), ;, rootRelativePathsMap, ., put, (]
[., substring, (, colonIndex, +, 1, ), ;, Preconditions, ., checkState, (, rootRelativePath, ., indexOf, (, ':', ), ==, -]
[), ;, Preconditions, ., checkState, (, rootRelativePath, ., indexOf, (, ':', ), ==, -, 1, ), ;, rootRelativePathsMap, ., put]
[+, 1, ), ;, Preconditions, ., checkState, (, rootRelativePath, ., indexOf, (, ':', ), ==, -, 1, ), ;, rootRelativePathsMap]
[), ;, Preconditions, ., checkState, (, rootRelativePath, ., indexOf, (, ':', ), ==, -, 1, ), ;, rootRelativePathsMap, ., put]
[;, rootRelativePathsMap, ., put, (, execPath, ,, rootRelativePath, ), ;, }, return, rootRelativePathsMap, ;, }, private, class, RunTimeStats, {, private]
[., checkState, (, rootRelativePath, ., indexOf, (, ':', ), ==, -, 1, ), ;, rootRelativePathsMap, ., put, (, execPath, ,]
[), ;, rootRelativePathsMap, ., put, (, execPath, ,, rootRelativePath, ), ;, }, return, rootRelativePathsMap, ;, }, private, class, RunTimeStats, {]
[==, -, 1, ), ;, rootRelativePathsMap, ., put, (, execPath, ,, rootRelativePath, ), ;, }, return, rootRelativePathsMap, ;, }, private]
[., indexOf, (, ':', ), ==, -, 1, ), ;, rootRelativePathsMap, ., put, (, execPath, ,, rootRelativePath, ), ;, }]
[), ==, -, 1, ), ;, rootRelativePathsMap, ., put, (, execPath, ,, rootRelativePath, ), ;, }, return, rootRelativePathsMap, ;, }]
[), ;, rootRelativePathsMap, ., put, (, execPath, ,, rootRelativePath, ), ;, }, return, rootRelativePathsMap, ;, }, private, class, RunTimeStats, {]
[), ;, rootRelativePathsMap, ., put, (, execPath, ,, rootRelativePath, ), ;, }, return, rootRelativePathsMap, ;, }, private, class, RunTimeStats, {]
[;, }, return, rootRelativePathsMap, ;, }, private, class, RunTimeStats, {, private, long, bestRunTime, =, Long, ., MAX_VALUE, ;, private, long]
[., put, (, execPath, ,, rootRelativePath, ), ;, }, return, rootRelativePathsMap, ;, }, private, class, RunTimeStats, {, private, long, bestRunTime]
[,, rootRelativePath, ), ;, }, return, rootRelativePathsMap, ;, }, private, class, RunTimeStats, {, private, long, bestRunTime, =, Long, ., MAX_VALUE]
[), ;, }, return, rootRelativePathsMap, ;, }, private, class, RunTimeStats, {, private, long, bestRunTime, =, Long, ., MAX_VALUE, ;, private]
[;, }, private, class, RunTimeStats, {, private, long, bestRunTime, =, Long, ., MAX_VALUE, ;, private, long, worstRunTime, =, Long, .]
[;, private, long, worstRunTime, =, Long, ., MIN_VALUE, ;, private, long, lastStartTime, =, 0, ;, private, List, <, List, <]
[., MAX_VALUE, ;, private, long, worstRunTime, =, Long, ., MIN_VALUE, ;, private, long, lastStartTime, =, 0, ;, private, List, <]
[;, private, long, lastStartTime, =, 0, ;, private, List, <, List, <, String, >, >, loopedPassesInBestRun, =, null, ;, private]
[., MIN_VALUE, ;, private, long, lastStartTime, =, 0, ;, private, List, <, List, <, String, >, >, loopedPassesInBestRun, =, null]
[;, private, List, <, List, <, String, >, >, loopedPassesInBestRun, =, null, ;, private, void, recordStartRun, (, ), {, lastStartTime]
[;, private, void, recordStartRun, (, ), {, lastStartTime, =, System, ., currentTimeMillis, (, ), ;, PhaseOptimizer, ., clearLoopsRun, (, )]
[=, System, ., currentTimeMillis, (, ), ;, PhaseOptimizer, ., clearLoopsRun, (, ), ;, }, private, void, recordEndRun, (, ), {]
[;, PhaseOptimizer, ., clearLoopsRun, (, ), ;, }, private, void, recordEndRun, (, ), {, long, endTime, =, System, ., currentTimeMillis]
[., currentTimeMillis, (, ), ;, PhaseOptimizer, ., clearLoopsRun, (, ), ;, }, private, void, recordEndRun, (, ), {, long, endTime]
[;, }, private, void, recordEndRun, (, ), {, long, endTime, =, System, ., currentTimeMillis, (, ), ;, long, length, =]
[., clearLoopsRun, (, ), ;, }, private, void, recordEndRun, (, ), {, long, endTime, =, System, ., currentTimeMillis, (, )]
[;, long, length, =, endTime, -, lastStartTime, ;, worstRunTime, =, Math, ., max, (, length, ,, worstRunTime, ), ;, if]
[., currentTimeMillis, (, ), ;, long, length, =, endTime, -, lastStartTime, ;, worstRunTime, =, Math, ., max, (, length, ,]
[;, worstRunTime, =, Math, ., max, (, length, ,, worstRunTime, ), ;, if, (, length, <, bestRunTime, ), {, loopedPassesInBestRun]
[-, lastStartTime, ;, worstRunTime, =, Math, ., max, (, length, ,, worstRunTime, ), ;, if, (, length, <, bestRunTime, )]
[;, worstRunTime, =, Math, ., max, (, length, ,, worstRunTime, ), ;, if, (, length, <, bestRunTime, ), {, loopedPassesInBestRun]
[=, Math, ., max, (, length, ,, worstRunTime, ), ;, if, (, length, <, bestRunTime, ), {, loopedPassesInBestRun, =, PhaseOptimizer]
[;, if, (, length, <, bestRunTime, ), {, loopedPassesInBestRun, =, PhaseOptimizer, ., getLoopsRun, (, ), ;, bestRunTime, =, length, ;]
[., max, (, length, ,, worstRunTime, ), ;, if, (, length, <, bestRunTime, ), {, loopedPassesInBestRun, =, PhaseOptimizer, ., getLoopsRun]
[,, worstRunTime, ), ;, if, (, length, <, bestRunTime, ), {, loopedPassesInBestRun, =, PhaseOptimizer, ., getLoopsRun, (, ), ;, bestRunTime]
[), ;, if, (, length, <, bestRunTime, ), {, loopedPassesInBestRun, =, PhaseOptimizer, ., getLoopsRun, (, ), ;, bestRunTime, =, length]
[), {, loopedPassesInBestRun, =, PhaseOptimizer, ., getLoopsRun, (, ), ;, bestRunTime, =, length, ;, }, }, private, void, outputBestPhaseOrdering, (]
[<, bestRunTime, ), {, loopedPassesInBestRun, =, PhaseOptimizer, ., getLoopsRun, (, ), ;, bestRunTime, =, length, ;, }, }, private, void]
[), {, loopedPassesInBestRun, =, PhaseOptimizer, ., getLoopsRun, (, ), ;, bestRunTime, =, length, ;, }, }, private, void, outputBestPhaseOrdering, (]
[=, PhaseOptimizer, ., getLoopsRun, (, ), ;, bestRunTime, =, length, ;, }, }, private, void, outputBestPhaseOrdering, (, ), {, try]
[;, bestRunTime, =, length, ;, }, }, private, void, outputBestPhaseOrdering, (, ), {, try, {, jsOutput, ., append, (, "Best time: "]
[., getLoopsRun, (, ), ;, bestRunTime, =, length, ;, }, }, private, void, outputBestPhaseOrdering, (, ), {, try, {, jsOutput]
[=, length, ;, }, }, private, void, outputBestPhaseOrdering, (, ), {, try, {, jsOutput, ., append, (, "Best time: ", +, bestRunTime]
[;, }, }, private, void, outputBestPhaseOrdering, (, ), {, try, {, jsOutput, ., append, (, "Best time: ", +, bestRunTime, +, "\n"]
[;, jsOutput, ., append, (, "Worst time: ", +, worstRunTime, +, "\n", ), ;, int, i, =, 1, ;, for, (, List]
[., append, (, "Best time: ", +, bestRunTime, +, "\n", ), ;, jsOutput, ., append, (, "Worst time: ", +, worstRunTime, +, "\n", )]
[), ;, jsOutput, ., append, (, "Worst time: ", +, worstRunTime, +, "\n", ), ;, int, i, =, 1, ;, for, (]
[+, "\n", ), ;, jsOutput, ., append, (, "Worst time: ", +, worstRunTime, +, "\n", ), ;, int, i, =, 1, ;]
[+, bestRunTime, +, "\n", ), ;, jsOutput, ., append, (, "Worst time: ", +, worstRunTime, +, "\n", ), ;, int, i, =]
[+, "\n", ), ;, jsOutput, ., append, (, "Worst time: ", +, worstRunTime, +, "\n", ), ;, int, i, =, 1, ;]
[), ;, jsOutput, ., append, (, "Worst time: ", +, worstRunTime, +, "\n", ), ;, int, i, =, 1, ;, for, (]
[;, int, i, =, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, ., append]
[., append, (, "Worst time: ", +, worstRunTime, +, "\n", ), ;, int, i, =, 1, ;, for, (, List, <, String]
[), ;, int, i, =, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, .]
[+, "\n", ), ;, int, i, =, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {]
[+, worstRunTime, +, "\n", ), ;, int, i, =, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun]
[+, "\n", ), ;, int, i, =, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {]
[), ;, int, i, =, 1, ;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, .]
[;, for, (, List, <, String, >, loop, :, loopedPassesInBestRun, ), {, jsOutput, ., append, (, "\nLoop ", +, i, +]
[), {, jsOutput, ., append, (, "\nLoop ", +, i, +, ":\n", +, Joiner, ., on, (, "\n", ), ., join]
[;, i, ++, ;, }, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, "unexpected exception", ,, e, )]
[., append, (, "\nLoop ", +, i, +, ":\n", +, Joiner, ., on, (, "\n", ), ., join, (, loop, )]
[), ;, i, ++, ;, }, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, "unexpected exception", ,, e]
[+, "\n", ), ;, i, ++, ;, }, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, "unexpected exception"]
[+, Joiner, ., on, (, "\n", ), ., join, (, loop, ), +, "\n", ), ;, i, ++, ;, }]
[+, ":\n", +, Joiner, ., on, (, "\n", ), ., join, (, loop, ), +, "\n", ), ;, i, ++]
[+, i, +, ":\n", +, Joiner, ., on, (, "\n", ), ., join, (, loop, ), +, "\n", ), ;]
[+, ":\n", +, Joiner, ., on, (, "\n", ), ., join, (, loop, ), +, "\n", ), ;, i, ++]
[+, Joiner, ., on, (, "\n", ), ., join, (, loop, ), +, "\n", ), ;, i, ++, ;, }]
[+, "\n", ), ;, i, ++, ;, }, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, "unexpected exception"]
[., join, (, loop, ), +, "\n", ), ;, i, ++, ;, }, }, catch, (, IOException, e, ), {]
[., on, (, "\n", ), ., join, (, loop, ), +, "\n", ), ;, i, ++, ;, }, }, catch]
[), ., join, (, loop, ), +, "\n", ), ;, i, ++, ;, }, }, catch, (, IOException, e, )]
[), +, "\n", ), ;, i, ++, ;, }, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (]
[), ;, i, ++, ;, }, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, "unexpected exception", ,, e]
[;, }, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, "unexpected exception", ,, e, ), ;, }, }]
[++, ;, }, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, "unexpected exception", ,, e, ), ;, }]
[;, }, }, }, static, class, CommandLineConfig, {, private, boolean, printTree, =, false, ;, CommandLineConfig, setPrintTree, (, boolean, printTree, )]
[,, e, ), ;, }, }, }, static, class, CommandLineConfig, {, private, boolean, printTree, =, false, ;, CommandLineConfig, setPrintTree, (]
[), ;, }, }, }, static, class, CommandLineConfig, {, private, boolean, printTree, =, false, ;, CommandLineConfig, setPrintTree, (, boolean, printTree]
[;, CommandLineConfig, setPrintTree, (, boolean, printTree, ), {, this, ., printTree, =, printTree, ;, return, this, ;, }, private, boolean]
[=, printTree, ;, return, this, ;, }, private, boolean, computePhaseOrdering, =, false, ;, CommandLineConfig, setComputePhaseOrdering, (, boolean, computePhaseOrdering, ), {]
[., printTree, =, printTree, ;, return, this, ;, }, private, boolean, computePhaseOrdering, =, false, ;, CommandLineConfig, setComputePhaseOrdering, (, boolean, computePhaseOrdering]
[;, return, this, ;, }, private, boolean, computePhaseOrdering, =, false, ;, CommandLineConfig, setComputePhaseOrdering, (, boolean, computePhaseOrdering, ), {, this, .]
[;, }, private, boolean, computePhaseOrdering, =, false, ;, CommandLineConfig, setComputePhaseOrdering, (, boolean, computePhaseOrdering, ), {, this, ., computePhaseOrdering, =, computePhaseOrdering]
[;, CommandLineConfig, setComputePhaseOrdering, (, boolean, computePhaseOrdering, ), {, this, ., computePhaseOrdering, =, computePhaseOrdering, ;, return, this, ;, }, private, boolean]
[=, computePhaseOrdering, ;, return, this, ;, }, private, boolean, printAst, =, false, ;, CommandLineConfig, setPrintAst, (, boolean, printAst, ), {]
[., computePhaseOrdering, =, computePhaseOrdering, ;, return, this, ;, }, private, boolean, printAst, =, false, ;, CommandLineConfig, setPrintAst, (, boolean, printAst]
[;, return, this, ;, }, private, boolean, printAst, =, false, ;, CommandLineConfig, setPrintAst, (, boolean, printAst, ), {, this, .]
[;, }, private, boolean, printAst, =, false, ;, CommandLineConfig, setPrintAst, (, boolean, printAst, ), {, this, ., printAst, =, printAst]
[;, CommandLineConfig, setPrintAst, (, boolean, printAst, ), {, this, ., printAst, =, printAst, ;, return, this, ;, }, private, boolean]
[=, printAst, ;, return, this, ;, }, private, boolean, printPassGraph, =, false, ;, CommandLineConfig, setPrintPassGraph, (, boolean, printPassGraph, ), {]
[., printAst, =, printAst, ;, return, this, ;, }, private, boolean, printPassGraph, =, false, ;, CommandLineConfig, setPrintPassGraph, (, boolean, printPassGraph]
[;, return, this, ;, }, private, boolean, printPassGraph, =, false, ;, CommandLineConfig, setPrintPassGraph, (, boolean, printPassGraph, ), {, this, .]
[;, }, private, boolean, printPassGraph, =, false, ;, CommandLineConfig, setPrintPassGraph, (, boolean, printPassGraph, ), {, this, ., printPassGraph, =, printPassGraph]
[;, CommandLineConfig, setPrintPassGraph, (, boolean, printPassGraph, ), {, this, ., printPassGraph, =, printPassGraph, ;, return, this, ;, }, private, CompilerOptions]
[=, printPassGraph, ;, return, this, ;, }, private, CompilerOptions, ., DevMode, jscompDevMode, =, CompilerOptions, ., DevMode, ., OFF, ;, CommandLineConfig]
[., printPassGraph, =, printPassGraph, ;, return, this, ;, }, private, CompilerOptions, ., DevMode, jscompDevMode, =, CompilerOptions, ., DevMode, ., OFF]
[;, return, this, ;, }, private, CompilerOptions, ., DevMode, jscompDevMode, =, CompilerOptions, ., DevMode, ., OFF, ;, CommandLineConfig, setJscompDevMode, (]
[;, }, private, CompilerOptions, ., DevMode, jscompDevMode, =, CompilerOptions, ., DevMode, ., OFF, ;, CommandLineConfig, setJscompDevMode, (, CompilerOptions, ., DevMode]
[;, CommandLineConfig, setJscompDevMode, (, CompilerOptions, ., DevMode, jscompDevMode, ), {, this, ., jscompDevMode, =, jscompDevMode, ;, return, this, ;, }]
[., OFF, ;, CommandLineConfig, setJscompDevMode, (, CompilerOptions, ., DevMode, jscompDevMode, ), {, this, ., jscompDevMode, =, jscompDevMode, ;, return, this]
[., DevMode, ., OFF, ;, CommandLineConfig, setJscompDevMode, (, CompilerOptions, ., DevMode, jscompDevMode, ), {, this, ., jscompDevMode, =, jscompDevMode, ;]
[=, jscompDevMode, ;, return, this, ;, }, private, String, loggingLevel, =, Level, ., WARNING, ., getName, (, ), ;, CommandLineConfig]
[., jscompDevMode, =, jscompDevMode, ;, return, this, ;, }, private, String, loggingLevel, =, Level, ., WARNING, ., getName, (, )]
[;, return, this, ;, }, private, String, loggingLevel, =, Level, ., WARNING, ., getName, (, ), ;, CommandLineConfig, setLoggingLevel, (]
[;, }, private, String, loggingLevel, =, Level, ., WARNING, ., getName, (, ), ;, CommandLineConfig, setLoggingLevel, (, String, loggingLevel, )]
[;, CommandLineConfig, setLoggingLevel, (, String, loggingLevel, ), {, this, ., loggingLevel, =, loggingLevel, ;, return, this, ;, }, private, final]
[., getName, (, ), ;, CommandLineConfig, setLoggingLevel, (, String, loggingLevel, ), {, this, ., loggingLevel, =, loggingLevel, ;, return, this]
[., WARNING, ., getName, (, ), ;, CommandLineConfig, setLoggingLevel, (, String, loggingLevel, ), {, this, ., loggingLevel, =, loggingLevel, ;]
[=, loggingLevel, ;, return, this, ;, }, private, final, List, <, String, >, externs, =, Lists, ., newArrayList, (, )]
[., loggingLevel, =, loggingLevel, ;, return, this, ;, }, private, final, List, <, String, >, externs, =, Lists, ., newArrayList]
[;, return, this, ;, }, private, final, List, <, String, >, externs, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig]
[;, }, private, final, List, <, String, >, externs, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setExterns, (, List]
[;, CommandLineConfig, setExterns, (, List, <, String, >, externs, ), {, this, ., externs, ., clear, (, ), ;, this]
[., newArrayList, (, ), ;, CommandLineConfig, setExterns, (, List, <, String, >, externs, ), {, this, ., externs, ., clear]
[;, this, ., externs, ., addAll, (, externs, ), ;, return, this, ;, }, private, final, List, <, String, >]
[., clear, (, ), ;, this, ., externs, ., addAll, (, externs, ), ;, return, this, ;, }, private, final]
[., externs, ., clear, (, ), ;, this, ., externs, ., addAll, (, externs, ), ;, return, this, ;, }]
[;, return, this, ;, }, private, final, List, <, String, >, js, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig]
[., addAll, (, externs, ), ;, return, this, ;, }, private, final, List, <, String, >, js, =, Lists, .]
[., externs, ., addAll, (, externs, ), ;, return, this, ;, }, private, final, List, <, String, >, js, =]
[), ;, return, this, ;, }, private, final, List, <, String, >, js, =, Lists, ., newArrayList, (, ), ;]
[;, }, private, final, List, <, String, >, js, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setJs, (, List]
[;, CommandLineConfig, setJs, (, List, <, String, >, js, ), {, this, ., js, ., clear, (, ), ;, this]
[., newArrayList, (, ), ;, CommandLineConfig, setJs, (, List, <, String, >, js, ), {, this, ., js, ., clear]
[;, this, ., js, ., addAll, (, js, ), ;, return, this, ;, }, private, String, jsOutputFile, =, "", ;]
[., clear, (, ), ;, this, ., js, ., addAll, (, js, ), ;, return, this, ;, }, private, String]
[., js, ., clear, (, ), ;, this, ., js, ., addAll, (, js, ), ;, return, this, ;, }]
[;, return, this, ;, }, private, String, jsOutputFile, =, "", ;, CommandLineConfig, setJsOutputFile, (, String, jsOutputFile, ), {, this, .]
[., addAll, (, js, ), ;, return, this, ;, }, private, String, jsOutputFile, =, "", ;, CommandLineConfig, setJsOutputFile, (, String]
[., js, ., addAll, (, js, ), ;, return, this, ;, }, private, String, jsOutputFile, =, "", ;, CommandLineConfig, setJsOutputFile]
[), ;, return, this, ;, }, private, String, jsOutputFile, =, "", ;, CommandLineConfig, setJsOutputFile, (, String, jsOutputFile, ), {, this]
[;, }, private, String, jsOutputFile, =, "", ;, CommandLineConfig, setJsOutputFile, (, String, jsOutputFile, ), {, this, ., jsOutputFile, =, jsOutputFile]
[;, CommandLineConfig, setJsOutputFile, (, String, jsOutputFile, ), {, this, ., jsOutputFile, =, jsOutputFile, ;, return, this, ;, }, private, final]
[=, jsOutputFile, ;, return, this, ;, }, private, final, List, <, String, >, module, =, Lists, ., newArrayList, (, )]
[., jsOutputFile, =, jsOutputFile, ;, return, this, ;, }, private, final, List, <, String, >, module, =, Lists, ., newArrayList]
[;, return, this, ;, }, private, final, List, <, String, >, module, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig]
[;, }, private, final, List, <, String, >, module, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setModule, (, List]
[;, CommandLineConfig, setModule, (, List, <, String, >, module, ), {, this, ., module, ., clear, (, ), ;, this]
[., newArrayList, (, ), ;, CommandLineConfig, setModule, (, List, <, String, >, module, ), {, this, ., module, ., clear]
[;, this, ., module, ., addAll, (, module, ), ;, return, this, ;, }, private, String, variableMapInputFile, =, "", ;]
[., clear, (, ), ;, this, ., module, ., addAll, (, module, ), ;, return, this, ;, }, private, String]
[., module, ., clear, (, ), ;, this, ., module, ., addAll, (, module, ), ;, return, this, ;, }]
[;, return, this, ;, }, private, String, variableMapInputFile, =, "", ;, CommandLineConfig, setVariableMapInputFile, (, String, variableMapInputFile, ), {, this, .]
[., addAll, (, module, ), ;, return, this, ;, }, private, String, variableMapInputFile, =, "", ;, CommandLineConfig, setVariableMapInputFile, (, String]
[., module, ., addAll, (, module, ), ;, return, this, ;, }, private, String, variableMapInputFile, =, "", ;, CommandLineConfig, setVariableMapInputFile]
[), ;, return, this, ;, }, private, String, variableMapInputFile, =, "", ;, CommandLineConfig, setVariableMapInputFile, (, String, variableMapInputFile, ), {, this]
[;, }, private, String, variableMapInputFile, =, "", ;, CommandLineConfig, setVariableMapInputFile, (, String, variableMapInputFile, ), {, this, ., variableMapInputFile, =, variableMapInputFile]
[;, CommandLineConfig, setVariableMapInputFile, (, String, variableMapInputFile, ), {, this, ., variableMapInputFile, =, variableMapInputFile, ;, return, this, ;, }, private, String]
[=, variableMapInputFile, ;, return, this, ;, }, private, String, propertyMapInputFile, =, "", ;, CommandLineConfig, setPropertyMapInputFile, (, String, propertyMapInputFile, ), {]
[., variableMapInputFile, =, variableMapInputFile, ;, return, this, ;, }, private, String, propertyMapInputFile, =, "", ;, CommandLineConfig, setPropertyMapInputFile, (, String, propertyMapInputFile]
[;, return, this, ;, }, private, String, propertyMapInputFile, =, "", ;, CommandLineConfig, setPropertyMapInputFile, (, String, propertyMapInputFile, ), {, this, .]
[;, }, private, String, propertyMapInputFile, =, "", ;, CommandLineConfig, setPropertyMapInputFile, (, String, propertyMapInputFile, ), {, this, ., propertyMapInputFile, =, propertyMapInputFile]
[;, CommandLineConfig, setPropertyMapInputFile, (, String, propertyMapInputFile, ), {, this, ., propertyMapInputFile, =, propertyMapInputFile, ;, return, this, ;, }, private, String]
[=, propertyMapInputFile, ;, return, this, ;, }, private, String, variableMapOutputFile, =, "", ;, CommandLineConfig, setVariableMapOutputFile, (, String, variableMapOutputFile, ), {]
[., propertyMapInputFile, =, propertyMapInputFile, ;, return, this, ;, }, private, String, variableMapOutputFile, =, "", ;, CommandLineConfig, setVariableMapOutputFile, (, String, variableMapOutputFile]
[;, return, this, ;, }, private, String, variableMapOutputFile, =, "", ;, CommandLineConfig, setVariableMapOutputFile, (, String, variableMapOutputFile, ), {, this, .]
[;, }, private, String, variableMapOutputFile, =, "", ;, CommandLineConfig, setVariableMapOutputFile, (, String, variableMapOutputFile, ), {, this, ., variableMapOutputFile, =, variableMapOutputFile]
[;, CommandLineConfig, setVariableMapOutputFile, (, String, variableMapOutputFile, ), {, this, ., variableMapOutputFile, =, variableMapOutputFile, ;, return, this, ;, }, private, boolean]
[=, variableMapOutputFile, ;, return, this, ;, }, private, boolean, createNameMapFiles, =, false, ;, CommandLineConfig, setCreateNameMapFiles, (, boolean, createNameMapFiles, ), {]
[., variableMapOutputFile, =, variableMapOutputFile, ;, return, this, ;, }, private, boolean, createNameMapFiles, =, false, ;, CommandLineConfig, setCreateNameMapFiles, (, boolean, createNameMapFiles]
[;, return, this, ;, }, private, boolean, createNameMapFiles, =, false, ;, CommandLineConfig, setCreateNameMapFiles, (, boolean, createNameMapFiles, ), {, this, .]
[;, }, private, boolean, createNameMapFiles, =, false, ;, CommandLineConfig, setCreateNameMapFiles, (, boolean, createNameMapFiles, ), {, this, ., createNameMapFiles, =, createNameMapFiles]
[;, CommandLineConfig, setCreateNameMapFiles, (, boolean, createNameMapFiles, ), {, this, ., createNameMapFiles, =, createNameMapFiles, ;, return, this, ;, }, private, String]
[=, createNameMapFiles, ;, return, this, ;, }, private, String, propertyMapOutputFile, =, "", ;, CommandLineConfig, setPropertyMapOutputFile, (, String, propertyMapOutputFile, ), {]
[., createNameMapFiles, =, createNameMapFiles, ;, return, this, ;, }, private, String, propertyMapOutputFile, =, "", ;, CommandLineConfig, setPropertyMapOutputFile, (, String, propertyMapOutputFile]
[;, return, this, ;, }, private, String, propertyMapOutputFile, =, "", ;, CommandLineConfig, setPropertyMapOutputFile, (, String, propertyMapOutputFile, ), {, this, .]
[;, }, private, String, propertyMapOutputFile, =, "", ;, CommandLineConfig, setPropertyMapOutputFile, (, String, propertyMapOutputFile, ), {, this, ., propertyMapOutputFile, =, propertyMapOutputFile]
[;, CommandLineConfig, setPropertyMapOutputFile, (, String, propertyMapOutputFile, ), {, this, ., propertyMapOutputFile, =, propertyMapOutputFile, ;, return, this, ;, }, private, CodingConvention]
[=, propertyMapOutputFile, ;, return, this, ;, }, private, CodingConvention, codingConvention, =, CodingConventions, ., getDefault, (, ), ;, CommandLineConfig, setCodingConvention, (]
[., propertyMapOutputFile, =, propertyMapOutputFile, ;, return, this, ;, }, private, CodingConvention, codingConvention, =, CodingConventions, ., getDefault, (, ), ;, CommandLineConfig]
[;, return, this, ;, }, private, CodingConvention, codingConvention, =, CodingConventions, ., getDefault, (, ), ;, CommandLineConfig, setCodingConvention, (, CodingConvention, codingConvention]
[;, }, private, CodingConvention, codingConvention, =, CodingConventions, ., getDefault, (, ), ;, CommandLineConfig, setCodingConvention, (, CodingConvention, codingConvention, ), {, this]
[;, CommandLineConfig, setCodingConvention, (, CodingConvention, codingConvention, ), {, this, ., codingConvention, =, codingConvention, ;, return, this, ;, }, private, int]
[., getDefault, (, ), ;, CommandLineConfig, setCodingConvention, (, CodingConvention, codingConvention, ), {, this, ., codingConvention, =, codingConvention, ;, return, this]
[=, codingConvention, ;, return, this, ;, }, private, int, summaryDetailLevel, =, 1, ;, CommandLineConfig, setSummaryDetailLevel, (, int, summaryDetailLevel, ), {]
[., codingConvention, =, codingConvention, ;, return, this, ;, }, private, int, summaryDetailLevel, =, 1, ;, CommandLineConfig, setSummaryDetailLevel, (, int, summaryDetailLevel]
[;, return, this, ;, }, private, int, summaryDetailLevel, =, 1, ;, CommandLineConfig, setSummaryDetailLevel, (, int, summaryDetailLevel, ), {, this, .]
[;, }, private, int, summaryDetailLevel, =, 1, ;, CommandLineConfig, setSummaryDetailLevel, (, int, summaryDetailLevel, ), {, this, ., summaryDetailLevel, =, summaryDetailLevel]
[;, CommandLineConfig, setSummaryDetailLevel, (, int, summaryDetailLevel, ), {, this, ., summaryDetailLevel, =, summaryDetailLevel, ;, return, this, ;, }, private, String]
[=, summaryDetailLevel, ;, return, this, ;, }, private, String, outputWrapper, =, "", ;, CommandLineConfig, setOutputWrapper, (, String, outputWrapper, ), {]
[., summaryDetailLevel, =, summaryDetailLevel, ;, return, this, ;, }, private, String, outputWrapper, =, "", ;, CommandLineConfig, setOutputWrapper, (, String, outputWrapper]
[;, return, this, ;, }, private, String, outputWrapper, =, "", ;, CommandLineConfig, setOutputWrapper, (, String, outputWrapper, ), {, this, .]
[;, }, private, String, outputWrapper, =, "", ;, CommandLineConfig, setOutputWrapper, (, String, outputWrapper, ), {, this, ., outputWrapper, =, outputWrapper]
[;, CommandLineConfig, setOutputWrapper, (, String, outputWrapper, ), {, this, ., outputWrapper, =, outputWrapper, ;, return, this, ;, }, private, final]
[=, outputWrapper, ;, return, this, ;, }, private, final, List, <, String, >, moduleWrapper, =, Lists, ., newArrayList, (, )]
[., outputWrapper, =, outputWrapper, ;, return, this, ;, }, private, final, List, <, String, >, moduleWrapper, =, Lists, ., newArrayList]
[;, return, this, ;, }, private, final, List, <, String, >, moduleWrapper, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig]
[;, }, private, final, List, <, String, >, moduleWrapper, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setModuleWrapper, (, List]
[;, CommandLineConfig, setModuleWrapper, (, List, <, String, >, moduleWrapper, ), {, this, ., moduleWrapper, ., clear, (, ), ;, this]
[., newArrayList, (, ), ;, CommandLineConfig, setModuleWrapper, (, List, <, String, >, moduleWrapper, ), {, this, ., moduleWrapper, ., clear]
[;, this, ., moduleWrapper, ., addAll, (, moduleWrapper, ), ;, return, this, ;, }, private, String, moduleOutputPathPrefix, =, "", ;]
[., clear, (, ), ;, this, ., moduleWrapper, ., addAll, (, moduleWrapper, ), ;, return, this, ;, }, private, String]
[., moduleWrapper, ., clear, (, ), ;, this, ., moduleWrapper, ., addAll, (, moduleWrapper, ), ;, return, this, ;, }]
[;, return, this, ;, }, private, String, moduleOutputPathPrefix, =, "", ;, CommandLineConfig, setModuleOutputPathPrefix, (, String, moduleOutputPathPrefix, ), {, this, .]
[., addAll, (, moduleWrapper, ), ;, return, this, ;, }, private, String, moduleOutputPathPrefix, =, "", ;, CommandLineConfig, setModuleOutputPathPrefix, (, String]
[., moduleWrapper, ., addAll, (, moduleWrapper, ), ;, return, this, ;, }, private, String, moduleOutputPathPrefix, =, "", ;, CommandLineConfig, setModuleOutputPathPrefix]
[), ;, return, this, ;, }, private, String, moduleOutputPathPrefix, =, "", ;, CommandLineConfig, setModuleOutputPathPrefix, (, String, moduleOutputPathPrefix, ), {, this]
[;, }, private, String, moduleOutputPathPrefix, =, "", ;, CommandLineConfig, setModuleOutputPathPrefix, (, String, moduleOutputPathPrefix, ), {, this, ., moduleOutputPathPrefix, =, moduleOutputPathPrefix]
[;, CommandLineConfig, setModuleOutputPathPrefix, (, String, moduleOutputPathPrefix, ), {, this, ., moduleOutputPathPrefix, =, moduleOutputPathPrefix, ;, return, this, ;, }, private, String]
[=, moduleOutputPathPrefix, ;, return, this, ;, }, private, String, createSourceMap, =, "", ;, CommandLineConfig, setCreateSourceMap, (, String, createSourceMap, ), {]
[., moduleOutputPathPrefix, =, moduleOutputPathPrefix, ;, return, this, ;, }, private, String, createSourceMap, =, "", ;, CommandLineConfig, setCreateSourceMap, (, String, createSourceMap]
[;, return, this, ;, }, private, String, createSourceMap, =, "", ;, CommandLineConfig, setCreateSourceMap, (, String, createSourceMap, ), {, this, .]
[;, }, private, String, createSourceMap, =, "", ;, CommandLineConfig, setCreateSourceMap, (, String, createSourceMap, ), {, this, ., createSourceMap, =, createSourceMap]
[;, CommandLineConfig, setCreateSourceMap, (, String, createSourceMap, ), {, this, ., createSourceMap, =, createSourceMap, ;, return, this, ;, }, private, SourceMap]
[=, createSourceMap, ;, return, this, ;, }, private, SourceMap, ., DetailLevel, sourceMapDetailLevel, =, SourceMap, ., DetailLevel, ., ALL, ;, CommandLineConfig]
[., createSourceMap, =, createSourceMap, ;, return, this, ;, }, private, SourceMap, ., DetailLevel, sourceMapDetailLevel, =, SourceMap, ., DetailLevel, ., ALL]
[;, return, this, ;, }, private, SourceMap, ., DetailLevel, sourceMapDetailLevel, =, SourceMap, ., DetailLevel, ., ALL, ;, CommandLineConfig, setSourceMapDetailLevel, (]
[;, }, private, SourceMap, ., DetailLevel, sourceMapDetailLevel, =, SourceMap, ., DetailLevel, ., ALL, ;, CommandLineConfig, setSourceMapDetailLevel, (, SourceMap, ., DetailLevel]
[;, CommandLineConfig, setSourceMapDetailLevel, (, SourceMap, ., DetailLevel, level, ), {, this, ., sourceMapDetailLevel, =, level, ;, return, this, ;, }]
[., ALL, ;, CommandLineConfig, setSourceMapDetailLevel, (, SourceMap, ., DetailLevel, level, ), {, this, ., sourceMapDetailLevel, =, level, ;, return, this]
[., DetailLevel, ., ALL, ;, CommandLineConfig, setSourceMapDetailLevel, (, SourceMap, ., DetailLevel, level, ), {, this, ., sourceMapDetailLevel, =, level, ;]
[=, level, ;, return, this, ;, }, private, SourceMap, ., Format, sourceMapFormat, =, SourceMap, ., Format, ., DEFAULT, ;, CommandLineConfig]
[., sourceMapDetailLevel, =, level, ;, return, this, ;, }, private, SourceMap, ., Format, sourceMapFormat, =, SourceMap, ., Format, ., DEFAULT]
[;, return, this, ;, }, private, SourceMap, ., Format, sourceMapFormat, =, SourceMap, ., Format, ., DEFAULT, ;, CommandLineConfig, setSourceMapFormat, (]
[;, }, private, SourceMap, ., Format, sourceMapFormat, =, SourceMap, ., Format, ., DEFAULT, ;, CommandLineConfig, setSourceMapFormat, (, SourceMap, ., Format]
[;, CommandLineConfig, setSourceMapFormat, (, SourceMap, ., Format, format, ), {, this, ., sourceMapFormat, =, format, ;, return, this, ;, }]
[., DEFAULT, ;, CommandLineConfig, setSourceMapFormat, (, SourceMap, ., Format, format, ), {, this, ., sourceMapFormat, =, format, ;, return, this]
[., Format, ., DEFAULT, ;, CommandLineConfig, setSourceMapFormat, (, SourceMap, ., Format, format, ), {, this, ., sourceMapFormat, =, format, ;]
[=, format, ;, return, this, ;, }, private, WarningGuardSpec, warningGuards, =, null, ;, CommandLineConfig, setWarningGuardSpec, (, WarningGuardSpec, spec, ), {]
[., sourceMapFormat, =, format, ;, return, this, ;, }, private, WarningGuardSpec, warningGuards, =, null, ;, CommandLineConfig, setWarningGuardSpec, (, WarningGuardSpec, spec]
[;, return, this, ;, }, private, WarningGuardSpec, warningGuards, =, null, ;, CommandLineConfig, setWarningGuardSpec, (, WarningGuardSpec, spec, ), {, this, .]
[;, }, private, WarningGuardSpec, warningGuards, =, null, ;, CommandLineConfig, setWarningGuardSpec, (, WarningGuardSpec, spec, ), {, this, ., warningGuards, =, spec]
[;, CommandLineConfig, setWarningGuardSpec, (, WarningGuardSpec, spec, ), {, this, ., warningGuards, =, spec, ;, return, this, ;, }, private, final]
[=, spec, ;, return, this, ;, }, private, final, List, <, String, >, define, =, Lists, ., newArrayList, (, )]
[., warningGuards, =, spec, ;, return, this, ;, }, private, final, List, <, String, >, define, =, Lists, ., newArrayList]
[;, return, this, ;, }, private, final, List, <, String, >, define, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig]
[;, }, private, final, List, <, String, >, define, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setDefine, (, List]
[;, CommandLineConfig, setDefine, (, List, <, String, >, define, ), {, this, ., define, ., clear, (, ), ;, this]
[., newArrayList, (, ), ;, CommandLineConfig, setDefine, (, List, <, String, >, define, ), {, this, ., define, ., clear]
[;, this, ., define, ., addAll, (, define, ), ;, return, this, ;, }, private, final, List, <, String, >]
[., clear, (, ), ;, this, ., define, ., addAll, (, define, ), ;, return, this, ;, }, private, final]
[., define, ., clear, (, ), ;, this, ., define, ., addAll, (, define, ), ;, return, this, ;, }]
[;, return, this, ;, }, private, final, List, <, String, >, tweak, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig]
[., addAll, (, define, ), ;, return, this, ;, }, private, final, List, <, String, >, tweak, =, Lists, .]
[., define, ., addAll, (, define, ), ;, return, this, ;, }, private, final, List, <, String, >, tweak, =]
[), ;, return, this, ;, }, private, final, List, <, String, >, tweak, =, Lists, ., newArrayList, (, ), ;]
[;, }, private, final, List, <, String, >, tweak, =, Lists, ., newArrayList, (, ), ;, CommandLineConfig, setTweak, (, List]
[;, CommandLineConfig, setTweak, (, List, <, String, >, tweak, ), {, this, ., tweak, ., clear, (, ), ;, this]
[., newArrayList, (, ), ;, CommandLineConfig, setTweak, (, List, <, String, >, tweak, ), {, this, ., tweak, ., clear]
[;, this, ., tweak, ., addAll, (, tweak, ), ;, return, this, ;, }, private, TweakProcessing, tweakProcessing, =, TweakProcessing, .]
[., clear, (, ), ;, this, ., tweak, ., addAll, (, tweak, ), ;, return, this, ;, }, private, TweakProcessing]
[., tweak, ., clear, (, ), ;, this, ., tweak, ., addAll, (, tweak, ), ;, return, this, ;, }]
[;, return, this, ;, }, private, TweakProcessing, tweakProcessing, =, TweakProcessing, ., OFF, ;, CommandLineConfig, setTweakProcessing, (, TweakProcessing, tweakProcessing, ), {]
[., addAll, (, tweak, ), ;, return, this, ;, }, private, TweakProcessing, tweakProcessing, =, TweakProcessing, ., OFF, ;, CommandLineConfig, setTweakProcessing]
[., tweak, ., addAll, (, tweak, ), ;, return, this, ;, }, private, TweakProcessing, tweakProcessing, =, TweakProcessing, ., OFF, ;]
[), ;, return, this, ;, }, private, TweakProcessing, tweakProcessing, =, TweakProcessing, ., OFF, ;, CommandLineConfig, setTweakProcessing, (, TweakProcessing, tweakProcessing, )]
[;, }, private, TweakProcessing, tweakProcessing, =, TweakProcessing, ., OFF, ;, CommandLineConfig, setTweakProcessing, (, TweakProcessing, tweakProcessing, ), {, this, ., tweakProcessing]
[;, CommandLineConfig, setTweakProcessing, (, TweakProcessing, tweakProcessing, ), {, this, ., tweakProcessing, =, tweakProcessing, ;, return, this, ;, }, private, String]
[., OFF, ;, CommandLineConfig, setTweakProcessing, (, TweakProcessing, tweakProcessing, ), {, this, ., tweakProcessing, =, tweakProcessing, ;, return, this, ;, }]
[=, tweakProcessing, ;, return, this, ;, }, private, String, charset, =, "", ;, CommandLineConfig, setCharset, (, String, charset, ), {]
[., tweakProcessing, =, tweakProcessing, ;, return, this, ;, }, private, String, charset, =, "", ;, CommandLineConfig, setCharset, (, String, charset]
[;, return, this, ;, }, private, String, charset, =, "", ;, CommandLineConfig, setCharset, (, String, charset, ), {, this, .]
[;, }, private, String, charset, =, "", ;, CommandLineConfig, setCharset, (, String, charset, ), {, this, ., charset, =, charset]
[;, CommandLineConfig, setCharset, (, String, charset, ), {, this, ., charset, =, charset, ;, return, this, ;, }, private, boolean]
[=, charset, ;, return, this, ;, }, private, boolean, manageClosureDependencies, =, false, ;, CommandLineConfig, setManageClosureDependencies, (, boolean, newVal, ), {]
[., charset, =, charset, ;, return, this, ;, }, private, boolean, manageClosureDependencies, =, false, ;, CommandLineConfig, setManageClosureDependencies, (, boolean, newVal]
[;, return, this, ;, }, private, boolean, manageClosureDependencies, =, false, ;, CommandLineConfig, setManageClosureDependencies, (, boolean, newVal, ), {, this, .]
[;, }, private, boolean, manageClosureDependencies, =, false, ;, CommandLineConfig, setManageClosureDependencies, (, boolean, newVal, ), {, this, ., manageClosureDependencies, =, newVal]
[;, CommandLineConfig, setManageClosureDependencies, (, boolean, newVal, ), {, this, ., manageClosureDependencies, =, newVal, ;, return, this, ;, }, private, boolean]
[=, newVal, ;, return, this, ;, }, private, boolean, onlyClosureDependencies, =, false, ;, CommandLineConfig, setOnlyClosureDependencies, (, boolean, newVal, ), {]
[., manageClosureDependencies, =, newVal, ;, return, this, ;, }, private, boolean, onlyClosureDependencies, =, false, ;, CommandLineConfig, setOnlyClosureDependencies, (, boolean, newVal]
[;, return, this, ;, }, private, boolean, onlyClosureDependencies, =, false, ;, CommandLineConfig, setOnlyClosureDependencies, (, boolean, newVal, ), {, this, .]
[;, }, private, boolean, onlyClosureDependencies, =, false, ;, CommandLineConfig, setOnlyClosureDependencies, (, boolean, newVal, ), {, this, ., onlyClosureDependencies, =, newVal]
[;, CommandLineConfig, setOnlyClosureDependencies, (, boolean, newVal, ), {, this, ., onlyClosureDependencies, =, newVal, ;, return, this, ;, }, private, List]
[=, newVal, ;, return, this, ;, }, private, List, <, String, >, closureEntryPoints, =, ImmutableList, ., of, (, ), ;]
[., onlyClosureDependencies, =, newVal, ;, return, this, ;, }, private, List, <, String, >, closureEntryPoints, =, ImmutableList, ., of, (]
[;, return, this, ;, }, private, List, <, String, >, closureEntryPoints, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setClosureEntryPoints]
[;, }, private, List, <, String, >, closureEntryPoints, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setClosureEntryPoints, (, List, <]
[;, CommandLineConfig, setClosureEntryPoints, (, List, <, String, >, entryPoints, ), {, Preconditions, ., checkNotNull, (, entryPoints, ), ;, this, .]
[., of, (, ), ;, CommandLineConfig, setClosureEntryPoints, (, List, <, String, >, entryPoints, ), {, Preconditions, ., checkNotNull, (, entryPoints]
[;, this, ., closureEntryPoints, =, entryPoints, ;, return, this, ;, }, private, List, <, String, >, outputManifests, =, ImmutableList, .]
[., checkNotNull, (, entryPoints, ), ;, this, ., closureEntryPoints, =, entryPoints, ;, return, this, ;, }, private, List, <, String]
[), ;, this, ., closureEntryPoints, =, entryPoints, ;, return, this, ;, }, private, List, <, String, >, outputManifests, =, ImmutableList]
[=, entryPoints, ;, return, this, ;, }, private, List, <, String, >, outputManifests, =, ImmutableList, ., of, (, ), ;]
[., closureEntryPoints, =, entryPoints, ;, return, this, ;, }, private, List, <, String, >, outputManifests, =, ImmutableList, ., of, (]
[;, return, this, ;, }, private, List, <, String, >, outputManifests, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setOutputManifest]
[;, }, private, List, <, String, >, outputManifests, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setOutputManifest, (, List, <]
[;, CommandLineConfig, setOutputManifest, (, List, <, String, >, outputManifests, ), {, this, ., outputManifests, =, Lists, ., newArrayList, (, )]
[., of, (, ), ;, CommandLineConfig, setOutputManifest, (, List, <, String, >, outputManifests, ), {, this, ., outputManifests, =, Lists]
[=, Lists, ., newArrayList, (, ), ;, for, (, String, manifestName, :, outputManifests, ), {, if, (, !, manifestName, .]
[., outputManifests, =, Lists, ., newArrayList, (, ), ;, for, (, String, manifestName, :, outputManifests, ), {, if, (, !]
[;, for, (, String, manifestName, :, outputManifests, ), {, if, (, !, manifestName, ., isEmpty, (, ), ), {, this]
[., newArrayList, (, ), ;, for, (, String, manifestName, :, outputManifests, ), {, if, (, !, manifestName, ., isEmpty, (]
[), {, if, (, !, manifestName, ., isEmpty, (, ), ), {, this, ., outputManifests, ., add, (, manifestName, )]
[), {, this, ., outputManifests, ., add, (, manifestName, ), ;, }, }, this, ., outputManifests, =, ImmutableList, ., copyOf]
[), {, this, ., outputManifests, ., add, (, manifestName, ), ;, }, }, this, ., outputManifests, =, ImmutableList, ., copyOf]
[., isEmpty, (, ), ), {, this, ., outputManifests, ., add, (, manifestName, ), ;, }, }, this, ., outputManifests]
[;, }, }, this, ., outputManifests, =, ImmutableList, ., copyOf, (, this, ., outputManifests, ), ;, return, this, ;, }]
[., add, (, manifestName, ), ;, }, }, this, ., outputManifests, =, ImmutableList, ., copyOf, (, this, ., outputManifests, )]
[., outputManifests, ., add, (, manifestName, ), ;, }, }, this, ., outputManifests, =, ImmutableList, ., copyOf, (, this, .]
[), ;, }, }, this, ., outputManifests, =, ImmutableList, ., copyOf, (, this, ., outputManifests, ), ;, return, this, ;]
[=, ImmutableList, ., copyOf, (, this, ., outputManifests, ), ;, return, this, ;, }, private, String, outputModuleDependencies, =, null, ;]
[., outputManifests, =, ImmutableList, ., copyOf, (, this, ., outputManifests, ), ;, return, this, ;, }, private, String, outputModuleDependencies, =]
[;, return, this, ;, }, private, String, outputModuleDependencies, =, null, ;, CommandLineConfig, setOutputModuleDependencies, (, String, outputModuleDependencies, ), {, this, .]
[., copyOf, (, this, ., outputManifests, ), ;, return, this, ;, }, private, String, outputModuleDependencies, =, null, ;, CommandLineConfig, setOutputModuleDependencies]
[), ;, return, this, ;, }, private, String, outputModuleDependencies, =, null, ;, CommandLineConfig, setOutputModuleDependencies, (, String, outputModuleDependencies, ), {, this]
[., outputManifests, ), ;, return, this, ;, }, private, String, outputModuleDependencies, =, null, ;, CommandLineConfig, setOutputModuleDependencies, (, String, outputModuleDependencies, )]
[;, }, private, String, outputModuleDependencies, =, null, ;, CommandLineConfig, setOutputModuleDependencies, (, String, outputModuleDependencies, ), {, this, ., outputModuleDependencies, =, outputModuleDependencies]
[;, CommandLineConfig, setOutputModuleDependencies, (, String, outputModuleDependencies, ), {, this, ., outputModuleDependencies, =, outputModuleDependencies, ;, return, this, ;, }, private, List]
[=, outputModuleDependencies, ;, return, this, ;, }, private, List, <, String, >, outputBundles, =, ImmutableList, ., of, (, ), ;]
[., outputModuleDependencies, =, outputModuleDependencies, ;, return, this, ;, }, private, List, <, String, >, outputBundles, =, ImmutableList, ., of, (]
[;, return, this, ;, }, private, List, <, String, >, outputBundles, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setOutputBundle]
[;, }, private, List, <, String, >, outputBundles, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setOutputBundle, (, List, <]
[;, CommandLineConfig, setOutputBundle, (, List, <, String, >, outputBundles, ), {, this, ., outputBundles, =, outputBundles, ;, return, this, ;]
[., of, (, ), ;, CommandLineConfig, setOutputBundle, (, List, <, String, >, outputBundles, ), {, this, ., outputBundles, =, outputBundles]
[=, outputBundles, ;, return, this, ;, }, private, boolean, acceptConstKeyword, =, false, ;, CommandLineConfig, setAcceptConstKeyword, (, boolean, acceptConstKeyword, ), {]
[., outputBundles, =, outputBundles, ;, return, this, ;, }, private, boolean, acceptConstKeyword, =, false, ;, CommandLineConfig, setAcceptConstKeyword, (, boolean, acceptConstKeyword]
[;, return, this, ;, }, private, boolean, acceptConstKeyword, =, false, ;, CommandLineConfig, setAcceptConstKeyword, (, boolean, acceptConstKeyword, ), {, this, .]
[;, }, private, boolean, acceptConstKeyword, =, false, ;, CommandLineConfig, setAcceptConstKeyword, (, boolean, acceptConstKeyword, ), {, this, ., acceptConstKeyword, =, acceptConstKeyword]
[;, CommandLineConfig, setAcceptConstKeyword, (, boolean, acceptConstKeyword, ), {, this, ., acceptConstKeyword, =, acceptConstKeyword, ;, return, this, ;, }, private, String]
[=, acceptConstKeyword, ;, return, this, ;, }, private, String, languageIn, =, "", ;, CommandLineConfig, setLanguageIn, (, String, languageIn, ), {]
[., acceptConstKeyword, =, acceptConstKeyword, ;, return, this, ;, }, private, String, languageIn, =, "", ;, CommandLineConfig, setLanguageIn, (, String, languageIn]
[;, return, this, ;, }, private, String, languageIn, =, "", ;, CommandLineConfig, setLanguageIn, (, String, languageIn, ), {, this, .]
[;, }, private, String, languageIn, =, "", ;, CommandLineConfig, setLanguageIn, (, String, languageIn, ), {, this, ., languageIn, =, languageIn]
[;, CommandLineConfig, setLanguageIn, (, String, languageIn, ), {, this, ., languageIn, =, languageIn, ;, return, this, ;, }, private, boolean]
[=, languageIn, ;, return, this, ;, }, private, boolean, skipNormalOutputs, =, false, ;, CommandLineConfig, setSkipNormalOutputs, (, boolean, skipNormalOutputs, ), {]
[., languageIn, =, languageIn, ;, return, this, ;, }, private, boolean, skipNormalOutputs, =, false, ;, CommandLineConfig, setSkipNormalOutputs, (, boolean, skipNormalOutputs]
[;, return, this, ;, }, private, boolean, skipNormalOutputs, =, false, ;, CommandLineConfig, setSkipNormalOutputs, (, boolean, skipNormalOutputs, ), {, this, .]
[;, }, private, boolean, skipNormalOutputs, =, false, ;, CommandLineConfig, setSkipNormalOutputs, (, boolean, skipNormalOutputs, ), {, this, ., skipNormalOutputs, =, skipNormalOutputs]
[;, CommandLineConfig, setSkipNormalOutputs, (, boolean, skipNormalOutputs, ), {, this, ., skipNormalOutputs, =, skipNormalOutputs, ;, return, this, ;, }, private, List]
[=, skipNormalOutputs, ;, return, this, ;, }, private, List, <, String, >, manifestMaps, =, ImmutableList, ., of, (, ), ;]
[., skipNormalOutputs, =, skipNormalOutputs, ;, return, this, ;, }, private, List, <, String, >, manifestMaps, =, ImmutableList, ., of, (]
[;, return, this, ;, }, private, List, <, String, >, manifestMaps, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setManifestMaps]
[;, }, private, List, <, String, >, manifestMaps, =, ImmutableList, ., of, (, ), ;, CommandLineConfig, setManifestMaps, (, List, <]
[;, CommandLineConfig, setManifestMaps, (, List, <, String, >, manifestMaps, ), {, this, ., manifestMaps, =, manifestMaps, ;, return, this, ;]
[., of, (, ), ;, CommandLineConfig, setManifestMaps, (, List, <, String, >, manifestMaps, ), {, this, ., manifestMaps, =, manifestMaps]
[=, manifestMaps, ;, return, this, ;, }, private, boolean, transformAMDToCJSModules, =, false, ;, CommandLineConfig, setTransformAMDToCJSModules, (, boolean, transformAMDToCJSModules, ), {]
[., manifestMaps, =, manifestMaps, ;, return, this, ;, }, private, boolean, transformAMDToCJSModules, =, false, ;, CommandLineConfig, setTransformAMDToCJSModules, (, boolean, transformAMDToCJSModules]
[;, return, this, ;, }, private, boolean, transformAMDToCJSModules, =, false, ;, CommandLineConfig, setTransformAMDToCJSModules, (, boolean, transformAMDToCJSModules, ), {, this, .]
[;, }, private, boolean, transformAMDToCJSModules, =, false, ;, CommandLineConfig, setTransformAMDToCJSModules, (, boolean, transformAMDToCJSModules, ), {, this, ., transformAMDToCJSModules, =, transformAMDToCJSModules]
[;, CommandLineConfig, setTransformAMDToCJSModules, (, boolean, transformAMDToCJSModules, ), {, this, ., transformAMDToCJSModules, =, transformAMDToCJSModules, ;, return, this, ;, }, private, boolean]
[=, transformAMDToCJSModules, ;, return, this, ;, }, private, boolean, processCommonJSModules, =, false, ;, CommandLineConfig, setProcessCommonJSModules, (, boolean, processCommonJSModules, ), {]
[., transformAMDToCJSModules, =, transformAMDToCJSModules, ;, return, this, ;, }, private, boolean, processCommonJSModules, =, false, ;, CommandLineConfig, setProcessCommonJSModules, (, boolean, processCommonJSModules]
[;, return, this, ;, }, private, boolean, processCommonJSModules, =, false, ;, CommandLineConfig, setProcessCommonJSModules, (, boolean, processCommonJSModules, ), {, this, .]
[;, }, private, boolean, processCommonJSModules, =, false, ;, CommandLineConfig, setProcessCommonJSModules, (, boolean, processCommonJSModules, ), {, this, ., processCommonJSModules, =, processCommonJSModules]
[;, CommandLineConfig, setProcessCommonJSModules, (, boolean, processCommonJSModules, ), {, this, ., processCommonJSModules, =, processCommonJSModules, ;, return, this, ;, }, private, String]
[=, processCommonJSModules, ;, return, this, ;, }, private, String, commonJSModulePathPrefix, =, ProcessCommonJSModules, ., DEFAULT_FILENAME_PREFIX, ;, CommandLineConfig, setCommonJSModulePathPrefix, (, String, commonJSModulePathPrefix]
[., processCommonJSModules, =, processCommonJSModules, ;, return, this, ;, }, private, String, commonJSModulePathPrefix, =, ProcessCommonJSModules, ., DEFAULT_FILENAME_PREFIX, ;, CommandLineConfig, setCommonJSModulePathPrefix, (]
[;, return, this, ;, }, private, String, commonJSModulePathPrefix, =, ProcessCommonJSModules, ., DEFAULT_FILENAME_PREFIX, ;, CommandLineConfig, setCommonJSModulePathPrefix, (, String, commonJSModulePathPrefix, ), {]
[;, }, private, String, commonJSModulePathPrefix, =, ProcessCommonJSModules, ., DEFAULT_FILENAME_PREFIX, ;, CommandLineConfig, setCommonJSModulePathPrefix, (, String, commonJSModulePathPrefix, ), {, this, ., commonJSModulePathPrefix]
[;, CommandLineConfig, setCommonJSModulePathPrefix, (, String, commonJSModulePathPrefix, ), {, this, ., commonJSModulePathPrefix, =, commonJSModulePathPrefix, ;, return, this, ;, }, private, String]
[., DEFAULT_FILENAME_PREFIX, ;, CommandLineConfig, setCommonJSModulePathPrefix, (, String, commonJSModulePathPrefix, ), {, this, ., commonJSModulePathPrefix, =, commonJSModulePathPrefix, ;, return, this, ;, }]
[=, commonJSModulePathPrefix, ;, return, this, ;, }, private, String, warningsWhitelistFile, =, "", ;, CommandLineConfig, setWarningsWhitelistFile, (, String, fileName, ), {]
[., commonJSModulePathPrefix, =, commonJSModulePathPrefix, ;, return, this, ;, }, private, String, warningsWhitelistFile, =, "", ;, CommandLineConfig, setWarningsWhitelistFile, (, String, fileName]
[;, return, this, ;, }, private, String, warningsWhitelistFile, =, "", ;, CommandLineConfig, setWarningsWhitelistFile, (, String, fileName, ), {, this, .]
[;, }, private, String, warningsWhitelistFile, =, "", ;, CommandLineConfig, setWarningsWhitelistFile, (, String, fileName, ), {, this, ., warningsWhitelistFile, =, fileName]
[;, CommandLineConfig, setWarningsWhitelistFile, (, String, fileName, ), {, this, ., warningsWhitelistFile, =, fileName, ;, return, this, ;, }, }, protected]
[=, fileName, ;, return, this, ;, }, }, protected, static, class, WarningGuardSpec, {, private, static, class, Entry, {, private, final]
[., warningsWhitelistFile, =, fileName, ;, return, this, ;, }, }, protected, static, class, WarningGuardSpec, {, private, static, class, Entry, {]
[;, return, this, ;, }, }, protected, static, class, WarningGuardSpec, {, private, static, class, Entry, {, private, final, CheckLevel, level]
[;, }, }, protected, static, class, WarningGuardSpec, {, private, static, class, Entry, {, private, final, CheckLevel, level, ;, private, final]
[=, level, ;, this, ., groupName, =, groupName, ;, }, }, private, final, List, <, Entry, >, entries, =, Lists]
[., level, =, level, ;, this, ., groupName, =, groupName, ;, }, }, private, final, List, <, Entry, >, entries]
[;, this, ., groupName, =, groupName, ;, }, }, private, final, List, <, Entry, >, entries, =, Lists, ., newArrayList]
[=, groupName, ;, }, }, private, final, List, <, Entry, >, entries, =, Lists, ., newArrayList, (, ), ;, protected]
[., groupName, =, groupName, ;, }, }, private, final, List, <, Entry, >, entries, =, Lists, ., newArrayList, (, )]
[;, }, }, private, final, List, <, Entry, >, entries, =, Lists, ., newArrayList, (, ), ;, protected, void, add]
[;, protected, void, add, (, CheckLevel, level, ,, String, groupName, ), {, entries, ., add, (, new, Entry, (, level]
[., newArrayList, (, ), ;, protected, void, add, (, CheckLevel, level, ,, String, groupName, ), {, entries, ., add, (]
[;, }, protected, void, clear, (, ), {, entries, ., clear, (, ), ;, }, }, }]
[., add, (, new, Entry, (, level, ,, groupName, ), ), ;, }, protected, void, clear, (, ), {, entries]
[), ;, }, protected, void, clear, (, ), {, entries, ., clear, (, ), ;, }, }, }]
[,, groupName, ), ), ;, }, protected, void, clear, (, ), {, entries, ., clear, (, ), ;, }, }]
[), ), ;, }, protected, void, clear, (, ), {, entries, ., clear, (, ), ;, }, }, }]
[;, }, }, }]
[., clear, (, ), ;, }, }, }]
