[javax, ., annotation, ., Nullable, ;, abstract, class, JsMessageVisitor, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, static, final, String, MSG_FUNCTION_NAME, =]
[JsMessageVisitor, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, static, final, String, MSG_FUNCTION_NAME, =, "goog.getMsg", ;, private, static, final, String, MSG_FALLBACK_FUNCTION_NAME, =]
[static, final, String, MSG_FUNCTION_NAME, =, "goog.getMsg", ;, private, static, final, String, MSG_FALLBACK_FUNCTION_NAME, =, "goog.getMsgWithFallback", ;, static, final, DiagnosticType, MESSAGE_HAS_NO_DESCRIPTION, =]
[static, final, String, MSG_FUNCTION_NAME, =, "goog.getMsg", ;, private, static, final, String, MSG_FALLBACK_FUNCTION_NAME, =, "goog.getMsgWithFallback", ;, static, final, DiagnosticType, MESSAGE_HAS_NO_DESCRIPTION, =]
[=, "goog.getMsg", ;, private, static, final, String, MSG_FALLBACK_FUNCTION_NAME, =, "goog.getMsgWithFallback", ;, static, final, DiagnosticType, MESSAGE_HAS_NO_DESCRIPTION, =, DiagnosticType, ., warning, (]
[;, private, static, final, String, MSG_FALLBACK_FUNCTION_NAME, =, "goog.getMsgWithFallback", ;, static, final, DiagnosticType, MESSAGE_HAS_NO_DESCRIPTION, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_DESCRIPTION", ,]
[;, static, final, DiagnosticType, MESSAGE_HAS_NO_DESCRIPTION, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_DESCRIPTION", ,, "Message {0} has no description. Add @desc JsDoc tag.", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_TEXT, =]
[;, static, final, DiagnosticType, MESSAGE_HAS_NO_DESCRIPTION, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_DESCRIPTION", ,, "Message {0} has no description. Add @desc JsDoc tag.", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_TEXT, =]
[MESSAGE_HAS_NO_DESCRIPTION, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_DESCRIPTION", ,, "Message {0} has no description. Add @desc JsDoc tag.", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_TEXT, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_DESCRIPTION", ,, "Message {0} has no description. Add @desc JsDoc tag.", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_TEXT, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_TEXT", ,]
[DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_DESCRIPTION", ,, "Message {0} has no description. Add @desc JsDoc tag.", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_TEXT, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_TEXT", ,]
[warning, (, "JSC_MSG_HAS_NO_DESCRIPTION", ,, "Message {0} has no description. Add @desc JsDoc tag.", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_TEXT, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_TEXT", ,, "Message value of {0} is just an empty string. ", +]
[final, DiagnosticType, MESSAGE_HAS_NO_TEXT, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_TEXT", ,, "Message value of {0} is just an empty string. ", +, "Empty messages are forbidden.", ), ;, static, final, DiagnosticType, MESSAGE_TREE_MALFORMED, =]
[final, DiagnosticType, MESSAGE_HAS_NO_TEXT, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_TEXT", ,, "Message value of {0} is just an empty string. ", +, "Empty messages are forbidden.", ), ;, static, final, DiagnosticType, MESSAGE_TREE_MALFORMED, =]
[DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_TEXT", ,, "Message value of {0} is just an empty string. ", +, "Empty messages are forbidden.", ), ;, static, final, DiagnosticType, MESSAGE_TREE_MALFORMED, =, DiagnosticType, ., error, (]
[warning, (, "JSC_MSG_HAS_NO_TEXT", ,, "Message value of {0} is just an empty string. ", +, "Empty messages are forbidden.", ), ;, static, final, DiagnosticType, MESSAGE_TREE_MALFORMED, =, DiagnosticType, ., error, (, "JSC_MSG_TREE_MALFORMED", ,]
[;, static, final, DiagnosticType, MESSAGE_TREE_MALFORMED, =, DiagnosticType, ., error, (, "JSC_MSG_TREE_MALFORMED", ,, "Message parse tree malformed. {0}", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_VALUE, =]
[;, static, final, DiagnosticType, MESSAGE_TREE_MALFORMED, =, DiagnosticType, ., error, (, "JSC_MSG_TREE_MALFORMED", ,, "Message parse tree malformed. {0}", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_VALUE, =]
[MESSAGE_TREE_MALFORMED, =, DiagnosticType, ., error, (, "JSC_MSG_TREE_MALFORMED", ,, "Message parse tree malformed. {0}", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_VALUE, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_MSG_TREE_MALFORMED", ,, "Message parse tree malformed. {0}", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_VALUE, =, DiagnosticType, ., error, (, "JSC_MSG_HAS_NO_VALUE", ,]
[;, static, final, DiagnosticType, MESSAGE_HAS_NO_VALUE, =, DiagnosticType, ., error, (, "JSC_MSG_HAS_NO_VALUE", ,, "message node {0} has no value", ), ;, static, final, DiagnosticType, MESSAGE_DUPLICATE_KEY, =]
[;, static, final, DiagnosticType, MESSAGE_HAS_NO_VALUE, =, DiagnosticType, ., error, (, "JSC_MSG_HAS_NO_VALUE", ,, "message node {0} has no value", ), ;, static, final, DiagnosticType, MESSAGE_DUPLICATE_KEY, =]
[MESSAGE_HAS_NO_VALUE, =, DiagnosticType, ., error, (, "JSC_MSG_HAS_NO_VALUE", ,, "message node {0} has no value", ), ;, static, final, DiagnosticType, MESSAGE_DUPLICATE_KEY, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_MSG_HAS_NO_VALUE", ,, "message node {0} has no value", ), ;, static, final, DiagnosticType, MESSAGE_DUPLICATE_KEY, =, DiagnosticType, ., error, (, "JSC_MSG_KEY_DUPLICATED", ,]
[DiagnosticType, ., error, (, "JSC_MSG_HAS_NO_VALUE", ,, "message node {0} has no value", ), ;, static, final, DiagnosticType, MESSAGE_DUPLICATE_KEY, =, DiagnosticType, ., error, (, "JSC_MSG_KEY_DUPLICATED", ,]
[error, (, "JSC_MSG_HAS_NO_VALUE", ,, "message node {0} has no value", ), ;, static, final, DiagnosticType, MESSAGE_DUPLICATE_KEY, =, DiagnosticType, ., error, (, "JSC_MSG_KEY_DUPLICATED", ,, "duplicate message variable name found for {0}, ", +]
[final, DiagnosticType, MESSAGE_DUPLICATE_KEY, =, DiagnosticType, ., error, (, "JSC_MSG_KEY_DUPLICATED", ,, "duplicate message variable name found for {0}, ", +, "initial definition {1}:{2}", ), ;, static, final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =]
[final, DiagnosticType, MESSAGE_DUPLICATE_KEY, =, DiagnosticType, ., error, (, "JSC_MSG_KEY_DUPLICATED", ,, "duplicate message variable name found for {0}, ", +, "initial definition {1}:{2}", ), ;, static, final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =]
[DiagnosticType, ., error, (, "JSC_MSG_KEY_DUPLICATED", ,, "duplicate message variable name found for {0}, ", +, "initial definition {1}:{2}", ), ;, static, final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =, DiagnosticType, ., warning, (]
[error, (, "JSC_MSG_KEY_DUPLICATED", ,, "duplicate message variable name found for {0}, ", +, "initial definition {1}:{2}", ), ;, static, final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =, DiagnosticType, ., warning, (, "JSC_MSG_ORPHANED_NODE", ,]
[error, (, "JSC_MSG_KEY_DUPLICATED", ,, "duplicate message variable name found for {0}, ", +, "initial definition {1}:{2}", ), ;, static, final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =, DiagnosticType, ., warning, (, "JSC_MSG_ORPHANED_NODE", ,]
["JSC_MSG_KEY_DUPLICATED", ,, "duplicate message variable name found for {0}, ", +, "initial definition {1}:{2}", ), ;, static, final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =, DiagnosticType, ., warning, (, "JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +]
[final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =, DiagnosticType, ., warning, (, "JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable", ), ;, static, final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =]
[final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =, DiagnosticType, ., warning, (, "JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable", ), ;, static, final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =]
[DiagnosticType, ., warning, (, "JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable", ), ;, static, final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =, DiagnosticType, ., error, (]
[warning, (, "JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable", ), ;, static, final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,]
[warning, (, "JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable", ), ;, static, final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,]
["JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable", ), ;, static, final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,, "message not initialized using ", +]
[final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,, "message not initialized using ", +, MSG_FUNCTION_NAME, ), ;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =]
[final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,, "message not initialized using ", +, MSG_FUNCTION_NAME, ), ;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =]
[DiagnosticType, ., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,, "message not initialized using ", +, MSG_FUNCTION_NAME, ), ;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =, DiagnosticType, ., error, (]
[error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,, "message not initialized using ", +, MSG_FUNCTION_NAME, ), ;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,]
[error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,, "message not initialized using ", +, MSG_FUNCTION_NAME, ), ;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,]
["message not initialized using ", +, MSG_FUNCTION_NAME, ), ;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,, String, ., format, (]
["message not initialized using ", +, MSG_FUNCTION_NAME, ), ;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,, String, ., format, (]
[MSG_FUNCTION_NAME, ), ;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,, String, ., format, (, "Bad syntax. ", +]
[;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,, String, ., format, (, "Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)", ,]
[(, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,, String, ., format, (, "Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)", ,, MSG_FALLBACK_FUNCTION_NAME, ), ), ;, static, final, DiagnosticType, FALLBACK_ARG_ERROR, =]
[(, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,, String, ., format, (, "Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)", ,, MSG_FALLBACK_FUNCTION_NAME, ), ), ;, static, final, DiagnosticType, FALLBACK_ARG_ERROR, =]
[., format, (, "Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)", ,, MSG_FALLBACK_FUNCTION_NAME, ), ), ;, static, final, DiagnosticType, FALLBACK_ARG_ERROR, =, DiagnosticType, ., error, (]
[(, "Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)", ,, MSG_FALLBACK_FUNCTION_NAME, ), ), ;, static, final, DiagnosticType, FALLBACK_ARG_ERROR, =, DiagnosticType, ., error, (, "JSC_MSG_FALLBACK_ARG_ERROR", ,]
[static, final, DiagnosticType, FALLBACK_ARG_ERROR, =, DiagnosticType, ., error, (, "JSC_MSG_FALLBACK_ARG_ERROR", ,, "Could not find message entry for fallback argument {0}", ), ;, private, static, final, String, PH_JS_PREFIX, =]
[(, "JSC_MSG_FALLBACK_ARG_ERROR", ,, "Could not find message entry for fallback argument {0}", ), ;, private, static, final, String, PH_JS_PREFIX, =, "{$", ;, private, static, final, String, PH_JS_SUFFIX, =]
[static, final, String, PH_JS_PREFIX, =, "{$", ;, private, static, final, String, PH_JS_SUFFIX, =, "}", ;, static, final, String, MSG_PREFIX, =]
[static, final, String, PH_JS_SUFFIX, =, "}", ;, static, final, String, MSG_PREFIX, =, "MSG_", ;, private, static, final, Pattern, MSG_UNNAMED_PATTERN, =]
[static, final, String, PH_JS_SUFFIX, =, "}", ;, static, final, String, MSG_PREFIX, =, "MSG_", ;, private, static, final, Pattern, MSG_UNNAMED_PATTERN, =]
[=, "}", ;, static, final, String, MSG_PREFIX, =, "MSG_", ;, private, static, final, Pattern, MSG_UNNAMED_PATTERN, =, Pattern, ., compile, (]
[;, private, static, final, Pattern, MSG_UNNAMED_PATTERN, =, Pattern, ., compile, (, "MSG_UNNAMED_\\d+", ), ;, private, static, final, Pattern, CAMELCASE_PATTERN, =]
[;, private, static, final, Pattern, MSG_UNNAMED_PATTERN, =, Pattern, ., compile, (, "MSG_UNNAMED_\\d+", ), ;, private, static, final, Pattern, CAMELCASE_PATTERN, =]
[Pattern, MSG_UNNAMED_PATTERN, =, Pattern, ., compile, (, "MSG_UNNAMED_\\d+", ), ;, private, static, final, Pattern, CAMELCASE_PATTERN, =, Pattern, ., compile, (]
[), ;, private, static, final, Pattern, CAMELCASE_PATTERN, =, Pattern, ., compile, (, "[a-z][a-zA-Z\\d]*[_\\d]*", ), ;, static, final, String, HIDDEN_DESC_PREFIX, =]
[Pattern, ., compile, (, "[a-z][a-zA-Z\\d]*[_\\d]*", ), ;, static, final, String, HIDDEN_DESC_PREFIX, =, "@hidden", ;, private, static, final, String, DESC_SUFFIX, =]
[final, JsMessage, ., IdGenerator, idGenerator, ;, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, MessageLocation, >, messageNames, =]
[final, JsMessage, ., IdGenerator, idGenerator, ;, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, MessageLocation, >, messageNames, =]
[MessageLocation, >, messageNames, =, Maps, ., newHashMap, (, ), ;, private, final, Map, <, Var, ,, JsMessage, >, unnamedMessages, =]
[MessageLocation, >, messageNames, =, Maps, ., newHashMap, (, ), ;, private, final, Map, <, Var, ,, JsMessage, >, unnamedMessages, =]
[JsMessage, >, unnamedMessages, =, Maps, ., newHashMap, (, ), ;, private, final, Map, <, Node, ,, String, >, googMsgNodes, =]
[JsMessage, >, unnamedMessages, =, Maps, ., newHashMap, (, ), ;, private, final, Map, <, Node, ,, String, >, googMsgNodes, =]
[;, JsMessageVisitor, (, AbstractCompiler, compiler, ,, boolean, needToCheckDuplications, ,, JsMessage, ., Style, style, ,, JsMessage, ., IdGenerator, idGenerator, ), {]
[;, JsMessageVisitor, (, AbstractCompiler, compiler, ,, boolean, needToCheckDuplications, ,, JsMessage, ., Style, style, ,, JsMessage, ., IdGenerator, idGenerator, ), {]
[compiler, ,, boolean, needToCheckDuplications, ,, JsMessage, ., Style, style, ,, JsMessage, ., IdGenerator, idGenerator, ), {, this, ., compiler, =]
[boolean, needToCheckDuplications, ,, JsMessage, ., Style, style, ,, JsMessage, ., IdGenerator, idGenerator, ), {, this, ., compiler, =, compiler, ;]
[boolean, needToCheckDuplications, ,, JsMessage, ., Style, style, ,, JsMessage, ., IdGenerator, idGenerator, ), {, this, ., compiler, =, compiler, ;]
[., Style, style, ,, JsMessage, ., IdGenerator, idGenerator, ), {, this, ., compiler, =, compiler, ;, this, ., needToCheckDuplications, =]
[style, ,, JsMessage, ., IdGenerator, idGenerator, ), {, this, ., compiler, =, compiler, ;, this, ., needToCheckDuplications, =, needToCheckDuplications, ;]
[style, ,, JsMessage, ., IdGenerator, idGenerator, ), {, this, ., compiler, =, compiler, ;, this, ., needToCheckDuplications, =, needToCheckDuplications, ;]
[IdGenerator, idGenerator, ), {, this, ., compiler, =, compiler, ;, this, ., needToCheckDuplications, =, needToCheckDuplications, ;, this, ., style, =]
[), {, this, ., compiler, =, compiler, ;, this, ., needToCheckDuplications, =, needToCheckDuplications, ;, this, ., style, =, style, ;]
[), {, this, ., compiler, =, compiler, ;, this, ., needToCheckDuplications, =, needToCheckDuplications, ;, this, ., style, =, style, ;]
[compiler, =, compiler, ;, this, ., needToCheckDuplications, =, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator, =]
[compiler, ;, this, ., needToCheckDuplications, =, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator, =, idGenerator, ;]
[this, ., needToCheckDuplications, =, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =]
[this, ., needToCheckDuplications, =, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =]
[., needToCheckDuplications, =, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =, (]
[., needToCheckDuplications, =, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =, (]
[=, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =, (, style, ==]
[=, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =, (, style, ==]
[=, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =, (, style, ==]
[style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =, (, style, ==, JsMessage, ., Style, ., CLOSURE, ), ?]
[style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =, (, style, ==, JsMessage, ., Style, ., CLOSURE, ), ?]
[idGenerator, =, idGenerator, ;, checkLevel, =, (, style, ==, JsMessage, ., Style, ., CLOSURE, ), ?, CheckLevel, ., ERROR, :]
[idGenerator, =, idGenerator, ;, checkLevel, =, (, style, ==, JsMessage, ., Style, ., CLOSURE, ), ?, CheckLevel, ., ERROR, :]
[ERROR, :, CheckLevel, ., WARNING, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[ERROR, :, CheckLevel, ., WARNING, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[WARNING, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[(, compiler, ,, root, ,, this, ), ;, for, (, Map, ., Entry, <, Node, ,, String, >, msgNode, :]
[(, compiler, ,, root, ,, this, ), ;, for, (, Map, ., Entry, <, Node, ,, String, >, msgNode, :]
[;, for, (, Map, ., Entry, <, Node, ,, String, >, msgNode, :, googMsgNodes, ., entrySet, (, ), ), {]
[;, for, (, Map, ., Entry, <, Node, ,, String, >, msgNode, :, googMsgNodes, ., entrySet, (, ), ), {]
[., Entry, <, Node, ,, String, >, msgNode, :, googMsgNodes, ., entrySet, (, ), ), {, compiler, ., report, (]
[., Entry, <, Node, ,, String, >, msgNode, :, googMsgNodes, ., entrySet, (, ), ), {, compiler, ., report, (]
[,, String, >, msgNode, :, googMsgNodes, ., entrySet, (, ), ), {, compiler, ., report, (, JSError, ., make, (]
[,, String, >, msgNode, :, googMsgNodes, ., entrySet, (, ), ), {, compiler, ., report, (, JSError, ., make, (]
[., entrySet, (, ), ), {, compiler, ., report, (, JSError, ., make, (, msgNode, ., getValue, (, ), ,]
[., entrySet, (, ), ), {, compiler, ., report, (, JSError, ., make, (, msgNode, ., getValue, (, ), ,]
[compiler, ., report, (, JSError, ., make, (, msgNode, ., getValue, (, ), ,, msgNode, ., getKey, (, ), ,]
[report, (, JSError, ., make, (, msgNode, ., getValue, (, ), ,, msgNode, ., getKey, (, ), ,, checkLevel, ,]
[Node, node, ,, Node, parent, ), {, String, messageKey, ;, boolean, isVar, ;, Node, msgNode, ,, msgNodeParent, ;, switch, (]
[Node, node, ,, Node, parent, ), {, String, messageKey, ;, boolean, isVar, ;, Node, msgNode, ,, msgNodeParent, ;, switch, (]
[messageKey, ;, boolean, isVar, ;, Node, msgNode, ,, msgNodeParent, ;, switch, (, node, ., getType, (, ), ), {, case]
[messageKey, ;, boolean, isVar, ;, Node, msgNode, ,, msgNodeParent, ;, switch, (, node, ., getType, (, ), ), {, case]
[msgNode, ,, msgNodeParent, ;, switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[msgNode, ,, msgNodeParent, ;, switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[,, msgNodeParent, ;, switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, (]
[,, msgNodeParent, ;, switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, (]
[;, switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, (, parent, !=]
[node, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, (, parent, !=, null, ), &&]
[., getType, (, ), ), {, case, Token, ., NAME, :, if, (, (, parent, !=, null, ), &&, (]
[., getType, (, ), ), {, case, Token, ., NAME, :, if, (, (, parent, !=, null, ), &&, (]
[., NAME, :, if, (, (, parent, !=, null, ), &&, (, parent, ., isVar, (, ), ), ), {]
[:, if, (, (, parent, !=, null, ), &&, (, parent, ., isVar, (, ), ), ), {, messageKey, =]
[:, if, (, (, parent, !=, null, ), &&, (, parent, ., isVar, (, ), ), ), {, messageKey, =]
[null, ), &&, (, parent, ., isVar, (, ), ), ), {, messageKey, =, node, ., getString, (, ), ;]
[&&, (, parent, ., isVar, (, ), ), ), {, messageKey, =, node, ., getString, (, ), ;, isVar, =]
[), {, messageKey, =, node, ., getString, (, ), ;, isVar, =, true, ;, }, else, {, return, ;, }]
[messageKey, =, node, ., getString, (, ), ;, isVar, =, true, ;, }, else, {, return, ;, }, msgNode, =]
[messageKey, =, node, ., getString, (, ), ;, isVar, =, true, ;, }, else, {, return, ;, }, msgNode, =]
[), ;, isVar, =, true, ;, }, else, {, return, ;, }, msgNode, =, node, ., getFirstChild, (, ), ;]
[isVar, =, true, ;, }, else, {, return, ;, }, msgNode, =, node, ., getFirstChild, (, ), ;, msgNodeParent, =]
[else, {, return, ;, }, msgNode, =, node, ., getFirstChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case]
[else, {, return, ;, }, msgNode, =, node, ., getFirstChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case]
[}, msgNode, =, node, ., getFirstChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case, Token, ., ASSIGN, :]
[=, node, ., getFirstChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case, Token, ., ASSIGN, :, isVar, =]
[), ;, msgNodeParent, =, node, ;, break, ;, case, Token, ., ASSIGN, :, isVar, =, false, ;, Node, getProp, =]
[), ;, msgNodeParent, =, node, ;, break, ;, case, Token, ., ASSIGN, :, isVar, =, false, ;, Node, getProp, =]
[case, Token, ., ASSIGN, :, isVar, =, false, ;, Node, getProp, =, node, ., getFirstChild, (, ), ;, if, (]
[Token, ., ASSIGN, :, isVar, =, false, ;, Node, getProp, =, node, ., getFirstChild, (, ), ;, if, (, !]
[Token, ., ASSIGN, :, isVar, =, false, ;, Node, getProp, =, node, ., getFirstChild, (, ), ;, if, (, !]
[getFirstChild, (, ), ;, if, (, !, getProp, ., isGetProp, (, ), ), {, return, ;, }, Node, propNode, =]
[getFirstChild, (, ), ;, if, (, !, getProp, ., isGetProp, (, ), ), {, return, ;, }, Node, propNode, =]
[!, getProp, ., isGetProp, (, ), ), {, return, ;, }, Node, propNode, =, getProp, ., getLastChild, (, ), ;]
[., isGetProp, (, ), ), {, return, ;, }, Node, propNode, =, getProp, ., getLastChild, (, ), ;, messageKey, =]
[., isGetProp, (, ), ), {, return, ;, }, Node, propNode, =, getProp, ., getLastChild, (, ), ;, messageKey, =]
[return, ;, }, Node, propNode, =, getProp, ., getLastChild, (, ), ;, messageKey, =, propNode, ., getString, (, ), ;]
[}, Node, propNode, =, getProp, ., getLastChild, (, ), ;, messageKey, =, propNode, ., getString, (, ), ;, msgNode, =]
[}, Node, propNode, =, getProp, ., getLastChild, (, ), ;, messageKey, =, propNode, ., getString, (, ), ;, msgNode, =]
[getLastChild, (, ), ;, messageKey, =, propNode, ., getString, (, ), ;, msgNode, =, node, ., getLastChild, (, ), ;]
[), ;, messageKey, =, propNode, ., getString, (, ), ;, msgNode, =, node, ., getLastChild, (, ), ;, msgNodeParent, =]
[., getString, (, ), ;, msgNode, =, node, ., getLastChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case]
[., getString, (, ), ;, msgNode, =, node, ., getLastChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case]
[node, ., getLastChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case, Token, ., CALL, :, String, fnName, =]
[node, ., getLastChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case, Token, ., CALL, :, String, fnName, =]
[node, ., getLastChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case, Token, ., CALL, :, String, fnName, =]
[case, Token, ., CALL, :, String, fnName, =, node, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (]
[case, Token, ., CALL, :, String, fnName, =, node, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (]
[:, String, fnName, =, node, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, MSG_FUNCTION_NAME, ., equals, (]
[node, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, MSG_FUNCTION_NAME, ., equals, (, fnName, ), ), {]
[node, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, MSG_FUNCTION_NAME, ., equals, (, fnName, ), ), {]
[), ., getQualifiedName, (, ), ;, if, (, MSG_FUNCTION_NAME, ., equals, (, fnName, ), ), {, googMsgNodes, ., put, (]
[getQualifiedName, (, ), ;, if, (, MSG_FUNCTION_NAME, ., equals, (, fnName, ), ), {, googMsgNodes, ., put, (, node, ,]
[getQualifiedName, (, ), ;, if, (, MSG_FUNCTION_NAME, ., equals, (, fnName, ), ), {, googMsgNodes, ., put, (, node, ,]
[), ), {, googMsgNodes, ., put, (, node, ,, traversal, ., getSourceName, (, ), ), ;, }, else, if, (]
[), ), {, googMsgNodes, ., put, (, node, ,, traversal, ., getSourceName, (, ), ), ;, }, else, if, (]
[., put, (, node, ,, traversal, ., getSourceName, (, ), ), ;, }, else, if, (, MSG_FALLBACK_FUNCTION_NAME, ., equals, (]
[,, traversal, ., getSourceName, (, ), ), ;, }, else, if, (, MSG_FALLBACK_FUNCTION_NAME, ., equals, (, fnName, ), ), {]
[., getSourceName, (, ), ), ;, }, else, if, (, MSG_FALLBACK_FUNCTION_NAME, ., equals, (, fnName, ), ), {, visitFallbackFunctionCall, (]
[(, ), ), ;, }, else, if, (, MSG_FALLBACK_FUNCTION_NAME, ., equals, (, fnName, ), ), {, visitFallbackFunctionCall, (, traversal, ,]
[), {, visitFallbackFunctionCall, (, traversal, ,, node, ), ;, }, return, ;, default, :, return, ;, }, boolean, isNewStyleMessage, =]
[), {, visitFallbackFunctionCall, (, traversal, ,, node, ), ;, }, return, ;, default, :, return, ;, }, boolean, isNewStyleMessage, =]
[), {, visitFallbackFunctionCall, (, traversal, ,, node, ), ;, }, return, ;, default, :, return, ;, }, boolean, isNewStyleMessage, =]
[visitFallbackFunctionCall, (, traversal, ,, node, ), ;, }, return, ;, default, :, return, ;, }, boolean, isNewStyleMessage, =, msgNode, !=]
[traversal, ,, node, ), ;, }, return, ;, default, :, return, ;, }, boolean, isNewStyleMessage, =, msgNode, !=, null, &&]
[traversal, ,, node, ), ;, }, return, ;, default, :, return, ;, }, boolean, isNewStyleMessage, =, msgNode, !=, null, &&]
[default, :, return, ;, }, boolean, isNewStyleMessage, =, msgNode, !=, null, &&, msgNode, ., isCall, (, ), ;, if, (]
[:, return, ;, }, boolean, isNewStyleMessage, =, msgNode, !=, null, &&, msgNode, ., isCall, (, ), ;, if, (, !]
[;, }, boolean, isNewStyleMessage, =, msgNode, !=, null, &&, msgNode, ., isCall, (, ), ;, if, (, !, isMessageName, (]
[boolean, isNewStyleMessage, =, msgNode, !=, null, &&, msgNode, ., isCall, (, ), ;, if, (, !, isMessageName, (, messageKey, ,]
[isCall, (, ), ;, if, (, !, isMessageName, (, messageKey, ,, isNewStyleMessage, ), ), {, return, ;, }, if, (]
[isCall, (, ), ;, if, (, !, isMessageName, (, messageKey, ,, isNewStyleMessage, ), ), {, return, ;, }, if, (]
[), ;, if, (, !, isMessageName, (, messageKey, ,, isNewStyleMessage, ), ), {, return, ;, }, if, (, msgNode, ==]
[(, !, isMessageName, (, messageKey, ,, isNewStyleMessage, ), ), {, return, ;, }, if, (, msgNode, ==, null, ), {]
[(, !, isMessageName, (, messageKey, ,, isNewStyleMessage, ), ), {, return, ;, }, if, (, msgNode, ==, null, ), {]
[messageKey, ,, isNewStyleMessage, ), ), {, return, ;, }, if, (, msgNode, ==, null, ), {, compiler, ., report, (]
[messageKey, ,, isNewStyleMessage, ), ), {, return, ;, }, if, (, msgNode, ==, null, ), {, compiler, ., report, (]
[), {, return, ;, }, if, (, msgNode, ==, null, ), {, compiler, ., report, (, traversal, ., makeError, (]
[return, ;, }, if, (, msgNode, ==, null, ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,]
[}, if, (, msgNode, ==, null, ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_VALUE, ,]
[., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_VALUE, ,, messageKey, ), ), ;, return, ;, }, if, (]
[traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_VALUE, ,, messageKey, ), ), ;, return, ;, }, if, (, isNewStyleMessage, ), {]
[traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_VALUE, ,, messageKey, ), ), ;, return, ;, }, if, (, isNewStyleMessage, ), {]
[node, ,, MESSAGE_HAS_NO_VALUE, ,, messageKey, ), ), ;, return, ;, }, if, (, isNewStyleMessage, ), {, googMsgNodes, ., remove, (]
[;, return, ;, }, if, (, isNewStyleMessage, ), {, googMsgNodes, ., remove, (, msgNode, ), ;, }, else, if, (]
[;, return, ;, }, if, (, isNewStyleMessage, ), {, googMsgNodes, ., remove, (, msgNode, ), ;, }, else, if, (]
[;, }, if, (, isNewStyleMessage, ), {, googMsgNodes, ., remove, (, msgNode, ), ;, }, else, if, (, style, !=]
[;, }, if, (, isNewStyleMessage, ), {, googMsgNodes, ., remove, (, msgNode, ), ;, }, else, if, (, style, !=]
[;, }, if, (, isNewStyleMessage, ), {, googMsgNodes, ., remove, (, msgNode, ), ;, }, else, if, (, style, !=]
[googMsgNodes, ., remove, (, msgNode, ), ;, }, else, if, (, style, !=, JsMessage, ., Style, ., LEGACY, ), {]
[googMsgNodes, ., remove, (, msgNode, ), ;, }, else, if, (, style, !=, JsMessage, ., Style, ., LEGACY, ), {]
[msgNode, ), ;, }, else, if, (, style, !=, JsMessage, ., Style, ., LEGACY, ), {, compiler, ., report, (]
[msgNode, ), ;, }, else, if, (, style, !=, JsMessage, ., Style, ., LEGACY, ), {, compiler, ., report, (]
[else, if, (, style, !=, JsMessage, ., Style, ., LEGACY, ), {, compiler, ., report, (, traversal, ., makeError, (]
[(, style, !=, JsMessage, ., Style, ., LEGACY, ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,]
[!=, JsMessage, ., Style, ., LEGACY, ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, checkLevel, ,]
[compiler, ., report, (, traversal, ., makeError, (, node, ,, checkLevel, ,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, ), ), ;, }, boolean, isUnnamedMsg, =]
[report, (, traversal, ., makeError, (, node, ,, checkLevel, ,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, ), ), ;, }, boolean, isUnnamedMsg, =, isUnnamedMessageName, (]
[node, ,, checkLevel, ,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, ), ), ;, }, boolean, isUnnamedMsg, =, isUnnamedMessageName, (, messageKey, ), ;, Builder, builder, =]
[,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, ), ), ;, }, boolean, isUnnamedMsg, =, isUnnamedMessageName, (, messageKey, ), ;, Builder, builder, =, new, Builder, (]
[,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, ), ), ;, }, boolean, isUnnamedMsg, =, isUnnamedMessageName, (, messageKey, ), ;, Builder, builder, =, new, Builder, (]
[), ), ;, }, boolean, isUnnamedMsg, =, isUnnamedMessageName, (, messageKey, ), ;, Builder, builder, =, new, Builder, (, isUnnamedMsg, ?]
[;, }, boolean, isUnnamedMsg, =, isUnnamedMessageName, (, messageKey, ), ;, Builder, builder, =, new, Builder, (, isUnnamedMsg, ?, null, :]
[isUnnamedMsg, =, isUnnamedMessageName, (, messageKey, ), ;, Builder, builder, =, new, Builder, (, isUnnamedMsg, ?, null, :, messageKey, ), ;]
[isUnnamedMsg, =, isUnnamedMessageName, (, messageKey, ), ;, Builder, builder, =, new, Builder, (, isUnnamedMsg, ?, null, :, messageKey, ), ;]
[messageKey, ), ;, Builder, builder, =, new, Builder, (, isUnnamedMsg, ?, null, :, messageKey, ), ;, builder, ., setSourceName, (]
[messageKey, ), ;, Builder, builder, =, new, Builder, (, isUnnamedMsg, ?, null, :, messageKey, ), ;, builder, ., setSourceName, (]
[null, :, messageKey, ), ;, builder, ., setSourceName, (, traversal, ., getSourceName, (, ), ), ;, try, {, if, (]
[), ;, builder, ., setSourceName, (, traversal, ., getSourceName, (, ), ), ;, try, {, if, (, isVar, ), {]
[builder, ., setSourceName, (, traversal, ., getSourceName, (, ), ), ;, try, {, if, (, isVar, ), {, extractMessageFromVariable, (]
[setSourceName, (, traversal, ., getSourceName, (, ), ), ;, try, {, if, (, isVar, ), {, extractMessageFromVariable, (, builder, ,]
[traversal, ., getSourceName, (, ), ), ;, try, {, if, (, isVar, ), {, extractMessageFromVariable, (, builder, ,, node, ,]
[getSourceName, (, ), ), ;, try, {, if, (, isVar, ), {, extractMessageFromVariable, (, builder, ,, node, ,, parent, ,]
[getSourceName, (, ), ), ;, try, {, if, (, isVar, ), {, extractMessageFromVariable, (, builder, ,, node, ,, parent, ,]
[), {, extractMessageFromVariable, (, builder, ,, node, ,, parent, ,, parent, ., getParent, (, ), ), ;, }, else, {]
[extractMessageFromVariable, (, builder, ,, node, ,, parent, ,, parent, ., getParent, (, ), ), ;, }, else, {, extractMessageFromProperty, (]
[builder, ,, node, ,, parent, ,, parent, ., getParent, (, ), ), ;, }, else, {, extractMessageFromProperty, (, builder, ,]
[builder, ,, node, ,, parent, ,, parent, ., getParent, (, ), ), ;, }, else, {, extractMessageFromProperty, (, builder, ,]
[parent, ., getParent, (, ), ), ;, }, else, {, extractMessageFromProperty, (, builder, ,, node, ., getFirstChild, (, ), ,]
[(, builder, ,, node, ., getFirstChild, (, ), ,, node, ), ;, }, }, catch, (, MalformedException, ex, ), {]
[(, builder, ,, node, ., getFirstChild, (, ), ,, node, ), ;, }, }, catch, (, MalformedException, ex, ), {]
[., getFirstChild, (, ), ,, node, ), ;, }, }, catch, (, MalformedException, ex, ), {, compiler, ., report, (]
[., getFirstChild, (, ), ,, node, ), ;, }, }, catch, (, MalformedException, ex, ), {, compiler, ., report, (]
[,, node, ), ;, }, }, catch, (, MalformedException, ex, ), {, compiler, ., report, (, traversal, ., makeError, (]
[,, node, ), ;, }, }, catch, (, MalformedException, ex, ), {, compiler, ., report, (, traversal, ., makeError, (]
[catch, (, MalformedException, ex, ), {, compiler, ., report, (, traversal, ., makeError, (, ex, ., getNode, (, ), ,]
[MalformedException, ex, ), {, compiler, ., report, (, traversal, ., makeError, (, ex, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,]
[MalformedException, ex, ), {, compiler, ., report, (, traversal, ., makeError, (, ex, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,]
[getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, ex, ., getMessage, (, ), ), ), ;, return, ;, }, JsMessage, extractedMessage, =]
[getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, ex, ., getMessage, (, ), ), ), ;, return, ;, }, JsMessage, extractedMessage, =]
[MESSAGE_TREE_MALFORMED, ,, ex, ., getMessage, (, ), ), ), ;, return, ;, }, JsMessage, extractedMessage, =, builder, ., build, (]
[(, ), ), ), ;, return, ;, }, JsMessage, extractedMessage, =, builder, ., build, (, idGenerator, ), ;, if, (]
[(, ), ), ), ;, return, ;, }, JsMessage, extractedMessage, =, builder, ., build, (, idGenerator, ), ;, if, (]
[(, ), ), ), ;, return, ;, }, JsMessage, extractedMessage, =, builder, ., build, (, idGenerator, ), ;, if, (]
[), ), ;, return, ;, }, JsMessage, extractedMessage, =, builder, ., build, (, idGenerator, ), ;, if, (, needToCheckDuplications, &&]
[), ;, return, ;, }, JsMessage, extractedMessage, =, builder, ., build, (, idGenerator, ), ;, if, (, needToCheckDuplications, &&, !]
[return, ;, }, JsMessage, extractedMessage, =, builder, ., build, (, idGenerator, ), ;, if, (, needToCheckDuplications, &&, !, isUnnamedMsg, &&]
[;, }, JsMessage, extractedMessage, =, builder, ., build, (, idGenerator, ), ;, if, (, needToCheckDuplications, &&, !, isUnnamedMsg, &&, !]
[;, }, JsMessage, extractedMessage, =, builder, ., build, (, idGenerator, ), ;, if, (, needToCheckDuplications, &&, !, isUnnamedMsg, &&, !]
[build, (, idGenerator, ), ;, if, (, needToCheckDuplications, &&, !, isUnnamedMsg, &&, !, extractedMessage, ., isExternal, (, ), ), {]
[idGenerator, ), ;, if, (, needToCheckDuplications, &&, !, isUnnamedMsg, &&, !, extractedMessage, ., isExternal, (, ), ), {, checkIfMessageDuplicated, (]
[;, if, (, needToCheckDuplications, &&, !, isUnnamedMsg, &&, !, extractedMessage, ., isExternal, (, ), ), {, checkIfMessageDuplicated, (, messageKey, ,]
[&&, !, isUnnamedMsg, &&, !, extractedMessage, ., isExternal, (, ), ), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }]
[isUnnamedMsg, &&, !, extractedMessage, ., isExternal, (, ), ), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }, trackMessage, (]
[!, extractedMessage, ., isExternal, (, ), ), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }, trackMessage, (, traversal, ,]
[., isExternal, (, ), ), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }, trackMessage, (, traversal, ,, extractedMessage, ,]
[(, ), ), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }, trackMessage, (, traversal, ,, extractedMessage, ,, messageKey, ,]
[), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }, trackMessage, (, traversal, ,, extractedMessage, ,, messageKey, ,, msgNode, ,]
[,, msgNode, ), ;, }, trackMessage, (, traversal, ,, extractedMessage, ,, messageKey, ,, msgNode, ,, isUnnamedMsg, ), ;, if, (]
[,, msgNode, ), ;, }, trackMessage, (, traversal, ,, extractedMessage, ,, messageKey, ,, msgNode, ,, isUnnamedMsg, ), ;, if, (]
[traversal, ,, extractedMessage, ,, messageKey, ,, msgNode, ,, isUnnamedMsg, ), ;, if, (, extractedMessage, ., isEmpty, (, ), ), {]
[traversal, ,, extractedMessage, ,, messageKey, ,, msgNode, ,, isUnnamedMsg, ), ;, if, (, extractedMessage, ., isEmpty, (, ), ), {]
[messageKey, ,, msgNode, ,, isUnnamedMsg, ), ;, if, (, extractedMessage, ., isEmpty, (, ), ), {, compiler, ., report, (]
[messageKey, ,, msgNode, ,, isUnnamedMsg, ), ;, if, (, extractedMessage, ., isEmpty, (, ), ), {, compiler, ., report, (]
[isUnnamedMsg, ), ;, if, (, extractedMessage, ., isEmpty, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (]
[;, if, (, extractedMessage, ., isEmpty, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,]
[(, extractedMessage, ., isEmpty, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_TEXT, ,]
[compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_TEXT, ,, messageKey, ), ), ;, }, String, desc, =]
[compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_TEXT, ,, messageKey, ), ), ;, }, String, desc, =]
[node, ,, MESSAGE_HAS_NO_TEXT, ,, messageKey, ), ), ;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (]
[node, ,, MESSAGE_HAS_NO_TEXT, ,, messageKey, ), ), ;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (]
[node, ,, MESSAGE_HAS_NO_TEXT, ,, messageKey, ), ), ;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (]
[MESSAGE_HAS_NO_TEXT, ,, messageKey, ), ), ;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (, isNewStyleMessage, &&]
[,, messageKey, ), ), ;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (, isNewStyleMessage, &&, (]
[,, messageKey, ), ), ;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (, isNewStyleMessage, &&, (]
[,, messageKey, ), ), ;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (, isNewStyleMessage, &&, (]
[), ), ;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (, isNewStyleMessage, &&, (, desc, ==]
[;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (, isNewStyleMessage, &&, (, desc, ==, null, ||]
[;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (, isNewStyleMessage, &&, (, desc, ==, null, ||]
[;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (, isNewStyleMessage, &&, (, desc, ==, null, ||]
[if, (, isNewStyleMessage, &&, (, desc, ==, null, ||, desc, ., trim, (, ), ., isEmpty, (, ), ), &&]
[(, isNewStyleMessage, &&, (, desc, ==, null, ||, desc, ., trim, (, ), ., isEmpty, (, ), ), &&, !]
[(, isNewStyleMessage, &&, (, desc, ==, null, ||, desc, ., trim, (, ), ., isEmpty, (, ), ), &&, !]
[||, desc, ., trim, (, ), ., isEmpty, (, ), ), &&, !, extractedMessage, ., isExternal, (, ), ), {]
[||, desc, ., trim, (, ), ., isEmpty, (, ), ), &&, !, extractedMessage, ., isExternal, (, ), ), {]
[(, ), ., isEmpty, (, ), ), &&, !, extractedMessage, ., isExternal, (, ), ), {, compiler, ., report, (]
[(, ), ., isEmpty, (, ), ), &&, !, extractedMessage, ., isExternal, (, ), ), {, compiler, ., report, (]
[(, ), ), &&, !, extractedMessage, ., isExternal, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (]
[), &&, !, extractedMessage, ., isExternal, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,]
[!, extractedMessage, ., isExternal, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION, ,]
[compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, ), ), ;, }, JsMessageDefinition, msgDefinition, =]
[(, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, ), ), ;, }, JsMessageDefinition, msgDefinition, =, new, JsMessageDefinition, (]
[., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, ), ), ;, }, JsMessageDefinition, msgDefinition, =, new, JsMessageDefinition, (, node, ,]
[(, node, ,, MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, ), ), ;, }, JsMessageDefinition, msgDefinition, =, new, JsMessageDefinition, (, node, ,, msgNode, ,]
[MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, ), ), ;, }, JsMessageDefinition, msgDefinition, =, new, JsMessageDefinition, (, node, ,, msgNode, ,, msgNodeParent, ), ;]
[messageKey, ), ), ;, }, JsMessageDefinition, msgDefinition, =, new, JsMessageDefinition, (, node, ,, msgNode, ,, msgNodeParent, ), ;, processJsMessage, (]
[), ;, }, JsMessageDefinition, msgDefinition, =, new, JsMessageDefinition, (, node, ,, msgNode, ,, msgNodeParent, ), ;, processJsMessage, (, extractedMessage, ,]
[trackMessage, (, NodeTraversal, t, ,, JsMessage, message, ,, String, msgName, ,, Node, msgNode, ,, boolean, isUnnamedMessage, ), {, if, (]
[(, NodeTraversal, t, ,, JsMessage, message, ,, String, msgName, ,, Node, msgNode, ,, boolean, isUnnamedMessage, ), {, if, (, !]
[,, String, msgName, ,, Node, msgNode, ,, boolean, isUnnamedMessage, ), {, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =]
[,, Node, msgNode, ,, boolean, isUnnamedMessage, ), {, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =, new, MessageLocation, (]
[msgNode, ,, boolean, isUnnamedMessage, ), {, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =, new, MessageLocation, (, message, ,]
[isUnnamedMessage, ), {, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =, new, MessageLocation, (, message, ,, msgNode, ), ;]
[isUnnamedMessage, ), {, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =, new, MessageLocation, (, message, ,, msgNode, ), ;]
[(, !, isUnnamedMessage, ), {, MessageLocation, location, =, new, MessageLocation, (, message, ,, msgNode, ), ;, messageNames, ., put, (]
[isUnnamedMessage, ), {, MessageLocation, location, =, new, MessageLocation, (, message, ,, msgNode, ), ;, messageNames, ., put, (, msgName, ,]
[MessageLocation, (, message, ,, msgNode, ), ;, messageNames, ., put, (, msgName, ,, location, ), ;, }, else, if, (]
[MessageLocation, (, message, ,, msgNode, ), ;, messageNames, ., put, (, msgName, ,, location, ), ;, }, else, if, (]
[(, msgName, ,, location, ), ;, }, else, if, (, msgNode, ., isName, (, ), ), {, Var, var, =]
[(, msgName, ,, location, ), ;, }, else, if, (, msgNode, ., isName, (, ), ), {, Var, var, =]
[(, msgName, ,, location, ), ;, }, else, if, (, msgNode, ., isName, (, ), ), {, Var, var, =]
[if, (, msgNode, ., isName, (, ), ), {, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[(, ), ), {, Var, var, =, t, ., getScope, (, ), ., getVar, (, msgName, ), ;, if, (]
[(, ), ), {, Var, var, =, t, ., getScope, (, ), ., getVar, (, msgName, ), ;, if, (]
[), {, Var, var, =, t, ., getScope, (, ), ., getVar, (, msgName, ), ;, if, (, var, !=]
[var, =, t, ., getScope, (, ), ., getVar, (, msgName, ), ;, if, (, var, !=, null, ), {]
[var, =, t, ., getScope, (, ), ., getVar, (, msgName, ), ;, if, (, var, !=, null, ), {]
[getScope, (, ), ., getVar, (, msgName, ), ;, if, (, var, !=, null, ), {, unnamedMessages, ., put, (]
[), ., getVar, (, msgName, ), ;, if, (, var, !=, null, ), {, unnamedMessages, ., put, (, var, ,]
[message, ), ;, }, }, }, private, JsMessage, getTrackedMessage, (, NodeTraversal, t, ,, String, msgName, ), {, boolean, isUnnamedMessage, =]
[;, }, }, }, private, JsMessage, getTrackedMessage, (, NodeTraversal, t, ,, String, msgName, ), {, boolean, isUnnamedMessage, =, isUnnamedMessageName, (]
[JsMessage, getTrackedMessage, (, NodeTraversal, t, ,, String, msgName, ), {, boolean, isUnnamedMessage, =, isUnnamedMessageName, (, msgName, ), ;, if, (]
[getTrackedMessage, (, NodeTraversal, t, ,, String, msgName, ), {, boolean, isUnnamedMessage, =, isUnnamedMessageName, (, msgName, ), ;, if, (, !]
[msgName, ), {, boolean, isUnnamedMessage, =, isUnnamedMessageName, (, msgName, ), ;, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =]
[msgName, ), {, boolean, isUnnamedMessage, =, isUnnamedMessageName, (, msgName, ), ;, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =]
[isUnnamedMessage, =, isUnnamedMessageName, (, msgName, ), ;, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =, messageNames, ., get, (]
[msgName, ), ;, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, return]
[msgName, ), ;, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, return]
[msgName, ), ;, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, return]
[;, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, return, location, ==]
[(, !, isUnnamedMessage, ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, return, location, ==, null, ?]
[isUnnamedMessage, ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, return, location, ==, null, ?, null, :]
[isUnnamedMessage, ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, return, location, ==, null, ?, null, :]
[msgName, ), ;, return, location, ==, null, ?, null, :, location, ., message, ;, }, else, {, Var, var, =]
[msgName, ), ;, return, location, ==, null, ?, null, :, location, ., message, ;, }, else, {, Var, var, =]
[msgName, ), ;, return, location, ==, null, ?, null, :, location, ., message, ;, }, else, {, Var, var, =]
[null, :, location, ., message, ;, }, else, {, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[;, }, else, {, Var, var, =, t, ., getScope, (, ), ., getVar, (, msgName, ), ;, if, (]
[;, }, else, {, Var, var, =, t, ., getScope, (, ), ., getVar, (, msgName, ), ;, if, (]
[else, {, Var, var, =, t, ., getScope, (, ), ., getVar, (, msgName, ), ;, if, (, var, !=]
[=, t, ., getScope, (, ), ., getVar, (, msgName, ), ;, if, (, var, !=, null, ), {, return]
[=, t, ., getScope, (, ), ., getVar, (, msgName, ), ;, if, (, var, !=, null, ), {, return]
[(, ), ., getVar, (, msgName, ), ;, if, (, var, !=, null, ), {, return, unnamedMessages, ., get, (]
[), ;, if, (, var, !=, null, ), {, return, unnamedMessages, ., get, (, var, ), ;, }, }, return]
[;, }, }, return, null, ;, }, private, void, checkIfMessageDuplicated, (, String, msgName, ,, Node, msgNode, ), {, if, (]
[;, }, }, return, null, ;, }, private, void, checkIfMessageDuplicated, (, String, msgName, ,, Node, msgNode, ), {, if, (]
[null, ;, }, private, void, checkIfMessageDuplicated, (, String, msgName, ,, Node, msgNode, ), {, if, (, messageNames, ., containsKey, (]
[String, msgName, ,, Node, msgNode, ), {, if, (, messageNames, ., containsKey, (, msgName, ), ), {, MessageLocation, location, =]
[String, msgName, ,, Node, msgNode, ), {, if, (, messageNames, ., containsKey, (, msgName, ), ), {, MessageLocation, location, =]
[msgNode, ), {, if, (, messageNames, ., containsKey, (, msgName, ), ), {, MessageLocation, location, =, messageNames, ., get, (]
[if, (, messageNames, ., containsKey, (, msgName, ), ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;]
[if, (, messageNames, ., containsKey, (, msgName, ), ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;]
[containsKey, (, msgName, ), ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, compiler, ., report, (]
[containsKey, (, msgName, ), ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, compiler, ., report, (]
[), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, compiler, ., report, (, JSError, ., make, (]
[MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, compiler, ., report, (, JSError, ., make, (, msgNode, ,]
[=, messageNames, ., get, (, msgName, ), ;, compiler, ., report, (, JSError, ., make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,]
[., get, (, msgName, ), ;, compiler, ., report, (, JSError, ., make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,]
[., get, (, msgName, ), ;, compiler, ., report, (, JSError, ., make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,]
[., get, (, msgName, ), ;, compiler, ., report, (, JSError, ., make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,]
[report, (, JSError, ., make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,, location, ., messageNode, ., getSourceFileName, (, ), ,]
[report, (, JSError, ., make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,, location, ., messageNode, ., getSourceFileName, (, ), ,]
[make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,, location, ., messageNode, ., getSourceFileName, (, ), ,, Integer, ., toString, (]
[make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,, location, ., messageNode, ., getSourceFileName, (, ), ,, Integer, ., toString, (]
[make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,, location, ., messageNode, ., getSourceFileName, (, ), ,, Integer, ., toString, (]
[Builder, builder, ,, Node, nameNode, ,, Node, parentNode, ,, @, Nullable, Node, grandParentNode, ), throws, MalformedException, {, Node, valueNode, =]
[Builder, builder, ,, Node, nameNode, ,, Node, parentNode, ,, @, Nullable, Node, grandParentNode, ), throws, MalformedException, {, Node, valueNode, =]
[,, @, Nullable, Node, grandParentNode, ), throws, MalformedException, {, Node, valueNode, =, nameNode, ., getFirstChild, (, ), ;, switch, (]
[,, @, Nullable, Node, grandParentNode, ), throws, MalformedException, {, Node, valueNode, =, nameNode, ., getFirstChild, (, ), ;, switch, (]
[{, Node, valueNode, =, nameNode, ., getFirstChild, (, ), ;, switch, (, valueNode, ., getType, (, ), ), {, case]
[{, Node, valueNode, =, nameNode, ., getFirstChild, (, ), ;, switch, (, valueNode, ., getType, (, ), ), {, case]
[., getFirstChild, (, ), ;, switch, (, valueNode, ., getType, (, ), ), {, case, Token, ., STRING, :, case]
[., getFirstChild, (, ), ;, switch, (, valueNode, ., getType, (, ), ), {, case, Token, ., STRING, :, case]
[;, switch, (, valueNode, ., getType, (, ), ), {, case, Token, ., STRING, :, case, Token, ., ADD, :]
[(, valueNode, ., getType, (, ), ), {, case, Token, ., STRING, :, case, Token, ., ADD, :, maybeInitMetaDataFromJsDocOrHelpVar, (]
[., getType, (, ), ), {, case, Token, ., STRING, :, case, Token, ., ADD, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,]
[(, ), ), {, case, Token, ., STRING, :, case, Token, ., ADD, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,]
[{, case, Token, ., STRING, :, case, Token, ., ADD, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;]
[{, case, Token, ., STRING, :, case, Token, ., ADD, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;]
[STRING, :, case, Token, ., ADD, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, builder, ., appendStringPart, (]
[case, Token, ., ADD, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, builder, ., appendStringPart, (, extractStringFromStringExprNode, (]
[builder, ,, parentNode, ,, grandParentNode, ), ;, builder, ., appendStringPart, (, extractStringFromStringExprNode, (, valueNode, ), ), ;, break, ;, case]
[builder, ,, parentNode, ,, grandParentNode, ), ;, builder, ., appendStringPart, (, extractStringFromStringExprNode, (, valueNode, ), ), ;, break, ;, case]
[grandParentNode, ), ;, builder, ., appendStringPart, (, extractStringFromStringExprNode, (, valueNode, ), ), ;, break, ;, case, Token, ., FUNCTION, :]
[;, builder, ., appendStringPart, (, extractStringFromStringExprNode, (, valueNode, ), ), ;, break, ;, case, Token, ., FUNCTION, :, maybeInitMetaDataFromJsDocOrHelpVar, (]
[., appendStringPart, (, extractStringFromStringExprNode, (, valueNode, ), ), ;, break, ;, case, Token, ., FUNCTION, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,]
[(, extractStringFromStringExprNode, (, valueNode, ), ), ;, break, ;, case, Token, ., FUNCTION, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,]
[valueNode, ), ), ;, break, ;, case, Token, ., FUNCTION, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;]
[), ;, break, ;, case, Token, ., FUNCTION, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, extractFromFunctionNode, (]
[break, ;, case, Token, ., FUNCTION, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, extractFromFunctionNode, (, builder, ,]
[:, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, extractFromFunctionNode, (, builder, ,, valueNode, ), ;, break, ;, case]
[:, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, extractFromFunctionNode, (, builder, ,, valueNode, ), ;, break, ;, case]
[,, parentNode, ,, grandParentNode, ), ;, extractFromFunctionNode, (, builder, ,, valueNode, ), ;, break, ;, case, Token, ., CALL, :]
[,, grandParentNode, ), ;, extractFromFunctionNode, (, builder, ,, valueNode, ), ;, break, ;, case, Token, ., CALL, :, maybeInitMetaDataFromJsDoc, (]
[), ;, extractFromFunctionNode, (, builder, ,, valueNode, ), ;, break, ;, case, Token, ., CALL, :, maybeInitMetaDataFromJsDoc, (, builder, ,]
[(, builder, ,, valueNode, ), ;, break, ;, case, Token, ., CALL, :, maybeInitMetaDataFromJsDoc, (, builder, ,, parentNode, ), ;]
[,, valueNode, ), ;, break, ;, case, Token, ., CALL, :, maybeInitMetaDataFromJsDoc, (, builder, ,, parentNode, ), ;, extractFromCallNode, (]
[), ;, break, ;, case, Token, ., CALL, :, maybeInitMetaDataFromJsDoc, (, builder, ,, parentNode, ), ;, extractFromCallNode, (, builder, ,]
[:, maybeInitMetaDataFromJsDoc, (, builder, ,, parentNode, ), ;, extractFromCallNode, (, builder, ,, valueNode, ), ;, break, ;, default, :, throw]
[builder, ,, parentNode, ), ;, extractFromCallNode, (, builder, ,, valueNode, ), ;, break, ;, default, :, throw, new, MalformedException, (]
[builder, ,, parentNode, ), ;, extractFromCallNode, (, builder, ,, valueNode, ), ;, break, ;, default, :, throw, new, MalformedException, (]
[parentNode, ), ;, extractFromCallNode, (, builder, ,, valueNode, ), ;, break, ;, default, :, throw, new, MalformedException, (, "Cannot parse value of message ", +]
[parentNode, ), ;, extractFromCallNode, (, builder, ,, valueNode, ), ;, break, ;, default, :, throw, new, MalformedException, (, "Cannot parse value of message ", +]
[,, valueNode, ), ;, break, ;, default, :, throw, new, MalformedException, (, "Cannot parse value of message ", +, builder, ., getKey, (, ), ,]
[}, private, void, extractMessageFromProperty, (, Builder, builder, ,, Node, getPropNode, ,, Node, assignNode, ), throws, MalformedException, {, Node, callNode, =]
[}, private, void, extractMessageFromProperty, (, Builder, builder, ,, Node, getPropNode, ,, Node, assignNode, ), throws, MalformedException, {, Node, callNode, =]
[builder, ,, Node, getPropNode, ,, Node, assignNode, ), throws, MalformedException, {, Node, callNode, =, getPropNode, ., getNext, (, ), ;]
[Node, getPropNode, ,, Node, assignNode, ), throws, MalformedException, {, Node, callNode, =, getPropNode, ., getNext, (, ), ;, maybeInitMetaDataFromJsDoc, (]
[,, Node, assignNode, ), throws, MalformedException, {, Node, callNode, =, getPropNode, ., getNext, (, ), ;, maybeInitMetaDataFromJsDoc, (, builder, ,]
[), throws, MalformedException, {, Node, callNode, =, getPropNode, ., getNext, (, ), ;, maybeInitMetaDataFromJsDoc, (, builder, ,, assignNode, ), ;]
[MalformedException, {, Node, callNode, =, getPropNode, ., getNext, (, ), ;, maybeInitMetaDataFromJsDoc, (, builder, ,, assignNode, ), ;, extractFromCallNode, (]
[Node, callNode, =, getPropNode, ., getNext, (, ), ;, maybeInitMetaDataFromJsDoc, (, builder, ,, assignNode, ), ;, extractFromCallNode, (, builder, ,]
[private, void, maybeInitMetaDataFromJsDocOrHelpVar, (, Builder, builder, ,, Node, varNode, ,, @, Nullable, Node, parentOfVarNode, ), throws, MalformedException, {, if, (]
[maybeInitMetaDataFromJsDocOrHelpVar, (, Builder, builder, ,, Node, varNode, ,, @, Nullable, Node, parentOfVarNode, ), throws, MalformedException, {, if, (, maybeInitMetaDataFromJsDoc, (]
[Builder, builder, ,, Node, varNode, ,, @, Nullable, Node, parentOfVarNode, ), throws, MalformedException, {, if, (, maybeInitMetaDataFromJsDoc, (, builder, ,]
[parentOfVarNode, ), throws, MalformedException, {, if, (, maybeInitMetaDataFromJsDoc, (, builder, ,, varNode, ), ), {, return, ;, }, if, (]
[parentOfVarNode, ), throws, MalformedException, {, if, (, maybeInitMetaDataFromJsDoc, (, builder, ,, varNode, ), ), {, return, ;, }, if, (]
[), throws, MalformedException, {, if, (, maybeInitMetaDataFromJsDoc, (, builder, ,, varNode, ), ), {, return, ;, }, if, (, (]
[), throws, MalformedException, {, if, (, maybeInitMetaDataFromJsDoc, (, builder, ,, varNode, ), ), {, return, ;, }, if, (, (]
[MalformedException, {, if, (, maybeInitMetaDataFromJsDoc, (, builder, ,, varNode, ), ), {, return, ;, }, if, (, (, parentOfVarNode, !=]
[(, maybeInitMetaDataFromJsDoc, (, builder, ,, varNode, ), ), {, return, ;, }, if, (, (, parentOfVarNode, !=, null, ), &&]
[(, builder, ,, varNode, ), ), {, return, ;, }, if, (, (, parentOfVarNode, !=, null, ), &&, maybeInitMetaDataFromHelpVar, (]
[,, varNode, ), ), {, return, ;, }, if, (, (, parentOfVarNode, !=, null, ), &&, maybeInitMetaDataFromHelpVar, (, builder, ,]
[,, varNode, ), ), {, return, ;, }, if, (, (, parentOfVarNode, !=, null, ), &&, maybeInitMetaDataFromHelpVar, (, builder, ,]
[{, return, ;, }, if, (, (, parentOfVarNode, !=, null, ), &&, maybeInitMetaDataFromHelpVar, (, builder, ,, parentOfVarNode, ., getChildBefore, (]
[!=, null, ), &&, maybeInitMetaDataFromHelpVar, (, builder, ,, parentOfVarNode, ., getChildBefore, (, varNode, ), ), ), {, return, ;, }]
[), &&, maybeInitMetaDataFromHelpVar, (, builder, ,, parentOfVarNode, ., getChildBefore, (, varNode, ), ), ), {, return, ;, }, maybeInitMetaDataFromHelpVar, (]
[maybeInitMetaDataFromHelpVar, (, builder, ,, parentOfVarNode, ., getChildBefore, (, varNode, ), ), ), {, return, ;, }, maybeInitMetaDataFromHelpVar, (, builder, ,]
[maybeInitMetaDataFromHelpVar, (, builder, ,, parentOfVarNode, ., getChildBefore, (, varNode, ), ), ), {, return, ;, }, maybeInitMetaDataFromHelpVar, (, builder, ,]
[), ;, }, private, boolean, maybeInitMetaDataFromHelpVar, (, Builder, builder, ,, @, Nullable, Node, sibling, ), throws, MalformedException, {, if, (]
[), ;, }, private, boolean, maybeInitMetaDataFromHelpVar, (, Builder, builder, ,, @, Nullable, Node, sibling, ), throws, MalformedException, {, if, (]
[;, }, private, boolean, maybeInitMetaDataFromHelpVar, (, Builder, builder, ,, @, Nullable, Node, sibling, ), throws, MalformedException, {, if, (, (]
[;, }, private, boolean, maybeInitMetaDataFromHelpVar, (, Builder, builder, ,, @, Nullable, Node, sibling, ), throws, MalformedException, {, if, (, (]
[private, boolean, maybeInitMetaDataFromHelpVar, (, Builder, builder, ,, @, Nullable, Node, sibling, ), throws, MalformedException, {, if, (, (, sibling, !=]
[(, Builder, builder, ,, @, Nullable, Node, sibling, ), throws, MalformedException, {, if, (, (, sibling, !=, null, ), &&]
[Builder, builder, ,, @, Nullable, Node, sibling, ), throws, MalformedException, {, if, (, (, sibling, !=, null, ), &&, (]
[Builder, builder, ,, @, Nullable, Node, sibling, ), throws, MalformedException, {, if, (, (, sibling, !=, null, ), &&, (]
[if, (, (, sibling, !=, null, ), &&, (, sibling, ., isVar, (, ), ), ), {, Node, nameNode, =]
[if, (, (, sibling, !=, null, ), &&, (, sibling, ., isVar, (, ), ), ), {, Node, nameNode, =]
[sibling, ., isVar, (, ), ), ), {, Node, nameNode, =, sibling, ., getFirstChild, (, ), ;, String, name, =]
[sibling, ., isVar, (, ), ), ), {, Node, nameNode, =, sibling, ., getFirstChild, (, ), ;, String, name, =]
[Node, nameNode, =, sibling, ., getFirstChild, (, ), ;, String, name, =, nameNode, ., getString, (, ), ;, if, (]
[Node, nameNode, =, sibling, ., getFirstChild, (, ), ;, String, name, =, nameNode, ., getString, (, ), ;, if, (]
[., getFirstChild, (, ), ;, String, name, =, nameNode, ., getString, (, ), ;, if, (, name, ., equals, (]
[., getFirstChild, (, ), ;, String, name, =, nameNode, ., getString, (, ), ;, if, (, name, ., equals, (]
[., getFirstChild, (, ), ;, String, name, =, nameNode, ., getString, (, ), ;, if, (, name, ., equals, (]
[name, =, nameNode, ., getString, (, ), ;, if, (, name, ., equals, (, builder, ., getKey, (, ), +]
[;, if, (, name, ., equals, (, builder, ., getKey, (, ), +, DESC_SUFFIX, ), ), {, Node, valueNode, =]
[;, if, (, name, ., equals, (, builder, ., getKey, (, ), +, DESC_SUFFIX, ), ), {, Node, valueNode, =]
[getKey, (, ), +, DESC_SUFFIX, ), ), {, Node, valueNode, =, nameNode, ., getFirstChild, (, ), ;, String, desc, =]
[), +, DESC_SUFFIX, ), ), {, Node, valueNode, =, nameNode, ., getFirstChild, (, ), ;, String, desc, =, extractStringFromStringExprNode, (]
[{, Node, valueNode, =, nameNode, ., getFirstChild, (, ), ;, String, desc, =, extractStringFromStringExprNode, (, valueNode, ), ;, if, (]
[{, Node, valueNode, =, nameNode, ., getFirstChild, (, ), ;, String, desc, =, extractStringFromStringExprNode, (, valueNode, ), ;, if, (]
[nameNode, ., getFirstChild, (, ), ;, String, desc, =, extractStringFromStringExprNode, (, valueNode, ), ;, if, (, desc, ., startsWith, (]
[), ;, String, desc, =, extractStringFromStringExprNode, (, valueNode, ), ;, if, (, desc, ., startsWith, (, HIDDEN_DESC_PREFIX, ), ), {]
[), ;, String, desc, =, extractStringFromStringExprNode, (, valueNode, ), ;, if, (, desc, ., startsWith, (, HIDDEN_DESC_PREFIX, ), ), {]
[=, extractStringFromStringExprNode, (, valueNode, ), ;, if, (, desc, ., startsWith, (, HIDDEN_DESC_PREFIX, ), ), {, builder, ., setDesc, (]
[=, extractStringFromStringExprNode, (, valueNode, ), ;, if, (, desc, ., startsWith, (, HIDDEN_DESC_PREFIX, ), ), {, builder, ., setDesc, (]
[=, extractStringFromStringExprNode, (, valueNode, ), ;, if, (, desc, ., startsWith, (, HIDDEN_DESC_PREFIX, ), ), {, builder, ., setDesc, (]
[), ;, if, (, desc, ., startsWith, (, HIDDEN_DESC_PREFIX, ), ), {, builder, ., setDesc, (, desc, ., substring, (]
[), ;, if, (, desc, ., startsWith, (, HIDDEN_DESC_PREFIX, ), ), {, builder, ., setDesc, (, desc, ., substring, (]
[builder, ., setDesc, (, desc, ., substring, (, HIDDEN_DESC_PREFIX, ., length, (, ), ), ., trim, (, ), ), ;]
[builder, ., setDesc, (, desc, ., substring, (, HIDDEN_DESC_PREFIX, ., length, (, ), ), ., trim, (, ), ), ;]
[desc, ., substring, (, HIDDEN_DESC_PREFIX, ., length, (, ), ), ., trim, (, ), ), ;, builder, ., setIsHidden, (]
[length, (, ), ), ., trim, (, ), ), ;, builder, ., setIsHidden, (, true, ), ;, }, else, {]
[length, (, ), ), ., trim, (, ), ), ;, builder, ., setIsHidden, (, true, ), ;, }, else, {]
[., trim, (, ), ), ;, builder, ., setIsHidden, (, true, ), ;, }, else, {, builder, ., setDesc, (]
[;, builder, ., setIsHidden, (, true, ), ;, }, else, {, builder, ., setDesc, (, desc, ), ;, }, return]
[true, ), ;, }, else, {, builder, ., setDesc, (, desc, ), ;, }, return, true, ;, }, }, return]
[}, }, return, false, ;, }, private, boolean, maybeInitMetaDataFromJsDoc, (, Builder, builder, ,, Node, node, ), {, boolean, messageHasDesc, =]
[}, private, boolean, maybeInitMetaDataFromJsDoc, (, Builder, builder, ,, Node, node, ), {, boolean, messageHasDesc, =, false, ;, JSDocInfo, info, =]
[}, private, boolean, maybeInitMetaDataFromJsDoc, (, Builder, builder, ,, Node, node, ), {, boolean, messageHasDesc, =, false, ;, JSDocInfo, info, =]
[Node, node, ), {, boolean, messageHasDesc, =, false, ;, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, if, (]
[Node, node, ), {, boolean, messageHasDesc, =, false, ;, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, if, (]
[), {, boolean, messageHasDesc, =, false, ;, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[;, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, String, desc, =]
[;, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, String, desc, =]
[), ;, if, (, info, !=, null, ), {, String, desc, =, info, ., getDescription, (, ), ;, if, (]
[), ;, if, (, info, !=, null, ), {, String, desc, =, info, ., getDescription, (, ), ;, if, (]
[if, (, info, !=, null, ), {, String, desc, =, info, ., getDescription, (, ), ;, if, (, desc, !=]
[!=, null, ), {, String, desc, =, info, ., getDescription, (, ), ;, if, (, desc, !=, null, ), {]
[!=, null, ), {, String, desc, =, info, ., getDescription, (, ), ;, if, (, desc, !=, null, ), {]
[String, desc, =, info, ., getDescription, (, ), ;, if, (, desc, !=, null, ), {, builder, ., setDesc, (]
[info, ., getDescription, (, ), ;, if, (, desc, !=, null, ), {, builder, ., setDesc, (, desc, ), ;]
[getDescription, (, ), ;, if, (, desc, !=, null, ), {, builder, ., setDesc, (, desc, ), ;, messageHasDesc, =]
[(, desc, !=, null, ), {, builder, ., setDesc, (, desc, ), ;, messageHasDesc, =, true, ;, }, if, (]
[(, desc, !=, null, ), {, builder, ., setDesc, (, desc, ), ;, messageHasDesc, =, true, ;, }, if, (]
[., setDesc, (, desc, ), ;, messageHasDesc, =, true, ;, }, if, (, info, ., isHidden, (, ), ), {]
[., setDesc, (, desc, ), ;, messageHasDesc, =, true, ;, }, if, (, info, ., isHidden, (, ), ), {]
[), ;, messageHasDesc, =, true, ;, }, if, (, info, ., isHidden, (, ), ), {, builder, ., setIsHidden, (]
[}, if, (, info, ., isHidden, (, ), ), {, builder, ., setIsHidden, (, true, ), ;, }, if, (]
[}, if, (, info, ., isHidden, (, ), ), {, builder, ., setIsHidden, (, true, ), ;, }, if, (]
[}, if, (, info, ., isHidden, (, ), ), {, builder, ., setIsHidden, (, true, ), ;, }, if, (]
[(, ), ), {, builder, ., setIsHidden, (, true, ), ;, }, if, (, info, ., getMeaning, (, ), !=]
[{, builder, ., setIsHidden, (, true, ), ;, }, if, (, info, ., getMeaning, (, ), !=, null, ), {]
[{, builder, ., setIsHidden, (, true, ), ;, }, if, (, info, ., getMeaning, (, ), !=, null, ), {]
[(, true, ), ;, }, if, (, info, ., getMeaning, (, ), !=, null, ), {, builder, ., setMeaning, (]
[(, true, ), ;, }, if, (, info, ., getMeaning, (, ), !=, null, ), {, builder, ., setMeaning, (]
[(, ), !=, null, ), {, builder, ., setMeaning, (, info, ., getMeaning, (, ), ), ;, }, }, return]
[;, }, }, return, messageHasDesc, ;, }, private, static, String, extractStringFromStringExprNode, (, Node, node, ), throws, MalformedException, {, switch, (]
[;, }, }, return, messageHasDesc, ;, }, private, static, String, extractStringFromStringExprNode, (, Node, node, ), throws, MalformedException, {, switch, (]
[static, String, extractStringFromStringExprNode, (, Node, node, ), throws, MalformedException, {, switch, (, node, ., getType, (, ), ), {, case]
[static, String, extractStringFromStringExprNode, (, Node, node, ), throws, MalformedException, {, switch, (, node, ., getType, (, ), ), {, case]
[node, ), throws, MalformedException, {, switch, (, node, ., getType, (, ), ), {, case, Token, ., STRING, :, return]
[node, ), throws, MalformedException, {, switch, (, node, ., getType, (, ), ), {, case, Token, ., STRING, :, return]
[node, ., getType, (, ), ), {, case, Token, ., STRING, :, return, node, ., getString, (, ), ;, case]
[node, ., getType, (, ), ), {, case, Token, ., STRING, :, return, node, ., getString, (, ), ;, case]
[case, Token, ., STRING, :, return, node, ., getString, (, ), ;, case, Token, ., ADD, :, StringBuilder, sb, =]
[), ;, case, Token, ., ADD, :, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, :]
[), ;, case, Token, ., ADD, :, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, :]
[StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, :, node, ., children, (, ), ), {]
[StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, :, node, ., children, (, ), ), {]
[StringBuilder, (, ), ;, for, (, Node, child, :, node, ., children, (, ), ), {, sb, ., append, (]
[), ;, for, (, Node, child, :, node, ., children, (, ), ), {, sb, ., append, (, extractStringFromStringExprNode, (]
[:, node, ., children, (, ), ), {, sb, ., append, (, extractStringFromStringExprNode, (, child, ), ), ;, }, return]
[:, node, ., children, (, ), ), {, sb, ., append, (, extractStringFromStringExprNode, (, child, ), ), ;, }, return]
[., append, (, extractStringFromStringExprNode, (, child, ), ), ;, }, return, sb, ., toString, (, ), ;, default, :, throw]
[extractStringFromStringExprNode, (, child, ), ), ;, }, return, sb, ., toString, (, ), ;, default, :, throw, new, MalformedException, (]
[extractStringFromStringExprNode, (, child, ), ), ;, }, return, sb, ., toString, (, ), ;, default, :, throw, new, MalformedException, (]
[child, ), ), ;, }, return, sb, ., toString, (, ), ;, default, :, throw, new, MalformedException, (, "STRING or ADD node expected; found: ", +]
[), ;, }, return, sb, ., toString, (, ), ;, default, :, throw, new, MalformedException, (, "STRING or ADD node expected; found: ", +, getReadableTokenName, (]
[return, sb, ., toString, (, ), ;, default, :, throw, new, MalformedException, (, "STRING or ADD node expected; found: ", +, getReadableTokenName, (, node, ), ,]
[}, private, void, extractFromFunctionNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, Set, <, String, >, phNames, =]
[}, private, void, extractFromFunctionNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, Set, <, String, >, phNames, =]
[throws, MalformedException, {, Set, <, String, >, phNames, =, Sets, ., newHashSet, (, ), ;, for, (, Node, fnChild, :]
[throws, MalformedException, {, Set, <, String, >, phNames, =, Sets, ., newHashSet, (, ), ;, for, (, Node, fnChild, :]
[Sets, ., newHashSet, (, ), ;, for, (, Node, fnChild, :, node, ., children, (, ), ), {, switch, (]
[Sets, ., newHashSet, (, ), ;, for, (, Node, fnChild, :, node, ., children, (, ), ), {, switch, (]
[Node, fnChild, :, node, ., children, (, ), ), {, switch, (, fnChild, ., getType, (, ), ), {, case]
[Node, fnChild, :, node, ., children, (, ), ), {, switch, (, fnChild, ., getType, (, ), ), {, case]
[), ), {, switch, (, fnChild, ., getType, (, ), ), {, case, Token, ., NAME, :, break, ;, case]
[), ), {, switch, (, fnChild, ., getType, (, ), ), {, case, Token, ., NAME, :, break, ;, case]
[), ), {, case, Token, ., NAME, :, break, ;, case, Token, ., PARAM_LIST, :, for, (, Node, argumentNode, :]
[), ), {, case, Token, ., NAME, :, break, ;, case, Token, ., PARAM_LIST, :, for, (, Node, argumentNode, :]
[;, case, Token, ., PARAM_LIST, :, for, (, Node, argumentNode, :, fnChild, ., children, (, ), ), {, if, (]
[;, case, Token, ., PARAM_LIST, :, for, (, Node, argumentNode, :, fnChild, ., children, (, ), ), {, if, (]
[:, fnChild, ., children, (, ), ), {, if, (, argumentNode, ., isName, (, ), ), {, String, phName, =]
[:, fnChild, ., children, (, ), ), {, if, (, argumentNode, ., isName, (, ), ), {, String, phName, =]
[if, (, argumentNode, ., isName, (, ), ), {, String, phName, =, argumentNode, ., getString, (, ), ;, if, (]
[if, (, argumentNode, ., isName, (, ), ), {, String, phName, =, argumentNode, ., getString, (, ), ;, if, (]
[isName, (, ), ), {, String, phName, =, argumentNode, ., getString, (, ), ;, if, (, phNames, ., contains, (]
[String, phName, =, argumentNode, ., getString, (, ), ;, if, (, phNames, ., contains, (, phName, ), ), {, throw]
[argumentNode, ., getString, (, ), ;, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (]
[argumentNode, ., getString, (, ), ;, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (]
[getString, (, ), ;, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +]
[), ;, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,]
[contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, argumentNode, ), ;, }, else, {]
[contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, argumentNode, ), ;, }, else, {]
[), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, argumentNode, ), ;, }, else, {, phNames, ., add, (]
[,, argumentNode, ), ;, }, else, {, phNames, ., add, (, phName, ), ;, }, }, }, break, ;, case]
[,, argumentNode, ), ;, }, else, {, phNames, ., add, (, phName, ), ;, }, }, }, break, ;, case]
[phNames, ., add, (, phName, ), ;, }, }, }, break, ;, case, Token, ., BLOCK, :, Node, returnNode, =]
[phNames, ., add, (, phName, ), ;, }, }, }, break, ;, case, Token, ., BLOCK, :, Node, returnNode, =]
[}, }, break, ;, case, Token, ., BLOCK, :, Node, returnNode, =, fnChild, ., getFirstChild, (, ), ;, if, (]
[}, break, ;, case, Token, ., BLOCK, :, Node, returnNode, =, fnChild, ., getFirstChild, (, ), ;, if, (, !]
[}, break, ;, case, Token, ., BLOCK, :, Node, returnNode, =, fnChild, ., getFirstChild, (, ), ;, if, (, !]
[Node, returnNode, =, fnChild, ., getFirstChild, (, ), ;, if, (, !, returnNode, ., isReturn, (, ), ), {, throw]
[fnChild, ., getFirstChild, (, ), ;, if, (, !, returnNode, ., isReturn, (, ), ), {, throw, new, MalformedException, (]
[fnChild, ., getFirstChild, (, ), ;, if, (, !, returnNode, ., isReturn, (, ), ), {, throw, new, MalformedException, (]
[getFirstChild, (, ), ;, if, (, !, returnNode, ., isReturn, (, ), ), {, throw, new, MalformedException, (, "RETURN node expected; found: ", +]
[), ;, if, (, !, returnNode, ., isReturn, (, ), ), {, throw, new, MalformedException, (, "RETURN node expected; found: ", +, getReadableTokenName, (]
[(, !, returnNode, ., isReturn, (, ), ), {, throw, new, MalformedException, (, "RETURN node expected; found: ", +, getReadableTokenName, (, returnNode, ), ,]
[throw, new, MalformedException, (, "RETURN node expected; found: ", +, getReadableTokenName, (, returnNode, ), ,, returnNode, ), ;, }, for, (, Node, child, :]
[throw, new, MalformedException, (, "RETURN node expected; found: ", +, getReadableTokenName, (, returnNode, ), ,, returnNode, ), ;, }, for, (, Node, child, :]
[(, returnNode, ), ,, returnNode, ), ;, }, for, (, Node, child, :, returnNode, ., children, (, ), ), {]
[), ,, returnNode, ), ;, }, for, (, Node, child, :, returnNode, ., children, (, ), ), {, extractFromReturnDescendant, (]
[returnNode, ), ;, }, for, (, Node, child, :, returnNode, ., children, (, ), ), {, extractFromReturnDescendant, (, builder, ,]
[returnNode, ., children, (, ), ), {, extractFromReturnDescendant, (, builder, ,, child, ), ;, }, for, (, String, phName, :]
[returnNode, ., children, (, ), ), {, extractFromReturnDescendant, (, builder, ,, child, ), ;, }, for, (, String, phName, :]
[builder, ,, child, ), ;, }, for, (, String, phName, :, builder, ., getPlaceholders, (, ), ), {, if, (]
[,, child, ), ;, }, for, (, String, phName, :, builder, ., getPlaceholders, (, ), ), {, if, (, !]
[,, child, ), ;, }, for, (, String, phName, :, builder, ., getPlaceholders, (, ), ), {, if, (, !]
[}, for, (, String, phName, :, builder, ., getPlaceholders, (, ), ), {, if, (, !, phNames, ., contains, (]
[:, builder, ., getPlaceholders, (, ), ), {, if, (, !, phNames, ., contains, (, phName, ), ), {, throw]
[getPlaceholders, (, ), ), {, if, (, !, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (]
[getPlaceholders, (, ), ), {, if, (, !, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (]
[), ), {, if, (, !, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +]
[{, if, (, !, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,]
[), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, returnNode, ), ;, }, }, break, ;, default, :, throw]
[new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, returnNode, ), ;, }, }, break, ;, default, :, throw, new, MalformedException, (]
[new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, returnNode, ), ;, }, }, break, ;, default, :, throw, new, MalformedException, (]
[(, "Unrecognized message placeholder referenced: ", +, phName, ,, returnNode, ), ;, }, }, break, ;, default, :, throw, new, MalformedException, (, "NAME, LP, or BLOCK node expected; found: ", +]
[+, phName, ,, returnNode, ), ;, }, }, break, ;, default, :, throw, new, MalformedException, (, "NAME, LP, or BLOCK node expected; found: ", +, getReadableTokenName, (]
[returnNode, ), ;, }, }, break, ;, default, :, throw, new, MalformedException, (, "NAME, LP, or BLOCK node expected; found: ", +, getReadableTokenName, (, node, ), ,]
[), ;, }, }, }, private, void, extractFromReturnDescendant, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, switch, (]
[), ;, }, }, }, private, void, extractFromReturnDescendant, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, switch, (]
[(, Builder, builder, ,, Node, node, ), throws, MalformedException, {, switch, (, node, ., getType, (, ), ), {, case]
[(, Builder, builder, ,, Node, node, ), throws, MalformedException, {, switch, (, node, ., getType, (, ), ), {, case]
[Node, node, ), throws, MalformedException, {, switch, (, node, ., getType, (, ), ), {, case, Token, ., STRING, :]
[Node, node, ), throws, MalformedException, {, switch, (, node, ., getType, (, ), ), {, case, Token, ., STRING, :]
[MalformedException, {, switch, (, node, ., getType, (, ), ), {, case, Token, ., STRING, :, builder, ., appendStringPart, (]
[MalformedException, {, switch, (, node, ., getType, (, ), ), {, case, Token, ., STRING, :, builder, ., appendStringPart, (]
[{, case, Token, ., STRING, :, builder, ., appendStringPart, (, node, ., getString, (, ), ), ;, break, ;, case]
[{, case, Token, ., STRING, :, builder, ., appendStringPart, (, node, ., getString, (, ), ), ;, break, ;, case]
[STRING, :, builder, ., appendStringPart, (, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :]
[STRING, :, builder, ., appendStringPart, (, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :]
[appendStringPart, (, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, builder, ., appendPlaceholderReference, (]
[appendStringPart, (, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, builder, ., appendPlaceholderReference, (]
[;, case, Token, ., NAME, :, builder, ., appendPlaceholderReference, (, node, ., getString, (, ), ), ;, break, ;, case]
[;, case, Token, ., NAME, :, builder, ., appendPlaceholderReference, (, node, ., getString, (, ), ), ;, break, ;, case]
[(, node, ., getString, (, ), ), ;, break, ;, case, Token, ., ADD, :, for, (, Node, child, :]
[(, node, ., getString, (, ), ), ;, break, ;, case, Token, ., ADD, :, for, (, Node, child, :]
[;, break, ;, case, Token, ., ADD, :, for, (, Node, child, :, node, ., children, (, ), ), {]
[;, case, Token, ., ADD, :, for, (, Node, child, :, node, ., children, (, ), ), {, extractFromReturnDescendant, (]
[Token, ., ADD, :, for, (, Node, child, :, node, ., children, (, ), ), {, extractFromReturnDescendant, (, builder, ,]
[node, ., children, (, ), ), {, extractFromReturnDescendant, (, builder, ,, child, ), ;, }, break, ;, default, :, throw]
[(, ), ), {, extractFromReturnDescendant, (, builder, ,, child, ), ;, }, break, ;, default, :, throw, new, MalformedException, (]
[(, ), ), {, extractFromReturnDescendant, (, builder, ,, child, ), ;, }, break, ;, default, :, throw, new, MalformedException, (]
[), {, extractFromReturnDescendant, (, builder, ,, child, ), ;, }, break, ;, default, :, throw, new, MalformedException, (, "STRING, NAME, or ADD node expected; found: ", +]
[extractFromReturnDescendant, (, builder, ,, child, ), ;, }, break, ;, default, :, throw, new, MalformedException, (, "STRING, NAME, or ADD node expected; found: ", +, getReadableTokenName, (]
[,, child, ), ;, }, break, ;, default, :, throw, new, MalformedException, (, "STRING, NAME, or ADD node expected; found: ", +, getReadableTokenName, (, node, ), ,]
[node, ), ;, }, }, private, void, extractFromCallNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, if, (]
[), ;, }, }, private, void, extractFromCallNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, if, (, !]
[), ;, }, }, private, void, extractFromCallNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, if, (, !]
[Builder, builder, ,, Node, node, ), throws, MalformedException, {, if, (, !, node, ., isCall, (, ), ), {, throw]
[Node, node, ), throws, MalformedException, {, if, (, !, node, ., isCall, (, ), ), {, throw, new, MalformedException, (]
[Node, node, ), throws, MalformedException, {, if, (, !, node, ., isCall, (, ), ), {, throw, new, MalformedException, (]
[Node, node, ), throws, MalformedException, {, if, (, !, node, ., isCall, (, ), ), {, throw, new, MalformedException, (]
[), throws, MalformedException, {, if, (, !, node, ., isCall, (, ), ), {, throw, new, MalformedException, (, "Message must be initialized using ", +]
[MalformedException, {, if, (, !, node, ., isCall, (, ), ), {, throw, new, MalformedException, (, "Message must be initialized using ", +, MSG_FUNCTION_NAME, +]
[if, (, !, node, ., isCall, (, ), ), {, throw, new, MalformedException, (, "Message must be initialized using ", +, MSG_FUNCTION_NAME, +, " function.", ,]
[), ), {, throw, new, MalformedException, (, "Message must be initialized using ", +, MSG_FUNCTION_NAME, +, " function.", ,, node, ), ;, }, Node, fnNameNode, =]
[), ), {, throw, new, MalformedException, (, "Message must be initialized using ", +, MSG_FUNCTION_NAME, +, " function.", ,, node, ), ;, }, Node, fnNameNode, =]
[+, MSG_FUNCTION_NAME, +, " function.", ,, node, ), ;, }, Node, fnNameNode, =, node, ., getFirstChild, (, ), ;, if, (]
[MSG_FUNCTION_NAME, +, " function.", ,, node, ), ;, }, Node, fnNameNode, =, node, ., getFirstChild, (, ), ;, if, (, !]
[MSG_FUNCTION_NAME, +, " function.", ,, node, ), ;, }, Node, fnNameNode, =, node, ., getFirstChild, (, ), ;, if, (, !]
[node, ), ;, }, Node, fnNameNode, =, node, ., getFirstChild, (, ), ;, if, (, !, MSG_FUNCTION_NAME, ., equals, (]
[node, ), ;, }, Node, fnNameNode, =, node, ., getFirstChild, (, ), ;, if, (, !, MSG_FUNCTION_NAME, ., equals, (]
[getFirstChild, (, ), ;, if, (, !, MSG_FUNCTION_NAME, ., equals, (, fnNameNode, ., getQualifiedName, (, ), ), ), {, throw]
[;, if, (, !, MSG_FUNCTION_NAME, ., equals, (, fnNameNode, ., getQualifiedName, (, ), ), ), {, throw, new, MalformedException, (]
[;, if, (, !, MSG_FUNCTION_NAME, ., equals, (, fnNameNode, ., getQualifiedName, (, ), ), ), {, throw, new, MalformedException, (]
[;, if, (, !, MSG_FUNCTION_NAME, ., equals, (, fnNameNode, ., getQualifiedName, (, ), ), ), {, throw, new, MalformedException, (]
[;, if, (, !, MSG_FUNCTION_NAME, ., equals, (, fnNameNode, ., getQualifiedName, (, ), ), ), {, throw, new, MalformedException, (]
[(, !, MSG_FUNCTION_NAME, ., equals, (, fnNameNode, ., getQualifiedName, (, ), ), ), {, throw, new, MalformedException, (, "Message initialized using unrecognized function. ", +]
[MSG_FUNCTION_NAME, ., equals, (, fnNameNode, ., getQualifiedName, (, ), ), ), {, throw, new, MalformedException, (, "Message initialized using unrecognized function. ", +, "Please use ", +]
[equals, (, fnNameNode, ., getQualifiedName, (, ), ), ), {, throw, new, MalformedException, (, "Message initialized using unrecognized function. ", +, "Please use ", +, MSG_FUNCTION_NAME, +]
[fnNameNode, ., getQualifiedName, (, ), ), ), {, throw, new, MalformedException, (, "Message initialized using unrecognized function. ", +, "Please use ", +, MSG_FUNCTION_NAME, +, "() instead.", ,]
[{, throw, new, MalformedException, (, "Message initialized using unrecognized function. ", +, "Please use ", +, MSG_FUNCTION_NAME, +, "() instead.", ,, fnNameNode, ), ;, }, Node, stringLiteralNode, =]
[{, throw, new, MalformedException, (, "Message initialized using unrecognized function. ", +, "Please use ", +, MSG_FUNCTION_NAME, +, "() instead.", ,, fnNameNode, ), ;, }, Node, stringLiteralNode, =]
[+, MSG_FUNCTION_NAME, +, "() instead.", ,, fnNameNode, ), ;, }, Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;, if, (]
[+, MSG_FUNCTION_NAME, +, "() instead.", ,, fnNameNode, ), ;, }, Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;, if, (]
[+, "() instead.", ,, fnNameNode, ), ;, }, Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;, if, (, stringLiteralNode, ==]
[), ;, }, Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;, if, (, stringLiteralNode, ==, null, ), {, throw]
[Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;, if, (, stringLiteralNode, ==, null, ), {, throw, new, MalformedException, (]
[=, fnNameNode, ., getNext, (, ), ;, if, (, stringLiteralNode, ==, null, ), {, throw, new, MalformedException, (, "Message string literal expected", ,]
[(, ), ;, if, (, stringLiteralNode, ==, null, ), {, throw, new, MalformedException, (, "Message string literal expected", ,, stringLiteralNode, ), ;, }]
[;, if, (, stringLiteralNode, ==, null, ), {, throw, new, MalformedException, (, "Message string literal expected", ,, stringLiteralNode, ), ;, }, parseMessageTextNode, (]
[(, stringLiteralNode, ==, null, ), {, throw, new, MalformedException, (, "Message string literal expected", ,, stringLiteralNode, ), ;, }, parseMessageTextNode, (, builder, ,]
[throw, new, MalformedException, (, "Message string literal expected", ,, stringLiteralNode, ), ;, }, parseMessageTextNode, (, builder, ,, stringLiteralNode, ), ;, Node, objLitNode, =]
[throw, new, MalformedException, (, "Message string literal expected", ,, stringLiteralNode, ), ;, }, parseMessageTextNode, (, builder, ,, stringLiteralNode, ), ;, Node, objLitNode, =]
[builder, ,, stringLiteralNode, ), ;, Node, objLitNode, =, stringLiteralNode, ., getNext, (, ), ;, Set, <, String, >, phNames, =]
[builder, ,, stringLiteralNode, ), ;, Node, objLitNode, =, stringLiteralNode, ., getNext, (, ), ;, Set, <, String, >, phNames, =]
[stringLiteralNode, ., getNext, (, ), ;, Set, <, String, >, phNames, =, Sets, ., newHashSet, (, ), ;, if, (]
[stringLiteralNode, ., getNext, (, ), ;, Set, <, String, >, phNames, =, Sets, ., newHashSet, (, ), ;, if, (]
[getNext, (, ), ;, Set, <, String, >, phNames, =, Sets, ., newHashSet, (, ), ;, if, (, objLitNode, !=]
[<, String, >, phNames, =, Sets, ., newHashSet, (, ), ;, if, (, objLitNode, !=, null, ), {, if, (]
[String, >, phNames, =, Sets, ., newHashSet, (, ), ;, if, (, objLitNode, !=, null, ), {, if, (, !]
[String, >, phNames, =, Sets, ., newHashSet, (, ), ;, if, (, objLitNode, !=, null, ), {, if, (, !]
[), ;, if, (, objLitNode, !=, null, ), {, if, (, !, objLitNode, ., isObjectLit, (, ), ), {, throw]
[(, objLitNode, !=, null, ), {, if, (, !, objLitNode, ., isObjectLit, (, ), ), {, throw, new, MalformedException, (]
[!=, null, ), {, if, (, !, objLitNode, ., isObjectLit, (, ), ), {, throw, new, MalformedException, (, "OBJLIT node expected", ,]
[isObjectLit, (, ), ), {, throw, new, MalformedException, (, "OBJLIT node expected", ,, objLitNode, ), ;, }, for, (, Node, aNode, =]
[isObjectLit, (, ), ), {, throw, new, MalformedException, (, "OBJLIT node expected", ,, objLitNode, ), ;, }, for, (, Node, aNode, =]
[new, MalformedException, (, "OBJLIT node expected", ,, objLitNode, ), ;, }, for, (, Node, aNode, =, objLitNode, ., getFirstChild, (, ), ;]
[new, MalformedException, (, "OBJLIT node expected", ,, objLitNode, ), ;, }, for, (, Node, aNode, =, objLitNode, ., getFirstChild, (, ), ;]
[(, "OBJLIT node expected", ,, objLitNode, ), ;, }, for, (, Node, aNode, =, objLitNode, ., getFirstChild, (, ), ;, aNode, !=]
[,, objLitNode, ), ;, }, for, (, Node, aNode, =, objLitNode, ., getFirstChild, (, ), ;, aNode, !=, null, ;]
[), ;, }, for, (, Node, aNode, =, objLitNode, ., getFirstChild, (, ), ;, aNode, !=, null, ;, aNode, =]
[), ;, }, for, (, Node, aNode, =, objLitNode, ., getFirstChild, (, ), ;, aNode, !=, null, ;, aNode, =]
[., getFirstChild, (, ), ;, aNode, !=, null, ;, aNode, =, aNode, ., getNext, (, ), ), {, if, (]
[getFirstChild, (, ), ;, aNode, !=, null, ;, aNode, =, aNode, ., getNext, (, ), ), {, if, (, !]
[getFirstChild, (, ), ;, aNode, !=, null, ;, aNode, =, aNode, ., getNext, (, ), ), {, if, (, !]
[aNode, =, aNode, ., getNext, (, ), ), {, if, (, !, aNode, ., isStringKey, (, ), ), {, throw]
[., getNext, (, ), ), {, if, (, !, aNode, ., isStringKey, (, ), ), {, throw, new, MalformedException, (]
[(, ), ), {, if, (, !, aNode, ., isStringKey, (, ), ), {, throw, new, MalformedException, (, "STRING_KEY node expected as OBJLIT key", ,]
[aNode, ., isStringKey, (, ), ), {, throw, new, MalformedException, (, "STRING_KEY node expected as OBJLIT key", ,, aNode, ), ;, }, String, phName, =]
[aNode, ., isStringKey, (, ), ), {, throw, new, MalformedException, (, "STRING_KEY node expected as OBJLIT key", ,, aNode, ), ;, }, String, phName, =]
[new, MalformedException, (, "STRING_KEY node expected as OBJLIT key", ,, aNode, ), ;, }, String, phName, =, aNode, ., getString, (, ), ;, if, (]
[MalformedException, (, "STRING_KEY node expected as OBJLIT key", ,, aNode, ), ;, }, String, phName, =, aNode, ., getString, (, ), ;, if, (, !]
["STRING_KEY node expected as OBJLIT key", ,, aNode, ), ;, }, String, phName, =, aNode, ., getString, (, ), ;, if, (, !, isLowerCamelCaseWithNumericSuffixes, (]
[}, String, phName, =, aNode, ., getString, (, ), ;, if, (, !, isLowerCamelCaseWithNumericSuffixes, (, phName, ), ), {, throw]
[=, aNode, ., getString, (, ), ;, if, (, !, isLowerCamelCaseWithNumericSuffixes, (, phName, ), ), {, throw, new, MalformedException, (]
[=, aNode, ., getString, (, ), ;, if, (, !, isLowerCamelCaseWithNumericSuffixes, (, phName, ), ), {, throw, new, MalformedException, (]
[., getString, (, ), ;, if, (, !, isLowerCamelCaseWithNumericSuffixes, (, phName, ), ), {, throw, new, MalformedException, (, "Placeholder name not in lowerCamelCase: ", +]
[(, ), ;, if, (, !, isLowerCamelCaseWithNumericSuffixes, (, phName, ), ), {, throw, new, MalformedException, (, "Placeholder name not in lowerCamelCase: ", +, phName, ,]
[isLowerCamelCaseWithNumericSuffixes, (, phName, ), ), {, throw, new, MalformedException, (, "Placeholder name not in lowerCamelCase: ", +, phName, ,, aNode, ), ;, }, if, (]
[isLowerCamelCaseWithNumericSuffixes, (, phName, ), ), {, throw, new, MalformedException, (, "Placeholder name not in lowerCamelCase: ", +, phName, ,, aNode, ), ;, }, if, (]
[), {, throw, new, MalformedException, (, "Placeholder name not in lowerCamelCase: ", +, phName, ,, aNode, ), ;, }, if, (, phNames, ., contains, (]
[(, "Placeholder name not in lowerCamelCase: ", +, phName, ,, aNode, ), ;, }, if, (, phNames, ., contains, (, phName, ), ), {, throw]
[phName, ,, aNode, ), ;, }, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (]
[phName, ,, aNode, ), ;, }, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (]
[aNode, ), ;, }, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +]
[;, }, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,]
[phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, aNode, ), ;, }]
[phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, aNode, ), ;, }]
[phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, aNode, ), ;, }, phNames, ., add, (]
[,, aNode, ), ;, }, phNames, ., add, (, phName, ), ;, }, }, Set, <, String, >, usedPlaceholders, =]
[,, aNode, ), ;, }, phNames, ., add, (, phName, ), ;, }, }, Set, <, String, >, usedPlaceholders, =]
[;, }, }, Set, <, String, >, usedPlaceholders, =, builder, ., getPlaceholders, (, ), ;, for, (, String, phName, :]
[String, >, usedPlaceholders, =, builder, ., getPlaceholders, (, ), ;, for, (, String, phName, :, usedPlaceholders, ), {, if, (]
[>, usedPlaceholders, =, builder, ., getPlaceholders, (, ), ;, for, (, String, phName, :, usedPlaceholders, ), {, if, (, !]
[>, usedPlaceholders, =, builder, ., getPlaceholders, (, ), ;, for, (, String, phName, :, usedPlaceholders, ), {, if, (, !]
[., getPlaceholders, (, ), ;, for, (, String, phName, :, usedPlaceholders, ), {, if, (, !, phNames, ., contains, (]
[for, (, String, phName, :, usedPlaceholders, ), {, if, (, !, phNames, ., contains, (, phName, ), ), {, throw]
[phName, :, usedPlaceholders, ), {, if, (, !, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (]
[phName, :, usedPlaceholders, ), {, if, (, !, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (]
[usedPlaceholders, ), {, if, (, !, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +]
[{, if, (, !, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,]
[), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, objLitNode, ), ;, }, }, for, (, String, phName, :]
[(, "Unrecognized message placeholder referenced: ", +, phName, ,, objLitNode, ), ;, }, }, for, (, String, phName, :, phNames, ), {, if, (]
["Unrecognized message placeholder referenced: ", +, phName, ,, objLitNode, ), ;, }, }, for, (, String, phName, :, phNames, ), {, if, (, !]
["Unrecognized message placeholder referenced: ", +, phName, ,, objLitNode, ), ;, }, }, for, (, String, phName, :, phNames, ), {, if, (, !]
[objLitNode, ), ;, }, }, for, (, String, phName, :, phNames, ), {, if, (, !, usedPlaceholders, ., contains, (]
[for, (, String, phName, :, phNames, ), {, if, (, !, usedPlaceholders, ., contains, (, phName, ), ), {, throw]
[phName, :, phNames, ), {, if, (, !, usedPlaceholders, ., contains, (, phName, ), ), {, throw, new, MalformedException, (]
[phName, :, phNames, ), {, if, (, !, usedPlaceholders, ., contains, (, phName, ), ), {, throw, new, MalformedException, (]
[phNames, ), {, if, (, !, usedPlaceholders, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Unused message placeholder: ", +]
[{, if, (, !, usedPlaceholders, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Unused message placeholder: ", +, phName, ,]
[;, }, }, }, private, void, parseMessageTextNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, String, value, =]
[}, }, private, void, parseMessageTextNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, String, value, =, extractStringFromStringExprNode, (]
[(, Builder, builder, ,, Node, node, ), throws, MalformedException, {, String, value, =, extractStringFromStringExprNode, (, node, ), ;, while, (]
[), throws, MalformedException, {, String, value, =, extractStringFromStringExprNode, (, node, ), ;, while, (, true, ), {, int, phBegin, =]
[), throws, MalformedException, {, String, value, =, extractStringFromStringExprNode, (, node, ), ;, while, (, true, ), {, int, phBegin, =]
[String, value, =, extractStringFromStringExprNode, (, node, ), ;, while, (, true, ), {, int, phBegin, =, value, ., indexOf, (]
[node, ), ;, while, (, true, ), {, int, phBegin, =, value, ., indexOf, (, PH_JS_PREFIX, ), ;, if, (]
[node, ), ;, while, (, true, ), {, int, phBegin, =, value, ., indexOf, (, PH_JS_PREFIX, ), ;, if, (]
[;, while, (, true, ), {, int, phBegin, =, value, ., indexOf, (, PH_JS_PREFIX, ), ;, if, (, phBegin, <]
[true, ), {, int, phBegin, =, value, ., indexOf, (, PH_JS_PREFIX, ), ;, if, (, phBegin, <, 0, ), {]
[true, ), {, int, phBegin, =, value, ., indexOf, (, PH_JS_PREFIX, ), ;, if, (, phBegin, <, 0, ), {]
[phBegin, =, value, ., indexOf, (, PH_JS_PREFIX, ), ;, if, (, phBegin, <, 0, ), {, builder, ., appendStringPart, (]
[(, phBegin, <, 0, ), {, builder, ., appendStringPart, (, value, ), ;, return, ;, }, else, {, if, (]
[(, phBegin, <, 0, ), {, builder, ., appendStringPart, (, value, ), ;, return, ;, }, else, {, if, (]
[<, 0, ), {, builder, ., appendStringPart, (, value, ), ;, return, ;, }, else, {, if, (, phBegin, >]
[{, builder, ., appendStringPart, (, value, ), ;, return, ;, }, else, {, if, (, phBegin, >, 0, ), {]
[{, builder, ., appendStringPart, (, value, ), ;, return, ;, }, else, {, if, (, phBegin, >, 0, ), {]
[(, value, ), ;, return, ;, }, else, {, if, (, phBegin, >, 0, ), {, builder, ., appendStringPart, (]
[(, value, ), ;, return, ;, }, else, {, if, (, phBegin, >, 0, ), {, builder, ., appendStringPart, (]
[return, ;, }, else, {, if, (, phBegin, >, 0, ), {, builder, ., appendStringPart, (, value, ., substring, (]
[}, else, {, if, (, phBegin, >, 0, ), {, builder, ., appendStringPart, (, value, ., substring, (, 0, ,]
[), {, builder, ., appendStringPart, (, value, ., substring, (, 0, ,, phBegin, ), ), ;, }, int, phEnd, =]
[), {, builder, ., appendStringPart, (, value, ., substring, (, 0, ,, phBegin, ), ), ;, }, int, phEnd, =]
[appendStringPart, (, value, ., substring, (, 0, ,, phBegin, ), ), ;, }, int, phEnd, =, value, ., indexOf, (]
[value, ., substring, (, 0, ,, phBegin, ), ), ;, }, int, phEnd, =, value, ., indexOf, (, PH_JS_SUFFIX, ,]
[,, phBegin, ), ), ;, }, int, phEnd, =, value, ., indexOf, (, PH_JS_SUFFIX, ,, phBegin, ), ;, if, (]
[,, phBegin, ), ), ;, }, int, phEnd, =, value, ., indexOf, (, PH_JS_SUFFIX, ,, phBegin, ), ;, if, (]
[), ), ;, }, int, phEnd, =, value, ., indexOf, (, PH_JS_SUFFIX, ,, phBegin, ), ;, if, (, phEnd, <]
[int, phEnd, =, value, ., indexOf, (, PH_JS_SUFFIX, ,, phBegin, ), ;, if, (, phEnd, <, 0, ), {, throw]
[value, ., indexOf, (, PH_JS_SUFFIX, ,, phBegin, ), ;, if, (, phEnd, <, 0, ), {, throw, new, MalformedException, (]
[value, ., indexOf, (, PH_JS_SUFFIX, ,, phBegin, ), ;, if, (, phEnd, <, 0, ), {, throw, new, MalformedException, (]
[indexOf, (, PH_JS_SUFFIX, ,, phBegin, ), ;, if, (, phEnd, <, 0, ), {, throw, new, MalformedException, (, "Placeholder incorrectly formatted in: ", +]
[indexOf, (, PH_JS_SUFFIX, ,, phBegin, ), ;, if, (, phEnd, <, 0, ), {, throw, new, MalformedException, (, "Placeholder incorrectly formatted in: ", +]
[;, if, (, phEnd, <, 0, ), {, throw, new, MalformedException, (, "Placeholder incorrectly formatted in: ", +, builder, ., getKey, (, ), ,]
[{, throw, new, MalformedException, (, "Placeholder incorrectly formatted in: ", +, builder, ., getKey, (, ), ,, node, ), ;, }, String, phName, =]
[{, throw, new, MalformedException, (, "Placeholder incorrectly formatted in: ", +, builder, ., getKey, (, ), ,, node, ), ;, }, String, phName, =]
[(, "Placeholder incorrectly formatted in: ", +, builder, ., getKey, (, ), ,, node, ), ;, }, String, phName, =, value, ., substring, (]
[(, "Placeholder incorrectly formatted in: ", +, builder, ., getKey, (, ), ,, node, ), ;, }, String, phName, =, value, ., substring, (]
[+, builder, ., getKey, (, ), ,, node, ), ;, }, String, phName, =, value, ., substring, (, phBegin, +]
[+, builder, ., getKey, (, ), ,, node, ), ;, }, String, phName, =, value, ., substring, (, phBegin, +]
[,, node, ), ;, }, String, phName, =, value, ., substring, (, phBegin, +, PH_JS_PREFIX, ., length, (, ), ,]
[;, }, String, phName, =, value, ., substring, (, phBegin, +, PH_JS_PREFIX, ., length, (, ), ,, phEnd, ), ;]
[;, }, String, phName, =, value, ., substring, (, phBegin, +, PH_JS_PREFIX, ., length, (, ), ,, phEnd, ), ;]
[=, value, ., substring, (, phBegin, +, PH_JS_PREFIX, ., length, (, ), ,, phEnd, ), ;, builder, ., appendPlaceholderReference, (]
[+, PH_JS_PREFIX, ., length, (, ), ,, phEnd, ), ;, builder, ., appendPlaceholderReference, (, phName, ), ;, int, nextPos, =]
[+, PH_JS_PREFIX, ., length, (, ), ,, phEnd, ), ;, builder, ., appendPlaceholderReference, (, phName, ), ;, int, nextPos, =]
[., length, (, ), ,, phEnd, ), ;, builder, ., appendPlaceholderReference, (, phName, ), ;, int, nextPos, =, phEnd, +]
[., length, (, ), ,, phEnd, ), ;, builder, ., appendPlaceholderReference, (, phName, ), ;, int, nextPos, =, phEnd, +]
[builder, ., appendPlaceholderReference, (, phName, ), ;, int, nextPos, =, phEnd, +, PH_JS_SUFFIX, ., length, (, ), ;, if, (]
[builder, ., appendPlaceholderReference, (, phName, ), ;, int, nextPos, =, phEnd, +, PH_JS_SUFFIX, ., length, (, ), ;, if, (]
[appendPlaceholderReference, (, phName, ), ;, int, nextPos, =, phEnd, +, PH_JS_SUFFIX, ., length, (, ), ;, if, (, nextPos, <]
[appendPlaceholderReference, (, phName, ), ;, int, nextPos, =, phEnd, +, PH_JS_SUFFIX, ., length, (, ), ;, if, (, nextPos, <]
[=, phEnd, +, PH_JS_SUFFIX, ., length, (, ), ;, if, (, nextPos, <, value, ., length, (, ), ), {]
[+, PH_JS_SUFFIX, ., length, (, ), ;, if, (, nextPos, <, value, ., length, (, ), ), {, value, =]
[+, PH_JS_SUFFIX, ., length, (, ), ;, if, (, nextPos, <, value, ., length, (, ), ), {, value, =]
[(, ), ;, if, (, nextPos, <, value, ., length, (, ), ), {, value, =, value, ., substring, (]
[{, return, ;, }, }, }, }, private, void, visitFallbackFunctionCall, (, NodeTraversal, t, ,, Node, call, ), {, if, (]
[{, return, ;, }, }, }, }, private, void, visitFallbackFunctionCall, (, NodeTraversal, t, ,, Node, call, ), {, if, (]
[{, return, ;, }, }, }, }, private, void, visitFallbackFunctionCall, (, NodeTraversal, t, ,, Node, call, ), {, if, (]
[{, return, ;, }, }, }, }, private, void, visitFallbackFunctionCall, (, NodeTraversal, t, ,, Node, call, ), {, if, (]
[{, return, ;, }, }, }, }, private, void, visitFallbackFunctionCall, (, NodeTraversal, t, ,, Node, call, ), {, if, (]
[}, private, void, visitFallbackFunctionCall, (, NodeTraversal, t, ,, Node, call, ), {, if, (, call, ., getChildCount, (, ), !=]
[void, visitFallbackFunctionCall, (, NodeTraversal, t, ,, Node, call, ), {, if, (, call, ., getChildCount, (, ), !=, 3, ||]
[visitFallbackFunctionCall, (, NodeTraversal, t, ,, Node, call, ), {, if, (, call, ., getChildCount, (, ), !=, 3, ||, !]
[visitFallbackFunctionCall, (, NodeTraversal, t, ,, Node, call, ), {, if, (, call, ., getChildCount, (, ), !=, 3, ||, !]
[visitFallbackFunctionCall, (, NodeTraversal, t, ,, Node, call, ), {, if, (, call, ., getChildCount, (, ), !=, 3, ||, !]
[,, Node, call, ), {, if, (, call, ., getChildCount, (, ), !=, 3, ||, !, call, ., getChildAtIndex, (]
[call, ., getChildCount, (, ), !=, 3, ||, !, call, ., getChildAtIndex, (, 1, ), ., isName, (, ), ||]
[., getChildCount, (, ), !=, 3, ||, !, call, ., getChildAtIndex, (, 1, ), ., isName, (, ), ||, !]
[., getChildCount, (, ), !=, 3, ||, !, call, ., getChildAtIndex, (, 1, ), ., isName, (, ), ||, !]
[., getChildCount, (, ), !=, 3, ||, !, call, ., getChildAtIndex, (, 1, ), ., isName, (, ), ||, !]
[!=, 3, ||, !, call, ., getChildAtIndex, (, 1, ), ., isName, (, ), ||, !, call, ., getChildAtIndex, (]
[1, ), ., isName, (, ), ||, !, call, ., getChildAtIndex, (, 2, ), ., isName, (, ), ), {]
[1, ), ., isName, (, ), ||, !, call, ., getChildAtIndex, (, 2, ), ., isName, (, ), ), {]
[(, ), ||, !, call, ., getChildAtIndex, (, 2, ), ., isName, (, ), ), {, compiler, ., report, (]
[(, ), ||, !, call, ., getChildAtIndex, (, 2, ), ., isName, (, ), ), {, compiler, ., report, (]
[call, ., getChildAtIndex, (, 2, ), ., isName, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[getChildAtIndex, (, 2, ), ., isName, (, ), ), {, compiler, ., report, (, t, ., makeError, (, call, ,]
[compiler, ., report, (, t, ., makeError, (, call, ,, BAD_FALLBACK_SYNTAX, ), ), ;, return, ;, }, Node, firstArg, =]
[compiler, ., report, (, t, ., makeError, (, call, ,, BAD_FALLBACK_SYNTAX, ), ), ;, return, ;, }, Node, firstArg, =]
[t, ., makeError, (, call, ,, BAD_FALLBACK_SYNTAX, ), ), ;, return, ;, }, Node, firstArg, =, call, ., getChildAtIndex, (]
[BAD_FALLBACK_SYNTAX, ), ), ;, return, ;, }, Node, firstArg, =, call, ., getChildAtIndex, (, 1, ), ;, JsMessage, firstMessage, =]
[), ;, return, ;, }, Node, firstArg, =, call, ., getChildAtIndex, (, 1, ), ;, JsMessage, firstMessage, =, getTrackedMessage, (]
[return, ;, }, Node, firstArg, =, call, ., getChildAtIndex, (, 1, ), ;, JsMessage, firstMessage, =, getTrackedMessage, (, t, ,]
[return, ;, }, Node, firstArg, =, call, ., getChildAtIndex, (, 1, ), ;, JsMessage, firstMessage, =, getTrackedMessage, (, t, ,]
[(, 1, ), ;, JsMessage, firstMessage, =, getTrackedMessage, (, t, ,, firstArg, ., getString, (, ), ), ;, if, (]
[(, 1, ), ;, JsMessage, firstMessage, =, getTrackedMessage, (, t, ,, firstArg, ., getString, (, ), ), ;, if, (]
[), ;, JsMessage, firstMessage, =, getTrackedMessage, (, t, ,, firstArg, ., getString, (, ), ), ;, if, (, firstMessage, ==]
[firstMessage, =, getTrackedMessage, (, t, ,, firstArg, ., getString, (, ), ), ;, if, (, firstMessage, ==, null, ), {]
[firstMessage, =, getTrackedMessage, (, t, ,, firstArg, ., getString, (, ), ), ;, if, (, firstMessage, ==, null, ), {]
[t, ,, firstArg, ., getString, (, ), ), ;, if, (, firstMessage, ==, null, ), {, compiler, ., report, (]
[t, ,, firstArg, ., getString, (, ), ), ;, if, (, firstMessage, ==, null, ), {, compiler, ., report, (]
[getString, (, ), ), ;, if, (, firstMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError, (]
[), ), ;, if, (, firstMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, firstArg, ,]
[;, if, (, firstMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, firstArg, ,, FALLBACK_ARG_ERROR, ,]
[;, if, (, firstMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, firstArg, ,, FALLBACK_ARG_ERROR, ,]
[makeError, (, firstArg, ,, FALLBACK_ARG_ERROR, ,, firstArg, ., getString, (, ), ), ), ;, return, ;, }, Node, secondArg, =]
[makeError, (, firstArg, ,, FALLBACK_ARG_ERROR, ,, firstArg, ., getString, (, ), ), ), ;, return, ;, }, Node, secondArg, =]
[(, ), ), ), ;, return, ;, }, Node, secondArg, =, firstArg, ., getNext, (, ), ;, JsMessage, secondMessage, =]
[), ), ;, return, ;, }, Node, secondArg, =, firstArg, ., getNext, (, ), ;, JsMessage, secondMessage, =, getTrackedMessage, (]
[;, return, ;, }, Node, secondArg, =, firstArg, ., getNext, (, ), ;, JsMessage, secondMessage, =, getTrackedMessage, (, t, ,]
[;, return, ;, }, Node, secondArg, =, firstArg, ., getNext, (, ), ;, JsMessage, secondMessage, =, getTrackedMessage, (, t, ,]
[;, return, ;, }, Node, secondArg, =, firstArg, ., getNext, (, ), ;, JsMessage, secondMessage, =, getTrackedMessage, (, t, ,]
[Node, secondArg, =, firstArg, ., getNext, (, ), ;, JsMessage, secondMessage, =, getTrackedMessage, (, t, ,, call, ., getChildAtIndex, (]
[secondMessage, =, getTrackedMessage, (, t, ,, call, ., getChildAtIndex, (, 2, ), ., getString, (, ), ), ;, if, (]
[secondMessage, =, getTrackedMessage, (, t, ,, call, ., getChildAtIndex, (, 2, ), ., getString, (, ), ), ;, if, (]
[getTrackedMessage, (, t, ,, call, ., getChildAtIndex, (, 2, ), ., getString, (, ), ), ;, if, (, secondMessage, ==]
[,, call, ., getChildAtIndex, (, 2, ), ., getString, (, ), ), ;, if, (, secondMessage, ==, null, ), {]
[,, call, ., getChildAtIndex, (, 2, ), ., getString, (, ), ), ;, if, (, secondMessage, ==, null, ), {]
[(, 2, ), ., getString, (, ), ), ;, if, (, secondMessage, ==, null, ), {, compiler, ., report, (]
[(, 2, ), ., getString, (, ), ), ;, if, (, secondMessage, ==, null, ), {, compiler, ., report, (]
[getString, (, ), ), ;, if, (, secondMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError, (]
[), ), ;, if, (, secondMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, secondArg, ,]
[;, if, (, secondMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, secondArg, ,, FALLBACK_ARG_ERROR, ,]
[;, if, (, secondMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, secondArg, ,, FALLBACK_ARG_ERROR, ,]
[(, t, ., makeError, (, secondArg, ,, FALLBACK_ARG_ERROR, ,, secondArg, ., getString, (, ), ), ), ;, return, ;, }]
[., makeError, (, secondArg, ,, FALLBACK_ARG_ERROR, ,, secondArg, ., getString, (, ), ), ), ;, return, ;, }, processMessageFallback, (]
[(, secondArg, ,, FALLBACK_ARG_ERROR, ,, secondArg, ., getString, (, ), ), ), ;, return, ;, }, processMessageFallback, (, call, ,]
[,, FALLBACK_ARG_ERROR, ,, secondArg, ., getString, (, ), ), ), ;, return, ;, }, processMessageFallback, (, call, ,, firstMessage, ,]
[,, JsMessage, message1, ,, JsMessage, message2, ), {, }, boolean, isMessageName, (, String, identifier, ,, boolean, isNewStyleMessage, ), {, return]
[,, JsMessage, message1, ,, JsMessage, message2, ), {, }, boolean, isMessageName, (, String, identifier, ,, boolean, isNewStyleMessage, ), {, return]
[,, JsMessage, message1, ,, JsMessage, message2, ), {, }, boolean, isMessageName, (, String, identifier, ,, boolean, isNewStyleMessage, ), {, return]
[JsMessage, message2, ), {, }, boolean, isMessageName, (, String, identifier, ,, boolean, isNewStyleMessage, ), {, return, identifier, ., startsWith, (]
[{, }, boolean, isMessageName, (, String, identifier, ,, boolean, isNewStyleMessage, ), {, return, identifier, ., startsWith, (, MSG_PREFIX, ), &&]
[}, boolean, isMessageName, (, String, identifier, ,, boolean, isNewStyleMessage, ), {, return, identifier, ., startsWith, (, MSG_PREFIX, ), &&, (]
[}, boolean, isMessageName, (, String, identifier, ,, boolean, isNewStyleMessage, ), {, return, identifier, ., startsWith, (, MSG_PREFIX, ), &&, (]
[}, boolean, isMessageName, (, String, identifier, ,, boolean, isNewStyleMessage, ), {, return, identifier, ., startsWith, (, MSG_PREFIX, ), &&, (]
[}, boolean, isMessageName, (, String, identifier, ,, boolean, isNewStyleMessage, ), {, return, identifier, ., startsWith, (, MSG_PREFIX, ), &&, (]
[isMessageName, (, String, identifier, ,, boolean, isNewStyleMessage, ), {, return, identifier, ., startsWith, (, MSG_PREFIX, ), &&, (, style, ==]
[isMessageName, (, String, identifier, ,, boolean, isNewStyleMessage, ), {, return, identifier, ., startsWith, (, MSG_PREFIX, ), &&, (, style, ==]
[isMessageName, (, String, identifier, ,, boolean, isNewStyleMessage, ), {, return, identifier, ., startsWith, (, MSG_PREFIX, ), &&, (, style, ==]
[isNewStyleMessage, ), {, return, identifier, ., startsWith, (, MSG_PREFIX, ), &&, (, style, ==, JsMessage, ., Style, ., CLOSURE, ||]
[{, return, identifier, ., startsWith, (, MSG_PREFIX, ), &&, (, style, ==, JsMessage, ., Style, ., CLOSURE, ||, isNewStyleMessage, ||]
[return, identifier, ., startsWith, (, MSG_PREFIX, ), &&, (, style, ==, JsMessage, ., Style, ., CLOSURE, ||, isNewStyleMessage, ||, !]
[return, identifier, ., startsWith, (, MSG_PREFIX, ), &&, (, style, ==, JsMessage, ., Style, ., CLOSURE, ||, isNewStyleMessage, ||, !]
[(, MSG_PREFIX, ), &&, (, style, ==, JsMessage, ., Style, ., CLOSURE, ||, isNewStyleMessage, ||, !, identifier, ., endsWith, (]
[!, identifier, ., endsWith, (, DESC_SUFFIX, ), ), ;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier, ), {, return]
[!, identifier, ., endsWith, (, DESC_SUFFIX, ), ), ;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier, ), {, return]
[!, identifier, ., endsWith, (, DESC_SUFFIX, ), ), ;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier, ), {, return]
[(, DESC_SUFFIX, ), ), ;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier, ), {, return, MSG_UNNAMED_PATTERN, ., matcher, (]
[., matcher, (, identifier, ), ., matches, (, ), ;, }, static, boolean, isLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, return]
[., matcher, (, identifier, ), ., matches, (, ), ;, }, static, boolean, isLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, return]
[., matcher, (, identifier, ), ., matches, (, ), ;, }, static, boolean, isLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, return]
[), ., matches, (, ), ;, }, static, boolean, isLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, return, CAMELCASE_PATTERN, ., matcher, (]
[matcher, (, input, ), ., matches, (, ), ;, }, private, static, String, getReadableTokenName, (, Node, node, ), {, return]
[matcher, (, input, ), ., matches, (, ), ;, }, private, static, String, getReadableTokenName, (, Node, node, ), {, return]
[., matches, (, ), ;, }, private, static, String, getReadableTokenName, (, Node, node, ), {, return, Token, ., name, (]
[., matches, (, ), ;, }, private, static, String, getReadableTokenName, (, Node, node, ), {, return, Token, ., name, (]
[(, node, ., getType, (, ), ), ;, }, static, String, toLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, int, suffixStart, =]
[(, node, ., getType, (, ), ), ;, }, static, String, toLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, int, suffixStart, =]
[}, static, String, toLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, int, suffixStart, =, input, ., length, (, ), ;, while, (]
[}, static, String, toLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, int, suffixStart, =, input, ., length, (, ), ;, while, (]
[String, toLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, int, suffixStart, =, input, ., length, (, ), ;, while, (, suffixStart, >]
[{, int, suffixStart, =, input, ., length, (, ), ;, while, (, suffixStart, >, 0, ), {, char, ch, =]
[., length, (, ), ;, while, (, suffixStart, >, 0, ), {, char, ch, =, '\0', ;, int, numberStart, =]
[;, while, (, suffixStart, >, 0, ), {, char, ch, =, '\0', ;, int, numberStart, =, suffixStart, ;, while, (]
[;, while, (, suffixStart, >, 0, ), {, char, ch, =, '\0', ;, int, numberStart, =, suffixStart, ;, while, (]
[(, suffixStart, >, 0, ), {, char, ch, =, '\0', ;, int, numberStart, =, suffixStart, ;, while, (, numberStart, >]
[0, ), {, char, ch, =, '\0', ;, int, numberStart, =, suffixStart, ;, while, (, numberStart, >, 0, ), {]
[{, char, ch, =, '\0', ;, int, numberStart, =, suffixStart, ;, while, (, numberStart, >, 0, ), {, ch, =]
[{, char, ch, =, '\0', ;, int, numberStart, =, suffixStart, ;, while, (, numberStart, >, 0, ), {, ch, =]
['\0', ;, int, numberStart, =, suffixStart, ;, while, (, numberStart, >, 0, ), {, ch, =, input, ., charAt, (]
['\0', ;, int, numberStart, =, suffixStart, ;, while, (, numberStart, >, 0, ), {, ch, =, input, ., charAt, (]
[int, numberStart, =, suffixStart, ;, while, (, numberStart, >, 0, ), {, ch, =, input, ., charAt, (, numberStart, -]
[while, (, numberStart, >, 0, ), {, ch, =, input, ., charAt, (, numberStart, -, 1, ), ;, if, (]
[while, (, numberStart, >, 0, ), {, ch, =, input, ., charAt, (, numberStart, -, 1, ), ;, if, (]
[0, ), {, ch, =, input, ., charAt, (, numberStart, -, 1, ), ;, if, (, Character, ., isDigit, (]
[=, input, ., charAt, (, numberStart, -, 1, ), ;, if, (, Character, ., isDigit, (, ch, ), ), {]
[=, input, ., charAt, (, numberStart, -, 1, ), ;, if, (, Character, ., isDigit, (, ch, ), ), {]
[Character, ., isDigit, (, ch, ), ), {, numberStart, --, ;, }, else, {, break, ;, }, }, if, (]
[Character, ., isDigit, (, ch, ), ), {, numberStart, --, ;, }, else, {, break, ;, }, }, if, (]
[Character, ., isDigit, (, ch, ), ), {, numberStart, --, ;, }, else, {, break, ;, }, }, if, (]
[., isDigit, (, ch, ), ), {, numberStart, --, ;, }, else, {, break, ;, }, }, if, (, (]
[., isDigit, (, ch, ), ), {, numberStart, --, ;, }, else, {, break, ;, }, }, if, (, (]
[(, ch, ), ), {, numberStart, --, ;, }, else, {, break, ;, }, }, if, (, (, numberStart, >]
[), {, numberStart, --, ;, }, else, {, break, ;, }, }, if, (, (, numberStart, >, 0, ), &&]
[{, numberStart, --, ;, }, else, {, break, ;, }, }, if, (, (, numberStart, >, 0, ), &&, (]
[{, numberStart, --, ;, }, else, {, break, ;, }, }, if, (, (, numberStart, >, 0, ), &&, (]
[--, ;, }, else, {, break, ;, }, }, if, (, (, numberStart, >, 0, ), &&, (, numberStart, <]
[else, {, break, ;, }, }, if, (, (, numberStart, >, 0, ), &&, (, numberStart, <, suffixStart, ), &&]
[{, break, ;, }, }, if, (, (, numberStart, >, 0, ), &&, (, numberStart, <, suffixStart, ), &&, (]
[{, break, ;, }, }, if, (, (, numberStart, >, 0, ), &&, (, numberStart, <, suffixStart, ), &&, (]
[;, }, }, if, (, (, numberStart, >, 0, ), &&, (, numberStart, <, suffixStart, ), &&, (, ch, ==]
[(, (, numberStart, >, 0, ), &&, (, numberStart, <, suffixStart, ), &&, (, ch, ==, '_', ), ), {]
[numberStart, >, 0, ), &&, (, numberStart, <, suffixStart, ), &&, (, ch, ==, '_', ), ), {, suffixStart, =]
[numberStart, >, 0, ), &&, (, numberStart, <, suffixStart, ), &&, (, ch, ==, '_', ), ), {, suffixStart, =]
[0, ), &&, (, numberStart, <, suffixStart, ), &&, (, ch, ==, '_', ), ), {, suffixStart, =, numberStart, -]
[==, '_', ), ), {, suffixStart, =, numberStart, -, 1, ;, }, else, {, break, ;, }, }, if, (]
[==, '_', ), ), {, suffixStart, =, numberStart, -, 1, ;, }, else, {, break, ;, }, }, if, (]
[), ), {, suffixStart, =, numberStart, -, 1, ;, }, else, {, break, ;, }, }, if, (, suffixStart, ==]
[), ), {, suffixStart, =, numberStart, -, 1, ;, }, else, {, break, ;, }, }, if, (, suffixStart, ==]
[;, }, else, {, break, ;, }, }, if, (, suffixStart, ==, input, ., length, (, ), ), {, return]
[;, }, else, {, break, ;, }, }, if, (, suffixStart, ==, input, ., length, (, ), ), {, return]
[;, }, else, {, break, ;, }, }, if, (, suffixStart, ==, input, ., length, (, ), ), {, return]
[}, }, if, (, suffixStart, ==, input, ., length, (, ), ), {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (]
[}, }, if, (, suffixStart, ==, input, ., length, (, ), ), {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (]
[suffixStart, ==, input, ., length, (, ), ), {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,]
[), {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ), ;, }, else, {, return]
[), {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ), ;, }, else, {, return]
[), {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ), ;, }, else, {, return]
[), {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ), ;, }, else, {, return]
[., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ), ;, }, else, {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (]
[., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ), ;, }, else, {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (]
[., LOWER_CAMEL, ,, input, ), ;, }, else, {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,]
[., LOWER_CAMEL, ,, input, ), ;, }, else, {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,]
[), ;, }, else, {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ., substring, (]
[}, else, {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ., substring, (, 0, ,]
[CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ., substring, (, 0, ,, suffixStart, ), ), +]
[CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ., substring, (, 0, ,, suffixStart, ), ), +]
[to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ., substring, (, 0, ,, suffixStart, ), ), +, input, ., substring, (]
[;, }, }, protected, void, checkNode, (, @, Nullable, Node, node, ,, int, type, ), throws, MalformedException, {, if, (]
[;, }, }, protected, void, checkNode, (, @, Nullable, Node, node, ,, int, type, ), throws, MalformedException, {, if, (]
[}, protected, void, checkNode, (, @, Nullable, Node, node, ,, int, type, ), throws, MalformedException, {, if, (, node, ==]
[(, @, Nullable, Node, node, ,, int, type, ), throws, MalformedException, {, if, (, node, ==, null, ), {, throw]
[Node, node, ,, int, type, ), throws, MalformedException, {, if, (, node, ==, null, ), {, throw, new, MalformedException, (]
[Node, node, ,, int, type, ), throws, MalformedException, {, if, (, node, ==, null, ), {, throw, new, MalformedException, (]
[Node, node, ,, int, type, ), throws, MalformedException, {, if, (, node, ==, null, ), {, throw, new, MalformedException, (]
[,, int, type, ), throws, MalformedException, {, if, (, node, ==, null, ), {, throw, new, MalformedException, (, "Expected node type ", +]
[type, ), throws, MalformedException, {, if, (, node, ==, null, ), {, throw, new, MalformedException, (, "Expected node type ", +, type, +]
[throws, MalformedException, {, if, (, node, ==, null, ), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: null", ,]
[==, null, ), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: null", ,, node, ), ;, }, if, (]
[==, null, ), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: null", ,, node, ), ;, }, if, (]
[==, null, ), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: null", ,, node, ), ;, }, if, (]
[MalformedException, (, "Expected node type ", +, type, +, "; found: null", ,, node, ), ;, }, if, (, node, ., getType, (, ), !=]
[type, +, "; found: null", ,, node, ), ;, }, if, (, node, ., getType, (, ), !=, type, ), {, throw]
[,, node, ), ;, }, if, (, node, ., getType, (, ), !=, type, ), {, throw, new, MalformedException, (]
[,, node, ), ;, }, if, (, node, ., getType, (, ), !=, type, ), {, throw, new, MalformedException, (]
[,, node, ), ;, }, if, (, node, ., getType, (, ), !=, type, ), {, throw, new, MalformedException, (]
[,, node, ), ;, }, if, (, node, ., getType, (, ), !=, type, ), {, throw, new, MalformedException, (]
[), ;, }, if, (, node, ., getType, (, ), !=, type, ), {, throw, new, MalformedException, (, "Expected node type ", +]
[}, if, (, node, ., getType, (, ), !=, type, ), {, throw, new, MalformedException, (, "Expected node type ", +, type, +]
[(, node, ., getType, (, ), !=, type, ), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: ", +]
[(, node, ., getType, (, ), !=, type, ), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: ", +]
[!=, type, ), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: ", +, node, ., getType, (, ), ,]
[(, ), ,, node, ), ;, }, }, static, class, MalformedException, extends, Exception, {, private, static, final, long, serialVersionUID, =]
[serialVersionUID, =, 1L, ;, private, final, Node, node, ;, MalformedException, (, String, message, ,, Node, node, ), {, super, (]
[;, private, final, Node, node, ;, MalformedException, (, String, message, ,, Node, node, ), {, super, (, message, ), ;]
[;, private, final, Node, node, ;, MalformedException, (, String, message, ,, Node, node, ), {, super, (, message, ), ;]
[node, ;, MalformedException, (, String, message, ,, Node, node, ), {, super, (, message, ), ;, this, ., node, =]
[), {, super, (, message, ), ;, this, ., node, =, node, ;, }, Node, getNode, (, ), {, return]
[private, final, JsMessage, message, ;, private, final, Node, messageNode, ;, private, MessageLocation, (, JsMessage, message, ,, Node, messageNode, ), {]
[private, final, JsMessage, message, ;, private, final, Node, messageNode, ;, private, MessageLocation, (, JsMessage, message, ,, Node, messageNode, ), {]
[;, private, final, Node, messageNode, ;, private, MessageLocation, (, JsMessage, message, ,, Node, messageNode, ), {, this, ., message, =]
[final, Node, messageNode, ;, private, MessageLocation, (, JsMessage, message, ,, Node, messageNode, ), {, this, ., message, =, message, ;]
[final, Node, messageNode, ;, private, MessageLocation, (, JsMessage, message, ,, Node, messageNode, ), {, this, ., message, =, message, ;]
[private, MessageLocation, (, JsMessage, message, ,, Node, messageNode, ), {, this, ., message, =, message, ;, this, ., messageNode, =]
