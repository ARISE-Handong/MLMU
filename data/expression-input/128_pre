[private, double, displayStart, ;, private, double, displayEnd, ;, public, ModuloAxis, (, String, label, ,, Range, fixedRange, ), {, super, (]
[;, private, double, displayEnd, ;, public, ModuloAxis, (, String, label, ,, Range, fixedRange, ), {, super, (, label, ), ;]
[;, private, double, displayEnd, ;, public, ModuloAxis, (, String, label, ,, Range, fixedRange, ), {, super, (, label, ), ;]
[;, public, ModuloAxis, (, String, label, ,, Range, fixedRange, ), {, super, (, label, ), ;, this, ., fixedRange, =]
[ModuloAxis, (, String, label, ,, Range, fixedRange, ), {, super, (, label, ), ;, this, ., fixedRange, =, fixedRange, ;]
[ModuloAxis, (, String, label, ,, Range, fixedRange, ), {, super, (, label, ), ;, this, ., fixedRange, =, fixedRange, ;]
[,, Range, fixedRange, ), {, super, (, label, ), ;, this, ., fixedRange, =, fixedRange, ;, this, ., displayStart, =]
[fixedRange, ), {, super, (, label, ), ;, this, ., fixedRange, =, fixedRange, ;, this, ., displayStart, =, 270.0, ;]
[fixedRange, ), {, super, (, label, ), ;, this, ., fixedRange, =, fixedRange, ;, this, ., displayStart, =, 270.0, ;]
[(, label, ), ;, this, ., fixedRange, =, fixedRange, ;, this, ., displayStart, =, 270.0, ;, this, ., displayEnd, =]
[this, ., displayStart, =, 270.0, ;, this, ., displayEnd, =, 90.0, ;, }, public, double, getDisplayStart, (, ), {, return]
[this, ., displayStart, =, 270.0, ;, this, ., displayEnd, =, 90.0, ;, }, public, double, getDisplayStart, (, ), {, return]
[}, public, double, getDisplayStart, (, ), {, return, this, ., displayStart, ;, }, public, double, getDisplayEnd, (, ), {, return]
[}, public, double, getDisplayStart, (, ), {, return, this, ., displayStart, ;, }, public, double, getDisplayEnd, (, ), {, return]
[(, ), {, return, this, ., displayEnd, ;, }, public, void, setDisplayRange, (, double, start, ,, double, end, ), {]
[(, ), {, return, this, ., displayEnd, ;, }, public, void, setDisplayRange, (, double, start, ,, double, end, ), {]
[this, ., displayEnd, ;, }, public, void, setDisplayRange, (, double, start, ,, double, end, ), {, this, ., displayStart, =]
[displayEnd, ;, }, public, void, setDisplayRange, (, double, start, ,, double, end, ), {, this, ., displayStart, =, mapValueToFixedRange, (]
[public, void, setDisplayRange, (, double, start, ,, double, end, ), {, this, ., displayStart, =, mapValueToFixedRange, (, start, ), ;]
[public, void, setDisplayRange, (, double, start, ,, double, end, ), {, this, ., displayStart, =, mapValueToFixedRange, (, start, ), ;]
[double, start, ,, double, end, ), {, this, ., displayStart, =, mapValueToFixedRange, (, start, ), ;, this, ., displayEnd, =]
[,, double, end, ), {, this, ., displayStart, =, mapValueToFixedRange, (, start, ), ;, this, ., displayEnd, =, mapValueToFixedRange, (]
[this, ., displayStart, =, mapValueToFixedRange, (, start, ), ;, this, ., displayEnd, =, mapValueToFixedRange, (, end, ), ;, if, (]
[this, ., displayStart, =, mapValueToFixedRange, (, start, ), ;, this, ., displayEnd, =, mapValueToFixedRange, (, end, ), ;, if, (]
[this, ., displayStart, =, mapValueToFixedRange, (, start, ), ;, this, ., displayEnd, =, mapValueToFixedRange, (, end, ), ;, if, (]
[mapValueToFixedRange, (, start, ), ;, this, ., displayEnd, =, mapValueToFixedRange, (, end, ), ;, if, (, this, ., displayStart, <]
[mapValueToFixedRange, (, start, ), ;, this, ., displayEnd, =, mapValueToFixedRange, (, end, ), ;, if, (, this, ., displayStart, <]
[this, ., displayEnd, =, mapValueToFixedRange, (, end, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {]
[displayEnd, =, mapValueToFixedRange, (, end, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, setRange, (]
[displayEnd, =, mapValueToFixedRange, (, end, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, setRange, (]
[end, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, setRange, (, this, ., displayStart, ,]
[end, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, setRange, (, this, ., displayStart, ,]
[<, this, ., displayEnd, ), {, setRange, (, this, ., displayStart, ,, this, ., displayEnd, ), ;, }, else, {]
[., displayEnd, ), {, setRange, (, this, ., displayStart, ,, this, ., displayEnd, ), ;, }, else, {, setRange, (]
[., displayEnd, ), {, setRange, (, this, ., displayStart, ,, this, ., displayEnd, ), ;, }, else, {, setRange, (]
[setRange, (, this, ., displayStart, ,, this, ., displayEnd, ), ;, }, else, {, setRange, (, this, ., displayStart, ,]
[setRange, (, this, ., displayStart, ,, this, ., displayEnd, ), ;, }, else, {, setRange, (, this, ., displayStart, ,]
[setRange, (, this, ., displayStart, ,, this, ., displayEnd, ), ;, }, else, {, setRange, (, this, ., displayStart, ,]
[setRange, (, this, ., displayStart, ,, this, ., displayEnd, ), ;, }, else, {, setRange, (, this, ., displayStart, ,]
[displayEnd, ), ;, }, else, {, setRange, (, this, ., displayStart, ,, this, ., fixedRange, ., getUpperBound, (, ), +]
[), ;, }, else, {, setRange, (, this, ., displayStart, ,, this, ., fixedRange, ., getUpperBound, (, ), +, (]
[), ;, }, else, {, setRange, (, this, ., displayStart, ,, this, ., fixedRange, ., getUpperBound, (, ), +, (]
[), ;, }, else, {, setRange, (, this, ., displayStart, ,, this, ., fixedRange, ., getUpperBound, (, ), +, (]
[{, setRange, (, this, ., displayStart, ,, this, ., fixedRange, ., getUpperBound, (, ), +, (, this, ., displayEnd, -]
[{, setRange, (, this, ., displayStart, ,, this, ., fixedRange, ., getUpperBound, (, ), +, (, this, ., displayEnd, -]
[{, setRange, (, this, ., displayStart, ,, this, ., fixedRange, ., getUpperBound, (, ), +, (, this, ., displayEnd, -]
[getUpperBound, (, ), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), ;, }]
[), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), ;, }, notifyListeners, (]
[this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), ;, }, notifyListeners, (, new, AxisChangeEvent, (]
[), ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, autoAdjustRange, (, ), {]
[;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, autoAdjustRange, (, ), {, setRange, (]
[;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, autoAdjustRange, (, ), {, setRange, (]
[new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, autoAdjustRange, (, ), {, setRange, (, this, ., fixedRange, ,]
[(, this, ), ), ;, }, protected, void, autoAdjustRange, (, ), {, setRange, (, this, ., fixedRange, ,, false, ,]
[), ;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =]
[valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, v, =]
[double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, v, =, mapValueToFixedRange, (]
[,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, v, =, mapValueToFixedRange, (, value, ), ;, if, (]
[,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, v, =, mapValueToFixedRange, (, value, ), ;, if, (]
[,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, v, =, mapValueToFixedRange, (, value, ), ;, if, (]
[{, double, result, =, 0.0, ;, double, v, =, mapValueToFixedRange, (, value, ), ;, if, (, this, ., displayStart, <]
[{, double, result, =, 0.0, ;, double, v, =, mapValueToFixedRange, (, value, ), ;, if, (, this, ., displayStart, <]
[;, double, v, =, mapValueToFixedRange, (, value, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {]
[v, =, mapValueToFixedRange, (, value, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, result, =]
[mapValueToFixedRange, (, value, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, result, =, trans, (]
[value, ), ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, result, =, trans, (, v, ,]
[;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, result, =, trans, (, v, ,, area, ,]
[displayEnd, ), {, result, =, trans, (, v, ,, area, ,, edge, ), ;, }, else, {, double, cutoff, =]
[displayEnd, ), {, result, =, trans, (, v, ,, area, ,, edge, ), ;, }, else, {, double, cutoff, =]
[), {, result, =, trans, (, v, ,, area, ,, edge, ), ;, }, else, {, double, cutoff, =, (]
[), {, result, =, trans, (, v, ,, area, ,, edge, ), ;, }, else, {, double, cutoff, =, (]
[), {, result, =, trans, (, v, ,, area, ,, edge, ), ;, }, else, {, double, cutoff, =, (]
[trans, (, v, ,, area, ,, edge, ), ;, }, else, {, double, cutoff, =, (, this, ., displayStart, +]
[trans, (, v, ,, area, ,, edge, ), ;, }, else, {, double, cutoff, =, (, this, ., displayStart, +]
[,, edge, ), ;, }, else, {, double, cutoff, =, (, this, ., displayStart, +, this, ., displayEnd, ), /]
[else, {, double, cutoff, =, (, this, ., displayStart, +, this, ., displayEnd, ), /, 2.0, ;, double, length1, =]
[else, {, double, cutoff, =, (, this, ., displayStart, +, this, ., displayEnd, ), /, 2.0, ;, double, length1, =]
[else, {, double, cutoff, =, (, this, ., displayStart, +, this, ., displayEnd, ), /, 2.0, ;, double, length1, =]
[else, {, double, cutoff, =, (, this, ., displayStart, +, this, ., displayEnd, ), /, 2.0, ;, double, length1, =]
[displayStart, +, this, ., displayEnd, ), /, 2.0, ;, double, length1, =, this, ., fixedRange, ., getUpperBound, (, ), -]
[displayStart, +, this, ., displayEnd, ), /, 2.0, ;, double, length1, =, this, ., fixedRange, ., getUpperBound, (, ), -]
[2.0, ;, double, length1, =, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ;, double, length2, =]
[2.0, ;, double, length1, =, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ;, double, length2, =]
[2.0, ;, double, length1, =, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ;, double, length2, =]
[=, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ;, double, length2, =, this, ., displayEnd, -]
[=, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ;, double, length2, =, this, ., displayEnd, -]
[=, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ;, double, length2, =, this, ., displayEnd, -]
[., displayStart, ;, double, length2, =, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ;, if, (]
[., displayStart, ;, double, length2, =, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ;, if, (]
[;, double, length2, =, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ;, if, (, v, >]
[=, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ;, if, (, v, >, cutoff, ), {]
[., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ;, if, (, v, >, cutoff, ), {, result, =]
[-, this, ., fixedRange, ., getLowerBound, (, ), ;, if, (, v, >, cutoff, ), {, result, =, transStart, (]
[., fixedRange, ., getLowerBound, (, ), ;, if, (, v, >, cutoff, ), {, result, =, transStart, (, v, ,]
[., getLowerBound, (, ), ;, if, (, v, >, cutoff, ), {, result, =, transStart, (, v, ,, area, ,]
[(, ), ;, if, (, v, >, cutoff, ), {, result, =, transStart, (, v, ,, area, ,, edge, ,]
[;, if, (, v, >, cutoff, ), {, result, =, transStart, (, v, ,, area, ,, edge, ,, length1, ,]
[), {, result, =, transStart, (, v, ,, area, ,, edge, ,, length1, ,, length2, ), ;, }, else, {]
[result, =, transStart, (, v, ,, area, ,, edge, ,, length1, ,, length2, ), ;, }, else, {, result, =]
[transStart, (, v, ,, area, ,, edge, ,, length1, ,, length2, ), ;, }, else, {, result, =, transEnd, (]
[v, ,, area, ,, edge, ,, length1, ,, length2, ), ;, }, else, {, result, =, transEnd, (, v, ,]
[area, ,, edge, ,, length1, ,, length2, ), ;, }, else, {, result, =, transEnd, (, v, ,, area, ,]
[edge, ,, length1, ,, length2, ), ;, }, else, {, result, =, transEnd, (, v, ,, area, ,, edge, ,]
[length1, ,, length2, ), ;, }, else, {, result, =, transEnd, (, v, ,, area, ,, edge, ,, length1, ,]
[else, {, result, =, transEnd, (, v, ,, area, ,, edge, ,, length1, ,, length2, ), ;, }, }, return]
[result, ;, }, private, double, trans, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, min, =]
[trans, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, min, =, 0.0, ;, double, max, =]
[,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (]
[,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (]
[RectangleEdge, edge, ), {, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[=, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =]
[=, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =]
[0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =]
[edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getX, (, ), +]
[edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getX, (, ), +]
[), ;, max, =, area, ., getX, (, ), +, area, ., getWidth, (, ), ;, }, else, if, (]
[), ;, max, =, area, ., getX, (, ), +, area, ., getWidth, (, ), ;, }, else, if, (]
[area, ., getX, (, ), +, area, ., getWidth, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[), +, area, ., getWidth, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[area, ., getWidth, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =]
[area, ., getWidth, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =]
[edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -]
[edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -]
[(, ), ;, max, =, area, ., getMaxY, (, ), -, area, ., getHeight, (, ), ;, }, if, (]
[., getMaxY, (, ), -, area, ., getHeight, (, ), ;, }, if, (, isInverted, (, ), ), {, return]
[., getMaxY, (, ), -, area, ., getHeight, (, ), ;, }, if, (, isInverted, (, ), ), {, return]
[(, ), -, area, ., getHeight, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -]
[(, ), -, area, ., getHeight, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -]
[), -, area, ., getHeight, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (]
[), -, area, ., getHeight, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (]
[-, area, ., getHeight, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[-, area, ., getHeight, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[., getHeight, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -]
[., getHeight, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -]
[}, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, ), /]
[if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, ), /, (]
[if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, ), /, (]
[if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, ), /, (]
[), ), {, return, max, -, (, (, value, -, this, ., displayStart, ), /, (, this, ., displayEnd, -]
[), ), {, return, max, -, (, (, value, -, this, ., displayStart, ), /, (, this, ., displayEnd, -]
[(, (, value, -, this, ., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *]
[(, value, -, this, ., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (]
[(, value, -, this, ., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (]
[-, this, ., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -]
[this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return]
[this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return]
[displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +]
[displayEnd, -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +]
[-, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (]
[-, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (]
[this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (]
[this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (]
[displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -]
[displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -]
[max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /]
[-, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (]
[-, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (]
[-, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (]
[}, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (, this, ., displayEnd, -]
[}, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (, this, ., displayEnd, -]
[(, (, value, -, this, ., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *]
[(, value, -, this, ., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (]
[(, value, -, this, ., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (]
[-, this, ., displayStart, ), /, (, this, ., displayEnd, -, this, ., displayStart, ), ), *, (, max, -]
[(, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double, length1, ,, double, length2, ), {, double, min, =]
[area, ,, RectangleEdge, edge, ,, double, length1, ,, double, length2, ), {, double, min, =, 0.0, ;, double, max, =]
[,, double, length1, ,, double, length2, ), {, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (]
[,, double, length1, ,, double, length2, ), {, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (]
[double, length2, ), {, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[=, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =]
[=, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =]
[0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =]
[edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getX, (, ), +]
[edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getX, (, ), +]
[edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getX, (, ), +]
[edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =, area, ., getX, (, ), +]
[area, ., getX, (, ), ;, max, =, area, ., getX, (, ), +, area, ., getWidth, (, ), *]
[getX, (, ), ;, max, =, area, ., getX, (, ), +, area, ., getWidth, (, ), *, length1, /]
[(, ), ;, max, =, area, ., getX, (, ), +, area, ., getWidth, (, ), *, length1, /, (]
[(, ), ;, max, =, area, ., getX, (, ), +, area, ., getWidth, (, ), *, length1, /, (]
[;, max, =, area, ., getX, (, ), +, area, ., getWidth, (, ), *, length1, /, (, length1, +]
[), +, area, ., getWidth, (, ), *, length1, /, (, length1, +, length2, ), ;, }, else, if, (]
[), +, area, ., getWidth, (, ), *, length1, /, (, length1, +, length2, ), ;, }, else, if, (]
[getWidth, (, ), *, length1, /, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[length1, /, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[(, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =]
[(, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =]
[edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -]
[edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -]
[edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -]
[edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -]
[area, ., getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -, area, ., getHeight, (, ), *]
[getMaxY, (, ), ;, max, =, area, ., getMaxY, (, ), -, area, ., getHeight, (, ), *, length1, /]
[(, ), ;, max, =, area, ., getMaxY, (, ), -, area, ., getHeight, (, ), *, length1, /, (]
[(, ), ;, max, =, area, ., getMaxY, (, ), -, area, ., getHeight, (, ), *, length1, /, (]
[;, max, =, area, ., getMaxY, (, ), -, area, ., getHeight, (, ), *, length1, /, (, length1, +]
[(, ), -, area, ., getHeight, (, ), *, length1, /, (, length1, +, length2, ), ;, }, if, (]
[(, ), *, length1, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return]
[(, ), *, length1, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return]
[*, length1, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -]
[*, length1, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -]
[length1, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (]
[length1, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (]
[/, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[/, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -]
[length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -]
[}, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, ), /]
[if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, ), /, (]
[if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, ), /, (]
[if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, ), /, (]
[if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, this, ., displayStart, ), /, (]
[max, -, (, (, value, -, this, ., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -]
[max, -, (, (, value, -, this, ., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -]
[this, ., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *]
[., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (]
[., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (]
[), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -]
[getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return]
[getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return]
[), -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +]
[), -, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +]
[-, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (]
[-, this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (]
[this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (]
[this, ., displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (]
[displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -]
[displayStart, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -]
[max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /]
[-, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (]
[-, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (]
[-, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (]
[-, min, ), ;, }, else, {, return, min, +, (, (, value, -, this, ., displayStart, ), /, (]
[min, +, (, (, value, -, this, ., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -]
[min, +, (, (, value, -, this, ., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -]
[this, ., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *]
[., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (]
[., displayStart, ), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (]
[), /, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), ), *, (, max, -]
[(, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ,, double, length1, ,, double, length2, ), {, double, min, =]
[area, ,, RectangleEdge, edge, ,, double, length1, ,, double, length2, ), {, double, min, =, 0.0, ;, double, max, =]
[,, double, length1, ,, double, length2, ), {, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (]
[,, double, length1, ,, double, length2, ), {, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (]
[double, length2, ), {, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[=, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, max, =]
[=, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, max, =]
[0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, max, =, area, ., getMaxX, (, ), ;]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, max, =, area, ., getMaxX, (, ), ;, min, =]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, max, =, area, ., getMaxX, (, ), ;, min, =]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, max, =, area, ., getMaxX, (, ), ;, min, =]
[edge, ), ), {, max, =, area, ., getMaxX, (, ), ;, min, =, area, ., getMaxX, (, ), -]
[edge, ), ), {, max, =, area, ., getMaxX, (, ), ;, min, =, area, ., getMaxX, (, ), -]
[edge, ), ), {, max, =, area, ., getMaxX, (, ), ;, min, =, area, ., getMaxX, (, ), -]
[edge, ), ), {, max, =, area, ., getMaxX, (, ), ;, min, =, area, ., getMaxX, (, ), -]
[area, ., getMaxX, (, ), ;, min, =, area, ., getMaxX, (, ), -, area, ., getWidth, (, ), *]
[getMaxX, (, ), ;, min, =, area, ., getMaxX, (, ), -, area, ., getWidth, (, ), *, length2, /]
[(, ), ;, min, =, area, ., getMaxX, (, ), -, area, ., getWidth, (, ), *, length2, /, (]
[(, ), ;, min, =, area, ., getMaxX, (, ), -, area, ., getWidth, (, ), *, length2, /, (]
[;, min, =, area, ., getMaxX, (, ), -, area, ., getWidth, (, ), *, length2, /, (, length1, +]
[), -, area, ., getWidth, (, ), *, length2, /, (, length1, +, length2, ), ;, }, else, if, (]
[), -, area, ., getWidth, (, ), *, length2, /, (, length1, +, length2, ), ;, }, else, if, (]
[getWidth, (, ), *, length2, /, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[length2, /, (, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[(, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =]
[(, length1, +, length2, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (, ), ;]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (, ), ;, min, =]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (, ), ;, min, =]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (, ), ;, min, =]
[edge, ), ), {, max, =, area, ., getMinY, (, ), ;, min, =, area, ., getMinY, (, ), +]
[edge, ), ), {, max, =, area, ., getMinY, (, ), ;, min, =, area, ., getMinY, (, ), +]
[edge, ), ), {, max, =, area, ., getMinY, (, ), ;, min, =, area, ., getMinY, (, ), +]
[edge, ), ), {, max, =, area, ., getMinY, (, ), ;, min, =, area, ., getMinY, (, ), +]
[area, ., getMinY, (, ), ;, min, =, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *]
[getMinY, (, ), ;, min, =, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, length2, /]
[(, ), ;, min, =, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, length2, /, (]
[(, ), ;, min, =, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, length2, /, (]
[;, min, =, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, length2, /, (, length1, +]
[(, ), +, area, ., getHeight, (, ), *, length2, /, (, length1, +, length2, ), ;, }, if, (]
[(, ), *, length2, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return]
[(, ), *, length2, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return]
[*, length2, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -]
[*, length2, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -]
[length2, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (]
[length2, /, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (]
[/, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[/, (, length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -]
[length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -]
[length1, +, length2, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -]
[(, ), ), {, return, max, -, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /]
[), ), {, return, max, -, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (]
[), ), {, return, max, -, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (]
[), ), {, return, max, -, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (]
[max, -, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (, this, ., displayEnd, -]
[max, -, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (, this, ., displayEnd, -]
[max, -, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (, this, ., displayEnd, -]
[getLowerBound, (, ), ), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *]
[(, ), ), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (]
[(, ), ), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (]
[), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -]
[this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, else, {, return]
[this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, else, {, return]
[fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +]
[fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +]
[., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (]
[., getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (]
[getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (]
[getLowerBound, (, ), ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (]
[), ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -]
[), ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -]
[), ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -]
[;, }, else, {, return, min, +, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /]
[}, else, {, return, min, +, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (]
[}, else, {, return, min, +, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (]
[}, else, {, return, min, +, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (]
[min, +, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (, this, ., displayEnd, -]
[min, +, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (, this, ., displayEnd, -]
[min, +, (, (, value, -, this, ., fixedRange, ., getLowerBound, (, ), ), /, (, this, ., displayEnd, -]
[getLowerBound, (, ), ), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *]
[(, ), ), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (]
[(, ), ), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (]
[), /, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ), *, (, max, -]
[*, (, max, -, min, ), ;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double, lower, =]
[*, (, max, -, min, ), ;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double, lower, =]
[*, (, max, -, min, ), ;, }, }, private, double, mapValueToFixedRange, (, double, value, ), {, double, lower, =]
[mapValueToFixedRange, (, double, value, ), {, double, lower, =, this, ., fixedRange, ., getLowerBound, (, ), ;, double, length, =]
[mapValueToFixedRange, (, double, value, ), {, double, lower, =, this, ., fixedRange, ., getLowerBound, (, ), ;, double, length, =]
[mapValueToFixedRange, (, double, value, ), {, double, lower, =, this, ., fixedRange, ., getLowerBound, (, ), ;, double, length, =]
[., fixedRange, ., getLowerBound, (, ), ;, double, length, =, this, ., fixedRange, ., getLength, (, ), ;, if, (]
[., fixedRange, ., getLowerBound, (, ), ;, double, length, =, this, ., fixedRange, ., getLength, (, ), ;, if, (]
[., getLowerBound, (, ), ;, double, length, =, this, ., fixedRange, ., getLength, (, ), ;, if, (, value, <]
[;, double, length, =, this, ., fixedRange, ., getLength, (, ), ;, if, (, value, <, lower, ), {, return]
[;, double, length, =, this, ., fixedRange, ., getLength, (, ), ;, if, (, value, <, lower, ), {, return]
[;, double, length, =, this, ., fixedRange, ., getLength, (, ), ;, if, (, value, <, lower, ), {, return]
[length, =, this, ., fixedRange, ., getLength, (, ), ;, if, (, value, <, lower, ), {, return, lower, +]
[this, ., fixedRange, ., getLength, (, ), ;, if, (, value, <, lower, ), {, return, lower, +, length, +]
[., fixedRange, ., getLength, (, ), ;, if, (, value, <, lower, ), {, return, lower, +, length, +, (]
[., fixedRange, ., getLength, (, ), ;, if, (, value, <, lower, ), {, return, lower, +, length, +, (]
[fixedRange, ., getLength, (, ), ;, if, (, value, <, lower, ), {, return, lower, +, length, +, (, (]
[fixedRange, ., getLength, (, ), ;, if, (, value, <, lower, ), {, return, lower, +, length, +, (, (]
[getLength, (, ), ;, if, (, value, <, lower, ), {, return, lower, +, length, +, (, (, value, -]
[;, if, (, value, <, lower, ), {, return, lower, +, length, +, (, (, value, -, lower, ), %]
[{, return, lower, +, length, +, (, (, value, -, lower, ), %, length, ), ;, }, else, {, return]
[{, return, lower, +, length, +, (, (, value, -, lower, ), %, length, ), ;, }, else, {, return]
[lower, +, length, +, (, (, value, -, lower, ), %, length, ), ;, }, else, {, return, lower, +]
[+, length, +, (, (, value, -, lower, ), %, length, ), ;, }, else, {, return, lower, +, (]
[+, length, +, (, (, value, -, lower, ), %, length, ), ;, }, else, {, return, lower, +, (]
[length, +, (, (, value, -, lower, ), %, length, ), ;, }, else, {, return, lower, +, (, (]
[length, +, (, (, value, -, lower, ), %, length, ), ;, }, else, {, return, lower, +, (, (]
[(, (, value, -, lower, ), %, length, ), ;, }, else, {, return, lower, +, (, (, value, -]
[-, lower, ), %, length, ), ;, }, else, {, return, lower, +, (, (, value, -, lower, ), %]
[;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =]
[double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (]
[double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (]
[double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (]
[java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, this, ., displayStart, <]
[java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, this, ., displayStart, <]
[RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {]
[), {, double, result, =, 0.0, ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, result, =]
[), {, double, result, =, 0.0, ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, result, =]
[=, 0.0, ;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, result, =, super, ., java2DToValue, (]
[;, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, result, =, super, ., java2DToValue, (, java2DValue, ,]
[(, this, ., displayStart, <, this, ., displayEnd, ), {, result, =, super, ., java2DToValue, (, java2DValue, ,, area, ,]
[), {, result, =, super, ., java2DToValue, (, java2DValue, ,, area, ,, edge, ), ;, }, else, {, }, return]
[,, edge, ), ;, }, else, {, }, return, result, ;, }, private, double, getDisplayLength, (, ), {, if, (]
[,, edge, ), ;, }, else, {, }, return, result, ;, }, private, double, getDisplayLength, (, ), {, if, (]
[,, edge, ), ;, }, else, {, }, return, result, ;, }, private, double, getDisplayLength, (, ), {, if, (]
[}, else, {, }, return, result, ;, }, private, double, getDisplayLength, (, ), {, if, (, this, ., displayStart, <]
[}, else, {, }, return, result, ;, }, private, double, getDisplayLength, (, ), {, if, (, this, ., displayStart, <]
[;, }, private, double, getDisplayLength, (, ), {, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, return]
[}, private, double, getDisplayLength, (, ), {, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, return, (]
[}, private, double, getDisplayLength, (, ), {, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, return, (]
[}, private, double, getDisplayLength, (, ), {, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, return, (]
[(, ), {, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, return, (, this, ., displayEnd, -]
[(, ), {, if, (, this, ., displayStart, <, this, ., displayEnd, ), {, return, (, this, ., displayEnd, -]
[this, ., displayEnd, ), {, return, (, this, ., displayEnd, -, this, ., displayStart, ), ;, }, else, {, return]
[this, ., displayEnd, ), {, return, (, this, ., displayEnd, -, this, ., displayStart, ), ;, }, else, {, return]
[., displayEnd, ), {, return, (, this, ., displayEnd, -, this, ., displayStart, ), ;, }, else, {, return, (]
[., displayEnd, ), {, return, (, this, ., displayEnd, -, this, ., displayStart, ), ;, }, else, {, return, (]
[., displayEnd, ), {, return, (, this, ., displayEnd, -, this, ., displayStart, ), ;, }, else, {, return, (]
[., displayEnd, ), {, return, (, this, ., displayEnd, -, this, ., displayStart, ), ;, }, else, {, return, (]
[displayEnd, -, this, ., displayStart, ), ;, }, else, {, return, (, this, ., fixedRange, ., getUpperBound, (, ), -]
[displayEnd, -, this, ., displayStart, ), ;, }, else, {, return, (, this, ., fixedRange, ., getUpperBound, (, ), -]
[), ;, }, else, {, return, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +]
[;, }, else, {, return, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (]
[;, }, else, {, return, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (]
[;, }, else, {, return, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (]
[return, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (, this, ., displayEnd, -]
[return, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (, this, ., displayEnd, -]
[return, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (, this, ., displayEnd, -]
[displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, }, private, double, getDisplayCentralValue, (, ), {, return]
[this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange, (]
[this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange, (]
[this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange, (]
[getLowerBound, (, ), ), ;, }, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange, (, this, ., displayStart, +]
[(, ), ), ;, }, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange, (, this, ., displayStart, +, (]
[(, ), ), ;, }, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange, (, this, ., displayStart, +, (]
[}, }, private, double, getDisplayCentralValue, (, ), {, return, mapValueToFixedRange, (, this, ., displayStart, +, (, getDisplayLength, (, ), /]
[displayStart, +, (, getDisplayLength, (, ), /, 2, ), ), ;, }, public, void, resizeRange, (, double, percent, ), {]
[(, getDisplayLength, (, ), /, 2, ), ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (]
[(, ), /, 2, ), ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,]
[,, getDisplayCentralValue, (, ), ), ;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (]
[,, getDisplayCentralValue, (, ), ), ;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (]
[(, ), ), ;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >]
[void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {, double, halfLength, =]
[void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {, double, halfLength, =]
[void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {, double, halfLength, =]
[percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {, double, halfLength, =, getDisplayLength, (, ), *]
[double, anchorValue, ), {, if, (, percent, >, 0.0, ), {, double, halfLength, =, getDisplayLength, (, ), *, percent, /]
[), {, if, (, percent, >, 0.0, ), {, double, halfLength, =, getDisplayLength, (, ), *, percent, /, 2, ;]
[if, (, percent, >, 0.0, ), {, double, halfLength, =, getDisplayLength, (, ), *, percent, /, 2, ;, setDisplayRange, (]
[if, (, percent, >, 0.0, ), {, double, halfLength, =, getDisplayLength, (, ), *, percent, /, 2, ;, setDisplayRange, (]
[percent, >, 0.0, ), {, double, halfLength, =, getDisplayLength, (, ), *, percent, /, 2, ;, setDisplayRange, (, anchorValue, -]
[0.0, ), {, double, halfLength, =, getDisplayLength, (, ), *, percent, /, 2, ;, setDisplayRange, (, anchorValue, -, halfLength, ,]
[0.0, ), {, double, halfLength, =, getDisplayLength, (, ), *, percent, /, 2, ;, setDisplayRange, (, anchorValue, -, halfLength, ,]
[{, double, halfLength, =, getDisplayLength, (, ), *, percent, /, 2, ;, setDisplayRange, (, anchorValue, -, halfLength, ,, anchorValue, +]
[), *, percent, /, 2, ;, setDisplayRange, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, }, else, {]
[percent, /, 2, ;, setDisplayRange, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, }, else, {, setAutoRange, (]
[;, }, }, public, double, lengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, axisLength, =]
[double, lengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, axisLength, =, 0.0, ;, if, (]
[double, lengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, axisLength, =, 0.0, ;, if, (]
[double, lengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, axisLength, =, 0.0, ;, if, (]
[length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, axisLength, =, 0.0, ;, if, (, this, ., displayEnd, >]
[length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, axisLength, =, 0.0, ;, if, (, this, ., displayEnd, >]
[RectangleEdge, edge, ), {, double, axisLength, =, 0.0, ;, if, (, this, ., displayEnd, >, this, ., displayStart, ), {]
[), {, double, axisLength, =, 0.0, ;, if, (, this, ., displayEnd, >, this, ., displayStart, ), {, axisLength, =]
[), {, double, axisLength, =, 0.0, ;, if, (, this, ., displayEnd, >, this, ., displayStart, ), {, axisLength, =]
[), {, double, axisLength, =, 0.0, ;, if, (, this, ., displayEnd, >, this, ., displayStart, ), {, axisLength, =]
[=, 0.0, ;, if, (, this, ., displayEnd, >, this, ., displayStart, ), {, axisLength, =, this, ., displayEnd, -]
[=, 0.0, ;, if, (, this, ., displayEnd, >, this, ., displayStart, ), {, axisLength, =, this, ., displayEnd, -]
[displayEnd, >, this, ., displayStart, ), {, axisLength, =, this, ., displayEnd, -, this, ., displayStart, ;, }, else, {]
[this, ., displayStart, ), {, axisLength, =, this, ., displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength, =]
[this, ., displayStart, ), {, axisLength, =, this, ., displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength, =]
[., displayStart, ), {, axisLength, =, this, ., displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength, =, (]
[., displayStart, ), {, axisLength, =, this, ., displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength, =, (]
[., displayStart, ), {, axisLength, =, this, ., displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength, =, (]
[., displayStart, ), {, axisLength, =, this, ., displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength, =, (]
[displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength, =, (, this, ., fixedRange, ., getUpperBound, (, ), -]
[displayEnd, -, this, ., displayStart, ;, }, else, {, axisLength, =, (, this, ., fixedRange, ., getUpperBound, (, ), -]
[;, }, else, {, axisLength, =, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +]
[}, else, {, axisLength, =, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (]
[}, else, {, axisLength, =, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (]
[}, else, {, axisLength, =, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (]
[=, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (, this, ., displayEnd, -]
[=, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (, this, ., displayEnd, -]
[=, (, this, ., fixedRange, ., getUpperBound, (, ), -, this, ., displayStart, ), +, (, this, ., displayEnd, -]
[), +, (, this, ., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, double, areaLength, =]
[., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, double, areaLength, =, 0.0, ;, if, (]
[., displayEnd, -, this, ., fixedRange, ., getLowerBound, (, ), ), ;, }, double, areaLength, =, 0.0, ;, if, (]
[., fixedRange, ., getLowerBound, (, ), ), ;, }, double, areaLength, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (]
[(, ), ), ;, }, double, areaLength, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[), ;, }, double, areaLength, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, areaLength, =]
[), ;, }, double, areaLength, =, 0.0, ;, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, areaLength, =]
[(, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, areaLength, =, area, ., getHeight, (, ), ;, }, else, {]
[., isLeftOrRight, (, edge, ), ), {, areaLength, =, area, ., getHeight, (, ), ;, }, else, {, areaLength, =]
[., isLeftOrRight, (, edge, ), ), {, areaLength, =, area, ., getHeight, (, ), ;, }, else, {, areaLength, =]
[=, area, ., getHeight, (, ), ;, }, else, {, areaLength, =, area, ., getWidth, (, ), ;, }, return]
[=, area, ., getHeight, (, ), ;, }, else, {, areaLength, =, area, ., getWidth, (, ), ;, }, return]
[area, ., getHeight, (, ), ;, }, else, {, areaLength, =, area, ., getWidth, (, ), ;, }, return, (]
[area, ., getHeight, (, ), ;, }, else, {, areaLength, =, area, ., getWidth, (, ), ;, }, return, (]
[getHeight, (, ), ;, }, else, {, areaLength, =, area, ., getWidth, (, ), ;, }, return, (, length, /]
[;, }, else, {, areaLength, =, area, ., getWidth, (, ), ;, }, return, (, length, /, axisLength, ), *]
[return, (, length, /, axisLength, ), *, areaLength, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[return, (, length, /, axisLength, ), *, areaLength, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[length, /, axisLength, ), *, areaLength, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[*, areaLength, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, ModuloAxis, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, ModuloAxis, ), ), {, return, false, ;, }, ModuloAxis, that, =]
[if, (, !, (, obj, instanceof, ModuloAxis, ), ), {, return, false, ;, }, ModuloAxis, that, =, (, ModuloAxis, )]
[obj, instanceof, ModuloAxis, ), ), {, return, false, ;, }, ModuloAxis, that, =, (, ModuloAxis, ), obj, ;, if, (]
[obj, instanceof, ModuloAxis, ), ), {, return, false, ;, }, ModuloAxis, that, =, (, ModuloAxis, ), obj, ;, if, (]
[obj, instanceof, ModuloAxis, ), ), {, return, false, ;, }, ModuloAxis, that, =, (, ModuloAxis, ), obj, ;, if, (]
[), {, return, false, ;, }, ModuloAxis, that, =, (, ModuloAxis, ), obj, ;, if, (, this, ., displayStart, !=]
[), {, return, false, ;, }, ModuloAxis, that, =, (, ModuloAxis, ), obj, ;, if, (, this, ., displayStart, !=]
[ModuloAxis, that, =, (, ModuloAxis, ), obj, ;, if, (, this, ., displayStart, !=, that, ., displayStart, ), {, return]
[), obj, ;, if, (, this, ., displayStart, !=, that, ., displayStart, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., displayStart, !=, that, ., displayStart, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., displayStart, !=, that, ., displayStart, ), {, return, false, ;, }, if, (]
[(, this, ., displayStart, !=, that, ., displayStart, ), {, return, false, ;, }, if, (, this, ., displayEnd, !=]
[(, this, ., displayStart, !=, that, ., displayStart, ), {, return, false, ;, }, if, (, this, ., displayEnd, !=]
[., displayStart, ), {, return, false, ;, }, if, (, this, ., displayEnd, !=, that, ., displayEnd, ), {, return]
[false, ;, }, if, (, this, ., displayEnd, !=, that, ., displayEnd, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., displayEnd, !=, that, ., displayEnd, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., displayEnd, !=, that, ., displayEnd, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., displayEnd, !=, that, ., displayEnd, ), {, return, false, ;, }, if, (, !]
[displayEnd, !=, that, ., displayEnd, ), {, return, false, ;, }, if, (, !, this, ., fixedRange, ., equals, (]
[displayEnd, !=, that, ., displayEnd, ), {, return, false, ;, }, if, (, !, this, ., fixedRange, ., equals, (]
[return, false, ;, }, if, (, !, this, ., fixedRange, ., equals, (, that, ., fixedRange, ), ), {, return]
[if, (, !, this, ., fixedRange, ., equals, (, that, ., fixedRange, ), ), {, return, false, ;, }, return]
[if, (, !, this, ., fixedRange, ., equals, (, that, ., fixedRange, ), ), {, return, false, ;, }, return]
[., fixedRange, ., equals, (, that, ., fixedRange, ), ), {, return, false, ;, }, return, super, ., equals, (]
