[;, private, static, final, long, serialVersionUID, =, 1L, ;, private, transient, InputId, inputId, ;, private, transient, SourceFile, sourceFile, ;, private]
[., getLogger, (, JsAst, ., class, ., getName, (, ), ), ;, private, static, final, long, serialVersionUID, =, 1L, ;]
[), ;, private, static, final, long, serialVersionUID, =, 1L, ;, private, transient, InputId, inputId, ;, private, transient, SourceFile, sourceFile, ;]
[., getName, (, ), ), ;, private, static, final, long, serialVersionUID, =, 1L, ;, private, transient, InputId, inputId, ;, private]
[;, private, transient, InputId, inputId, ;, private, transient, SourceFile, sourceFile, ;, private, String, fileName, ;, private, Node, root, ;, public]
[=, new, InputId, (, sourceFile, ., getName, (, ), ), ;, this, ., sourceFile, =, sourceFile, ;, this, ., fileName]
[., inputId, =, new, InputId, (, sourceFile, ., getName, (, ), ), ;, this, ., sourceFile, =, sourceFile, ;, this]
[;, this, ., sourceFile, =, sourceFile, ;, this, ., fileName, =, sourceFile, ., getName, (, ), ;, }, @, Override]
[), ;, this, ., sourceFile, =, sourceFile, ;, this, ., fileName, =, sourceFile, ., getName, (, ), ;, }, @]
[., getName, (, ), ), ;, this, ., sourceFile, =, sourceFile, ;, this, ., fileName, =, sourceFile, ., getName, (]
[=, sourceFile, ;, this, ., fileName, =, sourceFile, ., getName, (, ), ;, }, @, Override, public, Node, getAstRoot, (]
[., sourceFile, =, sourceFile, ;, this, ., fileName, =, sourceFile, ., getName, (, ), ;, }, @, Override, public, Node]
[;, this, ., fileName, =, sourceFile, ., getName, (, ), ;, }, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler]
[=, sourceFile, ., getName, (, ), ;, }, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, if, (]
[., fileName, =, sourceFile, ., getName, (, ), ;, }, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {]
[;, }, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, if, (, root, ==, null, ), {, parse]
[., getName, (, ), ;, }, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, if, (, root, ==]
[), {, parse, (, compiler, ), ;, root, ., setInputId, (, inputId, ), ;, }, return, root, ;, }, @]
[==, null, ), {, parse, (, compiler, ), ;, root, ., setInputId, (, inputId, ), ;, }, return, root, ;]
[), {, parse, (, compiler, ), ;, root, ., setInputId, (, inputId, ), ;, }, return, root, ;, }, @]
[;, root, ., setInputId, (, inputId, ), ;, }, return, root, ;, }, @, Override, public, void, clearAst, (, )]
[), ;, root, ., setInputId, (, inputId, ), ;, }, return, root, ;, }, @, Override, public, void, clearAst, (]
[;, }, return, root, ;, }, @, Override, public, void, clearAst, (, ), {, root, =, null, ;, sourceFile, .]
[., setInputId, (, inputId, ), ;, }, return, root, ;, }, @, Override, public, void, clearAst, (, ), {, root]
[), ;, }, return, root, ;, }, @, Override, public, void, clearAst, (, ), {, root, =, null, ;, sourceFile]
[;, }, @, Override, public, void, clearAst, (, ), {, root, =, null, ;, sourceFile, ., clearCachedSource, (, ), ;]
[=, null, ;, sourceFile, ., clearCachedSource, (, ), ;, }, @, Override, public, InputId, getInputId, (, ), {, return, inputId]
[;, sourceFile, ., clearCachedSource, (, ), ;, }, @, Override, public, InputId, getInputId, (, ), {, return, inputId, ;, }]
[;, }, @, Override, public, InputId, getInputId, (, ), {, return, inputId, ;, }, @, Override, public, SourceFile, getSourceFile, (]
[., clearCachedSource, (, ), ;, }, @, Override, public, InputId, getInputId, (, ), {, return, inputId, ;, }, @, Override]
[;, }, @, Override, public, SourceFile, getSourceFile, (, ), {, return, sourceFile, ;, }, @, Override, public, void, setSourceFile, (]
[;, }, @, Override, public, void, setSourceFile, (, SourceFile, file, ), {, Preconditions, ., checkState, (, fileName, ., equals, (]
[;, sourceFile, =, file, ;, }, private, void, parse, (, AbstractCompiler, compiler, ), {, try, {, logger_, ., fine, (]
[., checkState, (, fileName, ., equals, (, file, ., getName, (, ), ), ), ;, sourceFile, =, file, ;, }]
[), ;, sourceFile, =, file, ;, }, private, void, parse, (, AbstractCompiler, compiler, ), {, try, {, logger_, ., fine]
[., equals, (, file, ., getName, (, ), ), ), ;, sourceFile, =, file, ;, }, private, void, parse, (]
[), ), ;, sourceFile, =, file, ;, }, private, void, parse, (, AbstractCompiler, compiler, ), {, try, {, logger_, .]
[., getName, (, ), ), ), ;, sourceFile, =, file, ;, }, private, void, parse, (, AbstractCompiler, compiler, ), {]
[=, file, ;, }, private, void, parse, (, AbstractCompiler, compiler, ), {, try, {, logger_, ., fine, (, "Parsing: ", +]
[;, }, private, void, parse, (, AbstractCompiler, compiler, ), {, try, {, logger_, ., fine, (, "Parsing: ", +, sourceFile, .]
[;, ParserRunner, ., ParseResult, result, =, ParserRunner, ., parse, (, sourceFile, ,, sourceFile, ., getCode, (, ), ,, compiler, .]
[., fine, (, "Parsing: ", +, sourceFile, ., getName, (, ), ), ;, ParserRunner, ., ParseResult, result, =, ParserRunner, ., parse]
[), ;, ParserRunner, ., ParseResult, result, =, ParserRunner, ., parse, (, sourceFile, ,, sourceFile, ., getCode, (, ), ,, compiler]
[+, sourceFile, ., getName, (, ), ), ;, ParserRunner, ., ParseResult, result, =, ParserRunner, ., parse, (, sourceFile, ,, sourceFile]
[), ;, ParserRunner, ., ParseResult, result, =, ParserRunner, ., parse, (, sourceFile, ,, sourceFile, ., getCode, (, ), ,, compiler]
[., getName, (, ), ), ;, ParserRunner, ., ParseResult, result, =, ParserRunner, ., parse, (, sourceFile, ,, sourceFile, ., getCode]
[;, root, =, result, ., ast, ;, compiler, ., setOldParseTree, (, sourceFile, ., getName, (, ), ,, result, ., oldAst]
[., parse, (, sourceFile, ,, sourceFile, ., getCode, (, ), ,, compiler, ., getParserConfig, (, ), ,, compiler, ., getDefaultErrorReporter]
[,, sourceFile, ., getCode, (, ), ,, compiler, ., getParserConfig, (, ), ,, compiler, ., getDefaultErrorReporter, (, ), ,, logger_]
[,, compiler, ., getParserConfig, (, ), ,, compiler, ., getDefaultErrorReporter, (, ), ,, logger_, ), ;, root, =, result, .]
[., getCode, (, ), ,, compiler, ., getParserConfig, (, ), ,, compiler, ., getDefaultErrorReporter, (, ), ,, logger_, ), ;]
[,, compiler, ., getDefaultErrorReporter, (, ), ,, logger_, ), ;, root, =, result, ., ast, ;, compiler, ., setOldParseTree, (]
[., getParserConfig, (, ), ,, compiler, ., getDefaultErrorReporter, (, ), ,, logger_, ), ;, root, =, result, ., ast, ;]
[,, logger_, ), ;, root, =, result, ., ast, ;, compiler, ., setOldParseTree, (, sourceFile, ., getName, (, ), ,]
[., getDefaultErrorReporter, (, ), ,, logger_, ), ;, root, =, result, ., ast, ;, compiler, ., setOldParseTree, (, sourceFile, .]
[), ;, root, =, result, ., ast, ;, compiler, ., setOldParseTree, (, sourceFile, ., getName, (, ), ,, result, .]
[=, result, ., ast, ;, compiler, ., setOldParseTree, (, sourceFile, ., getName, (, ), ,, result, ., oldAst, ), ;]
[;, compiler, ., setOldParseTree, (, sourceFile, ., getName, (, ), ,, result, ., oldAst, ), ;, }, catch, (, IOException]
[., ast, ;, compiler, ., setOldParseTree, (, sourceFile, ., getName, (, ), ,, result, ., oldAst, ), ;, }, catch]
[;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,]
[., setOldParseTree, (, sourceFile, ., getName, (, ), ,, result, ., oldAst, ), ;, }, catch, (, IOException, e, )]
[,, result, ., oldAst, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make]
[., getName, (, ), ,, result, ., oldAst, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report]
[), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR]
[., oldAst, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, AbstractCompiler]
[;, }, if, (, root, ==, null, ||, compiler, ., hasHaltingErrors, (, ), ), {, root, =, IR, ., script]
[., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, sourceFile, ., getName, (, ), ), ), ;, }]
[), ;, }, if, (, root, ==, null, ||, compiler, ., hasHaltingErrors, (, ), ), {, root, =, IR, .]
[., make, (, AbstractCompiler, ., READ_ERROR, ,, sourceFile, ., getName, (, ), ), ), ;, }, if, (, root, ==]
[,, sourceFile, ., getName, (, ), ), ), ;, }, if, (, root, ==, null, ||, compiler, ., hasHaltingErrors, (]
[., READ_ERROR, ,, sourceFile, ., getName, (, ), ), ), ;, }, if, (, root, ==, null, ||, compiler, .]
[), ), ;, }, if, (, root, ==, null, ||, compiler, ., hasHaltingErrors, (, ), ), {, root, =, IR]
[., getName, (, ), ), ), ;, }, if, (, root, ==, null, ||, compiler, ., hasHaltingErrors, (, ), )]
[), {, root, =, IR, ., script, (, ), ;, }, else, {, compiler, ., prepareAst, (, root, ), ;]
[||, compiler, ., hasHaltingErrors, (, ), ), {, root, =, IR, ., script, (, ), ;, }, else, {, compiler]
[==, null, ||, compiler, ., hasHaltingErrors, (, ), ), {, root, =, IR, ., script, (, ), ;, }, else]
[||, compiler, ., hasHaltingErrors, (, ), ), {, root, =, IR, ., script, (, ), ;, }, else, {, compiler]
[), {, root, =, IR, ., script, (, ), ;, }, else, {, compiler, ., prepareAst, (, root, ), ;]
[., hasHaltingErrors, (, ), ), {, root, =, IR, ., script, (, ), ;, }, else, {, compiler, ., prepareAst]
[=, IR, ., script, (, ), ;, }, else, {, compiler, ., prepareAst, (, root, ), ;, }, root, .]
[;, }, else, {, compiler, ., prepareAst, (, root, ), ;, }, root, ., setStaticSourceFile, (, sourceFile, ), ;, }]
[., script, (, ), ;, }, else, {, compiler, ., prepareAst, (, root, ), ;, }, root, ., setStaticSourceFile, (]
[;, }, root, ., setStaticSourceFile, (, sourceFile, ), ;, }, }]
[., prepareAst, (, root, ), ;, }, root, ., setStaticSourceFile, (, sourceFile, ), ;, }, }]
[), ;, }, root, ., setStaticSourceFile, (, sourceFile, ), ;, }, }]
[;, }, }]
[., setStaticSourceFile, (, sourceFile, ), ;, }, }]
[), ;, }, }]
