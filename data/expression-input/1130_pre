[List, ;, import, java, ., util, ., Set, ;, abstract, class, ConcreteType, implements, LatticeElement, {, static, final, ConcreteType, NONE, =]
[class, ConcreteType, implements, LatticeElement, {, static, final, ConcreteType, NONE, =, new, ConcreteNoneType, (, ), ;, static, final, ConcreteType, ALL, =]
[;, static, final, ConcreteType, ALL, =, new, ConcreteAll, (, ), ;, private, static, final, List, <, ConcreteFunctionType, >, NO_FUNCTIONS, =]
[;, static, final, ConcreteType, ALL, =, new, ConcreteAll, (, ), ;, private, static, final, List, <, ConcreteFunctionType, >, NO_FUNCTIONS, =]
[NO_FUNCTIONS, =, Lists, ., <, ConcreteFunctionType, >, newArrayList, (, ), ;, private, static, final, List, <, ConcreteInstanceType, >, NO_INSTANCES, =]
[NO_FUNCTIONS, =, Lists, ., <, ConcreteFunctionType, >, newArrayList, (, ), ;, private, static, final, List, <, ConcreteInstanceType, >, NO_INSTANCES, =]
[., <, ConcreteInstanceType, >, newArrayList, (, ), ;, private, static, final, List, <, StaticSlot, <, ConcreteType, >, >, NO_SLOTS, =]
[., <, ConcreteInstanceType, >, newArrayList, (, ), ;, private, static, final, List, <, StaticSlot, <, ConcreteType, >, >, NO_SLOTS, =]
[>, >, newArrayList, (, ), ;, protected, static, ConcreteType, createForTypes, (, Collection, <, ConcreteType, >, types, ), {, if, (]
[>, >, newArrayList, (, ), ;, protected, static, ConcreteType, createForTypes, (, Collection, <, ConcreteType, >, types, ), {, if, (]
[>, >, newArrayList, (, ), ;, protected, static, ConcreteType, createForTypes, (, Collection, <, ConcreteType, >, types, ), {, if, (]
[newArrayList, (, ), ;, protected, static, ConcreteType, createForTypes, (, Collection, <, ConcreteType, >, types, ), {, if, (, types, ==]
[), ;, protected, static, ConcreteType, createForTypes, (, Collection, <, ConcreteType, >, types, ), {, if, (, types, ==, null, ||]
[), ;, protected, static, ConcreteType, createForTypes, (, Collection, <, ConcreteType, >, types, ), {, if, (, types, ==, null, ||]
[), ;, protected, static, ConcreteType, createForTypes, (, Collection, <, ConcreteType, >, types, ), {, if, (, types, ==, null, ||]
[(, Collection, <, ConcreteType, >, types, ), {, if, (, types, ==, null, ||, types, ., size, (, ), ==]
[>, types, ), {, if, (, types, ==, null, ||, types, ., size, (, ), ==, 0, ), {, return]
[types, ==, null, ||, types, ., size, (, ), ==, 0, ), {, return, NONE, ;, }, else, if, (]
[types, ==, null, ||, types, ., size, (, ), ==, 0, ), {, return, NONE, ;, }, else, if, (]
[types, ==, null, ||, types, ., size, (, ), ==, 0, ), {, return, NONE, ;, }, else, if, (]
[size, (, ), ==, 0, ), {, return, NONE, ;, }, else, if, (, types, ., size, (, ), ==]
[0, ), {, return, NONE, ;, }, else, if, (, types, ., size, (, ), ==, 1, ), {, return]
[0, ), {, return, NONE, ;, }, else, if, (, types, ., size, (, ), ==, 1, ), {, return]
[0, ), {, return, NONE, ;, }, else, if, (, types, ., size, (, ), ==, 1, ), {, return]
[), ==, 1, ), {, return, types, ., iterator, (, ), ., next, (, ), ;, }, else, {, return]
[), {, return, types, ., iterator, (, ), ., next, (, ), ;, }, else, {, return, new, ConcreteUnionType, (]
[), {, return, types, ., iterator, (, ), ., next, (, ), ;, }, else, {, return, new, ConcreteUnionType, (]
[., iterator, (, ), ., next, (, ), ;, }, else, {, return, new, ConcreteUnionType, (, Sets, ., newHashSet, (]
[return, new, ConcreteUnionType, (, Sets, ., newHashSet, (, types, ), ), ;, }, }, boolean, isNone, (, ), {, return]
[), ), ;, }, }, boolean, isNone, (, ), {, return, false, ;, }, boolean, isFunction, (, ), {, return]
[{, return, false, ;, }, boolean, isFunction, (, ), {, return, false, ;, }, boolean, isInstance, (, ), {, return]
[{, return, false, ;, }, boolean, isInstance, (, ), {, return, false, ;, }, boolean, isUnion, (, ), {, return]
[{, return, false, ;, }, boolean, isUnion, (, ), {, return, false, ;, }, boolean, isAll, (, ), {, return]
[{, return, false, ;, }, boolean, isAll, (, ), {, return, false, ;, }, boolean, isSingleton, (, ), {, return]
[{, return, false, ;, }, boolean, isAll, (, ), {, return, false, ;, }, boolean, isSingleton, (, ), {, return]
[{, return, false, ;, }, boolean, isAll, (, ), {, return, false, ;, }, boolean, isSingleton, (, ), {, return]
[return, false, ;, }, boolean, isAll, (, ), {, return, false, ;, }, boolean, isSingleton, (, ), {, return, !]
[boolean, isAll, (, ), {, return, false, ;, }, boolean, isSingleton, (, ), {, return, !, isNone, (, ), &&]
[isAll, (, ), {, return, false, ;, }, boolean, isSingleton, (, ), {, return, !, isNone, (, ), &&, !]
[return, false, ;, }, boolean, isSingleton, (, ), {, return, !, isNone, (, ), &&, !, isUnion, (, ), &&]
[false, ;, }, boolean, isSingleton, (, ), {, return, !, isNone, (, ), &&, !, isUnion, (, ), &&, !]
[(, ), &&, !, isUnion, (, ), &&, !, isAll, (, ), ;, }, ConcreteFunctionType, toFunction, (, ), {, return]
[isAll, (, ), ;, }, ConcreteFunctionType, toFunction, (, ), {, return, null, ;, }, ConcreteInstanceType, toInstance, (, ), {, return]
[{, return, null, ;, }, ConcreteInstanceType, toInstance, (, ), {, return, null, ;, }, ConcreteUnionType, toUnion, (, ), {, return]
[;, }, ConcreteUnionType, toUnion, (, ), {, return, null, ;, }, StaticScope, <, ConcreteType, >, getScope, (, ), {, return]
[}, StaticScope, <, ConcreteType, >, getScope, (, ), {, return, null, ;, }, ConcreteType, unionWith, (, ConcreteType, other, ), {]
[}, StaticScope, <, ConcreteType, >, getScope, (, ), {, return, null, ;, }, ConcreteType, unionWith, (, ConcreteType, other, ), {]
[>, getScope, (, ), {, return, null, ;, }, ConcreteType, unionWith, (, ConcreteType, other, ), {, Preconditions, ., checkState, (]
[>, getScope, (, ), {, return, null, ;, }, ConcreteType, unionWith, (, ConcreteType, other, ), {, Preconditions, ., checkState, (]
[ConcreteType, unionWith, (, ConcreteType, other, ), {, Preconditions, ., checkState, (, this, ., isSingleton, (, ), ), ;, if, (]
[unionWith, (, ConcreteType, other, ), {, Preconditions, ., checkState, (, this, ., isSingleton, (, ), ), ;, if, (, !]
[unionWith, (, ConcreteType, other, ), {, Preconditions, ., checkState, (, this, ., isSingleton, (, ), ), ;, if, (, !]
[checkState, (, this, ., isSingleton, (, ), ), ;, if, (, !, other, ., isSingleton, (, ), ), {, return]
[checkState, (, this, ., isSingleton, (, ), ), ;, if, (, !, other, ., isSingleton, (, ), ), {, return]
[isSingleton, (, ), ), ;, if, (, !, other, ., isSingleton, (, ), ), {, return, other, ., unionWith, (]
[!, other, ., isSingleton, (, ), ), {, return, other, ., unionWith, (, this, ), ;, }, else, if, (]
[., isSingleton, (, ), ), {, return, other, ., unionWith, (, this, ), ;, }, else, if, (, equals, (]
[{, return, other, ., unionWith, (, this, ), ;, }, else, if, (, equals, (, other, ), ), {, return]
[this, ), ;, }, else, if, (, equals, (, other, ), ), {, return, this, ;, }, else, {, return]
[}, else, if, (, equals, (, other, ), ), {, return, this, ;, }, else, {, return, new, ConcreteUnionType, (]
[if, (, equals, (, other, ), ), {, return, this, ;, }, else, {, return, new, ConcreteUnionType, (, this, ,]
[return, new, ConcreteUnionType, (, this, ,, other, ), ;, }, }, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (]
[new, ConcreteUnionType, (, this, ,, other, ), ;, }, }, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (, !]
[new, ConcreteUnionType, (, this, ,, other, ), ;, }, }, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (, !]
[}, }, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (, !, other, ., isSingleton, (, ), ), {, return]
[}, }, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (, !, other, ., isSingleton, (, ), ), {, return]
[(, ConcreteType, other, ), {, if, (, !, other, ., isSingleton, (, ), ), {, return, other, ., intersectWith, (]
[!, other, ., isSingleton, (, ), ), {, return, other, ., intersectWith, (, this, ), ;, }, else, if, (]
[., isSingleton, (, ), ), {, return, other, ., intersectWith, (, this, ), ;, }, else, if, (, equals, (]
[{, return, other, ., intersectWith, (, this, ), ;, }, else, if, (, equals, (, other, ), ), {, return]
[this, ), ;, }, else, if, (, equals, (, other, ), ), {, return, this, ;, }, else, {, return]
[private, <, C, >, List, <, C, >, getMatchingTypes, (, TypeFilter, <, C, >, filter, ), {, C, type, =]
[List, <, C, >, getMatchingTypes, (, TypeFilter, <, C, >, filter, ), {, C, type, =, null, ;, if, (]
[), {, C, type, =, null, ;, if, (, isUnion, (, ), ), {, List, <, C, >, list, =]
[), {, C, type, =, null, ;, if, (, isUnion, (, ), ), {, List, <, C, >, list, =]
[), ), {, List, <, C, >, list, =, Lists, ., newArrayList, (, ), ;, for, (, ConcreteType, alt, :]
[), ), {, List, <, C, >, list, =, Lists, ., newArrayList, (, ), ;, for, (, ConcreteType, alt, :]
[newArrayList, (, ), ;, for, (, ConcreteType, alt, :, toUnion, (, ), ., getAlternatives, (, ), ), {, if, (]
[newArrayList, (, ), ;, for, (, ConcreteType, alt, :, toUnion, (, ), ., getAlternatives, (, ), ), {, if, (]
[(, ), ;, for, (, ConcreteType, alt, :, toUnion, (, ), ., getAlternatives, (, ), ), {, if, (, (]
[;, for, (, ConcreteType, alt, :, toUnion, (, ), ., getAlternatives, (, ), ), {, if, (, (, type, =]
[;, for, (, ConcreteType, alt, :, toUnion, (, ), ., getAlternatives, (, ), ), {, if, (, (, type, =]
[alt, :, toUnion, (, ), ., getAlternatives, (, ), ), {, if, (, (, type, =, filter, ., filter, (]
[), ., getAlternatives, (, ), ), {, if, (, (, type, =, filter, ., filter, (, alt, ), ), !=]
[(, ), ), {, if, (, (, type, =, filter, ., filter, (, alt, ), ), !=, null, ), {]
[(, ), ), {, if, (, (, type, =, filter, ., filter, (, alt, ), ), !=, null, ), {]
[if, (, (, type, =, filter, ., filter, (, alt, ), ), !=, null, ), {, list, ., add, (]
[., filter, (, alt, ), ), !=, null, ), {, list, ., add, (, type, ), ;, }, }, return]
[!=, null, ), {, list, ., add, (, type, ), ;, }, }, return, list, ;, }, else, if, (]
[!=, null, ), {, list, ., add, (, type, ), ;, }, }, return, list, ;, }, else, if, (]
[null, ), {, list, ., add, (, type, ), ;, }, }, return, list, ;, }, else, if, (, (]
[{, list, ., add, (, type, ), ;, }, }, return, list, ;, }, else, if, (, (, type, =]
[{, list, ., add, (, type, ), ;, }, }, return, list, ;, }, else, if, (, (, type, =]
[(, type, ), ;, }, }, return, list, ;, }, else, if, (, (, type, =, filter, ., filter, (]
[}, }, return, list, ;, }, else, if, (, (, type, =, filter, ., filter, (, this, ), ), !=]
[(, type, =, filter, ., filter, (, this, ), ), !=, null, ), {, List, <, C, >, list, =]
[(, type, =, filter, ., filter, (, this, ), ), !=, null, ), {, List, <, C, >, list, =]
[(, this, ), ), !=, null, ), {, List, <, C, >, list, =, Lists, ., newArrayList, (, ), ;]
[(, this, ), ), !=, null, ), {, List, <, C, >, list, =, Lists, ., newArrayList, (, ), ;]
[!=, null, ), {, List, <, C, >, list, =, Lists, ., newArrayList, (, ), ;, list, ., add, (]
[List, <, C, >, list, =, Lists, ., newArrayList, (, ), ;, list, ., add, (, type, ), ;, return]
[Lists, ., newArrayList, (, ), ;, list, ., add, (, type, ), ;, return, list, ;, }, else, {, return]
[Lists, ., newArrayList, (, ), ;, list, ., add, (, type, ), ;, return, list, ;, }, else, {, return]
[<, C, >, {, final, List, <, C, >, emptyList, ;, TypeFilter, (, List, <, C, >, emptyList, ), {]
[<, C, >, {, final, List, <, C, >, emptyList, ;, TypeFilter, (, List, <, C, >, emptyList, ), {]
[final, List, <, C, >, emptyList, ;, TypeFilter, (, List, <, C, >, emptyList, ), {, this, ., emptyList, =]
[}, abstract, protected, C, filter, (, ConcreteType, type, ), ;, }, List, <, ConcreteFunctionType, >, getFunctions, (, ), {, return]
[protected, C, filter, (, ConcreteType, type, ), ;, }, List, <, ConcreteFunctionType, >, getFunctions, (, ), {, return, getMatchingTypes, (]
[), ;, }, List, <, ConcreteFunctionType, >, getFunctions, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <, ConcreteFunctionType, >, (]
[new, TypeFilter, <, ConcreteFunctionType, >, (, NO_FUNCTIONS, ), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return]
[new, TypeFilter, <, ConcreteFunctionType, >, (, NO_FUNCTIONS, ), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return]
[new, TypeFilter, <, ConcreteFunctionType, >, (, NO_FUNCTIONS, ), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return]
[NO_FUNCTIONS, ), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (, ), ?]
[NO_FUNCTIONS, ), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (, ), ?]
[ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (, ), ?, type, ., toFunction, (, ), :]
[toFunction, (, ), :, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getInstances, (, ), {, return]
[), :, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getInstances, (, ), {, return, getMatchingTypes, (]
[), ;, }, List, <, ConcreteInstanceType, >, getInstances, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <, ConcreteInstanceType, >, (]
[new, TypeFilter, <, ConcreteInstanceType, >, (, NO_INSTANCES, ), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, return]
[new, TypeFilter, <, ConcreteInstanceType, >, (, NO_INSTANCES, ), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, return]
[new, TypeFilter, <, ConcreteInstanceType, >, (, NO_INSTANCES, ), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, return]
[NO_INSTANCES, ), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, return, type, ., isInstance, (, ), ?]
[NO_INSTANCES, ), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, return, type, ., isInstance, (, ), ?]
[ConcreteInstanceType, filter, (, ConcreteType, type, ), {, return, type, ., isInstance, (, ), ?, type, ., toInstance, (, ), :]
[toInstance, (, ), :, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getFunctionInstanceTypes, (, ), {, return]
[), :, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getFunctionInstanceTypes, (, ), {, return, getMatchingTypes, (]
[), ;, }, List, <, ConcreteInstanceType, >, getFunctionInstanceTypes, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <, ConcreteInstanceType, >, (]
[TypeFilter, <, ConcreteInstanceType, >, (, NO_INSTANCES, ), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, if, (]
[TypeFilter, <, ConcreteInstanceType, >, (, NO_INSTANCES, ), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, if, (]
[@, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, if, (, type, ., isFunction, (, ), ), {, return]
[@, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, if, (, type, ., isFunction, (, ), ), {, return]
[@, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, if, (, type, ., isFunction, (, ), ), {, return]
[type, ., isFunction, (, ), ), {, return, type, ., toFunction, (, ), ., getInstanceType, (, ), ;, }, return]
[), ;, }, return, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getPrototypeTypes, (, ), {, return]
[}, return, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getPrototypeTypes, (, ), {, return, getMatchingTypes, (]
[), ;, }, List, <, ConcreteInstanceType, >, getPrototypeTypes, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <, ConcreteInstanceType, >, (]
[TypeFilter, <, ConcreteInstanceType, >, (, NO_INSTANCES, ), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, if, (]
[TypeFilter, <, ConcreteInstanceType, >, (, NO_INSTANCES, ), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, if, (]
[TypeFilter, <, ConcreteInstanceType, >, (, NO_INSTANCES, ), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, if, (]
[), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, if, (, type, ., isInstance, (, ), &&]
[), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, if, (, type, ., isInstance, (, ), &&]
[), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, if, (, type, ., isInstance, (, ), &&]
[if, (, type, ., isInstance, (, ), &&, type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ), {, return]
[if, (, type, ., isInstance, (, ), &&, type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ), {, return]
[type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ), {, return, type, ., toInstance, (, ), ;, }, return]
[), ;, }, return, null, ;, }, }, ), ;, }, List, <, ConcreteFunctionType, >, getSuperclassTypes, (, ), {, return]
[}, return, null, ;, }, }, ), ;, }, List, <, ConcreteFunctionType, >, getSuperclassTypes, (, ), {, return, getMatchingTypes, (]
[), ;, }, List, <, ConcreteFunctionType, >, getSuperclassTypes, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <, ConcreteFunctionType, >, (]
[new, TypeFilter, <, ConcreteFunctionType, >, (, NO_FUNCTIONS, ), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return]
[new, TypeFilter, <, ConcreteFunctionType, >, (, NO_FUNCTIONS, ), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return]
[new, TypeFilter, <, ConcreteFunctionType, >, (, NO_FUNCTIONS, ), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return]
[new, TypeFilter, <, ConcreteFunctionType, >, (, NO_FUNCTIONS, ), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return]
[NO_FUNCTIONS, ), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (, ), &&]
[NO_FUNCTIONS, ), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (, ), &&]
[NO_FUNCTIONS, ), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (, ), &&]
[NO_FUNCTIONS, ), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (, ), &&]
[type, ), {, return, type, ., isFunction, (, ), &&, type, ., toFunction, (, ), ., getSuperclassType, (, ), !=]
[{, return, type, ., isFunction, (, ), &&, type, ., toFunction, (, ), ., getSuperclassType, (, ), !=, null, ?]
[{, return, type, ., isFunction, (, ), &&, type, ., toFunction, (, ), ., getSuperclassType, (, ), !=, null, ?]
[{, return, type, ., isFunction, (, ), &&, type, ., toFunction, (, ), ., getSuperclassType, (, ), !=, null, ?]
[toFunction, (, ), ., getSuperclassType, (, ), !=, null, ?, type, ., toFunction, (, ), ., getSuperclassType, (, ), :]
[}, }, ), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getParameterSlots, (, final, int, index, ), {, return]
[), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getParameterSlots, (, final, int, index, ), {, return, getMatchingTypes, (]
[>, getParameterSlots, (, final, int, index, ), {, return, getMatchingTypes, (, new, TypeFilter, <, StaticSlot, <, ConcreteType, >, >, (]
[>, >, (, NO_SLOTS, ), {, @, Override, public, StaticSlot, <, ConcreteType, >, filter, (, ConcreteType, type, ), {, return]
[>, >, (, NO_SLOTS, ), {, @, Override, public, StaticSlot, <, ConcreteType, >, filter, (, ConcreteType, type, ), {, return]
[>, >, (, NO_SLOTS, ), {, @, Override, public, StaticSlot, <, ConcreteType, >, filter, (, ConcreteType, type, ), {, return]
[>, >, (, NO_SLOTS, ), {, @, Override, public, StaticSlot, <, ConcreteType, >, filter, (, ConcreteType, type, ), {, return]
[@, Override, public, StaticSlot, <, ConcreteType, >, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (, ), &&]
[@, Override, public, StaticSlot, <, ConcreteType, >, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (, ), &&]
[@, Override, public, StaticSlot, <, ConcreteType, >, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (, ), &&]
[>, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (, ), &&, toFunction, (, ), ., getParameterSlot, (]
[ConcreteType, type, ), {, return, type, ., isFunction, (, ), &&, toFunction, (, ), ., getParameterSlot, (, index, ), !=]
[), {, return, type, ., isFunction, (, ), &&, toFunction, (, ), ., getParameterSlot, (, index, ), !=, null, ?]
[), {, return, type, ., isFunction, (, ), &&, toFunction, (, ), ., getParameterSlot, (, index, ), !=, null, ?]
[(, ), &&, toFunction, (, ), ., getParameterSlot, (, index, ), !=, null, ?, toFunction, (, ), ., getParameterSlot, (]
[toFunction, (, ), ., getParameterSlot, (, index, ), !=, null, ?, toFunction, (, ), ., getParameterSlot, (, index, ), :]
[}, }, ), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getPropertySlots, (, final, String, name, ), {, return]
[), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getPropertySlots, (, final, String, name, ), {, return, getMatchingTypes, (]
[>, getPropertySlots, (, final, String, name, ), {, return, getMatchingTypes, (, new, TypeFilter, <, StaticSlot, <, ConcreteType, >, >, (]
[{, @, Override, public, StaticSlot, <, ConcreteType, >, filter, (, ConcreteType, type, ), {, StaticSlot, <, ConcreteType, >, slot, =]
[StaticSlot, <, ConcreteType, >, filter, (, ConcreteType, type, ), {, StaticSlot, <, ConcreteType, >, slot, =, null, ;, if, (]
[StaticSlot, <, ConcreteType, >, filter, (, ConcreteType, type, ), {, StaticSlot, <, ConcreteType, >, slot, =, null, ;, if, (]
[type, ), {, StaticSlot, <, ConcreteType, >, slot, =, null, ;, if, (, type, ., isInstance, (, ), ), {]
[{, StaticSlot, <, ConcreteType, >, slot, =, null, ;, if, (, type, ., isInstance, (, ), ), {, slot, =]
[{, StaticSlot, <, ConcreteType, >, slot, =, null, ;, if, (, type, ., isInstance, (, ), ), {, slot, =]
[{, StaticSlot, <, ConcreteType, >, slot, =, null, ;, if, (, type, ., isInstance, (, ), ), {, slot, =]
[;, if, (, type, ., isInstance, (, ), ), {, slot, =, type, ., toInstance, (, ), ., getPropertySlot, (]
[isInstance, (, ), ), {, slot, =, type, ., toInstance, (, ), ., getPropertySlot, (, name, ), ;, }, return]
[}, return, slot, ;, }, }, ), ;, }, ConcreteType, getPropertyType, (, final, String, name, ), {, ConcreteType, ret, =]
[getPropertyType, (, final, String, name, ), {, ConcreteType, ret, =, NONE, ;, for, (, StaticSlot, <, ConcreteType, >, slot, :]
[final, String, name, ), {, ConcreteType, ret, =, NONE, ;, for, (, StaticSlot, <, ConcreteType, >, slot, :, getPropertySlots, (]
[{, ConcreteType, ret, =, NONE, ;, for, (, StaticSlot, <, ConcreteType, >, slot, :, getPropertySlots, (, name, ), ), {]
[ret, =, NONE, ;, for, (, StaticSlot, <, ConcreteType, >, slot, :, getPropertySlots, (, name, ), ), {, ret, =]
[ret, =, NONE, ;, for, (, StaticSlot, <, ConcreteType, >, slot, :, getPropertySlots, (, name, ), ), {, ret, =]
[for, (, StaticSlot, <, ConcreteType, >, slot, :, getPropertySlots, (, name, ), ), {, ret, =, ret, ., unionWith, (]
[for, (, StaticSlot, <, ConcreteType, >, slot, :, getPropertySlots, (, name, ), ), {, ret, =, ret, ., unionWith, (]
[(, name, ), ), {, ret, =, ret, ., unionWith, (, slot, ., getType, (, ), ), ;, }, return]
[}, return, ret, ;, }, private, static, class, ConcreteNoneType, extends, ConcreteType, {, @, Override, boolean, isNone, (, ), {, return]
[Override, boolean, isNone, (, ), {, return, true, ;, }, @, Override, ConcreteType, unionWith, (, ConcreteType, other, ), {, return]
[unionWith, (, ConcreteType, other, ), {, return, other, ;, }, @, Override, ConcreteType, intersectWith, (, ConcreteType, other, ), {, return]
[ConcreteType, intersectWith, (, ConcreteType, other, ), {, return, NONE, ;, }, @, Override, public, String, toString, (, ), {, return]
[toString, (, ), {, return, "()", ;, }, }, static, class, ConcreteFunctionType, extends, ConcreteType, {, static, final, String, CALL_SLOT_NAME, =]
[}, }, static, class, ConcreteFunctionType, extends, ConcreteType, {, static, final, String, CALL_SLOT_NAME, =, ":call", ;, static, final, String, THIS_SLOT_NAME, =]
[{, static, final, String, CALL_SLOT_NAME, =, ":call", ;, static, final, String, THIS_SLOT_NAME, =, ":this", ;, static, final, String, RETURN_SLOT_NAME, =]
[;, private, ConcreteInstanceType, prototypeType, ;, ConcreteFunctionType, (, Factory, factory, ,, Node, declaration, ,, StaticScope, <, ConcreteType, >, parentScope, ), {]
[;, private, ConcreteInstanceType, prototypeType, ;, ConcreteFunctionType, (, Factory, factory, ,, Node, declaration, ,, StaticScope, <, ConcreteType, >, parentScope, ), {]
[;, ConcreteFunctionType, (, Factory, factory, ,, Node, declaration, ,, StaticScope, <, ConcreteType, >, parentScope, ), {, this, ., factory, =]
[(, Factory, factory, ,, Node, declaration, ,, StaticScope, <, ConcreteType, >, parentScope, ), {, this, ., factory, =, factory, ;]
[(, Factory, factory, ,, Node, declaration, ,, StaticScope, <, ConcreteType, >, parentScope, ), {, this, ., factory, =, factory, ;]
[Node, declaration, ,, StaticScope, <, ConcreteType, >, parentScope, ), {, this, ., factory, =, factory, ;, this, ., declaration, =]
[,, StaticScope, <, ConcreteType, >, parentScope, ), {, this, ., factory, =, factory, ;, this, ., declaration, =, declaration, ;]
[,, StaticScope, <, ConcreteType, >, parentScope, ), {, this, ., factory, =, factory, ;, this, ., declaration, =, declaration, ;]
[>, parentScope, ), {, this, ., factory, =, factory, ;, this, ., declaration, =, declaration, ;, this, ., parentScope, =]
[), {, this, ., factory, =, factory, ;, this, ., declaration, =, declaration, ;, this, ., parentScope, =, parentScope, ;]
[), {, this, ., factory, =, factory, ;, this, ., declaration, =, declaration, ;, this, ., parentScope, =, parentScope, ;]
[factory, =, factory, ;, this, ., declaration, =, declaration, ;, this, ., parentScope, =, parentScope, ;, Preconditions, ., checkArgument, (]
[factory, =, factory, ;, this, ., declaration, =, declaration, ;, this, ., parentScope, =, parentScope, ;, Preconditions, ., checkArgument, (]
[=, declaration, ;, this, ., parentScope, =, parentScope, ;, Preconditions, ., checkArgument, (, declaration, ., isFunction, (, ), ), ;]
[=, declaration, ;, this, ., parentScope, =, parentScope, ;, Preconditions, ., checkArgument, (, declaration, ., isFunction, (, ), ), ;]
[., parentScope, =, parentScope, ;, Preconditions, ., checkArgument, (, declaration, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (]
[., parentScope, =, parentScope, ;, Preconditions, ., checkArgument, (, declaration, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (]
[., parentScope, =, parentScope, ;, Preconditions, ., checkArgument, (, declaration, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, declaration, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), !=]
[declaration, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), !=, null, ), ;]
[declaration, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), !=, null, ), ;]
[), ), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), !=, null, ), ;, Preconditions, ., checkArgument, (]
[), ), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), !=, null, ), ;, Preconditions, ., checkArgument, (]
[), ), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), !=, null, ), ;, Preconditions, ., checkArgument, (]
[declaration, ., getJSType, (, ), ., isFunctionType, (, ), ), ;, }, @, Override, boolean, isFunction, (, ), {, return]
[}, @, Override, boolean, isFunction, (, ), {, return, true, ;, }, @, Override, ConcreteFunctionType, toFunction, (, ), {, return]
[@, Override, ConcreteFunctionType, toFunction, (, ), {, return, this, ;, }, StaticSlot, <, ConcreteType, >, getCallSlot, (, ), {, return]
[@, Override, ConcreteFunctionType, toFunction, (, ), {, return, this, ;, }, StaticSlot, <, ConcreteType, >, getCallSlot, (, ), {, return]
[{, return, this, ;, }, StaticSlot, <, ConcreteType, >, getCallSlot, (, ), {, return, getScope, (, ), ., getOwnSlot, (]
[return, getScope, (, ), ., getOwnSlot, (, CALL_SLOT_NAME, ), ;, }, StaticSlot, <, ConcreteType, >, getThisSlot, (, ), {, return]
[return, getScope, (, ), ., getOwnSlot, (, CALL_SLOT_NAME, ), ;, }, StaticSlot, <, ConcreteType, >, getThisSlot, (, ), {, return]
[(, CALL_SLOT_NAME, ), ;, }, StaticSlot, <, ConcreteType, >, getThisSlot, (, ), {, return, getScope, (, ), ., getOwnSlot, (]
[return, getScope, (, ), ., getOwnSlot, (, THIS_SLOT_NAME, ), ;, }, StaticSlot, <, ConcreteType, >, getReturnSlot, (, ), {, return]
[return, getScope, (, ), ., getOwnSlot, (, THIS_SLOT_NAME, ), ;, }, StaticSlot, <, ConcreteType, >, getReturnSlot, (, ), {, return]
[(, THIS_SLOT_NAME, ), ;, }, StaticSlot, <, ConcreteType, >, getReturnSlot, (, ), {, return, getScope, (, ), ., getOwnSlot, (]
[(, ), ., getOwnSlot, (, RETURN_SLOT_NAME, ), ;, }, StaticSlot, <, ConcreteType, >, getParameterSlot, (, int, index, ), {, return]
[(, ), ., getOwnSlot, (, RETURN_SLOT_NAME, ), ;, }, StaticSlot, <, ConcreteType, >, getParameterSlot, (, int, index, ), {, return]
[), ;, }, StaticSlot, <, ConcreteType, >, getParameterSlot, (, int, index, ), {, return, getScope, (, ), ., getOwnSlot, (]
[}, StaticSlot, <, ConcreteType, >, getParameterSlot, (, int, index, ), {, return, getScope, (, ), ., getOwnSlot, (, getParameterName, (]
[getOwnSlot, (, getParameterName, (, index, ), ), ;, }, private, String, getParameterName, (, int, index, ), {, int, count, =]
[;, }, private, String, getParameterName, (, int, index, ), {, int, count, =, 0, ;, for, (, Node, n, =]
[getParameterName, (, int, index, ), {, int, count, =, 0, ;, for, (, Node, n, =, getFirstParameter, (, ), ;]
[getParameterName, (, int, index, ), {, int, count, =, 0, ;, for, (, Node, n, =, getFirstParameter, (, ), ;]
[int, index, ), {, int, count, =, 0, ;, for, (, Node, n, =, getFirstParameter, (, ), ;, n, !=]
[), {, int, count, =, 0, ;, for, (, Node, n, =, getFirstParameter, (, ), ;, n, !=, null, ;]
[int, count, =, 0, ;, for, (, Node, n, =, getFirstParameter, (, ), ;, n, !=, null, ;, n, =]
[int, count, =, 0, ;, for, (, Node, n, =, getFirstParameter, (, ), ;, n, !=, null, ;, n, =]
[=, getFirstParameter, (, ), ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (]
[=, getFirstParameter, (, ), ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (]
[=, getFirstParameter, (, ), ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (]
[), ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (, count, ++, ==]
[null, ;, n, =, n, ., getNext, (, ), ), {, if, (, count, ++, ==, index, ), {, return]
[null, ;, n, =, n, ., getNext, (, ), ), {, if, (, count, ++, ==, index, ), {, return]
[), {, if, (, count, ++, ==, index, ), {, return, n, ., getString, (, ), ;, }, }, return]
[return, n, ., getString, (, ), ;, }, }, return, null, ;, }, private, Node, getFirstParameter, (, ), {, return]
[return, n, ., getString, (, ), ;, }, }, return, null, ;, }, private, Node, getFirstParameter, (, ), {, return]
[return, n, ., getString, (, ), ;, }, }, return, null, ;, }, private, Node, getFirstParameter, (, ), {, return]
[return, n, ., getString, (, ), ;, }, }, return, null, ;, }, private, Node, getFirstParameter, (, ), {, return]
[getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, }, public, FunctionType, getJSType, (, ), {, return]
[getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, }, public, FunctionType, getJSType, (, ), {, return]
[getNext, (, ), ., getFirstChild, (, ), ;, }, public, FunctionType, getJSType, (, ), {, return, JSType, ., toMaybeFunctionType, (]
[getNext, (, ), ., getFirstChild, (, ), ;, }, public, FunctionType, getJSType, (, ), {, return, JSType, ., toMaybeFunctionType, (]
[return, JSType, ., toMaybeFunctionType, (, declaration, ., getJSType, (, ), ), ;, }, ConcreteInstanceType, getInstanceType, (, ), {, if, (]
[return, JSType, ., toMaybeFunctionType, (, declaration, ., getJSType, (, ), ), ;, }, ConcreteInstanceType, getInstanceType, (, ), {, if, (]
[., toMaybeFunctionType, (, declaration, ., getJSType, (, ), ), ;, }, ConcreteInstanceType, getInstanceType, (, ), {, if, (, instanceType, ==]
[getJSType, (, ), ), ;, }, ConcreteInstanceType, getInstanceType, (, ), {, if, (, instanceType, ==, null, ), {, if, (]
[getJSType, (, ), ), ;, }, ConcreteInstanceType, getInstanceType, (, ), {, if, (, instanceType, ==, null, ), {, if, (]
[), {, if, (, instanceType, ==, null, ), {, if, (, getJSType, (, ), ., isConstructor, (, ), ), {]
[if, (, instanceType, ==, null, ), {, if, (, getJSType, (, ), ., isConstructor, (, ), ), {, instanceType, =]
[if, (, instanceType, ==, null, ), {, if, (, getJSType, (, ), ., isConstructor, (, ), ), {, instanceType, =]
[null, ), {, if, (, getJSType, (, ), ., isConstructor, (, ), ), {, instanceType, =, factory, ., createConcreteInstance, (]
[null, ), {, if, (, getJSType, (, ), ., isConstructor, (, ), ), {, instanceType, =, factory, ., createConcreteInstance, (]
[), {, instanceType, =, factory, ., createConcreteInstance, (, getJSType, (, ), ., getInstanceType, (, ), ), ;, }, }, return]
[), ., getInstanceType, (, ), ), ;, }, }, return, instanceType, ;, }, ConcreteInstanceType, getPrototypeType, (, ), {, if, (]
[), ., getInstanceType, (, ), ), ;, }, }, return, instanceType, ;, }, ConcreteInstanceType, getPrototypeType, (, ), {, if, (]
[getInstanceType, (, ), ), ;, }, }, return, instanceType, ;, }, ConcreteInstanceType, getPrototypeType, (, ), {, if, (, prototypeType, ==]
[), ;, }, }, return, instanceType, ;, }, ConcreteInstanceType, getPrototypeType, (, ), {, if, (, prototypeType, ==, null, ), {]
[}, }, return, instanceType, ;, }, ConcreteInstanceType, getPrototypeType, (, ), {, if, (, prototypeType, ==, null, ), {, prototypeType, =]
[}, }, return, instanceType, ;, }, ConcreteInstanceType, getPrototypeType, (, ), {, if, (, prototypeType, ==, null, ), {, prototypeType, =]
[;, }, ConcreteInstanceType, getPrototypeType, (, ), {, if, (, prototypeType, ==, null, ), {, prototypeType, =, factory, ., createConcreteInstance, (]
[;, }, ConcreteInstanceType, getPrototypeType, (, ), {, if, (, prototypeType, ==, null, ), {, prototypeType, =, factory, ., createConcreteInstance, (]
[null, ), {, prototypeType, =, factory, ., createConcreteInstance, (, getJSType, (, ), ., getPrototype, (, ), ), ;, }, return]
[), ., getPrototype, (, ), ), ;, }, return, prototypeType, ;, }, ConcreteFunctionType, getSuperclassType, (, ), {, FunctionType, superConstructor, =]
[), ., getPrototype, (, ), ), ;, }, return, prototypeType, ;, }, ConcreteFunctionType, getSuperclassType, (, ), {, FunctionType, superConstructor, =]
[prototypeType, ;, }, ConcreteFunctionType, getSuperclassType, (, ), {, FunctionType, superConstructor, =, getJSType, (, ), ., getSuperClassConstructor, (, ), ;, return]
[prototypeType, ;, }, ConcreteFunctionType, getSuperclassType, (, ), {, FunctionType, superConstructor, =, getJSType, (, ), ., getSuperClassConstructor, (, ), ;, return]
[;, }, ConcreteFunctionType, getSuperclassType, (, ), {, FunctionType, superConstructor, =, getJSType, (, ), ., getSuperClassConstructor, (, ), ;, return, (]
[;, }, ConcreteFunctionType, getSuperclassType, (, ), {, FunctionType, superConstructor, =, getJSType, (, ), ., getSuperClassConstructor, (, ), ;, return, (]
[ConcreteFunctionType, getSuperclassType, (, ), {, FunctionType, superConstructor, =, getJSType, (, ), ., getSuperClassConstructor, (, ), ;, return, (, superConstructor, !=]
[), {, FunctionType, superConstructor, =, getJSType, (, ), ., getSuperClassConstructor, (, ), ;, return, (, superConstructor, !=, null, ), ?]
[), {, FunctionType, superConstructor, =, getJSType, (, ), ., getSuperClassConstructor, (, ), ;, return, (, superConstructor, !=, null, ), ?]
[=, getJSType, (, ), ., getSuperClassConstructor, (, ), ;, return, (, superConstructor, !=, null, ), ?, factory, ., getConcreteFunction, (]
[), ., getSuperClassConstructor, (, ), ;, return, (, superConstructor, !=, null, ), ?, factory, ., getConcreteFunction, (, superConstructor, ), :]
[getConcreteFunction, (, superConstructor, ), :, null, ;, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (]
[getConcreteFunction, (, superConstructor, ), :, null, ;, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (]
[superConstructor, ), :, null, ;, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, bodyScope, ==]
[null, ;, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, bodyScope, ==, null, ), {]
[}, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, bodyScope, ==, null, ), {, bodyScope, =]
[}, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, bodyScope, ==, null, ), {, bodyScope, =]
[<, ConcreteType, >, getScope, (, ), {, if, (, bodyScope, ==, null, ), {, bodyScope, =, factory, ., createFunctionScope, (]
[>, getScope, (, ), {, if, (, bodyScope, ==, null, ), {, bodyScope, =, factory, ., createFunctionScope, (, declaration, ,]
[if, (, bodyScope, ==, null, ), {, bodyScope, =, factory, ., createFunctionScope, (, declaration, ,, parentScope, ), ;, }, return]
[,, parentScope, ), ;, }, return, bodyScope, ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, b, =]
[;, }, return, bodyScope, ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, b, =, new, StringBuilder, (]
[bodyScope, ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;]
[bodyScope, ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;]
[Override, public, String, toString, (, ), {, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b, ., append, (]
[{, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b, ., append, (, "function (", ), ;, boolean, hasKnownTypeOfThis, =]
[StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b, ., append, (, "function (", ), ;, boolean, hasKnownTypeOfThis, =, !]
[StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b, ., append, (, "function (", ), ;, boolean, hasKnownTypeOfThis, =, !]
[StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b, ., append, (, "function (", ), ;, boolean, hasKnownTypeOfThis, =, !]
[), ;, boolean, hasKnownTypeOfThis, =, !, getThisSlot, (, ), ., getType, (, ), ., isNone, (, ), ;, if, (]
[hasKnownTypeOfThis, =, !, getThisSlot, (, ), ., getType, (, ), ., isNone, (, ), ;, if, (, hasKnownTypeOfThis, ), {]
[hasKnownTypeOfThis, =, !, getThisSlot, (, ), ., getType, (, ), ., isNone, (, ), ;, if, (, hasKnownTypeOfThis, ), {]
[(, ), ., getType, (, ), ., isNone, (, ), ;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (]
[getType, (, ), ., isNone, (, ), ;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, "this:", ), ;]
[getType, (, ), ., isNone, (, ), ;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, "this:", ), ;]
[isNone, (, ), ;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, "this:", ), ;, b, ., append, (]
[isNone, (, ), ;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, "this:", ), ;, b, ., append, (]
[isNone, (, ), ;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, "this:", ), ;, b, ., append, (]
[., append, (, getThisSlot, (, ), ., getType, (, ), ., toString, (, ), ), ;, }, Node, n, =]
[., getType, (, ), ., toString, (, ), ), ;, }, Node, n, =, getFirstParameter, (, ), ;, if, (]
[., getType, (, ), ., toString, (, ), ), ;, }, Node, n, =, getFirstParameter, (, ), ;, if, (]
[(, ), ., toString, (, ), ), ;, }, Node, n, =, getFirstParameter, (, ), ;, if, (, hasKnownTypeOfThis, &&]
[(, ), ., toString, (, ), ), ;, }, Node, n, =, getFirstParameter, (, ), ;, if, (, hasKnownTypeOfThis, &&]
[., toString, (, ), ), ;, }, Node, n, =, getFirstParameter, (, ), ;, if, (, hasKnownTypeOfThis, &&, n, !=]
[), ), ;, }, Node, n, =, getFirstParameter, (, ), ;, if, (, hasKnownTypeOfThis, &&, n, !=, null, ), {]
[), ), ;, }, Node, n, =, getFirstParameter, (, ), ;, if, (, hasKnownTypeOfThis, &&, n, !=, null, ), {]
[Node, n, =, getFirstParameter, (, ), ;, if, (, hasKnownTypeOfThis, &&, n, !=, null, ), {, b, ., append, (]
[hasKnownTypeOfThis, &&, n, !=, null, ), {, b, ., append, (, ", ", ), ;, }, for, (, int, i, =]
[n, !=, null, ), {, b, ., append, (, ", ", ), ;, }, for, (, int, i, =, 0, ;]
[n, !=, null, ), {, b, ., append, (, ", ", ), ;, }, for, (, int, i, =, 0, ;]
[null, ), {, b, ., append, (, ", ", ), ;, }, for, (, int, i, =, 0, ;, n, !=]
[{, b, ., append, (, ", ", ), ;, }, for, (, int, i, =, 0, ;, n, !=, null, ;]
[b, ., append, (, ", ", ), ;, }, for, (, int, i, =, 0, ;, n, !=, null, ;, ++]
[append, (, ", ", ), ;, }, for, (, int, i, =, 0, ;, n, !=, null, ;, ++, i, ,]
[", ", ), ;, }, for, (, int, i, =, 0, ;, n, !=, null, ;, ++, i, ,, n, =]
[", ", ), ;, }, for, (, int, i, =, 0, ;, n, !=, null, ;, ++, i, ,, n, =]
[;, n, !=, null, ;, ++, i, ,, n, =, n, ., getNext, (, ), ), {, String, paramName, =]
[;, n, !=, null, ;, ++, i, ,, n, =, n, ., getNext, (, ), ), {, String, paramName, =]
[getNext, (, ), ), {, String, paramName, =, n, ., getString, (, ), ;, StaticSlot, <, ConcreteType, >, var, =]
[getNext, (, ), ), {, String, paramName, =, n, ., getString, (, ), ;, StaticSlot, <, ConcreteType, >, var, =]
[paramName, =, n, ., getString, (, ), ;, StaticSlot, <, ConcreteType, >, var, =, getScope, (, ), ., getOwnSlot, (]
[., getString, (, ), ;, StaticSlot, <, ConcreteType, >, var, =, getScope, (, ), ., getOwnSlot, (, paramName, ), ;]
[., getString, (, ), ;, StaticSlot, <, ConcreteType, >, var, =, getScope, (, ), ., getOwnSlot, (, paramName, ), ;]
[;, StaticSlot, <, ConcreteType, >, var, =, getScope, (, ), ., getOwnSlot, (, paramName, ), ;, b, ., append, (]
[;, StaticSlot, <, ConcreteType, >, var, =, getScope, (, ), ., getOwnSlot, (, paramName, ), ;, b, ., append, (]
[getScope, (, ), ., getOwnSlot, (, paramName, ), ;, b, ., append, (, var, ., getType, (, ), ), ;]
[getScope, (, ), ., getOwnSlot, (, paramName, ), ;, b, ., append, (, var, ., getType, (, ), ), ;]
[), ., getOwnSlot, (, paramName, ), ;, b, ., append, (, var, ., getType, (, ), ), ;, getParameterSlot, (]
[append, (, var, ., getType, (, ), ), ;, getParameterSlot, (, i, ), ., getType, (, ), ;, if, (]
[append, (, var, ., getType, (, ), ), ;, getParameterSlot, (, i, ), ., getType, (, ), ;, if, (]
[append, (, var, ., getType, (, ), ), ;, getParameterSlot, (, i, ), ., getType, (, ), ;, if, (]
[), ), ;, getParameterSlot, (, i, ), ., getType, (, ), ;, if, (, n, ., getNext, (, ), !=]
[getParameterSlot, (, i, ), ., getType, (, ), ;, if, (, n, ., getNext, (, ), !=, null, ), {]
[getParameterSlot, (, i, ), ., getType, (, ), ;, if, (, n, ., getNext, (, ), !=, null, ), {]
[., getType, (, ), ;, if, (, n, ., getNext, (, ), !=, null, ), {, b, ., append, (]
[if, (, n, ., getNext, (, ), !=, null, ), {, b, ., append, (, ", ", ), ;, }, }]
[if, (, n, ., getNext, (, ), !=, null, ), {, b, ., append, (, ", ", ), ;, }, }]
[getNext, (, ), !=, null, ), {, b, ., append, (, ", ", ), ;, }, }, b, ., append, (]
[), {, b, ., append, (, ", ", ), ;, }, }, b, ., append, (, ")", ), ;, if, (]
[), {, b, ., append, (, ", ", ), ;, }, }, b, ., append, (, ")", ), ;, if, (]
[), {, b, ., append, (, ", ", ), ;, }, }, b, ., append, (, ")", ), ;, if, (]
[;, }, }, b, ., append, (, ")", ), ;, if, (, getReturnSlot, (, ), ., getType, (, ), !=]
[b, ., append, (, ")", ), ;, if, (, getReturnSlot, (, ), ., getType, (, ), !=, null, ), {]
[b, ., append, (, ")", ), ;, if, (, getReturnSlot, (, ), ., getType, (, ), !=, null, ), {]
[")", ), ;, if, (, getReturnSlot, (, ), ., getType, (, ), !=, null, ), {, b, ., append, (]
[if, (, getReturnSlot, (, ), ., getType, (, ), !=, null, ), {, b, ., append, (, ": ", ), ;]
[if, (, getReturnSlot, (, ), ., getType, (, ), !=, null, ), {, b, ., append, (, ": ", ), ;]
[), ., getType, (, ), !=, null, ), {, b, ., append, (, ": ", ), ;, b, ., append, (]
[), ., getType, (, ), !=, null, ), {, b, ., append, (, ": ", ), ;, b, ., append, (]
[), ., getType, (, ), !=, null, ), {, b, ., append, (, ": ", ), ;, b, ., append, (]
[;, b, ., append, (, getReturnSlot, (, ), ., getType, (, ), ., toString, (, ), ), ;, }, return]
[;, b, ., append, (, getReturnSlot, (, ), ., getType, (, ), ., toString, (, ), ), ;, }, return]
[private, ConcreteInstanceType, prototype, ;, private, StaticScope, <, ConcreteType, >, scope, ;, ConcreteInstanceType, (, Factory, factory, ,, ObjectType, instanceType, ), {]
[private, ConcreteInstanceType, prototype, ;, private, StaticScope, <, ConcreteType, >, scope, ;, ConcreteInstanceType, (, Factory, factory, ,, ObjectType, instanceType, ), {]
[private, StaticScope, <, ConcreteType, >, scope, ;, ConcreteInstanceType, (, Factory, factory, ,, ObjectType, instanceType, ), {, this, ., factory, =]
[<, ConcreteType, >, scope, ;, ConcreteInstanceType, (, Factory, factory, ,, ObjectType, instanceType, ), {, this, ., factory, =, factory, ;]
[<, ConcreteType, >, scope, ;, ConcreteInstanceType, (, Factory, factory, ,, ObjectType, instanceType, ), {, this, ., factory, =, factory, ;]
[;, ConcreteInstanceType, (, Factory, factory, ,, ObjectType, instanceType, ), {, this, ., factory, =, factory, ;, this, ., instanceType, =]
[(, Factory, factory, ,, ObjectType, instanceType, ), {, this, ., factory, =, factory, ;, this, ., instanceType, =, instanceType, ;]
[(, Factory, factory, ,, ObjectType, instanceType, ), {, this, ., factory, =, factory, ;, this, ., instanceType, =, instanceType, ;]
[ObjectType, instanceType, ), {, this, ., factory, =, factory, ;, this, ., instanceType, =, instanceType, ;, Preconditions, ., checkArgument, (]
[instanceType, ), {, this, ., factory, =, factory, ;, this, ., instanceType, =, instanceType, ;, Preconditions, ., checkArgument, (, !]
[), {, this, ., factory, =, factory, ;, this, ., instanceType, =, instanceType, ;, Preconditions, ., checkArgument, (, !, (]
[), {, this, ., factory, =, factory, ;, this, ., instanceType, =, instanceType, ;, Preconditions, ., checkArgument, (, !, (]
[., checkArgument, (, !, (, instanceType, instanceof, UnknownType, ), ), ;, }, @, Override, boolean, isInstance, (, ), {, return]
[}, @, Override, boolean, isInstance, (, ), {, return, true, ;, }, @, Override, ConcreteInstanceType, toInstance, (, ), {, return]
[true, ;, }, @, Override, ConcreteInstanceType, toInstance, (, ), {, return, this, ;, }, boolean, isFunctionPrototype, (, ), {, return]
[true, ;, }, @, Override, ConcreteInstanceType, toInstance, (, ), {, return, this, ;, }, boolean, isFunctionPrototype, (, ), {, return]
[{, return, instanceType, ., isFunctionPrototypeType, (, ), ;, }, StaticSlot, <, ConcreteType, >, getPropertySlot, (, String, propName, ), {, return]
[{, return, instanceType, ., isFunctionPrototypeType, (, ), ;, }, StaticSlot, <, ConcreteType, >, getPropertySlot, (, String, propName, ), {, return]
[), ;, }, StaticSlot, <, ConcreteType, >, getPropertySlot, (, String, propName, ), {, return, getScope, (, ), ., getSlot, (]
[return, getScope, (, ), ., getSlot, (, propName, ), ;, }, ConcreteInstanceType, getInstanceTypeWithProperty, (, String, propName, ), {, if, (]
[return, getScope, (, ), ., getSlot, (, propName, ), ;, }, ConcreteInstanceType, getInstanceTypeWithProperty, (, String, propName, ), {, if, (]
[return, getScope, (, ), ., getSlot, (, propName, ), ;, }, ConcreteInstanceType, getInstanceTypeWithProperty, (, String, propName, ), {, if, (]
[(, propName, ), ;, }, ConcreteInstanceType, getInstanceTypeWithProperty, (, String, propName, ), {, if, (, getScope, (, ), ., getOwnSlot, (]
[;, }, ConcreteInstanceType, getInstanceTypeWithProperty, (, String, propName, ), {, if, (, getScope, (, ), ., getOwnSlot, (, propName, ), !=]
[String, propName, ), {, if, (, getScope, (, ), ., getOwnSlot, (, propName, ), !=, null, ), {, if, (]
[String, propName, ), {, if, (, getScope, (, ), ., getOwnSlot, (, propName, ), !=, null, ), {, if, (]
[String, propName, ), {, if, (, getScope, (, ), ., getOwnSlot, (, propName, ), !=, null, ), {, if, (]
[getScope, (, ), ., getOwnSlot, (, propName, ), !=, null, ), {, if, (, instanceType, ., getConstructor, (, ), !=]
[getOwnSlot, (, propName, ), !=, null, ), {, if, (, instanceType, ., getConstructor, (, ), !=, null, ), {, return]
[getOwnSlot, (, propName, ), !=, null, ), {, if, (, instanceType, ., getConstructor, (, ), !=, null, ), {, return]
[instanceType, ., getConstructor, (, ), !=, null, ), {, return, getConstructorType, (, ), ., getPrototypeType, (, ), ;, }, return]
[null, ), {, return, getConstructorType, (, ), ., getPrototypeType, (, ), ;, }, return, this, ;, }, else, if, (]
[null, ), {, return, getConstructorType, (, ), ., getPrototypeType, (, ), ;, }, return, this, ;, }, else, if, (]
[getConstructorType, (, ), ., getPrototypeType, (, ), ;, }, return, this, ;, }, else, if, (, getImplicitPrototype, (, ), !=]
[getPrototypeType, (, ), ;, }, return, this, ;, }, else, if, (, getImplicitPrototype, (, ), !=, null, ), {, return]
[getPrototypeType, (, ), ;, }, return, this, ;, }, else, if, (, getImplicitPrototype, (, ), !=, null, ), {, return]
[this, ;, }, else, if, (, getImplicitPrototype, (, ), !=, null, ), {, return, getImplicitPrototype, (, ), ., getInstanceTypeWithProperty, (]
[(, ), !=, null, ), {, return, getImplicitPrototype, (, ), ., getInstanceTypeWithProperty, (, propName, ), ;, }, else, {, return]
[getInstanceTypeWithProperty, (, propName, ), ;, }, else, {, return, null, ;, }, }, ConcreteInstanceType, getImplicitPrototype, (, ), {, if, (]
[getInstanceTypeWithProperty, (, propName, ), ;, }, else, {, return, null, ;, }, }, ConcreteInstanceType, getImplicitPrototype, (, ), {, if, (]
[(, propName, ), ;, }, else, {, return, null, ;, }, }, ConcreteInstanceType, getImplicitPrototype, (, ), {, if, (, (]
[(, propName, ), ;, }, else, {, return, null, ;, }, }, ConcreteInstanceType, getImplicitPrototype, (, ), {, if, (, (]
[), ;, }, else, {, return, null, ;, }, }, ConcreteInstanceType, getImplicitPrototype, (, ), {, if, (, (, prototype, ==]
[else, {, return, null, ;, }, }, ConcreteInstanceType, getImplicitPrototype, (, ), {, if, (, (, prototype, ==, null, ), &&]
[{, return, null, ;, }, }, ConcreteInstanceType, getImplicitPrototype, (, ), {, if, (, (, prototype, ==, null, ), &&, (]
[{, return, null, ;, }, }, ConcreteInstanceType, getImplicitPrototype, (, ), {, if, (, (, prototype, ==, null, ), &&, (]
[{, return, null, ;, }, }, ConcreteInstanceType, getImplicitPrototype, (, ), {, if, (, (, prototype, ==, null, ), &&, (]
[ConcreteInstanceType, getImplicitPrototype, (, ), {, if, (, (, prototype, ==, null, ), &&, (, instanceType, ., getImplicitPrototype, (, ), !=]
[(, prototype, ==, null, ), &&, (, instanceType, ., getImplicitPrototype, (, ), !=, null, ), ), {, ObjectType, proto, =]
[(, prototype, ==, null, ), &&, (, instanceType, ., getImplicitPrototype, (, ), !=, null, ), ), {, ObjectType, proto, =]
[., getImplicitPrototype, (, ), !=, null, ), ), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (]
[., getImplicitPrototype, (, ), !=, null, ), ), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (]
[getImplicitPrototype, (, ), !=, null, ), ), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, (]
[getImplicitPrototype, (, ), !=, null, ), ), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, (]
[), !=, null, ), ), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, (, proto, !=]
[), ), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, (, proto, !=, instanceType, ), &&]
[), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, (, proto, !=, instanceType, ), &&, !]
[{, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, (, proto, !=, instanceType, ), &&, !, (]
[{, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, (, proto, !=, instanceType, ), &&, !, (]
[getImplicitPrototype, (, ), ;, if, (, (, proto, !=, instanceType, ), &&, !, (, proto, instanceof, UnknownType, ), ), {]
[), ;, if, (, (, proto, !=, instanceType, ), &&, !, (, proto, instanceof, UnknownType, ), ), {, prototype, =]
[), ;, if, (, (, proto, !=, instanceType, ), &&, !, (, proto, instanceof, UnknownType, ), ), {, prototype, =]
[(, proto, !=, instanceType, ), &&, !, (, proto, instanceof, UnknownType, ), ), {, prototype, =, factory, ., createConcreteInstance, (]
[!, (, proto, instanceof, UnknownType, ), ), {, prototype, =, factory, ., createConcreteInstance, (, proto, ), ;, }, }, return]
[factory, ., createConcreteInstance, (, proto, ), ;, }, }, return, prototype, ;, }, ConcreteFunctionType, getConstructorType, (, ), {, if, (]
[factory, ., createConcreteInstance, (, proto, ), ;, }, }, return, prototype, ;, }, ConcreteFunctionType, getConstructorType, (, ), {, if, (]
[}, return, prototype, ;, }, ConcreteFunctionType, getConstructorType, (, ), {, if, (, instanceType, ., isFunctionPrototypeType, (, ), ), {, return]
[}, return, prototype, ;, }, ConcreteFunctionType, getConstructorType, (, ), {, if, (, instanceType, ., isFunctionPrototypeType, (, ), ), {, return]
[}, ConcreteFunctionType, getConstructorType, (, ), {, if, (, instanceType, ., isFunctionPrototypeType, (, ), ), {, return, factory, ., getConcreteFunction, (]
[}, ConcreteFunctionType, getConstructorType, (, ), {, if, (, instanceType, ., isFunctionPrototypeType, (, ), ), {, return, factory, ., getConcreteFunction, (]
[), {, return, factory, ., getConcreteFunction, (, instanceType, ., getOwnerFunction, (, ), ), ;, }, else, {, FunctionType, constructor, =]
[), {, return, factory, ., getConcreteFunction, (, instanceType, ., getOwnerFunction, (, ), ), ;, }, else, {, FunctionType, constructor, =]
[instanceType, ., getOwnerFunction, (, ), ), ;, }, else, {, FunctionType, constructor, =, instanceType, ., getConstructor, (, ), ;, return]
[instanceType, ., getOwnerFunction, (, ), ), ;, }, else, {, FunctionType, constructor, =, instanceType, ., getConstructor, (, ), ;, return]
[., getOwnerFunction, (, ), ), ;, }, else, {, FunctionType, constructor, =, instanceType, ., getConstructor, (, ), ;, return, (]
[., getOwnerFunction, (, ), ), ;, }, else, {, FunctionType, constructor, =, instanceType, ., getConstructor, (, ), ;, return, (]
[(, ), ), ;, }, else, {, FunctionType, constructor, =, instanceType, ., getConstructor, (, ), ;, return, (, constructor, !=]
[;, }, else, {, FunctionType, constructor, =, instanceType, ., getConstructor, (, ), ;, return, (, constructor, !=, null, ), ?]
[;, }, else, {, FunctionType, constructor, =, instanceType, ., getConstructor, (, ), ;, return, (, constructor, !=, null, ), ?]
[FunctionType, constructor, =, instanceType, ., getConstructor, (, ), ;, return, (, constructor, !=, null, ), ?, factory, ., getConcreteFunction, (]
[instanceType, ., getConstructor, (, ), ;, return, (, constructor, !=, null, ), ?, factory, ., getConcreteFunction, (, constructor, ), :]
[(, constructor, ), :, null, ;, }, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (]
[(, constructor, ), :, null, ;, }, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (]
[), :, null, ;, }, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, scope, ==]
[;, }, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, scope, ==, null, ), {]
[}, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, scope, ==, null, ), {, scope, =]
[}, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, scope, ==, null, ), {, scope, =]
[<, ConcreteType, >, getScope, (, ), {, if, (, scope, ==, null, ), {, scope, =, factory, ., createInstanceScope, (]
[), {, if, (, scope, ==, null, ), {, scope, =, factory, ., createInstanceScope, (, instanceType, ), ;, }, return]
[., createInstanceScope, (, instanceType, ), ;, }, return, scope, ;, }, @, Override, public, String, toString, (, ), {, return]
[., createInstanceScope, (, instanceType, ), ;, }, return, scope, ;, }, @, Override, public, String, toString, (, ), {, return]
[extends, ConcreteType, {, private, final, Set, <, ConcreteType, >, alternatives, ;, ConcreteUnionType, (, ConcreteType, ..., alternatives, ), {, this, (]
[extends, ConcreteType, {, private, final, Set, <, ConcreteType, >, alternatives, ;, ConcreteUnionType, (, ConcreteType, ..., alternatives, ), {, this, (]
[final, Set, <, ConcreteType, >, alternatives, ;, ConcreteUnionType, (, ConcreteType, ..., alternatives, ), {, this, (, Sets, ., newHashSet, (]
[this, (, Sets, ., newHashSet, (, alternatives, ), ), ;, }, ConcreteUnionType, (, Set, <, ConcreteType, >, alternatives, ), {]
[this, (, Sets, ., newHashSet, (, alternatives, ), ), ;, }, ConcreteUnionType, (, Set, <, ConcreteType, >, alternatives, ), {]
[newHashSet, (, alternatives, ), ), ;, }, ConcreteUnionType, (, Set, <, ConcreteType, >, alternatives, ), {, Preconditions, ., checkArgument, (]
[newHashSet, (, alternatives, ), ), ;, }, ConcreteUnionType, (, Set, <, ConcreteType, >, alternatives, ), {, Preconditions, ., checkArgument, (]
[newHashSet, (, alternatives, ), ), ;, }, ConcreteUnionType, (, Set, <, ConcreteType, >, alternatives, ), {, Preconditions, ., checkArgument, (]
[}, ConcreteUnionType, (, Set, <, ConcreteType, >, alternatives, ), {, Preconditions, ., checkArgument, (, alternatives, ., size, (, ), >]
[Set, <, ConcreteType, >, alternatives, ), {, Preconditions, ., checkArgument, (, alternatives, ., size, (, ), >, 1, ), ;]
[Set, <, ConcreteType, >, alternatives, ), {, Preconditions, ., checkArgument, (, alternatives, ., size, (, ), >, 1, ), ;]
[alternatives, ), {, Preconditions, ., checkArgument, (, alternatives, ., size, (, ), >, 1, ), ;, this, ., alternatives, =]
[), >, 1, ), ;, this, ., alternatives, =, alternatives, ;, }, @, Override, boolean, isUnion, (, ), {, return]
[}, @, Override, boolean, isUnion, (, ), {, return, true, ;, }, @, Override, ConcreteUnionType, toUnion, (, ), {, return]
[ConcreteUnionType, toUnion, (, ), {, return, this, ;, }, @, Override, ConcreteType, unionWith, (, ConcreteType, other, ), {, if, (]
[ConcreteUnionType, toUnion, (, ), {, return, this, ;, }, @, Override, ConcreteType, unionWith, (, ConcreteType, other, ), {, if, (]
[@, Override, ConcreteType, unionWith, (, ConcreteType, other, ), {, if, (, other, ., isSingleton, (, ), ), {, if, (]
[@, Override, ConcreteType, unionWith, (, ConcreteType, other, ), {, if, (, other, ., isSingleton, (, ), ), {, if, (]
[(, ConcreteType, other, ), {, if, (, other, ., isSingleton, (, ), ), {, if, (, alternatives, ., contains, (]
[if, (, other, ., isSingleton, (, ), ), {, if, (, alternatives, ., contains, (, other, ), ), {, return]
[alternatives, ., contains, (, other, ), ), {, return, this, ;, }, else, {, Set, <, ConcreteType, >, alts, =]
[alternatives, ., contains, (, other, ), ), {, return, this, ;, }, else, {, Set, <, ConcreteType, >, alts, =]
[other, ), ), {, return, this, ;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (]
[{, return, this, ;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives, ), ;]
[{, return, this, ;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives, ), ;]
[}, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives, ), ;, alts, ., add, (]
[<, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives, ), ;, alts, ., add, (, other, ), ;, return]
[alts, =, Sets, ., newHashSet, (, alternatives, ), ;, alts, ., add, (, other, ), ;, return, new, ConcreteUnionType, (]
[;, alts, ., add, (, other, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, if, (]
[;, alts, ., add, (, other, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, if, (]
[ConcreteUnionType, (, alts, ), ;, }, }, else, if, (, other, ., isUnion, (, ), ), {, ConcreteUnionType, otherUnion, =]
[ConcreteUnionType, (, alts, ), ;, }, }, else, if, (, other, ., isUnion, (, ), ), {, ConcreteUnionType, otherUnion, =]
[if, (, other, ., isUnion, (, ), ), {, ConcreteUnionType, otherUnion, =, other, ., toUnion, (, ), ;, if, (]
[if, (, other, ., isUnion, (, ), ), {, ConcreteUnionType, otherUnion, =, other, ., toUnion, (, ), ;, if, (]
[isUnion, (, ), ), {, ConcreteUnionType, otherUnion, =, other, ., toUnion, (, ), ;, if, (, alternatives, ., containsAll, (]
[isUnion, (, ), ), {, ConcreteUnionType, otherUnion, =, other, ., toUnion, (, ), ;, if, (, alternatives, ., containsAll, (]
[=, other, ., toUnion, (, ), ;, if, (, alternatives, ., containsAll, (, otherUnion, ., alternatives, ), ), {, return]
[;, if, (, alternatives, ., containsAll, (, otherUnion, ., alternatives, ), ), {, return, this, ;, }, else, if, (]
[;, if, (, alternatives, ., containsAll, (, otherUnion, ., alternatives, ), ), {, return, this, ;, }, else, if, (]
[;, if, (, alternatives, ., containsAll, (, otherUnion, ., alternatives, ), ), {, return, this, ;, }, else, if, (]
[(, otherUnion, ., alternatives, ), ), {, return, this, ;, }, else, if, (, otherUnion, ., alternatives, ., containsAll, (]
[), {, return, this, ;, }, else, if, (, otherUnion, ., alternatives, ., containsAll, (, alternatives, ), ), {, return]
[alternatives, ., containsAll, (, alternatives, ), ), {, return, otherUnion, ;, }, else, {, Set, <, ConcreteType, >, alts, =]
[alternatives, ., containsAll, (, alternatives, ), ), {, return, otherUnion, ;, }, else, {, Set, <, ConcreteType, >, alts, =]
[alternatives, ), ), {, return, otherUnion, ;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (]
[{, return, otherUnion, ;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives, ), ;]
[{, return, otherUnion, ;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives, ), ;]
[}, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives, ), ;, alts, ., addAll, (]
[}, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives, ), ;, alts, ., addAll, (]
[>, alts, =, Sets, ., newHashSet, (, alternatives, ), ;, alts, ., addAll, (, otherUnion, ., alternatives, ), ;, return]
[Sets, ., newHashSet, (, alternatives, ), ;, alts, ., addAll, (, otherUnion, ., alternatives, ), ;, return, new, ConcreteUnionType, (]
[alts, ., addAll, (, otherUnion, ., alternatives, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, {]
[alts, ., addAll, (, otherUnion, ., alternatives, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, {]
[otherUnion, ., alternatives, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, {, Preconditions, ., checkArgument, (]
[otherUnion, ., alternatives, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, {, Preconditions, ., checkArgument, (]
[otherUnion, ., alternatives, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, {, Preconditions, ., checkArgument, (]
[new, ConcreteUnionType, (, alts, ), ;, }, }, else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, ), ||]
[new, ConcreteUnionType, (, alts, ), ;, }, }, else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, ), ||]
[else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, ), ||, other, ., isAll, (, ), ), ;, return]
[else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, ), ||, other, ., isAll, (, ), ), ;, return]
[checkArgument, (, other, ., isNone, (, ), ||, other, ., isAll, (, ), ), ;, return, other, ., unionWith, (]
[other, ., unionWith, (, this, ), ;, }, }, @, Override, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (]
[other, ., unionWith, (, this, ), ;, }, }, @, Override, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (]
[@, Override, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (, other, ., isSingleton, (, ), ), {, if, (]
[@, Override, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (, other, ., isSingleton, (, ), ), {, if, (]
[(, ConcreteType, other, ), {, if, (, other, ., isSingleton, (, ), ), {, if, (, alternatives, ., contains, (]
[if, (, other, ., isSingleton, (, ), ), {, if, (, alternatives, ., contains, (, other, ), ), {, return]
[), ), {, if, (, alternatives, ., contains, (, other, ), ), {, return, other, ;, }, else, {, return]
[contains, (, other, ), ), {, return, other, ;, }, else, {, return, NONE, ;, }, }, else, if, (]
[contains, (, other, ), ), {, return, other, ;, }, else, {, return, NONE, ;, }, }, else, if, (]
[NONE, ;, }, }, else, if, (, other, ., isUnion, (, ), ), {, Set, <, ConcreteType, >, types, =]
[NONE, ;, }, }, else, if, (, other, ., isUnion, (, ), ), {, Set, <, ConcreteType, >, types, =]
[else, if, (, other, ., isUnion, (, ), ), {, Set, <, ConcreteType, >, types, =, Sets, ., newHashSet, (]
[other, ., isUnion, (, ), ), {, Set, <, ConcreteType, >, types, =, Sets, ., newHashSet, (, alternatives, ), ;]
[other, ., isUnion, (, ), ), {, Set, <, ConcreteType, >, types, =, Sets, ., newHashSet, (, alternatives, ), ;]
[), ), {, Set, <, ConcreteType, >, types, =, Sets, ., newHashSet, (, alternatives, ), ;, types, ., retainAll, (]
[), ), {, Set, <, ConcreteType, >, types, =, Sets, ., newHashSet, (, alternatives, ), ;, types, ., retainAll, (]
[), ), {, Set, <, ConcreteType, >, types, =, Sets, ., newHashSet, (, alternatives, ), ;, types, ., retainAll, (]
[., newHashSet, (, alternatives, ), ;, types, ., retainAll, (, other, ., toUnion, (, ), ., alternatives, ), ;, return]
[(, alternatives, ), ;, types, ., retainAll, (, other, ., toUnion, (, ), ., alternatives, ), ;, return, createForTypes, (]
[retainAll, (, other, ., toUnion, (, ), ., alternatives, ), ;, return, createForTypes, (, types, ), ;, }, else, {]
[retainAll, (, other, ., toUnion, (, ), ., alternatives, ), ;, return, createForTypes, (, types, ), ;, }, else, {]
[toUnion, (, ), ., alternatives, ), ;, return, createForTypes, (, types, ), ;, }, else, {, Preconditions, ., checkArgument, (]
[toUnion, (, ), ., alternatives, ), ;, return, createForTypes, (, types, ), ;, }, else, {, Preconditions, ., checkArgument, (]
[toUnion, (, ), ., alternatives, ), ;, return, createForTypes, (, types, ), ;, }, else, {, Preconditions, ., checkArgument, (]
[;, return, createForTypes, (, types, ), ;, }, else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, ), ||]
[;, return, createForTypes, (, types, ), ;, }, else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, ), ||]
[else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, ), ||, other, ., isAll, (, ), ), ;, return]
[else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, ), ||, other, ., isAll, (, ), ), ;, return]
[checkArgument, (, other, ., isNone, (, ), ||, other, ., isAll, (, ), ), ;, return, other, ., intersectWith, (]
[;, return, other, ., intersectWith, (, this, ), ;, }, }, Set, <, ConcreteType, >, getAlternatives, (, ), {, return]
[>, getAlternatives, (, ), {, return, alternatives, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, return]
[>, getAlternatives, (, ), {, return, alternatives, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, return]
[getAlternatives, (, ), {, return, alternatives, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, return, (]
[getAlternatives, (, ), {, return, alternatives, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, return, (]
[alternatives, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, return, (, obj, instanceof, ConcreteUnionType, ), &&]
[alternatives, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, return, (, obj, instanceof, ConcreteUnionType, ), &&]
[Override, public, boolean, equals, (, Object, obj, ), {, return, (, obj, instanceof, ConcreteUnionType, ), &&, alternatives, ., equals, (]
[Override, public, boolean, equals, (, Object, obj, ), {, return, (, obj, instanceof, ConcreteUnionType, ), &&, alternatives, ., equals, (]
[public, boolean, equals, (, Object, obj, ), {, return, (, obj, instanceof, ConcreteUnionType, ), &&, alternatives, ., equals, (, (]
[(, Object, obj, ), {, return, (, obj, instanceof, ConcreteUnionType, ), &&, alternatives, ., equals, (, (, (, ConcreteUnionType, )]
[(, (, ConcreteUnionType, ), obj, ), ., alternatives, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, (, ConcreteUnionType, ), obj, ), ., alternatives, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, (, ConcreteUnionType, ), obj, ), ., alternatives, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[., alternatives, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, alternatives, ., hashCode, (, ), ^]
[(, ), ^, 0x5f6e7d8c, ;, }, @, Override, public, String, toString, (, ), {, List, <, String, >, names, =]
[(, ), ^, 0x5f6e7d8c, ;, }, @, Override, public, String, toString, (, ), {, List, <, String, >, names, =]
[(, ), {, List, <, String, >, names, =, Lists, ., newArrayList, (, ), ;, for, (, ConcreteType, type, :]
[List, <, String, >, names, =, Lists, ., newArrayList, (, ), ;, for, (, ConcreteType, type, :, alternatives, ), {]
[List, <, String, >, names, =, Lists, ., newArrayList, (, ), ;, for, (, ConcreteType, type, :, alternatives, ), {]
[names, =, Lists, ., newArrayList, (, ), ;, for, (, ConcreteType, type, :, alternatives, ), {, names, ., add, (]
[names, =, Lists, ., newArrayList, (, ), ;, for, (, ConcreteType, type, :, alternatives, ), {, names, ., add, (]
[for, (, ConcreteType, type, :, alternatives, ), {, names, ., add, (, type, ., toString, (, ), ), ;, }]
[for, (, ConcreteType, type, :, alternatives, ), {, names, ., add, (, type, ., toString, (, ), ), ;, }]
[:, alternatives, ), {, names, ., add, (, type, ., toString, (, ), ), ;, }, Collections, ., sort, (]
[names, ., add, (, type, ., toString, (, ), ), ;, }, Collections, ., sort, (, names, ), ;, return]
[names, ., add, (, type, ., toString, (, ), ), ;, }, Collections, ., sort, (, names, ), ;, return]
[names, ., add, (, type, ., toString, (, ), ), ;, }, Collections, ., sort, (, names, ), ;, return]
[add, (, type, ., toString, (, ), ), ;, }, Collections, ., sort, (, names, ), ;, return, "(", +]
[add, (, type, ., toString, (, ), ), ;, }, Collections, ., sort, (, names, ), ;, return, "(", +]
[add, (, type, ., toString, (, ), ), ;, }, Collections, ., sort, (, names, ), ;, return, "(", +]
[toString, (, ), ), ;, }, Collections, ., sort, (, names, ), ;, return, "(", +, Joiner, ., on, (]
[}, Collections, ., sort, (, names, ), ;, return, "(", +, Joiner, ., on, (, ",", ), ., join, (]
[sort, (, names, ), ;, return, "(", +, Joiner, ., on, (, ",", ), ., join, (, names, ), +]
[+, ")", ;, }, }, private, static, class, ConcreteAll, extends, ConcreteType, {, @, Override, boolean, isAll, (, ), {, return]
[Override, boolean, isAll, (, ), {, return, true, ;, }, @, Override, ConcreteType, unionWith, (, ConcreteType, other, ), {, return]
[unionWith, (, ConcreteType, other, ), {, return, this, ;, }, @, Override, ConcreteType, intersectWith, (, ConcreteType, other, ), {, return]
[ConcreteType, intersectWith, (, ConcreteType, other, ), {, return, other, ;, }, @, Override, public, String, toString, (, ), {, return]
[;, }, }, static, class, ConcreteUniqueType, extends, ConcreteType, {, private, final, int, id, ;, ConcreteUniqueType, (, int, id, ), {]
[;, }, }, static, class, ConcreteUniqueType, extends, ConcreteType, {, private, final, int, id, ;, ConcreteUniqueType, (, int, id, ), {]
[class, ConcreteUniqueType, extends, ConcreteType, {, private, final, int, id, ;, ConcreteUniqueType, (, int, id, ), {, this, ., id, =]
[extends, ConcreteType, {, private, final, int, id, ;, ConcreteUniqueType, (, int, id, ), {, this, ., id, =, id, ;]
[extends, ConcreteType, {, private, final, int, id, ;, ConcreteUniqueType, (, int, id, ), {, this, ., id, =, id, ;]
[final, int, id, ;, ConcreteUniqueType, (, int, id, ), {, this, ., id, =, id, ;, Preconditions, ., checkArgument, (]
[final, int, id, ;, ConcreteUniqueType, (, int, id, ), {, this, ., id, =, id, ;, Preconditions, ., checkArgument, (]
[id, ;, ConcreteUniqueType, (, int, id, ), {, this, ., id, =, id, ;, Preconditions, ., checkArgument, (, id, >=]
[., checkArgument, (, id, >=, 0, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[., checkArgument, (, id, >=, 0, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[checkArgument, (, id, >=, 0, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, (]
[checkArgument, (, id, >=, 0, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, (]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, (, o, instanceof, ConcreteUniqueType, ), &&]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, (, o, instanceof, ConcreteUniqueType, ), &&, (]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, (, o, instanceof, ConcreteUniqueType, ), &&, (]
[@, Override, public, boolean, equals, (, Object, o, ), {, return, (, o, instanceof, ConcreteUniqueType, ), &&, (, id, ==]
[@, Override, public, boolean, equals, (, Object, o, ), {, return, (, o, instanceof, ConcreteUniqueType, ), &&, (, id, ==]
[Override, public, boolean, equals, (, Object, o, ), {, return, (, o, instanceof, ConcreteUniqueType, ), &&, (, id, ==, (]
[equals, (, Object, o, ), {, return, (, o, instanceof, ConcreteUniqueType, ), &&, (, id, ==, (, (, ConcreteUniqueType, )]
[(, (, ConcreteUniqueType, ), o, ), ., id, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, (, ConcreteUniqueType, ), o, ), ., id, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, (, ConcreteUniqueType, ), o, ), ., id, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, ConcreteUniqueType, ., class, ., hashCode, (, ), ^]
[ConcreteUniqueType, ., class, ., hashCode, (, ), ^, id, ;, }, @, Override, public, String, toString, (, ), {, return]
[ConcreteUniqueType, ., class, ., hashCode, (, ), ^, id, ;, }, @, Override, public, String, toString, (, ), {, return]
[class, ., hashCode, (, ), ^, id, ;, }, @, Override, public, String, toString, (, ), {, return, "Unique$", +]
