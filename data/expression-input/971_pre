[., FieldUtils, ;, public, abstract, class, BasePeriod, extends, AbstractPeriod, implements, ReadablePeriod, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[FieldUtils, ;, public, abstract, class, BasePeriod, extends, AbstractPeriod, implements, ReadablePeriod, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[implements, ReadablePeriod, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -, 2110953284060001145L, ;, private, static, final, ReadablePeriod, DUMMY_PERIOD, =]
[private, static, final, ReadablePeriod, DUMMY_PERIOD, =, new, AbstractPeriod, (, ), {, public, int, getValue, (, int, index, ), {, return]
[{, public, int, getValue, (, int, index, ), {, return, 0, ;, }, public, PeriodType, getPeriodType, (, ), {, return]
[{, public, int, getValue, (, int, index, ), {, return, 0, ;, }, public, PeriodType, getPeriodType, (, ), {, return]
[int, hours, ,, int, minutes, ,, int, seconds, ,, int, millis, ,, PeriodType, type, ), {, super, (, ), ;]
[,, int, minutes, ,, int, seconds, ,, int, millis, ,, PeriodType, type, ), {, super, (, ), ;, type, =]
[minutes, ,, int, seconds, ,, int, millis, ,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (]
[seconds, ,, int, millis, ,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;]
[int, millis, ,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, iType, =]
[,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, iType, =, type, ;]
[type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, iType, =, type, ;, iValues, =]
[{, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, iType, =, type, ;, iValues, =, setPeriodInternal, (]
[(, ), ;, type, =, checkPeriodType, (, type, ), ;, iType, =, type, ;, iValues, =, setPeriodInternal, (, years, ,]
[;, type, =, checkPeriodType, (, type, ), ;, iType, =, type, ;, iValues, =, setPeriodInternal, (, years, ,, months, ,]
[=, checkPeriodType, (, type, ), ;, iType, =, type, ;, iValues, =, setPeriodInternal, (, years, ,, months, ,, weeks, ,]
[(, type, ), ;, iType, =, type, ;, iValues, =, setPeriodInternal, (, years, ,, months, ,, weeks, ,, days, ,]
[), ;, iType, =, type, ;, iValues, =, setPeriodInternal, (, years, ,, months, ,, weeks, ,, days, ,, hours, ,]
[iType, =, type, ;, iValues, =, setPeriodInternal, (, years, ,, months, ,, weeks, ,, days, ,, hours, ,, minutes, ,]
[type, ;, iValues, =, setPeriodInternal, (, years, ,, months, ,, weeks, ,, days, ,, hours, ,, minutes, ,, seconds, ,]
[protected, BasePeriod, (, long, startInstant, ,, long, endInstant, ,, PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;]
[(, long, startInstant, ,, long, endInstant, ,, PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;, type, =]
[startInstant, ,, long, endInstant, ,, PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;, type, =, checkPeriodType, (]
[endInstant, ,, PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;]
[PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, chrono, =]
[PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, chrono, =]
[chrono, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, chrono, =, DateTimeUtils, ., getChronology, (]
[super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;]
[), ;, type, =, checkPeriodType, (, type, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =]
[type, =, checkPeriodType, (, type, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;]
[checkPeriodType, (, type, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =]
[checkPeriodType, (, type, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =]
[;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (]
[=, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (, this, ,]
[., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (, this, ,, startInstant, ,]
[), ;, }, protected, BasePeriod, (, ReadableInstant, startInstant, ,, ReadableInstant, endInstant, ,, PeriodType, type, ), {, super, (, ), ;]
[}, protected, BasePeriod, (, ReadableInstant, startInstant, ,, ReadableInstant, endInstant, ,, PeriodType, type, ), {, super, (, ), ;, type, =]
[BasePeriod, (, ReadableInstant, startInstant, ,, ReadableInstant, endInstant, ,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (]
[ReadableInstant, endInstant, ,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, if, (]
[ReadableInstant, endInstant, ,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, if, (]
[ReadableInstant, endInstant, ,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, if, (]
[,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, if, (, startInstant, ==]
[type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, if, (, startInstant, ==, null, &&]
[type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, if, (, startInstant, ==, null, &&]
[{, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, if, (, startInstant, ==, null, &&, endInstant, ==]
[), ;, type, =, checkPeriodType, (, type, ), ;, if, (, startInstant, ==, null, &&, endInstant, ==, null, ), {]
[type, =, checkPeriodType, (, type, ), ;, if, (, startInstant, ==, null, &&, endInstant, ==, null, ), {, iType, =]
[checkPeriodType, (, type, ), ;, if, (, startInstant, ==, null, &&, endInstant, ==, null, ), {, iType, =, type, ;]
[type, ), ;, if, (, startInstant, ==, null, &&, endInstant, ==, null, ), {, iType, =, type, ;, iValues, =]
[if, (, startInstant, ==, null, &&, endInstant, ==, null, ), {, iType, =, type, ;, iValues, =, new, int, []
[iType, =, type, ;, iValues, =, new, int, [, size, (, ), ], ;, }, else, {, long, startMillis, =]
[iType, =, type, ;, iValues, =, new, int, [, size, (, ), ], ;, }, else, {, long, startMillis, =]
[iValues, =, new, int, [, size, (, ), ], ;, }, else, {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (]
[(, ), ], ;, }, else, {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, long, endMillis, =]
[(, ), ], ;, }, else, {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, long, endMillis, =]
[}, else, {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (]
[DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, Chronology, chrono, =]
[DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, Chronology, chrono, =]
[startInstant, ), ;, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, Chronology, chrono, =, DateTimeUtils, ., getIntervalChronology, (]
[;, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, Chronology, chrono, =, DateTimeUtils, ., getIntervalChronology, (, startInstant, ,]
[=, DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, Chronology, chrono, =, DateTimeUtils, ., getIntervalChronology, (, startInstant, ,, endInstant, ), ;]
[., getInstantMillis, (, endInstant, ), ;, Chronology, chrono, =, DateTimeUtils, ., getIntervalChronology, (, startInstant, ,, endInstant, ), ;, iType, =]
[(, endInstant, ), ;, Chronology, chrono, =, DateTimeUtils, ., getIntervalChronology, (, startInstant, ,, endInstant, ), ;, iType, =, type, ;]
[), ;, Chronology, chrono, =, DateTimeUtils, ., getIntervalChronology, (, startInstant, ,, endInstant, ), ;, iType, =, type, ;, iValues, =]
[), ;, Chronology, chrono, =, DateTimeUtils, ., getIntervalChronology, (, startInstant, ,, endInstant, ), ;, iType, =, type, ;, iValues, =]
[=, DateTimeUtils, ., getIntervalChronology, (, startInstant, ,, endInstant, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (]
[., getIntervalChronology, (, startInstant, ,, endInstant, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (, this, ,]
[(, startInstant, ,, endInstant, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (, this, ,, startMillis, ,]
[}, protected, BasePeriod, (, ReadablePartial, start, ,, ReadablePartial, end, ,, PeriodType, type, ), {, super, (, ), ;, if, (]
[}, protected, BasePeriod, (, ReadablePartial, start, ,, ReadablePartial, end, ,, PeriodType, type, ), {, super, (, ), ;, if, (]
[}, protected, BasePeriod, (, ReadablePartial, start, ,, ReadablePartial, end, ,, PeriodType, type, ), {, super, (, ), ;, if, (]
[BasePeriod, (, ReadablePartial, start, ,, ReadablePartial, end, ,, PeriodType, type, ), {, super, (, ), ;, if, (, start, ==]
[ReadablePartial, start, ,, ReadablePartial, end, ,, PeriodType, type, ), {, super, (, ), ;, if, (, start, ==, null, ||]
[ReadablePartial, start, ,, ReadablePartial, end, ,, PeriodType, type, ), {, super, (, ), ;, if, (, start, ==, null, ||]
[,, ReadablePartial, end, ,, PeriodType, type, ), {, super, (, ), ;, if, (, start, ==, null, ||, end, ==]
[PeriodType, type, ), {, super, (, ), ;, if, (, start, ==, null, ||, end, ==, null, ), {, throw]
[{, super, (, ), ;, if, (, start, ==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, start, ==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (]
[(, start, ==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (]
[(, start, ==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (]
[(, start, ==, null, ||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (]
[||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, instanceof, BaseLocal, &&]
[||, end, ==, null, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, instanceof, BaseLocal, &&]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, instanceof, BaseLocal, &&, end, instanceof, BaseLocal, &&]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, instanceof, BaseLocal, &&, end, instanceof, BaseLocal, &&]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must not be null", ), ;, }, if, (, start, instanceof, BaseLocal, &&, end, instanceof, BaseLocal, &&]
["ReadablePartial objects must not be null", ), ;, }, if, (, start, instanceof, BaseLocal, &&, end, instanceof, BaseLocal, &&, start, ., getClass, (, ), ==]
["ReadablePartial objects must not be null", ), ;, }, if, (, start, instanceof, BaseLocal, &&, end, instanceof, BaseLocal, &&, start, ., getClass, (, ), ==]
[instanceof, BaseLocal, &&, end, instanceof, BaseLocal, &&, start, ., getClass, (, ), ==, end, ., getClass, (, ), ), {]
[&&, end, instanceof, BaseLocal, &&, start, ., getClass, (, ), ==, end, ., getClass, (, ), ), {, type, =]
[instanceof, BaseLocal, &&, start, ., getClass, (, ), ==, end, ., getClass, (, ), ), {, type, =, checkPeriodType, (]
[(, ), ==, end, ., getClass, (, ), ), {, type, =, checkPeriodType, (, type, ), ;, long, startMillis, =]
[(, ), ==, end, ., getClass, (, ), ), {, type, =, checkPeriodType, (, type, ), ;, long, startMillis, =]
[), ==, end, ., getClass, (, ), ), {, type, =, checkPeriodType, (, type, ), ;, long, startMillis, =, (]
[., getClass, (, ), ), {, type, =, checkPeriodType, (, type, ), ;, long, startMillis, =, (, (, BaseLocal, )]
[type, ), ;, long, startMillis, =, (, (, BaseLocal, ), start, ), ., getLocalMillis, (, ), ;, long, endMillis, =]
[type, ), ;, long, startMillis, =, (, (, BaseLocal, ), start, ), ., getLocalMillis, (, ), ;, long, endMillis, =]
[), ;, long, startMillis, =, (, (, BaseLocal, ), start, ), ., getLocalMillis, (, ), ;, long, endMillis, =, (]
[startMillis, =, (, (, BaseLocal, ), start, ), ., getLocalMillis, (, ), ;, long, endMillis, =, (, (, BaseLocal, )]
[(, ), ;, long, endMillis, =, (, (, BaseLocal, ), end, ), ., getLocalMillis, (, ), ;, Chronology, chrono, =]
[(, ), ;, long, endMillis, =, (, (, BaseLocal, ), end, ), ., getLocalMillis, (, ), ;, Chronology, chrono, =]
[(, (, BaseLocal, ), end, ), ., getLocalMillis, (, ), ;, Chronology, chrono, =, start, ., getChronology, (, ), ;]
[BaseLocal, ), end, ), ., getLocalMillis, (, ), ;, Chronology, chrono, =, start, ., getChronology, (, ), ;, chrono, =]
[BaseLocal, ), end, ), ., getLocalMillis, (, ), ;, Chronology, chrono, =, start, ., getChronology, (, ), ;, chrono, =]
[., getLocalMillis, (, ), ;, Chronology, chrono, =, start, ., getChronology, (, ), ;, chrono, =, DateTimeUtils, ., getChronology, (]
[), ;, Chronology, chrono, =, start, ., getChronology, (, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;]
[Chronology, chrono, =, start, ., getChronology, (, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =]
[=, start, ., getChronology, (, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;]
[., getChronology, (, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =]
[., getChronology, (, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =]
[;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (]
[=, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (, this, ,]
[., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (, this, ,, startMillis, ,]
[type, ;, iValues, =, chrono, ., get, (, this, ,, startMillis, ,, endMillis, ), ;, }, else, {, if, (]
[type, ;, iValues, =, chrono, ., get, (, this, ,, startMillis, ,, endMillis, ), ;, }, else, {, if, (]
[type, ;, iValues, =, chrono, ., get, (, this, ,, startMillis, ,, endMillis, ), ;, }, else, {, if, (]
[get, (, this, ,, startMillis, ,, endMillis, ), ;, }, else, {, if, (, start, ., size, (, ), !=]
[get, (, this, ,, startMillis, ,, endMillis, ), ;, }, else, {, if, (, start, ., size, (, ), !=]
[;, }, else, {, if, (, start, ., size, (, ), !=, end, ., size, (, ), ), {, throw]
[{, if, (, start, ., size, (, ), !=, end, ., size, (, ), ), {, throw, new, IllegalArgumentException, (]
[end, ., size, (, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i, =]
[), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i, =, 0, ,, isize, =]
[), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i, =, 0, ,, isize, =]
[(, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i, =, 0, ,, isize, =, start, ., size, (, ), ;]
[(, "ReadablePartial objects must have the same set of fields", ), ;, }, for, (, int, i, =, 0, ,, isize, =, start, ., size, (, ), ;]
[), ;, }, for, (, int, i, =, 0, ,, isize, =, start, ., size, (, ), ;, i, <]
[}, for, (, int, i, =, 0, ,, isize, =, start, ., size, (, ), ;, i, <, isize, ;]
[}, for, (, int, i, =, 0, ,, isize, =, start, ., size, (, ), ;, i, <, isize, ;]
[0, ,, isize, =, start, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, if, (]
[0, ,, isize, =, start, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, if, (]
[0, ,, isize, =, start, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, if, (]
[start, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, if, (, start, ., getFieldType, (]
[(, ), ;, i, <, isize, ;, i, ++, ), {, if, (, start, ., getFieldType, (, i, ), !=]
[(, ), ;, i, <, isize, ;, i, ++, ), {, if, (, start, ., getFieldType, (, i, ), !=]
[<, isize, ;, i, ++, ), {, if, (, start, ., getFieldType, (, i, ), !=, end, ., getFieldType, (]
[), {, if, (, start, ., getFieldType, (, i, ), !=, end, ., getFieldType, (, i, ), ), {, throw]
[(, start, ., getFieldType, (, i, ), !=, end, ., getFieldType, (, i, ), ), {, throw, new, IllegalArgumentException, (]
[!=, end, ., getFieldType, (, i, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (]
[!=, end, ., getFieldType, (, i, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (]
[!=, end, ., getFieldType, (, i, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (]
[(, i, ), ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (, DateTimeUtils, ., isContiguous, (]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (, DateTimeUtils, ., isContiguous, (, start, ), ==]
[IllegalArgumentException, (, "ReadablePartial objects must have the same set of fields", ), ;, }, }, if, (, DateTimeUtils, ., isContiguous, (, start, ), ==, false, ), {, throw]
[), ;, }, }, if, (, DateTimeUtils, ., isContiguous, (, start, ), ==, false, ), {, throw, new, IllegalArgumentException, (]
[if, (, DateTimeUtils, ., isContiguous, (, start, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }]
[DateTimeUtils, ., isContiguous, (, start, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, iType, =]
[isContiguous, (, start, ), ==, false, ), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, iType, =, checkPeriodType, (]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, iType, =, checkPeriodType, (, type, ), ;, Chronology, chrono, =]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, iType, =, checkPeriodType, (, type, ), ;, Chronology, chrono, =]
[), {, throw, new, IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, iType, =, checkPeriodType, (, type, ), ;, Chronology, chrono, =]
[IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, iType, =, checkPeriodType, (, type, ), ;, Chronology, chrono, =, DateTimeUtils, ., getChronology, (]
[IllegalArgumentException, (, "ReadablePartial objects must be contiguous", ), ;, }, iType, =, checkPeriodType, (, type, ), ;, Chronology, chrono, =, DateTimeUtils, ., getChronology, (]
[), ;, Chronology, chrono, =, DateTimeUtils, ., getChronology, (, start, ., getChronology, (, ), ), ., withUTC, (, ), ;]
[Chronology, chrono, =, DateTimeUtils, ., getChronology, (, start, ., getChronology, (, ), ), ., withUTC, (, ), ;, iValues, =]
[Chronology, chrono, =, DateTimeUtils, ., getChronology, (, start, ., getChronology, (, ), ), ., withUTC, (, ), ;, iValues, =]
[., getChronology, (, start, ., getChronology, (, ), ), ., withUTC, (, ), ;, iValues, =, chrono, ., get, (]
[(, start, ., getChronology, (, ), ), ., withUTC, (, ), ;, iValues, =, chrono, ., get, (, this, ,]
[(, start, ., getChronology, (, ), ), ., withUTC, (, ), ;, iValues, =, chrono, ., get, (, this, ,]
[(, ), ), ., withUTC, (, ), ;, iValues, =, chrono, ., get, (, this, ,, chrono, ., set, (]
[), ., withUTC, (, ), ;, iValues, =, chrono, ., get, (, this, ,, chrono, ., set, (, start, ,]
[(, ), ;, iValues, =, chrono, ., get, (, this, ,, chrono, ., set, (, start, ,, 0L, ), ,]
[(, ), ;, iValues, =, chrono, ., get, (, this, ,, chrono, ., set, (, start, ,, 0L, ), ,]
[=, chrono, ., get, (, this, ,, chrono, ., set, (, start, ,, 0L, ), ,, chrono, ., set, (]
[., get, (, this, ,, chrono, ., set, (, start, ,, 0L, ), ,, chrono, ., set, (, end, ,]
[;, }, }, protected, BasePeriod, (, ReadableInstant, startInstant, ,, ReadableDuration, duration, ,, PeriodType, type, ), {, super, (, ), ;]
[}, protected, BasePeriod, (, ReadableInstant, startInstant, ,, ReadableDuration, duration, ,, PeriodType, type, ), {, super, (, ), ;, type, =]
[BasePeriod, (, ReadableInstant, startInstant, ,, ReadableDuration, duration, ,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (]
[duration, ,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, long, startMillis, =]
[duration, ,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, long, startMillis, =]
[), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (]
[type, =, checkPeriodType, (, type, ), ;, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, long, durationMillis, =]
[type, =, checkPeriodType, (, type, ), ;, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, long, durationMillis, =]
[type, ), ;, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (]
[DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration, ), ;, long, endMillis, =]
[DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration, ), ;, long, endMillis, =]
[startInstant, ), ;, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration, ), ;, long, endMillis, =, FieldUtils, ., safeAdd, (]
[;, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration, ), ;, long, endMillis, =, FieldUtils, ., safeAdd, (, startMillis, ,]
[getDurationMillis, (, duration, ), ;, long, endMillis, =, FieldUtils, ., safeAdd, (, startMillis, ,, durationMillis, ), ;, Chronology, chrono, =]
[getDurationMillis, (, duration, ), ;, long, endMillis, =, FieldUtils, ., safeAdd, (, startMillis, ,, durationMillis, ), ;, Chronology, chrono, =]
[;, long, endMillis, =, FieldUtils, ., safeAdd, (, startMillis, ,, durationMillis, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (]
[=, FieldUtils, ., safeAdd, (, startMillis, ,, durationMillis, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, startInstant, ), ;]
[., safeAdd, (, startMillis, ,, durationMillis, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, startInstant, ), ;, iType, =]
[(, startMillis, ,, durationMillis, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, startInstant, ), ;, iType, =, type, ;]
[,, durationMillis, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, startInstant, ), ;, iType, =, type, ;, iValues, =]
[,, durationMillis, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, startInstant, ), ;, iType, =, type, ;, iValues, =]
[Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, startInstant, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (]
[=, DateTimeUtils, ., getInstantChronology, (, startInstant, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (, this, ,]
[., getInstantChronology, (, startInstant, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (, this, ,, startMillis, ,]
[), ;, }, protected, BasePeriod, (, ReadableDuration, duration, ,, ReadableInstant, endInstant, ,, PeriodType, type, ), {, super, (, ), ;]
[}, protected, BasePeriod, (, ReadableDuration, duration, ,, ReadableInstant, endInstant, ,, PeriodType, type, ), {, super, (, ), ;, type, =]
[BasePeriod, (, ReadableDuration, duration, ,, ReadableInstant, endInstant, ,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (]
[endInstant, ,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, long, durationMillis, =]
[endInstant, ,, PeriodType, type, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, long, durationMillis, =]
[), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (]
[type, =, checkPeriodType, (, type, ), ;, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration, ), ;, long, endMillis, =]
[type, =, checkPeriodType, (, type, ), ;, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration, ), ;, long, endMillis, =]
[type, ), ;, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration, ), ;, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (]
[DateTimeUtils, ., getDurationMillis, (, duration, ), ;, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, long, startMillis, =]
[DateTimeUtils, ., getDurationMillis, (, duration, ), ;, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, long, startMillis, =]
[duration, ), ;, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, long, startMillis, =, FieldUtils, ., safeSubtract, (]
[;, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, long, startMillis, =, FieldUtils, ., safeSubtract, (, endMillis, ,]
[getInstantMillis, (, endInstant, ), ;, long, startMillis, =, FieldUtils, ., safeSubtract, (, endMillis, ,, durationMillis, ), ;, Chronology, chrono, =]
[getInstantMillis, (, endInstant, ), ;, long, startMillis, =, FieldUtils, ., safeSubtract, (, endMillis, ,, durationMillis, ), ;, Chronology, chrono, =]
[;, long, startMillis, =, FieldUtils, ., safeSubtract, (, endMillis, ,, durationMillis, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (]
[=, FieldUtils, ., safeSubtract, (, endMillis, ,, durationMillis, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, endInstant, ), ;]
[., safeSubtract, (, endMillis, ,, durationMillis, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, endInstant, ), ;, iType, =]
[(, endMillis, ,, durationMillis, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, endInstant, ), ;, iType, =, type, ;]
[,, durationMillis, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, endInstant, ), ;, iType, =, type, ;, iValues, =]
[,, durationMillis, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, endInstant, ), ;, iType, =, type, ;, iValues, =]
[Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, endInstant, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (]
[=, DateTimeUtils, ., getInstantChronology, (, endInstant, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (, this, ,]
[., getInstantChronology, (, endInstant, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (, this, ,, startMillis, ,]
[(, this, ,, startMillis, ,, endMillis, ), ;, }, protected, BasePeriod, (, long, duration, ), {, super, (, ), ;]
[,, startMillis, ,, endMillis, ), ;, }, protected, BasePeriod, (, long, duration, ), {, super, (, ), ;, iType, =]
[,, startMillis, ,, endMillis, ), ;, }, protected, BasePeriod, (, long, duration, ), {, super, (, ), ;, iType, =]
[duration, ), {, super, (, ), ;, iType, =, PeriodType, ., standard, (, ), ;, int, [, ], values, =]
[duration, ), {, super, (, ), ;, iType, =, PeriodType, ., standard, (, ), ;, int, [, ], values, =]
[duration, ), {, super, (, ), ;, iType, =, PeriodType, ., standard, (, ), ;, int, [, ], values, =]
[=, PeriodType, ., standard, (, ), ;, int, [, ], values, =, ISOChronology, ., getInstanceUTC, (, ), ., get, (]
[., standard, (, ), ;, int, [, ], values, =, ISOChronology, ., getInstanceUTC, (, ), ., get, (, DUMMY_PERIOD, ,]
[), ;, int, [, ], values, =, ISOChronology, ., getInstanceUTC, (, ), ., get, (, DUMMY_PERIOD, ,, duration, ), ;]
[int, [, ], values, =, ISOChronology, ., getInstanceUTC, (, ), ., get, (, DUMMY_PERIOD, ,, duration, ), ;, iValues, =]
[values, =, ISOChronology, ., getInstanceUTC, (, ), ., get, (, DUMMY_PERIOD, ,, duration, ), ;, iValues, =, new, int, []
[., getInstanceUTC, (, ), ., get, (, DUMMY_PERIOD, ,, duration, ), ;, iValues, =, new, int, [, 8, ], ;]
[., getInstanceUTC, (, ), ., get, (, DUMMY_PERIOD, ,, duration, ), ;, iValues, =, new, int, [, 8, ], ;]
[., get, (, DUMMY_PERIOD, ,, duration, ), ;, iValues, =, new, int, [, 8, ], ;, System, ., arraycopy, (]
[(, DUMMY_PERIOD, ,, duration, ), ;, iValues, =, new, int, [, 8, ], ;, System, ., arraycopy, (, values, ,]
[,, duration, ), ;, iValues, =, new, int, [, 8, ], ;, System, ., arraycopy, (, values, ,, 0, ,]
[), ;, iValues, =, new, int, [, 8, ], ;, System, ., arraycopy, (, values, ,, 0, ,, iValues, ,]
[iValues, =, new, int, [, 8, ], ;, System, ., arraycopy, (, values, ,, 0, ,, iValues, ,, 4, ,]
[), ;, }, protected, BasePeriod, (, long, duration, ,, PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;]
[}, protected, BasePeriod, (, long, duration, ,, PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;, type, =]
[BasePeriod, (, long, duration, ,, PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;, type, =, checkPeriodType, (]
[duration, ,, PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;]
[PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, chrono, =]
[PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, chrono, =]
[chrono, ), {, super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, chrono, =, DateTimeUtils, ., getChronology, (]
[super, (, ), ;, type, =, checkPeriodType, (, type, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;]
[), ;, type, =, checkPeriodType, (, type, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =]
[type, =, checkPeriodType, (, type, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;]
[checkPeriodType, (, type, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =]
[checkPeriodType, (, type, ), ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =]
[;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (]
[=, DateTimeUtils, ., getChronology, (, chrono, ), ;, iType, =, type, ;, iValues, =, chrono, ., get, (, this, ,]
[protected, BasePeriod, (, Object, period, ,, PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;, PeriodConverter, converter, =]
[protected, BasePeriod, (, Object, period, ,, PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;, PeriodConverter, converter, =]
[protected, BasePeriod, (, Object, period, ,, PeriodType, type, ,, Chronology, chrono, ), {, super, (, ), ;, PeriodConverter, converter, =]
[,, Chronology, chrono, ), {, super, (, ), ;, PeriodConverter, converter, =, ConverterManager, ., getInstance, (, ), ., getPeriodConverter, (]
[), {, super, (, ), ;, PeriodConverter, converter, =, ConverterManager, ., getInstance, (, ), ., getPeriodConverter, (, period, ), ;]
[super, (, ), ;, PeriodConverter, converter, =, ConverterManager, ., getInstance, (, ), ., getPeriodConverter, (, period, ), ;, type, =]
[(, ), ;, PeriodConverter, converter, =, ConverterManager, ., getInstance, (, ), ., getPeriodConverter, (, period, ), ;, type, =, (]
[(, ), ;, PeriodConverter, converter, =, ConverterManager, ., getInstance, (, ), ., getPeriodConverter, (, period, ), ;, type, =, (]
[(, ), ;, PeriodConverter, converter, =, ConverterManager, ., getInstance, (, ), ., getPeriodConverter, (, period, ), ;, type, =, (]
[;, PeriodConverter, converter, =, ConverterManager, ., getInstance, (, ), ., getPeriodConverter, (, period, ), ;, type, =, (, type, ==]
[converter, =, ConverterManager, ., getInstance, (, ), ., getPeriodConverter, (, period, ), ;, type, =, (, type, ==, null, ?]
[converter, =, ConverterManager, ., getInstance, (, ), ., getPeriodConverter, (, period, ), ;, type, =, (, type, ==, null, ?]
[getInstance, (, ), ., getPeriodConverter, (, period, ), ;, type, =, (, type, ==, null, ?, converter, ., getPeriodType, (]
[., getPeriodConverter, (, period, ), ;, type, =, (, type, ==, null, ?, converter, ., getPeriodType, (, period, ), :]
[period, ), ;, type, =, (, type, ==, null, ?, converter, ., getPeriodType, (, period, ), :, type, ), ;]
[;, type, =, (, type, ==, null, ?, converter, ., getPeriodType, (, period, ), :, type, ), ;, type, =]
[=, (, type, ==, null, ?, converter, ., getPeriodType, (, period, ), :, type, ), ;, type, =, checkPeriodType, (]
[==, null, ?, converter, ., getPeriodType, (, period, ), :, type, ), ;, type, =, checkPeriodType, (, type, ), ;]
[?, converter, ., getPeriodType, (, period, ), :, type, ), ;, type, =, checkPeriodType, (, type, ), ;, iType, =]
[(, period, ), :, type, ), ;, type, =, checkPeriodType, (, type, ), ;, iType, =, type, ;, if, (]
[(, period, ), :, type, ), ;, type, =, checkPeriodType, (, type, ), ;, iType, =, type, ;, if, (]
[), ;, type, =, checkPeriodType, (, type, ), ;, iType, =, type, ;, if, (, this, instanceof, ReadWritablePeriod, ), {]
[type, =, checkPeriodType, (, type, ), ;, iType, =, type, ;, if, (, this, instanceof, ReadWritablePeriod, ), {, iValues, =]
[(, type, ), ;, iType, =, type, ;, if, (, this, instanceof, ReadWritablePeriod, ), {, iValues, =, new, int, []
[=, type, ;, if, (, this, instanceof, ReadWritablePeriod, ), {, iValues, =, new, int, [, size, (, ), ], ;]
[;, if, (, this, instanceof, ReadWritablePeriod, ), {, iValues, =, new, int, [, size, (, ), ], ;, chrono, =]
[;, if, (, this, instanceof, ReadWritablePeriod, ), {, iValues, =, new, int, [, size, (, ), ], ;, chrono, =]
[instanceof, ReadWritablePeriod, ), {, iValues, =, new, int, [, size, (, ), ], ;, chrono, =, DateTimeUtils, ., getChronology, (]
[{, iValues, =, new, int, [, size, (, ), ], ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;]
[{, iValues, =, new, int, [, size, (, ), ], ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;]
[int, [, size, (, ), ], ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, converter, ., setInto, (]
[(, ), ], ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, converter, ., setInto, (, (, ReadWritablePeriod, )]
[], ;, chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, converter, ., setInto, (, (, ReadWritablePeriod, ), this, ,]
[chrono, =, DateTimeUtils, ., getChronology, (, chrono, ), ;, converter, ., setInto, (, (, ReadWritablePeriod, ), this, ,, period, ,]
[chrono, ), ;, converter, ., setInto, (, (, ReadWritablePeriod, ), this, ,, period, ,, chrono, ), ;, }, else, {]
[;, converter, ., setInto, (, (, ReadWritablePeriod, ), this, ,, period, ,, chrono, ), ;, }, else, {, iValues, =]
[;, converter, ., setInto, (, (, ReadWritablePeriod, ), this, ,, period, ,, chrono, ), ;, }, else, {, iValues, =]
[setInto, (, (, ReadWritablePeriod, ), this, ,, period, ,, chrono, ), ;, }, else, {, iValues, =, new, MutablePeriod, (]
[(, ReadWritablePeriod, ), this, ,, period, ,, chrono, ), ;, }, else, {, iValues, =, new, MutablePeriod, (, period, ,]
[), this, ,, period, ,, chrono, ), ;, }, else, {, iValues, =, new, MutablePeriod, (, period, ,, type, ,]
[), ;, }, }, protected, BasePeriod, (, int, [, ], values, ,, PeriodType, type, ), {, super, (, ), ;]
[}, }, protected, BasePeriod, (, int, [, ], values, ,, PeriodType, type, ), {, super, (, ), ;, iType, =]
[protected, BasePeriod, (, int, [, ], values, ,, PeriodType, type, ), {, super, (, ), ;, iType, =, type, ;]
[(, int, [, ], values, ,, PeriodType, type, ), {, super, (, ), ;, iType, =, type, ;, iValues, =]
[), ;, iType, =, type, ;, iValues, =, values, ;, }, protected, PeriodType, checkPeriodType, (, PeriodType, type, ), {, return]
[), ;, iType, =, type, ;, iValues, =, values, ;, }, protected, PeriodType, checkPeriodType, (, PeriodType, type, ), {, return]
[type, ;, iValues, =, values, ;, }, protected, PeriodType, checkPeriodType, (, PeriodType, type, ), {, return, DateTimeUtils, ., getPeriodType, (]
[PeriodType, type, ), {, return, DateTimeUtils, ., getPeriodType, (, type, ), ;, }, public, PeriodType, getPeriodType, (, ), {, return]
[}, public, PeriodType, getPeriodType, (, ), {, return, iType, ;, }, public, int, getValue, (, int, index, ), {, return]
[}, public, PeriodType, getPeriodType, (, ), {, return, iType, ;, }, public, int, getValue, (, int, index, ), {, return]
[PeriodType, getPeriodType, (, ), {, return, iType, ;, }, public, int, getValue, (, int, index, ), {, return, iValues, []
[), {, return, iValues, [, index, ], ;, }, public, Duration, toDurationFrom, (, ReadableInstant, startInstant, ), {, long, startMillis, =]
[), {, return, iValues, [, index, ], ;, }, public, Duration, toDurationFrom, (, ReadableInstant, startInstant, ), {, long, startMillis, =]
[[, index, ], ;, }, public, Duration, toDurationFrom, (, ReadableInstant, startInstant, ), {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (]
[Duration, toDurationFrom, (, ReadableInstant, startInstant, ), {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, Chronology, chrono, =]
[Duration, toDurationFrom, (, ReadableInstant, startInstant, ), {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, Chronology, chrono, =]
[startInstant, ), {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (]
[DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, startInstant, ), ;, long, endMillis, =]
[DateTimeUtils, ., getInstantMillis, (, startInstant, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, startInstant, ), ;, long, endMillis, =]
[startInstant, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, startInstant, ), ;, long, endMillis, =, chrono, ., add, (]
[;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, startInstant, ), ;, long, endMillis, =, chrono, ., add, (, this, ,]
[chrono, =, DateTimeUtils, ., getInstantChronology, (, startInstant, ), ;, long, endMillis, =, chrono, ., add, (, this, ,, startMillis, ,]
[getInstantChronology, (, startInstant, ), ;, long, endMillis, =, chrono, ., add, (, this, ,, startMillis, ,, 1, ), ;, return]
[), ;, long, endMillis, =, chrono, ., add, (, this, ,, startMillis, ,, 1, ), ;, return, new, Duration, (]
[long, endMillis, =, chrono, ., add, (, this, ,, startMillis, ,, 1, ), ;, return, new, Duration, (, startMillis, ,]
[new, Duration, (, startMillis, ,, endMillis, ), ;, }, public, Duration, toDurationTo, (, ReadableInstant, endInstant, ), {, long, endMillis, =]
[new, Duration, (, startMillis, ,, endMillis, ), ;, }, public, Duration, toDurationTo, (, ReadableInstant, endInstant, ), {, long, endMillis, =]
[,, endMillis, ), ;, }, public, Duration, toDurationTo, (, ReadableInstant, endInstant, ), {, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (]
[Duration, toDurationTo, (, ReadableInstant, endInstant, ), {, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, Chronology, chrono, =]
[Duration, toDurationTo, (, ReadableInstant, endInstant, ), {, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, Chronology, chrono, =]
[endInstant, ), {, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (]
[DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, endInstant, ), ;, long, startMillis, =]
[DateTimeUtils, ., getInstantMillis, (, endInstant, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, endInstant, ), ;, long, startMillis, =]
[endInstant, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, endInstant, ), ;, long, startMillis, =, chrono, ., add, (]
[;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, endInstant, ), ;, long, startMillis, =, chrono, ., add, (, this, ,]
[chrono, =, DateTimeUtils, ., getInstantChronology, (, endInstant, ), ;, long, startMillis, =, chrono, ., add, (, this, ,, endMillis, ,]
[=, DateTimeUtils, ., getInstantChronology, (, endInstant, ), ;, long, startMillis, =, chrono, ., add, (, this, ,, endMillis, ,, -]
[(, endInstant, ), ;, long, startMillis, =, chrono, ., add, (, this, ,, endMillis, ,, -, 1, ), ;, return]
[;, long, startMillis, =, chrono, ., add, (, this, ,, endMillis, ,, -, 1, ), ;, return, new, Duration, (]
[startMillis, =, chrono, ., add, (, this, ,, endMillis, ,, -, 1, ), ;, return, new, Duration, (, startMillis, ,]
[}, private, void, checkAndUpdate, (, DurationFieldType, type, ,, int, [, ], values, ,, int, newValue, ), {, int, index, =]
[void, checkAndUpdate, (, DurationFieldType, type, ,, int, [, ], values, ,, int, newValue, ), {, int, index, =, indexOf, (]
[,, int, [, ], values, ,, int, newValue, ), {, int, index, =, indexOf, (, type, ), ;, if, (]
[,, int, [, ], values, ,, int, newValue, ), {, int, index, =, indexOf, (, type, ), ;, if, (]
[[, ], values, ,, int, newValue, ), {, int, index, =, indexOf, (, type, ), ;, if, (, index, ==]
[], values, ,, int, newValue, ), {, int, index, =, indexOf, (, type, ), ;, if, (, index, ==, -]
[), {, int, index, =, indexOf, (, type, ), ;, if, (, index, ==, -, 1, ), {, if, (]
[), {, int, index, =, indexOf, (, type, ), ;, if, (, index, ==, -, 1, ), {, if, (]
[int, index, =, indexOf, (, type, ), ;, if, (, index, ==, -, 1, ), {, if, (, newValue, !=]
[(, type, ), ;, if, (, index, ==, -, 1, ), {, if, (, newValue, !=, 0, ), {, throw]
[;, if, (, index, ==, -, 1, ), {, if, (, newValue, !=, 0, ), {, throw, new, IllegalArgumentException, (]
[;, if, (, index, ==, -, 1, ), {, if, (, newValue, !=, 0, ), {, throw, new, IllegalArgumentException, (]
[;, if, (, index, ==, -, 1, ), {, if, (, newValue, !=, 0, ), {, throw, new, IllegalArgumentException, (]
[(, index, ==, -, 1, ), {, if, (, newValue, !=, 0, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +]
[(, index, ==, -, 1, ), {, if, (, newValue, !=, 0, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +]
[{, if, (, newValue, !=, 0, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +, type, ., getName, (, ), +]
[{, throw, new, IllegalArgumentException, (, "Period does not support field '", +, type, ., getName, (, ), +, "'", ), ;, }, }, else, {]
[{, throw, new, IllegalArgumentException, (, "Period does not support field '", +, type, ., getName, (, ), +, "'", ), ;, }, }, else, {]
[new, IllegalArgumentException, (, "Period does not support field '", +, type, ., getName, (, ), +, "'", ), ;, }, }, else, {, values, []
["Period does not support field '", +, type, ., getName, (, ), +, "'", ), ;, }, }, else, {, values, [, index, ], =]
[{, values, [, index, ], =, newValue, ;, }, }, protected, void, setPeriod, (, ReadablePeriod, period, ), {, if, (]
[{, values, [, index, ], =, newValue, ;, }, }, protected, void, setPeriod, (, ReadablePeriod, period, ), {, if, (]
[[, index, ], =, newValue, ;, }, }, protected, void, setPeriod, (, ReadablePeriod, period, ), {, if, (, period, ==]
[=, newValue, ;, }, }, protected, void, setPeriod, (, ReadablePeriod, period, ), {, if, (, period, ==, null, ), {]
[;, }, }, protected, void, setPeriod, (, ReadablePeriod, period, ), {, if, (, period, ==, null, ), {, setValues, (]
[protected, void, setPeriod, (, ReadablePeriod, period, ), {, if, (, period, ==, null, ), {, setValues, (, new, int, []
[(, period, ==, null, ), {, setValues, (, new, int, [, size, (, ), ], ), ;, }, else, {]
[==, null, ), {, setValues, (, new, int, [, size, (, ), ], ), ;, }, else, {, setPeriodInternal, (]
[setPeriodInternal, (, period, ), ;, }, }, private, void, setPeriodInternal, (, ReadablePeriod, period, ), {, int, [, ], newValues, =]
[), ;, }, }, private, void, setPeriodInternal, (, ReadablePeriod, period, ), {, int, [, ], newValues, =, new, int, []
[), {, int, [, ], newValues, =, new, int, [, size, (, ), ], ;, for, (, int, i, =]
[], newValues, =, new, int, [, size, (, ), ], ;, for, (, int, i, =, 0, ,, isize, =]
[], newValues, =, new, int, [, size, (, ), ], ;, for, (, int, i, =, 0, ,, isize, =]
[size, (, ), ], ;, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;]
[size, (, ), ], ;, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;]
[), ], ;, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;, i, <]
[;, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;, i, <, isize, ;]
[;, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;, i, <, isize, ;]
[,, isize, =, period, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DurationFieldType, type, =]
[,, isize, =, period, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DurationFieldType, type, =]
[., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DurationFieldType, type, =, period, ., getFieldType, (]
[<, isize, ;, i, ++, ), {, DurationFieldType, type, =, period, ., getFieldType, (, i, ), ;, int, value, =]
[<, isize, ;, i, ++, ), {, DurationFieldType, type, =, period, ., getFieldType, (, i, ), ;, int, value, =]
[++, ), {, DurationFieldType, type, =, period, ., getFieldType, (, i, ), ;, int, value, =, period, ., getValue, (]
[DurationFieldType, type, =, period, ., getFieldType, (, i, ), ;, int, value, =, period, ., getValue, (, i, ), ;]
[=, period, ., getFieldType, (, i, ), ;, int, value, =, period, ., getValue, (, i, ), ;, checkAndUpdate, (]
[., getFieldType, (, i, ), ;, int, value, =, period, ., getValue, (, i, ), ;, checkAndUpdate, (, type, ,]
[(, i, ), ;, int, value, =, period, ., getValue, (, i, ), ;, checkAndUpdate, (, type, ,, newValues, ,]
[int, value, =, period, ., getValue, (, i, ), ;, checkAndUpdate, (, type, ,, newValues, ,, value, ), ;, }]
[=, period, ., getValue, (, i, ), ;, checkAndUpdate, (, type, ,, newValues, ,, value, ), ;, }, setValues, (]
[days, ,, int, hours, ,, int, minutes, ,, int, seconds, ,, int, millis, ), {, int, [, ], newValues, =]
[int, hours, ,, int, minutes, ,, int, seconds, ,, int, millis, ), {, int, [, ], newValues, =, setPeriodInternal, (]
[,, int, minutes, ,, int, seconds, ,, int, millis, ), {, int, [, ], newValues, =, setPeriodInternal, (, years, ,]
[minutes, ,, int, seconds, ,, int, millis, ), {, int, [, ], newValues, =, setPeriodInternal, (, years, ,, months, ,]
[int, seconds, ,, int, millis, ), {, int, [, ], newValues, =, setPeriodInternal, (, years, ,, months, ,, weeks, ,]
[,, int, millis, ), {, int, [, ], newValues, =, setPeriodInternal, (, years, ,, months, ,, weeks, ,, days, ,]
[millis, ), {, int, [, ], newValues, =, setPeriodInternal, (, years, ,, months, ,, weeks, ,, days, ,, hours, ,]
[{, int, [, ], newValues, =, setPeriodInternal, (, years, ,, months, ,, weeks, ,, days, ,, hours, ,, minutes, ,]
[[, ], newValues, =, setPeriodInternal, (, years, ,, months, ,, weeks, ,, days, ,, hours, ,, minutes, ,, seconds, ,]
[=, setPeriodInternal, (, years, ,, months, ,, weeks, ,, days, ,, hours, ,, minutes, ,, seconds, ,, millis, ), ;]
[(, years, ,, months, ,, weeks, ,, days, ,, hours, ,, minutes, ,, seconds, ,, millis, ), ;, setValues, (]
[days, ,, int, hours, ,, int, minutes, ,, int, seconds, ,, int, millis, ), {, int, [, ], newValues, =]
[hours, ,, int, minutes, ,, int, seconds, ,, int, millis, ), {, int, [, ], newValues, =, new, int, []
[int, seconds, ,, int, millis, ), {, int, [, ], newValues, =, new, int, [, size, (, ), ], ;]
[,, int, millis, ), {, int, [, ], newValues, =, new, int, [, size, (, ), ], ;, checkAndUpdate, (]
[,, int, millis, ), {, int, [, ], newValues, =, new, int, [, size, (, ), ], ;, checkAndUpdate, (]
[[, ], newValues, =, new, int, [, size, (, ), ], ;, checkAndUpdate, (, DurationFieldType, ., years, (, ), ,]
[newValues, =, new, int, [, size, (, ), ], ;, checkAndUpdate, (, DurationFieldType, ., years, (, ), ,, newValues, ,]
[int, [, size, (, ), ], ;, checkAndUpdate, (, DurationFieldType, ., years, (, ), ,, newValues, ,, years, ), ;]
[size, (, ), ], ;, checkAndUpdate, (, DurationFieldType, ., years, (, ), ,, newValues, ,, years, ), ;, checkAndUpdate, (]
[size, (, ), ], ;, checkAndUpdate, (, DurationFieldType, ., years, (, ), ,, newValues, ,, years, ), ;, checkAndUpdate, (]
[(, DurationFieldType, ., years, (, ), ,, newValues, ,, years, ), ;, checkAndUpdate, (, DurationFieldType, ., months, (, ), ,]
[., years, (, ), ,, newValues, ,, years, ), ;, checkAndUpdate, (, DurationFieldType, ., months, (, ), ,, newValues, ,]
[), ,, newValues, ,, years, ), ;, checkAndUpdate, (, DurationFieldType, ., months, (, ), ,, newValues, ,, months, ), ;]
[newValues, ,, years, ), ;, checkAndUpdate, (, DurationFieldType, ., months, (, ), ,, newValues, ,, months, ), ;, checkAndUpdate, (]
[newValues, ,, years, ), ;, checkAndUpdate, (, DurationFieldType, ., months, (, ), ,, newValues, ,, months, ), ;, checkAndUpdate, (]
[(, DurationFieldType, ., months, (, ), ,, newValues, ,, months, ), ;, checkAndUpdate, (, DurationFieldType, ., weeks, (, ), ,]
[., months, (, ), ,, newValues, ,, months, ), ;, checkAndUpdate, (, DurationFieldType, ., weeks, (, ), ,, newValues, ,]
[), ,, newValues, ,, months, ), ;, checkAndUpdate, (, DurationFieldType, ., weeks, (, ), ,, newValues, ,, weeks, ), ;]
[newValues, ,, months, ), ;, checkAndUpdate, (, DurationFieldType, ., weeks, (, ), ,, newValues, ,, weeks, ), ;, checkAndUpdate, (]
[newValues, ,, months, ), ;, checkAndUpdate, (, DurationFieldType, ., weeks, (, ), ,, newValues, ,, weeks, ), ;, checkAndUpdate, (]
[(, DurationFieldType, ., weeks, (, ), ,, newValues, ,, weeks, ), ;, checkAndUpdate, (, DurationFieldType, ., days, (, ), ,]
[., weeks, (, ), ,, newValues, ,, weeks, ), ;, checkAndUpdate, (, DurationFieldType, ., days, (, ), ,, newValues, ,]
[), ,, newValues, ,, weeks, ), ;, checkAndUpdate, (, DurationFieldType, ., days, (, ), ,, newValues, ,, days, ), ;]
[newValues, ,, weeks, ), ;, checkAndUpdate, (, DurationFieldType, ., days, (, ), ,, newValues, ,, days, ), ;, checkAndUpdate, (]
[newValues, ,, weeks, ), ;, checkAndUpdate, (, DurationFieldType, ., days, (, ), ,, newValues, ,, days, ), ;, checkAndUpdate, (]
[(, DurationFieldType, ., days, (, ), ,, newValues, ,, days, ), ;, checkAndUpdate, (, DurationFieldType, ., hours, (, ), ,]
[., days, (, ), ,, newValues, ,, days, ), ;, checkAndUpdate, (, DurationFieldType, ., hours, (, ), ,, newValues, ,]
[), ,, newValues, ,, days, ), ;, checkAndUpdate, (, DurationFieldType, ., hours, (, ), ,, newValues, ,, hours, ), ;]
[newValues, ,, days, ), ;, checkAndUpdate, (, DurationFieldType, ., hours, (, ), ,, newValues, ,, hours, ), ;, checkAndUpdate, (]
[newValues, ,, days, ), ;, checkAndUpdate, (, DurationFieldType, ., hours, (, ), ,, newValues, ,, hours, ), ;, checkAndUpdate, (]
[(, DurationFieldType, ., hours, (, ), ,, newValues, ,, hours, ), ;, checkAndUpdate, (, DurationFieldType, ., minutes, (, ), ,]
[., hours, (, ), ,, newValues, ,, hours, ), ;, checkAndUpdate, (, DurationFieldType, ., minutes, (, ), ,, newValues, ,]
[), ,, newValues, ,, hours, ), ;, checkAndUpdate, (, DurationFieldType, ., minutes, (, ), ,, newValues, ,, minutes, ), ;]
[newValues, ,, hours, ), ;, checkAndUpdate, (, DurationFieldType, ., minutes, (, ), ,, newValues, ,, minutes, ), ;, checkAndUpdate, (]
[newValues, ,, hours, ), ;, checkAndUpdate, (, DurationFieldType, ., minutes, (, ), ,, newValues, ,, minutes, ), ;, checkAndUpdate, (]
[(, DurationFieldType, ., minutes, (, ), ,, newValues, ,, minutes, ), ;, checkAndUpdate, (, DurationFieldType, ., seconds, (, ), ,]
[., minutes, (, ), ,, newValues, ,, minutes, ), ;, checkAndUpdate, (, DurationFieldType, ., seconds, (, ), ,, newValues, ,]
[), ,, newValues, ,, minutes, ), ;, checkAndUpdate, (, DurationFieldType, ., seconds, (, ), ,, newValues, ,, seconds, ), ;]
[newValues, ,, minutes, ), ;, checkAndUpdate, (, DurationFieldType, ., seconds, (, ), ,, newValues, ,, seconds, ), ;, checkAndUpdate, (]
[newValues, ,, minutes, ), ;, checkAndUpdate, (, DurationFieldType, ., seconds, (, ), ,, newValues, ,, seconds, ), ;, checkAndUpdate, (]
[(, DurationFieldType, ., seconds, (, ), ,, newValues, ,, seconds, ), ;, checkAndUpdate, (, DurationFieldType, ., millis, (, ), ,]
[., seconds, (, ), ,, newValues, ,, seconds, ), ;, checkAndUpdate, (, DurationFieldType, ., millis, (, ), ,, newValues, ,]
[,, newValues, ,, seconds, ), ;, checkAndUpdate, (, DurationFieldType, ., millis, (, ), ,, newValues, ,, millis, ), ;, return]
[newValues, ,, millis, ), ;, return, newValues, ;, }, protected, void, setField, (, DurationFieldType, field, ,, int, value, ), {]
[millis, ), ;, return, newValues, ;, }, protected, void, setField, (, DurationFieldType, field, ,, int, value, ), {, setFieldInto, (]
[;, return, newValues, ;, }, protected, void, setField, (, DurationFieldType, field, ,, int, value, ), {, setFieldInto, (, iValues, ,]
[newValues, ;, }, protected, void, setField, (, DurationFieldType, field, ,, int, value, ), {, setFieldInto, (, iValues, ,, field, ,]
[}, protected, void, setFieldInto, (, int, [, ], values, ,, DurationFieldType, field, ,, int, value, ), {, int, index, =]
[void, setFieldInto, (, int, [, ], values, ,, DurationFieldType, field, ,, int, value, ), {, int, index, =, indexOf, (]
[], values, ,, DurationFieldType, field, ,, int, value, ), {, int, index, =, indexOf, (, field, ), ;, if, (]
[], values, ,, DurationFieldType, field, ,, int, value, ), {, int, index, =, indexOf, (, field, ), ;, if, (]
[,, DurationFieldType, field, ,, int, value, ), {, int, index, =, indexOf, (, field, ), ;, if, (, index, ==]
[DurationFieldType, field, ,, int, value, ), {, int, index, =, indexOf, (, field, ), ;, if, (, index, ==, -]
[), {, int, index, =, indexOf, (, field, ), ;, if, (, index, ==, -, 1, ), {, if, (]
[), {, int, index, =, indexOf, (, field, ), ;, if, (, index, ==, -, 1, ), {, if, (]
[), {, int, index, =, indexOf, (, field, ), ;, if, (, index, ==, -, 1, ), {, if, (]
[int, index, =, indexOf, (, field, ), ;, if, (, index, ==, -, 1, ), {, if, (, value, !=]
[=, indexOf, (, field, ), ;, if, (, index, ==, -, 1, ), {, if, (, value, !=, 0, ||]
[=, indexOf, (, field, ), ;, if, (, index, ==, -, 1, ), {, if, (, value, !=, 0, ||]
[(, field, ), ;, if, (, index, ==, -, 1, ), {, if, (, value, !=, 0, ||, field, ==]
[if, (, index, ==, -, 1, ), {, if, (, value, !=, 0, ||, field, ==, null, ), {, throw]
[==, -, 1, ), {, if, (, value, !=, 0, ||, field, ==, null, ), {, throw, new, IllegalArgumentException, (]
[==, -, 1, ), {, if, (, value, !=, 0, ||, field, ==, null, ), {, throw, new, IllegalArgumentException, (]
[==, -, 1, ), {, if, (, value, !=, 0, ||, field, ==, null, ), {, throw, new, IllegalArgumentException, (]
[1, ), {, if, (, value, !=, 0, ||, field, ==, null, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +]
[{, if, (, value, !=, 0, ||, field, ==, null, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +, field, +]
[field, ==, null, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +, field, +, "'", ), ;, }, }, else, {]
[field, ==, null, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +, field, +, "'", ), ;, }, }, else, {]
[null, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +, field, +, "'", ), ;, }, }, else, {, values, []
[throw, new, IllegalArgumentException, (, "Period does not support field '", +, field, +, "'", ), ;, }, }, else, {, values, [, index, ], =]
[values, [, index, ], =, value, ;, }, }, protected, void, addField, (, DurationFieldType, field, ,, int, value, ), {]
[index, ], =, value, ;, }, }, protected, void, addField, (, DurationFieldType, field, ,, int, value, ), {, addFieldInto, (]
[=, value, ;, }, }, protected, void, addField, (, DurationFieldType, field, ,, int, value, ), {, addFieldInto, (, iValues, ,]
[;, }, }, protected, void, addField, (, DurationFieldType, field, ,, int, value, ), {, addFieldInto, (, iValues, ,, field, ,]
[}, protected, void, addFieldInto, (, int, [, ], values, ,, DurationFieldType, field, ,, int, value, ), {, int, index, =]
[void, addFieldInto, (, int, [, ], values, ,, DurationFieldType, field, ,, int, value, ), {, int, index, =, indexOf, (]
[], values, ,, DurationFieldType, field, ,, int, value, ), {, int, index, =, indexOf, (, field, ), ;, if, (]
[], values, ,, DurationFieldType, field, ,, int, value, ), {, int, index, =, indexOf, (, field, ), ;, if, (]
[,, DurationFieldType, field, ,, int, value, ), {, int, index, =, indexOf, (, field, ), ;, if, (, index, ==]
[DurationFieldType, field, ,, int, value, ), {, int, index, =, indexOf, (, field, ), ;, if, (, index, ==, -]
[), {, int, index, =, indexOf, (, field, ), ;, if, (, index, ==, -, 1, ), {, if, (]
[), {, int, index, =, indexOf, (, field, ), ;, if, (, index, ==, -, 1, ), {, if, (]
[), {, int, index, =, indexOf, (, field, ), ;, if, (, index, ==, -, 1, ), {, if, (]
[int, index, =, indexOf, (, field, ), ;, if, (, index, ==, -, 1, ), {, if, (, value, !=]
[=, indexOf, (, field, ), ;, if, (, index, ==, -, 1, ), {, if, (, value, !=, 0, ||]
[=, indexOf, (, field, ), ;, if, (, index, ==, -, 1, ), {, if, (, value, !=, 0, ||]
[(, field, ), ;, if, (, index, ==, -, 1, ), {, if, (, value, !=, 0, ||, field, ==]
[if, (, index, ==, -, 1, ), {, if, (, value, !=, 0, ||, field, ==, null, ), {, throw]
[==, -, 1, ), {, if, (, value, !=, 0, ||, field, ==, null, ), {, throw, new, IllegalArgumentException, (]
[==, -, 1, ), {, if, (, value, !=, 0, ||, field, ==, null, ), {, throw, new, IllegalArgumentException, (]
[==, -, 1, ), {, if, (, value, !=, 0, ||, field, ==, null, ), {, throw, new, IllegalArgumentException, (]
[1, ), {, if, (, value, !=, 0, ||, field, ==, null, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +]
[{, if, (, value, !=, 0, ||, field, ==, null, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +, field, +]
[field, ==, null, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +, field, +, "'", ), ;, }, }, else, {]
[field, ==, null, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +, field, +, "'", ), ;, }, }, else, {]
[null, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +, field, +, "'", ), ;, }, }, else, {, values, []
[throw, new, IllegalArgumentException, (, "Period does not support field '", +, field, +, "'", ), ;, }, }, else, {, values, [, index, ], =]
[throw, new, IllegalArgumentException, (, "Period does not support field '", +, field, +, "'", ), ;, }, }, else, {, values, [, index, ], =]
["Period does not support field '", +, field, +, "'", ), ;, }, }, else, {, values, [, index, ], =, FieldUtils, ., safeAdd, (]
["Period does not support field '", +, field, +, "'", ), ;, }, }, else, {, values, [, index, ], =, FieldUtils, ., safeAdd, (]
[field, +, "'", ), ;, }, }, else, {, values, [, index, ], =, FieldUtils, ., safeAdd, (, values, []
[), ;, }, }, else, {, values, [, index, ], =, FieldUtils, ., safeAdd, (, values, [, index, ], ,]
[values, [, index, ], ,, value, ), ;, }, }, protected, void, mergePeriod, (, ReadablePeriod, period, ), {, if, (]
[values, [, index, ], ,, value, ), ;, }, }, protected, void, mergePeriod, (, ReadablePeriod, period, ), {, if, (]
[index, ], ,, value, ), ;, }, }, protected, void, mergePeriod, (, ReadablePeriod, period, ), {, if, (, period, !=]
[value, ), ;, }, }, protected, void, mergePeriod, (, ReadablePeriod, period, ), {, if, (, period, !=, null, ), {]
[;, }, }, protected, void, mergePeriod, (, ReadablePeriod, period, ), {, if, (, period, !=, null, ), {, setValues, (]
[}, protected, void, mergePeriod, (, ReadablePeriod, period, ), {, if, (, period, !=, null, ), {, setValues, (, mergePeriodInto, (]
[(, ReadablePeriod, period, ), {, if, (, period, !=, null, ), {, setValues, (, mergePeriodInto, (, getValues, (, ), ,]
[protected, int, [, ], mergePeriodInto, (, int, [, ], values, ,, ReadablePeriod, period, ), {, for, (, int, i, =]
[mergePeriodInto, (, int, [, ], values, ,, ReadablePeriod, period, ), {, for, (, int, i, =, 0, ,, isize, =]
[mergePeriodInto, (, int, [, ], values, ,, ReadablePeriod, period, ), {, for, (, int, i, =, 0, ,, isize, =]
[,, ReadablePeriod, period, ), {, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;]
[,, ReadablePeriod, period, ), {, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;]
[period, ), {, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;, i, <]
[{, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;, i, <, isize, ;]
[{, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;, i, <, isize, ;]
[,, isize, =, period, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DurationFieldType, type, =]
[,, isize, =, period, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DurationFieldType, type, =]
[., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DurationFieldType, type, =, period, ., getFieldType, (]
[<, isize, ;, i, ++, ), {, DurationFieldType, type, =, period, ., getFieldType, (, i, ), ;, int, value, =]
[<, isize, ;, i, ++, ), {, DurationFieldType, type, =, period, ., getFieldType, (, i, ), ;, int, value, =]
[++, ), {, DurationFieldType, type, =, period, ., getFieldType, (, i, ), ;, int, value, =, period, ., getValue, (]
[DurationFieldType, type, =, period, ., getFieldType, (, i, ), ;, int, value, =, period, ., getValue, (, i, ), ;]
[=, period, ., getFieldType, (, i, ), ;, int, value, =, period, ., getValue, (, i, ), ;, checkAndUpdate, (]
[., getFieldType, (, i, ), ;, int, value, =, period, ., getValue, (, i, ), ;, checkAndUpdate, (, type, ,]
[(, i, ), ;, int, value, =, period, ., getValue, (, i, ), ;, checkAndUpdate, (, type, ,, values, ,]
[value, =, period, ., getValue, (, i, ), ;, checkAndUpdate, (, type, ,, values, ,, value, ), ;, }, return]
[values, ,, value, ), ;, }, return, values, ;, }, protected, void, addPeriod, (, ReadablePeriod, period, ), {, if, (]
[values, ,, value, ), ;, }, return, values, ;, }, protected, void, addPeriod, (, ReadablePeriod, period, ), {, if, (]
[value, ), ;, }, return, values, ;, }, protected, void, addPeriod, (, ReadablePeriod, period, ), {, if, (, period, !=]
[}, return, values, ;, }, protected, void, addPeriod, (, ReadablePeriod, period, ), {, if, (, period, !=, null, ), {]
[values, ;, }, protected, void, addPeriod, (, ReadablePeriod, period, ), {, if, (, period, !=, null, ), {, setValues, (]
[}, protected, void, addPeriod, (, ReadablePeriod, period, ), {, if, (, period, !=, null, ), {, setValues, (, addPeriodInto, (]
[(, ReadablePeriod, period, ), {, if, (, period, !=, null, ), {, setValues, (, addPeriodInto, (, getValues, (, ), ,]
[protected, int, [, ], addPeriodInto, (, int, [, ], values, ,, ReadablePeriod, period, ), {, for, (, int, i, =]
[addPeriodInto, (, int, [, ], values, ,, ReadablePeriod, period, ), {, for, (, int, i, =, 0, ,, isize, =]
[addPeriodInto, (, int, [, ], values, ,, ReadablePeriod, period, ), {, for, (, int, i, =, 0, ,, isize, =]
[,, ReadablePeriod, period, ), {, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;]
[,, ReadablePeriod, period, ), {, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;]
[period, ), {, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;, i, <]
[{, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;, i, <, isize, ;]
[{, for, (, int, i, =, 0, ,, isize, =, period, ., size, (, ), ;, i, <, isize, ;]
[,, isize, =, period, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DurationFieldType, type, =]
[,, isize, =, period, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DurationFieldType, type, =]
[., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DurationFieldType, type, =, period, ., getFieldType, (]
[<, isize, ;, i, ++, ), {, DurationFieldType, type, =, period, ., getFieldType, (, i, ), ;, int, value, =]
[<, isize, ;, i, ++, ), {, DurationFieldType, type, =, period, ., getFieldType, (, i, ), ;, int, value, =]
[++, ), {, DurationFieldType, type, =, period, ., getFieldType, (, i, ), ;, int, value, =, period, ., getValue, (]
[=, period, ., getFieldType, (, i, ), ;, int, value, =, period, ., getValue, (, i, ), ;, if, (]
[=, period, ., getFieldType, (, i, ), ;, int, value, =, period, ., getValue, (, i, ), ;, if, (]
[., getFieldType, (, i, ), ;, int, value, =, period, ., getValue, (, i, ), ;, if, (, value, !=]
[int, value, =, period, ., getValue, (, i, ), ;, if, (, value, !=, 0, ), {, int, index, =]
[=, period, ., getValue, (, i, ), ;, if, (, value, !=, 0, ), {, int, index, =, indexOf, (]
[i, ), ;, if, (, value, !=, 0, ), {, int, index, =, indexOf, (, type, ), ;, if, (]
[i, ), ;, if, (, value, !=, 0, ), {, int, index, =, indexOf, (, type, ), ;, if, (]
[;, if, (, value, !=, 0, ), {, int, index, =, indexOf, (, type, ), ;, if, (, index, ==]
[if, (, value, !=, 0, ), {, int, index, =, indexOf, (, type, ), ;, if, (, index, ==, -]
[0, ), {, int, index, =, indexOf, (, type, ), ;, if, (, index, ==, -, 1, ), {, throw]
[int, index, =, indexOf, (, type, ), ;, if, (, index, ==, -, 1, ), {, throw, new, IllegalArgumentException, (]
[int, index, =, indexOf, (, type, ), ;, if, (, index, ==, -, 1, ), {, throw, new, IllegalArgumentException, (]
[int, index, =, indexOf, (, type, ), ;, if, (, index, ==, -, 1, ), {, throw, new, IllegalArgumentException, (]
[=, indexOf, (, type, ), ;, if, (, index, ==, -, 1, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +]
[=, indexOf, (, type, ), ;, if, (, index, ==, -, 1, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +]
[if, (, index, ==, -, 1, ), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +, type, ., getName, (, ), +]
[), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +, type, ., getName, (, ), +, "'", ), ;, }, else, {]
[), {, throw, new, IllegalArgumentException, (, "Period does not support field '", +, type, ., getName, (, ), +, "'", ), ;, }, else, {]
[throw, new, IllegalArgumentException, (, "Period does not support field '", +, type, ., getName, (, ), +, "'", ), ;, }, else, {, values, []
[(, "Period does not support field '", +, type, ., getName, (, ), +, "'", ), ;, }, else, {, values, [, index, ], =]
[(, "Period does not support field '", +, type, ., getName, (, ), +, "'", ), ;, }, else, {, values, [, index, ], =]
[., getName, (, ), +, "'", ), ;, }, else, {, values, [, index, ], =, FieldUtils, ., safeAdd, (]
[(, ), +, "'", ), ;, }, else, {, values, [, index, ], =, FieldUtils, ., safeAdd, (, getValue, (]
["'", ), ;, }, else, {, values, [, index, ], =, FieldUtils, ., safeAdd, (, getValue, (, index, ), ,]
[[, index, ], =, FieldUtils, ., safeAdd, (, getValue, (, index, ), ,, value, ), ;, }, }, }, return]
[), ;, }, }, }, return, values, ;, }, protected, void, setValue, (, int, index, ,, int, value, ), {]
[), ;, }, }, }, return, values, ;, }, protected, void, setValue, (, int, index, ,, int, value, ), {]
[}, }, }, return, values, ;, }, protected, void, setValue, (, int, index, ,, int, value, ), {, iValues, []
[return, values, ;, }, protected, void, setValue, (, int, index, ,, int, value, ), {, iValues, [, index, ], =]
[), {, iValues, [, index, ], =, value, ;, }, protected, void, setValues, (, int, [, ], values, ), {]
[), {, iValues, [, index, ], =, value, ;, }, protected, void, setValues, (, int, [, ], values, ), {]
[index, ], =, value, ;, }, protected, void, setValues, (, int, [, ], values, ), {, System, ., arraycopy, (]
[=, value, ;, }, protected, void, setValues, (, int, [, ], values, ), {, System, ., arraycopy, (, values, ,]
[;, }, protected, void, setValues, (, int, [, ], values, ), {, System, ., arraycopy, (, values, ,, 0, ,]
[protected, void, setValues, (, int, [, ], values, ), {, System, ., arraycopy, (, values, ,, 0, ,, iValues, ,]
[setValues, (, int, [, ], values, ), {, System, ., arraycopy, (, values, ,, 0, ,, iValues, ,, 0, ,]
[setValues, (, int, [, ], values, ), {, System, ., arraycopy, (, values, ,, 0, ,, iValues, ,, 0, ,]
