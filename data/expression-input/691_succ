[;, private, final, ScopeCreator, delegate, ;, MemoizedScopeCreator, (, ScopeCreator, delegate, ), {, this, ., delegate, =, delegate, ;, }, @]
[., newHashMap, (, ), ;, private, final, ScopeCreator, delegate, ;, MemoizedScopeCreator, (, ScopeCreator, delegate, ), {, this, ., delegate, =]
[=, delegate, ;, }, @, Override, public, Iterable, <, Var, >, getReferences, (, Var, var, ), {, return, ImmutableList, .]
[., delegate, =, delegate, ;, }, @, Override, public, Iterable, <, Var, >, getReferences, (, Var, var, ), {, return]
[;, }, @, Override, public, Iterable, <, Var, >, getReferences, (, Var, var, ), {, return, ImmutableList, ., of, (]
[;, }, @, Override, public, Scope, getScope, (, Var, var, ), {, return, var, ., scope, ;, }, @, Override]
[., of, (, var, ), ;, }, @, Override, public, Scope, getScope, (, Var, var, ), {, return, var, .]
[), ;, }, @, Override, public, Scope, getScope, (, Var, var, ), {, return, var, ., scope, ;, }, @]
[;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, List, <, Var, >, vars, =, Lists]
[., scope, ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, List, <, Var, >, vars]
[;, for, (, Scope, s, :, scopes, ., values, (, ), ), {, Iterables, ., addAll, (, vars, ,, s]
[., newArrayList, (, ), ;, for, (, Scope, s, :, scopes, ., values, (, ), ), {, Iterables, ., addAll]
[), {, Iterables, ., addAll, (, vars, ,, s, ., getAllSymbols, (, ), ), ;, }, return, vars, ;, }]
[., values, (, ), ), {, Iterables, ., addAll, (, vars, ,, s, ., getAllSymbols, (, ), ), ;, }]
[;, }, return, vars, ;, }, @, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {, Scope]
[., addAll, (, vars, ,, s, ., getAllSymbols, (, ), ), ;, }, return, vars, ;, }, @, Override, public]
[,, s, ., getAllSymbols, (, ), ), ;, }, return, vars, ;, }, @, Override, public, Scope, createScope, (, Node]
[), ;, }, return, vars, ;, }, @, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {]
[., getAllSymbols, (, ), ), ;, }, return, vars, ;, }, @, Override, public, Scope, createScope, (, Node, n, ,]
[;, }, @, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {, Scope, scope, =, scopes, .]
[;, if, (, scope, ==, null, ), {, scope, =, delegate, ., createScope, (, n, ,, parent, ), ;, scopes]
[., get, (, n, ), ;, if, (, scope, ==, null, ), {, scope, =, delegate, ., createScope, (, n]
[), ;, if, (, scope, ==, null, ), {, scope, =, delegate, ., createScope, (, n, ,, parent, ), ;]
[), {, scope, =, delegate, ., createScope, (, n, ,, parent, ), ;, scopes, ., put, (, n, ,, scope]
[==, null, ), {, scope, =, delegate, ., createScope, (, n, ,, parent, ), ;, scopes, ., put, (, n]
[), {, scope, =, delegate, ., createScope, (, n, ,, parent, ), ;, scopes, ., put, (, n, ,, scope]
[=, delegate, ., createScope, (, n, ,, parent, ), ;, scopes, ., put, (, n, ,, scope, ), ;, }]
[;, scopes, ., put, (, n, ,, scope, ), ;, }, else, {, Preconditions, ., checkState, (, parent, ==, scope]
[., createScope, (, n, ,, parent, ), ;, scopes, ., put, (, n, ,, scope, ), ;, }, else, {]
[,, parent, ), ;, scopes, ., put, (, n, ,, scope, ), ;, }, else, {, Preconditions, ., checkState, (]
[), ;, scopes, ., put, (, n, ,, scope, ), ;, }, else, {, Preconditions, ., checkState, (, parent, ==]
[;, }, else, {, Preconditions, ., checkState, (, parent, ==, scope, ., getParent, (, ), ), ;, }, return, scope]
[., put, (, n, ,, scope, ), ;, }, else, {, Preconditions, ., checkState, (, parent, ==, scope, ., getParent]
[,, scope, ), ;, }, else, {, Preconditions, ., checkState, (, parent, ==, scope, ., getParent, (, ), ), ;]
[), ;, }, else, {, Preconditions, ., checkState, (, parent, ==, scope, ., getParent, (, ), ), ;, }, return]
[;, }, return, scope, ;, }, Collection, <, Scope, >, getAllMemoizedScopes, (, ), {, return, Collections, ., unmodifiableCollection, (, scopes]
[., checkState, (, parent, ==, scope, ., getParent, (, ), ), ;, }, return, scope, ;, }, Collection, <, Scope]
[), ;, }, return, scope, ;, }, Collection, <, Scope, >, getAllMemoizedScopes, (, ), {, return, Collections, ., unmodifiableCollection, (]
[==, scope, ., getParent, (, ), ), ;, }, return, scope, ;, }, Collection, <, Scope, >, getAllMemoizedScopes, (, )]
[), ;, }, return, scope, ;, }, Collection, <, Scope, >, getAllMemoizedScopes, (, ), {, return, Collections, ., unmodifiableCollection, (]
[., getParent, (, ), ), ;, }, return, scope, ;, }, Collection, <, Scope, >, getAllMemoizedScopes, (, ), {, return]
[;, }, Collection, <, Scope, >, getAllMemoizedScopes, (, ), {, return, Collections, ., unmodifiableCollection, (, scopes, ., values, (, )]
[;, }, Scope, getScopeIfMemoized, (, Node, n, ), {, return, scopes, ., get, (, n, ), ;, }, void, removeScopesForScript]
[., unmodifiableCollection, (, scopes, ., values, (, ), ), ;, }, Scope, getScopeIfMemoized, (, Node, n, ), {, return, scopes]
[), ;, }, Scope, getScopeIfMemoized, (, Node, n, ), {, return, scopes, ., get, (, n, ), ;, }, void]
[., values, (, ), ), ;, }, Scope, getScopeIfMemoized, (, Node, n, ), {, return, scopes, ., get, (, n]
[;, }, void, removeScopesForScript, (, String, scriptName, ), {, for, (, Node, scopeRoot, :, ImmutableSet, ., copyOf, (, scopes, .]
[., get, (, n, ), ;, }, void, removeScopesForScript, (, String, scriptName, ), {, for, (, Node, scopeRoot, :, ImmutableSet]
[), ;, }, void, removeScopesForScript, (, String, scriptName, ), {, for, (, Node, scopeRoot, :, ImmutableSet, ., copyOf, (, scopes]
[), {, if, (, scriptName, ., equals, (, scopeRoot, ., getSourceFileName, (, ), ), ), {, scopes, ., remove, (]
[., copyOf, (, scopes, ., keySet, (, ), ), ), {, if, (, scriptName, ., equals, (, scopeRoot, ., getSourceFileName]
[), ), {, if, (, scriptName, ., equals, (, scopeRoot, ., getSourceFileName, (, ), ), ), {, scopes, ., remove]
[., keySet, (, ), ), ), {, if, (, scriptName, ., equals, (, scopeRoot, ., getSourceFileName, (, ), ), )]
[), {, scopes, ., remove, (, scopeRoot, ), ;, }, }, }, }]
[., equals, (, scopeRoot, ., getSourceFileName, (, ), ), ), {, scopes, ., remove, (, scopeRoot, ), ;, }, }]
[), ), {, scopes, ., remove, (, scopeRoot, ), ;, }, }, }, }]
[., getSourceFileName, (, ), ), ), {, scopes, ., remove, (, scopeRoot, ), ;, }, }, }, }]
[;, }, }, }, }]
[., remove, (, scopeRoot, ), ;, }, }, }, }]
[), ;, }, }, }, }]
