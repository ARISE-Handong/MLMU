[externalExecutor, ;, private, ExecutorService, executor, ;, private, Future, <, T, >, future, ;, protected, BackgroundInitializer, (, ), {, this, (]
[;, protected, BackgroundInitializer, (, ), {, this, (, null, ), ;, }, protected, BackgroundInitializer, (, final, ExecutorService, exec, ), {]
[BackgroundInitializer, (, ), {, this, (, null, ), ;, }, protected, BackgroundInitializer, (, final, ExecutorService, exec, ), {, setExternalExecutor, (]
[final, ExecutorService, exec, ), {, setExternalExecutor, (, exec, ), ;, }, public, final, synchronized, ExecutorService, getExternalExecutor, (, ), {, return]
[public, final, synchronized, ExecutorService, getExternalExecutor, (, ), {, return, externalExecutor, ;, }, public, synchronized, boolean, isStarted, (, ), {, return]
[public, final, synchronized, ExecutorService, getExternalExecutor, (, ), {, return, externalExecutor, ;, }, public, synchronized, boolean, isStarted, (, ), {, return]
[synchronized, ExecutorService, getExternalExecutor, (, ), {, return, externalExecutor, ;, }, public, synchronized, boolean, isStarted, (, ), {, return, future, !=]
[{, return, future, !=, null, ;, }, public, final, synchronized, void, setExternalExecutor, (, final, ExecutorService, externalExecutor, ), {, if, (]
[}, public, final, synchronized, void, setExternalExecutor, (, final, ExecutorService, externalExecutor, ), {, if, (, isStarted, (, ), ), {, throw]
[synchronized, void, setExternalExecutor, (, final, ExecutorService, externalExecutor, ), {, if, (, isStarted, (, ), ), {, throw, new, IllegalStateException, (]
[final, ExecutorService, externalExecutor, ), {, if, (, isStarted, (, ), ), {, throw, new, IllegalStateException, (, "Cannot set ExecutorService after start()!", ), ;, }]
[final, ExecutorService, externalExecutor, ), {, if, (, isStarted, (, ), ), {, throw, new, IllegalStateException, (, "Cannot set ExecutorService after start()!", ), ;, }]
[{, if, (, isStarted, (, ), ), {, throw, new, IllegalStateException, (, "Cannot set ExecutorService after start()!", ), ;, }, this, ., externalExecutor, =]
["Cannot set ExecutorService after start()!", ), ;, }, this, ., externalExecutor, =, externalExecutor, ;, }, public, synchronized, boolean, start, (, ), {, if, (]
[), ;, }, this, ., externalExecutor, =, externalExecutor, ;, }, public, synchronized, boolean, start, (, ), {, if, (, !]
[;, }, public, synchronized, boolean, start, (, ), {, if, (, !, isStarted, (, ), ), {, ExecutorService, tempExec, ;]
[public, synchronized, boolean, start, (, ), {, if, (, !, isStarted, (, ), ), {, ExecutorService, tempExec, ;, executor, =]
[{, if, (, !, isStarted, (, ), ), {, ExecutorService, tempExec, ;, executor, =, getExternalExecutor, (, ), ;, if, (]
[{, if, (, !, isStarted, (, ), ), {, ExecutorService, tempExec, ;, executor, =, getExternalExecutor, (, ), ;, if, (]
[(, !, isStarted, (, ), ), {, ExecutorService, tempExec, ;, executor, =, getExternalExecutor, (, ), ;, if, (, executor, ==]
[(, ), ), {, ExecutorService, tempExec, ;, executor, =, getExternalExecutor, (, ), ;, if, (, executor, ==, null, ), {]
[), {, ExecutorService, tempExec, ;, executor, =, getExternalExecutor, (, ), ;, if, (, executor, ==, null, ), {, executor, =]
[ExecutorService, tempExec, ;, executor, =, getExternalExecutor, (, ), ;, if, (, executor, ==, null, ), {, executor, =, tempExec, =]
[), ;, if, (, executor, ==, null, ), {, executor, =, tempExec, =, createExecutor, (, ), ;, }, else, {]
[if, (, executor, ==, null, ), {, executor, =, tempExec, =, createExecutor, (, ), ;, }, else, {, tempExec, =]
[==, null, ), {, executor, =, tempExec, =, createExecutor, (, ), ;, }, else, {, tempExec, =, null, ;, }]
[), {, executor, =, tempExec, =, createExecutor, (, ), ;, }, else, {, tempExec, =, null, ;, }, future, =]
[), {, executor, =, tempExec, =, createExecutor, (, ), ;, }, else, {, tempExec, =, null, ;, }, future, =]
[tempExec, =, createExecutor, (, ), ;, }, else, {, tempExec, =, null, ;, }, future, =, executor, ., submit, (]
[createExecutor, (, ), ;, }, else, {, tempExec, =, null, ;, }, future, =, executor, ., submit, (, createTask, (]
[else, {, tempExec, =, null, ;, }, future, =, executor, ., submit, (, createTask, (, tempExec, ), ), ;, return]
[null, ;, }, future, =, executor, ., submit, (, createTask, (, tempExec, ), ), ;, return, true, ;, }, return]
[true, ;, }, return, false, ;, }, @, Override, public, T, get, (, ), throws, ConcurrentException, {, try, {, return]
[true, ;, }, return, false, ;, }, @, Override, public, T, get, (, ), throws, ConcurrentException, {, try, {, return]
[{, try, {, return, getFuture, (, ), ., get, (, ), ;, }, catch, (, final, ExecutionException, execex, ), {]
[{, try, {, return, getFuture, (, ), ., get, (, ), ;, }, catch, (, final, ExecutionException, execex, ), {]
[getFuture, (, ), ., get, (, ), ;, }, catch, (, final, ExecutionException, execex, ), {, ConcurrentUtils, ., handleCause, (]
[get, (, ), ;, }, catch, (, final, ExecutionException, execex, ), {, ConcurrentUtils, ., handleCause, (, execex, ), ;, return]
[), {, ConcurrentUtils, ., handleCause, (, execex, ), ;, return, null, ;, }, catch, (, final, InterruptedException, iex, ), {]
[), {, ConcurrentUtils, ., handleCause, (, execex, ), ;, return, null, ;, }, catch, (, final, InterruptedException, iex, ), {]
[), {, ConcurrentUtils, ., handleCause, (, execex, ), ;, return, null, ;, }, catch, (, final, InterruptedException, iex, ), {]
[;, }, catch, (, final, InterruptedException, iex, ), {, Thread, ., currentThread, (, ), ., interrupt, (, ), ;, throw]
[(, final, InterruptedException, iex, ), {, Thread, ., currentThread, (, ), ., interrupt, (, ), ;, throw, new, ConcurrentException, (]
[new, ConcurrentException, (, iex, ), ;, }, }, public, synchronized, Future, <, T, >, getFuture, (, ), {, if, (]
[new, ConcurrentException, (, iex, ), ;, }, }, public, synchronized, Future, <, T, >, getFuture, (, ), {, if, (]
[(, iex, ), ;, }, }, public, synchronized, Future, <, T, >, getFuture, (, ), {, if, (, future, ==]
[}, }, public, synchronized, Future, <, T, >, getFuture, (, ), {, if, (, future, ==, null, ), {, throw]
[synchronized, Future, <, T, >, getFuture, (, ), {, if, (, future, ==, null, ), {, throw, new, IllegalStateException, (]
[getFuture, (, ), {, if, (, future, ==, null, ), {, throw, new, IllegalStateException, (, "start() must be called first!", ), ;, }, return]
[new, IllegalStateException, (, "start() must be called first!", ), ;, }, return, future, ;, }, protected, synchronized, final, ExecutorService, getActiveExecutor, (, ), {, return]
[}, protected, synchronized, final, ExecutorService, getActiveExecutor, (, ), {, return, executor, ;, }, protected, int, getTaskCount, (, ), {, return]
[T, initialize, (, ), throws, Exception, ;, private, Callable, <, T, >, createTask, (, final, ExecutorService, execDestroy, ), {, return]
[), throws, Exception, ;, private, Callable, <, T, >, createTask, (, final, ExecutorService, execDestroy, ), {, return, new, InitializationTask, (]
[final, ExecutorService, execDestroy, ), {, return, new, InitializationTask, (, execDestroy, ), ;, }, private, ExecutorService, createExecutor, (, ), {, return]
[final, ExecutorService, execDestroy, ), {, return, new, InitializationTask, (, execDestroy, ), ;, }, private, ExecutorService, createExecutor, (, ), {, return]
[{, return, new, InitializationTask, (, execDestroy, ), ;, }, private, ExecutorService, createExecutor, (, ), {, return, Executors, ., newFixedThreadPool, (]
[InitializationTask, implements, Callable, <, T, >, {, private, final, ExecutorService, execFinally, ;, public, InitializationTask, (, final, ExecutorService, exec, ), {]
[Callable, <, T, >, {, private, final, ExecutorService, execFinally, ;, public, InitializationTask, (, final, ExecutorService, exec, ), {, execFinally, =]
[), {, execFinally, =, exec, ;, }, @, Override, public, T, call, (, ), throws, Exception, {, try, {, return]
[public, T, call, (, ), throws, Exception, {, try, {, return, initialize, (, ), ;, }, finally, {, if, (]
[public, T, call, (, ), throws, Exception, {, try, {, return, initialize, (, ), ;, }, finally, {, if, (]
[call, (, ), throws, Exception, {, try, {, return, initialize, (, ), ;, }, finally, {, if, (, execFinally, !=]
[throws, Exception, {, try, {, return, initialize, (, ), ;, }, finally, {, if, (, execFinally, !=, null, ), {]
[throws, Exception, {, try, {, return, initialize, (, ), ;, }, finally, {, if, (, execFinally, !=, null, ), {]
