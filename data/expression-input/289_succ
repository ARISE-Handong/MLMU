[;, public, static, final, RectangleInsets, ZERO_INSETS, =, new, RectangleInsets, (, UnitType, ., ABSOLUTE, ,, 0.0, ,, 0.0, ,, 0.0, ,]
[;, private, UnitType, unitType, ;, private, double, top, ;, private, double, left, ;, private, double, bottom, ;, private, double, right]
[,, 0.0, ,, 0.0, ,, 0.0, ,, 0.0, ), ;, private, UnitType, unitType, ;, private, double, top, ;, private, double]
[., ABSOLUTE, ,, 0.0, ,, 0.0, ,, 0.0, ,, 0.0, ), ;, private, UnitType, unitType, ;, private, double, top, ;]
[,, 0.0, ,, 0.0, ,, 0.0, ), ;, private, UnitType, unitType, ;, private, double, top, ;, private, double, left, ;]
[,, 0.0, ,, 0.0, ), ;, private, UnitType, unitType, ;, private, double, top, ;, private, double, left, ;, private, double]
[,, 0.0, ), ;, private, UnitType, unitType, ;, private, double, top, ;, private, double, left, ;, private, double, bottom, ;]
[), ;, private, UnitType, unitType, ;, private, double, top, ;, private, double, left, ;, private, double, bottom, ;, private, double]
[,, 1.0, ,, 1.0, ,, 1.0, ), ;, }, public, RectangleInsets, (, double, top, ,, double, left, ,, double, bottom]
[,, 1.0, ,, 1.0, ), ;, }, public, RectangleInsets, (, double, top, ,, double, left, ,, double, bottom, ,, double]
[,, 1.0, ), ;, }, public, RectangleInsets, (, double, top, ,, double, left, ,, double, bottom, ,, double, right, )]
[), ;, }, public, RectangleInsets, (, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, this]
[,, top, ,, left, ,, bottom, ,, right, ), ;, }, public, RectangleInsets, (, UnitType, unitType, ,, double, top, ,]
[., ABSOLUTE, ,, top, ,, left, ,, bottom, ,, right, ), ;, }, public, RectangleInsets, (, UnitType, unitType, ,, double]
[,, left, ,, bottom, ,, right, ), ;, }, public, RectangleInsets, (, UnitType, unitType, ,, double, top, ,, double, left]
[,, bottom, ,, right, ), ;, }, public, RectangleInsets, (, UnitType, unitType, ,, double, top, ,, double, left, ,, double]
[,, right, ), ;, }, public, RectangleInsets, (, UnitType, unitType, ,, double, top, ,, double, left, ,, double, bottom, ,]
[), ;, }, public, RectangleInsets, (, UnitType, unitType, ,, double, top, ,, double, left, ,, double, bottom, ,, double, right]
[), {, throw, new, IllegalArgumentException, (, "Null 'unitType' argument.", ), ;, }, this, ., unitType, =, unitType, ;, this, ., top, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'unitType' argument.", ), ;, }, this, ., unitType, =, unitType, ;, this, .]
[), {, throw, new, IllegalArgumentException, (, "Null 'unitType' argument.", ), ;, }, this, ., unitType, =, unitType, ;, this, ., top, =]
[;, }, this, ., unitType, =, unitType, ;, this, ., top, =, top, ;, this, ., bottom, =, bottom, ;]
[), ;, }, this, ., unitType, =, unitType, ;, this, ., top, =, top, ;, this, ., bottom, =, bottom]
[=, unitType, ;, this, ., top, =, top, ;, this, ., bottom, =, bottom, ;, this, ., left, =, left]
[., unitType, =, unitType, ;, this, ., top, =, top, ;, this, ., bottom, =, bottom, ;, this, ., left]
[;, this, ., top, =, top, ;, this, ., bottom, =, bottom, ;, this, ., left, =, left, ;, this]
[=, top, ;, this, ., bottom, =, bottom, ;, this, ., left, =, left, ;, this, ., right, =, right]
[., top, =, top, ;, this, ., bottom, =, bottom, ;, this, ., left, =, left, ;, this, ., right]
[;, this, ., bottom, =, bottom, ;, this, ., left, =, left, ;, this, ., right, =, right, ;, }]
[=, bottom, ;, this, ., left, =, left, ;, this, ., right, =, right, ;, }, public, UnitType, getUnitType, (]
[., bottom, =, bottom, ;, this, ., left, =, left, ;, this, ., right, =, right, ;, }, public, UnitType]
[;, this, ., left, =, left, ;, this, ., right, =, right, ;, }, public, UnitType, getUnitType, (, ), {]
[=, left, ;, this, ., right, =, right, ;, }, public, UnitType, getUnitType, (, ), {, return, this, ., unitType]
[., left, =, left, ;, this, ., right, =, right, ;, }, public, UnitType, getUnitType, (, ), {, return, this]
[;, this, ., right, =, right, ;, }, public, UnitType, getUnitType, (, ), {, return, this, ., unitType, ;, }]
[=, right, ;, }, public, UnitType, getUnitType, (, ), {, return, this, ., unitType, ;, }, public, double, getTop, (]
[., right, =, right, ;, }, public, UnitType, getUnitType, (, ), {, return, this, ., unitType, ;, }, public, double]
[;, }, public, UnitType, getUnitType, (, ), {, return, this, ., unitType, ;, }, public, double, getTop, (, ), {]
[;, }, public, double, getTop, (, ), {, return, this, ., top, ;, }, public, double, getBottom, (, ), {]
[., unitType, ;, }, public, double, getTop, (, ), {, return, this, ., top, ;, }, public, double, getBottom, (]
[;, }, public, double, getBottom, (, ), {, return, this, ., bottom, ;, }, public, double, getLeft, (, ), {]
[., top, ;, }, public, double, getBottom, (, ), {, return, this, ., bottom, ;, }, public, double, getLeft, (]
[;, }, public, double, getLeft, (, ), {, return, this, ., left, ;, }, public, double, getRight, (, ), {]
[., bottom, ;, }, public, double, getLeft, (, ), {, return, this, ., left, ;, }, public, double, getRight, (]
[;, }, public, double, getRight, (, ), {, return, this, ., right, ;, }, public, boolean, equals, (, Object, obj]
[., left, ;, }, public, double, getRight, (, ), {, return, this, ., right, ;, }, public, boolean, equals, (]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[., right, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, RectangleInsets, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, RectangleInsets, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, RectangleInsets, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, RectangleInsets, ), ), {, return, false, ;, }, final, RectangleInsets, that, =]
[), {, return, false, ;, }, final, RectangleInsets, that, =, (, RectangleInsets, ), obj, ;, if, (, that, ., unitType]
[), {, return, false, ;, }, final, RectangleInsets, that, =, (, RectangleInsets, ), obj, ;, if, (, that, ., unitType]
[), ), {, return, false, ;, }, final, RectangleInsets, that, =, (, RectangleInsets, ), obj, ;, if, (, that, .]
[instanceof, RectangleInsets, ), ), {, return, false, ;, }, final, RectangleInsets, that, =, (, RectangleInsets, ), obj, ;, if, (]
[;, }, final, RectangleInsets, that, =, (, RectangleInsets, ), obj, ;, if, (, that, ., unitType, !=, this, ., unitType]
[;, if, (, that, ., unitType, !=, this, ., unitType, ), {, return, false, ;, }, if, (, this, .]
[;, if, (, that, ., unitType, !=, this, ., unitType, ), {, return, false, ;, }, if, (, this, .]
[), {, return, false, ;, }, if, (, this, ., left, !=, that, ., left, ), {, return, false, ;]
[!=, this, ., unitType, ), {, return, false, ;, }, if, (, this, ., left, !=, that, ., left, )]
[., unitType, !=, this, ., unitType, ), {, return, false, ;, }, if, (, this, ., left, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., left, !=, that, ., left, ), {, return, false, ;]
[., unitType, ), {, return, false, ;, }, if, (, this, ., left, !=, that, ., left, ), {, return]
[;, }, if, (, this, ., left, !=, that, ., left, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., right, !=, that, ., right, ), {, return, false, ;]
[!=, that, ., left, ), {, return, false, ;, }, if, (, this, ., right, !=, that, ., right, )]
[., left, !=, that, ., left, ), {, return, false, ;, }, if, (, this, ., right, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., right, !=, that, ., right, ), {, return, false, ;]
[., left, ), {, return, false, ;, }, if, (, this, ., right, !=, that, ., right, ), {, return]
[;, }, if, (, this, ., right, !=, that, ., right, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., top, !=, that, ., top, ), {, return, false, ;]
[!=, that, ., right, ), {, return, false, ;, }, if, (, this, ., top, !=, that, ., top, )]
[., right, !=, that, ., right, ), {, return, false, ;, }, if, (, this, ., top, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., top, !=, that, ., top, ), {, return, false, ;]
[., right, ), {, return, false, ;, }, if, (, this, ., top, !=, that, ., top, ), {, return]
[;, }, if, (, this, ., top, !=, that, ., top, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., bottom, !=, that, ., bottom, ), {, return, false, ;]
[!=, that, ., top, ), {, return, false, ;, }, if, (, this, ., bottom, !=, that, ., bottom, )]
[., top, !=, that, ., top, ), {, return, false, ;, }, if, (, this, ., bottom, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., bottom, !=, that, ., bottom, ), {, return, false, ;]
[., top, ), {, return, false, ;, }, if, (, this, ., bottom, !=, that, ., bottom, ), {, return]
[;, }, if, (, this, ., bottom, !=, that, ., bottom, ), {, return, false, ;, }, return, true, ;]
[), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long]
[!=, that, ., bottom, ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {]
[., bottom, !=, that, ., bottom, ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (]
[), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long]
[., bottom, ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result]
[;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, result, =]
[;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, result, =, (, this, ., unitType]
[=, (, this, ., unitType, !=, null, ?, this, ., unitType, ., hashCode, (, ), :, 0, ), ;, temp]
[;, temp, =, this, ., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top, ), :, 0L]
[), ;, temp, =, this, ., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top, ), :]
[?, this, ., unitType, ., hashCode, (, ), :, 0, ), ;, temp, =, this, ., top, !=, +, 0.0d]
[!=, null, ?, this, ., unitType, ., hashCode, (, ), :, 0, ), ;, temp, =, this, ., top, !=]
[., unitType, !=, null, ?, this, ., unitType, ., hashCode, (, ), :, 0, ), ;, temp, =, this, .]
[?, this, ., unitType, ., hashCode, (, ), :, 0, ), ;, temp, =, this, ., top, !=, +, 0.0d]
[:, 0, ), ;, temp, =, this, ., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top]
[., hashCode, (, ), :, 0, ), ;, temp, =, this, ., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits]
[., unitType, ., hashCode, (, ), :, 0, ), ;, temp, =, this, ., top, !=, +, 0.0d, ?, Double]
[), ;, temp, =, this, ., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top, ), :]
[=, this, ., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result]
[;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, )]
[?, Double, ., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =, 29, *, result, +, (, int]
[!=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =, 29, *, result]
[., top, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =, 29]
[?, Double, ., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =, 29, *, result, +, (, int]
[?, Double, ., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =, 29, *, result, +, (, int]
[:, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >]
[., doubleToLongBits, (, this, ., top, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (]
[), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >]
[., top, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp]
[;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, )]
[=, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[;, temp, =, this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, .]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, .]
[;, temp, =, this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L]
[;, temp, =, this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L]
[), ;, temp, =, this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :]
[^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., bottom, !=, +, 0.0d, ?, Double]
[), ;, temp, =, this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :]
[), ), ;, temp, =, this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, )]
[>, >, >, 32, ), ), ;, temp, =, this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (]
[), ), ;, temp, =, this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, )]
[=, this, ., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result]
[;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, )]
[?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =, 29, *, result, +, (, int]
[!=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =, 29, *, result]
[., bottom, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =, 29]
[?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =, 29, *, result, +, (, int]
[?, Double, ., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =, 29, *, result, +, (, int]
[:, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >]
[., doubleToLongBits, (, this, ., bottom, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (]
[), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >]
[., bottom, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp]
[;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, )]
[=, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[;, temp, =, this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, .]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, .]
[;, temp, =, this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L]
[;, temp, =, this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L]
[), ;, temp, =, this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :]
[^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., left, !=, +, 0.0d, ?, Double]
[), ;, temp, =, this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :]
[), ), ;, temp, =, this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, )]
[>, >, >, 32, ), ), ;, temp, =, this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (]
[), ), ;, temp, =, this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, )]
[=, this, ., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result]
[;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, )]
[?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =, 29, *, result, +, (, int]
[!=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =, 29, *, result]
[., left, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =, 29]
[?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =, 29, *, result, +, (, int]
[?, Double, ., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =, 29, *, result, +, (, int]
[:, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >]
[., doubleToLongBits, (, this, ., left, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (]
[), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >]
[., left, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp]
[;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, )]
[=, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[;, temp, =, this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, .]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, .]
[;, temp, =, this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L]
[;, temp, =, this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L]
[), ;, temp, =, this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :]
[^, (, temp, >, >, >, 32, ), ), ;, temp, =, this, ., right, !=, +, 0.0d, ?, Double]
[), ;, temp, =, this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :]
[), ), ;, temp, =, this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, )]
[>, >, >, 32, ), ), ;, temp, =, this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (]
[), ), ;, temp, =, this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, )]
[=, this, ., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result]
[;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, )]
[?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =, 29, *, result, +, (, int]
[!=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =, 29, *, result]
[., right, !=, +, 0.0d, ?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =, 29]
[?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =, 29, *, result, +, (, int]
[?, Double, ., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =, 29, *, result, +, (, int]
[:, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >]
[., doubleToLongBits, (, this, ., right, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (]
[), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >]
[., right, ), :, 0L, ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp]
[;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, )]
[=, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[;, return, result, ;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +, ",l=", +]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, return, result, ;, }]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, return, result]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, return, result, ;, }]
[;, return, result, ;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +, ",l=", +]
[;, return, result, ;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +, ",l=", +]
[), ;, return, result, ;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +, ",l="]
[^, (, temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {]
[), ;, return, result, ;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +, ",l="]
[), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +]
[>, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +]
[), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +]
[;, }, public, String, toString, (, ), {, return, "RectangleInsets[t=", +, this, ., top, +, ",l=", +, this, ., left]
[;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType, horizontal, ,, LengthAdjustmentType, vertical, ), {, if, (, base, ==]
[+, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType, horizontal, ,, LengthAdjustmentType, vertical, ), {, if, (]
[+, this, ., right, +, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType, horizontal, ,, LengthAdjustmentType, vertical]
[+, ",r=", +, this, ., right, +, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType, horizontal, ,]
[+, this, ., bottom, +, ",r=", +, this, ., right, +, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base]
[+, ",b=", +, this, ., bottom, +, ",r=", +, this, ., right, +, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (]
[+, this, ., left, +, ",b=", +, this, ., bottom, +, ",r=", +, this, ., right, +, "]", ;, }]
[+, ",l=", +, this, ., left, +, ",b=", +, this, ., bottom, +, ",r=", +, this, ., right, +, "]"]
[+, this, ., top, +, ",l=", +, this, ., left, +, ",b=", +, this, ., bottom, +, ",r=", +, this]
[+, ",l=", +, this, ., left, +, ",b=", +, this, ., bottom, +, ",r=", +, this, ., right, +, "]"]
[., top, +, ",l=", +, this, ., left, +, ",b=", +, this, ., bottom, +, ",r=", +, this, ., right]
[+, this, ., left, +, ",b=", +, this, ., bottom, +, ",r=", +, this, ., right, +, "]", ;, }]
[+, ",b=", +, this, ., bottom, +, ",r=", +, this, ., right, +, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (]
[., left, +, ",b=", +, this, ., bottom, +, ",r=", +, this, ., right, +, "]", ;, }, public, Rectangle2D]
[+, this, ., bottom, +, ",r=", +, this, ., right, +, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base]
[+, ",r=", +, this, ., right, +, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType, horizontal, ,]
[., bottom, +, ",r=", +, this, ., right, +, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType]
[+, this, ., right, +, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType, horizontal, ,, LengthAdjustmentType, vertical]
[+, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType, horizontal, ,, LengthAdjustmentType, vertical, ), {, if, (]
[., right, +, "]", ;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType, horizontal, ,, LengthAdjustmentType, vertical, ), {]
[;, }, public, Rectangle2D, createAdjustedRectangle, (, Rectangle2D, base, ,, LengthAdjustmentType, horizontal, ,, LengthAdjustmentType, vertical, ), {, if, (, base, ==]
[), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, x, =, base, ., getX, (, ), ;, double]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, x, =, base, ., getX, (, )]
[), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, x, =, base, ., getX, (, ), ;, double]
[;, }, double, x, =, base, ., getX, (, ), ;, double, y, =, base, ., getY, (, ), ;]
[), ;, }, double, x, =, base, ., getX, (, ), ;, double, y, =, base, ., getY, (, )]
[;, double, y, =, base, ., getY, (, ), ;, double, w, =, base, ., getWidth, (, ), ;, double]
[., getX, (, ), ;, double, y, =, base, ., getY, (, ), ;, double, w, =, base, ., getWidth]
[;, double, w, =, base, ., getWidth, (, ), ;, double, h, =, base, ., getHeight, (, ), ;, if]
[., getY, (, ), ;, double, w, =, base, ., getWidth, (, ), ;, double, h, =, base, ., getHeight]
[;, double, h, =, base, ., getHeight, (, ), ;, if, (, horizontal, ==, LengthAdjustmentType, ., EXPAND, ), {, double]
[., getWidth, (, ), ;, double, h, =, base, ., getHeight, (, ), ;, if, (, horizontal, ==, LengthAdjustmentType, .]
[;, if, (, horizontal, ==, LengthAdjustmentType, ., EXPAND, ), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =]
[., getHeight, (, ), ;, if, (, horizontal, ==, LengthAdjustmentType, ., EXPAND, ), {, double, leftOutset, =, calculateLeftOutset, (, w]
[), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =, x, -, leftOutset, ;, w, =, w, +]
[==, LengthAdjustmentType, ., EXPAND, ), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =, x, -, leftOutset, ;]
[), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =, x, -, leftOutset, ;, w, =, w, +]
[., EXPAND, ), {, double, leftOutset, =, calculateLeftOutset, (, w, ), ;, x, =, x, -, leftOutset, ;, w, =]
[;, x, =, x, -, leftOutset, ;, w, =, w, +, leftOutset, +, calculateRightOutset, (, w, ), ;, }, else]
[), ;, x, =, x, -, leftOutset, ;, w, =, w, +, leftOutset, +, calculateRightOutset, (, w, ), ;, }]
[=, x, -, leftOutset, ;, w, =, w, +, leftOutset, +, calculateRightOutset, (, w, ), ;, }, else, if, (]
[;, w, =, w, +, leftOutset, +, calculateRightOutset, (, w, ), ;, }, else, if, (, horizontal, ==, LengthAdjustmentType, .]
[-, leftOutset, ;, w, =, w, +, leftOutset, +, calculateRightOutset, (, w, ), ;, }, else, if, (, horizontal, ==]
[;, w, =, w, +, leftOutset, +, calculateRightOutset, (, w, ), ;, }, else, if, (, horizontal, ==, LengthAdjustmentType, .]
[=, w, +, leftOutset, +, calculateRightOutset, (, w, ), ;, }, else, if, (, horizontal, ==, LengthAdjustmentType, ., CONTRACT, )]
[;, }, else, if, (, horizontal, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;]
[+, calculateRightOutset, (, w, ), ;, }, else, if, (, horizontal, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, leftMargin, =]
[+, leftOutset, +, calculateRightOutset, (, w, ), ;, }, else, if, (, horizontal, ==, LengthAdjustmentType, ., CONTRACT, ), {, double]
[+, calculateRightOutset, (, w, ), ;, }, else, if, (, horizontal, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, leftMargin, =]
[;, }, else, if, (, horizontal, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;]
[), ;, }, else, if, (, horizontal, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (, w, )]
[), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;, x, =, x, +, leftMargin, ;, w, =, w, -]
[==, LengthAdjustmentType, ., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;, x, =, x, +, leftMargin, ;]
[), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;, x, =, x, +, leftMargin, ;, w, =, w, -]
[., CONTRACT, ), {, double, leftMargin, =, calculateLeftInset, (, w, ), ;, x, =, x, +, leftMargin, ;, w, =]
[;, x, =, x, +, leftMargin, ;, w, =, w, -, leftMargin, -, calculateRightInset, (, w, ), ;, }, if]
[), ;, x, =, x, +, leftMargin, ;, w, =, w, -, leftMargin, -, calculateRightInset, (, w, ), ;, }]
[=, x, +, leftMargin, ;, w, =, w, -, leftMargin, -, calculateRightInset, (, w, ), ;, }, if, (, vertical]
[;, w, =, w, -, leftMargin, -, calculateRightInset, (, w, ), ;, }, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND]
[+, leftMargin, ;, w, =, w, -, leftMargin, -, calculateRightInset, (, w, ), ;, }, if, (, vertical, ==, LengthAdjustmentType]
[;, w, =, w, -, leftMargin, -, calculateRightInset, (, w, ), ;, }, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND]
[=, w, -, leftMargin, -, calculateRightInset, (, w, ), ;, }, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND, ), {]
[;, }, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y]
[-, calculateRightInset, (, w, ), ;, }, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin, =, calculateTopOutset]
[-, leftMargin, -, calculateRightInset, (, w, ), ;, }, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin]
[-, calculateRightInset, (, w, ), ;, }, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin, =, calculateTopOutset]
[;, }, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y]
[), ;, }, if, (, vertical, ==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (, h, ), ;]
[), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y, =, y, -, topMargin, ;, h, =, h, +]
[==, LengthAdjustmentType, ., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y, =, y, -, topMargin, ;]
[), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y, =, y, -, topMargin, ;, h, =, h, +]
[., EXPAND, ), {, double, topMargin, =, calculateTopOutset, (, h, ), ;, y, =, y, -, topMargin, ;, h, =]
[;, y, =, y, -, topMargin, ;, h, =, h, +, topMargin, +, calculateBottomOutset, (, h, ), ;, }, else]
[), ;, y, =, y, -, topMargin, ;, h, =, h, +, topMargin, +, calculateBottomOutset, (, h, ), ;, }]
[=, y, -, topMargin, ;, h, =, h, +, topMargin, +, calculateBottomOutset, (, h, ), ;, }, else, if, (]
[;, h, =, h, +, topMargin, +, calculateBottomOutset, (, h, ), ;, }, else, if, (, vertical, ==, LengthAdjustmentType, .]
[-, topMargin, ;, h, =, h, +, topMargin, +, calculateBottomOutset, (, h, ), ;, }, else, if, (, vertical, ==]
[;, h, =, h, +, topMargin, +, calculateBottomOutset, (, h, ), ;, }, else, if, (, vertical, ==, LengthAdjustmentType, .]
[=, h, +, topMargin, +, calculateBottomOutset, (, h, ), ;, }, else, if, (, vertical, ==, LengthAdjustmentType, ., CONTRACT, )]
[;, }, else, if, (, vertical, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (, h, ), ;]
[+, calculateBottomOutset, (, h, ), ;, }, else, if, (, vertical, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, topMargin, =]
[+, topMargin, +, calculateBottomOutset, (, h, ), ;, }, else, if, (, vertical, ==, LengthAdjustmentType, ., CONTRACT, ), {, double]
[+, calculateBottomOutset, (, h, ), ;, }, else, if, (, vertical, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, topMargin, =]
[;, }, else, if, (, vertical, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (, h, ), ;]
[), ;, }, else, if, (, vertical, ==, LengthAdjustmentType, ., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (, h, )]
[), {, double, topMargin, =, calculateTopInset, (, h, ), ;, y, =, y, +, topMargin, ;, h, =, h, -]
[==, LengthAdjustmentType, ., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (, h, ), ;, y, =, y, +, topMargin, ;]
[), {, double, topMargin, =, calculateTopInset, (, h, ), ;, y, =, y, +, topMargin, ;, h, =, h, -]
[., CONTRACT, ), {, double, topMargin, =, calculateTopInset, (, h, ), ;, y, =, y, +, topMargin, ;, h, =]
[;, y, =, y, +, topMargin, ;, h, =, h, -, topMargin, -, calculateBottomInset, (, h, ), ;, }, return]
[), ;, y, =, y, +, topMargin, ;, h, =, h, -, topMargin, -, calculateBottomInset, (, h, ), ;, }]
[=, y, +, topMargin, ;, h, =, h, -, topMargin, -, calculateBottomInset, (, h, ), ;, }, return, new, Rectangle2D]
[;, h, =, h, -, topMargin, -, calculateBottomInset, (, h, ), ;, }, return, new, Rectangle2D, ., Double, (, x]
[+, topMargin, ;, h, =, h, -, topMargin, -, calculateBottomInset, (, h, ), ;, }, return, new, Rectangle2D, ., Double]
[;, h, =, h, -, topMargin, -, calculateBottomInset, (, h, ), ;, }, return, new, Rectangle2D, ., Double, (, x]
[=, h, -, topMargin, -, calculateBottomInset, (, h, ), ;, }, return, new, Rectangle2D, ., Double, (, x, ,, y]
[;, }, return, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, h, ), ;, }, public, Rectangle2D]
[-, calculateBottomInset, (, h, ), ;, }, return, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, h]
[-, topMargin, -, calculateBottomInset, (, h, ), ;, }, return, new, Rectangle2D, ., Double, (, x, ,, y, ,, w]
[-, calculateBottomInset, (, h, ), ;, }, return, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, h]
[;, }, return, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, h, ), ;, }, public, Rectangle2D]
[), ;, }, return, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, h, ), ;, }, public]
[;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ), {, return, createInsetRectangle, (, base, ,, true, ,, true, ), ;]
[,, y, ,, w, ,, h, ), ;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ), {, return, createInsetRectangle, (]
[,, w, ,, h, ), ;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ), {, return, createInsetRectangle, (, base, ,]
[,, h, ), ;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ), {, return, createInsetRectangle, (, base, ,, true, ,]
[), ;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ), {, return, createInsetRectangle, (, base, ,, true, ,, true, )]
[;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (, base, ==]
[,, true, ,, true, ), ;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, )]
[,, true, ), ;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if]
[), ;, }, public, Rectangle2D, createInsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (, base]
[), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =]
[), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;]
[;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =, calculateTopInset]
[), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =]
[;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =, calculateTopInset, (, base, ., getHeight, (, )]
[;, if, (, vertical, ), {, topMargin, =, calculateTopInset, (, base, ., getHeight, (, ), ), ;, bottomMargin, =, calculateBottomInset]
[), {, topMargin, =, calculateTopInset, (, base, ., getHeight, (, ), ), ;, bottomMargin, =, calculateBottomInset, (, base, ., getHeight]
[=, calculateTopInset, (, base, ., getHeight, (, ), ), ;, bottomMargin, =, calculateBottomInset, (, base, ., getHeight, (, ), )]
[;, bottomMargin, =, calculateBottomInset, (, base, ., getHeight, (, ), ), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin]
[), ;, bottomMargin, =, calculateBottomInset, (, base, ., getHeight, (, ), ), ;, }, double, leftMargin, =, 0.0, ;, double]
[., getHeight, (, ), ), ;, bottomMargin, =, calculateBottomInset, (, base, ., getHeight, (, ), ), ;, }, double, leftMargin]
[=, calculateBottomInset, (, base, ., getHeight, (, ), ), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0]
[;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =, calculateLeftInset]
[), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =]
[., getHeight, (, ), ), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal]
[;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =, calculateLeftInset, (, base, ., getWidth, (, )]
[;, if, (, horizontal, ), {, leftMargin, =, calculateLeftInset, (, base, ., getWidth, (, ), ), ;, rightMargin, =, calculateRightInset]
[), {, leftMargin, =, calculateLeftInset, (, base, ., getWidth, (, ), ), ;, rightMargin, =, calculateRightInset, (, base, ., getWidth]
[=, calculateLeftInset, (, base, ., getWidth, (, ), ), ;, rightMargin, =, calculateRightInset, (, base, ., getWidth, (, ), )]
[;, rightMargin, =, calculateRightInset, (, base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base]
[), ;, rightMargin, =, calculateRightInset, (, base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (]
[., getWidth, (, ), ), ;, rightMargin, =, calculateRightInset, (, base, ., getWidth, (, ), ), ;, }, return, new]
[=, calculateRightInset, (, base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX]
[;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), +, leftMargin, ,, base, ., getY, (]
[), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), +, leftMargin, ,, base, ., getY]
[., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), +, leftMargin]
[;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ), {, return, createOutsetRectangle, (, base, ,, true, ,, true, ), ;]
[,, base, ., getY, (, ), +, topMargin, ,, base, ., getWidth, (, ), -, leftMargin, -, rightMargin, ,, base]
[+, leftMargin, ,, base, ., getY, (, ), +, topMargin, ,, base, ., getWidth, (, ), -, leftMargin, -, rightMargin]
[., getX, (, ), +, leftMargin, ,, base, ., getY, (, ), +, topMargin, ,, base, ., getWidth, (, )]
[,, base, ., getY, (, ), +, topMargin, ,, base, ., getWidth, (, ), -, leftMargin, -, rightMargin, ,, base]
[,, base, ., getWidth, (, ), -, leftMargin, -, rightMargin, ,, base, ., getHeight, (, ), -, topMargin, -, bottomMargin]
[+, topMargin, ,, base, ., getWidth, (, ), -, leftMargin, -, rightMargin, ,, base, ., getHeight, (, ), -, topMargin]
[., getY, (, ), +, topMargin, ,, base, ., getWidth, (, ), -, leftMargin, -, rightMargin, ,, base, ., getHeight]
[,, base, ., getWidth, (, ), -, leftMargin, -, rightMargin, ,, base, ., getHeight, (, ), -, topMargin, -, bottomMargin]
[,, base, ., getHeight, (, ), -, topMargin, -, bottomMargin, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, )]
[-, rightMargin, ,, base, ., getHeight, (, ), -, topMargin, -, bottomMargin, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D]
[-, leftMargin, -, rightMargin, ,, base, ., getHeight, (, ), -, topMargin, -, bottomMargin, ), ;, }, public, Rectangle2D, createOutsetRectangle]
[., getWidth, (, ), -, leftMargin, -, rightMargin, ,, base, ., getHeight, (, ), -, topMargin, -, bottomMargin, ), ;]
[-, rightMargin, ,, base, ., getHeight, (, ), -, topMargin, -, bottomMargin, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D]
[,, base, ., getHeight, (, ), -, topMargin, -, bottomMargin, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, )]
[), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ), {, return, createOutsetRectangle, (, base, ,, true, ,, true, )]
[-, bottomMargin, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ), {, return, createOutsetRectangle, (, base, ,, true, ,]
[-, topMargin, -, bottomMargin, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ), {, return, createOutsetRectangle, (, base, ,]
[., getHeight, (, ), -, topMargin, -, bottomMargin, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ), {, return]
[-, bottomMargin, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ), {, return, createOutsetRectangle, (, base, ,, true, ,]
[), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ), {, return, createOutsetRectangle, (, base, ,, true, ,, true, )]
[;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (, base, ==]
[,, true, ,, true, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, )]
[,, true, ), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if]
[), ;, }, public, Rectangle2D, createOutsetRectangle, (, Rectangle2D, base, ,, boolean, horizontal, ,, boolean, vertical, ), {, if, (, base]
[), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =]
[), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;]
[;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =, calculateTopOutset]
[), ;, }, double, topMargin, =, 0.0, ;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =]
[;, double, bottomMargin, =, 0.0, ;, if, (, vertical, ), {, topMargin, =, calculateTopOutset, (, base, ., getHeight, (, )]
[;, if, (, vertical, ), {, topMargin, =, calculateTopOutset, (, base, ., getHeight, (, ), ), ;, bottomMargin, =, calculateBottomOutset]
[), {, topMargin, =, calculateTopOutset, (, base, ., getHeight, (, ), ), ;, bottomMargin, =, calculateBottomOutset, (, base, ., getHeight]
[=, calculateTopOutset, (, base, ., getHeight, (, ), ), ;, bottomMargin, =, calculateBottomOutset, (, base, ., getHeight, (, ), )]
[;, bottomMargin, =, calculateBottomOutset, (, base, ., getHeight, (, ), ), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin]
[), ;, bottomMargin, =, calculateBottomOutset, (, base, ., getHeight, (, ), ), ;, }, double, leftMargin, =, 0.0, ;, double]
[., getHeight, (, ), ), ;, bottomMargin, =, calculateBottomOutset, (, base, ., getHeight, (, ), ), ;, }, double, leftMargin]
[=, calculateBottomOutset, (, base, ., getHeight, (, ), ), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0]
[;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =, calculateLeftOutset]
[), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =]
[., getHeight, (, ), ), ;, }, double, leftMargin, =, 0.0, ;, double, rightMargin, =, 0.0, ;, if, (, horizontal]
[;, double, rightMargin, =, 0.0, ;, if, (, horizontal, ), {, leftMargin, =, calculateLeftOutset, (, base, ., getWidth, (, )]
[;, if, (, horizontal, ), {, leftMargin, =, calculateLeftOutset, (, base, ., getWidth, (, ), ), ;, rightMargin, =, calculateRightOutset]
[), {, leftMargin, =, calculateLeftOutset, (, base, ., getWidth, (, ), ), ;, rightMargin, =, calculateRightOutset, (, base, ., getWidth]
[=, calculateLeftOutset, (, base, ., getWidth, (, ), ), ;, rightMargin, =, calculateRightOutset, (, base, ., getWidth, (, ), )]
[;, rightMargin, =, calculateRightOutset, (, base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base]
[), ;, rightMargin, =, calculateRightOutset, (, base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (]
[., getWidth, (, ), ), ;, rightMargin, =, calculateRightOutset, (, base, ., getWidth, (, ), ), ;, }, return, new]
[=, calculateRightOutset, (, base, ., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX]
[;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), -, leftMargin, ,, base, ., getY, (]
[), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), -, leftMargin, ,, base, ., getY]
[., getWidth, (, ), ), ;, }, return, new, Rectangle2D, ., Double, (, base, ., getX, (, ), -, leftMargin]
[;, }, public, double, calculateTopInset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (, this]
[,, base, ., getY, (, ), -, topMargin, ,, base, ., getWidth, (, ), +, leftMargin, +, rightMargin, ,, base]
[-, leftMargin, ,, base, ., getY, (, ), -, topMargin, ,, base, ., getWidth, (, ), +, leftMargin, +, rightMargin]
[., getX, (, ), -, leftMargin, ,, base, ., getY, (, ), -, topMargin, ,, base, ., getWidth, (, )]
[,, base, ., getY, (, ), -, topMargin, ,, base, ., getWidth, (, ), +, leftMargin, +, rightMargin, ,, base]
[,, base, ., getWidth, (, ), +, leftMargin, +, rightMargin, ,, base, ., getHeight, (, ), +, topMargin, +, bottomMargin]
[-, topMargin, ,, base, ., getWidth, (, ), +, leftMargin, +, rightMargin, ,, base, ., getHeight, (, ), +, topMargin]
[., getY, (, ), -, topMargin, ,, base, ., getWidth, (, ), +, leftMargin, +, rightMargin, ,, base, ., getHeight]
[,, base, ., getWidth, (, ), +, leftMargin, +, rightMargin, ,, base, ., getHeight, (, ), +, topMargin, +, bottomMargin]
[,, base, ., getHeight, (, ), +, topMargin, +, bottomMargin, ), ;, }, public, double, calculateTopInset, (, double, height, )]
[+, rightMargin, ,, base, ., getHeight, (, ), +, topMargin, +, bottomMargin, ), ;, }, public, double, calculateTopInset, (, double]
[+, leftMargin, +, rightMargin, ,, base, ., getHeight, (, ), +, topMargin, +, bottomMargin, ), ;, }, public, double, calculateTopInset]
[., getWidth, (, ), +, leftMargin, +, rightMargin, ,, base, ., getHeight, (, ), +, topMargin, +, bottomMargin, ), ;]
[+, rightMargin, ,, base, ., getHeight, (, ), +, topMargin, +, bottomMargin, ), ;, }, public, double, calculateTopInset, (, double]
[,, base, ., getHeight, (, ), +, topMargin, +, bottomMargin, ), ;, }, public, double, calculateTopInset, (, double, height, )]
[), ;, }, public, double, calculateTopInset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (]
[+, bottomMargin, ), ;, }, public, double, calculateTopInset, (, double, height, ), {, double, result, =, this, ., top, ;]
[+, topMargin, +, bottomMargin, ), ;, }, public, double, calculateTopInset, (, double, height, ), {, double, result, =, this, .]
[., getHeight, (, ), +, topMargin, +, bottomMargin, ), ;, }, public, double, calculateTopInset, (, double, height, ), {, double]
[+, bottomMargin, ), ;, }, public, double, calculateTopInset, (, double, height, ), {, double, result, =, this, ., top, ;]
[), ;, }, public, double, calculateTopInset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., top, *, height]
[., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., top]
[), {, result, =, (, this, ., top, *, height, ), ;, }, return, result, ;, }, public, double, calculateTopOutset]
[==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., top, *, height, ), ;, }, return, result, ;]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., top, *, height, ), ;, }, return]
[), {, result, =, (, this, ., top, *, height, ), ;, }, return, result, ;, }, public, double, calculateTopOutset]
[., RELATIVE, ), {, result, =, (, this, ., top, *, height, ), ;, }, return, result, ;, }, public]
[=, (, this, ., top, *, height, ), ;, }, return, result, ;, }, public, double, calculateTopOutset, (, double, height]
[;, }, return, result, ;, }, public, double, calculateTopOutset, (, double, height, ), {, double, result, =, this, ., top]
[), ;, }, return, result, ;, }, public, double, calculateTopOutset, (, double, height, ), {, double, result, =, this, .]
[*, height, ), ;, }, return, result, ;, }, public, double, calculateTopOutset, (, double, height, ), {, double, result, =]
[., top, *, height, ), ;, }, return, result, ;, }, public, double, calculateTopOutset, (, double, height, ), {, double]
[), ;, }, return, result, ;, }, public, double, calculateTopOutset, (, double, height, ), {, double, result, =, this, .]
[;, }, public, double, calculateTopOutset, (, double, height, ), {, double, result, =, this, ., top, ;, if, (, this]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -]
[., top, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (]
[), {, result, =, (, height, /, (, 1, -, this, ., top, -, this, ., bottom, ), ), *]
[==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -, this, ., top, -, this, .]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -, this, ., top, -]
[), {, result, =, (, height, /, (, 1, -, this, ., top, -, this, ., bottom, ), ), *]
[., RELATIVE, ), {, result, =, (, height, /, (, 1, -, this, ., top, -, this, ., bottom, )]
[=, (, height, /, (, 1, -, this, ., top, -, this, ., bottom, ), ), *, this, ., top]
[;, }, return, result, ;, }, public, double, calculateBottomInset, (, double, height, ), {, double, result, =, this, ., bottom]
[*, this, ., top, ;, }, return, result, ;, }, public, double, calculateBottomInset, (, double, height, ), {, double, result]
[), *, this, ., top, ;, }, return, result, ;, }, public, double, calculateBottomInset, (, double, height, ), {, double]
[/, (, 1, -, this, ., top, -, this, ., bottom, ), ), *, this, ., top, ;, }, return]
[), *, this, ., top, ;, }, return, result, ;, }, public, double, calculateBottomInset, (, double, height, ), {, double]
[), ), *, this, ., top, ;, }, return, result, ;, }, public, double, calculateBottomInset, (, double, height, ), {]
[-, this, ., bottom, ), ), *, this, ., top, ;, }, return, result, ;, }, public, double, calculateBottomInset, (]
[-, this, ., top, -, this, ., bottom, ), ), *, this, ., top, ;, }, return, result, ;, }]
[-, this, ., bottom, ), ), *, this, ., top, ;, }, return, result, ;, }, public, double, calculateBottomInset, (]
[., top, -, this, ., bottom, ), ), *, this, ., top, ;, }, return, result, ;, }, public, double]
[), ), *, this, ., top, ;, }, return, result, ;, }, public, double, calculateBottomInset, (, double, height, ), {]
[., bottom, ), ), *, this, ., top, ;, }, return, result, ;, }, public, double, calculateBottomInset, (, double, height]
[;, }, return, result, ;, }, public, double, calculateBottomInset, (, double, height, ), {, double, result, =, this, ., bottom]
[., top, ;, }, return, result, ;, }, public, double, calculateBottomInset, (, double, height, ), {, double, result, =, this]
[;, }, public, double, calculateBottomInset, (, double, height, ), {, double, result, =, this, ., bottom, ;, if, (, this]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., bottom, *, height]
[., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., bottom]
[), {, result, =, (, this, ., bottom, *, height, ), ;, }, return, result, ;, }, public, double, calculateBottomOutset]
[==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., bottom, *, height, ), ;, }, return, result, ;]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., bottom, *, height, ), ;, }, return]
[), {, result, =, (, this, ., bottom, *, height, ), ;, }, return, result, ;, }, public, double, calculateBottomOutset]
[., RELATIVE, ), {, result, =, (, this, ., bottom, *, height, ), ;, }, return, result, ;, }, public]
[=, (, this, ., bottom, *, height, ), ;, }, return, result, ;, }, public, double, calculateBottomOutset, (, double, height]
[;, }, return, result, ;, }, public, double, calculateBottomOutset, (, double, height, ), {, double, result, =, this, ., bottom]
[), ;, }, return, result, ;, }, public, double, calculateBottomOutset, (, double, height, ), {, double, result, =, this, .]
[*, height, ), ;, }, return, result, ;, }, public, double, calculateBottomOutset, (, double, height, ), {, double, result, =]
[., bottom, *, height, ), ;, }, return, result, ;, }, public, double, calculateBottomOutset, (, double, height, ), {, double]
[), ;, }, return, result, ;, }, public, double, calculateBottomOutset, (, double, height, ), {, double, result, =, this, .]
[;, }, public, double, calculateBottomOutset, (, double, height, ), {, double, result, =, this, ., bottom, ;, if, (, this]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -]
[., bottom, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (]
[), {, result, =, (, height, /, (, 1, -, this, ., top, -, this, ., bottom, ), ), *]
[==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -, this, ., top, -, this, .]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, height, /, (, 1, -, this, ., top, -]
[), {, result, =, (, height, /, (, 1, -, this, ., top, -, this, ., bottom, ), ), *]
[., RELATIVE, ), {, result, =, (, height, /, (, 1, -, this, ., top, -, this, ., bottom, )]
[=, (, height, /, (, 1, -, this, ., top, -, this, ., bottom, ), ), *, this, ., bottom]
[;, }, return, result, ;, }, public, double, calculateLeftInset, (, double, width, ), {, double, result, =, this, ., left]
[*, this, ., bottom, ;, }, return, result, ;, }, public, double, calculateLeftInset, (, double, width, ), {, double, result]
[), *, this, ., bottom, ;, }, return, result, ;, }, public, double, calculateLeftInset, (, double, width, ), {, double]
[/, (, 1, -, this, ., top, -, this, ., bottom, ), ), *, this, ., bottom, ;, }, return]
[), *, this, ., bottom, ;, }, return, result, ;, }, public, double, calculateLeftInset, (, double, width, ), {, double]
[), ), *, this, ., bottom, ;, }, return, result, ;, }, public, double, calculateLeftInset, (, double, width, ), {]
[-, this, ., bottom, ), ), *, this, ., bottom, ;, }, return, result, ;, }, public, double, calculateLeftInset, (]
[-, this, ., top, -, this, ., bottom, ), ), *, this, ., bottom, ;, }, return, result, ;, }]
[-, this, ., bottom, ), ), *, this, ., bottom, ;, }, return, result, ;, }, public, double, calculateLeftInset, (]
[., top, -, this, ., bottom, ), ), *, this, ., bottom, ;, }, return, result, ;, }, public, double]
[), ), *, this, ., bottom, ;, }, return, result, ;, }, public, double, calculateLeftInset, (, double, width, ), {]
[., bottom, ), ), *, this, ., bottom, ;, }, return, result, ;, }, public, double, calculateLeftInset, (, double, width]
[;, }, return, result, ;, }, public, double, calculateLeftInset, (, double, width, ), {, double, result, =, this, ., left]
[., bottom, ;, }, return, result, ;, }, public, double, calculateLeftInset, (, double, width, ), {, double, result, =, this]
[;, }, public, double, calculateLeftInset, (, double, width, ), {, double, result, =, this, ., left, ;, if, (, this]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., left, *, width]
[., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., left]
[), {, result, =, (, this, ., left, *, width, ), ;, }, return, result, ;, }, public, double, calculateLeftOutset]
[==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., left, *, width, ), ;, }, return, result, ;]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., left, *, width, ), ;, }, return]
[), {, result, =, (, this, ., left, *, width, ), ;, }, return, result, ;, }, public, double, calculateLeftOutset]
[., RELATIVE, ), {, result, =, (, this, ., left, *, width, ), ;, }, return, result, ;, }, public]
[=, (, this, ., left, *, width, ), ;, }, return, result, ;, }, public, double, calculateLeftOutset, (, double, width]
[;, }, return, result, ;, }, public, double, calculateLeftOutset, (, double, width, ), {, double, result, =, this, ., left]
[), ;, }, return, result, ;, }, public, double, calculateLeftOutset, (, double, width, ), {, double, result, =, this, .]
[*, width, ), ;, }, return, result, ;, }, public, double, calculateLeftOutset, (, double, width, ), {, double, result, =]
[., left, *, width, ), ;, }, return, result, ;, }, public, double, calculateLeftOutset, (, double, width, ), {, double]
[), ;, }, return, result, ;, }, public, double, calculateLeftOutset, (, double, width, ), {, double, result, =, this, .]
[;, }, public, double, calculateLeftOutset, (, double, width, ), {, double, result, =, this, ., left, ;, if, (, this]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -]
[., left, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (]
[), {, result, =, (, width, /, (, 1, -, this, ., left, -, this, ., right, ), ), *]
[==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -, this, ., left, -, this, .]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -, this, ., left, -]
[), {, result, =, (, width, /, (, 1, -, this, ., left, -, this, ., right, ), ), *]
[., RELATIVE, ), {, result, =, (, width, /, (, 1, -, this, ., left, -, this, ., right, )]
[=, (, width, /, (, 1, -, this, ., left, -, this, ., right, ), ), *, this, ., left]
[;, }, return, result, ;, }, public, double, calculateRightInset, (, double, width, ), {, double, result, =, this, ., right]
[*, this, ., left, ;, }, return, result, ;, }, public, double, calculateRightInset, (, double, width, ), {, double, result]
[), *, this, ., left, ;, }, return, result, ;, }, public, double, calculateRightInset, (, double, width, ), {, double]
[/, (, 1, -, this, ., left, -, this, ., right, ), ), *, this, ., left, ;, }, return]
[), *, this, ., left, ;, }, return, result, ;, }, public, double, calculateRightInset, (, double, width, ), {, double]
[), ), *, this, ., left, ;, }, return, result, ;, }, public, double, calculateRightInset, (, double, width, ), {]
[-, this, ., right, ), ), *, this, ., left, ;, }, return, result, ;, }, public, double, calculateRightInset, (]
[-, this, ., left, -, this, ., right, ), ), *, this, ., left, ;, }, return, result, ;, }]
[-, this, ., right, ), ), *, this, ., left, ;, }, return, result, ;, }, public, double, calculateRightInset, (]
[., left, -, this, ., right, ), ), *, this, ., left, ;, }, return, result, ;, }, public, double]
[), ), *, this, ., left, ;, }, return, result, ;, }, public, double, calculateRightInset, (, double, width, ), {]
[., right, ), ), *, this, ., left, ;, }, return, result, ;, }, public, double, calculateRightInset, (, double, width]
[;, }, return, result, ;, }, public, double, calculateRightInset, (, double, width, ), {, double, result, =, this, ., right]
[., left, ;, }, return, result, ;, }, public, double, calculateRightInset, (, double, width, ), {, double, result, =, this]
[;, }, public, double, calculateRightInset, (, double, width, ), {, double, result, =, this, ., right, ;, if, (, this]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., right, *, width]
[., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., right]
[), {, result, =, (, this, ., right, *, width, ), ;, }, return, result, ;, }, public, double, calculateRightOutset]
[==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., right, *, width, ), ;, }, return, result, ;]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, this, ., right, *, width, ), ;, }, return]
[), {, result, =, (, this, ., right, *, width, ), ;, }, return, result, ;, }, public, double, calculateRightOutset]
[., RELATIVE, ), {, result, =, (, this, ., right, *, width, ), ;, }, return, result, ;, }, public]
[=, (, this, ., right, *, width, ), ;, }, return, result, ;, }, public, double, calculateRightOutset, (, double, width]
[;, }, return, result, ;, }, public, double, calculateRightOutset, (, double, width, ), {, double, result, =, this, ., right]
[), ;, }, return, result, ;, }, public, double, calculateRightOutset, (, double, width, ), {, double, result, =, this, .]
[*, width, ), ;, }, return, result, ;, }, public, double, calculateRightOutset, (, double, width, ), {, double, result, =]
[., right, *, width, ), ;, }, return, result, ;, }, public, double, calculateRightOutset, (, double, width, ), {, double]
[), ;, }, return, result, ;, }, public, double, calculateRightOutset, (, double, width, ), {, double, result, =, this, .]
[;, }, public, double, calculateRightOutset, (, double, width, ), {, double, result, =, this, ., right, ;, if, (, this]
[;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -]
[., right, ;, if, (, this, ., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (]
[), {, result, =, (, width, /, (, 1, -, this, ., left, -, this, ., right, ), ), *]
[==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -, this, ., left, -, this, .]
[., unitType, ==, UnitType, ., RELATIVE, ), {, result, =, (, width, /, (, 1, -, this, ., left, -]
[), {, result, =, (, width, /, (, 1, -, this, ., left, -, this, ., right, ), ), *]
[., RELATIVE, ), {, result, =, (, width, /, (, 1, -, this, ., left, -, this, ., right, )]
[=, (, width, /, (, 1, -, this, ., left, -, this, ., right, ), ), *, this, ., right]
[;, }, return, result, ;, }, public, double, trimWidth, (, double, width, ), {, return, width, -, calculateLeftInset, (, width]
[*, this, ., right, ;, }, return, result, ;, }, public, double, trimWidth, (, double, width, ), {, return, width]
[), *, this, ., right, ;, }, return, result, ;, }, public, double, trimWidth, (, double, width, ), {, return]
[/, (, 1, -, this, ., left, -, this, ., right, ), ), *, this, ., right, ;, }, return]
[), *, this, ., right, ;, }, return, result, ;, }, public, double, trimWidth, (, double, width, ), {, return]
[), ), *, this, ., right, ;, }, return, result, ;, }, public, double, trimWidth, (, double, width, ), {]
[-, this, ., right, ), ), *, this, ., right, ;, }, return, result, ;, }, public, double, trimWidth, (]
[-, this, ., left, -, this, ., right, ), ), *, this, ., right, ;, }, return, result, ;, }]
[-, this, ., right, ), ), *, this, ., right, ;, }, return, result, ;, }, public, double, trimWidth, (]
[., left, -, this, ., right, ), ), *, this, ., right, ;, }, return, result, ;, }, public, double]
[), ), *, this, ., right, ;, }, return, result, ;, }, public, double, trimWidth, (, double, width, ), {]
[., right, ), ), *, this, ., right, ;, }, return, result, ;, }, public, double, trimWidth, (, double, width]
[;, }, return, result, ;, }, public, double, trimWidth, (, double, width, ), {, return, width, -, calculateLeftInset, (, width]
[., right, ;, }, return, result, ;, }, public, double, trimWidth, (, double, width, ), {, return, width, -, calculateLeftInset]
[;, }, public, double, trimWidth, (, double, width, ), {, return, width, -, calculateLeftInset, (, width, ), -, calculateRightInset, (]
[;, }, public, double, extendWidth, (, double, width, ), {, return, width, +, calculateLeftOutset, (, width, ), +, calculateRightOutset, (]
[-, calculateRightInset, (, width, ), ;, }, public, double, extendWidth, (, double, width, ), {, return, width, +, calculateLeftOutset, (]
[-, calculateLeftInset, (, width, ), -, calculateRightInset, (, width, ), ;, }, public, double, extendWidth, (, double, width, ), {]
[-, calculateRightInset, (, width, ), ;, }, public, double, extendWidth, (, double, width, ), {, return, width, +, calculateLeftOutset, (]
[), -, calculateRightInset, (, width, ), ;, }, public, double, extendWidth, (, double, width, ), {, return, width, +, calculateLeftOutset]
[;, }, public, double, extendWidth, (, double, width, ), {, return, width, +, calculateLeftOutset, (, width, ), +, calculateRightOutset, (]
[), ;, }, public, double, extendWidth, (, double, width, ), {, return, width, +, calculateLeftOutset, (, width, ), +, calculateRightOutset]
[;, }, public, double, trimHeight, (, double, height, ), {, return, height, -, calculateTopInset, (, height, ), -, calculateBottomInset, (]
[+, calculateRightOutset, (, width, ), ;, }, public, double, trimHeight, (, double, height, ), {, return, height, -, calculateTopInset, (]
[+, calculateLeftOutset, (, width, ), +, calculateRightOutset, (, width, ), ;, }, public, double, trimHeight, (, double, height, ), {]
[+, calculateRightOutset, (, width, ), ;, }, public, double, trimHeight, (, double, height, ), {, return, height, -, calculateTopInset, (]
[), +, calculateRightOutset, (, width, ), ;, }, public, double, trimHeight, (, double, height, ), {, return, height, -, calculateTopInset]
[;, }, public, double, trimHeight, (, double, height, ), {, return, height, -, calculateTopInset, (, height, ), -, calculateBottomInset, (]
[), ;, }, public, double, trimHeight, (, double, height, ), {, return, height, -, calculateTopInset, (, height, ), -, calculateBottomInset]
[;, }, public, double, extendHeight, (, double, height, ), {, return, height, +, calculateTopOutset, (, height, ), +, calculateBottomOutset, (]
[-, calculateBottomInset, (, height, ), ;, }, public, double, extendHeight, (, double, height, ), {, return, height, +, calculateTopOutset, (]
[-, calculateTopInset, (, height, ), -, calculateBottomInset, (, height, ), ;, }, public, double, extendHeight, (, double, height, ), {]
[-, calculateBottomInset, (, height, ), ;, }, public, double, extendHeight, (, double, height, ), {, return, height, +, calculateTopOutset, (]
[), -, calculateBottomInset, (, height, ), ;, }, public, double, extendHeight, (, double, height, ), {, return, height, +, calculateTopOutset]
[;, }, public, double, extendHeight, (, double, height, ), {, return, height, +, calculateTopOutset, (, height, ), +, calculateBottomOutset, (]
[), ;, }, public, double, extendHeight, (, double, height, ), {, return, height, +, calculateTopOutset, (, height, ), +, calculateBottomOutset]
[;, }, public, void, trim, (, Rectangle2D, area, ), {, double, w, =, area, ., getWidth, (, ), ;, double]
[+, calculateBottomOutset, (, height, ), ;, }, public, void, trim, (, Rectangle2D, area, ), {, double, w, =, area, .]
[+, calculateTopOutset, (, height, ), +, calculateBottomOutset, (, height, ), ;, }, public, void, trim, (, Rectangle2D, area, ), {]
[+, calculateBottomOutset, (, height, ), ;, }, public, void, trim, (, Rectangle2D, area, ), {, double, w, =, area, .]
[), +, calculateBottomOutset, (, height, ), ;, }, public, void, trim, (, Rectangle2D, area, ), {, double, w, =, area]
[;, }, public, void, trim, (, Rectangle2D, area, ), {, double, w, =, area, ., getWidth, (, ), ;, double]
[), ;, }, public, void, trim, (, Rectangle2D, area, ), {, double, w, =, area, ., getWidth, (, ), ;]
[;, double, h, =, area, ., getHeight, (, ), ;, double, l, =, calculateLeftInset, (, w, ), ;, double, r]
[., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, double, l, =, calculateLeftInset, (, w]
[;, double, l, =, calculateLeftInset, (, w, ), ;, double, r, =, calculateRightInset, (, w, ), ;, double, t, =]
[., getHeight, (, ), ;, double, l, =, calculateLeftInset, (, w, ), ;, double, r, =, calculateRightInset, (, w, )]
[;, double, r, =, calculateRightInset, (, w, ), ;, double, t, =, calculateTopInset, (, h, ), ;, double, b, =]
[), ;, double, r, =, calculateRightInset, (, w, ), ;, double, t, =, calculateTopInset, (, h, ), ;, double, b]
[;, double, t, =, calculateTopInset, (, h, ), ;, double, b, =, calculateBottomInset, (, h, ), ;, area, ., setRect]
[), ;, double, t, =, calculateTopInset, (, h, ), ;, double, b, =, calculateBottomInset, (, h, ), ;, area, .]
[;, double, b, =, calculateBottomInset, (, h, ), ;, area, ., setRect, (, area, ., getX, (, ), +, l]
[), ;, double, b, =, calculateBottomInset, (, h, ), ;, area, ., setRect, (, area, ., getX, (, ), +]
[;, area, ., setRect, (, area, ., getX, (, ), +, l, ,, area, ., getY, (, ), +, t]
[), ;, area, ., setRect, (, area, ., getX, (, ), +, l, ,, area, ., getY, (, ), +]
[;, }, }]
[., setRect, (, area, ., getX, (, ), +, l, ,, area, ., getY, (, ), +, t, ,, w]
[,, area, ., getY, (, ), +, t, ,, w, -, l, -, r, ,, h, -, t, -, b]
[+, l, ,, area, ., getY, (, ), +, t, ,, w, -, l, -, r, ,, h, -, t]
[., getX, (, ), +, l, ,, area, ., getY, (, ), +, t, ,, w, -, l, -, r]
[,, area, ., getY, (, ), +, t, ,, w, -, l, -, r, ,, h, -, t, -, b]
[,, w, -, l, -, r, ,, h, -, t, -, b, ), ;, }, }]
[+, t, ,, w, -, l, -, r, ,, h, -, t, -, b, ), ;, }, }]
[., getY, (, ), +, t, ,, w, -, l, -, r, ,, h, -, t, -, b, ), ;]
[,, w, -, l, -, r, ,, h, -, t, -, b, ), ;, }, }]
[,, h, -, t, -, b, ), ;, }, }]
[-, r, ,, h, -, t, -, b, ), ;, }, }]
[-, l, -, r, ,, h, -, t, -, b, ), ;, }, }]
[-, r, ,, h, -, t, -, b, ), ;, }, }]
[,, h, -, t, -, b, ), ;, }, }]
[), ;, }, }]
[-, b, ), ;, }, }]
[-, t, -, b, ), ;, }, }]
[-, b, ), ;, }, }]
[), ;, }, }]
