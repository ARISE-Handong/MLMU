[util, ., Set, ;, final, class, ClosureCodeRemoval, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, static, final, String, ABSTRACT_METHOD_NAME, =]
["goog.abstractMethod", ;, private, final, boolean, removeAbstractMethods, ;, private, final, boolean, removeAssertionCalls, ;, private, final, List, <, RemovableAssignment, >, abstractMethodAssignmentNodes, =]
["goog.abstractMethod", ;, private, final, boolean, removeAbstractMethods, ;, private, final, boolean, removeAssertionCalls, ;, private, final, List, <, RemovableAssignment, >, abstractMethodAssignmentNodes, =]
[List, <, RemovableAssignment, >, abstractMethodAssignmentNodes, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Node, >, assertionCalls, =]
[List, <, RemovableAssignment, >, abstractMethodAssignmentNodes, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Node, >, assertionCalls, =]
[;, private, class, RemovableAssignment, {, final, Node, node, ;, final, Node, parent, ;, final, List, <, Node, >, assignAncestors, =]
[;, private, class, RemovableAssignment, {, final, Node, node, ;, final, Node, parent, ;, final, List, <, Node, >, assignAncestors, =]
[(, ), ;, final, Node, lastAncestor, ;, public, RemovableAssignment, (, Node, nameNode, ,, Node, assignNode, ,, NodeTraversal, traversal, ), {]
[(, ), ;, final, Node, lastAncestor, ;, public, RemovableAssignment, (, Node, nameNode, ,, Node, assignNode, ,, NodeTraversal, traversal, ), {]
[Node, lastAncestor, ;, public, RemovableAssignment, (, Node, nameNode, ,, Node, assignNode, ,, NodeTraversal, traversal, ), {, this, ., node, =]
[;, public, RemovableAssignment, (, Node, nameNode, ,, Node, assignNode, ,, NodeTraversal, traversal, ), {, this, ., node, =, nameNode, ;]
[;, public, RemovableAssignment, (, Node, nameNode, ,, Node, assignNode, ,, NodeTraversal, traversal, ), {, this, ., node, =, nameNode, ;]
[Node, nameNode, ,, Node, assignNode, ,, NodeTraversal, traversal, ), {, this, ., node, =, nameNode, ;, this, ., parent, =]
[,, NodeTraversal, traversal, ), {, this, ., node, =, nameNode, ;, this, ., parent, =, assignNode, ;, Node, ancestor, =]
[{, this, ., node, =, nameNode, ;, this, ., parent, =, assignNode, ;, Node, ancestor, =, assignNode, ;, do, {]
[., node, =, nameNode, ;, this, ., parent, =, assignNode, ;, Node, ancestor, =, assignNode, ;, do, {, ancestor, =]
[., node, =, nameNode, ;, this, ., parent, =, assignNode, ;, Node, ancestor, =, assignNode, ;, do, {, ancestor, =]
[., parent, =, assignNode, ;, Node, ancestor, =, assignNode, ;, do, {, ancestor, =, ancestor, ., getParent, (, ), ;]
[., parent, =, assignNode, ;, Node, ancestor, =, assignNode, ;, do, {, ancestor, =, ancestor, ., getParent, (, ), ;]
[;, Node, ancestor, =, assignNode, ;, do, {, ancestor, =, ancestor, ., getParent, (, ), ;, assignAncestors, ., add, (]
[do, {, ancestor, =, ancestor, ., getParent, (, ), ;, assignAncestors, ., add, (, ancestor, ), ;, }, while, (]
[do, {, ancestor, =, ancestor, ., getParent, (, ), ;, assignAncestors, ., add, (, ancestor, ), ;, }, while, (]
[do, {, ancestor, =, ancestor, ., getParent, (, ), ;, assignAncestors, ., add, (, ancestor, ), ;, }, while, (]
[getParent, (, ), ;, assignAncestors, ., add, (, ancestor, ), ;, }, while, (, ancestor, ., isAssign, (, ), &&]
[getParent, (, ), ;, assignAncestors, ., add, (, ancestor, ), ;, }, while, (, ancestor, ., isAssign, (, ), &&]
[getParent, (, ), ;, assignAncestors, ., add, (, ancestor, ), ;, }, while, (, ancestor, ., isAssign, (, ), &&]
[}, while, (, ancestor, ., isAssign, (, ), &&, ancestor, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), ;]
[(, ancestor, ., isAssign, (, ), &&, ancestor, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), ;, lastAncestor, =]
[(, ancestor, ., isAssign, (, ), &&, ancestor, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), ;, lastAncestor, =]
[), ;, lastAncestor, =, ancestor, ., getParent, (, ), ;, }, public, void, remove, (, ), {, Node, rhs, =]
[), ;, lastAncestor, =, ancestor, ., getParent, (, ), ;, }, public, void, remove, (, ), {, Node, rhs, =]
[;, }, public, void, remove, (, ), {, Node, rhs, =, node, ., getNext, (, ), ;, Node, last, =]
[{, Node, rhs, =, node, ., getNext, (, ), ;, Node, last, =, parent, ;, for, (, Node, ancestor, :]
[., getNext, (, ), ;, Node, last, =, parent, ;, for, (, Node, ancestor, :, assignAncestors, ), {, if, (]
[., getNext, (, ), ;, Node, last, =, parent, ;, for, (, Node, ancestor, :, assignAncestors, ), {, if, (]
[=, parent, ;, for, (, Node, ancestor, :, assignAncestors, ), {, if, (, ancestor, ., isExprResult, (, ), ), {]
[=, parent, ;, for, (, Node, ancestor, :, assignAncestors, ), {, if, (, ancestor, ., isExprResult, (, ), ), {]
[(, Node, ancestor, :, assignAncestors, ), {, if, (, ancestor, ., isExprResult, (, ), ), {, lastAncestor, ., removeChild, (]
[{, if, (, ancestor, ., isExprResult, (, ), ), {, lastAncestor, ., removeChild, (, ancestor, ), ;, }, else, {]
[{, if, (, ancestor, ., isExprResult, (, ), ), {, lastAncestor, ., removeChild, (, ancestor, ), ;, }, else, {]
[(, ), ), {, lastAncestor, ., removeChild, (, ancestor, ), ;, }, else, {, rhs, ., detachFromParent, (, ), ;]
[(, ), ), {, lastAncestor, ., removeChild, (, ancestor, ), ;, }, else, {, rhs, ., detachFromParent, (, ), ;]
[lastAncestor, ., removeChild, (, ancestor, ), ;, }, else, {, rhs, ., detachFromParent, (, ), ;, ancestor, ., replaceChild, (]
[removeChild, (, ancestor, ), ;, }, else, {, rhs, ., detachFromParent, (, ), ;, ancestor, ., replaceChild, (, last, ,]
[;, }, else, {, rhs, ., detachFromParent, (, ), ;, ancestor, ., replaceChild, (, last, ,, rhs, ), ;, }]
[else, {, rhs, ., detachFromParent, (, ), ;, ancestor, ., replaceChild, (, last, ,, rhs, ), ;, }, last, =]
[., detachFromParent, (, ), ;, ancestor, ., replaceChild, (, last, ,, rhs, ), ;, }, last, =, ancestor, ;, }]
[., detachFromParent, (, ), ;, ancestor, ., replaceChild, (, last, ,, rhs, ), ;, }, last, =, ancestor, ;, }]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isAssign, (, ), ), {, Node, nameNode, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isAssign, (, ), ), {, Node, nameNode, =]
[(, n, ., isAssign, (, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, Node, valueNode, =]
[(, n, ., isAssign, (, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, Node, valueNode, =]
[Node, nameNode, =, n, ., getFirstChild, (, ), ;, Node, valueNode, =, n, ., getLastChild, (, ), ;, if, (]
[Node, nameNode, =, n, ., getFirstChild, (, ), ;, Node, valueNode, =, n, ., getLastChild, (, ), ;, if, (]
[Node, nameNode, =, n, ., getFirstChild, (, ), ;, Node, valueNode, =, n, ., getLastChild, (, ), ;, if, (]
[Node, nameNode, =, n, ., getFirstChild, (, ), ;, Node, valueNode, =, n, ., getLastChild, (, ), ;, if, (]
[(, ), ;, Node, valueNode, =, n, ., getLastChild, (, ), ;, if, (, nameNode, ., isQualifiedName, (, ), &&]
[(, ), ;, Node, valueNode, =, n, ., getLastChild, (, ), ;, if, (, nameNode, ., isQualifiedName, (, ), &&]
[n, ., getLastChild, (, ), ;, if, (, nameNode, ., isQualifiedName, (, ), &&, valueNode, ., isQualifiedName, (, ), &&]
[n, ., getLastChild, (, ), ;, if, (, nameNode, ., isQualifiedName, (, ), &&, valueNode, ., isQualifiedName, (, ), &&]
[), ;, if, (, nameNode, ., isQualifiedName, (, ), &&, valueNode, ., isQualifiedName, (, ), &&, ABSTRACT_METHOD_NAME, ., equals, (]
[), ;, if, (, nameNode, ., isQualifiedName, (, ), &&, valueNode, ., isQualifiedName, (, ), &&, ABSTRACT_METHOD_NAME, ., equals, (]
[), &&, valueNode, ., isQualifiedName, (, ), &&, ABSTRACT_METHOD_NAME, ., equals, (, valueNode, ., getQualifiedName, (, ), ), ), {]
[), &&, valueNode, ., isQualifiedName, (, ), &&, ABSTRACT_METHOD_NAME, ., equals, (, valueNode, ., getQualifiedName, (, ), ), ), {]
[isQualifiedName, (, ), &&, ABSTRACT_METHOD_NAME, ., equals, (, valueNode, ., getQualifiedName, (, ), ), ), {, abstractMethodAssignmentNodes, ., add, (]
[&&, ABSTRACT_METHOD_NAME, ., equals, (, valueNode, ., getQualifiedName, (, ), ), ), {, abstractMethodAssignmentNodes, ., add, (, new, RemovableAssignment, (]
[&&, ABSTRACT_METHOD_NAME, ., equals, (, valueNode, ., getQualifiedName, (, ), ), ), {, abstractMethodAssignmentNodes, ., add, (, new, RemovableAssignment, (]
[., getQualifiedName, (, ), ), ), {, abstractMethodAssignmentNodes, ., add, (, new, RemovableAssignment, (, n, ., getFirstChild, (, ), ,]
[(, ), ), ), {, abstractMethodAssignmentNodes, ., add, (, new, RemovableAssignment, (, n, ., getFirstChild, (, ), ,, n, ,]
[t, ), ), ;, }, }, }, }, private, class, FindAssertionCalls, extends, AbstractPostOrderCallback, {, Set, <, String, >, assertionNames, =]
[t, ), ), ;, }, }, }, }, private, class, FindAssertionCalls, extends, AbstractPostOrderCallback, {, Set, <, String, >, assertionNames, =]
[<, String, >, assertionNames, =, Sets, ., newHashSet, (, ), ;, FindAssertionCalls, (, ), {, for, (, AssertionFunctionSpec, spec, :]
[<, String, >, assertionNames, =, Sets, ., newHashSet, (, ), ;, FindAssertionCalls, (, ), {, for, (, AssertionFunctionSpec, spec, :]
[<, String, >, assertionNames, =, Sets, ., newHashSet, (, ), ;, FindAssertionCalls, (, ), {, for, (, AssertionFunctionSpec, spec, :]
[FindAssertionCalls, (, ), {, for, (, AssertionFunctionSpec, spec, :, compiler, ., getCodingConvention, (, ), ., getAssertionFunctions, (, ), ), {]
[FindAssertionCalls, (, ), {, for, (, AssertionFunctionSpec, spec, :, compiler, ., getCodingConvention, (, ), ., getAssertionFunctions, (, ), ), {]
[for, (, AssertionFunctionSpec, spec, :, compiler, ., getCodingConvention, (, ), ., getAssertionFunctions, (, ), ), {, assertionNames, ., add, (]
[for, (, AssertionFunctionSpec, spec, :, compiler, ., getCodingConvention, (, ), ., getAssertionFunctions, (, ), ), {, assertionNames, ., add, (]
[}, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), ), {, String, fnName, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), ), {, String, fnName, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), ), {, String, fnName, =]
[isCall, (, ), ), {, String, fnName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (]
[isCall, (, ), ), {, String, fnName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (]
[{, String, fnName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, assertionNames, ., contains, (]
[n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, assertionNames, ., contains, (, fnName, ), ), {]
[n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, assertionNames, ., contains, (, fnName, ), ), {]
[), ., getQualifiedName, (, ), ;, if, (, assertionNames, ., contains, (, fnName, ), ), {, assertionCalls, ., add, (]
[(, n, ), ;, }, }, }, }, ClosureCodeRemoval, (, AbstractCompiler, compiler, ,, boolean, removeAbstractMethods, ,, boolean, removeAssertionCalls, ), {]
[(, n, ), ;, }, }, }, }, ClosureCodeRemoval, (, AbstractCompiler, compiler, ,, boolean, removeAbstractMethods, ,, boolean, removeAssertionCalls, ), {]
[}, }, }, }, ClosureCodeRemoval, (, AbstractCompiler, compiler, ,, boolean, removeAbstractMethods, ,, boolean, removeAssertionCalls, ), {, this, ., compiler, =]
[}, }, ClosureCodeRemoval, (, AbstractCompiler, compiler, ,, boolean, removeAbstractMethods, ,, boolean, removeAssertionCalls, ), {, this, ., compiler, =, compiler, ;]
[}, }, ClosureCodeRemoval, (, AbstractCompiler, compiler, ,, boolean, removeAbstractMethods, ,, boolean, removeAssertionCalls, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, boolean, removeAbstractMethods, ,, boolean, removeAssertionCalls, ), {, this, ., compiler, =, compiler, ;, this, ., removeAbstractMethods, =]
[,, boolean, removeAbstractMethods, ,, boolean, removeAssertionCalls, ), {, this, ., compiler, =, compiler, ;, this, ., removeAbstractMethods, =, removeAbstractMethods, ;]
[,, boolean, removeAbstractMethods, ,, boolean, removeAssertionCalls, ), {, this, ., compiler, =, compiler, ;, this, ., removeAbstractMethods, =, removeAbstractMethods, ;]
[boolean, removeAssertionCalls, ), {, this, ., compiler, =, compiler, ;, this, ., removeAbstractMethods, =, removeAbstractMethods, ;, this, ., removeAssertionCalls, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, List, <, Callback, >, passes, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, List, <, Callback, >, passes, =]
[externs, ,, Node, root, ), {, List, <, Callback, >, passes, =, Lists, ., newArrayList, (, ), ;, if, (]
[root, ), {, List, <, Callback, >, passes, =, Lists, ., newArrayList, (, ), ;, if, (, removeAbstractMethods, ), {]
[root, ), {, List, <, Callback, >, passes, =, Lists, ., newArrayList, (, ), ;, if, (, removeAbstractMethods, ), {]
[<, Callback, >, passes, =, Lists, ., newArrayList, (, ), ;, if, (, removeAbstractMethods, ), {, passes, ., add, (]
[), ;, if, (, removeAbstractMethods, ), {, passes, ., add, (, new, FindAbstractMethods, (, ), ), ;, }, if, (]
[(, removeAbstractMethods, ), {, passes, ., add, (, new, FindAbstractMethods, (, ), ), ;, }, if, (, removeAssertionCalls, ), {]
[(, removeAbstractMethods, ), {, passes, ., add, (, new, FindAbstractMethods, (, ), ), ;, }, if, (, removeAssertionCalls, ), {]
[passes, ., add, (, new, FindAbstractMethods, (, ), ), ;, }, if, (, removeAssertionCalls, ), {, passes, ., add, (]
[), ), ;, }, if, (, removeAssertionCalls, ), {, passes, ., add, (, new, FindAssertionCalls, (, ), ), ;, }]
[), ), ;, }, if, (, removeAssertionCalls, ), {, passes, ., add, (, new, FindAssertionCalls, (, ), ), ;, }]
[if, (, removeAssertionCalls, ), {, passes, ., add, (, new, FindAssertionCalls, (, ), ), ;, }, CombinedCompilerPass, ., traverse, (]
[removeAssertionCalls, ), {, passes, ., add, (, new, FindAssertionCalls, (, ), ), ;, }, CombinedCompilerPass, ., traverse, (, compiler, ,]
[{, passes, ., add, (, new, FindAssertionCalls, (, ), ), ;, }, CombinedCompilerPass, ., traverse, (, compiler, ,, root, ,]
[), ), ;, }, CombinedCompilerPass, ., traverse, (, compiler, ,, root, ,, passes, ), ;, for, (, RemovableAssignment, assignment, :]
[}, CombinedCompilerPass, ., traverse, (, compiler, ,, root, ,, passes, ), ;, for, (, RemovableAssignment, assignment, :, abstractMethodAssignmentNodes, ), {]
[}, CombinedCompilerPass, ., traverse, (, compiler, ,, root, ,, passes, ), ;, for, (, RemovableAssignment, assignment, :, abstractMethodAssignmentNodes, ), {]
[for, (, RemovableAssignment, assignment, :, abstractMethodAssignmentNodes, ), {, assignment, ., remove, (, ), ;, }, for, (, Node, call, :]
[), {, assignment, ., remove, (, ), ;, }, for, (, Node, call, :, assertionCalls, ), {, Node, parent, =]
[), {, assignment, ., remove, (, ), ;, }, for, (, Node, call, :, assertionCalls, ), {, Node, parent, =]
[}, for, (, Node, call, :, assertionCalls, ), {, Node, parent, =, call, ., getParent, (, ), ;, if, (]
[}, for, (, Node, call, :, assertionCalls, ), {, Node, parent, =, call, ., getParent, (, ), ;, if, (]
[), {, Node, parent, =, call, ., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {]
[), {, Node, parent, =, call, ., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {]
[), {, Node, parent, =, call, ., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {]
[(, ), ;, if, (, parent, ., isExprResult, (, ), ), {, parent, ., getParent, (, ), ., removeChild, (]
[), ), {, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, }, else, {, Node, firstArg, =]
[), ), {, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, }, else, {, Node, firstArg, =]
[), ), {, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, }, else, {, Node, firstArg, =]
[), ;, }, else, {, Node, firstArg, =, call, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[), ;, }, else, {, Node, firstArg, =, call, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[}, else, {, Node, firstArg, =, call, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, firstArg, ==]
[Node, firstArg, =, call, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, firstArg, ==, null, ), {]
[Node, firstArg, =, call, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, firstArg, ==, null, ), {]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, firstArg, ==, null, ), {, parent, ., replaceChild, (]
[(, ), ., getNext, (, ), ;, if, (, firstArg, ==, null, ), {, parent, ., replaceChild, (, call, ,]
[(, ), ., getNext, (, ), ;, if, (, firstArg, ==, null, ), {, parent, ., replaceChild, (, call, ,]
[(, ), ;, if, (, firstArg, ==, null, ), {, parent, ., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (]
[null, ), {, parent, ., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (, call, ), ), ;, }, else, {]
[null, ), {, parent, ., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (, call, ), ), ;, }, else, {]
[., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (, call, ), ), ;, }, else, {, parent, ., replaceChild, (]
[(, call, ,, NodeUtil, ., newUndefinedNode, (, call, ), ), ;, }, else, {, parent, ., replaceChild, (, call, ,]
[(, call, ,, NodeUtil, ., newUndefinedNode, (, call, ), ), ;, }, else, {, parent, ., replaceChild, (, call, ,]
[), ;, }, else, {, parent, ., replaceChild, (, call, ,, firstArg, ., detachFromParent, (, ), ), ;, }, }]
[), ;, }, else, {, parent, ., replaceChild, (, call, ,, firstArg, ., detachFromParent, (, ), ), ;, }, }]
