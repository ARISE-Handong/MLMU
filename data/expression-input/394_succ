[;, private, static, final, Annotation, VISITED_EDGE, =, new, Annotation, (, ), {, }, ;, private, static, final, Annotation, WHITE, =]
[;, private, static, final, Annotation, WHITE, =, null, ;, private, static, final, Annotation, GRAY, =, new, Annotation, (, ), {]
[;, private, static, final, Annotation, GRAY, =, new, Annotation, (, ), {, }, ;, private, static, final, Annotation, BLACK, =]
[;, private, static, final, Annotation, BLACK, =, new, Annotation, (, ), {, }, ;, private, final, DiGraph, <, N, ,]
[;, private, final, DiGraph, <, N, ,, E, >, graph, ;, private, final, DiGraphNode, <, N, ,, E, >, start]
[=, graph, ;, this, ., start, =, a, ;, this, ., end, =, b, ;, this, ., nodePredicate, =, nodePredicate]
[., graph, =, graph, ;, this, ., start, =, a, ;, this, ., end, =, b, ;, this, ., nodePredicate]
[;, this, ., start, =, a, ;, this, ., end, =, b, ;, this, ., nodePredicate, =, nodePredicate, ;, this]
[=, a, ;, this, ., end, =, b, ;, this, ., nodePredicate, =, nodePredicate, ;, this, ., edgePredicate, =, edgePredicate]
[., start, =, a, ;, this, ., end, =, b, ;, this, ., nodePredicate, =, nodePredicate, ;, this, ., edgePredicate]
[;, this, ., end, =, b, ;, this, ., nodePredicate, =, nodePredicate, ;, this, ., edgePredicate, =, edgePredicate, ;, this]
[=, b, ;, this, ., nodePredicate, =, nodePredicate, ;, this, ., edgePredicate, =, edgePredicate, ;, this, ., inclusive, =, inclusive]
[., end, =, b, ;, this, ., nodePredicate, =, nodePredicate, ;, this, ., edgePredicate, =, edgePredicate, ;, this, ., inclusive]
[;, this, ., nodePredicate, =, nodePredicate, ;, this, ., edgePredicate, =, edgePredicate, ;, this, ., inclusive, =, inclusive, ;, }]
[=, nodePredicate, ;, this, ., edgePredicate, =, edgePredicate, ;, this, ., inclusive, =, inclusive, ;, }, CheckPathsBetweenNodes, (, DiGraph, <]
[., nodePredicate, =, nodePredicate, ;, this, ., edgePredicate, =, edgePredicate, ;, this, ., inclusive, =, inclusive, ;, }, CheckPathsBetweenNodes, (]
[;, this, ., edgePredicate, =, edgePredicate, ;, this, ., inclusive, =, inclusive, ;, }, CheckPathsBetweenNodes, (, DiGraph, <, N, ,]
[=, edgePredicate, ;, this, ., inclusive, =, inclusive, ;, }, CheckPathsBetweenNodes, (, DiGraph, <, N, ,, E, >, graph, ,]
[., edgePredicate, =, edgePredicate, ;, this, ., inclusive, =, inclusive, ;, }, CheckPathsBetweenNodes, (, DiGraph, <, N, ,, E, >]
[;, this, ., inclusive, =, inclusive, ;, }, CheckPathsBetweenNodes, (, DiGraph, <, N, ,, E, >, graph, ,, DiGraphNode, <]
[=, inclusive, ;, }, CheckPathsBetweenNodes, (, DiGraph, <, N, ,, E, >, graph, ,, DiGraphNode, <, N, ,, E, >]
[., inclusive, =, inclusive, ;, }, CheckPathsBetweenNodes, (, DiGraph, <, N, ,, E, >, graph, ,, DiGraphNode, <, N, ,]
[;, }, CheckPathsBetweenNodes, (, DiGraph, <, N, ,, E, >, graph, ,, DiGraphNode, <, N, ,, E, >, a, ,]
[,, a, ,, b, ,, nodePredicate, ,, edgePredicate, ,, true, ), ;, }, public, boolean, allPathsSatisfyPredicate, (, ), {, setUp]
[,, b, ,, nodePredicate, ,, edgePredicate, ,, true, ), ;, }, public, boolean, allPathsSatisfyPredicate, (, ), {, setUp, (, )]
[,, nodePredicate, ,, edgePredicate, ,, true, ), ;, }, public, boolean, allPathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean]
[,, edgePredicate, ,, true, ), ;, }, public, boolean, allPathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean, result, =]
[,, true, ), ;, }, public, boolean, allPathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean, result, =, checkAllPathsWithoutBackEdges, (]
[), ;, }, public, boolean, allPathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean, result, =, checkAllPathsWithoutBackEdges, (, start, ,]
[;, boolean, result, =, checkAllPathsWithoutBackEdges, (, start, ,, end, ), ;, tearDown, (, ), ;, return, result, ;, }, public]
[;, tearDown, (, ), ;, return, result, ;, }, public, boolean, somePathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean]
[,, end, ), ;, tearDown, (, ), ;, return, result, ;, }, public, boolean, somePathsSatisfyPredicate, (, ), {, setUp, (]
[), ;, tearDown, (, ), ;, return, result, ;, }, public, boolean, somePathsSatisfyPredicate, (, ), {, setUp, (, ), ;]
[;, return, result, ;, }, public, boolean, somePathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean, result, =, checkSomePathsWithoutBackEdges, (]
[;, }, public, boolean, somePathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean, result, =, checkSomePathsWithoutBackEdges, (, start, ,, end]
[;, boolean, result, =, checkSomePathsWithoutBackEdges, (, start, ,, end, ), ;, tearDown, (, ), ;, return, result, ;, }, private]
[;, tearDown, (, ), ;, return, result, ;, }, private, void, setUp, (, ), {, graph, ., pushNodeAnnotations, (, )]
[,, end, ), ;, tearDown, (, ), ;, return, result, ;, }, private, void, setUp, (, ), {, graph, .]
[), ;, tearDown, (, ), ;, return, result, ;, }, private, void, setUp, (, ), {, graph, ., pushNodeAnnotations, (]
[;, return, result, ;, }, private, void, setUp, (, ), {, graph, ., pushNodeAnnotations, (, ), ;, graph, ., pushEdgeAnnotations]
[;, }, private, void, setUp, (, ), {, graph, ., pushNodeAnnotations, (, ), ;, graph, ., pushEdgeAnnotations, (, ), ;]
[;, graph, ., pushEdgeAnnotations, (, ), ;, discoverBackEdges, (, this, ., start, ), ;, }, private, void, tearDown, (, )]
[., pushNodeAnnotations, (, ), ;, graph, ., pushEdgeAnnotations, (, ), ;, discoverBackEdges, (, this, ., start, ), ;, }, private]
[;, discoverBackEdges, (, this, ., start, ), ;, }, private, void, tearDown, (, ), {, graph, ., popNodeAnnotations, (, )]
[., pushEdgeAnnotations, (, ), ;, discoverBackEdges, (, this, ., start, ), ;, }, private, void, tearDown, (, ), {, graph]
[;, }, private, void, tearDown, (, ), {, graph, ., popNodeAnnotations, (, ), ;, graph, ., popEdgeAnnotations, (, ), ;]
[), ;, }, private, void, tearDown, (, ), {, graph, ., popNodeAnnotations, (, ), ;, graph, ., popEdgeAnnotations, (, )]
[., start, ), ;, }, private, void, tearDown, (, ), {, graph, ., popNodeAnnotations, (, ), ;, graph, ., popEdgeAnnotations]
[;, graph, ., popEdgeAnnotations, (, ), ;, }, private, void, discoverBackEdges, (, DiGraphNode, <, N, ,, E, >, u, )]
[., popNodeAnnotations, (, ), ;, graph, ., popEdgeAnnotations, (, ), ;, }, private, void, discoverBackEdges, (, DiGraphNode, <, N, ,]
[;, }, private, void, discoverBackEdges, (, DiGraphNode, <, N, ,, E, >, u, ), {, u, ., setAnnotation, (, GRAY]
[., popEdgeAnnotations, (, ), ;, }, private, void, discoverBackEdges, (, DiGraphNode, <, N, ,, E, >, u, ), {, u]
[;, for, (, DiGraphEdge, <, N, ,, E, >, e, :, u, ., getOutEdges, (, ), ), {, if, (]
[., setAnnotation, (, GRAY, ), ;, for, (, DiGraphEdge, <, N, ,, E, >, e, :, u, ., getOutEdges, (]
[), ;, for, (, DiGraphEdge, <, N, ,, E, >, e, :, u, ., getOutEdges, (, ), ), {, if]
[), {, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, v]
[., getOutEdges, (, ), ), {, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, DiGraphNode, <, N]
[), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, v, =, e, ., getDestination, (, ), ;, if]
[), ), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, v, =, e, ., getDestination, (, ), ;]
[;, if, (, v, ., getAnnotation, (, ), ==, WHITE, ), {, discoverBackEdges, (, v, ), ;, }, else, if]
[., getDestination, (, ), ;, if, (, v, ., getAnnotation, (, ), ==, WHITE, ), {, discoverBackEdges, (, v, )]
[), {, discoverBackEdges, (, v, ), ;, }, else, if, (, v, ., getAnnotation, (, ), ==, GRAY, ), {]
[==, WHITE, ), {, discoverBackEdges, (, v, ), ;, }, else, if, (, v, ., getAnnotation, (, ), ==, GRAY]
[., getAnnotation, (, ), ==, WHITE, ), {, discoverBackEdges, (, v, ), ;, }, else, if, (, v, ., getAnnotation]
[), {, discoverBackEdges, (, v, ), ;, }, else, if, (, v, ., getAnnotation, (, ), ==, GRAY, ), {]
[;, }, else, if, (, v, ., getAnnotation, (, ), ==, GRAY, ), {, e, ., setAnnotation, (, BACK_EDGE, )]
[), ;, }, else, if, (, v, ., getAnnotation, (, ), ==, GRAY, ), {, e, ., setAnnotation, (, BACK_EDGE]
[), {, e, ., setAnnotation, (, BACK_EDGE, ), ;, }, }, u, ., setAnnotation, (, BLACK, ), ;, }, private]
[==, GRAY, ), {, e, ., setAnnotation, (, BACK_EDGE, ), ;, }, }, u, ., setAnnotation, (, BLACK, ), ;]
[., getAnnotation, (, ), ==, GRAY, ), {, e, ., setAnnotation, (, BACK_EDGE, ), ;, }, }, u, ., setAnnotation]
[), {, e, ., setAnnotation, (, BACK_EDGE, ), ;, }, }, u, ., setAnnotation, (, BLACK, ), ;, }, private]
[;, }, }, u, ., setAnnotation, (, BLACK, ), ;, }, private, boolean, ignoreEdge, (, DiGraphEdge, <, N, ,, E]
[., setAnnotation, (, BACK_EDGE, ), ;, }, }, u, ., setAnnotation, (, BLACK, ), ;, }, private, boolean, ignoreEdge, (]
[), ;, }, }, u, ., setAnnotation, (, BLACK, ), ;, }, private, boolean, ignoreEdge, (, DiGraphEdge, <, N, ,]
[;, }, private, boolean, ignoreEdge, (, DiGraphEdge, <, N, ,, E, >, e, ), {, return, !, edgePredicate, ., apply]
[., setAnnotation, (, BLACK, ), ;, }, private, boolean, ignoreEdge, (, DiGraphEdge, <, N, ,, E, >, e, ), {]
[), ;, }, private, boolean, ignoreEdge, (, DiGraphEdge, <, N, ,, E, >, e, ), {, return, !, edgePredicate, .]
[;, }, private, boolean, checkAllPathsWithoutBackEdges, (, DiGraphNode, <, N, ,, E, >, a, ,, DiGraphNode, <, N, ,, E, >]
[;, }, private, boolean, checkAllPathsWithoutBackEdges, (, DiGraphNode, <, N, ,, E, >, a, ,, DiGraphNode, <, N, ,, E, >]
[., apply, (, e, ), ;, }, private, boolean, checkAllPathsWithoutBackEdges, (, DiGraphNode, <, N, ,, E, >, a, ,, DiGraphNode]
[), ;, }, private, boolean, checkAllPathsWithoutBackEdges, (, DiGraphNode, <, N, ,, E, >, a, ,, DiGraphNode, <, N, ,, E]
[), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for, (, DiGraphEdge]
[&&, (, inclusive, ||, (, a, !=, start, &&, a, !=, end, ), ), ), {, return, true, ;, }]
[., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=, start, &&, a, !=]
[), &&, (, inclusive, ||, (, a, !=, start, &&, a, !=, end, ), ), ), {, return, true, ;]
[., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=, start, &&, a, !=, end, ), ), )]
[), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for, (, DiGraphEdge]
[), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for, (]
[||, (, a, !=, start, &&, a, !=, end, ), ), ), {, return, true, ;, }, if, (, a]
[), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for, (]
[), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for]
[&&, a, !=, end, ), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return]
[!=, start, &&, a, !=, end, ), ), ), {, return, true, ;, }, if, (, a, ==, b, )]
[&&, a, !=, end, ), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return]
[), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for]
[!=, end, ), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;]
[), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for]
[;, }, if, (, a, ==, b, ), {, return, false, ;, }, for, (, DiGraphEdge, <, N, ,, E]
[), {, return, false, ;, }, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, ., getOutEdges, (]
[==, b, ), {, return, false, ;, }, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, .]
[), {, return, false, ;, }, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, ., getOutEdges, (]
[;, }, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, ., getOutEdges, (, ), ), {, if]
[), {, if, (, e, ., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }, e, ., setAnnotation, (]
[., getOutEdges, (, ), ), {, if, (, e, ., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }]
[), {, continue, ;, }, e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, ), ), {]
[==, VISITED_EDGE, ), {, continue, ;, }, e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, )]
[., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }, e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (]
[), {, continue, ;, }, e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, ), ), {]
[;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (, e, ., getAnnotation, (, ), ==]
[., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (, e]
[), ;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (, e, ., getAnnotation, (, )]
[), {, continue, ;, }, if, (, e, ., getAnnotation, (, ), ==, BACK_EDGE, ), {, continue, ;, }, DiGraphNode]
[), ), {, continue, ;, }, if, (, e, ., getAnnotation, (, ), ==, BACK_EDGE, ), {, continue, ;, }]
[), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =, e, ., getDestination, (, ), ;, if]
[==, BACK_EDGE, ), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =, e, ., getDestination, (, )]
[., getAnnotation, (, ), ==, BACK_EDGE, ), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =, e]
[), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =, e, ., getDestination, (, ), ;, if]
[;, if, (, !, checkAllPathsWithoutBackEdges, (, next, ,, b, ), ), {, return, false, ;, }, }, return, true, ;]
[., getDestination, (, ), ;, if, (, !, checkAllPathsWithoutBackEdges, (, next, ,, b, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, }, return, true, ;, }, private, boolean, checkSomePathsWithoutBackEdges, (, DiGraphNode, <, N, ,, E]
[), {, return, false, ;, }, }, return, true, ;, }, private, boolean, checkSomePathsWithoutBackEdges, (, DiGraphNode, <, N, ,, E]
[,, b, ), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, checkSomePathsWithoutBackEdges, (, DiGraphNode, <]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, checkSomePathsWithoutBackEdges, (, DiGraphNode, <, N, ,]
[;, }, }, return, true, ;, }, private, boolean, checkSomePathsWithoutBackEdges, (, DiGraphNode, <, N, ,, E, >, a, ,, DiGraphNode]
[;, }, private, boolean, checkSomePathsWithoutBackEdges, (, DiGraphNode, <, N, ,, E, >, a, ,, DiGraphNode, <, N, ,, E, >]
[), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for, (, DiGraphEdge]
[&&, (, inclusive, ||, (, a, !=, start, &&, a, !=, end, ), ), ), {, return, true, ;, }]
[., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=, start, &&, a, !=]
[), &&, (, inclusive, ||, (, a, !=, start, &&, a, !=, end, ), ), ), {, return, true, ;]
[., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=, start, &&, a, !=, end, ), ), )]
[), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for, (, DiGraphEdge]
[), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for, (]
[||, (, a, !=, start, &&, a, !=, end, ), ), ), {, return, true, ;, }, if, (, a]
[), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for, (]
[), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for]
[&&, a, !=, end, ), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return]
[!=, start, &&, a, !=, end, ), ), ), {, return, true, ;, }, if, (, a, ==, b, )]
[&&, a, !=, end, ), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return]
[), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for]
[!=, end, ), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;]
[), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return, false, ;, }, for]
[;, }, if, (, a, ==, b, ), {, return, false, ;, }, for, (, DiGraphEdge, <, N, ,, E]
[), {, return, false, ;, }, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, ., getOutEdges, (]
[==, b, ), {, return, false, ;, }, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, .]
[), {, return, false, ;, }, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, ., getOutEdges, (]
[;, }, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, ., getOutEdges, (, ), ), {, if]
[), {, if, (, e, ., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }, e, ., setAnnotation, (]
[., getOutEdges, (, ), ), {, if, (, e, ., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }]
[), {, continue, ;, }, e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, ), ), {]
[==, VISITED_EDGE, ), {, continue, ;, }, e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, )]
[., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }, e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (]
[), {, continue, ;, }, e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, ), ), {]
[;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (, e, ., getAnnotation, (, ), ==]
[., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (, e]
[), ;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (, e, ., getAnnotation, (, )]
[), {, continue, ;, }, if, (, e, ., getAnnotation, (, ), ==, BACK_EDGE, ), {, continue, ;, }, DiGraphNode]
[), ), {, continue, ;, }, if, (, e, ., getAnnotation, (, ), ==, BACK_EDGE, ), {, continue, ;, }]
[), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =, e, ., getDestination, (, ), ;, if]
[==, BACK_EDGE, ), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =, e, ., getDestination, (, )]
[., getAnnotation, (, ), ==, BACK_EDGE, ), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =, e]
[), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =, e, ., getDestination, (, ), ;, if]
[;, if, (, checkSomePathsWithoutBackEdges, (, next, ,, b, ), ), {, return, true, ;, }, }, return, false, ;, }]
[., getDestination, (, ), ;, if, (, checkSomePathsWithoutBackEdges, (, next, ,, b, ), ), {, return, true, ;, }, }]
[), {, return, true, ;, }, }, return, false, ;, }, }]
[,, b, ), ), {, return, true, ;, }, }, return, false, ;, }, }]
[), ), {, return, true, ;, }, }, return, false, ;, }, }]
[;, }, }, return, false, ;, }, }]
[;, }, }]
