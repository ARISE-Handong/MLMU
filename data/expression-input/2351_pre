[., util, ., FastMath, ;, public, class, OrderedTuple, implements, Comparable, <, OrderedTuple, >, {, private, static, final, long, SIGN_MASK, =]
[implements, Comparable, <, OrderedTuple, >, {, private, static, final, long, SIGN_MASK, =, 0x8000000000000000L, ;, private, static, final, long, EXPONENT_MASK, =]
[final, long, SIGN_MASK, =, 0x8000000000000000L, ;, private, static, final, long, EXPONENT_MASK, =, 0x7ff0000000000000L, ;, private, static, final, long, MANTISSA_MASK, =]
[final, long, EXPONENT_MASK, =, 0x7ff0000000000000L, ;, private, static, final, long, MANTISSA_MASK, =, 0x000fffffffffffffL, ;, private, static, final, long, IMPLICIT_ONE, =]
[boolean, posInf, ;, private, boolean, negInf, ;, private, boolean, nan, ;, public, OrderedTuple, (, final, double, ..., components, ), {]
[boolean, posInf, ;, private, boolean, negInf, ;, private, boolean, nan, ;, public, OrderedTuple, (, final, double, ..., components, ), {]
[boolean, negInf, ;, private, boolean, nan, ;, public, OrderedTuple, (, final, double, ..., components, ), {, this, ., components, =]
[boolean, negInf, ;, private, boolean, nan, ;, public, OrderedTuple, (, final, double, ..., components, ), {, this, ., components, =]
[(, final, double, ..., components, ), {, this, ., components, =, components, ., clone, (, ), ;, int, msb, =]
[(, final, double, ..., components, ), {, this, ., components, =, components, ., clone, (, ), ;, int, msb, =]
[components, ), {, this, ., components, =, components, ., clone, (, ), ;, int, msb, =, Integer, ., MIN_VALUE, ;]
[{, this, ., components, =, components, ., clone, (, ), ;, int, msb, =, Integer, ., MIN_VALUE, ;, lsb, =]
[{, this, ., components, =, components, ., clone, (, ), ;, int, msb, =, Integer, ., MIN_VALUE, ;, lsb, =]
[=, components, ., clone, (, ), ;, int, msb, =, Integer, ., MIN_VALUE, ;, lsb, =, Integer, ., MAX_VALUE, ;]
[., clone, (, ), ;, int, msb, =, Integer, ., MIN_VALUE, ;, lsb, =, Integer, ., MAX_VALUE, ;, posInf, =]
[(, ), ;, int, msb, =, Integer, ., MIN_VALUE, ;, lsb, =, Integer, ., MAX_VALUE, ;, posInf, =, false, ;]
[;, int, msb, =, Integer, ., MIN_VALUE, ;, lsb, =, Integer, ., MAX_VALUE, ;, posInf, =, false, ;, negInf, =]
[msb, =, Integer, ., MIN_VALUE, ;, lsb, =, Integer, ., MAX_VALUE, ;, posInf, =, false, ;, negInf, =, false, ;]
[Integer, ., MIN_VALUE, ;, lsb, =, Integer, ., MAX_VALUE, ;, posInf, =, false, ;, negInf, =, false, ;, nan, =]
[., MAX_VALUE, ;, posInf, =, false, ;, negInf, =, false, ;, nan, =, false, ;, for, (, int, i, =]
[;, posInf, =, false, ;, negInf, =, false, ;, nan, =, false, ;, for, (, int, i, =, 0, ;]
[;, posInf, =, false, ;, negInf, =, false, ;, nan, =, false, ;, for, (, int, i, =, 0, ;]
[=, false, ;, negInf, =, false, ;, nan, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[=, false, ;, negInf, =, false, ;, nan, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[=, false, ;, nan, =, false, ;, for, (, int, i, =, 0, ;, i, <, components, ., length, ;]
[false, ;, nan, =, false, ;, for, (, int, i, =, 0, ;, i, <, components, ., length, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, components, ., length, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, components, ., length, ;, ++, i, ), {, if, (]
[i, =, 0, ;, i, <, components, ., length, ;, ++, i, ), {, if, (, Double, ., isInfinite, (]
[i, =, 0, ;, i, <, components, ., length, ;, ++, i, ), {, if, (, Double, ., isInfinite, (]
[0, ;, i, <, components, ., length, ;, ++, i, ), {, if, (, Double, ., isInfinite, (, components, []
[;, ++, i, ), {, if, (, Double, ., isInfinite, (, components, [, i, ], ), ), {, if, (]
[;, ++, i, ), {, if, (, Double, ., isInfinite, (, components, [, i, ], ), ), {, if, (]
[;, ++, i, ), {, if, (, Double, ., isInfinite, (, components, [, i, ], ), ), {, if, (]
[i, ), {, if, (, Double, ., isInfinite, (, components, [, i, ], ), ), {, if, (, components, []
[if, (, Double, ., isInfinite, (, components, [, i, ], ), ), {, if, (, components, [, i, ], <]
[., isInfinite, (, components, [, i, ], ), ), {, if, (, components, [, i, ], <, 0, ), {]
[(, components, [, i, ], ), ), {, if, (, components, [, i, ], <, 0, ), {, negInf, =]
[), ), {, if, (, components, [, i, ], <, 0, ), {, negInf, =, true, ;, }, else, {]
[{, if, (, components, [, i, ], <, 0, ), {, negInf, =, true, ;, }, else, {, posInf, =]
[<, 0, ), {, negInf, =, true, ;, }, else, {, posInf, =, true, ;, }, }, else, if, (]
[<, 0, ), {, negInf, =, true, ;, }, else, {, posInf, =, true, ;, }, }, else, if, (]
[negInf, =, true, ;, }, else, {, posInf, =, true, ;, }, }, else, if, (, Double, ., isNaN, (]
[negInf, =, true, ;, }, else, {, posInf, =, true, ;, }, }, else, if, (, Double, ., isNaN, (]
[true, ;, }, else, {, posInf, =, true, ;, }, }, else, if, (, Double, ., isNaN, (, components, []
[posInf, =, true, ;, }, }, else, if, (, Double, ., isNaN, (, components, [, i, ], ), ), {]
[true, ;, }, }, else, if, (, Double, ., isNaN, (, components, [, i, ], ), ), {, nan, =]
[isNaN, (, components, [, i, ], ), ), {, nan, =, true, ;, }, else, {, final, long, b, =]
[isNaN, (, components, [, i, ], ), ), {, nan, =, true, ;, }, else, {, final, long, b, =]
[i, ], ), ), {, nan, =, true, ;, }, else, {, final, long, b, =, Double, ., doubleToLongBits, (]
[i, ], ), ), {, nan, =, true, ;, }, else, {, final, long, b, =, Double, ., doubleToLongBits, (]
[), ), {, nan, =, true, ;, }, else, {, final, long, b, =, Double, ., doubleToLongBits, (, components, []
[else, {, final, long, b, =, Double, ., doubleToLongBits, (, components, [, i, ], ), ;, final, long, m, =]
[final, long, b, =, Double, ., doubleToLongBits, (, components, [, i, ], ), ;, final, long, m, =, mantissa, (]
[., doubleToLongBits, (, components, [, i, ], ), ;, final, long, m, =, mantissa, (, b, ), ;, if, (]
[., doubleToLongBits, (, components, [, i, ], ), ;, final, long, m, =, mantissa, (, b, ), ;, if, (]
[(, components, [, i, ], ), ;, final, long, m, =, mantissa, (, b, ), ;, if, (, m, !=]
[final, long, m, =, mantissa, (, b, ), ;, if, (, m, !=, 0, ), {, final, int, e, =]
[m, =, mantissa, (, b, ), ;, if, (, m, !=, 0, ), {, final, int, e, =, exponent, (]
[(, b, ), ;, if, (, m, !=, 0, ), {, final, int, e, =, exponent, (, b, ), ;]
[), ;, if, (, m, !=, 0, ), {, final, int, e, =, exponent, (, b, ), ;, msb, =]
[), ;, if, (, m, !=, 0, ), {, final, int, e, =, exponent, (, b, ), ;, msb, =]
[m, !=, 0, ), {, final, int, e, =, exponent, (, b, ), ;, msb, =, FastMath, ., max, (]
[0, ), {, final, int, e, =, exponent, (, b, ), ;, msb, =, FastMath, ., max, (, msb, ,]
[0, ), {, final, int, e, =, exponent, (, b, ), ;, msb, =, FastMath, ., max, (, msb, ,]
[{, final, int, e, =, exponent, (, b, ), ;, msb, =, FastMath, ., max, (, msb, ,, e, +]
[int, e, =, exponent, (, b, ), ;, msb, =, FastMath, ., max, (, msb, ,, e, +, computeMSB, (]
[(, b, ), ;, msb, =, FastMath, ., max, (, msb, ,, e, +, computeMSB, (, m, ), ), ;]
[), ;, msb, =, FastMath, ., max, (, msb, ,, e, +, computeMSB, (, m, ), ), ;, lsb, =]
[), ;, msb, =, FastMath, ., max, (, msb, ,, e, +, computeMSB, (, m, ), ), ;, lsb, =]
[FastMath, ., max, (, msb, ,, e, +, computeMSB, (, m, ), ), ;, lsb, =, FastMath, ., min, (]
[max, (, msb, ,, e, +, computeMSB, (, m, ), ), ;, lsb, =, FastMath, ., min, (, lsb, ,]
[max, (, msb, ,, e, +, computeMSB, (, m, ), ), ;, lsb, =, FastMath, ., min, (, lsb, ,]
[msb, ,, e, +, computeMSB, (, m, ), ), ;, lsb, =, FastMath, ., min, (, lsb, ,, e, +]
[e, +, computeMSB, (, m, ), ), ;, lsb, =, FastMath, ., min, (, lsb, ,, e, +, computeLSB, (]
[=, FastMath, ., min, (, lsb, ,, e, +, computeLSB, (, m, ), ), ;, }, }, }, if, (]
[=, FastMath, ., min, (, lsb, ,, e, +, computeLSB, (, m, ), ), ;, }, }, }, if, (]
[., min, (, lsb, ,, e, +, computeLSB, (, m, ), ), ;, }, }, }, if, (, posInf, &&]
[lsb, ,, e, +, computeLSB, (, m, ), ), ;, }, }, }, if, (, posInf, &&, negInf, ), {]
[e, +, computeLSB, (, m, ), ), ;, }, }, }, if, (, posInf, &&, negInf, ), {, posInf, =]
[computeLSB, (, m, ), ), ;, }, }, }, if, (, posInf, &&, negInf, ), {, posInf, =, false, ;]
[m, ), ), ;, }, }, }, if, (, posInf, &&, negInf, ), {, posInf, =, false, ;, negInf, =]
[), ;, }, }, }, if, (, posInf, &&, negInf, ), {, posInf, =, false, ;, negInf, =, false, ;]
[}, }, }, if, (, posInf, &&, negInf, ), {, posInf, =, false, ;, negInf, =, false, ;, nan, =]
[posInf, &&, negInf, ), {, posInf, =, false, ;, negInf, =, false, ;, nan, =, true, ;, }, if, (]
[posInf, &&, negInf, ), {, posInf, =, false, ;, negInf, =, false, ;, nan, =, true, ;, }, if, (]
[negInf, ), {, posInf, =, false, ;, negInf, =, false, ;, nan, =, true, ;, }, if, (, lsb, <=]
[posInf, =, false, ;, negInf, =, false, ;, nan, =, true, ;, }, if, (, lsb, <=, msb, ), {]
[false, ;, negInf, =, false, ;, nan, =, true, ;, }, if, (, lsb, <=, msb, ), {, encode, (]
[false, ;, negInf, =, false, ;, nan, =, true, ;, }, if, (, lsb, <=, msb, ), {, encode, (]
[negInf, =, false, ;, nan, =, true, ;, }, if, (, lsb, <=, msb, ), {, encode, (, msb, +]
[true, ;, }, if, (, lsb, <=, msb, ), {, encode, (, msb, +, 16, ), ;, }, else, {]
[}, if, (, lsb, <=, msb, ), {, encode, (, msb, +, 16, ), ;, }, else, {, encoding, =]
[<=, msb, ), {, encode, (, msb, +, 16, ), ;, }, else, {, encoding, =, new, long, [, ]]
[msb, ), {, encode, (, msb, +, 16, ), ;, }, else, {, encoding, =, new, long, [, ], {]
[=, new, long, [, ], {, 0x0L, }, ;, }, }, private, void, encode, (, final, int, minOffset, ), {]
[long, [, ], {, 0x0L, }, ;, }, }, private, void, encode, (, final, int, minOffset, ), {, offset, =]
[long, [, ], {, 0x0L, }, ;, }, }, private, void, encode, (, final, int, minOffset, ), {, offset, =]
[], {, 0x0L, }, ;, }, }, private, void, encode, (, final, int, minOffset, ), {, offset, =, minOffset, +]
[0x0L, }, ;, }, }, private, void, encode, (, final, int, minOffset, ), {, offset, =, minOffset, +, 31, ;]
[;, }, }, private, void, encode, (, final, int, minOffset, ), {, offset, =, minOffset, +, 31, ;, offset, -=]
[;, }, }, private, void, encode, (, final, int, minOffset, ), {, offset, =, minOffset, +, 31, ;, offset, -=]
[}, private, void, encode, (, final, int, minOffset, ), {, offset, =, minOffset, +, 31, ;, offset, -=, offset, %]
[(, final, int, minOffset, ), {, offset, =, minOffset, +, 31, ;, offset, -=, offset, %, 32, ;, if, (]
[(, final, int, minOffset, ), {, offset, =, minOffset, +, 31, ;, offset, -=, offset, %, 32, ;, if, (]
[(, final, int, minOffset, ), {, offset, =, minOffset, +, 31, ;, offset, -=, offset, %, 32, ;, if, (]
[final, int, minOffset, ), {, offset, =, minOffset, +, 31, ;, offset, -=, offset, %, 32, ;, if, (, (]
[final, int, minOffset, ), {, offset, =, minOffset, +, 31, ;, offset, -=, offset, %, 32, ;, if, (, (]
[minOffset, ), {, offset, =, minOffset, +, 31, ;, offset, -=, offset, %, 32, ;, if, (, (, encoding, !=]
[offset, =, minOffset, +, 31, ;, offset, -=, offset, %, 32, ;, if, (, (, encoding, !=, null, ), &&]
[=, minOffset, +, 31, ;, offset, -=, offset, %, 32, ;, if, (, (, encoding, !=, null, ), &&, (]
[=, minOffset, +, 31, ;, offset, -=, offset, %, 32, ;, if, (, (, encoding, !=, null, ), &&, (]
[=, minOffset, +, 31, ;, offset, -=, offset, %, 32, ;, if, (, (, encoding, !=, null, ), &&, (]
[;, offset, -=, offset, %, 32, ;, if, (, (, encoding, !=, null, ), &&, (, encoding, ., length, ==]
[offset, %, 32, ;, if, (, (, encoding, !=, null, ), &&, (, encoding, ., length, ==, 1, ), &&]
[%, 32, ;, if, (, (, encoding, !=, null, ), &&, (, encoding, ., length, ==, 1, ), &&, (]
[%, 32, ;, if, (, (, encoding, !=, null, ), &&, (, encoding, ., length, ==, 1, ), &&, (]
[%, 32, ;, if, (, (, encoding, !=, null, ), &&, (, encoding, ., length, ==, 1, ), &&, (]
[;, if, (, (, encoding, !=, null, ), &&, (, encoding, ., length, ==, 1, ), &&, (, encoding, []
[(, encoding, !=, null, ), &&, (, encoding, ., length, ==, 1, ), &&, (, encoding, [, 0, ], ==]
[1, ), &&, (, encoding, [, 0, ], ==, 0x0L, ), ), {, return, ;, }, final, int, neededBits, =]
[1, ), &&, (, encoding, [, 0, ], ==, 0x0L, ), ), {, return, ;, }, final, int, neededBits, =]
[1, ), &&, (, encoding, [, 0, ], ==, 0x0L, ), ), {, return, ;, }, final, int, neededBits, =]
[&&, (, encoding, [, 0, ], ==, 0x0L, ), ), {, return, ;, }, final, int, neededBits, =, offset, +]
[encoding, [, 0, ], ==, 0x0L, ), ), {, return, ;, }, final, int, neededBits, =, offset, +, 1, -]
[), ), {, return, ;, }, final, int, neededBits, =, offset, +, 1, -, lsb, ;, final, int, neededLongs, =]
[), ), {, return, ;, }, final, int, neededBits, =, offset, +, 1, -, lsb, ;, final, int, neededLongs, =]
[), {, return, ;, }, final, int, neededBits, =, offset, +, 1, -, lsb, ;, final, int, neededLongs, =, (]
[), {, return, ;, }, final, int, neededBits, =, offset, +, 1, -, lsb, ;, final, int, neededLongs, =, (]
[return, ;, }, final, int, neededBits, =, offset, +, 1, -, lsb, ;, final, int, neededLongs, =, (, neededBits, +]
[final, int, neededBits, =, offset, +, 1, -, lsb, ;, final, int, neededLongs, =, (, neededBits, +, 62, ), /]
[neededBits, =, offset, +, 1, -, lsb, ;, final, int, neededLongs, =, (, neededBits, +, 62, ), /, 63, ;]
[offset, +, 1, -, lsb, ;, final, int, neededLongs, =, (, neededBits, +, 62, ), /, 63, ;, encoding, =]
[-, lsb, ;, final, int, neededLongs, =, (, neededBits, +, 62, ), /, 63, ;, encoding, =, new, long, []
[-, lsb, ;, final, int, neededLongs, =, (, neededBits, +, 62, ), /, 63, ;, encoding, =, new, long, []
[-, lsb, ;, final, int, neededLongs, =, (, neededBits, +, 62, ), /, 63, ;, encoding, =, new, long, []
[int, neededLongs, =, (, neededBits, +, 62, ), /, 63, ;, encoding, =, new, long, [, components, ., length, *]
[62, ), /, 63, ;, encoding, =, new, long, [, components, ., length, *, neededLongs, ], ;, int, eIndex, =]
[encoding, =, new, long, [, components, ., length, *, neededLongs, ], ;, int, eIndex, =, 0, ;, int, shift, =]
[components, ., length, *, neededLongs, ], ;, int, eIndex, =, 0, ;, int, shift, =, 62, ;, long, word, =]
[int, eIndex, =, 0, ;, int, shift, =, 62, ;, long, word, =, 0x0L, ;, for, (, int, k, =]
[=, 0, ;, int, shift, =, 62, ;, long, word, =, 0x0L, ;, for, (, int, k, =, offset, ;]
[=, 0, ;, int, shift, =, 62, ;, long, word, =, 0x0L, ;, for, (, int, k, =, offset, ;]
[;, int, shift, =, 62, ;, long, word, =, 0x0L, ;, for, (, int, k, =, offset, ;, eIndex, <]
[;, int, shift, =, 62, ;, long, word, =, 0x0L, ;, for, (, int, k, =, offset, ;, eIndex, <]
[62, ;, long, word, =, 0x0L, ;, for, (, int, k, =, offset, ;, eIndex, <, encoding, ., length, ;]
[;, long, word, =, 0x0L, ;, for, (, int, k, =, offset, ;, eIndex, <, encoding, ., length, ;, --]
[int, k, =, offset, ;, eIndex, <, encoding, ., length, ;, --, k, ), {, for, (, int, vIndex, =]
[=, offset, ;, eIndex, <, encoding, ., length, ;, --, k, ), {, for, (, int, vIndex, =, 0, ;]
[=, offset, ;, eIndex, <, encoding, ., length, ;, --, k, ), {, for, (, int, vIndex, =, 0, ;]
[;, eIndex, <, encoding, ., length, ;, --, k, ), {, for, (, int, vIndex, =, 0, ;, vIndex, <]
[;, eIndex, <, encoding, ., length, ;, --, k, ), {, for, (, int, vIndex, =, 0, ;, vIndex, <]
[., length, ;, --, k, ), {, for, (, int, vIndex, =, 0, ;, vIndex, <, components, ., length, ;]
[length, ;, --, k, ), {, for, (, int, vIndex, =, 0, ;, vIndex, <, components, ., length, ;, ++]
[{, for, (, int, vIndex, =, 0, ;, vIndex, <, components, ., length, ;, ++, vIndex, ), {, if, (]
[{, for, (, int, vIndex, =, 0, ;, vIndex, <, components, ., length, ;, ++, vIndex, ), {, if, (]
[(, int, vIndex, =, 0, ;, vIndex, <, components, ., length, ;, ++, vIndex, ), {, if, (, getBit, (]
[vIndex, =, 0, ;, vIndex, <, components, ., length, ;, ++, vIndex, ), {, if, (, getBit, (, vIndex, ,]
[;, vIndex, <, components, ., length, ;, ++, vIndex, ), {, if, (, getBit, (, vIndex, ,, k, ), !=]
[components, ., length, ;, ++, vIndex, ), {, if, (, getBit, (, vIndex, ,, k, ), !=, 0, ), {]
[length, ;, ++, vIndex, ), {, if, (, getBit, (, vIndex, ,, k, ), !=, 0, ), {, word, |=]
[length, ;, ++, vIndex, ), {, if, (, getBit, (, vIndex, ,, k, ), !=, 0, ), {, word, |=]
[++, vIndex, ), {, if, (, getBit, (, vIndex, ,, k, ), !=, 0, ), {, word, |=, 0x1L, <<]
[(, getBit, (, vIndex, ,, k, ), !=, 0, ), {, word, |=, 0x1L, <<, shift, ;, }, if, (]
[(, getBit, (, vIndex, ,, k, ), !=, 0, ), {, word, |=, 0x1L, <<, shift, ;, }, if, (]
[(, getBit, (, vIndex, ,, k, ), !=, 0, ), {, word, |=, 0x1L, <<, shift, ;, }, if, (]
[vIndex, ,, k, ), !=, 0, ), {, word, |=, 0x1L, <<, shift, ;, }, if, (, shift, --, ==]
[), !=, 0, ), {, word, |=, 0x1L, <<, shift, ;, }, if, (, shift, --, ==, 0, ), {]
[), !=, 0, ), {, word, |=, 0x1L, <<, shift, ;, }, if, (, shift, --, ==, 0, ), {]
[0, ), {, word, |=, 0x1L, <<, shift, ;, }, if, (, shift, --, ==, 0, ), {, encoding, []
[0, ), {, word, |=, 0x1L, <<, shift, ;, }, if, (, shift, --, ==, 0, ), {, encoding, []
[|=, 0x1L, <<, shift, ;, }, if, (, shift, --, ==, 0, ), {, encoding, [, eIndex, ++, ], =]
[<<, shift, ;, }, if, (, shift, --, ==, 0, ), {, encoding, [, eIndex, ++, ], =, word, ;]
[;, }, if, (, shift, --, ==, 0, ), {, encoding, [, eIndex, ++, ], =, word, ;, word, =]
[if, (, shift, --, ==, 0, ), {, encoding, [, eIndex, ++, ], =, word, ;, word, =, 0x0L, ;]
[shift, --, ==, 0, ), {, encoding, [, eIndex, ++, ], =, word, ;, word, =, 0x0L, ;, shift, =]
[;, shift, =, 62, ;, }, }, }, }, public, int, compareTo, (, final, OrderedTuple, ot, ), {, if, (]
[;, shift, =, 62, ;, }, }, }, }, public, int, compareTo, (, final, OrderedTuple, ot, ), {, if, (]
[;, shift, =, 62, ;, }, }, }, }, public, int, compareTo, (, final, OrderedTuple, ot, ), {, if, (]
[;, }, }, }, }, public, int, compareTo, (, final, OrderedTuple, ot, ), {, if, (, components, ., length, ==]
[;, }, }, }, }, public, int, compareTo, (, final, OrderedTuple, ot, ), {, if, (, components, ., length, ==]
[;, }, }, }, }, public, int, compareTo, (, final, OrderedTuple, ot, ), {, if, (, components, ., length, ==]
[final, OrderedTuple, ot, ), {, if, (, components, ., length, ==, ot, ., components, ., length, ), {, if, (]
[{, if, (, components, ., length, ==, ot, ., components, ., length, ), {, if, (, nan, ), {, return]
[if, (, components, ., length, ==, ot, ., components, ., length, ), {, if, (, nan, ), {, return, +]
[ot, ., components, ., length, ), {, if, (, nan, ), {, return, +, 1, ;, }, else, if, (]
[ot, ., components, ., length, ), {, if, (, nan, ), {, return, +, 1, ;, }, else, if, (]
[{, if, (, nan, ), {, return, +, 1, ;, }, else, if, (, ot, ., nan, ), {, return]
[if, (, nan, ), {, return, +, 1, ;, }, else, if, (, ot, ., nan, ), {, return, -]
[+, 1, ;, }, else, if, (, ot, ., nan, ), {, return, -, 1, ;, }, else, if, (]
[+, 1, ;, }, else, if, (, ot, ., nan, ), {, return, -, 1, ;, }, else, if, (]
[;, }, else, if, (, ot, ., nan, ), {, return, -, 1, ;, }, else, if, (, negInf, ||]
[;, }, else, if, (, ot, ., nan, ), {, return, -, 1, ;, }, else, if, (, negInf, ||]
[., nan, ), {, return, -, 1, ;, }, else, if, (, negInf, ||, ot, ., posInf, ), {, return]
[nan, ), {, return, -, 1, ;, }, else, if, (, negInf, ||, ot, ., posInf, ), {, return, -]
[;, }, else, if, (, negInf, ||, ot, ., posInf, ), {, return, -, 1, ;, }, else, if, (]
[;, }, else, if, (, negInf, ||, ot, ., posInf, ), {, return, -, 1, ;, }, else, if, (]
[else, if, (, negInf, ||, ot, ., posInf, ), {, return, -, 1, ;, }, else, if, (, posInf, ||]
[else, if, (, negInf, ||, ot, ., posInf, ), {, return, -, 1, ;, }, else, if, (, posInf, ||]
[., posInf, ), {, return, -, 1, ;, }, else, if, (, posInf, ||, ot, ., negInf, ), {, return]
[posInf, ), {, return, -, 1, ;, }, else, if, (, posInf, ||, ot, ., negInf, ), {, return, +]
[}, else, if, (, posInf, ||, ot, ., negInf, ), {, return, +, 1, ;, }, else, {, if, (]
[}, else, if, (, posInf, ||, ot, ., negInf, ), {, return, +, 1, ;, }, else, {, if, (]
[if, (, posInf, ||, ot, ., negInf, ), {, return, +, 1, ;, }, else, {, if, (, offset, <]
[if, (, posInf, ||, ot, ., negInf, ), {, return, +, 1, ;, }, else, {, if, (, offset, <]
[., negInf, ), {, return, +, 1, ;, }, else, {, if, (, offset, <, ot, ., offset, ), {]
[), {, return, +, 1, ;, }, else, {, if, (, offset, <, ot, ., offset, ), {, encode, (]
[), {, return, +, 1, ;, }, else, {, if, (, offset, <, ot, ., offset, ), {, encode, (]
[if, (, offset, <, ot, ., offset, ), {, encode, (, ot, ., offset, ), ;, }, else, if, (]
[if, (, offset, <, ot, ., offset, ), {, encode, (, ot, ., offset, ), ;, }, else, if, (]
[offset, <, ot, ., offset, ), {, encode, (, ot, ., offset, ), ;, }, else, if, (, offset, >]
[offset, <, ot, ., offset, ), {, encode, (, ot, ., offset, ), ;, }, else, if, (, offset, >]
[), {, encode, (, ot, ., offset, ), ;, }, else, if, (, offset, >, ot, ., offset, ), {]
[), {, encode, (, ot, ., offset, ), ;, }, else, if, (, offset, >, ot, ., offset, ), {]
[ot, ., offset, ), ;, }, else, if, (, offset, >, ot, ., offset, ), {, ot, ., encode, (]
[(, offset, >, ot, ., offset, ), {, ot, ., encode, (, offset, ), ;, }, final, int, limit, =]
[(, offset, >, ot, ., offset, ), {, ot, ., encode, (, offset, ), ;, }, final, int, limit, =]
[., offset, ), {, ot, ., encode, (, offset, ), ;, }, final, int, limit, =, FastMath, ., min, (]
[., offset, ), {, ot, ., encode, (, offset, ), ;, }, final, int, limit, =, FastMath, ., min, (]
[ot, ., encode, (, offset, ), ;, }, final, int, limit, =, FastMath, ., min, (, encoding, ., length, ,]
[ot, ., encode, (, offset, ), ;, }, final, int, limit, =, FastMath, ., min, (, encoding, ., length, ,]
[ot, ., encode, (, offset, ), ;, }, final, int, limit, =, FastMath, ., min, (, encoding, ., length, ,]
[FastMath, ., min, (, encoding, ., length, ,, ot, ., encoding, ., length, ), ;, for, (, int, i, =]
[min, (, encoding, ., length, ,, ot, ., encoding, ., length, ), ;, for, (, int, i, =, 0, ;]
[min, (, encoding, ., length, ,, ot, ., encoding, ., length, ), ;, for, (, int, i, =, 0, ;]
[encoding, ., length, ,, ot, ., encoding, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[length, ,, ot, ., encoding, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, limit, ;]
[,, ot, ., encoding, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, limit, ;, ++]
[length, ), ;, for, (, int, i, =, 0, ;, i, <, limit, ;, ++, i, ), {, if, (]
[length, ), ;, for, (, int, i, =, 0, ;, i, <, limit, ;, ++, i, ), {, if, (]
[length, ), ;, for, (, int, i, =, 0, ;, i, <, limit, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, limit, ;, ++, i, ), {, if, (, encoding, []
[int, i, =, 0, ;, i, <, limit, ;, ++, i, ), {, if, (, encoding, [, i, ], <]
[int, i, =, 0, ;, i, <, limit, ;, ++, i, ), {, if, (, encoding, [, i, ], <]
[int, i, =, 0, ;, i, <, limit, ;, ++, i, ), {, if, (, encoding, [, i, ], <]
[;, i, <, limit, ;, ++, i, ), {, if, (, encoding, [, i, ], <, ot, ., encoding, []
[++, i, ), {, if, (, encoding, [, i, ], <, ot, ., encoding, [, i, ], ), {, return]
[i, ), {, if, (, encoding, [, i, ], <, ot, ., encoding, [, i, ], ), {, return, -]
[[, i, ], <, ot, ., encoding, [, i, ], ), {, return, -, 1, ;, }, else, if, (]
[[, i, ], <, ot, ., encoding, [, i, ], ), {, return, -, 1, ;, }, else, if, (]
[[, i, ], <, ot, ., encoding, [, i, ], ), {, return, -, 1, ;, }, else, if, (]
[], <, ot, ., encoding, [, i, ], ), {, return, -, 1, ;, }, else, if, (, encoding, []
[., encoding, [, i, ], ), {, return, -, 1, ;, }, else, if, (, encoding, [, i, ], >]
[., encoding, [, i, ], ), {, return, -, 1, ;, }, else, if, (, encoding, [, i, ], >]
[., encoding, [, i, ], ), {, return, -, 1, ;, }, else, if, (, encoding, [, i, ], >]
[], ), {, return, -, 1, ;, }, else, if, (, encoding, [, i, ], >, ot, ., encoding, []
[1, ;, }, else, if, (, encoding, [, i, ], >, ot, ., encoding, [, i, ], ), {, return]
[;, }, else, if, (, encoding, [, i, ], >, ot, ., encoding, [, i, ], ), {, return, +]
[[, i, ], >, ot, ., encoding, [, i, ], ), {, return, +, 1, ;, }, }, if, (]
[[, i, ], >, ot, ., encoding, [, i, ], ), {, return, +, 1, ;, }, }, if, (]
[[, i, ], >, ot, ., encoding, [, i, ], ), {, return, +, 1, ;, }, }, if, (]
[ot, ., encoding, [, i, ], ), {, return, +, 1, ;, }, }, if, (, encoding, ., length, <]
[ot, ., encoding, [, i, ], ), {, return, +, 1, ;, }, }, if, (, encoding, ., length, <]
[ot, ., encoding, [, i, ], ), {, return, +, 1, ;, }, }, if, (, encoding, ., length, <]
[return, +, 1, ;, }, }, if, (, encoding, ., length, <, ot, ., encoding, ., length, ), {, return]
[+, 1, ;, }, }, if, (, encoding, ., length, <, ot, ., encoding, ., length, ), {, return, -]
[(, encoding, ., length, <, ot, ., encoding, ., length, ), {, return, -, 1, ;, }, else, if, (]
[(, encoding, ., length, <, ot, ., encoding, ., length, ), {, return, -, 1, ;, }, else, if, (]
[(, encoding, ., length, <, ot, ., encoding, ., length, ), {, return, -, 1, ;, }, else, if, (]
[<, ot, ., encoding, ., length, ), {, return, -, 1, ;, }, else, if, (, encoding, ., length, >]
[<, ot, ., encoding, ., length, ), {, return, -, 1, ;, }, else, if, (, encoding, ., length, >]
[<, ot, ., encoding, ., length, ), {, return, -, 1, ;, }, else, if, (, encoding, ., length, >]
[return, -, 1, ;, }, else, if, (, encoding, ., length, >, ot, ., encoding, ., length, ), {, return]
[-, 1, ;, }, else, if, (, encoding, ., length, >, ot, ., encoding, ., length, ), {, return, +]
[(, encoding, ., length, >, ot, ., encoding, ., length, ), {, return, +, 1, ;, }, else, {, return]
[., encoding, ., length, ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, }, return]
[., encoding, ., length, ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, }, return]
[., encoding, ., length, ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, }, return]
[), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, }, return, components, ., length, -]
[), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, }, return, components, ., length, -]
[), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, }, return, components, ., length, -]
[ot, ., components, ., length, ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (]
[ot, ., components, ., length, ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (]
[components, ., length, ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, this, ==]
[}, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, this, ==, other, ), {, return]
[(, final, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, else, if, (]
[(, final, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, else, if, (]
[if, (, this, ==, other, ), {, return, true, ;, }, else, if, (, other, instanceof, OrderedTuple, ), {, return]
[if, (, this, ==, other, ), {, return, true, ;, }, else, if, (, other, instanceof, OrderedTuple, ), {, return]
[this, ==, other, ), {, return, true, ;, }, else, if, (, other, instanceof, OrderedTuple, ), {, return, compareTo, (]
[), {, return, true, ;, }, else, if, (, other, instanceof, OrderedTuple, ), {, return, compareTo, (, (, OrderedTuple, )]
[true, ;, }, else, if, (, other, instanceof, OrderedTuple, ), {, return, compareTo, (, (, OrderedTuple, ), other, ), ==]
[other, instanceof, OrderedTuple, ), {, return, compareTo, (, (, OrderedTuple, ), other, ), ==, 0, ;, }, else, {, return]
[}, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, multiplier, =]
[}, }, @, Override, public, int, hashCode, (, ), {, final, int, multiplier, =, 37, ;, final, int, trueHash, =]
[hashCode, (, ), {, final, int, multiplier, =, 37, ;, final, int, trueHash, =, 97, ;, final, int, falseHash, =]
[int, multiplier, =, 37, ;, final, int, trueHash, =, 97, ;, final, int, falseHash, =, 71, ;, int, hash, =]
[int, multiplier, =, 37, ;, final, int, trueHash, =, 97, ;, final, int, falseHash, =, 71, ;, int, hash, =]
[;, final, int, trueHash, =, 97, ;, final, int, falseHash, =, 71, ;, int, hash, =, Arrays, ., hashCode, (]
[trueHash, =, 97, ;, final, int, falseHash, =, 71, ;, int, hash, =, Arrays, ., hashCode, (, components, ), ;]
[97, ;, final, int, falseHash, =, 71, ;, int, hash, =, Arrays, ., hashCode, (, components, ), ;, hash, =]
[97, ;, final, int, falseHash, =, 71, ;, int, hash, =, Arrays, ., hashCode, (, components, ), ;, hash, =]
[97, ;, final, int, falseHash, =, 71, ;, int, hash, =, Arrays, ., hashCode, (, components, ), ;, hash, =]
[final, int, falseHash, =, 71, ;, int, hash, =, Arrays, ., hashCode, (, components, ), ;, hash, =, hash, *]
[falseHash, =, 71, ;, int, hash, =, Arrays, ., hashCode, (, components, ), ;, hash, =, hash, *, multiplier, +]
[71, ;, int, hash, =, Arrays, ., hashCode, (, components, ), ;, hash, =, hash, *, multiplier, +, offset, ;]
[int, hash, =, Arrays, ., hashCode, (, components, ), ;, hash, =, hash, *, multiplier, +, offset, ;, hash, =]
[int, hash, =, Arrays, ., hashCode, (, components, ), ;, hash, =, hash, *, multiplier, +, offset, ;, hash, =]
[int, hash, =, Arrays, ., hashCode, (, components, ), ;, hash, =, hash, *, multiplier, +, offset, ;, hash, =]
[=, Arrays, ., hashCode, (, components, ), ;, hash, =, hash, *, multiplier, +, offset, ;, hash, =, hash, *]
[., hashCode, (, components, ), ;, hash, =, hash, *, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +]
[(, components, ), ;, hash, =, hash, *, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;]
[), ;, hash, =, hash, *, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =]
[), ;, hash, =, hash, *, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =]
[), ;, hash, =, hash, *, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =]
[hash, =, hash, *, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =, hash, *]
[hash, *, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +]
[*, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (]
[*, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (]
[+, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?]
[;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :]
[hash, *, multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;]
[multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =]
[multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =]
[multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =]
[lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *]
[hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +]
[=, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (]
[=, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (]
[*, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, negInf, ?]
[+, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :]
[?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;]
[:, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =]
[:, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =]
[:, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =]
[), ;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *]
[hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +]
[=, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (]
[=, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (]
[*, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, nan, ?]
[+, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, nan, ?, trueHash, :]
[trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, nan, ?, trueHash, :, falseHash, ), ;, return]
[nan, ?, trueHash, :, falseHash, ), ;, return, hash, ;, }, public, double, [, ], getComponents, (, ), {, return]
[nan, ?, trueHash, :, falseHash, ), ;, return, hash, ;, }, public, double, [, ], getComponents, (, ), {, return]
[{, return, components, ., clone, (, ), ;, }, private, static, long, sign, (, final, long, bits, ), {, return]
[{, return, components, ., clone, (, ), ;, }, private, static, long, sign, (, final, long, bits, ), {, return]
[components, ., clone, (, ), ;, }, private, static, long, sign, (, final, long, bits, ), {, return, bits, &]
[bits, ), {, return, bits, &, SIGN_MASK, ;, }, private, static, int, exponent, (, final, long, bits, ), {, return]
[bits, ), {, return, bits, &, SIGN_MASK, ;, }, private, static, int, exponent, (, final, long, bits, ), {, return]
[), {, return, bits, &, SIGN_MASK, ;, }, private, static, int, exponent, (, final, long, bits, ), {, return, (]
[bits, &, SIGN_MASK, ;, }, private, static, int, exponent, (, final, long, bits, ), {, return, (, (, int, )]
[&, SIGN_MASK, ;, }, private, static, int, exponent, (, final, long, bits, ), {, return, (, (, int, ), (]
[&, SIGN_MASK, ;, }, private, static, int, exponent, (, final, long, bits, ), {, return, (, (, int, ), (]
[SIGN_MASK, ;, }, private, static, int, exponent, (, final, long, bits, ), {, return, (, (, int, ), (, (]
[SIGN_MASK, ;, }, private, static, int, exponent, (, final, long, bits, ), {, return, (, (, int, ), (, (]
[}, private, static, int, exponent, (, final, long, bits, ), {, return, (, (, int, ), (, (, bits, &]
[exponent, (, final, long, bits, ), {, return, (, (, int, ), (, (, bits, &, EXPONENT_MASK, ), >, >]
[bits, ), {, return, (, (, int, ), (, (, bits, &, EXPONENT_MASK, ), >, >, 52, ), ), -]
[>, >, 52, ), ), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {, return]
[>, >, 52, ), ), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {, return]
[>, 52, ), ), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {, return, (]
[>, 52, ), ), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {, return, (]
[52, ), ), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {, return, (, (]
[52, ), ), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {, return, (, (]
[), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {, return, (, (, bits, &]
[;, }, private, static, long, mantissa, (, final, long, bits, ), {, return, (, (, bits, &, EXPONENT_MASK, ), ==]
[static, long, mantissa, (, final, long, bits, ), {, return, (, (, bits, &, EXPONENT_MASK, ), ==, 0, ), ?]
[long, mantissa, (, final, long, bits, ), {, return, (, (, bits, &, EXPONENT_MASK, ), ==, 0, ), ?, (]
[long, mantissa, (, final, long, bits, ), {, return, (, (, bits, &, EXPONENT_MASK, ), ==, 0, ), ?, (]
[mantissa, (, final, long, bits, ), {, return, (, (, bits, &, EXPONENT_MASK, ), ==, 0, ), ?, (, (]
[mantissa, (, final, long, bits, ), {, return, (, (, bits, &, EXPONENT_MASK, ), ==, 0, ), ?, (, (]
[final, long, bits, ), {, return, (, (, bits, &, EXPONENT_MASK, ), ==, 0, ), ?, (, (, bits, &]
[), {, return, (, (, bits, &, EXPONENT_MASK, ), ==, 0, ), ?, (, (, bits, &, MANTISSA_MASK, ), <<]
[(, (, bits, &, EXPONENT_MASK, ), ==, 0, ), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :]
[(, bits, &, EXPONENT_MASK, ), ==, 0, ), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (]
[(, bits, &, EXPONENT_MASK, ), ==, 0, ), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (]
[&, EXPONENT_MASK, ), ==, 0, ), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (, IMPLICIT_ONE, |]
[EXPONENT_MASK, ), ==, 0, ), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (, IMPLICIT_ONE, |, (]
[EXPONENT_MASK, ), ==, 0, ), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (, IMPLICIT_ONE, |, (]
[==, 0, ), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (, IMPLICIT_ONE, |, (, bits, &]
[bits, &, MANTISSA_MASK, ), ), ;, }, private, static, int, computeMSB, (, final, long, l, ), {, long, ll, =]
[;, }, private, static, int, computeMSB, (, final, long, l, ), {, long, ll, =, l, ;, long, mask, =]
[computeMSB, (, final, long, l, ), {, long, ll, =, l, ;, long, mask, =, 0xffffffffL, ;, int, scale, =]
[), {, long, ll, =, l, ;, long, mask, =, 0xffffffffL, ;, int, scale, =, 32, ;, int, msb, =]
[=, l, ;, long, mask, =, 0xffffffffL, ;, int, scale, =, 32, ;, int, msb, =, 0, ;, while, (]
[=, l, ;, long, mask, =, 0xffffffffL, ;, int, scale, =, 32, ;, int, msb, =, 0, ;, while, (]
[;, long, mask, =, 0xffffffffL, ;, int, scale, =, 32, ;, int, msb, =, 0, ;, while, (, scale, !=]
[;, int, scale, =, 32, ;, int, msb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (]
[;, int, scale, =, 32, ;, int, msb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (]
[int, scale, =, 32, ;, int, msb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (, (]
[int, scale, =, 32, ;, int, msb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (, (]
[=, 32, ;, int, msb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (, (, ll, &]
[int, msb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (, (, ll, &, mask, ), !=]
[0, ;, while, (, scale, !=, 0, ), {, if, (, (, ll, &, mask, ), !=, ll, ), {]
[while, (, scale, !=, 0, ), {, if, (, (, ll, &, mask, ), !=, ll, ), {, msb, |=]
[scale, !=, 0, ), {, if, (, (, ll, &, mask, ), !=, ll, ), {, msb, |=, scale, ;]
[0, ), {, if, (, (, ll, &, mask, ), !=, ll, ), {, msb, |=, scale, ;, ll, =]
[0, ), {, if, (, (, ll, &, mask, ), !=, ll, ), {, msb, |=, scale, ;, ll, =]
[if, (, (, ll, &, mask, ), !=, ll, ), {, msb, |=, scale, ;, ll, =, ll, >, >]
[ll, &, mask, ), !=, ll, ), {, msb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }]
[mask, ), !=, ll, ), {, msb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =]
[mask, ), !=, ll, ), {, msb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =]
[ll, ), {, msb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >]
[{, msb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;]
[|=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =]
[|=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =]
[ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >, >]
[>, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >, >, scale, ;, }, return]
[scale, ;, }, return, msb, ;, }, private, static, int, computeLSB, (, final, long, l, ), {, long, ll, =]
[;, }, private, static, int, computeLSB, (, final, long, l, ), {, long, ll, =, l, ;, long, mask, =]
[computeLSB, (, final, long, l, ), {, long, ll, =, l, ;, long, mask, =, 0xffffffff00000000L, ;, int, scale, =]
[), {, long, ll, =, l, ;, long, mask, =, 0xffffffff00000000L, ;, int, scale, =, 32, ;, int, lsb, =]
[=, l, ;, long, mask, =, 0xffffffff00000000L, ;, int, scale, =, 32, ;, int, lsb, =, 0, ;, while, (]
[=, l, ;, long, mask, =, 0xffffffff00000000L, ;, int, scale, =, 32, ;, int, lsb, =, 0, ;, while, (]
[;, long, mask, =, 0xffffffff00000000L, ;, int, scale, =, 32, ;, int, lsb, =, 0, ;, while, (, scale, !=]
[;, int, scale, =, 32, ;, int, lsb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (]
[;, int, scale, =, 32, ;, int, lsb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (]
[int, scale, =, 32, ;, int, lsb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (, (]
[int, scale, =, 32, ;, int, lsb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (, (]
[=, 32, ;, int, lsb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (, (, ll, &]
[int, lsb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (, (, ll, &, mask, ), ==]
[0, ;, while, (, scale, !=, 0, ), {, if, (, (, ll, &, mask, ), ==, ll, ), {]
[while, (, scale, !=, 0, ), {, if, (, (, ll, &, mask, ), ==, ll, ), {, lsb, |=]
[scale, !=, 0, ), {, if, (, (, ll, &, mask, ), ==, ll, ), {, lsb, |=, scale, ;]
[0, ), {, if, (, (, ll, &, mask, ), ==, ll, ), {, lsb, |=, scale, ;, ll, =]
[0, ), {, if, (, (, ll, &, mask, ), ==, ll, ), {, lsb, |=, scale, ;, ll, =]
[if, (, (, ll, &, mask, ), ==, ll, ), {, lsb, |=, scale, ;, ll, =, ll, >, >]
[ll, &, mask, ), ==, ll, ), {, lsb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }]
[mask, ), ==, ll, ), {, lsb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =]
[mask, ), ==, ll, ), {, lsb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =]
[ll, ), {, lsb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >]
[{, lsb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;]
[|=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =]
[|=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =]
[ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >, >]
[>, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >, >, scale, ;, }, return]
[lsb, ;, }, private, int, getBit, (, final, int, i, ,, final, int, k, ), {, final, long, bits, =]
[lsb, ;, }, private, int, getBit, (, final, int, i, ,, final, int, k, ), {, final, long, bits, =]
[int, getBit, (, final, int, i, ,, final, int, k, ), {, final, long, bits, =, Double, ., doubleToLongBits, (]
[int, getBit, (, final, int, i, ,, final, int, k, ), {, final, long, bits, =, Double, ., doubleToLongBits, (]
[(, final, int, i, ,, final, int, k, ), {, final, long, bits, =, Double, ., doubleToLongBits, (, components, []
[), {, final, long, bits, =, Double, ., doubleToLongBits, (, components, [, i, ], ), ;, final, int, e, =]
[final, long, bits, =, Double, ., doubleToLongBits, (, components, [, i, ], ), ;, final, int, e, =, exponent, (]
[., doubleToLongBits, (, components, [, i, ], ), ;, final, int, e, =, exponent, (, bits, ), ;, if, (]
[., doubleToLongBits, (, components, [, i, ], ), ;, final, int, e, =, exponent, (, bits, ), ;, if, (]
[doubleToLongBits, (, components, [, i, ], ), ;, final, int, e, =, exponent, (, bits, ), ;, if, (, (]
[doubleToLongBits, (, components, [, i, ], ), ;, final, int, e, =, exponent, (, bits, ), ;, if, (, (]
[components, [, i, ], ), ;, final, int, e, =, exponent, (, bits, ), ;, if, (, (, k, <]
[], ), ;, final, int, e, =, exponent, (, bits, ), ;, if, (, (, k, <, e, ), ||]
[), ;, final, int, e, =, exponent, (, bits, ), ;, if, (, (, k, <, e, ), ||, (]
[), ;, final, int, e, =, exponent, (, bits, ), ;, if, (, (, k, <, e, ), ||, (]
[final, int, e, =, exponent, (, bits, ), ;, if, (, (, k, <, e, ), ||, (, k, >]
[(, bits, ), ;, if, (, (, k, <, e, ), ||, (, k, >, offset, ), ), {, return]
[(, k, <, e, ), ||, (, k, >, offset, ), ), {, return, 0, ;, }, else, if, (]
[(, k, <, e, ), ||, (, k, >, offset, ), ), {, return, 0, ;, }, else, if, (]
[<, e, ), ||, (, k, >, offset, ), ), {, return, 0, ;, }, else, if, (, k, ==]
[(, k, >, offset, ), ), {, return, 0, ;, }, else, if, (, k, ==, offset, ), {, return]
[(, k, >, offset, ), ), {, return, 0, ;, }, else, if, (, k, ==, offset, ), {, return]
[k, >, offset, ), ), {, return, 0, ;, }, else, if, (, k, ==, offset, ), {, return, (]
[k, >, offset, ), ), {, return, 0, ;, }, else, if, (, k, ==, offset, ), {, return, (]
[offset, ), ), {, return, 0, ;, }, else, if, (, k, ==, offset, ), {, return, (, sign, (]
[{, return, 0, ;, }, else, if, (, k, ==, offset, ), {, return, (, sign, (, bits, ), ==]
[;, }, else, if, (, k, ==, offset, ), {, return, (, sign, (, bits, ), ==, 0L, ), ?]
[else, if, (, k, ==, offset, ), {, return, (, sign, (, bits, ), ==, 0L, ), ?, 1, :]
[), {, return, (, sign, (, bits, ), ==, 0L, ), ?, 1, :, 0, ;, }, else, if, (]
[), {, return, (, sign, (, bits, ), ==, 0L, ), ?, 1, :, 0, ;, }, else, if, (]
[return, (, sign, (, bits, ), ==, 0L, ), ?, 1, :, 0, ;, }, else, if, (, k, >]
[(, sign, (, bits, ), ==, 0L, ), ?, 1, :, 0, ;, }, else, if, (, k, >, (]
[(, sign, (, bits, ), ==, 0L, ), ?, 1, :, 0, ;, }, else, if, (, k, >, (]
[(, bits, ), ==, 0L, ), ?, 1, :, 0, ;, }, else, if, (, k, >, (, e, +]
[), ?, 1, :, 0, ;, }, else, if, (, k, >, (, e, +, 52, ), ), {, return]
[), ?, 1, :, 0, ;, }, else, if, (, k, >, (, e, +, 52, ), ), {, return]
[?, 1, :, 0, ;, }, else, if, (, k, >, (, e, +, 52, ), ), {, return, (]
[?, 1, :, 0, ;, }, else, if, (, k, >, (, e, +, 52, ), ), {, return, (]
[:, 0, ;, }, else, if, (, k, >, (, e, +, 52, ), ), {, return, (, sign, (]
[}, else, if, (, k, >, (, e, +, 52, ), ), {, return, (, sign, (, bits, ), ==]
[(, k, >, (, e, +, 52, ), ), {, return, (, sign, (, bits, ), ==, 0L, ), ?]
[>, (, e, +, 52, ), ), {, return, (, sign, (, bits, ), ==, 0L, ), ?, 0, :]
[(, sign, (, bits, ), ==, 0L, ), ?, 0, :, 1, ;, }, else, {, final, long, m, =]
[(, sign, (, bits, ), ==, 0L, ), ?, 0, :, 1, ;, }, else, {, final, long, m, =]
[sign, (, bits, ), ==, 0L, ), ?, 0, :, 1, ;, }, else, {, final, long, m, =, (]
[sign, (, bits, ), ==, 0L, ), ?, 0, :, 1, ;, }, else, {, final, long, m, =, (]
[bits, ), ==, 0L, ), ?, 0, :, 1, ;, }, else, {, final, long, m, =, (, sign, (]
[0L, ), ?, 0, :, 1, ;, }, else, {, final, long, m, =, (, sign, (, bits, ), ==]
[0, :, 1, ;, }, else, {, final, long, m, =, (, sign, (, bits, ), ==, 0L, ), ?]
[1, ;, }, else, {, final, long, m, =, (, sign, (, bits, ), ==, 0L, ), ?, mantissa, (]
[else, {, final, long, m, =, (, sign, (, bits, ), ==, 0L, ), ?, mantissa, (, bits, ), :]
[{, final, long, m, =, (, sign, (, bits, ), ==, 0L, ), ?, mantissa, (, bits, ), :, -]
[long, m, =, (, sign, (, bits, ), ==, 0L, ), ?, mantissa, (, bits, ), :, -, mantissa, (]
[sign, (, bits, ), ==, 0L, ), ?, mantissa, (, bits, ), :, -, mantissa, (, bits, ), ;, return]
[), ==, 0L, ), ?, mantissa, (, bits, ), :, -, mantissa, (, bits, ), ;, return, (, int, )]
[==, 0L, ), ?, mantissa, (, bits, ), :, -, mantissa, (, bits, ), ;, return, (, int, ), (]
[==, 0L, ), ?, mantissa, (, bits, ), :, -, mantissa, (, bits, ), ;, return, (, int, ), (]
[0L, ), ?, mantissa, (, bits, ), :, -, mantissa, (, bits, ), ;, return, (, int, ), (, (]
[0L, ), ?, mantissa, (, bits, ), :, -, mantissa, (, bits, ), ;, return, (, int, ), (, (]
[mantissa, (, bits, ), :, -, mantissa, (, bits, ), ;, return, (, int, ), (, (, m, >, >]
[(, bits, ), :, -, mantissa, (, bits, ), ;, return, (, int, ), (, (, m, >, >, (]
[(, bits, ), :, -, mantissa, (, bits, ), ;, return, (, int, ), (, (, m, >, >, (]
[), :, -, mantissa, (, bits, ), ;, return, (, int, ), (, (, m, >, >, (, k, -]
[(, bits, ), ;, return, (, int, ), (, (, m, >, >, (, k, -, e, ), ), &]
