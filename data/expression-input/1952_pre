[., Map, ;, class, TypeInference, extends, DataFlowAnalysis, ., BranchedForwardDataFlowAnalysis, <, Node, ,, FlowScope, >, {, static, final, DiagnosticType, FUNCTION_LITERAL_UNDEFINED_THIS, =]
[., Map, ;, class, TypeInference, extends, DataFlowAnalysis, ., BranchedForwardDataFlowAnalysis, <, Node, ,, FlowScope, >, {, static, final, DiagnosticType, FUNCTION_LITERAL_UNDEFINED_THIS, =]
[TypeInference, extends, DataFlowAnalysis, ., BranchedForwardDataFlowAnalysis, <, Node, ,, FlowScope, >, {, static, final, DiagnosticType, FUNCTION_LITERAL_UNDEFINED_THIS, =, DiagnosticType, ., warning, (]
[DataFlowAnalysis, ., BranchedForwardDataFlowAnalysis, <, Node, ,, FlowScope, >, {, static, final, DiagnosticType, FUNCTION_LITERAL_UNDEFINED_THIS, =, DiagnosticType, ., warning, (, "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", ,]
[>, cfg, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, Scope, functionScope, ,, Map, <, String, ,, AssertionFunctionSpec, >, assertionFunctionsMap, ), {, super, (]
[,, ReverseAbstractInterpreter, reverseInterpreter, ,, Scope, functionScope, ,, Map, <, String, ,, AssertionFunctionSpec, >, assertionFunctionsMap, ), {, super, (, cfg, ,]
[<, String, ,, AssertionFunctionSpec, >, assertionFunctionsMap, ), {, super, (, cfg, ,, new, LinkedFlowScope, ., FlowScopeJoinOp, (, ), ), ;]
[<, String, ,, AssertionFunctionSpec, >, assertionFunctionsMap, ), {, super, (, cfg, ,, new, LinkedFlowScope, ., FlowScopeJoinOp, (, ), ), ;]
[>, assertionFunctionsMap, ), {, super, (, cfg, ,, new, LinkedFlowScope, ., FlowScopeJoinOp, (, ), ), ;, this, ., compiler, =]
[), {, super, (, cfg, ,, new, LinkedFlowScope, ., FlowScopeJoinOp, (, ), ), ;, this, ., compiler, =, compiler, ;]
[), {, super, (, cfg, ,, new, LinkedFlowScope, ., FlowScopeJoinOp, (, ), ), ;, this, ., compiler, =, compiler, ;]
[cfg, ,, new, LinkedFlowScope, ., FlowScopeJoinOp, (, ), ), ;, this, ., compiler, =, compiler, ;, this, ., registry, =]
[cfg, ,, new, LinkedFlowScope, ., FlowScopeJoinOp, (, ), ), ;, this, ., compiler, =, compiler, ;, this, ., registry, =]
[(, ), ), ;, this, ., compiler, =, compiler, ;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;]
[(, ), ), ;, this, ., compiler, =, compiler, ;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;]
[this, ., compiler, =, compiler, ;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., reverseInterpreter, =]
[compiler, =, compiler, ;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;]
[compiler, =, compiler, ;, this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;]
[this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., unknownType, =]
[this, ., registry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., unknownType, =]
[compiler, ., getTypeRegistry, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., unknownType, =, registry, ., getNativeObjectType, (]
[(, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., unknownType, =, registry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;]
[(, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., unknownType, =, registry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;]
[., reverseInterpreter, =, reverseInterpreter, ;, this, ., unknownType, =, registry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, ., syntacticScope, =]
[=, reverseInterpreter, ;, this, ., unknownType, =, registry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, ., syntacticScope, =, functionScope, ;]
[;, this, ., unknownType, =, registry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, ., syntacticScope, =, functionScope, ;, inferArguments, (]
[unknownType, =, registry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, ., syntacticScope, =, functionScope, ;, inferArguments, (, functionScope, ), ;]
[unknownType, =, registry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, ., syntacticScope, =, functionScope, ;, inferArguments, (, functionScope, ), ;]
[getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, ., syntacticScope, =, functionScope, ;, inferArguments, (, functionScope, ), ;, this, ., functionScope, =]
[getNativeObjectType, (, UNKNOWN_TYPE, ), ;, this, ., syntacticScope, =, functionScope, ;, inferArguments, (, functionScope, ), ;, this, ., functionScope, =]
[;, this, ., syntacticScope, =, functionScope, ;, inferArguments, (, functionScope, ), ;, this, ., functionScope, =, LinkedFlowScope, ., createEntryLattice, (]
[syntacticScope, =, functionScope, ;, inferArguments, (, functionScope, ), ;, this, ., functionScope, =, LinkedFlowScope, ., createEntryLattice, (, functionScope, ), ;]
[syntacticScope, =, functionScope, ;, inferArguments, (, functionScope, ), ;, this, ., functionScope, =, LinkedFlowScope, ., createEntryLattice, (, functionScope, ), ;]
[inferArguments, (, functionScope, ), ;, this, ., functionScope, =, LinkedFlowScope, ., createEntryLattice, (, functionScope, ), ;, this, ., assertionFunctionsMap, =]
[=, LinkedFlowScope, ., createEntryLattice, (, functionScope, ), ;, this, ., assertionFunctionsMap, =, assertionFunctionsMap, ;, Iterator, <, Var, >, varIt, =]
[=, LinkedFlowScope, ., createEntryLattice, (, functionScope, ), ;, this, ., assertionFunctionsMap, =, assertionFunctionsMap, ;, Iterator, <, Var, >, varIt, =]
[this, ., assertionFunctionsMap, =, assertionFunctionsMap, ;, Iterator, <, Var, >, varIt, =, functionScope, ., getDeclarativelyUnboundVarsWithoutTypes, (, ), ;, while, (]
[this, ., assertionFunctionsMap, =, assertionFunctionsMap, ;, Iterator, <, Var, >, varIt, =, functionScope, ., getDeclarativelyUnboundVarsWithoutTypes, (, ), ;, while, (]
[varIt, =, functionScope, ., getDeclarativelyUnboundVarsWithoutTypes, (, ), ;, while, (, varIt, ., hasNext, (, ), ), {, Var, var, =]
[varIt, =, functionScope, ., getDeclarativelyUnboundVarsWithoutTypes, (, ), ;, while, (, varIt, ., hasNext, (, ), ), {, Var, var, =]
[while, (, varIt, ., hasNext, (, ), ), {, Var, var, =, varIt, ., next, (, ), ;, if, (]
[varIt, ., hasNext, (, ), ), {, Var, var, =, varIt, ., next, (, ), ;, if, (, isUnflowable, (]
[Var, var, =, varIt, ., next, (, ), ;, if, (, isUnflowable, (, var, ), ), {, continue, ;, }]
[Var, var, =, varIt, ., next, (, ), ;, if, (, isUnflowable, (, var, ), ), {, continue, ;, }]
[Var, var, =, varIt, ., next, (, ), ;, if, (, isUnflowable, (, var, ), ), {, continue, ;, }]
[(, ), ;, if, (, isUnflowable, (, var, ), ), {, continue, ;, }, this, ., functionScope, ., inferSlotType, (]
[(, ), ;, if, (, isUnflowable, (, var, ), ), {, continue, ;, }, this, ., functionScope, ., inferSlotType, (]
[(, var, ), ), {, continue, ;, }, this, ., functionScope, ., inferSlotType, (, var, ., getName, (, ), ,]
[), ), {, continue, ;, }, this, ., functionScope, ., inferSlotType, (, var, ., getName, (, ), ,, getNativeType, (]
[}, this, ., functionScope, ., inferSlotType, (, var, ., getName, (, ), ,, getNativeType, (, VOID_TYPE, ), ), ;, }]
[}, this, ., functionScope, ., inferSlotType, (, var, ., getName, (, ), ,, getNativeType, (, VOID_TYPE, ), ), ;, }]
[., inferSlotType, (, var, ., getName, (, ), ,, getNativeType, (, VOID_TYPE, ), ), ;, }, this, ., bottomScope, =]
[., inferSlotType, (, var, ., getName, (, ), ,, getNativeType, (, VOID_TYPE, ), ), ;, }, this, ., bottomScope, =]
[., getName, (, ), ,, getNativeType, (, VOID_TYPE, ), ), ;, }, this, ., bottomScope, =, LinkedFlowScope, ., createEntryLattice, (]
[., getName, (, ), ,, getNativeType, (, VOID_TYPE, ), ), ;, }, this, ., bottomScope, =, LinkedFlowScope, ., createEntryLattice, (]
[,, getNativeType, (, VOID_TYPE, ), ), ;, }, this, ., bottomScope, =, LinkedFlowScope, ., createEntryLattice, (, Scope, ., createLatticeBottom, (]
[,, getNativeType, (, VOID_TYPE, ), ), ;, }, this, ., bottomScope, =, LinkedFlowScope, ., createEntryLattice, (, Scope, ., createLatticeBottom, (]
[functionScope, ., getRootNode, (, ), ), ), ;, }, private, void, inferArguments, (, Scope, functionScope, ), {, Node, functionNode, =]
[functionScope, ., getRootNode, (, ), ), ), ;, }, private, void, inferArguments, (, Scope, functionScope, ), {, Node, functionNode, =]
[private, void, inferArguments, (, Scope, functionScope, ), {, Node, functionNode, =, functionScope, ., getRootNode, (, ), ;, Node, astParameters, =]
[private, void, inferArguments, (, Scope, functionScope, ), {, Node, functionNode, =, functionScope, ., getRootNode, (, ), ;, Node, astParameters, =]
[private, void, inferArguments, (, Scope, functionScope, ), {, Node, functionNode, =, functionScope, ., getRootNode, (, ), ;, Node, astParameters, =]
[getRootNode, (, ), ;, Node, astParameters, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, iifeArgumentNode, =]
[Node, astParameters, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, iifeArgumentNode, =, null, ;, if, (]
[Node, astParameters, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, iifeArgumentNode, =, null, ;, if, (]
[., getFirstChild, (, ), ., getNext, (, ), ;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (]
[., getNext, (, ), ;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {]
[(, ), ;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =]
[(, ), ;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =]
[NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }, FunctionType, functionType, =]
[NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }, FunctionType, functionType, =]
[functionNode, ), ), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (]
[functionNode, ), ), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (]
[(, ), ;, }, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (]
[(, ), ;, }, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (]
[;, }, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, functionType, !=]
[., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, functionType, !=, null, ), {, Node, parameterTypes, =]
[., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, functionType, !=, null, ), {, Node, parameterTypes, =]
[), ;, if, (, functionType, !=, null, ), {, Node, parameterTypes, =, functionType, ., getParametersNode, (, ), ;, if, (]
[), ;, if, (, functionType, !=, null, ), {, Node, parameterTypes, =, functionType, ., getParametersNode, (, ), ;, if, (]
[if, (, functionType, !=, null, ), {, Node, parameterTypes, =, functionType, ., getParametersNode, (, ), ;, if, (, parameterTypes, !=]
[{, Node, parameterTypes, =, functionType, ., getParametersNode, (, ), ;, if, (, parameterTypes, !=, null, ), {, Node, parameterTypeNode, =]
[{, Node, parameterTypes, =, functionType, ., getParametersNode, (, ), ;, if, (, parameterTypes, !=, null, ), {, Node, parameterTypeNode, =]
[(, parameterTypes, !=, null, ), {, Node, parameterTypeNode, =, parameterTypes, ., getFirstChild, (, ), ;, for, (, Node, astParameter, :]
[(, parameterTypes, !=, null, ), {, Node, parameterTypeNode, =, parameterTypes, ., getFirstChild, (, ), ;, for, (, Node, astParameter, :]
[., getFirstChild, (, ), ;, for, (, Node, astParameter, :, astParameters, ., children, (, ), ), {, Var, var, =]
[., getFirstChild, (, ), ;, for, (, Node, astParameter, :, astParameters, ., children, (, ), ), {, Var, var, =]
[;, for, (, Node, astParameter, :, astParameters, ., children, (, ), ), {, Var, var, =, functionScope, ., getVar, (]
[;, for, (, Node, astParameter, :, astParameters, ., children, (, ), ), {, Var, var, =, functionScope, ., getVar, (]
[., children, (, ), ), {, Var, var, =, functionScope, ., getVar, (, astParameter, ., getString, (, ), ), ;]
[., children, (, ), ), {, Var, var, =, functionScope, ., getVar, (, astParameter, ., getString, (, ), ), ;]
[), {, Var, var, =, functionScope, ., getVar, (, astParameter, ., getString, (, ), ), ;, Preconditions, ., checkNotNull, (]
[functionScope, ., getVar, (, astParameter, ., getString, (, ), ), ;, Preconditions, ., checkNotNull, (, var, ), ;, if, (]
[functionScope, ., getVar, (, astParameter, ., getString, (, ), ), ;, Preconditions, ., checkNotNull, (, var, ), ;, if, (]
[functionScope, ., getVar, (, astParameter, ., getString, (, ), ), ;, Preconditions, ., checkNotNull, (, var, ), ;, if, (]
[getString, (, ), ), ;, Preconditions, ., checkNotNull, (, var, ), ;, if, (, var, ., isTypeInferred, (, ), &&]
[getString, (, ), ), ;, Preconditions, ., checkNotNull, (, var, ), ;, if, (, var, ., isTypeInferred, (, ), &&]
[getString, (, ), ), ;, Preconditions, ., checkNotNull, (, var, ), ;, if, (, var, ., isTypeInferred, (, ), &&]
[., checkNotNull, (, var, ), ;, if, (, var, ., isTypeInferred, (, ), &&, var, ., getType, (, ), ==]
[if, (, var, ., isTypeInferred, (, ), &&, var, ., getType, (, ), ==, unknownType, ), {, JSType, newType, =]
[isTypeInferred, (, ), &&, var, ., getType, (, ), ==, unknownType, ), {, JSType, newType, =, null, ;, if, (]
[isTypeInferred, (, ), &&, var, ., getType, (, ), ==, unknownType, ), {, JSType, newType, =, null, ;, if, (]
[), &&, var, ., getType, (, ), ==, unknownType, ), {, JSType, newType, =, null, ;, if, (, iifeArgumentNode, !=]
[., getType, (, ), ==, unknownType, ), {, JSType, newType, =, null, ;, if, (, iifeArgumentNode, !=, null, ), {]
[(, ), ==, unknownType, ), {, JSType, newType, =, null, ;, if, (, iifeArgumentNode, !=, null, ), {, newType, =]
[(, ), ==, unknownType, ), {, JSType, newType, =, null, ;, if, (, iifeArgumentNode, !=, null, ), {, newType, =]
[;, if, (, iifeArgumentNode, !=, null, ), {, newType, =, iifeArgumentNode, ., getJSType, (, ), ;, }, else, if, (]
[;, if, (, iifeArgumentNode, !=, null, ), {, newType, =, iifeArgumentNode, ., getJSType, (, ), ;, }, else, if, (]
[(, iifeArgumentNode, !=, null, ), {, newType, =, iifeArgumentNode, ., getJSType, (, ), ;, }, else, if, (, parameterTypeNode, !=]
[null, ), {, newType, =, iifeArgumentNode, ., getJSType, (, ), ;, }, else, if, (, parameterTypeNode, !=, null, ), {]
[{, newType, =, iifeArgumentNode, ., getJSType, (, ), ;, }, else, if, (, parameterTypeNode, !=, null, ), {, newType, =]
[{, newType, =, iifeArgumentNode, ., getJSType, (, ), ;, }, else, if, (, parameterTypeNode, !=, null, ), {, newType, =]
[}, else, if, (, parameterTypeNode, !=, null, ), {, newType, =, parameterTypeNode, ., getJSType, (, ), ;, }, if, (]
[}, else, if, (, parameterTypeNode, !=, null, ), {, newType, =, parameterTypeNode, ., getJSType, (, ), ;, }, if, (]
[if, (, parameterTypeNode, !=, null, ), {, newType, =, parameterTypeNode, ., getJSType, (, ), ;, }, if, (, newType, !=]
[!=, null, ), {, newType, =, parameterTypeNode, ., getJSType, (, ), ;, }, if, (, newType, !=, null, ), {]
[!=, null, ), {, newType, =, parameterTypeNode, ., getJSType, (, ), ;, }, if, (, newType, !=, null, ), {]
[newType, =, parameterTypeNode, ., getJSType, (, ), ;, }, if, (, newType, !=, null, ), {, var, ., setType, (]
[., getJSType, (, ), ;, }, if, (, newType, !=, null, ), {, var, ., setType, (, newType, ), ;]
[., getJSType, (, ), ;, }, if, (, newType, !=, null, ), {, var, ., setType, (, newType, ), ;]
[;, }, if, (, newType, !=, null, ), {, var, ., setType, (, newType, ), ;, astParameter, ., setJSType, (]
[), {, var, ., setType, (, newType, ), ;, astParameter, ., setJSType, (, newType, ), ;, }, }, if, (]
[), {, var, ., setType, (, newType, ), ;, astParameter, ., setJSType, (, newType, ), ;, }, }, if, (]
[var, ., setType, (, newType, ), ;, astParameter, ., setJSType, (, newType, ), ;, }, }, if, (, parameterTypeNode, !=]
[(, newType, ), ;, astParameter, ., setJSType, (, newType, ), ;, }, }, if, (, parameterTypeNode, !=, null, ), {]
[), ;, astParameter, ., setJSType, (, newType, ), ;, }, }, if, (, parameterTypeNode, !=, null, ), {, parameterTypeNode, =]
[), ;, astParameter, ., setJSType, (, newType, ), ;, }, }, if, (, parameterTypeNode, !=, null, ), {, parameterTypeNode, =]
[}, }, if, (, parameterTypeNode, !=, null, ), {, parameterTypeNode, =, parameterTypeNode, ., getNext, (, ), ;, }, if, (]
[}, }, if, (, parameterTypeNode, !=, null, ), {, parameterTypeNode, =, parameterTypeNode, ., getNext, (, ), ;, }, if, (]
[if, (, parameterTypeNode, !=, null, ), {, parameterTypeNode, =, parameterTypeNode, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=]
[!=, null, ), {, parameterTypeNode, =, parameterTypeNode, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {]
[), {, parameterTypeNode, =, parameterTypeNode, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =]
[), {, parameterTypeNode, =, parameterTypeNode, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =]
[=, iifeArgumentNode, ., getNext, (, ), ;, }, }, }, }, }, @, Override, FlowScope, createInitialEstimateLattice, (, ), {, return]
[}, @, Override, FlowScope, createInitialEstimateLattice, (, ), {, return, bottomScope, ;, }, @, Override, FlowScope, createEntryLattice, (, ), {, return]
[), {, return, functionScope, ;, }, @, Override, FlowScope, flowThrough, (, Node, n, ,, FlowScope, input, ), {, if, (]
[), {, return, functionScope, ;, }, @, Override, FlowScope, flowThrough, (, Node, n, ,, FlowScope, input, ), {, if, (]
[return, functionScope, ;, }, @, Override, FlowScope, flowThrough, (, Node, n, ,, FlowScope, input, ), {, if, (, input, ==]
[@, Override, FlowScope, flowThrough, (, Node, n, ,, FlowScope, input, ), {, if, (, input, ==, bottomScope, ), {, return]
[n, ,, FlowScope, input, ), {, if, (, input, ==, bottomScope, ), {, return, input, ;, }, FlowScope, output, =]
[n, ,, FlowScope, input, ), {, if, (, input, ==, bottomScope, ), {, return, input, ;, }, FlowScope, output, =]
[if, (, input, ==, bottomScope, ), {, return, input, ;, }, FlowScope, output, =, input, ., createChildFlowScope, (, ), ;]
[input, ==, bottomScope, ), {, return, input, ;, }, FlowScope, output, =, input, ., createChildFlowScope, (, ), ;, output, =]
[bottomScope, ), {, return, input, ;, }, FlowScope, output, =, input, ., createChildFlowScope, (, ), ;, output, =, traverse, (]
[{, return, input, ;, }, FlowScope, output, =, input, ., createChildFlowScope, (, ), ;, output, =, traverse, (, n, ,]
[}, FlowScope, output, =, input, ., createChildFlowScope, (, ), ;, output, =, traverse, (, n, ,, output, ), ;, return]
[., createChildFlowScope, (, ), ;, output, =, traverse, (, n, ,, output, ), ;, return, output, ;, }, @, Override]
[), ;, output, =, traverse, (, n, ,, output, ), ;, return, output, ;, }, @, Override, @, SuppressWarnings, (]
[;, output, =, traverse, (, n, ,, output, ), ;, return, output, ;, }, @, Override, @, SuppressWarnings, (, {]
[=, traverse, (, n, ,, output, ), ;, return, output, ;, }, @, Override, @, SuppressWarnings, (, {, "fallthrough", ,]
[,, "incomplete-switch", }, ), List, <, FlowScope, >, branchedFlowThrough, (, Node, source, ,, FlowScope, input, ), {, FlowScope, output, =]
[}, ), List, <, FlowScope, >, branchedFlowThrough, (, Node, source, ,, FlowScope, input, ), {, FlowScope, output, =, flowThrough, (]
[List, <, FlowScope, >, branchedFlowThrough, (, Node, source, ,, FlowScope, input, ), {, FlowScope, output, =, flowThrough, (, source, ,]
[Node, source, ,, FlowScope, input, ), {, FlowScope, output, =, flowThrough, (, source, ,, input, ), ;, Node, condition, =]
[), {, FlowScope, output, =, flowThrough, (, source, ,, input, ), ;, Node, condition, =, null, ;, FlowScope, conditionFlowScope, =]
[flowThrough, (, source, ,, input, ), ;, Node, condition, =, null, ;, FlowScope, conditionFlowScope, =, null, ;, BooleanOutcomePair, conditionOutcomes, =]
[conditionFlowScope, =, null, ;, BooleanOutcomePair, conditionOutcomes, =, null, ;, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, branchEdges, =]
[conditionFlowScope, =, null, ;, BooleanOutcomePair, conditionOutcomes, =, null, ;, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, branchEdges, =]
[=, null, ;, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, branchEdges, =, getCfg, (, ), ., getOutEdges, (]
[Branch, >, >, branchEdges, =, getCfg, (, ), ., getOutEdges, (, source, ), ;, List, <, FlowScope, >, result, =]
[Branch, >, >, branchEdges, =, getCfg, (, ), ., getOutEdges, (, source, ), ;, List, <, FlowScope, >, result, =]
[=, getCfg, (, ), ., getOutEdges, (, source, ), ;, List, <, FlowScope, >, result, =, Lists, ., newArrayListWithCapacity, (]
[=, getCfg, (, ), ., getOutEdges, (, source, ), ;, List, <, FlowScope, >, result, =, Lists, ., newArrayListWithCapacity, (]
[., newArrayListWithCapacity, (, branchEdges, ., size, (, ), ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, branchEdge, :]
[(, ), ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, branchEdge, :, branchEdges, ), {, Branch, branch, =]
[(, ), ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, branchEdge, :, branchEdges, ), {, Branch, branch, =]
[,, Branch, >, branchEdge, :, branchEdges, ), {, Branch, branch, =, branchEdge, ., getValue, (, ), ;, FlowScope, newScope, =]
[:, branchEdges, ), {, Branch, branch, =, branchEdge, ., getValue, (, ), ;, FlowScope, newScope, =, output, ;, switch, (]
[Branch, branch, =, branchEdge, ., getValue, (, ), ;, FlowScope, newScope, =, output, ;, switch, (, branch, ), {, case]
[., getValue, (, ), ;, FlowScope, newScope, =, output, ;, switch, (, branch, ), {, case, ON_TRUE, :, if, (]
[., getValue, (, ), ;, FlowScope, newScope, =, output, ;, switch, (, branch, ), {, case, ON_TRUE, :, if, (]
[;, FlowScope, newScope, =, output, ;, switch, (, branch, ), {, case, ON_TRUE, :, if, (, NodeUtil, ., isForIn, (]
[(, branch, ), {, case, ON_TRUE, :, if, (, NodeUtil, ., isForIn, (, source, ), ), {, Node, item, =]
[(, branch, ), {, case, ON_TRUE, :, if, (, NodeUtil, ., isForIn, (, source, ), ), {, Node, item, =]
[NodeUtil, ., isForIn, (, source, ), ), {, Node, item, =, source, ., getFirstChild, (, ), ;, Node, obj, =]
[NodeUtil, ., isForIn, (, source, ), ), {, Node, item, =, source, ., getFirstChild, (, ), ;, Node, obj, =]
[item, =, source, ., getFirstChild, (, ), ;, Node, obj, =, item, ., getNext, (, ), ;, FlowScope, informed, =]
[source, ., getFirstChild, (, ), ;, Node, obj, =, item, ., getNext, (, ), ;, FlowScope, informed, =, traverse, (]
[getFirstChild, (, ), ;, Node, obj, =, item, ., getNext, (, ), ;, FlowScope, informed, =, traverse, (, obj, ,]
[getFirstChild, (, ), ;, Node, obj, =, item, ., getNext, (, ), ;, FlowScope, informed, =, traverse, (, obj, ,]
[getNext, (, ), ;, FlowScope, informed, =, traverse, (, obj, ,, output, ., createChildFlowScope, (, ), ), ;, if, (]
[getNext, (, ), ;, FlowScope, informed, =, traverse, (, obj, ,, output, ., createChildFlowScope, (, ), ), ;, if, (]
[traverse, (, obj, ,, output, ., createChildFlowScope, (, ), ), ;, if, (, item, ., isVar, (, ), ), {]
[obj, ,, output, ., createChildFlowScope, (, ), ), ;, if, (, item, ., isVar, (, ), ), {, item, =]
[obj, ,, output, ., createChildFlowScope, (, ), ), ;, if, (, item, ., isVar, (, ), ), {, item, =]
[if, (, item, ., isVar, (, ), ), {, item, =, item, ., getFirstChild, (, ), ;, }, if, (]
[if, (, item, ., isVar, (, ), ), {, item, =, item, ., getFirstChild, (, ), ;, }, if, (]
[=, item, ., getFirstChild, (, ), ;, }, if, (, item, ., isName, (, ), ), {, JSType, iterKeyType, =]
[., getFirstChild, (, ), ;, }, if, (, item, ., isName, (, ), ), {, JSType, iterKeyType, =, getNativeType, (]
[if, (, item, ., isName, (, ), ), {, JSType, iterKeyType, =, getNativeType, (, STRING_TYPE, ), ;, ObjectType, objType, =]
[if, (, item, ., isName, (, ), ), {, JSType, iterKeyType, =, getNativeType, (, STRING_TYPE, ), ;, ObjectType, objType, =]
[item, ., isName, (, ), ), {, JSType, iterKeyType, =, getNativeType, (, STRING_TYPE, ), ;, ObjectType, objType, =, getJSType, (]
[getNativeType, (, STRING_TYPE, ), ;, ObjectType, objType, =, getJSType, (, obj, ), ., dereference, (, ), ;, JSType, objIndexType, =]
[getNativeType, (, STRING_TYPE, ), ;, ObjectType, objType, =, getJSType, (, obj, ), ., dereference, (, ), ;, JSType, objIndexType, =]
[getNativeType, (, STRING_TYPE, ), ;, ObjectType, objType, =, getJSType, (, obj, ), ., dereference, (, ), ;, JSType, objIndexType, =]
[STRING_TYPE, ), ;, ObjectType, objType, =, getJSType, (, obj, ), ., dereference, (, ), ;, JSType, objIndexType, =, objType, ==]
[;, ObjectType, objType, =, getJSType, (, obj, ), ., dereference, (, ), ;, JSType, objIndexType, =, objType, ==, null, ?]
[objType, =, getJSType, (, obj, ), ., dereference, (, ), ;, JSType, objIndexType, =, objType, ==, null, ?, null, :]
[objType, =, getJSType, (, obj, ), ., dereference, (, ), ;, JSType, objIndexType, =, objType, ==, null, ?, null, :]
[(, ), ;, JSType, objIndexType, =, objType, ==, null, ?, null, :, objType, ., getIndexType, (, ), ;, if, (]
[(, ), ;, JSType, objIndexType, =, objType, ==, null, ?, null, :, objType, ., getIndexType, (, ), ;, if, (]
[(, ), ;, JSType, objIndexType, =, objType, ==, null, ?, null, :, objType, ., getIndexType, (, ), ;, if, (]
[;, JSType, objIndexType, =, objType, ==, null, ?, null, :, objType, ., getIndexType, (, ), ;, if, (, objIndexType, !=]
[objIndexType, =, objType, ==, null, ?, null, :, objType, ., getIndexType, (, ), ;, if, (, objIndexType, !=, null, &&]
[=, objType, ==, null, ?, null, :, objType, ., getIndexType, (, ), ;, if, (, objIndexType, !=, null, &&, !]
[=, objType, ==, null, ?, null, :, objType, ., getIndexType, (, ), ;, if, (, objIndexType, !=, null, &&, !]
[(, ), ;, if, (, objIndexType, !=, null, &&, !, objIndexType, ., isUnknownType, (, ), ), {, JSType, narrowedKeyType, =]
[(, ), ;, if, (, objIndexType, !=, null, &&, !, objIndexType, ., isUnknownType, (, ), ), {, JSType, narrowedKeyType, =]
[(, objIndexType, !=, null, &&, !, objIndexType, ., isUnknownType, (, ), ), {, JSType, narrowedKeyType, =, iterKeyType, ., getGreatestSubtype, (]
[!, objIndexType, ., isUnknownType, (, ), ), {, JSType, narrowedKeyType, =, iterKeyType, ., getGreatestSubtype, (, objIndexType, ), ;, if, (]
[objIndexType, ., isUnknownType, (, ), ), {, JSType, narrowedKeyType, =, iterKeyType, ., getGreatestSubtype, (, objIndexType, ), ;, if, (, !]
[objIndexType, ., isUnknownType, (, ), ), {, JSType, narrowedKeyType, =, iterKeyType, ., getGreatestSubtype, (, objIndexType, ), ;, if, (, !]
[JSType, narrowedKeyType, =, iterKeyType, ., getGreatestSubtype, (, objIndexType, ), ;, if, (, !, narrowedKeyType, ., isEmptyType, (, ), ), {]
[=, iterKeyType, ., getGreatestSubtype, (, objIndexType, ), ;, if, (, !, narrowedKeyType, ., isEmptyType, (, ), ), {, iterKeyType, =]
[(, objIndexType, ), ;, if, (, !, narrowedKeyType, ., isEmptyType, (, ), ), {, iterKeyType, =, narrowedKeyType, ;, }, }]
[), ;, if, (, !, narrowedKeyType, ., isEmptyType, (, ), ), {, iterKeyType, =, narrowedKeyType, ;, }, }, redeclareSimpleVar, (]
[if, (, !, narrowedKeyType, ., isEmptyType, (, ), ), {, iterKeyType, =, narrowedKeyType, ;, }, }, redeclareSimpleVar, (, informed, ,]
[!, narrowedKeyType, ., isEmptyType, (, ), ), {, iterKeyType, =, narrowedKeyType, ;, }, }, redeclareSimpleVar, (, informed, ,, item, ,]
[(, ), ), {, iterKeyType, =, narrowedKeyType, ;, }, }, redeclareSimpleVar, (, informed, ,, item, ,, iterKeyType, ), ;, }]
[), {, iterKeyType, =, narrowedKeyType, ;, }, }, redeclareSimpleVar, (, informed, ,, item, ,, iterKeyType, ), ;, }, newScope, =]
[}, }, redeclareSimpleVar, (, informed, ,, item, ,, iterKeyType, ), ;, }, newScope, =, informed, ;, break, ;, }, case]
[informed, ,, item, ,, iterKeyType, ), ;, }, newScope, =, informed, ;, break, ;, }, case, ON_FALSE, :, if, (]
[informed, ,, item, ,, iterKeyType, ), ;, }, newScope, =, informed, ;, break, ;, }, case, ON_FALSE, :, if, (]
[item, ,, iterKeyType, ), ;, }, newScope, =, informed, ;, break, ;, }, case, ON_FALSE, :, if, (, condition, ==]
[), ;, }, newScope, =, informed, ;, break, ;, }, case, ON_FALSE, :, if, (, condition, ==, null, ), {]
[}, newScope, =, informed, ;, break, ;, }, case, ON_FALSE, :, if, (, condition, ==, null, ), {, condition, =]
[}, newScope, =, informed, ;, break, ;, }, case, ON_FALSE, :, if, (, condition, ==, null, ), {, condition, =]
[;, break, ;, }, case, ON_FALSE, :, if, (, condition, ==, null, ), {, condition, =, NodeUtil, ., getConditionExpression, (]
[ON_FALSE, :, if, (, condition, ==, null, ), {, condition, =, NodeUtil, ., getConditionExpression, (, source, ), ;, if, (]
[ON_FALSE, :, if, (, condition, ==, null, ), {, condition, =, NodeUtil, ., getConditionExpression, (, source, ), ;, if, (]
[ON_FALSE, :, if, (, condition, ==, null, ), {, condition, =, NodeUtil, ., getConditionExpression, (, source, ), ;, if, (]
[if, (, condition, ==, null, ), {, condition, =, NodeUtil, ., getConditionExpression, (, source, ), ;, if, (, condition, ==]
[condition, ==, null, ), {, condition, =, NodeUtil, ., getConditionExpression, (, source, ), ;, if, (, condition, ==, null, &&]
[condition, ==, null, ), {, condition, =, NodeUtil, ., getConditionExpression, (, source, ), ;, if, (, condition, ==, null, &&]
[NodeUtil, ., getConditionExpression, (, source, ), ;, if, (, condition, ==, null, &&, source, ., isCase, (, ), ), {]
[getConditionExpression, (, source, ), ;, if, (, condition, ==, null, &&, source, ., isCase, (, ), ), {, condition, =]
[;, if, (, condition, ==, null, &&, source, ., isCase, (, ), ), {, condition, =, source, ;, if, (]
[;, if, (, condition, ==, null, &&, source, ., isCase, (, ), ), {, condition, =, source, ;, if, (]
[(, condition, ==, null, &&, source, ., isCase, (, ), ), {, condition, =, source, ;, if, (, conditionFlowScope, ==]
[null, &&, source, ., isCase, (, ), ), {, condition, =, source, ;, if, (, conditionFlowScope, ==, null, ), {]
[source, ., isCase, (, ), ), {, condition, =, source, ;, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =]
[isCase, (, ), ), {, condition, =, source, ;, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (]
[isCase, (, ), ), {, condition, =, source, ;, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (]
[=, source, ;, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (, condition, ., getFirstChild, (, ), ,]
[=, source, ;, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (, condition, ., getFirstChild, (, ), ,]
[traverse, (, condition, ., getFirstChild, (, ), ,, output, ., createChildFlowScope, (, ), ), ;, }, }, }, if, (]
[traverse, (, condition, ., getFirstChild, (, ), ,, output, ., createChildFlowScope, (, ), ), ;, }, }, }, if, (]
[condition, ., getFirstChild, (, ), ,, output, ., createChildFlowScope, (, ), ), ;, }, }, }, if, (, condition, !=]
[,, output, ., createChildFlowScope, (, ), ), ;, }, }, }, if, (, condition, !=, null, ), {, if, (]
[,, output, ., createChildFlowScope, (, ), ), ;, }, }, }, if, (, condition, !=, null, ), {, if, (]
[,, output, ., createChildFlowScope, (, ), ), ;, }, }, }, if, (, condition, !=, null, ), {, if, (]
[), ;, }, }, }, if, (, condition, !=, null, ), {, if, (, condition, ., isAnd, (, ), ||]
[), ;, }, }, }, if, (, condition, !=, null, ), {, if, (, condition, ., isAnd, (, ), ||]
[null, ), {, if, (, condition, ., isAnd, (, ), ||, condition, ., isOr, (, ), ), {, if, (]
[null, ), {, if, (, condition, ., isAnd, (, ), ||, condition, ., isOr, (, ), ), {, if, (]
[{, if, (, condition, ., isAnd, (, ), ||, condition, ., isOr, (, ), ), {, if, (, conditionOutcomes, ==]
[condition, ., isAnd, (, ), ||, condition, ., isOr, (, ), ), {, if, (, conditionOutcomes, ==, null, ), {]
[isAnd, (, ), ||, condition, ., isOr, (, ), ), {, if, (, conditionOutcomes, ==, null, ), {, conditionOutcomes, =]
[isAnd, (, ), ||, condition, ., isOr, (, ), ), {, if, (, conditionOutcomes, ==, null, ), {, conditionOutcomes, =]
[isAnd, (, ), ||, condition, ., isOr, (, ), ), {, if, (, conditionOutcomes, ==, null, ), {, conditionOutcomes, =]
[isOr, (, ), ), {, if, (, conditionOutcomes, ==, null, ), {, conditionOutcomes, =, condition, ., isAnd, (, ), ?]
[), ), {, if, (, conditionOutcomes, ==, null, ), {, conditionOutcomes, =, condition, ., isAnd, (, ), ?, traverseAnd, (]
[{, if, (, conditionOutcomes, ==, null, ), {, conditionOutcomes, =, condition, ., isAnd, (, ), ?, traverseAnd, (, condition, ,]
[{, if, (, conditionOutcomes, ==, null, ), {, conditionOutcomes, =, condition, ., isAnd, (, ), ?, traverseAnd, (, condition, ,]
[{, conditionOutcomes, =, condition, ., isAnd, (, ), ?, traverseAnd, (, condition, ,, output, ., createChildFlowScope, (, ), ), :]
[=, condition, ., isAnd, (, ), ?, traverseAnd, (, condition, ,, output, ., createChildFlowScope, (, ), ), :, traverseOr, (]
[., isAnd, (, ), ?, traverseAnd, (, condition, ,, output, ., createChildFlowScope, (, ), ), :, traverseOr, (, condition, ,]
[., isAnd, (, ), ?, traverseAnd, (, condition, ,, output, ., createChildFlowScope, (, ), ), :, traverseOr, (, condition, ,]
[,, output, ., createChildFlowScope, (, ), ), :, traverseOr, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }]
[., createChildFlowScope, (, ), ), :, traverseOr, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =]
[., createChildFlowScope, (, ), ), :, traverseOr, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =]
[), :, traverseOr, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (]
[traverseOr, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,]
[traverseOr, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,]
[output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (]
[output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (]
[;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,]
[;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,]
[newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,, branch, ==]
[newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,, branch, ==]
[(, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,, branch, ==, Branch, ., ON_TRUE, ), ,]
[(, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,, branch, ==, Branch, ., ON_TRUE, ), ,]
[,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,, branch, ==, Branch, ., ON_TRUE, ), ,, branch, ==]
[,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,, branch, ==, Branch, ., ON_TRUE, ), ,, branch, ==]
[,, branch, ==, Branch, ., ON_TRUE, ), ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, else, {, if, (]
[,, branch, ==, Branch, ., ON_TRUE, ), ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, else, {, if, (]
[==, Branch, ., ON_TRUE, ), ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, else, {, if, (, conditionFlowScope, ==]
[ON_TRUE, ), ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, else, {, if, (, conditionFlowScope, ==, null, ), {]
[,, branch, ==, Branch, ., ON_TRUE, ), ;, }, else, {, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =]
[==, Branch, ., ON_TRUE, ), ;, }, else, {, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (]
[., ON_TRUE, ), ;, }, else, {, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (, condition, ,]
[., ON_TRUE, ), ;, }, else, {, if, (, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (, condition, ,]
[(, conditionFlowScope, ==, null, ), {, conditionFlowScope, =, traverse, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }]
[==, null, ), {, conditionFlowScope, =, traverse, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =]
[==, null, ), {, conditionFlowScope, =, traverse, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =]
[conditionFlowScope, =, traverse, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (]
[traverse, (, condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,]
[condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionFlowScope, ,]
[condition, ,, output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionFlowScope, ,]
[output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionFlowScope, ,, branch, ==]
[output, ., createChildFlowScope, (, ), ), ;, }, newScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionFlowScope, ,, branch, ==]
[reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionFlowScope, ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, }, break, ;, }]
[reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionFlowScope, ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, }, break, ;, }]
[condition, ,, conditionFlowScope, ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, }, break, ;, }, result, ., add, (]
[condition, ,, conditionFlowScope, ,, branch, ==, Branch, ., ON_TRUE, ), ;, }, }, break, ;, }, result, ., add, (]
[), ;, }, }, break, ;, }, result, ., add, (, newScope, ., optimize, (, ), ), ;, }, return]
[), ;, }, return, result, ;, }, private, FlowScope, traverse, (, Node, n, ,, FlowScope, scope, ), {, switch, (]
[), ;, }, return, result, ;, }, private, FlowScope, traverse, (, Node, n, ,, FlowScope, scope, ), {, switch, (]
[FlowScope, traverse, (, Node, n, ,, FlowScope, scope, ), {, switch, (, n, ., getType, (, ), ), {, case]
[FlowScope, traverse, (, Node, n, ,, FlowScope, scope, ), {, switch, (, n, ., getType, (, ), ), {, case]
[n, ,, FlowScope, scope, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., ASSIGN, :]
[FlowScope, scope, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, scope, =]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, scope, =, traverseAssign, (]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, scope, =, traverseAssign, (, n, ,]
[), ), {, case, Token, ., ASSIGN, :, scope, =, traverseAssign, (, n, ,, scope, ), ;, break, ;, case]
[), ), {, case, Token, ., ASSIGN, :, scope, =, traverseAssign, (, n, ,, scope, ), ;, break, ;, case]
[Token, ., ASSIGN, :, scope, =, traverseAssign, (, n, ,, scope, ), ;, break, ;, case, Token, ., NAME, :]
[ASSIGN, :, scope, =, traverseAssign, (, n, ,, scope, ), ;, break, ;, case, Token, ., NAME, :, scope, =]
[scope, =, traverseAssign, (, n, ,, scope, ), ;, break, ;, case, Token, ., NAME, :, scope, =, traverseName, (]
[traverseAssign, (, n, ,, scope, ), ;, break, ;, case, Token, ., NAME, :, scope, =, traverseName, (, n, ,]
[;, break, ;, case, Token, ., NAME, :, scope, =, traverseName, (, n, ,, scope, ), ;, break, ;, case]
[;, break, ;, case, Token, ., NAME, :, scope, =, traverseName, (, n, ,, scope, ), ;, break, ;, case]
[Token, ., NAME, :, scope, =, traverseName, (, n, ,, scope, ), ;, break, ;, case, Token, ., GETPROP, :]
[NAME, :, scope, =, traverseName, (, n, ,, scope, ), ;, break, ;, case, Token, ., GETPROP, :, scope, =]
[scope, =, traverseName, (, n, ,, scope, ), ;, break, ;, case, Token, ., GETPROP, :, scope, =, traverseGetProp, (]
[traverseName, (, n, ,, scope, ), ;, break, ;, case, Token, ., GETPROP, :, scope, =, traverseGetProp, (, n, ,]
[;, break, ;, case, Token, ., GETPROP, :, scope, =, traverseGetProp, (, n, ,, scope, ), ;, break, ;, case]
[;, break, ;, case, Token, ., GETPROP, :, scope, =, traverseGetProp, (, n, ,, scope, ), ;, break, ;, case]
[Token, ., GETPROP, :, scope, =, traverseGetProp, (, n, ,, scope, ), ;, break, ;, case, Token, ., AND, :]
[GETPROP, :, scope, =, traverseGetProp, (, n, ,, scope, ), ;, break, ;, case, Token, ., AND, :, scope, =]
[GETPROP, :, scope, =, traverseGetProp, (, n, ,, scope, ), ;, break, ;, case, Token, ., AND, :, scope, =]
[GETPROP, :, scope, =, traverseGetProp, (, n, ,, scope, ), ;, break, ;, case, Token, ., AND, :, scope, =]
[scope, =, traverseGetProp, (, n, ,, scope, ), ;, break, ;, case, Token, ., AND, :, scope, =, traverseAnd, (]
[traverseGetProp, (, n, ,, scope, ), ;, break, ;, case, Token, ., AND, :, scope, =, traverseAnd, (, n, ,]
[scope, =, traverseAnd, (, n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case]
[scope, =, traverseAnd, (, n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case]
[n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., OR, :]
[scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., OR, :, scope, =]
[scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., OR, :, scope, =]
[scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., OR, :, scope, =]
[., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., OR, :, scope, =, traverseOr, (]
[(, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., OR, :, scope, =, traverseOr, (, n, ,]
[scope, =, traverseOr, (, n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case]
[scope, =, traverseOr, (, n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case]
[n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., HOOK, :]
[scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., HOOK, :, scope, =]
[., getJoinedFlowScope, (, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., HOOK, :, scope, =, traverseHook, (]
[(, ), ., createChildFlowScope, (, ), ;, break, ;, case, Token, ., HOOK, :, scope, =, traverseHook, (, n, ,]
[;, break, ;, case, Token, ., HOOK, :, scope, =, traverseHook, (, n, ,, scope, ), ;, break, ;, case]
[;, break, ;, case, Token, ., HOOK, :, scope, =, traverseHook, (, n, ,, scope, ), ;, break, ;, case]
[Token, ., HOOK, :, scope, =, traverseHook, (, n, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :]
[HOOK, :, scope, =, traverseHook, (, n, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, scope, =]
[scope, =, traverseHook, (, n, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, scope, =, traverseObjectLiteral, (]
[traverseHook, (, n, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, scope, =, traverseObjectLiteral, (, n, ,]
[;, break, ;, case, Token, ., OBJECTLIT, :, scope, =, traverseObjectLiteral, (, n, ,, scope, ), ;, break, ;, case]
[;, break, ;, case, Token, ., OBJECTLIT, :, scope, =, traverseObjectLiteral, (, n, ,, scope, ), ;, break, ;, case]
[Token, ., OBJECTLIT, :, scope, =, traverseObjectLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., CALL, :]
[OBJECTLIT, :, scope, =, traverseObjectLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., CALL, :, scope, =]
[scope, =, traverseObjectLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., CALL, :, scope, =, traverseCall, (]
[traverseObjectLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., CALL, :, scope, =, traverseCall, (, n, ,]
[;, break, ;, case, Token, ., CALL, :, scope, =, traverseCall, (, n, ,, scope, ), ;, break, ;, case]
[;, break, ;, case, Token, ., CALL, :, scope, =, traverseCall, (, n, ,, scope, ), ;, break, ;, case]
[Token, ., CALL, :, scope, =, traverseCall, (, n, ,, scope, ), ;, break, ;, case, Token, ., NEW, :]
[CALL, :, scope, =, traverseCall, (, n, ,, scope, ), ;, break, ;, case, Token, ., NEW, :, scope, =]
[scope, =, traverseCall, (, n, ,, scope, ), ;, break, ;, case, Token, ., NEW, :, scope, =, traverseNew, (]
[traverseCall, (, n, ,, scope, ), ;, break, ;, case, Token, ., NEW, :, scope, =, traverseNew, (, n, ,]
[;, break, ;, case, Token, ., NEW, :, scope, =, traverseNew, (, n, ,, scope, ), ;, break, ;, case]
[;, break, ;, case, Token, ., NEW, :, scope, =, traverseNew, (, n, ,, scope, ), ;, break, ;, case]
[., NEW, :, scope, =, traverseNew, (, n, ,, scope, ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case]
[., NEW, :, scope, =, traverseNew, (, n, ,, scope, ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case]
[=, traverseNew, (, n, ,, scope, ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :]
[(, n, ,, scope, ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, scope, =]
[,, scope, ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, scope, =, traverseAdd, (]
[), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, scope, =, traverseAdd, (, n, ,]
[., ASSIGN_ADD, :, case, Token, ., ADD, :, scope, =, traverseAdd, (, n, ,, scope, ), ;, break, ;, case]
[., ASSIGN_ADD, :, case, Token, ., ADD, :, scope, =, traverseAdd, (, n, ,, scope, ), ;, break, ;, case]
[., ADD, :, scope, =, traverseAdd, (, n, ,, scope, ), ;, break, ;, case, Token, ., POS, :, case]
[., ADD, :, scope, =, traverseAdd, (, n, ,, scope, ), ;, break, ;, case, Token, ., POS, :, case]
[=, traverseAdd, (, n, ,, scope, ), ;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :]
[(, n, ,, scope, ), ;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, scope, =]
[,, scope, ), ;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, scope, =, traverse, (]
[,, scope, ), ;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, scope, =, traverse, (]
[case, Token, ., POS, :, case, Token, ., NEG, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,]
[POS, :, case, Token, ., NEG, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;]
[POS, :, case, Token, ., NEG, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;]
[., NEG, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (]
[:, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (, getNativeType, (]
[getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case]
[getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case]
[scope, ), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., ARRAYLIT, :]
[;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., ARRAYLIT, :, scope, =]
[., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., ARRAYLIT, :, scope, =, traverseArrayLiteral, (]
[(, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., ARRAYLIT, :, scope, =, traverseArrayLiteral, (, n, ,]
[;, break, ;, case, Token, ., ARRAYLIT, :, scope, =, traverseArrayLiteral, (, n, ,, scope, ), ;, break, ;, case]
[;, break, ;, case, Token, ., ARRAYLIT, :, scope, =, traverseArrayLiteral, (, n, ,, scope, ), ;, break, ;, case]
[Token, ., ARRAYLIT, :, scope, =, traverseArrayLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., THIS, :]
[Token, ., ARRAYLIT, :, scope, =, traverseArrayLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., THIS, :]
[scope, =, traverseArrayLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., THIS, :, n, ., setJSType, (]
[scope, =, traverseArrayLiteral, (, n, ,, scope, ), ;, break, ;, case, Token, ., THIS, :, n, ., setJSType, (]
[;, case, Token, ., THIS, :, n, ., setJSType, (, scope, ., getTypeOfThis, (, ), ), ;, break, ;, case]
[;, case, Token, ., THIS, :, n, ., setJSType, (, scope, ., getTypeOfThis, (, ), ), ;, break, ;, case]
[:, n, ., setJSType, (, scope, ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, case]
[:, n, ., setJSType, (, scope, ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, case]
[scope, ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[scope, ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[), ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case]
[), ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, case]
[Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, case]
[Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, case, Token, ., ASSIGN_DIV, :, case]
[Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, case, Token, ., ASSIGN_DIV, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case]
[Token, ., URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case]
[Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case]
[Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case]
[Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case]
[Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case]
[Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case]
[Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITAND, :, case]
[Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITAND, :, case]
[Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case]
[Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case]
[Token, ., MOD, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, case]
[Token, ., MOD, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, case]
[Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, case, Token, ., MUL, :, case]
[Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, case, Token, ., MUL, :, case]
[Token, ., BITXOR, :, case, Token, ., BITOR, :, case, Token, ., MUL, :, case, Token, ., SUB, :, case]
[Token, ., BITXOR, :, case, Token, ., BITOR, :, case, Token, ., MUL, :, case, Token, ., SUB, :, case]
[Token, ., BITOR, :, case, Token, ., MUL, :, case, Token, ., SUB, :, case, Token, ., DEC, :, case]
[Token, ., BITOR, :, case, Token, ., MUL, :, case, Token, ., SUB, :, case, Token, ., DEC, :, case]
[Token, ., MUL, :, case, Token, ., SUB, :, case, Token, ., DEC, :, case, Token, ., INC, :, case]
[Token, ., MUL, :, case, Token, ., SUB, :, case, Token, ., DEC, :, case, Token, ., INC, :, case]
[case, Token, ., SUB, :, case, Token, ., DEC, :, case, Token, ., INC, :, case, Token, ., BITNOT, :]
[., SUB, :, case, Token, ., DEC, :, case, Token, ., INC, :, case, Token, ., BITNOT, :, scope, =]
[:, case, Token, ., DEC, :, case, Token, ., INC, :, case, Token, ., BITNOT, :, scope, =, traverseChildren, (]
[Token, ., DEC, :, case, Token, ., INC, :, case, Token, ., BITNOT, :, scope, =, traverseChildren, (, n, ,]
[:, case, Token, ., INC, :, case, Token, ., BITNOT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[:, case, Token, ., INC, :, case, Token, ., BITNOT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[INC, :, case, Token, ., BITNOT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (]
[case, Token, ., BITNOT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (]
[traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case]
[traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case]
[scope, ), ;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., PARAM_LIST, :]
[;, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., PARAM_LIST, :, scope, =]
[., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., PARAM_LIST, :, scope, =, traverse, (]
[., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., PARAM_LIST, :, scope, =, traverse, (]
[), ), ;, break, ;, case, Token, ., PARAM_LIST, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,]
[break, ;, case, Token, ., PARAM_LIST, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;]
[break, ;, case, Token, ., PARAM_LIST, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;]
[., PARAM_LIST, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (]
[:, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (, getJSType, (]
[:, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, n, ., setJSType, (, getJSType, (]
[scope, ), ;, n, ., setJSType, (, getJSType, (, n, ., getFirstChild, (, ), ), ), ;, break, ;, case]
[scope, ), ;, n, ., setJSType, (, getJSType, (, n, ., getFirstChild, (, ), ), ), ;, break, ;, case]
[., setJSType, (, getJSType, (, n, ., getFirstChild, (, ), ), ), ;, break, ;, case, Token, ., COMMA, :]
[(, getJSType, (, n, ., getFirstChild, (, ), ), ), ;, break, ;, case, Token, ., COMMA, :, scope, =]
[(, n, ., getFirstChild, (, ), ), ), ;, break, ;, case, Token, ., COMMA, :, scope, =, traverseChildren, (]
[., getFirstChild, (, ), ), ), ;, break, ;, case, Token, ., COMMA, :, scope, =, traverseChildren, (, n, ,]
[), ), ), ;, break, ;, case, Token, ., COMMA, :, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[), ), ), ;, break, ;, case, Token, ., COMMA, :, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[break, ;, case, Token, ., COMMA, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (]
[case, Token, ., COMMA, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getJSType, (]
[case, Token, ., COMMA, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getJSType, (]
[scope, ), ;, n, ., setJSType, (, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case]
[scope, ), ;, n, ., setJSType, (, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case]
[., setJSType, (, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., TYPEOF, :]
[(, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., TYPEOF, :, scope, =]
[(, n, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., TYPEOF, :, scope, =, traverseChildren, (]
[., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., TYPEOF, :, scope, =, traverseChildren, (, n, ,]
[), ), ), ;, break, ;, case, Token, ., TYPEOF, :, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[), ), ), ;, break, ;, case, Token, ., TYPEOF, :, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[break, ;, case, Token, ., TYPEOF, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (]
[case, Token, ., TYPEOF, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (]
[traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case]
[traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case]
[), ;, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., DELPROP, :, case]
[), ;, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., DELPROP, :, case]
[(, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., DELPROP, :, case, Token, ., LT, :, case]
[(, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., DELPROP, :, case, Token, ., LT, :, case]
[), ;, break, ;, case, Token, ., DELPROP, :, case, Token, ., LT, :, case, Token, ., LE, :, case]
[), ;, break, ;, case, Token, ., DELPROP, :, case, Token, ., LT, :, case, Token, ., LE, :, case]
[Token, ., DELPROP, :, case, Token, ., LT, :, case, Token, ., LE, :, case, Token, ., GT, :, case]
[Token, ., DELPROP, :, case, Token, ., LT, :, case, Token, ., LE, :, case, Token, ., GT, :, case]
[Token, ., LT, :, case, Token, ., LE, :, case, Token, ., GT, :, case, Token, ., GE, :, case]
[Token, ., LT, :, case, Token, ., LE, :, case, Token, ., GT, :, case, Token, ., GE, :, case]
[Token, ., LE, :, case, Token, ., GT, :, case, Token, ., GE, :, case, Token, ., NOT, :, case]
[Token, ., LE, :, case, Token, ., GT, :, case, Token, ., GE, :, case, Token, ., NOT, :, case]
[Token, ., GT, :, case, Token, ., GE, :, case, Token, ., NOT, :, case, Token, ., EQ, :, case]
[Token, ., GT, :, case, Token, ., GE, :, case, Token, ., NOT, :, case, Token, ., EQ, :, case]
[Token, ., GE, :, case, Token, ., NOT, :, case, Token, ., EQ, :, case, Token, ., NE, :, case]
[Token, ., GE, :, case, Token, ., NOT, :, case, Token, ., EQ, :, case, Token, ., NE, :, case]
[Token, ., NOT, :, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case]
[Token, ., NOT, :, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case]
[Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case]
[Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case]
[Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., INSTANCEOF, :, case]
[Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., INSTANCEOF, :, case]
[case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :]
[., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, scope, =]
[:, case, Token, ., SHNE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, scope, =, traverseChildren, (]
[Token, ., SHNE, :, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, scope, =, traverseChildren, (, n, ,]
[:, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[:, case, Token, ., INSTANCEOF, :, case, Token, ., IN, :, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[INSTANCEOF, :, case, Token, ., IN, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (]
[case, Token, ., IN, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (]
[traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case]
[traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case]
[scope, ), ;, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., GETELEM, :]
[;, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., GETELEM, :, scope, =]
[., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., GETELEM, :, scope, =, traverseGetElem, (]
[(, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., GETELEM, :, scope, =, traverseGetElem, (, n, ,]
[;, break, ;, case, Token, ., GETELEM, :, scope, =, traverseGetElem, (, n, ,, scope, ), ;, break, ;, case]
[;, break, ;, case, Token, ., GETELEM, :, scope, =, traverseGetElem, (, n, ,, scope, ), ;, break, ;, case]
[Token, ., GETELEM, :, scope, =, traverseGetElem, (, n, ,, scope, ), ;, break, ;, case, Token, ., EXPR_RESULT, :]
[GETELEM, :, scope, =, traverseGetElem, (, n, ,, scope, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, scope, =]
[scope, =, traverseGetElem, (, n, ,, scope, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, scope, =, traverseChildren, (]
[traverseGetElem, (, n, ,, scope, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, scope, =, traverseChildren, (, n, ,]
[), ;, break, ;, case, Token, ., EXPR_RESULT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, if, (]
[), ;, break, ;, case, Token, ., EXPR_RESULT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, if, (]
[), ;, break, ;, case, Token, ., EXPR_RESULT, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, if, (]
[traverseChildren, (, n, ,, scope, ), ;, if, (, n, ., getFirstChild, (, ), ., isGetProp, (, ), ), {]
[n, ,, scope, ), ;, if, (, n, ., getFirstChild, (, ), ., isGetProp, (, ), ), {, ensurePropertyDeclared, (]
[n, ,, scope, ), ;, if, (, n, ., getFirstChild, (, ), ., isGetProp, (, ), ), {, ensurePropertyDeclared, (]
[), ., isGetProp, (, ), ), {, ensurePropertyDeclared, (, n, ., getFirstChild, (, ), ), ;, }, break, ;, case]
[), ., isGetProp, (, ), ), {, ensurePropertyDeclared, (, n, ., getFirstChild, (, ), ), ;, }, break, ;, case]
[), ), {, ensurePropertyDeclared, (, n, ., getFirstChild, (, ), ), ;, }, break, ;, case, Token, ., SWITCH, :]
[{, ensurePropertyDeclared, (, n, ., getFirstChild, (, ), ), ;, }, break, ;, case, Token, ., SWITCH, :, scope, =]
[(, n, ., getFirstChild, (, ), ), ;, }, break, ;, case, Token, ., SWITCH, :, scope, =, traverse, (]
[(, n, ., getFirstChild, (, ), ), ;, }, break, ;, case, Token, ., SWITCH, :, scope, =, traverse, (]
[), ;, }, break, ;, case, Token, ., SWITCH, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,]
[Token, ., SWITCH, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, break, ;, case]
[Token, ., SWITCH, :, scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, break, ;, case]
[scope, =, traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, break, ;, case, Token, ., RETURN, :]
[traverse, (, n, ., getFirstChild, (, ), ,, scope, ), ;, break, ;, case, Token, ., RETURN, :, scope, =]
[n, ., getFirstChild, (, ), ,, scope, ), ;, break, ;, case, Token, ., RETURN, :, scope, =, traverseReturn, (]
[getFirstChild, (, ), ,, scope, ), ;, break, ;, case, Token, ., RETURN, :, scope, =, traverseReturn, (, n, ,]
[;, break, ;, case, Token, ., RETURN, :, scope, =, traverseReturn, (, n, ,, scope, ), ;, break, ;, case]
[;, break, ;, case, Token, ., RETURN, :, scope, =, traverseReturn, (, n, ,, scope, ), ;, break, ;, case]
[., RETURN, :, scope, =, traverseReturn, (, n, ,, scope, ), ;, break, ;, case, Token, ., VAR, :, case]
[., RETURN, :, scope, =, traverseReturn, (, n, ,, scope, ), ;, break, ;, case, Token, ., VAR, :, case]
[=, traverseReturn, (, n, ,, scope, ), ;, break, ;, case, Token, ., VAR, :, case, Token, ., THROW, :]
[(, n, ,, scope, ), ;, break, ;, case, Token, ., VAR, :, case, Token, ., THROW, :, scope, =]
[,, scope, ), ;, break, ;, case, Token, ., VAR, :, case, Token, ., THROW, :, scope, =, traverseChildren, (]
[), ;, break, ;, case, Token, ., VAR, :, case, Token, ., THROW, :, scope, =, traverseChildren, (, n, ,]
[., VAR, :, case, Token, ., THROW, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, case]
[., VAR, :, case, Token, ., THROW, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, case]
[Token, ., THROW, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, case, Token, ., CATCH, :]
[THROW, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, case, Token, ., CATCH, :, scope, =]
[scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, case, Token, ., CATCH, :, scope, =, traverseCatch, (]
[traverseChildren, (, n, ,, scope, ), ;, break, ;, case, Token, ., CATCH, :, scope, =, traverseCatch, (, n, ,]
[;, break, ;, case, Token, ., CATCH, :, scope, =, traverseCatch, (, n, ,, scope, ), ;, break, ;, case]
[;, break, ;, case, Token, ., CATCH, :, scope, =, traverseCatch, (, n, ,, scope, ), ;, break, ;, case]
[Token, ., CATCH, :, scope, =, traverseCatch, (, n, ,, scope, ), ;, break, ;, case, Token, ., CAST, :]
[CATCH, :, scope, =, traverseCatch, (, n, ,, scope, ), ;, break, ;, case, Token, ., CAST, :, scope, =]
[scope, =, traverseCatch, (, n, ,, scope, ), ;, break, ;, case, Token, ., CAST, :, scope, =, traverseChildren, (]
[traverseCatch, (, n, ,, scope, ), ;, break, ;, case, Token, ., CAST, :, scope, =, traverseChildren, (, n, ,]
[;, case, Token, ., CAST, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, }, if, (]
[case, Token, ., CAST, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, }, if, (, !]
[case, Token, ., CAST, :, scope, =, traverseChildren, (, n, ,, scope, ), ;, break, ;, }, if, (, !]
[,, scope, ), ;, break, ;, }, if, (, !, n, ., isFunction, (, ), ), {, JSDocInfo, info, =]
[,, scope, ), ;, break, ;, }, if, (, !, n, ., isFunction, (, ), ), {, JSDocInfo, info, =]
[(, !, n, ., isFunction, (, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[(, !, n, ., isFunction, (, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[(, !, n, ., isFunction, (, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[n, ., isFunction, (, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[isFunction, (, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[isFunction, (, ), ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, JSType, castType, =]
[getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, JSType, castType, =]
[getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, JSType, castType, =]
[null, &&, info, ., hasType, (, ), ), {, JSType, castType, =, info, ., getType, (, ), ., evaluate, (]
[info, ., hasType, (, ), ), {, JSType, castType, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,]
[), {, JSType, castType, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, if, (]
[), {, JSType, castType, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, if, (]
[), {, JSType, castType, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, if, (]
[., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, if, (, n, ., isQualifiedName, (, ), &&]
[., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, if, (, n, ., isQualifiedName, (, ), &&]
[., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, if, (, n, ., isQualifiedName, (, ), &&]
[;, if, (, n, ., isQualifiedName, (, ), &&, n, ., getParent, (, ), ., isExprResult, (, ), ), {]
[(, n, ., isQualifiedName, (, ), &&, n, ., getParent, (, ), ., isExprResult, (, ), ), {, updateScopeForTypeChange, (]
[., isQualifiedName, (, ), &&, n, ., getParent, (, ), ., isExprResult, (, ), ), {, updateScopeForTypeChange, (, scope, ,]
[(, ), &&, n, ., getParent, (, ), ., isExprResult, (, ), ), {, updateScopeForTypeChange, (, scope, ,, n, ,]
[(, ), &&, n, ., getParent, (, ), ., isExprResult, (, ), ), {, updateScopeForTypeChange, (, scope, ,, n, ,]
[(, ), ., isExprResult, (, ), ), {, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,]
[(, ), ), {, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,, castType, ), ;, }]
[(, ), ), {, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,, castType, ), ;, }]
[updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,, castType, ), ;, }, n, ., setJSType, (]
[n, ., getJSType, (, ), ,, castType, ), ;, }, n, ., setJSType, (, castType, ), ;, }, }, return]
[castType, ), ;, }, }, return, scope, ;, }, private, FlowScope, traverseReturn, (, Node, n, ,, FlowScope, scope, ), {]
[;, }, }, return, scope, ;, }, private, FlowScope, traverseReturn, (, Node, n, ,, FlowScope, scope, ), {, scope, =]
[}, return, scope, ;, }, private, FlowScope, traverseReturn, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (]
[scope, ;, }, private, FlowScope, traverseReturn, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,]
[(, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, Node, retValue, =]
[(, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, Node, retValue, =]
[scope, =, traverseChildren, (, n, ,, scope, ), ;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (]
[scope, =, traverseChildren, (, n, ,, scope, ), ;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (]
[traverseChildren, (, n, ,, scope, ), ;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (, retValue, !=]
[;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (, retValue, !=, null, ), {, JSType, type, =]
[;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (, retValue, !=, null, ), {, JSType, type, =]
[;, Node, retValue, =, n, ., getFirstChild, (, ), ;, if, (, retValue, !=, null, ), {, JSType, type, =]
[retValue, !=, null, ), {, JSType, type, =, functionScope, ., getRootNode, (, ), ., getJSType, (, ), ;, if, (]
[retValue, !=, null, ), {, JSType, type, =, functionScope, ., getRootNode, (, ), ., getJSType, (, ), ;, if, (]
[null, ), {, JSType, type, =, functionScope, ., getRootNode, (, ), ., getJSType, (, ), ;, if, (, type, !=]
[functionScope, ., getRootNode, (, ), ., getJSType, (, ), ;, if, (, type, !=, null, ), {, FunctionType, fnType, =]
[functionScope, ., getRootNode, (, ), ., getJSType, (, ), ;, if, (, type, !=, null, ), {, FunctionType, fnType, =]
[), ;, if, (, type, !=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (]
[), ;, if, (, type, !=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (]
[if, (, type, !=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=]
[!=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {]
[), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, inferPropertyTypesToMatchConstraint, (]
[), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, inferPropertyTypesToMatchConstraint, (]
[., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, inferPropertyTypesToMatchConstraint, (, retValue, ., getJSType, (, ), ,]
[., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, inferPropertyTypesToMatchConstraint, (, retValue, ., getJSType, (, ), ,]
[{, inferPropertyTypesToMatchConstraint, (, retValue, ., getJSType, (, ), ,, fnType, ., getReturnType, (, ), ), ;, }, }, }, return]
[}, }, return, scope, ;, }, private, FlowScope, traverseCatch, (, Node, catchNode, ,, FlowScope, scope, ), {, Node, name, =]
[}, }, return, scope, ;, }, private, FlowScope, traverseCatch, (, Node, catchNode, ,, FlowScope, scope, ), {, Node, name, =]
[(, Node, catchNode, ,, FlowScope, scope, ), {, Node, name, =, catchNode, ., getFirstChild, (, ), ;, String, varName, =]
[(, Node, catchNode, ,, FlowScope, scope, ), {, Node, name, =, catchNode, ., getFirstChild, (, ), ;, String, varName, =]
[., getFirstChild, (, ), ;, String, varName, =, name, ., getString, (, ), ;, JSType, type, ;, JSDocInfo, info, =]
[., getFirstChild, (, ), ;, String, varName, =, name, ., getString, (, ), ;, JSType, type, ;, JSDocInfo, info, =]
[name, ., getString, (, ), ;, JSType, type, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (]
[name, ., getString, (, ), ;, JSType, type, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (]
[name, ., getString, (, ), ;, JSType, type, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (]
[getString, (, ), ;, JSType, type, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[), ;, JSType, type, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[), ;, JSType, type, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[=, name, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, type, =]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, type, =]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, type, =]
[!=, null, &&, info, ., hasType, (, ), ), {, type, =, info, ., getType, (, ), ., evaluate, (]
[&&, info, ., hasType, (, ), ), {, type, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,]
[), {, type, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, }, else, {]
[type, =, info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, }, else, {, type, =]
[info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, }, else, {, type, =, getNativeType, (]
[info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, ), ;, }, else, {, type, =, getNativeType, (]
[evaluate, (, syntacticScope, ,, registry, ), ;, }, else, {, type, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }]
[syntacticScope, ,, registry, ), ;, }, else, {, type, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, redeclareSimpleVar, (]
[registry, ), ;, }, else, {, type, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, redeclareSimpleVar, (, scope, ,]
[;, }, else, {, type, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, redeclareSimpleVar, (, scope, ,, name, ,]
[{, type, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, redeclareSimpleVar, (, scope, ,, name, ,, type, ), ;]
[{, type, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, redeclareSimpleVar, (, scope, ,, name, ,, type, ), ;]
[(, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, redeclareSimpleVar, (, scope, ,, name, ,, type, ), ;, name, ., setJSType, (]
[), ;, }, redeclareSimpleVar, (, scope, ,, name, ,, type, ), ;, name, ., setJSType, (, type, ), ;, return]
[), ;, return, scope, ;, }, private, FlowScope, traverseAssign, (, Node, n, ,, FlowScope, scope, ), {, Node, left, =]
[), ;, return, scope, ;, }, private, FlowScope, traverseAssign, (, Node, n, ,, FlowScope, scope, ), {, Node, left, =]
[(, Node, n, ,, FlowScope, scope, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, right, =]
[(, Node, n, ,, FlowScope, scope, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, right, =]
[), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, right, =, n, ., getLastChild, (, ), ;]
[Node, left, =, n, ., getFirstChild, (, ), ;, Node, right, =, n, ., getLastChild, (, ), ;, scope, =]
[=, n, ., getFirstChild, (, ), ;, Node, right, =, n, ., getLastChild, (, ), ;, scope, =, traverseChildren, (]
[., getFirstChild, (, ), ;, Node, right, =, n, ., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,]
[right, =, n, ., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;, JSType, leftType, =]
[right, =, n, ., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;, JSType, leftType, =]
[=, traverseChildren, (, n, ,, scope, ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =]
[(, n, ,, scope, ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =, getJSType, (]
[scope, ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =, getJSType, (, right, ), ;]
[scope, ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =, getJSType, (, right, ), ;]
[leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =, getJSType, (, right, ), ;, n, ., setJSType, (]
[., getJSType, (, ), ;, JSType, rightType, =, getJSType, (, right, ), ;, n, ., setJSType, (, rightType, ), ;]
[(, ), ;, JSType, rightType, =, getJSType, (, right, ), ;, n, ., setJSType, (, rightType, ), ;, updateScopeForTypeChange, (]
[;, JSType, rightType, =, getJSType, (, right, ), ;, n, ., setJSType, (, rightType, ), ;, updateScopeForTypeChange, (, scope, ,]
[rightType, =, getJSType, (, right, ), ;, n, ., setJSType, (, rightType, ), ;, updateScopeForTypeChange, (, scope, ,, left, ,]
[getJSType, (, right, ), ;, n, ., setJSType, (, rightType, ), ;, updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,]
[;, n, ., setJSType, (, rightType, ), ;, updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,, rightType, ), ;, return]
[scope, ;, }, private, void, updateScopeForTypeChange, (, FlowScope, scope, ,, Node, left, ,, JSType, leftType, ,, JSType, resultType, ), {]
[scope, ;, }, private, void, updateScopeForTypeChange, (, FlowScope, scope, ,, Node, left, ,, JSType, leftType, ,, JSType, resultType, ), {]
[void, updateScopeForTypeChange, (, FlowScope, scope, ,, Node, left, ,, JSType, leftType, ,, JSType, resultType, ), {, Preconditions, ., checkNotNull, (]
[,, Node, left, ,, JSType, leftType, ,, JSType, resultType, ), {, Preconditions, ., checkNotNull, (, resultType, ), ;, switch, (]
[,, Node, left, ,, JSType, leftType, ,, JSType, resultType, ), {, Preconditions, ., checkNotNull, (, resultType, ), ;, switch, (]
[resultType, ), {, Preconditions, ., checkNotNull, (, resultType, ), ;, switch, (, left, ., getType, (, ), ), {, case]
[resultType, ), {, Preconditions, ., checkNotNull, (, resultType, ), ;, switch, (, left, ., getType, (, ), ), {, case]
[resultType, ), ;, switch, (, left, ., getType, (, ), ), {, case, Token, ., NAME, :, String, varName, =]
[resultType, ), ;, switch, (, left, ., getType, (, ), ), {, case, Token, ., NAME, :, String, varName, =]
[), ), {, case, Token, ., NAME, :, String, varName, =, left, ., getString, (, ), ;, Var, var, =]
[), ), {, case, Token, ., NAME, :, String, varName, =, left, ., getString, (, ), ;, Var, var, =]
[Token, ., NAME, :, String, varName, =, left, ., getString, (, ), ;, Var, var, =, syntacticScope, ., getVar, (]
[=, left, ., getString, (, ), ;, Var, var, =, syntacticScope, ., getVar, (, varName, ), ;, boolean, isVarDeclaration, =]
[=, left, ., getString, (, ), ;, Var, var, =, syntacticScope, ., getVar, (, varName, ), ;, boolean, isVarDeclaration, =]
[var, =, syntacticScope, ., getVar, (, varName, ), ;, boolean, isVarDeclaration, =, left, ., hasChildren, (, ), ;, if, (]
[var, =, syntacticScope, ., getVar, (, varName, ), ;, boolean, isVarDeclaration, =, left, ., hasChildren, (, ), ;, if, (]
[var, =, syntacticScope, ., getVar, (, varName, ), ;, boolean, isVarDeclaration, =, left, ., hasChildren, (, ), ;, if, (]
[=, syntacticScope, ., getVar, (, varName, ), ;, boolean, isVarDeclaration, =, left, ., hasChildren, (, ), ;, if, (, !]
[., getVar, (, varName, ), ;, boolean, isVarDeclaration, =, left, ., hasChildren, (, ), ;, if, (, !, isVarDeclaration, ||]
[., getVar, (, varName, ), ;, boolean, isVarDeclaration, =, left, ., hasChildren, (, ), ;, if, (, !, isVarDeclaration, ||]
[(, varName, ), ;, boolean, isVarDeclaration, =, left, ., hasChildren, (, ), ;, if, (, !, isVarDeclaration, ||, var, ==]
[), ;, boolean, isVarDeclaration, =, left, ., hasChildren, (, ), ;, if, (, !, isVarDeclaration, ||, var, ==, null, ||]
[), ;, boolean, isVarDeclaration, =, left, ., hasChildren, (, ), ;, if, (, !, isVarDeclaration, ||, var, ==, null, ||]
[hasChildren, (, ), ;, if, (, !, isVarDeclaration, ||, var, ==, null, ||, var, ., isTypeInferred, (, ), ), {]
[), ;, if, (, !, isVarDeclaration, ||, var, ==, null, ||, var, ., isTypeInferred, (, ), ), {, redeclareSimpleVar, (]
[if, (, !, isVarDeclaration, ||, var, ==, null, ||, var, ., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,]
[!, isVarDeclaration, ||, var, ==, null, ||, var, ., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,]
[==, null, ||, var, ., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }]
[==, null, ||, var, ., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }]
[., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }, left, ., setJSType, (]
[., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }, left, ., setJSType, (]
[., isTypeInferred, (, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }, left, ., setJSType, (]
[(, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }, left, ., setJSType, (, isVarDeclaration, ||]
[(, ), ), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }, left, ., setJSType, (, isVarDeclaration, ||]
[), {, redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }, left, ., setJSType, (, isVarDeclaration, ||, leftType, ==]
[redeclareSimpleVar, (, scope, ,, left, ,, resultType, ), ;, }, left, ., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?]
[scope, ,, left, ,, resultType, ), ;, }, left, ., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?, resultType, :]
[), ;, }, left, ., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?, resultType, :, null, ), ;, if, (]
[), ;, }, left, ., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?, resultType, :, null, ), ;, if, (]
[), ;, }, left, ., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?, resultType, :, null, ), ;, if, (]
[}, left, ., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?, resultType, :, null, ), ;, if, (, var, !=]
[., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?, resultType, :, null, ), ;, if, (, var, !=, null, &&]
[., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?, resultType, :, null, ), ;, if, (, var, !=, null, &&]
[:, null, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, JSType, oldType, =]
[:, null, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, JSType, oldType, =]
[var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, JSType, oldType, =, var, ., getType, (, ), ;]
[var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, JSType, oldType, =, var, ., getType, (, ), ;]
[var, ., isTypeInferred, (, ), ), {, JSType, oldType, =, var, ., getType, (, ), ;, var, ., setType, (]
[var, ., isTypeInferred, (, ), ), {, JSType, oldType, =, var, ., getType, (, ), ;, var, ., setType, (]
[var, ., isTypeInferred, (, ), ), {, JSType, oldType, =, var, ., getType, (, ), ;, var, ., setType, (]
[isTypeInferred, (, ), ), {, JSType, oldType, =, var, ., getType, (, ), ;, var, ., setType, (, oldType, ==]
[), ), {, JSType, oldType, =, var, ., getType, (, ), ;, var, ., setType, (, oldType, ==, null, ?]
[{, JSType, oldType, =, var, ., getType, (, ), ;, var, ., setType, (, oldType, ==, null, ?, resultType, :]
[{, JSType, oldType, =, var, ., getType, (, ), ;, var, ., setType, (, oldType, ==, null, ?, resultType, :]
[var, ., getType, (, ), ;, var, ., setType, (, oldType, ==, null, ?, resultType, :, oldType, ., getLeastSupertype, (]
[setType, (, oldType, ==, null, ?, resultType, :, oldType, ., getLeastSupertype, (, resultType, ), ), ;, }, break, ;, case]
[setType, (, oldType, ==, null, ?, resultType, :, oldType, ., getLeastSupertype, (, resultType, ), ), ;, }, break, ;, case]
[:, oldType, ., getLeastSupertype, (, resultType, ), ), ;, }, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =]
[:, oldType, ., getLeastSupertype, (, resultType, ), ), ;, }, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =]
[;, }, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, left, ., getQualifiedName, (, ), ;, if, (]
[;, }, break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, left, ., getQualifiedName, (, ), ;, if, (]
[break, ;, case, Token, ., GETPROP, :, String, qualifiedName, =, left, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=]
[Token, ., GETPROP, :, String, qualifiedName, =, left, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {]
[Token, ., GETPROP, :, String, qualifiedName, =, left, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {]
[String, qualifiedName, =, left, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, scope, ., inferQualifiedSlot, (]
[=, left, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, scope, ., inferQualifiedSlot, (, left, ,]
[., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,]
[., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,]
[., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,]
[(, ), ;, if, (, qualifiedName, !=, null, ), {, scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,, leftType, ==]
[;, if, (, qualifiedName, !=, null, ), {, scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,, leftType, ==, null, ?]
[(, qualifiedName, !=, null, ), {, scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,, leftType, ==, null, ?, unknownType, :]
[!=, null, ), {, scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,, leftType, ==, null, ?, unknownType, :, leftType, ,]
[scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,, leftType, ==, null, ?, unknownType, :, leftType, ,, resultType, ), ;, }]
[scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,, leftType, ==, null, ?, unknownType, :, leftType, ,, resultType, ), ;, }]
[left, ,, qualifiedName, ,, leftType, ==, null, ?, unknownType, :, leftType, ,, resultType, ), ;, }, left, ., setJSType, (]
[,, leftType, ==, null, ?, unknownType, :, leftType, ,, resultType, ), ;, }, left, ., setJSType, (, resultType, ), ;]
[==, null, ?, unknownType, :, leftType, ,, resultType, ), ;, }, left, ., setJSType, (, resultType, ), ;, ensurePropertyDefined, (]
[?, unknownType, :, leftType, ,, resultType, ), ;, }, left, ., setJSType, (, resultType, ), ;, ensurePropertyDefined, (, left, ,]
[), ;, break, ;, }, }, private, void, ensurePropertyDefined, (, Node, getprop, ,, JSType, rightType, ), {, String, propName, =]
[), ;, break, ;, }, }, private, void, ensurePropertyDefined, (, Node, getprop, ,, JSType, rightType, ), {, String, propName, =]
[), ;, break, ;, }, }, private, void, ensurePropertyDefined, (, Node, getprop, ,, JSType, rightType, ), {, String, propName, =]
[JSType, rightType, ), {, String, propName, =, getprop, ., getLastChild, (, ), ., getString, (, ), ;, Node, obj, =]
[JSType, rightType, ), {, String, propName, =, getprop, ., getLastChild, (, ), ., getString, (, ), ;, Node, obj, =]
[getLastChild, (, ), ., getString, (, ), ;, Node, obj, =, getprop, ., getFirstChild, (, ), ;, JSType, nodeType, =]
[), ., getString, (, ), ;, Node, obj, =, getprop, ., getFirstChild, (, ), ;, JSType, nodeType, =, getJSType, (]
[Node, obj, =, getprop, ., getFirstChild, (, ), ;, JSType, nodeType, =, getJSType, (, obj, ), ;, ObjectType, objectType, =]
[Node, obj, =, getprop, ., getFirstChild, (, ), ;, JSType, nodeType, =, getJSType, (, obj, ), ;, ObjectType, objectType, =]
[., getFirstChild, (, ), ;, JSType, nodeType, =, getJSType, (, obj, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (]
[., getFirstChild, (, ), ;, JSType, nodeType, =, getJSType, (, obj, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (]
[(, obj, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (, nodeType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (]
[(, obj, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (, nodeType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (]
[), ;, ObjectType, objectType, =, ObjectType, ., cast, (, nodeType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objectType, ==]
[objectType, =, ObjectType, ., cast, (, nodeType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objectType, ==, null, ), {]
[objectType, =, ObjectType, ., cast, (, nodeType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objectType, ==, null, ), {]
[cast, (, nodeType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objectType, ==, null, ), {, registry, ., registerPropertyOnType, (]
[nodeType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objectType, ==, null, ), {, registry, ., registerPropertyOnType, (, propName, ,]
[(, objectType, ==, null, ), {, registry, ., registerPropertyOnType, (, propName, ,, nodeType, ), ;, }, else, {, if, (]
[(, objectType, ==, null, ), {, registry, ., registerPropertyOnType, (, propName, ,, nodeType, ), ;, }, else, {, if, (]
[(, objectType, ==, null, ), {, registry, ., registerPropertyOnType, (, propName, ,, nodeType, ), ;, }, else, {, if, (]
[registry, ., registerPropertyOnType, (, propName, ,, nodeType, ), ;, }, else, {, if, (, nodeType, ., isStruct, (, ), &&]
[., registerPropertyOnType, (, propName, ,, nodeType, ), ;, }, else, {, if, (, nodeType, ., isStruct, (, ), &&, !]
[., registerPropertyOnType, (, propName, ,, nodeType, ), ;, }, else, {, if, (, nodeType, ., isStruct, (, ), &&, !]
[,, nodeType, ), ;, }, else, {, if, (, nodeType, ., isStruct, (, ), &&, !, objectType, ., hasProperty, (]
[{, if, (, nodeType, ., isStruct, (, ), &&, !, objectType, ., hasProperty, (, propName, ), ), {, if, (]
[if, (, nodeType, ., isStruct, (, ), &&, !, objectType, ., hasProperty, (, propName, ), ), {, if, (, !]
[(, nodeType, ., isStruct, (, ), &&, !, objectType, ., hasProperty, (, propName, ), ), {, if, (, !, (]
[(, nodeType, ., isStruct, (, ), &&, !, objectType, ., hasProperty, (, propName, ), ), {, if, (, !, (]
[(, nodeType, ., isStruct, (, ), &&, !, objectType, ., hasProperty, (, propName, ), ), {, if, (, !, (]
[&&, !, objectType, ., hasProperty, (, propName, ), ), {, if, (, !, (, obj, ., isThis, (, ), &&]
[&&, !, objectType, ., hasProperty, (, propName, ), ), {, if, (, !, (, obj, ., isThis, (, ), &&]
[objectType, ., hasProperty, (, propName, ), ), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (]
[objectType, ., hasProperty, (, propName, ), ), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (]
[(, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, ), ), ), {, return, ;, }, }, if, (]
[., getRootNode, (, ), ), ., isConstructor, (, ), ), ), {, return, ;, }, }, if, (, ensurePropertyDeclaredHelper, (]
[(, ), ), ., isConstructor, (, ), ), ), {, return, ;, }, }, if, (, ensurePropertyDeclaredHelper, (, getprop, ,]
[{, return, ;, }, }, if, (, ensurePropertyDeclaredHelper, (, getprop, ,, objectType, ), ), {, return, ;, }, if, (]
[return, ;, }, }, if, (, ensurePropertyDeclaredHelper, (, getprop, ,, objectType, ), ), {, return, ;, }, if, (, !]
[return, ;, }, }, if, (, ensurePropertyDeclaredHelper, (, getprop, ,, objectType, ), ), {, return, ;, }, if, (, !]
[if, (, ensurePropertyDeclaredHelper, (, getprop, ,, objectType, ), ), {, return, ;, }, if, (, !, objectType, ., isPropertyTypeDeclared, (]
[objectType, ), ), {, return, ;, }, if, (, !, objectType, ., isPropertyTypeDeclared, (, propName, ), ), {, if, (]
[objectType, ), ), {, return, ;, }, if, (, !, objectType, ., isPropertyTypeDeclared, (, propName, ), ), {, if, (]
[objectType, ), ), {, return, ;, }, if, (, !, objectType, ., isPropertyTypeDeclared, (, propName, ), ), {, if, (]
[return, ;, }, if, (, !, objectType, ., isPropertyTypeDeclared, (, propName, ), ), {, if, (, objectType, ., hasProperty, (]
[if, (, !, objectType, ., isPropertyTypeDeclared, (, propName, ), ), {, if, (, objectType, ., hasProperty, (, propName, ), ||]
[(, !, objectType, ., isPropertyTypeDeclared, (, propName, ), ), {, if, (, objectType, ., hasProperty, (, propName, ), ||, !]
[(, !, objectType, ., isPropertyTypeDeclared, (, propName, ), ), {, if, (, objectType, ., hasProperty, (, propName, ), ||, !]
[{, if, (, objectType, ., hasProperty, (, propName, ), ||, !, objectType, ., isInstanceType, (, ), ), {, if, (]
[{, if, (, objectType, ., hasProperty, (, propName, ), ||, !, objectType, ., isInstanceType, (, ), ), {, if, (]
[., hasProperty, (, propName, ), ||, !, objectType, ., isInstanceType, (, ), ), {, if, (, "prototype", ., equals, (]
[), ||, !, objectType, ., isInstanceType, (, ), ), {, if, (, "prototype", ., equals, (, propName, ), ), {]
[), ||, !, objectType, ., isInstanceType, (, ), ), {, if, (, "prototype", ., equals, (, propName, ), ), {]
[., isInstanceType, (, ), ), {, if, (, "prototype", ., equals, (, propName, ), ), {, objectType, ., defineDeclaredProperty, (]
[(, ), ), {, if, (, "prototype", ., equals, (, propName, ), ), {, objectType, ., defineDeclaredProperty, (, propName, ,]
[), {, if, (, "prototype", ., equals, (, propName, ), ), {, objectType, ., defineDeclaredProperty, (, propName, ,, rightType, ,]
[equals, (, propName, ), ), {, objectType, ., defineDeclaredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {]
[equals, (, propName, ), ), {, objectType, ., defineDeclaredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {]
[), {, objectType, ., defineDeclaredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {, objectType, ., defineInferredProperty, (]
[objectType, ., defineDeclaredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {, objectType, ., defineInferredProperty, (, propName, ,]
[defineDeclaredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,]
[;, }, else, {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, }, else, if, (]
[;, }, else, {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, }, else, if, (]
[;, }, else, {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, }, else, if, (]
[defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, }, else, if, (, obj, ., isThis, (, ), &&]
[defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, }, else, if, (, obj, ., isThis, (, ), &&]
[propName, ,, rightType, ,, getprop, ), ;, }, }, else, if, (, obj, ., isThis, (, ), &&, getJSType, (]
[propName, ,, rightType, ,, getprop, ), ;, }, }, else, if, (, obj, ., isThis, (, ), &&, getJSType, (]
[obj, ., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, ), ), {]
[obj, ., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, ), ), {]
[), &&, getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, ), ), {, objectType, ., defineInferredProperty, (]
[getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, ), ), {, objectType, ., defineInferredProperty, (, propName, ,]
[syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, ), ), {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,]
[., isConstructor, (, ), ), {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {]
[., isConstructor, (, ), ), {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {]
[), {, objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {, registry, ., registerPropertyOnType, (]
[objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, ), ;, }, else, {, registry, ., registerPropertyOnType, (, propName, ,]
[propName, ,, objectType, ), ;, }, }, }, }, private, void, ensurePropertyDeclared, (, Node, getprop, ), {, ObjectType, ownerType, =]
[propName, ,, objectType, ), ;, }, }, }, }, private, void, ensurePropertyDeclared, (, Node, getprop, ), {, ObjectType, ownerType, =]
[;, }, }, }, }, private, void, ensurePropertyDeclared, (, Node, getprop, ), {, ObjectType, ownerType, =, ObjectType, ., cast, (]
[;, }, }, }, }, private, void, ensurePropertyDeclared, (, Node, getprop, ), {, ObjectType, ownerType, =, ObjectType, ., cast, (]
[}, }, }, private, void, ensurePropertyDeclared, (, Node, getprop, ), {, ObjectType, ownerType, =, ObjectType, ., cast, (, getJSType, (]
[}, }, }, private, void, ensurePropertyDeclared, (, Node, getprop, ), {, ObjectType, ownerType, =, ObjectType, ., cast, (, getJSType, (]
[ObjectType, ., cast, (, getJSType, (, getprop, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (]
[ObjectType, ., cast, (, getJSType, (, getprop, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (]
[cast, (, getJSType, (, getprop, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, ownerType, !=]
[(, getprop, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, ownerType, !=, null, ), {]
[., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, ownerType, !=, null, ), {, ensurePropertyDeclaredHelper, (]
[(, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, ownerType, !=, null, ), {, ensurePropertyDeclaredHelper, (, getprop, ,]
[,, ownerType, ), ;, }, }, private, boolean, ensurePropertyDeclaredHelper, (, Node, getprop, ,, ObjectType, objectType, ), {, String, propName, =]
[,, ownerType, ), ;, }, }, private, boolean, ensurePropertyDeclaredHelper, (, Node, getprop, ,, ObjectType, objectType, ), {, String, propName, =]
[,, ownerType, ), ;, }, }, private, boolean, ensurePropertyDeclaredHelper, (, Node, getprop, ,, ObjectType, objectType, ), {, String, propName, =]
[ObjectType, objectType, ), {, String, propName, =, getprop, ., getLastChild, (, ), ., getString, (, ), ;, String, qName, =]
[ObjectType, objectType, ), {, String, propName, =, getprop, ., getLastChild, (, ), ., getString, (, ), ;, String, qName, =]
[., getLastChild, (, ), ., getString, (, ), ;, String, qName, =, getprop, ., getQualifiedName, (, ), ;, if, (]
[., getLastChild, (, ), ., getString, (, ), ;, String, qName, =, getprop, ., getQualifiedName, (, ), ;, if, (]
[(, ), ., getString, (, ), ;, String, qName, =, getprop, ., getQualifiedName, (, ), ;, if, (, qName, !=]
[;, String, qName, =, getprop, ., getQualifiedName, (, ), ;, if, (, qName, !=, null, ), {, Var, var, =]
[;, String, qName, =, getprop, ., getQualifiedName, (, ), ;, if, (, qName, !=, null, ), {, Var, var, =]
[getprop, ., getQualifiedName, (, ), ;, if, (, qName, !=, null, ), {, Var, var, =, syntacticScope, ., getVar, (]
[;, if, (, qName, !=, null, ), {, Var, var, =, syntacticScope, ., getVar, (, qName, ), ;, if, (]
[;, if, (, qName, !=, null, ), {, Var, var, =, syntacticScope, ., getVar, (, qName, ), ;, if, (]
[;, if, (, qName, !=, null, ), {, Var, var, =, syntacticScope, ., getVar, (, qName, ), ;, if, (]
[(, qName, !=, null, ), {, Var, var, =, syntacticScope, ., getVar, (, qName, ), ;, if, (, var, !=]
[!=, null, ), {, Var, var, =, syntacticScope, ., getVar, (, qName, ), ;, if, (, var, !=, null, &&]
[null, ), {, Var, var, =, syntacticScope, ., getVar, (, qName, ), ;, if, (, var, !=, null, &&, !]
[null, ), {, Var, var, =, syntacticScope, ., getVar, (, qName, ), ;, if, (, var, !=, null, &&, !]
[(, qName, ), ;, if, (, var, !=, null, &&, !, var, ., isTypeInferred, (, ), ), {, if, (]
[(, qName, ), ;, if, (, var, !=, null, &&, !, var, ., isTypeInferred, (, ), ), {, if, (]
[(, qName, ), ;, if, (, var, !=, null, &&, !, var, ., isTypeInferred, (, ), ), {, if, (]
[if, (, var, !=, null, &&, !, var, ., isTypeInferred, (, ), ), {, if, (, propName, ., equals, (]
[!=, null, &&, !, var, ., isTypeInferred, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ||]
[null, &&, !, var, ., isTypeInferred, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ||, (]
[null, &&, !, var, ., isTypeInferred, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ||, (]
[&&, !, var, ., isTypeInferred, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ||, (, !]
[&&, !, var, ., isTypeInferred, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ||, (, !]
[isTypeInferred, (, ), ), {, if, (, propName, ., equals, (, "prototype", ), ||, (, !, objectType, ., hasOwnProperty, (]
[), {, if, (, propName, ., equals, (, "prototype", ), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&]
[{, if, (, propName, ., equals, (, "prototype", ), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&, (]
[{, if, (, propName, ., equals, (, "prototype", ), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&, (]
[if, (, propName, ., equals, (, "prototype", ), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&, (, !]
[if, (, propName, ., equals, (, "prototype", ), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&, (, !]
["prototype", ), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&, (, !, objectType, ., isInstanceType, (, ), ||]
[), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&, (, !, objectType, ., isInstanceType, (, ), ||, (]
[), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&, (, !, objectType, ., isInstanceType, (, ), ||, (]
[), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&, (, !, objectType, ., isInstanceType, (, ), ||, (]
[hasOwnProperty, (, propName, ), &&, (, !, objectType, ., isInstanceType, (, ), ||, (, var, ., isExtern, (, ), &&]
[(, propName, ), &&, (, !, objectType, ., isInstanceType, (, ), ||, (, var, ., isExtern, (, ), &&, !]
[(, propName, ), &&, (, !, objectType, ., isInstanceType, (, ), ||, (, var, ., isExtern, (, ), &&, !]
[||, (, var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, ), ), ), ), ), {, return]
[||, (, var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, ), ), ), ), ), {, return]
[isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, ), ), ), ), ), {, return, objectType, ., defineDeclaredProperty, (]
[), &&, !, objectType, ., isNativeObjectType, (, ), ), ), ), ), {, return, objectType, ., defineDeclaredProperty, (, propName, ,]
[), &&, !, objectType, ., isNativeObjectType, (, ), ), ), ), ), {, return, objectType, ., defineDeclaredProperty, (, propName, ,]
[(, ), ), ), ), ), {, return, objectType, ., defineDeclaredProperty, (, propName, ,, var, ., getType, (, ), ,]
[return, objectType, ., defineDeclaredProperty, (, propName, ,, var, ., getType, (, ), ,, getprop, ), ;, }, }, }, return]
[}, }, return, false, ;, }, private, FlowScope, traverseName, (, Node, n, ,, FlowScope, scope, ), {, String, varName, =]
[}, }, return, false, ;, }, private, FlowScope, traverseName, (, Node, n, ,, FlowScope, scope, ), {, String, varName, =]
[(, Node, n, ,, FlowScope, scope, ), {, String, varName, =, n, ., getString, (, ), ;, Node, value, =]
[(, Node, n, ,, FlowScope, scope, ), {, String, varName, =, n, ., getString, (, ), ;, Node, value, =]
[varName, =, n, ., getString, (, ), ;, Node, value, =, n, ., getFirstChild, (, ), ;, JSType, type, =]
[varName, =, n, ., getString, (, ), ;, Node, value, =, n, ., getFirstChild, (, ), ;, JSType, type, =]
[Node, value, =, n, ., getFirstChild, (, ), ;, JSType, type, =, n, ., getJSType, (, ), ;, if, (]
[Node, value, =, n, ., getFirstChild, (, ), ;, JSType, type, =, n, ., getJSType, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ;, JSType, type, =, n, ., getJSType, (, ), ;, if, (, value, !=]
[getFirstChild, (, ), ;, JSType, type, =, n, ., getJSType, (, ), ;, if, (, value, !=, null, ), {]
[), ;, JSType, type, =, n, ., getJSType, (, ), ;, if, (, value, !=, null, ), {, scope, =]
[JSType, type, =, n, ., getJSType, (, ), ;, if, (, value, !=, null, ), {, scope, =, traverse, (]
[=, n, ., getJSType, (, ), ;, if, (, value, !=, null, ), {, scope, =, traverse, (, value, ,]
[getJSType, (, ), ;, if, (, value, !=, null, ), {, scope, =, traverse, (, value, ,, scope, ), ;]
[), ;, if, (, value, !=, null, ), {, scope, =, traverse, (, value, ,, scope, ), ;, updateScopeForTypeChange, (]
[if, (, value, !=, null, ), {, scope, =, traverse, (, value, ,, scope, ), ;, updateScopeForTypeChange, (, scope, ,]
[value, !=, null, ), {, scope, =, traverse, (, value, ,, scope, ), ;, updateScopeForTypeChange, (, scope, ,, n, ,]
[value, !=, null, ), {, scope, =, traverse, (, value, ,, scope, ), ;, updateScopeForTypeChange, (, scope, ,, n, ,]
[=, traverse, (, value, ,, scope, ), ;, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,]
[(, value, ,, scope, ), ;, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,, getJSType, (]
[;, updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,, getJSType, (, value, ), ), ;, return]
[), ,, getJSType, (, value, ), ), ;, return, scope, ;, }, else, {, StaticSlot, <, JSType, >, var, =]
[), ,, getJSType, (, value, ), ), ;, return, scope, ;, }, else, {, StaticSlot, <, JSType, >, var, =]
[value, ), ), ;, return, scope, ;, }, else, {, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (]
[scope, ;, }, else, {, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (, varName, ), ;, if, (]
[scope, ;, }, else, {, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (, varName, ), ;, if, (]
[}, else, {, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (, varName, ), ;, if, (, var, !=]
[>, var, =, scope, ., getSlot, (, varName, ), ;, if, (, var, !=, null, ), {, boolean, isInferred, =]
[>, var, =, scope, ., getSlot, (, varName, ), ;, if, (, var, !=, null, ), {, boolean, isInferred, =]
[;, if, (, var, !=, null, ), {, boolean, isInferred, =, var, ., isTypeInferred, (, ), ;, boolean, unflowable, =]
[;, if, (, var, !=, null, ), {, boolean, isInferred, =, var, ., isTypeInferred, (, ), ;, boolean, unflowable, =]
[(, var, !=, null, ), {, boolean, isInferred, =, var, ., isTypeInferred, (, ), ;, boolean, unflowable, =, isInferred, &&]
[!=, null, ), {, boolean, isInferred, =, var, ., isTypeInferred, (, ), ;, boolean, unflowable, =, isInferred, &&, isUnflowable, (]
[!=, null, ), {, boolean, isInferred, =, var, ., isTypeInferred, (, ), ;, boolean, unflowable, =, isInferred, &&, isUnflowable, (]
[boolean, isInferred, =, var, ., isTypeInferred, (, ), ;, boolean, unflowable, =, isInferred, &&, isUnflowable, (, syntacticScope, ., getVar, (]
[), ;, boolean, unflowable, =, isInferred, &&, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ;, boolean, nonLocalInferredSlot, =]
[=, isInferred, &&, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ;, boolean, nonLocalInferredSlot, =, false, ;, if, (]
[=, isInferred, &&, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ;, boolean, nonLocalInferredSlot, =, false, ;, if, (]
[&&, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ;, boolean, nonLocalInferredSlot, =, false, ;, if, (, isInferred, &&]
[&&, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ;, boolean, nonLocalInferredSlot, =, false, ;, if, (, isInferred, &&]
[;, boolean, nonLocalInferredSlot, =, false, ;, if, (, isInferred, &&, syntacticScope, ., isLocal, (, ), ), {, Var, maybeOuterVar, =]
[;, boolean, nonLocalInferredSlot, =, false, ;, if, (, isInferred, &&, syntacticScope, ., isLocal, (, ), ), {, Var, maybeOuterVar, =]
[;, boolean, nonLocalInferredSlot, =, false, ;, if, (, isInferred, &&, syntacticScope, ., isLocal, (, ), ), {, Var, maybeOuterVar, =]
[isInferred, &&, syntacticScope, ., isLocal, (, ), ), {, Var, maybeOuterVar, =, syntacticScope, ., getParent, (, ), ., getVar, (]
[(, ), ), {, Var, maybeOuterVar, =, syntacticScope, ., getParent, (, ), ., getVar, (, varName, ), ;, if, (]
[(, ), ), {, Var, maybeOuterVar, =, syntacticScope, ., getParent, (, ), ., getVar, (, varName, ), ;, if, (]
[(, ), ), {, Var, maybeOuterVar, =, syntacticScope, ., getParent, (, ), ., getVar, (, varName, ), ;, if, (]
[), {, Var, maybeOuterVar, =, syntacticScope, ., getParent, (, ), ., getVar, (, varName, ), ;, if, (, var, ==]
[Var, maybeOuterVar, =, syntacticScope, ., getParent, (, ), ., getVar, (, varName, ), ;, if, (, var, ==, maybeOuterVar, &&]
[maybeOuterVar, =, syntacticScope, ., getParent, (, ), ., getVar, (, varName, ), ;, if, (, var, ==, maybeOuterVar, &&, !]
[maybeOuterVar, =, syntacticScope, ., getParent, (, ), ., getVar, (, varName, ), ;, if, (, var, ==, maybeOuterVar, &&, !]
[., getVar, (, varName, ), ;, if, (, var, ==, maybeOuterVar, &&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, ), ), {]
[(, varName, ), ;, if, (, var, ==, maybeOuterVar, &&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, ), ), {, nonLocalInferredSlot, =]
[var, ==, maybeOuterVar, &&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, ), ), {, nonLocalInferredSlot, =, true, ;, }, }, if, (]
[var, ==, maybeOuterVar, &&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, ), ), {, nonLocalInferredSlot, =, true, ;, }, }, if, (]
[==, maybeOuterVar, &&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, ), ), {, nonLocalInferredSlot, =, true, ;, }, }, if, (, !]
[&&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, ), ), {, nonLocalInferredSlot, =, true, ;, }, }, if, (, !, unflowable, &&]
[!, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, ), ), {, nonLocalInferredSlot, =, true, ;, }, }, if, (, !, unflowable, &&, !]
[isMarkedAssignedExactlyOnce, (, ), ), {, nonLocalInferredSlot, =, true, ;, }, }, if, (, !, unflowable, &&, !, nonLocalInferredSlot, ), {]
[), ), {, nonLocalInferredSlot, =, true, ;, }, }, if, (, !, unflowable, &&, !, nonLocalInferredSlot, ), {, type, =]
[), ), {, nonLocalInferredSlot, =, true, ;, }, }, if, (, !, unflowable, &&, !, nonLocalInferredSlot, ), {, type, =]
[}, if, (, !, unflowable, &&, !, nonLocalInferredSlot, ), {, type, =, var, ., getType, (, ), ;, if, (]
[}, if, (, !, unflowable, &&, !, nonLocalInferredSlot, ), {, type, =, var, ., getType, (, ), ;, if, (]
[(, !, unflowable, &&, !, nonLocalInferredSlot, ), {, type, =, var, ., getType, (, ), ;, if, (, type, ==]
[&&, !, nonLocalInferredSlot, ), {, type, =, var, ., getType, (, ), ;, if, (, type, ==, null, ), {]
[nonLocalInferredSlot, ), {, type, =, var, ., getType, (, ), ;, if, (, type, ==, null, ), {, type, =]
[., getType, (, ), ;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, }, }, }]
[., getType, (, ), ;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, }, }, }]
[;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, }, }, }, n, ., setJSType, (]
[==, null, ), {, type, =, unknownType, ;, }, }, }, }, n, ., setJSType, (, type, ), ;, return]
[setJSType, (, type, ), ;, return, scope, ;, }, private, FlowScope, traverseArrayLiteral, (, Node, n, ,, FlowScope, scope, ), {]
[type, ), ;, return, scope, ;, }, private, FlowScope, traverseArrayLiteral, (, Node, n, ,, FlowScope, scope, ), {, scope, =]
[;, return, scope, ;, }, private, FlowScope, traverseArrayLiteral, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (]
[scope, ;, }, private, FlowScope, traverseArrayLiteral, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,]
[private, FlowScope, traverseArrayLiteral, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[private, FlowScope, traverseArrayLiteral, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (]
[,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (]
[scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getNativeType, (, ARRAY_TYPE, ), ), ;, return]
[), ;, return, scope, ;, }, private, FlowScope, traverseObjectLiteral, (, Node, n, ,, FlowScope, scope, ), {, JSType, type, =]
[), ;, return, scope, ;, }, private, FlowScope, traverseObjectLiteral, (, Node, n, ,, FlowScope, scope, ), {, JSType, type, =]
[private, FlowScope, traverseObjectLiteral, (, Node, n, ,, FlowScope, scope, ), {, JSType, type, =, n, ., getJSType, (, ), ;]
[private, FlowScope, traverseObjectLiteral, (, Node, n, ,, FlowScope, scope, ), {, JSType, type, =, n, ., getJSType, (, ), ;]
[Node, n, ,, FlowScope, scope, ), {, JSType, type, =, n, ., getJSType, (, ), ;, Preconditions, ., checkNotNull, (]
[type, =, n, ., getJSType, (, ), ;, Preconditions, ., checkNotNull, (, type, ), ;, for, (, Node, name, =]
[type, =, n, ., getJSType, (, ), ;, Preconditions, ., checkNotNull, (, type, ), ;, for, (, Node, name, =]
[), ;, Preconditions, ., checkNotNull, (, type, ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;]
[), ;, Preconditions, ., checkNotNull, (, type, ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;]
[Preconditions, ., checkNotNull, (, type, ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=]
[checkNotNull, (, type, ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;]
[type, ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =]
[type, ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =]
[=, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, scope, =]
[(, ), ;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, scope, =, traverse, (]
[(, ), ;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, scope, =, traverse, (]
[;, name, =, name, ., getNext, (, ), ), {, scope, =, traverse, (, name, ., getFirstChild, (, ), ,]
[), ), {, scope, =, traverse, (, name, ., getFirstChild, (, ), ,, scope, ), ;, }, ObjectType, objectType, =]
[), ), {, scope, =, traverse, (, name, ., getFirstChild, (, ), ,, scope, ), ;, }, ObjectType, objectType, =]
[=, traverse, (, name, ., getFirstChild, (, ), ,, scope, ), ;, }, ObjectType, objectType, =, ObjectType, ., cast, (]
[getFirstChild, (, ), ,, scope, ), ;, }, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[getFirstChild, (, ), ,, scope, ), ;, }, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[), ,, scope, ), ;, }, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==]
[;, }, ObjectType, objectType, =, ObjectType, ., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, return]
[., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, return, scope, ;, }, boolean, hasLendsName, =]
[., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, return, scope, ;, }, boolean, hasLendsName, =]
[., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, return, scope, ;, }, boolean, hasLendsName, =]
[., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, return, scope, ;, }, boolean, hasLendsName, =]
[if, (, objectType, ==, null, ), {, return, scope, ;, }, boolean, hasLendsName, =, n, ., getJSDocInfo, (, ), !=]
[objectType, ==, null, ), {, return, scope, ;, }, boolean, hasLendsName, =, n, ., getJSDocInfo, (, ), !=, null, &&]
[objectType, ==, null, ), {, return, scope, ;, }, boolean, hasLendsName, =, n, ., getJSDocInfo, (, ), !=, null, &&]
[objectType, ==, null, ), {, return, scope, ;, }, boolean, hasLendsName, =, n, ., getJSDocInfo, (, ), !=, null, &&]
[objectType, ==, null, ), {, return, scope, ;, }, boolean, hasLendsName, =, n, ., getJSDocInfo, (, ), !=, null, &&]
[hasLendsName, =, n, ., getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., getLendsName, (, ), !=]
[getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., getLendsName, (, ), !=, null, ;, if, (]
[getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., getLendsName, (, ), !=, null, ;, if, (]
[getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., getLendsName, (, ), !=, null, ;, if, (]
[n, ., getJSDocInfo, (, ), ., getLendsName, (, ), !=, null, ;, if, (, objectType, ., hasReferenceName, (, ), &&]
[., getJSDocInfo, (, ), ., getLendsName, (, ), !=, null, ;, if, (, objectType, ., hasReferenceName, (, ), &&, !]
[., getLendsName, (, ), !=, null, ;, if, (, objectType, ., hasReferenceName, (, ), &&, !, hasLendsName, ), {, return]
[;, if, (, objectType, ., hasReferenceName, (, ), &&, !, hasLendsName, ), {, return, scope, ;, }, String, qObjName, =]
[;, if, (, objectType, ., hasReferenceName, (, ), &&, !, hasLendsName, ), {, return, scope, ;, }, String, qObjName, =]
[., hasReferenceName, (, ), &&, !, hasLendsName, ), {, return, scope, ;, }, String, qObjName, =, NodeUtil, ., getBestLValueName, (]
[., hasReferenceName, (, ), &&, !, hasLendsName, ), {, return, scope, ;, }, String, qObjName, =, NodeUtil, ., getBestLValueName, (]
[&&, !, hasLendsName, ), {, return, scope, ;, }, String, qObjName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (]
[String, qObjName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), ), ;, for, (, Node, name, =]
[String, qObjName, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), ), ;, for, (, Node, name, =]
[(, NodeUtil, ., getBestLValue, (, n, ), ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;]
[(, NodeUtil, ., getBestLValue, (, n, ), ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;]
[., getBestLValue, (, n, ), ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=]
[(, n, ), ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;]
[), ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =]
[), ), ;, for, (, Node, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =]
[getFirstChild, (, ), ;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, Node, value, =]
[getFirstChild, (, ), ;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, Node, value, =]
[=, name, ., getNext, (, ), ), {, Node, value, =, name, ., getFirstChild, (, ), ;, String, memberName, =]
[=, name, ., getNext, (, ), ), {, Node, value, =, name, ., getFirstChild, (, ), ;, String, memberName, =]
[(, ), ), {, Node, value, =, name, ., getFirstChild, (, ), ;, String, memberName, =, NodeUtil, ., getObjectLitKeyName, (]
[value, =, name, ., getFirstChild, (, ), ;, String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, name, ), ;, if, (]
[value, =, name, ., getFirstChild, (, ), ;, String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, name, ), ;, if, (]
[name, ., getFirstChild, (, ), ;, String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, name, ), ;, if, (, memberName, !=]
[String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, name, ), ;, if, (, memberName, !=, null, ), {, JSType, rawValueType, =]
[String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, name, ), ;, if, (, memberName, !=, null, ), {, JSType, rawValueType, =]
[String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, name, ), ;, if, (, memberName, !=, null, ), {, JSType, rawValueType, =]
[!=, null, ), {, JSType, rawValueType, =, name, ., getFirstChild, (, ), ., getJSType, (, ), ;, JSType, valueType, =]
[!=, null, ), {, JSType, rawValueType, =, name, ., getFirstChild, (, ), ., getJSType, (, ), ;, JSType, valueType, =]
[JSType, rawValueType, =, name, ., getFirstChild, (, ), ., getJSType, (, ), ;, JSType, valueType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (]
[=, name, ., getFirstChild, (, ), ., getJSType, (, ), ;, JSType, valueType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, name, ,]
[), ., getJSType, (, ), ;, JSType, valueType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, name, ,, rawValueType, ), ;, if, (]
[), ., getJSType, (, ), ;, JSType, valueType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, name, ,, rawValueType, ), ;, if, (]
[getJSType, (, ), ;, JSType, valueType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, name, ,, rawValueType, ), ;, if, (, valueType, ==]
[;, JSType, valueType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, name, ,, rawValueType, ), ;, if, (, valueType, ==, null, ), {]
[valueType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, name, ,, rawValueType, ), ;, if, (, valueType, ==, null, ), {, valueType, =]
[., getObjectLitKeyTypeFromValueType, (, name, ,, rawValueType, ), ;, if, (, valueType, ==, null, ), {, valueType, =, unknownType, ;, }]
[., getObjectLitKeyTypeFromValueType, (, name, ,, rawValueType, ), ;, if, (, valueType, ==, null, ), {, valueType, =, unknownType, ;, }]
[,, rawValueType, ), ;, if, (, valueType, ==, null, ), {, valueType, =, unknownType, ;, }, objectType, ., defineInferredProperty, (]
[), ;, if, (, valueType, ==, null, ), {, valueType, =, unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,]
[if, (, valueType, ==, null, ), {, valueType, =, unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,, valueType, ,]
[), {, valueType, =, unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,, valueType, ,, name, ), ;, if, (]
[), {, valueType, =, unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,, valueType, ,, name, ), ;, if, (]
[), {, valueType, =, unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,, valueType, ,, name, ), ;, if, (]
[valueType, =, unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,, valueType, ,, name, ), ;, if, (, qObjName, !=]
[unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,, valueType, ,, name, ), ;, if, (, qObjName, !=, null, &&]
[unknownType, ;, }, objectType, ., defineInferredProperty, (, memberName, ,, valueType, ,, name, ), ;, if, (, qObjName, !=, null, &&]
[,, name, ), ;, if, (, qObjName, !=, null, &&, name, ., isStringKey, (, ), ), {, String, qKeyName, =]
[,, name, ), ;, if, (, qObjName, !=, null, &&, name, ., isStringKey, (, ), ), {, String, qKeyName, =]
[,, name, ), ;, if, (, qObjName, !=, null, &&, name, ., isStringKey, (, ), ), {, String, qKeyName, =]
[), ;, if, (, qObjName, !=, null, &&, name, ., isStringKey, (, ), ), {, String, qKeyName, =, qObjName, +]
[if, (, qObjName, !=, null, &&, name, ., isStringKey, (, ), ), {, String, qKeyName, =, qObjName, +, ".", +]
[&&, name, ., isStringKey, (, ), ), {, String, qKeyName, =, qObjName, +, ".", +, memberName, ;, Var, var, =]
[&&, name, ., isStringKey, (, ), ), {, String, qKeyName, =, qObjName, +, ".", +, memberName, ;, Var, var, =]
[(, ), ), {, String, qKeyName, =, qObjName, +, ".", +, memberName, ;, Var, var, =, syntacticScope, ., getVar, (]
[=, qObjName, +, ".", +, memberName, ;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, ), ;, JSType, oldType, =]
[=, qObjName, +, ".", +, memberName, ;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, ), ;, JSType, oldType, =]
[=, qObjName, +, ".", +, memberName, ;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, ), ;, JSType, oldType, =]
[+, ".", +, memberName, ;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, ), ;, JSType, oldType, =, var, ==]
[+, memberName, ;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, ), ;, JSType, oldType, =, var, ==, null, ?]
[;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, ), ;, JSType, oldType, =, var, ==, null, ?, null, :]
[;, Var, var, =, syntacticScope, ., getVar, (, qKeyName, ), ;, JSType, oldType, =, var, ==, null, ?, null, :]
[qKeyName, ), ;, JSType, oldType, =, var, ==, null, ?, null, :, var, ., getType, (, ), ;, if, (]
[qKeyName, ), ;, JSType, oldType, =, var, ==, null, ?, null, :, var, ., getType, (, ), ;, if, (]
[qKeyName, ), ;, JSType, oldType, =, var, ==, null, ?, null, :, var, ., getType, (, ), ;, if, (]
[;, JSType, oldType, =, var, ==, null, ?, null, :, var, ., getType, (, ), ;, if, (, var, !=]
[oldType, =, var, ==, null, ?, null, :, var, ., getType, (, ), ;, if, (, var, !=, null, &&]
[oldType, =, var, ==, null, ?, null, :, var, ., getType, (, ), ;, if, (, var, !=, null, &&]
[:, var, ., getType, (, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {]
[:, var, ., getType, (, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {]
[(, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, var, ., setType, (]
[(, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, var, ., setType, (]
[(, ), ;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, var, ., setType, (]
[;, if, (, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, var, ., setType, (, oldType, ==]
[(, var, !=, null, &&, var, ., isTypeInferred, (, ), ), {, var, ., setType, (, oldType, ==, null, ?]
[!=, null, &&, var, ., isTypeInferred, (, ), ), {, var, ., setType, (, oldType, ==, null, ?, valueType, :]
[!=, null, &&, var, ., isTypeInferred, (, ), ), {, var, ., setType, (, oldType, ==, null, ?, valueType, :]
[., isTypeInferred, (, ), ), {, var, ., setType, (, oldType, ==, null, ?, valueType, :, oldType, ., getLeastSupertype, (]
[{, var, ., setType, (, oldType, ==, null, ?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), ), ;, }]
[{, var, ., setType, (, oldType, ==, null, ?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), ), ;, }]
[(, oldType, ==, null, ?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), ), ;, }, scope, ., inferQualifiedSlot, (]
[==, null, ?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,]
[?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,]
[?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,]
[?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,]
[:, oldType, ., getLeastSupertype, (, oldType, ), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,, oldType, ==]
[., getLeastSupertype, (, oldType, ), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,, oldType, ==, null, ?]
[(, oldType, ), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,, oldType, ==, null, ?, unknownType, :]
[), ), ;, }, scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,, oldType, ==, null, ?, unknownType, :, oldType, ,]
[(, name, ,, qKeyName, ,, oldType, ==, null, ?, unknownType, :, oldType, ,, valueType, ), ;, }, }, else, {]
[(, name, ,, qKeyName, ,, oldType, ==, null, ?, unknownType, :, oldType, ,, valueType, ), ;, }, }, else, {]
[,, oldType, ==, null, ?, unknownType, :, oldType, ,, valueType, ), ;, }, }, else, {, n, ., setJSType, (]
[:, oldType, ,, valueType, ), ;, }, }, else, {, n, ., setJSType, (, unknownType, ), ;, }, }, return]
[}, }, return, scope, ;, }, private, FlowScope, traverseAdd, (, Node, n, ,, FlowScope, scope, ), {, Node, left, =]
[}, }, return, scope, ;, }, private, FlowScope, traverseAdd, (, Node, n, ,, FlowScope, scope, ), {, Node, left, =]
[(, Node, n, ,, FlowScope, scope, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, right, =]
[(, Node, n, ,, FlowScope, scope, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, right, =]
[), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, ), ;]
[Node, left, =, n, ., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, ), ;, scope, =]
[=, n, ., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, ), ;, scope, =, traverseChildren, (]
[., getFirstChild, (, ), ;, Node, right, =, left, ., getNext, (, ), ;, scope, =, traverseChildren, (, n, ,]
[right, =, left, ., getNext, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;, JSType, leftType, =]
[right, =, left, ., getNext, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;, JSType, leftType, =]
[=, traverseChildren, (, n, ,, scope, ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =]
[=, traverseChildren, (, n, ,, scope, ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =]
[leftType, =, left, ., getJSType, (, ), ;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, =]
[getJSType, (, ), ;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, =, unknownType, ;, if, (]
[getJSType, (, ), ;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, =, unknownType, ;, if, (]
[getJSType, (, ), ;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, =, unknownType, ;, if, (]
[), ;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, =, unknownType, ;, if, (, leftType, !=]
[JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, =, unknownType, ;, if, (, leftType, !=, null, &&]
[JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, =, unknownType, ;, if, (, leftType, !=, null, &&]
[=, right, ., getJSType, (, ), ;, JSType, type, =, unknownType, ;, if, (, leftType, !=, null, &&, rightType, !=]
[;, JSType, type, =, unknownType, ;, if, (, leftType, !=, null, &&, rightType, !=, null, ), {, boolean, leftIsUnknown, =]
[;, JSType, type, =, unknownType, ;, if, (, leftType, !=, null, &&, rightType, !=, null, ), {, boolean, leftIsUnknown, =]
[!=, null, &&, rightType, !=, null, ), {, boolean, leftIsUnknown, =, leftType, ., isUnknownType, (, ), ;, boolean, rightIsUnknown, =]
[!=, null, &&, rightType, !=, null, ), {, boolean, leftIsUnknown, =, leftType, ., isUnknownType, (, ), ;, boolean, rightIsUnknown, =]
[boolean, leftIsUnknown, =, leftType, ., isUnknownType, (, ), ;, boolean, rightIsUnknown, =, rightType, ., isUnknownType, (, ), ;, if, (]
[boolean, leftIsUnknown, =, leftType, ., isUnknownType, (, ), ;, boolean, rightIsUnknown, =, rightType, ., isUnknownType, (, ), ;, if, (]
[=, leftType, ., isUnknownType, (, ), ;, boolean, rightIsUnknown, =, rightType, ., isUnknownType, (, ), ;, if, (, leftIsUnknown, &&]
[isUnknownType, (, ), ;, boolean, rightIsUnknown, =, rightType, ., isUnknownType, (, ), ;, if, (, leftIsUnknown, &&, rightIsUnknown, ), {]
[), ;, boolean, rightIsUnknown, =, rightType, ., isUnknownType, (, ), ;, if, (, leftIsUnknown, &&, rightIsUnknown, ), {, type, =]
[., isUnknownType, (, ), ;, if, (, leftIsUnknown, &&, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (]
[., isUnknownType, (, ), ;, if, (, leftIsUnknown, &&, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (]
[isUnknownType, (, ), ;, if, (, leftIsUnknown, &&, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (, (]
[isUnknownType, (, ), ;, if, (, leftIsUnknown, &&, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (, (]
[(, ), ;, if, (, leftIsUnknown, &&, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (, (, !]
[;, if, (, leftIsUnknown, &&, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (, (, !, leftIsUnknown, &&]
[;, if, (, leftIsUnknown, &&, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (, (, !, leftIsUnknown, &&]
[{, type, =, unknownType, ;, }, else, if, (, (, !, leftIsUnknown, &&, leftType, ., isString, (, ), ), ||]
[type, =, unknownType, ;, }, else, if, (, (, !, leftIsUnknown, &&, leftType, ., isString, (, ), ), ||, (]
[type, =, unknownType, ;, }, else, if, (, (, !, leftIsUnknown, &&, leftType, ., isString, (, ), ), ||, (]
[=, unknownType, ;, }, else, if, (, (, !, leftIsUnknown, &&, leftType, ., isString, (, ), ), ||, (, !]
[;, }, else, if, (, (, !, leftIsUnknown, &&, leftType, ., isString, (, ), ), ||, (, !, rightIsUnknown, &&]
[;, }, else, if, (, (, !, leftIsUnknown, &&, leftType, ., isString, (, ), ), ||, (, !, rightIsUnknown, &&]
[&&, leftType, ., isString, (, ), ), ||, (, !, rightIsUnknown, &&, rightType, ., isString, (, ), ), ), {]
[., isString, (, ), ), ||, (, !, rightIsUnknown, &&, rightType, ., isString, (, ), ), ), {, type, =]
[(, ), ), ||, (, !, rightIsUnknown, &&, rightType, ., isString, (, ), ), ), {, type, =, getNativeType, (]
[&&, rightType, ., isString, (, ), ), ), {, type, =, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (]
[&&, rightType, ., isString, (, ), ), ), {, type, =, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (]
[., isString, (, ), ), ), {, type, =, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (, leftIsUnknown, ||]
[), ), ), {, type, =, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (, leftIsUnknown, ||, rightIsUnknown, ), {]
[), {, type, =, getNativeType, (, STRING_TYPE, ), ;, }, else, if, (, leftIsUnknown, ||, rightIsUnknown, ), {, type, =]
[STRING_TYPE, ), ;, }, else, if, (, leftIsUnknown, ||, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (]
[STRING_TYPE, ), ;, }, else, if, (, leftIsUnknown, ||, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (]
[;, }, else, if, (, leftIsUnknown, ||, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (, isAddedAsNumber, (]
[if, (, leftIsUnknown, ||, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (, isAddedAsNumber, (, leftType, ), &&]
[leftIsUnknown, ||, rightIsUnknown, ), {, type, =, unknownType, ;, }, else, if, (, isAddedAsNumber, (, leftType, ), &&, isAddedAsNumber, (]
[{, type, =, unknownType, ;, }, else, if, (, isAddedAsNumber, (, leftType, ), &&, isAddedAsNumber, (, rightType, ), ), {]
[=, unknownType, ;, }, else, if, (, isAddedAsNumber, (, leftType, ), &&, isAddedAsNumber, (, rightType, ), ), {, type, =]
[;, }, else, if, (, isAddedAsNumber, (, leftType, ), &&, isAddedAsNumber, (, rightType, ), ), {, type, =, getNativeType, (]
[(, leftType, ), &&, isAddedAsNumber, (, rightType, ), ), {, type, =, getNativeType, (, NUMBER_TYPE, ), ;, }, else, {]
[), &&, isAddedAsNumber, (, rightType, ), ), {, type, =, getNativeType, (, NUMBER_TYPE, ), ;, }, else, {, type, =]
[), &&, isAddedAsNumber, (, rightType, ), ), {, type, =, getNativeType, (, NUMBER_TYPE, ), ;, }, else, {, type, =]
[rightType, ), ), {, type, =, getNativeType, (, NUMBER_TYPE, ), ;, }, else, {, type, =, registry, ., createUnionType, (]
[), {, type, =, getNativeType, (, NUMBER_TYPE, ), ;, }, else, {, type, =, registry, ., createUnionType, (, STRING_TYPE, ,]
[(, NUMBER_TYPE, ), ;, }, else, {, type, =, registry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ), ;, }, }]
[(, NUMBER_TYPE, ), ;, }, else, {, type, =, registry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ), ;, }, }]
[}, else, {, type, =, registry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ), ;, }, }, n, ., setJSType, (]
[registry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ), ;, }, }, n, ., setJSType, (, type, ), ;, if, (]
[registry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ), ;, }, }, n, ., setJSType, (, type, ), ;, if, (]
[), ;, }, }, n, ., setJSType, (, type, ), ;, if, (, n, ., isAssignAdd, (, ), ), {]
[}, }, n, ., setJSType, (, type, ), ;, if, (, n, ., isAssignAdd, (, ), ), {, updateScopeForTypeChange, (]
[n, ., setJSType, (, type, ), ;, if, (, n, ., isAssignAdd, (, ), ), {, updateScopeForTypeChange, (, scope, ,]
[setJSType, (, type, ), ;, if, (, n, ., isAssignAdd, (, ), ), {, updateScopeForTypeChange, (, scope, ,, left, ,]
[type, ), ;, if, (, n, ., isAssignAdd, (, ), ), {, updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,]
[n, ., isAssignAdd, (, ), ), {, updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,, type, ), ;, }, return]
[,, leftType, ,, type, ), ;, }, return, scope, ;, }, private, boolean, isAddedAsNumber, (, JSType, type, ), {, return]
[,, leftType, ,, type, ), ;, }, return, scope, ;, }, private, boolean, isAddedAsNumber, (, JSType, type, ), {, return]
[), ;, }, return, scope, ;, }, private, boolean, isAddedAsNumber, (, JSType, type, ), {, return, type, ., isSubtype, (]
[), ;, }, return, scope, ;, }, private, boolean, isAddedAsNumber, (, JSType, type, ), {, return, type, ., isSubtype, (]
[scope, ;, }, private, boolean, isAddedAsNumber, (, JSType, type, ), {, return, type, ., isSubtype, (, registry, ., createUnionType, (]
[}, private, boolean, isAddedAsNumber, (, JSType, type, ), {, return, type, ., isSubtype, (, registry, ., createUnionType, (, VOID_TYPE, ,]
[boolean, isAddedAsNumber, (, JSType, type, ), {, return, type, ., isSubtype, (, registry, ., createUnionType, (, VOID_TYPE, ,, NULL_TYPE, ,]
[(, JSType, type, ), {, return, type, ., isSubtype, (, registry, ., createUnionType, (, VOID_TYPE, ,, NULL_TYPE, ,, NUMBER_VALUE_OR_OBJECT_TYPE, ,]
[type, ), {, return, type, ., isSubtype, (, registry, ., createUnionType, (, VOID_TYPE, ,, NULL_TYPE, ,, NUMBER_VALUE_OR_OBJECT_TYPE, ,, BOOLEAN_TYPE, ,]
[,, BOOLEAN_OBJECT_TYPE, ), ), ;, }, private, FlowScope, traverseHook, (, Node, n, ,, FlowScope, scope, ), {, Node, condition, =]
[,, BOOLEAN_OBJECT_TYPE, ), ), ;, }, private, FlowScope, traverseHook, (, Node, n, ,, FlowScope, scope, ), {, Node, condition, =]
[(, Node, n, ,, FlowScope, scope, ), {, Node, condition, =, n, ., getFirstChild, (, ), ;, Node, trueNode, =]
[(, Node, n, ,, FlowScope, scope, ), {, Node, condition, =, n, ., getFirstChild, (, ), ;, Node, trueNode, =]
[condition, =, n, ., getFirstChild, (, ), ;, Node, trueNode, =, condition, ., getNext, (, ), ;, Node, falseNode, =]
[condition, =, n, ., getFirstChild, (, ), ;, Node, trueNode, =, condition, ., getNext, (, ), ;, Node, falseNode, =]
[), ;, Node, trueNode, =, condition, ., getNext, (, ), ;, Node, falseNode, =, n, ., getLastChild, (, ), ;]
[Node, trueNode, =, condition, ., getNext, (, ), ;, Node, falseNode, =, n, ., getLastChild, (, ), ;, scope, =]
[=, condition, ., getNext, (, ), ;, Node, falseNode, =, n, ., getLastChild, (, ), ;, scope, =, traverse, (]
[., getNext, (, ), ;, Node, falseNode, =, n, ., getLastChild, (, ), ;, scope, =, traverse, (, condition, ,]
[falseNode, =, n, ., getLastChild, (, ), ;, scope, =, traverse, (, condition, ,, scope, ), ;, FlowScope, trueScope, =]
[falseNode, =, n, ., getLastChild, (, ), ;, scope, =, traverse, (, condition, ,, scope, ), ;, FlowScope, trueScope, =]
[getLastChild, (, ), ;, scope, =, traverse, (, condition, ,, scope, ), ;, FlowScope, trueScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (]
[), ;, scope, =, traverse, (, condition, ,, scope, ), ;, FlowScope, trueScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,]
[scope, =, traverse, (, condition, ,, scope, ), ;, FlowScope, trueScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,]
[scope, ), ;, FlowScope, trueScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, true, ), ;, FlowScope, falseScope, =]
[scope, ), ;, FlowScope, trueScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, true, ), ;, FlowScope, falseScope, =]
[trueScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, true, ), ;, FlowScope, falseScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (]
[reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, true, ), ;, FlowScope, falseScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,]
[getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, true, ), ;, FlowScope, falseScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,]
[,, scope, ,, true, ), ;, FlowScope, falseScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, false, ), ;]
[,, true, ), ;, FlowScope, falseScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, false, ), ;, traverse, (]
[), ;, FlowScope, falseScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, false, ), ;, traverse, (, trueNode, ,]
[), ;, FlowScope, falseScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, false, ), ;, traverse, (, trueNode, ,]
[getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, false, ), ;, traverse, (, trueNode, ,, trueScope, ., createChildFlowScope, (, ), ), ;]
[condition, ,, scope, ,, false, ), ;, traverse, (, trueNode, ,, trueScope, ., createChildFlowScope, (, ), ), ;, traverse, (]
[scope, ,, false, ), ;, traverse, (, trueNode, ,, trueScope, ., createChildFlowScope, (, ), ), ;, traverse, (, falseNode, ,]
[scope, ,, false, ), ;, traverse, (, trueNode, ,, trueScope, ., createChildFlowScope, (, ), ), ;, traverse, (, falseNode, ,]
[., createChildFlowScope, (, ), ), ;, traverse, (, falseNode, ,, falseScope, ., createChildFlowScope, (, ), ), ;, JSType, trueType, =]
[., createChildFlowScope, (, ), ), ;, traverse, (, falseNode, ,, falseScope, ., createChildFlowScope, (, ), ), ;, JSType, trueType, =]
[,, falseScope, ., createChildFlowScope, (, ), ), ;, JSType, trueType, =, trueNode, ., getJSType, (, ), ;, JSType, falseType, =]
[,, falseScope, ., createChildFlowScope, (, ), ), ;, JSType, trueType, =, trueNode, ., getJSType, (, ), ;, JSType, falseType, =]
[JSType, trueType, =, trueNode, ., getJSType, (, ), ;, JSType, falseType, =, falseNode, ., getJSType, (, ), ;, if, (]
[JSType, trueType, =, trueNode, ., getJSType, (, ), ;, JSType, falseType, =, falseNode, ., getJSType, (, ), ;, if, (]
[JSType, trueType, =, trueNode, ., getJSType, (, ), ;, JSType, falseType, =, falseNode, ., getJSType, (, ), ;, if, (]
[=, trueNode, ., getJSType, (, ), ;, JSType, falseType, =, falseNode, ., getJSType, (, ), ;, if, (, trueType, !=]
[., getJSType, (, ), ;, JSType, falseType, =, falseNode, ., getJSType, (, ), ;, if, (, trueType, !=, null, &&]
[., getJSType, (, ), ;, JSType, falseType, =, falseNode, ., getJSType, (, ), ;, if, (, trueType, !=, null, &&]
[(, ), ;, JSType, falseType, =, falseNode, ., getJSType, (, ), ;, if, (, trueType, !=, null, &&, falseType, !=]
[JSType, falseType, =, falseNode, ., getJSType, (, ), ;, if, (, trueType, !=, null, &&, falseType, !=, null, ), {]
[JSType, falseType, =, falseNode, ., getJSType, (, ), ;, if, (, trueType, !=, null, &&, falseType, !=, null, ), {]
[., getJSType, (, ), ;, if, (, trueType, !=, null, &&, falseType, !=, null, ), {, n, ., setJSType, (]
[., getJSType, (, ), ;, if, (, trueType, !=, null, &&, falseType, !=, null, ), {, n, ., setJSType, (]
[;, if, (, trueType, !=, null, &&, falseType, !=, null, ), {, n, ., setJSType, (, trueType, ., getLeastSupertype, (]
[falseType, !=, null, ), {, n, ., setJSType, (, trueType, ., getLeastSupertype, (, falseType, ), ), ;, }, else, {]
[falseType, !=, null, ), {, n, ., setJSType, (, trueType, ., getLeastSupertype, (, falseType, ), ), ;, }, else, {]
[{, n, ., setJSType, (, trueType, ., getLeastSupertype, (, falseType, ), ), ;, }, else, {, n, ., setJSType, (]
[trueType, ., getLeastSupertype, (, falseType, ), ), ;, }, else, {, n, ., setJSType, (, null, ), ;, }, return]
[trueType, ., getLeastSupertype, (, falseType, ), ), ;, }, else, {, n, ., setJSType, (, null, ), ;, }, return]
[}, return, scope, ., createChildFlowScope, (, ), ;, }, private, FlowScope, traverseCall, (, Node, n, ,, FlowScope, scope, ), {]
[scope, ., createChildFlowScope, (, ), ;, }, private, FlowScope, traverseCall, (, Node, n, ,, FlowScope, scope, ), {, scope, =]
[createChildFlowScope, (, ), ;, }, private, FlowScope, traverseCall, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (]
[), ;, }, private, FlowScope, traverseCall, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,]
[(, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, Node, left, =]
[(, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, Node, left, =]
[=, traverseChildren, (, n, ,, scope, ), ;, Node, left, =, n, ., getFirstChild, (, ), ;, JSType, functionType, =]
[=, traverseChildren, (, n, ,, scope, ), ;, Node, left, =, n, ., getFirstChild, (, ), ;, JSType, functionType, =]
[(, n, ,, scope, ), ;, Node, left, =, n, ., getFirstChild, (, ), ;, JSType, functionType, =, getJSType, (]
[n, ., getFirstChild, (, ), ;, JSType, functionType, =, getJSType, (, left, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[n, ., getFirstChild, (, ), ;, JSType, functionType, =, getJSType, (, left, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[(, left, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, functionType, ., isFunctionType, (, ), ), {, FunctionType, fnType, =]
[(, left, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, functionType, ., isFunctionType, (, ), ), {, FunctionType, fnType, =]
[), ;, if, (, functionType, ., isFunctionType, (, ), ), {, FunctionType, fnType, =, functionType, ., toMaybeFunctionType, (, ), ;]
[), ;, if, (, functionType, ., isFunctionType, (, ), ), {, FunctionType, fnType, =, functionType, ., toMaybeFunctionType, (, ), ;]
[functionType, ., isFunctionType, (, ), ), {, FunctionType, fnType, =, functionType, ., toMaybeFunctionType, (, ), ;, n, ., setJSType, (]
[functionType, ., isFunctionType, (, ), ), {, FunctionType, fnType, =, functionType, ., toMaybeFunctionType, (, ), ;, n, ., setJSType, (]
[FunctionType, fnType, =, functionType, ., toMaybeFunctionType, (, ), ;, n, ., setJSType, (, fnType, ., getReturnType, (, ), ), ;]
[=, functionType, ., toMaybeFunctionType, (, ), ;, n, ., setJSType, (, fnType, ., getReturnType, (, ), ), ;, backwardsInferenceFromCallSite, (]
[., toMaybeFunctionType, (, ), ;, n, ., setJSType, (, fnType, ., getReturnType, (, ), ), ;, backwardsInferenceFromCallSite, (, n, ,]
[setJSType, (, fnType, ., getReturnType, (, ), ), ;, backwardsInferenceFromCallSite, (, n, ,, fnType, ), ;, }, else, if, (]
[setJSType, (, fnType, ., getReturnType, (, ), ), ;, backwardsInferenceFromCallSite, (, n, ,, fnType, ), ;, }, else, if, (]
[getReturnType, (, ), ), ;, backwardsInferenceFromCallSite, (, n, ,, fnType, ), ;, }, else, if, (, functionType, ., isEquivalentTo, (]
[), ), ;, backwardsInferenceFromCallSite, (, n, ,, fnType, ), ;, }, else, if, (, functionType, ., isEquivalentTo, (, getNativeType, (]
[n, ,, fnType, ), ;, }, else, if, (, functionType, ., isEquivalentTo, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ), {]
[n, ,, fnType, ), ;, }, else, if, (, functionType, ., isEquivalentTo, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ), {]
[;, }, else, if, (, functionType, ., isEquivalentTo, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ), {, n, ., setJSType, (]
[else, if, (, functionType, ., isEquivalentTo, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ), {, n, ., setJSType, (, getNativeType, (]
[isEquivalentTo, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ), {, n, ., setJSType, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ;, }]
[getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ), {, n, ., setJSType, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ;, }, scope, =]
[CHECKED_UNKNOWN_TYPE, ), ), ), {, n, ., setJSType, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ;, }, scope, =, tightenTypesAfterAssertions, (]
[), ), {, n, ., setJSType, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ;, }, scope, =, tightenTypesAfterAssertions, (, scope, ,]
[., setJSType, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ), ;, }, scope, =, tightenTypesAfterAssertions, (, scope, ,, n, ), ;, return]
[), ;, return, scope, ;, }, private, FlowScope, tightenTypesAfterAssertions, (, FlowScope, scope, ,, Node, callNode, ), {, Node, left, =]
[), ;, return, scope, ;, }, private, FlowScope, tightenTypesAfterAssertions, (, FlowScope, scope, ,, Node, callNode, ), {, Node, left, =]
[(, FlowScope, scope, ,, Node, callNode, ), {, Node, left, =, callNode, ., getFirstChild, (, ), ;, Node, firstParam, =]
[(, FlowScope, scope, ,, Node, callNode, ), {, Node, left, =, callNode, ., getFirstChild, (, ), ;, Node, firstParam, =]
[left, =, callNode, ., getFirstChild, (, ), ;, Node, firstParam, =, left, ., getNext, (, ), ;, AssertionFunctionSpec, assertionFunctionSpec, =]
[left, =, callNode, ., getFirstChild, (, ), ;, Node, firstParam, =, left, ., getNext, (, ), ;, AssertionFunctionSpec, assertionFunctionSpec, =]
[getFirstChild, (, ), ;, Node, firstParam, =, left, ., getNext, (, ), ;, AssertionFunctionSpec, assertionFunctionSpec, =, assertionFunctionsMap, ., get, (]
[getFirstChild, (, ), ;, Node, firstParam, =, left, ., getNext, (, ), ;, AssertionFunctionSpec, assertionFunctionSpec, =, assertionFunctionsMap, ., get, (]
[getNext, (, ), ;, AssertionFunctionSpec, assertionFunctionSpec, =, assertionFunctionsMap, ., get, (, left, ., getQualifiedName, (, ), ), ;, if, (]
[getNext, (, ), ;, AssertionFunctionSpec, assertionFunctionSpec, =, assertionFunctionsMap, ., get, (, left, ., getQualifiedName, (, ), ), ;, if, (]
[getNext, (, ), ;, AssertionFunctionSpec, assertionFunctionSpec, =, assertionFunctionsMap, ., get, (, left, ., getQualifiedName, (, ), ), ;, if, (]
[), ;, AssertionFunctionSpec, assertionFunctionSpec, =, assertionFunctionsMap, ., get, (, left, ., getQualifiedName, (, ), ), ;, if, (, assertionFunctionSpec, ==]
[AssertionFunctionSpec, assertionFunctionSpec, =, assertionFunctionsMap, ., get, (, left, ., getQualifiedName, (, ), ), ;, if, (, assertionFunctionSpec, ==, null, ||]
[AssertionFunctionSpec, assertionFunctionSpec, =, assertionFunctionsMap, ., get, (, left, ., getQualifiedName, (, ), ), ;, if, (, assertionFunctionSpec, ==, null, ||]
[=, assertionFunctionsMap, ., get, (, left, ., getQualifiedName, (, ), ), ;, if, (, assertionFunctionSpec, ==, null, ||, firstParam, ==]
[(, left, ., getQualifiedName, (, ), ), ;, if, (, assertionFunctionSpec, ==, null, ||, firstParam, ==, null, ), {, return]
[), ;, if, (, assertionFunctionSpec, ==, null, ||, firstParam, ==, null, ), {, return, scope, ;, }, Node, assertedNode, =]
[), ;, if, (, assertionFunctionSpec, ==, null, ||, firstParam, ==, null, ), {, return, scope, ;, }, Node, assertedNode, =]
[assertionFunctionSpec, ==, null, ||, firstParam, ==, null, ), {, return, scope, ;, }, Node, assertedNode, =, assertionFunctionSpec, ., getAssertedParam, (]
[==, null, ), {, return, scope, ;, }, Node, assertedNode, =, assertionFunctionSpec, ., getAssertedParam, (, firstParam, ), ;, if, (]
[==, null, ), {, return, scope, ;, }, Node, assertedNode, =, assertionFunctionSpec, ., getAssertedParam, (, firstParam, ), ;, if, (]
[), {, return, scope, ;, }, Node, assertedNode, =, assertionFunctionSpec, ., getAssertedParam, (, firstParam, ), ;, if, (, assertedNode, ==]
[;, }, Node, assertedNode, =, assertionFunctionSpec, ., getAssertedParam, (, firstParam, ), ;, if, (, assertedNode, ==, null, ), {, return]
[., getAssertedParam, (, firstParam, ), ;, if, (, assertedNode, ==, null, ), {, return, scope, ;, }, JSType, assertedType, =]
[., getAssertedParam, (, firstParam, ), ;, if, (, assertedNode, ==, null, ), {, return, scope, ;, }, JSType, assertedType, =]
[), ;, if, (, assertedNode, ==, null, ), {, return, scope, ;, }, JSType, assertedType, =, assertionFunctionSpec, ., getAssertedType, (]
[if, (, assertedNode, ==, null, ), {, return, scope, ;, }, JSType, assertedType, =, assertionFunctionSpec, ., getAssertedType, (, callNode, ,]
[{, return, scope, ;, }, JSType, assertedType, =, assertionFunctionSpec, ., getAssertedType, (, callNode, ,, registry, ), ;, String, assertedNodeName, =]
[{, return, scope, ;, }, JSType, assertedType, =, assertionFunctionSpec, ., getAssertedType, (, callNode, ,, registry, ), ;, String, assertedNodeName, =]
[(, callNode, ,, registry, ), ;, String, assertedNodeName, =, assertedNode, ., getQualifiedName, (, ), ;, JSType, narrowed, ;, if, (]
[(, callNode, ,, registry, ), ;, String, assertedNodeName, =, assertedNode, ., getQualifiedName, (, ), ;, JSType, narrowed, ;, if, (]
[,, registry, ), ;, String, assertedNodeName, =, assertedNode, ., getQualifiedName, (, ), ;, JSType, narrowed, ;, if, (, assertedType, ==]
[;, String, assertedNodeName, =, assertedNode, ., getQualifiedName, (, ), ;, JSType, narrowed, ;, if, (, assertedType, ==, null, ), {]
[assertedNodeName, =, assertedNode, ., getQualifiedName, (, ), ;, JSType, narrowed, ;, if, (, assertedType, ==, null, ), {, scope, =]
[assertedNodeName, =, assertedNode, ., getQualifiedName, (, ), ;, JSType, narrowed, ;, if, (, assertedType, ==, null, ), {, scope, =]
[getQualifiedName, (, ), ;, JSType, narrowed, ;, if, (, assertedType, ==, null, ), {, scope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (]
[), ;, JSType, narrowed, ;, if, (, assertedType, ==, null, ), {, scope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, assertedNode, ,]
[JSType, narrowed, ;, if, (, assertedType, ==, null, ), {, scope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, assertedNode, ,, scope, ,]
[if, (, assertedType, ==, null, ), {, scope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, assertedNode, ,, scope, ,, true, ), ;]
[assertedType, ==, null, ), {, scope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, assertedNode, ,, scope, ,, true, ), ;, narrowed, =]
[assertedType, ==, null, ), {, scope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, assertedNode, ,, scope, ,, true, ), ;, narrowed, =]
[null, ), {, scope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, assertedNode, ,, scope, ,, true, ), ;, narrowed, =, getJSType, (]
[true, ), ;, narrowed, =, getJSType, (, assertedNode, ), ., restrictByNotNullOrUndefined, (, ), ;, }, else, {, JSType, type, =]
[;, narrowed, =, getJSType, (, assertedNode, ), ., restrictByNotNullOrUndefined, (, ), ;, }, else, {, JSType, type, =, getJSType, (]
[getJSType, (, assertedNode, ), ., restrictByNotNullOrUndefined, (, ), ;, }, else, {, JSType, type, =, getJSType, (, assertedNode, ), ;]
[assertedNode, ), ., restrictByNotNullOrUndefined, (, ), ;, }, else, {, JSType, type, =, getJSType, (, assertedNode, ), ;, narrowed, =]
[assertedNode, ), ., restrictByNotNullOrUndefined, (, ), ;, }, else, {, JSType, type, =, getJSType, (, assertedNode, ), ;, narrowed, =]
[(, ), ;, }, else, {, JSType, type, =, getJSType, (, assertedNode, ), ;, narrowed, =, type, ., getGreatestSubtype, (]
[{, JSType, type, =, getJSType, (, assertedNode, ), ;, narrowed, =, type, ., getGreatestSubtype, (, assertedType, ), ;, if, (]
[{, JSType, type, =, getJSType, (, assertedNode, ), ;, narrowed, =, type, ., getGreatestSubtype, (, assertedType, ), ;, if, (]
[{, JSType, type, =, getJSType, (, assertedNode, ), ;, narrowed, =, type, ., getGreatestSubtype, (, assertedType, ), ;, if, (]
[type, =, getJSType, (, assertedNode, ), ;, narrowed, =, type, ., getGreatestSubtype, (, assertedType, ), ;, if, (, assertedNodeName, !=]
[getJSType, (, assertedNode, ), ;, narrowed, =, type, ., getGreatestSubtype, (, assertedType, ), ;, if, (, assertedNodeName, !=, null, &&]
[getJSType, (, assertedNode, ), ;, narrowed, =, type, ., getGreatestSubtype, (, assertedType, ), ;, if, (, assertedNodeName, !=, null, &&]
[;, narrowed, =, type, ., getGreatestSubtype, (, assertedType, ), ;, if, (, assertedNodeName, !=, null, &&, type, ., differsFrom, (]
[., getGreatestSubtype, (, assertedType, ), ;, if, (, assertedNodeName, !=, null, &&, type, ., differsFrom, (, narrowed, ), ), {]
[(, assertedType, ), ;, if, (, assertedNodeName, !=, null, &&, type, ., differsFrom, (, narrowed, ), ), {, scope, =]
[), ;, if, (, assertedNodeName, !=, null, &&, type, ., differsFrom, (, narrowed, ), ), {, scope, =, narrowScope, (]
[if, (, assertedNodeName, !=, null, &&, type, ., differsFrom, (, narrowed, ), ), {, scope, =, narrowScope, (, scope, ,]
[assertedNodeName, !=, null, &&, type, ., differsFrom, (, narrowed, ), ), {, scope, =, narrowScope, (, scope, ,, assertedNode, ,]
[., differsFrom, (, narrowed, ), ), {, scope, =, narrowScope, (, scope, ,, assertedNode, ,, narrowed, ), ;, }, }]
[., differsFrom, (, narrowed, ), ), {, scope, =, narrowScope, (, scope, ,, assertedNode, ,, narrowed, ), ;, }, }]
[), ), {, scope, =, narrowScope, (, scope, ,, assertedNode, ,, narrowed, ), ;, }, }, callNode, ., setJSType, (]
[=, narrowScope, (, scope, ,, assertedNode, ,, narrowed, ), ;, }, }, callNode, ., setJSType, (, narrowed, ), ;, return]
[return, scope, ;, }, private, FlowScope, narrowScope, (, FlowScope, scope, ,, Node, node, ,, JSType, narrowed, ), {, if, (]
[return, scope, ;, }, private, FlowScope, narrowScope, (, FlowScope, scope, ,, Node, node, ,, JSType, narrowed, ), {, if, (]
[FlowScope, scope, ,, Node, node, ,, JSType, narrowed, ), {, if, (, node, ., isThis, (, ), ), {, return]
[Node, node, ,, JSType, narrowed, ), {, if, (, node, ., isThis, (, ), ), {, return, scope, ;, }]
[,, JSType, narrowed, ), {, if, (, node, ., isThis, (, ), ), {, return, scope, ;, }, scope, =]
[,, JSType, narrowed, ), {, if, (, node, ., isThis, (, ), ), {, return, scope, ;, }, scope, =]
[., isThis, (, ), ), {, return, scope, ;, }, scope, =, scope, ., createChildFlowScope, (, ), ;, if, (]
[., isThis, (, ), ), {, return, scope, ;, }, scope, =, scope, ., createChildFlowScope, (, ), ;, if, (]
[scope, ;, }, scope, =, scope, ., createChildFlowScope, (, ), ;, if, (, node, ., isGetProp, (, ), ), {]
[scope, ;, }, scope, =, scope, ., createChildFlowScope, (, ), ;, if, (, node, ., isGetProp, (, ), ), {]
[=, scope, ., createChildFlowScope, (, ), ;, if, (, node, ., isGetProp, (, ), ), {, scope, ., inferQualifiedSlot, (]
[., createChildFlowScope, (, ), ;, if, (, node, ., isGetProp, (, ), ), {, scope, ., inferQualifiedSlot, (, node, ,]
[., createChildFlowScope, (, ), ;, if, (, node, ., isGetProp, (, ), ), {, scope, ., inferQualifiedSlot, (, node, ,]
[(, node, ., isGetProp, (, ), ), {, scope, ., inferQualifiedSlot, (, node, ,, node, ., getQualifiedName, (, ), ,]
[., isGetProp, (, ), ), {, scope, ., inferQualifiedSlot, (, node, ,, node, ., getQualifiedName, (, ), ,, getJSType, (]
[), ), {, scope, ., inferQualifiedSlot, (, node, ,, node, ., getQualifiedName, (, ), ,, getJSType, (, node, ), ,]
[(, node, ,, node, ., getQualifiedName, (, ), ,, getJSType, (, node, ), ,, narrowed, ), ;, }, else, {]
[,, node, ., getQualifiedName, (, ), ,, getJSType, (, node, ), ,, narrowed, ), ;, }, else, {, redeclareSimpleVar, (]
[., getQualifiedName, (, ), ,, getJSType, (, node, ), ,, narrowed, ), ;, }, else, {, redeclareSimpleVar, (, scope, ,]
[(, ), ,, getJSType, (, node, ), ,, narrowed, ), ;, }, else, {, redeclareSimpleVar, (, scope, ,, node, ,]
[node, ), ,, narrowed, ), ;, }, else, {, redeclareSimpleVar, (, scope, ,, node, ,, narrowed, ), ;, }, return]
[;, }, return, scope, ;, }, private, void, backwardsInferenceFromCallSite, (, Node, n, ,, FunctionType, fnType, ), {, boolean, updatedFnType, =]
[return, scope, ;, }, private, void, backwardsInferenceFromCallSite, (, Node, n, ,, FunctionType, fnType, ), {, boolean, updatedFnType, =, inferTemplatedTypesForCall, (]
[;, }, private, void, backwardsInferenceFromCallSite, (, Node, n, ,, FunctionType, fnType, ), {, boolean, updatedFnType, =, inferTemplatedTypesForCall, (, n, ,]
[(, Node, n, ,, FunctionType, fnType, ), {, boolean, updatedFnType, =, inferTemplatedTypesForCall, (, n, ,, fnType, ), ;, if, (]
[,, FunctionType, fnType, ), {, boolean, updatedFnType, =, inferTemplatedTypesForCall, (, n, ,, fnType, ), ;, if, (, updatedFnType, ), {]
[fnType, ), {, boolean, updatedFnType, =, inferTemplatedTypesForCall, (, n, ,, fnType, ), ;, if, (, updatedFnType, ), {, fnType, =]
[fnType, ), {, boolean, updatedFnType, =, inferTemplatedTypesForCall, (, n, ,, fnType, ), ;, if, (, updatedFnType, ), {, fnType, =]
[fnType, ), {, boolean, updatedFnType, =, inferTemplatedTypesForCall, (, n, ,, fnType, ), ;, if, (, updatedFnType, ), {, fnType, =]
[fnType, ), {, boolean, updatedFnType, =, inferTemplatedTypesForCall, (, n, ,, fnType, ), ;, if, (, updatedFnType, ), {, fnType, =]
[updatedFnType, ), {, fnType, =, n, ., getFirstChild, (, ), ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, }]
[{, fnType, =, n, ., getFirstChild, (, ), ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, }, updateTypeOfParameters, (]
[=, n, ., getFirstChild, (, ), ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, }, updateTypeOfParameters, (, n, ,]
[getFirstChild, (, ), ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, }, updateTypeOfParameters, (, n, ,, fnType, ), ;]
[), ., getJSType, (, ), ., toMaybeFunctionType, (, ), ;, }, updateTypeOfParameters, (, n, ,, fnType, ), ;, updateBind, (]
[getJSType, (, ), ., toMaybeFunctionType, (, ), ;, }, updateTypeOfParameters, (, n, ,, fnType, ), ;, updateBind, (, n, ,]
[fnType, ), ;, }, private, void, updateBind, (, Node, n, ,, FunctionType, fnType, ), {, CodingConvention, ., Bind, bind, =]
[fnType, ), ;, }, private, void, updateBind, (, Node, n, ,, FunctionType, fnType, ), {, CodingConvention, ., Bind, bind, =]
[fnType, ), ;, }, private, void, updateBind, (, Node, n, ,, FunctionType, fnType, ), {, CodingConvention, ., Bind, bind, =]
[Node, n, ,, FunctionType, fnType, ), {, CodingConvention, ., Bind, bind, =, compiler, ., getCodingConvention, (, ), ., describeFunctionBind, (]
[,, FunctionType, fnType, ), {, CodingConvention, ., Bind, bind, =, compiler, ., getCodingConvention, (, ), ., describeFunctionBind, (, n, ,]
[CodingConvention, ., Bind, bind, =, compiler, ., getCodingConvention, (, ), ., describeFunctionBind, (, n, ,, true, ), ;, if, (]
[CodingConvention, ., Bind, bind, =, compiler, ., getCodingConvention, (, ), ., describeFunctionBind, (, n, ,, true, ), ;, if, (]
[Bind, bind, =, compiler, ., getCodingConvention, (, ), ., describeFunctionBind, (, n, ,, true, ), ;, if, (, bind, ==]
[describeFunctionBind, (, n, ,, true, ), ;, if, (, bind, ==, null, ), {, return, ;, }, FunctionType, callTargetFn, =]
[describeFunctionBind, (, n, ,, true, ), ;, if, (, bind, ==, null, ), {, return, ;, }, FunctionType, callTargetFn, =]
[describeFunctionBind, (, n, ,, true, ), ;, if, (, bind, ==, null, ), {, return, ;, }, FunctionType, callTargetFn, =]
[n, ,, true, ), ;, if, (, bind, ==, null, ), {, return, ;, }, FunctionType, callTargetFn, =, getJSType, (]
[n, ,, true, ), ;, if, (, bind, ==, null, ), {, return, ;, }, FunctionType, callTargetFn, =, getJSType, (]
[FunctionType, callTargetFn, =, getJSType, (, bind, ., target, ), ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[FunctionType, callTargetFn, =, getJSType, (, bind, ., target, ), ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[=, getJSType, (, bind, ., target, ), ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, callTargetFn, ==]
[), ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, callTargetFn, ==, null, ), {, return, ;, }]
[), ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, callTargetFn, ==, null, ), {, return, ;, }]
[), ., toMaybeFunctionType, (, ), ;, if, (, callTargetFn, ==, null, ), {, return, ;, }, n, ., setJSType, (]
[), ., toMaybeFunctionType, (, ), ;, if, (, callTargetFn, ==, null, ), {, return, ;, }, n, ., setJSType, (]
[), ;, if, (, callTargetFn, ==, null, ), {, return, ;, }, n, ., setJSType, (, callTargetFn, ., getBindReturnType, (]
[), ;, if, (, callTargetFn, ==, null, ), {, return, ;, }, n, ., setJSType, (, callTargetFn, ., getBindReturnType, (]
[), ;, if, (, callTargetFn, ==, null, ), {, return, ;, }, n, ., setJSType, (, callTargetFn, ., getBindReturnType, (]
[null, ), {, return, ;, }, n, ., setJSType, (, callTargetFn, ., getBindReturnType, (, bind, ., getBoundParameterCount, (, ), +]
[+, 1, ), ), ;, }, private, void, updateTypeOfParameters, (, Node, n, ,, FunctionType, fnType, ), {, int, i, =]
[}, private, void, updateTypeOfParameters, (, Node, n, ,, FunctionType, fnType, ), {, int, i, =, 0, ;, int, childCount, =]
[}, private, void, updateTypeOfParameters, (, Node, n, ,, FunctionType, fnType, ), {, int, i, =, 0, ;, int, childCount, =]
[{, int, i, =, 0, ;, int, childCount, =, n, ., getChildCount, (, ), ;, for, (, Node, iParameter, :]
[{, int, i, =, 0, ;, int, childCount, =, n, ., getChildCount, (, ), ;, for, (, Node, iParameter, :]
[n, ., getChildCount, (, ), ;, for, (, Node, iParameter, :, fnType, ., getParameters, (, ), ), {, if, (]
[n, ., getChildCount, (, ), ;, for, (, Node, iParameter, :, fnType, ., getParameters, (, ), ), {, if, (]
[n, ., getChildCount, (, ), ;, for, (, Node, iParameter, :, fnType, ., getParameters, (, ), ), {, if, (]
[getChildCount, (, ), ;, for, (, Node, iParameter, :, fnType, ., getParameters, (, ), ), {, if, (, i, +]
[), ;, for, (, Node, iParameter, :, fnType, ., getParameters, (, ), ), {, if, (, i, +, 1, >=]
[getParameters, (, ), ), {, if, (, i, +, 1, >=, childCount, ), {, return, ;, }, JSType, iParameterType, =]
[), ), {, if, (, i, +, 1, >=, childCount, ), {, return, ;, }, JSType, iParameterType, =, getJSType, (]
[+, 1, >=, childCount, ), {, return, ;, }, JSType, iParameterType, =, getJSType, (, iParameter, ), ;, Node, iArgument, =]
[+, 1, >=, childCount, ), {, return, ;, }, JSType, iParameterType, =, getJSType, (, iParameter, ), ;, Node, iArgument, =]
[), {, return, ;, }, JSType, iParameterType, =, getJSType, (, iParameter, ), ;, Node, iArgument, =, n, ., getChildAtIndex, (]
[), {, return, ;, }, JSType, iParameterType, =, getJSType, (, iParameter, ), ;, Node, iArgument, =, n, ., getChildAtIndex, (]
[return, ;, }, JSType, iParameterType, =, getJSType, (, iParameter, ), ;, Node, iArgument, =, n, ., getChildAtIndex, (, i, +]
[getJSType, (, iParameter, ), ;, Node, iArgument, =, n, ., getChildAtIndex, (, i, +, 1, ), ;, JSType, iArgumentType, =]
[iParameter, ), ;, Node, iArgument, =, n, ., getChildAtIndex, (, i, +, 1, ), ;, JSType, iArgumentType, =, getJSType, (]
[Node, iArgument, =, n, ., getChildAtIndex, (, i, +, 1, ), ;, JSType, iArgumentType, =, getJSType, (, iArgument, ), ;]
[=, n, ., getChildAtIndex, (, i, +, 1, ), ;, JSType, iArgumentType, =, getJSType, (, iArgument, ), ;, inferPropertyTypesToMatchConstraint, (]
[., getChildAtIndex, (, i, +, 1, ), ;, JSType, iArgumentType, =, getJSType, (, iArgument, ), ;, inferPropertyTypesToMatchConstraint, (, iArgumentType, ,]
[), ;, JSType, iArgumentType, =, getJSType, (, iArgument, ), ;, inferPropertyTypesToMatchConstraint, (, iArgumentType, ,, iParameterType, ), ;, JSType, restrictedParameter, =]
[), ;, JSType, iArgumentType, =, getJSType, (, iArgument, ), ;, inferPropertyTypesToMatchConstraint, (, iArgumentType, ,, iParameterType, ), ;, JSType, restrictedParameter, =]
[), ;, JSType, iArgumentType, =, getJSType, (, iArgument, ), ;, inferPropertyTypesToMatchConstraint, (, iArgumentType, ,, iParameterType, ), ;, JSType, restrictedParameter, =]
[iArgumentType, ,, iParameterType, ), ;, JSType, restrictedParameter, =, iParameterType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[iArgumentType, ,, iParameterType, ), ;, JSType, restrictedParameter, =, iParameterType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[iParameterType, ), ;, JSType, restrictedParameter, =, iParameterType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, restrictedParameter, !=]
[=, iParameterType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, restrictedParameter, !=, null, ), {, if, (]
[=, iParameterType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, restrictedParameter, !=, null, ), {, if, (]
[=, iParameterType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, restrictedParameter, !=, null, ), {, if, (]
[=, iParameterType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, restrictedParameter, !=, null, ), {, if, (]
[., toMaybeFunctionType, (, ), ;, if, (, restrictedParameter, !=, null, ), {, if, (, iArgument, ., isFunction, (, ), &&]
[., toMaybeFunctionType, (, ), ;, if, (, restrictedParameter, !=, null, ), {, if, (, iArgument, ., isFunction, (, ), &&]
[(, restrictedParameter, !=, null, ), {, if, (, iArgument, ., isFunction, (, ), &&, iArgumentType, ., isFunctionType, (, ), &&]
[(, restrictedParameter, !=, null, ), {, if, (, iArgument, ., isFunction, (, ), &&, iArgumentType, ., isFunctionType, (, ), &&]
[(, restrictedParameter, !=, null, ), {, if, (, iArgument, ., isFunction, (, ), &&, iArgumentType, ., isFunctionType, (, ), &&]
[if, (, iArgument, ., isFunction, (, ), &&, iArgumentType, ., isFunctionType, (, ), &&, iArgument, ., getJSDocInfo, (, ), ==]
[., isFunction, (, ), &&, iArgumentType, ., isFunctionType, (, ), &&, iArgument, ., getJSDocInfo, (, ), ==, null, ), {]
[., isFunction, (, ), &&, iArgumentType, ., isFunctionType, (, ), &&, iArgument, ., getJSDocInfo, (, ), ==, null, ), {]
[&&, iArgumentType, ., isFunctionType, (, ), &&, iArgument, ., getJSDocInfo, (, ), ==, null, ), {, iArgument, ., setJSType, (]
[), &&, iArgument, ., getJSDocInfo, (, ), ==, null, ), {, iArgument, ., setJSType, (, restrictedParameter, ), ;, }, }]
[), &&, iArgument, ., getJSDocInfo, (, ), ==, null, ), {, iArgument, ., setJSType, (, restrictedParameter, ), ;, }, }]
[}, }, private, Map, <, TemplateType, ,, JSType, >, inferTemplateTypesFromParameters, (, FunctionType, fnType, ,, Node, call, ), {, if, (]
[}, }, private, Map, <, TemplateType, ,, JSType, >, inferTemplateTypesFromParameters, (, FunctionType, fnType, ,, Node, call, ), {, if, (]
[}, }, private, Map, <, TemplateType, ,, JSType, >, inferTemplateTypesFromParameters, (, FunctionType, fnType, ,, Node, call, ), {, if, (]
[fnType, ,, Node, call, ), {, if, (, fnType, ., getTemplateKeys, (, ), ., isEmpty, (, ), ), {, return]
[fnType, ,, Node, call, ), {, if, (, fnType, ., getTemplateKeys, (, ), ., isEmpty, (, ), ), {, return]
[(, ), ), {, return, Collections, ., emptyMap, (, ), ;, }, Map, <, TemplateType, ,, JSType, >, resolvedTypes, =]
[(, ), ), {, return, Collections, ., emptyMap, (, ), ;, }, Map, <, TemplateType, ,, JSType, >, resolvedTypes, =]
[), ;, }, Map, <, TemplateType, ,, JSType, >, resolvedTypes, =, Maps, ., newIdentityHashMap, (, ), ;, Node, callTarget, =]
[), ;, }, Map, <, TemplateType, ,, JSType, >, resolvedTypes, =, Maps, ., newIdentityHashMap, (, ), ;, Node, callTarget, =]
[>, resolvedTypes, =, Maps, ., newIdentityHashMap, (, ), ;, Node, callTarget, =, call, ., getFirstChild, (, ), ;, if, (]
[>, resolvedTypes, =, Maps, ., newIdentityHashMap, (, ), ;, Node, callTarget, =, call, ., getFirstChild, (, ), ;, if, (]
[., newIdentityHashMap, (, ), ;, Node, callTarget, =, call, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (]
[=, call, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, Node, obj, =]
[=, call, ., getFirstChild, (, ), ;, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, Node, obj, =]
[;, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, Node, obj, =, callTarget, ., getFirstChild, (, ), ;]
[(, NodeUtil, ., isGet, (, callTarget, ), ), {, Node, obj, =, callTarget, ., getFirstChild, (, ), ;, maybeResolveTemplatedType, (]
[(, NodeUtil, ., isGet, (, callTarget, ), ), {, Node, obj, =, callTarget, ., getFirstChild, (, ), ;, maybeResolveTemplatedType, (]
[), ), {, Node, obj, =, callTarget, ., getFirstChild, (, ), ;, maybeResolveTemplatedType, (, fnType, ., getTypeOfThis, (, ), ,]
[{, Node, obj, =, callTarget, ., getFirstChild, (, ), ;, maybeResolveTemplatedType, (, fnType, ., getTypeOfThis, (, ), ,, getJSType, (]
[=, callTarget, ., getFirstChild, (, ), ;, maybeResolveTemplatedType, (, fnType, ., getTypeOfThis, (, ), ,, getJSType, (, obj, ), ,]
[;, maybeResolveTemplatedType, (, fnType, ., getTypeOfThis, (, ), ,, getJSType, (, obj, ), ,, resolvedTypes, ), ;, }, if, (]
[;, maybeResolveTemplatedType, (, fnType, ., getTypeOfThis, (, ), ,, getJSType, (, obj, ), ,, resolvedTypes, ), ;, }, if, (]
[), ,, getJSType, (, obj, ), ,, resolvedTypes, ), ;, }, if, (, call, ., hasMoreThanOneChild, (, ), ), {]
[getJSType, (, obj, ), ,, resolvedTypes, ), ;, }, if, (, call, ., hasMoreThanOneChild, (, ), ), {, maybeResolveTemplateTypeFromNodes, (]
[getJSType, (, obj, ), ,, resolvedTypes, ), ;, }, if, (, call, ., hasMoreThanOneChild, (, ), ), {, maybeResolveTemplateTypeFromNodes, (]
[), ;, }, if, (, call, ., hasMoreThanOneChild, (, ), ), {, maybeResolveTemplateTypeFromNodes, (, fnType, ., getParameters, (, ), ,]
[), ;, }, if, (, call, ., hasMoreThanOneChild, (, ), ), {, maybeResolveTemplateTypeFromNodes, (, fnType, ., getParameters, (, ), ,]
[), ;, }, if, (, call, ., hasMoreThanOneChild, (, ), ), {, maybeResolveTemplateTypeFromNodes, (, fnType, ., getParameters, (, ), ,]
[(, call, ., hasMoreThanOneChild, (, ), ), {, maybeResolveTemplateTypeFromNodes, (, fnType, ., getParameters, (, ), ,, call, ., getChildAtIndex, (]
[{, maybeResolveTemplateTypeFromNodes, (, fnType, ., getParameters, (, ), ,, call, ., getChildAtIndex, (, 1, ), ., siblings, (, ), ,]
[getParameters, (, ), ,, call, ., getChildAtIndex, (, 1, ), ., siblings, (, ), ,, resolvedTypes, ), ;, }, return]
[void, maybeResolveTemplatedType, (, JSType, paramType, ,, JSType, argType, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {, if, (]
[void, maybeResolveTemplatedType, (, JSType, paramType, ,, JSType, argType, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {, if, (]
[argType, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {, if, (, paramType, ., isTemplateType, (, ), ), {]
[Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {, if, (, paramType, ., isTemplateType, (, ), ), {, resolvedTemplateType, (]
[TemplateType, ,, JSType, >, resolvedTypes, ), {, if, (, paramType, ., isTemplateType, (, ), ), {, resolvedTemplateType, (, resolvedTypes, ,]
[TemplateType, ,, JSType, >, resolvedTypes, ), {, if, (, paramType, ., isTemplateType, (, ), ), {, resolvedTemplateType, (, resolvedTypes, ,]
[{, if, (, paramType, ., isTemplateType, (, ), ), {, resolvedTemplateType, (, resolvedTypes, ,, paramType, ., toMaybeTemplateType, (, ), ,]
[), ), {, resolvedTemplateType, (, resolvedTypes, ,, paramType, ., toMaybeTemplateType, (, ), ,, argType, ), ;, }, else, if, (]
[), ), {, resolvedTemplateType, (, resolvedTypes, ,, paramType, ., toMaybeTemplateType, (, ), ,, argType, ), ;, }, else, if, (]
[(, ), ,, argType, ), ;, }, else, if, (, paramType, ., isUnionType, (, ), ), {, UnionType, unionType, =]
[(, ), ,, argType, ), ;, }, else, if, (, paramType, ., isUnionType, (, ), ), {, UnionType, unionType, =]
[., isUnionType, (, ), ), {, UnionType, unionType, =, paramType, ., toMaybeUnionType, (, ), ;, for, (, JSType, alernative, :]
[., isUnionType, (, ), ), {, UnionType, unionType, =, paramType, ., toMaybeUnionType, (, ), ;, for, (, JSType, alernative, :]
[unionType, =, paramType, ., toMaybeUnionType, (, ), ;, for, (, JSType, alernative, :, unionType, ., getAlternates, (, ), ), {]
[paramType, ., toMaybeUnionType, (, ), ;, for, (, JSType, alernative, :, unionType, ., getAlternates, (, ), ), {, maybeResolveTemplatedType, (]
[toMaybeUnionType, (, ), ;, for, (, JSType, alernative, :, unionType, ., getAlternates, (, ), ), {, maybeResolveTemplatedType, (, alernative, ,]
[), ;, for, (, JSType, alernative, :, unionType, ., getAlternates, (, ), ), {, maybeResolveTemplatedType, (, alernative, ,, argType, ,]
[., getAlternates, (, ), ), {, maybeResolveTemplatedType, (, alernative, ,, argType, ,, resolvedTypes, ), ;, }, }, else, if, (]
[., getAlternates, (, ), ), {, maybeResolveTemplatedType, (, alernative, ,, argType, ,, resolvedTypes, ), ;, }, }, else, if, (]
[argType, ,, resolvedTypes, ), ;, }, }, else, if, (, paramType, ., isFunctionType, (, ), ), {, FunctionType, paramFunctionType, =]
[argType, ,, resolvedTypes, ), ;, }, }, else, if, (, paramType, ., isFunctionType, (, ), ), {, FunctionType, paramFunctionType, =]
[(, paramType, ., isFunctionType, (, ), ), {, FunctionType, paramFunctionType, =, paramType, ., toMaybeFunctionType, (, ), ;, FunctionType, argFunctionType, =]
[(, paramType, ., isFunctionType, (, ), ), {, FunctionType, paramFunctionType, =, paramType, ., toMaybeFunctionType, (, ), ;, FunctionType, argFunctionType, =]
[(, paramType, ., isFunctionType, (, ), ), {, FunctionType, paramFunctionType, =, paramType, ., toMaybeFunctionType, (, ), ;, FunctionType, argFunctionType, =]
[(, paramType, ., isFunctionType, (, ), ), {, FunctionType, paramFunctionType, =, paramType, ., toMaybeFunctionType, (, ), ;, FunctionType, argFunctionType, =]
[;, FunctionType, argFunctionType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[;, FunctionType, argFunctionType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[;, FunctionType, argFunctionType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[argFunctionType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeFunctionType, (, ), ;, if, (, argFunctionType, !=]
[argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeFunctionType, (, ), ;, if, (, argFunctionType, !=, null, &&]
[argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeFunctionType, (, ), ;, if, (, argFunctionType, !=, null, &&]
[), ., collapseUnion, (, ), ., toMaybeFunctionType, (, ), ;, if, (, argFunctionType, !=, null, &&, argFunctionType, ., isSubtype, (]
[), ., toMaybeFunctionType, (, ), ;, if, (, argFunctionType, !=, null, &&, argFunctionType, ., isSubtype, (, paramType, ), ), {]
[toMaybeFunctionType, (, ), ;, if, (, argFunctionType, !=, null, &&, argFunctionType, ., isSubtype, (, paramType, ), ), {, maybeResolveTemplatedType, (]
[toMaybeFunctionType, (, ), ;, if, (, argFunctionType, !=, null, &&, argFunctionType, ., isSubtype, (, paramType, ), ), {, maybeResolveTemplatedType, (]
[argFunctionType, !=, null, &&, argFunctionType, ., isSubtype, (, paramType, ), ), {, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,]
[argFunctionType, !=, null, &&, argFunctionType, ., isSubtype, (, paramType, ), ), {, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,]
[isSubtype, (, paramType, ), ), {, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,, argFunctionType, ., getTypeOfThis, (, ), ,]
[), ), {, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,, argFunctionType, ., getTypeOfThis, (, ), ,, resolvedTypes, ), ;]
[{, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,, argFunctionType, ., getTypeOfThis, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplatedType, (]
[{, maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,, argFunctionType, ., getTypeOfThis, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplatedType, (]
[(, ), ,, argFunctionType, ., getTypeOfThis, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplatedType, (, paramFunctionType, ., getReturnType, (, ), ,]
[(, ), ,, argFunctionType, ., getTypeOfThis, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplatedType, (, paramFunctionType, ., getReturnType, (, ), ,]
[(, ), ,, resolvedTypes, ), ;, maybeResolveTemplatedType, (, paramFunctionType, ., getReturnType, (, ), ,, argFunctionType, ., getReturnType, (, ), ,]
[resolvedTypes, ), ;, maybeResolveTemplatedType, (, paramFunctionType, ., getReturnType, (, ), ,, argFunctionType, ., getReturnType, (, ), ,, resolvedTypes, ), ;]
[;, maybeResolveTemplatedType, (, paramFunctionType, ., getReturnType, (, ), ,, argFunctionType, ., getReturnType, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplateTypeFromNodes, (]
[;, maybeResolveTemplatedType, (, paramFunctionType, ., getReturnType, (, ), ,, argFunctionType, ., getReturnType, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplateTypeFromNodes, (]
[(, ), ,, argFunctionType, ., getReturnType, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplateTypeFromNodes, (, paramFunctionType, ., getParameters, (, ), ,]
[(, ), ,, argFunctionType, ., getReturnType, (, ), ,, resolvedTypes, ), ;, maybeResolveTemplateTypeFromNodes, (, paramFunctionType, ., getParameters, (, ), ,]
[(, ), ,, resolvedTypes, ), ;, maybeResolveTemplateTypeFromNodes, (, paramFunctionType, ., getParameters, (, ), ,, argFunctionType, ., getParameters, (, ), ,]
[paramFunctionType, ., getParameters, (, ), ,, argFunctionType, ., getParameters, (, ), ,, resolvedTypes, ), ;, }, }, else, if, (]
[paramFunctionType, ., getParameters, (, ), ,, argFunctionType, ., getParameters, (, ), ,, resolvedTypes, ), ;, }, }, else, if, (]
[), ,, resolvedTypes, ), ;, }, }, else, if, (, paramType, ., isParameterizedType, (, ), ), {, ParameterizedType, paramObjectType, =]
[), ,, resolvedTypes, ), ;, }, }, else, if, (, paramType, ., isParameterizedType, (, ), ), {, ParameterizedType, paramObjectType, =]
[(, paramType, ., isParameterizedType, (, ), ), {, ParameterizedType, paramObjectType, =, paramType, ., toMaybeParameterizedType, (, ), ;, JSType, typeParameter, =]
[(, paramType, ., isParameterizedType, (, ), ), {, ParameterizedType, paramObjectType, =, paramType, ., toMaybeParameterizedType, (, ), ;, JSType, typeParameter, =]
[), {, ParameterizedType, paramObjectType, =, paramType, ., toMaybeParameterizedType, (, ), ;, JSType, typeParameter, =, paramObjectType, ., getParameterType, (, ), ;]
[), {, ParameterizedType, paramObjectType, =, paramType, ., toMaybeParameterizedType, (, ), ;, JSType, typeParameter, =, paramObjectType, ., getParameterType, (, ), ;]
[=, paramType, ., toMaybeParameterizedType, (, ), ;, JSType, typeParameter, =, paramObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (]
[), ;, JSType, typeParameter, =, paramObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, typeParameter, ), ;, if, (]
[), ;, JSType, typeParameter, =, paramObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, typeParameter, ), ;, if, (]
[JSType, typeParameter, =, paramObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, typeParameter, ), ;, if, (, typeParameter, !=]
[(, ), ;, Preconditions, ., checkNotNull, (, typeParameter, ), ;, if, (, typeParameter, !=, null, ), {, ObjectType, argObjectType, =]
[(, ), ;, Preconditions, ., checkNotNull, (, typeParameter, ), ;, if, (, typeParameter, !=, null, ), {, ObjectType, argObjectType, =]
[(, ), ;, Preconditions, ., checkNotNull, (, typeParameter, ), ;, if, (, typeParameter, !=, null, ), {, ObjectType, argObjectType, =]
[(, ), ;, Preconditions, ., checkNotNull, (, typeParameter, ), ;, if, (, typeParameter, !=, null, ), {, ObjectType, argObjectType, =]
[{, ObjectType, argObjectType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeParameterizedType, (, ), ;, if, (]
[{, ObjectType, argObjectType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeParameterizedType, (, ), ;, if, (]
[{, ObjectType, argObjectType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeParameterizedType, (, ), ;, if, (]
[argObjectType, =, argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeParameterizedType, (, ), ;, if, (, argObjectType, !=]
[argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeParameterizedType, (, ), ;, if, (, argObjectType, !=, null, &&]
[argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeParameterizedType, (, ), ;, if, (, argObjectType, !=, null, &&]
[), ., collapseUnion, (, ), ., toMaybeParameterizedType, (, ), ;, if, (, argObjectType, !=, null, &&, argObjectType, ., isSubtype, (]
[(, ), ;, if, (, argObjectType, !=, null, &&, argObjectType, ., isSubtype, (, paramType, ), ), {, JSType, argTypeParameter, =]
[(, ), ;, if, (, argObjectType, !=, null, &&, argObjectType, ., isSubtype, (, paramType, ), ), {, JSType, argTypeParameter, =]
[!=, null, &&, argObjectType, ., isSubtype, (, paramType, ), ), {, JSType, argTypeParameter, =, argObjectType, ., getParameterType, (, ), ;]
[!=, null, &&, argObjectType, ., isSubtype, (, paramType, ), ), {, JSType, argTypeParameter, =, argObjectType, ., getParameterType, (, ), ;]
[., isSubtype, (, paramType, ), ), {, JSType, argTypeParameter, =, argObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (]
[paramType, ), ), {, JSType, argTypeParameter, =, argObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, argTypeParameter, ), ;]
[), {, JSType, argTypeParameter, =, argObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, argTypeParameter, ), ;, maybeResolveTemplatedType, (]
[JSType, argTypeParameter, =, argObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, argTypeParameter, ), ;, maybeResolveTemplatedType, (, typeParameter, ,]
[=, argObjectType, ., getParameterType, (, ), ;, Preconditions, ., checkNotNull, (, argTypeParameter, ), ;, maybeResolveTemplatedType, (, typeParameter, ,, argTypeParameter, ,]
[<, Node, >, declParams, ,, Iterable, <, Node, >, callParams, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {]
[>, declParams, ,, Iterable, <, Node, >, callParams, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {, maybeResolveTemplateTypeFromNodes, (]
[>, declParams, ,, Iterable, <, Node, >, callParams, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {, maybeResolveTemplateTypeFromNodes, (]
[>, callParams, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {, maybeResolveTemplateTypeFromNodes, (, declParams, ., iterator, (, ), ,]
[>, callParams, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {, maybeResolveTemplateTypeFromNodes, (, declParams, ., iterator, (, ), ,]
[,, JSType, >, resolvedTypes, ), {, maybeResolveTemplateTypeFromNodes, (, declParams, ., iterator, (, ), ,, callParams, ., iterator, (, ), ,]
[>, declParams, ,, Iterator, <, Node, >, callParams, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {, while, (]
[>, declParams, ,, Iterator, <, Node, >, callParams, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {, while, (]
[>, declParams, ,, Iterator, <, Node, >, callParams, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {, while, (]
[>, callParams, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {, while, (, declParams, ., hasNext, (, ), &&]
[>, callParams, ,, Map, <, TemplateType, ,, JSType, >, resolvedTypes, ), {, while, (, declParams, ., hasNext, (, ), &&]
[), {, while, (, declParams, ., hasNext, (, ), &&, callParams, ., hasNext, (, ), ), {, Node, declParam, =]
[), {, while, (, declParams, ., hasNext, (, ), &&, callParams, ., hasNext, (, ), ), {, Node, declParam, =]
[hasNext, (, ), &&, callParams, ., hasNext, (, ), ), {, Node, declParam, =, declParams, ., next, (, ), ;]
[), &&, callParams, ., hasNext, (, ), ), {, Node, declParam, =, declParams, ., next, (, ), ;, maybeResolveTemplatedType, (]
[callParams, ., hasNext, (, ), ), {, Node, declParam, =, declParams, ., next, (, ), ;, maybeResolveTemplatedType, (, getJSType, (]
[(, ), ), {, Node, declParam, =, declParams, ., next, (, ), ;, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,]
[), {, Node, declParam, =, declParams, ., next, (, ), ;, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (]
[), {, Node, declParam, =, declParams, ., next, (, ), ;, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (]
[next, (, ), ;, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (, callParams, ., next, (, ), ), ,]
[(, getJSType, (, declParam, ), ,, getJSType, (, callParams, ., next, (, ), ), ,, resolvedTypes, ), ;, if, (]
[(, getJSType, (, declParam, ), ,, getJSType, (, callParams, ., next, (, ), ), ,, resolvedTypes, ), ;, if, (]
[., next, (, ), ), ,, resolvedTypes, ), ;, if, (, declParam, ., isVarArgs, (, ), ), {, while, (]
[., next, (, ), ), ,, resolvedTypes, ), ;, if, (, declParam, ., isVarArgs, (, ), ), {, while, (]
[), ;, if, (, declParam, ., isVarArgs, (, ), ), {, while, (, callParams, ., hasNext, (, ), ), {]
[if, (, declParam, ., isVarArgs, (, ), ), {, while, (, callParams, ., hasNext, (, ), ), {, maybeResolveTemplatedType, (]
[declParam, ., isVarArgs, (, ), ), {, while, (, callParams, ., hasNext, (, ), ), {, maybeResolveTemplatedType, (, getJSType, (]
[(, ), ), {, while, (, callParams, ., hasNext, (, ), ), {, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,]
[), {, while, (, callParams, ., hasNext, (, ), ), {, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (]
[), {, while, (, callParams, ., hasNext, (, ), ), {, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (]
[(, ), ), {, maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (, callParams, ., next, (, ), ), ,]
[resolvedTemplateType, (, Map, <, TemplateType, ,, JSType, >, map, ,, TemplateType, template, ,, JSType, resolved, ), {, JSType, previous, =]
[resolvedTemplateType, (, Map, <, TemplateType, ,, JSType, >, map, ,, TemplateType, template, ,, JSType, resolved, ), {, JSType, previous, =]
[TemplateType, ,, JSType, >, map, ,, TemplateType, template, ,, JSType, resolved, ), {, JSType, previous, =, map, ., get, (]
[,, TemplateType, template, ,, JSType, resolved, ), {, JSType, previous, =, map, ., get, (, template, ), ;, if, (]
[TemplateType, template, ,, JSType, resolved, ), {, JSType, previous, =, map, ., get, (, template, ), ;, if, (, !]
[TemplateType, template, ,, JSType, resolved, ), {, JSType, previous, =, map, ., get, (, template, ), ;, if, (, !]
[=, map, ., get, (, template, ), ;, if, (, !, resolved, ., isUnknownType, (, ), ), {, if, (]
[=, map, ., get, (, template, ), ;, if, (, !, resolved, ., isUnknownType, (, ), ), {, if, (]
[., get, (, template, ), ;, if, (, !, resolved, ., isUnknownType, (, ), ), {, if, (, previous, ==]
[template, ), ;, if, (, !, resolved, ., isUnknownType, (, ), ), {, if, (, previous, ==, null, ), {]
[template, ), ;, if, (, !, resolved, ., isUnknownType, (, ), ), {, if, (, previous, ==, null, ), {]
[(, !, resolved, ., isUnknownType, (, ), ), {, if, (, previous, ==, null, ), {, map, ., put, (]
[resolved, ., isUnknownType, (, ), ), {, if, (, previous, ==, null, ), {, map, ., put, (, template, ,]
[previous, ==, null, ), {, map, ., put, (, template, ,, resolved, ), ;, }, else, {, JSType, join, =]
[previous, ==, null, ), {, map, ., put, (, template, ,, resolved, ), ;, }, else, {, JSType, join, =]
[{, map, ., put, (, template, ,, resolved, ), ;, }, else, {, JSType, join, =, previous, ., getLeastSupertype, (]
[put, (, template, ,, resolved, ), ;, }, else, {, JSType, join, =, previous, ., getLeastSupertype, (, resolved, ), ;]
[put, (, template, ,, resolved, ), ;, }, else, {, JSType, join, =, previous, ., getLeastSupertype, (, resolved, ), ;]
[resolved, ), ;, }, else, {, JSType, join, =, previous, ., getLeastSupertype, (, resolved, ), ;, map, ., put, (]
[;, }, else, {, JSType, join, =, previous, ., getLeastSupertype, (, resolved, ), ;, map, ., put, (, template, ,]
[ModificationVisitor, {, private, final, Map, <, TemplateType, ,, JSType, >, replacements, ;, private, final, JSTypeRegistry, registry, ;, boolean, madeChanges, =]
[madeChanges, =, false, ;, TemplateTypeReplacer, (, JSTypeRegistry, registry, ,, Map, <, TemplateType, ,, JSType, >, replacements, ), {, super, (]
[;, TemplateTypeReplacer, (, JSTypeRegistry, registry, ,, Map, <, TemplateType, ,, JSType, >, replacements, ), {, super, (, registry, ), ;]
[;, TemplateTypeReplacer, (, JSTypeRegistry, registry, ,, Map, <, TemplateType, ,, JSType, >, replacements, ), {, super, (, registry, ), ;]
[registry, ,, Map, <, TemplateType, ,, JSType, >, replacements, ), {, super, (, registry, ), ;, this, ., registry, =]
[Map, <, TemplateType, ,, JSType, >, replacements, ), {, super, (, registry, ), ;, this, ., registry, =, registry, ;]
[Map, <, TemplateType, ,, JSType, >, replacements, ), {, super, (, registry, ), ;, this, ., registry, =, registry, ;]
[JSType, >, replacements, ), {, super, (, registry, ), ;, this, ., registry, =, registry, ;, this, ., replacements, =]
[=, registry, ;, this, ., replacements, =, replacements, ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, type, ), {]
[;, this, ., replacements, =, replacements, ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, type, ), {, madeChanges, =]
[replacements, ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, type, ), {, madeChanges, =, true, ;, JSType, replacement, =]
[replacements, ;, }, @, Override, public, JSType, caseTemplateType, (, TemplateType, type, ), {, madeChanges, =, true, ;, JSType, replacement, =]
[Override, public, JSType, caseTemplateType, (, TemplateType, type, ), {, madeChanges, =, true, ;, JSType, replacement, =, replacements, ., get, (]
[(, TemplateType, type, ), {, madeChanges, =, true, ;, JSType, replacement, =, replacements, ., get, (, type, ), ;, return]
[(, TemplateType, type, ), {, madeChanges, =, true, ;, JSType, replacement, =, replacements, ., get, (, type, ), ;, return]
[(, TemplateType, type, ), {, madeChanges, =, true, ;, JSType, replacement, =, replacements, ., get, (, type, ), ;, return]
[type, ), {, madeChanges, =, true, ;, JSType, replacement, =, replacements, ., get, (, type, ), ;, return, replacement, !=]
[{, madeChanges, =, true, ;, JSType, replacement, =, replacements, ., get, (, type, ), ;, return, replacement, !=, null, ?]
[=, true, ;, JSType, replacement, =, replacements, ., get, (, type, ), ;, return, replacement, !=, null, ?, replacement, :]
[=, true, ;, JSType, replacement, =, replacements, ., get, (, type, ), ;, return, replacement, !=, null, ?, replacement, :]
[replacement, =, replacements, ., get, (, type, ), ;, return, replacement, !=, null, ?, replacement, :, registry, ., getNativeType, (]
[getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, boolean, inferTemplatedTypesForCall, (, Node, n, ,, FunctionType, fnType, ), {, if, (]
[getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, boolean, inferTemplatedTypesForCall, (, Node, n, ,, FunctionType, fnType, ), {, if, (]
[getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, boolean, inferTemplatedTypesForCall, (, Node, n, ,, FunctionType, fnType, ), {, if, (]
[n, ,, FunctionType, fnType, ), {, if, (, fnType, ., getTemplateKeys, (, ), ., isEmpty, (, ), ), {, return]
[(, ), ., isEmpty, (, ), ), {, return, false, ;, }, Map, <, TemplateType, ,, JSType, >, inferred, =]
[., isEmpty, (, ), ), {, return, false, ;, }, Map, <, TemplateType, ,, JSType, >, inferred, =, inferTemplateTypesFromParameters, (]
[(, ), ), {, return, false, ;, }, Map, <, TemplateType, ,, JSType, >, inferred, =, inferTemplateTypesFromParameters, (, fnType, ,]
[;, }, Map, <, TemplateType, ,, JSType, >, inferred, =, inferTemplateTypesFromParameters, (, fnType, ,, n, ), ;, TemplateTypeReplacer, replacer, =]
[<, TemplateType, ,, JSType, >, inferred, =, inferTemplateTypesFromParameters, (, fnType, ,, n, ), ;, TemplateTypeReplacer, replacer, =, new, TemplateTypeReplacer, (]
[,, JSType, >, inferred, =, inferTemplateTypesFromParameters, (, fnType, ,, n, ), ;, TemplateTypeReplacer, replacer, =, new, TemplateTypeReplacer, (, registry, ,]
[(, fnType, ,, n, ), ;, TemplateTypeReplacer, replacer, =, new, TemplateTypeReplacer, (, registry, ,, inferred, ), ;, Node, callTarget, =]
[(, fnType, ,, n, ), ;, TemplateTypeReplacer, replacer, =, new, TemplateTypeReplacer, (, registry, ,, inferred, ), ;, Node, callTarget, =]
[new, TemplateTypeReplacer, (, registry, ,, inferred, ), ;, Node, callTarget, =, n, ., getFirstChild, (, ), ;, FunctionType, replacementFnType, =]
[new, TemplateTypeReplacer, (, registry, ,, inferred, ), ;, Node, callTarget, =, n, ., getFirstChild, (, ), ;, FunctionType, replacementFnType, =]
[new, TemplateTypeReplacer, (, registry, ,, inferred, ), ;, Node, callTarget, =, n, ., getFirstChild, (, ), ;, FunctionType, replacementFnType, =]
[,, inferred, ), ;, Node, callTarget, =, n, ., getFirstChild, (, ), ;, FunctionType, replacementFnType, =, fnType, ., visit, (]
[n, ., getFirstChild, (, ), ;, FunctionType, replacementFnType, =, fnType, ., visit, (, replacer, ), ., toMaybeFunctionType, (, ), ;]
[n, ., getFirstChild, (, ), ;, FunctionType, replacementFnType, =, fnType, ., visit, (, replacer, ), ., toMaybeFunctionType, (, ), ;]
[), ;, FunctionType, replacementFnType, =, fnType, ., visit, (, replacer, ), ., toMaybeFunctionType, (, ), ;, Preconditions, ., checkNotNull, (]
[replacementFnType, =, fnType, ., visit, (, replacer, ), ., toMaybeFunctionType, (, ), ;, Preconditions, ., checkNotNull, (, replacementFnType, ), ;]
[replacementFnType, =, fnType, ., visit, (, replacer, ), ., toMaybeFunctionType, (, ), ;, Preconditions, ., checkNotNull, (, replacementFnType, ), ;]
[visit, (, replacer, ), ., toMaybeFunctionType, (, ), ;, Preconditions, ., checkNotNull, (, replacementFnType, ), ;, callTarget, ., setJSType, (]
[), ., toMaybeFunctionType, (, ), ;, Preconditions, ., checkNotNull, (, replacementFnType, ), ;, callTarget, ., setJSType, (, replacementFnType, ), ;]
[), ., toMaybeFunctionType, (, ), ;, Preconditions, ., checkNotNull, (, replacementFnType, ), ;, callTarget, ., setJSType, (, replacementFnType, ), ;]
[), ;, Preconditions, ., checkNotNull, (, replacementFnType, ), ;, callTarget, ., setJSType, (, replacementFnType, ), ;, n, ., setJSType, (]
[), ;, Preconditions, ., checkNotNull, (, replacementFnType, ), ;, callTarget, ., setJSType, (, replacementFnType, ), ;, n, ., setJSType, (]
[;, callTarget, ., setJSType, (, replacementFnType, ), ;, n, ., setJSType, (, replacementFnType, ., getReturnType, (, ), ), ;, return]
[;, callTarget, ., setJSType, (, replacementFnType, ), ;, n, ., setJSType, (, replacementFnType, ., getReturnType, (, ), ), ;, return]
[), ), ;, return, replacer, ., madeChanges, ;, }, private, FlowScope, traverseNew, (, Node, n, ,, FlowScope, scope, ), {]
[;, return, replacer, ., madeChanges, ;, }, private, FlowScope, traverseNew, (, Node, n, ,, FlowScope, scope, ), {, scope, =]
[replacer, ., madeChanges, ;, }, private, FlowScope, traverseNew, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (]
[madeChanges, ;, }, private, FlowScope, traverseNew, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,]
[(, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, Node, constructor, =]
[(, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, Node, constructor, =]
[=, traverseChildren, (, n, ,, scope, ), ;, Node, constructor, =, n, ., getFirstChild, (, ), ;, JSType, constructorType, =]
[=, traverseChildren, (, n, ,, scope, ), ;, Node, constructor, =, n, ., getFirstChild, (, ), ;, JSType, constructorType, =]
[constructor, =, n, ., getFirstChild, (, ), ;, JSType, constructorType, =, constructor, ., getJSType, (, ), ;, JSType, type, =]
[getFirstChild, (, ), ;, JSType, constructorType, =, constructor, ., getJSType, (, ), ;, JSType, type, =, null, ;, if, (]
[getFirstChild, (, ), ;, JSType, constructorType, =, constructor, ., getJSType, (, ), ;, JSType, type, =, null, ;, if, (]
[), ;, JSType, constructorType, =, constructor, ., getJSType, (, ), ;, JSType, type, =, null, ;, if, (, constructorType, !=]
[constructorType, =, constructor, ., getJSType, (, ), ;, JSType, type, =, null, ;, if, (, constructorType, !=, null, ), {]
[constructor, ., getJSType, (, ), ;, JSType, type, =, null, ;, if, (, constructorType, !=, null, ), {, constructorType, =]
[constructor, ., getJSType, (, ), ;, JSType, type, =, null, ;, if, (, constructorType, !=, null, ), {, constructorType, =]
[=, null, ;, if, (, constructorType, !=, null, ), {, constructorType, =, constructorType, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[=, null, ;, if, (, constructorType, !=, null, ), {, constructorType, =, constructorType, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[null, ), {, constructorType, =, constructorType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, constructorType, ., isUnknownType, (, ), ), {]
[{, constructorType, =, constructorType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, constructorType, ., isUnknownType, (, ), ), {, type, =]
[;, if, (, constructorType, ., isUnknownType, (, ), ), {, type, =, unknownType, ;, }, else, {, FunctionType, ct, =]
[;, if, (, constructorType, ., isUnknownType, (, ), ), {, type, =, unknownType, ;, }, else, {, FunctionType, ct, =]
[), {, type, =, unknownType, ;, }, else, {, FunctionType, ct, =, constructorType, ., toMaybeFunctionType, (, ), ;, if, (]
[), {, type, =, unknownType, ;, }, else, {, FunctionType, ct, =, constructorType, ., toMaybeFunctionType, (, ), ;, if, (]
[), {, type, =, unknownType, ;, }, else, {, FunctionType, ct, =, constructorType, ., toMaybeFunctionType, (, ), ;, if, (]
[type, =, unknownType, ;, }, else, {, FunctionType, ct, =, constructorType, ., toMaybeFunctionType, (, ), ;, if, (, ct, ==]
[unknownType, ;, }, else, {, FunctionType, ct, =, constructorType, ., toMaybeFunctionType, (, ), ;, if, (, ct, ==, null, &&]
[unknownType, ;, }, else, {, FunctionType, ct, =, constructorType, ., toMaybeFunctionType, (, ), ;, if, (, ct, ==, null, &&]
[FunctionType, ct, =, constructorType, ., toMaybeFunctionType, (, ), ;, if, (, ct, ==, null, &&, constructorType, instanceof, FunctionType, ), {]
[=, constructorType, ., toMaybeFunctionType, (, ), ;, if, (, ct, ==, null, &&, constructorType, instanceof, FunctionType, ), {, ct, =]
[toMaybeFunctionType, (, ), ;, if, (, ct, ==, null, &&, constructorType, instanceof, FunctionType, ), {, ct, =, (, FunctionType, )]
[(, ct, ==, null, &&, constructorType, instanceof, FunctionType, ), {, ct, =, (, FunctionType, ), constructorType, ;, }, if, (]
[(, ct, ==, null, &&, constructorType, instanceof, FunctionType, ), {, ct, =, (, FunctionType, ), constructorType, ;, }, if, (]
[(, ct, ==, null, &&, constructorType, instanceof, FunctionType, ), {, ct, =, (, FunctionType, ), constructorType, ;, }, if, (]
[==, null, &&, constructorType, instanceof, FunctionType, ), {, ct, =, (, FunctionType, ), constructorType, ;, }, if, (, ct, !=]
[&&, constructorType, instanceof, FunctionType, ), {, ct, =, (, FunctionType, ), constructorType, ;, }, if, (, ct, !=, null, &&]
[&&, constructorType, instanceof, FunctionType, ), {, ct, =, (, FunctionType, ), constructorType, ;, }, if, (, ct, !=, null, &&]
[=, (, FunctionType, ), constructorType, ;, }, if, (, ct, !=, null, &&, ct, ., isConstructor, (, ), ), {]
[FunctionType, ), constructorType, ;, }, if, (, ct, !=, null, &&, ct, ., isConstructor, (, ), ), {, type, =]
[FunctionType, ), constructorType, ;, }, if, (, ct, !=, null, &&, ct, ., isConstructor, (, ), ), {, type, =]
[(, ct, !=, null, &&, ct, ., isConstructor, (, ), ), {, type, =, ct, ., getInstanceType, (, ), ;]
[!=, null, &&, ct, ., isConstructor, (, ), ), {, type, =, ct, ., getInstanceType, (, ), ;, backwardsInferenceFromCallSite, (]
[&&, ct, ., isConstructor, (, ), ), {, type, =, ct, ., getInstanceType, (, ), ;, backwardsInferenceFromCallSite, (, n, ,]
[), {, type, =, ct, ., getInstanceType, (, ), ;, backwardsInferenceFromCallSite, (, n, ,, ct, ), ;, }, }, }]
[), {, type, =, ct, ., getInstanceType, (, ), ;, backwardsInferenceFromCallSite, (, n, ,, ct, ), ;, }, }, }]
[ct, ., getInstanceType, (, ), ;, backwardsInferenceFromCallSite, (, n, ,, ct, ), ;, }, }, }, n, ., setJSType, (]
[), ;, backwardsInferenceFromCallSite, (, n, ,, ct, ), ;, }, }, }, n, ., setJSType, (, type, ), ;, return]
[(, type, ), ;, return, scope, ;, }, private, BooleanOutcomePair, traverseAnd, (, Node, n, ,, FlowScope, scope, ), {, return]
[), ;, return, scope, ;, }, private, BooleanOutcomePair, traverseAnd, (, Node, n, ,, FlowScope, scope, ), {, return, traverseShortCircuitingBinOp, (]
[return, scope, ;, }, private, BooleanOutcomePair, traverseAnd, (, Node, n, ,, FlowScope, scope, ), {, return, traverseShortCircuitingBinOp, (, n, ,]
[;, }, private, BooleanOutcomePair, traverseAnd, (, Node, n, ,, FlowScope, scope, ), {, return, traverseShortCircuitingBinOp, (, n, ,, scope, ,]
[true, ), ;, }, private, FlowScope, traverseChildren, (, Node, n, ,, FlowScope, scope, ), {, for, (, Node, el, =]
[true, ), ;, }, private, FlowScope, traverseChildren, (, Node, n, ,, FlowScope, scope, ), {, for, (, Node, el, =]
[traverseChildren, (, Node, n, ,, FlowScope, scope, ), {, for, (, Node, el, =, n, ., getFirstChild, (, ), ;]
[traverseChildren, (, Node, n, ,, FlowScope, scope, ), {, for, (, Node, el, =, n, ., getFirstChild, (, ), ;]
[Node, n, ,, FlowScope, scope, ), {, for, (, Node, el, =, n, ., getFirstChild, (, ), ;, el, !=]
[,, FlowScope, scope, ), {, for, (, Node, el, =, n, ., getFirstChild, (, ), ;, el, !=, null, ;]
[scope, ), {, for, (, Node, el, =, n, ., getFirstChild, (, ), ;, el, !=, null, ;, el, =]
[scope, ), {, for, (, Node, el, =, n, ., getFirstChild, (, ), ;, el, !=, null, ;, el, =]
[=, n, ., getFirstChild, (, ), ;, el, !=, null, ;, el, =, el, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, el, !=, null, ;, el, =, el, ., getNext, (, ), ), {, scope, =]
[(, ), ;, el, !=, null, ;, el, =, el, ., getNext, (, ), ), {, scope, =, traverse, (]
[;, el, !=, null, ;, el, =, el, ., getNext, (, ), ), {, scope, =, traverse, (, el, ,]
[el, =, el, ., getNext, (, ), ), {, scope, =, traverse, (, el, ,, scope, ), ;, }, return]
[,, scope, ), ;, }, return, scope, ;, }, private, FlowScope, traverseGetElem, (, Node, n, ,, FlowScope, scope, ), {]
[), ;, }, return, scope, ;, }, private, FlowScope, traverseGetElem, (, Node, n, ,, FlowScope, scope, ), {, scope, =]
[}, return, scope, ;, }, private, FlowScope, traverseGetElem, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (]
[scope, ;, }, private, FlowScope, traverseGetElem, (, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,]
[(, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, ObjectType, objType, =]
[(, Node, n, ,, FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, ObjectType, objType, =]
[FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, ObjectType, objType, =, ObjectType, ., cast, (]
[FlowScope, scope, ), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, ObjectType, objType, =, ObjectType, ., cast, (]
[), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, getJSType, (]
[), {, scope, =, traverseChildren, (, n, ,, scope, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, getJSType, (]
[ObjectType, ., cast, (, getJSType, (, n, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (]
[ObjectType, ., cast, (, getJSType, (, n, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (]
[cast, (, getJSType, (, n, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objType, !=]
[getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objType, !=, null, ), {, JSType, type, =]
[getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, objType, !=, null, ), {, JSType, type, =]
[), ;, if, (, objType, !=, null, ), {, JSType, type, =, objType, ., getParameterType, (, ), ;, if, (]
[), ;, if, (, objType, !=, null, ), {, JSType, type, =, objType, ., getParameterType, (, ), ;, if, (]
[if, (, objType, !=, null, ), {, JSType, type, =, objType, ., getParameterType, (, ), ;, if, (, type, !=]
[!=, null, ), {, JSType, type, =, objType, ., getParameterType, (, ), ;, if, (, type, !=, null, ), {]
[!=, null, ), {, JSType, type, =, objType, ., getParameterType, (, ), ;, if, (, type, !=, null, ), {]
[JSType, type, =, objType, ., getParameterType, (, ), ;, if, (, type, !=, null, ), {, n, ., setJSType, (]
[(, ), ;, if, (, type, !=, null, ), {, n, ., setJSType, (, type, ), ;, }, }, return]
[;, if, (, type, !=, null, ), {, n, ., setJSType, (, type, ), ;, }, }, return, dereferencePointer, (]
[;, if, (, type, !=, null, ), {, n, ., setJSType, (, type, ), ;, }, }, return, dereferencePointer, (]
[), {, n, ., setJSType, (, type, ), ;, }, }, return, dereferencePointer, (, n, ., getFirstChild, (, ), ,]
[), ,, scope, ), ;, }, private, FlowScope, traverseGetProp, (, Node, n, ,, FlowScope, scope, ), {, Node, objNode, =]
[), ,, scope, ), ;, }, private, FlowScope, traverseGetProp, (, Node, n, ,, FlowScope, scope, ), {, Node, objNode, =]
[(, Node, n, ,, FlowScope, scope, ), {, Node, objNode, =, n, ., getFirstChild, (, ), ;, Node, property, =]
[(, Node, n, ,, FlowScope, scope, ), {, Node, objNode, =, n, ., getFirstChild, (, ), ;, Node, property, =]
[), {, Node, objNode, =, n, ., getFirstChild, (, ), ;, Node, property, =, n, ., getLastChild, (, ), ;]
[Node, objNode, =, n, ., getFirstChild, (, ), ;, Node, property, =, n, ., getLastChild, (, ), ;, scope, =]
[=, n, ., getFirstChild, (, ), ;, Node, property, =, n, ., getLastChild, (, ), ;, scope, =, traverseChildren, (]
[., getFirstChild, (, ), ;, Node, property, =, n, ., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,]
[), ;, Node, property, =, n, ., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[), ;, Node, property, =, n, ., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;]
[=, n, ., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (]
[., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getPropertyType, (]
[., getLastChild, (, ), ;, scope, =, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getPropertyType, (]
[=, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getPropertyType, (, objNode, ., getJSType, (, ), ,]
[=, traverseChildren, (, n, ,, scope, ), ;, n, ., setJSType, (, getPropertyType, (, objNode, ., getJSType, (, ), ,]
[), ;, n, ., setJSType, (, getPropertyType, (, objNode, ., getJSType, (, ), ,, property, ., getString, (, ), ,]
[n, ., setJSType, (, getPropertyType, (, objNode, ., getJSType, (, ), ,, property, ., getString, (, ), ,, n, ,]
[(, objNode, ., getJSType, (, ), ,, property, ., getString, (, ), ,, n, ,, scope, ), ), ;, return]
[., getJSType, (, ), ,, property, ., getString, (, ), ,, n, ,, scope, ), ), ;, return, dereferencePointer, (]
[., getJSType, (, ), ,, property, ., getString, (, ), ,, n, ,, scope, ), ), ;, return, dereferencePointer, (]
[., getString, (, ), ,, n, ,, scope, ), ), ;, return, dereferencePointer, (, n, ., getFirstChild, (, ), ,]
[(, ), ,, scope, ), ;, }, private, void, inferPropertyTypesToMatchConstraint, (, JSType, type, ,, JSType, constraint, ), {, if, (]
[(, ), ,, scope, ), ;, }, private, void, inferPropertyTypesToMatchConstraint, (, JSType, type, ,, JSType, constraint, ), {, if, (]
[(, ), ,, scope, ), ;, }, private, void, inferPropertyTypesToMatchConstraint, (, JSType, type, ,, JSType, constraint, ), {, if, (]
[,, scope, ), ;, }, private, void, inferPropertyTypesToMatchConstraint, (, JSType, type, ,, JSType, constraint, ), {, if, (, type, ==]
[), ;, }, private, void, inferPropertyTypesToMatchConstraint, (, JSType, type, ,, JSType, constraint, ), {, if, (, type, ==, null, ||]
[), ;, }, private, void, inferPropertyTypesToMatchConstraint, (, JSType, type, ,, JSType, constraint, ), {, if, (, type, ==, null, ||]
[}, private, void, inferPropertyTypesToMatchConstraint, (, JSType, type, ,, JSType, constraint, ), {, if, (, type, ==, null, ||, constraint, ==]
[type, ,, JSType, constraint, ), {, if, (, type, ==, null, ||, constraint, ==, null, ), {, return, ;, }]
[type, ,, JSType, constraint, ), {, if, (, type, ==, null, ||, constraint, ==, null, ), {, return, ;, }]
[), {, if, (, type, ==, null, ||, constraint, ==, null, ), {, return, ;, }, type, ., matchConstraint, (]
[., matchConstraint, (, constraint, ), ;, }, private, FlowScope, dereferencePointer, (, Node, n, ,, FlowScope, scope, ), {, if, (]
[., matchConstraint, (, constraint, ), ;, }, private, FlowScope, dereferencePointer, (, Node, n, ,, FlowScope, scope, ), {, if, (]
[(, Node, n, ,, FlowScope, scope, ), {, if, (, n, ., isQualifiedName, (, ), ), {, JSType, type, =]
[n, ,, FlowScope, scope, ), {, if, (, n, ., isQualifiedName, (, ), ), {, JSType, type, =, getJSType, (]
[if, (, n, ., isQualifiedName, (, ), ), {, JSType, type, =, getJSType, (, n, ), ;, JSType, narrowed, =]
[if, (, n, ., isQualifiedName, (, ), ), {, JSType, type, =, getJSType, (, n, ), ;, JSType, narrowed, =]
[{, JSType, type, =, getJSType, (, n, ), ;, JSType, narrowed, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[{, JSType, type, =, getJSType, (, n, ), ;, JSType, narrowed, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[type, =, getJSType, (, n, ), ;, JSType, narrowed, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, !=]
[(, n, ), ;, JSType, narrowed, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, !=, narrowed, ), {]
[), ;, JSType, narrowed, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, !=, narrowed, ), {, scope, =]
[JSType, narrowed, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, !=, narrowed, ), {, scope, =, narrowScope, (]
[=, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, !=, narrowed, ), {, scope, =, narrowScope, (, scope, ,]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, type, !=, narrowed, ), {, scope, =, narrowScope, (, scope, ,, n, ,]
[(, type, !=, narrowed, ), {, scope, =, narrowScope, (, scope, ,, n, ,, narrowed, ), ;, }, }, return]
[private, JSType, getPropertyType, (, JSType, objType, ,, String, propName, ,, Node, n, ,, FlowScope, scope, ), {, JSType, propertyType, =]
[objType, ,, String, propName, ,, Node, n, ,, FlowScope, scope, ), {, JSType, propertyType, =, null, ;, boolean, isLocallyInferred, =]
[Node, n, ,, FlowScope, scope, ), {, JSType, propertyType, =, null, ;, boolean, isLocallyInferred, =, false, ;, String, qualifiedName, =]
[Node, n, ,, FlowScope, scope, ), {, JSType, propertyType, =, null, ;, boolean, isLocallyInferred, =, false, ;, String, qualifiedName, =]
[boolean, isLocallyInferred, =, false, ;, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, StaticSlot, <, JSType, >, var, =]
[boolean, isLocallyInferred, =, false, ;, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, StaticSlot, <, JSType, >, var, =]
[;, String, qualifiedName, =, n, ., getQualifiedName, (, ), ;, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (]
[., getQualifiedName, (, ), ;, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (, qualifiedName, ), ;, if, (]
[., getQualifiedName, (, ), ;, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (, qualifiedName, ), ;, if, (]
[(, ), ;, StaticSlot, <, JSType, >, var, =, scope, ., getSlot, (, qualifiedName, ), ;, if, (, var, !=]
[>, var, =, scope, ., getSlot, (, qualifiedName, ), ;, if, (, var, !=, null, ), {, JSType, varType, =]
[>, var, =, scope, ., getSlot, (, qualifiedName, ), ;, if, (, var, !=, null, ), {, JSType, varType, =]
[), ;, if, (, var, !=, null, ), {, JSType, varType, =, var, ., getType, (, ), ;, if, (]
[), ;, if, (, var, !=, null, ), {, JSType, varType, =, var, ., getType, (, ), ;, if, (]
[if, (, var, !=, null, ), {, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=]
[{, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, ), {, boolean, isDeclared, =]
[JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, ), {, boolean, isDeclared, =, !]
[JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, ), {, boolean, isDeclared, =, !]
[(, ), ;, if, (, varType, !=, null, ), {, boolean, isDeclared, =, !, var, ., isTypeInferred, (, ), ;]
[;, if, (, varType, !=, null, ), {, boolean, isDeclared, =, !, var, ., isTypeInferred, (, ), ;, isLocallyInferred, =]
[if, (, varType, !=, null, ), {, boolean, isDeclared, =, !, var, ., isTypeInferred, (, ), ;, isLocallyInferred, =, (]
[if, (, varType, !=, null, ), {, boolean, isDeclared, =, !, var, ., isTypeInferred, (, ), ;, isLocallyInferred, =, (]
[varType, !=, null, ), {, boolean, isDeclared, =, !, var, ., isTypeInferred, (, ), ;, isLocallyInferred, =, (, var, !=]
[varType, !=, null, ), {, boolean, isDeclared, =, !, var, ., isTypeInferred, (, ), ;, isLocallyInferred, =, (, var, !=]
[{, boolean, isDeclared, =, !, var, ., isTypeInferred, (, ), ;, isLocallyInferred, =, (, var, !=, syntacticScope, ., getSlot, (]
[., isTypeInferred, (, ), ;, isLocallyInferred, =, (, var, !=, syntacticScope, ., getSlot, (, qualifiedName, ), ), ;, if, (]
[., isTypeInferred, (, ), ;, isLocallyInferred, =, (, var, !=, syntacticScope, ., getSlot, (, qualifiedName, ), ), ;, if, (]
[(, ), ;, isLocallyInferred, =, (, var, !=, syntacticScope, ., getSlot, (, qualifiedName, ), ), ;, if, (, isDeclared, ||]
[isLocallyInferred, =, (, var, !=, syntacticScope, ., getSlot, (, qualifiedName, ), ), ;, if, (, isDeclared, ||, isLocallyInferred, ), {]
[(, var, !=, syntacticScope, ., getSlot, (, qualifiedName, ), ), ;, if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType, =]
[qualifiedName, ), ), ;, if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType, =, varType, ;, }, }, }, if, (]
[qualifiedName, ), ), ;, if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType, =, varType, ;, }, }, }, if, (]
[qualifiedName, ), ), ;, if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType, =, varType, ;, }, }, }, if, (]
[), ;, if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType, =, varType, ;, }, }, }, if, (, propertyType, ==]
[if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType, =, varType, ;, }, }, }, if, (, propertyType, ==, null, &&]
[if, (, isDeclared, ||, isLocallyInferred, ), {, propertyType, =, varType, ;, }, }, }, if, (, propertyType, ==, null, &&]
[isDeclared, ||, isLocallyInferred, ), {, propertyType, =, varType, ;, }, }, }, if, (, propertyType, ==, null, &&, objType, !=]
[=, varType, ;, }, }, }, if, (, propertyType, ==, null, &&, objType, !=, null, ), {, JSType, foundType, =]
[=, varType, ;, }, }, }, if, (, propertyType, ==, null, &&, objType, !=, null, ), {, JSType, foundType, =]
[}, }, if, (, propertyType, ==, null, &&, objType, !=, null, ), {, JSType, foundType, =, objType, ., findPropertyType, (]
[==, null, &&, objType, !=, null, ), {, JSType, foundType, =, objType, ., findPropertyType, (, propName, ), ;, if, (]
[==, null, &&, objType, !=, null, ), {, JSType, foundType, =, objType, ., findPropertyType, (, propName, ), ;, if, (]
[&&, objType, !=, null, ), {, JSType, foundType, =, objType, ., findPropertyType, (, propName, ), ;, if, (, foundType, !=]
[null, ), {, JSType, foundType, =, objType, ., findPropertyType, (, propName, ), ;, if, (, foundType, !=, null, ), {]
[{, JSType, foundType, =, objType, ., findPropertyType, (, propName, ), ;, if, (, foundType, !=, null, ), {, propertyType, =]
[findPropertyType, (, propName, ), ;, if, (, foundType, !=, null, ), {, propertyType, =, foundType, ;, }, }, if, (]
[findPropertyType, (, propName, ), ;, if, (, foundType, !=, null, ), {, propertyType, =, foundType, ;, }, }, if, (]
[(, propName, ), ;, if, (, foundType, !=, null, ), {, propertyType, =, foundType, ;, }, }, if, (, (]
[(, propName, ), ;, if, (, foundType, !=, null, ), {, propertyType, =, foundType, ;, }, }, if, (, (]
[(, propName, ), ;, if, (, foundType, !=, null, ), {, propertyType, =, foundType, ;, }, }, if, (, (]
[), ;, if, (, foundType, !=, null, ), {, propertyType, =, foundType, ;, }, }, if, (, (, propertyType, ==]
[if, (, foundType, !=, null, ), {, propertyType, =, foundType, ;, }, }, if, (, (, propertyType, ==, null, ||]
[if, (, foundType, !=, null, ), {, propertyType, =, foundType, ;, }, }, if, (, (, propertyType, ==, null, ||]
[propertyType, =, foundType, ;, }, }, if, (, (, propertyType, ==, null, ||, propertyType, ., isUnknownType, (, ), ), &&]
[propertyType, =, foundType, ;, }, }, if, (, (, propertyType, ==, null, ||, propertyType, ., isUnknownType, (, ), ), &&]
[foundType, ;, }, }, if, (, (, propertyType, ==, null, ||, propertyType, ., isUnknownType, (, ), ), &&, qualifiedName, !=]
[(, propertyType, ==, null, ||, propertyType, ., isUnknownType, (, ), ), &&, qualifiedName, !=, null, ), {, ObjectType, regType, =]
[(, propertyType, ==, null, ||, propertyType, ., isUnknownType, (, ), ), &&, qualifiedName, !=, null, ), {, ObjectType, regType, =]
[||, propertyType, ., isUnknownType, (, ), ), &&, qualifiedName, !=, null, ), {, ObjectType, regType, =, ObjectType, ., cast, (]
[||, propertyType, ., isUnknownType, (, ), ), &&, qualifiedName, !=, null, ), {, ObjectType, regType, =, ObjectType, ., cast, (]
[(, ), ), &&, qualifiedName, !=, null, ), {, ObjectType, regType, =, ObjectType, ., cast, (, registry, ., getType, (]
[null, ), {, ObjectType, regType, =, ObjectType, ., cast, (, registry, ., getType, (, qualifiedName, ), ), ;, if, (]
[null, ), {, ObjectType, regType, =, ObjectType, ., cast, (, registry, ., getType, (, qualifiedName, ), ), ;, if, (]
[{, ObjectType, regType, =, ObjectType, ., cast, (, registry, ., getType, (, qualifiedName, ), ), ;, if, (, regType, !=]
[=, ObjectType, ., cast, (, registry, ., getType, (, qualifiedName, ), ), ;, if, (, regType, !=, null, ), {]
[., cast, (, registry, ., getType, (, qualifiedName, ), ), ;, if, (, regType, !=, null, ), {, propertyType, =]
[., cast, (, registry, ., getType, (, qualifiedName, ), ), ;, if, (, regType, !=, null, ), {, propertyType, =]
[;, if, (, regType, !=, null, ), {, propertyType, =, regType, ., getConstructor, (, ), ;, }, }, if, (]
[;, if, (, regType, !=, null, ), {, propertyType, =, regType, ., getConstructor, (, ), ;, }, }, if, (]
[(, regType, !=, null, ), {, propertyType, =, regType, ., getConstructor, (, ), ;, }, }, if, (, propertyType, ==]
[), {, propertyType, =, regType, ., getConstructor, (, ), ;, }, }, if, (, propertyType, ==, null, ), {, return]
[getConstructor, (, ), ;, }, }, if, (, propertyType, ==, null, ), {, return, unknownType, ;, }, else, if, (]
[getConstructor, (, ), ;, }, }, if, (, propertyType, ==, null, ), {, return, unknownType, ;, }, else, if, (]
[getConstructor, (, ), ;, }, }, if, (, propertyType, ==, null, ), {, return, unknownType, ;, }, else, if, (]
[}, }, if, (, propertyType, ==, null, ), {, return, unknownType, ;, }, else, if, (, propertyType, ., isEquivalentTo, (]
[(, propertyType, ==, null, ), {, return, unknownType, ;, }, else, if, (, propertyType, ., isEquivalentTo, (, unknownType, ), &&]
[), {, return, unknownType, ;, }, else, if, (, propertyType, ., isEquivalentTo, (, unknownType, ), &&, isLocallyInferred, ), {, return]
[return, unknownType, ;, }, else, if, (, propertyType, ., isEquivalentTo, (, unknownType, ), &&, isLocallyInferred, ), {, return, getNativeType, (]
[propertyType, ., isEquivalentTo, (, unknownType, ), &&, isLocallyInferred, ), {, return, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ;, }, else, {, return]
[}, else, {, return, propertyType, ;, }, }, private, BooleanOutcomePair, traverseOr, (, Node, n, ,, FlowScope, scope, ), {, return]
[{, return, propertyType, ;, }, }, private, BooleanOutcomePair, traverseOr, (, Node, n, ,, FlowScope, scope, ), {, return, traverseShortCircuitingBinOp, (]
[propertyType, ;, }, }, private, BooleanOutcomePair, traverseOr, (, Node, n, ,, FlowScope, scope, ), {, return, traverseShortCircuitingBinOp, (, n, ,]
[}, }, private, BooleanOutcomePair, traverseOr, (, Node, n, ,, FlowScope, scope, ), {, return, traverseShortCircuitingBinOp, (, n, ,, scope, ,]
[), ;, }, private, BooleanOutcomePair, traverseShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, ,, boolean, condition, ), {, Node, left, =]
[), ;, }, private, BooleanOutcomePair, traverseShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, ,, boolean, condition, ), {, Node, left, =]
[,, FlowScope, scope, ,, boolean, condition, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, right, =]
[,, FlowScope, scope, ,, boolean, condition, ), {, Node, left, =, n, ., getFirstChild, (, ), ;, Node, right, =]
[left, =, n, ., getFirstChild, (, ), ;, Node, right, =, n, ., getLastChild, (, ), ;, BooleanOutcomePair, leftLiterals, =]
[n, ., getFirstChild, (, ), ;, Node, right, =, n, ., getLastChild, (, ), ;, BooleanOutcomePair, leftLiterals, =, traverseWithinShortCircuitingBinOp, (]
[getFirstChild, (, ), ;, Node, right, =, n, ., getLastChild, (, ), ;, BooleanOutcomePair, leftLiterals, =, traverseWithinShortCircuitingBinOp, (, left, ,]
[getFirstChild, (, ), ;, Node, right, =, n, ., getLastChild, (, ), ;, BooleanOutcomePair, leftLiterals, =, traverseWithinShortCircuitingBinOp, (, left, ,]
[(, ), ;, BooleanOutcomePair, leftLiterals, =, traverseWithinShortCircuitingBinOp, (, left, ,, scope, ., createChildFlowScope, (, ), ), ;, JSType, leftType, =]
[(, ), ;, BooleanOutcomePair, leftLiterals, =, traverseWithinShortCircuitingBinOp, (, left, ,, scope, ., createChildFlowScope, (, ), ), ;, JSType, leftType, =]
[,, scope, ., createChildFlowScope, (, ), ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, FlowScope, rightScope, =]
[,, scope, ., createChildFlowScope, (, ), ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, FlowScope, rightScope, =]
[(, ), ), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, FlowScope, rightScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (]
[), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, FlowScope, rightScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, left, ,]
[), ;, JSType, leftType, =, left, ., getJSType, (, ), ;, FlowScope, rightScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, left, ,]
[=, left, ., getJSType, (, ), ;, FlowScope, rightScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, left, ,, leftLiterals, ., getOutcomeFlowScope, (]
[=, left, ., getJSType, (, ), ;, FlowScope, rightScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, left, ,, leftLiterals, ., getOutcomeFlowScope, (]
[;, FlowScope, rightScope, =, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, left, ,, leftLiterals, ., getOutcomeFlowScope, (, left, ., getType, (, ), ,]
[=, reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, left, ,, leftLiterals, ., getOutcomeFlowScope, (, left, ., getType, (, ), ,, condition, ), ,]
[,, leftLiterals, ., getOutcomeFlowScope, (, left, ., getType, (, ), ,, condition, ), ,, condition, ), ;, BooleanOutcomePair, rightLiterals, =]
[., getOutcomeFlowScope, (, left, ., getType, (, ), ,, condition, ), ,, condition, ), ;, BooleanOutcomePair, rightLiterals, =, traverseWithinShortCircuitingBinOp, (]
[(, left, ., getType, (, ), ,, condition, ), ,, condition, ), ;, BooleanOutcomePair, rightLiterals, =, traverseWithinShortCircuitingBinOp, (, right, ,]
[(, left, ., getType, (, ), ,, condition, ), ,, condition, ), ;, BooleanOutcomePair, rightLiterals, =, traverseWithinShortCircuitingBinOp, (, right, ,]
[condition, ), ;, BooleanOutcomePair, rightLiterals, =, traverseWithinShortCircuitingBinOp, (, right, ,, rightScope, ., createChildFlowScope, (, ), ), ;, JSType, rightType, =]
[condition, ), ;, BooleanOutcomePair, rightLiterals, =, traverseWithinShortCircuitingBinOp, (, right, ,, rightScope, ., createChildFlowScope, (, ), ), ;, JSType, rightType, =]
[), ), ;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (]
[), ), ;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (]
[), ), ;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (]
[;, JSType, rightType, =, right, ., getJSType, (, ), ;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (, leftType, !=]
[rightType, =, right, ., getJSType, (, ), ;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (, leftType, !=, null, &&]
[rightType, =, right, ., getJSType, (, ), ;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (, leftType, !=, null, &&]
[right, ., getJSType, (, ), ;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (, leftType, !=, null, &&, rightType, !=]
[(, ), ;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (, leftType, !=, null, &&, rightType, !=, null, ), {]
[;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (, leftType, !=, null, &&, rightType, !=, null, ), {, leftType, =]
[;, JSType, type, ;, BooleanOutcomePair, literals, ;, if, (, leftType, !=, null, &&, rightType, !=, null, ), {, leftType, =]
[BooleanOutcomePair, literals, ;, if, (, leftType, !=, null, &&, rightType, !=, null, ), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (]
[literals, ;, if, (, leftType, !=, null, &&, rightType, !=, null, ), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !]
[!=, null, &&, rightType, !=, null, ), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (]
[!=, null, &&, rightType, !=, null, ), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (]
[!=, null, &&, rightType, !=, null, ), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (]
[!=, null, ), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==]
[!=, null, ), {, leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==]
[leftType, =, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, ., get, (]
[=, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, ), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, ., get, (, !]
[(, !, condition, ), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, ., get, (, !, condition, ), ), {]
[condition, ), ;, if, (, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, ., get, (, !, condition, ), ), {, type, =]
[;, if, (, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, ., get, (, !, condition, ), ), {, type, =, leftType, ;]
[(, leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, ., get, (, !, condition, ), ), {, type, =, leftType, ;, literals, =]
[BooleanLiteralSet, ., get, (, !, condition, ), ), {, type, =, leftType, ;, literals, =, leftLiterals, ;, }, else, {]
[get, (, !, condition, ), ), {, type, =, leftType, ;, literals, =, leftLiterals, ;, }, else, {, type, =]
[get, (, !, condition, ), ), {, type, =, leftType, ;, literals, =, leftLiterals, ;, }, else, {, type, =]
[), ), {, type, =, leftType, ;, literals, =, leftLiterals, ;, }, else, {, type, =, leftType, ., getLeastSupertype, (]
[type, =, leftType, ;, literals, =, leftLiterals, ;, }, else, {, type, =, leftType, ., getLeastSupertype, (, rightType, ), ;]
[leftType, ;, literals, =, leftLiterals, ;, }, else, {, type, =, leftType, ., getLeastSupertype, (, rightType, ), ;, literals, =]
[literals, =, leftLiterals, ;, }, else, {, type, =, leftType, ., getLeastSupertype, (, rightType, ), ;, literals, =, getBooleanOutcomePair, (]
[leftLiterals, ;, }, else, {, type, =, leftType, ., getLeastSupertype, (, rightType, ), ;, literals, =, getBooleanOutcomePair, (, leftLiterals, ,]
[}, else, {, type, =, leftType, ., getLeastSupertype, (, rightType, ), ;, literals, =, getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,]
[., getLeastSupertype, (, rightType, ), ;, literals, =, getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, ), ;, }, if, (]
[., getLeastSupertype, (, rightType, ), ;, literals, =, getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, ), ;, }, if, (]
[., getLeastSupertype, (, rightType, ), ;, literals, =, getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, ), ;, }, if, (]
[., getLeastSupertype, (, rightType, ), ;, literals, =, getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, ), ;, }, if, (]
[), ;, literals, =, getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, ), ;, }, if, (, literals, ., booleanValues, ==]
[), ;, literals, =, getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, ), ;, }, if, (, literals, ., booleanValues, ==]
[getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, ), ;, }, if, (, literals, ., booleanValues, ==, BooleanLiteralSet, ., EMPTY, &&]
[getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, ), ;, }, if, (, literals, ., booleanValues, ==, BooleanLiteralSet, ., EMPTY, &&]
[leftLiterals, ,, rightLiterals, ,, condition, ), ;, }, if, (, literals, ., booleanValues, ==, BooleanLiteralSet, ., EMPTY, &&, getNativeType, (]
[), ;, }, if, (, literals, ., booleanValues, ==, BooleanLiteralSet, ., EMPTY, &&, getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (]
[., booleanValues, ==, BooleanLiteralSet, ., EMPTY, &&, getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, type, ), ), {, if, (]
[., booleanValues, ==, BooleanLiteralSet, ., EMPTY, &&, getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, type, ), ), {, if, (]
[getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, type, ), ), {, if, (, type, ., isUnionType, (, ), ), {]
[BOOLEAN_TYPE, ), ., isSubtype, (, type, ), ), {, if, (, type, ., isUnionType, (, ), ), {, type, =]
[BOOLEAN_TYPE, ), ., isSubtype, (, type, ), ), {, if, (, type, ., isUnionType, (, ), ), {, type, =]
[BOOLEAN_TYPE, ), ., isSubtype, (, type, ), ), {, if, (, type, ., isUnionType, (, ), ), {, type, =]
[{, if, (, type, ., isUnionType, (, ), ), {, type, =, type, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (]
[(, type, ., isUnionType, (, ), ), {, type, =, type, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, getNativeType, (]
[=, type, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, }, }, }, else, {]
[., toMaybeUnionType, (, ), ., getRestrictedUnion, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, }, }, }, else, {, type, =]
[(, ), ., getRestrictedUnion, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, }, }, }, else, {, type, =, null, ;]
[., getRestrictedUnion, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, }, }, }, else, {, type, =, null, ;, literals, =]
[getNativeType, (, BOOLEAN_TYPE, ), ), ;, }, }, }, else, {, type, =, null, ;, literals, =, new, BooleanOutcomePair, (]
[getNativeType, (, BOOLEAN_TYPE, ), ), ;, }, }, }, else, {, type, =, null, ;, literals, =, new, BooleanOutcomePair, (]
[), ;, }, }, }, else, {, type, =, null, ;, literals, =, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,]
[), ;, }, }, }, else, {, type, =, null, ;, literals, =, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,]
[}, else, {, type, =, null, ;, literals, =, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,]
[}, else, {, type, =, null, ;, literals, =, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,]
[;, literals, =, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, leftLiterals, ., getJoinedFlowScope, (, ), ,]
[;, literals, =, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, leftLiterals, ., getJoinedFlowScope, (, ), ,]
[BOTH, ,, BooleanLiteralSet, ., BOTH, ,, leftLiterals, ., getJoinedFlowScope, (, ), ,, rightLiterals, ., getJoinedFlowScope, (, ), ), ;, }]
[BOTH, ,, BooleanLiteralSet, ., BOTH, ,, leftLiterals, ., getJoinedFlowScope, (, ), ,, rightLiterals, ., getJoinedFlowScope, (, ), ), ;, }]
[BOTH, ,, leftLiterals, ., getJoinedFlowScope, (, ), ,, rightLiterals, ., getJoinedFlowScope, (, ), ), ;, }, n, ., setJSType, (]
[getJoinedFlowScope, (, ), ,, rightLiterals, ., getJoinedFlowScope, (, ), ), ;, }, n, ., setJSType, (, type, ), ;, return]
[type, ), ;, return, literals, ;, }, private, BooleanOutcomePair, traverseWithinShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, ), {, switch, (]
[type, ), ;, return, literals, ;, }, private, BooleanOutcomePair, traverseWithinShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, ), {, switch, (]
[BooleanOutcomePair, traverseWithinShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, ), {, switch, (, n, ., getType, (, ), ), {, case]
[BooleanOutcomePair, traverseWithinShortCircuitingBinOp, (, Node, n, ,, FlowScope, scope, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, FlowScope, scope, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., AND, :, return]
[scope, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., AND, :, return, traverseAnd, (]
[{, switch, (, n, ., getType, (, ), ), {, case, Token, ., AND, :, return, traverseAnd, (, n, ,]
[., getType, (, ), ), {, case, Token, ., AND, :, return, traverseAnd, (, n, ,, scope, ), ;, case]
[., getType, (, ), ), {, case, Token, ., AND, :, return, traverseAnd, (, n, ,, scope, ), ;, case]
[{, case, Token, ., AND, :, return, traverseAnd, (, n, ,, scope, ), ;, case, Token, ., OR, :, return]
[Token, ., AND, :, return, traverseAnd, (, n, ,, scope, ), ;, case, Token, ., OR, :, return, traverseOr, (]
[AND, :, return, traverseAnd, (, n, ,, scope, ), ;, case, Token, ., OR, :, return, traverseOr, (, n, ,]
[n, ,, scope, ), ;, case, Token, ., OR, :, return, traverseOr, (, n, ,, scope, ), ;, default, :]
[scope, ), ;, case, Token, ., OR, :, return, traverseOr, (, n, ,, scope, ), ;, default, :, scope, =]
[;, case, Token, ., OR, :, return, traverseOr, (, n, ,, scope, ), ;, default, :, scope, =, traverse, (]
[Token, ., OR, :, return, traverseOr, (, n, ,, scope, ), ;, default, :, scope, =, traverse, (, n, ,]
[return, traverseOr, (, n, ,, scope, ), ;, default, :, scope, =, traverse, (, n, ,, scope, ), ;, return]
[(, n, ,, scope, ), ;, default, :, scope, =, traverse, (, n, ,, scope, ), ;, return, newBooleanOutcomePair, (]
[(, n, ,, scope, ), ;, default, :, scope, =, traverse, (, n, ,, scope, ), ;, return, newBooleanOutcomePair, (]
[default, :, scope, =, traverse, (, n, ,, scope, ), ;, return, newBooleanOutcomePair, (, n, ., getJSType, (, ), ,]
[,, scope, ), ;, }, }, BooleanOutcomePair, getBooleanOutcomePair, (, BooleanOutcomePair, left, ,, BooleanOutcomePair, right, ,, boolean, condition, ), {, return]
[;, }, }, BooleanOutcomePair, getBooleanOutcomePair, (, BooleanOutcomePair, left, ,, BooleanOutcomePair, right, ,, boolean, condition, ), {, return, new, BooleanOutcomePair, (]
[}, BooleanOutcomePair, getBooleanOutcomePair, (, BooleanOutcomePair, left, ,, BooleanOutcomePair, right, ,, boolean, condition, ), {, return, new, BooleanOutcomePair, (, getBooleanOutcomes, (]
[}, BooleanOutcomePair, getBooleanOutcomePair, (, BooleanOutcomePair, left, ,, BooleanOutcomePair, right, ,, boolean, condition, ), {, return, new, BooleanOutcomePair, (, getBooleanOutcomes, (]
[BooleanOutcomePair, left, ,, BooleanOutcomePair, right, ,, boolean, condition, ), {, return, new, BooleanOutcomePair, (, getBooleanOutcomes, (, left, ., toBooleanOutcomes, ,]
[BooleanOutcomePair, left, ,, BooleanOutcomePair, right, ,, boolean, condition, ), {, return, new, BooleanOutcomePair, (, getBooleanOutcomes, (, left, ., toBooleanOutcomes, ,]
[right, ,, boolean, condition, ), {, return, new, BooleanOutcomePair, (, getBooleanOutcomes, (, left, ., toBooleanOutcomes, ,, right, ., toBooleanOutcomes, ,]
[condition, ), {, return, new, BooleanOutcomePair, (, getBooleanOutcomes, (, left, ., toBooleanOutcomes, ,, right, ., toBooleanOutcomes, ,, condition, ), ,]
[{, return, new, BooleanOutcomePair, (, getBooleanOutcomes, (, left, ., toBooleanOutcomes, ,, right, ., toBooleanOutcomes, ,, condition, ), ,, getBooleanOutcomes, (]
[{, return, new, BooleanOutcomePair, (, getBooleanOutcomes, (, left, ., toBooleanOutcomes, ,, right, ., toBooleanOutcomes, ,, condition, ), ,, getBooleanOutcomes, (]
[(, getBooleanOutcomes, (, left, ., toBooleanOutcomes, ,, right, ., toBooleanOutcomes, ,, condition, ), ,, getBooleanOutcomes, (, left, ., booleanValues, ,]
[(, getBooleanOutcomes, (, left, ., toBooleanOutcomes, ,, right, ., toBooleanOutcomes, ,, condition, ), ,, getBooleanOutcomes, (, left, ., booleanValues, ,]
[., toBooleanOutcomes, ,, right, ., toBooleanOutcomes, ,, condition, ), ,, getBooleanOutcomes, (, left, ., booleanValues, ,, right, ., booleanValues, ,]
[right, ., toBooleanOutcomes, ,, condition, ), ,, getBooleanOutcomes, (, left, ., booleanValues, ,, right, ., booleanValues, ,, condition, ), ,]
[right, ., toBooleanOutcomes, ,, condition, ), ,, getBooleanOutcomes, (, left, ., booleanValues, ,, right, ., booleanValues, ,, condition, ), ,]
[,, getBooleanOutcomes, (, left, ., booleanValues, ,, right, ., booleanValues, ,, condition, ), ,, left, ., getJoinedFlowScope, (, ), ,]
[,, getBooleanOutcomes, (, left, ., booleanValues, ,, right, ., booleanValues, ,, condition, ), ,, left, ., getJoinedFlowScope, (, ), ,]
[(, ), ), ;, }, static, BooleanLiteralSet, getBooleanOutcomes, (, BooleanLiteralSet, left, ,, BooleanLiteralSet, right, ,, boolean, condition, ), {, return]
[(, ), ), ;, }, static, BooleanLiteralSet, getBooleanOutcomes, (, BooleanLiteralSet, left, ,, BooleanLiteralSet, right, ,, boolean, condition, ), {, return]
[}, static, BooleanLiteralSet, getBooleanOutcomes, (, BooleanLiteralSet, left, ,, BooleanLiteralSet, right, ,, boolean, condition, ), {, return, right, ., union, (]
[}, static, BooleanLiteralSet, getBooleanOutcomes, (, BooleanLiteralSet, left, ,, BooleanLiteralSet, right, ,, boolean, condition, ), {, return, right, ., union, (]
[(, BooleanLiteralSet, left, ,, BooleanLiteralSet, right, ,, boolean, condition, ), {, return, right, ., union, (, left, ., intersection, (]
[(, BooleanLiteralSet, left, ,, BooleanLiteralSet, right, ,, boolean, condition, ), {, return, right, ., union, (, left, ., intersection, (]
[BooleanLiteralSet, right, ,, boolean, condition, ), {, return, right, ., union, (, left, ., intersection, (, BooleanLiteralSet, ., get, (]
[right, ,, boolean, condition, ), {, return, right, ., union, (, left, ., intersection, (, BooleanLiteralSet, ., get, (, !]
[{, final, BooleanLiteralSet, toBooleanOutcomes, ;, final, BooleanLiteralSet, booleanValues, ;, final, FlowScope, leftScope, ;, final, FlowScope, rightScope, ;, FlowScope, joinedScope, =]
[FlowScope, joinedScope, =, null, ;, BooleanOutcomePair, (, BooleanLiteralSet, toBooleanOutcomes, ,, BooleanLiteralSet, booleanValues, ,, FlowScope, leftScope, ,, FlowScope, rightScope, ), {]
[FlowScope, joinedScope, =, null, ;, BooleanOutcomePair, (, BooleanLiteralSet, toBooleanOutcomes, ,, BooleanLiteralSet, booleanValues, ,, FlowScope, leftScope, ,, FlowScope, rightScope, ), {]
[;, BooleanOutcomePair, (, BooleanLiteralSet, toBooleanOutcomes, ,, BooleanLiteralSet, booleanValues, ,, FlowScope, leftScope, ,, FlowScope, rightScope, ), {, this, ., toBooleanOutcomes, =]
[(, BooleanLiteralSet, toBooleanOutcomes, ,, BooleanLiteralSet, booleanValues, ,, FlowScope, leftScope, ,, FlowScope, rightScope, ), {, this, ., toBooleanOutcomes, =, toBooleanOutcomes, ;]
[(, BooleanLiteralSet, toBooleanOutcomes, ,, BooleanLiteralSet, booleanValues, ,, FlowScope, leftScope, ,, FlowScope, rightScope, ), {, this, ., toBooleanOutcomes, =, toBooleanOutcomes, ;]
[BooleanLiteralSet, booleanValues, ,, FlowScope, leftScope, ,, FlowScope, rightScope, ), {, this, ., toBooleanOutcomes, =, toBooleanOutcomes, ;, this, ., booleanValues, =]
[,, FlowScope, leftScope, ,, FlowScope, rightScope, ), {, this, ., toBooleanOutcomes, =, toBooleanOutcomes, ;, this, ., booleanValues, =, booleanValues, ;]
[,, FlowScope, leftScope, ,, FlowScope, rightScope, ), {, this, ., toBooleanOutcomes, =, toBooleanOutcomes, ;, this, ., booleanValues, =, booleanValues, ;]
[FlowScope, rightScope, ), {, this, ., toBooleanOutcomes, =, toBooleanOutcomes, ;, this, ., booleanValues, =, booleanValues, ;, this, ., leftScope, =]
[), {, this, ., toBooleanOutcomes, =, toBooleanOutcomes, ;, this, ., booleanValues, =, booleanValues, ;, this, ., leftScope, =, leftScope, ;]
[), {, this, ., toBooleanOutcomes, =, toBooleanOutcomes, ;, this, ., booleanValues, =, booleanValues, ;, this, ., leftScope, =, leftScope, ;]
[toBooleanOutcomes, =, toBooleanOutcomes, ;, this, ., booleanValues, =, booleanValues, ;, this, ., leftScope, =, leftScope, ;, this, ., rightScope, =]
[this, ., leftScope, =, leftScope, ;, this, ., rightScope, =, rightScope, ;, }, FlowScope, getJoinedFlowScope, (, ), {, if, (]
[this, ., leftScope, =, leftScope, ;, this, ., rightScope, =, rightScope, ;, }, FlowScope, getJoinedFlowScope, (, ), {, if, (]
[leftScope, =, leftScope, ;, this, ., rightScope, =, rightScope, ;, }, FlowScope, getJoinedFlowScope, (, ), {, if, (, joinedScope, ==]
[., rightScope, =, rightScope, ;, }, FlowScope, getJoinedFlowScope, (, ), {, if, (, joinedScope, ==, null, ), {, if, (]
[., rightScope, =, rightScope, ;, }, FlowScope, getJoinedFlowScope, (, ), {, if, (, joinedScope, ==, null, ), {, if, (]
[=, rightScope, ;, }, FlowScope, getJoinedFlowScope, (, ), {, if, (, joinedScope, ==, null, ), {, if, (, leftScope, ==]
[}, FlowScope, getJoinedFlowScope, (, ), {, if, (, joinedScope, ==, null, ), {, if, (, leftScope, ==, rightScope, ), {]
[getJoinedFlowScope, (, ), {, if, (, joinedScope, ==, null, ), {, if, (, leftScope, ==, rightScope, ), {, joinedScope, =]
[(, joinedScope, ==, null, ), {, if, (, leftScope, ==, rightScope, ), {, joinedScope, =, rightScope, ;, }, else, {]
[==, null, ), {, if, (, leftScope, ==, rightScope, ), {, joinedScope, =, rightScope, ;, }, else, {, joinedScope, =]
[), {, if, (, leftScope, ==, rightScope, ), {, joinedScope, =, rightScope, ;, }, else, {, joinedScope, =, join, (]
[if, (, leftScope, ==, rightScope, ), {, joinedScope, =, rightScope, ;, }, else, {, joinedScope, =, join, (, leftScope, ,]
[{, joinedScope, =, rightScope, ;, }, else, {, joinedScope, =, join, (, leftScope, ,, rightScope, ), ;, }, }, return]
[), ;, }, }, return, joinedScope, ;, }, FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {, if, (]
[), ;, }, }, return, joinedScope, ;, }, FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {, if, (]
[), ;, }, }, return, joinedScope, ;, }, FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {, if, (]
[), ;, }, }, return, joinedScope, ;, }, FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {, if, (]
[}, }, return, joinedScope, ;, }, FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {, if, (, nodeType, ==]
[}, }, return, joinedScope, ;, }, FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {, if, (, nodeType, ==]
[;, }, FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {, if, (, nodeType, ==, Token, ., AND, &&]
[FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {, if, (, nodeType, ==, Token, ., AND, &&, outcome, ||]
[FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {, if, (, nodeType, ==, Token, ., AND, &&, outcome, ||]
[FlowScope, getOutcomeFlowScope, (, int, nodeType, ,, boolean, outcome, ), {, if, (, nodeType, ==, Token, ., AND, &&, outcome, ||]
[(, int, nodeType, ,, boolean, outcome, ), {, if, (, nodeType, ==, Token, ., AND, &&, outcome, ||, nodeType, ==]
[(, int, nodeType, ,, boolean, outcome, ), {, if, (, nodeType, ==, Token, ., AND, &&, outcome, ||, nodeType, ==]
[boolean, outcome, ), {, if, (, nodeType, ==, Token, ., AND, &&, outcome, ||, nodeType, ==, Token, ., OR, &&]
[outcome, ), {, if, (, nodeType, ==, Token, ., AND, &&, outcome, ||, nodeType, ==, Token, ., OR, &&, !]
[(, nodeType, ==, Token, ., AND, &&, outcome, ||, nodeType, ==, Token, ., OR, &&, !, outcome, ), {, return]
[&&, outcome, ||, nodeType, ==, Token, ., OR, &&, !, outcome, ), {, return, rightScope, ;, }, else, {, return]
[getJoinedFlowScope, (, ), ;, }, }, }, private, BooleanOutcomePair, newBooleanOutcomePair, (, JSType, jsType, ,, FlowScope, flowScope, ), {, if, (]
[getJoinedFlowScope, (, ), ;, }, }, }, private, BooleanOutcomePair, newBooleanOutcomePair, (, JSType, jsType, ,, FlowScope, flowScope, ), {, if, (]
[), ;, }, }, }, private, BooleanOutcomePair, newBooleanOutcomePair, (, JSType, jsType, ,, FlowScope, flowScope, ), {, if, (, jsType, ==]
[}, private, BooleanOutcomePair, newBooleanOutcomePair, (, JSType, jsType, ,, FlowScope, flowScope, ), {, if, (, jsType, ==, null, ), {, return]
[newBooleanOutcomePair, (, JSType, jsType, ,, FlowScope, flowScope, ), {, if, (, jsType, ==, null, ), {, return, new, BooleanOutcomePair, (]
[newBooleanOutcomePair, (, JSType, jsType, ,, FlowScope, flowScope, ), {, if, (, jsType, ==, null, ), {, return, new, BooleanOutcomePair, (]
[,, FlowScope, flowScope, ), {, if, (, jsType, ==, null, ), {, return, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,]
[,, FlowScope, flowScope, ), {, if, (, jsType, ==, null, ), {, return, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,]
[{, if, (, jsType, ==, null, ), {, return, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,]
[(, jsType, ==, null, ), {, return, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, flowScope, ,]
[{, return, new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, flowScope, ,, flowScope, ), ;, }, return]
[BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, flowScope, ,, flowScope, ), ;, }, return, new, BooleanOutcomePair, (]
[BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, flowScope, ,, flowScope, ), ;, }, return, new, BooleanOutcomePair, (]
[BooleanLiteralSet, ., BOTH, ,, flowScope, ,, flowScope, ), ;, }, return, new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,]
[BooleanLiteralSet, ., BOTH, ,, flowScope, ,, flowScope, ), ;, }, return, new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,]
[BooleanLiteralSet, ., BOTH, ,, flowScope, ,, flowScope, ), ;, }, return, new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,]
[BooleanLiteralSet, ., BOTH, ,, flowScope, ,, flowScope, ), ;, }, return, new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,]
[flowScope, ,, flowScope, ), ;, }, return, new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,, registry, ., getNativeType, (]
[}, return, new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,, registry, ., getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (]
[BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,, registry, ., getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, jsType, ), ?]
[BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,, registry, ., getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, jsType, ), ?]
[getPossibleToBooleanOutcomes, (, ), ,, registry, ., getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, jsType, ), ?, BooleanLiteralSet, ., BOTH, :]
[getPossibleToBooleanOutcomes, (, ), ,, registry, ., getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, jsType, ), ?, BooleanLiteralSet, ., BOTH, :]
[registry, ., getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, jsType, ), ?, BooleanLiteralSet, ., BOTH, :, BooleanLiteralSet, ., EMPTY, ,]
[getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, jsType, ), ?, BooleanLiteralSet, ., BOTH, :, BooleanLiteralSet, ., EMPTY, ,, flowScope, ,]
[flowScope, ,, flowScope, ), ;, }, private, void, redeclareSimpleVar, (, FlowScope, scope, ,, Node, nameNode, ,, JSType, varType, ), {]
[flowScope, ,, flowScope, ), ;, }, private, void, redeclareSimpleVar, (, FlowScope, scope, ,, Node, nameNode, ,, JSType, varType, ), {]
[;, }, private, void, redeclareSimpleVar, (, FlowScope, scope, ,, Node, nameNode, ,, JSType, varType, ), {, Preconditions, ., checkState, (]
[;, }, private, void, redeclareSimpleVar, (, FlowScope, scope, ,, Node, nameNode, ,, JSType, varType, ), {, Preconditions, ., checkState, (]
[nameNode, ,, JSType, varType, ), {, Preconditions, ., checkState, (, nameNode, ., isName, (, ), ), ;, String, varName, =]
[nameNode, ,, JSType, varType, ), {, Preconditions, ., checkState, (, nameNode, ., isName, (, ), ), ;, String, varName, =]
[checkState, (, nameNode, ., isName, (, ), ), ;, String, varName, =, nameNode, ., getString, (, ), ;, if, (]
[checkState, (, nameNode, ., isName, (, ), ), ;, String, varName, =, nameNode, ., getString, (, ), ;, if, (]
[nameNode, ., isName, (, ), ), ;, String, varName, =, nameNode, ., getString, (, ), ;, if, (, varType, ==]
[(, ), ), ;, String, varName, =, nameNode, ., getString, (, ), ;, if, (, varType, ==, null, ), {]
[), ;, String, varName, =, nameNode, ., getString, (, ), ;, if, (, varType, ==, null, ), {, varType, =]
[String, varName, =, nameNode, ., getString, (, ), ;, if, (, varType, ==, null, ), {, varType, =, getNativeType, (]
[String, varName, =, nameNode, ., getString, (, ), ;, if, (, varType, ==, null, ), {, varType, =, getNativeType, (]
[;, if, (, varType, ==, null, ), {, varType, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, if, (]
[(, varType, ==, null, ), {, varType, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, if, (, isUnflowable, (]
[(, varType, ==, null, ), {, varType, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, if, (, isUnflowable, (]
[), {, varType, =, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, if, (, isUnflowable, (, syntacticScope, ., getVar, (]
[UNKNOWN_TYPE, ), ;, }, if, (, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ), {, return, ;, }]
[UNKNOWN_TYPE, ), ;, }, if, (, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ), {, return, ;, }]
[if, (, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ), {, return, ;, }, scope, ., inferSlotType, (]
[isUnflowable, (, syntacticScope, ., getVar, (, varName, ), ), ), {, return, ;, }, scope, ., inferSlotType, (, varName, ,]
[}, scope, ., inferSlotType, (, varName, ,, varType, ), ;, }, private, boolean, isUnflowable, (, Var, v, ), {, return]
[}, scope, ., inferSlotType, (, varName, ,, varType, ), ;, }, private, boolean, isUnflowable, (, Var, v, ), {, return]
[}, scope, ., inferSlotType, (, varName, ,, varType, ), ;, }, private, boolean, isUnflowable, (, Var, v, ), {, return]
[}, scope, ., inferSlotType, (, varName, ,, varType, ), ;, }, private, boolean, isUnflowable, (, Var, v, ), {, return]
[}, scope, ., inferSlotType, (, varName, ,, varType, ), ;, }, private, boolean, isUnflowable, (, Var, v, ), {, return]
[., inferSlotType, (, varName, ,, varType, ), ;, }, private, boolean, isUnflowable, (, Var, v, ), {, return, v, !=]
[(, varName, ,, varType, ), ;, }, private, boolean, isUnflowable, (, Var, v, ), {, return, v, !=, null, &&]
[(, varName, ,, varType, ), ;, }, private, boolean, isUnflowable, (, Var, v, ), {, return, v, !=, null, &&]
[}, private, boolean, isUnflowable, (, Var, v, ), {, return, v, !=, null, &&, v, ., isLocal, (, ), &&]
[}, private, boolean, isUnflowable, (, Var, v, ), {, return, v, !=, null, &&, v, ., isLocal, (, ), &&]
[v, ), {, return, v, !=, null, &&, v, ., isLocal, (, ), &&, v, ., isMarkedEscaped, (, ), &&]
[v, ), {, return, v, !=, null, &&, v, ., isLocal, (, ), &&, v, ., isMarkedEscaped, (, ), &&]
[v, ), {, return, v, !=, null, &&, v, ., isLocal, (, ), &&, v, ., isMarkedEscaped, (, ), &&]
[null, &&, v, ., isLocal, (, ), &&, v, ., isMarkedEscaped, (, ), &&, v, ., getScope, (, ), ==]
[v, ., getScope, (, ), ==, syntacticScope, ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =]
[v, ., getScope, (, ), ==, syntacticScope, ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =]
[}, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (]
[}, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (]
[JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (, jsType, ==]
[n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return]
[n, ., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return, unknownType, ;, }, else, {, return]
[return, unknownType, ;, }, else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return]
[return, unknownType, ;, }, else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return]
[else, {, return, jsType, ;, }, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, registry, ., getNativeType, (]
