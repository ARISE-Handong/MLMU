[., Visitor, ;, public, class, SemanticReverseAbstractInterpreter, extends, ChainableReverseAbstractInterpreter, {, private, static, final, Function, <, TypePair, ,, TypePair, >, EQ, =]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[>, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==]
[), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||]
[), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||]
[), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||]
[public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==]
[TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return]
[if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return]
[if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return]
[if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return]
[null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderEquality, (]
[null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderEquality, (]
[(, p, ., typeB, ), ;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >, NE, =]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[>, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==]
[), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||]
[), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||]
[), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||]
[public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==]
[TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return]
[if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return]
[if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return]
[if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return]
[null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderInequality, (]
[null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderInequality, (]
[(, p, ., typeB, ), ;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >, SHEQ, =]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[>, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==]
[), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||]
[), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||]
[), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||]
[public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==]
[TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return]
[if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return]
[if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return]
[if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return]
[null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowEquality, (]
[null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowEquality, (]
[(, p, ., typeB, ), ;, }, }, ;, private, static, final, Function, <, TypePair, ,, TypePair, >, SHNE, =]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[<, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (]
[>, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==]
[), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||]
[), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||]
[), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||]
[public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==]
[TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return]
[if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return]
[if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return]
[if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return]
[null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowInequality, (]
[null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowInequality, (]
[getTypesUnderShallowInequality, (, p, ., typeB, ), ;, }, }, ;, private, final, Function, <, TypePair, ,, TypePair, >, INEQ, =]
[Function, <, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, return]
[,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, return, new, TypePair, (]
[>, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, return, new, TypePair, (, getRestrictedWithoutUndefined, (]
[>, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, return, new, TypePair, (, getRestrictedWithoutUndefined, (]
[Override, public, TypePair, apply, (, TypePair, p, ), {, return, new, TypePair, (, getRestrictedWithoutUndefined, (, p, ., typeA, ), ,]
[TypePair, apply, (, TypePair, p, ), {, return, new, TypePair, (, getRestrictedWithoutUndefined, (, p, ., typeA, ), ,, getRestrictedWithoutUndefined, (]
[TypePair, apply, (, TypePair, p, ), {, return, new, TypePair, (, getRestrictedWithoutUndefined, (, p, ., typeA, ), ,, getRestrictedWithoutUndefined, (]
[., typeB, ), ), ;, }, }, ;, public, SemanticReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {, super, (]
[), ), ;, }, }, ;, public, SemanticReverseAbstractInterpreter, (, CodingConvention, convention, ,, JSTypeRegistry, typeRegistry, ), {, super, (, convention, ,]
[}, @, Override, public, FlowScope, getPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, int, operatorToken, =]
[}, @, Override, public, FlowScope, getPreciserScopeKnowingConditionOutcome, (, Node, condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, int, operatorToken, =]
[condition, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, int, operatorToken, =, condition, ., getType, (, ), ;, switch, (]
[,, boolean, outcome, ), {, int, operatorToken, =, condition, ., getType, (, ), ;, switch, (, operatorToken, ), {, case]
[,, boolean, outcome, ), {, int, operatorToken, =, condition, ., getType, (, ), ;, switch, (, operatorToken, ), {, case]
[int, operatorToken, =, condition, ., getType, (, ), ;, switch, (, operatorToken, ), {, case, Token, ., EQ, :, case]
[int, operatorToken, =, condition, ., getType, (, ), ;, switch, (, operatorToken, ), {, case, Token, ., EQ, :, case]
[getType, (, ), ;, switch, (, operatorToken, ), {, case, Token, ., EQ, :, case, Token, ., NE, :, case]
[getType, (, ), ;, switch, (, operatorToken, ), {, case, Token, ., EQ, :, case, Token, ., NE, :, case]
[(, operatorToken, ), {, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case]
[(, operatorToken, ), {, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case]
[Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case]
[Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case]
[SHEQ, :, case, Token, ., SHNE, :, case, Token, ., CASE, :, Node, left, ;, Node, right, ;, if, (]
[SHEQ, :, case, Token, ., SHNE, :, case, Token, ., CASE, :, Node, left, ;, Node, right, ;, if, (]
[case, Token, ., SHNE, :, case, Token, ., CASE, :, Node, left, ;, Node, right, ;, if, (, operatorToken, ==]
[case, Token, ., SHNE, :, case, Token, ., CASE, :, Node, left, ;, Node, right, ;, if, (, operatorToken, ==]
[case, Token, ., CASE, :, Node, left, ;, Node, right, ;, if, (, operatorToken, ==, Token, ., CASE, ), {]
[., CASE, :, Node, left, ;, Node, right, ;, if, (, operatorToken, ==, Token, ., CASE, ), {, left, =]
[., CASE, :, Node, left, ;, Node, right, ;, if, (, operatorToken, ==, Token, ., CASE, ), {, left, =]
[., CASE, :, Node, left, ;, Node, right, ;, if, (, operatorToken, ==, Token, ., CASE, ), {, left, =]
[(, operatorToken, ==, Token, ., CASE, ), {, left, =, condition, ., getParent, (, ), ., getFirstChild, (, ), ;]
[==, Token, ., CASE, ), {, left, =, condition, ., getParent, (, ), ., getFirstChild, (, ), ;, right, =]
[==, Token, ., CASE, ), {, left, =, condition, ., getParent, (, ), ., getFirstChild, (, ), ;, right, =]
[., getParent, (, ), ., getFirstChild, (, ), ;, right, =, condition, ., getFirstChild, (, ), ;, }, else, {]
[(, ), ., getFirstChild, (, ), ;, right, =, condition, ., getFirstChild, (, ), ;, }, else, {, left, =]
[(, ), ., getFirstChild, (, ), ;, right, =, condition, ., getFirstChild, (, ), ;, }, else, {, left, =]
[;, right, =, condition, ., getFirstChild, (, ), ;, }, else, {, left, =, condition, ., getFirstChild, (, ), ;]
[=, condition, ., getFirstChild, (, ), ;, }, else, {, left, =, condition, ., getFirstChild, (, ), ;, right, =]
[=, condition, ., getFirstChild, (, ), ;, }, else, {, left, =, condition, ., getFirstChild, (, ), ;, right, =]
[left, =, condition, ., getFirstChild, (, ), ;, right, =, condition, ., getLastChild, (, ), ;, }, Node, typeOfNode, =]
[(, ), ;, right, =, condition, ., getLastChild, (, ), ;, }, Node, typeOfNode, =, null, ;, Node, stringNode, =]
[=, condition, ., getLastChild, (, ), ;, }, Node, typeOfNode, =, null, ;, Node, stringNode, =, null, ;, if, (]
[=, condition, ., getLastChild, (, ), ;, }, Node, typeOfNode, =, null, ;, Node, stringNode, =, null, ;, if, (]
[=, condition, ., getLastChild, (, ), ;, }, Node, typeOfNode, =, null, ;, Node, stringNode, =, null, ;, if, (]
[;, }, Node, typeOfNode, =, null, ;, Node, stringNode, =, null, ;, if, (, left, ., isTypeOf, (, ), &&]
[;, }, Node, typeOfNode, =, null, ;, Node, stringNode, =, null, ;, if, (, left, ., isTypeOf, (, ), &&]
[Node, stringNode, =, null, ;, if, (, left, ., isTypeOf, (, ), &&, right, ., isString, (, ), ), {]
[=, null, ;, if, (, left, ., isTypeOf, (, ), &&, right, ., isString, (, ), ), {, typeOfNode, =]
[;, if, (, left, ., isTypeOf, (, ), &&, right, ., isString, (, ), ), {, typeOfNode, =, left, ;]
[(, left, ., isTypeOf, (, ), &&, right, ., isString, (, ), ), {, typeOfNode, =, left, ;, stringNode, =]
[&&, right, ., isString, (, ), ), {, typeOfNode, =, left, ;, stringNode, =, right, ;, }, else, if, (]
[&&, right, ., isString, (, ), ), {, typeOfNode, =, left, ;, stringNode, =, right, ;, }, else, if, (]
[&&, right, ., isString, (, ), ), {, typeOfNode, =, left, ;, stringNode, =, right, ;, }, else, if, (]
[), {, typeOfNode, =, left, ;, stringNode, =, right, ;, }, else, if, (, right, ., isTypeOf, (, ), &&]
[), {, typeOfNode, =, left, ;, stringNode, =, right, ;, }, else, if, (, right, ., isTypeOf, (, ), &&]
[=, right, ;, }, else, if, (, right, ., isTypeOf, (, ), &&, left, ., isString, (, ), ), {]
[;, }, else, if, (, right, ., isTypeOf, (, ), &&, left, ., isString, (, ), ), {, typeOfNode, =]
[else, if, (, right, ., isTypeOf, (, ), &&, left, ., isString, (, ), ), {, typeOfNode, =, right, ;]
[(, right, ., isTypeOf, (, ), &&, left, ., isString, (, ), ), {, typeOfNode, =, right, ;, stringNode, =]
[), &&, left, ., isString, (, ), ), {, typeOfNode, =, right, ;, stringNode, =, left, ;, }, if, (]
[), &&, left, ., isString, (, ), ), {, typeOfNode, =, right, ;, stringNode, =, left, ;, }, if, (]
[), &&, left, ., isString, (, ), ), {, typeOfNode, =, right, ;, stringNode, =, left, ;, }, if, (]
[left, ., isString, (, ), ), {, typeOfNode, =, right, ;, stringNode, =, left, ;, }, if, (, typeOfNode, !=]
[isString, (, ), ), {, typeOfNode, =, right, ;, stringNode, =, left, ;, }, if, (, typeOfNode, !=, null, &&]
[isString, (, ), ), {, typeOfNode, =, right, ;, stringNode, =, left, ;, }, if, (, typeOfNode, !=, null, &&]
[), ), {, typeOfNode, =, right, ;, stringNode, =, left, ;, }, if, (, typeOfNode, !=, null, &&, stringNode, !=]
[;, stringNode, =, left, ;, }, if, (, typeOfNode, !=, null, &&, stringNode, !=, null, ), {, Node, operandNode, =]
[;, stringNode, =, left, ;, }, if, (, typeOfNode, !=, null, &&, stringNode, !=, null, ), {, Node, operandNode, =]
[!=, null, &&, stringNode, !=, null, ), {, Node, operandNode, =, typeOfNode, ., getFirstChild, (, ), ;, JSType, operandType, =]
[&&, stringNode, !=, null, ), {, Node, operandNode, =, typeOfNode, ., getFirstChild, (, ), ;, JSType, operandType, =, getTypeIfRefinable, (]
[!=, null, ), {, Node, operandNode, =, typeOfNode, ., getFirstChild, (, ), ;, JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,]
[operandNode, =, typeOfNode, ., getFirstChild, (, ), ;, JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,, blindScope, ), ;, if, (]
[operandNode, =, typeOfNode, ., getFirstChild, (, ), ;, JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,, blindScope, ), ;, if, (]
[typeOfNode, ., getFirstChild, (, ), ;, JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,, blindScope, ), ;, if, (, operandType, !=]
[JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,, blindScope, ), ;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue, =]
[JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,, blindScope, ), ;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue, =]
[JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,, blindScope, ), ;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue, =]
[JSType, operandType, =, getTypeIfRefinable, (, operandNode, ,, blindScope, ), ;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue, =]
[=, getTypeIfRefinable, (, operandNode, ,, blindScope, ), ;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue, =, operatorToken, ==]
[=, getTypeIfRefinable, (, operandNode, ,, blindScope, ), ;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue, =, operatorToken, ==]
[,, blindScope, ), ;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||]
[,, blindScope, ), ;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||]
[), ;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||, operatorToken, ==]
[), ;, if, (, operandType, !=, null, ), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||, operatorToken, ==]
[operandType, !=, null, ), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||, operatorToken, ==, Token, ., SHEQ, ||]
[operandType, !=, null, ), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||, operatorToken, ==, Token, ., SHEQ, ||]
[null, ), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||, operatorToken, ==, Token, ., SHEQ, ||, operatorToken, ==]
[null, ), {, boolean, resultEqualsValue, =, operatorToken, ==, Token, ., EQ, ||, operatorToken, ==, Token, ., SHEQ, ||, operatorToken, ==]
[operatorToken, ==, Token, ., EQ, ||, operatorToken, ==, Token, ., SHEQ, ||, operatorToken, ==, Token, ., CASE, ;, if, (]
[==, Token, ., EQ, ||, operatorToken, ==, Token, ., SHEQ, ||, operatorToken, ==, Token, ., CASE, ;, if, (, !]
[EQ, ||, operatorToken, ==, Token, ., SHEQ, ||, operatorToken, ==, Token, ., CASE, ;, if, (, !, outcome, ), {]
[operatorToken, ==, Token, ., SHEQ, ||, operatorToken, ==, Token, ., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue, =]
[==, Token, ., SHEQ, ||, operatorToken, ==, Token, ., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue, =, !]
[||, operatorToken, ==, Token, ., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return]
[==, Token, ., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return, caseTypeOf, (]
[., CASE, ;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return, caseTypeOf, (, operandNode, ,]
[;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return, caseTypeOf, (, operandNode, ,, operandType, ,]
[;, if, (, !, outcome, ), {, resultEqualsValue, =, !, resultEqualsValue, ;, }, return, caseTypeOf, (, operandNode, ,, operandType, ,]
[{, resultEqualsValue, =, !, resultEqualsValue, ;, }, return, caseTypeOf, (, operandNode, ,, operandType, ,, stringNode, ., getString, (, ), ,]
[=, !, resultEqualsValue, ;, }, return, caseTypeOf, (, operandNode, ,, operandType, ,, stringNode, ., getString, (, ), ,, resultEqualsValue, ,]
[operandNode, ,, operandType, ,, stringNode, ., getString, (, ), ,, resultEqualsValue, ,, blindScope, ), ;, }, }, }, switch, (]
[stringNode, ., getString, (, ), ,, resultEqualsValue, ,, blindScope, ), ;, }, }, }, switch, (, operatorToken, ), {, case]
[stringNode, ., getString, (, ), ,, resultEqualsValue, ,, blindScope, ), ;, }, }, }, switch, (, operatorToken, ), {, case]
[resultEqualsValue, ,, blindScope, ), ;, }, }, }, switch, (, operatorToken, ), {, case, Token, ., AND, :, if, (]
[;, }, }, }, switch, (, operatorToken, ), {, case, Token, ., AND, :, if, (, outcome, ), {, return]
[}, }, switch, (, operatorToken, ), {, case, Token, ., AND, :, if, (, outcome, ), {, return, caseAndOrNotShortCircuiting, (]
[}, }, switch, (, operatorToken, ), {, case, Token, ., AND, :, if, (, outcome, ), {, return, caseAndOrNotShortCircuiting, (]
[{, case, Token, ., AND, :, if, (, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,]
[{, case, Token, ., AND, :, if, (, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,]
[if, (, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,]
[outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,]
[., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, true, ), ;, }, else, {, return]
[(, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, true, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (]
[(, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, true, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (]
[(, ), ,, blindScope, ,, true, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,]
[(, ), ,, blindScope, ,, true, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,]
[), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,]
[}, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,]
[(, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, true, ), ;, }, case]
[(, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, true, ), ;, }, case]
[,, condition, ., getLastChild, (, ), ,, blindScope, ,, true, ), ;, }, case, Token, ., OR, :, if, (]
[condition, ., getLastChild, (, ), ,, blindScope, ,, true, ), ;, }, case, Token, ., OR, :, if, (, !]
[), ,, blindScope, ,, true, ), ;, }, case, Token, ., OR, :, if, (, !, outcome, ), {, return]
[blindScope, ,, true, ), ;, }, case, Token, ., OR, :, if, (, !, outcome, ), {, return, caseAndOrNotShortCircuiting, (]
[blindScope, ,, true, ), ;, }, case, Token, ., OR, :, if, (, !, outcome, ), {, return, caseAndOrNotShortCircuiting, (]
[case, Token, ., OR, :, if, (, !, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,]
[case, Token, ., OR, :, if, (, !, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,]
[(, !, outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,]
[outcome, ), {, return, caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,]
[., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, false, ), ;, }, else, {, return]
[(, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, false, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (]
[(, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, false, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (]
[(, ), ,, blindScope, ,, false, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,]
[(, ), ,, blindScope, ,, false, ), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,]
[), ;, }, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,]
[}, else, {, return, caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,]
[(, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, false, ), ;, }, case]
[(, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, false, ), ;, }, case]
[,, condition, ., getLastChild, (, ), ,, blindScope, ,, false, ), ;, }, case, Token, ., EQ, :, if, (]
[(, ), ,, blindScope, ,, false, ), ;, }, case, Token, ., EQ, :, if, (, outcome, ), {, return]
[,, blindScope, ,, false, ), ;, }, case, Token, ., EQ, :, if, (, outcome, ), {, return, caseEquality, (]
[,, false, ), ;, }, case, Token, ., EQ, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,]
[), ;, }, case, Token, ., EQ, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,]
[:, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }, else, {, return]
[(, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }, else, {, return, caseEquality, (]
[), {, return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }, else, {, return, caseEquality, (, condition, ,]
[return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,]
[blindScope, ,, EQ, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }, case]
[blindScope, ,, EQ, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }, case]
[else, {, return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }, case, Token, ., NE, :, if, (]
[(, condition, ,, blindScope, ,, NE, ), ;, }, case, Token, ., NE, :, if, (, outcome, ), {, return]
[,, blindScope, ,, NE, ), ;, }, case, Token, ., NE, :, if, (, outcome, ), {, return, caseEquality, (]
[,, NE, ), ;, }, case, Token, ., NE, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,]
[), ;, }, case, Token, ., NE, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,]
[:, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }, else, {, return]
[(, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }, else, {, return, caseEquality, (]
[), {, return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }, else, {, return, caseEquality, (, condition, ,]
[return, caseEquality, (, condition, ,, blindScope, ,, NE, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,]
[blindScope, ,, NE, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }, case]
[blindScope, ,, NE, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }, case]
[else, {, return, caseEquality, (, condition, ,, blindScope, ,, EQ, ), ;, }, case, Token, ., SHEQ, :, if, (]
[(, condition, ,, blindScope, ,, EQ, ), ;, }, case, Token, ., SHEQ, :, if, (, outcome, ), {, return]
[,, blindScope, ,, EQ, ), ;, }, case, Token, ., SHEQ, :, if, (, outcome, ), {, return, caseEquality, (]
[,, EQ, ), ;, }, case, Token, ., SHEQ, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,]
[), ;, }, case, Token, ., SHEQ, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,]
[:, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, else, {, return]
[(, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (]
[), {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (, condition, ,]
[return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,]
[blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }, case]
[blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }, case]
[else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }, case, Token, ., SHNE, :, if, (]
[(, condition, ,, blindScope, ,, SHNE, ), ;, }, case, Token, ., SHNE, :, if, (, outcome, ), {, return]
[,, blindScope, ,, SHNE, ), ;, }, case, Token, ., SHNE, :, if, (, outcome, ), {, return, caseEquality, (]
[,, SHNE, ), ;, }, case, Token, ., SHNE, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,]
[), ;, }, case, Token, ., SHNE, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,]
[:, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }, else, {, return]
[(, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }, else, {, return, caseEquality, (]
[), {, return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }, else, {, return, caseEquality, (, condition, ,]
[return, caseEquality, (, condition, ,, blindScope, ,, SHNE, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,]
[blindScope, ,, SHNE, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, case]
[blindScope, ,, SHNE, ), ;, }, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, case]
[}, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, case, Token, ., NAME, :, case]
[}, else, {, return, caseEquality, (, condition, ,, blindScope, ,, SHEQ, ), ;, }, case, Token, ., NAME, :, case]
[(, condition, ,, blindScope, ,, SHEQ, ), ;, }, case, Token, ., NAME, :, case, Token, ., GETPROP, :, return]
[,, blindScope, ,, SHEQ, ), ;, }, case, Token, ., NAME, :, case, Token, ., GETPROP, :, return, caseNameOrGetProp, (]
[,, SHEQ, ), ;, }, case, Token, ., NAME, :, case, Token, ., GETPROP, :, return, caseNameOrGetProp, (, condition, ,]
[), ;, }, case, Token, ., NAME, :, case, Token, ., GETPROP, :, return, caseNameOrGetProp, (, condition, ,, blindScope, ,]
[Token, ., NAME, :, case, Token, ., GETPROP, :, return, caseNameOrGetProp, (, condition, ,, blindScope, ,, outcome, ), ;, case]
[Token, ., NAME, :, case, Token, ., GETPROP, :, return, caseNameOrGetProp, (, condition, ,, blindScope, ,, outcome, ), ;, case]
[Token, ., GETPROP, :, return, caseNameOrGetProp, (, condition, ,, blindScope, ,, outcome, ), ;, case, Token, ., ASSIGN, :, return]
[GETPROP, :, return, caseNameOrGetProp, (, condition, ,, blindScope, ,, outcome, ), ;, case, Token, ., ASSIGN, :, return, firstPreciserScopeKnowingConditionOutcome, (]
[GETPROP, :, return, caseNameOrGetProp, (, condition, ,, blindScope, ,, outcome, ), ;, case, Token, ., ASSIGN, :, return, firstPreciserScopeKnowingConditionOutcome, (]
[,, blindScope, ,, outcome, ), ;, case, Token, ., ASSIGN, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,]
[,, outcome, ), ;, case, Token, ., ASSIGN, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, firstPreciserScopeKnowingConditionOutcome, (]
[,, outcome, ), ;, case, Token, ., ASSIGN, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, firstPreciserScopeKnowingConditionOutcome, (]
[,, outcome, ), ;, case, Token, ., ASSIGN, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, firstPreciserScopeKnowingConditionOutcome, (]
[firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ., getNext, (, ), ,]
[condition, ., getFirstChild, (, ), ,, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ., getNext, (, ), ,, blindScope, ,]
[(, ), ,, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ., getNext, (, ), ,, blindScope, ,, outcome, ), ,]
[(, condition, ., getFirstChild, (, ), ., getNext, (, ), ,, blindScope, ,, outcome, ), ,, outcome, ), ;, case]
[(, condition, ., getFirstChild, (, ), ., getNext, (, ), ,, blindScope, ,, outcome, ), ,, outcome, ), ;, case]
[), ., getNext, (, ), ,, blindScope, ,, outcome, ), ,, outcome, ), ;, case, Token, ., NOT, :, return]
[getNext, (, ), ,, blindScope, ,, outcome, ), ,, outcome, ), ;, case, Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (]
[getNext, (, ), ,, blindScope, ,, outcome, ), ,, outcome, ), ;, case, Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (]
[outcome, ), ,, outcome, ), ;, case, Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,]
[,, outcome, ), ;, case, Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, blindScope, ,]
[outcome, ), ;, case, Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, blindScope, ,, !]
[Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, blindScope, ,, !, outcome, ), ;, case]
[Token, ., NOT, :, return, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, blindScope, ,, !, outcome, ), ;, case]
[firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, blindScope, ,, !, outcome, ), ;, case, Token, ., LE, :, case]
[firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, blindScope, ,, !, outcome, ), ;, case, Token, ., LE, :, case]
[(, ), ,, blindScope, ,, !, outcome, ), ;, case, Token, ., LE, :, case, Token, ., LT, :, case]
[(, ), ,, blindScope, ,, !, outcome, ), ;, case, Token, ., LE, :, case, Token, ., LT, :, case]
[!, outcome, ), ;, case, Token, ., LE, :, case, Token, ., LT, :, case, Token, ., GE, :, case]
[!, outcome, ), ;, case, Token, ., LE, :, case, Token, ., LT, :, case, Token, ., GE, :, case]
[., LE, :, case, Token, ., LT, :, case, Token, ., GE, :, case, Token, ., GT, :, if, (]
[Token, ., LT, :, case, Token, ., GE, :, case, Token, ., GT, :, if, (, outcome, ), {, return]
[LT, :, case, Token, ., GE, :, case, Token, ., GT, :, if, (, outcome, ), {, return, caseEquality, (]
[case, Token, ., GE, :, case, Token, ., GT, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,]
[., GE, :, case, Token, ., GT, :, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,]
[:, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, INEQ, ), ;, }, break, ;, case]
[:, if, (, outcome, ), {, return, caseEquality, (, condition, ,, blindScope, ,, INEQ, ), ;, }, break, ;, case]
[{, return, caseEquality, (, condition, ,, blindScope, ,, INEQ, ), ;, }, break, ;, case, Token, ., INSTANCEOF, :, return]
[caseEquality, (, condition, ,, blindScope, ,, INEQ, ), ;, }, break, ;, case, Token, ., INSTANCEOF, :, return, caseInstanceOf, (]
[caseEquality, (, condition, ,, blindScope, ,, INEQ, ), ;, }, break, ;, case, Token, ., INSTANCEOF, :, return, caseInstanceOf, (]
[INEQ, ), ;, }, break, ;, case, Token, ., INSTANCEOF, :, return, caseInstanceOf, (, condition, ., getFirstChild, (, ), ,]
[INEQ, ), ;, }, break, ;, case, Token, ., INSTANCEOF, :, return, caseInstanceOf, (, condition, ., getFirstChild, (, ), ,]
[case, Token, ., INSTANCEOF, :, return, caseInstanceOf, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,]
[., INSTANCEOF, :, return, caseInstanceOf, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,]
[caseInstanceOf, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, outcome, ), ;, case]
[caseInstanceOf, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, outcome, ), ;, case]
[), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, outcome, ), ;, case, Token, ., IN, :, if, (]
[), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, outcome, ), ;, case, Token, ., IN, :, if, (]
[condition, ., getLastChild, (, ), ,, blindScope, ,, outcome, ), ;, case, Token, ., IN, :, if, (, outcome, &&]
[condition, ., getLastChild, (, ), ,, blindScope, ,, outcome, ), ;, case, Token, ., IN, :, if, (, outcome, &&]
[condition, ., getLastChild, (, ), ,, blindScope, ,, outcome, ), ;, case, Token, ., IN, :, if, (, outcome, &&]
[Token, ., IN, :, if, (, outcome, &&, condition, ., getFirstChild, (, ), ., isString, (, ), ), {, return]
[IN, :, if, (, outcome, &&, condition, ., getFirstChild, (, ), ., isString, (, ), ), {, return, caseIn, (]
[IN, :, if, (, outcome, &&, condition, ., getFirstChild, (, ), ., isString, (, ), ), {, return, caseIn, (]
[condition, ., getFirstChild, (, ), ., isString, (, ), ), {, return, caseIn, (, condition, ., getLastChild, (, ), ,]
[condition, ., getFirstChild, (, ), ., isString, (, ), ), {, return, caseIn, (, condition, ., getLastChild, (, ), ,]
[condition, ., getFirstChild, (, ), ., isString, (, ), ), {, return, caseIn, (, condition, ., getLastChild, (, ), ,]
[{, return, caseIn, (, condition, ., getLastChild, (, ), ,, condition, ., getFirstChild, (, ), ., getString, (, ), ,]
[(, ), ,, condition, ., getFirstChild, (, ), ., getString, (, ), ,, blindScope, ), ;, }, break, ;, case]
[(, ), ,, condition, ., getFirstChild, (, ), ., getString, (, ), ,, blindScope, ), ;, }, break, ;, case]
[), ., getString, (, ), ,, blindScope, ), ;, }, break, ;, case, Token, ., CASE, :, Node, left, =]
[), ., getString, (, ), ,, blindScope, ), ;, }, break, ;, case, Token, ., CASE, :, Node, left, =]
[), ., getString, (, ), ,, blindScope, ), ;, }, break, ;, case, Token, ., CASE, :, Node, left, =]
[Token, ., CASE, :, Node, left, =, condition, ., getParent, (, ), ., getFirstChild, (, ), ;, Node, right, =]
[Token, ., CASE, :, Node, left, =, condition, ., getParent, (, ), ., getFirstChild, (, ), ;, Node, right, =]
[., getParent, (, ), ., getFirstChild, (, ), ;, Node, right, =, condition, ., getFirstChild, (, ), ;, if, (]
[., getFirstChild, (, ), ;, Node, right, =, condition, ., getFirstChild, (, ), ;, if, (, outcome, ), {, return]
[(, ), ;, Node, right, =, condition, ., getFirstChild, (, ), ;, if, (, outcome, ), {, return, caseEquality, (]
[;, Node, right, =, condition, ., getFirstChild, (, ), ;, if, (, outcome, ), {, return, caseEquality, (, left, ,]
[right, =, condition, ., getFirstChild, (, ), ;, if, (, outcome, ), {, return, caseEquality, (, left, ,, right, ,]
[condition, ., getFirstChild, (, ), ;, if, (, outcome, ), {, return, caseEquality, (, left, ,, right, ,, blindScope, ,]
[(, outcome, ), {, return, caseEquality, (, left, ,, right, ,, blindScope, ,, SHEQ, ), ;, }, else, {, return]
[), {, return, caseEquality, (, left, ,, right, ,, blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (]
[return, caseEquality, (, left, ,, right, ,, blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (, left, ,]
[(, left, ,, right, ,, blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (, left, ,, right, ,]
[,, right, ,, blindScope, ,, SHEQ, ), ;, }, else, {, return, caseEquality, (, left, ,, right, ,, blindScope, ,]
[), ;, }, else, {, return, caseEquality, (, left, ,, right, ,, blindScope, ,, SHNE, ), ;, }, }, return]
[}, else, {, return, caseEquality, (, left, ,, right, ,, blindScope, ,, SHNE, ), ;, }, }, return, nextPreciserScopeKnowingConditionOutcome, (]
[{, return, caseEquality, (, left, ,, right, ,, blindScope, ,, SHNE, ), ;, }, }, return, nextPreciserScopeKnowingConditionOutcome, (, condition, ,]
[caseEquality, (, left, ,, right, ,, blindScope, ,, SHNE, ), ;, }, }, return, nextPreciserScopeKnowingConditionOutcome, (, condition, ,, blindScope, ,]
[private, FlowScope, caseEquality, (, Node, condition, ,, FlowScope, blindScope, ,, Function, <, TypePair, ,, TypePair, >, merging, ), {, return]
[caseEquality, (, Node, condition, ,, FlowScope, blindScope, ,, Function, <, TypePair, ,, TypePair, >, merging, ), {, return, caseEquality, (]
[caseEquality, (, Node, condition, ,, FlowScope, blindScope, ,, Function, <, TypePair, ,, TypePair, >, merging, ), {, return, caseEquality, (]
[blindScope, ,, Function, <, TypePair, ,, TypePair, >, merging, ), {, return, caseEquality, (, condition, ., getFirstChild, (, ), ,]
[blindScope, ,, Function, <, TypePair, ,, TypePair, >, merging, ), {, return, caseEquality, (, condition, ., getFirstChild, (, ), ,]
[TypePair, >, merging, ), {, return, caseEquality, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,]
[merging, ), {, return, caseEquality, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,]
[left, ,, Node, right, ,, FlowScope, blindScope, ,, Function, <, TypePair, ,, TypePair, >, merging, ), {, JSType, leftType, =]
[Node, right, ,, FlowScope, blindScope, ,, Function, <, TypePair, ,, TypePair, >, merging, ), {, JSType, leftType, =, getTypeIfRefinable, (]
[,, FlowScope, blindScope, ,, Function, <, TypePair, ,, TypePair, >, merging, ), {, JSType, leftType, =, getTypeIfRefinable, (, left, ,]
[TypePair, >, merging, ), {, JSType, leftType, =, getTypeIfRefinable, (, left, ,, blindScope, ), ;, boolean, leftIsRefineable, ;, if, (]
[TypePair, >, merging, ), {, JSType, leftType, =, getTypeIfRefinable, (, left, ,, blindScope, ), ;, boolean, leftIsRefineable, ;, if, (]
[merging, ), {, JSType, leftType, =, getTypeIfRefinable, (, left, ,, blindScope, ), ;, boolean, leftIsRefineable, ;, if, (, leftType, !=]
[JSType, leftType, =, getTypeIfRefinable, (, left, ,, blindScope, ), ;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {]
[=, getTypeIfRefinable, (, left, ,, blindScope, ), ;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =]
[blindScope, ), ;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {]
[;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =]
[leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =, false, ;]
[if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =]
[if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =]
[;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, ), ;, }, JSType, rightType, =]
[else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (]
[leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,]
[getJSType, (, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (]
[getJSType, (, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (]
[), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=]
[JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {]
[=, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =]
[blindScope, ), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {]
[;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =]
[rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =, false, ;]
[if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =]
[if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =]
[;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, ), ;, }, TypePair, merged, =]
[;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, ), ;, }, TypePair, merged, =]
[rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, ), ;, }, TypePair, merged, =, merging, ., apply, (]
[;, rightType, =, right, ., getJSType, (, ), ;, }, TypePair, merged, =, merging, ., apply, (, new, TypePair, (]
[=, right, ., getJSType, (, ), ;, }, TypePair, merged, =, merging, ., apply, (, new, TypePair, (, leftType, ,]
[;, }, TypePair, merged, =, merging, ., apply, (, new, TypePair, (, leftType, ,, rightType, ), ), ;, if, (]
[;, }, TypePair, merged, =, merging, ., apply, (, new, TypePair, (, leftType, ,, rightType, ), ), ;, if, (]
[TypePair, merged, =, merging, ., apply, (, new, TypePair, (, leftType, ,, rightType, ), ), ;, if, (, merged, !=]
[., apply, (, new, TypePair, (, leftType, ,, rightType, ), ), ;, if, (, merged, !=, null, ), {, return]
[(, new, TypePair, (, leftType, ,, rightType, ), ), ;, if, (, merged, !=, null, ), {, return, maybeRestrictTwoNames, (]
[TypePair, (, leftType, ,, rightType, ), ), ;, if, (, merged, !=, null, ), {, return, maybeRestrictTwoNames, (, blindScope, ,]
[leftType, ,, rightType, ), ), ;, if, (, merged, !=, null, ), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,]
[rightType, ), ), ;, if, (, merged, !=, null, ), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,]
[rightType, ), ), ;, if, (, merged, !=, null, ), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,]
[), ;, if, (, merged, !=, null, ), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?]
[), ;, if, (, merged, !=, null, ), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?]
[merged, !=, null, ), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, merged, ., typeA, :]
[null, ), {, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, merged, ., typeA, :, null, ,]
[{, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, merged, ., typeA, :, null, ,, right, ,]
[maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, merged, ., typeA, :, null, ,, right, ,, rightType, ,]
[maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, merged, ., typeA, :, null, ,, right, ,, rightType, ,]
[blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, merged, ., typeA, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?]
[blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, merged, ., typeA, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?]
[leftType, ,, leftIsRefineable, ?, merged, ., typeA, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, merged, ., typeB, :]
[., typeA, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, merged, ., typeB, :, null, ), ;, }, return]
[private, FlowScope, caseAndOrNotShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, condition, ), {, JSType, leftType, =]
[caseAndOrNotShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, condition, ), {, JSType, leftType, =, getTypeIfRefinable, (]
[Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, condition, ), {, JSType, leftType, =, getTypeIfRefinable, (, left, ,]
[,, boolean, condition, ), {, JSType, leftType, =, getTypeIfRefinable, (, left, ,, blindScope, ), ;, boolean, leftIsRefineable, ;, if, (]
[,, boolean, condition, ), {, JSType, leftType, =, getTypeIfRefinable, (, left, ,, blindScope, ), ;, boolean, leftIsRefineable, ;, if, (]
[condition, ), {, JSType, leftType, =, getTypeIfRefinable, (, left, ,, blindScope, ), ;, boolean, leftIsRefineable, ;, if, (, leftType, !=]
[JSType, leftType, =, getTypeIfRefinable, (, left, ,, blindScope, ), ;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {]
[=, getTypeIfRefinable, (, left, ,, blindScope, ), ;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =]
[blindScope, ), ;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {]
[;, boolean, leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =]
[leftIsRefineable, ;, if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =, false, ;]
[if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =]
[if, (, leftType, !=, null, ), {, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =]
[{, leftIsRefineable, =, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, ), ;]
[=, true, ;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, ), ;, blindScope, =]
[;, }, else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (]
[else, {, leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,]
[leftIsRefineable, =, false, ;, leftType, =, left, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,]
[., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, }, JSType, restrictedLeftType, =]
[., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, }, JSType, restrictedLeftType, =]
[getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, }, JSType, restrictedLeftType, =, (]
[getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, }, JSType, restrictedLeftType, =, (]
[), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, }, JSType, restrictedLeftType, =, (, leftType, ==]
[=, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, }, JSType, restrictedLeftType, =, (, leftType, ==, null, ), ?]
[(, left, ,, blindScope, ,, condition, ), ;, }, JSType, restrictedLeftType, =, (, leftType, ==, null, ), ?, null, :]
[(, left, ,, blindScope, ,, condition, ), ;, }, JSType, restrictedLeftType, =, (, leftType, ==, null, ), ?, null, :]
[,, condition, ), ;, }, JSType, restrictedLeftType, =, (, leftType, ==, null, ), ?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (]
[JSType, restrictedLeftType, =, (, leftType, ==, null, ), ?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, if, (]
[JSType, restrictedLeftType, =, (, leftType, ==, null, ), ?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, if, (]
[=, (, leftType, ==, null, ), ?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, if, (, restrictedLeftType, ==]
[null, ), ?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, if, (, restrictedLeftType, ==, null, ), {, return]
[?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, if, (, restrictedLeftType, ==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome, (]
[:, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, if, (, restrictedLeftType, ==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome, (, right, ,]
[., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, if, (, restrictedLeftType, ==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,]
[(, restrictedLeftType, ==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, JSType, rightType, =]
[==, null, ), {, return, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (]
[), {, return, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,]
[,, condition, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (]
[,, condition, ), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (]
[), ;, }, JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=]
[JSType, rightType, =, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {]
[=, getTypeIfRefinable, (, right, ,, blindScope, ), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =]
[blindScope, ), ;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {]
[;, boolean, rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =]
[rightIsRefineable, ;, if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =, false, ;]
[if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =]
[if, (, rightType, !=, null, ), {, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =]
[{, rightIsRefineable, =, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, ), ;]
[=, true, ;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, ), ;, blindScope, =]
[;, }, else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (]
[else, {, rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,]
[rightIsRefineable, =, false, ;, rightType, =, right, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,]
[right, ., getJSType, (, ), ;, blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, if, (]
[blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, if, (, condition, ), {, JSType, restrictedRightType, =]
[blindScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, if, (, condition, ), {, JSType, restrictedRightType, =]
[=, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, if, (, condition, ), {, JSType, restrictedRightType, =, (]
[=, firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, ), ;, }, if, (, condition, ), {, JSType, restrictedRightType, =, (]
[(, right, ,, blindScope, ,, condition, ), ;, }, if, (, condition, ), {, JSType, restrictedRightType, =, (, rightType, ==]
[blindScope, ,, condition, ), ;, }, if, (, condition, ), {, JSType, restrictedRightType, =, (, rightType, ==, null, ), ?]
[condition, ), ;, }, if, (, condition, ), {, JSType, restrictedRightType, =, (, rightType, ==, null, ), ?, null, :]
[condition, ), ;, }, if, (, condition, ), {, JSType, restrictedRightType, =, (, rightType, ==, null, ), ?, null, :]
[if, (, condition, ), {, JSType, restrictedRightType, =, (, rightType, ==, null, ), ?, null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (]
[{, JSType, restrictedRightType, =, (, rightType, ==, null, ), ?, null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return]
[restrictedRightType, =, (, rightType, ==, null, ), ?, null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (]
[(, rightType, ==, null, ), ?, null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,]
[==, null, ), ?, null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,]
[), ?, null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,]
[), ?, null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,]
[null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?]
[rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :]
[getRestrictedTypeGivenToBooleanOutcome, (, condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :, null, ,]
[condition, ), ;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :, null, ,, right, ,]
[;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :, null, ,, right, ,, rightType, ,]
[;, return, maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :, null, ,, right, ,, rightType, ,]
[maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?]
[blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, restrictedRightType, :]
[,, leftIsRefineable, ?, restrictedLeftType, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, restrictedRightType, :, null, ), ;, }, return]
[private, FlowScope, caseAndOrMaybeShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, condition, ), {, FlowScope, leftScope, =]
[caseAndOrMaybeShortCircuiting, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, condition, ), {, FlowScope, leftScope, =, firstPreciserScopeKnowingConditionOutcome, (]
[Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, condition, ), {, FlowScope, leftScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,]
[,, Node, right, ,, FlowScope, blindScope, ,, boolean, condition, ), {, FlowScope, leftScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,]
[Node, right, ,, FlowScope, blindScope, ,, boolean, condition, ), {, FlowScope, leftScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, !]
[{, FlowScope, leftScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, !, condition, ), ;, StaticSlot, <, JSType, >, leftVar, =]
[{, FlowScope, leftScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, !, condition, ), ;, StaticSlot, <, JSType, >, leftVar, =]
[firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, !, condition, ), ;, StaticSlot, <, JSType, >, leftVar, =, leftScope, ., findUniqueRefinedSlot, (]
[,, !, condition, ), ;, StaticSlot, <, JSType, >, leftVar, =, leftScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (]
[,, !, condition, ), ;, StaticSlot, <, JSType, >, leftVar, =, leftScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (]
[condition, ), ;, StaticSlot, <, JSType, >, leftVar, =, leftScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, leftVar, ==]
[<, JSType, >, leftVar, =, leftScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, leftVar, ==, null, ), {, return]
[., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, leftVar, ==, null, ), {, return, blindScope, ;, }, FlowScope, rightScope, =]
[(, blindScope, ), ;, if, (, leftVar, ==, null, ), {, return, blindScope, ;, }, FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (]
[), ;, if, (, leftVar, ==, null, ), {, return, blindScope, ;, }, FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,]
[if, (, leftVar, ==, null, ), {, return, blindScope, ;, }, FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,]
[==, null, ), {, return, blindScope, ;, }, FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;]
[), {, return, blindScope, ;, }, FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, rightScope, =]
[return, blindScope, ;, }, FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (]
[;, }, FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,]
[FlowScope, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, rightScope, ,]
[rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, ), ;, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, rightScope, ,, !]
[), ;, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, rightScope, ,, !, condition, ), ;, StaticSlot, <, JSType, >, rightVar, =]
[), ;, rightScope, =, firstPreciserScopeKnowingConditionOutcome, (, right, ,, rightScope, ,, !, condition, ), ;, StaticSlot, <, JSType, >, rightVar, =]
[firstPreciserScopeKnowingConditionOutcome, (, right, ,, rightScope, ,, !, condition, ), ;, StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (]
[,, !, condition, ), ;, StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (]
[,, !, condition, ), ;, StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (]
[,, !, condition, ), ;, StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (]
[condition, ), ;, StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, rightVar, ==]
[;, StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, rightVar, ==, null, ||]
[StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, rightVar, ==, null, ||, !]
[StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, rightVar, ==, null, ||, !]
[StaticSlot, <, JSType, >, rightVar, =, rightScope, ., findUniqueRefinedSlot, (, blindScope, ), ;, if, (, rightVar, ==, null, ||, !]
[findUniqueRefinedSlot, (, blindScope, ), ;, if, (, rightVar, ==, null, ||, !, leftVar, ., getName, (, ), ., equals, (]
[findUniqueRefinedSlot, (, blindScope, ), ;, if, (, rightVar, ==, null, ||, !, leftVar, ., getName, (, ), ., equals, (]
[null, ||, !, leftVar, ., getName, (, ), ., equals, (, rightVar, ., getName, (, ), ), ), {, return]
[(, ), ., equals, (, rightVar, ., getName, (, ), ), ), {, return, blindScope, ;, }, JSType, type, =]
[(, ), ., equals, (, rightVar, ., getName, (, ), ), ), {, return, blindScope, ;, }, JSType, type, =]
[(, ), ., equals, (, rightVar, ., getName, (, ), ), ), {, return, blindScope, ;, }, JSType, type, =]
[(, ), ), ), {, return, blindScope, ;, }, JSType, type, =, leftVar, ., getType, (, ), ., getLeastSupertype, (]
[(, ), ), ), {, return, blindScope, ;, }, JSType, type, =, leftVar, ., getType, (, ), ., getLeastSupertype, (]
[type, =, leftVar, ., getType, (, ), ., getLeastSupertype, (, rightVar, ., getType, (, ), ), ;, FlowScope, informed, =]
[type, =, leftVar, ., getType, (, ), ., getLeastSupertype, (, rightVar, ., getType, (, ), ), ;, FlowScope, informed, =]
[), ., getLeastSupertype, (, rightVar, ., getType, (, ), ), ;, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;]
[), ., getLeastSupertype, (, rightVar, ., getType, (, ), ), ;, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;]
[rightVar, ., getType, (, ), ), ;, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, informed, ., inferSlotType, (]
[rightVar, ., getType, (, ), ), ;, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, informed, ., inferSlotType, (]
[;, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, informed, ., inferSlotType, (, leftVar, ., getName, (, ), ,]
[blindScope, ., createChildFlowScope, (, ), ;, informed, ., inferSlotType, (, leftVar, ., getName, (, ), ,, type, ), ;, return]
[}, private, FlowScope, maybeRestrictName, (, FlowScope, blindScope, ,, Node, node, ,, JSType, originalType, ,, JSType, restrictedType, ), {, if, (]
[}, private, FlowScope, maybeRestrictName, (, FlowScope, blindScope, ,, Node, node, ,, JSType, originalType, ,, JSType, restrictedType, ), {, if, (]
[}, private, FlowScope, maybeRestrictName, (, FlowScope, blindScope, ,, Node, node, ,, JSType, originalType, ,, JSType, restrictedType, ), {, if, (]
[FlowScope, maybeRestrictName, (, FlowScope, blindScope, ,, Node, node, ,, JSType, originalType, ,, JSType, restrictedType, ), {, if, (, restrictedType, !=]
[(, FlowScope, blindScope, ,, Node, node, ,, JSType, originalType, ,, JSType, restrictedType, ), {, if, (, restrictedType, !=, null, &&]
[(, FlowScope, blindScope, ,, Node, node, ,, JSType, originalType, ,, JSType, restrictedType, ), {, if, (, restrictedType, !=, null, &&]
[blindScope, ,, Node, node, ,, JSType, originalType, ,, JSType, restrictedType, ), {, if, (, restrictedType, !=, null, &&, restrictedType, !=]
[originalType, ,, JSType, restrictedType, ), {, if, (, restrictedType, !=, null, &&, restrictedType, !=, originalType, ), {, FlowScope, informed, =]
[originalType, ,, JSType, restrictedType, ), {, if, (, restrictedType, !=, null, &&, restrictedType, !=, originalType, ), {, FlowScope, informed, =]
[if, (, restrictedType, !=, null, &&, restrictedType, !=, originalType, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;]
[restrictedType, !=, null, &&, restrictedType, !=, originalType, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (]
[null, &&, restrictedType, !=, originalType, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,]
[restrictedType, !=, originalType, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,, node, ,]
[{, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,, node, ,, restrictedType, ), ;, return]
[blindScope, ., createChildFlowScope, (, ), ;, declareNameInScope, (, informed, ,, node, ,, restrictedType, ), ;, return, informed, ;, }, return]
[,, JSType, originalLeftType, ,, JSType, restrictedLeftType, ,, Node, right, ,, JSType, originalRightType, ,, JSType, restrictedRightType, ), {, boolean, shouldRefineLeft, =]
[,, JSType, originalLeftType, ,, JSType, restrictedLeftType, ,, Node, right, ,, JSType, originalRightType, ,, JSType, restrictedRightType, ), {, boolean, shouldRefineLeft, =]
[,, JSType, originalLeftType, ,, JSType, restrictedLeftType, ,, Node, right, ,, JSType, originalRightType, ,, JSType, restrictedRightType, ), {, boolean, shouldRefineLeft, =]
[originalLeftType, ,, JSType, restrictedLeftType, ,, Node, right, ,, JSType, originalRightType, ,, JSType, restrictedRightType, ), {, boolean, shouldRefineLeft, =, restrictedLeftType, !=]
[JSType, restrictedLeftType, ,, Node, right, ,, JSType, originalRightType, ,, JSType, restrictedRightType, ), {, boolean, shouldRefineLeft, =, restrictedLeftType, !=, null, &&]
[JSType, restrictedLeftType, ,, Node, right, ,, JSType, originalRightType, ,, JSType, restrictedRightType, ), {, boolean, shouldRefineLeft, =, restrictedLeftType, !=, null, &&]
[,, Node, right, ,, JSType, originalRightType, ,, JSType, restrictedRightType, ), {, boolean, shouldRefineLeft, =, restrictedLeftType, !=, null, &&, restrictedLeftType, !=]
[originalRightType, ,, JSType, restrictedRightType, ), {, boolean, shouldRefineLeft, =, restrictedLeftType, !=, null, &&, restrictedLeftType, !=, originalLeftType, ;, boolean, shouldRefineRight, =]
[originalRightType, ,, JSType, restrictedRightType, ), {, boolean, shouldRefineLeft, =, restrictedLeftType, !=, null, &&, restrictedLeftType, !=, originalLeftType, ;, boolean, shouldRefineRight, =]
[originalRightType, ,, JSType, restrictedRightType, ), {, boolean, shouldRefineLeft, =, restrictedLeftType, !=, null, &&, restrictedLeftType, !=, originalLeftType, ;, boolean, shouldRefineRight, =]
[JSType, restrictedRightType, ), {, boolean, shouldRefineLeft, =, restrictedLeftType, !=, null, &&, restrictedLeftType, !=, originalLeftType, ;, boolean, shouldRefineRight, =, restrictedRightType, !=]
[), {, boolean, shouldRefineLeft, =, restrictedLeftType, !=, null, &&, restrictedLeftType, !=, originalLeftType, ;, boolean, shouldRefineRight, =, restrictedRightType, !=, null, &&]
[), {, boolean, shouldRefineLeft, =, restrictedLeftType, !=, null, &&, restrictedLeftType, !=, originalLeftType, ;, boolean, shouldRefineRight, =, restrictedRightType, !=, null, &&]
[boolean, shouldRefineLeft, =, restrictedLeftType, !=, null, &&, restrictedLeftType, !=, originalLeftType, ;, boolean, shouldRefineRight, =, restrictedRightType, !=, null, &&, restrictedRightType, !=]
[!=, null, &&, restrictedLeftType, !=, originalLeftType, ;, boolean, shouldRefineRight, =, restrictedRightType, !=, null, &&, restrictedRightType, !=, originalRightType, ;, if, (]
[!=, null, &&, restrictedLeftType, !=, originalLeftType, ;, boolean, shouldRefineRight, =, restrictedRightType, !=, null, &&, restrictedRightType, !=, originalRightType, ;, if, (]
[&&, restrictedLeftType, !=, originalLeftType, ;, boolean, shouldRefineRight, =, restrictedRightType, !=, null, &&, restrictedRightType, !=, originalRightType, ;, if, (, shouldRefineLeft, ||]
[shouldRefineRight, =, restrictedRightType, !=, null, &&, restrictedRightType, !=, originalRightType, ;, if, (, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope, informed, =]
[shouldRefineRight, =, restrictedRightType, !=, null, &&, restrictedRightType, !=, originalRightType, ;, if, (, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope, informed, =]
[originalRightType, ;, if, (, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, if, (]
[(, shouldRefineLeft, ||, shouldRefineRight, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, if, (, shouldRefineLeft, ), {]
[||, shouldRefineRight, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, if, (, shouldRefineLeft, ), {, declareNameInScope, (]
[), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, if, (, shouldRefineLeft, ), {, declareNameInScope, (, informed, ,]
[FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, if, (, shouldRefineLeft, ), {, declareNameInScope, (, informed, ,, left, ,]
[(, ), ;, if, (, shouldRefineLeft, ), {, declareNameInScope, (, informed, ,, left, ,, restrictedLeftType, ), ;, }, if, (]
[if, (, shouldRefineLeft, ), {, declareNameInScope, (, informed, ,, left, ,, restrictedLeftType, ), ;, }, if, (, shouldRefineRight, ), {]
[shouldRefineLeft, ), {, declareNameInScope, (, informed, ,, left, ,, restrictedLeftType, ), ;, }, if, (, shouldRefineRight, ), {, declareNameInScope, (]
[{, declareNameInScope, (, informed, ,, left, ,, restrictedLeftType, ), ;, }, if, (, shouldRefineRight, ), {, declareNameInScope, (, informed, ,]
[(, informed, ,, left, ,, restrictedLeftType, ), ;, }, if, (, shouldRefineRight, ), {, declareNameInScope, (, informed, ,, right, ,]
[restrictedLeftType, ), ;, }, if, (, shouldRefineRight, ), {, declareNameInScope, (, informed, ,, right, ,, restrictedRightType, ), ;, }, return]
[if, (, shouldRefineRight, ), {, declareNameInScope, (, informed, ,, right, ,, restrictedRightType, ), ;, }, return, informed, ;, }, return]
[blindScope, ;, }, private, FlowScope, caseNameOrGetProp, (, Node, name, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, JSType, type, =]
[}, private, FlowScope, caseNameOrGetProp, (, Node, name, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, JSType, type, =, getTypeIfRefinable, (]
[FlowScope, caseNameOrGetProp, (, Node, name, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, JSType, type, =, getTypeIfRefinable, (, name, ,]
[,, FlowScope, blindScope, ,, boolean, outcome, ), {, JSType, type, =, getTypeIfRefinable, (, name, ,, blindScope, ), ;, if, (]
[,, FlowScope, blindScope, ,, boolean, outcome, ), {, JSType, type, =, getTypeIfRefinable, (, name, ,, blindScope, ), ;, if, (]
[blindScope, ,, boolean, outcome, ), {, JSType, type, =, getTypeIfRefinable, (, name, ,, blindScope, ), ;, if, (, type, !=]
[), {, JSType, type, =, getTypeIfRefinable, (, name, ,, blindScope, ), ;, if, (, type, !=, null, ), {, return]
[JSType, type, =, getTypeIfRefinable, (, name, ,, blindScope, ), ;, if, (, type, !=, null, ), {, return, maybeRestrictName, (]
[=, getTypeIfRefinable, (, name, ,, blindScope, ), ;, if, (, type, !=, null, ), {, return, maybeRestrictName, (, blindScope, ,]
[(, name, ,, blindScope, ), ;, if, (, type, !=, null, ), {, return, maybeRestrictName, (, blindScope, ,, name, ,]
[,, blindScope, ), ;, if, (, type, !=, null, ), {, return, maybeRestrictName, (, blindScope, ,, name, ,, type, ,]
[,, blindScope, ), ;, if, (, type, !=, null, ), {, return, maybeRestrictName, (, blindScope, ,, name, ,, type, ,]
[if, (, type, !=, null, ), {, return, maybeRestrictName, (, blindScope, ,, name, ,, type, ,, type, ., getRestrictedTypeGivenToBooleanOutcome, (]
[{, return, maybeRestrictName, (, blindScope, ,, name, ,, type, ,, type, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), ), ;, }, return]
[FlowScope, caseTypeOf, (, Node, node, ,, JSType, type, ,, String, value, ,, boolean, resultEqualsValue, ,, FlowScope, blindScope, ), {, return]
[(, Node, node, ,, JSType, type, ,, String, value, ,, boolean, resultEqualsValue, ,, FlowScope, blindScope, ), {, return, maybeRestrictName, (]
[node, ,, JSType, type, ,, String, value, ,, boolean, resultEqualsValue, ,, FlowScope, blindScope, ), {, return, maybeRestrictName, (, blindScope, ,]
[JSType, type, ,, String, value, ,, boolean, resultEqualsValue, ,, FlowScope, blindScope, ), {, return, maybeRestrictName, (, blindScope, ,, node, ,]
[,, String, value, ,, boolean, resultEqualsValue, ,, FlowScope, blindScope, ), {, return, maybeRestrictName, (, blindScope, ,, node, ,, type, ,]
[value, ,, boolean, resultEqualsValue, ,, FlowScope, blindScope, ), {, return, maybeRestrictName, (, blindScope, ,, node, ,, type, ,, getRestrictedByTypeOfResult, (]
[boolean, resultEqualsValue, ,, FlowScope, blindScope, ), {, return, maybeRestrictName, (, blindScope, ,, node, ,, type, ,, getRestrictedByTypeOfResult, (, type, ,]
[,, FlowScope, blindScope, ), {, return, maybeRestrictName, (, blindScope, ,, node, ,, type, ,, getRestrictedByTypeOfResult, (, type, ,, value, ,]
[private, FlowScope, caseInstanceOf, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, JSType, leftType, =]
[caseInstanceOf, (, Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, JSType, leftType, =, getTypeIfRefinable, (]
[Node, left, ,, Node, right, ,, FlowScope, blindScope, ,, boolean, outcome, ), {, JSType, leftType, =, getTypeIfRefinable, (, left, ,]
[,, FlowScope, blindScope, ,, boolean, outcome, ), {, JSType, leftType, =, getTypeIfRefinable, (, left, ,, blindScope, ), ;, if, (]
[,, FlowScope, blindScope, ,, boolean, outcome, ), {, JSType, leftType, =, getTypeIfRefinable, (, left, ,, blindScope, ), ;, if, (]
[blindScope, ,, boolean, outcome, ), {, JSType, leftType, =, getTypeIfRefinable, (, left, ,, blindScope, ), ;, if, (, leftType, ==]
[), {, JSType, leftType, =, getTypeIfRefinable, (, left, ,, blindScope, ), ;, if, (, leftType, ==, null, ), {, return]
[(, left, ,, blindScope, ), ;, if, (, leftType, ==, null, ), {, return, blindScope, ;, }, JSType, rightType, =]
[(, left, ,, blindScope, ), ;, if, (, leftType, ==, null, ), {, return, blindScope, ;, }, JSType, rightType, =]
[==, null, ), {, return, blindScope, ;, }, JSType, rightType, =, right, ., getJSType, (, ), ;, ObjectType, targetType, =]
[==, null, ), {, return, blindScope, ;, }, JSType, rightType, =, right, ., getJSType, (, ), ;, ObjectType, targetType, =]
[return, blindScope, ;, }, JSType, rightType, =, right, ., getJSType, (, ), ;, ObjectType, targetType, =, typeRegistry, ., getNativeObjectType, (]
[return, blindScope, ;, }, JSType, rightType, =, right, ., getJSType, (, ), ;, ObjectType, targetType, =, typeRegistry, ., getNativeObjectType, (]
[right, ., getJSType, (, ), ;, ObjectType, targetType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, if, (]
[right, ., getJSType, (, ), ;, ObjectType, targetType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, if, (]
[right, ., getJSType, (, ), ;, ObjectType, targetType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, if, (]
[getJSType, (, ), ;, ObjectType, targetType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, if, (, rightType, !=]
[), ;, ObjectType, targetType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, if, (, rightType, !=, null, &&]
[), ;, ObjectType, targetType, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, if, (, rightType, !=, null, &&]
[getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, if, (, rightType, !=, null, &&, rightType, ., isFunctionType, (, ), ), {]
[JSTypeNative, ., UNKNOWN_TYPE, ), ;, if, (, rightType, !=, null, &&, rightType, ., isFunctionType, (, ), ), {, targetType, =]
[JSTypeNative, ., UNKNOWN_TYPE, ), ;, if, (, rightType, !=, null, &&, rightType, ., isFunctionType, (, ), ), {, targetType, =]
[), ), {, targetType, =, rightType, ., toMaybeFunctionType, (, ), ;, }, Visitor, <, JSType, >, visitor, ;, if, (]
[targetType, =, rightType, ., toMaybeFunctionType, (, ), ;, }, Visitor, <, JSType, >, visitor, ;, if, (, outcome, ), {]
[rightType, ., toMaybeFunctionType, (, ), ;, }, Visitor, <, JSType, >, visitor, ;, if, (, outcome, ), {, visitor, =]
[(, ), ;, }, Visitor, <, JSType, >, visitor, ;, if, (, outcome, ), {, visitor, =, new, RestrictByTrueInstanceOfResultVisitor, (]
[JSType, >, visitor, ;, if, (, outcome, ), {, visitor, =, new, RestrictByTrueInstanceOfResultVisitor, (, targetType, ), ;, }, else, {]
[visitor, ;, if, (, outcome, ), {, visitor, =, new, RestrictByTrueInstanceOfResultVisitor, (, targetType, ), ;, }, else, {, visitor, =]
[(, outcome, ), {, visitor, =, new, RestrictByTrueInstanceOfResultVisitor, (, targetType, ), ;, }, else, {, visitor, =, new, RestrictByFalseInstanceOfResultVisitor, (]
[=, new, RestrictByTrueInstanceOfResultVisitor, (, targetType, ), ;, }, else, {, visitor, =, new, RestrictByFalseInstanceOfResultVisitor, (, targetType, ), ;, }, return]
[RestrictByTrueInstanceOfResultVisitor, (, targetType, ), ;, }, else, {, visitor, =, new, RestrictByFalseInstanceOfResultVisitor, (, targetType, ), ;, }, return, maybeRestrictName, (]
[targetType, ), ;, }, else, {, visitor, =, new, RestrictByFalseInstanceOfResultVisitor, (, targetType, ), ;, }, return, maybeRestrictName, (, blindScope, ,]
[;, }, else, {, visitor, =, new, RestrictByFalseInstanceOfResultVisitor, (, targetType, ), ;, }, return, maybeRestrictName, (, blindScope, ,, left, ,]
[else, {, visitor, =, new, RestrictByFalseInstanceOfResultVisitor, (, targetType, ), ;, }, return, maybeRestrictName, (, blindScope, ,, left, ,, leftType, ,]
[else, {, visitor, =, new, RestrictByFalseInstanceOfResultVisitor, (, targetType, ), ;, }, return, maybeRestrictName, (, blindScope, ,, left, ,, leftType, ,]
[new, RestrictByFalseInstanceOfResultVisitor, (, targetType, ), ;, }, return, maybeRestrictName, (, blindScope, ,, left, ,, leftType, ,, leftType, ., visit, (]
[), ;, }, private, FlowScope, caseIn, (, Node, object, ,, String, propertyName, ,, FlowScope, blindScope, ), {, JSType, jsType, =]
[), ;, }, private, FlowScope, caseIn, (, Node, object, ,, String, propertyName, ,, FlowScope, blindScope, ), {, JSType, jsType, =]
[(, Node, object, ,, String, propertyName, ,, FlowScope, blindScope, ), {, JSType, jsType, =, object, ., getJSType, (, ), ;]
[object, ,, String, propertyName, ,, FlowScope, blindScope, ), {, JSType, jsType, =, object, ., getJSType, (, ), ;, jsType, =]
[object, ,, String, propertyName, ,, FlowScope, blindScope, ), {, JSType, jsType, =, object, ., getJSType, (, ), ;, jsType, =]
[,, FlowScope, blindScope, ), {, JSType, jsType, =, object, ., getJSType, (, ), ;, jsType, =, this, ., getRestrictedWithoutNull, (]
[), {, JSType, jsType, =, object, ., getJSType, (, ), ;, jsType, =, this, ., getRestrictedWithoutNull, (, jsType, ), ;]
[JSType, jsType, =, object, ., getJSType, (, ), ;, jsType, =, this, ., getRestrictedWithoutNull, (, jsType, ), ;, jsType, =]
[JSType, jsType, =, object, ., getJSType, (, ), ;, jsType, =, this, ., getRestrictedWithoutNull, (, jsType, ), ;, jsType, =]
[., getJSType, (, ), ;, jsType, =, this, ., getRestrictedWithoutNull, (, jsType, ), ;, jsType, =, this, ., getRestrictedWithoutUndefined, (]
[=, this, ., getRestrictedWithoutNull, (, jsType, ), ;, jsType, =, this, ., getRestrictedWithoutUndefined, (, jsType, ), ;, boolean, hasProperty, =]
[jsType, ), ;, jsType, =, this, ., getRestrictedWithoutUndefined, (, jsType, ), ;, boolean, hasProperty, =, false, ;, ObjectType, objectType, =]
[jsType, ), ;, jsType, =, this, ., getRestrictedWithoutUndefined, (, jsType, ), ;, boolean, hasProperty, =, false, ;, ObjectType, objectType, =]
[=, this, ., getRestrictedWithoutUndefined, (, jsType, ), ;, boolean, hasProperty, =, false, ;, ObjectType, objectType, =, ObjectType, ., cast, (]
[jsType, ), ;, boolean, hasProperty, =, false, ;, ObjectType, objectType, =, ObjectType, ., cast, (, jsType, ), ;, if, (]
[jsType, ), ;, boolean, hasProperty, =, false, ;, ObjectType, objectType, =, ObjectType, ., cast, (, jsType, ), ;, if, (]
[;, boolean, hasProperty, =, false, ;, ObjectType, objectType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, objectType, !=]
[=, false, ;, ObjectType, objectType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, objectType, !=, null, ), {]
[;, ObjectType, objectType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, objectType, !=, null, ), {, hasProperty, =]
[;, ObjectType, objectType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, objectType, !=, null, ), {, hasProperty, =]
[ObjectType, ., cast, (, jsType, ), ;, if, (, objectType, !=, null, ), {, hasProperty, =, objectType, ., hasProperty, (]
[;, if, (, objectType, !=, null, ), {, hasProperty, =, objectType, ., hasProperty, (, propertyName, ), ;, }, if, (]
[if, (, objectType, !=, null, ), {, hasProperty, =, objectType, ., hasProperty, (, propertyName, ), ;, }, if, (, !]
[{, hasProperty, =, objectType, ., hasProperty, (, propertyName, ), ;, }, if, (, !, hasProperty, ), {, String, qualifiedName, =]
[{, hasProperty, =, objectType, ., hasProperty, (, propertyName, ), ;, }, if, (, !, hasProperty, ), {, String, qualifiedName, =]
[), ;, }, if, (, !, hasProperty, ), {, String, qualifiedName, =, object, ., getQualifiedName, (, ), ;, if, (]
[), ;, }, if, (, !, hasProperty, ), {, String, qualifiedName, =, object, ., getQualifiedName, (, ), ;, if, (]
[}, if, (, !, hasProperty, ), {, String, qualifiedName, =, object, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=]
[{, String, qualifiedName, =, object, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, String, propertyQualifiedName, =]
[{, String, qualifiedName, =, object, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, String, propertyQualifiedName, =]
[{, String, qualifiedName, =, object, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, String, propertyQualifiedName, =]
[qualifiedName, =, object, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, String, propertyQualifiedName, =, qualifiedName, +]
[object, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, String, propertyQualifiedName, =, qualifiedName, +, ".", +]
[), ;, if, (, qualifiedName, !=, null, ), {, String, propertyQualifiedName, =, qualifiedName, +, ".", +, propertyName, ;, if, (]
[), ;, if, (, qualifiedName, !=, null, ), {, String, propertyQualifiedName, =, qualifiedName, +, ".", +, propertyName, ;, if, (]
[), ;, if, (, qualifiedName, !=, null, ), {, String, propertyQualifiedName, =, qualifiedName, +, ".", +, propertyName, ;, if, (]
[qualifiedName, !=, null, ), {, String, propertyQualifiedName, =, qualifiedName, +, ".", +, propertyName, ;, if, (, blindScope, ., getSlot, (]
[), {, String, propertyQualifiedName, =, qualifiedName, +, ".", +, propertyName, ;, if, (, blindScope, ., getSlot, (, propertyQualifiedName, ), ==]
[+, ".", +, propertyName, ;, if, (, blindScope, ., getSlot, (, propertyQualifiedName, ), ==, null, ), {, FlowScope, informed, =]
[+, ".", +, propertyName, ;, if, (, blindScope, ., getSlot, (, propertyQualifiedName, ), ==, null, ), {, FlowScope, informed, =]
[getSlot, (, propertyQualifiedName, ), ==, null, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, JSType, unknownType, =]
[getSlot, (, propertyQualifiedName, ), ==, null, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, JSType, unknownType, =]
[==, null, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, JSType, unknownType, =, typeRegistry, ., getNativeType, (]
[==, null, ), {, FlowScope, informed, =, blindScope, ., createChildFlowScope, (, ), ;, JSType, unknownType, =, typeRegistry, ., getNativeType, (]
[informed, =, blindScope, ., createChildFlowScope, (, ), ;, JSType, unknownType, =, typeRegistry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;]
[informed, =, blindScope, ., createChildFlowScope, (, ), ;, JSType, unknownType, =, typeRegistry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;]
[createChildFlowScope, (, ), ;, JSType, unknownType, =, typeRegistry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, informed, ., inferQualifiedSlot, (]
[), ;, JSType, unknownType, =, typeRegistry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, informed, ., inferQualifiedSlot, (, object, ,]
[JSType, unknownType, =, typeRegistry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, informed, ., inferQualifiedSlot, (, object, ,, propertyQualifiedName, ,]
[=, typeRegistry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, informed, ., inferQualifiedSlot, (, object, ,, propertyQualifiedName, ,, unknownType, ,]
[(, JSTypeNative, ., UNKNOWN_TYPE, ), ;, informed, ., inferQualifiedSlot, (, object, ,, propertyQualifiedName, ,, unknownType, ,, unknownType, ), ;, return]
[informed, ., inferQualifiedSlot, (, object, ,, propertyQualifiedName, ,, unknownType, ,, unknownType, ), ;, return, informed, ;, }, }, }, return]
[blindScope, ;, }, private, class, RestrictByTrueInstanceOfResultVisitor, extends, RestrictByTrueTypeOfResultVisitor, {, private, final, ObjectType, target, ;, RestrictByTrueInstanceOfResultVisitor, (, ObjectType, target, ), {]
[blindScope, ;, }, private, class, RestrictByTrueInstanceOfResultVisitor, extends, RestrictByTrueTypeOfResultVisitor, {, private, final, ObjectType, target, ;, RestrictByTrueInstanceOfResultVisitor, (, ObjectType, target, ), {]
[class, RestrictByTrueInstanceOfResultVisitor, extends, RestrictByTrueTypeOfResultVisitor, {, private, final, ObjectType, target, ;, RestrictByTrueInstanceOfResultVisitor, (, ObjectType, target, ), {, this, ., target, =]
[), {, this, ., target, =, target, ;, }, @, Override, protected, JSType, caseTopType, (, JSType, type, ), {, return]
[this, ., target, =, target, ;, }, @, Override, protected, JSType, caseTopType, (, JSType, type, ), {, return, applyCommonRestriction, (]
[), {, return, applyCommonRestriction, (, type, ), ;, }, @, Override, public, JSType, caseUnknownType, (, ), {, FunctionType, funcTarget, =]
[), {, return, applyCommonRestriction, (, type, ), ;, }, @, Override, public, JSType, caseUnknownType, (, ), {, FunctionType, funcTarget, =]
[(, type, ), ;, }, @, Override, public, JSType, caseUnknownType, (, ), {, FunctionType, funcTarget, =, JSType, ., toMaybeFunctionType, (]
[@, Override, public, JSType, caseUnknownType, (, ), {, FunctionType, funcTarget, =, JSType, ., toMaybeFunctionType, (, target, ), ;, if, (]
[@, Override, public, JSType, caseUnknownType, (, ), {, FunctionType, funcTarget, =, JSType, ., toMaybeFunctionType, (, target, ), ;, if, (]
[@, Override, public, JSType, caseUnknownType, (, ), {, FunctionType, funcTarget, =, JSType, ., toMaybeFunctionType, (, target, ), ;, if, (]
[public, JSType, caseUnknownType, (, ), {, FunctionType, funcTarget, =, JSType, ., toMaybeFunctionType, (, target, ), ;, if, (, funcTarget, !=]
[caseUnknownType, (, ), {, FunctionType, funcTarget, =, JSType, ., toMaybeFunctionType, (, target, ), ;, if, (, funcTarget, !=, null, &&]
[caseUnknownType, (, ), {, FunctionType, funcTarget, =, JSType, ., toMaybeFunctionType, (, target, ), ;, if, (, funcTarget, !=, null, &&]
[., toMaybeFunctionType, (, target, ), ;, if, (, funcTarget, !=, null, &&, funcTarget, ., hasInstanceType, (, ), ), {, return]
[., toMaybeFunctionType, (, target, ), ;, if, (, funcTarget, !=, null, &&, funcTarget, ., hasInstanceType, (, ), ), {, return]
[funcTarget, !=, null, &&, funcTarget, ., hasInstanceType, (, ), ), {, return, funcTarget, ., getInstanceType, (, ), ;, }, return]
[null, &&, funcTarget, ., hasInstanceType, (, ), ), {, return, funcTarget, ., getInstanceType, (, ), ;, }, return, getNativeType, (]
[;, }, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return]
[return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, return, applyCommonRestriction, (]
[), {, return, applyCommonRestriction, (, type, ), ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, return]
[return, applyCommonRestriction, (, type, ), ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, return, applyCommonRestriction, (]
[), {, return, applyCommonRestriction, (, type, ), ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return]
[return, applyCommonRestriction, (, type, ), ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return, caseObjectType, (]
[type, ), {, return, caseObjectType, (, type, ), ;, }, private, JSType, applyCommonRestriction, (, JSType, type, ), {, if, (]
[type, ), {, return, caseObjectType, (, type, ), ;, }, private, JSType, applyCommonRestriction, (, JSType, type, ), {, if, (]
[;, }, private, JSType, applyCommonRestriction, (, JSType, type, ), {, if, (, target, ., isUnknownType, (, ), ), {, return]
[JSType, type, ), {, if, (, target, ., isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =]
[JSType, type, ), {, if, (, target, ., isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =]
[isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (]
[isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (]
[}, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, return]
[}, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, return]
[target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, return, type, ., getGreatestSubtype, (]
[target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, return, type, ., getGreatestSubtype, (]
[., hasInstanceType, (, ), ), {, return, type, ., getGreatestSubtype, (, funcTarget, ., getInstanceType, (, ), ), ;, }, return]
[;, }, }, private, class, RestrictByFalseInstanceOfResultVisitor, extends, RestrictByFalseTypeOfResultVisitor, {, private, final, ObjectType, target, ;, RestrictByFalseInstanceOfResultVisitor, (, ObjectType, target, ), {]
[;, }, }, private, class, RestrictByFalseInstanceOfResultVisitor, extends, RestrictByFalseTypeOfResultVisitor, {, private, final, ObjectType, target, ;, RestrictByFalseInstanceOfResultVisitor, (, ObjectType, target, ), {]
[class, RestrictByFalseInstanceOfResultVisitor, extends, RestrictByFalseTypeOfResultVisitor, {, private, final, ObjectType, target, ;, RestrictByFalseInstanceOfResultVisitor, (, ObjectType, target, ), {, this, ., target, =]
[{, this, ., target, =, target, ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, if, (]
[{, this, ., target, =, target, ;, }, @, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, if, (]
[@, Override, public, JSType, caseObjectType, (, ObjectType, type, ), {, if, (, target, ., isUnknownType, (, ), ), {, return]
[ObjectType, type, ), {, if, (, target, ., isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =]
[ObjectType, type, ), {, if, (, target, ., isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =]
[isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (]
[isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (]
[FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, if, (]
[FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, if, (]
[., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, if, (, type, ., isSubtype, (]
[., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, if, (, type, ., isSubtype, (]
[hasInstanceType, (, ), ), {, if, (, type, ., isSubtype, (, funcTarget, ., getInstanceType, (, ), ), ), {, return]
[{, if, (, type, ., isSubtype, (, funcTarget, ., getInstanceType, (, ), ), ), {, return, null, ;, }, return]
[., isSubtype, (, funcTarget, ., getInstanceType, (, ), ), ), {, return, null, ;, }, return, type, ;, }, return]
[return, type, ;, }, return, null, ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, if, (]
[return, type, ;, }, return, null, ;, }, @, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, if, (]
[@, Override, public, JSType, caseUnionType, (, UnionType, type, ), {, if, (, target, ., isUnknownType, (, ), ), {, return]
[UnionType, type, ), {, if, (, target, ., isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =]
[UnionType, type, ), {, if, (, target, ., isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =]
[isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (]
[isUnknownType, (, ), ), {, return, type, ;, }, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (]
[}, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, return]
[}, FunctionType, funcTarget, =, target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, return]
[target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, return, type, ., getRestrictedUnion, (]
[target, ., toMaybeFunctionType, (, ), ;, if, (, funcTarget, ., hasInstanceType, (, ), ), {, return, type, ., getRestrictedUnion, (]
[., hasInstanceType, (, ), ), {, return, type, ., getRestrictedUnion, (, funcTarget, ., getInstanceType, (, ), ), ;, }, return]
[(, ), ), ;, }, return, null, ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return]
[), ;, }, return, null, ;, }, @, Override, public, JSType, caseFunctionType, (, FunctionType, type, ), {, return, caseObjectType, (]
