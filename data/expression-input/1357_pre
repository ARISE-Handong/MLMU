[List, ;, import, java, ., util, ., Locale, ;, class, PeepholeReplaceKnownMethods, extends, AbstractPeepholeOptimization, {, private, static, final, Locale, ROOT_LOCALE, =]
[java, ., util, ., Locale, ;, class, PeepholeReplaceKnownMethods, extends, AbstractPeepholeOptimization, {, private, static, final, Locale, ROOT_LOCALE, =, new, Locale, (]
[Locale, ROOT_LOCALE, =, new, Locale, (, "", ), ;, private, final, boolean, late, ;, PeepholeReplaceKnownMethods, (, boolean, late, ), {]
[Locale, ROOT_LOCALE, =, new, Locale, (, "", ), ;, private, final, boolean, late, ;, PeepholeReplaceKnownMethods, (, boolean, late, ), {]
[Locale, (, "", ), ;, private, final, boolean, late, ;, PeepholeReplaceKnownMethods, (, boolean, late, ), {, this, ., late, =]
[), {, this, ., late, =, late, ;, }, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (]
[), {, this, ., late, =, late, ;, }, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (]
[}, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, subtree, ., isCall, (, ), ), {, return]
[Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, subtree, ., isCall, (, ), ), {, return, tryFoldKnownMethods, (]
[subtree, ), {, if, (, subtree, ., isCall, (, ), ), {, return, tryFoldKnownMethods, (, subtree, ), ;, }, return]
[{, return, tryFoldKnownMethods, (, subtree, ), ;, }, return, subtree, ;, }, private, Node, tryFoldKnownMethods, (, Node, subtree, ), {]
[tryFoldKnownMethods, (, subtree, ), ;, }, return, subtree, ;, }, private, Node, tryFoldKnownMethods, (, Node, subtree, ), {, subtree, =]
[subtree, ), ;, }, return, subtree, ;, }, private, Node, tryFoldKnownMethods, (, Node, subtree, ), {, subtree, =, tryFoldArrayJoin, (]
[subtree, ;, }, private, Node, tryFoldKnownMethods, (, Node, subtree, ), {, subtree, =, tryFoldArrayJoin, (, subtree, ), ;, if, (]
[subtree, ;, }, private, Node, tryFoldKnownMethods, (, Node, subtree, ), {, subtree, =, tryFoldArrayJoin, (, subtree, ), ;, if, (]
[{, subtree, =, tryFoldArrayJoin, (, subtree, ), ;, if, (, subtree, ., isCall, (, ), ), {, Node, callTarget, =]
[{, subtree, =, tryFoldArrayJoin, (, subtree, ), ;, if, (, subtree, ., isCall, (, ), ), {, Node, callTarget, =]
[if, (, subtree, ., isCall, (, ), ), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (]
[if, (, subtree, ., isCall, (, ), ), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (]
[subtree, ., isCall, (, ), ), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==]
[), ), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ), {, return]
[=, subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ), {, return, subtree, ;, }, if, (]
[=, subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ), {, return, subtree, ;, }, if, (]
[(, ), ;, if, (, callTarget, ==, null, ), {, return, subtree, ;, }, if, (, NodeUtil, ., isGet, (]
[(, callTarget, ==, null, ), {, return, subtree, ;, }, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {]
[==, null, ), {, return, subtree, ;, }, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, subtree, =]
[), {, return, subtree, ;, }, if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, subtree, =, tryFoldKnownStringMethods, (]
[if, (, NodeUtil, ., isGet, (, callTarget, ), ), {, subtree, =, tryFoldKnownStringMethods, (, subtree, ), ;, }, else, {]
[NodeUtil, ., isGet, (, callTarget, ), ), {, subtree, =, tryFoldKnownStringMethods, (, subtree, ), ;, }, else, {, subtree, =]
[isGet, (, callTarget, ), ), {, subtree, =, tryFoldKnownStringMethods, (, subtree, ), ;, }, else, {, subtree, =, tryFoldKnownNumericMethods, (]
[subtree, =, tryFoldKnownStringMethods, (, subtree, ), ;, }, else, {, subtree, =, tryFoldKnownNumericMethods, (, subtree, ), ;, }, }, return]
[=, tryFoldKnownNumericMethods, (, subtree, ), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownStringMethods, (, Node, subtree, ), {]
[=, tryFoldKnownNumericMethods, (, subtree, ), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownStringMethods, (, Node, subtree, ), {]
[), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownStringMethods, (, Node, subtree, ), {, Preconditions, ., checkArgument, (]
[), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownStringMethods, (, Node, subtree, ), {, Preconditions, ., checkArgument, (]
[tryFoldKnownStringMethods, (, Node, subtree, ), {, Preconditions, ., checkArgument, (, subtree, ., isCall, (, ), ), ;, Node, callTarget, =]
[tryFoldKnownStringMethods, (, Node, subtree, ), {, Preconditions, ., checkArgument, (, subtree, ., isCall, (, ), ), ;, Node, callTarget, =]
[checkArgument, (, subtree, ., isCall, (, ), ), ;, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (]
[checkArgument, (, subtree, ., isCall, (, ), ), ;, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (]
[subtree, ., isCall, (, ), ), ;, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==]
[), ), ;, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ), {, return]
[=, subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ), {, return, subtree, ;, }, if, (]
[subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ), {, return, subtree, ;, }, if, (, !]
[subtree, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ), {, return, subtree, ;, }, if, (, !]
[), ;, if, (, callTarget, ==, null, ), {, return, subtree, ;, }, if, (, !, NodeUtil, ., isGet, (]
[==, null, ), {, return, subtree, ;, }, if, (, !, NodeUtil, ., isGet, (, callTarget, ), ), {, return]
[;, }, if, (, !, NodeUtil, ., isGet, (, callTarget, ), ), {, return, subtree, ;, }, Node, stringNode, =]
[;, }, if, (, !, NodeUtil, ., isGet, (, callTarget, ), ), {, return, subtree, ;, }, Node, stringNode, =]
[callTarget, ), ), {, return, subtree, ;, }, Node, stringNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =]
[callTarget, ), ), {, return, subtree, ;, }, Node, stringNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =]
[Node, stringNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, stringNode, ., getNext, (, ), ;, if, (]
[Node, stringNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, stringNode, ., getNext, (, ), ;, if, (]
[stringNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, stringNode, ., getNext, (, ), ;, if, (, (]
[=, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, stringNode, ., getNext, (, ), ;, if, (, (, !]
[=, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, stringNode, ., getNext, (, ), ;, if, (, (, !]
[Node, functionName, =, stringNode, ., getNext, (, ), ;, if, (, (, !, stringNode, ., isString, (, ), ), ||]
[functionName, =, stringNode, ., getNext, (, ), ;, if, (, (, !, stringNode, ., isString, (, ), ), ||, (]
[=, stringNode, ., getNext, (, ), ;, if, (, (, !, stringNode, ., isString, (, ), ), ||, (, !]
[=, stringNode, ., getNext, (, ), ;, if, (, (, !, stringNode, ., isString, (, ), ), ||, (, !]
[(, !, stringNode, ., isString, (, ), ), ||, (, !, functionName, ., isString, (, ), ), ), {, return]
[), ), ||, (, !, functionName, ., isString, (, ), ), ), {, return, subtree, ;, }, String, functionNameString, =]
[), ), ||, (, !, functionName, ., isString, (, ), ), ), {, return, subtree, ;, }, String, functionNameString, =]
[), ), ), {, return, subtree, ;, }, String, functionNameString, =, functionName, ., getString, (, ), ;, Node, firstArg, =]
[), ), ), {, return, subtree, ;, }, String, functionNameString, =, functionName, ., getString, (, ), ;, Node, firstArg, =]
[String, functionNameString, =, functionName, ., getString, (, ), ;, Node, firstArg, =, callTarget, ., getNext, (, ), ;, if, (]
[String, functionNameString, =, functionName, ., getString, (, ), ;, Node, firstArg, =, callTarget, ., getNext, (, ), ;, if, (]
[., getString, (, ), ;, Node, firstArg, =, callTarget, ., getNext, (, ), ;, if, (, functionNameString, ., equals, (]
[;, Node, firstArg, =, callTarget, ., getNext, (, ), ;, if, (, functionNameString, ., equals, (, "split", ), ), {]
[firstArg, =, callTarget, ., getNext, (, ), ;, if, (, functionNameString, ., equals, (, "split", ), ), {, subtree, =]
[callTarget, ., getNext, (, ), ;, if, (, functionNameString, ., equals, (, "split", ), ), {, subtree, =, tryFoldStringSplit, (]
[getNext, (, ), ;, if, (, functionNameString, ., equals, (, "split", ), ), {, subtree, =, tryFoldStringSplit, (, subtree, ,]
[), ;, if, (, functionNameString, ., equals, (, "split", ), ), {, subtree, =, tryFoldStringSplit, (, subtree, ,, stringNode, ,]
[(, "split", ), ), {, subtree, =, tryFoldStringSplit, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (]
[(, "split", ), ), {, subtree, =, tryFoldStringSplit, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (]
[), ), {, subtree, =, tryFoldStringSplit, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, firstArg, ==]
[tryFoldStringSplit, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, firstArg, ==, null, ), {, if, (]
[tryFoldStringSplit, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, firstArg, ==, null, ), {, if, (]
[stringNode, ,, firstArg, ), ;, }, else, if, (, firstArg, ==, null, ), {, if, (, functionNameString, ., equals, (]
[;, }, else, if, (, firstArg, ==, null, ), {, if, (, functionNameString, ., equals, (, "toLowerCase", ), ), {]
[else, if, (, firstArg, ==, null, ), {, if, (, functionNameString, ., equals, (, "toLowerCase", ), ), {, subtree, =]
[(, firstArg, ==, null, ), {, if, (, functionNameString, ., equals, (, "toLowerCase", ), ), {, subtree, =, tryFoldStringToLowerCase, (]
[==, null, ), {, if, (, functionNameString, ., equals, (, "toLowerCase", ), ), {, subtree, =, tryFoldStringToLowerCase, (, subtree, ,]
[., equals, (, "toLowerCase", ), ), {, subtree, =, tryFoldStringToLowerCase, (, subtree, ,, stringNode, ), ;, }, else, if, (]
[., equals, (, "toLowerCase", ), ), {, subtree, =, tryFoldStringToLowerCase, (, subtree, ,, stringNode, ), ;, }, else, if, (]
[), ), {, subtree, =, tryFoldStringToLowerCase, (, subtree, ,, stringNode, ), ;, }, else, if, (, functionNameString, ., equals, (]
[=, tryFoldStringToLowerCase, (, subtree, ,, stringNode, ), ;, }, else, if, (, functionNameString, ., equals, (, "toUpperCase", ), ), {]
[(, subtree, ,, stringNode, ), ;, }, else, if, (, functionNameString, ., equals, (, "toUpperCase", ), ), {, subtree, =]
[,, stringNode, ), ;, }, else, if, (, functionNameString, ., equals, (, "toUpperCase", ), ), {, subtree, =, tryFoldStringToUpperCase, (]
[), ;, }, else, if, (, functionNameString, ., equals, (, "toUpperCase", ), ), {, subtree, =, tryFoldStringToUpperCase, (, subtree, ,]
[(, functionNameString, ., equals, (, "toUpperCase", ), ), {, subtree, =, tryFoldStringToUpperCase, (, subtree, ,, stringNode, ), ;, }, return]
[), ), {, subtree, =, tryFoldStringToUpperCase, (, subtree, ,, stringNode, ), ;, }, return, subtree, ;, }, else, if, (]
[), ), {, subtree, =, tryFoldStringToUpperCase, (, subtree, ,, stringNode, ), ;, }, return, subtree, ;, }, else, if, (]
[=, tryFoldStringToUpperCase, (, subtree, ,, stringNode, ), ;, }, return, subtree, ;, }, else, if, (, NodeUtil, ., isImmutableValue, (]
[), ;, }, return, subtree, ;, }, else, if, (, NodeUtil, ., isImmutableValue, (, firstArg, ), ), {, if, (]
[), ;, }, return, subtree, ;, }, else, if, (, NodeUtil, ., isImmutableValue, (, firstArg, ), ), {, if, (]
[), ;, }, return, subtree, ;, }, else, if, (, NodeUtil, ., isImmutableValue, (, firstArg, ), ), {, if, (]
[subtree, ;, }, else, if, (, NodeUtil, ., isImmutableValue, (, firstArg, ), ), {, if, (, functionNameString, ., equals, (]
[else, if, (, NodeUtil, ., isImmutableValue, (, firstArg, ), ), {, if, (, functionNameString, ., equals, (, "indexOf", ), ||]
[else, if, (, NodeUtil, ., isImmutableValue, (, firstArg, ), ), {, if, (, functionNameString, ., equals, (, "indexOf", ), ||]
[., isImmutableValue, (, firstArg, ), ), {, if, (, functionNameString, ., equals, (, "indexOf", ), ||, functionNameString, ., equals, (]
[), ), {, if, (, functionNameString, ., equals, (, "indexOf", ), ||, functionNameString, ., equals, (, "lastIndexOf", ), ), {]
[{, if, (, functionNameString, ., equals, (, "indexOf", ), ||, functionNameString, ., equals, (, "lastIndexOf", ), ), {, subtree, =]
[(, functionNameString, ., equals, (, "indexOf", ), ||, functionNameString, ., equals, (, "lastIndexOf", ), ), {, subtree, =, tryFoldStringIndexOf, (]
[., equals, (, "indexOf", ), ||, functionNameString, ., equals, (, "lastIndexOf", ), ), {, subtree, =, tryFoldStringIndexOf, (, subtree, ,]
[(, "indexOf", ), ||, functionNameString, ., equals, (, "lastIndexOf", ), ), {, subtree, =, tryFoldStringIndexOf, (, subtree, ,, functionNameString, ,]
[), ||, functionNameString, ., equals, (, "lastIndexOf", ), ), {, subtree, =, tryFoldStringIndexOf, (, subtree, ,, functionNameString, ,, stringNode, ,]
[), ), {, subtree, =, tryFoldStringIndexOf, (, subtree, ,, functionNameString, ,, stringNode, ,, firstArg, ), ;, }, else, if, (]
[), ), {, subtree, =, tryFoldStringIndexOf, (, subtree, ,, functionNameString, ,, stringNode, ,, firstArg, ), ;, }, else, if, (]
[=, tryFoldStringIndexOf, (, subtree, ,, functionNameString, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (]
[,, functionNameString, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "substr", ), ), {]
[,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "substr", ), ), {, subtree, =]
[,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "substr", ), ), {, subtree, =, tryFoldStringSubstr, (]
[), ;, }, else, if, (, functionNameString, ., equals, (, "substr", ), ), {, subtree, =, tryFoldStringSubstr, (, subtree, ,]
[}, else, if, (, functionNameString, ., equals, (, "substr", ), ), {, subtree, =, tryFoldStringSubstr, (, subtree, ,, stringNode, ,]
[(, "substr", ), ), {, subtree, =, tryFoldStringSubstr, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (]
[(, "substr", ), ), {, subtree, =, tryFoldStringSubstr, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (]
[{, subtree, =, tryFoldStringSubstr, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (]
[(, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "substring", ), ), {]
[,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "substring", ), ), {, subtree, =]
[,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "substring", ), ), {, subtree, =, tryFoldStringSubstring, (]
[), ;, }, else, if, (, functionNameString, ., equals, (, "substring", ), ), {, subtree, =, tryFoldStringSubstring, (, subtree, ,]
[}, else, if, (, functionNameString, ., equals, (, "substring", ), ), {, subtree, =, tryFoldStringSubstring, (, subtree, ,, stringNode, ,]
[(, "substring", ), ), {, subtree, =, tryFoldStringSubstring, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (]
[(, "substring", ), ), {, subtree, =, tryFoldStringSubstring, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (]
[{, subtree, =, tryFoldStringSubstring, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (]
[(, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "charAt", ), ), {]
[,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "charAt", ), ), {, subtree, =]
[,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "charAt", ), ), {, subtree, =, tryFoldStringCharAt, (]
[), ;, }, else, if, (, functionNameString, ., equals, (, "charAt", ), ), {, subtree, =, tryFoldStringCharAt, (, subtree, ,]
[}, else, if, (, functionNameString, ., equals, (, "charAt", ), ), {, subtree, =, tryFoldStringCharAt, (, subtree, ,, stringNode, ,]
[(, "charAt", ), ), {, subtree, =, tryFoldStringCharAt, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (]
[(, "charAt", ), ), {, subtree, =, tryFoldStringCharAt, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (]
[{, subtree, =, tryFoldStringCharAt, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (]
[(, subtree, ,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "charCodeAt", ), ), {]
[,, stringNode, ,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "charCodeAt", ), ), {, subtree, =]
[,, firstArg, ), ;, }, else, if, (, functionNameString, ., equals, (, "charCodeAt", ), ), {, subtree, =, tryFoldStringCharCodeAt, (]
[), ;, }, else, if, (, functionNameString, ., equals, (, "charCodeAt", ), ), {, subtree, =, tryFoldStringCharCodeAt, (, subtree, ,]
[}, else, if, (, functionNameString, ., equals, (, "charCodeAt", ), ), {, subtree, =, tryFoldStringCharCodeAt, (, subtree, ,, stringNode, ,]
[equals, (, "charCodeAt", ), ), {, subtree, =, tryFoldStringCharCodeAt, (, subtree, ,, stringNode, ,, firstArg, ), ;, }, }, return]
[,, stringNode, ,, firstArg, ), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownNumericMethods, (, Node, subtree, ), {]
[,, stringNode, ,, firstArg, ), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownNumericMethods, (, Node, subtree, ), {]
[), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownNumericMethods, (, Node, subtree, ), {, Preconditions, ., checkArgument, (]
[), ;, }, }, return, subtree, ;, }, private, Node, tryFoldKnownNumericMethods, (, Node, subtree, ), {, Preconditions, ., checkArgument, (]
[Node, tryFoldKnownNumericMethods, (, Node, subtree, ), {, Preconditions, ., checkArgument, (, subtree, ., isCall, (, ), ), ;, if, (]
[., checkArgument, (, subtree, ., isCall, (, ), ), ;, if, (, isASTNormalized, (, ), ), {, Node, callTarget, =]
[., checkArgument, (, subtree, ., isCall, (, ), ), ;, if, (, isASTNormalized, (, ), ), {, Node, callTarget, =]
[), ;, if, (, isASTNormalized, (, ), ), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (]
[;, if, (, isASTNormalized, (, ), ), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, !]
[;, if, (, isASTNormalized, (, ), ), {, Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, !]
[Node, callTarget, =, subtree, ., getFirstChild, (, ), ;, if, (, !, callTarget, ., isName, (, ), ), {, return]
[(, ), ;, if, (, !, callTarget, ., isName, (, ), ), {, return, subtree, ;, }, String, functionNameString, =]
[(, ), ;, if, (, !, callTarget, ., isName, (, ), ), {, return, subtree, ;, }, String, functionNameString, =]
[(, ), ), {, return, subtree, ;, }, String, functionNameString, =, callTarget, ., getString, (, ), ;, Node, firstArgument, =]
[(, ), ), {, return, subtree, ;, }, String, functionNameString, =, callTarget, ., getString, (, ), ;, Node, firstArgument, =]
[String, functionNameString, =, callTarget, ., getString, (, ), ;, Node, firstArgument, =, callTarget, ., getNext, (, ), ;, if, (]
[String, functionNameString, =, callTarget, ., getString, (, ), ;, Node, firstArgument, =, callTarget, ., getNext, (, ), ;, if, (]
[functionNameString, =, callTarget, ., getString, (, ), ;, Node, firstArgument, =, callTarget, ., getNext, (, ), ;, if, (, (]
[functionNameString, =, callTarget, ., getString, (, ), ;, Node, firstArgument, =, callTarget, ., getNext, (, ), ;, if, (, (]
[callTarget, ., getString, (, ), ;, Node, firstArgument, =, callTarget, ., getNext, (, ), ;, if, (, (, firstArgument, !=]
[(, ), ;, Node, firstArgument, =, callTarget, ., getNext, (, ), ;, if, (, (, firstArgument, !=, null, ), &&]
[), ;, Node, firstArgument, =, callTarget, ., getNext, (, ), ;, if, (, (, firstArgument, !=, null, ), &&, (]
[), ;, Node, firstArgument, =, callTarget, ., getNext, (, ), ;, if, (, (, firstArgument, !=, null, ), &&, (]
[), ;, Node, firstArgument, =, callTarget, ., getNext, (, ), ;, if, (, (, firstArgument, !=, null, ), &&, (]
[., getNext, (, ), ;, if, (, (, firstArgument, !=, null, ), &&, (, firstArgument, ., isString, (, ), ||]
[., getNext, (, ), ;, if, (, (, firstArgument, !=, null, ), &&, (, firstArgument, ., isString, (, ), ||]
[null, ), &&, (, firstArgument, ., isString, (, ), ||, firstArgument, ., isNumber, (, ), ), ), {, if, (]
[null, ), &&, (, firstArgument, ., isString, (, ), ||, firstArgument, ., isNumber, (, ), ), ), {, if, (]
[null, ), &&, (, firstArgument, ., isString, (, ), ||, firstArgument, ., isNumber, (, ), ), ), {, if, (]
[firstArgument, ., isString, (, ), ||, firstArgument, ., isNumber, (, ), ), ), {, if, (, functionNameString, ., equals, (]
[(, ), ||, firstArgument, ., isNumber, (, ), ), ), {, if, (, functionNameString, ., equals, (, "parseInt", ), ||]
[(, ), ||, firstArgument, ., isNumber, (, ), ), ), {, if, (, functionNameString, ., equals, (, "parseInt", ), ||]
[., isNumber, (, ), ), ), {, if, (, functionNameString, ., equals, (, "parseInt", ), ||, functionNameString, ., equals, (]
[), ), {, if, (, functionNameString, ., equals, (, "parseInt", ), ||, functionNameString, ., equals, (, "parseFloat", ), ), {]
[{, if, (, functionNameString, ., equals, (, "parseInt", ), ||, functionNameString, ., equals, (, "parseFloat", ), ), {, subtree, =]
[(, functionNameString, ., equals, (, "parseInt", ), ||, functionNameString, ., equals, (, "parseFloat", ), ), {, subtree, =, tryFoldParseNumber, (]
[., equals, (, "parseInt", ), ||, functionNameString, ., equals, (, "parseFloat", ), ), {, subtree, =, tryFoldParseNumber, (, subtree, ,]
[(, "parseInt", ), ||, functionNameString, ., equals, (, "parseFloat", ), ), {, subtree, =, tryFoldParseNumber, (, subtree, ,, functionNameString, ,]
[(, "parseFloat", ), ), {, subtree, =, tryFoldParseNumber, (, subtree, ,, functionNameString, ,, firstArgument, ), ;, }, }, }, return]
[}, }, return, subtree, ;, }, private, Node, tryFoldStringToLowerCase, (, Node, subtree, ,, Node, stringNode, ), {, String, lowered, =]
[}, }, return, subtree, ;, }, private, Node, tryFoldStringToLowerCase, (, Node, subtree, ,, Node, stringNode, ), {, String, lowered, =]
[}, }, return, subtree, ;, }, private, Node, tryFoldStringToLowerCase, (, Node, subtree, ,, Node, stringNode, ), {, String, lowered, =]
[tryFoldStringToLowerCase, (, Node, subtree, ,, Node, stringNode, ), {, String, lowered, =, stringNode, ., getString, (, ), ., toLowerCase, (]
[stringNode, ), {, String, lowered, =, stringNode, ., getString, (, ), ., toLowerCase, (, ROOT_LOCALE, ), ;, Node, replacement, =]
[stringNode, ), {, String, lowered, =, stringNode, ., getString, (, ), ., toLowerCase, (, ROOT_LOCALE, ), ;, Node, replacement, =]
[lowered, =, stringNode, ., getString, (, ), ., toLowerCase, (, ROOT_LOCALE, ), ;, Node, replacement, =, IR, ., string, (]
[., getString, (, ), ., toLowerCase, (, ROOT_LOCALE, ), ;, Node, replacement, =, IR, ., string, (, lowered, ), ;]
[., getString, (, ), ., toLowerCase, (, ROOT_LOCALE, ), ;, Node, replacement, =, IR, ., string, (, lowered, ), ;]
[., getString, (, ), ., toLowerCase, (, ROOT_LOCALE, ), ;, Node, replacement, =, IR, ., string, (, lowered, ), ;]
[), ;, Node, replacement, =, IR, ., string, (, lowered, ), ;, subtree, ., getParent, (, ), ., replaceChild, (]
[Node, replacement, =, IR, ., string, (, lowered, ), ;, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,]
[IR, ., string, (, lowered, ), ;, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, ), ;]
[), ;, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, ), ;, reportCodeChange, (, ), ;, return]
[), ;, return, replacement, ;, }, private, Node, tryFoldStringToUpperCase, (, Node, subtree, ,, Node, stringNode, ), {, String, upped, =]
[), ;, return, replacement, ;, }, private, Node, tryFoldStringToUpperCase, (, Node, subtree, ,, Node, stringNode, ), {, String, upped, =]
[), ;, return, replacement, ;, }, private, Node, tryFoldStringToUpperCase, (, Node, subtree, ,, Node, stringNode, ), {, String, upped, =]
[tryFoldStringToUpperCase, (, Node, subtree, ,, Node, stringNode, ), {, String, upped, =, stringNode, ., getString, (, ), ., toUpperCase, (]
[stringNode, ), {, String, upped, =, stringNode, ., getString, (, ), ., toUpperCase, (, ROOT_LOCALE, ), ;, Node, replacement, =]
[stringNode, ), {, String, upped, =, stringNode, ., getString, (, ), ., toUpperCase, (, ROOT_LOCALE, ), ;, Node, replacement, =]
[upped, =, stringNode, ., getString, (, ), ., toUpperCase, (, ROOT_LOCALE, ), ;, Node, replacement, =, IR, ., string, (]
[., getString, (, ), ., toUpperCase, (, ROOT_LOCALE, ), ;, Node, replacement, =, IR, ., string, (, upped, ), ;]
[., getString, (, ), ., toUpperCase, (, ROOT_LOCALE, ), ;, Node, replacement, =, IR, ., string, (, upped, ), ;]
[., getString, (, ), ., toUpperCase, (, ROOT_LOCALE, ), ;, Node, replacement, =, IR, ., string, (, upped, ), ;]
[), ;, Node, replacement, =, IR, ., string, (, upped, ), ;, subtree, ., getParent, (, ), ., replaceChild, (]
[Node, replacement, =, IR, ., string, (, upped, ), ;, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,]
[IR, ., string, (, upped, ), ;, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, ), ;]
[), ;, subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, ), ;, reportCodeChange, (, ), ;, return]
[), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, normalizeNumericString, (, String, input, ), {, if, (]
[), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, normalizeNumericString, (, String, input, ), {, if, (]
[), ;, reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, normalizeNumericString, (, String, input, ), {, if, (]
[reportCodeChange, (, ), ;, return, replacement, ;, }, private, String, normalizeNumericString, (, String, input, ), {, if, (, input, ==]
[), ;, return, replacement, ;, }, private, String, normalizeNumericString, (, String, input, ), {, if, (, input, ==, null, ||]
[), ;, return, replacement, ;, }, private, String, normalizeNumericString, (, String, input, ), {, if, (, input, ==, null, ||]
[), ;, return, replacement, ;, }, private, String, normalizeNumericString, (, String, input, ), {, if, (, input, ==, null, ||]
[private, String, normalizeNumericString, (, String, input, ), {, if, (, input, ==, null, ||, input, ., length, (, ), ==]
[String, input, ), {, if, (, input, ==, null, ||, input, ., length, (, ), ==, 0, ), {, return]
[input, ==, null, ||, input, ., length, (, ), ==, 0, ), {, return, input, ;, }, int, startIndex, =]
[input, ., length, (, ), ==, 0, ), {, return, input, ;, }, int, startIndex, =, 0, ,, endIndex, =]
[input, ., length, (, ), ==, 0, ), {, return, input, ;, }, int, startIndex, =, 0, ,, endIndex, =]
[input, ., length, (, ), ==, 0, ), {, return, input, ;, }, int, startIndex, =, 0, ,, endIndex, =]
[0, ), {, return, input, ;, }, int, startIndex, =, 0, ,, endIndex, =, input, ., length, (, ), -]
[input, ;, }, int, startIndex, =, 0, ,, endIndex, =, input, ., length, (, ), -, 1, ;, while, (]
[input, ;, }, int, startIndex, =, 0, ,, endIndex, =, input, ., length, (, ), -, 1, ;, while, (]
[input, ;, }, int, startIndex, =, 0, ,, endIndex, =, input, ., length, (, ), -, 1, ;, while, (]
[input, ;, }, int, startIndex, =, 0, ,, endIndex, =, input, ., length, (, ), -, 1, ;, while, (]
[}, int, startIndex, =, 0, ,, endIndex, =, input, ., length, (, ), -, 1, ;, while, (, startIndex, <]
[}, int, startIndex, =, 0, ,, endIndex, =, input, ., length, (, ), -, 1, ;, while, (, startIndex, <]
[endIndex, =, input, ., length, (, ), -, 1, ;, while, (, startIndex, <, input, ., length, (, ), &&]
[endIndex, =, input, ., length, (, ), -, 1, ;, while, (, startIndex, <, input, ., length, (, ), &&]
[endIndex, =, input, ., length, (, ), -, 1, ;, while, (, startIndex, <, input, ., length, (, ), &&]
[length, (, ), -, 1, ;, while, (, startIndex, <, input, ., length, (, ), &&, input, ., charAt, (]
[-, 1, ;, while, (, startIndex, <, input, ., length, (, ), &&, input, ., charAt, (, startIndex, ), ==]
[;, while, (, startIndex, <, input, ., length, (, ), &&, input, ., charAt, (, startIndex, ), ==, '0', &&]
[;, while, (, startIndex, <, input, ., length, (, ), &&, input, ., charAt, (, startIndex, ), ==, '0', &&]
[;, while, (, startIndex, <, input, ., length, (, ), &&, input, ., charAt, (, startIndex, ), ==, '0', &&]
[<, input, ., length, (, ), &&, input, ., charAt, (, startIndex, ), ==, '0', &&, input, ., charAt, (]
[length, (, ), &&, input, ., charAt, (, startIndex, ), ==, '0', &&, input, ., charAt, (, startIndex, ), !=]
[&&, input, ., charAt, (, startIndex, ), ==, '0', &&, input, ., charAt, (, startIndex, ), !=, '.', ), {]
[&&, input, ., charAt, (, startIndex, ), ==, '0', &&, input, ., charAt, (, startIndex, ), !=, '.', ), {]
[), ==, '0', &&, input, ., charAt, (, startIndex, ), !=, '.', ), {, startIndex, ++, ;, }, if, (]
[), ==, '0', &&, input, ., charAt, (, startIndex, ), !=, '.', ), {, startIndex, ++, ;, }, if, (]
[), ==, '0', &&, input, ., charAt, (, startIndex, ), !=, '.', ), {, startIndex, ++, ;, }, if, (]
[input, ., charAt, (, startIndex, ), !=, '.', ), {, startIndex, ++, ;, }, if, (, input, ., indexOf, (]
[(, startIndex, ), !=, '.', ), {, startIndex, ++, ;, }, if, (, input, ., indexOf, (, '.', ), >=]
[), {, startIndex, ++, ;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, ), {, while, (]
[), {, startIndex, ++, ;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, ), {, while, (]
[), {, startIndex, ++, ;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, ), {, while, (]
[startIndex, ++, ;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, ), {, while, (, endIndex, >=]
[;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, ), {, while, (, endIndex, >=, 0, &&]
[;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, ), {, while, (, endIndex, >=, 0, &&]
[;, }, if, (, input, ., indexOf, (, '.', ), >=, 0, ), {, while, (, endIndex, >=, 0, &&]
[input, ., indexOf, (, '.', ), >=, 0, ), {, while, (, endIndex, >=, 0, &&, input, ., charAt, (]
[(, '.', ), >=, 0, ), {, while, (, endIndex, >=, 0, &&, input, ., charAt, (, endIndex, ), ==]
[>=, 0, ), {, while, (, endIndex, >=, 0, &&, input, ., charAt, (, endIndex, ), ==, '0', ), {]
[>=, 0, ), {, while, (, endIndex, >=, 0, &&, input, ., charAt, (, endIndex, ), ==, '0', ), {]
[endIndex, >=, 0, &&, input, ., charAt, (, endIndex, ), ==, '0', ), {, endIndex, --, ;, }, if, (]
[endIndex, >=, 0, &&, input, ., charAt, (, endIndex, ), ==, '0', ), {, endIndex, --, ;, }, if, (]
[endIndex, >=, 0, &&, input, ., charAt, (, endIndex, ), ==, '0', ), {, endIndex, --, ;, }, if, (]
[input, ., charAt, (, endIndex, ), ==, '0', ), {, endIndex, --, ;, }, if, (, input, ., charAt, (]
[(, endIndex, ), ==, '0', ), {, endIndex, --, ;, }, if, (, input, ., charAt, (, endIndex, ), ==]
[==, '0', ), {, endIndex, --, ;, }, if, (, input, ., charAt, (, endIndex, ), ==, '.', ), {]
[==, '0', ), {, endIndex, --, ;, }, if, (, input, ., charAt, (, endIndex, ), ==, '.', ), {]
[}, if, (, input, ., charAt, (, endIndex, ), ==, '.', ), {, endIndex, --, ;, }, }, if, (]
[}, if, (, input, ., charAt, (, endIndex, ), ==, '.', ), {, endIndex, --, ;, }, }, if, (]
[(, input, ., charAt, (, endIndex, ), ==, '.', ), {, endIndex, --, ;, }, }, if, (, startIndex, >=]
[(, endIndex, ), ==, '.', ), {, endIndex, --, ;, }, }, if, (, startIndex, >=, endIndex, ), {, return]
['.', ), {, endIndex, --, ;, }, }, if, (, startIndex, >=, endIndex, ), {, return, input, ;, }, return]
['.', ), {, endIndex, --, ;, }, }, if, (, startIndex, >=, endIndex, ), {, return, input, ;, }, return]
[--, ;, }, }, if, (, startIndex, >=, endIndex, ), {, return, input, ;, }, return, input, ., substring, (]
[}, }, if, (, startIndex, >=, endIndex, ), {, return, input, ;, }, return, input, ., substring, (, startIndex, ,]
[}, }, if, (, startIndex, >=, endIndex, ), {, return, input, ;, }, return, input, ., substring, (, startIndex, ,]
[if, (, startIndex, >=, endIndex, ), {, return, input, ;, }, return, input, ., substring, (, startIndex, ,, endIndex, +]
[endIndex, +, 1, ), ;, }, private, Node, tryFoldParseNumber, (, Node, n, ,, String, functionName, ,, Node, firstArg, ), {]
[endIndex, +, 1, ), ;, }, private, Node, tryFoldParseNumber, (, Node, n, ,, String, functionName, ,, Node, firstArg, ), {]
[;, }, private, Node, tryFoldParseNumber, (, Node, n, ,, String, functionName, ,, Node, firstArg, ), {, Preconditions, ., checkArgument, (]
[;, }, private, Node, tryFoldParseNumber, (, Node, n, ,, String, functionName, ,, Node, firstArg, ), {, Preconditions, ., checkArgument, (]
[functionName, ,, Node, firstArg, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, boolean, isParseInt, =]
[functionName, ,, Node, firstArg, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, boolean, isParseInt, =]
[), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, boolean, isParseInt, =, functionName, ., equals, (]
[n, ., isCall, (, ), ), ;, boolean, isParseInt, =, functionName, ., equals, (, "parseInt", ), ;, Node, secondArg, =]
[n, ., isCall, (, ), ), ;, boolean, isParseInt, =, functionName, ., equals, (, "parseInt", ), ;, Node, secondArg, =]
[=, functionName, ., equals, (, "parseInt", ), ;, Node, secondArg, =, firstArg, ., getNext, (, ), ;, int, radix, =]
[(, "parseInt", ), ;, Node, secondArg, =, firstArg, ., getNext, (, ), ;, int, radix, =, 0, ;, if, (]
[(, "parseInt", ), ;, Node, secondArg, =, firstArg, ., getNext, (, ), ;, int, radix, =, 0, ;, if, (]
[), ;, Node, secondArg, =, firstArg, ., getNext, (, ), ;, int, radix, =, 0, ;, if, (, secondArg, !=]
[firstArg, ., getNext, (, ), ;, int, radix, =, 0, ;, if, (, secondArg, !=, null, ), {, if, (]
[., getNext, (, ), ;, int, radix, =, 0, ;, if, (, secondArg, !=, null, ), {, if, (, !]
[;, int, radix, =, 0, ;, if, (, secondArg, !=, null, ), {, if, (, !, isParseInt, ), {, return]
[;, if, (, secondArg, !=, null, ), {, if, (, !, isParseInt, ), {, return, n, ;, }, if, (]
[;, if, (, secondArg, !=, null, ), {, if, (, !, isParseInt, ), {, return, n, ;, }, if, (]
[;, if, (, secondArg, !=, null, ), {, if, (, !, isParseInt, ), {, return, n, ;, }, if, (]
[;, if, (, secondArg, !=, null, ), {, if, (, !, isParseInt, ), {, return, n, ;, }, if, (]
[), {, if, (, !, isParseInt, ), {, return, n, ;, }, if, (, secondArg, ., getNext, (, ), !=]
[if, (, !, isParseInt, ), {, return, n, ;, }, if, (, secondArg, ., getNext, (, ), !=, null, ||]
[(, !, isParseInt, ), {, return, n, ;, }, if, (, secondArg, ., getNext, (, ), !=, null, ||, !]
[(, !, isParseInt, ), {, return, n, ;, }, if, (, secondArg, ., getNext, (, ), !=, null, ||, !]
[}, if, (, secondArg, ., getNext, (, ), !=, null, ||, !, secondArg, ., isNumber, (, ), ), {, return]
[!=, null, ||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else, {, double, tmpRadix, =]
[!=, null, ||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else, {, double, tmpRadix, =]
[), ), {, return, n, ;, }, else, {, double, tmpRadix, =, secondArg, ., getDouble, (, ), ;, if, (]
[), ), {, return, n, ;, }, else, {, double, tmpRadix, =, secondArg, ., getDouble, (, ), ;, if, (]
[{, return, n, ;, }, else, {, double, tmpRadix, =, secondArg, ., getDouble, (, ), ;, if, (, tmpRadix, !=]
[;, }, else, {, double, tmpRadix, =, secondArg, ., getDouble, (, ), ;, if, (, tmpRadix, !=, (, int, )]
[{, double, tmpRadix, =, secondArg, ., getDouble, (, ), ;, if, (, tmpRadix, !=, (, int, ), tmpRadix, ), return]
[tmpRadix, =, secondArg, ., getDouble, (, ), ;, if, (, tmpRadix, !=, (, int, ), tmpRadix, ), return, n, ;]
[secondArg, ., getDouble, (, ), ;, if, (, tmpRadix, !=, (, int, ), tmpRadix, ), return, n, ;, radix, =]
[(, ), ;, if, (, tmpRadix, !=, (, int, ), tmpRadix, ), return, n, ;, radix, =, (, int, )]
[(, tmpRadix, !=, (, int, ), tmpRadix, ), return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (]
[(, tmpRadix, !=, (, int, ), tmpRadix, ), return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (]
[(, tmpRadix, !=, (, int, ), tmpRadix, ), return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (]
[(, tmpRadix, !=, (, int, ), tmpRadix, ), return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (]
[!=, (, int, ), tmpRadix, ), return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (, radix, <]
[int, ), tmpRadix, ), return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (, radix, <, 0, ||]
[int, ), tmpRadix, ), return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (, radix, <, 0, ||]
[tmpRadix, ), return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (, radix, <, 0, ||, radix, ==]
[return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (, radix, <, 0, ||, radix, ==, 1, ||]
[return, n, ;, radix, =, (, int, ), tmpRadix, ;, if, (, radix, <, 0, ||, radix, ==, 1, ||]
[;, radix, =, (, int, ), tmpRadix, ;, if, (, radix, <, 0, ||, radix, ==, 1, ||, radix, >]
[int, ), tmpRadix, ;, if, (, radix, <, 0, ||, radix, ==, 1, ||, radix, >, 36, ), {, return]
[0, ||, radix, ==, 1, ||, radix, >, 36, ), {, return, n, ;, }, }, }, String, stringVal, =]
[>, 36, ), {, return, n, ;, }, }, }, String, stringVal, =, null, ;, Double, checkVal, ;, if, (]
[>, 36, ), {, return, n, ;, }, }, }, String, stringVal, =, null, ;, Double, checkVal, ;, if, (]
[}, }, }, String, stringVal, =, null, ;, Double, checkVal, ;, if, (, firstArg, ., isNumber, (, ), ), {]
[}, String, stringVal, =, null, ;, Double, checkVal, ;, if, (, firstArg, ., isNumber, (, ), ), {, checkVal, =]
[}, String, stringVal, =, null, ;, Double, checkVal, ;, if, (, firstArg, ., isNumber, (, ), ), {, checkVal, =]
[null, ;, Double, checkVal, ;, if, (, firstArg, ., isNumber, (, ), ), {, checkVal, =, NodeUtil, ., getNumberValue, (]
[if, (, firstArg, ., isNumber, (, ), ), {, checkVal, =, NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (]
[if, (, firstArg, ., isNumber, (, ), ), {, checkVal, =, NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (]
[(, firstArg, ., isNumber, (, ), ), {, checkVal, =, NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (, !]
[firstArg, ., isNumber, (, ), ), {, checkVal, =, NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (, !, (]
[firstArg, ., isNumber, (, ), ), {, checkVal, =, NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (, !, (]
[firstArg, ., isNumber, (, ), ), {, checkVal, =, NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (, !, (]
[isNumber, (, ), ), {, checkVal, =, NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (, !, (, radix, ==]
[), ), {, checkVal, =, NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (, !, (, radix, ==, 0, ||]
[), ), {, checkVal, =, NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (, !, (, radix, ==, 0, ||]
[{, checkVal, =, NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (, !, (, radix, ==, 0, ||, radix, ==]
[NodeUtil, ., getNumberValue, (, firstArg, ), ;, if, (, !, (, radix, ==, 0, ||, radix, ==, 10, ), &&]
[(, firstArg, ), ;, if, (, !, (, radix, ==, 0, ||, radix, ==, 10, ), &&, isParseInt, ), {]
[), ;, if, (, !, (, radix, ==, 0, ||, radix, ==, 10, ), &&, isParseInt, ), {, stringVal, =]
[), ;, if, (, !, (, radix, ==, 0, ||, radix, ==, 10, ), &&, isParseInt, ), {, stringVal, =]
[!, (, radix, ==, 0, ||, radix, ==, 10, ), &&, isParseInt, ), {, stringVal, =, String, ., valueOf, (]
[!, (, radix, ==, 0, ||, radix, ==, 10, ), &&, isParseInt, ), {, stringVal, =, String, ., valueOf, (]
[=, String, ., valueOf, (, checkVal, ., intValue, (, ), ), ;, }, else, {, Node, numericNode, ;, if, (]
[valueOf, (, checkVal, ., intValue, (, ), ), ;, }, else, {, Node, numericNode, ;, if, (, isParseInt, ), {]
[checkVal, ., intValue, (, ), ), ;, }, else, {, Node, numericNode, ;, if, (, isParseInt, ), {, numericNode, =]
[checkVal, ., intValue, (, ), ), ;, }, else, {, Node, numericNode, ;, if, (, isParseInt, ), {, numericNode, =]
[), ), ;, }, else, {, Node, numericNode, ;, if, (, isParseInt, ), {, numericNode, =, IR, ., number, (]
[), ), ;, }, else, {, Node, numericNode, ;, if, (, isParseInt, ), {, numericNode, =, IR, ., number, (]
[(, isParseInt, ), {, numericNode, =, IR, ., number, (, checkVal, ., intValue, (, ), ), ;, }, else, {]
[), {, numericNode, =, IR, ., number, (, checkVal, ., intValue, (, ), ), ;, }, else, {, numericNode, =]
[), {, numericNode, =, IR, ., number, (, checkVal, ., intValue, (, ), ), ;, }, else, {, numericNode, =]
[IR, ., number, (, checkVal, ., intValue, (, ), ), ;, }, else, {, numericNode, =, IR, ., number, (]
[checkVal, ., intValue, (, ), ), ;, }, else, {, numericNode, =, IR, ., number, (, checkVal, ), ;, }]
[checkVal, ., intValue, (, ), ), ;, }, else, {, numericNode, =, IR, ., number, (, checkVal, ), ;, }]
[checkVal, ., intValue, (, ), ), ;, }, else, {, numericNode, =, IR, ., number, (, checkVal, ), ;, }]
[else, {, numericNode, =, IR, ., number, (, checkVal, ), ;, }, n, ., getParent, (, ), ., replaceChild, (]
[numericNode, =, IR, ., number, (, checkVal, ), ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[., number, (, checkVal, ), ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, numericNode, ), ;]
[;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, numericNode, ), ;, reportCodeChange, (, ), ;, return]
[), ., replaceChild, (, n, ,, numericNode, ), ;, reportCodeChange, (, ), ;, return, numericNode, ;, }, }, else, {]
[replaceChild, (, n, ,, numericNode, ), ;, reportCodeChange, (, ), ;, return, numericNode, ;, }, }, else, {, stringVal, =]
[replaceChild, (, n, ,, numericNode, ), ;, reportCodeChange, (, ), ;, return, numericNode, ;, }, }, else, {, stringVal, =]
[numericNode, ), ;, reportCodeChange, (, ), ;, return, numericNode, ;, }, }, else, {, stringVal, =, NodeUtil, ., getStringValue, (]
[), ;, return, numericNode, ;, }, }, else, {, stringVal, =, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (]
[), ;, return, numericNode, ;, }, }, else, {, stringVal, =, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (]
[return, numericNode, ;, }, }, else, {, stringVal, =, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (, stringVal, ==]
[}, else, {, stringVal, =, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (, stringVal, ==, null, ), {, return]
[stringVal, =, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (, stringVal, ==, null, ), {, return, n, ;, }]
[NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (, stringVal, ==, null, ), {, return, n, ;, }, checkVal, =]
[NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (, stringVal, ==, null, ), {, return, n, ;, }, checkVal, =]
[firstArg, ), ;, if, (, stringVal, ==, null, ), {, return, n, ;, }, checkVal, =, NodeUtil, ., getStringNumberValue, (]
[stringVal, ==, null, ), {, return, n, ;, }, checkVal, =, NodeUtil, ., getStringNumberValue, (, stringVal, ), ;, if, (]
[stringVal, ==, null, ), {, return, n, ;, }, checkVal, =, NodeUtil, ., getStringNumberValue, (, stringVal, ), ;, if, (]
[null, ), {, return, n, ;, }, checkVal, =, NodeUtil, ., getStringNumberValue, (, stringVal, ), ;, if, (, checkVal, ==]
[n, ;, }, checkVal, =, NodeUtil, ., getStringNumberValue, (, stringVal, ), ;, if, (, checkVal, ==, null, ), {, return]
[checkVal, =, NodeUtil, ., getStringNumberValue, (, stringVal, ), ;, if, (, checkVal, ==, null, ), {, return, n, ;, }]
[NodeUtil, ., getStringNumberValue, (, stringVal, ), ;, if, (, checkVal, ==, null, ), {, return, n, ;, }, stringVal, =]
[NodeUtil, ., getStringNumberValue, (, stringVal, ), ;, if, (, checkVal, ==, null, ), {, return, n, ;, }, stringVal, =]
[stringVal, ), ;, if, (, checkVal, ==, null, ), {, return, n, ;, }, stringVal, =, NodeUtil, ., trimJsWhiteSpace, (]
[checkVal, ==, null, ), {, return, n, ;, }, stringVal, =, NodeUtil, ., trimJsWhiteSpace, (, stringVal, ), ;, if, (]
[checkVal, ==, null, ), {, return, n, ;, }, stringVal, =, NodeUtil, ., trimJsWhiteSpace, (, stringVal, ), ;, if, (]
[checkVal, ==, null, ), {, return, n, ;, }, stringVal, =, NodeUtil, ., trimJsWhiteSpace, (, stringVal, ), ;, if, (]
[n, ;, }, stringVal, =, NodeUtil, ., trimJsWhiteSpace, (, stringVal, ), ;, if, (, stringVal, ., length, (, ), ==]
[=, NodeUtil, ., trimJsWhiteSpace, (, stringVal, ), ;, if, (, stringVal, ., length, (, ), ==, 0, ), {, return]
[(, stringVal, ., length, (, ), ==, 0, ), {, return, n, ;, }, }, Node, newNode, ;, if, (]
[(, stringVal, ., length, (, ), ==, 0, ), {, return, n, ;, }, }, Node, newNode, ;, if, (]
[(, ), ==, 0, ), {, return, n, ;, }, }, Node, newNode, ;, if, (, stringVal, ., equals, (]
[), {, return, n, ;, }, }, Node, newNode, ;, if, (, stringVal, ., equals, (, "0", ), ), {]
[return, n, ;, }, }, Node, newNode, ;, if, (, stringVal, ., equals, (, "0", ), ), {, newNode, =]
[return, n, ;, }, }, Node, newNode, ;, if, (, stringVal, ., equals, (, "0", ), ), {, newNode, =]
[}, Node, newNode, ;, if, (, stringVal, ., equals, (, "0", ), ), {, newNode, =, IR, ., number, (]
[., equals, (, "0", ), ), {, newNode, =, IR, ., number, (, 0, ), ;, }, else, if, (]
[), {, newNode, =, IR, ., number, (, 0, ), ;, }, else, if, (, isParseInt, ), {, if, (]
[), {, newNode, =, IR, ., number, (, 0, ), ;, }, else, if, (, isParseInt, ), {, if, (]
[), {, newNode, =, IR, ., number, (, 0, ), ;, }, else, if, (, isParseInt, ), {, if, (]
[newNode, =, IR, ., number, (, 0, ), ;, }, else, if, (, isParseInt, ), {, if, (, radix, ==]
[IR, ., number, (, 0, ), ;, }, else, if, (, isParseInt, ), {, if, (, radix, ==, 0, ||]
[IR, ., number, (, 0, ), ;, }, else, if, (, isParseInt, ), {, if, (, radix, ==, 0, ||]
[number, (, 0, ), ;, }, else, if, (, isParseInt, ), {, if, (, radix, ==, 0, ||, radix, ==]
[}, else, if, (, isParseInt, ), {, if, (, radix, ==, 0, ||, radix, ==, 16, ), {, if, (]
[}, else, if, (, isParseInt, ), {, if, (, radix, ==, 0, ||, radix, ==, 16, ), {, if, (]
[}, else, if, (, isParseInt, ), {, if, (, radix, ==, 0, ||, radix, ==, 16, ), {, if, (]
[}, else, if, (, isParseInt, ), {, if, (, radix, ==, 0, ||, radix, ==, 16, ), {, if, (]
[{, if, (, radix, ==, 0, ||, radix, ==, 16, ), {, if, (, stringVal, ., length, (, ), >]
[(, radix, ==, 0, ||, radix, ==, 16, ), {, if, (, stringVal, ., length, (, ), >, 1, &&]
[(, radix, ==, 0, ||, radix, ==, 16, ), {, if, (, stringVal, ., length, (, ), >, 1, &&]
[(, radix, ==, 0, ||, radix, ==, 16, ), {, if, (, stringVal, ., length, (, ), >, 1, &&]
[||, radix, ==, 16, ), {, if, (, stringVal, ., length, (, ), >, 1, &&, stringVal, ., substring, (]
[==, 16, ), {, if, (, stringVal, ., length, (, ), >, 1, &&, stringVal, ., substring, (, 0, ,]
[(, stringVal, ., length, (, ), >, 1, &&, stringVal, ., substring, (, 0, ,, 2, ), ., equalsIgnoreCase, (]
[(, ), >, 1, &&, stringVal, ., substring, (, 0, ,, 2, ), ., equalsIgnoreCase, (, "0x", ), ), {]
[>, 1, &&, stringVal, ., substring, (, 0, ,, 2, ), ., equalsIgnoreCase, (, "0x", ), ), {, radix, =]
[&&, stringVal, ., substring, (, 0, ,, 2, ), ., equalsIgnoreCase, (, "0x", ), ), {, radix, =, 16, ;]
[., substring, (, 0, ,, 2, ), ., equalsIgnoreCase, (, "0x", ), ), {, radix, =, 16, ;, stringVal, =]
[., substring, (, 0, ,, 2, ), ., equalsIgnoreCase, (, "0x", ), ), {, radix, =, 16, ;, stringVal, =]
[,, 2, ), ., equalsIgnoreCase, (, "0x", ), ), {, radix, =, 16, ;, stringVal, =, stringVal, ., substring, (]
[), ), {, radix, =, 16, ;, stringVal, =, stringVal, ., substring, (, 2, ), ;, }, else, if, (]
[), ), {, radix, =, 16, ;, stringVal, =, stringVal, ., substring, (, 2, ), ;, }, else, if, (]
[{, radix, =, 16, ;, stringVal, =, stringVal, ., substring, (, 2, ), ;, }, else, if, (, radix, ==]
[stringVal, =, stringVal, ., substring, (, 2, ), ;, }, else, if, (, radix, ==, 0, ), {, if, (]
[stringVal, =, stringVal, ., substring, (, 2, ), ;, }, else, if, (, radix, ==, 0, ), {, if, (]
[=, stringVal, ., substring, (, 2, ), ;, }, else, if, (, radix, ==, 0, ), {, if, (, !]
[(, 2, ), ;, }, else, if, (, radix, ==, 0, ), {, if, (, !, isEcmaScript5OrGreater, (, ), &&]
[(, 2, ), ;, }, else, if, (, radix, ==, 0, ), {, if, (, !, isEcmaScript5OrGreater, (, ), &&]
[(, 2, ), ;, }, else, if, (, radix, ==, 0, ), {, if, (, !, isEcmaScript5OrGreater, (, ), &&]
[}, else, if, (, radix, ==, 0, ), {, if, (, !, isEcmaScript5OrGreater, (, ), &&, stringVal, ., substring, (]
[if, (, radix, ==, 0, ), {, if, (, !, isEcmaScript5OrGreater, (, ), &&, stringVal, ., substring, (, 0, ,]
[), {, if, (, !, isEcmaScript5OrGreater, (, ), &&, stringVal, ., substring, (, 0, ,, 1, ), ., equals, (]
[isEcmaScript5OrGreater, (, ), &&, stringVal, ., substring, (, 0, ,, 1, ), ., equals, (, "0", ), ), {, return]
[&&, stringVal, ., substring, (, 0, ,, 1, ), ., equals, (, "0", ), ), {, return, n, ;, }]
[., substring, (, 0, ,, 1, ), ., equals, (, "0", ), ), {, return, n, ;, }, radix, =]
[., equals, (, "0", ), ), {, return, n, ;, }, radix, =, 10, ;, }, }, int, newVal, =]
[), ), {, return, n, ;, }, radix, =, 10, ;, }, }, int, newVal, =, 0, ;, try, {]
[{, return, n, ;, }, radix, =, 10, ;, }, }, int, newVal, =, 0, ;, try, {, newVal, =]
[{, return, n, ;, }, radix, =, 10, ;, }, }, int, newVal, =, 0, ;, try, {, newVal, =]
[}, radix, =, 10, ;, }, }, int, newVal, =, 0, ;, try, {, newVal, =, Integer, ., parseInt, (]
[=, 10, ;, }, }, int, newVal, =, 0, ;, try, {, newVal, =, Integer, ., parseInt, (, stringVal, ,]
[{, newVal, =, Integer, ., parseInt, (, stringVal, ,, radix, ), ;, }, catch, (, NumberFormatException, e, ), {, return]
[Integer, ., parseInt, (, stringVal, ,, radix, ), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }]
[parseInt, (, stringVal, ,, radix, ), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, newNode, =]
[parseInt, (, stringVal, ,, radix, ), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, newNode, =]
[radix, ), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, newNode, =, IR, ., number, (]
[{, return, n, ;, }, newNode, =, IR, ., number, (, newVal, ), ;, }, else, {, String, normalizedNewVal, =]
[IR, ., number, (, newVal, ), ;, }, else, {, String, normalizedNewVal, =, "0", ;, try, {, double, newVal, =]
[IR, ., number, (, newVal, ), ;, }, else, {, String, normalizedNewVal, =, "0", ;, try, {, double, newVal, =]
[newVal, ), ;, }, else, {, String, normalizedNewVal, =, "0", ;, try, {, double, newVal, =, Double, ., parseDouble, (]
[}, else, {, String, normalizedNewVal, =, "0", ;, try, {, double, newVal, =, Double, ., parseDouble, (, stringVal, ), ;]
[{, String, normalizedNewVal, =, "0", ;, try, {, double, newVal, =, Double, ., parseDouble, (, stringVal, ), ;, newNode, =]
[{, String, normalizedNewVal, =, "0", ;, try, {, double, newVal, =, Double, ., parseDouble, (, stringVal, ), ;, newNode, =]
["0", ;, try, {, double, newVal, =, Double, ., parseDouble, (, stringVal, ), ;, newNode, =, IR, ., number, (]
[{, double, newVal, =, Double, ., parseDouble, (, stringVal, ), ;, newNode, =, IR, ., number, (, newVal, ), ;]
[newVal, =, Double, ., parseDouble, (, stringVal, ), ;, newNode, =, IR, ., number, (, newVal, ), ;, normalizedNewVal, =]
[Double, ., parseDouble, (, stringVal, ), ;, newNode, =, IR, ., number, (, newVal, ), ;, normalizedNewVal, =, normalizeNumericString, (]
[Double, ., parseDouble, (, stringVal, ), ;, newNode, =, IR, ., number, (, newVal, ), ;, normalizedNewVal, =, normalizeNumericString, (]
[stringVal, ), ;, newNode, =, IR, ., number, (, newVal, ), ;, normalizedNewVal, =, normalizeNumericString, (, String, ., valueOf, (]
[normalizedNewVal, =, normalizeNumericString, (, String, ., valueOf, (, newVal, ), ), ;, }, catch, (, NumberFormatException, e, ), {, return]
[., valueOf, (, newVal, ), ), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, if, (]
[valueOf, (, newVal, ), ), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, if, (, !]
[valueOf, (, newVal, ), ), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, if, (, !]
[newVal, ), ), ;, }, catch, (, NumberFormatException, e, ), {, return, n, ;, }, if, (, !, normalizeNumericString, (]
[catch, (, NumberFormatException, e, ), {, return, n, ;, }, if, (, !, normalizeNumericString, (, stringVal, ), ., equals, (]
[{, return, n, ;, }, if, (, !, normalizeNumericString, (, stringVal, ), ., equals, (, normalizedNewVal, ), ), {, return]
[}, if, (, !, normalizeNumericString, (, stringVal, ), ., equals, (, normalizedNewVal, ), ), {, return, n, ;, }, }]
[}, if, (, !, normalizeNumericString, (, stringVal, ), ., equals, (, normalizedNewVal, ), ), {, return, n, ;, }, }]
[}, if, (, !, normalizeNumericString, (, stringVal, ), ., equals, (, normalizedNewVal, ), ), {, return, n, ;, }, }]
[., equals, (, normalizedNewVal, ), ), {, return, n, ;, }, }, n, ., getParent, (, ), ., replaceChild, (]
[(, normalizedNewVal, ), ), {, return, n, ;, }, }, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[), {, return, n, ;, }, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, ), ;]
[}, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, ), ;, reportCodeChange, (, ), ;, return]
[newNode, ;, }, private, Node, tryFoldStringIndexOf, (, Node, n, ,, String, functionName, ,, Node, lstringNode, ,, Node, firstArg, ), {]
[newNode, ;, }, private, Node, tryFoldStringIndexOf, (, Node, n, ,, String, functionName, ,, Node, lstringNode, ,, Node, firstArg, ), {]
[Node, tryFoldStringIndexOf, (, Node, n, ,, String, functionName, ,, Node, lstringNode, ,, Node, firstArg, ), {, Preconditions, ., checkArgument, (]
[Node, tryFoldStringIndexOf, (, Node, n, ,, String, functionName, ,, Node, lstringNode, ,, Node, firstArg, ), {, Preconditions, ., checkArgument, (]
[functionName, ,, Node, lstringNode, ,, Node, firstArg, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;]
[functionName, ,, Node, lstringNode, ,, Node, firstArg, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;]
[,, Node, firstArg, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (]
[,, Node, firstArg, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (]
[., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, lstringNode, ., isString, (, ), ), ;, String, lstring, =]
[., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, lstringNode, ., isString, (, ), ), ;, String, lstring, =]
[), ;, Preconditions, ., checkArgument, (, lstringNode, ., isString, (, ), ), ;, String, lstring, =, NodeUtil, ., getStringValue, (]
[lstringNode, ., isString, (, ), ), ;, String, lstring, =, NodeUtil, ., getStringValue, (, lstringNode, ), ;, boolean, isIndexOf, =]
[lstringNode, ., isString, (, ), ), ;, String, lstring, =, NodeUtil, ., getStringValue, (, lstringNode, ), ;, boolean, isIndexOf, =]
[), ), ;, String, lstring, =, NodeUtil, ., getStringValue, (, lstringNode, ), ;, boolean, isIndexOf, =, functionName, ., equals, (]
[NodeUtil, ., getStringValue, (, lstringNode, ), ;, boolean, isIndexOf, =, functionName, ., equals, (, "indexOf", ), ;, Node, secondArg, =]
[NodeUtil, ., getStringValue, (, lstringNode, ), ;, boolean, isIndexOf, =, functionName, ., equals, (, "indexOf", ), ;, Node, secondArg, =]
[=, functionName, ., equals, (, "indexOf", ), ;, Node, secondArg, =, firstArg, ., getNext, (, ), ;, String, searchValue, =]
[=, functionName, ., equals, (, "indexOf", ), ;, Node, secondArg, =, firstArg, ., getNext, (, ), ;, String, searchValue, =]
[(, "indexOf", ), ;, Node, secondArg, =, firstArg, ., getNext, (, ), ;, String, searchValue, =, NodeUtil, ., getStringValue, (]
[secondArg, =, firstArg, ., getNext, (, ), ;, String, searchValue, =, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (]
[secondArg, =, firstArg, ., getNext, (, ), ;, String, searchValue, =, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (]
[firstArg, ., getNext, (, ), ;, String, searchValue, =, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (, searchValue, ==]
[), ;, String, searchValue, =, NodeUtil, ., getStringValue, (, firstArg, ), ;, if, (, searchValue, ==, null, ), {, return]
[., getStringValue, (, firstArg, ), ;, if, (, searchValue, ==, null, ), {, return, n, ;, }, int, fromIndex, =]
[., getStringValue, (, firstArg, ), ;, if, (, searchValue, ==, null, ), {, return, n, ;, }, int, fromIndex, =]
[(, firstArg, ), ;, if, (, searchValue, ==, null, ), {, return, n, ;, }, int, fromIndex, =, isIndexOf, ?]
[), ;, if, (, searchValue, ==, null, ), {, return, n, ;, }, int, fromIndex, =, isIndexOf, ?, 0, :]
[), ;, if, (, searchValue, ==, null, ), {, return, n, ;, }, int, fromIndex, =, isIndexOf, ?, 0, :]
[{, return, n, ;, }, int, fromIndex, =, isIndexOf, ?, 0, :, lstring, ., length, (, ), ;, if, (]
[{, return, n, ;, }, int, fromIndex, =, isIndexOf, ?, 0, :, lstring, ., length, (, ), ;, if, (]
[n, ;, }, int, fromIndex, =, isIndexOf, ?, 0, :, lstring, ., length, (, ), ;, if, (, secondArg, !=]
[=, isIndexOf, ?, 0, :, lstring, ., length, (, ), ;, if, (, secondArg, !=, null, ), {, if, (]
[=, isIndexOf, ?, 0, :, lstring, ., length, (, ), ;, if, (, secondArg, !=, null, ), {, if, (]
[=, isIndexOf, ?, 0, :, lstring, ., length, (, ), ;, if, (, secondArg, !=, null, ), {, if, (]
[=, isIndexOf, ?, 0, :, lstring, ., length, (, ), ;, if, (, secondArg, !=, null, ), {, if, (]
[., length, (, ), ;, if, (, secondArg, !=, null, ), {, if, (, secondArg, ., getNext, (, ), !=]
[(, ), ;, if, (, secondArg, !=, null, ), {, if, (, secondArg, ., getNext, (, ), !=, null, ||]
[), ;, if, (, secondArg, !=, null, ), {, if, (, secondArg, ., getNext, (, ), !=, null, ||, !]
[), ;, if, (, secondArg, !=, null, ), {, if, (, secondArg, ., getNext, (, ), !=, null, ||, !]
[{, if, (, secondArg, ., getNext, (, ), !=, null, ||, !, secondArg, ., isNumber, (, ), ), {, return]
[getNext, (, ), !=, null, ||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else, {]
[), !=, null, ||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else, {, fromIndex, =]
[||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else, {, fromIndex, =, (, int, )]
[||, !, secondArg, ., isNumber, (, ), ), {, return, n, ;, }, else, {, fromIndex, =, (, int, )]
[;, }, else, {, fromIndex, =, (, int, ), secondArg, ., getDouble, (, ), ;, }, }, int, indexVal, =]
[;, }, else, {, fromIndex, =, (, int, ), secondArg, ., getDouble, (, ), ;, }, }, int, indexVal, =]
[else, {, fromIndex, =, (, int, ), secondArg, ., getDouble, (, ), ;, }, }, int, indexVal, =, isIndexOf, ?]
[else, {, fromIndex, =, (, int, ), secondArg, ., getDouble, (, ), ;, }, }, int, indexVal, =, isIndexOf, ?]
[(, int, ), secondArg, ., getDouble, (, ), ;, }, }, int, indexVal, =, isIndexOf, ?, lstring, ., indexOf, (]
[), secondArg, ., getDouble, (, ), ;, }, }, int, indexVal, =, isIndexOf, ?, lstring, ., indexOf, (, searchValue, ,]
[getDouble, (, ), ;, }, }, int, indexVal, =, isIndexOf, ?, lstring, ., indexOf, (, searchValue, ,, fromIndex, ), :]
[getDouble, (, ), ;, }, }, int, indexVal, =, isIndexOf, ?, lstring, ., indexOf, (, searchValue, ,, fromIndex, ), :]
[}, }, int, indexVal, =, isIndexOf, ?, lstring, ., indexOf, (, searchValue, ,, fromIndex, ), :, lstring, ., lastIndexOf, (]
[int, indexVal, =, isIndexOf, ?, lstring, ., indexOf, (, searchValue, ,, fromIndex, ), :, lstring, ., lastIndexOf, (, searchValue, ,]
[., indexOf, (, searchValue, ,, fromIndex, ), :, lstring, ., lastIndexOf, (, searchValue, ,, fromIndex, ), ;, Node, newNode, =]
[., indexOf, (, searchValue, ,, fromIndex, ), :, lstring, ., lastIndexOf, (, searchValue, ,, fromIndex, ), ;, Node, newNode, =]
[,, fromIndex, ), :, lstring, ., lastIndexOf, (, searchValue, ,, fromIndex, ), ;, Node, newNode, =, IR, ., number, (]
[:, lstring, ., lastIndexOf, (, searchValue, ,, fromIndex, ), ;, Node, newNode, =, IR, ., number, (, indexVal, ), ;]
[:, lstring, ., lastIndexOf, (, searchValue, ,, fromIndex, ), ;, Node, newNode, =, IR, ., number, (, indexVal, ), ;]
[:, lstring, ., lastIndexOf, (, searchValue, ,, fromIndex, ), ;, Node, newNode, =, IR, ., number, (, indexVal, ), ;]
[), ;, Node, newNode, =, IR, ., number, (, indexVal, ), ;, n, ., getParent, (, ), ., replaceChild, (]
[Node, newNode, =, IR, ., number, (, indexVal, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[IR, ., number, (, indexVal, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, ), ;]
[), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, ), ;, reportCodeChange, (, ), ;, return]
[;, reportCodeChange, (, ), ;, return, newNode, ;, }, private, Node, tryFoldArrayJoin, (, Node, n, ), {, Node, callTarget, =]
[;, reportCodeChange, (, ), ;, return, newNode, ;, }, private, Node, tryFoldArrayJoin, (, Node, n, ), {, Node, callTarget, =]
[}, private, Node, tryFoldArrayJoin, (, Node, n, ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, if, (]
[}, private, Node, tryFoldArrayJoin, (, Node, n, ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, if, (]
[}, private, Node, tryFoldArrayJoin, (, Node, n, ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, if, (]
[Node, tryFoldArrayJoin, (, Node, n, ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, if, (, callTarget, ==]
[(, Node, n, ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ||]
[Node, n, ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ||, !]
[Node, n, ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ||, !]
[., getFirstChild, (, ), ;, if, (, callTarget, ==, null, ||, !, callTarget, ., isGetProp, (, ), ), {, return]
[(, callTarget, ==, null, ||, !, callTarget, ., isGetProp, (, ), ), {, return, n, ;, }, Node, right, =]
[(, callTarget, ==, null, ||, !, callTarget, ., isGetProp, (, ), ), {, return, n, ;, }, Node, right, =]
[isGetProp, (, ), ), {, return, n, ;, }, Node, right, =, callTarget, ., getNext, (, ), ;, if, (]
[isGetProp, (, ), ), {, return, n, ;, }, Node, right, =, callTarget, ., getNext, (, ), ;, if, (]
[), ), {, return, n, ;, }, Node, right, =, callTarget, ., getNext, (, ), ;, if, (, right, !=]
[;, }, Node, right, =, callTarget, ., getNext, (, ), ;, if, (, right, !=, null, ), {, if, (]
[;, }, Node, right, =, callTarget, ., getNext, (, ), ;, if, (, right, !=, null, ), {, if, (]
[;, }, Node, right, =, callTarget, ., getNext, (, ), ;, if, (, right, !=, null, ), {, if, (]
[;, }, Node, right, =, callTarget, ., getNext, (, ), ;, if, (, right, !=, null, ), {, if, (]
[., getNext, (, ), ;, if, (, right, !=, null, ), {, if, (, right, ., getNext, (, ), !=]
[(, ), ;, if, (, right, !=, null, ), {, if, (, right, ., getNext, (, ), !=, null, ||]
[), ;, if, (, right, !=, null, ), {, if, (, right, ., getNext, (, ), !=, null, ||, !]
[), ;, if, (, right, !=, null, ), {, if, (, right, ., getNext, (, ), !=, null, ||, !]
[right, !=, null, ), {, if, (, right, ., getNext, (, ), !=, null, ||, !, NodeUtil, ., isImmutableValue, (]
[if, (, right, ., getNext, (, ), !=, null, ||, !, NodeUtil, ., isImmutableValue, (, right, ), ), {, return]
[!=, null, ||, !, NodeUtil, ., isImmutableValue, (, right, ), ), {, return, n, ;, }, }, Node, arrayNode, =]
[!=, null, ||, !, NodeUtil, ., isImmutableValue, (, right, ), ), {, return, n, ;, }, }, Node, arrayNode, =]
[), ), {, return, n, ;, }, }, Node, arrayNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =]
[), ), {, return, n, ;, }, }, Node, arrayNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =]
[Node, arrayNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, arrayNode, ., getNext, (, ), ;, if, (]
[Node, arrayNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, arrayNode, ., getNext, (, ), ;, if, (]
[arrayNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, arrayNode, ., getNext, (, ), ;, if, (, !]
[arrayNode, =, callTarget, ., getFirstChild, (, ), ;, Node, functionName, =, arrayNode, ., getNext, (, ), ;, if, (, !]
[), ;, Node, functionName, =, arrayNode, ., getNext, (, ), ;, if, (, !, arrayNode, ., isArrayLit, (, ), ||]
[;, Node, functionName, =, arrayNode, ., getNext, (, ), ;, if, (, !, arrayNode, ., isArrayLit, (, ), ||, !]
[;, Node, functionName, =, arrayNode, ., getNext, (, ), ;, if, (, !, arrayNode, ., isArrayLit, (, ), ||, !]
[;, Node, functionName, =, arrayNode, ., getNext, (, ), ;, if, (, !, arrayNode, ., isArrayLit, (, ), ||, !]
[), ;, if, (, !, arrayNode, ., isArrayLit, (, ), ||, !, functionName, ., getString, (, ), ., equals, (]
[arrayNode, ., isArrayLit, (, ), ||, !, functionName, ., getString, (, ), ., equals, (, "join", ), ), {, return]
[||, !, functionName, ., getString, (, ), ., equals, (, "join", ), ), {, return, n, ;, }, if, (]
[||, !, functionName, ., getString, (, ), ., equals, (, "join", ), ), {, return, n, ;, }, if, (]
[||, !, functionName, ., getString, (, ), ., equals, (, "join", ), ), {, return, n, ;, }, if, (]
[||, !, functionName, ., getString, (, ), ., equals, (, "join", ), ), {, return, n, ;, }, if, (]
[functionName, ., getString, (, ), ., equals, (, "join", ), ), {, return, n, ;, }, if, (, right, !=]
[getString, (, ), ., equals, (, "join", ), ), {, return, n, ;, }, if, (, right, !=, null, &&]
[getString, (, ), ., equals, (, "join", ), ), {, return, n, ;, }, if, (, right, !=, null, &&]
["join", ), ), {, return, n, ;, }, if, (, right, !=, null, &&, right, ., isString, (, ), &&]
["join", ), ), {, return, n, ;, }, if, (, right, !=, null, &&, right, ., isString, (, ), &&]
[return, n, ;, }, if, (, right, !=, null, &&, right, ., isString, (, ), &&, ",", ., equals, (]
[return, n, ;, }, if, (, right, !=, null, &&, right, ., isString, (, ), &&, ",", ., equals, (]
[null, &&, right, ., isString, (, ), &&, ",", ., equals, (, right, ., getString, (, ), ), ), {]
[null, &&, right, ., isString, (, ), &&, ",", ., equals, (, right, ., getString, (, ), ), ), {]
[isString, (, ), &&, ",", ., equals, (, right, ., getString, (, ), ), ), {, n, ., removeChild, (]
[&&, ",", ., equals, (, right, ., getString, (, ), ), ), {, n, ., removeChild, (, right, ), ;]
[(, ), ), ), {, n, ., removeChild, (, right, ), ;, reportCodeChange, (, ), ;, }, String, joinString, =]
[(, ), ), ), {, n, ., removeChild, (, right, ), ;, reportCodeChange, (, ), ;, }, String, joinString, =]
[), ), ), {, n, ., removeChild, (, right, ), ;, reportCodeChange, (, ), ;, }, String, joinString, =, (]
[), ), ), {, n, ., removeChild, (, right, ), ;, reportCodeChange, (, ), ;, }, String, joinString, =, (]
[), {, n, ., removeChild, (, right, ), ;, reportCodeChange, (, ), ;, }, String, joinString, =, (, right, ==]
[., removeChild, (, right, ), ;, reportCodeChange, (, ), ;, }, String, joinString, =, (, right, ==, null, ), ?]
[(, right, ), ;, reportCodeChange, (, ), ;, }, String, joinString, =, (, right, ==, null, ), ?, ",", :]
[(, right, ), ;, reportCodeChange, (, ), ;, }, String, joinString, =, (, right, ==, null, ), ?, ",", :]
[reportCodeChange, (, ), ;, }, String, joinString, =, (, right, ==, null, ), ?, ",", :, NodeUtil, ., getStringValue, (]
[right, ==, null, ), ?, ",", :, NodeUtil, ., getStringValue, (, right, ), ;, List, <, Node, >, arrayFoldedChildren, =]
[right, ==, null, ), ?, ",", :, NodeUtil, ., getStringValue, (, right, ), ;, List, <, Node, >, arrayFoldedChildren, =]
[getStringValue, (, right, ), ;, List, <, Node, >, arrayFoldedChildren, =, Lists, ., newLinkedList, (, ), ;, StringBuilder, sb, =]
[List, <, Node, >, arrayFoldedChildren, =, Lists, ., newLinkedList, (, ), ;, StringBuilder, sb, =, null, ;, int, foldedSize, =]
[=, Lists, ., newLinkedList, (, ), ;, StringBuilder, sb, =, null, ;, int, foldedSize, =, 0, ;, Node, prev, =]
[), ;, StringBuilder, sb, =, null, ;, int, foldedSize, =, 0, ;, Node, prev, =, null, ;, Node, elem, =]
[), ;, StringBuilder, sb, =, null, ;, int, foldedSize, =, 0, ;, Node, prev, =, null, ;, Node, elem, =]
[foldedSize, =, 0, ;, Node, prev, =, null, ;, Node, elem, =, arrayNode, ., getFirstChild, (, ), ;, while, (]
[foldedSize, =, 0, ;, Node, prev, =, null, ;, Node, elem, =, arrayNode, ., getFirstChild, (, ), ;, while, (]
[0, ;, Node, prev, =, null, ;, Node, elem, =, arrayNode, ., getFirstChild, (, ), ;, while, (, elem, !=]
[null, ;, Node, elem, =, arrayNode, ., getFirstChild, (, ), ;, while, (, elem, !=, null, ), {, if, (]
[null, ;, Node, elem, =, arrayNode, ., getFirstChild, (, ), ;, while, (, elem, !=, null, ), {, if, (]
[null, ;, Node, elem, =, arrayNode, ., getFirstChild, (, ), ;, while, (, elem, !=, null, ), {, if, (]
[=, arrayNode, ., getFirstChild, (, ), ;, while, (, elem, !=, null, ), {, if, (, NodeUtil, ., isImmutableValue, (]
[getFirstChild, (, ), ;, while, (, elem, !=, null, ), {, if, (, NodeUtil, ., isImmutableValue, (, elem, ), ||]
[getFirstChild, (, ), ;, while, (, elem, !=, null, ), {, if, (, NodeUtil, ., isImmutableValue, (, elem, ), ||]
[), {, if, (, NodeUtil, ., isImmutableValue, (, elem, ), ||, elem, ., isEmpty, (, ), ), {, if, (]
[), {, if, (, NodeUtil, ., isImmutableValue, (, elem, ), ||, elem, ., isEmpty, (, ), ), {, if, (]
[if, (, NodeUtil, ., isImmutableValue, (, elem, ), ||, elem, ., isEmpty, (, ), ), {, if, (, sb, ==]
[., isImmutableValue, (, elem, ), ||, elem, ., isEmpty, (, ), ), {, if, (, sb, ==, null, ), {]
[(, elem, ), ||, elem, ., isEmpty, (, ), ), {, if, (, sb, ==, null, ), {, sb, =]
[), ), {, if, (, sb, ==, null, ), {, sb, =, new, StringBuilder, (, ), ;, }, else, {]
[), ), {, if, (, sb, ==, null, ), {, sb, =, new, StringBuilder, (, ), ;, }, else, {]
[(, sb, ==, null, ), {, sb, =, new, StringBuilder, (, ), ;, }, else, {, sb, ., append, (]
[), {, sb, =, new, StringBuilder, (, ), ;, }, else, {, sb, ., append, (, joinString, ), ;, }]
[), {, sb, =, new, StringBuilder, (, ), ;, }, else, {, sb, ., append, (, joinString, ), ;, }]
[new, StringBuilder, (, ), ;, }, else, {, sb, ., append, (, joinString, ), ;, }, sb, ., append, (]
[new, StringBuilder, (, ), ;, }, else, {, sb, ., append, (, joinString, ), ;, }, sb, ., append, (]
[;, }, else, {, sb, ., append, (, joinString, ), ;, }, sb, ., append, (, NodeUtil, ., getArrayElementStringValue, (]
[), ;, }, sb, ., append, (, NodeUtil, ., getArrayElementStringValue, (, elem, ), ), ;, }, else, {, if, (]
[), ;, }, sb, ., append, (, NodeUtil, ., getArrayElementStringValue, (, elem, ), ), ;, }, else, {, if, (]
[}, sb, ., append, (, NodeUtil, ., getArrayElementStringValue, (, elem, ), ), ;, }, else, {, if, (, sb, !=]
[append, (, NodeUtil, ., getArrayElementStringValue, (, elem, ), ), ;, }, else, {, if, (, sb, !=, null, ), {]
[append, (, NodeUtil, ., getArrayElementStringValue, (, elem, ), ), ;, }, else, {, if, (, sb, !=, null, ), {]
[getArrayElementStringValue, (, elem, ), ), ;, }, else, {, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (]
[), ), ;, }, else, {, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;]
[;, }, else, {, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=]
[;, }, else, {, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=]
[;, }, else, {, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=]
[sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +]
[null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;]
[null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;]
[., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (]
[., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (]
[., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (]
[), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (]
[), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (]
[+, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (]
[., add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;]
[(, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;, sb, =]
[string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;, sb, =, null, ;, }]
[sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;, sb, =, null, ;, }, foldedSize, +=]
[sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;, sb, =, null, ;, }, foldedSize, +=]
[), ), ., copyInformationFrom, (, prev, ), ), ;, sb, =, null, ;, }, foldedSize, +=, InlineCostEstimator, ., getCost, (]
[copyInformationFrom, (, prev, ), ), ;, sb, =, null, ;, }, foldedSize, +=, InlineCostEstimator, ., getCost, (, elem, ), ;]
[copyInformationFrom, (, prev, ), ), ;, sb, =, null, ;, }, foldedSize, +=, InlineCostEstimator, ., getCost, (, elem, ), ;]
[), ;, sb, =, null, ;, }, foldedSize, +=, InlineCostEstimator, ., getCost, (, elem, ), ;, arrayFoldedChildren, ., add, (]
[null, ;, }, foldedSize, +=, InlineCostEstimator, ., getCost, (, elem, ), ;, arrayFoldedChildren, ., add, (, elem, ), ;, }]
[}, foldedSize, +=, InlineCostEstimator, ., getCost, (, elem, ), ;, arrayFoldedChildren, ., add, (, elem, ), ;, }, prev, =]
[+=, InlineCostEstimator, ., getCost, (, elem, ), ;, arrayFoldedChildren, ., add, (, elem, ), ;, }, prev, =, elem, ;]
[., getCost, (, elem, ), ;, arrayFoldedChildren, ., add, (, elem, ), ;, }, prev, =, elem, ;, elem, =]
[., getCost, (, elem, ), ;, arrayFoldedChildren, ., add, (, elem, ), ;, }, prev, =, elem, ;, elem, =]
[(, elem, ), ;, }, prev, =, elem, ;, elem, =, elem, ., getNext, (, ), ;, }, if, (]
[(, elem, ), ;, }, prev, =, elem, ;, elem, =, elem, ., getNext, (, ), ;, }, if, (]
[), ;, }, prev, =, elem, ;, elem, =, elem, ., getNext, (, ), ;, }, if, (, sb, !=]
[prev, =, elem, ;, elem, =, elem, ., getNext, (, ), ;, }, if, (, sb, !=, null, ), {]
[prev, =, elem, ;, elem, =, elem, ., getNext, (, ), ;, }, if, (, sb, !=, null, ), {]
[elem, =, elem, ., getNext, (, ), ;, }, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (]
[., getNext, (, ), ;, }, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;]
[(, ), ;, }, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=]
[(, ), ;, }, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=]
[(, ), ;, }, if, (, sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=]
[sb, !=, null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +]
[null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;]
[null, ), {, Preconditions, ., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;]
[., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (]
[., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (]
[., checkNotNull, (, prev, ), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (]
[), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (]
[), ;, foldedSize, +=, sb, ., length, (, ), +, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (]
[+, 2, ;, arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (]
[add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;, }]
[IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;, }, foldedSize, +=]
[IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;, }, foldedSize, +=]
[IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;, }, foldedSize, +=]
[toString, (, ), ), ., copyInformationFrom, (, prev, ), ), ;, }, foldedSize, +=, arrayFoldedChildren, ., size, (, ), -]
[copyInformationFrom, (, prev, ), ), ;, }, foldedSize, +=, arrayFoldedChildren, ., size, (, ), -, 1, ;, int, originalSize, =]
[copyInformationFrom, (, prev, ), ), ;, }, foldedSize, +=, arrayFoldedChildren, ., size, (, ), -, 1, ;, int, originalSize, =]
[), ;, }, foldedSize, +=, arrayFoldedChildren, ., size, (, ), -, 1, ;, int, originalSize, =, InlineCostEstimator, ., getCost, (]
[arrayFoldedChildren, ., size, (, ), -, 1, ;, int, originalSize, =, InlineCostEstimator, ., getCost, (, n, ), ;, switch, (]
[arrayFoldedChildren, ., size, (, ), -, 1, ;, int, originalSize, =, InlineCostEstimator, ., getCost, (, n, ), ;, switch, (]
[int, originalSize, =, InlineCostEstimator, ., getCost, (, n, ), ;, switch, (, arrayFoldedChildren, ., size, (, ), ), {, case]
[getCost, (, n, ), ;, switch, (, arrayFoldedChildren, ., size, (, ), ), {, case, 0, :, Node, emptyStringNode, =]
[getCost, (, n, ), ;, switch, (, arrayFoldedChildren, ., size, (, ), ), {, case, 0, :, Node, emptyStringNode, =]
[;, switch, (, arrayFoldedChildren, ., size, (, ), ), {, case, 0, :, Node, emptyStringNode, =, IR, ., string, (]
[arrayFoldedChildren, ., size, (, ), ), {, case, 0, :, Node, emptyStringNode, =, IR, ., string, (, "", ), ;]
[arrayFoldedChildren, ., size, (, ), ), {, case, 0, :, Node, emptyStringNode, =, IR, ., string, (, "", ), ;]
[arrayFoldedChildren, ., size, (, ), ), {, case, 0, :, Node, emptyStringNode, =, IR, ., string, (, "", ), ;]
[0, :, Node, emptyStringNode, =, IR, ., string, (, "", ), ;, n, ., getParent, (, ), ., replaceChild, (]
[Node, emptyStringNode, =, IR, ., string, (, "", ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[IR, ., string, (, "", ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, emptyStringNode, ), ;]
[), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, emptyStringNode, ), ;, reportCodeChange, (, ), ;, return]
[., getParent, (, ), ., replaceChild, (, n, ,, emptyStringNode, ), ;, reportCodeChange, (, ), ;, return, emptyStringNode, ;, case]
[replaceChild, (, n, ,, emptyStringNode, ), ;, reportCodeChange, (, ), ;, return, emptyStringNode, ;, case, 1, :, Node, foldedStringNode, =]
[replaceChild, (, n, ,, emptyStringNode, ), ;, reportCodeChange, (, ), ;, return, emptyStringNode, ;, case, 1, :, Node, foldedStringNode, =]
[emptyStringNode, ), ;, reportCodeChange, (, ), ;, return, emptyStringNode, ;, case, 1, :, Node, foldedStringNode, =, arrayFoldedChildren, ., remove, (]
[), ;, return, emptyStringNode, ;, case, 1, :, Node, foldedStringNode, =, arrayFoldedChildren, ., remove, (, 0, ), ;, if, (]
[), ;, return, emptyStringNode, ;, case, 1, :, Node, foldedStringNode, =, arrayFoldedChildren, ., remove, (, 0, ), ;, if, (]
[return, emptyStringNode, ;, case, 1, :, Node, foldedStringNode, =, arrayFoldedChildren, ., remove, (, 0, ), ;, if, (, foldedSize, >]
[1, :, Node, foldedStringNode, =, arrayFoldedChildren, ., remove, (, 0, ), ;, if, (, foldedSize, >, originalSize, ), {, return]
[foldedStringNode, =, arrayFoldedChildren, ., remove, (, 0, ), ;, if, (, foldedSize, >, originalSize, ), {, return, n, ;, }]
[foldedStringNode, =, arrayFoldedChildren, ., remove, (, 0, ), ;, if, (, foldedSize, >, originalSize, ), {, return, n, ;, }]
[;, if, (, foldedSize, >, originalSize, ), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, if, (]
[if, (, foldedSize, >, originalSize, ), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, if, (, !]
[if, (, foldedSize, >, originalSize, ), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, if, (, !]
[}, arrayNode, ., detachChildren, (, ), ;, if, (, !, foldedStringNode, ., isString, (, ), ), {, Node, replacement, =]
[}, arrayNode, ., detachChildren, (, ), ;, if, (, !, foldedStringNode, ., isString, (, ), ), {, Node, replacement, =]
[(, ), ;, if, (, !, foldedStringNode, ., isString, (, ), ), {, Node, replacement, =, IR, ., add, (]
[(, ), ;, if, (, !, foldedStringNode, ., isString, (, ), ), {, Node, replacement, =, IR, ., add, (]
[(, ), ;, if, (, !, foldedStringNode, ., isString, (, ), ), {, Node, replacement, =, IR, ., add, (]
[(, !, foldedStringNode, ., isString, (, ), ), {, Node, replacement, =, IR, ., add, (, IR, ., string, (]
[(, ), ), {, Node, replacement, =, IR, ., add, (, IR, ., string, (, "", ), ., srcref, (]
[{, Node, replacement, =, IR, ., add, (, IR, ., string, (, "", ), ., srcref, (, n, ), ,]
[=, IR, ., add, (, IR, ., string, (, "", ), ., srcref, (, n, ), ,, foldedStringNode, ), ;]
[., add, (, IR, ., string, (, "", ), ., srcref, (, n, ), ,, foldedStringNode, ), ;, foldedStringNode, =]
[IR, ., string, (, "", ), ., srcref, (, n, ), ,, foldedStringNode, ), ;, foldedStringNode, =, replacement, ;, }]
[IR, ., string, (, "", ), ., srcref, (, n, ), ,, foldedStringNode, ), ;, foldedStringNode, =, replacement, ;, }]
[IR, ., string, (, "", ), ., srcref, (, n, ), ,, foldedStringNode, ), ;, foldedStringNode, =, replacement, ;, }]
[(, n, ), ,, foldedStringNode, ), ;, foldedStringNode, =, replacement, ;, }, n, ., getParent, (, ), ., replaceChild, (]
[), ,, foldedStringNode, ), ;, foldedStringNode, =, replacement, ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[), ;, foldedStringNode, =, replacement, ;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, foldedStringNode, ), ;]
[;, }, n, ., getParent, (, ), ., replaceChild, (, n, ,, foldedStringNode, ), ;, reportCodeChange, (, ), ;, return]
[), ., replaceChild, (, n, ,, foldedStringNode, ), ;, reportCodeChange, (, ), ;, return, foldedStringNode, ;, default, :, if, (]
[), ., replaceChild, (, n, ,, foldedStringNode, ), ;, reportCodeChange, (, ), ;, return, foldedStringNode, ;, default, :, if, (]
[), ., replaceChild, (, n, ,, foldedStringNode, ), ;, reportCodeChange, (, ), ;, return, foldedStringNode, ;, default, :, if, (]
[foldedStringNode, ), ;, reportCodeChange, (, ), ;, return, foldedStringNode, ;, default, :, if, (, arrayFoldedChildren, ., size, (, ), ==]
[foldedStringNode, ), ;, reportCodeChange, (, ), ;, return, foldedStringNode, ;, default, :, if, (, arrayFoldedChildren, ., size, (, ), ==]
[foldedStringNode, ;, default, :, if, (, arrayFoldedChildren, ., size, (, ), ==, arrayNode, ., getChildCount, (, ), ), {, return]
[arrayFoldedChildren, ., size, (, ), ==, arrayNode, ., getChildCount, (, ), ), {, return, n, ;, }, int, kJoinOverhead, =]
[arrayFoldedChildren, ., size, (, ), ==, arrayNode, ., getChildCount, (, ), ), {, return, n, ;, }, int, kJoinOverhead, =]
[arrayNode, ., getChildCount, (, ), ), {, return, n, ;, }, int, kJoinOverhead, =, "[].join()", ., length, (, ), ;]
[getChildCount, (, ), ), {, return, n, ;, }, int, kJoinOverhead, =, "[].join()", ., length, (, ), ;, foldedSize, +=]
[), ), {, return, n, ;, }, int, kJoinOverhead, =, "[].join()", ., length, (, ), ;, foldedSize, +=, kJoinOverhead, ;]
[{, return, n, ;, }, int, kJoinOverhead, =, "[].join()", ., length, (, ), ;, foldedSize, +=, kJoinOverhead, ;, foldedSize, +=]
[{, return, n, ;, }, int, kJoinOverhead, =, "[].join()", ., length, (, ), ;, foldedSize, +=, kJoinOverhead, ;, foldedSize, +=]
[return, n, ;, }, int, kJoinOverhead, =, "[].join()", ., length, (, ), ;, foldedSize, +=, kJoinOverhead, ;, foldedSize, +=, (]
[return, n, ;, }, int, kJoinOverhead, =, "[].join()", ., length, (, ), ;, foldedSize, +=, kJoinOverhead, ;, foldedSize, +=, (]
[;, }, int, kJoinOverhead, =, "[].join()", ., length, (, ), ;, foldedSize, +=, kJoinOverhead, ;, foldedSize, +=, (, right, !=]
[kJoinOverhead, =, "[].join()", ., length, (, ), ;, foldedSize, +=, kJoinOverhead, ;, foldedSize, +=, (, right, !=, null, ), ?]
[kJoinOverhead, =, "[].join()", ., length, (, ), ;, foldedSize, +=, kJoinOverhead, ;, foldedSize, +=, (, right, !=, null, ), ?]
[length, (, ), ;, foldedSize, +=, kJoinOverhead, ;, foldedSize, +=, (, right, !=, null, ), ?, InlineCostEstimator, ., getCost, (]
[;, foldedSize, +=, kJoinOverhead, ;, foldedSize, +=, (, right, !=, null, ), ?, InlineCostEstimator, ., getCost, (, right, ), :]
[;, foldedSize, +=, (, right, !=, null, ), ?, InlineCostEstimator, ., getCost, (, right, ), :, 0, ;, if, (]
[;, foldedSize, +=, (, right, !=, null, ), ?, InlineCostEstimator, ., getCost, (, right, ), :, 0, ;, if, (]
[+=, (, right, !=, null, ), ?, InlineCostEstimator, ., getCost, (, right, ), :, 0, ;, if, (, foldedSize, >]
[null, ), ?, InlineCostEstimator, ., getCost, (, right, ), :, 0, ;, if, (, foldedSize, >, originalSize, ), {, return]
[InlineCostEstimator, ., getCost, (, right, ), :, 0, ;, if, (, foldedSize, >, originalSize, ), {, return, n, ;, }]
[InlineCostEstimator, ., getCost, (, right, ), :, 0, ;, if, (, foldedSize, >, originalSize, ), {, return, n, ;, }]
[foldedSize, >, originalSize, ), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, for, (, Node, node, :]
[), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, for, (, Node, node, :, arrayFoldedChildren, ), {]
[), {, return, n, ;, }, arrayNode, ., detachChildren, (, ), ;, for, (, Node, node, :, arrayFoldedChildren, ), {]
[;, }, arrayNode, ., detachChildren, (, ), ;, for, (, Node, node, :, arrayFoldedChildren, ), {, arrayNode, ., addChildToBack, (]
[detachChildren, (, ), ;, for, (, Node, node, :, arrayFoldedChildren, ), {, arrayNode, ., addChildToBack, (, node, ), ;, }]
[:, arrayFoldedChildren, ), {, arrayNode, ., addChildToBack, (, node, ), ;, }, reportCodeChange, (, ), ;, break, ;, }, return]
[;, }, return, n, ;, }, private, Node, tryFoldStringSubstr, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {]
[;, }, return, n, ;, }, private, Node, tryFoldStringSubstr, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {]
[;, }, private, Node, tryFoldStringSubstr, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (]
[;, }, private, Node, tryFoldStringSubstr, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (]
[n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;]
[n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;]
[,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (]
[,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, start, ,, length, ;, String, stringAsString, =]
[;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, start, ,, length, ;, String, stringAsString, =]
[(, ), ), ;, int, start, ,, length, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[(, ), ), ;, int, start, ,, length, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[(, ), ), ;, int, start, ,, length, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[), ;, int, start, ,, length, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=]
[int, start, ,, length, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&]
[int, start, ,, length, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&]
[=, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), ), {]
[., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), ), {, start, =]
[), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), ), {, start, =, (, int, )]
[), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), ), {, start, =, (, int, )]
[isNumber, (, ), ), {, start, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return]
[=, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, Node, arg2, =]
[=, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, Node, arg2, =]
[), ;, }, else, {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (]
[), ;, }, else, {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (]
[}, else, {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=]
[;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (]
[;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (]
[getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {]
[), ;, if, (, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, length, =]
[(, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, length, =, (, int, )]
[(, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, length, =, (, int, )]
[isNumber, (, ), ), {, length, =, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {, return]
[length, =, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (]
[length, =, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (]
[length, =, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (]
[., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, arg2, ., getNext, (, ), !=]
[;, }, else, {, return, n, ;, }, if, (, arg2, ., getNext, (, ), !=, null, ), {, return]
[;, }, if, (, arg2, ., getNext, (, ), !=, null, ), {, return, n, ;, }, }, else, {]
[if, (, arg2, ., getNext, (, ), !=, null, ), {, return, n, ;, }, }, else, {, length, =]
[if, (, arg2, ., getNext, (, ), !=, null, ), {, return, n, ;, }, }, else, {, length, =]
[if, (, arg2, ., getNext, (, ), !=, null, ), {, return, n, ;, }, }, else, {, length, =]
[), !=, null, ), {, return, n, ;, }, }, else, {, length, =, stringAsString, ., length, (, ), -]
[return, n, ;, }, }, else, {, length, =, stringAsString, ., length, (, ), -, start, ;, }, if, (]
[return, n, ;, }, }, else, {, length, =, stringAsString, ., length, (, ), -, start, ;, }, if, (]
[return, n, ;, }, }, else, {, length, =, stringAsString, ., length, (, ), -, start, ;, }, if, (]
[return, n, ;, }, }, else, {, length, =, stringAsString, ., length, (, ), -, start, ;, }, if, (]
[n, ;, }, }, else, {, length, =, stringAsString, ., length, (, ), -, start, ;, }, if, (, (]
[n, ;, }, }, else, {, length, =, stringAsString, ., length, (, ), -, start, ;, }, if, (, (]
[}, }, else, {, length, =, stringAsString, ., length, (, ), -, start, ;, }, if, (, (, start, +]
[{, length, =, stringAsString, ., length, (, ), -, start, ;, }, if, (, (, start, +, length, ), >]
[{, length, =, stringAsString, ., length, (, ), -, start, ;, }, if, (, (, start, +, length, ), >]
[(, ), -, start, ;, }, if, (, (, start, +, length, ), >, stringAsString, ., length, (, ), ||]
[), -, start, ;, }, if, (, (, start, +, length, ), >, stringAsString, ., length, (, ), ||, (]
[), -, start, ;, }, if, (, (, start, +, length, ), >, stringAsString, ., length, (, ), ||, (]
[start, ;, }, if, (, (, start, +, length, ), >, stringAsString, ., length, (, ), ||, (, length, <]
[if, (, (, start, +, length, ), >, stringAsString, ., length, (, ), ||, (, length, <, 0, ), ||]
[(, (, start, +, length, ), >, stringAsString, ., length, (, ), ||, (, length, <, 0, ), ||, (]
[(, (, start, +, length, ), >, stringAsString, ., length, (, ), ||, (, length, <, 0, ), ||, (]
[start, +, length, ), >, stringAsString, ., length, (, ), ||, (, length, <, 0, ), ||, (, start, <]
[stringAsString, ., length, (, ), ||, (, length, <, 0, ), ||, (, start, <, 0, ), ), {, return]
[(, length, <, 0, ), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =]
[(, length, <, 0, ), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =]
[), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (]
[(, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,]
[(, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,]
[<, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, start, +]
[n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, start, +, length, ), ;, Node, resultNode, =]
[n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, start, +, length, ), ;, Node, resultNode, =]
[result, =, stringAsString, ., substring, (, start, ,, start, +, length, ), ;, Node, resultNode, =, IR, ., string, (]
[start, ,, start, +, length, ), ;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =]
[start, ,, start, +, length, ), ;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =]
[;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[IR, ., string, (, result, ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (]
[string, (, result, ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;]
[n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return]
[), ;, return, resultNode, ;, }, private, Node, tryFoldStringSubstring, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {]
[), ;, return, resultNode, ;, }, private, Node, tryFoldStringSubstring, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {]
[;, }, private, Node, tryFoldStringSubstring, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (]
[;, }, private, Node, tryFoldStringSubstring, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (]
[n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;]
[n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;]
[,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (]
[,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, start, ,, end, ;, String, stringAsString, =]
[;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, start, ,, end, ;, String, stringAsString, =]
[(, ), ), ;, int, start, ,, end, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[(, ), ), ;, int, start, ,, end, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[(, ), ), ;, int, start, ,, end, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[), ;, int, start, ,, end, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=]
[int, start, ,, end, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&]
[int, start, ,, end, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&]
[=, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), ), {]
[., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), ), {, start, =]
[), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), ), {, start, =, (, int, )]
[), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), ), {, start, =, (, int, )]
[isNumber, (, ), ), {, start, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return]
[=, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, Node, arg2, =]
[=, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, Node, arg2, =]
[), ;, }, else, {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (]
[), ;, }, else, {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (]
[}, else, {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=]
[;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (]
[;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (]
[getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {]
[), ;, if, (, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, end, =]
[(, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, end, =, (, int, )]
[(, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, end, =, (, int, )]
[isNumber, (, ), ), {, end, =, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {, return]
[end, =, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (]
[end, =, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (]
[end, =, (, int, ), arg2, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (]
[., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, arg2, ., getNext, (, ), !=]
[;, }, else, {, return, n, ;, }, if, (, arg2, ., getNext, (, ), !=, null, ), {, return]
[;, }, if, (, arg2, ., getNext, (, ), !=, null, ), {, return, n, ;, }, }, else, {]
[if, (, arg2, ., getNext, (, ), !=, null, ), {, return, n, ;, }, }, else, {, end, =]
[if, (, arg2, ., getNext, (, ), !=, null, ), {, return, n, ;, }, }, else, {, end, =]
[), {, return, n, ;, }, }, else, {, end, =, stringAsString, ., length, (, ), ;, }, if, (]
[), {, return, n, ;, }, }, else, {, end, =, stringAsString, ., length, (, ), ;, }, if, (]
[), {, return, n, ;, }, }, else, {, end, =, stringAsString, ., length, (, ), ;, }, if, (]
[), {, return, n, ;, }, }, else, {, end, =, stringAsString, ., length, (, ), ;, }, if, (]
[{, return, n, ;, }, }, else, {, end, =, stringAsString, ., length, (, ), ;, }, if, (, (]
[{, return, n, ;, }, }, else, {, end, =, stringAsString, ., length, (, ), ;, }, if, (, (]
[n, ;, }, }, else, {, end, =, stringAsString, ., length, (, ), ;, }, if, (, (, end, >]
[n, ;, }, }, else, {, end, =, stringAsString, ., length, (, ), ;, }, if, (, (, end, >]
[=, stringAsString, ., length, (, ), ;, }, if, (, (, end, >, stringAsString, ., length, (, ), ), ||]
[stringAsString, ., length, (, ), ;, }, if, (, (, end, >, stringAsString, ., length, (, ), ), ||, (]
[stringAsString, ., length, (, ), ;, }, if, (, (, end, >, stringAsString, ., length, (, ), ), ||, (]
[length, (, ), ;, }, if, (, (, end, >, stringAsString, ., length, (, ), ), ||, (, start, >]
[length, (, ), ;, }, if, (, (, end, >, stringAsString, ., length, (, ), ), ||, (, start, >]
[(, end, >, stringAsString, ., length, (, ), ), ||, (, start, >, stringAsString, ., length, (, ), ), ||]
[end, >, stringAsString, ., length, (, ), ), ||, (, start, >, stringAsString, ., length, (, ), ), ||, (]
[end, >, stringAsString, ., length, (, ), ), ||, (, start, >, stringAsString, ., length, (, ), ), ||, (]
[stringAsString, ., length, (, ), ), ||, (, start, >, stringAsString, ., length, (, ), ), ||, (, end, <]
[(, ), ), ||, (, start, >, stringAsString, ., length, (, ), ), ||, (, end, <, 0, ), ||]
[), ), ||, (, start, >, stringAsString, ., length, (, ), ), ||, (, end, <, 0, ), ||, (]
[), ), ||, (, start, >, stringAsString, ., length, (, ), ), ||, (, end, <, 0, ), ||, (]
[||, (, start, >, stringAsString, ., length, (, ), ), ||, (, end, <, 0, ), ||, (, start, <]
[., length, (, ), ), ||, (, end, <, 0, ), ||, (, start, <, 0, ), ), {, return]
[(, end, <, 0, ), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =]
[(, end, <, 0, ), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =]
[), ||, (, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (]
[(, start, <, 0, ), ), {, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,]
[{, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, end, ), ;, Node, resultNode, =]
[{, return, n, ;, }, String, result, =, stringAsString, ., substring, (, start, ,, end, ), ;, Node, resultNode, =]
[}, String, result, =, stringAsString, ., substring, (, start, ,, end, ), ;, Node, resultNode, =, IR, ., string, (]
[substring, (, start, ,, end, ), ;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =]
[substring, (, start, ,, end, ), ;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =]
[;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[;, Node, resultNode, =, IR, ., string, (, result, ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[IR, ., string, (, result, ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (]
[string, (, result, ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;]
[n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return]
[), ;, return, resultNode, ;, }, private, Node, tryFoldStringCharAt, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {]
[), ;, return, resultNode, ;, }, private, Node, tryFoldStringCharAt, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {]
[;, }, private, Node, tryFoldStringCharAt, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (]
[;, }, private, Node, tryFoldStringCharAt, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (]
[n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;]
[n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;]
[,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (]
[,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (]
[), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, index, ;, String, stringAsString, =]
[), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, index, ;, String, stringAsString, =]
[., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[(, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=]
[), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&]
[), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&]
[stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&]
[stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&]
[stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&]
[), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==]
[(, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {]
[!=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =]
[arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int, )]
[arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int, )]
[), ==, null, ), {, index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return]
[index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (]
[index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (]
[index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (]
[(, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, index, <]
[), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||]
[), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||]
[), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||]
[;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||, stringAsString, ., length, (, ), <=]
[return, n, ;, }, if, (, index, <, 0, ||, stringAsString, ., length, (, ), <=, index, ), {, return]
[index, <, 0, ||, stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =]
[index, <, 0, ||, stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =]
[stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., string, (]
[stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., string, (]
[), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., string, (, stringAsString, ., substring, (]
[index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., string, (, stringAsString, ., substring, (, index, ,]
[index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., string, (, stringAsString, ., substring, (, index, ,]
[{, return, n, ;, }, Node, resultNode, =, IR, ., string, (, stringAsString, ., substring, (, index, ,, index, +]
[=, IR, ., string, (, stringAsString, ., substring, (, index, ,, index, +, 1, ), ), ;, Node, parent, =]
[=, IR, ., string, (, stringAsString, ., substring, (, index, ,, index, +, 1, ), ), ;, Node, parent, =]
[., substring, (, index, ,, index, +, 1, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[., substring, (, index, ,, index, +, 1, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[,, index, +, 1, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (]
[+, 1, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;]
[n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return]
[), ;, return, resultNode, ;, }, private, Node, tryFoldStringCharCodeAt, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {]
[), ;, return, resultNode, ;, }, private, Node, tryFoldStringCharCodeAt, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {]
[;, }, private, Node, tryFoldStringCharCodeAt, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (]
[;, }, private, Node, tryFoldStringCharCodeAt, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (]
[n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;]
[n, ,, Node, stringNode, ,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;]
[,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (]
[,, Node, arg1, ), {, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (]
[), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, index, ;, String, stringAsString, =]
[), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, int, index, ;, String, stringAsString, =]
[., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[., isString, (, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (]
[(, ), ), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=]
[), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&]
[), ;, int, index, ;, String, stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&]
[stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&]
[stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&]
[stringAsString, =, stringNode, ., getString, (, ), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&]
[), ;, if, (, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==]
[(, arg1, !=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {]
[!=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =]
[arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int, )]
[arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null, ), {, index, =, (, int, )]
[), ==, null, ), {, index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return]
[index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (]
[index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (]
[index, =, (, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (]
[(, int, ), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, index, <]
[), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||]
[), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||]
[), arg1, ., getDouble, (, ), ;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||]
[;, }, else, {, return, n, ;, }, if, (, index, <, 0, ||, stringAsString, ., length, (, ), <=]
[return, n, ;, }, if, (, index, <, 0, ||, stringAsString, ., length, (, ), <=, index, ), {, return]
[index, <, 0, ||, stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =]
[index, <, 0, ||, stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =]
[stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., number, (]
[stringAsString, ., length, (, ), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., number, (]
[), <=, index, ), {, return, n, ;, }, Node, resultNode, =, IR, ., number, (, stringAsString, ., charAt, (]
[;, }, Node, resultNode, =, IR, ., number, (, stringAsString, ., charAt, (, index, ), ), ;, Node, parent, =]
[;, }, Node, resultNode, =, IR, ., number, (, stringAsString, ., charAt, (, index, ), ), ;, Node, parent, =]
[., number, (, stringAsString, ., charAt, (, index, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[., number, (, stringAsString, ., charAt, (, index, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;]
[., charAt, (, index, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (]
[(, index, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;]
[n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, resultNode, ), ;, reportCodeChange, (, ), ;, return]
[return, resultNode, ;, }, private, int, jsSplitMatch, (, String, stringValue, ,, int, startIndex, ,, String, separator, ), {, if, (]
[return, resultNode, ;, }, private, int, jsSplitMatch, (, String, stringValue, ,, int, startIndex, ,, String, separator, ), {, if, (]
[return, resultNode, ;, }, private, int, jsSplitMatch, (, String, stringValue, ,, int, startIndex, ,, String, separator, ), {, if, (]
[;, }, private, int, jsSplitMatch, (, String, stringValue, ,, int, startIndex, ,, String, separator, ), {, if, (, startIndex, +]
[;, }, private, int, jsSplitMatch, (, String, stringValue, ,, int, startIndex, ,, String, separator, ), {, if, (, startIndex, +]
[String, stringValue, ,, int, startIndex, ,, String, separator, ), {, if, (, startIndex, +, separator, ., length, (, ), >]
[String, stringValue, ,, int, startIndex, ,, String, separator, ), {, if, (, startIndex, +, separator, ., length, (, ), >]
[), {, if, (, startIndex, +, separator, ., length, (, ), >, stringValue, ., length, (, ), ), {, return]
[{, if, (, startIndex, +, separator, ., length, (, ), >, stringValue, ., length, (, ), ), {, return, -]
[., length, (, ), >, stringValue, ., length, (, ), ), {, return, -, 1, ;, }, int, matchIndex, =]
[., length, (, ), >, stringValue, ., length, (, ), ), {, return, -, 1, ;, }, int, matchIndex, =]
[>, stringValue, ., length, (, ), ), {, return, -, 1, ;, }, int, matchIndex, =, stringValue, ., indexOf, (]
[., length, (, ), ), {, return, -, 1, ;, }, int, matchIndex, =, stringValue, ., indexOf, (, separator, ,]
[{, return, -, 1, ;, }, int, matchIndex, =, stringValue, ., indexOf, (, separator, ,, startIndex, ), ;, if, (]
[{, return, -, 1, ;, }, int, matchIndex, =, stringValue, ., indexOf, (, separator, ,, startIndex, ), ;, if, (]
[-, 1, ;, }, int, matchIndex, =, stringValue, ., indexOf, (, separator, ,, startIndex, ), ;, if, (, matchIndex, <]
[int, matchIndex, =, stringValue, ., indexOf, (, separator, ,, startIndex, ), ;, if, (, matchIndex, <, 0, ), {, return]
[matchIndex, =, stringValue, ., indexOf, (, separator, ,, startIndex, ), ;, if, (, matchIndex, <, 0, ), {, return, -]
[indexOf, (, separator, ,, startIndex, ), ;, if, (, matchIndex, <, 0, ), {, return, -, 1, ;, }, return]
[return, matchIndex, ;, }, private, String, [, ], jsSplit, (, String, stringValue, ,, String, separator, ,, int, limit, ), {]
[return, matchIndex, ;, }, private, String, [, ], jsSplit, (, String, stringValue, ,, String, separator, ,, int, limit, ), {]
[private, String, [, ], jsSplit, (, String, stringValue, ,, String, separator, ,, int, limit, ), {, Preconditions, ., checkArgument, (]
[private, String, [, ], jsSplit, (, String, stringValue, ,, String, separator, ,, int, limit, ), {, Preconditions, ., checkArgument, (]
[[, ], jsSplit, (, String, stringValue, ,, String, separator, ,, int, limit, ), {, Preconditions, ., checkArgument, (, limit, >=]
[(, String, stringValue, ,, String, separator, ,, int, limit, ), {, Preconditions, ., checkArgument, (, limit, >=, 0, ), ;]
[(, String, stringValue, ,, String, separator, ,, int, limit, ), {, Preconditions, ., checkArgument, (, limit, >=, 0, ), ;]
[String, separator, ,, int, limit, ), {, Preconditions, ., checkArgument, (, limit, >=, 0, ), ;, Preconditions, ., checkArgument, (]
[String, separator, ,, int, limit, ), {, Preconditions, ., checkArgument, (, limit, >=, 0, ), ;, Preconditions, ., checkArgument, (]
[,, int, limit, ), {, Preconditions, ., checkArgument, (, limit, >=, 0, ), ;, Preconditions, ., checkArgument, (, stringValue, !=]
[Preconditions, ., checkArgument, (, limit, >=, 0, ), ;, Preconditions, ., checkArgument, (, stringValue, !=, null, ), ;, if, (]
[Preconditions, ., checkArgument, (, limit, >=, 0, ), ;, Preconditions, ., checkArgument, (, stringValue, !=, null, ), ;, if, (]
[checkArgument, (, limit, >=, 0, ), ;, Preconditions, ., checkArgument, (, stringValue, !=, null, ), ;, if, (, limit, ==]
[0, ), ;, Preconditions, ., checkArgument, (, stringValue, !=, null, ), ;, if, (, limit, ==, 0, ), {, return]
[Preconditions, ., checkArgument, (, stringValue, !=, null, ), ;, if, (, limit, ==, 0, ), {, return, new, String, []
[null, ), ;, if, (, limit, ==, 0, ), {, return, new, String, [, 0, ], ;, }, if, (]
[null, ), ;, if, (, limit, ==, 0, ), {, return, new, String, [, 0, ], ;, }, if, (]
[;, if, (, limit, ==, 0, ), {, return, new, String, [, 0, ], ;, }, if, (, separator, ==]
[==, 0, ), {, return, new, String, [, 0, ], ;, }, if, (, separator, ==, null, ), {, return]
[return, new, String, [, 0, ], ;, }, if, (, separator, ==, null, ), {, return, new, String, [, ]]
[new, String, [, 0, ], ;, }, if, (, separator, ==, null, ), {, return, new, String, [, ], {]
[==, null, ), {, return, new, String, [, ], {, stringValue, }, ;, }, List, <, String, >, splitStrings, =]
[==, null, ), {, return, new, String, [, ], {, stringValue, }, ;, }, List, <, String, >, splitStrings, =]
[], {, stringValue, }, ;, }, List, <, String, >, splitStrings, =, Lists, ., newArrayList, (, ), ;, if, (]
[], {, stringValue, }, ;, }, List, <, String, >, splitStrings, =, Lists, ., newArrayList, (, ), ;, if, (]
[], {, stringValue, }, ;, }, List, <, String, >, splitStrings, =, Lists, ., newArrayList, (, ), ;, if, (]
[List, <, String, >, splitStrings, =, Lists, ., newArrayList, (, ), ;, if, (, separator, ., length, (, ), ==]
[newArrayList, (, ), ;, if, (, separator, ., length, (, ), ==, 0, ), {, for, (, int, i, =]
[), ;, if, (, separator, ., length, (, ), ==, 0, ), {, for, (, int, i, =, 0, ;]
[), ;, if, (, separator, ., length, (, ), ==, 0, ), {, for, (, int, i, =, 0, ;]
[), ;, if, (, separator, ., length, (, ), ==, 0, ), {, for, (, int, i, =, 0, ;]
[if, (, separator, ., length, (, ), ==, 0, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, separator, ., length, (, ), ==, 0, ), {, for, (, int, i, =, 0, ;, i, <]
[), ==, 0, ), {, for, (, int, i, =, 0, ;, i, <, stringValue, ., length, (, ), &&]
[), ==, 0, ), {, for, (, int, i, =, 0, ;, i, <, stringValue, ., length, (, ), &&]
[0, ), {, for, (, int, i, =, 0, ;, i, <, stringValue, ., length, (, ), &&, i, <]
[{, for, (, int, i, =, 0, ;, i, <, stringValue, ., length, (, ), &&, i, <, limit, ;]
[{, for, (, int, i, =, 0, ;, i, <, stringValue, ., length, (, ), &&, i, <, limit, ;]
[i, =, 0, ;, i, <, stringValue, ., length, (, ), &&, i, <, limit, ;, i, ++, ), {]
[i, =, 0, ;, i, <, stringValue, ., length, (, ), &&, i, <, limit, ;, i, ++, ), {]
[i, <, stringValue, ., length, (, ), &&, i, <, limit, ;, i, ++, ), {, splitStrings, ., add, (]
[i, <, stringValue, ., length, (, ), &&, i, <, limit, ;, i, ++, ), {, splitStrings, ., add, (]
[length, (, ), &&, i, <, limit, ;, i, ++, ), {, splitStrings, ., add, (, stringValue, ., substring, (]
[), &&, i, <, limit, ;, i, ++, ), {, splitStrings, ., add, (, stringValue, ., substring, (, i, ,]
[), &&, i, <, limit, ;, i, ++, ), {, splitStrings, ., add, (, stringValue, ., substring, (, i, ,]
[i, <, limit, ;, i, ++, ), {, splitStrings, ., add, (, stringValue, ., substring, (, i, ,, i, +]
[(, stringValue, ., substring, (, i, ,, i, +, 1, ), ), ;, }, }, else, {, int, startIndex, =]
[,, i, +, 1, ), ), ;, }, }, else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (]
[,, i, +, 1, ), ), ;, }, }, else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (]
[,, i, +, 1, ), ), ;, }, }, else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (]
[i, +, 1, ), ), ;, }, }, else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (, (]
[1, ), ), ;, }, }, else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (, (, matchIndex, =]
[), ;, }, }, else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (, (, matchIndex, =, jsSplitMatch, (]
[}, }, else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (, (, matchIndex, =, jsSplitMatch, (, stringValue, ,]
[else, {, int, startIndex, =, 0, ,, matchIndex, ;, while, (, (, matchIndex, =, jsSplitMatch, (, stringValue, ,, startIndex, ,]
[=, 0, ,, matchIndex, ;, while, (, (, matchIndex, =, jsSplitMatch, (, stringValue, ,, startIndex, ,, separator, ), ), >=]
[,, matchIndex, ;, while, (, (, matchIndex, =, jsSplitMatch, (, stringValue, ,, startIndex, ,, separator, ), ), >=, 0, &&]
[,, matchIndex, ;, while, (, (, matchIndex, =, jsSplitMatch, (, stringValue, ,, startIndex, ,, separator, ), ), >=, 0, &&]
[,, matchIndex, ;, while, (, (, matchIndex, =, jsSplitMatch, (, stringValue, ,, startIndex, ,, separator, ), ), >=, 0, &&]
[matchIndex, =, jsSplitMatch, (, stringValue, ,, startIndex, ,, separator, ), ), >=, 0, &&, splitStrings, ., size, (, ), <]
[(, stringValue, ,, startIndex, ,, separator, ), ), >=, 0, &&, splitStrings, ., size, (, ), <, limit, ), {]
[(, stringValue, ,, startIndex, ,, separator, ), ), >=, 0, &&, splitStrings, ., size, (, ), <, limit, ), {]
[,, separator, ), ), >=, 0, &&, splitStrings, ., size, (, ), <, limit, ), {, splitStrings, ., add, (]
[,, separator, ), ), >=, 0, &&, splitStrings, ., size, (, ), <, limit, ), {, splitStrings, ., add, (]
[>=, 0, &&, splitStrings, ., size, (, ), <, limit, ), {, splitStrings, ., add, (, stringValue, ., substring, (]
[&&, splitStrings, ., size, (, ), <, limit, ), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,]
[(, ), <, limit, ), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,, matchIndex, ), ), ;]
[<, limit, ), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,, matchIndex, ), ), ;, startIndex, =]
[<, limit, ), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,, matchIndex, ), ), ;, startIndex, =]
[), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,, matchIndex, ), ), ;, startIndex, =, matchIndex, +]
[), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,, matchIndex, ), ), ;, startIndex, =, matchIndex, +]
[(, startIndex, ,, matchIndex, ), ), ;, startIndex, =, matchIndex, +, separator, ., length, (, ), ;, }, if, (]
[(, startIndex, ,, matchIndex, ), ), ;, startIndex, =, matchIndex, +, separator, ., length, (, ), ;, }, if, (]
[(, startIndex, ,, matchIndex, ), ), ;, startIndex, =, matchIndex, +, separator, ., length, (, ), ;, }, if, (]
[;, startIndex, =, matchIndex, +, separator, ., length, (, ), ;, }, if, (, splitStrings, ., size, (, ), <]
[separator, ., length, (, ), ;, }, if, (, splitStrings, ., size, (, ), <, limit, ), {, if, (]
[separator, ., length, (, ), ;, }, if, (, splitStrings, ., size, (, ), <, limit, ), {, if, (]
[length, (, ), ;, }, if, (, splitStrings, ., size, (, ), <, limit, ), {, if, (, startIndex, <]
[length, (, ), ;, }, if, (, splitStrings, ., size, (, ), <, limit, ), {, if, (, startIndex, <]
[splitStrings, ., size, (, ), <, limit, ), {, if, (, startIndex, <, stringValue, ., length, (, ), ), {]
[splitStrings, ., size, (, ), <, limit, ), {, if, (, startIndex, <, stringValue, ., length, (, ), ), {]
[), <, limit, ), {, if, (, startIndex, <, stringValue, ., length, (, ), ), {, splitStrings, ., add, (]
[), <, limit, ), {, if, (, startIndex, <, stringValue, ., length, (, ), ), {, splitStrings, ., add, (]
[{, if, (, startIndex, <, stringValue, ., length, (, ), ), {, splitStrings, ., add, (, stringValue, ., substring, (]
[length, (, ), ), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ), ), ;, }, else, {]
[length, (, ), ), {, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ), ), ;, }, else, {]
[{, splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ), ), ;, }, else, {, splitStrings, ., add, (]
[substring, (, startIndex, ), ), ;, }, else, {, splitStrings, ., add, (, "", ), ;, }, }, }, return]
[substring, (, startIndex, ), ), ;, }, else, {, splitStrings, ., add, (, "", ), ;, }, }, }, return]
[), ;, }, else, {, splitStrings, ., add, (, "", ), ;, }, }, }, return, splitStrings, ., toArray, (]
[else, {, splitStrings, ., add, (, "", ), ;, }, }, }, return, splitStrings, ., toArray, (, new, String, []
[else, {, splitStrings, ., add, (, "", ), ;, }, }, }, return, splitStrings, ., toArray, (, new, String, []
[], ), ;, }, private, Node, tryFoldStringSplit, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, if, (]
[private, Node, tryFoldStringSplit, (, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, if, (, late, ), {, return]
[(, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, if, (, late, ), {, return, n, ;, }]
[(, Node, n, ,, Node, stringNode, ,, Node, arg1, ), {, if, (, late, ), {, return, n, ;, }]
[Node, stringNode, ,, Node, arg1, ), {, if, (, late, ), {, return, n, ;, }, Preconditions, ., checkArgument, (]
[Node, stringNode, ,, Node, arg1, ), {, if, (, late, ), {, return, n, ;, }, Preconditions, ., checkArgument, (]
[if, (, late, ), {, return, n, ;, }, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;]
[if, (, late, ), {, return, n, ;, }, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;]
[{, return, n, ;, }, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (]
[{, return, n, ;, }, Preconditions, ., checkArgument, (, n, ., isCall, (, ), ), ;, Preconditions, ., checkArgument, (]
[., isCall, (, ), ), ;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, String, separator, =]
[;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, String, separator, =, null, ;, String, stringValue, =]
[;, Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), ), ;, String, separator, =, null, ;, String, stringValue, =]
[), ), ;, String, separator, =, null, ;, String, stringValue, =, stringNode, ., getString, (, ), ;, int, limit, =]
[), ), ;, String, separator, =, null, ;, String, stringValue, =, stringNode, ., getString, (, ), ;, int, limit, =]
[), ), ;, String, separator, =, null, ;, String, stringValue, =, stringNode, ., getString, (, ), ;, int, limit, =]
[null, ;, String, stringValue, =, stringNode, ., getString, (, ), ;, int, limit, =, stringValue, ., length, (, ), +]
[=, stringNode, ., getString, (, ), ;, int, limit, =, stringValue, ., length, (, ), +, 1, ;, if, (]
[=, stringNode, ., getString, (, ), ;, int, limit, =, stringValue, ., length, (, ), +, 1, ;, if, (]
[., getString, (, ), ;, int, limit, =, stringValue, ., length, (, ), +, 1, ;, if, (, arg1, !=]
[int, limit, =, stringValue, ., length, (, ), +, 1, ;, if, (, arg1, !=, null, ), {, if, (]
[int, limit, =, stringValue, ., length, (, ), +, 1, ;, if, (, arg1, !=, null, ), {, if, (]
[), +, 1, ;, if, (, arg1, !=, null, ), {, if, (, arg1, ., isString, (, ), ), {]
[1, ;, if, (, arg1, !=, null, ), {, if, (, arg1, ., isString, (, ), ), {, separator, =]
[1, ;, if, (, arg1, !=, null, ), {, if, (, arg1, ., isString, (, ), ), {, separator, =]
[(, arg1, ., isString, (, ), ), {, separator, =, arg1, ., getString, (, ), ;, }, else, if, (]
[arg1, ., isString, (, ), ), {, separator, =, arg1, ., getString, (, ), ;, }, else, if, (, !]
[arg1, ., isString, (, ), ), {, separator, =, arg1, ., getString, (, ), ;, }, else, if, (, !]
[=, arg1, ., getString, (, ), ;, }, else, if, (, !, arg1, ., isNull, (, ), ), {, return]
[;, }, else, if, (, !, arg1, ., isNull, (, ), ), {, return, n, ;, }, Node, arg2, =]
[;, }, else, if, (, !, arg1, ., isNull, (, ), ), {, return, n, ;, }, Node, arg2, =]
[isNull, (, ), ), {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (]
[isNull, (, ), ), {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (]
[), ), {, return, n, ;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=]
[;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (]
[;, }, Node, arg2, =, arg1, ., getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (]
[getNext, (, ), ;, if, (, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {]
[), ;, if, (, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, limit, =]
[), ;, if, (, arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, limit, =]
[arg2, !=, null, ), {, if, (, arg2, ., isNumber, (, ), ), {, limit, =, Math, ., min, (]
[), {, if, (, arg2, ., isNumber, (, ), ), {, limit, =, Math, ., min, (, (, int, )]
[), {, if, (, arg2, ., isNumber, (, ), ), {, limit, =, Math, ., min, (, (, int, )]
[isNumber, (, ), ), {, limit, =, Math, ., min, (, (, int, ), arg2, ., getDouble, (, ), ,]
[limit, =, Math, ., min, (, (, int, ), arg2, ., getDouble, (, ), ,, limit, ), ;, if, (]
[limit, =, Math, ., min, (, (, int, ), arg2, ., getDouble, (, ), ,, limit, ), ;, if, (]
[Math, ., min, (, (, int, ), arg2, ., getDouble, (, ), ,, limit, ), ;, if, (, limit, <]
[(, int, ), arg2, ., getDouble, (, ), ,, limit, ), ;, if, (, limit, <, 0, ), {, return]
[), ,, limit, ), ;, if, (, limit, <, 0, ), {, return, n, ;, }, }, else, {, return]
[), {, return, n, ;, }, }, else, {, return, n, ;, }, }, }, String, [, ], stringArray, =]
[return, n, ;, }, }, else, {, return, n, ;, }, }, }, String, [, ], stringArray, =, jsSplit, (]
[;, }, }, else, {, return, n, ;, }, }, }, String, [, ], stringArray, =, jsSplit, (, stringValue, ,]
[}, else, {, return, n, ;, }, }, }, String, [, ], stringArray, =, jsSplit, (, stringValue, ,, separator, ,]
[}, }, }, String, [, ], stringArray, =, jsSplit, (, stringValue, ,, separator, ,, limit, ), ;, Node, arrayOfStrings, =]
[}, }, }, String, [, ], stringArray, =, jsSplit, (, stringValue, ,, separator, ,, limit, ), ;, Node, arrayOfStrings, =]
[,, separator, ,, limit, ), ;, Node, arrayOfStrings, =, IR, ., arraylit, (, ), ;, for, (, int, i, =]
[,, limit, ), ;, Node, arrayOfStrings, =, IR, ., arraylit, (, ), ;, for, (, int, i, =, 0, ;]
[,, limit, ), ;, Node, arrayOfStrings, =, IR, ., arraylit, (, ), ;, for, (, int, i, =, 0, ;]
[), ;, Node, arrayOfStrings, =, IR, ., arraylit, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ;, Node, arrayOfStrings, =, IR, ., arraylit, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, IR, ., arraylit, (, ), ;, for, (, int, i, =, 0, ;, i, <, stringArray, ., length, ;]
[=, IR, ., arraylit, (, ), ;, for, (, int, i, =, 0, ;, i, <, stringArray, ., length, ;]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, stringArray, ., length, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, stringArray, ., length, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, stringArray, ., length, ;, i, ++, ), {, arrayOfStrings, ., addChildToBack, (]
[(, int, i, =, 0, ;, i, <, stringArray, ., length, ;, i, ++, ), {, arrayOfStrings, ., addChildToBack, (]
[(, int, i, =, 0, ;, i, <, stringArray, ., length, ;, i, ++, ), {, arrayOfStrings, ., addChildToBack, (]
[0, ;, i, <, stringArray, ., length, ;, i, ++, ), {, arrayOfStrings, ., addChildToBack, (, IR, ., string, (]
[0, ;, i, <, stringArray, ., length, ;, i, ++, ), {, arrayOfStrings, ., addChildToBack, (, IR, ., string, (]
[i, <, stringArray, ., length, ;, i, ++, ), {, arrayOfStrings, ., addChildToBack, (, IR, ., string, (, stringArray, []
[i, ++, ), {, arrayOfStrings, ., addChildToBack, (, IR, ., string, (, stringArray, [, i, ], ), ., srcref, (]
[IR, ., string, (, stringArray, [, i, ], ), ., srcref, (, stringNode, ), ), ;, }, Node, parent, =]
[IR, ., string, (, stringArray, [, i, ], ), ., srcref, (, stringNode, ), ), ;, }, Node, parent, =]
[i, ], ), ., srcref, (, stringNode, ), ), ;, }, Node, parent, =, n, ., getParent, (, ), ;]
[i, ], ), ., srcref, (, stringNode, ), ), ;, }, Node, parent, =, n, ., getParent, (, ), ;]
[srcref, (, stringNode, ), ), ;, }, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (]
[stringNode, ), ), ;, }, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,]
[;, }, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, arrayOfStrings, ), ;]
[n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, arrayOfStrings, ), ;, reportCodeChange, (, ), ;, return]
