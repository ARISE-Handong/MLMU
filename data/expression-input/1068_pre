[math, ;, public, class, IEEE754rUtils, {, public, static, double, min, (, final, double, [, ], array, ), {, if, (]
[math, ;, public, class, IEEE754rUtils, {, public, static, double, min, (, final, double, [, ], array, ), {, if, (]
[public, class, IEEE754rUtils, {, public, static, double, min, (, final, double, [, ], array, ), {, if, (, array, ==]
[public, static, double, min, (, final, double, [, ], array, ), {, if, (, array, ==, null, ), {, throw]
[min, (, final, double, [, ], array, ), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (]
[), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (]
[), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (]
[array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==]
[{, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {, throw]
[IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (]
[if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, min, =]
[if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, min, =]
[array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, min, =, array, []
[new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, min, =, array, [, 0, ], ;, for, (, int, i, =]
[(, "Array cannot be empty.", ), ;, }, double, min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;]
[(, "Array cannot be empty.", ), ;, }, double, min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;]
[), ;, }, double, min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <]
[), ;, }, double, min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <]
[min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;]
[min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;]
[0, ], ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, min, =]
[(, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, min, =, min, (]
[(, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, min, =, min, (]
[i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, min, =, min, (, array, []
[;, i, <, array, ., length, ;, i, ++, ), {, min, =, min, (, array, [, i, ], ,]
[length, ;, i, ++, ), {, min, =, min, (, array, [, i, ], ,, min, ), ;, }, return]
[;, }, return, min, ;, }, public, static, float, min, (, final, float, [, ], array, ), {, if, (]
[;, }, return, min, ;, }, public, static, float, min, (, final, float, [, ], array, ), {, if, (]
[return, min, ;, }, public, static, float, min, (, final, float, [, ], array, ), {, if, (, array, ==]
[public, static, float, min, (, final, float, [, ], array, ), {, if, (, array, ==, null, ), {, throw]
[min, (, final, float, [, ], array, ), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (]
[), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (]
[), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (]
[array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==]
[{, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {, throw]
[IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (]
[if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, min, =]
[if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, min, =]
[array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, min, =, array, []
[new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, min, =, array, [, 0, ], ;, for, (, int, i, =]
[(, "Array cannot be empty.", ), ;, }, float, min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;]
[(, "Array cannot be empty.", ), ;, }, float, min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;]
[), ;, }, float, min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <]
[), ;, }, float, min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <]
[min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;]
[min, =, array, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;]
[0, ], ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, min, =]
[(, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, min, =, min, (]
[(, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, min, =, min, (]
[i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, min, =, min, (, array, []
[;, i, <, array, ., length, ;, i, ++, ), {, min, =, min, (, array, [, i, ], ,]
[length, ;, i, ++, ), {, min, =, min, (, array, [, i, ], ,, min, ), ;, }, return]
[}, public, static, double, min, (, final, double, a, ,, final, double, b, ,, final, double, c, ), {, return]
[static, double, min, (, final, double, a, ,, final, double, b, ,, final, double, c, ), {, return, min, (]
[min, (, final, double, a, ,, final, double, b, ,, final, double, c, ), {, return, min, (, min, (]
[final, double, a, ,, final, double, b, ,, final, double, c, ), {, return, min, (, min, (, a, ,]
[,, final, double, b, ,, final, double, c, ), {, return, min, (, min, (, a, ,, b, ), ,]
[c, ), ;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ), {, if, (]
[c, ), ;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ), {, if, (]
[public, static, double, min, (, final, double, a, ,, final, double, b, ), {, if, (, Double, ., isNaN, (]
[final, double, a, ,, final, double, b, ), {, if, (, Double, ., isNaN, (, a, ), ), {, return]
[b, ), {, if, (, Double, ., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (]
[b, ), {, if, (, Double, ., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (]
[(, Double, ., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (, Double, ., isNaN, (]
[a, ), ), {, return, b, ;, }, else, if, (, Double, ., isNaN, (, b, ), ), {, return]
[;, }, else, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[;, }, else, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[(, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., min, (]
[., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., min, (, a, ,]
[}, public, static, float, min, (, final, float, a, ,, final, float, b, ,, final, float, c, ), {, return]
[static, float, min, (, final, float, a, ,, final, float, b, ,, final, float, c, ), {, return, min, (]
[min, (, final, float, a, ,, final, float, b, ,, final, float, c, ), {, return, min, (, min, (]
[final, float, a, ,, final, float, b, ,, final, float, c, ), {, return, min, (, min, (, a, ,]
[,, final, float, b, ,, final, float, c, ), {, return, min, (, min, (, a, ,, b, ), ,]
[c, ), ;, }, public, static, float, min, (, final, float, a, ,, final, float, b, ), {, if, (]
[c, ), ;, }, public, static, float, min, (, final, float, a, ,, final, float, b, ), {, if, (]
[public, static, float, min, (, final, float, a, ,, final, float, b, ), {, if, (, Float, ., isNaN, (]
[final, float, a, ,, final, float, b, ), {, if, (, Float, ., isNaN, (, a, ), ), {, return]
[b, ), {, if, (, Float, ., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (]
[b, ), {, if, (, Float, ., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (]
[(, Float, ., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (, Float, ., isNaN, (]
[a, ), ), {, return, b, ;, }, else, if, (, Float, ., isNaN, (, b, ), ), {, return]
[;, }, else, if, (, Float, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[;, }, else, if, (, Float, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[(, Float, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., min, (]
[., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., min, (, a, ,]
[,, b, ), ;, }, }, public, static, double, max, (, final, double, [, ], array, ), {, if, (]
[,, b, ), ;, }, }, public, static, double, max, (, final, double, [, ], array, ), {, if, (]
[), ;, }, }, public, static, double, max, (, final, double, [, ], array, ), {, if, (, array, ==]
[public, static, double, max, (, final, double, [, ], array, ), {, if, (, array, ==, null, ), {, throw]
[max, (, final, double, [, ], array, ), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (]
[), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (]
[), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (]
[array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==]
[{, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {, throw]
[IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (]
[if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, max, =]
[if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, max, =]
[array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, max, =, array, []
[new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, double, max, =, array, [, 0, ], ;, for, (, int, j, =]
[(, "Array cannot be empty.", ), ;, }, double, max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;]
[(, "Array cannot be empty.", ), ;, }, double, max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;]
[), ;, }, double, max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <]
[), ;, }, double, max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <]
[max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;]
[max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;]
[0, ], ;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {]
[;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {, max, =]
[(, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {, max, =, max, (]
[(, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {, max, =, max, (]
[j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {, max, =, max, (, array, []
[;, j, <, array, ., length, ;, j, ++, ), {, max, =, max, (, array, [, j, ], ,]
[length, ;, j, ++, ), {, max, =, max, (, array, [, j, ], ,, max, ), ;, }, return]
[;, }, return, max, ;, }, public, static, float, max, (, final, float, [, ], array, ), {, if, (]
[;, }, return, max, ;, }, public, static, float, max, (, final, float, [, ], array, ), {, if, (]
[return, max, ;, }, public, static, float, max, (, final, float, [, ], array, ), {, if, (, array, ==]
[public, static, float, max, (, final, float, [, ], array, ), {, if, (, array, ==, null, ), {, throw]
[max, (, final, float, [, ], array, ), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (]
[), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (]
[), {, if, (, array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (]
[array, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==]
[{, throw, new, IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {, throw]
[IllegalArgumentException, (, "The Array must not be null", ), ;, }, else, if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (]
[if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, max, =]
[if, (, array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, max, =]
[array, ., length, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, max, =, array, []
[new, IllegalArgumentException, (, "Array cannot be empty.", ), ;, }, float, max, =, array, [, 0, ], ;, for, (, int, j, =]
[(, "Array cannot be empty.", ), ;, }, float, max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;]
[(, "Array cannot be empty.", ), ;, }, float, max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;]
[), ;, }, float, max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <]
[), ;, }, float, max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <]
[max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;]
[max, =, array, [, 0, ], ;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;]
[0, ], ;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {]
[;, for, (, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {, max, =]
[(, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {, max, =, max, (]
[(, int, j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {, max, =, max, (]
[j, =, 1, ;, j, <, array, ., length, ;, j, ++, ), {, max, =, max, (, array, []
[;, j, <, array, ., length, ;, j, ++, ), {, max, =, max, (, array, [, j, ], ,]
[length, ;, j, ++, ), {, max, =, max, (, array, [, j, ], ,, max, ), ;, }, return]
[}, public, static, double, max, (, final, double, a, ,, final, double, b, ,, final, double, c, ), {, return]
[static, double, max, (, final, double, a, ,, final, double, b, ,, final, double, c, ), {, return, max, (]
[max, (, final, double, a, ,, final, double, b, ,, final, double, c, ), {, return, max, (, max, (]
[final, double, a, ,, final, double, b, ,, final, double, c, ), {, return, max, (, max, (, a, ,]
[,, final, double, b, ,, final, double, c, ), {, return, max, (, max, (, a, ,, b, ), ,]
[c, ), ;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ), {, if, (]
[c, ), ;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ), {, if, (]
[public, static, double, max, (, final, double, a, ,, final, double, b, ), {, if, (, Double, ., isNaN, (]
[final, double, a, ,, final, double, b, ), {, if, (, Double, ., isNaN, (, a, ), ), {, return]
[b, ), {, if, (, Double, ., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (]
[b, ), {, if, (, Double, ., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (]
[(, Double, ., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (, Double, ., isNaN, (]
[a, ), ), {, return, b, ;, }, else, if, (, Double, ., isNaN, (, b, ), ), {, return]
[;, }, else, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[;, }, else, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[(, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., max, (]
[., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., max, (, a, ,]
[}, public, static, float, max, (, final, float, a, ,, final, float, b, ,, final, float, c, ), {, return]
[static, float, max, (, final, float, a, ,, final, float, b, ,, final, float, c, ), {, return, max, (]
[max, (, final, float, a, ,, final, float, b, ,, final, float, c, ), {, return, max, (, max, (]
[final, float, a, ,, final, float, b, ,, final, float, c, ), {, return, max, (, max, (, a, ,]
[,, final, float, b, ,, final, float, c, ), {, return, max, (, max, (, a, ,, b, ), ,]
[c, ), ;, }, public, static, float, max, (, final, float, a, ,, final, float, b, ), {, if, (]
[c, ), ;, }, public, static, float, max, (, final, float, a, ,, final, float, b, ), {, if, (]
[public, static, float, max, (, final, float, a, ,, final, float, b, ), {, if, (, Float, ., isNaN, (]
[final, float, a, ,, final, float, b, ), {, if, (, Float, ., isNaN, (, a, ), ), {, return]
[b, ), {, if, (, Float, ., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (]
[b, ), {, if, (, Float, ., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (]
[(, Float, ., isNaN, (, a, ), ), {, return, b, ;, }, else, if, (, Float, ., isNaN, (]
[a, ), ), {, return, b, ;, }, else, if, (, Float, ., isNaN, (, b, ), ), {, return]
[;, }, else, if, (, Float, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[;, }, else, if, (, Float, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[(, Float, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., max, (]
[., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., max, (, a, ,]
