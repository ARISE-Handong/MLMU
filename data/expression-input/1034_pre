[util, ., Map, ;, import, java, ., util, ., Set, ;, public, class, Reader, {, static, final, DiagnosticType, JSONML_SYNTAX, =]
[util, ., Map, ;, import, java, ., util, ., Set, ;, public, class, Reader, {, static, final, DiagnosticType, JSONML_SYNTAX, =]
[import, java, ., util, ., Set, ;, public, class, Reader, {, static, final, DiagnosticType, JSONML_SYNTAX, =, DiagnosticType, ., error, (]
[., util, ., Set, ;, public, class, Reader, {, static, final, DiagnosticType, JSONML_SYNTAX, =, DiagnosticType, ., error, (, "JSONML_SYNTAX", ,]
[private, JsonML, rootElement, ;, private, String, sourceName, ;, private, ErrorReporter, errorReporter, ;, private, final, Set, <, String, >, ALLOWED_DIRECTIVES, =]
[private, JsonML, rootElement, ;, private, String, sourceName, ;, private, ErrorReporter, errorReporter, ;, private, final, Set, <, String, >, ALLOWED_DIRECTIVES, =]
[private, String, sourceName, ;, private, ErrorReporter, errorReporter, ;, private, final, Set, <, String, >, ALLOWED_DIRECTIVES, =, Sets, ., newHashSet, (]
[), ;, private, int, nodeIndex, ;, private, class, ErrorReporter, {, private, AbstractCompiler, compiler, ;, ErrorReporter, (, AbstractCompiler, compiler, ), {]
[), ;, private, int, nodeIndex, ;, private, class, ErrorReporter, {, private, AbstractCompiler, compiler, ;, ErrorReporter, (, AbstractCompiler, compiler, ), {]
[nodeIndex, ;, private, class, ErrorReporter, {, private, AbstractCompiler, compiler, ;, ErrorReporter, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[., compiler, =, compiler, ;, }, private, void, report, (, JsonML, element, ,, String, ..., arguments, ), throws, JsonMLException, {]
[=, compiler, ;, }, private, void, report, (, JsonML, element, ,, String, ..., arguments, ), throws, JsonMLException, {, report, (]
[;, }, private, void, report, (, JsonML, element, ,, String, ..., arguments, ), throws, JsonMLException, {, report, (, JSONML_SYNTAX, ,]
[private, void, report, (, JsonML, element, ,, String, ..., arguments, ), throws, JsonMLException, {, report, (, JSONML_SYNTAX, ,, element, ,]
[private, void, report, (, DiagnosticType, type, ,, JsonML, element, ,, String, ..., arguments, ), throws, JsonMLException, {, int, lineno, =]
[type, ,, JsonML, element, ,, String, ..., arguments, ), throws, JsonMLException, {, int, lineno, =, nodeIndex, ;, int, charno, =]
[,, JsonML, element, ,, String, ..., arguments, ), throws, JsonMLException, {, int, lineno, =, nodeIndex, ;, int, charno, =, -]
[element, ,, String, ..., arguments, ), throws, JsonMLException, {, int, lineno, =, nodeIndex, ;, int, charno, =, -, 1, ;]
[String, ..., arguments, ), throws, JsonMLException, {, int, lineno, =, nodeIndex, ;, int, charno, =, -, 1, ;, report, (]
[String, ..., arguments, ), throws, JsonMLException, {, int, lineno, =, nodeIndex, ;, int, charno, =, -, 1, ;, report, (]
[throws, JsonMLException, {, int, lineno, =, nodeIndex, ;, int, charno, =, -, 1, ;, report, (, JSError, ., make, (]
[{, int, lineno, =, nodeIndex, ;, int, charno, =, -, 1, ;, report, (, JSError, ., make, (, sourceName, ,]
[lineno, =, nodeIndex, ;, int, charno, =, -, 1, ;, report, (, JSError, ., make, (, sourceName, ,, lineno, ,]
[nodeIndex, ;, int, charno, =, -, 1, ;, report, (, JSError, ., make, (, sourceName, ,, lineno, ,, charno, ,]
[int, charno, =, -, 1, ;, report, (, JSError, ., make, (, sourceName, ,, lineno, ,, charno, ,, type, ,]
[,, charno, ,, type, ,, arguments, ), ), ;, }, private, void, report, (, JSError, error, ), throws, JsonMLException, {]
[,, type, ,, arguments, ), ), ;, }, private, void, report, (, JSError, error, ), throws, JsonMLException, {, report, (]
[,, arguments, ), ), ;, }, private, void, report, (, JSError, error, ), throws, JsonMLException, {, report, (, error, ,]
[(, error, ,, true, ), ;, }, private, void, report, (, JSError, error, ,, boolean, terminal, ), throws, JsonMLException, {]
[(, error, ,, true, ), ;, }, private, void, report, (, JSError, error, ,, boolean, terminal, ), throws, JsonMLException, {]
[), ;, }, private, void, report, (, JSError, error, ,, boolean, terminal, ), throws, JsonMLException, {, compiler, ., report, (]
[report, (, JSError, error, ,, boolean, terminal, ), throws, JsonMLException, {, compiler, ., report, (, error, ), ;, if, (]
[,, boolean, terminal, ), throws, JsonMLException, {, compiler, ., report, (, error, ), ;, if, (, terminal, ), {, throw]
[), ;, if, (, terminal, ), {, throw, new, JsonMLException, (, ), ;, }, }, }, private, boolean, insertExprResultState, =]
[(, ), ;, }, }, }, private, boolean, insertExprResultState, =, true, ;, public, void, setRootElement, (, JsonML, rootElement, ), {]
[(, ), ;, }, }, }, private, boolean, insertExprResultState, =, true, ;, public, void, setRootElement, (, JsonML, rootElement, ), {]
[}, }, private, boolean, insertExprResultState, =, true, ;, public, void, setRootElement, (, JsonML, rootElement, ), {, this, ., rootElement, =]
[{, this, ., rootElement, =, rootElement, ;, }, public, Node, parse, (, AbstractCompiler, compiler, ), throws, JsonMLException, {, if, (]
[{, this, ., rootElement, =, rootElement, ;, }, public, Node, parse, (, AbstractCompiler, compiler, ), throws, JsonMLException, {, if, (]
[., rootElement, =, rootElement, ;, }, public, Node, parse, (, AbstractCompiler, compiler, ), throws, JsonMLException, {, if, (, compiler, ==]
[;, }, public, Node, parse, (, AbstractCompiler, compiler, ), throws, JsonMLException, {, if, (, compiler, ==, null, ), {, return]
[Node, parse, (, AbstractCompiler, compiler, ), throws, JsonMLException, {, if, (, compiler, ==, null, ), {, return, null, ;, }]
[(, AbstractCompiler, compiler, ), throws, JsonMLException, {, if, (, compiler, ==, null, ), {, return, null, ;, }, errorReporter, =]
[(, AbstractCompiler, compiler, ), throws, JsonMLException, {, if, (, compiler, ==, null, ), {, return, null, ;, }, errorReporter, =]
[JsonMLException, {, if, (, compiler, ==, null, ), {, return, null, ;, }, errorReporter, =, this, ., new, ErrorReporter, (]
[null, ), {, return, null, ;, }, errorReporter, =, this, ., new, ErrorReporter, (, compiler, ), ;, Node, root, =]
[null, ), {, return, null, ;, }, errorReporter, =, this, ., new, ErrorReporter, (, compiler, ), ;, Node, root, =]
[}, errorReporter, =, this, ., new, ErrorReporter, (, compiler, ), ;, Node, root, =, IR, ., block, (, ), ;]
[=, this, ., new, ErrorReporter, (, compiler, ), ;, Node, root, =, IR, ., block, (, ), ;, nodeIndex, =]
[this, ., new, ErrorReporter, (, compiler, ), ;, Node, root, =, IR, ., block, (, ), ;, nodeIndex, =, -]
[new, ErrorReporter, (, compiler, ), ;, Node, root, =, IR, ., block, (, ), ;, nodeIndex, =, -, 1, ;]
[new, ErrorReporter, (, compiler, ), ;, Node, root, =, IR, ., block, (, ), ;, nodeIndex, =, -, 1, ;]
[), ;, Node, root, =, IR, ., block, (, ), ;, nodeIndex, =, -, 1, ;, Preconditions, ., checkState, (]
[), ;, Node, root, =, IR, ., block, (, ), ;, nodeIndex, =, -, 1, ;, Preconditions, ., checkState, (]
[), ;, Node, root, =, IR, ., block, (, ), ;, nodeIndex, =, -, 1, ;, Preconditions, ., checkState, (]
[., block, (, ), ;, nodeIndex, =, -, 1, ;, Preconditions, ., checkState, (, rootElement, ., getType, (, ), ==]
[., block, (, ), ;, nodeIndex, =, -, 1, ;, Preconditions, ., checkState, (, rootElement, ., getType, (, ), ==]
[nodeIndex, =, -, 1, ;, Preconditions, ., checkState, (, rootElement, ., getType, (, ), ==, TagType, ., Program, ), ;]
[-, 1, ;, Preconditions, ., checkState, (, rootElement, ., getType, (, ), ==, TagType, ., Program, ), ;, transformElement, (]
[;, Preconditions, ., checkState, (, rootElement, ., getType, (, ), ==, TagType, ., Program, ), ;, transformElement, (, rootElement, ,]
[(, rootElement, ., getType, (, ), ==, TagType, ., Program, ), ;, transformElement, (, rootElement, ,, root, ), ;, return]
[(, rootElement, ., getType, (, ), ==, TagType, ., Program, ), ;, transformElement, (, rootElement, ,, root, ), ;, return]
[>, T, getOptionalAttribute, (, JsonML, element, ,, TagAttr, attr, ,, Class, <, T, >, type, ), throws, JsonMLException, {, return]
[getOptionalAttribute, (, JsonML, element, ,, TagAttr, attr, ,, Class, <, T, >, type, ), throws, JsonMLException, {, return, getAttribute, (]
[JsonML, element, ,, TagAttr, attr, ,, Class, <, T, >, type, ), throws, JsonMLException, {, return, getAttribute, (, element, ,]
[,, TagAttr, attr, ,, Class, <, T, >, type, ), throws, JsonMLException, {, return, getAttribute, (, element, ,, attr, ,]
[attr, ,, Class, <, T, >, type, ), throws, JsonMLException, {, return, getAttribute, (, element, ,, attr, ,, type, ,]
[>, T, getAttribute, (, JsonML, element, ,, TagAttr, attr, ,, Class, <, T, >, type, ), throws, JsonMLException, {, return]
[getAttribute, (, JsonML, element, ,, TagAttr, attr, ,, Class, <, T, >, type, ), throws, JsonMLException, {, return, getAttribute, (]
[JsonML, element, ,, TagAttr, attr, ,, Class, <, T, >, type, ), throws, JsonMLException, {, return, getAttribute, (, element, ,]
[,, TagAttr, attr, ,, Class, <, T, >, type, ), throws, JsonMLException, {, return, getAttribute, (, element, ,, attr, ,]
[attr, ,, Class, <, T, >, type, ), throws, JsonMLException, {, return, getAttribute, (, element, ,, attr, ,, type, ,]
[element, ,, TagAttr, attr, ,, Class, <, T, >, type, ,, boolean, optional, ), throws, JsonMLException, {, Object, value, =]
[element, ,, TagAttr, attr, ,, Class, <, T, >, type, ,, boolean, optional, ), throws, JsonMLException, {, Object, value, =]
[,, Class, <, T, >, type, ,, boolean, optional, ), throws, JsonMLException, {, Object, value, =, element, ., getAttribute, (]
[type, ,, boolean, optional, ), throws, JsonMLException, {, Object, value, =, element, ., getAttribute, (, attr, ), ;, if, (]
[type, ,, boolean, optional, ), throws, JsonMLException, {, Object, value, =, element, ., getAttribute, (, attr, ), ;, if, (]
[boolean, optional, ), throws, JsonMLException, {, Object, value, =, element, ., getAttribute, (, attr, ), ;, if, (, value, ==]
[{, Object, value, =, element, ., getAttribute, (, attr, ), ;, if, (, value, ==, null, ), {, if, (]
[{, Object, value, =, element, ., getAttribute, (, attr, ), ;, if, (, value, ==, null, ), {, if, (]
[{, Object, value, =, element, ., getAttribute, (, attr, ), ;, if, (, value, ==, null, ), {, if, (]
[value, =, element, ., getAttribute, (, attr, ), ;, if, (, value, ==, null, ), {, if, (, type, ==]
[element, ., getAttribute, (, attr, ), ;, if, (, value, ==, null, ), {, if, (, type, ==, null, ||]
[attr, ), ;, if, (, value, ==, null, ), {, if, (, type, ==, null, ||, optional, ), {, return]
[(, value, ==, null, ), {, if, (, type, ==, null, ||, optional, ), {, return, null, ;, }, throw]
[null, ), {, if, (, type, ==, null, ||, optional, ), {, return, null, ;, }, throw, new, JsonMLException, (]
[null, ), {, if, (, type, ==, null, ||, optional, ), {, return, null, ;, }, throw, new, JsonMLException, (]
[null, ), {, if, (, type, ==, null, ||, optional, ), {, return, null, ;, }, throw, new, JsonMLException, (]
[null, ), {, if, (, type, ==, null, ||, optional, ), {, return, null, ;, }, throw, new, JsonMLException, (]
[null, ), {, if, (, type, ==, null, ||, optional, ), {, return, null, ;, }, throw, new, JsonMLException, (]
[{, if, (, type, ==, null, ||, optional, ), {, return, null, ;, }, throw, new, JsonMLException, (, "Missing ", +]
[{, if, (, type, ==, null, ||, optional, ), {, return, null, ;, }, throw, new, JsonMLException, (, "Missing ", +]
[||, optional, ), {, return, null, ;, }, throw, new, JsonMLException, (, "Missing ", +, attr, ., name, (, ), +]
[), {, return, null, ;, }, throw, new, JsonMLException, (, "Missing ", +, attr, ., name, (, ), +, " attribute for ", +]
[), {, return, null, ;, }, throw, new, JsonMLException, (, "Missing ", +, attr, ., name, (, ), +, " attribute for ", +]
[), {, return, null, ;, }, throw, new, JsonMLException, (, "Missing ", +, attr, ., name, (, ), +, " attribute for ", +]
["Missing ", +, attr, ., name, (, ), +, " attribute for ", +, element, ., getType, (, ), ., name, (, ), +]
[), +, " attribute for ", +, element, ., getType, (, ), ., name, (, ), +, " element.", ), ;, }, if, (]
[), +, " attribute for ", +, element, ., getType, (, ), ., name, (, ), +, " element.", ), ;, }, if, (]
[element, ., getType, (, ), ., name, (, ), +, " element.", ), ;, }, if, (, type, ., equals, (]
[), +, " element.", ), ;, }, if, (, type, ., equals, (, Double, ., class, ), ), {, if, (]
[), +, " element.", ), ;, }, if, (, type, ., equals, (, Double, ., class, ), ), {, if, (]
[if, (, type, ., equals, (, Double, ., class, ), ), {, if, (, value, instanceof, Number, ), {, return]
[if, (, type, ., equals, (, Double, ., class, ), ), {, if, (, value, instanceof, Number, ), {, return]
[equals, (, Double, ., class, ), ), {, if, (, value, instanceof, Number, ), {, return, type, ., cast, (]
[equals, (, Double, ., class, ), ), {, if, (, value, instanceof, Number, ), {, return, type, ., cast, (]
[(, Double, ., class, ), ), {, if, (, value, instanceof, Number, ), {, return, type, ., cast, (, (]
[class, ), ), {, if, (, value, instanceof, Number, ), {, return, type, ., cast, (, (, (, Number, )]
[return, type, ., cast, (, (, (, Number, ), value, ), ., doubleValue, (, ), ), ;, }, if, (]
[return, type, ., cast, (, (, (, Number, ), value, ), ., doubleValue, (, ), ), ;, }, if, (]
[(, Number, ), value, ), ., doubleValue, (, ), ), ;, }, if, (, value, instanceof, String, ), {, return]
[(, Number, ), value, ), ., doubleValue, (, ), ), ;, }, if, (, value, instanceof, String, ), {, return]
[), ., doubleValue, (, ), ), ;, }, if, (, value, instanceof, String, ), {, return, type, ., cast, (]
[), ., doubleValue, (, ), ), ;, }, if, (, value, instanceof, String, ), {, return, type, ., cast, (]
[), ), ;, }, if, (, value, instanceof, String, ), {, return, type, ., cast, (, Double, ., valueOf, (]
[}, if, (, value, instanceof, String, ), {, return, type, ., cast, (, Double, ., valueOf, (, (, String, )]
[), {, return, type, ., cast, (, Double, ., valueOf, (, (, String, ), value, ), ), ;, }, throw]
[type, ., cast, (, Double, ., valueOf, (, (, String, ), value, ), ), ;, }, throw, new, JsonMLException, (]
[type, ., cast, (, Double, ., valueOf, (, (, String, ), value, ), ), ;, }, throw, new, JsonMLException, (]
[type, ., cast, (, Double, ., valueOf, (, (, String, ), value, ), ), ;, }, throw, new, JsonMLException, (]
[type, ., cast, (, Double, ., valueOf, (, (, String, ), value, ), ), ;, }, throw, new, JsonMLException, (]
[type, ., cast, (, Double, ., valueOf, (, (, String, ), value, ), ), ;, }, throw, new, JsonMLException, (]
[type, ., cast, (, Double, ., valueOf, (, (, String, ), value, ), ), ;, }, throw, new, JsonMLException, (]
[type, ., cast, (, Double, ., valueOf, (, (, String, ), value, ), ), ;, }, throw, new, JsonMLException, (]
[cast, (, Double, ., valueOf, (, (, String, ), value, ), ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +]
[cast, (, Double, ., valueOf, (, (, String, ), value, ), ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +]
[(, String, ), value, ), ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +]
[), value, ), ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +]
[), ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +]
[), ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +]
[JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +, value, ., getClass, (, ), +]
["Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +]
["Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +]
["Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;, }, if, (]
["Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;, }, if, (]
[getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;, }, if, (, type, ., isInstance, (]
[+, type, ., getName, (, ), ), ;, }, if, (, type, ., isInstance, (, value, ), ), {, return]
[+, type, ., getName, (, ), ), ;, }, if, (, type, ., isInstance, (, value, ), ), {, return]
[(, ), ), ;, }, if, (, type, ., isInstance, (, value, ), ), {, return, type, ., cast, (]
[if, (, type, ., isInstance, (, value, ), ), {, return, type, ., cast, (, value, ), ;, }, throw]
[., isInstance, (, value, ), ), {, return, type, ., cast, (, value, ), ;, }, throw, new, JsonMLException, (]
[., isInstance, (, value, ), ), {, return, type, ., cast, (, value, ), ;, }, throw, new, JsonMLException, (]
[., isInstance, (, value, ), ), {, return, type, ., cast, (, value, ), ;, }, throw, new, JsonMLException, (]
[., isInstance, (, value, ), ), {, return, type, ., cast, (, value, ), ;, }, throw, new, JsonMLException, (]
[., isInstance, (, value, ), ), {, return, type, ., cast, (, value, ), ;, }, throw, new, JsonMLException, (]
[., isInstance, (, value, ), ), {, return, type, ., cast, (, value, ), ;, }, throw, new, JsonMLException, (]
[., isInstance, (, value, ), ), {, return, type, ., cast, (, value, ), ;, }, throw, new, JsonMLException, (]
[(, value, ), ), {, return, type, ., cast, (, value, ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +]
[(, value, ), ), {, return, type, ., cast, (, value, ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +]
[type, ., cast, (, value, ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +]
[cast, (, value, ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, "attribute. ", +]
[value, ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, "attribute. ", +, "Received: ", +]
[value, ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, "attribute. ", +, "Received: ", +]
[JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, "attribute. ", +, "Received: ", +, value, ., getClass, (, ), +]
["Wrong type of ", +, attr, ., name, (, ), +, "attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +]
["Wrong type of ", +, attr, ., name, (, ), +, "attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +]
[getName, (, ), ), ;, }, private, Object, getObjectAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {, return]
[), ), ;, }, private, Object, getObjectAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {, return, getAttribute, (]
[;, }, private, Object, getObjectAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {, return, getAttribute, (, element, ,]
[private, Object, getObjectAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {, return, getAttribute, (, element, ,, attr, ,]
[Object, ., class, ), ;, }, private, String, getStringAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {, return]
[class, ), ;, }, private, String, getStringAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {, return, getAttribute, (]
[;, }, private, String, getStringAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {, return, getAttribute, (, element, ,]
[private, String, getStringAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {, return, getAttribute, (, element, ,, attr, ,]
[,, String, ., class, ), ;, }, private, void, validate, (, JsonML, element, ), throws, JsonMLException, {, String, errorMessage, =]
[,, String, ., class, ), ;, }, private, void, validate, (, JsonML, element, ), throws, JsonMLException, {, String, errorMessage, =]
[), ;, }, private, void, validate, (, JsonML, element, ), throws, JsonMLException, {, String, errorMessage, =, Validator, ., validate, (]
[validate, (, JsonML, element, ), throws, JsonMLException, {, String, errorMessage, =, Validator, ., validate, (, element, ), ;, if, (]
[validate, (, JsonML, element, ), throws, JsonMLException, {, String, errorMessage, =, Validator, ., validate, (, element, ), ;, if, (]
[JsonML, element, ), throws, JsonMLException, {, String, errorMessage, =, Validator, ., validate, (, element, ), ;, if, (, errorMessage, !=]
[throws, JsonMLException, {, String, errorMessage, =, Validator, ., validate, (, element, ), ;, if, (, errorMessage, !=, null, ), {]
[throws, JsonMLException, {, String, errorMessage, =, Validator, ., validate, (, element, ), ;, if, (, errorMessage, !=, null, ), {]
[errorMessage, =, Validator, ., validate, (, element, ), ;, if, (, errorMessage, !=, null, ), {, errorReporter, ., report, (]
[Validator, ., validate, (, element, ), ;, if, (, errorMessage, !=, null, ), {, errorReporter, ., report, (, element, ,]
[element, ,, errorMessage, ), ;, }, }, private, void, transformElement, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[element, ,, errorMessage, ), ;, }, }, private, void, transformElement, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, }, private, void, transformElement, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, nodeIndex, ++, ;]
[}, }, private, void, transformElement, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, nodeIndex, ++, ;, validate, (]
[(, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, nodeIndex, ++, ;, validate, (, element, ), ;, if, (]
[(, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, nodeIndex, ++, ;, validate, (, element, ), ;, if, (]
[element, ,, Node, parent, ), throws, JsonMLException, {, nodeIndex, ++, ;, validate, (, element, ), ;, if, (, insertExprResultState, &&]
[element, ,, Node, parent, ), throws, JsonMLException, {, nodeIndex, ++, ;, validate, (, element, ), ;, if, (, insertExprResultState, &&]
[), throws, JsonMLException, {, nodeIndex, ++, ;, validate, (, element, ), ;, if, (, insertExprResultState, &&, JsonMLUtil, ., isExpression, (]
[nodeIndex, ++, ;, validate, (, element, ), ;, if, (, insertExprResultState, &&, JsonMLUtil, ., isExpression, (, element, ), ), {]
[;, validate, (, element, ), ;, if, (, insertExprResultState, &&, JsonMLUtil, ., isExpression, (, element, ), ), {, transformExpr, (]
[(, element, ), ;, if, (, insertExprResultState, &&, JsonMLUtil, ., isExpression, (, element, ), ), {, transformExpr, (, element, ,]
[JsonMLUtil, ., isExpression, (, element, ), ), {, transformExpr, (, element, ,, parent, ), ;, return, ;, }, switch, (]
[JsonMLUtil, ., isExpression, (, element, ), ), {, transformExpr, (, element, ,, parent, ), ;, return, ;, }, switch, (]
[transformExpr, (, element, ,, parent, ), ;, return, ;, }, switch, (, element, ., getType, (, ), ), {, case]
[element, ,, parent, ), ;, return, ;, }, switch, (, element, ., getType, (, ), ), {, case, ArrayExpr, :]
[parent, ), ;, return, ;, }, switch, (, element, ., getType, (, ), ), {, case, ArrayExpr, :, transformArrayExpr, (]
[;, return, ;, }, switch, (, element, ., getType, (, ), ), {, case, ArrayExpr, :, transformArrayExpr, (, element, ,]
[element, ., getType, (, ), ), {, case, ArrayExpr, :, transformArrayExpr, (, element, ,, parent, ), ;, break, ;, case]
[getType, (, ), ), {, case, ArrayExpr, :, transformArrayExpr, (, element, ,, parent, ), ;, break, ;, case, AssignExpr, :]
[), ), {, case, ArrayExpr, :, transformArrayExpr, (, element, ,, parent, ), ;, break, ;, case, AssignExpr, :, transformAssignExpr, (]
[{, case, ArrayExpr, :, transformArrayExpr, (, element, ,, parent, ), ;, break, ;, case, AssignExpr, :, transformAssignExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, AssignExpr, :, transformAssignExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, AssignExpr, :, transformAssignExpr, (, element, ,, parent, ), ;, break, ;, case, BinaryExpr, :]
[;, break, ;, case, AssignExpr, :, transformAssignExpr, (, element, ,, parent, ), ;, break, ;, case, BinaryExpr, :, transformBinaryExpr, (]
[;, case, AssignExpr, :, transformAssignExpr, (, element, ,, parent, ), ;, break, ;, case, BinaryExpr, :, transformBinaryExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, BinaryExpr, :, transformBinaryExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, BinaryExpr, :, transformBinaryExpr, (, element, ,, parent, ), ;, break, ;, case, BlockStmt, :]
[;, break, ;, case, BinaryExpr, :, transformBinaryExpr, (, element, ,, parent, ), ;, break, ;, case, BlockStmt, :, transformBlock, (]
[;, case, BinaryExpr, :, transformBinaryExpr, (, element, ,, parent, ), ;, break, ;, case, BlockStmt, :, transformBlock, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, BlockStmt, :, transformBlock, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, BlockStmt, :, transformBlock, (, element, ,, parent, ), ;, break, ;, case, BreakStmt, :]
[;, break, ;, case, BlockStmt, :, transformBlock, (, element, ,, parent, ), ;, break, ;, case, BreakStmt, :, transformBreakStmt, (]
[;, case, BlockStmt, :, transformBlock, (, element, ,, parent, ), ;, break, ;, case, BreakStmt, :, transformBreakStmt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, BreakStmt, :, transformBreakStmt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, BreakStmt, :, transformBreakStmt, (, element, ,, parent, ), ;, break, ;, case, CallExpr, :]
[;, break, ;, case, BreakStmt, :, transformBreakStmt, (, element, ,, parent, ), ;, break, ;, case, CallExpr, :, transformCallExpr, (]
[;, case, BreakStmt, :, transformBreakStmt, (, element, ,, parent, ), ;, break, ;, case, CallExpr, :, transformCallExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, CallExpr, :, transformCallExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, CallExpr, :, transformCallExpr, (, element, ,, parent, ), ;, break, ;, case, Case, :]
[;, break, ;, case, CallExpr, :, transformCallExpr, (, element, ,, parent, ), ;, break, ;, case, Case, :, transformCase, (]
[;, case, CallExpr, :, transformCallExpr, (, element, ,, parent, ), ;, break, ;, case, Case, :, transformCase, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, Case, :, transformCase, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, Case, :, transformCase, (, element, ,, parent, ), ;, break, ;, case, CatchClause, :]
[;, break, ;, case, Case, :, transformCase, (, element, ,, parent, ), ;, break, ;, case, CatchClause, :, transformCatchClause, (]
[;, case, Case, :, transformCase, (, element, ,, parent, ), ;, break, ;, case, CatchClause, :, transformCatchClause, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, CatchClause, :, transformCatchClause, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, CatchClause, :, transformCatchClause, (, element, ,, parent, ), ;, break, ;, case, ConditionalExpr, :]
[;, break, ;, case, CatchClause, :, transformCatchClause, (, element, ,, parent, ), ;, break, ;, case, ConditionalExpr, :, transformConditionalExpr, (]
[;, case, CatchClause, :, transformCatchClause, (, element, ,, parent, ), ;, break, ;, case, ConditionalExpr, :, transformConditionalExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, ConditionalExpr, :, transformConditionalExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, ConditionalExpr, :, transformConditionalExpr, (, element, ,, parent, ), ;, break, ;, case, ContinueStmt, :]
[;, break, ;, case, ConditionalExpr, :, transformConditionalExpr, (, element, ,, parent, ), ;, break, ;, case, ContinueStmt, :, transformContinueStmt, (]
[;, case, ConditionalExpr, :, transformConditionalExpr, (, element, ,, parent, ), ;, break, ;, case, ContinueStmt, :, transformContinueStmt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, ContinueStmt, :, transformContinueStmt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, ContinueStmt, :, transformContinueStmt, (, element, ,, parent, ), ;, break, ;, case, CountExpr, :]
[;, break, ;, case, ContinueStmt, :, transformContinueStmt, (, element, ,, parent, ), ;, break, ;, case, CountExpr, :, transformCountExpr, (]
[;, case, ContinueStmt, :, transformContinueStmt, (, element, ,, parent, ), ;, break, ;, case, CountExpr, :, transformCountExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, CountExpr, :, transformCountExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, CountExpr, :, transformCountExpr, (, element, ,, parent, ), ;, break, ;, case, DataProp, :]
[;, break, ;, case, CountExpr, :, transformCountExpr, (, element, ,, parent, ), ;, break, ;, case, DataProp, :, transformDataProp, (]
[;, case, CountExpr, :, transformCountExpr, (, element, ,, parent, ), ;, break, ;, case, DataProp, :, transformDataProp, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, DataProp, :, transformDataProp, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, DataProp, :, transformDataProp, (, element, ,, parent, ), ;, break, ;, case, GetterProp, :]
[;, break, ;, case, DataProp, :, transformDataProp, (, element, ,, parent, ), ;, break, ;, case, GetterProp, :, transformGetterProp, (]
[;, case, DataProp, :, transformDataProp, (, element, ,, parent, ), ;, break, ;, case, GetterProp, :, transformGetterProp, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, GetterProp, :, transformGetterProp, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, GetterProp, :, transformGetterProp, (, element, ,, parent, ), ;, break, ;, case, SetterProp, :]
[;, break, ;, case, GetterProp, :, transformGetterProp, (, element, ,, parent, ), ;, break, ;, case, SetterProp, :, transformSetterProp, (]
[;, case, GetterProp, :, transformGetterProp, (, element, ,, parent, ), ;, break, ;, case, SetterProp, :, transformSetterProp, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, SetterProp, :, transformSetterProp, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, SetterProp, :, transformSetterProp, (, element, ,, parent, ), ;, break, ;, case, DefaultCase, :]
[;, break, ;, case, SetterProp, :, transformSetterProp, (, element, ,, parent, ), ;, break, ;, case, DefaultCase, :, transformDefaultCase, (]
[;, case, SetterProp, :, transformSetterProp, (, element, ,, parent, ), ;, break, ;, case, DefaultCase, :, transformDefaultCase, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, DefaultCase, :, transformDefaultCase, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, DefaultCase, :, transformDefaultCase, (, element, ,, parent, ), ;, break, ;, case, DeleteExpr, :]
[;, break, ;, case, DefaultCase, :, transformDefaultCase, (, element, ,, parent, ), ;, break, ;, case, DeleteExpr, :, transformDeleteExpr, (]
[;, case, DefaultCase, :, transformDefaultCase, (, element, ,, parent, ), ;, break, ;, case, DeleteExpr, :, transformDeleteExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, DeleteExpr, :, transformDeleteExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, DeleteExpr, :, transformDeleteExpr, (, element, ,, parent, ), ;, break, ;, case, DoWhileStmt, :]
[;, break, ;, case, DeleteExpr, :, transformDeleteExpr, (, element, ,, parent, ), ;, break, ;, case, DoWhileStmt, :, transformDoWhileStmt, (]
[;, case, DeleteExpr, :, transformDeleteExpr, (, element, ,, parent, ), ;, break, ;, case, DoWhileStmt, :, transformDoWhileStmt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, DoWhileStmt, :, transformDoWhileStmt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, DoWhileStmt, :, transformDoWhileStmt, (, element, ,, parent, ), ;, break, ;, case, Empty, :]
[;, break, ;, case, DoWhileStmt, :, transformDoWhileStmt, (, element, ,, parent, ), ;, break, ;, case, Empty, :, transformEmpty, (]
[;, case, DoWhileStmt, :, transformDoWhileStmt, (, element, ,, parent, ), ;, break, ;, case, Empty, :, transformEmpty, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, Empty, :, transformEmpty, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, Empty, :, transformEmpty, (, element, ,, parent, ), ;, break, ;, case, EmptyStmt, :]
[;, break, ;, case, Empty, :, transformEmpty, (, element, ,, parent, ), ;, break, ;, case, EmptyStmt, :, transformEmptyStmt, (]
[;, case, Empty, :, transformEmpty, (, element, ,, parent, ), ;, break, ;, case, EmptyStmt, :, transformEmptyStmt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, EmptyStmt, :, transformEmptyStmt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, EmptyStmt, :, transformEmptyStmt, (, element, ,, parent, ), ;, break, ;, case, EvalExpr, :]
[;, break, ;, case, EmptyStmt, :, transformEmptyStmt, (, element, ,, parent, ), ;, break, ;, case, EvalExpr, :, transformEvalExpr, (]
[;, case, EmptyStmt, :, transformEmptyStmt, (, element, ,, parent, ), ;, break, ;, case, EvalExpr, :, transformEvalExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, EvalExpr, :, transformEvalExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, EvalExpr, :, transformEvalExpr, (, element, ,, parent, ), ;, break, ;, case, ForInStmt, :]
[;, break, ;, case, EvalExpr, :, transformEvalExpr, (, element, ,, parent, ), ;, break, ;, case, ForInStmt, :, transformForInStmt, (]
[;, case, EvalExpr, :, transformEvalExpr, (, element, ,, parent, ), ;, break, ;, case, ForInStmt, :, transformForInStmt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, ForInStmt, :, transformForInStmt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, ForInStmt, :, transformForInStmt, (, element, ,, parent, ), ;, break, ;, case, ForStmt, :]
[;, break, ;, case, ForInStmt, :, transformForInStmt, (, element, ,, parent, ), ;, break, ;, case, ForStmt, :, transformForStmt, (]
[;, case, ForInStmt, :, transformForInStmt, (, element, ,, parent, ), ;, break, ;, case, ForStmt, :, transformForStmt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, ForStmt, :, transformForStmt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, ForStmt, :, transformForStmt, (, element, ,, parent, ), ;, break, ;, case, FunctionDecl, :]
[;, break, ;, case, ForStmt, :, transformForStmt, (, element, ,, parent, ), ;, break, ;, case, FunctionDecl, :, transformFunctionDecl, (]
[;, case, ForStmt, :, transformForStmt, (, element, ,, parent, ), ;, break, ;, case, FunctionDecl, :, transformFunctionDecl, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, FunctionDecl, :, transformFunctionDecl, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, FunctionDecl, :, transformFunctionDecl, (, element, ,, parent, ), ;, break, ;, case, FunctionExpr, :]
[;, break, ;, case, FunctionDecl, :, transformFunctionDecl, (, element, ,, parent, ), ;, break, ;, case, FunctionExpr, :, transformFunctionExpr, (]
[;, case, FunctionDecl, :, transformFunctionDecl, (, element, ,, parent, ), ;, break, ;, case, FunctionExpr, :, transformFunctionExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, FunctionExpr, :, transformFunctionExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, FunctionExpr, :, transformFunctionExpr, (, element, ,, parent, ), ;, break, ;, case, IdExpr, :]
[;, break, ;, case, FunctionExpr, :, transformFunctionExpr, (, element, ,, parent, ), ;, break, ;, case, IdExpr, :, transformIdExpr, (]
[;, case, FunctionExpr, :, transformFunctionExpr, (, element, ,, parent, ), ;, break, ;, case, IdExpr, :, transformIdExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, IdExpr, :, transformIdExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, IdExpr, :, transformIdExpr, (, element, ,, parent, ), ;, break, ;, case, IdPatt, :]
[;, break, ;, case, IdExpr, :, transformIdExpr, (, element, ,, parent, ), ;, break, ;, case, IdPatt, :, transformIdPatt, (]
[;, case, IdExpr, :, transformIdExpr, (, element, ,, parent, ), ;, break, ;, case, IdPatt, :, transformIdPatt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, IdPatt, :, transformIdPatt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, IdPatt, :, transformIdPatt, (, element, ,, parent, ), ;, break, ;, case, IfStmt, :]
[;, break, ;, case, IdPatt, :, transformIdPatt, (, element, ,, parent, ), ;, break, ;, case, IfStmt, :, transformIfStmt, (]
[;, case, IdPatt, :, transformIdPatt, (, element, ,, parent, ), ;, break, ;, case, IfStmt, :, transformIfStmt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, IfStmt, :, transformIfStmt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, IfStmt, :, transformIfStmt, (, element, ,, parent, ), ;, break, ;, case, InitPatt, :]
[;, break, ;, case, IfStmt, :, transformIfStmt, (, element, ,, parent, ), ;, break, ;, case, InitPatt, :, transformInitPatt, (]
[;, case, IfStmt, :, transformIfStmt, (, element, ,, parent, ), ;, break, ;, case, InitPatt, :, transformInitPatt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, InitPatt, :, transformInitPatt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, InitPatt, :, transformInitPatt, (, element, ,, parent, ), ;, break, ;, case, InvokeExpr, :]
[;, break, ;, case, InitPatt, :, transformInitPatt, (, element, ,, parent, ), ;, break, ;, case, InvokeExpr, :, transformInvokeExpr, (]
[;, case, InitPatt, :, transformInitPatt, (, element, ,, parent, ), ;, break, ;, case, InvokeExpr, :, transformInvokeExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, InvokeExpr, :, transformInvokeExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, InvokeExpr, :, transformInvokeExpr, (, element, ,, parent, ), ;, break, ;, case, LabelledStmt, :]
[;, break, ;, case, InvokeExpr, :, transformInvokeExpr, (, element, ,, parent, ), ;, break, ;, case, LabelledStmt, :, transformLabelledStmt, (]
[;, case, InvokeExpr, :, transformInvokeExpr, (, element, ,, parent, ), ;, break, ;, case, LabelledStmt, :, transformLabelledStmt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, LabelledStmt, :, transformLabelledStmt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, LabelledStmt, :, transformLabelledStmt, (, element, ,, parent, ), ;, break, ;, case, LiteralExpr, :]
[;, break, ;, case, LabelledStmt, :, transformLabelledStmt, (, element, ,, parent, ), ;, break, ;, case, LiteralExpr, :, transformLiteralExpr, (]
[;, case, LabelledStmt, :, transformLabelledStmt, (, element, ,, parent, ), ;, break, ;, case, LiteralExpr, :, transformLiteralExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, LiteralExpr, :, transformLiteralExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, LiteralExpr, :, transformLiteralExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalAndExpr, :]
[;, break, ;, case, LiteralExpr, :, transformLiteralExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalAndExpr, :, transformLogicalAndExpr, (]
[;, case, LiteralExpr, :, transformLiteralExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalAndExpr, :, transformLogicalAndExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, LogicalAndExpr, :, transformLogicalAndExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, LogicalAndExpr, :, transformLogicalAndExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalOrExpr, :]
[;, break, ;, case, LogicalAndExpr, :, transformLogicalAndExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalOrExpr, :, transformLogicalOrExpr, (]
[;, case, LogicalAndExpr, :, transformLogicalAndExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalOrExpr, :, transformLogicalOrExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, LogicalOrExpr, :, transformLogicalOrExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, LogicalOrExpr, :, transformLogicalOrExpr, (, element, ,, parent, ), ;, break, ;, case, MemberExpr, :]
[;, break, ;, case, LogicalOrExpr, :, transformLogicalOrExpr, (, element, ,, parent, ), ;, break, ;, case, MemberExpr, :, transformMemberExpr, (]
[;, case, LogicalOrExpr, :, transformLogicalOrExpr, (, element, ,, parent, ), ;, break, ;, case, MemberExpr, :, transformMemberExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, MemberExpr, :, transformMemberExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, MemberExpr, :, transformMemberExpr, (, element, ,, parent, ), ;, break, ;, case, NewExpr, :]
[;, break, ;, case, MemberExpr, :, transformMemberExpr, (, element, ,, parent, ), ;, break, ;, case, NewExpr, :, transformNewExpr, (]
[;, case, MemberExpr, :, transformMemberExpr, (, element, ,, parent, ), ;, break, ;, case, NewExpr, :, transformNewExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, NewExpr, :, transformNewExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, NewExpr, :, transformNewExpr, (, element, ,, parent, ), ;, break, ;, case, ObjectExpr, :]
[;, break, ;, case, NewExpr, :, transformNewExpr, (, element, ,, parent, ), ;, break, ;, case, ObjectExpr, :, transformObjectExpr, (]
[;, case, NewExpr, :, transformNewExpr, (, element, ,, parent, ), ;, break, ;, case, ObjectExpr, :, transformObjectExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, ObjectExpr, :, transformObjectExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, ObjectExpr, :, transformObjectExpr, (, element, ,, parent, ), ;, break, ;, case, ParamDecl, :]
[;, break, ;, case, ObjectExpr, :, transformObjectExpr, (, element, ,, parent, ), ;, break, ;, case, ParamDecl, :, transformParamDecl, (]
[;, case, ObjectExpr, :, transformObjectExpr, (, element, ,, parent, ), ;, break, ;, case, ParamDecl, :, transformParamDecl, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, ParamDecl, :, transformParamDecl, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, ParamDecl, :, transformParamDecl, (, element, ,, parent, ), ;, break, ;, case, Program, :]
[;, break, ;, case, ParamDecl, :, transformParamDecl, (, element, ,, parent, ), ;, break, ;, case, Program, :, transformProgram, (]
[;, case, ParamDecl, :, transformParamDecl, (, element, ,, parent, ), ;, break, ;, case, Program, :, transformProgram, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, Program, :, transformProgram, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, Program, :, transformProgram, (, element, ,, parent, ), ;, break, ;, case, PrologueDecl, :]
[;, break, ;, case, Program, :, transformProgram, (, element, ,, parent, ), ;, break, ;, case, PrologueDecl, :, transformPrologueDecl, (]
[;, case, Program, :, transformProgram, (, element, ,, parent, ), ;, break, ;, case, PrologueDecl, :, transformPrologueDecl, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, PrologueDecl, :, transformPrologueDecl, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, PrologueDecl, :, transformPrologueDecl, (, element, ,, parent, ), ;, break, ;, case, RegExpExpr, :]
[;, break, ;, case, PrologueDecl, :, transformPrologueDecl, (, element, ,, parent, ), ;, break, ;, case, RegExpExpr, :, transformRegExpExpr, (]
[;, case, PrologueDecl, :, transformPrologueDecl, (, element, ,, parent, ), ;, break, ;, case, RegExpExpr, :, transformRegExpExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, RegExpExpr, :, transformRegExpExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, RegExpExpr, :, transformRegExpExpr, (, element, ,, parent, ), ;, break, ;, case, ReturnStmt, :]
[;, break, ;, case, RegExpExpr, :, transformRegExpExpr, (, element, ,, parent, ), ;, break, ;, case, ReturnStmt, :, transformReturnStmt, (]
[;, case, RegExpExpr, :, transformRegExpExpr, (, element, ,, parent, ), ;, break, ;, case, ReturnStmt, :, transformReturnStmt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, ReturnStmt, :, transformReturnStmt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, ReturnStmt, :, transformReturnStmt, (, element, ,, parent, ), ;, break, ;, case, SwitchStmt, :]
[;, break, ;, case, ReturnStmt, :, transformReturnStmt, (, element, ,, parent, ), ;, break, ;, case, SwitchStmt, :, transformSwitchStmt, (]
[;, case, ReturnStmt, :, transformReturnStmt, (, element, ,, parent, ), ;, break, ;, case, SwitchStmt, :, transformSwitchStmt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, SwitchStmt, :, transformSwitchStmt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, SwitchStmt, :, transformSwitchStmt, (, element, ,, parent, ), ;, break, ;, case, ThisExpr, :]
[;, break, ;, case, SwitchStmt, :, transformSwitchStmt, (, element, ,, parent, ), ;, break, ;, case, ThisExpr, :, transformThisExpr, (]
[;, case, SwitchStmt, :, transformSwitchStmt, (, element, ,, parent, ), ;, break, ;, case, ThisExpr, :, transformThisExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, ThisExpr, :, transformThisExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, ThisExpr, :, transformThisExpr, (, element, ,, parent, ), ;, break, ;, case, ThrowStmt, :]
[;, break, ;, case, ThisExpr, :, transformThisExpr, (, element, ,, parent, ), ;, break, ;, case, ThrowStmt, :, transformThrowStmt, (]
[;, case, ThisExpr, :, transformThisExpr, (, element, ,, parent, ), ;, break, ;, case, ThrowStmt, :, transformThrowStmt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, ThrowStmt, :, transformThrowStmt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, ThrowStmt, :, transformThrowStmt, (, element, ,, parent, ), ;, break, ;, case, TryStmt, :]
[;, break, ;, case, ThrowStmt, :, transformThrowStmt, (, element, ,, parent, ), ;, break, ;, case, TryStmt, :, transformTryStmt, (]
[;, case, ThrowStmt, :, transformThrowStmt, (, element, ,, parent, ), ;, break, ;, case, TryStmt, :, transformTryStmt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, TryStmt, :, transformTryStmt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, TryStmt, :, transformTryStmt, (, element, ,, parent, ), ;, break, ;, case, TypeofExpr, :]
[;, break, ;, case, TryStmt, :, transformTryStmt, (, element, ,, parent, ), ;, break, ;, case, TypeofExpr, :, transformTypeofExpr, (]
[;, case, TryStmt, :, transformTryStmt, (, element, ,, parent, ), ;, break, ;, case, TypeofExpr, :, transformTypeofExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, TypeofExpr, :, transformTypeofExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, TypeofExpr, :, transformTypeofExpr, (, element, ,, parent, ), ;, break, ;, case, UnaryExpr, :]
[;, break, ;, case, TypeofExpr, :, transformTypeofExpr, (, element, ,, parent, ), ;, break, ;, case, UnaryExpr, :, transformUnaryExpr, (]
[;, case, TypeofExpr, :, transformTypeofExpr, (, element, ,, parent, ), ;, break, ;, case, UnaryExpr, :, transformUnaryExpr, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, UnaryExpr, :, transformUnaryExpr, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, UnaryExpr, :, transformUnaryExpr, (, element, ,, parent, ), ;, break, ;, case, VarDecl, :]
[;, break, ;, case, UnaryExpr, :, transformUnaryExpr, (, element, ,, parent, ), ;, break, ;, case, VarDecl, :, transformVarDecl, (]
[;, case, UnaryExpr, :, transformUnaryExpr, (, element, ,, parent, ), ;, break, ;, case, VarDecl, :, transformVarDecl, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, VarDecl, :, transformVarDecl, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, VarDecl, :, transformVarDecl, (, element, ,, parent, ), ;, break, ;, case, WhileStmt, :]
[;, break, ;, case, VarDecl, :, transformVarDecl, (, element, ,, parent, ), ;, break, ;, case, WhileStmt, :, transformWhileStmt, (]
[;, case, VarDecl, :, transformVarDecl, (, element, ,, parent, ), ;, break, ;, case, WhileStmt, :, transformWhileStmt, (, element, ,]
[element, ,, parent, ), ;, break, ;, case, WhileStmt, :, transformWhileStmt, (, element, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, WhileStmt, :, transformWhileStmt, (, element, ,, parent, ), ;, break, ;, case, WithStmt, :]
[;, break, ;, case, WhileStmt, :, transformWhileStmt, (, element, ,, parent, ), ;, break, ;, case, WithStmt, :, transformWithStmt, (]
[;, case, WhileStmt, :, transformWhileStmt, (, element, ,, parent, ), ;, break, ;, case, WithStmt, :, transformWithStmt, (, element, ,]
[break, ;, }, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent, ,, boolean, newState, ), throws, JsonMLException, {]
[}, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent, ,, boolean, newState, ), throws, JsonMLException, {, transformElements, (]
[}, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent, ,, boolean, newState, ), throws, JsonMLException, {, transformElements, (]
[JsonML, element, ,, Node, parent, ,, boolean, newState, ), throws, JsonMLException, {, transformElements, (, element, ., getChildren, (, ), ,]
[,, Node, parent, ,, boolean, newState, ), throws, JsonMLException, {, transformElements, (, element, ., getChildren, (, ), ,, parent, ,]
[,, parent, ,, newState, ), ;, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, newState, ), ;, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformElements, (]
[,, newState, ), ;, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformElements, (]
[void, transformAllChildren, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformElements, (, element, ., getChildren, (, ), ,]
[}, private, void, transformAllChildrenFromIndex, (, JsonML, element, ,, Node, parent, ,, int, fromIndex, ,, boolean, newState, ), throws, JsonMLException, {]
[void, transformAllChildrenFromIndex, (, JsonML, element, ,, Node, parent, ,, int, fromIndex, ,, boolean, newState, ), throws, JsonMLException, {, transformElements, (]
[void, transformAllChildrenFromIndex, (, JsonML, element, ,, Node, parent, ,, int, fromIndex, ,, boolean, newState, ), throws, JsonMLException, {, transformElements, (]
[void, transformAllChildrenFromIndex, (, JsonML, element, ,, Node, parent, ,, int, fromIndex, ,, boolean, newState, ), throws, JsonMLException, {, transformElements, (]
[,, int, fromIndex, ,, boolean, newState, ), throws, JsonMLException, {, transformElements, (, element, ., getChildren, (, ), ., subList, (]
[fromIndex, ,, boolean, newState, ), throws, JsonMLException, {, transformElements, (, element, ., getChildren, (, ), ., subList, (, fromIndex, ,]
[fromIndex, ,, boolean, newState, ), throws, JsonMLException, {, transformElements, (, element, ., getChildren, (, ), ., subList, (, fromIndex, ,]
[{, transformElements, (, element, ., getChildren, (, ), ., subList, (, fromIndex, ,, element, ., childrenSize, (, ), ), ,]
[(, element, ., getChildren, (, ), ., subList, (, fromIndex, ,, element, ., childrenSize, (, ), ), ,, parent, ,]
[transformElements, (, List, <, JsonML, >, elements, ,, Node, parent, ,, boolean, newState, ), throws, JsonMLException, {, boolean, oldState, =]
[List, <, JsonML, >, elements, ,, Node, parent, ,, boolean, newState, ), throws, JsonMLException, {, boolean, oldState, =, insertExprResultState, ;]
[JsonML, >, elements, ,, Node, parent, ,, boolean, newState, ), throws, JsonMLException, {, boolean, oldState, =, insertExprResultState, ;, insertExprResultState, =]
[elements, ,, Node, parent, ,, boolean, newState, ), throws, JsonMLException, {, boolean, oldState, =, insertExprResultState, ;, insertExprResultState, =, newState, ;]
[Node, parent, ,, boolean, newState, ), throws, JsonMLException, {, boolean, oldState, =, insertExprResultState, ;, insertExprResultState, =, newState, ;, transformElements, (]
[,, boolean, newState, ), throws, JsonMLException, {, boolean, oldState, =, insertExprResultState, ;, insertExprResultState, =, newState, ;, transformElements, (, elements, ,]
[), throws, JsonMLException, {, boolean, oldState, =, insertExprResultState, ;, insertExprResultState, =, newState, ;, transformElements, (, elements, ,, parent, ), ;]
[JsonMLException, {, boolean, oldState, =, insertExprResultState, ;, insertExprResultState, =, newState, ;, transformElements, (, elements, ,, parent, ), ;, insertExprResultState, =]
[void, transformElements, (, List, <, JsonML, >, elements, ,, Node, parent, ), throws, JsonMLException, {, for, (, JsonML, element, :]
[List, <, JsonML, >, elements, ,, Node, parent, ), throws, JsonMLException, {, for, (, JsonML, element, :, elements, ), {]
[JsonML, >, elements, ,, Node, parent, ), throws, JsonMLException, {, for, (, JsonML, element, :, elements, ), {, transformElement, (]
[elements, ,, Node, parent, ), throws, JsonMLException, {, for, (, JsonML, element, :, elements, ), {, transformElement, (, element, ,]
[), ;, }, }, private, boolean, transformExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, boolean, result, =]
[private, boolean, transformExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, boolean, result, =, false, ;, if, (]
[,, Node, parent, ), throws, JsonMLException, {, boolean, result, =, false, ;, if, (, insertExprResultState, ), {, Node, node, =]
[), throws, JsonMLException, {, boolean, result, =, false, ;, if, (, insertExprResultState, ), {, Node, node, =, new, Node, (]
[), throws, JsonMLException, {, boolean, result, =, false, ;, if, (, insertExprResultState, ), {, Node, node, =, new, Node, (]
[result, =, false, ;, if, (, insertExprResultState, ), {, Node, node, =, new, Node, (, Token, ., EXPR_RESULT, ), ;]
[result, =, false, ;, if, (, insertExprResultState, ), {, Node, node, =, new, Node, (, Token, ., EXPR_RESULT, ), ;]
[if, (, insertExprResultState, ), {, Node, node, =, new, Node, (, Token, ., EXPR_RESULT, ), ;, parent, ., addChildToBack, (]
[), {, Node, node, =, new, Node, (, Token, ., EXPR_RESULT, ), ;, parent, ., addChildToBack, (, node, ), ;]
[Node, node, =, new, Node, (, Token, ., EXPR_RESULT, ), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =]
[=, new, Node, (, Token, ., EXPR_RESULT, ), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;]
[=, new, Node, (, Token, ., EXPR_RESULT, ), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;]
[(, Token, ., EXPR_RESULT, ), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, nodeIndex, --, ;]
[., EXPR_RESULT, ), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, nodeIndex, --, ;, transformElement, (]
[), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, nodeIndex, --, ;, transformElement, (, element, ,]
[., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, nodeIndex, --, ;, transformElement, (, element, ,, node, ), ;]
[(, node, ), ;, insertExprResultState, =, false, ;, nodeIndex, --, ;, transformElement, (, element, ,, node, ), ;, insertExprResultState, =]
[), ;, insertExprResultState, =, false, ;, nodeIndex, --, ;, transformElement, (, element, ,, node, ), ;, insertExprResultState, =, true, ;]
[insertExprResultState, =, false, ;, nodeIndex, --, ;, transformElement, (, element, ,, node, ), ;, insertExprResultState, =, true, ;, result, =]
[nodeIndex, --, ;, transformElement, (, element, ,, node, ), ;, insertExprResultState, =, true, ;, result, =, true, ;, }, return]
[return, result, ;, }, private, void, transformForLoop, (, JsonML, element, ,, Node, parent, ,, int, childno, ), throws, JsonMLException, {]
[return, result, ;, }, private, void, transformForLoop, (, JsonML, element, ,, Node, parent, ,, int, childno, ), throws, JsonMLException, {]
[private, void, transformForLoop, (, JsonML, element, ,, Node, parent, ,, int, childno, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[private, void, transformForLoop, (, JsonML, element, ,, Node, parent, ,, int, childno, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[transformForLoop, (, JsonML, element, ,, Node, parent, ,, int, childno, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==]
[element, ,, Node, parent, ,, int, childno, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;]
[Node, parent, ,, int, childno, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =]
[), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (]
[checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., FOR, ,]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., FOR, ,, element, ), ;]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., FOR, ,, element, ), ;]
[insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., FOR, ,, element, ), ;, parent, ., addChildToBack, (]
[FOR, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, ;, for, (, int, i, =]
[element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, ;, for, (, int, i, =, 0, ;]
[element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, ;, for, (, int, i, =, 0, ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, ;, for, (, int, i, =, 0, ;, i, <]
[., addChildToBack, (, node, ), ;, JsonML, child, ;, for, (, int, i, =, 0, ;, i, <, childno, ;]
[addChildToBack, (, node, ), ;, JsonML, child, ;, for, (, int, i, =, 0, ;, i, <, childno, ;, ++]
[), ;, JsonML, child, ;, for, (, int, i, =, 0, ;, i, <, childno, ;, ++, i, ), {]
[JsonML, child, ;, for, (, int, i, =, 0, ;, i, <, childno, ;, ++, i, ), {, child, =]
[JsonML, child, ;, for, (, int, i, =, 0, ;, i, <, childno, ;, ++, i, ), {, child, =]
[(, int, i, =, 0, ;, i, <, childno, ;, ++, i, ), {, child, =, element, ., getChild, (]
[;, i, <, childno, ;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;, if, (]
[;, i, <, childno, ;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;, if, (]
[;, i, <, childno, ;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;, if, (]
[;, i, <, childno, ;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;, if, (]
[i, ), {, child, =, element, ., getChild, (, i, ), ;, if, (, child, ., getType, (, ), ==]
[i, ), {, child, =, element, ., getChild, (, i, ), ;, if, (, child, ., getType, (, ), ==]
[=, element, ., getChild, (, i, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ||]
[=, element, ., getChild, (, i, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ||]
[=, element, ., getChild, (, i, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ||]
[), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ||, child, ., getType, (, ), ==]
[), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ||, child, ., getType, (, ), ==]
[., getType, (, ), ==, TagType, ., EmptyStmt, ||, child, ., getType, (, ), ==, TagType, ., Empty, ), {]
[., getType, (, ), ==, TagType, ., EmptyStmt, ||, child, ., getType, (, ), ==, TagType, ., Empty, ), {]
[), ==, TagType, ., EmptyStmt, ||, child, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;]
[), ==, TagType, ., EmptyStmt, ||, child, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;]
[EmptyStmt, ||, child, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (]
[EmptyStmt, ||, child, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (]
[Empty, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {]
[{, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement, (]
[++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement, (, child, ,]
[(, IR, ., empty, (, ), ), ;, }, else, {, transformElement, (, child, ,, node, ), ;, }, }]
[., empty, (, ), ), ;, }, else, {, transformElement, (, child, ,, node, ), ;, }, }, transformPotentiallyUnwrappedBlock, (]
[., empty, (, ), ), ;, }, else, {, transformElement, (, child, ,, node, ), ;, }, }, transformPotentiallyUnwrappedBlock, (]
[), ;, }, else, {, transformElement, (, child, ,, node, ), ;, }, }, transformPotentiallyUnwrappedBlock, (, element, ., getChild, (]
[else, {, transformElement, (, child, ,, node, ), ;, }, }, transformPotentiallyUnwrappedBlock, (, element, ., getChild, (, childno, ), ,]
[(, child, ,, node, ), ;, }, }, transformPotentiallyUnwrappedBlock, (, element, ., getChild, (, childno, ), ,, node, ), ;]
[,, node, ), ;, }, }, transformPotentiallyUnwrappedBlock, (, element, ., getChild, (, childno, ), ,, node, ), ;, insertExprResultState, =]
[}, private, void, transformJumpStmt, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {, Node, node, =]
[void, transformJumpStmt, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[(, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {, Node, node, =, createNode, (, type, ,]
[,, Node, parent, ,, int, type, ), throws, JsonMLException, {, Node, node, =, createNode, (, type, ,, element, ), ;]
[,, Node, parent, ,, int, type, ), throws, JsonMLException, {, Node, node, =, createNode, (, type, ,, element, ), ;]
[int, type, ), throws, JsonMLException, {, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (]
[Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, String, label, =]
[=, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, String, label, =, getOptionalAttribute, (]
[(, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, String, label, =, getOptionalAttribute, (, element, ,]
[(, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, String, label, =, getOptionalAttribute, (, element, ,]
[), ;, parent, ., addChildToBack, (, node, ), ;, String, label, =, getOptionalAttribute, (, element, ,, TagAttr, ., LABEL, ,]
[), ;, String, label, =, getOptionalAttribute, (, element, ,, TagAttr, ., LABEL, ,, String, ., class, ), ;, if, (]
[), ;, String, label, =, getOptionalAttribute, (, element, ,, TagAttr, ., LABEL, ,, String, ., class, ), ;, if, (]
[String, label, =, getOptionalAttribute, (, element, ,, TagAttr, ., LABEL, ,, String, ., class, ), ;, if, (, label, !=]
[getOptionalAttribute, (, element, ,, TagAttr, ., LABEL, ,, String, ., class, ), ;, if, (, label, !=, null, ), {]
[getOptionalAttribute, (, element, ,, TagAttr, ., LABEL, ,, String, ., class, ), ;, if, (, label, !=, null, ), {]
[TagAttr, ., LABEL, ,, String, ., class, ), ;, if, (, label, !=, null, ), {, node, ., addChildToBack, (]
[TagAttr, ., LABEL, ,, String, ., class, ), ;, if, (, label, !=, null, ), {, node, ., addChildToBack, (]
[String, ., class, ), ;, if, (, label, !=, null, ), {, node, ., addChildToBack, (, IR, ., labelName, (]
[), ;, }, }, private, void, transformLogicalExpr, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {]
[}, }, private, void, transformLogicalExpr, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {, transformTwoArgumentExpr, (]
[private, void, transformLogicalExpr, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {, transformTwoArgumentExpr, (, element, ,]
[transformLogicalExpr, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {, transformTwoArgumentExpr, (, element, ,, parent, ,]
[}, private, void, transformTwoArgumentExpr, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {, Node, node, =]
[void, transformTwoArgumentExpr, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[(, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {, Node, node, =, createNode, (, type, ,]
[,, Node, parent, ,, int, type, ), throws, JsonMLException, {, Node, node, =, createNode, (, type, ,, element, ), ;]
[,, Node, parent, ,, int, type, ), throws, JsonMLException, {, Node, node, =, createNode, (, type, ,, element, ), ;]
[int, type, ), throws, JsonMLException, {, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (]
[throws, JsonMLException, {, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[{, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (]
[node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,]
[,, node, ), ;, }, private, void, transformPotentiallyUnwrappedBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, if, (]
[,, node, ), ;, }, private, void, transformPotentiallyUnwrappedBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, if, (]
[,, node, ), ;, }, private, void, transformPotentiallyUnwrappedBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, if, (]
[,, node, ), ;, }, private, void, transformPotentiallyUnwrappedBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, if, (]
[void, transformPotentiallyUnwrappedBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, if, (, element, ., getType, (, ), ==]
[void, transformPotentiallyUnwrappedBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, if, (, element, ., getType, (, ), ==]
[element, ,, Node, parent, ), throws, JsonMLException, {, if, (, element, ., getType, (, ), ==, TagType, ., EmptyStmt, ||]
[element, ,, Node, parent, ), throws, JsonMLException, {, if, (, element, ., getType, (, ), ==, TagType, ., EmptyStmt, ||]
[element, ,, Node, parent, ), throws, JsonMLException, {, if, (, element, ., getType, (, ), ==, TagType, ., EmptyStmt, ||]
[JsonMLException, {, if, (, element, ., getType, (, ), ==, TagType, ., EmptyStmt, ||, element, ., getType, (, ), ==]
[JsonMLException, {, if, (, element, ., getType, (, ), ==, TagType, ., EmptyStmt, ||, element, ., getType, (, ), ==]
[., getType, (, ), ==, TagType, ., EmptyStmt, ||, element, ., getType, (, ), ==, TagType, ., Empty, ), {]
[., getType, (, ), ==, TagType, ., EmptyStmt, ||, element, ., getType, (, ), ==, TagType, ., Empty, ), {]
[., EmptyStmt, ||, element, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, Node, block, =]
[., EmptyStmt, ||, element, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, Node, block, =]
[(, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, Node, block, =, IR, ., block, (, ), ;]
[(, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, Node, block, =, IR, ., block, (, ), ;]
[., Empty, ), {, nodeIndex, ++, ;, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (]
[{, nodeIndex, ++, ;, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;]
[{, nodeIndex, ++, ;, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;]
[Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;, block, ., putBooleanProp, (]
[Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;, block, ., putBooleanProp, (]
[., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;, block, ., putBooleanProp, (, Node, ., EMPTY_BLOCK, ,]
[addChildToBack, (, block, ), ;, block, ., putBooleanProp, (, Node, ., EMPTY_BLOCK, ,, true, ), ;, }, else, if, (]
[addChildToBack, (, block, ), ;, block, ., putBooleanProp, (, Node, ., EMPTY_BLOCK, ,, true, ), ;, }, else, if, (]
[addChildToBack, (, block, ), ;, block, ., putBooleanProp, (, Node, ., EMPTY_BLOCK, ,, true, ), ;, }, else, if, (]
[., putBooleanProp, (, Node, ., EMPTY_BLOCK, ,, true, ), ;, }, else, if, (, element, ., getType, (, ), !=]
[., putBooleanProp, (, Node, ., EMPTY_BLOCK, ,, true, ), ;, }, else, if, (, element, ., getType, (, ), !=]
[), ;, }, else, if, (, element, ., getType, (, ), !=, TagType, ., BlockStmt, ), {, Node, block, =]
[), ;, }, else, if, (, element, ., getType, (, ), !=, TagType, ., BlockStmt, ), {, Node, block, =]
[element, ., getType, (, ), !=, TagType, ., BlockStmt, ), {, Node, block, =, IR, ., block, (, ), ;]
[element, ., getType, (, ), !=, TagType, ., BlockStmt, ), {, Node, block, =, IR, ., block, (, ), ;]
[), !=, TagType, ., BlockStmt, ), {, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (]
[{, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;, boolean, state, =]
[block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;, boolean, state, =, insertExprResultState, ;]
[IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;, boolean, state, =, insertExprResultState, ;, insertExprResultState, =]
[block, (, ), ;, parent, ., addChildToBack, (, block, ), ;, boolean, state, =, insertExprResultState, ;, insertExprResultState, =, true, ;]
[), ;, parent, ., addChildToBack, (, block, ), ;, boolean, state, =, insertExprResultState, ;, insertExprResultState, =, true, ;, transformElement, (]
[parent, ., addChildToBack, (, block, ), ;, boolean, state, =, insertExprResultState, ;, insertExprResultState, =, true, ;, transformElement, (, element, ,]
[(, block, ), ;, boolean, state, =, insertExprResultState, ;, insertExprResultState, =, true, ;, transformElement, (, element, ,, block, ), ;]
[), ;, boolean, state, =, insertExprResultState, ;, insertExprResultState, =, true, ;, transformElement, (, element, ,, block, ), ;, insertExprResultState, =]
[insertExprResultState, ;, insertExprResultState, =, true, ;, transformElement, (, element, ,, block, ), ;, insertExprResultState, =, state, ;, }, else, {]
[insertExprResultState, ;, insertExprResultState, =, true, ;, transformElement, (, element, ,, block, ), ;, insertExprResultState, =, state, ;, }, else, {]
[=, true, ;, transformElement, (, element, ,, block, ), ;, insertExprResultState, =, state, ;, }, else, {, nodeIndex, ++, ;]
[;, transformElement, (, element, ,, block, ), ;, insertExprResultState, =, state, ;, }, else, {, nodeIndex, ++, ;, transformBlock, (]
[(, element, ,, block, ), ;, insertExprResultState, =, state, ;, }, else, {, nodeIndex, ++, ;, transformBlock, (, element, ,]
[), ;, }, }, private, void, transformArrayExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[}, }, private, void, transformArrayExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[}, }, private, void, transformArrayExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformArrayExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., ARRAYLIT, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., ARRAYLIT, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., ARRAYLIT, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., ARRAYLIT, ,, element, ), ;, parent, ., addChildToBack, (]
[(, Token, ., ARRAYLIT, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, for, (, JsonML, child, :]
[(, Token, ., ARRAYLIT, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, for, (, JsonML, child, :]
[;, parent, ., addChildToBack, (, node, ), ;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {]
[., addChildToBack, (, node, ), ;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {, transformElement, (]
[(, node, ), ;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {, transformElement, (, child, ,]
[), ;, }, }, private, void, transformAssignExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =]
[}, }, private, void, transformAssignExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (]
[private, void, transformAssignExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,]
[private, void, transformAssignExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,]
[parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =]
[parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =]
[{, String, op, =, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForAssignOp, (]
[=, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForAssignOp, (, op, ), ;]
[(, element, ,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForAssignOp, (, op, ), ;, transformTwoArgumentExpr, (]
[,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForAssignOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,]
[., OP, ), ;, int, type, =, Operator, ., getNodeTypeForAssignOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,, parent, ,]
[type, ), ;, }, private, void, transformBinaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =]
[;, }, private, void, transformBinaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (]
[private, void, transformBinaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,]
[private, void, transformBinaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,]
[parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =]
[parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =]
[{, String, op, =, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForBinaryOp, (]
[=, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForBinaryOp, (, op, ), ;]
[(, element, ,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForBinaryOp, (, op, ), ;, transformTwoArgumentExpr, (]
[,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForBinaryOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,]
[., OP, ), ;, int, type, =, Operator, ., getNodeTypeForBinaryOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,, parent, ,]
[,, parent, ,, type, ), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, type, ), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformBlock, (]
[), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformBlock, (, element, ,]
[}, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformBlock, (, element, ,, parent, ,]
[void, transformBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformBlock, (, element, ,, parent, ,, 0, ,]
[void, transformBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformBlock, (, element, ,, parent, ,, 0, ,]
[), ), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ,, int, start, ), throws, JsonMLException, {]
[;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ,, int, start, ), throws, JsonMLException, {, transformBlock, (]
[private, void, transformBlock, (, JsonML, element, ,, Node, parent, ,, int, start, ), throws, JsonMLException, {, transformBlock, (, element, ,]
[transformBlock, (, JsonML, element, ,, Node, parent, ,, int, start, ), throws, JsonMLException, {, transformBlock, (, element, ,, parent, ,]
[JsonML, element, ,, Node, parent, ,, int, start, ), throws, JsonMLException, {, transformBlock, (, element, ,, parent, ,, start, ,]
[JsonML, element, ,, Node, parent, ,, int, start, ), throws, JsonMLException, {, transformBlock, (, element, ,, parent, ,, start, ,]
[transformBlock, (, JsonML, element, ,, Node, parent, ,, int, start, ,, int, end, ), throws, JsonMLException, {, Node, node, =]
[JsonML, element, ,, Node, parent, ,, int, start, ,, int, end, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[JsonML, element, ,, Node, parent, ,, int, start, ,, int, end, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[parent, ,, int, start, ,, int, end, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., BLOCK, ,]
[start, ,, int, end, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., BLOCK, ,, element, ), ;]
[start, ,, int, end, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., BLOCK, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., BLOCK, ,, element, ), ;, parent, ., addChildToBack, (]
[{, Node, node, =, createNode, (, Token, ., BLOCK, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[node, =, createNode, (, Token, ., BLOCK, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElements, (]
[node, =, createNode, (, Token, ., BLOCK, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElements, (]
[Token, ., BLOCK, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElements, (, element, ., getChildren, (]
[BLOCK, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElements, (, element, ., getChildren, (, start, ,]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformElements, (, element, ., getChildren, (, start, ,, end, ), ,]
[parent, ., addChildToBack, (, node, ), ;, transformElements, (, element, ., getChildren, (, start, ,, end, ), ,, node, ,]
[,, node, ,, true, ), ;, }, private, void, transformBreakStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, true, ), ;, }, private, void, transformBreakStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (]
[), ;, }, private, void, transformBreakStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (, element, ,]
[}, private, void, transformBreakStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (, element, ,, parent, ,]
[}, private, void, transformBreakStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (, element, ,, parent, ,]
[BREAK, ), ;, }, private, void, transformCallExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, }, private, void, transformCallExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[;, }, private, void, transformCallExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformCallExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CALL, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CALL, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CALL, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CALL, ,, element, ), ;, parent, ., addChildToBack, (]
[{, Node, node, =, createNode, (, Token, ., CALL, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[node, =, createNode, (, Token, ., CALL, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (]
[createNode, (, Token, ., CALL, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,]
[element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, Node, first, =]
[element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, Node, first, =]
[), ;, transformAllChildren, (, element, ,, node, ), ;, Node, first, =, node, ., getFirstChild, (, ), ;, if, (]
[), ;, transformAllChildren, (, element, ,, node, ), ;, Node, first, =, node, ., getFirstChild, (, ), ;, if, (]
[), ;, transformAllChildren, (, element, ,, node, ), ;, Node, first, =, node, ., getFirstChild, (, ), ;, if, (]
[), ;, transformAllChildren, (, element, ,, node, ), ;, Node, first, =, node, ., getFirstChild, (, ), ;, if, (]
[node, ), ;, Node, first, =, node, ., getFirstChild, (, ), ;, if, (, first, ., getType, (, ), !=]
[node, ), ;, Node, first, =, node, ., getFirstChild, (, ), ;, if, (, first, ., getType, (, ), !=]
[first, =, node, ., getFirstChild, (, ), ;, if, (, first, ., getType, (, ), !=, Token, ., GETPROP, &&]
[first, =, node, ., getFirstChild, (, ), ;, if, (, first, ., getType, (, ), !=, Token, ., GETPROP, &&]
[first, =, node, ., getFirstChild, (, ), ;, if, (, first, ., getType, (, ), !=, Token, ., GETPROP, &&]
[), ;, if, (, first, ., getType, (, ), !=, Token, ., GETPROP, &&, first, ., getType, (, ), !=]
[), ;, if, (, first, ., getType, (, ), !=, Token, ., GETPROP, &&, first, ., getType, (, ), !=]
[., getType, (, ), !=, Token, ., GETPROP, &&, first, ., getType, (, ), !=, Token, ., GETELEM, ), {]
[., getType, (, ), !=, Token, ., GETPROP, &&, first, ., getType, (, ), !=, Token, ., GETELEM, ), {]
[!=, Token, ., GETPROP, &&, first, ., getType, (, ), !=, Token, ., GETELEM, ), {, node, ., putBooleanProp, (]
[!=, Token, ., GETPROP, &&, first, ., getType, (, ), !=, Token, ., GETELEM, ), {, node, ., putBooleanProp, (]
[&&, first, ., getType, (, ), !=, Token, ., GETELEM, ), {, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[), ;, }, }, private, void, transformCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[}, }, private, void, transformCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[}, }, private, void, transformCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CASE, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CASE, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CASE, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CASE, ,, element, ), ;, parent, ., addChildToBack, (]
[=, createNode, (, Token, ., CASE, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[=, createNode, (, Token, ., CASE, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[., CASE, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node, block, =]
[JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node, block, =]
[(, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node, block, =, IR, ., block, (, ), ;]
[(, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node, block, =, IR, ., block, (, ), ;]
[transformElement, (, child, ,, node, ), ;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (]
[,, node, ), ;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;]
[,, node, ), ;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;]
[Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (]
[IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;]
[block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildrenFromIndex, (]
[), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildrenFromIndex, (, element, ,]
[block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildrenFromIndex, (, element, ,, block, ,]
[setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildrenFromIndex, (, element, ,, block, ,, 1, ,]
[true, ), ;, }, private, void, transformCatchClause, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, }, private, void, transformCatchClause, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[;, }, private, void, transformCatchClause, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformCatchClause, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CATCH, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CATCH, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CATCH, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CATCH, ,, element, ), ;, parent, ., addChildToBack, (]
[=, createNode, (, Token, ., CATCH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[=, createNode, (, Token, ., CATCH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[., CATCH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =]
[element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (]
[(, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;]
[), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (]
[transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,]
[node, ), ;, }, private, void, transformConditionalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, }, private, void, transformConditionalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[;, }, private, void, transformConditionalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformConditionalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., HOOK, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., HOOK, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., HOOK, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., HOOK, ,, element, ), ;, parent, ., addChildToBack, (]
[{, Node, node, =, createNode, (, Token, ., HOOK, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[node, =, createNode, (, Token, ., HOOK, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (]
[createNode, (, Token, ., HOOK, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,]
[(, element, ,, node, ), ;, }, private, void, transformContinueStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, node, ), ;, }, private, void, transformContinueStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (]
[), ;, }, private, void, transformContinueStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (, element, ,]
[}, private, void, transformContinueStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (, element, ,, parent, ,]
[}, private, void, transformContinueStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (, element, ,, parent, ,]
[CONTINUE, ), ;, }, private, void, transformCountExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =]
[;, }, private, void, transformCountExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (]
[private, void, transformCountExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,]
[private, void, transformCountExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,]
[parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =]
[parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =]
[{, String, op, =, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForCountOp, (]
[element, ,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForCountOp, (, op, ), ;, Boolean, isPrefix, =]
[TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForCountOp, (, op, ), ;, Boolean, isPrefix, =, getAttribute, (]
[OP, ), ;, int, type, =, Operator, ., getNodeTypeForCountOp, (, op, ), ;, Boolean, isPrefix, =, getAttribute, (, element, ,]
[OP, ), ;, int, type, =, Operator, ., getNodeTypeForCountOp, (, op, ), ;, Boolean, isPrefix, =, getAttribute, (, element, ,]
[type, =, Operator, ., getNodeTypeForCountOp, (, op, ), ;, Boolean, isPrefix, =, getAttribute, (, element, ,, TagAttr, ., IS_PREFIX, ,]
[;, Boolean, isPrefix, =, getAttribute, (, element, ,, TagAttr, ., IS_PREFIX, ,, Boolean, ., class, ), ;, Node, node, =]
[isPrefix, =, getAttribute, (, element, ,, TagAttr, ., IS_PREFIX, ,, Boolean, ., class, ), ;, Node, node, =, createNode, (]
[getAttribute, (, element, ,, TagAttr, ., IS_PREFIX, ,, Boolean, ., class, ), ;, Node, node, =, createNode, (, type, ,]
[,, TagAttr, ., IS_PREFIX, ,, Boolean, ., class, ), ;, Node, node, =, createNode, (, type, ,, element, ), ;]
[,, TagAttr, ., IS_PREFIX, ,, Boolean, ., class, ), ;, Node, node, =, createNode, (, type, ,, element, ), ;]
[,, Boolean, ., class, ), ;, Node, node, =, createNode, (, type, ,, element, ), ;, node, ., putIntProp, (]
[,, Boolean, ., class, ), ;, Node, node, =, createNode, (, type, ,, element, ), ;, node, ., putIntProp, (]
[), ;, Node, node, =, createNode, (, type, ,, element, ), ;, node, ., putIntProp, (, Node, ., INCRDECR_PROP, ,]
[), ;, Node, node, =, createNode, (, type, ,, element, ), ;, node, ., putIntProp, (, Node, ., INCRDECR_PROP, ,]
[Node, node, =, createNode, (, type, ,, element, ), ;, node, ., putIntProp, (, Node, ., INCRDECR_PROP, ,, isPrefix, ?]
[=, createNode, (, type, ,, element, ), ;, node, ., putIntProp, (, Node, ., INCRDECR_PROP, ,, isPrefix, ?, 0, :]
[type, ,, element, ), ;, node, ., putIntProp, (, Node, ., INCRDECR_PROP, ,, isPrefix, ?, 0, :, 1, ), ;]
[type, ,, element, ), ;, node, ., putIntProp, (, Node, ., INCRDECR_PROP, ,, isPrefix, ?, 0, :, 1, ), ;]
[;, node, ., putIntProp, (, Node, ., INCRDECR_PROP, ,, isPrefix, ?, 0, :, 1, ), ;, parent, ., addChildToBack, (]
[putIntProp, (, Node, ., INCRDECR_PROP, ,, isPrefix, ?, 0, :, 1, ), ;, parent, ., addChildToBack, (, node, ), ;]
[Node, ., INCRDECR_PROP, ,, isPrefix, ?, 0, :, 1, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (]
[Node, ., INCRDECR_PROP, ,, isPrefix, ?, 0, :, 1, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (]
[isPrefix, ?, 0, :, 1, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (]
[:, 1, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[node, ), ;, }, private, void, transformDataProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object, name, =]
[;, }, private, void, transformDataProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object, name, =, getObjectAttribute, (]
[private, void, transformDataProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object, name, =, getObjectAttribute, (, element, ,]
[private, void, transformDataProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object, name, =, getObjectAttribute, (, element, ,]
[parent, ), throws, JsonMLException, {, Object, name, =, getObjectAttribute, (, element, ,, TagAttr, ., NAME, ), ;, Node, node, =]
[{, Object, name, =, getObjectAttribute, (, element, ,, TagAttr, ., NAME, ), ;, Node, node, =, null, ;, if, (]
[{, Object, name, =, getObjectAttribute, (, element, ,, TagAttr, ., NAME, ), ;, Node, node, =, null, ;, if, (]
[(, element, ,, TagAttr, ., NAME, ), ;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {]
[,, TagAttr, ., NAME, ), ;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, node, =]
[,, TagAttr, ., NAME, ), ;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, node, =]
[), ;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, node, =, IR, ., stringKey, (]
[Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, node, =, IR, ., stringKey, (, getStringValue, (]
[Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, node, =, IR, ., stringKey, (, getStringValue, (]
[node, =, null, ;, if, (, name, instanceof, Number, ), {, node, =, IR, ., stringKey, (, getStringValue, (, (]
[;, if, (, name, instanceof, Number, ), {, node, =, IR, ., stringKey, (, getStringValue, (, (, (, Number, )]
[(, getStringValue, (, (, (, Number, ), name, ), ., doubleValue, (, ), ), ), ;, }, else, if, (]
[(, getStringValue, (, (, (, Number, ), name, ), ., doubleValue, (, ), ), ), ;, }, else, if, (]
[Number, ), name, ), ., doubleValue, (, ), ), ), ;, }, else, if, (, name, instanceof, String, ), {]
[name, ), ., doubleValue, (, ), ), ), ;, }, else, if, (, name, instanceof, String, ), {, node, =]
[name, ), ., doubleValue, (, ), ), ), ;, }, else, if, (, name, instanceof, String, ), {, node, =]
[(, ), ), ), ;, }, else, if, (, name, instanceof, String, ), {, node, =, IR, ., stringKey, (]
[), ;, }, else, if, (, name, instanceof, String, ), {, node, =, IR, ., stringKey, (, (, String, )]
[instanceof, String, ), {, node, =, IR, ., stringKey, (, (, String, ), name, ), ;, }, else, {, throw]
[{, node, =, IR, ., stringKey, (, (, String, ), name, ), ;, }, else, {, throw, new, IllegalStateException, (]
[., stringKey, (, (, String, ), name, ), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }]
[(, (, String, ), name, ), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (]
[), name, ), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;]
[), name, ), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;]
[}, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (]
[throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;]
[IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (]
[IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (]
[;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (]
[(, node, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[(, 0, ), ,, node, ), ;, }, private, static, String, getStringValue, (, double, value, ), {, long, longValue, =]
[,, node, ), ;, }, private, static, String, getStringValue, (, double, value, ), {, long, longValue, =, (, long, )]
[}, private, static, String, getStringValue, (, double, value, ), {, long, longValue, =, (, long, ), value, ;, if, (]
[}, private, static, String, getStringValue, (, double, value, ), {, long, longValue, =, (, long, ), value, ;, if, (]
[static, String, getStringValue, (, double, value, ), {, long, longValue, =, (, long, ), value, ;, if, (, longValue, ==]
[double, value, ), {, long, longValue, =, (, long, ), value, ;, if, (, longValue, ==, value, ), {, return]
[double, value, ), {, long, longValue, =, (, long, ), value, ;, if, (, longValue, ==, value, ), {, return]
[long, longValue, =, (, long, ), value, ;, if, (, longValue, ==, value, ), {, return, Long, ., toString, (]
[;, if, (, longValue, ==, value, ), {, return, Long, ., toString, (, longValue, ), ;, }, else, {, return]
[;, if, (, longValue, ==, value, ), {, return, Long, ., toString, (, longValue, ), ;, }, else, {, return]
[==, value, ), {, return, Long, ., toString, (, longValue, ), ;, }, else, {, return, Double, ., toString, (]
[toString, (, value, ), ;, }, }, private, void, transformGetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[value, ), ;, }, }, private, void, transformGetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformProp, (]
[value, ), ;, }, }, private, void, transformGetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformProp, (]
[}, private, void, transformGetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformProp, (, Token, ., GETTER_DEF, ,]
[void, transformGetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformProp, (, Token, ., GETTER_DEF, ,, element, ,]
[,, element, ,, parent, ), ;, }, private, void, transformSetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, parent, ), ;, }, private, void, transformSetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformProp, (]
[,, parent, ), ;, }, private, void, transformSetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformProp, (]
[}, private, void, transformSetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformProp, (, Token, ., SETTER_DEF, ,]
[void, transformSetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformProp, (, Token, ., SETTER_DEF, ,, element, ,]
[}, private, void, transformProp, (, int, tokenType, ,, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object, name, =]
[void, transformProp, (, int, tokenType, ,, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object, name, =, getObjectAttribute, (]
[(, int, tokenType, ,, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object, name, =, getObjectAttribute, (, element, ,]
[(, int, tokenType, ,, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object, name, =, getObjectAttribute, (, element, ,]
[parent, ), throws, JsonMLException, {, Object, name, =, getObjectAttribute, (, element, ,, TagAttr, ., NAME, ), ;, Node, node, =]
[{, Object, name, =, getObjectAttribute, (, element, ,, TagAttr, ., NAME, ), ;, Node, node, =, null, ;, if, (]
[{, Object, name, =, getObjectAttribute, (, element, ,, TagAttr, ., NAME, ), ;, Node, node, =, null, ;, if, (]
[element, ,, TagAttr, ., NAME, ), ;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, throw]
[., NAME, ), ;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, throw, new, IllegalStateException, (]
[null, ;, if, (, name, instanceof, Number, ), {, throw, new, IllegalStateException, (, "Not yet supported.", ), ;, }, else, if, (]
[null, ;, if, (, name, instanceof, Number, ), {, throw, new, IllegalStateException, (, "Not yet supported.", ), ;, }, else, if, (]
[instanceof, Number, ), {, throw, new, IllegalStateException, (, "Not yet supported.", ), ;, }, else, if, (, name, instanceof, String, ), {]
[), {, throw, new, IllegalStateException, (, "Not yet supported.", ), ;, }, else, if, (, name, instanceof, String, ), {, node, =]
[), {, throw, new, IllegalStateException, (, "Not yet supported.", ), ;, }, else, if, (, name, instanceof, String, ), {, node, =]
[IllegalStateException, (, "Not yet supported.", ), ;, }, else, if, (, name, instanceof, String, ), {, node, =, Node, ., newString, (]
["Not yet supported.", ), ;, }, else, if, (, name, instanceof, String, ), {, node, =, Node, ., newString, (, tokenType, ,]
[}, else, if, (, name, instanceof, String, ), {, node, =, Node, ., newString, (, tokenType, ,, (, String, )]
[), {, node, =, Node, ., newString, (, tokenType, ,, (, String, ), name, ), ;, }, else, {, throw]
[=, Node, ., newString, (, tokenType, ,, (, String, ), name, ), ;, }, else, {, throw, new, IllegalStateException, (]
[(, tokenType, ,, (, String, ), name, ), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }]
[,, (, String, ), name, ), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (]
[), name, ), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;]
[), name, ), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;]
[}, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (]
[throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;]
[IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (]
[IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (]
[;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (]
[(, node, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[node, ), ;, }, private, void, transformDefaultCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, }, private, void, transformDefaultCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[;, }, private, void, transformDefaultCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformDefaultCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., DEFAULT_CASE, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., DEFAULT_CASE, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., DEFAULT_CASE, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., DEFAULT_CASE, ,, element, ), ;, parent, ., addChildToBack, (]
[=, createNode, (, Token, ., DEFAULT_CASE, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, block, =]
[=, createNode, (, Token, ., DEFAULT_CASE, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, block, =]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, block, =, IR, ., block, (, ), ;]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, block, =, IR, ., block, (, ), ;]
[parent, ., addChildToBack, (, node, ), ;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (]
[(, node, ), ;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;]
[(, node, ), ;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;]
[Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (]
[IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;]
[block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildren, (]
[), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildren, (, element, ,]
[block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildren, (, element, ,, block, ,]
[true, ), ;, }, private, void, transformDeleteExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, }, private, void, transformDeleteExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[;, }, private, void, transformDeleteExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformDeleteExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., DELPROP, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., DELPROP, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., DELPROP, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., DELPROP, ,, element, ), ;, parent, ., addChildToBack, (]
[{, Node, node, =, createNode, (, Token, ., DELPROP, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[node, =, createNode, (, Token, ., DELPROP, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (]
[node, =, createNode, (, Token, ., DELPROP, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (]
[Token, ., DELPROP, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[0, ), ,, node, ), ;, }, private, void, transformDoWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[0, ), ,, node, ), ;, }, private, void, transformDoWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, private, void, transformDoWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[), ;, }, private, void, transformDoWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[}, private, void, transformDoWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==]
[transformDoWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;]
[JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =]
[), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (]
[checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., DO, ,]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., DO, ,, element, ), ;]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., DO, ,, element, ), ;]
[insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., DO, ,, element, ), ;, parent, ., addChildToBack, (]
[=, createNode, (, Token, ., DO, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[=, createNode, (, Token, ., DO, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[., DO, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformPotentiallyUnwrappedBlock, (]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,]
[node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =]
[element, ., getChild, (, 0, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (]
[(, 0, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;]
[), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (]
[transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,]
[,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;]
[), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;, insertExprResultState, =]
[), ;, insertExprResultState, =, true, ;, }, private, void, transformEmpty, (, JsonML, element, ,, Node, parent, ), {, switch, (]
[), ;, insertExprResultState, =, true, ;, }, private, void, transformEmpty, (, JsonML, element, ,, Node, parent, ), {, switch, (]
[void, transformEmpty, (, JsonML, element, ,, Node, parent, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[void, transformEmpty, (, JsonML, element, ,, Node, parent, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[element, ,, Node, parent, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ARRAYLIT, :]
[element, ,, Node, parent, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ARRAYLIT, :]
[), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ARRAYLIT, :, parent, ., addChildToBack, (]
[), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ARRAYLIT, :, parent, ., addChildToBack, (]
[{, case, Token, ., ARRAYLIT, :, parent, ., addChildToBack, (, IR, ., empty, (, ), ), ;, break, ;, case]
[{, case, Token, ., ARRAYLIT, :, parent, ., addChildToBack, (, IR, ., empty, (, ), ), ;, break, ;, case]
[ARRAYLIT, :, parent, ., addChildToBack, (, IR, ., empty, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :]
[ARRAYLIT, :, parent, ., addChildToBack, (, IR, ., empty, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :]
[addChildToBack, (, IR, ., empty, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :, parent, ., addChildToBack, (]
[addChildToBack, (, IR, ., empty, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :, parent, ., addChildToBack, (]
[empty, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :, parent, ., addChildToBack, (, IR, ., name, (]
[., FUNCTION, :, parent, ., addChildToBack, (, IR, ., name, (, "", ), ), ;, break, ;, default, :, throw]
[parent, ., addChildToBack, (, IR, ., name, (, "", ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[throw, new, IllegalArgumentException, (, "Unexpected Empty element.", ), ;, }, }, private, void, transformEmptyStmt, (, JsonML, element, ,, Node, parent, ), {]
[throw, new, IllegalArgumentException, (, "Unexpected Empty element.", ), ;, }, }, private, void, transformEmptyStmt, (, JsonML, element, ,, Node, parent, ), {]
["Unexpected Empty element.", ), ;, }, }, private, void, transformEmptyStmt, (, JsonML, element, ,, Node, parent, ), {, Preconditions, ., checkState, (]
["Unexpected Empty element.", ), ;, }, }, private, void, transformEmptyStmt, (, JsonML, element, ,, Node, parent, ), {, Preconditions, ., checkState, (]
["Unexpected Empty element.", ), ;, }, }, private, void, transformEmptyStmt, (, JsonML, element, ,, Node, parent, ), {, Preconditions, ., checkState, (]
["Unexpected Empty element.", ), ;, }, }, private, void, transformEmptyStmt, (, JsonML, element, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[void, transformEmptyStmt, (, JsonML, element, ,, Node, parent, ), {, Preconditions, ., checkState, (, parent, ., getType, (, ), ==]
[void, transformEmptyStmt, (, JsonML, element, ,, Node, parent, ), {, Preconditions, ., checkState, (, parent, ., getType, (, ), ==]
[element, ,, Node, parent, ), {, Preconditions, ., checkState, (, parent, ., getType, (, ), ==, Token, ., BLOCK, ||]
[element, ,, Node, parent, ), {, Preconditions, ., checkState, (, parent, ., getType, (, ), ==, Token, ., BLOCK, ||]
[element, ,, Node, parent, ), {, Preconditions, ., checkState, (, parent, ., getType, (, ), ==, Token, ., BLOCK, ||]
[Preconditions, ., checkState, (, parent, ., getType, (, ), ==, Token, ., BLOCK, ||, parent, ., getType, (, ), ==]
[Preconditions, ., checkState, (, parent, ., getType, (, ), ==, Token, ., BLOCK, ||, parent, ., getType, (, ), ==]
[., getType, (, ), ==, Token, ., BLOCK, ||, parent, ., getType, (, ), ==, Token, ., SCRIPT, ), ;]
[., getType, (, ), ==, Token, ., BLOCK, ||, parent, ., getType, (, ), ==, Token, ., SCRIPT, ), ;]
[==, Token, ., BLOCK, ||, parent, ., getType, (, ), ==, Token, ., SCRIPT, ), ;, parent, ., addChildToBack, (]
[==, Token, ., BLOCK, ||, parent, ., getType, (, ), ==, Token, ., SCRIPT, ), ;, parent, ., addChildToBack, (]
[), ), ;, }, private, void, transformEvalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, }, private, void, transformEvalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[;, }, private, void, transformEvalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformEvalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CALL, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CALL, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CALL, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CALL, ,, element, ), ;, node, ., putBooleanProp, (]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CALL, ,, element, ), ;, node, ., putBooleanProp, (]
[Node, node, =, createNode, (, Token, ., CALL, ,, element, ), ;, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[createNode, (, Token, ., CALL, ,, element, ), ;, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[createNode, (, Token, ., CALL, ,, element, ), ;, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[CALL, ,, element, ), ;, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, parent, ., addChildToBack, (]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, child, =]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, child, =]
[., FREE_CALL, ,, true, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, child, =, IR, ., name, (]
[true, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, child, =, IR, ., name, (, "eval", ), ;]
[true, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, child, =, IR, ., name, (, "eval", ), ;]
[., addChildToBack, (, node, ), ;, Node, child, =, IR, ., name, (, "eval", ), ;, child, ., putBooleanProp, (]
[., addChildToBack, (, node, ), ;, Node, child, =, IR, ., name, (, "eval", ), ;, child, ., putBooleanProp, (]
[), ;, Node, child, =, IR, ., name, (, "eval", ), ;, child, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,]
[child, =, IR, ., name, (, "eval", ), ;, child, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;]
[child, =, IR, ., name, (, "eval", ), ;, child, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;]
[name, (, "eval", ), ;, child, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;, node, ., addChildToBack, (]
[), ;, child, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;, node, ., addChildToBack, (, child, ), ;]
[child, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;, node, ., addChildToBack, (, child, ), ;, transformAllChildren, (]
[putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;, node, ., addChildToBack, (, child, ), ;, transformAllChildren, (, element, ,]
[(, element, ,, node, ), ;, }, private, void, transformForInStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, node, ), ;, }, private, void, transformForInStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformForLoop, (]
[), ;, }, private, void, transformForInStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformForLoop, (, element, ,]
[}, private, void, transformForInStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformForLoop, (, element, ,, parent, ,]
[,, parent, ,, 2, ), ;, }, private, void, transformForStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, 2, ), ;, }, private, void, transformForStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformForLoop, (]
[), ;, }, private, void, transformForStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformForLoop, (, element, ,]
[}, private, void, transformForStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformForLoop, (, element, ,, parent, ,]
[}, private, void, transformFunction, (, JsonML, element, ,, Node, parent, ,, boolean, needsName, ), throws, JsonMLException, {, Node, node, =]
[void, transformFunction, (, JsonML, element, ,, Node, parent, ,, boolean, needsName, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[void, transformFunction, (, JsonML, element, ,, Node, parent, ,, boolean, needsName, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[element, ,, Node, parent, ,, boolean, needsName, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., FUNCTION, ,]
[parent, ,, boolean, needsName, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., FUNCTION, ,, element, ), ;]
[parent, ,, boolean, needsName, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., FUNCTION, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., FUNCTION, ,, element, ), ;, parent, ., addChildToBack, (]
[=, createNode, (, Token, ., FUNCTION, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[=, createNode, (, Token, ., FUNCTION, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[., FUNCTION, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, String, name, =]
[addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, String, name, =, "", ;]
[node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, String, name, =, "", ;, transformElement, (]
[node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, String, name, =, "", ;, transformElement, (]
[child, =, element, ., getChild, (, 0, ), ;, String, name, =, "", ;, transformElement, (, element, ., getChild, (]
[., getChild, (, 0, ), ;, String, name, =, "", ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[0, ), ;, String, name, =, "", ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;]
[;, String, name, =, "", ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement, (]
[;, String, name, =, "", ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement, (]
["", ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement, (, element, ., getChild, (]
[(, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement, (, element, ., getChild, (, 1, ), ,]
[getChild, (, 0, ), ,, node, ), ;, transformElement, (, element, ., getChild, (, 1, ), ,, node, ), ;]
[0, ), ,, node, ), ;, transformElement, (, element, ., getChild, (, 1, ), ,, node, ), ;, transformBlock, (]
[,, node, ), ;, transformElement, (, element, ., getChild, (, 1, ), ,, node, ), ;, transformBlock, (, element, ,]
[), ;, transformElement, (, element, ., getChild, (, 1, ), ,, node, ), ;, transformBlock, (, element, ,, node, ,]
[,, node, ,, 2, ), ;, }, private, void, transformFunctionDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, 2, ), ;, }, private, void, transformFunctionDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformFunction, (]
[), ;, }, private, void, transformFunctionDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformFunction, (, element, ,]
[}, private, void, transformFunctionDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformFunction, (, element, ,, parent, ,]
[,, parent, ,, true, ), ;, }, private, void, transformFunctionExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, true, ), ;, }, private, void, transformFunctionExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformFunction, (]
[), ;, }, private, void, transformFunctionExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformFunction, (, element, ,]
[}, private, void, transformFunctionExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformFunction, (, element, ,, parent, ,]
[false, ), ;, }, private, void, transformIdExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, name, =]
[;, }, private, void, transformIdExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, name, =, getStringAttribute, (]
[private, void, transformIdExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, name, =, getStringAttribute, (, element, ,]
[private, void, transformIdExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, name, =, getStringAttribute, (, element, ,]
[parent, ), throws, JsonMLException, {, String, name, =, getStringAttribute, (, element, ,, TagAttr, ., NAME, ), ;, Node, node, =]
[parent, ), throws, JsonMLException, {, String, name, =, getStringAttribute, (, element, ,, TagAttr, ., NAME, ), ;, Node, node, =]
[{, String, name, =, getStringAttribute, (, element, ,, TagAttr, ., NAME, ), ;, Node, node, =, IR, ., name, (]
[=, getStringAttribute, (, element, ,, TagAttr, ., NAME, ), ;, Node, node, =, IR, ., name, (, name, ), ;]
[(, element, ,, TagAttr, ., NAME, ), ;, Node, node, =, IR, ., name, (, name, ), ;, setPosition, (]
[TagAttr, ., NAME, ), ;, Node, node, =, IR, ., name, (, name, ), ;, setPosition, (, node, ), ;]
[TagAttr, ., NAME, ), ;, Node, node, =, IR, ., name, (, name, ), ;, setPosition, (, node, ), ;]
[;, Node, node, =, IR, ., name, (, name, ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (]
[node, ), ;, }, private, void, transformInitPatt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, JsonML, child, =]
[node, ), ;, }, private, void, transformInitPatt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, JsonML, child, =]
[private, void, transformInitPatt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, JsonML, child, =, element, ., getChild, (]
[(, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, JsonML, child, =, element, ., getChild, (, 0, ), ;]
[(, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, JsonML, child, =, element, ., getChild, (, 0, ), ;]
[), throws, JsonMLException, {, JsonML, child, =, element, ., getChild, (, 0, ), ;, nodeIndex, ++, ;, Node, node, =]
[), throws, JsonMLException, {, JsonML, child, =, element, ., getChild, (, 0, ), ;, nodeIndex, ++, ;, Node, node, =]
[JsonML, child, =, element, ., getChild, (, 0, ), ;, nodeIndex, ++, ;, Node, node, =, IR, ., name, (]
[=, element, ., getChild, (, 0, ), ;, nodeIndex, ++, ;, Node, node, =, IR, ., name, (, getAttribute, (]
[., getChild, (, 0, ), ;, nodeIndex, ++, ;, Node, node, =, IR, ., name, (, getAttribute, (, child, ,]
[., getChild, (, 0, ), ;, nodeIndex, ++, ;, Node, node, =, IR, ., name, (, getAttribute, (, child, ,]
[), ;, nodeIndex, ++, ;, Node, node, =, IR, ., name, (, getAttribute, (, child, ,, TagAttr, ., NAME, ,]
[node, =, IR, ., name, (, getAttribute, (, child, ,, TagAttr, ., NAME, ,, String, ., class, ), ), ;]
[IR, ., name, (, getAttribute, (, child, ,, TagAttr, ., NAME, ,, String, ., class, ), ), ;, setPosition, (]
[(, getAttribute, (, child, ,, TagAttr, ., NAME, ,, String, ., class, ), ), ;, setPosition, (, node, ), ;]
[(, getAttribute, (, child, ,, TagAttr, ., NAME, ,, String, ., class, ), ), ;, setPosition, (, node, ), ;]
[,, TagAttr, ., NAME, ,, String, ., class, ), ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (]
[NAME, ,, String, ., class, ), ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;]
[String, ., class, ), ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, child, =]
[String, ., class, ), ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, child, =]
[), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, child, =, element, ., getChild, (]
[(, node, ), ;, parent, ., addChildToBack, (, node, ), ;, child, =, element, ., getChild, (, 1, ), ;]
[), ;, parent, ., addChildToBack, (, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (]
[parent, ., addChildToBack, (, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,]
[node, ), ;, }, private, void, transformIdPatt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[node, ), ;, }, private, void, transformIdPatt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[private, void, transformIdPatt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, IR, ., name, (]
[transformIdPatt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, IR, ., name, (, getStringAttribute, (]
[JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, IR, ., name, (, getStringAttribute, (, element, ,]
[JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, IR, ., name, (, getStringAttribute, (, element, ,]
[throws, JsonMLException, {, Node, node, =, IR, ., name, (, getStringAttribute, (, element, ,, TagAttr, ., NAME, ), ), ;]
[{, Node, node, =, IR, ., name, (, getStringAttribute, (, element, ,, TagAttr, ., NAME, ), ), ;, setPosition, (]
[=, IR, ., name, (, getStringAttribute, (, element, ,, TagAttr, ., NAME, ), ), ;, setPosition, (, node, ), ;]
[=, IR, ., name, (, getStringAttribute, (, element, ,, TagAttr, ., NAME, ), ), ;, setPosition, (, node, ), ;]
[(, getStringAttribute, (, element, ,, TagAttr, ., NAME, ), ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (]
[., addChildToBack, (, node, ), ;, }, private, void, transformIfStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[., addChildToBack, (, node, ), ;, }, private, void, transformIfStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, private, void, transformIfStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[), ;, }, private, void, transformIfStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[}, private, void, transformIfStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==]
[transformIfStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;]
[JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =]
[), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (]
[checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., IF, ,]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., IF, ,, element, ), ;]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., IF, ,, element, ), ;]
[insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., IF, ,, element, ), ;, parent, ., addChildToBack, (]
[=, createNode, (, Token, ., IF, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[=, createNode, (, Token, ., IF, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[., IF, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =]
[element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (]
[(, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;]
[), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (]
[transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,]
[,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;]
[), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =]
[), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =]
[element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (]
[), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 2, ), ;, if, (]
[), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 2, ), ;, if, (]
[), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 2, ), ;, if, (]
[), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 2, ), ;, if, (]
[node, ), ;, child, =, element, ., getChild, (, 2, ), ;, if, (, child, ., getType, (, ), !=]
[node, ), ;, child, =, element, ., getChild, (, 2, ), ;, if, (, child, ., getType, (, ), !=]
[=, element, ., getChild, (, 2, ), ;, if, (, child, ., getType, (, ), !=, TagType, ., EmptyStmt, &&]
[=, element, ., getChild, (, 2, ), ;, if, (, child, ., getType, (, ), !=, TagType, ., EmptyStmt, &&]
[=, element, ., getChild, (, 2, ), ;, if, (, child, ., getType, (, ), !=, TagType, ., EmptyStmt, &&]
[), ;, if, (, child, ., getType, (, ), !=, TagType, ., EmptyStmt, &&, child, ., getType, (, ), !=]
[), ;, if, (, child, ., getType, (, ), !=, TagType, ., EmptyStmt, &&, child, ., getType, (, ), !=]
[., getType, (, ), !=, TagType, ., EmptyStmt, &&, child, ., getType, (, ), !=, TagType, ., Empty, ), {]
[(, ), !=, TagType, ., EmptyStmt, &&, child, ., getType, (, ), !=, TagType, ., Empty, ), {, transformPotentiallyUnwrappedBlock, (]
[!=, TagType, ., EmptyStmt, &&, child, ., getType, (, ), !=, TagType, ., Empty, ), {, transformPotentiallyUnwrappedBlock, (, child, ,]
[., getType, (, ), !=, TagType, ., Empty, ), {, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, }, else, {]
[., getType, (, ), !=, TagType, ., Empty, ), {, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, }, else, {]
[!=, TagType, ., Empty, ), {, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, }, else, {, nodeIndex, ++, ;, }]
[., Empty, ), {, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, }, else, {, nodeIndex, ++, ;, }, insertExprResultState, =]
[=, true, ;, }, private, void, transformInvokeExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, }, private, void, transformInvokeExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[;, }, private, void, transformInvokeExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformInvokeExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CALL, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CALL, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CALL, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., CALL, ,, element, ), ;, parent, ., addChildToBack, (]
[{, Node, node, =, createNode, (, Token, ., CALL, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[node, =, createNode, (, Token, ., CALL, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformMemberExpr, (]
[createNode, (, Token, ., CALL, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformMemberExpr, (, element, ,]
[., CALL, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformMemberExpr, (, element, ,, node, ), ;]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformMemberExpr, (, element, ,, node, ), ;, transformElements, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformMemberExpr, (, element, ,, node, ), ;, transformElements, (]
[parent, ., addChildToBack, (, node, ), ;, transformMemberExpr, (, element, ,, node, ), ;, transformElements, (, element, ., getChildren, (]
[addChildToBack, (, node, ), ;, transformMemberExpr, (, element, ,, node, ), ;, transformElements, (, element, ., getChildren, (, 2, ,]
[addChildToBack, (, node, ), ;, transformMemberExpr, (, element, ,, node, ), ;, transformElements, (, element, ., getChildren, (, 2, ,]
[element, ,, node, ), ;, transformElements, (, element, ., getChildren, (, 2, ,, element, ., childrenSize, (, ), ), ,]
[node, ), ;, }, private, void, transformLabelledStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, label, =]
[;, }, private, void, transformLabelledStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, label, =, getStringAttribute, (]
[private, void, transformLabelledStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, label, =, getStringAttribute, (, element, ,]
[private, void, transformLabelledStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, label, =, getStringAttribute, (, element, ,]
[parent, ), throws, JsonMLException, {, String, label, =, getStringAttribute, (, element, ,, TagAttr, ., LABEL, ), ;, Node, node, =]
[throws, JsonMLException, {, String, label, =, getStringAttribute, (, element, ,, TagAttr, ., LABEL, ), ;, Node, node, =, createNode, (]
[throws, JsonMLException, {, String, label, =, getStringAttribute, (, element, ,, TagAttr, ., LABEL, ), ;, Node, node, =, createNode, (]
[label, =, getStringAttribute, (, element, ,, TagAttr, ., LABEL, ), ;, Node, node, =, createNode, (, Token, ., LABEL, ,]
[(, element, ,, TagAttr, ., LABEL, ), ;, Node, node, =, createNode, (, Token, ., LABEL, ,, element, ), ;]
[(, element, ,, TagAttr, ., LABEL, ), ;, Node, node, =, createNode, (, Token, ., LABEL, ,, element, ), ;]
[., LABEL, ), ;, Node, node, =, createNode, (, Token, ., LABEL, ,, element, ), ;, node, ., addChildToBack, (]
[., LABEL, ), ;, Node, node, =, createNode, (, Token, ., LABEL, ,, element, ), ;, node, ., addChildToBack, (]
[Node, node, =, createNode, (, Token, ., LABEL, ,, element, ), ;, node, ., addChildToBack, (, IR, ., labelName, (]
[(, Token, ., LABEL, ,, element, ), ;, node, ., addChildToBack, (, IR, ., labelName, (, label, ), ), ;]
[(, Token, ., LABEL, ,, element, ), ;, node, ., addChildToBack, (, IR, ., labelName, (, label, ), ), ;]
[,, element, ), ;, node, ., addChildToBack, (, IR, ., labelName, (, label, ), ), ;, parent, ., addChildToBack, (]
[addChildToBack, (, IR, ., labelName, (, label, ), ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[addChildToBack, (, IR, ., labelName, (, label, ), ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[labelName, (, label, ), ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, if, (]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, if, (]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, if, (]
[), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, if, (, child, ., getType, (, ), ==]
[), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, if, (, child, ., getType, (, ), ==]
[element, ., getChild, (, 0, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ), {]
[element, ., getChild, (, 0, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ), {]
[(, 0, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ), {, nodeIndex, ++, ;]
[(, 0, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ), {, nodeIndex, ++, ;]
[if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (]
[if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (]
[EmptyStmt, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {]
[{, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement, (]
[{, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement, (]
[node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement, (, element, ., getChild, (]
[(, IR, ., empty, (, ), ), ;, }, else, {, transformElement, (, element, ., getChild, (, 0, ), ,]
[), ;, }, }, private, void, transformLiteralExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[void, transformLiteralExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, null, ;, Type, type, =]
[void, transformLiteralExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, null, ;, Type, type, =]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, null, ;, Type, type, =, Type, ., get, (]
[Node, parent, ), throws, JsonMLException, {, Node, node, =, null, ;, Type, type, =, Type, ., get, (, getStringAttribute, (]
[), throws, JsonMLException, {, Node, node, =, null, ;, Type, type, =, Type, ., get, (, getStringAttribute, (, element, ,]
[), throws, JsonMLException, {, Node, node, =, null, ;, Type, type, =, Type, ., get, (, getStringAttribute, (, element, ,]
[;, Type, type, =, Type, ., get, (, getStringAttribute, (, element, ,, TagAttr, ., TYPE, ), ), ;, switch, (]
[Type, ., get, (, getStringAttribute, (, element, ,, TagAttr, ., TYPE, ), ), ;, switch, (, type, ), {, case]
[element, ,, TagAttr, ., TYPE, ), ), ;, switch, (, type, ), {, case, BOOLEAN, :, {, Boolean, value, =]
[TagAttr, ., TYPE, ), ), ;, switch, (, type, ), {, case, BOOLEAN, :, {, Boolean, value, =, getAttribute, (]
[TYPE, ), ), ;, switch, (, type, ), {, case, BOOLEAN, :, {, Boolean, value, =, getAttribute, (, element, ,]
[TYPE, ), ), ;, switch, (, type, ), {, case, BOOLEAN, :, {, Boolean, value, =, getAttribute, (, element, ,]
[switch, (, type, ), {, case, BOOLEAN, :, {, Boolean, value, =, getAttribute, (, element, ,, TagAttr, ., VALUE, ,]
[:, {, Boolean, value, =, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Boolean, ., class, ), ;, if, (]
[value, =, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Boolean, ., class, ), ;, if, (, value, ), {]
[getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Boolean, ., class, ), ;, if, (, value, ), {, node, =]
[getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Boolean, ., class, ), ;, if, (, value, ), {, node, =]
[., class, ), ;, if, (, value, ), {, node, =, IR, ., trueNode, (, ), ;, }, else, {]
[), ;, if, (, value, ), {, node, =, IR, ., trueNode, (, ), ;, }, else, {, node, =]
[), ;, if, (, value, ), {, node, =, IR, ., trueNode, (, ), ;, }, else, {, node, =]
[trueNode, (, ), ;, }, else, {, node, =, IR, ., falseNode, (, ), ;, }, break, ;, }, case]
[;, }, else, {, node, =, IR, ., falseNode, (, ), ;, }, break, ;, }, case, NULL, :, {]
[else, {, node, =, IR, ., falseNode, (, ), ;, }, break, ;, }, case, NULL, :, {, getAttribute, (]
[node, =, IR, ., falseNode, (, ), ;, }, break, ;, }, case, NULL, :, {, getAttribute, (, element, ,]
[node, =, IR, ., falseNode, (, ), ;, }, break, ;, }, case, NULL, :, {, getAttribute, (, element, ,]
[falseNode, (, ), ;, }, break, ;, }, case, NULL, :, {, getAttribute, (, element, ,, TagAttr, ., VALUE, ,]
[;, }, break, ;, }, case, NULL, :, {, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, null, ), ;]
[break, ;, }, case, NULL, :, {, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, null, ), ;, node, =]
[break, ;, }, case, NULL, :, {, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, null, ), ;, node, =]
[,, TagAttr, ., VALUE, ,, null, ), ;, node, =, IR, ., nullNode, (, ), ;, break, ;, }, case]
[), ;, node, =, IR, ., nullNode, (, ), ;, break, ;, }, case, NUMBER, :, {, Double, value, =]
[node, =, IR, ., nullNode, (, ), ;, break, ;, }, case, NUMBER, :, {, Double, value, =, getAttribute, (]
[IR, ., nullNode, (, ), ;, break, ;, }, case, NUMBER, :, {, Double, value, =, getAttribute, (, element, ,]
[IR, ., nullNode, (, ), ;, break, ;, }, case, NUMBER, :, {, Double, value, =, getAttribute, (, element, ,]
[), ;, break, ;, }, case, NUMBER, :, {, Double, value, =, getAttribute, (, element, ,, TagAttr, ., VALUE, ,]
[case, NUMBER, :, {, Double, value, =, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Double, ., class, ), ;]
[:, {, Double, value, =, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Double, ., class, ), ;, node, =]
[:, {, Double, value, =, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Double, ., class, ), ;, node, =]
[=, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Double, ., class, ), ;, node, =, IR, ., number, (]
[VALUE, ,, Double, ., class, ), ;, node, =, IR, ., number, (, value, ), ;, break, ;, }, case]
[;, node, =, IR, ., number, (, value, ), ;, break, ;, }, case, STRING, :, {, String, value, =]
[=, IR, ., number, (, value, ), ;, break, ;, }, case, STRING, :, {, String, value, =, getStringAttribute, (]
[., number, (, value, ), ;, break, ;, }, case, STRING, :, {, String, value, =, getStringAttribute, (, element, ,]
[., number, (, value, ), ;, break, ;, }, case, STRING, :, {, String, value, =, getStringAttribute, (, element, ,]
[;, break, ;, }, case, STRING, :, {, String, value, =, getStringAttribute, (, element, ,, TagAttr, ., VALUE, ), ;]
[;, }, case, STRING, :, {, String, value, =, getStringAttribute, (, element, ,, TagAttr, ., VALUE, ), ;, node, =]
[;, }, case, STRING, :, {, String, value, =, getStringAttribute, (, element, ,, TagAttr, ., VALUE, ), ;, node, =]
[:, {, String, value, =, getStringAttribute, (, element, ,, TagAttr, ., VALUE, ), ;, node, =, IR, ., string, (]
[TagAttr, ., VALUE, ), ;, node, =, IR, ., string, (, value, ), ;, break, ;, }, default, :, throw]
[), ;, node, =, IR, ., string, (, value, ), ;, break, ;, }, default, :, throw, new, JsonMLException, (]
[IR, ., string, (, value, ), ;, break, ;, }, default, :, throw, new, JsonMLException, (, "Unrecognized type attribute.", ), ;, }]
[string, (, value, ), ;, break, ;, }, default, :, throw, new, JsonMLException, (, "Unrecognized type attribute.", ), ;, }, setPosition, (]
[), ;, break, ;, }, default, :, throw, new, JsonMLException, (, "Unrecognized type attribute.", ), ;, }, setPosition, (, node, ), ;]
[), ;, break, ;, }, default, :, throw, new, JsonMLException, (, "Unrecognized type attribute.", ), ;, }, setPosition, (, node, ), ;]
[}, default, :, throw, new, JsonMLException, (, "Unrecognized type attribute.", ), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (]
[., addChildToBack, (, node, ), ;, }, private, void, transformLogicalAndExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[(, node, ), ;, }, private, void, transformLogicalAndExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformLogicalExpr, (]
[), ;, }, private, void, transformLogicalAndExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformLogicalExpr, (, element, ,]
[}, private, void, transformLogicalAndExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformLogicalExpr, (, element, ,, parent, ,]
[}, private, void, transformLogicalAndExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformLogicalExpr, (, element, ,, parent, ,]
[,, Token, ., AND, ), ;, }, private, void, transformLogicalOrExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[., AND, ), ;, }, private, void, transformLogicalOrExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformLogicalExpr, (]
[), ;, }, private, void, transformLogicalOrExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformLogicalExpr, (, element, ,]
[}, private, void, transformLogicalOrExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformLogicalExpr, (, element, ,, parent, ,]
[}, private, void, transformLogicalOrExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformLogicalExpr, (, element, ,, parent, ,]
[OR, ), ;, }, private, void, transformMemberExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =]
[;, }, private, void, transformMemberExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getAttribute, (]
[private, void, transformMemberExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getAttribute, (, element, ,]
[private, void, transformMemberExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getAttribute, (, element, ,]
[JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getAttribute, (, element, ,, TagAttr, ., OP, ,]
[op, =, getAttribute, (, element, ,, TagAttr, ., OP, ,, String, ., class, ), ;, int, type, ;, if, (]
[op, =, getAttribute, (, element, ,, TagAttr, ., OP, ,, String, ., class, ), ;, int, type, ;, if, (]
[element, ,, TagAttr, ., OP, ,, String, ., class, ), ;, int, type, ;, if, (, op, ., equals, (]
[OP, ,, String, ., class, ), ;, int, type, ;, if, (, op, ., equals, (, ".", ), ), {]
[String, ., class, ), ;, int, type, ;, if, (, op, ., equals, (, ".", ), ), {, type, =]
[String, ., class, ), ;, int, type, ;, if, (, op, ., equals, (, ".", ), ), {, type, =]
[if, (, op, ., equals, (, ".", ), ), {, type, =, Token, ., GETPROP, ;, }, else, if, (]
[if, (, op, ., equals, (, ".", ), ), {, type, =, Token, ., GETPROP, ;, }, else, if, (]
[equals, (, ".", ), ), {, type, =, Token, ., GETPROP, ;, }, else, if, (, op, ., equals, (]
[), {, type, =, Token, ., GETPROP, ;, }, else, if, (, op, ., equals, (, "[]", ), ), {]
[type, =, Token, ., GETPROP, ;, }, else, if, (, op, ., equals, (, "[]", ), ), {, type, =]
[type, =, Token, ., GETPROP, ;, }, else, if, (, op, ., equals, (, "[]", ), ), {, type, =]
[if, (, op, ., equals, (, "[]", ), ), {, type, =, Token, ., GETELEM, ;, }, else, {, throw]
[., equals, (, "[]", ), ), {, type, =, Token, ., GETELEM, ;, }, else, {, throw, new, JsonMLException, (]
[., equals, (, "[]", ), ), {, type, =, Token, ., GETELEM, ;, }, else, {, throw, new, JsonMLException, (]
[(, "[]", ), ), {, type, =, Token, ., GETELEM, ;, }, else, {, throw, new, JsonMLException, (, "Invalid OP argument: ", +]
[Token, ., GETELEM, ;, }, else, {, throw, new, JsonMLException, (, "Invalid OP argument: ", +, op, ), ;, }, Node, node, =]
[GETELEM, ;, }, else, {, throw, new, JsonMLException, (, "Invalid OP argument: ", +, op, ), ;, }, Node, node, =, createNode, (]
[}, else, {, throw, new, JsonMLException, (, "Invalid OP argument: ", +, op, ), ;, }, Node, node, =, createNode, (, type, ,]
[throw, new, JsonMLException, (, "Invalid OP argument: ", +, op, ), ;, }, Node, node, =, createNode, (, type, ,, element, ), ;]
[throw, new, JsonMLException, (, "Invalid OP argument: ", +, op, ), ;, }, Node, node, =, createNode, (, type, ,, element, ), ;]
["Invalid OP argument: ", +, op, ), ;, }, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (]
[), ;, }, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[}, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (]
[}, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (]
[createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;]
[., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement, (]
[., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement, (]
[), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement, (, element, ., getChild, (]
[(, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement, (, element, ., getChild, (, 1, ), ,]
[node, ), ;, }, private, void, transformNewExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, }, private, void, transformNewExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[;, }, private, void, transformNewExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformNewExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., NEW, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., NEW, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., NEW, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., NEW, ,, element, ), ;, parent, ., addChildToBack, (]
[{, Node, node, =, createNode, (, Token, ., NEW, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[node, =, createNode, (, Token, ., NEW, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (]
[createNode, (, Token, ., NEW, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,]
[node, ), ;, }, private, void, transformObjectExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, }, private, void, transformObjectExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[;, }, private, void, transformObjectExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformObjectExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., OBJECTLIT, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., OBJECTLIT, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., OBJECTLIT, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., OBJECTLIT, ,, element, ), ;, parent, ., addChildToBack, (]
[{, Node, node, =, createNode, (, Token, ., OBJECTLIT, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[node, =, createNode, (, Token, ., OBJECTLIT, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (]
[createNode, (, Token, ., OBJECTLIT, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,]
[node, ), ;, }, private, void, transformParamDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, }, private, void, transformParamDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[;, }, private, void, transformParamDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformParamDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., PARAM_LIST, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., PARAM_LIST, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., PARAM_LIST, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., PARAM_LIST, ,, element, ), ;, parent, ., addChildToBack, (]
[{, Node, node, =, createNode, (, Token, ., PARAM_LIST, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[node, =, createNode, (, Token, ., PARAM_LIST, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (]
[createNode, (, Token, ., PARAM_LIST, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,]
[(, element, ,, node, ), ;, }, private, void, transformProgram, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[(, element, ,, node, ), ;, }, private, void, transformProgram, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, private, void, transformProgram, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkNotNull, (]
[private, void, transformProgram, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkNotNull, (, parent, ), ;]
[transformProgram, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkNotNull, (, parent, ), ;, insertExprResultState, =]
[Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkNotNull, (, parent, ), ;, insertExprResultState, =, true, ;, Node, script, =]
[Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkNotNull, (, parent, ), ;, insertExprResultState, =, true, ;, Node, script, =]
[Preconditions, ., checkNotNull, (, parent, ), ;, insertExprResultState, =, true, ;, Node, script, =, IR, ., script, (, ), ;]
[Preconditions, ., checkNotNull, (, parent, ), ;, insertExprResultState, =, true, ;, Node, script, =, IR, ., script, (, ), ;]
[parent, ), ;, insertExprResultState, =, true, ;, Node, script, =, IR, ., script, (, ), ;, parent, ., addChildToBack, (]
[script, =, IR, ., script, (, ), ;, parent, ., addChildToBack, (, script, ), ;, for, (, JsonML, child, :]
[script, =, IR, ., script, (, ), ;, parent, ., addChildToBack, (, script, ), ;, for, (, JsonML, child, :]
[;, parent, ., addChildToBack, (, script, ), ;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {]
[., addChildToBack, (, script, ), ;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {, transformElement, (]
[(, script, ), ;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {, transformElement, (, child, ,]
[), ;, }, }, private, void, transformPrologueDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, directive, =]
[}, }, private, void, transformPrologueDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, directive, =, getStringAttribute, (]
[private, void, transformPrologueDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, directive, =, getStringAttribute, (, element, ,]
[private, void, transformPrologueDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, directive, =, getStringAttribute, (, element, ,]
[Node, parent, ), throws, JsonMLException, {, String, directive, =, getStringAttribute, (, element, ,, TagAttr, ., DIRECTIVE, ), ;, if, (]
[Node, parent, ), throws, JsonMLException, {, String, directive, =, getStringAttribute, (, element, ,, TagAttr, ., DIRECTIVE, ), ;, if, (]
[JsonMLException, {, String, directive, =, getStringAttribute, (, element, ,, TagAttr, ., DIRECTIVE, ), ;, if, (, ALLOWED_DIRECTIVES, ., contains, (]
[., DIRECTIVE, ), ;, if, (, ALLOWED_DIRECTIVES, ., contains, (, directive, ), ), {, Set, <, String, >, directives, =]
[., DIRECTIVE, ), ;, if, (, ALLOWED_DIRECTIVES, ., contains, (, directive, ), ), {, Set, <, String, >, directives, =]
[contains, (, directive, ), ), {, Set, <, String, >, directives, =, parent, ., getDirectives, (, ), ;, if, (]
[contains, (, directive, ), ), {, Set, <, String, >, directives, =, parent, ., getDirectives, (, ), ;, if, (]
[directive, ), ), {, Set, <, String, >, directives, =, parent, ., getDirectives, (, ), ;, if, (, directives, ==]
[{, Set, <, String, >, directives, =, parent, ., getDirectives, (, ), ;, if, (, directives, ==, null, ), {]
[<, String, >, directives, =, parent, ., getDirectives, (, ), ;, if, (, directives, ==, null, ), {, directives, =]
[<, String, >, directives, =, parent, ., getDirectives, (, ), ;, if, (, directives, ==, null, ), {, directives, =]
[getDirectives, (, ), ;, if, (, directives, ==, null, ), {, directives, =, Sets, ., newHashSet, (, ), ;, }]
[getDirectives, (, ), ;, if, (, directives, ==, null, ), {, directives, =, Sets, ., newHashSet, (, ), ;, }]
[if, (, directives, ==, null, ), {, directives, =, Sets, ., newHashSet, (, ), ;, }, directives, ., add, (]
[==, null, ), {, directives, =, Sets, ., newHashSet, (, ), ;, }, directives, ., add, (, directive, ), ;]
[==, null, ), {, directives, =, Sets, ., newHashSet, (, ), ;, }, directives, ., add, (, directive, ), ;]
[directives, =, Sets, ., newHashSet, (, ), ;, }, directives, ., add, (, directive, ), ;, parent, ., setDirectives, (]
[directives, ., add, (, directive, ), ;, parent, ., setDirectives, (, directives, ), ;, }, else, {, Node, node, =]
[directives, ., add, (, directive, ), ;, parent, ., setDirectives, (, directives, ), ;, }, else, {, Node, node, =]
[directive, ), ;, parent, ., setDirectives, (, directives, ), ;, }, else, {, Node, node, =, IR, ., exprResult, (]
[directive, ), ;, parent, ., setDirectives, (, directives, ), ;, }, else, {, Node, node, =, IR, ., exprResult, (]
[., setDirectives, (, directives, ), ;, }, else, {, Node, node, =, IR, ., exprResult, (, IR, ., string, (]
[), ;, }, else, {, Node, node, =, IR, ., exprResult, (, IR, ., string, (, directive, ), ), ;]
[), ;, }, else, {, Node, node, =, IR, ., exprResult, (, IR, ., string, (, directive, ), ), ;]
[{, Node, node, =, IR, ., exprResult, (, IR, ., string, (, directive, ), ), ;, parent, ., addChildToBack, (]
[), ;, }, }, private, void, transformRegExpExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[}, }, private, void, transformRegExpExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[}, }, private, void, transformRegExpExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformRegExpExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., REGEXP, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., REGEXP, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., REGEXP, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., REGEXP, ,, element, ), ;, parent, ., addChildToBack, (]
[=, createNode, (, Token, ., REGEXP, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, String, body, =]
[(, Token, ., REGEXP, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, String, body, =, getStringAttribute, (]
[., REGEXP, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, String, body, =, getStringAttribute, (, element, ,]
[., REGEXP, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, String, body, =, getStringAttribute, (, element, ,]
[;, parent, ., addChildToBack, (, node, ), ;, String, body, =, getStringAttribute, (, element, ,, TagAttr, ., BODY, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, String, body, =, getStringAttribute, (, element, ,, TagAttr, ., BODY, ), ;]
[(, node, ), ;, String, body, =, getStringAttribute, (, element, ,, TagAttr, ., BODY, ), ;, node, ., addChildToBack, (]
[(, node, ), ;, String, body, =, getStringAttribute, (, element, ,, TagAttr, ., BODY, ), ;, node, ., addChildToBack, (]
[String, body, =, getStringAttribute, (, element, ,, TagAttr, ., BODY, ), ;, node, ., addChildToBack, (, IR, ., string, (]
[TagAttr, ., BODY, ), ;, node, ., addChildToBack, (, IR, ., string, (, body, ), ), ;, String, flags, =]
[BODY, ), ;, node, ., addChildToBack, (, IR, ., string, (, body, ), ), ;, String, flags, =, getStringAttribute, (]
[;, node, ., addChildToBack, (, IR, ., string, (, body, ), ), ;, String, flags, =, getStringAttribute, (, element, ,]
[;, node, ., addChildToBack, (, IR, ., string, (, body, ), ), ;, String, flags, =, getStringAttribute, (, element, ,]
[string, (, body, ), ), ;, String, flags, =, getStringAttribute, (, element, ,, TagAttr, ., FLAGS, ), ;, if, (]
[(, body, ), ), ;, String, flags, =, getStringAttribute, (, element, ,, TagAttr, ., FLAGS, ), ;, if, (, !]
[body, ), ), ;, String, flags, =, getStringAttribute, (, element, ,, TagAttr, ., FLAGS, ), ;, if, (, !, (]
[body, ), ), ;, String, flags, =, getStringAttribute, (, element, ,, TagAttr, ., FLAGS, ), ;, if, (, !, (]
[String, flags, =, getStringAttribute, (, element, ,, TagAttr, ., FLAGS, ), ;, if, (, !, (, flags, ., equals, (]
[element, ,, TagAttr, ., FLAGS, ), ;, if, (, !, (, flags, ., equals, (, "", ), ), ), {]
[element, ,, TagAttr, ., FLAGS, ), ;, if, (, !, (, flags, ., equals, (, "", ), ), ), {]
[FLAGS, ), ;, if, (, !, (, flags, ., equals, (, "", ), ), ), {, node, ., addChildToBack, (]
[FLAGS, ), ;, if, (, !, (, flags, ., equals, (, "", ), ), ), {, node, ., addChildToBack, (]
[(, !, (, flags, ., equals, (, "", ), ), ), {, node, ., addChildToBack, (, IR, ., string, (]
[(, flags, ), ), ;, }, }, private, void, transformReturnStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[(, flags, ), ), ;, }, }, private, void, transformReturnStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[;, }, }, private, void, transformReturnStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[;, }, }, private, void, transformReturnStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[}, private, void, transformReturnStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==]
[element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =]
[Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (]
[Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (, Token, ., RETURN, ,]
[., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (, Token, ., RETURN, ,, element, ), ;]
[., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (, Token, ., RETURN, ,, element, ), ;]
[==, true, ), ;, Node, node, =, createNode, (, Token, ., RETURN, ,, element, ), ;, parent, ., addChildToBack, (]
[node, =, createNode, (, Token, ., RETURN, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, if, (]
[node, =, createNode, (, Token, ., RETURN, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, if, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, if, (, element, ., hasChildren, (, ), ), {]
[), ;, parent, ., addChildToBack, (, node, ), ;, if, (, element, ., hasChildren, (, ), ), {, insertExprResultState, =]
[parent, ., addChildToBack, (, node, ), ;, if, (, element, ., hasChildren, (, ), ), {, insertExprResultState, =, false, ;]
[addChildToBack, (, node, ), ;, if, (, element, ., hasChildren, (, ), ), {, insertExprResultState, =, false, ;, transformElement, (]
[addChildToBack, (, node, ), ;, if, (, element, ., hasChildren, (, ), ), {, insertExprResultState, =, false, ;, transformElement, (]
[;, if, (, element, ., hasChildren, (, ), ), {, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (]
[element, ., hasChildren, (, ), ), {, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[(, ), ), {, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;]
[), {, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, insertExprResultState, =]
[;, insertExprResultState, =, true, ;, }, }, private, void, transformSwitchStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[;, insertExprResultState, =, true, ;, }, }, private, void, transformSwitchStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[;, }, }, private, void, transformSwitchStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[;, }, }, private, void, transformSwitchStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[}, private, void, transformSwitchStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==]
[transformSwitchStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;]
[JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =]
[), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (]
[checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., SWITCH, ,]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., SWITCH, ,, element, ), ;]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., SWITCH, ,, element, ), ;]
[insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., SWITCH, ,, element, ), ;, parent, ., addChildToBack, (]
[=, createNode, (, Token, ., SWITCH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[=, createNode, (, Token, ., SWITCH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[., SWITCH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[=, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, for, (, int, i, =]
[., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, for, (, int, i, =, 1, ;]
[., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, for, (, int, i, =, 1, ;]
[(, 0, ), ;, transformElement, (, child, ,, node, ), ;, for, (, int, i, =, 1, ;, i, <]
[(, 0, ), ;, transformElement, (, child, ,, node, ), ;, for, (, int, i, =, 1, ;, i, <]
[child, ,, node, ), ;, for, (, int, i, =, 1, ;, i, <, element, ., childrenSize, (, ), ;]
[,, node, ), ;, for, (, int, i, =, 1, ;, i, <, element, ., childrenSize, (, ), ;, ++]
[;, for, (, int, i, =, 1, ;, i, <, element, ., childrenSize, (, ), ;, ++, i, ), {]
[(, int, i, =, 1, ;, i, <, element, ., childrenSize, (, ), ;, ++, i, ), {, child, =]
[(, int, i, =, 1, ;, i, <, element, ., childrenSize, (, ), ;, ++, i, ), {, child, =]
[1, ;, i, <, element, ., childrenSize, (, ), ;, ++, i, ), {, child, =, element, ., getChild, (]
[<, element, ., childrenSize, (, ), ;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;]
[., childrenSize, (, ), ;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;, transformElement, (]
[(, ), ;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;, transformElement, (, child, ,]
[i, ), {, child, =, element, ., getChild, (, i, ), ;, transformElement, (, child, ,, node, ), ;, }]
[{, child, =, element, ., getChild, (, i, ), ;, transformElement, (, child, ,, node, ), ;, }, insertExprResultState, =]
[;, }, insertExprResultState, =, true, ;, }, private, void, transformThisExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[;, }, insertExprResultState, =, true, ;, }, private, void, transformThisExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[true, ;, }, private, void, transformThisExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, parent, ., addChildToBack, (]
[}, private, void, transformThisExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, parent, ., addChildToBack, (, createNode, (]
[}, private, void, transformThisExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, parent, ., addChildToBack, (, createNode, (]
[(, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, parent, ., addChildToBack, (, createNode, (, Token, ., THIS, ,]
[THIS, ,, element, ), ), ;, }, private, void, transformThrowStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[THIS, ,, element, ), ), ;, }, private, void, transformThrowStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, private, void, transformThrowStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[), ;, }, private, void, transformThrowStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[}, private, void, transformThrowStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==]
[element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =]
[Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (]
[Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (, Token, ., THROW, ,]
[., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (, Token, ., THROW, ,, element, ), ;]
[., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (, Token, ., THROW, ,, element, ), ;]
[==, true, ), ;, Node, node, =, createNode, (, Token, ., THROW, ,, element, ), ;, parent, ., addChildToBack, (]
[;, Node, node, =, createNode, (, Token, ., THROW, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[node, =, createNode, (, Token, ., THROW, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =]
[createNode, (, Token, ., THROW, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;]
[Token, ., THROW, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, transformElement, (]
[Token, ., THROW, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, transformElement, (]
[element, ), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (]
[parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[(, node, ), ;, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;]
[), ;, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, insertExprResultState, =]
[), ;, insertExprResultState, =, true, ;, }, private, void, transformTryStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, insertExprResultState, =, true, ;, }, private, void, transformTryStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[true, ;, }, private, void, transformTryStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[true, ;, }, private, void, transformTryStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[}, private, void, transformTryStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==]
[element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =]
[Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (]
[Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (, Token, ., TRY, ,]
[., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (, Token, ., TRY, ,, element, ), ;]
[., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (, Token, ., TRY, ,, element, ), ;]
[==, true, ), ;, Node, node, =, createNode, (, Token, ., TRY, ,, element, ), ;, parent, ., addChildToBack, (]
[=, createNode, (, Token, ., TRY, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[=, createNode, (, Token, ., TRY, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[., TRY, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node, block, =]
[JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node, block, =]
[(, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node, block, =, IR, ., block, (, ), ;]
[(, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node, block, =, IR, ., block, (, ), ;]
[transformElement, (, child, ,, node, ), ;, Node, block, =, IR, ., block, (, ), ;, node, ., addChildToBack, (]
[,, node, ), ;, Node, block, =, IR, ., block, (, ), ;, node, ., addChildToBack, (, block, ), ;]
[), ;, Node, block, =, IR, ., block, (, ), ;, node, ., addChildToBack, (, block, ), ;, child, =]
[), ;, Node, block, =, IR, ., block, (, ), ;, node, ., addChildToBack, (, block, ), ;, child, =]
[=, IR, ., block, (, ), ;, node, ., addChildToBack, (, block, ), ;, child, =, element, ., getChild, (]
[), ;, node, ., addChildToBack, (, block, ), ;, child, =, element, ., getChild, (, 1, ), ;, if, (]
[), ;, node, ., addChildToBack, (, block, ), ;, child, =, element, ., getChild, (, 1, ), ;, if, (]
[), ;, node, ., addChildToBack, (, block, ), ;, child, =, element, ., getChild, (, 1, ), ;, if, (]
[block, ), ;, child, =, element, ., getChild, (, 1, ), ;, if, (, child, ., getType, (, ), ==]
[block, ), ;, child, =, element, ., getChild, (, 1, ), ;, if, (, child, ., getType, (, ), ==]
[element, ., getChild, (, 1, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., CatchClause, ), {]
[getChild, (, 1, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., CatchClause, ), {, transformElement, (]
[1, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., CatchClause, ), {, transformElement, (, child, ,]
[., getType, (, ), ==, TagType, ., CatchClause, ), {, transformElement, (, child, ,, block, ), ;, }, else, {]
[., getType, (, ), ==, TagType, ., CatchClause, ), {, transformElement, (, child, ,, block, ), ;, }, else, {]
[., CatchClause, ), {, transformElement, (, child, ,, block, ), ;, }, else, {, nodeIndex, ++, ;, }, if, (]
[., CatchClause, ), {, transformElement, (, child, ,, block, ), ;, }, else, {, nodeIndex, ++, ;, }, if, (]
[., CatchClause, ), {, transformElement, (, child, ,, block, ), ;, }, else, {, nodeIndex, ++, ;, }, if, (]
[child, ,, block, ), ;, }, else, {, nodeIndex, ++, ;, }, if, (, element, ., childrenSize, (, ), ==]
[), ;, }, else, {, nodeIndex, ++, ;, }, if, (, element, ., childrenSize, (, ), ==, 3, ), {]
[}, else, {, nodeIndex, ++, ;, }, if, (, element, ., childrenSize, (, ), ==, 3, ), {, child, =]
[}, else, {, nodeIndex, ++, ;, }, if, (, element, ., childrenSize, (, ), ==, 3, ), {, child, =]
[++, ;, }, if, (, element, ., childrenSize, (, ), ==, 3, ), {, child, =, element, ., getChild, (]
[if, (, element, ., childrenSize, (, ), ==, 3, ), {, child, =, element, ., getChild, (, 2, ), ;]
[element, ., childrenSize, (, ), ==, 3, ), {, child, =, element, ., getChild, (, 2, ), ;, transformElement, (]
[childrenSize, (, ), ==, 3, ), {, child, =, element, ., getChild, (, 2, ), ;, transformElement, (, child, ,]
[), ;, }, }, private, void, transformTypeofExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[}, }, private, void, transformTypeofExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[}, }, private, void, transformTypeofExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformTypeofExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., TYPEOF, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., TYPEOF, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., TYPEOF, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., TYPEOF, ,, element, ), ;, parent, ., addChildToBack, (]
[{, Node, node, =, createNode, (, Token, ., TYPEOF, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[node, =, createNode, (, Token, ., TYPEOF, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (]
[node, =, createNode, (, Token, ., TYPEOF, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (]
[Token, ., TYPEOF, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[node, ), ;, }, private, void, transformUnaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =]
[;, }, private, void, transformUnaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (]
[private, void, transformUnaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,]
[private, void, transformUnaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,]
[parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =]
[parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =]
[{, String, op, =, getStringAttribute, (, element, ,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForUnaryOp, (]
[element, ,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForUnaryOp, (, op, ), ;, Node, node, =]
[TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForUnaryOp, (, op, ), ;, Node, node, =, createNode, (]
[OP, ), ;, int, type, =, Operator, ., getNodeTypeForUnaryOp, (, op, ), ;, Node, node, =, createNode, (, type, ,]
[int, type, =, Operator, ., getNodeTypeForUnaryOp, (, op, ), ;, Node, node, =, createNode, (, type, ,, element, ), ;]
[int, type, =, Operator, ., getNodeTypeForUnaryOp, (, op, ), ;, Node, node, =, createNode, (, type, ,, element, ), ;]
[., getNodeTypeForUnaryOp, (, op, ), ;, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (]
[op, ), ;, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[;, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (]
[node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,]
[node, ), ;, }, private, void, transformVarDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, }, private, void, transformVarDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[;, }, private, void, transformVarDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[transformVarDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., VAR, ,]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., VAR, ,, element, ), ;]
[element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., VAR, ,, element, ), ;]
[), throws, JsonMLException, {, Node, node, =, createNode, (, Token, ., VAR, ,, element, ), ;, parent, ., addChildToBack, (]
[{, Node, node, =, createNode, (, Token, ., VAR, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[node, =, createNode, (, Token, ., VAR, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (]
[createNode, (, Token, ., VAR, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,]
[Token, ., VAR, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ,]
[,, node, ,, false, ), ;, }, private, void, transformWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, node, ,, false, ), ;, }, private, void, transformWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, private, void, transformWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[), ;, }, private, void, transformWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[}, private, void, transformWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==]
[transformWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;]
[JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =]
[), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (]
[checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WHILE, ,]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WHILE, ,, element, ), ;]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WHILE, ,, element, ), ;]
[insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WHILE, ,, element, ), ;, parent, ., addChildToBack, (]
[=, createNode, (, Token, ., WHILE, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[=, createNode, (, Token, ., WHILE, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[., WHILE, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =]
[element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (]
[(, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;]
[), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (]
[transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,]
[,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;]
[), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =]
[), ;, insertExprResultState, =, true, ;, }, private, void, transformWithStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, insertExprResultState, =, true, ;, }, private, void, transformWithStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[true, ;, }, private, void, transformWithStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[true, ;, }, private, void, transformWithStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[}, private, void, transformWithStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==]
[transformWithStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;]
[JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =]
[), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (]
[JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (]
[checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WITH, ,]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WITH, ,, element, ), ;]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WITH, ,, element, ), ;]
[insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WITH, ,, element, ), ;, parent, ., addChildToBack, (]
[=, createNode, (, Token, ., WITH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[=, createNode, (, Token, ., WITH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =]
[., WITH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =]
[element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (]
[(, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;]
[), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (]
[transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,]
[,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;]
[), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =]
[node, ), ;, insertExprResultState, =, true, ;, }, private, Node, createNode, (, int, type, ,, JsonML, element, ), {, return]
[insertExprResultState, =, true, ;, }, private, Node, createNode, (, int, type, ,, JsonML, element, ), {, return, new, Node, (]
[true, ;, }, private, Node, createNode, (, int, type, ,, JsonML, element, ), {, return, new, Node, (, type, ,]
[}, private, Node, createNode, (, int, type, ,, JsonML, element, ), {, return, new, Node, (, type, ,, nodeIndex, ,]
[private, Node, createNode, (, int, type, ,, JsonML, element, ), {, return, new, Node, (, type, ,, nodeIndex, ,, -]
[new, Node, (, type, ,, nodeIndex, ,, -, 1, ), ;, }, private, void, setPosition, (, Node, node, ), {]
[new, Node, (, type, ,, nodeIndex, ,, -, 1, ), ;, }, private, void, setPosition, (, Node, node, ), {]
[,, nodeIndex, ,, -, 1, ), ;, }, private, void, setPosition, (, Node, node, ), {, node, ., setLineno, (]
[VOID, (, "void", ), ;, private, final, String, name, ;, private, static, Map, <, String, ,, Operator, >, lookup, =]
[VOID, (, "void", ), ;, private, final, String, name, ;, private, static, Map, <, String, ,, Operator, >, lookup, =]
[<, String, ,, Operator, >, lookup, =, Maps, ., newHashMap, (, ), ;, static, {, for, (, Operator, op, :]
[<, String, ,, Operator, >, lookup, =, Maps, ., newHashMap, (, ), ;, static, {, for, (, Operator, op, :]
[Maps, ., newHashMap, (, ), ;, static, {, for, (, Operator, op, :, Operator, ., values, (, ), ), {]
[Maps, ., newHashMap, (, ), ;, static, {, for, (, Operator, op, :, Operator, ., values, (, ), ), {]
[), ;, static, {, for, (, Operator, op, :, Operator, ., values, (, ), ), {, lookup, ., put, (]
[), ;, static, {, for, (, Operator, op, :, Operator, ., values, (, ), ), {, lookup, ., put, (]
[Operator, op, :, Operator, ., values, (, ), ), {, lookup, ., put, (, op, ., getName, (, ), ,]
[put, (, op, ., getName, (, ), ,, op, ), ;, }, }, private, String, getName, (, ), {, return]
[put, (, op, ., getName, (, ), ,, op, ), ;, }, }, private, String, getName, (, ), {, return]
[}, private, String, getName, (, ), {, return, this, ., name, ;, }, private, Operator, (, String, name, ), {]
[}, private, String, getName, (, ), {, return, this, ., name, ;, }, private, Operator, (, String, name, ), {]
[(, ), {, return, this, ., name, ;, }, private, Operator, (, String, name, ), {, this, ., name, =]
[name, ), {, this, ., name, =, name, ;, }, private, static, Operator, get, (, String, name, ), {, return]
[name, ), {, this, ., name, =, name, ;, }, private, static, Operator, get, (, String, name, ), {, return]
[., name, =, name, ;, }, private, static, Operator, get, (, String, name, ), {, return, lookup, ., get, (]
[lookup, ., get, (, name, ), ;, }, private, static, int, getNodeTypeForAssignOp, (, String, name, ), {, Operator, op, =]
[get, (, name, ), ;, }, private, static, int, getNodeTypeForAssignOp, (, String, name, ), {, Operator, op, =, get, (]
[}, private, static, int, getNodeTypeForAssignOp, (, String, name, ), {, Operator, op, =, get, (, name, ), ;, if, (]
[}, private, static, int, getNodeTypeForAssignOp, (, String, name, ), {, Operator, op, =, get, (, name, ), ;, if, (]
[static, int, getNodeTypeForAssignOp, (, String, name, ), {, Operator, op, =, get, (, name, ), ;, if, (, op, ==]
[String, name, ), {, Operator, op, =, get, (, name, ), ;, if, (, op, ==, null, ), {, return]
[String, name, ), {, Operator, op, =, get, (, name, ), ;, if, (, op, ==, null, ), {, return]
[), ;, if, (, op, ==, null, ), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (]
[op, ==, null, ), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case]
[null, ), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, ASSIGN, :]
[{, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, ASSIGN, :, type, =]
[{, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, ASSIGN, :, type, =]
[int, type, ;, switch, (, op, ), {, case, ASSIGN, :, type, =, Token, ., ASSIGN, ;, break, ;, case]
[;, switch, (, op, ), {, case, ASSIGN, :, type, =, Token, ., ASSIGN, ;, break, ;, case, ASSIGN_BITOR, :]
[(, op, ), {, case, ASSIGN, :, type, =, Token, ., ASSIGN, ;, break, ;, case, ASSIGN_BITOR, :, type, =]
[(, op, ), {, case, ASSIGN, :, type, =, Token, ., ASSIGN, ;, break, ;, case, ASSIGN_BITOR, :, type, =]
[type, =, Token, ., ASSIGN, ;, break, ;, case, ASSIGN_BITOR, :, type, =, Token, ., ASSIGN_BITOR, ;, break, ;, case]
[Token, ., ASSIGN, ;, break, ;, case, ASSIGN_BITOR, :, type, =, Token, ., ASSIGN_BITOR, ;, break, ;, case, ASSIGN_BITXOR, :]
[ASSIGN, ;, break, ;, case, ASSIGN_BITOR, :, type, =, Token, ., ASSIGN_BITOR, ;, break, ;, case, ASSIGN_BITXOR, :, type, =]
[ASSIGN, ;, break, ;, case, ASSIGN_BITOR, :, type, =, Token, ., ASSIGN_BITOR, ;, break, ;, case, ASSIGN_BITXOR, :, type, =]
[type, =, Token, ., ASSIGN_BITOR, ;, break, ;, case, ASSIGN_BITXOR, :, type, =, Token, ., ASSIGN_BITXOR, ;, break, ;, case]
[Token, ., ASSIGN_BITOR, ;, break, ;, case, ASSIGN_BITXOR, :, type, =, Token, ., ASSIGN_BITXOR, ;, break, ;, case, ASSIGN_BITAND, :]
[ASSIGN_BITOR, ;, break, ;, case, ASSIGN_BITXOR, :, type, =, Token, ., ASSIGN_BITXOR, ;, break, ;, case, ASSIGN_BITAND, :, type, =]
[ASSIGN_BITOR, ;, break, ;, case, ASSIGN_BITXOR, :, type, =, Token, ., ASSIGN_BITXOR, ;, break, ;, case, ASSIGN_BITAND, :, type, =]
[type, =, Token, ., ASSIGN_BITXOR, ;, break, ;, case, ASSIGN_BITAND, :, type, =, Token, ., ASSIGN_BITAND, ;, break, ;, case]
[Token, ., ASSIGN_BITXOR, ;, break, ;, case, ASSIGN_BITAND, :, type, =, Token, ., ASSIGN_BITAND, ;, break, ;, case, ASSIGN_LSH, :]
[ASSIGN_BITXOR, ;, break, ;, case, ASSIGN_BITAND, :, type, =, Token, ., ASSIGN_BITAND, ;, break, ;, case, ASSIGN_LSH, :, type, =]
[ASSIGN_BITXOR, ;, break, ;, case, ASSIGN_BITAND, :, type, =, Token, ., ASSIGN_BITAND, ;, break, ;, case, ASSIGN_LSH, :, type, =]
[type, =, Token, ., ASSIGN_BITAND, ;, break, ;, case, ASSIGN_LSH, :, type, =, Token, ., ASSIGN_LSH, ;, break, ;, case]
[Token, ., ASSIGN_BITAND, ;, break, ;, case, ASSIGN_LSH, :, type, =, Token, ., ASSIGN_LSH, ;, break, ;, case, ASSIGN_RSH, :]
[ASSIGN_BITAND, ;, break, ;, case, ASSIGN_LSH, :, type, =, Token, ., ASSIGN_LSH, ;, break, ;, case, ASSIGN_RSH, :, type, =]
[ASSIGN_BITAND, ;, break, ;, case, ASSIGN_LSH, :, type, =, Token, ., ASSIGN_LSH, ;, break, ;, case, ASSIGN_RSH, :, type, =]
[type, =, Token, ., ASSIGN_LSH, ;, break, ;, case, ASSIGN_RSH, :, type, =, Token, ., ASSIGN_RSH, ;, break, ;, case]
[Token, ., ASSIGN_LSH, ;, break, ;, case, ASSIGN_RSH, :, type, =, Token, ., ASSIGN_RSH, ;, break, ;, case, ASSIGN_URSH, :]
[ASSIGN_LSH, ;, break, ;, case, ASSIGN_RSH, :, type, =, Token, ., ASSIGN_RSH, ;, break, ;, case, ASSIGN_URSH, :, type, =]
[ASSIGN_LSH, ;, break, ;, case, ASSIGN_RSH, :, type, =, Token, ., ASSIGN_RSH, ;, break, ;, case, ASSIGN_URSH, :, type, =]
[type, =, Token, ., ASSIGN_RSH, ;, break, ;, case, ASSIGN_URSH, :, type, =, Token, ., ASSIGN_URSH, ;, break, ;, case]
[Token, ., ASSIGN_RSH, ;, break, ;, case, ASSIGN_URSH, :, type, =, Token, ., ASSIGN_URSH, ;, break, ;, case, ASSIGN_ADD, :]
[ASSIGN_RSH, ;, break, ;, case, ASSIGN_URSH, :, type, =, Token, ., ASSIGN_URSH, ;, break, ;, case, ASSIGN_ADD, :, type, =]
[ASSIGN_RSH, ;, break, ;, case, ASSIGN_URSH, :, type, =, Token, ., ASSIGN_URSH, ;, break, ;, case, ASSIGN_ADD, :, type, =]
[type, =, Token, ., ASSIGN_URSH, ;, break, ;, case, ASSIGN_ADD, :, type, =, Token, ., ASSIGN_ADD, ;, break, ;, case]
[Token, ., ASSIGN_URSH, ;, break, ;, case, ASSIGN_ADD, :, type, =, Token, ., ASSIGN_ADD, ;, break, ;, case, ASSIGN_SUB, :]
[ASSIGN_URSH, ;, break, ;, case, ASSIGN_ADD, :, type, =, Token, ., ASSIGN_ADD, ;, break, ;, case, ASSIGN_SUB, :, type, =]
[ASSIGN_URSH, ;, break, ;, case, ASSIGN_ADD, :, type, =, Token, ., ASSIGN_ADD, ;, break, ;, case, ASSIGN_SUB, :, type, =]
[type, =, Token, ., ASSIGN_ADD, ;, break, ;, case, ASSIGN_SUB, :, type, =, Token, ., ASSIGN_SUB, ;, break, ;, case]
[Token, ., ASSIGN_ADD, ;, break, ;, case, ASSIGN_SUB, :, type, =, Token, ., ASSIGN_SUB, ;, break, ;, case, ASSIGN_MUL, :]
[ASSIGN_ADD, ;, break, ;, case, ASSIGN_SUB, :, type, =, Token, ., ASSIGN_SUB, ;, break, ;, case, ASSIGN_MUL, :, type, =]
[ASSIGN_ADD, ;, break, ;, case, ASSIGN_SUB, :, type, =, Token, ., ASSIGN_SUB, ;, break, ;, case, ASSIGN_MUL, :, type, =]
[type, =, Token, ., ASSIGN_SUB, ;, break, ;, case, ASSIGN_MUL, :, type, =, Token, ., ASSIGN_MUL, ;, break, ;, case]
[Token, ., ASSIGN_SUB, ;, break, ;, case, ASSIGN_MUL, :, type, =, Token, ., ASSIGN_MUL, ;, break, ;, case, ASSIGN_DIV, :]
[ASSIGN_SUB, ;, break, ;, case, ASSIGN_MUL, :, type, =, Token, ., ASSIGN_MUL, ;, break, ;, case, ASSIGN_DIV, :, type, =]
[ASSIGN_SUB, ;, break, ;, case, ASSIGN_MUL, :, type, =, Token, ., ASSIGN_MUL, ;, break, ;, case, ASSIGN_DIV, :, type, =]
[type, =, Token, ., ASSIGN_MUL, ;, break, ;, case, ASSIGN_DIV, :, type, =, Token, ., ASSIGN_DIV, ;, break, ;, case]
[Token, ., ASSIGN_MUL, ;, break, ;, case, ASSIGN_DIV, :, type, =, Token, ., ASSIGN_DIV, ;, break, ;, case, ASSIGN_MOD, :]
[ASSIGN_MUL, ;, break, ;, case, ASSIGN_DIV, :, type, =, Token, ., ASSIGN_DIV, ;, break, ;, case, ASSIGN_MOD, :, type, =]
[ASSIGN_MUL, ;, break, ;, case, ASSIGN_DIV, :, type, =, Token, ., ASSIGN_DIV, ;, break, ;, case, ASSIGN_MOD, :, type, =]
[Token, ., ASSIGN_DIV, ;, break, ;, case, ASSIGN_MOD, :, type, =, Token, ., ASSIGN_MOD, ;, break, ;, default, :, throw]
[;, break, ;, case, ASSIGN_MOD, :, type, =, Token, ., ASSIGN_MOD, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[;, break, ;, case, ASSIGN_MOD, :, type, =, Token, ., ASSIGN_MOD, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[;, case, ASSIGN_MOD, :, type, =, Token, ., ASSIGN_MOD, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +]
[=, Token, ., ASSIGN_MOD, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of assign expression.", ), ;, }, return]
["Invalid type of assign expression.", ), ;, }, return, type, ;, }, private, static, int, getNodeTypeForBinaryOp, (, String, name, ), {, Operator, op, =]
[;, }, return, type, ;, }, private, static, int, getNodeTypeForBinaryOp, (, String, name, ), {, Operator, op, =, get, (]
[int, getNodeTypeForBinaryOp, (, String, name, ), {, Operator, op, =, get, (, name, ), ;, int, type, ;, switch, (]
[name, ), {, Operator, op, =, get, (, name, ), ;, int, type, ;, switch, (, op, ), {, case]
[{, Operator, op, =, get, (, name, ), ;, int, type, ;, switch, (, op, ), {, case, BITOR, :]
[op, =, get, (, name, ), ;, int, type, ;, switch, (, op, ), {, case, BITOR, :, type, =]
[op, =, get, (, name, ), ;, int, type, ;, switch, (, op, ), {, case, BITOR, :, type, =]
[int, type, ;, switch, (, op, ), {, case, BITOR, :, type, =, Token, ., BITOR, ;, break, ;, case]
[;, switch, (, op, ), {, case, BITOR, :, type, =, Token, ., BITOR, ;, break, ;, case, BITXOR, :]
[(, op, ), {, case, BITOR, :, type, =, Token, ., BITOR, ;, break, ;, case, BITXOR, :, type, =]
[(, op, ), {, case, BITOR, :, type, =, Token, ., BITOR, ;, break, ;, case, BITXOR, :, type, =]
[type, =, Token, ., BITOR, ;, break, ;, case, BITXOR, :, type, =, Token, ., BITXOR, ;, break, ;, case]
[Token, ., BITOR, ;, break, ;, case, BITXOR, :, type, =, Token, ., BITXOR, ;, break, ;, case, BITAND, :]
[BITOR, ;, break, ;, case, BITXOR, :, type, =, Token, ., BITXOR, ;, break, ;, case, BITAND, :, type, =]
[BITOR, ;, break, ;, case, BITXOR, :, type, =, Token, ., BITXOR, ;, break, ;, case, BITAND, :, type, =]
[type, =, Token, ., BITXOR, ;, break, ;, case, BITAND, :, type, =, Token, ., BITAND, ;, break, ;, case]
[Token, ., BITXOR, ;, break, ;, case, BITAND, :, type, =, Token, ., BITAND, ;, break, ;, case, EQ, :]
[BITXOR, ;, break, ;, case, BITAND, :, type, =, Token, ., BITAND, ;, break, ;, case, EQ, :, type, =]
[BITXOR, ;, break, ;, case, BITAND, :, type, =, Token, ., BITAND, ;, break, ;, case, EQ, :, type, =]
[type, =, Token, ., BITAND, ;, break, ;, case, EQ, :, type, =, Token, ., EQ, ;, break, ;, case]
[Token, ., BITAND, ;, break, ;, case, EQ, :, type, =, Token, ., EQ, ;, break, ;, case, NE, :]
[BITAND, ;, break, ;, case, EQ, :, type, =, Token, ., EQ, ;, break, ;, case, NE, :, type, =]
[BITAND, ;, break, ;, case, EQ, :, type, =, Token, ., EQ, ;, break, ;, case, NE, :, type, =]
[type, =, Token, ., EQ, ;, break, ;, case, NE, :, type, =, Token, ., NE, ;, break, ;, case]
[Token, ., EQ, ;, break, ;, case, NE, :, type, =, Token, ., NE, ;, break, ;, case, LT, :]
[EQ, ;, break, ;, case, NE, :, type, =, Token, ., NE, ;, break, ;, case, LT, :, type, =]
[EQ, ;, break, ;, case, NE, :, type, =, Token, ., NE, ;, break, ;, case, LT, :, type, =]
[type, =, Token, ., NE, ;, break, ;, case, LT, :, type, =, Token, ., LT, ;, break, ;, case]
[Token, ., NE, ;, break, ;, case, LT, :, type, =, Token, ., LT, ;, break, ;, case, LE, :]
[NE, ;, break, ;, case, LT, :, type, =, Token, ., LT, ;, break, ;, case, LE, :, type, =]
[NE, ;, break, ;, case, LT, :, type, =, Token, ., LT, ;, break, ;, case, LE, :, type, =]
[type, =, Token, ., LT, ;, break, ;, case, LE, :, type, =, Token, ., LE, ;, break, ;, case]
[Token, ., LT, ;, break, ;, case, LE, :, type, =, Token, ., LE, ;, break, ;, case, GT, :]
[LT, ;, break, ;, case, LE, :, type, =, Token, ., LE, ;, break, ;, case, GT, :, type, =]
[LT, ;, break, ;, case, LE, :, type, =, Token, ., LE, ;, break, ;, case, GT, :, type, =]
[type, =, Token, ., LE, ;, break, ;, case, GT, :, type, =, Token, ., GT, ;, break, ;, case]
[Token, ., LE, ;, break, ;, case, GT, :, type, =, Token, ., GT, ;, break, ;, case, GE, :]
[LE, ;, break, ;, case, GT, :, type, =, Token, ., GT, ;, break, ;, case, GE, :, type, =]
[LE, ;, break, ;, case, GT, :, type, =, Token, ., GT, ;, break, ;, case, GE, :, type, =]
[type, =, Token, ., GT, ;, break, ;, case, GE, :, type, =, Token, ., GE, ;, break, ;, case]
[Token, ., GT, ;, break, ;, case, GE, :, type, =, Token, ., GE, ;, break, ;, case, LSH, :]
[GT, ;, break, ;, case, GE, :, type, =, Token, ., GE, ;, break, ;, case, LSH, :, type, =]
[GT, ;, break, ;, case, GE, :, type, =, Token, ., GE, ;, break, ;, case, LSH, :, type, =]
[type, =, Token, ., GE, ;, break, ;, case, LSH, :, type, =, Token, ., LSH, ;, break, ;, case]
[Token, ., GE, ;, break, ;, case, LSH, :, type, =, Token, ., LSH, ;, break, ;, case, RSH, :]
[GE, ;, break, ;, case, LSH, :, type, =, Token, ., LSH, ;, break, ;, case, RSH, :, type, =]
[GE, ;, break, ;, case, LSH, :, type, =, Token, ., LSH, ;, break, ;, case, RSH, :, type, =]
[type, =, Token, ., LSH, ;, break, ;, case, RSH, :, type, =, Token, ., RSH, ;, break, ;, case]
[Token, ., LSH, ;, break, ;, case, RSH, :, type, =, Token, ., RSH, ;, break, ;, case, URSH, :]
[LSH, ;, break, ;, case, RSH, :, type, =, Token, ., RSH, ;, break, ;, case, URSH, :, type, =]
[LSH, ;, break, ;, case, RSH, :, type, =, Token, ., RSH, ;, break, ;, case, URSH, :, type, =]
[type, =, Token, ., RSH, ;, break, ;, case, URSH, :, type, =, Token, ., URSH, ;, break, ;, case]
[Token, ., RSH, ;, break, ;, case, URSH, :, type, =, Token, ., URSH, ;, break, ;, case, ADD, :]
[RSH, ;, break, ;, case, URSH, :, type, =, Token, ., URSH, ;, break, ;, case, ADD, :, type, =]
[RSH, ;, break, ;, case, URSH, :, type, =, Token, ., URSH, ;, break, ;, case, ADD, :, type, =]
[type, =, Token, ., URSH, ;, break, ;, case, ADD, :, type, =, Token, ., ADD, ;, break, ;, case]
[Token, ., URSH, ;, break, ;, case, ADD, :, type, =, Token, ., ADD, ;, break, ;, case, SUB, :]
[URSH, ;, break, ;, case, ADD, :, type, =, Token, ., ADD, ;, break, ;, case, SUB, :, type, =]
[URSH, ;, break, ;, case, ADD, :, type, =, Token, ., ADD, ;, break, ;, case, SUB, :, type, =]
[type, =, Token, ., ADD, ;, break, ;, case, SUB, :, type, =, Token, ., SUB, ;, break, ;, case]
[Token, ., ADD, ;, break, ;, case, SUB, :, type, =, Token, ., SUB, ;, break, ;, case, MUL, :]
[ADD, ;, break, ;, case, SUB, :, type, =, Token, ., SUB, ;, break, ;, case, MUL, :, type, =]
[ADD, ;, break, ;, case, SUB, :, type, =, Token, ., SUB, ;, break, ;, case, MUL, :, type, =]
[type, =, Token, ., SUB, ;, break, ;, case, MUL, :, type, =, Token, ., MUL, ;, break, ;, case]
[Token, ., SUB, ;, break, ;, case, MUL, :, type, =, Token, ., MUL, ;, break, ;, case, DIV, :]
[SUB, ;, break, ;, case, MUL, :, type, =, Token, ., MUL, ;, break, ;, case, DIV, :, type, =]
[SUB, ;, break, ;, case, MUL, :, type, =, Token, ., MUL, ;, break, ;, case, DIV, :, type, =]
[type, =, Token, ., MUL, ;, break, ;, case, DIV, :, type, =, Token, ., DIV, ;, break, ;, case]
[Token, ., MUL, ;, break, ;, case, DIV, :, type, =, Token, ., DIV, ;, break, ;, case, MOD, :]
[MUL, ;, break, ;, case, DIV, :, type, =, Token, ., DIV, ;, break, ;, case, MOD, :, type, =]
[MUL, ;, break, ;, case, DIV, :, type, =, Token, ., DIV, ;, break, ;, case, MOD, :, type, =]
[type, =, Token, ., DIV, ;, break, ;, case, MOD, :, type, =, Token, ., MOD, ;, break, ;, case]
[Token, ., DIV, ;, break, ;, case, MOD, :, type, =, Token, ., MOD, ;, break, ;, case, SHEQ, :]
[DIV, ;, break, ;, case, MOD, :, type, =, Token, ., MOD, ;, break, ;, case, SHEQ, :, type, =]
[DIV, ;, break, ;, case, MOD, :, type, =, Token, ., MOD, ;, break, ;, case, SHEQ, :, type, =]
[type, =, Token, ., MOD, ;, break, ;, case, SHEQ, :, type, =, Token, ., SHEQ, ;, break, ;, case]
[Token, ., MOD, ;, break, ;, case, SHEQ, :, type, =, Token, ., SHEQ, ;, break, ;, case, SHNE, :]
[MOD, ;, break, ;, case, SHEQ, :, type, =, Token, ., SHEQ, ;, break, ;, case, SHNE, :, type, =]
[MOD, ;, break, ;, case, SHEQ, :, type, =, Token, ., SHEQ, ;, break, ;, case, SHNE, :, type, =]
[type, =, Token, ., SHEQ, ;, break, ;, case, SHNE, :, type, =, Token, ., SHNE, ;, break, ;, case]
[Token, ., SHEQ, ;, break, ;, case, SHNE, :, type, =, Token, ., SHNE, ;, break, ;, case, COMMA, :]
[SHEQ, ;, break, ;, case, SHNE, :, type, =, Token, ., SHNE, ;, break, ;, case, COMMA, :, type, =]
[SHEQ, ;, break, ;, case, SHNE, :, type, =, Token, ., SHNE, ;, break, ;, case, COMMA, :, type, =]
[type, =, Token, ., SHNE, ;, break, ;, case, COMMA, :, type, =, Token, ., COMMA, ;, break, ;, case]
[Token, ., SHNE, ;, break, ;, case, COMMA, :, type, =, Token, ., COMMA, ;, break, ;, case, INSTANCEOF, :]
[SHNE, ;, break, ;, case, COMMA, :, type, =, Token, ., COMMA, ;, break, ;, case, INSTANCEOF, :, type, =]
[SHNE, ;, break, ;, case, COMMA, :, type, =, Token, ., COMMA, ;, break, ;, case, INSTANCEOF, :, type, =]
[type, =, Token, ., COMMA, ;, break, ;, case, INSTANCEOF, :, type, =, Token, ., INSTANCEOF, ;, break, ;, case]
[Token, ., COMMA, ;, break, ;, case, INSTANCEOF, :, type, =, Token, ., INSTANCEOF, ;, break, ;, case, IN, :]
[COMMA, ;, break, ;, case, INSTANCEOF, :, type, =, Token, ., INSTANCEOF, ;, break, ;, case, IN, :, type, =]
[COMMA, ;, break, ;, case, INSTANCEOF, :, type, =, Token, ., INSTANCEOF, ;, break, ;, case, IN, :, type, =]
[Token, ., INSTANCEOF, ;, break, ;, case, IN, :, type, =, Token, ., IN, ;, break, ;, default, :, throw]
[;, break, ;, case, IN, :, type, =, Token, ., IN, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[;, break, ;, case, IN, :, type, =, Token, ., IN, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[;, case, IN, :, type, =, Token, ., IN, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +]
[=, Token, ., IN, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of binary expression.", ), ;, }, return]
["Invalid type of binary expression.", ), ;, }, return, type, ;, }, private, static, int, getNodeTypeForCountOp, (, String, name, ), {, Operator, op, =]
[;, }, return, type, ;, }, private, static, int, getNodeTypeForCountOp, (, String, name, ), {, Operator, op, =, get, (]
[}, private, static, int, getNodeTypeForCountOp, (, String, name, ), {, Operator, op, =, get, (, name, ), ;, if, (]
[}, private, static, int, getNodeTypeForCountOp, (, String, name, ), {, Operator, op, =, get, (, name, ), ;, if, (]
[static, int, getNodeTypeForCountOp, (, String, name, ), {, Operator, op, =, get, (, name, ), ;, if, (, op, ==]
[String, name, ), {, Operator, op, =, get, (, name, ), ;, if, (, op, ==, null, ), {, return]
[String, name, ), {, Operator, op, =, get, (, name, ), ;, if, (, op, ==, null, ), {, return]
[), ;, if, (, op, ==, null, ), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (]
[op, ==, null, ), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case]
[null, ), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, DEC, :]
[{, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, DEC, :, type, =]
[{, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, DEC, :, type, =]
[int, type, ;, switch, (, op, ), {, case, DEC, :, type, =, Token, ., DEC, ;, break, ;, case]
[;, switch, (, op, ), {, case, DEC, :, type, =, Token, ., DEC, ;, break, ;, case, INC, :]
[(, op, ), {, case, DEC, :, type, =, Token, ., DEC, ;, break, ;, case, INC, :, type, =]
[(, op, ), {, case, DEC, :, type, =, Token, ., DEC, ;, break, ;, case, INC, :, type, =]
[Token, ., DEC, ;, break, ;, case, INC, :, type, =, Token, ., INC, ;, break, ;, default, :, throw]
[;, break, ;, case, INC, :, type, =, Token, ., INC, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[;, break, ;, case, INC, :, type, =, Token, ., INC, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[;, case, INC, :, type, =, Token, ., INC, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +]
[=, Token, ., INC, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of count expression.", ), ;, }, return]
["Invalid type of count expression.", ), ;, }, return, type, ;, }, private, static, int, getNodeTypeForUnaryOp, (, String, name, ), {, String, realName, =]
[}, return, type, ;, }, private, static, int, getNodeTypeForUnaryOp, (, String, name, ), {, String, realName, =, new, String, (]
[private, static, int, getNodeTypeForUnaryOp, (, String, name, ), {, String, realName, =, new, String, (, name, ), ;, if, (]
[private, static, int, getNodeTypeForUnaryOp, (, String, name, ), {, String, realName, =, new, String, (, name, ), ;, if, (]
[private, static, int, getNodeTypeForUnaryOp, (, String, name, ), {, String, realName, =, new, String, (, name, ), ;, if, (]
[(, String, name, ), {, String, realName, =, new, String, (, name, ), ;, if, (, name, ., equals, (]
[), {, String, realName, =, new, String, (, name, ), ;, if, (, name, ., equals, (, "+", ), ||]
[), {, String, realName, =, new, String, (, name, ), ;, if, (, name, ., equals, (, "+", ), ||]
[=, new, String, (, name, ), ;, if, (, name, ., equals, (, "+", ), ||, name, ., equals, (]
[name, ), ;, if, (, name, ., equals, (, "+", ), ||, name, ., equals, (, "-", ), ), {]
[;, if, (, name, ., equals, (, "+", ), ||, name, ., equals, (, "-", ), ), {, realName, +=]
[(, "+", ), ||, name, ., equals, (, "-", ), ), {, realName, +=, "_unary", ;, }, Operator, op, =]
[), ||, name, ., equals, (, "-", ), ), {, realName, +=, "_unary", ;, }, Operator, op, =, get, (]
[), {, realName, +=, "_unary", ;, }, Operator, op, =, get, (, realName, ), ;, int, type, ;, switch, (]
["_unary", ;, }, Operator, op, =, get, (, realName, ), ;, int, type, ;, switch, (, op, ), {, case]
[}, Operator, op, =, get, (, realName, ), ;, int, type, ;, switch, (, op, ), {, case, NOT, :]
[op, =, get, (, realName, ), ;, int, type, ;, switch, (, op, ), {, case, NOT, :, type, =]
[op, =, get, (, realName, ), ;, int, type, ;, switch, (, op, ), {, case, NOT, :, type, =]
[int, type, ;, switch, (, op, ), {, case, NOT, :, type, =, Token, ., NOT, ;, break, ;, case]
[;, switch, (, op, ), {, case, NOT, :, type, =, Token, ., NOT, ;, break, ;, case, BITNOT, :]
[(, op, ), {, case, NOT, :, type, =, Token, ., NOT, ;, break, ;, case, BITNOT, :, type, =]
[(, op, ), {, case, NOT, :, type, =, Token, ., NOT, ;, break, ;, case, BITNOT, :, type, =]
[type, =, Token, ., NOT, ;, break, ;, case, BITNOT, :, type, =, Token, ., BITNOT, ;, break, ;, case]
[Token, ., NOT, ;, break, ;, case, BITNOT, :, type, =, Token, ., BITNOT, ;, break, ;, case, POS, :]
[NOT, ;, break, ;, case, BITNOT, :, type, =, Token, ., BITNOT, ;, break, ;, case, POS, :, type, =]
[NOT, ;, break, ;, case, BITNOT, :, type, =, Token, ., BITNOT, ;, break, ;, case, POS, :, type, =]
[type, =, Token, ., BITNOT, ;, break, ;, case, POS, :, type, =, Token, ., POS, ;, break, ;, case]
[Token, ., BITNOT, ;, break, ;, case, POS, :, type, =, Token, ., POS, ;, break, ;, case, NEG, :]
[BITNOT, ;, break, ;, case, POS, :, type, =, Token, ., POS, ;, break, ;, case, NEG, :, type, =]
[BITNOT, ;, break, ;, case, POS, :, type, =, Token, ., POS, ;, break, ;, case, NEG, :, type, =]
[type, =, Token, ., POS, ;, break, ;, case, NEG, :, type, =, Token, ., NEG, ;, break, ;, case]
[Token, ., POS, ;, break, ;, case, NEG, :, type, =, Token, ., NEG, ;, break, ;, case, VOID, :]
[POS, ;, break, ;, case, NEG, :, type, =, Token, ., NEG, ;, break, ;, case, VOID, :, type, =]
[POS, ;, break, ;, case, NEG, :, type, =, Token, ., NEG, ;, break, ;, case, VOID, :, type, =]
[Token, ., NEG, ;, break, ;, case, VOID, :, type, =, Token, ., VOID, ;, break, ;, default, :, throw]
[;, break, ;, case, VOID, :, type, =, Token, ., VOID, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[;, break, ;, case, VOID, :, type, =, Token, ., VOID, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[;, case, VOID, :, type, =, Token, ., VOID, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +]
[=, Token, ., VOID, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of unary expression.", ), ;, }, return]
[setPosition, (, Node, node, ), {, node, ., setLineno, (, nodeIndex, ), ;, }, private, enum, Operator, {, ASSIGN, (]
[{, node, ., setLineno, (, nodeIndex, ), ;, }, private, enum, Operator, {, ASSIGN, (, "=", ), ,, ASSIGN_BITOR, (]
[nodeIndex, ), ;, }, private, enum, Operator, {, ASSIGN, (, "=", ), ,, ASSIGN_BITOR, (, "|=", ), ,, ASSIGN_BITXOR, (]
[enum, Operator, {, ASSIGN, (, "=", ), ,, ASSIGN_BITOR, (, "|=", ), ,, ASSIGN_BITXOR, (, "^=", ), ,, ASSIGN_BITAND, (]
["=", ), ,, ASSIGN_BITOR, (, "|=", ), ,, ASSIGN_BITXOR, (, "^=", ), ,, ASSIGN_BITAND, (, "&=", ), ,, ASSIGN_LSH, (]
["|=", ), ,, ASSIGN_BITXOR, (, "^=", ), ,, ASSIGN_BITAND, (, "&=", ), ,, ASSIGN_LSH, (, "<<=", ), ,, ASSIGN_RSH, (]
["^=", ), ,, ASSIGN_BITAND, (, "&=", ), ,, ASSIGN_LSH, (, "<<=", ), ,, ASSIGN_RSH, (, ">>=", ), ,, ASSIGN_URSH, (]
["&=", ), ,, ASSIGN_LSH, (, "<<=", ), ,, ASSIGN_RSH, (, ">>=", ), ,, ASSIGN_URSH, (, ">>>=", ), ,, ASSIGN_ADD, (]
["<<=", ), ,, ASSIGN_RSH, (, ">>=", ), ,, ASSIGN_URSH, (, ">>>=", ), ,, ASSIGN_ADD, (, "+=", ), ,, ASSIGN_SUB, (]
[">>=", ), ,, ASSIGN_URSH, (, ">>>=", ), ,, ASSIGN_ADD, (, "+=", ), ,, ASSIGN_SUB, (, "-=", ), ,, ASSIGN_MUL, (]
[">>>=", ), ,, ASSIGN_ADD, (, "+=", ), ,, ASSIGN_SUB, (, "-=", ), ,, ASSIGN_MUL, (, "*=", ), ,, ASSIGN_DIV, (]
["+=", ), ,, ASSIGN_SUB, (, "-=", ), ,, ASSIGN_MUL, (, "*=", ), ,, ASSIGN_DIV, (, "/=", ), ,, ASSIGN_MOD, (]
["-=", ), ,, ASSIGN_MUL, (, "*=", ), ,, ASSIGN_DIV, (, "/=", ), ,, ASSIGN_MOD, (, "%=", ), ,, BITOR, (]
["*=", ), ,, ASSIGN_DIV, (, "/=", ), ,, ASSIGN_MOD, (, "%=", ), ,, BITOR, (, "|", ), ,, BITXOR, (]
["/=", ), ,, ASSIGN_MOD, (, "%=", ), ,, BITOR, (, "|", ), ,, BITXOR, (, "^", ), ,, BITAND, (]
["%=", ), ,, BITOR, (, "|", ), ,, BITXOR, (, "^", ), ,, BITAND, (, "&", ), ,, EQ, (]
["|", ), ,, BITXOR, (, "^", ), ,, BITAND, (, "&", ), ,, EQ, (, "==", ), ,, NE, (]
["^", ), ,, BITAND, (, "&", ), ,, EQ, (, "==", ), ,, NE, (, "!=", ), ,, LT, (]
["&", ), ,, EQ, (, "==", ), ,, NE, (, "!=", ), ,, LT, (, "<", ), ,, LE, (]
["==", ), ,, NE, (, "!=", ), ,, LT, (, "<", ), ,, LE, (, "<=", ), ,, GT, (]
["!=", ), ,, LT, (, "<", ), ,, LE, (, "<=", ), ,, GT, (, ">", ), ,, GE, (]
["<", ), ,, LE, (, "<=", ), ,, GT, (, ">", ), ,, GE, (, ">=", ), ,, LSH, (]
["<=", ), ,, GT, (, ">", ), ,, GE, (, ">=", ), ,, LSH, (, "<<", ), ,, RSH, (]
[">", ), ,, GE, (, ">=", ), ,, LSH, (, "<<", ), ,, RSH, (, ">>", ), ,, URSH, (]
[">=", ), ,, LSH, (, "<<", ), ,, RSH, (, ">>", ), ,, URSH, (, ">>>", ), ,, ADD, (]
["<<", ), ,, RSH, (, ">>", ), ,, URSH, (, ">>>", ), ,, ADD, (, "+", ), ,, SUB, (]
[">>", ), ,, URSH, (, ">>>", ), ,, ADD, (, "+", ), ,, SUB, (, "-", ), ,, MUL, (]
[">>>", ), ,, ADD, (, "+", ), ,, SUB, (, "-", ), ,, MUL, (, "*", ), ,, DIV, (]
["+", ), ,, SUB, (, "-", ), ,, MUL, (, "*", ), ,, DIV, (, "/", ), ,, MOD, (]
["-", ), ,, MUL, (, "*", ), ,, DIV, (, "/", ), ,, MOD, (, "%", ), ,, SHEQ, (]
["*", ), ,, DIV, (, "/", ), ,, MOD, (, "%", ), ,, SHEQ, (, "===", ), ,, SHNE, (]
["/", ), ,, MOD, (, "%", ), ,, SHEQ, (, "===", ), ,, SHNE, (, "!==", ), ,, COMMA, (]
["%", ), ,, SHEQ, (, "===", ), ,, SHNE, (, "!==", ), ,, COMMA, (, ",", ), ,, INSTANCEOF, (]
["===", ), ,, SHNE, (, "!==", ), ,, COMMA, (, ",", ), ,, INSTANCEOF, (, "instanceof", ), ,, IN, (]
["!==", ), ,, COMMA, (, ",", ), ,, INSTANCEOF, (, "instanceof", ), ,, IN, (, "in", ), ,, DEC, (]
[",", ), ,, INSTANCEOF, (, "instanceof", ), ,, IN, (, "in", ), ,, DEC, (, "--", ), ,, INC, (]
["instanceof", ), ,, IN, (, "in", ), ,, DEC, (, "--", ), ,, INC, (, "++", ), ,, NOT, (]
["in", ), ,, DEC, (, "--", ), ,, INC, (, "++", ), ,, NOT, (, "!", ), ,, BITNOT, (]
["--", ), ,, INC, (, "++", ), ,, NOT, (, "!", ), ,, BITNOT, (, "~", ), ,, POS, (]
["++", ), ,, NOT, (, "!", ), ,, BITNOT, (, "~", ), ,, POS, (, "+_unary", ), ,, NEG, (]
["!", ), ,, BITNOT, (, "~", ), ,, POS, (, "+_unary", ), ,, NEG, (, "-_unary", ), ,, VOID, (]
[STRING, (, "string", ), ;, private, final, String, name, ;, private, static, Map, <, String, ,, Type, >, lookup, =]
[>, lookup, =, new, HashMap, <, String, ,, Type, >, (, ), ;, static, {, for, (, Type, type, :]
[>, lookup, =, new, HashMap, <, String, ,, Type, >, (, ), ;, static, {, for, (, Type, type, :]
[,, Type, >, (, ), ;, static, {, for, (, Type, type, :, Type, ., values, (, ), ), {]
[,, Type, >, (, ), ;, static, {, for, (, Type, type, :, Type, ., values, (, ), ), {]
[), ;, static, {, for, (, Type, type, :, Type, ., values, (, ), ), {, lookup, ., put, (]
[), ;, static, {, for, (, Type, type, :, Type, ., values, (, ), ), {, lookup, ., put, (]
[Type, type, :, Type, ., values, (, ), ), {, lookup, ., put, (, type, ., getName, (, ), ,]
[put, (, type, ., getName, (, ), ,, type, ), ;, }, }, private, String, getName, (, ), {, return]
[put, (, type, ., getName, (, ), ,, type, ), ;, }, }, private, String, getName, (, ), {, return]
[}, private, String, getName, (, ), {, return, this, ., name, ;, }, private, Type, (, String, name, ), {]
[}, private, String, getName, (, ), {, return, this, ., name, ;, }, private, Type, (, String, name, ), {]
[(, ), {, return, this, ., name, ;, }, private, Type, (, String, name, ), {, this, ., name, =]
[name, ), {, this, ., name, =, name, ;, }, private, static, Type, get, (, String, name, ), {, return]
[name, ), {, this, ., name, =, name, ;, }, private, static, Type, get, (, String, name, ), {, return]
[., name, =, name, ;, }, private, static, Type, get, (, String, name, ), {, return, lookup, ., get, (]
[new, IllegalArgumentException, (, "", +, "Invalid type of unary expression.", ), ;, }, return, type, ;, }, }, private, enum, Type, {, BOOLEAN, (]
["Invalid type of unary expression.", ), ;, }, return, type, ;, }, }, private, enum, Type, {, BOOLEAN, (, "boolean", ), ,, NULL, (]
[type, ;, }, }, private, enum, Type, {, BOOLEAN, (, "boolean", ), ,, NULL, (, "null", ), ,, NUMBER, (]
[enum, Type, {, BOOLEAN, (, "boolean", ), ,, NULL, (, "null", ), ,, NUMBER, (, "number", ), ,, STRING, (]
