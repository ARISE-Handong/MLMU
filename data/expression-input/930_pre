[int, numTrials, ;, public, MultiKMeansPlusPlusClusterer, (, final, KMeansPlusPlusClusterer, <, T, >, clusterer, ,, final, int, numTrials, ), {, super, (]
[int, numTrials, ;, public, MultiKMeansPlusPlusClusterer, (, final, KMeansPlusPlusClusterer, <, T, >, clusterer, ,, final, int, numTrials, ), {, super, (]
[KMeansPlusPlusClusterer, <, T, >, clusterer, ,, final, int, numTrials, ), {, super, (, clusterer, ., getDistanceMeasure, (, ), ), ;]
[KMeansPlusPlusClusterer, <, T, >, clusterer, ,, final, int, numTrials, ), {, super, (, clusterer, ., getDistanceMeasure, (, ), ), ;]
[clusterer, ,, final, int, numTrials, ), {, super, (, clusterer, ., getDistanceMeasure, (, ), ), ;, this, ., clusterer, =]
[final, int, numTrials, ), {, super, (, clusterer, ., getDistanceMeasure, (, ), ), ;, this, ., clusterer, =, clusterer, ;]
[final, int, numTrials, ), {, super, (, clusterer, ., getDistanceMeasure, (, ), ), ;, this, ., clusterer, =, clusterer, ;]
[{, super, (, clusterer, ., getDistanceMeasure, (, ), ), ;, this, ., clusterer, =, clusterer, ;, this, ., numTrials, =]
[=, clusterer, ;, this, ., numTrials, =, numTrials, ;, }, public, KMeansPlusPlusClusterer, <, T, >, getClusterer, (, ), {, return]
[public, KMeansPlusPlusClusterer, <, T, >, getClusterer, (, ), {, return, clusterer, ;, }, public, int, getNumTrials, (, ), {, return]
[Collection, <, T, >, points, ), throws, MathIllegalArgumentException, ,, ConvergenceException, {, List, <, CentroidCluster, <, T, >, >, best, =]
[), throws, MathIllegalArgumentException, ,, ConvergenceException, {, List, <, CentroidCluster, <, T, >, >, best, =, null, ;, double, bestVarianceSum, =]
[), throws, MathIllegalArgumentException, ,, ConvergenceException, {, List, <, CentroidCluster, <, T, >, >, best, =, null, ;, double, bestVarianceSum, =]
[<, T, >, >, best, =, null, ;, double, bestVarianceSum, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =]
[>, >, best, =, null, ;, double, bestVarianceSum, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;]
[>, >, best, =, null, ;, double, bestVarianceSum, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;]
[best, =, null, ;, double, bestVarianceSum, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;, i, <]
[null, ;, double, bestVarianceSum, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;, i, <, numTrials, ;]
[;, double, bestVarianceSum, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;, i, <, numTrials, ;, ++]
[=, 0, ;, i, <, numTrials, ;, ++, i, ), {, List, <, CentroidCluster, <, T, >, >, clusters, =]
[=, 0, ;, i, <, numTrials, ;, ++, i, ), {, List, <, CentroidCluster, <, T, >, >, clusters, =]
[<, numTrials, ;, ++, i, ), {, List, <, CentroidCluster, <, T, >, >, clusters, =, clusterer, ., cluster, (]
[{, List, <, CentroidCluster, <, T, >, >, clusters, =, clusterer, ., cluster, (, points, ), ;, double, varianceSum, =]
[., cluster, (, points, ), ;, double, varianceSum, =, 0.0, ;, for, (, final, CentroidCluster, <, T, >, cluster, :]
[;, double, varianceSum, =, 0.0, ;, for, (, final, CentroidCluster, <, T, >, cluster, :, clusters, ), {, if, (]
[double, varianceSum, =, 0.0, ;, for, (, final, CentroidCluster, <, T, >, cluster, :, clusters, ), {, if, (, !]
[double, varianceSum, =, 0.0, ;, for, (, final, CentroidCluster, <, T, >, cluster, :, clusters, ), {, if, (, !]
[double, varianceSum, =, 0.0, ;, for, (, final, CentroidCluster, <, T, >, cluster, :, clusters, ), {, if, (, !]
[), {, if, (, !, cluster, ., getPoints, (, ), ., isEmpty, (, ), ), {, final, Clusterable, center, =]
[), {, if, (, !, cluster, ., getPoints, (, ), ., isEmpty, (, ), ), {, final, Clusterable, center, =]
[., isEmpty, (, ), ), {, final, Clusterable, center, =, cluster, ., getCenter, (, ), ;, final, Variance, stat, =]
[., getCenter, (, ), ;, final, Variance, stat, =, new, Variance, (, ), ;, for, (, final, T, point, :]
[., getCenter, (, ), ;, final, Variance, stat, =, new, Variance, (, ), ;, for, (, final, T, point, :]
[stat, =, new, Variance, (, ), ;, for, (, final, T, point, :, cluster, ., getPoints, (, ), ), {]
[stat, =, new, Variance, (, ), ;, for, (, final, T, point, :, cluster, ., getPoints, (, ), ), {]
[(, ), ;, for, (, final, T, point, :, cluster, ., getPoints, (, ), ), {, stat, ., increment, (]
[;, for, (, final, T, point, :, cluster, ., getPoints, (, ), ), {, stat, ., increment, (, distance, (]
[(, final, T, point, :, cluster, ., getPoints, (, ), ), {, stat, ., increment, (, distance, (, point, ,]
[cluster, ., getPoints, (, ), ), {, stat, ., increment, (, distance, (, point, ,, center, ), ), ;, }]
[getPoints, (, ), ), {, stat, ., increment, (, distance, (, point, ,, center, ), ), ;, }, varianceSum, +=]
[getPoints, (, ), ), {, stat, ., increment, (, distance, (, point, ,, center, ), ), ;, }, varianceSum, +=]
[(, point, ,, center, ), ), ;, }, varianceSum, +=, stat, ., getResult, (, ), ;, }, }, if, (]
[(, point, ,, center, ), ), ;, }, varianceSum, +=, stat, ., getResult, (, ), ;, }, }, if, (]
[,, center, ), ), ;, }, varianceSum, +=, stat, ., getResult, (, ), ;, }, }, if, (, varianceSum, <=]
[), ;, }, varianceSum, +=, stat, ., getResult, (, ), ;, }, }, if, (, varianceSum, <=, bestVarianceSum, ), {]
[}, varianceSum, +=, stat, ., getResult, (, ), ;, }, }, if, (, varianceSum, <=, bestVarianceSum, ), {, best, =]
[+=, stat, ., getResult, (, ), ;, }, }, if, (, varianceSum, <=, bestVarianceSum, ), {, best, =, clusters, ;]
[., getResult, (, ), ;, }, }, if, (, varianceSum, <=, bestVarianceSum, ), {, best, =, clusters, ;, bestVarianceSum, =]
[}, }, if, (, varianceSum, <=, bestVarianceSum, ), {, best, =, clusters, ;, bestVarianceSum, =, varianceSum, ;, }, }, return]
