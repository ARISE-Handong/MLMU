[MultiStartMultivariateVectorOptimizer, extends, BaseMultiStartMultivariateOptimizer, <, PointVectorValuePair, >, {, private, final, MultivariateVectorOptimizer, optimizer, ;, private, final, List, <, PointVectorValuePair, >, optima, =]
[(, final, MultivariateVectorOptimizer, optimizer, ,, final, int, starts, ,, final, RandomVectorGenerator, generator, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, {, super, (]
[MultivariateVectorOptimizer, optimizer, ,, final, int, starts, ,, final, RandomVectorGenerator, generator, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, {, super, (, optimizer, ,]
[,, final, int, starts, ,, final, RandomVectorGenerator, generator, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, {, super, (, optimizer, ,, starts, ,]
[starts, ,, final, RandomVectorGenerator, generator, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, {, super, (, optimizer, ,, starts, ,, generator, ), ;]
[starts, ,, final, RandomVectorGenerator, generator, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, {, super, (, optimizer, ,, starts, ,, generator, ), ;]
[generator, ), throws, NullArgumentException, ,, NotStrictlyPositiveException, {, super, (, optimizer, ,, starts, ,, generator, ), ;, this, ., optimizer, =]
[generator, ), ;, this, ., optimizer, =, optimizer, ;, }, @, Override, public, PointVectorValuePair, [, ], getOptima, (, ), {]
[generator, ), ;, this, ., optimizer, =, optimizer, ;, }, @, Override, public, PointVectorValuePair, [, ], getOptima, (, ), {]
[., optimizer, =, optimizer, ;, }, @, Override, public, PointVectorValuePair, [, ], getOptima, (, ), {, Collections, ., sort, (]
[=, optimizer, ;, }, @, Override, public, PointVectorValuePair, [, ], getOptima, (, ), {, Collections, ., sort, (, optima, ,]
[public, PointVectorValuePair, [, ], getOptima, (, ), {, Collections, ., sort, (, optima, ,, getPairComparator, (, ), ), ;, return]
[public, PointVectorValuePair, [, ], getOptima, (, ), {, Collections, ., sort, (, optima, ,, getPairComparator, (, ), ), ;, return]
[getOptima, (, ), {, Collections, ., sort, (, optima, ,, getPairComparator, (, ), ), ;, return, optima, ., toArray, (]
[{, Collections, ., sort, (, optima, ,, getPairComparator, (, ), ), ;, return, optima, ., toArray, (, new, PointVectorValuePair, []
[toArray, (, new, PointVectorValuePair, [, 0, ], ), ;, }, @, Override, protected, void, store, (, PointVectorValuePair, optimum, ), {]
[toArray, (, new, PointVectorValuePair, [, 0, ], ), ;, }, @, Override, protected, void, store, (, PointVectorValuePair, optimum, ), {]
[[, 0, ], ), ;, }, @, Override, protected, void, store, (, PointVectorValuePair, optimum, ), {, optima, ., add, (]
[PointVectorValuePair, optimum, ), {, optima, ., add, (, optimum, ), ;, }, @, Override, protected, void, clear, (, ), {]
[PointVectorValuePair, optimum, ), {, optima, ., add, (, optimum, ), ;, }, @, Override, protected, void, clear, (, ), {]
[(, ), {, optima, ., clear, (, ), ;, }, private, Comparator, <, PointVectorValuePair, >, getPairComparator, (, ), {, return]
[PointVectorValuePair, >, getPairComparator, (, ), {, return, new, Comparator, <, PointVectorValuePair, >, (, ), {, private, final, RealVector, target, =]
[(, ), {, return, new, Comparator, <, PointVectorValuePair, >, (, ), {, private, final, RealVector, target, =, new, ArrayRealVector, (]
[(, ), {, return, new, Comparator, <, PointVectorValuePair, >, (, ), {, private, final, RealVector, target, =, new, ArrayRealVector, (]
[<, PointVectorValuePair, >, (, ), {, private, final, RealVector, target, =, new, ArrayRealVector, (, optimizer, ., getTarget, (, ), ,]
[RealVector, target, =, new, ArrayRealVector, (, optimizer, ., getTarget, (, ), ,, false, ), ;, private, final, RealMatrix, weight, =]
[RealVector, target, =, new, ArrayRealVector, (, optimizer, ., getTarget, (, ), ,, false, ), ;, private, final, RealMatrix, weight, =]
[., getWeight, (, ), ;, public, int, compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (]
[., getWeight, (, ), ;, public, int, compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (]
[(, ), ;, public, int, compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==]
[int, compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return]
[int, compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return]
[compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (]
[compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (]
[final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (, o2, ==]
[,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (, o2, ==, null, ), ?]
[PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (, o2, ==, null, ), ?, 0, :]
[o1, ==, null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (]
[o1, ==, null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (]
[null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==]
[(, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return]
[o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -]
[?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return]
[?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return]
[;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return, Double, ., compare, (]
[else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return, Double, ., compare, (, weightedResidual, (]
[o2, ==, null, ), {, return, -, 1, ;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,]
[null, ), {, return, -, 1, ;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,, weightedResidual, (]
[weightedResidual, (, o2, ), ), ;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, RealVector, v, =]
[), ), ;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, RealVector, v, =, new, ArrayRealVector, (]
[), ), ;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, RealVector, v, =, new, ArrayRealVector, (]
[weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, RealVector, v, =, new, ArrayRealVector, (, pv, ., getValueRef, (, ), ,]
[final, RealVector, v, =, new, ArrayRealVector, (, pv, ., getValueRef, (, ), ,, false, ), ;, final, RealVector, r, =]
[final, RealVector, v, =, new, ArrayRealVector, (, pv, ., getValueRef, (, ), ,, false, ), ;, final, RealVector, r, =]
[new, ArrayRealVector, (, pv, ., getValueRef, (, ), ,, false, ), ;, final, RealVector, r, =, target, ., subtract, (]
[., getValueRef, (, ), ,, false, ), ;, final, RealVector, r, =, target, ., subtract, (, v, ), ;, return]
[., getValueRef, (, ), ,, false, ), ;, final, RealVector, r, =, target, ., subtract, (, v, ), ;, return]
[,, false, ), ;, final, RealVector, r, =, target, ., subtract, (, v, ), ;, return, r, ., dotProduct, (]
[,, false, ), ;, final, RealVector, r, =, target, ., subtract, (, v, ), ;, return, r, ., dotProduct, (]
[final, RealVector, r, =, target, ., subtract, (, v, ), ;, return, r, ., dotProduct, (, weight, ., operate, (]
