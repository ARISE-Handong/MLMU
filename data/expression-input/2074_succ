[;, private, NumberFormat, wholeFormat, ;, public, ProperFractionFormat, (, ), {, this, (, getDefaultNumberFormat, (, ), ), ;, }, public, ProperFractionFormat]
[), ;, }, public, ProperFractionFormat, (, NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, ), format, ., clone]
[,, (, NumberFormat, ), format, ., clone, (, ), ,, (, NumberFormat, ), format, ., clone, (, ), ), ;]
[,, (, NumberFormat, ), format, ., clone, (, ), ), ;, }, public, ProperFractionFormat, (, NumberFormat, wholeFormat, ,, NumberFormat, numeratorFormat]
[,, (, NumberFormat, ), format, ., clone, (, ), ), ;, }, public, ProperFractionFormat, (, NumberFormat, wholeFormat, ,, NumberFormat, numeratorFormat]
[., clone, (, ), ,, (, NumberFormat, ), format, ., clone, (, ), ), ;, }, public, ProperFractionFormat, (, NumberFormat]
[), ;, }, public, ProperFractionFormat, (, NumberFormat, wholeFormat, ,, NumberFormat, numeratorFormat, ,, NumberFormat, denominatorFormat, ), {, super, (, numeratorFormat, ,]
[), ;, }, public, ProperFractionFormat, (, NumberFormat, wholeFormat, ,, NumberFormat, numeratorFormat, ,, NumberFormat, denominatorFormat, ), {, super, (, numeratorFormat, ,]
[., clone, (, ), ), ;, }, public, ProperFractionFormat, (, NumberFormat, wholeFormat, ,, NumberFormat, numeratorFormat, ,, NumberFormat, denominatorFormat, ), {]
[,, denominatorFormat, ), ;, setWholeFormat, (, wholeFormat, ), ;, }, @, Override, public, StringBuffer, format, (, Fraction, fraction, ,, StringBuffer]
[), ;, setWholeFormat, (, wholeFormat, ), ;, }, @, Override, public, StringBuffer, format, (, Fraction, fraction, ,, StringBuffer, toAppendTo, ,]
[;, }, @, Override, public, StringBuffer, format, (, Fraction, fraction, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, pos, .]
[), ;, }, @, Override, public, StringBuffer, format, (, Fraction, fraction, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, pos]
[;, pos, ., setEndIndex, (, 0, ), ;, int, num, =, fraction, ., getNumerator, (, ), ;, int, den, =]
[., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;, int, num, =, fraction, ., getNumerator, (]
[), ;, pos, ., setEndIndex, (, 0, ), ;, int, num, =, fraction, ., getNumerator, (, ), ;, int, den]
[;, int, num, =, fraction, ., getNumerator, (, ), ;, int, den, =, fraction, ., getDenominator, (, ), ;, int]
[., setEndIndex, (, 0, ), ;, int, num, =, fraction, ., getNumerator, (, ), ;, int, den, =, fraction, .]
[), ;, int, num, =, fraction, ., getNumerator, (, ), ;, int, den, =, fraction, ., getDenominator, (, ), ;]
[;, int, den, =, fraction, ., getDenominator, (, ), ;, int, whole, =, num, /, den, ;, num, =, num]
[., getNumerator, (, ), ;, int, den, =, fraction, ., getDenominator, (, ), ;, int, whole, =, num, /, den]
[;, int, whole, =, num, /, den, ;, num, =, num, %, den, ;, if, (, whole, !=, 0, )]
[., getDenominator, (, ), ;, int, whole, =, num, /, den, ;, num, =, num, %, den, ;, if, (]
[;, num, =, num, %, den, ;, if, (, whole, !=, 0, ), {, getWholeFormat, (, ), ., format, (]
[/, den, ;, num, =, num, %, den, ;, if, (, whole, !=, 0, ), {, getWholeFormat, (, ), .]
[;, num, =, num, %, den, ;, if, (, whole, !=, 0, ), {, getWholeFormat, (, ), ., format, (]
[=, num, %, den, ;, if, (, whole, !=, 0, ), {, getWholeFormat, (, ), ., format, (, whole, ,]
[;, if, (, whole, !=, 0, ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, )]
[%, den, ;, if, (, whole, !=, 0, ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,]
[;, if, (, whole, !=, 0, ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, )]
[), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ']
[!=, 0, ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append]
[), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ']
[;, toAppendTo, ., append, (, ' ', ), ;, num, =, Math, ., abs, (, num, ), ;, }, getNumeratorFormat, (]
[., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, num, =, Math]
[,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, num, =, Math, ., abs, (, num]
[,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, num, =, Math, ., abs, (, num, ), ;]
[), ;, toAppendTo, ., append, (, ' ', ), ;, num, =, Math, ., abs, (, num, ), ;, }, getNumeratorFormat]
[;, num, =, Math, ., abs, (, num, ), ;, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo]
[., append, (, ' ', ), ;, num, =, Math, ., abs, (, num, ), ;, }, getNumeratorFormat, (, ), .]
[), ;, num, =, Math, ., abs, (, num, ), ;, }, getNumeratorFormat, (, ), ., format, (, num, ,]
[=, Math, ., abs, (, num, ), ;, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos]
[;, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / "]
[., abs, (, num, ), ;, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;]
[), ;, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (]
[;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,, pos, )]
[., format, (, num, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, )]
[,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den]
[,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo]
[), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,, pos]
[;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, public, NumberFormat]
[., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,, pos, ), ;, return]
[), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, public]
[;, return, toAppendTo, ;, }, public, NumberFormat, getWholeFormat, (, ), {, return, wholeFormat, ;, }, @, Override, public, Fraction, parse]
[., format, (, den, ,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, public, NumberFormat, getWholeFormat, (, ), {]
[,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, public, NumberFormat, getWholeFormat, (, ), {, return, wholeFormat, ;, }]
[,, pos, ), ;, return, toAppendTo, ;, }, public, NumberFormat, getWholeFormat, (, ), {, return, wholeFormat, ;, }, @, Override]
[), ;, return, toAppendTo, ;, }, public, NumberFormat, getWholeFormat, (, ), {, return, wholeFormat, ;, }, @, Override, public, Fraction]
[;, }, public, NumberFormat, getWholeFormat, (, ), {, return, wholeFormat, ;, }, @, Override, public, Fraction, parse, (, String, source]
[;, }, @, Override, public, Fraction, parse, (, String, source, ,, ParsePosition, pos, ), {, Fraction, ret, =, super, .]
[;, if, (, ret, !=, null, ), {, return, ret, ;, }, int, initialIndex, =, pos, ., getIndex, (, )]
[., parse, (, source, ,, pos, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, int]
[,, pos, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, int, initialIndex, =, pos, .]
[), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, int, initialIndex, =, pos, ., getIndex, (]
[), {, return, ret, ;, }, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos]
[!=, null, ), {, return, ret, ;, }, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source]
[), {, return, ret, ;, }, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos]
[;, }, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, whole]
[;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, whole, =, getWholeFormat, (, ), ., parse, (, source, ,, pos]
[., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, whole, =, getWholeFormat, (, ), ., parse]
[;, Number, whole, =, getWholeFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, whole, ==, null]
[,, pos, ), ;, Number, whole, =, getWholeFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (]
[), ;, Number, whole, =, getWholeFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, whole, ==]
[;, if, (, whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace]
[., parse, (, source, ,, pos, ), ;, if, (, whole, ==, null, ), {, pos, ., setIndex, (, initialIndex]
[,, pos, ), ;, if, (, whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null]
[), ;, if, (, whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;]
[==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;]
[;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, num, =, getNumeratorFormat, (, ), ., parse]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, num, =]
[), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, num, =, getNumeratorFormat, (, ), .]
[;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,]
[;, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, num, ==, null]
[,, pos, ), ;, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (]
[), ;, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, num, ==]
[;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if]
[., parse, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex]
[,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null]
[), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., intValue, (, )]
[==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., intValue]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., intValue, (, )]
[;, return, null, ;, }, if, (, num, ., intValue, (, ), <, 0, ), {, pos, ., setIndex, (]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., intValue, (, ), <, 0, )]
[), ;, return, null, ;, }, if, (, num, ., intValue, (, ), <, 0, ), {, pos, ., setIndex]
[;, }, if, (, num, ., intValue, (, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, int, startIndex, =, pos, ., getIndex, (]
[<, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, int, startIndex, =, pos, .]
[., intValue, (, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, int]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, int, startIndex, =, pos, ., getIndex, (]
[;, return, null, ;, }, int, startIndex, =, pos, ., getIndex, (, ), ;, char, c, =, parseNextCharacter, (, source]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, int, startIndex, =, pos, ., getIndex, (, ), ;, char]
[), ;, return, null, ;, }, int, startIndex, =, pos, ., getIndex, (, ), ;, char, c, =, parseNextCharacter, (]
[;, }, int, startIndex, =, pos, ., getIndex, (, ), ;, char, c, =, parseNextCharacter, (, source, ,, pos, )]
[;, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :, return]
[., getIndex, (, ), ;, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {]
[;, switch, (, c, ), {, case, 0, :, return, new, Fraction, (, num, ., intValue, (, ), ,, 1]
[,, pos, ), ;, switch, (, c, ), {, case, 0, :, return, new, Fraction, (, num, ., intValue, (]
[), ;, switch, (, c, ), {, case, 0, :, return, new, Fraction, (, num, ., intValue, (, ), ,]
[), {, case, 0, :, return, new, Fraction, (, num, ., intValue, (, ), ,, 1, ), ;, case, '/']
[:, return, new, Fraction, (, num, ., intValue, (, ), ,, 1, ), ;, case, '/', :, break, ;, default]
[;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex]
[,, 1, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, .]
[., intValue, (, ), ,, 1, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex]
[), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (]
[:, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return]
[;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number]
[., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source]
[), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;]
[;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, den, =, getDenominatorFormat, (, ), ., parse]
[., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, den, =]
[), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, den, =, getDenominatorFormat, (, ), .]
[;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,]
[;, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, den, ==, null]
[,, pos, ), ;, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (]
[), ;, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, den, ==]
[;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if]
[., parse, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex]
[,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null]
[), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., intValue, (, )]
[==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., intValue]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., intValue, (, )]
[;, return, null, ;, }, if, (, den, ., intValue, (, ), <, 0, ), {, pos, ., setIndex, (]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., intValue, (, ), <, 0, )]
[), ;, return, null, ;, }, if, (, den, ., intValue, (, ), <, 0, ), {, pos, ., setIndex]
[;, }, if, (, den, ., intValue, (, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, int, w, =, whole, ., intValue, (]
[<, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, int, w, =, whole, .]
[., intValue, (, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, int]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, int, w, =, whole, ., intValue, (]
[;, return, null, ;, }, int, w, =, whole, ., intValue, (, ), ;, int, n, =, num, ., intValue]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, int, w, =, whole, ., intValue, (, ), ;, int]
[), ;, return, null, ;, }, int, w, =, whole, ., intValue, (, ), ;, int, n, =, num, .]
[;, }, int, w, =, whole, ., intValue, (, ), ;, int, n, =, num, ., intValue, (, ), ;]
[;, int, n, =, num, ., intValue, (, ), ;, int, d, =, den, ., intValue, (, ), ;, return]
[., intValue, (, ), ;, int, n, =, num, ., intValue, (, ), ;, int, d, =, den, ., intValue]
[;, int, d, =, den, ., intValue, (, ), ;, return, new, Fraction, (, (, (, Math, ., abs, (]
[., intValue, (, ), ;, int, d, =, den, ., intValue, (, ), ;, return, new, Fraction, (, (, (]
[;, return, new, Fraction, (, (, (, Math, ., abs, (, w, ), *, d, ), +, n, ), *]
[., intValue, (, ), ;, return, new, Fraction, (, (, (, Math, ., abs, (, w, ), *, d, )]
[;, }, public, void, setWholeFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, NullArgumentException]
[,, d, ), ;, }, public, void, setWholeFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {]
[*, MathUtils, ., copySign, (, 1, ,, w, ), ,, d, ), ;, }, public, void, setWholeFormat, (, NumberFormat, format]
[), *, MathUtils, ., copySign, (, 1, ,, w, ), ,, d, ), ;, }, public, void, setWholeFormat, (, NumberFormat]
[+, n, ), *, MathUtils, ., copySign, (, 1, ,, w, ), ,, d, ), ;, }, public, void, setWholeFormat]
[), +, n, ), *, MathUtils, ., copySign, (, 1, ,, w, ), ,, d, ), ;, }, public, void]
[*, d, ), +, n, ), *, MathUtils, ., copySign, (, 1, ,, w, ), ,, d, ), ;, }]
[., abs, (, w, ), *, d, ), +, n, ), *, MathUtils, ., copySign, (, 1, ,, w, )]
[), *, d, ), +, n, ), *, MathUtils, ., copySign, (, 1, ,, w, ), ,, d, ), ;]
[), +, n, ), *, MathUtils, ., copySign, (, 1, ,, w, ), ,, d, ), ;, }, public, void]
[), *, MathUtils, ., copySign, (, 1, ,, w, ), ,, d, ), ;, }, public, void, setWholeFormat, (, NumberFormat]
[,, d, ), ;, }, public, void, setWholeFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {]
[., copySign, (, 1, ,, w, ), ,, d, ), ;, }, public, void, setWholeFormat, (, NumberFormat, format, ), {]
[,, w, ), ,, d, ), ;, }, public, void, setWholeFormat, (, NumberFormat, format, ), {, if, (, format, ==]
[), ,, d, ), ;, }, public, void, setWholeFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, )]
[), ;, }, public, void, setWholeFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., WHOLE_FORMAT, ), ;, }, this, ., wholeFormat, =, format, ;, }, }]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., WHOLE_FORMAT, ), ;, }, this, ., wholeFormat, =, format, ;]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., WHOLE_FORMAT, ), ;, }, this, ., wholeFormat, =, format, ;, }, }]
[;, }, this, ., wholeFormat, =, format, ;, }, }]
[), ;, }, this, ., wholeFormat, =, format, ;, }, }]
[., WHOLE_FORMAT, ), ;, }, this, ., wholeFormat, =, format, ;, }, }]
[=, format, ;, }, }]
[., wholeFormat, =, format, ;, }, }]
[;, }, }]
