[;, private, AllowedSolution, allowed, ;, private, final, Method, method, ;, protected, BaseSecantSolver, (, final, double, absoluteAccuracy, ,, final, Method, method]
[), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =, method, ;, }, protected, BaseSecantSolver, (]
[=, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =, method, ;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final]
[., allowed, =, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =, method, ;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy]
[;, this, ., method, =, method, ;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final]
[., ANY_SIDE, ;, this, ., method, =, method, ;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy]
[=, method, ;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, Method, method, ), {]
[., method, =, method, ;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, Method, method]
[;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, Method, method, ), {, super, (]
[,, absoluteAccuracy, ), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =, method, ;, }, protected]
[), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =, method, ;, }, protected, BaseSecantSolver, (]
[=, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =, method, ;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final]
[., allowed, =, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =, method, ;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy]
[;, this, ., method, =, method, ;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final]
[., ANY_SIDE, ;, this, ., method, =, method, ;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy]
[=, method, ;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, double, functionValueAccuracy, ,, final]
[., method, =, method, ;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, double, functionValueAccuracy]
[;, }, protected, BaseSecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, double, functionValueAccuracy, ,, final, Method, method]
[,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =, method, ;]
[,, functionValueAccuracy, ), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =, method, ;, }, public]
[), ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =, method, ;, }, public, double, solve]
[=, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =, method, ;, }, public, double, solve, (, final, int, maxEval, ,]
[., allowed, =, AllowedSolution, ., ANY_SIDE, ;, this, ., method, =, method, ;, }, public, double, solve, (, final, int]
[;, this, ., method, =, method, ;, }, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,]
[., ANY_SIDE, ;, this, ., method, =, method, ;, }, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction]
[=, method, ;, }, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double, min, ,]
[., method, =, method, ;, }, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double]
[;, }, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double, min, ,, final, double]
[;, }, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double, min, ,, final, double]
[,, f, ,, min, ,, max, ,, min, +, 0.5, *, (, max, -, min, ), ,, allowedSolution, ), ;]
[,, min, ,, max, ,, min, +, 0.5, *, (, max, -, min, ), ,, allowedSolution, ), ;, }, public]
[,, max, ,, min, +, 0.5, *, (, max, -, min, ), ,, allowedSolution, ), ;, }, public, double, solve]
[,, min, +, 0.5, *, (, max, -, min, ), ,, allowedSolution, ), ;, }, public, double, solve, (, final]
[,, allowedSolution, ), ;, }, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double, min]
[+, 0.5, *, (, max, -, min, ), ,, allowedSolution, ), ;, }, public, double, solve, (, final, int, maxEval]
[,, allowedSolution, ), ;, }, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double, min]
[*, (, max, -, min, ), ,, allowedSolution, ), ;, }, public, double, solve, (, final, int, maxEval, ,, final]
[,, allowedSolution, ), ;, }, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double, min]
[), ,, allowedSolution, ), ;, }, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double]
[-, min, ), ,, allowedSolution, ), ;, }, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,]
[), ,, allowedSolution, ), ;, }, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double]
[), ;, }, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double, min, ,, final]
[=, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,, max, ,, startValue, ), ;, }]
[., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,, max, ,, startValue, )]
[;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,, max, ,, startValue, ), ;, }, @, Override]
[;, }, @, Override, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double, min, ,]
[., solve, (, maxEval, ,, f, ,, min, ,, max, ,, startValue, ), ;, }, @, Override, public, double, solve]
[,, f, ,, min, ,, max, ,, startValue, ), ;, }, @, Override, public, double, solve, (, final, int, maxEval]
[,, min, ,, max, ,, startValue, ), ;, }, @, Override, public, double, solve, (, final, int, maxEval, ,, final]
[,, max, ,, startValue, ), ;, }, @, Override, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f]
[,, startValue, ), ;, }, @, Override, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final]
[), ;, }, @, Override, public, double, solve, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, double, min]
[;, }, @, Override, protected, final, double, doSolve, (, ), throws, ConvergenceException, {, double, x0, =, getMin, (, ), ;]
[,, f, ,, min, ,, max, ,, startValue, ,, AllowedSolution, ., ANY_SIDE, ), ;, }, @, Override, protected, final, double]
[,, min, ,, max, ,, startValue, ,, AllowedSolution, ., ANY_SIDE, ), ;, }, @, Override, protected, final, double, doSolve, (]
[,, max, ,, startValue, ,, AllowedSolution, ., ANY_SIDE, ), ;, }, @, Override, protected, final, double, doSolve, (, ), throws]
[,, startValue, ,, AllowedSolution, ., ANY_SIDE, ), ;, }, @, Override, protected, final, double, doSolve, (, ), throws, ConvergenceException, {]
[,, AllowedSolution, ., ANY_SIDE, ), ;, }, @, Override, protected, final, double, doSolve, (, ), throws, ConvergenceException, {, double, x0]
[), ;, }, @, Override, protected, final, double, doSolve, (, ), throws, ConvergenceException, {, double, x0, =, getMin, (, )]
[., ANY_SIDE, ), ;, }, @, Override, protected, final, double, doSolve, (, ), throws, ConvergenceException, {, double, x0, =, getMin]
[;, double, x1, =, getMax, (, ), ;, double, f0, =, computeObjectiveValue, (, x0, ), ;, double, f1, =, computeObjectiveValue]
[;, double, f0, =, computeObjectiveValue, (, x0, ), ;, double, f1, =, computeObjectiveValue, (, x1, ), ;, if, (, f0]
[;, double, f1, =, computeObjectiveValue, (, x1, ), ;, if, (, f0, ==, 0.0, ), {, return, x0, ;, }]
[), ;, double, f1, =, computeObjectiveValue, (, x1, ), ;, if, (, f0, ==, 0.0, ), {, return, x0, ;]
[;, if, (, f0, ==, 0.0, ), {, return, x0, ;, }, if, (, f1, ==, 0.0, ), {, return]
[), ;, if, (, f0, ==, 0.0, ), {, return, x0, ;, }, if, (, f1, ==, 0.0, ), {]
[), {, return, x0, ;, }, if, (, f1, ==, 0.0, ), {, return, x1, ;, }, verifyBracketing, (, x0]
[==, 0.0, ), {, return, x0, ;, }, if, (, f1, ==, 0.0, ), {, return, x1, ;, }, verifyBracketing]
[), {, return, x0, ;, }, if, (, f1, ==, 0.0, ), {, return, x1, ;, }, verifyBracketing, (, x0]
[;, }, if, (, f1, ==, 0.0, ), {, return, x1, ;, }, verifyBracketing, (, x0, ,, x1, ), ;]
[), {, return, x1, ;, }, verifyBracketing, (, x0, ,, x1, ), ;, final, double, ftol, =, getFunctionValueAccuracy, (, )]
[==, 0.0, ), {, return, x1, ;, }, verifyBracketing, (, x0, ,, x1, ), ;, final, double, ftol, =, getFunctionValueAccuracy]
[), {, return, x1, ;, }, verifyBracketing, (, x0, ,, x1, ), ;, final, double, ftol, =, getFunctionValueAccuracy, (, )]
[;, }, verifyBracketing, (, x0, ,, x1, ), ;, final, double, ftol, =, getFunctionValueAccuracy, (, ), ;, final, double, atol]
[;, final, double, ftol, =, getFunctionValueAccuracy, (, ), ;, final, double, atol, =, getAbsoluteAccuracy, (, ), ;, final, double, rtol]
[,, x1, ), ;, final, double, ftol, =, getFunctionValueAccuracy, (, ), ;, final, double, atol, =, getAbsoluteAccuracy, (, ), ;]
[), ;, final, double, ftol, =, getFunctionValueAccuracy, (, ), ;, final, double, atol, =, getAbsoluteAccuracy, (, ), ;, final, double]
[;, final, double, atol, =, getAbsoluteAccuracy, (, ), ;, final, double, rtol, =, getRelativeAccuracy, (, ), ;, boolean, inverted, =]
[;, final, double, rtol, =, getRelativeAccuracy, (, ), ;, boolean, inverted, =, false, ;, while, (, true, ), {, final]
[;, boolean, inverted, =, false, ;, while, (, true, ), {, final, double, x, =, x1, -, (, (, f1]
[;, while, (, true, ), {, final, double, x, =, x1, -, (, (, f1, *, (, x1, -, x0]
[), {, final, double, x, =, x1, -, (, (, f1, *, (, x1, -, x0, ), ), /, (]
[;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return, x, ;]
[-, (, (, f1, *, (, x1, -, x0, ), ), /, (, f1, -, f0, ), ), ;, final]
[;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return, x, ;]
[), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return, x]
[/, (, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx]
[), /, (, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (]
[*, (, x1, -, x0, ), ), /, (, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue]
[), /, (, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (]
[), ), /, (, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if]
[-, x0, ), ), /, (, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (, x, )]
[), ), /, (, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if]
[), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return, x]
[), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return]
[-, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, )]
[), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return]
[;, if, (, fx, ==, 0.0, ), {, return, x, ;, }, if, (, f1, *, fx, <, 0, )]
[), ;, if, (, fx, ==, 0.0, ), {, return, x, ;, }, if, (, f1, *, fx, <, 0]
[), {, return, x, ;, }, if, (, f1, *, fx, <, 0, ), {, x0, =, x1, ;, f0]
[==, 0.0, ), {, return, x, ;, }, if, (, f1, *, fx, <, 0, ), {, x0, =, x1]
[), {, return, x, ;, }, if, (, f1, *, fx, <, 0, ), {, x0, =, x1, ;, f0]
[;, }, if, (, f1, *, fx, <, 0, ), {, x0, =, x1, ;, f0, =, f1, ;, inverted]
[), {, x0, =, x1, ;, f0, =, f1, ;, inverted, =, !, inverted, ;, }, else, {, switch, (]
[<, 0, ), {, x0, =, x1, ;, f0, =, f1, ;, inverted, =, !, inverted, ;, }, else, {]
[*, fx, <, 0, ), {, x0, =, x1, ;, f0, =, f1, ;, inverted, =, !, inverted, ;, }]
[<, 0, ), {, x0, =, x1, ;, f0, =, f1, ;, inverted, =, !, inverted, ;, }, else, {]
[), {, x0, =, x1, ;, f0, =, f1, ;, inverted, =, !, inverted, ;, }, else, {, switch, (]
[=, x1, ;, f0, =, f1, ;, inverted, =, !, inverted, ;, }, else, {, switch, (, method, ), {]
[;, f0, =, f1, ;, inverted, =, !, inverted, ;, }, else, {, switch, (, method, ), {, case, ILLINOIS]
[=, f1, ;, inverted, =, !, inverted, ;, }, else, {, switch, (, method, ), {, case, ILLINOIS, :, f0]
[;, inverted, =, !, inverted, ;, }, else, {, switch, (, method, ), {, case, ILLINOIS, :, f0, *=, 0.5]
[=, !, inverted, ;, }, else, {, switch, (, method, ), {, case, ILLINOIS, :, f0, *=, 0.5, ;, break]
[;, }, else, {, switch, (, method, ), {, case, ILLINOIS, :, f0, *=, 0.5, ;, break, ;, case, PEGASUS]
[;, }, else, {, switch, (, method, ), {, case, ILLINOIS, :, f0, *=, 0.5, ;, break, ;, case, PEGASUS]
[), {, case, ILLINOIS, :, f0, *=, 0.5, ;, break, ;, case, PEGASUS, :, f0, *=, f1, /, (, f1]
[:, f0, *=, 0.5, ;, break, ;, case, PEGASUS, :, f0, *=, f1, /, (, f1, +, fx, ), ;]
[*=, 0.5, ;, break, ;, case, PEGASUS, :, f0, *=, f1, /, (, f1, +, fx, ), ;, break, ;]
[;, break, ;, case, PEGASUS, :, f0, *=, f1, /, (, f1, +, fx, ), ;, break, ;, case, REGULA_FALSI]
[:, f0, *=, f1, /, (, f1, +, fx, ), ;, break, ;, case, REGULA_FALSI, :, if, (, x, ==]
[*=, f1, /, (, f1, +, fx, ), ;, break, ;, case, REGULA_FALSI, :, if, (, x, ==, x1, )]
[;, break, ;, case, REGULA_FALSI, :, if, (, x, ==, x1, ), {, throw, new, ConvergenceException, (, ), ;, }]
[/, (, f1, +, fx, ), ;, break, ;, case, REGULA_FALSI, :, if, (, x, ==, x1, ), {, throw]
[;, break, ;, case, REGULA_FALSI, :, if, (, x, ==, x1, ), {, throw, new, ConvergenceException, (, ), ;, }]
[), ;, break, ;, case, REGULA_FALSI, :, if, (, x, ==, x1, ), {, throw, new, ConvergenceException, (, ), ;]
[+, fx, ), ;, break, ;, case, REGULA_FALSI, :, if, (, x, ==, x1, ), {, throw, new, ConvergenceException, (]
[), ;, break, ;, case, REGULA_FALSI, :, if, (, x, ==, x1, ), {, throw, new, ConvergenceException, (, ), ;]
[:, if, (, x, ==, x1, ), {, throw, new, ConvergenceException, (, ), ;, }, break, ;, default, :, throw]
[), {, throw, new, ConvergenceException, (, ), ;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }]
[==, x1, ), {, throw, new, ConvergenceException, (, ), ;, }, break, ;, default, :, throw, new, MathInternalError, (, )]
[), {, throw, new, ConvergenceException, (, ), ;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }]
[;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, x1, =, x, ;, f1, =]
[;, }, }, x1, =, x, ;, f1, =, fx, ;, if, (, FastMath, ., abs, (, f1, ), <=]
[=, x, ;, f1, =, fx, ;, if, (, FastMath, ., abs, (, f1, ), <=, ftol, ), {, switch]
[;, f1, =, fx, ;, if, (, FastMath, ., abs, (, f1, ), <=, ftol, ), {, switch, (, allowed]
[=, fx, ;, if, (, FastMath, ., abs, (, f1, ), <=, ftol, ), {, switch, (, allowed, ), {]
[;, if, (, FastMath, ., abs, (, f1, ), <=, ftol, ), {, switch, (, allowed, ), {, case, ANY_SIDE]
[), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, if, (, inverted, )]
[<=, ftol, ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, if, (]
[., abs, (, f1, ), <=, ftol, ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;]
[), <=, ftol, ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, if]
[), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, if, (, inverted, )]
[), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, if, (, inverted, ), {, return, x1, ;, }]
[:, return, x1, ;, case, LEFT_SIDE, :, if, (, inverted, ), {, return, x1, ;, }, break, ;, case, RIGHT_SIDE]
[;, case, LEFT_SIDE, :, if, (, inverted, ), {, return, x1, ;, }, break, ;, case, RIGHT_SIDE, :, if, (]
[:, if, (, inverted, ), {, return, x1, ;, }, break, ;, case, RIGHT_SIDE, :, if, (, !, inverted, )]
[), {, return, x1, ;, }, break, ;, case, RIGHT_SIDE, :, if, (, !, inverted, ), {, return, x1, ;]
[;, }, break, ;, case, RIGHT_SIDE, :, if, (, !, inverted, ), {, return, x1, ;, }, break, ;, case]
[:, if, (, !, inverted, ), {, return, x1, ;, }, break, ;, case, BELOW_SIDE, :, if, (, f1, <=]
[), {, return, x1, ;, }, break, ;, case, BELOW_SIDE, :, if, (, f1, <=, 0, ), {, return, x1]
[), {, return, x1, ;, }, break, ;, case, BELOW_SIDE, :, if, (, f1, <=, 0, ), {, return, x1]
[;, }, break, ;, case, BELOW_SIDE, :, if, (, f1, <=, 0, ), {, return, x1, ;, }, break, ;]
[:, if, (, f1, <=, 0, ), {, return, x1, ;, }, break, ;, case, ABOVE_SIDE, :, if, (, f1]
[), {, return, x1, ;, }, break, ;, case, ABOVE_SIDE, :, if, (, f1, >=, 0, ), {, return, x1]
[<=, 0, ), {, return, x1, ;, }, break, ;, case, ABOVE_SIDE, :, if, (, f1, >=, 0, ), {]
[), {, return, x1, ;, }, break, ;, case, ABOVE_SIDE, :, if, (, f1, >=, 0, ), {, return, x1]
[;, }, break, ;, case, ABOVE_SIDE, :, if, (, f1, >=, 0, ), {, return, x1, ;, }, break, ;]
[:, if, (, f1, >=, 0, ), {, return, x1, ;, }, break, ;, default, :, throw, new, MathInternalError, (]
[), {, return, x1, ;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, if, (]
[>=, 0, ), {, return, x1, ;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }]
[), {, return, x1, ;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, if, (]
[;, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, if, (, FastMath, ., abs, (]
[;, }, }, if, (, FastMath, ., abs, (, x1, -, x0, ), <, FastMath, ., max, (, rtol, *]
[), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, return, inverted, ?, x1]
[<, FastMath, ., max, (, rtol, *, FastMath, ., abs, (, x1, ), ,, atol, ), ), {, switch, (]
[., abs, (, x1, -, x0, ), <, FastMath, ., max, (, rtol, *, FastMath, ., abs, (, x1, )]
[), <, FastMath, ., max, (, rtol, *, FastMath, ., abs, (, x1, ), ,, atol, ), ), {, switch]
[-, x0, ), <, FastMath, ., max, (, rtol, *, FastMath, ., abs, (, x1, ), ,, atol, ), )]
[), <, FastMath, ., max, (, rtol, *, FastMath, ., abs, (, x1, ), ,, atol, ), ), {, switch]
[), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, return, inverted, ?, x1]
[., max, (, rtol, *, FastMath, ., abs, (, x1, ), ,, atol, ), ), {, switch, (, allowed, )]
[,, atol, ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, return]
[*, FastMath, ., abs, (, x1, ), ,, atol, ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :]
[,, atol, ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, return]
[., abs, (, x1, ), ,, atol, ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1]
[), ,, atol, ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :]
[), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, return, inverted, ?]
[), {, case, ANY_SIDE, :, return, x1, ;, case, LEFT_SIDE, :, return, inverted, ?, x1, :, x0, ;, case, RIGHT_SIDE]
[:, return, x1, ;, case, LEFT_SIDE, :, return, inverted, ?, x1, :, x0, ;, case, RIGHT_SIDE, :, return, inverted, ?]
[;, case, LEFT_SIDE, :, return, inverted, ?, x1, :, x0, ;, case, RIGHT_SIDE, :, return, inverted, ?, x0, :, x1]
[:, return, inverted, ?, x1, :, x0, ;, case, RIGHT_SIDE, :, return, inverted, ?, x0, :, x1, ;, case, BELOW_SIDE]
[;, case, RIGHT_SIDE, :, return, inverted, ?, x0, :, x1, ;, case, BELOW_SIDE, :, return, (, f1, <=, 0, )]
[?, x1, :, x0, ;, case, RIGHT_SIDE, :, return, inverted, ?, x0, :, x1, ;, case, BELOW_SIDE, :, return, (]
[:, x0, ;, case, RIGHT_SIDE, :, return, inverted, ?, x0, :, x1, ;, case, BELOW_SIDE, :, return, (, f1, <=]
[;, case, RIGHT_SIDE, :, return, inverted, ?, x0, :, x1, ;, case, BELOW_SIDE, :, return, (, f1, <=, 0, )]
[:, return, inverted, ?, x0, :, x1, ;, case, BELOW_SIDE, :, return, (, f1, <=, 0, ), ?, x1, :]
[;, case, BELOW_SIDE, :, return, (, f1, <=, 0, ), ?, x1, :, x0, ;, case, ABOVE_SIDE, :, return, (]
[?, x0, :, x1, ;, case, BELOW_SIDE, :, return, (, f1, <=, 0, ), ?, x1, :, x0, ;, case]
[:, x1, ;, case, BELOW_SIDE, :, return, (, f1, <=, 0, ), ?, x1, :, x0, ;, case, ABOVE_SIDE, :]
[;, case, BELOW_SIDE, :, return, (, f1, <=, 0, ), ?, x1, :, x0, ;, case, ABOVE_SIDE, :, return, (]
[:, return, (, f1, <=, 0, ), ?, x1, :, x0, ;, case, ABOVE_SIDE, :, return, (, f1, >=, 0]
[;, case, ABOVE_SIDE, :, return, (, f1, >=, 0, ), ?, x1, :, x0, ;, default, :, throw, new, MathInternalError]
[?, x1, :, x0, ;, case, ABOVE_SIDE, :, return, (, f1, >=, 0, ), ?, x1, :, x0, ;, default]
[), ?, x1, :, x0, ;, case, ABOVE_SIDE, :, return, (, f1, >=, 0, ), ?, x1, :, x0, ;]
[<=, 0, ), ?, x1, :, x0, ;, case, ABOVE_SIDE, :, return, (, f1, >=, 0, ), ?, x1, :]
[), ?, x1, :, x0, ;, case, ABOVE_SIDE, :, return, (, f1, >=, 0, ), ?, x1, :, x0, ;]
[:, x0, ;, case, ABOVE_SIDE, :, return, (, f1, >=, 0, ), ?, x1, :, x0, ;, default, :, throw]
[;, case, ABOVE_SIDE, :, return, (, f1, >=, 0, ), ?, x1, :, x0, ;, default, :, throw, new, MathInternalError]
[:, return, (, f1, >=, 0, ), ?, x1, :, x0, ;, default, :, throw, new, MathInternalError, (, ), ;]
[;, default, :, throw, new, MathInternalError, (, ), ;, }, }, }, }, protected, enum, Method, {, REGULA_FALSI, ,, ILLINOIS]
[?, x1, :, x0, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, }, }, protected, enum, Method]
[), ?, x1, :, x0, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, }, }, protected, enum]
[>=, 0, ), ?, x1, :, x0, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, }, }]
[), ?, x1, :, x0, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, }, }, protected, enum]
[:, x0, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, }, }, protected, enum, Method, {, REGULA_FALSI]
[;, default, :, throw, new, MathInternalError, (, ), ;, }, }, }, }, protected, enum, Method, {, REGULA_FALSI, ,, ILLINOIS]
[;, }, }, }, }, protected, enum, Method, {, REGULA_FALSI, ,, ILLINOIS, ,, PEGASUS, ;, }, }]
