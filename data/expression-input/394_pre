[DiGraphEdge, <, N, ,, E, >, >, edgePredicate, ;, private, final, boolean, inclusive, ;, private, static, final, Annotation, BACK_EDGE, =]
[;, private, static, final, Annotation, BACK_EDGE, =, new, Annotation, (, ), {, }, ;, private, static, final, Annotation, VISITED_EDGE, =]
[;, private, static, final, Annotation, VISITED_EDGE, =, new, Annotation, (, ), {, }, ;, private, static, final, Annotation, WHITE, =]
[Annotation, (, ), {, }, ;, private, static, final, Annotation, WHITE, =, null, ;, private, static, final, Annotation, GRAY, =]
[;, private, static, final, Annotation, GRAY, =, new, Annotation, (, ), {, }, ;, private, static, final, Annotation, BLACK, =]
[<, N, >, nodePredicate, ,, Predicate, <, DiGraphEdge, <, N, ,, E, >, >, edgePredicate, ,, boolean, inclusive, ), {]
[<, N, >, nodePredicate, ,, Predicate, <, DiGraphEdge, <, N, ,, E, >, >, edgePredicate, ,, boolean, inclusive, ), {]
[,, Predicate, <, DiGraphEdge, <, N, ,, E, >, >, edgePredicate, ,, boolean, inclusive, ), {, this, ., graph, =]
[<, DiGraphEdge, <, N, ,, E, >, >, edgePredicate, ,, boolean, inclusive, ), {, this, ., graph, =, graph, ;]
[<, DiGraphEdge, <, N, ,, E, >, >, edgePredicate, ,, boolean, inclusive, ), {, this, ., graph, =, graph, ;]
[,, E, >, >, edgePredicate, ,, boolean, inclusive, ), {, this, ., graph, =, graph, ;, this, ., start, =]
[>, >, edgePredicate, ,, boolean, inclusive, ), {, this, ., graph, =, graph, ;, this, ., start, =, a, ;]
[>, >, edgePredicate, ,, boolean, inclusive, ), {, this, ., graph, =, graph, ;, this, ., start, =, a, ;]
[boolean, inclusive, ), {, this, ., graph, =, graph, ;, this, ., start, =, a, ;, this, ., end, =]
[), {, this, ., graph, =, graph, ;, this, ., start, =, a, ;, this, ., end, =, b, ;]
[), {, this, ., graph, =, graph, ;, this, ., start, =, a, ;, this, ., end, =, b, ;]
[graph, =, graph, ;, this, ., start, =, a, ;, this, ., end, =, b, ;, this, ., nodePredicate, =]
[graph, ;, this, ., start, =, a, ;, this, ., end, =, b, ;, this, ., nodePredicate, =, nodePredicate, ;]
[graph, ;, this, ., start, =, a, ;, this, ., end, =, b, ;, this, ., nodePredicate, =, nodePredicate, ;]
[start, =, a, ;, this, ., end, =, b, ;, this, ., nodePredicate, =, nodePredicate, ;, this, ., edgePredicate, =]
[a, ;, this, ., end, =, b, ;, this, ., nodePredicate, =, nodePredicate, ;, this, ., edgePredicate, =, edgePredicate, ;]
[a, ;, this, ., end, =, b, ;, this, ., nodePredicate, =, nodePredicate, ;, this, ., edgePredicate, =, edgePredicate, ;]
[end, =, b, ;, this, ., nodePredicate, =, nodePredicate, ;, this, ., edgePredicate, =, edgePredicate, ;, this, ., inclusive, =]
[Predicate, <, N, >, nodePredicate, ,, Predicate, <, DiGraphEdge, <, N, ,, E, >, >, edgePredicate, ), {, this, (]
[N, >, nodePredicate, ,, Predicate, <, DiGraphEdge, <, N, ,, E, >, >, edgePredicate, ), {, this, (, graph, ,]
[nodePredicate, ,, Predicate, <, DiGraphEdge, <, N, ,, E, >, >, edgePredicate, ), {, this, (, graph, ,, a, ,]
[Predicate, <, DiGraphEdge, <, N, ,, E, >, >, edgePredicate, ), {, this, (, graph, ,, a, ,, b, ,]
[DiGraphEdge, <, N, ,, E, >, >, edgePredicate, ), {, this, (, graph, ,, a, ,, b, ,, nodePredicate, ,]
[N, ,, E, >, >, edgePredicate, ), {, this, (, graph, ,, a, ,, b, ,, nodePredicate, ,, edgePredicate, ,]
[graph, ,, a, ,, b, ,, nodePredicate, ,, edgePredicate, ,, true, ), ;, }, public, boolean, allPathsSatisfyPredicate, (, ), {]
[,, edgePredicate, ,, true, ), ;, }, public, boolean, allPathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean, result, =]
[,, true, ), ;, }, public, boolean, allPathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean, result, =, checkAllPathsWithoutBackEdges, (]
[), ;, }, public, boolean, allPathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean, result, =, checkAllPathsWithoutBackEdges, (, start, ,]
[public, boolean, allPathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean, result, =, checkAllPathsWithoutBackEdges, (, start, ,, end, ), ;]
[{, setUp, (, ), ;, boolean, result, =, checkAllPathsWithoutBackEdges, (, start, ,, end, ), ;, tearDown, (, ), ;, return]
[(, start, ,, end, ), ;, tearDown, (, ), ;, return, result, ;, }, public, boolean, somePathsSatisfyPredicate, (, ), {]
[(, ), ;, return, result, ;, }, public, boolean, somePathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean, result, =]
[;, return, result, ;, }, public, boolean, somePathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean, result, =, checkSomePathsWithoutBackEdges, (]
[result, ;, }, public, boolean, somePathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean, result, =, checkSomePathsWithoutBackEdges, (, start, ,]
[public, boolean, somePathsSatisfyPredicate, (, ), {, setUp, (, ), ;, boolean, result, =, checkSomePathsWithoutBackEdges, (, start, ,, end, ), ;]
[{, setUp, (, ), ;, boolean, result, =, checkSomePathsWithoutBackEdges, (, start, ,, end, ), ;, tearDown, (, ), ;, return]
[(, start, ,, end, ), ;, tearDown, (, ), ;, return, result, ;, }, private, void, setUp, (, ), {]
[(, start, ,, end, ), ;, tearDown, (, ), ;, return, result, ;, }, private, void, setUp, (, ), {]
[tearDown, (, ), ;, return, result, ;, }, private, void, setUp, (, ), {, graph, ., pushNodeAnnotations, (, ), ;]
[tearDown, (, ), ;, return, result, ;, }, private, void, setUp, (, ), {, graph, ., pushNodeAnnotations, (, ), ;]
[;, }, private, void, setUp, (, ), {, graph, ., pushNodeAnnotations, (, ), ;, graph, ., pushEdgeAnnotations, (, ), ;]
[private, void, setUp, (, ), {, graph, ., pushNodeAnnotations, (, ), ;, graph, ., pushEdgeAnnotations, (, ), ;, discoverBackEdges, (]
[private, void, setUp, (, ), {, graph, ., pushNodeAnnotations, (, ), ;, graph, ., pushEdgeAnnotations, (, ), ;, discoverBackEdges, (]
[graph, ., pushEdgeAnnotations, (, ), ;, discoverBackEdges, (, this, ., start, ), ;, }, private, void, tearDown, (, ), {]
[graph, ., pushEdgeAnnotations, (, ), ;, discoverBackEdges, (, this, ., start, ), ;, }, private, void, tearDown, (, ), {]
[discoverBackEdges, (, this, ., start, ), ;, }, private, void, tearDown, (, ), {, graph, ., popNodeAnnotations, (, ), ;]
[discoverBackEdges, (, this, ., start, ), ;, }, private, void, tearDown, (, ), {, graph, ., popNodeAnnotations, (, ), ;]
[graph, ., popEdgeAnnotations, (, ), ;, }, private, void, discoverBackEdges, (, DiGraphNode, <, N, ,, E, >, u, ), {]
[graph, ., popEdgeAnnotations, (, ), ;, }, private, void, discoverBackEdges, (, DiGraphNode, <, N, ,, E, >, u, ), {]
[), ;, }, private, void, discoverBackEdges, (, DiGraphNode, <, N, ,, E, >, u, ), {, u, ., setAnnotation, (]
[u, ), {, u, ., setAnnotation, (, GRAY, ), ;, for, (, DiGraphEdge, <, N, ,, E, >, e, :]
[u, ), {, u, ., setAnnotation, (, GRAY, ), ;, for, (, DiGraphEdge, <, N, ,, E, >, e, :]
[;, for, (, DiGraphEdge, <, N, ,, E, >, e, :, u, ., getOutEdges, (, ), ), {, if, (]
[(, DiGraphEdge, <, N, ,, E, >, e, :, u, ., getOutEdges, (, ), ), {, if, (, ignoreEdge, (]
[{, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, v, =]
[{, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, v, =]
[{, continue, ;, }, DiGraphNode, <, N, ,, E, >, v, =, e, ., getDestination, (, ), ;, if, (]
[{, continue, ;, }, DiGraphNode, <, N, ,, E, >, v, =, e, ., getDestination, (, ), ;, if, (]
[{, continue, ;, }, DiGraphNode, <, N, ,, E, >, v, =, e, ., getDestination, (, ), ;, if, (]
[N, ,, E, >, v, =, e, ., getDestination, (, ), ;, if, (, v, ., getAnnotation, (, ), ==]
[>, v, =, e, ., getDestination, (, ), ;, if, (, v, ., getAnnotation, (, ), ==, WHITE, ), {]
[=, e, ., getDestination, (, ), ;, if, (, v, ., getAnnotation, (, ), ==, WHITE, ), {, discoverBackEdges, (]
[if, (, v, ., getAnnotation, (, ), ==, WHITE, ), {, discoverBackEdges, (, v, ), ;, }, else, if, (]
[if, (, v, ., getAnnotation, (, ), ==, WHITE, ), {, discoverBackEdges, (, v, ), ;, }, else, if, (]
[if, (, v, ., getAnnotation, (, ), ==, WHITE, ), {, discoverBackEdges, (, v, ), ;, }, else, if, (]
[), ==, WHITE, ), {, discoverBackEdges, (, v, ), ;, }, else, if, (, v, ., getAnnotation, (, ), ==]
[), {, discoverBackEdges, (, v, ), ;, }, else, if, (, v, ., getAnnotation, (, ), ==, GRAY, ), {]
[), {, discoverBackEdges, (, v, ), ;, }, else, if, (, v, ., getAnnotation, (, ), ==, GRAY, ), {]
[v, ), ;, }, else, if, (, v, ., getAnnotation, (, ), ==, GRAY, ), {, e, ., setAnnotation, (]
[if, (, v, ., getAnnotation, (, ), ==, GRAY, ), {, e, ., setAnnotation, (, BACK_EDGE, ), ;, }, }]
[if, (, v, ., getAnnotation, (, ), ==, GRAY, ), {, e, ., setAnnotation, (, BACK_EDGE, ), ;, }, }]
[getAnnotation, (, ), ==, GRAY, ), {, e, ., setAnnotation, (, BACK_EDGE, ), ;, }, }, u, ., setAnnotation, (]
[setAnnotation, (, BLACK, ), ;, }, private, boolean, ignoreEdge, (, DiGraphEdge, <, N, ,, E, >, e, ), {, return]
[(, BLACK, ), ;, }, private, boolean, ignoreEdge, (, DiGraphEdge, <, N, ,, E, >, e, ), {, return, !]
[(, BLACK, ), ;, }, private, boolean, ignoreEdge, (, DiGraphEdge, <, N, ,, E, >, e, ), {, return, !]
[}, private, boolean, ignoreEdge, (, DiGraphEdge, <, N, ,, E, >, e, ), {, return, !, edgePredicate, ., apply, (]
[(, DiGraphNode, <, N, ,, E, >, a, ,, DiGraphNode, <, N, ,, E, >, b, ), {, if, (]
[(, DiGraphNode, <, N, ,, E, >, a, ,, DiGraphNode, <, N, ,, E, >, b, ), {, if, (]
[(, DiGraphNode, <, N, ,, E, >, a, ,, DiGraphNode, <, N, ,, E, >, b, ), {, if, (]
[,, E, >, a, ,, DiGraphNode, <, N, ,, E, >, b, ), {, if, (, nodePredicate, ., apply, (]
[,, E, >, a, ,, DiGraphNode, <, N, ,, E, >, b, ), {, if, (, nodePredicate, ., apply, (]
[N, ,, E, >, b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&]
[,, E, >, b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (]
[,, E, >, b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (]
[>, b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||]
[b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (]
[b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (]
[b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (]
[{, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=]
[(, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=, start, &&]
[(, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=, start, &&]
[., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=, start, &&, a, !=]
[(, ), ), &&, (, inclusive, ||, (, a, !=, start, &&, a, !=, end, ), ), ), {, return]
[inclusive, ||, (, a, !=, start, &&, a, !=, end, ), ), ), {, return, true, ;, }, if, (]
[inclusive, ||, (, a, !=, start, &&, a, !=, end, ), ), ), {, return, true, ;, }, if, (]
[(, a, !=, start, &&, a, !=, end, ), ), ), {, return, true, ;, }, if, (, a, ==]
[&&, a, !=, end, ), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return]
[(, a, ==, b, ), {, return, false, ;, }, for, (, DiGraphEdge, <, N, ,, E, >, e, :]
[(, a, ==, b, ), {, return, false, ;, }, for, (, DiGraphEdge, <, N, ,, E, >, e, :]
[}, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, ., getOutEdges, (, ), ), {, if, (]
[}, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, ., getOutEdges, (, ), ), {, if, (]
[}, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, ., getOutEdges, (, ), ), {, if, (]
[,, E, >, e, :, a, ., getOutEdges, (, ), ), {, if, (, e, ., getAnnotation, (, ), ==]
[., getOutEdges, (, ), ), {, if, (, e, ., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }]
[., getOutEdges, (, ), ), {, if, (, e, ., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }]
[), {, if, (, e, ., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }, e, ., setAnnotation, (]
[., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }, e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (]
[(, ), ==, VISITED_EDGE, ), {, continue, ;, }, e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (]
[e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (]
[e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (]
[e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (]
[;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (, e, ., getAnnotation, (, ), ==]
[e, ., getAnnotation, (, ), ==, BACK_EDGE, ), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =]
[e, ., getAnnotation, (, ), ==, BACK_EDGE, ), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =]
[{, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =, e, ., getDestination, (, ), ;, if, (]
[continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =, e, ., getDestination, (, ), ;, if, (, !]
[}, DiGraphNode, <, N, ,, E, >, next, =, e, ., getDestination, (, ), ;, if, (, !, checkAllPathsWithoutBackEdges, (]
[<, N, ,, E, >, next, =, e, ., getDestination, (, ), ;, if, (, !, checkAllPathsWithoutBackEdges, (, next, ,]
[next, =, e, ., getDestination, (, ), ;, if, (, !, checkAllPathsWithoutBackEdges, (, next, ,, b, ), ), {, return]
[(, ), ;, if, (, !, checkAllPathsWithoutBackEdges, (, next, ,, b, ), ), {, return, false, ;, }, }, return]
[(, DiGraphNode, <, N, ,, E, >, a, ,, DiGraphNode, <, N, ,, E, >, b, ), {, if, (]
[(, DiGraphNode, <, N, ,, E, >, a, ,, DiGraphNode, <, N, ,, E, >, b, ), {, if, (]
[(, DiGraphNode, <, N, ,, E, >, a, ,, DiGraphNode, <, N, ,, E, >, b, ), {, if, (]
[,, E, >, a, ,, DiGraphNode, <, N, ,, E, >, b, ), {, if, (, nodePredicate, ., apply, (]
[,, E, >, a, ,, DiGraphNode, <, N, ,, E, >, b, ), {, if, (, nodePredicate, ., apply, (]
[N, ,, E, >, b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&]
[,, E, >, b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (]
[,, E, >, b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (]
[>, b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||]
[b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (]
[b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (]
[b, ), {, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (]
[{, if, (, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=]
[(, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=, start, &&]
[(, nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=, start, &&]
[., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=, start, &&, a, !=]
[(, ), ), &&, (, inclusive, ||, (, a, !=, start, &&, a, !=, end, ), ), ), {, return]
[inclusive, ||, (, a, !=, start, &&, a, !=, end, ), ), ), {, return, true, ;, }, if, (]
[inclusive, ||, (, a, !=, start, &&, a, !=, end, ), ), ), {, return, true, ;, }, if, (]
[(, a, !=, start, &&, a, !=, end, ), ), ), {, return, true, ;, }, if, (, a, ==]
[&&, a, !=, end, ), ), ), {, return, true, ;, }, if, (, a, ==, b, ), {, return]
[(, a, ==, b, ), {, return, false, ;, }, for, (, DiGraphEdge, <, N, ,, E, >, e, :]
[(, a, ==, b, ), {, return, false, ;, }, for, (, DiGraphEdge, <, N, ,, E, >, e, :]
[}, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, ., getOutEdges, (, ), ), {, if, (]
[}, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, ., getOutEdges, (, ), ), {, if, (]
[}, for, (, DiGraphEdge, <, N, ,, E, >, e, :, a, ., getOutEdges, (, ), ), {, if, (]
[,, E, >, e, :, a, ., getOutEdges, (, ), ), {, if, (, e, ., getAnnotation, (, ), ==]
[., getOutEdges, (, ), ), {, if, (, e, ., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }]
[., getOutEdges, (, ), ), {, if, (, e, ., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }]
[), {, if, (, e, ., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }, e, ., setAnnotation, (]
[., getAnnotation, (, ), ==, VISITED_EDGE, ), {, continue, ;, }, e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (]
[(, ), ==, VISITED_EDGE, ), {, continue, ;, }, e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (]
[e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (]
[e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (]
[e, ., setAnnotation, (, VISITED_EDGE, ), ;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (]
[;, if, (, ignoreEdge, (, e, ), ), {, continue, ;, }, if, (, e, ., getAnnotation, (, ), ==]
[e, ., getAnnotation, (, ), ==, BACK_EDGE, ), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =]
[e, ., getAnnotation, (, ), ==, BACK_EDGE, ), {, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =]
[{, continue, ;, }, DiGraphNode, <, N, ,, E, >, next, =, e, ., getDestination, (, ), ;, if, (]
[;, }, DiGraphNode, <, N, ,, E, >, next, =, e, ., getDestination, (, ), ;, if, (, checkSomePathsWithoutBackEdges, (]
[DiGraphNode, <, N, ,, E, >, next, =, e, ., getDestination, (, ), ;, if, (, checkSomePathsWithoutBackEdges, (, next, ,]
[>, next, =, e, ., getDestination, (, ), ;, if, (, checkSomePathsWithoutBackEdges, (, next, ,, b, ), ), {, return]
[getDestination, (, ), ;, if, (, checkSomePathsWithoutBackEdges, (, next, ,, b, ), ), {, return, true, ;, }, }, return]
