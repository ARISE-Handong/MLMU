[commons, ., math3, ., random, ., Well19937c, ;, public, class, UniformIntegerDistribution, extends, AbstractIntegerDistribution, {, private, static, final, long, serialVersionUID, =]
[;, private, final, int, upper, ;, public, UniformIntegerDistribution, (, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, this, (]
[;, public, UniformIntegerDistribution, (, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, this, (, new, Well19937c, (, ), ,]
[UniformIntegerDistribution, (, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, this, (, new, Well19937c, (, ), ,, lower, ,]
[), ;, }, public, UniformIntegerDistribution, (, RandomGenerator, rng, ,, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, super, (]
[(, RandomGenerator, rng, ,, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (]
[(, RandomGenerator, rng, ,, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (]
[rng, ,, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (, lower, >=]
[,, int, upper, ), throws, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (, lower, >=, upper, ), {, throw]
[), throws, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (]
[), throws, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (]
[super, (, rng, ), ;, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,]
[rng, ), ;, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,]
[;, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,]
[>=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }]
[>=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }]
[throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, ., lower, =]
[NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, ., lower, =, lower, ;]
[NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, ., lower, =, lower, ;]
[LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, ., lower, =, lower, ;, this, ., upper, =]
[=, lower, ;, this, ., upper, =, upper, ;, }, public, double, probability, (, int, x, ), {, if, (]
[=, lower, ;, this, ., upper, =, upper, ;, }, public, double, probability, (, int, x, ), {, if, (]
[=, lower, ;, this, ., upper, =, upper, ;, }, public, double, probability, (, int, x, ), {, if, (]
[;, this, ., upper, =, upper, ;, }, public, double, probability, (, int, x, ), {, if, (, x, <]
[., upper, =, upper, ;, }, public, double, probability, (, int, x, ), {, if, (, x, <, lower, ||]
[., upper, =, upper, ;, }, public, double, probability, (, int, x, ), {, if, (, x, <, lower, ||]
[=, upper, ;, }, public, double, probability, (, int, x, ), {, if, (, x, <, lower, ||, x, >]
[public, double, probability, (, int, x, ), {, if, (, x, <, lower, ||, x, >, upper, ), {, return]
[int, x, ), {, if, (, x, <, lower, ||, x, >, upper, ), {, return, 0, ;, }, return]
[int, x, ), {, if, (, x, <, lower, ||, x, >, upper, ), {, return, 0, ;, }, return]
[), {, if, (, x, <, lower, ||, x, >, upper, ), {, return, 0, ;, }, return, 1.0, /]
[{, if, (, x, <, lower, ||, x, >, upper, ), {, return, 0, ;, }, return, 1.0, /, (]
[{, if, (, x, <, lower, ||, x, >, upper, ), {, return, 0, ;, }, return, 1.0, /, (]
[{, if, (, x, <, lower, ||, x, >, upper, ), {, return, 0, ;, }, return, 1.0, /, (]
[(, x, <, lower, ||, x, >, upper, ), {, return, 0, ;, }, return, 1.0, /, (, upper, -]
[<, lower, ||, x, >, upper, ), {, return, 0, ;, }, return, 1.0, /, (, upper, -, lower, +]
[/, (, upper, -, lower, +, 1, ), ;, }, public, double, cumulativeProbability, (, int, x, ), {, if, (]
[/, (, upper, -, lower, +, 1, ), ;, }, public, double, cumulativeProbability, (, int, x, ), {, if, (]
[upper, -, lower, +, 1, ), ;, }, public, double, cumulativeProbability, (, int, x, ), {, if, (, x, <]
[1, ), ;, }, public, double, cumulativeProbability, (, int, x, ), {, if, (, x, <, lower, ), {, return]
[double, cumulativeProbability, (, int, x, ), {, if, (, x, <, lower, ), {, return, 0, ;, }, if, (]
[double, cumulativeProbability, (, int, x, ), {, if, (, x, <, lower, ), {, return, 0, ;, }, if, (]
[(, int, x, ), {, if, (, x, <, lower, ), {, return, 0, ;, }, if, (, x, >]
[{, if, (, x, <, lower, ), {, return, 0, ;, }, if, (, x, >, upper, ), {, return]
[<, lower, ), {, return, 0, ;, }, if, (, x, >, upper, ), {, return, 1, ;, }, return]
[<, lower, ), {, return, 0, ;, }, if, (, x, >, upper, ), {, return, 1, ;, }, return]
[lower, ), {, return, 0, ;, }, if, (, x, >, upper, ), {, return, 1, ;, }, return, (]
[lower, ), {, return, 0, ;, }, if, (, x, >, upper, ), {, return, 1, ;, }, return, (]
[lower, ), {, return, 0, ;, }, if, (, x, >, upper, ), {, return, 1, ;, }, return, (]
[{, return, 0, ;, }, if, (, x, >, upper, ), {, return, 1, ;, }, return, (, x, -]
[0, ;, }, if, (, x, >, upper, ), {, return, 1, ;, }, return, (, x, -, lower, +]
[if, (, x, >, upper, ), {, return, 1, ;, }, return, (, x, -, lower, +, 1.0, ), /]
[(, x, >, upper, ), {, return, 1, ;, }, return, (, x, -, lower, +, 1.0, ), /, (]
[(, x, >, upper, ), {, return, 1, ;, }, return, (, x, -, lower, +, 1.0, ), /, (]
[(, x, >, upper, ), {, return, 1, ;, }, return, (, x, -, lower, +, 1.0, ), /, (]
[>, upper, ), {, return, 1, ;, }, return, (, x, -, lower, +, 1.0, ), /, (, upper, -]
[), {, return, 1, ;, }, return, (, x, -, lower, +, 1.0, ), /, (, upper, -, lower, +]
[+, 1.0, ), /, (, upper, -, lower, +, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return]
[+, 1.0, ), /, (, upper, -, lower, +, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return]
[), /, (, upper, -, lower, +, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *]
[/, (, upper, -, lower, +, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (]
[/, (, upper, -, lower, +, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (]
[upper, -, lower, +, 1.0, ), ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +]
[{, return, 0.5, *, (, lower, +, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =]
[{, return, 0.5, *, (, lower, +, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =]
[{, return, 0.5, *, (, lower, +, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =]
[0.5, *, (, lower, +, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -]
[(, lower, +, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower, +]
[upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower, +, 1, ;, return]
[upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower, +, 1, ;, return]
[), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower, +, 1, ;, return, (]
[), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower, +, 1, ;, return, (]
[), ;, }, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower, +, 1, ;, return, (]
[}, public, double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower, +, 1, ;, return, (, n, *]
[double, getNumericalVariance, (, ), {, double, n, =, upper, -, lower, +, 1, ;, return, (, n, *, n, -]
[), {, double, n, =, upper, -, lower, +, 1, ;, return, (, n, *, n, -, 1, ), /]
[;, return, (, n, *, n, -, 1, ), /, 12.0, ;, }, public, int, getSupportLowerBound, (, ), {, return]
[12.0, ;, }, public, int, getSupportLowerBound, (, ), {, return, lower, ;, }, public, int, getSupportUpperBound, (, ), {, return]
[lower, ;, }, public, int, getSupportUpperBound, (, ), {, return, upper, ;, }, public, boolean, isSupportConnected, (, ), {, return]
[isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, int, sample, (, ), {, final, int, max, =]
[isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, int, sample, (, ), {, final, int, max, =]
[(, ), {, return, true, ;, }, @, Override, public, int, sample, (, ), {, final, int, max, =, (]
[(, ), {, return, true, ;, }, @, Override, public, int, sample, (, ), {, final, int, max, =, (]
[{, return, true, ;, }, @, Override, public, int, sample, (, ), {, final, int, max, =, (, upper, -]
[;, }, @, Override, public, int, sample, (, ), {, final, int, max, =, (, upper, -, lower, ), +]
[public, int, sample, (, ), {, final, int, max, =, (, upper, -, lower, ), +, 1, ;, if, (]
[public, int, sample, (, ), {, final, int, max, =, (, upper, -, lower, ), +, 1, ;, if, (]
[sample, (, ), {, final, int, max, =, (, upper, -, lower, ), +, 1, ;, if, (, max, <=]
[int, max, =, (, upper, -, lower, ), +, 1, ;, if, (, max, <=, 0, ), {, while, (]
[), +, 1, ;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, int, r, =]
[), +, 1, ;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, int, r, =]
[0, ), {, while, (, true, ), {, final, int, r, =, random, ., nextInt, (, ), ;, if, (]
[0, ), {, while, (, true, ), {, final, int, r, =, random, ., nextInt, (, ), ;, if, (]
[0, ), {, while, (, true, ), {, final, int, r, =, random, ., nextInt, (, ), ;, if, (]
[{, while, (, true, ), {, final, int, r, =, random, ., nextInt, (, ), ;, if, (, r, >=]
[(, true, ), {, final, int, r, =, random, ., nextInt, (, ), ;, if, (, r, >=, lower, &&]
[(, true, ), {, final, int, r, =, random, ., nextInt, (, ), ;, if, (, r, >=, lower, &&]
[), {, final, int, r, =, random, ., nextInt, (, ), ;, if, (, r, >=, lower, &&, r, <=]
[r, =, random, ., nextInt, (, ), ;, if, (, r, >=, lower, &&, r, <=, upper, ), {, return]
[if, (, r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, {, return]
[if, (, r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, {, return]
[r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, {, return, lower, +]
[r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, {, return, lower, +]
[r, <=, upper, ), {, return, r, ;, }, }, }, else, {, return, lower, +, random, ., nextInt, (]
