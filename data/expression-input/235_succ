[;, private, static, final, long, serialVersionUID, =, -, 5852615386664158222L, ;, private, final, double, degreesOfFreedom, ;, private, final, double, solverAbsoluteAccuracy, ;]
[;, private, final, double, degreesOfFreedom, ;, private, final, double, solverAbsoluteAccuracy, ;, public, TDistribution, (, double, degreesOfFreedom, ), throws, NotStrictlyPositiveException, {]
[;, private, final, double, degreesOfFreedom, ;, private, final, double, solverAbsoluteAccuracy, ;, public, TDistribution, (, double, degreesOfFreedom, ), throws, NotStrictlyPositiveException, {]
[,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, TDistribution, (, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new]
[), ;, }, public, TDistribution, (, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (]
[,, degreesOfFreedom, ,, inverseCumAccuracy, ), ;, }, public, TDistribution, (, RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), throws]
[,, inverseCumAccuracy, ), ;, }, public, TDistribution, (, RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {]
[), ;, }, public, TDistribution, (, RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (]
[), ;, if, (, degreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, degreesOfFreedom, ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, degreesOfFreedom, ), ;, }, this, ., degreesOfFreedom, =, degreesOfFreedom, ;]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, degreesOfFreedom, ), ;, }, this, ., degreesOfFreedom, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, degreesOfFreedom, ), ;, }, this, ., degreesOfFreedom, =, degreesOfFreedom, ;]
[;, }, this, ., degreesOfFreedom, =, degreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return]
[,, degreesOfFreedom, ), ;, }, this, ., degreesOfFreedom, =, degreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (]
[., DEGREES_OF_FREEDOM, ,, degreesOfFreedom, ), ;, }, this, ., degreesOfFreedom, =, degreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double]
[), ;, }, this, ., degreesOfFreedom, =, degreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {]
[=, degreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return, degreesOfFreedom, ;, }, public, double]
[., degreesOfFreedom, =, degreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return, degreesOfFreedom, ;, }]
[;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return, degreesOfFreedom, ;, }, public, double, density, (]
[=, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return, degreesOfFreedom, ;, }, public, double, density, (, double, x]
[;, }, public, double, getDegreesOfFreedom, (, ), {, return, degreesOfFreedom, ;, }, public, double, density, (, double, x, ), {]
[;, }, public, double, density, (, double, x, ), {, final, double, n, =, degreesOfFreedom, ;, final, double, nPlus1Over2, =]
[;, final, double, nPlus1Over2, =, (, n, +, 1, ), /, 2, ;, return, FastMath, ., exp, (, Gamma, .]
[;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *, (, FastMath, ., log, (]
[/, 2, ;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *, (, FastMath, .]
[), /, 2, ;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *, (, FastMath]
[+, 1, ), /, 2, ;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *]
[), /, 2, ;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *, (, FastMath]
[;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *, (, FastMath, ., log, (]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, ==, 0, ), {]
[., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *, (, FastMath, ., log, (, FastMath, ., PI]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, ==, 0, )]
[-, nPlus1Over2, *, FastMath, ., log, (, 1, +, x, *, x, /, n, ), ), ;, }, public, double]
[-, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (, 1, +, x, *]
[-, 0.5, *, (, FastMath, ., log, (, FastMath, ., PI, ), +, FastMath, ., log, (, n, ), )]
[., logGamma, (, nPlus1Over2, ), -, 0.5, *, (, FastMath, ., log, (, FastMath, ., PI, ), +, FastMath, .]
[), -, 0.5, *, (, FastMath, ., log, (, FastMath, ., PI, ), +, FastMath, ., log, (, n, )]
[-, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (, 1, +, x, *]
[*, (, FastMath, ., log, (, FastMath, ., PI, ), +, FastMath, ., log, (, n, ), ), -, Gamma]
[-, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (, 1, +, x, *]
[), -, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (, 1, +, x]
[+, FastMath, ., log, (, n, ), ), -, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *]
[., log, (, FastMath, ., PI, ), +, FastMath, ., log, (, n, ), ), -, Gamma, ., logGamma, (]
[), +, FastMath, ., log, (, n, ), ), -, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2]
[., PI, ), +, FastMath, ., log, (, n, ), ), -, Gamma, ., logGamma, (, n, /, 2, )]
[), -, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (, 1, +, x]
[., log, (, n, ), ), -, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, .]
[), ), -, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (, 1, +]
[-, nPlus1Over2, *, FastMath, ., log, (, 1, +, x, *, x, /, n, ), ), ;, }, public, double]
[., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (, 1, +, x, *, x, /]
[), -, nPlus1Over2, *, FastMath, ., log, (, 1, +, x, *, x, /, n, ), ), ;, }, public]
[/, 2, ), -, nPlus1Over2, *, FastMath, ., log, (, 1, +, x, *, x, /, n, ), ), ;]
[), -, nPlus1Over2, *, FastMath, ., log, (, 1, +, x, *, x, /, n, ), ), ;, }, public]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, ==, 0, )]
[*, FastMath, ., log, (, 1, +, x, *, x, /, n, ), ), ;, }, public, double, cumulativeProbability, (]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, ==, 0, )]
[., log, (, 1, +, x, *, x, /, n, ), ), ;, }, public, double, cumulativeProbability, (, double, x]
[), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, ==, 0]
[+, x, *, x, /, n, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret]
[), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, ==, 0]
[/, n, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x]
[*, x, /, n, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if]
[/, n, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x]
[), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, ==, 0]
[), {, ret, =, 0.5, ;, }, else, {, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /, (, degreesOfFreedom]
[==, 0, ), {, ret, =, 0.5, ;, }, else, {, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /]
[), {, ret, =, 0.5, ;, }, else, {, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /, (, degreesOfFreedom]
[=, 0.5, ;, }, else, {, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /, (, degreesOfFreedom, +, (, x]
[;, }, else, {, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /, (, degreesOfFreedom, +, (, x, *, x]
[;, if, (, x, <, 0.0, ), {, ret, =, 0.5, *, t, ;, }, else, {, ret, =, 1.0]
[., regularizedBeta, (, degreesOfFreedom, /, (, degreesOfFreedom, +, (, x, *, x, ), ), ,, 0.5, *, degreesOfFreedom, ,, 0.5]
[,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5, *, t]
[/, (, degreesOfFreedom, +, (, x, *, x, ), ), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (]
[,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5, *, t]
[), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5, *]
[+, (, x, *, x, ), ), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <, 0.0]
[), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5, *]
[), ), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5]
[*, x, ), ), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret]
[), ), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5]
[,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5, *, t, ;, }, else, {]
[*, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5, *, t, ;, }]
[,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5, *, t, ;, }, else, {]
[), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5, *, t, ;, }, else, {, ret, =]
[), {, ret, =, 0.5, *, t, ;, }, else, {, ret, =, 1.0, -, 0.5, *, t, ;, }]
[<, 0.0, ), {, ret, =, 0.5, *, t, ;, }, else, {, ret, =, 1.0, -, 0.5, *, t]
[), {, ret, =, 0.5, *, t, ;, }, else, {, ret, =, 1.0, -, 0.5, *, t, ;, }]
[=, 0.5, *, t, ;, }, else, {, ret, =, 1.0, -, 0.5, *, t, ;, }, }, return, ret]
[;, }, else, {, ret, =, 1.0, -, 0.5, *, t, ;, }, }, return, ret, ;, }, @, Override]
[*, t, ;, }, else, {, ret, =, 1.0, -, 0.5, *, t, ;, }, }, return, ret, ;, }]
[;, }, else, {, ret, =, 1.0, -, 0.5, *, t, ;, }, }, return, ret, ;, }, @, Override]
[=, 1.0, -, 0.5, *, t, ;, }, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, )]
[;, }, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public]
[-, 0.5, *, t, ;, }, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[;, }, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public]
[*, t, ;, }, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;]
[;, }, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public]
[;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {]
[;, }, public, double, getNumericalMean, (, ), {, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (, df, >]
[;, if, (, df, >, 1, ), {, return, 0, ;, }, return, Double, ., NaN, ;, }, public, double]
[), {, return, 0, ;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, final, double]
[>, 1, ), {, return, 0, ;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {]
[), {, return, 0, ;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, final, double]
[;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, final, double, df, =, getDegreesOfFreedom, (]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (, df, >]
[., NaN, ;, }, public, double, getNumericalVariance, (, ), {, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (]
[;, if, (, df, >, 2, ), {, return, df, /, (, df, -, 2, ), ;, }, if, (]
[), {, return, df, /, (, df, -, 2, ), ;, }, if, (, df, >, 1, &&, df, <=]
[>, 2, ), {, return, df, /, (, df, -, 2, ), ;, }, if, (, df, >, 1, &&]
[), {, return, df, /, (, df, -, 2, ), ;, }, if, (, df, >, 1, &&, df, <=]
[;, }, if, (, df, >, 1, &&, df, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return]
[/, (, df, -, 2, ), ;, }, if, (, df, >, 1, &&, df, <=, 2, ), {, return]
[;, }, if, (, df, >, 1, &&, df, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return]
[), ;, }, if, (, df, >, 1, &&, df, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }]
[-, 2, ), ;, }, if, (, df, >, 1, &&, df, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY]
[), ;, }, if, (, df, >, 1, &&, df, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {]
[&&, df, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., NaN, ;, }, public, double]
[>, 1, &&, df, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., NaN, ;, }]
[&&, df, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., NaN, ;, }, public, double]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {]
[<=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {]
[;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }]
[., POSITIVE_INFINITY, ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY]
[;, }, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (, ), {]
[., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (]
[;, }, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {]
[., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (]
[;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false]
[., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return, true]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[;, }, }]
