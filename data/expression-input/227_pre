[>, implements, WithStartPoint, <, GaussianCurveFitter, >, ,, WithMaxIterations, <, GaussianCurveFitter, >, {, private, static, final, Gaussian, ., Parametric, FUNCTION, =]
[(, ), {, @, Override, public, double, value, (, double, x, ,, double, ..., p, ), {, double, v, =]
[(, ), {, @, Override, public, double, value, (, double, x, ,, double, ..., p, ), {, double, v, =]
[double, value, (, double, x, ,, double, ..., p, ), {, double, v, =, Double, ., POSITIVE_INFINITY, ;, try, {]
[(, double, x, ,, double, ..., p, ), {, double, v, =, Double, ., POSITIVE_INFINITY, ;, try, {, v, =]
[(, double, x, ,, double, ..., p, ), {, double, v, =, Double, ., POSITIVE_INFINITY, ;, try, {, v, =]
[double, ..., p, ), {, double, v, =, Double, ., POSITIVE_INFINITY, ;, try, {, v, =, super, ., value, (]
[p, ), {, double, v, =, Double, ., POSITIVE_INFINITY, ;, try, {, v, =, super, ., value, (, x, ,]
[v, =, super, ., value, (, x, ,, p, ), ;, }, catch, (, NotStrictlyPositiveException, e, ), {, }, return]
[Override, public, double, [, ], gradient, (, double, x, ,, double, ..., p, ), {, double, [, ], v, =]
[public, double, [, ], gradient, (, double, x, ,, double, ..., p, ), {, double, [, ], v, =, {]
[public, double, [, ], gradient, (, double, x, ,, double, ..., p, ), {, double, [, ], v, =, {]
[gradient, (, double, x, ,, double, ..., p, ), {, double, [, ], v, =, {, Double, ., POSITIVE_INFINITY, ,]
[gradient, (, double, x, ,, double, ..., p, ), {, double, [, ], v, =, {, Double, ., POSITIVE_INFINITY, ,]
[,, double, ..., p, ), {, double, [, ], v, =, {, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,]
[,, double, ..., p, ), {, double, [, ], v, =, {, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,]
[[, ], v, =, {, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, }, ;, try, {]
[v, =, {, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, }, ;, try, {, v, =]
[v, =, {, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, }, ;, try, {, v, =]
[., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, }, ;, try, {, v, =, super, ., gradient, (]
[,, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, }, ;, try, {, v, =, super, ., gradient, (, x, ,]
[v, =, super, ., gradient, (, x, ,, p, ), ;, }, catch, (, NotStrictlyPositiveException, e, ), {, }, return]
[], initialGuess, ;, private, final, int, maxIter, ;, private, GaussianCurveFitter, (, double, [, ], initialGuess, ,, int, maxIter, ), {]
[], initialGuess, ;, private, final, int, maxIter, ;, private, GaussianCurveFitter, (, double, [, ], initialGuess, ,, int, maxIter, ), {]
[final, int, maxIter, ;, private, GaussianCurveFitter, (, double, [, ], initialGuess, ,, int, maxIter, ), {, this, ., initialGuess, =]
[maxIter, ;, private, GaussianCurveFitter, (, double, [, ], initialGuess, ,, int, maxIter, ), {, this, ., initialGuess, =, initialGuess, ;]
[maxIter, ;, private, GaussianCurveFitter, (, double, [, ], initialGuess, ,, int, maxIter, ), {, this, ., initialGuess, =, initialGuess, ;]
[(, double, [, ], initialGuess, ,, int, maxIter, ), {, this, ., initialGuess, =, initialGuess, ;, this, ., maxIter, =]
[., initialGuess, =, initialGuess, ;, this, ., maxIter, =, maxIter, ;, }, public, static, GaussianCurveFitter, create, (, ), {, return]
[initialGuess, ;, this, ., maxIter, =, maxIter, ;, }, public, static, GaussianCurveFitter, create, (, ), {, return, new, GaussianCurveFitter, (]
[this, ., maxIter, =, maxIter, ;, }, public, static, GaussianCurveFitter, create, (, ), {, return, new, GaussianCurveFitter, (, null, ,]
[this, ., maxIter, =, maxIter, ;, }, public, static, GaussianCurveFitter, create, (, ), {, return, new, GaussianCurveFitter, (, null, ,]
[(, null, ,, Integer, ., MAX_VALUE, ), ;, }, public, GaussianCurveFitter, withStartPoint, (, double, [, ], start, ), {, return]
[Integer, ., MAX_VALUE, ), ;, }, public, GaussianCurveFitter, withStartPoint, (, double, [, ], start, ), {, return, new, GaussianCurveFitter, (]
[Integer, ., MAX_VALUE, ), ;, }, public, GaussianCurveFitter, withStartPoint, (, double, [, ], start, ), {, return, new, GaussianCurveFitter, (]
[public, GaussianCurveFitter, withStartPoint, (, double, [, ], start, ), {, return, new, GaussianCurveFitter, (, start, ., clone, (, ), ,]
[(, start, ., clone, (, ), ,, maxIter, ), ;, }, public, GaussianCurveFitter, withMaxIterations, (, int, max, ), {, return]
[clone, (, ), ,, maxIter, ), ;, }, public, GaussianCurveFitter, withMaxIterations, (, int, max, ), {, return, new, GaussianCurveFitter, (]
[), ,, maxIter, ), ;, }, public, GaussianCurveFitter, withMaxIterations, (, int, max, ), {, return, new, GaussianCurveFitter, (, initialGuess, ,]
[), ;, }, @, Override, protected, LevenbergMarquardtOptimizer, getOptimizer, (, Collection, <, WeightedObservedPoint, >, observations, ), {, final, int, len, =]
[), ;, }, @, Override, protected, LevenbergMarquardtOptimizer, getOptimizer, (, Collection, <, WeightedObservedPoint, >, observations, ), {, final, int, len, =]
[>, observations, ), {, final, int, len, =, observations, ., size, (, ), ;, final, double, [, ], target, =]
[{, final, int, len, =, observations, ., size, (, ), ;, final, double, [, ], target, =, new, double, []
[), ;, final, double, [, ], target, =, new, double, [, len, ], ;, final, double, [, ], weights, =]
[double, [, ], target, =, new, double, [, len, ], ;, final, double, [, ], weights, =, new, double, []
[double, [, len, ], ;, final, double, [, ], weights, =, new, double, [, len, ], ;, int, i, =]
[[, ], weights, =, new, double, [, len, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :]
[=, new, double, [, len, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {]
[=, new, double, [, len, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {]
[double, [, len, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {, target, []
[], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {, target, [, i, ], =]
[], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, obs, :, observations, ), {, target, [, i, ], =]
[;, for, (, WeightedObservedPoint, obs, :, observations, ), {, target, [, i, ], =, obs, ., getY, (, ), ;]
[;, for, (, WeightedObservedPoint, obs, :, observations, ), {, target, [, i, ], =, obs, ., getY, (, ), ;]
[(, WeightedObservedPoint, obs, :, observations, ), {, target, [, i, ], =, obs, ., getY, (, ), ;, weights, []
[:, observations, ), {, target, [, i, ], =, obs, ., getY, (, ), ;, weights, [, i, ], =]
[:, observations, ), {, target, [, i, ], =, obs, ., getY, (, ), ;, weights, [, i, ], =]
[i, ], =, obs, ., getY, (, ), ;, weights, [, i, ], =, obs, ., getWeight, (, ), ;]
[], =, obs, ., getY, (, ), ;, weights, [, i, ], =, obs, ., getWeight, (, ), ;, ++]
[[, i, ], =, obs, ., getWeight, (, ), ;, ++, i, ;, }, final, AbstractCurveFitter, ., TheoreticalValuesFunction, model, =]
[., getWeight, (, ), ;, ++, i, ;, }, final, AbstractCurveFitter, ., TheoreticalValuesFunction, model, =, new, AbstractCurveFitter, ., TheoreticalValuesFunction, (]
[(, ), ;, ++, i, ;, }, final, AbstractCurveFitter, ., TheoreticalValuesFunction, model, =, new, AbstractCurveFitter, ., TheoreticalValuesFunction, (, FUNCTION, ,]
[., TheoreticalValuesFunction, model, =, new, AbstractCurveFitter, ., TheoreticalValuesFunction, (, FUNCTION, ,, observations, ), ;, final, double, [, ], startPoint, =]
[., TheoreticalValuesFunction, model, =, new, AbstractCurveFitter, ., TheoreticalValuesFunction, (, FUNCTION, ,, observations, ), ;, final, double, [, ], startPoint, =]
[., TheoreticalValuesFunction, model, =, new, AbstractCurveFitter, ., TheoreticalValuesFunction, (, FUNCTION, ,, observations, ), ;, final, double, [, ], startPoint, =]
[model, =, new, AbstractCurveFitter, ., TheoreticalValuesFunction, (, FUNCTION, ,, observations, ), ;, final, double, [, ], startPoint, =, initialGuess, !=]
[new, AbstractCurveFitter, ., TheoreticalValuesFunction, (, FUNCTION, ,, observations, ), ;, final, double, [, ], startPoint, =, initialGuess, !=, null, ?]
[., TheoreticalValuesFunction, (, FUNCTION, ,, observations, ), ;, final, double, [, ], startPoint, =, initialGuess, !=, null, ?, initialGuess, :]
[., TheoreticalValuesFunction, (, FUNCTION, ,, observations, ), ;, final, double, [, ], startPoint, =, initialGuess, !=, null, ?, initialGuess, :]
[FUNCTION, ,, observations, ), ;, final, double, [, ], startPoint, =, initialGuess, !=, null, ?, initialGuess, :, new, ParameterGuesser, (]
[], startPoint, =, initialGuess, !=, null, ?, initialGuess, :, new, ParameterGuesser, (, observations, ), ., guess, (, ), ;, return]
[], startPoint, =, initialGuess, !=, null, ?, initialGuess, :, new, ParameterGuesser, (, observations, ), ., guess, (, ), ;, return]
[], startPoint, =, initialGuess, !=, null, ?, initialGuess, :, new, ParameterGuesser, (, observations, ), ., guess, (, ), ;, return]
[], startPoint, =, initialGuess, !=, null, ?, initialGuess, :, new, ParameterGuesser, (, observations, ), ., guess, (, ), ;, return]
[], startPoint, =, initialGuess, !=, null, ?, initialGuess, :, new, ParameterGuesser, (, observations, ), ., guess, (, ), ;, return]
[], startPoint, =, initialGuess, !=, null, ?, initialGuess, :, new, ParameterGuesser, (, observations, ), ., guess, (, ), ;, return]
[], startPoint, =, initialGuess, !=, null, ?, initialGuess, :, new, ParameterGuesser, (, observations, ), ., guess, (, ), ;, return]
[], startPoint, =, initialGuess, !=, null, ?, initialGuess, :, new, ParameterGuesser, (, observations, ), ., guess, (, ), ;, return]
[:, new, ParameterGuesser, (, observations, ), ., guess, (, ), ;, return, LevenbergMarquardtOptimizer, ., create, (, ), ., withMaxEvaluations, (]
[:, new, ParameterGuesser, (, observations, ), ., guess, (, ), ;, return, LevenbergMarquardtOptimizer, ., create, (, ), ., withMaxEvaluations, (]
[guess, (, ), ;, return, LevenbergMarquardtOptimizer, ., create, (, ), ., withMaxEvaluations, (, Integer, ., MAX_VALUE, ), ., withMaxIterations, (]
[LevenbergMarquardtOptimizer, ., create, (, ), ., withMaxEvaluations, (, Integer, ., MAX_VALUE, ), ., withMaxIterations, (, maxIter, ), ., withStartPoint, (]
[., withMaxEvaluations, (, Integer, ., MAX_VALUE, ), ., withMaxIterations, (, maxIter, ), ., withStartPoint, (, startPoint, ), ., withTarget, (]
[MAX_VALUE, ), ., withMaxIterations, (, maxIter, ), ., withStartPoint, (, startPoint, ), ., withTarget, (, target, ), ., withWeight, (]
[withMaxIterations, (, maxIter, ), ., withStartPoint, (, startPoint, ), ., withTarget, (, target, ), ., withWeight, (, new, DiagonalMatrix, (]
[(, startPoint, ), ., withTarget, (, target, ), ., withWeight, (, new, DiagonalMatrix, (, weights, ), ), ., withModelAndJacobian, (]
[(, startPoint, ), ., withTarget, (, target, ), ., withWeight, (, new, DiagonalMatrix, (, weights, ), ), ., withModelAndJacobian, (]
[target, ), ., withWeight, (, new, DiagonalMatrix, (, weights, ), ), ., withModelAndJacobian, (, model, ., getModelFunction, (, ), ,]
[target, ), ., withWeight, (, new, DiagonalMatrix, (, weights, ), ), ., withModelAndJacobian, (, model, ., getModelFunction, (, ), ,]
[double, mean, ;, private, final, double, sigma, ;, public, ParameterGuesser, (, Collection, <, WeightedObservedPoint, >, observations, ), {, if, (]
[double, mean, ;, private, final, double, sigma, ;, public, ParameterGuesser, (, Collection, <, WeightedObservedPoint, >, observations, ), {, if, (]
[;, private, final, double, sigma, ;, public, ParameterGuesser, (, Collection, <, WeightedObservedPoint, >, observations, ), {, if, (, observations, ==]
[sigma, ;, public, ParameterGuesser, (, Collection, <, WeightedObservedPoint, >, observations, ), {, if, (, observations, ==, null, ), {, throw]
[ParameterGuesser, (, Collection, <, WeightedObservedPoint, >, observations, ), {, if, (, observations, ==, null, ), {, throw, new, NullArgumentException, (]
[ParameterGuesser, (, Collection, <, WeightedObservedPoint, >, observations, ), {, if, (, observations, ==, null, ), {, throw, new, NullArgumentException, (]
[{, if, (, observations, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (]
[{, if, (, observations, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (]
[{, if, (, observations, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, observations, ., size, (, ), <]
[NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, observations, ., size, (, ), <, 3, ), {, throw]
[., INPUT_ARRAY, ), ;, }, if, (, observations, ., size, (, ), <, 3, ), {, throw, new, NumberIsTooSmallException, (]
[., INPUT_ARRAY, ), ;, }, if, (, observations, ., size, (, ), <, 3, ), {, throw, new, NumberIsTooSmallException, (]
[(, observations, ., size, (, ), <, 3, ), {, throw, new, NumberIsTooSmallException, (, observations, ., size, (, ), ,]
[., size, (, ), <, 3, ), {, throw, new, NumberIsTooSmallException, (, observations, ., size, (, ), ,, 3, ,]
[(, observations, ., size, (, ), ,, 3, ,, true, ), ;, }, final, List, <, WeightedObservedPoint, >, sorted, =]
[., size, (, ), ,, 3, ,, true, ), ;, }, final, List, <, WeightedObservedPoint, >, sorted, =, sortObservations, (]
[;, }, final, List, <, WeightedObservedPoint, >, sorted, =, sortObservations, (, observations, ), ;, final, double, [, ], params, =]
[final, List, <, WeightedObservedPoint, >, sorted, =, sortObservations, (, observations, ), ;, final, double, [, ], params, =, basicGuess, (]
[final, List, <, WeightedObservedPoint, >, sorted, =, sortObservations, (, observations, ), ;, final, double, [, ], params, =, basicGuess, (]
[>, sorted, =, sortObservations, (, observations, ), ;, final, double, [, ], params, =, basicGuess, (, sorted, ., toArray, (]
[sortObservations, (, observations, ), ;, final, double, [, ], params, =, basicGuess, (, sorted, ., toArray, (, new, WeightedObservedPoint, []
[final, double, [, ], params, =, basicGuess, (, sorted, ., toArray, (, new, WeightedObservedPoint, [, 0, ], ), ), ;]
[[, ], params, =, basicGuess, (, sorted, ., toArray, (, new, WeightedObservedPoint, [, 0, ], ), ), ;, norm, =]
[[, ], params, =, basicGuess, (, sorted, ., toArray, (, new, WeightedObservedPoint, [, 0, ], ), ), ;, norm, =]
[params, =, basicGuess, (, sorted, ., toArray, (, new, WeightedObservedPoint, [, 0, ], ), ), ;, norm, =, params, []
[(, sorted, ., toArray, (, new, WeightedObservedPoint, [, 0, ], ), ), ;, norm, =, params, [, 0, ], ;]
[., toArray, (, new, WeightedObservedPoint, [, 0, ], ), ), ;, norm, =, params, [, 0, ], ;, mean, =]
[., toArray, (, new, WeightedObservedPoint, [, 0, ], ), ), ;, norm, =, params, [, 0, ], ;, mean, =]
[(, new, WeightedObservedPoint, [, 0, ], ), ), ;, norm, =, params, [, 0, ], ;, mean, =, params, []
[[, 0, ], ), ), ;, norm, =, params, [, 0, ], ;, mean, =, params, [, 1, ], ;]
[], ), ), ;, norm, =, params, [, 0, ], ;, mean, =, params, [, 1, ], ;, sigma, =]
[], ), ), ;, norm, =, params, [, 0, ], ;, mean, =, params, [, 1, ], ;, sigma, =]
[), ;, norm, =, params, [, 0, ], ;, mean, =, params, [, 1, ], ;, sigma, =, params, []
[1, ], ;, sigma, =, params, [, 2, ], ;, }, public, double, [, ], guess, (, ), {, return]
[=, params, [, 2, ], ;, }, public, double, [, ], guess, (, ), {, return, new, double, [, ]]
[params, [, 2, ], ;, }, public, double, [, ], guess, (, ), {, return, new, double, [, ], {]
[2, ], ;, }, public, double, [, ], guess, (, ), {, return, new, double, [, ], {, norm, ,]
[;, }, public, double, [, ], guess, (, ), {, return, new, double, [, ], {, norm, ,, mean, ,]
[List, <, WeightedObservedPoint, >, sortObservations, (, Collection, <, WeightedObservedPoint, >, unsorted, ), {, final, List, <, WeightedObservedPoint, >, observations, =]
[Collection, <, WeightedObservedPoint, >, unsorted, ), {, final, List, <, WeightedObservedPoint, >, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (]
[WeightedObservedPoint, >, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (, unsorted, ), ;, final, Comparator, <, WeightedObservedPoint, >, cmp, =]
[Comparator, <, WeightedObservedPoint, >, (, ), {, public, int, compare, (, WeightedObservedPoint, p1, ,, WeightedObservedPoint, p2, ), {, if, (]
[Comparator, <, WeightedObservedPoint, >, (, ), {, public, int, compare, (, WeightedObservedPoint, p1, ,, WeightedObservedPoint, p2, ), {, if, (]
[Comparator, <, WeightedObservedPoint, >, (, ), {, public, int, compare, (, WeightedObservedPoint, p1, ,, WeightedObservedPoint, p2, ), {, if, (]
[WeightedObservedPoint, >, (, ), {, public, int, compare, (, WeightedObservedPoint, p1, ,, WeightedObservedPoint, p2, ), {, if, (, p1, ==]
[(, ), {, public, int, compare, (, WeightedObservedPoint, p1, ,, WeightedObservedPoint, p2, ), {, if, (, p1, ==, null, &&]
[(, ), {, public, int, compare, (, WeightedObservedPoint, p1, ,, WeightedObservedPoint, p2, ), {, if, (, p1, ==, null, &&]
[{, public, int, compare, (, WeightedObservedPoint, p1, ,, WeightedObservedPoint, p2, ), {, if, (, p1, ==, null, &&, p2, ==]
[(, WeightedObservedPoint, p1, ,, WeightedObservedPoint, p2, ), {, if, (, p1, ==, null, &&, p2, ==, null, ), {, return]
[p2, ), {, if, (, p1, ==, null, &&, p2, ==, null, ), {, return, 0, ;, }, if, (]
[p2, ), {, if, (, p1, ==, null, &&, p2, ==, null, ), {, return, 0, ;, }, if, (]
[{, if, (, p1, ==, null, &&, p2, ==, null, ), {, return, 0, ;, }, if, (, p1, ==]
[==, null, &&, p2, ==, null, ), {, return, 0, ;, }, if, (, p1, ==, null, ), {, return]
[null, &&, p2, ==, null, ), {, return, 0, ;, }, if, (, p1, ==, null, ), {, return, -]
[), {, return, 0, ;, }, if, (, p1, ==, null, ), {, return, -, 1, ;, }, if, (]
[), {, return, 0, ;, }, if, (, p1, ==, null, ), {, return, -, 1, ;, }, if, (]
[return, 0, ;, }, if, (, p1, ==, null, ), {, return, -, 1, ;, }, if, (, p2, ==]
[if, (, p1, ==, null, ), {, return, -, 1, ;, }, if, (, p2, ==, null, ), {, return]
[), {, return, -, 1, ;, }, if, (, p2, ==, null, ), {, return, 1, ;, }, if, (]
[), {, return, -, 1, ;, }, if, (, p2, ==, null, ), {, return, 1, ;, }, if, (]
[), {, return, -, 1, ;, }, if, (, p2, ==, null, ), {, return, 1, ;, }, if, (]
[}, if, (, p2, ==, null, ), {, return, 1, ;, }, if, (, p1, ., getX, (, ), <]
[}, if, (, p2, ==, null, ), {, return, 1, ;, }, if, (, p1, ., getX, (, ), <]
[return, 1, ;, }, if, (, p1, ., getX, (, ), <, p2, ., getX, (, ), ), {, return]
[1, ;, }, if, (, p1, ., getX, (, ), <, p2, ., getX, (, ), ), {, return, -]
[p1, ., getX, (, ), <, p2, ., getX, (, ), ), {, return, -, 1, ;, }, if, (]
[p1, ., getX, (, ), <, p2, ., getX, (, ), ), {, return, -, 1, ;, }, if, (]
[p1, ., getX, (, ), <, p2, ., getX, (, ), ), {, return, -, 1, ;, }, if, (]
[p2, ., getX, (, ), ), {, return, -, 1, ;, }, if, (, p1, ., getX, (, ), >]
[p2, ., getX, (, ), ), {, return, -, 1, ;, }, if, (, p1, ., getX, (, ), >]
[-, 1, ;, }, if, (, p1, ., getX, (, ), >, p2, ., getX, (, ), ), {, return]
[(, p1, ., getX, (, ), >, p2, ., getX, (, ), ), {, return, 1, ;, }, if, (]
[(, p1, ., getX, (, ), >, p2, ., getX, (, ), ), {, return, 1, ;, }, if, (]
[(, p1, ., getX, (, ), >, p2, ., getX, (, ), ), {, return, 1, ;, }, if, (]
[>, p2, ., getX, (, ), ), {, return, 1, ;, }, if, (, p1, ., getY, (, ), <]
[>, p2, ., getX, (, ), ), {, return, 1, ;, }, if, (, p1, ., getY, (, ), <]
[return, 1, ;, }, if, (, p1, ., getY, (, ), <, p2, ., getY, (, ), ), {, return]
[1, ;, }, if, (, p1, ., getY, (, ), <, p2, ., getY, (, ), ), {, return, -]
[p1, ., getY, (, ), <, p2, ., getY, (, ), ), {, return, -, 1, ;, }, if, (]
[p1, ., getY, (, ), <, p2, ., getY, (, ), ), {, return, -, 1, ;, }, if, (]
[p1, ., getY, (, ), <, p2, ., getY, (, ), ), {, return, -, 1, ;, }, if, (]
[p2, ., getY, (, ), ), {, return, -, 1, ;, }, if, (, p1, ., getY, (, ), >]
[p2, ., getY, (, ), ), {, return, -, 1, ;, }, if, (, p1, ., getY, (, ), >]
[-, 1, ;, }, if, (, p1, ., getY, (, ), >, p2, ., getY, (, ), ), {, return]
[(, p1, ., getY, (, ), >, p2, ., getY, (, ), ), {, return, 1, ;, }, if, (]
[(, p1, ., getY, (, ), >, p2, ., getY, (, ), ), {, return, 1, ;, }, if, (]
[(, p1, ., getY, (, ), >, p2, ., getY, (, ), ), {, return, 1, ;, }, if, (]
[>, p2, ., getY, (, ), ), {, return, 1, ;, }, if, (, p1, ., getWeight, (, ), <]
[>, p2, ., getY, (, ), ), {, return, 1, ;, }, if, (, p1, ., getWeight, (, ), <]
[return, 1, ;, }, if, (, p1, ., getWeight, (, ), <, p2, ., getWeight, (, ), ), {, return]
[1, ;, }, if, (, p1, ., getWeight, (, ), <, p2, ., getWeight, (, ), ), {, return, -]
[p1, ., getWeight, (, ), <, p2, ., getWeight, (, ), ), {, return, -, 1, ;, }, if, (]
[p1, ., getWeight, (, ), <, p2, ., getWeight, (, ), ), {, return, -, 1, ;, }, if, (]
[p1, ., getWeight, (, ), <, p2, ., getWeight, (, ), ), {, return, -, 1, ;, }, if, (]
[p2, ., getWeight, (, ), ), {, return, -, 1, ;, }, if, (, p1, ., getWeight, (, ), >]
[p2, ., getWeight, (, ), ), {, return, -, 1, ;, }, if, (, p1, ., getWeight, (, ), >]
[-, 1, ;, }, if, (, p1, ., getWeight, (, ), >, p2, ., getWeight, (, ), ), {, return]
[if, (, p1, ., getWeight, (, ), >, p2, ., getWeight, (, ), ), {, return, 1, ;, }, return]
[(, ), >, p2, ., getWeight, (, ), ), {, return, 1, ;, }, return, 0, ;, }, }, ;]
[(, ), >, p2, ., getWeight, (, ), ), {, return, 1, ;, }, return, 0, ;, }, }, ;]
[., getWeight, (, ), ), {, return, 1, ;, }, return, 0, ;, }, }, ;, Collections, ., sort, (]
[(, ), ), {, return, 1, ;, }, return, 0, ;, }, }, ;, Collections, ., sort, (, observations, ,]
[return, 1, ;, }, return, 0, ;, }, }, ;, Collections, ., sort, (, observations, ,, cmp, ), ;, return]
[return, observations, ;, }, private, double, [, ], basicGuess, (, WeightedObservedPoint, [, ], points, ), {, final, int, maxYIdx, =]
[;, }, private, double, [, ], basicGuess, (, WeightedObservedPoint, [, ], points, ), {, final, int, maxYIdx, =, findMaxY, (]
[(, WeightedObservedPoint, [, ], points, ), {, final, int, maxYIdx, =, findMaxY, (, points, ), ;, final, double, n, =]
[(, WeightedObservedPoint, [, ], points, ), {, final, int, maxYIdx, =, findMaxY, (, points, ), ;, final, double, n, =]
[(, WeightedObservedPoint, [, ], points, ), {, final, int, maxYIdx, =, findMaxY, (, points, ), ;, final, double, n, =]
[[, ], points, ), {, final, int, maxYIdx, =, findMaxY, (, points, ), ;, final, double, n, =, points, []
[points, ), ;, final, double, n, =, points, [, maxYIdx, ], ., getY, (, ), ;, final, double, m, =]
[points, ), ;, final, double, n, =, points, [, maxYIdx, ], ., getY, (, ), ;, final, double, m, =]
[points, ), ;, final, double, n, =, points, [, maxYIdx, ], ., getY, (, ), ;, final, double, m, =]
[;, final, double, n, =, points, [, maxYIdx, ], ., getY, (, ), ;, final, double, m, =, points, []
[m, =, points, [, maxYIdx, ], ., getX, (, ), ;, double, fwhmApprox, ;, try, {, final, double, halfY, =]
[m, =, points, [, maxYIdx, ], ., getX, (, ), ;, double, fwhmApprox, ;, try, {, final, double, halfY, =]
[points, [, maxYIdx, ], ., getX, (, ), ;, double, fwhmApprox, ;, try, {, final, double, halfY, =, n, +]
[[, maxYIdx, ], ., getX, (, ), ;, double, fwhmApprox, ;, try, {, final, double, halfY, =, n, +, (]
[[, maxYIdx, ], ., getX, (, ), ;, double, fwhmApprox, ;, try, {, final, double, halfY, =, n, +, (]
[maxYIdx, ], ., getX, (, ), ;, double, fwhmApprox, ;, try, {, final, double, halfY, =, n, +, (, (]
[maxYIdx, ], ., getX, (, ), ;, double, fwhmApprox, ;, try, {, final, double, halfY, =, n, +, (, (]
[., getX, (, ), ;, double, fwhmApprox, ;, try, {, final, double, halfY, =, n, +, (, (, m, -]
[), ;, double, fwhmApprox, ;, try, {, final, double, halfY, =, n, +, (, (, m, -, n, ), /]
[final, double, halfY, =, n, +, (, (, m, -, n, ), /, 2, ), ;, final, double, fwhmX1, =]
[halfY, =, n, +, (, (, m, -, n, ), /, 2, ), ;, final, double, fwhmX1, =, interpolateXAtY, (]
[n, +, (, (, m, -, n, ), /, 2, ), ;, final, double, fwhmX1, =, interpolateXAtY, (, points, ,]
[(, (, m, -, n, ), /, 2, ), ;, final, double, fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx, ,]
[(, m, -, n, ), /, 2, ), ;, final, double, fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx, ,, -]
[-, n, ), /, 2, ), ;, final, double, fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx, ,, -, 1, ,]
[final, double, fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx, ,, -, 1, ,, halfY, ), ;, final, double, fwhmX2, =]
[fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx, ,, -, 1, ,, halfY, ), ;, final, double, fwhmX2, =, interpolateXAtY, (]
[interpolateXAtY, (, points, ,, maxYIdx, ,, -, 1, ,, halfY, ), ;, final, double, fwhmX2, =, interpolateXAtY, (, points, ,]
[points, ,, maxYIdx, ,, -, 1, ,, halfY, ), ;, final, double, fwhmX2, =, interpolateXAtY, (, points, ,, maxYIdx, ,]
[maxYIdx, ,, -, 1, ,, halfY, ), ;, final, double, fwhmX2, =, interpolateXAtY, (, points, ,, maxYIdx, ,, 1, ,]
[1, ,, halfY, ), ;, final, double, fwhmX2, =, interpolateXAtY, (, points, ,, maxYIdx, ,, 1, ,, halfY, ), ;]
[halfY, ), ;, final, double, fwhmX2, =, interpolateXAtY, (, points, ,, maxYIdx, ,, 1, ,, halfY, ), ;, fwhmApprox, =]
[halfY, ), ;, final, double, fwhmX2, =, interpolateXAtY, (, points, ,, maxYIdx, ,, 1, ,, halfY, ), ;, fwhmApprox, =]
[;, final, double, fwhmX2, =, interpolateXAtY, (, points, ,, maxYIdx, ,, 1, ,, halfY, ), ;, fwhmApprox, =, fwhmX2, -]
[maxYIdx, ,, 1, ,, halfY, ), ;, fwhmApprox, =, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {]
[1, ,, halfY, ), ;, fwhmApprox, =, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =]
[1, ,, halfY, ), ;, fwhmApprox, =, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =]
[1, ,, halfY, ), ;, fwhmApprox, =, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =]
[1, ,, halfY, ), ;, fwhmApprox, =, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =]
[halfY, ), ;, fwhmApprox, =, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =, points, []
[halfY, ), ;, fwhmApprox, =, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =, points, []
[halfY, ), ;, fwhmApprox, =, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =, points, []
[=, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =, points, [, points, ., length, -]
[(, OutOfRangeException, e, ), {, fwhmApprox, =, points, [, points, ., length, -, 1, ], ., getX, (, ), -]
[(, OutOfRangeException, e, ), {, fwhmApprox, =, points, [, points, ., length, -, 1, ], ., getX, (, ), -]
[(, OutOfRangeException, e, ), {, fwhmApprox, =, points, [, points, ., length, -, 1, ], ., getX, (, ), -]
[e, ), {, fwhmApprox, =, points, [, points, ., length, -, 1, ], ., getX, (, ), -, points, []
[], ., getX, (, ), -, points, [, 0, ], ., getX, (, ), ;, }, final, double, s, =]
[], ., getX, (, ), -, points, [, 0, ], ., getX, (, ), ;, }, final, double, s, =]
[getX, (, ), -, points, [, 0, ], ., getX, (, ), ;, }, final, double, s, =, fwhmApprox, /]
[(, ), -, points, [, 0, ], ., getX, (, ), ;, }, final, double, s, =, fwhmApprox, /, (]
[(, ), -, points, [, 0, ], ., getX, (, ), ;, }, final, double, s, =, fwhmApprox, /, (]
[-, points, [, 0, ], ., getX, (, ), ;, }, final, double, s, =, fwhmApprox, /, (, 2, *]
[-, points, [, 0, ], ., getX, (, ), ;, }, final, double, s, =, fwhmApprox, /, (, 2, *]
[], ., getX, (, ), ;, }, final, double, s, =, fwhmApprox, /, (, 2, *, FastMath, ., sqrt, (]
[], ., getX, (, ), ;, }, final, double, s, =, fwhmApprox, /, (, 2, *, FastMath, ., sqrt, (]
[getX, (, ), ;, }, final, double, s, =, fwhmApprox, /, (, 2, *, FastMath, ., sqrt, (, 2, *]
[getX, (, ), ;, }, final, double, s, =, fwhmApprox, /, (, 2, *, FastMath, ., sqrt, (, 2, *]
[}, final, double, s, =, fwhmApprox, /, (, 2, *, FastMath, ., sqrt, (, 2, *, FastMath, ., log, (]
[/, (, 2, *, FastMath, ., sqrt, (, 2, *, FastMath, ., log, (, 2, ), ), ), ;, return]
[FastMath, ., sqrt, (, 2, *, FastMath, ., log, (, 2, ), ), ), ;, return, new, double, [, ]]
[., sqrt, (, 2, *, FastMath, ., log, (, 2, ), ), ), ;, return, new, double, [, ], {]
[(, 2, *, FastMath, ., log, (, 2, ), ), ), ;, return, new, double, [, ], {, n, ,]
[*, FastMath, ., log, (, 2, ), ), ), ;, return, new, double, [, ], {, n, ,, m, ,]
[,, m, ,, s, }, ;, }, private, int, findMaxY, (, WeightedObservedPoint, [, ], points, ), {, int, maxYIdx, =]
[private, int, findMaxY, (, WeightedObservedPoint, [, ], points, ), {, int, maxYIdx, =, 0, ;, for, (, int, i, =]
[findMaxY, (, WeightedObservedPoint, [, ], points, ), {, int, maxYIdx, =, 0, ;, for, (, int, i, =, 1, ;]
[findMaxY, (, WeightedObservedPoint, [, ], points, ), {, int, maxYIdx, =, 0, ;, for, (, int, i, =, 1, ;]
[WeightedObservedPoint, [, ], points, ), {, int, maxYIdx, =, 0, ;, for, (, int, i, =, 1, ;, i, <]
[WeightedObservedPoint, [, ], points, ), {, int, maxYIdx, =, 0, ;, for, (, int, i, =, 1, ;, i, <]
[), {, int, maxYIdx, =, 0, ;, for, (, int, i, =, 1, ;, i, <, points, ., length, ;]
[), {, int, maxYIdx, =, 0, ;, for, (, int, i, =, 1, ;, i, <, points, ., length, ;]
[;, for, (, int, i, =, 1, ;, i, <, points, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 1, ;, i, <, points, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 1, ;, i, <, points, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 1, ;, i, <, points, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 1, ;, i, <, points, ., length, ;, i, ++, ), {, if, (, points, []
[<, points, ., length, ;, i, ++, ), {, if, (, points, [, i, ], ., getY, (, ), >]
[<, points, ., length, ;, i, ++, ), {, if, (, points, [, i, ], ., getY, (, ), >]
[<, points, ., length, ;, i, ++, ), {, if, (, points, [, i, ], ., getY, (, ), >]
[., length, ;, i, ++, ), {, if, (, points, [, i, ], ., getY, (, ), >, points, []
[(, points, [, i, ], ., getY, (, ), >, points, [, maxYIdx, ], ., getY, (, ), ), {]
[[, i, ], ., getY, (, ), >, points, [, maxYIdx, ], ., getY, (, ), ), {, maxYIdx, =]
[(, ), >, points, [, maxYIdx, ], ., getY, (, ), ), {, maxYIdx, =, i, ;, }, }, return]
[(, WeightedObservedPoint, [, ], points, ,, int, startIdx, ,, int, idxStep, ,, double, y, ), throws, OutOfRangeException, {, if, (]
[(, WeightedObservedPoint, [, ], points, ,, int, startIdx, ,, int, idxStep, ,, double, y, ), throws, OutOfRangeException, {, if, (]
[[, ], points, ,, int, startIdx, ,, int, idxStep, ,, double, y, ), throws, OutOfRangeException, {, if, (, idxStep, ==]
[int, startIdx, ,, int, idxStep, ,, double, y, ), throws, OutOfRangeException, {, if, (, idxStep, ==, 0, ), {, throw]
[if, (, idxStep, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, final, WeightedObservedPoint, [, ], twoPoints, =]
[idxStep, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, final, WeightedObservedPoint, [, ], twoPoints, =, getInterpolationPointsForY, (]
[0, ), {, throw, new, ZeroException, (, ), ;, }, final, WeightedObservedPoint, [, ], twoPoints, =, getInterpolationPointsForY, (, points, ,]
[{, throw, new, ZeroException, (, ), ;, }, final, WeightedObservedPoint, [, ], twoPoints, =, getInterpolationPointsForY, (, points, ,, startIdx, ,]
[new, ZeroException, (, ), ;, }, final, WeightedObservedPoint, [, ], twoPoints, =, getInterpolationPointsForY, (, points, ,, startIdx, ,, idxStep, ,]
[WeightedObservedPoint, [, ], twoPoints, =, getInterpolationPointsForY, (, points, ,, startIdx, ,, idxStep, ,, y, ), ;, final, WeightedObservedPoint, p1, =]
[WeightedObservedPoint, [, ], twoPoints, =, getInterpolationPointsForY, (, points, ,, startIdx, ,, idxStep, ,, y, ), ;, final, WeightedObservedPoint, p1, =]
[], twoPoints, =, getInterpolationPointsForY, (, points, ,, startIdx, ,, idxStep, ,, y, ), ;, final, WeightedObservedPoint, p1, =, twoPoints, []
[startIdx, ,, idxStep, ,, y, ), ;, final, WeightedObservedPoint, p1, =, twoPoints, [, 0, ], ;, final, WeightedObservedPoint, p2, =]
[startIdx, ,, idxStep, ,, y, ), ;, final, WeightedObservedPoint, p1, =, twoPoints, [, 0, ], ;, final, WeightedObservedPoint, p2, =]
[idxStep, ,, y, ), ;, final, WeightedObservedPoint, p1, =, twoPoints, [, 0, ], ;, final, WeightedObservedPoint, p2, =, twoPoints, []
[final, WeightedObservedPoint, p1, =, twoPoints, [, 0, ], ;, final, WeightedObservedPoint, p2, =, twoPoints, [, 1, ], ;, if, (]
[final, WeightedObservedPoint, p1, =, twoPoints, [, 0, ], ;, final, WeightedObservedPoint, p2, =, twoPoints, [, 1, ], ;, if, (]
[final, WeightedObservedPoint, p1, =, twoPoints, [, 0, ], ;, final, WeightedObservedPoint, p2, =, twoPoints, [, 1, ], ;, if, (]
[0, ], ;, final, WeightedObservedPoint, p2, =, twoPoints, [, 1, ], ;, if, (, p1, ., getY, (, ), ==]
[WeightedObservedPoint, p2, =, twoPoints, [, 1, ], ;, if, (, p1, ., getY, (, ), ==, y, ), {, return]
[WeightedObservedPoint, p2, =, twoPoints, [, 1, ], ;, if, (, p1, ., getY, (, ), ==, y, ), {, return]
[(, p1, ., getY, (, ), ==, y, ), {, return, p1, ., getX, (, ), ;, }, if, (]
[(, p1, ., getY, (, ), ==, y, ), {, return, p1, ., getX, (, ), ;, }, if, (]
[(, p1, ., getY, (, ), ==, y, ), {, return, p1, ., getX, (, ), ;, }, if, (]
[==, y, ), {, return, p1, ., getX, (, ), ;, }, if, (, p2, ., getY, (, ), ==]
[return, p1, ., getX, (, ), ;, }, if, (, p2, ., getY, (, ), ==, y, ), {, return]
[return, p1, ., getX, (, ), ;, }, if, (, p2, ., getY, (, ), ==, y, ), {, return]
[if, (, p2, ., getY, (, ), ==, y, ), {, return, p2, ., getX, (, ), ;, }, return]
[if, (, p2, ., getY, (, ), ==, y, ), {, return, p2, ., getX, (, ), ;, }, return]
[if, (, p2, ., getY, (, ), ==, y, ), {, return, p2, ., getX, (, ), ;, }, return]
[), ==, y, ), {, return, p2, ., getX, (, ), ;, }, return, p1, ., getX, (, ), +]
[==, y, ), {, return, p2, ., getX, (, ), ;, }, return, p1, ., getX, (, ), +, (]
[==, y, ), {, return, p2, ., getX, (, ), ;, }, return, p1, ., getX, (, ), +, (]
[y, ), {, return, p2, ., getX, (, ), ;, }, return, p1, ., getX, (, ), +, (, (]
[y, ), {, return, p2, ., getX, (, ), ;, }, return, p1, ., getX, (, ), +, (, (]
[), {, return, p2, ., getX, (, ), ;, }, return, p1, ., getX, (, ), +, (, (, (]
[), {, return, p2, ., getX, (, ), ;, }, return, p1, ., getX, (, ), +, (, (, (]
[return, p2, ., getX, (, ), ;, }, return, p1, ., getX, (, ), +, (, (, (, y, -]
[return, p2, ., getX, (, ), ;, }, return, p1, ., getX, (, ), +, (, (, (, y, -]
[}, return, p1, ., getX, (, ), +, (, (, (, y, -, p1, ., getY, (, ), ), *]
[return, p1, ., getX, (, ), +, (, (, (, y, -, p1, ., getY, (, ), ), *, (]
[return, p1, ., getX, (, ), +, (, (, (, y, -, p1, ., getY, (, ), ), *, (]
[return, p1, ., getX, (, ), +, (, (, (, y, -, p1, ., getY, (, ), ), *, (]
[+, (, (, (, y, -, p1, ., getY, (, ), ), *, (, p2, ., getX, (, ), -]
[+, (, (, (, y, -, p1, ., getY, (, ), ), *, (, p2, ., getX, (, ), -]
[getY, (, ), ), *, (, p2, ., getX, (, ), -, p1, ., getX, (, ), ), ), /]
[(, ), ), *, (, p2, ., getX, (, ), -, p1, ., getX, (, ), ), ), /, (]
[(, ), ), *, (, p2, ., getX, (, ), -, p1, ., getX, (, ), ), ), /, (]
[(, ), ), *, (, p2, ., getX, (, ), -, p1, ., getX, (, ), ), ), /, (]
[., getX, (, ), -, p1, ., getX, (, ), ), ), /, (, p2, ., getY, (, ), -]
[., getX, (, ), -, p1, ., getX, (, ), ), ), /, (, p2, ., getY, (, ), -]
[(, WeightedObservedPoint, [, ], points, ,, int, startIdx, ,, int, idxStep, ,, double, y, ), throws, OutOfRangeException, {, if, (]
[(, WeightedObservedPoint, [, ], points, ,, int, startIdx, ,, int, idxStep, ,, double, y, ), throws, OutOfRangeException, {, if, (]
[[, ], points, ,, int, startIdx, ,, int, idxStep, ,, double, y, ), throws, OutOfRangeException, {, if, (, idxStep, ==]
[int, startIdx, ,, int, idxStep, ,, double, y, ), throws, OutOfRangeException, {, if, (, idxStep, ==, 0, ), {, throw]
[{, if, (, idxStep, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, for, (, int, i, =]
[(, idxStep, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, for, (, int, i, =, startIdx, ;]
[(, idxStep, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, for, (, int, i, =, startIdx, ;]
[(, idxStep, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, for, (, int, i, =, startIdx, ;]
[==, 0, ), {, throw, new, ZeroException, (, ), ;, }, for, (, int, i, =, startIdx, ;, idxStep, <]
[), {, throw, new, ZeroException, (, ), ;, }, for, (, int, i, =, startIdx, ;, idxStep, <, 0, ?]
[), {, throw, new, ZeroException, (, ), ;, }, for, (, int, i, =, startIdx, ;, idxStep, <, 0, ?]
[), {, throw, new, ZeroException, (, ), ;, }, for, (, int, i, =, startIdx, ;, idxStep, <, 0, ?]
[throw, new, ZeroException, (, ), ;, }, for, (, int, i, =, startIdx, ;, idxStep, <, 0, ?, i, +]
[ZeroException, (, ), ;, }, for, (, int, i, =, startIdx, ;, idxStep, <, 0, ?, i, +, idxStep, >=]
[), ;, }, for, (, int, i, =, startIdx, ;, idxStep, <, 0, ?, i, +, idxStep, >=, 0, :]
[), ;, }, for, (, int, i, =, startIdx, ;, idxStep, <, 0, ?, i, +, idxStep, >=, 0, :]
[), ;, }, for, (, int, i, =, startIdx, ;, idxStep, <, 0, ?, i, +, idxStep, >=, 0, :]
[}, for, (, int, i, =, startIdx, ;, idxStep, <, 0, ?, i, +, idxStep, >=, 0, :, i, +]
[(, int, i, =, startIdx, ;, idxStep, <, 0, ?, i, +, idxStep, >=, 0, :, i, +, idxStep, <]
[(, int, i, =, startIdx, ;, idxStep, <, 0, ?, i, +, idxStep, >=, 0, :, i, +, idxStep, <]
[startIdx, ;, idxStep, <, 0, ?, i, +, idxStep, >=, 0, :, i, +, idxStep, <, points, ., length, ;]
[idxStep, <, 0, ?, i, +, idxStep, >=, 0, :, i, +, idxStep, <, points, ., length, ;, i, +=]
[>=, 0, :, i, +, idxStep, <, points, ., length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =]
[>=, 0, :, i, +, idxStep, <, points, ., length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =]
[:, i, +, idxStep, <, points, ., length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, []
[length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, [, i, ], ;, final, WeightedObservedPoint, p2, =]
[length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, [, i, ], ;, final, WeightedObservedPoint, p2, =]
[i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, [, i, ], ;, final, WeightedObservedPoint, p2, =, points, []
[i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, [, i, ], ;, final, WeightedObservedPoint, p2, =, points, []
[idxStep, ), {, final, WeightedObservedPoint, p1, =, points, [, i, ], ;, final, WeightedObservedPoint, p2, =, points, [, i, +]
[p1, =, points, [, i, ], ;, final, WeightedObservedPoint, p2, =, points, [, i, +, idxStep, ], ;, if, (]
[points, [, i, ], ;, final, WeightedObservedPoint, p2, =, points, [, i, +, idxStep, ], ;, if, (, isBetween, (]
[i, ], ;, final, WeightedObservedPoint, p2, =, points, [, i, +, idxStep, ], ;, if, (, isBetween, (, y, ,]
[i, ], ;, final, WeightedObservedPoint, p2, =, points, [, i, +, idxStep, ], ;, if, (, isBetween, (, y, ,]
[=, points, [, i, +, idxStep, ], ;, if, (, isBetween, (, y, ,, p1, ., getY, (, ), ,]
[=, points, [, i, +, idxStep, ], ;, if, (, isBetween, (, y, ,, p1, ., getY, (, ), ,]
[isBetween, (, y, ,, p1, ., getY, (, ), ,, p2, ., getY, (, ), ), ), {, if, (]
[isBetween, (, y, ,, p1, ., getY, (, ), ,, p2, ., getY, (, ), ), ), {, if, (]
[y, ,, p1, ., getY, (, ), ,, p2, ., getY, (, ), ), ), {, if, (, idxStep, <]
[getY, (, ), ,, p2, ., getY, (, ), ), ), {, if, (, idxStep, <, 0, ), {, return]
[p2, ., getY, (, ), ), ), {, if, (, idxStep, <, 0, ), {, return, new, WeightedObservedPoint, [, ]]
[., getY, (, ), ), ), {, if, (, idxStep, <, 0, ), {, return, new, WeightedObservedPoint, [, ], {]
[(, ), ), ), {, if, (, idxStep, <, 0, ), {, return, new, WeightedObservedPoint, [, ], {, p2, ,]
[idxStep, <, 0, ), {, return, new, WeightedObservedPoint, [, ], {, p2, ,, p1, }, ;, }, else, {, return]
[{, return, new, WeightedObservedPoint, [, ], {, p2, ,, p1, }, ;, }, else, {, return, new, WeightedObservedPoint, [, ]]
[return, new, WeightedObservedPoint, [, ], {, p2, ,, p1, }, ;, }, else, {, return, new, WeightedObservedPoint, [, ], {]
[WeightedObservedPoint, [, ], {, p2, ,, p1, }, ;, }, else, {, return, new, WeightedObservedPoint, [, ], {, p1, ,]
[}, ;, }, else, {, return, new, WeightedObservedPoint, [, ], {, p1, ,, p2, }, ;, }, }, }, throw]
[else, {, return, new, WeightedObservedPoint, [, ], {, p1, ,, p2, }, ;, }, }, }, throw, new, OutOfRangeException, (]
[return, new, WeightedObservedPoint, [, ], {, p1, ,, p2, }, ;, }, }, }, throw, new, OutOfRangeException, (, y, ,]
[return, new, WeightedObservedPoint, [, ], {, p1, ,, p2, }, ;, }, }, }, throw, new, OutOfRangeException, (, y, ,]
[], {, p1, ,, p2, }, ;, }, }, }, throw, new, OutOfRangeException, (, y, ,, Double, ., NEGATIVE_INFINITY, ,]
[], {, p1, ,, p2, }, ;, }, }, }, throw, new, OutOfRangeException, (, y, ,, Double, ., NEGATIVE_INFINITY, ,]
[., POSITIVE_INFINITY, ), ;, }, private, boolean, isBetween, (, double, value, ,, double, boundary1, ,, double, boundary2, ), {, return]
[., POSITIVE_INFINITY, ), ;, }, private, boolean, isBetween, (, double, value, ,, double, boundary1, ,, double, boundary2, ), {, return]
[POSITIVE_INFINITY, ), ;, }, private, boolean, isBetween, (, double, value, ,, double, boundary1, ,, double, boundary2, ), {, return, (]
[POSITIVE_INFINITY, ), ;, }, private, boolean, isBetween, (, double, value, ,, double, boundary1, ,, double, boundary2, ), {, return, (]
[POSITIVE_INFINITY, ), ;, }, private, boolean, isBetween, (, double, value, ,, double, boundary1, ,, double, boundary2, ), {, return, (]
[;, }, private, boolean, isBetween, (, double, value, ,, double, boundary1, ,, double, boundary2, ), {, return, (, value, >=]
[private, boolean, isBetween, (, double, value, ,, double, boundary1, ,, double, boundary2, ), {, return, (, value, >=, boundary1, &&]
[private, boolean, isBetween, (, double, value, ,, double, boundary1, ,, double, boundary2, ), {, return, (, value, >=, boundary1, &&]
[isBetween, (, double, value, ,, double, boundary1, ,, double, boundary2, ), {, return, (, value, >=, boundary1, &&, value, <=]
[value, ,, double, boundary1, ,, double, boundary2, ), {, return, (, value, >=, boundary1, &&, value, <=, boundary2, ), ||]
[,, double, boundary1, ,, double, boundary2, ), {, return, (, value, >=, boundary1, &&, value, <=, boundary2, ), ||, (]
[,, double, boundary1, ,, double, boundary2, ), {, return, (, value, >=, boundary1, &&, value, <=, boundary2, ), ||, (]
[,, double, boundary1, ,, double, boundary2, ), {, return, (, value, >=, boundary1, &&, value, <=, boundary2, ), ||, (]
[boundary1, ,, double, boundary2, ), {, return, (, value, >=, boundary1, &&, value, <=, boundary2, ), ||, (, value, >=]
[double, boundary2, ), {, return, (, value, >=, boundary1, &&, value, <=, boundary2, ), ||, (, value, >=, boundary2, &&]
[double, boundary2, ), {, return, (, value, >=, boundary1, &&, value, <=, boundary2, ), ||, (, value, >=, boundary2, &&]
[), {, return, (, value, >=, boundary1, &&, value, <=, boundary2, ), ||, (, value, >=, boundary2, &&, value, <=]
