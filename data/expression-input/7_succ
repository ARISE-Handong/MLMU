[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch]
[), {, case, Token, ., LABEL, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,, Token, ., BREAK, ,, n]
[., getType, (, ), ), {, case, Token, ., LABEL, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,, Token]
[:, tryMinimizeExits, (, n, ., getLastChild, (, ), ,, Token, ., BREAK, ,, n, ., getFirstChild, (, ), ., getString]
[., LABEL, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,, Token, ., BREAK, ,, n, ., getFirstChild, (, )]
[;, break, ;, case, Token, ., FOR, :, case, Token, ., WHILE, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n]
[,, Token, ., BREAK, ,, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, break, ;, case, Token]
[., getLastChild, (, ), ,, Token, ., BREAK, ,, n, ., getFirstChild, (, ), ., getString, (, ), ), ;]
[,, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, break, ;, case, Token, ., FOR, :, case]
[., BREAK, ,, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, break, ;, case, Token, ., FOR]
[), ;, break, ;, case, Token, ., FOR, :, case, Token, ., WHILE, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (]
[., getString, (, ), ), ;, break, ;, case, Token, ., FOR, :, case, Token, ., WHILE, :, tryMinimizeExits, (]
[., getFirstChild, (, ), ., getString, (, ), ), ;, break, ;, case, Token, ., FOR, :, case, Token, .]
[:, case, Token, ., WHILE, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,, null]
[., FOR, :, case, Token, ., WHILE, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE]
[:, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, break, ;, case]
[., WHILE, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, break]
[;, break, ;, case, Token, ., DO, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE]
[,, Token, ., CONTINUE, ,, null, ), ;, break, ;, case, Token, ., DO, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock]
[., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, break, ;, case, Token, ., DO, :]
[), ,, Token, ., CONTINUE, ,, null, ), ;, break, ;, case, Token, ., DO, :, tryMinimizeExits, (, NodeUtil, .]
[,, null, ), ;, break, ;, case, Token, ., DO, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,]
[., CONTINUE, ,, null, ), ;, break, ;, case, Token, ., DO, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n]
[), ;, break, ;, case, Token, ., DO, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, .]
[:, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, Node, cond, =]
[., DO, :, tryMinimizeExits, (, NodeUtil, ., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, Node]
[;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), ==]
[,, Token, ., CONTINUE, ,, null, ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (]
[., getLoopCodeBlock, (, n, ), ,, Token, ., CONTINUE, ,, null, ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (]
[), ,, Token, ., CONTINUE, ,, null, ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if]
[,, null, ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getImpureBooleanValue, (]
[., CONTINUE, ,, null, ), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (, NodeUtil, .]
[), ;, Node, cond, =, NodeUtil, ., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, )]
[;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), ==, TernaryValue, ., FALSE, ), {, tryMinimizeExits, (, n, ., getFirstChild]
[., getConditionExpression, (, n, ), ;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), ==, TernaryValue, ., FALSE, ), {]
[), ;, if, (, NodeUtil, ., getImpureBooleanValue, (, cond, ), ==, TernaryValue, ., FALSE, ), {, tryMinimizeExits, (, n, .]
[), {, tryMinimizeExits, (, n, ., getFirstChild, (, ), ,, Token, ., BREAK, ,, null, ), ;, }, break, ;]
[==, TernaryValue, ., FALSE, ), {, tryMinimizeExits, (, n, ., getFirstChild, (, ), ,, Token, ., BREAK, ,, null, )]
[., getImpureBooleanValue, (, cond, ), ==, TernaryValue, ., FALSE, ), {, tryMinimizeExits, (, n, ., getFirstChild, (, ), ,, Token]
[), ==, TernaryValue, ., FALSE, ), {, tryMinimizeExits, (, n, ., getFirstChild, (, ), ,, Token, ., BREAK, ,, null]
[), {, tryMinimizeExits, (, n, ., getFirstChild, (, ), ,, Token, ., BREAK, ,, null, ), ;, }, break, ;]
[., FALSE, ), {, tryMinimizeExits, (, n, ., getFirstChild, (, ), ,, Token, ., BREAK, ,, null, ), ;, }]
[;, }, break, ;, case, Token, ., FUNCTION, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,, Token, ., RETURN]
[,, Token, ., BREAK, ,, null, ), ;, }, break, ;, case, Token, ., FUNCTION, :, tryMinimizeExits, (, n, .]
[., getFirstChild, (, ), ,, Token, ., BREAK, ,, null, ), ;, }, break, ;, case, Token, ., FUNCTION, :]
[,, null, ), ;, }, break, ;, case, Token, ., FUNCTION, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,]
[., BREAK, ,, null, ), ;, }, break, ;, case, Token, ., FUNCTION, :, tryMinimizeExits, (, n, ., getLastChild, (]
[), ;, }, break, ;, case, Token, ., FUNCTION, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,, Token, .]
[:, tryMinimizeExits, (, n, ., getLastChild, (, ), ,, Token, ., RETURN, ,, null, ), ;, break, ;, }, }]
[., FUNCTION, :, tryMinimizeExits, (, n, ., getLastChild, (, ), ,, Token, ., RETURN, ,, null, ), ;, break, ;]
[;, break, ;, }, }, void, tryMinimizeExits, (, Node, n, ,, int, exitType, ,, String, labelName, ), {, if, (]
[,, Token, ., RETURN, ,, null, ), ;, break, ;, }, }, void, tryMinimizeExits, (, Node, n, ,, int, exitType]
[., getLastChild, (, ), ,, Token, ., RETURN, ,, null, ), ;, break, ;, }, }, void, tryMinimizeExits, (, Node]
[,, null, ), ;, break, ;, }, }, void, tryMinimizeExits, (, Node, n, ,, int, exitType, ,, String, labelName, )]
[., RETURN, ,, null, ), ;, break, ;, }, }, void, tryMinimizeExits, (, Node, n, ,, int, exitType, ,, String]
[), ;, break, ;, }, }, void, tryMinimizeExits, (, Node, n, ,, int, exitType, ,, String, labelName, ), {, if]
[), {, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, ), ;, compiler, ., reportCodeChange, (, )]
[,, exitType, ,, labelName, ), ), {, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, ), ;]
[,, labelName, ), ), {, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, ), ;, compiler, .]
[), ), {, NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, ), ;, compiler, ., reportCodeChange, (]
[;, compiler, ., reportCodeChange, (, ), ;, return, ;, }, if, (, n, ., isIf, (, ), ), {, Node]
[., removeChild, (, n, ., getParent, (, ), ,, n, ), ;, compiler, ., reportCodeChange, (, ), ;, return, ;]
[,, n, ), ;, compiler, ., reportCodeChange, (, ), ;, return, ;, }, if, (, n, ., isIf, (, )]
[., getParent, (, ), ,, n, ), ;, compiler, ., reportCodeChange, (, ), ;, return, ;, }, if, (, n]
[), ;, compiler, ., reportCodeChange, (, ), ;, return, ;, }, if, (, n, ., isIf, (, ), ), {]
[;, return, ;, }, if, (, n, ., isIf, (, ), ), {, Node, ifBlock, =, n, ., getFirstChild, (]
[., reportCodeChange, (, ), ;, return, ;, }, if, (, n, ., isIf, (, ), ), {, Node, ifBlock, =]
[), {, Node, ifBlock, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, tryMinimizeExits, (, ifBlock, ,, exitType]
[., isIf, (, ), ), {, Node, ifBlock, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, tryMinimizeExits]
[;, tryMinimizeExits, (, ifBlock, ,, exitType, ,, labelName, ), ;, Node, elseBlock, =, ifBlock, ., getNext, (, ), ;, if]
[., getNext, (, ), ;, tryMinimizeExits, (, ifBlock, ,, exitType, ,, labelName, ), ;, Node, elseBlock, =, ifBlock, ., getNext]
[., getFirstChild, (, ), ., getNext, (, ), ;, tryMinimizeExits, (, ifBlock, ,, exitType, ,, labelName, ), ;, Node, elseBlock]
[;, Node, elseBlock, =, ifBlock, ., getNext, (, ), ;, if, (, elseBlock, !=, null, ), {, tryMinimizeExits, (, elseBlock]
[,, exitType, ,, labelName, ), ;, Node, elseBlock, =, ifBlock, ., getNext, (, ), ;, if, (, elseBlock, !=, null]
[,, labelName, ), ;, Node, elseBlock, =, ifBlock, ., getNext, (, ), ;, if, (, elseBlock, !=, null, ), {]
[), ;, Node, elseBlock, =, ifBlock, ., getNext, (, ), ;, if, (, elseBlock, !=, null, ), {, tryMinimizeExits, (]
[;, if, (, elseBlock, !=, null, ), {, tryMinimizeExits, (, elseBlock, ,, exitType, ,, labelName, ), ;, }, return, ;]
[., getNext, (, ), ;, if, (, elseBlock, !=, null, ), {, tryMinimizeExits, (, elseBlock, ,, exitType, ,, labelName, )]
[), {, tryMinimizeExits, (, elseBlock, ,, exitType, ,, labelName, ), ;, }, return, ;, }, if, (, n, ., isTry]
[!=, null, ), {, tryMinimizeExits, (, elseBlock, ,, exitType, ,, labelName, ), ;, }, return, ;, }, if, (, n]
[), {, tryMinimizeExits, (, elseBlock, ,, exitType, ,, labelName, ), ;, }, return, ;, }, if, (, n, ., isTry]
[;, }, return, ;, }, if, (, n, ., isTry, (, ), ), {, Node, tryBlock, =, n, ., getFirstChild]
[,, exitType, ,, labelName, ), ;, }, return, ;, }, if, (, n, ., isTry, (, ), ), {, Node]
[,, labelName, ), ;, }, return, ;, }, if, (, n, ., isTry, (, ), ), {, Node, tryBlock, =]
[), ;, }, return, ;, }, if, (, n, ., isTry, (, ), ), {, Node, tryBlock, =, n, .]
[), {, Node, tryBlock, =, n, ., getFirstChild, (, ), ;, tryMinimizeExits, (, tryBlock, ,, exitType, ,, labelName, ), ;]
[., isTry, (, ), ), {, Node, tryBlock, =, n, ., getFirstChild, (, ), ;, tryMinimizeExits, (, tryBlock, ,, exitType]
[;, tryMinimizeExits, (, tryBlock, ,, exitType, ,, labelName, ), ;, Node, allCatchNodes, =, NodeUtil, ., getCatchBlock, (, n, ), ;]
[., getFirstChild, (, ), ;, tryMinimizeExits, (, tryBlock, ,, exitType, ,, labelName, ), ;, Node, allCatchNodes, =, NodeUtil, ., getCatchBlock]
[;, Node, allCatchNodes, =, NodeUtil, ., getCatchBlock, (, n, ), ;, if, (, NodeUtil, ., hasCatchHandler, (, allCatchNodes, ), )]
[,, exitType, ,, labelName, ), ;, Node, allCatchNodes, =, NodeUtil, ., getCatchBlock, (, n, ), ;, if, (, NodeUtil, .]
[,, labelName, ), ;, Node, allCatchNodes, =, NodeUtil, ., getCatchBlock, (, n, ), ;, if, (, NodeUtil, ., hasCatchHandler, (]
[), ;, Node, allCatchNodes, =, NodeUtil, ., getCatchBlock, (, n, ), ;, if, (, NodeUtil, ., hasCatchHandler, (, allCatchNodes, )]
[;, if, (, NodeUtil, ., hasCatchHandler, (, allCatchNodes, ), ), {, Preconditions, ., checkState, (, allCatchNodes, ., hasOneChild, (, )]
[., getCatchBlock, (, n, ), ;, if, (, NodeUtil, ., hasCatchHandler, (, allCatchNodes, ), ), {, Preconditions, ., checkState, (]
[), ;, if, (, NodeUtil, ., hasCatchHandler, (, allCatchNodes, ), ), {, Preconditions, ., checkState, (, allCatchNodes, ., hasOneChild, (]
[), {, Preconditions, ., checkState, (, allCatchNodes, ., hasOneChild, (, ), ), ;, Node, catchNode, =, allCatchNodes, ., getFirstChild, (]
[., hasCatchHandler, (, allCatchNodes, ), ), {, Preconditions, ., checkState, (, allCatchNodes, ., hasOneChild, (, ), ), ;, Node, catchNode]
[), ), {, Preconditions, ., checkState, (, allCatchNodes, ., hasOneChild, (, ), ), ;, Node, catchNode, =, allCatchNodes, ., getFirstChild]
[;, Node, catchNode, =, allCatchNodes, ., getFirstChild, (, ), ;, Node, catchCodeBlock, =, catchNode, ., getLastChild, (, ), ;, tryMinimizeExits]
[., checkState, (, allCatchNodes, ., hasOneChild, (, ), ), ;, Node, catchNode, =, allCatchNodes, ., getFirstChild, (, ), ;, Node]
[), ;, Node, catchNode, =, allCatchNodes, ., getFirstChild, (, ), ;, Node, catchCodeBlock, =, catchNode, ., getLastChild, (, ), ;]
[., hasOneChild, (, ), ), ;, Node, catchNode, =, allCatchNodes, ., getFirstChild, (, ), ;, Node, catchCodeBlock, =, catchNode, .]
[;, Node, catchCodeBlock, =, catchNode, ., getLastChild, (, ), ;, tryMinimizeExits, (, catchCodeBlock, ,, exitType, ,, labelName, ), ;, }]
[., getFirstChild, (, ), ;, Node, catchCodeBlock, =, catchNode, ., getLastChild, (, ), ;, tryMinimizeExits, (, catchCodeBlock, ,, exitType, ,]
[;, tryMinimizeExits, (, catchCodeBlock, ,, exitType, ,, labelName, ), ;, }, if, (, NodeUtil, ., hasFinally, (, n, ), )]
[., getLastChild, (, ), ;, tryMinimizeExits, (, catchCodeBlock, ,, exitType, ,, labelName, ), ;, }, if, (, NodeUtil, ., hasFinally]
[;, }, if, (, NodeUtil, ., hasFinally, (, n, ), ), {, Node, finallyBlock, =, n, ., getLastChild, (, )]
[,, exitType, ,, labelName, ), ;, }, if, (, NodeUtil, ., hasFinally, (, n, ), ), {, Node, finallyBlock, =]
[,, labelName, ), ;, }, if, (, NodeUtil, ., hasFinally, (, n, ), ), {, Node, finallyBlock, =, n, .]
[), ;, }, if, (, NodeUtil, ., hasFinally, (, n, ), ), {, Node, finallyBlock, =, n, ., getLastChild, (]
[), {, Node, finallyBlock, =, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, finallyBlock, ,, exitType, ,, labelName, ), ;]
[., hasFinally, (, n, ), ), {, Node, finallyBlock, =, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, finallyBlock, ,]
[), ), {, Node, finallyBlock, =, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, finallyBlock, ,, exitType, ,, labelName, )]
[;, tryMinimizeExits, (, finallyBlock, ,, exitType, ,, labelName, ), ;, }, }, if, (, n, ., isLabel, (, ), )]
[., getLastChild, (, ), ;, tryMinimizeExits, (, finallyBlock, ,, exitType, ,, labelName, ), ;, }, }, if, (, n, .]
[;, }, }, if, (, n, ., isLabel, (, ), ), {, Node, labelBlock, =, n, ., getLastChild, (, )]
[,, exitType, ,, labelName, ), ;, }, }, if, (, n, ., isLabel, (, ), ), {, Node, labelBlock, =]
[,, labelName, ), ;, }, }, if, (, n, ., isLabel, (, ), ), {, Node, labelBlock, =, n, .]
[), ;, }, }, if, (, n, ., isLabel, (, ), ), {, Node, labelBlock, =, n, ., getLastChild, (]
[), {, Node, labelBlock, =, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, labelBlock, ,, exitType, ,, labelName, ), ;]
[., isLabel, (, ), ), {, Node, labelBlock, =, n, ., getLastChild, (, ), ;, tryMinimizeExits, (, labelBlock, ,, exitType]
[;, tryMinimizeExits, (, labelBlock, ,, exitType, ,, labelName, ), ;, }, if, (, !, n, ., isBlock, (, ), ||]
[., getLastChild, (, ), ;, tryMinimizeExits, (, labelBlock, ,, exitType, ,, labelName, ), ;, }, if, (, !, n, .]
[;, }, if, (, !, n, ., isBlock, (, ), ||, n, ., getLastChild, (, ), ==, null, ), {]
[,, exitType, ,, labelName, ), ;, }, if, (, !, n, ., isBlock, (, ), ||, n, ., getLastChild, (]
[,, labelName, ), ;, }, if, (, !, n, ., isBlock, (, ), ||, n, ., getLastChild, (, ), ==]
[), ;, }, if, (, !, n, ., isBlock, (, ), ||, n, ., getLastChild, (, ), ==, null, )]
[), {, return, ;, }, for, (, Node, c, :, n, ., children, (, ), ), {, if, (, c]
[||, n, ., getLastChild, (, ), ==, null, ), {, return, ;, }, for, (, Node, c, :, n, .]
[||, n, ., getLastChild, (, ), ==, null, ), {, return, ;, }, for, (, Node, c, :, n, .]
[., isBlock, (, ), ||, n, ., getLastChild, (, ), ==, null, ), {, return, ;, }, for, (, Node]
[), {, return, ;, }, for, (, Node, c, :, n, ., children, (, ), ), {, if, (, c]
[==, null, ), {, return, ;, }, for, (, Node, c, :, n, ., children, (, ), ), {, if]
[., getLastChild, (, ), ==, null, ), {, return, ;, }, for, (, Node, c, :, n, ., children, (]
[), {, return, ;, }, for, (, Node, c, :, n, ., children, (, ), ), {, if, (, c]
[), {, if, (, c, ., isIf, (, ), ), {, Node, ifTree, =, c, ;, Node, trueBlock, ,, falseBlock]
[., children, (, ), ), {, if, (, c, ., isIf, (, ), ), {, Node, ifTree, =, c, ;]
[), {, Node, ifTree, =, c, ;, Node, trueBlock, ,, falseBlock, ;, trueBlock, =, ifTree, ., getFirstChild, (, ), .]
[., isIf, (, ), ), {, Node, ifTree, =, c, ;, Node, trueBlock, ,, falseBlock, ;, trueBlock, =, ifTree, .]
[;, Node, trueBlock, ,, falseBlock, ;, trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =]
[=, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, tryMinimizeIfBlockExits]
[;, falseBlock, =, trueBlock, ., getNext, (, ), ;, tryMinimizeIfBlockExits, (, trueBlock, ,, falseBlock, ,, ifTree, ,, exitType, ,, labelName]
[., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, tryMinimizeIfBlockExits, (, trueBlock, ,, falseBlock, ,, ifTree]
[., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, tryMinimizeIfBlockExits, (, trueBlock]
[=, trueBlock, ., getNext, (, ), ;, tryMinimizeIfBlockExits, (, trueBlock, ,, falseBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;]
[;, tryMinimizeIfBlockExits, (, trueBlock, ,, falseBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, trueBlock, =, ifTree, ., getFirstChild, (]
[., getNext, (, ), ;, tryMinimizeIfBlockExits, (, trueBlock, ,, falseBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, trueBlock, =]
[;, trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, )]
[,, falseBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (]
[,, ifTree, ,, exitType, ,, labelName, ), ;, trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;]
[,, exitType, ,, labelName, ), ;, trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =]
[,, labelName, ), ;, trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =, trueBlock, .]
[), ;, trueBlock, =, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (]
[=, ifTree, ., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, if]
[;, falseBlock, =, trueBlock, ., getNext, (, ), ;, if, (, falseBlock, !=, null, ), {, tryMinimizeIfBlockExits, (, falseBlock, ,]
[., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, if, (, falseBlock, !=, null, ), {]
[., getFirstChild, (, ), ., getNext, (, ), ;, falseBlock, =, trueBlock, ., getNext, (, ), ;, if, (, falseBlock]
[=, trueBlock, ., getNext, (, ), ;, if, (, falseBlock, !=, null, ), {, tryMinimizeIfBlockExits, (, falseBlock, ,, trueBlock, ,]
[;, if, (, falseBlock, !=, null, ), {, tryMinimizeIfBlockExits, (, falseBlock, ,, trueBlock, ,, ifTree, ,, exitType, ,, labelName, )]
[., getNext, (, ), ;, if, (, falseBlock, !=, null, ), {, tryMinimizeIfBlockExits, (, falseBlock, ,, trueBlock, ,, ifTree, ,]
[), {, tryMinimizeIfBlockExits, (, falseBlock, ,, trueBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, }, }, if, (, c]
[!=, null, ), {, tryMinimizeIfBlockExits, (, falseBlock, ,, trueBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, }, }, if]
[), {, tryMinimizeIfBlockExits, (, falseBlock, ,, trueBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, }, }, if, (, c]
[;, }, }, if, (, c, ==, n, ., getLastChild, (, ), ), {, break, ;, }, }, for, (]
[,, trueBlock, ,, ifTree, ,, exitType, ,, labelName, ), ;, }, }, if, (, c, ==, n, ., getLastChild, (]
[,, ifTree, ,, exitType, ,, labelName, ), ;, }, }, if, (, c, ==, n, ., getLastChild, (, ), )]
[,, exitType, ,, labelName, ), ;, }, }, if, (, c, ==, n, ., getLastChild, (, ), ), {, break]
[,, labelName, ), ;, }, }, if, (, c, ==, n, ., getLastChild, (, ), ), {, break, ;, }]
[), ;, }, }, if, (, c, ==, n, ., getLastChild, (, ), ), {, break, ;, }, }, for]
[), {, break, ;, }, }, for, (, Node, c, =, n, ., getLastChild, (, ), ;, c, !=, null]
[==, n, ., getLastChild, (, ), ), {, break, ;, }, }, for, (, Node, c, =, n, ., getLastChild]
[), {, break, ;, }, }, for, (, Node, c, =, n, ., getLastChild, (, ), ;, c, !=, null]
[., getLastChild, (, ), ), {, break, ;, }, }, for, (, Node, c, =, n, ., getLastChild, (, )]
[;, c, !=, null, ;, c, =, n, ., getLastChild, (, ), ), {, tryMinimizeExits, (, c, ,, exitType, ,]
[., getLastChild, (, ), ;, c, !=, null, ;, c, =, n, ., getLastChild, (, ), ), {, tryMinimizeExits, (]
[;, c, =, n, ., getLastChild, (, ), ), {, tryMinimizeExits, (, c, ,, exitType, ,, labelName, ), ;, if]
[!=, null, ;, c, =, n, ., getLastChild, (, ), ), {, tryMinimizeExits, (, c, ,, exitType, ,, labelName, )]
[;, c, =, n, ., getLastChild, (, ), ), {, tryMinimizeExits, (, c, ,, exitType, ,, labelName, ), ;, if]
[=, n, ., getLastChild, (, ), ), {, tryMinimizeExits, (, c, ,, exitType, ,, labelName, ), ;, if, (, c]
[), {, tryMinimizeExits, (, c, ,, exitType, ,, labelName, ), ;, if, (, c, ==, n, ., getLastChild, (, )]
[., getLastChild, (, ), ), {, tryMinimizeExits, (, c, ,, exitType, ,, labelName, ), ;, if, (, c, ==, n]
[;, if, (, c, ==, n, ., getLastChild, (, ), ), {, break, ;, }, }, }, private, void, tryMinimizeIfBlockExits]
[,, exitType, ,, labelName, ), ;, if, (, c, ==, n, ., getLastChild, (, ), ), {, break, ;, }]
[,, labelName, ), ;, if, (, c, ==, n, ., getLastChild, (, ), ), {, break, ;, }, }, }]
[), ;, if, (, c, ==, n, ., getLastChild, (, ), ), {, break, ;, }, }, }, private, void]
[), {, break, ;, }, }, }, private, void, tryMinimizeIfBlockExits, (, Node, srcBlock, ,, Node, destBlock, ,, Node, ifNode, ,]
[==, n, ., getLastChild, (, ), ), {, break, ;, }, }, }, private, void, tryMinimizeIfBlockExits, (, Node, srcBlock, ,]
[), {, break, ;, }, }, }, private, void, tryMinimizeIfBlockExits, (, Node, srcBlock, ,, Node, destBlock, ,, Node, ifNode, ,]
[., getLastChild, (, ), ), {, break, ;, }, }, }, private, void, tryMinimizeIfBlockExits, (, Node, srcBlock, ,, Node, destBlock]
[;, Node, exitNode, =, null, ;, if, (, srcBlock, ., isBlock, (, ), ), {, if, (, !, srcBlock, .]
[;, if, (, srcBlock, ., isBlock, (, ), ), {, if, (, !, srcBlock, ., hasChildren, (, ), ), {]
[), {, if, (, !, srcBlock, ., hasChildren, (, ), ), {, return, ;, }, exitNodeParent, =, srcBlock, ;, exitNode]
[., isBlock, (, ), ), {, if, (, !, srcBlock, ., hasChildren, (, ), ), {, return, ;, }, exitNodeParent]
[), {, return, ;, }, exitNodeParent, =, srcBlock, ;, exitNode, =, exitNodeParent, ., getLastChild, (, ), ;, }, else, {]
[), {, return, ;, }, exitNodeParent, =, srcBlock, ;, exitNode, =, exitNodeParent, ., getLastChild, (, ), ;, }, else, {]
[., hasChildren, (, ), ), {, return, ;, }, exitNodeParent, =, srcBlock, ;, exitNode, =, exitNodeParent, ., getLastChild, (, )]
[=, srcBlock, ;, exitNode, =, exitNodeParent, ., getLastChild, (, ), ;, }, else, {, exitNodeParent, =, ifNode, ;, exitNode, =]
[;, exitNode, =, exitNodeParent, ., getLastChild, (, ), ;, }, else, {, exitNodeParent, =, ifNode, ;, exitNode, =, srcBlock, ;]
[=, exitNodeParent, ., getLastChild, (, ), ;, }, else, {, exitNodeParent, =, ifNode, ;, exitNode, =, srcBlock, ;, }, if]
[;, }, else, {, exitNodeParent, =, ifNode, ;, exitNode, =, srcBlock, ;, }, if, (, !, matchingExitNode, (, exitNode, ,]
[., getLastChild, (, ), ;, }, else, {, exitNodeParent, =, ifNode, ;, exitNode, =, srcBlock, ;, }, if, (, !]
[=, ifNode, ;, exitNode, =, srcBlock, ;, }, if, (, !, matchingExitNode, (, exitNode, ,, exitType, ,, labelName, ), )]
[;, exitNode, =, srcBlock, ;, }, if, (, !, matchingExitNode, (, exitNode, ,, exitType, ,, labelName, ), ), {, return]
[=, srcBlock, ;, }, if, (, !, matchingExitNode, (, exitNode, ,, exitType, ,, labelName, ), ), {, return, ;, }]
[;, }, if, (, !, matchingExitNode, (, exitNode, ,, exitType, ,, labelName, ), ), {, return, ;, }, if, (]
[), {, return, ;, }, if, (, ifNode, ., getNext, (, ), !=, null, ), {, Node, newDestBlock, =, IR]
[), {, return, ;, }, if, (, ifNode, ., getNext, (, ), !=, null, ), {, Node, newDestBlock, =, IR]
[,, exitType, ,, labelName, ), ), {, return, ;, }, if, (, ifNode, ., getNext, (, ), !=, null, )]
[,, labelName, ), ), {, return, ;, }, if, (, ifNode, ., getNext, (, ), !=, null, ), {, Node]
[), ), {, return, ;, }, if, (, ifNode, ., getNext, (, ), !=, null, ), {, Node, newDestBlock, =]
[), {, Node, newDestBlock, =, IR, ., block, (, ), ., srcref, (, ifNode, ), ;, if, (, destBlock, ==]
[!=, null, ), {, Node, newDestBlock, =, IR, ., block, (, ), ., srcref, (, ifNode, ), ;, if, (]
[., getNext, (, ), !=, null, ), {, Node, newDestBlock, =, IR, ., block, (, ), ., srcref, (, ifNode]
[), {, Node, newDestBlock, =, IR, ., block, (, ), ., srcref, (, ifNode, ), ;, if, (, destBlock, ==]
[;, if, (, destBlock, ==, null, ), {, ifNode, ., addChildToBack, (, newDestBlock, ), ;, }, else, if, (, destBlock]
[., srcref, (, ifNode, ), ;, if, (, destBlock, ==, null, ), {, ifNode, ., addChildToBack, (, newDestBlock, ), ;]
[., block, (, ), ., srcref, (, ifNode, ), ;, if, (, destBlock, ==, null, ), {, ifNode, ., addChildToBack]
[), ;, if, (, destBlock, ==, null, ), {, ifNode, ., addChildToBack, (, newDestBlock, ), ;, }, else, if, (]
[), {, ifNode, ., addChildToBack, (, newDestBlock, ), ;, }, else, if, (, destBlock, ., isEmpty, (, ), ), {]
[==, null, ), {, ifNode, ., addChildToBack, (, newDestBlock, ), ;, }, else, if, (, destBlock, ., isEmpty, (, )]
[), {, ifNode, ., addChildToBack, (, newDestBlock, ), ;, }, else, if, (, destBlock, ., isEmpty, (, ), ), {]
[;, }, else, if, (, destBlock, ., isEmpty, (, ), ), {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, )]
[., addChildToBack, (, newDestBlock, ), ;, }, else, if, (, destBlock, ., isEmpty, (, ), ), {, ifNode, ., replaceChild]
[), ;, }, else, if, (, destBlock, ., isEmpty, (, ), ), {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock]
[), {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, ), ;, }, else, if, (, destBlock, ., isBlock, (, )]
[., isEmpty, (, ), ), {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, ), ;, }, else, if, (, destBlock]
[;, }, else, if, (, destBlock, ., isBlock, (, ), ), {, newDestBlock, =, destBlock, ;, }, else, {, ifNode]
[., replaceChild, (, destBlock, ,, newDestBlock, ), ;, }, else, if, (, destBlock, ., isBlock, (, ), ), {, newDestBlock]
[,, newDestBlock, ), ;, }, else, if, (, destBlock, ., isBlock, (, ), ), {, newDestBlock, =, destBlock, ;, }]
[), ;, }, else, if, (, destBlock, ., isBlock, (, ), ), {, newDestBlock, =, destBlock, ;, }, else, {]
[), {, newDestBlock, =, destBlock, ;, }, else, {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, ), ;, newDestBlock, .]
[., isBlock, (, ), ), {, newDestBlock, =, destBlock, ;, }, else, {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock]
[=, destBlock, ;, }, else, {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, ), ;, newDestBlock, ., addChildToBack, (, destBlock]
[;, }, else, {, ifNode, ., replaceChild, (, destBlock, ,, newDestBlock, ), ;, newDestBlock, ., addChildToBack, (, destBlock, ), ;]
[;, newDestBlock, ., addChildToBack, (, destBlock, ), ;, }, moveAllFollowing, (, ifNode, ,, ifNode, ., getParent, (, ), ,, newDestBlock]
[., replaceChild, (, destBlock, ,, newDestBlock, ), ;, newDestBlock, ., addChildToBack, (, destBlock, ), ;, }, moveAllFollowing, (, ifNode, ,]
[,, newDestBlock, ), ;, newDestBlock, ., addChildToBack, (, destBlock, ), ;, }, moveAllFollowing, (, ifNode, ,, ifNode, ., getParent, (]
[), ;, newDestBlock, ., addChildToBack, (, destBlock, ), ;, }, moveAllFollowing, (, ifNode, ,, ifNode, ., getParent, (, ), ,]
[;, }, moveAllFollowing, (, ifNode, ,, ifNode, ., getParent, (, ), ,, newDestBlock, ), ;, }, NodeUtil, ., removeChild, (]
[., addChildToBack, (, destBlock, ), ;, }, moveAllFollowing, (, ifNode, ,, ifNode, ., getParent, (, ), ,, newDestBlock, ), ;]
[), ;, }, moveAllFollowing, (, ifNode, ,, ifNode, ., getParent, (, ), ,, newDestBlock, ), ;, }, NodeUtil, ., removeChild]
[;, }, NodeUtil, ., removeChild, (, exitNodeParent, ,, exitNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, static, private]
[,, ifNode, ., getParent, (, ), ,, newDestBlock, ), ;, }, NodeUtil, ., removeChild, (, exitNodeParent, ,, exitNode, ), ;]
[,, newDestBlock, ), ;, }, NodeUtil, ., removeChild, (, exitNodeParent, ,, exitNode, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., getParent, (, ), ,, newDestBlock, ), ;, }, NodeUtil, ., removeChild, (, exitNodeParent, ,, exitNode, ), ;, compiler, .]
[), ;, }, NodeUtil, ., removeChild, (, exitNodeParent, ,, exitNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, static]
[;, compiler, ., reportCodeChange, (, ), ;, }, static, private, boolean, matchingExitNode, (, Node, n, ,, int, type, ,, String]
[., removeChild, (, exitNodeParent, ,, exitNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, static, private, boolean, matchingExitNode, (]
[,, exitNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, static, private, boolean, matchingExitNode, (, Node, n, ,, int]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, static, private, boolean, matchingExitNode, (, Node, n, ,, int, type, ,]
[;, }, static, private, boolean, matchingExitNode, (, Node, n, ,, int, type, ,, String, labelName, ), {, if, (, n]
[., reportCodeChange, (, ), ;, }, static, private, boolean, matchingExitNode, (, Node, n, ,, int, type, ,, String, labelName, )]
[), {, if, (, type, ==, Token, ., RETURN, ), {, return, !, n, ., hasChildren, (, ), ;, }]
[==, type, ), {, if, (, type, ==, Token, ., RETURN, ), {, return, !, n, ., hasChildren, (, )]
[., getType, (, ), ==, type, ), {, if, (, type, ==, Token, ., RETURN, ), {, return, !, n]
[), {, if, (, type, ==, Token, ., RETURN, ), {, return, !, n, ., hasChildren, (, ), ;, }]
[), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, if, (, labelName, ==, null, ), {]
[==, Token, ., RETURN, ), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, if, (, labelName]
[), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, if, (, labelName, ==, null, ), {]
[., RETURN, ), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, if, (, labelName, ==, null]
[;, }, else, {, if, (, labelName, ==, null, ), {, return, !, n, ., hasChildren, (, ), ;, }]
[;, }, else, {, if, (, labelName, ==, null, ), {, return, !, n, ., hasChildren, (, ), ;, }]
[., hasChildren, (, ), ;, }, else, {, if, (, labelName, ==, null, ), {, return, !, n, ., hasChildren]
[), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, return, n, ., hasChildren, (, ), &&]
[==, null, ), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, return, n, ., hasChildren, (]
[), {, return, !, n, ., hasChildren, (, ), ;, }, else, {, return, n, ., hasChildren, (, ), &&]
[;, }, else, {, return, n, ., hasChildren, (, ), &&, labelName, ., equals, (, n, ., getFirstChild, (, )]
[;, }, else, {, return, n, ., hasChildren, (, ), &&, labelName, ., equals, (, n, ., getFirstChild, (, )]
[., hasChildren, (, ), ;, }, else, {, return, n, ., hasChildren, (, ), &&, labelName, ., equals, (, n]
[;, }, }, }, return, false, ;, }, static, private, void, moveAllFollowing, (, Node, start, ,, Node, srcParent, ,, Node]
[&&, labelName, ., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }, }, }, return]
[., hasChildren, (, ), &&, labelName, ., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;]
[;, }, }, }, return, false, ;, }, static, private, void, moveAllFollowing, (, Node, start, ,, Node, srcParent, ,, Node]
[., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, }, }, }, return, false, ;]
[), ;, }, }, }, return, false, ;, }, static, private, void, moveAllFollowing, (, Node, start, ,, Node, srcParent, ,]
[., getString, (, ), ), ;, }, }, }, return, false, ;, }, static, private, void, moveAllFollowing, (, Node, start]
[., getFirstChild, (, ), ., getString, (, ), ), ;, }, }, }, return, false, ;, }, static, private, void]
[;, }, static, private, void, moveAllFollowing, (, Node, start, ,, Node, srcParent, ,, Node, destParent, ), {, for, (, Node]
[;, n, !=, null, ;, n, =, start, ., getNext, (, ), ), {, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration]
[., getNext, (, ), ;, n, !=, null, ;, n, =, start, ., getNext, (, ), ), {, boolean, isFunctionDeclaration]
[;, n, =, start, ., getNext, (, ), ), {, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, n, ), ;]
[!=, null, ;, n, =, start, ., getNext, (, ), ), {, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, n]
[;, n, =, start, ., getNext, (, ), ), {, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, n, ), ;]
[=, start, ., getNext, (, ), ), {, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, n, ), ;, srcParent, .]
[), {, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, n, ), ;, srcParent, ., removeChild, (, n, ), ;, if]
[., getNext, (, ), ), {, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, n, ), ;, srcParent, ., removeChild, (]
[;, srcParent, ., removeChild, (, n, ), ;, if, (, isFunctionDeclaration, ), {, destParent, ., addChildToFront, (, n, ), ;]
[., isFunctionDeclaration, (, n, ), ;, srcParent, ., removeChild, (, n, ), ;, if, (, isFunctionDeclaration, ), {, destParent, .]
[), ;, srcParent, ., removeChild, (, n, ), ;, if, (, isFunctionDeclaration, ), {, destParent, ., addChildToFront, (, n, )]
[;, if, (, isFunctionDeclaration, ), {, destParent, ., addChildToFront, (, n, ), ;, }, else, {, destParent, ., addChildToBack, (]
[., removeChild, (, n, ), ;, if, (, isFunctionDeclaration, ), {, destParent, ., addChildToFront, (, n, ), ;, }, else]
[), ;, if, (, isFunctionDeclaration, ), {, destParent, ., addChildToFront, (, n, ), ;, }, else, {, destParent, ., addChildToBack]
[), {, destParent, ., addChildToFront, (, n, ), ;, }, else, {, destParent, ., addChildToBack, (, n, ), ;, }]
[;, }, else, {, destParent, ., addChildToBack, (, n, ), ;, }, }, }, }]
[., addChildToFront, (, n, ), ;, }, else, {, destParent, ., addChildToBack, (, n, ), ;, }, }, }, }]
[), ;, }, else, {, destParent, ., addChildToBack, (, n, ), ;, }, }, }, }]
[;, }, }, }, }]
[., addChildToBack, (, n, ), ;, }, }, }, }]
[), ;, }, }, }, }]
