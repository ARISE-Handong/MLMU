[>, escaped, ;, MaybeReachingVariableUse, (, ControlFlowGraph, <, Node, >, cfg, ,, Scope, jsScope, ,, AbstractCompiler, compiler, ), {, super, (]
[;, MaybeReachingVariableUse, (, ControlFlowGraph, <, Node, >, cfg, ,, Scope, jsScope, ,, AbstractCompiler, compiler, ), {, super, (, cfg, ,]
[>, cfg, ,, Scope, jsScope, ,, AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, ReachingUsesJoinOp, (, ), ), ;]
[>, cfg, ,, Scope, jsScope, ,, AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, ReachingUsesJoinOp, (, ), ), ;]
[jsScope, ,, AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, ReachingUsesJoinOp, (, ), ), ;, this, ., jsScope, =]
[AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, ReachingUsesJoinOp, (, ), ), ;, this, ., jsScope, =, jsScope, ;]
[AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, ReachingUsesJoinOp, (, ), ), ;, this, ., jsScope, =, jsScope, ;]
[super, (, cfg, ,, new, ReachingUsesJoinOp, (, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., escaped, =]
[super, (, cfg, ,, new, ReachingUsesJoinOp, (, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., escaped, =]
[(, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;]
[), ;, this, ., jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (]
[this, ., jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,]
[jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,]
[final, class, ReachingUses, implements, LatticeElement, {, final, Multimap, <, Var, ,, Node, >, mayUseMap, ;, public, ReachingUses, (, ), {]
[ReachingUses, implements, LatticeElement, {, final, Multimap, <, Var, ,, Node, >, mayUseMap, ;, public, ReachingUses, (, ), {, mayUseMap, =]
[ReachingUses, implements, LatticeElement, {, final, Multimap, <, Var, ,, Node, >, mayUseMap, ;, public, ReachingUses, (, ), {, mayUseMap, =]
[ReachingUses, (, ), {, mayUseMap, =, HashMultimap, ., create, (, ), ;, }, public, ReachingUses, (, ReachingUses, other, ), {]
[), {, mayUseMap, =, HashMultimap, ., create, (, ), ;, }, public, ReachingUses, (, ReachingUses, other, ), {, mayUseMap, =]
[), {, mayUseMap, =, HashMultimap, ., create, (, ), ;, }, public, ReachingUses, (, ReachingUses, other, ), {, mayUseMap, =]
[HashMultimap, ., create, (, ), ;, }, public, ReachingUses, (, ReachingUses, other, ), {, mayUseMap, =, HashMultimap, ., create, (]
[HashMultimap, ., create, (, ), ;, }, public, ReachingUses, (, ReachingUses, other, ), {, mayUseMap, =, HashMultimap, ., create, (]
[., create, (, other, ., mayUseMap, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return]
[., create, (, other, ., mayUseMap, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return]
[create, (, other, ., mayUseMap, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (]
[create, (, other, ., mayUseMap, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, ReachingUses, ), &&]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, ReachingUses, ), &&]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, ReachingUses, ), &&]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, ReachingUses, ), &&, (]
[Override, public, boolean, equals, (, Object, other, ), {, return, (, other, instanceof, ReachingUses, ), &&, (, (, ReachingUses, )]
[), {, return, (, other, instanceof, ReachingUses, ), &&, (, (, ReachingUses, ), other, ), ., mayUseMap, ., equals, (]
[), {, return, (, other, instanceof, ReachingUses, ), &&, (, (, ReachingUses, ), other, ), ., mayUseMap, ., equals, (]
[., mayUseMap, ., equals, (, this, ., mayUseMap, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[., mayUseMap, ., equals, (, this, ., mayUseMap, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[<, ReachingUses, >, {, @, Override, public, ReachingUses, apply, (, List, <, ReachingUses, >, from, ), {, ReachingUses, result, =]
[List, <, ReachingUses, >, from, ), {, ReachingUses, result, =, new, ReachingUses, (, ), ;, for, (, ReachingUses, uses, :]
[>, from, ), {, ReachingUses, result, =, new, ReachingUses, (, ), ;, for, (, ReachingUses, uses, :, from, ), {]
[>, from, ), {, ReachingUses, result, =, new, ReachingUses, (, ), ;, for, (, ReachingUses, uses, :, from, ), {]
[>, from, ), {, ReachingUses, result, =, new, ReachingUses, (, ), ;, for, (, ReachingUses, uses, :, from, ), {]
[=, new, ReachingUses, (, ), ;, for, (, ReachingUses, uses, :, from, ), {, result, ., mayUseMap, ., putAll, (]
[=, new, ReachingUses, (, ), ;, for, (, ReachingUses, uses, :, from, ), {, result, ., mayUseMap, ., putAll, (]
[(, ReachingUses, uses, :, from, ), {, result, ., mayUseMap, ., putAll, (, uses, ., mayUseMap, ), ;, }, return]
[(, uses, ., mayUseMap, ), ;, }, return, result, ;, }, }, @, Override, boolean, isForward, (, ), {, return]
[}, @, Override, boolean, isForward, (, ), {, return, false, ;, }, @, Override, ReachingUses, createEntryLattice, (, ), {, return]
[ReachingUses, createEntryLattice, (, ), {, return, new, ReachingUses, (, ), ;, }, @, Override, ReachingUses, createInitialEstimateLattice, (, ), {, return]
[ReachingUses, (, ), ;, }, @, Override, ReachingUses, flowThrough, (, Node, n, ,, ReachingUses, input, ), {, ReachingUses, output, =]
[;, }, @, Override, ReachingUses, flowThrough, (, Node, n, ,, ReachingUses, input, ), {, ReachingUses, output, =, new, ReachingUses, (]
[(, Node, n, ,, ReachingUses, input, ), {, ReachingUses, output, =, new, ReachingUses, (, input, ), ;, boolean, conditional, =]
[n, ,, ReachingUses, input, ), {, ReachingUses, output, =, new, ReachingUses, (, input, ), ;, boolean, conditional, =, hasExceptionHandler, (]
[input, ), {, ReachingUses, output, =, new, ReachingUses, (, input, ), ;, boolean, conditional, =, hasExceptionHandler, (, n, ), ;]
[{, ReachingUses, output, =, new, ReachingUses, (, input, ), ;, boolean, conditional, =, hasExceptionHandler, (, n, ), ;, computeMayUse, (]
[output, =, new, ReachingUses, (, input, ), ;, boolean, conditional, =, hasExceptionHandler, (, n, ), ;, computeMayUse, (, n, ,]
[new, ReachingUses, (, input, ), ;, boolean, conditional, =, hasExceptionHandler, (, n, ), ;, computeMayUse, (, n, ,, n, ,]
[(, input, ), ;, boolean, conditional, =, hasExceptionHandler, (, n, ), ;, computeMayUse, (, n, ,, n, ,, output, ,]
[boolean, conditional, =, hasExceptionHandler, (, n, ), ;, computeMayUse, (, n, ,, n, ,, output, ,, conditional, ), ;, return]
[}, private, boolean, hasExceptionHandler, (, Node, cfgNode, ), {, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, branchEdges, =]
[}, private, boolean, hasExceptionHandler, (, Node, cfgNode, ), {, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, branchEdges, =]
[cfgNode, ), {, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, branchEdges, =, getCfg, (, ), ., getOutEdges, (]
[=, getCfg, (, ), ., getOutEdges, (, cfgNode, ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :]
[getOutEdges, (, cfgNode, ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :, branchEdges, ), {, if, (]
[getOutEdges, (, cfgNode, ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :, branchEdges, ), {, if, (]
[getOutEdges, (, cfgNode, ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :, branchEdges, ), {, if, (]
[(, DiGraphEdge, <, Node, ,, Branch, >, edge, :, branchEdges, ), {, if, (, edge, ., getValue, (, ), ==]
[(, DiGraphEdge, <, Node, ,, Branch, >, edge, :, branchEdges, ), {, if, (, edge, ., getValue, (, ), ==]
[>, edge, :, branchEdges, ), {, if, (, edge, ., getValue, (, ), ==, Branch, ., ON_EX, ), {, return]
[{, if, (, edge, ., getValue, (, ), ==, Branch, ., ON_EX, ), {, return, true, ;, }, }, return]
[}, private, void, computeMayUse, (, Node, n, ,, Node, cfgNode, ,, ReachingUses, output, ,, boolean, conditional, ), {, switch, (]
[}, private, void, computeMayUse, (, Node, n, ,, Node, cfgNode, ,, ReachingUses, output, ,, boolean, conditional, ), {, switch, (]
[Node, cfgNode, ,, ReachingUses, output, ,, boolean, conditional, ), {, switch, (, n, ., getType, (, ), ), {, case]
[Node, cfgNode, ,, ReachingUses, output, ,, boolean, conditional, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, boolean, conditional, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case]
[,, boolean, conditional, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case]
[n, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case]
[n, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case]
[), ), {, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., NAME, :]
[{, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., NAME, :, addToUseIfLocal, (]
[{, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., NAME, :, addToUseIfLocal, (]
[case, Token, ., FUNCTION, :, return, ;, case, Token, ., NAME, :, addToUseIfLocal, (, n, ., getString, (, ), ,]
[., FUNCTION, :, return, ;, case, Token, ., NAME, :, addToUseIfLocal, (, n, ., getString, (, ), ,, cfgNode, ,]
[Token, ., NAME, :, addToUseIfLocal, (, n, ., getString, (, ), ,, cfgNode, ,, output, ), ;, return, ;, case]
[Token, ., NAME, :, addToUseIfLocal, (, n, ., getString, (, ), ,, cfgNode, ,, output, ), ;, return, ;, case]
[(, n, ., getString, (, ), ,, cfgNode, ,, output, ), ;, return, ;, case, Token, ., WHILE, :, case]
[(, n, ., getString, (, ), ,, cfgNode, ,, output, ), ;, return, ;, case, Token, ., WHILE, :, case]
[), ,, cfgNode, ,, output, ), ;, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case]
[), ,, cfgNode, ,, output, ), ;, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case]
[output, ), ;, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :]
[;, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeMayUse, (]
[;, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeMayUse, (]
[Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeMayUse, (, NodeUtil, ., getConditionExpression, (]
[:, case, Token, ., DO, :, case, Token, ., IF, :, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,]
[Token, ., DO, :, case, Token, ., IF, :, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,]
[DO, :, case, Token, ., IF, :, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,]
[:, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case]
[:, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case]
[(, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (]
[n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !]
[n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !]
[,, output, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (]
[), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {]
[return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMayUse, (]
[return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMayUse, (]
[., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMayUse, (, NodeUtil, ., getConditionExpression, (]
[if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,]
[!, NodeUtil, ., isForIn, (, n, ), ), {, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,]
[., isForIn, (, n, ), ), {, computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,]
[NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, Node, lhs, =]
[NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, Node, lhs, =]
[output, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[output, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (]
[Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (]
[), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {]
[Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {, lhs, =]
[Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {, lhs, =]
[if, (, lhs, ., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (]
[if, (, lhs, ., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (]
[if, (, lhs, ., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (]
[), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), &&]
[), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), &&, !]
[=, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), &&, !, conditional, ), {]
[., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), &&, !, conditional, ), {, removeFromUseIfLocal, (]
[., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), &&, !, conditional, ), {, removeFromUseIfLocal, (]
[if, (, lhs, ., isName, (, ), &&, !, conditional, ), {, removeFromUseIfLocal, (, lhs, ., getString, (, ), ,]
[isName, (, ), &&, !, conditional, ), {, removeFromUseIfLocal, (, lhs, ., getString, (, ), ,, output, ), ;, }]
[), &&, !, conditional, ), {, removeFromUseIfLocal, (, lhs, ., getString, (, ), ,, output, ), ;, }, computeMayUse, (]
[!, conditional, ), {, removeFromUseIfLocal, (, lhs, ., getString, (, ), ,, output, ), ;, }, computeMayUse, (, rhs, ,]
[), {, removeFromUseIfLocal, (, lhs, ., getString, (, ), ,, output, ), ;, }, computeMayUse, (, rhs, ,, cfgNode, ,]
[removeFromUseIfLocal, (, lhs, ., getString, (, ), ,, output, ), ;, }, computeMayUse, (, rhs, ,, cfgNode, ,, output, ,]
[,, output, ), ;, }, computeMayUse, (, rhs, ,, cfgNode, ,, output, ,, conditional, ), ;, }, return, ;, case]
[,, output, ), ;, }, computeMayUse, (, rhs, ,, cfgNode, ,, output, ,, conditional, ), ;, }, return, ;, case]
[computeMayUse, (, rhs, ,, cfgNode, ,, output, ,, conditional, ), ;, }, return, ;, case, Token, ., AND, :, case]
[computeMayUse, (, rhs, ,, cfgNode, ,, output, ,, conditional, ), ;, }, return, ;, case, Token, ., AND, :, case]
[cfgNode, ,, output, ,, conditional, ), ;, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :]
[output, ,, conditional, ), ;, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeMayUse, (]
[output, ,, conditional, ), ;, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeMayUse, (]
[return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeMayUse, (, n, ., getLastChild, (, ), ,]
[case, Token, ., AND, :, case, Token, ., OR, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,]
[., AND, :, case, Token, ., OR, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,]
[case, Token, ., OR, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;]
[., OR, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (]
[., OR, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (]
[., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,]
[(, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,]
[,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,]
[), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case]
[), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case]
[n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., HOOK, :]
[getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., HOOK, :, computeMayUse, (]
[getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., HOOK, :, computeMayUse, (]
[output, ,, conditional, ), ;, return, ;, case, Token, ., HOOK, :, computeMayUse, (, n, ., getLastChild, (, ), ,]
[conditional, ), ;, return, ;, case, Token, ., HOOK, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,]
[;, return, ;, case, Token, ., HOOK, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,]
[case, Token, ., HOOK, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;]
[., HOOK, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (]
[., HOOK, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (]
[., HOOK, :, computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (]
[,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,]
[,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,]
[,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,]
[;, computeMayUse, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;]
[(, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (]
[(, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (]
[., getNext, (, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,]
[(, ), ,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,]
[,, cfgNode, ,, output, ,, true, ), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,]
[), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case]
[), ;, computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case]
[(, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., VAR, :, Node, varName, =]
[(, ), ,, cfgNode, ,, output, ,, conditional, ), ;, return, ;, case, Token, ., VAR, :, Node, varName, =]
[,, conditional, ), ;, return, ;, case, Token, ., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;]
[,, conditional, ), ;, return, ;, case, Token, ., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;]
[return, ;, case, Token, ., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (]
[return, ;, case, Token, ., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (]
[:, Node, varName, =, n, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (, n, ., hasChildren, (, ), ,]
[., getFirstChild, (, ), ;, Preconditions, ., checkState, (, n, ., hasChildren, (, ), ,, "AST should be normalized", ), ;, if, (]
[., getFirstChild, (, ), ;, Preconditions, ., checkState, (, n, ., hasChildren, (, ), ,, "AST should be normalized", ), ;, if, (]
[checkState, (, n, ., hasChildren, (, ), ,, "AST should be normalized", ), ;, if, (, varName, ., hasChildren, (, ), ), {]
[n, ., hasChildren, (, ), ,, "AST should be normalized", ), ;, if, (, varName, ., hasChildren, (, ), ), {, computeMayUse, (]
[n, ., hasChildren, (, ), ,, "AST should be normalized", ), ;, if, (, varName, ., hasChildren, (, ), ), {, computeMayUse, (]
["AST should be normalized", ), ;, if, (, varName, ., hasChildren, (, ), ), {, computeMayUse, (, varName, ., getFirstChild, (, ), ,]
[;, if, (, varName, ., hasChildren, (, ), ), {, computeMayUse, (, varName, ., getFirstChild, (, ), ,, cfgNode, ,]
[(, varName, ., hasChildren, (, ), ), {, computeMayUse, (, varName, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,]
[), ), {, computeMayUse, (, varName, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, if, (]
[), {, computeMayUse, (, varName, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, if, (, !]
[(, varName, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, if, (, !, conditional, ), {]
[., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (]
[., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (]
[,, output, ,, conditional, ), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (, varName, ., getString, (, ), ,]
[{, removeFromUseIfLocal, (, varName, ., getString, (, ), ,, output, ), ;, }, }, return, ;, default, :, if, (]
[{, removeFromUseIfLocal, (, varName, ., getString, (, ), ,, output, ), ;, }, }, return, ;, default, :, if, (]
[{, removeFromUseIfLocal, (, varName, ., getString, (, ), ,, output, ), ;, }, }, return, ;, default, :, if, (]
[., getString, (, ), ,, output, ), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (]
[), ,, output, ), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&]
[), ,, output, ), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&]
[), ,, output, ), ;, }, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&]
[., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =]
[., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =]
[getFirstChild, (, ), ., isName, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (]
[(, ), ., isName, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !]
[isName, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, conditional, ), {]
[), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (]
[), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (]
[n, ., getFirstChild, (, ), ;, if, (, !, conditional, ), {, removeFromUseIfLocal, (, name, ., getString, (, ), ,]
[if, (, !, conditional, ), {, removeFromUseIfLocal, (, name, ., getString, (, ), ,, output, ), ;, }, if, (]
[(, !, conditional, ), {, removeFromUseIfLocal, (, name, ., getString, (, ), ,, output, ), ;, }, if, (, !]
[(, !, conditional, ), {, removeFromUseIfLocal, (, name, ., getString, (, ), ,, output, ), ;, }, if, (, !]
[name, ., getString, (, ), ,, output, ), ;, }, if, (, !, n, ., isAssign, (, ), ), {]
[getString, (, ), ,, output, ), ;, }, if, (, !, n, ., isAssign, (, ), ), {, addToUseIfLocal, (]
[getString, (, ), ,, output, ), ;, }, if, (, !, n, ., isAssign, (, ), ), {, addToUseIfLocal, (]
[;, }, if, (, !, n, ., isAssign, (, ), ), {, addToUseIfLocal, (, name, ., getString, (, ), ,]
[if, (, !, n, ., isAssign, (, ), ), {, addToUseIfLocal, (, name, ., getString, (, ), ,, cfgNode, ,]
[., isAssign, (, ), ), {, addToUseIfLocal, (, name, ., getString, (, ), ,, cfgNode, ,, output, ), ;, }]
[(, ), ), {, addToUseIfLocal, (, name, ., getString, (, ), ,, cfgNode, ,, output, ), ;, }, computeMayUse, (]
[(, ), ), {, addToUseIfLocal, (, name, ., getString, (, ), ,, cfgNode, ,, output, ), ;, }, computeMayUse, (]
[name, ., getString, (, ), ,, cfgNode, ,, output, ), ;, }, computeMayUse, (, name, ., getNext, (, ), ,]
[getString, (, ), ,, cfgNode, ,, output, ), ;, }, computeMayUse, (, name, ., getNext, (, ), ,, cfgNode, ,]
[), ,, cfgNode, ,, output, ), ;, }, computeMayUse, (, name, ., getNext, (, ), ,, cfgNode, ,, output, ,]
[., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, for, (, Node, c, =]
[., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, ), ;, }, else, {, for, (, Node, c, =]
[,, output, ,, conditional, ), ;, }, else, {, for, (, Node, c, =, n, ., getLastChild, (, ), ;]
[,, output, ,, conditional, ), ;, }, else, {, for, (, Node, c, =, n, ., getLastChild, (, ), ;]
[,, conditional, ), ;, }, else, {, for, (, Node, c, =, n, ., getLastChild, (, ), ;, c, !=]
[), ;, }, else, {, for, (, Node, c, =, n, ., getLastChild, (, ), ;, c, !=, null, ;]
[}, else, {, for, (, Node, c, =, n, ., getLastChild, (, ), ;, c, !=, null, ;, c, =]
[}, else, {, for, (, Node, c, =, n, ., getLastChild, (, ), ;, c, !=, null, ;, c, =]
[(, Node, c, =, n, ., getLastChild, (, ), ;, c, !=, null, ;, c, =, n, ., getChildBefore, (]
[n, ., getLastChild, (, ), ;, c, !=, null, ;, c, =, n, ., getChildBefore, (, c, ), ), {]
[getLastChild, (, ), ;, c, !=, null, ;, c, =, n, ., getChildBefore, (, c, ), ), {, computeMayUse, (]
[), ;, c, !=, null, ;, c, =, n, ., getChildBefore, (, c, ), ), {, computeMayUse, (, c, ,]
[c, !=, null, ;, c, =, n, ., getChildBefore, (, c, ), ), {, computeMayUse, (, c, ,, cfgNode, ,]
[null, ;, c, =, n, ., getChildBefore, (, c, ), ), {, computeMayUse, (, c, ,, cfgNode, ,, output, ,]
[}, }, }, private, void, addToUseIfLocal, (, String, name, ,, Node, node, ,, ReachingUses, use, ), {, Var, var, =]
[}, }, }, private, void, addToUseIfLocal, (, String, name, ,, Node, node, ,, ReachingUses, use, ), {, Var, var, =]
[void, addToUseIfLocal, (, String, name, ,, Node, node, ,, ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (]
[,, Node, node, ,, ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (]
[,, Node, node, ,, ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (]
[,, Node, node, ,, ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (]
[node, ,, ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==]
[ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==, null, ||]
[ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==, null, ||]
[ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==, null, ||]
[Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==, null, ||, var, ., scope, !=]
[), ;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (]
[;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !]
[;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !]
[==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (]
[., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {]
[., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {]
[., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {]
[return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {, use, ., mayUseMap, ., put, (]
[}, if, (, !, escaped, ., contains, (, var, ), ), {, use, ., mayUseMap, ., put, (, var, ,]
[,, node, ), ;, }, }, private, void, removeFromUseIfLocal, (, String, name, ,, ReachingUses, use, ), {, Var, var, =]
[,, node, ), ;, }, }, private, void, removeFromUseIfLocal, (, String, name, ,, ReachingUses, use, ), {, Var, var, =]
[}, }, private, void, removeFromUseIfLocal, (, String, name, ,, ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (]
[(, String, name, ,, ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (]
[(, String, name, ,, ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (]
[(, String, name, ,, ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (]
[name, ,, ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==]
[ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==, null, ||]
[ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==, null, ||]
[ReachingUses, use, ), {, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==, null, ||]
[Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, var, ==, null, ||, var, ., scope, !=]
[), ;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (]
[;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !]
[;, if, (, var, ==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !]
[==, null, ||, var, ., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (]
[., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {]
[., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {]
[., scope, !=, jsScope, ), {, return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {]
[return, ;, }, if, (, !, escaped, ., contains, (, var, ), ), {, use, ., mayUseMap, ., removeAll, (]
[<, Node, >, getUses, (, String, name, ,, Node, defNode, ), {, GraphNode, <, Node, ,, Branch, >, n, =]
[<, Node, >, getUses, (, String, name, ,, Node, defNode, ), {, GraphNode, <, Node, ,, Branch, >, n, =]
[name, ,, Node, defNode, ), {, GraphNode, <, Node, ,, Branch, >, n, =, getCfg, (, ), ., getNode, (]
[defNode, ), {, GraphNode, <, Node, ,, Branch, >, n, =, getCfg, (, ), ., getNode, (, defNode, ), ;]
[defNode, ), {, GraphNode, <, Node, ,, Branch, >, n, =, getCfg, (, ), ., getNode, (, defNode, ), ;]
[<, Node, ,, Branch, >, n, =, getCfg, (, ), ., getNode, (, defNode, ), ;, Preconditions, ., checkNotNull, (]
[), ., getNode, (, defNode, ), ;, Preconditions, ., checkNotNull, (, n, ), ;, FlowState, <, ReachingUses, >, state, =]
[), ., getNode, (, defNode, ), ;, Preconditions, ., checkNotNull, (, n, ), ;, FlowState, <, ReachingUses, >, state, =]
[Preconditions, ., checkNotNull, (, n, ), ;, FlowState, <, ReachingUses, >, state, =, n, ., getAnnotation, (, ), ;, return]
[Preconditions, ., checkNotNull, (, n, ), ;, FlowState, <, ReachingUses, >, state, =, n, ., getAnnotation, (, ), ;, return]
[Preconditions, ., checkNotNull, (, n, ), ;, FlowState, <, ReachingUses, >, state, =, n, ., getAnnotation, (, ), ;, return]
[Preconditions, ., checkNotNull, (, n, ), ;, FlowState, <, ReachingUses, >, state, =, n, ., getAnnotation, (, ), ;, return]
[>, state, =, n, ., getAnnotation, (, ), ;, return, state, ., getOut, (, ), ., mayUseMap, ., get, (]
[>, state, =, n, ., getAnnotation, (, ), ;, return, state, ., getOut, (, ), ., mayUseMap, ., get, (]
[., getAnnotation, (, ), ;, return, state, ., getOut, (, ), ., mayUseMap, ., get, (, jsScope, ., getVar, (]
