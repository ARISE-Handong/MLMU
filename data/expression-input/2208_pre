[declarationsToRemove, ;, InstrumentFunctions, (, AbstractCompiler, compiler, ,, FunctionNames, functionNames, ,, String, templateFilename, ,, String, appNameStr, ,, Readable, readable, ), {]
[declarationsToRemove, ;, InstrumentFunctions, (, AbstractCompiler, compiler, ,, FunctionNames, functionNames, ,, String, templateFilename, ,, String, appNameStr, ,, Readable, readable, ), {]
[AbstractCompiler, compiler, ,, FunctionNames, functionNames, ,, String, templateFilename, ,, String, appNameStr, ,, Readable, readable, ), {, this, ., compiler, =]
[,, FunctionNames, functionNames, ,, String, templateFilename, ,, String, appNameStr, ,, Readable, readable, ), {, this, ., compiler, =, compiler, ;]
[,, FunctionNames, functionNames, ,, String, templateFilename, ,, String, appNameStr, ,, Readable, readable, ), {, this, ., compiler, =, compiler, ;]
[String, templateFilename, ,, String, appNameStr, ,, Readable, readable, ), {, this, ., compiler, =, compiler, ;, this, ., functionNames, =]
[,, String, appNameStr, ,, Readable, readable, ), {, this, ., compiler, =, compiler, ;, this, ., functionNames, =, functionNames, ;]
[,, String, appNameStr, ,, Readable, readable, ), {, this, ., compiler, =, compiler, ;, this, ., functionNames, =, functionNames, ;]
[Readable, readable, ), {, this, ., compiler, =, compiler, ;, this, ., functionNames, =, functionNames, ;, this, ., templateFilename, =]
[), {, this, ., compiler, =, compiler, ;, this, ., functionNames, =, functionNames, ;, this, ., templateFilename, =, templateFilename, ;]
[), {, this, ., compiler, =, compiler, ;, this, ., functionNames, =, functionNames, ;, this, ., templateFilename, =, templateFilename, ;]
[compiler, =, compiler, ;, this, ., functionNames, =, functionNames, ;, this, ., templateFilename, =, templateFilename, ;, this, ., appNameStr, =]
[=, functionNames, ;, this, ., templateFilename, =, templateFilename, ;, this, ., appNameStr, =, appNameStr, ;, Instrumentation, ., Builder, builder, =]
[=, functionNames, ;, this, ., templateFilename, =, templateFilename, ;, this, ., appNameStr, =, appNameStr, ;, Instrumentation, ., Builder, builder, =]
[;, this, ., appNameStr, =, appNameStr, ;, Instrumentation, ., Builder, builder, =, Instrumentation, ., newBuilder, (, ), ;, try, {]
[;, this, ., appNameStr, =, appNameStr, ;, Instrumentation, ., Builder, builder, =, Instrumentation, ., newBuilder, (, ), ;, try, {]
[=, appNameStr, ;, Instrumentation, ., Builder, builder, =, Instrumentation, ., newBuilder, (, ), ;, try, {, TextFormat, ., merge, (]
[;, Instrumentation, ., Builder, builder, =, Instrumentation, ., newBuilder, (, ), ;, try, {, TextFormat, ., merge, (, readable, ,]
[), ;, try, {, TextFormat, ., merge, (, readable, ,, builder, ), ;, }, catch, (, IOException, e, ), {]
[), ;, try, {, TextFormat, ., merge, (, readable, ,, builder, ), ;, }, catch, (, IOException, e, ), {]
[TextFormat, ., merge, (, readable, ,, builder, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (]
[TextFormat, ., merge, (, readable, ,, builder, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (]
[readable, ,, builder, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[readable, ,, builder, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, RhinoErrorReporter, ., PARSE_ERROR, ,]
[;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, RhinoErrorReporter, ., PARSE_ERROR, ,]
[catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, RhinoErrorReporter, ., PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +]
[), {, compiler, ., report, (, JSError, ., make, (, RhinoErrorReporter, ., PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +, templateFilename, ), ), ;]
[), {, compiler, ., report, (, JSError, ., make, (, RhinoErrorReporter, ., PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +, templateFilename, ), ), ;]
[report, (, JSError, ., make, (, RhinoErrorReporter, ., PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +, templateFilename, ), ), ;, this, ., initCodeSource, =]
[JSError, ., make, (, RhinoErrorReporter, ., PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +, templateFilename, ), ), ;, this, ., initCodeSource, =, "", ;]
[JSError, ., make, (, RhinoErrorReporter, ., PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +, templateFilename, ), ), ;, this, ., initCodeSource, =, "", ;]
[RhinoErrorReporter, ., PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +, templateFilename, ), ), ;, this, ., initCodeSource, =, "", ;, this, ., definedFunctionName, =]
[PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +, templateFilename, ), ), ;, this, ., initCodeSource, =, "", ;, this, ., definedFunctionName, =, "", ;]
[PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +, templateFilename, ), ), ;, this, ., initCodeSource, =, "", ;, this, ., definedFunctionName, =, "", ;]
[templateFilename, ), ), ;, this, ., initCodeSource, =, "", ;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName, =]
[), ;, this, ., initCodeSource, =, "", ;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName, =, "", ;]
[), ;, this, ., initCodeSource, =, "", ;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName, =, "", ;]
[initCodeSource, =, "", ;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =]
["", ;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =, "", ;]
["", ;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =, "", ;]
[definedFunctionName, =, "", ;, this, ., reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =, "", ;, this, ., appNameSetter, =]
["", ;, this, ., reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =, "", ;, this, ., appNameSetter, =, "", ;]
["", ;, this, ., reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =, "", ;, this, ., appNameSetter, =, "", ;]
[reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =, "", ;, this, ., appNameSetter, =, "", ;, this, ., declarationsToRemove, =]
[reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =, "", ;, this, ., appNameSetter, =, "", ;, this, ., declarationsToRemove, =]
[appNameSetter, =, "", ;, this, ., declarationsToRemove, =, Lists, ., newArrayList, (, ), ;, return, ;, }, Instrumentation, template, =]
[appNameSetter, =, "", ;, this, ., declarationsToRemove, =, Lists, ., newArrayList, (, ), ;, return, ;, }, Instrumentation, template, =]
[., newArrayList, (, ), ;, return, ;, }, Instrumentation, template, =, builder, ., build, (, ), ;, StringBuilder, initCodeSourceBuilder, =]
[=, builder, ., build, (, ), ;, StringBuilder, initCodeSourceBuilder, =, new, StringBuilder, (, ), ;, for, (, String, line, :]
[=, builder, ., build, (, ), ;, StringBuilder, initCodeSourceBuilder, =, new, StringBuilder, (, ), ;, for, (, String, line, :]
[StringBuilder, initCodeSourceBuilder, =, new, StringBuilder, (, ), ;, for, (, String, line, :, template, ., getInitList, (, ), ), {]
[StringBuilder, initCodeSourceBuilder, =, new, StringBuilder, (, ), ;, for, (, String, line, :, template, ., getInitList, (, ), ), {]
[StringBuilder, initCodeSourceBuilder, =, new, StringBuilder, (, ), ;, for, (, String, line, :, template, ., getInitList, (, ), ), {]
[StringBuilder, (, ), ;, for, (, String, line, :, template, ., getInitList, (, ), ), {, initCodeSourceBuilder, ., append, (]
[(, String, line, :, template, ., getInitList, (, ), ), {, initCodeSourceBuilder, ., append, (, line, ), ., append, (]
[template, ., getInitList, (, ), ), {, initCodeSourceBuilder, ., append, (, line, ), ., append, (, "\n", ), ;, }]
[template, ., getInitList, (, ), ), {, initCodeSourceBuilder, ., append, (, line, ), ., append, (, "\n", ), ;, }]
[), ), {, initCodeSourceBuilder, ., append, (, line, ), ., append, (, "\n", ), ;, }, this, ., initCodeSource, =]
[), ), {, initCodeSourceBuilder, ., append, (, line, ), ., append, (, "\n", ), ;, }, this, ., initCodeSource, =]
[(, line, ), ., append, (, "\n", ), ;, }, this, ., initCodeSource, =, initCodeSourceBuilder, ., toString, (, ), ;]
[(, line, ), ., append, (, "\n", ), ;, }, this, ., initCodeSource, =, initCodeSourceBuilder, ., toString, (, ), ;]
[append, (, "\n", ), ;, }, this, ., initCodeSource, =, initCodeSourceBuilder, ., toString, (, ), ;, this, ., definedFunctionName, =]
[append, (, "\n", ), ;, }, this, ., initCodeSource, =, initCodeSourceBuilder, ., toString, (, ), ;, this, ., definedFunctionName, =]
[this, ., initCodeSource, =, initCodeSourceBuilder, ., toString, (, ), ;, this, ., definedFunctionName, =, template, ., getReportDefined, (, ), ;]
[this, ., initCodeSource, =, initCodeSourceBuilder, ., toString, (, ), ;, this, ., definedFunctionName, =, template, ., getReportDefined, (, ), ;]
[initCodeSourceBuilder, ., toString, (, ), ;, this, ., definedFunctionName, =, template, ., getReportDefined, (, ), ;, this, ., reportFunctionName, =]
[initCodeSourceBuilder, ., toString, (, ), ;, this, ., definedFunctionName, =, template, ., getReportDefined, (, ), ;, this, ., reportFunctionName, =]
[this, ., definedFunctionName, =, template, ., getReportDefined, (, ), ;, this, ., reportFunctionName, =, template, ., getReportCall, (, ), ;]
[this, ., definedFunctionName, =, template, ., getReportDefined, (, ), ;, this, ., reportFunctionName, =, template, ., getReportCall, (, ), ;]
[template, ., getReportDefined, (, ), ;, this, ., reportFunctionName, =, template, ., getReportCall, (, ), ;, this, ., reportFunctionExitName, =]
[template, ., getReportDefined, (, ), ;, this, ., reportFunctionName, =, template, ., getReportCall, (, ), ;, this, ., reportFunctionExitName, =]
[this, ., reportFunctionName, =, template, ., getReportCall, (, ), ;, this, ., reportFunctionExitName, =, template, ., getReportExit, (, ), ;]
[this, ., reportFunctionName, =, template, ., getReportCall, (, ), ;, this, ., reportFunctionExitName, =, template, ., getReportExit, (, ), ;]
[template, ., getReportCall, (, ), ;, this, ., reportFunctionExitName, =, template, ., getReportExit, (, ), ;, this, ., appNameSetter, =]
[template, ., getReportCall, (, ), ;, this, ., reportFunctionExitName, =, template, ., getReportExit, (, ), ;, this, ., appNameSetter, =]
[this, ., reportFunctionExitName, =, template, ., getReportExit, (, ), ;, this, ., appNameSetter, =, template, ., getAppNameSetter, (, ), ;]
[this, ., reportFunctionExitName, =, template, ., getReportExit, (, ), ;, this, ., appNameSetter, =, template, ., getAppNameSetter, (, ), ;]
[template, ., getReportExit, (, ), ;, this, ., appNameSetter, =, template, ., getAppNameSetter, (, ), ;, this, ., declarationsToRemove, =]
[template, ., getReportExit, (, ), ;, this, ., appNameSetter, =, template, ., getAppNameSetter, (, ), ;, this, ., declarationsToRemove, =]
[), ;, this, ., appNameSetter, =, template, ., getAppNameSetter, (, ), ;, this, ., declarationsToRemove, =, ImmutableList, ., copyOf, (]
[), ;, this, ., appNameSetter, =, template, ., getAppNameSetter, (, ), ;, this, ., declarationsToRemove, =, ImmutableList, ., copyOf, (]
[), ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Node, initCode, =]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Node, initCode, =, null, ;, if, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Node, initCode, =, null, ;, if, (, !]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Node, initCode, =, null, ;, if, (, !]
[), {, Node, initCode, =, null, ;, if, (, !, initCodeSource, ., isEmpty, (, ), ), {, Node, initCodeRoot, =]
[), {, Node, initCode, =, null, ;, if, (, !, initCodeSource, ., isEmpty, (, ), ), {, Node, initCodeRoot, =]
[=, null, ;, if, (, !, initCodeSource, ., isEmpty, (, ), ), {, Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (]
[=, null, ;, if, (, !, initCodeSource, ., isEmpty, (, ), ), {, Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (]
[;, if, (, !, initCodeSource, ., isEmpty, (, ), ), {, Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (, templateFilename, +]
[(, !, initCodeSource, ., isEmpty, (, ), ), {, Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (, templateFilename, +, ":init", ,]
[(, ), ), {, Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (, templateFilename, +, ":init", ,, initCodeSource, ), ;, if, (]
[(, ), ), {, Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (, templateFilename, +, ":init", ,, initCodeSource, ), ;, if, (]
[(, ), ), {, Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (, templateFilename, +, ":init", ,, initCodeSource, ), ;, if, (]
[), {, Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (, templateFilename, +, ":init", ,, initCodeSource, ), ;, if, (, initCodeRoot, !=]
[Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (, templateFilename, +, ":init", ,, initCodeSource, ), ;, if, (, initCodeRoot, !=, null, &&]
[Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (, templateFilename, +, ":init", ,, initCodeSource, ), ;, if, (, initCodeRoot, !=, null, &&]
[Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (, templateFilename, +, ":init", ,, initCodeSource, ), ;, if, (, initCodeRoot, !=, null, &&]
[(, templateFilename, +, ":init", ,, initCodeSource, ), ;, if, (, initCodeRoot, !=, null, &&, initCodeRoot, ., getFirstChild, (, ), !=]
[":init", ,, initCodeSource, ), ;, if, (, initCodeRoot, !=, null, &&, initCodeRoot, ., getFirstChild, (, ), !=, null, ), {]
[initCodeSource, ), ;, if, (, initCodeRoot, !=, null, &&, initCodeRoot, ., getFirstChild, (, ), !=, null, ), {, initCode, =]
[initCodeSource, ), ;, if, (, initCodeRoot, !=, null, &&, initCodeRoot, ., getFirstChild, (, ), !=, null, ), {, initCode, =]
[), !=, null, ), {, initCode, =, initCodeRoot, ., removeChildren, (, ), ;, }, else, {, return, ;, }, }]
[), !=, null, ), {, initCode, =, initCodeRoot, ., removeChildren, (, ), ;, }, else, {, return, ;, }, }]
[{, initCode, =, initCodeRoot, ., removeChildren, (, ), ;, }, else, {, return, ;, }, }, NodeTraversal, ., traverse, (]
[=, initCodeRoot, ., removeChildren, (, ), ;, }, else, {, return, ;, }, }, NodeTraversal, ., traverse, (, compiler, ,]
[., removeChildren, (, ), ;, }, else, {, return, ;, }, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[), ;, }, else, {, return, ;, }, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveCallback, (]
[{, return, ;, }, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveCallback, (, declarationsToRemove, ), ), ;]
[{, return, ;, }, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveCallback, (, declarationsToRemove, ), ), ;]
[}, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveCallback, (, declarationsToRemove, ), ), ;, NodeTraversal, ., traverse, (]
[., traverse, (, compiler, ,, root, ,, new, RemoveCallback, (, declarationsToRemove, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[(, compiler, ,, root, ,, new, RemoveCallback, (, declarationsToRemove, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[declarationsToRemove, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, InstrumentCallback, (, ), ), ;, if, (]
[), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, InstrumentCallback, (, ), ), ;, if, (, !]
[), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, InstrumentCallback, (, ), ), ;, if, (, !]
[,, new, InstrumentCallback, (, ), ), ;, if, (, !, appNameSetter, ., isEmpty, (, ), ), {, Node, call, =]
[,, new, InstrumentCallback, (, ), ), ;, if, (, !, appNameSetter, ., isEmpty, (, ), ), {, Node, call, =]
[), ), ;, if, (, !, appNameSetter, ., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (]
[), ), ;, if, (, !, appNameSetter, ., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (]
[(, !, appNameSetter, ., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (, IR, ., name, (]
[., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (, IR, ., name, (, appNameSetter, ), ,]
[., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (, IR, ., name, (, appNameSetter, ), ,]
[), {, Node, call, =, IR, ., call, (, IR, ., name, (, appNameSetter, ), ,, IR, ., string, (]
[=, IR, ., call, (, IR, ., name, (, appNameSetter, ), ,, IR, ., string, (, appNameStr, ), ), ;]
[=, IR, ., call, (, IR, ., name, (, appNameSetter, ), ,, IR, ., string, (, appNameStr, ), ), ;]
[(, IR, ., name, (, appNameSetter, ), ,, IR, ., string, (, appNameStr, ), ), ;, call, ., putBooleanProp, (]
[(, IR, ., name, (, appNameSetter, ), ,, IR, ., string, (, appNameStr, ), ), ;, call, ., putBooleanProp, (]
[(, appNameSetter, ), ,, IR, ., string, (, appNameStr, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[string, (, appNameStr, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =]
[string, (, appNameStr, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =]
[), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (]
[Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, Node, addingRoot, =]
[Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, Node, addingRoot, =]
[true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (]
[Node, expr, =, IR, ., exprResult, (, call, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;]
[Node, expr, =, IR, ., exprResult, (, call, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;]
[., exprResult, (, call, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (]
[call, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (, expr, ), ;]
[call, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (, expr, ), ;]
[(, null, ), ;, addingRoot, ., addChildrenToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (]
[(, null, ), ;, addingRoot, ., addChildrenToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (]
[), ;, addingRoot, ., addChildrenToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, initCode, !=]
[expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, initCode, !=, null, ), {, Node, addingRoot, =]
[expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, initCode, !=, null, ), {, Node, addingRoot, =]
[., reportCodeChange, (, ), ;, }, if, (, initCode, !=, null, ), {, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (]
[), ;, }, if, (, initCode, !=, null, ), {, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;]
[), ;, }, if, (, initCode, !=, null, ), {, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;]
[(, initCode, !=, null, ), {, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (]
[null, ), {, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (, initCode, ), ;]
[null, ), {, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (, initCode, ), ;]
[extends, AbstractPostOrderCallback, {, private, final, List, <, String, >, removable, ;, RemoveCallback, (, List, <, String, >, removable, ), {]
[extends, AbstractPostOrderCallback, {, private, final, List, <, String, >, removable, ;, RemoveCallback, (, List, <, String, >, removable, ), {]
[final, List, <, String, >, removable, ;, RemoveCallback, (, List, <, String, >, removable, ), {, this, ., removable, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isVarDeclaration, (]
[,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, if, (]
[Node, parent, ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, if, (, removable, ., contains, (]
[Node, parent, ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, if, (, removable, ., contains, (]
[isVarDeclaration, (, n, ), ), {, if, (, removable, ., contains, (, n, ., getString, (, ), ), ), {]
[isVarDeclaration, (, n, ), ), {, if, (, removable, ., contains, (, n, ., getString, (, ), ), ), {]
[), {, if, (, removable, ., contains, (, n, ., getString, (, ), ), ), {, parent, ., removeChild, (]
[., contains, (, n, ., getString, (, ), ), ), {, parent, ., removeChild, (, n, ), ;, if, (]
[contains, (, n, ., getString, (, ), ), ), {, parent, ., removeChild, (, n, ), ;, if, (, !]
[contains, (, n, ., getString, (, ), ), ), {, parent, ., removeChild, (, n, ), ;, if, (, !]
[), ), {, parent, ., removeChild, (, n, ), ;, if, (, !, parent, ., hasChildren, (, ), ), {]
[), ), {, parent, ., removeChild, (, n, ), ;, if, (, !, parent, ., hasChildren, (, ), ), {]
[), ), {, parent, ., removeChild, (, n, ), ;, if, (, !, parent, ., hasChildren, (, ), ), {]
[), ;, if, (, !, parent, ., hasChildren, (, ), ), {, parent, ., getParent, (, ), ., removeChild, (]
[}, private, class, InstrumentReturns, implements, NodeTraversal, ., Callback, {, private, final, int, functionId, ;, InstrumentReturns, (, int, functionId, ), {]
[}, private, class, InstrumentReturns, implements, NodeTraversal, ., Callback, {, private, final, int, functionId, ;, InstrumentReturns, (, int, functionId, ), {]
[implements, NodeTraversal, ., Callback, {, private, final, int, functionId, ;, InstrumentReturns, (, int, functionId, ), {, this, ., functionId, =]
[InstrumentReturns, (, int, functionId, ), {, this, ., functionId, =, functionId, ;, }, void, process, (, Node, body, ), {]
[InstrumentReturns, (, int, functionId, ), {, this, ., functionId, =, functionId, ;, }, void, process, (, Node, body, ), {]
[), {, this, ., functionId, =, functionId, ;, }, void, process, (, Node, body, ), {, NodeTraversal, ., traverse, (]
[this, ., functionId, =, functionId, ;, }, void, process, (, Node, body, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[functionId, =, functionId, ;, }, void, process, (, Node, body, ), {, NodeTraversal, ., traverse, (, compiler, ,, body, ,]
[void, process, (, Node, body, ), {, NodeTraversal, ., traverse, (, compiler, ,, body, ,, this, ), ;, if, (]
[process, (, Node, body, ), {, NodeTraversal, ., traverse, (, compiler, ,, body, ,, this, ), ;, if, (, !]
[Node, body, ), {, NodeTraversal, ., traverse, (, compiler, ,, body, ,, this, ), ;, if, (, !, allPathsReturn, (]
[(, compiler, ,, body, ,, this, ), ;, if, (, !, allPathsReturn, (, body, ), ), {, Node, call, =]
[;, if, (, !, allPathsReturn, (, body, ), ), {, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, expr, =]
[;, if, (, !, allPathsReturn, (, body, ), ), {, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, expr, =]
[allPathsReturn, (, body, ), ), {, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, expr, =, IR, ., exprResult, (]
[), ), {, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;]
[), ), {, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;]
[call, =, newReportFunctionExitNode, (, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, body, ., addChildToBack, (]
[(, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, body, ., addChildToBack, (, expr, ), ;]
[(, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, body, ., addChildToBack, (, expr, ), ;]
[;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return]
[}, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return, !]
[}, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return, !]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[Node, parent, ), {, if, (, !, n, ., isReturn, (, ), ), {, return, ;, }, Node, call, =]
[n, ., isReturn, (, ), ), {, return, ;, }, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, returnRhs, =]
[n, ., isReturn, (, ), ), {, return, ;, }, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, returnRhs, =]
[;, }, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, returnRhs, =, n, ., removeFirstChild, (, ), ;, if, (]
[;, }, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, returnRhs, =, n, ., removeFirstChild, (, ), ;, if, (]
[Node, call, =, newReportFunctionExitNode, (, ), ;, Node, returnRhs, =, n, ., removeFirstChild, (, ), ;, if, (, returnRhs, !=]
[newReportFunctionExitNode, (, ), ;, Node, returnRhs, =, n, ., removeFirstChild, (, ), ;, if, (, returnRhs, !=, null, ), {]
[newReportFunctionExitNode, (, ), ;, Node, returnRhs, =, n, ., removeFirstChild, (, ), ;, if, (, returnRhs, !=, null, ), {]
[Node, returnRhs, =, n, ., removeFirstChild, (, ), ;, if, (, returnRhs, !=, null, ), {, call, ., addChildToBack, (]
[., removeFirstChild, (, ), ;, if, (, returnRhs, !=, null, ), {, call, ., addChildToBack, (, returnRhs, ), ;, }]
[., removeFirstChild, (, ), ;, if, (, returnRhs, !=, null, ), {, call, ., addChildToBack, (, returnRhs, ), ;, }]
[;, if, (, returnRhs, !=, null, ), {, call, ., addChildToBack, (, returnRhs, ), ;, }, n, ., addChildToFront, (]
[returnRhs, !=, null, ), {, call, ., addChildToBack, (, returnRhs, ), ;, }, n, ., addChildToFront, (, call, ), ;]
[returnRhs, !=, null, ), {, call, ., addChildToBack, (, returnRhs, ), ;, }, n, ., addChildToFront, (, call, ), ;]
[(, call, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, newReportFunctionExitNode, (, ), {, Node, call, =]
[(, call, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, newReportFunctionExitNode, (, ), {, Node, call, =]
[compiler, ., reportCodeChange, (, ), ;, }, private, Node, newReportFunctionExitNode, (, ), {, Node, call, =, IR, ., call, (]
[compiler, ., reportCodeChange, (, ), ;, }, private, Node, newReportFunctionExitNode, (, ), {, Node, call, =, IR, ., call, (]
[), ;, }, private, Node, newReportFunctionExitNode, (, ), {, Node, call, =, IR, ., call, (, IR, ., name, (]
[private, Node, newReportFunctionExitNode, (, ), {, Node, call, =, IR, ., call, (, IR, ., name, (, reportFunctionExitName, ), ,]
[private, Node, newReportFunctionExitNode, (, ), {, Node, call, =, IR, ., call, (, IR, ., name, (, reportFunctionExitName, ), ,]
[), {, Node, call, =, IR, ., call, (, IR, ., name, (, reportFunctionExitName, ), ,, IR, ., number, (]
[=, IR, ., call, (, IR, ., name, (, reportFunctionExitName, ), ,, IR, ., number, (, functionId, ), ), ;]
[=, IR, ., call, (, IR, ., name, (, reportFunctionExitName, ), ,, IR, ., number, (, functionId, ), ), ;]
[(, IR, ., name, (, reportFunctionExitName, ), ,, IR, ., number, (, functionId, ), ), ;, call, ., putBooleanProp, (]
[(, IR, ., name, (, reportFunctionExitName, ), ,, IR, ., number, (, functionId, ), ), ;, call, ., putBooleanProp, (]
[(, reportFunctionExitName, ), ,, IR, ., number, (, functionId, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[IR, ., number, (, functionId, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, return]
[FREE_CALL, ,, true, ), ;, return, call, ;, }, private, boolean, allPathsReturn, (, Node, block, ), {, ControlFlowAnalysis, cfa, =]
[), ;, return, call, ;, }, private, boolean, allPathsReturn, (, Node, block, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (]
[return, call, ;, }, private, boolean, allPathsReturn, (, Node, block, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,]
[;, }, private, boolean, allPathsReturn, (, Node, block, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,]
[boolean, allPathsReturn, (, Node, block, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, false, ), ;]
[boolean, allPathsReturn, (, Node, block, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, false, ), ;]
[block, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, false, ), ;, cfa, ., process, (]
[{, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, false, ), ;, cfa, ., process, (, null, ,]
[false, ,, false, ), ;, cfa, ., process, (, null, ,, block, ), ;, ControlFlowGraph, <, Node, >, cfg, =]
[false, ,, false, ), ;, cfa, ., process, (, null, ,, block, ), ;, ControlFlowGraph, <, Node, >, cfg, =]
[null, ,, block, ), ;, ControlFlowGraph, <, Node, >, cfg, =, cfa, ., getCfg, (, ), ;, Node, returnPathsParent, =]
[null, ,, block, ), ;, ControlFlowGraph, <, Node, >, cfg, =, cfa, ., getCfg, (, ), ;, Node, returnPathsParent, =]
[null, ,, block, ), ;, ControlFlowGraph, <, Node, >, cfg, =, cfa, ., getCfg, (, ), ;, Node, returnPathsParent, =]
[cfg, ., getImplicitReturn, (, ), ., getValue, (, ), ;, for, (, DiGraphNode, <, Node, ,, Branch, >, pred, :]
[cfg, ., getImplicitReturn, (, ), ., getValue, (, ), ;, for, (, DiGraphNode, <, Node, ,, Branch, >, pred, :]
[), ., getValue, (, ), ;, for, (, DiGraphNode, <, Node, ,, Branch, >, pred, :, cfg, ., getDirectedPredNodes, (]
[(, DiGraphNode, <, Node, ,, Branch, >, pred, :, cfg, ., getDirectedPredNodes, (, returnPathsParent, ), ), {, Node, n, =]
[(, DiGraphNode, <, Node, ,, Branch, >, pred, :, cfg, ., getDirectedPredNodes, (, returnPathsParent, ), ), {, Node, n, =]
[:, cfg, ., getDirectedPredNodes, (, returnPathsParent, ), ), {, Node, n, =, pred, ., getValue, (, ), ;, if, (]
[cfg, ., getDirectedPredNodes, (, returnPathsParent, ), ), {, Node, n, =, pred, ., getValue, (, ), ;, if, (, !]
[cfg, ., getDirectedPredNodes, (, returnPathsParent, ), ), {, Node, n, =, pred, ., getValue, (, ), ;, if, (, !]
[Node, n, =, pred, ., getValue, (, ), ;, if, (, !, n, ., isReturn, (, ), ), {, return]
[getValue, (, ), ;, if, (, !, n, ., isReturn, (, ), ), {, return, false, ;, }, }, return]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[Node, parent, ), {, if, (, !, n, ., isFunction, (, ), ), {, return, ;, }, int, id, =]
[Node, parent, ), {, if, (, !, n, ., isFunction, (, ), ), {, return, ;, }, int, id, =]
[if, (, !, n, ., isFunction, (, ), ), {, return, ;, }, int, id, =, functionNames, ., getFunctionId, (]
[isFunction, (, ), ), {, return, ;, }, int, id, =, functionNames, ., getFunctionId, (, n, ), ;, if, (]
[isFunction, (, ), ), {, return, ;, }, int, id, =, functionNames, ., getFunctionId, (, n, ), ;, if, (]
[), ), {, return, ;, }, int, id, =, functionNames, ., getFunctionId, (, n, ), ;, if, (, id, <]
[=, functionNames, ., getFunctionId, (, n, ), ;, if, (, id, <, 0, ), {, return, ;, }, if, (]
[functionNames, ., getFunctionId, (, n, ), ;, if, (, id, <, 0, ), {, return, ;, }, if, (, !]
[functionNames, ., getFunctionId, (, n, ), ;, if, (, id, <, 0, ), {, return, ;, }, if, (, !]
[<, 0, ), {, return, ;, }, if, (, !, reportFunctionName, ., isEmpty, (, ), ), {, Node, body, =]
[<, 0, ), {, return, ;, }, if, (, !, reportFunctionName, ., isEmpty, (, ), ), {, Node, body, =]
[<, 0, ), {, return, ;, }, if, (, !, reportFunctionName, ., isEmpty, (, ), ), {, Node, body, =]
[<, 0, ), {, return, ;, }, if, (, !, reportFunctionName, ., isEmpty, (, ), ), {, Node, body, =]
[Node, body, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;, Node, call, =]
[Node, body, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;, Node, call, =]
[., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;, Node, call, =, IR, ., call, (]
[., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;, Node, call, =, IR, ., call, (]
[., getNext, (, ), ., getNext, (, ), ;, Node, call, =, IR, ., call, (, IR, ., name, (]
[), ., getNext, (, ), ;, Node, call, =, IR, ., call, (, IR, ., name, (, reportFunctionName, ), ,]
[), ., getNext, (, ), ;, Node, call, =, IR, ., call, (, IR, ., name, (, reportFunctionName, ), ,]
[), ;, Node, call, =, IR, ., call, (, IR, ., name, (, reportFunctionName, ), ,, IR, ., number, (]
[=, IR, ., call, (, IR, ., name, (, reportFunctionName, ), ,, IR, ., number, (, id, ), ), ;]
[=, IR, ., call, (, IR, ., name, (, reportFunctionName, ), ,, IR, ., number, (, id, ), ), ;]
[(, IR, ., name, (, reportFunctionName, ), ,, IR, ., number, (, id, ), ), ;, call, ., putBooleanProp, (]
[(, IR, ., name, (, reportFunctionName, ), ,, IR, ., number, (, id, ), ), ;, call, ., putBooleanProp, (]
[(, reportFunctionName, ), ,, IR, ., number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =]
[number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =]
[), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;]
[., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, body, ., addChildToFront, (]
[true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, body, ., addChildToFront, (, expr, ), ;]
[true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, body, ., addChildToFront, (, expr, ), ;]
[(, call, ), ;, body, ., addChildToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (]
[call, ), ;, body, ., addChildToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !]
[call, ), ;, body, ., addChildToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !]
[compiler, ., reportCodeChange, (, ), ;, }, if, (, !, reportFunctionExitName, ., isEmpty, (, ), ), {, Node, body, =]
[compiler, ., reportCodeChange, (, ), ;, }, if, (, !, reportFunctionExitName, ., isEmpty, (, ), ), {, Node, body, =]
[compiler, ., reportCodeChange, (, ), ;, }, if, (, !, reportFunctionExitName, ., isEmpty, (, ), ), {, Node, body, =]
[compiler, ., reportCodeChange, (, ), ;, }, if, (, !, reportFunctionExitName, ., isEmpty, (, ), ), {, Node, body, =]
[), ), {, Node, body, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;]
[), ), {, Node, body, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;]
[), {, Node, body, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;, (]
[body, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;, (, new, InstrumentReturns, (]
[), ., getNext, (, ), ., getNext, (, ), ;, (, new, InstrumentReturns, (, id, ), ), ., process, (]
[getNext, (, ), ;, (, new, InstrumentReturns, (, id, ), ), ., process, (, body, ), ;, }, if, (]
[(, ), ;, (, new, InstrumentReturns, (, id, ), ), ., process, (, body, ), ;, }, if, (, !]
[(, ), ;, (, new, InstrumentReturns, (, id, ), ), ., process, (, body, ), ;, }, if, (, !]
[., process, (, body, ), ;, }, if, (, !, definedFunctionName, ., isEmpty, (, ), ), {, Node, call, =]
[., process, (, body, ), ;, }, if, (, !, definedFunctionName, ., isEmpty, (, ), ), {, Node, call, =]
[), ;, }, if, (, !, definedFunctionName, ., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (]
[), ;, }, if, (, !, definedFunctionName, ., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (]
[(, !, definedFunctionName, ., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (, IR, ., name, (]
[., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (, IR, ., name, (, definedFunctionName, ), ,]
[., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (, IR, ., name, (, definedFunctionName, ), ,]
[), {, Node, call, =, IR, ., call, (, IR, ., name, (, definedFunctionName, ), ,, IR, ., number, (]
[=, IR, ., call, (, IR, ., name, (, definedFunctionName, ), ,, IR, ., number, (, id, ), ), ;]
[=, IR, ., call, (, IR, ., name, (, definedFunctionName, ), ,, IR, ., number, (, id, ), ), ;]
[(, IR, ., name, (, definedFunctionName, ), ,, IR, ., number, (, id, ), ), ;, call, ., putBooleanProp, (]
[(, IR, ., name, (, definedFunctionName, ), ,, IR, ., number, (, id, ), ), ;, call, ., putBooleanProp, (]
[(, definedFunctionName, ), ,, IR, ., number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =]
[number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =]
[), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, NodeUtil, ., newExpr, (]
[Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, NodeUtil, ., newExpr, (, call, ), ;, Node, addingRoot, =]
[true, ), ;, Node, expr, =, NodeUtil, ., newExpr, (, call, ), ;, Node, addingRoot, =, null, ;, if, (]
[true, ), ;, Node, expr, =, NodeUtil, ., newExpr, (, call, ), ;, Node, addingRoot, =, null, ;, if, (]
[expr, =, NodeUtil, ., newExpr, (, call, ), ;, Node, addingRoot, =, null, ;, if, (, NodeUtil, ., isFunctionDeclaration, (]
[), ;, Node, addingRoot, =, null, ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, JSModule, module, =]
[), ;, Node, addingRoot, =, null, ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, JSModule, module, =]
[;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, JSModule, module, =, t, ., getModule, (, ), ;]
[(, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, JSModule, module, =, t, ., getModule, (, ), ;, addingRoot, =]
[(, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, JSModule, module, =, t, ., getModule, (, ), ;, addingRoot, =]
[(, n, ), ), {, JSModule, module, =, t, ., getModule, (, ), ;, addingRoot, =, compiler, ., getNodeForCodeInsertion, (]
[), {, JSModule, module, =, t, ., getModule, (, ), ;, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;]
[), {, JSModule, module, =, t, ., getModule, (, ), ;, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;]
[=, t, ., getModule, (, ), ;, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, addingRoot, ., addChildToFront, (]
[compiler, ., getNodeForCodeInsertion, (, module, ), ;, addingRoot, ., addChildToFront, (, expr, ), ;, }, else, {, Node, beforeChild, =]
[addingRoot, ., addChildToFront, (, expr, ), ;, }, else, {, Node, beforeChild, =, n, ;, for, (, Node, ancestor, :]
[addingRoot, ., addChildToFront, (, expr, ), ;, }, else, {, Node, beforeChild, =, n, ;, for, (, Node, ancestor, :]
[Node, beforeChild, =, n, ;, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, int, type, =]
[Node, beforeChild, =, n, ;, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, int, type, =]
[ancestor, :, n, ., getAncestors, (, ), ), {, int, type, =, ancestor, ., getType, (, ), ;, if, (]
[ancestor, :, n, ., getAncestors, (, ), ), {, int, type, =, ancestor, ., getType, (, ), ;, if, (]
[ancestor, :, n, ., getAncestors, (, ), ), {, int, type, =, ancestor, ., getType, (, ), ;, if, (]
[n, ., getAncestors, (, ), ), {, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, ==]
[n, ., getAncestors, (, ), ), {, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, ==]
[), ), {, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, ==, Token, ., BLOCK, ||]
[), ), {, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, ==, Token, ., BLOCK, ||]
[{, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, ==, Token, ., BLOCK, ||, type, ==]
[{, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, ==, Token, ., BLOCK, ||, type, ==]
[., getType, (, ), ;, if, (, type, ==, Token, ., BLOCK, ||, type, ==, Token, ., SCRIPT, ), {]
[(, ), ;, if, (, type, ==, Token, ., BLOCK, ||, type, ==, Token, ., SCRIPT, ), {, addingRoot, =]
[type, ==, Token, ., BLOCK, ||, type, ==, Token, ., SCRIPT, ), {, addingRoot, =, ancestor, ;, break, ;, }]
[Token, ., BLOCK, ||, type, ==, Token, ., SCRIPT, ), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild, =]
[||, type, ==, Token, ., SCRIPT, ), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }]
[||, type, ==, Token, ., SCRIPT, ), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }]
[., SCRIPT, ), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }, addingRoot, ., addChildBefore, (]
[), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }, addingRoot, ., addChildBefore, (, expr, ,]
[ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }, addingRoot, ., addChildBefore, (, expr, ,, beforeChild, ), ;, }]
[ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }, addingRoot, ., addChildBefore, (, expr, ,, beforeChild, ), ;, }]
