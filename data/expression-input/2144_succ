[;, private, int, requiredUsage, =, DEFAULT_REQUIRED_USAGE, ;, private, static, final, int, MIN_PROP_SIZE, =, 4, ;, static, final, String, PROTOTYPE_PROPERTY_NAME, =]
[;, private, static, final, int, MIN_PROP_SIZE, =, 4, ;, static, final, String, PROTOTYPE_PROPERTY_NAME, =, getArrayNotationNameFor, (, "prototype", ), ;, private]
[;, static, final, String, PROTOTYPE_PROPERTY_NAME, =, getArrayNotationNameFor, (, "prototype", ), ;, private, final, Map, <, String, ,, Symbol, >, props]
[;, private, final, Map, <, String, ,, Symbol, >, props, =, Maps, ., newHashMap, (, ), ;, private, final, List]
[), ;, private, final, Map, <, String, ,, Symbol, >, props, =, Maps, ., newHashMap, (, ), ;, private, final]
[;, private, final, List, <, Node, >, accessors, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Node]
[., newHashMap, (, ), ;, private, final, List, <, Node, >, accessors, =, Lists, ., newArrayList, (, ), ;, private]
[;, private, final, List, <, Node, >, mutators, =, Lists, ., newArrayList, (, ), ;, private, final, Map, <, Node]
[., newArrayList, (, ), ;, private, final, List, <, Node, >, mutators, =, Lists, ., newArrayList, (, ), ;, private]
[;, private, final, Map, <, Node, ,, Node, >, replacementMap, =, new, IdentityHashMap, <, Node, ,, Node, >, (, )]
[., newArrayList, (, ), ;, private, final, Map, <, Node, ,, Node, >, replacementMap, =, new, IdentityHashMap, <, Node, ,]
[;, private, final, Map, <, String, ,, Symbol, >, globals, =, Maps, ., newHashMap, (, ), ;, private, final, AbstractCompiler]
[;, private, final, AbstractCompiler, compiler, ;, private, final, JSModuleGraph, moduleGraph, ;, private, Node, defaultRoot, ;, private, Map, <, JSModule, ,]
[., newHashMap, (, ), ;, private, final, AbstractCompiler, compiler, ;, private, final, JSModuleGraph, moduleGraph, ;, private, Node, defaultRoot, ;, private]
[;, private, final, Set, <, String, >, aliasableGlobals, =, Sets, ., newHashSet, (, ), ;, AliasExternals, (, AbstractCompiler, compiler, ,]
[., newHashSet, (, "arguments", ,, "eval", ,, "NodeFilter", ,, "JSCompiler_renameProperty", ), ;, private, final, Set, <, String, >, aliasableGlobals, =]
[,, "eval", ,, "NodeFilter", ,, "JSCompiler_renameProperty", ), ;, private, final, Set, <, String, >, aliasableGlobals, =, Sets, ., newHashSet, (]
[,, "NodeFilter", ,, "JSCompiler_renameProperty", ), ;, private, final, Set, <, String, >, aliasableGlobals, =, Sets, ., newHashSet, (, ), ;]
[,, "JSCompiler_renameProperty", ), ;, private, final, Set, <, String, >, aliasableGlobals, =, Sets, ., newHashSet, (, ), ;, AliasExternals, (]
[), ;, private, final, Set, <, String, >, aliasableGlobals, =, Sets, ., newHashSet, (, ), ;, AliasExternals, (, AbstractCompiler, compiler]
[;, AliasExternals, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ), {, this, (, compiler, ,, moduleGraph, ,, null, ,, null, )]
[., newHashSet, (, ), ;, AliasExternals, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ), {, this, (, compiler, ,, moduleGraph, ,]
[,, moduleGraph, ,, null, ,, null, ), ;, }, AliasExternals, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, @, Nullable, String]
[,, null, ,, null, ), ;, }, AliasExternals, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, @, Nullable, String, unaliasableGlobals, ,]
[,, null, ), ;, }, AliasExternals, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, @, Nullable, String, unaliasableGlobals, ,, @, Nullable]
[), ;, }, AliasExternals, (, AbstractCompiler, compiler, ,, JSModuleGraph, moduleGraph, ,, @, Nullable, String, unaliasableGlobals, ,, @, Nullable, String, aliasableGlobals]
[=, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), &&, !]
[., compiler, =, compiler, ;, this, ., moduleGraph, =, moduleGraph, ;, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, )]
[;, this, ., moduleGraph, =, moduleGraph, ;, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), &&, !, Strings, .]
[=, moduleGraph, ;, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), &&, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, )]
[., moduleGraph, =, moduleGraph, ;, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), &&, !, Strings, ., isNullOrEmpty, (]
[;, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), &&, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {]
[), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals]
[&&, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }]
[&&, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }]
[., isNullOrEmpty, (, unaliasableGlobals, ), &&, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must "]
[), &&, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;]
[), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals]
[), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals]
[., isNullOrEmpty, (, aliasableGlobals, ), ), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }, if, (, !]
[), ), {, throw, new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (]
[;, }, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), ), {, this, ., unaliasableGlobals, ., addAll, (, Arrays]
[), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), ), {, this, ., unaliasableGlobals, ., addAll, (]
[+, "choose one or the other.", ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), ), {, this, ., unaliasableGlobals, .]
[), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), ), {, this, ., unaliasableGlobals, ., addAll, (]
[), {, this, ., unaliasableGlobals, ., addAll, (, Arrays, ., asList, (, unaliasableGlobals, ., split, (, ",", ), ), )]
[), {, this, ., unaliasableGlobals, ., addAll, (, Arrays, ., asList, (, unaliasableGlobals, ., split, (, ",", ), ), )]
[., isNullOrEmpty, (, unaliasableGlobals, ), ), {, this, ., unaliasableGlobals, ., addAll, (, Arrays, ., asList, (, unaliasableGlobals, ., split]
[), ), {, this, ., unaliasableGlobals, ., addAll, (, Arrays, ., asList, (, unaliasableGlobals, ., split, (, ",", ), )]
[;, }, if, (, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, this, ., aliasableGlobals, ., addAll, (, Arrays]
[., addAll, (, Arrays, ., asList, (, unaliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (, !]
[., unaliasableGlobals, ., addAll, (, Arrays, ., asList, (, unaliasableGlobals, ., split, (, ",", ), ), ), ;, }, if]
[), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, this, ., aliasableGlobals, ., addAll, (]
[., asList, (, unaliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (]
[), ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, this, ., aliasableGlobals, ., addAll]
[., split, (, ",", ), ), ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {]
[), ), ), ;, }, if, (, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, ), ), {, this, ., aliasableGlobals, .]
[), {, this, ., aliasableGlobals, ., addAll, (, Arrays, ., asList, (, aliasableGlobals, ., split, (, ",", ), ), )]
[), {, this, ., aliasableGlobals, ., addAll, (, Arrays, ., asList, (, aliasableGlobals, ., split, (, ",", ), ), )]
[., isNullOrEmpty, (, aliasableGlobals, ), ), {, this, ., aliasableGlobals, ., addAll, (, Arrays, ., asList, (, aliasableGlobals, ., split]
[), ), {, this, ., aliasableGlobals, ., addAll, (, Arrays, ., asList, (, aliasableGlobals, ., split, (, ",", ), )]
[;, }, if, (, moduleGraph, !=, null, ), {, moduleRoots, =, Maps, ., newHashMap, (, ), ;, }, }, public]
[., addAll, (, Arrays, ., asList, (, aliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (, moduleGraph]
[., aliasableGlobals, ., addAll, (, Arrays, ., asList, (, aliasableGlobals, ., split, (, ",", ), ), ), ;, }, if]
[), ;, }, if, (, moduleGraph, !=, null, ), {, moduleRoots, =, Maps, ., newHashMap, (, ), ;, }, }]
[., asList, (, aliasableGlobals, ., split, (, ",", ), ), ), ;, }, if, (, moduleGraph, !=, null, ), {]
[), ), ;, }, if, (, moduleGraph, !=, null, ), {, moduleRoots, =, Maps, ., newHashMap, (, ), ;, }]
[., split, (, ",", ), ), ), ;, }, if, (, moduleGraph, !=, null, ), {, moduleRoots, =, Maps, .]
[), ), ), ;, }, if, (, moduleGraph, !=, null, ), {, moduleRoots, =, Maps, ., newHashMap, (, ), ;]
[), {, moduleRoots, =, Maps, ., newHashMap, (, ), ;, }, }, public, void, setRequiredUsage, (, int, usage, ), {]
[!=, null, ), {, moduleRoots, =, Maps, ., newHashMap, (, ), ;, }, }, public, void, setRequiredUsage, (, int, usage]
[), {, moduleRoots, =, Maps, ., newHashMap, (, ), ;, }, }, public, void, setRequiredUsage, (, int, usage, ), {]
[=, Maps, ., newHashMap, (, ), ;, }, }, public, void, setRequiredUsage, (, int, usage, ), {, this, ., requiredUsage]
[;, }, }, public, void, setRequiredUsage, (, int, usage, ), {, this, ., requiredUsage, =, usage, ;, }, @, Override]
[., newHashMap, (, ), ;, }, }, public, void, setRequiredUsage, (, int, usage, ), {, this, ., requiredUsage, =, usage]
[=, usage, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, defaultRoot, =, root]
[., requiredUsage, =, usage, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, defaultRoot]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, defaultRoot, =, root, ., getFirstChild]
[=, root, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (, defaultRoot, ., isScript, (, ), ), ;, aliasProperties, (]
[;, Preconditions, ., checkState, (, defaultRoot, ., isScript, (, ), ), ;, aliasProperties, (, externs, ,, root, ), ;, aliasGlobals]
[., getFirstChild, (, ), ;, Preconditions, ., checkState, (, defaultRoot, ., isScript, (, ), ), ;, aliasProperties, (, externs, ,]
[;, aliasProperties, (, externs, ,, root, ), ;, aliasGlobals, (, externs, ,, root, ), ;, }, private, void, aliasProperties, (]
[., checkState, (, defaultRoot, ., isScript, (, ), ), ;, aliasProperties, (, externs, ,, root, ), ;, aliasGlobals, (, externs]
[), ;, aliasProperties, (, externs, ,, root, ), ;, aliasGlobals, (, externs, ,, root, ), ;, }, private, void, aliasProperties]
[., isScript, (, ), ), ;, aliasProperties, (, externs, ,, root, ), ;, aliasGlobals, (, externs, ,, root, ), ;]
[;, aliasGlobals, (, externs, ,, root, ), ;, }, private, void, aliasProperties, (, Node, externs, ,, Node, root, ), {]
[,, root, ), ;, aliasGlobals, (, externs, ,, root, ), ;, }, private, void, aliasProperties, (, Node, externs, ,, Node]
[), ;, aliasGlobals, (, externs, ,, root, ), ;, }, private, void, aliasProperties, (, Node, externs, ,, Node, root, )]
[;, }, private, void, aliasProperties, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs]
[,, root, ), ;, }, private, void, aliasProperties, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[), ;, }, private, void, aliasProperties, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[;, props, ., put, (, "prototype", ,, newSymbolForProperty, (, "prototype", ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[., traverse, (, compiler, ,, externs, ,, new, GetAliasableNames, (, aliasableGlobals, ), ), ;, props, ., put, (, "prototype", ,]
[,, externs, ,, new, GetAliasableNames, (, aliasableGlobals, ), ), ;, props, ., put, (, "prototype", ,, newSymbolForProperty, (, "prototype", )]
[,, new, GetAliasableNames, (, aliasableGlobals, ), ), ;, props, ., put, (, "prototype", ,, newSymbolForProperty, (, "prototype", ), ), ;]
[), ;, props, ., put, (, "prototype", ,, newSymbolForProperty, (, "prototype", ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[), ), ;, props, ., put, (, "prototype", ,, newSymbolForProperty, (, "prototype", ), ), ;, NodeTraversal, ., traverse, (, compiler]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, PropertyGatherer, (, ), ), ;, for, (, Symbol, prop, :]
[., put, (, "prototype", ,, newSymbolForProperty, (, "prototype", ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new]
[,, newSymbolForProperty, (, "prototype", ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, PropertyGatherer, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, PropertyGatherer, (, ), ), ;, for, (, Symbol, prop]
[), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, PropertyGatherer, (, ), ), ;, for, (, Symbol]
[;, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop, ., name, ., length]
[., traverse, (, compiler, ,, root, ,, new, PropertyGatherer, (, ), ), ;, for, (, Symbol, prop, :, props, .]
[,, root, ,, new, PropertyGatherer, (, ), ), ;, for, (, Symbol, prop, :, props, ., values, (, ), )]
[,, new, PropertyGatherer, (, ), ), ;, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if]
[), ;, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop, ., name, .]
[), {, if, (, prop, ., name, ., length, (, ), >=, MIN_PROP_SIZE, ), {, if, (, prop, ., accessorCount]
[., values, (, ), ), {, if, (, prop, ., name, ., length, (, ), >=, MIN_PROP_SIZE, ), {, if]
[), {, if, (, prop, ., accessorCount, >=, requiredUsage, ), {, prop, ., aliasAccessor, =, true, ;, }, if, (]
[>=, MIN_PROP_SIZE, ), {, if, (, prop, ., accessorCount, >=, requiredUsage, ), {, prop, ., aliasAccessor, =, true, ;, }]
[., length, (, ), >=, MIN_PROP_SIZE, ), {, if, (, prop, ., accessorCount, >=, requiredUsage, ), {, prop, ., aliasAccessor]
[., name, ., length, (, ), >=, MIN_PROP_SIZE, ), {, if, (, prop, ., accessorCount, >=, requiredUsage, ), {, prop]
[), {, if, (, prop, ., accessorCount, >=, requiredUsage, ), {, prop, ., aliasAccessor, =, true, ;, }, if, (]
[), {, prop, ., aliasAccessor, =, true, ;, }, if, (, prop, ., mutatorCount, >=, requiredUsage, ), {, prop, .]
[>=, requiredUsage, ), {, prop, ., aliasAccessor, =, true, ;, }, if, (, prop, ., mutatorCount, >=, requiredUsage, ), {]
[., accessorCount, >=, requiredUsage, ), {, prop, ., aliasAccessor, =, true, ;, }, if, (, prop, ., mutatorCount, >=, requiredUsage]
[), {, prop, ., aliasAccessor, =, true, ;, }, if, (, prop, ., mutatorCount, >=, requiredUsage, ), {, prop, .]
[=, true, ;, }, if, (, prop, ., mutatorCount, >=, requiredUsage, ), {, prop, ., aliasMutator, =, true, ;, }]
[., aliasAccessor, =, true, ;, }, if, (, prop, ., mutatorCount, >=, requiredUsage, ), {, prop, ., aliasMutator, =, true]
[;, }, if, (, prop, ., mutatorCount, >=, requiredUsage, ), {, prop, ., aliasMutator, =, true, ;, }, }, }]
[), {, prop, ., aliasMutator, =, true, ;, }, }, }, for, (, Node, propInfo, :, accessors, ), {, replaceAccessor]
[>=, requiredUsage, ), {, prop, ., aliasMutator, =, true, ;, }, }, }, for, (, Node, propInfo, :, accessors, )]
[., mutatorCount, >=, requiredUsage, ), {, prop, ., aliasMutator, =, true, ;, }, }, }, for, (, Node, propInfo, :]
[), {, prop, ., aliasMutator, =, true, ;, }, }, }, for, (, Node, propInfo, :, accessors, ), {, replaceAccessor]
[=, true, ;, }, }, }, for, (, Node, propInfo, :, accessors, ), {, replaceAccessor, (, propInfo, ), ;, }]
[., aliasMutator, =, true, ;, }, }, }, for, (, Node, propInfo, :, accessors, ), {, replaceAccessor, (, propInfo, )]
[;, }, }, }, for, (, Node, propInfo, :, accessors, ), {, replaceAccessor, (, propInfo, ), ;, }, for, (]
[), {, replaceAccessor, (, propInfo, ), ;, }, for, (, Node, propInfo, :, mutators, ), {, replaceMutator, (, propInfo, )]
[;, }, for, (, Node, propInfo, :, mutators, ), {, replaceMutator, (, propInfo, ), ;, }, for, (, Symbol, prop]
[), ;, }, for, (, Node, propInfo, :, mutators, ), {, replaceMutator, (, propInfo, ), ;, }, for, (, Symbol]
[), {, replaceMutator, (, propInfo, ), ;, }, for, (, Symbol, prop, :, props, ., values, (, ), ), {]
[;, }, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop, ., aliasAccessor, )]
[), ;, }, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop, ., aliasAccessor]
[), {, if, (, prop, ., aliasAccessor, ), {, addAccessorPropName, (, prop, ., name, ,, getAddingRoot, (, prop, ., deepestModuleAccess]
[., values, (, ), ), {, if, (, prop, ., aliasAccessor, ), {, addAccessorPropName, (, prop, ., name, ,, getAddingRoot]
[), {, addAccessorPropName, (, prop, ., name, ,, getAddingRoot, (, prop, ., deepestModuleAccess, ), ), ;, }, }, for, (]
[., aliasAccessor, ), {, addAccessorPropName, (, prop, ., name, ,, getAddingRoot, (, prop, ., deepestModuleAccess, ), ), ;, }, }]
[;, }, }, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop, ., aliasMutator]
[,, getAddingRoot, (, prop, ., deepestModuleAccess, ), ), ;, }, }, for, (, Symbol, prop, :, props, ., values, (]
[., name, ,, getAddingRoot, (, prop, ., deepestModuleAccess, ), ), ;, }, }, for, (, Symbol, prop, :, props, .]
[), ;, }, }, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop, .]
[), ), ;, }, }, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if, (, prop]
[., deepestModuleAccess, ), ), ;, }, }, for, (, Symbol, prop, :, props, ., values, (, ), ), {, if]
[), {, if, (, prop, ., aliasMutator, ), {, addMutatorFunction, (, prop, ., name, ,, getAddingRoot, (, prop, ., deepestModuleMutate]
[., values, (, ), ), {, if, (, prop, ., aliasMutator, ), {, addMutatorFunction, (, prop, ., name, ,, getAddingRoot]
[), {, addMutatorFunction, (, prop, ., name, ,, getAddingRoot, (, prop, ., deepestModuleMutate, ), ), ;, }, }, }, private]
[., aliasMutator, ), {, addMutatorFunction, (, prop, ., name, ,, getAddingRoot, (, prop, ., deepestModuleMutate, ), ), ;, }, }]
[;, }, }, }, private, void, replaceAccessor, (, Node, getPropNode, ), {, Node, propNameNode, =, getPropNode, ., getLastChild, (, )]
[,, getAddingRoot, (, prop, ., deepestModuleMutate, ), ), ;, }, }, }, private, void, replaceAccessor, (, Node, getPropNode, ), {]
[., name, ,, getAddingRoot, (, prop, ., deepestModuleMutate, ), ), ;, }, }, }, private, void, replaceAccessor, (, Node, getPropNode]
[), ;, }, }, }, private, void, replaceAccessor, (, Node, getPropNode, ), {, Node, propNameNode, =, getPropNode, ., getLastChild, (]
[), ), ;, }, }, }, private, void, replaceAccessor, (, Node, getPropNode, ), {, Node, propNameNode, =, getPropNode, ., getLastChild]
[., deepestModuleMutate, ), ), ;, }, }, }, private, void, replaceAccessor, (, Node, getPropNode, ), {, Node, propNameNode, =, getPropNode]
[;, String, propName, =, propNameNode, ., getString, (, ), ;, if, (, props, ., get, (, propName, ), ., aliasAccessor]
[., getLastChild, (, ), ;, String, propName, =, propNameNode, ., getString, (, ), ;, if, (, props, ., get, (]
[;, if, (, props, ., get, (, propName, ), ., aliasAccessor, ), {, Node, propSrc, =, getPropNode, ., getFirstChild, (]
[., getString, (, ), ;, if, (, props, ., get, (, propName, ), ., aliasAccessor, ), {, Node, propSrc, =]
[), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;, Node, newNameNode]
[., aliasAccessor, ), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;]
[., get, (, propName, ), ., aliasAccessor, ), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, getPropNode, .]
[), ., aliasAccessor, ), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, )]
[;, getPropNode, ., removeChild, (, propSrc, ), ;, Node, newNameNode, =, IR, ., name, (, getArrayNotationNameFor, (, propName, ), )]
[., getFirstChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;, Node, newNameNode, =, IR, ., name, (, getArrayNotationNameFor]
[;, Node, newNameNode, =, IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;, Node, elemNode, =, IR, ., getelem]
[., removeChild, (, propSrc, ), ;, Node, newNameNode, =, IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;, Node]
[), ;, Node, newNameNode, =, IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;, Node, elemNode, =, IR, .]
[;, Node, elemNode, =, IR, ., getelem, (, propSrc, ,, newNameNode, ), ;, replaceNode, (, getPropNode, ., getParent, (, )]
[., name, (, getArrayNotationNameFor, (, propName, ), ), ;, Node, elemNode, =, IR, ., getelem, (, propSrc, ,, newNameNode, )]
[), ;, Node, elemNode, =, IR, ., getelem, (, propSrc, ,, newNameNode, ), ;, replaceNode, (, getPropNode, ., getParent, (]
[), ), ;, Node, elemNode, =, IR, ., getelem, (, propSrc, ,, newNameNode, ), ;, replaceNode, (, getPropNode, ., getParent]
[;, replaceNode, (, getPropNode, ., getParent, (, ), ,, getPropNode, ,, elemNode, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., getelem, (, propSrc, ,, newNameNode, ), ;, replaceNode, (, getPropNode, ., getParent, (, ), ,, getPropNode, ,, elemNode, )]
[,, newNameNode, ), ;, replaceNode, (, getPropNode, ., getParent, (, ), ,, getPropNode, ,, elemNode, ), ;, compiler, ., reportCodeChange]
[), ;, replaceNode, (, getPropNode, ., getParent, (, ), ,, getPropNode, ,, elemNode, ), ;, compiler, ., reportCodeChange, (, )]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, replaceMutator, (, Node, getPropNode, ), {, Node, propNameNode, =]
[,, getPropNode, ,, elemNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, replaceMutator, (, Node, getPropNode]
[., getParent, (, ), ,, getPropNode, ,, elemNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void]
[,, elemNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, replaceMutator, (, Node, getPropNode, ), {]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, replaceMutator, (, Node, getPropNode, ), {, Node, propNameNode]
[;, }, }, private, void, replaceMutator, (, Node, getPropNode, ), {, Node, propNameNode, =, getPropNode, ., getLastChild, (, ), ;]
[., reportCodeChange, (, ), ;, }, }, private, void, replaceMutator, (, Node, getPropNode, ), {, Node, propNameNode, =, getPropNode, .]
[;, Node, parentNode, =, getPropNode, ., getParent, (, ), ;, Symbol, prop, =, props, ., get, (, propNameNode, ., getString]
[., getLastChild, (, ), ;, Node, parentNode, =, getPropNode, ., getParent, (, ), ;, Symbol, prop, =, props, ., get]
[;, Symbol, prop, =, props, ., get, (, propNameNode, ., getString, (, ), ), ;, if, (, prop, ., aliasMutator]
[., getParent, (, ), ;, Symbol, prop, =, props, ., get, (, propNameNode, ., getString, (, ), ), ;, if]
[;, if, (, prop, ., aliasMutator, ), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, Node, propDest, =]
[., get, (, propNameNode, ., getString, (, ), ), ;, if, (, prop, ., aliasMutator, ), {, Node, propSrc, =]
[), ;, if, (, prop, ., aliasMutator, ), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, Node, propDest]
[., getString, (, ), ), ;, if, (, prop, ., aliasMutator, ), {, Node, propSrc, =, getPropNode, ., getFirstChild, (]
[), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, Node, propDest, =, parentNode, ., getLastChild, (, ), ;]
[., aliasMutator, ), {, Node, propSrc, =, getPropNode, ., getFirstChild, (, ), ;, Node, propDest, =, parentNode, ., getLastChild, (]
[;, Node, propDest, =, parentNode, ., getLastChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;, getPropNode, ., removeChild]
[., getFirstChild, (, ), ;, Node, propDest, =, parentNode, ., getLastChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, )]
[;, getPropNode, ., removeChild, (, propSrc, ), ;, getPropNode, ., removeChild, (, propNameNode, ), ;, parentNode, ., removeChild, (, propDest]
[., getLastChild, (, ), ;, getPropNode, ., removeChild, (, propSrc, ), ;, getPropNode, ., removeChild, (, propNameNode, ), ;, parentNode]
[;, getPropNode, ., removeChild, (, propNameNode, ), ;, parentNode, ., removeChild, (, propDest, ), ;, Node, callName, =, IR, .]
[., removeChild, (, propSrc, ), ;, getPropNode, ., removeChild, (, propNameNode, ), ;, parentNode, ., removeChild, (, propDest, ), ;]
[), ;, getPropNode, ., removeChild, (, propNameNode, ), ;, parentNode, ., removeChild, (, propDest, ), ;, Node, callName, =, IR]
[;, parentNode, ., removeChild, (, propDest, ), ;, Node, callName, =, IR, ., name, (, getMutatorFor, (, propNameNode, ., getString]
[., removeChild, (, propNameNode, ), ;, parentNode, ., removeChild, (, propDest, ), ;, Node, callName, =, IR, ., name, (]
[), ;, parentNode, ., removeChild, (, propDest, ), ;, Node, callName, =, IR, ., name, (, getMutatorFor, (, propNameNode, .]
[;, Node, callName, =, IR, ., name, (, getMutatorFor, (, propNameNode, ., getString, (, ), ), ), ;, Node, call]
[., removeChild, (, propDest, ), ;, Node, callName, =, IR, ., name, (, getMutatorFor, (, propNameNode, ., getString, (, )]
[), ;, Node, callName, =, IR, ., name, (, getMutatorFor, (, propNameNode, ., getString, (, ), ), ), ;, Node]
[;, Node, call, =, IR, ., call, (, callName, ,, propSrc, ,, propDest, ), ;, call, ., putBooleanProp, (, Node]
[., name, (, getMutatorFor, (, propNameNode, ., getString, (, ), ), ), ;, Node, call, =, IR, ., call, (]
[), ;, Node, call, =, IR, ., call, (, callName, ,, propSrc, ,, propDest, ), ;, call, ., putBooleanProp, (]
[), ), ;, Node, call, =, IR, ., call, (, callName, ,, propSrc, ,, propDest, ), ;, call, ., putBooleanProp]
[., getString, (, ), ), ), ;, Node, call, =, IR, ., call, (, callName, ,, propSrc, ,, propDest, )]
[;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, replaceNode, (, parentNode, ., getParent, (, ), ,]
[., call, (, callName, ,, propSrc, ,, propDest, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[,, propSrc, ,, propDest, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, replaceNode, (, parentNode]
[,, propDest, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, replaceNode, (, parentNode, ., getParent]
[), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, replaceNode, (, parentNode, ., getParent, (, )]
[;, replaceNode, (, parentNode, ., getParent, (, ), ,, parentNode, ,, call, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, replaceNode, (, parentNode, ., getParent, (, ), ,, parentNode, ,]
[,, true, ), ;, replaceNode, (, parentNode, ., getParent, (, ), ,, parentNode, ,, call, ), ;, compiler, ., reportCodeChange]
[., FREE_CALL, ,, true, ), ;, replaceNode, (, parentNode, ., getParent, (, ), ,, parentNode, ,, call, ), ;, compiler]
[), ;, replaceNode, (, parentNode, ., getParent, (, ), ,, parentNode, ,, call, ), ;, compiler, ., reportCodeChange, (, )]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, replaceNode, (, Node, parent, ,, Node, before, ,, Node]
[,, parentNode, ,, call, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, replaceNode, (, Node, parent]
[., getParent, (, ), ,, parentNode, ,, call, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void]
[,, call, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, replaceNode, (, Node, parent, ,, Node]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, replaceNode, (, Node, parent, ,, Node, before, ,]
[;, }, }, private, void, replaceNode, (, Node, parent, ,, Node, before, ,, Node, after, ), {, if, (, replacementMap]
[., reportCodeChange, (, ), ;, }, }, private, void, replaceNode, (, Node, parent, ,, Node, before, ,, Node, after, )]
[), {, parent, =, replacementMap, ., get, (, parent, ), ;, }, parent, ., replaceChild, (, before, ,, after, )]
[., containsKey, (, parent, ), ), {, parent, =, replacementMap, ., get, (, parent, ), ;, }, parent, ., replaceChild]
[), ), {, parent, =, replacementMap, ., get, (, parent, ), ;, }, parent, ., replaceChild, (, before, ,, after]
[=, replacementMap, ., get, (, parent, ), ;, }, parent, ., replaceChild, (, before, ,, after, ), ;, replacementMap, .]
[;, }, parent, ., replaceChild, (, before, ,, after, ), ;, replacementMap, ., put, (, before, ,, after, ), ;]
[., get, (, parent, ), ;, }, parent, ., replaceChild, (, before, ,, after, ), ;, replacementMap, ., put, (]
[), ;, }, parent, ., replaceChild, (, before, ,, after, ), ;, replacementMap, ., put, (, before, ,, after, )]
[;, replacementMap, ., put, (, before, ,, after, ), ;, }, private, void, addAccessorPropName, (, String, propName, ,, Node, root]
[., replaceChild, (, before, ,, after, ), ;, replacementMap, ., put, (, before, ,, after, ), ;, }, private, void]
[,, after, ), ;, replacementMap, ., put, (, before, ,, after, ), ;, }, private, void, addAccessorPropName, (, String, propName]
[), ;, replacementMap, ., put, (, before, ,, after, ), ;, }, private, void, addAccessorPropName, (, String, propName, ,, Node]
[;, }, private, void, addAccessorPropName, (, String, propName, ,, Node, root, ), {, Node, propValue, =, IR, ., string, (]
[., put, (, before, ,, after, ), ;, }, private, void, addAccessorPropName, (, String, propName, ,, Node, root, ), {]
[,, after, ), ;, }, private, void, addAccessorPropName, (, String, propName, ,, Node, root, ), {, Node, propValue, =, IR]
[), ;, }, private, void, addAccessorPropName, (, String, propName, ,, Node, root, ), {, Node, propValue, =, IR, ., string]
[;, Node, propNameNode, =, IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;, propNameNode, ., addChildToFront, (, propValue, )]
[., string, (, propName, ), ;, Node, propNameNode, =, IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;, propNameNode]
[), ;, Node, propNameNode, =, IR, ., name, (, getArrayNotationNameFor, (, propName, ), ), ;, propNameNode, ., addChildToFront, (, propValue]
[;, propNameNode, ., addChildToFront, (, propValue, ), ;, Node, var, =, IR, ., var, (, propNameNode, ), ;, root, .]
[., name, (, getArrayNotationNameFor, (, propName, ), ), ;, propNameNode, ., addChildToFront, (, propValue, ), ;, Node, var, =, IR]
[), ;, propNameNode, ., addChildToFront, (, propValue, ), ;, Node, var, =, IR, ., var, (, propNameNode, ), ;, root]
[), ), ;, propNameNode, ., addChildToFront, (, propValue, ), ;, Node, var, =, IR, ., var, (, propNameNode, ), ;]
[;, Node, var, =, IR, ., var, (, propNameNode, ), ;, root, ., addChildToFront, (, var, ), ;, compiler, .]
[., addChildToFront, (, propValue, ), ;, Node, var, =, IR, ., var, (, propNameNode, ), ;, root, ., addChildToFront, (]
[), ;, Node, var, =, IR, ., var, (, propNameNode, ), ;, root, ., addChildToFront, (, var, ), ;, compiler]
[;, root, ., addChildToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, addMutatorFunction, (, String]
[., var, (, propNameNode, ), ;, root, ., addChildToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[), ;, root, ., addChildToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, addMutatorFunction, (]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, void, addMutatorFunction, (, String, propName, ,, Node, root, ), {, String]
[., addChildToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, addMutatorFunction, (, String, propName, ,]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, addMutatorFunction, (, String, propName, ,, Node, root, ), {]
[;, }, private, void, addMutatorFunction, (, String, propName, ,, Node, root, ), {, String, functionName, =, getMutatorFor, (, propName, )]
[., reportCodeChange, (, ), ;, }, private, void, addMutatorFunction, (, String, propName, ,, Node, root, ), {, String, functionName, =]
[;, String, localPropName, =, getMutatorFor, (, propName, ), +, "$a", ;, String, localValueName, =, getMutatorFor, (, propName, ), +, "$b"]
[), ;, String, localPropName, =, getMutatorFor, (, propName, ), +, "$a", ;, String, localValueName, =, getMutatorFor, (, propName, ), +]
[;, String, localValueName, =, getMutatorFor, (, propName, ), +, "$b", ;, Node, fnNode, =, IR, ., function, (, IR, .]
[+, "$a", ;, String, localValueName, =, getMutatorFor, (, propName, ), +, "$b", ;, Node, fnNode, =, IR, ., function, (]
[), +, "$a", ;, String, localValueName, =, getMutatorFor, (, propName, ), +, "$b", ;, Node, fnNode, =, IR, ., function]
[;, String, localValueName, =, getMutatorFor, (, propName, ), +, "$b", ;, Node, fnNode, =, IR, ., function, (, IR, .]
[;, Node, fnNode, =, IR, ., function, (, IR, ., name, (, functionName, ), ,, IR, ., paramList, (, IR]
[+, "$b", ;, Node, fnNode, =, IR, ., function, (, IR, ., name, (, functionName, ), ,, IR, ., paramList]
[), +, "$b", ;, Node, fnNode, =, IR, ., function, (, IR, ., name, (, functionName, ), ,, IR, .]
[;, Node, fnNode, =, IR, ., function, (, IR, ., name, (, functionName, ), ,, IR, ., paramList, (, IR]
[;, root, ., addChildToFront, (, fnNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, getAddingRoot, (, JSModule]
[., function, (, IR, ., name, (, functionName, ), ,, IR, ., paramList, (, IR, ., name, (, localPropName, )]
[,, IR, ., paramList, (, IR, ., name, (, localPropName, ), ,, IR, ., name, (, localValueName, ), ), ,]
[., name, (, functionName, ), ,, IR, ., paramList, (, IR, ., name, (, localPropName, ), ,, IR, ., name]
[), ,, IR, ., paramList, (, IR, ., name, (, localPropName, ), ,, IR, ., name, (, localValueName, ), )]
[,, IR, ., block, (, IR, ., returnNode, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name]
[., paramList, (, IR, ., name, (, localPropName, ), ,, IR, ., name, (, localValueName, ), ), ,, IR, .]
[,, IR, ., name, (, localValueName, ), ), ,, IR, ., block, (, IR, ., returnNode, (, IR, ., assign]
[., name, (, localPropName, ), ,, IR, ., name, (, localValueName, ), ), ,, IR, ., block, (, IR, .]
[), ,, IR, ., name, (, localValueName, ), ), ,, IR, ., block, (, IR, ., returnNode, (, IR, .]
[), ,, IR, ., block, (, IR, ., returnNode, (, IR, ., assign, (, IR, ., getprop, (, IR, .]
[., name, (, localValueName, ), ), ,, IR, ., block, (, IR, ., returnNode, (, IR, ., assign, (, IR]
[), ), ,, IR, ., block, (, IR, ., returnNode, (, IR, ., assign, (, IR, ., getprop, (, IR]
[), ;, root, ., addChildToFront, (, fnNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, getAddingRoot, (]
[., block, (, IR, ., returnNode, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, localPropName]
[), ), ;, root, ., addChildToFront, (, fnNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, getAddingRoot]
[., returnNode, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, localPropName, ), ,, IR, .]
[), ), ), ;, root, ., addChildToFront, (, fnNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node]
[., assign, (, IR, ., getprop, (, IR, ., name, (, localPropName, ), ,, IR, ., string, (, propName, )]
[,, IR, ., name, (, localValueName, ), ), ), ), ), ;, root, ., addChildToFront, (, fnNode, ), ;, compiler]
[., getprop, (, IR, ., name, (, localPropName, ), ,, IR, ., string, (, propName, ), ), ,, IR, .]
[,, IR, ., string, (, propName, ), ), ,, IR, ., name, (, localValueName, ), ), ), ), ), ;]
[., name, (, localPropName, ), ,, IR, ., string, (, propName, ), ), ,, IR, ., name, (, localValueName, )]
[), ,, IR, ., string, (, propName, ), ), ,, IR, ., name, (, localValueName, ), ), ), ), )]
[), ,, IR, ., name, (, localValueName, ), ), ), ), ), ;, root, ., addChildToFront, (, fnNode, ), ;]
[., string, (, propName, ), ), ,, IR, ., name, (, localValueName, ), ), ), ), ), ;, root, .]
[), ), ,, IR, ., name, (, localValueName, ), ), ), ), ), ;, root, ., addChildToFront, (, fnNode, )]
[), ), ), ), ;, root, ., addChildToFront, (, fnNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private]
[., name, (, localValueName, ), ), ), ), ), ;, root, ., addChildToFront, (, fnNode, ), ;, compiler, ., reportCodeChange]
[), ), ), ), ), ;, root, ., addChildToFront, (, fnNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, getAddingRoot, (, JSModule, m, ), {, if, (, m, !=]
[., addChildToFront, (, fnNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, getAddingRoot, (, JSModule, m, )]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, getAddingRoot, (, JSModule, m, ), {, if, (, m]
[;, }, private, Node, getAddingRoot, (, JSModule, m, ), {, if, (, m, !=, null, ), {, Node, root, =]
[., reportCodeChange, (, ), ;, }, private, Node, getAddingRoot, (, JSModule, m, ), {, if, (, m, !=, null, )]
[), {, Node, root, =, moduleRoots, ., get, (, m, ), ;, if, (, root, !=, null, ), {, return]
[!=, null, ), {, Node, root, =, moduleRoots, ., get, (, m, ), ;, if, (, root, !=, null, )]
[), {, Node, root, =, moduleRoots, ., get, (, m, ), ;, if, (, root, !=, null, ), {, return]
[;, if, (, root, !=, null, ), {, return, root, ;, }, root, =, compiler, ., getNodeForCodeInsertion, (, m, )]
[., get, (, m, ), ;, if, (, root, !=, null, ), {, return, root, ;, }, root, =, compiler]
[), ;, if, (, root, !=, null, ), {, return, root, ;, }, root, =, compiler, ., getNodeForCodeInsertion, (, m]
[), {, return, root, ;, }, root, =, compiler, ., getNodeForCodeInsertion, (, m, ), ;, if, (, root, !=, null]
[!=, null, ), {, return, root, ;, }, root, =, compiler, ., getNodeForCodeInsertion, (, m, ), ;, if, (, root]
[), {, return, root, ;, }, root, =, compiler, ., getNodeForCodeInsertion, (, m, ), ;, if, (, root, !=, null]
[;, }, root, =, compiler, ., getNodeForCodeInsertion, (, m, ), ;, if, (, root, !=, null, ), {, moduleRoots, .]
[=, compiler, ., getNodeForCodeInsertion, (, m, ), ;, if, (, root, !=, null, ), {, moduleRoots, ., put, (, m]
[;, if, (, root, !=, null, ), {, moduleRoots, ., put, (, m, ,, root, ), ;, return, root, ;]
[., getNodeForCodeInsertion, (, m, ), ;, if, (, root, !=, null, ), {, moduleRoots, ., put, (, m, ,, root]
[), ;, if, (, root, !=, null, ), {, moduleRoots, ., put, (, m, ,, root, ), ;, return, root]
[), {, moduleRoots, ., put, (, m, ,, root, ), ;, return, root, ;, }, }, return, defaultRoot, ;, }]
[!=, null, ), {, moduleRoots, ., put, (, m, ,, root, ), ;, return, root, ;, }, }, return, defaultRoot]
[), {, moduleRoots, ., put, (, m, ,, root, ), ;, return, root, ;, }, }, return, defaultRoot, ;, }]
[;, return, root, ;, }, }, return, defaultRoot, ;, }, private, class, GetAliasableNames, extends, AbstractPostOrderCallback, {, private, final, Set, <]
[., put, (, m, ,, root, ), ;, return, root, ;, }, }, return, defaultRoot, ;, }, private, class, GetAliasableNames]
[,, root, ), ;, return, root, ;, }, }, return, defaultRoot, ;, }, private, class, GetAliasableNames, extends, AbstractPostOrderCallback, {, private]
[), ;, return, root, ;, }, }, return, defaultRoot, ;, }, private, class, GetAliasableNames, extends, AbstractPostOrderCallback, {, private, final, Set]
[;, }, }, return, defaultRoot, ;, }, private, class, GetAliasableNames, extends, AbstractPostOrderCallback, {, private, final, Set, <, String, >, whitelist]
[;, }, private, class, GetAliasableNames, extends, AbstractPostOrderCallback, {, private, final, Set, <, String, >, whitelist, ;, public, GetAliasableNames, (, final]
[=, whitelist, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., whitelist, =, whitelist, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, )]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =, n]
[:, case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if]
[., GETPROP, :, case, Token, ., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, )]
[:, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (]
[., GETELEM, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, .]
[;, if, (, dest, ., isString, (, ), &&, (, whitelist, ., isEmpty, (, ), ||, whitelist, ., contains, (]
[., getNext, (, ), ;, if, (, dest, ., isString, (, ), &&, (, whitelist, ., isEmpty, (, ), ||]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), &&, (, whitelist, .]
[), {, props, ., put, (, dest, ., getString, (, ), ,, newSymbolForProperty, (, dest, ., getString, (, ), )]
[&&, (, whitelist, ., isEmpty, (, ), ||, whitelist, ., contains, (, dest, ., getString, (, ), ), ), )]
[., isString, (, ), &&, (, whitelist, ., isEmpty, (, ), ||, whitelist, ., contains, (, dest, ., getString, (]
[), {, props, ., put, (, dest, ., getString, (, ), ,, newSymbolForProperty, (, dest, ., getString, (, ), )]
[), ), {, props, ., put, (, dest, ., getString, (, ), ,, newSymbolForProperty, (, dest, ., getString, (, )]
[||, whitelist, ., contains, (, dest, ., getString, (, ), ), ), ), {, props, ., put, (, dest, .]
[., isEmpty, (, ), ||, whitelist, ., contains, (, dest, ., getString, (, ), ), ), ), {, props, .]
[), ), {, props, ., put, (, dest, ., getString, (, ), ,, newSymbolForProperty, (, dest, ., getString, (, )]
[., contains, (, dest, ., getString, (, ), ), ), ), {, props, ., put, (, dest, ., getString, (]
[), ), ), {, props, ., put, (, dest, ., getString, (, ), ,, newSymbolForProperty, (, dest, ., getString, (]
[., getString, (, ), ), ), ), {, props, ., put, (, dest, ., getString, (, ), ,, newSymbolForProperty, (]
[;, }, }, }, }, private, final, class, PropertyGatherer, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t]
[., put, (, dest, ., getString, (, ), ,, newSymbolForProperty, (, dest, ., getString, (, ), ), ), ;, }]
[,, newSymbolForProperty, (, dest, ., getString, (, ), ), ), ;, }, }, }, }, private, final, class, PropertyGatherer, extends]
[., getString, (, ), ,, newSymbolForProperty, (, dest, ., getString, (, ), ), ), ;, }, }, }, }, private]
[), ;, }, }, }, }, private, final, class, PropertyGatherer, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal]
[), ), ;, }, }, }, }, private, final, class, PropertyGatherer, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[., getString, (, ), ), ), ;, }, }, }, }, private, final, class, PropertyGatherer, extends, AbstractPostOrderCallback, {, @, Override]
[), {, Node, propNameNode, =, n, ., getLastChild, (, ), ;, if, (, canReplaceWithGetProp, (, propNameNode, ,, n, ,, parent]
[., isGetProp, (, ), ), {, Node, propNameNode, =, n, ., getLastChild, (, ), ;, if, (, canReplaceWithGetProp, (, propNameNode]
[;, if, (, canReplaceWithGetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =, propNameNode, ., getString, (]
[., getLastChild, (, ), ;, if, (, canReplaceWithGetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =]
[), {, String, name, =, propNameNode, ., getString, (, ), ;, props, ., get, (, name, ), ., recordAccessor, (]
[,, n, ,, parent, ), ), {, String, name, =, propNameNode, ., getString, (, ), ;, props, ., get, (]
[,, parent, ), ), {, String, name, =, propNameNode, ., getString, (, ), ;, props, ., get, (, name, )]
[), ), {, String, name, =, propNameNode, ., getString, (, ), ;, props, ., get, (, name, ), ., recordAccessor]
[;, props, ., get, (, name, ), ., recordAccessor, (, t, ), ;, accessors, ., add, (, n, ), ;]
[., getString, (, ), ;, props, ., get, (, name, ), ., recordAccessor, (, t, ), ;, accessors, ., add]
[;, accessors, ., add, (, n, ), ;, }, if, (, canReplaceWithSetProp, (, propNameNode, ,, n, ,, parent, ), )]
[., recordAccessor, (, t, ), ;, accessors, ., add, (, n, ), ;, }, if, (, canReplaceWithSetProp, (, propNameNode, ,]
[., get, (, name, ), ., recordAccessor, (, t, ), ;, accessors, ., add, (, n, ), ;, }, if]
[), ., recordAccessor, (, t, ), ;, accessors, ., add, (, n, ), ;, }, if, (, canReplaceWithSetProp, (, propNameNode]
[), ;, accessors, ., add, (, n, ), ;, }, if, (, canReplaceWithSetProp, (, propNameNode, ,, n, ,, parent, )]
[;, }, if, (, canReplaceWithSetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =, propNameNode, ., getString]
[., add, (, n, ), ;, }, if, (, canReplaceWithSetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String]
[), ;, }, if, (, canReplaceWithSetProp, (, propNameNode, ,, n, ,, parent, ), ), {, String, name, =, propNameNode, .]
[), {, String, name, =, propNameNode, ., getString, (, ), ;, props, ., get, (, name, ), ., recordMutator, (]
[,, n, ,, parent, ), ), {, String, name, =, propNameNode, ., getString, (, ), ;, props, ., get, (]
[,, parent, ), ), {, String, name, =, propNameNode, ., getString, (, ), ;, props, ., get, (, name, )]
[), ), {, String, name, =, propNameNode, ., getString, (, ), ;, props, ., get, (, name, ), ., recordMutator]
[;, props, ., get, (, name, ), ., recordMutator, (, t, ), ;, mutators, ., add, (, n, ), ;]
[., getString, (, ), ;, props, ., get, (, name, ), ., recordMutator, (, t, ), ;, mutators, ., add]
[;, mutators, ., add, (, n, ), ;, }, }, }, private, boolean, canReplaceWithGetProp, (, Node, propNameNode, ,, Node, getPropNode]
[., recordMutator, (, t, ), ;, mutators, ., add, (, n, ), ;, }, }, }, private, boolean, canReplaceWithGetProp, (]
[., get, (, name, ), ., recordMutator, (, t, ), ;, mutators, ., add, (, n, ), ;, }, }]
[), ., recordMutator, (, t, ), ;, mutators, ., add, (, n, ), ;, }, }, }, private, boolean, canReplaceWithGetProp]
[), ;, mutators, ., add, (, n, ), ;, }, }, }, private, boolean, canReplaceWithGetProp, (, Node, propNameNode, ,, Node]
[;, }, }, }, private, boolean, canReplaceWithGetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isCallTarget]
[., add, (, n, ), ;, }, }, }, private, boolean, canReplaceWithGetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node]
[), ;, }, }, }, private, boolean, canReplaceWithGetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean]
[;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, )]
[&&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (, parent, )]
[), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (, parent]
[., isCall, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isAssignTarget, =, NodeUtil]
[;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, )]
[), ;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode]
[==, getPropNode, ), ;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, (, parent, ., getFirstChild, (, )]
[., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, (, parent]
[), ;, boolean, isAssignTarget, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode]
[;, boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (, parent, ., isDec, (, ), ), ;]
[&&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isIncOrDec, =, (, parent, ., isInc, (, )]
[., isAssignmentOp, (, parent, ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isIncOrDec, =, (]
[), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isIncOrDec, =, (, parent, ., isInc, (]
[;, boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (, parent, ., isDec, (, ), ), ;]
[), ;, boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (, parent, ., isDec, (, ), )]
[==, getPropNode, ), ;, boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (, parent, ., isDec, (]
[., getFirstChild, (, ), ==, getPropNode, ), ;, boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (]
[), ;, boolean, isIncOrDec, =, (, parent, ., isInc, (, ), ), ||, (, parent, ., isDec, (, ), )]
[;, return, (, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (, !, isCallTarget, ||, !, "eval", .]
[||, (, parent, ., isDec, (, ), ), ;, return, (, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget]
[), ||, (, parent, ., isDec, (, ), ), ;, return, (, propNameNode, ., isString, (, ), ), &&, !]
[., isInc, (, ), ), ||, (, parent, ., isDec, (, ), ), ;, return, (, propNameNode, ., isString, (]
[;, return, (, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (, !, isCallTarget, ||, !, "eval", .]
[), ;, return, (, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (, !, isCallTarget, ||, !, "eval"]
[., isDec, (, ), ), ;, return, (, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (, !]
[;, }, private, boolean, canReplaceWithSetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isAssignTarget, =, (]
[&&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, private, boolean, canReplaceWithSetProp, (, Node, propNameNode, ,]
[&&, !, isIncOrDec, &&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, private, boolean, canReplaceWithSetProp, (]
[&&, (, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), ), &&, !, isIncOrDec]
[&&, !, isAssignTarget, &&, (, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), )]
[), &&, !, isAssignTarget, &&, (, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), )]
[., isString, (, ), ), &&, !, isAssignTarget, &&, (, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, .]
[&&, (, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), ), &&, !, isIncOrDec]
[&&, (, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), ), &&, !, isIncOrDec]
[&&, !, isIncOrDec, &&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, private, boolean, canReplaceWithSetProp, (]
[), &&, !, isIncOrDec, &&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, private, boolean, canReplaceWithSetProp]
[||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), ), &&, !, isIncOrDec, &&, props, ., containsKey]
[||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), ), &&, !, isIncOrDec, &&, props, ., containsKey]
[), &&, !, isIncOrDec, &&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, private, boolean, canReplaceWithSetProp]
[), &&, !, isIncOrDec, &&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, private, boolean, canReplaceWithSetProp]
[., equals, (, propNameNode, ., getString, (, ), ), ), &&, !, isIncOrDec, &&, props, ., containsKey, (, propNameNode, .]
[), ), &&, !, isIncOrDec, &&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, private, boolean]
[., getString, (, ), ), ), &&, !, isIncOrDec, &&, props, ., containsKey, (, propNameNode, ., getString, (, ), )]
[&&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, private, boolean, canReplaceWithSetProp, (, Node, propNameNode, ,]
[&&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, private, boolean, canReplaceWithSetProp, (, Node, propNameNode, ,]
[;, }, private, boolean, canReplaceWithSetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isAssignTarget, =, (]
[., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, private, boolean, canReplaceWithSetProp, (, Node, propNameNode, ,, Node, getPropNode]
[), ;, }, private, boolean, canReplaceWithSetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, ), {, boolean, isAssignTarget, =]
[., getString, (, ), ), ;, }, private, boolean, canReplaceWithSetProp, (, Node, propNameNode, ,, Node, getPropNode, ,, Node, parent, )]
[;, return, (, propNameNode, ., isString, (, ), ), &&, isAssignTarget, &&, props, ., containsKey, (, propNameNode, ., getString, (]
[&&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, return, (, propNameNode, ., isString, (, ), ), &&]
[), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, return, (, propNameNode, ., isString, (, ), )]
[., isAssign, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, ), ;, return, (, propNameNode, .]
[;, return, (, propNameNode, ., isString, (, ), ), &&, isAssignTarget, &&, props, ., containsKey, (, propNameNode, ., getString, (]
[), ;, return, (, propNameNode, ., isString, (, ), ), &&, isAssignTarget, &&, props, ., containsKey, (, propNameNode, ., getString]
[==, getPropNode, ), ;, return, (, propNameNode, ., isString, (, ), ), &&, isAssignTarget, &&, props, ., containsKey, (, propNameNode]
[., getFirstChild, (, ), ==, getPropNode, ), ;, return, (, propNameNode, ., isString, (, ), ), &&, isAssignTarget, &&, props]
[), ;, return, (, propNameNode, ., isString, (, ), ), &&, isAssignTarget, &&, props, ., containsKey, (, propNameNode, ., getString]
[;, }, }, private, static, String, getMutatorFor, (, String, prop, ), {, return, "SETPROP_", +, prop, ;, }, private, static]
[&&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, }, private, static, String, getMutatorFor, (, String]
[&&, isAssignTarget, &&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, }, private, static, String, getMutatorFor]
[), &&, isAssignTarget, &&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, }, private, static, String]
[., isString, (, ), ), &&, isAssignTarget, &&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }]
[&&, props, ., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, }, private, static, String, getMutatorFor, (, String]
[;, }, }, private, static, String, getMutatorFor, (, String, prop, ), {, return, "SETPROP_", +, prop, ;, }, private, static]
[., containsKey, (, propNameNode, ., getString, (, ), ), ;, }, }, private, static, String, getMutatorFor, (, String, prop, )]
[), ;, }, }, private, static, String, getMutatorFor, (, String, prop, ), {, return, "SETPROP_", +, prop, ;, }, private]
[., getString, (, ), ), ;, }, }, private, static, String, getMutatorFor, (, String, prop, ), {, return, "SETPROP_", +]
[;, }, private, static, String, getArrayNotationNameFor, (, String, prop, ), {, return, "$$PROP_", +, prop, ;, }, private, void, aliasGlobals]
[+, prop, ;, }, private, static, String, getArrayNotationNameFor, (, String, prop, ), {, return, "$$PROP_", +, prop, ;, }, private]
[;, }, private, static, String, getArrayNotationNameFor, (, String, prop, ), {, return, "$$PROP_", +, prop, ;, }, private, void, aliasGlobals]
[;, }, private, void, aliasGlobals, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs]
[+, prop, ;, }, private, void, aliasGlobals, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, private, void, aliasGlobals, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GlobalGatherer, (, ), ), ;, for, (, Symbol, global, :]
[., traverse, (, compiler, ,, externs, ,, new, GetGlobals, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[,, externs, ,, new, GetGlobals, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GlobalGatherer, (]
[,, new, GetGlobals, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GlobalGatherer, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GlobalGatherer, (, ), ), ;, for, (, Symbol, global]
[;, for, (, Symbol, global, :, globals, ., values, (, ), ), {, if, (, global, ., mutatorCount, >, 0]
[., traverse, (, compiler, ,, root, ,, new, GlobalGatherer, (, ), ), ;, for, (, Symbol, global, :, globals, .]
[,, root, ,, new, GlobalGatherer, (, ), ), ;, for, (, Symbol, global, :, globals, ., values, (, ), )]
[,, new, GlobalGatherer, (, ), ), ;, for, (, Symbol, global, :, globals, ., values, (, ), ), {, if]
[), ;, for, (, Symbol, global, :, globals, ., values, (, ), ), {, if, (, global, ., mutatorCount, >]
[), {, if, (, global, ., mutatorCount, >, 0, ), {, continue, ;, }, int, currentBytes, =, global, ., name]
[., values, (, ), ), {, if, (, global, ., mutatorCount, >, 0, ), {, continue, ;, }, int, currentBytes]
[), {, continue, ;, }, int, currentBytes, =, global, ., name, ., length, (, ), *, global, ., accessorCount, ;]
[>, 0, ), {, continue, ;, }, int, currentBytes, =, global, ., name, ., length, (, ), *, global, .]
[., mutatorCount, >, 0, ), {, continue, ;, }, int, currentBytes, =, global, ., name, ., length, (, ), *]
[), {, continue, ;, }, int, currentBytes, =, global, ., name, ., length, (, ), *, global, ., accessorCount, ;]
[;, int, aliasedBytes, =, 8, +, global, ., name, ., length, (, ), +, 2, *, global, ., accessorCount, ;]
[*, global, ., accessorCount, ;, int, aliasedBytes, =, 8, +, global, ., name, ., length, (, ), +, 2, *]
[., length, (, ), *, global, ., accessorCount, ;, int, aliasedBytes, =, 8, +, global, ., name, ., length, (]
[., name, ., length, (, ), *, global, ., accessorCount, ;, int, aliasedBytes, =, 8, +, global, ., name, .]
[;, int, aliasedBytes, =, 8, +, global, ., name, ., length, (, ), +, 2, *, global, ., accessorCount, ;]
[., accessorCount, ;, int, aliasedBytes, =, 8, +, global, ., name, ., length, (, ), +, 2, *, global, .]
[;, if, (, aliasedBytes, <, currentBytes, ), {, global, ., aliasAccessor, =, true, ;, }, }, for, (, Symbol, global]
[+, 2, *, global, ., accessorCount, ;, if, (, aliasedBytes, <, currentBytes, ), {, global, ., aliasAccessor, =, true, ;]
[+, global, ., name, ., length, (, ), +, 2, *, global, ., accessorCount, ;, if, (, aliasedBytes, <, currentBytes]
[+, 2, *, global, ., accessorCount, ;, if, (, aliasedBytes, <, currentBytes, ), {, global, ., aliasAccessor, =, true, ;]
[., length, (, ), +, 2, *, global, ., accessorCount, ;, if, (, aliasedBytes, <, currentBytes, ), {, global, .]
[., name, ., length, (, ), +, 2, *, global, ., accessorCount, ;, if, (, aliasedBytes, <, currentBytes, ), {]
[;, if, (, aliasedBytes, <, currentBytes, ), {, global, ., aliasAccessor, =, true, ;, }, }, for, (, Symbol, global]
[*, global, ., accessorCount, ;, if, (, aliasedBytes, <, currentBytes, ), {, global, ., aliasAccessor, =, true, ;, }, }]
[;, if, (, aliasedBytes, <, currentBytes, ), {, global, ., aliasAccessor, =, true, ;, }, }, for, (, Symbol, global]
[., accessorCount, ;, if, (, aliasedBytes, <, currentBytes, ), {, global, ., aliasAccessor, =, true, ;, }, }, for, (]
[), {, global, ., aliasAccessor, =, true, ;, }, }, for, (, Symbol, global, :, globals, ., values, (, )]
[<, currentBytes, ), {, global, ., aliasAccessor, =, true, ;, }, }, for, (, Symbol, global, :, globals, ., values]
[), {, global, ., aliasAccessor, =, true, ;, }, }, for, (, Symbol, global, :, globals, ., values, (, )]
[=, true, ;, }, }, for, (, Symbol, global, :, globals, ., values, (, ), ), {, for, (, Node]
[., aliasAccessor, =, true, ;, }, }, for, (, Symbol, global, :, globals, ., values, (, ), ), {, for]
[;, }, }, for, (, Symbol, global, :, globals, ., values, (, ), ), {, for, (, Node, globalUse, :]
[), {, for, (, Node, globalUse, :, global, ., uses, ), {, replaceGlobalUse, (, globalUse, ), ;, }, if, (]
[., values, (, ), ), {, for, (, Node, globalUse, :, global, ., uses, ), {, replaceGlobalUse, (, globalUse, )]
[), {, replaceGlobalUse, (, globalUse, ), ;, }, if, (, global, ., aliasAccessor, ), {, addGlobalAliasNode, (, global, ,, getAddingRoot]
[., uses, ), {, replaceGlobalUse, (, globalUse, ), ;, }, if, (, global, ., aliasAccessor, ), {, addGlobalAliasNode, (, global]
[;, }, if, (, global, ., aliasAccessor, ), {, addGlobalAliasNode, (, global, ,, getAddingRoot, (, global, ., deepestModuleAccess, ), )]
[), ;, }, if, (, global, ., aliasAccessor, ), {, addGlobalAliasNode, (, global, ,, getAddingRoot, (, global, ., deepestModuleAccess, )]
[), {, addGlobalAliasNode, (, global, ,, getAddingRoot, (, global, ., deepestModuleAccess, ), ), ;, }, }, }, private, class, GetGlobals]
[., aliasAccessor, ), {, addGlobalAliasNode, (, global, ,, getAddingRoot, (, global, ., deepestModuleAccess, ), ), ;, }, }, }, private]
[;, }, }, }, private, class, GetGlobals, extends, NodeTraversal, ., AbstractShallowCallback, {, private, void, getGlobalName, (, NodeTraversal, t, ,, Node]
[,, getAddingRoot, (, global, ., deepestModuleAccess, ), ), ;, }, }, }, private, class, GetGlobals, extends, NodeTraversal, ., AbstractShallowCallback, {]
[), ;, }, }, }, private, class, GetGlobals, extends, NodeTraversal, ., AbstractShallowCallback, {, private, void, getGlobalName, (, NodeTraversal, t, ,]
[), ), ;, }, }, }, private, class, GetGlobals, extends, NodeTraversal, ., AbstractShallowCallback, {, private, void, getGlobalName, (, NodeTraversal, t]
[., deepestModuleAccess, ), ), ;, }, }, }, private, class, GetGlobals, extends, NodeTraversal, ., AbstractShallowCallback, {, private, void, getGlobalName, (]
[), {, JSDocInfo, docInfo, =, dest, ., getJSDocInfo, (, ), ==, null, ?, parent, ., getJSDocInfo, (, ), :, dest]
[., isName, (, ), ), {, JSDocInfo, docInfo, =, dest, ., getJSDocInfo, (, ), ==, null, ?, parent, ., getJSDocInfo]
[;, boolean, aliasable, =, !, unaliasableGlobals, ., contains, (, dest, ., getString, (, ), ), &&, (, docInfo, ==, null]
[?, parent, ., getJSDocInfo, (, ), :, dest, ., getJSDocInfo, (, ), ;, boolean, aliasable, =, !, unaliasableGlobals, ., contains]
[==, null, ?, parent, ., getJSDocInfo, (, ), :, dest, ., getJSDocInfo, (, ), ;, boolean, aliasable, =, !, unaliasableGlobals]
[., getJSDocInfo, (, ), ==, null, ?, parent, ., getJSDocInfo, (, ), :, dest, ., getJSDocInfo, (, ), ;, boolean]
[?, parent, ., getJSDocInfo, (, ), :, dest, ., getJSDocInfo, (, ), ;, boolean, aliasable, =, !, unaliasableGlobals, ., contains]
[:, dest, ., getJSDocInfo, (, ), ;, boolean, aliasable, =, !, unaliasableGlobals, ., contains, (, dest, ., getString, (, )]
[., getJSDocInfo, (, ), :, dest, ., getJSDocInfo, (, ), ;, boolean, aliasable, =, !, unaliasableGlobals, ., contains, (, dest]
[;, boolean, aliasable, =, !, unaliasableGlobals, ., contains, (, dest, ., getString, (, ), ), &&, (, docInfo, ==, null]
[., getJSDocInfo, (, ), ;, boolean, aliasable, =, !, unaliasableGlobals, ., contains, (, dest, ., getString, (, ), ), &&]
[;, if, (, aliasable, ), {, String, name, =, dest, ., getString, (, ), ;, Scope, ., Var, var, =]
[&&, (, docInfo, ==, null, ||, !, docInfo, ., isNoAlias, (, ), ), ;, if, (, aliasable, ), {, String]
[&&, (, docInfo, ==, null, ||, !, docInfo, ., isNoAlias, (, ), ), ;, if, (, aliasable, ), {, String]
[., contains, (, dest, ., getString, (, ), ), &&, (, docInfo, ==, null, ||, !, docInfo, ., isNoAlias, (]
[), &&, (, docInfo, ==, null, ||, !, docInfo, ., isNoAlias, (, ), ), ;, if, (, aliasable, ), {]
[., getString, (, ), ), &&, (, docInfo, ==, null, ||, !, docInfo, ., isNoAlias, (, ), ), ;, if]
[;, if, (, aliasable, ), {, String, name, =, dest, ., getString, (, ), ;, Scope, ., Var, var, =]
[), ;, if, (, aliasable, ), {, String, name, =, dest, ., getString, (, ), ;, Scope, ., Var, var]
[||, !, docInfo, ., isNoAlias, (, ), ), ;, if, (, aliasable, ), {, String, name, =, dest, ., getString]
[==, null, ||, !, docInfo, ., isNoAlias, (, ), ), ;, if, (, aliasable, ), {, String, name, =, dest]
[||, !, docInfo, ., isNoAlias, (, ), ), ;, if, (, aliasable, ), {, String, name, =, dest, ., getString]
[), ;, if, (, aliasable, ), {, String, name, =, dest, ., getString, (, ), ;, Scope, ., Var, var]
[), ;, if, (, aliasable, ), {, String, name, =, dest, ., getString, (, ), ;, Scope, ., Var, var]
[., isNoAlias, (, ), ), ;, if, (, aliasable, ), {, String, name, =, dest, ., getString, (, ), ;]
[), {, String, name, =, dest, ., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (]
[;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var]
[., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, )]
[;, if, (, var, !=, null, &&, !, var, ., isLocal, (, ), ), {, globals, ., put, (, name]
[., getVar, (, name, ), ;, if, (, var, !=, null, &&, !, var, ., isLocal, (, ), ), {]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, &&, !, var, ., isLocal]
[), ;, if, (, var, !=, null, &&, !, var, ., isLocal, (, ), ), {, globals, ., put, (]
[), {, globals, ., put, (, name, ,, newSymbolForGlobalVar, (, dest, ), ), ;, }, }, }, }, @, Override]
[&&, !, var, ., isLocal, (, ), ), {, globals, ., put, (, name, ,, newSymbolForGlobalVar, (, dest, ), )]
[!=, null, &&, !, var, ., isLocal, (, ), ), {, globals, ., put, (, name, ,, newSymbolForGlobalVar, (, dest]
[&&, !, var, ., isLocal, (, ), ), {, globals, ., put, (, name, ,, newSymbolForGlobalVar, (, dest, ), )]
[), {, globals, ., put, (, name, ,, newSymbolForGlobalVar, (, dest, ), ), ;, }, }, }, }, @, Override]
[), {, globals, ., put, (, name, ,, newSymbolForGlobalVar, (, dest, ), ), ;, }, }, }, }, @, Override]
[., isLocal, (, ), ), {, globals, ., put, (, name, ,, newSymbolForGlobalVar, (, dest, ), ), ;, }, }]
[;, }, }, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[., put, (, name, ,, newSymbolForGlobalVar, (, dest, ), ), ;, }, }, }, }, @, Override, public, void, visit]
[,, newSymbolForGlobalVar, (, dest, ), ), ;, }, }, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[), ;, }, }, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), ), ;, }, }, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[), {, case, Token, ., FUNCTION, :, getGlobalName, (, t, ,, n, ., getFirstChild, (, ), ,, n, ), ;]
[., getType, (, ), ), {, case, Token, ., FUNCTION, :, getGlobalName, (, t, ,, n, ., getFirstChild, (, )]
[:, getGlobalName, (, t, ,, n, ., getFirstChild, (, ), ,, n, ), ;, break, ;, case, Token, ., VAR]
[., FUNCTION, :, getGlobalName, (, t, ,, n, ., getFirstChild, (, ), ,, n, ), ;, break, ;, case, Token]
[;, break, ;, case, Token, ., VAR, :, for, (, Node, varChild, =, n, ., getFirstChild, (, ), ;, varChild]
[,, n, ., getFirstChild, (, ), ,, n, ), ;, break, ;, case, Token, ., VAR, :, for, (, Node]
[,, n, ), ;, break, ;, case, Token, ., VAR, :, for, (, Node, varChild, =, n, ., getFirstChild, (]
[., getFirstChild, (, ), ,, n, ), ;, break, ;, case, Token, ., VAR, :, for, (, Node, varChild, =]
[), ;, break, ;, case, Token, ., VAR, :, for, (, Node, varChild, =, n, ., getFirstChild, (, ), ;]
[:, for, (, Node, varChild, =, n, ., getFirstChild, (, ), ;, varChild, !=, null, ;, varChild, =, varChild, .]
[., VAR, :, for, (, Node, varChild, =, n, ., getFirstChild, (, ), ;, varChild, !=, null, ;, varChild, =]
[;, varChild, !=, null, ;, varChild, =, varChild, ., getNext, (, ), ), {, getGlobalName, (, t, ,, varChild, ,]
[., getFirstChild, (, ), ;, varChild, !=, null, ;, varChild, =, varChild, ., getNext, (, ), ), {, getGlobalName, (]
[;, varChild, =, varChild, ., getNext, (, ), ), {, getGlobalName, (, t, ,, varChild, ,, n, ), ;, }]
[!=, null, ;, varChild, =, varChild, ., getNext, (, ), ), {, getGlobalName, (, t, ,, varChild, ,, n, )]
[;, varChild, =, varChild, ., getNext, (, ), ), {, getGlobalName, (, t, ,, varChild, ,, n, ), ;, }]
[=, varChild, ., getNext, (, ), ), {, getGlobalName, (, t, ,, varChild, ,, n, ), ;, }, break, ;]
[), {, getGlobalName, (, t, ,, varChild, ,, n, ), ;, }, break, ;, }, }, }, private, final, class]
[., getNext, (, ), ), {, getGlobalName, (, t, ,, varChild, ,, n, ), ;, }, break, ;, }, }]
[;, }, break, ;, }, }, }, private, final, class, GlobalGatherer, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[,, varChild, ,, n, ), ;, }, break, ;, }, }, }, private, final, class, GlobalGatherer, extends, AbstractPostOrderCallback, {, @]
[,, n, ), ;, }, break, ;, }, }, }, private, final, class, GlobalGatherer, extends, AbstractPostOrderCallback, {, @, Override, public]
[), ;, }, break, ;, }, }, }, private, final, class, GlobalGatherer, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit]
[), {, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (]
[., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =]
[;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var]
[., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, )]
[;, if, (, var, !=, null, &&, var, ., isLocal, (, ), ), {, return, ;, }, Symbol, global, =]
[., getVar, (, name, ), ;, if, (, var, !=, null, &&, var, ., isLocal, (, ), ), {, return]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, &&, var, ., isLocal, (]
[), ;, if, (, var, !=, null, &&, var, ., isLocal, (, ), ), {, return, ;, }, Symbol, global]
[), {, return, ;, }, Symbol, global, =, globals, ., get, (, name, ), ;, if, (, global, !=, null]
[&&, var, ., isLocal, (, ), ), {, return, ;, }, Symbol, global, =, globals, ., get, (, name, )]
[!=, null, &&, var, ., isLocal, (, ), ), {, return, ;, }, Symbol, global, =, globals, ., get, (]
[&&, var, ., isLocal, (, ), ), {, return, ;, }, Symbol, global, =, globals, ., get, (, name, )]
[), {, return, ;, }, Symbol, global, =, globals, ., get, (, name, ), ;, if, (, global, !=, null]
[., isLocal, (, ), ), {, return, ;, }, Symbol, global, =, globals, ., get, (, name, ), ;, if]
[;, if, (, global, !=, null, ), {, if, (, n, ., getParent, (, ), ., isVar, (, ), ||]
[., get, (, name, ), ;, if, (, global, !=, null, ), {, if, (, n, ., getParent, (, )]
[), ;, if, (, global, !=, null, ), {, if, (, n, ., getParent, (, ), ., isVar, (, )]
[), {, if, (, n, ., getParent, (, ), ., isVar, (, ), ||, n, ., getParent, (, ), .]
[!=, null, ), {, if, (, n, ., getParent, (, ), ., isVar, (, ), ||, n, ., getParent, (]
[), {, if, (, n, ., getParent, (, ), ., isVar, (, ), ||, n, ., getParent, (, ), .]
[), {, globals, ., remove, (, name, ), ;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==, n]
[||, n, ., getParent, (, ), ., isFunction, (, ), ), {, globals, ., remove, (, name, ), ;, }]
[., isVar, (, ), ||, n, ., getParent, (, ), ., isFunction, (, ), ), {, globals, ., remove, (]
[., getParent, (, ), ., isVar, (, ), ||, n, ., getParent, (, ), ., isFunction, (, ), ), {]
[), {, globals, ., remove, (, name, ), ;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==, n]
[., isFunction, (, ), ), {, globals, ., remove, (, name, ), ;, }, boolean, isFirst, =, parent, ., getFirstChild]
[., getParent, (, ), ., isFunction, (, ), ), {, globals, ., remove, (, name, ), ;, }, boolean, isFirst]
[;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==, n, ;, if, (, (, NodeUtil, ., isAssignmentOp, (]
[., remove, (, name, ), ;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==, n, ;, if, (]
[), ;, }, boolean, isFirst, =, parent, ., getFirstChild, (, ), ==, n, ;, if, (, (, NodeUtil, ., isAssignmentOp]
[;, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||, (, parent, ., isNew, (, )]
[==, n, ;, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||, (, parent, ., isNew]
[., getFirstChild, (, ), ==, n, ;, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||]
[;, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||, (, parent, ., isNew, (, )]
[), {, global, ., recordMutator, (, t, ), ;, }, else, {, global, ., recordAccessor, (, t, ), ;, }]
[||, parent, ., isDec, (, ), ), {, global, ., recordMutator, (, t, ), ;, }, else, {, global, .]
[||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, global, ., recordMutator, (, t, )]
[||, (, parent, ., isNew, (, ), &&, isFirst, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec]
[), ||, (, parent, ., isNew, (, ), &&, isFirst, ), ||, parent, ., isInc, (, ), ||, parent, .]
[&&, isFirst, ), ||, (, parent, ., isNew, (, ), &&, isFirst, ), ||, parent, ., isInc, (, ), ||]
[., isAssignmentOp, (, parent, ), &&, isFirst, ), ||, (, parent, ., isNew, (, ), &&, isFirst, ), ||, parent]
[), &&, isFirst, ), ||, (, parent, ., isNew, (, ), &&, isFirst, ), ||, parent, ., isInc, (, )]
[), ||, (, parent, ., isNew, (, ), &&, isFirst, ), ||, parent, ., isInc, (, ), ||, parent, .]
[||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, global, ., recordMutator, (, t, )]
[), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, global, ., recordMutator, (, t]
[&&, isFirst, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, global, ., recordMutator]
[., isNew, (, ), &&, isFirst, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), )]
[), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, global, ., recordMutator, (, t]
[||, parent, ., isDec, (, ), ), {, global, ., recordMutator, (, t, ), ;, }, else, {, global, .]
[., isInc, (, ), ||, parent, ., isDec, (, ), ), {, global, ., recordMutator, (, t, ), ;, }]
[), {, global, ., recordMutator, (, t, ), ;, }, else, {, global, ., recordAccessor, (, t, ), ;, }]
[., isDec, (, ), ), {, global, ., recordMutator, (, t, ), ;, }, else, {, global, ., recordAccessor, (]
[;, }, else, {, global, ., recordAccessor, (, t, ), ;, }, global, ., uses, ., add, (, n, )]
[., recordMutator, (, t, ), ;, }, else, {, global, ., recordAccessor, (, t, ), ;, }, global, ., uses]
[), ;, }, else, {, global, ., recordAccessor, (, t, ), ;, }, global, ., uses, ., add, (, n]
[;, }, global, ., uses, ., add, (, n, ), ;, }, }, }, }, private, void, replaceGlobalUse, (, Node]
[., recordAccessor, (, t, ), ;, }, global, ., uses, ., add, (, n, ), ;, }, }, }, }]
[), ;, }, global, ., uses, ., add, (, n, ), ;, }, }, }, }, private, void, replaceGlobalUse, (]
[;, }, }, }, }, private, void, replaceGlobalUse, (, Node, globalUse, ), {, String, globalName, =, globalUse, ., getString, (]
[., add, (, n, ), ;, }, }, }, }, private, void, replaceGlobalUse, (, Node, globalUse, ), {, String, globalName]
[., uses, ., add, (, n, ), ;, }, }, }, }, private, void, replaceGlobalUse, (, Node, globalUse, ), {]
[), ;, }, }, }, }, private, void, replaceGlobalUse, (, Node, globalUse, ), {, String, globalName, =, globalUse, ., getString]
[;, if, (, globals, ., get, (, globalName, ), ., aliasAccessor, ), {, globalUse, ., setString, (, "GLOBAL_", +, globalName]
[., getString, (, ), ;, if, (, globals, ., get, (, globalName, ), ., aliasAccessor, ), {, globalUse, ., setString]
[), {, globalUse, ., setString, (, "GLOBAL_", +, globalName, ), ;, globalUse, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, false]
[., aliasAccessor, ), {, globalUse, ., setString, (, "GLOBAL_", +, globalName, ), ;, globalUse, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME]
[., get, (, globalName, ), ., aliasAccessor, ), {, globalUse, ., setString, (, "GLOBAL_", +, globalName, ), ;, globalUse, .]
[), ., aliasAccessor, ), {, globalUse, ., setString, (, "GLOBAL_", +, globalName, ), ;, globalUse, ., putBooleanProp, (, Node, .]
[;, globalUse, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, false, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[., setString, (, "GLOBAL_", +, globalName, ), ;, globalUse, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, false, ), ;, compiler]
[), ;, globalUse, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, false, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[+, globalName, ), ;, globalUse, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, false, ), ;, compiler, ., reportCodeChange, (, )]
[), ;, globalUse, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, false, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, addGlobalAliasNode, (, Symbol, global, ,, Node, root, ), {]
[., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, false, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void]
[,, false, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, addGlobalAliasNode, (, Symbol, global, ,, Node]
[., IS_CONSTANT_NAME, ,, false, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, addGlobalAliasNode, (, Symbol, global]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, addGlobalAliasNode, (, Symbol, global, ,, Node, root, )]
[;, }, }, private, void, addGlobalAliasNode, (, Symbol, global, ,, Node, root, ), {, String, globalName, =, global, ., name]
[., reportCodeChange, (, ), ;, }, }, private, void, addGlobalAliasNode, (, Symbol, global, ,, Node, root, ), {, String, globalName]
[;, Node, globalValue, =, IR, ., name, (, global, ., name, ), ;, globalValue, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME]
[., name, ;, Node, globalValue, =, IR, ., name, (, global, ., name, ), ;, globalValue, ., putBooleanProp, (, Node]
[;, globalValue, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, global, ., isConstant, ), ;, Node, globalNameNode, =, IR, ., name]
[., name, (, global, ., name, ), ;, globalValue, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, global, ., isConstant, )]
[), ;, globalValue, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, global, ., isConstant, ), ;, Node, globalNameNode, =, IR, .]
[., name, ), ;, globalValue, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, global, ., isConstant, ), ;, Node, globalNameNode, =]
[;, Node, globalNameNode, =, IR, ., name, (, "GLOBAL_", +, globalName, ), ;, globalNameNode, ., addChildToFront, (, globalValue, ), ;]
[., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, global, ., isConstant, ), ;, Node, globalNameNode, =, IR, ., name, (, "GLOBAL_"]
[,, global, ., isConstant, ), ;, Node, globalNameNode, =, IR, ., name, (, "GLOBAL_", +, globalName, ), ;, globalNameNode, .]
[., IS_CONSTANT_NAME, ,, global, ., isConstant, ), ;, Node, globalNameNode, =, IR, ., name, (, "GLOBAL_", +, globalName, ), ;]
[), ;, Node, globalNameNode, =, IR, ., name, (, "GLOBAL_", +, globalName, ), ;, globalNameNode, ., addChildToFront, (, globalValue, )]
[., isConstant, ), ;, Node, globalNameNode, =, IR, ., name, (, "GLOBAL_", +, globalName, ), ;, globalNameNode, ., addChildToFront, (]
[;, globalNameNode, ., addChildToFront, (, globalValue, ), ;, Node, var, =, IR, ., var, (, globalNameNode, ), ;, root, .]
[., name, (, "GLOBAL_", +, globalName, ), ;, globalNameNode, ., addChildToFront, (, globalValue, ), ;, Node, var, =, IR, .]
[), ;, globalNameNode, ., addChildToFront, (, globalValue, ), ;, Node, var, =, IR, ., var, (, globalNameNode, ), ;, root]
[+, globalName, ), ;, globalNameNode, ., addChildToFront, (, globalValue, ), ;, Node, var, =, IR, ., var, (, globalNameNode, )]
[), ;, globalNameNode, ., addChildToFront, (, globalValue, ), ;, Node, var, =, IR, ., var, (, globalNameNode, ), ;, root]
[;, Node, var, =, IR, ., var, (, globalNameNode, ), ;, root, ., addChildToFront, (, var, ), ;, compiler, .]
[., addChildToFront, (, globalValue, ), ;, Node, var, =, IR, ., var, (, globalNameNode, ), ;, root, ., addChildToFront, (]
[), ;, Node, var, =, IR, ., var, (, globalNameNode, ), ;, root, ., addChildToFront, (, var, ), ;, compiler]
[;, root, ., addChildToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Symbol, newSymbolForGlobalVar, (, Node]
[., var, (, globalNameNode, ), ;, root, ., addChildToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[), ;, root, ., addChildToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Symbol, newSymbolForGlobalVar, (]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, Symbol, newSymbolForGlobalVar, (, Node, name, ), {, return, new, Symbol, (]
[., addChildToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Symbol, newSymbolForGlobalVar, (, Node, name, )]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Symbol, newSymbolForGlobalVar, (, Node, name, ), {, return, new, Symbol]
[;, }, private, Symbol, newSymbolForGlobalVar, (, Node, name, ), {, return, new, Symbol, (, name, ., getString, (, ), ,]
[., reportCodeChange, (, ), ;, }, private, Symbol, newSymbolForGlobalVar, (, Node, name, ), {, return, new, Symbol, (, name, .]
[;, }, private, Symbol, newSymbolForProperty, (, String, name, ), {, return, new, Symbol, (, name, ,, false, ), ;, }]
[,, name, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), ;, }, private, Symbol, newSymbolForProperty, (, String, name, ), {]
[., getString, (, ), ,, name, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), ;, }, private, Symbol, newSymbolForProperty, (]
[), ;, }, private, Symbol, newSymbolForProperty, (, String, name, ), {, return, new, Symbol, (, name, ,, false, ), ;]
[., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ), ;, }, private, Symbol, newSymbolForProperty, (, String, name, ), {, return, new]
[), ), ;, }, private, Symbol, newSymbolForProperty, (, String, name, ), {, return, new, Symbol, (, name, ,, false, )]
[., IS_CONSTANT_NAME, ), ), ;, }, private, Symbol, newSymbolForProperty, (, String, name, ), {, return, new, Symbol, (, name, ,]
[;, }, private, class, Symbol, {, public, final, String, name, ;, public, int, accessorCount, =, 0, ;, public, int, mutatorCount]
[,, false, ), ;, }, private, class, Symbol, {, public, final, String, name, ;, public, int, accessorCount, =, 0, ;]
[), ;, }, private, class, Symbol, {, public, final, String, name, ;, public, int, accessorCount, =, 0, ;, public, int]
[;, public, int, mutatorCount, =, 0, ;, public, boolean, aliasMutator, =, false, ;, public, boolean, aliasAccessor, =, false, ;, public]
[;, public, boolean, aliasMutator, =, false, ;, public, boolean, aliasAccessor, =, false, ;, public, final, boolean, isConstant, ;, JSModule, deepestModuleAccess]
[;, public, boolean, aliasAccessor, =, false, ;, public, final, boolean, isConstant, ;, JSModule, deepestModuleAccess, =, null, ;, JSModule, deepestModuleMutate, =]
[;, public, final, boolean, isConstant, ;, JSModule, deepestModuleAccess, =, null, ;, JSModule, deepestModuleMutate, =, null, ;, List, <, Node, >]
[;, JSModule, deepestModuleMutate, =, null, ;, List, <, Node, >, uses, =, Lists, ., newArrayList, (, ), ;, private, Symbol]
[;, List, <, Node, >, uses, =, Lists, ., newArrayList, (, ), ;, private, Symbol, (, String, name, ,, boolean]
[;, private, Symbol, (, String, name, ,, boolean, isConstant, ), {, this, ., name, =, name, ;, this, ., isConstant]
[., newArrayList, (, ), ;, private, Symbol, (, String, name, ,, boolean, isConstant, ), {, this, ., name, =, name]
[=, name, ;, this, ., isConstant, =, isConstant, ;, }, void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount, ++, ;]
[., name, =, name, ;, this, ., isConstant, =, isConstant, ;, }, void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount]
[;, this, ., isConstant, =, isConstant, ;, }, void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount, ++, ;, if, (]
[=, isConstant, ;, }, void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount, ++, ;, if, (, moduleGraph, !=, null, )]
[., isConstant, =, isConstant, ;, }, void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount, ++, ;, if, (, moduleGraph, !=]
[;, }, void, recordAccessor, (, NodeTraversal, t, ), {, accessorCount, ++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleAccess]
[;, if, (, moduleGraph, !=, null, ), {, deepestModuleAccess, =, (, deepestModuleAccess, ==, null, ), ?, t, ., getModule, (]
[++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleAccess, =, (, deepestModuleAccess, ==, null, ), ?, t, ., getModule]
[), {, deepestModuleAccess, =, (, deepestModuleAccess, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (]
[!=, null, ), {, deepestModuleAccess, =, (, deepestModuleAccess, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, .]
[), {, deepestModuleAccess, =, (, deepestModuleAccess, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (]
[=, (, deepestModuleAccess, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule]
[;, }, }, void, recordMutator, (, NodeTraversal, t, ), {, mutatorCount, ++, ;, if, (, moduleGraph, !=, null, ), {]
[?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleAccess, ), ;]
[), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleAccess, )]
[==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,]
[), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleAccess, )]
[:, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleAccess, ), ;, }, }, void, recordMutator, (, NodeTraversal]
[., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleAccess, ), ;, }, }]
[;, }, }, void, recordMutator, (, NodeTraversal, t, ), {, mutatorCount, ++, ;, if, (, moduleGraph, !=, null, ), {]
[., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleAccess, ), ;, }, }, void, recordMutator, (, NodeTraversal, t, )]
[,, deepestModuleAccess, ), ;, }, }, void, recordMutator, (, NodeTraversal, t, ), {, mutatorCount, ++, ;, if, (, moduleGraph, !=]
[., getModule, (, ), ,, deepestModuleAccess, ), ;, }, }, void, recordMutator, (, NodeTraversal, t, ), {, mutatorCount, ++, ;]
[), ;, }, }, void, recordMutator, (, NodeTraversal, t, ), {, mutatorCount, ++, ;, if, (, moduleGraph, !=, null, )]
[;, if, (, moduleGraph, !=, null, ), {, deepestModuleMutate, =, (, deepestModuleMutate, ==, null, ), ?, t, ., getModule, (]
[++, ;, if, (, moduleGraph, !=, null, ), {, deepestModuleMutate, =, (, deepestModuleMutate, ==, null, ), ?, t, ., getModule]
[), {, deepestModuleMutate, =, (, deepestModuleMutate, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (]
[!=, null, ), {, deepestModuleMutate, =, (, deepestModuleMutate, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, .]
[), {, deepestModuleMutate, =, (, deepestModuleMutate, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (]
[=, (, deepestModuleMutate, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule]
[;, }, }, }, }]
[?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleMutate, ), ;]
[), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleMutate, )]
[==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,]
[), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleMutate, )]
[:, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleMutate, ), ;, }, }, }, }]
[., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleMutate, ), ;, }, }]
[;, }, }, }, }]
[., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleMutate, ), ;, }, }, }, }]
[,, deepestModuleMutate, ), ;, }, }, }, }]
[., getModule, (, ), ,, deepestModuleMutate, ), ;, }, }, }, }]
[), ;, }, }, }, }]
