[., util, ., List, ;, import, java, ., util, ., StringTokenizer, ;, class, JvmMetrics, {, private, static, int, TABULAR_COLON_POS, =]
[., util, ., StringTokenizer, ;, class, JvmMetrics, {, private, static, int, TABULAR_COLON_POS, =, 40, ;, private, static, long, ONE_KILO_BYTE, =]
[., util, ., StringTokenizer, ;, class, JvmMetrics, {, private, static, int, TABULAR_COLON_POS, =, 40, ;, private, static, long, ONE_KILO_BYTE, =]
[., StringTokenizer, ;, class, JvmMetrics, {, private, static, int, TABULAR_COLON_POS, =, 40, ;, private, static, long, ONE_KILO_BYTE, =, 1L, <<]
[static, int, TABULAR_COLON_POS, =, 40, ;, private, static, long, ONE_KILO_BYTE, =, 1L, <<, 10L, ;, private, static, long, ONE_MEGA_BYTE, =]
[static, int, TABULAR_COLON_POS, =, 40, ;, private, static, long, ONE_KILO_BYTE, =, 1L, <<, 10L, ;, private, static, long, ONE_MEGA_BYTE, =]
[TABULAR_COLON_POS, =, 40, ;, private, static, long, ONE_KILO_BYTE, =, 1L, <<, 10L, ;, private, static, long, ONE_MEGA_BYTE, =, 1L, <<]
[ONE_KILO_BYTE, =, 1L, <<, 10L, ;, private, static, long, ONE_MEGA_BYTE, =, 1L, <<, 20L, ;, private, static, long, ONE_GIGA_BYTE, =]
[ONE_KILO_BYTE, =, 1L, <<, 10L, ;, private, static, long, ONE_MEGA_BYTE, =, 1L, <<, 20L, ;, private, static, long, ONE_GIGA_BYTE, =]
[1L, <<, 10L, ;, private, static, long, ONE_MEGA_BYTE, =, 1L, <<, 20L, ;, private, static, long, ONE_GIGA_BYTE, =, 1L, <<]
[ONE_GIGA_BYTE, =, 1L, <<, 30L, ;, public, static, void, maybeWriteJvmMetrics, (, PrintStream, out, ,, String, options, ), {, if, (]
[ONE_GIGA_BYTE, =, 1L, <<, 30L, ;, public, static, void, maybeWriteJvmMetrics, (, PrintStream, out, ,, String, options, ), {, if, (]
[1L, <<, 30L, ;, public, static, void, maybeWriteJvmMetrics, (, PrintStream, out, ,, String, options, ), {, if, (, options, ==]
[PrintStream, out, ,, String, options, ), {, if, (, options, ==, null, ), {, return, ;, }, boolean, verboseMode, =]
[), {, if, (, options, ==, null, ), {, return, ;, }, boolean, verboseMode, =, false, ;, boolean, prettyMode, =]
[==, null, ), {, return, ;, }, boolean, verboseMode, =, false, ;, boolean, prettyMode, =, false, ;, StringTokenizer, st, =]
[{, return, ;, }, boolean, verboseMode, =, false, ;, boolean, prettyMode, =, false, ;, StringTokenizer, st, =, new, StringTokenizer, (]
[;, }, boolean, verboseMode, =, false, ;, boolean, prettyMode, =, false, ;, StringTokenizer, st, =, new, StringTokenizer, (, options, ,]
[false, ;, boolean, prettyMode, =, false, ;, StringTokenizer, st, =, new, StringTokenizer, (, options, ,, ":", ), ;, if, (]
[false, ;, boolean, prettyMode, =, false, ;, StringTokenizer, st, =, new, StringTokenizer, (, options, ,, ":", ), ;, if, (]
[new, StringTokenizer, (, options, ,, ":", ), ;, if, (, st, ., hasMoreTokens, (, ), ), {, String, mode, =]
[new, StringTokenizer, (, options, ,, ":", ), ;, if, (, st, ., hasMoreTokens, (, ), ), {, String, mode, =]
[if, (, st, ., hasMoreTokens, (, ), ), {, String, mode, =, st, ., nextToken, (, ), ;, if, (]
[if, (, st, ., hasMoreTokens, (, ), ), {, String, mode, =, st, ., nextToken, (, ), ;, if, (]
[hasMoreTokens, (, ), ), {, String, mode, =, st, ., nextToken, (, ), ;, if, (, mode, ., equalsIgnoreCase, (]
[{, String, mode, =, st, ., nextToken, (, ), ;, if, (, mode, ., equalsIgnoreCase, (, "verbose", ), ), {]
[mode, =, st, ., nextToken, (, ), ;, if, (, mode, ., equalsIgnoreCase, (, "verbose", ), ), {, verboseMode, =]
[), ;, if, (, mode, ., equalsIgnoreCase, (, "verbose", ), ), {, verboseMode, =, true, ;, }, }, if, (]
[), ;, if, (, mode, ., equalsIgnoreCase, (, "verbose", ), ), {, verboseMode, =, true, ;, }, }, if, (]
[), {, verboseMode, =, true, ;, }, }, if, (, st, ., hasMoreTokens, (, ), ), {, String, mode, =]
[), {, verboseMode, =, true, ;, }, }, if, (, st, ., hasMoreTokens, (, ), ), {, String, mode, =]
[if, (, st, ., hasMoreTokens, (, ), ), {, String, mode, =, st, ., nextToken, (, ), ;, if, (]
[if, (, st, ., hasMoreTokens, (, ), ), {, String, mode, =, st, ., nextToken, (, ), ;, if, (]
[hasMoreTokens, (, ), ), {, String, mode, =, st, ., nextToken, (, ), ;, if, (, mode, ., equalsIgnoreCase, (]
[{, String, mode, =, st, ., nextToken, (, ), ;, if, (, mode, ., equalsIgnoreCase, (, "pretty", ), ), {]
[mode, =, st, ., nextToken, (, ), ;, if, (, mode, ., equalsIgnoreCase, (, "pretty", ), ), {, prettyMode, =]
[), ;, if, (, mode, ., equalsIgnoreCase, (, "pretty", ), ), {, prettyMode, =, true, ;, }, }, if, (]
[), ;, if, (, mode, ., equalsIgnoreCase, (, "pretty", ), ), {, prettyMode, =, true, ;, }, }, if, (]
[), ), {, prettyMode, =, true, ;, }, }, if, (, st, ., hasMoreTokens, (, ), ), {, while, (]
[), ), {, prettyMode, =, true, ;, }, }, if, (, st, ., hasMoreTokens, (, ), ), {, while, (]
[(, st, ., hasMoreTokens, (, ), ), {, while, (, st, ., hasMoreTokens, (, ), ), {, String, types, =]
[(, st, ., hasMoreTokens, (, ), ), {, while, (, st, ., hasMoreTokens, (, ), ), {, String, types, =]
[(, st, ., hasMoreTokens, (, ), ), {, String, types, =, st, ., nextToken, (, ), ;, StringTokenizer, typeSt, =]
[hasMoreTokens, (, ), ), {, String, types, =, st, ., nextToken, (, ), ;, StringTokenizer, typeSt, =, new, StringTokenizer, (]
[), ), {, String, types, =, st, ., nextToken, (, ), ;, StringTokenizer, typeSt, =, new, StringTokenizer, (, types, ,]
[=, st, ., nextToken, (, ), ;, StringTokenizer, typeSt, =, new, StringTokenizer, (, types, ,, ",", ), ;, while, (]
[=, st, ., nextToken, (, ), ;, StringTokenizer, typeSt, =, new, StringTokenizer, (, types, ,, ",", ), ;, while, (]
[new, StringTokenizer, (, types, ,, ",", ), ;, while, (, typeSt, ., hasMoreElements, (, ), ), {, String, type, =]
[new, StringTokenizer, (, types, ,, ",", ), ;, while, (, typeSt, ., hasMoreElements, (, ), ), {, String, type, =]
[), ;, while, (, typeSt, ., hasMoreElements, (, ), ), {, String, type, =, typeSt, ., nextToken, (, ), ;]
[while, (, typeSt, ., hasMoreElements, (, ), ), {, String, type, =, typeSt, ., nextToken, (, ), ;, writeMetrics, (]
[typeSt, ., hasMoreElements, (, ), ), {, String, type, =, typeSt, ., nextToken, (, ), ;, writeMetrics, (, out, ,]
[hasMoreElements, (, ), ), {, String, type, =, typeSt, ., nextToken, (, ), ;, writeMetrics, (, out, ,, type, ,]
[), ), {, String, type, =, typeSt, ., nextToken, (, ), ;, writeMetrics, (, out, ,, type, ,, verboseMode, ,]
[nextToken, (, ), ;, writeMetrics, (, out, ,, type, ,, verboseMode, ,, prettyMode, ), ;, }, }, }, else, {]
[), ;, writeMetrics, (, out, ,, type, ,, verboseMode, ,, prettyMode, ), ;, }, }, }, else, {, writeMetrics, (]
[writeMetrics, (, out, ,, type, ,, verboseMode, ,, prettyMode, ), ;, }, }, }, else, {, writeMetrics, (, out, ,]
[out, ,, type, ,, verboseMode, ,, prettyMode, ), ;, }, }, }, else, {, writeMetrics, (, out, ,, "all", ,]
[type, ,, verboseMode, ,, prettyMode, ), ;, }, }, }, else, {, writeMetrics, (, out, ,, "all", ,, verboseMode, ,]
[private, static, void, writeMetrics, (, PrintStream, out, ,, String, type, ,, boolean, verbose, ,, boolean, pretty, ), {, if, (]
[private, static, void, writeMetrics, (, PrintStream, out, ,, String, type, ,, boolean, verbose, ,, boolean, pretty, ), {, if, (]
[private, static, void, writeMetrics, (, PrintStream, out, ,, String, type, ,, boolean, verbose, ,, boolean, pretty, ), {, if, (]
[(, PrintStream, out, ,, String, type, ,, boolean, verbose, ,, boolean, pretty, ), {, if, (, type, ., equals, (]
[,, String, type, ,, boolean, verbose, ,, boolean, pretty, ), {, if, (, type, ., equals, (, "gc", ), ||]
[,, String, type, ,, boolean, verbose, ,, boolean, pretty, ), {, if, (, type, ., equals, (, "gc", ), ||]
[boolean, verbose, ,, boolean, pretty, ), {, if, (, type, ., equals, (, "gc", ), ||, type, ., equalsIgnoreCase, (]
[pretty, ), {, if, (, type, ., equals, (, "gc", ), ||, type, ., equalsIgnoreCase, (, "all", ), ), {]
[{, if, (, type, ., equals, (, "gc", ), ||, type, ., equalsIgnoreCase, (, "all", ), ), {, writeGarbageCollectionStats, (]
[(, type, ., equals, (, "gc", ), ||, type, ., equalsIgnoreCase, (, "all", ), ), {, writeGarbageCollectionStats, (, out, ,]
[., equals, (, "gc", ), ||, type, ., equalsIgnoreCase, (, "all", ), ), {, writeGarbageCollectionStats, (, out, ,, verbose, ,]
[type, ., equalsIgnoreCase, (, "all", ), ), {, writeGarbageCollectionStats, (, out, ,, verbose, ,, pretty, ), ;, }, if, (]
[type, ., equalsIgnoreCase, (, "all", ), ), {, writeGarbageCollectionStats, (, out, ,, verbose, ,, pretty, ), ;, }, if, (]
[type, ., equalsIgnoreCase, (, "all", ), ), {, writeGarbageCollectionStats, (, out, ,, verbose, ,, pretty, ), ;, }, if, (]
["all", ), ), {, writeGarbageCollectionStats, (, out, ,, verbose, ,, pretty, ), ;, }, if, (, type, ., equals, (]
[{, writeGarbageCollectionStats, (, out, ,, verbose, ,, pretty, ), ;, }, if, (, type, ., equals, (, "mem", ), ||]
[{, writeGarbageCollectionStats, (, out, ,, verbose, ,, pretty, ), ;, }, if, (, type, ., equals, (, "mem", ), ||]
[,, verbose, ,, pretty, ), ;, }, if, (, type, ., equals, (, "mem", ), ||, type, ., equalsIgnoreCase, (]
[), ;, }, if, (, type, ., equals, (, "mem", ), ||, type, ., equalsIgnoreCase, (, "all", ), ), {]
[}, if, (, type, ., equals, (, "mem", ), ||, type, ., equalsIgnoreCase, (, "all", ), ), {, writeMemoryMetrics, (]
[(, type, ., equals, (, "mem", ), ||, type, ., equalsIgnoreCase, (, "all", ), ), {, writeMemoryMetrics, (, out, ,]
[., equals, (, "mem", ), ||, type, ., equalsIgnoreCase, (, "all", ), ), {, writeMemoryMetrics, (, out, ,, verbose, ,]
[type, ., equalsIgnoreCase, (, "all", ), ), {, writeMemoryMetrics, (, out, ,, verbose, ,, pretty, ), ;, }, if, (]
[type, ., equalsIgnoreCase, (, "all", ), ), {, writeMemoryMetrics, (, out, ,, verbose, ,, pretty, ), ;, }, if, (]
[type, ., equalsIgnoreCase, (, "all", ), ), {, writeMemoryMetrics, (, out, ,, verbose, ,, pretty, ), ;, }, if, (]
["all", ), ), {, writeMemoryMetrics, (, out, ,, verbose, ,, pretty, ), ;, }, if, (, type, ., equals, (]
[{, writeMemoryMetrics, (, out, ,, verbose, ,, pretty, ), ;, }, if, (, type, ., equals, (, "jit", ), ||]
[{, writeMemoryMetrics, (, out, ,, verbose, ,, pretty, ), ;, }, if, (, type, ., equals, (, "jit", ), ||]
[,, verbose, ,, pretty, ), ;, }, if, (, type, ., equals, (, "jit", ), ||, type, ., equalsIgnoreCase, (]
[), ;, }, if, (, type, ., equals, (, "jit", ), ||, type, ., equalsIgnoreCase, (, "all", ), ), {]
[}, if, (, type, ., equals, (, "jit", ), ||, type, ., equalsIgnoreCase, (, "all", ), ), {, writeJitMetrics, (]
[(, type, ., equals, (, "jit", ), ||, type, ., equalsIgnoreCase, (, "all", ), ), {, writeJitMetrics, (, out, ,]
[., equals, (, "jit", ), ||, type, ., equalsIgnoreCase, (, "all", ), ), {, writeJitMetrics, (, out, ,, verbose, ,]
[}, }, private, static, void, writeJitMetrics, (, PrintStream, out, ,, boolean, verbose, ,, boolean, pretty, ), {, CompilationMXBean, cBean, =]
[}, }, private, static, void, writeJitMetrics, (, PrintStream, out, ,, boolean, verbose, ,, boolean, pretty, ), {, CompilationMXBean, cBean, =]
[verbose, ,, boolean, pretty, ), {, CompilationMXBean, cBean, =, ManagementFactory, ., getCompilationMXBean, (, ), ;, String, name, ;, if, (]
[pretty, ), {, CompilationMXBean, cBean, =, ManagementFactory, ., getCompilationMXBean, (, ), ;, String, name, ;, if, (, verbose, ), {]
[{, CompilationMXBean, cBean, =, ManagementFactory, ., getCompilationMXBean, (, ), ;, String, name, ;, if, (, verbose, ), {, name, =]
[{, CompilationMXBean, cBean, =, ManagementFactory, ., getCompilationMXBean, (, ), ;, String, name, ;, if, (, verbose, ), {, name, =]
[;, String, name, ;, if, (, verbose, ), {, name, =, cBean, ., getName, (, ), ;, }, else, {]
[name, ;, if, (, verbose, ), {, name, =, cBean, ., getName, (, ), ;, }, else, {, name, =]
[), {, name, =, cBean, ., getName, (, ), ;, }, else, {, name, =, "total", ;, }, if, (]
[=, cBean, ., getName, (, ), ;, }, else, {, name, =, "total", ;, }, if, (, pretty, ), {]
[=, cBean, ., getName, (, ), ;, }, else, {, name, =, "total", ;, }, if, (, pretty, ), {]
[(, ), ;, }, else, {, name, =, "total", ;, }, if, (, pretty, ), {, out, ., println, (]
[}, else, {, name, =, "total", ;, }, if, (, pretty, ), {, out, ., println, (, "\nJIT Stats", ), ;]
[}, else, {, name, =, "total", ;, }, if, (, pretty, ), {, out, ., println, (, "\nJIT Stats", ), ;]
[=, "total", ;, }, if, (, pretty, ), {, out, ., println, (, "\nJIT Stats", ), ;, out, ., println, (]
[=, "total", ;, }, if, (, pretty, ), {, out, ., println, (, "\nJIT Stats", ), ;, out, ., println, (]
[if, (, pretty, ), {, out, ., println, (, "\nJIT Stats", ), ;, out, ., println, (, String, ., format, (]
[pretty, ), {, out, ., println, (, "\nJIT Stats", ), ;, out, ., println, (, String, ., format, (, "\t%s jit time: %d ms", ,]
[{, out, ., println, (, "\nJIT Stats", ), ;, out, ., println, (, String, ., format, (, "\t%s jit time: %d ms", ,, name, ,]
[{, out, ., println, (, "\nJIT Stats", ), ;, out, ., println, (, String, ., format, (, "\t%s jit time: %d ms", ,, name, ,]
[(, String, ., format, (, "\t%s jit time: %d ms", ,, name, ,, cBean, ., getTotalCompilationTime, (, ), ), ), ;, }, else, {]
[(, String, ., format, (, "\t%s jit time: %d ms", ,, name, ,, cBean, ., getTotalCompilationTime, (, ), ), ), ;, }, else, {]
[(, "\t%s jit time: %d ms", ,, name, ,, cBean, ., getTotalCompilationTime, (, ), ), ), ;, }, else, {, out, ., println, (]
[,, name, ,, cBean, ., getTotalCompilationTime, (, ), ), ), ;, }, else, {, out, ., println, (, normalizeTabularColonPos, (]
[,, name, ,, cBean, ., getTotalCompilationTime, (, ), ), ), ;, }, else, {, out, ., println, (, normalizeTabularColonPos, (]
[., getTotalCompilationTime, (, ), ), ), ;, }, else, {, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[(, ), ), ), ;, }, else, {, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "%s-jit-time-ms : %d", ,]
[), ), ;, }, else, {, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "%s-jit-time-ms : %d", ,, normalizeName, (]
[}, else, {, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "%s-jit-time-ms : %d", ,, normalizeName, (, name, ), ,]
[}, else, {, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "%s-jit-time-ms : %d", ,, normalizeName, (, name, ), ,]
[private, static, void, writeOverallMemoryUsage, (, PrintStream, out, ,, MemoryUsage, usage, ,, String, prefix, ,, boolean, pretty, ), {, if, (]
[writeOverallMemoryUsage, (, PrintStream, out, ,, MemoryUsage, usage, ,, String, prefix, ,, boolean, pretty, ), {, if, (, pretty, ), {]
[writeOverallMemoryUsage, (, PrintStream, out, ,, MemoryUsage, usage, ,, String, prefix, ,, boolean, pretty, ), {, if, (, pretty, ), {]
[,, MemoryUsage, usage, ,, String, prefix, ,, boolean, pretty, ), {, if, (, pretty, ), {, out, ., format, (]
[usage, ,, String, prefix, ,, boolean, pretty, ), {, if, (, pretty, ), {, out, ., format, (, "\t%s\n", ,]
[prefix, ,, boolean, pretty, ), {, if, (, pretty, ), {, out, ., format, (, "\t%s\n", ,, prefix, ), ;]
[prefix, ,, boolean, pretty, ), {, if, (, pretty, ), {, out, ., format, (, "\t%s\n", ,, prefix, ), ;]
[), {, if, (, pretty, ), {, out, ., format, (, "\t%s\n", ,, prefix, ), ;, out, ., format, (]
[if, (, pretty, ), {, out, ., format, (, "\t%s\n", ,, prefix, ), ;, out, ., format, (, "\t\tavailable         : %s\n", ,]
[pretty, ), {, out, ., format, (, "\t%s\n", ,, prefix, ), ;, out, ., format, (, "\t\tavailable         : %s\n", ,, formatBytes, (]
[pretty, ), {, out, ., format, (, "\t%s\n", ,, prefix, ), ;, out, ., format, (, "\t\tavailable         : %s\n", ,, formatBytes, (]
[,, prefix, ), ;, out, ., format, (, "\t\tavailable         : %s\n", ,, formatBytes, (, usage, ., getMax, (, ), ), ), ;]
[,, prefix, ), ;, out, ., format, (, "\t\tavailable         : %s\n", ,, formatBytes, (, usage, ., getMax, (, ), ), ), ;]
[out, ., format, (, "\t\tavailable         : %s\n", ,, formatBytes, (, usage, ., getMax, (, ), ), ), ;, out, ., format, (]
[format, (, "\t\tavailable         : %s\n", ,, formatBytes, (, usage, ., getMax, (, ), ), ), ;, out, ., format, (, "\t\tcurrent           : %s\n", ,]
["\t\tavailable         : %s\n", ,, formatBytes, (, usage, ., getMax, (, ), ), ), ;, out, ., format, (, "\t\tcurrent           : %s\n", ,, formatBytes, (]
["\t\tavailable         : %s\n", ,, formatBytes, (, usage, ., getMax, (, ), ), ), ;, out, ., format, (, "\t\tcurrent           : %s\n", ,, formatBytes, (]
[;, out, ., format, (, "\t\tcurrent           : %s\n", ,, formatBytes, (, usage, ., getUsed, (, ), ), ), ;, }, else, {]
[., format, (, "\t\tcurrent           : %s\n", ,, formatBytes, (, usage, ., getUsed, (, ), ), ), ;, }, else, {, prefix, =]
[(, "\t\tcurrent           : %s\n", ,, formatBytes, (, usage, ., getUsed, (, ), ), ), ;, }, else, {, prefix, =, normalizeName, (]
[formatBytes, (, usage, ., getUsed, (, ), ), ), ;, }, else, {, prefix, =, normalizeName, (, prefix, ), ;]
[formatBytes, (, usage, ., getUsed, (, ), ), ), ;, }, else, {, prefix, =, normalizeName, (, prefix, ), ;]
[getUsed, (, ), ), ), ;, }, else, {, prefix, =, normalizeName, (, prefix, ), ;, out, ., println, (]
[), ), ), ;, }, else, {, prefix, =, normalizeName, (, prefix, ), ;, out, ., println, (, normalizeTabularColonPos, (]
[), ), ), ;, }, else, {, prefix, =, normalizeName, (, prefix, ), ;, out, ., println, (, normalizeTabularColonPos, (]
[}, else, {, prefix, =, normalizeName, (, prefix, ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[}, else, {, prefix, =, normalizeName, (, prefix, ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[{, prefix, =, normalizeName, (, prefix, ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +]
[=, normalizeName, (, prefix, ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-available-bytes : %d", ,]
[=, normalizeName, (, prefix, ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-available-bytes : %d", ,]
[(, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-available-bytes : %d", ,, usage, ., getMax, (, ), ), ), ), ;]
[(, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-available-bytes : %d", ,, usage, ., getMax, (, ), ), ), ), ;]
[., format, (, prefix, +, "-available-bytes : %d", ,, usage, ., getMax, (, ), ), ), ), ;, out, ., println, (]
[(, prefix, +, "-available-bytes : %d", ,, usage, ., getMax, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (]
[(, prefix, +, "-available-bytes : %d", ,, usage, ., getMax, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (]
[,, usage, ., getMax, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[,, usage, ., getMax, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[., getMax, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +]
[(, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-current-bytes : %d", ,]
[(, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-current-bytes : %d", ,]
[writePoolMemoryUsage, (, PrintStream, out, ,, MemoryUsage, usage, ,, MemoryUsage, peakUsage, ,, String, prefix, ,, boolean, pretty, ), {, if, (]
[out, ,, MemoryUsage, usage, ,, MemoryUsage, peakUsage, ,, String, prefix, ,, boolean, pretty, ), {, if, (, pretty, ), {]
[out, ,, MemoryUsage, usage, ,, MemoryUsage, peakUsage, ,, String, prefix, ,, boolean, pretty, ), {, if, (, pretty, ), {]
[,, MemoryUsage, peakUsage, ,, String, prefix, ,, boolean, pretty, ), {, if, (, pretty, ), {, out, ., format, (]
[peakUsage, ,, String, prefix, ,, boolean, pretty, ), {, if, (, pretty, ), {, out, ., format, (, "\t\tavailable         : %s\n", ,]
[String, prefix, ,, boolean, pretty, ), {, if, (, pretty, ), {, out, ., format, (, "\t\tavailable         : %s\n", ,, formatBytes, (]
[String, prefix, ,, boolean, pretty, ), {, if, (, pretty, ), {, out, ., format, (, "\t\tavailable         : %s\n", ,, formatBytes, (]
[(, pretty, ), {, out, ., format, (, "\t\tavailable         : %s\n", ,, formatBytes, (, usage, ., getMax, (, ), ), ), ;]
[(, pretty, ), {, out, ., format, (, "\t\tavailable         : %s\n", ,, formatBytes, (, usage, ., getMax, (, ), ), ), ;]
[out, ., format, (, "\t\tavailable         : %s\n", ,, formatBytes, (, usage, ., getMax, (, ), ), ), ;, out, ., format, (]
[format, (, "\t\tavailable         : %s\n", ,, formatBytes, (, usage, ., getMax, (, ), ), ), ;, out, ., format, (, "\t\tpeak              : %s\n", ,]
["\t\tavailable         : %s\n", ,, formatBytes, (, usage, ., getMax, (, ), ), ), ;, out, ., format, (, "\t\tpeak              : %s\n", ,, formatBytes, (]
["\t\tavailable         : %s\n", ,, formatBytes, (, usage, ., getMax, (, ), ), ), ;, out, ., format, (, "\t\tpeak              : %s\n", ,, formatBytes, (]
[), ), ), ;, out, ., format, (, "\t\tpeak              : %s\n", ,, formatBytes, (, peakUsage, ., getUsed, (, ), ), ), ;]
[), ), ), ;, out, ., format, (, "\t\tpeak              : %s\n", ,, formatBytes, (, peakUsage, ., getUsed, (, ), ), ), ;]
[out, ., format, (, "\t\tpeak              : %s\n", ,, formatBytes, (, peakUsage, ., getUsed, (, ), ), ), ;, out, ., format, (]
[format, (, "\t\tpeak              : %s\n", ,, formatBytes, (, peakUsage, ., getUsed, (, ), ), ), ;, out, ., format, (, "\t\tcurrent           : %s\n", ,]
["\t\tpeak              : %s\n", ,, formatBytes, (, peakUsage, ., getUsed, (, ), ), ), ;, out, ., format, (, "\t\tcurrent           : %s\n", ,, formatBytes, (]
["\t\tpeak              : %s\n", ,, formatBytes, (, peakUsage, ., getUsed, (, ), ), ), ;, out, ., format, (, "\t\tcurrent           : %s\n", ,, formatBytes, (]
[;, out, ., format, (, "\t\tcurrent           : %s\n", ,, formatBytes, (, usage, ., getUsed, (, ), ), ), ;, }, else, {]
[;, out, ., format, (, "\t\tcurrent           : %s\n", ,, formatBytes, (, usage, ., getUsed, (, ), ), ), ;, }, else, {]
[(, "\t\tcurrent           : %s\n", ,, formatBytes, (, usage, ., getUsed, (, ), ), ), ;, }, else, {, out, ., println, (]
[,, formatBytes, (, usage, ., getUsed, (, ), ), ), ;, }, else, {, out, ., println, (, normalizeTabularColonPos, (]
[,, formatBytes, (, usage, ., getUsed, (, ), ), ), ;, }, else, {, out, ., println, (, normalizeTabularColonPos, (]
[., getUsed, (, ), ), ), ;, }, else, {, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[., getUsed, (, ), ), ), ;, }, else, {, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[(, ), ), ), ;, }, else, {, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +]
[), ), ;, }, else, {, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-available-bytes : %d", ,]
[), ), ;, }, else, {, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-available-bytes : %d", ,]
[(, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-available-bytes : %d", ,, usage, ., getMax, (, ), ), ), ), ;]
[(, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-available-bytes : %d", ,, usage, ., getMax, (, ), ), ), ), ;]
[., format, (, prefix, +, "-available-bytes : %d", ,, usage, ., getMax, (, ), ), ), ), ;, out, ., println, (]
[(, prefix, +, "-available-bytes : %d", ,, usage, ., getMax, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (]
[(, prefix, +, "-available-bytes : %d", ,, usage, ., getMax, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (]
[,, usage, ., getMax, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[,, usage, ., getMax, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[., getMax, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +]
[(, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-peak-bytes : %d", ,]
[(, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-peak-bytes : %d", ,]
[(, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-peak-bytes : %d", ,, peakUsage, ., getUsed, (, ), ), ), ), ;]
[(, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-peak-bytes : %d", ,, peakUsage, ., getUsed, (, ), ), ), ), ;]
[., format, (, prefix, +, "-peak-bytes : %d", ,, peakUsage, ., getUsed, (, ), ), ), ), ;, out, ., println, (]
[(, prefix, +, "-peak-bytes : %d", ,, peakUsage, ., getUsed, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (]
[(, prefix, +, "-peak-bytes : %d", ,, peakUsage, ., getUsed, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (]
[,, peakUsage, ., getUsed, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[,, peakUsage, ., getUsed, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[., getUsed, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +]
[(, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-current-bytes : %d", ,]
[(, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, prefix, +, "-current-bytes : %d", ,]
[;, }, }, private, static, void, writeMemoryMetrics, (, PrintStream, out, ,, boolean, verbose, ,, boolean, pretty, ), {, if, (]
[private, static, void, writeMemoryMetrics, (, PrintStream, out, ,, boolean, verbose, ,, boolean, pretty, ), {, if, (, pretty, ), {]
[private, static, void, writeMemoryMetrics, (, PrintStream, out, ,, boolean, verbose, ,, boolean, pretty, ), {, if, (, pretty, ), {]
[(, PrintStream, out, ,, boolean, verbose, ,, boolean, pretty, ), {, if, (, pretty, ), {, out, ., println, (]
[,, boolean, pretty, ), {, if, (, pretty, ), {, out, ., println, (, "\nMemory usage", ), ;, }, if, (]
[(, pretty, ), {, out, ., println, (, "\nMemory usage", ), ;, }, if, (, verbose, ), {, MemoryMXBean, overallMemBean, =]
[(, pretty, ), {, out, ., println, (, "\nMemory usage", ), ;, }, if, (, verbose, ), {, MemoryMXBean, overallMemBean, =]
[), ;, }, if, (, verbose, ), {, MemoryMXBean, overallMemBean, =, ManagementFactory, ., getMemoryMXBean, (, ), ;, MemoryUsage, usage, =]
[), ;, }, if, (, verbose, ), {, MemoryMXBean, overallMemBean, =, ManagementFactory, ., getMemoryMXBean, (, ), ;, MemoryUsage, usage, =]
[), {, MemoryMXBean, overallMemBean, =, ManagementFactory, ., getMemoryMXBean, (, ), ;, MemoryUsage, usage, =, overallMemBean, ., getHeapMemoryUsage, (, ), ;]
[MemoryMXBean, overallMemBean, =, ManagementFactory, ., getMemoryMXBean, (, ), ;, MemoryUsage, usage, =, overallMemBean, ., getHeapMemoryUsage, (, ), ;, writeOverallMemoryUsage, (]
[=, ManagementFactory, ., getMemoryMXBean, (, ), ;, MemoryUsage, usage, =, overallMemBean, ., getHeapMemoryUsage, (, ), ;, writeOverallMemoryUsage, (, out, ,]
[., getMemoryMXBean, (, ), ;, MemoryUsage, usage, =, overallMemBean, ., getHeapMemoryUsage, (, ), ;, writeOverallMemoryUsage, (, out, ,, usage, ,]
[(, ), ;, MemoryUsage, usage, =, overallMemBean, ., getHeapMemoryUsage, (, ), ;, writeOverallMemoryUsage, (, out, ,, usage, ,, "Heap", ,]
[MemoryUsage, usage, =, overallMemBean, ., getHeapMemoryUsage, (, ), ;, writeOverallMemoryUsage, (, out, ,, usage, ,, "Heap", ,, pretty, ), ;]
[=, overallMemBean, ., getHeapMemoryUsage, (, ), ;, writeOverallMemoryUsage, (, out, ,, usage, ,, "Heap", ,, pretty, ), ;, usage, =]
[=, overallMemBean, ., getHeapMemoryUsage, (, ), ;, writeOverallMemoryUsage, (, out, ,, usage, ,, "Heap", ,, pretty, ), ;, usage, =]
[;, writeOverallMemoryUsage, (, out, ,, usage, ,, "Heap", ,, pretty, ), ;, usage, =, overallMemBean, ., getNonHeapMemoryUsage, (, ), ;]
[(, out, ,, usage, ,, "Heap", ,, pretty, ), ;, usage, =, overallMemBean, ., getNonHeapMemoryUsage, (, ), ;, writeOverallMemoryUsage, (]
[,, usage, ,, "Heap", ,, pretty, ), ;, usage, =, overallMemBean, ., getNonHeapMemoryUsage, (, ), ;, writeOverallMemoryUsage, (, out, ,]
[,, "Heap", ,, pretty, ), ;, usage, =, overallMemBean, ., getNonHeapMemoryUsage, (, ), ;, writeOverallMemoryUsage, (, out, ,, usage, ,]
[,, pretty, ), ;, usage, =, overallMemBean, ., getNonHeapMemoryUsage, (, ), ;, writeOverallMemoryUsage, (, out, ,, usage, ,, "Non-heap", ,]
[overallMemBean, ., getNonHeapMemoryUsage, (, ), ;, writeOverallMemoryUsage, (, out, ,, usage, ,, "Non-heap", ,, pretty, ), ;, }, if, (]
[,, usage, ,, "Non-heap", ,, pretty, ), ;, }, if, (, verbose, ), {, List, <, MemoryPoolMXBean, >, mpBeans, =]
[,, usage, ,, "Non-heap", ,, pretty, ), ;, }, if, (, verbose, ), {, List, <, MemoryPoolMXBean, >, mpBeans, =]
[verbose, ), {, List, <, MemoryPoolMXBean, >, mpBeans, =, ManagementFactory, ., getMemoryPoolMXBeans, (, ), ;, for, (, MemoryPoolMXBean, mpBean, :]
[>, mpBeans, =, ManagementFactory, ., getMemoryPoolMXBeans, (, ), ;, for, (, MemoryPoolMXBean, mpBean, :, mpBeans, ), {, MemoryUsage, currentUsage, =]
[>, mpBeans, =, ManagementFactory, ., getMemoryPoolMXBeans, (, ), ;, for, (, MemoryPoolMXBean, mpBean, :, mpBeans, ), {, MemoryUsage, currentUsage, =]
[for, (, MemoryPoolMXBean, mpBean, :, mpBeans, ), {, MemoryUsage, currentUsage, =, mpBean, ., getUsage, (, ), ;, MemoryUsage, peakUsage, =]
[for, (, MemoryPoolMXBean, mpBean, :, mpBeans, ), {, MemoryUsage, currentUsage, =, mpBean, ., getUsage, (, ), ;, MemoryUsage, peakUsage, =]
[MemoryUsage, currentUsage, =, mpBean, ., getUsage, (, ), ;, MemoryUsage, peakUsage, =, mpBean, ., getPeakUsage, (, ), ;, if, (]
[mpBean, ., getUsage, (, ), ;, MemoryUsage, peakUsage, =, mpBean, ., getPeakUsage, (, ), ;, if, (, pretty, ), {]
[mpBean, ., getUsage, (, ), ;, MemoryUsage, peakUsage, =, mpBean, ., getPeakUsage, (, ), ;, if, (, pretty, ), {]
[), ;, MemoryUsage, peakUsage, =, mpBean, ., getPeakUsage, (, ), ;, if, (, pretty, ), {, out, ., println, (]
[), ;, MemoryUsage, peakUsage, =, mpBean, ., getPeakUsage, (, ), ;, if, (, pretty, ), {, out, ., println, (]
[MemoryUsage, peakUsage, =, mpBean, ., getPeakUsage, (, ), ;, if, (, pretty, ), {, out, ., println, (, "\tPool ", +]
[MemoryUsage, peakUsage, =, mpBean, ., getPeakUsage, (, ), ;, if, (, pretty, ), {, out, ., println, (, "\tPool ", +]
[), ;, if, (, pretty, ), {, out, ., println, (, "\tPool ", +, mpBean, ., getName, (, ), ), ;]
[if, (, pretty, ), {, out, ., println, (, "\tPool ", +, mpBean, ., getName, (, ), ), ;, writePoolMemoryUsage, (]
[pretty, ), {, out, ., println, (, "\tPool ", +, mpBean, ., getName, (, ), ), ;, writePoolMemoryUsage, (, out, ,]
[{, out, ., println, (, "\tPool ", +, mpBean, ., getName, (, ), ), ;, writePoolMemoryUsage, (, out, ,, currentUsage, ,]
[., println, (, "\tPool ", +, mpBean, ., getName, (, ), ), ;, writePoolMemoryUsage, (, out, ,, currentUsage, ,, peakUsage, ,]
[(, "\tPool ", +, mpBean, ., getName, (, ), ), ;, writePoolMemoryUsage, (, out, ,, currentUsage, ,, peakUsage, ,, null, ,]
[(, ), ), ;, writePoolMemoryUsage, (, out, ,, currentUsage, ,, peakUsage, ,, null, ,, true, ), ;, }, else, {]
[), ;, writePoolMemoryUsage, (, out, ,, currentUsage, ,, peakUsage, ,, null, ,, true, ), ;, }, else, {, writePoolMemoryUsage, (]
[writePoolMemoryUsage, (, out, ,, currentUsage, ,, peakUsage, ,, null, ,, true, ), ;, }, else, {, writePoolMemoryUsage, (, out, ,]
[out, ,, currentUsage, ,, peakUsage, ,, null, ,, true, ), ;, }, else, {, writePoolMemoryUsage, (, out, ,, currentUsage, ,]
[currentUsage, ,, peakUsage, ,, null, ,, true, ), ;, }, else, {, writePoolMemoryUsage, (, out, ,, currentUsage, ,, peakUsage, ,]
[currentUsage, ,, peakUsage, ,, null, ,, true, ), ;, }, else, {, writePoolMemoryUsage, (, out, ,, currentUsage, ,, peakUsage, ,]
[peakUsage, ,, null, ,, true, ), ;, }, else, {, writePoolMemoryUsage, (, out, ,, currentUsage, ,, peakUsage, ,, "mem-pool-", +]
[null, ,, true, ), ;, }, else, {, writePoolMemoryUsage, (, out, ,, currentUsage, ,, peakUsage, ,, "mem-pool-", +, normalizeName, (]
[null, ,, true, ), ;, }, else, {, writePoolMemoryUsage, (, out, ,, currentUsage, ,, peakUsage, ,, "mem-pool-", +, normalizeName, (]
[{, writePoolMemoryUsage, (, out, ,, currentUsage, ,, peakUsage, ,, "mem-pool-", +, normalizeName, (, mpBean, ., getName, (, ), ), ,]
[normalizeName, (, mpBean, ., getName, (, ), ), ,, false, ), ;, }, }, }, else, {, long, available, =]
[(, ), ), ,, false, ), ;, }, }, }, else, {, long, available, =, 0, ;, long, current, =]
[), ;, }, }, }, else, {, long, available, =, 0, ;, long, current, =, 0, ;, long, peak, =]
[available, =, 0, ;, long, current, =, 0, ;, long, peak, =, 0, ;, List, <, MemoryPoolMXBean, >, mpBeans, =]
[available, =, 0, ;, long, current, =, 0, ;, long, peak, =, 0, ;, List, <, MemoryPoolMXBean, >, mpBeans, =]
[=, 0, ;, List, <, MemoryPoolMXBean, >, mpBeans, =, ManagementFactory, ., getMemoryPoolMXBeans, (, ), ;, for, (, MemoryPoolMXBean, mpBean, :]
[>, mpBeans, =, ManagementFactory, ., getMemoryPoolMXBeans, (, ), ;, for, (, MemoryPoolMXBean, mpBean, :, mpBeans, ), {, MemoryUsage, currentUsage, =]
[>, mpBeans, =, ManagementFactory, ., getMemoryPoolMXBeans, (, ), ;, for, (, MemoryPoolMXBean, mpBean, :, mpBeans, ), {, MemoryUsage, currentUsage, =]
[(, ), ;, for, (, MemoryPoolMXBean, mpBean, :, mpBeans, ), {, MemoryUsage, currentUsage, =, mpBean, ., getUsage, (, ), ;]
[;, for, (, MemoryPoolMXBean, mpBean, :, mpBeans, ), {, MemoryUsage, currentUsage, =, mpBean, ., getUsage, (, ), ;, available, +=]
[;, for, (, MemoryPoolMXBean, mpBean, :, mpBeans, ), {, MemoryUsage, currentUsage, =, mpBean, ., getUsage, (, ), ;, available, +=]
[mpBeans, ), {, MemoryUsage, currentUsage, =, mpBean, ., getUsage, (, ), ;, available, +=, currentUsage, ., getMax, (, ), ;]
[{, MemoryUsage, currentUsage, =, mpBean, ., getUsage, (, ), ;, available, +=, currentUsage, ., getMax, (, ), ;, current, +=]
[{, MemoryUsage, currentUsage, =, mpBean, ., getUsage, (, ), ;, available, +=, currentUsage, ., getMax, (, ), ;, current, +=]
[;, available, +=, currentUsage, ., getMax, (, ), ;, current, +=, currentUsage, ., getUsed, (, ), ;, MemoryUsage, peakUsage, =]
[;, available, +=, currentUsage, ., getMax, (, ), ;, current, +=, currentUsage, ., getUsed, (, ), ;, MemoryUsage, peakUsage, =]
[(, ), ;, current, +=, currentUsage, ., getUsed, (, ), ;, MemoryUsage, peakUsage, =, mpBean, ., getPeakUsage, (, ), ;]
[;, current, +=, currentUsage, ., getUsed, (, ), ;, MemoryUsage, peakUsage, =, mpBean, ., getPeakUsage, (, ), ;, peak, +=]
[;, current, +=, currentUsage, ., getUsed, (, ), ;, MemoryUsage, peakUsage, =, mpBean, ., getPeakUsage, (, ), ;, peak, +=]
[peakUsage, =, mpBean, ., getPeakUsage, (, ), ;, peak, +=, peakUsage, ., getUsed, (, ), ;, }, MemoryUsage, summaryUsage, =]
[., getPeakUsage, (, ), ;, peak, +=, peakUsage, ., getUsed, (, ), ;, }, MemoryUsage, summaryUsage, =, new, MemoryUsage, (]
[(, ), ;, peak, +=, peakUsage, ., getUsed, (, ), ;, }, MemoryUsage, summaryUsage, =, new, MemoryUsage, (, 0, ,]
[;, peak, +=, peakUsage, ., getUsed, (, ), ;, }, MemoryUsage, summaryUsage, =, new, MemoryUsage, (, 0, ,, current, ,]
[+=, peakUsage, ., getUsed, (, ), ;, }, MemoryUsage, summaryUsage, =, new, MemoryUsage, (, 0, ,, current, ,, current, ,]
[;, }, MemoryUsage, summaryUsage, =, new, MemoryUsage, (, 0, ,, current, ,, current, ,, available, ), ;, MemoryUsage, summaryPeakUsage, =]
[summaryUsage, =, new, MemoryUsage, (, 0, ,, current, ,, current, ,, available, ), ;, MemoryUsage, summaryPeakUsage, =, new, MemoryUsage, (]
[new, MemoryUsage, (, 0, ,, current, ,, current, ,, available, ), ;, MemoryUsage, summaryPeakUsage, =, new, MemoryUsage, (, 0, ,]
[(, 0, ,, current, ,, current, ,, available, ), ;, MemoryUsage, summaryPeakUsage, =, new, MemoryUsage, (, 0, ,, peak, ,]
[,, current, ,, current, ,, available, ), ;, MemoryUsage, summaryPeakUsage, =, new, MemoryUsage, (, 0, ,, peak, ,, peak, ,]
[available, ), ;, MemoryUsage, summaryPeakUsage, =, new, MemoryUsage, (, 0, ,, peak, ,, peak, ,, peak, ), ;, if, (]
[MemoryUsage, summaryPeakUsage, =, new, MemoryUsage, (, 0, ,, peak, ,, peak, ,, peak, ), ;, if, (, pretty, ), {]
[MemoryUsage, summaryPeakUsage, =, new, MemoryUsage, (, 0, ,, peak, ,, peak, ,, peak, ), ;, if, (, pretty, ), {]
[MemoryUsage, (, 0, ,, peak, ,, peak, ,, peak, ), ;, if, (, pretty, ), {, out, ., format, (]
[0, ,, peak, ,, peak, ,, peak, ), ;, if, (, pretty, ), {, out, ., format, (, "\tAggregate of %d memory pools\n", ,]
[0, ,, peak, ,, peak, ,, peak, ), ;, if, (, pretty, ), {, out, ., format, (, "\tAggregate of %d memory pools\n", ,]
[), ;, if, (, pretty, ), {, out, ., format, (, "\tAggregate of %d memory pools\n", ,, mpBeans, ., size, (, ), ), ;]
[if, (, pretty, ), {, out, ., format, (, "\tAggregate of %d memory pools\n", ,, mpBeans, ., size, (, ), ), ;, writePoolMemoryUsage, (]
[pretty, ), {, out, ., format, (, "\tAggregate of %d memory pools\n", ,, mpBeans, ., size, (, ), ), ;, writePoolMemoryUsage, (, out, ,]
[{, out, ., format, (, "\tAggregate of %d memory pools\n", ,, mpBeans, ., size, (, ), ), ;, writePoolMemoryUsage, (, out, ,, summaryUsage, ,]
[., format, (, "\tAggregate of %d memory pools\n", ,, mpBeans, ., size, (, ), ), ;, writePoolMemoryUsage, (, out, ,, summaryUsage, ,, summaryPeakUsage, ,]
[(, "\tAggregate of %d memory pools\n", ,, mpBeans, ., size, (, ), ), ;, writePoolMemoryUsage, (, out, ,, summaryUsage, ,, summaryPeakUsage, ,, null, ,]
[(, ), ), ;, writePoolMemoryUsage, (, out, ,, summaryUsage, ,, summaryPeakUsage, ,, null, ,, true, ), ;, }, else, {]
[), ;, writePoolMemoryUsage, (, out, ,, summaryUsage, ,, summaryPeakUsage, ,, null, ,, true, ), ;, }, else, {, writePoolMemoryUsage, (]
[writePoolMemoryUsage, (, out, ,, summaryUsage, ,, summaryPeakUsage, ,, null, ,, true, ), ;, }, else, {, writePoolMemoryUsage, (, out, ,]
[out, ,, summaryUsage, ,, summaryPeakUsage, ,, null, ,, true, ), ;, }, else, {, writePoolMemoryUsage, (, out, ,, summaryUsage, ,]
[summaryUsage, ,, summaryPeakUsage, ,, null, ,, true, ), ;, }, else, {, writePoolMemoryUsage, (, out, ,, summaryUsage, ,, summaryPeakUsage, ,]
[summaryPeakUsage, ,, null, ,, true, ), ;, }, else, {, writePoolMemoryUsage, (, out, ,, summaryUsage, ,, summaryPeakUsage, ,, "mem", ,]
[static, void, writeGarbageCollectionStats, (, PrintStream, out, ,, boolean, verbose, ,, boolean, pretty, ), {, List, <, GarbageCollectorMXBean, >, gcBeans, =]
[static, void, writeGarbageCollectionStats, (, PrintStream, out, ,, boolean, verbose, ,, boolean, pretty, ), {, List, <, GarbageCollectorMXBean, >, gcBeans, =]
[verbose, ,, boolean, pretty, ), {, List, <, GarbageCollectorMXBean, >, gcBeans, =, ManagementFactory, ., getGarbageCollectorMXBeans, (, ), ;, if, (]
[{, List, <, GarbageCollectorMXBean, >, gcBeans, =, ManagementFactory, ., getGarbageCollectorMXBeans, (, ), ;, if, (, verbose, ), {, if, (]
[GarbageCollectorMXBean, >, gcBeans, =, ManagementFactory, ., getGarbageCollectorMXBeans, (, ), ;, if, (, verbose, ), {, if, (, pretty, ), {]
[GarbageCollectorMXBean, >, gcBeans, =, ManagementFactory, ., getGarbageCollectorMXBeans, (, ), ;, if, (, verbose, ), {, if, (, pretty, ), {]
[ManagementFactory, ., getGarbageCollectorMXBeans, (, ), ;, if, (, verbose, ), {, if, (, pretty, ), {, out, ., println, (]
[verbose, ), {, if, (, pretty, ), {, out, ., println, (, "\nGarbage collection stats", ), ;, for, (, GarbageCollectorMXBean, gcBean, :]
[if, (, pretty, ), {, out, ., println, (, "\nGarbage collection stats", ), ;, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {]
[if, (, pretty, ), {, out, ., println, (, "\nGarbage collection stats", ), ;, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {]
[{, out, ., println, (, "\nGarbage collection stats", ), ;, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, out, ., println, (]
[{, out, ., println, (, "\nGarbage collection stats", ), ;, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, out, ., println, (]
[., println, (, "\nGarbage collection stats", ), ;, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, out, ., println, (, "\tCollector ", +]
[., println, (, "\nGarbage collection stats", ), ;, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, out, ., println, (, "\tCollector ", +]
[(, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, out, ., println, (, "\tCollector ", +, gcBean, ., getName, (, ), ), ;]
[(, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, out, ., println, (, "\tCollector ", +, gcBean, ., getName, (, ), ), ;]
[gcBeans, ), {, out, ., println, (, "\tCollector ", +, gcBean, ., getName, (, ), ), ;, out, ., format, (]
[{, out, ., println, (, "\tCollector ", +, gcBean, ., getName, (, ), ), ;, out, ., format, (, "\t\tcollection count   : %d\n", ,]
[{, out, ., println, (, "\tCollector ", +, gcBean, ., getName, (, ), ), ;, out, ., format, (, "\t\tcollection count   : %d\n", ,]
[gcBean, ., getName, (, ), ), ;, out, ., format, (, "\t\tcollection count   : %d\n", ,, gcBean, ., getCollectionCount, (, ), ), ;]
[gcBean, ., getName, (, ), ), ;, out, ., format, (, "\t\tcollection count   : %d\n", ,, gcBean, ., getCollectionCount, (, ), ), ;]
[), ), ;, out, ., format, (, "\t\tcollection count   : %d\n", ,, gcBean, ., getCollectionCount, (, ), ), ;, out, ., format, (]
[;, out, ., format, (, "\t\tcollection count   : %d\n", ,, gcBean, ., getCollectionCount, (, ), ), ;, out, ., format, (, "\t\tcollection time    : %d ms\n", ,]
[;, out, ., format, (, "\t\tcollection count   : %d\n", ,, gcBean, ., getCollectionCount, (, ), ), ;, out, ., format, (, "\t\tcollection time    : %d ms\n", ,]
[format, (, "\t\tcollection time    : %d ms\n", ,, gcBean, ., getCollectionTime, (, ), ), ;, }, }, else, {, for, (, GarbageCollectorMXBean, gcBean, :]
[getCollectionTime, (, ), ), ;, }, }, else, {, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, String, name, =]
[), ), ;, }, }, else, {, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, String, name, =, normalizeName, (]
[), ), ;, }, }, else, {, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, String, name, =, normalizeName, (]
[for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, String, name, =, normalizeName, (, gcBean, ., getName, (, ), ), ;]
[for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, String, name, =, normalizeName, (, gcBean, ., getName, (, ), ), ;]
[:, gcBeans, ), {, String, name, =, normalizeName, (, gcBean, ., getName, (, ), ), ;, out, ., println, (]
[), {, String, name, =, normalizeName, (, gcBean, ., getName, (, ), ), ;, out, ., println, (, normalizeTabularColonPos, (]
[), {, String, name, =, normalizeName, (, gcBean, ., getName, (, ), ), ;, out, ., println, (, normalizeTabularColonPos, (]
[=, normalizeName, (, gcBean, ., getName, (, ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[=, normalizeName, (, gcBean, ., getName, (, ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[=, normalizeName, (, gcBean, ., getName, (, ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[(, gcBean, ., getName, (, ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +]
[., getName, (, ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +, name, +]
[(, ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +, name, +, "-collection-count : %d", ,]
[(, ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +, name, +, "-collection-count : %d", ,]
[(, String, ., format, (, "gc-", +, name, +, "-collection-count : %d", ,, gcBean, ., getCollectionCount, (, ), ), ), ), ;]
[(, String, ., format, (, "gc-", +, name, +, "-collection-count : %d", ,, gcBean, ., getCollectionCount, (, ), ), ), ), ;]
[(, "gc-", +, name, +, "-collection-count : %d", ,, gcBean, ., getCollectionCount, (, ), ), ), ), ;, out, ., println, (]
[+, name, +, "-collection-count : %d", ,, gcBean, ., getCollectionCount, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (]
[+, name, +, "-collection-count : %d", ,, gcBean, ., getCollectionCount, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (]
[,, gcBean, ., getCollectionCount, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[,, gcBean, ., getCollectionCount, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[,, gcBean, ., getCollectionCount, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[., getCollectionCount, (, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +]
[(, ), ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +, name, +]
[), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +, name, +, "-collection-time-ms : %d", ,]
[), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +, name, +, "-collection-time-ms : %d", ,]
[+, "-collection-time-ms : %d", ,, gcBean, ., getCollectionTime, (, ), ), ), ), ;, }, }, }, else, {, long, collectionCount, =]
[getCollectionTime, (, ), ), ), ), ;, }, }, }, else, {, long, collectionCount, =, 0, ;, long, collectionTime, =]
[), ;, }, }, }, else, {, long, collectionCount, =, 0, ;, long, collectionTime, =, 0, ;, int, collectorCount, =]
[), ;, }, }, }, else, {, long, collectionCount, =, 0, ;, long, collectionTime, =, 0, ;, int, collectorCount, =]
[;, long, collectionTime, =, 0, ;, int, collectorCount, =, gcBeans, ., size, (, ), ;, for, (, GarbageCollectorMXBean, gcBean, :]
[=, 0, ;, int, collectorCount, =, gcBeans, ., size, (, ), ;, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {]
[;, int, collectorCount, =, gcBeans, ., size, (, ), ;, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, collectionCount, +=]
[;, int, collectorCount, =, gcBeans, ., size, (, ), ;, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, collectionCount, +=]
[size, (, ), ;, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, collectionCount, +=, gcBean, ., getCollectionCount, (, ), ;]
[), ;, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, collectionCount, +=, gcBean, ., getCollectionCount, (, ), ;, collectionTime, +=]
[), ;, for, (, GarbageCollectorMXBean, gcBean, :, gcBeans, ), {, collectionCount, +=, gcBean, ., getCollectionCount, (, ), ;, collectionTime, +=]
[{, collectionCount, +=, gcBean, ., getCollectionCount, (, ), ;, collectionTime, +=, gcBean, ., getCollectionTime, (, ), ;, }, if, (]
[gcBean, ., getCollectionCount, (, ), ;, collectionTime, +=, gcBean, ., getCollectionTime, (, ), ;, }, if, (, pretty, ), {]
[gcBean, ., getCollectionCount, (, ), ;, collectionTime, +=, gcBean, ., getCollectionTime, (, ), ;, }, if, (, pretty, ), {]
[), ;, collectionTime, +=, gcBean, ., getCollectionTime, (, ), ;, }, if, (, pretty, ), {, out, ., println, (]
[+=, gcBean, ., getCollectionTime, (, ), ;, }, if, (, pretty, ), {, out, ., println, (, "\nGarbage collection stats", ), ;]
[+=, gcBean, ., getCollectionTime, (, ), ;, }, if, (, pretty, ), {, out, ., println, (, "\nGarbage collection stats", ), ;]
[(, ), ;, }, if, (, pretty, ), {, out, ., println, (, "\nGarbage collection stats", ), ;, out, ., format, (]
[;, }, if, (, pretty, ), {, out, ., println, (, "\nGarbage collection stats", ), ;, out, ., format, (, "\tAggregate of %d collectors\n", ,]
[(, pretty, ), {, out, ., println, (, "\nGarbage collection stats", ), ;, out, ., format, (, "\tAggregate of %d collectors\n", ,, collectorCount, ), ;]
[(, pretty, ), {, out, ., println, (, "\nGarbage collection stats", ), ;, out, ., format, (, "\tAggregate of %d collectors\n", ,, collectorCount, ), ;]
[out, ., println, (, "\nGarbage collection stats", ), ;, out, ., format, (, "\tAggregate of %d collectors\n", ,, collectorCount, ), ;, out, ., format, (]
[println, (, "\nGarbage collection stats", ), ;, out, ., format, (, "\tAggregate of %d collectors\n", ,, collectorCount, ), ;, out, ., format, (, "\t\tcollection count   : %d\n", ,]
[), ;, out, ., format, (, "\tAggregate of %d collectors\n", ,, collectorCount, ), ;, out, ., format, (, "\t\tcollection count   : %d\n", ,, collectionCount, ), ;]
[), ;, out, ., format, (, "\tAggregate of %d collectors\n", ,, collectorCount, ), ;, out, ., format, (, "\t\tcollection count   : %d\n", ,, collectionCount, ), ;]
[format, (, "\tAggregate of %d collectors\n", ,, collectorCount, ), ;, out, ., format, (, "\t\tcollection count   : %d\n", ,, collectionCount, ), ;, out, ., format, (]
["\tAggregate of %d collectors\n", ,, collectorCount, ), ;, out, ., format, (, "\t\tcollection count   : %d\n", ,, collectionCount, ), ;, out, ., format, (, "\t\tcollection time    : %d ms\n", ,]
["\t\tcollection count   : %d\n", ,, collectionCount, ), ;, out, ., format, (, "\t\tcollection time    : %d ms\n", ,, collectionTime, ), ;, }, else, {, String, name, =]
[collectionCount, ), ;, out, ., format, (, "\t\tcollection time    : %d ms\n", ,, collectionTime, ), ;, }, else, {, String, name, =, normalizeName, (]
[out, ., format, (, "\t\tcollection time    : %d ms\n", ,, collectionTime, ), ;, }, else, {, String, name, =, normalizeName, (, "aggregate", ), ;]
[out, ., format, (, "\t\tcollection time    : %d ms\n", ,, collectionTime, ), ;, }, else, {, String, name, =, normalizeName, (, "aggregate", ), ;]
["\t\tcollection time    : %d ms\n", ,, collectionTime, ), ;, }, else, {, String, name, =, normalizeName, (, "aggregate", ), ;, out, ., println, (]
[collectionTime, ), ;, }, else, {, String, name, =, normalizeName, (, "aggregate", ), ;, out, ., println, (, normalizeTabularColonPos, (]
[collectionTime, ), ;, }, else, {, String, name, =, normalizeName, (, "aggregate", ), ;, out, ., println, (, normalizeTabularColonPos, (]
[else, {, String, name, =, normalizeName, (, "aggregate", ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[else, {, String, name, =, normalizeName, (, "aggregate", ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[else, {, String, name, =, normalizeName, (, "aggregate", ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[String, name, =, normalizeName, (, "aggregate", ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +]
[=, normalizeName, (, "aggregate", ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +, name, +]
[(, "aggregate", ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +, name, +, "-collection-count : %d", ,]
[., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +, name, +, "-collection-count : %d", ,, collectionCount, ), ), ), ;]
[., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +, name, +, "-collection-count : %d", ,, collectionCount, ), ), ), ;]
[(, String, ., format, (, "gc-", +, name, +, "-collection-count : %d", ,, collectionCount, ), ), ), ;, out, ., println, (]
[., format, (, "gc-", +, name, +, "-collection-count : %d", ,, collectionCount, ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (]
[., format, (, "gc-", +, name, +, "-collection-count : %d", ,, collectionCount, ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (]
[+, name, +, "-collection-count : %d", ,, collectionCount, ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[+, name, +, "-collection-count : %d", ,, collectionCount, ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[+, name, +, "-collection-count : %d", ,, collectionCount, ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (]
[+, "-collection-count : %d", ,, collectionCount, ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +]
[,, collectionCount, ), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +, name, +]
[), ), ), ;, out, ., println, (, normalizeTabularColonPos, (, String, ., format, (, "gc-", +, name, +, "-collection-time-ms : %d", ,]
["-collection-time-ms : %d", ,, collectionTime, ), ), ), ;, }, }, }, private, static, String, normalizeName, (, String, name, ), {, return]
["-collection-time-ms : %d", ,, collectionTime, ), ), ), ;, }, }, }, private, static, String, normalizeName, (, String, name, ), {, return]
["-collection-time-ms : %d", ,, collectionTime, ), ), ), ;, }, }, }, private, static, String, normalizeName, (, String, name, ), {, return]
[), ), ;, }, }, }, private, static, String, normalizeName, (, String, name, ), {, return, name, ., replace, (]
[;, }, }, }, private, static, String, normalizeName, (, String, name, ), {, return, name, ., replace, (, " ", ,]
["_", ), ., toLowerCase, (, ), ;, }, private, static, String, normalizeTabularColonPos, (, String, string, ), {, StringBuilder, sb, =]
[toLowerCase, (, ), ;, }, private, static, String, normalizeTabularColonPos, (, String, string, ), {, StringBuilder, sb, =, new, StringBuilder, (]
[static, String, normalizeTabularColonPos, (, String, string, ), {, StringBuilder, sb, =, new, StringBuilder, (, string, ), ;, int, index, =]
[static, String, normalizeTabularColonPos, (, String, string, ), {, StringBuilder, sb, =, new, StringBuilder, (, string, ), ;, int, index, =]
[String, string, ), {, StringBuilder, sb, =, new, StringBuilder, (, string, ), ;, int, index, =, sb, ., indexOf, (]
[=, new, StringBuilder, (, string, ), ;, int, index, =, sb, ., indexOf, (, ":", ), ;, for, (, ;]
[=, new, StringBuilder, (, string, ), ;, int, index, =, sb, ., indexOf, (, ":", ), ;, for, (, ;]
[StringBuilder, (, string, ), ;, int, index, =, sb, ., indexOf, (, ":", ), ;, for, (, ;, index, <]
[string, ), ;, int, index, =, sb, ., indexOf, (, ":", ), ;, for, (, ;, index, <, TABULAR_COLON_POS, ;]
[), ;, int, index, =, sb, ., indexOf, (, ":", ), ;, for, (, ;, index, <, TABULAR_COLON_POS, ;, ++]
[index, =, sb, ., indexOf, (, ":", ), ;, for, (, ;, index, <, TABULAR_COLON_POS, ;, ++, index, ), {]
[index, =, sb, ., indexOf, (, ":", ), ;, for, (, ;, index, <, TABULAR_COLON_POS, ;, ++, index, ), {]
[indexOf, (, ":", ), ;, for, (, ;, index, <, TABULAR_COLON_POS, ;, ++, index, ), {, sb, ., insert, (]
[":", ), ;, for, (, ;, index, <, TABULAR_COLON_POS, ;, ++, index, ), {, sb, ., insert, (, index, ,]
[;, index, <, TABULAR_COLON_POS, ;, ++, index, ), {, sb, ., insert, (, index, ,, ' ', ), ;, }, return]
[;, index, <, TABULAR_COLON_POS, ;, ++, index, ), {, sb, ., insert, (, index, ,, ' ', ), ;, }, return]
[}, return, sb, ., toString, (, ), ;, }, private, static, String, formatBytes, (, long, numBytes, ), {, if, (]
[}, return, sb, ., toString, (, ), ;, }, private, static, String, formatBytes, (, long, numBytes, ), {, if, (]
[sb, ., toString, (, ), ;, }, private, static, String, formatBytes, (, long, numBytes, ), {, if, (, numBytes, <]
[), ;, }, private, static, String, formatBytes, (, long, numBytes, ), {, if, (, numBytes, <, ONE_KILO_BYTE, ), {, return]
[), ;, }, private, static, String, formatBytes, (, long, numBytes, ), {, if, (, numBytes, <, ONE_KILO_BYTE, ), {, return]
[static, String, formatBytes, (, long, numBytes, ), {, if, (, numBytes, <, ONE_KILO_BYTE, ), {, return, String, ., format, (]
[formatBytes, (, long, numBytes, ), {, if, (, numBytes, <, ONE_KILO_BYTE, ), {, return, String, ., format, (, "%d B", ,]
[(, numBytes, <, ONE_KILO_BYTE, ), {, return, String, ., format, (, "%d B", ,, numBytes, ), ;, }, else, if, (]
[(, numBytes, <, ONE_KILO_BYTE, ), {, return, String, ., format, (, "%d B", ,, numBytes, ), ;, }, else, if, (]
[<, ONE_KILO_BYTE, ), {, return, String, ., format, (, "%d B", ,, numBytes, ), ;, }, else, if, (, numBytes, <]
[return, String, ., format, (, "%d B", ,, numBytes, ), ;, }, else, if, (, numBytes, <, ONE_MEGA_BYTE, ), {, return]
[return, String, ., format, (, "%d B", ,, numBytes, ), ;, }, else, if, (, numBytes, <, ONE_MEGA_BYTE, ), {, return]
[(, "%d B", ,, numBytes, ), ;, }, else, if, (, numBytes, <, ONE_MEGA_BYTE, ), {, return, String, ., format, (]
[,, numBytes, ), ;, }, else, if, (, numBytes, <, ONE_MEGA_BYTE, ), {, return, String, ., format, (, "%d KB", ,]
[,, numBytes, ), ;, }, else, if, (, numBytes, <, ONE_MEGA_BYTE, ), {, return, String, ., format, (, "%d KB", ,]
[), ;, }, else, if, (, numBytes, <, ONE_MEGA_BYTE, ), {, return, String, ., format, (, "%d KB", ,, numBytes, /]
[<, ONE_MEGA_BYTE, ), {, return, String, ., format, (, "%d KB", ,, numBytes, /, ONE_KILO_BYTE, ), ;, }, else, if, (]
[<, ONE_MEGA_BYTE, ), {, return, String, ., format, (, "%d KB", ,, numBytes, /, ONE_KILO_BYTE, ), ;, }, else, if, (]
[), {, return, String, ., format, (, "%d KB", ,, numBytes, /, ONE_KILO_BYTE, ), ;, }, else, if, (, numBytes, <]
[., format, (, "%d KB", ,, numBytes, /, ONE_KILO_BYTE, ), ;, }, else, if, (, numBytes, <, ONE_GIGA_BYTE, ), {, return]
[., format, (, "%d KB", ,, numBytes, /, ONE_KILO_BYTE, ), ;, }, else, if, (, numBytes, <, ONE_GIGA_BYTE, ), {, return]
[,, numBytes, /, ONE_KILO_BYTE, ), ;, }, else, if, (, numBytes, <, ONE_GIGA_BYTE, ), {, return, String, ., format, (]
[/, ONE_KILO_BYTE, ), ;, }, else, if, (, numBytes, <, ONE_GIGA_BYTE, ), {, return, String, ., format, (, "%d MB", ,]
[/, ONE_KILO_BYTE, ), ;, }, else, if, (, numBytes, <, ONE_GIGA_BYTE, ), {, return, String, ., format, (, "%d MB", ,]
[), ;, }, else, if, (, numBytes, <, ONE_GIGA_BYTE, ), {, return, String, ., format, (, "%d MB", ,, numBytes, /]
[<, ONE_GIGA_BYTE, ), {, return, String, ., format, (, "%d MB", ,, numBytes, /, ONE_MEGA_BYTE, ), ;, }, else, {, return]
[<, ONE_GIGA_BYTE, ), {, return, String, ., format, (, "%d MB", ,, numBytes, /, ONE_MEGA_BYTE, ), ;, }, else, {, return]
[return, String, ., format, (, "%d MB", ,, numBytes, /, ONE_MEGA_BYTE, ), ;, }, else, {, return, String, ., format, (]
[., format, (, "%d MB", ,, numBytes, /, ONE_MEGA_BYTE, ), ;, }, else, {, return, String, ., format, (, "%d GB", ,]
[., format, (, "%d MB", ,, numBytes, /, ONE_MEGA_BYTE, ), ;, }, else, {, return, String, ., format, (, "%d GB", ,]
[(, "%d MB", ,, numBytes, /, ONE_MEGA_BYTE, ), ;, }, else, {, return, String, ., format, (, "%d GB", ,, numBytes, /]
