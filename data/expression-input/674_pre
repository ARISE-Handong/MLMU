[private, final, AbstractCompiler, compiler, ;, private, final, CodingConvention, codingConvention, ;, private, final, CheckLevel, level, ;, static, final, DiagnosticType, MISSING_REQUIRE_WARNING, =]
[private, final, AbstractCompiler, compiler, ;, private, final, CodingConvention, codingConvention, ;, private, final, CheckLevel, level, ;, static, final, DiagnosticType, MISSING_REQUIRE_WARNING, =]
[;, private, final, CodingConvention, codingConvention, ;, private, final, CheckLevel, level, ;, static, final, DiagnosticType, MISSING_REQUIRE_WARNING, =, DiagnosticType, ., disabled, (]
[final, CodingConvention, codingConvention, ;, private, final, CheckLevel, level, ;, static, final, DiagnosticType, MISSING_REQUIRE_WARNING, =, DiagnosticType, ., disabled, (, "JSC_MISSING_REQUIRE_WARNING", ,]
[MISSING_REQUIRE_WARNING, =, DiagnosticType, ., disabled, (, "JSC_MISSING_REQUIRE_WARNING", ,, "''{0}'' used but not goog.require''d", ), ;, CheckRequiresForConstructors, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {]
[MISSING_REQUIRE_WARNING, =, DiagnosticType, ., disabled, (, "JSC_MISSING_REQUIRE_WARNING", ,, "''{0}'' used but not goog.require''d", ), ;, CheckRequiresForConstructors, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {]
[disabled, (, "JSC_MISSING_REQUIRE_WARNING", ,, "''{0}'' used but not goog.require''d", ), ;, CheckRequiresForConstructors, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =]
["JSC_MISSING_REQUIRE_WARNING", ,, "''{0}'' used but not goog.require''d", ), ;, CheckRequiresForConstructors, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;]
["JSC_MISSING_REQUIRE_WARNING", ,, "''{0}'' used but not goog.require''d", ), ;, CheckRequiresForConstructors, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;]
[;, CheckRequiresForConstructors, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., codingConvention, =]
[;, CheckRequiresForConstructors, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., codingConvention, =]
[CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;]
[CheckLevel, level, ), {, this, ., compiler, =, compiler, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;]
[this, ., compiler, =, compiler, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., level, =]
[=, level, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Callback, callback, =]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Callback, callback, =, new, CheckRequiresForConstructorsCallback, (, ), ;]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Callback, callback, =, new, CheckRequiresForConstructorsCallback, (, ), ;]
[process, (, Node, externs, ,, Node, root, ), {, Callback, callback, =, new, CheckRequiresForConstructorsCallback, (, ), ;, new, NodeTraversal, (]
[Node, externs, ,, Node, root, ), {, Callback, callback, =, new, CheckRequiresForConstructorsCallback, (, ), ;, new, NodeTraversal, (, compiler, ,]
[), {, Callback, callback, =, new, CheckRequiresForConstructorsCallback, (, ), ;, new, NodeTraversal, (, compiler, ,, callback, ), ., traverseRoots, (]
[Callback, callback, =, new, CheckRequiresForConstructorsCallback, (, ), ;, new, NodeTraversal, (, compiler, ,, callback, ), ., traverseRoots, (, externs, ,]
[root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, Callback, callback, =]
[Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, Callback, callback, =, new, CheckRequiresForConstructorsCallback, (, ), ;]
[Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, Callback, callback, =, new, CheckRequiresForConstructorsCallback, (, ), ;]
[hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, Callback, callback, =, new, CheckRequiresForConstructorsCallback, (, ), ;, new, NodeTraversal, (]
[Node, scriptRoot, ,, Node, originalRoot, ), {, Callback, callback, =, new, CheckRequiresForConstructorsCallback, (, ), ;, new, NodeTraversal, (, compiler, ,]
[), {, Callback, callback, =, new, CheckRequiresForConstructorsCallback, (, ), ;, new, NodeTraversal, (, compiler, ,, callback, ), ., traverseWithScope, (]
[Callback, callback, =, new, CheckRequiresForConstructorsCallback, (, ), ;, new, NodeTraversal, (, compiler, ,, callback, ), ., traverseWithScope, (, scriptRoot, ,]
[Callback, callback, =, new, CheckRequiresForConstructorsCallback, (, ), ;, new, NodeTraversal, (, compiler, ,, callback, ), ., traverseWithScope, (, scriptRoot, ,]
[CheckRequiresForConstructorsCallback, (, ), ;, new, NodeTraversal, (, compiler, ,, callback, ), ., traverseWithScope, (, scriptRoot, ,, SyntacticScopeCreator, ., generateUntypedTopScope, (]
[,, SyntacticScopeCreator, ., generateUntypedTopScope, (, compiler, ), ), ;, }, private, static, boolean, isClassName, (, String, name, ), {, return]
[SyntacticScopeCreator, ., generateUntypedTopScope, (, compiler, ), ), ;, }, private, static, boolean, isClassName, (, String, name, ), {, return, (]
[SyntacticScopeCreator, ., generateUntypedTopScope, (, compiler, ), ), ;, }, private, static, boolean, isClassName, (, String, name, ), {, return, (]
[SyntacticScopeCreator, ., generateUntypedTopScope, (, compiler, ), ), ;, }, private, static, boolean, isClassName, (, String, name, ), {, return, (]
[SyntacticScopeCreator, ., generateUntypedTopScope, (, compiler, ), ), ;, }, private, static, boolean, isClassName, (, String, name, ), {, return, (]
[SyntacticScopeCreator, ., generateUntypedTopScope, (, compiler, ), ), ;, }, private, static, boolean, isClassName, (, String, name, ), {, return, (]
[generateUntypedTopScope, (, compiler, ), ), ;, }, private, static, boolean, isClassName, (, String, name, ), {, return, (, name, !=]
[compiler, ), ), ;, }, private, static, boolean, isClassName, (, String, name, ), {, return, (, name, !=, null, &&]
[compiler, ), ), ;, }, private, static, boolean, isClassName, (, String, name, ), {, return, (, name, !=, null, &&]
[compiler, ), ), ;, }, private, static, boolean, isClassName, (, String, name, ), {, return, (, name, !=, null, &&]
[static, boolean, isClassName, (, String, name, ), {, return, (, name, !=, null, &&, name, ., length, (, ), >]
[isClassName, (, String, name, ), {, return, (, name, !=, null, &&, name, ., length, (, ), >, 1, &&]
[isClassName, (, String, name, ), {, return, (, name, !=, null, &&, name, ., length, (, ), >, 1, &&]
[), {, return, (, name, !=, null, &&, name, ., length, (, ), >, 1, &&, Character, ., isUpperCase, (]
[), {, return, (, name, !=, null, &&, name, ., length, (, ), >, 1, &&, Character, ., isUpperCase, (]
[name, !=, null, &&, name, ., length, (, ), >, 1, &&, Character, ., isUpperCase, (, name, ., charAt, (]
[name, ., length, (, ), >, 1, &&, Character, ., isUpperCase, (, name, ., charAt, (, 0, ), ), &&]
[., length, (, ), >, 1, &&, Character, ., isUpperCase, (, name, ., charAt, (, 0, ), ), &&, !]
[., length, (, ), >, 1, &&, Character, ., isUpperCase, (, name, ., charAt, (, 0, ), ), &&, !]
[>, 1, &&, Character, ., isUpperCase, (, name, ., charAt, (, 0, ), ), &&, !, name, ., equals, (]
[>, 1, &&, Character, ., isUpperCase, (, name, ., charAt, (, 0, ), ), &&, !, name, ., equals, (]
[(, ), ), ), ;, }, private, static, String, getOutermostClassName, (, String, className, ), {, for, (, String, part, :]
[(, ), ), ), ;, }, private, static, String, getOutermostClassName, (, String, className, ), {, for, (, String, part, :]
[;, }, private, static, String, getOutermostClassName, (, String, className, ), {, for, (, String, part, :, className, ., split, (]
[(, String, className, ), {, for, (, String, part, :, className, ., split, (, "\\.", ), ), {, if, (]
[className, ), {, for, (, String, part, :, className, ., split, (, "\\.", ), ), {, if, (, isClassName, (]
[String, part, :, className, ., split, (, "\\.", ), ), {, if, (, isClassName, (, part, ), ), {, return]
[String, part, :, className, ., split, (, "\\.", ), ), {, if, (, isClassName, (, part, ), ), {, return]
[., split, (, "\\.", ), ), {, if, (, isClassName, (, part, ), ), {, return, className, ., substring, (]
[(, "\\.", ), ), {, if, (, isClassName, (, part, ), ), {, return, className, ., substring, (, 0, ,]
[(, "\\.", ), ), {, if, (, isClassName, (, part, ), ), {, return, className, ., substring, (, 0, ,]
[(, "\\.", ), ), {, if, (, isClassName, (, part, ), ), {, return, className, ., substring, (, 0, ,]
[{, if, (, isClassName, (, part, ), ), {, return, className, ., substring, (, 0, ,, className, ., indexOf, (]
[isClassName, (, part, ), ), {, return, className, ., substring, (, 0, ,, className, ., indexOf, (, part, ), +]
[isClassName, (, part, ), ), {, return, className, ., substring, (, 0, ,, className, ., indexOf, (, part, ), +]
[(, 0, ,, className, ., indexOf, (, part, ), +, part, ., length, (, ), ), ;, }, }, return]
[}, }, return, null, ;, }, private, class, CheckRequiresForConstructorsCallback, implements, Callback, {, private, final, List, <, String, >, constructors, =]
[}, }, return, null, ;, }, private, class, CheckRequiresForConstructorsCallback, implements, Callback, {, private, final, List, <, String, >, constructors, =]
[List, <, String, >, constructors, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, String, >, requires, =]
[List, <, String, >, constructors, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, String, >, requires, =]
[List, <, String, >, requires, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Node, >, newNodes, =]
[List, <, String, >, requires, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Node, >, newNodes, =]
[(, ), ;, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return]
[(, ), ;, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return]
[(, ), ;, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return]
[(, ), ;, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return]
[;, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return, parent, ==]
[Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||]
[public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||, !]
[public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||, !]
[,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||, !, parent, ., isScript, (, ), ||]
[Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||, !, parent, ., isScript, (, ), ||, !]
[Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||, !, parent, ., isScript, (, ), ||, !]
[Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||, !, parent, ., isScript, (, ), ||, !]
[Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, info, ;, switch, (]
[Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, info, ;, switch, (]
[Node, n, ,, Node, parent, ), {, JSDocInfo, info, ;, switch, (, n, ., getType, (, ), ), {, case]
[Node, n, ,, Node, parent, ), {, JSDocInfo, info, ;, switch, (, n, ., getType, (, ), ), {, case]
[parent, ), {, JSDocInfo, info, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., ASSIGN, :]
[{, JSDocInfo, info, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, info, =]
[;, switch, (, n, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, info, =, (, JSDocInfo, )]
[;, switch, (, n, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, info, =, (, JSDocInfo, )]
[., getType, (, ), ), {, case, Token, ., ASSIGN, :, info, =, (, JSDocInfo, ), n, ., getProp, (]
[., getType, (, ), ), {, case, Token, ., ASSIGN, :, info, =, (, JSDocInfo, ), n, ., getProp, (]
[Token, ., ASSIGN, :, info, =, (, JSDocInfo, ), n, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (]
[Token, ., ASSIGN, :, info, =, (, JSDocInfo, ), n, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (]
[Token, ., ASSIGN, :, info, =, (, JSDocInfo, ), n, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (]
[ASSIGN, :, info, =, (, JSDocInfo, ), n, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=]
[info, =, (, JSDocInfo, ), n, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&]
[info, =, (, JSDocInfo, ), n, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&]
[., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&, info, ., isConstructor, (, ), ), {, String, qualifiedName, =]
[., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&, info, ., isConstructor, (, ), ), {, String, qualifiedName, =]
[., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&, info, ., isConstructor, (, ), ), {, String, qualifiedName, =]
[info, ., isConstructor, (, ), ), {, String, qualifiedName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;]
[info, ., isConstructor, (, ), ), {, String, qualifiedName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;]
[), ), {, String, qualifiedName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, constructors, ., add, (]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ;, constructors, ., add, (, qualifiedName, ), ;, }, break, ;, case]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ;, constructors, ., add, (, qualifiedName, ), ;, }, break, ;, case]
[(, ), ;, constructors, ., add, (, qualifiedName, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (]
[(, ), ;, constructors, ., add, (, qualifiedName, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (]
[., add, (, qualifiedName, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionExpression, (]
[}, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionExpression, (, n, ), ), {, if, (]
[}, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionExpression, (, n, ), ), {, if, (]
[NodeUtil, ., isFunctionExpression, (, n, ), ), {, if, (, parent, ., isName, (, ), ), {, String, functionName, =]
[NodeUtil, ., isFunctionExpression, (, n, ), ), {, if, (, parent, ., isName, (, ), ), {, String, functionName, =]
[), {, if, (, parent, ., isName, (, ), ), {, String, functionName, =, parent, ., getString, (, ), ;]
[if, (, parent, ., isName, (, ), ), {, String, functionName, =, parent, ., getString, (, ), ;, info, =]
[., isName, (, ), ), {, String, functionName, =, parent, ., getString, (, ), ;, info, =, (, JSDocInfo, )]
[., isName, (, ), ), {, String, functionName, =, parent, ., getString, (, ), ;, info, =, (, JSDocInfo, )]
[), {, String, functionName, =, parent, ., getString, (, ), ;, info, =, (, JSDocInfo, ), parent, ., getProp, (]
[), {, String, functionName, =, parent, ., getString, (, ), ;, info, =, (, JSDocInfo, ), parent, ., getProp, (]
[getString, (, ), ;, info, =, (, JSDocInfo, ), parent, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (]
[getString, (, ), ;, info, =, (, JSDocInfo, ), parent, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (]
[getString, (, ), ;, info, =, (, JSDocInfo, ), parent, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (]
[), ;, info, =, (, JSDocInfo, ), parent, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=]
[info, =, (, JSDocInfo, ), parent, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&]
[info, =, (, JSDocInfo, ), parent, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&]
[getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&, info, ., isConstructor, (, ), ), {]
[getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&, info, ., isConstructor, (, ), ), {]
[JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&, info, ., isConstructor, (, ), ), {, constructors, ., add, (]
[info, ., isConstructor, (, ), ), {, constructors, ., add, (, functionName, ), ;, }, else, {, Node, gramps, =]
[info, ., isConstructor, (, ), ), {, constructors, ., add, (, functionName, ), ;, }, else, {, Node, gramps, =]
[{, constructors, ., add, (, functionName, ), ;, }, else, {, Node, gramps, =, parent, ., getParent, (, ), ;]
[{, constructors, ., add, (, functionName, ), ;, }, else, {, Node, gramps, =, parent, ., getParent, (, ), ;]
[(, functionName, ), ;, }, else, {, Node, gramps, =, parent, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[(, functionName, ), ;, }, else, {, Node, gramps, =, parent, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[(, functionName, ), ;, }, else, {, Node, gramps, =, parent, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[), ;, }, else, {, Node, gramps, =, parent, ., getParent, (, ), ;, Preconditions, ., checkState, (, gramps, !=]
[}, else, {, Node, gramps, =, parent, ., getParent, (, ), ;, Preconditions, ., checkState, (, gramps, !=, null, &&]
[}, else, {, Node, gramps, =, parent, ., getParent, (, ), ;, Preconditions, ., checkState, (, gramps, !=, null, &&]
[., getParent, (, ), ;, Preconditions, ., checkState, (, gramps, !=, null, &&, gramps, ., isVar, (, ), ), ;]
[(, ), ;, Preconditions, ., checkState, (, gramps, !=, null, &&, gramps, ., isVar, (, ), ), ;, info, =]
[Preconditions, ., checkState, (, gramps, !=, null, &&, gramps, ., isVar, (, ), ), ;, info, =, (, JSDocInfo, )]
[Preconditions, ., checkState, (, gramps, !=, null, &&, gramps, ., isVar, (, ), ), ;, info, =, (, JSDocInfo, )]
[gramps, !=, null, &&, gramps, ., isVar, (, ), ), ;, info, =, (, JSDocInfo, ), gramps, ., getProp, (]
[gramps, !=, null, &&, gramps, ., isVar, (, ), ), ;, info, =, (, JSDocInfo, ), gramps, ., getProp, (]
[(, ), ), ;, info, =, (, JSDocInfo, ), gramps, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (]
[(, ), ), ;, info, =, (, JSDocInfo, ), gramps, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (]
[(, ), ), ;, info, =, (, JSDocInfo, ), gramps, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (]
[), ;, info, =, (, JSDocInfo, ), gramps, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=]
[info, =, (, JSDocInfo, ), gramps, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&]
[info, =, (, JSDocInfo, ), gramps, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&]
[getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&, info, ., isConstructor, (, ), ), {]
[getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&, info, ., isConstructor, (, ), ), {]
[JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&, info, ., isConstructor, (, ), ), {, constructors, ., add, (]
[info, ., isConstructor, (, ), ), {, constructors, ., add, (, functionName, ), ;, }, }, }, }, else, {]
[isConstructor, (, ), ), {, constructors, ., add, (, functionName, ), ;, }, }, }, }, else, {, info, =]
[), {, constructors, ., add, (, functionName, ), ;, }, }, }, }, else, {, info, =, (, JSDocInfo, )]
[), {, constructors, ., add, (, functionName, ), ;, }, }, }, }, else, {, info, =, (, JSDocInfo, )]
[add, (, functionName, ), ;, }, }, }, }, else, {, info, =, (, JSDocInfo, ), n, ., getProp, (]
[add, (, functionName, ), ;, }, }, }, }, else, {, info, =, (, JSDocInfo, ), n, ., getProp, (]
[}, }, else, {, info, =, (, JSDocInfo, ), n, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (]
[}, }, else, {, info, =, (, JSDocInfo, ), n, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (]
[}, }, else, {, info, =, (, JSDocInfo, ), n, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (]
[else, {, info, =, (, JSDocInfo, ), n, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=]
[info, =, (, JSDocInfo, ), n, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&]
[info, =, (, JSDocInfo, ), n, ., getProp, (, Node, ., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&]
[., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&, info, ., isConstructor, (, ), ), {, String, functionName, =]
[., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&, info, ., isConstructor, (, ), ), {, String, functionName, =]
[., JSDOC_INFO_PROP, ), ;, if, (, info, !=, null, &&, info, ., isConstructor, (, ), ), {, String, functionName, =]
[info, ., isConstructor, (, ), ), {, String, functionName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;]
[info, ., isConstructor, (, ), ), {, String, functionName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;]
[), ), {, String, functionName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, constructors, ., add, (]
[getFirstChild, (, ), ., getString, (, ), ;, constructors, ., add, (, functionName, ), ;, }, }, break, ;, case]
[getFirstChild, (, ), ., getString, (, ), ;, constructors, ., add, (, functionName, ), ;, }, }, break, ;, case]
[getString, (, ), ;, constructors, ., add, (, functionName, ), ;, }, }, break, ;, case, Token, ., CALL, :]
[), ;, constructors, ., add, (, functionName, ), ;, }, }, break, ;, case, Token, ., CALL, :, visitCallNode, (]
[constructors, ., add, (, functionName, ), ;, }, }, break, ;, case, Token, ., CALL, :, visitCallNode, (, n, ,]
[;, }, }, break, ;, case, Token, ., CALL, :, visitCallNode, (, n, ,, parent, ), ;, break, ;, case]
[;, }, }, break, ;, case, Token, ., CALL, :, visitCallNode, (, n, ,, parent, ), ;, break, ;, case]
[;, case, Token, ., CALL, :, visitCallNode, (, n, ,, parent, ), ;, break, ;, case, Token, ., SCRIPT, :]
[Token, ., CALL, :, visitCallNode, (, n, ,, parent, ), ;, break, ;, case, Token, ., SCRIPT, :, visitScriptNode, (]
[n, ,, parent, ), ;, break, ;, case, Token, ., SCRIPT, :, visitScriptNode, (, t, ), ;, break, ;, case]
[n, ,, parent, ), ;, break, ;, case, Token, ., SCRIPT, :, visitScriptNode, (, t, ), ;, break, ;, case]
[;, break, ;, case, Token, ., SCRIPT, :, visitScriptNode, (, t, ), ;, break, ;, case, Token, ., NEW, :]
[;, case, Token, ., SCRIPT, :, visitScriptNode, (, t, ), ;, break, ;, case, Token, ., NEW, :, visitNewNode, (]
[Token, ., SCRIPT, :, visitScriptNode, (, t, ), ;, break, ;, case, Token, ., NEW, :, visitNewNode, (, t, ,]
[,, n, ), ;, }, }, private, void, visitScriptNode, (, NodeTraversal, t, ), {, Set, <, String, >, classNames, =]
[,, n, ), ;, }, }, private, void, visitScriptNode, (, NodeTraversal, t, ), {, Set, <, String, >, classNames, =]
[t, ), {, Set, <, String, >, classNames, =, Sets, ., newHashSet, (, ), ;, for, (, Node, node, :]
[>, classNames, =, Sets, ., newHashSet, (, ), ;, for, (, Node, node, :, newNodes, ), {, String, className, =]
[>, classNames, =, Sets, ., newHashSet, (, ), ;, for, (, Node, node, :, newNodes, ), {, String, className, =]
[>, classNames, =, Sets, ., newHashSet, (, ), ;, for, (, Node, node, :, newNodes, ), {, String, className, =]
[:, newNodes, ), {, String, className, =, node, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, String, outermostClassName, =]
[), {, String, className, =, node, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, String, outermostClassName, =, getOutermostClassName, (]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ;, String, outermostClassName, =, getOutermostClassName, (, className, ), ;, boolean, notProvidedByConstructors, =]
[getFirstChild, (, ), ., getQualifiedName, (, ), ;, String, outermostClassName, =, getOutermostClassName, (, className, ), ;, boolean, notProvidedByConstructors, =, (]
[getFirstChild, (, ), ., getQualifiedName, (, ), ;, String, outermostClassName, =, getOutermostClassName, (, className, ), ;, boolean, notProvidedByConstructors, =, (]
[getFirstChild, (, ), ., getQualifiedName, (, ), ;, String, outermostClassName, =, getOutermostClassName, (, className, ), ;, boolean, notProvidedByConstructors, =, (]
[), ., getQualifiedName, (, ), ;, String, outermostClassName, =, getOutermostClassName, (, className, ), ;, boolean, notProvidedByConstructors, =, (, constructors, ==]
[getQualifiedName, (, ), ;, String, outermostClassName, =, getOutermostClassName, (, className, ), ;, boolean, notProvidedByConstructors, =, (, constructors, ==, null, ||]
[(, ), ;, String, outermostClassName, =, getOutermostClassName, (, className, ), ;, boolean, notProvidedByConstructors, =, (, constructors, ==, null, ||, !]
[(, ), ;, String, outermostClassName, =, getOutermostClassName, (, className, ), ;, boolean, notProvidedByConstructors, =, (, constructors, ==, null, ||, !]
[outermostClassName, =, getOutermostClassName, (, className, ), ;, boolean, notProvidedByConstructors, =, (, constructors, ==, null, ||, !, constructors, ., contains, (]
[boolean, notProvidedByConstructors, =, (, constructors, ==, null, ||, !, constructors, ., contains, (, className, ), ), ;, boolean, notProvidedByRequires, =]
[notProvidedByConstructors, =, (, constructors, ==, null, ||, !, constructors, ., contains, (, className, ), ), ;, boolean, notProvidedByRequires, =, (]
[notProvidedByConstructors, =, (, constructors, ==, null, ||, !, constructors, ., contains, (, className, ), ), ;, boolean, notProvidedByRequires, =, (]
[notProvidedByConstructors, =, (, constructors, ==, null, ||, !, constructors, ., contains, (, className, ), ), ;, boolean, notProvidedByRequires, =, (]
[(, constructors, ==, null, ||, !, constructors, ., contains, (, className, ), ), ;, boolean, notProvidedByRequires, =, (, requires, ==]
[==, null, ||, !, constructors, ., contains, (, className, ), ), ;, boolean, notProvidedByRequires, =, (, requires, ==, null, ||]
[null, ||, !, constructors, ., contains, (, className, ), ), ;, boolean, notProvidedByRequires, =, (, requires, ==, null, ||, (]
[null, ||, !, constructors, ., contains, (, className, ), ), ;, boolean, notProvidedByRequires, =, (, requires, ==, null, ||, (]
[||, !, constructors, ., contains, (, className, ), ), ;, boolean, notProvidedByRequires, =, (, requires, ==, null, ||, (, !]
[||, !, constructors, ., contains, (, className, ), ), ;, boolean, notProvidedByRequires, =, (, requires, ==, null, ||, (, !]
[contains, (, className, ), ), ;, boolean, notProvidedByRequires, =, (, requires, ==, null, ||, (, !, requires, ., contains, (]
[), ), ;, boolean, notProvidedByRequires, =, (, requires, ==, null, ||, (, !, requires, ., contains, (, className, ), &&]
[), ;, boolean, notProvidedByRequires, =, (, requires, ==, null, ||, (, !, requires, ., contains, (, className, ), &&, !]
[), ;, boolean, notProvidedByRequires, =, (, requires, ==, null, ||, (, !, requires, ., contains, (, className, ), &&, !]
[=, (, requires, ==, null, ||, (, !, requires, ., contains, (, className, ), &&, !, requires, ., contains, (]
[!, requires, ., contains, (, className, ), &&, !, requires, ., contains, (, outermostClassName, ), ), ), ;, if, (]
[!, requires, ., contains, (, className, ), &&, !, requires, ., contains, (, outermostClassName, ), ), ), ;, if, (]
[!, requires, ., contains, (, className, ), &&, !, requires, ., contains, (, outermostClassName, ), ), ), ;, if, (]
[., contains, (, className, ), &&, !, requires, ., contains, (, outermostClassName, ), ), ), ;, if, (, notProvidedByConstructors, &&]
[(, className, ), &&, !, requires, ., contains, (, outermostClassName, ), ), ), ;, if, (, notProvidedByConstructors, &&, notProvidedByRequires, &&]
[className, ), &&, !, requires, ., contains, (, outermostClassName, ), ), ), ;, if, (, notProvidedByConstructors, &&, notProvidedByRequires, &&, !]
[className, ), &&, !, requires, ., contains, (, outermostClassName, ), ), ), ;, if, (, notProvidedByConstructors, &&, notProvidedByRequires, &&, !]
[requires, ., contains, (, outermostClassName, ), ), ), ;, if, (, notProvidedByConstructors, &&, notProvidedByRequires, &&, !, classNames, ., contains, (]
[outermostClassName, ), ), ), ;, if, (, notProvidedByConstructors, &&, notProvidedByRequires, &&, !, classNames, ., contains, (, className, ), ), {]
[outermostClassName, ), ), ), ;, if, (, notProvidedByConstructors, &&, notProvidedByRequires, &&, !, classNames, ., contains, (, className, ), ), {]
[;, if, (, notProvidedByConstructors, &&, notProvidedByRequires, &&, !, classNames, ., contains, (, className, ), ), {, compiler, ., report, (]
[;, if, (, notProvidedByConstructors, &&, notProvidedByRequires, &&, !, classNames, ., contains, (, className, ), ), {, compiler, ., report, (]
[&&, notProvidedByRequires, &&, !, classNames, ., contains, (, className, ), ), {, compiler, ., report, (, t, ., makeError, (]
[&&, !, classNames, ., contains, (, className, ), ), {, compiler, ., report, (, t, ., makeError, (, node, ,]
[classNames, ., contains, (, className, ), ), {, compiler, ., report, (, t, ., makeError, (, node, ,, level, ,]
[contains, (, className, ), ), {, compiler, ., report, (, t, ., makeError, (, node, ,, level, ,, MISSING_REQUIRE_WARNING, ,]
[), {, compiler, ., report, (, t, ., makeError, (, node, ,, level, ,, MISSING_REQUIRE_WARNING, ,, className, ), ), ;]
[), {, compiler, ., report, (, t, ., makeError, (, node, ,, level, ,, MISSING_REQUIRE_WARNING, ,, className, ), ), ;]
[report, (, t, ., makeError, (, node, ,, level, ,, MISSING_REQUIRE_WARNING, ,, className, ), ), ;, classNames, ., add, (]
[(, node, ,, level, ,, MISSING_REQUIRE_WARNING, ,, className, ), ), ;, classNames, ., add, (, className, ), ;, }, }]
[(, node, ,, level, ,, MISSING_REQUIRE_WARNING, ,, className, ), ), ;, classNames, ., add, (, className, ), ;, }, }]
[(, node, ,, level, ,, MISSING_REQUIRE_WARNING, ,, className, ), ), ;, classNames, ., add, (, className, ), ;, }, }]
[), ), ;, classNames, ., add, (, className, ), ;, }, }, this, ., newNodes, ., clear, (, ), ;]
[), ), ;, classNames, ., add, (, className, ), ;, }, }, this, ., newNodes, ., clear, (, ), ;]
[), ), ;, classNames, ., add, (, className, ), ;, }, }, this, ., newNodes, ., clear, (, ), ;]
[), ;, }, }, this, ., newNodes, ., clear, (, ), ;, this, ., requires, ., clear, (, ), ;]
[), ;, }, }, this, ., newNodes, ., clear, (, ), ;, this, ., requires, ., clear, (, ), ;]
[), ;, }, }, this, ., newNodes, ., clear, (, ), ;, this, ., requires, ., clear, (, ), ;]
[., clear, (, ), ;, }, private, void, visitCallNode, (, Node, n, ,, Node, parent, ), {, String, required, =]
[., clear, (, ), ;, }, private, void, visitCallNode, (, Node, n, ,, Node, parent, ), {, String, required, =]
[;, }, private, void, visitCallNode, (, Node, n, ,, Node, parent, ), {, String, required, =, codingConvention, ., extractClassNameIfRequire, (]
[private, void, visitCallNode, (, Node, n, ,, Node, parent, ), {, String, required, =, codingConvention, ., extractClassNameIfRequire, (, n, ,]
[n, ,, Node, parent, ), {, String, required, =, codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (]
[n, ,, Node, parent, ), {, String, required, =, codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (]
[Node, parent, ), {, String, required, =, codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (, required, !=]
[{, String, required, =, codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (, required, !=, null, ), {]
[{, String, required, =, codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (, required, !=, null, ), {]
[codingConvention, ., extractClassNameIfRequire, (, n, ,, parent, ), ;, if, (, required, !=, null, ), {, requires, ., add, (]
[(, required, ), ;, }, }, private, void, visitNewNode, (, NodeTraversal, t, ,, Node, n, ), {, Node, qNameNode, =]
[(, required, ), ;, }, }, private, void, visitNewNode, (, NodeTraversal, t, ,, Node, n, ), {, Node, qNameNode, =]
[visitNewNode, (, NodeTraversal, t, ,, Node, n, ), {, Node, qNameNode, =, n, ., getFirstChild, (, ), ;, if, (]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, qNameNode, =, n, ., getFirstChild, (, ), ;, if, (, !]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, qNameNode, =, n, ., getFirstChild, (, ), ;, if, (, !]
[getFirstChild, (, ), ;, if, (, !, qNameNode, ., isQualifiedName, (, ), ), {, return, ;, }, Node, nameNode, =]
[(, !, qNameNode, ., isQualifiedName, (, ), ), {, return, ;, }, Node, nameNode, =, qNameNode, ;, for, (, ;]
[(, !, qNameNode, ., isQualifiedName, (, ), ), {, return, ;, }, Node, nameNode, =, qNameNode, ;, for, (, ;]
[), ), {, return, ;, }, Node, nameNode, =, qNameNode, ;, for, (, ;, nameNode, ., hasChildren, (, ), ;]
[{, return, ;, }, Node, nameNode, =, qNameNode, ;, for, (, ;, nameNode, ., hasChildren, (, ), ;, nameNode, =]
[{, return, ;, }, Node, nameNode, =, qNameNode, ;, for, (, ;, nameNode, ., hasChildren, (, ), ;, nameNode, =]
[(, ;, nameNode, ., hasChildren, (, ), ;, nameNode, =, nameNode, ., getFirstChild, (, ), ), {, }, if, (]
[;, nameNode, ., hasChildren, (, ), ;, nameNode, =, nameNode, ., getFirstChild, (, ), ), {, }, if, (, !]
[;, nameNode, ., hasChildren, (, ), ;, nameNode, =, nameNode, ., getFirstChild, (, ), ), {, }, if, (, !]
[), ), {, }, if, (, !, nameNode, ., isName, (, ), ), {, return, ;, }, String, name, =]
[), ), {, }, if, (, !, nameNode, ., isName, (, ), ), {, return, ;, }, String, name, =]
[), ), {, return, ;, }, String, name, =, nameNode, ., getString, (, ), ;, Scope, ., Var, var, =]
[), ), {, return, ;, }, String, name, =, nameNode, ., getString, (, ), ;, Scope, ., Var, var, =]
[), ), {, return, ;, }, String, name, =, nameNode, ., getString, (, ), ;, Scope, ., Var, var, =]
[=, nameNode, ., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, ==]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, ==, null, ||]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, ==, null, ||]
[(, ), ., getVar, (, name, ), ;, if, (, var, ==, null, ||, var, ., isLocal, (, ), ||]
[(, ), ., getVar, (, name, ), ;, if, (, var, ==, null, ||, var, ., isLocal, (, ), ||]
[var, ==, null, ||, var, ., isLocal, (, ), ||, var, ., isExtern, (, ), ), {, return, ;, }]
[var, ==, null, ||, var, ., isLocal, (, ), ||, var, ., isExtern, (, ), ), {, return, ;, }]
[var, ., isLocal, (, ), ||, var, ., isExtern, (, ), ), {, return, ;, }, newNodes, ., add, (]
