[field, ., DecoratedDateTimeField, ;, import, org, ., joda, ., time, ., field, ., FieldUtils, ;, class, ISOYearOfEraDateTimeField, extends, DecoratedDateTimeField, {]
[;, import, org, ., joda, ., time, ., field, ., FieldUtils, ;, class, ISOYearOfEraDateTimeField, extends, DecoratedDateTimeField, {, @, SuppressWarnings, (]
[field, ., FieldUtils, ;, class, ISOYearOfEraDateTimeField, extends, DecoratedDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[DecoratedDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =, 7037524068969447317L, ;, static, final, DateTimeField, INSTANCE, =]
[=, 7037524068969447317L, ;, static, final, DateTimeField, INSTANCE, =, new, ISOYearOfEraDateTimeField, (, ), ;, private, ISOYearOfEraDateTimeField, (, ), {, super, (]
[=, 7037524068969447317L, ;, static, final, DateTimeField, INSTANCE, =, new, ISOYearOfEraDateTimeField, (, ), ;, private, ISOYearOfEraDateTimeField, (, ), {, super, (]
[=, 7037524068969447317L, ;, static, final, DateTimeField, INSTANCE, =, new, ISOYearOfEraDateTimeField, (, ), ;, private, ISOYearOfEraDateTimeField, (, ), {, super, (]
[(, ), ;, private, ISOYearOfEraDateTimeField, (, ), {, super, (, GregorianChronology, ., getInstanceUTC, (, ), ., year, (, ), ,]
[(, ), ;, private, ISOYearOfEraDateTimeField, (, ), {, super, (, GregorianChronology, ., getInstanceUTC, (, ), ., year, (, ), ,]
[(, ), ,, DateTimeFieldType, ., yearOfEra, (, ), ), ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, return]
[(, ), ,, DateTimeFieldType, ., yearOfEra, (, ), ), ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, return]
[(, ), ,, DateTimeFieldType, ., yearOfEra, (, ), ), ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, return]
[getInstanceUTC, (, ), ., eras, (, ), ;, }, public, int, get, (, long, instant, ), {, int, year, =]
[getInstanceUTC, (, ), ., eras, (, ), ;, }, public, int, get, (, long, instant, ), {, int, year, =]
[), ;, }, public, int, get, (, long, instant, ), {, int, year, =, getWrappedField, (, ), ., get, (]
[int, get, (, long, instant, ), {, int, year, =, getWrappedField, (, ), ., get, (, instant, ), ;, return]
[int, get, (, long, instant, ), {, int, year, =, getWrappedField, (, ), ., get, (, instant, ), ;, return]
[int, get, (, long, instant, ), {, int, year, =, getWrappedField, (, ), ., get, (, instant, ), ;, return]
[(, long, instant, ), {, int, year, =, getWrappedField, (, ), ., get, (, instant, ), ;, return, year, <]
[instant, ), {, int, year, =, getWrappedField, (, ), ., get, (, instant, ), ;, return, year, <, 0, ?]
[), {, int, year, =, getWrappedField, (, ), ., get, (, instant, ), ;, return, year, <, 0, ?, -]
[int, year, =, getWrappedField, (, ), ., get, (, instant, ), ;, return, year, <, 0, ?, -, year, :]
[0, ?, -, year, :, year, ;, }, public, long, add, (, long, instant, ,, int, years, ), {, return]
[0, ?, -, year, :, year, ;, }, public, long, add, (, long, instant, ,, int, years, ), {, return]
[;, }, public, long, add, (, long, instant, ,, int, years, ), {, return, getWrappedField, (, ), ., add, (]
[public, long, add, (, long, instant, ,, int, years, ), {, return, getWrappedField, (, ), ., add, (, instant, ,]
[add, (, instant, ,, years, ), ;, }, public, long, add, (, long, instant, ,, long, years, ), {, return]
[add, (, instant, ,, years, ), ;, }, public, long, add, (, long, instant, ,, long, years, ), {, return]
[;, }, public, long, add, (, long, instant, ,, long, years, ), {, return, getWrappedField, (, ), ., add, (]
[public, long, add, (, long, instant, ,, long, years, ), {, return, getWrappedField, (, ), ., add, (, instant, ,]
[add, (, instant, ,, years, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, return]
[add, (, instant, ,, years, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, return]
[;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField, (]
[public, long, addWrapField, (, long, instant, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField, (, instant, ,]
[[, ], addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, years, ), {, return]
[[, ], addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, years, ), {, return]
[,, int, fieldIndex, ,, int, [, ], values, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField, (]
[fieldIndex, ,, int, [, ], values, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField, (, instant, ,]
[int, [, ], values, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField, (, instant, ,, fieldIndex, ,]
[], values, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField, (, instant, ,, fieldIndex, ,, values, ,]
[fieldIndex, ,, values, ,, years, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[fieldIndex, ,, values, ,, years, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifference, (]
[public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifference, (, minuendInstant, ,]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifferenceAsLong, (]
[public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifferenceAsLong, (, minuendInstant, ,]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, year, ), {]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, year, ), {]
[,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (]
[), ;, }, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[}, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,]
[long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,, 0, ,]
[year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,, 0, ,, getMaximumValue, (, ), ), ;, if, (]
[year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,, 0, ,, getMaximumValue, (, ), ), ;, if, (]
[year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year, ,, 0, ,, getMaximumValue, (, ), ), ;, if, (]
[(, this, ,, year, ,, 0, ,, getMaximumValue, (, ), ), ;, if, (, getWrappedField, (, ), ., get, (]
[year, ,, 0, ,, getMaximumValue, (, ), ), ;, if, (, getWrappedField, (, ), ., get, (, instant, ), <]
[,, getMaximumValue, (, ), ), ;, if, (, getWrappedField, (, ), ., get, (, instant, ), <, 0, ), {]
[(, ), ), ;, if, (, getWrappedField, (, ), ., get, (, instant, ), <, 0, ), {, year, =]
[), ), ;, if, (, getWrappedField, (, ), ., get, (, instant, ), <, 0, ), {, year, =, -]
[(, getWrappedField, (, ), ., get, (, instant, ), <, 0, ), {, year, =, -, year, ;, }, return]
[(, getWrappedField, (, ), ., get, (, instant, ), <, 0, ), {, year, =, -, year, ;, }, return]
[., get, (, instant, ), <, 0, ), {, year, =, -, year, ;, }, return, super, ., set, (]
[(, instant, ), <, 0, ), {, year, =, -, year, ;, }, return, super, ., set, (, instant, ,]
[;, }, return, super, ., set, (, instant, ,, year, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[), ;, }, public, int, getMinimumValue, (, ), {, return, 0, ;, }, public, int, getMaximumValue, (, ), {, return]
[), ;, }, public, int, getMinimumValue, (, ), {, return, 0, ;, }, public, int, getMaximumValue, (, ), {, return]
[{, return, getWrappedField, (, ), ., getMaximumValue, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[{, return, getWrappedField, (, ), ., getMaximumValue, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[getMaximumValue, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundFloor, (]
[return, getWrappedField, (, ), ., roundFloor, (, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundFloor, (, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundCeiling, (]
[return, getWrappedField, (, ), ., roundCeiling, (, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundCeiling, (, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return, getWrappedField, (, ), ., remainder, (]
[), {, return, getWrappedField, (, ), ., remainder, (, instant, ), ;, }, private, Object, readResolve, (, ), {, return]
