[AbstractIntervalXYDataset, implements, IntervalXYDataset, ,, XYDatasetSelectionState, ,, SelectableXYDataset, ,, Cloneable, ,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[Comparable, key, ;, private, List, bins, ;, private, boolean, adjustForBinSize, ;, public, SimpleHistogramDataset, (, Comparable, key, ), {, if, (]
[Comparable, key, ;, private, List, bins, ;, private, boolean, adjustForBinSize, ;, public, SimpleHistogramDataset, (, Comparable, key, ), {, if, (]
[;, private, List, bins, ;, private, boolean, adjustForBinSize, ;, public, SimpleHistogramDataset, (, Comparable, key, ), {, if, (, key, ==]
[;, private, boolean, adjustForBinSize, ;, public, SimpleHistogramDataset, (, Comparable, key, ), {, if, (, key, ==, null, ), {, throw]
[adjustForBinSize, ;, public, SimpleHistogramDataset, (, Comparable, key, ), {, if, (, key, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Comparable, key, ), {, if, (, key, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }]
[(, Comparable, key, ), {, if, (, key, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }]
[{, if, (, key, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, this, ., key, =]
[(, key, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, this, ., key, =, key, ;]
[(, key, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, this, ., key, =, key, ;]
[), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, this, ., key, =, key, ;, this, ., bins, =]
[(, "Null 'key' argument.", ), ;, }, this, ., key, =, key, ;, this, ., bins, =, new, ArrayList, (, ), ;]
[(, "Null 'key' argument.", ), ;, }, this, ., key, =, key, ;, this, ., bins, =, new, ArrayList, (, ), ;]
[}, this, ., key, =, key, ;, this, ., bins, =, new, ArrayList, (, ), ;, this, ., adjustForBinSize, =]
[., key, =, key, ;, this, ., bins, =, new, ArrayList, (, ), ;, this, ., adjustForBinSize, =, true, ;]
[=, key, ;, this, ., bins, =, new, ArrayList, (, ), ;, this, ., adjustForBinSize, =, true, ;, setSelectionState, (]
[;, this, ., adjustForBinSize, =, true, ;, setSelectionState, (, this, ), ;, }, public, boolean, getAdjustForBinSize, (, ), {, return]
[;, this, ., adjustForBinSize, =, true, ;, setSelectionState, (, this, ), ;, }, public, boolean, getAdjustForBinSize, (, ), {, return]
[public, boolean, getAdjustForBinSize, (, ), {, return, this, ., adjustForBinSize, ;, }, public, void, setAdjustForBinSize, (, boolean, adjust, ), {]
[public, boolean, getAdjustForBinSize, (, ), {, return, this, ., adjustForBinSize, ;, }, public, void, setAdjustForBinSize, (, boolean, adjust, ), {]
[), {, return, this, ., adjustForBinSize, ;, }, public, void, setAdjustForBinSize, (, boolean, adjust, ), {, this, ., adjustForBinSize, =]
[return, this, ., adjustForBinSize, ;, }, public, void, setAdjustForBinSize, (, boolean, adjust, ), {, this, ., adjustForBinSize, =, adjust, ;]
[., adjustForBinSize, ;, }, public, void, setAdjustForBinSize, (, boolean, adjust, ), {, this, ., adjustForBinSize, =, adjust, ;, fireDatasetChanged, (]
[adjustForBinSize, =, adjust, ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, int, getSeriesCount, (, ), {, return]
[}, public, int, getSeriesCount, (, ), {, return, 1, ;, }, public, Comparable, getSeriesKey, (, int, series, ), {, return]
[}, public, int, getSeriesCount, (, ), {, return, 1, ;, }, public, Comparable, getSeriesKey, (, int, series, ), {, return]
[Comparable, getSeriesKey, (, int, series, ), {, return, this, ., key, ;, }, public, DomainOrder, getDomainOrder, (, ), {, return]
[Comparable, getSeriesKey, (, int, series, ), {, return, this, ., key, ;, }, public, DomainOrder, getDomainOrder, (, ), {, return]
[DomainOrder, getDomainOrder, (, ), {, return, DomainOrder, ., ASCENDING, ;, }, public, int, getItemCount, (, int, series, ), {, return]
[DomainOrder, getDomainOrder, (, ), {, return, DomainOrder, ., ASCENDING, ;, }, public, int, getItemCount, (, int, series, ), {, return]
[DomainOrder, getDomainOrder, (, ), {, return, DomainOrder, ., ASCENDING, ;, }, public, int, getItemCount, (, int, series, ), {, return]
[this, ., bins, ., size, (, ), ;, }, public, void, addBin, (, SimpleHistogramBin, bin, ), {, Iterator, iterator, =]
[this, ., bins, ., size, (, ), ;, }, public, void, addBin, (, SimpleHistogramBin, bin, ), {, Iterator, iterator, =]
[this, ., bins, ., size, (, ), ;, }, public, void, addBin, (, SimpleHistogramBin, bin, ), {, Iterator, iterator, =]
[void, addBin, (, SimpleHistogramBin, bin, ), {, Iterator, iterator, =, this, ., bins, ., iterator, (, ), ;, while, (]
[void, addBin, (, SimpleHistogramBin, bin, ), {, Iterator, iterator, =, this, ., bins, ., iterator, (, ), ;, while, (]
[this, ., bins, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, SimpleHistogramBin, existingBin, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, SimpleHistogramBin, existingBin, =, (, SimpleHistogramBin, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, SimpleHistogramBin, existingBin, =, (, SimpleHistogramBin, )]
[., hasNext, (, ), ), {, SimpleHistogramBin, existingBin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, if, (]
[., hasNext, (, ), ), {, SimpleHistogramBin, existingBin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, if, (]
[), {, SimpleHistogramBin, existingBin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, if, (, bin, ., overlapsWith, (]
[(, SimpleHistogramBin, ), iterator, ., next, (, ), ;, if, (, bin, ., overlapsWith, (, existingBin, ), ), {, throw]
[iterator, ., next, (, ), ;, if, (, bin, ., overlapsWith, (, existingBin, ), ), {, throw, new, RuntimeException, (]
[;, if, (, bin, ., overlapsWith, (, existingBin, ), ), {, throw, new, RuntimeException, (, "Overlapping bin", ), ;, }, }]
[;, if, (, bin, ., overlapsWith, (, existingBin, ), ), {, throw, new, RuntimeException, (, "Overlapping bin", ), ;, }, }]
[;, if, (, bin, ., overlapsWith, (, existingBin, ), ), {, throw, new, RuntimeException, (, "Overlapping bin", ), ;, }, }]
[(, existingBin, ), ), {, throw, new, RuntimeException, (, "Overlapping bin", ), ;, }, }, this, ., bins, ., add, (]
[), {, throw, new, RuntimeException, (, "Overlapping bin", ), ;, }, }, this, ., bins, ., add, (, bin, ), ;]
[), {, throw, new, RuntimeException, (, "Overlapping bin", ), ;, }, }, this, ., bins, ., add, (, bin, ), ;]
[RuntimeException, (, "Overlapping bin", ), ;, }, }, this, ., bins, ., add, (, bin, ), ;, Collections, ., sort, (]
[RuntimeException, (, "Overlapping bin", ), ;, }, }, this, ., bins, ., add, (, bin, ), ;, Collections, ., sort, (]
[), ;, Collections, ., sort, (, this, ., bins, ), ;, }, public, void, addObservation, (, double, value, ), {]
[Collections, ., sort, (, this, ., bins, ), ;, }, public, void, addObservation, (, double, value, ), {, addObservation, (]
[sort, (, this, ., bins, ), ;, }, public, void, addObservation, (, double, value, ), {, addObservation, (, value, ,]
[value, ,, true, ), ;, }, public, void, addObservation, (, double, value, ,, boolean, notify, ), {, boolean, placed, =]
[}, public, void, addObservation, (, double, value, ,, boolean, notify, ), {, boolean, placed, =, false, ;, Iterator, iterator, =]
[}, public, void, addObservation, (, double, value, ,, boolean, notify, ), {, boolean, placed, =, false, ;, Iterator, iterator, =]
[}, public, void, addObservation, (, double, value, ,, boolean, notify, ), {, boolean, placed, =, false, ;, Iterator, iterator, =]
[), {, boolean, placed, =, false, ;, Iterator, iterator, =, this, ., bins, ., iterator, (, ), ;, while, (]
[), {, boolean, placed, =, false, ;, Iterator, iterator, =, this, ., bins, ., iterator, (, ), ;, while, (]
[), {, boolean, placed, =, false, ;, Iterator, iterator, =, this, ., bins, ., iterator, (, ), ;, while, (]
[;, Iterator, iterator, =, this, ., bins, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), &&]
[Iterator, iterator, =, this, ., bins, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), &&, !]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), &&, !, placed, ), {, SimpleHistogramBin, bin, =]
[), ;, while, (, iterator, ., hasNext, (, ), &&, !, placed, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[), ;, while, (, iterator, ., hasNext, (, ), &&, !, placed, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[), &&, !, placed, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, if, (]
[), &&, !, placed, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, if, (]
[), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, if, (, bin, ., accepts, (]
[=, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, if, (, bin, ., accepts, (, value, ), ), {]
[=, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, if, (, bin, ., accepts, (, value, ), ), {]
[iterator, ., next, (, ), ;, if, (, bin, ., accepts, (, value, ), ), {, bin, ., setItemCount, (]
[iterator, ., next, (, ), ;, if, (, bin, ., accepts, (, value, ), ), {, bin, ., setItemCount, (]
[iterator, ., next, (, ), ;, if, (, bin, ., accepts, (, value, ), ), {, bin, ., setItemCount, (]
[if, (, bin, ., accepts, (, value, ), ), {, bin, ., setItemCount, (, bin, ., getItemCount, (, ), +]
[., accepts, (, value, ), ), {, bin, ., setItemCount, (, bin, ., getItemCount, (, ), +, 1, ), ;]
[(, value, ), ), {, bin, ., setItemCount, (, bin, ., getItemCount, (, ), +, 1, ), ;, placed, =]
[., setItemCount, (, bin, ., getItemCount, (, ), +, 1, ), ;, placed, =, true, ;, }, }, if, (]
[setItemCount, (, bin, ., getItemCount, (, ), +, 1, ), ;, placed, =, true, ;, }, }, if, (, !]
[getItemCount, (, ), +, 1, ), ;, placed, =, true, ;, }, }, if, (, !, placed, ), {, throw]
[+, 1, ), ;, placed, =, true, ;, }, }, if, (, !, placed, ), {, throw, new, RuntimeException, (]
[true, ;, }, }, if, (, !, placed, ), {, throw, new, RuntimeException, (, "No bin.", ), ;, }, if, (]
[}, if, (, !, placed, ), {, throw, new, RuntimeException, (, "No bin.", ), ;, }, if, (, notify, ), {]
[(, !, placed, ), {, throw, new, RuntimeException, (, "No bin.", ), ;, }, if, (, notify, ), {, fireDatasetChanged, (]
[), ), ;, }, }, public, void, addObservations, (, double, [, ], values, ), {, for, (, int, i, =]
[;, }, }, public, void, addObservations, (, double, [, ], values, ), {, for, (, int, i, =, 0, ;]
[;, }, }, public, void, addObservations, (, double, [, ], values, ), {, for, (, int, i, =, 0, ;]
[}, public, void, addObservations, (, double, [, ], values, ), {, for, (, int, i, =, 0, ;, i, <]
[}, public, void, addObservations, (, double, [, ], values, ), {, for, (, int, i, =, 0, ;, i, <]
[(, double, [, ], values, ), {, for, (, int, i, =, 0, ;, i, <, values, ., length, ;]
[(, double, [, ], values, ), {, for, (, int, i, =, 0, ;, i, <, values, ., length, ;]
[values, ), {, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, addObservation, (]
[{, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, addObservation, (]
[(, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, addObservation, (, values, []
[=, 0, ;, i, <, values, ., length, ;, i, ++, ), {, addObservation, (, values, [, i, ], ,]
[<, values, ., length, ;, i, ++, ), {, addObservation, (, values, [, i, ], ,, false, ), ;, }]
[., length, ;, i, ++, ), {, addObservation, (, values, [, i, ], ,, false, ), ;, }, fireDatasetChanged, (]
[;, }, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, clearObservations, (, ), {, Iterator, iterator, =]
[;, }, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, clearObservations, (, ), {, Iterator, iterator, =]
[;, }, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, clearObservations, (, ), {, Iterator, iterator, =]
[}, public, void, clearObservations, (, ), {, Iterator, iterator, =, this, ., bins, ., iterator, (, ), ;, while, (]
[}, public, void, clearObservations, (, ), {, Iterator, iterator, =, this, ., bins, ., iterator, (, ), ;, while, (]
[this, ., bins, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, SimpleHistogramBin, bin, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[(, iterator, ., hasNext, (, ), ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;]
[(, iterator, ., hasNext, (, ), ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;]
[(, ), ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, bin, ., setItemCount, (]
[SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, bin, ., setItemCount, (, 0, ), ;, }]
[=, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, bin, ., setItemCount, (, 0, ), ;, }, fireDatasetChanged, (]
[(, 0, ), ;, }, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, removeAllBins, (, ), {]
[(, 0, ), ;, }, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, removeAllBins, (, ), {]
[}, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, removeAllBins, (, ), {, this, ., bins, =]
[(, ), ), ;, }, public, void, removeAllBins, (, ), {, this, ., bins, =, new, ArrayList, (, ), ;]
[), ;, }, public, void, removeAllBins, (, ), {, this, ., bins, =, new, ArrayList, (, ), ;, fireDatasetChanged, (]
[(, new, DatasetChangeInfo, (, ), ), ;, }, public, Number, getX, (, int, series, ,, int, item, ), {, return]
[(, ), ), ;, }, public, Number, getX, (, int, series, ,, int, item, ), {, return, new, Double, (]
[), ;, }, public, Number, getX, (, int, series, ,, int, item, ), {, return, new, Double, (, getXValue, (]
[}, public, Number, getX, (, int, series, ,, int, item, ), {, return, new, Double, (, getXValue, (, series, ,]
[,, item, ), ), ;, }, public, double, getXValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =]
[), ;, }, public, double, getXValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[), ;, }, public, double, getXValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[), ;, }, public, double, getXValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[(, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (]
[int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, return]
[int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, return]
[item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, return, (]
[item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, return, (]
[item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, return, (]
[(, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, return, (, bin, ., getLowerBound, (, ), +]
[(, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, return, (, bin, ., getLowerBound, (, ), +]
[get, (, item, ), ;, return, (, bin, ., getLowerBound, (, ), +, bin, ., getUpperBound, (, ), ), /]
[getUpperBound, (, ), ), /, 2.0, ;, }, public, Number, getY, (, int, series, ,, int, item, ), {, return]
[), /, 2.0, ;, }, public, Number, getY, (, int, series, ,, int, item, ), {, return, new, Double, (]
[2.0, ;, }, public, Number, getY, (, int, series, ,, int, item, ), {, return, new, Double, (, getYValue, (]
[}, public, Number, getY, (, int, series, ,, int, item, ), {, return, new, Double, (, getYValue, (, series, ,]
[,, item, ), ), ;, }, public, double, getYValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =]
[), ;, }, public, double, getYValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[), ;, }, public, double, getYValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[), ;, }, public, double, getYValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[(, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (]
[item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, if, (]
[item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, if, (]
[(, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, if, (, this, ., adjustForBinSize, ), {, return]
[(, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, if, (, this, ., adjustForBinSize, ), {, return]
[(, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, if, (, this, ., adjustForBinSize, ), {, return]
[., get, (, item, ), ;, if, (, this, ., adjustForBinSize, ), {, return, bin, ., getItemCount, (, ), /]
[get, (, item, ), ;, if, (, this, ., adjustForBinSize, ), {, return, bin, ., getItemCount, (, ), /, (]
[get, (, item, ), ;, if, (, this, ., adjustForBinSize, ), {, return, bin, ., getItemCount, (, ), /, (]
[get, (, item, ), ;, if, (, this, ., adjustForBinSize, ), {, return, bin, ., getItemCount, (, ), /, (]
[(, this, ., adjustForBinSize, ), {, return, bin, ., getItemCount, (, ), /, (, bin, ., getUpperBound, (, ), -]
[(, this, ., adjustForBinSize, ), {, return, bin, ., getItemCount, (, ), /, (, bin, ., getUpperBound, (, ), -]
[), /, (, bin, ., getUpperBound, (, ), -, bin, ., getLowerBound, (, ), ), ;, }, else, {, return]
[), /, (, bin, ., getUpperBound, (, ), -, bin, ., getLowerBound, (, ), ), ;, }, else, {, return]
[bin, ., getItemCount, (, ), ;, }, }, public, Number, getStartX, (, int, series, ,, int, item, ), {, return]
[(, ), ;, }, }, public, Number, getStartX, (, int, series, ,, int, item, ), {, return, new, Double, (]
[;, }, }, public, Number, getStartX, (, int, series, ,, int, item, ), {, return, new, Double, (, getStartXValue, (]
[}, public, Number, getStartX, (, int, series, ,, int, item, ), {, return, new, Double, (, getStartXValue, (, series, ,]
[,, item, ), ), ;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =]
[), ;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[), ;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[), ;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[(, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (]
[int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, return]
[int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, return]
[return, bin, ., getLowerBound, (, ), ;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, return]
[getLowerBound, (, ), ;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, return, new, Double, (]
[), ;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, return, new, Double, (, getEndXValue, (]
[}, public, Number, getEndX, (, int, series, ,, int, item, ), {, return, new, Double, (, getEndXValue, (, series, ,]
[,, item, ), ), ;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =]
[), ;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[), ;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[), ;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[(, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (]
[int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, return]
[int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, return]
[return, bin, ., getUpperBound, (, ), ;, }, public, Number, getStartY, (, int, series, ,, int, item, ), {, return]
[., getUpperBound, (, ), ;, }, public, Number, getStartY, (, int, series, ,, int, item, ), {, return, getY, (]
[(, ), ;, }, public, Number, getStartY, (, int, series, ,, int, item, ), {, return, getY, (, series, ,]
[getY, (, series, ,, item, ), ;, }, public, double, getStartYValue, (, int, series, ,, int, item, ), {, return]
[series, ,, item, ), ;, }, public, double, getStartYValue, (, int, series, ,, int, item, ), {, return, getYValue, (]
[item, ), ;, }, public, double, getStartYValue, (, int, series, ,, int, item, ), {, return, getYValue, (, series, ,]
[getYValue, (, series, ,, item, ), ;, }, public, Number, getEndY, (, int, series, ,, int, item, ), {, return]
[series, ,, item, ), ;, }, public, Number, getEndY, (, int, series, ,, int, item, ), {, return, getY, (]
[item, ), ;, }, public, Number, getEndY, (, int, series, ,, int, item, ), {, return, getY, (, series, ,]
[getY, (, series, ,, item, ), ;, }, public, double, getEndYValue, (, int, series, ,, int, item, ), {, return]
[series, ,, item, ), ;, }, public, double, getEndYValue, (, int, series, ,, int, item, ), {, return, getYValue, (]
[item, ), ;, }, public, double, getEndYValue, (, int, series, ,, int, item, ), {, return, getYValue, (, series, ,]
[series, ,, item, ), ;, }, public, boolean, isSelected, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =]
[), ;, }, public, boolean, isSelected, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[), ;, }, public, boolean, isSelected, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[), ;, }, public, boolean, isSelected, (, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[(, int, series, ,, int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (]
[int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, return]
[int, item, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, return]
[., isSelected, (, ), ;, }, public, void, setSelected, (, int, series, ,, int, item, ,, boolean, selected, ), {]
[(, ), ;, }, public, void, setSelected, (, int, series, ,, int, item, ,, boolean, selected, ), {, setSelected, (]
[;, }, public, void, setSelected, (, int, series, ,, int, item, ,, boolean, selected, ), {, setSelected, (, series, ,]
[public, void, setSelected, (, int, series, ,, int, item, ,, boolean, selected, ), {, setSelected, (, series, ,, item, ,]
[setSelected, (, int, series, ,, int, item, ,, boolean, selected, ), {, setSelected, (, series, ,, item, ,, selected, ,]
[public, void, setSelected, (, int, series, ,, int, item, ,, boolean, selected, ,, boolean, notify, ), {, SimpleHistogramBin, bin, =]
[(, int, series, ,, int, item, ,, boolean, selected, ,, boolean, notify, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[(, int, series, ,, int, item, ,, boolean, selected, ,, boolean, notify, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[(, int, series, ,, int, item, ,, boolean, selected, ,, boolean, notify, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[,, boolean, selected, ,, boolean, notify, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (]
[,, boolean, notify, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;]
[,, boolean, notify, ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;]
[{, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, bin, ., setSelected, (]
[SimpleHistogramBin, ), this, ., bins, ., get, (, item, ), ;, bin, ., setSelected, (, selected, ), ;, if, (]
[., bins, ., get, (, item, ), ;, bin, ., setSelected, (, selected, ), ;, if, (, notify, ), {]
[if, (, notify, ), {, fireSelectionEvent, (, ), ;, }, }, public, void, clearSelection, (, ), {, Iterator, iterator, =]
[if, (, notify, ), {, fireSelectionEvent, (, ), ;, }, }, public, void, clearSelection, (, ), {, Iterator, iterator, =]
[if, (, notify, ), {, fireSelectionEvent, (, ), ;, }, }, public, void, clearSelection, (, ), {, Iterator, iterator, =]
[public, void, clearSelection, (, ), {, Iterator, iterator, =, this, ., bins, ., iterator, (, ), ;, boolean, changed, =]
[), {, Iterator, iterator, =, this, ., bins, ., iterator, (, ), ;, boolean, changed, =, false, ;, while, (]
[), {, Iterator, iterator, =, this, ., bins, ., iterator, (, ), ;, boolean, changed, =, false, ;, while, (]
[(, ), ;, boolean, changed, =, false, ;, while, (, iterator, ., hasNext, (, ), ), {, SimpleHistogramBin, bin, =]
[boolean, changed, =, false, ;, while, (, iterator, ., hasNext, (, ), ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[boolean, changed, =, false, ;, while, (, iterator, ., hasNext, (, ), ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, )]
[., hasNext, (, ), ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, if, (]
[., hasNext, (, ), ), {, SimpleHistogramBin, bin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, if, (]
[bin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, if, (, bin, ., isSelected, (, ), ), {]
[bin, =, (, SimpleHistogramBin, ), iterator, ., next, (, ), ;, if, (, bin, ., isSelected, (, ), ), {]
[), iterator, ., next, (, ), ;, if, (, bin, ., isSelected, (, ), ), {, bin, ., setSelected, (]
[next, (, ), ;, if, (, bin, ., isSelected, (, ), ), {, bin, ., setSelected, (, false, ), ;]
[), ;, if, (, bin, ., isSelected, (, ), ), {, bin, ., setSelected, (, false, ), ;, changed, =]
[isSelected, (, ), ), {, bin, ., setSelected, (, false, ), ;, changed, =, true, ;, }, }, if, (]
[), {, bin, ., setSelected, (, false, ), ;, changed, =, true, ;, }, }, if, (, changed, ), {]
[;, }, }, if, (, changed, ), {, fireSelectionEvent, (, ), ;, }, }, public, void, fireSelectionEvent, (, ), {]
[}, if, (, changed, ), {, fireSelectionEvent, (, ), ;, }, }, public, void, fireSelectionEvent, (, ), {, fireDatasetChanged, (]
[{, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[{, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[(, new, DatasetChangeInfo, (, ), ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[), ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, SimpleHistogramDataset, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, SimpleHistogramDataset, ), ), {, return, false, ;, }, SimpleHistogramDataset, that, =]
[if, (, !, (, obj, instanceof, SimpleHistogramDataset, ), ), {, return, false, ;, }, SimpleHistogramDataset, that, =, (, SimpleHistogramDataset, )]
[obj, instanceof, SimpleHistogramDataset, ), ), {, return, false, ;, }, SimpleHistogramDataset, that, =, (, SimpleHistogramDataset, ), obj, ;, if, (]
[instanceof, SimpleHistogramDataset, ), ), {, return, false, ;, }, SimpleHistogramDataset, that, =, (, SimpleHistogramDataset, ), obj, ;, if, (, !]
[instanceof, SimpleHistogramDataset, ), ), {, return, false, ;, }, SimpleHistogramDataset, that, =, (, SimpleHistogramDataset, ), obj, ;, if, (, !]
[instanceof, SimpleHistogramDataset, ), ), {, return, false, ;, }, SimpleHistogramDataset, that, =, (, SimpleHistogramDataset, ), obj, ;, if, (, !]
[false, ;, }, SimpleHistogramDataset, that, =, (, SimpleHistogramDataset, ), obj, ;, if, (, !, this, ., key, ., equals, (]
[false, ;, }, SimpleHistogramDataset, that, =, (, SimpleHistogramDataset, ), obj, ;, if, (, !, this, ., key, ., equals, (]
[SimpleHistogramDataset, ), obj, ;, if, (, !, this, ., key, ., equals, (, that, ., key, ), ), {, return]
[(, !, this, ., key, ., equals, (, that, ., key, ), ), {, return, false, ;, }, if, (]
[(, !, this, ., key, ., equals, (, that, ., key, ), ), {, return, false, ;, }, if, (]
[(, !, this, ., key, ., equals, (, that, ., key, ), ), {, return, false, ;, }, if, (]
[key, ., equals, (, that, ., key, ), ), {, return, false, ;, }, if, (, this, ., adjustForBinSize, !=]
[key, ., equals, (, that, ., key, ), ), {, return, false, ;, }, if, (, this, ., adjustForBinSize, !=]
[key, ), ), {, return, false, ;, }, if, (, this, ., adjustForBinSize, !=, that, ., adjustForBinSize, ), {, return]
[false, ;, }, if, (, this, ., adjustForBinSize, !=, that, ., adjustForBinSize, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., adjustForBinSize, !=, that, ., adjustForBinSize, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., adjustForBinSize, !=, that, ., adjustForBinSize, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., adjustForBinSize, !=, that, ., adjustForBinSize, ), {, return, false, ;, }, if, (, !]
[adjustForBinSize, !=, that, ., adjustForBinSize, ), {, return, false, ;, }, if, (, !, this, ., bins, ., equals, (]
[adjustForBinSize, !=, that, ., adjustForBinSize, ), {, return, false, ;, }, if, (, !, this, ., bins, ., equals, (]
[return, false, ;, }, if, (, !, this, ., bins, ., equals, (, that, ., bins, ), ), {, return]
[if, (, !, this, ., bins, ., equals, (, that, ., bins, ), ), {, return, false, ;, }, return]
[{, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, SimpleHistogramDataset, clone, =]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, SimpleHistogramDataset, clone, =, (, SimpleHistogramDataset, )]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, SimpleHistogramDataset, clone, =, (, SimpleHistogramDataset, )]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, SimpleHistogramDataset, clone, =, (, SimpleHistogramDataset, ), super, ., clone, (, ), ;]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, SimpleHistogramDataset, clone, =, (, SimpleHistogramDataset, ), super, ., clone, (, ), ;]
[), throws, CloneNotSupportedException, {, SimpleHistogramDataset, clone, =, (, SimpleHistogramDataset, ), super, ., clone, (, ), ;, clone, ., bins, =]
[{, SimpleHistogramDataset, clone, =, (, SimpleHistogramDataset, ), super, ., clone, (, ), ;, clone, ., bins, =, (, List, )]
[{, SimpleHistogramDataset, clone, =, (, SimpleHistogramDataset, ), super, ., clone, (, ), ;, clone, ., bins, =, (, List, )]
[(, SimpleHistogramDataset, ), super, ., clone, (, ), ;, clone, ., bins, =, (, List, ), ObjectUtilities, ., deepClone, (]
[(, SimpleHistogramDataset, ), super, ., clone, (, ), ;, clone, ., bins, =, (, List, ), ObjectUtilities, ., deepClone, (]
[(, ), ;, clone, ., bins, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., bins, ), ;, return]
