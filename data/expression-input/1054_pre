[], callbacks, ;, private, final, AbstractCompiler, compiler, ;, CombinedCompilerPass, (, AbstractCompiler, compiler, ,, Callback, ..., callbacks, ), {, this, (]
[;, private, final, AbstractCompiler, compiler, ;, CombinedCompilerPass, (, AbstractCompiler, compiler, ,, Callback, ..., callbacks, ), {, this, (, compiler, ,]
[;, private, final, AbstractCompiler, compiler, ;, CombinedCompilerPass, (, AbstractCompiler, compiler, ,, Callback, ..., callbacks, ), {, this, (, compiler, ,]
[(, AbstractCompiler, compiler, ,, Callback, ..., callbacks, ), {, this, (, compiler, ,, Lists, ., <, Callback, >, newArrayList, (]
[>, newArrayList, (, callbacks, ), ), ;, }, CombinedCompilerPass, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {]
[>, newArrayList, (, callbacks, ), ), ;, }, CombinedCompilerPass, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {]
[), ), ;, }, CombinedCompilerPass, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {, this, ., compiler, =]
[;, }, CombinedCompilerPass, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {, this, ., compiler, =, compiler, ;]
[;, }, CombinedCompilerPass, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {, this, ., compiler, =, compiler, ;, this, ., callbacks, =]
[List, <, Callback, >, callbacks, ), {, this, ., compiler, =, compiler, ;, this, ., callbacks, =, new, CallbackWrapper, []
[List, <, Callback, >, callbacks, ), {, this, ., compiler, =, compiler, ;, this, ., callbacks, =, new, CallbackWrapper, []
[;, this, ., callbacks, =, new, CallbackWrapper, [, callbacks, ., size, (, ), ], ;, for, (, int, i, =]
[., callbacks, =, new, CallbackWrapper, [, callbacks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[., callbacks, =, new, CallbackWrapper, [, callbacks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[=, new, CallbackWrapper, [, callbacks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, CallbackWrapper, [, callbacks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, callbacks, ., size, (, ), ;]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, callbacks, ., size, (, ), ;]
[;, for, (, int, i, =, 0, ;, i, <, callbacks, ., size, (, ), ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, callbacks, ., size, (, ), ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, callbacks, ., size, (, ), ;, i, ++, ), {]
[i, =, 0, ;, i, <, callbacks, ., size, (, ), ;, i, ++, ), {, this, ., callbacks, []
[;, i, <, callbacks, ., size, (, ), ;, i, ++, ), {, this, ., callbacks, [, i, ], =]
[callbacks, ., size, (, ), ;, i, ++, ), {, this, ., callbacks, [, i, ], =, new, CallbackWrapper, (]
[callbacks, ., size, (, ), ;, i, ++, ), {, this, ., callbacks, [, i, ], =, new, CallbackWrapper, (]
[), ;, i, ++, ), {, this, ., callbacks, [, i, ], =, new, CallbackWrapper, (, callbacks, ., get, (]
[}, static, void, traverse, (, AbstractCompiler, compiler, ,, Node, root, ,, List, <, Callback, >, callbacks, ), {, if, (]
[}, static, void, traverse, (, AbstractCompiler, compiler, ,, Node, root, ,, List, <, Callback, >, callbacks, ), {, if, (]
[}, static, void, traverse, (, AbstractCompiler, compiler, ,, Node, root, ,, List, <, Callback, >, callbacks, ), {, if, (]
[compiler, ,, Node, root, ,, List, <, Callback, >, callbacks, ), {, if, (, callbacks, ., size, (, ), ==]
[root, ,, List, <, Callback, >, callbacks, ), {, if, (, callbacks, ., size, (, ), ==, 1, ), {]
[root, ,, List, <, Callback, >, callbacks, ), {, if, (, callbacks, ., size, (, ), ==, 1, ), {]
[Callback, >, callbacks, ), {, if, (, callbacks, ., size, (, ), ==, 1, ), {, NodeTraversal, ., traverse, (]
[callbacks, ), {, if, (, callbacks, ., size, (, ), ==, 1, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[{, if, (, callbacks, ., size, (, ), ==, 1, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[{, if, (, callbacks, ., size, (, ), ==, 1, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[., size, (, ), ==, 1, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callbacks, ., get, (]
[{, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callbacks, ., get, (, 0, ), ), ;, }, else, {]
[{, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callbacks, ., get, (, 0, ), ), ;, }, else, {]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, callbacks, ., get, (, 0, ), ), ;, }, else, {, (]
[(, compiler, ,, root, ,, callbacks, ., get, (, 0, ), ), ;, }, else, {, (, new, CombinedCompilerPass, (]
[,, root, ,, callbacks, ., get, (, 0, ), ), ;, }, else, {, (, new, CombinedCompilerPass, (, compiler, ,]
[(, 0, ), ), ;, }, else, {, (, new, CombinedCompilerPass, (, compiler, ,, callbacks, ), ), ., process, (]
[), ), ;, }, else, {, (, new, CombinedCompilerPass, (, compiler, ,, callbacks, ), ), ., process, (, null, ,]
[}, private, static, class, CallbackWrapper, {, private, final, Callback, callback, ;, private, final, ScopedCallback, scopedCallback, ;, private, Node, waiting, =]
[callback, ;, private, final, ScopedCallback, scopedCallback, ;, private, Node, waiting, =, null, ;, private, CallbackWrapper, (, Callback, callback, ), {]
[callback, ;, private, final, ScopedCallback, scopedCallback, ;, private, Node, waiting, =, null, ;, private, CallbackWrapper, (, Callback, callback, ), {]
[ScopedCallback, scopedCallback, ;, private, Node, waiting, =, null, ;, private, CallbackWrapper, (, Callback, callback, ), {, this, ., callback, =]
[Node, waiting, =, null, ;, private, CallbackWrapper, (, Callback, callback, ), {, this, ., callback, =, callback, ;, if, (]
[Node, waiting, =, null, ;, private, CallbackWrapper, (, Callback, callback, ), {, this, ., callback, =, callback, ;, if, (]
[private, CallbackWrapper, (, Callback, callback, ), {, this, ., callback, =, callback, ;, if, (, callback, instanceof, ScopedCallback, ), {]
[(, Callback, callback, ), {, this, ., callback, =, callback, ;, if, (, callback, instanceof, ScopedCallback, ), {, scopedCallback, =]
[), {, this, ., callback, =, callback, ;, if, (, callback, instanceof, ScopedCallback, ), {, scopedCallback, =, (, ScopedCallback, )]
[=, callback, ;, if, (, callback, instanceof, ScopedCallback, ), {, scopedCallback, =, (, ScopedCallback, ), callback, ;, }, else, {]
[;, if, (, callback, instanceof, ScopedCallback, ), {, scopedCallback, =, (, ScopedCallback, ), callback, ;, }, else, {, scopedCallback, =]
[=, null, ;, }, }, void, visitOrMaybeActivate, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[void, visitOrMaybeActivate, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isActive, (, ), ), {]
[void, visitOrMaybeActivate, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isActive, (, ), ), {]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, isActive, (, ), ), {, callback, ., visit, (]
[Node, n, ,, Node, parent, ), {, if, (, isActive, (, ), ), {, callback, ., visit, (, t, ,]
[,, Node, parent, ), {, if, (, isActive, (, ), ), {, callback, ., visit, (, t, ,, n, ,]
[isActive, (, ), ), {, callback, ., visit, (, t, ,, n, ,, parent, ), ;, }, else, if, (]
[isActive, (, ), ), {, callback, ., visit, (, t, ,, n, ,, parent, ), ;, }, else, if, (]
[), ), {, callback, ., visit, (, t, ,, n, ,, parent, ), ;, }, else, if, (, waiting, ==]
[callback, ., visit, (, t, ,, n, ,, parent, ), ;, }, else, if, (, waiting, ==, n, ), {]
[visit, (, t, ,, n, ,, parent, ), ;, }, else, if, (, waiting, ==, n, ), {, waiting, =]
[=, null, ;, }, }, void, shouldTraverseIfActive, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[=, null, ;, }, }, void, shouldTraverseIfActive, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, void, shouldTraverseIfActive, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isActive, (, ), &&]
[void, shouldTraverseIfActive, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isActive, (, ), &&, !]
[void, shouldTraverseIfActive, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isActive, (, ), &&, !]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, isActive, (, ), &&, !, callback, ., shouldTraverse, (]
[Node, n, ,, Node, parent, ), {, if, (, isActive, (, ), &&, !, callback, ., shouldTraverse, (, t, ,]
[,, Node, parent, ), {, if, (, isActive, (, ), &&, !, callback, ., shouldTraverse, (, t, ,, n, ,]
[{, if, (, isActive, (, ), &&, !, callback, ., shouldTraverse, (, t, ,, n, ,, parent, ), ), {]
[(, isActive, (, ), &&, !, callback, ., shouldTraverse, (, t, ,, n, ,, parent, ), ), {, waiting, =]
[,, parent, ), ), {, waiting, =, n, ;, }, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (]
[,, parent, ), ), {, waiting, =, n, ;, }, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (]
[{, waiting, =, n, ;, }, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&]
[{, waiting, =, n, ;, }, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&]
[=, n, ;, }, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&, scopedCallback, !=]
[}, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&, scopedCallback, !=, null, ), {]
[}, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&, scopedCallback, !=, null, ), {]
[(, NodeTraversal, t, ), {, if, (, isActive, (, ), &&, scopedCallback, !=, null, ), {, scopedCallback, ., enterScope, (]
[), {, scopedCallback, ., enterScope, (, t, ), ;, }, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {, if, (]
[), {, scopedCallback, ., enterScope, (, t, ), ;, }, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {, if, (]
[enterScope, (, t, ), ;, }, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&]
[enterScope, (, t, ), ;, }, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&]
[t, ), ;, }, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&, scopedCallback, !=]
[}, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&, scopedCallback, !=, null, ), {]
[}, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&, scopedCallback, !=, null, ), {]
[(, NodeTraversal, t, ), {, if, (, isActive, (, ), &&, scopedCallback, !=, null, ), {, scopedCallback, ., exitScope, (]
[scopedCallback, !=, null, ), {, scopedCallback, ., exitScope, (, t, ), ;, }, }, boolean, isActive, (, ), {, return]
[scopedCallback, !=, null, ), {, scopedCallback, ., exitScope, (, t, ), ;, }, }, boolean, isActive, (, ), {, return]
[null, ), {, scopedCallback, ., exitScope, (, t, ), ;, }, }, boolean, isActive, (, ), {, return, waiting, ==]
[waiting, ==, null, ;, }, }, @, Override, public, final, void, process, (, Node, externs, ,, Node, root, ), {]
[waiting, ==, null, ;, }, }, @, Override, public, final, void, process, (, Node, externs, ,, Node, root, ), {]
[}, }, @, Override, public, final, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[@, Override, public, final, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[public, final, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[,, root, ,, this, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[,, root, ,, this, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (, compiler, ,, scriptRoot, ,]
[Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, for, (, CallbackWrapper, callback, :]
[shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {]
[shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {]
[,, Node, n, ,, Node, parent, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {, callback, ., shouldTraverseIfActive, (]
[n, ,, Node, parent, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {, callback, ., shouldTraverseIfActive, (, t, ,]
[Node, parent, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {, callback, ., shouldTraverseIfActive, (, t, ,, n, ,]
[(, CallbackWrapper, callback, :, callbacks, ), {, callback, ., shouldTraverseIfActive, (, t, ,, n, ,, parent, ), ;, }, return]
[Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, for, (, CallbackWrapper, callback, :]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {]
[,, Node, n, ,, Node, parent, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {, callback, ., visitOrMaybeActivate, (]
[n, ,, Node, parent, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {, callback, ., visitOrMaybeActivate, (, t, ,]
[Node, parent, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {, callback, ., visitOrMaybeActivate, (, t, ,, n, ,]
[parent, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, for, (, CallbackWrapper, callback, :]
[}, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {]
[}, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {]
[public, void, enterScope, (, NodeTraversal, t, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {, callback, ., enterScopeIfActive, (]
[t, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, for, (, CallbackWrapper, callback, :]
[}, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {]
[}, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {]
[public, void, exitScope, (, NodeTraversal, t, ), {, for, (, CallbackWrapper, callback, :, callbacks, ), {, callback, ., exitScopeIfActive, (]
