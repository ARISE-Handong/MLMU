[;, private, boolean, alreadyRun, =, false, ;, @, VisibleForTesting, public, static, final, String, MAIN_FUNCTION_NAME, =, "{main}", ;, private, Function, mainFunction]
[;, @, VisibleForTesting, public, static, final, String, MAIN_FUNCTION_NAME, =, "{main}", ;, private, Function, mainFunction, ;, public, CallGraph, (, AbstractCompiler, compiler]
[;, private, Function, mainFunction, ;, public, CallGraph, (, AbstractCompiler, compiler, ,, boolean, computeForwardGraph, ,, boolean, computeBackwardGraph, ), {, Preconditions, .]
[;, this, ., compiler, =, compiler, ;, this, ., computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;, callsitesByNode]
[., checkArgument, (, computeForwardGraph, ||, computeBackwardGraph, ), ;, this, ., compiler, =, compiler, ;, this, ., computeForwardGraph, =, computeForwardGraph, ;]
[), ;, this, ., compiler, =, compiler, ;, this, ., computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;]
[||, computeBackwardGraph, ), ;, this, ., compiler, =, compiler, ;, this, ., computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =]
[), ;, this, ., compiler, =, compiler, ;, this, ., computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;]
[=, compiler, ;, this, ., computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;, callsitesByNode, =, Maps, ., newLinkedHashMap]
[., compiler, =, compiler, ;, this, ., computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;, callsitesByNode, =, Maps]
[;, this, ., computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;, callsitesByNode, =, Maps, ., newLinkedHashMap, (, )]
[=, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;, callsitesByNode, =, Maps, ., newLinkedHashMap, (, ), ;, functionsByNode, =, Maps]
[., computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;, callsitesByNode, =, Maps, ., newLinkedHashMap, (, ), ;, functionsByNode]
[;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;, callsitesByNode, =, Maps, ., newLinkedHashMap, (, ), ;, functionsByNode, =, Maps, ., newLinkedHashMap]
[=, computeBackwardGraph, ;, callsitesByNode, =, Maps, ., newLinkedHashMap, (, ), ;, functionsByNode, =, Maps, ., newLinkedHashMap, (, ), ;, }]
[., computeBackwardGraph, =, computeBackwardGraph, ;, callsitesByNode, =, Maps, ., newLinkedHashMap, (, ), ;, functionsByNode, =, Maps, ., newLinkedHashMap, (, )]
[;, callsitesByNode, =, Maps, ., newLinkedHashMap, (, ), ;, functionsByNode, =, Maps, ., newLinkedHashMap, (, ), ;, }, public, CallGraph]
[=, Maps, ., newLinkedHashMap, (, ), ;, functionsByNode, =, Maps, ., newLinkedHashMap, (, ), ;, }, public, CallGraph, (, AbstractCompiler]
[;, functionsByNode, =, Maps, ., newLinkedHashMap, (, ), ;, }, public, CallGraph, (, AbstractCompiler, compiler, ), {, this, (, compiler]
[., newLinkedHashMap, (, ), ;, functionsByNode, =, Maps, ., newLinkedHashMap, (, ), ;, }, public, CallGraph, (, AbstractCompiler, compiler, )]
[=, Maps, ., newLinkedHashMap, (, ), ;, }, public, CallGraph, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, true]
[;, }, public, CallGraph, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, true, ,, true, ), ;, }, @]
[., newLinkedHashMap, (, ), ;, }, public, CallGraph, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, true, ,, true]
[,, true, ,, true, ), ;, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {]
[,, true, ), ;, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, .]
[), ;, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (]
[;, DefinitionProvider, definitionProvider, =, constructDefinitionProvider, (, externsRoot, ,, jsRoot, ), ;, createFunctionsAndCallsites, (, jsRoot, ,, definitionProvider, ), ;, fillInFunctionInformation, (]
[., checkState, (, alreadyRun, ==, false, ), ;, DefinitionProvider, definitionProvider, =, constructDefinitionProvider, (, externsRoot, ,, jsRoot, ), ;, createFunctionsAndCallsites, (]
[), ;, DefinitionProvider, definitionProvider, =, constructDefinitionProvider, (, externsRoot, ,, jsRoot, ), ;, createFunctionsAndCallsites, (, jsRoot, ,, definitionProvider, ), ;, fillInFunctionInformation]
[==, false, ), ;, DefinitionProvider, definitionProvider, =, constructDefinitionProvider, (, externsRoot, ,, jsRoot, ), ;, createFunctionsAndCallsites, (, jsRoot, ,, definitionProvider, )]
[), ;, DefinitionProvider, definitionProvider, =, constructDefinitionProvider, (, externsRoot, ,, jsRoot, ), ;, createFunctionsAndCallsites, (, jsRoot, ,, definitionProvider, ), ;, fillInFunctionInformation]
[;, createFunctionsAndCallsites, (, jsRoot, ,, definitionProvider, ), ;, fillInFunctionInformation, (, definitionProvider, ), ;, alreadyRun, =, true, ;, }, public, Function]
[,, jsRoot, ), ;, createFunctionsAndCallsites, (, jsRoot, ,, definitionProvider, ), ;, fillInFunctionInformation, (, definitionProvider, ), ;, alreadyRun, =, true, ;]
[), ;, createFunctionsAndCallsites, (, jsRoot, ,, definitionProvider, ), ;, fillInFunctionInformation, (, definitionProvider, ), ;, alreadyRun, =, true, ;, }, public]
[;, fillInFunctionInformation, (, definitionProvider, ), ;, alreadyRun, =, true, ;, }, public, Function, getFunctionForAstNode, (, Node, functionNode, ), {, Preconditions]
[,, definitionProvider, ), ;, fillInFunctionInformation, (, definitionProvider, ), ;, alreadyRun, =, true, ;, }, public, Function, getFunctionForAstNode, (, Node, functionNode]
[), ;, fillInFunctionInformation, (, definitionProvider, ), ;, alreadyRun, =, true, ;, }, public, Function, getFunctionForAstNode, (, Node, functionNode, ), {]
[;, alreadyRun, =, true, ;, }, public, Function, getFunctionForAstNode, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode, .]
[), ;, alreadyRun, =, true, ;, }, public, Function, getFunctionForAstNode, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode]
[=, true, ;, }, public, Function, getFunctionForAstNode, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode, ., isFunction, (]
[;, }, public, Function, getFunctionForAstNode, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode, ., isFunction, (, ), )]
[;, return, functionsByNode, ., get, (, functionNode, ), ;, }, public, Function, getMainFunction, (, ), {, return, mainFunction, ;, }]
[., checkArgument, (, functionNode, ., isFunction, (, ), ), ;, return, functionsByNode, ., get, (, functionNode, ), ;, }, public]
[), ;, return, functionsByNode, ., get, (, functionNode, ), ;, }, public, Function, getMainFunction, (, ), {, return, mainFunction, ;]
[., isFunction, (, ), ), ;, return, functionsByNode, ., get, (, functionNode, ), ;, }, public, Function, getMainFunction, (, )]
[;, }, public, Function, getMainFunction, (, ), {, return, mainFunction, ;, }, public, Collection, <, Function, >, getAllFunctions, (, )]
[., get, (, functionNode, ), ;, }, public, Function, getMainFunction, (, ), {, return, mainFunction, ;, }, public, Collection, <]
[), ;, }, public, Function, getMainFunction, (, ), {, return, mainFunction, ;, }, public, Collection, <, Function, >, getAllFunctions, (]
[;, }, public, Collection, <, Function, >, getAllFunctions, (, ), {, return, functionsByNode, ., values, (, ), ;, }, @]
[;, }, @, VisibleForTesting, public, Function, getUniqueFunctionWithName, (, final, String, desiredName, ), {, Collection, <, Function, >, functions, =, Collections2]
[., values, (, ), ;, }, @, VisibleForTesting, public, Function, getUniqueFunctionWithName, (, final, String, desiredName, ), {, Collection, <, Function]
[;, if, (, functions, ., size, (, ), ==, 1, ), {, return, functions, ., iterator, (, ), ., next]
[., <, Function, >, filter, (, getAllFunctions, (, ), ,, new, Predicate, <, Function, >, (, ), {, @, Override]
[,, new, Predicate, <, Function, >, (, ), {, @, Override, public, boolean, apply, (, Function, function, ), {, String]
[), ;, if, (, functions, ., size, (, ), ==, 1, ), {, return, functions, ., iterator, (, ), .]
[;, if, (, functionName, !=, null, &&, desiredName, !=, null, ), {, return, desiredName, ., equals, (, functionName, ), ;]
[., getName, (, ), ;, if, (, functionName, !=, null, &&, desiredName, !=, null, ), {, return, desiredName, ., equals]
[), {, return, desiredName, ., equals, (, functionName, ), ;, }, else, {, return, desiredName, ==, functionName, ;, }, }]
[&&, desiredName, !=, null, ), {, return, desiredName, ., equals, (, functionName, ), ;, }, else, {, return, desiredName, ==]
[!=, null, &&, desiredName, !=, null, ), {, return, desiredName, ., equals, (, functionName, ), ;, }, else, {, return]
[&&, desiredName, !=, null, ), {, return, desiredName, ., equals, (, functionName, ), ;, }, else, {, return, desiredName, ==]
[), {, return, desiredName, ., equals, (, functionName, ), ;, }, else, {, return, desiredName, ==, functionName, ;, }, }]
[!=, null, ), {, return, desiredName, ., equals, (, functionName, ), ;, }, else, {, return, desiredName, ==, functionName, ;]
[), {, return, desiredName, ., equals, (, functionName, ), ;, }, else, {, return, desiredName, ==, functionName, ;, }, }]
[;, }, else, {, return, desiredName, ==, functionName, ;, }, }, }, ), ;, if, (, functions, ., size, (]
[., equals, (, functionName, ), ;, }, else, {, return, desiredName, ==, functionName, ;, }, }, }, ), ;, if]
[), ;, }, else, {, return, desiredName, ==, functionName, ;, }, }, }, ), ;, if, (, functions, ., size]
[;, }, }, }, ), ;, if, (, functions, ., size, (, ), ==, 1, ), {, return, functions, .]
[==, functionName, ;, }, }, }, ), ;, if, (, functions, ., size, (, ), ==, 1, ), {, return]
[;, }, }, }, ), ;, if, (, functions, ., size, (, ), ==, 1, ), {, return, functions, .]
[), {, return, functions, ., iterator, (, ), ., next, (, ), ;, }, else, {, throw, new, IllegalStateException, (]
[==, 1, ), {, return, functions, ., iterator, (, ), ., next, (, ), ;, }, else, {, throw, new]
[., size, (, ), ==, 1, ), {, return, functions, ., iterator, (, ), ., next, (, ), ;, }]
[), {, return, functions, ., iterator, (, ), ., next, (, ), ;, }, else, {, throw, new, IllegalStateException, (]
[;, }, else, {, throw, new, IllegalStateException, (, "Found ", +, functions, ., size, (, ), +, " functions with name ", +, desiredName, )]
[., next, (, ), ;, }, else, {, throw, new, IllegalStateException, (, "Found ", +, functions, ., size, (, ), +]
[., iterator, (, ), ., next, (, ), ;, }, else, {, throw, new, IllegalStateException, (, "Found ", +, functions, .]
[;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {, Preconditions, ., checkArgument, (, callsiteNode, ., isCall, (, )]
[), ;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {, Preconditions, ., checkArgument, (, callsiteNode, ., isCall, (]
[+, desiredName, ), ;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {, Preconditions, ., checkArgument, (, callsiteNode, .]
[+, " functions with name ", +, desiredName, ), ;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {, Preconditions, ., checkArgument, (]
[+, functions, ., size, (, ), +, " functions with name ", +, desiredName, ), ;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode]
[+, " functions with name ", +, desiredName, ), ;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {, Preconditions, ., checkArgument, (]
[., size, (, ), +, " functions with name ", +, desiredName, ), ;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {]
[+, desiredName, ), ;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {, Preconditions, ., checkArgument, (, callsiteNode, .]
[), ;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {, Preconditions, ., checkArgument, (, callsiteNode, ., isCall, (]
[;, return, callsitesByNode, ., get, (, callsiteNode, ), ;, }, public, Collection, <, Callsite, >, getAllCallsites, (, ), {, return]
[., checkArgument, (, callsiteNode, ., isCall, (, ), ||, callsiteNode, ., isNew, (, ), ), ;, return, callsitesByNode, ., get]
[), ;, return, callsitesByNode, ., get, (, callsiteNode, ), ;, }, public, Collection, <, Callsite, >, getAllCallsites, (, ), {]
[||, callsiteNode, ., isNew, (, ), ), ;, return, callsitesByNode, ., get, (, callsiteNode, ), ;, }, public, Collection, <]
[., isCall, (, ), ||, callsiteNode, ., isNew, (, ), ), ;, return, callsitesByNode, ., get, (, callsiteNode, ), ;]
[), ;, return, callsitesByNode, ., get, (, callsiteNode, ), ;, }, public, Collection, <, Callsite, >, getAllCallsites, (, ), {]
[., isNew, (, ), ), ;, return, callsitesByNode, ., get, (, callsiteNode, ), ;, }, public, Collection, <, Callsite, >]
[;, }, public, Collection, <, Callsite, >, getAllCallsites, (, ), {, return, callsitesByNode, ., values, (, ), ;, }, private]
[., get, (, callsiteNode, ), ;, }, public, Collection, <, Callsite, >, getAllCallsites, (, ), {, return, callsitesByNode, ., values]
[), ;, }, public, Collection, <, Callsite, >, getAllCallsites, (, ), {, return, callsitesByNode, ., values, (, ), ;, }]
[;, }, private, void, createFunctionsAndCallsites, (, Node, jsRoot, ,, final, DefinitionProvider, provider, ), {, mainFunction, =, createFunction, (, jsRoot, )]
[., values, (, ), ;, }, private, void, createFunctionsAndCallsites, (, Node, jsRoot, ,, final, DefinitionProvider, provider, ), {, mainFunction, =]
[=, createFunction, (, jsRoot, ), ;, NodeTraversal, ., traverse, (, compiler, ,, jsRoot, ,, new, AbstractPostOrderCallback, (, ), {, @]
[;, NodeTraversal, ., traverse, (, compiler, ,, jsRoot, ,, new, AbstractPostOrderCallback, (, ), {, @, Override, public, void, visit, (]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, jsRoot, ,, new, AbstractPostOrderCallback, (, ), {, @, Override, public, void, visit]
[;, }, private, Function, createFunction, (, Node, functionNode, ), {, Function, function, =, new, Function, (, functionNode, ), ;, functionsByNode]
[., traverse, (, compiler, ,, jsRoot, ,, new, AbstractPostOrderCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t]
[,, jsRoot, ,, new, AbstractPostOrderCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[,, new, AbstractPostOrderCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), ;, }, private, Function, createFunction, (, Node, functionNode, ), {, Function, function, =, new, Function, (, functionNode, ), ;]
[;, if, (, nodeType, ==, Token, ., CALL, ||, nodeType, ==, Token, ., NEW, ), {, Callsite, callsite, =, createCallsite]
[., getType, (, ), ;, if, (, nodeType, ==, Token, ., CALL, ||, nodeType, ==, Token, ., NEW, ), {]
[), {, Callsite, callsite, =, createCallsite, (, n, ), ;, Node, containingFunctionNode, =, t, ., getScopeRoot, (, ), ;, Function]
[||, nodeType, ==, Token, ., NEW, ), {, Callsite, callsite, =, createCallsite, (, n, ), ;, Node, containingFunctionNode, =, t]
[==, Token, ., CALL, ||, nodeType, ==, Token, ., NEW, ), {, Callsite, callsite, =, createCallsite, (, n, ), ;]
[||, nodeType, ==, Token, ., NEW, ), {, Callsite, callsite, =, createCallsite, (, n, ), ;, Node, containingFunctionNode, =, t]
[., CALL, ||, nodeType, ==, Token, ., NEW, ), {, Callsite, callsite, =, createCallsite, (, n, ), ;, Node, containingFunctionNode]
[), {, Callsite, callsite, =, createCallsite, (, n, ), ;, Node, containingFunctionNode, =, t, ., getScopeRoot, (, ), ;, Function]
[==, Token, ., NEW, ), {, Callsite, callsite, =, createCallsite, (, n, ), ;, Node, containingFunctionNode, =, t, ., getScopeRoot]
[), {, Callsite, callsite, =, createCallsite, (, n, ), ;, Node, containingFunctionNode, =, t, ., getScopeRoot, (, ), ;, Function]
[., NEW, ), {, Callsite, callsite, =, createCallsite, (, n, ), ;, Node, containingFunctionNode, =, t, ., getScopeRoot, (, )]
[;, Node, containingFunctionNode, =, t, ., getScopeRoot, (, ), ;, Function, containingFunction, =, functionsByNode, ., get, (, containingFunctionNode, ), ;]
[), ;, Node, containingFunctionNode, =, t, ., getScopeRoot, (, ), ;, Function, containingFunction, =, functionsByNode, ., get, (, containingFunctionNode, )]
[;, Function, containingFunction, =, functionsByNode, ., get, (, containingFunctionNode, ), ;, if, (, containingFunction, ==, null, ), {, containingFunction, =]
[., getScopeRoot, (, ), ;, Function, containingFunction, =, functionsByNode, ., get, (, containingFunctionNode, ), ;, if, (, containingFunction, ==, null]
[;, if, (, containingFunction, ==, null, ), {, containingFunction, =, createFunction, (, containingFunctionNode, ), ;, }, callsite, ., containingFunction, =]
[., get, (, containingFunctionNode, ), ;, if, (, containingFunction, ==, null, ), {, containingFunction, =, createFunction, (, containingFunctionNode, ), ;]
[), ;, if, (, containingFunction, ==, null, ), {, containingFunction, =, createFunction, (, containingFunctionNode, ), ;, }, callsite, ., containingFunction]
[), {, containingFunction, =, createFunction, (, containingFunctionNode, ), ;, }, callsite, ., containingFunction, =, containingFunction, ;, containingFunction, ., addCallsiteInFunction, (]
[==, null, ), {, containingFunction, =, createFunction, (, containingFunctionNode, ), ;, }, callsite, ., containingFunction, =, containingFunction, ;, containingFunction, .]
[), {, containingFunction, =, createFunction, (, containingFunctionNode, ), ;, }, callsite, ., containingFunction, =, containingFunction, ;, containingFunction, ., addCallsiteInFunction, (]
[=, createFunction, (, containingFunctionNode, ), ;, }, callsite, ., containingFunction, =, containingFunction, ;, containingFunction, ., addCallsiteInFunction, (, callsite, ), ;]
[;, }, callsite, ., containingFunction, =, containingFunction, ;, containingFunction, ., addCallsiteInFunction, (, callsite, ), ;, connectCallsiteToTargets, (, callsite, ,, provider]
[), ;, }, callsite, ., containingFunction, =, containingFunction, ;, containingFunction, ., addCallsiteInFunction, (, callsite, ), ;, connectCallsiteToTargets, (, callsite, ,]
[=, containingFunction, ;, containingFunction, ., addCallsiteInFunction, (, callsite, ), ;, connectCallsiteToTargets, (, callsite, ,, provider, ), ;, }, else, if]
[., containingFunction, =, containingFunction, ;, containingFunction, ., addCallsiteInFunction, (, callsite, ), ;, connectCallsiteToTargets, (, callsite, ,, provider, ), ;, }]
[;, containingFunction, ., addCallsiteInFunction, (, callsite, ), ;, connectCallsiteToTargets, (, callsite, ,, provider, ), ;, }, else, if, (, n]
[;, connectCallsiteToTargets, (, callsite, ,, provider, ), ;, }, else, if, (, n, ., isFunction, (, ), ), {, if]
[., addCallsiteInFunction, (, callsite, ), ;, connectCallsiteToTargets, (, callsite, ,, provider, ), ;, }, else, if, (, n, ., isFunction]
[), ;, connectCallsiteToTargets, (, callsite, ,, provider, ), ;, }, else, if, (, n, ., isFunction, (, ), ), {]
[;, }, else, if, (, n, ., isFunction, (, ), ), {, if, (, !, functionsByNode, ., containsKey, (, n]
[,, provider, ), ;, }, else, if, (, n, ., isFunction, (, ), ), {, if, (, !, functionsByNode, .]
[), ;, }, else, if, (, n, ., isFunction, (, ), ), {, if, (, !, functionsByNode, ., containsKey, (]
[), {, if, (, !, functionsByNode, ., containsKey, (, n, ), ), {, createFunction, (, n, ), ;, }, }]
[., isFunction, (, ), ), {, if, (, !, functionsByNode, ., containsKey, (, n, ), ), {, createFunction, (, n]
[), {, createFunction, (, n, ), ;, }, }, }, }, ), ;, }, private, Function, createFunction, (, Node, functionNode]
[), {, createFunction, (, n, ), ;, }, }, }, }, ), ;, }, private, Function, createFunction, (, Node, functionNode]
[., containsKey, (, n, ), ), {, createFunction, (, n, ), ;, }, }, }, }, ), ;, }, private]
[), ), {, createFunction, (, n, ), ;, }, }, }, }, ), ;, }, private, Function, createFunction, (, Node]
[;, }, }, }, }, ), ;, }, private, Function, createFunction, (, Node, functionNode, ), {, Function, function, =, new]
[), ;, }, }, }, }, ), ;, }, private, Function, createFunction, (, Node, functionNode, ), {, Function, function, =]
[;, functionsByNode, ., put, (, functionNode, ,, function, ), ;, return, function, ;, }, private, Callsite, createCallsite, (, Node, callsiteNode]
[), ;, functionsByNode, ., put, (, functionNode, ,, function, ), ;, return, function, ;, }, private, Callsite, createCallsite, (, Node]
[;, return, function, ;, }, private, Callsite, createCallsite, (, Node, callsiteNode, ), {, Callsite, callsite, =, new, Callsite, (, callsiteNode]
[., put, (, functionNode, ,, function, ), ;, return, function, ;, }, private, Callsite, createCallsite, (, Node, callsiteNode, ), {]
[,, function, ), ;, return, function, ;, }, private, Callsite, createCallsite, (, Node, callsiteNode, ), {, Callsite, callsite, =, new]
[), ;, return, function, ;, }, private, Callsite, createCallsite, (, Node, callsiteNode, ), {, Callsite, callsite, =, new, Callsite, (]
[;, }, private, Callsite, createCallsite, (, Node, callsiteNode, ), {, Callsite, callsite, =, new, Callsite, (, callsiteNode, ), ;, callsitesByNode]
[;, callsitesByNode, ., put, (, callsiteNode, ,, callsite, ), ;, return, callsite, ;, }, private, void, connectCallsiteToTargets, (, Callsite, callsite]
[), ;, callsitesByNode, ., put, (, callsiteNode, ,, callsite, ), ;, return, callsite, ;, }, private, void, connectCallsiteToTargets, (, Callsite]
[;, return, callsite, ;, }, private, void, connectCallsiteToTargets, (, Callsite, callsite, ,, DefinitionProvider, definitionProvider, ), {, Collection, <, Definition, >]
[., put, (, callsiteNode, ,, callsite, ), ;, return, callsite, ;, }, private, void, connectCallsiteToTargets, (, Callsite, callsite, ,, DefinitionProvider]
[,, callsite, ), ;, return, callsite, ;, }, private, void, connectCallsiteToTargets, (, Callsite, callsite, ,, DefinitionProvider, definitionProvider, ), {, Collection]
[), ;, return, callsite, ;, }, private, void, connectCallsiteToTargets, (, Callsite, callsite, ,, DefinitionProvider, definitionProvider, ), {, Collection, <, Definition]
[;, }, private, void, connectCallsiteToTargets, (, Callsite, callsite, ,, DefinitionProvider, definitionProvider, ), {, Collection, <, Definition, >, definitions, =, lookupDefinitionsForTargetsOfCall]
[;, if, (, definitions, ==, null, ), {, callsite, ., hasUnknownTarget, =, true, ;, }, else, {, for, (, Definition]
[,, definitionProvider, ), ;, if, (, definitions, ==, null, ), {, callsite, ., hasUnknownTarget, =, true, ;, }, else, {]
[., getAstNode, (, ), ,, definitionProvider, ), ;, if, (, definitions, ==, null, ), {, callsite, ., hasUnknownTarget, =, true]
[), ;, if, (, definitions, ==, null, ), {, callsite, ., hasUnknownTarget, =, true, ;, }, else, {, for, (]
[), {, callsite, ., hasUnknownTarget, =, true, ;, }, else, {, for, (, Definition, definition, :, definitions, ), {, if]
[==, null, ), {, callsite, ., hasUnknownTarget, =, true, ;, }, else, {, for, (, Definition, definition, :, definitions, )]
[), {, callsite, ., hasUnknownTarget, =, true, ;, }, else, {, for, (, Definition, definition, :, definitions, ), {, if]
[=, true, ;, }, else, {, for, (, Definition, definition, :, definitions, ), {, if, (, definition, ., isExtern, (]
[., hasUnknownTarget, =, true, ;, }, else, {, for, (, Definition, definition, :, definitions, ), {, if, (, definition, .]
[;, }, else, {, for, (, Definition, definition, :, definitions, ), {, if, (, definition, ., isExtern, (, ), )]
[), {, if, (, definition, ., isExtern, (, ), ), {, callsite, ., hasExternTarget, =, true, ;, }, else, {]
[), {, callsite, ., hasExternTarget, =, true, ;, }, else, {, Node, target, =, definition, ., getRValue, (, ), ;]
[., isExtern, (, ), ), {, callsite, ., hasExternTarget, =, true, ;, }, else, {, Node, target, =, definition, .]
[=, true, ;, }, else, {, Node, target, =, definition, ., getRValue, (, ), ;, if, (, target, !=, null]
[., hasExternTarget, =, true, ;, }, else, {, Node, target, =, definition, ., getRValue, (, ), ;, if, (, target]
[;, }, else, {, Node, target, =, definition, ., getRValue, (, ), ;, if, (, target, !=, null, &&, target]
[;, if, (, target, !=, null, &&, target, ., isFunction, (, ), ), {, Function, targetFunction, =, functionsByNode, ., get]
[., getRValue, (, ), ;, if, (, target, !=, null, &&, target, ., isFunction, (, ), ), {, Function, targetFunction]
[), {, Function, targetFunction, =, functionsByNode, ., get, (, target, ), ;, if, (, targetFunction, ==, null, ), {, targetFunction]
[&&, target, ., isFunction, (, ), ), {, Function, targetFunction, =, functionsByNode, ., get, (, target, ), ;, if, (]
[!=, null, &&, target, ., isFunction, (, ), ), {, Function, targetFunction, =, functionsByNode, ., get, (, target, ), ;]
[&&, target, ., isFunction, (, ), ), {, Function, targetFunction, =, functionsByNode, ., get, (, target, ), ;, if, (]
[), {, Function, targetFunction, =, functionsByNode, ., get, (, target, ), ;, if, (, targetFunction, ==, null, ), {, targetFunction]
[., isFunction, (, ), ), {, Function, targetFunction, =, functionsByNode, ., get, (, target, ), ;, if, (, targetFunction, ==]
[;, if, (, targetFunction, ==, null, ), {, targetFunction, =, createFunction, (, target, ), ;, }, if, (, computeForwardGraph, )]
[., get, (, target, ), ;, if, (, targetFunction, ==, null, ), {, targetFunction, =, createFunction, (, target, ), ;]
[), ;, if, (, targetFunction, ==, null, ), {, targetFunction, =, createFunction, (, target, ), ;, }, if, (, computeForwardGraph]
[), {, targetFunction, =, createFunction, (, target, ), ;, }, if, (, computeForwardGraph, ), {, callsite, ., addPossibleTarget, (, targetFunction]
[==, null, ), {, targetFunction, =, createFunction, (, target, ), ;, }, if, (, computeForwardGraph, ), {, callsite, ., addPossibleTarget]
[), {, targetFunction, =, createFunction, (, target, ), ;, }, if, (, computeForwardGraph, ), {, callsite, ., addPossibleTarget, (, targetFunction]
[=, createFunction, (, target, ), ;, }, if, (, computeForwardGraph, ), {, callsite, ., addPossibleTarget, (, targetFunction, ), ;, }]
[;, }, if, (, computeForwardGraph, ), {, callsite, ., addPossibleTarget, (, targetFunction, ), ;, }, if, (, computeBackwardGraph, ), {]
[), ;, }, if, (, computeForwardGraph, ), {, callsite, ., addPossibleTarget, (, targetFunction, ), ;, }, if, (, computeBackwardGraph, )]
[), {, callsite, ., addPossibleTarget, (, targetFunction, ), ;, }, if, (, computeBackwardGraph, ), {, targetFunction, ., addCallsitePossiblyTargetingFunction, (, callsite]
[;, }, if, (, computeBackwardGraph, ), {, targetFunction, ., addCallsitePossiblyTargetingFunction, (, callsite, ), ;, }, }, else, {, callsite, .]
[., addPossibleTarget, (, targetFunction, ), ;, }, if, (, computeBackwardGraph, ), {, targetFunction, ., addCallsitePossiblyTargetingFunction, (, callsite, ), ;, }]
[), ;, }, if, (, computeBackwardGraph, ), {, targetFunction, ., addCallsitePossiblyTargetingFunction, (, callsite, ), ;, }, }, else, {, callsite]
[), {, targetFunction, ., addCallsitePossiblyTargetingFunction, (, callsite, ), ;, }, }, else, {, callsite, ., hasUnknownTarget, =, true, ;, }]
[;, }, }, else, {, callsite, ., hasUnknownTarget, =, true, ;, }, }, }, }, }, private, void, fillInFunctionInformation, (]
[., addCallsitePossiblyTargetingFunction, (, callsite, ), ;, }, }, else, {, callsite, ., hasUnknownTarget, =, true, ;, }, }, }, }]
[), ;, }, }, else, {, callsite, ., hasUnknownTarget, =, true, ;, }, }, }, }, }, private, void, fillInFunctionInformation]
[=, true, ;, }, }, }, }, }, private, void, fillInFunctionInformation, (, DefinitionProvider, provider, ), {, if, (, useNameReferenceGraph, )]
[., hasUnknownTarget, =, true, ;, }, }, }, }, }, private, void, fillInFunctionInformation, (, DefinitionProvider, provider, ), {, if, (]
[;, }, }, }, }, }, private, void, fillInFunctionInformation, (, DefinitionProvider, provider, ), {, if, (, useNameReferenceGraph, ), {, NameReferenceGraph]
[), {, NameReferenceGraph, referenceGraph, =, (, NameReferenceGraph, ), provider, ;, for, (, Function, function, :, getAllFunctions, (, ), ), {]
[;, for, (, Function, function, :, getAllFunctions, (, ), ), {, if, (, !, function, ., isMain, (, ), )]
[;, for, (, Function, function, :, getAllFunctions, (, ), ), {, if, (, !, function, ., isMain, (, ), )]
[), {, if, (, !, function, ., isMain, (, ), ), {, String, functionName, =, function, ., getName, (, )]
[), {, String, functionName, =, function, ., getName, (, ), ;, if, (, functionName, !=, null, ), {, Name, symbol]
[), {, String, functionName, =, function, ., getName, (, ), ;, if, (, functionName, !=, null, ), {, Name, symbol]
[., isMain, (, ), ), {, String, functionName, =, function, ., getName, (, ), ;, if, (, functionName, !=, null]
[;, if, (, functionName, !=, null, ), {, Name, symbol, =, referenceGraph, ., getSymbol, (, functionName, ), ;, updateFunctionForName, (]
[., getName, (, ), ;, if, (, functionName, !=, null, ), {, Name, symbol, =, referenceGraph, ., getSymbol, (, functionName]
[), {, Name, symbol, =, referenceGraph, ., getSymbol, (, functionName, ), ;, updateFunctionForName, (, function, ,, symbol, ), ;, }]
[!=, null, ), {, Name, symbol, =, referenceGraph, ., getSymbol, (, functionName, ), ;, updateFunctionForName, (, function, ,, symbol, )]
[), {, Name, symbol, =, referenceGraph, ., getSymbol, (, functionName, ), ;, updateFunctionForName, (, function, ,, symbol, ), ;, }]
[;, updateFunctionForName, (, function, ,, symbol, ), ;, }, }, }, }, else, {, SimpleDefinitionFinder, finder, =, (, SimpleDefinitionFinder, )]
[., getSymbol, (, functionName, ), ;, updateFunctionForName, (, function, ,, symbol, ), ;, }, }, }, }, else, {, SimpleDefinitionFinder]
[), ;, updateFunctionForName, (, function, ,, symbol, ), ;, }, }, }, }, else, {, SimpleDefinitionFinder, finder, =, (, SimpleDefinitionFinder]
[;, }, }, }, }, else, {, SimpleDefinitionFinder, finder, =, (, SimpleDefinitionFinder, ), provider, ;, for, (, DefinitionSite, definitionSite, :]
[,, symbol, ), ;, }, }, }, }, else, {, SimpleDefinitionFinder, finder, =, (, SimpleDefinitionFinder, ), provider, ;, for, (]
[), ;, }, }, }, }, else, {, SimpleDefinitionFinder, finder, =, (, SimpleDefinitionFinder, ), provider, ;, for, (, DefinitionSite, definitionSite]
[;, for, (, DefinitionSite, definitionSite, :, finder, ., getDefinitionSites, (, ), ), {, Definition, definition, =, definitionSite, ., definition, ;]
[;, for, (, DefinitionSite, definitionSite, :, finder, ., getDefinitionSites, (, ), ), {, Definition, definition, =, definitionSite, ., definition, ;]
[), {, Definition, definition, =, definitionSite, ., definition, ;, Function, function, =, lookupFunctionForDefinition, (, definition, ), ;, if, (, function]
[., getDefinitionSites, (, ), ), {, Definition, definition, =, definitionSite, ., definition, ;, Function, function, =, lookupFunctionForDefinition, (, definition, )]
[;, Function, function, =, lookupFunctionForDefinition, (, definition, ), ;, if, (, function, !=, null, ), {, for, (, UseSite, useSite]
[., definition, ;, Function, function, =, lookupFunctionForDefinition, (, definition, ), ;, if, (, function, !=, null, ), {, for, (]
[;, if, (, function, !=, null, ), {, for, (, UseSite, useSite, :, finder, ., getUseSites, (, definition, ), )]
[), ;, if, (, function, !=, null, ), {, for, (, UseSite, useSite, :, finder, ., getUseSites, (, definition, )]
[), {, for, (, UseSite, useSite, :, finder, ., getUseSites, (, definition, ), ), {, updateFunctionForUse, (, function, ,, useSite]
[!=, null, ), {, for, (, UseSite, useSite, :, finder, ., getUseSites, (, definition, ), ), {, updateFunctionForUse, (, function]
[), {, for, (, UseSite, useSite, :, finder, ., getUseSites, (, definition, ), ), {, updateFunctionForUse, (, function, ,, useSite]
[), {, updateFunctionForUse, (, function, ,, useSite, ., node, ), ;, }, }, }, }, }, private, void, updateFunctionForName, (]
[., getUseSites, (, definition, ), ), {, updateFunctionForUse, (, function, ,, useSite, ., node, ), ;, }, }, }, }]
[), ), {, updateFunctionForUse, (, function, ,, useSite, ., node, ), ;, }, }, }, }, }, private, void, updateFunctionForName]
[;, }, }, }, }, }, private, void, updateFunctionForName, (, Function, function, ,, Name, name, ), {, if, (, name]
[,, useSite, ., node, ), ;, }, }, }, }, }, private, void, updateFunctionForName, (, Function, function, ,, Name, name]
[), ;, }, }, }, }, }, private, void, updateFunctionForName, (, Function, function, ,, Name, name, ), {, if, (]
[., node, ), ;, }, }, }, }, }, private, void, updateFunctionForName, (, Function, function, ,, Name, name, ), {]
[), {, function, ., isAliased, =, true, ;, }, if, (, name, ., exposedToCallOrApply, (, ), ), {, function, .]
[., isAliased, (, ), ), {, function, ., isAliased, =, true, ;, }, if, (, name, ., exposedToCallOrApply, (, )]
[=, true, ;, }, if, (, name, ., exposedToCallOrApply, (, ), ), {, function, ., isExposedToCallOrApply, =, true, ;, }]
[., isAliased, =, true, ;, }, if, (, name, ., exposedToCallOrApply, (, ), ), {, function, ., isExposedToCallOrApply, =, true]
[;, }, if, (, name, ., exposedToCallOrApply, (, ), ), {, function, ., isExposedToCallOrApply, =, true, ;, }, }, private]
[), {, function, ., isExposedToCallOrApply, =, true, ;, }, }, private, void, updateFunctionForUse, (, Function, function, ,, Node, useNode, )]
[., exposedToCallOrApply, (, ), ), {, function, ., isExposedToCallOrApply, =, true, ;, }, }, private, void, updateFunctionForUse, (, Function, function]
[=, true, ;, }, }, private, void, updateFunctionForUse, (, Function, function, ,, Node, useNode, ), {, Node, useParent, =, useNode]
[., isExposedToCallOrApply, =, true, ;, }, }, private, void, updateFunctionForUse, (, Function, function, ,, Node, useNode, ), {, Node, useParent]
[;, }, }, private, void, updateFunctionForUse, (, Function, function, ,, Node, useNode, ), {, Node, useParent, =, useNode, ., getParent]
[;, int, parentType, =, useParent, ., getType, (, ), ;, if, (, (, parentType, ==, Token, ., CALL, ||, parentType]
[., getParent, (, ), ;, int, parentType, =, useParent, ., getType, (, ), ;, if, (, (, parentType, ==, Token]
[;, if, (, (, parentType, ==, Token, ., CALL, ||, parentType, ==, Token, ., NEW, ), &&, useParent, ., getFirstChild]
[., getType, (, ), ;, if, (, (, parentType, ==, Token, ., CALL, ||, parentType, ==, Token, ., NEW, )]
[), {, }, else, if, (, NodeUtil, ., isGet, (, useParent, ), ), {, if, (, useParent, ., isGetProp, (]
[&&, useParent, ., getFirstChild, (, ), ==, useNode, ), {, }, else, if, (, NodeUtil, ., isGet, (, useParent, )]
[), &&, useParent, ., getFirstChild, (, ), ==, useNode, ), {, }, else, if, (, NodeUtil, ., isGet, (, useParent]
[||, parentType, ==, Token, ., NEW, ), &&, useParent, ., getFirstChild, (, ), ==, useNode, ), {, }, else, if]
[==, Token, ., CALL, ||, parentType, ==, Token, ., NEW, ), &&, useParent, ., getFirstChild, (, ), ==, useNode, )]
[||, parentType, ==, Token, ., NEW, ), &&, useParent, ., getFirstChild, (, ), ==, useNode, ), {, }, else, if]
[., CALL, ||, parentType, ==, Token, ., NEW, ), &&, useParent, ., getFirstChild, (, ), ==, useNode, ), {, }]
[), &&, useParent, ., getFirstChild, (, ), ==, useNode, ), {, }, else, if, (, NodeUtil, ., isGet, (, useParent]
[==, Token, ., NEW, ), &&, useParent, ., getFirstChild, (, ), ==, useNode, ), {, }, else, if, (, NodeUtil]
[), &&, useParent, ., getFirstChild, (, ), ==, useNode, ), {, }, else, if, (, NodeUtil, ., isGet, (, useParent]
[., NEW, ), &&, useParent, ., getFirstChild, (, ), ==, useNode, ), {, }, else, if, (, NodeUtil, ., isGet]
[), {, }, else, if, (, NodeUtil, ., isGet, (, useParent, ), ), {, if, (, useParent, ., isGetProp, (]
[==, useNode, ), {, }, else, if, (, NodeUtil, ., isGet, (, useParent, ), ), {, if, (, useParent, .]
[., getFirstChild, (, ), ==, useNode, ), {, }, else, if, (, NodeUtil, ., isGet, (, useParent, ), ), {]
[), {, }, else, if, (, NodeUtil, ., isGet, (, useParent, ), ), {, if, (, useParent, ., isGetProp, (]
[), {, if, (, useParent, ., isGetProp, (, ), ), {, Node, gramps, =, useParent, ., getParent, (, ), ;]
[., isGet, (, useParent, ), ), {, if, (, useParent, ., isGetProp, (, ), ), {, Node, gramps, =, useParent]
[), ), {, if, (, useParent, ., isGetProp, (, ), ), {, Node, gramps, =, useParent, ., getParent, (, )]
[), {, Node, gramps, =, useParent, ., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectApply, (, gramps, ), ||]
[., isGetProp, (, ), ), {, Node, gramps, =, useParent, ., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectApply]
[;, if, (, NodeUtil, ., isFunctionObjectApply, (, gramps, ), ||, NodeUtil, ., isFunctionObjectCall, (, gramps, ), ), {, function, .]
[., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectApply, (, gramps, ), ||, NodeUtil, ., isFunctionObjectCall, (, gramps, )]
[), {, function, ., isExposedToCallOrApply, =, true, ;, }, }, }, else, {, function, ., isAliased, =, true, ;, }]
[||, NodeUtil, ., isFunctionObjectCall, (, gramps, ), ), {, function, ., isExposedToCallOrApply, =, true, ;, }, }, }, else, {]
[., isFunctionObjectApply, (, gramps, ), ||, NodeUtil, ., isFunctionObjectCall, (, gramps, ), ), {, function, ., isExposedToCallOrApply, =, true, ;]
[), ||, NodeUtil, ., isFunctionObjectCall, (, gramps, ), ), {, function, ., isExposedToCallOrApply, =, true, ;, }, }, }, else]
[), {, function, ., isExposedToCallOrApply, =, true, ;, }, }, }, else, {, function, ., isAliased, =, true, ;, }]
[., isFunctionObjectCall, (, gramps, ), ), {, function, ., isExposedToCallOrApply, =, true, ;, }, }, }, else, {, function, .]
[), ), {, function, ., isExposedToCallOrApply, =, true, ;, }, }, }, else, {, function, ., isAliased, =, true, ;]
[=, true, ;, }, }, }, else, {, function, ., isAliased, =, true, ;, }, }, private, Function, lookupFunctionForDefinition, (]
[., isExposedToCallOrApply, =, true, ;, }, }, }, else, {, function, ., isAliased, =, true, ;, }, }, private, Function]
[;, }, }, }, else, {, function, ., isAliased, =, true, ;, }, }, private, Function, lookupFunctionForDefinition, (, Definition, definition]
[=, true, ;, }, }, private, Function, lookupFunctionForDefinition, (, Definition, definition, ), {, if, (, definition, !=, null, &&, !]
[., isAliased, =, true, ;, }, }, private, Function, lookupFunctionForDefinition, (, Definition, definition, ), {, if, (, definition, !=, null]
[;, }, }, private, Function, lookupFunctionForDefinition, (, Definition, definition, ), {, if, (, definition, !=, null, &&, !, definition, .]
[), {, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, !=, null, &&, rValue, ., isFunction]
[&&, !, definition, ., isExtern, (, ), ), {, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[!=, null, &&, !, definition, ., isExtern, (, ), ), {, Node, rValue, =, definition, ., getRValue, (, ), ;]
[&&, !, definition, ., isExtern, (, ), ), {, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[), {, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, !=, null, &&, rValue, ., isFunction]
[), {, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, !=, null, &&, rValue, ., isFunction]
[., isExtern, (, ), ), {, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, !=, null]
[;, if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), ), {, Function, function, =, functionsByNode, ., get]
[., getRValue, (, ), ;, if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), ), {, Function, function]
[), {, Function, function, =, functionsByNode, ., get, (, rValue, ), ;, Preconditions, ., checkNotNull, (, function, ), ;, return]
[&&, rValue, ., isFunction, (, ), ), {, Function, function, =, functionsByNode, ., get, (, rValue, ), ;, Preconditions, .]
[!=, null, &&, rValue, ., isFunction, (, ), ), {, Function, function, =, functionsByNode, ., get, (, rValue, ), ;]
[&&, rValue, ., isFunction, (, ), ), {, Function, function, =, functionsByNode, ., get, (, rValue, ), ;, Preconditions, .]
[), {, Function, function, =, functionsByNode, ., get, (, rValue, ), ;, Preconditions, ., checkNotNull, (, function, ), ;, return]
[., isFunction, (, ), ), {, Function, function, =, functionsByNode, ., get, (, rValue, ), ;, Preconditions, ., checkNotNull, (]
[;, Preconditions, ., checkNotNull, (, function, ), ;, return, function, ;, }, }, return, null, ;, }, public, DiGraph, <]
[., get, (, rValue, ), ;, Preconditions, ., checkNotNull, (, function, ), ;, return, function, ;, }, }, return, null]
[), ;, Preconditions, ., checkNotNull, (, function, ), ;, return, function, ;, }, }, return, null, ;, }, public, DiGraph]
[;, return, function, ;, }, }, return, null, ;, }, public, DiGraph, <, Function, ,, Callsite, >, getForwardDirectedGraph, (, )]
[., checkNotNull, (, function, ), ;, return, function, ;, }, }, return, null, ;, }, public, DiGraph, <, Function, ,]
[), ;, return, function, ;, }, }, return, null, ;, }, public, DiGraph, <, Function, ,, Callsite, >, getForwardDirectedGraph, (]
[;, }, }, return, null, ;, }, public, DiGraph, <, Function, ,, Callsite, >, getForwardDirectedGraph, (, ), {, return, constructDirectedGraph]
[;, }, public, DiGraph, <, Function, ,, Callsite, >, getForwardDirectedGraph, (, ), {, return, constructDirectedGraph, (, true, ), ;, }]
[;, }, public, DiGraph, <, Function, ,, Callsite, >, getBackwardDirectedGraph, (, ), {, return, constructDirectedGraph, (, false, ), ;, }]
[), ;, }, public, DiGraph, <, Function, ,, Callsite, >, getBackwardDirectedGraph, (, ), {, return, constructDirectedGraph, (, false, ), ;]
[;, }, private, static, void, digraphConnect, (, DiGraph, <, Function, ,, Callsite, >, digraph, ,, Function, caller, ,, Callsite, callsite]
[), ;, }, private, static, void, digraphConnect, (, DiGraph, <, Function, ,, Callsite, >, digraph, ,, Function, caller, ,, Callsite]
[), {, source, =, caller, ;, destination, =, callee, ;, }, else, {, source, =, callee, ;, destination, =, caller]
[=, caller, ;, destination, =, callee, ;, }, else, {, source, =, callee, ;, destination, =, caller, ;, }, digraph]
[;, destination, =, callee, ;, }, else, {, source, =, callee, ;, destination, =, caller, ;, }, digraph, ., connect]
[=, callee, ;, }, else, {, source, =, callee, ;, destination, =, caller, ;, }, digraph, ., connect, (, source]
[;, }, else, {, source, =, callee, ;, destination, =, caller, ;, }, digraph, ., connect, (, source, ,, callsite]
[=, callee, ;, destination, =, caller, ;, }, digraph, ., connect, (, source, ,, callsite, ,, destination, ), ;, }]
[;, destination, =, caller, ;, }, digraph, ., connect, (, source, ,, callsite, ,, destination, ), ;, }, private, DiGraph]
[=, caller, ;, }, digraph, ., connect, (, source, ,, callsite, ,, destination, ), ;, }, private, DiGraph, <, Function]
[;, }, digraph, ., connect, (, source, ,, callsite, ,, destination, ), ;, }, private, DiGraph, <, Function, ,, Callsite]
[;, }, private, DiGraph, <, Function, ,, Callsite, >, constructDirectedGraph, (, boolean, forward, ), {, DiGraph, <, Function, ,, Callsite]
[., connect, (, source, ,, callsite, ,, destination, ), ;, }, private, DiGraph, <, Function, ,, Callsite, >, constructDirectedGraph, (]
[,, callsite, ,, destination, ), ;, }, private, DiGraph, <, Function, ,, Callsite, >, constructDirectedGraph, (, boolean, forward, ), {]
[,, destination, ), ;, }, private, DiGraph, <, Function, ,, Callsite, >, constructDirectedGraph, (, boolean, forward, ), {, DiGraph, <]
[), ;, }, private, DiGraph, <, Function, ,, Callsite, >, constructDirectedGraph, (, boolean, forward, ), {, DiGraph, <, Function, ,]
[;, for, (, Function, function, :, getAllFunctions, (, ), ), {, digraph, ., createNode, (, function, ), ;, }, if]
[., createWithoutAnnotations, (, ), ;, for, (, Function, function, :, getAllFunctions, (, ), ), {, digraph, ., createNode, (, function]
[), {, digraph, ., createNode, (, function, ), ;, }, if, (, computeForwardGraph, ), {, for, (, Function, caller, :]
[;, }, if, (, computeForwardGraph, ), {, for, (, Function, caller, :, getAllFunctions, (, ), ), {, for, (, Callsite]
[., createNode, (, function, ), ;, }, if, (, computeForwardGraph, ), {, for, (, Function, caller, :, getAllFunctions, (, )]
[), ;, }, if, (, computeForwardGraph, ), {, for, (, Function, caller, :, getAllFunctions, (, ), ), {, for, (]
[), {, for, (, Function, caller, :, getAllFunctions, (, ), ), {, for, (, Callsite, callsite, :, caller, ., getCallsitesInFunction]
[), {, for, (, Callsite, callsite, :, caller, ., getCallsitesInFunction, (, ), ), {, for, (, Function, callee, :, callsite]
[), {, for, (, Function, callee, :, callsite, ., getPossibleTargets, (, ), ), {, digraphConnect, (, digraph, ,, caller, ,]
[., getCallsitesInFunction, (, ), ), {, for, (, Function, callee, :, callsite, ., getPossibleTargets, (, ), ), {, digraphConnect, (]
[), {, digraphConnect, (, digraph, ,, caller, ,, callsite, ,, callee, ,, forward, ), ;, }, }, }, }, else]
[., getPossibleTargets, (, ), ), {, digraphConnect, (, digraph, ,, caller, ,, callsite, ,, callee, ,, forward, ), ;, }]
[;, }, }, }, }, else, {, for, (, Function, callee, :, getAllFunctions, (, ), ), {, for, (, Callsite]
[,, caller, ,, callsite, ,, callee, ,, forward, ), ;, }, }, }, }, else, {, for, (, Function, callee]
[,, callsite, ,, callee, ,, forward, ), ;, }, }, }, }, else, {, for, (, Function, callee, :, getAllFunctions]
[,, callee, ,, forward, ), ;, }, }, }, }, else, {, for, (, Function, callee, :, getAllFunctions, (, )]
[,, forward, ), ;, }, }, }, }, else, {, for, (, Function, callee, :, getAllFunctions, (, ), ), {]
[), ;, }, }, }, }, else, {, for, (, Function, callee, :, getAllFunctions, (, ), ), {, for, (]
[), {, for, (, Callsite, callsite, :, callee, ., getCallsitesPossiblyTargetingFunction, (, ), ), {, Function, caller, =, callsite, ., getContainingFunction]
[), {, Function, caller, =, callsite, ., getContainingFunction, (, ), ;, digraphConnect, (, digraph, ,, caller, ,, callsite, ,, callee]
[., getCallsitesPossiblyTargetingFunction, (, ), ), {, Function, caller, =, callsite, ., getContainingFunction, (, ), ;, digraphConnect, (, digraph, ,, caller]
[;, digraphConnect, (, digraph, ,, caller, ,, callsite, ,, callee, ,, forward, ), ;, }, }, }, return, digraph, ;]
[., getContainingFunction, (, ), ;, digraphConnect, (, digraph, ,, caller, ,, callsite, ,, callee, ,, forward, ), ;, }, }]
[;, }, }, }, return, digraph, ;, }, private, DefinitionProvider, constructDefinitionProvider, (, Node, externsRoot, ,, Node, jsRoot, ), {, if]
[,, caller, ,, callsite, ,, callee, ,, forward, ), ;, }, }, }, return, digraph, ;, }, private, DefinitionProvider, constructDefinitionProvider]
[,, callsite, ,, callee, ,, forward, ), ;, }, }, }, return, digraph, ;, }, private, DefinitionProvider, constructDefinitionProvider, (, Node]
[,, callee, ,, forward, ), ;, }, }, }, return, digraph, ;, }, private, DefinitionProvider, constructDefinitionProvider, (, Node, externsRoot, ,]
[,, forward, ), ;, }, }, }, return, digraph, ;, }, private, DefinitionProvider, constructDefinitionProvider, (, Node, externsRoot, ,, Node, jsRoot]
[), ;, }, }, }, return, digraph, ;, }, private, DefinitionProvider, constructDefinitionProvider, (, Node, externsRoot, ,, Node, jsRoot, ), {]
[;, }, private, DefinitionProvider, constructDefinitionProvider, (, Node, externsRoot, ,, Node, jsRoot, ), {, if, (, useNameReferenceGraph, ), {, NameReferenceGraphConstruction, graphConstruction]
[), {, NameReferenceGraphConstruction, graphConstruction, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, graphConstruction, ., process, (, externsRoot, ,, jsRoot, ), ;]
[;, graphConstruction, ., process, (, externsRoot, ,, jsRoot, ), ;, return, graphConstruction, ., getNameReferenceGraph, (, ), ;, }, else, {]
[), ;, graphConstruction, ., process, (, externsRoot, ,, jsRoot, ), ;, return, graphConstruction, ., getNameReferenceGraph, (, ), ;, }, else]
[;, return, graphConstruction, ., getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[., process, (, externsRoot, ,, jsRoot, ), ;, return, graphConstruction, ., getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder]
[,, jsRoot, ), ;, return, graphConstruction, ., getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (]
[), ;, return, graphConstruction, ., getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, )]
[;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externsRoot, ,, jsRoot]
[., getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process]
[;, defFinder, ., process, (, externsRoot, ,, jsRoot, ), ;, return, defFinder, ;, }, }, private, Collection, <, Definition, >]
[), ;, defFinder, ., process, (, externsRoot, ,, jsRoot, ), ;, return, defFinder, ;, }, }, private, Collection, <, Definition]
[;, return, defFinder, ;, }, }, private, Collection, <, Definition, >, lookupDefinitionsForTargetsOfCall, (, Node, callsite, ,, DefinitionProvider, definitionProvider, ), {]
[., process, (, externsRoot, ,, jsRoot, ), ;, return, defFinder, ;, }, }, private, Collection, <, Definition, >, lookupDefinitionsForTargetsOfCall, (]
[,, jsRoot, ), ;, return, defFinder, ;, }, }, private, Collection, <, Definition, >, lookupDefinitionsForTargetsOfCall, (, Node, callsite, ,, DefinitionProvider]
[), ;, return, defFinder, ;, }, }, private, Collection, <, Definition, >, lookupDefinitionsForTargetsOfCall, (, Node, callsite, ,, DefinitionProvider, definitionProvider, )]
[;, }, }, private, Collection, <, Definition, >, lookupDefinitionsForTargetsOfCall, (, Node, callsite, ,, DefinitionProvider, definitionProvider, ), {, Preconditions, ., checkArgument]
[;, Node, targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (, !, useNameReferenceGraph, ||, (, targetExpression, ., isGetProp, (]
[., checkArgument, (, callsite, ., isCall, (, ), ||, callsite, ., isNew, (, ), ), ;, Node, targetExpression, =, callsite]
[), ;, Node, targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (, !, useNameReferenceGraph, ||, (, targetExpression, ., isGetProp]
[||, callsite, ., isNew, (, ), ), ;, Node, targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (, !]
[., isCall, (, ), ||, callsite, ., isNew, (, ), ), ;, Node, targetExpression, =, callsite, ., getFirstChild, (, )]
[), ;, Node, targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (, !, useNameReferenceGraph, ||, (, targetExpression, ., isGetProp]
[., isNew, (, ), ), ;, Node, targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (, !, useNameReferenceGraph, ||]
[;, if, (, !, useNameReferenceGraph, ||, (, targetExpression, ., isGetProp, (, ), ||, targetExpression, ., isName, (, ), ), )]
[., getFirstChild, (, ), ;, if, (, !, useNameReferenceGraph, ||, (, targetExpression, ., isGetProp, (, ), ||, targetExpression, ., isName]
[), {, Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (, targetExpression, ), ;, if, (, definitions, !=, null]
[||, (, targetExpression, ., isGetProp, (, ), ||, targetExpression, ., isName, (, ), ), ), {, Collection, <, Definition, >]
[||, (, targetExpression, ., isGetProp, (, ), ||, targetExpression, ., isName, (, ), ), ), {, Collection, <, Definition, >]
[), {, Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (, targetExpression, ), ;, if, (, definitions, !=, null]
[), ), {, Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (, targetExpression, ), ;, if, (, definitions, !=]
[||, targetExpression, ., isName, (, ), ), ), {, Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (, targetExpression]
[., isGetProp, (, ), ||, targetExpression, ., isName, (, ), ), ), {, Collection, <, Definition, >, definitions, =, definitionProvider]
[), ), {, Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (, targetExpression, ), ;, if, (, definitions, !=]
[., isName, (, ), ), ), {, Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (, targetExpression, ), ;]
[;, if, (, definitions, !=, null, &&, !, definitions, ., isEmpty, (, ), ), {, return, definitions, ;, }, }]
[., getDefinitionsReferencedAt, (, targetExpression, ), ;, if, (, definitions, !=, null, &&, !, definitions, ., isEmpty, (, ), ), {]
[), ;, if, (, definitions, !=, null, &&, !, definitions, ., isEmpty, (, ), ), {, return, definitions, ;, }]
[), {, return, definitions, ;, }, }, return, null, ;, }, public, class, Function, {, private, Node, astNode, ;, private]
[&&, !, definitions, ., isEmpty, (, ), ), {, return, definitions, ;, }, }, return, null, ;, }, public, class]
[!=, null, &&, !, definitions, ., isEmpty, (, ), ), {, return, definitions, ;, }, }, return, null, ;, }]
[&&, !, definitions, ., isEmpty, (, ), ), {, return, definitions, ;, }, }, return, null, ;, }, public, class]
[), {, return, definitions, ;, }, }, return, null, ;, }, public, class, Function, {, private, Node, astNode, ;, private]
[), {, return, definitions, ;, }, }, return, null, ;, }, public, class, Function, {, private, Node, astNode, ;, private]
[., isEmpty, (, ), ), {, return, definitions, ;, }, }, return, null, ;, }, public, class, Function, {, private]
[;, }, }, return, null, ;, }, public, class, Function, {, private, Node, astNode, ;, private, boolean, isAliased, =, false]
[;, }, public, class, Function, {, private, Node, astNode, ;, private, boolean, isAliased, =, false, ;, private, boolean, isExposedToCallOrApply, =]
[;, private, boolean, isExposedToCallOrApply, =, false, ;, private, Collection, <, Callsite, >, callsitesInFunction, ;, private, Collection, <, Callsite, >, callsitesPossiblyTargetingFunction]
[;, private, Collection, <, Callsite, >, callsitesInFunction, ;, private, Collection, <, Callsite, >, callsitesPossiblyTargetingFunction, ;, private, Function, (, Node, functionAstNode]
[=, functionAstNode, ;, }, public, boolean, isMain, (, ), {, return, (, this, ==, CallGraph, ., this, ., mainFunction, )]
[;, }, public, boolean, isMain, (, ), {, return, (, this, ==, CallGraph, ., this, ., mainFunction, ), ;, }]
[;, }, public, Node, getAstNode, (, ), {, return, astNode, ;, }, public, Node, getBodyNode, (, ), {, if, (]
[), ;, }, public, Node, getAstNode, (, ), {, return, astNode, ;, }, public, Node, getBodyNode, (, ), {, if]
[==, CallGraph, ., this, ., mainFunction, ), ;, }, public, Node, getAstNode, (, ), {, return, astNode, ;, }, public]
[), ;, }, public, Node, getAstNode, (, ), {, return, astNode, ;, }, public, Node, getBodyNode, (, ), {, if]
[., mainFunction, ), ;, }, public, Node, getAstNode, (, ), {, return, astNode, ;, }, public, Node, getBodyNode, (, )]
[;, }, public, Node, getBodyNode, (, ), {, if, (, isMain, (, ), ), {, return, astNode, ;, }, else]
[), {, return, astNode, ;, }, else, {, return, NodeUtil, ., getFunctionBody, (, astNode, ), ;, }, }, public, String]
[;, }, else, {, return, NodeUtil, ., getFunctionBody, (, astNode, ), ;, }, }, public, String, getName, (, ), {]
[;, }, }, public, String, getName, (, ), {, if, (, isMain, (, ), ), {, return, MAIN_FUNCTION_NAME, ;, }]
[., getFunctionBody, (, astNode, ), ;, }, }, public, String, getName, (, ), {, if, (, isMain, (, ), )]
[), ;, }, }, public, String, getName, (, ), {, if, (, isMain, (, ), ), {, return, MAIN_FUNCTION_NAME, ;]
[), {, return, MAIN_FUNCTION_NAME, ;, }, else, {, return, NodeUtil, ., getFunctionName, (, astNode, ), ;, }, }, public, Collection]
[;, }, else, {, return, NodeUtil, ., getFunctionName, (, astNode, ), ;, }, }, public, Collection, <, Callsite, >, getCallsitesInFunction]
[;, }, }, public, Collection, <, Callsite, >, getCallsitesInFunction, (, ), {, if, (, callsitesInFunction, !=, null, ), {, return]
[., getFunctionName, (, astNode, ), ;, }, }, public, Collection, <, Callsite, >, getCallsitesInFunction, (, ), {, if, (, callsitesInFunction]
[), ;, }, }, public, Collection, <, Callsite, >, getCallsitesInFunction, (, ), {, if, (, callsitesInFunction, !=, null, ), {]
[), {, return, callsitesInFunction, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, private, void, addCallsiteInFunction]
[!=, null, ), {, return, callsitesInFunction, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, private]
[), {, return, callsitesInFunction, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, private, void, addCallsiteInFunction]
[;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, private, void, addCallsiteInFunction, (, Callsite, callsite, )]
[;, }, }, private, void, addCallsiteInFunction, (, Callsite, callsite, ), {, if, (, callsitesInFunction, ==, null, ), {, callsitesInFunction, =]
[., of, (, ), ;, }, }, private, void, addCallsiteInFunction, (, Callsite, callsite, ), {, if, (, callsitesInFunction, ==, null]
[), {, callsitesInFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }, callsitesInFunction, ., add, (, callsite, ), ;]
[==, null, ), {, callsitesInFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }, callsitesInFunction, ., add, (, callsite]
[), {, callsitesInFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }, callsitesInFunction, ., add, (, callsite, ), ;]
[=, new, LinkedList, <, Callsite, >, (, ), ;, }, callsitesInFunction, ., add, (, callsite, ), ;, }, public, Collection]
[;, }, callsitesInFunction, ., add, (, callsite, ), ;, }, public, Collection, <, Callsite, >, getCallsitesPossiblyTargetingFunction, (, ), {, if]
[;, }, public, Collection, <, Callsite, >, getCallsitesPossiblyTargetingFunction, (, ), {, if, (, computeBackwardGraph, ), {, if, (, callsitesPossiblyTargetingFunction, !=]
[., add, (, callsite, ), ;, }, public, Collection, <, Callsite, >, getCallsitesPossiblyTargetingFunction, (, ), {, if, (, computeBackwardGraph, )]
[), ;, }, public, Collection, <, Callsite, >, getCallsitesPossiblyTargetingFunction, (, ), {, if, (, computeBackwardGraph, ), {, if, (, callsitesPossiblyTargetingFunction]
[), {, if, (, callsitesPossiblyTargetingFunction, !=, null, ), {, return, callsitesPossiblyTargetingFunction, ;, }, else, {, return, ImmutableList, ., of, (]
[), {, return, callsitesPossiblyTargetingFunction, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw]
[!=, null, ), {, return, callsitesPossiblyTargetingFunction, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else]
[), {, return, callsitesPossiblyTargetingFunction, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw]
[;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (, "Cannot call "]
[;, }, }, else, {, throw, new, UnsupportedOperationException, (, "Cannot call ", +, "getCallsitesPossiblyTargetingFunction() on a Function ", +, "from a non-backward CallGraph", ), ;, }, }, private, void]
[., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (, "Cannot call ", +, "getCallsitesPossiblyTargetingFunction() on a Function ", +, "from a non-backward CallGraph", ), ;]
[;, }, }, private, void, addCallsitePossiblyTargetingFunction, (, Callsite, callsite, ), {, Preconditions, ., checkState, (, computeBackwardGraph, ), ;, if, (]
[), ;, }, }, private, void, addCallsitePossiblyTargetingFunction, (, Callsite, callsite, ), {, Preconditions, ., checkState, (, computeBackwardGraph, ), ;, if]
[+, "from a non-backward CallGraph", ), ;, }, }, private, void, addCallsitePossiblyTargetingFunction, (, Callsite, callsite, ), {, Preconditions, ., checkState, (, computeBackwardGraph, )]
[+, "getCallsitesPossiblyTargetingFunction() on a Function ", +, "from a non-backward CallGraph", ), ;, }, }, private, void, addCallsitePossiblyTargetingFunction, (, Callsite, callsite, ), {, Preconditions, ., checkState, (]
[+, "from a non-backward CallGraph", ), ;, }, }, private, void, addCallsitePossiblyTargetingFunction, (, Callsite, callsite, ), {, Preconditions, ., checkState, (, computeBackwardGraph, )]
[), ;, }, }, private, void, addCallsitePossiblyTargetingFunction, (, Callsite, callsite, ), {, Preconditions, ., checkState, (, computeBackwardGraph, ), ;, if]
[;, if, (, callsitesPossiblyTargetingFunction, ==, null, ), {, callsitesPossiblyTargetingFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }, callsitesPossiblyTargetingFunction]
[., checkState, (, computeBackwardGraph, ), ;, if, (, callsitesPossiblyTargetingFunction, ==, null, ), {, callsitesPossiblyTargetingFunction, =, new, LinkedList, <, Callsite, >]
[), ;, if, (, callsitesPossiblyTargetingFunction, ==, null, ), {, callsitesPossiblyTargetingFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }]
[), {, callsitesPossiblyTargetingFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }, callsitesPossiblyTargetingFunction, ., add, (, callsite, ), ;]
[==, null, ), {, callsitesPossiblyTargetingFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }, callsitesPossiblyTargetingFunction, ., add, (, callsite]
[), {, callsitesPossiblyTargetingFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }, callsitesPossiblyTargetingFunction, ., add, (, callsite, ), ;]
[=, new, LinkedList, <, Callsite, >, (, ), ;, }, callsitesPossiblyTargetingFunction, ., add, (, callsite, ), ;, }, public, boolean]
[;, }, callsitesPossiblyTargetingFunction, ., add, (, callsite, ), ;, }, public, boolean, isAliased, (, ), {, return, isAliased, ;, }]
[;, }, public, boolean, isAliased, (, ), {, return, isAliased, ;, }, public, boolean, isExposedToCallOrApply, (, ), {, return, isExposedToCallOrApply]
[., add, (, callsite, ), ;, }, public, boolean, isAliased, (, ), {, return, isAliased, ;, }, public, boolean, isExposedToCallOrApply]
[), ;, }, public, boolean, isAliased, (, ), {, return, isAliased, ;, }, public, boolean, isExposedToCallOrApply, (, ), {, return]
[;, }, public, boolean, isExposedToCallOrApply, (, ), {, return, isExposedToCallOrApply, ;, }, }, public, class, Callsite, {, private, Node, astNode]
[;, }, }, public, class, Callsite, {, private, Node, astNode, ;, private, boolean, hasUnknownTarget, =, false, ;, private, boolean, hasExternTarget]
[;, private, boolean, hasExternTarget, =, false, ;, private, Function, containingFunction, =, null, ;, private, Collection, <, Function, >, possibleTargets, ;]
[;, private, Function, containingFunction, =, null, ;, private, Collection, <, Function, >, possibleTargets, ;, private, Callsite, (, Node, callsiteAstNode, )]
[;, private, Collection, <, Function, >, possibleTargets, ;, private, Callsite, (, Node, callsiteAstNode, ), {, astNode, =, callsiteAstNode, ;, }]
[=, callsiteAstNode, ;, }, public, Node, getAstNode, (, ), {, return, astNode, ;, }, public, Function, getContainingFunction, (, ), {]
[;, }, public, Node, getAstNode, (, ), {, return, astNode, ;, }, public, Function, getContainingFunction, (, ), {, return, containingFunction]
[;, }, public, Function, getContainingFunction, (, ), {, return, containingFunction, ;, }, public, Collection, <, Function, >, getPossibleTargets, (, )]
[;, }, public, Collection, <, Function, >, getPossibleTargets, (, ), {, if, (, computeForwardGraph, ), {, if, (, possibleTargets, !=]
[), {, if, (, possibleTargets, !=, null, ), {, return, possibleTargets, ;, }, else, {, return, ImmutableList, ., of, (]
[), {, return, possibleTargets, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw]
[!=, null, ), {, return, possibleTargets, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else]
[), {, return, possibleTargets, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw]
[;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (, "Cannot call "]
[;, }, }, else, {, throw, new, UnsupportedOperationException, (, "Cannot call ", +, "getPossibleTargets() on a Callsite from a non-forward ", +, "CallGraph", ), ;, }, }, private, void]
[., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (, "Cannot call ", +, "getPossibleTargets() on a Callsite from a non-forward ", +, "CallGraph", ), ;]
[;, }, }, private, void, addPossibleTarget, (, Function, target, ), {, Preconditions, ., checkState, (, computeForwardGraph, ), ;, if, (]
[), ;, }, }, private, void, addPossibleTarget, (, Function, target, ), {, Preconditions, ., checkState, (, computeForwardGraph, ), ;, if]
[+, "CallGraph", ), ;, }, }, private, void, addPossibleTarget, (, Function, target, ), {, Preconditions, ., checkState, (, computeForwardGraph, )]
[+, "getPossibleTargets() on a Callsite from a non-forward ", +, "CallGraph", ), ;, }, }, private, void, addPossibleTarget, (, Function, target, ), {, Preconditions, ., checkState, (]
[+, "CallGraph", ), ;, }, }, private, void, addPossibleTarget, (, Function, target, ), {, Preconditions, ., checkState, (, computeForwardGraph, )]
[), ;, }, }, private, void, addPossibleTarget, (, Function, target, ), {, Preconditions, ., checkState, (, computeForwardGraph, ), ;, if]
[;, if, (, possibleTargets, ==, null, ), {, possibleTargets, =, new, LinkedList, <, Function, >, (, ), ;, }, possibleTargets]
[., checkState, (, computeForwardGraph, ), ;, if, (, possibleTargets, ==, null, ), {, possibleTargets, =, new, LinkedList, <, Function, >]
[), ;, if, (, possibleTargets, ==, null, ), {, possibleTargets, =, new, LinkedList, <, Function, >, (, ), ;, }]
[), {, possibleTargets, =, new, LinkedList, <, Function, >, (, ), ;, }, possibleTargets, ., add, (, target, ), ;]
[==, null, ), {, possibleTargets, =, new, LinkedList, <, Function, >, (, ), ;, }, possibleTargets, ., add, (, target]
[), {, possibleTargets, =, new, LinkedList, <, Function, >, (, ), ;, }, possibleTargets, ., add, (, target, ), ;]
[=, new, LinkedList, <, Function, >, (, ), ;, }, possibleTargets, ., add, (, target, ), ;, }, public, boolean]
[;, }, possibleTargets, ., add, (, target, ), ;, }, public, boolean, hasUnknownTarget, (, ), {, return, hasUnknownTarget, ;, }]
[;, }, public, boolean, hasUnknownTarget, (, ), {, return, hasUnknownTarget, ;, }, public, boolean, hasExternTarget, (, ), {, return, hasExternTarget]
[., add, (, target, ), ;, }, public, boolean, hasUnknownTarget, (, ), {, return, hasUnknownTarget, ;, }, public, boolean, hasExternTarget]
[), ;, }, public, boolean, hasUnknownTarget, (, ), {, return, hasUnknownTarget, ;, }, public, boolean, hasExternTarget, (, ), {, return]
[;, }, public, boolean, hasExternTarget, (, ), {, return, hasExternTarget, ;, }, }, }]
[;, }, }, }]
