[class, NameAnalyzer, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, JsName, >, allNames, =]
[class, NameAnalyzer, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, JsName, >, allNames, =]
[,, JsName, >, allNames, =, Maps, ., newTreeMap, (, ), ;, private, DiGraph, <, JsName, ,, RefType, >, referenceGraph, =]
[,, JsName, >, allNames, =, Maps, ., newTreeMap, (, ), ;, private, DiGraph, <, JsName, ,, RefType, >, referenceGraph, =]
[RefType, >, referenceGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, private, final, ListMultimap, <, Node, ,, NameInformation, >, scopes, =]
[RefType, >, referenceGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, private, final, ListMultimap, <, Node, ,, NameInformation, >, scopes, =]
[ListMultimap, <, Node, ,, NameInformation, >, scopes, =, LinkedListMultimap, ., create, (, ), ;, private, static, final, String, PROTOTYPE_SUBSTRING, =]
[LinkedListMultimap, ., create, (, ), ;, private, static, final, String, PROTOTYPE_SUBSTRING, =, ".prototype.", ;, private, static, final, int, PROTOTYPE_SUBSTRING_LEN, =]
[LinkedListMultimap, ., create, (, ), ;, private, static, final, String, PROTOTYPE_SUBSTRING, =, ".prototype.", ;, private, static, final, int, PROTOTYPE_SUBSTRING_LEN, =]
[".prototype.", ;, private, static, final, int, PROTOTYPE_SUBSTRING_LEN, =, PROTOTYPE_SUBSTRING, ., length, (, ), ;, private, static, final, int, PROTOTYPE_SUFFIX_LEN, =]
[".prototype.", ;, private, static, final, int, PROTOTYPE_SUBSTRING_LEN, =, PROTOTYPE_SUBSTRING, ., length, (, ), ;, private, static, final, int, PROTOTYPE_SUFFIX_LEN, =]
[), ;, private, static, final, int, PROTOTYPE_SUFFIX_LEN, =, ".prototype", ., length, (, ), ;, private, static, final, String, WINDOW, =]
[".prototype", ., length, (, ), ;, private, static, final, String, WINDOW, =, "window", ;, private, static, final, String, FUNCTION, =]
[WINDOW, =, "window", ;, private, static, final, String, FUNCTION, =, "Function", ;, static, final, Set, <, String, >, DEFAULT_GLOBAL_NAMES, =]
[WINDOW, =, "window", ;, private, static, final, String, FUNCTION, =, "Function", ;, static, final, Set, <, String, >, DEFAULT_GLOBAL_NAMES, =]
[private, static, final, String, FUNCTION, =, "Function", ;, static, final, Set, <, String, >, DEFAULT_GLOBAL_NAMES, =, ImmutableSet, ., of, (]
[final, String, FUNCTION, =, "Function", ;, static, final, Set, <, String, >, DEFAULT_GLOBAL_NAMES, =, ImmutableSet, ., of, (, "window", ,]
[final, Set, <, String, >, globalNames, ;, private, final, AstChangeProxy, changeProxy, ;, private, final, Set, <, String, >, externalNames, =]
[final, Set, <, String, >, globalNames, ;, private, final, AstChangeProxy, changeProxy, ;, private, final, Set, <, String, >, externalNames, =]
[Set, <, String, >, externalNames, =, Sets, ., newHashSet, (, ), ;, private, final, List, <, RefNode, >, refNodes, =]
[Set, <, String, >, externalNames, =, Sets, ., newHashSet, (, ), ;, private, final, List, <, RefNode, >, refNodes, =]
[RefNode, >, refNodes, =, Lists, ., newArrayList, (, ), ;, private, final, Map, <, String, ,, AliasSet, >, aliases, =]
[RefNode, >, refNodes, =, Lists, ., newArrayList, (, ), ;, private, final, Map, <, String, ,, AliasSet, >, aliases, =]
[>, aliases, =, Maps, ., newHashMap, (, ), ;, private, static, class, AliasSet, {, Set, <, String, >, names, =]
[>, aliases, =, Maps, ., newHashMap, (, ), ;, private, static, class, AliasSet, {, Set, <, String, >, names, =]
[<, String, >, names, =, Sets, ., newHashSet, (, ), ;, AliasSet, (, String, name1, ,, String, name2, ), {]
[<, String, >, names, =, Sets, ., newHashSet, (, ), ;, AliasSet, (, String, name1, ,, String, name2, ), {]
[=, Sets, ., newHashSet, (, ), ;, AliasSet, (, String, name1, ,, String, name2, ), {, names, ., add, (]
[newHashSet, (, ), ;, AliasSet, (, String, name1, ,, String, name2, ), {, names, ., add, (, name1, ), ;]
[newHashSet, (, ), ;, AliasSet, (, String, name1, ,, String, name2, ), {, names, ., add, (, name1, ), ;]
[AliasSet, (, String, name1, ,, String, name2, ), {, names, ., add, (, name1, ), ;, names, ., add, (]
[>, {, @, Override, public, boolean, traverseEdge, (, JsName, from, ,, RefType, callSite, ,, JsName, to, ), {, if, (]
[>, {, @, Override, public, boolean, traverseEdge, (, JsName, from, ,, RefType, callSite, ,, JsName, to, ), {, if, (]
[>, {, @, Override, public, boolean, traverseEdge, (, JsName, from, ,, RefType, callSite, ,, JsName, to, ), {, if, (]
[public, boolean, traverseEdge, (, JsName, from, ,, RefType, callSite, ,, JsName, to, ), {, if, (, from, ., referenced, &&]
[boolean, traverseEdge, (, JsName, from, ,, RefType, callSite, ,, JsName, to, ), {, if, (, from, ., referenced, &&, !]
[boolean, traverseEdge, (, JsName, from, ,, RefType, callSite, ,, JsName, to, ), {, if, (, from, ., referenced, &&, !]
[,, RefType, callSite, ,, JsName, to, ), {, if, (, from, ., referenced, &&, !, to, ., referenced, ), {]
[,, RefType, callSite, ,, JsName, to, ), {, if, (, from, ., referenced, &&, !, to, ., referenced, ), {]
[JsName, to, ), {, if, (, from, ., referenced, &&, !, to, ., referenced, ), {, to, ., referenced, =]
[{, if, (, from, ., referenced, &&, !, to, ., referenced, ), {, to, ., referenced, =, true, ;, return]
[&&, !, to, ., referenced, ), {, to, ., referenced, =, true, ;, return, true, ;, }, else, {, return]
[}, else, {, return, false, ;, }, }, }, private, static, class, NameInformation, {, String, name, ;, boolean, isExternallyReferenceable, =]
[;, }, }, }, private, static, class, NameInformation, {, String, name, ;, boolean, isExternallyReferenceable, =, false, ;, boolean, isPrototype, =]
[static, class, NameInformation, {, String, name, ;, boolean, isExternallyReferenceable, =, false, ;, boolean, isPrototype, =, false, ;, String, prototypeClass, =]
[name, ;, boolean, isExternallyReferenceable, =, false, ;, boolean, isPrototype, =, false, ;, String, prototypeClass, =, null, ;, String, prototypeProperty, =]
[false, ;, boolean, isPrototype, =, false, ;, String, prototypeClass, =, null, ;, String, prototypeProperty, =, null, ;, String, superclass, =]
[false, ;, String, prototypeClass, =, null, ;, String, prototypeProperty, =, null, ;, String, superclass, =, null, ;, boolean, onlyAffectsClassDef, =]
[}, private, static, class, JsName, implements, Comparable, <, JsName, >, {, String, name, ;, List, <, String, >, prototypeNames, =]
[}, private, static, class, JsName, implements, Comparable, <, JsName, >, {, String, name, ;, List, <, String, >, prototypeNames, =]
[>, {, String, name, ;, List, <, String, >, prototypeNames, =, Lists, ., newArrayList, (, ), ;, boolean, externallyDefined, =]
[List, <, String, >, prototypeNames, =, Lists, ., newArrayList, (, ), ;, boolean, externallyDefined, =, false, ;, boolean, referenced, =]
[=, Lists, ., newArrayList, (, ), ;, boolean, externallyDefined, =, false, ;, boolean, referenced, =, false, ;, boolean, hasWrittenDescendants, =]
[), ;, boolean, externallyDefined, =, false, ;, boolean, referenced, =, false, ;, boolean, hasWrittenDescendants, =, false, ;, boolean, hasInstanceOfReference, =]
[hasWrittenDescendants, =, false, ;, boolean, hasInstanceOfReference, =, false, ;, @, Override, public, String, toString, (, ), {, StringBuilder, out, =]
[hasInstanceOfReference, =, false, ;, @, Override, public, String, toString, (, ), {, StringBuilder, out, =, new, StringBuilder, (, ), ;]
[hasInstanceOfReference, =, false, ;, @, Override, public, String, toString, (, ), {, StringBuilder, out, =, new, StringBuilder, (, ), ;]
[@, Override, public, String, toString, (, ), {, StringBuilder, out, =, new, StringBuilder, (, ), ;, out, ., append, (]
[(, ), {, StringBuilder, out, =, new, StringBuilder, (, ), ;, out, ., append, (, name, ), ;, if, (]
[(, ), {, StringBuilder, out, =, new, StringBuilder, (, ), ;, out, ., append, (, name, ), ;, if, (]
[(, ), {, StringBuilder, out, =, new, StringBuilder, (, ), ;, out, ., append, (, name, ), ;, if, (]
[new, StringBuilder, (, ), ;, out, ., append, (, name, ), ;, if, (, prototypeNames, ., size, (, ), >]
[), ;, out, ., append, (, name, ), ;, if, (, prototypeNames, ., size, (, ), >, 0, ), {]
[), ;, out, ., append, (, name, ), ;, if, (, prototypeNames, ., size, (, ), >, 0, ), {]
[append, (, name, ), ;, if, (, prototypeNames, ., size, (, ), >, 0, ), {, out, ., append, (]
[), ;, if, (, prototypeNames, ., size, (, ), >, 0, ), {, out, ., append, (, " (CLASS)\n", ), ;]
[), ;, if, (, prototypeNames, ., size, (, ), >, 0, ), {, out, ., append, (, " (CLASS)\n", ), ;]
[prototypeNames, ., size, (, ), >, 0, ), {, out, ., append, (, " (CLASS)\n", ), ;, out, ., append, (]
[out, ., append, (, " (CLASS)\n", ), ;, out, ., append, (, " - FUNCTIONS: ", ), ;, Iterator, <, String, >, pIter, =]
[out, ., append, (, " (CLASS)\n", ), ;, out, ., append, (, " - FUNCTIONS: ", ), ;, Iterator, <, String, >, pIter, =]
[., append, (, " - FUNCTIONS: ", ), ;, Iterator, <, String, >, pIter, =, prototypeNames, ., iterator, (, ), ;, while, (]
[., append, (, " - FUNCTIONS: ", ), ;, Iterator, <, String, >, pIter, =, prototypeNames, ., iterator, (, ), ;, while, (]
[<, String, >, pIter, =, prototypeNames, ., iterator, (, ), ;, while, (, pIter, ., hasNext, (, ), ), {]
[<, String, >, pIter, =, prototypeNames, ., iterator, (, ), ;, while, (, pIter, ., hasNext, (, ), ), {]
[=, prototypeNames, ., iterator, (, ), ;, while, (, pIter, ., hasNext, (, ), ), {, out, ., append, (]
[=, prototypeNames, ., iterator, (, ), ;, while, (, pIter, ., hasNext, (, ), ), {, out, ., append, (]
[pIter, ., hasNext, (, ), ), {, out, ., append, (, pIter, ., next, (, ), ), ;, if, (]
[pIter, ., hasNext, (, ), ), {, out, ., append, (, pIter, ., next, (, ), ), ;, if, (]
[out, ., append, (, pIter, ., next, (, ), ), ;, if, (, pIter, ., hasNext, (, ), ), {]
[out, ., append, (, pIter, ., next, (, ), ), ;, if, (, pIter, ., hasNext, (, ), ), {]
[pIter, ., next, (, ), ), ;, if, (, pIter, ., hasNext, (, ), ), {, out, ., append, (]
[if, (, pIter, ., hasNext, (, ), ), {, out, ., append, (, ", ", ), ;, }, }, }, return]
[if, (, pIter, ., hasNext, (, ), ), {, out, ., append, (, ", ", ), ;, }, }, }, return]
[}, return, out, ., toString, (, ), ;, }, @, Override, public, int, compareTo, (, JsName, rhs, ), {, return]
[}, return, out, ., toString, (, ), ;, }, @, Override, public, int, compareTo, (, JsName, rhs, ), {, return]
[}, return, out, ., toString, (, ), ;, }, @, Override, public, int, compareTo, (, JsName, rhs, ), {, return]
[), ;, }, @, Override, public, int, compareTo, (, JsName, rhs, ), {, return, this, ., name, ., compareTo, (]
[), ;, }, @, Override, public, int, compareTo, (, JsName, rhs, ), {, return, this, ., name, ., compareTo, (]
[JsName, name, (, ), ;, void, remove, (, ), ;, }, private, class, JsNameRefNode, implements, RefNode, {, JsName, name, ;]
[), ;, void, remove, (, ), ;, }, private, class, JsNameRefNode, implements, RefNode, {, JsName, name, ;, @, SuppressWarnings, (]
[@, SuppressWarnings, (, "unused", ), Node, node, ;, Node, parent, ;, JsNameRefNode, (, JsName, name, ,, Node, node, ), {]
[@, SuppressWarnings, (, "unused", ), Node, node, ;, Node, parent, ;, JsNameRefNode, (, JsName, name, ,, Node, node, ), {]
[), Node, node, ;, Node, parent, ;, JsNameRefNode, (, JsName, name, ,, Node, node, ), {, this, ., name, =]
[node, ;, Node, parent, ;, JsNameRefNode, (, JsName, name, ,, Node, node, ), {, this, ., name, =, name, ;]
[node, ;, Node, parent, ;, JsNameRefNode, (, JsName, name, ,, Node, node, ), {, this, ., name, =, name, ;]
[;, JsNameRefNode, (, JsName, name, ,, Node, node, ), {, this, ., name, =, name, ;, this, ., node, =]
[(, JsName, name, ,, Node, node, ), {, this, ., name, =, name, ;, this, ., node, =, node, ;]
[(, JsName, name, ,, Node, node, ), {, this, ., name, =, name, ;, this, ., node, =, node, ;]
[Node, node, ), {, this, ., name, =, name, ;, this, ., node, =, node, ;, this, ., parent, =]
[Node, node, ), {, this, ., name, =, name, ;, this, ., node, =, node, ;, this, ., parent, =]
[this, ., parent, =, node, ., getParent, (, ), ;, }, @, Override, public, JsName, name, (, ), {, return]
[JsName, name, (, ), {, return, name, ;, }, @, Override, public, void, remove, (, ), {, Node, containingNode, =]
[JsName, name, (, ), {, return, name, ;, }, @, Override, public, void, remove, (, ), {, Node, containingNode, =]
[}, @, Override, public, void, remove, (, ), {, Node, containingNode, =, parent, ., getParent, (, ), ;, switch, (]
[}, @, Override, public, void, remove, (, ), {, Node, containingNode, =, parent, ., getParent, (, ), ;, switch, (]
[{, Node, containingNode, =, parent, ., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case]
[{, Node, containingNode, =, parent, ., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case]
[parent, ., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :]
[parent, ., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :]
[), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, Preconditions, ., checkState, (]
[), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, Preconditions, ., checkState, (]
[(, ), ), {, case, Token, ., VAR, :, Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), ), ;]
[), {, case, Token, ., VAR, :, Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceWithRhs, (]
[case, Token, ., VAR, :, Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceWithRhs, (, containingNode, ,]
[., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case]
[., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case]
[., hasOneChild, (, ), ), ;, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :]
[(, ), ), ;, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, replaceWithRhs, (]
[), ;, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, replaceWithRhs, (, containingNode, ,]
[parent, ), ;, break, ;, case, Token, ., FUNCTION, :, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, Token, ., FUNCTION, :, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case]
[Token, ., FUNCTION, :, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, if, (]
[Token, ., FUNCTION, :, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, if, (]
[,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, if, (, containingNode, ., isExprResult, (, ), ), {]
[), ;, break, ;, case, Token, ., ASSIGN, :, if, (, containingNode, ., isExprResult, (, ), ), {, replaceWithRhs, (]
[), ;, break, ;, case, Token, ., ASSIGN, :, if, (, containingNode, ., isExprResult, (, ), ), {, replaceWithRhs, (]
[., ASSIGN, :, if, (, containingNode, ., isExprResult, (, ), ), {, replaceWithRhs, (, containingNode, ., getParent, (, ), ,]
[., isExprResult, (, ), ), {, replaceWithRhs, (, containingNode, ., getParent, (, ), ,, containingNode, ), ;, }, else, {]
[(, ), ), {, replaceWithRhs, (, containingNode, ., getParent, (, ), ,, containingNode, ), ;, }, else, {, replaceWithRhs, (]
[), {, replaceWithRhs, (, containingNode, ., getParent, (, ), ,, containingNode, ), ;, }, else, {, replaceWithRhs, (, containingNode, ,]
[(, ), ,, containingNode, ), ;, }, else, {, replaceWithRhs, (, containingNode, ,, parent, ), ;, }, break, ;, case]
[(, ), ,, containingNode, ), ;, }, else, {, replaceWithRhs, (, containingNode, ,, parent, ), ;, }, break, ;, case]
[}, }, }, private, class, PrototypeSetNode, extends, JsNameRefNode, {, PrototypeSetNode, (, JsName, name, ,, Node, parent, ), {, super, (]
[}, private, class, PrototypeSetNode, extends, JsNameRefNode, {, PrototypeSetNode, (, JsName, name, ,, Node, parent, ), {, super, (, name, ,]
[}, private, class, PrototypeSetNode, extends, JsNameRefNode, {, PrototypeSetNode, (, JsName, name, ,, Node, parent, ), {, super, (, name, ,]
[PrototypeSetNode, (, JsName, name, ,, Node, parent, ), {, super, (, name, ,, parent, ., getFirstChild, (, ), ), ;]
[PrototypeSetNode, (, JsName, name, ,, Node, parent, ), {, super, (, name, ,, parent, ., getFirstChild, (, ), ), ;]
[,, Node, parent, ), {, super, (, name, ,, parent, ., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (]
[,, Node, parent, ), {, super, (, name, ,, parent, ., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (]
[(, parent, ., isAssign, (, ), ), ;, }, @, Override, public, void, remove, (, ), {, Node, gramps, =]
[(, parent, ., isAssign, (, ), ), ;, }, @, Override, public, void, remove, (, ), {, Node, gramps, =]
[}, @, Override, public, void, remove, (, ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[}, @, Override, public, void, remove, (, ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ., isExprResult, (, ), ), {]
[), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ., isExprResult, (, ), ), {]
[=, parent, ., getParent, (, ), ;, if, (, gramps, ., isExprResult, (, ), ), {, changeProxy, ., removeChild, (]
[=, parent, ., getParent, (, ), ;, if, (, gramps, ., isExprResult, (, ), ), {, changeProxy, ., removeChild, (]
[;, if, (, gramps, ., isExprResult, (, ), ), {, changeProxy, ., removeChild, (, gramps, ., getParent, (, ), ,]
[(, ), ), {, changeProxy, ., removeChild, (, gramps, ., getParent, (, ), ,, gramps, ), ;, }, else, {]
[(, ), ), {, changeProxy, ., removeChild, (, gramps, ., getParent, (, ), ,, gramps, ), ;, }, else, {]
[changeProxy, ., removeChild, (, gramps, ., getParent, (, ), ,, gramps, ), ;, }, else, {, changeProxy, ., replaceWith, (]
[removeChild, (, gramps, ., getParent, (, ), ,, gramps, ), ;, }, else, {, changeProxy, ., replaceWith, (, gramps, ,]
[gramps, ., getParent, (, ), ,, gramps, ), ;, }, else, {, changeProxy, ., replaceWith, (, gramps, ,, parent, ,]
[gramps, ., getParent, (, ), ,, gramps, ), ;, }, else, {, changeProxy, ., replaceWith, (, gramps, ,, parent, ,]
[gramps, ., getParent, (, ), ,, gramps, ), ;, }, else, {, changeProxy, ., replaceWith, (, gramps, ,, parent, ,]
[class, SpecialReferenceNode, implements, RefNode, {, JsName, name, ;, Node, node, ;, SpecialReferenceNode, (, JsName, name, ,, Node, node, ), {]
[class, SpecialReferenceNode, implements, RefNode, {, JsName, name, ;, Node, node, ;, SpecialReferenceNode, (, JsName, name, ,, Node, node, ), {]
[{, JsName, name, ;, Node, node, ;, SpecialReferenceNode, (, JsName, name, ,, Node, node, ), {, this, ., name, =]
[name, ;, Node, node, ;, SpecialReferenceNode, (, JsName, name, ,, Node, node, ), {, this, ., name, =, name, ;]
[name, ;, Node, node, ;, SpecialReferenceNode, (, JsName, name, ,, Node, node, ), {, this, ., name, =, name, ;]
[;, SpecialReferenceNode, (, JsName, name, ,, Node, node, ), {, this, ., name, =, name, ;, this, ., node, =]
[name, =, name, ;, this, ., node, =, node, ;, }, @, Override, public, JsName, name, (, ), {, return]
[;, }, @, Override, public, JsName, name, (, ), {, return, name, ;, }, Node, getParent, (, ), {, return]
[;, }, @, Override, public, JsName, name, (, ), {, return, name, ;, }, Node, getParent, (, ), {, return]
[}, Node, getParent, (, ), {, return, node, ., getParent, (, ), ;, }, Node, getGramps, (, ), {, return]
[}, Node, getParent, (, ), {, return, node, ., getParent, (, ), ;, }, Node, getGramps, (, ), {, return]
[}, Node, getParent, (, ), {, return, node, ., getParent, (, ), ;, }, Node, getGramps, (, ), {, return]
[}, Node, getParent, (, ), {, return, node, ., getParent, (, ), ;, }, Node, getGramps, (, ), {, return]
[return, node, ., getParent, (, ), ;, }, Node, getGramps, (, ), {, return, node, ., getParent, (, ), ==]
[., getParent, (, ), ;, }, Node, getGramps, (, ), {, return, node, ., getParent, (, ), ==, null, ?]
[(, ), ;, }, Node, getGramps, (, ), {, return, node, ., getParent, (, ), ==, null, ?, null, :]
[(, ), ;, }, Node, getGramps, (, ), {, return, node, ., getParent, (, ), ==, null, ?, null, :]
[(, ), ;, }, Node, getGramps, (, ), {, return, node, ., getParent, (, ), ==, null, ?, null, :]
[;, }, }, private, class, ClassDefiningFunctionNode, extends, SpecialReferenceNode, {, ClassDefiningFunctionNode, (, JsName, name, ,, Node, node, ), {, super, (]
[}, private, class, ClassDefiningFunctionNode, extends, SpecialReferenceNode, {, ClassDefiningFunctionNode, (, JsName, name, ,, Node, node, ), {, super, (, name, ,]
[ClassDefiningFunctionNode, extends, SpecialReferenceNode, {, ClassDefiningFunctionNode, (, JsName, name, ,, Node, node, ), {, super, (, name, ,, node, ), ;]
[ClassDefiningFunctionNode, extends, SpecialReferenceNode, {, ClassDefiningFunctionNode, (, JsName, name, ,, Node, node, ), {, super, (, name, ,, node, ), ;]
[ClassDefiningFunctionNode, (, JsName, name, ,, Node, node, ), {, super, (, name, ,, node, ), ;, Preconditions, ., checkState, (]
[ClassDefiningFunctionNode, (, JsName, name, ,, Node, node, ), {, super, (, name, ,, node, ), ;, Preconditions, ., checkState, (]
[Preconditions, ., checkState, (, node, ., isCall, (, ), ), ;, }, @, Override, public, void, remove, (, ), {]
[Preconditions, ., checkState, (, node, ., isCall, (, ), ), ;, }, @, Override, public, void, remove, (, ), {]
[node, ., isCall, (, ), ), ;, }, @, Override, public, void, remove, (, ), {, Preconditions, ., checkState, (]
[node, ., isCall, (, ), ), ;, }, @, Override, public, void, remove, (, ), {, Preconditions, ., checkState, (]
[public, void, remove, (, ), {, Preconditions, ., checkState, (, node, ., isCall, (, ), ), ;, Node, parent, =]
[Preconditions, ., checkState, (, node, ., isCall, (, ), ), ;, Node, parent, =, getParent, (, ), ;, if, (]
[Preconditions, ., checkState, (, node, ., isCall, (, ), ), ;, Node, parent, =, getParent, (, ), ;, if, (]
[(, ), ), ;, Node, parent, =, getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {]
[(, ), ), ;, Node, parent, =, getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {]
[Node, parent, =, getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {, changeProxy, ., removeChild, (]
[(, ), ;, if, (, parent, ., isExprResult, (, ), ), {, changeProxy, ., removeChild, (, getGramps, (, ), ,]
[., isExprResult, (, ), ), {, changeProxy, ., removeChild, (, getGramps, (, ), ,, parent, ), ;, }, else, {]
[., isExprResult, (, ), ), {, changeProxy, ., removeChild, (, getGramps, (, ), ,, parent, ), ;, }, else, {]
[), {, changeProxy, ., removeChild, (, getGramps, (, ), ,, parent, ), ;, }, else, {, changeProxy, ., replaceWith, (]
[changeProxy, ., removeChild, (, getGramps, (, ), ,, parent, ), ;, }, else, {, changeProxy, ., replaceWith, (, parent, ,]
[removeChild, (, getGramps, (, ), ,, parent, ), ;, }, else, {, changeProxy, ., replaceWith, (, parent, ,, node, ,]
[removeChild, (, getGramps, (, ), ,, parent, ), ;, }, else, {, changeProxy, ., replaceWith, (, parent, ,, node, ,]
[), ,, parent, ), ;, }, else, {, changeProxy, ., replaceWith, (, parent, ,, node, ,, IR, ., voidNode, (]
[), ,, parent, ), ;, }, else, {, changeProxy, ., replaceWith, (, parent, ,, node, ,, IR, ., voidNode, (]
[;, }, else, {, changeProxy, ., replaceWith, (, parent, ,, node, ,, IR, ., voidNode, (, IR, ., number, (]
[}, }, }, private, class, InstanceOfCheckNode, extends, SpecialReferenceNode, {, InstanceOfCheckNode, (, JsName, name, ,, Node, node, ), {, super, (]
[}, private, class, InstanceOfCheckNode, extends, SpecialReferenceNode, {, InstanceOfCheckNode, (, JsName, name, ,, Node, node, ), {, super, (, name, ,]
[InstanceOfCheckNode, extends, SpecialReferenceNode, {, InstanceOfCheckNode, (, JsName, name, ,, Node, node, ), {, super, (, name, ,, node, ), ;]
[InstanceOfCheckNode, extends, SpecialReferenceNode, {, InstanceOfCheckNode, (, JsName, name, ,, Node, node, ), {, super, (, name, ,, node, ), ;]
[InstanceOfCheckNode, (, JsName, name, ,, Node, node, ), {, super, (, name, ,, node, ), ;, Preconditions, ., checkState, (]
[InstanceOfCheckNode, (, JsName, name, ,, Node, node, ), {, super, (, name, ,, node, ), ;, Preconditions, ., checkState, (]
[), {, super, (, name, ,, node, ), ;, Preconditions, ., checkState, (, node, ., isQualifiedName, (, ), ), ;]
[), {, super, (, name, ,, node, ), ;, Preconditions, ., checkState, (, node, ., isQualifiedName, (, ), ), ;]
[name, ,, node, ), ;, Preconditions, ., checkState, (, node, ., isQualifiedName, (, ), ), ;, Preconditions, ., checkState, (]
[name, ,, node, ), ;, Preconditions, ., checkState, (, node, ., isQualifiedName, (, ), ), ;, Preconditions, ., checkState, (]
[checkState, (, getParent, (, ), ., isInstanceOf, (, ), ), ;, }, @, Override, public, void, remove, (, ), {]
[checkState, (, getParent, (, ), ., isInstanceOf, (, ), ), ;, }, @, Override, public, void, remove, (, ), {]
[), ., isInstanceOf, (, ), ), ;, }, @, Override, public, void, remove, (, ), {, changeProxy, ., replaceWith, (]
[), ), ;, }, @, Override, public, void, remove, (, ), {, changeProxy, ., replaceWith, (, getGramps, (, ), ,]
[@, Override, public, void, remove, (, ), {, changeProxy, ., replaceWith, (, getGramps, (, ), ,, getParent, (, ), ,]
[@, Override, public, void, remove, (, ), {, changeProxy, ., replaceWith, (, getGramps, (, ), ,, getParent, (, ), ,]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, NameInformation, ns, =]
[void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, NameInformation, ns, =, null, ;, if, (]
[void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, NameInformation, ns, =, null, ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, NameInformation, ns, =, null, ;, if, (, NodeUtil, ., isVarDeclaration, (]
[,, Node, parent, ), {, NameInformation, ns, =, null, ;, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {]
[parent, ), {, NameInformation, ns, =, null, ;, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, ns, =]
[{, NameInformation, ns, =, null, ;, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, ns, =, createNameInformation, (]
[ns, =, null, ;, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, ns, =, createNameInformation, (, t, ,]
[., isVarDeclaration, (, n, ), ), {, ns, =, createNameInformation, (, t, ,, n, ), ;, }, else, if, (]
[., isVarDeclaration, (, n, ), ), {, ns, =, createNameInformation, (, t, ,, n, ), ;, }, else, if, (]
[), ), {, ns, =, createNameInformation, (, t, ,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (]
[=, createNameInformation, (, t, ,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {]
[(, t, ,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, ns, =]
[,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, ns, =, createNameInformation, (]
[), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, ns, =, createNameInformation, (, t, ,]
[), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, ns, =, createNameInformation, (, t, ,]
[n, ), ), {, ns, =, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), ;, }, if, (]
[n, ), ), {, ns, =, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), ;, }, if, (]
[), {, ns, =, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), ;, }, if, (, ns, !=]
[t, ,, n, ., getFirstChild, (, ), ), ;, }, if, (, ns, !=, null, ), {, JsName, jsName, =]
[n, ., getFirstChild, (, ), ), ;, }, if, (, ns, !=, null, ), {, JsName, jsName, =, getName, (]
[n, ., getFirstChild, (, ), ), ;, }, if, (, ns, !=, null, ), {, JsName, jsName, =, getName, (]
[), ), ;, }, if, (, ns, !=, null, ), {, JsName, jsName, =, getName, (, ns, ., name, ,]
[}, if, (, ns, !=, null, ), {, JsName, jsName, =, getName, (, ns, ., name, ,, true, ), ;]
[}, if, (, ns, !=, null, ), {, JsName, jsName, =, getName, (, ns, ., name, ,, true, ), ;]
[!=, null, ), {, JsName, jsName, =, getName, (, ns, ., name, ,, true, ), ;, jsName, ., externallyDefined, =]
[), {, JsName, jsName, =, getName, (, ns, ., name, ,, true, ), ;, jsName, ., externallyDefined, =, true, ;]
[), {, JsName, jsName, =, getName, (, ns, ., name, ,, true, ), ;, jsName, ., externallyDefined, =, true, ;]
[=, getName, (, ns, ., name, ,, true, ), ;, jsName, ., externallyDefined, =, true, ;, externalNames, ., add, (]
[=, getName, (, ns, ., name, ,, true, ), ;, jsName, ., externallyDefined, =, true, ;, externalNames, ., add, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[,, Node, parent, ), {, if, (, !, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (]
[,, Node, parent, ), {, if, (, !, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (]
[!, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (, n, ., isAssign, (, ), ), {]
[., inGlobalScope, (, ), ), {, return, ;, }, if, (, n, ., isAssign, (, ), ), {, recordAssignment, (]
[(, ), ), {, return, ;, }, if, (, n, ., isAssign, (, ), ), {, recordAssignment, (, t, ,]
[), {, return, ;, }, if, (, n, ., isAssign, (, ), ), {, recordAssignment, (, t, ,, n, ,]
[if, (, n, ., isAssign, (, ), ), {, recordAssignment, (, t, ,, n, ,, n, ), ;, if, (]
[(, n, ., isAssign, (, ), ), {, recordAssignment, (, t, ,, n, ,, n, ), ;, if, (, !]
[(, n, ., isAssign, (, ), ), {, recordAssignment, (, t, ,, n, ,, n, ), ;, if, (, !]
[(, ), ), {, recordAssignment, (, t, ,, n, ,, n, ), ;, if, (, !, NodeUtil, ., isImmutableResult, (]
[(, ), ), {, recordAssignment, (, t, ,, n, ,, n, ), ;, if, (, !, NodeUtil, ., isImmutableResult, (]
[n, ,, n, ), ;, if, (, !, NodeUtil, ., isImmutableResult, (, n, ., getLastChild, (, ), ), ), {]
[n, ), ;, if, (, !, NodeUtil, ., isImmutableResult, (, n, ., getLastChild, (, ), ), ), {, recordConsumers, (]
[;, if, (, !, NodeUtil, ., isImmutableResult, (, n, ., getLastChild, (, ), ), ), {, recordConsumers, (, t, ,]
[(, !, NodeUtil, ., isImmutableResult, (, n, ., getLastChild, (, ), ), ), {, recordConsumers, (, t, ,, n, ,]
[getLastChild, (, ), ), ), {, recordConsumers, (, t, ,, n, ,, n, ), ;, }, }, else, if, (]
[getLastChild, (, ), ), ), {, recordConsumers, (, t, ,, n, ,, n, ), ;, }, }, else, if, (]
[), {, recordConsumers, (, t, ,, n, ,, n, ), ;, }, }, else, if, (, NodeUtil, ., isVarDeclaration, (]
[,, n, ), ;, }, }, else, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =]
[), ;, }, }, else, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (]
[}, }, else, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,]
[if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;]
[NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, recordDepScope, (]
[isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, recordDepScope, (, n, ,]
[ns, =, createNameInformation, (, t, ,, n, ), ;, recordDepScope, (, n, ,, ns, ), ;, }, else, if, (]
[ns, =, createNameInformation, (, t, ,, n, ), ;, recordDepScope, (, n, ,, ns, ), ;, }, else, if, (]
[t, ,, n, ), ;, recordDepScope, (, n, ,, ns, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (]
[n, ,, ns, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, NameInformation, ns, =]
[ns, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (]
[;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,]
[;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,]
[isFunctionDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), ;]
[n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), ;, recordDepScope, (]
[), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), ;, recordDepScope, (, n, ,]
[t, ,, n, ., getFirstChild, (, ), ), ;, recordDepScope, (, n, ,, ns, ), ;, }, else, if, (]
[t, ,, n, ., getFirstChild, (, ), ), ;, recordDepScope, (, n, ,, ns, ), ;, }, else, if, (]
[getFirstChild, (, ), ), ;, recordDepScope, (, n, ,, ns, ), ;, }, else, if, (, NodeUtil, ., isExprCall, (]
[n, ,, ns, ), ;, }, else, if, (, NodeUtil, ., isExprCall, (, n, ), ), {, Node, callNode, =]
[n, ,, ns, ), ;, }, else, if, (, NodeUtil, ., isExprCall, (, n, ), ), {, Node, callNode, =]
[NodeUtil, ., isExprCall, (, n, ), ), {, Node, callNode, =, n, ., getFirstChild, (, ), ;, Node, nameNode, =]
[NodeUtil, ., isExprCall, (, n, ), ), {, Node, callNode, =, n, ., getFirstChild, (, ), ;, Node, nameNode, =]
[callNode, =, n, ., getFirstChild, (, ), ;, Node, nameNode, =, callNode, ., getFirstChild, (, ), ;, NameInformation, ns, =]
[n, ., getFirstChild, (, ), ;, Node, nameNode, =, callNode, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (]
[getFirstChild, (, ), ;, Node, nameNode, =, callNode, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,]
[nameNode, =, callNode, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (]
[nameNode, =, callNode, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (]
[nameNode, =, callNode, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (]
[callNode, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=]
[getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, &&]
[getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, &&]
[ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef, ), {]
[createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef, ), {, recordDepScope, (]
[t, ,, nameNode, ), ;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef, ), {, recordDepScope, (, n, ,]
[}, }, }, private, void, recordConsumers, (, NodeTraversal, t, ,, Node, n, ,, Node, recordNode, ), {, Node, parent, =]
[}, }, }, private, void, recordConsumers, (, NodeTraversal, t, ,, Node, n, ,, Node, recordNode, ), {, Node, parent, =]
[t, ,, Node, n, ,, Node, recordNode, ), {, Node, parent, =, n, ., getParent, (, ), ;, switch, (]
[t, ,, Node, n, ,, Node, recordNode, ), {, Node, parent, =, n, ., getParent, (, ), ;, switch, (]
[{, Node, parent, =, n, ., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case]
[{, Node, parent, =, n, ., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case]
[getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (]
[getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (]
[), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (, n, ==]
[), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (, n, ==]
[(, ), ), {, case, Token, ., ASSIGN, :, if, (, n, ==, parent, ., getLastChild, (, ), ), {]
[), {, case, Token, ., ASSIGN, :, if, (, n, ==, parent, ., getLastChild, (, ), ), {, recordAssignment, (]
[case, Token, ., ASSIGN, :, if, (, n, ==, parent, ., getLastChild, (, ), ), {, recordAssignment, (, t, ,]
[., ASSIGN, :, if, (, n, ==, parent, ., getLastChild, (, ), ), {, recordAssignment, (, t, ,, parent, ,]
[(, n, ==, parent, ., getLastChild, (, ), ), {, recordAssignment, (, t, ,, parent, ,, recordNode, ), ;, }]
[==, parent, ., getLastChild, (, ), ), {, recordAssignment, (, t, ,, parent, ,, recordNode, ), ;, }, recordConsumers, (]
[., getLastChild, (, ), ), {, recordAssignment, (, t, ,, parent, ,, recordNode, ), ;, }, recordConsumers, (, t, ,]
[(, ), ), {, recordAssignment, (, t, ,, parent, ,, recordNode, ), ;, }, recordConsumers, (, t, ,, parent, ,]
[t, ,, parent, ,, recordNode, ), ;, }, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case]
[t, ,, parent, ,, recordNode, ), ;, }, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case]
[}, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., NAME, :, NameInformation, ns, =]
[(, t, ,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., NAME, :, NameInformation, ns, =, createNameInformation, (]
[,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., NAME, :, NameInformation, ns, =, createNameInformation, (, t, ,]
[recordNode, ), ;, break, ;, case, Token, ., NAME, :, NameInformation, ns, =, createNameInformation, (, t, ,, parent, ), ;]
[;, break, ;, case, Token, ., NAME, :, NameInformation, ns, =, createNameInformation, (, t, ,, parent, ), ;, recordDepScope, (]
[;, case, Token, ., NAME, :, NameInformation, ns, =, createNameInformation, (, t, ,, parent, ), ;, recordDepScope, (, recordNode, ,]
[NameInformation, ns, =, createNameInformation, (, t, ,, parent, ), ;, recordDepScope, (, recordNode, ,, ns, ), ;, break, ;, case]
[NameInformation, ns, =, createNameInformation, (, t, ,, parent, ), ;, recordDepScope, (, recordNode, ,, ns, ), ;, break, ;, case]
[(, t, ,, parent, ), ;, recordDepScope, (, recordNode, ,, ns, ), ;, break, ;, case, Token, ., OR, :]
[,, parent, ), ;, recordDepScope, (, recordNode, ,, ns, ), ;, break, ;, case, Token, ., OR, :, recordConsumers, (]
[), ;, recordDepScope, (, recordNode, ,, ns, ), ;, break, ;, case, Token, ., OR, :, recordConsumers, (, t, ,]
[recordDepScope, (, recordNode, ,, ns, ), ;, break, ;, case, Token, ., OR, :, recordConsumers, (, t, ,, parent, ,]
[;, break, ;, case, Token, ., OR, :, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case]
[;, break, ;, case, Token, ., OR, :, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case]
[., OR, :, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., AND, :, case]
[., OR, :, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., AND, :, case]
[t, ,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., AND, :, case, Token, ., COMMA, :, case]
[t, ,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., AND, :, case, Token, ., COMMA, :, case]
[;, break, ;, case, Token, ., AND, :, case, Token, ., COMMA, :, case, Token, ., HOOK, :, if, (]
[;, break, ;, case, Token, ., AND, :, case, Token, ., COMMA, :, case, Token, ., HOOK, :, if, (]
[;, case, Token, ., AND, :, case, Token, ., COMMA, :, case, Token, ., HOOK, :, if, (, n, !=]
[;, case, Token, ., AND, :, case, Token, ., COMMA, :, case, Token, ., HOOK, :, if, (, n, !=]
[Token, ., COMMA, :, case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {]
[COMMA, :, case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, recordConsumers, (]
[case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, recordConsumers, (, t, ,]
[., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, recordConsumers, (, t, ,, parent, ,]
[;, }, }, private, void, recordAssignment, (, NodeTraversal, t, ,, Node, n, ,, Node, recordNode, ), {, Node, nameNode, =]
[;, }, }, private, void, recordAssignment, (, NodeTraversal, t, ,, Node, n, ,, Node, recordNode, ), {, Node, nameNode, =]
[,, Node, n, ,, Node, recordNode, ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, Node, parent, =]
[,, Node, n, ,, Node, recordNode, ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, Node, parent, =]
[nameNode, =, n, ., getFirstChild, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, NameInformation, ns, =]
[n, ., getFirstChild, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, NameInformation, ns, =, createNameInformation, (]
[getFirstChild, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,]
[parent, =, n, ., getParent, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (]
[parent, =, n, ., getParent, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (]
[n, ., getParent, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=]
[;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (]
[;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (]
[;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (]
[t, ,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (, parent, ., isFor, (, ), &&]
[,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (, parent, ., isFor, (, ), &&, !]
[,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (, parent, ., isFor, (, ), &&, !]
[if, (, ns, !=, null, ), {, if, (, parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn, (]
[{, if, (, parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, ), ), {, if, (]
[{, if, (, parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, ), ), {, if, (]
[{, if, (, parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, ), ), {, if, (]
[{, if, (, parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, ), ), {, if, (]
[NodeUtil, ., isForIn, (, parent, ), ), {, if, (, parent, ., getFirstChild, (, ), ., getNext, (, ), !=]
[(, parent, ), ), {, if, (, parent, ., getFirstChild, (, ), ., getNext, (, ), !=, n, ), {]
[), ), {, if, (, parent, ., getFirstChild, (, ), ., getNext, (, ), !=, n, ), {, recordDepScope, (]
[{, if, (, parent, ., getFirstChild, (, ), ., getNext, (, ), !=, n, ), {, recordDepScope, (, recordNode, ,]
[(, ), ., getNext, (, ), !=, n, ), {, recordDepScope, (, recordNode, ,, ns, ), ;, }, else, {]
[., getNext, (, ), !=, n, ), {, recordDepScope, (, recordNode, ,, ns, ), ;, }, else, {, recordDepScope, (]
[(, ), !=, n, ), {, recordDepScope, (, recordNode, ,, ns, ), ;, }, else, {, recordDepScope, (, nameNode, ,]
[(, recordNode, ,, ns, ), ;, }, else, {, recordDepScope, (, nameNode, ,, ns, ), ;, }, }, else, {]
[,, ns, ), ;, }, else, {, recordDepScope, (, nameNode, ,, ns, ), ;, }, }, else, {, recordDepScope, (]
[), ;, }, else, {, recordDepScope, (, nameNode, ,, ns, ), ;, }, }, else, {, recordDepScope, (, recordNode, ,]
[(, recordNode, ,, ns, ), ;, }, }, }, private, void, recordDepScope, (, Node, node, ,, NameInformation, name, ), {]
[(, recordNode, ,, ns, ), ;, }, }, }, private, void, recordDepScope, (, Node, node, ,, NameInformation, name, ), {]
[), ;, }, }, }, private, void, recordDepScope, (, Node, node, ,, NameInformation, name, ), {, Preconditions, ., checkNotNull, (]
[}, }, private, void, recordDepScope, (, Node, node, ,, NameInformation, name, ), {, Preconditions, ., checkNotNull, (, name, ), ;]
[}, }, private, void, recordDepScope, (, Node, node, ,, NameInformation, name, ), {, Preconditions, ., checkNotNull, (, name, ), ;]
[recordDepScope, (, Node, node, ,, NameInformation, name, ), {, Preconditions, ., checkNotNull, (, name, ), ;, scopes, ., put, (]
[Node, node, ,, NameInformation, name, ), {, Preconditions, ., checkNotNull, (, name, ), ;, scopes, ., put, (, node, ,]
[AbstractShallowCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractShallowCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isVarDeclaration, (]
[Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =]
[,, Node, parent, ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (]
[parent, ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,]
[if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;]
[if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;]
[isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (]
[n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ,]
[{, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;]
[ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (]
[ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (]
[Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (, ns, ., name, ), ;, }, else, if, (]
[Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (, ns, ., name, ), ;, }, else, if, (]
[ns, ,, "NameInformation is null", ), ;, createName, (, ns, ., name, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (]
[ns, ., name, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =]
[ns, ., name, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =]
[NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =]
[isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (]
[n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,]
[{, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;]
[{, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;]
[n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, Preconditions, ., checkNotNull, (]
[getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, Preconditions, ., checkNotNull, (, ns, ,]
[;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;]
[ns, =, createNameInformation, (, t, ,, nameNode, ), ;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (]
[ns, =, createNameInformation, (, t, ,, nameNode, ), ;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, t, ., inGlobalScope, (, ), ), {, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, t, ., inGlobalScope, (, ), ), {, if, (]
[,, Node, parent, ), {, if, (, t, ., inGlobalScope, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (]
[t, ., inGlobalScope, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =]
[inGlobalScope, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (]
[), ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,]
[if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;]
[if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;]
[isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (]
[), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ), ;]
[{, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ), ;, recordSet, (]
[{, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ), ;, recordSet, (]
[createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ), ;, recordSet, (, ns, ., name, ,]
[Preconditions, ., checkNotNull, (, ns, ), ;, recordSet, (, ns, ., name, ,, n, ), ;, }, else, if, (]
[Preconditions, ., checkNotNull, (, ns, ), ;, recordSet, (, ns, ., name, ,, n, ), ;, }, else, if, (]
[ns, ), ;, recordSet, (, ns, ., name, ,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (]
[name, ,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =]
[name, ,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =]
[NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =]
[isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (]
[n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,]
[nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (]
[nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (]
[n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=]
[NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, ), {, JsName, nameInfo, =]
[=, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, ), {, JsName, nameInfo, =, getName, (]
[=, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, ), {, JsName, nameInfo, =, getName, (]
[), ;, if, (, ns, !=, null, ), {, JsName, nameInfo, =, getName, (, nameNode, ., getString, (, ), ,]
[(, ns, !=, null, ), {, JsName, nameInfo, =, getName, (, nameNode, ., getString, (, ), ,, true, ), ;]
[!=, null, ), {, JsName, nameInfo, =, getName, (, nameNode, ., getString, (, ), ,, true, ), ;, recordSet, (]
[!=, null, ), {, JsName, nameInfo, =, getName, (, nameNode, ., getString, (, ), ,, true, ), ;, recordSet, (]
[JsName, nameInfo, =, getName, (, nameNode, ., getString, (, ), ,, true, ), ;, recordSet, (, nameInfo, ., name, ,]
[(, ), ,, true, ), ;, recordSet, (, nameInfo, ., name, ,, nameNode, ), ;, }, }, else, if, (]
[(, ), ,, true, ), ;, recordSet, (, nameInfo, ., name, ,, nameNode, ), ;, }, }, else, if, (]
[), ;, recordSet, (, nameInfo, ., name, ,, nameNode, ), ;, }, }, else, if, (, NodeUtil, ., isObjectLitKey, (]
[recordSet, (, nameInfo, ., name, ,, nameNode, ), ;, }, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,]
[), ;, }, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, NameInformation, ns, =]
[}, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, NameInformation, ns, =, createNameInformation, (]
[else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,]
[isObjectLitKey, (, n, ,, parent, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, if, (]
[isObjectLitKey, (, n, ,, parent, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, if, (]
[n, ,, parent, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, if, (, ns, !=]
[), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, if, (, ns, !=, null, ), {]
[{, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, if, (, ns, !=, null, ), {, recordSet, (]
[{, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, if, (, ns, !=, null, ), {, recordSet, (]
[createNameInformation, (, t, ,, n, ), ;, if, (, ns, !=, null, ), {, recordSet, (, ns, ., name, ,]
[(, ns, !=, null, ), {, recordSet, (, ns, ., name, ,, n, ), ;, }, }, }, if, (]
[(, ns, !=, null, ), {, recordSet, (, ns, ., name, ,, n, ), ;, }, }, }, if, (]
[name, ,, n, ), ;, }, }, }, if, (, n, ., isAssign, (, ), ), {, Node, nameNode, =]
[name, ,, n, ), ;, }, }, }, if, (, n, ., isAssign, (, ), ), {, Node, nameNode, =]
[(, n, ., isAssign, (, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =]
[., isAssign, (, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (]
[(, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,]
[nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (]
[nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (]
[n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=]
[;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (]
[;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (]
[(, t, ,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (, ns, ., isPrototype, ), {]
[,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (, ns, ., isPrototype, ), {, recordPrototypeSet, (]
[,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (, ns, ., isPrototype, ), {, recordPrototypeSet, (]
[if, (, ns, !=, null, ), {, if, (, ns, ., isPrototype, ), {, recordPrototypeSet, (, ns, ., prototypeClass, ,]
[if, (, ns, !=, null, ), {, if, (, ns, ., isPrototype, ), {, recordPrototypeSet, (, ns, ., prototypeClass, ,]
[null, ), {, if, (, ns, ., isPrototype, ), {, recordPrototypeSet, (, ns, ., prototypeClass, ,, ns, ., prototypeProperty, ,]
[., isPrototype, ), {, recordPrototypeSet, (, ns, ., prototypeClass, ,, ns, ., prototypeProperty, ,, n, ), ;, }, else, {]
[), {, recordPrototypeSet, (, ns, ., prototypeClass, ,, ns, ., prototypeProperty, ,, n, ), ;, }, else, {, recordSet, (]
[), {, recordPrototypeSet, (, ns, ., prototypeClass, ,, ns, ., prototypeProperty, ,, n, ), ;, }, else, {, recordSet, (]
[ns, ., prototypeClass, ,, ns, ., prototypeProperty, ,, n, ), ;, }, else, {, recordSet, (, ns, ., name, ,]
[), ;, }, else, {, recordSet, (, ns, ., name, ,, nameNode, ), ;, }, }, }, else, if, (]
[), ;, }, else, {, recordSet, (, ns, ., name, ,, nameNode, ), ;, }, }, }, else, if, (]
[,, nameNode, ), ;, }, }, }, else, if, (, n, ., isCall, (, ), ), {, Node, nameNode, =]
[,, nameNode, ), ;, }, }, }, else, if, (, n, ., isCall, (, ), ), {, Node, nameNode, =]
[(, n, ., isCall, (, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =]
[., isCall, (, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (]
[(, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,]
[nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (]
[nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (]
[nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (]
[n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=]
[getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, &&]
[getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, &&]
[(, t, ,, nameNode, ), ;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef, ), {, JsName, name, =]
[,, nameNode, ), ;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef, ), {, JsName, name, =, getName, (]
[,, nameNode, ), ;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef, ), {, JsName, name, =, getName, (]
[if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef, ), {, JsName, name, =, getName, (, ns, ., name, ,]
[!=, null, &&, ns, ., onlyAffectsClassDef, ), {, JsName, name, =, getName, (, ns, ., name, ,, true, ), ;]
[!=, null, &&, ns, ., onlyAffectsClassDef, ), {, JsName, name, =, getName, (, ns, ., name, ,, true, ), ;]
[., onlyAffectsClassDef, ), {, JsName, name, =, getName, (, ns, ., name, ,, true, ), ;, refNodes, ., add, (]
[{, JsName, name, =, getName, (, ns, ., name, ,, true, ), ;, refNodes, ., add, (, new, ClassDefiningFunctionNode, (]
[name, =, getName, (, ns, ., name, ,, true, ), ;, refNodes, ., add, (, new, ClassDefiningFunctionNode, (, name, ,]
[), ), ;, }, }, }, private, void, recordSet, (, String, name, ,, Node, node, ), {, JsName, jsn, =]
[;, }, }, }, private, void, recordSet, (, String, name, ,, Node, node, ), {, JsName, jsn, =, getName, (]
[}, }, private, void, recordSet, (, String, name, ,, Node, node, ), {, JsName, jsn, =, getName, (, name, ,]
[String, name, ,, Node, node, ), {, JsName, jsn, =, getName, (, name, ,, true, ), ;, JsNameRefNode, nameRefNode, =]
[Node, node, ), {, JsName, jsn, =, getName, (, name, ,, true, ), ;, JsNameRefNode, nameRefNode, =, new, JsNameRefNode, (]
[), {, JsName, jsn, =, getName, (, name, ,, true, ), ;, JsNameRefNode, nameRefNode, =, new, JsNameRefNode, (, jsn, ,]
[jsn, =, getName, (, name, ,, true, ), ;, JsNameRefNode, nameRefNode, =, new, JsNameRefNode, (, jsn, ,, node, ), ;]
[jsn, =, getName, (, name, ,, true, ), ;, JsNameRefNode, nameRefNode, =, new, JsNameRefNode, (, jsn, ,, node, ), ;]
[name, ,, true, ), ;, JsNameRefNode, nameRefNode, =, new, JsNameRefNode, (, jsn, ,, node, ), ;, refNodes, ., add, (]
[JsNameRefNode, nameRefNode, =, new, JsNameRefNode, (, jsn, ,, node, ), ;, refNodes, ., add, (, nameRefNode, ), ;, if, (]
[JsNameRefNode, nameRefNode, =, new, JsNameRefNode, (, jsn, ,, node, ), ;, refNodes, ., add, (, nameRefNode, ), ;, if, (]
[,, node, ), ;, refNodes, ., add, (, nameRefNode, ), ;, if, (, node, ., isGetElem, (, ), ), {]
[), ;, refNodes, ., add, (, nameRefNode, ), ;, if, (, node, ., isGetElem, (, ), ), {, recordWriteOnProperties, (]
[), ;, if, (, node, ., isGetElem, (, ), ), {, recordWriteOnProperties, (, name, ), ;, }, else, if, (]
[), ;, if, (, node, ., isGetElem, (, ), ), {, recordWriteOnProperties, (, name, ), ;, }, else, if, (]
[), ;, if, (, node, ., isGetElem, (, ), ), {, recordWriteOnProperties, (, name, ), ;, }, else, if, (]
[node, ., isGetElem, (, ), ), {, recordWriteOnProperties, (, name, ), ;, }, else, if, (, name, ., indexOf, (]
[(, ), ), {, recordWriteOnProperties, (, name, ), ;, }, else, if, (, name, ., indexOf, (, '.', ), !=]
[), ), {, recordWriteOnProperties, (, name, ), ;, }, else, if, (, name, ., indexOf, (, '.', ), !=, -]
[recordWriteOnProperties, (, name, ), ;, }, else, if, (, name, ., indexOf, (, '.', ), !=, -, 1, ), {]
[name, ), ;, }, else, if, (, name, ., indexOf, (, '.', ), !=, -, 1, ), {, recordWriteOnProperties, (]
[name, ), ;, }, else, if, (, name, ., indexOf, (, '.', ), !=, -, 1, ), {, recordWriteOnProperties, (]
[else, if, (, name, ., indexOf, (, '.', ), !=, -, 1, ), {, recordWriteOnProperties, (, name, ., substring, (]
[(, name, ., indexOf, (, '.', ), !=, -, 1, ), {, recordWriteOnProperties, (, name, ., substring, (, 0, ,]
[(, name, ., indexOf, (, '.', ), !=, -, 1, ), {, recordWriteOnProperties, (, name, ., substring, (, 0, ,]
[(, '.', ), !=, -, 1, ), {, recordWriteOnProperties, (, name, ., substring, (, 0, ,, name, ., lastIndexOf, (]
[;, }, }, private, void, recordPrototypeSet, (, String, className, ,, String, prototypeProperty, ,, Node, node, ), {, JsName, name, =]
[}, private, void, recordPrototypeSet, (, String, className, ,, String, prototypeProperty, ,, Node, node, ), {, JsName, name, =, getName, (]
[void, recordPrototypeSet, (, String, className, ,, String, prototypeProperty, ,, Node, node, ), {, JsName, name, =, getName, (, className, ,]
[String, className, ,, String, prototypeProperty, ,, Node, node, ), {, JsName, name, =, getName, (, className, ,, true, ), ;]
[String, className, ,, String, prototypeProperty, ,, Node, node, ), {, JsName, name, =, getName, (, className, ,, true, ), ;]
[String, className, ,, String, prototypeProperty, ,, Node, node, ), {, JsName, name, =, getName, (, className, ,, true, ), ;]
[Node, node, ), {, JsName, name, =, getName, (, className, ,, true, ), ;, name, ., prototypeNames, ., add, (]
[{, JsName, name, =, getName, (, className, ,, true, ), ;, name, ., prototypeNames, ., add, (, prototypeProperty, ), ;]
[{, JsName, name, =, getName, (, className, ,, true, ), ;, name, ., prototypeNames, ., add, (, prototypeProperty, ), ;]
[getName, (, className, ,, true, ), ;, name, ., prototypeNames, ., add, (, prototypeProperty, ), ;, refNodes, ., add, (]
[,, true, ), ;, name, ., prototypeNames, ., add, (, prototypeProperty, ), ;, refNodes, ., add, (, new, PrototypeSetNode, (]
[), ;, name, ., prototypeNames, ., add, (, prototypeProperty, ), ;, refNodes, ., add, (, new, PrototypeSetNode, (, name, ,]
[prototypeNames, ., add, (, prototypeProperty, ), ;, refNodes, ., add, (, new, PrototypeSetNode, (, name, ,, node, ), ), ;]
[add, (, prototypeProperty, ), ;, refNodes, ., add, (, new, PrototypeSetNode, (, name, ,, node, ), ), ;, recordWriteOnProperties, (]
[;, recordWriteOnProperties, (, className, ), ;, }, private, void, recordWriteOnProperties, (, String, parentName, ), {, do, {, JsName, parent, =]
[(, className, ), ;, }, private, void, recordWriteOnProperties, (, String, parentName, ), {, do, {, JsName, parent, =, getName, (]
[), ;, }, private, void, recordWriteOnProperties, (, String, parentName, ), {, do, {, JsName, parent, =, getName, (, parentName, ,]
[recordWriteOnProperties, (, String, parentName, ), {, do, {, JsName, parent, =, getName, (, parentName, ,, true, ), ;, if, (]
[recordWriteOnProperties, (, String, parentName, ), {, do, {, JsName, parent, =, getName, (, parentName, ,, true, ), ;, if, (]
[=, getName, (, parentName, ,, true, ), ;, if, (, parent, ., hasWrittenDescendants, ), {, return, ;, }, else, {]
[=, getName, (, parentName, ,, true, ), ;, if, (, parent, ., hasWrittenDescendants, ), {, return, ;, }, else, {]
[,, true, ), ;, if, (, parent, ., hasWrittenDescendants, ), {, return, ;, }, else, {, parent, ., hasWrittenDescendants, =]
[(, parent, ., hasWrittenDescendants, ), {, return, ;, }, else, {, parent, ., hasWrittenDescendants, =, true, ;, }, if, (]
[(, parent, ., hasWrittenDescendants, ), {, return, ;, }, else, {, parent, ., hasWrittenDescendants, =, true, ;, }, if, (]
[(, parent, ., hasWrittenDescendants, ), {, return, ;, }, else, {, parent, ., hasWrittenDescendants, =, true, ;, }, if, (]
[), {, return, ;, }, else, {, parent, ., hasWrittenDescendants, =, true, ;, }, if, (, parentName, ., indexOf, (]
[;, }, else, {, parent, ., hasWrittenDescendants, =, true, ;, }, if, (, parentName, ., indexOf, (, '.', ), ==]
[}, else, {, parent, ., hasWrittenDescendants, =, true, ;, }, if, (, parentName, ., indexOf, (, '.', ), ==, -]
[=, true, ;, }, if, (, parentName, ., indexOf, (, '.', ), ==, -, 1, ), {, return, ;, }]
[;, }, if, (, parentName, ., indexOf, (, '.', ), ==, -, 1, ), {, return, ;, }, parentName, =]
[;, }, if, (, parentName, ., indexOf, (, '.', ), ==, -, 1, ), {, return, ;, }, parentName, =]
[parentName, ., indexOf, (, '.', ), ==, -, 1, ), {, return, ;, }, parentName, =, parentName, ., substring, (]
[indexOf, (, '.', ), ==, -, 1, ), {, return, ;, }, parentName, =, parentName, ., substring, (, 0, ,]
[indexOf, (, '.', ), ==, -, 1, ), {, return, ;, }, parentName, =, parentName, ., substring, (, 0, ,]
[==, -, 1, ), {, return, ;, }, parentName, =, parentName, ., substring, (, 0, ,, parentName, ., lastIndexOf, (]
[}, parentName, =, parentName, ., substring, (, 0, ,, parentName, ., lastIndexOf, (, '.', ), ), ;, }, while, (]
[), ), ;, }, while, (, true, ), ;, }, }, private, static, final, Predicate, <, Node, >, NON_LOCAL_RESULT_PREDICATE, =]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, if, (]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, if, (]
[@, Override, public, boolean, apply, (, Node, input, ), {, if, (, input, ., isCall, (, ), ), {, return]
[apply, (, Node, input, ), {, if, (, input, ., isCall, (, ), ), {, return, false, ;, }, return]
[;, }, }, ;, private, class, FindReferences, implements, Callback, {, Set, <, Node, >, nodesToKeep, ;, FindReferences, (, ), {]
[}, ;, private, class, FindReferences, implements, Callback, {, Set, <, Node, >, nodesToKeep, ;, FindReferences, (, ), {, nodesToKeep, =]
[}, ;, private, class, FindReferences, implements, Callback, {, Set, <, Node, >, nodesToKeep, ;, FindReferences, (, ), {, nodesToKeep, =]
[(, ), {, nodesToKeep, =, Sets, ., newHashSet, (, ), ;, }, private, void, addAllChildren, (, Node, n, ), {]
[(, ), {, nodesToKeep, =, Sets, ., newHashSet, (, ), ;, }, private, void, addAllChildren, (, Node, n, ), {]
[=, Sets, ., newHashSet, (, ), ;, }, private, void, addAllChildren, (, Node, n, ), {, nodesToKeep, ., add, (]
[private, void, addAllChildren, (, Node, n, ), {, nodesToKeep, ., add, (, n, ), ;, for, (, Node, child, =]
[private, void, addAllChildren, (, Node, n, ), {, nodesToKeep, ., add, (, n, ), ;, for, (, Node, child, =]
[), {, nodesToKeep, ., add, (, n, ), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[), {, nodesToKeep, ., add, (, n, ), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[nodesToKeep, ., add, (, n, ), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[add, (, n, ), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;]
[n, ), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[n, ), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[=, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, addAllChildren, (]
[getNext, (, ), ), {, addAllChildren, (, child, ), ;, }, }, private, void, addSimplifiedChildren, (, Node, n, ), {]
[getNext, (, ), ), {, addAllChildren, (, child, ), ;, }, }, private, void, addSimplifiedChildren, (, Node, n, ), {]
[{, addAllChildren, (, child, ), ;, }, }, private, void, addSimplifiedChildren, (, Node, n, ), {, NodeTraversal, ., traverse, (]
[(, child, ), ;, }, }, private, void, addSimplifiedChildren, (, Node, n, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, }, }, private, void, addSimplifiedChildren, (, Node, n, ), {, NodeTraversal, ., traverse, (, compiler, ,, n, ,]
[}, private, void, addSimplifiedChildren, (, Node, n, ), {, NodeTraversal, ., traverse, (, compiler, ,, n, ,, new, GatherSideEffectSubexpressionsCallback, (]
[void, addSimplifiedChildren, (, Node, n, ), {, NodeTraversal, ., traverse, (, compiler, ,, n, ,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,]
[NodeAccumulator, (, ), ), ), ;, }, private, void, addSimplifiedExpression, (, Node, n, ,, Node, parent, ), {, if, (]
[NodeAccumulator, (, ), ), ), ;, }, private, void, addSimplifiedExpression, (, Node, n, ,, Node, parent, ), {, if, (]
[(, Node, n, ,, Node, parent, ), {, if, (, parent, ., isVar, (, ), ), {, Node, value, =]
[(, Node, n, ,, Node, parent, ), {, if, (, parent, ., isVar, (, ), ), {, Node, value, =]
[if, (, parent, ., isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (]
[if, (, parent, ., isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (]
[parent, ., isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, !=]
[(, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, !=, null, ), {]
[), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, !=, null, ), {, addSimplifiedChildren, (]
[(, ), ;, if, (, value, !=, null, ), {, addSimplifiedChildren, (, value, ), ;, }, }, else, if, (]
[(, ), ;, if, (, value, !=, null, ), {, addSimplifiedChildren, (, value, ), ;, }, }, else, if, (]
[(, ), ;, if, (, value, !=, null, ), {, addSimplifiedChildren, (, value, ), ;, }, }, else, if, (]
[!=, null, ), {, addSimplifiedChildren, (, value, ), ;, }, }, else, if, (, n, ., isAssign, (, ), &&]
[null, ), {, addSimplifiedChildren, (, value, ), ;, }, }, else, if, (, n, ., isAssign, (, ), &&, (]
[null, ), {, addSimplifiedChildren, (, value, ), ;, }, }, else, if, (, n, ., isAssign, (, ), &&, (]
[null, ), {, addSimplifiedChildren, (, value, ), ;, }, }, else, if, (, n, ., isAssign, (, ), &&, (]
[null, ), {, addSimplifiedChildren, (, value, ), ;, }, }, else, if, (, n, ., isAssign, (, ), &&, (]
[), ;, }, }, else, if, (, n, ., isAssign, (, ), &&, (, parent, ., isExprResult, (, ), ||]
[), ;, }, }, else, if, (, n, ., isAssign, (, ), &&, (, parent, ., isExprResult, (, ), ||]
[(, n, ., isAssign, (, ), &&, (, parent, ., isExprResult, (, ), ||, parent, ., isFor, (, ), ||]
[(, n, ., isAssign, (, ), &&, (, parent, ., isExprResult, (, ), ||, parent, ., isFor, (, ), ||]
[||, parent, ., isFor, (, ), ||, parent, ., isReturn, (, ), ), ), {, for, (, Node, child, :]
[||, parent, ., isFor, (, ), ||, parent, ., isReturn, (, ), ), ), {, for, (, Node, child, :]
[parent, ., isReturn, (, ), ), ), {, for, (, Node, child, :, n, ., children, (, ), ), {]
[isReturn, (, ), ), ), {, for, (, Node, child, :, n, ., children, (, ), ), {, addSimplifiedChildren, (]
[Node, child, :, n, ., children, (, ), ), {, addSimplifiedChildren, (, child, ), ;, }, }, else, if, (]
[Node, child, :, n, ., children, (, ), ), {, addSimplifiedChildren, (, child, ), ;, }, }, else, if, (]
[Node, child, :, n, ., children, (, ), ), {, addSimplifiedChildren, (, child, ), ;, }, }, else, if, (]
[(, ), ), {, addSimplifiedChildren, (, child, ), ;, }, }, else, if, (, n, ., isCall, (, ), &&]
[(, ), ), {, addSimplifiedChildren, (, child, ), ;, }, }, else, if, (, n, ., isCall, (, ), &&]
[), ;, }, }, else, if, (, n, ., isCall, (, ), &&, parent, ., isExprResult, (, ), ), {]
[}, }, else, if, (, n, ., isCall, (, ), &&, parent, ., isExprResult, (, ), ), {, addSimplifiedChildren, (]
[., isCall, (, ), &&, parent, ., isExprResult, (, ), ), {, addSimplifiedChildren, (, n, ), ;, }, else, {]
[(, ), &&, parent, ., isExprResult, (, ), ), {, addSimplifiedChildren, (, n, ), ;, }, else, {, addAllChildren, (]
[}, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[@, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, parent, ==]
[shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ), {, return]
[Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ), {, return, true, ;, }, if, (]
[Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ), {, return, true, ;, }, if, (]
[parent, ==, null, ), {, return, true, ;, }, if, (, n, ., isFor, (, ), ), {, if, (]
[==, null, ), {, return, true, ;, }, if, (, n, ., isFor, (, ), ), {, if, (, !]
[==, null, ), {, return, true, ;, }, if, (, n, ., isFor, (, ), ), {, if, (, !]
[return, true, ;, }, if, (, n, ., isFor, (, ), ), {, if, (, !, NodeUtil, ., isForIn, (]
[., isFor, (, ), ), {, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, Node, decl, =]
[., isFor, (, ), ), {, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, Node, decl, =]
[NodeUtil, ., isForIn, (, n, ), ), {, Node, decl, =, n, ., getFirstChild, (, ), ;, Node, pred, =]
[NodeUtil, ., isForIn, (, n, ), ), {, Node, decl, =, n, ., getFirstChild, (, ), ;, Node, pred, =]
[decl, =, n, ., getFirstChild, (, ), ;, Node, pred, =, decl, ., getNext, (, ), ;, Node, step, =]
[decl, =, n, ., getFirstChild, (, ), ;, Node, pred, =, decl, ., getNext, (, ), ;, Node, step, =]
[), ;, Node, pred, =, decl, ., getNext, (, ), ;, Node, step, =, pred, ., getNext, (, ), ;]
[Node, pred, =, decl, ., getNext, (, ), ;, Node, step, =, pred, ., getNext, (, ), ;, addSimplifiedExpression, (]
[=, decl, ., getNext, (, ), ;, Node, step, =, pred, ., getNext, (, ), ;, addSimplifiedExpression, (, decl, ,]
[getNext, (, ), ;, Node, step, =, pred, ., getNext, (, ), ;, addSimplifiedExpression, (, decl, ,, n, ), ;]
[), ;, Node, step, =, pred, ., getNext, (, ), ;, addSimplifiedExpression, (, decl, ,, n, ), ;, addSimplifiedExpression, (]
[Node, step, =, pred, ., getNext, (, ), ;, addSimplifiedExpression, (, decl, ,, n, ), ;, addSimplifiedExpression, (, pred, ,]
[pred, ., getNext, (, ), ;, addSimplifiedExpression, (, decl, ,, n, ), ;, addSimplifiedExpression, (, pred, ,, n, ), ;]
[getNext, (, ), ;, addSimplifiedExpression, (, decl, ,, n, ), ;, addSimplifiedExpression, (, pred, ,, n, ), ;, addSimplifiedExpression, (]
[), ;, addSimplifiedExpression, (, decl, ,, n, ), ;, addSimplifiedExpression, (, pred, ,, n, ), ;, addSimplifiedExpression, (, step, ,]
[addSimplifiedExpression, (, pred, ,, n, ), ;, addSimplifiedExpression, (, step, ,, n, ), ;, }, else, {, Node, decl, =]
[addSimplifiedExpression, (, pred, ,, n, ), ;, addSimplifiedExpression, (, step, ,, n, ), ;, }, else, {, Node, decl, =]
[step, ,, n, ), ;, }, else, {, Node, decl, =, n, ., getFirstChild, (, ), ;, Node, iter, =]
[step, ,, n, ), ;, }, else, {, Node, decl, =, n, ., getFirstChild, (, ), ;, Node, iter, =]
[else, {, Node, decl, =, n, ., getFirstChild, (, ), ;, Node, iter, =, decl, ., getNext, (, ), ;]
[Node, decl, =, n, ., getFirstChild, (, ), ;, Node, iter, =, decl, ., getNext, (, ), ;, addAllChildren, (]
[n, ., getFirstChild, (, ), ;, Node, iter, =, decl, ., getNext, (, ), ;, addAllChildren, (, decl, ), ;]
[getFirstChild, (, ), ;, Node, iter, =, decl, ., getNext, (, ), ;, addAllChildren, (, decl, ), ;, addAllChildren, (]
[decl, ., getNext, (, ), ;, addAllChildren, (, decl, ), ;, addAllChildren, (, iter, ), ;, }, }, if, (]
[decl, ., getNext, (, ), ;, addAllChildren, (, decl, ), ;, addAllChildren, (, iter, ), ;, }, }, if, (]
[decl, ., getNext, (, ), ;, addAllChildren, (, decl, ), ;, addAllChildren, (, iter, ), ;, }, }, if, (]
[decl, ., getNext, (, ), ;, addAllChildren, (, decl, ), ;, addAllChildren, (, iter, ), ;, }, }, if, (]
[decl, ., getNext, (, ), ;, addAllChildren, (, decl, ), ;, addAllChildren, (, iter, ), ;, }, }, if, (]
[addAllChildren, (, decl, ), ;, addAllChildren, (, iter, ), ;, }, }, if, (, parent, ., isVar, (, ), ||]
[addAllChildren, (, decl, ), ;, addAllChildren, (, iter, ), ;, }, }, if, (, parent, ., isVar, (, ), ||]
[(, iter, ), ;, }, }, if, (, parent, ., isVar, (, ), ||, parent, ., isExprResult, (, ), ||]
[(, iter, ), ;, }, }, if, (, parent, ., isVar, (, ), ||, parent, ., isExprResult, (, ), ||]
[if, (, parent, ., isVar, (, ), ||, parent, ., isExprResult, (, ), ||, parent, ., isReturn, (, ), ||]
[if, (, parent, ., isVar, (, ), ||, parent, ., isExprResult, (, ), ||, parent, ., isReturn, (, ), ||]
[||, parent, ., isExprResult, (, ), ||, parent, ., isReturn, (, ), ||, parent, ., isThrow, (, ), ), {]
[., isExprResult, (, ), ||, parent, ., isReturn, (, ), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (]
[(, ), ||, parent, ., isReturn, (, ), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,]
[(, ), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (]
[(, ), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (]
[), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (, (]
[), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (, (]
[), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (, (]
[), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (, (]
[), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (, (]
[), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (, (]
[), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (, (, parent, ., isIf, (, ), ||]
[), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (, (, parent, ., isIf, (, ), ||]
[,, parent, ), ;, }, if, (, (, parent, ., isIf, (, ), ||, parent, ., isWhile, (, ), ||]
[,, parent, ), ;, }, if, (, (, parent, ., isIf, (, ), ||, parent, ., isWhile, (, ), ||]
[(, (, parent, ., isIf, (, ), ||, parent, ., isWhile, (, ), ||, parent, ., isWith, (, ), ||]
[(, (, parent, ., isIf, (, ), ||, parent, ., isWhile, (, ), ||, parent, ., isWith, (, ), ||]
[), ||, parent, ., isWhile, (, ), ||, parent, ., isWith, (, ), ||, parent, ., isSwitch, (, ), ||]
[), ||, parent, ., isWhile, (, ), ||, parent, ., isWith, (, ), ||, parent, ., isSwitch, (, ), ||]
[||, parent, ., isWith, (, ), ||, parent, ., isSwitch, (, ), ||, parent, ., isCase, (, ), ), &&]
[||, parent, ., isWith, (, ), ||, parent, ., isSwitch, (, ), ||, parent, ., isCase, (, ), ), &&]
[||, parent, ., isWith, (, ), ||, parent, ., isSwitch, (, ), ||, parent, ., isCase, (, ), ), &&]
[||, parent, ., isSwitch, (, ), ||, parent, ., isCase, (, ), ), &&, parent, ., getFirstChild, (, ), ==]
[isSwitch, (, ), ||, parent, ., isCase, (, ), ), &&, parent, ., getFirstChild, (, ), ==, n, ), {]
[), ||, parent, ., isCase, (, ), ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, addAllChildren, (]
[), ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, addAllChildren, (, n, ), ;, }, if, (]
[), ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, addAllChildren, (, n, ), ;, }, if, (]
[), ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, addAllChildren, (, n, ), ;, }, if, (]
[(, ), ==, n, ), {, addAllChildren, (, n, ), ;, }, if, (, parent, ., isDo, (, ), &&]
[(, ), ==, n, ), {, addAllChildren, (, n, ), ;, }, if, (, parent, ., isDo, (, ), &&]
[(, ), ==, n, ), {, addAllChildren, (, n, ), ;, }, if, (, parent, ., isDo, (, ), &&]
[addAllChildren, (, n, ), ;, }, if, (, parent, ., isDo, (, ), &&, parent, ., getLastChild, (, ), ==]
[), ;, }, if, (, parent, ., isDo, (, ), &&, parent, ., getLastChild, (, ), ==, n, ), {]
[}, if, (, parent, ., isDo, (, ), &&, parent, ., getLastChild, (, ), ==, n, ), {, addAllChildren, (]
[isDo, (, ), &&, parent, ., getLastChild, (, ), ==, n, ), {, addAllChildren, (, n, ), ;, }, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, (]
[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, (]
[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, (, n, ., isName, (, ), ||]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, (, n, ., isName, (, ), ||]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, (, n, ., isName, (, ), ||]
[n, ,, Node, parent, ), {, if, (, !, (, n, ., isName, (, ), ||, NodeUtil, ., isGet, (]
[parent, ), {, if, (, !, (, n, ., isName, (, ), ||, NodeUtil, ., isGet, (, n, ), &&]
[), {, if, (, !, (, n, ., isName, (, ), ||, NodeUtil, ., isGet, (, n, ), &&, !]
[), {, if, (, !, (, n, ., isName, (, ), ||, NodeUtil, ., isGet, (, n, ), &&, !]
[isGet, (, n, ), &&, !, parent, ., isGetProp, (, ), ), ), {, return, ;, }, NameInformation, nameInfo, =]
[n, ), &&, !, parent, ., isGetProp, (, ), ), ), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (]
[&&, !, parent, ., isGetProp, (, ), ), ), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (, t, ,]
[(, ), ), ), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (, t, ,, n, ), ;, if, (]
[(, ), ), ), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (, t, ,, n, ), ;, if, (]
[), ), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (, t, ,, n, ), ;, if, (, nameInfo, ==]
[=, createNameInformation, (, t, ,, n, ), ;, if, (, nameInfo, ==, null, ), {, return, ;, }, if, (]
[=, createNameInformation, (, t, ,, n, ), ;, if, (, nameInfo, ==, null, ), {, return, ;, }, if, (]
[;, if, (, nameInfo, ==, null, ), {, return, ;, }, if, (, nameInfo, ., onlyAffectsClassDef, ), {, if, (]
[;, if, (, nameInfo, ==, null, ), {, return, ;, }, if, (, nameInfo, ., onlyAffectsClassDef, ), {, if, (]
[;, if, (, nameInfo, ==, null, ), {, return, ;, }, if, (, nameInfo, ., onlyAffectsClassDef, ), {, if, (]
[==, null, ), {, return, ;, }, if, (, nameInfo, ., onlyAffectsClassDef, ), {, if, (, nameInfo, ., superclass, !=]
[{, return, ;, }, if, (, nameInfo, ., onlyAffectsClassDef, ), {, if, (, nameInfo, ., superclass, !=, null, ), {]
[;, }, if, (, nameInfo, ., onlyAffectsClassDef, ), {, if, (, nameInfo, ., superclass, !=, null, ), {, recordReference, (]
[;, }, if, (, nameInfo, ., onlyAffectsClassDef, ), {, if, (, nameInfo, ., superclass, !=, null, ), {, recordReference, (]
[nameInfo, ., onlyAffectsClassDef, ), {, if, (, nameInfo, ., superclass, !=, null, ), {, recordReference, (, nameInfo, ., name, ,]
[nameInfo, ., onlyAffectsClassDef, ), {, if, (, nameInfo, ., superclass, !=, null, ), {, recordReference, (, nameInfo, ., name, ,]
[{, if, (, nameInfo, ., superclass, !=, null, ), {, recordReference, (, nameInfo, ., name, ,, nameInfo, ., superclass, ,]
[{, if, (, nameInfo, ., superclass, !=, null, ), {, recordReference, (, nameInfo, ., name, ,, nameInfo, ., superclass, ,]
[{, recordReference, (, nameInfo, ., name, ,, nameInfo, ., superclass, ,, RefType, ., INHERITANCE, ), ;, }, String, nodeName, =]
[{, recordReference, (, nameInfo, ., name, ,, nameInfo, ., superclass, ,, RefType, ., INHERITANCE, ), ;, }, String, nodeName, =]
[., superclass, ,, RefType, ., INHERITANCE, ), ;, }, String, nodeName, =, n, ., getQualifiedName, (, ), ;, if, (]
[., superclass, ,, RefType, ., INHERITANCE, ), ;, }, String, nodeName, =, n, ., getQualifiedName, (, ), ;, if, (]
[,, RefType, ., INHERITANCE, ), ;, }, String, nodeName, =, n, ., getQualifiedName, (, ), ;, if, (, nodeName, !=]
[INHERITANCE, ), ;, }, String, nodeName, =, n, ., getQualifiedName, (, ), ;, if, (, nodeName, !=, null, ), {]
[;, }, String, nodeName, =, n, ., getQualifiedName, (, ), ;, if, (, nodeName, !=, null, ), {, recordReference, (]
[;, }, String, nodeName, =, n, ., getQualifiedName, (, ), ;, if, (, nodeName, !=, null, ), {, recordReference, (]
[=, n, ., getQualifiedName, (, ), ;, if, (, nodeName, !=, null, ), {, recordReference, (, nameInfo, ., name, ,]
[., getQualifiedName, (, ), ;, if, (, nodeName, !=, null, ), {, recordReference, (, nameInfo, ., name, ,, nodeName, ,]
[., getQualifiedName, (, ), ;, if, (, nodeName, !=, null, ), {, recordReference, (, nameInfo, ., name, ,, nodeName, ,]
[{, recordReference, (, nameInfo, ., name, ,, nodeName, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (]
[{, recordReference, (, nameInfo, ., name, ,, nodeName, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (]
[{, recordReference, (, nameInfo, ., name, ,, nodeName, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (]
[{, recordReference, (, nameInfo, ., name, ,, nodeName, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (]
[,, nodeName, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (, parent, ., isInstanceOf, (, ), &&]
[,, nodeName, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (, parent, ., isInstanceOf, (, ), &&]
[,, nodeName, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (, parent, ., isInstanceOf, (, ), &&]
[), ;, }, return, ;, }, if, (, parent, ., isInstanceOf, (, ), &&, parent, ., getLastChild, (, ), ==]
[}, return, ;, }, if, (, parent, ., isInstanceOf, (, ), &&, parent, ., getLastChild, (, ), ==, n, &&]
[}, return, ;, }, if, (, parent, ., isInstanceOf, (, ), &&, parent, ., getLastChild, (, ), ==, n, &&]
[), &&, parent, ., getLastChild, (, ), ==, n, &&, n, ., isQualifiedName, (, ), ), {, JsName, checkedClass, =]
[parent, ., getLastChild, (, ), ==, n, &&, n, ., isQualifiedName, (, ), ), {, JsName, checkedClass, =, getName, (]
[parent, ., getLastChild, (, ), ==, n, &&, n, ., isQualifiedName, (, ), ), {, JsName, checkedClass, =, getName, (]
[), ==, n, &&, n, ., isQualifiedName, (, ), ), {, JsName, checkedClass, =, getName, (, nameInfo, ., name, ,]
[&&, n, ., isQualifiedName, (, ), ), {, JsName, checkedClass, =, getName, (, nameInfo, ., name, ,, true, ), ;]
[&&, n, ., isQualifiedName, (, ), ), {, JsName, checkedClass, =, getName, (, nameInfo, ., name, ,, true, ), ;]
[(, ), ), {, JsName, checkedClass, =, getName, (, nameInfo, ., name, ,, true, ), ;, refNodes, ., add, (]
[{, JsName, checkedClass, =, getName, (, nameInfo, ., name, ,, true, ), ;, refNodes, ., add, (, new, InstanceOfCheckNode, (]
[checkedClass, =, getName, (, nameInfo, ., name, ,, true, ), ;, refNodes, ., add, (, new, InstanceOfCheckNode, (, checkedClass, ,]
[nameInfo, ., name, ,, true, ), ;, refNodes, ., add, (, new, InstanceOfCheckNode, (, checkedClass, ,, n, ), ), ;]
[nameInfo, ., name, ,, true, ), ;, refNodes, ., add, (, new, InstanceOfCheckNode, (, checkedClass, ,, n, ), ), ;]
[true, ), ;, refNodes, ., add, (, new, InstanceOfCheckNode, (, checkedClass, ,, n, ), ), ;, checkedClass, ., hasInstanceOfReference, =]
[,, n, ), ), ;, checkedClass, ., hasInstanceOfReference, =, true, ;, return, ;, }, List, <, NameInformation, >, referers, =]
[), ), ;, checkedClass, ., hasInstanceOfReference, =, true, ;, return, ;, }, List, <, NameInformation, >, referers, =, getDependencyScope, (]
[hasInstanceOfReference, =, true, ;, return, ;, }, List, <, NameInformation, >, referers, =, getDependencyScope, (, n, ), ;, if, (]
[hasInstanceOfReference, =, true, ;, return, ;, }, List, <, NameInformation, >, referers, =, getDependencyScope, (, n, ), ;, if, (]
[List, <, NameInformation, >, referers, =, getDependencyScope, (, n, ), ;, if, (, referers, ., isEmpty, (, ), ), {]
[NameInformation, >, referers, =, getDependencyScope, (, n, ), ;, if, (, referers, ., isEmpty, (, ), ), {, maybeRecordReferenceOrAlias, (]
[referers, =, getDependencyScope, (, n, ), ;, if, (, referers, ., isEmpty, (, ), ), {, maybeRecordReferenceOrAlias, (, t, ,]
[getDependencyScope, (, n, ), ;, if, (, referers, ., isEmpty, (, ), ), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,]
[n, ), ;, if, (, referers, ., isEmpty, (, ), ), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,]
[;, if, (, referers, ., isEmpty, (, ), ), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,, nameInfo, ,]
[(, t, ,, n, ,, parent, ,, nameInfo, ,, null, ), ;, }, else, {, for, (, NameInformation, referring, :]
[n, ,, parent, ,, nameInfo, ,, null, ), ;, }, else, {, for, (, NameInformation, referring, :, referers, ), {]
[parent, ,, nameInfo, ,, null, ), ;, }, else, {, for, (, NameInformation, referring, :, referers, ), {, maybeRecordReferenceOrAlias, (]
[nameInfo, ,, null, ), ;, }, else, {, for, (, NameInformation, referring, :, referers, ), {, maybeRecordReferenceOrAlias, (, t, ,]
[null, ), ;, }, else, {, for, (, NameInformation, referring, :, referers, ), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,]
[;, }, else, {, for, (, NameInformation, referring, :, referers, ), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,]
[else, {, for, (, NameInformation, referring, :, referers, ), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,, nameInfo, ,]
[NameInformation, referring, :, referers, ), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,, nameInfo, ,, referring, ), ;, }]
[:, referers, ), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,, nameInfo, ,, referring, ), ;, }, recordAliases, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, NameInformation, nameInfo, ,, NameInformation, referring, ), {, String, referringName, =]
[Node, n, ,, Node, parent, ,, NameInformation, nameInfo, ,, NameInformation, referring, ), {, String, referringName, =, "", ;, if, (]
[Node, n, ,, Node, parent, ,, NameInformation, nameInfo, ,, NameInformation, referring, ), {, String, referringName, =, "", ;, if, (]
[,, Node, parent, ,, NameInformation, nameInfo, ,, NameInformation, referring, ), {, String, referringName, =, "", ;, if, (, referring, !=]
[,, NameInformation, nameInfo, ,, NameInformation, referring, ), {, String, referringName, =, "", ;, if, (, referring, !=, null, ), {]
[nameInfo, ,, NameInformation, referring, ), {, String, referringName, =, "", ;, if, (, referring, !=, null, ), {, referringName, =]
[nameInfo, ,, NameInformation, referring, ), {, String, referringName, =, "", ;, if, (, referring, !=, null, ), {, referringName, =]
[nameInfo, ,, NameInformation, referring, ), {, String, referringName, =, "", ;, if, (, referring, !=, null, ), {, referringName, =]
[), {, String, referringName, =, "", ;, if, (, referring, !=, null, ), {, referringName, =, referring, ., isPrototype, ?]
[), {, String, referringName, =, "", ;, if, (, referring, !=, null, ), {, referringName, =, referring, ., isPrototype, ?]
[=, "", ;, if, (, referring, !=, null, ), {, referringName, =, referring, ., isPrototype, ?, referring, ., prototypeClass, :]
[=, "", ;, if, (, referring, !=, null, ), {, referringName, =, referring, ., isPrototype, ?, referring, ., prototypeClass, :]
[), {, referringName, =, referring, ., isPrototype, ?, referring, ., prototypeClass, :, referring, ., name, ;, }, String, name, =]
[), {, referringName, =, referring, ., isPrototype, ?, referring, ., prototypeClass, :, referring, ., name, ;, }, String, name, =]
[isPrototype, ?, referring, ., prototypeClass, :, referring, ., name, ;, }, String, name, =, nameInfo, ., name, ;, if, (]
[referring, ., prototypeClass, :, referring, ., name, ;, }, String, name, =, nameInfo, ., name, ;, if, (, maybeHiddenAlias, (]
[prototypeClass, :, referring, ., name, ;, }, String, name, =, nameInfo, ., name, ;, if, (, maybeHiddenAlias, (, name, ,]
[name, ;, }, String, name, =, nameInfo, ., name, ;, if, (, maybeHiddenAlias, (, name, ,, n, ), ), {]
[}, String, name, =, nameInfo, ., name, ;, if, (, maybeHiddenAlias, (, name, ,, n, ), ), {, recordAlias, (]
[name, =, nameInfo, ., name, ;, if, (, maybeHiddenAlias, (, name, ,, n, ), ), {, recordAlias, (, name, ,]
[if, (, maybeHiddenAlias, (, name, ,, n, ), ), {, recordAlias, (, name, ,, WINDOW, ), ;, }, if, (]
[if, (, maybeHiddenAlias, (, name, ,, n, ), ), {, recordAlias, (, name, ,, WINDOW, ), ;, }, if, (]
[,, n, ), ), {, recordAlias, (, name, ,, WINDOW, ), ;, }, if, (, nameInfo, ., isExternallyReferenceable, ), {]
[), ), {, recordAlias, (, name, ,, WINDOW, ), ;, }, if, (, nameInfo, ., isExternallyReferenceable, ), {, recordReference, (]
[{, recordAlias, (, name, ,, WINDOW, ), ;, }, if, (, nameInfo, ., isExternallyReferenceable, ), {, recordReference, (, WINDOW, ,]
[(, name, ,, WINDOW, ), ;, }, if, (, nameInfo, ., isExternallyReferenceable, ), {, recordReference, (, WINDOW, ,, name, ,]
[(, name, ,, WINDOW, ), ;, }, if, (, nameInfo, ., isExternallyReferenceable, ), {, recordReference, (, WINDOW, ,, name, ,]
[;, }, if, (, nameInfo, ., isExternallyReferenceable, ), {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;]
[if, (, nameInfo, ., isExternallyReferenceable, ), {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, maybeRecordAlias, (]
[nameInfo, ., isExternallyReferenceable, ), {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, maybeRecordAlias, (, name, ,]
[isExternallyReferenceable, ), {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, maybeRecordAlias, (, name, ,, parent, ,]
[{, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, maybeRecordAlias, (, name, ,, parent, ,, referring, ,]
[., REGULAR, ), ;, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, return, ;, }, if, (]
[., REGULAR, ), ;, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, return, ;, }, if, (]
[maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, return, ;, }, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (]
[name, ,, parent, ,, referring, ,, referringName, ), ;, return, ;, }, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,]
[referringName, ), ;, return, ;, }, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, if, (]
[referringName, ), ;, return, ;, }, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, if, (]
[;, return, ;, }, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, if, (, referring, !=]
[}, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, if, (, referring, !=, null, ), {]
[(, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, if, (, referring, !=, null, ), {, recordReference, (]
[., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, if, (, referring, !=, null, ), {, recordReference, (, referringName, ,]
[(, n, ,, parent, ), ), {, if, (, referring, !=, null, ), {, recordReference, (, referringName, ,, name, ,]
[(, n, ,, parent, ), ), {, if, (, referring, !=, null, ), {, recordReference, (, referringName, ,, name, ,]
[null, ), {, recordReference, (, referringName, ,, name, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (]
[null, ), {, recordReference, (, referringName, ,, name, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (]
[(, referringName, ,, name, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (, nodesToKeep, ., contains, (]
[}, return, ;, }, if, (, nodesToKeep, ., contains, (, n, ), ), {, List, <, NameInformation, >, functionScopes, =]
[;, }, if, (, nodesToKeep, ., contains, (, n, ), ), {, List, <, NameInformation, >, functionScopes, =, getEnclosingFunctionDependencyScope, (]
[., contains, (, n, ), ), {, List, <, NameInformation, >, functionScopes, =, getEnclosingFunctionDependencyScope, (, t, ), ;, if, (]
[contains, (, n, ), ), {, List, <, NameInformation, >, functionScopes, =, getEnclosingFunctionDependencyScope, (, t, ), ;, if, (, !]
[contains, (, n, ), ), {, List, <, NameInformation, >, functionScopes, =, getEnclosingFunctionDependencyScope, (, t, ), ;, if, (, !]
[getEnclosingFunctionDependencyScope, (, t, ), ;, if, (, !, functionScopes, ., isEmpty, (, ), ), {, for, (, NameInformation, functionScope, :]
[), ;, if, (, !, functionScopes, ., isEmpty, (, ), ), {, for, (, NameInformation, functionScope, :, functionScopes, ), {]
[if, (, !, functionScopes, ., isEmpty, (, ), ), {, for, (, NameInformation, functionScope, :, functionScopes, ), {, recordReference, (]
[if, (, !, functionScopes, ., isEmpty, (, ), ), {, for, (, NameInformation, functionScope, :, functionScopes, ), {, recordReference, (]
[., isEmpty, (, ), ), {, for, (, NameInformation, functionScope, :, functionScopes, ), {, recordReference, (, functionScope, ., name, ,]
[(, ), ), {, for, (, NameInformation, functionScope, :, functionScopes, ), {, recordReference, (, functionScope, ., name, ,, name, ,]
[(, ), ), {, for, (, NameInformation, functionScope, :, functionScopes, ), {, recordReference, (, functionScope, ., name, ,, name, ,]
[functionScopes, ), {, recordReference, (, functionScope, ., name, ,, name, ,, RefType, ., REGULAR, ), ;, }, }, else, {]
[{, recordReference, (, functionScope, ., name, ,, name, ,, RefType, ., REGULAR, ), ;, }, }, else, {, recordReference, (]
[(, functionScope, ., name, ,, name, ,, RefType, ., REGULAR, ), ;, }, }, else, {, recordReference, (, WINDOW, ,]
[., name, ,, name, ,, RefType, ., REGULAR, ), ;, }, }, else, {, recordReference, (, WINDOW, ,, name, ,]
[., name, ,, name, ,, RefType, ., REGULAR, ), ;, }, }, else, {, recordReference, (, WINDOW, ,, name, ,]
[REGULAR, ), ;, }, }, else, {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, if, (]
[REGULAR, ), ;, }, }, else, {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, if, (]
[;, }, }, else, {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, if, (, referring, !=]
[else, {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, if, (, referring, !=, null, ), {]
[recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, if, (, referring, !=, null, ), {, maybeRecordAlias, (]
[WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, if, (, referring, !=, null, ), {, maybeRecordAlias, (, name, ,]
[name, ,, RefType, ., REGULAR, ), ;, if, (, referring, !=, null, ), {, maybeRecordAlias, (, name, ,, parent, ,]
[RefType, ., REGULAR, ), ;, if, (, referring, !=, null, ), {, maybeRecordAlias, (, name, ,, parent, ,, referring, ,]
[null, ), {, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, }, }, }, else, if, (]
[null, ), {, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, }, }, }, else, if, (]
[{, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, }, }, }, else, if, (, referring, !=]
[parent, ,, referring, ,, referringName, ), ;, }, }, }, else, if, (, referring, !=, null, ), {, if, (]
[,, referring, ,, referringName, ), ;, }, }, }, else, if, (, referring, !=, null, ), {, if, (, !]
[,, referringName, ), ;, }, }, }, else, if, (, referring, !=, null, ), {, if, (, !, maybeRecordAlias, (]
[), ;, }, }, }, else, if, (, referring, !=, null, ), {, if, (, !, maybeRecordAlias, (, name, ,]
[}, }, }, else, if, (, referring, !=, null, ), {, if, (, !, maybeRecordAlias, (, name, ,, parent, ,]
[}, else, if, (, referring, !=, null, ), {, if, (, !, maybeRecordAlias, (, name, ,, parent, ,, referring, ,]
[), {, if, (, !, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ), {, RefType, depType, =]
[), {, if, (, !, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ), {, RefType, depType, =]
[), {, if, (, !, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ), {, RefType, depType, =]
[!, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ), {, RefType, depType, =, referring, ., onlyAffectsClassDef, ?]
[!, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ), {, RefType, depType, =, referring, ., onlyAffectsClassDef, ?]
[,, parent, ,, referring, ,, referringName, ), ), {, RefType, depType, =, referring, ., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :]
[,, parent, ,, referring, ,, referringName, ), ), {, RefType, depType, =, referring, ., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :]
[,, referringName, ), ), {, RefType, depType, =, referring, ., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :, RefType, ., REGULAR, ;]
[), ), {, RefType, depType, =, referring, ., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :, RefType, ., REGULAR, ;, recordReference, (]
[{, RefType, depType, =, referring, ., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :, RefType, ., REGULAR, ;, recordReference, (, referringName, ,]
[depType, =, referring, ., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :, RefType, ., REGULAR, ;, recordReference, (, referringName, ,, name, ,]
[REGULAR, ;, recordReference, (, referringName, ,, name, ,, depType, ), ;, }, }, else, {, for, (, Node, ancestor, :]
[REGULAR, ;, recordReference, (, referringName, ,, name, ,, depType, ), ;, }, }, else, {, for, (, Node, ancestor, :]
[), ;, }, }, else, {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (]
[), ;, }, }, else, {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (]
[), ;, }, }, else, {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (]
[else, {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (, NodeUtil, ., isAssignmentOp, (]
[(, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (, NodeUtil, ., isAssignmentOp, (, ancestor, ), ||]
[(, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (, NodeUtil, ., isAssignmentOp, (, ancestor, ), ||]
[(, ), ), {, if, (, NodeUtil, ., isAssignmentOp, (, ancestor, ), ||, ancestor, ., isFunction, (, ), ), {]
[), {, if, (, NodeUtil, ., isAssignmentOp, (, ancestor, ), ||, ancestor, ., isFunction, (, ), ), {, recordReference, (]
[if, (, NodeUtil, ., isAssignmentOp, (, ancestor, ), ||, ancestor, ., isFunction, (, ), ), {, recordReference, (, WINDOW, ,]
[NodeUtil, ., isAssignmentOp, (, ancestor, ), ||, ancestor, ., isFunction, (, ), ), {, recordReference, (, WINDOW, ,, name, ,]
[NodeUtil, ., isAssignmentOp, (, ancestor, ), ||, ancestor, ., isFunction, (, ), ), {, recordReference, (, WINDOW, ,, name, ,]
[break, ;, }, }, }, }, private, void, recordAliases, (, List, <, NameInformation, >, referers, ), {, int, size, =]
[break, ;, }, }, }, }, private, void, recordAliases, (, List, <, NameInformation, >, referers, ), {, int, size, =]
[<, NameInformation, >, referers, ), {, int, size, =, referers, ., size, (, ), ;, for, (, int, i, =]
[>, referers, ), {, int, size, =, referers, ., size, (, ), ;, for, (, int, i, =, 0, ;]
[>, referers, ), {, int, size, =, referers, ., size, (, ), ;, for, (, int, i, =, 0, ;]
[), {, int, size, =, referers, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, size, =, referers, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;]
[int, size, =, referers, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;]
[for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, for, (, int, j, =]
[for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, for, (, int, j, =, i, +]
[=, 0, ;, i, <, size, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;]
[=, 0, ;, i, <, size, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;]
[;, i, <, size, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <]
[<, size, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <, size, ;]
[<, size, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <, size, ;]
[++, ), {, for, (, int, j, =, i, +, 1, ;, j, <, size, ;, j, ++, ), {]
[{, for, (, int, j, =, i, +, 1, ;, j, <, size, ;, j, ++, ), {, recordAlias, (]
[{, for, (, int, j, =, i, +, 1, ;, j, <, size, ;, j, ++, ), {, recordAlias, (]
[{, for, (, int, j, =, i, +, 1, ;, j, <, size, ;, j, ++, ), {, recordAlias, (]
[j, =, i, +, 1, ;, j, <, size, ;, j, ++, ), {, recordAlias, (, referers, ., get, (]
[;, j, <, size, ;, j, ++, ), {, recordAlias, (, referers, ., get, (, i, ), ., name, ,]
[;, j, <, size, ;, j, ++, ), {, recordAlias, (, referers, ., get, (, i, ), ., name, ,]
[;, j, <, size, ;, j, ++, ), {, recordAlias, (, referers, ., get, (, i, ), ., name, ,]
[;, j, ++, ), {, recordAlias, (, referers, ., get, (, i, ), ., name, ,, referers, ., get, (]
[(, referers, ., get, (, i, ), ., name, ,, referers, ., get, (, j, ), ., name, ), ;]
[., get, (, i, ), ., name, ,, referers, ., get, (, j, ), ., name, ), ;, recordAlias, (]
[., get, (, i, ), ., name, ,, referers, ., get, (, j, ), ., name, ), ;, recordAlias, (]
[., get, (, i, ), ., name, ,, referers, ., get, (, j, ), ., name, ), ;, recordAlias, (]
[), ., name, ,, referers, ., get, (, j, ), ., name, ), ;, recordAlias, (, referers, ., get, (]
[., get, (, j, ), ., name, ), ;, recordAlias, (, referers, ., get, (, j, ), ., name, ,]
[., get, (, j, ), ., name, ), ;, recordAlias, (, referers, ., get, (, j, ), ., name, ,]
[., get, (, j, ), ., name, ), ;, recordAlias, (, referers, ., get, (, j, ), ., name, ,]
[), ., name, ), ;, recordAlias, (, referers, ., get, (, j, ), ., name, ,, referers, ., get, (]
[name, ), ;, }, }, }, private, boolean, maybeHiddenAlias, (, String, name, ,, Node, n, ), {, Node, parent, =]
[name, ), ;, }, }, }, private, boolean, maybeHiddenAlias, (, String, name, ,, Node, n, ), {, Node, parent, =]
[maybeHiddenAlias, (, String, name, ,, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[maybeHiddenAlias, (, String, name, ,, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[,, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (]
[n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,]
[., getParent, (, ), ;, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, Node, rhs, =]
[., getParent, (, ), ;, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, Node, rhs, =]
[getParent, (, ), ;, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, Node, rhs, =, (]
[getParent, (, ), ;, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, Node, rhs, =, (]
[., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, Node, rhs, =, (, parent, ., isVar, (, ), ), ?]
[., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, Node, rhs, =, (, parent, ., isVar, (, ), ), ?]
[), ), {, Node, rhs, =, (, parent, ., isVar, (, ), ), ?, n, ., getFirstChild, (, ), :]
[), ), {, Node, rhs, =, (, parent, ., isVar, (, ), ), ?, n, ., getFirstChild, (, ), :]
[parent, ., isVar, (, ), ), ?, n, ., getFirstChild, (, ), :, parent, ., getLastChild, (, ), ;, return]
[., isVar, (, ), ), ?, n, ., getFirstChild, (, ), :, parent, ., getLastChild, (, ), ;, return, (]
[., isVar, (, ), ), ?, n, ., getFirstChild, (, ), :, parent, ., getLastChild, (, ), ;, return, (]
[., isVar, (, ), ), ?, n, ., getFirstChild, (, ), :, parent, ., getLastChild, (, ), ;, return, (]
[(, ), ), ?, n, ., getFirstChild, (, ), :, parent, ., getLastChild, (, ), ;, return, (, rhs, !=]
[), ?, n, ., getFirstChild, (, ), :, parent, ., getLastChild, (, ), ;, return, (, rhs, !=, null, &&]
[?, n, ., getFirstChild, (, ), :, parent, ., getLastChild, (, ), ;, return, (, rhs, !=, null, &&, !]
[?, n, ., getFirstChild, (, ), :, parent, ., getLastChild, (, ), ;, return, (, rhs, !=, null, &&, !]
[(, ), :, parent, ., getLastChild, (, ), ;, return, (, rhs, !=, null, &&, !, NodeUtil, ., evaluatesToLocalValue, (]
[:, parent, ., getLastChild, (, ), ;, return, (, rhs, !=, null, &&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ,]
[;, return, (, rhs, !=, null, &&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ,, NON_LOCAL_RESULT_PREDICATE, ), ), ;, }, return]
[private, boolean, maybeRecordAlias, (, String, name, ,, Node, parent, ,, NameInformation, referring, ,, String, referringName, ), {, boolean, isPrototypePropAssignment, =]
[private, boolean, maybeRecordAlias, (, String, name, ,, Node, parent, ,, NameInformation, referring, ,, String, referringName, ), {, boolean, isPrototypePropAssignment, =]
[private, boolean, maybeRecordAlias, (, String, name, ,, Node, parent, ,, NameInformation, referring, ,, String, referringName, ), {, boolean, isPrototypePropAssignment, =]
[,, Node, parent, ,, NameInformation, referring, ,, String, referringName, ), {, boolean, isPrototypePropAssignment, =, parent, ., isAssign, (, ), &&]
[,, Node, parent, ,, NameInformation, referring, ,, String, referringName, ), {, boolean, isPrototypePropAssignment, =, parent, ., isAssign, (, ), &&]
[NameInformation, referring, ,, String, referringName, ), {, boolean, isPrototypePropAssignment, =, parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (]
[NameInformation, referring, ,, String, referringName, ), {, boolean, isPrototypePropAssignment, =, parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (]
[=, parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ;, if, (]
[=, parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ;, if, (]
[=, parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ;, if, (]
[=, parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ;, if, (]
[parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ;, if, (, (]
[parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ;, if, (, (]
[parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ;, if, (, (]
[NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ;, if, (, (, parent, ., isName, (, ), ||]
[NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ;, if, (, (, parent, ., isName, (, ), ||]
[(, ), ), ;, if, (, (, parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&]
[), ), ;, if, (, (, parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !]
[;, if, (, (, parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&]
[;, if, (, (, parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&]
[(, (, parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&, referring, !=]
[parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&, referring, !=, null, &&]
[parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&, referring, !=, null, &&]
[parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&, referring, !=, null, &&]
[), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&, referring, !=, null, &&, scopes, ., get, (]
[(, ), ), &&, !, isPrototypePropAssignment, &&, referring, !=, null, &&, scopes, ., get, (, parent, ), ., contains, (]
[!, isPrototypePropAssignment, &&, referring, !=, null, &&, scopes, ., get, (, parent, ), ., contains, (, referring, ), ), {]
[&&, referring, !=, null, &&, scopes, ., get, (, parent, ), ., contains, (, referring, ), ), {, recordAlias, (]
[!=, null, &&, scopes, ., get, (, parent, ), ., contains, (, referring, ), ), {, recordAlias, (, referringName, ,]
[., get, (, parent, ), ., contains, (, referring, ), ), {, recordAlias, (, referringName, ,, name, ), ;, return]
[), ., contains, (, referring, ), ), {, recordAlias, (, referringName, ,, name, ), ;, return, true, ;, }, return]
[}, return, false, ;, }, private, class, NodeAccumulator, implements, SideEffectAccumulator, {, @, Override, public, boolean, classDefiningCallsHaveSideEffects, (, ), {, return]
[public, boolean, classDefiningCallsHaveSideEffects, (, ), {, return, false, ;, }, @, Override, public, void, keepSubTree, (, Node, original, ), {]
[classDefiningCallsHaveSideEffects, (, ), {, return, false, ;, }, @, Override, public, void, keepSubTree, (, Node, original, ), {, addAllChildren, (]
[{, addAllChildren, (, original, ), ;, }, @, Override, public, void, keepSimplifiedShortCircuitExpression, (, Node, original, ), {, Node, condition, =]
[{, addAllChildren, (, original, ), ;, }, @, Override, public, void, keepSimplifiedShortCircuitExpression, (, Node, original, ), {, Node, condition, =]
[public, void, keepSimplifiedShortCircuitExpression, (, Node, original, ), {, Node, condition, =, original, ., getFirstChild, (, ), ;, Node, thenBranch, =]
[public, void, keepSimplifiedShortCircuitExpression, (, Node, original, ), {, Node, condition, =, original, ., getFirstChild, (, ), ;, Node, thenBranch, =]
[), {, Node, condition, =, original, ., getFirstChild, (, ), ;, Node, thenBranch, =, condition, ., getNext, (, ), ;]
[Node, condition, =, original, ., getFirstChild, (, ), ;, Node, thenBranch, =, condition, ., getNext, (, ), ;, addAllChildren, (]
[original, ., getFirstChild, (, ), ;, Node, thenBranch, =, condition, ., getNext, (, ), ;, addAllChildren, (, condition, ), ;]
[getFirstChild, (, ), ;, Node, thenBranch, =, condition, ., getNext, (, ), ;, addAllChildren, (, condition, ), ;, addSimplifiedChildren, (]
[}, @, Override, public, void, keepSimplifiedHookExpression, (, Node, hook, ,, boolean, thenHasSideEffects, ,, boolean, elseHasSideEffects, ), {, Node, condition, =]
[}, @, Override, public, void, keepSimplifiedHookExpression, (, Node, hook, ,, boolean, thenHasSideEffects, ,, boolean, elseHasSideEffects, ), {, Node, condition, =]
[,, boolean, thenHasSideEffects, ,, boolean, elseHasSideEffects, ), {, Node, condition, =, hook, ., getFirstChild, (, ), ;, Node, thenBranch, =]
[,, boolean, thenHasSideEffects, ,, boolean, elseHasSideEffects, ), {, Node, condition, =, hook, ., getFirstChild, (, ), ;, Node, thenBranch, =]
[condition, =, hook, ., getFirstChild, (, ), ;, Node, thenBranch, =, condition, ., getNext, (, ), ;, Node, elseBranch, =]
[condition, =, hook, ., getFirstChild, (, ), ;, Node, thenBranch, =, condition, ., getNext, (, ), ;, Node, elseBranch, =]
[), ;, Node, thenBranch, =, condition, ., getNext, (, ), ;, Node, elseBranch, =, thenBranch, ., getNext, (, ), ;]
[Node, thenBranch, =, condition, ., getNext, (, ), ;, Node, elseBranch, =, thenBranch, ., getNext, (, ), ;, addAllChildren, (]
[getNext, (, ), ;, Node, elseBranch, =, thenBranch, ., getNext, (, ), ;, addAllChildren, (, condition, ), ;, if, (]
[;, Node, elseBranch, =, thenBranch, ., getNext, (, ), ;, addAllChildren, (, condition, ), ;, if, (, thenHasSideEffects, ), {]
[elseBranch, =, thenBranch, ., getNext, (, ), ;, addAllChildren, (, condition, ), ;, if, (, thenHasSideEffects, ), {, addSimplifiedChildren, (]
[), ;, addAllChildren, (, condition, ), ;, if, (, thenHasSideEffects, ), {, addSimplifiedChildren, (, thenBranch, ), ;, }, if, (]
[(, condition, ), ;, if, (, thenHasSideEffects, ), {, addSimplifiedChildren, (, thenBranch, ), ;, }, if, (, elseHasSideEffects, ), {]
[), ;, if, (, thenHasSideEffects, ), {, addSimplifiedChildren, (, thenBranch, ), ;, }, if, (, elseHasSideEffects, ), {, addSimplifiedChildren, (]
[}, }, private, class, RemoveListener, implements, AstChangeProxy, ., ChangeListener, {, @, Override, public, void, nodeRemoved, (, Node, n, ), {]
[}, }, private, class, RemoveListener, implements, AstChangeProxy, ., ChangeListener, {, @, Override, public, void, nodeRemoved, (, Node, n, ), {]
[n, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, NameAnalyzer, (, AbstractCompiler, compiler, ,, boolean, removeUnreferenced, ), {]
[n, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, NameAnalyzer, (, AbstractCompiler, compiler, ,, boolean, removeUnreferenced, ), {]
[., reportCodeChange, (, ), ;, }, }, NameAnalyzer, (, AbstractCompiler, compiler, ,, boolean, removeUnreferenced, ), {, this, ., compiler, =]
[(, ), ;, }, }, NameAnalyzer, (, AbstractCompiler, compiler, ,, boolean, removeUnreferenced, ), {, this, ., compiler, =, compiler, ;]
[(, ), ;, }, }, NameAnalyzer, (, AbstractCompiler, compiler, ,, boolean, removeUnreferenced, ), {, this, ., compiler, =, compiler, ;]
[}, NameAnalyzer, (, AbstractCompiler, compiler, ,, boolean, removeUnreferenced, ), {, this, ., compiler, =, compiler, ;, this, ., removeUnreferenced, =]
[(, AbstractCompiler, compiler, ,, boolean, removeUnreferenced, ), {, this, ., compiler, =, compiler, ;, this, ., removeUnreferenced, =, removeUnreferenced, ;]
[(, AbstractCompiler, compiler, ,, boolean, removeUnreferenced, ), {, this, ., compiler, =, compiler, ;, this, ., removeUnreferenced, =, removeUnreferenced, ;]
[boolean, removeUnreferenced, ), {, this, ., compiler, =, compiler, ;, this, ., removeUnreferenced, =, removeUnreferenced, ;, this, ., globalNames, =]
[), {, this, ., compiler, =, compiler, ;, this, ., removeUnreferenced, =, removeUnreferenced, ;, this, ., globalNames, =, DEFAULT_GLOBAL_NAMES, ;]
[), {, this, ., compiler, =, compiler, ;, this, ., removeUnreferenced, =, removeUnreferenced, ;, this, ., globalNames, =, DEFAULT_GLOBAL_NAMES, ;]
[compiler, =, compiler, ;, this, ., removeUnreferenced, =, removeUnreferenced, ;, this, ., globalNames, =, DEFAULT_GLOBAL_NAMES, ;, this, ., changeProxy, =]
[=, new, AstChangeProxy, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[=, new, AstChangeProxy, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternals, (, ), ), ;]
[externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternals, (, ), ), ;]
[), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternals, (, ), ), ;, NodeTraversal, ., traverse, (]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternals, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[traverse, (, compiler, ,, externs, ,, new, ProcessExternals, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[new, ProcessExternals, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDependencyScopes, (, ), ), ;]
[new, ProcessExternals, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDependencyScopes, (, ), ), ;]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDependencyScopes, (, ), ), ;, NodeTraversal, ., traverse, (]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDependencyScopes, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[traverse, (, compiler, ,, root, ,, new, FindDependencyScopes, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[new, FindDependencyScopes, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, HoistVariableAndFunctionDeclarations, (, ), ), ;]
[new, FindDependencyScopes, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, HoistVariableAndFunctionDeclarations, (, ), ), ;]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, HoistVariableAndFunctionDeclarations, (, ), ), ;, NodeTraversal, ., traverse, (]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, HoistVariableAndFunctionDeclarations, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[traverse, (, compiler, ,, root, ,, new, HoistVariableAndFunctionDeclarations, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[new, HoistVariableAndFunctionDeclarations, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDeclarationsAndSetters, (, ), ), ;]
[new, HoistVariableAndFunctionDeclarations, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDeclarationsAndSetters, (, ), ), ;]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDeclarationsAndSetters, (, ), ), ;, NodeTraversal, ., traverse, (]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDeclarationsAndSetters, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[traverse, (, compiler, ,, root, ,, new, FindDeclarationsAndSetters, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[new, FindDeclarationsAndSetters, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindReferences, (, ), ), ;]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindReferences, (, ), ), ;, referenceParentNames, (, ), ;]
[traverse, (, compiler, ,, root, ,, new, FindReferences, (, ), ), ;, referenceParentNames, (, ), ;, referenceAliases, (, ), ;]
[new, FindReferences, (, ), ), ;, referenceParentNames, (, ), ;, referenceAliases, (, ), ;, calculateReferences, (, ), ;, if, (]
[), ), ;, referenceParentNames, (, ), ;, referenceAliases, (, ), ;, calculateReferences, (, ), ;, if, (, removeUnreferenced, ), {]
[removeUnreferenced, ), {, removeUnreferenced, (, ), ;, }, }, private, void, recordAlias, (, String, fromName, ,, String, toName, ), {]
[{, removeUnreferenced, (, ), ;, }, }, private, void, recordAlias, (, String, fromName, ,, String, toName, ), {, recordReference, (]
[(, ), ;, }, }, private, void, recordAlias, (, String, fromName, ,, String, toName, ), {, recordReference, (, fromName, ,]
[;, }, }, private, void, recordAlias, (, String, fromName, ,, String, toName, ), {, recordReference, (, fromName, ,, toName, ,]
[;, }, }, private, void, recordAlias, (, String, fromName, ,, String, toName, ), {, recordReference, (, fromName, ,, toName, ,]
[fromName, ,, String, toName, ), {, recordReference, (, fromName, ,, toName, ,, RefType, ., REGULAR, ), ;, AliasSet, toNameAliasSet, =]
[fromName, ,, String, toName, ), {, recordReference, (, fromName, ,, toName, ,, RefType, ., REGULAR, ), ;, AliasSet, toNameAliasSet, =]
[), {, recordReference, (, fromName, ,, toName, ,, RefType, ., REGULAR, ), ;, AliasSet, toNameAliasSet, =, aliases, ., get, (]
[toName, ,, RefType, ., REGULAR, ), ;, AliasSet, toNameAliasSet, =, aliases, ., get, (, toName, ), ;, AliasSet, fromNameAliasSet, =]
[toName, ,, RefType, ., REGULAR, ), ;, AliasSet, toNameAliasSet, =, aliases, ., get, (, toName, ), ;, AliasSet, fromNameAliasSet, =]
[REGULAR, ), ;, AliasSet, toNameAliasSet, =, aliases, ., get, (, toName, ), ;, AliasSet, fromNameAliasSet, =, aliases, ., get, (]
[aliases, ., get, (, toName, ), ;, AliasSet, fromNameAliasSet, =, aliases, ., get, (, fromName, ), ;, AliasSet, resultSet, =]
[toName, ), ;, AliasSet, fromNameAliasSet, =, aliases, ., get, (, fromName, ), ;, AliasSet, resultSet, =, null, ;, if, (]
[toName, ), ;, AliasSet, fromNameAliasSet, =, aliases, ., get, (, fromName, ), ;, AliasSet, resultSet, =, null, ;, if, (]
[toName, ), ;, AliasSet, fromNameAliasSet, =, aliases, ., get, (, fromName, ), ;, AliasSet, resultSet, =, null, ;, if, (]
[;, AliasSet, fromNameAliasSet, =, aliases, ., get, (, fromName, ), ;, AliasSet, resultSet, =, null, ;, if, (, toNameAliasSet, ==]
[fromNameAliasSet, =, aliases, ., get, (, fromName, ), ;, AliasSet, resultSet, =, null, ;, if, (, toNameAliasSet, ==, null, &&]
[fromNameAliasSet, =, aliases, ., get, (, fromName, ), ;, AliasSet, resultSet, =, null, ;, if, (, toNameAliasSet, ==, null, &&]
[aliases, ., get, (, fromName, ), ;, AliasSet, resultSet, =, null, ;, if, (, toNameAliasSet, ==, null, &&, fromNameAliasSet, ==]
[(, fromName, ), ;, AliasSet, resultSet, =, null, ;, if, (, toNameAliasSet, ==, null, &&, fromNameAliasSet, ==, null, ), {]
[), ;, AliasSet, resultSet, =, null, ;, if, (, toNameAliasSet, ==, null, &&, fromNameAliasSet, ==, null, ), {, resultSet, =]
[resultSet, =, null, ;, if, (, toNameAliasSet, ==, null, &&, fromNameAliasSet, ==, null, ), {, resultSet, =, new, AliasSet, (]
[null, ;, if, (, toNameAliasSet, ==, null, &&, fromNameAliasSet, ==, null, ), {, resultSet, =, new, AliasSet, (, toName, ,]
[&&, fromNameAliasSet, ==, null, ), {, resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (]
[&&, fromNameAliasSet, ==, null, ), {, resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (]
[&&, fromNameAliasSet, ==, null, ), {, resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (]
[==, null, ), {, resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (, toNameAliasSet, !=]
[), {, resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (, toNameAliasSet, !=, null, &&]
[), {, resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (, toNameAliasSet, !=, null, &&]
[resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (, toNameAliasSet, !=, null, &&, fromNameAliasSet, !=]
[AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (, toNameAliasSet, !=, null, &&, fromNameAliasSet, !=, null, ), {]
[toName, ,, fromName, ), ;, }, else, if, (, toNameAliasSet, !=, null, &&, fromNameAliasSet, !=, null, ), {, resultSet, =]
[fromName, ), ;, }, else, if, (, toNameAliasSet, !=, null, &&, fromNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;]
[fromName, ), ;, }, else, if, (, toNameAliasSet, !=, null, &&, fromNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;]
[fromName, ), ;, }, else, if, (, toNameAliasSet, !=, null, &&, fromNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;]
[(, toNameAliasSet, !=, null, &&, fromNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., addAll, (]
[(, toNameAliasSet, !=, null, &&, fromNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., addAll, (]
[resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., addAll, (, fromNameAliasSet, ., names, ), ;, for, (, String, name, :]
[resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., addAll, (, fromNameAliasSet, ., names, ), ;, for, (, String, name, :]
[., names, ., addAll, (, fromNameAliasSet, ., names, ), ;, for, (, String, name, :, fromNameAliasSet, ., names, ), {]
[., names, ., addAll, (, fromNameAliasSet, ., names, ), ;, for, (, String, name, :, fromNameAliasSet, ., names, ), {]
[(, fromNameAliasSet, ., names, ), ;, for, (, String, name, :, fromNameAliasSet, ., names, ), {, aliases, ., put, (]
[., names, ), ;, for, (, String, name, :, fromNameAliasSet, ., names, ), {, aliases, ., put, (, name, ,]
[:, fromNameAliasSet, ., names, ), {, aliases, ., put, (, name, ,, resultSet, ), ;, }, }, else, if, (]
[:, fromNameAliasSet, ., names, ), {, aliases, ., put, (, name, ,, resultSet, ), ;, }, }, else, if, (]
[., names, ), {, aliases, ., put, (, name, ,, resultSet, ), ;, }, }, else, if, (, toNameAliasSet, !=]
[{, aliases, ., put, (, name, ,, resultSet, ), ;, }, }, else, if, (, toNameAliasSet, !=, null, ), {]
[., put, (, name, ,, resultSet, ), ;, }, }, else, if, (, toNameAliasSet, !=, null, ), {, resultSet, =]
[(, name, ,, resultSet, ), ;, }, }, else, if, (, toNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;]
[(, name, ,, resultSet, ), ;, }, }, else, if, (, toNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;]
[(, name, ,, resultSet, ), ;, }, }, else, if, (, toNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;]
[}, }, else, if, (, toNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., add, (]
[!=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., add, (, fromName, ), ;, }, else, {]
[), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., add, (, fromName, ), ;, }, else, {, resultSet, =]
[resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., add, (, fromName, ), ;, }, else, {, resultSet, =, fromNameAliasSet, ;]
[resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., add, (, fromName, ), ;, }, else, {, resultSet, =, fromNameAliasSet, ;]
[resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., add, (, fromName, ), ;, }, else, {, resultSet, =, fromNameAliasSet, ;]
[names, ., add, (, fromName, ), ;, }, else, {, resultSet, =, fromNameAliasSet, ;, resultSet, ., names, ., add, (]
[fromName, ), ;, }, else, {, resultSet, =, fromNameAliasSet, ;, resultSet, ., names, ., add, (, toName, ), ;, }]
[fromName, ), ;, }, else, {, resultSet, =, fromNameAliasSet, ;, resultSet, ., names, ., add, (, toName, ), ;, }]
[else, {, resultSet, =, fromNameAliasSet, ;, resultSet, ., names, ., add, (, toName, ), ;, }, aliases, ., put, (]
[resultSet, =, fromNameAliasSet, ;, resultSet, ., names, ., add, (, toName, ), ;, }, aliases, ., put, (, fromName, ,]
[;, resultSet, ., names, ., add, (, toName, ), ;, }, aliases, ., put, (, fromName, ,, resultSet, ), ;]
[;, resultSet, ., names, ., add, (, toName, ), ;, }, aliases, ., put, (, fromName, ,, resultSet, ), ;]
[., add, (, toName, ), ;, }, aliases, ., put, (, fromName, ,, resultSet, ), ;, aliases, ., put, (]
[(, toName, ), ;, }, aliases, ., put, (, fromName, ,, resultSet, ), ;, aliases, ., put, (, toName, ,]
[resultSet, ), ;, }, private, void, recordReference, (, String, fromName, ,, String, toName, ,, RefType, depType, ), {, if, (]
[resultSet, ), ;, }, private, void, recordReference, (, String, fromName, ,, String, toName, ,, RefType, depType, ), {, if, (]
[private, void, recordReference, (, String, fromName, ,, String, toName, ,, RefType, depType, ), {, if, (, fromName, ., equals, (]
[RefType, depType, ), {, if, (, fromName, ., equals, (, toName, ), ), {, return, ;, }, JsName, from, =]
[), {, if, (, fromName, ., equals, (, toName, ), ), {, return, ;, }, JsName, from, =, getName, (]
[if, (, fromName, ., equals, (, toName, ), ), {, return, ;, }, JsName, from, =, getName, (, fromName, ,]
[toName, ), ), {, return, ;, }, JsName, from, =, getName, (, fromName, ,, true, ), ;, JsName, to, =]
[), {, return, ;, }, JsName, from, =, getName, (, fromName, ,, true, ), ;, JsName, to, =, getName, (]
[return, ;, }, JsName, from, =, getName, (, fromName, ,, true, ), ;, JsName, to, =, getName, (, toName, ,]
[JsName, from, =, getName, (, fromName, ,, true, ), ;, JsName, to, =, getName, (, toName, ,, true, ), ;]
[JsName, from, =, getName, (, fromName, ,, true, ), ;, JsName, to, =, getName, (, toName, ,, true, ), ;]
[(, fromName, ,, true, ), ;, JsName, to, =, getName, (, toName, ,, true, ), ;, referenceGraph, ., createNode, (]
[true, ), ;, JsName, to, =, getName, (, toName, ,, true, ), ;, referenceGraph, ., createNode, (, from, ), ;]
[true, ), ;, JsName, to, =, getName, (, toName, ,, true, ), ;, referenceGraph, ., createNode, (, from, ), ;]
[to, =, getName, (, toName, ,, true, ), ;, referenceGraph, ., createNode, (, from, ), ;, referenceGraph, ., createNode, (]
[,, true, ), ;, referenceGraph, ., createNode, (, from, ), ;, referenceGraph, ., createNode, (, to, ), ;, if, (]
[true, ), ;, referenceGraph, ., createNode, (, from, ), ;, referenceGraph, ., createNode, (, to, ), ;, if, (, !]
[true, ), ;, referenceGraph, ., createNode, (, from, ), ;, referenceGraph, ., createNode, (, to, ), ;, if, (, !]
[., createNode, (, from, ), ;, referenceGraph, ., createNode, (, to, ), ;, if, (, !, referenceGraph, ., isConnectedInDirection, (]
[(, from, ), ;, referenceGraph, ., createNode, (, to, ), ;, if, (, !, referenceGraph, ., isConnectedInDirection, (, from, ,]
[), ;, referenceGraph, ., createNode, (, to, ), ;, if, (, !, referenceGraph, ., isConnectedInDirection, (, from, ,, depType, ,]
[createNode, (, to, ), ;, if, (, !, referenceGraph, ., isConnectedInDirection, (, from, ,, depType, ,, to, ), ), {]
[createNode, (, to, ), ;, if, (, !, referenceGraph, ., isConnectedInDirection, (, from, ,, depType, ,, to, ), ), {]
[;, if, (, !, referenceGraph, ., isConnectedInDirection, (, from, ,, depType, ,, to, ), ), {, referenceGraph, ., connect, (]
[(, !, referenceGraph, ., isConnectedInDirection, (, from, ,, depType, ,, to, ), ), {, referenceGraph, ., connect, (, from, ,]
[referenceGraph, ., isConnectedInDirection, (, from, ,, depType, ,, to, ), ), {, referenceGraph, ., connect, (, from, ,, depType, ,]
[., connect, (, from, ,, depType, ,, to, ), ;, }, }, void, removeUnreferenced, (, ), {, RemoveListener, listener, =]
[depType, ,, to, ), ;, }, }, void, removeUnreferenced, (, ), {, RemoveListener, listener, =, new, RemoveListener, (, ), ;]
[depType, ,, to, ), ;, }, }, void, removeUnreferenced, (, ), {, RemoveListener, listener, =, new, RemoveListener, (, ), ;]
[;, }, }, void, removeUnreferenced, (, ), {, RemoveListener, listener, =, new, RemoveListener, (, ), ;, changeProxy, ., registerListener, (]
[RemoveListener, listener, =, new, RemoveListener, (, ), ;, changeProxy, ., registerListener, (, listener, ), ;, for, (, RefNode, refNode, :]
[), ;, changeProxy, ., registerListener, (, listener, ), ;, for, (, RefNode, refNode, :, refNodes, ), {, JsName, name, =]
[), ;, changeProxy, ., registerListener, (, listener, ), ;, for, (, RefNode, refNode, :, refNodes, ), {, JsName, name, =]
[;, for, (, RefNode, refNode, :, refNodes, ), {, JsName, name, =, refNode, ., name, (, ), ;, if, (]
[;, for, (, RefNode, refNode, :, refNodes, ), {, JsName, name, =, refNode, ., name, (, ), ;, if, (]
[for, (, RefNode, refNode, :, refNodes, ), {, JsName, name, =, refNode, ., name, (, ), ;, if, (, !]
[for, (, RefNode, refNode, :, refNodes, ), {, JsName, name, =, refNode, ., name, (, ), ;, if, (, !]
[:, refNodes, ), {, JsName, name, =, refNode, ., name, (, ), ;, if, (, !, name, ., referenced, &&]
[refNodes, ), {, JsName, name, =, refNode, ., name, (, ), ;, if, (, !, name, ., referenced, &&, !]
[refNodes, ), {, JsName, name, =, refNode, ., name, (, ), ;, if, (, !, name, ., referenced, &&, !]
[=, refNode, ., name, (, ), ;, if, (, !, name, ., referenced, &&, !, name, ., externallyDefined, ), {]
[=, refNode, ., name, (, ), ;, if, (, !, name, ., referenced, &&, !, name, ., externallyDefined, ), {]
[(, !, name, ., referenced, &&, !, name, ., externallyDefined, ), {, refNode, ., remove, (, ), ;, }, }]
[(, !, name, ., referenced, &&, !, name, ., externallyDefined, ), {, refNode, ., remove, (, ), ;, }, }]
[referenced, &&, !, name, ., externallyDefined, ), {, refNode, ., remove, (, ), ;, }, }, changeProxy, ., unregisterListener, (]
[), ;, }, }, changeProxy, ., unregisterListener, (, listener, ), ;, }, String, getHtmlReport, (, ), {, StringBuilder, sb, =]
[., unregisterListener, (, listener, ), ;, }, String, getHtmlReport, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[., unregisterListener, (, listener, ), ;, }, String, getHtmlReport, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[), ;, }, String, getHtmlReport, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (]
[), ;, }, String, getHtmlReport, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (]
[), ;, }, String, getHtmlReport, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (]
[), ;, }, String, getHtmlReport, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (]
[), ;, }, String, getHtmlReport, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (]
[}, String, getHtmlReport, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (, "<html><body><style type=\"text/css\">", +]
[getHtmlReport, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (, "<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +]
[), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (, "<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +]
[StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (, "<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +]
[new, StringBuilder, (, ), ;, sb, ., append, (, "<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;]
[new, StringBuilder, (, ), ;, sb, ., append, (, "<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;]
[;, sb, ., append, (, "<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (]
[append, (, "<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;]
["<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (]
["body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,]
["body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,]
["ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: ", +]
["li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf, (]
["li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf, (]
[;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf, (, TriState, ., BOTH, ,]
[;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf, (, TriState, ., BOTH, ,]
[), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, ), ), ;]
[appendListItem, (, sb, ,, "Total Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, ), ), ;, appendListItem, (]
[sb, ,, "Total Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,]
[sb, ,, "Total Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,]
["Total Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Classes: ", +]
[countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (]
[countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (]
[BOTH, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,]
[BOTH, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,]
[), ;, appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), ), ;]
[appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (]
[sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,]
[sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,]
["Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Static Functions: ", +]
[countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (]
[countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (]
[TRUE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,]
[TRUE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,]
[), ;, appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), ), ;]
[appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (]
[sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,]
[sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,]
["Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Referenced Names: ", +]
[countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (]
[countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (]
[FALSE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,]
[FALSE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,]
[), ;, appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), ), ;]
[appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), ), ;, appendListItem, (]
[sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,]
[sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,]
["Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Classes: ", +]
[countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (]
[countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (]
[BOTH, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,]
[BOTH, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,]
[), ;, appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), ), ;]
[appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), ), ;, appendListItem, (]
[sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,]
[sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,]
["Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +]
[countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (]
[countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (]
[TRUE, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,]
[TRUE, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,]
[), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, ), ), ;]
[), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, ), ), ;]
[sb, ,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, ), ), ;, sb, ., append, (]
[+, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, ), ), ;, sb, ., append, (, "</ul>", ), ;]
[+, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, ), ), ;, sb, ., append, (, "</ul>", ), ;]
[., FALSE, ,, TriState, ., TRUE, ), ), ;, sb, ., append, (, "</ul>", ), ;, sb, ., append, (]
[;, sb, ., append, (, "</ul>", ), ;, sb, ., append, (, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node, :]
[;, sb, ., append, (, "</ul>", ), ;, sb, ., append, (, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node, :]
[;, sb, ., append, (, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node, :, allNames, ., values, (, ), ), {]
[;, sb, ., append, (, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node, :, allNames, ., values, (, ), ), {]
[(, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node, :, allNames, ., values, (, ), ), {, sb, ., append, (]
[(, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node, :, allNames, ., values, (, ), ), {, sb, ., append, (]
[(, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node, :, allNames, ., values, (, ), ), {, sb, ., append, (]
[), ;, for, (, JsName, node, :, allNames, ., values, (, ), ), {, sb, ., append, (, "<li>", +]
[for, (, JsName, node, :, allNames, ., values, (, ), ), {, sb, ., append, (, "<li>", +, nameAnchor, (]
[for, (, JsName, node, :, allNames, ., values, (, ), ), {, sb, ., append, (, "<li>", +, nameAnchor, (]
[allNames, ., values, (, ), ), {, sb, ., append, (, "<li>", +, nameAnchor, (, node, ., name, ), +]
[), {, sb, ., append, (, "<li>", +, nameAnchor, (, node, ., name, ), +, "<ul>", ), ;, if, (]
[), {, sb, ., append, (, "<li>", +, nameAnchor, (, node, ., name, ), +, "<ul>", ), ;, if, (]
[), {, sb, ., append, (, "<li>", +, nameAnchor, (, node, ., name, ), +, "<ul>", ), ;, if, (]
[), {, sb, ., append, (, "<li>", +, nameAnchor, (, node, ., name, ), +, "<ul>", ), ;, if, (]
[nameAnchor, (, node, ., name, ), +, "<ul>", ), ;, if, (, node, ., prototypeNames, ., size, (, ), >]
[., name, ), +, "<ul>", ), ;, if, (, node, ., prototypeNames, ., size, (, ), >, 0, ), {]
[., name, ), +, "<ul>", ), ;, if, (, node, ., prototypeNames, ., size, (, ), >, 0, ), {]
["<ul>", ), ;, if, (, node, ., prototypeNames, ., size, (, ), >, 0, ), {, sb, ., append, (]
[size, (, ), >, 0, ), {, sb, ., append, (, "<li>PROTOTYPES: ", ), ;, Iterator, <, String, >, protoIter, =]
[size, (, ), >, 0, ), {, sb, ., append, (, "<li>PROTOTYPES: ", ), ;, Iterator, <, String, >, protoIter, =]
[size, (, ), >, 0, ), {, sb, ., append, (, "<li>PROTOTYPES: ", ), ;, Iterator, <, String, >, protoIter, =]
[(, "<li>PROTOTYPES: ", ), ;, Iterator, <, String, >, protoIter, =, node, ., prototypeNames, ., iterator, (, ), ;, while, (]
[(, "<li>PROTOTYPES: ", ), ;, Iterator, <, String, >, protoIter, =, node, ., prototypeNames, ., iterator, (, ), ;, while, (]
[>, protoIter, =, node, ., prototypeNames, ., iterator, (, ), ;, while, (, protoIter, ., hasNext, (, ), ), {]
[>, protoIter, =, node, ., prototypeNames, ., iterator, (, ), ;, while, (, protoIter, ., hasNext, (, ), ), {]
[., prototypeNames, ., iterator, (, ), ;, while, (, protoIter, ., hasNext, (, ), ), {, sb, ., append, (]
[., prototypeNames, ., iterator, (, ), ;, while, (, protoIter, ., hasNext, (, ), ), {, sb, ., append, (]
[protoIter, ., hasNext, (, ), ), {, sb, ., append, (, protoIter, ., next, (, ), ), ;, if, (]
[protoIter, ., hasNext, (, ), ), {, sb, ., append, (, protoIter, ., next, (, ), ), ;, if, (]
[sb, ., append, (, protoIter, ., next, (, ), ), ;, if, (, protoIter, ., hasNext, (, ), ), {]
[sb, ., append, (, protoIter, ., next, (, ), ), ;, if, (, protoIter, ., hasNext, (, ), ), {]
[protoIter, ., next, (, ), ), ;, if, (, protoIter, ., hasNext, (, ), ), {, sb, ., append, (]
[(, protoIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }, }, if, (]
[(, protoIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }, }, if, (]
[(, ), ), {, sb, ., append, (, ", ", ), ;, }, }, }, if, (, referenceGraph, ., hasNode, (]
[(, referenceGraph, ., hasNode, (, node, ), ), {, List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, refersTo, =]
[(, referenceGraph, ., hasNode, (, node, ), ), {, List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, refersTo, =]
[(, node, ), ), {, List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, refersTo, =, referenceGraph, ., getOutEdges, (]
[List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, refersTo, =, referenceGraph, ., getOutEdges, (, node, ), ;, if, (]
[List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, refersTo, =, referenceGraph, ., getOutEdges, (, node, ), ;, if, (]
[List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, refersTo, =, referenceGraph, ., getOutEdges, (, node, ), ;, if, (]
[RefType, >, >, refersTo, =, referenceGraph, ., getOutEdges, (, node, ), ;, if, (, refersTo, ., size, (, ), >]
[refersTo, =, referenceGraph, ., getOutEdges, (, node, ), ;, if, (, refersTo, ., size, (, ), >, 0, ), {]
[refersTo, =, referenceGraph, ., getOutEdges, (, node, ), ;, if, (, refersTo, ., size, (, ), >, 0, ), {]
[getOutEdges, (, node, ), ;, if, (, refersTo, ., size, (, ), >, 0, ), {, sb, ., append, (]
[), {, sb, ., append, (, "<li>REFERS TO: ", ), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, toIter, =]
[), {, sb, ., append, (, "<li>REFERS TO: ", ), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, toIter, =]
[;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, toIter, =, refersTo, ., iterator, (, ), ;, while, (]
[;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, toIter, =, refersTo, ., iterator, (, ), ;, while, (]
[RefType, >, >, toIter, =, refersTo, ., iterator, (, ), ;, while, (, toIter, ., hasNext, (, ), ), {]
[RefType, >, >, toIter, =, refersTo, ., iterator, (, ), ;, while, (, toIter, ., hasNext, (, ), ), {]
[=, refersTo, ., iterator, (, ), ;, while, (, toIter, ., hasNext, (, ), ), {, sb, ., append, (]
[., iterator, (, ), ;, while, (, toIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (]
[., iterator, (, ), ;, while, (, toIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (]
[., iterator, (, ), ;, while, (, toIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (]
[., iterator, (, ), ;, while, (, toIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (]
[., iterator, (, ), ;, while, (, toIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (]
[toIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name, ), ), ;, if, (]
[toIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name, ), ), ;, if, (]
[(, ), ., getValue, (, ), ., name, ), ), ;, if, (, toIter, ., hasNext, (, ), ), {]
[(, ), ., getValue, (, ), ., name, ), ), ;, if, (, toIter, ., hasNext, (, ), ), {]
[(, ), ., name, ), ), ;, if, (, toIter, ., hasNext, (, ), ), {, sb, ., append, (]
[., append, (, ", ", ), ;, }, }, }, List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, referencedBy, =]
[., append, (, ", ", ), ;, }, }, }, List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, referencedBy, =]
[), ;, }, }, }, List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, referencedBy, =, referenceGraph, ., getInEdges, (]
[List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, referencedBy, =, referenceGraph, ., getInEdges, (, node, ), ;, if, (]
[List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, referencedBy, =, referenceGraph, ., getInEdges, (, node, ), ;, if, (]
[List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, referencedBy, =, referenceGraph, ., getInEdges, (, node, ), ;, if, (]
[RefType, >, >, referencedBy, =, referenceGraph, ., getInEdges, (, node, ), ;, if, (, referencedBy, ., size, (, ), >]
[referencedBy, =, referenceGraph, ., getInEdges, (, node, ), ;, if, (, referencedBy, ., size, (, ), >, 0, ), {]
[referencedBy, =, referenceGraph, ., getInEdges, (, node, ), ;, if, (, referencedBy, ., size, (, ), >, 0, ), {]
[getInEdges, (, node, ), ;, if, (, referencedBy, ., size, (, ), >, 0, ), {, sb, ., append, (]
[), {, sb, ., append, (, "<li>REFERENCED BY: ", ), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, fromIter, =]
[), {, sb, ., append, (, "<li>REFERENCED BY: ", ), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, fromIter, =]
[;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, fromIter, =, refersTo, ., iterator, (, ), ;, while, (]
[;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, fromIter, =, refersTo, ., iterator, (, ), ;, while, (]
[RefType, >, >, fromIter, =, refersTo, ., iterator, (, ), ;, while, (, fromIter, ., hasNext, (, ), ), {]
[RefType, >, >, fromIter, =, refersTo, ., iterator, (, ), ;, while, (, fromIter, ., hasNext, (, ), ), {]
[=, refersTo, ., iterator, (, ), ;, while, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (]
[., iterator, (, ), ;, while, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (]
[., iterator, (, ), ;, while, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (]
[., iterator, (, ), ;, while, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (]
[., iterator, (, ), ;, while, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (]
[., iterator, (, ), ;, while, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (]
[fromIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name, ), ), ;, if, (]
[fromIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name, ), ), ;, if, (]
[(, ), ., getValue, (, ), ., name, ), ), ;, if, (, fromIter, ., hasNext, (, ), ), {]
[(, ), ., getValue, (, ), ., name, ), ), ;, if, (, fromIter, ., hasNext, (, ), ), {]
[(, ), ., name, ), ), ;, if, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (]
[if, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }, }, }]
[if, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }, }, }]
[hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }, }, }, sb, ., append, (]
[), {, sb, ., append, (, ", ", ), ;, }, }, }, }, sb, ., append, (, "</li>", ), ;]
[), {, sb, ., append, (, ", ", ), ;, }, }, }, }, sb, ., append, (, "</li>", ), ;]
[append, (, ", ", ), ;, }, }, }, }, sb, ., append, (, "</li>", ), ;, sb, ., append, (]
[;, }, }, }, }, sb, ., append, (, "</li>", ), ;, sb, ., append, (, "</ul></li>", ), ;, }]
[;, }, }, }, }, sb, ., append, (, "</li>", ), ;, sb, ., append, (, "</ul></li>", ), ;, }]
[}, sb, ., append, (, "</li>", ), ;, sb, ., append, (, "</ul></li>", ), ;, }, sb, ., append, (]
[append, (, "</li>", ), ;, sb, ., append, (, "</ul></li>", ), ;, }, sb, ., append, (, "</ul>", ), ;]
[append, (, "</li>", ), ;, sb, ., append, (, "</ul></li>", ), ;, }, sb, ., append, (, "</ul>", ), ;]
[;, sb, ., append, (, "</ul></li>", ), ;, }, sb, ., append, (, "</ul>", ), ;, sb, ., append, (]
[(, "</ul></li>", ), ;, }, sb, ., append, (, "</ul>", ), ;, sb, ., append, (, "</body></html>", ), ;, return]
[(, "</ul></li>", ), ;, }, sb, ., append, (, "</ul>", ), ;, sb, ., append, (, "</body></html>", ), ;, return]
[;, return, sb, ., toString, (, ), ;, }, private, void, appendListItem, (, StringBuilder, sb, ,, String, text, ), {]
[;, return, sb, ., toString, (, ), ;, }, private, void, appendListItem, (, StringBuilder, sb, ,, String, text, ), {]
[toString, (, ), ;, }, private, void, appendListItem, (, StringBuilder, sb, ,, String, text, ), {, sb, ., append, (]
[toString, (, ), ;, }, private, void, appendListItem, (, StringBuilder, sb, ,, String, text, ), {, sb, ., append, (]
[toString, (, ), ;, }, private, void, appendListItem, (, StringBuilder, sb, ,, String, text, ), {, sb, ., append, (]
[), ;, }, private, void, appendListItem, (, StringBuilder, sb, ,, String, text, ), {, sb, ., append, (, "<li>", +]
[}, private, void, appendListItem, (, StringBuilder, sb, ,, String, text, ), {, sb, ., append, (, "<li>", +, text, +]
[., append, (, "<li>", +, text, +, "</li>\n", ), ;, }, private, String, nameLink, (, String, name, ), {, return]
[., append, (, "<li>", +, text, +, "</li>\n", ), ;, }, private, String, nameLink, (, String, name, ), {, return]
[., append, (, "<li>", +, text, +, "</li>\n", ), ;, }, private, String, nameLink, (, String, name, ), {, return]
[., append, (, "<li>", +, text, +, "</li>\n", ), ;, }, private, String, nameLink, (, String, name, ), {, return]
[., append, (, "<li>", +, text, +, "</li>\n", ), ;, }, private, String, nameLink, (, String, name, ), {, return]
[(, "<li>", +, text, +, "</li>\n", ), ;, }, private, String, nameLink, (, String, name, ), {, return, "<a href=\"#", +]
[+, text, +, "</li>\n", ), ;, }, private, String, nameLink, (, String, name, ), {, return, "<a href=\"#", +, name, +]
[+, "</li>\n", ), ;, }, private, String, nameLink, (, String, name, ), {, return, "<a href=\"#", +, name, +, "\">", +]
[), ;, }, private, String, nameLink, (, String, name, ), {, return, "<a href=\"#", +, name, +, "\">", +, name, +]
["<a href=\"#", +, name, +, "\">", +, name, +, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return]
["<a href=\"#", +, name, +, "\">", +, name, +, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return]
["<a href=\"#", +, name, +, "\">", +, name, +, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return]
["<a href=\"#", +, name, +, "\">", +, name, +, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return]
["<a href=\"#", +, name, +, "\">", +, name, +, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return]
[name, +, "\">", +, name, +, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return, "<a name=\"", +]
["\">", +, name, +, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return, "<a name=\"", +, name, +]
[name, +, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return, "<a name=\"", +, name, +, "\">", +]
["</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return, "<a name=\"", +, name, +, "\">", +, name, +]
["\">", +, name, +, "</a>", ;, }, private, JsName, getName, (, String, name, ,, boolean, canCreate, ), {, if, (]
[+, "</a>", ;, }, private, JsName, getName, (, String, name, ,, boolean, canCreate, ), {, if, (, canCreate, ), {]
[;, }, private, JsName, getName, (, String, name, ,, boolean, canCreate, ), {, if, (, canCreate, ), {, createName, (]
[(, String, name, ,, boolean, canCreate, ), {, if, (, canCreate, ), {, createName, (, name, ), ;, }, return]
[(, String, name, ,, boolean, canCreate, ), {, if, (, canCreate, ), {, createName, (, name, ), ;, }, return]
[boolean, canCreate, ), {, if, (, canCreate, ), {, createName, (, name, ), ;, }, return, allNames, ., get, (]
[return, allNames, ., get, (, name, ), ;, }, private, void, createName, (, String, name, ), {, JsName, jsn, =]
[return, allNames, ., get, (, name, ), ;, }, private, void, createName, (, String, name, ), {, JsName, jsn, =]
[(, name, ), ;, }, private, void, createName, (, String, name, ), {, JsName, jsn, =, allNames, ., get, (]
[private, void, createName, (, String, name, ), {, JsName, jsn, =, allNames, ., get, (, name, ), ;, if, (]
[private, void, createName, (, String, name, ), {, JsName, jsn, =, allNames, ., get, (, name, ), ;, if, (]
[createName, (, String, name, ), {, JsName, jsn, =, allNames, ., get, (, name, ), ;, if, (, jsn, ==]
[name, ), {, JsName, jsn, =, allNames, ., get, (, name, ), ;, if, (, jsn, ==, null, ), {]
[{, JsName, jsn, =, allNames, ., get, (, name, ), ;, if, (, jsn, ==, null, ), {, jsn, =]
[., get, (, name, ), ;, if, (, jsn, ==, null, ), {, jsn, =, new, JsName, (, ), ;]
[., get, (, name, ), ;, if, (, jsn, ==, null, ), {, jsn, =, new, JsName, (, ), ;]
[), ;, if, (, jsn, ==, null, ), {, jsn, =, new, JsName, (, ), ;, jsn, ., name, =]
[if, (, jsn, ==, null, ), {, jsn, =, new, JsName, (, ), ;, jsn, ., name, =, name, ;]
[if, (, jsn, ==, null, ), {, jsn, =, new, JsName, (, ), ;, jsn, ., name, =, name, ;]
[null, ), {, jsn, =, new, JsName, (, ), ;, jsn, ., name, =, name, ;, allNames, ., put, (]
[{, jsn, =, new, JsName, (, ), ;, jsn, ., name, =, name, ;, allNames, ., put, (, name, ,]
[}, }, private, void, referenceAliases, (, ), {, for, (, Map, ., Entry, <, String, ,, AliasSet, >, entry, :]
[}, }, private, void, referenceAliases, (, ), {, for, (, Map, ., Entry, <, String, ,, AliasSet, >, entry, :]
[Map, ., Entry, <, String, ,, AliasSet, >, entry, :, aliases, ., entrySet, (, ), ), {, JsName, name, =]
[Entry, <, String, ,, AliasSet, >, entry, :, aliases, ., entrySet, (, ), ), {, JsName, name, =, getName, (]
[Entry, <, String, ,, AliasSet, >, entry, :, aliases, ., entrySet, (, ), ), {, JsName, name, =, getName, (]
[entry, :, aliases, ., entrySet, (, ), ), {, JsName, name, =, getName, (, entry, ., getKey, (, ), ,]
[(, ), ), {, JsName, name, =, getName, (, entry, ., getKey, (, ), ,, false, ), ;, if, (]
[(, ), ), {, JsName, name, =, getName, (, entry, ., getKey, (, ), ,, false, ), ;, if, (]
[(, ), ), {, JsName, name, =, getName, (, entry, ., getKey, (, ), ,, false, ), ;, if, (]
[JsName, name, =, getName, (, entry, ., getKey, (, ), ,, false, ), ;, if, (, name, ., hasWrittenDescendants, ||]
[JsName, name, =, getName, (, entry, ., getKey, (, ), ,, false, ), ;, if, (, name, ., hasWrittenDescendants, ||]
[,, false, ), ;, if, (, name, ., hasWrittenDescendants, ||, name, ., hasInstanceOfReference, ), {, for, (, String, alias, :]
[,, false, ), ;, if, (, name, ., hasWrittenDescendants, ||, name, ., hasInstanceOfReference, ), {, for, (, String, alias, :]
[,, false, ), ;, if, (, name, ., hasWrittenDescendants, ||, name, ., hasInstanceOfReference, ), {, for, (, String, alias, :]
[||, name, ., hasInstanceOfReference, ), {, for, (, String, alias, :, entry, ., getValue, (, ), ., names, ), {]
[., hasInstanceOfReference, ), {, for, (, String, alias, :, entry, ., getValue, (, ), ., names, ), {, recordReference, (]
[), {, for, (, String, alias, :, entry, ., getValue, (, ), ., names, ), {, recordReference, (, alias, ,]
[), {, for, (, String, alias, :, entry, ., getValue, (, ), ., names, ), {, recordReference, (, alias, ,]
[:, entry, ., getValue, (, ), ., names, ), {, recordReference, (, alias, ,, entry, ., getKey, (, ), ,]
[:, entry, ., getValue, (, ), ., names, ), {, recordReference, (, alias, ,, entry, ., getKey, (, ), ,]
[., REGULAR, ), ;, }, }, }, }, private, void, referenceParentNames, (, ), {, Set, <, JsName, >, allNamesCopy, =]
[., REGULAR, ), ;, }, }, }, }, private, void, referenceParentNames, (, ), {, Set, <, JsName, >, allNamesCopy, =]
[}, }, }, }, private, void, referenceParentNames, (, ), {, Set, <, JsName, >, allNamesCopy, =, Sets, ., newHashSet, (]
[}, }, }, }, private, void, referenceParentNames, (, ), {, Set, <, JsName, >, allNamesCopy, =, Sets, ., newHashSet, (]
[JsName, >, allNamesCopy, =, Sets, ., newHashSet, (, allNames, ., values, (, ), ), ;, for, (, JsName, name, :]
[newHashSet, (, allNames, ., values, (, ), ), ;, for, (, JsName, name, :, allNamesCopy, ), {, String, curName, =]
[newHashSet, (, allNames, ., values, (, ), ), ;, for, (, JsName, name, :, allNamesCopy, ), {, String, curName, =]
[), ;, for, (, JsName, name, :, allNamesCopy, ), {, String, curName, =, name, ., name, ;, JsName, curJsName, =]
[JsName, name, :, allNamesCopy, ), {, String, curName, =, name, ., name, ;, JsName, curJsName, =, name, ;, while, (]
[JsName, name, :, allNamesCopy, ), {, String, curName, =, name, ., name, ;, JsName, curJsName, =, name, ;, while, (]
[JsName, name, :, allNamesCopy, ), {, String, curName, =, name, ., name, ;, JsName, curJsName, =, name, ;, while, (]
[), {, String, curName, =, name, ., name, ;, JsName, curJsName, =, name, ;, while, (, curName, ., indexOf, (]
[curName, =, name, ., name, ;, JsName, curJsName, =, name, ;, while, (, curName, ., indexOf, (, '.', ), !=]
[=, name, ., name, ;, JsName, curJsName, =, name, ;, while, (, curName, ., indexOf, (, '.', ), !=, -]
[curJsName, =, name, ;, while, (, curName, ., indexOf, (, '.', ), !=, -, 1, ), {, String, parentName, =]
[curJsName, =, name, ;, while, (, curName, ., indexOf, (, '.', ), !=, -, 1, ), {, String, parentName, =]
[while, (, curName, ., indexOf, (, '.', ), !=, -, 1, ), {, String, parentName, =, curName, ., substring, (]
[curName, ., indexOf, (, '.', ), !=, -, 1, ), {, String, parentName, =, curName, ., substring, (, 0, ,]
[curName, ., indexOf, (, '.', ), !=, -, 1, ), {, String, parentName, =, curName, ., substring, (, 0, ,]
['.', ), !=, -, 1, ), {, String, parentName, =, curName, ., substring, (, 0, ,, curName, ., lastIndexOf, (]
[{, String, parentName, =, curName, ., substring, (, 0, ,, curName, ., lastIndexOf, (, '.', ), ), ;, if, (]
[String, parentName, =, curName, ., substring, (, 0, ,, curName, ., lastIndexOf, (, '.', ), ), ;, if, (, !]
[String, parentName, =, curName, ., substring, (, 0, ,, curName, ., lastIndexOf, (, '.', ), ), ;, if, (, !]
[., substring, (, 0, ,, curName, ., lastIndexOf, (, '.', ), ), ;, if, (, !, globalNames, ., contains, (]
[lastIndexOf, (, '.', ), ), ;, if, (, !, globalNames, ., contains, (, parentName, ), ), {, JsName, parentJsName, =]
['.', ), ), ;, if, (, !, globalNames, ., contains, (, parentName, ), ), {, JsName, parentJsName, =, getName, (]
[), ;, if, (, !, globalNames, ., contains, (, parentName, ), ), {, JsName, parentJsName, =, getName, (, parentName, ,]
[(, !, globalNames, ., contains, (, parentName, ), ), {, JsName, parentJsName, =, getName, (, parentName, ,, true, ), ;]
[globalNames, ., contains, (, parentName, ), ), {, JsName, parentJsName, =, getName, (, parentName, ,, true, ), ;, recordReference, (]
[globalNames, ., contains, (, parentName, ), ), {, JsName, parentJsName, =, getName, (, parentName, ,, true, ), ;, recordReference, (]
[parentName, ), ), {, JsName, parentJsName, =, getName, (, parentName, ,, true, ), ;, recordReference, (, curJsName, ., name, ,]
[parentName, ), ), {, JsName, parentJsName, =, getName, (, parentName, ,, true, ), ;, recordReference, (, curJsName, ., name, ,]
[JsName, parentJsName, =, getName, (, parentName, ,, true, ), ;, recordReference, (, curJsName, ., name, ,, parentJsName, ., name, ,]
[JsName, parentJsName, =, getName, (, parentName, ,, true, ), ;, recordReference, (, curJsName, ., name, ,, parentJsName, ., name, ,]
[parentName, ,, true, ), ;, recordReference, (, curJsName, ., name, ,, parentJsName, ., name, ,, RefType, ., REGULAR, ), ;]
[true, ), ;, recordReference, (, curJsName, ., name, ,, parentJsName, ., name, ,, RefType, ., REGULAR, ), ;, recordReference, (]
[true, ), ;, recordReference, (, curJsName, ., name, ,, parentJsName, ., name, ,, RefType, ., REGULAR, ), ;, recordReference, (]
[(, curJsName, ., name, ,, parentJsName, ., name, ,, RefType, ., REGULAR, ), ;, recordReference, (, parentJsName, ., name, ,]
[(, curJsName, ., name, ,, parentJsName, ., name, ,, RefType, ., REGULAR, ), ;, recordReference, (, parentJsName, ., name, ,]
[,, parentJsName, ., name, ,, RefType, ., REGULAR, ), ;, recordReference, (, parentJsName, ., name, ,, curJsName, ., name, ,]
[,, parentJsName, ., name, ,, RefType, ., REGULAR, ), ;, recordReference, (, parentJsName, ., name, ,, curJsName, ., name, ,]
[RefType, ., REGULAR, ), ;, recordReference, (, parentJsName, ., name, ,, curJsName, ., name, ,, RefType, ., REGULAR, ), ;]
[REGULAR, ), ;, recordReference, (, parentJsName, ., name, ,, curJsName, ., name, ,, RefType, ., REGULAR, ), ;, curJsName, =]
[recordReference, (, parentJsName, ., name, ,, curJsName, ., name, ,, RefType, ., REGULAR, ), ;, curJsName, =, parentJsName, ;, }]
[parentJsName, ., name, ,, curJsName, ., name, ,, RefType, ., REGULAR, ), ;, curJsName, =, parentJsName, ;, }, curName, =]
[=, parentName, ;, }, }, }, private, NameInformation, createNameInformation, (, NodeTraversal, t, ,, Node, n, ), {, Node, parent, =]
[=, parentName, ;, }, }, }, private, NameInformation, createNameInformation, (, NodeTraversal, t, ,, Node, n, ), {, Node, parent, =]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, String, name, =]
[n, ), {, Node, parent, =, n, ., getParent, (, ), ;, String, name, =, "", ;, Node, rootNameNode, =]
[=, n, ., getParent, (, ), ;, String, name, =, "", ;, Node, rootNameNode, =, n, ;, boolean, bNameWasShortened, =]
[(, ), ;, String, name, =, "", ;, Node, rootNameNode, =, n, ;, boolean, bNameWasShortened, =, false, ;, while, (]
[=, "", ;, Node, rootNameNode, =, n, ;, boolean, bNameWasShortened, =, false, ;, while, (, true, ), {, if, (]
[=, "", ;, Node, rootNameNode, =, n, ;, boolean, bNameWasShortened, =, false, ;, while, (, true, ), {, if, (]
[rootNameNode, =, n, ;, boolean, bNameWasShortened, =, false, ;, while, (, true, ), {, if, (, NodeUtil, ., isGet, (]
[false, ;, while, (, true, ), {, if, (, NodeUtil, ., isGet, (, rootNameNode, ), ), {, Node, prop, =]
[false, ;, while, (, true, ), {, if, (, NodeUtil, ., isGet, (, rootNameNode, ), ), {, Node, prop, =]
[(, NodeUtil, ., isGet, (, rootNameNode, ), ), {, Node, prop, =, rootNameNode, ., getLastChild, (, ), ;, if, (]
[(, NodeUtil, ., isGet, (, rootNameNode, ), ), {, Node, prop, =, rootNameNode, ., getLastChild, (, ), ;, if, (]
[), {, Node, prop, =, rootNameNode, ., getLastChild, (, ), ;, if, (, rootNameNode, ., isGetProp, (, ), ), {]
[Node, prop, =, rootNameNode, ., getLastChild, (, ), ;, if, (, rootNameNode, ., isGetProp, (, ), ), {, name, =]
[Node, prop, =, rootNameNode, ., getLastChild, (, ), ;, if, (, rootNameNode, ., isGetProp, (, ), ), {, name, =]
[Node, prop, =, rootNameNode, ., getLastChild, (, ), ;, if, (, rootNameNode, ., isGetProp, (, ), ), {, name, =]
[=, rootNameNode, ., getLastChild, (, ), ;, if, (, rootNameNode, ., isGetProp, (, ), ), {, name, =, ".", +]
[=, rootNameNode, ., getLastChild, (, ), ;, if, (, rootNameNode, ., isGetProp, (, ), ), {, name, =, ".", +]
[;, if, (, rootNameNode, ., isGetProp, (, ), ), {, name, =, ".", +, prop, ., getString, (, ), +]
[isGetProp, (, ), ), {, name, =, ".", +, prop, ., getString, (, ), +, name, ;, }, else, {]
[), ), {, name, =, ".", +, prop, ., getString, (, ), +, name, ;, }, else, {, bNameWasShortened, =]
[{, name, =, ".", +, prop, ., getString, (, ), +, name, ;, }, else, {, bNameWasShortened, =, true, ;]
[=, ".", +, prop, ., getString, (, ), +, name, ;, }, else, {, bNameWasShortened, =, true, ;, name, =]
[prop, ., getString, (, ), +, name, ;, }, else, {, bNameWasShortened, =, true, ;, name, =, "", ;, }]
[getString, (, ), +, name, ;, }, else, {, bNameWasShortened, =, true, ;, name, =, "", ;, }, rootNameNode, =]
[getString, (, ), +, name, ;, }, else, {, bNameWasShortened, =, true, ;, name, =, "", ;, }, rootNameNode, =]
[=, true, ;, name, =, "", ;, }, rootNameNode, =, rootNameNode, ., getFirstChild, (, ), ;, }, else, if, (]
[=, true, ;, name, =, "", ;, }, rootNameNode, =, rootNameNode, ., getFirstChild, (, ), ;, }, else, if, (]
[=, "", ;, }, rootNameNode, =, rootNameNode, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (]
[;, }, rootNameNode, =, rootNameNode, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, rootNameNode, ,]
[;, }, rootNameNode, =, rootNameNode, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, rootNameNode, ,]
[), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, rootNameNode, ,, rootNameNode, ., getParent, (, ), ), ), {]
[}, else, if, (, NodeUtil, ., isObjectLitKey, (, rootNameNode, ,, rootNameNode, ., getParent, (, ), ), ), {, name, =]
[}, else, if, (, NodeUtil, ., isObjectLitKey, (, rootNameNode, ,, rootNameNode, ., getParent, (, ), ), ), {, name, =]
[}, else, if, (, NodeUtil, ., isObjectLitKey, (, rootNameNode, ,, rootNameNode, ., getParent, (, ), ), ), {, name, =]
[if, (, NodeUtil, ., isObjectLitKey, (, rootNameNode, ,, rootNameNode, ., getParent, (, ), ), ), {, name, =, ".", +]
[if, (, NodeUtil, ., isObjectLitKey, (, rootNameNode, ,, rootNameNode, ., getParent, (, ), ), ), {, name, =, ".", +]
[rootNameNode, ,, rootNameNode, ., getParent, (, ), ), ), {, name, =, ".", +, rootNameNode, ., getString, (, ), +]
[(, ), ), ), {, name, =, ".", +, rootNameNode, ., getString, (, ), +, name, ;, Node, objLit, =]
[(, ), ), ), {, name, =, ".", +, rootNameNode, ., getString, (, ), +, name, ;, Node, objLit, =]
[rootNameNode, ., getString, (, ), +, name, ;, Node, objLit, =, rootNameNode, ., getParent, (, ), ;, Node, objLitParent, =]
[rootNameNode, ., getString, (, ), +, name, ;, Node, objLit, =, rootNameNode, ., getParent, (, ), ;, Node, objLitParent, =]
[Node, objLit, =, rootNameNode, ., getParent, (, ), ;, Node, objLitParent, =, objLit, ., getParent, (, ), ;, if, (]
[Node, objLit, =, rootNameNode, ., getParent, (, ), ;, Node, objLitParent, =, objLit, ., getParent, (, ), ;, if, (]
[), ;, Node, objLitParent, =, objLit, ., getParent, (, ), ;, if, (, objLitParent, ., isAssign, (, ), ), {]
[Node, objLitParent, =, objLit, ., getParent, (, ), ;, if, (, objLitParent, ., isAssign, (, ), ), {, rootNameNode, =]
[Node, objLitParent, =, objLit, ., getParent, (, ), ;, if, (, objLitParent, ., isAssign, (, ), ), {, rootNameNode, =]
[(, objLitParent, ., isAssign, (, ), ), {, rootNameNode, =, objLitParent, ., getFirstChild, (, ), ;, }, else, if, (]
[(, objLitParent, ., isAssign, (, ), ), {, rootNameNode, =, objLitParent, ., getFirstChild, (, ), ;, }, else, if, (]
[{, rootNameNode, =, objLitParent, ., getFirstChild, (, ), ;, }, else, if, (, objLitParent, ., isName, (, ), ), {]
[=, objLitParent, ., getFirstChild, (, ), ;, }, else, if, (, objLitParent, ., isName, (, ), ), {, rootNameNode, =]
[;, }, else, if, (, objLitParent, ., isName, (, ), ), {, rootNameNode, =, objLitParent, ;, }, else, if, (]
[;, }, else, if, (, objLitParent, ., isName, (, ), ), {, rootNameNode, =, objLitParent, ;, }, else, if, (]
[isName, (, ), ), {, rootNameNode, =, objLitParent, ;, }, else, if, (, objLitParent, ., isStringKey, (, ), ), {]
[), ), {, rootNameNode, =, objLitParent, ;, }, else, if, (, objLitParent, ., isStringKey, (, ), ), {, rootNameNode, =]
[;, }, else, if, (, objLitParent, ., isStringKey, (, ), ), {, rootNameNode, =, objLitParent, ;, }, else, {, return]
[rootNameNode, =, objLitParent, ;, }, else, {, return, null, ;, }, }, else, {, break, ;, }, }, if, (]
[rootNameNode, =, objLitParent, ;, }, else, {, return, null, ;, }, }, else, {, break, ;, }, }, if, (]
[rootNameNode, =, objLitParent, ;, }, else, {, return, null, ;, }, }, else, {, break, ;, }, }, if, (]
[{, return, null, ;, }, }, else, {, break, ;, }, }, if, (, parent, ., isCall, (, ), &&]
[{, return, null, ;, }, }, else, {, break, ;, }, }, if, (, parent, ., isCall, (, ), &&]
[}, }, if, (, parent, ., isCall, (, ), &&, t, ., inGlobalScope, (, ), ), {, CodingConvention, convention, =]
[}, }, if, (, parent, ., isCall, (, ), &&, t, ., inGlobalScope, (, ), ), {, CodingConvention, convention, =]
[&&, t, ., inGlobalScope, (, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, classes, =]
[&&, t, ., inGlobalScope, (, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, classes, =]
[(, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, classes, =, convention, ., getClassesDefinedByCall, (]
[convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, classes, =, convention, ., getClassesDefinedByCall, (, parent, ), ;, if, (]
[convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, classes, =, convention, ., getClassesDefinedByCall, (, parent, ), ;, if, (]
[compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, classes, =, convention, ., getClassesDefinedByCall, (, parent, ), ;, if, (, classes, !=]
[SubclassRelationship, classes, =, convention, ., getClassesDefinedByCall, (, parent, ), ;, if, (, classes, !=, null, ), {, NameInformation, nameInfo, =]
[getClassesDefinedByCall, (, parent, ), ;, if, (, classes, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;]
[getClassesDefinedByCall, (, parent, ), ;, if, (, classes, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;]
[;, if, (, classes, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =]
[;, if, (, classes, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =]
[!=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, classes, ., subclassName, ;]
[!=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, classes, ., subclassName, ;]
[NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, classes, ., subclassName, ;, nameInfo, ., onlyAffectsClassDef, =]
[=, new, NameInformation, (, ), ;, nameInfo, ., name, =, classes, ., subclassName, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;]
[=, new, NameInformation, (, ), ;, nameInfo, ., name, =, classes, ., subclassName, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;]
[), ;, nameInfo, ., name, =, classes, ., subclassName, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;, nameInfo, ., superclass, =]
[), ;, nameInfo, ., name, =, classes, ., subclassName, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;, nameInfo, ., superclass, =]
[=, classes, ., subclassName, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;, nameInfo, ., superclass, =, classes, ., superclassName, ;, return]
[., onlyAffectsClassDef, =, true, ;, nameInfo, ., superclass, =, classes, ., superclassName, ;, return, nameInfo, ;, }, String, singletonGetterClass, =]
[., onlyAffectsClassDef, =, true, ;, nameInfo, ., superclass, =, classes, ., superclassName, ;, return, nameInfo, ;, }, String, singletonGetterClass, =]
[;, nameInfo, ., superclass, =, classes, ., superclassName, ;, return, nameInfo, ;, }, String, singletonGetterClass, =, convention, ., getSingletonGetterClassName, (]
[classes, ., superclassName, ;, return, nameInfo, ;, }, String, singletonGetterClass, =, convention, ., getSingletonGetterClassName, (, parent, ), ;, if, (]
[classes, ., superclassName, ;, return, nameInfo, ;, }, String, singletonGetterClass, =, convention, ., getSingletonGetterClassName, (, parent, ), ;, if, (]
[superclassName, ;, return, nameInfo, ;, }, String, singletonGetterClass, =, convention, ., getSingletonGetterClassName, (, parent, ), ;, if, (, singletonGetterClass, !=]
[String, singletonGetterClass, =, convention, ., getSingletonGetterClassName, (, parent, ), ;, if, (, singletonGetterClass, !=, null, ), {, NameInformation, nameInfo, =]
[getSingletonGetterClassName, (, parent, ), ;, if, (, singletonGetterClass, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;]
[getSingletonGetterClassName, (, parent, ), ;, if, (, singletonGetterClass, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;]
[;, if, (, singletonGetterClass, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =]
[(, singletonGetterClass, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, singletonGetterClass, ;]
[(, singletonGetterClass, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, singletonGetterClass, ;]
[), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, singletonGetterClass, ;, nameInfo, ., onlyAffectsClassDef, =]
[nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, singletonGetterClass, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;, return]
[;, nameInfo, ., name, =, singletonGetterClass, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;, return, nameInfo, ;, }, }, switch, (]
[;, nameInfo, ., name, =, singletonGetterClass, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;, return, nameInfo, ;, }, }, switch, (]
[., onlyAffectsClassDef, =, true, ;, return, nameInfo, ;, }, }, switch, (, rootNameNode, ., getType, (, ), ), {, case]
[., onlyAffectsClassDef, =, true, ;, return, nameInfo, ;, }, }, switch, (, rootNameNode, ., getType, (, ), ), {, case]
[nameInfo, ;, }, }, switch, (, rootNameNode, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[nameInfo, ;, }, }, switch, (, rootNameNode, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[nameInfo, ;, }, }, switch, (, rootNameNode, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[nameInfo, ;, }, }, switch, (, rootNameNode, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[;, }, }, switch, (, rootNameNode, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, !]
[}, switch, (, rootNameNode, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, !, bNameWasShortened, &&]
[}, switch, (, rootNameNode, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, !, bNameWasShortened, &&]
[(, ), ), {, case, Token, ., NAME, :, if, (, !, bNameWasShortened, &&, n, ., isGetProp, (, ), &&]
[(, ), ), {, case, Token, ., NAME, :, if, (, !, bNameWasShortened, &&, n, ., isGetProp, (, ), &&]
[., NAME, :, if, (, !, bNameWasShortened, &&, n, ., isGetProp, (, ), &&, parent, ., isAssign, (, ), &&]
[., NAME, :, if, (, !, bNameWasShortened, &&, n, ., isGetProp, (, ), &&, parent, ., isAssign, (, ), &&]
[(, !, bNameWasShortened, &&, n, ., isGetProp, (, ), &&, parent, ., isAssign, (, ), &&, "prototype", ., equals, (]
[(, !, bNameWasShortened, &&, n, ., isGetProp, (, ), &&, parent, ., isAssign, (, ), &&, "prototype", ., equals, (]
[(, !, bNameWasShortened, &&, n, ., isGetProp, (, ), &&, parent, ., isAssign, (, ), &&, "prototype", ., equals, (]
[), &&, "prototype", ., equals, (, n, ., getLastChild, (, ), ., getString, (, ), ), ), {, if, (]
[), &&, "prototype", ., equals, (, n, ., getLastChild, (, ), ., getString, (, ), ), ), {, if, (]
["prototype", ., equals, (, n, ., getLastChild, (, ), ., getString, (, ), ), ), {, if, (, createNameInformation, (]
[equals, (, n, ., getLastChild, (, ), ., getString, (, ), ), ), {, if, (, createNameInformation, (, t, ,]
[equals, (, n, ., getLastChild, (, ), ., getString, (, ), ), ), {, if, (, createNameInformation, (, t, ,]
[., getString, (, ), ), ), {, if, (, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), !=]
[), ), ), {, if, (, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), !=, null, ), {]
[), {, if, (, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), !=, null, ), {, name, =]
[), {, if, (, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), !=, null, ), {, name, =]
[), {, if, (, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), !=, null, ), {, name, =]
[t, ,, n, ., getFirstChild, (, ), ), !=, null, ), {, name, =, rootNameNode, ., getString, (, ), +]
[n, ., getFirstChild, (, ), ), !=, null, ), {, name, =, rootNameNode, ., getString, (, ), +, name, ;]
[getFirstChild, (, ), ), !=, null, ), {, name, =, rootNameNode, ., getString, (, ), +, name, ;, name, =]
[getFirstChild, (, ), ), !=, null, ), {, name, =, rootNameNode, ., getString, (, ), +, name, ;, name, =]
[!=, null, ), {, name, =, rootNameNode, ., getString, (, ), +, name, ;, name, =, name, ., substring, (]
[), {, name, =, rootNameNode, ., getString, (, ), +, name, ;, name, =, name, ., substring, (, 0, ,]
[), {, name, =, rootNameNode, ., getString, (, ), +, name, ;, name, =, name, ., substring, (, 0, ,]
[), {, name, =, rootNameNode, ., getString, (, ), +, name, ;, name, =, name, ., substring, (, 0, ,]
[getString, (, ), +, name, ;, name, =, name, ., substring, (, 0, ,, name, ., length, (, ), -]
[name, =, name, ., substring, (, 0, ,, name, ., length, (, ), -, PROTOTYPE_SUFFIX_LEN, ), ;, NameInformation, nameInfo, =]
[(, 0, ,, name, ., length, (, ), -, PROTOTYPE_SUFFIX_LEN, ), ;, NameInformation, nameInfo, =, new, NameInformation, (, ), ;]
[(, 0, ,, name, ., length, (, ), -, PROTOTYPE_SUFFIX_LEN, ), ;, NameInformation, nameInfo, =, new, NameInformation, (, ), ;]
[., length, (, ), -, PROTOTYPE_SUFFIX_LEN, ), ;, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =]
[), -, PROTOTYPE_SUFFIX_LEN, ), ;, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, name, ;, return]
[nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, name, ;, return, nameInfo, ;, }, else, {, return]
[), ;, nameInfo, ., name, =, name, ;, return, nameInfo, ;, }, else, {, return, null, ;, }, }, return]
[nameInfo, ., name, =, name, ;, return, nameInfo, ;, }, else, {, return, null, ;, }, }, return, createNameInformation, (]
[nameInfo, ., name, =, name, ;, return, nameInfo, ;, }, else, {, return, null, ;, }, }, return, createNameInformation, (]
[nameInfo, ., name, =, name, ;, return, nameInfo, ;, }, else, {, return, null, ;, }, }, return, createNameInformation, (]
[return, nameInfo, ;, }, else, {, return, null, ;, }, }, return, createNameInformation, (, rootNameNode, ., getString, (, ), +]
[;, }, else, {, return, null, ;, }, }, return, createNameInformation, (, rootNameNode, ., getString, (, ), +, name, ,]
[;, }, else, {, return, null, ;, }, }, return, createNameInformation, (, rootNameNode, ., getString, (, ), +, name, ,]
[;, }, }, return, createNameInformation, (, rootNameNode, ., getString, (, ), +, name, ,, t, ., getScope, (, ), ,]
[createNameInformation, (, rootNameNode, ., getString, (, ), +, name, ,, t, ., getScope, (, ), ,, rootNameNode, ), ;, case]
[createNameInformation, (, rootNameNode, ., getString, (, ), +, name, ,, t, ., getScope, (, ), ,, rootNameNode, ), ;, case]
[), +, name, ,, t, ., getScope, (, ), ,, rootNameNode, ), ;, case, Token, ., THIS, :, if, (]
[), +, name, ,, t, ., getScope, (, ), ,, rootNameNode, ), ;, case, Token, ., THIS, :, if, (]
[rootNameNode, ), ;, case, Token, ., THIS, :, if, (, t, ., inGlobalScope, (, ), ), {, NameInformation, nameInfo, =]
[:, if, (, t, ., inGlobalScope, (, ), ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, if, (]
[:, if, (, t, ., inGlobalScope, (, ), ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, if, (]
[:, if, (, t, ., inGlobalScope, (, ), ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, if, (]
[., inGlobalScope, (, ), ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, if, (, name, ., indexOf, (]
[), ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, if, (, name, ., indexOf, (, '.', ), ==]
[NameInformation, nameInfo, =, new, NameInformation, (, ), ;, if, (, name, ., indexOf, (, '.', ), ==, 0, ), {]
[NameInformation, nameInfo, =, new, NameInformation, (, ), ;, if, (, name, ., indexOf, (, '.', ), ==, 0, ), {]
[NameInformation, (, ), ;, if, (, name, ., indexOf, (, '.', ), ==, 0, ), {, nameInfo, ., name, =]
[NameInformation, (, ), ;, if, (, name, ., indexOf, (, '.', ), ==, 0, ), {, nameInfo, ., name, =]
[if, (, name, ., indexOf, (, '.', ), ==, 0, ), {, nameInfo, ., name, =, name, ., substring, (]
['.', ), ==, 0, ), {, nameInfo, ., name, =, name, ., substring, (, 1, ), ;, }, else, {]
['.', ), ==, 0, ), {, nameInfo, ., name, =, name, ., substring, (, 1, ), ;, }, else, {]
[), {, nameInfo, ., name, =, name, ., substring, (, 1, ), ;, }, else, {, nameInfo, ., name, =]
[., name, =, name, ., substring, (, 1, ), ;, }, else, {, nameInfo, ., name, =, name, ;, }]
[., name, =, name, ., substring, (, 1, ), ;, }, else, {, nameInfo, ., name, =, name, ;, }]
[., substring, (, 1, ), ;, }, else, {, nameInfo, ., name, =, name, ;, }, nameInfo, ., isExternallyReferenceable, =]
[1, ), ;, }, else, {, nameInfo, ., name, =, name, ;, }, nameInfo, ., isExternallyReferenceable, =, true, ;, return]
[else, {, nameInfo, ., name, =, name, ;, }, nameInfo, ., isExternallyReferenceable, =, true, ;, return, nameInfo, ;, }, return]
[=, name, ;, }, nameInfo, ., isExternallyReferenceable, =, true, ;, return, nameInfo, ;, }, return, null, ;, default, :, return]
[;, }, }, private, NameInformation, createNameInformation, (, String, name, ,, Scope, scope, ,, Node, rootNameNode, ), {, String, rootName, =]
[;, }, }, private, NameInformation, createNameInformation, (, String, name, ,, Scope, scope, ,, Node, rootNameNode, ), {, String, rootName, =]
[,, Scope, scope, ,, Node, rootNameNode, ), {, String, rootName, =, rootNameNode, ., getString, (, ), ;, Var, v, =]
[,, Scope, scope, ,, Node, rootNameNode, ), {, String, rootName, =, rootNameNode, ., getString, (, ), ;, Var, v, =]
[Node, rootNameNode, ), {, String, rootName, =, rootNameNode, ., getString, (, ), ;, Var, v, =, scope, ., getVar, (]
[=, rootNameNode, ., getString, (, ), ;, Var, v, =, scope, ., getVar, (, rootName, ), ;, boolean, isExtern, =]
[rootNameNode, ., getString, (, ), ;, Var, v, =, scope, ., getVar, (, rootName, ), ;, boolean, isExtern, =, (]
[rootNameNode, ., getString, (, ), ;, Var, v, =, scope, ., getVar, (, rootName, ), ;, boolean, isExtern, =, (]
[rootNameNode, ., getString, (, ), ;, Var, v, =, scope, ., getVar, (, rootName, ), ;, boolean, isExtern, =, (]
[getString, (, ), ;, Var, v, =, scope, ., getVar, (, rootName, ), ;, boolean, isExtern, =, (, v, ==]
[), ;, Var, v, =, scope, ., getVar, (, rootName, ), ;, boolean, isExtern, =, (, v, ==, null, &&]
[), ;, Var, v, =, scope, ., getVar, (, rootName, ), ;, boolean, isExtern, =, (, v, ==, null, &&]
[=, scope, ., getVar, (, rootName, ), ;, boolean, isExtern, =, (, v, ==, null, &&, externalNames, ., contains, (]
[;, boolean, isExtern, =, (, v, ==, null, &&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =]
[;, boolean, isExtern, =, (, v, ==, null, &&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =]
[;, boolean, isExtern, =, (, v, ==, null, &&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =]
[boolean, isExtern, =, (, v, ==, null, &&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =, (]
[boolean, isExtern, =, (, v, ==, null, &&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =, (]
[boolean, isExtern, =, (, v, ==, null, &&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =, (]
[=, (, v, ==, null, &&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =, (, v, !=]
[v, ==, null, &&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =, (, v, !=, null, &&]
[v, ==, null, &&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =, (, v, !=, null, &&]
[(, rootName, ), ), ;, boolean, isGlobalRef, =, (, v, !=, null, &&, v, ., isGlobal, (, ), ), ||]
[), ), ;, boolean, isGlobalRef, =, (, v, !=, null, &&, v, ., isGlobal, (, ), ), ||, isExtern, ||]
[), ), ;, boolean, isGlobalRef, =, (, v, !=, null, &&, v, ., isGlobal, (, ), ), ||, isExtern, ||]
[isGlobalRef, =, (, v, !=, null, &&, v, ., isGlobal, (, ), ), ||, isExtern, ||, rootName, ., equals, (]
[null, &&, v, ., isGlobal, (, ), ), ||, isExtern, ||, rootName, ., equals, (, WINDOW, ), ;, if, (]
[&&, v, ., isGlobal, (, ), ), ||, isExtern, ||, rootName, ., equals, (, WINDOW, ), ;, if, (, !]
[(, ), ), ||, isExtern, ||, rootName, ., equals, (, WINDOW, ), ;, if, (, !, isGlobalRef, ), {, return]
[rootName, ., equals, (, WINDOW, ), ;, if, (, !, isGlobalRef, ), {, return, null, ;, }, NameInformation, nameInfo, =]
[(, !, isGlobalRef, ), {, return, null, ;, }, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, int, idx, =]
[(, !, isGlobalRef, ), {, return, null, ;, }, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, int, idx, =]
[{, return, null, ;, }, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, int, idx, =, name, ., indexOf, (]
[NameInformation, nameInfo, =, new, NameInformation, (, ), ;, int, idx, =, name, ., indexOf, (, PROTOTYPE_SUBSTRING, ), ;, if, (]
[NameInformation, nameInfo, =, new, NameInformation, (, ), ;, int, idx, =, name, ., indexOf, (, PROTOTYPE_SUBSTRING, ), ;, if, (]
[=, new, NameInformation, (, ), ;, int, idx, =, name, ., indexOf, (, PROTOTYPE_SUBSTRING, ), ;, if, (, idx, !=]
[new, NameInformation, (, ), ;, int, idx, =, name, ., indexOf, (, PROTOTYPE_SUBSTRING, ), ;, if, (, idx, !=, -]
[), ;, int, idx, =, name, ., indexOf, (, PROTOTYPE_SUBSTRING, ), ;, if, (, idx, !=, -, 1, ), {]
[), ;, int, idx, =, name, ., indexOf, (, PROTOTYPE_SUBSTRING, ), ;, if, (, idx, !=, -, 1, ), {]
[=, name, ., indexOf, (, PROTOTYPE_SUBSTRING, ), ;, if, (, idx, !=, -, 1, ), {, nameInfo, ., isPrototype, =]
[., indexOf, (, PROTOTYPE_SUBSTRING, ), ;, if, (, idx, !=, -, 1, ), {, nameInfo, ., isPrototype, =, true, ;]
[., indexOf, (, PROTOTYPE_SUBSTRING, ), ;, if, (, idx, !=, -, 1, ), {, nameInfo, ., isPrototype, =, true, ;]
[), ;, if, (, idx, !=, -, 1, ), {, nameInfo, ., isPrototype, =, true, ;, nameInfo, ., prototypeClass, =]
[), ;, if, (, idx, !=, -, 1, ), {, nameInfo, ., isPrototype, =, true, ;, nameInfo, ., prototypeClass, =]
[idx, !=, -, 1, ), {, nameInfo, ., isPrototype, =, true, ;, nameInfo, ., prototypeClass, =, name, ., substring, (]
[-, 1, ), {, nameInfo, ., isPrototype, =, true, ;, nameInfo, ., prototypeClass, =, name, ., substring, (, 0, ,]
[{, nameInfo, ., isPrototype, =, true, ;, nameInfo, ., prototypeClass, =, name, ., substring, (, 0, ,, idx, ), ;]
[{, nameInfo, ., isPrototype, =, true, ;, nameInfo, ., prototypeClass, =, name, ., substring, (, 0, ,, idx, ), ;]
[=, true, ;, nameInfo, ., prototypeClass, =, name, ., substring, (, 0, ,, idx, ), ;, nameInfo, ., prototypeProperty, =]
[=, true, ;, nameInfo, ., prototypeClass, =, name, ., substring, (, 0, ,, idx, ), ;, nameInfo, ., prototypeProperty, =]
[., prototypeClass, =, name, ., substring, (, 0, ,, idx, ), ;, nameInfo, ., prototypeProperty, =, name, ., substring, (]
[., prototypeClass, =, name, ., substring, (, 0, ,, idx, ), ;, nameInfo, ., prototypeProperty, =, name, ., substring, (]
[=, name, ., substring, (, 0, ,, idx, ), ;, nameInfo, ., prototypeProperty, =, name, ., substring, (, idx, +]
[(, 0, ,, idx, ), ;, nameInfo, ., prototypeProperty, =, name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }]
[(, 0, ,, idx, ), ;, nameInfo, ., prototypeProperty, =, name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }]
[), ;, nameInfo, ., prototypeProperty, =, name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =]
[nameInfo, ., prototypeProperty, =, name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =, name, ;]
[nameInfo, ., prototypeProperty, =, name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =, name, ;]
[name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =, name, ;, nameInfo, ., isExternallyReferenceable, =]
[name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =, name, ;, nameInfo, ., isExternallyReferenceable, =]
[substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =, name, ;, nameInfo, ., isExternallyReferenceable, =, isExtern, ||]
[idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =, name, ;, nameInfo, ., isExternallyReferenceable, =, isExtern, ||, isExternallyReferenceable, (]
[PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =, name, ;, nameInfo, ., isExternallyReferenceable, =, isExtern, ||, isExternallyReferenceable, (, scope, ,]
[nameInfo, ., name, =, name, ;, nameInfo, ., isExternallyReferenceable, =, isExtern, ||, isExternallyReferenceable, (, scope, ,, name, ), ;, return]
[name, ), ;, return, nameInfo, ;, }, private, boolean, isExternallyReferenceable, (, Scope, scope, ,, String, name, ), {, if, (]
[name, ), ;, return, nameInfo, ;, }, private, boolean, isExternallyReferenceable, (, Scope, scope, ,, String, name, ), {, if, (]
[name, ), ;, return, nameInfo, ;, }, private, boolean, isExternallyReferenceable, (, Scope, scope, ,, String, name, ), {, if, (]
[boolean, isExternallyReferenceable, (, Scope, scope, ,, String, name, ), {, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (]
[,, String, name, ), {, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ), {, return]
[if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ), {, return, true, ;, }, if, (]
[if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ), {, return, true, ;, }, if, (]
[isExported, (, name, ), ), {, return, true, ;, }, if, (, scope, ., isLocal, (, ), ), {, return]
[;, }, if, (, scope, ., isLocal, (, ), ), {, return, false, ;, }, for, (, String, s, :]
[., isLocal, (, ), ), {, return, false, ;, }, for, (, String, s, :, globalNames, ), {, if, (]
[., isLocal, (, ), ), {, return, false, ;, }, for, (, String, s, :, globalNames, ), {, if, (]
[), {, return, false, ;, }, for, (, String, s, :, globalNames, ), {, if, (, name, ., startsWith, (]
[}, for, (, String, s, :, globalNames, ), {, if, (, name, ., startsWith, (, s, ), ), {, return]
[:, globalNames, ), {, if, (, name, ., startsWith, (, s, ), ), {, return, true, ;, }, }, return]
[return, false, ;, }, private, List, <, NameInformation, >, getDependencyScope, (, Node, n, ), {, for, (, Node, node, :]
[return, false, ;, }, private, List, <, NameInformation, >, getDependencyScope, (, Node, n, ), {, for, (, Node, node, :]
[), {, for, (, Node, node, :, n, ., getAncestors, (, ), ), {, List, <, NameInformation, >, refs, =]
[), {, for, (, Node, node, :, n, ., getAncestors, (, ), ), {, List, <, NameInformation, >, refs, =]
[Node, node, :, n, ., getAncestors, (, ), ), {, List, <, NameInformation, >, refs, =, scopes, ., get, (]
[getAncestors, (, ), ), {, List, <, NameInformation, >, refs, =, scopes, ., get, (, node, ), ;, if, (]
[(, ), ), {, List, <, NameInformation, >, refs, =, scopes, ., get, (, node, ), ;, if, (, !]
[(, ), ), {, List, <, NameInformation, >, refs, =, scopes, ., get, (, node, ), ;, if, (, !]
[refs, =, scopes, ., get, (, node, ), ;, if, (, !, refs, ., isEmpty, (, ), ), {, return]
[(, node, ), ;, if, (, !, refs, ., isEmpty, (, ), ), {, return, refs, ;, }, }, return]
[(, node, ), ;, if, (, !, refs, ., isEmpty, (, ), ), {, return, refs, ;, }, }, return]
[., emptyList, (, ), ;, }, private, List, <, NameInformation, >, getEnclosingFunctionDependencyScope, (, NodeTraversal, t, ), {, Node, function, =]
[., emptyList, (, ), ;, }, private, List, <, NameInformation, >, getEnclosingFunctionDependencyScope, (, NodeTraversal, t, ), {, Node, function, =]
[<, NameInformation, >, getEnclosingFunctionDependencyScope, (, NodeTraversal, t, ), {, Node, function, =, t, ., getEnclosingFunction, (, ), ;, if, (]
[<, NameInformation, >, getEnclosingFunctionDependencyScope, (, NodeTraversal, t, ), {, Node, function, =, t, ., getEnclosingFunction, (, ), ;, if, (]
[>, getEnclosingFunctionDependencyScope, (, NodeTraversal, t, ), {, Node, function, =, t, ., getEnclosingFunction, (, ), ;, if, (, function, ==]
[t, ), {, Node, function, =, t, ., getEnclosingFunction, (, ), ;, if, (, function, ==, null, ), {, return]
[t, ), {, Node, function, =, t, ., getEnclosingFunction, (, ), ;, if, (, function, ==, null, ), {, return]
[(, function, ==, null, ), {, return, Collections, ., emptyList, (, ), ;, }, List, <, NameInformation, >, refs, =]
[(, function, ==, null, ), {, return, Collections, ., emptyList, (, ), ;, }, List, <, NameInformation, >, refs, =]
[), {, return, Collections, ., emptyList, (, ), ;, }, List, <, NameInformation, >, refs, =, scopes, ., get, (]
[emptyList, (, ), ;, }, List, <, NameInformation, >, refs, =, scopes, ., get, (, function, ), ;, if, (]
[(, ), ;, }, List, <, NameInformation, >, refs, =, scopes, ., get, (, function, ), ;, if, (, !]
[(, ), ;, }, List, <, NameInformation, >, refs, =, scopes, ., get, (, function, ), ;, if, (, !]
[refs, =, scopes, ., get, (, function, ), ;, if, (, !, refs, ., isEmpty, (, ), ), {, return]
[function, ), ;, if, (, !, refs, ., isEmpty, (, ), ), {, return, refs, ;, }, Node, parent, =]
[function, ), ;, if, (, !, refs, ., isEmpty, (, ), ), {, return, refs, ;, }, Node, parent, =]
[isEmpty, (, ), ), {, return, refs, ;, }, Node, parent, =, function, ., getParent, (, ), ;, if, (]
[isEmpty, (, ), ), {, return, refs, ;, }, Node, parent, =, function, ., getParent, (, ), ;, if, (]
[), ), {, return, refs, ;, }, Node, parent, =, function, ., getParent, (, ), ;, if, (, parent, !=]
[;, }, Node, parent, =, function, ., getParent, (, ), ;, if, (, parent, !=, null, ), {, while, (]
[;, }, Node, parent, =, function, ., getParent, (, ), ;, if, (, parent, !=, null, ), {, while, (]
[getParent, (, ), ;, if, (, parent, !=, null, ), {, while, (, parent, ., isHook, (, ), ), {]
[), ;, if, (, parent, !=, null, ), {, while, (, parent, ., isHook, (, ), ), {, parent, =]
[), ;, if, (, parent, !=, null, ), {, while, (, parent, ., isHook, (, ), ), {, parent, =]
[while, (, parent, ., isHook, (, ), ), {, parent, =, parent, ., getParent, (, ), ;, }, if, (]
[while, (, parent, ., isHook, (, ), ), {, parent, =, parent, ., getParent, (, ), ;, }, if, (]
[{, parent, =, parent, ., getParent, (, ), ;, }, if, (, parent, ., isName, (, ), ), {, return]
[{, parent, =, parent, ., getParent, (, ), ;, }, if, (, parent, ., isName, (, ), ), {, return]
[., getParent, (, ), ;, }, if, (, parent, ., isName, (, ), ), {, return, scopes, ., get, (]
[if, (, parent, ., isName, (, ), ), {, return, scopes, ., get, (, parent, ), ;, }, if, (]
[if, (, parent, ., isName, (, ), ), {, return, scopes, ., get, (, parent, ), ;, }, if, (]
[{, return, scopes, ., get, (, parent, ), ;, }, if, (, parent, ., isAssign, (, ), ), {, return]
[{, return, scopes, ., get, (, parent, ), ;, }, if, (, parent, ., isAssign, (, ), ), {, return]
[get, (, parent, ), ;, }, if, (, parent, ., isAssign, (, ), ), {, return, scopes, ., get, (]
[if, (, parent, ., isAssign, (, ), ), {, return, scopes, ., get, (, parent, ), ;, }, }, return]
[if, (, parent, ., isAssign, (, ), ), {, return, scopes, ., get, (, parent, ), ;, }, }, return]
[;, }, }, return, Collections, ., emptyList, (, ), ;, }, private, void, calculateReferences, (, ), {, JsName, window, =]
[}, return, Collections, ., emptyList, (, ), ;, }, private, void, calculateReferences, (, ), {, JsName, window, =, getName, (]
[Collections, ., emptyList, (, ), ;, }, private, void, calculateReferences, (, ), {, JsName, window, =, getName, (, WINDOW, ,]
[(, ), ;, }, private, void, calculateReferences, (, ), {, JsName, window, =, getName, (, WINDOW, ,, true, ), ;]
[(, ), ;, }, private, void, calculateReferences, (, ), {, JsName, window, =, getName, (, WINDOW, ,, true, ), ;]
[private, void, calculateReferences, (, ), {, JsName, window, =, getName, (, WINDOW, ,, true, ), ;, window, ., referenced, =]
[{, JsName, window, =, getName, (, WINDOW, ,, true, ), ;, window, ., referenced, =, true, ;, JsName, function, =]
[window, =, getName, (, WINDOW, ,, true, ), ;, window, ., referenced, =, true, ;, JsName, function, =, getName, (]
[getName, (, WINDOW, ,, true, ), ;, window, ., referenced, =, true, ;, JsName, function, =, getName, (, FUNCTION, ,]
[,, true, ), ;, window, ., referenced, =, true, ;, JsName, function, =, getName, (, FUNCTION, ,, true, ), ;]
[,, true, ), ;, window, ., referenced, =, true, ;, JsName, function, =, getName, (, FUNCTION, ,, true, ), ;]
[window, ., referenced, =, true, ;, JsName, function, =, getName, (, FUNCTION, ,, true, ), ;, function, ., referenced, =]
[referenced, =, true, ;, JsName, function, =, getName, (, FUNCTION, ,, true, ), ;, function, ., referenced, =, true, ;]
[referenced, =, true, ;, JsName, function, =, getName, (, FUNCTION, ,, true, ), ;, function, ., referenced, =, true, ;]
[referenced, =, true, ;, JsName, function, =, getName, (, FUNCTION, ,, true, ), ;, function, ., referenced, =, true, ;]
[JsName, function, =, getName, (, FUNCTION, ,, true, ), ;, function, ., referenced, =, true, ;, FixedPointGraphTraversal, ., newTraversal, (]
[), ;, function, ., referenced, =, true, ;, FixedPointGraphTraversal, ., newTraversal, (, new, ReferencePropagationCallback, (, ), ), ., computeFixedPoint, (]
[TRUE, ,, FALSE, ,, BOTH, }, private, int, countOf, (, TriState, isClass, ,, TriState, referenced, ), {, int, count, =]
[int, countOf, (, TriState, isClass, ,, TriState, referenced, ), {, int, count, =, 0, ;, for, (, JsName, name, :]
[int, countOf, (, TriState, isClass, ,, TriState, referenced, ), {, int, count, =, 0, ;, for, (, JsName, name, :]
[int, count, =, 0, ;, for, (, JsName, name, :, allNames, ., values, (, ), ), {, boolean, nodeIsClass, =]
[int, count, =, 0, ;, for, (, JsName, name, :, allNames, ., values, (, ), ), {, boolean, nodeIsClass, =]
[int, count, =, 0, ;, for, (, JsName, name, :, allNames, ., values, (, ), ), {, boolean, nodeIsClass, =]
[int, count, =, 0, ;, for, (, JsName, name, :, allNames, ., values, (, ), ), {, boolean, nodeIsClass, =]
[name, :, allNames, ., values, (, ), ), {, boolean, nodeIsClass, =, name, ., prototypeNames, ., size, (, ), >]
[(, ), ), {, boolean, nodeIsClass, =, name, ., prototypeNames, ., size, (, ), >, 0, ;, boolean, classMatch, =]
[(, ), ), {, boolean, nodeIsClass, =, name, ., prototypeNames, ., size, (, ), >, 0, ;, boolean, classMatch, =]
[(, ), ), {, boolean, nodeIsClass, =, name, ., prototypeNames, ., size, (, ), >, 0, ;, boolean, classMatch, =]
[(, ), ), {, boolean, nodeIsClass, =, name, ., prototypeNames, ., size, (, ), >, 0, ;, boolean, classMatch, =]
[), {, boolean, nodeIsClass, =, name, ., prototypeNames, ., size, (, ), >, 0, ;, boolean, classMatch, =, isClass, ==]
[), {, boolean, nodeIsClass, =, name, ., prototypeNames, ., size, (, ), >, 0, ;, boolean, classMatch, =, isClass, ==]
[=, name, ., prototypeNames, ., size, (, ), >, 0, ;, boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||]
[name, ., prototypeNames, ., size, (, ), >, 0, ;, boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (]
[name, ., prototypeNames, ., size, (, ), >, 0, ;, boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (]
[prototypeNames, ., size, (, ), >, 0, ;, boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&]
[prototypeNames, ., size, (, ), >, 0, ;, boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&]
[size, (, ), >, 0, ;, boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==]
[size, (, ), >, 0, ;, boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==]
[;, boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||]
[boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||, (]
[boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||, (]
[classMatch, =, isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||, (, !]
[isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&]
[isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&]
[TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==]
[TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==]
[==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =]
[==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =]
[==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =]
[==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =]
[., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==]
[., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==]
[(, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||]
[!, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (]
[!, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (]
[!, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (]
[==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&]
[==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&]
[., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==]
[., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==]
[referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||]
[=, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (]
[=, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (]
[referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (, !]
[referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (, !]
[BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (, !, name, ., referenced, &&]
[BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (, !, name, ., referenced, &&]
[(, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (, !, name, ., referenced, &&, referenced, ==]
[(, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (, !, name, ., referenced, &&, referenced, ==]
[TriState, ., TRUE, ), ||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (]
[TriState, ., TRUE, ), ||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (]
[TriState, ., TRUE, ), ||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (]
[TRUE, ), ||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&]
[||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch, &&]
[(, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch, &&, !]
[(, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch, &&, !]
[&&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined, ), {]
[&&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined, ), {]
[), ;, if, (, classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined, ), {, count, ++, ;, }, }, return]
[count, ;, }, private, List, <, Node, >, getSideEffectNodes, (, Node, n, ), {, List, <, Node, >, subexpressions, =]
[count, ;, }, private, List, <, Node, >, getSideEffectNodes, (, Node, n, ), {, List, <, Node, >, subexpressions, =]
[Node, >, getSideEffectNodes, (, Node, n, ), {, List, <, Node, >, subexpressions, =, Lists, ., newArrayList, (, ), ;]
[Node, >, getSideEffectNodes, (, Node, n, ), {, List, <, Node, >, subexpressions, =, Lists, ., newArrayList, (, ), ;]
[Node, n, ), {, List, <, Node, >, subexpressions, =, Lists, ., newArrayList, (, ), ;, NodeTraversal, ., traverse, (]
[), {, List, <, Node, >, subexpressions, =, Lists, ., newArrayList, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[List, <, Node, >, subexpressions, =, Lists, ., newArrayList, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,]
[>, subexpressions, =, Lists, ., newArrayList, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, new, GatherSideEffectSubexpressionsCallback, (]
[=, Lists, ., newArrayList, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,]
[newArrayList, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, GetReplacementSideEffectSubexpressions, (]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, GetReplacementSideEffectSubexpressions, (, compiler, ,]
[GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, GetReplacementSideEffectSubexpressions, (, compiler, ,, subexpressions, ), ), ), ;, List, <, Node, >, replacements, =]
[GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, GetReplacementSideEffectSubexpressions, (, compiler, ,, subexpressions, ), ), ), ;, List, <, Node, >, replacements, =]
[new, GetReplacementSideEffectSubexpressions, (, compiler, ,, subexpressions, ), ), ), ;, List, <, Node, >, replacements, =, Lists, ., newArrayListWithExpectedSize, (]
[new, GetReplacementSideEffectSubexpressions, (, compiler, ,, subexpressions, ), ), ), ;, List, <, Node, >, replacements, =, Lists, ., newArrayListWithExpectedSize, (]
[Node, >, replacements, =, Lists, ., newArrayListWithExpectedSize, (, subexpressions, ., size, (, ), ), ;, for, (, Node, subexpression, :]
[=, Lists, ., newArrayListWithExpectedSize, (, subexpressions, ., size, (, ), ), ;, for, (, Node, subexpression, :, subexpressions, ), {]
[=, Lists, ., newArrayListWithExpectedSize, (, subexpressions, ., size, (, ), ), ;, for, (, Node, subexpression, :, subexpressions, ), {]
[(, subexpressions, ., size, (, ), ), ;, for, (, Node, subexpression, :, subexpressions, ), {, replacements, ., add, (]
[(, subexpressions, ., size, (, ), ), ;, for, (, Node, subexpression, :, subexpressions, ), {, replacements, ., add, (]
[(, ), ), ;, for, (, Node, subexpression, :, subexpressions, ), {, replacements, ., add, (, NodeUtil, ., newExpr, (]
[Node, subexpression, :, subexpressions, ), {, replacements, ., add, (, NodeUtil, ., newExpr, (, subexpression, ), ), ;, }, return]
[), ;, }, return, replacements, ;, }, private, void, replaceWithRhs, (, Node, parent, ,, Node, n, ), {, if, (]
[}, return, replacements, ;, }, private, void, replaceWithRhs, (, Node, parent, ,, Node, n, ), {, if, (, valueConsumedByParent, (]
[replacements, ;, }, private, void, replaceWithRhs, (, Node, parent, ,, Node, n, ), {, if, (, valueConsumedByParent, (, n, ,]
[Node, n, ), {, if, (, valueConsumedByParent, (, n, ,, parent, ), ), {, List, <, Node, >, replacements, =]
[), {, if, (, valueConsumedByParent, (, n, ,, parent, ), ), {, List, <, Node, >, replacements, =, getRhsSubexpressions, (]
[), ), {, List, <, Node, >, replacements, =, getRhsSubexpressions, (, n, ), ;, List, <, Node, >, newReplacements, =]
[), ), {, List, <, Node, >, replacements, =, getRhsSubexpressions, (, n, ), ;, List, <, Node, >, newReplacements, =]
[n, ), ;, List, <, Node, >, newReplacements, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =]
[;, List, <, Node, >, newReplacements, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0, ;]
[;, List, <, Node, >, newReplacements, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0, ;]
[<, Node, >, newReplacements, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[<, Node, >, newReplacements, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[<, Node, >, newReplacements, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[., newArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <, replacements, ., size, (, ), -]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, replacements, ., size, (, ), -, 1, ;]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, replacements, ., size, (, ), -, 1, ;]
[(, int, i, =, 0, ;, i, <, replacements, ., size, (, ), -, 1, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, replacements, ., size, (, ), -, 1, ;, i, ++, ), {]
[0, ;, i, <, replacements, ., size, (, ), -, 1, ;, i, ++, ), {, newReplacements, ., addAll, (]
[i, <, replacements, ., size, (, ), -, 1, ;, i, ++, ), {, newReplacements, ., addAll, (, getSideEffectNodes, (]
[i, <, replacements, ., size, (, ), -, 1, ;, i, ++, ), {, newReplacements, ., addAll, (, getSideEffectNodes, (]
[size, (, ), -, 1, ;, i, ++, ), {, newReplacements, ., addAll, (, getSideEffectNodes, (, replacements, ., get, (]
[{, newReplacements, ., addAll, (, getSideEffectNodes, (, replacements, ., get, (, i, ), ), ), ;, }, Node, valueExpr, =]
[{, newReplacements, ., addAll, (, getSideEffectNodes, (, replacements, ., get, (, i, ), ), ), ;, }, Node, valueExpr, =]
[(, getSideEffectNodes, (, replacements, ., get, (, i, ), ), ), ;, }, Node, valueExpr, =, replacements, ., get, (]
[(, getSideEffectNodes, (, replacements, ., get, (, i, ), ), ), ;, }, Node, valueExpr, =, replacements, ., get, (]
[(, getSideEffectNodes, (, replacements, ., get, (, i, ), ), ), ;, }, Node, valueExpr, =, replacements, ., get, (]
[(, i, ), ), ), ;, }, Node, valueExpr, =, replacements, ., get, (, replacements, ., size, (, ), -]
[), ), ;, }, Node, valueExpr, =, replacements, ., get, (, replacements, ., size, (, ), -, 1, ), ;]
[), ), ;, }, Node, valueExpr, =, replacements, ., get, (, replacements, ., size, (, ), -, 1, ), ;]
[=, replacements, ., get, (, replacements, ., size, (, ), -, 1, ), ;, valueExpr, ., detachFromParent, (, ), ;]
[=, replacements, ., get, (, replacements, ., size, (, ), -, 1, ), ;, valueExpr, ., detachFromParent, (, ), ;]
[(, replacements, ., size, (, ), -, 1, ), ;, valueExpr, ., detachFromParent, (, ), ;, newReplacements, ., add, (]
[size, (, ), -, 1, ), ;, valueExpr, ., detachFromParent, (, ), ;, newReplacements, ., add, (, valueExpr, ), ;]
[size, (, ), -, 1, ), ;, valueExpr, ., detachFromParent, (, ), ;, newReplacements, ., add, (, valueExpr, ), ;]
[1, ), ;, valueExpr, ., detachFromParent, (, ), ;, newReplacements, ., add, (, valueExpr, ), ;, changeProxy, ., replaceWith, (]
[;, valueExpr, ., detachFromParent, (, ), ;, newReplacements, ., add, (, valueExpr, ), ;, changeProxy, ., replaceWith, (, parent, ,]
[., detachFromParent, (, ), ;, newReplacements, ., add, (, valueExpr, ), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,]
[(, ), ;, newReplacements, ., add, (, valueExpr, ), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,, collapseReplacements, (]
[), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,, collapseReplacements, (, newReplacements, ), ), ;, }, else, if, (]
[), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,, collapseReplacements, (, newReplacements, ), ), ;, }, else, if, (]
[), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,, collapseReplacements, (, newReplacements, ), ), ;, }, else, if, (]
[parent, ,, n, ,, collapseReplacements, (, newReplacements, ), ), ;, }, else, if, (, n, ., isAssign, (, ), &&]
[,, n, ,, collapseReplacements, (, newReplacements, ), ), ;, }, else, if, (, n, ., isAssign, (, ), &&, !]
[,, n, ,, collapseReplacements, (, newReplacements, ), ), ;, }, else, if, (, n, ., isAssign, (, ), &&, !]
[else, if, (, n, ., isAssign, (, ), &&, !, parent, ., isFor, (, ), ), {, Node, replacement, =]
[else, if, (, n, ., isAssign, (, ), &&, !, parent, ., isFor, (, ), ), {, Node, replacement, =]
[(, ), &&, !, parent, ., isFor, (, ), ), {, Node, replacement, =, n, ., getLastChild, (, ), ;]
[(, ), &&, !, parent, ., isFor, (, ), ), {, Node, replacement, =, n, ., getLastChild, (, ), ;]
[isFor, (, ), ), {, Node, replacement, =, n, ., getLastChild, (, ), ;, replacement, ., detachFromParent, (, ), ;]
[isFor, (, ), ), {, Node, replacement, =, n, ., getLastChild, (, ), ;, replacement, ., detachFromParent, (, ), ;]
[{, Node, replacement, =, n, ., getLastChild, (, ), ;, replacement, ., detachFromParent, (, ), ;, changeProxy, ., replaceWith, (]
[replacement, =, n, ., getLastChild, (, ), ;, replacement, ., detachFromParent, (, ), ;, changeProxy, ., replaceWith, (, parent, ,]
[n, ., getLastChild, (, ), ;, replacement, ., detachFromParent, (, ), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,]
[replacement, ., detachFromParent, (, ), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,, replacement, ), ;, }, else, {]
[detachFromParent, (, ), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,, replacement, ), ;, }, else, {, replaceTopLevelExpressionWithRhs, (]
[), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,, replacement, ), ;, }, else, {, replaceTopLevelExpressionWithRhs, (, parent, ,]
[parent, ,, n, ), ;, }, }, private, void, replaceTopLevelExpressionWithRhs, (, Node, parent, ,, Node, n, ), {, switch, (]
[parent, ,, n, ), ;, }, }, private, void, replaceTopLevelExpressionWithRhs, (, Node, parent, ,, Node, n, ), {, switch, (]
[void, replaceTopLevelExpressionWithRhs, (, Node, parent, ,, Node, n, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[void, replaceTopLevelExpressionWithRhs, (, Node, parent, ,, Node, n, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[,, Node, n, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case]
[,, Node, n, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case]
[switch, (, parent, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case]
[switch, (, parent, ., getType, (, ), ), {, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case]
[(, ), ), {, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., FOR, :, case]
[(, ), ), {, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., FOR, :, case]
[case, Token, ., SCRIPT, :, case, Token, ., FOR, :, case, Token, ., LABEL, :, break, ;, default, :, throw]
[SCRIPT, :, case, Token, ., FOR, :, case, Token, ., LABEL, :, break, ;, default, :, throw, new, IllegalArgumentException, (]
[SCRIPT, :, case, Token, ., FOR, :, case, Token, ., LABEL, :, break, ;, default, :, throw, new, IllegalArgumentException, (]
[case, Token, ., FOR, :, case, Token, ., LABEL, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported parent node type in replaceWithRhs ", +]
[case, Token, ., FOR, :, case, Token, ., LABEL, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported parent node type in replaceWithRhs ", +]
[:, case, Token, ., LABEL, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported parent node type in replaceWithRhs ", +, Token, ., name, (]
[:, case, Token, ., LABEL, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported parent node type in replaceWithRhs ", +, Token, ., name, (]
[new, IllegalArgumentException, (, "Unsupported parent node type in replaceWithRhs ", +, Token, ., name, (, parent, ., getType, (, ), ), ), ;, }, switch, (]
[new, IllegalArgumentException, (, "Unsupported parent node type in replaceWithRhs ", +, Token, ., name, (, parent, ., getType, (, ), ), ), ;, }, switch, (]
[(, parent, ., getType, (, ), ), ), ;, }, switch, (, n, ., getType, (, ), ), {, case]
[(, parent, ., getType, (, ), ), ), ;, }, switch, (, n, ., getType, (, ), ), {, case]
[), ), ), ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case]
[), ), ), ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case, Token, ., FUNCTION, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case, Token, ., FUNCTION, :, case]
[), {, case, Token, ., EXPR_RESULT, :, case, Token, ., FUNCTION, :, case, Token, ., VAR, :, break, ;, case]
[), {, case, Token, ., EXPR_RESULT, :, case, Token, ., FUNCTION, :, case, Token, ., VAR, :, break, ;, case]
[., EXPR_RESULT, :, case, Token, ., FUNCTION, :, case, Token, ., VAR, :, break, ;, case, Token, ., ASSIGN, :]
[., EXPR_RESULT, :, case, Token, ., FUNCTION, :, case, Token, ., VAR, :, break, ;, case, Token, ., ASSIGN, :]
[Token, ., FUNCTION, :, case, Token, ., VAR, :, break, ;, case, Token, ., ASSIGN, :, Preconditions, ., checkArgument, (]
[Token, ., FUNCTION, :, case, Token, ., VAR, :, break, ;, case, Token, ., ASSIGN, :, Preconditions, ., checkArgument, (]
[., VAR, :, break, ;, case, Token, ., ASSIGN, :, Preconditions, ., checkArgument, (, parent, ., isFor, (, ), ,]
[:, break, ;, case, Token, ., ASSIGN, :, Preconditions, ., checkArgument, (, parent, ., isFor, (, ), ,, "Unsupported assignment in replaceWithRhs. parent: %s", ,]
[:, break, ;, case, Token, ., ASSIGN, :, Preconditions, ., checkArgument, (, parent, ., isFor, (, ), ,, "Unsupported assignment in replaceWithRhs. parent: %s", ,]
[Token, ., ASSIGN, :, Preconditions, ., checkArgument, (, parent, ., isFor, (, ), ,, "Unsupported assignment in replaceWithRhs. parent: %s", ,, Token, ., name, (]
[Token, ., ASSIGN, :, Preconditions, ., checkArgument, (, parent, ., isFor, (, ), ,, "Unsupported assignment in replaceWithRhs. parent: %s", ,, Token, ., name, (]
[,, "Unsupported assignment in replaceWithRhs. parent: %s", ,, Token, ., name, (, parent, ., getType, (, ), ), ), ;, break, ;, default, :, throw]
[Token, ., name, (, parent, ., getType, (, ), ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[Token, ., name, (, parent, ., getType, (, ), ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[name, (, parent, ., getType, (, ), ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported node type in replaceWithRhs ", +]
[name, (, parent, ., getType, (, ), ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported node type in replaceWithRhs ", +]
[getType, (, ), ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported node type in replaceWithRhs ", +, Token, ., name, (]
[getType, (, ), ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported node type in replaceWithRhs ", +, Token, ., name, (]
[+, Token, ., name, (, n, ., getType, (, ), ), ), ;, }, List, <, Node, >, replacements, =]
[+, Token, ., name, (, n, ., getType, (, ), ), ), ;, }, List, <, Node, >, replacements, =]
[), ;, }, List, <, Node, >, replacements, =, Lists, ., newArrayList, (, ), ;, for, (, Node, rhs, :]
[}, List, <, Node, >, replacements, =, Lists, ., newArrayList, (, ), ;, for, (, Node, rhs, :, getRhsSubexpressions, (]
[>, replacements, =, Lists, ., newArrayList, (, ), ;, for, (, Node, rhs, :, getRhsSubexpressions, (, n, ), ), {]
[>, replacements, =, Lists, ., newArrayList, (, ), ;, for, (, Node, rhs, :, getRhsSubexpressions, (, n, ), ), {]
[., newArrayList, (, ), ;, for, (, Node, rhs, :, getRhsSubexpressions, (, n, ), ), {, replacements, ., addAll, (]
[(, ), ;, for, (, Node, rhs, :, getRhsSubexpressions, (, n, ), ), {, replacements, ., addAll, (, getSideEffectNodes, (]
[:, getRhsSubexpressions, (, n, ), ), {, replacements, ., addAll, (, getSideEffectNodes, (, rhs, ), ), ;, }, if, (]
[:, getRhsSubexpressions, (, n, ), ), {, replacements, ., addAll, (, getSideEffectNodes, (, rhs, ), ), ;, }, if, (]
[addAll, (, getSideEffectNodes, (, rhs, ), ), ;, }, if, (, parent, ., isFor, (, ), ), {, if, (]
[addAll, (, getSideEffectNodes, (, rhs, ), ), ;, }, if, (, parent, ., isFor, (, ), ), {, if, (]
[;, }, if, (, parent, ., isFor, (, ), ), {, if, (, replacements, ., isEmpty, (, ), ), {]
[;, }, if, (, parent, ., isFor, (, ), ), {, if, (, replacements, ., isEmpty, (, ), ), {]
[parent, ., isFor, (, ), ), {, if, (, replacements, ., isEmpty, (, ), ), {, replacements, ., add, (]
[parent, ., isFor, (, ), ), {, if, (, replacements, ., isEmpty, (, ), ), {, replacements, ., add, (]
[), ), {, replacements, ., add, (, IR, ., empty, (, ), ), ;, }, else, {, Node, expr, =]
[{, replacements, ., add, (, IR, ., empty, (, ), ), ;, }, else, {, Node, expr, =, collapseReplacements, (]
[add, (, IR, ., empty, (, ), ), ;, }, else, {, Node, expr, =, collapseReplacements, (, replacements, ), ;]
[add, (, IR, ., empty, (, ), ), ;, }, else, {, Node, expr, =, collapseReplacements, (, replacements, ), ;]
[), ), ;, }, else, {, Node, expr, =, collapseReplacements, (, replacements, ), ;, replacements, ., clear, (, ), ;]
[), ), ;, }, else, {, Node, expr, =, collapseReplacements, (, replacements, ), ;, replacements, ., clear, (, ), ;]
[else, {, Node, expr, =, collapseReplacements, (, replacements, ), ;, replacements, ., clear, (, ), ;, replacements, ., add, (]
[collapseReplacements, (, replacements, ), ;, replacements, ., clear, (, ), ;, replacements, ., add, (, expr, ), ;, }, }]
[collapseReplacements, (, replacements, ), ;, replacements, ., clear, (, ), ;, replacements, ., add, (, expr, ), ;, }, }]
[;, replacements, ., clear, (, ), ;, replacements, ., add, (, expr, ), ;, }, }, changeProxy, ., replaceWith, (]
[., clear, (, ), ;, replacements, ., add, (, expr, ), ;, }, }, changeProxy, ., replaceWith, (, parent, ,]
[(, ), ;, replacements, ., add, (, expr, ), ;, }, }, changeProxy, ., replaceWith, (, parent, ,, n, ,]
[,, n, ,, replacements, ), ;, }, private, boolean, valueConsumedByParent, (, Node, n, ,, Node, parent, ), {, if, (]
[,, n, ,, replacements, ), ;, }, private, boolean, valueConsumedByParent, (, Node, n, ,, Node, parent, ), {, if, (]
[), ;, }, private, boolean, valueConsumedByParent, (, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isAssignmentOp, (]
[valueConsumedByParent, (, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, return]
[valueConsumedByParent, (, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, return]
[valueConsumedByParent, (, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, return]
[parent, ), {, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, return, parent, ., getLastChild, (, ), ==]
[NodeUtil, ., isAssignmentOp, (, parent, ), ), {, return, parent, ., getLastChild, (, ), ==, n, ;, }, switch, (]
[NodeUtil, ., isAssignmentOp, (, parent, ), ), {, return, parent, ., getLastChild, (, ), ==, n, ;, }, switch, (]
[return, parent, ., getLastChild, (, ), ==, n, ;, }, switch, (, parent, ., getType, (, ), ), {, case]
[return, parent, ., getLastChild, (, ), ==, n, ;, }, switch, (, parent, ., getType, (, ), ), {, case]
[), ==, n, ;, }, switch, (, parent, ., getType, (, ), ), {, case, Token, ., NAME, :, case]
[), ==, n, ;, }, switch, (, parent, ., getType, (, ), ), {, case, Token, ., NAME, :, case]
[switch, (, parent, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., RETURN, :, return]
[., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., RETURN, :, return, true, ;, case]
[., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., RETURN, :, return, true, ;, case]
[{, case, Token, ., NAME, :, case, Token, ., RETURN, :, return, true, ;, case, Token, ., AND, :, case]
[{, case, Token, ., NAME, :, case, Token, ., RETURN, :, return, true, ;, case, Token, ., AND, :, case]
[:, case, Token, ., RETURN, :, return, true, ;, case, Token, ., AND, :, case, Token, ., OR, :, case]
[:, case, Token, ., RETURN, :, return, true, ;, case, Token, ., AND, :, case, Token, ., OR, :, case]
[:, return, true, ;, case, Token, ., AND, :, case, Token, ., OR, :, case, Token, ., HOOK, :, return]
[:, return, true, ;, case, Token, ., AND, :, case, Token, ., OR, :, case, Token, ., HOOK, :, return]
[:, return, true, ;, case, Token, ., AND, :, case, Token, ., OR, :, case, Token, ., HOOK, :, return]
[., AND, :, case, Token, ., OR, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==]
[case, Token, ., OR, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case]
[case, Token, ., OR, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case]
[case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., FOR, :, return]
[case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., FOR, :, return]
[case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., FOR, :, return]
[case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., FOR, :, return]
[), ==, n, ;, case, Token, ., FOR, :, return, parent, ., getFirstChild, (, ), ., getNext, (, ), ==]
[;, case, Token, ., FOR, :, return, parent, ., getFirstChild, (, ), ., getNext, (, ), ==, n, ;, case]
[;, case, Token, ., FOR, :, return, parent, ., getFirstChild, (, ), ., getNext, (, ), ==, n, ;, case]
[:, return, parent, ., getFirstChild, (, ), ., getNext, (, ), ==, n, ;, case, Token, ., IF, :, case]
[:, return, parent, ., getFirstChild, (, ), ., getNext, (, ), ==, n, ;, case, Token, ., IF, :, case]
[(, ), ., getNext, (, ), ==, n, ;, case, Token, ., IF, :, case, Token, ., WHILE, :, return]
[(, ), ., getNext, (, ), ==, n, ;, case, Token, ., IF, :, case, Token, ., WHILE, :, return]
[(, ), ., getNext, (, ), ==, n, ;, case, Token, ., IF, :, case, Token, ., WHILE, :, return]
[==, n, ;, case, Token, ., IF, :, case, Token, ., WHILE, :, return, parent, ., getFirstChild, (, ), ==]
[case, Token, ., IF, :, case, Token, ., WHILE, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case]
[case, Token, ., IF, :, case, Token, ., WHILE, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case]
[case, Token, ., WHILE, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., DO, :, return]
[case, Token, ., WHILE, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., DO, :, return]
[case, Token, ., WHILE, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., DO, :, return]
[parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., DO, :, return, parent, ., getLastChild, (, ), ==]
[==, n, ;, case, Token, ., DO, :, return, parent, ., getLastChild, (, ), ==, n, ;, default, :, return]
[:, return, false, ;, }, }, private, Node, collapseReplacements, (, List, <, Node, >, replacements, ), {, Node, expr, =]
[Node, collapseReplacements, (, List, <, Node, >, replacements, ), {, Node, expr, =, null, ;, for, (, Node, rep, :]
[Node, >, replacements, ), {, Node, expr, =, null, ;, for, (, Node, rep, :, replacements, ), {, if, (]
[Node, >, replacements, ), {, Node, expr, =, null, ;, for, (, Node, rep, :, replacements, ), {, if, (]
[=, null, ;, for, (, Node, rep, :, replacements, ), {, if, (, rep, ., isExprResult, (, ), ), {]
[;, for, (, Node, rep, :, replacements, ), {, if, (, rep, ., isExprResult, (, ), ), {, rep, =]
[;, for, (, Node, rep, :, replacements, ), {, if, (, rep, ., isExprResult, (, ), ), {, rep, =]
[replacements, ), {, if, (, rep, ., isExprResult, (, ), ), {, rep, =, rep, ., getFirstChild, (, ), ;]
[replacements, ), {, if, (, rep, ., isExprResult, (, ), ), {, rep, =, rep, ., getFirstChild, (, ), ;]
[), ), {, rep, =, rep, ., getFirstChild, (, ), ;, rep, ., detachFromParent, (, ), ;, }, if, (]
[), ), {, rep, =, rep, ., getFirstChild, (, ), ;, rep, ., detachFromParent, (, ), ;, }, if, (]
[{, rep, =, rep, ., getFirstChild, (, ), ;, rep, ., detachFromParent, (, ), ;, }, if, (, expr, ==]
[rep, ., getFirstChild, (, ), ;, rep, ., detachFromParent, (, ), ;, }, if, (, expr, ==, null, ), {]
[getFirstChild, (, ), ;, rep, ., detachFromParent, (, ), ;, }, if, (, expr, ==, null, ), {, expr, =]
[., detachFromParent, (, ), ;, }, if, (, expr, ==, null, ), {, expr, =, rep, ;, }, else, {]
[(, ), ;, }, if, (, expr, ==, null, ), {, expr, =, rep, ;, }, else, {, expr, =]
[(, ), ;, }, if, (, expr, ==, null, ), {, expr, =, rep, ;, }, else, {, expr, =]
[if, (, expr, ==, null, ), {, expr, =, rep, ;, }, else, {, expr, =, IR, ., comma, (]
[expr, ==, null, ), {, expr, =, rep, ;, }, else, {, expr, =, IR, ., comma, (, expr, ,]
[=, rep, ;, }, else, {, expr, =, IR, ., comma, (, expr, ,, rep, ), ;, }, }, return]
[;, }, }, return, expr, ;, }, private, List, <, Node, >, getRhsSubexpressions, (, Node, n, ), {, switch, (]
[;, }, }, return, expr, ;, }, private, List, <, Node, >, getRhsSubexpressions, (, Node, n, ), {, switch, (]
[List, <, Node, >, getRhsSubexpressions, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[List, <, Node, >, getRhsSubexpressions, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[(, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, return]
[n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, return, getRhsSubexpressions, (]
[n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, return, getRhsSubexpressions, (]
[(, ), ), {, case, Token, ., EXPR_RESULT, :, return, getRhsSubexpressions, (, n, ., getFirstChild, (, ), ), ;, case]
[(, ), ), {, case, Token, ., EXPR_RESULT, :, return, getRhsSubexpressions, (, n, ., getFirstChild, (, ), ), ;, case]
[Token, ., EXPR_RESULT, :, return, getRhsSubexpressions, (, n, ., getFirstChild, (, ), ), ;, case, Token, ., FUNCTION, :, return]
[Token, ., EXPR_RESULT, :, return, getRhsSubexpressions, (, n, ., getFirstChild, (, ), ), ;, case, Token, ., FUNCTION, :, return]
[n, ., getFirstChild, (, ), ), ;, case, Token, ., FUNCTION, :, return, Collections, ., emptyList, (, ), ;, case]
[n, ., getFirstChild, (, ), ), ;, case, Token, ., FUNCTION, :, return, Collections, ., emptyList, (, ), ;, case]
[Token, ., FUNCTION, :, return, Collections, ., emptyList, (, ), ;, case, Token, ., NAME, :, {, Node, rhs, =]
[Token, ., FUNCTION, :, return, Collections, ., emptyList, (, ), ;, case, Token, ., NAME, :, {, Node, rhs, =]
[(, ), ;, case, Token, ., NAME, :, {, Node, rhs, =, n, ., getFirstChild, (, ), ;, if, (]
[(, ), ;, case, Token, ., NAME, :, {, Node, rhs, =, n, ., getFirstChild, (, ), ;, if, (]
[;, case, Token, ., NAME, :, {, Node, rhs, =, n, ., getFirstChild, (, ), ;, if, (, rhs, !=]
[NAME, :, {, Node, rhs, =, n, ., getFirstChild, (, ), ;, if, (, rhs, !=, null, ), {, return]
[NAME, :, {, Node, rhs, =, n, ., getFirstChild, (, ), ;, if, (, rhs, !=, null, ), {, return]
[rhs, =, n, ., getFirstChild, (, ), ;, if, (, rhs, !=, null, ), {, return, Lists, ., newArrayList, (]
[;, if, (, rhs, !=, null, ), {, return, Lists, ., newArrayList, (, rhs, ), ;, }, else, {, return]
[;, if, (, rhs, !=, null, ), {, return, Lists, ., newArrayList, (, rhs, ), ;, }, else, {, return]
[Lists, ., newArrayList, (, rhs, ), ;, }, else, {, return, Collections, ., emptyList, (, ), ;, }, }, case]
[Lists, ., newArrayList, (, rhs, ), ;, }, else, {, return, Collections, ., emptyList, (, ), ;, }, }, case]
[else, {, return, Collections, ., emptyList, (, ), ;, }, }, case, Token, ., ASSIGN, :, {, Node, lhs, =]
[else, {, return, Collections, ., emptyList, (, ), ;, }, }, case, Token, ., ASSIGN, :, {, Node, lhs, =]
[}, }, case, Token, ., ASSIGN, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[}, }, case, Token, ., ASSIGN, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[{, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, return]
[{, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, return]
[n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, return, Lists, ., newArrayList, (]
[getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, return, Lists, ., newArrayList, (, lhs, ,]
[rhs, =, lhs, ., getNext, (, ), ;, return, Lists, ., newArrayList, (, lhs, ,, rhs, ), ;, }, case]
[rhs, =, lhs, ., getNext, (, ), ;, return, Lists, ., newArrayList, (, lhs, ,, rhs, ), ;, }, case]
[newArrayList, (, lhs, ,, rhs, ), ;, }, case, Token, ., VAR, :, {, List, <, Node, >, nodes, =]
[newArrayList, (, lhs, ,, rhs, ), ;, }, case, Token, ., VAR, :, {, List, <, Node, >, nodes, =]
[VAR, :, {, List, <, Node, >, nodes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, child, :]
[VAR, :, {, List, <, Node, >, nodes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, child, :]
[nodes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, child, :, n, ., children, (, ), ), {]
[nodes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, child, :, n, ., children, (, ), ), {]
[newArrayList, (, ), ;, for, (, Node, child, :, n, ., children, (, ), ), {, nodes, ., addAll, (]
[), ;, for, (, Node, child, :, n, ., children, (, ), ), {, nodes, ., addAll, (, getRhsSubexpressions, (]
[:, n, ., children, (, ), ), {, nodes, ., addAll, (, getRhsSubexpressions, (, child, ), ), ;, }, return]
[), {, nodes, ., addAll, (, getRhsSubexpressions, (, child, ), ), ;, }, return, nodes, ;, }, default, :, throw]
[., addAll, (, getRhsSubexpressions, (, child, ), ), ;, }, return, nodes, ;, }, default, :, throw, new, IllegalArgumentException, (]
[., addAll, (, getRhsSubexpressions, (, child, ), ), ;, }, return, nodes, ;, }, default, :, throw, new, IllegalArgumentException, (]
[(, getRhsSubexpressions, (, child, ), ), ;, }, return, nodes, ;, }, default, :, throw, new, IllegalArgumentException, (, "AstChangeProxy::getRhs ", +]
