[import, java, ., util, ., regex, ., Matcher, ;, public, class, Compiler, extends, AbstractCompiler, {, static, final, String, SINGLETON_MODULE_NAME, =]
[Matcher, ;, public, class, Compiler, extends, AbstractCompiler, {, static, final, String, SINGLETON_MODULE_NAME, =, "[singleton]", ;, static, final, DiagnosticType, MODULE_DEPENDENCY_ERROR, =]
[Matcher, ;, public, class, Compiler, extends, AbstractCompiler, {, static, final, String, SINGLETON_MODULE_NAME, =, "[singleton]", ;, static, final, DiagnosticType, MODULE_DEPENDENCY_ERROR, =]
[Compiler, extends, AbstractCompiler, {, static, final, String, SINGLETON_MODULE_NAME, =, "[singleton]", ;, static, final, DiagnosticType, MODULE_DEPENDENCY_ERROR, =, DiagnosticType, ., error, (]
[AbstractCompiler, {, static, final, String, SINGLETON_MODULE_NAME, =, "[singleton]", ;, static, final, DiagnosticType, MODULE_DEPENDENCY_ERROR, =, DiagnosticType, ., error, (, "JSC_MODULE_DEPENDENCY_ERROR", ,]
[AbstractCompiler, {, static, final, String, SINGLETON_MODULE_NAME, =, "[singleton]", ;, static, final, DiagnosticType, MODULE_DEPENDENCY_ERROR, =, DiagnosticType, ., error, (, "JSC_MODULE_DEPENDENCY_ERROR", ,]
[static, final, String, SINGLETON_MODULE_NAME, =, "[singleton]", ;, static, final, DiagnosticType, MODULE_DEPENDENCY_ERROR, =, DiagnosticType, ., error, (, "JSC_MODULE_DEPENDENCY_ERROR", ,, "Bad dependency: {0} -> {1}. ", +]
[final, DiagnosticType, MODULE_DEPENDENCY_ERROR, =, DiagnosticType, ., error, (, "JSC_MODULE_DEPENDENCY_ERROR", ,, "Bad dependency: {0} -> {1}. ", +, "Modules must be listed in dependency order.", ), ;, static, final, DiagnosticType, MISSING_ENTRY_ERROR, =]
[final, DiagnosticType, MODULE_DEPENDENCY_ERROR, =, DiagnosticType, ., error, (, "JSC_MODULE_DEPENDENCY_ERROR", ,, "Bad dependency: {0} -> {1}. ", +, "Modules must be listed in dependency order.", ), ;, static, final, DiagnosticType, MISSING_ENTRY_ERROR, =]
[DiagnosticType, ., error, (, "JSC_MODULE_DEPENDENCY_ERROR", ,, "Bad dependency: {0} -> {1}. ", +, "Modules must be listed in dependency order.", ), ;, static, final, DiagnosticType, MISSING_ENTRY_ERROR, =, DiagnosticType, ., error, (]
[error, (, "JSC_MODULE_DEPENDENCY_ERROR", ,, "Bad dependency: {0} -> {1}. ", +, "Modules must be listed in dependency order.", ), ;, static, final, DiagnosticType, MISSING_ENTRY_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_ENTRY_ERROR", ,]
[static, final, DiagnosticType, MISSING_ENTRY_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_ENTRY_ERROR", ,, "required entry point \"{0}\" never provided", ), ;, private, static, final, String, CONFIG_RESOURCE, =]
[DiagnosticType, ., error, (, "JSC_MISSING_ENTRY_ERROR", ,, "required entry point \"{0}\" never provided", ), ;, private, static, final, String, CONFIG_RESOURCE, =, "com.google.javascript.jscomp.parsing.ParserConfig", ;, CompilerOptions, options, =]
["required entry point \"{0}\" never provided", ), ;, private, static, final, String, CONFIG_RESOURCE, =, "com.google.javascript.jscomp.parsing.ParserConfig", ;, CompilerOptions, options, =, null, ;, private, PassConfig, passes, =]
[inputs, ;, private, ErrorManager, errorManager, ;, private, WarningsGuard, warningsGuard, ;, private, final, Map, <, String, ,, Node, >, injectedLibraries, =]
[inputs, ;, private, ErrorManager, errorManager, ;, private, WarningsGuard, warningsGuard, ;, private, final, Map, <, String, ,, Node, >, injectedLibraries, =]
[Node, externAndJsRoot, ;, private, Map, <, InputId, ,, CompilerInput, >, inputsById, ;, private, SourceMap, sourceMap, ;, private, String, externExports, =]
[InputId, ,, CompilerInput, >, inputsById, ;, private, SourceMap, sourceMap, ;, private, String, externExports, =, null, ;, private, int, uniqueNameId, =]
[private, SourceMap, sourceMap, ;, private, String, externExports, =, null, ;, private, int, uniqueNameId, =, 0, ;, private, boolean, hasRegExpGlobalReferences, =]
[int, uniqueNameId, =, 0, ;, private, boolean, hasRegExpGlobalReferences, =, true, ;, private, FunctionInformationMap, functionInformationMap, ;, private, final, StringBuilder, debugLog, =]
[=, true, ;, private, FunctionInformationMap, functionInformationMap, ;, private, final, StringBuilder, debugLog, =, new, StringBuilder, (, ), ;, CodingConvention, defaultCodingConvention, =]
[StringBuilder, (, ), ;, CodingConvention, defaultCodingConvention, =, new, ClosureCodingConvention, (, ), ;, private, JSTypeRegistry, typeRegistry, ;, private, Config, parserConfig, =]
[TypeValidator, typeValidator, ;, public, PerformanceTracker, tracker, ;, private, final, com, ., google, ., javascript, ., rhino, ., ErrorReporter, oldErrorReporter, =]
[TypeValidator, typeValidator, ;, public, PerformanceTracker, tracker, ;, private, final, com, ., google, ., javascript, ., rhino, ., ErrorReporter, oldErrorReporter, =]
[PerformanceTracker, tracker, ;, private, final, com, ., google, ., javascript, ., rhino, ., ErrorReporter, oldErrorReporter, =, RhinoErrorReporter, ., forOldRhino, (]
[., javascript, ., rhino, ., ErrorReporter, oldErrorReporter, =, RhinoErrorReporter, ., forOldRhino, (, this, ), ;, private, final, ErrorReporter, defaultErrorReporter, =]
[., javascript, ., rhino, ., ErrorReporter, oldErrorReporter, =, RhinoErrorReporter, ., forOldRhino, (, this, ), ;, private, final, ErrorReporter, defaultErrorReporter, =]
[., ErrorReporter, oldErrorReporter, =, RhinoErrorReporter, ., forOldRhino, (, this, ), ;, private, final, ErrorReporter, defaultErrorReporter, =, RhinoErrorReporter, ., forNewRhino, (]
[), ;, private, final, ErrorReporter, defaultErrorReporter, =, RhinoErrorReporter, ., forNewRhino, (, this, ), ;, public, static, final, DiagnosticType, OPTIMIZE_LOOP_ERROR, =]
[), ;, private, final, ErrorReporter, defaultErrorReporter, =, RhinoErrorReporter, ., forNewRhino, (, this, ), ;, public, static, final, DiagnosticType, OPTIMIZE_LOOP_ERROR, =]
[ErrorReporter, defaultErrorReporter, =, RhinoErrorReporter, ., forNewRhino, (, this, ), ;, public, static, final, DiagnosticType, OPTIMIZE_LOOP_ERROR, =, DiagnosticType, ., error, (]
[=, RhinoErrorReporter, ., forNewRhino, (, this, ), ;, public, static, final, DiagnosticType, OPTIMIZE_LOOP_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,]
[static, final, DiagnosticType, OPTIMIZE_LOOP_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of optimization iterations: {0}", ), ;, public, static, final, DiagnosticType, MOTION_ITERATIONS_ERROR, =]
[static, final, DiagnosticType, OPTIMIZE_LOOP_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of optimization iterations: {0}", ), ;, public, static, final, DiagnosticType, MOTION_ITERATIONS_ERROR, =]
[=, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of optimization iterations: {0}", ), ;, public, static, final, DiagnosticType, MOTION_ITERATIONS_ERROR, =, DiagnosticType, ., error, (]
[., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of optimization iterations: {0}", ), ;, public, static, final, DiagnosticType, MOTION_ITERATIONS_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,]
[static, final, DiagnosticType, MOTION_ITERATIONS_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of code motion iterations: {0}", ), ;, private, static, final, long, COMPILER_STACK_SIZE, =]
[final, DiagnosticType, MOTION_ITERATIONS_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of code motion iterations: {0}", ), ;, private, static, final, long, COMPILER_STACK_SIZE, =, (]
[final, DiagnosticType, MOTION_ITERATIONS_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of code motion iterations: {0}", ), ;, private, static, final, long, COMPILER_STACK_SIZE, =, (]
[MOTION_ITERATIONS_ERROR, =, DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of code motion iterations: {0}", ), ;, private, static, final, long, COMPILER_STACK_SIZE, =, (, 1, <<]
[), ;, private, static, final, long, COMPILER_STACK_SIZE, =, (, 1, <<, 21, ), ;, private, static, final, ExecutorService, compilerExecutor, =]
[), ;, private, static, final, long, COMPILER_STACK_SIZE, =, (, 1, <<, 21, ), ;, private, static, final, ExecutorService, compilerExecutor, =]
[final, long, COMPILER_STACK_SIZE, =, (, 1, <<, 21, ), ;, private, static, final, ExecutorService, compilerExecutor, =, Executors, ., newCachedThreadPool, (]
[Executors, ., newCachedThreadPool, (, new, ThreadFactory, (, ), {, @, Override, public, Thread, newThread, (, Runnable, r, ), {, return]
[(, new, ThreadFactory, (, ), {, @, Override, public, Thread, newThread, (, Runnable, r, ), {, return, new, Thread, (]
[ThreadFactory, (, ), {, @, Override, public, Thread, newThread, (, Runnable, r, ), {, return, new, Thread, (, null, ,]
[), {, @, Override, public, Thread, newThread, (, Runnable, r, ), {, return, new, Thread, (, null, ,, r, ,]
[@, Override, public, Thread, newThread, (, Runnable, r, ), {, return, new, Thread, (, null, ,, r, ,, "jscompiler", ,]
[new, Thread, (, null, ,, r, ,, "jscompiler", ,, COMPILER_STACK_SIZE, ), ;, }, }, ), ;, private, Thread, compilerThread, =]
[,, "jscompiler", ,, COMPILER_STACK_SIZE, ), ;, }, }, ), ;, private, Thread, compilerThread, =, null, ;, private, boolean, useThreads, =]
[), ;, private, Thread, compilerThread, =, null, ;, private, boolean, useThreads, =, true, ;, private, static, final, Logger, logger, =]
[), ;, private, Thread, compilerThread, =, null, ;, private, boolean, useThreads, =, true, ;, private, static, final, Logger, logger, =]
[compilerThread, =, null, ;, private, boolean, useThreads, =, true, ;, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[final, Logger, logger, =, Logger, ., getLogger, (, "com.google.javascript.jscomp", ), ;, private, final, PrintStream, outStream, ;, private, GlobalVarReferenceMap, globalRefMap, =]
[(, "com.google.javascript.jscomp", ), ;, private, final, PrintStream, outStream, ;, private, GlobalVarReferenceMap, globalRefMap, =, null, ;, private, volatile, double, progress, =]
[null, ;, private, volatile, double, progress, =, 0.0, ;, private, String, lastPassName, ;, public, Compiler, (, ), {, this, (]
[volatile, double, progress, =, 0.0, ;, private, String, lastPassName, ;, public, Compiler, (, ), {, this, (, (, PrintStream, )]
[Compiler, (, ), {, this, (, (, PrintStream, ), null, ), ;, }, public, Compiler, (, PrintStream, stream, ), {]
[), {, this, (, (, PrintStream, ), null, ), ;, }, public, Compiler, (, PrintStream, stream, ), {, addChangeHandler, (]
[(, (, PrintStream, ), null, ), ;, }, public, Compiler, (, PrintStream, stream, ), {, addChangeHandler, (, recentChange, ), ;]
[PrintStream, ), null, ), ;, }, public, Compiler, (, PrintStream, stream, ), {, addChangeHandler, (, recentChange, ), ;, outStream, =]
[(, recentChange, ), ;, outStream, =, stream, ;, }, public, Compiler, (, ErrorManager, errorManager, ), {, this, (, ), ;]
[), ;, outStream, =, stream, ;, }, public, Compiler, (, ErrorManager, errorManager, ), {, this, (, ), ;, setErrorManager, (]
[), {, this, (, ), ;, setErrorManager, (, errorManager, ), ;, }, public, void, setErrorManager, (, ErrorManager, errorManager, ), {]
[), {, this, (, ), ;, setErrorManager, (, errorManager, ), ;, }, public, void, setErrorManager, (, ErrorManager, errorManager, ), {]
[), ;, setErrorManager, (, errorManager, ), ;, }, public, void, setErrorManager, (, ErrorManager, errorManager, ), {, Preconditions, ., checkNotNull, (]
[setErrorManager, (, errorManager, ), ;, }, public, void, setErrorManager, (, ErrorManager, errorManager, ), {, Preconditions, ., checkNotNull, (, errorManager, ,]
[), ;, }, public, void, setErrorManager, (, ErrorManager, errorManager, ), {, Preconditions, ., checkNotNull, (, errorManager, ,, "the error manager cannot be null", ), ;]
[), ;, }, public, void, setErrorManager, (, ErrorManager, errorManager, ), {, Preconditions, ., checkNotNull, (, errorManager, ,, "the error manager cannot be null", ), ;]
[void, setErrorManager, (, ErrorManager, errorManager, ), {, Preconditions, ., checkNotNull, (, errorManager, ,, "the error manager cannot be null", ), ;, this, ., errorManager, =]
[,, "the error manager cannot be null", ), ;, this, ., errorManager, =, errorManager, ;, }, private, MessageFormatter, createMessageFormatter, (, ), {, boolean, colorize, =]
[,, "the error manager cannot be null", ), ;, this, ., errorManager, =, errorManager, ;, }, private, MessageFormatter, createMessageFormatter, (, ), {, boolean, colorize, =]
[=, errorManager, ;, }, private, MessageFormatter, createMessageFormatter, (, ), {, boolean, colorize, =, options, ., shouldColorizeErrorOutput, (, ), ;, return]
[=, errorManager, ;, }, private, MessageFormatter, createMessageFormatter, (, ), {, boolean, colorize, =, options, ., shouldColorizeErrorOutput, (, ), ;, return]
[=, errorManager, ;, }, private, MessageFormatter, createMessageFormatter, (, ), {, boolean, colorize, =, options, ., shouldColorizeErrorOutput, (, ), ;, return]
[createMessageFormatter, (, ), {, boolean, colorize, =, options, ., shouldColorizeErrorOutput, (, ), ;, return, options, ., errorFormat, ., toFormatter, (]
[), {, boolean, colorize, =, options, ., shouldColorizeErrorOutput, (, ), ;, return, options, ., errorFormat, ., toFormatter, (, this, ,]
[options, ., errorFormat, ., toFormatter, (, this, ,, colorize, ), ;, }, public, void, initOptions, (, CompilerOptions, options, ), {]
[options, ., errorFormat, ., toFormatter, (, this, ,, colorize, ), ;, }, public, void, initOptions, (, CompilerOptions, options, ), {]
[toFormatter, (, this, ,, colorize, ), ;, }, public, void, initOptions, (, CompilerOptions, options, ), {, this, ., options, =]
[colorize, ), ;, }, public, void, initOptions, (, CompilerOptions, options, ), {, this, ., options, =, options, ;, if, (]
[colorize, ), ;, }, public, void, initOptions, (, CompilerOptions, options, ), {, this, ., options, =, options, ;, if, (]
[;, }, public, void, initOptions, (, CompilerOptions, options, ), {, this, ., options, =, options, ;, if, (, errorManager, ==]
[(, CompilerOptions, options, ), {, this, ., options, =, options, ;, if, (, errorManager, ==, null, ), {, if, (]
[(, CompilerOptions, options, ), {, this, ., options, =, options, ;, if, (, errorManager, ==, null, ), {, if, (]
[options, ), {, this, ., options, =, options, ;, if, (, errorManager, ==, null, ), {, if, (, outStream, ==]
[this, ., options, =, options, ;, if, (, errorManager, ==, null, ), {, if, (, outStream, ==, null, ), {]
[options, =, options, ;, if, (, errorManager, ==, null, ), {, if, (, outStream, ==, null, ), {, setErrorManager, (]
[;, if, (, errorManager, ==, null, ), {, if, (, outStream, ==, null, ), {, setErrorManager, (, new, LoggerErrorManager, (]
[==, null, ), {, if, (, outStream, ==, null, ), {, setErrorManager, (, new, LoggerErrorManager, (, createMessageFormatter, (, ), ,]
[{, setErrorManager, (, new, LoggerErrorManager, (, createMessageFormatter, (, ), ,, logger, ), ), ;, }, else, {, PrintStreamErrorManager, printer, =]
[new, LoggerErrorManager, (, createMessageFormatter, (, ), ,, logger, ), ), ;, }, else, {, PrintStreamErrorManager, printer, =, new, PrintStreamErrorManager, (]
[(, ), ,, logger, ), ), ;, }, else, {, PrintStreamErrorManager, printer, =, new, PrintStreamErrorManager, (, createMessageFormatter, (, ), ,]
[logger, ), ), ;, }, else, {, PrintStreamErrorManager, printer, =, new, PrintStreamErrorManager, (, createMessageFormatter, (, ), ,, outStream, ), ;]
[logger, ), ), ;, }, else, {, PrintStreamErrorManager, printer, =, new, PrintStreamErrorManager, (, createMessageFormatter, (, ), ,, outStream, ), ;]
[}, else, {, PrintStreamErrorManager, printer, =, new, PrintStreamErrorManager, (, createMessageFormatter, (, ), ,, outStream, ), ;, printer, ., setSummaryDetailLevel, (]
[}, else, {, PrintStreamErrorManager, printer, =, new, PrintStreamErrorManager, (, createMessageFormatter, (, ), ,, outStream, ), ;, printer, ., setSummaryDetailLevel, (]
[=, new, PrintStreamErrorManager, (, createMessageFormatter, (, ), ,, outStream, ), ;, printer, ., setSummaryDetailLevel, (, options, ., summaryDetailLevel, ), ;]
[PrintStreamErrorManager, (, createMessageFormatter, (, ), ,, outStream, ), ;, printer, ., setSummaryDetailLevel, (, options, ., summaryDetailLevel, ), ;, setErrorManager, (]
[), ;, printer, ., setSummaryDetailLevel, (, options, ., summaryDetailLevel, ), ;, setErrorManager, (, printer, ), ;, }, }, if, (]
[), ;, printer, ., setSummaryDetailLevel, (, options, ., summaryDetailLevel, ), ;, setErrorManager, (, printer, ), ;, }, }, if, (]
[setSummaryDetailLevel, (, options, ., summaryDetailLevel, ), ;, setErrorManager, (, printer, ), ;, }, }, if, (, options, ., enables, (]
[setSummaryDetailLevel, (, options, ., summaryDetailLevel, ), ;, setErrorManager, (, printer, ), ;, }, }, if, (, options, ., enables, (]
[;, setErrorManager, (, printer, ), ;, }, }, if, (, options, ., enables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {]
[;, setErrorManager, (, printer, ), ;, }, }, if, (, options, ., enables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {]
[), ;, }, }, if, (, options, ., enables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =]
[options, ., enables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =, true, ;, }, else, if, (]
[options, ., enables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =, true, ;, }, else, if, (]
[DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =, true, ;, }, else, if, (, options, ., disables, (]
[DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =, true, ;, }, else, if, (, options, ., disables, (]
[options, ., checkTypes, =, true, ;, }, else, if, (, options, ., disables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {]
[options, ., checkTypes, =, true, ;, }, else, if, (, options, ., disables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {]
[true, ;, }, else, if, (, options, ., disables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =]
[options, ., disables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =, false, ;, }, else, if, (]
[., disables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =, false, ;, }, else, if, (, !]
[., disables, (, DiagnosticGroups, ., CHECK_TYPES, ), ), {, options, ., checkTypes, =, false, ;, }, else, if, (, !]
[CHECK_TYPES, ), ), {, options, ., checkTypes, =, false, ;, }, else, if, (, !, options, ., checkTypes, ), {]
[CHECK_TYPES, ), ), {, options, ., checkTypes, =, false, ;, }, else, if, (, !, options, ., checkTypes, ), {]
[options, ., checkTypes, =, false, ;, }, else, if, (, !, options, ., checkTypes, ), {, options, ., setWarningLevel, (]
[options, ., checkTypes, =, false, ;, }, else, if, (, !, options, ., checkTypes, ), {, options, ., setWarningLevel, (]
[false, ;, }, else, if, (, !, options, ., checkTypes, ), {, options, ., setWarningLevel, (, DiagnosticGroup, ., forType, (]
[false, ;, }, else, if, (, !, options, ., checkTypes, ), {, options, ., setWarningLevel, (, DiagnosticGroup, ., forType, (]
[(, !, options, ., checkTypes, ), {, options, ., setWarningLevel, (, DiagnosticGroup, ., forType, (, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ), ,]
[(, !, options, ., checkTypes, ), {, options, ., setWarningLevel, (, DiagnosticGroup, ., forType, (, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ), ,]
[., setWarningLevel, (, DiagnosticGroup, ., forType, (, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF, ), ;, }, if, (]
[., setWarningLevel, (, DiagnosticGroup, ., forType, (, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF, ), ;, }, if, (]
[., setWarningLevel, (, DiagnosticGroup, ., forType, (, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF, ), ;, }, if, (]
[., setWarningLevel, (, DiagnosticGroup, ., forType, (, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF, ), ;, }, if, (]
[., TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF, ), ;, }, if, (, options, ., checkGlobalThisLevel, ., isOn, (, ), &&]
[TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF, ), ;, }, if, (, options, ., checkGlobalThisLevel, ., isOn, (, ), &&, !]
[TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF, ), ;, }, if, (, options, ., checkGlobalThisLevel, ., isOn, (, ), &&, !]
[., OFF, ), ;, }, if, (, options, ., checkGlobalThisLevel, ., isOn, (, ), &&, !, options, ., disables, (]
[., OFF, ), ;, }, if, (, options, ., checkGlobalThisLevel, ., isOn, (, ), &&, !, options, ., disables, (]
[(, options, ., checkGlobalThisLevel, ., isOn, (, ), &&, !, options, ., disables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {]
[(, options, ., checkGlobalThisLevel, ., isOn, (, ), &&, !, options, ., disables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {]
[., isOn, (, ), &&, !, options, ., disables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, options, ., setWarningLevel, (]
[., isOn, (, ), &&, !, options, ., disables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, options, ., setWarningLevel, (]
[&&, !, options, ., disables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,]
[&&, !, options, ., disables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,]
[GLOBAL_THIS, ), ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel, ), ;, }, if, (]
[GLOBAL_THIS, ), ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel, ), ;, }, if, (]
[GLOBAL_THIS, ), ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel, ), ;, }, if, (]
[setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel, ), ;, }, if, (, options, ., getLanguageIn, (, ), ==]
[setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel, ), ;, }, if, (, options, ., getLanguageIn, (, ), ==]
[,, options, ., checkGlobalThisLevel, ), ;, }, if, (, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), {]
[,, options, ., checkGlobalThisLevel, ), ;, }, if, (, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), {]
[), ;, }, if, (, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), {, options, ., setWarningLevel, (]
[), ;, }, if, (, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), {, options, ., setWarningLevel, (]
[(, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., ES5_STRICT, ,]
[(, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), {, options, ., setWarningLevel, (, DiagnosticGroups, ., ES5_STRICT, ,]
[options, ., setWarningLevel, (, DiagnosticGroups, ., ES5_STRICT, ,, CheckLevel, ., ERROR, ), ;, }, List, <, WarningsGuard, >, guards, =]
[options, ., setWarningLevel, (, DiagnosticGroups, ., ES5_STRICT, ,, CheckLevel, ., ERROR, ), ;, }, List, <, WarningsGuard, >, guards, =]
[ES5_STRICT, ,, CheckLevel, ., ERROR, ), ;, }, List, <, WarningsGuard, >, guards, =, Lists, ., newArrayList, (, ), ;]
[ES5_STRICT, ,, CheckLevel, ., ERROR, ), ;, }, List, <, WarningsGuard, >, guards, =, Lists, ., newArrayList, (, ), ;]
[ERROR, ), ;, }, List, <, WarningsGuard, >, guards, =, Lists, ., newArrayList, (, ), ;, guards, ., add, (]
[}, List, <, WarningsGuard, >, guards, =, Lists, ., newArrayList, (, ), ;, guards, ., add, (, new, SuppressDocWarningsGuard, (]
[}, List, <, WarningsGuard, >, guards, =, Lists, ., newArrayList, (, ), ;, guards, ., add, (, new, SuppressDocWarningsGuard, (]
[(, ), ;, guards, ., add, (, new, SuppressDocWarningsGuard, (, getDiagnosticGroups, (, ), ., getRegisteredGroups, (, ), ), ), ;]
[(, ), ;, guards, ., add, (, new, SuppressDocWarningsGuard, (, getDiagnosticGroups, (, ), ., getRegisteredGroups, (, ), ), ), ;]
[., add, (, new, SuppressDocWarningsGuard, (, getDiagnosticGroups, (, ), ., getRegisteredGroups, (, ), ), ), ;, guards, ., add, (]
[., add, (, new, SuppressDocWarningsGuard, (, getDiagnosticGroups, (, ), ., getRegisteredGroups, (, ), ), ), ;, guards, ., add, (]
[getRegisteredGroups, (, ), ), ), ;, guards, ., add, (, options, ., getWarningsGuard, (, ), ), ;, ComposeWarningsGuard, composedGuards, =]
[), ), ;, guards, ., add, (, options, ., getWarningsGuard, (, ), ), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (]
[add, (, options, ., getWarningsGuard, (, ), ), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (, guards, ), ;, if, (]
[add, (, options, ., getWarningsGuard, (, ), ), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (, guards, ), ;, if, (]
[(, options, ., getWarningsGuard, (, ), ), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (, guards, ), ;, if, (, !]
[(, options, ., getWarningsGuard, (, ), ), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (, guards, ), ;, if, (, !]
[(, ), ), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (, guards, ), ;, if, (, !, options, ., checkSymbols, &&]
[), ), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (, guards, ), ;, if, (, !, options, ., checkSymbols, &&, !]
[), ), ;, ComposeWarningsGuard, composedGuards, =, new, ComposeWarningsGuard, (, guards, ), ;, if, (, !, options, ., checkSymbols, &&, !]
[composedGuards, =, new, ComposeWarningsGuard, (, guards, ), ;, if, (, !, options, ., checkSymbols, &&, !, composedGuards, ., enables, (]
[composedGuards, =, new, ComposeWarningsGuard, (, guards, ), ;, if, (, !, options, ., checkSymbols, &&, !, composedGuards, ., enables, (]
[), ;, if, (, !, options, ., checkSymbols, &&, !, composedGuards, ., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, ), ), {]
[), ;, if, (, !, options, ., checkSymbols, &&, !, composedGuards, ., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, ), ), {]
[!, options, ., checkSymbols, &&, !, composedGuards, ., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, ), ), {, composedGuards, ., addGuard, (]
[checkSymbols, &&, !, composedGuards, ., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, ), ), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (]
[checkSymbols, &&, !, composedGuards, ., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, ), ), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (]
[., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, ), ), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,]
[., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, ), ), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,]
[), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,, CheckLevel, ., OFF, ), ), ;, }]
[), {, composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,, CheckLevel, ., OFF, ), ), ;, }]
[addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,, CheckLevel, ., OFF, ), ), ;, }, this, ., warningsGuard, =]
[@, Deprecated, public, void, init, (, JSSourceFile, [, ], externs, ,, JSSourceFile, [, ], inputs, ,, CompilerOptions, options, ), {]
[public, void, init, (, JSSourceFile, [, ], externs, ,, JSSourceFile, [, ], inputs, ,, CompilerOptions, options, ), {, init, (]
[public, void, init, (, JSSourceFile, [, ], externs, ,, JSSourceFile, [, ], inputs, ,, CompilerOptions, options, ), {, init, (]
[externs, ,, JSSourceFile, [, ], inputs, ,, CompilerOptions, options, ), {, init, (, Lists, ., <, JSSourceFile, >, newArrayList, (]
[[, ], inputs, ,, CompilerOptions, options, ), {, init, (, Lists, ., <, JSSourceFile, >, newArrayList, (, externs, ), ,]
[[, ], inputs, ,, CompilerOptions, options, ), {, init, (, Lists, ., <, JSSourceFile, >, newArrayList, (, externs, ), ,]
[{, init, (, Lists, ., <, JSSourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, JSSourceFile, >, newArrayList, (]
[Lists, ., <, JSSourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, JSSourceFile, >, newArrayList, (, inputs, ), ,]
[(, List, <, T1, >, externs, ,, List, <, T2, >, inputs, ,, CompilerOptions, options, ), {, JSModule, module, =]
[T1, >, externs, ,, List, <, T2, >, inputs, ,, CompilerOptions, options, ), {, JSModule, module, =, new, JSModule, (]
[inputs, ,, CompilerOptions, options, ), {, JSModule, module, =, new, JSModule, (, SINGLETON_MODULE_NAME, ), ;, for, (, SourceFile, input, :]
[options, ), {, JSModule, module, =, new, JSModule, (, SINGLETON_MODULE_NAME, ), ;, for, (, SourceFile, input, :, inputs, ), {]
[options, ), {, JSModule, module, =, new, JSModule, (, SINGLETON_MODULE_NAME, ), ;, for, (, SourceFile, input, :, inputs, ), {]
[module, =, new, JSModule, (, SINGLETON_MODULE_NAME, ), ;, for, (, SourceFile, input, :, inputs, ), {, module, ., add, (]
[(, SINGLETON_MODULE_NAME, ), ;, for, (, SourceFile, input, :, inputs, ), {, module, ., add, (, input, ), ;, }]
[), ;, for, (, SourceFile, input, :, inputs, ), {, module, ., add, (, input, ), ;, }, initModules, (]
[for, (, SourceFile, input, :, inputs, ), {, module, ., add, (, input, ), ;, }, initModules, (, externs, ,]
[for, (, SourceFile, input, :, inputs, ), {, module, ., add, (, input, ), ;, }, initModules, (, externs, ,]
[:, inputs, ), {, module, ., add, (, input, ), ;, }, initModules, (, externs, ,, Lists, ., newArrayList, (]
[{, module, ., add, (, input, ), ;, }, initModules, (, externs, ,, Lists, ., newArrayList, (, module, ), ,]
[@, Deprecated, public, void, init, (, JSSourceFile, [, ], externs, ,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {]
[public, void, init, (, JSSourceFile, [, ], externs, ,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {, initModules, (]
[public, void, init, (, JSSourceFile, [, ], externs, ,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {, initModules, (]
[externs, ,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {, initModules, (, Lists, ., <, SourceFile, >, newArrayList, (]
[[, ], modules, ,, CompilerOptions, options, ), {, initModules, (, Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,]
[[, ], modules, ,, CompilerOptions, options, ), {, initModules, (, Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,]
[{, initModules, (, Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, JSModule, >, newArrayList, (]
[Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, JSModule, >, newArrayList, (, modules, ), ,]
[>, void, initModules, (, List, <, T, >, externs, ,, List, <, JSModule, >, modules, ,, CompilerOptions, options, ), {]
[initModules, (, List, <, T, >, externs, ,, List, <, JSModule, >, modules, ,, CompilerOptions, options, ), {, initOptions, (]
[<, T, >, externs, ,, List, <, JSModule, >, modules, ,, CompilerOptions, options, ), {, initOptions, (, options, ), ;]
[>, externs, ,, List, <, JSModule, >, modules, ,, CompilerOptions, options, ), {, initOptions, (, options, ), ;, checkFirstModule, (]
[List, <, JSModule, >, modules, ,, CompilerOptions, options, ), {, initOptions, (, options, ), ;, checkFirstModule, (, modules, ), ;]
[JSModule, >, modules, ,, CompilerOptions, options, ), {, initOptions, (, options, ), ;, checkFirstModule, (, modules, ), ;, fillEmptyModules, (]
[,, CompilerOptions, options, ), {, initOptions, (, options, ), ;, checkFirstModule, (, modules, ), ;, fillEmptyModules, (, modules, ), ;]
[,, CompilerOptions, options, ), {, initOptions, (, options, ), ;, checkFirstModule, (, modules, ), ;, fillEmptyModules, (, modules, ), ;]
[{, initOptions, (, options, ), ;, checkFirstModule, (, modules, ), ;, fillEmptyModules, (, modules, ), ;, this, ., externs, =]
[(, options, ), ;, checkFirstModule, (, modules, ), ;, fillEmptyModules, (, modules, ), ;, this, ., externs, =, makeCompilerInput, (]
[), ;, checkFirstModule, (, modules, ), ;, fillEmptyModules, (, modules, ), ;, this, ., externs, =, makeCompilerInput, (, externs, ,]
[(, modules, ), ;, fillEmptyModules, (, modules, ), ;, this, ., externs, =, makeCompilerInput, (, externs, ,, true, ), ;]
[(, modules, ), ;, fillEmptyModules, (, modules, ), ;, this, ., externs, =, makeCompilerInput, (, externs, ,, true, ), ;]
[fillEmptyModules, (, modules, ), ;, this, ., externs, =, makeCompilerInput, (, externs, ,, true, ), ;, this, ., modules, =]
[;, this, ., externs, =, makeCompilerInput, (, externs, ,, true, ), ;, this, ., modules, =, modules, ;, if, (]
[;, this, ., externs, =, makeCompilerInput, (, externs, ,, true, ), ;, this, ., modules, =, modules, ;, if, (]
[;, this, ., externs, =, makeCompilerInput, (, externs, ,, true, ), ;, this, ., modules, =, modules, ;, if, (]
[(, externs, ,, true, ), ;, this, ., modules, =, modules, ;, if, (, modules, ., size, (, ), >]
[;, this, ., modules, =, modules, ;, if, (, modules, ., size, (, ), >, 1, ), {, try, {]
[;, this, ., modules, =, modules, ;, if, (, modules, ., size, (, ), >, 1, ), {, try, {]
[=, modules, ;, if, (, modules, ., size, (, ), >, 1, ), {, try, {, this, ., moduleGraph, =]
[if, (, modules, ., size, (, ), >, 1, ), {, try, {, this, ., moduleGraph, =, new, JSModuleGraph, (]
[{, this, ., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, JSModuleGraph, ., ModuleDependenceException, e, ), {]
[., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, JSModuleGraph, ., ModuleDependenceException, e, ), {, report, (]
[., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, JSModuleGraph, ., ModuleDependenceException, e, ), {, report, (]
[JSModuleGraph, (, modules, ), ;, }, catch, (, JSModuleGraph, ., ModuleDependenceException, e, ), {, report, (, JSError, ., make, (]
[modules, ), ;, }, catch, (, JSModuleGraph, ., ModuleDependenceException, e, ), {, report, (, JSError, ., make, (, MODULE_DEPENDENCY_ERROR, ,]
[modules, ), ;, }, catch, (, JSModuleGraph, ., ModuleDependenceException, e, ), {, report, (, JSError, ., make, (, MODULE_DEPENDENCY_ERROR, ,]
[modules, ), ;, }, catch, (, JSModuleGraph, ., ModuleDependenceException, e, ), {, report, (, JSError, ., make, (, MODULE_DEPENDENCY_ERROR, ,]
[), {, report, (, JSError, ., make, (, MODULE_DEPENDENCY_ERROR, ,, e, ., getModule, (, ), ., getName, (, ), ,]
[), {, report, (, JSError, ., make, (, MODULE_DEPENDENCY_ERROR, ,, e, ., getModule, (, ), ., getName, (, ), ,]
[), {, report, (, JSError, ., make, (, MODULE_DEPENDENCY_ERROR, ,, e, ., getModule, (, ), ., getName, (, ), ,]
[), ,, e, ., getDependentModule, (, ), ., getName, (, ), ), ), ;, return, ;, }, }, else, {]
[), ,, e, ., getDependentModule, (, ), ., getName, (, ), ), ), ;, return, ;, }, }, else, {]
[getDependentModule, (, ), ., getName, (, ), ), ), ;, return, ;, }, }, else, {, this, ., moduleGraph, =]
[., getName, (, ), ), ), ;, return, ;, }, }, else, {, this, ., moduleGraph, =, null, ;, }]
[., getName, (, ), ), ), ;, return, ;, }, }, else, {, this, ., moduleGraph, =, null, ;, }]
[), ), ;, return, ;, }, }, else, {, this, ., moduleGraph, =, null, ;, }, this, ., inputs, =]
[;, return, ;, }, }, else, {, this, ., moduleGraph, =, null, ;, }, this, ., inputs, =, getAllInputsFromModules, (]
[}, }, else, {, this, ., moduleGraph, =, null, ;, }, this, ., inputs, =, getAllInputsFromModules, (, modules, ), ;]
[this, ., moduleGraph, =, null, ;, }, this, ., inputs, =, getAllInputsFromModules, (, modules, ), ;, initBasedOnOptions, (, ), ;]
[modules, ), ;, initBasedOnOptions, (, ), ;, initInputsByIdMap, (, ), ;, }, private, void, initBasedOnOptions, (, ), {, if, (]
[modules, ), ;, initBasedOnOptions, (, ), ;, initInputsByIdMap, (, ), ;, }, private, void, initBasedOnOptions, (, ), {, if, (]
[modules, ), ;, initBasedOnOptions, (, ), ;, initInputsByIdMap, (, ), ;, }, private, void, initBasedOnOptions, (, ), {, if, (]
[(, ), ;, initInputsByIdMap, (, ), ;, }, private, void, initBasedOnOptions, (, ), {, if, (, options, ., sourceMapOutputPath, !=]
[initInputsByIdMap, (, ), ;, }, private, void, initBasedOnOptions, (, ), {, if, (, options, ., sourceMapOutputPath, !=, null, ), {]
[), ;, }, private, void, initBasedOnOptions, (, ), {, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, =]
[), ;, }, private, void, initBasedOnOptions, (, ), {, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, =]
[), ;, }, private, void, initBasedOnOptions, (, ), {, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, =]
[{, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, =, options, ., sourceMapFormat, ., getInstance, (, ), ;]
[{, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, =, options, ., sourceMapFormat, ., getInstance, (, ), ;]
[., sourceMapOutputPath, !=, null, ), {, sourceMap, =, options, ., sourceMapFormat, ., getInstance, (, ), ;, sourceMap, ., setPrefixMappings, (]
[., sourceMapOutputPath, !=, null, ), {, sourceMap, =, options, ., sourceMapFormat, ., getInstance, (, ), ;, sourceMap, ., setPrefixMappings, (]
[CompilerInput, >, makeCompilerInput, (, List, <, T, >, files, ,, boolean, isExtern, ), {, List, <, CompilerInput, >, inputs, =]
[CompilerInput, >, makeCompilerInput, (, List, <, T, >, files, ,, boolean, isExtern, ), {, List, <, CompilerInput, >, inputs, =]
[isExtern, ), {, List, <, CompilerInput, >, inputs, =, Lists, ., newArrayList, (, ), ;, for, (, T, file, :]
[List, <, CompilerInput, >, inputs, =, Lists, ., newArrayList, (, ), ;, for, (, T, file, :, files, ), {]
[List, <, CompilerInput, >, inputs, =, Lists, ., newArrayList, (, ), ;, for, (, T, file, :, files, ), {]
[inputs, =, Lists, ., newArrayList, (, ), ;, for, (, T, file, :, files, ), {, inputs, ., add, (]
[., newArrayList, (, ), ;, for, (, T, file, :, files, ), {, inputs, ., add, (, new, CompilerInput, (]
[(, ), ;, for, (, T, file, :, files, ), {, inputs, ., add, (, new, CompilerInput, (, file, ,]
[file, :, files, ), {, inputs, ., add, (, new, CompilerInput, (, file, ,, isExtern, ), ), ;, }, return]
[new, CompilerInput, (, file, ,, isExtern, ), ), ;, }, return, inputs, ;, }, private, static, final, DiagnosticType, EMPTY_MODULE_LIST_ERROR, =]
[new, CompilerInput, (, file, ,, isExtern, ), ), ;, }, return, inputs, ;, }, private, static, final, DiagnosticType, EMPTY_MODULE_LIST_ERROR, =]
[,, isExtern, ), ), ;, }, return, inputs, ;, }, private, static, final, DiagnosticType, EMPTY_MODULE_LIST_ERROR, =, DiagnosticType, ., error, (]
[), ), ;, }, return, inputs, ;, }, private, static, final, DiagnosticType, EMPTY_MODULE_LIST_ERROR, =, DiagnosticType, ., error, (, "JSC_EMPTY_MODULE_LIST_ERROR", ,]
[static, final, DiagnosticType, EMPTY_MODULE_LIST_ERROR, =, DiagnosticType, ., error, (, "JSC_EMPTY_MODULE_LIST_ERROR", ,, "At least one module must be provided", ), ;, private, static, final, DiagnosticType, EMPTY_ROOT_MODULE_ERROR, =]
[static, final, DiagnosticType, EMPTY_MODULE_LIST_ERROR, =, DiagnosticType, ., error, (, "JSC_EMPTY_MODULE_LIST_ERROR", ,, "At least one module must be provided", ), ;, private, static, final, DiagnosticType, EMPTY_ROOT_MODULE_ERROR, =]
[=, DiagnosticType, ., error, (, "JSC_EMPTY_MODULE_LIST_ERROR", ,, "At least one module must be provided", ), ;, private, static, final, DiagnosticType, EMPTY_ROOT_MODULE_ERROR, =, DiagnosticType, ., error, (]
[., error, (, "JSC_EMPTY_MODULE_LIST_ERROR", ,, "At least one module must be provided", ), ;, private, static, final, DiagnosticType, EMPTY_ROOT_MODULE_ERROR, =, DiagnosticType, ., error, (, "JSC_EMPTY_ROOT_MODULE_ERROR", ,]
[error, (, "JSC_EMPTY_ROOT_MODULE_ERROR", ,, "Root module '{0}' must contain at least one source code input", ), ;, private, void, checkFirstModule, (, List, <, JSModule, >, modules, ), {, if, (]
[error, (, "JSC_EMPTY_ROOT_MODULE_ERROR", ,, "Root module '{0}' must contain at least one source code input", ), ;, private, void, checkFirstModule, (, List, <, JSModule, >, modules, ), {, if, (]
[private, void, checkFirstModule, (, List, <, JSModule, >, modules, ), {, if, (, modules, ., isEmpty, (, ), ), {]
[checkFirstModule, (, List, <, JSModule, >, modules, ), {, if, (, modules, ., isEmpty, (, ), ), {, report, (]
[checkFirstModule, (, List, <, JSModule, >, modules, ), {, if, (, modules, ., isEmpty, (, ), ), {, report, (]
[JSModule, >, modules, ), {, if, (, modules, ., isEmpty, (, ), ), {, report, (, JSError, ., make, (]
[., isEmpty, (, ), ), {, report, (, JSError, ., make, (, EMPTY_MODULE_LIST_ERROR, ), ), ;, }, else, if, (]
[., isEmpty, (, ), ), {, report, (, JSError, ., make, (, EMPTY_MODULE_LIST_ERROR, ), ), ;, }, else, if, (]
[., isEmpty, (, ), ), {, report, (, JSError, ., make, (, EMPTY_MODULE_LIST_ERROR, ), ), ;, }, else, if, (]
[., isEmpty, (, ), ), {, report, (, JSError, ., make, (, EMPTY_MODULE_LIST_ERROR, ), ), ;, }, else, if, (]
[., isEmpty, (, ), ), {, report, (, JSError, ., make, (, EMPTY_MODULE_LIST_ERROR, ), ), ;, }, else, if, (]
[), {, report, (, JSError, ., make, (, EMPTY_MODULE_LIST_ERROR, ), ), ;, }, else, if, (, modules, ., get, (]
[;, }, else, if, (, modules, ., get, (, 0, ), ., getInputs, (, ), ., isEmpty, (, ), &&]
[;, }, else, if, (, modules, ., get, (, 0, ), ., getInputs, (, ), ., isEmpty, (, ), &&]
[;, }, else, if, (, modules, ., get, (, 0, ), ., getInputs, (, ), ., isEmpty, (, ), &&]
[., get, (, 0, ), ., getInputs, (, ), ., isEmpty, (, ), &&, modules, ., size, (, ), >]
[0, ), ., getInputs, (, ), ., isEmpty, (, ), &&, modules, ., size, (, ), >, 1, ), {]
[., getInputs, (, ), ., isEmpty, (, ), &&, modules, ., size, (, ), >, 1, ), {, report, (]
[., getInputs, (, ), ., isEmpty, (, ), &&, modules, ., size, (, ), >, 1, ), {, report, (]
[., isEmpty, (, ), &&, modules, ., size, (, ), >, 1, ), {, report, (, JSError, ., make, (]
[(, ), &&, modules, ., size, (, ), >, 1, ), {, report, (, JSError, ., make, (, EMPTY_ROOT_MODULE_ERROR, ,]
[(, ), &&, modules, ., size, (, ), >, 1, ), {, report, (, JSError, ., make, (, EMPTY_ROOT_MODULE_ERROR, ,]
[(, ), &&, modules, ., size, (, ), >, 1, ), {, report, (, JSError, ., make, (, EMPTY_ROOT_MODULE_ERROR, ,]
[., size, (, ), >, 1, ), {, report, (, JSError, ., make, (, EMPTY_ROOT_MODULE_ERROR, ,, modules, ., get, (]
[0, ), ., getName, (, ), ), ), ;, }, }, static, String, createFillFileName, (, String, moduleName, ), {, return]
[0, ), ., getName, (, ), ), ), ;, }, }, static, String, createFillFileName, (, String, moduleName, ), {, return]
[0, ), ., getName, (, ), ), ), ;, }, }, static, String, createFillFileName, (, String, moduleName, ), {, return]
[., getName, (, ), ), ), ;, }, }, static, String, createFillFileName, (, String, moduleName, ), {, return, "[", +]
[(, ), ), ), ;, }, }, static, String, createFillFileName, (, String, moduleName, ), {, return, "[", +, moduleName, +]
["]", ;, }, private, static, void, fillEmptyModules, (, List, <, JSModule, >, modules, ), {, for, (, JSModule, module, :]
[void, fillEmptyModules, (, List, <, JSModule, >, modules, ), {, for, (, JSModule, module, :, modules, ), {, if, (]
[void, fillEmptyModules, (, List, <, JSModule, >, modules, ), {, for, (, JSModule, module, :, modules, ), {, if, (]
[void, fillEmptyModules, (, List, <, JSModule, >, modules, ), {, for, (, JSModule, module, :, modules, ), {, if, (]
[(, JSModule, module, :, modules, ), {, if, (, module, ., getInputs, (, ), ., isEmpty, (, ), ), {]
[(, JSModule, module, :, modules, ), {, if, (, module, ., getInputs, (, ), ., isEmpty, (, ), ), {]
[modules, ), {, if, (, module, ., getInputs, (, ), ., isEmpty, (, ), ), {, module, ., add, (]
[modules, ), {, if, (, module, ., getInputs, (, ), ., isEmpty, (, ), ), {, module, ., add, (]
[(, module, ., getInputs, (, ), ., isEmpty, (, ), ), {, module, ., add, (, SourceFile, ., fromCode, (]
[., getInputs, (, ), ., isEmpty, (, ), ), {, module, ., add, (, SourceFile, ., fromCode, (, createFillFileName, (]
[., getInputs, (, ), ., isEmpty, (, ), ), {, module, ., add, (, SourceFile, ., fromCode, (, createFillFileName, (]
[), ), {, module, ., add, (, SourceFile, ., fromCode, (, createFillFileName, (, module, ., getName, (, ), ), ,]
[module, ., getName, (, ), ), ,, "", ), ), ;, }, }, }, public, void, rebuildInputsFromModules, (, ), {]
[getName, (, ), ), ,, "", ), ), ;, }, }, }, public, void, rebuildInputsFromModules, (, ), {, inputs, =]
[), ), ,, "", ), ), ;, }, }, }, public, void, rebuildInputsFromModules, (, ), {, inputs, =, getAllInputsFromModules, (]
["", ), ), ;, }, }, }, public, void, rebuildInputsFromModules, (, ), {, inputs, =, getAllInputsFromModules, (, modules, ), ;]
[static, List, <, CompilerInput, >, getAllInputsFromModules, (, List, <, JSModule, >, modules, ), {, List, <, CompilerInput, >, inputs, =]
[static, List, <, CompilerInput, >, getAllInputsFromModules, (, List, <, JSModule, >, modules, ), {, List, <, CompilerInput, >, inputs, =]
[List, <, CompilerInput, >, inputs, =, Lists, ., newArrayList, (, ), ;, Map, <, String, ,, JSModule, >, inputMap, =]
[List, <, CompilerInput, >, inputs, =, Lists, ., newArrayList, (, ), ;, Map, <, String, ,, JSModule, >, inputMap, =]
[;, Map, <, String, ,, JSModule, >, inputMap, =, Maps, ., newHashMap, (, ), ;, for, (, JSModule, module, :]
[=, Maps, ., newHashMap, (, ), ;, for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, input, :]
[=, Maps, ., newHashMap, (, ), ;, for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, input, :]
[module, :, modules, ), {, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, String, inputName, =]
[module, :, modules, ), {, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, String, inputName, =]
[(, CompilerInput, input, :, module, ., getInputs, (, ), ), {, String, inputName, =, input, ., getName, (, ), ;]
[(, CompilerInput, input, :, module, ., getInputs, (, ), ), {, String, inputName, =, input, ., getName, (, ), ;]
[module, ., getInputs, (, ), ), {, String, inputName, =, input, ., getName, (, ), ;, inputs, ., add, (]
[(, ), ), {, String, inputName, =, input, ., getName, (, ), ;, inputs, ., add, (, input, ), ;]
[(, ), ), {, String, inputName, =, input, ., getName, (, ), ;, inputs, ., add, (, input, ), ;]
[String, inputName, =, input, ., getName, (, ), ;, inputs, ., add, (, input, ), ;, inputMap, ., put, (]
[=, input, ., getName, (, ), ;, inputs, ., add, (, input, ), ;, inputMap, ., put, (, inputName, ,]
[;, inputs, ., add, (, input, ), ;, inputMap, ., put, (, inputName, ,, module, ), ;, }, }, return]
[inputMap, ., put, (, inputName, ,, module, ), ;, }, }, return, inputs, ;, }, static, final, DiagnosticType, DUPLICATE_INPUT, =]
[inputMap, ., put, (, inputName, ,, module, ), ;, }, }, return, inputs, ;, }, static, final, DiagnosticType, DUPLICATE_INPUT, =]
[inputName, ,, module, ), ;, }, }, return, inputs, ;, }, static, final, DiagnosticType, DUPLICATE_INPUT, =, DiagnosticType, ., error, (]
[module, ), ;, }, }, return, inputs, ;, }, static, final, DiagnosticType, DUPLICATE_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_INPUT", ,]
[}, static, final, DiagnosticType, DUPLICATE_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_INPUT", ,, "Duplicate input: {0}", ), ;, static, final, DiagnosticType, DUPLICATE_EXTERN_INPUT, =]
[}, static, final, DiagnosticType, DUPLICATE_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_INPUT", ,, "Duplicate input: {0}", ), ;, static, final, DiagnosticType, DUPLICATE_EXTERN_INPUT, =]
[DUPLICATE_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_INPUT", ,, "Duplicate input: {0}", ), ;, static, final, DiagnosticType, DUPLICATE_EXTERN_INPUT, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_DUPLICATE_INPUT", ,, "Duplicate input: {0}", ), ;, static, final, DiagnosticType, DUPLICATE_EXTERN_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_EXTERN_INPUT", ,]
[;, static, final, DiagnosticType, DUPLICATE_EXTERN_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_EXTERN_INPUT", ,, "Duplicate extern input: {0}", ), ;, void, initInputsByIdMap, (, ), {]
[final, DiagnosticType, DUPLICATE_EXTERN_INPUT, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_EXTERN_INPUT", ,, "Duplicate extern input: {0}", ), ;, void, initInputsByIdMap, (, ), {, inputsById, =]
[(, ), {, inputsById, =, new, HashMap, <, InputId, ,, CompilerInput, >, (, ), ;, for, (, CompilerInput, input, :]
[HashMap, <, InputId, ,, CompilerInput, >, (, ), ;, for, (, CompilerInput, input, :, externs, ), {, InputId, id, =]
[HashMap, <, InputId, ,, CompilerInput, >, (, ), ;, for, (, CompilerInput, input, :, externs, ), {, InputId, id, =]
[for, (, CompilerInput, input, :, externs, ), {, InputId, id, =, input, ., getInputId, (, ), ;, CompilerInput, previous, =]
[CompilerInput, input, :, externs, ), {, InputId, id, =, input, ., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (]
[:, externs, ), {, InputId, id, =, input, ., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,]
[id, =, input, ., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (]
[id, =, input, ., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (]
[input, ., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=]
[(, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=, null, ), {]
[;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=, null, ), {, report, (]
[;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=, null, ), {, report, (]
[putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=, null, ), {, report, (, JSError, ., make, (]
[id, ,, input, ), ;, if, (, previous, !=, null, ), {, report, (, JSError, ., make, (, DUPLICATE_EXTERN_INPUT, ,]
[id, ,, input, ), ;, if, (, previous, !=, null, ), {, report, (, JSError, ., make, (, DUPLICATE_EXTERN_INPUT, ,]
[., make, (, DUPLICATE_EXTERN_INPUT, ,, input, ., getName, (, ), ), ), ;, }, }, for, (, CompilerInput, input, :]
[., getName, (, ), ), ), ;, }, }, for, (, CompilerInput, input, :, inputs, ), {, InputId, id, =]
[., getName, (, ), ), ), ;, }, }, for, (, CompilerInput, input, :, inputs, ), {, InputId, id, =]
[for, (, CompilerInput, input, :, inputs, ), {, InputId, id, =, input, ., getInputId, (, ), ;, CompilerInput, previous, =]
[CompilerInput, input, :, inputs, ), {, InputId, id, =, input, ., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (]
[:, inputs, ), {, InputId, id, =, input, ., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,]
[id, =, input, ., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (]
[id, =, input, ., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (]
[input, ., getInputId, (, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=]
[(, ), ;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=, null, ), {]
[;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=, null, ), {, report, (]
[;, CompilerInput, previous, =, putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=, null, ), {, report, (]
[putCompilerInput, (, id, ,, input, ), ;, if, (, previous, !=, null, ), {, report, (, JSError, ., make, (]
[id, ,, input, ), ;, if, (, previous, !=, null, ), {, report, (, JSError, ., make, (, DUPLICATE_INPUT, ,]
[id, ,, input, ), ;, if, (, previous, !=, null, ), {, report, (, JSError, ., make, (, DUPLICATE_INPUT, ,]
[), ;, }, }, }, public, Result, compile, (, SourceFile, extern, ,, SourceFile, input, ,, CompilerOptions, options, ), {, return]
[}, }, }, public, Result, compile, (, SourceFile, extern, ,, SourceFile, input, ,, CompilerOptions, options, ), {, return, compile, (]
[}, }, }, public, Result, compile, (, SourceFile, extern, ,, SourceFile, input, ,, CompilerOptions, options, ), {, return, compile, (]
[Result, compile, (, SourceFile, extern, ,, SourceFile, input, ,, CompilerOptions, options, ), {, return, compile, (, Lists, ., newArrayList, (]
[SourceFile, extern, ,, SourceFile, input, ,, CompilerOptions, options, ), {, return, compile, (, Lists, ., newArrayList, (, extern, ), ,]
[SourceFile, extern, ,, SourceFile, input, ,, CompilerOptions, options, ), {, return, compile, (, Lists, ., newArrayList, (, extern, ), ,]
[input, ,, CompilerOptions, options, ), {, return, compile, (, Lists, ., newArrayList, (, extern, ), ,, Lists, ., newArrayList, (]
[options, ), {, return, compile, (, Lists, ., newArrayList, (, extern, ), ,, Lists, ., newArrayList, (, input, ), ,]
[}, @, Deprecated, public, Result, compile, (, SourceFile, extern, ,, JSSourceFile, [, ], input, ,, CompilerOptions, options, ), {, return]
[Deprecated, public, Result, compile, (, SourceFile, extern, ,, JSSourceFile, [, ], input, ,, CompilerOptions, options, ), {, return, compile, (]
[Deprecated, public, Result, compile, (, SourceFile, extern, ,, JSSourceFile, [, ], input, ,, CompilerOptions, options, ), {, return, compile, (]
[(, SourceFile, extern, ,, JSSourceFile, [, ], input, ,, CompilerOptions, options, ), {, return, compile, (, Lists, ., newArrayList, (]
[,, JSSourceFile, [, ], input, ,, CompilerOptions, options, ), {, return, compile, (, Lists, ., newArrayList, (, extern, ), ,]
[,, JSSourceFile, [, ], input, ,, CompilerOptions, options, ), {, return, compile, (, Lists, ., newArrayList, (, extern, ), ,]
[input, ,, CompilerOptions, options, ), {, return, compile, (, Lists, ., newArrayList, (, extern, ), ,, Lists, ., newArrayList, (]
[options, ), {, return, compile, (, Lists, ., newArrayList, (, extern, ), ,, Lists, ., newArrayList, (, input, ), ,]
[}, @, Deprecated, public, Result, compile, (, JSSourceFile, extern, ,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {, return]
[Deprecated, public, Result, compile, (, JSSourceFile, extern, ,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {, return, compileModules, (]
[Deprecated, public, Result, compile, (, JSSourceFile, extern, ,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {, return, compileModules, (]
[(, JSSourceFile, extern, ,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {, return, compileModules, (, Lists, ., newArrayList, (]
[,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {, return, compileModules, (, Lists, ., newArrayList, (, extern, ), ,]
[,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {, return, compileModules, (, Lists, ., newArrayList, (, extern, ), ,]
[modules, ,, CompilerOptions, options, ), {, return, compileModules, (, Lists, ., newArrayList, (, extern, ), ,, Lists, ., newArrayList, (]
[options, ), {, return, compileModules, (, Lists, ., newArrayList, (, extern, ), ,, Lists, ., newArrayList, (, modules, ), ,]
[Deprecated, public, Result, compile, (, JSSourceFile, [, ], externs, ,, JSSourceFile, [, ], inputs, ,, CompilerOptions, options, ), {, return]
[Result, compile, (, JSSourceFile, [, ], externs, ,, JSSourceFile, [, ], inputs, ,, CompilerOptions, options, ), {, return, compile, (]
[Result, compile, (, JSSourceFile, [, ], externs, ,, JSSourceFile, [, ], inputs, ,, CompilerOptions, options, ), {, return, compile, (]
[,, JSSourceFile, [, ], inputs, ,, CompilerOptions, options, ), {, return, compile, (, Lists, ., <, SourceFile, >, newArrayList, (]
[], inputs, ,, CompilerOptions, options, ), {, return, compile, (, Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,]
[], inputs, ,, CompilerOptions, options, ), {, return, compile, (, Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,]
[return, compile, (, Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, SourceFile, >, newArrayList, (]
[Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, SourceFile, >, newArrayList, (, inputs, ), ,]
[>, Result, compile, (, List, <, T1, >, externs, ,, List, <, T2, >, inputs, ,, CompilerOptions, options, ), {]
[>, Result, compile, (, List, <, T1, >, externs, ,, List, <, T2, >, inputs, ,, CompilerOptions, options, ), {]
[List, <, T1, >, externs, ,, List, <, T2, >, inputs, ,, CompilerOptions, options, ), {, Preconditions, ., checkState, (]
[List, <, T1, >, externs, ,, List, <, T2, >, inputs, ,, CompilerOptions, options, ), {, Preconditions, ., checkState, (]
[T1, >, externs, ,, List, <, T2, >, inputs, ,, CompilerOptions, options, ), {, Preconditions, ., checkState, (, jsRoot, ==]
[<, T2, >, inputs, ,, CompilerOptions, options, ), {, Preconditions, ., checkState, (, jsRoot, ==, null, ), ;, try, {]
[>, inputs, ,, CompilerOptions, options, ), {, Preconditions, ., checkState, (, jsRoot, ==, null, ), ;, try, {, init, (]
[,, CompilerOptions, options, ), {, Preconditions, ., checkState, (, jsRoot, ==, null, ), ;, try, {, init, (, externs, ,]
[options, ), {, Preconditions, ., checkState, (, jsRoot, ==, null, ), ;, try, {, init, (, externs, ,, inputs, ,]
[checkState, (, jsRoot, ==, null, ), ;, try, {, init, (, externs, ,, inputs, ,, options, ), ;, if, (]
[;, try, {, init, (, externs, ,, inputs, ,, options, ), ;, if, (, hasErrors, (, ), ), {, return]
[,, inputs, ,, options, ), ;, if, (, hasErrors, (, ), ), {, return, getResult, (, ), ;, }, return]
[), ), {, return, getResult, (, ), ;, }, return, compile, (, ), ;, }, finally, {, Tracer, t, =]
[{, return, getResult, (, ), ;, }, return, compile, (, ), ;, }, finally, {, Tracer, t, =, newTracer, (]
[(, ), ;, }, return, compile, (, ), ;, }, finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;]
[(, ), ;, }, return, compile, (, ), ;, }, finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;]
[(, ), ;, }, finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;, errorManager, ., generateReport, (, ), ;]
[;, }, finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;, errorManager, ., generateReport, (, ), ;, stopTracer, (]
[finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;, errorManager, ., generateReport, (, ), ;, stopTracer, (, t, ,]
[Deprecated, public, Result, compile, (, JSSourceFile, [, ], externs, ,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {, return]
[Result, compile, (, JSSourceFile, [, ], externs, ,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {, return, compileModules, (]
[Result, compile, (, JSSourceFile, [, ], externs, ,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {, return, compileModules, (]
[,, JSModule, [, ], modules, ,, CompilerOptions, options, ), {, return, compileModules, (, Lists, ., <, SourceFile, >, newArrayList, (]
[], modules, ,, CompilerOptions, options, ), {, return, compileModules, (, Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,]
[], modules, ,, CompilerOptions, options, ), {, return, compileModules, (, Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,]
[return, compileModules, (, Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, JSModule, >, newArrayList, (]
[Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, JSModule, >, newArrayList, (, modules, ), ,]
[>, Result, compileModules, (, List, <, T, >, externs, ,, List, <, JSModule, >, modules, ,, CompilerOptions, options, ), {]
[>, Result, compileModules, (, List, <, T, >, externs, ,, List, <, JSModule, >, modules, ,, CompilerOptions, options, ), {]
[List, <, T, >, externs, ,, List, <, JSModule, >, modules, ,, CompilerOptions, options, ), {, Preconditions, ., checkState, (]
[List, <, T, >, externs, ,, List, <, JSModule, >, modules, ,, CompilerOptions, options, ), {, Preconditions, ., checkState, (]
[T, >, externs, ,, List, <, JSModule, >, modules, ,, CompilerOptions, options, ), {, Preconditions, ., checkState, (, jsRoot, ==]
[<, JSModule, >, modules, ,, CompilerOptions, options, ), {, Preconditions, ., checkState, (, jsRoot, ==, null, ), ;, try, {]
[>, modules, ,, CompilerOptions, options, ), {, Preconditions, ., checkState, (, jsRoot, ==, null, ), ;, try, {, initModules, (]
[,, CompilerOptions, options, ), {, Preconditions, ., checkState, (, jsRoot, ==, null, ), ;, try, {, initModules, (, externs, ,]
[options, ), {, Preconditions, ., checkState, (, jsRoot, ==, null, ), ;, try, {, initModules, (, externs, ,, modules, ,]
[checkState, (, jsRoot, ==, null, ), ;, try, {, initModules, (, externs, ,, modules, ,, options, ), ;, if, (]
[;, try, {, initModules, (, externs, ,, modules, ,, options, ), ;, if, (, hasErrors, (, ), ), {, return]
[,, modules, ,, options, ), ;, if, (, hasErrors, (, ), ), {, return, getResult, (, ), ;, }, return]
[), ), {, return, getResult, (, ), ;, }, return, compile, (, ), ;, }, finally, {, Tracer, t, =]
[{, return, getResult, (, ), ;, }, return, compile, (, ), ;, }, finally, {, Tracer, t, =, newTracer, (]
[(, ), ;, }, return, compile, (, ), ;, }, finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;]
[(, ), ;, }, return, compile, (, ), ;, }, finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;]
[(, ), ;, }, finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;, errorManager, ., generateReport, (, ), ;]
[;, }, finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;, errorManager, ., generateReport, (, ), ;, stopTracer, (]
[finally, {, Tracer, t, =, newTracer, (, "generateReport", ), ;, errorManager, ., generateReport, (, ), ;, stopTracer, (, t, ,]
[generateReport, (, ), ;, stopTracer, (, t, ,, "generateReport", ), ;, }, }, private, Result, compile, (, ), {, return]
[), ;, stopTracer, (, t, ,, "generateReport", ), ;, }, }, private, Result, compile, (, ), {, return, runInCompilerThread, (]
[runInCompilerThread, (, new, Callable, <, Result, >, (, ), {, @, Override, public, Result, call, (, ), throws, Exception, {]
[Result, >, (, ), {, @, Override, public, Result, call, (, ), throws, Exception, {, compileInternal, (, ), ;, return]
[compileInternal, (, ), ;, return, getResult, (, ), ;, }, }, ), ;, }, public, void, disableThreads, (, ), {]
[), ;, return, getResult, (, ), ;, }, }, ), ;, }, public, void, disableThreads, (, ), {, useThreads, =]
[getResult, (, ), ;, }, }, ), ;, }, public, void, disableThreads, (, ), {, useThreads, =, false, ;, }]
[;, }, }, ), ;, }, public, void, disableThreads, (, ), {, useThreads, =, false, ;, }, @, SuppressWarnings, (]
["unchecked", ), <, T, >, T, runInCompilerThread, (, final, Callable, <, T, >, callable, ), {, final, boolean, dumpTraceReport, =]
["unchecked", ), <, T, >, T, runInCompilerThread, (, final, Callable, <, T, >, callable, ), {, final, boolean, dumpTraceReport, =]
["unchecked", ), <, T, >, T, runInCompilerThread, (, final, Callable, <, T, >, callable, ), {, final, boolean, dumpTraceReport, =]
[<, T, >, T, runInCompilerThread, (, final, Callable, <, T, >, callable, ), {, final, boolean, dumpTraceReport, =, options, !=]
[>, T, runInCompilerThread, (, final, Callable, <, T, >, callable, ), {, final, boolean, dumpTraceReport, =, options, !=, null, &&]
[>, T, runInCompilerThread, (, final, Callable, <, T, >, callable, ), {, final, boolean, dumpTraceReport, =, options, !=, null, &&]
[>, T, runInCompilerThread, (, final, Callable, <, T, >, callable, ), {, final, boolean, dumpTraceReport, =, options, !=, null, &&]
[{, final, boolean, dumpTraceReport, =, options, !=, null, &&, options, ., tracer, ., isOn, (, ), ;, T, result, =]
[&&, options, ., tracer, ., isOn, (, ), ;, T, result, =, null, ;, final, Throwable, [, ], exception, =]
[tracer, ., isOn, (, ), ;, T, result, =, null, ;, final, Throwable, [, ], exception, =, new, Throwable, []
[null, ;, final, Throwable, [, ], exception, =, new, Throwable, [, 1, ], ;, Callable, <, T, >, bootCompilerThread, =]
[bootCompilerThread, =, new, Callable, <, T, >, (, ), {, @, Override, public, T, call, (, ), {, try, {]
[new, Callable, <, T, >, (, ), {, @, Override, public, T, call, (, ), {, try, {, compilerThread, =]
[new, Callable, <, T, >, (, ), {, @, Override, public, T, call, (, ), {, try, {, compilerThread, =]
[@, Override, public, T, call, (, ), {, try, {, compilerThread, =, Thread, ., currentThread, (, ), ;, if, (]
[T, call, (, ), {, try, {, compilerThread, =, Thread, ., currentThread, (, ), ;, if, (, dumpTraceReport, ), {]
[T, call, (, ), {, try, {, compilerThread, =, Thread, ., currentThread, (, ), ;, if, (, dumpTraceReport, ), {]
[=, Thread, ., currentThread, (, ), ;, if, (, dumpTraceReport, ), {, Tracer, ., initCurrentThreadTrace, (, ), ;, }, return]
[=, Thread, ., currentThread, (, ), ;, if, (, dumpTraceReport, ), {, Tracer, ., initCurrentThreadTrace, (, ), ;, }, return]
[., initCurrentThreadTrace, (, ), ;, }, return, callable, ., call, (, ), ;, }, catch, (, Throwable, e, ), {]
[., initCurrentThreadTrace, (, ), ;, }, return, callable, ., call, (, ), ;, }, catch, (, Throwable, e, ), {]
[(, ), ;, }, return, callable, ., call, (, ), ;, }, catch, (, Throwable, e, ), {, exception, []
[}, return, callable, ., call, (, ), ;, }, catch, (, Throwable, e, ), {, exception, [, 0, ], =]
[(, ), ;, }, catch, (, Throwable, e, ), {, exception, [, 0, ], =, e, ;, }, finally, {]
[;, }, catch, (, Throwable, e, ), {, exception, [, 0, ], =, e, ;, }, finally, {, compilerThread, =]
[Throwable, e, ), {, exception, [, 0, ], =, e, ;, }, finally, {, compilerThread, =, null, ;, if, (]
[{, exception, [, 0, ], =, e, ;, }, finally, {, compilerThread, =, null, ;, if, (, dumpTraceReport, ), {]
[{, exception, [, 0, ], =, e, ;, }, finally, {, compilerThread, =, null, ;, if, (, dumpTraceReport, ), {]
[e, ;, }, finally, {, compilerThread, =, null, ;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;]
[e, ;, }, finally, {, compilerThread, =, null, ;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;]
[{, compilerThread, =, null, ;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;, tracker, ., outputTracerReport, (]
[{, compilerThread, =, null, ;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;, tracker, ., outputTracerReport, (]
[{, compilerThread, =, null, ;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;, tracker, ., outputTracerReport, (]
[=, null, ;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;, tracker, ., outputTracerReport, (, outStream, ==]
[;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;, tracker, ., outputTracerReport, (, outStream, ==, null, ?]
[;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;, tracker, ., outputTracerReport, (, outStream, ==, null, ?]
[), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;, tracker, ., outputTracerReport, (, outStream, ==, null, ?, System, ., out, :]
[), ;, tracker, ., outputTracerReport, (, outStream, ==, null, ?, System, ., out, :, outStream, ), ;, }, }, return]
[(, outStream, ==, null, ?, System, ., out, :, outStream, ), ;, }, }, return, null, ;, }, }, ;]
[(, outStream, ==, null, ?, System, ., out, :, outStream, ), ;, }, }, return, null, ;, }, }, ;]
[?, System, ., out, :, outStream, ), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (]
[?, System, ., out, :, outStream, ), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (]
[?, System, ., out, :, outStream, ), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (]
[., out, :, outStream, ), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (, compilerThread, ==]
[:, outStream, ), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (, compilerThread, ==, null, ||]
[:, outStream, ), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (, compilerThread, ==, null, ||]
[), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (, compilerThread, ==, null, ||, compilerThread, ==]
[), ;, }, }, return, null, ;, }, }, ;, Preconditions, ., checkState, (, compilerThread, ==, null, ||, compilerThread, ==]
[;, }, }, ;, Preconditions, ., checkState, (, compilerThread, ==, null, ||, compilerThread, ==, Thread, ., currentThread, (, ), ,]
[., checkState, (, compilerThread, ==, null, ||, compilerThread, ==, Thread, ., currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (]
[., checkState, (, compilerThread, ==, null, ||, compilerThread, ==, Thread, ., currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (]
[(, compilerThread, ==, null, ||, compilerThread, ==, Thread, ., currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&]
[(, compilerThread, ==, null, ||, compilerThread, ==, Thread, ., currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&]
[==, null, ||, compilerThread, ==, Thread, ., currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==]
[Thread, ., currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==, null, ), {, try, {]
[currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==, null, ), {, try, {, result, =]
[currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==, null, ), {, try, {, result, =]
[currentThread, (, ), ,, "Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==, null, ), {, try, {, result, =]
["Please do not share the Compiler across threads", ), ;, if, (, useThreads, &&, compilerThread, ==, null, ), {, try, {, result, =, compilerExecutor, ., submit, (]
[=, compilerExecutor, ., submit, (, bootCompilerThread, ), ., get, (, ), ;, }, catch, (, InterruptedException, e, ), {, throw]
[=, compilerExecutor, ., submit, (, bootCompilerThread, ), ., get, (, ), ;, }, catch, (, InterruptedException, e, ), {, throw]
[(, bootCompilerThread, ), ., get, (, ), ;, }, catch, (, InterruptedException, e, ), {, throw, Throwables, ., propagate, (]
[InterruptedException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, catch, (, ExecutionException, e, ), {, throw]
[InterruptedException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, catch, (, ExecutionException, e, ), {, throw]
[throw, Throwables, ., propagate, (, e, ), ;, }, catch, (, ExecutionException, e, ), {, throw, Throwables, ., propagate, (]
[catch, (, ExecutionException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, }, else, {, try, {]
[ExecutionException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, }, else, {, try, {, result, =]
[ExecutionException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, }, else, {, try, {, result, =]
[}, else, {, try, {, result, =, callable, ., call, (, ), ;, }, catch, (, Exception, e, ), {]
[}, else, {, try, {, result, =, callable, ., call, (, ), ;, }, catch, (, Exception, e, ), {]
[{, try, {, result, =, callable, ., call, (, ), ;, }, catch, (, Exception, e, ), {, exception, []
[result, =, callable, ., call, (, ), ;, }, catch, (, Exception, e, ), {, exception, [, 0, ], =]
[), ;, }, catch, (, Exception, e, ), {, exception, [, 0, ], =, e, ;, }, }, if, (]
[), ;, }, catch, (, Exception, e, ), {, exception, [, 0, ], =, e, ;, }, }, if, (]
[), ;, }, catch, (, Exception, e, ), {, exception, [, 0, ], =, e, ;, }, }, if, (]
[}, catch, (, Exception, e, ), {, exception, [, 0, ], =, e, ;, }, }, if, (, exception, []
[Exception, e, ), {, exception, [, 0, ], =, e, ;, }, }, if, (, exception, [, 0, ], !=]
[exception, [, 0, ], =, e, ;, }, }, if, (, exception, [, 0, ], !=, null, ), {, throw]
[], =, e, ;, }, }, if, (, exception, [, 0, ], !=, null, ), {, throw, new, RuntimeException, (]
[], =, e, ;, }, }, if, (, exception, [, 0, ], !=, null, ), {, throw, new, RuntimeException, (]
[e, ;, }, }, if, (, exception, [, 0, ], !=, null, ), {, throw, new, RuntimeException, (, exception, []
[exception, [, 0, ], !=, null, ), {, throw, new, RuntimeException, (, exception, [, 0, ], ), ;, }, return]
[new, RuntimeException, (, exception, [, 0, ], ), ;, }, return, result, ;, }, private, void, compileInternal, (, ), {]
[(, exception, [, 0, ], ), ;, }, return, result, ;, }, private, void, compileInternal, (, ), {, setProgress, (]
[[, 0, ], ), ;, }, return, result, ;, }, private, void, compileInternal, (, ), {, setProgress, (, 0.0, ,]
[), ;, }, return, result, ;, }, private, void, compileInternal, (, ), {, setProgress, (, 0.0, ,, null, ), ;]
[result, ;, }, private, void, compileInternal, (, ), {, setProgress, (, 0.0, ,, null, ), ;, parse, (, ), ;]
[}, private, void, compileInternal, (, ), {, setProgress, (, 0.0, ,, null, ), ;, parse, (, ), ;, setProgress, (]
[void, compileInternal, (, ), {, setProgress, (, 0.0, ,, null, ), ;, parse, (, ), ;, setProgress, (, 0.15, ,]
[setProgress, (, 0.0, ,, null, ), ;, parse, (, ), ;, setProgress, (, 0.15, ,, "parse", ), ;, if, (]
[;, setProgress, (, 0.15, ,, "parse", ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (]
[setProgress, (, 0.15, ,, "parse", ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (, !]
[(, ), ), {, return, ;, }, if, (, !, precheck, (, ), ), {, return, ;, }, if, (]
[(, ), ), {, return, ;, }, if, (, !, precheck, (, ), ), {, return, ;, }, if, (]
[;, }, if, (, !, precheck, (, ), ), {, return, ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {]
[{, return, ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, check, (, ), ;, return, ;, }, if, (]
[return, ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, check, (, ), ;, return, ;, }, if, (, !]
[return, ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, check, (, ), ;, return, ;, }, if, (, !]
[options, ., nameAnonymousFunctionsOnly, ), {, check, (, ), ;, return, ;, }, if, (, !, options, ., skipAllPasses, ), {]
[(, ), ;, return, ;, }, if, (, !, options, ., skipAllPasses, ), {, check, (, ), ;, if, (]
[., skipAllPasses, ), {, check, (, ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (]
[., skipAllPasses, ), {, check, (, ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (]
[., skipAllPasses, ), {, check, (, ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (]
[), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (, options, ., isExternExportsEnabled, (, ), ||]
[), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (, options, ., isExternExportsEnabled, (, ), ||]
[), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (, options, ., isExternExportsEnabled, (, ), ||]
[hasErrors, (, ), ), {, return, ;, }, if, (, options, ., isExternExportsEnabled, (, ), ||, options, ., externExportsPath, !=]
[), {, return, ;, }, if, (, options, ., isExternExportsEnabled, (, ), ||, options, ., externExportsPath, !=, null, ), {]
[options, ., isExternExportsEnabled, (, ), ||, options, ., externExportsPath, !=, null, ), {, externExports, (, ), ;, }, if, (]
[., isExternExportsEnabled, (, ), ||, options, ., externExportsPath, !=, null, ), {, externExports, (, ), ;, }, if, (, !]
[., isExternExportsEnabled, (, ), ||, options, ., externExportsPath, !=, null, ), {, externExports, (, ), ;, }, if, (, !]
[options, ., externExportsPath, !=, null, ), {, externExports, (, ), ;, }, if, (, !, options, ., ideMode, ), {]
[(, ), ;, }, if, (, !, options, ., ideMode, ), {, optimize, (, ), ;, }, }, if, (]
[(, ), ;, }, if, (, !, options, ., ideMode, ), {, optimize, (, ), ;, }, }, if, (]
[(, !, options, ., ideMode, ), {, optimize, (, ), ;, }, }, if, (, options, ., recordFunctionInformation, ), {]
[optimize, (, ), ;, }, }, if, (, options, ., recordFunctionInformation, ), {, recordFunctionInformation, (, ), ;, }, if, (]
[optimize, (, ), ;, }, }, if, (, options, ., recordFunctionInformation, ), {, recordFunctionInformation, (, ), ;, }, if, (]
[optimize, (, ), ;, }, }, if, (, options, ., recordFunctionInformation, ), {, recordFunctionInformation, (, ), ;, }, if, (]
[}, }, if, (, options, ., recordFunctionInformation, ), {, recordFunctionInformation, (, ), ;, }, if, (, options, ., devMode, ==]
[}, }, if, (, options, ., recordFunctionInformation, ), {, recordFunctionInformation, (, ), ;, }, if, (, options, ., devMode, ==]
[., recordFunctionInformation, ), {, recordFunctionInformation, (, ), ;, }, if, (, options, ., devMode, ==, DevMode, ., START_AND_END, ), {]
[(, ), ;, }, if, (, options, ., devMode, ==, DevMode, ., START_AND_END, ), {, runSanityCheck, (, ), ;, }]
[;, }, if, (, options, ., devMode, ==, DevMode, ., START_AND_END, ), {, runSanityCheck, (, ), ;, }, setProgress, (]
[if, (, options, ., devMode, ==, DevMode, ., START_AND_END, ), {, runSanityCheck, (, ), ;, }, setProgress, (, 1.0, ,]
[{, runSanityCheck, (, ), ;, }, setProgress, (, 1.0, ,, "recordFunctionInformation", ), ;, }, public, void, parse, (, ), {]
[;, }, public, void, parse, (, ), {, parseInputs, (, ), ;, }, PassConfig, getPassConfig, (, ), {, if, (]
[;, }, public, void, parse, (, ), {, parseInputs, (, ), ;, }, PassConfig, getPassConfig, (, ), {, if, (]
[public, void, parse, (, ), {, parseInputs, (, ), ;, }, PassConfig, getPassConfig, (, ), {, if, (, passes, ==]
[(, ), {, parseInputs, (, ), ;, }, PassConfig, getPassConfig, (, ), {, if, (, passes, ==, null, ), {]
[{, parseInputs, (, ), ;, }, PassConfig, getPassConfig, (, ), {, if, (, passes, ==, null, ), {, passes, =]
[PassConfig, getPassConfig, (, ), {, if, (, passes, ==, null, ), {, passes, =, createPassConfigInternal, (, ), ;, }, return]
[null, ), {, passes, =, createPassConfigInternal, (, ), ;, }, return, passes, ;, }, PassConfig, createPassConfigInternal, (, ), {, return]
[passes, =, createPassConfigInternal, (, ), ;, }, return, passes, ;, }, PassConfig, createPassConfigInternal, (, ), {, return, new, DefaultPassConfig, (]
[createPassConfigInternal, (, ), {, return, new, DefaultPassConfig, (, options, ), ;, }, public, void, setPassConfig, (, PassConfig, passes, ), {]
[createPassConfigInternal, (, ), {, return, new, DefaultPassConfig, (, options, ), ;, }, public, void, setPassConfig, (, PassConfig, passes, ), {]
[return, new, DefaultPassConfig, (, options, ), ;, }, public, void, setPassConfig, (, PassConfig, passes, ), {, Preconditions, ., checkNotNull, (]
[), ;, }, public, void, setPassConfig, (, PassConfig, passes, ), {, Preconditions, ., checkNotNull, (, passes, ), ;, if, (]
[), ;, }, public, void, setPassConfig, (, PassConfig, passes, ), {, Preconditions, ., checkNotNull, (, passes, ), ;, if, (]
[), ;, }, public, void, setPassConfig, (, PassConfig, passes, ), {, Preconditions, ., checkNotNull, (, passes, ), ;, if, (]
[void, setPassConfig, (, PassConfig, passes, ), {, Preconditions, ., checkNotNull, (, passes, ), ;, if, (, this, ., passes, !=]
[passes, ), {, Preconditions, ., checkNotNull, (, passes, ), ;, if, (, this, ., passes, !=, null, ), {, throw]
[Preconditions, ., checkNotNull, (, passes, ), ;, if, (, this, ., passes, !=, null, ), {, throw, new, IllegalStateException, (]
[passes, ), ;, if, (, this, ., passes, !=, null, ), {, throw, new, IllegalStateException, (, "this.passes has already been assigned", ), ;, }]
[passes, ), ;, if, (, this, ., passes, !=, null, ), {, throw, new, IllegalStateException, (, "this.passes has already been assigned", ), ;, }]
[(, this, ., passes, !=, null, ), {, throw, new, IllegalStateException, (, "this.passes has already been assigned", ), ;, }, this, ., passes, =]
[new, IllegalStateException, (, "this.passes has already been assigned", ), ;, }, this, ., passes, =, passes, ;, }, boolean, precheck, (, ), {, return]
[passes, =, passes, ;, }, boolean, precheck, (, ), {, return, true, ;, }, public, void, check, (, ), {]
[passes, ;, }, boolean, precheck, (, ), {, return, true, ;, }, public, void, check, (, ), {, runCustomPasses, (]
[passes, ;, }, boolean, precheck, (, ), {, return, true, ;, }, public, void, check, (, ), {, runCustomPasses, (]
[return, true, ;, }, public, void, check, (, ), {, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_CHECKS, ), ;, PhaseOptimizer, phaseOptimizer, =]
[}, public, void, check, (, ), {, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_CHECKS, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (]
[void, check, (, ), {, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_CHECKS, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,]
[(, ), {, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_CHECKS, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,, tracker, ,]
[CustomPassExecutionTime, ., BEFORE_CHECKS, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,, tracker, ,, new, PhaseOptimizer, ., ProgressRange, (]
[;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,, tracker, ,, new, PhaseOptimizer, ., ProgressRange, (, getProgress, (, ), ,]
[(, this, ,, tracker, ,, new, PhaseOptimizer, ., ProgressRange, (, getProgress, (, ), ,, 1.0, ), ), ;, if, (]
[(, this, ,, tracker, ,, new, PhaseOptimizer, ., ProgressRange, (, getProgress, (, ), ,, 1.0, ), ), ;, if, (]
[(, this, ,, tracker, ,, new, PhaseOptimizer, ., ProgressRange, (, getProgress, (, ), ,, 1.0, ), ), ;, if, (]
[,, new, PhaseOptimizer, ., ProgressRange, (, getProgress, (, ), ,, 1.0, ), ), ;, if, (, options, ., devMode, ==]
[,, new, PhaseOptimizer, ., ProgressRange, (, getProgress, (, ), ,, 1.0, ), ), ;, if, (, options, ., devMode, ==]
[(, getProgress, (, ), ,, 1.0, ), ), ;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {]
[(, getProgress, (, ), ,, 1.0, ), ), ;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {]
[,, 1.0, ), ), ;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (]
[;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }]
[;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }]
[., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (]
[., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (]
[., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getChecks, (, ), ), ;]
[., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getChecks, (, ), ), ;]
[), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getChecks, (, ), ), ;, phaseOptimizer, ., process, (]
[}, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getChecks, (, ), ), ;, phaseOptimizer, ., process, (, externsRoot, ,]
[getPassConfig, (, ), ., getChecks, (, ), ), ;, phaseOptimizer, ., process, (, externsRoot, ,, jsRoot, ), ;, if, (]
[., process, (, externsRoot, ,, jsRoot, ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (]
[., process, (, externsRoot, ,, jsRoot, ), ;, if, (, hasErrors, (, ), ), {, return, ;, }, if, (]
[hasErrors, (, ), ), {, return, ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, return, ;, }, if, (]
[hasErrors, (, ), ), {, return, ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, return, ;, }, if, (]
[return, ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, return, ;, }, if, (, options, ., removeTryCatchFinally, ), {]
[nameAnonymousFunctionsOnly, ), {, return, ;, }, if, (, options, ., removeTryCatchFinally, ), {, removeTryCatchFinally, (, ), ;, }, if, (]
[nameAnonymousFunctionsOnly, ), {, return, ;, }, if, (, options, ., removeTryCatchFinally, ), {, removeTryCatchFinally, (, ), ;, }, if, (]
[nameAnonymousFunctionsOnly, ), {, return, ;, }, if, (, options, ., removeTryCatchFinally, ), {, removeTryCatchFinally, (, ), ;, }, if, (]
[nameAnonymousFunctionsOnly, ), {, return, ;, }, if, (, options, ., removeTryCatchFinally, ), {, removeTryCatchFinally, (, ), ;, }, if, (]
[nameAnonymousFunctionsOnly, ), {, return, ;, }, if, (, options, ., removeTryCatchFinally, ), {, removeTryCatchFinally, (, ), ;, }, if, (]
[nameAnonymousFunctionsOnly, ), {, return, ;, }, if, (, options, ., removeTryCatchFinally, ), {, removeTryCatchFinally, (, ), ;, }, if, (]
[nameAnonymousFunctionsOnly, ), {, return, ;, }, if, (, options, ., removeTryCatchFinally, ), {, removeTryCatchFinally, (, ), ;, }, if, (]
[removeTryCatchFinally, ), {, removeTryCatchFinally, (, ), ;, }, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||]
[), {, removeTryCatchFinally, (, ), ;, }, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !]
[), {, removeTryCatchFinally, (, ), ;, }, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !]
[), {, removeTryCatchFinally, (, ), ;, }, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !]
[(, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !, options, ., stripTypes, ., isEmpty, (, ), ||]
[options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !, options, ., stripTypes, ., isEmpty, (, ), ||, !]
[options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !, options, ., stripTypes, ., isEmpty, (, ), ||, !]
[options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !, options, ., stripTypes, ., isEmpty, (, ), ||, !]
[), ||, !, options, ., stripTypes, ., isEmpty, (, ), ||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||]
[||, !, options, ., stripTypes, ., isEmpty, (, ), ||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !]
[||, !, options, ., stripTypes, ., isEmpty, (, ), ||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !]
[||, !, options, ., stripTypes, ., isEmpty, (, ), ||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !]
[), ||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||]
[||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !]
[||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !]
[||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !]
[||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {]
[options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {, stripCode, (]
[options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {, stripCode, (]
[isEmpty, (, ), ||, !, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {, stripCode, (, options, ., stripTypes, ,]
[isEmpty, (, ), ||, !, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {, stripCode, (, options, ., stripTypes, ,]
[!, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {, stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes, ,]
[!, options, ., stripNamePrefixes, ., isEmpty, (, ), ), {, stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes, ,]
[., isEmpty, (, ), ), {, stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes, ,, options, ., stripTypePrefixes, ,]
[., isEmpty, (, ), ), {, stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes, ,, options, ., stripTypePrefixes, ,]
[stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes, ,, options, ., stripTypePrefixes, ,, options, ., stripNamePrefixes, ), ;, }]
[options, ., stripTypes, ,, options, ., stripNameSuffixes, ,, options, ., stripTypePrefixes, ,, options, ., stripNamePrefixes, ), ;, }, runCustomPasses, (]
[options, ., stripTypes, ,, options, ., stripNameSuffixes, ,, options, ., stripTypePrefixes, ,, options, ., stripNamePrefixes, ), ;, }, runCustomPasses, (]
[options, ., stripNamePrefixes, ), ;, }, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS, ), ;, }, private, void, externExports, (, ), {]
[options, ., stripNamePrefixes, ), ;, }, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS, ), ;, }, private, void, externExports, (, ), {]
[;, }, runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS, ), ;, }, private, void, externExports, (, ), {, logger, ., fine, (]
[(, CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS, ), ;, }, private, void, externExports, (, ), {, logger, ., fine, (, "Creating extern file for exports", ), ;]
[., BEFORE_OPTIMIZATIONS, ), ;, }, private, void, externExports, (, ), {, logger, ., fine, (, "Creating extern file for exports", ), ;, startPass, (]
[void, externExports, (, ), {, logger, ., fine, (, "Creating extern file for exports", ), ;, startPass, (, "externExports", ), ;, ExternExportsPass, pass, =]
[), {, logger, ., fine, (, "Creating extern file for exports", ), ;, startPass, (, "externExports", ), ;, ExternExportsPass, pass, =, new, ExternExportsPass, (]
[., fine, (, "Creating extern file for exports", ), ;, startPass, (, "externExports", ), ;, ExternExportsPass, pass, =, new, ExternExportsPass, (, this, ), ;]
[(, "Creating extern file for exports", ), ;, startPass, (, "externExports", ), ;, ExternExportsPass, pass, =, new, ExternExportsPass, (, this, ), ;, process, (]
[;, startPass, (, "externExports", ), ;, ExternExportsPass, pass, =, new, ExternExportsPass, (, this, ), ;, process, (, pass, ), ;]
[(, "externExports", ), ;, ExternExportsPass, pass, =, new, ExternExportsPass, (, this, ), ;, process, (, pass, ), ;, externExports, =]
[(, "externExports", ), ;, ExternExportsPass, pass, =, new, ExternExportsPass, (, this, ), ;, process, (, pass, ), ;, externExports, =]
[=, new, ExternExportsPass, (, this, ), ;, process, (, pass, ), ;, externExports, =, pass, ., getGeneratedExterns, (, ), ;]
[pass, ., getGeneratedExterns, (, ), ;, endPass, (, ), ;, }, @, Override, void, process, (, CompilerPass, p, ), {]
[pass, ., getGeneratedExterns, (, ), ;, endPass, (, ), ;, }, @, Override, void, process, (, CompilerPass, p, ), {]
[), ;, endPass, (, ), ;, }, @, Override, void, process, (, CompilerPass, p, ), {, p, ., process, (]
[endPass, (, ), ;, }, @, Override, void, process, (, CompilerPass, p, ), {, p, ., process, (, externsRoot, ,]
[(, CompilerPass, p, ), {, p, ., process, (, externsRoot, ,, jsRoot, ), ;, }, private, final, PassFactory, sanityCheck, =]
[), {, p, ., process, (, externsRoot, ,, jsRoot, ), ;, }, private, final, PassFactory, sanityCheck, =, new, PassFactory, (]
[p, ., process, (, externsRoot, ,, jsRoot, ), ;, }, private, final, PassFactory, sanityCheck, =, new, PassFactory, (, "sanityCheck", ,]
[=, new, PassFactory, (, "sanityCheck", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "sanityCheck", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, SanityCheck, (]
[), {, return, new, SanityCheck, (, compiler, ), ;, }, }, ;, private, void, maybeSanityCheck, (, ), {, if, (]
[), {, return, new, SanityCheck, (, compiler, ), ;, }, }, ;, private, void, maybeSanityCheck, (, ), {, if, (]
[), {, return, new, SanityCheck, (, compiler, ), ;, }, }, ;, private, void, maybeSanityCheck, (, ), {, if, (]
[SanityCheck, (, compiler, ), ;, }, }, ;, private, void, maybeSanityCheck, (, ), {, if, (, options, ., devMode, ==]
[SanityCheck, (, compiler, ), ;, }, }, ;, private, void, maybeSanityCheck, (, ), {, if, (, options, ., devMode, ==]
[}, }, ;, private, void, maybeSanityCheck, (, ), {, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {]
[., devMode, ==, DevMode, ., EVERY_PASS, ), {, runSanityCheck, (, ), ;, }, }, private, void, runSanityCheck, (, ), {]
[., devMode, ==, DevMode, ., EVERY_PASS, ), {, runSanityCheck, (, ), ;, }, }, private, void, runSanityCheck, (, ), {]
[., devMode, ==, DevMode, ., EVERY_PASS, ), {, runSanityCheck, (, ), ;, }, }, private, void, runSanityCheck, (, ), {]
[., EVERY_PASS, ), {, runSanityCheck, (, ), ;, }, }, private, void, runSanityCheck, (, ), {, sanityCheck, ., create, (]
[(, ), ;, }, }, private, void, runSanityCheck, (, ), {, sanityCheck, ., create, (, this, ), ., process, (]
[;, }, }, private, void, runSanityCheck, (, ), {, sanityCheck, ., create, (, this, ), ., process, (, externsRoot, ,]
[sanityCheck, ., create, (, this, ), ., process, (, externsRoot, ,, jsRoot, ), ;, }, void, removeTryCatchFinally, (, ), {]
[sanityCheck, ., create, (, this, ), ., process, (, externsRoot, ,, jsRoot, ), ;, }, void, removeTryCatchFinally, (, ), {]
[this, ), ., process, (, externsRoot, ,, jsRoot, ), ;, }, void, removeTryCatchFinally, (, ), {, logger, ., fine, (]
[process, (, externsRoot, ,, jsRoot, ), ;, }, void, removeTryCatchFinally, (, ), {, logger, ., fine, (, "Remove try/catch/finally", ), ;]
[externsRoot, ,, jsRoot, ), ;, }, void, removeTryCatchFinally, (, ), {, logger, ., fine, (, "Remove try/catch/finally", ), ;, startPass, (]
[void, removeTryCatchFinally, (, ), {, logger, ., fine, (, "Remove try/catch/finally", ), ;, startPass, (, "removeTryCatchFinally", ), ;, RemoveTryCatch, r, =]
[), {, logger, ., fine, (, "Remove try/catch/finally", ), ;, startPass, (, "removeTryCatchFinally", ), ;, RemoveTryCatch, r, =, new, RemoveTryCatch, (]
[., fine, (, "Remove try/catch/finally", ), ;, startPass, (, "removeTryCatchFinally", ), ;, RemoveTryCatch, r, =, new, RemoveTryCatch, (, this, ), ;]
[(, "Remove try/catch/finally", ), ;, startPass, (, "removeTryCatchFinally", ), ;, RemoveTryCatch, r, =, new, RemoveTryCatch, (, this, ), ;, process, (]
[;, startPass, (, "removeTryCatchFinally", ), ;, RemoveTryCatch, r, =, new, RemoveTryCatch, (, this, ), ;, process, (, r, ), ;]
[,, Set, <, String, >, stripNameSuffixes, ,, Set, <, String, >, stripTypePrefixes, ,, Set, <, String, >, stripNamePrefixes, ), {]
[,, Set, <, String, >, stripNameSuffixes, ,, Set, <, String, >, stripTypePrefixes, ,, Set, <, String, >, stripNamePrefixes, ), {]
[>, stripNameSuffixes, ,, Set, <, String, >, stripTypePrefixes, ,, Set, <, String, >, stripNamePrefixes, ), {, logger, ., fine, (]
[Set, <, String, >, stripTypePrefixes, ,, Set, <, String, >, stripNamePrefixes, ), {, logger, ., fine, (, "Strip code", ), ;]
[String, >, stripTypePrefixes, ,, Set, <, String, >, stripNamePrefixes, ), {, logger, ., fine, (, "Strip code", ), ;, startPass, (]
[String, >, stripNamePrefixes, ), {, logger, ., fine, (, "Strip code", ), ;, startPass, (, "stripCode", ), ;, StripCode, r, =]
[), {, logger, ., fine, (, "Strip code", ), ;, startPass, (, "stripCode", ), ;, StripCode, r, =, new, StripCode, (]
[logger, ., fine, (, "Strip code", ), ;, startPass, (, "stripCode", ), ;, StripCode, r, =, new, StripCode, (, this, ,]
[fine, (, "Strip code", ), ;, startPass, (, "stripCode", ), ;, StripCode, r, =, new, StripCode, (, this, ,, stripTypes, ,]
["Strip code", ), ;, startPass, (, "stripCode", ), ;, StripCode, r, =, new, StripCode, (, this, ,, stripTypes, ,, stripNameSuffixes, ,]
[;, startPass, (, "stripCode", ), ;, StripCode, r, =, new, StripCode, (, this, ,, stripTypes, ,, stripNameSuffixes, ,, stripTypePrefixes, ,]
[;, StripCode, r, =, new, StripCode, (, this, ,, stripTypes, ,, stripNameSuffixes, ,, stripTypePrefixes, ,, stripNamePrefixes, ), ;, if, (]
[;, StripCode, r, =, new, StripCode, (, this, ,, stripTypes, ,, stripNameSuffixes, ,, stripTypePrefixes, ,, stripNamePrefixes, ), ;, if, (]
[;, StripCode, r, =, new, StripCode, (, this, ,, stripTypes, ,, stripNameSuffixes, ,, stripTypePrefixes, ,, stripNamePrefixes, ), ;, if, (]
[stripNameSuffixes, ,, stripTypePrefixes, ,, stripNamePrefixes, ), ;, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ), {]
[stripNameSuffixes, ,, stripTypePrefixes, ,, stripNamePrefixes, ), ;, if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ), {]
[if, (, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ), {, r, ., enableTweakStripping, (, ), ;, }]
[options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ), {, r, ., enableTweakStripping, (, ), ;, }, process, (]
[(, ), ., shouldStrip, (, ), ), {, r, ., enableTweakStripping, (, ), ;, }, process, (, r, ), ;]
[process, (, r, ), ;, endPass, (, ), ;, }, private, void, runCustomPasses, (, CustomPassExecutionTime, executionTime, ), {, if, (]
[process, (, r, ), ;, endPass, (, ), ;, }, private, void, runCustomPasses, (, CustomPassExecutionTime, executionTime, ), {, if, (]
[process, (, r, ), ;, endPass, (, ), ;, }, private, void, runCustomPasses, (, CustomPassExecutionTime, executionTime, ), {, if, (]
[;, endPass, (, ), ;, }, private, void, runCustomPasses, (, CustomPassExecutionTime, executionTime, ), {, if, (, options, ., customPasses, !=]
[private, void, runCustomPasses, (, CustomPassExecutionTime, executionTime, ), {, if, (, options, ., customPasses, !=, null, ), {, Tracer, t, =]
[runCustomPasses, (, CustomPassExecutionTime, executionTime, ), {, if, (, options, ., customPasses, !=, null, ), {, Tracer, t, =, newTracer, (]
[customPasses, !=, null, ), {, Tracer, t, =, newTracer, (, "runCustomPasses", ), ;, try, {, for, (, CompilerPass, p, :]
[customPasses, !=, null, ), {, Tracer, t, =, newTracer, (, "runCustomPasses", ), ;, try, {, for, (, CompilerPass, p, :]
[customPasses, !=, null, ), {, Tracer, t, =, newTracer, (, "runCustomPasses", ), ;, try, {, for, (, CompilerPass, p, :]
[t, =, newTracer, (, "runCustomPasses", ), ;, try, {, for, (, CompilerPass, p, :, options, ., customPasses, ., get, (]
["runCustomPasses", ), ;, try, {, for, (, CompilerPass, p, :, options, ., customPasses, ., get, (, executionTime, ), ), {]
[;, try, {, for, (, CompilerPass, p, :, options, ., customPasses, ., get, (, executionTime, ), ), {, process, (]
[:, options, ., customPasses, ., get, (, executionTime, ), ), {, process, (, p, ), ;, }, }, finally, {]
[., customPasses, ., get, (, executionTime, ), ), {, process, (, p, ), ;, }, }, finally, {, stopTracer, (]
[., get, (, executionTime, ), ), {, process, (, p, ), ;, }, }, finally, {, stopTracer, (, t, ,]
[), ;, }, }, finally, {, stopTracer, (, t, ,, "runCustomPasses", ), ;, }, }, }, private, Tracer, currentTracer, =]
[stopTracer, (, t, ,, "runCustomPasses", ), ;, }, }, }, private, Tracer, currentTracer, =, null, ;, private, String, currentPassName, =]
[}, private, Tracer, currentTracer, =, null, ;, private, String, currentPassName, =, null, ;, void, startPass, (, String, passName, ), {]
[}, private, Tracer, currentTracer, =, null, ;, private, String, currentPassName, =, null, ;, void, startPass, (, String, passName, ), {]
[=, null, ;, private, String, currentPassName, =, null, ;, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (]
[=, null, ;, private, String, currentPassName, =, null, ;, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (]
[;, private, String, currentPassName, =, null, ;, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (, currentTracer, ==]
[currentPassName, =, null, ;, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (, currentTracer, ==, null, ), ;]
[null, ;, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (, currentTracer, ==, null, ), ;, currentPassName, =]
[void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (, currentTracer, ==, null, ), ;, currentPassName, =, passName, ;]
[(, String, passName, ), {, Preconditions, ., checkState, (, currentTracer, ==, null, ), ;, currentPassName, =, passName, ;, currentTracer, =]
[passName, ), {, Preconditions, ., checkState, (, currentTracer, ==, null, ), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (]
[null, ), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, void, endPass, (, ), {]
[null, ), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, void, endPass, (, ), {]
[=, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, void, endPass, (, ), {, Preconditions, ., checkState, (]
[=, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, void, endPass, (, ), {, Preconditions, ., checkState, (]
[;, currentTracer, =, newTracer, (, passName, ), ;, }, void, endPass, (, ), {, Preconditions, ., checkState, (, currentTracer, !=]
[=, newTracer, (, passName, ), ;, }, void, endPass, (, ), {, Preconditions, ., checkState, (, currentTracer, !=, null, ,]
[passName, ), ;, }, void, endPass, (, ), {, Preconditions, ., checkState, (, currentTracer, !=, null, ,, "Tracer should not be null at the end of a pass.", ), ;]
[;, }, void, endPass, (, ), {, Preconditions, ., checkState, (, currentTracer, !=, null, ,, "Tracer should not be null at the end of a pass.", ), ;, stopTracer, (]
[void, endPass, (, ), {, Preconditions, ., checkState, (, currentTracer, !=, null, ,, "Tracer should not be null at the end of a pass.", ), ;, stopTracer, (, currentTracer, ,]
[., checkState, (, currentTracer, !=, null, ,, "Tracer should not be null at the end of a pass.", ), ;, stopTracer, (, currentTracer, ,, currentPassName, ), ;, String, passToCheck, =]
[(, currentTracer, !=, null, ,, "Tracer should not be null at the end of a pass.", ), ;, stopTracer, (, currentTracer, ,, currentPassName, ), ;, String, passToCheck, =, currentPassName, ;]
[!=, null, ,, "Tracer should not be null at the end of a pass.", ), ;, stopTracer, (, currentTracer, ,, currentPassName, ), ;, String, passToCheck, =, currentPassName, ;, currentPassName, =]
[,, "Tracer should not be null at the end of a pass.", ), ;, stopTracer, (, currentTracer, ,, currentPassName, ), ;, String, passToCheck, =, currentPassName, ;, currentPassName, =, null, ;]
[), ;, stopTracer, (, currentTracer, ,, currentPassName, ), ;, String, passToCheck, =, currentPassName, ;, currentPassName, =, null, ;, currentTracer, =]
[stopTracer, (, currentTracer, ,, currentPassName, ), ;, String, passToCheck, =, currentPassName, ;, currentPassName, =, null, ;, currentTracer, =, null, ;]
[;, currentTracer, =, null, ;, maybeSanityCheck, (, ), ;, }, Tracer, newTracer, (, String, passName, ), {, String, comment, =]
[;, currentTracer, =, null, ;, maybeSanityCheck, (, ), ;, }, Tracer, newTracer, (, String, passName, ), {, String, comment, =]
[=, null, ;, maybeSanityCheck, (, ), ;, }, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +]
[null, ;, maybeSanityCheck, (, ), ;, }, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +, (]
[null, ;, maybeSanityCheck, (, ), ;, }, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +, (]
[null, ;, maybeSanityCheck, (, ), ;, }, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +, (]
[}, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +, (, recentChange, ., hasCodeChanged, (, ), ?]
[newTracer, (, String, passName, ), {, String, comment, =, passName, +, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :]
[{, String, comment, =, passName, +, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (]
[{, String, comment, =, passName, +, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (]
[{, String, comment, =, passName, +, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (]
[hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {]
[hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {]
[" on recently changed AST", :, "", ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStart, (]
[if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return]
[., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (]
[., isOn, (, ), ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (, "Compiler", ,]
[(, "Compiler", ,, comment, ), ;, }, void, stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =]
[(, "Compiler", ,, comment, ), ;, }, void, stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =]
[stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =, t, ., stop, (, ), ;, if, (]
[stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =, t, ., stop, (, ), ;, if, (]
[stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =, t, ., stop, (, ), ;, if, (]
[long, result, =, t, ., stop, (, ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {]
[long, result, =, t, ., stop, (, ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {]
[., stop, (, ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStop, (]
[(, ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, ., recordPassStop, (, passName, ,]
[recordPassStop, (, passName, ,, result, ), ;, }, }, public, Result, getResult, (, ), {, PassConfig, ., State, state, =]
[recordPassStop, (, passName, ,, result, ), ;, }, }, public, Result, getResult, (, ), {, PassConfig, ., State, state, =]
[public, Result, getResult, (, ), {, PassConfig, ., State, state, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;, return]
[(, ), {, PassConfig, ., State, state, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;, return, new, Result, (]
[., State, state, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;, return, new, Result, (, getErrors, (, ), ,]
[getPassConfig, (, ), ., getIntermediateState, (, ), ;, return, new, Result, (, getErrors, (, ), ,, getWarnings, (, ), ,]
[getPassConfig, (, ), ., getIntermediateState, (, ), ;, return, new, Result, (, getErrors, (, ), ,, getWarnings, (, ), ,]
[), ;, return, new, Result, (, getErrors, (, ), ,, getWarnings, (, ), ,, debugLog, ., toString, (, ), ,]
[), ;, return, new, Result, (, getErrors, (, ), ,, getWarnings, (, ), ,, debugLog, ., toString, (, ), ,]
[Result, (, getErrors, (, ), ,, getWarnings, (, ), ,, debugLog, ., toString, (, ), ,, state, ., variableMap, ,]
[Result, (, getErrors, (, ), ,, getWarnings, (, ), ,, debugLog, ., toString, (, ), ,, state, ., variableMap, ,]
[), ,, getWarnings, (, ), ,, debugLog, ., toString, (, ), ,, state, ., variableMap, ,, state, ., propertyMap, ,]
[), ,, getWarnings, (, ), ,, debugLog, ., toString, (, ), ,, state, ., variableMap, ,, state, ., propertyMap, ,]
[), ,, debugLog, ., toString, (, ), ,, state, ., variableMap, ,, state, ., propertyMap, ,, state, ., anonymousFunctionNameMap, ,]
[), ,, debugLog, ., toString, (, ), ,, state, ., variableMap, ,, state, ., propertyMap, ,, state, ., anonymousFunctionNameMap, ,]
[toString, (, ), ,, state, ., variableMap, ,, state, ., propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap, ,]
[), ,, state, ., variableMap, ,, state, ., propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap, ,, functionInformationMap, ,]
[state, ., variableMap, ,, state, ., propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap, ,, functionInformationMap, ,, sourceMap, ,]
[variableMap, ,, state, ., propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap, ,, functionInformationMap, ,, sourceMap, ,, externExports, ,]
[variableMap, ,, state, ., propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap, ,, functionInformationMap, ,, sourceMap, ,, externExports, ,]
[propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap, ,, functionInformationMap, ,, sourceMap, ,, externExports, ,, state, ., cssNames, ,]
[propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap, ,, functionInformationMap, ,, sourceMap, ,, externExports, ,, state, ., cssNames, ,]
[,, state, ., cssNames, ,, state, ., idGeneratorMap, ), ;, }, public, JSError, [, ], getMessages, (, ), {, return]
[], getMessages, (, ), {, return, getErrors, (, ), ;, }, public, JSError, [, ], getErrors, (, ), {, return]
[], getMessages, (, ), {, return, getErrors, (, ), ;, }, public, JSError, [, ], getErrors, (, ), {, return]
[(, ), {, return, errorManager, ., getErrors, (, ), ;, }, public, JSError, [, ], getWarnings, (, ), {, return]
[(, ), {, return, errorManager, ., getErrors, (, ), ;, }, public, JSError, [, ], getWarnings, (, ), {, return]
[(, ), {, return, errorManager, ., getWarnings, (, ), ;, }, @, Override, public, Node, getRoot, (, ), {, return]
[}, @, Override, public, Node, getRoot, (, ), {, return, externAndJsRoot, ;, }, private, int, nextUniqueNameId, (, ), {, return]
[}, @, Override, public, Node, getRoot, (, ), {, return, externAndJsRoot, ;, }, private, int, nextUniqueNameId, (, ), {, return]
[;, }, private, int, nextUniqueNameId, (, ), {, return, uniqueNameId, ++, ;, }, @, VisibleForTesting, void, resetUniqueNameId, (, ), {]
[private, int, nextUniqueNameId, (, ), {, return, uniqueNameId, ++, ;, }, @, VisibleForTesting, void, resetUniqueNameId, (, ), {, uniqueNameId, =]
[{, uniqueNameId, =, 0, ;, }, @, Override, Supplier, <, String, >, getUniqueNameIdSupplier, (, ), {, final, Compiler, self, =]
[0, ;, }, @, Override, Supplier, <, String, >, getUniqueNameIdSupplier, (, ), {, final, Compiler, self, =, this, ;, return]
[this, ;, return, new, Supplier, <, String, >, (, ), {, @, Override, public, String, get, (, ), {, return]
[this, ;, return, new, Supplier, <, String, >, (, ), {, @, Override, public, String, get, (, ), {, return]
[Supplier, <, String, >, (, ), {, @, Override, public, String, get, (, ), {, return, String, ., valueOf, (]
[Supplier, <, String, >, (, ), {, @, Override, public, String, get, (, ), {, return, String, ., valueOf, (]
[), ;, }, }, ;, }, @, Override, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, if, (]
[), ;, }, }, ;, }, @, Override, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, if, (]
[), ;, }, }, ;, }, @, Override, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, if, (]
[;, }, @, Override, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, if, (, options, ., ambiguateProperties, ||]
[;, }, @, Override, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, if, (, options, ., ambiguateProperties, ||]
[(, Node, n1, ,, Node, n2, ), {, if, (, options, ., ambiguateProperties, ||, options, ., disambiguateProperties, ), {, return]
[(, Node, n1, ,, Node, n2, ), {, if, (, options, ., ambiguateProperties, ||, options, ., disambiguateProperties, ), {, return]
[Node, n2, ), {, if, (, options, ., ambiguateProperties, ||, options, ., disambiguateProperties, ), {, return, n1, ., isEquivalentToTyped, (]
[., ambiguateProperties, ||, options, ., disambiguateProperties, ), {, return, n1, ., isEquivalentToTyped, (, n2, ), ;, }, else, {, return]
[., ambiguateProperties, ||, options, ., disambiguateProperties, ), {, return, n1, ., isEquivalentToTyped, (, n2, ), ;, }, else, {, return]
[., disambiguateProperties, ), {, return, n1, ., isEquivalentToTyped, (, n2, ), ;, }, else, {, return, n1, ., isEquivalentTo, (]
[n1, ., isEquivalentTo, (, n2, ), ;, }, }, @, Override, public, CompilerInput, getInput, (, InputId, id, ), {, return]
[n1, ., isEquivalentTo, (, n2, ), ;, }, }, @, Override, public, CompilerInput, getInput, (, InputId, id, ), {, return]
[n2, ), ;, }, }, @, Override, public, CompilerInput, getInput, (, InputId, id, ), {, return, inputsById, ., get, (]
[return, inputsById, ., get, (, id, ), ;, }, protected, void, removeExternInput, (, InputId, id, ), {, CompilerInput, input, =]
[., get, (, id, ), ;, }, protected, void, removeExternInput, (, InputId, id, ), {, CompilerInput, input, =, getInput, (]
[;, }, protected, void, removeExternInput, (, InputId, id, ), {, CompilerInput, input, =, getInput, (, id, ), ;, if, (]
[;, }, protected, void, removeExternInput, (, InputId, id, ), {, CompilerInput, input, =, getInput, (, id, ), ;, if, (]
[protected, void, removeExternInput, (, InputId, id, ), {, CompilerInput, input, =, getInput, (, id, ), ;, if, (, input, ==]
[), {, CompilerInput, input, =, getInput, (, id, ), ;, if, (, input, ==, null, ), {, return, ;, }]
[), {, CompilerInput, input, =, getInput, (, id, ), ;, if, (, input, ==, null, ), {, return, ;, }]
[=, getInput, (, id, ), ;, if, (, input, ==, null, ), {, return, ;, }, Preconditions, ., checkState, (]
[=, getInput, (, id, ), ;, if, (, input, ==, null, ), {, return, ;, }, Preconditions, ., checkState, (]
[if, (, input, ==, null, ), {, return, ;, }, Preconditions, ., checkState, (, input, ., isExtern, (, ), ,]
[input, ==, null, ), {, return, ;, }, Preconditions, ., checkState, (, input, ., isExtern, (, ), ,, "Not an extern input: %s", ,]
[input, ==, null, ), {, return, ;, }, Preconditions, ., checkState, (, input, ., isExtern, (, ), ,, "Not an extern input: %s", ,]
[}, Preconditions, ., checkState, (, input, ., isExtern, (, ), ,, "Not an extern input: %s", ,, input, ., getName, (, ), ), ;]
[}, Preconditions, ., checkState, (, input, ., isExtern, (, ), ,, "Not an extern input: %s", ,, input, ., getName, (, ), ), ;]
[(, input, ., isExtern, (, ), ,, "Not an extern input: %s", ,, input, ., getName, (, ), ), ;, inputsById, ., remove, (]
[isExtern, (, ), ,, "Not an extern input: %s", ,, input, ., getName, (, ), ), ;, inputsById, ., remove, (, id, ), ;]
[isExtern, (, ), ,, "Not an extern input: %s", ,, input, ., getName, (, ), ), ;, inputsById, ., remove, (, id, ), ;]
["Not an extern input: %s", ,, input, ., getName, (, ), ), ;, inputsById, ., remove, (, id, ), ;, externs, ., remove, (]
[), ), ;, inputsById, ., remove, (, id, ), ;, externs, ., remove, (, input, ), ;, Node, root, =]
[), ), ;, inputsById, ., remove, (, id, ), ;, externs, ., remove, (, input, ), ;, Node, root, =]
[., remove, (, id, ), ;, externs, ., remove, (, input, ), ;, Node, root, =, input, ., getAstRoot, (]
[;, externs, ., remove, (, input, ), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (]
[;, externs, ., remove, (, input, ), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (]
[., remove, (, input, ), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (, root, !=]
[input, ), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (, root, !=, null, ), {]
[input, ), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (, root, !=, null, ), {]
[., detachFromParent, (, ), ;, }, }, @, Override, public, CompilerInput, newExternInput, (, String, name, ), {, SourceAst, ast, =]
[), ;, }, }, @, Override, public, CompilerInput, newExternInput, (, String, name, ), {, SourceAst, ast, =, new, SyntheticAst, (]
[Override, public, CompilerInput, newExternInput, (, String, name, ), {, SourceAst, ast, =, new, SyntheticAst, (, name, ), ;, if, (]
[Override, public, CompilerInput, newExternInput, (, String, name, ), {, SourceAst, ast, =, new, SyntheticAst, (, name, ), ;, if, (]
[(, String, name, ), {, SourceAst, ast, =, new, SyntheticAst, (, name, ), ;, if, (, inputsById, ., containsKey, (]
[(, String, name, ), {, SourceAst, ast, =, new, SyntheticAst, (, name, ), ;, if, (, inputsById, ., containsKey, (]
[SyntheticAst, (, name, ), ;, if, (, inputsById, ., containsKey, (, ast, ., getInputId, (, ), ), ), {, throw]
[), ;, if, (, inputsById, ., containsKey, (, ast, ., getInputId, (, ), ), ), {, throw, new, IllegalArgumentException, (]
[), ;, if, (, inputsById, ., containsKey, (, ast, ., getInputId, (, ), ), ), {, throw, new, IllegalArgumentException, (]
[if, (, inputsById, ., containsKey, (, ast, ., getInputId, (, ), ), ), {, throw, new, IllegalArgumentException, (, "Conflicting externs name: ", +]
[., getInputId, (, ), ), ), {, throw, new, IllegalArgumentException, (, "Conflicting externs name: ", +, name, ), ;, }, CompilerInput, input, =]
[), ), ), {, throw, new, IllegalArgumentException, (, "Conflicting externs name: ", +, name, ), ;, }, CompilerInput, input, =, new, CompilerInput, (]
[), {, throw, new, IllegalArgumentException, (, "Conflicting externs name: ", +, name, ), ;, }, CompilerInput, input, =, new, CompilerInput, (, ast, ,]
[new, IllegalArgumentException, (, "Conflicting externs name: ", +, name, ), ;, }, CompilerInput, input, =, new, CompilerInput, (, ast, ,, true, ), ;]
[(, "Conflicting externs name: ", +, name, ), ;, }, CompilerInput, input, =, new, CompilerInput, (, ast, ,, true, ), ;, putCompilerInput, (]
[(, "Conflicting externs name: ", +, name, ), ;, }, CompilerInput, input, =, new, CompilerInput, (, ast, ,, true, ), ;, putCompilerInput, (]
[}, CompilerInput, input, =, new, CompilerInput, (, ast, ,, true, ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,]
[=, new, CompilerInput, (, ast, ,, true, ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;]
[=, new, CompilerInput, (, ast, ,, true, ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;]
[ast, ,, true, ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, externsRoot, ., addChildToFront, (]
[ast, ,, true, ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, externsRoot, ., addChildToFront, (]
[;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, externsRoot, ., addChildToFront, (, ast, ., getAstRoot, (]
[., getInputId, (, ), ,, input, ), ;, externsRoot, ., addChildToFront, (, ast, ., getAstRoot, (, this, ), ), ;]
[., getInputId, (, ), ,, input, ), ;, externsRoot, ., addChildToFront, (, ast, ., getAstRoot, (, this, ), ), ;]
[,, input, ), ;, externsRoot, ., addChildToFront, (, ast, ., getAstRoot, (, this, ), ), ;, externs, ., add, (]
[), ;, externsRoot, ., addChildToFront, (, ast, ., getAstRoot, (, this, ), ), ;, externs, ., add, (, 0, ,]
[addChildToFront, (, ast, ., getAstRoot, (, this, ), ), ;, externs, ., add, (, 0, ,, input, ), ;, return]
[0, ,, input, ), ;, return, input, ;, }, private, CompilerInput, putCompilerInput, (, InputId, id, ,, CompilerInput, input, ), {]
[0, ,, input, ), ;, return, input, ;, }, private, CompilerInput, putCompilerInput, (, InputId, id, ,, CompilerInput, input, ), {]
[;, return, input, ;, }, private, CompilerInput, putCompilerInput, (, InputId, id, ,, CompilerInput, input, ), {, input, ., setCompiler, (]
[}, private, CompilerInput, putCompilerInput, (, InputId, id, ,, CompilerInput, input, ), {, input, ., setCompiler, (, this, ), ;, return]
[}, private, CompilerInput, putCompilerInput, (, InputId, id, ,, CompilerInput, input, ), {, input, ., setCompiler, (, this, ), ;, return]
[(, InputId, id, ,, CompilerInput, input, ), {, input, ., setCompiler, (, this, ), ;, return, inputsById, ., put, (]
[id, ,, CompilerInput, input, ), {, input, ., setCompiler, (, this, ), ;, return, inputsById, ., put, (, id, ,]
[inputsById, ., put, (, id, ,, input, ), ;, }, void, addIncrementalSourceAst, (, JsAst, ast, ), {, InputId, id, =]
[inputsById, ., put, (, id, ,, input, ), ;, }, void, addIncrementalSourceAst, (, JsAst, ast, ), {, InputId, id, =]
[input, ), ;, }, void, addIncrementalSourceAst, (, JsAst, ast, ), {, InputId, id, =, ast, ., getInputId, (, ), ;]
[input, ), ;, }, void, addIncrementalSourceAst, (, JsAst, ast, ), {, InputId, id, =, ast, ., getInputId, (, ), ;]
[void, addIncrementalSourceAst, (, JsAst, ast, ), {, InputId, id, =, ast, ., getInputId, (, ), ;, Preconditions, ., checkState, (]
[void, addIncrementalSourceAst, (, JsAst, ast, ), {, InputId, id, =, ast, ., getInputId, (, ), ;, Preconditions, ., checkState, (]
[(, JsAst, ast, ), {, InputId, id, =, ast, ., getInputId, (, ), ;, Preconditions, ., checkState, (, getInput, (]
[), {, InputId, id, =, ast, ., getInputId, (, ), ;, Preconditions, ., checkState, (, getInput, (, id, ), ==]
[InputId, id, =, ast, ., getInputId, (, ), ;, Preconditions, ., checkState, (, getInput, (, id, ), ==, null, ,]
[=, ast, ., getInputId, (, ), ;, Preconditions, ., checkState, (, getInput, (, id, ), ==, null, ,, "Duplicate input %s", ,]
[=, ast, ., getInputId, (, ), ;, Preconditions, ., checkState, (, getInput, (, id, ), ==, null, ,, "Duplicate input %s", ,]
[Preconditions, ., checkState, (, getInput, (, id, ), ==, null, ,, "Duplicate input %s", ,, id, ., getIdName, (, ), ), ;]
[checkState, (, getInput, (, id, ), ==, null, ,, "Duplicate input %s", ,, id, ., getIdName, (, ), ), ;, putCompilerInput, (]
[getInput, (, id, ), ==, null, ,, "Duplicate input %s", ,, id, ., getIdName, (, ), ), ;, putCompilerInput, (, id, ,]
[), ==, null, ,, "Duplicate input %s", ,, id, ., getIdName, (, ), ), ;, putCompilerInput, (, id, ,, new, CompilerInput, (]
[id, ,, new, CompilerInput, (, ast, ), ), ;, }, boolean, replaceIncrementalSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =]
[new, CompilerInput, (, ast, ), ), ;, }, boolean, replaceIncrementalSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (]
[new, CompilerInput, (, ast, ), ), ;, }, boolean, replaceIncrementalSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (]
[}, boolean, replaceIncrementalSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, ), ), ;]
[}, boolean, replaceIncrementalSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, ), ), ;]
[JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, ), ), ;, Preconditions, ., checkNotNull, (]
[), {, CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, ), ), ;, Preconditions, ., checkNotNull, (, oldInput, ,]
[CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, ), ), ;, Preconditions, ., checkNotNull, (, oldInput, ,, "No input to replace: %s", ,]
[CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, ), ), ;, Preconditions, ., checkNotNull, (, oldInput, ,, "No input to replace: %s", ,]
[CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, ), ), ;, Preconditions, ., checkNotNull, (, oldInput, ,, "No input to replace: %s", ,]
[checkNotNull, (, oldInput, ,, "No input to replace: %s", ,, ast, ., getInputId, (, ), ., getIdName, (, ), ), ;, Node, newRoot, =]
[checkNotNull, (, oldInput, ,, "No input to replace: %s", ,, ast, ., getInputId, (, ), ., getIdName, (, ), ), ;, Node, newRoot, =]
["No input to replace: %s", ,, ast, ., getInputId, (, ), ., getIdName, (, ), ), ;, Node, newRoot, =, ast, ., getAstRoot, (]
[(, ), ., getIdName, (, ), ), ;, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (]
[(, ), ., getIdName, (, ), ), ;, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (]
[., getIdName, (, ), ), ;, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot, ==]
[), ;, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {, return]
[., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {, return, false, ;, }, Node, oldRoot, =]
[., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {, return, false, ;, }, Node, oldRoot, =]
[), ;, if, (, newRoot, ==, null, ), {, return, false, ;, }, Node, oldRoot, =, oldInput, ., getAstRoot, (]
[==, null, ), {, return, false, ;, }, Node, oldRoot, =, oldInput, ., getAstRoot, (, this, ), ;, if, (]
[==, null, ), {, return, false, ;, }, Node, oldRoot, =, oldInput, ., getAstRoot, (, this, ), ;, if, (]
[), {, return, false, ;, }, Node, oldRoot, =, oldInput, ., getAstRoot, (, this, ), ;, if, (, oldRoot, !=]
[false, ;, }, Node, oldRoot, =, oldInput, ., getAstRoot, (, this, ), ;, if, (, oldRoot, !=, null, ), {]
[false, ;, }, Node, oldRoot, =, oldInput, ., getAstRoot, (, this, ), ;, if, (, oldRoot, !=, null, ), {]
[false, ;, }, Node, oldRoot, =, oldInput, ., getAstRoot, (, this, ), ;, if, (, oldRoot, !=, null, ), {]
[getAstRoot, (, this, ), ;, if, (, oldRoot, !=, null, ), {, oldRoot, ., getParent, (, ), ., replaceChild, (]
[this, ), ;, if, (, oldRoot, !=, null, ), {, oldRoot, ., getParent, (, ), ., replaceChild, (, oldRoot, ,]
[!=, null, ), {, oldRoot, ., getParent, (, ), ., replaceChild, (, oldRoot, ,, newRoot, ), ;, }, else, {]
[!=, null, ), {, oldRoot, ., getParent, (, ), ., replaceChild, (, oldRoot, ,, newRoot, ), ;, }, else, {]
[!=, null, ), {, oldRoot, ., getParent, (, ), ., replaceChild, (, oldRoot, ,, newRoot, ), ;, }, else, {]
[replaceChild, (, oldRoot, ,, newRoot, ), ;, }, else, {, getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (]
[}, else, {, getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, }, CompilerInput, newInput, =]
[getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, }, CompilerInput, newInput, =, new, CompilerInput, (]
[., getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, }, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;]
[(, ), ., addChildToBack, (, newRoot, ), ;, }, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, putCompilerInput, (]
[(, ), ., addChildToBack, (, newRoot, ), ;, }, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, putCompilerInput, (]
[), ;, }, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, putCompilerInput, (, ast, ., getInputId, (, ), ,]
[new, CompilerInput, (, ast, ), ;, putCompilerInput, (, ast, ., getInputId, (, ), ,, newInput, ), ;, JSModule, module, =]
[new, CompilerInput, (, ast, ), ;, putCompilerInput, (, ast, ., getInputId, (, ), ,, newInput, ), ;, JSModule, module, =]
[ast, ., getInputId, (, ), ,, newInput, ), ;, JSModule, module, =, oldInput, ., getModule, (, ), ;, if, (]
[ast, ., getInputId, (, ), ,, newInput, ), ;, JSModule, module, =, oldInput, ., getModule, (, ), ;, if, (]
[getInputId, (, ), ,, newInput, ), ;, JSModule, module, =, oldInput, ., getModule, (, ), ;, if, (, module, !=]
[,, newInput, ), ;, JSModule, module, =, oldInput, ., getModule, (, ), ;, if, (, module, !=, null, ), {]
[,, newInput, ), ;, JSModule, module, =, oldInput, ., getModule, (, ), ;, if, (, module, !=, null, ), {]
[JSModule, module, =, oldInput, ., getModule, (, ), ;, if, (, module, !=, null, ), {, module, ., addAfter, (]
[=, oldInput, ., getModule, (, ), ;, if, (, module, !=, null, ), {, module, ., addAfter, (, newInput, ,]
[getModule, (, ), ;, if, (, module, !=, null, ), {, module, ., addAfter, (, newInput, ,, oldInput, ), ;]
[getModule, (, ), ;, if, (, module, !=, null, ), {, module, ., addAfter, (, newInput, ,, oldInput, ), ;]
[if, (, module, !=, null, ), {, module, ., addAfter, (, newInput, ,, oldInput, ), ;, module, ., remove, (]
[null, ), {, module, ., addAfter, (, newInput, ,, oldInput, ), ;, module, ., remove, (, oldInput, ), ;, }]
[null, ), {, module, ., addAfter, (, newInput, ,, oldInput, ), ;, module, ., remove, (, oldInput, ), ;, }]
[., addAfter, (, newInput, ,, oldInput, ), ;, module, ., remove, (, oldInput, ), ;, }, Preconditions, ., checkState, (]
[., addAfter, (, newInput, ,, oldInput, ), ;, module, ., remove, (, oldInput, ), ;, }, Preconditions, ., checkState, (]
[., addAfter, (, newInput, ,, oldInput, ), ;, module, ., remove, (, oldInput, ), ;, }, Preconditions, ., checkState, (]
[module, ., remove, (, oldInput, ), ;, }, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (]
[module, ., remove, (, oldInput, ), ;, }, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (]
[(, newInput, ., getInputId, (, ), ., equals, (, oldInput, ., getInputId, (, ), ), ), ;, InputId, inputIdOnAst, =]
[(, newInput, ., getInputId, (, ), ., equals, (, oldInput, ., getInputId, (, ), ), ), ;, InputId, inputIdOnAst, =]
[(, newInput, ., getInputId, (, ), ., equals, (, oldInput, ., getInputId, (, ), ), ), ;, InputId, inputIdOnAst, =]
[(, ), ., equals, (, oldInput, ., getInputId, (, ), ), ), ;, InputId, inputIdOnAst, =, newInput, ., getAstRoot, (]
[getInputId, (, ), ), ), ;, InputId, inputIdOnAst, =, newInput, ., getAstRoot, (, this, ), ., getInputId, (, ), ;]
[getInputId, (, ), ), ), ;, InputId, inputIdOnAst, =, newInput, ., getAstRoot, (, this, ), ., getInputId, (, ), ;]
[), ;, InputId, inputIdOnAst, =, newInput, ., getAstRoot, (, this, ), ., getInputId, (, ), ;, Preconditions, ., checkState, (]
[), ;, InputId, inputIdOnAst, =, newInput, ., getAstRoot, (, this, ), ., getInputId, (, ), ;, Preconditions, ., checkState, (]
[), ;, InputId, inputIdOnAst, =, newInput, ., getAstRoot, (, this, ), ., getInputId, (, ), ;, Preconditions, ., checkState, (]
[(, this, ), ., getInputId, (, ), ;, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (]
[getInputId, (, ), ;, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (, inputIdOnAst, ), ), ;]
[getInputId, (, ), ;, Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (, inputIdOnAst, ), ), ;]
[Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (, inputIdOnAst, ), ), ;, inputs, ., remove, (]
[newInput, ., getInputId, (, ), ., equals, (, inputIdOnAst, ), ), ;, inputs, ., remove, (, oldInput, ), ;, return]
[., remove, (, oldInput, ), ;, return, true, ;, }, boolean, addNewSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =]
[(, oldInput, ), ;, return, true, ;, }, boolean, addNewSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (]
[(, oldInput, ), ;, return, true, ;, }, boolean, addNewSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (]
[addNewSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, ), ), ;, if, (]
[addNewSourceAst, (, JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, ), ), ;, if, (]
[JsAst, ast, ), {, CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, ), ), ;, if, (, oldInput, !=]
[CompilerInput, oldInput, =, getInput, (, ast, ., getInputId, (, ), ), ;, if, (, oldInput, !=, null, ), {, throw]
[getInput, (, ast, ., getInputId, (, ), ), ;, if, (, oldInput, !=, null, ), {, throw, new, IllegalStateException, (]
[getInput, (, ast, ., getInputId, (, ), ), ;, if, (, oldInput, !=, null, ), {, throw, new, IllegalStateException, (]
[ast, ., getInputId, (, ), ), ;, if, (, oldInput, !=, null, ), {, throw, new, IllegalStateException, (, "Input already exists: ", +]
[ast, ., getInputId, (, ), ), ;, if, (, oldInput, !=, null, ), {, throw, new, IllegalStateException, (, "Input already exists: ", +]
[ast, ., getInputId, (, ), ), ;, if, (, oldInput, !=, null, ), {, throw, new, IllegalStateException, (, "Input already exists: ", +]
[new, IllegalStateException, (, "Input already exists: ", +, ast, ., getInputId, (, ), ., getIdName, (, ), ), ;, }, Node, newRoot, =]
[new, IllegalStateException, (, "Input already exists: ", +, ast, ., getInputId, (, ), ., getIdName, (, ), ), ;, }, Node, newRoot, =]
[+, ast, ., getInputId, (, ), ., getIdName, (, ), ), ;, }, Node, newRoot, =, ast, ., getAstRoot, (]
[), ., getIdName, (, ), ), ;, }, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (]
[), ., getIdName, (, ), ), ;, }, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (]
[getIdName, (, ), ), ;, }, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot, ==]
[;, }, Node, newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {, return]
[newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {, return, false, ;, }]
[newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {, return, false, ;, }]
[newRoot, =, ast, ., getAstRoot, (, this, ), ;, if, (, newRoot, ==, null, ), {, return, false, ;, }]
[(, newRoot, ==, null, ), {, return, false, ;, }, getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (]
[return, false, ;, }, getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, CompilerInput, newInput, =]
[}, getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, CompilerInput, newInput, =, new, CompilerInput, (]
[getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, if, (]
[getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, if, (]
[getLastChild, (, ), ., addChildToBack, (, newRoot, ), ;, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, if, (]
[), ., addChildToBack, (, newRoot, ), ;, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, if, (, moduleGraph, ==]
[addChildToBack, (, newRoot, ), ;, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, if, (, moduleGraph, ==, null, &&]
[(, newRoot, ), ;, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, if, (, moduleGraph, ==, null, &&, !]
[(, newRoot, ), ;, CompilerInput, newInput, =, new, CompilerInput, (, ast, ), ;, if, (, moduleGraph, ==, null, &&, !]
[new, CompilerInput, (, ast, ), ;, if, (, moduleGraph, ==, null, &&, !, modules, ., isEmpty, (, ), ), {]
[new, CompilerInput, (, ast, ), ;, if, (, moduleGraph, ==, null, &&, !, modules, ., isEmpty, (, ), ), {]
[new, CompilerInput, (, ast, ), ;, if, (, moduleGraph, ==, null, &&, !, modules, ., isEmpty, (, ), ), {]
[), ;, if, (, moduleGraph, ==, null, &&, !, modules, ., isEmpty, (, ), ), {, modules, ., get, (]
[==, null, &&, !, modules, ., isEmpty, (, ), ), {, modules, ., get, (, 0, ), ., add, (]
[modules, ., isEmpty, (, ), ), {, modules, ., get, (, 0, ), ., add, (, newInput, ), ;, }]
[isEmpty, (, ), ), {, modules, ., get, (, 0, ), ., add, (, newInput, ), ;, }, putCompilerInput, (]
[isEmpty, (, ), ), {, modules, ., get, (, 0, ), ., add, (, newInput, ), ;, }, putCompilerInput, (]
[., get, (, 0, ), ., add, (, newInput, ), ;, }, putCompilerInput, (, ast, ., getInputId, (, ), ,]
[), ., add, (, newInput, ), ;, }, putCompilerInput, (, ast, ., getInputId, (, ), ,, newInput, ), ;, return]
[., getInputId, (, ), ,, newInput, ), ;, return, true, ;, }, @, Override, JSModuleGraph, getModuleGraph, (, ), {, return]
[true, ;, }, @, Override, JSModuleGraph, getModuleGraph, (, ), {, return, moduleGraph, ;, }, JSModuleGraph, getDegenerateModuleGraph, (, ), {, return]
[true, ;, }, @, Override, JSModuleGraph, getModuleGraph, (, ), {, return, moduleGraph, ;, }, JSModuleGraph, getDegenerateModuleGraph, (, ), {, return]
[true, ;, }, @, Override, JSModuleGraph, getModuleGraph, (, ), {, return, moduleGraph, ;, }, JSModuleGraph, getDegenerateModuleGraph, (, ), {, return]
[}, @, Override, JSModuleGraph, getModuleGraph, (, ), {, return, moduleGraph, ;, }, JSModuleGraph, getDegenerateModuleGraph, (, ), {, return, moduleGraph, ==]
[Override, JSModuleGraph, getModuleGraph, (, ), {, return, moduleGraph, ;, }, JSModuleGraph, getDegenerateModuleGraph, (, ), {, return, moduleGraph, ==, null, ?]
[(, ), {, return, moduleGraph, ;, }, JSModuleGraph, getDegenerateModuleGraph, (, ), {, return, moduleGraph, ==, null, ?, new, JSModuleGraph, (]
[return, moduleGraph, ;, }, JSModuleGraph, getDegenerateModuleGraph, (, ), {, return, moduleGraph, ==, null, ?, new, JSModuleGraph, (, modules, ), :]
[?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (]
[?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (]
[JSModuleGraph, (, modules, ), :, moduleGraph, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (, typeRegistry, ==]
[), :, moduleGraph, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (, typeRegistry, ==, null, ), {]
[moduleGraph, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (, typeRegistry, ==, null, ), {, typeRegistry, =]
[@, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (, typeRegistry, ==, null, ), {, typeRegistry, =, new, JSTypeRegistry, (]
[public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (, typeRegistry, ==, null, ), {, typeRegistry, =, new, JSTypeRegistry, (, oldErrorReporter, ,]
[public, JSTypeRegistry, getTypeRegistry, (, ), {, if, (, typeRegistry, ==, null, ), {, typeRegistry, =, new, JSTypeRegistry, (, oldErrorReporter, ,]
[(, typeRegistry, ==, null, ), {, typeRegistry, =, new, JSTypeRegistry, (, oldErrorReporter, ,, options, ., looseTypes, ), ;, }, return]
[,, options, ., looseTypes, ), ;, }, return, typeRegistry, ;, }, @, Override, public, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return]
[,, options, ., looseTypes, ), ;, }, return, typeRegistry, ;, }, @, Override, public, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return]
[;, }, @, Override, public, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, getPassConfig, (, ), ., getTypedScopeCreator, (, ), ;, }]
[Override, public, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, getPassConfig, (, ), ., getTypedScopeCreator, (, ), ;, }, @, SuppressWarnings, (]
[), ., getTypedScopeCreator, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), DefaultPassConfig, ensureDefaultPassConfig, (, ), {, PassConfig, passes, =]
[), ., getTypedScopeCreator, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), DefaultPassConfig, ensureDefaultPassConfig, (, ), {, PassConfig, passes, =]
[SuppressWarnings, (, "unchecked", ), DefaultPassConfig, ensureDefaultPassConfig, (, ), {, PassConfig, passes, =, getPassConfig, (, ), ., getBasePassConfig, (, ), ;]
[SuppressWarnings, (, "unchecked", ), DefaultPassConfig, ensureDefaultPassConfig, (, ), {, PassConfig, passes, =, getPassConfig, (, ), ., getBasePassConfig, (, ), ;]
[DefaultPassConfig, ensureDefaultPassConfig, (, ), {, PassConfig, passes, =, getPassConfig, (, ), ., getBasePassConfig, (, ), ;, Preconditions, ., checkState, (]
[DefaultPassConfig, ensureDefaultPassConfig, (, ), {, PassConfig, passes, =, getPassConfig, (, ), ., getBasePassConfig, (, ), ;, Preconditions, ., checkState, (]
[{, PassConfig, passes, =, getPassConfig, (, ), ., getBasePassConfig, (, ), ;, Preconditions, ., checkState, (, passes, instanceof, DefaultPassConfig, ,]
[getPassConfig, (, ), ., getBasePassConfig, (, ), ;, Preconditions, ., checkState, (, passes, instanceof, DefaultPassConfig, ,, "PassConfigs must eventually delegate to the DefaultPassConfig", ), ;, return]
[., getBasePassConfig, (, ), ;, Preconditions, ., checkState, (, passes, instanceof, DefaultPassConfig, ,, "PassConfigs must eventually delegate to the DefaultPassConfig", ), ;, return, (, DefaultPassConfig, )]
[,, "PassConfigs must eventually delegate to the DefaultPassConfig", ), ;, return, (, DefaultPassConfig, ), passes, ;, }, public, SymbolTable, buildKnownSymbolTable, (, ), {, SymbolTable, symbolTable, =]
[;, return, (, DefaultPassConfig, ), passes, ;, }, public, SymbolTable, buildKnownSymbolTable, (, ), {, SymbolTable, symbolTable, =, new, SymbolTable, (]
[public, SymbolTable, buildKnownSymbolTable, (, ), {, SymbolTable, symbolTable, =, new, SymbolTable, (, getTypeRegistry, (, ), ), ;, MemoizedScopeCreator, typedScopeCreator, =]
[SymbolTable, symbolTable, =, new, SymbolTable, (, getTypeRegistry, (, ), ), ;, MemoizedScopeCreator, typedScopeCreator, =, getTypedScopeCreator, (, ), ;, if, (]
[SymbolTable, symbolTable, =, new, SymbolTable, (, getTypeRegistry, (, ), ), ;, MemoizedScopeCreator, typedScopeCreator, =, getTypedScopeCreator, (, ), ;, if, (]
[=, new, SymbolTable, (, getTypeRegistry, (, ), ), ;, MemoizedScopeCreator, typedScopeCreator, =, getTypedScopeCreator, (, ), ;, if, (, typedScopeCreator, !=]
[(, getTypeRegistry, (, ), ), ;, MemoizedScopeCreator, typedScopeCreator, =, getTypedScopeCreator, (, ), ;, if, (, typedScopeCreator, !=, null, ), {]
[(, getTypeRegistry, (, ), ), ;, MemoizedScopeCreator, typedScopeCreator, =, getTypedScopeCreator, (, ), ;, if, (, typedScopeCreator, !=, null, ), {]
[), ;, MemoizedScopeCreator, typedScopeCreator, =, getTypedScopeCreator, (, ), ;, if, (, typedScopeCreator, !=, null, ), {, symbolTable, ., addScopes, (]
[), ;, MemoizedScopeCreator, typedScopeCreator, =, getTypedScopeCreator, (, ), ;, if, (, typedScopeCreator, !=, null, ), {, symbolTable, ., addScopes, (]
[), ;, if, (, typedScopeCreator, !=, null, ), {, symbolTable, ., addScopes, (, typedScopeCreator, ., getAllMemoizedScopes, (, ), ), ;]
[), ;, if, (, typedScopeCreator, !=, null, ), {, symbolTable, ., addScopes, (, typedScopeCreator, ., getAllMemoizedScopes, (, ), ), ;]
[typedScopeCreator, !=, null, ), {, symbolTable, ., addScopes, (, typedScopeCreator, ., getAllMemoizedScopes, (, ), ), ;, symbolTable, ., addSymbolsFrom, (]
[., addScopes, (, typedScopeCreator, ., getAllMemoizedScopes, (, ), ), ;, symbolTable, ., addSymbolsFrom, (, typedScopeCreator, ), ;, }, else, {]
[., addScopes, (, typedScopeCreator, ., getAllMemoizedScopes, (, ), ), ;, symbolTable, ., addSymbolsFrom, (, typedScopeCreator, ), ;, }, else, {]
[., getAllMemoizedScopes, (, ), ), ;, symbolTable, ., addSymbolsFrom, (, typedScopeCreator, ), ;, }, else, {, symbolTable, ., findScopes, (]
[(, ), ), ;, symbolTable, ., addSymbolsFrom, (, typedScopeCreator, ), ;, }, else, {, symbolTable, ., findScopes, (, this, ,]
[), ;, symbolTable, ., addSymbolsFrom, (, typedScopeCreator, ), ;, }, else, {, symbolTable, ., findScopes, (, this, ,, externsRoot, ,]
[), ;, }, else, {, symbolTable, ., findScopes, (, this, ,, externsRoot, ,, jsRoot, ), ;, }, GlobalNamespace, globalNamespace, =]
[), ;, }, else, {, symbolTable, ., findScopes, (, this, ,, externsRoot, ,, jsRoot, ), ;, }, GlobalNamespace, globalNamespace, =]
[,, externsRoot, ,, jsRoot, ), ;, }, GlobalNamespace, globalNamespace, =, ensureDefaultPassConfig, (, ), ., getGlobalNamespace, (, ), ;, if, (]
[,, externsRoot, ,, jsRoot, ), ;, }, GlobalNamespace, globalNamespace, =, ensureDefaultPassConfig, (, ), ., getGlobalNamespace, (, ), ;, if, (]
[,, jsRoot, ), ;, }, GlobalNamespace, globalNamespace, =, ensureDefaultPassConfig, (, ), ., getGlobalNamespace, (, ), ;, if, (, globalNamespace, !=]
[;, }, GlobalNamespace, globalNamespace, =, ensureDefaultPassConfig, (, ), ., getGlobalNamespace, (, ), ;, if, (, globalNamespace, !=, null, ), {]
[;, }, GlobalNamespace, globalNamespace, =, ensureDefaultPassConfig, (, ), ., getGlobalNamespace, (, ), ;, if, (, globalNamespace, !=, null, ), {]
[=, ensureDefaultPassConfig, (, ), ., getGlobalNamespace, (, ), ;, if, (, globalNamespace, !=, null, ), {, symbolTable, ., addSymbolsFrom, (]
[), ;, if, (, globalNamespace, !=, null, ), {, symbolTable, ., addSymbolsFrom, (, globalNamespace, ), ;, }, ReferenceCollectingCallback, refCollector, =]
[(, globalNamespace, !=, null, ), {, symbolTable, ., addSymbolsFrom, (, globalNamespace, ), ;, }, ReferenceCollectingCallback, refCollector, =, new, ReferenceCollectingCallback, (]
[!=, null, ), {, symbolTable, ., addSymbolsFrom, (, globalNamespace, ), ;, }, ReferenceCollectingCallback, refCollector, =, new, ReferenceCollectingCallback, (, this, ,]
[!=, null, ), {, symbolTable, ., addSymbolsFrom, (, globalNamespace, ), ;, }, ReferenceCollectingCallback, refCollector, =, new, ReferenceCollectingCallback, (, this, ,]
[., addSymbolsFrom, (, globalNamespace, ), ;, }, ReferenceCollectingCallback, refCollector, =, new, ReferenceCollectingCallback, (, this, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;]
[., addSymbolsFrom, (, globalNamespace, ), ;, }, ReferenceCollectingCallback, refCollector, =, new, ReferenceCollectingCallback, (, this, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;]
[), ;, }, ReferenceCollectingCallback, refCollector, =, new, ReferenceCollectingCallback, (, this, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (]
[}, ReferenceCollectingCallback, refCollector, =, new, ReferenceCollectingCallback, (, this, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, this, ,]
[new, ReferenceCollectingCallback, (, this, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, this, ,, getRoot, (, ), ,]
[this, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, this, ,, getRoot, (, ), ,, refCollector, ), ;]
[this, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, this, ,, getRoot, (, ), ,, refCollector, ), ;]
[DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, this, ,, getRoot, (, ), ,, refCollector, ), ;, symbolTable, ., addSymbolsFrom, (]
[(, this, ,, getRoot, (, ), ,, refCollector, ), ;, symbolTable, ., addSymbolsFrom, (, refCollector, ), ;, PreprocessorSymbolTable, preprocessorSymbolTable, =]
[(, this, ,, getRoot, (, ), ,, refCollector, ), ;, symbolTable, ., addSymbolsFrom, (, refCollector, ), ;, PreprocessorSymbolTable, preprocessorSymbolTable, =]
[symbolTable, ., addSymbolsFrom, (, refCollector, ), ;, PreprocessorSymbolTable, preprocessorSymbolTable, =, ensureDefaultPassConfig, (, ), ., getPreprocessorSymbolTable, (, ), ;, if, (]
[symbolTable, ., addSymbolsFrom, (, refCollector, ), ;, PreprocessorSymbolTable, preprocessorSymbolTable, =, ensureDefaultPassConfig, (, ), ., getPreprocessorSymbolTable, (, ), ;, if, (]
[addSymbolsFrom, (, refCollector, ), ;, PreprocessorSymbolTable, preprocessorSymbolTable, =, ensureDefaultPassConfig, (, ), ., getPreprocessorSymbolTable, (, ), ;, if, (, preprocessorSymbolTable, !=]
[), ;, PreprocessorSymbolTable, preprocessorSymbolTable, =, ensureDefaultPassConfig, (, ), ., getPreprocessorSymbolTable, (, ), ;, if, (, preprocessorSymbolTable, !=, null, ), {]
[), ;, PreprocessorSymbolTable, preprocessorSymbolTable, =, ensureDefaultPassConfig, (, ), ., getPreprocessorSymbolTable, (, ), ;, if, (, preprocessorSymbolTable, !=, null, ), {]
[=, ensureDefaultPassConfig, (, ), ., getPreprocessorSymbolTable, (, ), ;, if, (, preprocessorSymbolTable, !=, null, ), {, symbolTable, ., addSymbolsFrom, (]
[., getPreprocessorSymbolTable, (, ), ;, if, (, preprocessorSymbolTable, !=, null, ), {, symbolTable, ., addSymbolsFrom, (, preprocessorSymbolTable, ), ;, }]
[., getPreprocessorSymbolTable, (, ), ;, if, (, preprocessorSymbolTable, !=, null, ), {, symbolTable, ., addSymbolsFrom, (, preprocessorSymbolTable, ), ;, }]
[(, preprocessorSymbolTable, !=, null, ), {, symbolTable, ., addSymbolsFrom, (, preprocessorSymbolTable, ), ;, }, symbolTable, ., fillNamespaceReferences, (, ), ;]
[(, preprocessorSymbolTable, !=, null, ), {, symbolTable, ., addSymbolsFrom, (, preprocessorSymbolTable, ), ;, }, symbolTable, ., fillNamespaceReferences, (, ), ;]
[symbolTable, ., addSymbolsFrom, (, preprocessorSymbolTable, ), ;, }, symbolTable, ., fillNamespaceReferences, (, ), ;, symbolTable, ., fillPropertyScopes, (, ), ;]
[symbolTable, ., addSymbolsFrom, (, preprocessorSymbolTable, ), ;, }, symbolTable, ., fillNamespaceReferences, (, ), ;, symbolTable, ., fillPropertyScopes, (, ), ;]
[preprocessorSymbolTable, ), ;, }, symbolTable, ., fillNamespaceReferences, (, ), ;, symbolTable, ., fillPropertyScopes, (, ), ;, symbolTable, ., fillThisReferences, (]
[;, }, symbolTable, ., fillNamespaceReferences, (, ), ;, symbolTable, ., fillPropertyScopes, (, ), ;, symbolTable, ., fillThisReferences, (, this, ,]
[symbolTable, ., fillNamespaceReferences, (, ), ;, symbolTable, ., fillPropertyScopes, (, ), ;, symbolTable, ., fillThisReferences, (, this, ,, externsRoot, ,]
[(, ), ;, symbolTable, ., fillPropertyScopes, (, ), ;, symbolTable, ., fillThisReferences, (, this, ,, externsRoot, ,, jsRoot, ), ;]
[(, ), ;, symbolTable, ., fillPropertyScopes, (, ), ;, symbolTable, ., fillThisReferences, (, this, ,, externsRoot, ,, jsRoot, ), ;]
[., fillPropertyScopes, (, ), ;, symbolTable, ., fillThisReferences, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillPropertySymbols, (]
[(, ), ;, symbolTable, ., fillThisReferences, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillPropertySymbols, (, this, ,]
[;, symbolTable, ., fillThisReferences, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillPropertySymbols, (, this, ,, externsRoot, ,]
[fillThisReferences, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillPropertySymbols, (, this, ,, externsRoot, ,, jsRoot, ), ;]
[fillThisReferences, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillPropertySymbols, (, this, ,, externsRoot, ,, jsRoot, ), ;]
[externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillPropertySymbols, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillJSDocInfo, (]
[jsRoot, ), ;, symbolTable, ., fillPropertySymbols, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillJSDocInfo, (, this, ,]
[;, symbolTable, ., fillPropertySymbols, (, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillJSDocInfo, (, this, ,, externsRoot, ,]
[(, this, ,, externsRoot, ,, jsRoot, ), ;, symbolTable, ., fillJSDocInfo, (, this, ,, externsRoot, ,, jsRoot, ), ;, return]
[this, ,, externsRoot, ,, jsRoot, ), ;, return, symbolTable, ;, }, @, Override, public, Scope, getTopScope, (, ), {, return]
[this, ,, externsRoot, ,, jsRoot, ), ;, return, symbolTable, ;, }, @, Override, public, Scope, getTopScope, (, ), {, return]
[return, getPassConfig, (, ), ., getTopScope, (, ), ;, }, @, Override, public, ReverseAbstractInterpreter, getReverseAbstractInterpreter, (, ), {, if, (]
[return, getPassConfig, (, ), ., getTopScope, (, ), ;, }, @, Override, public, ReverseAbstractInterpreter, getReverseAbstractInterpreter, (, ), {, if, (]
[(, ), ., getTopScope, (, ), ;, }, @, Override, public, ReverseAbstractInterpreter, getReverseAbstractInterpreter, (, ), {, if, (, abstractInterpreter, ==]
[;, }, @, Override, public, ReverseAbstractInterpreter, getReverseAbstractInterpreter, (, ), {, if, (, abstractInterpreter, ==, null, ), {, ChainableReverseAbstractInterpreter, interpreter, =]
[Override, public, ReverseAbstractInterpreter, getReverseAbstractInterpreter, (, ), {, if, (, abstractInterpreter, ==, null, ), {, ChainableReverseAbstractInterpreter, interpreter, =, new, SemanticReverseAbstractInterpreter, (]
[(, ), {, if, (, abstractInterpreter, ==, null, ), {, ChainableReverseAbstractInterpreter, interpreter, =, new, SemanticReverseAbstractInterpreter, (, getCodingConvention, (, ), ,]
[null, ), {, ChainableReverseAbstractInterpreter, interpreter, =, new, SemanticReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ;, if, (]
[null, ), {, ChainableReverseAbstractInterpreter, interpreter, =, new, SemanticReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ;, if, (]
[=, new, SemanticReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ;, if, (, options, ., closurePass, ), {]
[SemanticReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ;, if, (, options, ., closurePass, ), {, interpreter, =]
[SemanticReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ;, if, (, options, ., closurePass, ), {, interpreter, =]
[SemanticReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ;, if, (, options, ., closurePass, ), {, interpreter, =]
[(, ), ,, getTypeRegistry, (, ), ), ;, if, (, options, ., closurePass, ), {, interpreter, =, new, ClosureReverseAbstractInterpreter, (]
[(, ), ), ;, if, (, options, ., closurePass, ), {, interpreter, =, new, ClosureReverseAbstractInterpreter, (, getCodingConvention, (, ), ,]
[., closurePass, ), {, interpreter, =, new, ClosureReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ., append, (]
[(, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ., append, (, interpreter, ), ., getFirst, (, ), ;, }]
[(, ), ,, getTypeRegistry, (, ), ), ., append, (, interpreter, ), ., getFirst, (, ), ;, }, abstractInterpreter, =]
[(, ), ), ., append, (, interpreter, ), ., getFirst, (, ), ;, }, abstractInterpreter, =, interpreter, ;, }, return]
[;, }, abstractInterpreter, =, interpreter, ;, }, return, abstractInterpreter, ;, }, @, Override, TypeValidator, getTypeValidator, (, ), {, if, (]
[;, }, abstractInterpreter, =, interpreter, ;, }, return, abstractInterpreter, ;, }, @, Override, TypeValidator, getTypeValidator, (, ), {, if, (]
[abstractInterpreter, =, interpreter, ;, }, return, abstractInterpreter, ;, }, @, Override, TypeValidator, getTypeValidator, (, ), {, if, (, typeValidator, ==]
[;, }, return, abstractInterpreter, ;, }, @, Override, TypeValidator, getTypeValidator, (, ), {, if, (, typeValidator, ==, null, ), {]
[return, abstractInterpreter, ;, }, @, Override, TypeValidator, getTypeValidator, (, ), {, if, (, typeValidator, ==, null, ), {, typeValidator, =]
[}, @, Override, TypeValidator, getTypeValidator, (, ), {, if, (, typeValidator, ==, null, ), {, typeValidator, =, new, TypeValidator, (]
[(, ), {, if, (, typeValidator, ==, null, ), {, typeValidator, =, new, TypeValidator, (, this, ), ;, }, return]
[=, new, TypeValidator, (, this, ), ;, }, return, typeValidator, ;, }, Node, parseInputs, (, ), {, boolean, devMode, =]
[=, new, TypeValidator, (, this, ), ;, }, return, typeValidator, ;, }, Node, parseInputs, (, ), {, boolean, devMode, =]
[=, new, TypeValidator, (, this, ), ;, }, return, typeValidator, ;, }, Node, parseInputs, (, ), {, boolean, devMode, =]
[this, ), ;, }, return, typeValidator, ;, }, Node, parseInputs, (, ), {, boolean, devMode, =, options, ., devMode, !=]
[this, ), ;, }, return, typeValidator, ;, }, Node, parseInputs, (, ), {, boolean, devMode, =, options, ., devMode, !=]
[;, }, Node, parseInputs, (, ), {, boolean, devMode, =, options, ., devMode, !=, DevMode, ., OFF, ;, if, (]
[;, }, Node, parseInputs, (, ), {, boolean, devMode, =, options, ., devMode, !=, DevMode, ., OFF, ;, if, (]
[Node, parseInputs, (, ), {, boolean, devMode, =, options, ., devMode, !=, DevMode, ., OFF, ;, if, (, externsRoot, !=]
[), {, boolean, devMode, =, options, ., devMode, !=, DevMode, ., OFF, ;, if, (, externsRoot, !=, null, ), {]
[), {, boolean, devMode, =, options, ., devMode, !=, DevMode, ., OFF, ;, if, (, externsRoot, !=, null, ), {]
[DevMode, ., OFF, ;, if, (, externsRoot, !=, null, ), {, externsRoot, ., detachChildren, (, ), ;, }, if, (]
[DevMode, ., OFF, ;, if, (, externsRoot, !=, null, ), {, externsRoot, ., detachChildren, (, ), ;, }, if, (]
[OFF, ;, if, (, externsRoot, !=, null, ), {, externsRoot, ., detachChildren, (, ), ;, }, if, (, jsRoot, !=]
[(, externsRoot, !=, null, ), {, externsRoot, ., detachChildren, (, ), ;, }, if, (, jsRoot, !=, null, ), {]
[(, externsRoot, !=, null, ), {, externsRoot, ., detachChildren, (, ), ;, }, if, (, jsRoot, !=, null, ), {]
[., detachChildren, (, ), ;, }, if, (, jsRoot, !=, null, ), {, jsRoot, ., detachChildren, (, ), ;, }]
[(, ), ;, }, if, (, jsRoot, !=, null, ), {, jsRoot, ., detachChildren, (, ), ;, }, jsRoot, =]
[(, ), ;, }, if, (, jsRoot, !=, null, ), {, jsRoot, ., detachChildren, (, ), ;, }, jsRoot, =]
[jsRoot, !=, null, ), {, jsRoot, ., detachChildren, (, ), ;, }, jsRoot, =, IR, ., block, (, ), ;]
[jsRoot, !=, null, ), {, jsRoot, ., detachChildren, (, ), ;, }, jsRoot, =, IR, ., block, (, ), ;]
[{, jsRoot, ., detachChildren, (, ), ;, }, jsRoot, =, IR, ., block, (, ), ;, jsRoot, ., setIsSyntheticBlock, (]
[detachChildren, (, ), ;, }, jsRoot, =, IR, ., block, (, ), ;, jsRoot, ., setIsSyntheticBlock, (, true, ), ;]
[), ;, }, jsRoot, =, IR, ., block, (, ), ;, jsRoot, ., setIsSyntheticBlock, (, true, ), ;, externsRoot, =]
[), ;, }, jsRoot, =, IR, ., block, (, ), ;, jsRoot, ., setIsSyntheticBlock, (, true, ), ;, externsRoot, =]
[., block, (, ), ;, jsRoot, ., setIsSyntheticBlock, (, true, ), ;, externsRoot, =, IR, ., block, (, ), ;]
[., block, (, ), ;, jsRoot, ., setIsSyntheticBlock, (, true, ), ;, externsRoot, =, IR, ., block, (, ), ;]
[;, jsRoot, ., setIsSyntheticBlock, (, true, ), ;, externsRoot, =, IR, ., block, (, ), ;, externsRoot, ., setIsSyntheticBlock, (]
[setIsSyntheticBlock, (, true, ), ;, externsRoot, =, IR, ., block, (, ), ;, externsRoot, ., setIsSyntheticBlock, (, true, ), ;]
[true, ), ;, externsRoot, =, IR, ., block, (, ), ;, externsRoot, ., setIsSyntheticBlock, (, true, ), ;, externAndJsRoot, =]
[true, ), ;, externsRoot, =, IR, ., block, (, ), ;, externsRoot, ., setIsSyntheticBlock, (, true, ), ;, externAndJsRoot, =]
[=, IR, ., block, (, ), ;, externsRoot, ., setIsSyntheticBlock, (, true, ), ;, externAndJsRoot, =, IR, ., block, (]
[., block, (, ), ;, externsRoot, ., setIsSyntheticBlock, (, true, ), ;, externAndJsRoot, =, IR, ., block, (, externsRoot, ,]
[), ;, externsRoot, ., setIsSyntheticBlock, (, true, ), ;, externAndJsRoot, =, IR, ., block, (, externsRoot, ,, jsRoot, ), ;]
[), ;, externsRoot, ., setIsSyntheticBlock, (, true, ), ;, externAndJsRoot, =, IR, ., block, (, externsRoot, ,, jsRoot, ), ;]
[setIsSyntheticBlock, (, true, ), ;, externAndJsRoot, =, IR, ., block, (, externsRoot, ,, jsRoot, ), ;, externAndJsRoot, ., setIsSyntheticBlock, (]
[externAndJsRoot, =, IR, ., block, (, externsRoot, ,, jsRoot, ), ;, externAndJsRoot, ., setIsSyntheticBlock, (, true, ), ;, if, (]
[externAndJsRoot, =, IR, ., block, (, externsRoot, ,, jsRoot, ), ;, externAndJsRoot, ., setIsSyntheticBlock, (, true, ), ;, if, (]
[externAndJsRoot, =, IR, ., block, (, externsRoot, ,, jsRoot, ), ;, externAndJsRoot, ., setIsSyntheticBlock, (, true, ), ;, if, (]
[), ;, externAndJsRoot, ., setIsSyntheticBlock, (, true, ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {]
[externAndJsRoot, ., setIsSyntheticBlock, (, true, ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, =]
[(, true, ), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, =, new, PerformanceTracker, (]
[), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, =, new, PerformanceTracker, (, jsRoot, ,]
[), ;, if, (, options, ., tracer, ., isOn, (, ), ), {, tracker, =, new, PerformanceTracker, (, jsRoot, ,]
[., tracer, ., isOn, (, ), ), {, tracker, =, new, PerformanceTracker, (, jsRoot, ,, options, ., tracer, ), ;]
[., isOn, (, ), ), {, tracker, =, new, PerformanceTracker, (, jsRoot, ,, options, ., tracer, ), ;, addChangeHandler, (]
[., isOn, (, ), ), {, tracker, =, new, PerformanceTracker, (, jsRoot, ,, options, ., tracer, ), ;, addChangeHandler, (]
[jsRoot, ,, options, ., tracer, ), ;, addChangeHandler, (, tracker, ., getCodeChangeHandler, (, ), ), ;, }, Tracer, tracer, =]
[options, ., tracer, ), ;, addChangeHandler, (, tracker, ., getCodeChangeHandler, (, ), ), ;, }, Tracer, tracer, =, newTracer, (]
[(, ), ), ;, }, Tracer, tracer, =, newTracer, (, "parseInputs", ), ;, try, {, for, (, CompilerInput, input, :]
[tracer, =, newTracer, (, "parseInputs", ), ;, try, {, for, (, CompilerInput, input, :, externs, ), {, Node, n, =]
[tracer, =, newTracer, (, "parseInputs", ), ;, try, {, for, (, CompilerInput, input, :, externs, ), {, Node, n, =]
["parseInputs", ), ;, try, {, for, (, CompilerInput, input, :, externs, ), {, Node, n, =, input, ., getAstRoot, (]
[for, (, CompilerInput, input, :, externs, ), {, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (]
[), {, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (, hasErrors, (, ), ), {, return]
[n, =, input, ., getAstRoot, (, this, ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }]
[n, =, input, ., getAstRoot, (, this, ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }]
[getAstRoot, (, this, ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, externsRoot, ., addChildToBack, (]
[(, hasErrors, (, ), ), {, return, null, ;, }, externsRoot, ., addChildToBack, (, n, ), ;, }, if, (]
[(, hasErrors, (, ), ), {, return, null, ;, }, externsRoot, ., addChildToBack, (, n, ), ;, }, if, (]
[(, hasErrors, (, ), ), {, return, null, ;, }, externsRoot, ., addChildToBack, (, n, ), ;, }, if, (]
[), {, return, null, ;, }, externsRoot, ., addChildToBack, (, n, ), ;, }, if, (, options, ., transformAMDToCJSModules, ||]
[), {, return, null, ;, }, externsRoot, ., addChildToBack, (, n, ), ;, }, if, (, options, ., transformAMDToCJSModules, ||]
[}, externsRoot, ., addChildToBack, (, n, ), ;, }, if, (, options, ., transformAMDToCJSModules, ||, options, ., processCommonJSModules, ), {]
[n, ), ;, }, if, (, options, ., transformAMDToCJSModules, ||, options, ., processCommonJSModules, ), {, processAMDAndCommonJSModules, (, ), ;, }]
[;, }, if, (, options, ., transformAMDToCJSModules, ||, options, ., processCommonJSModules, ), {, processAMDAndCommonJSModules, (, ), ;, }, hoistExterns, (]
[transformAMDToCJSModules, ||, options, ., processCommonJSModules, ), {, processAMDAndCommonJSModules, (, ), ;, }, hoistExterns, (, externsRoot, ), ;, boolean, staleInputs, =]
[processCommonJSModules, ), {, processAMDAndCommonJSModules, (, ), ;, }, hoistExterns, (, externsRoot, ), ;, boolean, staleInputs, =, false, ;, if, (]
[processCommonJSModules, ), {, processAMDAndCommonJSModules, (, ), ;, }, hoistExterns, (, externsRoot, ), ;, boolean, staleInputs, =, false, ;, if, (]
[processCommonJSModules, ), {, processAMDAndCommonJSModules, (, ), ;, }, hoistExterns, (, externsRoot, ), ;, boolean, staleInputs, =, false, ;, if, (]
[staleInputs, =, false, ;, if, (, options, ., dependencyOptions, ., needsManagement, (, ), ), {, for, (, CompilerInput, input, :]
[dependencyOptions, ., needsManagement, (, ), ), {, for, (, CompilerInput, input, :, inputs, ), {, for, (, String, provide, :]
[dependencyOptions, ., needsManagement, (, ), ), {, for, (, CompilerInput, input, :, inputs, ), {, for, (, String, provide, :]
[for, (, CompilerInput, input, :, inputs, ), {, for, (, String, provide, :, input, ., getProvides, (, ), ), {]
[for, (, CompilerInput, input, :, inputs, ), {, for, (, String, provide, :, input, ., getProvides, (, ), ), {]
[), {, for, (, String, provide, :, input, ., getProvides, (, ), ), {, getTypeRegistry, (, ), ., forwardDeclareType, (]
[input, ., getProvides, (, ), ), {, getTypeRegistry, (, ), ., forwardDeclareType, (, provide, ), ;, }, }, try, {]
[getProvides, (, ), ), {, getTypeRegistry, (, ), ., forwardDeclareType, (, provide, ), ;, }, }, try, {, inputs, =]
[getProvides, (, ), ), {, getTypeRegistry, (, ), ., forwardDeclareType, (, provide, ), ;, }, }, try, {, inputs, =]
[(, ), ), {, getTypeRegistry, (, ), ., forwardDeclareType, (, provide, ), ;, }, }, try, {, inputs, =, (]
[(, ), ), {, getTypeRegistry, (, ), ., forwardDeclareType, (, provide, ), ;, }, }, try, {, inputs, =, (]
[(, ), ), {, getTypeRegistry, (, ), ., forwardDeclareType, (, provide, ), ;, }, }, try, {, inputs, =, (]
[), {, getTypeRegistry, (, ), ., forwardDeclareType, (, provide, ), ;, }, }, try, {, inputs, =, (, moduleGraph, ==]
[getTypeRegistry, (, ), ., forwardDeclareType, (, provide, ), ;, }, }, try, {, inputs, =, (, moduleGraph, ==, null, ?]
[., forwardDeclareType, (, provide, ), ;, }, }, try, {, inputs, =, (, moduleGraph, ==, null, ?, new, JSModuleGraph, (]
[provide, ), ;, }, }, try, {, inputs, =, (, moduleGraph, ==, null, ?, new, JSModuleGraph, (, modules, ), :]
[try, {, inputs, =, (, moduleGraph, ==, null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ), ., manageDependencies, (]
[try, {, inputs, =, (, moduleGraph, ==, null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ), ., manageDependencies, (]
[(, moduleGraph, ==, null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ), ., manageDependencies, (, options, ., dependencyOptions, ,]
[null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ), ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ;]
[new, JSModuleGraph, (, modules, ), :, moduleGraph, ), ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ;, staleInputs, =]
[manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ;, staleInputs, =, true, ;, }, catch, (, CircularDependencyException, e, ), {]
[options, ., dependencyOptions, ,, inputs, ), ;, staleInputs, =, true, ;, }, catch, (, CircularDependencyException, e, ), {, report, (]
[options, ., dependencyOptions, ,, inputs, ), ;, staleInputs, =, true, ;, }, catch, (, CircularDependencyException, e, ), {, report, (]
[inputs, ), ;, staleInputs, =, true, ;, }, catch, (, CircularDependencyException, e, ), {, report, (, JSError, ., make, (]
[inputs, ), ;, staleInputs, =, true, ;, }, catch, (, CircularDependencyException, e, ), {, report, (, JSError, ., make, (]
[=, true, ;, }, catch, (, CircularDependencyException, e, ), {, report, (, JSError, ., make, (, JSModule, ., CIRCULAR_DEPENDENCY_ERROR, ,]
[=, true, ;, }, catch, (, CircularDependencyException, e, ), {, report, (, JSError, ., make, (, JSModule, ., CIRCULAR_DEPENDENCY_ERROR, ,]
[report, (, JSError, ., make, (, JSModule, ., CIRCULAR_DEPENDENCY_ERROR, ,, e, ., getMessage, (, ), ), ), ;, if, (]
[JSModule, ., CIRCULAR_DEPENDENCY_ERROR, ,, e, ., getMessage, (, ), ), ), ;, if, (, hasErrors, (, ), ), {, return]
[), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, catch, (, MissingProvideException, e, ), {]
[if, (, hasErrors, (, ), ), {, return, null, ;, }, }, catch, (, MissingProvideException, e, ), {, report, (]
[if, (, hasErrors, (, ), ), {, return, null, ;, }, }, catch, (, MissingProvideException, e, ), {, report, (]
[), ), {, return, null, ;, }, }, catch, (, MissingProvideException, e, ), {, report, (, JSError, ., make, (]
[{, return, null, ;, }, }, catch, (, MissingProvideException, e, ), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,]
[{, return, null, ;, }, }, catch, (, MissingProvideException, e, ), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,]
[), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,, e, ., getMessage, (, ), ), ), ;, if, (]
[make, (, MISSING_ENTRY_ERROR, ,, e, ., getMessage, (, ), ), ), ;, if, (, hasErrors, (, ), ), {, return]
[., getMessage, (, ), ), ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, }]
[;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, }, hoistNoCompileFiles, (, ), ;, if, (]
[hasErrors, (, ), ), {, return, null, ;, }, }, }, hoistNoCompileFiles, (, ), ;, if, (, staleInputs, ), {]
[}, hoistNoCompileFiles, (, ), ;, if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, for, (, CompilerInput, input, :]
[(, staleInputs, ), {, repartitionInputs, (, ), ;, }, for, (, CompilerInput, input, :, inputs, ), {, Node, n, =]
[(, staleInputs, ), {, repartitionInputs, (, ), ;, }, for, (, CompilerInput, input, :, inputs, ), {, Node, n, =]
[repartitionInputs, (, ), ;, }, for, (, CompilerInput, input, :, inputs, ), {, Node, n, =, input, ., getAstRoot, (]
[for, (, CompilerInput, input, :, inputs, ), {, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (]
[for, (, CompilerInput, input, :, inputs, ), {, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (]
[CompilerInput, input, :, inputs, ), {, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (, n, ==]
[=, input, ., getAstRoot, (, this, ), ;, if, (, n, ==, null, ), {, continue, ;, }, if, (]
[getAstRoot, (, this, ), ;, if, (, n, ==, null, ), {, continue, ;, }, if, (, devMode, ), {]
[(, n, ==, null, ), {, continue, ;, }, if, (, devMode, ), {, runSanityCheck, (, ), ;, if, (]
[continue, ;, }, if, (, devMode, ), {, runSanityCheck, (, ), ;, if, (, hasErrors, (, ), ), {, return]
[), {, runSanityCheck, (, ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, if, (]
[), {, runSanityCheck, (, ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, if, (]
[), {, runSanityCheck, (, ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, if, (]
[), {, runSanityCheck, (, ), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, if, (]
[), ;, if, (, hasErrors, (, ), ), {, return, null, ;, }, }, if, (, options, ., sourceMapOutputPath, !=]
[if, (, hasErrors, (, ), ), {, return, null, ;, }, }, if, (, options, ., sourceMapOutputPath, !=, null, ||]
[if, (, hasErrors, (, ), ), {, return, null, ;, }, }, if, (, options, ., sourceMapOutputPath, !=, null, ||]
[if, (, hasErrors, (, ), ), {, return, null, ;, }, }, if, (, options, ., sourceMapOutputPath, !=, null, ||]
[), ), {, return, null, ;, }, }, if, (, options, ., sourceMapOutputPath, !=, null, ||, options, ., nameReferenceReportPath, !=]
[}, }, if, (, options, ., sourceMapOutputPath, !=, null, ||, options, ., nameReferenceReportPath, !=, null, ), {, SourceInformationAnnotator, sia, =]
[(, options, ., sourceMapOutputPath, !=, null, ||, options, ., nameReferenceReportPath, !=, null, ), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (]
[(, options, ., sourceMapOutputPath, !=, null, ||, options, ., nameReferenceReportPath, !=, null, ), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (]
[||, options, ., nameReferenceReportPath, !=, null, ), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,]
[||, options, ., nameReferenceReportPath, !=, null, ), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,]
[||, options, ., nameReferenceReportPath, !=, null, ), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,]
[!=, null, ), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,, options, ., devMode, !=]
[!=, null, ), {, SourceInformationAnnotator, sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,, options, ., devMode, !=]
[sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,, options, ., devMode, !=, DevMode, ., OFF, ), ;]
[sia, =, new, SourceInformationAnnotator, (, input, ., getName, (, ), ,, options, ., devMode, !=, DevMode, ., OFF, ), ;]
[(, input, ., getName, (, ), ,, options, ., devMode, !=, DevMode, ., OFF, ), ;, NodeTraversal, ., traverse, (]
[., getName, (, ), ,, options, ., devMode, !=, DevMode, ., OFF, ), ;, NodeTraversal, ., traverse, (, this, ,]
[(, ), ,, options, ., devMode, !=, DevMode, ., OFF, ), ;, NodeTraversal, ., traverse, (, this, ,, n, ,]
[., devMode, !=, DevMode, ., OFF, ), ;, NodeTraversal, ., traverse, (, this, ,, n, ,, sia, ), ;, }]
[., devMode, !=, DevMode, ., OFF, ), ;, NodeTraversal, ., traverse, (, this, ,, n, ,, sia, ), ;, }]
[., OFF, ), ;, NodeTraversal, ., traverse, (, this, ,, n, ,, sia, ), ;, }, jsRoot, ., addChildToBack, (]
[traverse, (, this, ,, n, ,, sia, ), ;, }, jsRoot, ., addChildToBack, (, n, ), ;, }, if, (]
[sia, ), ;, }, jsRoot, ., addChildToBack, (, n, ), ;, }, if, (, hasErrors, (, ), ), {, return]
[jsRoot, ., addChildToBack, (, n, ), ;, }, if, (, hasErrors, (, ), ), {, return, null, ;, }, return]
[), ;, }, if, (, hasErrors, (, ), ), {, return, null, ;, }, return, externAndJsRoot, ;, }, finally, {]
[}, if, (, hasErrors, (, ), ), {, return, null, ;, }, return, externAndJsRoot, ;, }, finally, {, stopTracer, (]
[(, hasErrors, (, ), ), {, return, null, ;, }, return, externAndJsRoot, ;, }, finally, {, stopTracer, (, tracer, ,]
[stopTracer, (, tracer, ,, "parseInputs", ), ;, }, }, private, void, hoistExterns, (, Node, externsRoot, ), {, boolean, staleInputs, =]
[}, }, private, void, hoistExterns, (, Node, externsRoot, ), {, boolean, staleInputs, =, false, ;, for, (, CompilerInput, input, :]
[(, Node, externsRoot, ), {, boolean, staleInputs, =, false, ;, for, (, CompilerInput, input, :, inputs, ), {, if, (]
[(, Node, externsRoot, ), {, boolean, staleInputs, =, false, ;, for, (, CompilerInput, input, :, inputs, ), {, if, (]
[(, Node, externsRoot, ), {, boolean, staleInputs, =, false, ;, for, (, CompilerInput, input, :, inputs, ), {, if, (]
[(, CompilerInput, input, :, inputs, ), {, if, (, options, ., dependencyOptions, ., needsManagement, (, ), ), {, if, (]
[(, CompilerInput, input, :, inputs, ), {, if, (, options, ., dependencyOptions, ., needsManagement, (, ), ), {, if, (]
[CompilerInput, input, :, inputs, ), {, if, (, options, ., dependencyOptions, ., needsManagement, (, ), ), {, if, (, !]
[CompilerInput, input, :, inputs, ), {, if, (, options, ., dependencyOptions, ., needsManagement, (, ), ), {, if, (, !]
[CompilerInput, input, :, inputs, ), {, if, (, options, ., dependencyOptions, ., needsManagement, (, ), ), {, if, (, !]
[dependencyOptions, ., needsManagement, (, ), ), {, if, (, !, input, ., getProvides, (, ), ., isEmpty, (, ), ||]
[., needsManagement, (, ), ), {, if, (, !, input, ., getProvides, (, ), ., isEmpty, (, ), ||, !]
[., needsManagement, (, ), ), {, if, (, !, input, ., getProvides, (, ), ., isEmpty, (, ), ||, !]
[., needsManagement, (, ), ), {, if, (, !, input, ., getProvides, (, ), ., isEmpty, (, ), ||, !]
[||, !, input, ., getRequires, (, ), ., isEmpty, (, ), ), {, continue, ;, }, }, Node, n, =]
[||, !, input, ., getRequires, (, ), ., isEmpty, (, ), ), {, continue, ;, }, }, Node, n, =]
[getRequires, (, ), ., isEmpty, (, ), ), {, continue, ;, }, }, Node, n, =, input, ., getAstRoot, (]
[(, ), ), {, continue, ;, }, }, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (]
[(, ), ), {, continue, ;, }, }, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (]
[), {, continue, ;, }, }, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (, n, ==]
[input, ., getAstRoot, (, this, ), ;, if, (, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =]
[input, ., getAstRoot, (, this, ), ;, if, (, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =]
[(, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[(, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[(, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[=, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., isExterns, (, ), ), {]
[=, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., isExterns, (, ), ), {]
[(, ), ;, if, (, info, !=, null, &&, info, ., isExterns, (, ), ), {, externsRoot, ., addChildToBack, (]
[if, (, info, !=, null, &&, info, ., isExterns, (, ), ), {, externsRoot, ., addChildToBack, (, n, ), ;]
[if, (, info, !=, null, &&, info, ., isExterns, (, ), ), {, externsRoot, ., addChildToBack, (, n, ), ;]
[null, &&, info, ., isExterns, (, ), ), {, externsRoot, ., addChildToBack, (, n, ), ;, input, ., setIsExtern, (]
[., isExterns, (, ), ), {, externsRoot, ., addChildToBack, (, n, ), ;, input, ., setIsExtern, (, true, ), ;]
[., isExterns, (, ), ), {, externsRoot, ., addChildToBack, (, n, ), ;, input, ., setIsExtern, (, true, ), ;]
[., isExterns, (, ), ), {, externsRoot, ., addChildToBack, (, n, ), ;, input, ., setIsExtern, (, true, ), ;]
[addChildToBack, (, n, ), ;, input, ., setIsExtern, (, true, ), ;, input, ., getModule, (, ), ., remove, (]
[), ;, input, ., setIsExtern, (, true, ), ;, input, ., getModule, (, ), ., remove, (, input, ), ;]
[), ;, input, ., setIsExtern, (, true, ), ;, input, ., getModule, (, ), ., remove, (, input, ), ;]
[setIsExtern, (, true, ), ;, input, ., getModule, (, ), ., remove, (, input, ), ;, externs, ., add, (]
[), ;, input, ., getModule, (, ), ., remove, (, input, ), ;, externs, ., add, (, input, ), ;]
[input, ., getModule, (, ), ., remove, (, input, ), ;, externs, ., add, (, input, ), ;, staleInputs, =]
[remove, (, input, ), ;, externs, ., add, (, input, ), ;, staleInputs, =, true, ;, }, }, if, (]
[), ;, externs, ., add, (, input, ), ;, staleInputs, =, true, ;, }, }, if, (, staleInputs, ), {]
[if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, }, private, void, hoistNoCompileFiles, (, ), {, boolean, staleInputs, =]
[), ;, }, }, private, void, hoistNoCompileFiles, (, ), {, boolean, staleInputs, =, false, ;, for, (, CompilerInput, input, :]
[hoistNoCompileFiles, (, ), {, boolean, staleInputs, =, false, ;, for, (, CompilerInput, input, :, inputs, ), {, Node, n, =]
[hoistNoCompileFiles, (, ), {, boolean, staleInputs, =, false, ;, for, (, CompilerInput, input, :, inputs, ), {, Node, n, =]
[boolean, staleInputs, =, false, ;, for, (, CompilerInput, input, :, inputs, ), {, Node, n, =, input, ., getAstRoot, (]
[for, (, CompilerInput, input, :, inputs, ), {, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (]
[for, (, CompilerInput, input, :, inputs, ), {, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (]
[CompilerInput, input, :, inputs, ), {, Node, n, =, input, ., getAstRoot, (, this, ), ;, if, (, n, ==]
[input, ., getAstRoot, (, this, ), ;, if, (, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =]
[input, ., getAstRoot, (, this, ), ;, if, (, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =]
[(, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[(, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[(, n, ==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[==, null, ), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[), {, continue, ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[=, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., isNoCompile, (, ), ), {]
[=, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., isNoCompile, (, ), ), {]
[=, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., isNoCompile, (, ), ), {]
[(, info, !=, null, &&, info, ., isNoCompile, (, ), ), {, input, ., getModule, (, ), ., remove, (]
[null, &&, info, ., isNoCompile, (, ), ), {, input, ., getModule, (, ), ., remove, (, input, ), ;]
[info, ., isNoCompile, (, ), ), {, input, ., getModule, (, ), ., remove, (, input, ), ;, staleInputs, =]
[{, input, ., getModule, (, ), ., remove, (, input, ), ;, staleInputs, =, true, ;, }, }, if, (]
[getModule, (, ), ., remove, (, input, ), ;, staleInputs, =, true, ;, }, }, if, (, staleInputs, ), {]
[;, }, }, if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, }, private, void, repartitionInputs, (, ), {]
[}, if, (, staleInputs, ), {, repartitionInputs, (, ), ;, }, }, private, void, repartitionInputs, (, ), {, fillEmptyModules, (]
[staleInputs, ), {, repartitionInputs, (, ), ;, }, }, private, void, repartitionInputs, (, ), {, fillEmptyModules, (, modules, ), ;]
[), ;, rebuildInputsFromModules, (, ), ;, }, void, processAMDAndCommonJSModules, (, ), {, Map, <, String, ,, JSModule, >, modulesByName, =]
[), ;, rebuildInputsFromModules, (, ), ;, }, void, processAMDAndCommonJSModules, (, ), {, Map, <, String, ,, JSModule, >, modulesByName, =]
[String, ,, JSModule, >, modulesByName, =, Maps, ., newLinkedHashMap, (, ), ;, Map, <, CompilerInput, ,, JSModule, >, modulesByInput, =]
[String, ,, JSModule, >, modulesByName, =, Maps, ., newLinkedHashMap, (, ), ;, Map, <, CompilerInput, ,, JSModule, >, modulesByInput, =]
[;, Map, <, CompilerInput, ,, JSModule, >, modulesByInput, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, CompilerInput, input, :]
[CompilerInput, ,, JSModule, >, modulesByInput, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, CompilerInput, input, :, inputs, ), {]
[CompilerInput, ,, JSModule, >, modulesByInput, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, CompilerInput, input, :, inputs, ), {]
[modulesByInput, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, CompilerInput, input, :, inputs, ), {, input, ., setCompiler, (]
[), ;, for, (, CompilerInput, input, :, inputs, ), {, input, ., setCompiler, (, this, ), ;, Node, root, =]
[), ;, for, (, CompilerInput, input, :, inputs, ), {, input, ., setCompiler, (, this, ), ;, Node, root, =]
[CompilerInput, input, :, inputs, ), {, input, ., setCompiler, (, this, ), ;, Node, root, =, input, ., getAstRoot, (]
[{, input, ., setCompiler, (, this, ), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (]
[{, input, ., setCompiler, (, this, ), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (]
[., setCompiler, (, this, ), ;, Node, root, =, input, ., getAstRoot, (, this, ), ;, if, (, root, ==]
[=, input, ., getAstRoot, (, this, ), ;, if, (, root, ==, null, ), {, continue, ;, }, if, (]
[=, input, ., getAstRoot, (, this, ), ;, if, (, root, ==, null, ), {, continue, ;, }, if, (]
[this, ), ;, if, (, root, ==, null, ), {, continue, ;, }, if, (, options, ., transformAMDToCJSModules, ), {]
[this, ), ;, if, (, root, ==, null, ), {, continue, ;, }, if, (, options, ., transformAMDToCJSModules, ), {]
[if, (, root, ==, null, ), {, continue, ;, }, if, (, options, ., transformAMDToCJSModules, ), {, new, TransformAMDToCJSModule, (]
[), {, continue, ;, }, if, (, options, ., transformAMDToCJSModules, ), {, new, TransformAMDToCJSModule, (, this, ), ., process, (]
[continue, ;, }, if, (, options, ., transformAMDToCJSModules, ), {, new, TransformAMDToCJSModule, (, this, ), ., process, (, null, ,]
[., transformAMDToCJSModules, ), {, new, TransformAMDToCJSModule, (, this, ), ., process, (, null, ,, root, ), ;, }, if, (]
[., transformAMDToCJSModules, ), {, new, TransformAMDToCJSModule, (, this, ), ., process, (, null, ,, root, ), ;, }, if, (]
[), ., process, (, null, ,, root, ), ;, }, if, (, options, ., processCommonJSModules, ), {, ProcessCommonJSModules, cjs, =]
[(, null, ,, root, ), ;, }, if, (, options, ., processCommonJSModules, ), {, ProcessCommonJSModules, cjs, =, new, ProcessCommonJSModules, (]
[,, root, ), ;, }, if, (, options, ., processCommonJSModules, ), {, ProcessCommonJSModules, cjs, =, new, ProcessCommonJSModules, (, this, ,]
[,, root, ), ;, }, if, (, options, ., processCommonJSModules, ), {, ProcessCommonJSModules, cjs, =, new, ProcessCommonJSModules, (, this, ,]
[if, (, options, ., processCommonJSModules, ), {, ProcessCommonJSModules, cjs, =, new, ProcessCommonJSModules, (, this, ,, options, ., commonJSModulePathPrefix, ), ;]
[if, (, options, ., processCommonJSModules, ), {, ProcessCommonJSModules, cjs, =, new, ProcessCommonJSModules, (, this, ,, options, ., commonJSModulePathPrefix, ), ;]
[processCommonJSModules, ), {, ProcessCommonJSModules, cjs, =, new, ProcessCommonJSModules, (, this, ,, options, ., commonJSModulePathPrefix, ), ;, cjs, ., process, (]
[{, ProcessCommonJSModules, cjs, =, new, ProcessCommonJSModules, (, this, ,, options, ., commonJSModulePathPrefix, ), ;, cjs, ., process, (, null, ,]
[(, this, ,, options, ., commonJSModulePathPrefix, ), ;, cjs, ., process, (, null, ,, root, ), ;, JSModule, m, =]
[(, this, ,, options, ., commonJSModulePathPrefix, ), ;, cjs, ., process, (, null, ,, root, ), ;, JSModule, m, =]
[cjs, ., process, (, null, ,, root, ), ;, JSModule, m, =, cjs, ., getModule, (, ), ;, if, (]
[cjs, ., process, (, null, ,, root, ), ;, JSModule, m, =, cjs, ., getModule, (, ), ;, if, (]
[process, (, null, ,, root, ), ;, JSModule, m, =, cjs, ., getModule, (, ), ;, if, (, m, !=]
[,, root, ), ;, JSModule, m, =, cjs, ., getModule, (, ), ;, if, (, m, !=, null, ), {]
[,, root, ), ;, JSModule, m, =, cjs, ., getModule, (, ), ;, if, (, m, !=, null, ), {]
[JSModule, m, =, cjs, ., getModule, (, ), ;, if, (, m, !=, null, ), {, modulesByName, ., put, (]
[JSModule, m, =, cjs, ., getModule, (, ), ;, if, (, m, !=, null, ), {, modulesByName, ., put, (]
[(, ), ;, if, (, m, !=, null, ), {, modulesByName, ., put, (, m, ., getName, (, ), ,]
[if, (, m, !=, null, ), {, modulesByName, ., put, (, m, ., getName, (, ), ,, m, ), ;]
[if, (, m, !=, null, ), {, modulesByName, ., put, (, m, ., getName, (, ), ,, m, ), ;]
[null, ), {, modulesByName, ., put, (, m, ., getName, (, ), ,, m, ), ;, modulesByInput, ., put, (]
[{, modulesByName, ., put, (, m, ., getName, (, ), ,, m, ), ;, modulesByInput, ., put, (, input, ,]
[(, ), ,, m, ), ;, modulesByInput, ., put, (, input, ,, m, ), ;, }, }, }, if, (]
[(, ), ,, m, ), ;, modulesByInput, ., put, (, input, ,, m, ), ;, }, }, }, if, (]
[,, m, ), ;, }, }, }, if, (, options, ., processCommonJSModules, ), {, List, <, JSModule, >, modules, =]
[,, m, ), ;, }, }, }, if, (, options, ., processCommonJSModules, ), {, List, <, JSModule, >, modules, =]
[}, }, }, if, (, options, ., processCommonJSModules, ), {, List, <, JSModule, >, modules, =, Lists, ., newArrayList, (]
[}, }, }, if, (, options, ., processCommonJSModules, ), {, List, <, JSModule, >, modules, =, Lists, ., newArrayList, (]
[{, List, <, JSModule, >, modules, =, Lists, ., newArrayList, (, modulesByName, ., values, (, ), ), ;, if, (]
[List, <, JSModule, >, modules, =, Lists, ., newArrayList, (, modulesByName, ., values, (, ), ), ;, if, (, !]
[List, <, JSModule, >, modules, =, Lists, ., newArrayList, (, modulesByName, ., values, (, ), ), ;, if, (, !]
[., newArrayList, (, modulesByName, ., values, (, ), ), ;, if, (, !, modules, ., isEmpty, (, ), ), {]
[., newArrayList, (, modulesByName, ., values, (, ), ), ;, if, (, !, modules, ., isEmpty, (, ), ), {]
[., values, (, ), ), ;, if, (, !, modules, ., isEmpty, (, ), ), {, this, ., modules, =]
[(, ), ), ;, if, (, !, modules, ., isEmpty, (, ), ), {, this, ., modules, =, modules, ;]
[(, ), ), ;, if, (, !, modules, ., isEmpty, (, ), ), {, this, ., modules, =, modules, ;]
[if, (, !, modules, ., isEmpty, (, ), ), {, this, ., modules, =, modules, ;, this, ., moduleGraph, =]
[modules, ., isEmpty, (, ), ), {, this, ., modules, =, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (]
[modules, ., isEmpty, (, ), ), {, this, ., modules, =, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (]
[modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (, this, ., modules, ), ;, }, for, (, JSModule, module, :]
[(, this, ., modules, ), ;, }, for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, input, :]
[(, this, ., modules, ), ;, }, for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, input, :]
[modules, ), {, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, for, (, String, require, :]
[modules, ), {, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, for, (, String, require, :]
[getInputs, (, ), ), {, for, (, String, require, :, input, ., getRequires, (, ), ), {, JSModule, dependency, =]
[getInputs, (, ), ), {, for, (, String, require, :, input, ., getRequires, (, ), ), {, JSModule, dependency, =]
[{, for, (, String, require, :, input, ., getRequires, (, ), ), {, JSModule, dependency, =, modulesByName, ., get, (]
[:, input, ., getRequires, (, ), ), {, JSModule, dependency, =, modulesByName, ., get, (, require, ), ;, if, (]
[:, input, ., getRequires, (, ), ), {, JSModule, dependency, =, modulesByName, ., get, (, require, ), ;, if, (]
[., getRequires, (, ), ), {, JSModule, dependency, =, modulesByName, ., get, (, require, ), ;, if, (, dependency, ==]
[), ), {, JSModule, dependency, =, modulesByName, ., get, (, require, ), ;, if, (, dependency, ==, null, ), {]
[{, JSModule, dependency, =, modulesByName, ., get, (, require, ), ;, if, (, dependency, ==, null, ), {, report, (]
[{, JSModule, dependency, =, modulesByName, ., get, (, require, ), ;, if, (, dependency, ==, null, ), {, report, (]
[modulesByName, ., get, (, require, ), ;, if, (, dependency, ==, null, ), {, report, (, JSError, ., make, (]
[get, (, require, ), ;, if, (, dependency, ==, null, ), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,]
[dependency, ==, null, ), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,, require, ), ), ;, }, else, {]
[dependency, ==, null, ), {, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,, require, ), ), ;, }, else, {]
[{, report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,, require, ), ), ;, }, else, {, module, ., addDependency, (]
[require, ), ), ;, }, else, {, module, ., addDependency, (, dependency, ), ;, }, }, }, }, try, {]
[), ;, }, else, {, module, ., addDependency, (, dependency, ), ;, }, }, }, }, try, {, modules, =]
[), ;, }, else, {, module, ., addDependency, (, dependency, ), ;, }, }, }, }, try, {, modules, =]
[;, }, }, }, }, try, {, modules, =, Lists, ., newArrayList, (, ), ;, for, (, CompilerInput, input, :]
[;, }, }, }, }, try, {, modules, =, Lists, ., newArrayList, (, ), ;, for, (, CompilerInput, input, :]
[;, }, }, }, }, try, {, modules, =, Lists, ., newArrayList, (, ), ;, for, (, CompilerInput, input, :]
[{, modules, =, Lists, ., newArrayList, (, ), ;, for, (, CompilerInput, input, :, this, ., moduleGraph, ., manageDependencies, (]
[{, modules, =, Lists, ., newArrayList, (, ), ;, for, (, CompilerInput, input, :, this, ., moduleGraph, ., manageDependencies, (]
[., newArrayList, (, ), ;, for, (, CompilerInput, input, :, this, ., moduleGraph, ., manageDependencies, (, options, ., dependencyOptions, ,]
[;, for, (, CompilerInput, input, :, this, ., moduleGraph, ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ), {]
[;, for, (, CompilerInput, input, :, this, ., moduleGraph, ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ), {]
[input, :, this, ., moduleGraph, ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ), {, modules, ., add, (]
[input, :, this, ., moduleGraph, ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ), {, modules, ., add, (]
[moduleGraph, ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, ), ), {, modules, ., add, (, modulesByInput, ., get, (]
[inputs, ), ), {, modules, ., add, (, modulesByInput, ., get, (, input, ), ), ;, }, JSModule, root, =]
[{, modules, ., add, (, modulesByInput, ., get, (, input, ), ), ;, }, JSModule, root, =, new, JSModule, (]
[(, input, ), ), ;, }, JSModule, root, =, new, JSModule, (, "root", ), ;, for, (, JSModule, m, :]
[), ;, }, JSModule, root, =, new, JSModule, (, "root", ), ;, for, (, JSModule, m, :, modules, ), {]
[), ;, }, JSModule, root, =, new, JSModule, (, "root", ), ;, for, (, JSModule, m, :, modules, ), {]
[root, =, new, JSModule, (, "root", ), ;, for, (, JSModule, m, :, modules, ), {, m, ., addDependency, (]
[(, "root", ), ;, for, (, JSModule, m, :, modules, ), {, m, ., addDependency, (, root, ), ;, }]
[(, "root", ), ;, for, (, JSModule, m, :, modules, ), {, m, ., addDependency, (, root, ), ;, }]
[for, (, JSModule, m, :, modules, ), {, m, ., addDependency, (, root, ), ;, }, modules, ., add, (]
[JSModule, m, :, modules, ), {, m, ., addDependency, (, root, ), ;, }, modules, ., add, (, 0, ,]
[(, root, ), ;, }, modules, ., add, (, 0, ,, root, ), ;, SortedDependencies, <, JSModule, >, sorter, =]
[., add, (, 0, ,, root, ), ;, SortedDependencies, <, JSModule, >, sorter, =, new, SortedDependencies, <, JSModule, >, (]
[0, ,, root, ), ;, SortedDependencies, <, JSModule, >, sorter, =, new, SortedDependencies, <, JSModule, >, (, modules, ), ;]
[root, ), ;, SortedDependencies, <, JSModule, >, sorter, =, new, SortedDependencies, <, JSModule, >, (, modules, ), ;, modules, =]
[root, ), ;, SortedDependencies, <, JSModule, >, sorter, =, new, SortedDependencies, <, JSModule, >, (, modules, ), ;, modules, =]
[<, JSModule, >, sorter, =, new, SortedDependencies, <, JSModule, >, (, modules, ), ;, modules, =, sorter, ., getDependenciesOf, (]
[>, sorter, =, new, SortedDependencies, <, JSModule, >, (, modules, ), ;, modules, =, sorter, ., getDependenciesOf, (, modules, ,]
[new, SortedDependencies, <, JSModule, >, (, modules, ), ;, modules, =, sorter, ., getDependenciesOf, (, modules, ,, true, ), ;]
[new, SortedDependencies, <, JSModule, >, (, modules, ), ;, modules, =, sorter, ., getDependenciesOf, (, modules, ,, true, ), ;]
[>, (, modules, ), ;, modules, =, sorter, ., getDependenciesOf, (, modules, ,, true, ), ;, this, ., modules, =]
[modules, ), ;, modules, =, sorter, ., getDependenciesOf, (, modules, ,, true, ), ;, this, ., modules, =, modules, ;]
[modules, ), ;, modules, =, sorter, ., getDependenciesOf, (, modules, ,, true, ), ;, this, ., modules, =, modules, ;]
[=, sorter, ., getDependenciesOf, (, modules, ,, true, ), ;, this, ., modules, =, modules, ;, this, ., moduleGraph, =]
[getDependenciesOf, (, modules, ,, true, ), ;, this, ., modules, =, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (]
[=, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, Exception, e, ), {]
[=, modules, ;, this, ., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, Exception, e, ), {]
[., moduleGraph, =, new, JSModuleGraph, (, modules, ), ;, }, catch, (, Exception, e, ), {, Throwables, ., propagate, (]
[), {, Throwables, ., propagate, (, e, ), ;, }, }, }, public, Node, parse, (, SourceFile, file, ), {]
[propagate, (, e, ), ;, }, }, }, public, Node, parse, (, SourceFile, file, ), {, initCompilerOptionsIfTesting, (, ), ;]
[e, ), ;, }, }, }, public, Node, parse, (, SourceFile, file, ), {, initCompilerOptionsIfTesting, (, ), ;, addToDebugLog, (]
[e, ), ;, }, }, }, public, Node, parse, (, SourceFile, file, ), {, initCompilerOptionsIfTesting, (, ), ;, addToDebugLog, (]
[;, }, }, }, public, Node, parse, (, SourceFile, file, ), {, initCompilerOptionsIfTesting, (, ), ;, addToDebugLog, (, "Parsing: ", +]
[;, }, }, }, public, Node, parse, (, SourceFile, file, ), {, initCompilerOptionsIfTesting, (, ), ;, addToDebugLog, (, "Parsing: ", +]
[SourceFile, file, ), {, initCompilerOptionsIfTesting, (, ), ;, addToDebugLog, (, "Parsing: ", +, file, ., getName, (, ), ), ;, return]
[SourceFile, file, ), {, initCompilerOptionsIfTesting, (, ), ;, addToDebugLog, (, "Parsing: ", +, file, ., getName, (, ), ), ;, return]
[{, initCompilerOptionsIfTesting, (, ), ;, addToDebugLog, (, "Parsing: ", +, file, ., getName, (, ), ), ;, return, new, JsAst, (]
[addToDebugLog, (, "Parsing: ", +, file, ., getName, (, ), ), ;, return, new, JsAst, (, file, ), ., getAstRoot, (]
[), ), ;, return, new, JsAst, (, file, ), ., getAstRoot, (, this, ), ;, }, private, int, syntheticCodeId, =]
[;, }, private, int, syntheticCodeId, =, 0, ;, @, Override, Node, parseSyntheticCode, (, String, js, ), {, CompilerInput, input, =]
[int, syntheticCodeId, =, 0, ;, @, Override, Node, parseSyntheticCode, (, String, js, ), {, CompilerInput, input, =, new, CompilerInput, (]
[int, syntheticCodeId, =, 0, ;, @, Override, Node, parseSyntheticCode, (, String, js, ), {, CompilerInput, input, =, new, CompilerInput, (]
[;, @, Override, Node, parseSyntheticCode, (, String, js, ), {, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (]
[;, @, Override, Node, parseSyntheticCode, (, String, js, ), {, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (]
[;, @, Override, Node, parseSyntheticCode, (, String, js, ), {, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (]
[Override, Node, parseSyntheticCode, (, String, js, ), {, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (, " [synthetic:", +]
[Node, parseSyntheticCode, (, String, js, ), {, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (, " [synthetic:", +, (]
[parseSyntheticCode, (, String, js, ), {, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (, " [synthetic:", +, (, ++]
[js, ), {, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (, " [synthetic:", +, (, ++, syntheticCodeId, ), +]
[{, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (, " [synthetic:", +, (, ++, syntheticCodeId, ), +, "] ", ,]
[new, CompilerInput, (, SourceFile, ., fromCode, (, " [synthetic:", +, (, ++, syntheticCodeId, ), +, "] ", ,, js, ), ), ;]
[(, SourceFile, ., fromCode, (, " [synthetic:", +, (, ++, syntheticCodeId, ), +, "] ", ,, js, ), ), ;, putCompilerInput, (]
[(, SourceFile, ., fromCode, (, " [synthetic:", +, (, ++, syntheticCodeId, ), +, "] ", ,, js, ), ), ;, putCompilerInput, (]
[+, (, ++, syntheticCodeId, ), +, "] ", ,, js, ), ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,]
[), +, "] ", ,, js, ), ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return]
[), +, "] ", ,, js, ), ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return]
[js, ), ), ;, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return, input, ., getAstRoot, (]
[,, input, ), ;, return, input, ., getAstRoot, (, this, ), ;, }, protected, CompilerOptions, newCompilerOptions, (, ), {, return]
[protected, CompilerOptions, newCompilerOptions, (, ), {, return, new, CompilerOptions, (, ), ;, }, void, initCompilerOptionsIfTesting, (, ), {, if, (]
[protected, CompilerOptions, newCompilerOptions, (, ), {, return, new, CompilerOptions, (, ), ;, }, void, initCompilerOptionsIfTesting, (, ), {, if, (]
[newCompilerOptions, (, ), {, return, new, CompilerOptions, (, ), ;, }, void, initCompilerOptionsIfTesting, (, ), {, if, (, options, ==]
[{, return, new, CompilerOptions, (, ), ;, }, void, initCompilerOptionsIfTesting, (, ), {, if, (, options, ==, null, ), {]
[new, CompilerOptions, (, ), ;, }, void, initCompilerOptionsIfTesting, (, ), {, if, (, options, ==, null, ), {, initOptions, (]
[(, newCompilerOptions, (, ), ), ;, }, }, @, Override, Node, parseSyntheticCode, (, String, fileName, ,, String, js, ), {]
[;, }, }, @, Override, Node, parseSyntheticCode, (, String, fileName, ,, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, return]
[}, @, Override, Node, parseSyntheticCode, (, String, fileName, ,, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, return, parse, (]
[}, @, Override, Node, parseSyntheticCode, (, String, fileName, ,, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, return, parse, (]
[parseSyntheticCode, (, String, fileName, ,, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, return, parse, (, SourceFile, ., fromCode, (]
[String, fileName, ,, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, return, parse, (, SourceFile, ., fromCode, (, fileName, ,]
[SourceFile, ., fromCode, (, fileName, ,, js, ), ), ;, }, @, Override, Node, parseTestCode, (, String, js, ), {]
[), ), ;, }, @, Override, Node, parseTestCode, (, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, CompilerInput, input, =]
[}, @, Override, Node, parseTestCode, (, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, CompilerInput, input, =, new, CompilerInput, (]
[}, @, Override, Node, parseTestCode, (, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, CompilerInput, input, =, new, CompilerInput, (]
[parseTestCode, (, String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (]
[String, js, ), {, initCompilerOptionsIfTesting, (, ), ;, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (, "[testcode]", ,]
[), ;, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (, "[testcode]", ,, js, ), ), ;, if, (]
[), ;, CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (, "[testcode]", ,, js, ), ), ;, if, (]
[CompilerInput, input, =, new, CompilerInput, (, SourceFile, ., fromCode, (, "[testcode]", ,, js, ), ), ;, if, (, inputsById, ==]
[new, CompilerInput, (, SourceFile, ., fromCode, (, "[testcode]", ,, js, ), ), ;, if, (, inputsById, ==, null, ), {]
[(, SourceFile, ., fromCode, (, "[testcode]", ,, js, ), ), ;, if, (, inputsById, ==, null, ), {, inputsById, =]
[(, SourceFile, ., fromCode, (, "[testcode]", ,, js, ), ), ;, if, (, inputsById, ==, null, ), {, inputsById, =]
[js, ), ), ;, if, (, inputsById, ==, null, ), {, inputsById, =, Maps, ., newHashMap, (, ), ;, }]
[), ;, if, (, inputsById, ==, null, ), {, inputsById, =, Maps, ., newHashMap, (, ), ;, }, putCompilerInput, (]
[), ;, if, (, inputsById, ==, null, ), {, inputsById, =, Maps, ., newHashMap, (, ), ;, }, putCompilerInput, (]
[null, ), {, inputsById, =, Maps, ., newHashMap, (, ), ;, }, putCompilerInput, (, input, ., getInputId, (, ), ,]
[=, Maps, ., newHashMap, (, ), ;, }, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return]
[=, Maps, ., newHashMap, (, ), ;, }, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return]
[(, ), ;, }, putCompilerInput, (, input, ., getInputId, (, ), ,, input, ), ;, return, input, ., getAstRoot, (]
[input, ), ;, return, input, ., getAstRoot, (, this, ), ;, }, @, Override, ErrorReporter, getDefaultErrorReporter, (, ), {, return]
[;, }, @, Override, ErrorReporter, getDefaultErrorReporter, (, ), {, return, defaultErrorReporter, ;, }, public, String, toSource, (, ), {, return]
[@, Override, ErrorReporter, getDefaultErrorReporter, (, ), {, return, defaultErrorReporter, ;, }, public, String, toSource, (, ), {, return, runInCompilerThread, (]
[Callable, <, String, >, (, ), {, @, Override, public, String, call, (, ), throws, Exception, {, Tracer, tracer, =]
[String, >, (, ), {, @, Override, public, String, call, (, ), throws, Exception, {, Tracer, tracer, =, newTracer, (]
[String, call, (, ), throws, Exception, {, Tracer, tracer, =, newTracer, (, "toSource", ), ;, try, {, CodeBuilder, cb, =]
[Tracer, tracer, =, newTracer, (, "toSource", ), ;, try, {, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, if, (]
[Tracer, tracer, =, newTracer, (, "toSource", ), ;, try, {, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, if, (]
[=, newTracer, (, "toSource", ), ;, try, {, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, if, (, jsRoot, !=]
[try, {, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, if, (, jsRoot, !=, null, ), {, int, i, =]
[(, ), ;, if, (, jsRoot, !=, null, ), {, int, i, =, 0, ;, for, (, Node, scriptNode, =]
[(, ), ;, if, (, jsRoot, !=, null, ), {, int, i, =, 0, ;, for, (, Node, scriptNode, =]
[!=, null, ), {, int, i, =, 0, ;, for, (, Node, scriptNode, =, jsRoot, ., getFirstChild, (, ), ;]
[!=, null, ), {, int, i, =, 0, ;, for, (, Node, scriptNode, =, jsRoot, ., getFirstChild, (, ), ;]
[), {, int, i, =, 0, ;, for, (, Node, scriptNode, =, jsRoot, ., getFirstChild, (, ), ;, scriptNode, !=]
[int, i, =, 0, ;, for, (, Node, scriptNode, =, jsRoot, ., getFirstChild, (, ), ;, scriptNode, !=, null, ;]
[=, 0, ;, for, (, Node, scriptNode, =, jsRoot, ., getFirstChild, (, ), ;, scriptNode, !=, null, ;, scriptNode, =]
[=, 0, ;, for, (, Node, scriptNode, =, jsRoot, ., getFirstChild, (, ), ;, scriptNode, !=, null, ;, scriptNode, =]
[=, jsRoot, ., getFirstChild, (, ), ;, scriptNode, !=, null, ;, scriptNode, =, scriptNode, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, scriptNode, !=, null, ;, scriptNode, =, scriptNode, ., getNext, (, ), ), {, toSource, (]
[(, ), ;, scriptNode, !=, null, ;, scriptNode, =, scriptNode, ., getNext, (, ), ), {, toSource, (, cb, ,]
[(, ), ;, scriptNode, !=, null, ;, scriptNode, =, scriptNode, ., getNext, (, ), ), {, toSource, (, cb, ,]
[scriptNode, !=, null, ;, scriptNode, =, scriptNode, ., getNext, (, ), ), {, toSource, (, cb, ,, i, ++, ,]
[scriptNode, ., getNext, (, ), ), {, toSource, (, cb, ,, i, ++, ,, scriptNode, ), ;, }, }, return]
[scriptNode, ., getNext, (, ), ), {, toSource, (, cb, ,, i, ++, ,, scriptNode, ), ;, }, }, return]
[cb, ,, i, ++, ,, scriptNode, ), ;, }, }, return, cb, ., toString, (, ), ;, }, finally, {]
[i, ++, ,, scriptNode, ), ;, }, }, return, cb, ., toString, (, ), ;, }, finally, {, stopTracer, (]
[,, scriptNode, ), ;, }, }, return, cb, ., toString, (, ), ;, }, finally, {, stopTracer, (, tracer, ,]
[tracer, ,, "toSource", ), ;, }, }, }, ), ;, }, public, String, [, ], toSourceArray, (, ), {, return]
["toSource", ), ;, }, }, }, ), ;, }, public, String, [, ], toSourceArray, (, ), {, return, runInCompilerThread, (]
[], >, (, ), {, @, Override, public, String, [, ], call, (, ), throws, Exception, {, Tracer, tracer, =]
[(, ), {, @, Override, public, String, [, ], call, (, ), throws, Exception, {, Tracer, tracer, =, newTracer, (]
[], call, (, ), throws, Exception, {, Tracer, tracer, =, newTracer, (, "toSourceArray", ), ;, try, {, int, numInputs, =]
[], call, (, ), throws, Exception, {, Tracer, tracer, =, newTracer, (, "toSourceArray", ), ;, try, {, int, numInputs, =]
[(, "toSourceArray", ), ;, try, {, int, numInputs, =, inputs, ., size, (, ), ;, String, [, ], sources, =]
[;, try, {, int, numInputs, =, inputs, ., size, (, ), ;, String, [, ], sources, =, new, String, []
[inputs, ., size, (, ), ;, String, [, ], sources, =, new, String, [, numInputs, ], ;, CodeBuilder, cb, =]
[=, new, String, [, numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =]
[String, [, numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;]
[String, [, numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;]
[numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;]
[;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;]
[), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =]
[), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =]
[), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =]
[int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (]
[i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (]
[++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;]
[++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;]
[inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, cb, ., reset, (, ), ;]
[get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, cb, ., reset, (, ), ;, toSource, (]
[i, ), ., getAstRoot, (, Compiler, ., this, ), ;, cb, ., reset, (, ), ;, toSource, (, cb, ,]
[., getAstRoot, (, Compiler, ., this, ), ;, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,]
[Compiler, ., this, ), ;, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;]
[Compiler, ., this, ), ;, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;]
[this, ), ;, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, []
[cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =]
[cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =]
[cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return]
[), ;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, finally, {]
[sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, finally, {, stopTracer, (]
[i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, finally, {, stopTracer, (, tracer, ,]
[,, "toSourceArray", ), ;, }, }, }, ), ;, }, public, String, toSource, (, final, JSModule, module, ), {, return]
[), ;, }, }, }, ), ;, }, public, String, toSource, (, final, JSModule, module, ), {, return, runInCompilerThread, (]
[>, (, ), {, @, Override, public, String, call, (, ), throws, Exception, {, List, <, CompilerInput, >, inputs, =]
[>, (, ), {, @, Override, public, String, call, (, ), throws, Exception, {, List, <, CompilerInput, >, inputs, =]
[(, ), throws, Exception, {, List, <, CompilerInput, >, inputs, =, module, ., getInputs, (, ), ;, int, numInputs, =]
[(, ), throws, Exception, {, List, <, CompilerInput, >, inputs, =, module, ., getInputs, (, ), ;, int, numInputs, =]
[>, inputs, =, module, ., getInputs, (, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (]
[>, inputs, =, module, ., getInputs, (, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (]
[=, module, ., getInputs, (, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (, numInputs, ==]
[(, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (, numInputs, ==, 0, ), {, return]
[inputs, ., size, (, ), ;, if, (, numInputs, ==, 0, ), {, return, "", ;, }, CodeBuilder, cb, =]
[0, ), {, return, "", ;, }, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =]
[{, return, "", ;, }, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;]
[{, return, "", ;, }, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;]
["", ;, }, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[}, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;]
[}, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;]
[), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =]
[), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =]
[), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =]
[int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (]
[i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (]
[{, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (]
[{, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (]
[scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==]
[get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw]
[), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (]
[getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module: ", +]
[getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module: ", +]
[(, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module: ", +, module, ., getName, (, ), ), ;, }]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module: ", +, module, ., getName, (, ), ), ;, }, toSource, (]
[), {, throw, new, IllegalArgumentException, (, "Bad module: ", +, module, ., getName, (, ), ), ;, }, toSource, (, cb, ,]
[throw, new, IllegalArgumentException, (, "Bad module: ", +, module, ., getName, (, ), ), ;, }, toSource, (, cb, ,, i, ,]
[+, module, ., getName, (, ), ), ;, }, toSource, (, cb, ,, i, ,, scriptNode, ), ;, }, return]
[+, module, ., getName, (, ), ), ;, }, toSource, (, cb, ,, i, ,, scriptNode, ), ;, }, return]
[(, ), ;, }, }, ), ;, }, public, String, [, ], toSourceArray, (, final, JSModule, module, ), {, return]
[;, }, }, ), ;, }, public, String, [, ], toSourceArray, (, final, JSModule, module, ), {, return, runInCompilerThread, (]
[), {, @, Override, public, String, [, ], call, (, ), throws, Exception, {, List, <, CompilerInput, >, inputs, =]
[), {, @, Override, public, String, [, ], call, (, ), throws, Exception, {, List, <, CompilerInput, >, inputs, =]
[(, ), throws, Exception, {, List, <, CompilerInput, >, inputs, =, module, ., getInputs, (, ), ;, int, numInputs, =]
[(, ), throws, Exception, {, List, <, CompilerInput, >, inputs, =, module, ., getInputs, (, ), ;, int, numInputs, =]
[>, inputs, =, module, ., getInputs, (, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (]
[>, inputs, =, module, ., getInputs, (, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (]
[=, module, ., getInputs, (, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (, numInputs, ==]
[(, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (, numInputs, ==, 0, ), {, return]
[int, numInputs, =, inputs, ., size, (, ), ;, if, (, numInputs, ==, 0, ), {, return, new, String, []
[if, (, numInputs, ==, 0, ), {, return, new, String, [, 0, ], ;, }, String, [, ], sources, =]
[==, 0, ), {, return, new, String, [, 0, ], ;, }, String, [, ], sources, =, new, String, []
[String, [, 0, ], ;, }, String, [, ], sources, =, new, String, [, numInputs, ], ;, CodeBuilder, cb, =]
[=, new, String, [, numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =]
[String, [, numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;]
[String, [, numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;]
[numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;]
[;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;]
[), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =]
[), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =]
[), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =]
[int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (]
[i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (]
[{, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (]
[{, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (]
[scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==]
[get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw]
[), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (]
[getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module input: ", +]
[getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module input: ", +]
[getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module input: ", +]
[this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module input: ", +, inputs, ., get, (]
[{, throw, new, IllegalArgumentException, (, "Bad module input: ", +, inputs, ., get, (, i, ), ., getName, (, ), ), ;, }]
[{, throw, new, IllegalArgumentException, (, "Bad module input: ", +, inputs, ., get, (, i, ), ., getName, (, ), ), ;, }]
[+, inputs, ., get, (, i, ), ., getName, (, ), ), ;, }, cb, ., reset, (, ), ;]
[., get, (, i, ), ., getName, (, ), ), ;, }, cb, ., reset, (, ), ;, toSource, (]
[(, i, ), ., getName, (, ), ), ;, }, cb, ., reset, (, ), ;, toSource, (, cb, ,]
[), ., getName, (, ), ), ;, }, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,]
[(, ), ), ;, }, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;]
[(, ), ), ;, }, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;]
[), ;, }, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, []
[cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =]
[cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =]
[cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return]
[), ;, }, public, void, toSource, (, final, CodeBuilder, cb, ,, final, int, inputSeqNum, ,, final, Node, root, ), {]
[}, public, void, toSource, (, final, CodeBuilder, cb, ,, final, int, inputSeqNum, ,, final, Node, root, ), {, runInCompilerThread, (]
[new, Callable, <, Void, >, (, ), {, @, Override, public, Void, call, (, ), throws, Exception, {, if, (]
[new, Callable, <, Void, >, (, ), {, @, Override, public, Void, call, (, ), throws, Exception, {, if, (]
[{, @, Override, public, Void, call, (, ), throws, Exception, {, if, (, options, ., printInputDelimiter, ), {, if, (]
[{, @, Override, public, Void, call, (, ), throws, Exception, {, if, (, options, ., printInputDelimiter, ), {, if, (]
[@, Override, public, Void, call, (, ), throws, Exception, {, if, (, options, ., printInputDelimiter, ), {, if, (, (]
[@, Override, public, Void, call, (, ), throws, Exception, {, if, (, options, ., printInputDelimiter, ), {, if, (, (]
[@, Override, public, Void, call, (, ), throws, Exception, {, if, (, options, ., printInputDelimiter, ), {, if, (, (]
[), throws, Exception, {, if, (, options, ., printInputDelimiter, ), {, if, (, (, cb, ., getLength, (, ), >]
[{, if, (, options, ., printInputDelimiter, ), {, if, (, (, cb, ., getLength, (, ), >, 0, ), &&]
[if, (, options, ., printInputDelimiter, ), {, if, (, (, cb, ., getLength, (, ), >, 0, ), &&, !]
[if, (, options, ., printInputDelimiter, ), {, if, (, (, cb, ., getLength, (, ), >, 0, ), &&, !]
[printInputDelimiter, ), {, if, (, (, cb, ., getLength, (, ), >, 0, ), &&, !, cb, ., endsWith, (]
[(, (, cb, ., getLength, (, ), >, 0, ), &&, !, cb, ., endsWith, (, "\n", ), ), {]
[(, (, cb, ., getLength, (, ), >, 0, ), &&, !, cb, ., endsWith, (, "\n", ), ), {]
[getLength, (, ), >, 0, ), &&, !, cb, ., endsWith, (, "\n", ), ), {, cb, ., append, (]
[0, ), &&, !, cb, ., endsWith, (, "\n", ), ), {, cb, ., append, (, "\n", ), ;, }]
[0, ), &&, !, cb, ., endsWith, (, "\n", ), ), {, cb, ., append, (, "\n", ), ;, }]
[cb, ., endsWith, (, "\n", ), ), {, cb, ., append, (, "\n", ), ;, }, Preconditions, ., checkState, (]
[cb, ., endsWith, (, "\n", ), ), {, cb, ., append, (, "\n", ), ;, }, Preconditions, ., checkState, (]
[append, (, "\n", ), ;, }, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;, String, delimiter, =]
[append, (, "\n", ), ;, }, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;, String, delimiter, =]
[., checkState, (, root, ., isScript, (, ), ), ;, String, delimiter, =, options, ., inputDelimiter, ;, String, inputName, =]
[., checkState, (, root, ., isScript, (, ), ), ;, String, delimiter, =, options, ., inputDelimiter, ;, String, inputName, =]
[., checkState, (, root, ., isScript, (, ), ), ;, String, delimiter, =, options, ., inputDelimiter, ;, String, inputName, =]
[options, ., inputDelimiter, ;, String, inputName, =, root, ., getInputId, (, ), ., getIdName, (, ), ;, String, sourceName, =]
[options, ., inputDelimiter, ;, String, inputName, =, root, ., getInputId, (, ), ., getIdName, (, ), ;, String, sourceName, =]
[=, root, ., getInputId, (, ), ., getIdName, (, ), ;, String, sourceName, =, root, ., getSourceFileName, (, ), ;]
[=, root, ., getInputId, (, ), ., getIdName, (, ), ;, String, sourceName, =, root, ., getSourceFileName, (, ), ;]
[(, ), ., getIdName, (, ), ;, String, sourceName, =, root, ., getSourceFileName, (, ), ;, Preconditions, ., checkState, (]
[(, ), ., getIdName, (, ), ;, String, sourceName, =, root, ., getSourceFileName, (, ), ;, Preconditions, ., checkState, (]
[., getIdName, (, ), ;, String, sourceName, =, root, ., getSourceFileName, (, ), ;, Preconditions, ., checkState, (, sourceName, !=]
[), ;, String, sourceName, =, root, ., getSourceFileName, (, ), ;, Preconditions, ., checkState, (, sourceName, !=, null, ), ;]
[), ;, String, sourceName, =, root, ., getSourceFileName, (, ), ;, Preconditions, ., checkState, (, sourceName, !=, null, ), ;]
[=, root, ., getSourceFileName, (, ), ;, Preconditions, ., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (]
[root, ., getSourceFileName, (, ), ;, Preconditions, ., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (, !]
[root, ., getSourceFileName, (, ), ;, Preconditions, ., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (, !]
[., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;]
[(, sourceName, !=, null, ), ;, Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;, delimiter, =]
[(, sourceName, !=, null, ), ;, Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;, delimiter, =]
[(, sourceName, !=, null, ), ;, Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;, delimiter, =]
[), ;, Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;, delimiter, =, delimiter, ., replaceAll, (]
[Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;, delimiter, =, delimiter, ., replaceAll, (, "%name%", ,]
[Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;, delimiter, =, delimiter, ., replaceAll, (, "%name%", ,]
[!, sourceName, ., isEmpty, (, ), ), ;, delimiter, =, delimiter, ., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (]
[), ;, delimiter, =, delimiter, ., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (]
[delimiter, =, delimiter, ., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%", ,]
[delimiter, =, delimiter, ., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%", ,]
[replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%", ,, String, ., valueOf, (]
[Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%", ,, String, ., valueOf, (, inputSeqNum, ), ), ;]
[Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%", ,, String, ., valueOf, (, inputSeqNum, ), ), ;]
[Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%", ,, String, ., valueOf, (, inputSeqNum, ), ), ;]
[inputName, ), ), ., replaceAll, (, "%num%", ,, String, ., valueOf, (, inputSeqNum, ), ), ;, cb, ., append, (]
[(, "%num%", ,, String, ., valueOf, (, inputSeqNum, ), ), ;, cb, ., append, (, delimiter, ), ., append, (]
[(, inputSeqNum, ), ), ;, cb, ., append, (, delimiter, ), ., append, (, "\n", ), ;, }, if, (]
[(, inputSeqNum, ), ), ;, cb, ., append, (, delimiter, ), ., append, (, "\n", ), ;, }, if, (]
[(, inputSeqNum, ), ), ;, cb, ., append, (, delimiter, ), ., append, (, "\n", ), ;, }, if, (]
[(, inputSeqNum, ), ), ;, cb, ., append, (, delimiter, ), ., append, (, "\n", ), ;, }, if, (]
[., append, (, delimiter, ), ., append, (, "\n", ), ;, }, if, (, root, ., getJSDocInfo, (, ), !=]
[(, delimiter, ), ., append, (, "\n", ), ;, }, if, (, root, ., getJSDocInfo, (, ), !=, null, &&]
[(, delimiter, ), ., append, (, "\n", ), ;, }, if, (, root, ., getJSDocInfo, (, ), !=, null, &&]
[(, delimiter, ), ., append, (, "\n", ), ;, }, if, (, root, ., getJSDocInfo, (, ), !=, null, &&]
[(, delimiter, ), ., append, (, "\n", ), ;, }, if, (, root, ., getJSDocInfo, (, ), !=, null, &&]
[if, (, root, ., getJSDocInfo, (, ), !=, null, &&, root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=]
[., getJSDocInfo, (, ), !=, null, &&, root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {]
[., getJSDocInfo, (, ), !=, null, &&, root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {]
[., getJSDocInfo, (, ), !=, null, &&, root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {]
[., getJSDocInfo, (, ), !=, null, &&, root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {]
[!=, null, &&, root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {, cb, ., append, (]
[getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {, cb, ., append, (, "/*\n", ), ., append, (]
[getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {, cb, ., append, (, "/*\n", ), ., append, (]
[getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {, cb, ., append, (, "/*\n", ), ., append, (]
[append, (, "/*\n", ), ., append, (, root, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ., append, (]
[(, root, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ., append, (, "*/\n", ), ;, }, if, (]
[(, root, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ., append, (, "*/\n", ), ;, }, if, (]
[(, root, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ., append, (, "*/\n", ), ;, }, if, (]
[(, ), ., getLicense, (, ), ), ., append, (, "*/\n", ), ;, }, if, (, options, ., sourceMapOutputPath, !=]
[getLicense, (, ), ), ., append, (, "*/\n", ), ;, }, if, (, options, ., sourceMapOutputPath, !=, null, ), {]
[getLicense, (, ), ), ., append, (, "*/\n", ), ;, }, if, (, options, ., sourceMapOutputPath, !=, null, ), {]
[., append, (, "*/\n", ), ;, }, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, ., setStartingPosition, (]
[., append, (, "*/\n", ), ;, }, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, ., setStartingPosition, (]
[}, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, ., setStartingPosition, (, cb, ., getLineIndex, (, ), ,]
[}, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, ., setStartingPosition, (, cb, ., getLineIndex, (, ), ,]
[., setStartingPosition, (, cb, ., getLineIndex, (, ), ,, cb, ., getColumnIndex, (, ), ), ;, }, String, code, =]
[(, cb, ., getLineIndex, (, ), ,, cb, ., getColumnIndex, (, ), ), ;, }, String, code, =, toSource, (]
[., getLineIndex, (, ), ,, cb, ., getColumnIndex, (, ), ), ;, }, String, code, =, toSource, (, root, ,]
[(, ), ,, cb, ., getColumnIndex, (, ), ), ;, }, String, code, =, toSource, (, root, ,, sourceMap, ,]
[(, ), ,, cb, ., getColumnIndex, (, ), ), ;, }, String, code, =, toSource, (, root, ,, sourceMap, ,]
[,, cb, ., getColumnIndex, (, ), ), ;, }, String, code, =, toSource, (, root, ,, sourceMap, ,, inputSeqNum, ==]
[), ), ;, }, String, code, =, toSource, (, root, ,, sourceMap, ,, inputSeqNum, ==, 0, ), ;, if, (]
[), ;, }, String, code, =, toSource, (, root, ,, sourceMap, ,, inputSeqNum, ==, 0, ), ;, if, (, !]
[), ;, }, String, code, =, toSource, (, root, ,, sourceMap, ,, inputSeqNum, ==, 0, ), ;, if, (, !]
[(, root, ,, sourceMap, ,, inputSeqNum, ==, 0, ), ;, if, (, !, code, ., isEmpty, (, ), ), {]
[(, root, ,, sourceMap, ,, inputSeqNum, ==, 0, ), ;, if, (, !, code, ., isEmpty, (, ), ), {]
[,, inputSeqNum, ==, 0, ), ;, if, (, !, code, ., isEmpty, (, ), ), {, cb, ., append, (]
[if, (, !, code, ., isEmpty, (, ), ), {, cb, ., append, (, code, ), ;, int, length, =]
[if, (, !, code, ., isEmpty, (, ), ), {, cb, ., append, (, code, ), ;, int, length, =]
[{, cb, ., append, (, code, ), ;, int, length, =, code, ., length, (, ), ;, char, lastChar, =]
[{, cb, ., append, (, code, ), ;, int, length, =, code, ., length, (, ), ;, char, lastChar, =]
[(, code, ), ;, int, length, =, code, ., length, (, ), ;, char, lastChar, =, code, ., charAt, (]
[(, code, ), ;, int, length, =, code, ., length, (, ), ;, char, lastChar, =, code, ., charAt, (]
[), ;, int, length, =, code, ., length, (, ), ;, char, lastChar, =, code, ., charAt, (, length, -]
[., length, (, ), ;, char, lastChar, =, code, ., charAt, (, length, -, 1, ), ;, char, secondLastChar, =]
[., length, (, ), ;, char, lastChar, =, code, ., charAt, (, length, -, 1, ), ;, char, secondLastChar, =]
[., length, (, ), ;, char, lastChar, =, code, ., charAt, (, length, -, 1, ), ;, char, secondLastChar, =]
[(, ), ;, char, lastChar, =, code, ., charAt, (, length, -, 1, ), ;, char, secondLastChar, =, length, >=]
[;, char, lastChar, =, code, ., charAt, (, length, -, 1, ), ;, char, secondLastChar, =, length, >=, 2, ?]
[;, char, lastChar, =, code, ., charAt, (, length, -, 1, ), ;, char, secondLastChar, =, length, >=, 2, ?]
[code, ., charAt, (, length, -, 1, ), ;, char, secondLastChar, =, length, >=, 2, ?, code, ., charAt, (]
[code, ., charAt, (, length, -, 1, ), ;, char, secondLastChar, =, length, >=, 2, ?, code, ., charAt, (]
[charAt, (, length, -, 1, ), ;, char, secondLastChar, =, length, >=, 2, ?, code, ., charAt, (, length, -]
[-, 1, ), ;, char, secondLastChar, =, length, >=, 2, ?, code, ., charAt, (, length, -, 2, ), :]
[secondLastChar, =, length, >=, 2, ?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =]
[secondLastChar, =, length, >=, 2, ?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =]
[secondLastChar, =, length, >=, 2, ?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =]
[length, >=, 2, ?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==]
[2, ?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||]
[?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (]
[?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (]
[?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (]
[., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==]
[(, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&]
[(, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&]
[-, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==]
[;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', ), ;, if, (]
[boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', ), ;, if, (, !]
[lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', ), ;, if, (, !, hasSemiColon, ), {]
[lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', ), ;, if, (, !, hasSemiColon, ), {]
[(, lastChar, ==, '\n', &&, secondLastChar, ==, ';', ), ;, if, (, !, hasSemiColon, ), {, cb, ., append, (]
[==, ';', ), ;, if, (, !, hasSemiColon, ), {, cb, ., append, (, ";", ), ;, }, }, return]
[;, }, }, return, null, ;, }, }, ), ;, }, @, Override, String, toSource, (, Node, n, ), {]
[;, }, }, ), ;, }, @, Override, String, toSource, (, Node, n, ), {, initCompilerOptionsIfTesting, (, ), ;, return]
[}, ), ;, }, @, Override, String, toSource, (, Node, n, ), {, initCompilerOptionsIfTesting, (, ), ;, return, toSource, (]
[;, }, @, Override, String, toSource, (, Node, n, ), {, initCompilerOptionsIfTesting, (, ), ;, return, toSource, (, n, ,]
[@, Override, String, toSource, (, Node, n, ), {, initCompilerOptionsIfTesting, (, ), ;, return, toSource, (, n, ,, null, ,]
[}, private, String, toSource, (, Node, n, ,, SourceMap, sourceMap, ,, boolean, firstOutput, ), {, CodePrinter, ., Builder, builder, =]
[Node, n, ,, SourceMap, sourceMap, ,, boolean, firstOutput, ), {, CodePrinter, ., Builder, builder, =, new, CodePrinter, ., Builder, (]
[SourceMap, sourceMap, ,, boolean, firstOutput, ), {, CodePrinter, ., Builder, builder, =, new, CodePrinter, ., Builder, (, n, ), ;]
[SourceMap, sourceMap, ,, boolean, firstOutput, ), {, CodePrinter, ., Builder, builder, =, new, CodePrinter, ., Builder, (, n, ), ;]
[firstOutput, ), {, CodePrinter, ., Builder, builder, =, new, CodePrinter, ., Builder, (, n, ), ;, builder, ., setCompilerOptions, (]
[CodePrinter, ., Builder, builder, =, new, CodePrinter, ., Builder, (, n, ), ;, builder, ., setCompilerOptions, (, options, ), ;]
[CodePrinter, ., Builder, builder, =, new, CodePrinter, ., Builder, (, n, ), ;, builder, ., setCompilerOptions, (, options, ), ;]
[=, new, CodePrinter, ., Builder, (, n, ), ;, builder, ., setCompilerOptions, (, options, ), ;, builder, ., setSourceMap, (]
[., Builder, (, n, ), ;, builder, ., setCompilerOptions, (, options, ), ;, builder, ., setSourceMap, (, sourceMap, ), ;]
[., Builder, (, n, ), ;, builder, ., setCompilerOptions, (, options, ), ;, builder, ., setSourceMap, (, sourceMap, ), ;]
[), ;, builder, ., setCompilerOptions, (, options, ), ;, builder, ., setSourceMap, (, sourceMap, ), ;, builder, ., setTagAsStrict, (]
[), ;, builder, ., setCompilerOptions, (, options, ), ;, builder, ., setSourceMap, (, sourceMap, ), ;, builder, ., setTagAsStrict, (]
[builder, ., setCompilerOptions, (, options, ), ;, builder, ., setSourceMap, (, sourceMap, ), ;, builder, ., setTagAsStrict, (, firstOutput, &&]
[builder, ., setCompilerOptions, (, options, ), ;, builder, ., setSourceMap, (, sourceMap, ), ;, builder, ., setTagAsStrict, (, firstOutput, &&]
[builder, ., setCompilerOptions, (, options, ), ;, builder, ., setSourceMap, (, sourceMap, ), ;, builder, ., setTagAsStrict, (, firstOutput, &&]
[;, builder, ., setSourceMap, (, sourceMap, ), ;, builder, ., setTagAsStrict, (, firstOutput, &&, options, ., getLanguageOut, (, ), ==]
[;, builder, ., setSourceMap, (, sourceMap, ), ;, builder, ., setTagAsStrict, (, firstOutput, &&, options, ., getLanguageOut, (, ), ==]
[), ;, builder, ., setTagAsStrict, (, firstOutput, &&, options, ., getLanguageOut, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), ;, return]
[), ;, builder, ., setTagAsStrict, (, firstOutput, &&, options, ., getLanguageOut, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ), ;, return]
[), ;, return, builder, ., build, (, ), ;, }, public, static, class, CodeBuilder, {, private, final, StringBuilder, sb, =]
[}, public, static, class, CodeBuilder, {, private, final, StringBuilder, sb, =, new, StringBuilder, (, ), ;, private, int, lineCount, =]
[private, final, StringBuilder, sb, =, new, StringBuilder, (, ), ;, private, int, lineCount, =, 0, ;, private, int, colCount, =]
[(, ), ;, private, int, lineCount, =, 0, ;, private, int, colCount, =, 0, ;, void, reset, (, ), {]
[(, ), ;, private, int, lineCount, =, 0, ;, private, int, colCount, =, 0, ;, void, reset, (, ), {]
[int, lineCount, =, 0, ;, private, int, colCount, =, 0, ;, void, reset, (, ), {, sb, ., setLength, (]
[void, reset, (, ), {, sb, ., setLength, (, 0, ), ;, }, CodeBuilder, append, (, String, str, ), {]
[void, reset, (, ), {, sb, ., setLength, (, 0, ), ;, }, CodeBuilder, append, (, String, str, ), {]
[{, sb, ., setLength, (, 0, ), ;, }, CodeBuilder, append, (, String, str, ), {, sb, ., append, (]
[), ;, }, CodeBuilder, append, (, String, str, ), {, sb, ., append, (, str, ), ;, int, index, =]
[;, }, CodeBuilder, append, (, String, str, ), {, sb, ., append, (, str, ), ;, int, index, =, -]
[String, str, ), {, sb, ., append, (, str, ), ;, int, index, =, -, 1, ;, int, lastIndex, =]
[sb, ., append, (, str, ), ;, int, index, =, -, 1, ;, int, lastIndex, =, index, ;, while, (]
[sb, ., append, (, str, ), ;, int, index, =, -, 1, ;, int, lastIndex, =, index, ;, while, (]
[., append, (, str, ), ;, int, index, =, -, 1, ;, int, lastIndex, =, index, ;, while, (, (]
[(, str, ), ;, int, index, =, -, 1, ;, int, lastIndex, =, index, ;, while, (, (, index, =]
[(, str, ), ;, int, index, =, -, 1, ;, int, lastIndex, =, index, ;, while, (, (, index, =]
[int, index, =, -, 1, ;, int, lastIndex, =, index, ;, while, (, (, index, =, str, ., indexOf, (]
[=, -, 1, ;, int, lastIndex, =, index, ;, while, (, (, index, =, str, ., indexOf, (, '\n', ,]
[=, -, 1, ;, int, lastIndex, =, index, ;, while, (, (, index, =, str, ., indexOf, (, '\n', ,]
[1, ;, int, lastIndex, =, index, ;, while, (, (, index, =, str, ., indexOf, (, '\n', ,, index, +]
[=, index, ;, while, (, (, index, =, str, ., indexOf, (, '\n', ,, index, +, 1, ), ), >=]
[while, (, (, index, =, str, ., indexOf, (, '\n', ,, index, +, 1, ), ), >=, 0, ), {]
[(, (, index, =, str, ., indexOf, (, '\n', ,, index, +, 1, ), ), >=, 0, ), {, ++]
[index, =, str, ., indexOf, (, '\n', ,, index, +, 1, ), ), >=, 0, ), {, ++, lineCount, ;]
[str, ., indexOf, (, '\n', ,, index, +, 1, ), ), >=, 0, ), {, ++, lineCount, ;, lastIndex, =]
[,, index, +, 1, ), ), >=, 0, ), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (]
[,, index, +, 1, ), ), >=, 0, ), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (]
[+, 1, ), ), >=, 0, ), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (, lastIndex, ==]
[1, ), ), >=, 0, ), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (, lastIndex, ==, -]
[>=, 0, ), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (, lastIndex, ==, -, 1, ), {]
[), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (, lastIndex, ==, -, 1, ), {, colCount, +=]
[), {, ++, lineCount, ;, lastIndex, =, index, ;, }, if, (, lastIndex, ==, -, 1, ), {, colCount, +=]
[}, if, (, lastIndex, ==, -, 1, ), {, colCount, +=, str, ., length, (, ), ;, }, else, {]
[(, lastIndex, ==, -, 1, ), {, colCount, +=, str, ., length, (, ), ;, }, else, {, colCount, =]
[(, lastIndex, ==, -, 1, ), {, colCount, +=, str, ., length, (, ), ;, }, else, {, colCount, =]
[(, lastIndex, ==, -, 1, ), {, colCount, +=, str, ., length, (, ), ;, }, else, {, colCount, =]
[{, colCount, +=, str, ., length, (, ), ;, }, else, {, colCount, =, str, ., length, (, ), -]
[colCount, +=, str, ., length, (, ), ;, }, else, {, colCount, =, str, ., length, (, ), -, (]
[colCount, +=, str, ., length, (, ), ;, }, else, {, colCount, =, str, ., length, (, ), -, (]
[str, ., length, (, ), ;, }, else, {, colCount, =, str, ., length, (, ), -, (, lastIndex, +]
[;, }, else, {, colCount, =, str, ., length, (, ), -, (, lastIndex, +, 1, ), ;, }, return]
[(, lastIndex, +, 1, ), ;, }, return, this, ;, }, @, Override, public, String, toString, (, ), {, return]
[(, lastIndex, +, 1, ), ;, }, return, this, ;, }, @, Override, public, String, toString, (, ), {, return]
[String, toString, (, ), {, return, sb, ., toString, (, ), ;, }, public, int, getLength, (, ), {, return]
[String, toString, (, ), {, return, sb, ., toString, (, ), ;, }, public, int, getLength, (, ), {, return]
[public, int, getLength, (, ), {, return, sb, ., length, (, ), ;, }, int, getLineIndex, (, ), {, return]
[length, (, ), ;, }, int, getLineIndex, (, ), {, return, lineCount, ;, }, int, getColumnIndex, (, ), {, return]
[lineCount, ;, }, int, getColumnIndex, (, ), {, return, colCount, ;, }, boolean, endsWith, (, String, suffix, ), {, return]
[lineCount, ;, }, int, getColumnIndex, (, ), {, return, colCount, ;, }, boolean, endsWith, (, String, suffix, ), {, return]
[;, }, int, getColumnIndex, (, ), {, return, colCount, ;, }, boolean, endsWith, (, String, suffix, ), {, return, (]
[;, }, int, getColumnIndex, (, ), {, return, colCount, ;, }, boolean, endsWith, (, String, suffix, ), {, return, (]
[;, }, int, getColumnIndex, (, ), {, return, colCount, ;, }, boolean, endsWith, (, String, suffix, ), {, return, (]
[{, return, colCount, ;, }, boolean, endsWith, (, String, suffix, ), {, return, (, sb, ., length, (, ), >]
[{, return, colCount, ;, }, boolean, endsWith, (, String, suffix, ), {, return, (, sb, ., length, (, ), >]
[(, String, suffix, ), {, return, (, sb, ., length, (, ), >, suffix, ., length, (, ), ), &&]
[(, String, suffix, ), {, return, (, sb, ., length, (, ), >, suffix, ., length, (, ), ), &&]
[{, return, (, sb, ., length, (, ), >, suffix, ., length, (, ), ), &&, suffix, ., equals, (]
[{, return, (, sb, ., length, (, ), >, suffix, ., length, (, ), ), &&, suffix, ., equals, (]
[., length, (, ), >, suffix, ., length, (, ), ), &&, suffix, ., equals, (, sb, ., substring, (]
[., length, (, ), >, suffix, ., length, (, ), ), &&, suffix, ., equals, (, sb, ., substring, (]
[., length, (, ), >, suffix, ., length, (, ), ), &&, suffix, ., equals, (, sb, ., substring, (]
[., length, (, ), ), &&, suffix, ., equals, (, sb, ., substring, (, sb, ., length, (, ), -]
[., length, (, ), ), &&, suffix, ., equals, (, sb, ., substring, (, sb, ., length, (, ), -]
[length, (, ), -, suffix, ., length, (, ), ), ), ;, }, }, public, void, optimize, (, ), {]
[(, ), ), ), ;, }, }, public, void, optimize, (, ), {, normalize, (, ), ;, PhaseOptimizer, phaseOptimizer, =]
[), ;, }, }, public, void, optimize, (, ), {, normalize, (, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (]
[}, }, public, void, optimize, (, ), {, normalize, (, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,]
[public, void, optimize, (, ), {, normalize, (, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,, tracker, ,]
[{, normalize, (, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,, tracker, ,, null, ), ;, if, (]
[{, normalize, (, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,, tracker, ,, null, ), ;, if, (]
[{, normalize, (, ), ;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,, tracker, ,, null, ), ;, if, (]
[;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,, tracker, ,, null, ), ;, if, (, options, ., devMode, ==]
[;, PhaseOptimizer, phaseOptimizer, =, new, PhaseOptimizer, (, this, ,, tracker, ,, null, ), ;, if, (, options, ., devMode, ==]
[PhaseOptimizer, (, this, ,, tracker, ,, null, ), ;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {]
[PhaseOptimizer, (, this, ,, tracker, ,, null, ), ;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {]
[tracker, ,, null, ), ;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (]
[;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }]
[;, if, (, options, ., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }]
[., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (]
[., devMode, ==, DevMode, ., EVERY_PASS, ), {, phaseOptimizer, ., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (]
[., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getOptimizations, (, ), ), ;]
[., setSanityCheck, (, sanityCheck, ), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getOptimizations, (, ), ), ;]
[), ;, }, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getOptimizations, (, ), ), ;, phaseOptimizer, ., process, (]
[}, phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getOptimizations, (, ), ), ;, phaseOptimizer, ., process, (, externsRoot, ,]
[;, phaseOptimizer, ., process, (, externsRoot, ,, jsRoot, ), ;, }, @, Override, void, setCssRenamingMap, (, CssRenamingMap, map, ), {]
[;, phaseOptimizer, ., process, (, externsRoot, ,, jsRoot, ), ;, }, @, Override, void, setCssRenamingMap, (, CssRenamingMap, map, ), {]
[(, externsRoot, ,, jsRoot, ), ;, }, @, Override, void, setCssRenamingMap, (, CssRenamingMap, map, ), {, options, ., cssRenamingMap, =]
[(, CssRenamingMap, map, ), {, options, ., cssRenamingMap, =, map, ;, }, @, Override, CssRenamingMap, getCssRenamingMap, (, ), {, return]
[(, CssRenamingMap, map, ), {, options, ., cssRenamingMap, =, map, ;, }, @, Override, CssRenamingMap, getCssRenamingMap, (, ), {, return]
[}, @, Override, CssRenamingMap, getCssRenamingMap, (, ), {, return, options, ., cssRenamingMap, ;, }, public, void, processDefines, (, ), {]
[}, @, Override, CssRenamingMap, getCssRenamingMap, (, ), {, return, options, ., cssRenamingMap, ;, }, public, void, processDefines, (, ), {]
[}, @, Override, CssRenamingMap, getCssRenamingMap, (, ), {, return, options, ., cssRenamingMap, ;, }, public, void, processDefines, (, ), {]
[}, @, Override, CssRenamingMap, getCssRenamingMap, (, ), {, return, options, ., cssRenamingMap, ;, }, public, void, processDefines, (, ), {]
[@, Override, CssRenamingMap, getCssRenamingMap, (, ), {, return, options, ., cssRenamingMap, ;, }, public, void, processDefines, (, ), {, (]
[getCssRenamingMap, (, ), {, return, options, ., cssRenamingMap, ;, }, public, void, processDefines, (, ), {, (, new, DefaultPassConfig, (]
[;, }, public, void, processDefines, (, ), {, (, new, DefaultPassConfig, (, options, ), ), ., processDefines, ., create, (]
[(, ), {, (, new, DefaultPassConfig, (, options, ), ), ., processDefines, ., create, (, this, ), ., process, (]
[{, (, new, DefaultPassConfig, (, options, ), ), ., processDefines, ., create, (, this, ), ., process, (, externsRoot, ,]
[., create, (, this, ), ., process, (, externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, ), {, return]
[., create, (, this, ), ., process, (, externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, ), {, return]
[., create, (, this, ), ., process, (, externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, ), {, return]
[., create, (, this, ), ., process, (, externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, ), {, return]
[), ., process, (, externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==]
[), ., process, (, externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==]
[externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||]
[externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||]
[externsRoot, ,, jsRoot, ), ;, }, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||]
[;, }, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||, options, ., propertyRenaming, ==]
[;, }, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||, options, ., propertyRenaming, ==]
[., HEURISTIC, ||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, ControlFlowGraph, <, Node, >, computeCFG, (, ), {]
[., HEURISTIC, ||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, ControlFlowGraph, <, Node, >, computeCFG, (, ), {]
[., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, ControlFlowGraph, <, Node, >, computeCFG, (, ), {, logger, ., fine, (]
[;, }, ControlFlowGraph, <, Node, >, computeCFG, (, ), {, logger, ., fine, (, "Computing Control Flow Graph", ), ;, Tracer, tracer, =]
[ControlFlowGraph, <, Node, >, computeCFG, (, ), {, logger, ., fine, (, "Computing Control Flow Graph", ), ;, Tracer, tracer, =, newTracer, (]
[), {, logger, ., fine, (, "Computing Control Flow Graph", ), ;, Tracer, tracer, =, newTracer, (, "computeCFG", ), ;, ControlFlowAnalysis, cfa, =]
[., fine, (, "Computing Control Flow Graph", ), ;, Tracer, tracer, =, newTracer, (, "computeCFG", ), ;, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (]
[(, "Computing Control Flow Graph", ), ;, Tracer, tracer, =, newTracer, (, "computeCFG", ), ;, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,]
[), ;, Tracer, tracer, =, newTracer, (, "computeCFG", ), ;, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,]
[tracer, =, newTracer, (, "computeCFG", ), ;, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;]
[newTracer, (, "computeCFG", ), ;, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;, process, (]
[), ;, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;, process, (, cfa, ), ;]
[ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;, process, (, cfa, ), ;, stopTracer, (]
[=, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;, process, (, cfa, ), ;, stopTracer, (, tracer, ,]
[this, ,, true, ,, false, ), ;, process, (, cfa, ), ;, stopTracer, (, tracer, ,, "computeCFG", ), ;, return]
[this, ,, true, ,, false, ), ;, process, (, cfa, ), ;, stopTracer, (, tracer, ,, "computeCFG", ), ;, return]
[(, tracer, ,, "computeCFG", ), ;, return, cfa, ., getCfg, (, ), ;, }, public, void, normalize, (, ), {]
[(, tracer, ,, "computeCFG", ), ;, return, cfa, ., getCfg, (, ), ;, }, public, void, normalize, (, ), {]
[), ;, return, cfa, ., getCfg, (, ), ;, }, public, void, normalize, (, ), {, logger, ., fine, (]
[cfa, ., getCfg, (, ), ;, }, public, void, normalize, (, ), {, logger, ., fine, (, "Normalizing", ), ;]
[getCfg, (, ), ;, }, public, void, normalize, (, ), {, logger, ., fine, (, "Normalizing", ), ;, startPass, (]
[;, }, public, void, normalize, (, ), {, logger, ., fine, (, "Normalizing", ), ;, startPass, (, "normalize", ), ;]
[public, void, normalize, (, ), {, logger, ., fine, (, "Normalizing", ), ;, startPass, (, "normalize", ), ;, process, (]
[(, ), {, logger, ., fine, (, "Normalizing", ), ;, startPass, (, "normalize", ), ;, process, (, new, Normalize, (]
[{, logger, ., fine, (, "Normalizing", ), ;, startPass, (, "normalize", ), ;, process, (, new, Normalize, (, this, ,]
[(, "Normalizing", ), ;, startPass, (, "normalize", ), ;, process, (, new, Normalize, (, this, ,, false, ), ), ;]
[), ), ;, endPass, (, ), ;, }, @, Override, void, prepareAst, (, Node, root, ), {, CompilerPass, pass, =]
[endPass, (, ), ;, }, @, Override, void, prepareAst, (, Node, root, ), {, CompilerPass, pass, =, new, PrepareAst, (]
[;, }, @, Override, void, prepareAst, (, Node, root, ), {, CompilerPass, pass, =, new, PrepareAst, (, this, ), ;]
[;, }, @, Override, void, prepareAst, (, Node, root, ), {, CompilerPass, pass, =, new, PrepareAst, (, this, ), ;]
[void, prepareAst, (, Node, root, ), {, CompilerPass, pass, =, new, PrepareAst, (, this, ), ;, pass, ., process, (]
[(, Node, root, ), {, CompilerPass, pass, =, new, PrepareAst, (, this, ), ;, pass, ., process, (, null, ,]
[PrepareAst, (, this, ), ;, pass, ., process, (, null, ,, root, ), ;, }, void, recordFunctionInformation, (, ), {]
[PrepareAst, (, this, ), ;, pass, ., process, (, null, ,, root, ), ;, }, void, recordFunctionInformation, (, ), {]
[;, pass, ., process, (, null, ,, root, ), ;, }, void, recordFunctionInformation, (, ), {, logger, ., fine, (]
[process, (, null, ,, root, ), ;, }, void, recordFunctionInformation, (, ), {, logger, ., fine, (, "Recording function information", ), ;]
[null, ,, root, ), ;, }, void, recordFunctionInformation, (, ), {, logger, ., fine, (, "Recording function information", ), ;, startPass, (]
[void, recordFunctionInformation, (, ), {, logger, ., fine, (, "Recording function information", ), ;, startPass, (, "recordFunctionInformation", ), ;, RecordFunctionInformation, recordFunctionInfoPass, =]
[), {, logger, ., fine, (, "Recording function information", ), ;, startPass, (, "recordFunctionInformation", ), ;, RecordFunctionInformation, recordFunctionInfoPass, =, new, RecordFunctionInformation, (]
[logger, ., fine, (, "Recording function information", ), ;, startPass, (, "recordFunctionInformation", ), ;, RecordFunctionInformation, recordFunctionInfoPass, =, new, RecordFunctionInformation, (, this, ,]
[logger, ., fine, (, "Recording function information", ), ;, startPass, (, "recordFunctionInformation", ), ;, RecordFunctionInformation, recordFunctionInfoPass, =, new, RecordFunctionInformation, (, this, ,]
[logger, ., fine, (, "Recording function information", ), ;, startPass, (, "recordFunctionInformation", ), ;, RecordFunctionInformation, recordFunctionInfoPass, =, new, RecordFunctionInformation, (, this, ,]
[;, RecordFunctionInformation, recordFunctionInfoPass, =, new, RecordFunctionInformation, (, this, ,, getPassConfig, (, ), ., getIntermediateState, (, ), ., functionNames, ), ;]
[recordFunctionInfoPass, =, new, RecordFunctionInformation, (, this, ,, getPassConfig, (, ), ., getIntermediateState, (, ), ., functionNames, ), ;, process, (]
[RecordFunctionInformation, (, this, ,, getPassConfig, (, ), ., getIntermediateState, (, ), ., functionNames, ), ;, process, (, recordFunctionInfoPass, ), ;]
[this, ,, getPassConfig, (, ), ., getIntermediateState, (, ), ., functionNames, ), ;, process, (, recordFunctionInfoPass, ), ;, functionInformationMap, =]
[this, ,, getPassConfig, (, ), ., getIntermediateState, (, ), ., functionNames, ), ;, process, (, recordFunctionInfoPass, ), ;, functionInformationMap, =]
[getIntermediateState, (, ), ., functionNames, ), ;, process, (, recordFunctionInfoPass, ), ;, functionInformationMap, =, recordFunctionInfoPass, ., getMap, (, ), ;]
[functionInformationMap, =, recordFunctionInfoPass, ., getMap, (, ), ;, endPass, (, ), ;, }, protected, final, CodeChangeHandler, ., RecentChange, recentChange, =]
[CodeChangeHandler, ., RecentChange, recentChange, =, new, CodeChangeHandler, ., RecentChange, (, ), ;, private, final, List, <, CodeChangeHandler, >, codeChangeHandlers, =]
[CodeChangeHandler, ., RecentChange, recentChange, =, new, CodeChangeHandler, ., RecentChange, (, ), ;, private, final, List, <, CodeChangeHandler, >, codeChangeHandlers, =]
[List, <, CodeChangeHandler, >, codeChangeHandlers, =, Lists, ., <, CodeChangeHandler, >, newArrayList, (, ), ;, static, final, String, SYNTHETIC_EXTERNS, =]
[Lists, ., <, CodeChangeHandler, >, newArrayList, (, ), ;, static, final, String, SYNTHETIC_EXTERNS, =, "{SyntheticVarsDeclar}", ;, private, CompilerInput, synthesizedExternsInput, =]
[String, SYNTHETIC_EXTERNS, =, "{SyntheticVarsDeclar}", ;, private, CompilerInput, synthesizedExternsInput, =, null, ;, @, Override, void, addChangeHandler, (, CodeChangeHandler, handler, ), {]
[String, SYNTHETIC_EXTERNS, =, "{SyntheticVarsDeclar}", ;, private, CompilerInput, synthesizedExternsInput, =, null, ;, @, Override, void, addChangeHandler, (, CodeChangeHandler, handler, ), {]
[;, private, CompilerInput, synthesizedExternsInput, =, null, ;, @, Override, void, addChangeHandler, (, CodeChangeHandler, handler, ), {, codeChangeHandlers, ., add, (]
[handler, ), {, codeChangeHandlers, ., add, (, handler, ), ;, }, @, Override, void, removeChangeHandler, (, CodeChangeHandler, handler, ), {]
[handler, ), {, codeChangeHandlers, ., add, (, handler, ), ;, }, @, Override, void, removeChangeHandler, (, CodeChangeHandler, handler, ), {]
[., add, (, handler, ), ;, }, @, Override, void, removeChangeHandler, (, CodeChangeHandler, handler, ), {, codeChangeHandlers, ., remove, (]
[., remove, (, handler, ), ;, }, @, Override, public, void, reportCodeChange, (, ), {, for, (, CodeChangeHandler, handler, :]
[handler, ), ;, }, @, Override, public, void, reportCodeChange, (, ), {, for, (, CodeChangeHandler, handler, :, codeChangeHandlers, ), {]
[handler, ), ;, }, @, Override, public, void, reportCodeChange, (, ), {, for, (, CodeChangeHandler, handler, :, codeChangeHandlers, ), {]
[{, handler, ., reportChange, (, ), ;, }, }, @, Override, public, CodingConvention, getCodingConvention, (, ), {, CodingConvention, convention, =]
[{, handler, ., reportChange, (, ), ;, }, }, @, Override, public, CodingConvention, getCodingConvention, (, ), {, CodingConvention, convention, =]
[;, }, }, @, Override, public, CodingConvention, getCodingConvention, (, ), {, CodingConvention, convention, =, options, ., getCodingConvention, (, ), ;]
[}, @, Override, public, CodingConvention, getCodingConvention, (, ), {, CodingConvention, convention, =, options, ., getCodingConvention, (, ), ;, convention, =]
[}, @, Override, public, CodingConvention, getCodingConvention, (, ), {, CodingConvention, convention, =, options, ., getCodingConvention, (, ), ;, convention, =]
[}, @, Override, public, CodingConvention, getCodingConvention, (, ), {, CodingConvention, convention, =, options, ., getCodingConvention, (, ), ;, convention, =]
[Override, public, CodingConvention, getCodingConvention, (, ), {, CodingConvention, convention, =, options, ., getCodingConvention, (, ), ;, convention, =, convention, !=]
[CodingConvention, getCodingConvention, (, ), {, CodingConvention, convention, =, options, ., getCodingConvention, (, ), ;, convention, =, convention, !=, null, ?]
[(, ), {, CodingConvention, convention, =, options, ., getCodingConvention, (, ), ;, convention, =, convention, !=, null, ?, convention, :]
[CodingConvention, convention, =, options, ., getCodingConvention, (, ), ;, convention, =, convention, !=, null, ?, convention, :, defaultCodingConvention, ;, return]
[!=, null, ?, convention, :, defaultCodingConvention, ;, return, convention, ;, }, @, Override, public, boolean, isIdeMode, (, ), {, return]
[!=, null, ?, convention, :, defaultCodingConvention, ;, return, convention, ;, }, @, Override, public, boolean, isIdeMode, (, ), {, return]
[isIdeMode, (, ), {, return, options, ., ideMode, ;, }, @, Override, public, boolean, acceptEcmaScript5, (, ), {, switch, (]
[isIdeMode, (, ), {, return, options, ., ideMode, ;, }, @, Override, public, boolean, acceptEcmaScript5, (, ), {, switch, (]
[;, }, @, Override, public, boolean, acceptEcmaScript5, (, ), {, switch, (, options, ., getLanguageIn, (, ), ), {, case]
[Override, public, boolean, acceptEcmaScript5, (, ), {, switch, (, options, ., getLanguageIn, (, ), ), {, case, ECMASCRIPT5, :, case]
[acceptEcmaScript5, (, ), {, switch, (, options, ., getLanguageIn, (, ), ), {, case, ECMASCRIPT5, :, case, ECMASCRIPT5_STRICT, :, return]
[{, switch, (, options, ., getLanguageIn, (, ), ), {, case, ECMASCRIPT5, :, case, ECMASCRIPT5_STRICT, :, return, true, ;, case]
[options, ., getLanguageIn, (, ), ), {, case, ECMASCRIPT5, :, case, ECMASCRIPT5_STRICT, :, return, true, ;, case, ECMASCRIPT3, :, return]
[), ), {, case, ECMASCRIPT5, :, case, ECMASCRIPT5_STRICT, :, return, true, ;, case, ECMASCRIPT3, :, return, false, ;, }, throw]
[case, ECMASCRIPT5, :, case, ECMASCRIPT5_STRICT, :, return, true, ;, case, ECMASCRIPT3, :, return, false, ;, }, throw, new, IllegalStateException, (]
[:, return, false, ;, }, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, public, LanguageMode, languageMode, (, ), {, return]
[:, return, false, ;, }, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, public, LanguageMode, languageMode, (, ), {, return]
[(, ), {, return, options, ., getLanguageIn, (, ), ;, }, @, Override, public, boolean, acceptConstKeyword, (, ), {, return]
[(, ), {, return, options, ., getLanguageIn, (, ), ;, }, @, Override, public, boolean, acceptConstKeyword, (, ), {, return]
[boolean, acceptConstKeyword, (, ), {, return, options, ., acceptConstKeyword, ;, }, @, Override, Config, getParserConfig, (, ), {, if, (]
[boolean, acceptConstKeyword, (, ), {, return, options, ., acceptConstKeyword, ;, }, @, Override, Config, getParserConfig, (, ), {, if, (]
[(, ), {, return, options, ., acceptConstKeyword, ;, }, @, Override, Config, getParserConfig, (, ), {, if, (, parserConfig, ==]
[Override, Config, getParserConfig, (, ), {, if, (, parserConfig, ==, null, ), {, Config, ., LanguageMode, mode, ;, switch, (]
[Override, Config, getParserConfig, (, ), {, if, (, parserConfig, ==, null, ), {, Config, ., LanguageMode, mode, ;, switch, (]
[parserConfig, ==, null, ), {, Config, ., LanguageMode, mode, ;, switch, (, options, ., getLanguageIn, (, ), ), {, case]
[null, ), {, Config, ., LanguageMode, mode, ;, switch, (, options, ., getLanguageIn, (, ), ), {, case, ECMASCRIPT3, :]
[{, Config, ., LanguageMode, mode, ;, switch, (, options, ., getLanguageIn, (, ), ), {, case, ECMASCRIPT3, :, mode, =]
[{, Config, ., LanguageMode, mode, ;, switch, (, options, ., getLanguageIn, (, ), ), {, case, ECMASCRIPT3, :, mode, =]
[{, Config, ., LanguageMode, mode, ;, switch, (, options, ., getLanguageIn, (, ), ), {, case, ECMASCRIPT3, :, mode, =]
[., getLanguageIn, (, ), ), {, case, ECMASCRIPT3, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT3, ;, break, ;, case]
[(, ), ), {, case, ECMASCRIPT3, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT3, ;, break, ;, case, ECMASCRIPT5, :]
[), {, case, ECMASCRIPT3, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT3, ;, break, ;, case, ECMASCRIPT5, :, mode, =]
[), {, case, ECMASCRIPT3, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT3, ;, break, ;, case, ECMASCRIPT5, :, mode, =]
[), {, case, ECMASCRIPT3, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT3, ;, break, ;, case, ECMASCRIPT5, :, mode, =]
[LanguageMode, ., ECMASCRIPT3, ;, break, ;, case, ECMASCRIPT5, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5, ;, break, ;, case]
[ECMASCRIPT3, ;, break, ;, case, ECMASCRIPT5, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5, ;, break, ;, case, ECMASCRIPT5_STRICT, :]
[break, ;, case, ECMASCRIPT5, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5, ;, break, ;, case, ECMASCRIPT5_STRICT, :, mode, =]
[break, ;, case, ECMASCRIPT5, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5, ;, break, ;, case, ECMASCRIPT5_STRICT, :, mode, =]
[break, ;, case, ECMASCRIPT5, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5, ;, break, ;, case, ECMASCRIPT5_STRICT, :, mode, =]
[ECMASCRIPT5, ;, break, ;, case, ECMASCRIPT5_STRICT, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5_STRICT, ;, break, ;, default, :, throw]
[;, case, ECMASCRIPT5_STRICT, :, mode, =, Config, ., LanguageMode, ., ECMASCRIPT5_STRICT, ;, break, ;, default, :, throw, new, IllegalStateException, (]
[mode, =, Config, ., LanguageMode, ., ECMASCRIPT5_STRICT, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }]
[Config, ., LanguageMode, ., ECMASCRIPT5_STRICT, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, parserConfig, =]
[Config, ., LanguageMode, ., ECMASCRIPT5_STRICT, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, parserConfig, =]
[ECMASCRIPT5_STRICT, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, parserConfig, =, ParserRunner, ., createConfig, (]
[default, :, throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, parserConfig, =, ParserRunner, ., createConfig, (, isIdeMode, (, ), ,]
[throw, new, IllegalStateException, (, "unexpected language mode", ), ;, }, parserConfig, =, ParserRunner, ., createConfig, (, isIdeMode, (, ), ,, mode, ,]
["unexpected language mode", ), ;, }, parserConfig, =, ParserRunner, ., createConfig, (, isIdeMode, (, ), ,, mode, ,, acceptConstKeyword, (, ), ,]
["unexpected language mode", ), ;, }, parserConfig, =, ParserRunner, ., createConfig, (, isIdeMode, (, ), ,, mode, ,, acceptConstKeyword, (, ), ,]
[., createConfig, (, isIdeMode, (, ), ,, mode, ,, acceptConstKeyword, (, ), ,, options, ., extraAnnotationNames, ), ;, }, return]
[,, options, ., extraAnnotationNames, ), ;, }, return, parserConfig, ;, }, @, Override, public, boolean, isTypeCheckingEnabled, (, ), {, return]
[,, options, ., extraAnnotationNames, ), ;, }, return, parserConfig, ;, }, @, Override, public, boolean, isTypeCheckingEnabled, (, ), {, return]
[Override, public, boolean, isTypeCheckingEnabled, (, ), {, return, options, ., checkTypes, ;, }, protected, DiagnosticGroups, getDiagnosticGroups, (, ), {, return]
[return, new, DiagnosticGroups, (, ), ;, }, @, Override, public, void, report, (, JSError, error, ), {, CheckLevel, level, =]
[return, new, DiagnosticGroups, (, ), ;, }, @, Override, public, void, report, (, JSError, error, ), {, CheckLevel, level, =]
[Override, public, void, report, (, JSError, error, ), {, CheckLevel, level, =, error, ., getDefaultLevel, (, ), ;, if, (]
[Override, public, void, report, (, JSError, error, ), {, CheckLevel, level, =, error, ., getDefaultLevel, (, ), ;, if, (]
[void, report, (, JSError, error, ), {, CheckLevel, level, =, error, ., getDefaultLevel, (, ), ;, if, (, warningsGuard, !=]
[{, CheckLevel, level, =, error, ., getDefaultLevel, (, ), ;, if, (, warningsGuard, !=, null, ), {, CheckLevel, newLevel, =]
[{, CheckLevel, level, =, error, ., getDefaultLevel, (, ), ;, if, (, warningsGuard, !=, null, ), {, CheckLevel, newLevel, =]
[error, ., getDefaultLevel, (, ), ;, if, (, warningsGuard, !=, null, ), {, CheckLevel, newLevel, =, warningsGuard, ., level, (]
[;, if, (, warningsGuard, !=, null, ), {, CheckLevel, newLevel, =, warningsGuard, ., level, (, error, ), ;, if, (]
[;, if, (, warningsGuard, !=, null, ), {, CheckLevel, newLevel, =, warningsGuard, ., level, (, error, ), ;, if, (]
[(, warningsGuard, !=, null, ), {, CheckLevel, newLevel, =, warningsGuard, ., level, (, error, ), ;, if, (, newLevel, !=]
[null, ), {, CheckLevel, newLevel, =, warningsGuard, ., level, (, error, ), ;, if, (, newLevel, !=, null, ), {]
[{, CheckLevel, newLevel, =, warningsGuard, ., level, (, error, ), ;, if, (, newLevel, !=, null, ), {, level, =]
[level, (, error, ), ;, if, (, newLevel, !=, null, ), {, level, =, newLevel, ;, }, }, if, (]
[level, (, error, ), ;, if, (, newLevel, !=, null, ), {, level, =, newLevel, ;, }, }, if, (]
[null, ), {, level, =, newLevel, ;, }, }, if, (, level, ., isOn, (, ), ), {, if, (]
[null, ), {, level, =, newLevel, ;, }, }, if, (, level, ., isOn, (, ), ), {, if, (]
[null, ), {, level, =, newLevel, ;, }, }, if, (, level, ., isOn, (, ), ), {, if, (]
[;, }, }, if, (, level, ., isOn, (, ), ), {, if, (, getOptions, (, ), ., errorHandler, !=]
[if, (, level, ., isOn, (, ), ), {, if, (, getOptions, (, ), ., errorHandler, !=, null, ), {]
[if, (, level, ., isOn, (, ), ), {, if, (, getOptions, (, ), ., errorHandler, !=, null, ), {]
[if, (, level, ., isOn, (, ), ), {, if, (, getOptions, (, ), ., errorHandler, !=, null, ), {]
[{, if, (, getOptions, (, ), ., errorHandler, !=, null, ), {, getOptions, (, ), ., errorHandler, ., report, (]
[(, getOptions, (, ), ., errorHandler, !=, null, ), {, getOptions, (, ), ., errorHandler, ., report, (, level, ,]
[., errorHandler, !=, null, ), {, getOptions, (, ), ., errorHandler, ., report, (, level, ,, error, ), ;, }]
[., errorHandler, !=, null, ), {, getOptions, (, ), ., errorHandler, ., report, (, level, ,, error, ), ;, }]
[), {, getOptions, (, ), ., errorHandler, ., report, (, level, ,, error, ), ;, }, errorManager, ., report, (]
[getOptions, (, ), ., errorHandler, ., report, (, level, ,, error, ), ;, }, errorManager, ., report, (, level, ,]
[., report, (, level, ,, error, ), ;, }, }, @, Override, public, CheckLevel, getErrorLevel, (, JSError, error, ), {]
[., report, (, level, ,, error, ), ;, }, }, @, Override, public, CheckLevel, getErrorLevel, (, JSError, error, ), {]
[,, error, ), ;, }, }, @, Override, public, CheckLevel, getErrorLevel, (, JSError, error, ), {, Preconditions, ., checkNotNull, (]
[}, }, @, Override, public, CheckLevel, getErrorLevel, (, JSError, error, ), {, Preconditions, ., checkNotNull, (, options, ), ;, return]
[}, }, @, Override, public, CheckLevel, getErrorLevel, (, JSError, error, ), {, Preconditions, ., checkNotNull, (, options, ), ;, return]
[public, CheckLevel, getErrorLevel, (, JSError, error, ), {, Preconditions, ., checkNotNull, (, options, ), ;, return, warningsGuard, ., level, (]
[(, error, ), ;, }, @, Override, void, throwInternalError, (, String, message, ,, Exception, cause, ), {, String, finalMessage, =]
[(, error, ), ;, }, @, Override, void, throwInternalError, (, String, message, ,, Exception, cause, ), {, String, finalMessage, =]
[(, error, ), ;, }, @, Override, void, throwInternalError, (, String, message, ,, Exception, cause, ), {, String, finalMessage, =]
[), ;, }, @, Override, void, throwInternalError, (, String, message, ,, Exception, cause, ), {, String, finalMessage, =, "INTERNAL COMPILER ERROR.\n", +]
[}, @, Override, void, throwInternalError, (, String, message, ,, Exception, cause, ), {, String, finalMessage, =, "INTERNAL COMPILER ERROR.\n", +, "Please report this problem.\n", +]
[(, String, message, ,, Exception, cause, ), {, String, finalMessage, =, "INTERNAL COMPILER ERROR.\n", +, "Please report this problem.\n", +, message, ;, RuntimeException, e, =]
[,, Exception, cause, ), {, String, finalMessage, =, "INTERNAL COMPILER ERROR.\n", +, "Please report this problem.\n", +, message, ;, RuntimeException, e, =, new, RuntimeException, (]
[cause, ), {, String, finalMessage, =, "INTERNAL COMPILER ERROR.\n", +, "Please report this problem.\n", +, message, ;, RuntimeException, e, =, new, RuntimeException, (, finalMessage, ,]
[=, "INTERNAL COMPILER ERROR.\n", +, "Please report this problem.\n", +, message, ;, RuntimeException, e, =, new, RuntimeException, (, finalMessage, ,, cause, ), ;, if, (]
[=, "INTERNAL COMPILER ERROR.\n", +, "Please report this problem.\n", +, message, ;, RuntimeException, e, =, new, RuntimeException, (, finalMessage, ,, cause, ), ;, if, (]
[+, "Please report this problem.\n", +, message, ;, RuntimeException, e, =, new, RuntimeException, (, finalMessage, ,, cause, ), ;, if, (, cause, !=]
[message, ;, RuntimeException, e, =, new, RuntimeException, (, finalMessage, ,, cause, ), ;, if, (, cause, !=, null, ), {]
[message, ;, RuntimeException, e, =, new, RuntimeException, (, finalMessage, ,, cause, ), ;, if, (, cause, !=, null, ), {]
[=, new, RuntimeException, (, finalMessage, ,, cause, ), ;, if, (, cause, !=, null, ), {, e, ., setStackTrace, (]
[=, new, RuntimeException, (, finalMessage, ,, cause, ), ;, if, (, cause, !=, null, ), {, e, ., setStackTrace, (]
[if, (, cause, !=, null, ), {, e, ., setStackTrace, (, cause, ., getStackTrace, (, ), ), ;, }, throw]
[(, cause, ., getStackTrace, (, ), ), ;, }, throw, e, ;, }, public, int, getErrorCount, (, ), {, return]
[(, cause, ., getStackTrace, (, ), ), ;, }, throw, e, ;, }, public, int, getErrorCount, (, ), {, return]
[int, getErrorCount, (, ), {, return, errorManager, ., getErrorCount, (, ), ;, }, public, int, getWarningCount, (, ), {, return]
[int, getErrorCount, (, ), {, return, errorManager, ., getErrorCount, (, ), ;, }, public, int, getWarningCount, (, ), {, return]
[getWarningCount, (, ), {, return, errorManager, ., getWarningCount, (, ), ;, }, @, Override, boolean, hasHaltingErrors, (, ), {, return]
[getWarningCount, (, ), {, return, errorManager, ., getWarningCount, (, ), ;, }, @, Override, boolean, hasHaltingErrors, (, ), {, return]
[(, ), {, return, errorManager, ., getWarningCount, (, ), ;, }, @, Override, boolean, hasHaltingErrors, (, ), {, return, !]
[errorManager, ., getWarningCount, (, ), ;, }, @, Override, boolean, hasHaltingErrors, (, ), {, return, !, isIdeMode, (, ), &&]
[errorManager, ., getWarningCount, (, ), ;, }, @, Override, boolean, hasHaltingErrors, (, ), {, return, !, isIdeMode, (, ), &&]
[), ;, }, @, Override, boolean, hasHaltingErrors, (, ), {, return, !, isIdeMode, (, ), &&, getErrorCount, (, ), >]
[return, !, isIdeMode, (, ), &&, getErrorCount, (, ), >, 0, ;, }, public, boolean, hasErrors, (, ), {, return]
[boolean, hasErrors, (, ), {, return, hasHaltingErrors, (, ), ;, }, @, Override, void, addToDebugLog, (, String, str, ), {]
[boolean, hasErrors, (, ), {, return, hasHaltingErrors, (, ), ;, }, @, Override, void, addToDebugLog, (, String, str, ), {]
[{, return, hasHaltingErrors, (, ), ;, }, @, Override, void, addToDebugLog, (, String, str, ), {, debugLog, ., append, (]
[(, ), ;, }, @, Override, void, addToDebugLog, (, String, str, ), {, debugLog, ., append, (, str, ), ;]
[(, ), ;, }, @, Override, void, addToDebugLog, (, String, str, ), {, debugLog, ., append, (, str, ), ;]
[@, Override, void, addToDebugLog, (, String, str, ), {, debugLog, ., append, (, str, ), ;, debugLog, ., append, (]
[addToDebugLog, (, String, str, ), {, debugLog, ., append, (, str, ), ;, debugLog, ., append, (, '\n', ), ;]
[addToDebugLog, (, String, str, ), {, debugLog, ., append, (, str, ), ;, debugLog, ., append, (, '\n', ), ;]
[), {, debugLog, ., append, (, str, ), ;, debugLog, ., append, (, '\n', ), ;, logger, ., fine, (]
[;, logger, ., fine, (, str, ), ;, }, @, Override, SourceFile, getSourceFileByName, (, String, sourceName, ), {, if, (]
[;, logger, ., fine, (, str, ), ;, }, @, Override, SourceFile, getSourceFileByName, (, String, sourceName, ), {, if, (]
[., fine, (, str, ), ;, }, @, Override, SourceFile, getSourceFileByName, (, String, sourceName, ), {, if, (, sourceName, !=]
[}, @, Override, SourceFile, getSourceFileByName, (, String, sourceName, ), {, if, (, sourceName, !=, null, ), {, CompilerInput, input, =]
[}, @, Override, SourceFile, getSourceFileByName, (, String, sourceName, ), {, if, (, sourceName, !=, null, ), {, CompilerInput, input, =]
[getSourceFileByName, (, String, sourceName, ), {, if, (, sourceName, !=, null, ), {, CompilerInput, input, =, inputsById, ., get, (]
[sourceName, ), {, if, (, sourceName, !=, null, ), {, CompilerInput, input, =, inputsById, ., get, (, new, InputId, (]
[!=, null, ), {, CompilerInput, input, =, inputsById, ., get, (, new, InputId, (, sourceName, ), ), ;, if, (]
[!=, null, ), {, CompilerInput, input, =, inputsById, ., get, (, new, InputId, (, sourceName, ), ), ;, if, (]
[), {, CompilerInput, input, =, inputsById, ., get, (, new, InputId, (, sourceName, ), ), ;, if, (, input, !=]
[=, inputsById, ., get, (, new, InputId, (, sourceName, ), ), ;, if, (, input, !=, null, ), {, return]
[=, inputsById, ., get, (, new, InputId, (, sourceName, ), ), ;, if, (, input, !=, null, ), {, return]
[), ), ;, if, (, input, !=, null, ), {, return, input, ., getSourceFile, (, ), ;, }, }, return]
[}, return, null, ;, }, @, Override, public, String, getSourceLine, (, String, sourceName, ,, int, lineNumber, ), {, if, (]
[}, return, null, ;, }, @, Override, public, String, getSourceLine, (, String, sourceName, ,, int, lineNumber, ), {, if, (]
[null, ;, }, @, Override, public, String, getSourceLine, (, String, sourceName, ,, int, lineNumber, ), {, if, (, lineNumber, <]
[Override, public, String, getSourceLine, (, String, sourceName, ,, int, lineNumber, ), {, if, (, lineNumber, <, 1, ), {, return]
[sourceName, ,, int, lineNumber, ), {, if, (, lineNumber, <, 1, ), {, return, null, ;, }, SourceFile, input, =]
[int, lineNumber, ), {, if, (, lineNumber, <, 1, ), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (]
[(, lineNumber, <, 1, ), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (]
[(, lineNumber, <, 1, ), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (]
[<, 1, ), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=]
[return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=, null, ), {, return]
[return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=, null, ), {, return]
[SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=, null, ), {, return, input, ., getLine, (]
[sourceName, ), ;, if, (, input, !=, null, ), {, return, input, ., getLine, (, lineNumber, ), ;, }, return]
[}, return, null, ;, }, @, Override, public, Region, getSourceRegion, (, String, sourceName, ,, int, lineNumber, ), {, if, (]
[}, return, null, ;, }, @, Override, public, Region, getSourceRegion, (, String, sourceName, ,, int, lineNumber, ), {, if, (]
[null, ;, }, @, Override, public, Region, getSourceRegion, (, String, sourceName, ,, int, lineNumber, ), {, if, (, lineNumber, <]
[Override, public, Region, getSourceRegion, (, String, sourceName, ,, int, lineNumber, ), {, if, (, lineNumber, <, 1, ), {, return]
[sourceName, ,, int, lineNumber, ), {, if, (, lineNumber, <, 1, ), {, return, null, ;, }, SourceFile, input, =]
[int, lineNumber, ), {, if, (, lineNumber, <, 1, ), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (]
[(, lineNumber, <, 1, ), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (]
[(, lineNumber, <, 1, ), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (]
[<, 1, ), {, return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=]
[return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=, null, ), {, return]
[return, null, ;, }, SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=, null, ), {, return]
[SourceFile, input, =, getSourceFileByName, (, sourceName, ), ;, if, (, input, !=, null, ), {, return, input, ., getRegion, (]
[sourceName, ), ;, if, (, input, !=, null, ), {, return, input, ., getRegion, (, lineNumber, ), ;, }, return]
[(, lineNumber, ), ;, }, return, null, ;, }, @, Override, Node, getNodeForCodeInsertion, (, JSModule, module, ), {, if, (]
[(, lineNumber, ), ;, }, return, null, ;, }, @, Override, Node, getNodeForCodeInsertion, (, JSModule, module, ), {, if, (]
[), ;, }, return, null, ;, }, @, Override, Node, getNodeForCodeInsertion, (, JSModule, module, ), {, if, (, module, ==]
[;, }, @, Override, Node, getNodeForCodeInsertion, (, JSModule, module, ), {, if, (, module, ==, null, ), {, if, (]
[;, }, @, Override, Node, getNodeForCodeInsertion, (, JSModule, module, ), {, if, (, module, ==, null, ), {, if, (]
[module, ), {, if, (, module, ==, null, ), {, if, (, inputs, ., isEmpty, (, ), ), {, throw]
[if, (, module, ==, null, ), {, if, (, inputs, ., isEmpty, (, ), ), {, throw, new, IllegalStateException, (]
[), {, if, (, inputs, ., isEmpty, (, ), ), {, throw, new, IllegalStateException, (, "No inputs", ), ;, }, return]
[), {, if, (, inputs, ., isEmpty, (, ), ), {, throw, new, IllegalStateException, (, "No inputs", ), ;, }, return]
[), {, if, (, inputs, ., isEmpty, (, ), ), {, throw, new, IllegalStateException, (, "No inputs", ), ;, }, return]
[inputs, ., isEmpty, (, ), ), {, throw, new, IllegalStateException, (, "No inputs", ), ;, }, return, inputs, ., get, (]
[), {, throw, new, IllegalStateException, (, "No inputs", ), ;, }, return, inputs, ., get, (, 0, ), ., getAstRoot, (]
[return, inputs, ., get, (, 0, ), ., getAstRoot, (, this, ), ;, }, List, <, CompilerInput, >, moduleInputs, =]
[return, inputs, ., get, (, 0, ), ., getAstRoot, (, this, ), ;, }, List, <, CompilerInput, >, moduleInputs, =]
[getAstRoot, (, this, ), ;, }, List, <, CompilerInput, >, moduleInputs, =, module, ., getInputs, (, ), ;, if, (]
[getAstRoot, (, this, ), ;, }, List, <, CompilerInput, >, moduleInputs, =, module, ., getInputs, (, ), ;, if, (]
[getAstRoot, (, this, ), ;, }, List, <, CompilerInput, >, moduleInputs, =, module, ., getInputs, (, ), ;, if, (]
[List, <, CompilerInput, >, moduleInputs, =, module, ., getInputs, (, ), ;, if, (, moduleInputs, ., size, (, ), >]
[moduleInputs, =, module, ., getInputs, (, ), ;, if, (, moduleInputs, ., size, (, ), >, 0, ), {, return]
[moduleInputs, =, module, ., getInputs, (, ), ;, if, (, moduleInputs, ., size, (, ), >, 0, ), {, return]
[moduleInputs, =, module, ., getInputs, (, ), ;, if, (, moduleInputs, ., size, (, ), >, 0, ), {, return]
[getInputs, (, ), ;, if, (, moduleInputs, ., size, (, ), >, 0, ), {, return, moduleInputs, ., get, (]
[(, moduleInputs, ., size, (, ), >, 0, ), {, return, moduleInputs, ., get, (, 0, ), ., getAstRoot, (]
[), >, 0, ), {, return, moduleInputs, ., get, (, 0, ), ., getAstRoot, (, this, ), ;, }, throw]
[), {, return, moduleInputs, ., get, (, 0, ), ., getAstRoot, (, this, ), ;, }, throw, new, IllegalStateException, (]
[(, this, ), ;, }, throw, new, IllegalStateException, (, "Root module has no inputs", ), ;, }, public, SourceMap, getSourceMap, (, ), {, return]
["Root module has no inputs", ), ;, }, public, SourceMap, getSourceMap, (, ), {, return, sourceMap, ;, }, VariableMap, getVariableMap, (, ), {, return]
["Root module has no inputs", ), ;, }, public, SourceMap, getSourceMap, (, ), {, return, sourceMap, ;, }, VariableMap, getVariableMap, (, ), {, return]
["Root module has no inputs", ), ;, }, public, SourceMap, getSourceMap, (, ), {, return, sourceMap, ;, }, VariableMap, getVariableMap, (, ), {, return]
[), {, return, getPassConfig, (, ), ., getIntermediateState, (, ), ., variableMap, ;, }, VariableMap, getPropertyMap, (, ), {, return]
[), {, return, getPassConfig, (, ), ., getIntermediateState, (, ), ., variableMap, ;, }, VariableMap, getPropertyMap, (, ), {, return]
[), {, return, getPassConfig, (, ), ., getIntermediateState, (, ), ., variableMap, ;, }, VariableMap, getPropertyMap, (, ), {, return]
[), {, return, getPassConfig, (, ), ., getIntermediateState, (, ), ., propertyMap, ;, }, CompilerOptions, getOptions, (, ), {, return]
[), ., propertyMap, ;, }, CompilerOptions, getOptions, (, ), {, return, options, ;, }, FunctionInformationMap, getFunctionalInformationMap, (, ), {, return]
[;, }, FunctionInformationMap, getFunctionalInformationMap, (, ), {, return, functionInformationMap, ;, }, public, static, void, setLoggingLevel, (, Level, level, ), {]
[;, }, FunctionInformationMap, getFunctionalInformationMap, (, ), {, return, functionInformationMap, ;, }, public, static, void, setLoggingLevel, (, Level, level, ), {]
[(, ), {, return, functionInformationMap, ;, }, public, static, void, setLoggingLevel, (, Level, level, ), {, logger, ., setLevel, (]
[), {, logger, ., setLevel, (, level, ), ;, }, public, String, getAstDotGraph, (, ), throws, IOException, {, if, (]
[), {, logger, ., setLevel, (, level, ), ;, }, public, String, getAstDotGraph, (, ), throws, IOException, {, if, (]
[logger, ., setLevel, (, level, ), ;, }, public, String, getAstDotGraph, (, ), throws, IOException, {, if, (, jsRoot, !=]
[;, }, public, String, getAstDotGraph, (, ), throws, IOException, {, if, (, jsRoot, !=, null, ), {, ControlFlowAnalysis, cfa, =]
[String, getAstDotGraph, (, ), throws, IOException, {, if, (, jsRoot, !=, null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (]
[(, ), throws, IOException, {, if, (, jsRoot, !=, null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,]
[throws, IOException, {, if, (, jsRoot, !=, null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,]
[if, (, jsRoot, !=, null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;]
[if, (, jsRoot, !=, null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;]
[null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;, cfa, ., process, (]
[{, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;, cfa, ., process, (, null, ,]
[new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;, cfa, ., process, (, null, ,, jsRoot, ), ;, return]
[new, ControlFlowAnalysis, (, this, ,, true, ,, false, ), ;, cfa, ., process, (, null, ,, jsRoot, ), ;, return]
[,, true, ,, false, ), ;, cfa, ., process, (, null, ,, jsRoot, ), ;, return, DotFormatter, ., toDot, (]
[,, false, ), ;, cfa, ., process, (, null, ,, jsRoot, ), ;, return, DotFormatter, ., toDot, (, jsRoot, ,]
[,, false, ), ;, cfa, ., process, (, null, ,, jsRoot, ), ;, return, DotFormatter, ., toDot, (, jsRoot, ,]
[), ;, return, DotFormatter, ., toDot, (, jsRoot, ,, cfa, ., getCfg, (, ), ), ;, }, else, {, return]
[), ;, }, else, {, return, "", ;, }, }, @, Override, public, ErrorManager, getErrorManager, (, ), {, if, (]
[), ;, }, else, {, return, "", ;, }, }, @, Override, public, ErrorManager, getErrorManager, (, ), {, if, (]
[}, else, {, return, "", ;, }, }, @, Override, public, ErrorManager, getErrorManager, (, ), {, if, (, options, ==]
[return, "", ;, }, }, @, Override, public, ErrorManager, getErrorManager, (, ), {, if, (, options, ==, null, ), {]
[;, }, }, @, Override, public, ErrorManager, getErrorManager, (, ), {, if, (, options, ==, null, ), {, initOptions, (]
[getErrorManager, (, ), {, if, (, options, ==, null, ), {, initOptions, (, newCompilerOptions, (, ), ), ;, }, return]
[(, ), ), ;, }, return, errorManager, ;, }, @, Override, List, <, CompilerInput, >, getInputsInOrder, (, ), {, return]
[(, ), ), ;, }, return, errorManager, ;, }, @, Override, List, <, CompilerInput, >, getInputsInOrder, (, ), {, return]
[;, }, @, Override, List, <, CompilerInput, >, getInputsInOrder, (, ), {, return, Collections, ., <, CompilerInput, >, unmodifiableList, (]
[CompilerInput, >, unmodifiableList, (, inputs, ), ;, }, public, Map, <, InputId, ,, CompilerInput, >, getInputsById, (, ), {, return]
[CompilerInput, >, unmodifiableList, (, inputs, ), ;, }, public, Map, <, InputId, ,, CompilerInput, >, getInputsById, (, ), {, return]
[inputs, ), ;, }, public, Map, <, InputId, ,, CompilerInput, >, getInputsById, (, ), {, return, Collections, ., unmodifiableMap, (]
[), {, return, Collections, ., unmodifiableMap, (, inputsById, ), ;, }, List, <, CompilerInput, >, getExternsInOrder, (, ), {, return]
[), {, return, Collections, ., unmodifiableMap, (, inputsById, ), ;, }, List, <, CompilerInput, >, getExternsInOrder, (, ), {, return]
[inputsById, ), ;, }, List, <, CompilerInput, >, getExternsInOrder, (, ), {, return, Collections, ., <, CompilerInput, >, unmodifiableList, (]
[>, unmodifiableList, (, externs, ), ;, }, public, static, class, IntermediateState, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[Node, >, injectedLibraries, ;, private, IntermediateState, (, ), {, }, }, public, IntermediateState, getState, (, ), {, IntermediateState, state, =]
[IntermediateState, (, ), {, }, }, public, IntermediateState, getState, (, ), {, IntermediateState, state, =, new, IntermediateState, (, ), ;]
[IntermediateState, (, ), {, }, }, public, IntermediateState, getState, (, ), {, IntermediateState, state, =, new, IntermediateState, (, ), ;]
[}, }, public, IntermediateState, getState, (, ), {, IntermediateState, state, =, new, IntermediateState, (, ), ;, state, ., externsRoot, =]
[public, IntermediateState, getState, (, ), {, IntermediateState, state, =, new, IntermediateState, (, ), ;, state, ., externsRoot, =, externsRoot, ;]
[public, IntermediateState, getState, (, ), {, IntermediateState, state, =, new, IntermediateState, (, ), ;, state, ., externsRoot, =, externsRoot, ;]
[), {, IntermediateState, state, =, new, IntermediateState, (, ), ;, state, ., externsRoot, =, externsRoot, ;, state, ., jsRoot, =]
[IntermediateState, state, =, new, IntermediateState, (, ), ;, state, ., externsRoot, =, externsRoot, ;, state, ., jsRoot, =, jsRoot, ;]
[IntermediateState, state, =, new, IntermediateState, (, ), ;, state, ., externsRoot, =, externsRoot, ;, state, ., jsRoot, =, jsRoot, ;]
[IntermediateState, (, ), ;, state, ., externsRoot, =, externsRoot, ;, state, ., jsRoot, =, jsRoot, ;, state, ., externs, =]
[), ;, state, ., externsRoot, =, externsRoot, ;, state, ., jsRoot, =, jsRoot, ;, state, ., externs, =, externs, ;]
[), ;, state, ., externsRoot, =, externsRoot, ;, state, ., jsRoot, =, jsRoot, ;, state, ., externs, =, externs, ;]
[externsRoot, =, externsRoot, ;, state, ., jsRoot, =, jsRoot, ;, state, ., externs, =, externs, ;, state, ., inputs, =]
[externsRoot, ;, state, ., jsRoot, =, jsRoot, ;, state, ., externs, =, externs, ;, state, ., inputs, =, inputs, ;]
[externsRoot, ;, state, ., jsRoot, =, jsRoot, ;, state, ., externs, =, externs, ;, state, ., inputs, =, inputs, ;]
[jsRoot, =, jsRoot, ;, state, ., externs, =, externs, ;, state, ., inputs, =, inputs, ;, state, ., modules, =]
[jsRoot, ;, state, ., externs, =, externs, ;, state, ., inputs, =, inputs, ;, state, ., modules, =, modules, ;]
[jsRoot, ;, state, ., externs, =, externs, ;, state, ., inputs, =, inputs, ;, state, ., modules, =, modules, ;]
[externs, =, externs, ;, state, ., inputs, =, inputs, ;, state, ., modules, =, modules, ;, state, ., passConfigState, =]
[externs, =, externs, ;, state, ., inputs, =, inputs, ;, state, ., modules, =, modules, ;, state, ., passConfigState, =]
[inputs, ;, state, ., modules, =, modules, ;, state, ., passConfigState, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;]
[inputs, ;, state, ., modules, =, modules, ;, state, ., passConfigState, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;]
[modules, =, modules, ;, state, ., passConfigState, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;, state, ., typeRegistry, =]
[modules, ;, state, ., passConfigState, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;, state, ., typeRegistry, =, typeRegistry, ;]
[modules, ;, state, ., passConfigState, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;, state, ., typeRegistry, =, typeRegistry, ;]
[passConfigState, =, getPassConfig, (, ), ., getIntermediateState, (, ), ;, state, ., typeRegistry, =, typeRegistry, ;, state, ., lifeCycleStage, =]
[), ., getIntermediateState, (, ), ;, state, ., typeRegistry, =, typeRegistry, ;, state, ., lifeCycleStage, =, getLifeCycleStage, (, ), ;]
[), ., getIntermediateState, (, ), ;, state, ., typeRegistry, =, typeRegistry, ;, state, ., lifeCycleStage, =, getLifeCycleStage, (, ), ;]
[), ;, state, ., typeRegistry, =, typeRegistry, ;, state, ., lifeCycleStage, =, getLifeCycleStage, (, ), ;, state, ., injectedLibraries, =]
[), ;, state, ., typeRegistry, =, typeRegistry, ;, state, ., lifeCycleStage, =, getLifeCycleStage, (, ), ;, state, ., injectedLibraries, =]
[typeRegistry, =, typeRegistry, ;, state, ., lifeCycleStage, =, getLifeCycleStage, (, ), ;, state, ., injectedLibraries, =, Maps, ., newLinkedHashMap, (]
[state, ., lifeCycleStage, =, getLifeCycleStage, (, ), ;, state, ., injectedLibraries, =, Maps, ., newLinkedHashMap, (, injectedLibraries, ), ;, return]
[=, Maps, ., newLinkedHashMap, (, injectedLibraries, ), ;, return, state, ;, }, public, void, setState, (, IntermediateState, state, ), {]
[., newLinkedHashMap, (, injectedLibraries, ), ;, return, state, ;, }, public, void, setState, (, IntermediateState, state, ), {, externsRoot, =]
[., newLinkedHashMap, (, injectedLibraries, ), ;, return, state, ;, }, public, void, setState, (, IntermediateState, state, ), {, externsRoot, =]
[), ;, return, state, ;, }, public, void, setState, (, IntermediateState, state, ), {, externsRoot, =, state, ., externsRoot, ;]
[return, state, ;, }, public, void, setState, (, IntermediateState, state, ), {, externsRoot, =, state, ., externsRoot, ;, jsRoot, =]
[return, state, ;, }, public, void, setState, (, IntermediateState, state, ), {, externsRoot, =, state, ., externsRoot, ;, jsRoot, =]
[public, void, setState, (, IntermediateState, state, ), {, externsRoot, =, state, ., externsRoot, ;, jsRoot, =, state, ., jsRoot, ;]
[setState, (, IntermediateState, state, ), {, externsRoot, =, state, ., externsRoot, ;, jsRoot, =, state, ., jsRoot, ;, externs, =]
[setState, (, IntermediateState, state, ), {, externsRoot, =, state, ., externsRoot, ;, jsRoot, =, state, ., jsRoot, ;, externs, =]
[), {, externsRoot, =, state, ., externsRoot, ;, jsRoot, =, state, ., jsRoot, ;, externs, =, state, ., externs, ;]
[externsRoot, =, state, ., externsRoot, ;, jsRoot, =, state, ., jsRoot, ;, externs, =, state, ., externs, ;, inputs, =]
[externsRoot, =, state, ., externsRoot, ;, jsRoot, =, state, ., jsRoot, ;, externs, =, state, ., externs, ;, inputs, =]
[externsRoot, ;, jsRoot, =, state, ., jsRoot, ;, externs, =, state, ., externs, ;, inputs, =, state, ., inputs, ;]
[jsRoot, =, state, ., jsRoot, ;, externs, =, state, ., externs, ;, inputs, =, state, ., inputs, ;, modules, =]
[jsRoot, =, state, ., jsRoot, ;, externs, =, state, ., externs, ;, inputs, =, state, ., inputs, ;, modules, =]
[jsRoot, ;, externs, =, state, ., externs, ;, inputs, =, state, ., inputs, ;, modules, =, state, ., modules, ;]
[externs, =, state, ., externs, ;, inputs, =, state, ., inputs, ;, modules, =, state, ., modules, ;, passes, =]
[externs, ;, inputs, =, state, ., inputs, ;, modules, =, state, ., modules, ;, passes, =, createPassConfigInternal, (, ), ;]
[externs, ;, inputs, =, state, ., inputs, ;, modules, =, state, ., modules, ;, passes, =, createPassConfigInternal, (, ), ;]
[inputs, ;, modules, =, state, ., modules, ;, passes, =, createPassConfigInternal, (, ), ;, getPassConfig, (, ), ., setIntermediateState, (]
[inputs, ;, modules, =, state, ., modules, ;, passes, =, createPassConfigInternal, (, ), ;, getPassConfig, (, ), ., setIntermediateState, (]
[., modules, ;, passes, =, createPassConfigInternal, (, ), ;, getPassConfig, (, ), ., setIntermediateState, (, state, ., passConfigState, ), ;]
[;, passes, =, createPassConfigInternal, (, ), ;, getPassConfig, (, ), ., setIntermediateState, (, state, ., passConfigState, ), ;, typeRegistry, =]
[;, passes, =, createPassConfigInternal, (, ), ;, getPassConfig, (, ), ., setIntermediateState, (, state, ., passConfigState, ), ;, typeRegistry, =]
[(, ), ;, getPassConfig, (, ), ., setIntermediateState, (, state, ., passConfigState, ), ;, typeRegistry, =, state, ., typeRegistry, ;]
[;, getPassConfig, (, ), ., setIntermediateState, (, state, ., passConfigState, ), ;, typeRegistry, =, state, ., typeRegistry, ;, setLifeCycleStage, (]
[;, getPassConfig, (, ), ., setIntermediateState, (, state, ., passConfigState, ), ;, typeRegistry, =, state, ., typeRegistry, ;, setLifeCycleStage, (]
[setIntermediateState, (, state, ., passConfigState, ), ;, typeRegistry, =, state, ., typeRegistry, ;, setLifeCycleStage, (, state, ., lifeCycleStage, ), ;]
[setIntermediateState, (, state, ., passConfigState, ), ;, typeRegistry, =, state, ., typeRegistry, ;, setLifeCycleStage, (, state, ., lifeCycleStage, ), ;]
[;, typeRegistry, =, state, ., typeRegistry, ;, setLifeCycleStage, (, state, ., lifeCycleStage, ), ;, injectedLibraries, ., clear, (, ), ;]
[;, typeRegistry, =, state, ., typeRegistry, ;, setLifeCycleStage, (, state, ., lifeCycleStage, ), ;, injectedLibraries, ., clear, (, ), ;]
[., typeRegistry, ;, setLifeCycleStage, (, state, ., lifeCycleStage, ), ;, injectedLibraries, ., clear, (, ), ;, injectedLibraries, ., putAll, (]
[., typeRegistry, ;, setLifeCycleStage, (, state, ., lifeCycleStage, ), ;, injectedLibraries, ., clear, (, ), ;, injectedLibraries, ., putAll, (]
[., putAll, (, state, ., injectedLibraries, ), ;, }, @, VisibleForTesting, List, <, CompilerInput, >, getInputsForTesting, (, ), {, return]
[>, getInputsForTesting, (, ), {, return, inputs, ;, }, @, VisibleForTesting, List, <, CompilerInput, >, getExternsForTesting, (, ), {, return]
[List, <, CompilerInput, >, getExternsForTesting, (, ), {, return, externs, ;, }, @, Override, boolean, hasRegExpGlobalReferences, (, ), {, return]
[@, Override, boolean, hasRegExpGlobalReferences, (, ), {, return, hasRegExpGlobalReferences, ;, }, @, Override, void, setHasRegExpGlobalReferences, (, boolean, references, ), {]
[boolean, hasRegExpGlobalReferences, (, ), {, return, hasRegExpGlobalReferences, ;, }, @, Override, void, setHasRegExpGlobalReferences, (, boolean, references, ), {, hasRegExpGlobalReferences, =]
[references, ;, }, @, Override, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, collectionRoot, ), {]
[references, ;, }, @, Override, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, collectionRoot, ), {]
[Override, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, collectionRoot, ), {, Preconditions, ., checkState, (]
[Override, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, collectionRoot, ), {, Preconditions, ., checkState, (]
[Override, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, collectionRoot, ), {, Preconditions, ., checkState, (]
[Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, collectionRoot, ), {, Preconditions, ., checkState, (, collectionRoot, ., isScript, (, ), ||]
[Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, collectionRoot, ), {, Preconditions, ., checkState, (, collectionRoot, ., isScript, (, ), ||]
[{, Preconditions, ., checkState, (, collectionRoot, ., isScript, (, ), ||, collectionRoot, ., isBlock, (, ), ), ;, if, (]
[{, Preconditions, ., checkState, (, collectionRoot, ., isScript, (, ), ||, collectionRoot, ., isBlock, (, ), ), ;, if, (]
[., checkState, (, collectionRoot, ., isScript, (, ), ||, collectionRoot, ., isBlock, (, ), ), ;, if, (, globalRefMap, ==]
[collectionRoot, ., isScript, (, ), ||, collectionRoot, ., isBlock, (, ), ), ;, if, (, globalRefMap, ==, null, ), {]
[isScript, (, ), ||, collectionRoot, ., isBlock, (, ), ), ;, if, (, globalRefMap, ==, null, ), {, globalRefMap, =]
[||, collectionRoot, ., isBlock, (, ), ), ;, if, (, globalRefMap, ==, null, ), {, globalRefMap, =, new, GlobalVarReferenceMap, (]
[(, ), ), ;, if, (, globalRefMap, ==, null, ), {, globalRefMap, =, new, GlobalVarReferenceMap, (, getInputsInOrder, (, ), ,]
[globalRefMap, ==, null, ), {, globalRefMap, =, new, GlobalVarReferenceMap, (, getInputsInOrder, (, ), ,, getExternsInOrder, (, ), ), ;, }]
[globalRefMap, ==, null, ), {, globalRefMap, =, new, GlobalVarReferenceMap, (, getInputsInOrder, (, ), ,, getExternsInOrder, (, ), ), ;, }]
[{, globalRefMap, =, new, GlobalVarReferenceMap, (, getInputsInOrder, (, ), ,, getExternsInOrder, (, ), ), ;, }, globalRefMap, ., updateGlobalVarReferences, (]
[=, new, GlobalVarReferenceMap, (, getInputsInOrder, (, ), ,, getExternsInOrder, (, ), ), ;, }, globalRefMap, ., updateGlobalVarReferences, (, refMapPatch, ,]
[;, }, globalRefMap, ., updateGlobalVarReferences, (, refMapPatch, ,, collectionRoot, ), ;, }, @, Override, GlobalVarReferenceMap, getGlobalVarReferences, (, ), {, return]
[@, Override, GlobalVarReferenceMap, getGlobalVarReferences, (, ), {, return, globalRefMap, ;, }, @, Override, CompilerInput, getSynthesizedExternsInput, (, ), {, if, (]
[@, Override, GlobalVarReferenceMap, getGlobalVarReferences, (, ), {, return, globalRefMap, ;, }, @, Override, CompilerInput, getSynthesizedExternsInput, (, ), {, if, (]
[GlobalVarReferenceMap, getGlobalVarReferences, (, ), {, return, globalRefMap, ;, }, @, Override, CompilerInput, getSynthesizedExternsInput, (, ), {, if, (, synthesizedExternsInput, ==]
[), {, return, globalRefMap, ;, }, @, Override, CompilerInput, getSynthesizedExternsInput, (, ), {, if, (, synthesizedExternsInput, ==, null, ), {]
[return, globalRefMap, ;, }, @, Override, CompilerInput, getSynthesizedExternsInput, (, ), {, if, (, synthesizedExternsInput, ==, null, ), {, synthesizedExternsInput, =]
[;, }, @, Override, CompilerInput, getSynthesizedExternsInput, (, ), {, if, (, synthesizedExternsInput, ==, null, ), {, synthesizedExternsInput, =, newExternInput, (]
[getSynthesizedExternsInput, (, ), {, if, (, synthesizedExternsInput, ==, null, ), {, synthesizedExternsInput, =, newExternInput, (, SYNTHETIC_EXTERNS, ), ;, }, return]
[=, newExternInput, (, SYNTHETIC_EXTERNS, ), ;, }, return, synthesizedExternsInput, ;, }, @, Override, public, double, getProgress, (, ), {, return]
[@, Override, public, double, getProgress, (, ), {, return, progress, ;, }, @, Override, String, getLastPassName, (, ), {, return]
[getLastPassName, (, ), {, return, lastPassName, ;, }, @, Override, void, setProgress, (, double, newProgress, ,, String, passName, ), {]
[getLastPassName, (, ), {, return, lastPassName, ;, }, @, Override, void, setProgress, (, double, newProgress, ,, String, passName, ), {]
[return, lastPassName, ;, }, @, Override, void, setProgress, (, double, newProgress, ,, String, passName, ), {, this, ., lastPassName, =]
[@, Override, void, setProgress, (, double, newProgress, ,, String, passName, ), {, this, ., lastPassName, =, passName, ;, if, (]
[@, Override, void, setProgress, (, double, newProgress, ,, String, passName, ), {, this, ., lastPassName, =, passName, ;, if, (]
[void, setProgress, (, double, newProgress, ,, String, passName, ), {, this, ., lastPassName, =, passName, ;, if, (, newProgress, >]
[double, newProgress, ,, String, passName, ), {, this, ., lastPassName, =, passName, ;, if, (, newProgress, >, 1.0, ), {]
[,, String, passName, ), {, this, ., lastPassName, =, passName, ;, if, (, newProgress, >, 1.0, ), {, progress, =]
[this, ., lastPassName, =, passName, ;, if, (, newProgress, >, 1.0, ), {, progress, =, 1.0, ;, }, else, {]
[lastPassName, =, passName, ;, if, (, newProgress, >, 1.0, ), {, progress, =, 1.0, ;, }, else, {, progress, =]
[}, else, {, progress, =, newProgress, ;, }, }, public, void, replaceScript, (, JsAst, ast, ), {, CompilerInput, input, =]
[}, else, {, progress, =, newProgress, ;, }, }, public, void, replaceScript, (, JsAst, ast, ), {, CompilerInput, input, =]
[=, newProgress, ;, }, }, public, void, replaceScript, (, JsAst, ast, ), {, CompilerInput, input, =, this, ., getInput, (]
[=, newProgress, ;, }, }, public, void, replaceScript, (, JsAst, ast, ), {, CompilerInput, input, =, this, ., getInput, (]
[JsAst, ast, ), {, CompilerInput, input, =, this, ., getInput, (, ast, ., getInputId, (, ), ), ;, if, (]
[ast, ), {, CompilerInput, input, =, this, ., getInput, (, ast, ., getInputId, (, ), ), ;, if, (, !]
[{, CompilerInput, input, =, this, ., getInput, (, ast, ., getInputId, (, ), ), ;, if, (, !, replaceIncrementalSourceAst, (]
[getInputId, (, ), ), ;, if, (, !, replaceIncrementalSourceAst, (, ast, ), ), {, return, ;, }, Node, originalRoot, =]
[getInputId, (, ), ), ;, if, (, !, replaceIncrementalSourceAst, (, ast, ), ), {, return, ;, }, Node, originalRoot, =]
[;, if, (, !, replaceIncrementalSourceAst, (, ast, ), ), {, return, ;, }, Node, originalRoot, =, input, ., getAstRoot, (]
[!, replaceIncrementalSourceAst, (, ast, ), ), {, return, ;, }, Node, originalRoot, =, input, ., getAstRoot, (, this, ), ;]
[(, ast, ), ), {, return, ;, }, Node, originalRoot, =, input, ., getAstRoot, (, this, ), ;, processNewScript, (]
[), ), {, return, ;, }, Node, originalRoot, =, input, ., getAstRoot, (, this, ), ;, processNewScript, (, ast, ,]
[), ;, processNewScript, (, ast, ,, originalRoot, ), ;, }, public, void, addNewScript, (, JsAst, ast, ), {, if, (]
[;, processNewScript, (, ast, ,, originalRoot, ), ;, }, public, void, addNewScript, (, JsAst, ast, ), {, if, (, !]
[(, ast, ,, originalRoot, ), ;, }, public, void, addNewScript, (, JsAst, ast, ), {, if, (, !, addNewSourceAst, (]
[(, JsAst, ast, ), {, if, (, !, addNewSourceAst, (, ast, ), ), {, return, ;, }, Node, emptyScript, =]
[), {, if, (, !, addNewSourceAst, (, ast, ), ), {, return, ;, }, Node, emptyScript, =, new, Node, (]
[), {, if, (, !, addNewSourceAst, (, ast, ), ), {, return, ;, }, Node, emptyScript, =, new, Node, (]
[), ), {, return, ;, }, Node, emptyScript, =, new, Node, (, Token, ., SCRIPT, ), ;, InputId, inputId, =]
[), ), {, return, ;, }, Node, emptyScript, =, new, Node, (, Token, ., SCRIPT, ), ;, InputId, inputId, =]
[Node, emptyScript, =, new, Node, (, Token, ., SCRIPT, ), ;, InputId, inputId, =, ast, ., getInputId, (, ), ;]
[Node, emptyScript, =, new, Node, (, Token, ., SCRIPT, ), ;, InputId, inputId, =, ast, ., getInputId, (, ), ;]
[Node, (, Token, ., SCRIPT, ), ;, InputId, inputId, =, ast, ., getInputId, (, ), ;, emptyScript, ., setInputId, (]
[., SCRIPT, ), ;, InputId, inputId, =, ast, ., getInputId, (, ), ;, emptyScript, ., setInputId, (, inputId, ), ;]
[., SCRIPT, ), ;, InputId, inputId, =, ast, ., getInputId, (, ), ;, emptyScript, ., setInputId, (, inputId, ), ;]
[InputId, inputId, =, ast, ., getInputId, (, ), ;, emptyScript, ., setInputId, (, inputId, ), ;, emptyScript, ., setStaticSourceFile, (]
[InputId, inputId, =, ast, ., getInputId, (, ), ;, emptyScript, ., setInputId, (, inputId, ), ;, emptyScript, ., setStaticSourceFile, (]
[., getInputId, (, ), ;, emptyScript, ., setInputId, (, inputId, ), ;, emptyScript, ., setStaticSourceFile, (, SourceFile, ., fromCode, (]
[., getInputId, (, ), ;, emptyScript, ., setInputId, (, inputId, ), ;, emptyScript, ., setStaticSourceFile, (, SourceFile, ., fromCode, (]
[., setInputId, (, inputId, ), ;, emptyScript, ., setStaticSourceFile, (, SourceFile, ., fromCode, (, inputId, ., getIdName, (, ), ,]
[), ;, emptyScript, ., setStaticSourceFile, (, SourceFile, ., fromCode, (, inputId, ., getIdName, (, ), ,, "", ), ), ;]
[emptyScript, ., setStaticSourceFile, (, SourceFile, ., fromCode, (, inputId, ., getIdName, (, ), ,, "", ), ), ;, processNewScript, (]
[setStaticSourceFile, (, SourceFile, ., fromCode, (, inputId, ., getIdName, (, ), ,, "", ), ), ;, processNewScript, (, ast, ,]
[ast, ,, emptyScript, ), ;, }, private, void, processNewScript, (, JsAst, ast, ,, Node, originalRoot, ), {, Node, js, =]
[ast, ,, emptyScript, ), ;, }, private, void, processNewScript, (, JsAst, ast, ,, Node, originalRoot, ), {, Node, js, =]
[;, }, private, void, processNewScript, (, JsAst, ast, ,, Node, originalRoot, ), {, Node, js, =, ast, ., getAstRoot, (]
[void, processNewScript, (, JsAst, ast, ,, Node, originalRoot, ), {, Node, js, =, ast, ., getAstRoot, (, this, ), ;]
[void, processNewScript, (, JsAst, ast, ,, Node, originalRoot, ), {, Node, js, =, ast, ., getAstRoot, (, this, ), ;]
[ast, ,, Node, originalRoot, ), {, Node, js, =, ast, ., getAstRoot, (, this, ), ;, Preconditions, ., checkNotNull, (]
[originalRoot, ), {, Node, js, =, ast, ., getAstRoot, (, this, ), ;, Preconditions, ., checkNotNull, (, js, ), ;]
[{, Node, js, =, ast, ., getAstRoot, (, this, ), ;, Preconditions, ., checkNotNull, (, js, ), ;, runHotSwap, (]
[js, =, ast, ., getAstRoot, (, this, ), ;, Preconditions, ., checkNotNull, (, js, ), ;, runHotSwap, (, originalRoot, ,]
[ast, ., getAstRoot, (, this, ), ;, Preconditions, ., checkNotNull, (, js, ), ;, runHotSwap, (, originalRoot, ,, js, ,]
[ast, ., getAstRoot, (, this, ), ;, Preconditions, ., checkNotNull, (, js, ), ;, runHotSwap, (, originalRoot, ,, js, ,]
[Preconditions, ., checkNotNull, (, js, ), ;, runHotSwap, (, originalRoot, ,, js, ,, this, ., getCleanupPassConfig, (, ), ), ;]
[checkNotNull, (, js, ), ;, runHotSwap, (, originalRoot, ,, js, ,, this, ., getCleanupPassConfig, (, ), ), ;, runHotSwapPass, (]
[js, ), ;, runHotSwap, (, originalRoot, ,, js, ,, this, ., getCleanupPassConfig, (, ), ), ;, runHotSwapPass, (, null, ,]
[;, runHotSwap, (, originalRoot, ,, js, ,, this, ., getCleanupPassConfig, (, ), ), ;, runHotSwapPass, (, null, ,, null, ,]
[;, runHotSwap, (, originalRoot, ,, js, ,, this, ., getCleanupPassConfig, (, ), ), ;, runHotSwapPass, (, null, ,, null, ,]
[this, ., getCleanupPassConfig, (, ), ), ;, runHotSwapPass, (, null, ,, null, ,, ensureDefaultPassConfig, (, ), ., garbageCollectChecks, ), ;]
[this, ., getCleanupPassConfig, (, ), ), ;, runHotSwapPass, (, null, ,, null, ,, ensureDefaultPassConfig, (, ), ., garbageCollectChecks, ), ;]
[this, ., getCleanupPassConfig, (, ), ), ;, runHotSwapPass, (, null, ,, null, ,, ensureDefaultPassConfig, (, ), ., garbageCollectChecks, ), ;]
[,, null, ,, ensureDefaultPassConfig, (, ), ., garbageCollectChecks, ), ;, this, ., getTypeRegistry, (, ), ., clearNamedTypes, (, ), ;]
[,, null, ,, ensureDefaultPassConfig, (, ), ., garbageCollectChecks, ), ;, this, ., getTypeRegistry, (, ), ., clearNamedTypes, (, ), ;]
[., garbageCollectChecks, ), ;, this, ., getTypeRegistry, (, ), ., clearNamedTypes, (, ), ;, this, ., removeSyntheticVarsInput, (, ), ;]
[), ;, this, ., getTypeRegistry, (, ), ., clearNamedTypes, (, ), ;, this, ., removeSyntheticVarsInput, (, ), ;, runHotSwap, (]
[this, ., getTypeRegistry, (, ), ., clearNamedTypes, (, ), ;, this, ., removeSyntheticVarsInput, (, ), ;, runHotSwap, (, originalRoot, ,]
[getTypeRegistry, (, ), ., clearNamedTypes, (, ), ;, this, ., removeSyntheticVarsInput, (, ), ;, runHotSwap, (, originalRoot, ,, js, ,]
[getTypeRegistry, (, ), ., clearNamedTypes, (, ), ;, this, ., removeSyntheticVarsInput, (, ), ;, runHotSwap, (, originalRoot, ,, js, ,]
[}, private, void, runHotSwap, (, Node, originalRoot, ,, Node, js, ,, PassConfig, passConfig, ), {, for, (, PassFactory, passFactory, :]
[}, private, void, runHotSwap, (, Node, originalRoot, ,, Node, js, ,, PassConfig, passConfig, ), {, for, (, PassFactory, passFactory, :]
[,, Node, js, ,, PassConfig, passConfig, ), {, for, (, PassFactory, passFactory, :, passConfig, ., getChecks, (, ), ), {]
[js, ,, PassConfig, passConfig, ), {, for, (, PassFactory, passFactory, :, passConfig, ., getChecks, (, ), ), {, runHotSwapPass, (]
[PassConfig, passConfig, ), {, for, (, PassFactory, passFactory, :, passConfig, ., getChecks, (, ), ), {, runHotSwapPass, (, originalRoot, ,]
[), {, for, (, PassFactory, passFactory, :, passConfig, ., getChecks, (, ), ), {, runHotSwapPass, (, originalRoot, ,, js, ,]
[;, }, }, private, void, runHotSwapPass, (, Node, originalRoot, ,, Node, js, ,, PassFactory, passFactory, ), {, HotSwapCompilerPass, pass, =]
[;, }, }, private, void, runHotSwapPass, (, Node, originalRoot, ,, Node, js, ,, PassFactory, passFactory, ), {, HotSwapCompilerPass, pass, =]
[void, runHotSwapPass, (, Node, originalRoot, ,, Node, js, ,, PassFactory, passFactory, ), {, HotSwapCompilerPass, pass, =, passFactory, ., getHotSwapPass, (]
[,, Node, js, ,, PassFactory, passFactory, ), {, HotSwapCompilerPass, pass, =, passFactory, ., getHotSwapPass, (, this, ), ;, if, (]
[,, Node, js, ,, PassFactory, passFactory, ), {, HotSwapCompilerPass, pass, =, passFactory, ., getHotSwapPass, (, this, ), ;, if, (]
[js, ,, PassFactory, passFactory, ), {, HotSwapCompilerPass, pass, =, passFactory, ., getHotSwapPass, (, this, ), ;, if, (, pass, !=]
[passFactory, ), {, HotSwapCompilerPass, pass, =, passFactory, ., getHotSwapPass, (, this, ), ;, if, (, pass, !=, null, ), {]
[passFactory, ), {, HotSwapCompilerPass, pass, =, passFactory, ., getHotSwapPass, (, this, ), ;, if, (, pass, !=, null, ), {]
[pass, =, passFactory, ., getHotSwapPass, (, this, ), ;, if, (, pass, !=, null, ), {, logger, ., info, (]
[pass, =, passFactory, ., getHotSwapPass, (, this, ), ;, if, (, pass, !=, null, ), {, logger, ., info, (]
[passFactory, ., getHotSwapPass, (, this, ), ;, if, (, pass, !=, null, ), {, logger, ., info, (, "Performing HotSwap for pass ", +]
[passFactory, ., getHotSwapPass, (, this, ), ;, if, (, pass, !=, null, ), {, logger, ., info, (, "Performing HotSwap for pass ", +]
[if, (, pass, !=, null, ), {, logger, ., info, (, "Performing HotSwap for pass ", +, passFactory, ., getName, (, ), ), ;]
[if, (, pass, !=, null, ), {, logger, ., info, (, "Performing HotSwap for pass ", +, passFactory, ., getName, (, ), ), ;]
[null, ), {, logger, ., info, (, "Performing HotSwap for pass ", +, passFactory, ., getName, (, ), ), ;, pass, ., hotSwapScript, (]
[{, logger, ., info, (, "Performing HotSwap for pass ", +, passFactory, ., getName, (, ), ), ;, pass, ., hotSwapScript, (, js, ,]
[), ;, pass, ., hotSwapScript, (, js, ,, originalRoot, ), ;, }, }, private, PassConfig, getCleanupPassConfig, (, ), {, return]
[., hotSwapScript, (, js, ,, originalRoot, ), ;, }, }, private, PassConfig, getCleanupPassConfig, (, ), {, return, new, CleanupPasses, (]
[{, return, new, CleanupPasses, (, getOptions, (, ), ), ;, }, private, void, removeSyntheticVarsInput, (, ), {, String, sourceName, =]
[{, return, new, CleanupPasses, (, getOptions, (, ), ), ;, }, private, void, removeSyntheticVarsInput, (, ), {, String, sourceName, =]
[(, getOptions, (, ), ), ;, }, private, void, removeSyntheticVarsInput, (, ), {, String, sourceName, =, Compiler, ., SYNTHETIC_EXTERNS, ;]
[(, ), ), ;, }, private, void, removeSyntheticVarsInput, (, ), {, String, sourceName, =, Compiler, ., SYNTHETIC_EXTERNS, ;, removeExternInput, (]
[;, }, private, void, removeSyntheticVarsInput, (, ), {, String, sourceName, =, Compiler, ., SYNTHETIC_EXTERNS, ;, removeExternInput, (, new, InputId, (]
[(, new, InputId, (, sourceName, ), ), ;, }, @, Override, Node, ensureLibraryInjected, (, String, resourceName, ), {, if, (]
[(, new, InputId, (, sourceName, ), ), ;, }, @, Override, Node, ensureLibraryInjected, (, String, resourceName, ), {, if, (]
[sourceName, ), ), ;, }, @, Override, Node, ensureLibraryInjected, (, String, resourceName, ), {, if, (, injectedLibraries, ., containsKey, (]
[@, Override, Node, ensureLibraryInjected, (, String, resourceName, ), {, if, (, injectedLibraries, ., containsKey, (, resourceName, ), ), {, return]
[resourceName, ), {, if, (, injectedLibraries, ., containsKey, (, resourceName, ), ), {, return, null, ;, }, boolean, isBase, =]
[resourceName, ), {, if, (, injectedLibraries, ., containsKey, (, resourceName, ), ), {, return, null, ;, }, boolean, isBase, =]
[(, injectedLibraries, ., containsKey, (, resourceName, ), ), {, return, null, ;, }, boolean, isBase, =, "base", ., equals, (]
[resourceName, ), ), {, return, null, ;, }, boolean, isBase, =, "base", ., equals, (, resourceName, ), ;, if, (]
[), ), {, return, null, ;, }, boolean, isBase, =, "base", ., equals, (, resourceName, ), ;, if, (, !]
[return, null, ;, }, boolean, isBase, =, "base", ., equals, (, resourceName, ), ;, if, (, !, isBase, ), {]
[;, }, boolean, isBase, =, "base", ., equals, (, resourceName, ), ;, if, (, !, isBase, ), {, ensureLibraryInjected, (]
[equals, (, resourceName, ), ;, if, (, !, isBase, ), {, ensureLibraryInjected, (, "base", ), ;, }, Node, firstChild, =]
[equals, (, resourceName, ), ;, if, (, !, isBase, ), {, ensureLibraryInjected, (, "base", ), ;, }, Node, firstChild, =]
[resourceName, ), ;, if, (, !, isBase, ), {, ensureLibraryInjected, (, "base", ), ;, }, Node, firstChild, =, loadLibraryCode, (]
[(, "base", ), ;, }, Node, firstChild, =, loadLibraryCode, (, resourceName, ), ., removeChildren, (, ), ;, Node, lastChild, =]
[(, "base", ), ;, }, Node, firstChild, =, loadLibraryCode, (, resourceName, ), ., removeChildren, (, ), ;, Node, lastChild, =]
[(, resourceName, ), ., removeChildren, (, ), ;, Node, lastChild, =, firstChild, ., getLastSibling, (, ), ;, Node, parent, =]
[), ., removeChildren, (, ), ;, Node, lastChild, =, firstChild, ., getLastSibling, (, ), ;, Node, parent, =, getNodeForCodeInsertion, (]
[;, Node, lastChild, =, firstChild, ., getLastSibling, (, ), ;, Node, parent, =, getNodeForCodeInsertion, (, null, ), ;, if, (]
[=, firstChild, ., getLastSibling, (, ), ;, Node, parent, =, getNodeForCodeInsertion, (, null, ), ;, if, (, isBase, ), {]
[=, firstChild, ., getLastSibling, (, ), ;, Node, parent, =, getNodeForCodeInsertion, (, null, ), ;, if, (, isBase, ), {]
[(, ), ;, Node, parent, =, getNodeForCodeInsertion, (, null, ), ;, if, (, isBase, ), {, parent, ., addChildrenToFront, (]
[getNodeForCodeInsertion, (, null, ), ;, if, (, isBase, ), {, parent, ., addChildrenToFront, (, firstChild, ), ;, }, else, {]
[getNodeForCodeInsertion, (, null, ), ;, if, (, isBase, ), {, parent, ., addChildrenToFront, (, firstChild, ), ;, }, else, {]
[;, if, (, isBase, ), {, parent, ., addChildrenToFront, (, firstChild, ), ;, }, else, {, parent, ., addChildrenAfter, (]
[(, isBase, ), {, parent, ., addChildrenToFront, (, firstChild, ), ;, }, else, {, parent, ., addChildrenAfter, (, firstChild, ,]
[(, isBase, ), {, parent, ., addChildrenToFront, (, firstChild, ), ;, }, else, {, parent, ., addChildrenAfter, (, firstChild, ,]
[parent, ., addChildrenToFront, (, firstChild, ), ;, }, else, {, parent, ., addChildrenAfter, (, firstChild, ,, injectedLibraries, ., get, (]
[), ;, }, else, {, parent, ., addChildrenAfter, (, firstChild, ,, injectedLibraries, ., get, (, "base", ), ), ;, }]
[{, parent, ., addChildrenAfter, (, firstChild, ,, injectedLibraries, ., get, (, "base", ), ), ;, }, reportCodeChange, (, ), ;]
[{, parent, ., addChildrenAfter, (, firstChild, ,, injectedLibraries, ., get, (, "base", ), ), ;, }, reportCodeChange, (, ), ;]
[(, firstChild, ,, injectedLibraries, ., get, (, "base", ), ), ;, }, reportCodeChange, (, ), ;, injectedLibraries, ., put, (]
[,, injectedLibraries, ., get, (, "base", ), ), ;, }, reportCodeChange, (, ), ;, injectedLibraries, ., put, (, resourceName, ,]
[(, "base", ), ), ;, }, reportCodeChange, (, ), ;, injectedLibraries, ., put, (, resourceName, ,, lastChild, ), ;, return]
[), ;, return, lastChild, ;, }, @, VisibleForTesting, Node, loadLibraryCode, (, String, resourceName, ), {, String, originalCode, ;, try, {]
[return, lastChild, ;, }, @, VisibleForTesting, Node, loadLibraryCode, (, String, resourceName, ), {, String, originalCode, ;, try, {, originalCode, =]
[return, lastChild, ;, }, @, VisibleForTesting, Node, loadLibraryCode, (, String, resourceName, ), {, String, originalCode, ;, try, {, originalCode, =]
[@, VisibleForTesting, Node, loadLibraryCode, (, String, resourceName, ), {, String, originalCode, ;, try, {, originalCode, =, CharStreams, ., toString, (]
[loadLibraryCode, (, String, resourceName, ), {, String, originalCode, ;, try, {, originalCode, =, CharStreams, ., toString, (, new, InputStreamReader, (]
[loadLibraryCode, (, String, resourceName, ), {, String, originalCode, ;, try, {, originalCode, =, CharStreams, ., toString, (, new, InputStreamReader, (]
[String, originalCode, ;, try, {, originalCode, =, CharStreams, ., toString, (, new, InputStreamReader, (, Compiler, ., class, ., getResourceAsStream, (]
[String, originalCode, ;, try, {, originalCode, =, CharStreams, ., toString, (, new, InputStreamReader, (, Compiler, ., class, ., getResourceAsStream, (]
[{, originalCode, =, CharStreams, ., toString, (, new, InputStreamReader, (, Compiler, ., class, ., getResourceAsStream, (, String, ., format, (]
[=, CharStreams, ., toString, (, new, InputStreamReader, (, Compiler, ., class, ., getResourceAsStream, (, String, ., format, (, "js/%s.js", ,]
[(, new, InputStreamReader, (, Compiler, ., class, ., getResourceAsStream, (, String, ., format, (, "js/%s.js", ,, resourceName, ), ), ,]
[(, new, InputStreamReader, (, Compiler, ., class, ., getResourceAsStream, (, String, ., format, (, "js/%s.js", ,, resourceName, ), ), ,]
["js/%s.js", ,, resourceName, ), ), ,, Charsets, ., UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw]
[), ), ,, Charsets, ., UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (]
[UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, return]
[UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, return]
[}, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, return, Normalize, ., parseAndNormalizeSyntheticCode, (]
[(, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, return, Normalize, ., parseAndNormalizeSyntheticCode, (, this, ,]
[e, ), {, throw, new, RuntimeException, (, e, ), ;, }, return, Normalize, ., parseAndNormalizeSyntheticCode, (, this, ,, originalCode, ,]
[e, ), {, throw, new, RuntimeException, (, e, ), ;, }, return, Normalize, ., parseAndNormalizeSyntheticCode, (, this, ,, originalCode, ,]
[new, RuntimeException, (, e, ), ;, }, return, Normalize, ., parseAndNormalizeSyntheticCode, (, this, ,, originalCode, ,, String, ., format, (]
[(, e, ), ;, }, return, Normalize, ., parseAndNormalizeSyntheticCode, (, this, ,, originalCode, ,, String, ., format, (, "jscomp_%s_", ,]
[., format, (, "jscomp_%s_", ,, resourceName, ), ), ;, }, public, static, String, getReleaseVersion, (, ), {, ResourceBundle, config, =]
[., format, (, "jscomp_%s_", ,, resourceName, ), ), ;, }, public, static, String, getReleaseVersion, (, ), {, ResourceBundle, config, =]
[,, resourceName, ), ), ;, }, public, static, String, getReleaseVersion, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (]
[;, }, public, static, String, getReleaseVersion, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, CONFIG_RESOURCE, ), ;, return]
[;, }, public, static, String, getReleaseVersion, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, CONFIG_RESOURCE, ), ;, return]
[String, getReleaseVersion, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, CONFIG_RESOURCE, ), ;, return, config, ., getString, (]
[;, return, config, ., getString, (, "compiler.version", ), ;, }, public, static, String, getReleaseDate, (, ), {, ResourceBundle, config, =]
[;, return, config, ., getString, (, "compiler.version", ), ;, }, public, static, String, getReleaseDate, (, ), {, ResourceBundle, config, =]
[getString, (, "compiler.version", ), ;, }, public, static, String, getReleaseDate, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (]
[;, }, public, static, String, getReleaseDate, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, CONFIG_RESOURCE, ), ;, return]
[;, }, public, static, String, getReleaseDate, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, CONFIG_RESOURCE, ), ;, return]
[String, getReleaseDate, (, ), {, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, CONFIG_RESOURCE, ), ;, return, config, ., getString, (]
[(, String, sourceName, ,, AstRoot, oldAst, ), {, }, @, Override, public, AstRoot, getOldParseTreeByName, (, String, sourceName, ), {, return]
