[Number, implements, FieldElement, <, BigFraction, >, ,, Comparable, <, BigFraction, >, ,, Serializable, {, public, static, final, BigFraction, TWO, =]
[<, BigFraction, >, ,, Comparable, <, BigFraction, >, ,, Serializable, {, public, static, final, BigFraction, TWO, =, new, BigFraction, (]
[Serializable, {, public, static, final, BigFraction, TWO, =, new, BigFraction, (, 2, ), ;, public, static, final, BigFraction, ONE, =]
[static, final, BigFraction, TWO, =, new, BigFraction, (, 2, ), ;, public, static, final, BigFraction, ONE, =, new, BigFraction, (]
[), ;, public, static, final, BigFraction, ONE, =, new, BigFraction, (, 1, ), ;, public, static, final, BigFraction, ZERO, =]
[static, final, BigFraction, ONE, =, new, BigFraction, (, 1, ), ;, public, static, final, BigFraction, ZERO, =, new, BigFraction, (]
[), ;, public, static, final, BigFraction, ZERO, =, new, BigFraction, (, 0, ), ;, public, static, final, BigFraction, MINUS_ONE, =]
[static, final, BigFraction, ZERO, =, new, BigFraction, (, 0, ), ;, public, static, final, BigFraction, MINUS_ONE, =, new, BigFraction, (]
[final, BigFraction, ZERO, =, new, BigFraction, (, 0, ), ;, public, static, final, BigFraction, MINUS_ONE, =, new, BigFraction, (, -]
[;, public, static, final, BigFraction, MINUS_ONE, =, new, BigFraction, (, -, 1, ), ;, public, static, final, BigFraction, FOUR_FIFTHS, =]
[final, BigFraction, MINUS_ONE, =, new, BigFraction, (, -, 1, ), ;, public, static, final, BigFraction, FOUR_FIFTHS, =, new, BigFraction, (]
[MINUS_ONE, =, new, BigFraction, (, -, 1, ), ;, public, static, final, BigFraction, FOUR_FIFTHS, =, new, BigFraction, (, 4, ,]
[public, static, final, BigFraction, FOUR_FIFTHS, =, new, BigFraction, (, 4, ,, 5, ), ;, public, static, final, BigFraction, ONE_FIFTH, =]
[BigFraction, FOUR_FIFTHS, =, new, BigFraction, (, 4, ,, 5, ), ;, public, static, final, BigFraction, ONE_FIFTH, =, new, BigFraction, (]
[=, new, BigFraction, (, 4, ,, 5, ), ;, public, static, final, BigFraction, ONE_FIFTH, =, new, BigFraction, (, 1, ,]
[public, static, final, BigFraction, ONE_FIFTH, =, new, BigFraction, (, 1, ,, 5, ), ;, public, static, final, BigFraction, ONE_HALF, =]
[BigFraction, ONE_FIFTH, =, new, BigFraction, (, 1, ,, 5, ), ;, public, static, final, BigFraction, ONE_HALF, =, new, BigFraction, (]
[=, new, BigFraction, (, 1, ,, 5, ), ;, public, static, final, BigFraction, ONE_HALF, =, new, BigFraction, (, 1, ,]
[public, static, final, BigFraction, ONE_HALF, =, new, BigFraction, (, 1, ,, 2, ), ;, public, static, final, BigFraction, ONE_QUARTER, =]
[BigFraction, ONE_HALF, =, new, BigFraction, (, 1, ,, 2, ), ;, public, static, final, BigFraction, ONE_QUARTER, =, new, BigFraction, (]
[=, new, BigFraction, (, 1, ,, 2, ), ;, public, static, final, BigFraction, ONE_QUARTER, =, new, BigFraction, (, 1, ,]
[public, static, final, BigFraction, ONE_QUARTER, =, new, BigFraction, (, 1, ,, 4, ), ;, public, static, final, BigFraction, ONE_THIRD, =]
[BigFraction, ONE_QUARTER, =, new, BigFraction, (, 1, ,, 4, ), ;, public, static, final, BigFraction, ONE_THIRD, =, new, BigFraction, (]
[=, new, BigFraction, (, 1, ,, 4, ), ;, public, static, final, BigFraction, ONE_THIRD, =, new, BigFraction, (, 1, ,]
[public, static, final, BigFraction, ONE_THIRD, =, new, BigFraction, (, 1, ,, 3, ), ;, public, static, final, BigFraction, THREE_FIFTHS, =]
[BigFraction, ONE_THIRD, =, new, BigFraction, (, 1, ,, 3, ), ;, public, static, final, BigFraction, THREE_FIFTHS, =, new, BigFraction, (]
[=, new, BigFraction, (, 1, ,, 3, ), ;, public, static, final, BigFraction, THREE_FIFTHS, =, new, BigFraction, (, 3, ,]
[public, static, final, BigFraction, THREE_FIFTHS, =, new, BigFraction, (, 3, ,, 5, ), ;, public, static, final, BigFraction, THREE_QUARTERS, =]
[BigFraction, THREE_FIFTHS, =, new, BigFraction, (, 3, ,, 5, ), ;, public, static, final, BigFraction, THREE_QUARTERS, =, new, BigFraction, (]
[=, new, BigFraction, (, 3, ,, 5, ), ;, public, static, final, BigFraction, THREE_QUARTERS, =, new, BigFraction, (, 3, ,]
[public, static, final, BigFraction, THREE_QUARTERS, =, new, BigFraction, (, 3, ,, 4, ), ;, public, static, final, BigFraction, TWO_FIFTHS, =]
[BigFraction, THREE_QUARTERS, =, new, BigFraction, (, 3, ,, 4, ), ;, public, static, final, BigFraction, TWO_FIFTHS, =, new, BigFraction, (]
[=, new, BigFraction, (, 3, ,, 4, ), ;, public, static, final, BigFraction, TWO_FIFTHS, =, new, BigFraction, (, 2, ,]
[public, static, final, BigFraction, TWO_FIFTHS, =, new, BigFraction, (, 2, ,, 5, ), ;, public, static, final, BigFraction, TWO_QUARTERS, =]
[BigFraction, TWO_FIFTHS, =, new, BigFraction, (, 2, ,, 5, ), ;, public, static, final, BigFraction, TWO_QUARTERS, =, new, BigFraction, (]
[=, new, BigFraction, (, 2, ,, 5, ), ;, public, static, final, BigFraction, TWO_QUARTERS, =, new, BigFraction, (, 2, ,]
[public, static, final, BigFraction, TWO_QUARTERS, =, new, BigFraction, (, 2, ,, 4, ), ;, public, static, final, BigFraction, TWO_THIRDS, =]
[BigFraction, TWO_QUARTERS, =, new, BigFraction, (, 2, ,, 4, ), ;, public, static, final, BigFraction, TWO_THIRDS, =, new, BigFraction, (]
[=, new, BigFraction, (, 2, ,, 4, ), ;, public, static, final, BigFraction, TWO_THIRDS, =, new, BigFraction, (, 2, ,]
[public, static, final, BigFraction, TWO_THIRDS, =, new, BigFraction, (, 2, ,, 3, ), ;, private, static, final, long, serialVersionUID, =]
[static, final, BigFraction, TWO_THIRDS, =, new, BigFraction, (, 2, ,, 3, ), ;, private, static, final, long, serialVersionUID, =, -]
[2, ,, 3, ), ;, private, static, final, long, serialVersionUID, =, -, 5630213147331578515L, ;, private, static, final, BigInteger, ONE_HUNDRED, =]
[2, ,, 3, ), ;, private, static, final, long, serialVersionUID, =, -, 5630213147331578515L, ;, private, static, final, BigInteger, ONE_HUNDRED, =]
[;, private, static, final, long, serialVersionUID, =, -, 5630213147331578515L, ;, private, static, final, BigInteger, ONE_HUNDRED, =, BigInteger, ., valueOf, (]
[private, final, BigInteger, numerator, ;, private, final, BigInteger, denominator, ;, public, BigFraction, (, final, BigInteger, num, ), {, this, (]
[BigInteger, numerator, ;, private, final, BigInteger, denominator, ;, public, BigFraction, (, final, BigInteger, num, ), {, this, (, num, ,]
[BigInteger, numerator, ;, private, final, BigInteger, denominator, ;, public, BigFraction, (, final, BigInteger, num, ), {, this, (, num, ,]
[this, (, num, ,, BigInteger, ., ONE, ), ;, }, public, BigFraction, (, BigInteger, num, ,, BigInteger, den, ), {]
[this, (, num, ,, BigInteger, ., ONE, ), ;, }, public, BigFraction, (, BigInteger, num, ,, BigInteger, den, ), {]
[BigInteger, ., ONE, ), ;, }, public, BigFraction, (, BigInteger, num, ,, BigInteger, den, ), {, MathUtils, ., checkNotNull, (]
[ONE, ), ;, }, public, BigFraction, (, BigInteger, num, ,, BigInteger, den, ), {, MathUtils, ., checkNotNull, (, num, ,]
[ONE, ), ;, }, public, BigFraction, (, BigInteger, num, ,, BigInteger, den, ), {, MathUtils, ., checkNotNull, (, num, ,]
[BigFraction, (, BigInteger, num, ,, BigInteger, den, ), {, MathUtils, ., checkNotNull, (, num, ,, LocalizedFormats, ., NUMERATOR, ), ;]
[BigFraction, (, BigInteger, num, ,, BigInteger, den, ), {, MathUtils, ., checkNotNull, (, num, ,, LocalizedFormats, ., NUMERATOR, ), ;]
[,, BigInteger, den, ), {, MathUtils, ., checkNotNull, (, num, ,, LocalizedFormats, ., NUMERATOR, ), ;, MathUtils, ., checkNotNull, (]
[den, ), {, MathUtils, ., checkNotNull, (, num, ,, LocalizedFormats, ., NUMERATOR, ), ;, MathUtils, ., checkNotNull, (, den, ,]
[den, ), {, MathUtils, ., checkNotNull, (, num, ,, LocalizedFormats, ., NUMERATOR, ), ;, MathUtils, ., checkNotNull, (, den, ,]
[num, ,, LocalizedFormats, ., NUMERATOR, ), ;, MathUtils, ., checkNotNull, (, den, ,, LocalizedFormats, ., DENOMINATOR, ), ;, if, (]
[num, ,, LocalizedFormats, ., NUMERATOR, ), ;, MathUtils, ., checkNotNull, (, den, ,, LocalizedFormats, ., DENOMINATOR, ), ;, if, (]
[num, ,, LocalizedFormats, ., NUMERATOR, ), ;, MathUtils, ., checkNotNull, (, den, ,, LocalizedFormats, ., DENOMINATOR, ), ;, if, (]
[;, MathUtils, ., checkNotNull, (, den, ,, LocalizedFormats, ., DENOMINATOR, ), ;, if, (, BigInteger, ., ZERO, ., equals, (]
[den, ,, LocalizedFormats, ., DENOMINATOR, ), ;, if, (, BigInteger, ., ZERO, ., equals, (, den, ), ), {, throw]
[., DENOMINATOR, ), ;, if, (, BigInteger, ., ZERO, ., equals, (, den, ), ), {, throw, new, ZeroException, (]
[., DENOMINATOR, ), ;, if, (, BigInteger, ., ZERO, ., equals, (, den, ), ), {, throw, new, ZeroException, (]
[ZERO, ., equals, (, den, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, if, (]
[ZERO, ., equals, (, den, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, if, (]
[ZERO, ., equals, (, den, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, if, (]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (]
[ZeroException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (, num, ), ), {]
[LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (, num, ), ), {, numerator, =]
[LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (, num, ), ), {, numerator, =]
[;, }, if, (, BigInteger, ., ZERO, ., equals, (, num, ), ), {, numerator, =, BigInteger, ., ZERO, ;]
[if, (, BigInteger, ., ZERO, ., equals, (, num, ), ), {, numerator, =, BigInteger, ., ZERO, ;, denominator, =]
[if, (, BigInteger, ., ZERO, ., equals, (, num, ), ), {, numerator, =, BigInteger, ., ZERO, ;, denominator, =]
[{, numerator, =, BigInteger, ., ZERO, ;, denominator, =, BigInteger, ., ONE, ;, }, else, {, final, BigInteger, gcd, =]
[{, numerator, =, BigInteger, ., ZERO, ;, denominator, =, BigInteger, ., ONE, ;, }, else, {, final, BigInteger, gcd, =]
[., ZERO, ;, denominator, =, BigInteger, ., ONE, ;, }, else, {, final, BigInteger, gcd, =, num, ., gcd, (]
[BigInteger, ., ONE, ;, }, else, {, final, BigInteger, gcd, =, num, ., gcd, (, den, ), ;, if, (]
[BigInteger, ., ONE, ;, }, else, {, final, BigInteger, gcd, =, num, ., gcd, (, den, ), ;, if, (]
[BigInteger, ., ONE, ;, }, else, {, final, BigInteger, gcd, =, num, ., gcd, (, den, ), ;, if, (]
[BigInteger, ., ONE, ;, }, else, {, final, BigInteger, gcd, =, num, ., gcd, (, den, ), ;, if, (]
[{, final, BigInteger, gcd, =, num, ., gcd, (, den, ), ;, if, (, BigInteger, ., ONE, ., compareTo, (]
[gcd, =, num, ., gcd, (, den, ), ;, if, (, BigInteger, ., ONE, ., compareTo, (, gcd, ), <]
[., gcd, (, den, ), ;, if, (, BigInteger, ., ONE, ., compareTo, (, gcd, ), <, 0, ), {]
[(, den, ), ;, if, (, BigInteger, ., ONE, ., compareTo, (, gcd, ), <, 0, ), {, num, =]
[(, den, ), ;, if, (, BigInteger, ., ONE, ., compareTo, (, gcd, ), <, 0, ), {, num, =]
[if, (, BigInteger, ., ONE, ., compareTo, (, gcd, ), <, 0, ), {, num, =, num, ., divide, (]
[., ONE, ., compareTo, (, gcd, ), <, 0, ), {, num, =, num, ., divide, (, gcd, ), ;]
[., compareTo, (, gcd, ), <, 0, ), {, num, =, num, ., divide, (, gcd, ), ;, den, =]
[., compareTo, (, gcd, ), <, 0, ), {, num, =, num, ., divide, (, gcd, ), ;, den, =]
[), <, 0, ), {, num, =, num, ., divide, (, gcd, ), ;, den, =, den, ., divide, (]
[=, num, ., divide, (, gcd, ), ;, den, =, den, ., divide, (, gcd, ), ;, }, if, (]
[=, num, ., divide, (, gcd, ), ;, den, =, den, ., divide, (, gcd, ), ;, }, if, (]
[=, num, ., divide, (, gcd, ), ;, den, =, den, ., divide, (, gcd, ), ;, }, if, (]
[=, num, ., divide, (, gcd, ), ;, den, =, den, ., divide, (, gcd, ), ;, }, if, (]
[), ;, den, =, den, ., divide, (, gcd, ), ;, }, if, (, BigInteger, ., ZERO, ., compareTo, (]
[=, den, ., divide, (, gcd, ), ;, }, if, (, BigInteger, ., ZERO, ., compareTo, (, den, ), >]
[divide, (, gcd, ), ;, }, if, (, BigInteger, ., ZERO, ., compareTo, (, den, ), >, 0, ), {]
[gcd, ), ;, }, if, (, BigInteger, ., ZERO, ., compareTo, (, den, ), >, 0, ), {, num, =]
[gcd, ), ;, }, if, (, BigInteger, ., ZERO, ., compareTo, (, den, ), >, 0, ), {, num, =]
[BigInteger, ., ZERO, ., compareTo, (, den, ), >, 0, ), {, num, =, num, ., negate, (, ), ;]
[ZERO, ., compareTo, (, den, ), >, 0, ), {, num, =, num, ., negate, (, ), ;, den, =]
[ZERO, ., compareTo, (, den, ), >, 0, ), {, num, =, num, ., negate, (, ), ;, den, =]
[0, ), {, num, =, num, ., negate, (, ), ;, den, =, den, ., negate, (, ), ;, }]
[{, num, =, num, ., negate, (, ), ;, den, =, den, ., negate, (, ), ;, }, numerator, =]
[=, num, ., negate, (, ), ;, den, =, den, ., negate, (, ), ;, }, numerator, =, num, ;]
[., negate, (, ), ;, den, =, den, ., negate, (, ), ;, }, numerator, =, num, ;, denominator, =]
[num, ;, denominator, =, den, ;, }, }, public, BigFraction, (, final, double, value, ), throws, MathIllegalArgumentException, {, if, (]
[num, ;, denominator, =, den, ;, }, }, public, BigFraction, (, final, double, value, ), throws, MathIllegalArgumentException, {, if, (]
[den, ;, }, }, public, BigFraction, (, final, double, value, ), throws, MathIllegalArgumentException, {, if, (, Double, ., isNaN, (]
[BigFraction, (, final, double, value, ), throws, MathIllegalArgumentException, {, if, (, Double, ., isNaN, (, value, ), ), {, throw]
[double, value, ), throws, MathIllegalArgumentException, {, if, (, Double, ., isNaN, (, value, ), ), {, throw, new, MathIllegalArgumentException, (]
[double, value, ), throws, MathIllegalArgumentException, {, if, (, Double, ., isNaN, (, value, ), ), {, throw, new, MathIllegalArgumentException, (]
[Double, ., isNaN, (, value, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NAN_VALUE_CONVERSION, ), ;, }, if, (]
[Double, ., isNaN, (, value, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NAN_VALUE_CONVERSION, ), ;, }, if, (]
[value, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NAN_VALUE_CONVERSION, ), ;, }, if, (, Double, ., isInfinite, (]
[new, MathIllegalArgumentException, (, LocalizedFormats, ., NAN_VALUE_CONVERSION, ), ;, }, if, (, Double, ., isInfinite, (, value, ), ), {, throw]
[LocalizedFormats, ., NAN_VALUE_CONVERSION, ), ;, }, if, (, Double, ., isInfinite, (, value, ), ), {, throw, new, MathIllegalArgumentException, (]
[LocalizedFormats, ., NAN_VALUE_CONVERSION, ), ;, }, if, (, Double, ., isInfinite, (, value, ), ), {, throw, new, MathIllegalArgumentException, (]
[isInfinite, (, value, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_VALUE_CONVERSION, ), ;, }, final, long, bits, =]
[isInfinite, (, value, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_VALUE_CONVERSION, ), ;, }, final, long, bits, =]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_VALUE_CONVERSION, ), ;, }, final, long, bits, =, Double, ., doubleToLongBits, (]
[., INFINITE_VALUE_CONVERSION, ), ;, }, final, long, bits, =, Double, ., doubleToLongBits, (, value, ), ;, final, long, sign, =]
[., INFINITE_VALUE_CONVERSION, ), ;, }, final, long, bits, =, Double, ., doubleToLongBits, (, value, ), ;, final, long, sign, =]
[), ;, }, final, long, bits, =, Double, ., doubleToLongBits, (, value, ), ;, final, long, sign, =, bits, &]
[=, Double, ., doubleToLongBits, (, value, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, final, long, exponent, =]
[=, Double, ., doubleToLongBits, (, value, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, final, long, exponent, =]
[., doubleToLongBits, (, value, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, final, long, exponent, =, bits, &]
[;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, final, long, exponent, =, bits, &, 0x7ff0000000000000L, ;, long, m, =]
[;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, final, long, exponent, =, bits, &, 0x7ff0000000000000L, ;, long, m, =]
[long, sign, =, bits, &, 0x8000000000000000L, ;, final, long, exponent, =, bits, &, 0x7ff0000000000000L, ;, long, m, =, bits, &]
[&, 0x8000000000000000L, ;, final, long, exponent, =, bits, &, 0x7ff0000000000000L, ;, long, m, =, bits, &, 0x000fffffffffffffL, ;, if, (]
[&, 0x8000000000000000L, ;, final, long, exponent, =, bits, &, 0x7ff0000000000000L, ;, long, m, =, bits, &, 0x000fffffffffffffL, ;, if, (]
[;, final, long, exponent, =, bits, &, 0x7ff0000000000000L, ;, long, m, =, bits, &, 0x000fffffffffffffL, ;, if, (, exponent, !=]
[exponent, =, bits, &, 0x7ff0000000000000L, ;, long, m, =, bits, &, 0x000fffffffffffffL, ;, if, (, exponent, !=, 0, ), {]
[bits, &, 0x7ff0000000000000L, ;, long, m, =, bits, &, 0x000fffffffffffffL, ;, if, (, exponent, !=, 0, ), {, m, |=]
[m, =, bits, &, 0x000fffffffffffffL, ;, if, (, exponent, !=, 0, ), {, m, |=, 0x0010000000000000L, ;, }, if, (]
[m, =, bits, &, 0x000fffffffffffffL, ;, if, (, exponent, !=, 0, ), {, m, |=, 0x0010000000000000L, ;, }, if, (]
[bits, &, 0x000fffffffffffffL, ;, if, (, exponent, !=, 0, ), {, m, |=, 0x0010000000000000L, ;, }, if, (, sign, !=]
[;, if, (, exponent, !=, 0, ), {, m, |=, 0x0010000000000000L, ;, }, if, (, sign, !=, 0, ), {]
[(, exponent, !=, 0, ), {, m, |=, 0x0010000000000000L, ;, }, if, (, sign, !=, 0, ), {, m, =]
[exponent, !=, 0, ), {, m, |=, 0x0010000000000000L, ;, }, if, (, sign, !=, 0, ), {, m, =, -]
[|=, 0x0010000000000000L, ;, }, if, (, sign, !=, 0, ), {, m, =, -, m, ;, }, int, k, =]
[|=, 0x0010000000000000L, ;, }, if, (, sign, !=, 0, ), {, m, =, -, m, ;, }, int, k, =]
[0x0010000000000000L, ;, }, if, (, sign, !=, 0, ), {, m, =, -, m, ;, }, int, k, =, (]
[if, (, sign, !=, 0, ), {, m, =, -, m, ;, }, int, k, =, (, (, int, )]
[(, sign, !=, 0, ), {, m, =, -, m, ;, }, int, k, =, (, (, int, ), (]
[(, sign, !=, 0, ), {, m, =, -, m, ;, }, int, k, =, (, (, int, ), (]
[0, ), {, m, =, -, m, ;, }, int, k, =, (, (, int, ), (, exponent, >, >]
[=, -, m, ;, }, int, k, =, (, (, int, ), (, exponent, >, >, 52, ), ), -]
[}, int, k, =, (, (, int, ), (, exponent, >, >, 52, ), ), -, 1075, ;, while, (]
[}, int, k, =, (, (, int, ), (, exponent, >, >, 52, ), ), -, 1075, ;, while, (]
[int, k, =, (, (, int, ), (, exponent, >, >, 52, ), ), -, 1075, ;, while, (, (]
[int, k, =, (, (, int, ), (, exponent, >, >, 52, ), ), -, 1075, ;, while, (, (]
[k, =, (, (, int, ), (, exponent, >, >, 52, ), ), -, 1075, ;, while, (, (, (]
[k, =, (, (, int, ), (, exponent, >, >, 52, ), ), -, 1075, ;, while, (, (, (]
[(, (, int, ), (, exponent, >, >, 52, ), ), -, 1075, ;, while, (, (, (, m, &]
[), (, exponent, >, >, 52, ), ), -, 1075, ;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=]
[>, >, 52, ), ), -, 1075, ;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&]
[>, 52, ), ), -, 1075, ;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (]
[>, 52, ), ), -, 1075, ;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (]
[52, ), ), -, 1075, ;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (]
[52, ), ), -, 1075, ;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (]
[), -, 1075, ;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m, &]
[;, while, (, (, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m, &, 0x1, ), ==]
[(, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m, &, 0x1, ), ==, 0, ), ), {]
[&, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m, &, 0x1, ), ==, 0, ), ), {, m, =]
[&, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m, &, 0x1, ), ==, 0, ), ), {, m, =]
[!=, 0, ), &&, (, (, m, &, 0x1, ), ==, 0, ), ), {, m, =, m, >, >]
[), &&, (, (, m, &, 0x1, ), ==, 0, ), ), {, m, =, m, >, >, 1, ;]
[&&, (, (, m, &, 0x1, ), ==, 0, ), ), {, m, =, m, >, >, 1, ;, ++]
[0x1, ), ==, 0, ), ), {, m, =, m, >, >, 1, ;, ++, k, ;, }, if, (]
[0x1, ), ==, 0, ), ), {, m, =, m, >, >, 1, ;, ++, k, ;, }, if, (]
[==, 0, ), ), {, m, =, m, >, >, 1, ;, ++, k, ;, }, if, (, k, <]
[), {, m, =, m, >, >, 1, ;, ++, k, ;, }, if, (, k, <, 0, ), {]
[m, =, m, >, >, 1, ;, ++, k, ;, }, if, (, k, <, 0, ), {, numerator, =]
[m, =, m, >, >, 1, ;, ++, k, ;, }, if, (, k, <, 0, ), {, numerator, =]
[>, 1, ;, ++, k, ;, }, if, (, k, <, 0, ), {, numerator, =, BigInteger, ., valueOf, (]
[++, k, ;, }, if, (, k, <, 0, ), {, numerator, =, BigInteger, ., valueOf, (, m, ), ;]
[;, }, if, (, k, <, 0, ), {, numerator, =, BigInteger, ., valueOf, (, m, ), ;, denominator, =]
[;, }, if, (, k, <, 0, ), {, numerator, =, BigInteger, ., valueOf, (, m, ), ;, denominator, =]
[;, }, if, (, k, <, 0, ), {, numerator, =, BigInteger, ., valueOf, (, m, ), ;, denominator, =]
[0, ), {, numerator, =, BigInteger, ., valueOf, (, m, ), ;, denominator, =, BigInteger, ., ZERO, ., flipBit, (]
[), {, numerator, =, BigInteger, ., valueOf, (, m, ), ;, denominator, =, BigInteger, ., ZERO, ., flipBit, (, -]
[valueOf, (, m, ), ;, denominator, =, BigInteger, ., ZERO, ., flipBit, (, -, k, ), ;, }, else, {]
[m, ), ;, denominator, =, BigInteger, ., ZERO, ., flipBit, (, -, k, ), ;, }, else, {, numerator, =]
[m, ), ;, denominator, =, BigInteger, ., ZERO, ., flipBit, (, -, k, ), ;, }, else, {, numerator, =]
[m, ), ;, denominator, =, BigInteger, ., ZERO, ., flipBit, (, -, k, ), ;, }, else, {, numerator, =]
[=, BigInteger, ., ZERO, ., flipBit, (, -, k, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (]
[flipBit, (, -, k, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, m, ), ., multiply, (]
[flipBit, (, -, k, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, m, ), ., multiply, (]
[flipBit, (, -, k, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, m, ), ., multiply, (]
[}, else, {, numerator, =, BigInteger, ., valueOf, (, m, ), ., multiply, (, BigInteger, ., ZERO, ., flipBit, (]
[=, BigInteger, ., valueOf, (, m, ), ., multiply, (, BigInteger, ., ZERO, ., flipBit, (, k, ), ), ;]
[., valueOf, (, m, ), ., multiply, (, BigInteger, ., ZERO, ., flipBit, (, k, ), ), ;, denominator, =]
[., valueOf, (, m, ), ., multiply, (, BigInteger, ., ZERO, ., flipBit, (, k, ), ), ;, denominator, =]
[public, BigFraction, (, final, double, value, ,, final, double, epsilon, ,, final, int, maxIterations, ), throws, FractionConversionException, {, this, (]
[(, final, double, value, ,, final, double, epsilon, ,, final, int, maxIterations, ), throws, FractionConversionException, {, this, (, value, ,]
[double, value, ,, final, double, epsilon, ,, final, int, maxIterations, ), throws, FractionConversionException, {, this, (, value, ,, epsilon, ,]
[double, value, ,, final, double, epsilon, ,, final, int, maxIterations, ), throws, FractionConversionException, {, this, (, value, ,, epsilon, ,]
[double, epsilon, ,, final, int, maxIterations, ), throws, FractionConversionException, {, this, (, value, ,, epsilon, ,, Integer, ., MAX_VALUE, ,]
[double, value, ,, final, double, epsilon, ,, final, int, maxDenominator, ,, int, maxIterations, ), throws, FractionConversionException, {, long, overflow, =]
[double, value, ,, final, double, epsilon, ,, final, int, maxDenominator, ,, int, maxIterations, ), throws, FractionConversionException, {, long, overflow, =]
[final, int, maxDenominator, ,, int, maxIterations, ), throws, FractionConversionException, {, long, overflow, =, Integer, ., MAX_VALUE, ;, double, r0, =]
[maxIterations, ), throws, FractionConversionException, {, long, overflow, =, Integer, ., MAX_VALUE, ;, double, r0, =, value, ;, long, a0, =]
[FractionConversionException, {, long, overflow, =, Integer, ., MAX_VALUE, ;, double, r0, =, value, ;, long, a0, =, (, long, )]
[FractionConversionException, {, long, overflow, =, Integer, ., MAX_VALUE, ;, double, r0, =, value, ;, long, a0, =, (, long, )]
[=, Integer, ., MAX_VALUE, ;, double, r0, =, value, ;, long, a0, =, (, long, ), FastMath, ., floor, (]
[double, r0, =, value, ;, long, a0, =, (, long, ), FastMath, ., floor, (, r0, ), ;, if, (]
[double, r0, =, value, ;, long, a0, =, (, long, ), FastMath, ., floor, (, r0, ), ;, if, (]
[=, value, ;, long, a0, =, (, long, ), FastMath, ., floor, (, r0, ), ;, if, (, a0, >]
[a0, =, (, long, ), FastMath, ., floor, (, r0, ), ;, if, (, a0, >, overflow, ), {, throw]
[long, ), FastMath, ., floor, (, r0, ), ;, if, (, a0, >, overflow, ), {, throw, new, FractionConversionException, (]
[FastMath, ., floor, (, r0, ), ;, if, (, a0, >, overflow, ), {, throw, new, FractionConversionException, (, value, ,]
[floor, (, r0, ), ;, if, (, a0, >, overflow, ), {, throw, new, FractionConversionException, (, value, ,, a0, ,]
[(, a0, >, overflow, ), {, throw, new, FractionConversionException, (, value, ,, a0, ,, 1l, ), ;, }, if, (]
[(, a0, >, overflow, ), {, throw, new, FractionConversionException, (, value, ,, a0, ,, 1l, ), ;, }, if, (]
[(, a0, >, overflow, ), {, throw, new, FractionConversionException, (, value, ,, a0, ,, 1l, ), ;, }, if, (]
[), {, throw, new, FractionConversionException, (, value, ,, a0, ,, 1l, ), ;, }, if, (, FastMath, ., abs, (]
[), {, throw, new, FractionConversionException, (, value, ,, a0, ,, 1l, ), ;, }, if, (, FastMath, ., abs, (]
[throw, new, FractionConversionException, (, value, ,, a0, ,, 1l, ), ;, }, if, (, FastMath, ., abs, (, a0, -]
[(, value, ,, a0, ,, 1l, ), ;, }, if, (, FastMath, ., abs, (, a0, -, value, ), <]
[a0, ,, 1l, ), ;, }, if, (, FastMath, ., abs, (, a0, -, value, ), <, epsilon, ), {]
[1l, ), ;, }, if, (, FastMath, ., abs, (, a0, -, value, ), <, epsilon, ), {, numerator, =]
[1l, ), ;, }, if, (, FastMath, ., abs, (, a0, -, value, ), <, epsilon, ), {, numerator, =]
[if, (, FastMath, ., abs, (, a0, -, value, ), <, epsilon, ), {, numerator, =, BigInteger, ., valueOf, (]
[., abs, (, a0, -, value, ), <, epsilon, ), {, numerator, =, BigInteger, ., valueOf, (, a0, ), ;]
[(, a0, -, value, ), <, epsilon, ), {, numerator, =, BigInteger, ., valueOf, (, a0, ), ;, denominator, =]
[(, a0, -, value, ), <, epsilon, ), {, numerator, =, BigInteger, ., valueOf, (, a0, ), ;, denominator, =]
[=, BigInteger, ., valueOf, (, a0, ), ;, denominator, =, BigInteger, ., ONE, ;, return, ;, }, long, p0, =]
[a0, ), ;, denominator, =, BigInteger, ., ONE, ;, return, ;, }, long, p0, =, 1, ;, long, q0, =]
[BigInteger, ., ONE, ;, return, ;, }, long, p0, =, 1, ;, long, q0, =, 0, ;, long, p1, =]
[;, }, long, p0, =, 1, ;, long, q0, =, 0, ;, long, p1, =, a0, ;, long, q1, =]
[1, ;, long, q0, =, 0, ;, long, p1, =, a0, ;, long, q1, =, 1, ;, long, p2, =]
[0, ;, long, p1, =, a0, ;, long, q1, =, 1, ;, long, p2, =, 0, ;, long, q2, =]
[a0, ;, long, q1, =, 1, ;, long, p2, =, 0, ;, long, q2, =, 1, ;, int, n, =]
[1, ;, long, p2, =, 0, ;, long, q2, =, 1, ;, int, n, =, 0, ;, boolean, stop, =]
[=, 0, ;, long, q2, =, 1, ;, int, n, =, 0, ;, boolean, stop, =, false, ;, do, {]
[0, ;, long, q2, =, 1, ;, int, n, =, 0, ;, boolean, stop, =, false, ;, do, {, ++]
[;, int, n, =, 0, ;, boolean, stop, =, false, ;, do, {, ++, n, ;, final, double, r1, =]
[;, int, n, =, 0, ;, boolean, stop, =, false, ;, do, {, ++, n, ;, final, double, r1, =]
[n, =, 0, ;, boolean, stop, =, false, ;, do, {, ++, n, ;, final, double, r1, =, 1.0, /]
[=, 0, ;, boolean, stop, =, false, ;, do, {, ++, n, ;, final, double, r1, =, 1.0, /, (]
[=, 0, ;, boolean, stop, =, false, ;, do, {, ++, n, ;, final, double, r1, =, 1.0, /, (]
[;, boolean, stop, =, false, ;, do, {, ++, n, ;, final, double, r1, =, 1.0, /, (, r0, -]
[{, ++, n, ;, final, double, r1, =, 1.0, /, (, r0, -, a0, ), ;, final, long, a1, =]
[;, final, double, r1, =, 1.0, /, (, r0, -, a0, ), ;, final, long, a1, =, (, long, )]
[;, final, double, r1, =, 1.0, /, (, r0, -, a0, ), ;, final, long, a1, =, (, long, )]
[=, 1.0, /, (, r0, -, a0, ), ;, final, long, a1, =, (, long, ), FastMath, ., floor, (]
[(, r0, -, a0, ), ;, final, long, a1, =, (, long, ), FastMath, ., floor, (, r1, ), ;]
[-, a0, ), ;, final, long, a1, =, (, long, ), FastMath, ., floor, (, r1, ), ;, p2, =]
[-, a0, ), ;, final, long, a1, =, (, long, ), FastMath, ., floor, (, r1, ), ;, p2, =]
[a0, ), ;, final, long, a1, =, (, long, ), FastMath, ., floor, (, r1, ), ;, p2, =, (]
[a0, ), ;, final, long, a1, =, (, long, ), FastMath, ., floor, (, r1, ), ;, p2, =, (]
[;, final, long, a1, =, (, long, ), FastMath, ., floor, (, r1, ), ;, p2, =, (, a1, *]
[a1, =, (, long, ), FastMath, ., floor, (, r1, ), ;, p2, =, (, a1, *, p1, ), +]
[(, long, ), FastMath, ., floor, (, r1, ), ;, p2, =, (, a1, *, p1, ), +, p0, ;]
[), FastMath, ., floor, (, r1, ), ;, p2, =, (, a1, *, p1, ), +, p0, ;, q2, =]
[), FastMath, ., floor, (, r1, ), ;, p2, =, (, a1, *, p1, ), +, p0, ;, q2, =]
[FastMath, ., floor, (, r1, ), ;, p2, =, (, a1, *, p1, ), +, p0, ;, q2, =, (]
[FastMath, ., floor, (, r1, ), ;, p2, =, (, a1, *, p1, ), +, p0, ;, q2, =, (]
[floor, (, r1, ), ;, p2, =, (, a1, *, p1, ), +, p0, ;, q2, =, (, a1, *]
[), ;, p2, =, (, a1, *, p1, ), +, p0, ;, q2, =, (, a1, *, q1, ), +]
[(, a1, *, p1, ), +, p0, ;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (]
[(, a1, *, p1, ), +, p0, ;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (]
[a1, *, p1, ), +, p0, ;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (, (]
[a1, *, p1, ), +, p0, ;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (, (]
[p1, ), +, p0, ;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (, (, p2, >]
[p0, ;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (, (, p2, >, overflow, ), ||]
[;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (, (, p2, >, overflow, ), ||, (]
[;, q2, =, (, a1, *, q1, ), +, q0, ;, if, (, (, p2, >, overflow, ), ||, (]
[=, (, a1, *, q1, ), +, q0, ;, if, (, (, p2, >, overflow, ), ||, (, q2, >]
[), +, q0, ;, if, (, (, p2, >, overflow, ), ||, (, q2, >, overflow, ), ), {, throw]
[;, if, (, (, p2, >, overflow, ), ||, (, q2, >, overflow, ), ), {, throw, new, FractionConversionException, (]
[(, (, p2, >, overflow, ), ||, (, q2, >, overflow, ), ), {, throw, new, FractionConversionException, (, value, ,]
[p2, >, overflow, ), ||, (, q2, >, overflow, ), ), {, throw, new, FractionConversionException, (, value, ,, p2, ,]
[overflow, ), ), {, throw, new, FractionConversionException, (, value, ,, p2, ,, q2, ), ;, }, final, double, convergent, =]
[overflow, ), ), {, throw, new, FractionConversionException, (, value, ,, p2, ,, q2, ), ;, }, final, double, convergent, =]
[{, throw, new, FractionConversionException, (, value, ,, p2, ,, q2, ), ;, }, final, double, convergent, =, (, double, )]
[new, FractionConversionException, (, value, ,, p2, ,, q2, ), ;, }, final, double, convergent, =, (, double, ), p2, /]
[value, ,, p2, ,, q2, ), ;, }, final, double, convergent, =, (, double, ), p2, /, (, double, )]
[q2, ), ;, }, final, double, convergent, =, (, double, ), p2, /, (, double, ), q2, ;, if, (]
[q2, ), ;, }, final, double, convergent, =, (, double, ), p2, /, (, double, ), q2, ;, if, (]
[q2, ), ;, }, final, double, convergent, =, (, double, ), p2, /, (, double, ), q2, ;, if, (]
[), ;, }, final, double, convergent, =, (, double, ), p2, /, (, double, ), q2, ;, if, (, (]
[), ;, }, final, double, convergent, =, (, double, ), p2, /, (, double, ), q2, ;, if, (, (]
[}, final, double, convergent, =, (, double, ), p2, /, (, double, ), q2, ;, if, (, (, n, <]
[convergent, =, (, double, ), p2, /, (, double, ), q2, ;, if, (, (, n, <, maxIterations, ), &&]
[=, (, double, ), p2, /, (, double, ), q2, ;, if, (, (, n, <, maxIterations, ), &&, (]
[=, (, double, ), p2, /, (, double, ), q2, ;, if, (, (, n, <, maxIterations, ), &&, (]
[=, (, double, ), p2, /, (, double, ), q2, ;, if, (, (, n, <, maxIterations, ), &&, (]
[p2, /, (, double, ), q2, ;, if, (, (, n, <, maxIterations, ), &&, (, FastMath, ., abs, (]
[p2, /, (, double, ), q2, ;, if, (, (, n, <, maxIterations, ), &&, (, FastMath, ., abs, (]
[(, double, ), q2, ;, if, (, (, n, <, maxIterations, ), &&, (, FastMath, ., abs, (, convergent, -]
[q2, ;, if, (, (, n, <, maxIterations, ), &&, (, FastMath, ., abs, (, convergent, -, value, ), >]
[(, (, n, <, maxIterations, ), &&, (, FastMath, ., abs, (, convergent, -, value, ), >, epsilon, ), &&]
[(, n, <, maxIterations, ), &&, (, FastMath, ., abs, (, convergent, -, value, ), >, epsilon, ), &&, (]
[(, n, <, maxIterations, ), &&, (, FastMath, ., abs, (, convergent, -, value, ), >, epsilon, ), &&, (]
[<, maxIterations, ), &&, (, FastMath, ., abs, (, convergent, -, value, ), >, epsilon, ), &&, (, q2, <]
[(, FastMath, ., abs, (, convergent, -, value, ), >, epsilon, ), &&, (, q2, <, maxDenominator, ), ), {]
[., abs, (, convergent, -, value, ), >, epsilon, ), &&, (, q2, <, maxDenominator, ), ), {, p0, =]
[(, convergent, -, value, ), >, epsilon, ), &&, (, q2, <, maxDenominator, ), ), {, p0, =, p1, ;]
[-, value, ), >, epsilon, ), &&, (, q2, <, maxDenominator, ), ), {, p0, =, p1, ;, p1, =]
[), >, epsilon, ), &&, (, q2, <, maxDenominator, ), ), {, p0, =, p1, ;, p1, =, p2, ;]
[epsilon, ), &&, (, q2, <, maxDenominator, ), ), {, p0, =, p1, ;, p1, =, p2, ;, q0, =]
[&&, (, q2, <, maxDenominator, ), ), {, p0, =, p1, ;, p1, =, p2, ;, q0, =, q1, ;]
[q2, <, maxDenominator, ), ), {, p0, =, p1, ;, p1, =, p2, ;, q0, =, q1, ;, q1, =]
[maxDenominator, ), ), {, p0, =, p1, ;, p1, =, p2, ;, q0, =, q1, ;, q1, =, q2, ;]
[), {, p0, =, p1, ;, p1, =, p2, ;, q0, =, q1, ;, q1, =, q2, ;, a0, =]
[p0, =, p1, ;, p1, =, p2, ;, q0, =, q1, ;, q1, =, q2, ;, a0, =, a1, ;]
[p1, ;, p1, =, p2, ;, q0, =, q1, ;, q1, =, q2, ;, a0, =, a1, ;, r0, =]
[;, q0, =, q1, ;, q1, =, q2, ;, a0, =, a1, ;, r0, =, r1, ;, }, else, {]
[=, q1, ;, q1, =, q2, ;, a0, =, a1, ;, r0, =, r1, ;, }, else, {, stop, =]
[;, a0, =, a1, ;, r0, =, r1, ;, }, else, {, stop, =, true, ;, }, }, while, (]
[a0, =, a1, ;, r0, =, r1, ;, }, else, {, stop, =, true, ;, }, }, while, (, !]
[=, r1, ;, }, else, {, stop, =, true, ;, }, }, while, (, !, stop, ), ;, if, (]
[=, r1, ;, }, else, {, stop, =, true, ;, }, }, while, (, !, stop, ), ;, if, (]
[;, }, else, {, stop, =, true, ;, }, }, while, (, !, stop, ), ;, if, (, n, >=]
[stop, =, true, ;, }, }, while, (, !, stop, ), ;, if, (, n, >=, maxIterations, ), {, throw]
[;, }, }, while, (, !, stop, ), ;, if, (, n, >=, maxIterations, ), {, throw, new, FractionConversionException, (]
[}, while, (, !, stop, ), ;, if, (, n, >=, maxIterations, ), {, throw, new, FractionConversionException, (, value, ,]
[;, if, (, n, >=, maxIterations, ), {, throw, new, FractionConversionException, (, value, ,, maxIterations, ), ;, }, if, (]
[;, if, (, n, >=, maxIterations, ), {, throw, new, FractionConversionException, (, value, ,, maxIterations, ), ;, }, if, (]
[(, n, >=, maxIterations, ), {, throw, new, FractionConversionException, (, value, ,, maxIterations, ), ;, }, if, (, q2, <]
[maxIterations, ), {, throw, new, FractionConversionException, (, value, ,, maxIterations, ), ;, }, if, (, q2, <, maxDenominator, ), {]
[{, throw, new, FractionConversionException, (, value, ,, maxIterations, ), ;, }, if, (, q2, <, maxDenominator, ), {, numerator, =]
[{, throw, new, FractionConversionException, (, value, ,, maxIterations, ), ;, }, if, (, q2, <, maxDenominator, ), {, numerator, =]
[(, value, ,, maxIterations, ), ;, }, if, (, q2, <, maxDenominator, ), {, numerator, =, BigInteger, ., valueOf, (]
[maxIterations, ), ;, }, if, (, q2, <, maxDenominator, ), {, numerator, =, BigInteger, ., valueOf, (, p2, ), ;]
[;, }, if, (, q2, <, maxDenominator, ), {, numerator, =, BigInteger, ., valueOf, (, p2, ), ;, denominator, =]
[;, }, if, (, q2, <, maxDenominator, ), {, numerator, =, BigInteger, ., valueOf, (, p2, ), ;, denominator, =]
[q2, <, maxDenominator, ), {, numerator, =, BigInteger, ., valueOf, (, p2, ), ;, denominator, =, BigInteger, ., valueOf, (]
[=, BigInteger, ., valueOf, (, p2, ), ;, denominator, =, BigInteger, ., valueOf, (, q2, ), ;, }, else, {]
[., valueOf, (, p2, ), ;, denominator, =, BigInteger, ., valueOf, (, q2, ), ;, }, else, {, numerator, =]
[., valueOf, (, p2, ), ;, denominator, =, BigInteger, ., valueOf, (, q2, ), ;, }, else, {, numerator, =]
[), ;, denominator, =, BigInteger, ., valueOf, (, q2, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (]
[=, BigInteger, ., valueOf, (, q2, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, p1, ), ;]
[., valueOf, (, q2, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, p1, ), ;, denominator, =]
[., valueOf, (, q2, ), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, p1, ), ;, denominator, =]
[), ;, }, else, {, numerator, =, BigInteger, ., valueOf, (, p1, ), ;, denominator, =, BigInteger, ., valueOf, (]
[), ;, }, }, public, BigFraction, (, final, double, value, ,, final, int, maxDenominator, ), throws, FractionConversionException, {, this, (]
[}, }, public, BigFraction, (, final, double, value, ,, final, int, maxDenominator, ), throws, FractionConversionException, {, this, (, value, ,]
[public, BigFraction, (, final, double, value, ,, final, int, maxDenominator, ), throws, FractionConversionException, {, this, (, value, ,, 0, ,]
[(, final, double, value, ,, final, int, maxDenominator, ), throws, FractionConversionException, {, this, (, value, ,, 0, ,, maxDenominator, ,]
[value, ,, 0, ,, maxDenominator, ,, 100, ), ;, }, public, BigFraction, (, final, int, num, ), {, this, (]
[value, ,, 0, ,, maxDenominator, ,, 100, ), ;, }, public, BigFraction, (, final, int, num, ), {, this, (]
[maxDenominator, ,, 100, ), ;, }, public, BigFraction, (, final, int, num, ), {, this, (, BigInteger, ., valueOf, (]
[), ;, }, public, BigFraction, (, final, int, num, ), {, this, (, BigInteger, ., valueOf, (, num, ), ,]
[), ;, }, public, BigFraction, (, final, int, num, ), {, this, (, BigInteger, ., valueOf, (, num, ), ,]
[BigInteger, ., ONE, ), ;, }, public, BigFraction, (, final, int, num, ,, final, int, den, ), {, this, (]
[BigInteger, ., ONE, ), ;, }, public, BigFraction, (, final, int, num, ,, final, int, den, ), {, this, (]
[;, }, public, BigFraction, (, final, int, num, ,, final, int, den, ), {, this, (, BigInteger, ., valueOf, (]
[BigFraction, (, final, int, num, ,, final, int, den, ), {, this, (, BigInteger, ., valueOf, (, num, ), ,]
[BigFraction, (, final, int, num, ,, final, int, den, ), {, this, (, BigInteger, ., valueOf, (, num, ), ,]
[num, ,, final, int, den, ), {, this, (, BigInteger, ., valueOf, (, num, ), ,, BigInteger, ., valueOf, (]
[,, BigInteger, ., valueOf, (, den, ), ), ;, }, public, BigFraction, (, final, long, num, ), {, this, (]
[,, BigInteger, ., valueOf, (, den, ), ), ;, }, public, BigFraction, (, final, long, num, ), {, this, (]
[(, den, ), ), ;, }, public, BigFraction, (, final, long, num, ), {, this, (, BigInteger, ., valueOf, (]
[), ;, }, public, BigFraction, (, final, long, num, ), {, this, (, BigInteger, ., valueOf, (, num, ), ,]
[), ;, }, public, BigFraction, (, final, long, num, ), {, this, (, BigInteger, ., valueOf, (, num, ), ,]
[BigInteger, ., ONE, ), ;, }, public, BigFraction, (, final, long, num, ,, final, long, den, ), {, this, (]
[BigInteger, ., ONE, ), ;, }, public, BigFraction, (, final, long, num, ,, final, long, den, ), {, this, (]
[;, }, public, BigFraction, (, final, long, num, ,, final, long, den, ), {, this, (, BigInteger, ., valueOf, (]
[BigFraction, (, final, long, num, ,, final, long, den, ), {, this, (, BigInteger, ., valueOf, (, num, ), ,]
[BigFraction, (, final, long, num, ,, final, long, den, ), {, this, (, BigInteger, ., valueOf, (, num, ), ,]
[num, ,, final, long, den, ), {, this, (, BigInteger, ., valueOf, (, num, ), ,, BigInteger, ., valueOf, (]
[), ), ;, }, public, static, BigFraction, getReducedFraction, (, final, int, numerator, ,, final, int, denominator, ), {, if, (]
[), ), ;, }, public, static, BigFraction, getReducedFraction, (, final, int, numerator, ,, final, int, denominator, ), {, if, (]
[;, }, public, static, BigFraction, getReducedFraction, (, final, int, numerator, ,, final, int, denominator, ), {, if, (, numerator, ==]
[BigFraction, getReducedFraction, (, final, int, numerator, ,, final, int, denominator, ), {, if, (, numerator, ==, 0, ), {, return]
[int, numerator, ,, final, int, denominator, ), {, if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, return]
[final, int, denominator, ), {, if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, return, new, BigFraction, (]
[denominator, ), {, if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator, ,]
[ZERO, ;, }, return, new, BigFraction, (, numerator, ,, denominator, ), ;, }, public, BigFraction, abs, (, ), {, return]
[ZERO, ;, }, return, new, BigFraction, (, numerator, ,, denominator, ), ;, }, public, BigFraction, abs, (, ), {, return]
[;, }, return, new, BigFraction, (, numerator, ,, denominator, ), ;, }, public, BigFraction, abs, (, ), {, return, (]
[;, }, return, new, BigFraction, (, numerator, ,, denominator, ), ;, }, public, BigFraction, abs, (, ), {, return, (]
[;, }, return, new, BigFraction, (, numerator, ,, denominator, ), ;, }, public, BigFraction, abs, (, ), {, return, (]
[;, }, return, new, BigFraction, (, numerator, ,, denominator, ), ;, }, public, BigFraction, abs, (, ), {, return, (]
[numerator, ,, denominator, ), ;, }, public, BigFraction, abs, (, ), {, return, (, BigInteger, ., ZERO, ., compareTo, (]
[), ;, }, public, BigFraction, abs, (, ), {, return, (, BigInteger, ., ZERO, ., compareTo, (, numerator, ), <=]
[public, BigFraction, abs, (, ), {, return, (, BigInteger, ., ZERO, ., compareTo, (, numerator, ), <=, 0, ), ?]
[abs, (, ), {, return, (, BigInteger, ., ZERO, ., compareTo, (, numerator, ), <=, 0, ), ?, this, :]
[), ?, this, :, negate, (, ), ;, }, public, BigFraction, add, (, final, BigInteger, bg, ), throws, NullArgumentException, {]
[), ?, this, :, negate, (, ), ;, }, public, BigFraction, add, (, final, BigInteger, bg, ), throws, NullArgumentException, {]
[negate, (, ), ;, }, public, BigFraction, add, (, final, BigInteger, bg, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[}, public, BigFraction, add, (, final, BigInteger, bg, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, bg, ), ;, return]
[add, (, final, BigInteger, bg, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, bg, ), ;, return, new, BigFraction, (]
[add, (, final, BigInteger, bg, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, bg, ), ;, return, new, BigFraction, (]
[bg, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, bg, ), ;, return, new, BigFraction, (, numerator, ., add, (]
[bg, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, bg, ), ;, return, new, BigFraction, (, numerator, ., add, (]
[{, MathUtils, ., checkNotNull, (, bg, ), ;, return, new, BigFraction, (, numerator, ., add, (, denominator, ., multiply, (]
[(, bg, ), ;, return, new, BigFraction, (, numerator, ., add, (, denominator, ., multiply, (, bg, ), ), ,]
[multiply, (, bg, ), ), ,, denominator, ), ;, }, public, BigFraction, add, (, final, int, i, ), {, return]
[bg, ), ), ,, denominator, ), ;, }, public, BigFraction, add, (, final, int, i, ), {, return, add, (]
[bg, ), ), ,, denominator, ), ;, }, public, BigFraction, add, (, final, int, i, ), {, return, add, (]
[denominator, ), ;, }, public, BigFraction, add, (, final, int, i, ), {, return, add, (, BigInteger, ., valueOf, (]
[(, BigInteger, ., valueOf, (, i, ), ), ;, }, public, BigFraction, add, (, final, long, l, ), {, return]
[., valueOf, (, i, ), ), ;, }, public, BigFraction, add, (, final, long, l, ), {, return, add, (]
[., valueOf, (, i, ), ), ;, }, public, BigFraction, add, (, final, long, l, ), {, return, add, (]
[), ), ;, }, public, BigFraction, add, (, final, long, l, ), {, return, add, (, BigInteger, ., valueOf, (]
[BigInteger, ., valueOf, (, l, ), ), ;, }, public, BigFraction, add, (, final, BigFraction, fraction, ), {, if, (]
[BigInteger, ., valueOf, (, l, ), ), ;, }, public, BigFraction, add, (, final, BigFraction, fraction, ), {, if, (]
[valueOf, (, l, ), ), ;, }, public, BigFraction, add, (, final, BigFraction, fraction, ), {, if, (, fraction, ==]
[), ;, }, public, BigFraction, add, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw]
[public, BigFraction, add, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (]
[public, BigFraction, add, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (]
[{, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (]
[{, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, ZERO, ., equals, (]
[new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, ZERO, ., equals, (, fraction, ), ), {, return]
[), ;, }, if, (, ZERO, ., equals, (, fraction, ), ), {, return, this, ;, }, BigInteger, num, =]
[ZERO, ., equals, (, fraction, ), ), {, return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =]
[fraction, ), ), {, return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (]
[fraction, ), ), {, return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (]
[return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (]
[return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (]
[=, null, ;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {]
[;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {, num, =]
[;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {, num, =]
[null, ;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {, num, =, numerator, ., add, (]
[null, ;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {, num, =, numerator, ., add, (]
[., equals, (, fraction, ., denominator, ), ), {, num, =, numerator, ., add, (, fraction, ., numerator, ), ;]
[(, fraction, ., denominator, ), ), {, num, =, numerator, ., add, (, fraction, ., numerator, ), ;, den, =]
[), {, num, =, numerator, ., add, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {]
[num, =, numerator, ., add, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =]
[num, =, numerator, ., add, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =]
[=, numerator, ., add, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (]
[=, numerator, ., add, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (]
[(, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (]
[(, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (]
[denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., add, (]
[denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., add, (]
[;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., add, (, (]
[;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., add, (, (]
[numerator, ., multiply, (, fraction, ., denominator, ), ), ., add, (, (, fraction, ., numerator, ), ., multiply, (]
[fraction, ., denominator, ), ), ., add, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;]
[denominator, ), ), ., add, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =]
[denominator, ), ), ., add, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =]
[add, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply, (]
[add, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply, (]
[., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return]
[denominator, ), ), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (]
[), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (, num, ,]
[), ;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, public, BigDecimal, bigDecimalValue, (, ), {, return]
[), ;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, public, BigDecimal, bigDecimalValue, (, ), {, return]
[return, new, BigFraction, (, num, ,, den, ), ;, }, public, BigDecimal, bigDecimalValue, (, ), {, return, new, BigDecimal, (]
[,, den, ), ;, }, public, BigDecimal, bigDecimalValue, (, ), {, return, new, BigDecimal, (, numerator, ), ., divide, (]
[;, }, public, BigDecimal, bigDecimalValue, (, ), {, return, new, BigDecimal, (, numerator, ), ., divide, (, new, BigDecimal, (]
[divide, (, new, BigDecimal, (, denominator, ), ), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, roundingMode, ), {, return]
[divide, (, new, BigDecimal, (, denominator, ), ), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, roundingMode, ), {, return]
[BigDecimal, (, denominator, ), ), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, roundingMode, ), {, return, new, BigDecimal, (]
[;, }, public, BigDecimal, bigDecimalValue, (, final, int, roundingMode, ), {, return, new, BigDecimal, (, numerator, ), ., divide, (]
[BigDecimal, bigDecimalValue, (, final, int, roundingMode, ), {, return, new, BigDecimal, (, numerator, ), ., divide, (, new, BigDecimal, (]
[final, int, roundingMode, ), {, return, new, BigDecimal, (, numerator, ), ., divide, (, new, BigDecimal, (, denominator, ), ,]
[), ,, roundingMode, ), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, scale, ,, final, int, roundingMode, ), {, return]
[), ,, roundingMode, ), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, scale, ,, final, int, roundingMode, ), {, return]
[), ;, }, public, BigDecimal, bigDecimalValue, (, final, int, scale, ,, final, int, roundingMode, ), {, return, new, BigDecimal, (]
[bigDecimalValue, (, final, int, scale, ,, final, int, roundingMode, ), {, return, new, BigDecimal, (, numerator, ), ., divide, (]
[int, scale, ,, final, int, roundingMode, ), {, return, new, BigDecimal, (, numerator, ), ., divide, (, new, BigDecimal, (]
[final, int, roundingMode, ), {, return, new, BigDecimal, (, numerator, ), ., divide, (, new, BigDecimal, (, denominator, ), ,]
[roundingMode, ), {, return, new, BigDecimal, (, numerator, ), ., divide, (, new, BigDecimal, (, denominator, ), ,, scale, ,]
[), ,, scale, ,, roundingMode, ), ;, }, public, int, compareTo, (, final, BigFraction, object, ), {, BigInteger, nOd, =]
[), ,, scale, ,, roundingMode, ), ;, }, public, int, compareTo, (, final, BigFraction, object, ), {, BigInteger, nOd, =]
[roundingMode, ), ;, }, public, int, compareTo, (, final, BigFraction, object, ), {, BigInteger, nOd, =, numerator, ., multiply, (]
[roundingMode, ), ;, }, public, int, compareTo, (, final, BigFraction, object, ), {, BigInteger, nOd, =, numerator, ., multiply, (]
[final, BigFraction, object, ), {, BigInteger, nOd, =, numerator, ., multiply, (, object, ., denominator, ), ;, BigInteger, dOn, =]
[final, BigFraction, object, ), {, BigInteger, nOd, =, numerator, ., multiply, (, object, ., denominator, ), ;, BigInteger, dOn, =]
[{, BigInteger, nOd, =, numerator, ., multiply, (, object, ., denominator, ), ;, BigInteger, dOn, =, denominator, ., multiply, (]
[{, BigInteger, nOd, =, numerator, ., multiply, (, object, ., denominator, ), ;, BigInteger, dOn, =, denominator, ., multiply, (]
[multiply, (, object, ., denominator, ), ;, BigInteger, dOn, =, denominator, ., multiply, (, object, ., numerator, ), ;, return]
[multiply, (, object, ., denominator, ), ;, BigInteger, dOn, =, denominator, ., multiply, (, object, ., numerator, ), ;, return]
[denominator, ), ;, BigInteger, dOn, =, denominator, ., multiply, (, object, ., numerator, ), ;, return, nOd, ., compareTo, (]
[return, nOd, ., compareTo, (, dOn, ), ;, }, public, BigFraction, divide, (, final, BigInteger, bg, ), {, if, (]
[return, nOd, ., compareTo, (, dOn, ), ;, }, public, BigFraction, divide, (, final, BigInteger, bg, ), {, if, (]
[., compareTo, (, dOn, ), ;, }, public, BigFraction, divide, (, final, BigInteger, bg, ), {, if, (, bg, ==]
[), ;, }, public, BigFraction, divide, (, final, BigInteger, bg, ), {, if, (, bg, ==, null, ), {, throw]
[public, BigFraction, divide, (, final, BigInteger, bg, ), {, if, (, bg, ==, null, ), {, throw, new, NullArgumentException, (]
[public, BigFraction, divide, (, final, BigInteger, bg, ), {, if, (, bg, ==, null, ), {, throw, new, NullArgumentException, (]
[{, if, (, bg, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (]
[{, if, (, bg, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (]
[{, if, (, bg, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (]
[(, LocalizedFormats, ., FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (, bg, ), ), {, throw]
[FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (, bg, ), ), {, throw, new, MathArithmeticException, (]
[FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (, bg, ), ), {, throw, new, MathArithmeticException, (]
[., ZERO, ., equals, (, bg, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return]
[equals, (, bg, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return, new, BigFraction, (]
[bg, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return, new, BigFraction, (, numerator, ,]
[bg, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return, new, BigFraction, (, numerator, ,]
[throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return, new, BigFraction, (, numerator, ,, denominator, ., multiply, (]
[,, denominator, ., multiply, (, bg, ), ), ;, }, public, BigFraction, divide, (, final, int, i, ), {, return]
[., multiply, (, bg, ), ), ;, }, public, BigFraction, divide, (, final, int, i, ), {, return, divide, (]
[., multiply, (, bg, ), ), ;, }, public, BigFraction, divide, (, final, int, i, ), {, return, divide, (]
[), ), ;, }, public, BigFraction, divide, (, final, int, i, ), {, return, divide, (, BigInteger, ., valueOf, (]
[(, BigInteger, ., valueOf, (, i, ), ), ;, }, public, BigFraction, divide, (, final, long, l, ), {, return]
[., valueOf, (, i, ), ), ;, }, public, BigFraction, divide, (, final, long, l, ), {, return, divide, (]
[., valueOf, (, i, ), ), ;, }, public, BigFraction, divide, (, final, long, l, ), {, return, divide, (]
[), ), ;, }, public, BigFraction, divide, (, final, long, l, ), {, return, divide, (, BigInteger, ., valueOf, (]
[BigInteger, ., valueOf, (, l, ), ), ;, }, public, BigFraction, divide, (, final, BigFraction, fraction, ), {, if, (]
[BigInteger, ., valueOf, (, l, ), ), ;, }, public, BigFraction, divide, (, final, BigFraction, fraction, ), {, if, (]
[valueOf, (, l, ), ), ;, }, public, BigFraction, divide, (, final, BigFraction, fraction, ), {, if, (, fraction, ==]
[), ;, }, public, BigFraction, divide, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw]
[public, BigFraction, divide, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (]
[public, BigFraction, divide, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (]
[{, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (]
[{, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (]
[{, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (]
[., FRACTION, ), ;, }, if, (, BigInteger, ., ZERO, ., equals, (, fraction, ., numerator, ), ), {, throw]
[;, }, if, (, BigInteger, ., ZERO, ., equals, (, fraction, ., numerator, ), ), {, throw, new, MathArithmeticException, (]
[;, }, if, (, BigInteger, ., ZERO, ., equals, (, fraction, ., numerator, ), ), {, throw, new, MathArithmeticException, (]
[., equals, (, fraction, ., numerator, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return]
[(, fraction, ., numerator, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return, multiply, (]
[(, fraction, ., numerator, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, return, multiply, (]
[(, fraction, ., reciprocal, (, ), ), ;, }, @, Override, public, double, doubleValue, (, ), {, double, result, =]
[(, fraction, ., reciprocal, (, ), ), ;, }, @, Override, public, double, doubleValue, (, ), {, double, result, =]
[(, fraction, ., reciprocal, (, ), ), ;, }, @, Override, public, double, doubleValue, (, ), {, double, result, =]
[), ;, }, @, Override, public, double, doubleValue, (, ), {, double, result, =, numerator, ., doubleValue, (, ), /]
[), ;, }, @, Override, public, double, doubleValue, (, ), {, double, result, =, numerator, ., doubleValue, (, ), /]
[(, ), {, double, result, =, numerator, ., doubleValue, (, ), /, denominator, ., doubleValue, (, ), ;, if, (]
[(, ), {, double, result, =, numerator, ., doubleValue, (, ), /, denominator, ., doubleValue, (, ), ;, if, (]
[result, =, numerator, ., doubleValue, (, ), /, denominator, ., doubleValue, (, ), ;, if, (, Double, ., isNaN, (]
[/, denominator, ., doubleValue, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =]
[/, denominator, ., doubleValue, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =]
[/, denominator, ., doubleValue, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =]
[(, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (]
[(, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (]
[., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,]
[., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,]
[int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -]
[int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -]
[., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (]
[., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (]
[bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Double, ., MAX_VALUE, ), ;]
[), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Double, ., MAX_VALUE, ), ;, result, =]
[), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Double, ., MAX_VALUE, ), ;, result, =]
[), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Double, ., MAX_VALUE, ), ;, result, =]
[), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Double, ., MAX_VALUE, ), ;, result, =]
[bitLength, (, ), ), -, FastMath, ., getExponent, (, Double, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (]
[getExponent, (, Double, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., doubleValue, (, ), /]
[getExponent, (, Double, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., doubleValue, (, ), /]
[getExponent, (, Double, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., doubleValue, (, ), /]
[MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., doubleValue, (, ), /, denominator, ., shiftRight, (]
[shift, ), ., doubleValue, (, ), /, denominator, ., shiftRight, (, shift, ), ., doubleValue, (, ), ;, }, return]
[;, }, return, result, ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, boolean, ret, =]
[;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, boolean, ret, =, false, ;, if, (]
[;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, boolean, ret, =, false, ;, if, (]
[@, Override, public, boolean, equals, (, final, Object, other, ), {, boolean, ret, =, false, ;, if, (, this, ==]
[boolean, equals, (, final, Object, other, ), {, boolean, ret, =, false, ;, if, (, this, ==, other, ), {]
[(, final, Object, other, ), {, boolean, ret, =, false, ;, if, (, this, ==, other, ), {, ret, =]
[boolean, ret, =, false, ;, if, (, this, ==, other, ), {, ret, =, true, ;, }, else, if, (]
[boolean, ret, =, false, ;, if, (, this, ==, other, ), {, ret, =, true, ;, }, else, if, (]
[==, other, ), {, ret, =, true, ;, }, else, if, (, other, instanceof, BigFraction, ), {, BigFraction, rhs, =]
[==, other, ), {, ret, =, true, ;, }, else, if, (, other, instanceof, BigFraction, ), {, BigFraction, rhs, =]
[other, ), {, ret, =, true, ;, }, else, if, (, other, instanceof, BigFraction, ), {, BigFraction, rhs, =, (]
[ret, =, true, ;, }, else, if, (, other, instanceof, BigFraction, ), {, BigFraction, rhs, =, (, (, BigFraction, )]
[BigFraction, ), {, BigFraction, rhs, =, (, (, BigFraction, ), other, ), ., reduce, (, ), ;, BigFraction, thisOne, =]
[BigFraction, ), {, BigFraction, rhs, =, (, (, BigFraction, ), other, ), ., reduce, (, ), ;, BigFraction, thisOne, =]
[(, (, BigFraction, ), other, ), ., reduce, (, ), ;, BigFraction, thisOne, =, this, ., reduce, (, ), ;]
[BigFraction, ), other, ), ., reduce, (, ), ;, BigFraction, thisOne, =, this, ., reduce, (, ), ;, ret, =]
[BigFraction, ), other, ), ., reduce, (, ), ;, BigFraction, thisOne, =, this, ., reduce, (, ), ;, ret, =]
[BigFraction, ), other, ), ., reduce, (, ), ;, BigFraction, thisOne, =, this, ., reduce, (, ), ;, ret, =]
[BigFraction, ), other, ), ., reduce, (, ), ;, BigFraction, thisOne, =, this, ., reduce, (, ), ;, ret, =]
[(, ), ;, BigFraction, thisOne, =, this, ., reduce, (, ), ;, ret, =, thisOne, ., numerator, ., equals, (]
[(, ), ;, BigFraction, thisOne, =, this, ., reduce, (, ), ;, ret, =, thisOne, ., numerator, ., equals, (]
[=, this, ., reduce, (, ), ;, ret, =, thisOne, ., numerator, ., equals, (, rhs, ., numerator, ), &&]
[=, this, ., reduce, (, ), ;, ret, =, thisOne, ., numerator, ., equals, (, rhs, ., numerator, ), &&]
[=, this, ., reduce, (, ), ;, ret, =, thisOne, ., numerator, ., equals, (, rhs, ., numerator, ), &&]
[;, ret, =, thisOne, ., numerator, ., equals, (, rhs, ., numerator, ), &&, thisOne, ., denominator, ., equals, (]
[;, ret, =, thisOne, ., numerator, ., equals, (, rhs, ., numerator, ), &&, thisOne, ., denominator, ., equals, (]
[equals, (, rhs, ., numerator, ), &&, thisOne, ., denominator, ., equals, (, rhs, ., denominator, ), ;, }, return]
[., denominator, ), ;, }, return, ret, ;, }, @, Override, public, float, floatValue, (, ), {, float, result, =]
[., denominator, ), ;, }, return, ret, ;, }, @, Override, public, float, floatValue, (, ), {, float, result, =]
[., denominator, ), ;, }, return, ret, ;, }, @, Override, public, float, floatValue, (, ), {, float, result, =]
[ret, ;, }, @, Override, public, float, floatValue, (, ), {, float, result, =, numerator, ., floatValue, (, ), /]
[ret, ;, }, @, Override, public, float, floatValue, (, ), {, float, result, =, numerator, ., floatValue, (, ), /]
[(, ), {, float, result, =, numerator, ., floatValue, (, ), /, denominator, ., floatValue, (, ), ;, if, (]
[(, ), {, float, result, =, numerator, ., floatValue, (, ), /, denominator, ., floatValue, (, ), ;, if, (]
[result, =, numerator, ., floatValue, (, ), /, denominator, ., floatValue, (, ), ;, if, (, Double, ., isNaN, (]
[/, denominator, ., floatValue, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =]
[/, denominator, ., floatValue, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =]
[/, denominator, ., floatValue, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =]
[(, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (]
[(, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (]
[., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,]
[., isNaN, (, result, ), ), {, int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,]
[int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -]
[int, shift, =, Math, ., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -]
[., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (]
[., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (]
[bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Float, ., MAX_VALUE, ), ;]
[), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Float, ., MAX_VALUE, ), ;, result, =]
[), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Float, ., MAX_VALUE, ), ;, result, =]
[), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Float, ., MAX_VALUE, ), ;, result, =]
[), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Float, ., MAX_VALUE, ), ;, result, =]
[bitLength, (, ), ), -, FastMath, ., getExponent, (, Float, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (]
[getExponent, (, Float, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., floatValue, (, ), /]
[getExponent, (, Float, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., floatValue, (, ), /]
[getExponent, (, Float, ., MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., floatValue, (, ), /]
[MAX_VALUE, ), ;, result, =, numerator, ., shiftRight, (, shift, ), ., floatValue, (, ), /, denominator, ., shiftRight, (]
[shift, ), ., floatValue, (, ), /, denominator, ., shiftRight, (, shift, ), ., floatValue, (, ), ;, }, return]
[(, shift, ), ., floatValue, (, ), ;, }, return, result, ;, }, public, BigInteger, getDenominator, (, ), {, return]
[result, ;, }, public, BigInteger, getDenominator, (, ), {, return, denominator, ;, }, public, int, getDenominatorAsInt, (, ), {, return]
[result, ;, }, public, BigInteger, getDenominator, (, ), {, return, denominator, ;, }, public, int, getDenominatorAsInt, (, ), {, return]
[int, getDenominatorAsInt, (, ), {, return, denominator, ., intValue, (, ), ;, }, public, long, getDenominatorAsLong, (, ), {, return]
[int, getDenominatorAsInt, (, ), {, return, denominator, ., intValue, (, ), ;, }, public, long, getDenominatorAsLong, (, ), {, return]
[long, getDenominatorAsLong, (, ), {, return, denominator, ., longValue, (, ), ;, }, public, BigInteger, getNumerator, (, ), {, return]
[), ;, }, public, BigInteger, getNumerator, (, ), {, return, numerator, ;, }, public, int, getNumeratorAsInt, (, ), {, return]
[), ;, }, public, BigInteger, getNumerator, (, ), {, return, numerator, ;, }, public, int, getNumeratorAsInt, (, ), {, return]
[int, getNumeratorAsInt, (, ), {, return, numerator, ., intValue, (, ), ;, }, public, long, getNumeratorAsLong, (, ), {, return]
[int, getNumeratorAsInt, (, ), {, return, numerator, ., intValue, (, ), ;, }, public, long, getNumeratorAsLong, (, ), {, return]
[(, ), {, return, numerator, ., longValue, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, ), {, return, numerator, ., longValue, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, ), {, return, numerator, ., longValue, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[{, return, numerator, ., longValue, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 37, *]
[return, numerator, ., longValue, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 37, *, (]
[return, numerator, ., longValue, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 37, *, (]
[return, numerator, ., longValue, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 37, *, (]
[., longValue, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 37, *, (, 37, *]
[(, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 37, *, (, 37, *, 17, +]
[(, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 37, *, (, 37, *, 17, +]
[int, hashCode, (, ), {, return, 37, *, (, 37, *, 17, +, numerator, ., hashCode, (, ), ), +]
[int, hashCode, (, ), {, return, 37, *, (, 37, *, 17, +, numerator, ., hashCode, (, ), ), +]
[(, ), ), +, denominator, ., hashCode, (, ), ;, }, @, Override, public, int, intValue, (, ), {, return]
[(, ), ), +, denominator, ., hashCode, (, ), ;, }, @, Override, public, int, intValue, (, ), {, return]
[(, ), ), +, denominator, ., hashCode, (, ), ;, }, @, Override, public, int, intValue, (, ), {, return]
[denominator, ., hashCode, (, ), ;, }, @, Override, public, int, intValue, (, ), {, return, numerator, ., divide, (]
[., divide, (, denominator, ), ., intValue, (, ), ;, }, @, Override, public, long, longValue, (, ), {, return]
[., divide, (, denominator, ), ., intValue, (, ), ;, }, @, Override, public, long, longValue, (, ), {, return]
[., divide, (, denominator, ), ., intValue, (, ), ;, }, @, Override, public, long, longValue, (, ), {, return]
[), ., intValue, (, ), ;, }, @, Override, public, long, longValue, (, ), {, return, numerator, ., divide, (]
[(, denominator, ), ., longValue, (, ), ;, }, public, BigFraction, multiply, (, final, BigInteger, bg, ), {, if, (]
[(, denominator, ), ., longValue, (, ), ;, }, public, BigFraction, multiply, (, final, BigInteger, bg, ), {, if, (]
[), ., longValue, (, ), ;, }, public, BigFraction, multiply, (, final, BigInteger, bg, ), {, if, (, bg, ==]
[), ;, }, public, BigFraction, multiply, (, final, BigInteger, bg, ), {, if, (, bg, ==, null, ), {, throw]
[final, BigInteger, bg, ), {, if, (, bg, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return]
[), {, if, (, bg, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (]
[), {, if, (, bg, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (]
[bg, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (, bg, ., multiply, (]
[), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (, bg, ., multiply, (, numerator, ), ,]
[., multiply, (, numerator, ), ,, denominator, ), ;, }, public, BigFraction, multiply, (, final, int, i, ), {, return]
[(, numerator, ), ,, denominator, ), ;, }, public, BigFraction, multiply, (, final, int, i, ), {, return, multiply, (]
[(, numerator, ), ,, denominator, ), ;, }, public, BigFraction, multiply, (, final, int, i, ), {, return, multiply, (]
[denominator, ), ;, }, public, BigFraction, multiply, (, final, int, i, ), {, return, multiply, (, BigInteger, ., valueOf, (]
[(, BigInteger, ., valueOf, (, i, ), ), ;, }, public, BigFraction, multiply, (, final, long, l, ), {, return]
[., valueOf, (, i, ), ), ;, }, public, BigFraction, multiply, (, final, long, l, ), {, return, multiply, (]
[., valueOf, (, i, ), ), ;, }, public, BigFraction, multiply, (, final, long, l, ), {, return, multiply, (]
[), ), ;, }, public, BigFraction, multiply, (, final, long, l, ), {, return, multiply, (, BigInteger, ., valueOf, (]
[BigInteger, ., valueOf, (, l, ), ), ;, }, public, BigFraction, multiply, (, final, BigFraction, fraction, ), {, if, (]
[BigInteger, ., valueOf, (, l, ), ), ;, }, public, BigFraction, multiply, (, final, BigFraction, fraction, ), {, if, (]
[valueOf, (, l, ), ), ;, }, public, BigFraction, multiply, (, final, BigFraction, fraction, ), {, if, (, fraction, ==]
[), ;, }, public, BigFraction, multiply, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw]
[public, BigFraction, multiply, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (]
[public, BigFraction, multiply, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (]
[{, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (]
[{, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (]
[{, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, numerator, ., equals, (]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, numerator, ., equals, (]
[new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, numerator, ., equals, (, BigInteger, ., ZERO, ), ||]
[new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, numerator, ., equals, (, BigInteger, ., ZERO, ), ||]
[new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, numerator, ., equals, (, BigInteger, ., ZERO, ), ||]
[), ;, }, if, (, numerator, ., equals, (, BigInteger, ., ZERO, ), ||, fraction, ., numerator, ., equals, (]
[), ;, }, if, (, numerator, ., equals, (, BigInteger, ., ZERO, ), ||, fraction, ., numerator, ., equals, (]
[equals, (, BigInteger, ., ZERO, ), ||, fraction, ., numerator, ., equals, (, BigInteger, ., ZERO, ), ), {, return]
[ZERO, ), ||, fraction, ., numerator, ., equals, (, BigInteger, ., ZERO, ), ), {, return, ZERO, ;, }, return]
[fraction, ., numerator, ., equals, (, BigInteger, ., ZERO, ), ), {, return, ZERO, ;, }, return, new, BigFraction, (]
[fraction, ., numerator, ., equals, (, BigInteger, ., ZERO, ), ), {, return, ZERO, ;, }, return, new, BigFraction, (]
[equals, (, BigInteger, ., ZERO, ), ), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator, ., multiply, (]
[equals, (, BigInteger, ., ZERO, ), ), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator, ., multiply, (]
[), ), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator, ., multiply, (, fraction, ., numerator, ), ,]
[), ), {, return, ZERO, ;, }, return, new, BigFraction, (, numerator, ., multiply, (, fraction, ., numerator, ), ,]
[ZERO, ;, }, return, new, BigFraction, (, numerator, ., multiply, (, fraction, ., numerator, ), ,, denominator, ., multiply, (]
[ZERO, ;, }, return, new, BigFraction, (, numerator, ., multiply, (, fraction, ., numerator, ), ,, denominator, ., multiply, (]
[), ,, denominator, ., multiply, (, fraction, ., denominator, ), ), ;, }, public, BigFraction, negate, (, ), {, return]
[., multiply, (, fraction, ., denominator, ), ), ;, }, public, BigFraction, negate, (, ), {, return, new, BigFraction, (]
[., multiply, (, fraction, ., denominator, ), ), ;, }, public, BigFraction, negate, (, ), {, return, new, BigFraction, (]
[), ), ;, }, public, BigFraction, negate, (, ), {, return, new, BigFraction, (, numerator, ., negate, (, ), ,]
[new, BigFraction, (, numerator, ., negate, (, ), ,, denominator, ), ;, }, public, double, percentageValue, (, ), {, return]
[new, BigFraction, (, numerator, ., negate, (, ), ,, denominator, ), ;, }, public, double, percentageValue, (, ), {, return]
[(, numerator, ., negate, (, ), ,, denominator, ), ;, }, public, double, percentageValue, (, ), {, return, multiply, (]
[(, ONE_HUNDRED, ), ., doubleValue, (, ), ;, }, public, BigFraction, pow, (, final, int, exponent, ), {, if, (]
[(, ONE_HUNDRED, ), ., doubleValue, (, ), ;, }, public, BigFraction, pow, (, final, int, exponent, ), {, if, (]
[), ., doubleValue, (, ), ;, }, public, BigFraction, pow, (, final, int, exponent, ), {, if, (, exponent, <]
[), ;, }, public, BigFraction, pow, (, final, int, exponent, ), {, if, (, exponent, <, 0, ), {, return]
[public, BigFraction, pow, (, final, int, exponent, ), {, if, (, exponent, <, 0, ), {, return, new, BigFraction, (]
[public, BigFraction, pow, (, final, int, exponent, ), {, if, (, exponent, <, 0, ), {, return, new, BigFraction, (]
[final, int, exponent, ), {, if, (, exponent, <, 0, ), {, return, new, BigFraction, (, denominator, ., pow, (]
[int, exponent, ), {, if, (, exponent, <, 0, ), {, return, new, BigFraction, (, denominator, ., pow, (, -]
[{, if, (, exponent, <, 0, ), {, return, new, BigFraction, (, denominator, ., pow, (, -, exponent, ), ,]
[{, if, (, exponent, <, 0, ), {, return, new, BigFraction, (, denominator, ., pow, (, -, exponent, ), ,]
[<, 0, ), {, return, new, BigFraction, (, denominator, ., pow, (, -, exponent, ), ,, numerator, ., pow, (]
[0, ), {, return, new, BigFraction, (, denominator, ., pow, (, -, exponent, ), ,, numerator, ., pow, (, -]
[(, denominator, ., pow, (, -, exponent, ), ,, numerator, ., pow, (, -, exponent, ), ), ;, }, return]
[pow, (, -, exponent, ), ,, numerator, ., pow, (, -, exponent, ), ), ;, }, return, new, BigFraction, (]
[pow, (, -, exponent, ), ,, numerator, ., pow, (, -, exponent, ), ), ;, }, return, new, BigFraction, (]
[), ,, numerator, ., pow, (, -, exponent, ), ), ;, }, return, new, BigFraction, (, numerator, ., pow, (]
[., pow, (, -, exponent, ), ), ;, }, return, new, BigFraction, (, numerator, ., pow, (, exponent, ), ,]
[., pow, (, -, exponent, ), ), ;, }, return, new, BigFraction, (, numerator, ., pow, (, exponent, ), ,]
[exponent, ), ), ;, }, return, new, BigFraction, (, numerator, ., pow, (, exponent, ), ,, denominator, ., pow, (]
[denominator, ., pow, (, exponent, ), ), ;, }, public, BigFraction, pow, (, final, long, exponent, ), {, if, (]
[denominator, ., pow, (, exponent, ), ), ;, }, public, BigFraction, pow, (, final, long, exponent, ), {, if, (]
[pow, (, exponent, ), ), ;, }, public, BigFraction, pow, (, final, long, exponent, ), {, if, (, exponent, <]
[), ;, }, public, BigFraction, pow, (, final, long, exponent, ), {, if, (, exponent, <, 0, ), {, return]
[public, BigFraction, pow, (, final, long, exponent, ), {, if, (, exponent, <, 0, ), {, return, new, BigFraction, (]
[public, BigFraction, pow, (, final, long, exponent, ), {, if, (, exponent, <, 0, ), {, return, new, BigFraction, (]
[final, long, exponent, ), {, if, (, exponent, <, 0, ), {, return, new, BigFraction, (, ArithmeticUtils, ., pow, (]
[exponent, ), {, if, (, exponent, <, 0, ), {, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,]
[), {, if, (, exponent, <, 0, ), {, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, -]
[(, exponent, <, 0, ), {, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, -, exponent, ), ,]
[(, exponent, <, 0, ), {, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, -, exponent, ), ,]
[), {, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, -, exponent, ), ,, ArithmeticUtils, ., pow, (]
[return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, -, exponent, ), ,, ArithmeticUtils, ., pow, (, numerator, ,]
[new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, -, exponent, ), ,, ArithmeticUtils, ., pow, (, numerator, ,, -]
[(, denominator, ,, -, exponent, ), ,, ArithmeticUtils, ., pow, (, numerator, ,, -, exponent, ), ), ;, }, return]
[-, exponent, ), ,, ArithmeticUtils, ., pow, (, numerator, ,, -, exponent, ), ), ;, }, return, new, BigFraction, (]
[-, exponent, ), ,, ArithmeticUtils, ., pow, (, numerator, ,, -, exponent, ), ), ;, }, return, new, BigFraction, (]
[ArithmeticUtils, ., pow, (, numerator, ,, -, exponent, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (]
[pow, (, numerator, ,, -, exponent, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,]
[,, -, exponent, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,]
[,, -, exponent, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,]
[), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow, (]
[}, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow, (, denominator, ,]
[pow, (, denominator, ,, exponent, ), ), ;, }, public, BigFraction, pow, (, final, BigInteger, exponent, ), {, if, (]
[pow, (, denominator, ,, exponent, ), ), ;, }, public, BigFraction, pow, (, final, BigInteger, exponent, ), {, if, (]
[pow, (, denominator, ,, exponent, ), ), ;, }, public, BigFraction, pow, (, final, BigInteger, exponent, ), {, if, (]
[exponent, ), ), ;, }, public, BigFraction, pow, (, final, BigInteger, exponent, ), {, if, (, exponent, ., compareTo, (]
[exponent, ), ), ;, }, public, BigFraction, pow, (, final, BigInteger, exponent, ), {, if, (, exponent, ., compareTo, (]
[public, BigFraction, pow, (, final, BigInteger, exponent, ), {, if, (, exponent, ., compareTo, (, BigInteger, ., ZERO, ), <]
[), {, if, (, exponent, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, final, BigInteger, eNeg, =]
[), {, if, (, exponent, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, final, BigInteger, eNeg, =]
[(, BigInteger, ., ZERO, ), <, 0, ), {, final, BigInteger, eNeg, =, exponent, ., negate, (, ), ;, return]
[ZERO, ), <, 0, ), {, final, BigInteger, eNeg, =, exponent, ., negate, (, ), ;, return, new, BigFraction, (]
[ZERO, ), <, 0, ), {, final, BigInteger, eNeg, =, exponent, ., negate, (, ), ;, return, new, BigFraction, (]
[), {, final, BigInteger, eNeg, =, exponent, ., negate, (, ), ;, return, new, BigFraction, (, ArithmeticUtils, ., pow, (]
[final, BigInteger, eNeg, =, exponent, ., negate, (, ), ;, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,]
[=, exponent, ., negate, (, ), ;, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, eNeg, ), ,]
[=, exponent, ., negate, (, ), ;, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, eNeg, ), ,]
[(, ), ;, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, eNeg, ), ,, ArithmeticUtils, ., pow, (]
[;, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, eNeg, ), ,, ArithmeticUtils, ., pow, (, numerator, ,]
[., pow, (, denominator, ,, eNeg, ), ,, ArithmeticUtils, ., pow, (, numerator, ,, eNeg, ), ), ;, }, return]
[denominator, ,, eNeg, ), ,, ArithmeticUtils, ., pow, (, numerator, ,, eNeg, ), ), ;, }, return, new, BigFraction, (]
[denominator, ,, eNeg, ), ,, ArithmeticUtils, ., pow, (, numerator, ,, eNeg, ), ), ;, }, return, new, BigFraction, (]
[,, ArithmeticUtils, ., pow, (, numerator, ,, eNeg, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (]
[., pow, (, numerator, ,, eNeg, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,]
[numerator, ,, eNeg, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,]
[numerator, ,, eNeg, ), ), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,]
[), ;, }, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow, (]
[}, return, new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow, (, denominator, ,]
[., pow, (, denominator, ,, exponent, ), ), ;, }, public, double, pow, (, final, double, exponent, ), {, return]
[., pow, (, denominator, ,, exponent, ), ), ;, }, public, double, pow, (, final, double, exponent, ), {, return]
[., pow, (, denominator, ,, exponent, ), ), ;, }, public, double, pow, (, final, double, exponent, ), {, return]
[,, exponent, ), ), ;, }, public, double, pow, (, final, double, exponent, ), {, return, FastMath, ., pow, (]
[,, exponent, ), ), ;, }, public, double, pow, (, final, double, exponent, ), {, return, FastMath, ., pow, (]
[public, double, pow, (, final, double, exponent, ), {, return, FastMath, ., pow, (, numerator, ., doubleValue, (, ), ,]
[(, final, double, exponent, ), {, return, FastMath, ., pow, (, numerator, ., doubleValue, (, ), ,, exponent, ), /]
[(, final, double, exponent, ), {, return, FastMath, ., pow, (, numerator, ., doubleValue, (, ), ,, exponent, ), /]
[), {, return, FastMath, ., pow, (, numerator, ., doubleValue, (, ), ,, exponent, ), /, FastMath, ., pow, (]
[), {, return, FastMath, ., pow, (, numerator, ., doubleValue, (, ), ,, exponent, ), /, FastMath, ., pow, (]
[(, numerator, ., doubleValue, (, ), ,, exponent, ), /, FastMath, ., pow, (, denominator, ., doubleValue, (, ), ,]
[., pow, (, denominator, ., doubleValue, (, ), ,, exponent, ), ;, }, public, BigFraction, reciprocal, (, ), {, return]
[denominator, ., doubleValue, (, ), ,, exponent, ), ;, }, public, BigFraction, reciprocal, (, ), {, return, new, BigFraction, (]
[doubleValue, (, ), ,, exponent, ), ;, }, public, BigFraction, reciprocal, (, ), {, return, new, BigFraction, (, denominator, ,]
[return, new, BigFraction, (, denominator, ,, numerator, ), ;, }, public, BigFraction, reduce, (, ), {, final, BigInteger, gcd, =]
[return, new, BigFraction, (, denominator, ,, numerator, ), ;, }, public, BigFraction, reduce, (, ), {, final, BigInteger, gcd, =]
[denominator, ,, numerator, ), ;, }, public, BigFraction, reduce, (, ), {, final, BigInteger, gcd, =, numerator, ., gcd, (]
[;, }, public, BigFraction, reduce, (, ), {, final, BigInteger, gcd, =, numerator, ., gcd, (, denominator, ), ;, return]
[BigFraction, reduce, (, ), {, final, BigInteger, gcd, =, numerator, ., gcd, (, denominator, ), ;, return, new, BigFraction, (]
[BigFraction, reduce, (, ), {, final, BigInteger, gcd, =, numerator, ., gcd, (, denominator, ), ;, return, new, BigFraction, (]
[{, final, BigInteger, gcd, =, numerator, ., gcd, (, denominator, ), ;, return, new, BigFraction, (, numerator, ., divide, (]
[gcd, =, numerator, ., gcd, (, denominator, ), ;, return, new, BigFraction, (, numerator, ., divide, (, gcd, ), ,]
[gcd, =, numerator, ., gcd, (, denominator, ), ;, return, new, BigFraction, (, numerator, ., divide, (, gcd, ), ,]
[gcd, (, denominator, ), ;, return, new, BigFraction, (, numerator, ., divide, (, gcd, ), ,, denominator, ., divide, (]
[denominator, ., divide, (, gcd, ), ), ;, }, public, BigFraction, subtract, (, final, BigInteger, bg, ), {, if, (]
[denominator, ., divide, (, gcd, ), ), ;, }, public, BigFraction, subtract, (, final, BigInteger, bg, ), {, if, (]
[divide, (, gcd, ), ), ;, }, public, BigFraction, subtract, (, final, BigInteger, bg, ), {, if, (, bg, ==]
[), ;, }, public, BigFraction, subtract, (, final, BigInteger, bg, ), {, if, (, bg, ==, null, ), {, throw]
[final, BigInteger, bg, ), {, if, (, bg, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return]
[), {, if, (, bg, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (]
[), {, if, (, bg, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (]
[bg, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (, numerator, ., subtract, (]
[bg, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (, numerator, ., subtract, (]
[{, throw, new, NullArgumentException, (, ), ;, }, return, new, BigFraction, (, numerator, ., subtract, (, denominator, ., multiply, (]
[(, ), ;, }, return, new, BigFraction, (, numerator, ., subtract, (, denominator, ., multiply, (, bg, ), ), ,]
[multiply, (, bg, ), ), ,, denominator, ), ;, }, public, BigFraction, subtract, (, final, int, i, ), {, return]
[bg, ), ), ,, denominator, ), ;, }, public, BigFraction, subtract, (, final, int, i, ), {, return, subtract, (]
[bg, ), ), ,, denominator, ), ;, }, public, BigFraction, subtract, (, final, int, i, ), {, return, subtract, (]
[denominator, ), ;, }, public, BigFraction, subtract, (, final, int, i, ), {, return, subtract, (, BigInteger, ., valueOf, (]
[(, BigInteger, ., valueOf, (, i, ), ), ;, }, public, BigFraction, subtract, (, final, long, l, ), {, return]
[., valueOf, (, i, ), ), ;, }, public, BigFraction, subtract, (, final, long, l, ), {, return, subtract, (]
[., valueOf, (, i, ), ), ;, }, public, BigFraction, subtract, (, final, long, l, ), {, return, subtract, (]
[), ), ;, }, public, BigFraction, subtract, (, final, long, l, ), {, return, subtract, (, BigInteger, ., valueOf, (]
[BigInteger, ., valueOf, (, l, ), ), ;, }, public, BigFraction, subtract, (, final, BigFraction, fraction, ), {, if, (]
[BigInteger, ., valueOf, (, l, ), ), ;, }, public, BigFraction, subtract, (, final, BigFraction, fraction, ), {, if, (]
[valueOf, (, l, ), ), ;, }, public, BigFraction, subtract, (, final, BigFraction, fraction, ), {, if, (, fraction, ==]
[), ;, }, public, BigFraction, subtract, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw]
[public, BigFraction, subtract, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (]
[public, BigFraction, subtract, (, final, BigFraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (]
[{, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (]
[{, if, (, fraction, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, ZERO, ., equals, (]
[new, NullArgumentException, (, LocalizedFormats, ., FRACTION, ), ;, }, if, (, ZERO, ., equals, (, fraction, ), ), {, return]
[), ;, }, if, (, ZERO, ., equals, (, fraction, ), ), {, return, this, ;, }, BigInteger, num, =]
[ZERO, ., equals, (, fraction, ), ), {, return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =]
[fraction, ), ), {, return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (]
[fraction, ), ), {, return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (]
[return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (]
[return, this, ;, }, BigInteger, num, =, null, ;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (]
[=, null, ;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {]
[;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {, num, =]
[;, BigInteger, den, =, null, ;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {, num, =]
[null, ;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {, num, =, numerator, ., subtract, (]
[null, ;, if, (, denominator, ., equals, (, fraction, ., denominator, ), ), {, num, =, numerator, ., subtract, (]
[., equals, (, fraction, ., denominator, ), ), {, num, =, numerator, ., subtract, (, fraction, ., numerator, ), ;]
[(, fraction, ., denominator, ), ), {, num, =, numerator, ., subtract, (, fraction, ., numerator, ), ;, den, =]
[), {, num, =, numerator, ., subtract, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {]
[num, =, numerator, ., subtract, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =]
[num, =, numerator, ., subtract, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =]
[=, numerator, ., subtract, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (]
[=, numerator, ., subtract, (, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (]
[(, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (]
[(, fraction, ., numerator, ), ;, den, =, denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (]
[denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., subtract, (]
[denominator, ;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., subtract, (]
[;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., subtract, (, (]
[;, }, else, {, num, =, (, numerator, ., multiply, (, fraction, ., denominator, ), ), ., subtract, (, (]
[numerator, ., multiply, (, fraction, ., denominator, ), ), ., subtract, (, (, fraction, ., numerator, ), ., multiply, (]
[fraction, ., denominator, ), ), ., subtract, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;]
[denominator, ), ), ., subtract, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =]
[denominator, ), ), ., subtract, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =]
[subtract, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply, (]
[subtract, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply, (]
[., multiply, (, denominator, ), ), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return]
[denominator, ), ), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (]
[), ;, den, =, denominator, ., multiply, (, fraction, ., denominator, ), ;, }, return, new, BigFraction, (, num, ,]
[new, BigFraction, (, num, ,, den, ), ;, }, @, Override, public, String, toString, (, ), {, String, str, =]
[,, den, ), ;, }, @, Override, public, String, toString, (, ), {, String, str, =, null, ;, if, (]
[,, den, ), ;, }, @, Override, public, String, toString, (, ), {, String, str, =, null, ;, if, (]
[,, den, ), ;, }, @, Override, public, String, toString, (, ), {, String, str, =, null, ;, if, (]
[Override, public, String, toString, (, ), {, String, str, =, null, ;, if, (, BigInteger, ., ONE, ., equals, (]
[(, ), {, String, str, =, null, ;, if, (, BigInteger, ., ONE, ., equals, (, denominator, ), ), {]
[{, String, str, =, null, ;, if, (, BigInteger, ., ONE, ., equals, (, denominator, ), ), {, str, =]
[{, String, str, =, null, ;, if, (, BigInteger, ., ONE, ., equals, (, denominator, ), ), {, str, =]
[ONE, ., equals, (, denominator, ), ), {, str, =, numerator, ., toString, (, ), ;, }, else, if, (]
[ONE, ., equals, (, denominator, ), ), {, str, =, numerator, ., toString, (, ), ;, }, else, if, (]
[ONE, ., equals, (, denominator, ), ), {, str, =, numerator, ., toString, (, ), ;, }, else, if, (]
[), {, str, =, numerator, ., toString, (, ), ;, }, else, if, (, BigInteger, ., ZERO, ., equals, (]
[numerator, ., toString, (, ), ;, }, else, if, (, BigInteger, ., ZERO, ., equals, (, numerator, ), ), {]
[toString, (, ), ;, }, else, if, (, BigInteger, ., ZERO, ., equals, (, numerator, ), ), {, str, =]
[else, if, (, BigInteger, ., ZERO, ., equals, (, numerator, ), ), {, str, =, "0", ;, }, else, {]
[(, BigInteger, ., ZERO, ., equals, (, numerator, ), ), {, str, =, "0", ;, }, else, {, str, =]
[(, BigInteger, ., ZERO, ., equals, (, numerator, ), ), {, str, =, "0", ;, }, else, {, str, =]
[(, BigInteger, ., ZERO, ., equals, (, numerator, ), ), {, str, =, "0", ;, }, else, {, str, =]
[., ZERO, ., equals, (, numerator, ), ), {, str, =, "0", ;, }, else, {, str, =, numerator, +]
[., equals, (, numerator, ), ), {, str, =, "0", ;, }, else, {, str, =, numerator, +, " / ", +]
[), ), {, str, =, "0", ;, }, else, {, str, =, numerator, +, " / ", +, denominator, ;, }, return]
[str, =, numerator, +, " / ", +, denominator, ;, }, return, str, ;, }, public, BigFractionField, getField, (, ), {, return]
[str, =, numerator, +, " / ", +, denominator, ;, }, return, str, ;, }, public, BigFractionField, getField, (, ), {, return]
