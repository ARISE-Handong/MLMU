[MockName, ;, import, org, ., mockito, ., plugins, ., MockMaker, ;, import, java, ., lang, ., reflect, ., Modifier, ;]
[org, ., mockito, ., plugins, ., MockMaker, ;, import, java, ., lang, ., reflect, ., Modifier, ;, @, SuppressWarnings, (]
[., reflect, ., Modifier, ;, @, SuppressWarnings, (, "unchecked", ), public, class, MockUtil, {, private, static, final, MockMaker, mockMaker, =]
[., reflect, ., Modifier, ;, @, SuppressWarnings, (, "unchecked", ), public, class, MockUtil, {, private, static, final, MockMaker, mockMaker, =]
[mockMaker, =, Plugins, ., getMockMaker, (, ), ;, public, boolean, isTypeMockable, (, Class, <, ?, >, type, ), {, return]
[mockMaker, =, Plugins, ., getMockMaker, (, ), ;, public, boolean, isTypeMockable, (, Class, <, ?, >, type, ), {, return]
[=, Plugins, ., getMockMaker, (, ), ;, public, boolean, isTypeMockable, (, Class, <, ?, >, type, ), {, return, !]
[=, Plugins, ., getMockMaker, (, ), ;, public, boolean, isTypeMockable, (, Class, <, ?, >, type, ), {, return, !]
[;, public, boolean, isTypeMockable, (, Class, <, ?, >, type, ), {, return, !, type, ., isPrimitive, (, ), &&]
[public, boolean, isTypeMockable, (, Class, <, ?, >, type, ), {, return, !, type, ., isPrimitive, (, ), &&, !]
[public, boolean, isTypeMockable, (, Class, <, ?, >, type, ), {, return, !, type, ., isPrimitive, (, ), &&, !]
[Class, <, ?, >, type, ), {, return, !, type, ., isPrimitive, (, ), &&, !, Modifier, ., isFinal, (]
[Class, <, ?, >, type, ), {, return, !, type, ., isPrimitive, (, ), &&, !, Modifier, ., isFinal, (]
[), ;, }, public, <, T, >, T, createMock, (, MockCreationSettings, <, T, >, settings, ), {, MockHandler, mockHandler, =]
[), ;, }, public, <, T, >, T, createMock, (, MockCreationSettings, <, T, >, settings, ), {, MockHandler, mockHandler, =]
[T, createMock, (, MockCreationSettings, <, T, >, settings, ), {, MockHandler, mockHandler, =, new, MockHandlerFactory, (, ), ., create, (]
[>, settings, ), {, MockHandler, mockHandler, =, new, MockHandlerFactory, (, ), ., create, (, settings, ), ;, T, mock, =]
[>, settings, ), {, MockHandler, mockHandler, =, new, MockHandlerFactory, (, ), ., create, (, settings, ), ;, T, mock, =]
[MockHandler, mockHandler, =, new, MockHandlerFactory, (, ), ., create, (, settings, ), ;, T, mock, =, mockMaker, ., createMock, (]
[=, new, MockHandlerFactory, (, ), ., create, (, settings, ), ;, T, mock, =, mockMaker, ., createMock, (, settings, ,]
[create, (, settings, ), ;, T, mock, =, mockMaker, ., createMock, (, settings, ,, mockHandler, ), ;, Object, spiedInstance, =]
[create, (, settings, ), ;, T, mock, =, mockMaker, ., createMock, (, settings, ,, mockHandler, ), ;, Object, spiedInstance, =]
[mockMaker, ., createMock, (, settings, ,, mockHandler, ), ;, Object, spiedInstance, =, settings, ., getSpiedInstance, (, ), ;, if, (]
[mockMaker, ., createMock, (, settings, ,, mockHandler, ), ;, Object, spiedInstance, =, settings, ., getSpiedInstance, (, ), ;, if, (]
[createMock, (, settings, ,, mockHandler, ), ;, Object, spiedInstance, =, settings, ., getSpiedInstance, (, ), ;, if, (, spiedInstance, !=]
[,, mockHandler, ), ;, Object, spiedInstance, =, settings, ., getSpiedInstance, (, ), ;, if, (, spiedInstance, !=, null, ), {]
[,, mockHandler, ), ;, Object, spiedInstance, =, settings, ., getSpiedInstance, (, ), ;, if, (, spiedInstance, !=, null, ), {]
[settings, ., getSpiedInstance, (, ), ;, if, (, spiedInstance, !=, null, ), {, new, LenientCopyTool, (, ), ., copyToMock, (]
[getSpiedInstance, (, ), ;, if, (, spiedInstance, !=, null, ), {, new, LenientCopyTool, (, ), ., copyToMock, (, spiedInstance, ,]
[(, spiedInstance, !=, null, ), {, new, LenientCopyTool, (, ), ., copyToMock, (, spiedInstance, ,, mock, ), ;, }, return]
[;, }, return, mock, ;, }, public, <, T, >, void, resetMock, (, T, mock, ), {, InternalMockHandler, oldHandler, =]
[mock, ;, }, public, <, T, >, void, resetMock, (, T, mock, ), {, InternalMockHandler, oldHandler, =, (, InternalMockHandler, )]
[}, public, <, T, >, void, resetMock, (, T, mock, ), {, InternalMockHandler, oldHandler, =, (, InternalMockHandler, ), getMockHandler, (]
[resetMock, (, T, mock, ), {, InternalMockHandler, oldHandler, =, (, InternalMockHandler, ), getMockHandler, (, mock, ), ;, MockCreationSettings, settings, =]
[resetMock, (, T, mock, ), {, InternalMockHandler, oldHandler, =, (, InternalMockHandler, ), getMockHandler, (, mock, ), ;, MockCreationSettings, settings, =]
[(, InternalMockHandler, ), getMockHandler, (, mock, ), ;, MockCreationSettings, settings, =, oldHandler, ., getMockSettings, (, ), ;, MockHandler, newHandler, =]
[(, InternalMockHandler, ), getMockHandler, (, mock, ), ;, MockCreationSettings, settings, =, oldHandler, ., getMockSettings, (, ), ;, MockHandler, newHandler, =]
[;, MockCreationSettings, settings, =, oldHandler, ., getMockSettings, (, ), ;, MockHandler, newHandler, =, new, MockHandlerFactory, (, ), ., create, (]
[=, oldHandler, ., getMockSettings, (, ), ;, MockHandler, newHandler, =, new, MockHandlerFactory, (, ), ., create, (, settings, ), ;]
[=, oldHandler, ., getMockSettings, (, ), ;, MockHandler, newHandler, =, new, MockHandlerFactory, (, ), ., create, (, settings, ), ;]
[(, ), ;, MockHandler, newHandler, =, new, MockHandlerFactory, (, ), ., create, (, settings, ), ;, mockMaker, ., resetMock, (]
[;, MockHandler, newHandler, =, new, MockHandlerFactory, (, ), ., create, (, settings, ), ;, mockMaker, ., resetMock, (, mock, ,]
[newHandler, =, new, MockHandlerFactory, (, ), ., create, (, settings, ), ;, mockMaker, ., resetMock, (, mock, ,, newHandler, ,]
[settings, ), ;, }, public, <, T, >, InternalMockHandler, <, T, >, getMockHandler, (, T, mock, ), {, if, (]
[settings, ), ;, }, public, <, T, >, InternalMockHandler, <, T, >, getMockHandler, (, T, mock, ), {, if, (]
[;, }, public, <, T, >, InternalMockHandler, <, T, >, getMockHandler, (, T, mock, ), {, if, (, mock, ==]
[T, >, InternalMockHandler, <, T, >, getMockHandler, (, T, mock, ), {, if, (, mock, ==, null, ), {, throw]
[<, T, >, getMockHandler, (, T, mock, ), {, if, (, mock, ==, null, ), {, throw, new, NotAMockException, (]
[mock, ), {, if, (, mock, ==, null, ), {, throw, new, NotAMockException, (, "Argument should be a mock, but is null!", ), ;, }, if, (]
[{, if, (, mock, ==, null, ), {, throw, new, NotAMockException, (, "Argument should be a mock, but is null!", ), ;, }, if, (, isMockitoMock, (]
[{, throw, new, NotAMockException, (, "Argument should be a mock, but is null!", ), ;, }, if, (, isMockitoMock, (, mock, ), ), {, MockHandler, handler, =]
[{, throw, new, NotAMockException, (, "Argument should be a mock, but is null!", ), ;, }, if, (, isMockitoMock, (, mock, ), ), {, MockHandler, handler, =]
[(, "Argument should be a mock, but is null!", ), ;, }, if, (, isMockitoMock, (, mock, ), ), {, MockHandler, handler, =, mockMaker, ., getHandler, (]
[}, if, (, isMockitoMock, (, mock, ), ), {, MockHandler, handler, =, mockMaker, ., getHandler, (, mock, ), ;, return]
[isMockitoMock, (, mock, ), ), {, MockHandler, handler, =, mockMaker, ., getHandler, (, mock, ), ;, return, (, InternalMockHandler, )]
[MockHandler, handler, =, mockMaker, ., getHandler, (, mock, ), ;, return, (, InternalMockHandler, ), handler, ;, }, else, {, throw]
[mockMaker, ., getHandler, (, mock, ), ;, return, (, InternalMockHandler, ), handler, ;, }, else, {, throw, new, NotAMockException, (]
[mockMaker, ., getHandler, (, mock, ), ;, return, (, InternalMockHandler, ), handler, ;, }, else, {, throw, new, NotAMockException, (]
[getHandler, (, mock, ), ;, return, (, InternalMockHandler, ), handler, ;, }, else, {, throw, new, NotAMockException, (, "Argument should be a mock, but is: ", +]
[getHandler, (, mock, ), ;, return, (, InternalMockHandler, ), handler, ;, }, else, {, throw, new, NotAMockException, (, "Argument should be a mock, but is: ", +]
["Argument should be a mock, but is: ", +, mock, ., getClass, (, ), ), ;, }, }, public, boolean, isMock, (, Object, mock, ), {, return]
[mock, ., getClass, (, ), ), ;, }, }, public, boolean, isMock, (, Object, mock, ), {, return, isMockitoMock, (]
[Object, mock, ), {, return, isMockitoMock, (, mock, ), ;, }, public, boolean, isSpy, (, Object, mock, ), {, return]
[Object, mock, ), {, return, isMockitoMock, (, mock, ), ;, }, public, boolean, isSpy, (, Object, mock, ), {, return]
[), {, return, isMockitoMock, (, mock, ), ;, }, public, boolean, isSpy, (, Object, mock, ), {, return, isMockitoMock, (]
[isMockitoMock, (, mock, ), ;, }, public, boolean, isSpy, (, Object, mock, ), {, return, isMockitoMock, (, mock, ), &&]
[isMockitoMock, (, mock, ), ;, }, public, boolean, isSpy, (, Object, mock, ), {, return, isMockitoMock, (, mock, ), &&]
[isMockitoMock, (, mock, ), ;, }, public, boolean, isSpy, (, Object, mock, ), {, return, isMockitoMock, (, mock, ), &&]
[mock, ), ;, }, public, boolean, isSpy, (, Object, mock, ), {, return, isMockitoMock, (, mock, ), &&, getMockSettings, (]
[(, Object, mock, ), {, return, isMockitoMock, (, mock, ), &&, getMockSettings, (, mock, ), ., getDefaultAnswer, (, ), ==]
[(, Object, mock, ), {, return, isMockitoMock, (, mock, ), &&, getMockSettings, (, mock, ), ., getDefaultAnswer, (, ), ==]
[(, ), ==, Mockito, ., CALLS_REAL_METHODS, ;, }, private, <, T, >, boolean, isMockitoMock, (, T, mock, ), {, return]
[(, ), ==, Mockito, ., CALLS_REAL_METHODS, ;, }, private, <, T, >, boolean, isMockitoMock, (, T, mock, ), {, return]
[(, ), ==, Mockito, ., CALLS_REAL_METHODS, ;, }, private, <, T, >, boolean, isMockitoMock, (, T, mock, ), {, return]
[., CALLS_REAL_METHODS, ;, }, private, <, T, >, boolean, isMockitoMock, (, T, mock, ), {, return, mockMaker, ., getHandler, (]
[}, private, <, T, >, boolean, isMockitoMock, (, T, mock, ), {, return, mockMaker, ., getHandler, (, mock, ), !=]
[return, mockMaker, ., getHandler, (, mock, ), !=, null, ;, }, public, MockName, getMockName, (, Object, mock, ), {, return]
[return, mockMaker, ., getHandler, (, mock, ), !=, null, ;, }, public, MockName, getMockName, (, Object, mock, ), {, return]
[return, mockMaker, ., getHandler, (, mock, ), !=, null, ;, }, public, MockName, getMockName, (, Object, mock, ), {, return]
[., getHandler, (, mock, ), !=, null, ;, }, public, MockName, getMockName, (, Object, mock, ), {, return, getMockHandler, (]
[., getMockName, (, ), ;, }, public, void, maybeRedefineMockName, (, Object, mock, ,, String, newName, ), {, MockName, mockName, =]
[(, ), ;, }, public, void, maybeRedefineMockName, (, Object, mock, ,, String, newName, ), {, MockName, mockName, =, getMockName, (]
[void, maybeRedefineMockName, (, Object, mock, ,, String, newName, ), {, MockName, mockName, =, getMockName, (, mock, ), ;, if, (]
[void, maybeRedefineMockName, (, Object, mock, ,, String, newName, ), {, MockName, mockName, =, getMockName, (, mock, ), ;, if, (]
[void, maybeRedefineMockName, (, Object, mock, ,, String, newName, ), {, MockName, mockName, =, getMockName, (, mock, ), ;, if, (]
[String, newName, ), {, MockName, mockName, =, getMockName, (, mock, ), ;, if, (, mockName, ., isDefault, (, ), &&]
[String, newName, ), {, MockName, mockName, =, getMockName, (, mock, ), ;, if, (, mockName, ., isDefault, (, ), &&]
[String, newName, ), {, MockName, mockName, =, getMockName, (, mock, ), ;, if, (, mockName, ., isDefault, (, ), &&]
[), {, MockName, mockName, =, getMockName, (, mock, ), ;, if, (, mockName, ., isDefault, (, ), &&, getMockHandler, (]
[if, (, mockName, ., isDefault, (, ), &&, getMockHandler, (, mock, ), ., getMockSettings, (, ), instanceof, CreationSettings, ), {]
[if, (, mockName, ., isDefault, (, ), &&, getMockHandler, (, mock, ), ., getMockSettings, (, ), instanceof, CreationSettings, ), {]
[(, mockName, ., isDefault, (, ), &&, getMockHandler, (, mock, ), ., getMockSettings, (, ), instanceof, CreationSettings, ), {, (]
[isDefault, (, ), &&, getMockHandler, (, mock, ), ., getMockSettings, (, ), instanceof, CreationSettings, ), {, (, (, CreationSettings, )]
[isDefault, (, ), &&, getMockHandler, (, mock, ), ., getMockSettings, (, ), instanceof, CreationSettings, ), {, (, (, CreationSettings, )]
[), &&, getMockHandler, (, mock, ), ., getMockSettings, (, ), instanceof, CreationSettings, ), {, (, (, CreationSettings, ), getMockHandler, (]
[instanceof, CreationSettings, ), {, (, (, CreationSettings, ), getMockHandler, (, mock, ), ., getMockSettings, (, ), ), ., setMockName, (]
[{, (, (, CreationSettings, ), getMockHandler, (, mock, ), ., getMockSettings, (, ), ), ., setMockName, (, new, MockNameImpl, (]
[setMockName, (, new, MockNameImpl, (, newName, ), ), ;, }, }, public, MockCreationSettings, getMockSettings, (, Object, mock, ), {, return]
[setMockName, (, new, MockNameImpl, (, newName, ), ), ;, }, }, public, MockCreationSettings, getMockSettings, (, Object, mock, ), {, return]
[new, MockNameImpl, (, newName, ), ), ;, }, }, public, MockCreationSettings, getMockSettings, (, Object, mock, ), {, return, getMockHandler, (]
