[;, static, final, ConcreteType, ALL, =, new, ConcreteAll, (, ), ;, private, static, final, List, <, ConcreteFunctionType, >, NO_FUNCTIONS, =]
[;, private, static, final, List, <, ConcreteFunctionType, >, NO_FUNCTIONS, =, Lists, ., <, ConcreteFunctionType, >, newArrayList, (, ), ;, private]
[;, private, static, final, List, <, ConcreteInstanceType, >, NO_INSTANCES, =, Lists, ., <, ConcreteInstanceType, >, newArrayList, (, ), ;, private]
[., <, ConcreteFunctionType, >, newArrayList, (, ), ;, private, static, final, List, <, ConcreteInstanceType, >, NO_INSTANCES, =, Lists, ., <]
[;, private, static, final, List, <, StaticSlot, <, ConcreteType, >, >, NO_SLOTS, =, Lists, ., <, StaticSlot, <, ConcreteType, >]
[., <, ConcreteInstanceType, >, newArrayList, (, ), ;, private, static, final, List, <, StaticSlot, <, ConcreteType, >, >, NO_SLOTS, =]
[;, protected, static, ConcreteType, createForTypes, (, Collection, <, ConcreteType, >, types, ), {, if, (, types, ==, null, ||, types]
[., <, StaticSlot, <, ConcreteType, >, >, newArrayList, (, ), ;, protected, static, ConcreteType, createForTypes, (, Collection, <, ConcreteType, >]
[), {, return, NONE, ;, }, else, if, (, types, ., size, (, ), ==, 1, ), {, return, types]
[||, types, ., size, (, ), ==, 0, ), {, return, NONE, ;, }, else, if, (, types, ., size]
[==, null, ||, types, ., size, (, ), ==, 0, ), {, return, NONE, ;, }, else, if, (, types]
[||, types, ., size, (, ), ==, 0, ), {, return, NONE, ;, }, else, if, (, types, ., size]
[), {, return, NONE, ;, }, else, if, (, types, ., size, (, ), ==, 1, ), {, return, types]
[==, 0, ), {, return, NONE, ;, }, else, if, (, types, ., size, (, ), ==, 1, ), {]
[., size, (, ), ==, 0, ), {, return, NONE, ;, }, else, if, (, types, ., size, (, )]
[), {, return, NONE, ;, }, else, if, (, types, ., size, (, ), ==, 1, ), {, return, types]
[;, }, else, if, (, types, ., size, (, ), ==, 1, ), {, return, types, ., iterator, (, )]
[), {, return, types, ., iterator, (, ), ., next, (, ), ;, }, else, {, return, new, ConcreteUnionType, (]
[==, 1, ), {, return, types, ., iterator, (, ), ., next, (, ), ;, }, else, {, return, new]
[., size, (, ), ==, 1, ), {, return, types, ., iterator, (, ), ., next, (, ), ;, }]
[), {, return, types, ., iterator, (, ), ., next, (, ), ;, }, else, {, return, new, ConcreteUnionType, (]
[;, }, else, {, return, new, ConcreteUnionType, (, Sets, ., newHashSet, (, types, ), ), ;, }, }, boolean, isNone]
[., next, (, ), ;, }, else, {, return, new, ConcreteUnionType, (, Sets, ., newHashSet, (, types, ), ), ;]
[., iterator, (, ), ., next, (, ), ;, }, else, {, return, new, ConcreteUnionType, (, Sets, ., newHashSet, (]
[;, }, }, boolean, isNone, (, ), {, return, false, ;, }, boolean, isFunction, (, ), {, return, false, ;]
[), ;, }, }, boolean, isNone, (, ), {, return, false, ;, }, boolean, isFunction, (, ), {, return, false]
[., newHashSet, (, types, ), ), ;, }, }, boolean, isNone, (, ), {, return, false, ;, }, boolean, isFunction]
[), ), ;, }, }, boolean, isNone, (, ), {, return, false, ;, }, boolean, isFunction, (, ), {, return]
[;, }, boolean, isFunction, (, ), {, return, false, ;, }, boolean, isInstance, (, ), {, return, false, ;, }]
[;, }, boolean, isInstance, (, ), {, return, false, ;, }, boolean, isUnion, (, ), {, return, false, ;, }]
[;, }, boolean, isUnion, (, ), {, return, false, ;, }, boolean, isAll, (, ), {, return, false, ;, }]
[;, }, boolean, isAll, (, ), {, return, false, ;, }, boolean, isSingleton, (, ), {, return, !, isNone, (]
[;, }, boolean, isSingleton, (, ), {, return, !, isNone, (, ), &&, !, isUnion, (, ), &&, !, isAll]
[;, }, ConcreteFunctionType, toFunction, (, ), {, return, null, ;, }, ConcreteInstanceType, toInstance, (, ), {, return, null, ;, }]
[&&, !, isAll, (, ), ;, }, ConcreteFunctionType, toFunction, (, ), {, return, null, ;, }, ConcreteInstanceType, toInstance, (, )]
[&&, !, isUnion, (, ), &&, !, isAll, (, ), ;, }, ConcreteFunctionType, toFunction, (, ), {, return, null, ;]
[&&, !, isUnion, (, ), &&, !, isAll, (, ), ;, }, ConcreteFunctionType, toFunction, (, ), {, return, null, ;]
[&&, !, isAll, (, ), ;, }, ConcreteFunctionType, toFunction, (, ), {, return, null, ;, }, ConcreteInstanceType, toInstance, (, )]
[&&, !, isAll, (, ), ;, }, ConcreteFunctionType, toFunction, (, ), {, return, null, ;, }, ConcreteInstanceType, toInstance, (, )]
[;, }, ConcreteFunctionType, toFunction, (, ), {, return, null, ;, }, ConcreteInstanceType, toInstance, (, ), {, return, null, ;, }]
[;, }, ConcreteFunctionType, toFunction, (, ), {, return, null, ;, }, ConcreteInstanceType, toInstance, (, ), {, return, null, ;, }]
[;, }, ConcreteInstanceType, toInstance, (, ), {, return, null, ;, }, ConcreteUnionType, toUnion, (, ), {, return, null, ;, }]
[;, }, ConcreteUnionType, toUnion, (, ), {, return, null, ;, }, StaticScope, <, ConcreteType, >, getScope, (, ), {, return]
[;, }, StaticScope, <, ConcreteType, >, getScope, (, ), {, return, null, ;, }, ConcreteType, unionWith, (, ConcreteType, other, )]
[;, }, ConcreteType, unionWith, (, ConcreteType, other, ), {, Preconditions, ., checkState, (, this, ., isSingleton, (, ), ), ;]
[;, if, (, !, other, ., isSingleton, (, ), ), {, return, other, ., unionWith, (, this, ), ;, }]
[., checkState, (, this, ., isSingleton, (, ), ), ;, if, (, !, other, ., isSingleton, (, ), ), {]
[), ;, if, (, !, other, ., isSingleton, (, ), ), {, return, other, ., unionWith, (, this, ), ;]
[., isSingleton, (, ), ), ;, if, (, !, other, ., isSingleton, (, ), ), {, return, other, ., unionWith]
[), {, return, other, ., unionWith, (, this, ), ;, }, else, if, (, equals, (, other, ), ), {]
[), {, return, other, ., unionWith, (, this, ), ;, }, else, if, (, equals, (, other, ), ), {]
[., isSingleton, (, ), ), {, return, other, ., unionWith, (, this, ), ;, }, else, if, (, equals, (]
[;, }, else, if, (, equals, (, other, ), ), {, return, this, ;, }, else, {, return, new, ConcreteUnionType]
[., unionWith, (, this, ), ;, }, else, if, (, equals, (, other, ), ), {, return, this, ;, }]
[), ;, }, else, if, (, equals, (, other, ), ), {, return, this, ;, }, else, {, return, new]
[), {, return, this, ;, }, else, {, return, new, ConcreteUnionType, (, this, ,, other, ), ;, }, }, ConcreteType]
[), ), {, return, this, ;, }, else, {, return, new, ConcreteUnionType, (, this, ,, other, ), ;, }, }]
[;, }, else, {, return, new, ConcreteUnionType, (, this, ,, other, ), ;, }, }, ConcreteType, intersectWith, (, ConcreteType, other]
[;, }, }, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (, !, other, ., isSingleton, (, ), ), {]
[,, other, ), ;, }, }, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (, !, other, ., isSingleton, (]
[), ;, }, }, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (, !, other, ., isSingleton, (, ), )]
[), {, return, other, ., intersectWith, (, this, ), ;, }, else, if, (, equals, (, other, ), ), {]
[), {, return, other, ., intersectWith, (, this, ), ;, }, else, if, (, equals, (, other, ), ), {]
[., isSingleton, (, ), ), {, return, other, ., intersectWith, (, this, ), ;, }, else, if, (, equals, (]
[;, }, else, if, (, equals, (, other, ), ), {, return, this, ;, }, else, {, return, NONE, ;]
[., intersectWith, (, this, ), ;, }, else, if, (, equals, (, other, ), ), {, return, this, ;, }]
[), ;, }, else, if, (, equals, (, other, ), ), {, return, this, ;, }, else, {, return, NONE]
[), {, return, this, ;, }, else, {, return, NONE, ;, }, }, private, <, C, >, List, <, C]
[), ), {, return, this, ;, }, else, {, return, NONE, ;, }, }, private, <, C, >, List, <]
[;, }, else, {, return, NONE, ;, }, }, private, <, C, >, List, <, C, >, getMatchingTypes, (, TypeFilter]
[;, }, }, private, <, C, >, List, <, C, >, getMatchingTypes, (, TypeFilter, <, C, >, filter, ), {]
[;, if, (, isUnion, (, ), ), {, List, <, C, >, list, =, Lists, ., newArrayList, (, ), ;]
[), {, List, <, C, >, list, =, Lists, ., newArrayList, (, ), ;, for, (, ConcreteType, alt, :, toUnion]
[;, for, (, ConcreteType, alt, :, toUnion, (, ), ., getAlternatives, (, ), ), {, if, (, (, type, =]
[., newArrayList, (, ), ;, for, (, ConcreteType, alt, :, toUnion, (, ), ., getAlternatives, (, ), ), {, if]
[), {, if, (, (, type, =, filter, ., filter, (, alt, ), ), !=, null, ), {, list, .]
[., getAlternatives, (, ), ), {, if, (, (, type, =, filter, ., filter, (, alt, ), ), !=, null]
[), {, list, ., add, (, type, ), ;, }, }, return, list, ;, }, else, if, (, (, type]
[!=, null, ), {, list, ., add, (, type, ), ;, }, }, return, list, ;, }, else, if, (]
[=, filter, ., filter, (, alt, ), ), !=, null, ), {, list, ., add, (, type, ), ;, }]
[), !=, null, ), {, list, ., add, (, type, ), ;, }, }, return, list, ;, }, else, if]
[., filter, (, alt, ), ), !=, null, ), {, list, ., add, (, type, ), ;, }, }, return]
[), ), !=, null, ), {, list, ., add, (, type, ), ;, }, }, return, list, ;, }, else]
[), {, list, ., add, (, type, ), ;, }, }, return, list, ;, }, else, if, (, (, type]
[;, }, }, return, list, ;, }, else, if, (, (, type, =, filter, ., filter, (, this, ), )]
[., add, (, type, ), ;, }, }, return, list, ;, }, else, if, (, (, type, =, filter, .]
[), ;, }, }, return, list, ;, }, else, if, (, (, type, =, filter, ., filter, (, this, )]
[;, }, else, if, (, (, type, =, filter, ., filter, (, this, ), ), !=, null, ), {, List]
[), {, List, <, C, >, list, =, Lists, ., newArrayList, (, ), ;, list, ., add, (, type, )]
[!=, null, ), {, List, <, C, >, list, =, Lists, ., newArrayList, (, ), ;, list, ., add, (]
[=, filter, ., filter, (, this, ), ), !=, null, ), {, List, <, C, >, list, =, Lists, .]
[), !=, null, ), {, List, <, C, >, list, =, Lists, ., newArrayList, (, ), ;, list, ., add]
[., filter, (, this, ), ), !=, null, ), {, List, <, C, >, list, =, Lists, ., newArrayList, (]
[), ), !=, null, ), {, List, <, C, >, list, =, Lists, ., newArrayList, (, ), ;, list, .]
[), {, List, <, C, >, list, =, Lists, ., newArrayList, (, ), ;, list, ., add, (, type, )]
[;, list, ., add, (, type, ), ;, return, list, ;, }, else, {, return, filter, ., emptyList, ;, }]
[., newArrayList, (, ), ;, list, ., add, (, type, ), ;, return, list, ;, }, else, {, return, filter]
[;, return, list, ;, }, else, {, return, filter, ., emptyList, ;, }, }, abstract, class, TypeFilter, <, C, >]
[., add, (, type, ), ;, return, list, ;, }, else, {, return, filter, ., emptyList, ;, }, }, abstract]
[), ;, return, list, ;, }, else, {, return, filter, ., emptyList, ;, }, }, abstract, class, TypeFilter, <, C]
[;, }, else, {, return, filter, ., emptyList, ;, }, }, abstract, class, TypeFilter, <, C, >, {, final, List]
[;, }, }, abstract, class, TypeFilter, <, C, >, {, final, List, <, C, >, emptyList, ;, TypeFilter, (, List]
[., emptyList, ;, }, }, abstract, class, TypeFilter, <, C, >, {, final, List, <, C, >, emptyList, ;, TypeFilter]
[=, emptyList, ;, }, abstract, protected, C, filter, (, ConcreteType, type, ), ;, }, List, <, ConcreteFunctionType, >, getFunctions, (]
[., emptyList, =, emptyList, ;, }, abstract, protected, C, filter, (, ConcreteType, type, ), ;, }, List, <, ConcreteFunctionType, >]
[;, }, abstract, protected, C, filter, (, ConcreteType, type, ), ;, }, List, <, ConcreteFunctionType, >, getFunctions, (, ), {]
[;, }, List, <, ConcreteInstanceType, >, getInstances, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <, ConcreteInstanceType, >, (, NO_INSTANCES]
[), ;, }, List, <, ConcreteInstanceType, >, getInstances, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <, ConcreteInstanceType, >, (]
[), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (, ), ?, type]
[;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getInstances, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <]
[?, type, ., toFunction, (, ), :, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getInstances, (]
[., isFunction, (, ), ?, type, ., toFunction, (, ), :, null, ;, }, }, ), ;, }, List, <]
[:, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getInstances, (, ), {, return, getMatchingTypes, (, new]
[., toFunction, (, ), :, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getInstances, (, ), {]
[;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getInstances, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <]
[;, }, List, <, ConcreteInstanceType, >, getFunctionInstanceTypes, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <, ConcreteInstanceType, >, (, NO_INSTANCES]
[), ;, }, List, <, ConcreteInstanceType, >, getFunctionInstanceTypes, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <, ConcreteInstanceType, >, (]
[), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, return, type, ., isInstance, (, ), ?, type]
[;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getFunctionInstanceTypes, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <]
[?, type, ., toInstance, (, ), :, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getFunctionInstanceTypes, (]
[., isInstance, (, ), ?, type, ., toInstance, (, ), :, null, ;, }, }, ), ;, }, List, <]
[:, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getFunctionInstanceTypes, (, ), {, return, getMatchingTypes, (, new]
[., toInstance, (, ), :, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getFunctionInstanceTypes, (, ), {]
[;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getFunctionInstanceTypes, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <]
[;, }, List, <, ConcreteInstanceType, >, getPrototypeTypes, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <, ConcreteInstanceType, >, (, NO_INSTANCES]
[), ;, }, List, <, ConcreteInstanceType, >, getPrototypeTypes, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <, ConcreteInstanceType, >, (]
[), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, if, (, type, ., isFunction, (, ), )]
[), {, return, type, ., toFunction, (, ), ., getInstanceType, (, ), ;, }, return, null, ;, }, }, )]
[., isFunction, (, ), ), {, return, type, ., toFunction, (, ), ., getInstanceType, (, ), ;, }, return, null]
[;, }, return, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getPrototypeTypes, (, ), {, return, getMatchingTypes]
[., getInstanceType, (, ), ;, }, return, null, ;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getPrototypeTypes, (]
[., toFunction, (, ), ., getInstanceType, (, ), ;, }, return, null, ;, }, }, ), ;, }, List, <]
[;, }, }, ), ;, }, List, <, ConcreteInstanceType, >, getPrototypeTypes, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <]
[;, }, List, <, ConcreteFunctionType, >, getSuperclassTypes, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <, ConcreteFunctionType, >, (, NO_FUNCTIONS]
[), ;, }, List, <, ConcreteFunctionType, >, getSuperclassTypes, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <, ConcreteFunctionType, >, (]
[), {, @, Override, public, ConcreteInstanceType, filter, (, ConcreteType, type, ), {, if, (, type, ., isInstance, (, ), &&]
[), {, return, type, ., toInstance, (, ), ;, }, return, null, ;, }, }, ), ;, }, List, <]
[&&, type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ), {, return, type, ., toInstance, (, ), ;, }]
[., isInstance, (, ), &&, type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ), {, return, type, ., toInstance]
[), {, return, type, ., toInstance, (, ), ;, }, return, null, ;, }, }, ), ;, }, List, <]
[., isFunctionPrototype, (, ), ), {, return, type, ., toInstance, (, ), ;, }, return, null, ;, }, }, )]
[., toInstance, (, ), ., isFunctionPrototype, (, ), ), {, return, type, ., toInstance, (, ), ;, }, return, null]
[;, }, return, null, ;, }, }, ), ;, }, List, <, ConcreteFunctionType, >, getSuperclassTypes, (, ), {, return, getMatchingTypes]
[., toInstance, (, ), ;, }, return, null, ;, }, }, ), ;, }, List, <, ConcreteFunctionType, >, getSuperclassTypes, (]
[;, }, }, ), ;, }, List, <, ConcreteFunctionType, >, getSuperclassTypes, (, ), {, return, getMatchingTypes, (, new, TypeFilter, <]
[;, }, List, <, StaticSlot, <, ConcreteType, >, >, getParameterSlots, (, final, int, index, ), {, return, getMatchingTypes, (, new]
[), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getParameterSlots, (, final, int, index, ), {, return, getMatchingTypes, (]
[), {, @, Override, public, ConcreteFunctionType, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (, ), &&, type]
[;, }, }, ), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getParameterSlots, (, final, int, index, ), {]
[?, type, ., toFunction, (, ), ., getSuperclassType, (, ), :, null, ;, }, }, ), ;, }, List, <]
[&&, type, ., toFunction, (, ), ., getSuperclassType, (, ), !=, null, ?, type, ., toFunction, (, ), ., getSuperclassType]
[., isFunction, (, ), &&, type, ., toFunction, (, ), ., getSuperclassType, (, ), !=, null, ?, type, ., toFunction]
[?, type, ., toFunction, (, ), ., getSuperclassType, (, ), :, null, ;, }, }, ), ;, }, List, <]
[!=, null, ?, type, ., toFunction, (, ), ., getSuperclassType, (, ), :, null, ;, }, }, ), ;, }]
[., getSuperclassType, (, ), !=, null, ?, type, ., toFunction, (, ), ., getSuperclassType, (, ), :, null, ;, }]
[., toFunction, (, ), ., getSuperclassType, (, ), !=, null, ?, type, ., toFunction, (, ), ., getSuperclassType, (, )]
[?, type, ., toFunction, (, ), ., getSuperclassType, (, ), :, null, ;, }, }, ), ;, }, List, <]
[:, null, ;, }, }, ), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getParameterSlots, (, final, int, index]
[., getSuperclassType, (, ), :, null, ;, }, }, ), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getParameterSlots]
[., toFunction, (, ), ., getSuperclassType, (, ), :, null, ;, }, }, ), ;, }, List, <, StaticSlot, <]
[;, }, }, ), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getParameterSlots, (, final, int, index, ), {]
[;, }, List, <, StaticSlot, <, ConcreteType, >, >, getPropertySlots, (, final, String, name, ), {, return, getMatchingTypes, (, new]
[), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getPropertySlots, (, final, String, name, ), {, return, getMatchingTypes, (]
[), {, @, Override, public, StaticSlot, <, ConcreteType, >, filter, (, ConcreteType, type, ), {, return, type, ., isFunction, (]
[;, }, }, ), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getPropertySlots, (, final, String, name, ), {]
[?, toFunction, (, ), ., getParameterSlot, (, index, ), :, null, ;, }, }, ), ;, }, List, <, StaticSlot]
[&&, toFunction, (, ), ., getParameterSlot, (, index, ), !=, null, ?, toFunction, (, ), ., getParameterSlot, (, index, )]
[., isFunction, (, ), &&, toFunction, (, ), ., getParameterSlot, (, index, ), !=, null, ?, toFunction, (, ), .]
[?, toFunction, (, ), ., getParameterSlot, (, index, ), :, null, ;, }, }, ), ;, }, List, <, StaticSlot]
[!=, null, ?, toFunction, (, ), ., getParameterSlot, (, index, ), :, null, ;, }, }, ), ;, }, List]
[., getParameterSlot, (, index, ), !=, null, ?, toFunction, (, ), ., getParameterSlot, (, index, ), :, null, ;, }]
[), !=, null, ?, toFunction, (, ), ., getParameterSlot, (, index, ), :, null, ;, }, }, ), ;, }]
[?, toFunction, (, ), ., getParameterSlot, (, index, ), :, null, ;, }, }, ), ;, }, List, <, StaticSlot]
[:, null, ;, }, }, ), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getPropertySlots, (, final, String, name]
[., getParameterSlot, (, index, ), :, null, ;, }, }, ), ;, }, List, <, StaticSlot, <, ConcreteType, >, >]
[), :, null, ;, }, }, ), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getPropertySlots, (, final, String]
[;, }, }, ), ;, }, List, <, StaticSlot, <, ConcreteType, >, >, getPropertySlots, (, final, String, name, ), {]
[;, }, ConcreteType, getPropertyType, (, final, String, name, ), {, ConcreteType, ret, =, NONE, ;, for, (, StaticSlot, <, ConcreteType]
[), ;, }, ConcreteType, getPropertyType, (, final, String, name, ), {, ConcreteType, ret, =, NONE, ;, for, (, StaticSlot, <]
[), {, @, Override, public, StaticSlot, <, ConcreteType, >, filter, (, ConcreteType, type, ), {, StaticSlot, <, ConcreteType, >, slot]
[;, if, (, type, ., isInstance, (, ), ), {, slot, =, type, ., toInstance, (, ), ., getPropertySlot, (]
[), {, slot, =, type, ., toInstance, (, ), ., getPropertySlot, (, name, ), ;, }, return, slot, ;, }]
[., isInstance, (, ), ), {, slot, =, type, ., toInstance, (, ), ., getPropertySlot, (, name, ), ;, }]
[=, type, ., toInstance, (, ), ., getPropertySlot, (, name, ), ;, }, return, slot, ;, }, }, ), ;]
[;, }, return, slot, ;, }, }, ), ;, }, ConcreteType, getPropertyType, (, final, String, name, ), {, ConcreteType, ret]
[., getPropertySlot, (, name, ), ;, }, return, slot, ;, }, }, ), ;, }, ConcreteType, getPropertyType, (, final, String]
[., toInstance, (, ), ., getPropertySlot, (, name, ), ;, }, return, slot, ;, }, }, ), ;, }, ConcreteType]
[), ;, }, return, slot, ;, }, }, ), ;, }, ConcreteType, getPropertyType, (, final, String, name, ), {, ConcreteType]
[;, }, }, ), ;, }, ConcreteType, getPropertyType, (, final, String, name, ), {, ConcreteType, ret, =, NONE, ;, for]
[;, for, (, StaticSlot, <, ConcreteType, >, slot, :, getPropertySlots, (, name, ), ), {, ret, =, ret, ., unionWith]
[), {, ret, =, ret, ., unionWith, (, slot, ., getType, (, ), ), ;, }, return, ret, ;, }]
[), ), {, ret, =, ret, ., unionWith, (, slot, ., getType, (, ), ), ;, }, return, ret, ;]
[=, ret, ., unionWith, (, slot, ., getType, (, ), ), ;, }, return, ret, ;, }, private, static, class]
[;, }, return, ret, ;, }, private, static, class, ConcreteNoneType, extends, ConcreteType, {, @, Override, boolean, isNone, (, ), {]
[., unionWith, (, slot, ., getType, (, ), ), ;, }, return, ret, ;, }, private, static, class, ConcreteNoneType, extends]
[), ;, }, return, ret, ;, }, private, static, class, ConcreteNoneType, extends, ConcreteType, {, @, Override, boolean, isNone, (, )]
[., getType, (, ), ), ;, }, return, ret, ;, }, private, static, class, ConcreteNoneType, extends, ConcreteType, {, @, Override]
[;, }, private, static, class, ConcreteNoneType, extends, ConcreteType, {, @, Override, boolean, isNone, (, ), {, return, true, ;, }]
[;, }, @, Override, ConcreteType, unionWith, (, ConcreteType, other, ), {, return, other, ;, }, @, Override, ConcreteType, intersectWith, (]
[;, }, @, Override, ConcreteType, intersectWith, (, ConcreteType, other, ), {, return, NONE, ;, }, @, Override, public, String, toString]
[;, }, @, Override, public, String, toString, (, ), {, return, "()", ;, }, }, static, class, ConcreteFunctionType, extends, ConcreteType]
[;, }, }, static, class, ConcreteFunctionType, extends, ConcreteType, {, static, final, String, CALL_SLOT_NAME, =, ":call", ;, static, final, String, THIS_SLOT_NAME]
[;, static, final, String, THIS_SLOT_NAME, =, ":this", ;, static, final, String, RETURN_SLOT_NAME, =, ":return", ;, private, final, Factory, factory, ;]
[;, static, final, String, RETURN_SLOT_NAME, =, ":return", ;, private, final, Factory, factory, ;, private, final, Node, declaration, ;, private, final]
[;, private, final, Factory, factory, ;, private, final, Node, declaration, ;, private, final, StaticScope, <, ConcreteType, >, parentScope, ;, private]
[=, factory, ;, this, ., declaration, =, declaration, ;, this, ., parentScope, =, parentScope, ;, Preconditions, ., checkArgument, (, declaration]
[., factory, =, factory, ;, this, ., declaration, =, declaration, ;, this, ., parentScope, =, parentScope, ;, Preconditions, ., checkArgument]
[;, this, ., declaration, =, declaration, ;, this, ., parentScope, =, parentScope, ;, Preconditions, ., checkArgument, (, declaration, ., isFunction]
[=, declaration, ;, this, ., parentScope, =, parentScope, ;, Preconditions, ., checkArgument, (, declaration, ., isFunction, (, ), ), ;]
[., declaration, =, declaration, ;, this, ., parentScope, =, parentScope, ;, Preconditions, ., checkArgument, (, declaration, ., isFunction, (, )]
[;, this, ., parentScope, =, parentScope, ;, Preconditions, ., checkArgument, (, declaration, ., isFunction, (, ), ), ;, Preconditions, .]
[=, parentScope, ;, Preconditions, ., checkArgument, (, declaration, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (, declaration, .]
[., parentScope, =, parentScope, ;, Preconditions, ., checkArgument, (, declaration, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, declaration, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (]
[;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), !=, null, ), ;, Preconditions, ., checkArgument, (, declaration, .]
[., checkArgument, (, declaration, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), !=]
[), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), !=, null, ), ;, Preconditions, ., checkArgument, (, declaration]
[., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), !=, null, ), ;, Preconditions]
[;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), ., isFunctionType, (, ), ), ;, }, @, Override, boolean]
[., checkArgument, (, declaration, ., getJSType, (, ), !=, null, ), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (]
[), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), ., isFunctionType, (, ), ), ;, }, @, Override]
[!=, null, ), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), ., isFunctionType, (, ), ), ;, }]
[., getJSType, (, ), !=, null, ), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), ., isFunctionType, (]
[), ;, Preconditions, ., checkArgument, (, declaration, ., getJSType, (, ), ., isFunctionType, (, ), ), ;, }, @, Override]
[;, }, @, Override, boolean, isFunction, (, ), {, return, true, ;, }, @, Override, ConcreteFunctionType, toFunction, (, ), {]
[., checkArgument, (, declaration, ., getJSType, (, ), ., isFunctionType, (, ), ), ;, }, @, Override, boolean, isFunction, (]
[), ;, }, @, Override, boolean, isFunction, (, ), {, return, true, ;, }, @, Override, ConcreteFunctionType, toFunction, (, )]
[., isFunctionType, (, ), ), ;, }, @, Override, boolean, isFunction, (, ), {, return, true, ;, }, @, Override]
[., getJSType, (, ), ., isFunctionType, (, ), ), ;, }, @, Override, boolean, isFunction, (, ), {, return, true]
[;, }, @, Override, ConcreteFunctionType, toFunction, (, ), {, return, this, ;, }, StaticSlot, <, ConcreteType, >, getCallSlot, (, )]
[;, }, StaticSlot, <, ConcreteType, >, getCallSlot, (, ), {, return, getScope, (, ), ., getOwnSlot, (, CALL_SLOT_NAME, ), ;]
[;, }, StaticSlot, <, ConcreteType, >, getThisSlot, (, ), {, return, getScope, (, ), ., getOwnSlot, (, THIS_SLOT_NAME, ), ;]
[., getOwnSlot, (, CALL_SLOT_NAME, ), ;, }, StaticSlot, <, ConcreteType, >, getThisSlot, (, ), {, return, getScope, (, ), .]
[), ;, }, StaticSlot, <, ConcreteType, >, getThisSlot, (, ), {, return, getScope, (, ), ., getOwnSlot, (, THIS_SLOT_NAME, )]
[;, }, StaticSlot, <, ConcreteType, >, getReturnSlot, (, ), {, return, getScope, (, ), ., getOwnSlot, (, RETURN_SLOT_NAME, ), ;]
[., getOwnSlot, (, THIS_SLOT_NAME, ), ;, }, StaticSlot, <, ConcreteType, >, getReturnSlot, (, ), {, return, getScope, (, ), .]
[), ;, }, StaticSlot, <, ConcreteType, >, getReturnSlot, (, ), {, return, getScope, (, ), ., getOwnSlot, (, RETURN_SLOT_NAME, )]
[;, }, StaticSlot, <, ConcreteType, >, getParameterSlot, (, int, index, ), {, return, getScope, (, ), ., getOwnSlot, (, getParameterName]
[., getOwnSlot, (, RETURN_SLOT_NAME, ), ;, }, StaticSlot, <, ConcreteType, >, getParameterSlot, (, int, index, ), {, return, getScope, (]
[), ;, }, StaticSlot, <, ConcreteType, >, getParameterSlot, (, int, index, ), {, return, getScope, (, ), ., getOwnSlot, (]
[;, }, private, String, getParameterName, (, int, index, ), {, int, count, =, 0, ;, for, (, Node, n, =]
[., getOwnSlot, (, getParameterName, (, index, ), ), ;, }, private, String, getParameterName, (, int, index, ), {, int, count]
[), ;, }, private, String, getParameterName, (, int, index, ), {, int, count, =, 0, ;, for, (, Node, n]
[), ), ;, }, private, String, getParameterName, (, int, index, ), {, int, count, =, 0, ;, for, (, Node]
[;, for, (, Node, n, =, getFirstParameter, (, ), ;, n, !=, null, ;, n, =, n, ., getNext, (]
[;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (, count, ++, ==, index]
[;, n, =, n, ., getNext, (, ), ), {, if, (, count, ++, ==, index, ), {, return, n]
[!=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (, count, ++, ==, index, ), {]
[;, n, =, n, ., getNext, (, ), ), {, if, (, count, ++, ==, index, ), {, return, n]
[=, n, ., getNext, (, ), ), {, if, (, count, ++, ==, index, ), {, return, n, ., getString]
[), {, if, (, count, ++, ==, index, ), {, return, n, ., getString, (, ), ;, }, }, return]
[., getNext, (, ), ), {, if, (, count, ++, ==, index, ), {, return, n, ., getString, (, )]
[), {, return, n, ., getString, (, ), ;, }, }, return, null, ;, }, private, Node, getFirstParameter, (, )]
[==, index, ), {, return, n, ., getString, (, ), ;, }, }, return, null, ;, }, private, Node, getFirstParameter]
[++, ==, index, ), {, return, n, ., getString, (, ), ;, }, }, return, null, ;, }, private, Node]
[), {, return, n, ., getString, (, ), ;, }, }, return, null, ;, }, private, Node, getFirstParameter, (, )]
[;, }, }, return, null, ;, }, private, Node, getFirstParameter, (, ), {, return, declaration, ., getFirstChild, (, ), .]
[., getString, (, ), ;, }, }, return, null, ;, }, private, Node, getFirstParameter, (, ), {, return, declaration, .]
[;, }, private, Node, getFirstParameter, (, ), {, return, declaration, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild]
[;, }, public, FunctionType, getJSType, (, ), {, return, JSType, ., toMaybeFunctionType, (, declaration, ., getJSType, (, ), ), ;]
[., getFirstChild, (, ), ;, }, public, FunctionType, getJSType, (, ), {, return, JSType, ., toMaybeFunctionType, (, declaration, ., getJSType]
[., getNext, (, ), ., getFirstChild, (, ), ;, }, public, FunctionType, getJSType, (, ), {, return, JSType, ., toMaybeFunctionType]
[., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, }, public, FunctionType, getJSType, (, ), {]
[;, }, ConcreteInstanceType, getInstanceType, (, ), {, if, (, instanceType, ==, null, ), {, if, (, getJSType, (, ), .]
[., toMaybeFunctionType, (, declaration, ., getJSType, (, ), ), ;, }, ConcreteInstanceType, getInstanceType, (, ), {, if, (, instanceType, ==]
[), ;, }, ConcreteInstanceType, getInstanceType, (, ), {, if, (, instanceType, ==, null, ), {, if, (, getJSType, (, )]
[., getJSType, (, ), ), ;, }, ConcreteInstanceType, getInstanceType, (, ), {, if, (, instanceType, ==, null, ), {, if]
[), {, if, (, getJSType, (, ), ., isConstructor, (, ), ), {, instanceType, =, factory, ., createConcreteInstance, (, getJSType]
[==, null, ), {, if, (, getJSType, (, ), ., isConstructor, (, ), ), {, instanceType, =, factory, ., createConcreteInstance]
[), {, if, (, getJSType, (, ), ., isConstructor, (, ), ), {, instanceType, =, factory, ., createConcreteInstance, (, getJSType]
[), {, instanceType, =, factory, ., createConcreteInstance, (, getJSType, (, ), ., getInstanceType, (, ), ), ;, }, }, return]
[., isConstructor, (, ), ), {, instanceType, =, factory, ., createConcreteInstance, (, getJSType, (, ), ., getInstanceType, (, ), )]
[=, factory, ., createConcreteInstance, (, getJSType, (, ), ., getInstanceType, (, ), ), ;, }, }, return, instanceType, ;, }]
[;, }, }, return, instanceType, ;, }, ConcreteInstanceType, getPrototypeType, (, ), {, if, (, prototypeType, ==, null, ), {, prototypeType]
[., createConcreteInstance, (, getJSType, (, ), ., getInstanceType, (, ), ), ;, }, }, return, instanceType, ;, }, ConcreteInstanceType, getPrototypeType]
[), ;, }, }, return, instanceType, ;, }, ConcreteInstanceType, getPrototypeType, (, ), {, if, (, prototypeType, ==, null, ), {]
[., getInstanceType, (, ), ), ;, }, }, return, instanceType, ;, }, ConcreteInstanceType, getPrototypeType, (, ), {, if, (, prototypeType]
[;, }, ConcreteInstanceType, getPrototypeType, (, ), {, if, (, prototypeType, ==, null, ), {, prototypeType, =, factory, ., createConcreteInstance, (]
[), {, prototypeType, =, factory, ., createConcreteInstance, (, getJSType, (, ), ., getPrototype, (, ), ), ;, }, return, prototypeType]
[==, null, ), {, prototypeType, =, factory, ., createConcreteInstance, (, getJSType, (, ), ., getPrototype, (, ), ), ;, }]
[), {, prototypeType, =, factory, ., createConcreteInstance, (, getJSType, (, ), ., getPrototype, (, ), ), ;, }, return, prototypeType]
[=, factory, ., createConcreteInstance, (, getJSType, (, ), ., getPrototype, (, ), ), ;, }, return, prototypeType, ;, }, ConcreteFunctionType]
[;, }, return, prototypeType, ;, }, ConcreteFunctionType, getSuperclassType, (, ), {, FunctionType, superConstructor, =, getJSType, (, ), ., getSuperClassConstructor, (]
[., createConcreteInstance, (, getJSType, (, ), ., getPrototype, (, ), ), ;, }, return, prototypeType, ;, }, ConcreteFunctionType, getSuperclassType, (]
[), ;, }, return, prototypeType, ;, }, ConcreteFunctionType, getSuperclassType, (, ), {, FunctionType, superConstructor, =, getJSType, (, ), ., getSuperClassConstructor]
[., getPrototype, (, ), ), ;, }, return, prototypeType, ;, }, ConcreteFunctionType, getSuperclassType, (, ), {, FunctionType, superConstructor, =, getJSType]
[;, }, ConcreteFunctionType, getSuperclassType, (, ), {, FunctionType, superConstructor, =, getJSType, (, ), ., getSuperClassConstructor, (, ), ;, return, (]
[;, return, (, superConstructor, !=, null, ), ?, factory, ., getConcreteFunction, (, superConstructor, ), :, null, ;, }, @, Override]
[., getSuperClassConstructor, (, ), ;, return, (, superConstructor, !=, null, ), ?, factory, ., getConcreteFunction, (, superConstructor, ), :, null]
[;, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, bodyScope, ==, null, ), {, bodyScope]
[?, factory, ., getConcreteFunction, (, superConstructor, ), :, null, ;, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, )]
[), ?, factory, ., getConcreteFunction, (, superConstructor, ), :, null, ;, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (]
[!=, null, ), ?, factory, ., getConcreteFunction, (, superConstructor, ), :, null, ;, }, @, Override, StaticScope, <, ConcreteType, >]
[), ?, factory, ., getConcreteFunction, (, superConstructor, ), :, null, ;, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (]
[:, null, ;, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, bodyScope, ==, null, )]
[., getConcreteFunction, (, superConstructor, ), :, null, ;, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if]
[), :, null, ;, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, bodyScope, ==, null]
[;, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, bodyScope, ==, null, ), {, bodyScope]
[), {, bodyScope, =, factory, ., createFunctionScope, (, declaration, ,, parentScope, ), ;, }, return, bodyScope, ;, }, @, Override]
[==, null, ), {, bodyScope, =, factory, ., createFunctionScope, (, declaration, ,, parentScope, ), ;, }, return, bodyScope, ;, }]
[), {, bodyScope, =, factory, ., createFunctionScope, (, declaration, ,, parentScope, ), ;, }, return, bodyScope, ;, }, @, Override]
[=, factory, ., createFunctionScope, (, declaration, ,, parentScope, ), ;, }, return, bodyScope, ;, }, @, Override, public, String, toString]
[;, }, return, bodyScope, ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, b, =, new, StringBuilder, (]
[., createFunctionScope, (, declaration, ,, parentScope, ), ;, }, return, bodyScope, ;, }, @, Override, public, String, toString, (, )]
[,, parentScope, ), ;, }, return, bodyScope, ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, b, =]
[), ;, }, return, bodyScope, ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, b, =, new, StringBuilder]
[;, }, @, Override, public, String, toString, (, ), {, StringBuilder, b, =, new, StringBuilder, (, 32, ), ;, b]
[;, b, ., append, (, "function (", ), ;, boolean, hasKnownTypeOfThis, =, !, getThisSlot, (, ), ., getType, (, ), .]
[), ;, b, ., append, (, "function (", ), ;, boolean, hasKnownTypeOfThis, =, !, getThisSlot, (, ), ., getType, (, )]
[;, boolean, hasKnownTypeOfThis, =, !, getThisSlot, (, ), ., getType, (, ), ., isNone, (, ), ;, if, (, hasKnownTypeOfThis]
[., append, (, "function (", ), ;, boolean, hasKnownTypeOfThis, =, !, getThisSlot, (, ), ., getType, (, ), ., isNone, (]
[), ;, boolean, hasKnownTypeOfThis, =, !, getThisSlot, (, ), ., getType, (, ), ., isNone, (, ), ;, if, (]
[;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, "this:", ), ;, b, ., append, (, getThisSlot, (, )]
[;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, "this:", ), ;, b, ., append, (, getThisSlot, (, )]
[., isNone, (, ), ;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, "this:", ), ;, b, ., append]
[., getType, (, ), ., isNone, (, ), ;, if, (, hasKnownTypeOfThis, ), {, b, ., append, (, "this:", )]
[), {, b, ., append, (, "this:", ), ;, b, ., append, (, getThisSlot, (, ), ., getType, (, )]
[;, b, ., append, (, getThisSlot, (, ), ., getType, (, ), ., toString, (, ), ), ;, }, Node]
[., append, (, "this:", ), ;, b, ., append, (, getThisSlot, (, ), ., getType, (, ), ., toString, (]
[), ;, b, ., append, (, getThisSlot, (, ), ., getType, (, ), ., toString, (, ), ), ;, }]
[;, }, Node, n, =, getFirstParameter, (, ), ;, if, (, hasKnownTypeOfThis, &&, n, !=, null, ), {, b, .]
[., append, (, getThisSlot, (, ), ., getType, (, ), ., toString, (, ), ), ;, }, Node, n, =]
[), ;, }, Node, n, =, getFirstParameter, (, ), ;, if, (, hasKnownTypeOfThis, &&, n, !=, null, ), {, b]
[., toString, (, ), ), ;, }, Node, n, =, getFirstParameter, (, ), ;, if, (, hasKnownTypeOfThis, &&, n, !=]
[., getType, (, ), ., toString, (, ), ), ;, }, Node, n, =, getFirstParameter, (, ), ;, if, (]
[;, if, (, hasKnownTypeOfThis, &&, n, !=, null, ), {, b, ., append, (, ", ", ), ;, }, for, (]
[), {, b, ., append, (, ", ", ), ;, }, for, (, int, i, =, 0, ;, n, !=, null]
[&&, n, !=, null, ), {, b, ., append, (, ", ", ), ;, }, for, (, int, i, =, 0]
[), {, b, ., append, (, ", ", ), ;, }, for, (, int, i, =, 0, ;, n, !=, null]
[!=, null, ), {, b, ., append, (, ", ", ), ;, }, for, (, int, i, =, 0, ;, n]
[), {, b, ., append, (, ", ", ), ;, }, for, (, int, i, =, 0, ;, n, !=, null]
[;, }, for, (, int, i, =, 0, ;, n, !=, null, ;, ++, i, ,, n, =, n, .]
[., append, (, ", ", ), ;, }, for, (, int, i, =, 0, ;, n, !=, null, ;, ++, i]
[), ;, }, for, (, int, i, =, 0, ;, n, !=, null, ;, ++, i, ,, n, =, n]
[;, n, !=, null, ;, ++, i, ,, n, =, n, ., getNext, (, ), ), {, String, paramName, =]
[;, ++, i, ,, n, =, n, ., getNext, (, ), ), {, String, paramName, =, n, ., getString, (]
[!=, null, ;, ++, i, ,, n, =, n, ., getNext, (, ), ), {, String, paramName, =, n, .]
[;, ++, i, ,, n, =, n, ., getNext, (, ), ), {, String, paramName, =, n, ., getString, (]
[,, n, =, n, ., getNext, (, ), ), {, String, paramName, =, n, ., getString, (, ), ;, StaticSlot]
[,, n, =, n, ., getNext, (, ), ), {, String, paramName, =, n, ., getString, (, ), ;, StaticSlot]
[=, n, ., getNext, (, ), ), {, String, paramName, =, n, ., getString, (, ), ;, StaticSlot, <, ConcreteType]
[), {, String, paramName, =, n, ., getString, (, ), ;, StaticSlot, <, ConcreteType, >, var, =, getScope, (, )]
[., getNext, (, ), ), {, String, paramName, =, n, ., getString, (, ), ;, StaticSlot, <, ConcreteType, >, var]
[;, StaticSlot, <, ConcreteType, >, var, =, getScope, (, ), ., getOwnSlot, (, paramName, ), ;, b, ., append, (]
[., getString, (, ), ;, StaticSlot, <, ConcreteType, >, var, =, getScope, (, ), ., getOwnSlot, (, paramName, ), ;]
[;, b, ., append, (, var, ., getType, (, ), ), ;, getParameterSlot, (, i, ), ., getType, (, )]
[., getOwnSlot, (, paramName, ), ;, b, ., append, (, var, ., getType, (, ), ), ;, getParameterSlot, (, i]
[), ;, b, ., append, (, var, ., getType, (, ), ), ;, getParameterSlot, (, i, ), ., getType, (]
[;, getParameterSlot, (, i, ), ., getType, (, ), ;, if, (, n, ., getNext, (, ), !=, null, )]
[., append, (, var, ., getType, (, ), ), ;, getParameterSlot, (, i, ), ., getType, (, ), ;, if]
[), ;, getParameterSlot, (, i, ), ., getType, (, ), ;, if, (, n, ., getNext, (, ), !=, null]
[., getType, (, ), ), ;, getParameterSlot, (, i, ), ., getType, (, ), ;, if, (, n, ., getNext]
[;, if, (, n, ., getNext, (, ), !=, null, ), {, b, ., append, (, ", ", ), ;, }]
[., getType, (, ), ;, if, (, n, ., getNext, (, ), !=, null, ), {, b, ., append, (]
[), ., getType, (, ), ;, if, (, n, ., getNext, (, ), !=, null, ), {, b, ., append]
[), {, b, ., append, (, ", ", ), ;, }, }, b, ., append, (, ")", ), ;, if, (]
[!=, null, ), {, b, ., append, (, ", ", ), ;, }, }, b, ., append, (, ")", ), ;]
[., getNext, (, ), !=, null, ), {, b, ., append, (, ", ", ), ;, }, }, b, ., append]
[), {, b, ., append, (, ", ", ), ;, }, }, b, ., append, (, ")", ), ;, if, (]
[;, }, }, b, ., append, (, ")", ), ;, if, (, getReturnSlot, (, ), ., getType, (, ), !=]
[., append, (, ", ", ), ;, }, }, b, ., append, (, ")", ), ;, if, (, getReturnSlot, (, )]
[), ;, }, }, b, ., append, (, ")", ), ;, if, (, getReturnSlot, (, ), ., getType, (, )]
[;, if, (, getReturnSlot, (, ), ., getType, (, ), !=, null, ), {, b, ., append, (, ": ", )]
[., append, (, ")", ), ;, if, (, getReturnSlot, (, ), ., getType, (, ), !=, null, ), {, b]
[), ;, if, (, getReturnSlot, (, ), ., getType, (, ), !=, null, ), {, b, ., append, (, ": "]
[), {, b, ., append, (, ": ", ), ;, b, ., append, (, getReturnSlot, (, ), ., getType, (, )]
[!=, null, ), {, b, ., append, (, ": ", ), ;, b, ., append, (, getReturnSlot, (, ), ., getType]
[., getType, (, ), !=, null, ), {, b, ., append, (, ": ", ), ;, b, ., append, (, getReturnSlot]
[), {, b, ., append, (, ": ", ), ;, b, ., append, (, getReturnSlot, (, ), ., getType, (, )]
[;, b, ., append, (, getReturnSlot, (, ), ., getType, (, ), ., toString, (, ), ), ;, }, return]
[., append, (, ": ", ), ;, b, ., append, (, getReturnSlot, (, ), ., getType, (, ), ., toString, (]
[), ;, b, ., append, (, getReturnSlot, (, ), ., getType, (, ), ., toString, (, ), ), ;, }]
[;, }, return, b, ., toString, (, ), ;, }, }, static, class, ConcreteInstanceType, extends, ConcreteType, {, private, final, Factory]
[., append, (, getReturnSlot, (, ), ., getType, (, ), ., toString, (, ), ), ;, }, return, b, .]
[), ;, }, return, b, ., toString, (, ), ;, }, }, static, class, ConcreteInstanceType, extends, ConcreteType, {, private, final]
[., toString, (, ), ), ;, }, return, b, ., toString, (, ), ;, }, }, static, class, ConcreteInstanceType, extends]
[., getType, (, ), ., toString, (, ), ), ;, }, return, b, ., toString, (, ), ;, }, }]
[;, }, }, static, class, ConcreteInstanceType, extends, ConcreteType, {, private, final, Factory, factory, ;, public, final, ObjectType, instanceType, ;, private]
[., toString, (, ), ;, }, }, static, class, ConcreteInstanceType, extends, ConcreteType, {, private, final, Factory, factory, ;, public, final]
[=, factory, ;, this, ., instanceType, =, instanceType, ;, Preconditions, ., checkArgument, (, !, (, instanceType, instanceof, UnknownType, ), )]
[., factory, =, factory, ;, this, ., instanceType, =, instanceType, ;, Preconditions, ., checkArgument, (, !, (, instanceType, instanceof, UnknownType]
[;, this, ., instanceType, =, instanceType, ;, Preconditions, ., checkArgument, (, !, (, instanceType, instanceof, UnknownType, ), ), ;, }]
[=, instanceType, ;, Preconditions, ., checkArgument, (, !, (, instanceType, instanceof, UnknownType, ), ), ;, }, @, Override, boolean, isInstance]
[., instanceType, =, instanceType, ;, Preconditions, ., checkArgument, (, !, (, instanceType, instanceof, UnknownType, ), ), ;, }, @, Override]
[;, Preconditions, ., checkArgument, (, !, (, instanceType, instanceof, UnknownType, ), ), ;, }, @, Override, boolean, isInstance, (, )]
[;, }, @, Override, boolean, isInstance, (, ), {, return, true, ;, }, @, Override, ConcreteInstanceType, toInstance, (, ), {]
[., checkArgument, (, !, (, instanceType, instanceof, UnknownType, ), ), ;, }, @, Override, boolean, isInstance, (, ), {, return]
[), ;, }, @, Override, boolean, isInstance, (, ), {, return, true, ;, }, @, Override, ConcreteInstanceType, toInstance, (, )]
[), ;, }, @, Override, boolean, isInstance, (, ), {, return, true, ;, }, @, Override, ConcreteInstanceType, toInstance, (, )]
[), ), ;, }, @, Override, boolean, isInstance, (, ), {, return, true, ;, }, @, Override, ConcreteInstanceType, toInstance, (]
[instanceof, UnknownType, ), ), ;, }, @, Override, boolean, isInstance, (, ), {, return, true, ;, }, @, Override, ConcreteInstanceType]
[;, }, @, Override, ConcreteInstanceType, toInstance, (, ), {, return, this, ;, }, boolean, isFunctionPrototype, (, ), {, return, instanceType]
[;, }, boolean, isFunctionPrototype, (, ), {, return, instanceType, ., isFunctionPrototypeType, (, ), ;, }, StaticSlot, <, ConcreteType, >, getPropertySlot]
[;, }, StaticSlot, <, ConcreteType, >, getPropertySlot, (, String, propName, ), {, return, getScope, (, ), ., getSlot, (, propName]
[., isFunctionPrototypeType, (, ), ;, }, StaticSlot, <, ConcreteType, >, getPropertySlot, (, String, propName, ), {, return, getScope, (, )]
[;, }, ConcreteInstanceType, getInstanceTypeWithProperty, (, String, propName, ), {, if, (, getScope, (, ), ., getOwnSlot, (, propName, ), !=]
[., getSlot, (, propName, ), ;, }, ConcreteInstanceType, getInstanceTypeWithProperty, (, String, propName, ), {, if, (, getScope, (, ), .]
[), ;, }, ConcreteInstanceType, getInstanceTypeWithProperty, (, String, propName, ), {, if, (, getScope, (, ), ., getOwnSlot, (, propName, )]
[), {, if, (, instanceType, ., getConstructor, (, ), !=, null, ), {, return, getConstructorType, (, ), ., getPrototypeType, (]
[!=, null, ), {, if, (, instanceType, ., getConstructor, (, ), !=, null, ), {, return, getConstructorType, (, ), .]
[., getOwnSlot, (, propName, ), !=, null, ), {, if, (, instanceType, ., getConstructor, (, ), !=, null, ), {]
[), !=, null, ), {, if, (, instanceType, ., getConstructor, (, ), !=, null, ), {, return, getConstructorType, (, )]
[), {, if, (, instanceType, ., getConstructor, (, ), !=, null, ), {, return, getConstructorType, (, ), ., getPrototypeType, (]
[), {, return, getConstructorType, (, ), ., getPrototypeType, (, ), ;, }, return, this, ;, }, else, if, (, getImplicitPrototype]
[!=, null, ), {, return, getConstructorType, (, ), ., getPrototypeType, (, ), ;, }, return, this, ;, }, else, if]
[., getConstructor, (, ), !=, null, ), {, return, getConstructorType, (, ), ., getPrototypeType, (, ), ;, }, return, this]
[), {, return, getConstructorType, (, ), ., getPrototypeType, (, ), ;, }, return, this, ;, }, else, if, (, getImplicitPrototype]
[;, }, return, this, ;, }, else, if, (, getImplicitPrototype, (, ), !=, null, ), {, return, getImplicitPrototype, (, )]
[., getPrototypeType, (, ), ;, }, return, this, ;, }, else, if, (, getImplicitPrototype, (, ), !=, null, ), {]
[;, }, else, if, (, getImplicitPrototype, (, ), !=, null, ), {, return, getImplicitPrototype, (, ), ., getInstanceTypeWithProperty, (, propName]
[), {, return, getImplicitPrototype, (, ), ., getInstanceTypeWithProperty, (, propName, ), ;, }, else, {, return, null, ;, }, }]
[!=, null, ), {, return, getImplicitPrototype, (, ), ., getInstanceTypeWithProperty, (, propName, ), ;, }, else, {, return, null, ;]
[), {, return, getImplicitPrototype, (, ), ., getInstanceTypeWithProperty, (, propName, ), ;, }, else, {, return, null, ;, }, }]
[;, }, else, {, return, null, ;, }, }, ConcreteInstanceType, getImplicitPrototype, (, ), {, if, (, (, prototype, ==, null]
[., getInstanceTypeWithProperty, (, propName, ), ;, }, else, {, return, null, ;, }, }, ConcreteInstanceType, getImplicitPrototype, (, ), {, if]
[), ;, }, else, {, return, null, ;, }, }, ConcreteInstanceType, getImplicitPrototype, (, ), {, if, (, (, prototype, ==]
[;, }, }, ConcreteInstanceType, getImplicitPrototype, (, ), {, if, (, (, prototype, ==, null, ), &&, (, instanceType, ., getImplicitPrototype]
[), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, (, proto, !=, instanceType, ), &&, !]
[&&, (, instanceType, ., getImplicitPrototype, (, ), !=, null, ), ), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, )]
[), &&, (, instanceType, ., getImplicitPrototype, (, ), !=, null, ), ), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (]
[==, null, ), &&, (, instanceType, ., getImplicitPrototype, (, ), !=, null, ), ), {, ObjectType, proto, =, instanceType, .]
[), &&, (, instanceType, ., getImplicitPrototype, (, ), !=, null, ), ), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (]
[), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, (, proto, !=, instanceType, ), &&, !]
[), ), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, (, proto, !=, instanceType, ), &&]
[!=, null, ), ), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, (, proto, !=, instanceType]
[., getImplicitPrototype, (, ), !=, null, ), ), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (]
[), ), {, ObjectType, proto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, (, proto, !=, instanceType, ), &&]
[;, if, (, (, proto, !=, instanceType, ), &&, !, (, proto, instanceof, UnknownType, ), ), {, prototype, =, factory]
[., getImplicitPrototype, (, ), ;, if, (, (, proto, !=, instanceType, ), &&, !, (, proto, instanceof, UnknownType, ), )]
[), {, prototype, =, factory, ., createConcreteInstance, (, proto, ), ;, }, }, return, prototype, ;, }, ConcreteFunctionType, getConstructorType, (]
[&&, !, (, proto, instanceof, UnknownType, ), ), {, prototype, =, factory, ., createConcreteInstance, (, proto, ), ;, }, }]
[), &&, !, (, proto, instanceof, UnknownType, ), ), {, prototype, =, factory, ., createConcreteInstance, (, proto, ), ;, }]
[!=, instanceType, ), &&, !, (, proto, instanceof, UnknownType, ), ), {, prototype, =, factory, ., createConcreteInstance, (, proto, )]
[), &&, !, (, proto, instanceof, UnknownType, ), ), {, prototype, =, factory, ., createConcreteInstance, (, proto, ), ;, }]
[), {, prototype, =, factory, ., createConcreteInstance, (, proto, ), ;, }, }, return, prototype, ;, }, ConcreteFunctionType, getConstructorType, (]
[), {, prototype, =, factory, ., createConcreteInstance, (, proto, ), ;, }, }, return, prototype, ;, }, ConcreteFunctionType, getConstructorType, (]
[), ), {, prototype, =, factory, ., createConcreteInstance, (, proto, ), ;, }, }, return, prototype, ;, }, ConcreteFunctionType, getConstructorType]
[instanceof, UnknownType, ), ), {, prototype, =, factory, ., createConcreteInstance, (, proto, ), ;, }, }, return, prototype, ;, }]
[=, factory, ., createConcreteInstance, (, proto, ), ;, }, }, return, prototype, ;, }, ConcreteFunctionType, getConstructorType, (, ), {, if]
[;, }, }, return, prototype, ;, }, ConcreteFunctionType, getConstructorType, (, ), {, if, (, instanceType, ., isFunctionPrototypeType, (, ), )]
[., createConcreteInstance, (, proto, ), ;, }, }, return, prototype, ;, }, ConcreteFunctionType, getConstructorType, (, ), {, if, (, instanceType]
[), ;, }, }, return, prototype, ;, }, ConcreteFunctionType, getConstructorType, (, ), {, if, (, instanceType, ., isFunctionPrototypeType, (, )]
[;, }, ConcreteFunctionType, getConstructorType, (, ), {, if, (, instanceType, ., isFunctionPrototypeType, (, ), ), {, return, factory, ., getConcreteFunction]
[), {, return, factory, ., getConcreteFunction, (, instanceType, ., getOwnerFunction, (, ), ), ;, }, else, {, FunctionType, constructor, =]
[., isFunctionPrototypeType, (, ), ), {, return, factory, ., getConcreteFunction, (, instanceType, ., getOwnerFunction, (, ), ), ;, }, else]
[;, }, else, {, FunctionType, constructor, =, instanceType, ., getConstructor, (, ), ;, return, (, constructor, !=, null, ), ?]
[., getConcreteFunction, (, instanceType, ., getOwnerFunction, (, ), ), ;, }, else, {, FunctionType, constructor, =, instanceType, ., getConstructor, (]
[), ;, }, else, {, FunctionType, constructor, =, instanceType, ., getConstructor, (, ), ;, return, (, constructor, !=, null, )]
[., getOwnerFunction, (, ), ), ;, }, else, {, FunctionType, constructor, =, instanceType, ., getConstructor, (, ), ;, return, (]
[;, return, (, constructor, !=, null, ), ?, factory, ., getConcreteFunction, (, constructor, ), :, null, ;, }, }, @]
[., getConstructor, (, ), ;, return, (, constructor, !=, null, ), ?, factory, ., getConcreteFunction, (, constructor, ), :, null]
[;, }, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, scope, ==, null, ), {]
[?, factory, ., getConcreteFunction, (, constructor, ), :, null, ;, }, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (]
[), ?, factory, ., getConcreteFunction, (, constructor, ), :, null, ;, }, }, @, Override, StaticScope, <, ConcreteType, >, getScope]
[!=, null, ), ?, factory, ., getConcreteFunction, (, constructor, ), :, null, ;, }, }, @, Override, StaticScope, <, ConcreteType]
[), ?, factory, ., getConcreteFunction, (, constructor, ), :, null, ;, }, }, @, Override, StaticScope, <, ConcreteType, >, getScope]
[:, null, ;, }, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, scope, ==, null]
[., getConcreteFunction, (, constructor, ), :, null, ;, }, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {]
[), :, null, ;, }, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, scope, ==]
[;, }, }, @, Override, StaticScope, <, ConcreteType, >, getScope, (, ), {, if, (, scope, ==, null, ), {]
[), {, scope, =, factory, ., createInstanceScope, (, instanceType, ), ;, }, return, scope, ;, }, @, Override, public, String]
[==, null, ), {, scope, =, factory, ., createInstanceScope, (, instanceType, ), ;, }, return, scope, ;, }, @, Override]
[), {, scope, =, factory, ., createInstanceScope, (, instanceType, ), ;, }, return, scope, ;, }, @, Override, public, String]
[=, factory, ., createInstanceScope, (, instanceType, ), ;, }, return, scope, ;, }, @, Override, public, String, toString, (, )]
[;, }, return, scope, ;, }, @, Override, public, String, toString, (, ), {, return, instanceType, ., toString, (, )]
[., createInstanceScope, (, instanceType, ), ;, }, return, scope, ;, }, @, Override, public, String, toString, (, ), {, return]
[), ;, }, return, scope, ;, }, @, Override, public, String, toString, (, ), {, return, instanceType, ., toString, (]
[;, }, @, Override, public, String, toString, (, ), {, return, instanceType, ., toString, (, ), ;, }, }, static]
[;, }, }, static, class, ConcreteUnionType, extends, ConcreteType, {, private, final, Set, <, ConcreteType, >, alternatives, ;, ConcreteUnionType, (, ConcreteType]
[., toString, (, ), ;, }, }, static, class, ConcreteUnionType, extends, ConcreteType, {, private, final, Set, <, ConcreteType, >, alternatives]
[), ;, }, ConcreteUnionType, (, Set, <, ConcreteType, >, alternatives, ), {, Preconditions, ., checkArgument, (, alternatives, ., size, (]
[., newHashSet, (, alternatives, ), ), ;, }, ConcreteUnionType, (, Set, <, ConcreteType, >, alternatives, ), {, Preconditions, ., checkArgument]
[), ), ;, }, ConcreteUnionType, (, Set, <, ConcreteType, >, alternatives, ), {, Preconditions, ., checkArgument, (, alternatives, ., size]
[;, this, ., alternatives, =, alternatives, ;, }, @, Override, boolean, isUnion, (, ), {, return, true, ;, }, @]
[., checkArgument, (, alternatives, ., size, (, ), >, 1, ), ;, this, ., alternatives, =, alternatives, ;, }, @]
[), ;, this, ., alternatives, =, alternatives, ;, }, @, Override, boolean, isUnion, (, ), {, return, true, ;, }]
[>, 1, ), ;, this, ., alternatives, =, alternatives, ;, }, @, Override, boolean, isUnion, (, ), {, return, true]
[., size, (, ), >, 1, ), ;, this, ., alternatives, =, alternatives, ;, }, @, Override, boolean, isUnion, (]
[), ;, this, ., alternatives, =, alternatives, ;, }, @, Override, boolean, isUnion, (, ), {, return, true, ;, }]
[=, alternatives, ;, }, @, Override, boolean, isUnion, (, ), {, return, true, ;, }, @, Override, ConcreteUnionType, toUnion, (]
[., alternatives, =, alternatives, ;, }, @, Override, boolean, isUnion, (, ), {, return, true, ;, }, @, Override, ConcreteUnionType]
[;, }, @, Override, boolean, isUnion, (, ), {, return, true, ;, }, @, Override, ConcreteUnionType, toUnion, (, ), {]
[;, }, @, Override, ConcreteUnionType, toUnion, (, ), {, return, this, ;, }, @, Override, ConcreteType, unionWith, (, ConcreteType, other]
[;, }, @, Override, ConcreteType, unionWith, (, ConcreteType, other, ), {, if, (, other, ., isSingleton, (, ), ), {]
[), {, if, (, alternatives, ., contains, (, other, ), ), {, return, this, ;, }, else, {, Set, <]
[., isSingleton, (, ), ), {, if, (, alternatives, ., contains, (, other, ), ), {, return, this, ;, }]
[), {, return, this, ;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives, )]
[., contains, (, other, ), ), {, return, this, ;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets]
[), ), {, return, this, ;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives]
[;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives, ), ;, alts, ., add]
[;, alts, ., add, (, other, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, if, (]
[., newHashSet, (, alternatives, ), ;, alts, ., add, (, other, ), ;, return, new, ConcreteUnionType, (, alts, ), ;]
[), ;, alts, ., add, (, other, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, if]
[;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, if, (, other, ., isUnion, (, ), ), {]
[., add, (, other, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, if, (, other, .]
[), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, if, (, other, ., isUnion, (, ), )]
[;, }, }, else, if, (, other, ., isUnion, (, ), ), {, ConcreteUnionType, otherUnion, =, other, ., toUnion, (]
[), ;, }, }, else, if, (, other, ., isUnion, (, ), ), {, ConcreteUnionType, otherUnion, =, other, ., toUnion]
[), {, ConcreteUnionType, otherUnion, =, other, ., toUnion, (, ), ;, if, (, alternatives, ., containsAll, (, otherUnion, ., alternatives]
[., isUnion, (, ), ), {, ConcreteUnionType, otherUnion, =, other, ., toUnion, (, ), ;, if, (, alternatives, ., containsAll]
[;, if, (, alternatives, ., containsAll, (, otherUnion, ., alternatives, ), ), {, return, this, ;, }, else, if, (]
[., toUnion, (, ), ;, if, (, alternatives, ., containsAll, (, otherUnion, ., alternatives, ), ), {, return, this, ;]
[), {, return, this, ;, }, else, if, (, otherUnion, ., alternatives, ., containsAll, (, alternatives, ), ), {, return]
[., containsAll, (, otherUnion, ., alternatives, ), ), {, return, this, ;, }, else, if, (, otherUnion, ., alternatives, .]
[), ), {, return, this, ;, }, else, if, (, otherUnion, ., alternatives, ., containsAll, (, alternatives, ), ), {]
[., alternatives, ), ), {, return, this, ;, }, else, if, (, otherUnion, ., alternatives, ., containsAll, (, alternatives, )]
[;, }, else, if, (, otherUnion, ., alternatives, ., containsAll, (, alternatives, ), ), {, return, otherUnion, ;, }, else]
[), {, return, otherUnion, ;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives, )]
[., containsAll, (, alternatives, ), ), {, return, otherUnion, ;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets]
[., alternatives, ., containsAll, (, alternatives, ), ), {, return, otherUnion, ;, }, else, {, Set, <, ConcreteType, >, alts]
[), ), {, return, otherUnion, ;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives]
[;, }, else, {, Set, <, ConcreteType, >, alts, =, Sets, ., newHashSet, (, alternatives, ), ;, alts, ., addAll]
[;, alts, ., addAll, (, otherUnion, ., alternatives, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else]
[., newHashSet, (, alternatives, ), ;, alts, ., addAll, (, otherUnion, ., alternatives, ), ;, return, new, ConcreteUnionType, (, alts]
[), ;, alts, ., addAll, (, otherUnion, ., alternatives, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }]
[;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, {, Preconditions, ., checkArgument, (, other, ., isNone, (]
[., addAll, (, otherUnion, ., alternatives, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, {, Preconditions]
[), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, {, Preconditions, ., checkArgument, (, other, ., isNone]
[., alternatives, ), ;, return, new, ConcreteUnionType, (, alts, ), ;, }, }, else, {, Preconditions, ., checkArgument, (, other]
[;, }, }, else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, ), ||, other, ., isAll, (, )]
[), ;, }, }, else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, ), ||, other, ., isAll, (]
[;, return, other, ., unionWith, (, this, ), ;, }, }, @, Override, ConcreteType, intersectWith, (, ConcreteType, other, ), {]
[., checkArgument, (, other, ., isNone, (, ), ||, other, ., isAll, (, ), ), ;, return, other, ., unionWith]
[), ;, return, other, ., unionWith, (, this, ), ;, }, }, @, Override, ConcreteType, intersectWith, (, ConcreteType, other, )]
[||, other, ., isAll, (, ), ), ;, return, other, ., unionWith, (, this, ), ;, }, }, @, Override]
[., isNone, (, ), ||, other, ., isAll, (, ), ), ;, return, other, ., unionWith, (, this, ), ;]
[), ;, return, other, ., unionWith, (, this, ), ;, }, }, @, Override, ConcreteType, intersectWith, (, ConcreteType, other, )]
[., isAll, (, ), ), ;, return, other, ., unionWith, (, this, ), ;, }, }, @, Override, ConcreteType, intersectWith]
[;, }, }, @, Override, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (, other, ., isSingleton, (, ), )]
[., unionWith, (, this, ), ;, }, }, @, Override, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (, other]
[), ;, }, }, @, Override, ConcreteType, intersectWith, (, ConcreteType, other, ), {, if, (, other, ., isSingleton, (, )]
[), {, if, (, alternatives, ., contains, (, other, ), ), {, return, other, ;, }, else, {, return, NONE]
[., isSingleton, (, ), ), {, if, (, alternatives, ., contains, (, other, ), ), {, return, other, ;, }]
[), {, return, other, ;, }, else, {, return, NONE, ;, }, }, else, if, (, other, ., isUnion, (]
[., contains, (, other, ), ), {, return, other, ;, }, else, {, return, NONE, ;, }, }, else, if]
[), ), {, return, other, ;, }, else, {, return, NONE, ;, }, }, else, if, (, other, ., isUnion]
[;, }, else, {, return, NONE, ;, }, }, else, if, (, other, ., isUnion, (, ), ), {, Set]
[;, }, }, else, if, (, other, ., isUnion, (, ), ), {, Set, <, ConcreteType, >, types, =, Sets]
[), {, Set, <, ConcreteType, >, types, =, Sets, ., newHashSet, (, alternatives, ), ;, types, ., retainAll, (, other]
[., isUnion, (, ), ), {, Set, <, ConcreteType, >, types, =, Sets, ., newHashSet, (, alternatives, ), ;, types]
[;, types, ., retainAll, (, other, ., toUnion, (, ), ., alternatives, ), ;, return, createForTypes, (, types, ), ;]
[., newHashSet, (, alternatives, ), ;, types, ., retainAll, (, other, ., toUnion, (, ), ., alternatives, ), ;, return]
[), ;, types, ., retainAll, (, other, ., toUnion, (, ), ., alternatives, ), ;, return, createForTypes, (, types, )]
[;, return, createForTypes, (, types, ), ;, }, else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, ), ||]
[., retainAll, (, other, ., toUnion, (, ), ., alternatives, ), ;, return, createForTypes, (, types, ), ;, }, else]
[), ;, return, createForTypes, (, types, ), ;, }, else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, )]
[., alternatives, ), ;, return, createForTypes, (, types, ), ;, }, else, {, Preconditions, ., checkArgument, (, other, ., isNone]
[., toUnion, (, ), ., alternatives, ), ;, return, createForTypes, (, types, ), ;, }, else, {, Preconditions, ., checkArgument]
[;, }, else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, ), ||, other, ., isAll, (, ), )]
[), ;, }, else, {, Preconditions, ., checkArgument, (, other, ., isNone, (, ), ||, other, ., isAll, (, )]
[;, return, other, ., intersectWith, (, this, ), ;, }, }, Set, <, ConcreteType, >, getAlternatives, (, ), {, return]
[., checkArgument, (, other, ., isNone, (, ), ||, other, ., isAll, (, ), ), ;, return, other, ., intersectWith]
[), ;, return, other, ., intersectWith, (, this, ), ;, }, }, Set, <, ConcreteType, >, getAlternatives, (, ), {]
[||, other, ., isAll, (, ), ), ;, return, other, ., intersectWith, (, this, ), ;, }, }, Set, <]
[., isNone, (, ), ||, other, ., isAll, (, ), ), ;, return, other, ., intersectWith, (, this, ), ;]
[), ;, return, other, ., intersectWith, (, this, ), ;, }, }, Set, <, ConcreteType, >, getAlternatives, (, ), {]
[., isAll, (, ), ), ;, return, other, ., intersectWith, (, this, ), ;, }, }, Set, <, ConcreteType, >]
[;, }, }, Set, <, ConcreteType, >, getAlternatives, (, ), {, return, alternatives, ;, }, @, Override, public, boolean, equals]
[., intersectWith, (, this, ), ;, }, }, Set, <, ConcreteType, >, getAlternatives, (, ), {, return, alternatives, ;, }]
[), ;, }, }, Set, <, ConcreteType, >, getAlternatives, (, ), {, return, alternatives, ;, }, @, Override, public, boolean]
[;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, return, (, obj, instanceof, ConcreteUnionType, ), &&, alternatives]
[;, }, @, Override, public, int, hashCode, (, ), {, return, alternatives, ., hashCode, (, ), ^, 0x5f6e7d8c, ;, }]
[&&, alternatives, ., equals, (, (, (, ConcreteUnionType, ), obj, ), ., alternatives, ), ;, }, @, Override, public, int]
[), &&, alternatives, ., equals, (, (, (, ConcreteUnionType, ), obj, ), ., alternatives, ), ;, }, @, Override, public]
[instanceof, ConcreteUnionType, ), &&, alternatives, ., equals, (, (, (, ConcreteUnionType, ), obj, ), ., alternatives, ), ;, }, @]
[;, }, @, Override, public, int, hashCode, (, ), {, return, alternatives, ., hashCode, (, ), ^, 0x5f6e7d8c, ;, }]
[., equals, (, (, (, ConcreteUnionType, ), obj, ), ., alternatives, ), ;, }, @, Override, public, int, hashCode, (]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, alternatives, ., hashCode, (, ), ^, 0x5f6e7d8c, ;]
[., alternatives, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, alternatives, ., hashCode, (, ), ^]
[), ., alternatives, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, alternatives, ., hashCode, (, )]
[), ., alternatives, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, alternatives, ., hashCode, (, )]
[;, }, @, Override, public, String, toString, (, ), {, List, <, String, >, names, =, Lists, ., newArrayList, (]
[^, 0x5f6e7d8c, ;, }, @, Override, public, String, toString, (, ), {, List, <, String, >, names, =, Lists, .]
[., hashCode, (, ), ^, 0x5f6e7d8c, ;, }, @, Override, public, String, toString, (, ), {, List, <, String, >]
[;, }, @, Override, public, String, toString, (, ), {, List, <, String, >, names, =, Lists, ., newArrayList, (]
[;, for, (, ConcreteType, type, :, alternatives, ), {, names, ., add, (, type, ., toString, (, ), ), ;]
[., newArrayList, (, ), ;, for, (, ConcreteType, type, :, alternatives, ), {, names, ., add, (, type, ., toString]
[), {, names, ., add, (, type, ., toString, (, ), ), ;, }, Collections, ., sort, (, names, )]
[;, }, Collections, ., sort, (, names, ), ;, return, "(", +, Joiner, ., on, (, ",", ), ., join]
[., add, (, type, ., toString, (, ), ), ;, }, Collections, ., sort, (, names, ), ;, return, "("]
[), ;, }, Collections, ., sort, (, names, ), ;, return, "(", +, Joiner, ., on, (, ",", ), .]
[., toString, (, ), ), ;, }, Collections, ., sort, (, names, ), ;, return, "(", +, Joiner, ., on]
[;, return, "(", +, Joiner, ., on, (, ",", ), ., join, (, names, ), +, ")", ;, }, }]
[., sort, (, names, ), ;, return, "(", +, Joiner, ., on, (, ",", ), ., join, (, names, )]
[), ;, return, "(", +, Joiner, ., on, (, ",", ), ., join, (, names, ), +, ")", ;, }]
[;, }, }, private, static, class, ConcreteAll, extends, ConcreteType, {, @, Override, boolean, isAll, (, ), {, return, true, ;]
[+, ")", ;, }, }, private, static, class, ConcreteAll, extends, ConcreteType, {, @, Override, boolean, isAll, (, ), {, return]
[+, Joiner, ., on, (, ",", ), ., join, (, names, ), +, ")", ;, }, }, private, static, class]
[+, ")", ;, }, }, private, static, class, ConcreteAll, extends, ConcreteType, {, @, Override, boolean, isAll, (, ), {, return]
[., join, (, names, ), +, ")", ;, }, }, private, static, class, ConcreteAll, extends, ConcreteType, {, @, Override, boolean]
[., on, (, ",", ), ., join, (, names, ), +, ")", ;, }, }, private, static, class, ConcreteAll, extends]
[), ., join, (, names, ), +, ")", ;, }, }, private, static, class, ConcreteAll, extends, ConcreteType, {, @, Override]
[), +, ")", ;, }, }, private, static, class, ConcreteAll, extends, ConcreteType, {, @, Override, boolean, isAll, (, ), {]
[;, }, }, private, static, class, ConcreteAll, extends, ConcreteType, {, @, Override, boolean, isAll, (, ), {, return, true, ;]
[;, }, @, Override, ConcreteType, unionWith, (, ConcreteType, other, ), {, return, this, ;, }, @, Override, ConcreteType, intersectWith, (]
[;, }, @, Override, ConcreteType, intersectWith, (, ConcreteType, other, ), {, return, other, ;, }, @, Override, public, String, toString]
[;, }, @, Override, public, String, toString, (, ), {, return, "*", ;, }, }, static, class, ConcreteUniqueType, extends, ConcreteType]
[;, }, }, static, class, ConcreteUniqueType, extends, ConcreteType, {, private, final, int, id, ;, ConcreteUniqueType, (, int, id, ), {]
[=, id, ;, Preconditions, ., checkArgument, (, id, >=, 0, ), ;, }, @, Override, public, boolean, equals, (, Object]
[., id, =, id, ;, Preconditions, ., checkArgument, (, id, >=, 0, ), ;, }, @, Override, public, boolean, equals]
[;, Preconditions, ., checkArgument, (, id, >=, 0, ), ;, }, @, Override, public, boolean, equals, (, Object, o, )]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, (, o, instanceof, ConcreteUniqueType, ), &&, (]
[., checkArgument, (, id, >=, 0, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, (, o, instanceof, ConcreteUniqueType, ), &&]
[>=, 0, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, (, o, instanceof, ConcreteUniqueType]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, (, o, instanceof, ConcreteUniqueType, ), &&]
[;, }, @, Override, public, int, hashCode, (, ), {, return, ConcreteUniqueType, ., class, ., hashCode, (, ), ^, id]
[&&, (, id, ==, (, (, ConcreteUniqueType, ), o, ), ., id, ), ;, }, @, Override, public, int, hashCode]
[), &&, (, id, ==, (, (, ConcreteUniqueType, ), o, ), ., id, ), ;, }, @, Override, public, int]
[instanceof, ConcreteUniqueType, ), &&, (, id, ==, (, (, ConcreteUniqueType, ), o, ), ., id, ), ;, }, @, Override]
[;, }, @, Override, public, int, hashCode, (, ), {, return, ConcreteUniqueType, ., class, ., hashCode, (, ), ^, id]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, ConcreteUniqueType, ., class, ., hashCode, (, ), ^]
[==, (, (, ConcreteUniqueType, ), o, ), ., id, ), ;, }, @, Override, public, int, hashCode, (, ), {]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, ConcreteUniqueType, ., class, ., hashCode, (, ), ^]
[., id, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, ConcreteUniqueType, ., class, ., hashCode, (]
[), ., id, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, ConcreteUniqueType, ., class, ., hashCode]
[), ., id, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, ConcreteUniqueType, ., class, ., hashCode]
[;, }, @, Override, public, String, toString, (, ), {, return, "Unique$", +, id, ;, }, }, interface, Factory, {]
[^, id, ;, }, @, Override, public, String, toString, (, ), {, return, "Unique$", +, id, ;, }, }, interface]
[., hashCode, (, ), ^, id, ;, }, @, Override, public, String, toString, (, ), {, return, "Unique$", +, id]
[;, }, @, Override, public, String, toString, (, ), {, return, "Unique$", +, id, ;, }, }, interface, Factory, {]
[;, }, }, interface, Factory, {, ConcreteFunctionType, createConcreteFunction, (, Node, declaration, ,, StaticScope, <, ConcreteType, >, parent, ), ;, ConcreteInstanceType]
[+, id, ;, }, }, interface, Factory, {, ConcreteFunctionType, createConcreteFunction, (, Node, declaration, ,, StaticScope, <, ConcreteType, >, parent, )]
[;, }, }, interface, Factory, {, ConcreteFunctionType, createConcreteFunction, (, Node, declaration, ,, StaticScope, <, ConcreteType, >, parent, ), ;, ConcreteInstanceType]
