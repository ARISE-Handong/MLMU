[., util, ., MathUtils, ;, public, class, Vector1D, implements, Vector, <, Euclidean1D, >, {, public, static, final, Vector1D, ZERO, =]
[MathUtils, ;, public, class, Vector1D, implements, Vector, <, Euclidean1D, >, {, public, static, final, Vector1D, ZERO, =, new, Vector1D, (]
[>, {, public, static, final, Vector1D, ZERO, =, new, Vector1D, (, 0.0, ), ;, public, static, final, Vector1D, ONE, =]
[static, final, Vector1D, ZERO, =, new, Vector1D, (, 0.0, ), ;, public, static, final, Vector1D, ONE, =, new, Vector1D, (]
[), ;, public, static, final, Vector1D, ONE, =, new, Vector1D, (, 1.0, ), ;, public, static, final, Vector1D, NaN, =]
[static, final, Vector1D, ONE, =, new, Vector1D, (, 1.0, ), ;, public, static, final, Vector1D, NaN, =, new, Vector1D, (]
[static, final, Vector1D, ONE, =, new, Vector1D, (, 1.0, ), ;, public, static, final, Vector1D, NaN, =, new, Vector1D, (]
[public, static, final, Vector1D, NaN, =, new, Vector1D, (, Double, ., NaN, ), ;, public, static, final, Vector1D, POSITIVE_INFINITY, =]
[Vector1D, NaN, =, new, Vector1D, (, Double, ., NaN, ), ;, public, static, final, Vector1D, POSITIVE_INFINITY, =, new, Vector1D, (]
[Vector1D, NaN, =, new, Vector1D, (, Double, ., NaN, ), ;, public, static, final, Vector1D, POSITIVE_INFINITY, =, new, Vector1D, (]
[public, static, final, Vector1D, POSITIVE_INFINITY, =, new, Vector1D, (, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector1D, NEGATIVE_INFINITY, =]
[Vector1D, POSITIVE_INFINITY, =, new, Vector1D, (, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector1D, NEGATIVE_INFINITY, =, new, Vector1D, (]
[Vector1D, POSITIVE_INFINITY, =, new, Vector1D, (, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector1D, NEGATIVE_INFINITY, =, new, Vector1D, (]
[public, static, final, Vector1D, NEGATIVE_INFINITY, =, new, Vector1D, (, Double, ., NEGATIVE_INFINITY, ), ;, private, static, final, long, serialVersionUID, =]
[private, static, final, long, serialVersionUID, =, 7556674948671647925L, ;, private, final, double, x, ;, public, Vector1D, (, double, x, ), {]
[private, static, final, long, serialVersionUID, =, 7556674948671647925L, ;, private, final, double, x, ;, public, Vector1D, (, double, x, ), {]
[serialVersionUID, =, 7556674948671647925L, ;, private, final, double, x, ;, public, Vector1D, (, double, x, ), {, this, ., x, =]
[x, ), {, this, ., x, =, x, ;, }, public, Vector1D, (, double, a, ,, Vector1D, u, ), {]
[x, ), {, this, ., x, =, x, ;, }, public, Vector1D, (, double, a, ,, Vector1D, u, ), {]
[., x, =, x, ;, }, public, Vector1D, (, double, a, ,, Vector1D, u, ), {, this, ., x, =]
[., x, =, x, ;, }, public, Vector1D, (, double, a, ,, Vector1D, u, ), {, this, ., x, =]
[=, x, ;, }, public, Vector1D, (, double, a, ,, Vector1D, u, ), {, this, ., x, =, a, *]
[=, x, ;, }, public, Vector1D, (, double, a, ,, Vector1D, u, ), {, this, ., x, =, a, *]
[., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ), {]
[., x, ;, }, public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ), {]
[public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ), {, this, ., x, =]
[public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ), {, this, ., x, =]
[public, Vector1D, (, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ), {, this, ., x, =]
[(, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ), {, this, ., x, =, a1, *]
[(, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ), {, this, ., x, =, a1, *]
[Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ), {, this, ., x, =, a1, *, u1, ., x, +]
[Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ), {, this, ., x, =, a1, *, u1, ., x, +]
[,, double, a2, ,, Vector1D, u2, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *]
[,, double, a2, ,, Vector1D, u2, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *]
[(, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ), {]
[(, double, a1, ,, Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ), {]
[Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ), {, this, ., x, =]
[Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ), {, this, ., x, =]
[Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ), {, this, ., x, =]
[Vector1D, u1, ,, double, a2, ,, Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ), {, this, ., x, =]
[,, double, a2, ,, Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ), {, this, ., x, =, a1, *]
[,, double, a2, ,, Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ), {, this, ., x, =, a1, *]
[Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ), {, this, ., x, =, a1, *, u1, ., x, +]
[Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ), {, this, ., x, =, a1, *, u1, ., x, +]
[,, double, a3, ,, Vector1D, u3, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *]
[,, double, a3, ,, Vector1D, u3, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *]
[Vector1D, u3, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +]
[Vector1D, u3, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +]
[), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *]
[), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *]
[,, double, a2, ,, Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ,, double, a4, ,, Vector1D, u4, ), {]
[,, double, a2, ,, Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ,, double, a4, ,, Vector1D, u4, ), {]
[Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ,, double, a4, ,, Vector1D, u4, ), {, this, ., x, =]
[Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ,, double, a4, ,, Vector1D, u4, ), {, this, ., x, =]
[Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ,, double, a4, ,, Vector1D, u4, ), {, this, ., x, =]
[Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ,, double, a4, ,, Vector1D, u4, ), {, this, ., x, =]
[Vector1D, u2, ,, double, a3, ,, Vector1D, u3, ,, double, a4, ,, Vector1D, u4, ), {, this, ., x, =]
[,, double, a3, ,, Vector1D, u3, ,, double, a4, ,, Vector1D, u4, ), {, this, ., x, =, a1, *]
[,, double, a3, ,, Vector1D, u3, ,, double, a4, ,, Vector1D, u4, ), {, this, ., x, =, a1, *]
[Vector1D, u3, ,, double, a4, ,, Vector1D, u4, ), {, this, ., x, =, a1, *, u1, ., x, +]
[Vector1D, u3, ,, double, a4, ,, Vector1D, u4, ), {, this, ., x, =, a1, *, u1, ., x, +]
[,, double, a4, ,, Vector1D, u4, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *]
[,, double, a4, ,, Vector1D, u4, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *]
[Vector1D, u4, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +]
[Vector1D, u4, ), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +]
[), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *]
[), {, this, ., x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *]
[x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +]
[x, =, a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +]
[a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *]
[a1, *, u1, ., x, +, a2, *, u2, ., x, +, a3, *, u3, ., x, +, a4, *]
[a3, *, u3, ., x, +, a4, *, u4, ., x, ;, }, public, double, getX, (, ), {, return]
[x, ;, }, public, double, getX, (, ), {, return, x, ;, }, public, Space, getSpace, (, ), {, return]
[x, ;, }, public, double, getX, (, ), {, return, x, ;, }, public, Space, getSpace, (, ), {, return]
[Space, getSpace, (, ), {, return, Euclidean1D, ., getInstance, (, ), ;, }, public, Vector1D, getZero, (, ), {, return]
[), ;, }, public, Vector1D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return]
[), ;, }, public, Vector1D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return]
[Vector1D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return, FastMath, ., abs, (]
[getNorm1, (, ), {, return, FastMath, ., abs, (, x, ), ;, }, public, double, getNorm, (, ), {, return]
[getNorm1, (, ), {, return, FastMath, ., abs, (, x, ), ;, }, public, double, getNorm, (, ), {, return]
[return, FastMath, ., abs, (, x, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., abs, (]
[getNorm, (, ), {, return, FastMath, ., abs, (, x, ), ;, }, public, double, getNormSq, (, ), {, return]
[getNorm, (, ), {, return, FastMath, ., abs, (, x, ), ;, }, public, double, getNormSq, (, ), {, return]
[), {, return, FastMath, ., abs, (, x, ), ;, }, public, double, getNormSq, (, ), {, return, x, *]
[}, public, double, getNormSq, (, ), {, return, x, *, x, ;, }, public, double, getNormInf, (, ), {, return]
[}, public, double, getNormSq, (, ), {, return, x, *, x, ;, }, public, double, getNormInf, (, ), {, return]
[(, ), {, return, x, *, x, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., abs, (]
[abs, (, x, ), ;, }, public, Vector1D, add, (, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =]
[), ;, }, public, Vector1D, add, (, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, )]
[public, Vector1D, add, (, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return]
[(, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (]
[(, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (]
[<, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (, x, +]
[<, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (, x, +]
[), ;, }, public, Vector1D, add, (, double, factor, ,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =]
[public, Vector1D, add, (, double, factor, ,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, )]
[(, double, factor, ,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return]
[,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (]
[,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (]
[<, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (, x, +]
[<, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (, x, +]
[>, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (, x, +, factor, *]
[>, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (, x, +, factor, *]
[getX, (, ), ), ;, }, public, Vector1D, subtract, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =]
[), ;, }, public, Vector1D, subtract, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, )]
[public, Vector1D, subtract, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, return]
[(, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, return, new, Vector1D, (]
[(, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, return, new, Vector1D, (]
[<, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, return, new, Vector1D, (, x, -]
[<, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, return, new, Vector1D, (, x, -]
[), ;, }, public, Vector1D, subtract, (, double, factor, ,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =]
[public, Vector1D, subtract, (, double, factor, ,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, )]
[(, double, factor, ,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return]
[,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (]
[,, Vector, <, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (]
[<, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (, x, -]
[<, Euclidean1D, >, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (, x, -]
[>, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (, x, -, factor, *]
[>, v, ), {, Vector1D, v1, =, (, Vector1D, ), v, ;, return, new, Vector1D, (, x, -, factor, *]
[*, v1, ., getX, (, ), ), ;, }, public, Vector1D, normalize, (, ), throws, MathArithmeticException, {, double, s, =]
[), ;, }, public, Vector1D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[), ;, }, public, Vector1D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[}, public, Vector1D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s, ==]
[(, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s, ==, 0, ), {, throw]
[MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (]
[MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (]
[), ;, if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return]
[if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (]
[if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (]
[s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /]
[CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector1D, negate, (, ), {, return]
[}, return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector1D, negate, (, ), {, return, new, Vector1D, (]
[return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector1D, negate, (, ), {, return, new, Vector1D, (, -]
[), {, return, new, Vector1D, (, -, x, ), ;, }, public, Vector1D, scalarMultiply, (, double, a, ), {, return]
[new, Vector1D, (, -, x, ), ;, }, public, Vector1D, scalarMultiply, (, double, a, ), {, return, new, Vector1D, (]
[new, Vector1D, (, -, x, ), ;, }, public, Vector1D, scalarMultiply, (, double, a, ), {, return, new, Vector1D, (]
[(, -, x, ), ;, }, public, Vector1D, scalarMultiply, (, double, a, ), {, return, new, Vector1D, (, a, *]
[a, ), {, return, new, Vector1D, (, a, *, x, ), ;, }, public, boolean, isNaN, (, ), {, return]
[a, ), {, return, new, Vector1D, (, a, *, x, ), ;, }, public, boolean, isNaN, (, ), {, return]
[new, Vector1D, (, a, *, x, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (]
[isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ;, }, public, boolean, isInfinite, (, ), {, return]
[isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ;, }, public, boolean, isInfinite, (, ), {, return]
[(, ), {, return, Double, ., isNaN, (, x, ), ;, }, public, boolean, isInfinite, (, ), {, return, !]
[Double, ., isNaN, (, x, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&]
[Double, ., isNaN, (, x, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&]
[x, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, Double, ., isInfinite, (]
[isInfinite, (, x, ), ;, }, public, double, distance1, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =]
[), ;, }, public, double, distance1, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, )]
[(, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =]
[(, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =]
[>, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, FastMath, ., abs, (]
[>, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, FastMath, ., abs, (]
[>, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, FastMath, ., abs, (]
[Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -]
[Vector1D, ), p, ;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, return]
[), ;, return, dx, ;, }, public, double, distance, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =]
[dx, ;, }, public, double, distance, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, )]
[(, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =]
[(, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =]
[(, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =]
[>, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, p3, ., x, -]
[{, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, p3, ., x, -, x, ;, return]
[{, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, p3, ., x, -, x, ;, return]
[(, Vector1D, ), p, ;, final, double, dx, =, p3, ., x, -, x, ;, return, FastMath, ., abs, (]
[abs, (, dx, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =]
[), ;, }, public, double, distanceInf, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, )]
[(, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =]
[(, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =]
[>, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, FastMath, ., abs, (]
[>, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, FastMath, ., abs, (]
[>, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, FastMath, ., abs, (]
[Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -]
[Vector1D, ), p, ;, final, double, dx, =, FastMath, ., abs, (, p3, ., x, -, x, ), ;, return]
[), ;, return, dx, ;, }, public, double, distanceSq, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =]
[dx, ;, }, public, double, distanceSq, (, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, )]
[(, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =]
[(, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =]
[(, Vector, <, Euclidean1D, >, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =]
[>, p, ), {, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, p3, ., x, -]
[{, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, p3, ., x, -, x, ;, return]
[{, Vector1D, p3, =, (, Vector1D, ), p, ;, final, double, dx, =, p3, ., x, -, x, ;, return]
[p3, =, (, Vector1D, ), p, ;, final, double, dx, =, p3, ., x, -, x, ;, return, dx, *]
[*, dx, ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean1D, >, v, ), {, final, Vector1D, v1, =]
[}, public, double, dotProduct, (, final, Vector, <, Euclidean1D, >, v, ), {, final, Vector1D, v1, =, (, Vector1D, )]
[dotProduct, (, final, Vector, <, Euclidean1D, >, v, ), {, final, Vector1D, v1, =, (, Vector1D, ), v, ;, return]
[dotProduct, (, final, Vector, <, Euclidean1D, >, v, ), {, final, Vector1D, v1, =, (, Vector1D, ), v, ;, return]
[final, Vector, <, Euclidean1D, >, v, ), {, final, Vector1D, v1, =, (, Vector1D, ), v, ;, return, x, *]
[final, Vector, <, Euclidean1D, >, v, ), {, final, Vector1D, v1, =, (, Vector1D, ), v, ;, return, x, *]
[x, *, v1, ., x, ;, }, public, static, double, distance, (, Vector1D, p1, ,, Vector1D, p2, ), {, return]
[x, *, v1, ., x, ;, }, public, static, double, distance, (, Vector1D, p1, ,, Vector1D, p2, ), {, return]
[x, ;, }, public, static, double, distance, (, Vector1D, p1, ,, Vector1D, p2, ), {, return, p1, ., distance, (]
[., distance, (, p2, ), ;, }, public, static, double, distanceInf, (, Vector1D, p1, ,, Vector1D, p2, ), {, return]
[., distance, (, p2, ), ;, }, public, static, double, distanceInf, (, Vector1D, p1, ,, Vector1D, p2, ), {, return]
[), ;, }, public, static, double, distanceInf, (, Vector1D, p1, ,, Vector1D, p2, ), {, return, p1, ., distanceInf, (]
[., distanceInf, (, p2, ), ;, }, public, static, double, distanceSq, (, Vector1D, p1, ,, Vector1D, p2, ), {, return]
[., distanceInf, (, p2, ), ;, }, public, static, double, distanceSq, (, Vector1D, p1, ,, Vector1D, p2, ), {, return]
[), ;, }, public, static, double, distanceSq, (, Vector1D, p1, ,, Vector1D, p2, ), {, return, p1, ., distanceSq, (]
[p1, ., distanceSq, (, p2, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[p1, ., distanceSq, (, p2, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[distanceSq, (, p2, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[this, ==, other, ), {, return, true, ;, }, if, (, other, instanceof, Vector1D, ), {, final, Vector1D, rhs, =]
[), {, return, true, ;, }, if, (, other, instanceof, Vector1D, ), {, final, Vector1D, rhs, =, (, Vector1D, )]
[;, }, if, (, other, instanceof, Vector1D, ), {, final, Vector1D, rhs, =, (, Vector1D, ), other, ;, if, (]
[;, }, if, (, other, instanceof, Vector1D, ), {, final, Vector1D, rhs, =, (, Vector1D, ), other, ;, if, (]
[{, final, Vector1D, rhs, =, (, Vector1D, ), other, ;, if, (, rhs, ., isNaN, (, ), ), {, return]
[{, final, Vector1D, rhs, =, (, Vector1D, ), other, ;, if, (, rhs, ., isNaN, (, ), ), {, return]
[other, ;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return]
[other, ;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return]
[if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, x, ==]
[if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, x, ==]
[), ), {, return, this, ., isNaN, (, ), ;, }, return, x, ==, rhs, ., x, ;, }, return]
[==, rhs, ., x, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (]
[return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return]
[@, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 7785, ;, }, return]
[@, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 7785, ;, }, return]
[public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 7785, ;, }, return, 997, *]
[public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 7785, ;, }, return, 997, *]
[), {, if, (, isNaN, (, ), ), {, return, 7785, ;, }, return, 997, *, MathUtils, ., hash, (]
[return, 997, *, MathUtils, ., hash, (, x, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[return, 997, *, MathUtils, ., hash, (, x, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[return, 997, *, MathUtils, ., hash, (, x, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[), ;, }, @, Override, public, String, toString, (, ), {, return, Vector1DFormat, ., getInstance, (, ), ., format, (]
[getInstance, (, ), ., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return]
[getInstance, (, ), ., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return]
[., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector1DFormat, (]
[;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector1DFormat, (, format, ), ., format, (]
