[;, private, static, final, long, serialVersionUID, =, -, 38038050983108802L, ;, @, Deprecated, protected, RandomDataImpl, randomData, =, new, RandomDataImpl, (, )]
[;, @, Deprecated, protected, RandomDataImpl, randomData, =, new, RandomDataImpl, (, ), ;, protected, final, RandomGenerator, random, ;, private, double, solverAbsoluteAccuracy]
[;, @, Deprecated, protected, RandomDataImpl, randomData, =, new, RandomDataImpl, (, ), ;, protected, final, RandomGenerator, random, ;, private, double, solverAbsoluteAccuracy]
[;, protected, final, RandomGenerator, random, ;, private, double, solverAbsoluteAccuracy, =, SOLVER_DEFAULT_ABSOLUTE_ACCURACY, ;, @, Deprecated, protected, AbstractRealDistribution, (, ), {, random]
[;, @, Deprecated, protected, AbstractRealDistribution, (, ), {, random, =, null, ;, }, protected, AbstractRealDistribution, (, RandomGenerator, rng, ), {]
[=, null, ;, }, protected, AbstractRealDistribution, (, RandomGenerator, rng, ), {, random, =, rng, ;, }, @, Deprecated, public, double]
[;, }, protected, AbstractRealDistribution, (, RandomGenerator, rng, ), {, random, =, rng, ;, }, @, Deprecated, public, double, cumulativeProbability, (]
[=, rng, ;, }, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return]
[;, }, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return, probability, (]
[;, }, public, double, probability, (, double, x0, ,, double, x1, ), {, if, (, x0, >, x1, ), {]
[,, x1, ), ;, }, public, double, probability, (, double, x0, ,, double, x1, ), {, if, (, x0, >]
[), ;, }, public, double, probability, (, double, x0, ,, double, x1, ), {, if, (, x0, >, x1, )]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability]
[>, x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability]
[;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (, x0, ), ;, }, public, double, inverseCumulativeProbability, (, final, double]
[,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (, x0, ), ;]
[., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (, x0]
[,, x1, ,, true, ), ;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (, x0, ), ;, }, public]
[,, true, ), ;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (, x0, ), ;, }, public, double, inverseCumulativeProbability]
[), ;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (, x0, ), ;, }, public, double, inverseCumulativeProbability, (, final]
[;, }, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p]
[-, cumulativeProbability, (, x0, ), ;, }, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[), -, cumulativeProbability, (, x0, ), ;, }, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if]
[;, }, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p]
[), ;, }, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, double, lowerBound, =, getSupportLowerBound, (, )]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, double, lowerBound]
[<, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, double, lowerBound]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, double, lowerBound, =, getSupportLowerBound, (, )]
[>, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, double, lowerBound, =, getSupportLowerBound]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, double, lowerBound, =, getSupportLowerBound, (, )]
[;, }, double, lowerBound, =, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, ), {, return, lowerBound, ;, }]
[,, 0, ,, 1, ), ;, }, double, lowerBound, =, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, )]
[,, 1, ), ;, }, double, lowerBound, =, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, ), {, return]
[), ;, }, double, lowerBound, =, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, ), {, return, lowerBound, ;]
[;, if, (, p, ==, 0.0, ), {, return, lowerBound, ;, }, double, upperBound, =, getSupportUpperBound, (, ), ;, if]
[), {, return, lowerBound, ;, }, double, upperBound, =, getSupportUpperBound, (, ), ;, if, (, p, ==, 1.0, ), {]
[==, 0.0, ), {, return, lowerBound, ;, }, double, upperBound, =, getSupportUpperBound, (, ), ;, if, (, p, ==, 1.0]
[), {, return, lowerBound, ;, }, double, upperBound, =, getSupportUpperBound, (, ), ;, if, (, p, ==, 1.0, ), {]
[;, }, double, upperBound, =, getSupportUpperBound, (, ), ;, if, (, p, ==, 1.0, ), {, return, upperBound, ;, }]
[;, if, (, p, ==, 1.0, ), {, return, upperBound, ;, }, final, double, mu, =, getNumericalMean, (, ), ;]
[), {, return, upperBound, ;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sig, =, FastMath, .]
[==, 1.0, ), {, return, upperBound, ;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sig, =]
[), {, return, upperBound, ;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sig, =, FastMath, .]
[;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sig, =, FastMath, ., sqrt, (, getNumericalVariance, (]
[;, final, double, sig, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =]
[;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||, Double, ., isNaN, (]
[., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =, !, (, Double, ., isInfinite, (]
[), ;, final, boolean, chebyshevApplies, ;, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||, Double, ., isNaN]
[=, !, (, Double, ., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite]
[;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -, sig]
[;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -, sig]
[), ;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -]
[||, Double, ., isNaN, (, sig, ), ), ;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[||, Double, ., isInfinite, (, sig, ), ||, Double, ., isNaN, (, sig, ), ), ;, if, (, lowerBound, ==]
[||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sig, ), ||, Double, ., isNaN, (, sig]
[., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sig, ), ||]
[), ||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sig, ), ||, Double, ., isNaN, (]
[||, Double, ., isInfinite, (, sig, ), ||, Double, ., isNaN, (, sig, ), ), ;, if, (, lowerBound, ==]
[., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sig, ), ||, Double, ., isNaN, (, sig, ), )]
[), ||, Double, ., isInfinite, (, sig, ), ||, Double, ., isNaN, (, sig, ), ), ;, if, (, lowerBound]
[||, Double, ., isNaN, (, sig, ), ), ;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[., isInfinite, (, sig, ), ||, Double, ., isNaN, (, sig, ), ), ;, if, (, lowerBound, ==, Double, .]
[), ||, Double, ., isNaN, (, sig, ), ), ;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if]
[), ;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -]
[., isNaN, (, sig, ), ), ;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, )]
[), ), ;, if, (, lowerBound, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu]
[), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -, sig, *, FastMath, ., sqrt, (, (, 1., -]
[==, Double, ., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -, sig, *, FastMath, ., sqrt]
[), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -, sig, *, FastMath, ., sqrt, (, (, 1., -]
[., NEGATIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, lowerBound, =, mu, -, sig, *, FastMath, ., sqrt, (, (]
[), {, lowerBound, =, mu, -, sig, *, FastMath, ., sqrt, (, (, 1., -, p, ), /, p, )]
[=, mu, -, sig, *, FastMath, ., sqrt, (, (, 1., -, p, ), /, p, ), ;, }, else]
[;, }, else, {, lowerBound, =, -, 1.0, ;, while, (, cumulativeProbability, (, lowerBound, ), >=, p, ), {, lowerBound]
[-, sig, *, FastMath, ., sqrt, (, (, 1., -, p, ), /, p, ), ;, }, else, {, lowerBound]
[;, }, else, {, lowerBound, =, -, 1.0, ;, while, (, cumulativeProbability, (, lowerBound, ), >=, p, ), {, lowerBound]
[*, FastMath, ., sqrt, (, (, 1., -, p, ), /, p, ), ;, }, else, {, lowerBound, =, -]
[;, }, else, {, lowerBound, =, -, 1.0, ;, while, (, cumulativeProbability, (, lowerBound, ), >=, p, ), {, lowerBound]
[., sqrt, (, (, 1., -, p, ), /, p, ), ;, }, else, {, lowerBound, =, -, 1.0, ;]
[), ;, }, else, {, lowerBound, =, -, 1.0, ;, while, (, cumulativeProbability, (, lowerBound, ), >=, p, ), {]
[/, p, ), ;, }, else, {, lowerBound, =, -, 1.0, ;, while, (, cumulativeProbability, (, lowerBound, ), >=, p]
[), /, p, ), ;, }, else, {, lowerBound, =, -, 1.0, ;, while, (, cumulativeProbability, (, lowerBound, ), >=]
[-, p, ), /, p, ), ;, }, else, {, lowerBound, =, -, 1.0, ;, while, (, cumulativeProbability, (, lowerBound]
[), /, p, ), ;, }, else, {, lowerBound, =, -, 1.0, ;, while, (, cumulativeProbability, (, lowerBound, ), >=]
[), ;, }, else, {, lowerBound, =, -, 1.0, ;, while, (, cumulativeProbability, (, lowerBound, ), >=, p, ), {]
[=, -, 1.0, ;, while, (, cumulativeProbability, (, lowerBound, ), >=, p, ), {, lowerBound, *=, 2.0, ;, }, }]
[;, while, (, cumulativeProbability, (, lowerBound, ), >=, p, ), {, lowerBound, *=, 2.0, ;, }, }, }, if, (]
[;, while, (, cumulativeProbability, (, lowerBound, ), >=, p, ), {, lowerBound, *=, 2.0, ;, }, }, }, if, (]
[), {, lowerBound, *=, 2.0, ;, }, }, }, if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[>=, p, ), {, lowerBound, *=, 2.0, ;, }, }, }, if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, ), {]
[), >=, p, ), {, lowerBound, *=, 2.0, ;, }, }, }, if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, )]
[), {, lowerBound, *=, 2.0, ;, }, }, }, if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, ), {, if, (]
[*=, 2.0, ;, }, }, }, if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {]
[;, }, }, }, if, (, upperBound, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, upperBound, =]
[), {, if, (, chebyshevApplies, ), {, upperBound, =, mu, +, sig, *, FastMath, ., sqrt, (, p, /, (]
[==, Double, ., POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, upperBound, =, mu, +, sig, *, FastMath, ., sqrt]
[), {, if, (, chebyshevApplies, ), {, upperBound, =, mu, +, sig, *, FastMath, ., sqrt, (, p, /, (]
[., POSITIVE_INFINITY, ), {, if, (, chebyshevApplies, ), {, upperBound, =, mu, +, sig, *, FastMath, ., sqrt, (, p]
[), {, upperBound, =, mu, +, sig, *, FastMath, ., sqrt, (, p, /, (, 1., -, p, ), )]
[=, mu, +, sig, *, FastMath, ., sqrt, (, p, /, (, 1., -, p, ), ), ;, }, else]
[;, }, else, {, upperBound, =, 1.0, ;, while, (, cumulativeProbability, (, upperBound, ), <, p, ), {, upperBound, *=]
[+, sig, *, FastMath, ., sqrt, (, p, /, (, 1., -, p, ), ), ;, }, else, {, upperBound]
[;, }, else, {, upperBound, =, 1.0, ;, while, (, cumulativeProbability, (, upperBound, ), <, p, ), {, upperBound, *=]
[*, FastMath, ., sqrt, (, p, /, (, 1., -, p, ), ), ;, }, else, {, upperBound, =, 1.0]
[;, }, else, {, upperBound, =, 1.0, ;, while, (, cumulativeProbability, (, upperBound, ), <, p, ), {, upperBound, *=]
[., sqrt, (, p, /, (, 1., -, p, ), ), ;, }, else, {, upperBound, =, 1.0, ;, while]
[), ;, }, else, {, upperBound, =, 1.0, ;, while, (, cumulativeProbability, (, upperBound, ), <, p, ), {, upperBound]
[/, (, 1., -, p, ), ), ;, }, else, {, upperBound, =, 1.0, ;, while, (, cumulativeProbability, (, upperBound]
[), ;, }, else, {, upperBound, =, 1.0, ;, while, (, cumulativeProbability, (, upperBound, ), <, p, ), {, upperBound]
[), ), ;, }, else, {, upperBound, =, 1.0, ;, while, (, cumulativeProbability, (, upperBound, ), <, p, ), {]
[-, p, ), ), ;, }, else, {, upperBound, =, 1.0, ;, while, (, cumulativeProbability, (, upperBound, ), <, p]
[), ), ;, }, else, {, upperBound, =, 1.0, ;, while, (, cumulativeProbability, (, upperBound, ), <, p, ), {]
[=, 1.0, ;, while, (, cumulativeProbability, (, upperBound, ), <, p, ), {, upperBound, *=, 2.0, ;, }, }, }]
[;, while, (, cumulativeProbability, (, upperBound, ), <, p, ), {, upperBound, *=, 2.0, ;, }, }, }, final, UnivariateFunction]
[), {, upperBound, *=, 2.0, ;, }, }, }, final, UnivariateFunction, toSolve, =, new, UnivariateFunction, (, ), {, public, double]
[<, p, ), {, upperBound, *=, 2.0, ;, }, }, }, final, UnivariateFunction, toSolve, =, new, UnivariateFunction, (, ), {]
[), <, p, ), {, upperBound, *=, 2.0, ;, }, }, }, final, UnivariateFunction, toSolve, =, new, UnivariateFunction, (, )]
[), {, upperBound, *=, 2.0, ;, }, }, }, final, UnivariateFunction, toSolve, =, new, UnivariateFunction, (, ), {, public, double]
[*=, 2.0, ;, }, }, }, final, UnivariateFunction, toSolve, =, new, UnivariateFunction, (, ), {, public, double, value, (, final]
[;, }, }, }, final, UnivariateFunction, toSolve, =, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, x]
[;, double, x, =, UnivariateSolverUtils, ., solve, (, toSolve, ,, lowerBound, ,, upperBound, ,, getSolverAbsoluteAccuracy, (, ), ), ;, if]
[;, }, }, ;, double, x, =, UnivariateSolverUtils, ., solve, (, toSolve, ,, lowerBound, ,, upperBound, ,, getSolverAbsoluteAccuracy, (, )]
[-, p, ;, }, }, ;, double, x, =, UnivariateSolverUtils, ., solve, (, toSolve, ,, lowerBound, ,, upperBound, ,, getSolverAbsoluteAccuracy]
[), -, p, ;, }, }, ;, double, x, =, UnivariateSolverUtils, ., solve, (, toSolve, ,, lowerBound, ,, upperBound, ,]
[;, }, }, ;, double, x, =, UnivariateSolverUtils, ., solve, (, toSolve, ,, lowerBound, ,, upperBound, ,, getSolverAbsoluteAccuracy, (, )]
[;, if, (, !, isSupportConnected, (, ), ), {, final, double, dx, =, getSolverAbsoluteAccuracy, (, ), ;, if, (, x]
[., solve, (, toSolve, ,, lowerBound, ,, upperBound, ,, getSolverAbsoluteAccuracy, (, ), ), ;, if, (, !, isSupportConnected, (, )]
[,, lowerBound, ,, upperBound, ,, getSolverAbsoluteAccuracy, (, ), ), ;, if, (, !, isSupportConnected, (, ), ), {, final, double]
[,, upperBound, ,, getSolverAbsoluteAccuracy, (, ), ), ;, if, (, !, isSupportConnected, (, ), ), {, final, double, dx, =]
[,, getSolverAbsoluteAccuracy, (, ), ), ;, if, (, !, isSupportConnected, (, ), ), {, final, double, dx, =, getSolverAbsoluteAccuracy, (]
[), ;, if, (, !, isSupportConnected, (, ), ), {, final, double, dx, =, getSolverAbsoluteAccuracy, (, ), ;, if, (]
[), {, final, double, dx, =, getSolverAbsoluteAccuracy, (, ), ;, if, (, x, -, dx, >=, getSupportLowerBound, (, ), )]
[), {, final, double, dx, =, getSolverAbsoluteAccuracy, (, ), ;, if, (, x, -, dx, >=, getSupportLowerBound, (, ), )]
[;, if, (, x, -, dx, >=, getSupportLowerBound, (, ), ), {, double, px, =, cumulativeProbability, (, x, ), ;]
[), {, double, px, =, cumulativeProbability, (, x, ), ;, if, (, cumulativeProbability, (, x, -, dx, ), ==, px]
[>=, getSupportLowerBound, (, ), ), {, double, px, =, cumulativeProbability, (, x, ), ;, if, (, cumulativeProbability, (, x, -]
[-, dx, >=, getSupportLowerBound, (, ), ), {, double, px, =, cumulativeProbability, (, x, ), ;, if, (, cumulativeProbability, (]
[>=, getSupportLowerBound, (, ), ), {, double, px, =, cumulativeProbability, (, x, ), ;, if, (, cumulativeProbability, (, x, -]
[), {, double, px, =, cumulativeProbability, (, x, ), ;, if, (, cumulativeProbability, (, x, -, dx, ), ==, px]
[;, if, (, cumulativeProbability, (, x, -, dx, ), ==, px, ), {, upperBound, =, x, ;, while, (, upperBound]
[), ;, if, (, cumulativeProbability, (, x, -, dx, ), ==, px, ), {, upperBound, =, x, ;, while, (]
[), {, upperBound, =, x, ;, while, (, upperBound, -, lowerBound, >, dx, ), {, final, double, midPoint, =, 0.5]
[==, px, ), {, upperBound, =, x, ;, while, (, upperBound, -, lowerBound, >, dx, ), {, final, double, midPoint]
[), ==, px, ), {, upperBound, =, x, ;, while, (, upperBound, -, lowerBound, >, dx, ), {, final, double]
[-, dx, ), ==, px, ), {, upperBound, =, x, ;, while, (, upperBound, -, lowerBound, >, dx, ), {]
[), ==, px, ), {, upperBound, =, x, ;, while, (, upperBound, -, lowerBound, >, dx, ), {, final, double]
[), {, upperBound, =, x, ;, while, (, upperBound, -, lowerBound, >, dx, ), {, final, double, midPoint, =, 0.5]
[=, x, ;, while, (, upperBound, -, lowerBound, >, dx, ), {, final, double, midPoint, =, 0.5, *, (, lowerBound]
[;, while, (, upperBound, -, lowerBound, >, dx, ), {, final, double, midPoint, =, 0.5, *, (, lowerBound, +, upperBound]
[), {, final, double, midPoint, =, 0.5, *, (, lowerBound, +, upperBound, ), ;, if, (, cumulativeProbability, (, midPoint, )]
[>, dx, ), {, final, double, midPoint, =, 0.5, *, (, lowerBound, +, upperBound, ), ;, if, (, cumulativeProbability, (]
[-, lowerBound, >, dx, ), {, final, double, midPoint, =, 0.5, *, (, lowerBound, +, upperBound, ), ;, if, (]
[>, dx, ), {, final, double, midPoint, =, 0.5, *, (, lowerBound, +, upperBound, ), ;, if, (, cumulativeProbability, (]
[), {, final, double, midPoint, =, 0.5, *, (, lowerBound, +, upperBound, ), ;, if, (, cumulativeProbability, (, midPoint, )]
[;, if, (, cumulativeProbability, (, midPoint, ), <, px, ), {, lowerBound, =, midPoint, ;, }, else, {, upperBound, =]
[*, (, lowerBound, +, upperBound, ), ;, if, (, cumulativeProbability, (, midPoint, ), <, px, ), {, lowerBound, =, midPoint]
[;, if, (, cumulativeProbability, (, midPoint, ), <, px, ), {, lowerBound, =, midPoint, ;, }, else, {, upperBound, =]
[), ;, if, (, cumulativeProbability, (, midPoint, ), <, px, ), {, lowerBound, =, midPoint, ;, }, else, {, upperBound]
[+, upperBound, ), ;, if, (, cumulativeProbability, (, midPoint, ), <, px, ), {, lowerBound, =, midPoint, ;, }, else]
[), ;, if, (, cumulativeProbability, (, midPoint, ), <, px, ), {, lowerBound, =, midPoint, ;, }, else, {, upperBound]
[), {, lowerBound, =, midPoint, ;, }, else, {, upperBound, =, midPoint, ;, }, }, return, upperBound, ;, }, }]
[<, px, ), {, lowerBound, =, midPoint, ;, }, else, {, upperBound, =, midPoint, ;, }, }, return, upperBound, ;]
[), <, px, ), {, lowerBound, =, midPoint, ;, }, else, {, upperBound, =, midPoint, ;, }, }, return, upperBound]
[), {, lowerBound, =, midPoint, ;, }, else, {, upperBound, =, midPoint, ;, }, }, return, upperBound, ;, }, }]
[=, midPoint, ;, }, else, {, upperBound, =, midPoint, ;, }, }, return, upperBound, ;, }, }, }, return, x]
[;, }, else, {, upperBound, =, midPoint, ;, }, }, return, upperBound, ;, }, }, }, return, x, ;, }]
[=, midPoint, ;, }, }, return, upperBound, ;, }, }, }, return, x, ;, }, protected, double, getSolverAbsoluteAccuracy, (, )]
[;, }, }, return, upperBound, ;, }, }, }, return, x, ;, }, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[;, }, }, }, return, x, ;, }, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, void]
[;, }, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {]
[;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (, seed, ), ;, randomData, ., reSeed]
[;, randomData, ., reSeed, (, seed, ), ;, }, public, double, sample, (, ), {, return, inverseCumulativeProbability, (, random, .]
[., setSeed, (, seed, ), ;, randomData, ., reSeed, (, seed, ), ;, }, public, double, sample, (, ), {]
[), ;, randomData, ., reSeed, (, seed, ), ;, }, public, double, sample, (, ), {, return, inverseCumulativeProbability, (, random]
[;, }, public, double, sample, (, ), {, return, inverseCumulativeProbability, (, random, ., nextDouble, (, ), ), ;, }, public]
[., reSeed, (, seed, ), ;, }, public, double, sample, (, ), {, return, inverseCumulativeProbability, (, random, ., nextDouble, (]
[), ;, }, public, double, sample, (, ), {, return, inverseCumulativeProbability, (, random, ., nextDouble, (, ), ), ;, }]
[;, }, public, double, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw]
[), ;, }, public, double, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {]
[., nextDouble, (, ), ), ;, }, public, double, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, double, [, ], out, =, new]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, double, [, ], out]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, double, [, ], out, =, new]
[;, }, double, [, ], out, =, new, double, [, sampleSize, ], ;, for, (, int, i, =, 0, ;]
[,, sampleSize, ), ;, }, double, [, ], out, =, new, double, [, sampleSize, ], ;, for, (, int, i]
[., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, double, [, ], out, =, new, double, [, sampleSize, ], ;, for, (]
[), ;, }, double, [, ], out, =, new, double, [, sampleSize, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, [, i]
[;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return]
[;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, public]
[<, sampleSize, ;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;]
[;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, public]
[), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, public, double, probability, (]
[++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, public, double, probability]
[=, sample, (, ), ;, }, return, out, ;, }, public, double, probability, (, double, x, ), {, return, 0d]
[[, i, ], =, sample, (, ), ;, }, return, out, ;, }, public, double, probability, (, double, x, )]
[], =, sample, (, ), ;, }, return, out, ;, }, public, double, probability, (, double, x, ), {, return]
[;, }, return, out, ;, }, public, double, probability, (, double, x, ), {, return, 0d, ;, }, }]
[;, }, public, double, probability, (, double, x, ), {, return, 0d, ;, }, }]
[;, }, }]
