[math3, ., dfp, ;, public, class, DfpDec, extends, Dfp, {, protected, DfpDec, (, final, DfpField, factory, ), {, super, (]
[{, super, (, factory, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, byte, x, ), {, super, (]
[(, factory, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, byte, x, ), {, super, (, factory, ,]
[(, factory, ,, x, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, int, x, ), {, super, (]
[,, x, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, int, x, ), {, super, (, factory, ,]
[(, factory, ,, x, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, long, x, ), {, super, (]
[,, x, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, long, x, ), {, super, (, factory, ,]
[(, factory, ,, x, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, double, x, ), {, super, (]
[,, x, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, double, x, ), {, super, (, factory, ,]
[;, }, protected, DfpDec, (, final, DfpField, factory, ,, double, x, ), {, super, (, factory, ,, x, ), ;]
[protected, DfpDec, (, final, DfpField, factory, ,, double, x, ), {, super, (, factory, ,, x, ), ;, round, (]
[,, x, ), ;, round, (, 0, ), ;, }, public, DfpDec, (, final, Dfp, d, ), {, super, (]
[;, round, (, 0, ), ;, }, public, DfpDec, (, final, Dfp, d, ), {, super, (, d, ), ;]
[(, 0, ), ;, }, public, DfpDec, (, final, Dfp, d, ), {, super, (, d, ), ;, round, (]
[round, (, 0, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, final, String, s, ), {, super, (]
[0, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, final, String, s, ), {, super, (, factory, ,]
[}, protected, DfpDec, (, final, DfpField, factory, ,, final, String, s, ), {, super, (, factory, ,, s, ), ;]
[DfpDec, (, final, DfpField, factory, ,, final, String, s, ), {, super, (, factory, ,, s, ), ;, round, (]
[;, }, protected, DfpDec, (, final, DfpField, factory, ,, final, byte, sign, ,, final, byte, nans, ), {, super, (]
[protected, DfpDec, (, final, DfpField, factory, ,, final, byte, sign, ,, final, byte, nans, ), {, super, (, factory, ,]
[(, final, DfpField, factory, ,, final, byte, sign, ,, final, byte, nans, ), {, super, (, factory, ,, sign, ,]
[{, super, (, factory, ,, sign, ,, nans, ), ;, }, @, Override, public, Dfp, newInstance, (, ), {, return]
[factory, ,, sign, ,, nans, ), ;, }, @, Override, public, Dfp, newInstance, (, ), {, return, new, DfpDec, (]
[DfpDec, (, getField, (, ), ), ;, }, @, Override, public, Dfp, newInstance, (, final, byte, x, ), {, return]
[(, ), ), ;, }, @, Override, public, Dfp, newInstance, (, final, byte, x, ), {, return, new, DfpDec, (]
[}, @, Override, public, Dfp, newInstance, (, final, byte, x, ), {, return, new, DfpDec, (, getField, (, ), ,]
[getField, (, ), ,, x, ), ;, }, @, Override, public, Dfp, newInstance, (, final, int, x, ), {, return]
[,, x, ), ;, }, @, Override, public, Dfp, newInstance, (, final, int, x, ), {, return, new, DfpDec, (]
[}, @, Override, public, Dfp, newInstance, (, final, int, x, ), {, return, new, DfpDec, (, getField, (, ), ,]
[getField, (, ), ,, x, ), ;, }, @, Override, public, Dfp, newInstance, (, final, long, x, ), {, return]
[,, x, ), ;, }, @, Override, public, Dfp, newInstance, (, final, long, x, ), {, return, new, DfpDec, (]
[}, @, Override, public, Dfp, newInstance, (, final, long, x, ), {, return, new, DfpDec, (, getField, (, ), ,]
[getField, (, ), ,, x, ), ;, }, @, Override, public, Dfp, newInstance, (, final, double, x, ), {, return]
[,, x, ), ;, }, @, Override, public, Dfp, newInstance, (, final, double, x, ), {, return, new, DfpDec, (]
[}, @, Override, public, Dfp, newInstance, (, final, double, x, ), {, return, new, DfpDec, (, getField, (, ), ,]
[(, ), ,, x, ), ;, }, @, Override, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (]
[(, ), ,, x, ), ;, }, @, Override, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (]
[(, ), ,, x, ), ;, }, @, Override, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (]
[Override, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (, getField, (, ), ., getRadixDigits, (, ), !=]
[Override, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (, getField, (, ), ., getRadixDigits, (, ), !=]
[Override, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (, getField, (, ), ., getRadixDigits, (, ), !=]
[(, getField, (, ), ., getRadixDigits, (, ), !=, d, ., getField, (, ), ., getRadixDigits, (, ), ), {]
[(, getField, (, ), ., getRadixDigits, (, ), !=, d, ., getField, (, ), ., getRadixDigits, (, ), ), {]
[(, ), !=, d, ., getField, (, ), ., getRadixDigits, (, ), ), {, getField, (, ), ., setIEEEFlagsBits, (]
[(, ), !=, d, ., getField, (, ), ., getRadixDigits, (, ), ), {, getField, (, ), ., setIEEEFlagsBits, (]
[getRadixDigits, (, ), ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =]
[), ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (]
[), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, "newInstance", ,]
[), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, "newInstance", ,, d, ,]
[nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, "newInstance", ,, d, ,, result, ), ;, }, return]
[;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, "newInstance", ,, d, ,, result, ), ;, }, return, new, DfpDec, (]
[return, new, DfpDec, (, d, ), ;, }, @, Override, public, Dfp, newInstance, (, final, String, s, ), {, return]
[(, d, ), ;, }, @, Override, public, Dfp, newInstance, (, final, String, s, ), {, return, new, DfpDec, (]
[}, @, Override, public, Dfp, newInstance, (, final, String, s, ), {, return, new, DfpDec, (, getField, (, ), ,]
[s, ), ;, }, @, Override, public, Dfp, newInstance, (, final, byte, sign, ,, final, byte, nans, ), {, return]
[}, @, Override, public, Dfp, newInstance, (, final, byte, sign, ,, final, byte, nans, ), {, return, new, DfpDec, (]
[Dfp, newInstance, (, final, byte, sign, ,, final, byte, nans, ), {, return, new, DfpDec, (, getField, (, ), ,]
[(, final, byte, sign, ,, final, byte, nans, ), {, return, new, DfpDec, (, getField, (, ), ,, sign, ,]
[new, DfpDec, (, getField, (, ), ,, sign, ,, nans, ), ;, }, protected, int, getDecimalDigits, (, ), {, return]
[new, DfpDec, (, getField, (, ), ,, sign, ,, nans, ), ;, }, protected, int, getDecimalDigits, (, ), {, return]
[new, DfpDec, (, getField, (, ), ,, sign, ,, nans, ), ;, }, protected, int, getDecimalDigits, (, ), {, return]
[(, ), ,, sign, ,, nans, ), ;, }, protected, int, getDecimalDigits, (, ), {, return, getRadixDigits, (, ), *]
[,, sign, ,, nans, ), ;, }, protected, int, getDecimalDigits, (, ), {, return, getRadixDigits, (, ), *, 4, -]
[), *, 4, -, 3, ;, }, @, Override, protected, int, round, (, int, in, ), {, int, msb, =]
[), *, 4, -, 3, ;, }, @, Override, protected, int, round, (, int, in, ), {, int, msb, =]
[4, -, 3, ;, }, @, Override, protected, int, round, (, int, in, ), {, int, msb, =, mant, []
[4, -, 3, ;, }, @, Override, protected, int, round, (, int, in, ), {, int, msb, =, mant, []
[4, -, 3, ;, }, @, Override, protected, int, round, (, int, in, ), {, int, msb, =, mant, []
[}, @, Override, protected, int, round, (, int, in, ), {, int, msb, =, mant, [, mant, ., length, -]
[round, (, int, in, ), {, int, msb, =, mant, [, mant, ., length, -, 1, ], ;, if, (]
[round, (, int, in, ), {, int, msb, =, mant, [, mant, ., length, -, 1, ], ;, if, (]
[int, in, ), {, int, msb, =, mant, [, mant, ., length, -, 1, ], ;, if, (, msb, ==]
[int, msb, =, mant, [, mant, ., length, -, 1, ], ;, if, (, msb, ==, 0, ), {, return]
[., length, -, 1, ], ;, if, (, msb, ==, 0, ), {, return, 0, ;, }, int, cmaxdigits, =]
[., length, -, 1, ], ;, if, (, msb, ==, 0, ), {, return, 0, ;, }, int, cmaxdigits, =]
[., length, -, 1, ], ;, if, (, msb, ==, 0, ), {, return, 0, ;, }, int, cmaxdigits, =]
[], ;, if, (, msb, ==, 0, ), {, return, 0, ;, }, int, cmaxdigits, =, mant, ., length, *]
[==, 0, ), {, return, 0, ;, }, int, cmaxdigits, =, mant, ., length, *, 4, ;, int, lsbthreshold, =]
[return, 0, ;, }, int, cmaxdigits, =, mant, ., length, *, 4, ;, int, lsbthreshold, =, 1000, ;, while, (]
[return, 0, ;, }, int, cmaxdigits, =, mant, ., length, *, 4, ;, int, lsbthreshold, =, 1000, ;, while, (]
[;, }, int, cmaxdigits, =, mant, ., length, *, 4, ;, int, lsbthreshold, =, 1000, ;, while, (, lsbthreshold, >]
[cmaxdigits, =, mant, ., length, *, 4, ;, int, lsbthreshold, =, 1000, ;, while, (, lsbthreshold, >, msb, ), {]
[mant, ., length, *, 4, ;, int, lsbthreshold, =, 1000, ;, while, (, lsbthreshold, >, msb, ), {, lsbthreshold, /=]
[length, *, 4, ;, int, lsbthreshold, =, 1000, ;, while, (, lsbthreshold, >, msb, ), {, lsbthreshold, /=, 10, ;]
[length, *, 4, ;, int, lsbthreshold, =, 1000, ;, while, (, lsbthreshold, >, msb, ), {, lsbthreshold, /=, 10, ;]
[;, while, (, lsbthreshold, >, msb, ), {, lsbthreshold, /=, 10, ;, cmaxdigits, --, ;, }, final, int, digits, =]
[lsbthreshold, /=, 10, ;, cmaxdigits, --, ;, }, final, int, digits, =, getDecimalDigits, (, ), ;, final, int, lsbshift, =]
[lsbthreshold, /=, 10, ;, cmaxdigits, --, ;, }, final, int, digits, =, getDecimalDigits, (, ), ;, final, int, lsbshift, =]
[10, ;, cmaxdigits, --, ;, }, final, int, digits, =, getDecimalDigits, (, ), ;, final, int, lsbshift, =, cmaxdigits, -]
[final, int, digits, =, getDecimalDigits, (, ), ;, final, int, lsbshift, =, cmaxdigits, -, digits, ;, final, int, lsd, =]
[final, int, digits, =, getDecimalDigits, (, ), ;, final, int, lsbshift, =, cmaxdigits, -, digits, ;, final, int, lsd, =]
[digits, =, getDecimalDigits, (, ), ;, final, int, lsbshift, =, cmaxdigits, -, digits, ;, final, int, lsd, =, lsbshift, /]
[getDecimalDigits, (, ), ;, final, int, lsbshift, =, cmaxdigits, -, digits, ;, final, int, lsd, =, lsbshift, /, 4, ;]
[), ;, final, int, lsbshift, =, cmaxdigits, -, digits, ;, final, int, lsd, =, lsbshift, /, 4, ;, lsbthreshold, =]
[-, digits, ;, final, int, lsd, =, lsbshift, /, 4, ;, lsbthreshold, =, 1, ;, for, (, int, i, =]
[;, final, int, lsd, =, lsbshift, /, 4, ;, lsbthreshold, =, 1, ;, for, (, int, i, =, 0, ;]
[;, final, int, lsd, =, lsbshift, /, 4, ;, lsbthreshold, =, 1, ;, for, (, int, i, =, 0, ;]
[int, lsd, =, lsbshift, /, 4, ;, lsbthreshold, =, 1, ;, for, (, int, i, =, 0, ;, i, <]
[int, lsd, =, lsbshift, /, 4, ;, lsbthreshold, =, 1, ;, for, (, int, i, =, 0, ;, i, <]
[=, lsbshift, /, 4, ;, lsbthreshold, =, 1, ;, for, (, int, i, =, 0, ;, i, <, lsbshift, %]
[/, 4, ;, lsbthreshold, =, 1, ;, for, (, int, i, =, 0, ;, i, <, lsbshift, %, 4, ;]
[/, 4, ;, lsbthreshold, =, 1, ;, for, (, int, i, =, 0, ;, i, <, lsbshift, %, 4, ;]
[=, 1, ;, for, (, int, i, =, 0, ;, i, <, lsbshift, %, 4, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, lsbshift, %, 4, ;, i, ++, ), {, lsbthreshold, *=]
[;, i, <, lsbshift, %, 4, ;, i, ++, ), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =]
[;, i, <, lsbshift, %, 4, ;, i, ++, ), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =]
[<, lsbshift, %, 4, ;, i, ++, ), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, []
[i, ++, ), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if, (]
[i, ++, ), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if, (]
[i, ++, ), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if, (]
[), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if, (, lsbthreshold, <=]
[lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if, (, lsbthreshold, <=, 1, &&]
[lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if, (, lsbthreshold, <=, 1, &&]
[10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if, (, lsbthreshold, <=, 1, &&, digits, ==]
[10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if, (, lsbthreshold, <=, 1, &&, digits, ==]
[10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if, (, lsbthreshold, <=, 1, &&, digits, ==]
[}, final, int, lsb, =, mant, [, lsd, ], ;, if, (, lsbthreshold, <=, 1, &&, digits, ==, 4, *]
[}, final, int, lsb, =, mant, [, lsd, ], ;, if, (, lsbthreshold, <=, 1, &&, digits, ==, 4, *]
[=, mant, [, lsd, ], ;, if, (, lsbthreshold, <=, 1, &&, digits, ==, 4, *, mant, ., length, -]
[], ;, if, (, lsbthreshold, <=, 1, &&, digits, ==, 4, *, mant, ., length, -, 3, ), {, return]
[], ;, if, (, lsbthreshold, <=, 1, &&, digits, ==, 4, *, mant, ., length, -, 3, ), {, return]
[lsbthreshold, <=, 1, &&, digits, ==, 4, *, mant, ., length, -, 3, ), {, return, super, ., round, (]
[*, mant, ., length, -, 3, ), {, return, super, ., round, (, in, ), ;, }, int, discarded, =]
[return, super, ., round, (, in, ), ;, }, int, discarded, =, in, ;, final, int, n, ;, if, (]
[return, super, ., round, (, in, ), ;, }, int, discarded, =, in, ;, final, int, n, ;, if, (]
[., round, (, in, ), ;, }, int, discarded, =, in, ;, final, int, n, ;, if, (, lsbthreshold, ==]
[in, ), ;, }, int, discarded, =, in, ;, final, int, n, ;, if, (, lsbthreshold, ==, 1, ), {]
[;, }, int, discarded, =, in, ;, final, int, n, ;, if, (, lsbthreshold, ==, 1, ), {, n, =]
[;, }, int, discarded, =, in, ;, final, int, n, ;, if, (, lsbthreshold, ==, 1, ), {, n, =]
[}, int, discarded, =, in, ;, final, int, n, ;, if, (, lsbthreshold, ==, 1, ), {, n, =, (]
[}, int, discarded, =, in, ;, final, int, n, ;, if, (, lsbthreshold, ==, 1, ), {, n, =, (]
[}, int, discarded, =, in, ;, final, int, n, ;, if, (, lsbthreshold, ==, 1, ), {, n, =, (]
[discarded, =, in, ;, final, int, n, ;, if, (, lsbthreshold, ==, 1, ), {, n, =, (, mant, []
[discarded, =, in, ;, final, int, n, ;, if, (, lsbthreshold, ==, 1, ), {, n, =, (, mant, []
[in, ;, final, int, n, ;, if, (, lsbthreshold, ==, 1, ), {, n, =, (, mant, [, lsd, -]
[int, n, ;, if, (, lsbthreshold, ==, 1, ), {, n, =, (, mant, [, lsd, -, 1, ], /]
[if, (, lsbthreshold, ==, 1, ), {, n, =, (, mant, [, lsd, -, 1, ], /, 1000, ), %]
[lsbthreshold, ==, 1, ), {, n, =, (, mant, [, lsd, -, 1, ], /, 1000, ), %, 10, ;]
[lsbthreshold, ==, 1, ), {, n, =, (, mant, [, lsd, -, 1, ], /, 1000, ), %, 10, ;]
[1, ), {, n, =, (, mant, [, lsd, -, 1, ], /, 1000, ), %, 10, ;, mant, []
[1, ), {, n, =, (, mant, [, lsd, -, 1, ], /, 1000, ), %, 10, ;, mant, []
[{, n, =, (, mant, [, lsd, -, 1, ], /, 1000, ), %, 10, ;, mant, [, lsd, -]
[(, mant, [, lsd, -, 1, ], /, 1000, ), %, 10, ;, mant, [, lsd, -, 1, ], %=]
[[, lsd, -, 1, ], /, 1000, ), %, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;]
[-, 1, ], /, 1000, ), %, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=]
[-, 1, ], /, 1000, ), %, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=]
[], /, 1000, ), %, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=, mant, []
[], /, 1000, ), %, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=, mant, []
[1000, ), %, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -]
[[, lsd, -, 1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {]
[-, 1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {, n, =]
[-, 1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {, n, =]
[1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {, n, =, (]
[1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {, n, =, (]
[1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {, n, =, (]
[%=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {, n, =, (, lsb, *]
[;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {, n, =, (, lsb, *, 10, /]
[mant, [, lsd, -, 1, ], ;, }, else, {, n, =, (, lsb, *, 10, /, lsbthreshold, ), %]
[lsd, -, 1, ], ;, }, else, {, n, =, (, lsb, *, 10, /, lsbthreshold, ), %, 10, ;]
[1, ], ;, }, else, {, n, =, (, lsb, *, 10, /, lsbthreshold, ), %, 10, ;, discarded, |=]
[1, ], ;, }, else, {, n, =, (, lsb, *, 10, /, lsbthreshold, ), %, 10, ;, discarded, |=]
[;, }, else, {, n, =, (, lsb, *, 10, /, lsbthreshold, ), %, 10, ;, discarded, |=, lsb, %]
[}, else, {, n, =, (, lsb, *, 10, /, lsbthreshold, ), %, 10, ;, discarded, |=, lsb, %, (]
[}, else, {, n, =, (, lsb, *, 10, /, lsbthreshold, ), %, 10, ;, discarded, |=, lsb, %, (]
[{, n, =, (, lsb, *, 10, /, lsbthreshold, ), %, 10, ;, discarded, |=, lsb, %, (, lsbthreshold, /]
[), %, 10, ;, discarded, |=, lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int, i, =]
[10, ;, discarded, |=, lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int, i, =, 0, ;]
[10, ;, discarded, |=, lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int, i, =, 0, ;]
[discarded, |=, lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int, i, =, 0, ;, i, <, lsd, ;]
[lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int, i, =, 0, ;, i, <, lsd, ;]
[/, 10, ), ;, }, for, (, int, i, =, 0, ;, i, <, lsd, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, lsd, ;, i, ++, ), {, discarded, |=]
[), ;, }, for, (, int, i, =, 0, ;, i, <, lsd, ;, i, ++, ), {, discarded, |=]
[}, for, (, int, i, =, 0, ;, i, <, lsd, ;, i, ++, ), {, discarded, |=, mant, []
[int, i, =, 0, ;, i, <, lsd, ;, i, ++, ), {, discarded, |=, mant, [, i, ], ;]
[int, i, =, 0, ;, i, <, lsd, ;, i, ++, ), {, discarded, |=, mant, [, i, ], ;]
[=, 0, ;, i, <, lsd, ;, i, ++, ), {, discarded, |=, mant, [, i, ], ;, mant, []
[i, <, lsd, ;, i, ++, ), {, discarded, |=, mant, [, i, ], ;, mant, [, i, ], =]
[;, i, ++, ), {, discarded, |=, mant, [, i, ], ;, mant, [, i, ], =, 0, ;, }]
[;, i, ++, ), {, discarded, |=, mant, [, i, ], ;, mant, [, i, ], =, 0, ;, }]
[++, ), {, discarded, |=, mant, [, i, ], ;, mant, [, i, ], =, 0, ;, }, mant, []
[discarded, |=, mant, [, i, ], ;, mant, [, i, ], =, 0, ;, }, mant, [, lsd, ], =]
[discarded, |=, mant, [, i, ], ;, mant, [, i, ], =, 0, ;, }, mant, [, lsd, ], =]
[discarded, |=, mant, [, i, ], ;, mant, [, i, ], =, 0, ;, }, mant, [, lsd, ], =]
[mant, [, i, ], ;, mant, [, i, ], =, 0, ;, }, mant, [, lsd, ], =, lsb, /]
[i, ], ;, mant, [, i, ], =, 0, ;, }, mant, [, lsd, ], =, lsb, /, lsbthreshold, *]
[0, ;, }, mant, [, lsd, ], =, lsb, /, lsbthreshold, *, lsbthreshold, ;, final, boolean, inc, ;, switch, (]
[0, ;, }, mant, [, lsd, ], =, lsb, /, lsbthreshold, *, lsbthreshold, ;, final, boolean, inc, ;, switch, (]
[lsbthreshold, *, lsbthreshold, ;, final, boolean, inc, ;, switch, (, getField, (, ), ., getRoundingMode, (, ), ), {, case]
[lsbthreshold, ;, final, boolean, inc, ;, switch, (, getField, (, ), ., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :]
[final, boolean, inc, ;, switch, (, getField, (, ), ., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =]
[(, getField, (, ), ., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case]
[(, ), ., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :]
[., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =]
[., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =]
[getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, (]
[getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, (]
[), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, (, n, !=]
[case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, (, n, !=, 0, ), ||]
[ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, (, n, !=, 0, ), ||, (]
[ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, (, n, !=, 0, ), ||, (]
[inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, (, n, !=, 0, ), ||, (, discarded, !=]
[case, ROUND_UP, :, inc, =, (, n, !=, 0, ), ||, (, discarded, !=, 0, ), ;, break, ;, case]
[:, inc, =, (, n, !=, 0, ), ||, (, discarded, !=, 0, ), ;, break, ;, case, ROUND_HALF_UP, :]
[=, (, n, !=, 0, ), ||, (, discarded, !=, 0, ), ;, break, ;, case, ROUND_HALF_UP, :, inc, =]
[=, (, n, !=, 0, ), ||, (, discarded, !=, 0, ), ;, break, ;, case, ROUND_HALF_UP, :, inc, =]
[n, !=, 0, ), ||, (, discarded, !=, 0, ), ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=]
[(, discarded, !=, 0, ), ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5, ;, break, ;, case]
[!=, 0, ), ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :]
[), ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =]
[), ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =]
[break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >]
[inc, =, n, >=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5, ;, break, ;, case]
[n, >=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :]
[5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =]
[5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =]
[5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =]
[;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (]
[;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (]
[;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >]
[:, inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||]
[inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||, (]
[inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||, (]
[inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||, (]
[n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||, (, n, ==]
[5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&]
[5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&]
[break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=]
[ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||]
[:, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (]
[:, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (]
[:, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (]
[:, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (]
[=, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==]
[n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&]
[n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&]
[5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==]
[||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&]
[||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&]
[(, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (]
[(, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (]
[n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (]
[n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (]
[5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /]
[!=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &]
[||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==]
[discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;, case]
[0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :]
[(, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =]
[(, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =]
[(, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =]
[(, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (]
[(, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (]
[/, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >]
[&, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||]
[1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (]
[1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (]
[1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (]
[==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (, n, ==]
[), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&]
[), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&]
[break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=]
[ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||]
[:, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (]
[:, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (]
[:, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (]
[:, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (]
[=, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==]
[n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&]
[n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&]
[5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==]
[||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&]
[||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&]
[(, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (]
[(, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (]
[n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (]
[n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (]
[5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /]
[!=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &]
[||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==]
[discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;, case]
[0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :]
[(, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =]
[(, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =]
[(, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (]
[(, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (]
[/, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==]
[&, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&]
[1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (]
[1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (]
[1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (]
[==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (, n, !=]
[), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (, n, !=, 0, ||]
[), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (, n, !=, 0, ||]
[break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (, n, !=, 0, ||, discarded, !=]
[=, (, sign, ==, 1, ), &&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, case]
[1, ), &&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :]
[&&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =]
[&&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =]
[(, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (]
[(, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (]
[!=, 0, ||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==]
[0, ||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -]
[!=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&]
[0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&, (]
[0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&, (]
[0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&, (]
[;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&, (, n, !=]
[;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&, (, n, !=, 0, ||]
[;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&, (, n, !=, 0, ||]
[ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&, (, n, !=, 0, ||, discarded, !=]
[==, -, 1, ), &&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, }, if, (]
[n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, }, if, (, inc, ), {, int, rh, =]
[), ;, break, ;, }, if, (, inc, ), {, int, rh, =, lsbthreshold, ;, for, (, int, i, =]
[break, ;, }, if, (, inc, ), {, int, rh, =, lsbthreshold, ;, for, (, int, i, =, lsd, ;]
[break, ;, }, if, (, inc, ), {, int, rh, =, lsbthreshold, ;, for, (, int, i, =, lsd, ;]
[}, if, (, inc, ), {, int, rh, =, lsbthreshold, ;, for, (, int, i, =, lsd, ;, i, <]
[}, if, (, inc, ), {, int, rh, =, lsbthreshold, ;, for, (, int, i, =, lsd, ;, i, <]
[), {, int, rh, =, lsbthreshold, ;, for, (, int, i, =, lsd, ;, i, <, mant, ., length, ;]
[), {, int, rh, =, lsbthreshold, ;, for, (, int, i, =, lsd, ;, i, <, mant, ., length, ;]
[(, int, i, =, lsd, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[(, int, i, =, lsd, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[(, int, i, =, lsd, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[i, =, lsd, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, []
[;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +]
[<, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;]
[., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =]
[., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =]
[;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /]
[++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[{, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, []
[r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =]
[r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =]
[mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, %]
[rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, %, RADIX, ;, }, if, (]
[rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, %, RADIX, ;, }, if, (]
[rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, %, RADIX, ;, }, if, (, rh, !=]
[/, RADIX, ;, mant, [, i, ], =, r, %, RADIX, ;, }, if, (, rh, !=, 0, ), {]
[[, i, ], =, r, %, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;]
[[, i, ], =, r, %, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;]
[], =, r, %, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, []
[], =, r, %, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, []
[], =, r, %, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, []
[RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, [, mant, ., length, -]
[if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1, ], =]
[{, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (]
[{, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (]
[(, ), ;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (, exp, <]
[mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {]
[mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {]
[1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (]
[1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (]
[}, if, (, exp, <, MIN_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return]
[}, if, (, exp, <, MIN_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return]
[{, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (]
[{, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (]
[(, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >]
[setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {]
[setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {]
[;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (]
[;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (]
[}, if, (, exp, >, MAX_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return]
[}, if, (, exp, >, MAX_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return]
[{, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (]
[{, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (]
[{, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (]
[(, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ||]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ||]
[(, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ||, discarded, !=]
[FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ||, discarded, !=, 0, ), {]
[FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ||, discarded, !=, 0, ), {]
[FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ||, discarded, !=, 0, ), {, getField, (, ), ., setIEEEFlagsBits, (]
[FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ||, discarded, !=, 0, ), {, getField, (, ), ., setIEEEFlagsBits, (]
[!=, 0, ||, discarded, !=, 0, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return]
[!=, 0, ||, discarded, !=, 0, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return]
[;, }, return, 0, ;, }, @, Override, public, Dfp, nextAfter, (, Dfp, x, ), {, final, String, trapName, =]
[;, }, @, Override, public, Dfp, nextAfter, (, Dfp, x, ), {, final, String, trapName, =, "nextAfter", ;, if, (]
[;, }, @, Override, public, Dfp, nextAfter, (, Dfp, x, ), {, final, String, trapName, =, "nextAfter", ;, if, (]
[;, }, @, Override, public, Dfp, nextAfter, (, Dfp, x, ), {, final, String, trapName, =, "nextAfter", ;, if, (]
[Dfp, x, ), {, final, String, trapName, =, "nextAfter", ;, if, (, getField, (, ), ., getRadixDigits, (, ), !=]
[Dfp, x, ), {, final, String, trapName, =, "nextAfter", ;, if, (, getField, (, ), ., getRadixDigits, (, ), !=]
[Dfp, x, ), {, final, String, trapName, =, "nextAfter", ;, if, (, getField, (, ), ., getRadixDigits, (, ), !=]
[(, getField, (, ), ., getRadixDigits, (, ), !=, x, ., getField, (, ), ., getRadixDigits, (, ), ), {]
[(, getField, (, ), ., getRadixDigits, (, ), !=, x, ., getField, (, ), ., getRadixDigits, (, ), ), {]
[(, ), !=, x, ., getField, (, ), ., getRadixDigits, (, ), ), {, getField, (, ), ., setIEEEFlagsBits, (]
[(, ), !=, x, ., getField, (, ), ., getRadixDigits, (, ), ), {, getField, (, ), ., setIEEEFlagsBits, (]
[getRadixDigits, (, ), ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =]
[), ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (]
[), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, trapName, ,]
[), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, trapName, ,, x, ,]
[QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, trapName, ,, x, ,, result, ), ;, }, boolean, up, =]
[,, x, ,, result, ), ;, }, boolean, up, =, false, ;, Dfp, result, ;, Dfp, inc, ;, if, (]
[,, x, ,, result, ), ;, }, boolean, up, =, false, ;, Dfp, result, ;, Dfp, inc, ;, if, (]
[), ;, }, boolean, up, =, false, ;, Dfp, result, ;, Dfp, inc, ;, if, (, this, ., lessThan, (]
[up, =, false, ;, Dfp, result, ;, Dfp, inc, ;, if, (, this, ., lessThan, (, x, ), ), {]
[false, ;, Dfp, result, ;, Dfp, inc, ;, if, (, this, ., lessThan, (, x, ), ), {, up, =]
[Dfp, inc, ;, if, (, this, ., lessThan, (, x, ), ), {, up, =, true, ;, }, if, (]
[;, if, (, this, ., lessThan, (, x, ), ), {, up, =, true, ;, }, if, (, equals, (]
[lessThan, (, x, ), ), {, up, =, true, ;, }, if, (, equals, (, x, ), ), {, return]
[x, ), ), {, up, =, true, ;, }, if, (, equals, (, x, ), ), {, return, newInstance, (]
[true, ;, }, if, (, equals, (, x, ), ), {, return, newInstance, (, x, ), ;, }, if, (]
[}, if, (, equals, (, x, ), ), {, return, newInstance, (, x, ), ;, }, if, (, lessThan, (]
[), ), {, return, newInstance, (, x, ), ;, }, if, (, lessThan, (, getZero, (, ), ), ), {]
[{, return, newInstance, (, x, ), ;, }, if, (, lessThan, (, getZero, (, ), ), ), {, up, =]
[return, newInstance, (, x, ), ;, }, if, (, lessThan, (, getZero, (, ), ), ), {, up, =, !]
[;, }, if, (, lessThan, (, getZero, (, ), ), ), {, up, =, !, up, ;, }, if, (]
[(, lessThan, (, getZero, (, ), ), ), {, up, =, !, up, ;, }, if, (, up, ), {]
[(, getZero, (, ), ), ), {, up, =, !, up, ;, }, if, (, up, ), {, inc, =]
[(, ), ), ), {, up, =, !, up, ;, }, if, (, up, ), {, inc, =, power10, (]
[(, ), ), ), {, up, =, !, up, ;, }, if, (, up, ), {, inc, =, power10, (]
[(, ), ), ), {, up, =, !, up, ;, }, if, (, up, ), {, inc, =, power10, (]
[{, up, =, !, up, ;, }, if, (, up, ), {, inc, =, power10, (, intLog10, (, ), -]
[up, ;, }, if, (, up, ), {, inc, =, power10, (, intLog10, (, ), -, getDecimalDigits, (, ), +]
[if, (, up, ), {, inc, =, power10, (, intLog10, (, ), -, getDecimalDigits, (, ), +, 1, ), ;]
[up, ), {, inc, =, power10, (, intLog10, (, ), -, getDecimalDigits, (, ), +, 1, ), ;, inc, =]
[{, inc, =, power10, (, intLog10, (, ), -, getDecimalDigits, (, ), +, 1, ), ;, inc, =, copysign, (]
[=, power10, (, intLog10, (, ), -, getDecimalDigits, (, ), +, 1, ), ;, inc, =, copysign, (, inc, ,]
[), -, getDecimalDigits, (, ), +, 1, ), ;, inc, =, copysign, (, inc, ,, this, ), ;, if, (]
[), -, getDecimalDigits, (, ), +, 1, ), ;, inc, =, copysign, (, inc, ,, this, ), ;, if, (]
[), +, 1, ), ;, inc, =, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (]
[=, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (, getZero, (, ), ), ), {]
[(, inc, ,, this, ), ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =]
[,, this, ), ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (]
[,, this, ), ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (]
[,, this, ), ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (]
[), ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (, MIN_EXP, -]
[), ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (, MIN_EXP, -]
[this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (, MIN_EXP, -, mant, ., length, -]
[), ), ), {, inc, =, power10K, (, MIN_EXP, -, mant, ., length, -, 1, ), ;, }, if, (]
[), ), ), {, inc, =, power10K, (, MIN_EXP, -, mant, ., length, -, 1, ), ;, }, if, (]
[inc, =, power10K, (, MIN_EXP, -, mant, ., length, -, 1, ), ;, }, if, (, inc, ., equals, (]
[mant, ., length, -, 1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {]
[length, -, 1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =]
[1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign, (]
[;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign, (, newInstance, (]
[., equals, (, getZero, (, ), ), ), {, result, =, copysign, (, newInstance, (, getZero, (, ), ), ,]
[), ), {, result, =, copysign, (, newInstance, (, getZero, (, ), ), ,, this, ), ;, }, else, {]
[{, result, =, copysign, (, newInstance, (, getZero, (, ), ), ,, this, ), ;, }, else, {, result, =]
[=, copysign, (, newInstance, (, getZero, (, ), ), ,, this, ), ;, }, else, {, result, =, add, (]
[), ), ,, this, ), ;, }, else, {, result, =, add, (, inc, ), ;, }, }, else, {]
[,, this, ), ;, }, else, {, result, =, add, (, inc, ), ;, }, }, else, {, inc, =]
[), ;, }, else, {, result, =, add, (, inc, ), ;, }, }, else, {, inc, =, power10, (]
[result, =, add, (, inc, ), ;, }, }, else, {, inc, =, power10, (, intLog10, (, ), ), ;]
[add, (, inc, ), ;, }, }, else, {, inc, =, power10, (, intLog10, (, ), ), ;, inc, =]
[inc, ), ;, }, }, else, {, inc, =, power10, (, intLog10, (, ), ), ;, inc, =, copysign, (]
[;, }, }, else, {, inc, =, power10, (, intLog10, (, ), ), ;, inc, =, copysign, (, inc, ,]
[inc, =, power10, (, intLog10, (, ), ), ;, inc, =, copysign, (, inc, ,, this, ), ;, if, (]
[inc, =, power10, (, intLog10, (, ), ), ;, inc, =, copysign, (, inc, ,, this, ), ;, if, (]
[intLog10, (, ), ), ;, inc, =, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (]
[;, inc, =, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (, inc, ), ), {]
[=, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (, inc, ), ), {, inc, =]
[=, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (, inc, ), ), {, inc, =]
[,, this, ), ;, if, (, this, ., equals, (, inc, ), ), {, inc, =, inc, ., divide, (]
[), ;, if, (, this, ., equals, (, inc, ), ), {, inc, =, inc, ., divide, (, power10, (]
[), ), {, inc, =, inc, ., divide, (, power10, (, getDecimalDigits, (, ), ), ), ;, }, else, {]
[{, inc, =, inc, ., divide, (, power10, (, getDecimalDigits, (, ), ), ), ;, }, else, {, inc, =]
[{, inc, =, inc, ., divide, (, power10, (, getDecimalDigits, (, ), ), ), ;, }, else, {, inc, =]
[., divide, (, power10, (, getDecimalDigits, (, ), ), ), ;, }, else, {, inc, =, inc, ., divide, (]
[(, power10, (, getDecimalDigits, (, ), ), ), ;, }, else, {, inc, =, inc, ., divide, (, power10, (]
[(, power10, (, getDecimalDigits, (, ), ), ), ;, }, else, {, inc, =, inc, ., divide, (, power10, (]
[(, ), ), ), ;, }, else, {, inc, =, inc, ., divide, (, power10, (, getDecimalDigits, (, ), -]
[{, inc, =, inc, ., divide, (, power10, (, getDecimalDigits, (, ), -, 1, ), ), ;, }, if, (]
[{, inc, =, inc, ., divide, (, power10, (, getDecimalDigits, (, ), -, 1, ), ), ;, }, if, (]
[., divide, (, power10, (, getDecimalDigits, (, ), -, 1, ), ), ;, }, if, (, this, ., equals, (]
[(, ), -, 1, ), ), ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {]
[-, 1, ), ), ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =]
[), ), ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (]
[), ), ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (]
[), ), ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (]
[;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (, MIN_EXP, -]
[;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (, MIN_EXP, -]
[this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (, MIN_EXP, -, mant, ., length, -]
[), ), ), {, inc, =, power10K, (, MIN_EXP, -, mant, ., length, -, 1, ), ;, }, if, (]
[), ), ), {, inc, =, power10K, (, MIN_EXP, -, mant, ., length, -, 1, ), ;, }, if, (]
[inc, =, power10K, (, MIN_EXP, -, mant, ., length, -, 1, ), ;, }, if, (, inc, ., equals, (]
[mant, ., length, -, 1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {]
[length, -, 1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =]
[1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign, (]
[;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign, (, newInstance, (]
[., equals, (, getZero, (, ), ), ), {, result, =, copysign, (, newInstance, (, getZero, (, ), ), ,]
[), ), {, result, =, copysign, (, newInstance, (, getZero, (, ), ), ,, this, ), ;, }, else, {]
[{, result, =, copysign, (, newInstance, (, getZero, (, ), ), ,, this, ), ;, }, else, {, result, =]
[=, copysign, (, newInstance, (, getZero, (, ), ), ,, this, ), ;, }, else, {, result, =, subtract, (]
[), ), ,, this, ), ;, }, else, {, result, =, subtract, (, inc, ), ;, }, }, if, (]
[), ), ,, this, ), ;, }, else, {, result, =, subtract, (, inc, ), ;, }, }, if, (]
[), ), ,, this, ), ;, }, else, {, result, =, subtract, (, inc, ), ;, }, }, if, (]
[), ), ,, this, ), ;, }, else, {, result, =, subtract, (, inc, ), ;, }, }, if, (]
[}, else, {, result, =, subtract, (, inc, ), ;, }, }, if, (, result, ., classify, (, ), ==]
[{, result, =, subtract, (, inc, ), ;, }, }, if, (, result, ., classify, (, ), ==, INFINITE, &&]
[{, result, =, subtract, (, inc, ), ;, }, }, if, (, result, ., classify, (, ), ==, INFINITE, &&]
[{, result, =, subtract, (, inc, ), ;, }, }, if, (, result, ., classify, (, ), ==, INFINITE, &&]
[), ;, }, }, if, (, result, ., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=]
[}, if, (, result, ., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE, ), {]
[}, if, (, result, ., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE, ), {]
[(, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE, ), {, getField, (, ), ., setIEEEFlagsBits, (]
[(, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE, ), {, getField, (, ), ., setIEEEFlagsBits, (]
[this, ., classify, (, ), !=, INFINITE, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;]
[classify, (, ), !=, INFINITE, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =]
[), !=, INFINITE, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (]
[), !=, INFINITE, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (]
[{, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,]
[(, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,]
[), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }, if, (]
[), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }, if, (]
[), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }, if, (]
[dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }, if, (, result, ., equals, (]
[,, trapName, ,, x, ,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&]
[,, trapName, ,, x, ,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&]
[,, trapName, ,, x, ,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&]
[,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&, this, ., equals, (]
[if, (, result, ., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (, ), ), ==]
[., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (, ), ), ==, false, ), {]
[., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (, ), ), ==, false, ), {]
[), &&, this, ., equals, (, getZero, (, ), ), ==, false, ), {, getField, (, ), ., setIEEEFlagsBits, (]
[), &&, this, ., equals, (, getZero, (, ), ), ==, false, ), {, getField, (, ), ., setIEEEFlagsBits, (]
[(, getZero, (, ), ), ==, false, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;]
[(, ), ), ==, false, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =]
[), ==, false, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (]
[), ==, false, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (]
[{, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,]
[(, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,]
[FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }, return]
