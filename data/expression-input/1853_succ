[;, public, RiddersSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ), ;, }, public, RiddersSolver, (, double, absoluteAccuracy, ), {, super]
[), ;, }, public, RiddersSolver, (, double, absoluteAccuracy, ), {, super, (, absoluteAccuracy, ), ;, }, public, RiddersSolver, (, double]
[), ;, }, public, RiddersSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;]
[,, absoluteAccuracy, ), ;, }, @, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NoBracketingException, {, double, min, =]
[), ;, }, @, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NoBracketingException, {, double, min, =, getMin, (]
[;, double, max, =, getMax, (, ), ;, double, x1, =, min, ;, double, y1, =, computeObjectiveValue, (, x1, )]
[;, double, x1, =, min, ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, x2, =, max, ;, double]
[;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, x2, =, max, ;, double, y2, =, computeObjectiveValue, (, x2]
[;, double, x2, =, max, ;, double, y2, =, computeObjectiveValue, (, x2, ), ;, if, (, y1, ==, 0, )]
[), ;, double, x2, =, max, ;, double, y2, =, computeObjectiveValue, (, x2, ), ;, if, (, y1, ==, 0]
[;, double, y2, =, computeObjectiveValue, (, x2, ), ;, if, (, y1, ==, 0, ), {, return, min, ;, }]
[;, if, (, y1, ==, 0, ), {, return, min, ;, }, if, (, y2, ==, 0, ), {, return]
[), ;, if, (, y1, ==, 0, ), {, return, min, ;, }, if, (, y2, ==, 0, ), {]
[), {, return, min, ;, }, if, (, y2, ==, 0, ), {, return, max, ;, }, verifyBracketing, (, min]
[==, 0, ), {, return, min, ;, }, if, (, y2, ==, 0, ), {, return, max, ;, }, verifyBracketing]
[), {, return, min, ;, }, if, (, y2, ==, 0, ), {, return, max, ;, }, verifyBracketing, (, min]
[;, }, if, (, y2, ==, 0, ), {, return, max, ;, }, verifyBracketing, (, min, ,, max, ), ;]
[), {, return, max, ;, }, verifyBracketing, (, min, ,, max, ), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, )]
[==, 0, ), {, return, max, ;, }, verifyBracketing, (, min, ,, max, ), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy]
[), {, return, max, ;, }, verifyBracketing, (, min, ,, max, ), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, )]
[;, }, verifyBracketing, (, min, ,, max, ), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy]
[;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, final, double, relativeAccuracy]
[,, max, ), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;]
[), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, final, double]
[;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, double, oldx, =]
[;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, )]
[;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, x3, =, 0.5, *, (]
[;, while, (, true, ), {, final, double, x3, =, 0.5, *, (, x1, +, x2, ), ;, final, double]
[., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, x3, =, 0.5, *, (, x1, +, x2, ), ;]
[), {, final, double, x3, =, 0.5, *, (, x1, +, x2, ), ;, final, double, y3, =, computeObjectiveValue, (]
[;, final, double, y3, =, computeObjectiveValue, (, x3, ), ;, if, (, FastMath, ., abs, (, y3, ), <=, functionValueAccuracy]
[*, (, x1, +, x2, ), ;, final, double, y3, =, computeObjectiveValue, (, x3, ), ;, if, (, FastMath, .]
[;, final, double, y3, =, computeObjectiveValue, (, x3, ), ;, if, (, FastMath, ., abs, (, y3, ), <=, functionValueAccuracy]
[), ;, final, double, y3, =, computeObjectiveValue, (, x3, ), ;, if, (, FastMath, ., abs, (, y3, ), <=]
[+, x2, ), ;, final, double, y3, =, computeObjectiveValue, (, x3, ), ;, if, (, FastMath, ., abs, (, y3]
[), ;, final, double, y3, =, computeObjectiveValue, (, x3, ), ;, if, (, FastMath, ., abs, (, y3, ), <=]
[;, if, (, FastMath, ., abs, (, y3, ), <=, functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta]
[), ;, if, (, FastMath, ., abs, (, y3, ), <=, functionValueAccuracy, ), {, return, x3, ;, }, final, double]
[), {, return, x3, ;, }, final, double, delta, =, 1, -, (, y1, *, y2, ), /, (, y3]
[<=, functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta, =, 1, -, (, y1, *, y2, ), /]
[., abs, (, y3, ), <=, functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta, =, 1, -, (]
[), <=, functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta, =, 1, -, (, y1, *, y2, )]
[), {, return, x3, ;, }, final, double, delta, =, 1, -, (, y1, *, y2, ), /, (, y3]
[;, }, final, double, delta, =, 1, -, (, y1, *, y2, ), /, (, y3, *, y3, ), ;]
[;, final, double, correction, =, (, FastMath, ., signum, (, y2, ), *, FastMath, ., signum, (, y3, ), )]
[-, (, y1, *, y2, ), /, (, y3, *, y3, ), ;, final, double, correction, =, (, FastMath, .]
[;, final, double, correction, =, (, FastMath, ., signum, (, y2, ), *, FastMath, ., signum, (, y3, ), )]
[/, (, y3, *, y3, ), ;, final, double, correction, =, (, FastMath, ., signum, (, y2, ), *, FastMath]
[), /, (, y3, *, y3, ), ;, final, double, correction, =, (, FastMath, ., signum, (, y2, ), *]
[*, y2, ), /, (, y3, *, y3, ), ;, final, double, correction, =, (, FastMath, ., signum, (, y2]
[), /, (, y3, *, y3, ), ;, final, double, correction, =, (, FastMath, ., signum, (, y2, ), *]
[;, final, double, correction, =, (, FastMath, ., signum, (, y2, ), *, FastMath, ., signum, (, y3, ), )]
[), ;, final, double, correction, =, (, FastMath, ., signum, (, y2, ), *, FastMath, ., signum, (, y3, )]
[*, y3, ), ;, final, double, correction, =, (, FastMath, ., signum, (, y2, ), *, FastMath, ., signum, (]
[), ;, final, double, correction, =, (, FastMath, ., signum, (, y2, ), *, FastMath, ., signum, (, y3, )]
[;, final, double, x, =, x3, -, correction, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double]
[/, FastMath, ., sqrt, (, delta, ), ;, final, double, x, =, x3, -, correction, ;, final, double, y, =]
[*, (, x3, -, x1, ), /, FastMath, ., sqrt, (, delta, ), ;, final, double, x, =, x3, -]
[), *, (, x3, -, x1, ), /, FastMath, ., sqrt, (, delta, ), ;, final, double, x, =, x3]
[*, FastMath, ., signum, (, y3, ), ), *, (, x3, -, x1, ), /, FastMath, ., sqrt, (, delta]
[., signum, (, y2, ), *, FastMath, ., signum, (, y3, ), ), *, (, x3, -, x1, ), /]
[), *, FastMath, ., signum, (, y3, ), ), *, (, x3, -, x1, ), /, FastMath, ., sqrt, (]
[), *, (, x3, -, x1, ), /, FastMath, ., sqrt, (, delta, ), ;, final, double, x, =, x3]
[., signum, (, y3, ), ), *, (, x3, -, x1, ), /, FastMath, ., sqrt, (, delta, ), ;]
[), ), *, (, x3, -, x1, ), /, FastMath, ., sqrt, (, delta, ), ;, final, double, x, =]
[/, FastMath, ., sqrt, (, delta, ), ;, final, double, x, =, x3, -, correction, ;, final, double, y, =]
[), /, FastMath, ., sqrt, (, delta, ), ;, final, double, x, =, x3, -, correction, ;, final, double, y]
[-, x1, ), /, FastMath, ., sqrt, (, delta, ), ;, final, double, x, =, x3, -, correction, ;, final]
[), /, FastMath, ., sqrt, (, delta, ), ;, final, double, x, =, x3, -, correction, ;, final, double, y]
[;, final, double, x, =, x3, -, correction, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double]
[., sqrt, (, delta, ), ;, final, double, x, =, x3, -, correction, ;, final, double, y, =, computeObjectiveValue, (]
[), ;, final, double, x, =, x3, -, correction, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final]
[;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *]
[-, correction, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (]
[;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *]
[;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, )]
[), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy]
[;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ), {, return, x, ;, }, if]
[., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs]
[,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ), {, return, x]
[*, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx]
[,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ), {, return, x]
[., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=]
[), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ), {, return]
[), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ), {, return, x, ;, }]
[), {, return, x, ;, }, if, (, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x]
[<=, tolerance, ), {, return, x, ;, }, if, (, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {]
[., abs, (, x, -, oldx, ), <=, tolerance, ), {, return, x, ;, }, if, (, FastMath, ., abs]
[), <=, tolerance, ), {, return, x, ;, }, if, (, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, )]
[-, oldx, ), <=, tolerance, ), {, return, x, ;, }, if, (, FastMath, ., abs, (, y, ), <=]
[), <=, tolerance, ), {, return, x, ;, }, if, (, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, )]
[), {, return, x, ;, }, if, (, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x]
[;, }, if, (, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, if, (]
[), {, return, x, ;, }, if, (, correction, >, 0.0, ), {, if, (, FastMath, ., signum, (, y1]
[<=, functionValueAccuracy, ), {, return, x, ;, }, if, (, correction, >, 0.0, ), {, if, (, FastMath, ., signum]
[., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, if, (, correction, >, 0.0, ), {]
[), <=, functionValueAccuracy, ), {, return, x, ;, }, if, (, correction, >, 0.0, ), {, if, (, FastMath, .]
[), {, return, x, ;, }, if, (, correction, >, 0.0, ), {, if, (, FastMath, ., signum, (, y1]
[;, }, if, (, correction, >, 0.0, ), {, if, (, FastMath, ., signum, (, y1, ), +, FastMath, .]
[), {, if, (, FastMath, ., signum, (, y1, ), +, FastMath, ., signum, (, y, ), ==, 0.0, )]
[>, 0.0, ), {, if, (, FastMath, ., signum, (, y1, ), +, FastMath, ., signum, (, y, ), ==]
[), {, if, (, FastMath, ., signum, (, y1, ), +, FastMath, ., signum, (, y, ), ==, 0.0, )]
[), {, x2, =, x, ;, y2, =, y, ;, }, else, {, x1, =, x, ;, x2, =, x3]
[==, 0.0, ), {, x2, =, x, ;, y2, =, y, ;, }, else, {, x1, =, x, ;, x2]
[+, FastMath, ., signum, (, y, ), ==, 0.0, ), {, x2, =, x, ;, y2, =, y, ;, }]
[., signum, (, y1, ), +, FastMath, ., signum, (, y, ), ==, 0.0, ), {, x2, =, x, ;]
[), +, FastMath, ., signum, (, y, ), ==, 0.0, ), {, x2, =, x, ;, y2, =, y, ;]
[==, 0.0, ), {, x2, =, x, ;, y2, =, y, ;, }, else, {, x1, =, x, ;, x2]
[., signum, (, y, ), ==, 0.0, ), {, x2, =, x, ;, y2, =, y, ;, }, else, {]
[), ==, 0.0, ), {, x2, =, x, ;, y2, =, y, ;, }, else, {, x1, =, x, ;]
[), {, x2, =, x, ;, y2, =, y, ;, }, else, {, x1, =, x, ;, x2, =, x3]
[=, x, ;, y2, =, y, ;, }, else, {, x1, =, x, ;, x2, =, x3, ;, y1, =]
[;, y2, =, y, ;, }, else, {, x1, =, x, ;, x2, =, x3, ;, y1, =, y, ;]
[=, y, ;, }, else, {, x1, =, x, ;, x2, =, x3, ;, y1, =, y, ;, y2, =]
[;, }, else, {, x1, =, x, ;, x2, =, x3, ;, y1, =, y, ;, y2, =, y3, ;]
[=, x, ;, x2, =, x3, ;, y1, =, y, ;, y2, =, y3, ;, }, }, else, {, if]
[;, x2, =, x3, ;, y1, =, y, ;, y2, =, y3, ;, }, }, else, {, if, (, FastMath]
[=, x3, ;, y1, =, y, ;, y2, =, y3, ;, }, }, else, {, if, (, FastMath, ., signum]
[;, y1, =, y, ;, y2, =, y3, ;, }, }, else, {, if, (, FastMath, ., signum, (, y2]
[=, y, ;, y2, =, y3, ;, }, }, else, {, if, (, FastMath, ., signum, (, y2, ), +]
[;, y2, =, y3, ;, }, }, else, {, if, (, FastMath, ., signum, (, y2, ), +, FastMath, .]
[=, y3, ;, }, }, else, {, if, (, FastMath, ., signum, (, y2, ), +, FastMath, ., signum, (]
[;, }, }, else, {, if, (, FastMath, ., signum, (, y2, ), +, FastMath, ., signum, (, y, )]
[), {, x1, =, x, ;, y1, =, y, ;, }, else, {, x1, =, x3, ;, x2, =, x]
[==, 0.0, ), {, x1, =, x, ;, y1, =, y, ;, }, else, {, x1, =, x3, ;, x2]
[+, FastMath, ., signum, (, y, ), ==, 0.0, ), {, x1, =, x, ;, y1, =, y, ;, }]
[., signum, (, y2, ), +, FastMath, ., signum, (, y, ), ==, 0.0, ), {, x1, =, x, ;]
[), +, FastMath, ., signum, (, y, ), ==, 0.0, ), {, x1, =, x, ;, y1, =, y, ;]
[==, 0.0, ), {, x1, =, x, ;, y1, =, y, ;, }, else, {, x1, =, x3, ;, x2]
[., signum, (, y, ), ==, 0.0, ), {, x1, =, x, ;, y1, =, y, ;, }, else, {]
[), ==, 0.0, ), {, x1, =, x, ;, y1, =, y, ;, }, else, {, x1, =, x3, ;]
[), {, x1, =, x, ;, y1, =, y, ;, }, else, {, x1, =, x3, ;, x2, =, x]
[=, x, ;, y1, =, y, ;, }, else, {, x1, =, x3, ;, x2, =, x, ;, y1, =]
[;, y1, =, y, ;, }, else, {, x1, =, x3, ;, x2, =, x, ;, y1, =, y3, ;]
[=, y, ;, }, else, {, x1, =, x3, ;, x2, =, x, ;, y1, =, y3, ;, y2, =]
[;, }, else, {, x1, =, x3, ;, x2, =, x, ;, y1, =, y3, ;, y2, =, y, ;]
[=, x3, ;, x2, =, x, ;, y1, =, y3, ;, y2, =, y, ;, }, }, oldx, =, x]
[;, x2, =, x, ;, y1, =, y3, ;, y2, =, y, ;, }, }, oldx, =, x, ;, }]
[=, x, ;, y1, =, y3, ;, y2, =, y, ;, }, }, oldx, =, x, ;, }, }, }]
[;, y1, =, y3, ;, y2, =, y, ;, }, }, oldx, =, x, ;, }, }, }]
[=, y3, ;, y2, =, y, ;, }, }, oldx, =, x, ;, }, }, }]
[;, y2, =, y, ;, }, }, oldx, =, x, ;, }, }, }]
[=, y, ;, }, }, oldx, =, x, ;, }, }, }]
[;, }, }, oldx, =, x, ;, }, }, }]
[=, x, ;, }, }, }]
[;, }, }, }]
