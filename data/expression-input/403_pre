[super, (, ), ;, }, public, static, boolean, isAssignable, (, final, Type, type, ,, final, Type, toType, ), {, return]
[), ;, }, public, static, boolean, isAssignable, (, final, Type, type, ,, final, Type, toType, ), {, return, isAssignable, (]
[}, public, static, boolean, isAssignable, (, final, Type, type, ,, final, Type, toType, ), {, return, isAssignable, (, type, ,]
[static, boolean, isAssignable, (, final, Type, type, ,, final, Type, toType, ), {, return, isAssignable, (, type, ,, toType, ,]
[,, final, Type, toType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[,, final, Type, toType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[,, final, Type, toType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[Type, toType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, toType, ==]
[,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, toType, ==, null, ||]
[,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, toType, ==, null, ||]
[Type, >, typeVarAssigns, ), {, if, (, toType, ==, null, ||, toType, instanceof, Class, <, ?, >, ), {, return]
[typeVarAssigns, ), {, if, (, toType, ==, null, ||, toType, instanceof, Class, <, ?, >, ), {, return, isAssignable, (]
[{, if, (, toType, ==, null, ||, toType, instanceof, Class, <, ?, >, ), {, return, isAssignable, (, type, ,]
[||, toType, instanceof, Class, <, ?, >, ), {, return, isAssignable, (, type, ,, (, Class, <, ?, >, )]
[>, ), {, return, isAssignable, (, type, ,, (, Class, <, ?, >, ), toType, ), ;, }, if, (]
[>, ), {, return, isAssignable, (, type, ,, (, Class, <, ?, >, ), toType, ), ;, }, if, (]
[type, ,, (, Class, <, ?, >, ), toType, ), ;, }, if, (, toType, instanceof, ParameterizedType, ), {, return]
[(, Class, <, ?, >, ), toType, ), ;, }, if, (, toType, instanceof, ParameterizedType, ), {, return, isAssignable, (]
[<, ?, >, ), toType, ), ;, }, if, (, toType, instanceof, ParameterizedType, ), {, return, isAssignable, (, type, ,]
[), toType, ), ;, }, if, (, toType, instanceof, ParameterizedType, ), {, return, isAssignable, (, type, ,, (, ParameterizedType, )]
[), ;, }, if, (, toType, instanceof, ParameterizedType, ), {, return, isAssignable, (, type, ,, (, ParameterizedType, ), toType, ,]
[instanceof, ParameterizedType, ), {, return, isAssignable, (, type, ,, (, ParameterizedType, ), toType, ,, typeVarAssigns, ), ;, }, if, (]
[instanceof, ParameterizedType, ), {, return, isAssignable, (, type, ,, (, ParameterizedType, ), toType, ,, typeVarAssigns, ), ;, }, if, (]
[(, type, ,, (, ParameterizedType, ), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, GenericArrayType, ), {, return]
[,, (, ParameterizedType, ), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, GenericArrayType, ), {, return, isAssignable, (]
[ParameterizedType, ), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, GenericArrayType, ), {, return, isAssignable, (, type, ,]
[,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, GenericArrayType, ), {, return, isAssignable, (, type, ,, (, GenericArrayType, )]
[), ;, }, if, (, toType, instanceof, GenericArrayType, ), {, return, isAssignable, (, type, ,, (, GenericArrayType, ), toType, ,]
[instanceof, GenericArrayType, ), {, return, isAssignable, (, type, ,, (, GenericArrayType, ), toType, ,, typeVarAssigns, ), ;, }, if, (]
[instanceof, GenericArrayType, ), {, return, isAssignable, (, type, ,, (, GenericArrayType, ), toType, ,, typeVarAssigns, ), ;, }, if, (]
[(, type, ,, (, GenericArrayType, ), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, WildcardType, ), {, return]
[,, (, GenericArrayType, ), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, WildcardType, ), {, return, isAssignable, (]
[GenericArrayType, ), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, WildcardType, ), {, return, isAssignable, (, type, ,]
[,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, WildcardType, ), {, return, isAssignable, (, type, ,, (, WildcardType, )]
[), ;, }, if, (, toType, instanceof, WildcardType, ), {, return, isAssignable, (, type, ,, (, WildcardType, ), toType, ,]
[instanceof, WildcardType, ), {, return, isAssignable, (, type, ,, (, WildcardType, ), toType, ,, typeVarAssigns, ), ;, }, if, (]
[instanceof, WildcardType, ), {, return, isAssignable, (, type, ,, (, WildcardType, ), toType, ,, typeVarAssigns, ), ;, }, if, (]
[(, WildcardType, ), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, TypeVariable, <, ?, >, ), {, return]
[), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, TypeVariable, <, ?, >, ), {, return, isAssignable, (]
[,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, TypeVariable, <, ?, >, ), {, return, isAssignable, (, type, ,]
[(, toType, instanceof, TypeVariable, <, ?, >, ), {, return, isAssignable, (, type, ,, (, TypeVariable, <, ?, >, )]
[instanceof, TypeVariable, <, ?, >, ), {, return, isAssignable, (, type, ,, (, TypeVariable, <, ?, >, ), toType, ,]
[), {, return, isAssignable, (, type, ,, (, TypeVariable, <, ?, >, ), toType, ,, typeVarAssigns, ), ;, }, throw]
[isAssignable, (, type, ,, (, TypeVariable, <, ?, >, ), toType, ,, typeVarAssigns, ), ;, }, throw, new, IllegalStateException, (]
[isAssignable, (, type, ,, (, TypeVariable, <, ?, >, ), toType, ,, typeVarAssigns, ), ;, }, throw, new, IllegalStateException, (]
[type, ,, (, TypeVariable, <, ?, >, ), toType, ,, typeVarAssigns, ), ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +]
[}, private, static, boolean, isAssignable, (, final, Type, type, ,, final, Class, <, ?, >, toClass, ), {, if, (]
[}, private, static, boolean, isAssignable, (, final, Type, type, ,, final, Class, <, ?, >, toClass, ), {, if, (]
[static, boolean, isAssignable, (, final, Type, type, ,, final, Class, <, ?, >, toClass, ), {, if, (, type, ==]
[final, Type, type, ,, final, Class, <, ?, >, toClass, ), {, if, (, type, ==, null, ), {, return]
[final, Type, type, ,, final, Class, <, ?, >, toClass, ), {, if, (, type, ==, null, ), {, return]
[final, Type, type, ,, final, Class, <, ?, >, toClass, ), {, if, (, type, ==, null, ), {, return]
[type, ,, final, Class, <, ?, >, toClass, ), {, if, (, type, ==, null, ), {, return, toClass, ==]
[final, Class, <, ?, >, toClass, ), {, if, (, type, ==, null, ), {, return, toClass, ==, null, ||]
[Class, <, ?, >, toClass, ), {, if, (, type, ==, null, ), {, return, toClass, ==, null, ||, !]
[Class, <, ?, >, toClass, ), {, if, (, type, ==, null, ), {, return, toClass, ==, null, ||, !]
[type, ==, null, ), {, return, toClass, ==, null, ||, !, toClass, ., isPrimitive, (, ), ;, }, if, (]
[type, ==, null, ), {, return, toClass, ==, null, ||, !, toClass, ., isPrimitive, (, ), ;, }, if, (]
[null, ), {, return, toClass, ==, null, ||, !, toClass, ., isPrimitive, (, ), ;, }, if, (, toClass, ==]
[toClass, ==, null, ||, !, toClass, ., isPrimitive, (, ), ;, }, if, (, toClass, ==, null, ), {, return]
[toClass, ., isPrimitive, (, ), ;, }, if, (, toClass, ==, null, ), {, return, false, ;, }, if, (]
[toClass, ., isPrimitive, (, ), ;, }, if, (, toClass, ==, null, ), {, return, false, ;, }, if, (]
[), ;, }, if, (, toClass, ==, null, ), {, return, false, ;, }, if, (, toClass, ., equals, (]
[toClass, ==, null, ), {, return, false, ;, }, if, (, toClass, ., equals, (, type, ), ), {, return]
[return, false, ;, }, if, (, toClass, ., equals, (, type, ), ), {, return, true, ;, }, if, (]
[return, false, ;, }, if, (, toClass, ., equals, (, type, ), ), {, return, true, ;, }, if, (]
[(, type, ), ), {, return, true, ;, }, if, (, type, instanceof, Class, <, ?, >, ), {, return]
[(, type, ), ), {, return, true, ;, }, if, (, type, instanceof, Class, <, ?, >, ), {, return]
[{, return, true, ;, }, if, (, type, instanceof, Class, <, ?, >, ), {, return, ClassUtils, ., isAssignable, (]
[(, type, instanceof, Class, <, ?, >, ), {, return, ClassUtils, ., isAssignable, (, (, Class, <, ?, >, )]
[instanceof, Class, <, ?, >, ), {, return, ClassUtils, ., isAssignable, (, (, Class, <, ?, >, ), type, ,]
[{, return, ClassUtils, ., isAssignable, (, (, Class, <, ?, >, ), type, ,, toClass, ), ;, }, if, (]
[{, return, ClassUtils, ., isAssignable, (, (, Class, <, ?, >, ), type, ,, toClass, ), ;, }, if, (]
[(, Class, <, ?, >, ), type, ,, toClass, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return]
[<, ?, >, ), type, ,, toClass, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, isAssignable, (]
[>, ), type, ,, toClass, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, isAssignable, (, getRawType, (]
[,, toClass, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, isAssignable, (, getRawType, (, (, ParameterizedType, )]
[;, }, if, (, type, instanceof, ParameterizedType, ), {, return, isAssignable, (, getRawType, (, (, ParameterizedType, ), type, ), ,]
[ParameterizedType, ), {, return, isAssignable, (, getRawType, (, (, ParameterizedType, ), type, ), ,, toClass, ), ;, }, if, (]
[ParameterizedType, ), {, return, isAssignable, (, getRawType, (, (, ParameterizedType, ), type, ), ,, toClass, ), ;, }, if, (]
[toClass, ), ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :]
[toClass, ), ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :]
[), ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :, (]
[instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :, (, (, TypeVariable, <, ?, >, )]
[Type, bound, :, (, (, TypeVariable, <, ?, >, ), type, ), ., getBounds, (, ), ), {, if, (]
[:, (, (, TypeVariable, <, ?, >, ), type, ), ., getBounds, (, ), ), {, if, (, isAssignable, (]
[(, TypeVariable, <, ?, >, ), type, ), ., getBounds, (, ), ), {, if, (, isAssignable, (, bound, ,]
[), type, ), ., getBounds, (, ), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return]
[(, ), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, true, ;, }, }, return]
[(, isAssignable, (, bound, ,, toClass, ), ), {, return, true, ;, }, }, return, false, ;, }, if, (]
[(, isAssignable, (, bound, ,, toClass, ), ), {, return, true, ;, }, }, return, false, ;, }, if, (]
[), ), {, return, true, ;, }, }, return, false, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return]
[), ), {, return, true, ;, }, }, return, false, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return]
[), ), {, return, true, ;, }, }, return, false, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return]
[true, ;, }, }, return, false, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, toClass, ., equals, (]
[false, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, toClass, ., equals, (, Object, ., class, ), ||]
[false, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, toClass, ., equals, (, Object, ., class, ), ||]
[false, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, toClass, ., equals, (, Object, ., class, ), ||]
[instanceof, GenericArrayType, ), {, return, toClass, ., equals, (, Object, ., class, ), ||, toClass, ., isArray, (, ), &&]
[), {, return, toClass, ., equals, (, Object, ., class, ), ||, toClass, ., isArray, (, ), &&, isAssignable, (]
[), {, return, toClass, ., equals, (, Object, ., class, ), ||, toClass, ., isArray, (, ), &&, isAssignable, (]
[{, return, toClass, ., equals, (, Object, ., class, ), ||, toClass, ., isArray, (, ), &&, isAssignable, (, (]
[., equals, (, Object, ., class, ), ||, toClass, ., isArray, (, ), &&, isAssignable, (, (, (, GenericArrayType, )]
[||, toClass, ., isArray, (, ), &&, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,]
[||, toClass, ., isArray, (, ), &&, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,]
[(, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toClass, ., getComponentType, (, ), ), ;, }, if, (]
[(, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toClass, ., getComponentType, (, ), ), ;, }, if, (]
[getGenericComponentType, (, ), ,, toClass, ., getComponentType, (, ), ), ;, }, if, (, type, instanceof, WildcardType, ), {, return]
[toClass, ., getComponentType, (, ), ), ;, }, if, (, type, instanceof, WildcardType, ), {, return, false, ;, }, throw]
[(, ), ), ;, }, if, (, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (]
[(, ), ), ;, }, if, (, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (]
[), ;, }, if, (, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +]
[,, final, ParameterizedType, toParameterizedType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[,, final, ParameterizedType, toParameterizedType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[ParameterizedType, toParameterizedType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==]
[Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return]
[>, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return, true, ;, }, if, (]
[>, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return, true, ;, }, if, (]
[Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return, true, ;, }, if, (, toParameterizedType, ==]
[{, if, (, type, ==, null, ), {, return, true, ;, }, if, (, toParameterizedType, ==, null, ), {, return]
[null, ), {, return, true, ;, }, if, (, toParameterizedType, ==, null, ), {, return, false, ;, }, if, (]
[null, ), {, return, true, ;, }, if, (, toParameterizedType, ==, null, ), {, return, false, ;, }, if, (]
[true, ;, }, if, (, toParameterizedType, ==, null, ), {, return, false, ;, }, if, (, toParameterizedType, ., equals, (]
[toParameterizedType, ==, null, ), {, return, false, ;, }, if, (, toParameterizedType, ., equals, (, type, ), ), {, return]
[(, toParameterizedType, ., equals, (, type, ), ), {, return, true, ;, }, final, Class, <, ?, >, toClass, =]
[., equals, (, type, ), ), {, return, true, ;, }, final, Class, <, ?, >, toClass, =, getRawType, (]
[>, toClass, =, getRawType, (, toParameterizedType, ), ;, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, fromTypeVarAssigns, =]
[=, getRawType, (, toParameterizedType, ), ;, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, fromTypeVarAssigns, =, getTypeArguments, (]
[(, toParameterizedType, ), ;, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, fromTypeVarAssigns, =, getTypeArguments, (, type, ,]
[), ;, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, fromTypeVarAssigns, =, getTypeArguments, (, type, ,, toClass, ,]
[TypeVariable, <, ?, >, ,, Type, >, fromTypeVarAssigns, =, getTypeArguments, (, type, ,, toClass, ,, null, ), ;, if, (]
[TypeVariable, <, ?, >, ,, Type, >, fromTypeVarAssigns, =, getTypeArguments, (, type, ,, toClass, ,, null, ), ;, if, (]
[?, >, ,, Type, >, fromTypeVarAssigns, =, getTypeArguments, (, type, ,, toClass, ,, null, ), ;, if, (, fromTypeVarAssigns, ==]
[>, fromTypeVarAssigns, =, getTypeArguments, (, type, ,, toClass, ,, null, ), ;, if, (, fromTypeVarAssigns, ==, null, ), {, return]
[type, ,, toClass, ,, null, ), ;, if, (, fromTypeVarAssigns, ==, null, ), {, return, false, ;, }, if, (]
[type, ,, toClass, ,, null, ), ;, if, (, fromTypeVarAssigns, ==, null, ), {, return, false, ;, }, if, (]
[(, fromTypeVarAssigns, ==, null, ), {, return, false, ;, }, if, (, fromTypeVarAssigns, ., isEmpty, (, ), ), {, return]
[(, ), ), {, return, true, ;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, toTypeVarAssigns, =]
[), {, return, true, ;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, toTypeVarAssigns, =, getTypeArguments, (]
[return, true, ;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, toTypeVarAssigns, =, getTypeArguments, (, toParameterizedType, ,]
[;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, toTypeVarAssigns, =, getTypeArguments, (, toParameterizedType, ,, toClass, ,]
[toTypeVarAssigns, =, getTypeArguments, (, toParameterizedType, ,, toClass, ,, typeVarAssigns, ), ;, for, (, final, TypeVariable, <, ?, >, var, :]
[toTypeVarAssigns, =, getTypeArguments, (, toParameterizedType, ,, toClass, ,, typeVarAssigns, ), ;, for, (, final, TypeVariable, <, ?, >, var, :]
[for, (, final, TypeVariable, <, ?, >, var, :, toTypeVarAssigns, ., keySet, (, ), ), {, final, Type, toTypeArg, =]
[final, TypeVariable, <, ?, >, var, :, toTypeVarAssigns, ., keySet, (, ), ), {, final, Type, toTypeArg, =, unrollVariableAssignments, (]
[<, ?, >, var, :, toTypeVarAssigns, ., keySet, (, ), ), {, final, Type, toTypeArg, =, unrollVariableAssignments, (, var, ,]
[keySet, (, ), ), {, final, Type, toTypeArg, =, unrollVariableAssignments, (, var, ,, toTypeVarAssigns, ), ;, final, Type, fromTypeArg, =]
[), ), {, final, Type, toTypeArg, =, unrollVariableAssignments, (, var, ,, toTypeVarAssigns, ), ;, final, Type, fromTypeArg, =, unrollVariableAssignments, (]
[{, final, Type, toTypeArg, =, unrollVariableAssignments, (, var, ,, toTypeVarAssigns, ), ;, final, Type, fromTypeArg, =, unrollVariableAssignments, (, var, ,]
[unrollVariableAssignments, (, var, ,, toTypeVarAssigns, ), ;, final, Type, fromTypeArg, =, unrollVariableAssignments, (, var, ,, fromTypeVarAssigns, ), ;, if, (]
[unrollVariableAssignments, (, var, ,, toTypeVarAssigns, ), ;, final, Type, fromTypeArg, =, unrollVariableAssignments, (, var, ,, fromTypeVarAssigns, ), ;, if, (]
[unrollVariableAssignments, (, var, ,, toTypeVarAssigns, ), ;, final, Type, fromTypeArg, =, unrollVariableAssignments, (, var, ,, fromTypeVarAssigns, ), ;, if, (]
[unrollVariableAssignments, (, var, ,, toTypeVarAssigns, ), ;, final, Type, fromTypeArg, =, unrollVariableAssignments, (, var, ,, fromTypeVarAssigns, ), ;, if, (]
[var, ,, toTypeVarAssigns, ), ;, final, Type, fromTypeArg, =, unrollVariableAssignments, (, var, ,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=]
[toTypeVarAssigns, ), ;, final, Type, fromTypeArg, =, unrollVariableAssignments, (, var, ,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=, null, &&]
[), ;, final, Type, fromTypeArg, =, unrollVariableAssignments, (, var, ,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=, null, &&, !]
[), ;, final, Type, fromTypeArg, =, unrollVariableAssignments, (, var, ,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=, null, &&, !]
[fromTypeArg, =, unrollVariableAssignments, (, var, ,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=, null, &&, !, toTypeArg, ., equals, (]
[(, var, ,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=, null, &&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&]
[var, ,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=, null, &&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !]
[,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=, null, &&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (]
[,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=, null, &&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (]
[,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=, null, &&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (]
[if, (, fromTypeArg, !=, null, &&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (, toTypeArg, instanceof, WildcardType, &&]
[fromTypeArg, !=, null, &&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (]
[null, &&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,]
[!, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,]
[), &&, !, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, ), ), ), {, return]
[instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, ), ), ), {, return, false, ;, }, }, return]
[var, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, Type, result, ;, do, {]
[final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, Type, result, ;, do, {, result, =]
[final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, Type, result, ;, do, {, result, =]
[<, ?, >, ,, Type, >, typeVarAssigns, ), {, Type, result, ;, do, {, result, =, typeVarAssigns, ., get, (]
[>, typeVarAssigns, ), {, Type, result, ;, do, {, result, =, typeVarAssigns, ., get, (, var, ), ;, if, (]
[>, typeVarAssigns, ), {, Type, result, ;, do, {, result, =, typeVarAssigns, ., get, (, var, ), ;, if, (]
[>, typeVarAssigns, ), {, Type, result, ;, do, {, result, =, typeVarAssigns, ., get, (, var, ), ;, if, (]
[do, {, result, =, typeVarAssigns, ., get, (, var, ), ;, if, (, result, instanceof, TypeVariable, <, ?, >, &&]
[{, result, =, typeVarAssigns, ., get, (, var, ), ;, if, (, result, instanceof, TypeVariable, <, ?, >, &&, !]
[{, result, =, typeVarAssigns, ., get, (, var, ), ;, if, (, result, instanceof, TypeVariable, <, ?, >, &&, !]
[., get, (, var, ), ;, if, (, result, instanceof, TypeVariable, <, ?, >, &&, !, result, ., equals, (]
[), ;, if, (, result, instanceof, TypeVariable, <, ?, >, &&, !, result, ., equals, (, var, ), ), {]
[if, (, result, instanceof, TypeVariable, <, ?, >, &&, !, result, ., equals, (, var, ), ), {, var, =]
[?, >, &&, !, result, ., equals, (, var, ), ), {, var, =, (, TypeVariable, <, ?, >, )]
[), {, var, =, (, TypeVariable, <, ?, >, ), result, ;, continue, ;, }, break, ;, }, while, (]
[(, TypeVariable, <, ?, >, ), result, ;, continue, ;, }, break, ;, }, while, (, true, ), ;, return]
[,, final, GenericArrayType, toGenericArrayType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[,, final, GenericArrayType, toGenericArrayType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[GenericArrayType, toGenericArrayType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==]
[Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return]
[>, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return, true, ;, }, if, (]
[>, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return, true, ;, }, if, (]
[Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return, true, ;, }, if, (, toGenericArrayType, ==]
[{, if, (, type, ==, null, ), {, return, true, ;, }, if, (, toGenericArrayType, ==, null, ), {, return]
[null, ), {, return, true, ;, }, if, (, toGenericArrayType, ==, null, ), {, return, false, ;, }, if, (]
[null, ), {, return, true, ;, }, if, (, toGenericArrayType, ==, null, ), {, return, false, ;, }, if, (]
[true, ;, }, if, (, toGenericArrayType, ==, null, ), {, return, false, ;, }, if, (, toGenericArrayType, ., equals, (]
[toGenericArrayType, ==, null, ), {, return, false, ;, }, if, (, toGenericArrayType, ., equals, (, type, ), ), {, return]
[;, }, if, (, toGenericArrayType, ., equals, (, type, ), ), {, return, true, ;, }, final, Type, toComponentType, =]
[;, }, if, (, toGenericArrayType, ., equals, (, type, ), ), {, return, true, ;, }, final, Type, toComponentType, =]
[type, ), ), {, return, true, ;, }, final, Type, toComponentType, =, toGenericArrayType, ., getGenericComponentType, (, ), ;, if, (]
[type, ), ), {, return, true, ;, }, final, Type, toComponentType, =, toGenericArrayType, ., getGenericComponentType, (, ), ;, if, (]
[(, ), ;, if, (, type, instanceof, Class, <, ?, >, ), {, final, Class, <, ?, >, cls, =]
[instanceof, Class, <, ?, >, ), {, final, Class, <, ?, >, cls, =, (, Class, <, ?, >, )]
[?, >, ), {, final, Class, <, ?, >, cls, =, (, Class, <, ?, >, ), type, ;, return]
[?, >, ), {, final, Class, <, ?, >, cls, =, (, Class, <, ?, >, ), type, ;, return]
[?, >, ), {, final, Class, <, ?, >, cls, =, (, Class, <, ?, >, ), type, ;, return]
[<, ?, >, cls, =, (, Class, <, ?, >, ), type, ;, return, cls, ., isArray, (, ), &&]
[>, cls, =, (, Class, <, ?, >, ), type, ;, return, cls, ., isArray, (, ), &&, isAssignable, (]
[>, cls, =, (, Class, <, ?, >, ), type, ;, return, cls, ., isArray, (, ), &&, isAssignable, (]
[?, >, ), type, ;, return, cls, ., isArray, (, ), &&, isAssignable, (, cls, ., getComponentType, (, ), ,]
[), type, ;, return, cls, ., isArray, (, ), &&, isAssignable, (, cls, ., getComponentType, (, ), ,, toComponentType, ,]
[isArray, (, ), &&, isAssignable, (, cls, ., getComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (]
[isArray, (, ), &&, isAssignable, (, cls, ., getComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (]
[cls, ., getComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return]
[getComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, isAssignable, (]
[getComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, isAssignable, (]
[(, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, isAssignable, (, (]
[toComponentType, ,, typeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, isAssignable, (, (, (, GenericArrayType, )]
[(, type, instanceof, GenericArrayType, ), {, return, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,]
[instanceof, GenericArrayType, ), {, return, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toComponentType, ,]
[(, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (]
[(, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (]
[,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :]
[,, typeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (]
[;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, )]
[WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, ), type, ), ), {, if, (]
[{, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, ), type, ), ), {, if, (, isAssignable, (]
[(, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, ), type, ), ), {, if, (, isAssignable, (, bound, ,]
[getImplicitUpperBounds, (, (, WildcardType, ), type, ), ), {, if, (, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return]
[type, ), ), {, if, (, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return, true, ;, }, }, return]
[(, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return, true, ;, }, }, return, false, ;, }, if, (]
[(, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return, true, ;, }, }, return, false, ;, }, if, (]
[return, false, ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :]
[;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :, getImplicitBounds, (]
[TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :, getImplicitBounds, (, (, TypeVariable, <, ?, >, )]
[for, (, final, Type, bound, :, getImplicitBounds, (, (, TypeVariable, <, ?, >, ), type, ), ), {, if, (]
[final, Type, bound, :, getImplicitBounds, (, (, TypeVariable, <, ?, >, ), type, ), ), {, if, (, isAssignable, (]
[bound, :, getImplicitBounds, (, (, TypeVariable, <, ?, >, ), type, ), ), {, if, (, isAssignable, (, bound, ,]
[TypeVariable, <, ?, >, ), type, ), ), {, if, (, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return]
[type, ), ), {, if, (, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return, true, ;, }, }, return]
[(, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return, true, ;, }, }, return, false, ;, }, if, (]
[(, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return, true, ;, }, }, return, false, ;, }, if, (]
[), ), {, return, true, ;, }, }, return, false, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return]
[true, ;, }, }, return, false, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, false, ;, }, throw]
[}, return, false, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, false, ;, }, throw, new, IllegalStateException, (]
[}, return, false, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, false, ;, }, throw, new, IllegalStateException, (]
[false, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +]
[,, final, WildcardType, toWildcardType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[,, final, WildcardType, toWildcardType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[WildcardType, toWildcardType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==]
[Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return]
[>, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return, true, ;, }, if, (]
[>, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return, true, ;, }, if, (]
[Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return, true, ;, }, if, (, toWildcardType, ==]
[{, if, (, type, ==, null, ), {, return, true, ;, }, if, (, toWildcardType, ==, null, ), {, return]
[null, ), {, return, true, ;, }, if, (, toWildcardType, ==, null, ), {, return, false, ;, }, if, (]
[null, ), {, return, true, ;, }, if, (, toWildcardType, ==, null, ), {, return, false, ;, }, if, (]
[true, ;, }, if, (, toWildcardType, ==, null, ), {, return, false, ;, }, if, (, toWildcardType, ., equals, (]
[toWildcardType, ==, null, ), {, return, false, ;, }, if, (, toWildcardType, ., equals, (, type, ), ), {, return]
[if, (, toWildcardType, ., equals, (, type, ), ), {, return, true, ;, }, final, Type, [, ], toUpperBounds, =]
[toWildcardType, ., equals, (, type, ), ), {, return, true, ;, }, final, Type, [, ], toUpperBounds, =, getImplicitUpperBounds, (]
[true, ;, }, final, Type, [, ], toUpperBounds, =, getImplicitUpperBounds, (, toWildcardType, ), ;, final, Type, [, ], toLowerBounds, =]
[}, final, Type, [, ], toUpperBounds, =, getImplicitUpperBounds, (, toWildcardType, ), ;, final, Type, [, ], toLowerBounds, =, getImplicitLowerBounds, (]
[toUpperBounds, =, getImplicitUpperBounds, (, toWildcardType, ), ;, final, Type, [, ], toLowerBounds, =, getImplicitLowerBounds, (, toWildcardType, ), ;, if, (]
[toUpperBounds, =, getImplicitUpperBounds, (, toWildcardType, ), ;, final, Type, [, ], toLowerBounds, =, getImplicitLowerBounds, (, toWildcardType, ), ;, if, (]
[[, ], toLowerBounds, =, getImplicitLowerBounds, (, toWildcardType, ), ;, if, (, type, instanceof, WildcardType, ), {, final, WildcardType, wildcardType, =]
[=, getImplicitLowerBounds, (, toWildcardType, ), ;, if, (, type, instanceof, WildcardType, ), {, final, WildcardType, wildcardType, =, (, WildcardType, )]
[type, instanceof, WildcardType, ), {, final, WildcardType, wildcardType, =, (, WildcardType, ), type, ;, final, Type, [, ], upperBounds, =]
[WildcardType, ), {, final, WildcardType, wildcardType, =, (, WildcardType, ), type, ;, final, Type, [, ], upperBounds, =, getImplicitUpperBounds, (]
[), type, ;, final, Type, [, ], upperBounds, =, getImplicitUpperBounds, (, wildcardType, ), ;, final, Type, [, ], lowerBounds, =]
[;, final, Type, [, ], upperBounds, =, getImplicitUpperBounds, (, wildcardType, ), ;, final, Type, [, ], lowerBounds, =, getImplicitLowerBounds, (]
[(, wildcardType, ), ;, final, Type, [, ], lowerBounds, =, getImplicitLowerBounds, (, wildcardType, ), ;, for, (, Type, toBound, :]
[;, final, Type, [, ], lowerBounds, =, getImplicitLowerBounds, (, wildcardType, ), ;, for, (, Type, toBound, :, toUpperBounds, ), {]
[Type, [, ], lowerBounds, =, getImplicitLowerBounds, (, wildcardType, ), ;, for, (, Type, toBound, :, toUpperBounds, ), {, toBound, =]
[], lowerBounds, =, getImplicitLowerBounds, (, wildcardType, ), ;, for, (, Type, toBound, :, toUpperBounds, ), {, toBound, =, substituteTypeVariables, (]
[=, getImplicitLowerBounds, (, wildcardType, ), ;, for, (, Type, toBound, :, toUpperBounds, ), {, toBound, =, substituteTypeVariables, (, toBound, ,]
[toBound, :, toUpperBounds, ), {, toBound, =, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ;, for, (, final, Type, bound, :]
[toBound, =, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, upperBounds, ), {, if, (]
[=, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, upperBounds, ), {, if, (, !]
[(, toBound, ,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, upperBounds, ), {, if, (, !, isAssignable, (]
[,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, upperBounds, ), {, if, (, !, isAssignable, (, bound, ,]
[), ;, for, (, final, Type, bound, :, upperBounds, ), {, if, (, !, isAssignable, (, bound, ,, toBound, ,]
[Type, bound, :, upperBounds, ), {, if, (, !, isAssignable, (, bound, ,, toBound, ,, typeVarAssigns, ), ), {, return]
[(, bound, ,, toBound, ,, typeVarAssigns, ), ), {, return, false, ;, }, }, }, for, (, Type, toBound, :]
[toBound, ,, typeVarAssigns, ), ), {, return, false, ;, }, }, }, for, (, Type, toBound, :, toLowerBounds, ), {]
[typeVarAssigns, ), ), {, return, false, ;, }, }, }, for, (, Type, toBound, :, toLowerBounds, ), {, toBound, =]
[), {, return, false, ;, }, }, }, for, (, Type, toBound, :, toLowerBounds, ), {, toBound, =, substituteTypeVariables, (]
[return, false, ;, }, }, }, for, (, Type, toBound, :, toLowerBounds, ), {, toBound, =, substituteTypeVariables, (, toBound, ,]
[toBound, :, toLowerBounds, ), {, toBound, =, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ;, for, (, final, Type, bound, :]
[toBound, =, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, lowerBounds, ), {, if, (]
[=, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, lowerBounds, ), {, if, (, !]
[(, toBound, ,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, lowerBounds, ), {, if, (, !, isAssignable, (]
[,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, lowerBounds, ), {, if, (, !, isAssignable, (, toBound, ,]
[), ;, for, (, final, Type, bound, :, lowerBounds, ), {, if, (, !, isAssignable, (, toBound, ,, bound, ,]
[Type, bound, :, lowerBounds, ), {, if, (, !, isAssignable, (, toBound, ,, bound, ,, typeVarAssigns, ), ), {, return]
[if, (, !, isAssignable, (, toBound, ,, bound, ,, typeVarAssigns, ), ), {, return, false, ;, }, }, }, return]
[typeVarAssigns, ), ), {, return, false, ;, }, }, }, return, true, ;, }, for, (, final, Type, toBound, :]
[false, ;, }, }, }, return, true, ;, }, for, (, final, Type, toBound, :, toUpperBounds, ), {, if, (]
[;, }, }, }, return, true, ;, }, for, (, final, Type, toBound, :, toUpperBounds, ), {, if, (, !]
[}, }, return, true, ;, }, for, (, final, Type, toBound, :, toUpperBounds, ), {, if, (, !, isAssignable, (]
[return, true, ;, }, for, (, final, Type, toBound, :, toUpperBounds, ), {, if, (, !, isAssignable, (, type, ,]
[;, }, for, (, final, Type, toBound, :, toUpperBounds, ), {, if, (, !, isAssignable, (, type, ,, substituteTypeVariables, (]
[for, (, final, Type, toBound, :, toUpperBounds, ), {, if, (, !, isAssignable, (, type, ,, substituteTypeVariables, (, toBound, ,]
[Type, toBound, :, toUpperBounds, ), {, if, (, !, isAssignable, (, type, ,, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ,]
[{, if, (, !, isAssignable, (, type, ,, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ,, typeVarAssigns, ), ), {, return]
[toBound, ,, typeVarAssigns, ), ,, typeVarAssigns, ), ), {, return, false, ;, }, }, for, (, final, Type, toBound, :]
[typeVarAssigns, ), ), {, return, false, ;, }, }, for, (, final, Type, toBound, :, toLowerBounds, ), {, if, (]
[), ), {, return, false, ;, }, }, for, (, final, Type, toBound, :, toLowerBounds, ), {, if, (, !]
[{, return, false, ;, }, }, for, (, final, Type, toBound, :, toLowerBounds, ), {, if, (, !, isAssignable, (]
[false, ;, }, }, for, (, final, Type, toBound, :, toLowerBounds, ), {, if, (, !, isAssignable, (, substituteTypeVariables, (]
[}, }, for, (, final, Type, toBound, :, toLowerBounds, ), {, if, (, !, isAssignable, (, substituteTypeVariables, (, toBound, ,]
[(, final, Type, toBound, :, toLowerBounds, ), {, if, (, !, isAssignable, (, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ,]
[Type, toBound, :, toLowerBounds, ), {, if, (, !, isAssignable, (, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ,, type, ,]
[{, if, (, !, isAssignable, (, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ,, type, ,, typeVarAssigns, ), ), {, return]
[(, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ,, type, ,, typeVarAssigns, ), ), {, return, false, ;, }, }, return]
[<, ?, >, toTypeVariable, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[<, ?, >, toTypeVariable, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[>, toTypeVariable, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==]
[Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return]
[>, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return, true, ;, }, if, (]
[>, ,, Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return, true, ;, }, if, (]
[Type, >, typeVarAssigns, ), {, if, (, type, ==, null, ), {, return, true, ;, }, if, (, toTypeVariable, ==]
[{, if, (, type, ==, null, ), {, return, true, ;, }, if, (, toTypeVariable, ==, null, ), {, return]
[null, ), {, return, true, ;, }, if, (, toTypeVariable, ==, null, ), {, return, false, ;, }, if, (]
[null, ), {, return, true, ;, }, if, (, toTypeVariable, ==, null, ), {, return, false, ;, }, if, (]
[true, ;, }, if, (, toTypeVariable, ==, null, ), {, return, false, ;, }, if, (, toTypeVariable, ., equals, (]
[toTypeVariable, ==, null, ), {, return, false, ;, }, if, (, toTypeVariable, ., equals, (, type, ), ), {, return]
[return, false, ;, }, if, (, toTypeVariable, ., equals, (, type, ), ), {, return, true, ;, }, if, (]
[return, false, ;, }, if, (, toTypeVariable, ., equals, (, type, ), ), {, return, true, ;, }, if, (]
[return, true, ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, final, Type, [, ], bounds, =]
[;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, final, Type, [, ], bounds, =, getImplicitBounds, (]
[TypeVariable, <, ?, >, ), {, final, Type, [, ], bounds, =, getImplicitBounds, (, (, TypeVariable, <, ?, >, )]
[], bounds, =, getImplicitBounds, (, (, TypeVariable, <, ?, >, ), type, ), ;, for, (, final, Type, bound, :]
[(, TypeVariable, <, ?, >, ), type, ), ;, for, (, final, Type, bound, :, bounds, ), {, if, (]
[<, ?, >, ), type, ), ;, for, (, final, Type, bound, :, bounds, ), {, if, (, isAssignable, (]
[>, ), type, ), ;, for, (, final, Type, bound, :, bounds, ), {, if, (, isAssignable, (, bound, ,]
[type, ), ;, for, (, final, Type, bound, :, bounds, ), {, if, (, isAssignable, (, bound, ,, toTypeVariable, ,]
[final, Type, bound, :, bounds, ), {, if, (, isAssignable, (, bound, ,, toTypeVariable, ,, typeVarAssigns, ), ), {, return]
[if, (, isAssignable, (, bound, ,, toTypeVariable, ,, typeVarAssigns, ), ), {, return, true, ;, }, }, }, if, (]
[if, (, isAssignable, (, bound, ,, toTypeVariable, ,, typeVarAssigns, ), ), {, return, true, ;, }, }, }, if, (]
[if, (, isAssignable, (, bound, ,, toTypeVariable, ,, typeVarAssigns, ), ), {, return, true, ;, }, }, }, if, (]
[if, (, isAssignable, (, bound, ,, toTypeVariable, ,, typeVarAssigns, ), ), {, return, true, ;, }, }, }, if, (]
[if, (, isAssignable, (, bound, ,, toTypeVariable, ,, typeVarAssigns, ), ), {, return, true, ;, }, }, }, if, (]
[,, typeVarAssigns, ), ), {, return, true, ;, }, }, }, if, (, type, instanceof, Class, <, ?, >, ||]
[,, typeVarAssigns, ), ), {, return, true, ;, }, }, }, if, (, type, instanceof, Class, <, ?, >, ||]
[{, return, true, ;, }, }, }, if, (, type, instanceof, Class, <, ?, >, ||, type, instanceof, ParameterizedType, ||]
[{, return, true, ;, }, }, }, if, (, type, instanceof, Class, <, ?, >, ||, type, instanceof, ParameterizedType, ||]
[}, }, }, if, (, type, instanceof, Class, <, ?, >, ||, type, instanceof, ParameterizedType, ||, type, instanceof, GenericArrayType, ||]
[}, }, }, if, (, type, instanceof, Class, <, ?, >, ||, type, instanceof, ParameterizedType, ||, type, instanceof, GenericArrayType, ||]
[instanceof, Class, <, ?, >, ||, type, instanceof, ParameterizedType, ||, type, instanceof, GenericArrayType, ||, type, instanceof, WildcardType, ), {, return]
[>, ||, type, instanceof, ParameterizedType, ||, type, instanceof, GenericArrayType, ||, type, instanceof, WildcardType, ), {, return, false, ;, }, throw]
[instanceof, ParameterizedType, ||, type, instanceof, GenericArrayType, ||, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (]
[instanceof, ParameterizedType, ||, type, instanceof, GenericArrayType, ||, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (]
[||, type, instanceof, GenericArrayType, ||, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +]
[(, final, Type, type, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[(, final, Type, type, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[(, final, Type, type, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (]
[<, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, type, instanceof, TypeVariable, <, ?, >, &&]
[<, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, type, instanceof, TypeVariable, <, ?, >, &&]
[<, ?, >, ,, Type, >, typeVarAssigns, ), {, if, (, type, instanceof, TypeVariable, <, ?, >, &&, typeVarAssigns, !=]
[), {, if, (, type, instanceof, TypeVariable, <, ?, >, &&, typeVarAssigns, !=, null, ), {, final, Type, replacementType, =]
[), {, if, (, type, instanceof, TypeVariable, <, ?, >, &&, typeVarAssigns, !=, null, ), {, final, Type, replacementType, =]
[type, instanceof, TypeVariable, <, ?, >, &&, typeVarAssigns, !=, null, ), {, final, Type, replacementType, =, typeVarAssigns, ., get, (]
[>, &&, typeVarAssigns, !=, null, ), {, final, Type, replacementType, =, typeVarAssigns, ., get, (, type, ), ;, if, (]
[>, &&, typeVarAssigns, !=, null, ), {, final, Type, replacementType, =, typeVarAssigns, ., get, (, type, ), ;, if, (]
[typeVarAssigns, !=, null, ), {, final, Type, replacementType, =, typeVarAssigns, ., get, (, type, ), ;, if, (, replacementType, ==]
[{, final, Type, replacementType, =, typeVarAssigns, ., get, (, type, ), ;, if, (, replacementType, ==, null, ), {, throw]
[replacementType, =, typeVarAssigns, ., get, (, type, ), ;, if, (, replacementType, ==, null, ), {, throw, new, IllegalArgumentException, (]
[replacementType, =, typeVarAssigns, ., get, (, type, ), ;, if, (, replacementType, ==, null, ), {, throw, new, IllegalArgumentException, (]
[typeVarAssigns, ., get, (, type, ), ;, if, (, replacementType, ==, null, ), {, throw, new, IllegalArgumentException, (, "missing assignment type for type variable ", +]
[), ;, if, (, replacementType, ==, null, ), {, throw, new, IllegalArgumentException, (, "missing assignment type for type variable ", +, type, ), ;, }, return]
[replacementType, ==, null, ), {, throw, new, IllegalArgumentException, (, "missing assignment type for type variable ", +, type, ), ;, }, return, replacementType, ;, }, return]
[}, public, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, ParameterizedType, type, ), {, return]
[static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, ParameterizedType, type, ), {, return, getTypeArguments, (]
[<, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, ParameterizedType, type, ), {, return, getTypeArguments, (, type, ,]
[<, ?, >, ,, Type, >, getTypeArguments, (, final, ParameterizedType, type, ), {, return, getTypeArguments, (, type, ,, getRawType, (]
[,, Type, >, getTypeArguments, (, final, ParameterizedType, type, ), {, return, getTypeArguments, (, type, ,, getRawType, (, type, ), ,]
[?, >, ,, Type, >, getTypeArguments, (, final, Type, type, ,, final, Class, <, ?, >, toClass, ), {, return]
[,, Type, >, getTypeArguments, (, final, Type, type, ,, final, Class, <, ?, >, toClass, ), {, return, getTypeArguments, (]
[>, getTypeArguments, (, final, Type, type, ,, final, Class, <, ?, >, toClass, ), {, return, getTypeArguments, (, type, ,]
[(, final, Type, type, ,, final, Class, <, ?, >, toClass, ), {, return, getTypeArguments, (, type, ,, toClass, ,]
[<, ?, >, toClass, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, subtypeVarAssigns, ), {, if, (]
[<, ?, >, toClass, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, subtypeVarAssigns, ), {, if, (]
[<, ?, >, ,, Type, >, subtypeVarAssigns, ), {, if, (, type, instanceof, Class, <, ?, >, ), {, return]
[>, ,, Type, >, subtypeVarAssigns, ), {, if, (, type, instanceof, Class, <, ?, >, ), {, return, getTypeArguments, (]
[{, if, (, type, instanceof, Class, <, ?, >, ), {, return, getTypeArguments, (, (, Class, <, ?, >, )]
[(, type, instanceof, Class, <, ?, >, ), {, return, getTypeArguments, (, (, Class, <, ?, >, ), type, ,]
[instanceof, Class, <, ?, >, ), {, return, getTypeArguments, (, (, Class, <, ?, >, ), type, ,, toClass, ,]
[{, return, getTypeArguments, (, (, Class, <, ?, >, ), type, ,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (]
[{, return, getTypeArguments, (, (, Class, <, ?, >, ), type, ,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (]
[<, ?, >, ), type, ,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return]
[>, ), type, ,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, getTypeArguments, (]
[,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, getTypeArguments, (, (, ParameterizedType, )]
[,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, getTypeArguments, (, (, ParameterizedType, ), type, ,]
[), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, getTypeArguments, (, (, ParameterizedType, ), type, ,, toClass, ,]
[instanceof, ParameterizedType, ), {, return, getTypeArguments, (, (, ParameterizedType, ), type, ,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (]
[instanceof, ParameterizedType, ), {, return, getTypeArguments, (, (, ParameterizedType, ), type, ,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (]
[(, (, ParameterizedType, ), type, ,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return]
[ParameterizedType, ), type, ,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, getTypeArguments, (]
[ParameterizedType, ), type, ,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, getTypeArguments, (]
[), type, ,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, getTypeArguments, (, (]
[toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, getTypeArguments, (, (, (, GenericArrayType, )]
[(, type, instanceof, GenericArrayType, ), {, return, getTypeArguments, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,]
[(, type, instanceof, GenericArrayType, ), {, return, getTypeArguments, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,]
[(, type, instanceof, GenericArrayType, ), {, return, getTypeArguments, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,]
[return, getTypeArguments, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toClass, ., isArray, (, ), ?]
[return, getTypeArguments, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toClass, ., isArray, (, ), ?]
[), type, ), ., getGenericComponentType, (, ), ,, toClass, ., isArray, (, ), ?, toClass, ., getComponentType, (, ), :]
[), ., getGenericComponentType, (, ), ,, toClass, ., isArray, (, ), ?, toClass, ., getComponentType, (, ), :, toClass, ,]
[toClass, ., isArray, (, ), ?, toClass, ., getComponentType, (, ), :, toClass, ,, subtypeVarAssigns, ), ;, }, if, (]
[toClass, ., isArray, (, ), ?, toClass, ., getComponentType, (, ), :, toClass, ,, subtypeVarAssigns, ), ;, }, if, (]
[:, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :]
[,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (]
[;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, )]
[WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, ), type, ), ), {, if, (]
[{, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, ), type, ), ), {, if, (, isAssignable, (]
[(, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, ), type, ), ), {, if, (, isAssignable, (, bound, ,]
[getImplicitUpperBounds, (, (, WildcardType, ), type, ), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return]
[(, WildcardType, ), type, ), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, getTypeArguments, (]
[), type, ), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, getTypeArguments, (, bound, ,]
[), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, getTypeArguments, (, bound, ,, toClass, ,]
[(, bound, ,, toClass, ), ), {, return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return]
[), {, return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, if, (]
[), {, return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, if, (]
[return, null, ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :]
[;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :, getImplicitBounds, (]
[TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :, getImplicitBounds, (, (, TypeVariable, <, ?, >, )]
[for, (, final, Type, bound, :, getImplicitBounds, (, (, TypeVariable, <, ?, >, ), type, ), ), {, if, (]
[final, Type, bound, :, getImplicitBounds, (, (, TypeVariable, <, ?, >, ), type, ), ), {, if, (, isAssignable, (]
[bound, :, getImplicitBounds, (, (, TypeVariable, <, ?, >, ), type, ), ), {, if, (, isAssignable, (, bound, ,]
[TypeVariable, <, ?, >, ), type, ), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return]
[?, >, ), type, ), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, getTypeArguments, (]
[), type, ), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, getTypeArguments, (, bound, ,]
[), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, getTypeArguments, (, bound, ,, toClass, ,]
[(, bound, ,, toClass, ), ), {, return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return]
[), ), {, return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, throw]
[return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, throw, new, IllegalStateException, (]
[return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, throw, new, IllegalStateException, (]
[(, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +]
[final, Map, <, TypeVariable, <, ?, >, ,, Type, >, subtypeVarAssigns, ), {, final, Class, <, ?, >, cls, =]
[<, TypeVariable, <, ?, >, ,, Type, >, subtypeVarAssigns, ), {, final, Class, <, ?, >, cls, =, getRawType, (]
[,, Type, >, subtypeVarAssigns, ), {, final, Class, <, ?, >, cls, =, getRawType, (, parameterizedType, ), ;, if, (]
[Type, >, subtypeVarAssigns, ), {, final, Class, <, ?, >, cls, =, getRawType, (, parameterizedType, ), ;, if, (, !]
[subtypeVarAssigns, ), {, final, Class, <, ?, >, cls, =, getRawType, (, parameterizedType, ), ;, if, (, !, isAssignable, (]
[{, final, Class, <, ?, >, cls, =, getRawType, (, parameterizedType, ), ;, if, (, !, isAssignable, (, cls, ,]
[>, cls, =, getRawType, (, parameterizedType, ), ;, if, (, !, isAssignable, (, cls, ,, toClass, ), ), {, return]
[;, if, (, !, isAssignable, (, cls, ,, toClass, ), ), {, return, null, ;, }, final, Type, ownerType, =]
[;, if, (, !, isAssignable, (, cls, ,, toClass, ), ), {, return, null, ;, }, final, Type, ownerType, =]
[=, parameterizedType, ., getOwnerType, (, ), ;, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ;, if, (]
[=, parameterizedType, ., getOwnerType, (, ), ;, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ;, if, (]
[TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ;, if, (, ownerType, instanceof, ParameterizedType, ), {, final, ParameterizedType, parameterizedOwnerType, =]
[>, ,, Type, >, typeVarAssigns, ;, if, (, ownerType, instanceof, ParameterizedType, ), {, final, ParameterizedType, parameterizedOwnerType, =, (, ParameterizedType, )]
[Type, >, typeVarAssigns, ;, if, (, ownerType, instanceof, ParameterizedType, ), {, final, ParameterizedType, parameterizedOwnerType, =, (, ParameterizedType, ), ownerType, ;]
[typeVarAssigns, ;, if, (, ownerType, instanceof, ParameterizedType, ), {, final, ParameterizedType, parameterizedOwnerType, =, (, ParameterizedType, ), ownerType, ;, typeVarAssigns, =]
[if, (, ownerType, instanceof, ParameterizedType, ), {, final, ParameterizedType, parameterizedOwnerType, =, (, ParameterizedType, ), ownerType, ;, typeVarAssigns, =, getTypeArguments, (]
[ownerType, instanceof, ParameterizedType, ), {, final, ParameterizedType, parameterizedOwnerType, =, (, ParameterizedType, ), ownerType, ;, typeVarAssigns, =, getTypeArguments, (, parameterizedOwnerType, ,]
[ParameterizedType, ), {, final, ParameterizedType, parameterizedOwnerType, =, (, ParameterizedType, ), ownerType, ;, typeVarAssigns, =, getTypeArguments, (, parameterizedOwnerType, ,, getRawType, (]
[final, ParameterizedType, parameterizedOwnerType, =, (, ParameterizedType, ), ownerType, ;, typeVarAssigns, =, getTypeArguments, (, parameterizedOwnerType, ,, getRawType, (, parameterizedOwnerType, ), ,]
[), ownerType, ;, typeVarAssigns, =, getTypeArguments, (, parameterizedOwnerType, ,, getRawType, (, parameterizedOwnerType, ), ,, subtypeVarAssigns, ), ;, }, else, {]
[;, typeVarAssigns, =, getTypeArguments, (, parameterizedOwnerType, ,, getRawType, (, parameterizedOwnerType, ), ,, subtypeVarAssigns, ), ;, }, else, {, typeVarAssigns, =]
[;, typeVarAssigns, =, getTypeArguments, (, parameterizedOwnerType, ,, getRawType, (, parameterizedOwnerType, ), ,, subtypeVarAssigns, ), ;, }, else, {, typeVarAssigns, =]
[;, typeVarAssigns, =, getTypeArguments, (, parameterizedOwnerType, ,, getRawType, (, parameterizedOwnerType, ), ,, subtypeVarAssigns, ), ;, }, else, {, typeVarAssigns, =]
[=, getTypeArguments, (, parameterizedOwnerType, ,, getRawType, (, parameterizedOwnerType, ), ,, subtypeVarAssigns, ), ;, }, else, {, typeVarAssigns, =, subtypeVarAssigns, ==]
[(, parameterizedOwnerType, ,, getRawType, (, parameterizedOwnerType, ), ,, subtypeVarAssigns, ), ;, }, else, {, typeVarAssigns, =, subtypeVarAssigns, ==, null, ?]
[{, typeVarAssigns, =, subtypeVarAssigns, ==, null, ?, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), :]
[<, ?, >, ,, Type, >, (, ), :, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (]
[HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, subtypeVarAssigns, ), ;, }, final, Type, [, ], typeArgs, =]
[HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, subtypeVarAssigns, ), ;, }, final, Type, [, ], typeArgs, =]
[Type, [, ], typeArgs, =, parameterizedType, ., getActualTypeArguments, (, ), ;, final, TypeVariable, <, ?, >, [, ], typeParams, =]
[Type, [, ], typeArgs, =, parameterizedType, ., getActualTypeArguments, (, ), ;, final, TypeVariable, <, ?, >, [, ], typeParams, =]
[final, TypeVariable, <, ?, >, [, ], typeParams, =, cls, ., getTypeParameters, (, ), ;, for, (, int, i, =]
[<, ?, >, [, ], typeParams, =, cls, ., getTypeParameters, (, ), ;, for, (, int, i, =, 0, ;]
[<, ?, >, [, ], typeParams, =, cls, ., getTypeParameters, (, ), ;, for, (, int, i, =, 0, ;]
[>, [, ], typeParams, =, cls, ., getTypeParameters, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[>, [, ], typeParams, =, cls, ., getTypeParameters, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, cls, ., getTypeParameters, (, ), ;, for, (, int, i, =, 0, ;, i, <, typeParams, ., length, ;]
[=, cls, ., getTypeParameters, (, ), ;, for, (, int, i, =, 0, ;, i, <, typeParams, ., length, ;]
[(, int, i, =, 0, ;, i, <, typeParams, ., length, ;, i, ++, ), {, final, Type, typeArg, =]
[(, int, i, =, 0, ;, i, <, typeParams, ., length, ;, i, ++, ), {, final, Type, typeArg, =]
[i, =, 0, ;, i, <, typeParams, ., length, ;, i, ++, ), {, final, Type, typeArg, =, typeArgs, []
[;, i, <, typeParams, ., length, ;, i, ++, ), {, final, Type, typeArg, =, typeArgs, [, i, ], ;]
[;, i, <, typeParams, ., length, ;, i, ++, ), {, final, Type, typeArg, =, typeArgs, [, i, ], ;]
[., length, ;, i, ++, ), {, final, Type, typeArg, =, typeArgs, [, i, ], ;, typeVarAssigns, ., put, (]
[., length, ;, i, ++, ), {, final, Type, typeArg, =, typeArgs, [, i, ], ;, typeVarAssigns, ., put, (]
[;, i, ++, ), {, final, Type, typeArg, =, typeArgs, [, i, ], ;, typeVarAssigns, ., put, (, typeParams, []
[), {, final, Type, typeArg, =, typeArgs, [, i, ], ;, typeVarAssigns, ., put, (, typeParams, [, i, ], ,]
[), {, final, Type, typeArg, =, typeArgs, [, i, ], ;, typeVarAssigns, ., put, (, typeParams, [, i, ], ,]
[), {, final, Type, typeArg, =, typeArgs, [, i, ], ;, typeVarAssigns, ., put, (, typeParams, [, i, ], ,]
[typeArg, =, typeArgs, [, i, ], ;, typeVarAssigns, ., put, (, typeParams, [, i, ], ,, typeVarAssigns, ., containsKey, (]
[[, i, ], ;, typeVarAssigns, ., put, (, typeParams, [, i, ], ,, typeVarAssigns, ., containsKey, (, typeArg, ), ?]
[[, i, ], ;, typeVarAssigns, ., put, (, typeParams, [, i, ], ,, typeVarAssigns, ., containsKey, (, typeArg, ), ?]
[typeVarAssigns, ., put, (, typeParams, [, i, ], ,, typeVarAssigns, ., containsKey, (, typeArg, ), ?, typeVarAssigns, ., get, (]
[(, typeParams, [, i, ], ,, typeVarAssigns, ., containsKey, (, typeArg, ), ?, typeVarAssigns, ., get, (, typeArg, ), :]
[typeVarAssigns, ., containsKey, (, typeArg, ), ?, typeVarAssigns, ., get, (, typeArg, ), :, typeArg, ), ;, }, if, (]
[typeVarAssigns, ., containsKey, (, typeArg, ), ?, typeVarAssigns, ., get, (, typeArg, ), :, typeArg, ), ;, }, if, (]
[typeArg, ), ?, typeVarAssigns, ., get, (, typeArg, ), :, typeArg, ), ;, }, if, (, toClass, ., equals, (]
[get, (, typeArg, ), :, typeArg, ), ;, }, if, (, toClass, ., equals, (, cls, ), ), {, return]
[:, typeArg, ), ;, }, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return]
[), ;, }, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (]
[}, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (]
[(, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,]
[equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, ), ,]
[cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, ), ,, toClass, ,]
[<, ?, >, toClass, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, subtypeVarAssigns, ), {, if, (]
[?, >, toClass, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, subtypeVarAssigns, ), {, if, (, !]
[toClass, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, subtypeVarAssigns, ), {, if, (, !, isAssignable, (]
[final, Map, <, TypeVariable, <, ?, >, ,, Type, >, subtypeVarAssigns, ), {, if, (, !, isAssignable, (, cls, ,]
[?, >, ,, Type, >, subtypeVarAssigns, ), {, if, (, !, isAssignable, (, cls, ,, toClass, ), ), {, return]
[subtypeVarAssigns, ), {, if, (, !, isAssignable, (, cls, ,, toClass, ), ), {, return, null, ;, }, if, (]
[subtypeVarAssigns, ), {, if, (, !, isAssignable, (, cls, ,, toClass, ), ), {, return, null, ;, }, if, (]
[,, toClass, ), ), {, return, null, ;, }, if, (, cls, ., isPrimitive, (, ), ), {, if, (]
[,, toClass, ), ), {, return, null, ;, }, if, (, cls, ., isPrimitive, (, ), ), {, if, (]
[}, if, (, cls, ., isPrimitive, (, ), ), {, if, (, toClass, ., isPrimitive, (, ), ), {, return]
[isPrimitive, (, ), ), {, return, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), ;, }]
[), ), {, return, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), ;, }, cls, =]
[), ), {, return, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), ;, }, cls, =]
[new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), ;, }, cls, =, ClassUtils, ., primitiveToWrapper, (]
[ClassUtils, ., primitiveToWrapper, (, cls, ), ;, }, final, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =]
[ClassUtils, ., primitiveToWrapper, (, cls, ), ;, }, final, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =]
[ClassUtils, ., primitiveToWrapper, (, cls, ), ;, }, final, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =]
[primitiveToWrapper, (, cls, ), ;, }, final, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, subtypeVarAssigns, ==]
[cls, ), ;, }, final, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, subtypeVarAssigns, ==, null, ?]
[>, typeVarAssigns, =, subtypeVarAssigns, ==, null, ?, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), :]
[<, ?, >, ,, Type, >, (, ), :, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (]
[>, (, ), :, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, subtypeVarAssigns, ), ;, if, (]
[>, (, ), :, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, subtypeVarAssigns, ), ;, if, (]
[new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, subtypeVarAssigns, ), ;, if, (, toClass, ., equals, (]
[?, >, ,, Type, >, (, subtypeVarAssigns, ), ;, if, (, toClass, ., equals, (, cls, ), ), {, return]
[>, (, subtypeVarAssigns, ), ;, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return]
[subtypeVarAssigns, ), ;, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (]
[;, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (]
[(, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,]
[equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, ), ,]
[cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, ), ,, toClass, ,]
[(, final, Class, <, ?, >, cls, ,, final, ParameterizedType, superType, ), {, final, Class, <, ?, >, superClass, =]
[Class, <, ?, >, cls, ,, final, ParameterizedType, superType, ), {, final, Class, <, ?, >, superClass, =, getRawType, (]
[,, final, ParameterizedType, superType, ), {, final, Class, <, ?, >, superClass, =, getRawType, (, superType, ), ;, if, (]
[final, ParameterizedType, superType, ), {, final, Class, <, ?, >, superClass, =, getRawType, (, superType, ), ;, if, (, !]
[superType, ), {, final, Class, <, ?, >, superClass, =, getRawType, (, superType, ), ;, if, (, !, isAssignable, (]
[{, final, Class, <, ?, >, superClass, =, getRawType, (, superType, ), ;, if, (, !, isAssignable, (, cls, ,]
[>, superClass, =, getRawType, (, superType, ), ;, if, (, !, isAssignable, (, cls, ,, superClass, ), ), {, return]
[superType, ), ;, if, (, !, isAssignable, (, cls, ,, superClass, ), ), {, return, null, ;, }, if, (]
[superType, ), ;, if, (, !, isAssignable, (, cls, ,, superClass, ), ), {, return, null, ;, }, if, (]
[(, !, isAssignable, (, cls, ,, superClass, ), ), {, return, null, ;, }, if, (, cls, ., equals, (]
[,, superClass, ), ), {, return, null, ;, }, if, (, cls, ., equals, (, superClass, ), ), {, return]
[), ), {, return, null, ;, }, if, (, cls, ., equals, (, superClass, ), ), {, return, getTypeArguments, (]
[{, return, null, ;, }, if, (, cls, ., equals, (, superClass, ), ), {, return, getTypeArguments, (, superType, ,]
[null, ;, }, if, (, cls, ., equals, (, superClass, ), ), {, return, getTypeArguments, (, superType, ,, superClass, ,]
[(, superClass, ), ), {, return, getTypeArguments, (, superType, ,, superClass, ,, null, ), ;, }, final, Type, midType, =]
[), ), {, return, getTypeArguments, (, superType, ,, superClass, ,, null, ), ;, }, final, Type, midType, =, getClosestParentType, (]
[{, return, getTypeArguments, (, superType, ,, superClass, ,, null, ), ;, }, final, Type, midType, =, getClosestParentType, (, cls, ,]
[,, superClass, ,, null, ), ;, }, final, Type, midType, =, getClosestParentType, (, cls, ,, superClass, ), ;, if, (]
[,, superClass, ,, null, ), ;, }, final, Type, midType, =, getClosestParentType, (, cls, ,, superClass, ), ;, if, (]
[midType, =, getClosestParentType, (, cls, ,, superClass, ), ;, if, (, midType, instanceof, Class, <, ?, >, ), {, return]
[getClosestParentType, (, cls, ,, superClass, ), ;, if, (, midType, instanceof, Class, <, ?, >, ), {, return, determineTypeArguments, (]
[;, if, (, midType, instanceof, Class, <, ?, >, ), {, return, determineTypeArguments, (, (, Class, <, ?, >, )]
[(, midType, instanceof, Class, <, ?, >, ), {, return, determineTypeArguments, (, (, Class, <, ?, >, ), midType, ,]
[{, return, determineTypeArguments, (, (, Class, <, ?, >, ), midType, ,, superType, ), ;, }, final, ParameterizedType, midParameterizedType, =]
[(, (, Class, <, ?, >, ), midType, ,, superType, ), ;, }, final, ParameterizedType, midParameterizedType, =, (, ParameterizedType, )]
[superType, ), ;, }, final, ParameterizedType, midParameterizedType, =, (, ParameterizedType, ), midType, ;, final, Class, <, ?, >, midClass, =]
[;, }, final, ParameterizedType, midParameterizedType, =, (, ParameterizedType, ), midType, ;, final, Class, <, ?, >, midClass, =, getRawType, (]
[>, midClass, =, getRawType, (, midParameterizedType, ), ;, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =]
[=, getRawType, (, midParameterizedType, ), ;, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, determineTypeArguments, (]
[(, midParameterizedType, ), ;, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, determineTypeArguments, (, midClass, ,]
[;, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, determineTypeArguments, (, midClass, ,, superType, ), ;]
[Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, determineTypeArguments, (, midClass, ,, superType, ), ;, mapTypeVariablesToArguments, (]
[TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, determineTypeArguments, (, midClass, ,, superType, ), ;, mapTypeVariablesToArguments, (, cls, ,]
[?, >, ,, Type, >, typeVarAssigns, =, determineTypeArguments, (, midClass, ,, superType, ), ;, mapTypeVariablesToArguments, (, cls, ,, midParameterizedType, ,]
[>, typeVarAssigns, =, determineTypeArguments, (, midClass, ,, superType, ), ;, mapTypeVariablesToArguments, (, cls, ,, midParameterizedType, ,, typeVarAssigns, ), ;, return]
[ParameterizedType, parameterizedType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, final, Type, ownerType, =]
[ParameterizedType, parameterizedType, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {, final, Type, ownerType, =]
[?, >, ,, Type, >, typeVarAssigns, ), {, final, Type, ownerType, =, parameterizedType, ., getOwnerType, (, ), ;, if, (]
[?, >, ,, Type, >, typeVarAssigns, ), {, final, Type, ownerType, =, parameterizedType, ., getOwnerType, (, ), ;, if, (]
[typeVarAssigns, ), {, final, Type, ownerType, =, parameterizedType, ., getOwnerType, (, ), ;, if, (, ownerType, instanceof, ParameterizedType, ), {]
[{, final, Type, ownerType, =, parameterizedType, ., getOwnerType, (, ), ;, if, (, ownerType, instanceof, ParameterizedType, ), {, mapTypeVariablesToArguments, (]
[Type, ownerType, =, parameterizedType, ., getOwnerType, (, ), ;, if, (, ownerType, instanceof, ParameterizedType, ), {, mapTypeVariablesToArguments, (, cls, ,]
[parameterizedType, ., getOwnerType, (, ), ;, if, (, ownerType, instanceof, ParameterizedType, ), {, mapTypeVariablesToArguments, (, cls, ,, (, ParameterizedType, )]
[getOwnerType, (, ), ;, if, (, ownerType, instanceof, ParameterizedType, ), {, mapTypeVariablesToArguments, (, cls, ,, (, ParameterizedType, ), ownerType, ,]
[{, mapTypeVariablesToArguments, (, cls, ,, (, ParameterizedType, ), ownerType, ,, typeVarAssigns, ), ;, }, final, Type, [, ], typeArgs, =]
[{, mapTypeVariablesToArguments, (, cls, ,, (, ParameterizedType, ), ownerType, ,, typeVarAssigns, ), ;, }, final, Type, [, ], typeArgs, =]
[Type, [, ], typeArgs, =, parameterizedType, ., getActualTypeArguments, (, ), ;, final, TypeVariable, <, ?, >, [, ], typeVars, =]
[Type, [, ], typeArgs, =, parameterizedType, ., getActualTypeArguments, (, ), ;, final, TypeVariable, <, ?, >, [, ], typeVars, =]
[], typeArgs, =, parameterizedType, ., getActualTypeArguments, (, ), ;, final, TypeVariable, <, ?, >, [, ], typeVars, =, getRawType, (]
[parameterizedType, ), ., getTypeParameters, (, ), ;, final, List, <, TypeVariable, <, Class, <, T, >, >, >, typeVarList, =]
[parameterizedType, ), ., getTypeParameters, (, ), ;, final, List, <, TypeVariable, <, Class, <, T, >, >, >, typeVarList, =]
[(, ), ;, final, List, <, TypeVariable, <, Class, <, T, >, >, >, typeVarList, =, Arrays, ., asList, (]
[(, ), ;, final, List, <, TypeVariable, <, Class, <, T, >, >, >, typeVarList, =, Arrays, ., asList, (]
[>, >, typeVarList, =, Arrays, ., asList, (, cls, ., getTypeParameters, (, ), ), ;, for, (, int, i, =]
[typeVarList, =, Arrays, ., asList, (, cls, ., getTypeParameters, (, ), ), ;, for, (, int, i, =, 0, ;]
[typeVarList, =, Arrays, ., asList, (, cls, ., getTypeParameters, (, ), ), ;, for, (, int, i, =, 0, ;]
[Arrays, ., asList, (, cls, ., getTypeParameters, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[Arrays, ., asList, (, cls, ., getTypeParameters, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[cls, ., getTypeParameters, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, typeArgs, ., length, ;]
[cls, ., getTypeParameters, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, typeArgs, ., length, ;]
[=, 0, ;, i, <, typeArgs, ., length, ;, i, ++, ), {, final, TypeVariable, <, ?, >, typeVar, =]
[=, 0, ;, i, <, typeArgs, ., length, ;, i, ++, ), {, final, TypeVariable, <, ?, >, typeVar, =]
[;, i, <, typeArgs, ., length, ;, i, ++, ), {, final, TypeVariable, <, ?, >, typeVar, =, typeVars, []
[i, ++, ), {, final, TypeVariable, <, ?, >, typeVar, =, typeVars, [, i, ], ;, final, Type, typeArg, =]
[i, ++, ), {, final, TypeVariable, <, ?, >, typeVar, =, typeVars, [, i, ], ;, final, Type, typeArg, =]
[), {, final, TypeVariable, <, ?, >, typeVar, =, typeVars, [, i, ], ;, final, Type, typeArg, =, typeArgs, []
[?, >, typeVar, =, typeVars, [, i, ], ;, final, Type, typeArg, =, typeArgs, [, i, ], ;, if, (]
[?, >, typeVar, =, typeVars, [, i, ], ;, final, Type, typeArg, =, typeArgs, [, i, ], ;, if, (]
[?, >, typeVar, =, typeVars, [, i, ], ;, final, Type, typeArg, =, typeArgs, [, i, ], ;, if, (]
[typeVars, [, i, ], ;, final, Type, typeArg, =, typeArgs, [, i, ], ;, if, (, typeVarList, ., contains, (]
[], ;, final, Type, typeArg, =, typeArgs, [, i, ], ;, if, (, typeVarList, ., contains, (, typeArg, ), &&]
[], ;, final, Type, typeArg, =, typeArgs, [, i, ], ;, if, (, typeVarList, ., contains, (, typeArg, ), &&]
[typeArg, =, typeArgs, [, i, ], ;, if, (, typeVarList, ., contains, (, typeArg, ), &&, typeVarAssigns, ., containsKey, (]
[i, ], ;, if, (, typeVarList, ., contains, (, typeArg, ), &&, typeVarAssigns, ., containsKey, (, typeVar, ), ), {]
[i, ], ;, if, (, typeVarList, ., contains, (, typeArg, ), &&, typeVarAssigns, ., containsKey, (, typeVar, ), ), {]
[(, typeVarList, ., contains, (, typeArg, ), &&, typeVarAssigns, ., containsKey, (, typeVar, ), ), {, typeVarAssigns, ., put, (]
[), &&, typeVarAssigns, ., containsKey, (, typeVar, ), ), {, typeVarAssigns, ., put, (, (, TypeVariable, <, ?, >, )]
[typeVarAssigns, ., containsKey, (, typeVar, ), ), {, typeVarAssigns, ., put, (, (, TypeVariable, <, ?, >, ), typeArg, ,]
[typeVarAssigns, ., containsKey, (, typeVar, ), ), {, typeVarAssigns, ., put, (, (, TypeVariable, <, ?, >, ), typeArg, ,]
[typeVar, ), ), {, typeVarAssigns, ., put, (, (, TypeVariable, <, ?, >, ), typeArg, ,, typeVarAssigns, ., get, (]
[Type, getClosestParentType, (, final, Class, <, ?, >, cls, ,, final, Class, <, ?, >, superClass, ), {, if, (]
[Type, getClosestParentType, (, final, Class, <, ?, >, cls, ,, final, Class, <, ?, >, superClass, ), {, if, (]
[?, >, superClass, ), {, if, (, superClass, ., isInterface, (, ), ), {, final, Type, [, ], interfaceTypes, =]
[?, >, superClass, ), {, if, (, superClass, ., isInterface, (, ), ), {, final, Type, [, ], interfaceTypes, =]
[isInterface, (, ), ), {, final, Type, [, ], interfaceTypes, =, cls, ., getGenericInterfaces, (, ), ;, Type, genericInterface, =]
[], interfaceTypes, =, cls, ., getGenericInterfaces, (, ), ;, Type, genericInterface, =, null, ;, for, (, final, Type, midType, :]
[Type, genericInterface, =, null, ;, for, (, final, Type, midType, :, interfaceTypes, ), {, Class, <, ?, >, midClass, =]
[;, for, (, final, Type, midType, :, interfaceTypes, ), {, Class, <, ?, >, midClass, =, null, ;, if, (]
[;, for, (, final, Type, midType, :, interfaceTypes, ), {, Class, <, ?, >, midClass, =, null, ;, if, (]
[midType, :, interfaceTypes, ), {, Class, <, ?, >, midClass, =, null, ;, if, (, midType, instanceof, ParameterizedType, ), {]
[interfaceTypes, ), {, Class, <, ?, >, midClass, =, null, ;, if, (, midType, instanceof, ParameterizedType, ), {, midClass, =]
[{, Class, <, ?, >, midClass, =, null, ;, if, (, midType, instanceof, ParameterizedType, ), {, midClass, =, getRawType, (]
[?, >, midClass, =, null, ;, if, (, midType, instanceof, ParameterizedType, ), {, midClass, =, getRawType, (, (, ParameterizedType, )]
[(, midType, instanceof, ParameterizedType, ), {, midClass, =, getRawType, (, (, ParameterizedType, ), midType, ), ;, }, else, if, (]
[(, midType, instanceof, ParameterizedType, ), {, midClass, =, getRawType, (, (, ParameterizedType, ), midType, ), ;, }, else, if, (]
[getRawType, (, (, ParameterizedType, ), midType, ), ;, }, else, if, (, midType, instanceof, Class, <, ?, >, ), {]
[(, ParameterizedType, ), midType, ), ;, }, else, if, (, midType, instanceof, Class, <, ?, >, ), {, midClass, =]
[}, else, if, (, midType, instanceof, Class, <, ?, >, ), {, midClass, =, (, Class, <, ?, >, )]
[Class, <, ?, >, ), {, midClass, =, (, Class, <, ?, >, ), midType, ;, }, else, {, throw]
[>, ), {, midClass, =, (, Class, <, ?, >, ), midType, ;, }, else, {, throw, new, IllegalStateException, (]
[>, ), {, midClass, =, (, Class, <, ?, >, ), midType, ;, }, else, {, throw, new, IllegalStateException, (]
[>, ), {, midClass, =, (, Class, <, ?, >, ), midType, ;, }, else, {, throw, new, IllegalStateException, (]
[{, midClass, =, (, Class, <, ?, >, ), midType, ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected generic", +]
[=, (, Class, <, ?, >, ), midType, ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected generic", +, " interface type found: ", +]
[), midType, ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected generic", +, " interface type found: ", +, midType, ), ;, }, if, (]
[), midType, ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected generic", +, " interface type found: ", +, midType, ), ;, }, if, (]
[;, }, else, {, throw, new, IllegalStateException, (, "Unexpected generic", +, " interface type found: ", +, midType, ), ;, }, if, (, isAssignable, (]
[else, {, throw, new, IllegalStateException, (, "Unexpected generic", +, " interface type found: ", +, midType, ), ;, }, if, (, isAssignable, (, midClass, ,]
[new, IllegalStateException, (, "Unexpected generic", +, " interface type found: ", +, midType, ), ;, }, if, (, isAssignable, (, midClass, ,, superClass, ), &&]
[(, "Unexpected generic", +, " interface type found: ", +, midType, ), ;, }, if, (, isAssignable, (, midClass, ,, superClass, ), &&, isAssignable, (]
[+, " interface type found: ", +, midType, ), ;, }, if, (, isAssignable, (, midClass, ,, superClass, ), &&, isAssignable, (, genericInterface, ,]
[midType, ), ;, }, if, (, isAssignable, (, midClass, ,, superClass, ), &&, isAssignable, (, genericInterface, ,, (, Type, )]
[if, (, isAssignable, (, midClass, ,, superClass, ), &&, isAssignable, (, genericInterface, ,, (, Type, ), midClass, ), ), {]
[isAssignable, (, midClass, ,, superClass, ), &&, isAssignable, (, genericInterface, ,, (, Type, ), midClass, ), ), {, genericInterface, =]
[&&, isAssignable, (, genericInterface, ,, (, Type, ), midClass, ), ), {, genericInterface, =, midType, ;, }, }, if, (]
[&&, isAssignable, (, genericInterface, ,, (, Type, ), midClass, ), ), {, genericInterface, =, midType, ;, }, }, if, (]
[(, genericInterface, ,, (, Type, ), midClass, ), ), {, genericInterface, =, midType, ;, }, }, if, (, genericInterface, !=]
[Type, ), midClass, ), ), {, genericInterface, =, midType, ;, }, }, if, (, genericInterface, !=, null, ), {, return]
[{, genericInterface, =, midType, ;, }, }, if, (, genericInterface, !=, null, ), {, return, genericInterface, ;, }, }, return]
[{, genericInterface, =, midType, ;, }, }, if, (, genericInterface, !=, null, ), {, return, genericInterface, ;, }, }, return]
[(, ), ;, }, public, static, boolean, isInstance, (, final, Object, value, ,, final, Type, type, ), {, if, (]
[(, ), ;, }, public, static, boolean, isInstance, (, final, Object, value, ,, final, Type, type, ), {, if, (]
[;, }, public, static, boolean, isInstance, (, final, Object, value, ,, final, Type, type, ), {, if, (, type, ==]
[boolean, isInstance, (, final, Object, value, ,, final, Type, type, ), {, if, (, type, ==, null, ), {, return]
[Object, value, ,, final, Type, type, ), {, if, (, type, ==, null, ), {, return, false, ;, }, return]
[Object, value, ,, final, Type, type, ), {, if, (, type, ==, null, ), {, return, false, ;, }, return]
[Object, value, ,, final, Type, type, ), {, if, (, type, ==, null, ), {, return, false, ;, }, return]
[,, final, Type, type, ), {, if, (, type, ==, null, ), {, return, false, ;, }, return, value, ==]
[Type, type, ), {, if, (, type, ==, null, ), {, return, false, ;, }, return, value, ==, null, ?]
[Type, type, ), {, if, (, type, ==, null, ), {, return, false, ;, }, return, value, ==, null, ?]
[type, ), {, if, (, type, ==, null, ), {, return, false, ;, }, return, value, ==, null, ?, !]
[), {, if, (, type, ==, null, ), {, return, false, ;, }, return, value, ==, null, ?, !, (]
[), {, if, (, type, ==, null, ), {, return, false, ;, }, return, value, ==, null, ?, !, (]
[{, return, false, ;, }, return, value, ==, null, ?, !, (, type, instanceof, Class, <, ?, >, ), ||]
[return, false, ;, }, return, value, ==, null, ?, !, (, type, instanceof, Class, <, ?, >, ), ||, !]
[return, false, ;, }, return, value, ==, null, ?, !, (, type, instanceof, Class, <, ?, >, ), ||, !]
[false, ;, }, return, value, ==, null, ?, !, (, type, instanceof, Class, <, ?, >, ), ||, !, (]
[null, ?, !, (, type, instanceof, Class, <, ?, >, ), ||, !, (, (, Class, <, ?, >, )]
[<, ?, >, ), ||, !, (, (, Class, <, ?, >, ), type, ), ., isPrimitive, (, ), :]
[>, ), ||, !, (, (, Class, <, ?, >, ), type, ), ., isPrimitive, (, ), :, isAssignable, (]
[>, ), ||, !, (, (, Class, <, ?, >, ), type, ), ., isPrimitive, (, ), :, isAssignable, (]
[Class, <, ?, >, ), type, ), ., isPrimitive, (, ), :, isAssignable, (, value, ., getClass, (, ), ,]
[?, >, ), type, ), ., isPrimitive, (, ), :, isAssignable, (, value, ., getClass, (, ), ,, type, ,]
[null, ), ;, }, public, static, Type, [, ], normalizeUpperBounds, (, final, Type, [, ], bounds, ), {, if, (]
[null, ), ;, }, public, static, Type, [, ], normalizeUpperBounds, (, final, Type, [, ], bounds, ), {, if, (]
[null, ), ;, }, public, static, Type, [, ], normalizeUpperBounds, (, final, Type, [, ], bounds, ), {, if, (]
[public, static, Type, [, ], normalizeUpperBounds, (, final, Type, [, ], bounds, ), {, if, (, bounds, ., length, <]
[], normalizeUpperBounds, (, final, Type, [, ], bounds, ), {, if, (, bounds, ., length, <, 2, ), {, return]
[if, (, bounds, ., length, <, 2, ), {, return, bounds, ;, }, final, Set, <, Type, >, types, =]
[2, ), {, return, bounds, ;, }, final, Set, <, Type, >, types, =, new, HashSet, <, Type, >, (]
[2, ), {, return, bounds, ;, }, final, Set, <, Type, >, types, =, new, HashSet, <, Type, >, (]
[>, types, =, new, HashSet, <, Type, >, (, bounds, ., length, ), ;, for, (, final, Type, type1, :]
[Type, >, (, bounds, ., length, ), ;, for, (, final, Type, type1, :, bounds, ), {, boolean, subtypeFound, =]
[for, (, final, Type, type1, :, bounds, ), {, boolean, subtypeFound, =, false, ;, for, (, final, Type, type2, :]
[:, bounds, ), {, boolean, subtypeFound, =, false, ;, for, (, final, Type, type2, :, bounds, ), {, if, (]
[:, bounds, ), {, boolean, subtypeFound, =, false, ;, for, (, final, Type, type2, :, bounds, ), {, if, (]
[:, bounds, ), {, boolean, subtypeFound, =, false, ;, for, (, final, Type, type2, :, bounds, ), {, if, (]
[), {, boolean, subtypeFound, =, false, ;, for, (, final, Type, type2, :, bounds, ), {, if, (, type1, !=]
[boolean, subtypeFound, =, false, ;, for, (, final, Type, type2, :, bounds, ), {, if, (, type1, !=, type2, &&]
[=, false, ;, for, (, final, Type, type2, :, bounds, ), {, if, (, type1, !=, type2, &&, isAssignable, (]
[;, for, (, final, Type, type2, :, bounds, ), {, if, (, type1, !=, type2, &&, isAssignable, (, type2, ,]
[(, final, Type, type2, :, bounds, ), {, if, (, type1, !=, type2, &&, isAssignable, (, type2, ,, type1, ,]
[:, bounds, ), {, if, (, type1, !=, type2, &&, isAssignable, (, type2, ,, type1, ,, null, ), ), {]
[), {, if, (, type1, !=, type2, &&, isAssignable, (, type2, ,, type1, ,, null, ), ), {, subtypeFound, =]
[isAssignable, (, type2, ,, type1, ,, null, ), ), {, subtypeFound, =, true, ;, break, ;, }, }, if, (]
[(, type2, ,, type1, ,, null, ), ), {, subtypeFound, =, true, ;, break, ;, }, }, if, (, !]
[type1, ,, null, ), ), {, subtypeFound, =, true, ;, break, ;, }, }, if, (, !, subtypeFound, ), {]
[type1, ,, null, ), ), {, subtypeFound, =, true, ;, break, ;, }, }, if, (, !, subtypeFound, ), {]
[), {, subtypeFound, =, true, ;, break, ;, }, }, if, (, !, subtypeFound, ), {, types, ., add, (]
[break, ;, }, }, if, (, !, subtypeFound, ), {, types, ., add, (, type1, ), ;, }, }, return]
[break, ;, }, }, if, (, !, subtypeFound, ), {, types, ., add, (, type1, ), ;, }, }, return]
[if, (, !, subtypeFound, ), {, types, ., add, (, type1, ), ;, }, }, return, types, ., toArray, (]
[subtypeFound, ), {, types, ., add, (, type1, ), ;, }, }, return, types, ., toArray, (, new, Type, []
[subtypeFound, ), {, types, ., add, (, type1, ), ;, }, }, return, types, ., toArray, (, new, Type, []
[static, Type, [, ], getImplicitBounds, (, final, TypeVariable, <, ?, >, typeVariable, ), {, final, Type, [, ], bounds, =]
[static, Type, [, ], getImplicitBounds, (, final, TypeVariable, <, ?, >, typeVariable, ), {, final, Type, [, ], bounds, =]
[TypeVariable, <, ?, >, typeVariable, ), {, final, Type, [, ], bounds, =, typeVariable, ., getBounds, (, ), ;, return]
[TypeVariable, <, ?, >, typeVariable, ), {, final, Type, [, ], bounds, =, typeVariable, ., getBounds, (, ), ;, return]
[TypeVariable, <, ?, >, typeVariable, ), {, final, Type, [, ], bounds, =, typeVariable, ., getBounds, (, ), ;, return]
[TypeVariable, <, ?, >, typeVariable, ), {, final, Type, [, ], bounds, =, typeVariable, ., getBounds, (, ), ;, return]
[typeVariable, ), {, final, Type, [, ], bounds, =, typeVariable, ., getBounds, (, ), ;, return, bounds, ., length, ==]
[{, final, Type, [, ], bounds, =, typeVariable, ., getBounds, (, ), ;, return, bounds, ., length, ==, 0, ?]
[], bounds, =, typeVariable, ., getBounds, (, ), ;, return, bounds, ., length, ==, 0, ?, new, Type, [, ]]
[bounds, =, typeVariable, ., getBounds, (, ), ;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {]
[(, ), ;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {, Object, ., class, }, :]
[;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (]
[;, }, public, static, Type, [, ], getImplicitUpperBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =]
[;, }, public, static, Type, [, ], getImplicitUpperBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =]
[getImplicitUpperBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =, wildcardType, ., getUpperBounds, (, ), ;, return]
[getImplicitUpperBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =, wildcardType, ., getUpperBounds, (, ), ;, return]
[getImplicitUpperBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =, wildcardType, ., getUpperBounds, (, ), ;, return]
[getImplicitUpperBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =, wildcardType, ., getUpperBounds, (, ), ;, return]
[wildcardType, ), {, final, Type, [, ], bounds, =, wildcardType, ., getUpperBounds, (, ), ;, return, bounds, ., length, ==]
[{, final, Type, [, ], bounds, =, wildcardType, ., getUpperBounds, (, ), ;, return, bounds, ., length, ==, 0, ?]
[], bounds, =, wildcardType, ., getUpperBounds, (, ), ;, return, bounds, ., length, ==, 0, ?, new, Type, [, ]]
[bounds, =, wildcardType, ., getUpperBounds, (, ), ;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {]
[(, ), ;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {, Object, ., class, }, :]
[;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (]
[;, }, public, static, Type, [, ], getImplicitLowerBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =]
[;, }, public, static, Type, [, ], getImplicitLowerBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =]
[getImplicitLowerBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =, wildcardType, ., getLowerBounds, (, ), ;, return]
[getImplicitLowerBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =, wildcardType, ., getLowerBounds, (, ), ;, return]
[getImplicitLowerBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =, wildcardType, ., getLowerBounds, (, ), ;, return]
[getImplicitLowerBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =, wildcardType, ., getLowerBounds, (, ), ;, return]
[wildcardType, ), {, final, Type, [, ], bounds, =, wildcardType, ., getLowerBounds, (, ), ;, return, bounds, ., length, ==]
[{, final, Type, [, ], bounds, =, wildcardType, ., getLowerBounds, (, ), ;, return, bounds, ., length, ==, 0, ?]
[], bounds, =, wildcardType, ., getLowerBounds, (, ), ;, return, bounds, ., length, ==, 0, ?, new, Type, [, ]]
[bounds, =, wildcardType, ., getLowerBounds, (, ), ;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {]
[., getLowerBounds, (, ), ;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {, null, }, :]
[>, typeVarAssigns, ), {, for, (, final, Map, ., Entry, <, TypeVariable, <, ?, >, ,, Type, >, entry, :]
[>, typeVarAssigns, ), {, for, (, final, Map, ., Entry, <, TypeVariable, <, ?, >, ,, Type, >, entry, :]
[>, ,, Type, >, entry, :, typeVarAssigns, ., entrySet, (, ), ), {, final, TypeVariable, <, ?, >, typeVar, =]
[>, ,, Type, >, entry, :, typeVarAssigns, ., entrySet, (, ), ), {, final, TypeVariable, <, ?, >, typeVar, =]
[), ), {, final, TypeVariable, <, ?, >, typeVar, =, entry, ., getKey, (, ), ;, final, Type, type, =]
[), ), {, final, TypeVariable, <, ?, >, typeVar, =, entry, ., getKey, (, ), ;, final, Type, type, =]
[getKey, (, ), ;, final, Type, type, =, entry, ., getValue, (, ), ;, for, (, final, Type, bound, :]
[), ;, final, Type, type, =, entry, ., getValue, (, ), ;, for, (, final, Type, bound, :, getImplicitBounds, (]
[entry, ., getValue, (, ), ;, for, (, final, Type, bound, :, getImplicitBounds, (, typeVar, ), ), {, if, (]
[., getValue, (, ), ;, for, (, final, Type, bound, :, getImplicitBounds, (, typeVar, ), ), {, if, (, !]
[(, ), ;, for, (, final, Type, bound, :, getImplicitBounds, (, typeVar, ), ), {, if, (, !, isAssignable, (]
[;, for, (, final, Type, bound, :, getImplicitBounds, (, typeVar, ), ), {, if, (, !, isAssignable, (, type, ,]
[(, final, Type, bound, :, getImplicitBounds, (, typeVar, ), ), {, if, (, !, isAssignable, (, type, ,, substituteTypeVariables, (]
[Type, bound, :, getImplicitBounds, (, typeVar, ), ), {, if, (, !, isAssignable, (, type, ,, substituteTypeVariables, (, bound, ,]
[getImplicitBounds, (, typeVar, ), ), {, if, (, !, isAssignable, (, type, ,, substituteTypeVariables, (, bound, ,, typeVarAssigns, ), ,]
[{, if, (, !, isAssignable, (, type, ,, substituteTypeVariables, (, bound, ,, typeVarAssigns, ), ,, typeVarAssigns, ), ), {, return]
[type, ,, substituteTypeVariables, (, bound, ,, typeVarAssigns, ), ,, typeVarAssigns, ), ), {, return, false, ;, }, }, }, return]
[true, ;, }, private, static, Class, <, ?, >, getRawType, (, final, ParameterizedType, parameterizedType, ), {, final, Type, rawType, =]
[true, ;, }, private, static, Class, <, ?, >, getRawType, (, final, ParameterizedType, parameterizedType, ), {, final, Type, rawType, =]
[>, getRawType, (, final, ParameterizedType, parameterizedType, ), {, final, Type, rawType, =, parameterizedType, ., getRawType, (, ), ;, if, (]
[getRawType, (, final, ParameterizedType, parameterizedType, ), {, final, Type, rawType, =, parameterizedType, ., getRawType, (, ), ;, if, (, !]
[(, final, ParameterizedType, parameterizedType, ), {, final, Type, rawType, =, parameterizedType, ., getRawType, (, ), ;, if, (, !, (]
[(, final, ParameterizedType, parameterizedType, ), {, final, Type, rawType, =, parameterizedType, ., getRawType, (, ), ;, if, (, !, (]
[parameterizedType, ., getRawType, (, ), ;, if, (, !, (, rawType, instanceof, Class, <, ?, >, ), ), {, throw]
[(, ), ;, if, (, !, (, rawType, instanceof, Class, <, ?, >, ), ), {, throw, new, IllegalStateException, (]
[(, ), ;, if, (, !, (, rawType, instanceof, Class, <, ?, >, ), ), {, throw, new, IllegalStateException, (]
[;, if, (, !, (, rawType, instanceof, Class, <, ?, >, ), ), {, throw, new, IllegalStateException, (, "Wait... What!? Type of rawType: ", +]
[rawType, instanceof, Class, <, ?, >, ), ), {, throw, new, IllegalStateException, (, "Wait... What!? Type of rawType: ", +, rawType, ), ;, }, return]
[), ), {, throw, new, IllegalStateException, (, "Wait... What!? Type of rawType: ", +, rawType, ), ;, }, return, (, Class, <, ?, >, )]
[}, public, static, Class, <, ?, >, getRawType, (, final, Type, type, ,, final, Type, assigningType, ), {, if, (]
[}, public, static, Class, <, ?, >, getRawType, (, final, Type, type, ,, final, Type, assigningType, ), {, if, (]
[final, Type, type, ,, final, Type, assigningType, ), {, if, (, type, instanceof, Class, <, ?, >, ), {, return]
[assigningType, ), {, if, (, type, instanceof, Class, <, ?, >, ), {, return, (, Class, <, ?, >, )]
[type, instanceof, Class, <, ?, >, ), {, return, (, Class, <, ?, >, ), type, ;, }, if, (]
[type, instanceof, Class, <, ?, >, ), {, return, (, Class, <, ?, >, ), type, ;, }, if, (]
[), {, return, (, Class, <, ?, >, ), type, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return]
[return, (, Class, <, ?, >, ), type, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, getRawType, (]
[<, ?, >, ), type, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, getRawType, (, (, ParameterizedType, )]
[}, if, (, type, instanceof, ParameterizedType, ), {, return, getRawType, (, (, ParameterizedType, ), type, ), ;, }, if, (]
[}, if, (, type, instanceof, ParameterizedType, ), {, return, getRawType, (, (, ParameterizedType, ), type, ), ;, }, if, (]
[(, (, ParameterizedType, ), type, ), ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, if, (]
[(, (, ParameterizedType, ), type, ), ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, if, (]
[ParameterizedType, ), type, ), ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, if, (, assigningType, ==]
[;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, if, (, assigningType, ==, null, ), {, return]
[<, ?, >, ), {, if, (, assigningType, ==, null, ), {, return, null, ;, }, final, Object, genericDeclaration, =]
[<, ?, >, ), {, if, (, assigningType, ==, null, ), {, return, null, ;, }, final, Object, genericDeclaration, =]
[?, >, ), {, if, (, assigningType, ==, null, ), {, return, null, ;, }, final, Object, genericDeclaration, =, (]
[assigningType, ==, null, ), {, return, null, ;, }, final, Object, genericDeclaration, =, (, (, TypeVariable, <, ?, >, )]
[final, Object, genericDeclaration, =, (, (, TypeVariable, <, ?, >, ), type, ), ., getGenericDeclaration, (, ), ;, if, (]
[Object, genericDeclaration, =, (, (, TypeVariable, <, ?, >, ), type, ), ., getGenericDeclaration, (, ), ;, if, (, !]
[genericDeclaration, =, (, (, TypeVariable, <, ?, >, ), type, ), ., getGenericDeclaration, (, ), ;, if, (, !, (]
[genericDeclaration, =, (, (, TypeVariable, <, ?, >, ), type, ), ., getGenericDeclaration, (, ), ;, if, (, !, (]
[), ., getGenericDeclaration, (, ), ;, if, (, !, (, genericDeclaration, instanceof, Class, <, ?, >, ), ), {, return]
[>, ), ), {, return, null, ;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =]
[), {, return, null, ;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, getTypeArguments, (]
[return, null, ;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, getTypeArguments, (, assigningType, ,]
[<, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, getTypeArguments, (, assigningType, ,, (, Class, <, ?, >, )]
[,, Type, >, typeVarAssigns, =, getTypeArguments, (, assigningType, ,, (, Class, <, ?, >, ), genericDeclaration, ), ;, if, (]
[,, Type, >, typeVarAssigns, =, getTypeArguments, (, assigningType, ,, (, Class, <, ?, >, ), genericDeclaration, ), ;, if, (]
[>, typeVarAssigns, =, getTypeArguments, (, assigningType, ,, (, Class, <, ?, >, ), genericDeclaration, ), ;, if, (, typeVarAssigns, ==]
[(, assigningType, ,, (, Class, <, ?, >, ), genericDeclaration, ), ;, if, (, typeVarAssigns, ==, null, ), {, return]
[>, ), genericDeclaration, ), ;, if, (, typeVarAssigns, ==, null, ), {, return, null, ;, }, final, Type, typeArgument, =]
[>, ), genericDeclaration, ), ;, if, (, typeVarAssigns, ==, null, ), {, return, null, ;, }, final, Type, typeArgument, =]
[;, if, (, typeVarAssigns, ==, null, ), {, return, null, ;, }, final, Type, typeArgument, =, typeVarAssigns, ., get, (]
[null, ), {, return, null, ;, }, final, Type, typeArgument, =, typeVarAssigns, ., get, (, type, ), ;, if, (]
[null, ), {, return, null, ;, }, final, Type, typeArgument, =, typeVarAssigns, ., get, (, type, ), ;, if, (]
[{, return, null, ;, }, final, Type, typeArgument, =, typeVarAssigns, ., get, (, type, ), ;, if, (, typeArgument, ==]
[}, final, Type, typeArgument, =, typeVarAssigns, ., get, (, type, ), ;, if, (, typeArgument, ==, null, ), {, return]
[=, typeVarAssigns, ., get, (, type, ), ;, if, (, typeArgument, ==, null, ), {, return, null, ;, }, return]
[., get, (, type, ), ;, if, (, typeArgument, ==, null, ), {, return, null, ;, }, return, getRawType, (]
[(, type, ), ;, if, (, typeArgument, ==, null, ), {, return, null, ;, }, return, getRawType, (, typeArgument, ,]
[typeArgument, ==, null, ), {, return, null, ;, }, return, getRawType, (, typeArgument, ,, assigningType, ), ;, }, if, (]
[typeArgument, ==, null, ), {, return, null, ;, }, return, getRawType, (, typeArgument, ,, assigningType, ), ;, }, if, (]
[typeArgument, ,, assigningType, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, final, Class, <, ?, >, rawComponentType, =]
[assigningType, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, final, Class, <, ?, >, rawComponentType, =, getRawType, (]
[assigningType, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, final, Class, <, ?, >, rawComponentType, =, getRawType, (]
[), ;, }, if, (, type, instanceof, GenericArrayType, ), {, final, Class, <, ?, >, rawComponentType, =, getRawType, (, (]
[if, (, type, instanceof, GenericArrayType, ), {, final, Class, <, ?, >, rawComponentType, =, getRawType, (, (, (, GenericArrayType, )]
[final, Class, <, ?, >, rawComponentType, =, getRawType, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,]
[>, rawComponentType, =, getRawType, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, assigningType, ), ;, return]
[>, rawComponentType, =, getRawType, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, assigningType, ), ;, return]
[>, rawComponentType, =, getRawType, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, assigningType, ), ;, return]
[(, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, assigningType, ), ;, return, Array, ., newInstance, (]
[(, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, assigningType, ), ;, return, Array, ., newInstance, (, rawComponentType, ,]
[assigningType, ), ;, return, Array, ., newInstance, (, rawComponentType, ,, 0, ), ., getClass, (, ), ;, }, if, (]
[assigningType, ), ;, return, Array, ., newInstance, (, rawComponentType, ,, 0, ), ., getClass, (, ), ;, }, if, (]
[newInstance, (, rawComponentType, ,, 0, ), ., getClass, (, ), ;, }, if, (, type, instanceof, WildcardType, ), {, return]
[0, ), ., getClass, (, ), ;, }, if, (, type, instanceof, WildcardType, ), {, return, null, ;, }, throw]
[getClass, (, ), ;, }, if, (, type, instanceof, WildcardType, ), {, return, null, ;, }, throw, new, IllegalArgumentException, (]
[getClass, (, ), ;, }, if, (, type, instanceof, WildcardType, ), {, return, null, ;, }, throw, new, IllegalArgumentException, (]
[), ;, }, if, (, type, instanceof, WildcardType, ), {, return, null, ;, }, throw, new, IllegalArgumentException, (, "unknown type: ", +]
[new, IllegalArgumentException, (, "unknown type: ", +, type, ), ;, }, public, static, boolean, isArrayType, (, final, Type, type, ), {, return]
[new, IllegalArgumentException, (, "unknown type: ", +, type, ), ;, }, public, static, boolean, isArrayType, (, final, Type, type, ), {, return]
[new, IllegalArgumentException, (, "unknown type: ", +, type, ), ;, }, public, static, boolean, isArrayType, (, final, Type, type, ), {, return]
[+, type, ), ;, }, public, static, boolean, isArrayType, (, final, Type, type, ), {, return, type, instanceof, GenericArrayType, ||]
[+, type, ), ;, }, public, static, boolean, isArrayType, (, final, Type, type, ), {, return, type, instanceof, GenericArrayType, ||]
[+, type, ), ;, }, public, static, boolean, isArrayType, (, final, Type, type, ), {, return, type, instanceof, GenericArrayType, ||]
[boolean, isArrayType, (, final, Type, type, ), {, return, type, instanceof, GenericArrayType, ||, type, instanceof, Class, <, ?, >, &&]
[boolean, isArrayType, (, final, Type, type, ), {, return, type, instanceof, GenericArrayType, ||, type, instanceof, Class, <, ?, >, &&]
[isArrayType, (, final, Type, type, ), {, return, type, instanceof, GenericArrayType, ||, type, instanceof, Class, <, ?, >, &&, (]
[{, return, type, instanceof, GenericArrayType, ||, type, instanceof, Class, <, ?, >, &&, (, (, Class, <, ?, >, )]
[type, ), ., isArray, (, ), ;, }, public, static, Type, getArrayComponentType, (, final, Type, type, ), {, if, (]
[type, ), ., isArray, (, ), ;, }, public, static, Type, getArrayComponentType, (, final, Type, type, ), {, if, (]
[type, ), {, if, (, type, instanceof, Class, <, ?, >, ), {, final, Class, <, ?, >, clazz, =]
[instanceof, Class, <, ?, >, ), {, final, Class, <, ?, >, clazz, =, (, Class, <, ?, >, )]
[?, >, ), {, final, Class, <, ?, >, clazz, =, (, Class, <, ?, >, ), type, ;, return]
[?, >, ), {, final, Class, <, ?, >, clazz, =, (, Class, <, ?, >, ), type, ;, return]
[?, >, ), {, final, Class, <, ?, >, clazz, =, (, Class, <, ?, >, ), type, ;, return]
[<, ?, >, clazz, =, (, Class, <, ?, >, ), type, ;, return, clazz, ., isArray, (, ), ?]
[<, ?, >, clazz, =, (, Class, <, ?, >, ), type, ;, return, clazz, ., isArray, (, ), ?]
[Class, <, ?, >, ), type, ;, return, clazz, ., isArray, (, ), ?, clazz, ., getComponentType, (, ), :]
[type, ;, return, clazz, ., isArray, (, ), ?, clazz, ., getComponentType, (, ), :, null, ;, }, if, (]
[type, ;, return, clazz, ., isArray, (, ), ?, clazz, ., getComponentType, (, ), :, null, ;, }, if, (]
[(, ), ?, clazz, ., getComponentType, (, ), :, null, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return]
[(, ), ?, clazz, ., getComponentType, (, ), :, null, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return]
[), ?, clazz, ., getComponentType, (, ), :, null, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, (]
[., getComponentType, (, ), :, null, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, (, (, GenericArrayType, )]
[(, type, instanceof, GenericArrayType, ), {, return, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ;, }, return]
