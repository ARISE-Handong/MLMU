[., MathUtils, ;, public, class, Complex, implements, FieldElement, <, Complex, >, ,, Serializable, {, public, static, final, Complex, I, =]
[public, class, Complex, implements, FieldElement, <, Complex, >, ,, Serializable, {, public, static, final, Complex, I, =, new, Complex, (]
[Complex, implements, FieldElement, <, Complex, >, ,, Serializable, {, public, static, final, Complex, I, =, new, Complex, (, 0.0, ,]
[public, static, final, Complex, I, =, new, Complex, (, 0.0, ,, 1.0, ), ;, public, static, final, Complex, NaN, =]
[Complex, I, =, new, Complex, (, 0.0, ,, 1.0, ), ;, public, static, final, Complex, NaN, =, new, Complex, (]
[Complex, I, =, new, Complex, (, 0.0, ,, 1.0, ), ;, public, static, final, Complex, NaN, =, new, Complex, (]
[Complex, (, 0.0, ,, 1.0, ), ;, public, static, final, Complex, NaN, =, new, Complex, (, Double, ., NaN, ,]
[Complex, (, 0.0, ,, 1.0, ), ;, public, static, final, Complex, NaN, =, new, Complex, (, Double, ., NaN, ,]
[NaN, =, new, Complex, (, Double, ., NaN, ,, Double, ., NaN, ), ;, public, static, final, Complex, INF, =]
[Complex, (, Double, ., NaN, ,, Double, ., NaN, ), ;, public, static, final, Complex, INF, =, new, Complex, (]
[Complex, (, Double, ., NaN, ,, Double, ., NaN, ), ;, public, static, final, Complex, INF, =, new, Complex, (]
[NaN, ,, Double, ., NaN, ), ;, public, static, final, Complex, INF, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,]
[NaN, ,, Double, ., NaN, ), ;, public, static, final, Complex, INF, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,]
[INF, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Complex, ONE, =]
[Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Complex, ONE, =, new, Complex, (]
[Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Complex, ONE, =, new, Complex, (, 1.0, ,]
[public, static, final, Complex, ONE, =, new, Complex, (, 1.0, ,, 0.0, ), ;, public, static, final, Complex, ZERO, =]
[Complex, ONE, =, new, Complex, (, 1.0, ,, 0.0, ), ;, public, static, final, Complex, ZERO, =, new, Complex, (]
[=, new, Complex, (, 1.0, ,, 0.0, ), ;, public, static, final, Complex, ZERO, =, new, Complex, (, 0.0, ,]
[public, static, final, Complex, ZERO, =, new, Complex, (, 0.0, ,, 0.0, ), ;, private, static, final, long, serialVersionUID, =]
[static, final, Complex, ZERO, =, new, Complex, (, 0.0, ,, 0.0, ), ;, private, static, final, long, serialVersionUID, =, -]
[final, transient, boolean, isNaN, ;, private, final, transient, boolean, isInfinite, ;, public, Complex, (, double, real, ), {, this, (]
[boolean, isNaN, ;, private, final, transient, boolean, isInfinite, ;, public, Complex, (, double, real, ), {, this, (, real, ,]
[), {, this, (, real, ,, 0.0, ), ;, }, public, Complex, (, double, real, ,, double, imaginary, ), {]
[), {, this, (, real, ,, 0.0, ), ;, }, public, Complex, (, double, real, ,, double, imaginary, ), {]
[real, ,, 0.0, ), ;, }, public, Complex, (, double, real, ,, double, imaginary, ), {, this, ., real, =]
[0.0, ), ;, }, public, Complex, (, double, real, ,, double, imaginary, ), {, this, ., real, =, real, ;]
[0.0, ), ;, }, public, Complex, (, double, real, ,, double, imaginary, ), {, this, ., real, =, real, ;]
[public, Complex, (, double, real, ,, double, imaginary, ), {, this, ., real, =, real, ;, this, ., imaginary, =]
[(, double, real, ,, double, imaginary, ), {, this, ., real, =, real, ;, this, ., imaginary, =, imaginary, ;]
[real, ,, double, imaginary, ), {, this, ., real, =, real, ;, this, ., imaginary, =, imaginary, ;, isNaN, =]
[real, ,, double, imaginary, ), {, this, ., real, =, real, ;, this, ., imaginary, =, imaginary, ;, isNaN, =]
[real, ,, double, imaginary, ), {, this, ., real, =, real, ;, this, ., imaginary, =, imaginary, ;, isNaN, =]
[), {, this, ., real, =, real, ;, this, ., imaginary, =, imaginary, ;, isNaN, =, Double, ., isNaN, (]
[., real, =, real, ;, this, ., imaginary, =, imaginary, ;, isNaN, =, Double, ., isNaN, (, real, ), ||]
[., real, =, real, ;, this, ., imaginary, =, imaginary, ;, isNaN, =, Double, ., isNaN, (, real, ), ||]
[;, this, ., imaginary, =, imaginary, ;, isNaN, =, Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (]
[imaginary, =, imaginary, ;, isNaN, =, Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (, imaginary, ), ;]
[imaginary, ;, isNaN, =, Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (, imaginary, ), ;, isInfinite, =]
[imaginary, ;, isNaN, =, Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (, imaginary, ), ;, isInfinite, =]
[;, isNaN, =, Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (, imaginary, ), ;, isInfinite, =, !]
[=, Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (, imaginary, ), ;, isInfinite, =, !, isNaN, &&]
[Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (, imaginary, ), ;, isInfinite, =, !, isNaN, &&, (]
[Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (, imaginary, ), ;, isInfinite, =, !, isNaN, &&, (]
[Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (, imaginary, ), ;, isInfinite, =, !, isNaN, &&, (]
[real, ), ||, Double, ., isNaN, (, imaginary, ), ;, isInfinite, =, !, isNaN, &&, (, Double, ., isInfinite, (]
[Double, ., isNaN, (, imaginary, ), ;, isInfinite, =, !, isNaN, &&, (, Double, ., isInfinite, (, real, ), ||]
[Double, ., isNaN, (, imaginary, ), ;, isInfinite, =, !, isNaN, &&, (, Double, ., isInfinite, (, real, ), ||]
[imaginary, ), ;, isInfinite, =, !, isNaN, &&, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (]
[real, ), ||, Double, ., isInfinite, (, imaginary, ), ), ;, }, public, double, abs, (, ), {, if, (]
[., isInfinite, (, imaginary, ), ), ;, }, public, double, abs, (, ), {, if, (, isNaN, ), {, return]
[., isInfinite, (, imaginary, ), ), ;, }, public, double, abs, (, ), {, if, (, isNaN, ), {, return]
[}, public, double, abs, (, ), {, if, (, isNaN, ), {, return, Double, ., NaN, ;, }, if, (]
[{, if, (, isNaN, ), {, return, Double, ., NaN, ;, }, if, (, isInfinite, (, ), ), {, return]
[{, if, (, isNaN, ), {, return, Double, ., NaN, ;, }, if, (, isInfinite, (, ), ), {, return]
[Double, ., NaN, ;, }, if, (, isInfinite, (, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (]
[Double, ., NaN, ;, }, if, (, isInfinite, (, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (]
[Double, ., NaN, ;, }, if, (, isInfinite, (, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (]
[}, if, (, isInfinite, (, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, FastMath, ., abs, (]
[isInfinite, (, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, FastMath, ., abs, (, real, ), <]
[isInfinite, (, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, FastMath, ., abs, (, real, ), <]
[{, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, FastMath, ., abs, (, real, ), <, FastMath, ., abs, (]
[}, if, (, FastMath, ., abs, (, real, ), <, FastMath, ., abs, (, imaginary, ), ), {, if, (]
[}, if, (, FastMath, ., abs, (, real, ), <, FastMath, ., abs, (, imaginary, ), ), {, if, (]
[(, FastMath, ., abs, (, real, ), <, FastMath, ., abs, (, imaginary, ), ), {, if, (, imaginary, ==]
[(, real, ), <, FastMath, ., abs, (, imaginary, ), ), {, if, (, imaginary, ==, 0.0, ), {, return]
[(, real, ), <, FastMath, ., abs, (, imaginary, ), ), {, if, (, imaginary, ==, 0.0, ), {, return]
[FastMath, ., abs, (, imaginary, ), ), {, if, (, imaginary, ==, 0.0, ), {, return, FastMath, ., abs, (]
[{, if, (, imaginary, ==, 0.0, ), {, return, FastMath, ., abs, (, real, ), ;, }, double, q, =]
[{, if, (, imaginary, ==, 0.0, ), {, return, FastMath, ., abs, (, real, ), ;, }, double, q, =]
[(, imaginary, ==, 0.0, ), {, return, FastMath, ., abs, (, real, ), ;, }, double, q, =, real, /]
[0.0, ), {, return, FastMath, ., abs, (, real, ), ;, }, double, q, =, real, /, imaginary, ;, return]
[0.0, ), {, return, FastMath, ., abs, (, real, ), ;, }, double, q, =, real, /, imaginary, ;, return]
[0.0, ), {, return, FastMath, ., abs, (, real, ), ;, }, double, q, =, real, /, imaginary, ;, return]
[FastMath, ., abs, (, real, ), ;, }, double, q, =, real, /, imaginary, ;, return, FastMath, ., abs, (]
[(, real, ), ;, }, double, q, =, real, /, imaginary, ;, return, FastMath, ., abs, (, imaginary, ), *]
[(, real, ), ;, }, double, q, =, real, /, imaginary, ;, return, FastMath, ., abs, (, imaginary, ), *]
[}, double, q, =, real, /, imaginary, ;, return, FastMath, ., abs, (, imaginary, ), *, FastMath, ., sqrt, (]
[}, double, q, =, real, /, imaginary, ;, return, FastMath, ., abs, (, imaginary, ), *, FastMath, ., sqrt, (]
[q, =, real, /, imaginary, ;, return, FastMath, ., abs, (, imaginary, ), *, FastMath, ., sqrt, (, 1, +]
[q, =, real, /, imaginary, ;, return, FastMath, ., abs, (, imaginary, ), *, FastMath, ., sqrt, (, 1, +]
[real, /, imaginary, ;, return, FastMath, ., abs, (, imaginary, ), *, FastMath, ., sqrt, (, 1, +, q, *]
[(, imaginary, ), *, FastMath, ., sqrt, (, 1, +, q, *, q, ), ;, }, else, {, if, (]
[(, imaginary, ), *, FastMath, ., sqrt, (, 1, +, q, *, q, ), ;, }, else, {, if, (]
[), *, FastMath, ., sqrt, (, 1, +, q, *, q, ), ;, }, else, {, if, (, real, ==]
[sqrt, (, 1, +, q, *, q, ), ;, }, else, {, if, (, real, ==, 0.0, ), {, return]
[sqrt, (, 1, +, q, *, q, ), ;, }, else, {, if, (, real, ==, 0.0, ), {, return]
[q, *, q, ), ;, }, else, {, if, (, real, ==, 0.0, ), {, return, FastMath, ., abs, (]
[{, if, (, real, ==, 0.0, ), {, return, FastMath, ., abs, (, imaginary, ), ;, }, double, q, =]
[{, if, (, real, ==, 0.0, ), {, return, FastMath, ., abs, (, imaginary, ), ;, }, double, q, =]
[(, real, ==, 0.0, ), {, return, FastMath, ., abs, (, imaginary, ), ;, }, double, q, =, imaginary, /]
[0.0, ), {, return, FastMath, ., abs, (, imaginary, ), ;, }, double, q, =, imaginary, /, real, ;, return]
[0.0, ), {, return, FastMath, ., abs, (, imaginary, ), ;, }, double, q, =, imaginary, /, real, ;, return]
[0.0, ), {, return, FastMath, ., abs, (, imaginary, ), ;, }, double, q, =, imaginary, /, real, ;, return]
[FastMath, ., abs, (, imaginary, ), ;, }, double, q, =, imaginary, /, real, ;, return, FastMath, ., abs, (]
[(, imaginary, ), ;, }, double, q, =, imaginary, /, real, ;, return, FastMath, ., abs, (, real, ), *]
[(, imaginary, ), ;, }, double, q, =, imaginary, /, real, ;, return, FastMath, ., abs, (, real, ), *]
[}, double, q, =, imaginary, /, real, ;, return, FastMath, ., abs, (, real, ), *, FastMath, ., sqrt, (]
[}, double, q, =, imaginary, /, real, ;, return, FastMath, ., abs, (, real, ), *, FastMath, ., sqrt, (]
[q, =, imaginary, /, real, ;, return, FastMath, ., abs, (, real, ), *, FastMath, ., sqrt, (, 1, +]
[q, =, imaginary, /, real, ;, return, FastMath, ., abs, (, real, ), *, FastMath, ., sqrt, (, 1, +]
[imaginary, /, real, ;, return, FastMath, ., abs, (, real, ), *, FastMath, ., sqrt, (, 1, +, q, *]
[(, 1, +, q, *, q, ), ;, }, }, public, Complex, add, (, Complex, addend, ), throws, NullArgumentException, {]
[(, 1, +, q, *, q, ), ;, }, }, public, Complex, add, (, Complex, addend, ), throws, NullArgumentException, {]
[*, q, ), ;, }, }, public, Complex, add, (, Complex, addend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[}, public, Complex, add, (, Complex, addend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, addend, ), ;, if, (]
[}, public, Complex, add, (, Complex, addend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, addend, ), ;, if, (]
[Complex, add, (, Complex, addend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, addend, ), ;, if, (, isNaN, ||]
[Complex, add, (, Complex, addend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, addend, ), ;, if, (, isNaN, ||]
[throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, addend, ), ;, if, (, isNaN, ||, addend, ., isNaN, ), {, return]
[., checkNotNull, (, addend, ), ;, if, (, isNaN, ||, addend, ., isNaN, ), {, return, NaN, ;, }, return]
[(, addend, ), ;, if, (, isNaN, ||, addend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[(, addend, ), ;, if, (, isNaN, ||, addend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[), ;, if, (, isNaN, ||, addend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, +]
[), ;, if, (, isNaN, ||, addend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, +]
[addend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ., getReal, (, ), ,]
[addend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ., getReal, (, ), ,]
[isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ., getReal, (, ), ,, imaginary, +]
[isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ., getReal, (, ), ,, imaginary, +]
[imaginary, +, addend, ., getImaginary, (, ), ), ;, }, public, Complex, add, (, double, addend, ), {, if, (]
[imaginary, +, addend, ., getImaginary, (, ), ), ;, }, public, Complex, add, (, double, addend, ), {, if, (]
[addend, ., getImaginary, (, ), ), ;, }, public, Complex, add, (, double, addend, ), {, if, (, isNaN, ||]
[addend, ., getImaginary, (, ), ), ;, }, public, Complex, add, (, double, addend, ), {, if, (, isNaN, ||]
[), ), ;, }, public, Complex, add, (, double, addend, ), {, if, (, isNaN, ||, Double, ., isNaN, (]
[Complex, add, (, double, addend, ), {, if, (, isNaN, ||, Double, ., isNaN, (, addend, ), ), {, return]
[addend, ), {, if, (, isNaN, ||, Double, ., isNaN, (, addend, ), ), {, return, NaN, ;, }, return]
[{, if, (, isNaN, ||, Double, ., isNaN, (, addend, ), ), {, return, NaN, ;, }, return, createComplex, (]
[{, if, (, isNaN, ||, Double, ., isNaN, (, addend, ), ), {, return, NaN, ;, }, return, createComplex, (]
[(, isNaN, ||, Double, ., isNaN, (, addend, ), ), {, return, NaN, ;, }, return, createComplex, (, real, +]
[||, Double, ., isNaN, (, addend, ), ), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ,]
[}, return, createComplex, (, real, +, addend, ,, imaginary, ), ;, }, public, Complex, conjugate, (, ), {, if, (]
[real, +, addend, ,, imaginary, ), ;, }, public, Complex, conjugate, (, ), {, if, (, isNaN, ), {, return]
[imaginary, ), ;, }, public, Complex, conjugate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[;, }, public, Complex, conjugate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[public, Complex, conjugate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, ,]
[Complex, conjugate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, ,, -]
[return, createComplex, (, real, ,, -, imaginary, ), ;, }, public, Complex, divide, (, Complex, divisor, ), throws, NullArgumentException, {]
[return, createComplex, (, real, ,, -, imaginary, ), ;, }, public, Complex, divide, (, Complex, divisor, ), throws, NullArgumentException, {]
[,, -, imaginary, ), ;, }, public, Complex, divide, (, Complex, divisor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[}, public, Complex, divide, (, Complex, divisor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, divisor, ), ;, if, (]
[}, public, Complex, divide, (, Complex, divisor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, divisor, ), ;, if, (]
[Complex, divide, (, Complex, divisor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, divisor, ), ;, if, (, isNaN, ||]
[Complex, divide, (, Complex, divisor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, divisor, ), ;, if, (, isNaN, ||]
[throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, divisor, ), ;, if, (, isNaN, ||, divisor, ., isNaN, ), {, return]
[divisor, ), ;, if, (, isNaN, ||, divisor, ., isNaN, ), {, return, NaN, ;, }, final, double, c, =]
[divisor, ), ;, if, (, isNaN, ||, divisor, ., isNaN, ), {, return, NaN, ;, }, final, double, c, =]
[), {, return, NaN, ;, }, final, double, c, =, divisor, ., getReal, (, ), ;, final, double, d, =]
[), {, return, NaN, ;, }, final, double, c, =, divisor, ., getReal, (, ), ;, final, double, d, =]
[c, =, divisor, ., getReal, (, ), ;, final, double, d, =, divisor, ., getImaginary, (, ), ;, if, (]
[c, =, divisor, ., getReal, (, ), ;, final, double, d, =, divisor, ., getImaginary, (, ), ;, if, (]
[c, =, divisor, ., getReal, (, ), ;, final, double, d, =, divisor, ., getImaginary, (, ), ;, if, (]
[divisor, ., getReal, (, ), ;, final, double, d, =, divisor, ., getImaginary, (, ), ;, if, (, c, ==]
[getReal, (, ), ;, final, double, d, =, divisor, ., getImaginary, (, ), ;, if, (, c, ==, 0.0, &&]
[getReal, (, ), ;, final, double, d, =, divisor, ., getImaginary, (, ), ;, if, (, c, ==, 0.0, &&]
[), ;, final, double, d, =, divisor, ., getImaginary, (, ), ;, if, (, c, ==, 0.0, &&, d, ==]
[d, =, divisor, ., getImaginary, (, ), ;, if, (, c, ==, 0.0, &&, d, ==, 0.0, ), {, return]
[(, ), ;, if, (, c, ==, 0.0, &&, d, ==, 0.0, ), {, return, NaN, ;, }, if, (]
[(, ), ;, if, (, c, ==, 0.0, &&, d, ==, 0.0, ), {, return, NaN, ;, }, if, (]
[(, ), ;, if, (, c, ==, 0.0, &&, d, ==, 0.0, ), {, return, NaN, ;, }, if, (]
[==, 0.0, &&, d, ==, 0.0, ), {, return, NaN, ;, }, if, (, divisor, ., isInfinite, (, ), &&]
[0.0, &&, d, ==, 0.0, ), {, return, NaN, ;, }, if, (, divisor, ., isInfinite, (, ), &&, !]
[{, return, NaN, ;, }, if, (, divisor, ., isInfinite, (, ), &&, !, isInfinite, (, ), ), {, return]
[if, (, divisor, ., isInfinite, (, ), &&, !, isInfinite, (, ), ), {, return, ZERO, ;, }, if, (]
[if, (, divisor, ., isInfinite, (, ), &&, !, isInfinite, (, ), ), {, return, ZERO, ;, }, if, (]
[if, (, divisor, ., isInfinite, (, ), &&, !, isInfinite, (, ), ), {, return, ZERO, ;, }, if, (]
[isInfinite, (, ), &&, !, isInfinite, (, ), ), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (]
[&&, !, isInfinite, (, ), ), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (, c, ), <]
[&&, !, isInfinite, (, ), ), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (, c, ), <]
[), ), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (, c, ), <, FastMath, ., abs, (]
[if, (, FastMath, ., abs, (, c, ), <, FastMath, ., abs, (, d, ), ), {, double, q, =]
[if, (, FastMath, ., abs, (, c, ), <, FastMath, ., abs, (, d, ), ), {, double, q, =]
[FastMath, ., abs, (, c, ), <, FastMath, ., abs, (, d, ), ), {, double, q, =, c, /]
[), <, FastMath, ., abs, (, d, ), ), {, double, q, =, c, /, d, ;, double, denominator, =]
[), <, FastMath, ., abs, (, d, ), ), {, double, q, =, c, /, d, ;, double, denominator, =]
[), <, FastMath, ., abs, (, d, ), ), {, double, q, =, c, /, d, ;, double, denominator, =]
[FastMath, ., abs, (, d, ), ), {, double, q, =, c, /, d, ;, double, denominator, =, c, *]
[abs, (, d, ), ), {, double, q, =, c, /, d, ;, double, denominator, =, c, *, q, +]
[), ), {, double, q, =, c, /, d, ;, double, denominator, =, c, *, q, +, d, ;, return]
[{, double, q, =, c, /, d, ;, double, denominator, =, c, *, q, +, d, ;, return, createComplex, (]
[{, double, q, =, c, /, d, ;, double, denominator, =, c, *, q, +, d, ;, return, createComplex, (]
[double, q, =, c, /, d, ;, double, denominator, =, c, *, q, +, d, ;, return, createComplex, (, (]
[double, q, =, c, /, d, ;, double, denominator, =, c, *, q, +, d, ;, return, createComplex, (, (]
[double, q, =, c, /, d, ;, double, denominator, =, c, *, q, +, d, ;, return, createComplex, (, (]
[=, c, /, d, ;, double, denominator, =, c, *, q, +, d, ;, return, createComplex, (, (, real, *]
[/, d, ;, double, denominator, =, c, *, q, +, d, ;, return, createComplex, (, (, real, *, q, +]
[double, denominator, =, c, *, q, +, d, ;, return, createComplex, (, (, real, *, q, +, imaginary, ), /]
[=, c, *, q, +, d, ;, return, createComplex, (, (, real, *, q, +, imaginary, ), /, denominator, ,]
[=, c, *, q, +, d, ;, return, createComplex, (, (, real, *, q, +, imaginary, ), /, denominator, ,]
[c, *, q, +, d, ;, return, createComplex, (, (, real, *, q, +, imaginary, ), /, denominator, ,, (]
[c, *, q, +, d, ;, return, createComplex, (, (, real, *, q, +, imaginary, ), /, denominator, ,, (]
[c, *, q, +, d, ;, return, createComplex, (, (, real, *, q, +, imaginary, ), /, denominator, ,, (]
[q, +, d, ;, return, createComplex, (, (, real, *, q, +, imaginary, ), /, denominator, ,, (, imaginary, *]
[d, ;, return, createComplex, (, (, real, *, q, +, imaginary, ), /, denominator, ,, (, imaginary, *, q, -]
[createComplex, (, (, real, *, q, +, imaginary, ), /, denominator, ,, (, imaginary, *, q, -, real, ), /]
[/, denominator, ,, (, imaginary, *, q, -, real, ), /, denominator, ), ;, }, else, {, double, q, =]
[/, denominator, ,, (, imaginary, *, q, -, real, ), /, denominator, ), ;, }, else, {, double, q, =]
[,, (, imaginary, *, q, -, real, ), /, denominator, ), ;, }, else, {, double, q, =, d, /]
[-, real, ), /, denominator, ), ;, }, else, {, double, q, =, d, /, c, ;, double, denominator, =]
[-, real, ), /, denominator, ), ;, }, else, {, double, q, =, d, /, c, ;, double, denominator, =]
[-, real, ), /, denominator, ), ;, }, else, {, double, q, =, d, /, c, ;, double, denominator, =]
[), /, denominator, ), ;, }, else, {, double, q, =, d, /, c, ;, double, denominator, =, d, *]
[denominator, ), ;, }, else, {, double, q, =, d, /, c, ;, double, denominator, =, d, *, q, +]
[}, else, {, double, q, =, d, /, c, ;, double, denominator, =, d, *, q, +, c, ;, return]
[{, double, q, =, d, /, c, ;, double, denominator, =, d, *, q, +, c, ;, return, createComplex, (]
[{, double, q, =, d, /, c, ;, double, denominator, =, d, *, q, +, c, ;, return, createComplex, (]
[double, q, =, d, /, c, ;, double, denominator, =, d, *, q, +, c, ;, return, createComplex, (, (]
[double, q, =, d, /, c, ;, double, denominator, =, d, *, q, +, c, ;, return, createComplex, (, (]
[double, q, =, d, /, c, ;, double, denominator, =, d, *, q, +, c, ;, return, createComplex, (, (]
[=, d, /, c, ;, double, denominator, =, d, *, q, +, c, ;, return, createComplex, (, (, imaginary, *]
[/, c, ;, double, denominator, =, d, *, q, +, c, ;, return, createComplex, (, (, imaginary, *, q, +]
[double, denominator, =, d, *, q, +, c, ;, return, createComplex, (, (, imaginary, *, q, +, real, ), /]
[=, d, *, q, +, c, ;, return, createComplex, (, (, imaginary, *, q, +, real, ), /, denominator, ,]
[=, d, *, q, +, c, ;, return, createComplex, (, (, imaginary, *, q, +, real, ), /, denominator, ,]
[d, *, q, +, c, ;, return, createComplex, (, (, imaginary, *, q, +, real, ), /, denominator, ,, (]
[d, *, q, +, c, ;, return, createComplex, (, (, imaginary, *, q, +, real, ), /, denominator, ,, (]
[q, +, c, ;, return, createComplex, (, (, imaginary, *, q, +, real, ), /, denominator, ,, (, imaginary, -]
[q, +, c, ;, return, createComplex, (, (, imaginary, *, q, +, real, ), /, denominator, ,, (, imaginary, -]
[c, ;, return, createComplex, (, (, imaginary, *, q, +, real, ), /, denominator, ,, (, imaginary, -, real, *]
[createComplex, (, (, imaginary, *, q, +, real, ), /, denominator, ,, (, imaginary, -, real, *, q, ), /]
[real, *, q, ), /, denominator, ), ;, }, }, public, Complex, divide, (, double, divisor, ), {, if, (]
[real, *, q, ), /, denominator, ), ;, }, }, public, Complex, divide, (, double, divisor, ), {, if, (]
[q, ), /, denominator, ), ;, }, }, public, Complex, divide, (, double, divisor, ), {, if, (, isNaN, ||]
[q, ), /, denominator, ), ;, }, }, public, Complex, divide, (, double, divisor, ), {, if, (, isNaN, ||]
[), ;, }, }, public, Complex, divide, (, double, divisor, ), {, if, (, isNaN, ||, Double, ., isNaN, (]
[Complex, divide, (, double, divisor, ), {, if, (, isNaN, ||, Double, ., isNaN, (, divisor, ), ), {, return]
[), {, if, (, isNaN, ||, Double, ., isNaN, (, divisor, ), ), {, return, NaN, ;, }, if, (]
[), {, if, (, isNaN, ||, Double, ., isNaN, (, divisor, ), ), {, return, NaN, ;, }, if, (]
[if, (, isNaN, ||, Double, ., isNaN, (, divisor, ), ), {, return, NaN, ;, }, if, (, divisor, ==]
[Double, ., isNaN, (, divisor, ), ), {, return, NaN, ;, }, if, (, divisor, ==, 0d, ), {, return]
[), ), {, return, NaN, ;, }, if, (, divisor, ==, 0d, ), {, return, NaN, ;, }, if, (]
[), ), {, return, NaN, ;, }, if, (, divisor, ==, 0d, ), {, return, NaN, ;, }, if, (]
[NaN, ;, }, if, (, divisor, ==, 0d, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (]
[divisor, ==, 0d, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, divisor, ), ), {, return]
[divisor, ==, 0d, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, divisor, ), ), {, return]
[==, 0d, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, divisor, ), ), {, return, !]
[return, NaN, ;, }, if, (, Double, ., isInfinite, (, divisor, ), ), {, return, !, isInfinite, (, ), ?]
[;, }, if, (, Double, ., isInfinite, (, divisor, ), ), {, return, !, isInfinite, (, ), ?, ZERO, :]
[Double, ., isInfinite, (, divisor, ), ), {, return, !, isInfinite, (, ), ?, ZERO, :, NaN, ;, }, return]
[isInfinite, (, divisor, ), ), {, return, !, isInfinite, (, ), ?, ZERO, :, NaN, ;, }, return, createComplex, (]
[isInfinite, (, divisor, ), ), {, return, !, isInfinite, (, ), ?, ZERO, :, NaN, ;, }, return, createComplex, (]
[divisor, ), ), {, return, !, isInfinite, (, ), ?, ZERO, :, NaN, ;, }, return, createComplex, (, real, /]
[), {, return, !, isInfinite, (, ), ?, ZERO, :, NaN, ;, }, return, createComplex, (, real, /, divisor, ,]
[), {, return, !, isInfinite, (, ), ?, ZERO, :, NaN, ;, }, return, createComplex, (, real, /, divisor, ,]
[return, !, isInfinite, (, ), ?, ZERO, :, NaN, ;, }, return, createComplex, (, real, /, divisor, ,, imaginary, /]
[createComplex, (, real, /, divisor, ,, imaginary, /, divisor, ), ;, }, public, Complex, reciprocal, (, ), {, if, (]
[divisor, ,, imaginary, /, divisor, ), ;, }, public, Complex, reciprocal, (, ), {, if, (, isNaN, ), {, return]
[), ;, }, public, Complex, reciprocal, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (]
[), ;, }, public, Complex, reciprocal, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (]
[), ;, }, public, Complex, reciprocal, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (]
[}, public, Complex, reciprocal, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (, real, ==]
[Complex, reciprocal, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (, real, ==, 0.0, &&]
[Complex, reciprocal, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (, real, ==, 0.0, &&]
[(, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (, real, ==, 0.0, &&, imaginary, ==]
[(, isNaN, ), {, return, NaN, ;, }, if, (, real, ==, 0.0, &&, imaginary, ==, 0.0, ), {, return]
[NaN, ;, }, if, (, real, ==, 0.0, &&, imaginary, ==, 0.0, ), {, return, INF, ;, }, if, (]
[(, real, ==, 0.0, &&, imaginary, ==, 0.0, ), {, return, INF, ;, }, if, (, isInfinite, ), {, return]
[imaginary, ==, 0.0, ), {, return, INF, ;, }, if, (, isInfinite, ), {, return, ZERO, ;, }, if, (]
[imaginary, ==, 0.0, ), {, return, INF, ;, }, if, (, isInfinite, ), {, return, ZERO, ;, }, if, (]
[imaginary, ==, 0.0, ), {, return, INF, ;, }, if, (, isInfinite, ), {, return, ZERO, ;, }, if, (]
[{, return, INF, ;, }, if, (, isInfinite, ), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (]
[;, }, if, (, isInfinite, ), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (, real, ), <]
[;, }, if, (, isInfinite, ), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (, real, ), <]
[isInfinite, ), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (, real, ), <, FastMath, ., abs, (]
[if, (, FastMath, ., abs, (, real, ), <, FastMath, ., abs, (, imaginary, ), ), {, double, q, =]
[if, (, FastMath, ., abs, (, real, ), <, FastMath, ., abs, (, imaginary, ), ), {, double, q, =]
[FastMath, ., abs, (, real, ), <, FastMath, ., abs, (, imaginary, ), ), {, double, q, =, real, /]
[), <, FastMath, ., abs, (, imaginary, ), ), {, double, q, =, real, /, imaginary, ;, double, scale, =]
[), <, FastMath, ., abs, (, imaginary, ), ), {, double, q, =, real, /, imaginary, ;, double, scale, =]
[FastMath, ., abs, (, imaginary, ), ), {, double, q, =, real, /, imaginary, ;, double, scale, =, 1., /]
[., abs, (, imaginary, ), ), {, double, q, =, real, /, imaginary, ;, double, scale, =, 1., /, (]
[., abs, (, imaginary, ), ), {, double, q, =, real, /, imaginary, ;, double, scale, =, 1., /, (]
[., abs, (, imaginary, ), ), {, double, q, =, real, /, imaginary, ;, double, scale, =, 1., /, (]
[(, imaginary, ), ), {, double, q, =, real, /, imaginary, ;, double, scale, =, 1., /, (, real, *]
[), ), {, double, q, =, real, /, imaginary, ;, double, scale, =, 1., /, (, real, *, q, +]
[q, =, real, /, imaginary, ;, double, scale, =, 1., /, (, real, *, q, +, imaginary, ), ;, return]
[real, /, imaginary, ;, double, scale, =, 1., /, (, real, *, q, +, imaginary, ), ;, return, createComplex, (]
[real, /, imaginary, ;, double, scale, =, 1., /, (, real, *, q, +, imaginary, ), ;, return, createComplex, (]
[imaginary, ;, double, scale, =, 1., /, (, real, *, q, +, imaginary, ), ;, return, createComplex, (, scale, *]
[double, scale, =, 1., /, (, real, *, q, +, imaginary, ), ;, return, createComplex, (, scale, *, q, ,]
[scale, =, 1., /, (, real, *, q, +, imaginary, ), ;, return, createComplex, (, scale, *, q, ,, -]
[imaginary, ), ;, return, createComplex, (, scale, *, q, ,, -, scale, ), ;, }, else, {, double, q, =]
[imaginary, ), ;, return, createComplex, (, scale, *, q, ,, -, scale, ), ;, }, else, {, double, q, =]
[;, return, createComplex, (, scale, *, q, ,, -, scale, ), ;, }, else, {, double, q, =, imaginary, /]
[*, q, ,, -, scale, ), ;, }, else, {, double, q, =, imaginary, /, real, ;, double, scale, =]
[*, q, ,, -, scale, ), ;, }, else, {, double, q, =, imaginary, /, real, ;, double, scale, =]
[,, -, scale, ), ;, }, else, {, double, q, =, imaginary, /, real, ;, double, scale, =, 1., /]
[-, scale, ), ;, }, else, {, double, q, =, imaginary, /, real, ;, double, scale, =, 1., /, (]
[-, scale, ), ;, }, else, {, double, q, =, imaginary, /, real, ;, double, scale, =, 1., /, (]
[-, scale, ), ;, }, else, {, double, q, =, imaginary, /, real, ;, double, scale, =, 1., /, (]
[), ;, }, else, {, double, q, =, imaginary, /, real, ;, double, scale, =, 1., /, (, imaginary, *]
[}, else, {, double, q, =, imaginary, /, real, ;, double, scale, =, 1., /, (, imaginary, *, q, +]
[q, =, imaginary, /, real, ;, double, scale, =, 1., /, (, imaginary, *, q, +, real, ), ;, return]
[imaginary, /, real, ;, double, scale, =, 1., /, (, imaginary, *, q, +, real, ), ;, return, createComplex, (]
[real, ;, double, scale, =, 1., /, (, imaginary, *, q, +, real, ), ;, return, createComplex, (, scale, ,]
[real, ;, double, scale, =, 1., /, (, imaginary, *, q, +, real, ), ;, return, createComplex, (, scale, ,]
[;, double, scale, =, 1., /, (, imaginary, *, q, +, real, ), ;, return, createComplex, (, scale, ,, -]
[scale, =, 1., /, (, imaginary, *, q, +, real, ), ;, return, createComplex, (, scale, ,, -, scale, *]
[-, scale, *, q, ), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[-, scale, *, q, ), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[*, q, ), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==]
[}, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[(, this, ==, other, ), {, return, true, ;, }, if, (, other, instanceof, Complex, ), {, Complex, c, =]
[other, ), {, return, true, ;, }, if, (, other, instanceof, Complex, ), {, Complex, c, =, (, Complex, )]
[true, ;, }, if, (, other, instanceof, Complex, ), {, Complex, c, =, (, Complex, ), other, ;, if, (]
[true, ;, }, if, (, other, instanceof, Complex, ), {, Complex, c, =, (, Complex, ), other, ;, if, (]
[instanceof, Complex, ), {, Complex, c, =, (, Complex, ), other, ;, if, (, c, ., isNaN, ), {, return]
[=, (, Complex, ), other, ;, if, (, c, ., isNaN, ), {, return, isNaN, ;, }, else, {, return]
[=, (, Complex, ), other, ;, if, (, c, ., isNaN, ), {, return, isNaN, ;, }, else, {, return]
[(, Complex, ), other, ;, if, (, c, ., isNaN, ), {, return, isNaN, ;, }, else, {, return, (]
[(, Complex, ), other, ;, if, (, c, ., isNaN, ), {, return, isNaN, ;, }, else, {, return, (]
[), other, ;, if, (, c, ., isNaN, ), {, return, isNaN, ;, }, else, {, return, (, real, ==]
[), other, ;, if, (, c, ., isNaN, ), {, return, isNaN, ;, }, else, {, return, (, real, ==]
[c, ., isNaN, ), {, return, isNaN, ;, }, else, {, return, (, real, ==, c, ., real, ), &&]
[., isNaN, ), {, return, isNaN, ;, }, else, {, return, (, real, ==, c, ., real, ), &&, (]
[., isNaN, ), {, return, isNaN, ;, }, else, {, return, (, real, ==, c, ., real, ), &&, (]
[), {, return, isNaN, ;, }, else, {, return, (, real, ==, c, ., real, ), &&, (, imaginary, ==]
[), {, return, isNaN, ;, }, else, {, return, (, real, ==, c, ., real, ), &&, (, imaginary, ==]
[return, (, real, ==, c, ., real, ), &&, (, imaginary, ==, c, ., imaginary, ), ;, }, }, return]
[., imaginary, ), ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (]
[}, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, ), {, return]
[;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, ), {, return, 7, ;, }, return]
[;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, ), {, return, 7, ;, }, return]
[@, Override, public, int, hashCode, (, ), {, if, (, isNaN, ), {, return, 7, ;, }, return, 37, *]
[Override, public, int, hashCode, (, ), {, if, (, isNaN, ), {, return, 7, ;, }, return, 37, *, (]
[Override, public, int, hashCode, (, ), {, if, (, isNaN, ), {, return, 7, ;, }, return, 37, *, (]
[Override, public, int, hashCode, (, ), {, if, (, isNaN, ), {, return, 7, ;, }, return, 37, *, (]
[int, hashCode, (, ), {, if, (, isNaN, ), {, return, 7, ;, }, return, 37, *, (, 17, *]
[int, hashCode, (, ), {, if, (, isNaN, ), {, return, 7, ;, }, return, 37, *, (, 17, *]
[{, if, (, isNaN, ), {, return, 7, ;, }, return, 37, *, (, 17, *, MathUtils, ., hash, (]
[isNaN, ), {, return, 7, ;, }, return, 37, *, (, 17, *, MathUtils, ., hash, (, imaginary, ), +]
[isNaN, ), {, return, 7, ;, }, return, 37, *, (, 17, *, MathUtils, ., hash, (, imaginary, ), +]
[7, ;, }, return, 37, *, (, 17, *, MathUtils, ., hash, (, imaginary, ), +, MathUtils, ., hash, (]
[(, imaginary, ), +, MathUtils, ., hash, (, real, ), ), ;, }, public, double, getImaginary, (, ), {, return]
[), ;, }, public, double, getImaginary, (, ), {, return, imaginary, ;, }, public, double, getReal, (, ), {, return]
[imaginary, ;, }, public, double, getReal, (, ), {, return, real, ;, }, public, boolean, isNaN, (, ), {, return]
[real, ;, }, public, boolean, isNaN, (, ), {, return, isNaN, ;, }, public, boolean, isInfinite, (, ), {, return]
[public, boolean, isInfinite, (, ), {, return, isInfinite, ;, }, public, Complex, multiply, (, Complex, factor, ), throws, NullArgumentException, {]
[public, boolean, isInfinite, (, ), {, return, isInfinite, ;, }, public, Complex, multiply, (, Complex, factor, ), throws, NullArgumentException, {]
[), {, return, isInfinite, ;, }, public, Complex, multiply, (, Complex, factor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[}, public, Complex, multiply, (, Complex, factor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, factor, ), ;, if, (]
[}, public, Complex, multiply, (, Complex, factor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, factor, ), ;, if, (]
[Complex, multiply, (, Complex, factor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, factor, ), ;, if, (, isNaN, ||]
[Complex, multiply, (, Complex, factor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, factor, ), ;, if, (, isNaN, ||]
[throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, factor, ), ;, if, (, isNaN, ||, factor, ., isNaN, ), {, return]
[checkNotNull, (, factor, ), ;, if, (, isNaN, ||, factor, ., isNaN, ), {, return, NaN, ;, }, if, (]
[checkNotNull, (, factor, ), ;, if, (, isNaN, ||, factor, ., isNaN, ), {, return, NaN, ;, }, if, (]
[checkNotNull, (, factor, ), ;, if, (, isNaN, ||, factor, ., isNaN, ), {, return, NaN, ;, }, if, (]
[checkNotNull, (, factor, ), ;, if, (, isNaN, ||, factor, ., isNaN, ), {, return, NaN, ;, }, if, (]
[checkNotNull, (, factor, ), ;, if, (, isNaN, ||, factor, ., isNaN, ), {, return, NaN, ;, }, if, (]
[;, if, (, isNaN, ||, factor, ., isNaN, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (]
[isNaN, ||, factor, ., isNaN, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||]
[isNaN, ||, factor, ., isNaN, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||]
[isNaN, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (]
[return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||]
[return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||]
[if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (]
[if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (]
[(, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ., real, ), ||]
[(, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ., real, ), ||]
[Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ., real, ), ||, Double, ., isInfinite, (]
[Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ., real, ), ||, Double, ., isInfinite, (]
[Double, ., isInfinite, (, factor, ., real, ), ||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {, return]
[factor, ., real, ), ||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {, return, INF, ;, }, return]
[real, ), ||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (]
[real, ), ||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (]
[real, ), ||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (]
[||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *]
[||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *]
[(, factor, ., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ., real, -]
[(, factor, ., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ., real, -]
[., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ., real, -, imaginary, *]
[., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ., real, -, imaginary, *]
[{, return, INF, ;, }, return, createComplex, (, real, *, factor, ., real, -, imaginary, *, factor, ., imaginary, ,]
[{, return, INF, ;, }, return, createComplex, (, real, *, factor, ., real, -, imaginary, *, factor, ., imaginary, ,]
[{, return, INF, ;, }, return, createComplex, (, real, *, factor, ., real, -, imaginary, *, factor, ., imaginary, ,]
[INF, ;, }, return, createComplex, (, real, *, factor, ., real, -, imaginary, *, factor, ., imaginary, ,, real, *]
[INF, ;, }, return, createComplex, (, real, *, factor, ., real, -, imaginary, *, factor, ., imaginary, ,, real, *]
[createComplex, (, real, *, factor, ., real, -, imaginary, *, factor, ., imaginary, ,, real, *, factor, ., imaginary, +]
[createComplex, (, real, *, factor, ., real, -, imaginary, *, factor, ., imaginary, ,, real, *, factor, ., imaginary, +]
[real, *, factor, ., real, -, imaginary, *, factor, ., imaginary, ,, real, *, factor, ., imaginary, +, imaginary, *]
[real, *, factor, ., real, -, imaginary, *, factor, ., imaginary, ,, real, *, factor, ., imaginary, +, imaginary, *]
[+, imaginary, *, factor, ., real, ), ;, }, public, Complex, multiply, (, final, int, factor, ), {, if, (]
[., real, ), ;, }, public, Complex, multiply, (, final, int, factor, ), {, if, (, isNaN, ), {, return]
[public, Complex, multiply, (, final, int, factor, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (]
[public, Complex, multiply, (, final, int, factor, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (]
[public, Complex, multiply, (, final, int, factor, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (]
[final, int, factor, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (]
[), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||]
[), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||]
[isNaN, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (]
[;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ), {, return]
[Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ), {, return, INF, ;, }, return]
[isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ), {, return, INF, ;, }, return, createComplex, (]
[isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ), {, return, INF, ;, }, return, createComplex, (]
[real, ), ||, Double, ., isInfinite, (, imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *]
[||, Double, ., isInfinite, (, imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,]
[||, Double, ., isInfinite, (, imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,]
[., isInfinite, (, imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,, imaginary, *]
[real, *, factor, ,, imaginary, *, factor, ), ;, }, public, Complex, multiply, (, double, factor, ), {, if, (]
[real, *, factor, ,, imaginary, *, factor, ), ;, }, public, Complex, multiply, (, double, factor, ), {, if, (]
[factor, ,, imaginary, *, factor, ), ;, }, public, Complex, multiply, (, double, factor, ), {, if, (, isNaN, ||]
[factor, ,, imaginary, *, factor, ), ;, }, public, Complex, multiply, (, double, factor, ), {, if, (, isNaN, ||]
[factor, ), ;, }, public, Complex, multiply, (, double, factor, ), {, if, (, isNaN, ||, Double, ., isNaN, (]
[Complex, multiply, (, double, factor, ), {, if, (, isNaN, ||, Double, ., isNaN, (, factor, ), ), {, return]
[), {, if, (, isNaN, ||, Double, ., isNaN, (, factor, ), ), {, return, NaN, ;, }, if, (]
[), {, if, (, isNaN, ||, Double, ., isNaN, (, factor, ), ), {, return, NaN, ;, }, if, (]
[), {, if, (, isNaN, ||, Double, ., isNaN, (, factor, ), ), {, return, NaN, ;, }, if, (]
[), {, if, (, isNaN, ||, Double, ., isNaN, (, factor, ), ), {, return, NaN, ;, }, if, (]
[isNaN, ||, Double, ., isNaN, (, factor, ), ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (]
[., isNaN, (, factor, ), ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||]
[., isNaN, (, factor, ), ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||]
[), ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (]
[return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||]
[return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||]
[if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (]
[(, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ), ), {, return]
[Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ), ), {, return, INF, ;, }, return]
[isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ), ), {, return, INF, ;, }, return, createComplex, (]
[isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ), ), {, return, INF, ;, }, return, createComplex, (]
[imaginary, ), ||, Double, ., isInfinite, (, factor, ), ), {, return, INF, ;, }, return, createComplex, (, real, *]
[||, Double, ., isInfinite, (, factor, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,]
[||, Double, ., isInfinite, (, factor, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,]
[., isInfinite, (, factor, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,, imaginary, *]
[createComplex, (, real, *, factor, ,, imaginary, *, factor, ), ;, }, public, Complex, negate, (, ), {, if, (]
[factor, ,, imaginary, *, factor, ), ;, }, public, Complex, negate, (, ), {, if, (, isNaN, ), {, return]
[factor, ), ;, }, public, Complex, negate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[;, }, public, Complex, negate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[}, public, Complex, negate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, -]
[Complex, negate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, -, real, ,]
[negate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, -, real, ,, -]
[createComplex, (, -, real, ,, -, imaginary, ), ;, }, public, Complex, subtract, (, Complex, subtrahend, ), throws, NullArgumentException, {]
[createComplex, (, -, real, ,, -, imaginary, ), ;, }, public, Complex, subtract, (, Complex, subtrahend, ), throws, NullArgumentException, {]
[,, -, imaginary, ), ;, }, public, Complex, subtract, (, Complex, subtrahend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[}, public, Complex, subtract, (, Complex, subtrahend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, subtrahend, ), ;, if, (]
[}, public, Complex, subtract, (, Complex, subtrahend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, subtrahend, ), ;, if, (]
[Complex, subtract, (, Complex, subtrahend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, subtrahend, ), ;, if, (, isNaN, ||]
[Complex, subtract, (, Complex, subtrahend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, subtrahend, ), ;, if, (, isNaN, ||]
[throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, subtrahend, ), ;, if, (, isNaN, ||, subtrahend, ., isNaN, ), {, return]
[., checkNotNull, (, subtrahend, ), ;, if, (, isNaN, ||, subtrahend, ., isNaN, ), {, return, NaN, ;, }, return]
[(, subtrahend, ), ;, if, (, isNaN, ||, subtrahend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[(, subtrahend, ), ;, if, (, isNaN, ||, subtrahend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[), ;, if, (, isNaN, ||, subtrahend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, -]
[), ;, if, (, isNaN, ||, subtrahend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, -]
[subtrahend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ., getReal, (, ), ,]
[subtrahend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ., getReal, (, ), ,]
[isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ., getReal, (, ), ,, imaginary, -]
[isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ., getReal, (, ), ,, imaginary, -]
[imaginary, -, subtrahend, ., getImaginary, (, ), ), ;, }, public, Complex, subtract, (, double, subtrahend, ), {, if, (]
[imaginary, -, subtrahend, ., getImaginary, (, ), ), ;, }, public, Complex, subtract, (, double, subtrahend, ), {, if, (]
[subtrahend, ., getImaginary, (, ), ), ;, }, public, Complex, subtract, (, double, subtrahend, ), {, if, (, isNaN, ||]
[subtrahend, ., getImaginary, (, ), ), ;, }, public, Complex, subtract, (, double, subtrahend, ), {, if, (, isNaN, ||]
[), ), ;, }, public, Complex, subtract, (, double, subtrahend, ), {, if, (, isNaN, ||, Double, ., isNaN, (]
[Complex, subtract, (, double, subtrahend, ), {, if, (, isNaN, ||, Double, ., isNaN, (, subtrahend, ), ), {, return]
[subtrahend, ), {, if, (, isNaN, ||, Double, ., isNaN, (, subtrahend, ), ), {, return, NaN, ;, }, return]
[{, if, (, isNaN, ||, Double, ., isNaN, (, subtrahend, ), ), {, return, NaN, ;, }, return, createComplex, (]
[{, if, (, isNaN, ||, Double, ., isNaN, (, subtrahend, ), ), {, return, NaN, ;, }, return, createComplex, (]
[(, isNaN, ||, Double, ., isNaN, (, subtrahend, ), ), {, return, NaN, ;, }, return, createComplex, (, real, -]
[||, Double, ., isNaN, (, subtrahend, ), ), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ,]
[}, return, createComplex, (, real, -, subtrahend, ,, imaginary, ), ;, }, public, Complex, acos, (, ), {, if, (]
[real, -, subtrahend, ,, imaginary, ), ;, }, public, Complex, acos, (, ), {, if, (, isNaN, ), {, return]
[imaginary, ), ;, }, public, Complex, acos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[imaginary, ), ;, }, public, Complex, acos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[imaginary, ), ;, }, public, Complex, acos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[imaginary, ), ;, }, public, Complex, acos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[public, Complex, acos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, this, ., add, (]
[public, Complex, acos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, this, ., add, (]
[public, Complex, acos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, this, ., add, (]
[isNaN, ), {, return, NaN, ;, }, return, this, ., add, (, this, ., sqrt1z, (, ), ., multiply, (]
[add, (, this, ., sqrt1z, (, ), ., multiply, (, I, ), ), ., log, (, ), ., multiply, (]
[add, (, this, ., sqrt1z, (, ), ., multiply, (, I, ), ), ., log, (, ), ., multiply, (]
[), ., multiply, (, I, ., negate, (, ), ), ;, }, public, Complex, asin, (, ), {, if, (]
[I, ., negate, (, ), ), ;, }, public, Complex, asin, (, ), {, if, (, isNaN, ), {, return]
[), ), ;, }, public, Complex, asin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[), ), ;, }, public, Complex, asin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[), ), ;, }, public, Complex, asin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[), ), ;, }, public, Complex, asin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[asin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, sqrt1z, (, ), ., add, (]
[asin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, sqrt1z, (, ), ., add, (]
[if, (, isNaN, ), {, return, NaN, ;, }, return, sqrt1z, (, ), ., add, (, this, ., multiply, (]
[sqrt1z, (, ), ., add, (, this, ., multiply, (, I, ), ), ., log, (, ), ., multiply, (]
[sqrt1z, (, ), ., add, (, this, ., multiply, (, I, ), ), ., log, (, ), ., multiply, (]
[), ., multiply, (, I, ., negate, (, ), ), ;, }, public, Complex, atan, (, ), {, if, (]
[I, ., negate, (, ), ), ;, }, public, Complex, atan, (, ), {, if, (, isNaN, ), {, return]
[), ), ;, }, public, Complex, atan, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[), ), ;, }, public, Complex, atan, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[), ), ;, }, public, Complex, atan, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[), ), ;, }, public, Complex, atan, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[), ), ;, }, public, Complex, atan, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[public, Complex, atan, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, this, ., add, (]
[{, if, (, isNaN, ), {, return, NaN, ;, }, return, this, ., add, (, I, ), ., divide, (]
[{, if, (, isNaN, ), {, return, NaN, ;, }, return, this, ., add, (, I, ), ., divide, (]
[), {, return, NaN, ;, }, return, this, ., add, (, I, ), ., divide, (, I, ., subtract, (]
[(, I, ), ., divide, (, I, ., subtract, (, this, ), ), ., log, (, ), ., multiply, (]
[(, I, ), ., divide, (, I, ., subtract, (, this, ), ), ., log, (, ), ., multiply, (]
[divide, (, I, ., subtract, (, this, ), ), ., log, (, ), ., multiply, (, I, ., divide, (]
[I, ., subtract, (, this, ), ), ., log, (, ), ., multiply, (, I, ., divide, (, createComplex, (]
[subtract, (, this, ), ), ., log, (, ), ., multiply, (, I, ., divide, (, createComplex, (, 2.0, ,]
[divide, (, createComplex, (, 2.0, ,, 0.0, ), ), ), ;, }, public, Complex, cos, (, ), {, if, (]
[2.0, ,, 0.0, ), ), ), ;, }, public, Complex, cos, (, ), {, if, (, isNaN, ), {, return]
[), ), ;, }, public, Complex, cos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[;, }, public, Complex, cos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[;, }, public, Complex, cos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[;, }, public, Complex, cos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[cos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., cos, (]
[{, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., cos, (, real, ), *]
[{, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., cos, (, real, ), *]
[), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., cos, (, real, ), *, FastMath, ., cosh, (]
[NaN, ;, }, return, createComplex, (, FastMath, ., cos, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,]
[NaN, ;, }, return, createComplex, (, FastMath, ., cos, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,]
[;, }, return, createComplex, (, FastMath, ., cos, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,, -]
[;, }, return, createComplex, (, FastMath, ., cos, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,, -]
[(, FastMath, ., cos, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,, -, FastMath, ., sin, (]
[cos, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,, -, FastMath, ., sin, (, real, ), *]
[cos, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,, -, FastMath, ., sin, (, real, ), *]
[*, FastMath, ., cosh, (, imaginary, ), ,, -, FastMath, ., sin, (, real, ), *, FastMath, ., sinh, (]
[real, ), *, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex, cosh, (, ), {, if, (]
[., sinh, (, imaginary, ), ), ;, }, public, Complex, cosh, (, ), {, if, (, isNaN, ), {, return]
[), ), ;, }, public, Complex, cosh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[;, }, public, Complex, cosh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[;, }, public, Complex, cosh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[;, }, public, Complex, cosh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[cosh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., cosh, (]
[{, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., cosh, (, real, ), *]
[{, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., cosh, (, real, ), *]
[), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., cosh, (, real, ), *, FastMath, ., cos, (]
[NaN, ;, }, return, createComplex, (, FastMath, ., cosh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,]
[NaN, ;, }, return, createComplex, (, FastMath, ., cosh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,]
[NaN, ;, }, return, createComplex, (, FastMath, ., cosh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,]
[createComplex, (, FastMath, ., cosh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., sinh, (]
[., cosh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., sinh, (, real, ), *]
[., cosh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., sinh, (, real, ), *]
[), *, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., sinh, (, real, ), *, FastMath, ., sin, (]
[real, ), *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, exp, (, ), {, if, (]
[., sin, (, imaginary, ), ), ;, }, public, Complex, exp, (, ), {, if, (, isNaN, ), {, return]
[;, }, public, Complex, exp, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, double, expReal, =]
[;, }, public, Complex, exp, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, double, expReal, =]
[exp, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, double, expReal, =, FastMath, ., exp, (]
[if, (, isNaN, ), {, return, NaN, ;, }, double, expReal, =, FastMath, ., exp, (, real, ), ;, return]
[isNaN, ), {, return, NaN, ;, }, double, expReal, =, FastMath, ., exp, (, real, ), ;, return, createComplex, (]
[isNaN, ), {, return, NaN, ;, }, double, expReal, =, FastMath, ., exp, (, real, ), ;, return, createComplex, (]
[{, return, NaN, ;, }, double, expReal, =, FastMath, ., exp, (, real, ), ;, return, createComplex, (, expReal, *]
[{, return, NaN, ;, }, double, expReal, =, FastMath, ., exp, (, real, ), ;, return, createComplex, (, expReal, *]
[}, double, expReal, =, FastMath, ., exp, (, real, ), ;, return, createComplex, (, expReal, *, FastMath, ., cos, (]
[=, FastMath, ., exp, (, real, ), ;, return, createComplex, (, expReal, *, FastMath, ., cos, (, imaginary, ), ,]
[=, FastMath, ., exp, (, real, ), ;, return, createComplex, (, expReal, *, FastMath, ., cos, (, imaginary, ), ,]
[., exp, (, real, ), ;, return, createComplex, (, expReal, *, FastMath, ., cos, (, imaginary, ), ,, expReal, *]
[., exp, (, real, ), ;, return, createComplex, (, expReal, *, FastMath, ., cos, (, imaginary, ), ,, expReal, *]
[), ;, return, createComplex, (, expReal, *, FastMath, ., cos, (, imaginary, ), ,, expReal, *, FastMath, ., sin, (]
[,, expReal, *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, log, (, ), {, if, (]
[., sin, (, imaginary, ), ), ;, }, public, Complex, log, (, ), {, if, (, isNaN, ), {, return]
[), ), ;, }, public, Complex, log, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[;, }, public, Complex, log, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[;, }, public, Complex, log, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[log, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., log, (]
[(, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., log, (, abs, (, ), ), ,]
[(, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., log, (, abs, (, ), ), ,]
[return, NaN, ;, }, return, createComplex, (, FastMath, ., log, (, abs, (, ), ), ,, FastMath, ., atan2, (]
[;, }, return, createComplex, (, FastMath, ., log, (, abs, (, ), ), ,, FastMath, ., atan2, (, imaginary, ,]
[., atan2, (, imaginary, ,, real, ), ), ;, }, public, Complex, pow, (, Complex, x, ), throws, NullArgumentException, {]
[., atan2, (, imaginary, ,, real, ), ), ;, }, public, Complex, pow, (, Complex, x, ), throws, NullArgumentException, {]
[,, real, ), ), ;, }, public, Complex, pow, (, Complex, x, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[;, }, public, Complex, pow, (, Complex, x, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, x, ), ;, return]
[;, }, public, Complex, pow, (, Complex, x, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, x, ), ;, return]
[;, }, public, Complex, pow, (, Complex, x, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, x, ), ;, return]
[;, }, public, Complex, pow, (, Complex, x, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, x, ), ;, return]
[), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, x, ), ;, return, this, ., log, (, ), ., multiply, (]
[., multiply, (, x, ), ., exp, (, ), ;, }, public, Complex, pow, (, double, x, ), {, return]
[., multiply, (, x, ), ., exp, (, ), ;, }, public, Complex, pow, (, double, x, ), {, return]
[., multiply, (, x, ), ., exp, (, ), ;, }, public, Complex, pow, (, double, x, ), {, return]
[., multiply, (, x, ), ., exp, (, ), ;, }, public, Complex, pow, (, double, x, ), {, return]
[), ;, }, public, Complex, pow, (, double, x, ), {, return, this, ., log, (, ), ., multiply, (]
[), ., multiply, (, x, ), ., exp, (, ), ;, }, public, Complex, sin, (, ), {, if, (]
[x, ), ., exp, (, ), ;, }, public, Complex, sin, (, ), {, if, (, isNaN, ), {, return]
[(, ), ;, }, public, Complex, sin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[;, }, public, Complex, sin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[;, }, public, Complex, sin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[;, }, public, Complex, sin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[sin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., sin, (]
[{, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., sin, (, real, ), *]
[{, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., sin, (, real, ), *]
[), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., sin, (, real, ), *, FastMath, ., cosh, (]
[NaN, ;, }, return, createComplex, (, FastMath, ., sin, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,]
[NaN, ;, }, return, createComplex, (, FastMath, ., sin, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,]
[NaN, ;, }, return, createComplex, (, FastMath, ., sin, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,]
[createComplex, (, FastMath, ., sin, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,, FastMath, ., cos, (]
[., sin, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,, FastMath, ., cos, (, real, ), *]
[., sin, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,, FastMath, ., cos, (, real, ), *]
[), *, FastMath, ., cosh, (, imaginary, ), ,, FastMath, ., cos, (, real, ), *, FastMath, ., sinh, (]
[real, ), *, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex, sinh, (, ), {, if, (]
[., sinh, (, imaginary, ), ), ;, }, public, Complex, sinh, (, ), {, if, (, isNaN, ), {, return]
[), ), ;, }, public, Complex, sinh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[;, }, public, Complex, sinh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[;, }, public, Complex, sinh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[;, }, public, Complex, sinh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[sinh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., sinh, (]
[{, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., sinh, (, real, ), *]
[{, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., sinh, (, real, ), *]
[), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., sinh, (, real, ), *, FastMath, ., cos, (]
[NaN, ;, }, return, createComplex, (, FastMath, ., sinh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,]
[NaN, ;, }, return, createComplex, (, FastMath, ., sinh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,]
[NaN, ;, }, return, createComplex, (, FastMath, ., sinh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,]
[createComplex, (, FastMath, ., sinh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., cosh, (]
[., sinh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., cosh, (, real, ), *]
[., sinh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., cosh, (, real, ), *]
[), *, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., cosh, (, real, ), *, FastMath, ., sin, (]
[real, ), *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, sqrt, (, ), {, if, (]
[., sin, (, imaginary, ), ), ;, }, public, Complex, sqrt, (, ), {, if, (, isNaN, ), {, return]
[), ;, }, public, Complex, sqrt, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (]
[), ;, }, public, Complex, sqrt, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (]
[), ;, }, public, Complex, sqrt, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (]
[}, public, Complex, sqrt, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (, real, ==]
[Complex, sqrt, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (, real, ==, 0.0, &&]
[Complex, sqrt, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (, real, ==, 0.0, &&]
[(, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (, real, ==, 0.0, &&, imaginary, ==]
[(, isNaN, ), {, return, NaN, ;, }, if, (, real, ==, 0.0, &&, imaginary, ==, 0.0, ), {, return]
[), {, return, NaN, ;, }, if, (, real, ==, 0.0, &&, imaginary, ==, 0.0, ), {, return, createComplex, (]
[return, NaN, ;, }, if, (, real, ==, 0.0, &&, imaginary, ==, 0.0, ), {, return, createComplex, (, 0.0, ,]
[==, 0.0, &&, imaginary, ==, 0.0, ), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =]
[==, 0.0, &&, imaginary, ==, 0.0, ), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =]
[==, 0.0, ), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =, FastMath, ., sqrt, (]
[==, 0.0, ), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =, FastMath, ., sqrt, (]
[0.0, ), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =, FastMath, ., sqrt, (, (]
[0.0, ), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =, FastMath, ., sqrt, (, (]
[0.0, ), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =, FastMath, ., sqrt, (, (]
[createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =, FastMath, ., sqrt, (, (, FastMath, ., abs, (]
[,, 0.0, ), ;, }, double, t, =, FastMath, ., sqrt, (, (, FastMath, ., abs, (, real, ), +]
[double, t, =, FastMath, ., sqrt, (, (, FastMath, ., abs, (, real, ), +, abs, (, ), ), /]
[sqrt, (, (, FastMath, ., abs, (, real, ), +, abs, (, ), ), /, 2.0, ), ;, if, (]
[sqrt, (, (, FastMath, ., abs, (, real, ), +, abs, (, ), ), /, 2.0, ), ;, if, (]
[(, FastMath, ., abs, (, real, ), +, abs, (, ), ), /, 2.0, ), ;, if, (, real, >=]
[(, real, ), +, abs, (, ), ), /, 2.0, ), ;, if, (, real, >=, 0.0, ), {, return]
[), +, abs, (, ), ), /, 2.0, ), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (]
[abs, (, ), ), /, 2.0, ), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (, t, ,]
[abs, (, ), ), /, 2.0, ), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (, t, ,]
[), ), /, 2.0, ), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (, t, ,, imaginary, /]
[), /, 2.0, ), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (, t, ,, imaginary, /, (]
[), /, 2.0, ), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (, t, ,, imaginary, /, (]
[2.0, ), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (, t, ,, imaginary, /, (, 2.0, *]
[), {, return, createComplex, (, t, ,, imaginary, /, (, 2.0, *, t, ), ), ;, }, else, {, return]
[return, createComplex, (, t, ,, imaginary, /, (, 2.0, *, t, ), ), ;, }, else, {, return, createComplex, (]
[return, createComplex, (, t, ,, imaginary, /, (, 2.0, *, t, ), ), ;, }, else, {, return, createComplex, (]
[return, createComplex, (, t, ,, imaginary, /, (, 2.0, *, t, ), ), ;, }, else, {, return, createComplex, (]
[,, imaginary, /, (, 2.0, *, t, ), ), ;, }, else, {, return, createComplex, (, FastMath, ., abs, (]
[(, 2.0, *, t, ), ), ;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, ), /]
[2.0, *, t, ), ), ;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, ), /, (]
[2.0, *, t, ), ), ;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, ), /, (]
[t, ), ), ;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, ), /, (, 2.0, *]
[;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, ), /, (, 2.0, *, t, ), ,]
[;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, ), /, (, 2.0, *, t, ), ,]
[;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, ), /, (, 2.0, *, t, ), ,]
[return, createComplex, (, FastMath, ., abs, (, imaginary, ), /, (, 2.0, *, t, ), ,, FastMath, ., copySign, (]
[(, FastMath, ., abs, (, imaginary, ), /, (, 2.0, *, t, ), ,, FastMath, ., copySign, (, 1d, ,]
[abs, (, imaginary, ), /, (, 2.0, *, t, ), ,, FastMath, ., copySign, (, 1d, ,, imaginary, ), *]
[., copySign, (, 1d, ,, imaginary, ), *, t, ), ;, }, }, public, Complex, sqrt1z, (, ), {, return]
[., copySign, (, 1d, ,, imaginary, ), *, t, ), ;, }, }, public, Complex, sqrt1z, (, ), {, return]
[., copySign, (, 1d, ,, imaginary, ), *, t, ), ;, }, }, public, Complex, sqrt1z, (, ), {, return]
[(, 1d, ,, imaginary, ), *, t, ), ;, }, }, public, Complex, sqrt1z, (, ), {, return, createComplex, (]
[,, imaginary, ), *, t, ), ;, }, }, public, Complex, sqrt1z, (, ), {, return, createComplex, (, 1.0, ,]
[), ;, }, }, public, Complex, sqrt1z, (, ), {, return, createComplex, (, 1.0, ,, 0.0, ), ., subtract, (]
[), ;, }, }, public, Complex, sqrt1z, (, ), {, return, createComplex, (, 1.0, ,, 0.0, ), ., subtract, (]
[public, Complex, sqrt1z, (, ), {, return, createComplex, (, 1.0, ,, 0.0, ), ., subtract, (, this, ., multiply, (]
[., multiply, (, this, ), ), ., sqrt, (, ), ;, }, public, Complex, tan, (, ), {, if, (]
[., multiply, (, this, ), ), ., sqrt, (, ), ;, }, public, Complex, tan, (, ), {, if, (]
[(, this, ), ), ., sqrt, (, ), ;, }, public, Complex, tan, (, ), {, if, (, isNaN, ||]
[(, this, ), ), ., sqrt, (, ), ;, }, public, Complex, tan, (, ), {, if, (, isNaN, ||]
[., sqrt, (, ), ;, }, public, Complex, tan, (, ), {, if, (, isNaN, ||, Double, ., isInfinite, (]
[}, public, Complex, tan, (, ), {, if, (, isNaN, ||, Double, ., isInfinite, (, real, ), ), {, return]
[), {, if, (, isNaN, ||, Double, ., isInfinite, (, real, ), ), {, return, NaN, ;, }, if, (]
[), {, if, (, isNaN, ||, Double, ., isInfinite, (, real, ), ), {, return, NaN, ;, }, if, (]
[if, (, isNaN, ||, Double, ., isInfinite, (, real, ), ), {, return, NaN, ;, }, if, (, imaginary, >]
[Double, ., isInfinite, (, real, ), ), {, return, NaN, ;, }, if, (, imaginary, >, 20.0, ), {, return]
[isInfinite, (, real, ), ), {, return, NaN, ;, }, if, (, imaginary, >, 20.0, ), {, return, createComplex, (]
[real, ), ), {, return, NaN, ;, }, if, (, imaginary, >, 20.0, ), {, return, createComplex, (, 0.0, ,]
[;, }, if, (, imaginary, >, 20.0, ), {, return, createComplex, (, 0.0, ,, 1.0, ), ;, }, if, (]
[;, }, if, (, imaginary, >, 20.0, ), {, return, createComplex, (, 0.0, ,, 1.0, ), ;, }, if, (]
[if, (, imaginary, >, 20.0, ), {, return, createComplex, (, 0.0, ,, 1.0, ), ;, }, if, (, imaginary, <]
[(, imaginary, >, 20.0, ), {, return, createComplex, (, 0.0, ,, 1.0, ), ;, }, if, (, imaginary, <, -]
[), {, return, createComplex, (, 0.0, ,, 1.0, ), ;, }, if, (, imaginary, <, -, 20.0, ), {, return]
[return, createComplex, (, 0.0, ,, 1.0, ), ;, }, if, (, imaginary, <, -, 20.0, ), {, return, createComplex, (]
[(, 0.0, ,, 1.0, ), ;, }, if, (, imaginary, <, -, 20.0, ), {, return, createComplex, (, 0.0, ,]
[0.0, ,, 1.0, ), ;, }, if, (, imaginary, <, -, 20.0, ), {, return, createComplex, (, 0.0, ,, -]
[(, imaginary, <, -, 20.0, ), {, return, createComplex, (, 0.0, ,, -, 1.0, ), ;, }, double, real2, =]
[(, imaginary, <, -, 20.0, ), {, return, createComplex, (, 0.0, ,, -, 1.0, ), ;, }, double, real2, =]
[<, -, 20.0, ), {, return, createComplex, (, 0.0, ,, -, 1.0, ), ;, }, double, real2, =, 2.0, *]
[return, createComplex, (, 0.0, ,, -, 1.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =]
[return, createComplex, (, 0.0, ,, -, 1.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =]
[(, 0.0, ,, -, 1.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *]
[), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =]
[), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =]
[), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =]
[real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cos, (]
[*, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cos, (, real2, ), +]
[*, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cos, (, real2, ), +]
[imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cos, (, real2, ), +, FastMath, ., cosh, (]
[imaginary, ;, double, d, =, FastMath, ., cos, (, real2, ), +, FastMath, ., cosh, (, imaginary2, ), ;, return]
[double, d, =, FastMath, ., cos, (, real2, ), +, FastMath, ., cosh, (, imaginary2, ), ;, return, createComplex, (]
[double, d, =, FastMath, ., cos, (, real2, ), +, FastMath, ., cosh, (, imaginary2, ), ;, return, createComplex, (]
[double, d, =, FastMath, ., cos, (, real2, ), +, FastMath, ., cosh, (, imaginary2, ), ;, return, createComplex, (]
[., cos, (, real2, ), +, FastMath, ., cosh, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sin, (]
[real2, ), +, FastMath, ., cosh, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sin, (, real2, ), /]
[+, FastMath, ., cosh, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sin, (, real2, ), /, d, ,]
[+, FastMath, ., cosh, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sin, (, real2, ), /, d, ,]
[+, FastMath, ., cosh, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sin, (, real2, ), /, d, ,]
[(, imaginary2, ), ;, return, createComplex, (, FastMath, ., sin, (, real2, ), /, d, ,, FastMath, ., sinh, (]
[;, return, createComplex, (, FastMath, ., sin, (, real2, ), /, d, ,, FastMath, ., sinh, (, imaginary2, ), /]
[,, FastMath, ., sinh, (, imaginary2, ), /, d, ), ;, }, public, Complex, tanh, (, ), {, if, (]
[,, FastMath, ., sinh, (, imaginary2, ), /, d, ), ;, }, public, Complex, tanh, (, ), {, if, (]
[., sinh, (, imaginary2, ), /, d, ), ;, }, public, Complex, tanh, (, ), {, if, (, isNaN, ||]
[., sinh, (, imaginary2, ), /, d, ), ;, }, public, Complex, tanh, (, ), {, if, (, isNaN, ||]
[), /, d, ), ;, }, public, Complex, tanh, (, ), {, if, (, isNaN, ||, Double, ., isInfinite, (]
[}, public, Complex, tanh, (, ), {, if, (, isNaN, ||, Double, ., isInfinite, (, imaginary, ), ), {, return]
[), {, if, (, isNaN, ||, Double, ., isInfinite, (, imaginary, ), ), {, return, NaN, ;, }, if, (]
[), {, if, (, isNaN, ||, Double, ., isInfinite, (, imaginary, ), ), {, return, NaN, ;, }, if, (]
[if, (, isNaN, ||, Double, ., isInfinite, (, imaginary, ), ), {, return, NaN, ;, }, if, (, real, >]
[Double, ., isInfinite, (, imaginary, ), ), {, return, NaN, ;, }, if, (, real, >, 20.0, ), {, return]
[isInfinite, (, imaginary, ), ), {, return, NaN, ;, }, if, (, real, >, 20.0, ), {, return, createComplex, (]
[imaginary, ), ), {, return, NaN, ;, }, if, (, real, >, 20.0, ), {, return, createComplex, (, 1.0, ,]
[;, }, if, (, real, >, 20.0, ), {, return, createComplex, (, 1.0, ,, 0.0, ), ;, }, if, (]
[;, }, if, (, real, >, 20.0, ), {, return, createComplex, (, 1.0, ,, 0.0, ), ;, }, if, (]
[if, (, real, >, 20.0, ), {, return, createComplex, (, 1.0, ,, 0.0, ), ;, }, if, (, real, <]
[(, real, >, 20.0, ), {, return, createComplex, (, 1.0, ,, 0.0, ), ;, }, if, (, real, <, -]
[), {, return, createComplex, (, 1.0, ,, 0.0, ), ;, }, if, (, real, <, -, 20.0, ), {, return]
[return, createComplex, (, 1.0, ,, 0.0, ), ;, }, if, (, real, <, -, 20.0, ), {, return, createComplex, (]
[createComplex, (, 1.0, ,, 0.0, ), ;, }, if, (, real, <, -, 20.0, ), {, return, createComplex, (, -]
[1.0, ,, 0.0, ), ;, }, if, (, real, <, -, 20.0, ), {, return, createComplex, (, -, 1.0, ,]
[(, real, <, -, 20.0, ), {, return, createComplex, (, -, 1.0, ,, 0.0, ), ;, }, double, real2, =]
[(, real, <, -, 20.0, ), {, return, createComplex, (, -, 1.0, ,, 0.0, ), ;, }, double, real2, =]
[<, -, 20.0, ), {, return, createComplex, (, -, 1.0, ,, 0.0, ), ;, }, double, real2, =, 2.0, *]
[return, createComplex, (, -, 1.0, ,, 0.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =]
[return, createComplex, (, -, 1.0, ,, 0.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =]
[(, -, 1.0, ,, 0.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *]
[), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =]
[), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =]
[), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =]
[real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cosh, (]
[*, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cosh, (, real2, ), +]
[*, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cosh, (, real2, ), +]
[imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cosh, (, real2, ), +, FastMath, ., cos, (]
[imaginary, ;, double, d, =, FastMath, ., cosh, (, real2, ), +, FastMath, ., cos, (, imaginary2, ), ;, return]
[double, d, =, FastMath, ., cosh, (, real2, ), +, FastMath, ., cos, (, imaginary2, ), ;, return, createComplex, (]
[double, d, =, FastMath, ., cosh, (, real2, ), +, FastMath, ., cos, (, imaginary2, ), ;, return, createComplex, (]
[double, d, =, FastMath, ., cosh, (, real2, ), +, FastMath, ., cos, (, imaginary2, ), ;, return, createComplex, (]
[., cosh, (, real2, ), +, FastMath, ., cos, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sinh, (]
[real2, ), +, FastMath, ., cos, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sinh, (, real2, ), /]
[+, FastMath, ., cos, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sinh, (, real2, ), /, d, ,]
[+, FastMath, ., cos, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sinh, (, real2, ), /, d, ,]
[+, FastMath, ., cos, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sinh, (, real2, ), /, d, ,]
[(, imaginary2, ), ;, return, createComplex, (, FastMath, ., sinh, (, real2, ), /, d, ,, FastMath, ., sin, (]
[;, return, createComplex, (, FastMath, ., sinh, (, real2, ), /, d, ,, FastMath, ., sin, (, imaginary2, ), /]
[d, ,, FastMath, ., sin, (, imaginary2, ), /, d, ), ;, }, public, double, getArgument, (, ), {, return]
[d, ,, FastMath, ., sin, (, imaginary2, ), /, d, ), ;, }, public, double, getArgument, (, ), {, return]
[sin, (, imaginary2, ), /, d, ), ;, }, public, double, getArgument, (, ), {, return, FastMath, ., atan2, (]
[/, d, ), ;, }, public, double, getArgument, (, ), {, return, FastMath, ., atan2, (, getImaginary, (, ), ,]
[(, ), ), ;, }, public, List, <, Complex, >, nthRoot, (, int, n, ), throws, NotPositiveException, {, if, (]
[(, ), ), ;, }, public, List, <, Complex, >, nthRoot, (, int, n, ), throws, NotPositiveException, {, if, (]
[), ;, }, public, List, <, Complex, >, nthRoot, (, int, n, ), throws, NotPositiveException, {, if, (, n, <=]
[List, <, Complex, >, nthRoot, (, int, n, ), throws, NotPositiveException, {, if, (, n, <=, 0, ), {, throw]
[>, nthRoot, (, int, n, ), throws, NotPositiveException, {, if, (, n, <=, 0, ), {, throw, new, NotPositiveException, (]
[>, nthRoot, (, int, n, ), throws, NotPositiveException, {, if, (, n, <=, 0, ), {, throw, new, NotPositiveException, (]
[n, ), throws, NotPositiveException, {, if, (, n, <=, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, ,]
[{, throw, new, NotPositiveException, (, LocalizedFormats, ., CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, ,, n, ), ;, }, final, List, <, Complex, >, result, =]
[), ;, }, final, List, <, Complex, >, result, =, new, ArrayList, <, Complex, >, (, ), ;, if, (]
[final, List, <, Complex, >, result, =, new, ArrayList, <, Complex, >, (, ), ;, if, (, isNaN, ), {]
[final, List, <, Complex, >, result, =, new, ArrayList, <, Complex, >, (, ), ;, if, (, isNaN, ), {]
[>, result, =, new, ArrayList, <, Complex, >, (, ), ;, if, (, isNaN, ), {, result, ., add, (]
[ArrayList, <, Complex, >, (, ), ;, if, (, isNaN, ), {, result, ., add, (, NaN, ), ;, return]
[), ;, if, (, isNaN, ), {, result, ., add, (, NaN, ), ;, return, result, ;, }, if, (]
[), {, result, ., add, (, NaN, ), ;, return, result, ;, }, if, (, isInfinite, (, ), ), {]
[), {, result, ., add, (, NaN, ), ;, return, result, ;, }, if, (, isInfinite, (, ), ), {]
[add, (, NaN, ), ;, return, result, ;, }, if, (, isInfinite, (, ), ), {, result, ., add, (]
[;, return, result, ;, }, if, (, isInfinite, (, ), ), {, result, ., add, (, INF, ), ;, return]
[isInfinite, (, ), ), {, result, ., add, (, INF, ), ;, return, result, ;, }, final, double, nthRootOfAbs, =]
[isInfinite, (, ), ), {, result, ., add, (, INF, ), ;, return, result, ;, }, final, double, nthRootOfAbs, =]
[{, result, ., add, (, INF, ), ;, return, result, ;, }, final, double, nthRootOfAbs, =, FastMath, ., pow, (]
[(, INF, ), ;, return, result, ;, }, final, double, nthRootOfAbs, =, FastMath, ., pow, (, abs, (, ), ,]
[(, INF, ), ;, return, result, ;, }, final, double, nthRootOfAbs, =, FastMath, ., pow, (, abs, (, ), ,]
[), ;, return, result, ;, }, final, double, nthRootOfAbs, =, FastMath, ., pow, (, abs, (, ), ,, 1.0, /]
[double, nthRootOfAbs, =, FastMath, ., pow, (, abs, (, ), ,, 1.0, /, n, ), ;, final, double, nthPhi, =]
[double, nthRootOfAbs, =, FastMath, ., pow, (, abs, (, ), ,, 1.0, /, n, ), ;, final, double, nthPhi, =]
[., pow, (, abs, (, ), ,, 1.0, /, n, ), ;, final, double, nthPhi, =, getArgument, (, ), /]
[,, 1.0, /, n, ), ;, final, double, nthPhi, =, getArgument, (, ), /, n, ;, final, double, slice, =]
[,, 1.0, /, n, ), ;, final, double, nthPhi, =, getArgument, (, ), /, n, ;, final, double, slice, =]
[,, 1.0, /, n, ), ;, final, double, nthPhi, =, getArgument, (, ), /, n, ;, final, double, slice, =]
[/, n, ), ;, final, double, nthPhi, =, getArgument, (, ), /, n, ;, final, double, slice, =, 2, *]
[/, n, ), ;, final, double, nthPhi, =, getArgument, (, ), /, n, ;, final, double, slice, =, 2, *]
[final, double, nthPhi, =, getArgument, (, ), /, n, ;, final, double, slice, =, 2, *, FastMath, ., PI, /]
[(, ), /, n, ;, final, double, slice, =, 2, *, FastMath, ., PI, /, n, ;, double, innerPart, =]
[slice, =, 2, *, FastMath, ., PI, /, n, ;, double, innerPart, =, nthPhi, ;, for, (, int, k, =]
[2, *, FastMath, ., PI, /, n, ;, double, innerPart, =, nthPhi, ;, for, (, int, k, =, 0, ;]
[2, *, FastMath, ., PI, /, n, ;, double, innerPart, =, nthPhi, ;, for, (, int, k, =, 0, ;]
[FastMath, ., PI, /, n, ;, double, innerPart, =, nthPhi, ;, for, (, int, k, =, 0, ;, k, <]
[PI, /, n, ;, double, innerPart, =, nthPhi, ;, for, (, int, k, =, 0, ;, k, <, n, ;]
[PI, /, n, ;, double, innerPart, =, nthPhi, ;, for, (, int, k, =, 0, ;, k, <, n, ;]
[;, for, (, int, k, =, 0, ;, k, <, n, ;, k, ++, ), {, final, double, realPart, =]
[;, for, (, int, k, =, 0, ;, k, <, n, ;, k, ++, ), {, final, double, realPart, =]
[(, int, k, =, 0, ;, k, <, n, ;, k, ++, ), {, final, double, realPart, =, nthRootOfAbs, *]
[(, int, k, =, 0, ;, k, <, n, ;, k, ++, ), {, final, double, realPart, =, nthRootOfAbs, *]
[0, ;, k, <, n, ;, k, ++, ), {, final, double, realPart, =, nthRootOfAbs, *, FastMath, ., cos, (]
[++, ), {, final, double, realPart, =, nthRootOfAbs, *, FastMath, ., cos, (, innerPart, ), ;, final, double, imaginaryPart, =]
[++, ), {, final, double, realPart, =, nthRootOfAbs, *, FastMath, ., cos, (, innerPart, ), ;, final, double, imaginaryPart, =]
[{, final, double, realPart, =, nthRootOfAbs, *, FastMath, ., cos, (, innerPart, ), ;, final, double, imaginaryPart, =, nthRootOfAbs, *]
[{, final, double, realPart, =, nthRootOfAbs, *, FastMath, ., cos, (, innerPart, ), ;, final, double, imaginaryPart, =, nthRootOfAbs, *]
[=, nthRootOfAbs, *, FastMath, ., cos, (, innerPart, ), ;, final, double, imaginaryPart, =, nthRootOfAbs, *, FastMath, ., sin, (]
[FastMath, ., cos, (, innerPart, ), ;, final, double, imaginaryPart, =, nthRootOfAbs, *, FastMath, ., sin, (, innerPart, ), ;]
[FastMath, ., cos, (, innerPart, ), ;, final, double, imaginaryPart, =, nthRootOfAbs, *, FastMath, ., sin, (, innerPart, ), ;]
[innerPart, ), ;, final, double, imaginaryPart, =, nthRootOfAbs, *, FastMath, ., sin, (, innerPart, ), ;, result, ., add, (]
[;, final, double, imaginaryPart, =, nthRootOfAbs, *, FastMath, ., sin, (, innerPart, ), ;, result, ., add, (, createComplex, (]
[double, imaginaryPart, =, nthRootOfAbs, *, FastMath, ., sin, (, innerPart, ), ;, result, ., add, (, createComplex, (, realPart, ,]
[*, FastMath, ., sin, (, innerPart, ), ;, result, ., add, (, createComplex, (, realPart, ,, imaginaryPart, ), ), ;]
[., sin, (, innerPart, ), ;, result, ., add, (, createComplex, (, realPart, ,, imaginaryPart, ), ), ;, innerPart, +=]
[), ;, result, ., add, (, createComplex, (, realPart, ,, imaginaryPart, ), ), ;, innerPart, +=, slice, ;, }, return]
[+=, slice, ;, }, return, result, ;, }, protected, Complex, createComplex, (, double, realPart, ,, double, imaginaryPart, ), {, return]
[}, return, result, ;, }, protected, Complex, createComplex, (, double, realPart, ,, double, imaginaryPart, ), {, return, new, Complex, (]
[result, ;, }, protected, Complex, createComplex, (, double, realPart, ,, double, imaginaryPart, ), {, return, new, Complex, (, realPart, ,]
[realPart, ,, imaginaryPart, ), ;, }, public, static, Complex, valueOf, (, double, realPart, ,, double, imaginaryPart, ), {, if, (]
[realPart, ,, imaginaryPart, ), ;, }, public, static, Complex, valueOf, (, double, realPart, ,, double, imaginaryPart, ), {, if, (]
[realPart, ,, imaginaryPart, ), ;, }, public, static, Complex, valueOf, (, double, realPart, ,, double, imaginaryPart, ), {, if, (]
[;, }, public, static, Complex, valueOf, (, double, realPart, ,, double, imaginaryPart, ), {, if, (, Double, ., isNaN, (]
[static, Complex, valueOf, (, double, realPart, ,, double, imaginaryPart, ), {, if, (, Double, ., isNaN, (, realPart, ), ||]
[static, Complex, valueOf, (, double, realPart, ,, double, imaginaryPart, ), {, if, (, Double, ., isNaN, (, realPart, ), ||]
[double, realPart, ,, double, imaginaryPart, ), {, if, (, Double, ., isNaN, (, realPart, ), ||, Double, ., isNaN, (]
[), {, if, (, Double, ., isNaN, (, realPart, ), ||, Double, ., isNaN, (, imaginaryPart, ), ), {, return]
[Double, ., isNaN, (, realPart, ), ||, Double, ., isNaN, (, imaginaryPart, ), ), {, return, NaN, ;, }, return]
[(, realPart, ), ||, Double, ., isNaN, (, imaginaryPart, ), ), {, return, NaN, ;, }, return, new, Complex, (]
[), ||, Double, ., isNaN, (, imaginaryPart, ), ), {, return, NaN, ;, }, return, new, Complex, (, realPart, ,]
[new, Complex, (, realPart, ,, imaginaryPart, ), ;, }, public, static, Complex, valueOf, (, double, realPart, ), {, if, (]
[new, Complex, (, realPart, ,, imaginaryPart, ), ;, }, public, static, Complex, valueOf, (, double, realPart, ), {, if, (]
[,, imaginaryPart, ), ;, }, public, static, Complex, valueOf, (, double, realPart, ), {, if, (, Double, ., isNaN, (]
[public, static, Complex, valueOf, (, double, realPart, ), {, if, (, Double, ., isNaN, (, realPart, ), ), {, return]
[(, double, realPart, ), {, if, (, Double, ., isNaN, (, realPart, ), ), {, return, NaN, ;, }, return]
[), {, if, (, Double, ., isNaN, (, realPart, ), ), {, return, NaN, ;, }, return, new, Complex, (]
[return, NaN, ;, }, return, new, Complex, (, realPart, ), ;, }, protected, final, Object, readResolve, (, ), {, return]
[;, }, return, new, Complex, (, realPart, ), ;, }, protected, final, Object, readResolve, (, ), {, return, createComplex, (]
[return, new, Complex, (, realPart, ), ;, }, protected, final, Object, readResolve, (, ), {, return, createComplex, (, real, ,]
[readResolve, (, ), {, return, createComplex, (, real, ,, imaginary, ), ;, }, public, ComplexField, getField, (, ), {, return]
[readResolve, (, ), {, return, createComplex, (, real, ,, imaginary, ), ;, }, public, ComplexField, getField, (, ), {, return]
[(, ), {, return, ComplexField, ., getInstance, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, ComplexField, ., getInstance, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, ComplexField, ., getInstance, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, ComplexField, ., getInstance, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, ComplexField, ., getInstance, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[{, return, ComplexField, ., getInstance, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, "(", +]
[ComplexField, ., getInstance, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, "(", +, real, +]
[getInstance, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, "(", +, real, +, ", ", +]
[), ;, }, @, Override, public, String, toString, (, ), {, return, "(", +, real, +, ", ", +, imaginary, +]
