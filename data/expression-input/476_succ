[;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, Node, >, dominantReplacements, ;, private, GlobalNamespace, namespace, =]
[., newHashSet, (, "COMPILED", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, Node, >, dominantReplacements]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String, ,, Node, >, dominantReplacements, ;, private, GlobalNamespace, namespace]
[;, static, final, DiagnosticType, UNKNOWN_DEFINE_WARNING, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_DEFINE_WARNING", ,, "unknown @define variable {0}", ), ;, static, final, DiagnosticType, INVALID_DEFINE_TYPE_ERROR, =]
[;, static, final, DiagnosticType, INVALID_DEFINE_TYPE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_TYPE_ERROR", ,, "@define tag only permits literal types", ), ;, static, final, DiagnosticType, INVALID_DEFINE_INIT_ERROR, =]
[., warning, (, "JSC_UNKNOWN_DEFINE_WARNING", ,, "unknown @define variable {0}", ), ;, static, final, DiagnosticType, INVALID_DEFINE_TYPE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_TYPE_ERROR", ,, "@define tag only permits literal types"]
[,, "unknown @define variable {0}", ), ;, static, final, DiagnosticType, INVALID_DEFINE_TYPE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_TYPE_ERROR", ,, "@define tag only permits literal types", ), ;, static, final]
[), ;, static, final, DiagnosticType, INVALID_DEFINE_TYPE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_TYPE_ERROR", ,, "@define tag only permits literal types", ), ;, static, final, DiagnosticType, INVALID_DEFINE_INIT_ERROR]
[;, static, final, DiagnosticType, INVALID_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_INIT_ERROR", ,, "illegal initialization of @define variable {0}", ), ;, static, final, DiagnosticType, NON_GLOBAL_DEFINE_INIT_ERROR, =]
[., error, (, "JSC_INVALID_DEFINE_TYPE_ERROR", ,, "@define tag only permits literal types", ), ;, static, final, DiagnosticType, INVALID_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_INIT_ERROR", ,, "illegal initialization of @define variable {0}"]
[,, "@define tag only permits literal types", ), ;, static, final, DiagnosticType, INVALID_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_INIT_ERROR", ,, "illegal initialization of @define variable {0}", ), ;, static, final]
[), ;, static, final, DiagnosticType, INVALID_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_INIT_ERROR", ,, "illegal initialization of @define variable {0}", ), ;, static, final, DiagnosticType, NON_GLOBAL_DEFINE_INIT_ERROR]
[;, static, final, DiagnosticType, NON_GLOBAL_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_DEFINE_INIT_ERROR", ,, "@define variable {0} assignment must be global", ), ;, static, final, DiagnosticType, DEFINE_NOT_ASSIGNABLE_ERROR, =]
[., error, (, "JSC_INVALID_DEFINE_INIT_ERROR", ,, "illegal initialization of @define variable {0}", ), ;, static, final, DiagnosticType, NON_GLOBAL_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_DEFINE_INIT_ERROR", ,, "@define variable {0} assignment must be global"]
[,, "illegal initialization of @define variable {0}", ), ;, static, final, DiagnosticType, NON_GLOBAL_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_DEFINE_INIT_ERROR", ,, "@define variable {0} assignment must be global", ), ;, static, final]
[), ;, static, final, DiagnosticType, NON_GLOBAL_DEFINE_INIT_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_GLOBAL_DEFINE_INIT_ERROR", ,, "@define variable {0} assignment must be global", ), ;, static, final, DiagnosticType, DEFINE_NOT_ASSIGNABLE_ERROR]
[;, static, final, DiagnosticType, DEFINE_NOT_ASSIGNABLE_ERROR, =, DiagnosticType, ., error, (, "JSC_DEFINE_NOT_ASSIGNABLE_ERROR", ,, "@define variable {0} cannot be reassigned due to code at {1}.", ), ;, private, static, final, MessageFormat, REASON_DEFINE_NOT_ASSIGNABLE]
[., error, (, "JSC_NON_GLOBAL_DEFINE_INIT_ERROR", ,, "@define variable {0} assignment must be global", ), ;, static, final, DiagnosticType, DEFINE_NOT_ASSIGNABLE_ERROR, =, DiagnosticType, ., error, (, "JSC_DEFINE_NOT_ASSIGNABLE_ERROR", ,, "@define variable {0} cannot be reassigned due to code at {1}."]
[,, "@define variable {0} assignment must be global", ), ;, static, final, DiagnosticType, DEFINE_NOT_ASSIGNABLE_ERROR, =, DiagnosticType, ., error, (, "JSC_DEFINE_NOT_ASSIGNABLE_ERROR", ,, "@define variable {0} cannot be reassigned due to code at {1}.", ), ;, private, static]
[), ;, static, final, DiagnosticType, DEFINE_NOT_ASSIGNABLE_ERROR, =, DiagnosticType, ., error, (, "JSC_DEFINE_NOT_ASSIGNABLE_ERROR", ,, "@define variable {0} cannot be reassigned due to code at {1}.", ), ;, private, static, final, MessageFormat]
[;, private, static, final, MessageFormat, REASON_DEFINE_NOT_ASSIGNABLE, =, new, MessageFormat, (, "line {0} of {1}", ), ;, ProcessDefines, (, AbstractCompiler, compiler, ,, Map, <]
[., error, (, "JSC_DEFINE_NOT_ASSIGNABLE_ERROR", ,, "@define variable {0} cannot be reassigned due to code at {1}.", ), ;, private, static, final, MessageFormat, REASON_DEFINE_NOT_ASSIGNABLE, =, new, MessageFormat, (, "line {0} of {1}", ), ;]
[,, "@define variable {0} cannot be reassigned due to code at {1}.", ), ;, private, static, final, MessageFormat, REASON_DEFINE_NOT_ASSIGNABLE, =, new, MessageFormat, (, "line {0} of {1}", ), ;, ProcessDefines, (, AbstractCompiler, compiler]
[), ;, private, static, final, MessageFormat, REASON_DEFINE_NOT_ASSIGNABLE, =, new, MessageFormat, (, "line {0} of {1}", ), ;, ProcessDefines, (, AbstractCompiler, compiler, ,, Map]
[;, ProcessDefines, (, AbstractCompiler, compiler, ,, Map, <, String, ,, Node, >, replacements, ), {, this, ., compiler, =, compiler]
[), ;, ProcessDefines, (, AbstractCompiler, compiler, ,, Map, <, String, ,, Node, >, replacements, ), {, this, ., compiler, =]
[=, compiler, ;, dominantReplacements, =, replacements, ;, }, ProcessDefines, injectNamespace, (, GlobalNamespace, namespace, ), {, this, ., namespace, =, namespace]
[., compiler, =, compiler, ;, dominantReplacements, =, replacements, ;, }, ProcessDefines, injectNamespace, (, GlobalNamespace, namespace, ), {, this, ., namespace]
[;, dominantReplacements, =, replacements, ;, }, ProcessDefines, injectNamespace, (, GlobalNamespace, namespace, ), {, this, ., namespace, =, namespace, ;, return]
[=, replacements, ;, }, ProcessDefines, injectNamespace, (, GlobalNamespace, namespace, ), {, this, ., namespace, =, namespace, ;, return, this, ;]
[;, }, ProcessDefines, injectNamespace, (, GlobalNamespace, namespace, ), {, this, ., namespace, =, namespace, ;, return, this, ;, }, @]
[=, namespace, ;, return, this, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[., namespace, =, namespace, ;, return, this, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[;, return, this, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, namespace, ==, null]
[), {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, overrideDefines, (, collectDefines, (, root, ,, namespace]
[==, null, ), {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, overrideDefines, (, collectDefines, (, root]
[), {, namespace, =, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, overrideDefines, (, collectDefines, (, root, ,, namespace]
[=, new, GlobalNamespace, (, compiler, ,, root, ), ;, }, overrideDefines, (, collectDefines, (, root, ,, namespace, ), ), ;]
[;, }, overrideDefines, (, collectDefines, (, root, ,, namespace, ), ), ;, }, private, void, overrideDefines, (, Map, <, String]
[,, root, ), ;, }, overrideDefines, (, collectDefines, (, root, ,, namespace, ), ), ;, }, private, void, overrideDefines, (]
[), ;, }, overrideDefines, (, collectDefines, (, root, ,, namespace, ), ), ;, }, private, void, overrideDefines, (, Map, <]
[;, }, private, void, overrideDefines, (, Map, <, String, ,, DefineInfo, >, allDefines, ), {, boolean, changed, =, false, ;]
[), ;, }, private, void, overrideDefines, (, Map, <, String, ,, DefineInfo, >, allDefines, ), {, boolean, changed, =, false]
[,, namespace, ), ), ;, }, private, void, overrideDefines, (, Map, <, String, ,, DefineInfo, >, allDefines, ), {, boolean]
[), ), ;, }, private, void, overrideDefines, (, Map, <, String, ,, DefineInfo, >, allDefines, ), {, boolean, changed, =]
[;, for, (, Map, ., Entry, <, String, ,, DefineInfo, >, def, :, allDefines, ., entrySet, (, ), ), {]
[), {, String, defineName, =, def, ., getKey, (, ), ;, DefineInfo, info, =, def, ., getValue, (, ), ;]
[., entrySet, (, ), ), {, String, defineName, =, def, ., getKey, (, ), ;, DefineInfo, info, =, def, .]
[;, DefineInfo, info, =, def, ., getValue, (, ), ;, Node, inputValue, =, dominantReplacements, ., get, (, defineName, ), ;]
[., getKey, (, ), ;, DefineInfo, info, =, def, ., getValue, (, ), ;, Node, inputValue, =, dominantReplacements, ., get]
[;, Node, inputValue, =, dominantReplacements, ., get, (, defineName, ), ;, Node, finalValue, =, inputValue, !=, null, ?, inputValue, :]
[., getValue, (, ), ;, Node, inputValue, =, dominantReplacements, ., get, (, defineName, ), ;, Node, finalValue, =, inputValue, !=]
[;, Node, finalValue, =, inputValue, !=, null, ?, inputValue, :, info, ., getLastValue, (, ), ;, if, (, finalValue, !=]
[., get, (, defineName, ), ;, Node, finalValue, =, inputValue, !=, null, ?, inputValue, :, info, ., getLastValue, (, )]
[), ;, Node, finalValue, =, inputValue, !=, null, ?, inputValue, :, info, ., getLastValue, (, ), ;, if, (, finalValue]
[;, if, (, finalValue, !=, info, ., initialValue, ), {, info, ., initialValueParent, ., replaceChild, (, info, ., initialValue, ,]
[?, inputValue, :, info, ., getLastValue, (, ), ;, if, (, finalValue, !=, info, ., initialValue, ), {, info, .]
[!=, null, ?, inputValue, :, info, ., getLastValue, (, ), ;, if, (, finalValue, !=, info, ., initialValue, ), {]
[?, inputValue, :, info, ., getLastValue, (, ), ;, if, (, finalValue, !=, info, ., initialValue, ), {, info, .]
[:, info, ., getLastValue, (, ), ;, if, (, finalValue, !=, info, ., initialValue, ), {, info, ., initialValueParent, .]
[;, if, (, finalValue, !=, info, ., initialValue, ), {, info, ., initialValueParent, ., replaceChild, (, info, ., initialValue, ,]
[., getLastValue, (, ), ;, if, (, finalValue, !=, info, ., initialValue, ), {, info, ., initialValueParent, ., replaceChild, (]
[), {, info, ., initialValueParent, ., replaceChild, (, info, ., initialValue, ,, finalValue, ., cloneTree, (, ), ), ;, compiler]
[!=, info, ., initialValue, ), {, info, ., initialValueParent, ., replaceChild, (, info, ., initialValue, ,, finalValue, ., cloneTree, (]
[), {, info, ., initialValueParent, ., replaceChild, (, info, ., initialValue, ,, finalValue, ., cloneTree, (, ), ), ;, compiler]
[., initialValue, ), {, info, ., initialValueParent, ., replaceChild, (, info, ., initialValue, ,, finalValue, ., cloneTree, (, ), )]
[;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =, changed, ||, finalValue, ., getType, (, ), !=]
[., replaceChild, (, info, ., initialValue, ,, finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +]
[., initialValueParent, ., replaceChild, (, info, ., initialValue, ,, finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (]
[,, finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =, changed]
[., initialValue, ,, finalValue, ., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed]
[), ;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =, changed, ||, finalValue, ., getType, (, )]
[., cloneTree, (, ), ), ;, compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =, changed, ||, finalValue]
[;, changed, =, changed, ||, finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (, ), ||, !]
[., addToDebugLog, (, "Overriding @define variable ", +, defineName, ), ;, changed, =, changed, ||, finalValue, ., getType, (, ), !=, info, .]
[), ;, changed, =, changed, ||, finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (, ), ||]
[+, defineName, ), ;, changed, =, changed, ||, finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (]
[), ;, changed, =, changed, ||, finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (, ), ||]
[=, changed, ||, finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (, ), ||, !, finalValue, .]
[;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, Set, <, String, >, unusedReplacements]
[||, !, finalValue, ., isEquivalentTo, (, info, ., initialValue, ), ;, }, }, if, (, changed, ), {, compiler, .]
[||, finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (, ), ||, !, finalValue, ., isEquivalentTo, (]
[||, !, finalValue, ., isEquivalentTo, (, info, ., initialValue, ), ;, }, }, if, (, changed, ), {, compiler, .]
[!=, info, ., initialValue, ., getType, (, ), ||, !, finalValue, ., isEquivalentTo, (, info, ., initialValue, ), ;, }]
[., getType, (, ), !=, info, ., initialValue, ., getType, (, ), ||, !, finalValue, ., isEquivalentTo, (, info, .]
[||, !, finalValue, ., isEquivalentTo, (, info, ., initialValue, ), ;, }, }, if, (, changed, ), {, compiler, .]
[., getType, (, ), ||, !, finalValue, ., isEquivalentTo, (, info, ., initialValue, ), ;, }, }, if, (, changed]
[., initialValue, ., getType, (, ), ||, !, finalValue, ., isEquivalentTo, (, info, ., initialValue, ), ;, }, }, if]
[;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, Set, <, String, >, unusedReplacements]
[;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, Set, <, String, >, unusedReplacements]
[., isEquivalentTo, (, info, ., initialValue, ), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, )]
[), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, Set, <, String, >]
[., initialValue, ), ;, }, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, Set, <]
[), {, compiler, ., reportCodeChange, (, ), ;, }, Set, <, String, >, unusedReplacements, =, dominantReplacements, ., keySet, (, )]
[;, }, Set, <, String, >, unusedReplacements, =, dominantReplacements, ., keySet, (, ), ;, unusedReplacements, ., removeAll, (, allDefines, .]
[., reportCodeChange, (, ), ;, }, Set, <, String, >, unusedReplacements, =, dominantReplacements, ., keySet, (, ), ;, unusedReplacements, .]
[;, unusedReplacements, ., removeAll, (, allDefines, ., keySet, (, ), ), ;, unusedReplacements, ., removeAll, (, KNOWN_DEFINES, ), ;, for]
[., keySet, (, ), ;, unusedReplacements, ., removeAll, (, allDefines, ., keySet, (, ), ), ;, unusedReplacements, ., removeAll, (]
[;, unusedReplacements, ., removeAll, (, KNOWN_DEFINES, ), ;, for, (, String, unknownDefine, :, unusedReplacements, ), {, compiler, ., report, (]
[., removeAll, (, allDefines, ., keySet, (, ), ), ;, unusedReplacements, ., removeAll, (, KNOWN_DEFINES, ), ;, for, (, String]
[), ;, unusedReplacements, ., removeAll, (, KNOWN_DEFINES, ), ;, for, (, String, unknownDefine, :, unusedReplacements, ), {, compiler, ., report]
[., keySet, (, ), ), ;, unusedReplacements, ., removeAll, (, KNOWN_DEFINES, ), ;, for, (, String, unknownDefine, :, unusedReplacements, )]
[;, for, (, String, unknownDefine, :, unusedReplacements, ), {, compiler, ., report, (, JSError, ., make, (, UNKNOWN_DEFINE_WARNING, ,, unknownDefine]
[., removeAll, (, KNOWN_DEFINES, ), ;, for, (, String, unknownDefine, :, unusedReplacements, ), {, compiler, ., report, (, JSError, .]
[), ;, for, (, String, unknownDefine, :, unusedReplacements, ), {, compiler, ., report, (, JSError, ., make, (, UNKNOWN_DEFINE_WARNING, ,]
[), {, compiler, ., report, (, JSError, ., make, (, UNKNOWN_DEFINE_WARNING, ,, unknownDefine, ), ), ;, }, }, private, static]
[;, }, }, private, static, String, format, (, MessageFormat, format, ,, Object, ..., params, ), {, return, format, ., format]
[., report, (, JSError, ., make, (, UNKNOWN_DEFINE_WARNING, ,, unknownDefine, ), ), ;, }, }, private, static, String, format, (]
[), ;, }, }, private, static, String, format, (, MessageFormat, format, ,, Object, ..., params, ), {, return, format, .]
[., make, (, UNKNOWN_DEFINE_WARNING, ,, unknownDefine, ), ), ;, }, }, private, static, String, format, (, MessageFormat, format, ,, Object]
[,, unknownDefine, ), ), ;, }, }, private, static, String, format, (, MessageFormat, format, ,, Object, ..., params, ), {]
[), ), ;, }, }, private, static, String, format, (, MessageFormat, format, ,, Object, ..., params, ), {, return, format]
[;, }, private, boolean, isValidDefineType, (, JSTypeExpression, expression, ), {, JSType, type, =, expression, ., evaluate, (, null, ,, compiler]
[., format, (, params, ), ;, }, private, boolean, isValidDefineType, (, JSTypeExpression, expression, ), {, JSType, type, =, expression, .]
[), ;, }, private, boolean, isValidDefineType, (, JSTypeExpression, expression, ), {, JSType, type, =, expression, ., evaluate, (, null, ,]
[;, return, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, compiler, ., getTypeRegistry, (, ), ., getNativeType]
[., evaluate, (, null, ,, compiler, ., getTypeRegistry, (, ), ), ;, return, !, type, ., isUnknownType, (, ), &&]
[,, compiler, ., getTypeRegistry, (, ), ), ;, return, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (]
[), ;, return, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, compiler, ., getTypeRegistry, (, ), .]
[., getTypeRegistry, (, ), ), ;, return, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, compiler, .]
[;, }, private, Map, <, String, ,, DefineInfo, >, collectDefines, (, Node, root, ,, GlobalNamespace, namespace, ), {, List, <]
[&&, type, ., isSubtype, (, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NUMBER_STRING_BOOLEAN, ), ), ;, }]
[&&, type, ., isSubtype, (, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NUMBER_STRING_BOOLEAN, ), ), ;, }]
[., isUnknownType, (, ), &&, type, ., isSubtype, (, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NUMBER_STRING_BOOLEAN]
[;, }, private, Map, <, String, ,, DefineInfo, >, collectDefines, (, Node, root, ,, GlobalNamespace, namespace, ), {, List, <]
[., isSubtype, (, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NUMBER_STRING_BOOLEAN, ), ), ;, }, private, Map]
[), ;, }, private, Map, <, String, ,, DefineInfo, >, collectDefines, (, Node, root, ,, GlobalNamespace, namespace, ), {, List]
[., getNativeType, (, JSTypeNative, ., NUMBER_STRING_BOOLEAN, ), ), ;, }, private, Map, <, String, ,, DefineInfo, >, collectDefines, (, Node]
[., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NUMBER_STRING_BOOLEAN, ), ), ;, }, private, Map, <, String, ,, DefineInfo]
[), ), ;, }, private, Map, <, String, ,, DefineInfo, >, collectDefines, (, Node, root, ,, GlobalNamespace, namespace, ), {]
[., NUMBER_STRING_BOOLEAN, ), ), ;, }, private, Map, <, String, ,, DefineInfo, >, collectDefines, (, Node, root, ,, GlobalNamespace, namespace]
[;, for, (, Name, name, :, namespace, ., getNameIndex, (, ), ., values, (, ), ), {, Ref, decl, =]
[., newArrayList, (, ), ;, for, (, Name, name, :, namespace, ., getNameIndex, (, ), ., values, (, ), )]
[), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (, name, ., docInfo, !=, null, &&, name]
[., values, (, ), ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (, name, ., docInfo]
[., getNameIndex, (, ), ., values, (, ), ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if]
[;, if, (, name, ., docInfo, !=, null, &&, name, ., docInfo, ., isDefine, (, ), ), {, if, (]
[., getDeclaration, (, ), ;, if, (, name, ., docInfo, !=, null, &&, name, ., docInfo, ., isDefine, (, )]
[), {, if, (, isValidDefineType, (, name, ., docInfo, ., getType, (, ), ), ), {, allDefines, ., add, (]
[&&, name, ., docInfo, ., isDefine, (, ), ), {, if, (, isValidDefineType, (, name, ., docInfo, ., getType, (]
[!=, null, &&, name, ., docInfo, ., isDefine, (, ), ), {, if, (, isValidDefineType, (, name, ., docInfo, .]
[., docInfo, !=, null, &&, name, ., docInfo, ., isDefine, (, ), ), {, if, (, isValidDefineType, (, name, .]
[&&, name, ., docInfo, ., isDefine, (, ), ), {, if, (, isValidDefineType, (, name, ., docInfo, ., getType, (]
[), {, if, (, isValidDefineType, (, name, ., docInfo, ., getType, (, ), ), ), {, allDefines, ., add, (]
[., isDefine, (, ), ), {, if, (, isValidDefineType, (, name, ., docInfo, ., getType, (, ), ), ), {]
[., docInfo, ., isDefine, (, ), ), {, if, (, isValidDefineType, (, name, ., docInfo, ., getType, (, ), )]
[), {, allDefines, ., add, (, name, ), ;, }, else, {, JSError, error, =, JSError, ., make, (, decl]
[), ), {, allDefines, ., add, (, name, ), ;, }, else, {, JSError, error, =, JSError, ., make, (]
[., getType, (, ), ), ), {, allDefines, ., add, (, name, ), ;, }, else, {, JSError, error, =]
[., docInfo, ., getType, (, ), ), ), {, allDefines, ., add, (, name, ), ;, }, else, {, JSError]
[;, }, else, {, JSError, error, =, JSError, ., make, (, decl, ., getSourceName, (, ), ,, decl, ., node]
[., add, (, name, ), ;, }, else, {, JSError, error, =, JSError, ., make, (, decl, ., getSourceName, (]
[), ;, }, else, {, JSError, error, =, JSError, ., make, (, decl, ., getSourceName, (, ), ,, decl, .]
[;, compiler, ., report, (, error, ), ;, }, }, else, {, for, (, Ref, ref, :, name, ., getRefs]
[., make, (, decl, ., getSourceName, (, ), ,, decl, ., node, ,, INVALID_DEFINE_TYPE_ERROR, ), ;, compiler, ., report, (]
[,, decl, ., node, ,, INVALID_DEFINE_TYPE_ERROR, ), ;, compiler, ., report, (, error, ), ;, }, }, else, {, for]
[., getSourceName, (, ), ,, decl, ., node, ,, INVALID_DEFINE_TYPE_ERROR, ), ;, compiler, ., report, (, error, ), ;, }]
[,, INVALID_DEFINE_TYPE_ERROR, ), ;, compiler, ., report, (, error, ), ;, }, }, else, {, for, (, Ref, ref, :]
[., node, ,, INVALID_DEFINE_TYPE_ERROR, ), ;, compiler, ., report, (, error, ), ;, }, }, else, {, for, (, Ref]
[), ;, compiler, ., report, (, error, ), ;, }, }, else, {, for, (, Ref, ref, :, name, .]
[;, }, }, else, {, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (, ref]
[., report, (, error, ), ;, }, }, else, {, for, (, Ref, ref, :, name, ., getRefs, (, )]
[), ;, }, }, else, {, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (]
[), {, if, (, ref, ==, decl, ), {, continue, ;, }, Node, n, =, ref, ., node, ;, Node]
[., getRefs, (, ), ), {, if, (, ref, ==, decl, ), {, continue, ;, }, Node, n, =, ref]
[), {, continue, ;, }, Node, n, =, ref, ., node, ;, Node, parent, =, ref, ., node, ., getParent]
[==, decl, ), {, continue, ;, }, Node, n, =, ref, ., node, ;, Node, parent, =, ref, ., node]
[), {, continue, ;, }, Node, n, =, ref, ., node, ;, Node, parent, =, ref, ., node, ., getParent]
[;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, )]
[., node, ;, Node, parent, =, ref, ., node, ., getParent, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo]
[;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, &&, parent, ., isVar, (]
[., getParent, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, &&]
[., node, ., getParent, (, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, ==]
[;, if, (, info, ==, null, &&, parent, ., isVar, (, ), &&, parent, ., hasOneChild, (, ), ), {]
[., getJSDocInfo, (, ), ;, if, (, info, ==, null, &&, parent, ., isVar, (, ), &&, parent, ., hasOneChild]
[), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., isDefine]
[&&, parent, ., hasOneChild, (, ), ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info]
[&&, parent, ., isVar, (, ), &&, parent, ., hasOneChild, (, ), ), {, info, =, parent, ., getJSDocInfo, (]
[==, null, &&, parent, ., isVar, (, ), &&, parent, ., hasOneChild, (, ), ), {, info, =, parent, .]
[&&, parent, ., isVar, (, ), &&, parent, ., hasOneChild, (, ), ), {, info, =, parent, ., getJSDocInfo, (]
[&&, parent, ., hasOneChild, (, ), ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info]
[., isVar, (, ), &&, parent, ., hasOneChild, (, ), ), {, info, =, parent, ., getJSDocInfo, (, ), ;]
[), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., isDefine]
[., hasOneChild, (, ), ), {, info, =, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null]
[=, parent, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., isDefine, (, ), )]
[;, }, if, (, info, !=, null, &&, info, ., isDefine, (, ), ), {, allDefines, ., add, (, name]
[., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., isDefine, (, ), ), {, allDefines]
[), {, allDefines, ., add, (, name, ), ;, break, ;, }, }, }, }, CollectDefines, pass, =, new, CollectDefines]
[&&, info, ., isDefine, (, ), ), {, allDefines, ., add, (, name, ), ;, break, ;, }, }, }]
[!=, null, &&, info, ., isDefine, (, ), ), {, allDefines, ., add, (, name, ), ;, break, ;, }]
[&&, info, ., isDefine, (, ), ), {, allDefines, ., add, (, name, ), ;, break, ;, }, }, }]
[), {, allDefines, ., add, (, name, ), ;, break, ;, }, }, }, }, CollectDefines, pass, =, new, CollectDefines]
[., isDefine, (, ), ), {, allDefines, ., add, (, name, ), ;, break, ;, }, }, }, }, CollectDefines]
[;, break, ;, }, }, }, }, CollectDefines, pass, =, new, CollectDefines, (, compiler, ,, allDefines, ), ;, NodeTraversal, .]
[., add, (, name, ), ;, break, ;, }, }, }, }, CollectDefines, pass, =, new, CollectDefines, (, compiler, ,]
[), ;, break, ;, }, }, }, }, CollectDefines, pass, =, new, CollectDefines, (, compiler, ,, allDefines, ), ;, NodeTraversal]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, pass, ), ;, return, pass, ., getAllDefines, (, ), ;, }]
[,, allDefines, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, pass, ), ;, return, pass, ., getAllDefines, (]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, pass, ), ;, return, pass, ., getAllDefines, (, ), ;]
[;, return, pass, ., getAllDefines, (, ), ;, }, private, static, final, class, CollectDefines, implements, Callback, {, private, final, AbstractCompiler]
[., traverse, (, compiler, ,, root, ,, pass, ), ;, return, pass, ., getAllDefines, (, ), ;, }, private, static]
[,, root, ,, pass, ), ;, return, pass, ., getAllDefines, (, ), ;, }, private, static, final, class, CollectDefines, implements]
[,, pass, ), ;, return, pass, ., getAllDefines, (, ), ;, }, private, static, final, class, CollectDefines, implements, Callback, {]
[), ;, return, pass, ., getAllDefines, (, ), ;, }, private, static, final, class, CollectDefines, implements, Callback, {, private, final]
[;, }, private, static, final, class, CollectDefines, implements, Callback, {, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, String]
[., getAllDefines, (, ), ;, }, private, static, final, class, CollectDefines, implements, Callback, {, private, final, AbstractCompiler, compiler, ;, private]
[;, private, final, Deque, <, Integer, >, assignAllowed, ;, CollectDefines, (, AbstractCompiler, compiler, ,, List, <, Name, >, listOfDefines, )]
[=, compiler, ;, this, ., allDefines, =, Maps, ., newHashMap, (, ), ;, assignableDefines, =, Maps, ., newHashMap, (, )]
[., compiler, =, compiler, ;, this, ., allDefines, =, Maps, ., newHashMap, (, ), ;, assignableDefines, =, Maps, ., newHashMap]
[;, this, ., allDefines, =, Maps, ., newHashMap, (, ), ;, assignableDefines, =, Maps, ., newHashMap, (, ), ;, assignAllowed]
[=, Maps, ., newHashMap, (, ), ;, assignableDefines, =, Maps, ., newHashMap, (, ), ;, assignAllowed, =, new, ArrayDeque, <]
[., allDefines, =, Maps, ., newHashMap, (, ), ;, assignableDefines, =, Maps, ., newHashMap, (, ), ;, assignAllowed, =, new]
[;, assignableDefines, =, Maps, ., newHashMap, (, ), ;, assignAllowed, =, new, ArrayDeque, <, Integer, >, (, ), ;, assignAllowed]
[., newHashMap, (, ), ;, assignableDefines, =, Maps, ., newHashMap, (, ), ;, assignAllowed, =, new, ArrayDeque, <, Integer, >]
[=, Maps, ., newHashMap, (, ), ;, assignAllowed, =, new, ArrayDeque, <, Integer, >, (, ), ;, assignAllowed, ., push]
[;, assignAllowed, =, new, ArrayDeque, <, Integer, >, (, ), ;, assignAllowed, ., push, (, 1, ), ;, allRefInfo, =]
[., newHashMap, (, ), ;, assignAllowed, =, new, ArrayDeque, <, Integer, >, (, ), ;, assignAllowed, ., push, (, 1]
[=, new, ArrayDeque, <, Integer, >, (, ), ;, assignAllowed, ., push, (, 1, ), ;, allRefInfo, =, Maps, .]
[;, assignAllowed, ., push, (, 1, ), ;, allRefInfo, =, Maps, ., newHashMap, (, ), ;, for, (, Name, name]
[;, allRefInfo, =, Maps, ., newHashMap, (, ), ;, for, (, Name, name, :, listOfDefines, ), {, Ref, decl, =]
[., push, (, 1, ), ;, allRefInfo, =, Maps, ., newHashMap, (, ), ;, for, (, Name, name, :, listOfDefines]
[), ;, allRefInfo, =, Maps, ., newHashMap, (, ), ;, for, (, Name, name, :, listOfDefines, ), {, Ref, decl]
[=, Maps, ., newHashMap, (, ), ;, for, (, Name, name, :, listOfDefines, ), {, Ref, decl, =, name, .]
[;, for, (, Name, name, :, listOfDefines, ), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (]
[., newHashMap, (, ), ;, for, (, Name, name, :, listOfDefines, ), {, Ref, decl, =, name, ., getDeclaration, (]
[), {, Ref, decl, =, name, ., getDeclaration, (, ), ;, if, (, decl, !=, null, ), {, allRefInfo, .]
[;, if, (, decl, !=, null, ), {, allRefInfo, ., put, (, decl, ., node, ,, new, RefInfo, (, decl]
[., getDeclaration, (, ), ;, if, (, decl, !=, null, ), {, allRefInfo, ., put, (, decl, ., node, ,]
[), {, allRefInfo, ., put, (, decl, ., node, ,, new, RefInfo, (, decl, ,, name, ), ), ;, }]
[!=, null, ), {, allRefInfo, ., put, (, decl, ., node, ,, new, RefInfo, (, decl, ,, name, ), )]
[), {, allRefInfo, ., put, (, decl, ., node, ,, new, RefInfo, (, decl, ,, name, ), ), ;, }]
[;, }, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (, ref, ==, decl, )]
[., put, (, decl, ., node, ,, new, RefInfo, (, decl, ,, name, ), ), ;, }, for, (, Ref]
[,, new, RefInfo, (, decl, ,, name, ), ), ;, }, for, (, Ref, ref, :, name, ., getRefs, (]
[., node, ,, new, RefInfo, (, decl, ,, name, ), ), ;, }, for, (, Ref, ref, :, name, .]
[), ;, }, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (, ref, ==, decl]
[,, name, ), ), ;, }, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (]
[), ), ;, }, for, (, Ref, ref, :, name, ., getRefs, (, ), ), {, if, (, ref, ==]
[), {, if, (, ref, ==, decl, ), {, continue, ;, }, if, (, ref, ., getTwin, (, ), ==]
[., getRefs, (, ), ), {, if, (, ref, ==, decl, ), {, continue, ;, }, if, (, ref, .]
[), {, continue, ;, }, if, (, ref, ., getTwin, (, ), ==, null, ||, !, ref, ., getTwin, (]
[==, decl, ), {, continue, ;, }, if, (, ref, ., getTwin, (, ), ==, null, ||, !, ref, .]
[), {, continue, ;, }, if, (, ref, ., getTwin, (, ), ==, null, ||, !, ref, ., getTwin, (]
[), {, allRefInfo, ., put, (, ref, ., node, ,, new, RefInfo, (, ref, ,, name, ), ), ;, }]
[||, !, ref, ., getTwin, (, ), ., isSet, (, ), ), {, allRefInfo, ., put, (, ref, ., node]
[==, null, ||, !, ref, ., getTwin, (, ), ., isSet, (, ), ), {, allRefInfo, ., put, (, ref]
[., getTwin, (, ), ==, null, ||, !, ref, ., getTwin, (, ), ., isSet, (, ), ), {, allRefInfo]
[||, !, ref, ., getTwin, (, ), ., isSet, (, ), ), {, allRefInfo, ., put, (, ref, ., node]
[), {, allRefInfo, ., put, (, ref, ., node, ,, new, RefInfo, (, ref, ,, name, ), ), ;, }]
[), {, allRefInfo, ., put, (, ref, ., node, ,, new, RefInfo, (, ref, ,, name, ), ), ;, }]
[., isSet, (, ), ), {, allRefInfo, ., put, (, ref, ., node, ,, new, RefInfo, (, ref, ,, name]
[., getTwin, (, ), ., isSet, (, ), ), {, allRefInfo, ., put, (, ref, ., node, ,, new, RefInfo]
[;, }, }, }, }, Map, <, String, ,, DefineInfo, >, getAllDefines, (, ), {, return, allDefines, ;, }, @]
[., put, (, ref, ., node, ,, new, RefInfo, (, ref, ,, name, ), ), ;, }, }, }, }]
[,, new, RefInfo, (, ref, ,, name, ), ), ;, }, }, }, }, Map, <, String, ,, DefineInfo, >]
[., node, ,, new, RefInfo, (, ref, ,, name, ), ), ;, }, }, }, }, Map, <, String, ,]
[), ;, }, }, }, }, Map, <, String, ,, DefineInfo, >, getAllDefines, (, ), {, return, allDefines, ;, }]
[,, name, ), ), ;, }, }, }, }, Map, <, String, ,, DefineInfo, >, getAllDefines, (, ), {, return]
[), ), ;, }, }, }, }, Map, <, String, ,, DefineInfo, >, getAllDefines, (, ), {, return, allDefines, ;]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, updateAssignAllowedStack, (]
[;, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[,, true, ), ;, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[), ;, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, RefInfo, refInfo]
[;, if, (, refInfo, !=, null, ), {, Ref, ref, =, refInfo, ., ref, ;, Name, name, =, refInfo, .]
[., get, (, n, ), ;, if, (, refInfo, !=, null, ), {, Ref, ref, =, refInfo, ., ref, ;]
[), ;, if, (, refInfo, !=, null, ), {, Ref, ref, =, refInfo, ., ref, ;, Name, name, =, refInfo]
[), {, Ref, ref, =, refInfo, ., ref, ;, Name, name, =, refInfo, ., name, ;, String, fullName, =, name]
[!=, null, ), {, Ref, ref, =, refInfo, ., ref, ;, Name, name, =, refInfo, ., name, ;, String, fullName]
[), {, Ref, ref, =, refInfo, ., ref, ;, Name, name, =, refInfo, ., name, ;, String, fullName, =, name]
[;, Name, name, =, refInfo, ., name, ;, String, fullName, =, name, ., getFullName, (, ), ;, switch, (, ref]
[., ref, ;, Name, name, =, refInfo, ., name, ;, String, fullName, =, name, ., getFullName, (, ), ;, switch]
[;, String, fullName, =, name, ., getFullName, (, ), ;, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :]
[., name, ;, String, fullName, =, name, ., getFullName, (, ), ;, switch, (, ref, ., type, ), {, case]
[;, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, case, SET_FROM_LOCAL, :, Node, valParent, =, getValueParent, (, ref]
[., getFullName, (, ), ;, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, case, SET_FROM_LOCAL, :, Node, valParent]
[), {, case, SET_FROM_GLOBAL, :, case, SET_FROM_LOCAL, :, Node, valParent, =, getValueParent, (, ref, ), ;, Node, val, =, valParent]
[., type, ), {, case, SET_FROM_GLOBAL, :, case, SET_FROM_LOCAL, :, Node, valParent, =, getValueParent, (, ref, ), ;, Node, val]
[:, case, SET_FROM_LOCAL, :, Node, valParent, =, getValueParent, (, ref, ), ;, Node, val, =, valParent, ., getLastChild, (, )]
[:, Node, valParent, =, getValueParent, (, ref, ), ;, Node, val, =, valParent, ., getLastChild, (, ), ;, if, (]
[;, Node, val, =, valParent, ., getLastChild, (, ), ;, if, (, valParent, ., isAssign, (, ), &&, name, .]
[), ;, Node, val, =, valParent, ., getLastChild, (, ), ;, if, (, valParent, ., isAssign, (, ), &&, name]
[;, if, (, valParent, ., isAssign, (, ), &&, name, ., isSimpleName, (, ), &&, name, ., getDeclaration, (, )]
[., getLastChild, (, ), ;, if, (, valParent, ., isAssign, (, ), &&, name, ., isSimpleName, (, ), &&, name]
[), {, compiler, ., report, (, t, ., makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,, fullName, ), ), ;, }, else]
[&&, name, ., getDeclaration, (, ), ==, ref, ), {, compiler, ., report, (, t, ., makeError, (, val, ,]
[&&, name, ., isSimpleName, (, ), &&, name, ., getDeclaration, (, ), ==, ref, ), {, compiler, ., report, (]
[., isAssign, (, ), &&, name, ., isSimpleName, (, ), &&, name, ., getDeclaration, (, ), ==, ref, ), {]
[&&, name, ., getDeclaration, (, ), ==, ref, ), {, compiler, ., report, (, t, ., makeError, (, val, ,]
[., isSimpleName, (, ), &&, name, ., getDeclaration, (, ), ==, ref, ), {, compiler, ., report, (, t, .]
[), {, compiler, ., report, (, t, ., makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,, fullName, ), ), ;, }, else]
[==, ref, ), {, compiler, ., report, (, t, ., makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,, fullName, ), ), ;]
[., getDeclaration, (, ), ==, ref, ), {, compiler, ., report, (, t, ., makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,]
[), {, compiler, ., report, (, t, ., makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,, fullName, ), ), ;, }, else]
[;, }, else, if, (, processDefineAssignment, (, t, ,, fullName, ,, val, ,, valParent, ), ), {, refInfo, ., name]
[., report, (, t, ., makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,, fullName, ), ), ;, }, else, if, (, processDefineAssignment]
[), ;, }, else, if, (, processDefineAssignment, (, t, ,, fullName, ,, val, ,, valParent, ), ), {, refInfo, .]
[., makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,, fullName, ), ), ;, }, else, if, (, processDefineAssignment, (, t, ,, fullName]
[,, INVALID_DEFINE_INIT_ERROR, ,, fullName, ), ), ;, }, else, if, (, processDefineAssignment, (, t, ,, fullName, ,, val, ,, valParent]
[,, fullName, ), ), ;, }, else, if, (, processDefineAssignment, (, t, ,, fullName, ,, val, ,, valParent, ), )]
[), ), ;, }, else, if, (, processDefineAssignment, (, t, ,, fullName, ,, val, ,, valParent, ), ), {, refInfo]
[), {, refInfo, ., name, ., removeRef, (, ref, ), ;, lvalueToRemoveLater, =, valParent, ;, }, break, ;, default, :]
[,, fullName, ,, val, ,, valParent, ), ), {, refInfo, ., name, ., removeRef, (, ref, ), ;, lvalueToRemoveLater, =]
[,, val, ,, valParent, ), ), {, refInfo, ., name, ., removeRef, (, ref, ), ;, lvalueToRemoveLater, =, valParent, ;]
[,, valParent, ), ), {, refInfo, ., name, ., removeRef, (, ref, ), ;, lvalueToRemoveLater, =, valParent, ;, }, break]
[), ), {, refInfo, ., name, ., removeRef, (, ref, ), ;, lvalueToRemoveLater, =, valParent, ;, }, break, ;, default]
[;, lvalueToRemoveLater, =, valParent, ;, }, break, ;, default, :, if, (, t, ., inGlobalScope, (, ), ), {, DefineInfo]
[., removeRef, (, ref, ), ;, lvalueToRemoveLater, =, valParent, ;, }, break, ;, default, :, if, (, t, ., inGlobalScope]
[., name, ., removeRef, (, ref, ), ;, lvalueToRemoveLater, =, valParent, ;, }, break, ;, default, :, if, (, t]
[), ;, lvalueToRemoveLater, =, valParent, ;, }, break, ;, default, :, if, (, t, ., inGlobalScope, (, ), ), {]
[=, valParent, ;, }, break, ;, default, :, if, (, t, ., inGlobalScope, (, ), ), {, DefineInfo, info, =]
[;, }, break, ;, default, :, if, (, t, ., inGlobalScope, (, ), ), {, DefineInfo, info, =, assignableDefines, .]
[), {, DefineInfo, info, =, assignableDefines, ., get, (, fullName, ), ;, if, (, info, !=, null, ), {, setDefineInfoNotAssignable]
[., inGlobalScope, (, ), ), {, DefineInfo, info, =, assignableDefines, ., get, (, fullName, ), ;, if, (, info, !=]
[;, if, (, info, !=, null, ), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;, assignableDefines, ., remove, (, fullName]
[., get, (, fullName, ), ;, if, (, info, !=, null, ), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;]
[), ;, if, (, info, !=, null, ), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;, assignableDefines, ., remove, (]
[), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;, assignableDefines, ., remove, (, fullName, ), ;, }, }, break, ;]
[!=, null, ), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;, assignableDefines, ., remove, (, fullName, ), ;, }, }]
[), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;, assignableDefines, ., remove, (, fullName, ), ;, }, }, break, ;]
[;, assignableDefines, ., remove, (, fullName, ), ;, }, }, break, ;, }, }, if, (, !, t, ., inGlobalScope]
[,, t, ), ;, assignableDefines, ., remove, (, fullName, ), ;, }, }, break, ;, }, }, if, (, !]
[), ;, assignableDefines, ., remove, (, fullName, ), ;, }, }, break, ;, }, }, if, (, !, t, .]
[;, }, }, break, ;, }, }, if, (, !, t, ., inGlobalScope, (, ), &&, n, ., getJSDocInfo, (]
[., remove, (, fullName, ), ;, }, }, break, ;, }, }, if, (, !, t, ., inGlobalScope, (, )]
[), ;, }, }, break, ;, }, }, if, (, !, t, ., inGlobalScope, (, ), &&, n, ., getJSDocInfo]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", ), ), ;, }, if]
[&&, n, ., getJSDocInfo, (, ), ., isDefine, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[&&, n, ., getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., isDefine, (, ), ), {]
[&&, n, ., getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., isDefine, (, ), ), {]
[., inGlobalScope, (, ), &&, n, ., getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., isDefine]
[&&, n, ., getJSDocInfo, (, ), ., isDefine, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[!=, null, &&, n, ., getJSDocInfo, (, ), ., isDefine, (, ), ), {, compiler, ., report, (, t, .]
[., getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., isDefine, (, ), ), {, compiler, .]
[&&, n, ., getJSDocInfo, (, ), ., isDefine, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", ), ), ;, }, if]
[., isDefine, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", )]
[., getJSDocInfo, (, ), ., isDefine, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[;, }, if, (, lvalueToRemoveLater, ==, n, ), {, lvalueToRemoveLater, =, null, ;, if, (, n, ., isAssign, (, )]
[., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", ), ), ;, }, if, (, lvalueToRemoveLater, ==]
[), ;, }, if, (, lvalueToRemoveLater, ==, n, ), {, lvalueToRemoveLater, =, null, ;, if, (, n, ., isAssign, (]
[., makeError, (, n, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", ), ), ;, }, if, (, lvalueToRemoveLater, ==, n, ), {, lvalueToRemoveLater]
[,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", ), ), ;, }, if, (, lvalueToRemoveLater, ==, n, ), {, lvalueToRemoveLater, =, null, ;, if]
[,, "", ), ), ;, }, if, (, lvalueToRemoveLater, ==, n, ), {, lvalueToRemoveLater, =, null, ;, if, (, n]
[), ), ;, }, if, (, lvalueToRemoveLater, ==, n, ), {, lvalueToRemoveLater, =, null, ;, if, (, n, ., isAssign]
[), {, lvalueToRemoveLater, =, null, ;, if, (, n, ., isAssign, (, ), ), {, Node, last, =, n, .]
[==, n, ), {, lvalueToRemoveLater, =, null, ;, if, (, n, ., isAssign, (, ), ), {, Node, last, =]
[), {, lvalueToRemoveLater, =, null, ;, if, (, n, ., isAssign, (, ), ), {, Node, last, =, n, .]
[=, null, ;, if, (, n, ., isAssign, (, ), ), {, Node, last, =, n, ., getLastChild, (, )]
[;, if, (, n, ., isAssign, (, ), ), {, Node, last, =, n, ., getLastChild, (, ), ;, n]
[), {, Node, last, =, n, ., getLastChild, (, ), ;, n, ., removeChild, (, last, ), ;, parent, .]
[., isAssign, (, ), ), {, Node, last, =, n, ., getLastChild, (, ), ;, n, ., removeChild, (, last]
[;, n, ., removeChild, (, last, ), ;, parent, ., replaceChild, (, n, ,, last, ), ;, }, else, {]
[., getLastChild, (, ), ;, n, ., removeChild, (, last, ), ;, parent, ., replaceChild, (, n, ,, last, )]
[;, parent, ., replaceChild, (, n, ,, last, ), ;, }, else, {, Preconditions, ., checkState, (, n, ., isName]
[., removeChild, (, last, ), ;, parent, ., replaceChild, (, n, ,, last, ), ;, }, else, {, Preconditions, .]
[), ;, parent, ., replaceChild, (, n, ,, last, ), ;, }, else, {, Preconditions, ., checkState, (, n, .]
[;, }, else, {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, n, ., removeChild, (, n]
[., replaceChild, (, n, ,, last, ), ;, }, else, {, Preconditions, ., checkState, (, n, ., isName, (, )]
[,, last, ), ;, }, else, {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, n, .]
[), ;, }, else, {, Preconditions, ., checkState, (, n, ., isName, (, ), ), ;, n, ., removeChild, (]
[;, n, ., removeChild, (, n, ., getFirstChild, (, ), ), ;, }, compiler, ., reportCodeChange, (, ), ;, }]
[., checkState, (, n, ., isName, (, ), ), ;, n, ., removeChild, (, n, ., getFirstChild, (, ), )]
[), ;, n, ., removeChild, (, n, ., getFirstChild, (, ), ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[., isName, (, ), ), ;, n, ., removeChild, (, n, ., getFirstChild, (, ), ), ;, }, compiler, .]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, if, (, n, ., isCall, (, ), ), {, if, (]
[., removeChild, (, n, ., getFirstChild, (, ), ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, if, (]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, if, (, n, ., isCall, (, ), ), {, if]
[., getFirstChild, (, ), ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, if, (, n, ., isCall, (]
[;, }, if, (, n, ., isCall, (, ), ), {, if, (, t, ., inGlobalScope, (, ), ), {]
[., reportCodeChange, (, ), ;, }, if, (, n, ., isCall, (, ), ), {, if, (, t, ., inGlobalScope]
[), {, if, (, t, ., inGlobalScope, (, ), ), {, for, (, DefineInfo, info, :, assignableDefines, ., values, (]
[., isCall, (, ), ), {, if, (, t, ., inGlobalScope, (, ), ), {, for, (, DefineInfo, info, :]
[), {, for, (, DefineInfo, info, :, assignableDefines, ., values, (, ), ), {, setDefineInfoNotAssignable, (, info, ,, t, )]
[., inGlobalScope, (, ), ), {, for, (, DefineInfo, info, :, assignableDefines, ., values, (, ), ), {, setDefineInfoNotAssignable, (]
[), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;, }, assignableDefines, ., clear, (, ), ;, }, }, updateAssignAllowedStack, (]
[., values, (, ), ), {, setDefineInfoNotAssignable, (, info, ,, t, ), ;, }, assignableDefines, ., clear, (, ), ;]
[;, }, assignableDefines, ., clear, (, ), ;, }, }, updateAssignAllowedStack, (, n, ,, false, ), ;, }, private, void]
[,, t, ), ;, }, assignableDefines, ., clear, (, ), ;, }, }, updateAssignAllowedStack, (, n, ,, false, ), ;]
[), ;, }, assignableDefines, ., clear, (, ), ;, }, }, updateAssignAllowedStack, (, n, ,, false, ), ;, }, private]
[;, }, }, updateAssignAllowedStack, (, n, ,, false, ), ;, }, private, void, updateAssignAllowedStack, (, Node, n, ,, boolean, entering]
[., clear, (, ), ;, }, }, updateAssignAllowedStack, (, n, ,, false, ), ;, }, private, void, updateAssignAllowedStack, (, Node]
[;, }, private, void, updateAssignAllowedStack, (, Node, n, ,, boolean, entering, ), {, switch, (, n, ., getType, (, )]
[,, false, ), ;, }, private, void, updateAssignAllowedStack, (, Node, n, ,, boolean, entering, ), {, switch, (, n, .]
[), ;, }, private, void, updateAssignAllowedStack, (, Node, n, ,, boolean, entering, ), {, switch, (, n, ., getType, (]
[), {, case, Token, ., CASE, :, case, Token, ., FOR, :, case, Token, ., FUNCTION, :, case, Token, .]
[., getType, (, ), ), {, case, Token, ., CASE, :, case, Token, ., FOR, :, case, Token, ., FUNCTION]
[:, case, Token, ., FOR, :, case, Token, ., FUNCTION, :, case, Token, ., HOOK, :, case, Token, ., IF]
[., CASE, :, case, Token, ., FOR, :, case, Token, ., FUNCTION, :, case, Token, ., HOOK, :, case, Token]
[:, case, Token, ., FUNCTION, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., SWITCH]
[., FOR, :, case, Token, ., FUNCTION, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token]
[:, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., SWITCH, :, case, Token, ., WHILE]
[., FUNCTION, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., SWITCH, :, case, Token]
[:, case, Token, ., IF, :, case, Token, ., SWITCH, :, case, Token, ., WHILE, :, if, (, entering, )]
[., HOOK, :, case, Token, ., IF, :, case, Token, ., SWITCH, :, case, Token, ., WHILE, :, if, (]
[:, case, Token, ., SWITCH, :, case, Token, ., WHILE, :, if, (, entering, ), {, assignAllowed, ., push, (]
[., IF, :, case, Token, ., SWITCH, :, case, Token, ., WHILE, :, if, (, entering, ), {, assignAllowed, .]
[:, case, Token, ., WHILE, :, if, (, entering, ), {, assignAllowed, ., push, (, 0, ), ;, }, else]
[., SWITCH, :, case, Token, ., WHILE, :, if, (, entering, ), {, assignAllowed, ., push, (, 0, ), ;]
[:, if, (, entering, ), {, assignAllowed, ., push, (, 0, ), ;, }, else, {, assignAllowed, ., remove, (]
[., WHILE, :, if, (, entering, ), {, assignAllowed, ., push, (, 0, ), ;, }, else, {, assignAllowed, .]
[), {, assignAllowed, ., push, (, 0, ), ;, }, else, {, assignAllowed, ., remove, (, ), ;, }, break]
[;, }, else, {, assignAllowed, ., remove, (, ), ;, }, break, ;, }, }, private, boolean, isAssignAllowed, (, )]
[., push, (, 0, ), ;, }, else, {, assignAllowed, ., remove, (, ), ;, }, break, ;, }, }]
[), ;, }, else, {, assignAllowed, ., remove, (, ), ;, }, break, ;, }, }, private, boolean, isAssignAllowed, (]
[;, }, break, ;, }, }, private, boolean, isAssignAllowed, (, ), {, return, assignAllowed, ., element, (, ), ==, 1]
[., remove, (, ), ;, }, break, ;, }, }, private, boolean, isAssignAllowed, (, ), {, return, assignAllowed, ., element]
[;, }, private, boolean, processDefineAssignment, (, NodeTraversal, t, ,, String, name, ,, Node, value, ,, Node, valueParent, ), {, if]
[==, 1, ;, }, private, boolean, processDefineAssignment, (, NodeTraversal, t, ,, String, name, ,, Node, value, ,, Node, valueParent, )]
[., element, (, ), ==, 1, ;, }, private, boolean, processDefineAssignment, (, NodeTraversal, t, ,, String, name, ,, Node, value]
[;, }, private, boolean, processDefineAssignment, (, NodeTraversal, t, ,, String, name, ,, Node, value, ,, Node, valueParent, ), {, if]
[), {, compiler, ., report, (, t, ., makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else]
[||, !, NodeUtil, ., isValidDefineValue, (, value, ,, allDefines, ., keySet, (, ), ), ), {, compiler, ., report, (]
[==, null, ||, !, NodeUtil, ., isValidDefineValue, (, value, ,, allDefines, ., keySet, (, ), ), ), {, compiler, .]
[||, !, NodeUtil, ., isValidDefineValue, (, value, ,, allDefines, ., keySet, (, ), ), ), {, compiler, ., report, (]
[), {, compiler, ., report, (, t, ., makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else]
[), {, compiler, ., report, (, t, ., makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else]
[., isValidDefineValue, (, value, ,, allDefines, ., keySet, (, ), ), ), {, compiler, ., report, (, t, ., makeError]
[,, allDefines, ., keySet, (, ), ), ), {, compiler, ., report, (, t, ., makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR]
[), ), {, compiler, ., report, (, t, ., makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,, name, ), ), ;, }]
[., keySet, (, ), ), ), {, compiler, ., report, (, t, ., makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,, name]
[;, }, else, if, (, !, isAssignAllowed, (, ), ), {, compiler, ., report, (, t, ., makeError, (, valueParent]
[., report, (, t, ., makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, if, (, !]
[), ;, }, else, if, (, !, isAssignAllowed, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[., makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, if, (, !, isAssignAllowed, (, ), )]
[,, INVALID_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, if, (, !, isAssignAllowed, (, ), ), {, compiler, ., report]
[,, name, ), ), ;, }, else, if, (, !, isAssignAllowed, (, ), ), {, compiler, ., report, (, t]
[), ), ;, }, else, if, (, !, isAssignAllowed, (, ), ), {, compiler, ., report, (, t, ., makeError]
[), {, compiler, ., report, (, t, ., makeError, (, valueParent, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else]
[), {, compiler, ., report, (, t, ., makeError, (, valueParent, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else]
[;, }, else, {, DefineInfo, info, =, allDefines, ., get, (, name, ), ;, if, (, info, ==, null, )]
[., report, (, t, ., makeError, (, valueParent, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, {, DefineInfo, info]
[), ;, }, else, {, DefineInfo, info, =, allDefines, ., get, (, name, ), ;, if, (, info, ==, null]
[., makeError, (, valueParent, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, {, DefineInfo, info, =, allDefines, ., get]
[,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, name, ), ), ;, }, else, {, DefineInfo, info, =, allDefines, ., get, (, name, ), ;]
[,, name, ), ), ;, }, else, {, DefineInfo, info, =, allDefines, ., get, (, name, ), ;, if, (]
[), ), ;, }, else, {, DefineInfo, info, =, allDefines, ., get, (, name, ), ;, if, (, info, ==]
[;, if, (, info, ==, null, ), {, info, =, new, DefineInfo, (, value, ,, valueParent, ), ;, allDefines, .]
[., get, (, name, ), ;, if, (, info, ==, null, ), {, info, =, new, DefineInfo, (, value, ,]
[), ;, if, (, info, ==, null, ), {, info, =, new, DefineInfo, (, value, ,, valueParent, ), ;, allDefines]
[), {, info, =, new, DefineInfo, (, value, ,, valueParent, ), ;, allDefines, ., put, (, name, ,, info, )]
[==, null, ), {, info, =, new, DefineInfo, (, value, ,, valueParent, ), ;, allDefines, ., put, (, name, ,]
[), {, info, =, new, DefineInfo, (, value, ,, valueParent, ), ;, allDefines, ., put, (, name, ,, info, )]
[=, new, DefineInfo, (, value, ,, valueParent, ), ;, allDefines, ., put, (, name, ,, info, ), ;, assignableDefines, .]
[;, allDefines, ., put, (, name, ,, info, ), ;, assignableDefines, ., put, (, name, ,, info, ), ;, }]
[,, valueParent, ), ;, allDefines, ., put, (, name, ,, info, ), ;, assignableDefines, ., put, (, name, ,, info]
[), ;, allDefines, ., put, (, name, ,, info, ), ;, assignableDefines, ., put, (, name, ,, info, ), ;]
[;, assignableDefines, ., put, (, name, ,, info, ), ;, }, else, if, (, info, ., recordAssignment, (, value, )]
[., put, (, name, ,, info, ), ;, assignableDefines, ., put, (, name, ,, info, ), ;, }, else, if]
[,, info, ), ;, assignableDefines, ., put, (, name, ,, info, ), ;, }, else, if, (, info, ., recordAssignment]
[), ;, assignableDefines, ., put, (, name, ,, info, ), ;, }, else, if, (, info, ., recordAssignment, (, value]
[;, }, else, if, (, info, ., recordAssignment, (, value, ), ), {, return, true, ;, }, else, {, compiler]
[., put, (, name, ,, info, ), ;, }, else, if, (, info, ., recordAssignment, (, value, ), ), {]
[,, info, ), ;, }, else, if, (, info, ., recordAssignment, (, value, ), ), {, return, true, ;, }]
[), ;, }, else, if, (, info, ., recordAssignment, (, value, ), ), {, return, true, ;, }, else, {]
[), {, return, true, ;, }, else, {, compiler, ., report, (, t, ., makeError, (, valueParent, ,, DEFINE_NOT_ASSIGNABLE_ERROR, ,]
[., recordAssignment, (, value, ), ), {, return, true, ;, }, else, {, compiler, ., report, (, t, ., makeError]
[), ), {, return, true, ;, }, else, {, compiler, ., report, (, t, ., makeError, (, valueParent, ,, DEFINE_NOT_ASSIGNABLE_ERROR]
[;, }, else, {, compiler, ., report, (, t, ., makeError, (, valueParent, ,, DEFINE_NOT_ASSIGNABLE_ERROR, ,, name, ,, info, .]
[;, }, }, return, false, ;, }, private, static, Node, getValueParent, (, Ref, ref, ), {, return, ref, ., node]
[., report, (, t, ., makeError, (, valueParent, ,, DEFINE_NOT_ASSIGNABLE_ERROR, ,, name, ,, info, ., getReasonWhyNotAssignable, (, ), ), )]
[), ;, }, }, return, false, ;, }, private, static, Node, getValueParent, (, Ref, ref, ), {, return, ref, .]
[., makeError, (, valueParent, ,, DEFINE_NOT_ASSIGNABLE_ERROR, ,, name, ,, info, ., getReasonWhyNotAssignable, (, ), ), ), ;, }, }, return]
[,, DEFINE_NOT_ASSIGNABLE_ERROR, ,, name, ,, info, ., getReasonWhyNotAssignable, (, ), ), ), ;, }, }, return, false, ;, }, private]
[,, name, ,, info, ., getReasonWhyNotAssignable, (, ), ), ), ;, }, }, return, false, ;, }, private, static, Node]
[,, info, ., getReasonWhyNotAssignable, (, ), ), ), ;, }, }, return, false, ;, }, private, static, Node, getValueParent, (]
[), ), ;, }, }, return, false, ;, }, private, static, Node, getValueParent, (, Ref, ref, ), {, return, ref]
[., getReasonWhyNotAssignable, (, ), ), ), ;, }, }, return, false, ;, }, private, static, Node, getValueParent, (, Ref, ref]
[;, }, private, static, Node, getValueParent, (, Ref, ref, ), {, return, ref, ., node, ., getParent, (, ), !=]
[;, }, private, void, setDefineInfoNotAssignable, (, DefineInfo, info, ,, NodeTraversal, t, ), {, info, ., setNotAssignable, (, format, (, REASON_DEFINE_NOT_ASSIGNABLE]
[?, ref, ., node, :, ref, ., node, ., getParent, (, ), ;, }, private, void, setDefineInfoNotAssignable, (, DefineInfo, info]
[&&, ref, ., node, ., getParent, (, ), ., isVar, (, ), ?, ref, ., node, :, ref, ., node]
[!=, null, &&, ref, ., node, ., getParent, (, ), ., isVar, (, ), ?, ref, ., node, :, ref]
[., getParent, (, ), !=, null, &&, ref, ., node, ., getParent, (, ), ., isVar, (, ), ?, ref]
[., node, ., getParent, (, ), !=, null, &&, ref, ., node, ., getParent, (, ), ., isVar, (, )]
[&&, ref, ., node, ., getParent, (, ), ., isVar, (, ), ?, ref, ., node, :, ref, ., node]
[?, ref, ., node, :, ref, ., node, ., getParent, (, ), ;, }, private, void, setDefineInfoNotAssignable, (, DefineInfo, info]
[., isVar, (, ), ?, ref, ., node, :, ref, ., node, ., getParent, (, ), ;, }, private, void]
[., getParent, (, ), ., isVar, (, ), ?, ref, ., node, :, ref, ., node, ., getParent, (, )]
[., node, ., getParent, (, ), ., isVar, (, ), ?, ref, ., node, :, ref, ., node, ., getParent]
[:, ref, ., node, ., getParent, (, ), ;, }, private, void, setDefineInfoNotAssignable, (, DefineInfo, info, ,, NodeTraversal, t, )]
[., node, :, ref, ., node, ., getParent, (, ), ;, }, private, void, setDefineInfoNotAssignable, (, DefineInfo, info, ,, NodeTraversal]
[;, }, private, void, setDefineInfoNotAssignable, (, DefineInfo, info, ,, NodeTraversal, t, ), {, info, ., setNotAssignable, (, format, (, REASON_DEFINE_NOT_ASSIGNABLE]
[., getParent, (, ), ;, }, private, void, setDefineInfoNotAssignable, (, DefineInfo, info, ,, NodeTraversal, t, ), {, info, ., setNotAssignable]
[., node, ., getParent, (, ), ;, }, private, void, setDefineInfoNotAssignable, (, DefineInfo, info, ,, NodeTraversal, t, ), {, info]
[;, }, private, static, class, RefInfo, {, final, Ref, ref, ;, final, Name, name, ;, RefInfo, (, Ref, ref, ,]
[., setNotAssignable, (, format, (, REASON_DEFINE_NOT_ASSIGNABLE, ,, t, ., getLineNumber, (, ), ,, t, ., getSourceName, (, ), ), )]
[), ;, }, private, static, class, RefInfo, {, final, Ref, ref, ;, final, Name, name, ;, RefInfo, (, Ref, ref]
[,, t, ., getLineNumber, (, ), ,, t, ., getSourceName, (, ), ), ), ;, }, private, static, class, RefInfo]
[,, t, ., getSourceName, (, ), ), ), ;, }, private, static, class, RefInfo, {, final, Ref, ref, ;, final]
[., getLineNumber, (, ), ,, t, ., getSourceName, (, ), ), ), ;, }, private, static, class, RefInfo, {, final]
[), ), ;, }, private, static, class, RefInfo, {, final, Ref, ref, ;, final, Name, name, ;, RefInfo, (, Ref]
[., getSourceName, (, ), ), ), ;, }, private, static, class, RefInfo, {, final, Ref, ref, ;, final, Name, name]
[=, ref, ;, this, ., name, =, name, ;, }, }, }, private, static, final, class, DefineInfo, {, public, final]
[., ref, =, ref, ;, this, ., name, =, name, ;, }, }, }, private, static, final, class, DefineInfo, {]
[;, this, ., name, =, name, ;, }, }, }, private, static, final, class, DefineInfo, {, public, final, Node, initialValueParent]
[=, name, ;, }, }, }, private, static, final, class, DefineInfo, {, public, final, Node, initialValueParent, ;, public, final, Node]
[., name, =, name, ;, }, }, }, private, static, final, class, DefineInfo, {, public, final, Node, initialValueParent, ;, public]
[;, }, }, }, private, static, final, class, DefineInfo, {, public, final, Node, initialValueParent, ;, public, final, Node, initialValue, ;]
[=, initialValueParent, ;, this, ., initialValue, =, initialValue, ;, lastValue, =, initialValue, ;, isAssignable, =, true, ;, }, public, void]
[., initialValueParent, =, initialValueParent, ;, this, ., initialValue, =, initialValue, ;, lastValue, =, initialValue, ;, isAssignable, =, true, ;, }]
[;, this, ., initialValue, =, initialValue, ;, lastValue, =, initialValue, ;, isAssignable, =, true, ;, }, public, void, setNotAssignable, (]
[=, initialValue, ;, lastValue, =, initialValue, ;, isAssignable, =, true, ;, }, public, void, setNotAssignable, (, String, reason, ), {]
[., initialValue, =, initialValue, ;, lastValue, =, initialValue, ;, isAssignable, =, true, ;, }, public, void, setNotAssignable, (, String, reason]
[;, lastValue, =, initialValue, ;, isAssignable, =, true, ;, }, public, void, setNotAssignable, (, String, reason, ), {, isAssignable, =]
[=, initialValue, ;, isAssignable, =, true, ;, }, public, void, setNotAssignable, (, String, reason, ), {, isAssignable, =, false, ;]
[;, isAssignable, =, true, ;, }, public, void, setNotAssignable, (, String, reason, ), {, isAssignable, =, false, ;, reasonNotAssignable, =]
[=, true, ;, }, public, void, setNotAssignable, (, String, reason, ), {, isAssignable, =, false, ;, reasonNotAssignable, =, reason, ;]
[;, }, public, void, setNotAssignable, (, String, reason, ), {, isAssignable, =, false, ;, reasonNotAssignable, =, reason, ;, }, public]
[=, false, ;, reasonNotAssignable, =, reason, ;, }, public, String, getReasonWhyNotAssignable, (, ), {, return, reasonNotAssignable, ;, }, public, boolean]
[;, reasonNotAssignable, =, reason, ;, }, public, String, getReasonWhyNotAssignable, (, ), {, return, reasonNotAssignable, ;, }, public, boolean, recordAssignment, (]
[=, reason, ;, }, public, String, getReasonWhyNotAssignable, (, ), {, return, reasonNotAssignable, ;, }, public, boolean, recordAssignment, (, Node, value]
[;, }, public, String, getReasonWhyNotAssignable, (, ), {, return, reasonNotAssignable, ;, }, public, boolean, recordAssignment, (, Node, value, ), {]
[;, }, public, boolean, recordAssignment, (, Node, value, ), {, lastValue, =, value, ;, return, isAssignable, ;, }, public, Node]
[=, value, ;, return, isAssignable, ;, }, public, Node, getLastValue, (, ), {, return, lastValue, ;, }, }, }]
[;, return, isAssignable, ;, }, public, Node, getLastValue, (, ), {, return, lastValue, ;, }, }, }]
[;, }, public, Node, getLastValue, (, ), {, return, lastValue, ;, }, }, }]
[;, }, }, }]
