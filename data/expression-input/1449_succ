[;, private, final, int, numberOfSuccesses, ;, private, final, double, probabilityOfSuccess, ;, public, PascalDistribution, (, int, r, ,, double, p, )]
[,, r, ,, p, ), ;, }, public, PascalDistribution, (, RandomGenerator, rng, ,, int, r, ,, double, p, ), throws]
[,, p, ), ;, }, public, PascalDistribution, (, RandomGenerator, rng, ,, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,]
[), ;, }, public, PascalDistribution, (, RandomGenerator, rng, ,, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {]
[), ;, if, (, r, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, r, ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, r, ), ;, }, if, (, p, <, 0, ||]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, r, ), ;, }, if, (, p, <]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, r, ), ;, }, if, (, p, <, 0, ||]
[;, }, if, (, p, <, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0]
[,, r, ), ;, }, if, (, p, <, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (]
[., NUMBER_OF_SUCCESSES, ,, r, ), ;, }, if, (, p, <, 0, ||, p, >, 1, ), {, throw, new]
[), ;, }, if, (, p, <, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, numberOfSuccesses, =, r, ;, probabilityOfSuccess, =]
[||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, numberOfSuccesses, =]
[<, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }]
[||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, numberOfSuccesses, =]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, numberOfSuccesses, =, r, ;, probabilityOfSuccess, =]
[>, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, numberOfSuccesses, =, r, ;]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, numberOfSuccesses, =, r, ;, probabilityOfSuccess, =]
[;, }, numberOfSuccesses, =, r, ;, probabilityOfSuccess, =, p, ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;]
[,, 0, ,, 1, ), ;, }, numberOfSuccesses, =, r, ;, probabilityOfSuccess, =, p, ;, }, public, int, getNumberOfSuccesses, (]
[,, 1, ), ;, }, numberOfSuccesses, =, r, ;, probabilityOfSuccess, =, p, ;, }, public, int, getNumberOfSuccesses, (, ), {]
[), ;, }, numberOfSuccesses, =, r, ;, probabilityOfSuccess, =, p, ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses]
[=, r, ;, probabilityOfSuccess, =, p, ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;, }, public, double]
[;, probabilityOfSuccess, =, p, ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;, }, public, double, getProbabilityOfSuccess, (]
[=, p, ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;, }, public, double, getProbabilityOfSuccess, (, ), {]
[;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;, }, public, double, getProbabilityOfSuccess, (, ), {, return, probabilityOfSuccess]
[;, }, public, double, getProbabilityOfSuccess, (, ), {, return, probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {]
[;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {]
[), {, ret, =, 0.0, ;, }, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -, 1]
[<, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +, numberOfSuccesses]
[), {, ret, =, 0.0, ;, }, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -, 1]
[=, 0.0, ;, }, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -, 1, ,, numberOfSuccesses, -]
[;, }, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -, 1, ,, numberOfSuccesses, -, 1, )]
[=, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -, 1, ,, numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (]
[;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x]
[*, FastMath, ., pow, (, 1.0, -, probabilityOfSuccess, ,, x, ), ;, }, return, ret, ;, }, public, double, cumulativeProbability]
[*, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow, (, 1.0, -, probabilityOfSuccess, ,, x, )]
[., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -, 1, ,, numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,]
[,, numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow, (, 1.0]
[-, 1, ,, numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow]
[+, numberOfSuccesses, -, 1, ,, numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath]
[-, 1, ,, numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow]
[,, numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow, (, 1.0]
[), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow, (, 1.0, -, probabilityOfSuccess, ,, x]
[-, 1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow, (, 1.0, -, probabilityOfSuccess]
[), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow, (, 1.0, -, probabilityOfSuccess, ,, x]
[*, FastMath, ., pow, (, 1.0, -, probabilityOfSuccess, ,, x, ), ;, }, return, ret, ;, }, public, double, cumulativeProbability]
[., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow, (, 1.0, -, probabilityOfSuccess, ,, x, ), ;, }]
[,, numberOfSuccesses, ), *, FastMath, ., pow, (, 1.0, -, probabilityOfSuccess, ,, x, ), ;, }, return, ret, ;, }]
[), *, FastMath, ., pow, (, 1.0, -, probabilityOfSuccess, ,, x, ), ;, }, return, ret, ;, }, public, double]
[;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x]
[., pow, (, 1.0, -, probabilityOfSuccess, ,, x, ), ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int]
[,, x, ), ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;]
[-, probabilityOfSuccess, ,, x, ), ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double]
[,, x, ), ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;]
[), ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (]
[;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {]
[), {, ret, =, 0.0, ;, }, else, {, ret, =, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, numberOfSuccesses, ,, x]
[<, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, numberOfSuccesses]
[), {, ret, =, 0.0, ;, }, else, {, ret, =, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, numberOfSuccesses, ,, x]
[=, 0.0, ;, }, else, {, ret, =, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, numberOfSuccesses, ,, x, +, 1.0, )]
[;, }, else, {, ret, =, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, numberOfSuccesses, ,, x, +, 1.0, ), ;, }]
[=, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, numberOfSuccesses, ,, x, +, 1.0, ), ;, }, return, ret, ;, }, public]
[;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;]
[., regularizedBeta, (, probabilityOfSuccess, ,, numberOfSuccesses, ,, x, +, 1.0, ), ;, }, return, ret, ;, }, public, double, getNumericalMean]
[,, numberOfSuccesses, ,, x, +, 1.0, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final]
[,, x, +, 1.0, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p]
[), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, getProbabilityOfSuccess, (, )]
[+, 1.0, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, getProbabilityOfSuccess]
[), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, getProbabilityOfSuccess, (, )]
[;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =]
[;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, (, r, *, (, 1, -, p, ), ), /]
[;, return, (, r, *, (, 1, -, p, ), ), /, p, ;, }, public, double, getNumericalVariance, (, )]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =]
[/, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double]
[), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final]
[*, (, 1, -, p, ), ), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p]
[), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final]
[), ), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;]
[-, p, ), ), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, getProbabilityOfSuccess, (]
[), ), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =]
[;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, r, *, (, 1, -, p, ), /, (, p]
[;, return, r, *, (, 1, -, p, ), /, (, p, *, p, ), ;, }, public, int, getSupportLowerBound]
[;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, ), {, return, Integer]
[/, (, p, *, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int]
[*, (, 1, -, p, ), /, (, p, *, p, ), ;, }, public, int, getSupportLowerBound, (, ), {]
[/, (, p, *, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int]
[), /, (, p, *, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public]
[-, p, ), /, (, p, *, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;]
[), /, (, p, *, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public]
[;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, ), {, return, Integer]
[), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, ), {, return]
[*, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, )]
[), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, ), {, return]
[;, }, public, int, getSupportUpperBound, (, ), {, return, Integer, ., MAX_VALUE, ;, }, public, boolean, isSupportConnected, (, ), {]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[., MAX_VALUE, ;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[;, }, }]
