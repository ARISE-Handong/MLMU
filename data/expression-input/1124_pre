[., util, ., Pair, ;, public, class, EnumeratedDistribution, <, T, >, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[Pair, <, T, ,, Double, >, >, pmf, ), throws, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, this, (]
[>, >, pmf, ), throws, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, this, (, new, Well19937c, (, ), ,]
[List, <, Pair, <, T, ,, Double, >, >, pmf, ), throws, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {]
[Pair, <, T, ,, Double, >, >, pmf, ), throws, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, random, =]
[T, ,, Double, >, >, pmf, ), throws, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, random, =, rng, ;]
[Double, >, >, pmf, ), throws, NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, random, =, rng, ;, singletons, =]
[NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, random, =, rng, ;, singletons, =, new, ArrayList, <, T, >, (]
[NotPositiveException, ,, MathArithmeticException, ,, NotFiniteNumberException, ,, NotANumberException, {, random, =, rng, ;, singletons, =, new, ArrayList, <, T, >, (]
[=, new, ArrayList, <, T, >, (, pmf, ., size, (, ), ), ;, final, double, [, ], probs, =]
[<, T, >, (, pmf, ., size, (, ), ), ;, final, double, [, ], probs, =, new, double, []
[<, T, >, (, pmf, ., size, (, ), ), ;, final, double, [, ], probs, =, new, double, []
[double, [, ], probs, =, new, double, [, pmf, ., size, (, ), ], ;, for, (, int, i, =]
[], probs, =, new, double, [, pmf, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[], probs, =, new, double, [, pmf, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[=, new, double, [, pmf, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, double, [, pmf, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, pmf, ., size, (, ), ;]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, pmf, ., size, (, ), ;]
[<, pmf, ., size, (, ), ;, i, ++, ), {, final, Pair, <, T, ,, Double, >, sample, =]
[<, pmf, ., size, (, ), ;, i, ++, ), {, final, Pair, <, T, ,, Double, >, sample, =]
[(, ), ;, i, ++, ), {, final, Pair, <, T, ,, Double, >, sample, =, pmf, ., get, (]
[i, ++, ), {, final, Pair, <, T, ,, Double, >, sample, =, pmf, ., get, (, i, ), ;]
[i, ++, ), {, final, Pair, <, T, ,, Double, >, sample, =, pmf, ., get, (, i, ), ;]
[final, Pair, <, T, ,, Double, >, sample, =, pmf, ., get, (, i, ), ;, singletons, ., add, (]
[final, Pair, <, T, ,, Double, >, sample, =, pmf, ., get, (, i, ), ;, singletons, ., add, (]
[get, (, i, ), ;, singletons, ., add, (, sample, ., getKey, (, ), ), ;, final, double, p, =]
[get, (, i, ), ;, singletons, ., add, (, sample, ., getKey, (, ), ), ;, final, double, p, =]
[(, sample, ., getKey, (, ), ), ;, final, double, p, =, sample, ., getValue, (, ), ;, if, (]
[(, sample, ., getKey, (, ), ), ;, final, double, p, =, sample, ., getValue, (, ), ;, if, (]
[., getKey, (, ), ), ;, final, double, p, =, sample, ., getValue, (, ), ;, if, (, p, <]
[), ;, final, double, p, =, sample, ., getValue, (, ), ;, if, (, p, <, 0, ), {, throw]
[double, p, =, sample, ., getValue, (, ), ;, if, (, p, <, 0, ), {, throw, new, NotPositiveException, (]
[double, p, =, sample, ., getValue, (, ), ;, if, (, p, <, 0, ), {, throw, new, NotPositiveException, (]
[(, p, <, 0, ), {, throw, new, NotPositiveException, (, sample, ., getValue, (, ), ), ;, }, if, (]
[(, p, <, 0, ), {, throw, new, NotPositiveException, (, sample, ., getValue, (, ), ), ;, }, if, (]
[), {, throw, new, NotPositiveException, (, sample, ., getValue, (, ), ), ;, }, if, (, Double, ., isInfinite, (]
[(, sample, ., getValue, (, ), ), ;, }, if, (, Double, ., isInfinite, (, p, ), ), {, throw]
[getValue, (, ), ), ;, }, if, (, Double, ., isInfinite, (, p, ), ), {, throw, new, NotFiniteNumberException, (]
[if, (, Double, ., isInfinite, (, p, ), ), {, throw, new, NotFiniteNumberException, (, p, ), ;, }, if, (]
[if, (, Double, ., isInfinite, (, p, ), ), {, throw, new, NotFiniteNumberException, (, p, ), ;, }, if, (]
[isInfinite, (, p, ), ), {, throw, new, NotFiniteNumberException, (, p, ), ;, }, if, (, Double, ., isNaN, (]
[{, throw, new, NotFiniteNumberException, (, p, ), ;, }, if, (, Double, ., isNaN, (, p, ), ), {, throw]
[), ;, }, if, (, Double, ., isNaN, (, p, ), ), {, throw, new, NotANumberException, (, ), ;, }]
[), ;, }, if, (, Double, ., isNaN, (, p, ), ), {, throw, new, NotANumberException, (, ), ;, }]
[}, if, (, Double, ., isNaN, (, p, ), ), {, throw, new, NotANumberException, (, ), ;, }, probs, []
[Double, ., isNaN, (, p, ), ), {, throw, new, NotANumberException, (, ), ;, }, probs, [, i, ], =]
[(, p, ), ), {, throw, new, NotANumberException, (, ), ;, }, probs, [, i, ], =, p, ;, }]
[), ), {, throw, new, NotANumberException, (, ), ;, }, probs, [, i, ], =, p, ;, }, probabilities, =]
[), ), {, throw, new, NotANumberException, (, ), ;, }, probs, [, i, ], =, p, ;, }, probabilities, =]
[new, NotANumberException, (, ), ;, }, probs, [, i, ], =, p, ;, }, probabilities, =, MathArrays, ., normalizeArray, (]
[(, ), ;, }, probs, [, i, ], =, p, ;, }, probabilities, =, MathArrays, ., normalizeArray, (, probs, ,]
[probabilities, =, MathArrays, ., normalizeArray, (, probs, ,, 1.0, ), ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {]
[probabilities, =, MathArrays, ., normalizeArray, (, probs, ,, 1.0, ), ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {]
[normalizeArray, (, probs, ,, 1.0, ), ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (]
[{, random, ., setSeed, (, seed, ), ;, }, double, probability, (, final, T, x, ), {, double, probability, =]
[;, }, double, probability, (, final, T, x, ), {, double, probability, =, 0, ;, for, (, int, i, =]
[double, probability, (, final, T, x, ), {, double, probability, =, 0, ;, for, (, int, i, =, 0, ;]
[double, probability, (, final, T, x, ), {, double, probability, =, 0, ;, for, (, int, i, =, 0, ;]
[(, final, T, x, ), {, double, probability, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[(, final, T, x, ), {, double, probability, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), {, double, probability, =, 0, ;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;]
[), {, double, probability, =, 0, ;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, if, (]
[for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, if, (, (]
[for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, if, (, (]
[for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, if, (, (]
[int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, if, (, (, x, ==]
[=, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, if, (, (, x, ==, null, &&]
[=, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, if, (, (, x, ==, null, &&]
[=, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, if, (, (, x, ==, null, &&]
[<, probabilities, ., length, ;, i, ++, ), {, if, (, (, x, ==, null, &&, singletons, ., get, (]
[length, ;, i, ++, ), {, if, (, (, x, ==, null, &&, singletons, ., get, (, i, ), ==]
[++, ), {, if, (, (, x, ==, null, &&, singletons, ., get, (, i, ), ==, null, ), ||]
[), {, if, (, (, x, ==, null, &&, singletons, ., get, (, i, ), ==, null, ), ||, (]
[), {, if, (, (, x, ==, null, &&, singletons, ., get, (, i, ), ==, null, ), ||, (]
[), {, if, (, (, x, ==, null, &&, singletons, ., get, (, i, ), ==, null, ), ||, (]
[if, (, (, x, ==, null, &&, singletons, ., get, (, i, ), ==, null, ), ||, (, x, !=]
[(, x, ==, null, &&, singletons, ., get, (, i, ), ==, null, ), ||, (, x, !=, null, &&]
[(, x, ==, null, &&, singletons, ., get, (, i, ), ==, null, ), ||, (, x, !=, null, &&]
[&&, singletons, ., get, (, i, ), ==, null, ), ||, (, x, !=, null, &&, x, ., equals, (]
[&&, singletons, ., get, (, i, ), ==, null, ), ||, (, x, !=, null, &&, x, ., equals, (]
[(, i, ), ==, null, ), ||, (, x, !=, null, &&, x, ., equals, (, singletons, ., get, (]
[||, (, x, !=, null, &&, x, ., equals, (, singletons, ., get, (, i, ), ), ), ), {]
[x, !=, null, &&, x, ., equals, (, singletons, ., get, (, i, ), ), ), ), {, probability, +=]
[x, !=, null, &&, x, ., equals, (, singletons, ., get, (, i, ), ), ), ), {, probability, +=]
[null, &&, x, ., equals, (, singletons, ., get, (, i, ), ), ), ), {, probability, +=, probabilities, []
[singletons, ., get, (, i, ), ), ), ), {, probability, +=, probabilities, [, i, ], ;, }, }, return]
[,, Double, >, >, getPmf, (, ), {, final, List, <, Pair, <, T, ,, Double, >, >, samples, =]
[Pair, <, T, ,, Double, >, >, samples, =, new, ArrayList, <, Pair, <, T, ,, Double, >, >, (]
[Pair, <, T, ,, Double, >, >, samples, =, new, ArrayList, <, Pair, <, T, ,, Double, >, >, (]
[ArrayList, <, Pair, <, T, ,, Double, >, >, (, probabilities, ., length, ), ;, for, (, int, i, =]
[Pair, <, T, ,, Double, >, >, (, probabilities, ., length, ), ;, for, (, int, i, =, 0, ;]
[Pair, <, T, ,, Double, >, >, (, probabilities, ., length, ), ;, for, (, int, i, =, 0, ;]
[T, ,, Double, >, >, (, probabilities, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[T, ,, Double, >, >, (, probabilities, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[>, (, probabilities, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;]
[>, (, probabilities, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;]
[length, ), ;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {]
[length, ), ;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, samples, ., add, (]
[probabilities, ., length, ;, i, ++, ), {, samples, ., add, (, new, Pair, <, T, ,, Double, >, (]
[probabilities, ., length, ;, i, ++, ), {, samples, ., add, (, new, Pair, <, T, ,, Double, >, (]
[i, ++, ), {, samples, ., add, (, new, Pair, <, T, ,, Double, >, (, singletons, ., get, (]
[{, samples, ., add, (, new, Pair, <, T, ,, Double, >, (, singletons, ., get, (, i, ), ,]
[{, samples, ., add, (, new, Pair, <, T, ,, Double, >, (, singletons, ., get, (, i, ), ,]
[., add, (, new, Pair, <, T, ,, Double, >, (, singletons, ., get, (, i, ), ,, probabilities, []
[,, Double, >, (, singletons, ., get, (, i, ), ,, probabilities, [, i, ], ), ), ;, }, return]
[i, ], ), ), ;, }, return, samples, ;, }, public, T, sample, (, ), {, final, double, randomValue, =]
[i, ], ), ), ;, }, return, samples, ;, }, public, T, sample, (, ), {, final, double, randomValue, =]
[}, public, T, sample, (, ), {, final, double, randomValue, =, random, ., nextDouble, (, ), ;, double, sum, =]
[final, double, randomValue, =, random, ., nextDouble, (, ), ;, double, sum, =, 0, ;, for, (, int, i, =]
[randomValue, =, random, ., nextDouble, (, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[randomValue, =, random, ., nextDouble, (, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[random, ., nextDouble, (, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[random, ., nextDouble, (, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;]
[), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, sum, +=]
[(, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, sum, +=, probabilities, []
[;, i, <, probabilities, ., length, ;, i, ++, ), {, sum, +=, probabilities, [, i, ], ;, if, (]
[;, i, <, probabilities, ., length, ;, i, ++, ), {, sum, +=, probabilities, [, i, ], ;, if, (]
[<, probabilities, ., length, ;, i, ++, ), {, sum, +=, probabilities, [, i, ], ;, if, (, randomValue, <]
[;, i, ++, ), {, sum, +=, probabilities, [, i, ], ;, if, (, randomValue, <, sum, ), {, return]
[;, i, ++, ), {, sum, +=, probabilities, [, i, ], ;, if, (, randomValue, <, sum, ), {, return]
[{, sum, +=, probabilities, [, i, ], ;, if, (, randomValue, <, sum, ), {, return, singletons, ., get, (]
[], ;, if, (, randomValue, <, sum, ), {, return, singletons, ., get, (, i, ), ;, }, }, return]
[], ;, if, (, randomValue, <, sum, ), {, return, singletons, ., get, (, i, ), ;, }, }, return]
[randomValue, <, sum, ), {, return, singletons, ., get, (, i, ), ;, }, }, return, singletons, ., get, (]
[randomValue, <, sum, ), {, return, singletons, ., get, (, i, ), ;, }, }, return, singletons, ., get, (]
[randomValue, <, sum, ), {, return, singletons, ., get, (, i, ), ;, }, }, return, singletons, ., get, (]
[singletons, ., get, (, i, ), ;, }, }, return, singletons, ., get, (, singletons, ., size, (, ), -]
[), -, 1, ), ;, }, public, Object, [, ], sample, (, int, sampleSize, ), throws, NotStrictlyPositiveException, {, if, (]
[), -, 1, ), ;, }, public, Object, [, ], sample, (, int, sampleSize, ), throws, NotStrictlyPositiveException, {, if, (]
[1, ), ;, }, public, Object, [, ], sample, (, int, sampleSize, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize, <=]
[public, Object, [, ], sample, (, int, sampleSize, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize, <=, 0, ), {, throw]
[], sample, (, int, sampleSize, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[], sample, (, int, sampleSize, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[sampleSize, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, final, Object, [, ], out, =]
[new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, final, Object, [, ], out, =, new, Object, []
[), ;, }, final, Object, [, ], out, =, new, Object, [, sampleSize, ], ;, for, (, int, i, =]
[}, final, Object, [, ], out, =, new, Object, [, sampleSize, ], ;, for, (, int, i, =, 0, ;]
[}, final, Object, [, ], out, =, new, Object, [, sampleSize, ], ;, for, (, int, i, =, 0, ;]
[Object, [, ], out, =, new, Object, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <]
[], out, =, new, Object, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;]
[], out, =, new, Object, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;]
[Object, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {]
[Object, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {]
[sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, []
[for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =]
[;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return]
[public, T, [, ], sample, (, int, sampleSize, ,, final, T, [, ], array, ), throws, NotStrictlyPositiveException, {, if, (]
[public, T, [, ], sample, (, int, sampleSize, ,, final, T, [, ], array, ), throws, NotStrictlyPositiveException, {, if, (]
[[, ], sample, (, int, sampleSize, ,, final, T, [, ], array, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize, <=]
[int, sampleSize, ,, final, T, [, ], array, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize, <=, 0, ), {, throw]
[final, T, [, ], array, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[final, T, [, ], array, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[array, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,]
[(, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (]
[(, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, array, ==]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, array, ==, null, ), {, throw]
[(, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, array, ==, null, ), {, throw, new, NullArgumentException, (]
[(, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, array, ==, null, ), {, throw, new, NullArgumentException, (]
[null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, T, [, ], out, ;, if, (]
[null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, T, [, ], out, ;, if, (]
[null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, T, [, ], out, ;, if, (]
[new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, T, [, ], out, ;, if, (, array, ., length, <]
[LocalizedFormats, ., INPUT_ARRAY, ), ;, }, T, [, ], out, ;, if, (, array, ., length, <, sampleSize, ), {]
[), ;, }, T, [, ], out, ;, if, (, array, ., length, <, sampleSize, ), {, @, SuppressWarnings, (]
[if, (, array, ., length, <, sampleSize, ), {, @, SuppressWarnings, (, "unchecked", ), final, T, [, ], unchecked, =]
[<, sampleSize, ), {, @, SuppressWarnings, (, "unchecked", ), final, T, [, ], unchecked, =, (, T, [, ], )]
[<, sampleSize, ), {, @, SuppressWarnings, (, "unchecked", ), final, T, [, ], unchecked, =, (, T, [, ], )]
[@, SuppressWarnings, (, "unchecked", ), final, T, [, ], unchecked, =, (, T, [, ], ), Array, ., newInstance, (]
[@, SuppressWarnings, (, "unchecked", ), final, T, [, ], unchecked, =, (, T, [, ], ), Array, ., newInstance, (]
[@, SuppressWarnings, (, "unchecked", ), final, T, [, ], unchecked, =, (, T, [, ], ), Array, ., newInstance, (]
[=, (, T, [, ], ), Array, ., newInstance, (, array, ., getClass, (, ), ., getComponentType, (, ), ,]
[[, ], ), Array, ., newInstance, (, array, ., getClass, (, ), ., getComponentType, (, ), ,, sampleSize, ), ;]
[), Array, ., newInstance, (, array, ., getClass, (, ), ., getComponentType, (, ), ,, sampleSize, ), ;, out, =]
[array, ., getClass, (, ), ., getComponentType, (, ), ,, sampleSize, ), ;, out, =, unchecked, ;, }, else, {]
[getClass, (, ), ., getComponentType, (, ), ,, sampleSize, ), ;, out, =, unchecked, ;, }, else, {, out, =]
[sampleSize, ), ;, out, =, unchecked, ;, }, else, {, out, =, array, ;, }, for, (, int, i, =]
[;, out, =, unchecked, ;, }, else, {, out, =, array, ;, }, for, (, int, i, =, 0, ;]
[;, out, =, unchecked, ;, }, else, {, out, =, array, ;, }, for, (, int, i, =, 0, ;]
[=, unchecked, ;, }, else, {, out, =, array, ;, }, for, (, int, i, =, 0, ;, i, <]
[;, }, else, {, out, =, array, ;, }, for, (, int, i, =, 0, ;, i, <, sampleSize, ;]
[;, }, else, {, out, =, array, ;, }, for, (, int, i, =, 0, ;, i, <, sampleSize, ;]
[out, =, array, ;, }, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {]
[out, =, array, ;, }, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {]
[array, ;, }, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, []
[for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =]
[;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return]
