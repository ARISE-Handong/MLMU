[commons, ., math3, ., random, ., Well19937c, ;, public, class, GeometricDistribution, extends, AbstractIntegerDistribution, {, private, static, final, long, serialVersionUID, =]
[final, long, serialVersionUID, =, 20130507L, ;, private, final, double, probabilityOfSuccess, ;, public, GeometricDistribution, (, double, p, ), {, this, (]
[;, private, final, double, probabilityOfSuccess, ;, public, GeometricDistribution, (, double, p, ), {, this, (, new, Well19937c, (, ), ,]
[Well19937c, (, ), ,, p, ), ;, }, public, GeometricDistribution, (, RandomGenerator, rng, ,, double, p, ), {, super, (]
[), ;, }, public, GeometricDistribution, (, RandomGenerator, rng, ,, double, p, ), {, super, (, rng, ), ;, if, (]
[), ;, }, public, GeometricDistribution, (, RandomGenerator, rng, ,, double, p, ), {, super, (, rng, ), ;, if, (]
[), ;, }, public, GeometricDistribution, (, RandomGenerator, rng, ,, double, p, ), {, super, (, rng, ), ;, if, (]
[}, public, GeometricDistribution, (, RandomGenerator, rng, ,, double, p, ), {, super, (, rng, ), ;, if, (, p, <=]
[GeometricDistribution, (, RandomGenerator, rng, ,, double, p, ), {, super, (, rng, ), ;, if, (, p, <=, 0, ||]
[GeometricDistribution, (, RandomGenerator, rng, ,, double, p, ), {, super, (, rng, ), ;, if, (, p, <=, 0, ||]
[RandomGenerator, rng, ,, double, p, ), {, super, (, rng, ), ;, if, (, p, <=, 0, ||, p, >]
[p, ), {, super, (, rng, ), ;, if, (, p, <=, 0, ||, p, >, 1, ), {, throw]
[super, (, rng, ), ;, if, (, p, <=, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (]
[super, (, rng, ), ;, if, (, p, <=, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (]
[;, if, (, p, <=, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,]
[(, p, <=, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, p, ,]
[<=, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, p, ,, 0, ,]
[>, 1, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, p, ,, 0, ,, 1, ), ;, }]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, p, ,, 0, ,, 1, ), ;, }, probabilityOfSuccess, =]
[p, ,, 0, ,, 1, ), ;, }, probabilityOfSuccess, =, p, ;, }, public, double, getProbabilityOfSuccess, (, ), {, return]
[(, ), {, return, probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (]
[(, ), {, return, probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (]
[{, return, probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (, x, <]
[;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {]
[public, double, probability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {, ret, =]
[ret, ;, if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, final, double, p, =]
[if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;]
[x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =]
[x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =]
[x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =]
[{, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, FastMath, ., pow, (]
[{, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, FastMath, ., pow, (]
[=, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, FastMath, ., pow, (, 1, -]
[;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, FastMath, ., pow, (, 1, -, p, ,]
[{, final, double, p, =, probabilityOfSuccess, ;, ret, =, FastMath, ., pow, (, 1, -, p, ,, x, ), *]
[=, probabilityOfSuccess, ;, ret, =, FastMath, ., pow, (, 1, -, p, ,, x, ), *, p, ;, }, return]
[p, ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (]
[p, ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (]
[}, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x, <]
[;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {]
[public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {, ret, =]
[ret, ;, if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, final, double, p, =]
[if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;]
[x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =]
[x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =]
[0, ), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, 1.0, -]
[0, ), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, 1.0, -]
[=, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, 1.0, -, FastMath, ., pow, (]
[=, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, 1.0, -, FastMath, ., pow, (]
[;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, 1.0, -, FastMath, ., pow, (, 1, -]
[else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, 1.0, -, FastMath, ., pow, (, 1, -, p, ,]
[else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, 1.0, -, FastMath, ., pow, (, 1, -, p, ,]
[final, double, p, =, probabilityOfSuccess, ;, ret, =, 1.0, -, FastMath, ., pow, (, 1, -, p, ,, x, +]
[;, ret, =, 1.0, -, FastMath, ., pow, (, 1, -, p, ,, x, +, 1, ), ;, }, return]
[x, +, 1, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =]
[), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return]
[), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return]
[;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (]
[;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (]
[return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (, 1, -]
[}, public, double, getNumericalMean, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (, 1, -, p, ), /]
[return, (, 1, -, p, ), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =]
[-, p, ), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return]
[-, p, ), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return]
[p, ), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (]
[p, ), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (]
[/, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (, 1, -]
[}, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (, 1, -, p, ), /]
[public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (, 1, -, p, ), /, (]
[public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (, 1, -, p, ), /, (]
[getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (, 1, -, p, ), /, (, p, *]
[(, 1, -, p, ), /, (, p, *, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return]
[), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, ), {, return]
[), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, ), {, return]
[}, public, int, getSupportUpperBound, (, ), {, return, Integer, ., MAX_VALUE, ;, }, public, boolean, isSupportConnected, (, ), {, return]
