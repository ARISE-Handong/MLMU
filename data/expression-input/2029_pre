[;, import, org, ., jfree, ., data, ., Range, ;, public, class, LogAxis, extends, ValueAxis, {, private, double, base, =]
[data, ., Range, ;, public, class, LogAxis, extends, ValueAxis, {, private, double, base, =, 10.0, ;, private, double, baseLog, =]
[data, ., Range, ;, public, class, LogAxis, extends, ValueAxis, {, private, double, base, =, 10.0, ;, private, double, baseLog, =]
[public, class, LogAxis, extends, ValueAxis, {, private, double, base, =, 10.0, ;, private, double, baseLog, =, Math, ., log, (]
[double, base, =, 10.0, ;, private, double, baseLog, =, Math, ., log, (, 10.0, ), ;, private, double, smallestValue, =]
[double, smallestValue, =, 1E-100, ;, private, NumberTickUnit, tickUnit, ;, private, NumberFormat, numberFormatOverride, ;, public, LogAxis, (, ), {, this, (]
[public, LogAxis, (, ), {, this, (, null, ), ;, }, public, LogAxis, (, String, label, ), {, super, (]
[(, ), {, this, (, null, ), ;, }, public, LogAxis, (, String, label, ), {, super, (, label, ,]
[{, this, (, null, ), ;, }, public, LogAxis, (, String, label, ), {, super, (, label, ,, createLogTickUnits, (]
[{, this, (, null, ), ;, }, public, LogAxis, (, String, label, ), {, super, (, label, ,, createLogTickUnits, (]
[LogAxis, (, String, label, ), {, super, (, label, ,, createLogTickUnits, (, Locale, ., getDefault, (, ), ), ), ;]
[String, label, ), {, super, (, label, ,, createLogTickUnits, (, Locale, ., getDefault, (, ), ), ), ;, setDefaultAutoRange, (]
[{, super, (, label, ,, createLogTickUnits, (, Locale, ., getDefault, (, ), ), ), ;, setDefaultAutoRange, (, new, Range, (]
[(, label, ,, createLogTickUnits, (, Locale, ., getDefault, (, ), ), ), ;, setDefaultAutoRange, (, new, Range, (, 0.01, ,]
[(, Locale, ., getDefault, (, ), ), ), ;, setDefaultAutoRange, (, new, Range, (, 0.01, ,, 1.0, ), ), ;]
[(, Locale, ., getDefault, (, ), ), ), ;, setDefaultAutoRange, (, new, Range, (, 0.01, ,, 1.0, ), ), ;]
[(, ), ), ), ;, setDefaultAutoRange, (, new, Range, (, 0.01, ,, 1.0, ), ), ;, this, ., tickUnit, =]
[), ;, setDefaultAutoRange, (, new, Range, (, 0.01, ,, 1.0, ), ), ;, this, ., tickUnit, =, new, NumberTickUnit, (]
[setDefaultAutoRange, (, new, Range, (, 0.01, ,, 1.0, ), ), ;, this, ., tickUnit, =, new, NumberTickUnit, (, 1.0, ,]
[Range, (, 0.01, ,, 1.0, ), ), ;, this, ., tickUnit, =, new, NumberTickUnit, (, 1.0, ,, new, DecimalFormat, (]
[,, 1.0, ), ), ;, this, ., tickUnit, =, new, NumberTickUnit, (, 1.0, ,, new, DecimalFormat, (, "0.#", ), ,]
[(, 1.0, ,, new, DecimalFormat, (, "0.#", ), ,, 9, ), ;, }, public, double, getBase, (, ), {, return]
[(, 1.0, ,, new, DecimalFormat, (, "0.#", ), ,, 9, ), ;, }, public, double, getBase, (, ), {, return]
[getBase, (, ), {, return, this, ., base, ;, }, public, void, setBase, (, double, base, ), {, if, (]
[getBase, (, ), {, return, this, ., base, ;, }, public, void, setBase, (, double, base, ), {, if, (]
[), {, return, this, ., base, ;, }, public, void, setBase, (, double, base, ), {, if, (, base, <=]
[., base, ;, }, public, void, setBase, (, double, base, ), {, if, (, base, <=, 1.0, ), {, throw]
[}, public, void, setBase, (, double, base, ), {, if, (, base, <=, 1.0, ), {, throw, new, IllegalArgumentException, (]
[(, double, base, ), {, if, (, base, <=, 1.0, ), {, throw, new, IllegalArgumentException, (, "Requires 'base' > 1.0.", ), ;, }]
[(, double, base, ), {, if, (, base, <=, 1.0, ), {, throw, new, IllegalArgumentException, (, "Requires 'base' > 1.0.", ), ;, }]
[{, if, (, base, <=, 1.0, ), {, throw, new, IllegalArgumentException, (, "Requires 'base' > 1.0.", ), ;, }, this, ., base, =]
[(, base, <=, 1.0, ), {, throw, new, IllegalArgumentException, (, "Requires 'base' > 1.0.", ), ;, }, this, ., base, =, base, ;]
[(, base, <=, 1.0, ), {, throw, new, IllegalArgumentException, (, "Requires 'base' > 1.0.", ), ;, }, this, ., base, =, base, ;]
[), {, throw, new, IllegalArgumentException, (, "Requires 'base' > 1.0.", ), ;, }, this, ., base, =, base, ;, this, ., baseLog, =]
[), {, throw, new, IllegalArgumentException, (, "Requires 'base' > 1.0.", ), ;, }, this, ., base, =, base, ;, this, ., baseLog, =]
[IllegalArgumentException, (, "Requires 'base' > 1.0.", ), ;, }, this, ., base, =, base, ;, this, ., baseLog, =, Math, ., log, (]
[), ;, }, this, ., base, =, base, ;, this, ., baseLog, =, Math, ., log, (, base, ), ;]
[}, this, ., base, =, base, ;, this, ., baseLog, =, Math, ., log, (, base, ), ;, notifyListeners, (]
[base, =, base, ;, this, ., baseLog, =, Math, ., log, (, base, ), ;, notifyListeners, (, new, AxisChangeEvent, (]
[base, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getSmallestValue, (, ), {, return]
[base, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getSmallestValue, (, ), {, return]
[getSmallestValue, (, ), {, return, this, ., smallestValue, ;, }, public, void, setSmallestValue, (, double, value, ), {, if, (]
[getSmallestValue, (, ), {, return, this, ., smallestValue, ;, }, public, void, setSmallestValue, (, double, value, ), {, if, (]
[), {, return, this, ., smallestValue, ;, }, public, void, setSmallestValue, (, double, value, ), {, if, (, value, <=]
[., smallestValue, ;, }, public, void, setSmallestValue, (, double, value, ), {, if, (, value, <=, 0.0, ), {, throw]
[}, public, void, setSmallestValue, (, double, value, ), {, if, (, value, <=, 0.0, ), {, throw, new, IllegalArgumentException, (]
[(, double, value, ), {, if, (, value, <=, 0.0, ), {, throw, new, IllegalArgumentException, (, "Requires 'value' > 0.0.", ), ;, }]
[(, double, value, ), {, if, (, value, <=, 0.0, ), {, throw, new, IllegalArgumentException, (, "Requires 'value' > 0.0.", ), ;, }]
[{, if, (, value, <=, 0.0, ), {, throw, new, IllegalArgumentException, (, "Requires 'value' > 0.0.", ), ;, }, this, ., smallestValue, =]
[(, value, <=, 0.0, ), {, throw, new, IllegalArgumentException, (, "Requires 'value' > 0.0.", ), ;, }, this, ., smallestValue, =, value, ;]
[<=, 0.0, ), {, throw, new, IllegalArgumentException, (, "Requires 'value' > 0.0.", ), ;, }, this, ., smallestValue, =, value, ;, notifyListeners, (]
[{, throw, new, IllegalArgumentException, (, "Requires 'value' > 0.0.", ), ;, }, this, ., smallestValue, =, value, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, value, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, NumberTickUnit, getTickUnit, (, ), {, return]
[=, value, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, NumberTickUnit, getTickUnit, (, ), {, return]
[public, NumberTickUnit, getTickUnit, (, ), {, return, this, ., tickUnit, ;, }, public, void, setTickUnit, (, NumberTickUnit, unit, ), {]
[getTickUnit, (, ), {, return, this, ., tickUnit, ;, }, public, void, setTickUnit, (, NumberTickUnit, unit, ), {, setTickUnit, (]
[), {, return, this, ., tickUnit, ;, }, public, void, setTickUnit, (, NumberTickUnit, unit, ), {, setTickUnit, (, unit, ,]
[return, this, ., tickUnit, ;, }, public, void, setTickUnit, (, NumberTickUnit, unit, ), {, setTickUnit, (, unit, ,, true, ,]
[true, ), ;, }, public, void, setTickUnit, (, NumberTickUnit, unit, ,, boolean, notify, ,, boolean, turnOffAutoSelect, ), {, if, (]
[true, ), ;, }, public, void, setTickUnit, (, NumberTickUnit, unit, ,, boolean, notify, ,, boolean, turnOffAutoSelect, ), {, if, (]
[;, }, public, void, setTickUnit, (, NumberTickUnit, unit, ,, boolean, notify, ,, boolean, turnOffAutoSelect, ), {, if, (, unit, ==]
[setTickUnit, (, NumberTickUnit, unit, ,, boolean, notify, ,, boolean, turnOffAutoSelect, ), {, if, (, unit, ==, null, ), {, throw]
[unit, ,, boolean, notify, ,, boolean, turnOffAutoSelect, ), {, if, (, unit, ==, null, ), {, throw, new, IllegalArgumentException, (]
[,, boolean, turnOffAutoSelect, ), {, if, (, unit, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'unit' argument.", ), ;, }]
[,, boolean, turnOffAutoSelect, ), {, if, (, unit, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'unit' argument.", ), ;, }]
[{, if, (, unit, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnit, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnit, =, unit, ;, if, (]
[{, throw, new, IllegalArgumentException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnit, =, unit, ;, if, (, turnOffAutoSelect, ), {]
[new, IllegalArgumentException, (, "Null 'unit' argument.", ), ;, }, this, ., tickUnit, =, unit, ;, if, (, turnOffAutoSelect, ), {, setAutoTickUnitSelection, (]
[(, "Null 'unit' argument.", ), ;, }, this, ., tickUnit, =, unit, ;, if, (, turnOffAutoSelect, ), {, setAutoTickUnitSelection, (, false, ,]
[., tickUnit, =, unit, ;, if, (, turnOffAutoSelect, ), {, setAutoTickUnitSelection, (, false, ,, false, ), ;, }, if, (]
[unit, ;, if, (, turnOffAutoSelect, ), {, setAutoTickUnitSelection, (, false, ,, false, ), ;, }, if, (, notify, ), {]
[if, (, turnOffAutoSelect, ), {, setAutoTickUnitSelection, (, false, ,, false, ), ;, }, if, (, notify, ), {, notifyListeners, (]
[), {, setAutoTickUnitSelection, (, false, ,, false, ), ;, }, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (]
[), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, NumberFormat, getNumberFormatOverride, (, ), {, return]
[), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, NumberFormat, getNumberFormatOverride, (, ), {, return]
[public, NumberFormat, getNumberFormatOverride, (, ), {, return, this, ., numberFormatOverride, ;, }, public, void, setNumberFormatOverride, (, NumberFormat, formatter, ), {]
[public, NumberFormat, getNumberFormatOverride, (, ), {, return, this, ., numberFormatOverride, ;, }, public, void, setNumberFormatOverride, (, NumberFormat, formatter, ), {]
[), {, return, this, ., numberFormatOverride, ;, }, public, void, setNumberFormatOverride, (, NumberFormat, formatter, ), {, this, ., numberFormatOverride, =]
[return, this, ., numberFormatOverride, ;, }, public, void, setNumberFormatOverride, (, NumberFormat, formatter, ), {, this, ., numberFormatOverride, =, formatter, ;]
[., numberFormatOverride, ;, }, public, void, setNumberFormatOverride, (, NumberFormat, formatter, ), {, this, ., numberFormatOverride, =, formatter, ;, notifyListeners, (]
[}, public, void, setNumberFormatOverride, (, NumberFormat, formatter, ), {, this, ., numberFormatOverride, =, formatter, ;, notifyListeners, (, new, AxisChangeEvent, (]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, calculateLog, (, double, value, ), {, return]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, calculateLog, (, double, value, ), {, return]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, calculateLog, (, double, value, ), {, return]
[AxisChangeEvent, (, this, ), ), ;, }, public, double, calculateLog, (, double, value, ), {, return, Math, ., log, (]
[), ), ;, }, public, double, calculateLog, (, double, value, ), {, return, Math, ., log, (, value, ), /]
[), ), ;, }, public, double, calculateLog, (, double, value, ), {, return, Math, ., log, (, value, ), /]
[., log, (, value, ), /, this, ., baseLog, ;, }, public, double, calculateValue, (, double, log, ), {, return]
[., log, (, value, ), /, this, ., baseLog, ;, }, public, double, calculateValue, (, double, log, ), {, return]
[), /, this, ., baseLog, ;, }, public, double, calculateValue, (, double, log, ), {, return, Math, ., pow, (]
[), /, this, ., baseLog, ;, }, public, double, calculateValue, (, double, log, ), {, return, Math, ., pow, (]
[baseLog, ;, }, public, double, calculateValue, (, double, log, ), {, return, Math, ., pow, (, this, ., base, ,]
[), ;, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Range, range, =]
[double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, axisMin, =]
[,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, axisMin, =, calculateLog, (]
[,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, axisMin, =, calculateLog, (]
[=, getRange, (, ), ;, double, axisMin, =, calculateLog, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =]
[(, ), ;, double, axisMin, =, calculateLog, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =, calculateLog, (]
[(, ), ;, double, axisMin, =, calculateLog, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =, calculateLog, (]
[getLowerBound, (, ), ), ;, double, axisMax, =, calculateLog, (, range, ., getUpperBound, (, ), ), ;, double, min, =]
[double, axisMax, =, calculateLog, (, range, ., getUpperBound, (, ), ), ;, double, min, =, 0.0, ;, double, max, =]
[(, range, ., getUpperBound, (, ), ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (]
[(, range, ., getUpperBound, (, ), ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (]
[(, ), ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[=, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =]
[=, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =]
[0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =]
[min, =, area, ., getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }, else, if, (]
[min, =, area, ., getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }, else, if, (]
[getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[max, =, area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =]
[area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, area, ., getMaxY, (, ), ;, max, =]
[min, =, area, ., getMaxY, (, ), ;, max, =, area, ., getY, (, ), ;, }, double, log, =]
[getMaxY, (, ), ;, max, =, area, ., getY, (, ), ;, }, double, log, =, 0.0, ;, if, (]
[=, area, ., getY, (, ), ;, }, double, log, =, 0.0, ;, if, (, isInverted, (, ), ), {]
[., getY, (, ), ;, }, double, log, =, 0.0, ;, if, (, isInverted, (, ), ), {, log, =]
[., getY, (, ), ;, }, double, log, =, 0.0, ;, if, (, isInverted, (, ), ), {, log, =]
[(, ), ;, }, double, log, =, 0.0, ;, if, (, isInverted, (, ), ), {, log, =, axisMax, -]
[(, ), ;, }, double, log, =, 0.0, ;, if, (, isInverted, (, ), ), {, log, =, axisMax, -]
[(, ), ;, }, double, log, =, 0.0, ;, if, (, isInverted, (, ), ), {, log, =, axisMax, -]
[), ;, }, double, log, =, 0.0, ;, if, (, isInverted, (, ), ), {, log, =, axisMax, -, (]
[), ;, }, double, log, =, 0.0, ;, if, (, isInverted, (, ), ), {, log, =, axisMax, -, (]
[}, double, log, =, 0.0, ;, if, (, isInverted, (, ), ), {, log, =, axisMax, -, (, java2DValue, -]
[=, 0.0, ;, if, (, isInverted, (, ), ), {, log, =, axisMax, -, (, java2DValue, -, min, ), /]
[0.0, ;, if, (, isInverted, (, ), ), {, log, =, axisMax, -, (, java2DValue, -, min, ), /, (]
[0.0, ;, if, (, isInverted, (, ), ), {, log, =, axisMax, -, (, java2DValue, -, min, ), /, (]
[if, (, isInverted, (, ), ), {, log, =, axisMax, -, (, java2DValue, -, min, ), /, (, max, -]
[(, ), ), {, log, =, axisMax, -, (, java2DValue, -, min, ), /, (, max, -, min, ), *]
[), ), {, log, =, axisMax, -, (, java2DValue, -, min, ), /, (, max, -, min, ), *, (]
[), ), {, log, =, axisMax, -, (, java2DValue, -, min, ), /, (, max, -, min, ), *, (]
[{, log, =, axisMax, -, (, java2DValue, -, min, ), /, (, max, -, min, ), *, (, axisMax, -]
[java2DValue, -, min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {]
[min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =]
[min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =]
[/, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +]
[/, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +]
[/, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +]
[(, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +, (]
[(, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +, (]
[-, min, ), *, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +, (, java2DValue, -]
[*, (, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /]
[(, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /, (]
[(, axisMax, -, axisMin, ), ;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /, (]
[-, axisMin, ), ;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /, (, max, -]
[;, }, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /, (, max, -, min, ), *]
[}, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /, (, max, -, min, ), *, (]
[}, else, {, log, =, axisMin, +, (, java2DValue, -, min, ), /, (, max, -, min, ), *, (]
[{, log, =, axisMin, +, (, java2DValue, -, min, ), /, (, max, -, min, ), *, (, axisMax, -]
[(, java2DValue, -, min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, return]
[-, min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, ), ;, }, return, calculateValue, (]
[), ;, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Range, range, =]
[double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, axisMin, =]
[,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, axisMin, =, calculateLog, (]
[,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, axisMin, =, calculateLog, (]
[=, getRange, (, ), ;, double, axisMin, =, calculateLog, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =]
[(, ), ;, double, axisMin, =, calculateLog, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =, calculateLog, (]
[(, ), ;, double, axisMin, =, calculateLog, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =, calculateLog, (]
[(, range, ., getLowerBound, (, ), ), ;, double, axisMax, =, calculateLog, (, range, ., getUpperBound, (, ), ), ;]
[., getLowerBound, (, ), ), ;, double, axisMax, =, calculateLog, (, range, ., getUpperBound, (, ), ), ;, value, =]
[(, ), ), ;, double, axisMax, =, calculateLog, (, range, ., getUpperBound, (, ), ), ;, value, =, calculateLog, (]
[=, calculateLog, (, range, ., getUpperBound, (, ), ), ;, value, =, calculateLog, (, value, ), ;, double, min, =]
[getUpperBound, (, ), ), ;, value, =, calculateLog, (, value, ), ;, double, min, =, 0.0, ;, double, max, =]
[;, value, =, calculateLog, (, value, ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (]
[;, value, =, calculateLog, (, value, ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (]
[(, value, ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[=, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =]
[=, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =]
[0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, area, ., getX, (, ), ;, max, =]
[min, =, area, ., getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }, else, if, (]
[min, =, area, ., getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }, else, if, (]
[getX, (, ), ;, max, =, area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[max, =, area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =]
[area, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (, ), ;]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (, ), ;, min, =]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, max, =, area, ., getMinY, (, ), ;, min, =]
[{, max, =, area, ., getMinY, (, ), ;, min, =, area, ., getMaxY, (, ), ;, }, if, (]
[(, ), ;, min, =, area, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, return]
[(, ), ;, min, =, area, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, return]
[;, min, =, area, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -]
[;, min, =, area, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -]
[min, =, area, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (]
[min, =, area, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (]
[=, area, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[=, area, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -]
[), ;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, axisMin, ), /]
[;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, axisMin, ), /, (]
[;, }, if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, axisMin, ), /, (]
[if, (, isInverted, (, ), ), {, return, max, -, (, (, value, -, axisMin, ), /, (, axisMax, -]
[), ), {, return, max, -, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *]
[), {, return, max, -, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (]
[), {, return, max, -, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (]
[return, max, -, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -]
[axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, else, {, return]
[axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, else, {, return]
[/, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +]
[/, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +]
[(, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (]
[(, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (]
[axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (]
[axisMax, -, axisMin, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (]
[axisMin, ), ), *, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -]
[*, (, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, axisMin, ), /]
[(, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, axisMin, ), /, (]
[(, max, -, min, ), ;, }, else, {, return, min, +, (, (, value, -, axisMin, ), /, (]
[-, min, ), ;, }, else, {, return, min, +, (, (, value, -, axisMin, ), /, (, axisMax, -]
[}, else, {, return, min, +, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *]
[else, {, return, min, +, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (]
[else, {, return, min, +, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (]
[return, min, +, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -]
[axisMin, ), ), *, (, max, -, min, ), ;, }, }, public, void, configure, (, ), {, if, (]
[max, -, min, ), ;, }, }, public, void, configure, (, ), {, if, (, isAutoRange, (, ), ), {]
[isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =]
[(, ), ;, }, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;, if, (]
[(, ), ;, }, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;, if, (]
[;, }, }, protected, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;, if, (, plot, ==]
[{, Plot, plot, =, getPlot, (, ), ;, if, (, plot, ==, null, ), {, return, ;, }, if, (]
[{, Plot, plot, =, getPlot, (, ), ;, if, (, plot, ==, null, ), {, return, ;, }, if, (]
[if, (, plot, ==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =]
[==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, )]
[;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;, Range, r, =]
[;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;, Range, r, =]
[plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;, Range, r, =, vap, ., getDataRange, (]
[ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (]
[ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (]
[=, (, ValueAxisPlot, ), plot, ;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (, r, ==]
[), plot, ;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (, r, ==, null, ), {]
[;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (, r, ==, null, ), {, r, =]
[this, ), ;, if, (, r, ==, null, ), {, r, =, getDefaultAutoRange, (, ), ;, }, double, upper, =]
[this, ), ;, if, (, r, ==, null, ), {, r, =, getDefaultAutoRange, (, ), ;, }, double, upper, =]
[{, r, =, getDefaultAutoRange, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;, double, lower, =]
[{, r, =, getDefaultAutoRange, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;, double, lower, =]
[(, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;, double, lower, =, Math, ., max, (]
[(, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;, double, lower, =, Math, ., max, (]
[=, r, ., getUpperBound, (, ), ;, double, lower, =, Math, ., max, (, r, ., getLowerBound, (, ), ,]
[=, r, ., getUpperBound, (, ), ;, double, lower, =, Math, ., max, (, r, ., getLowerBound, (, ), ,]
[lower, =, Math, ., max, (, r, ., getLowerBound, (, ), ,, this, ., smallestValue, ), ;, double, range, =]
[lower, =, Math, ., max, (, r, ., getLowerBound, (, ), ,, this, ., smallestValue, ), ;, double, range, =]
[Math, ., max, (, r, ., getLowerBound, (, ), ,, this, ., smallestValue, ), ;, double, range, =, upper, -]
[., getLowerBound, (, ), ,, this, ., smallestValue, ), ;, double, range, =, upper, -, lower, ;, double, fixedAutoRange, =]
[., smallestValue, ), ;, double, range, =, upper, -, lower, ;, double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (]
[., smallestValue, ), ;, double, range, =, upper, -, lower, ;, double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (]
[), ;, double, range, =, upper, -, lower, ;, double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (, fixedAutoRange, >]
[range, =, upper, -, lower, ;, double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (, fixedAutoRange, >, 0.0, ), {]
[upper, -, lower, ;, double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (, fixedAutoRange, >, 0.0, ), {, lower, =]
[upper, -, lower, ;, double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (, fixedAutoRange, >, 0.0, ), {, lower, =]
[double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (, fixedAutoRange, >, 0.0, ), {, lower, =, Math, ., max, (]
[double, fixedAutoRange, =, getFixedAutoRange, (, ), ;, if, (, fixedAutoRange, >, 0.0, ), {, lower, =, Math, ., max, (]
[=, getFixedAutoRange, (, ), ;, if, (, fixedAutoRange, >, 0.0, ), {, lower, =, Math, ., max, (, upper, -]
[(, ), ;, if, (, fixedAutoRange, >, 0.0, ), {, lower, =, Math, ., max, (, upper, -, fixedAutoRange, ,]
[(, ), ;, if, (, fixedAutoRange, >, 0.0, ), {, lower, =, Math, ., max, (, upper, -, fixedAutoRange, ,]
[=, Math, ., max, (, upper, -, fixedAutoRange, ,, this, ., smallestValue, ), ;, }, else, {, double, minRange, =]
[-, fixedAutoRange, ,, this, ., smallestValue, ), ;, }, else, {, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (]
[-, fixedAutoRange, ,, this, ., smallestValue, ), ;, }, else, {, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (]
[,, this, ., smallestValue, ), ;, }, else, {, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <]
[}, else, {, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, double, expand, =]
[}, else, {, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, double, expand, =]
[else, {, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, double, expand, =, (]
[else, {, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, double, expand, =, (]
[double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, double, expand, =, (, minRange, -]
[getAutoRangeMinimumSize, (, ), ;, if, (, range, <, minRange, ), {, double, expand, =, (, minRange, -, range, ), /]
[), ;, if, (, range, <, minRange, ), {, double, expand, =, (, minRange, -, range, ), /, 2, ;]
[if, (, range, <, minRange, ), {, double, expand, =, (, minRange, -, range, ), /, 2, ;, upper, =]
[if, (, range, <, minRange, ), {, double, expand, =, (, minRange, -, range, ), /, 2, ;, upper, =]
[range, <, minRange, ), {, double, expand, =, (, minRange, -, range, ), /, 2, ;, upper, =, upper, +]
[minRange, ), {, double, expand, =, (, minRange, -, range, ), /, 2, ;, upper, =, upper, +, expand, ;]
[{, double, expand, =, (, minRange, -, range, ), /, 2, ;, upper, =, upper, +, expand, ;, lower, =]
[{, double, expand, =, (, minRange, -, range, ), /, 2, ;, upper, =, upper, +, expand, ;, lower, =]
[expand, =, (, minRange, -, range, ), /, 2, ;, upper, =, upper, +, expand, ;, lower, =, lower, -]
[), /, 2, ;, upper, =, upper, +, expand, ;, lower, =, lower, -, expand, ;, }, double, logUpper, =]
[2, ;, upper, =, upper, +, expand, ;, lower, =, lower, -, expand, ;, }, double, logUpper, =, calculateLog, (]
[expand, ;, lower, =, lower, -, expand, ;, }, double, logUpper, =, calculateLog, (, upper, ), ;, double, logLower, =]
[lower, =, lower, -, expand, ;, }, double, logUpper, =, calculateLog, (, upper, ), ;, double, logLower, =, calculateLog, (]
[}, double, logUpper, =, calculateLog, (, upper, ), ;, double, logLower, =, calculateLog, (, lower, ), ;, double, logRange, =]
[}, double, logUpper, =, calculateLog, (, upper, ), ;, double, logLower, =, calculateLog, (, lower, ), ;, double, logRange, =]
[logUpper, =, calculateLog, (, upper, ), ;, double, logLower, =, calculateLog, (, lower, ), ;, double, logRange, =, logUpper, -]
[calculateLog, (, upper, ), ;, double, logLower, =, calculateLog, (, lower, ), ;, double, logRange, =, logUpper, -, logLower, ;]
[upper, ), ;, double, logLower, =, calculateLog, (, lower, ), ;, double, logRange, =, logUpper, -, logLower, ;, logUpper, =]
[upper, ), ;, double, logLower, =, calculateLog, (, lower, ), ;, double, logRange, =, logUpper, -, logLower, ;, logUpper, =]
[;, double, logLower, =, calculateLog, (, lower, ), ;, double, logRange, =, logUpper, -, logLower, ;, logUpper, =, logUpper, +]
[;, double, logLower, =, calculateLog, (, lower, ), ;, double, logRange, =, logUpper, -, logLower, ;, logUpper, =, logUpper, +]
[calculateLog, (, lower, ), ;, double, logRange, =, logUpper, -, logLower, ;, logUpper, =, logUpper, +, getUpperMargin, (, ), *]
[lower, ), ;, double, logRange, =, logUpper, -, logLower, ;, logUpper, =, logUpper, +, getUpperMargin, (, ), *, logRange, ;]
[;, double, logRange, =, logUpper, -, logLower, ;, logUpper, =, logUpper, +, getUpperMargin, (, ), *, logRange, ;, logLower, =]
[;, double, logRange, =, logUpper, -, logLower, ;, logUpper, =, logUpper, +, getUpperMargin, (, ), *, logRange, ;, logLower, =]
[logRange, =, logUpper, -, logLower, ;, logUpper, =, logUpper, +, getUpperMargin, (, ), *, logRange, ;, logLower, =, logLower, -]
[logRange, =, logUpper, -, logLower, ;, logUpper, =, logUpper, +, getUpperMargin, (, ), *, logRange, ;, logLower, =, logLower, -]
[logLower, ;, logUpper, =, logUpper, +, getUpperMargin, (, ), *, logRange, ;, logLower, =, logLower, -, getLowerMargin, (, ), *]
[logUpper, =, logUpper, +, getUpperMargin, (, ), *, logRange, ;, logLower, =, logLower, -, getLowerMargin, (, ), *, logRange, ;]
[logUpper, +, getUpperMargin, (, ), *, logRange, ;, logLower, =, logLower, -, getLowerMargin, (, ), *, logRange, ;, upper, =]
[getUpperMargin, (, ), *, logRange, ;, logLower, =, logLower, -, getLowerMargin, (, ), *, logRange, ;, upper, =, calculateValue, (]
[*, logRange, ;, logLower, =, logLower, -, getLowerMargin, (, ), *, logRange, ;, upper, =, calculateValue, (, logUpper, ), ;]
[;, logLower, =, logLower, -, getLowerMargin, (, ), *, logRange, ;, upper, =, calculateValue, (, logUpper, ), ;, lower, =]
[=, logLower, -, getLowerMargin, (, ), *, logRange, ;, upper, =, calculateValue, (, logUpper, ), ;, lower, =, calculateValue, (]
[(, ), *, logRange, ;, upper, =, calculateValue, (, logUpper, ), ;, lower, =, calculateValue, (, logLower, ), ;, }]
[*, logRange, ;, upper, =, calculateValue, (, logUpper, ), ;, lower, =, calculateValue, (, logLower, ), ;, }, setRange, (]
[upper, =, calculateValue, (, logUpper, ), ;, lower, =, calculateValue, (, logLower, ), ;, }, setRange, (, new, Range, (]
[calculateValue, (, logUpper, ), ;, lower, =, calculateValue, (, logLower, ), ;, }, setRange, (, new, Range, (, lower, ,]
[), ;, lower, =, calculateValue, (, logLower, ), ;, }, setRange, (, new, Range, (, lower, ,, upper, ), ,]
[lower, =, calculateValue, (, logLower, ), ;, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,]
[,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, AxisState, state, =]
[Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, AxisState, state, =, null, ;, if, (]
[plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, AxisState, state, =, null, ;, if, (, !]
[RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, AxisState, state, =, null, ;, if, (, !, isVisible, (, ), ), {]
[,, PlotRenderingInfo, plotState, ), {, AxisState, state, =, null, ;, if, (, !, isVisible, (, ), ), {, state, =]
[), {, AxisState, state, =, null, ;, if, (, !, isVisible, (, ), ), {, state, =, new, AxisState, (]
[;, if, (, !, isVisible, (, ), ), {, state, =, new, AxisState, (, cursor, ), ;, List, ticks, =]
[(, !, isVisible, (, ), ), {, state, =, new, AxisState, (, cursor, ), ;, List, ticks, =, refreshTicks, (]
[isVisible, (, ), ), {, state, =, new, AxisState, (, cursor, ), ;, List, ticks, =, refreshTicks, (, g2, ,]
[), ), {, state, =, new, AxisState, (, cursor, ), ;, List, ticks, =, refreshTicks, (, g2, ,, state, ,]
[{, state, =, new, AxisState, (, cursor, ), ;, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,]
[new, AxisState, (, cursor, ), ;, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;]
[new, AxisState, (, cursor, ), ;, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;]
[), ;, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;, state, ., setTicks, (]
[=, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, return]
[g2, ,, state, ,, dataArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, return, state, ;, }]
[state, ,, dataArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, return, state, ;, }, state, =]
[dataArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, return, state, ;, }, state, =, drawTickMarksAndLabels, (]
[edge, ), ;, state, ., setTicks, (, ticks, ), ;, return, state, ;, }, state, =, drawTickMarksAndLabels, (, g2, ,]
[;, state, ., setTicks, (, ticks, ), ;, return, state, ;, }, state, =, drawTickMarksAndLabels, (, g2, ,, cursor, ,]
[., setTicks, (, ticks, ), ;, return, state, ;, }, state, =, drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,]
[(, ticks, ), ;, return, state, ;, }, state, =, drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,]
[), ;, return, state, ;, }, state, =, drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,]
[state, ;, }, state, =, drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;]
[}, state, =, drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =]
[=, drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawLabel, (]
[,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,]
[,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,]
[,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,]
[,, edge, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,]
[,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,]
[=, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;]
[(, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, createAndAddEntity, (]
[(, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, createAndAddEntity, (, cursor, ,]
[,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, createAndAddEntity, (, cursor, ,, state, ,]
[,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,]
[,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,]
[,, state, ,, plotState, ), ;, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, return]
[public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, result, =]
[dataArea, ,, RectangleEdge, edge, ), {, List, result, =, new, java, ., util, ., ArrayList, (, ), ;, if, (]
[dataArea, ,, RectangleEdge, edge, ), {, List, result, =, new, java, ., util, ., ArrayList, (, ), ;, if, (]
[), {, List, result, =, new, java, ., util, ., ArrayList, (, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[=, new, java, ., util, ., ArrayList, (, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[java, ., util, ., ArrayList, (, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, result, =]
[util, ., ArrayList, (, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, result, =, refreshTicksHorizontal, (]
[ArrayList, (, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, result, =, refreshTicksHorizontal, (, g2, ,]
[), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, result, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,]
[(, edge, ), ), {, result, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (]
[(, edge, ), ), {, result, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (]
[{, result, =, refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[(, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, result, =]
[,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, result, =, refreshTicksVertical, (]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, result, =, refreshTicksVertical, (, g2, ,]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, result, =, refreshTicksVertical, (, g2, ,, dataArea, ,]
[., isLeftOrRight, (, edge, ), ), {, result, =, refreshTicksVertical, (, g2, ,, dataArea, ,, edge, ), ;, }, return]
[result, ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range, =]
[Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, List, ticks, =]
[), {, Range, range, =, getRange, (, ), ;, List, ticks, =, new, ArrayList, (, ), ;, Font, tickLabelFont, =]
[=, getRange, (, ), ;, List, ticks, =, new, ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;]
[=, getRange, (, ), ;, List, ticks, =, new, ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;]
[;, List, ticks, =, new, ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (]
[;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (]
[;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (]
[tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==]
[tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==]
[;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, textAnchor, =]
[., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, textAnchor, =]
[textAnchor, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, textAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {]
[if, (, edge, ==, RectangleEdge, ., TOP, ), {, textAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, textAnchor, =]
[if, (, edge, ==, RectangleEdge, ., TOP, ), {, textAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, textAnchor, =]
[), {, textAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, textAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, if, (]
[., BOTTOM_CENTER, ;, }, else, {, textAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {]
[;, }, else, {, textAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (]
[else, {, textAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,]
[textAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,]
[if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, int, minorTickCount, =]
[if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, int, minorTickCount, =]
[if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, int, minorTickCount, =]
[dataArea, ,, edge, ), ;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =]
[dataArea, ,, edge, ), ;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =]
[;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =, Math, ., floor, (]
[int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =, Math, ., floor, (, calculateLog, (]
[), ;, double, start, =, Math, ., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;, double, end, =]
[), ;, double, start, =, Math, ., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;, double, end, =]
[=, Math, ., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;, double, end, =, Math, ., ceil, (]
[., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;, double, end, =, Math, ., ceil, (, calculateLog, (]
[), ;, double, end, =, Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =]
[=, Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =, start, ;, while, (]
[=, Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =, start, ;, while, (]
[., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =, start, ;, while, (, current, <=]
[(, ), ), ), ;, double, current, =, start, ;, while, (, current, <=, end, ), {, double, v, =]
[), ), ;, double, current, =, start, ;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (]
[=, start, ;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (, current, ), ;, if, (]
[=, start, ;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (, current, ), ;, if, (]
[(, current, <=, end, ), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, ., contains, (]
[), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, ., contains, (, v, ), ), {]
[), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, ., contains, (, v, ), ), {]
[=, calculateValue, (, current, ), ;, if, (, range, ., contains, (, v, ), ), {, ticks, ., add, (]
[current, ), ;, if, (, range, ., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (]
[current, ), ;, if, (, range, ., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (]
[(, range, ., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,]
[., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,]
[(, v, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (]
[), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,]
[ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,]
[ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,]
[new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,]
[,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =]
[,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =]
[), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (]
[), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (]
[TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,]
[TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,]
[CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +]
[CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +]
[CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +]
[this, ., base, ,, current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =]
[base, ,, current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;]
[base, ,, current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;]
[current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i, <]
[this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;]
[this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;]
[), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =]
[), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =]
[for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +]
[for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +]
[int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *]
[i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (]
[i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (]
[=, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (]
[=, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (]
[;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (, next, -]
[minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /]
[{, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /, minorTickCount, ), ;, if, (]
[{, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /, minorTickCount, ), ;, if, (]
[v, +, i, *, (, (, next, -, v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (]
[(, (, next, -, v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {]
[(, (, next, -, v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {]
[v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (]
[minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (]
[minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (]
[(, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,]
[., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,]
[(, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,]
[), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,]
[), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,]
[., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,]
[TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }]
[MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =]
[MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =]
[minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +]
[minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +]
[minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +]
[0.0, ), ), ;, }, }, current, =, current, +, this, ., tickUnit, ., getSize, (, ), ;, }, return]
[ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range, =]
[Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, List, ticks, =]
[), {, Range, range, =, getRange, (, ), ;, List, ticks, =, new, ArrayList, (, ), ;, Font, tickLabelFont, =]
[=, getRange, (, ), ;, List, ticks, =, new, ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;]
[=, getRange, (, ), ;, List, ticks, =, new, ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;]
[;, List, ticks, =, new, ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (]
[;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (]
[;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (]
[tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==]
[tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==]
[;, g2, ., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, textAnchor, =]
[., setFont, (, tickLabelFont, ), ;, TextAnchor, textAnchor, ;, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, textAnchor, =]
[textAnchor, ;, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, textAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, else, {]
[if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, textAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, else, {, textAnchor, =]
[if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, textAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, else, {, textAnchor, =]
[), {, textAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, else, {, textAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, if, (]
[., CENTER_LEFT, ;, }, else, {, textAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {]
[;, }, else, {, textAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (]
[else, {, textAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,]
[textAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,]
[if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, int, minorTickCount, =]
[if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, int, minorTickCount, =]
[if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, int, minorTickCount, =]
[dataArea, ,, edge, ), ;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =]
[dataArea, ,, edge, ), ;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =]
[;, }, int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =, Math, ., floor, (]
[int, minorTickCount, =, this, ., tickUnit, ., getMinorTickCount, (, ), ;, double, start, =, Math, ., floor, (, calculateLog, (]
[), ;, double, start, =, Math, ., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;, double, end, =]
[), ;, double, start, =, Math, ., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;, double, end, =]
[=, Math, ., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;, double, end, =, Math, ., ceil, (]
[., floor, (, calculateLog, (, getLowerBound, (, ), ), ), ;, double, end, =, Math, ., ceil, (, calculateLog, (]
[), ;, double, end, =, Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =]
[=, Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =, start, ;, while, (]
[=, Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =, start, ;, while, (]
[., ceil, (, calculateLog, (, getUpperBound, (, ), ), ), ;, double, current, =, start, ;, while, (, current, <=]
[(, ), ), ), ;, double, current, =, start, ;, while, (, current, <=, end, ), {, double, v, =]
[), ), ;, double, current, =, start, ;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (]
[=, start, ;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (, current, ), ;, if, (]
[=, start, ;, while, (, current, <=, end, ), {, double, v, =, calculateValue, (, current, ), ;, if, (]
[(, current, <=, end, ), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, ., contains, (]
[), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, ., contains, (, v, ), ), {]
[), {, double, v, =, calculateValue, (, current, ), ;, if, (, range, ., contains, (, v, ), ), {]
[=, calculateValue, (, current, ), ;, if, (, range, ., contains, (, v, ), ), {, ticks, ., add, (]
[current, ), ;, if, (, range, ., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (]
[current, ), ;, if, (, range, ., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (]
[(, range, ., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,]
[., contains, (, v, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,]
[(, v, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (]
[), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,]
[ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,]
[ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,]
[new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,]
[,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =]
[,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =]
[), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (]
[), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (]
[TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,]
[TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,]
[CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +]
[CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +]
[CENTER, ,, 0.0, ), ), ;, }, double, next, =, Math, ., pow, (, this, ., base, ,, current, +]
[this, ., base, ,, current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =]
[base, ,, current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;]
[base, ,, current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;]
[current, +, this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i, <]
[this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;]
[this, ., tickUnit, ., getSize, (, ), ), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;]
[), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =]
[), ;, for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =]
[for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +]
[for, (, int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +]
[int, i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *]
[i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (]
[i, =, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (]
[=, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (]
[=, 1, ;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (]
[;, i, <, minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (, next, -]
[minorTickCount, ;, i, ++, ), {, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /]
[{, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /, minorTickCount, ), ;, if, (]
[{, double, minorV, =, v, +, i, *, (, (, next, -, v, ), /, minorTickCount, ), ;, if, (]
[v, +, i, *, (, (, next, -, v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (]
[(, (, next, -, v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {]
[(, (, next, -, v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {]
[v, ), /, minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (]
[minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (]
[minorTickCount, ), ;, if, (, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (]
[(, range, ., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,]
[., contains, (, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,]
[(, minorV, ), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,]
[), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,]
[), ), {, ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,]
[., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,]
[TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }]
[MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =]
[MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =]
[minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +]
[minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +]
[minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), ), ;, }, }, current, =, current, +]
[0.0, ), ), ;, }, }, current, =, current, +, this, ., tickUnit, ., getSize, (, ), ;, }, return]
[return, ticks, ;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, if, (]
[return, ticks, ;, }, protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, if, (]
[protected, void, selectAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, if, (, RectangleEdge, ., isTopOrBottom, (]
[Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, selectHorizontalAutoTickUnit, (]
[dataArea, ,, RectangleEdge, edge, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, selectHorizontalAutoTickUnit, (, g2, ,]
[RectangleEdge, edge, ), {, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, selectHorizontalAutoTickUnit, (, g2, ,, dataArea, ,]
[., isTopOrBottom, (, edge, ), ), {, selectHorizontalAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (]
[., isTopOrBottom, (, edge, ), ), {, selectHorizontalAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (]
[), ), {, selectHorizontalAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[(, g2, ,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[,, dataArea, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, selectVerticalAutoTickUnit, (]
[,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, selectVerticalAutoTickUnit, (, g2, ,]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, selectVerticalAutoTickUnit, (, g2, ,, dataArea, ,]
[;, }, }, protected, void, selectHorizontalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelWidth, =]
[}, protected, void, selectHorizontalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (]
[void, selectHorizontalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,]
[,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), ), ;, TickUnitSource, tickUnits, =]
[=, estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), ), ;, TickUnitSource, tickUnits, =, getStandardTickUnits, (, ), ;, TickUnit, unit1, =]
[=, estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), ), ;, TickUnitSource, tickUnits, =, getStandardTickUnits, (, ), ;, TickUnit, unit1, =]
[,, getTickUnit, (, ), ), ;, TickUnitSource, tickUnits, =, getStandardTickUnits, (, ), ;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (]
[=, getStandardTickUnits, (, ), ;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unit1Width, =]
[(, ), ;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unit1Width, =, exponentLengthToJava2D, (]
[(, ), ;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unit1Width, =, exponentLengthToJava2D, (]
[tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unit1Width, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,]
[getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unit1Width, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,]
[;, double, unit1Width, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =]
[;, double, unit1Width, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =]
[double, unit1Width, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =, (]
[double, unit1Width, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =, (]
[=, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =, (, tickLabelWidth, /]
[unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =, (, tickLabelWidth, /, unit1Width, ), *]
[unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =, (, tickLabelWidth, /, unit1Width, ), *]
[), ;, double, guess, =, (, tickLabelWidth, /, unit1Width, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =]
[guess, =, (, tickLabelWidth, /, unit1Width, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, )]
[guess, =, (, tickLabelWidth, /, unit1Width, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, )]
[/, unit1Width, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (]
[getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Width, =]
[), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Width, =, exponentLengthToJava2D, (]
[), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Width, =, exponentLengthToJava2D, (]
[NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Width, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,]
[tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Width, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,]
[(, guess, ), ;, double, unit2Width, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;]
[), ;, double, unit2Width, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelWidth, =]
[double, unit2Width, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelWidth, =, estimateMaximumTickLabelWidth, (]
[=, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,]
[getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, unit2, ), ;, if, (]
[getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, unit2, ), ;, if, (]
[), ,, dataArea, ,, edge, ), ;, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, unit2, ), ;, if, (, tickLabelWidth, >]
[,, edge, ), ;, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, unit2, ), ;, if, (, tickLabelWidth, >, unit2Width, ), {]
[), ;, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, unit2, ), ;, if, (, tickLabelWidth, >, unit2Width, ), {, unit2, =]
[=, estimateMaximumTickLabelWidth, (, g2, ,, unit2, ), ;, if, (, tickLabelWidth, >, unit2Width, ), {, unit2, =, (, NumberTickUnit, )]
[=, estimateMaximumTickLabelWidth, (, g2, ,, unit2, ), ;, if, (, tickLabelWidth, >, unit2Width, ), {, unit2, =, (, NumberTickUnit, )]
[,, unit2, ), ;, if, (, tickLabelWidth, >, unit2Width, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (]
[if, (, tickLabelWidth, >, unit2Width, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }]
[tickLabelWidth, >, unit2Width, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (]
[unit2Width, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2, ,]
[{, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2, ,, false, ,]
[), ;, }, public, double, exponentLengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, one, =]
[}, public, double, exponentLengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, one, =, valueToJava2D, (]
[double, exponentLengthToJava2D, (, double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, one, =, valueToJava2D, (, calculateValue, (]
[double, length, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, one, =, valueToJava2D, (, calculateValue, (, 1.0, ), ,]
[,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, one, =, valueToJava2D, (, calculateValue, (, 1.0, ), ,, area, ,]
[), {, double, one, =, valueToJava2D, (, calculateValue, (, 1.0, ), ,, area, ,, edge, ), ;, double, l, =]
[double, one, =, valueToJava2D, (, calculateValue, (, 1.0, ), ,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (]
[=, valueToJava2D, (, calculateValue, (, 1.0, ), ,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (, calculateValue, (]
[=, valueToJava2D, (, calculateValue, (, 1.0, ), ,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (, calculateValue, (]
[(, calculateValue, (, 1.0, ), ,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (, calculateValue, (, length, +]
[1.0, ), ,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (, calculateValue, (, length, +, 1.0, ), ,]
[,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (, calculateValue, (, length, +, 1.0, ), ,, area, ,]
[), ;, double, l, =, valueToJava2D, (, calculateValue, (, length, +, 1.0, ), ,, area, ,, edge, ), ;, return]
[), ;, double, l, =, valueToJava2D, (, calculateValue, (, length, +, 1.0, ), ,, area, ,, edge, ), ;, return]
[=, valueToJava2D, (, calculateValue, (, length, +, 1.0, ), ,, area, ,, edge, ), ;, return, Math, ., abs, (]
[=, valueToJava2D, (, calculateValue, (, length, +, 1.0, ), ,, area, ,, edge, ), ;, return, Math, ., abs, (]
[(, calculateValue, (, length, +, 1.0, ), ,, area, ,, edge, ), ;, return, Math, ., abs, (, l, -]
[), ;, }, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelHeight, =]
[}, protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelHeight, =, estimateMaximumTickLabelHeight, (]
[g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, TickUnitSource, tickUnits, =]
[), {, double, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, TickUnitSource, tickUnits, =, getStandardTickUnits, (, ), ;, TickUnit, unit1, =]
[), {, double, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, TickUnitSource, tickUnits, =, getStandardTickUnits, (, ), ;, TickUnit, unit1, =]
[=, estimateMaximumTickLabelHeight, (, g2, ), ;, TickUnitSource, tickUnits, =, getStandardTickUnits, (, ), ;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (]
[=, getStandardTickUnits, (, ), ;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unitHeight, =]
[(, ), ;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unitHeight, =, exponentLengthToJava2D, (]
[(, ), ;, TickUnit, unit1, =, tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unitHeight, =, exponentLengthToJava2D, (]
[tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unitHeight, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,]
[getCeilingTickUnit, (, getTickUnit, (, ), ), ;, double, unitHeight, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,]
[;, double, unitHeight, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =]
[;, double, unitHeight, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =]
[double, unitHeight, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =, (]
[double, unitHeight, =, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =, (]
[=, exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =, (, tickLabelHeight, /]
[unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =, (, tickLabelHeight, /, unitHeight, ), *]
[unit1, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, double, guess, =, (, tickLabelHeight, /, unitHeight, ), *]
[), ;, double, guess, =, (, tickLabelHeight, /, unitHeight, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =]
[guess, =, (, tickLabelHeight, /, unitHeight, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, )]
[guess, =, (, tickLabelHeight, /, unitHeight, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, )]
[/, unitHeight, ), *, unit1, ., getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (]
[getSize, (, ), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Height, =]
[), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Height, =, exponentLengthToJava2D, (]
[), ;, NumberTickUnit, unit2, =, (, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Height, =, exponentLengthToJava2D, (]
[NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Height, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,]
[tickUnits, ., getCeilingTickUnit, (, guess, ), ;, double, unit2Height, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,]
[(, guess, ), ;, double, unit2Height, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;]
[), ;, double, unit2Height, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelHeight, =]
[double, unit2Height, =, exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelHeight, =, estimateMaximumTickLabelHeight, (]
[unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, if, (]
[unit2, ., getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, if, (]
[getSize, (, ), ,, dataArea, ,, edge, ), ;, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, if, (, tickLabelHeight, >]
[,, dataArea, ,, edge, ), ;, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, if, (, tickLabelHeight, >, unit2Height, ), {]
[,, edge, ), ;, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, if, (, tickLabelHeight, >, unit2Height, ), {, unit2, =]
[;, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, if, (, tickLabelHeight, >, unit2Height, ), {, unit2, =, (, NumberTickUnit, )]
[;, tickLabelHeight, =, estimateMaximumTickLabelHeight, (, g2, ), ;, if, (, tickLabelHeight, >, unit2Height, ), {, unit2, =, (, NumberTickUnit, )]
[(, g2, ), ;, if, (, tickLabelHeight, >, unit2Height, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (]
[if, (, tickLabelHeight, >, unit2Height, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }]
[tickLabelHeight, >, unit2Height, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (]
[unit2Height, ), {, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2, ,]
[{, unit2, =, (, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, ), ;, }, setTickUnit, (, unit2, ,, false, ,]
[(, unit2, ,, false, ,, false, ), ;, }, protected, double, estimateMaximumTickLabelHeight, (, Graphics2D, g2, ), {, RectangleInsets, tickLabelInsets, =]
[;, }, protected, double, estimateMaximumTickLabelHeight, (, Graphics2D, g2, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;, double, result, =]
[;, }, protected, double, estimateMaximumTickLabelHeight, (, Graphics2D, g2, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;, double, result, =]
[;, }, protected, double, estimateMaximumTickLabelHeight, (, Graphics2D, g2, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;, double, result, =]
[Graphics2D, g2, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;, double, result, =, tickLabelInsets, ., getTop, (, ), +]
[Graphics2D, g2, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;, double, result, =, tickLabelInsets, ., getTop, (, ), +]
[), ;, double, result, =, tickLabelInsets, ., getTop, (, ), +, tickLabelInsets, ., getBottom, (, ), ;, Font, tickLabelFont, =]
[getTop, (, ), +, tickLabelInsets, ., getBottom, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, FontRenderContext, frc, =]
[getTop, (, ), +, tickLabelInsets, ., getBottom, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, FontRenderContext, frc, =]
[getBottom, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;]
[), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, result, +=]
[), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, result, +=]
[), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, result, +=]
[=, getTickLabelFont, (, ), ;, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, result, +=, tickLabelFont, ., getLineMetrics, (]
[(, ), ;, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, result, +=, tickLabelFont, ., getLineMetrics, (, "123", ,]
[getFontRenderContext, (, ), ;, result, +=, tickLabelFont, ., getLineMetrics, (, "123", ,, frc, ), ., getHeight, (, ), ;, return]
[), ;, return, result, ;, }, protected, double, estimateMaximumTickLabelWidth, (, Graphics2D, g2, ,, TickUnit, unit, ), {, RectangleInsets, tickLabelInsets, =]
[double, estimateMaximumTickLabelWidth, (, Graphics2D, g2, ,, TickUnit, unit, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;, double, result, =]
[double, estimateMaximumTickLabelWidth, (, Graphics2D, g2, ,, TickUnit, unit, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;, double, result, =]
[double, estimateMaximumTickLabelWidth, (, Graphics2D, g2, ,, TickUnit, unit, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;, double, result, =]
[TickUnit, unit, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;, double, result, =, tickLabelInsets, ., getLeft, (, ), +]
[TickUnit, unit, ), {, RectangleInsets, tickLabelInsets, =, getTickLabelInsets, (, ), ;, double, result, =, tickLabelInsets, ., getLeft, (, ), +]
[(, ), ;, double, result, =, tickLabelInsets, ., getLeft, (, ), +, tickLabelInsets, ., getRight, (, ), ;, if, (]
[getLeft, (, ), +, tickLabelInsets, ., getRight, (, ), ;, if, (, isVerticalTickLabels, (, ), ), {, FontRenderContext, frc, =]
[getLeft, (, ), +, tickLabelInsets, ., getRight, (, ), ;, if, (, isVerticalTickLabels, (, ), ), {, FontRenderContext, frc, =]
[;, if, (, isVerticalTickLabels, (, ), ), {, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, LineMetrics, lm, =]
[;, if, (, isVerticalTickLabels, (, ), ), {, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, LineMetrics, lm, =]
[), {, FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, LineMetrics, lm, =, getTickLabelFont, (, ), ., getLineMetrics, (]
[FontRenderContext, frc, =, g2, ., getFontRenderContext, (, ), ;, LineMetrics, lm, =, getTickLabelFont, (, ), ., getLineMetrics, (, "0", ,]
[g2, ., getFontRenderContext, (, ), ;, LineMetrics, lm, =, getTickLabelFont, (, ), ., getLineMetrics, (, "0", ,, frc, ), ;]
[getFontRenderContext, (, ), ;, LineMetrics, lm, =, getTickLabelFont, (, ), ., getLineMetrics, (, "0", ,, frc, ), ;, result, +=]
[getFontRenderContext, (, ), ;, LineMetrics, lm, =, getTickLabelFont, (, ), ., getLineMetrics, (, "0", ,, frc, ), ;, result, +=]
[(, "0", ,, frc, ), ;, result, +=, lm, ., getHeight, (, ), ;, }, else, {, FontMetrics, fm, =]
[(, "0", ,, frc, ), ;, result, +=, lm, ., getHeight, (, ), ;, }, else, {, FontMetrics, fm, =]
[), ;, result, +=, lm, ., getHeight, (, ), ;, }, else, {, FontMetrics, fm, =, g2, ., getFontMetrics, (]
[), ;, }, else, {, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Range, range, =]
[=, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Range, range, =, getRange, (, ), ;, double, lower, =]
[=, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Range, range, =, getRange, (, ), ;, double, lower, =]
[;, Range, range, =, getRange, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), ;, double, upper, =]
[;, Range, range, =, getRange, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), ;, double, upper, =]
[lower, =, range, ., getLowerBound, (, ), ;, double, upper, =, range, ., getUpperBound, (, ), ;, String, lowerStr, =]
[(, ), ;, double, upper, =, range, ., getUpperBound, (, ), ;, String, lowerStr, =, "", ;, String, upperStr, =]
[=, range, ., getUpperBound, (, ), ;, String, lowerStr, =, "", ;, String, upperStr, =, "", ;, NumberFormat, formatter, =]
[;, String, lowerStr, =, "", ;, String, upperStr, =, "", ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (]
[;, String, lowerStr, =, "", ;, String, upperStr, =, "", ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (]
[lowerStr, =, "", ;, String, upperStr, =, "", ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=]
[;, String, upperStr, =, "", ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {]
[upperStr, =, "", ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, lowerStr, =]
[upperStr, =, "", ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, lowerStr, =]
[NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, lowerStr, =, formatter, ., format, (]
[getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, lowerStr, =, formatter, ., format, (, lower, ), ;]
[), ;, if, (, formatter, !=, null, ), {, lowerStr, =, formatter, ., format, (, lower, ), ;, upperStr, =]
[), ;, if, (, formatter, !=, null, ), {, lowerStr, =, formatter, ., format, (, lower, ), ;, upperStr, =]
[formatter, !=, null, ), {, lowerStr, =, formatter, ., format, (, lower, ), ;, upperStr, =, formatter, ., format, (]
[=, formatter, ., format, (, lower, ), ;, upperStr, =, formatter, ., format, (, upper, ), ;, }, else, {]
[., format, (, lower, ), ;, upperStr, =, formatter, ., format, (, upper, ), ;, }, else, {, lowerStr, =]
[., format, (, lower, ), ;, upperStr, =, formatter, ., format, (, upper, ), ;, }, else, {, lowerStr, =]
[), ;, upperStr, =, formatter, ., format, (, upper, ), ;, }, else, {, lowerStr, =, unit, ., valueToString, (]
[=, formatter, ., format, (, upper, ), ;, }, else, {, lowerStr, =, unit, ., valueToString, (, lower, ), ;]
[., format, (, upper, ), ;, }, else, {, lowerStr, =, unit, ., valueToString, (, lower, ), ;, upperStr, =]
[., format, (, upper, ), ;, }, else, {, lowerStr, =, unit, ., valueToString, (, lower, ), ;, upperStr, =]
[), ;, }, else, {, lowerStr, =, unit, ., valueToString, (, lower, ), ;, upperStr, =, unit, ., valueToString, (]
[unit, ., valueToString, (, lower, ), ;, upperStr, =, unit, ., valueToString, (, upper, ), ;, }, double, w1, =]
[unit, ., valueToString, (, lower, ), ;, upperStr, =, unit, ., valueToString, (, upper, ), ;, }, double, w1, =]
[lower, ), ;, upperStr, =, unit, ., valueToString, (, upper, ), ;, }, double, w1, =, fm, ., stringWidth, (]
[., valueToString, (, upper, ), ;, }, double, w1, =, fm, ., stringWidth, (, lowerStr, ), ;, double, w2, =]
[., valueToString, (, upper, ), ;, }, double, w1, =, fm, ., stringWidth, (, lowerStr, ), ;, double, w2, =]
[), ;, }, double, w1, =, fm, ., stringWidth, (, lowerStr, ), ;, double, w2, =, fm, ., stringWidth, (]
[double, w1, =, fm, ., stringWidth, (, lowerStr, ), ;, double, w2, =, fm, ., stringWidth, (, upperStr, ), ;]
[=, fm, ., stringWidth, (, lowerStr, ), ;, double, w2, =, fm, ., stringWidth, (, upperStr, ), ;, result, +=]
[=, fm, ., stringWidth, (, lowerStr, ), ;, double, w2, =, fm, ., stringWidth, (, upperStr, ), ;, result, +=]
[(, lowerStr, ), ;, double, w2, =, fm, ., stringWidth, (, upperStr, ), ;, result, +=, Math, ., max, (]
[), ;, double, w2, =, fm, ., stringWidth, (, upperStr, ), ;, result, +=, Math, ., max, (, w1, ,]
[fm, ., stringWidth, (, upperStr, ), ;, result, +=, Math, ., max, (, w1, ,, w2, ), ;, }, return]
[;, }, return, result, ;, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, Range, range, =]
[void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, Range, range, =, getRange, (, ), ;, double, start, =]
[void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, Range, range, =, getRange, (, ), ;, double, start, =]
[{, Range, range, =, getRange, (, ), ;, double, start, =, range, ., getLowerBound, (, ), ;, double, end, =]
[{, Range, range, =, getRange, (, ), ;, double, start, =, range, ., getLowerBound, (, ), ;, double, end, =]
[start, =, range, ., getLowerBound, (, ), ;, double, end, =, range, ., getUpperBound, (, ), ;, double, log1, =]
[range, ., getLowerBound, (, ), ;, double, end, =, range, ., getUpperBound, (, ), ;, double, log1, =, calculateLog, (]
[double, end, =, range, ., getUpperBound, (, ), ;, double, log1, =, calculateLog, (, start, ), ;, double, log2, =]
[=, range, ., getUpperBound, (, ), ;, double, log1, =, calculateLog, (, start, ), ;, double, log2, =, calculateLog, (]
[;, double, log1, =, calculateLog, (, start, ), ;, double, log2, =, calculateLog, (, end, ), ;, double, length, =]
[;, double, log1, =, calculateLog, (, start, ), ;, double, log2, =, calculateLog, (, end, ), ;, double, length, =]
[log1, =, calculateLog, (, start, ), ;, double, log2, =, calculateLog, (, end, ), ;, double, length, =, log2, -]
[), ;, double, log2, =, calculateLog, (, end, ), ;, double, length, =, log2, -, log1, ;, Range, adjusted, =]
[=, calculateLog, (, end, ), ;, double, length, =, log2, -, log1, ;, Range, adjusted, =, null, ;, if, (]
[=, log2, -, log1, ;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, double, logA, =]
[=, log2, -, log1, ;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, double, logA, =]
[-, log1, ;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, double, logA, =, log1, +]
[-, log1, ;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, double, logA, =, log1, +]
[;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, double, logA, =, log1, +, length, *]
[Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, double, logA, =, log1, +, length, *, (]
[Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, double, logA, =, log1, +, length, *, (]
[=, null, ;, if, (, isInverted, (, ), ), {, double, logA, =, log1, +, length, *, (, 1, -]
[(, ), ), {, double, logA, =, log1, +, length, *, (, 1, -, upperPercent, ), ;, double, logB, =]
[(, ), ), {, double, logA, =, log1, +, length, *, (, 1, -, upperPercent, ), ;, double, logB, =]
[), {, double, logA, =, log1, +, length, *, (, 1, -, upperPercent, ), ;, double, logB, =, log1, +]
[), {, double, logA, =, log1, +, length, *, (, 1, -, upperPercent, ), ;, double, logB, =, log1, +]
[double, logA, =, log1, +, length, *, (, 1, -, upperPercent, ), ;, double, logB, =, log1, +, length, *]
[logA, =, log1, +, length, *, (, 1, -, upperPercent, ), ;, double, logB, =, log1, +, length, *, (]
[logA, =, log1, +, length, *, (, 1, -, upperPercent, ), ;, double, logB, =, log1, +, length, *, (]
[log1, +, length, *, (, 1, -, upperPercent, ), ;, double, logB, =, log1, +, length, *, (, 1, -]
[*, (, 1, -, upperPercent, ), ;, double, logB, =, log1, +, length, *, (, 1, -, lowerPercent, ), ;]
[1, -, upperPercent, ), ;, double, logB, =, log1, +, length, *, (, 1, -, lowerPercent, ), ;, adjusted, =]
[), ;, double, logB, =, log1, +, length, *, (, 1, -, lowerPercent, ), ;, adjusted, =, new, Range, (]
[double, logB, =, log1, +, length, *, (, 1, -, lowerPercent, ), ;, adjusted, =, new, Range, (, calculateValue, (]
[log1, +, length, *, (, 1, -, lowerPercent, ), ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,]
[length, *, (, 1, -, lowerPercent, ), ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (]
[new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, else, {, double, logA, =]
[new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, else, {, double, logA, =]
[(, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, else, {, double, logA, =, log1, +]
[(, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, else, {, double, logA, =, log1, +]
[(, logA, ), ,, calculateValue, (, logB, ), ), ;, }, else, {, double, logA, =, log1, +, length, *]
[(, logB, ), ), ;, }, else, {, double, logA, =, log1, +, length, *, lowerPercent, ;, double, logB, =]
[(, logB, ), ), ;, }, else, {, double, logA, =, log1, +, length, *, lowerPercent, ;, double, logB, =]
[), ), ;, }, else, {, double, logA, =, log1, +, length, *, lowerPercent, ;, double, logB, =, log1, +]
[), ), ;, }, else, {, double, logA, =, log1, +, length, *, lowerPercent, ;, double, logB, =, log1, +]
[;, }, else, {, double, logA, =, log1, +, length, *, lowerPercent, ;, double, logB, =, log1, +, length, *]
[else, {, double, logA, =, log1, +, length, *, lowerPercent, ;, double, logB, =, log1, +, length, *, upperPercent, ;]
[double, logA, =, log1, +, length, *, lowerPercent, ;, double, logB, =, log1, +, length, *, upperPercent, ;, adjusted, =]
[log1, +, length, *, lowerPercent, ;, double, logB, =, log1, +, length, *, upperPercent, ;, adjusted, =, new, Range, (]
[length, *, lowerPercent, ;, double, logB, =, log1, +, length, *, upperPercent, ;, adjusted, =, new, Range, (, calculateValue, (]
[;, double, logB, =, log1, +, length, *, upperPercent, ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,]
[logB, =, log1, +, length, *, upperPercent, ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (]
[*, upperPercent, ;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }]
[;, adjusted, =, new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), ), ;, }, setRange, (]
[), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double, percent, ), {, Range, range, =]
[;, }, public, void, pan, (, double, percent, ), {, Range, range, =, getRange, (, ), ;, double, lower, =]
[;, }, public, void, pan, (, double, percent, ), {, Range, range, =, getRange, (, ), ;, double, lower, =]
[{, Range, range, =, getRange, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), ;, double, upper, =]
[{, Range, range, =, getRange, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), ;, double, upper, =]
[lower, =, range, ., getLowerBound, (, ), ;, double, upper, =, range, ., getUpperBound, (, ), ;, double, log1, =]
[range, ., getLowerBound, (, ), ;, double, upper, =, range, ., getUpperBound, (, ), ;, double, log1, =, calculateLog, (]
[double, upper, =, range, ., getUpperBound, (, ), ;, double, log1, =, calculateLog, (, lower, ), ;, double, log2, =]
[=, range, ., getUpperBound, (, ), ;, double, log1, =, calculateLog, (, lower, ), ;, double, log2, =, calculateLog, (]
[;, double, log1, =, calculateLog, (, lower, ), ;, double, log2, =, calculateLog, (, upper, ), ;, double, length, =]
[;, double, log1, =, calculateLog, (, lower, ), ;, double, log2, =, calculateLog, (, upper, ), ;, double, length, =]
[log1, =, calculateLog, (, lower, ), ;, double, log2, =, calculateLog, (, upper, ), ;, double, length, =, log2, -]
[), ;, double, log2, =, calculateLog, (, upper, ), ;, double, length, =, log2, -, log1, ;, double, adj, =]
[), ;, double, log2, =, calculateLog, (, upper, ), ;, double, length, =, log2, -, log1, ;, double, adj, =]
[double, log2, =, calculateLog, (, upper, ), ;, double, length, =, log2, -, log1, ;, double, adj, =, length, *]
[=, calculateLog, (, upper, ), ;, double, length, =, log2, -, log1, ;, double, adj, =, length, *, percent, ;]
[(, upper, ), ;, double, length, =, log2, -, log1, ;, double, adj, =, length, *, percent, ;, log1, =]
[(, upper, ), ;, double, length, =, log2, -, log1, ;, double, adj, =, length, *, percent, ;, log1, =]
[), ;, double, length, =, log2, -, log1, ;, double, adj, =, length, *, percent, ;, log1, =, log1, +]
[double, length, =, log2, -, log1, ;, double, adj, =, length, *, percent, ;, log1, =, log1, +, adj, ;]
[=, log2, -, log1, ;, double, adj, =, length, *, percent, ;, log1, =, log1, +, adj, ;, log2, =]
[=, log2, -, log1, ;, double, adj, =, length, *, percent, ;, log1, =, log1, +, adj, ;, log2, =]
[-, log1, ;, double, adj, =, length, *, percent, ;, log1, =, log1, +, adj, ;, log2, =, log2, +]
[;, double, adj, =, length, *, percent, ;, log1, =, log1, +, adj, ;, log2, =, log2, +, adj, ;]
[adj, =, length, *, percent, ;, log1, =, log1, +, adj, ;, log2, =, log2, +, adj, ;, setRange, (]
[length, *, percent, ;, log1, =, log1, +, adj, ;, log2, =, log2, +, adj, ;, setRange, (, calculateValue, (]
[;, log1, =, log1, +, adj, ;, log2, =, log2, +, adj, ;, setRange, (, calculateValue, (, log1, ), ,]
[=, log1, +, adj, ;, log2, =, log2, +, adj, ;, setRange, (, calculateValue, (, log1, ), ,, calculateValue, (]
[log1, ), ,, calculateValue, (, log2, ), ), ;, }, protected, String, createTickLabel, (, double, value, ), {, if, (]
[log1, ), ,, calculateValue, (, log2, ), ), ;, }, protected, String, createTickLabel, (, double, value, ), {, if, (]
[log1, ), ,, calculateValue, (, log2, ), ), ;, }, protected, String, createTickLabel, (, double, value, ), {, if, (]
[(, log2, ), ), ;, }, protected, String, createTickLabel, (, double, value, ), {, if, (, this, ., numberFormatOverride, !=]
[;, }, protected, String, createTickLabel, (, double, value, ), {, if, (, this, ., numberFormatOverride, !=, null, ), {, return]
[;, }, protected, String, createTickLabel, (, double, value, ), {, if, (, this, ., numberFormatOverride, !=, null, ), {, return]
[;, }, protected, String, createTickLabel, (, double, value, ), {, if, (, this, ., numberFormatOverride, !=, null, ), {, return]
[double, value, ), {, if, (, this, ., numberFormatOverride, !=, null, ), {, return, this, ., numberFormatOverride, ., format, (]
[., numberFormatOverride, !=, null, ), {, return, this, ., numberFormatOverride, ., format, (, value, ), ;, }, else, {, return]
[., numberFormatOverride, !=, null, ), {, return, this, ., numberFormatOverride, ., format, (, value, ), ;, }, else, {, return]
[., numberFormatOverride, !=, null, ), {, return, this, ., numberFormatOverride, ., format, (, value, ), ;, }, else, {, return]
[return, this, ., numberFormatOverride, ., format, (, value, ), ;, }, else, {, return, this, ., tickUnit, ., valueToString, (]
[., tickUnit, ., valueToString, (, value, ), ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[., tickUnit, ., valueToString, (, value, ), ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[., valueToString, (, value, ), ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[), ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, LogAxis, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, LogAxis, ), ), {, return, false, ;, }, LogAxis, that, =]
[if, (, !, (, obj, instanceof, LogAxis, ), ), {, return, false, ;, }, LogAxis, that, =, (, LogAxis, )]
[obj, instanceof, LogAxis, ), ), {, return, false, ;, }, LogAxis, that, =, (, LogAxis, ), obj, ;, if, (]
[obj, instanceof, LogAxis, ), ), {, return, false, ;, }, LogAxis, that, =, (, LogAxis, ), obj, ;, if, (]
[obj, instanceof, LogAxis, ), ), {, return, false, ;, }, LogAxis, that, =, (, LogAxis, ), obj, ;, if, (]
[), {, return, false, ;, }, LogAxis, that, =, (, LogAxis, ), obj, ;, if, (, this, ., base, !=]
[), {, return, false, ;, }, LogAxis, that, =, (, LogAxis, ), obj, ;, if, (, this, ., base, !=]
[LogAxis, that, =, (, LogAxis, ), obj, ;, if, (, this, ., base, !=, that, ., base, ), {, return]
[), obj, ;, if, (, this, ., base, !=, that, ., base, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., base, !=, that, ., base, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., base, !=, that, ., base, ), {, return, false, ;, }, if, (]
[(, this, ., base, !=, that, ., base, ), {, return, false, ;, }, if, (, this, ., smallestValue, !=]
[(, this, ., base, !=, that, ., base, ), {, return, false, ;, }, if, (, this, ., smallestValue, !=]
[., base, ), {, return, false, ;, }, if, (, this, ., smallestValue, !=, that, ., smallestValue, ), {, return]
[return, false, ;, }, if, (, this, ., smallestValue, !=, that, ., smallestValue, ), {, return, false, ;, }, return]
[return, false, ;, }, if, (, this, ., smallestValue, !=, that, ., smallestValue, ), {, return, false, ;, }, return]
[if, (, this, ., smallestValue, !=, that, ., smallestValue, ), {, return, false, ;, }, return, super, ., equals, (]
[;, }, return, super, ., equals, (, obj, ), ;, }, public, int, hashCode, (, ), {, int, result, =]
[equals, (, obj, ), ;, }, public, int, hashCode, (, ), {, int, result, =, 193, ;, long, temp, =]
[equals, (, obj, ), ;, }, public, int, hashCode, (, ), {, int, result, =, 193, ;, long, temp, =]
[;, }, public, int, hashCode, (, ), {, int, result, =, 193, ;, long, temp, =, Double, ., doubleToLongBits, (]
[;, }, public, int, hashCode, (, ), {, int, result, =, 193, ;, long, temp, =, Double, ., doubleToLongBits, (]
[(, ), {, int, result, =, 193, ;, long, temp, =, Double, ., doubleToLongBits, (, this, ., base, ), ;]
[{, int, result, =, 193, ;, long, temp, =, Double, ., doubleToLongBits, (, this, ., base, ), ;, result, =]
[{, int, result, =, 193, ;, long, temp, =, Double, ., doubleToLongBits, (, this, ., base, ), ;, result, =]
[{, int, result, =, 193, ;, long, temp, =, Double, ., doubleToLongBits, (, this, ., base, ), ;, result, =]
[result, =, 193, ;, long, temp, =, Double, ., doubleToLongBits, (, this, ., base, ), ;, result, =, 37, *]
[193, ;, long, temp, =, Double, ., doubleToLongBits, (, this, ., base, ), ;, result, =, 37, *, result, +]
[temp, =, Double, ., doubleToLongBits, (, this, ., base, ), ;, result, =, 37, *, result, +, (, int, )]
[=, Double, ., doubleToLongBits, (, this, ., base, ), ;, result, =, 37, *, result, +, (, int, ), (]
[=, Double, ., doubleToLongBits, (, this, ., base, ), ;, result, =, 37, *, result, +, (, int, ), (]
[., doubleToLongBits, (, this, ., base, ), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^]
[doubleToLongBits, (, this, ., base, ), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^, (]
[doubleToLongBits, (, this, ., base, ), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^, (]
[base, ), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >]
[=, 37, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (]
[int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (]
[(, temp, >, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;]
[>, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =]
[>, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =]
[>, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =]
[>, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *]
[), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +]
[temp, =, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +, (, int, )]
[=, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +, (, int, ), (]
[=, Double, ., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +, (, int, ), (]
[., doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^]
[doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^, (]
[doubleToLongBits, (, this, ., smallestValue, ), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^, (]
[smallestValue, ), ;, result, =, 37, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, if, (]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, if, (]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, if, (]
[int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, if, (, this, ., numberFormatOverride, !=]
[temp, ^, (, temp, >, >, >, 32, ), ), ;, if, (, this, ., numberFormatOverride, !=, null, ), {]
[(, temp, >, >, >, 32, ), ), ;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =]
[(, temp, >, >, >, 32, ), ), ;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =]
[(, temp, >, >, >, 32, ), ), ;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =]
[>, >, >, 32, ), ), ;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =, 37, *]
[>, 32, ), ), ;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =, 37, *, result, +]
[>, 32, ), ), ;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =, 37, *, result, +]
[>, 32, ), ), ;, if, (, this, ., numberFormatOverride, !=, null, ), {, result, =, 37, *, result, +]
[numberFormatOverride, !=, null, ), {, result, =, 37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;, }]
[null, ), {, result, =, 37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result, =]
[null, ), {, result, =, 37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result, =]
[null, ), {, result, =, 37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result, =]
[{, result, =, 37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result, =, 37, *]
[=, 37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result, =, 37, *, result, +]
[=, 37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result, =, 37, *, result, +]
[=, 37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, ), ;, }, result, =, 37, *, result, +]
[hashCode, (, ), ;, }, result, =, 37, *, result, +, this, ., tickUnit, ., hashCode, (, ), ;, return]
[hashCode, (, ), ;, return, result, ;, }, public, static, TickUnitSource, createLogTickUnits, (, Locale, locale, ), {, TickUnits, units, =]
[public, static, TickUnitSource, createLogTickUnits, (, Locale, locale, ), {, TickUnits, units, =, new, TickUnits, (, ), ;, NumberFormat, numberFormat, =]
[Locale, locale, ), {, TickUnits, units, =, new, TickUnits, (, ), ;, NumberFormat, numberFormat, =, new, LogFormat, (, ), ;]
[Locale, locale, ), {, TickUnits, units, =, new, TickUnits, (, ), ;, NumberFormat, numberFormat, =, new, LogFormat, (, ), ;]
[TickUnits, units, =, new, TickUnits, (, ), ;, NumberFormat, numberFormat, =, new, LogFormat, (, ), ;, units, ., add, (]
[new, TickUnits, (, ), ;, NumberFormat, numberFormat, =, new, LogFormat, (, ), ;, units, ., add, (, new, NumberTickUnit, (]
[(, ), ;, NumberFormat, numberFormat, =, new, LogFormat, (, ), ;, units, ., add, (, new, NumberTickUnit, (, 0.05, ,]
[;, NumberFormat, numberFormat, =, new, LogFormat, (, ), ;, units, ., add, (, new, NumberTickUnit, (, 0.05, ,, numberFormat, ,]
[new, LogFormat, (, ), ;, units, ., add, (, new, NumberTickUnit, (, 0.05, ,, numberFormat, ,, 2, ), ), ;]
[new, LogFormat, (, ), ;, units, ., add, (, new, NumberTickUnit, (, 0.05, ,, numberFormat, ,, 2, ), ), ;]
[;, units, ., add, (, new, NumberTickUnit, (, 0.05, ,, numberFormat, ,, 2, ), ), ;, units, ., add, (]
[add, (, new, NumberTickUnit, (, 0.05, ,, numberFormat, ,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (]
[new, NumberTickUnit, (, 0.05, ,, numberFormat, ,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.1, ,]
[(, 0.05, ,, numberFormat, ,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.1, ,, numberFormat, ,]
[,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.1, ,, numberFormat, ,, 10, ), ), ;]
[,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.1, ,, numberFormat, ,, 10, ), ), ;]
[;, units, ., add, (, new, NumberTickUnit, (, 0.1, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (]
[add, (, new, NumberTickUnit, (, 0.1, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (]
[new, NumberTickUnit, (, 0.1, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.2, ,]
[(, 0.1, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.2, ,, numberFormat, ,]
[,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.2, ,, numberFormat, ,, 2, ), ), ;]
[,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.2, ,, numberFormat, ,, 2, ), ), ;]
[;, units, ., add, (, new, NumberTickUnit, (, 0.2, ,, numberFormat, ,, 2, ), ), ;, units, ., add, (]
[add, (, new, NumberTickUnit, (, 0.2, ,, numberFormat, ,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (]
[new, NumberTickUnit, (, 0.2, ,, numberFormat, ,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.5, ,]
[(, 0.2, ,, numberFormat, ,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.5, ,, numberFormat, ,]
[,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.5, ,, numberFormat, ,, 5, ), ), ;]
[,, 2, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 0.5, ,, numberFormat, ,, 5, ), ), ;]
[;, units, ., add, (, new, NumberTickUnit, (, 0.5, ,, numberFormat, ,, 5, ), ), ;, units, ., add, (]
[add, (, new, NumberTickUnit, (, 0.5, ,, numberFormat, ,, 5, ), ), ;, units, ., add, (, new, NumberTickUnit, (]
[new, NumberTickUnit, (, 0.5, ,, numberFormat, ,, 5, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 1, ,]
[(, 0.5, ,, numberFormat, ,, 5, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 1, ,, numberFormat, ,]
[,, 5, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 1, ,, numberFormat, ,, 10, ), ), ;]
[,, 5, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 1, ,, numberFormat, ,, 10, ), ), ;]
[;, units, ., add, (, new, NumberTickUnit, (, 1, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (]
[add, (, new, NumberTickUnit, (, 1, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (]
[new, NumberTickUnit, (, 1, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 2, ,]
[(, 1, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 2, ,, numberFormat, ,]
[,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 2, ,, numberFormat, ,, 10, ), ), ;]
[,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 2, ,, numberFormat, ,, 10, ), ), ;]
[;, units, ., add, (, new, NumberTickUnit, (, 2, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (]
[add, (, new, NumberTickUnit, (, 2, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (]
[new, NumberTickUnit, (, 2, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 3, ,]
[(, 2, ,, numberFormat, ,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 3, ,, numberFormat, ,]
[,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 3, ,, numberFormat, ,, 15, ), ), ;]
[,, 10, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 3, ,, numberFormat, ,, 15, ), ), ;]
[;, units, ., add, (, new, NumberTickUnit, (, 3, ,, numberFormat, ,, 15, ), ), ;, units, ., add, (]
[add, (, new, NumberTickUnit, (, 3, ,, numberFormat, ,, 15, ), ), ;, units, ., add, (, new, NumberTickUnit, (]
[new, NumberTickUnit, (, 3, ,, numberFormat, ,, 15, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 4, ,]
[(, 3, ,, numberFormat, ,, 15, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 4, ,, numberFormat, ,]
[,, 15, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 4, ,, numberFormat, ,, 20, ), ), ;]
[,, 15, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 4, ,, numberFormat, ,, 20, ), ), ;]
[;, units, ., add, (, new, NumberTickUnit, (, 4, ,, numberFormat, ,, 20, ), ), ;, units, ., add, (]
[add, (, new, NumberTickUnit, (, 4, ,, numberFormat, ,, 20, ), ), ;, units, ., add, (, new, NumberTickUnit, (]
[new, NumberTickUnit, (, 4, ,, numberFormat, ,, 20, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 5, ,]
[(, 4, ,, numberFormat, ,, 20, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 5, ,, numberFormat, ,]
[,, 20, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 5, ,, numberFormat, ,, 25, ), ), ;]
[,, 20, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 5, ,, numberFormat, ,, 25, ), ), ;]
[;, units, ., add, (, new, NumberTickUnit, (, 5, ,, numberFormat, ,, 25, ), ), ;, units, ., add, (]
[add, (, new, NumberTickUnit, (, 5, ,, numberFormat, ,, 25, ), ), ;, units, ., add, (, new, NumberTickUnit, (]
[new, NumberTickUnit, (, 5, ,, numberFormat, ,, 25, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 6, ,]
[,, numberFormat, ,, 25, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 6, ,, numberFormat, ), ), ;]
[,, numberFormat, ,, 25, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 6, ,, numberFormat, ), ), ;]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 6, ,, numberFormat, ), ), ;, units, ., add, (]
[units, ., add, (, new, NumberTickUnit, (, 6, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (]
[add, (, new, NumberTickUnit, (, 6, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 7, ,]
[(, 6, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 7, ,, numberFormat, ), ), ;]
[(, 6, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 7, ,, numberFormat, ), ), ;]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 7, ,, numberFormat, ), ), ;, units, ., add, (]
[units, ., add, (, new, NumberTickUnit, (, 7, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (]
[add, (, new, NumberTickUnit, (, 7, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 8, ,]
[(, 7, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 8, ,, numberFormat, ), ), ;]
[(, 7, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 8, ,, numberFormat, ), ), ;]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 8, ,, numberFormat, ), ), ;, units, ., add, (]
[units, ., add, (, new, NumberTickUnit, (, 8, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (]
[add, (, new, NumberTickUnit, (, 8, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 9, ,]
[(, 8, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 9, ,, numberFormat, ), ), ;]
[(, 8, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 9, ,, numberFormat, ), ), ;]
[), ), ;, units, ., add, (, new, NumberTickUnit, (, 9, ,, numberFormat, ), ), ;, units, ., add, (]
[units, ., add, (, new, NumberTickUnit, (, 9, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (]
[add, (, new, NumberTickUnit, (, 9, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 10, ,]
[9, ,, numberFormat, ), ), ;, units, ., add, (, new, NumberTickUnit, (, 10, ,, numberFormat, ), ), ;, return]
