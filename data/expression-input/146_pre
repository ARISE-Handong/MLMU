[final, Node, endNode, ;, final, Node, parent, ;, Collapse, (, Node, startNode, ,, Node, endNode, ,, Node, parent, ), {]
[final, Node, endNode, ;, final, Node, parent, ;, Collapse, (, Node, startNode, ,, Node, endNode, ,, Node, parent, ), {]
[final, Node, parent, ;, Collapse, (, Node, startNode, ,, Node, endNode, ,, Node, parent, ), {, this, ., startNode, =]
[parent, ;, Collapse, (, Node, startNode, ,, Node, endNode, ,, Node, parent, ), {, this, ., startNode, =, startNode, ;]
[parent, ;, Collapse, (, Node, startNode, ,, Node, endNode, ,, Node, parent, ), {, this, ., startNode, =, startNode, ;]
[Node, startNode, ,, Node, endNode, ,, Node, parent, ), {, this, ., startNode, =, startNode, ;, this, ., endNode, =]
[,, Node, endNode, ,, Node, parent, ), {, this, ., startNode, =, startNode, ;, this, ., endNode, =, endNode, ;]
[,, Node, endNode, ,, Node, parent, ), {, this, ., startNode, =, startNode, ;, this, ., endNode, =, endNode, ;]
[Node, parent, ), {, this, ., startNode, =, startNode, ;, this, ., endNode, =, endNode, ;, this, ., parent, =]
[endNode, =, endNode, ;, this, ., parent, =, parent, ;, }, }, private, final, List, <, Collapse, >, collapses, =]
[endNode, =, endNode, ;, this, ., parent, =, parent, ;, }, }, private, final, List, <, Collapse, >, collapses, =]
[List, <, Collapse, >, collapses, =, Lists, ., newArrayList, (, ), ;, private, final, Set, <, Node, >, nodesToCollapse, =]
[List, <, Collapse, >, collapses, =, Lists, ., newArrayList, (, ), ;, private, final, Set, <, Node, >, nodesToCollapse, =]
[private, final, Set, <, Node, >, nodesToCollapse, =, Sets, ., newHashSet, (, ), ;, CollapseVariableDeclarations, (, AbstractCompiler, compiler, ), {]
[private, final, Set, <, Node, >, nodesToCollapse, =, Sets, ., newHashSet, (, ), ;, CollapseVariableDeclarations, (, AbstractCompiler, compiler, ), {]
[Node, >, nodesToCollapse, =, Sets, ., newHashSet, (, ), ;, CollapseVariableDeclarations, (, AbstractCompiler, compiler, ), {, Preconditions, ., checkState, (]
[>, nodesToCollapse, =, Sets, ., newHashSet, (, ), ;, CollapseVariableDeclarations, (, AbstractCompiler, compiler, ), {, Preconditions, ., checkState, (, !]
[>, nodesToCollapse, =, Sets, ., newHashSet, (, ), ;, CollapseVariableDeclarations, (, AbstractCompiler, compiler, ), {, Preconditions, ., checkState, (, !]
[>, nodesToCollapse, =, Sets, ., newHashSet, (, ), ;, CollapseVariableDeclarations, (, AbstractCompiler, compiler, ), {, Preconditions, ., checkState, (, !]
[AbstractCompiler, compiler, ), {, Preconditions, ., checkState, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[AbstractCompiler, compiler, ), {, Preconditions, ., checkState, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[Preconditions, ., checkState, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, collapses, ., clear, (, ), ;]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, collapses, ., clear, (, ), ;]
[(, Node, externs, ,, Node, root, ), {, collapses, ., clear, (, ), ;, nodesToCollapse, ., clear, (, ), ;]
[(, Node, externs, ,, Node, root, ), {, collapses, ., clear, (, ), ;, nodesToCollapse, ., clear, (, ), ;]
[Node, root, ), {, collapses, ., clear, (, ), ;, nodesToCollapse, ., clear, (, ), ;, NodeTraversal, ., traverse, (]
[), {, collapses, ., clear, (, ), ;, nodesToCollapse, ., clear, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[collapses, ., clear, (, ), ;, nodesToCollapse, ., clear, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[clear, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherCollapses, (, ), ), ;, if, (]
[(, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherCollapses, (, ), ), ;, if, (, !]
[(, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherCollapses, (, ), ), ;, if, (, !]
[compiler, ,, root, ,, new, GatherCollapses, (, ), ), ;, if, (, !, collapses, ., isEmpty, (, ), ), {]
[new, GatherCollapses, (, ), ), ;, if, (, !, collapses, ., isEmpty, (, ), ), {, applyCollapses, (, ), ;]
[new, GatherCollapses, (, ), ), ;, if, (, !, collapses, ., isEmpty, (, ), ), {, applyCollapses, (, ), ;]
[reportCodeChange, (, ), ;, }, }, private, class, GatherCollapses, extends, AbstractPostOrderCallback, {, private, final, Set, <, Var, >, blacklistedVars, =]
[reportCodeChange, (, ), ;, }, }, private, class, GatherCollapses, extends, AbstractPostOrderCallback, {, private, final, Set, <, Var, >, blacklistedVars, =]
[), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isVar, (, ), ), {]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (]
[Node, n, ,, Node, parent, ), {, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,]
[{, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, }, if, (]
[{, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, }, if, (]
[if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, }, if, (, !]
[if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, }, if, (, !]
[), ), {, blacklistStubVars, (, t, ,, n, ), ;, }, if, (, !, n, ., isVar, (, ), &&]
[), {, blacklistStubVars, (, t, ,, n, ), ;, }, if, (, !, n, ., isVar, (, ), &&, !]
[blacklistStubVars, (, t, ,, n, ), ;, }, if, (, !, n, ., isVar, (, ), &&, !, canBeRedeclared, (]
[t, ,, n, ), ;, }, if, (, !, n, ., isVar, (, ), &&, !, canBeRedeclared, (, n, ,]
[t, ,, n, ), ;, }, if, (, !, n, ., isVar, (, ), &&, !, canBeRedeclared, (, n, ,]
[isVar, (, ), &&, !, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), ), return, ;, if, (]
[isVar, (, ), &&, !, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), ), return, ;, if, (]
[!, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), ), return, ;, if, (, nodesToCollapse, ., contains, (]
[getScope, (, ), ), ), return, ;, if, (, nodesToCollapse, ., contains, (, n, ), ), return, ;, if, (]
[getScope, (, ), ), ), return, ;, if, (, nodesToCollapse, ., contains, (, n, ), ), return, ;, if, (]
[contains, (, n, ), ), return, ;, if, (, parent, ., isIf, (, ), ), return, ;, Node, varNode, =]
[return, ;, if, (, parent, ., isIf, (, ), ), return, ;, Node, varNode, =, n, ;, boolean, hasVar, =]
[return, ;, if, (, parent, ., isIf, (, ), ), return, ;, Node, varNode, =, n, ;, boolean, hasVar, =]
[isIf, (, ), ), return, ;, Node, varNode, =, n, ;, boolean, hasVar, =, n, ., isVar, (, ), ;]
[), ), return, ;, Node, varNode, =, n, ;, boolean, hasVar, =, n, ., isVar, (, ), ;, n, =]
[), ), return, ;, Node, varNode, =, n, ;, boolean, hasVar, =, n, ., isVar, (, ), ;, n, =]
[boolean, hasVar, =, n, ., isVar, (, ), ;, n, =, n, ., getNext, (, ), ;, boolean, hasNodesToCollapse, =]
[., isVar, (, ), ;, n, =, n, ., getNext, (, ), ;, boolean, hasNodesToCollapse, =, false, ;, while, (]
[., isVar, (, ), ;, n, =, n, ., getNext, (, ), ;, boolean, hasNodesToCollapse, =, false, ;, while, (]
[., isVar, (, ), ;, n, =, n, ., getNext, (, ), ;, boolean, hasNodesToCollapse, =, false, ;, while, (]
[(, ), ;, n, =, n, ., getNext, (, ), ;, boolean, hasNodesToCollapse, =, false, ;, while, (, n, !=]
[;, n, =, n, ., getNext, (, ), ;, boolean, hasNodesToCollapse, =, false, ;, while, (, n, !=, null, &&]
[n, =, n, ., getNext, (, ), ;, boolean, hasNodesToCollapse, =, false, ;, while, (, n, !=, null, &&, (]
[n, =, n, ., getNext, (, ), ;, boolean, hasNodesToCollapse, =, false, ;, while, (, n, !=, null, &&, (]
[n, =, n, ., getNext, (, ), ;, boolean, hasNodesToCollapse, =, false, ;, while, (, n, !=, null, &&, (]
[), ;, boolean, hasNodesToCollapse, =, false, ;, while, (, n, !=, null, &&, (, n, ., isVar, (, ), ||]
[boolean, hasNodesToCollapse, =, false, ;, while, (, n, !=, null, &&, (, n, ., isVar, (, ), ||, canBeRedeclared, (]
[=, false, ;, while, (, n, !=, null, &&, (, n, ., isVar, (, ), ||, canBeRedeclared, (, n, ,]
[=, false, ;, while, (, n, !=, null, &&, (, n, ., isVar, (, ), ||, canBeRedeclared, (, n, ,]
[., isVar, (, ), ||, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), ), ), {, if, (]
[., isVar, (, ), ||, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), ), ), {, if, (]
[n, ,, t, ., getScope, (, ), ), ), ), {, if, (, n, ., isVar, (, ), ), {]
[t, ., getScope, (, ), ), ), ), {, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (]
[getScope, (, ), ), ), ), {, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,]
[), ), ), {, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;]
[), {, if, (, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, hasVar, =]
[(, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, hasVar, =, true, ;, }]
[(, n, ., isVar, (, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, hasVar, =, true, ;, }]
[(, ), ), {, blacklistStubVars, (, t, ,, n, ), ;, hasVar, =, true, ;, }, nodesToCollapse, ., add, (]
[{, blacklistStubVars, (, t, ,, n, ), ;, hasVar, =, true, ;, }, nodesToCollapse, ., add, (, n, ), ;]
[(, t, ,, n, ), ;, hasVar, =, true, ;, }, nodesToCollapse, ., add, (, n, ), ;, hasNodesToCollapse, =]
[,, n, ), ;, hasVar, =, true, ;, }, nodesToCollapse, ., add, (, n, ), ;, hasNodesToCollapse, =, true, ;]
[), ;, hasVar, =, true, ;, }, nodesToCollapse, ., add, (, n, ), ;, hasNodesToCollapse, =, true, ;, n, =]
[), ;, hasVar, =, true, ;, }, nodesToCollapse, ., add, (, n, ), ;, hasNodesToCollapse, =, true, ;, n, =]
[add, (, n, ), ;, hasNodesToCollapse, =, true, ;, n, =, n, ., getNext, (, ), ;, }, if, (]
[add, (, n, ), ;, hasNodesToCollapse, =, true, ;, n, =, n, ., getNext, (, ), ;, }, if, (]
[n, ), ;, hasNodesToCollapse, =, true, ;, n, =, n, ., getNext, (, ), ;, }, if, (, hasNodesToCollapse, &&]
[hasNodesToCollapse, =, true, ;, n, =, n, ., getNext, (, ), ;, }, if, (, hasNodesToCollapse, &&, hasVar, ), {]
[hasNodesToCollapse, =, true, ;, n, =, n, ., getNext, (, ), ;, }, if, (, hasNodesToCollapse, &&, hasVar, ), {]
[n, =, n, ., getNext, (, ), ;, }, if, (, hasNodesToCollapse, &&, hasVar, ), {, nodesToCollapse, ., add, (]
[., getNext, (, ), ;, }, if, (, hasNodesToCollapse, &&, hasVar, ), {, nodesToCollapse, ., add, (, varNode, ), ;]
[., getNext, (, ), ;, }, if, (, hasNodesToCollapse, &&, hasVar, ), {, nodesToCollapse, ., add, (, varNode, ), ;]
[;, }, if, (, hasNodesToCollapse, &&, hasVar, ), {, nodesToCollapse, ., add, (, varNode, ), ;, collapses, ., add, (]
[(, hasNodesToCollapse, &&, hasVar, ), {, nodesToCollapse, ., add, (, varNode, ), ;, collapses, ., add, (, new, Collapse, (]
[&&, hasVar, ), {, nodesToCollapse, ., add, (, varNode, ), ;, collapses, ., add, (, new, Collapse, (, varNode, ,]
[), {, nodesToCollapse, ., add, (, varNode, ), ;, collapses, ., add, (, new, Collapse, (, varNode, ,, n, ,]
[), ;, }, }, private, void, blacklistStubVars, (, NodeTraversal, t, ,, Node, varNode, ), {, for, (, Node, child, =]
[), ;, }, }, private, void, blacklistStubVars, (, NodeTraversal, t, ,, Node, varNode, ), {, for, (, Node, child, =]
[blacklistStubVars, (, NodeTraversal, t, ,, Node, varNode, ), {, for, (, Node, child, =, varNode, ., getFirstChild, (, ), ;]
[blacklistStubVars, (, NodeTraversal, t, ,, Node, varNode, ), {, for, (, Node, child, =, varNode, ., getFirstChild, (, ), ;]
[NodeTraversal, t, ,, Node, varNode, ), {, for, (, Node, child, =, varNode, ., getFirstChild, (, ), ;, child, !=]
[,, Node, varNode, ), {, for, (, Node, child, =, varNode, ., getFirstChild, (, ), ;, child, !=, null, ;]
[varNode, ), {, for, (, Node, child, =, varNode, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[varNode, ), {, for, (, Node, child, =, varNode, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., getFirstChild, (, ), ==]
[child, =, child, ., getNext, (, ), ), {, if, (, child, ., getFirstChild, (, ), ==, null, ), {]
[child, =, child, ., getNext, (, ), ), {, if, (, child, ., getFirstChild, (, ), ==, null, ), {]
[getNext, (, ), ), {, if, (, child, ., getFirstChild, (, ), ==, null, ), {, blacklistedVars, ., add, (]
[getNext, (, ), ), {, if, (, child, ., getFirstChild, (, ), ==, null, ), {, blacklistedVars, ., add, (]
[getNext, (, ), ), {, if, (, child, ., getFirstChild, (, ), ==, null, ), {, blacklistedVars, ., add, (]
[., getFirstChild, (, ), ==, null, ), {, blacklistedVars, ., add, (, t, ., getScope, (, ), ., getVar, (]
[., getFirstChild, (, ), ==, null, ), {, blacklistedVars, ., add, (, t, ., getScope, (, ), ., getVar, (]
[), ), ), ;, }, }, }, private, boolean, canBeRedeclared, (, Node, n, ,, Scope, s, ), {, if, (]
[), ), ;, }, }, }, private, boolean, canBeRedeclared, (, Node, n, ,, Scope, s, ), {, if, (, !]
[), ), ;, }, }, }, private, boolean, canBeRedeclared, (, Node, n, ,, Scope, s, ), {, if, (, !]
[}, }, private, boolean, canBeRedeclared, (, Node, n, ,, Scope, s, ), {, if, (, !, NodeUtil, ., isExprAssign, (]
[(, Node, n, ,, Scope, s, ), {, if, (, !, NodeUtil, ., isExprAssign, (, n, ), ), {, return]
[), {, if, (, !, NodeUtil, ., isExprAssign, (, n, ), ), {, return, false, ;, }, Node, assign, =]
[), {, if, (, !, NodeUtil, ., isExprAssign, (, n, ), ), {, return, false, ;, }, Node, assign, =]
[n, ), ), {, return, false, ;, }, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =]
[n, ), ), {, return, false, ;, }, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =]
[Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, if, (]
[assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, if, (, !]
[assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, if, (, !]
[Node, lhs, =, assign, ., getFirstChild, (, ), ;, if, (, !, lhs, ., isName, (, ), ), {, return]
[(, ), ;, if, (, !, lhs, ., isName, (, ), ), {, return, false, ;, }, Var, var, =]
[(, ), ;, if, (, !, lhs, ., isName, (, ), ), {, return, false, ;, }, Var, var, =]
[(, !, lhs, ., isName, (, ), ), {, return, false, ;, }, Var, var, =, s, ., getVar, (]
[(, !, lhs, ., isName, (, ), ), {, return, false, ;, }, Var, var, =, s, ., getVar, (]
[{, return, false, ;, }, Var, var, =, s, ., getVar, (, lhs, ., getString, (, ), ), ;, return]
[{, return, false, ;, }, Var, var, =, s, ., getVar, (, lhs, ., getString, (, ), ), ;, return]
[{, return, false, ;, }, Var, var, =, s, ., getVar, (, lhs, ., getString, (, ), ), ;, return]
[{, return, false, ;, }, Var, var, =, s, ., getVar, (, lhs, ., getString, (, ), ), ;, return]
[{, return, false, ;, }, Var, var, =, s, ., getVar, (, lhs, ., getString, (, ), ), ;, return]
[false, ;, }, Var, var, =, s, ., getVar, (, lhs, ., getString, (, ), ), ;, return, var, !=]
[}, Var, var, =, s, ., getVar, (, lhs, ., getString, (, ), ), ;, return, var, !=, null, &&]
[}, Var, var, =, s, ., getVar, (, lhs, ., getString, (, ), ), ;, return, var, !=, null, &&]
[}, Var, var, =, s, ., getVar, (, lhs, ., getString, (, ), ), ;, return, var, !=, null, &&]
[getVar, (, lhs, ., getString, (, ), ), ;, return, var, !=, null, &&, var, ., getScope, (, ), ==]
[lhs, ., getString, (, ), ), ;, return, var, !=, null, &&, var, ., getScope, (, ), ==, s, &&]
[., getString, (, ), ), ;, return, var, !=, null, &&, var, ., getScope, (, ), ==, s, &&, !]
[(, ), ), ;, return, var, !=, null, &&, var, ., getScope, (, ), ==, s, &&, !, isNamedParameter, (]
[;, return, var, !=, null, &&, var, ., getScope, (, ), ==, s, &&, !, isNamedParameter, (, var, ), &&]
[return, var, !=, null, &&, var, ., getScope, (, ), ==, s, &&, !, isNamedParameter, (, var, ), &&, !]
[return, var, !=, null, &&, var, ., getScope, (, ), ==, s, &&, !, isNamedParameter, (, var, ), &&, !]
[&&, var, ., getScope, (, ), ==, s, &&, !, isNamedParameter, (, var, ), &&, !, blacklistedVars, ., contains, (]
[&&, !, blacklistedVars, ., contains, (, var, ), ;, }, }, private, boolean, isNamedParameter, (, Var, v, ), {, return]
[&&, !, blacklistedVars, ., contains, (, var, ), ;, }, }, private, boolean, isNamedParameter, (, Var, v, ), {, return]
[&&, !, blacklistedVars, ., contains, (, var, ), ;, }, }, private, boolean, isNamedParameter, (, Var, v, ), {, return]
[getParentNode, (, ), ., isParamList, (, ), ;, }, private, void, applyCollapses, (, ), {, for, (, Collapse, collapse, :]
[), ;, }, private, void, applyCollapses, (, ), {, for, (, Collapse, collapse, :, collapses, ), {, Node, var, =]
[private, void, applyCollapses, (, ), {, for, (, Collapse, collapse, :, collapses, ), {, Node, var, =, new, Node, (]
[private, void, applyCollapses, (, ), {, for, (, Collapse, collapse, :, collapses, ), {, Node, var, =, new, Node, (]
[{, for, (, Collapse, collapse, :, collapses, ), {, Node, var, =, new, Node, (, Token, ., VAR, ), ;]
[{, for, (, Collapse, collapse, :, collapses, ), {, Node, var, =, new, Node, (, Token, ., VAR, ), ;]
[collapse, :, collapses, ), {, Node, var, =, new, Node, (, Token, ., VAR, ), ;, var, ., copyInformationFrom, (]
[collapse, :, collapses, ), {, Node, var, =, new, Node, (, Token, ., VAR, ), ;, var, ., copyInformationFrom, (]
[Node, var, =, new, Node, (, Token, ., VAR, ), ;, var, ., copyInformationFrom, (, collapse, ., startNode, ), ;]
[Node, var, =, new, Node, (, Token, ., VAR, ), ;, var, ., copyInformationFrom, (, collapse, ., startNode, ), ;]
[Node, var, =, new, Node, (, Token, ., VAR, ), ;, var, ., copyInformationFrom, (, collapse, ., startNode, ), ;]
[Token, ., VAR, ), ;, var, ., copyInformationFrom, (, collapse, ., startNode, ), ;, collapse, ., parent, ., addChildBefore, (]
[VAR, ), ;, var, ., copyInformationFrom, (, collapse, ., startNode, ), ;, collapse, ., parent, ., addChildBefore, (, var, ,]
[VAR, ), ;, var, ., copyInformationFrom, (, collapse, ., startNode, ), ;, collapse, ., parent, ., addChildBefore, (, var, ,]
[., startNode, ), ;, collapse, ., parent, ., addChildBefore, (, var, ,, collapse, ., startNode, ), ;, boolean, redeclaration, =]
[., addChildBefore, (, var, ,, collapse, ., startNode, ), ;, boolean, redeclaration, =, false, ;, for, (, Node, n, =]
[., addChildBefore, (, var, ,, collapse, ., startNode, ), ;, boolean, redeclaration, =, false, ;, for, (, Node, n, =]
[,, collapse, ., startNode, ), ;, boolean, redeclaration, =, false, ;, for, (, Node, n, =, collapse, ., startNode, ;]
[,, collapse, ., startNode, ), ;, boolean, redeclaration, =, false, ;, for, (, Node, n, =, collapse, ., startNode, ;]
[., startNode, ), ;, boolean, redeclaration, =, false, ;, for, (, Node, n, =, collapse, ., startNode, ;, n, !=]
[., startNode, ), ;, boolean, redeclaration, =, false, ;, for, (, Node, n, =, collapse, ., startNode, ;, n, !=]
[for, (, Node, n, =, collapse, ., startNode, ;, n, !=, collapse, ., endNode, ;, ), {, Node, next, =]
[for, (, Node, n, =, collapse, ., startNode, ;, n, !=, collapse, ., endNode, ;, ), {, Node, next, =]
[., startNode, ;, n, !=, collapse, ., endNode, ;, ), {, Node, next, =, n, ., getNext, (, ), ;]
[., startNode, ;, n, !=, collapse, ., endNode, ;, ), {, Node, next, =, n, ., getNext, (, ), ;]
[!=, collapse, ., endNode, ;, ), {, Node, next, =, n, ., getNext, (, ), ;, Preconditions, ., checkState, (]
[!=, collapse, ., endNode, ;, ), {, Node, next, =, n, ., getNext, (, ), ;, Preconditions, ., checkState, (]
[!=, collapse, ., endNode, ;, ), {, Node, next, =, n, ., getNext, (, ), ;, Preconditions, ., checkState, (]
[{, Node, next, =, n, ., getNext, (, ), ;, Preconditions, ., checkState, (, var, ., getNext, (, ), ==]
[=, n, ., getNext, (, ), ;, Preconditions, ., checkState, (, var, ., getNext, (, ), ==, n, ), ;]
[=, n, ., getNext, (, ), ;, Preconditions, ., checkState, (, var, ., getNext, (, ), ==, n, ), ;]
[=, n, ., getNext, (, ), ;, Preconditions, ., checkState, (, var, ., getNext, (, ), ==, n, ), ;]
[;, Preconditions, ., checkState, (, var, ., getNext, (, ), ==, n, ), ;, collapse, ., parent, ., removeChildAfter, (]
[var, ., getNext, (, ), ==, n, ), ;, collapse, ., parent, ., removeChildAfter, (, var, ), ;, if, (]
[var, ., getNext, (, ), ==, n, ), ;, collapse, ., parent, ., removeChildAfter, (, var, ), ;, if, (]
[collapse, ., parent, ., removeChildAfter, (, var, ), ;, if, (, n, ., isVar, (, ), ), {, while, (]
[collapse, ., parent, ., removeChildAfter, (, var, ), ;, if, (, n, ., isVar, (, ), ), {, while, (]
[), ;, if, (, n, ., isVar, (, ), ), {, while, (, n, ., hasChildren, (, ), ), {]
[), ;, if, (, n, ., isVar, (, ), ), {, while, (, n, ., hasChildren, (, ), ), {]
[n, ., isVar, (, ), ), {, while, (, n, ., hasChildren, (, ), ), {, var, ., addChildToBack, (]
[n, ., isVar, (, ), ), {, while, (, n, ., hasChildren, (, ), ), {, var, ., addChildToBack, (]
[), {, var, ., addChildToBack, (, n, ., removeFirstChild, (, ), ), ;, }, }, else, {, Node, assign, =]
[), {, var, ., addChildToBack, (, n, ., removeFirstChild, (, ), ), ;, }, }, else, {, Node, assign, =]
[(, ), ), ;, }, }, else, {, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =]
[(, ), ), ;, }, }, else, {, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =]
[else, {, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;]
[else, {, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;]
[=, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (]
[=, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (]
[assign, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (, lhs, ., isName, (, ), ), ;, Node, rhs, =]
[assign, ., getFirstChild, (, ), ;, Preconditions, ., checkState, (, lhs, ., isName, (, ), ), ;, Node, rhs, =]
[Preconditions, ., checkState, (, lhs, ., isName, (, ), ), ;, Node, rhs, =, assign, ., getLastChild, (, ), ;]
[Preconditions, ., checkState, (, lhs, ., isName, (, ), ), ;, Node, rhs, =, assign, ., getLastChild, (, ), ;]
[lhs, ., isName, (, ), ), ;, Node, rhs, =, assign, ., getLastChild, (, ), ;, lhs, ., addChildToBack, (]
[lhs, ., isName, (, ), ), ;, Node, rhs, =, assign, ., getLastChild, (, ), ;, lhs, ., addChildToBack, (]
[Node, rhs, =, assign, ., getLastChild, (, ), ;, lhs, ., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;]
[Node, rhs, =, assign, ., getLastChild, (, ), ;, lhs, ., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;]
[., getLastChild, (, ), ;, lhs, ., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, var, ., addChildToBack, (]
[., getLastChild, (, ), ;, lhs, ., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, var, ., addChildToBack, (]
[addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, var, ., addChildToBack, (, lhs, ., detachFromParent, (, ), ), ;]
[rhs, ., detachFromParent, (, ), ), ;, var, ., addChildToBack, (, lhs, ., detachFromParent, (, ), ), ;, redeclaration, =]
[(, ), ), ;, var, ., addChildToBack, (, lhs, ., detachFromParent, (, ), ), ;, redeclaration, =, true, ;, }]
[), ;, var, ., addChildToBack, (, lhs, ., detachFromParent, (, ), ), ;, redeclaration, =, true, ;, }, n, =]
[(, lhs, ., detachFromParent, (, ), ), ;, redeclaration, =, true, ;, }, n, =, next, ;, }, if, (]
[), ;, redeclaration, =, true, ;, }, n, =, next, ;, }, if, (, redeclaration, ), {, JSDocInfo, info, =]
[;, }, n, =, next, ;, }, if, (, redeclaration, ), {, JSDocInfo, info, =, new, JSDocInfo, (, ), ;]
[;, }, n, =, next, ;, }, if, (, redeclaration, ), {, JSDocInfo, info, =, new, JSDocInfo, (, ), ;]
[next, ;, }, if, (, redeclaration, ), {, JSDocInfo, info, =, new, JSDocInfo, (, ), ;, info, ., addSuppression, (]
[if, (, redeclaration, ), {, JSDocInfo, info, =, new, JSDocInfo, (, ), ;, info, ., addSuppression, (, "duplicate", ), ;]
[if, (, redeclaration, ), {, JSDocInfo, info, =, new, JSDocInfo, (, ), ;, info, ., addSuppression, (, "duplicate", ), ;]
[{, JSDocInfo, info, =, new, JSDocInfo, (, ), ;, info, ., addSuppression, (, "duplicate", ), ;, var, ., setJSDocInfo, (]
