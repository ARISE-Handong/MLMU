[google, ., javascript, ., rhino, ., Node, ;, class, TransformAMDToCJSModule, implements, CompilerPass, {, @, VisibleForTesting, final, static, DiagnosticType, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, =]
[google, ., javascript, ., rhino, ., Node, ;, class, TransformAMDToCJSModule, implements, CompilerPass, {, @, VisibleForTesting, final, static, DiagnosticType, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, =]
[rhino, ., Node, ;, class, TransformAMDToCJSModule, implements, CompilerPass, {, @, VisibleForTesting, final, static, DiagnosticType, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, =, DiagnosticType, ., error, (]
[Node, ;, class, TransformAMDToCJSModule, implements, CompilerPass, {, @, VisibleForTesting, final, static, DiagnosticType, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, =, DiagnosticType, ., error, (, "UNSUPPORTED_DEFINE_SIGNATURE", ,]
[Node, ;, class, TransformAMDToCJSModule, implements, CompilerPass, {, @, VisibleForTesting, final, static, DiagnosticType, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, =, DiagnosticType, ., error, (, "UNSUPPORTED_DEFINE_SIGNATURE", ,]
[Node, ;, class, TransformAMDToCJSModule, implements, CompilerPass, {, @, VisibleForTesting, final, static, DiagnosticType, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, =, DiagnosticType, ., error, (, "UNSUPPORTED_DEFINE_SIGNATURE", ,]
[class, TransformAMDToCJSModule, implements, CompilerPass, {, @, VisibleForTesting, final, static, DiagnosticType, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, =, DiagnosticType, ., error, (, "UNSUPPORTED_DEFINE_SIGNATURE", ,, "Only define(function() ...), define(OBJECT_LITERAL) and define(", +]
[implements, CompilerPass, {, @, VisibleForTesting, final, static, DiagnosticType, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, =, DiagnosticType, ., error, (, "UNSUPPORTED_DEFINE_SIGNATURE", ,, "Only define(function() ...), define(OBJECT_LITERAL) and define(", +, "['dep', 'dep1'], function(d0, d2, [exports, module]) ...) forms ", +]
[UNSUPPORTED_DEFINE_SIGNATURE_ERROR, =, DiagnosticType, ., error, (, "UNSUPPORTED_DEFINE_SIGNATURE", ,, "Only define(function() ...), define(OBJECT_LITERAL) and define(", +, "['dep', 'dep1'], function(d0, d2, [exports, module]) ...) forms ", +, "are currently supported.", ), ;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =]
[UNSUPPORTED_DEFINE_SIGNATURE_ERROR, =, DiagnosticType, ., error, (, "UNSUPPORTED_DEFINE_SIGNATURE", ,, "Only define(function() ...), define(OBJECT_LITERAL) and define(", +, "['dep', 'dep1'], function(d0, d2, [exports, module]) ...) forms ", +, "are currently supported.", ), ;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =]
[error, (, "UNSUPPORTED_DEFINE_SIGNATURE", ,, "Only define(function() ...), define(OBJECT_LITERAL) and define(", +, "['dep', 'dep1'], function(d0, d2, [exports, module]) ...) forms ", +, "are currently supported.", ), ;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =, DiagnosticType, ., error, (]
["UNSUPPORTED_DEFINE_SIGNATURE", ,, "Only define(function() ...), define(OBJECT_LITERAL) and define(", +, "['dep', 'dep1'], function(d0, d2, [exports, module]) ...) forms ", +, "are currently supported.", ), ;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =, DiagnosticType, ., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,]
[;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =, DiagnosticType, ., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,, "The define function must be called as a top-level statement.", ), ;, final, static, DiagnosticType, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, =]
[;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =, DiagnosticType, ., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,, "The define function must be called as a top-level statement.", ), ;, final, static, DiagnosticType, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, =]
[NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =, DiagnosticType, ., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,, "The define function must be called as a top-level statement.", ), ;, final, static, DiagnosticType, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,, "The define function must be called as a top-level statement.", ), ;, final, static, DiagnosticType, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, =, DiagnosticType, ., warning, (, "REQUIREJS_PLUGINS_NOT_SUPPORTED", ,]
[;, final, static, DiagnosticType, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, =, DiagnosticType, ., warning, (, "REQUIREJS_PLUGINS_NOT_SUPPORTED", ,, "Plugins in define requirements are not supported: {0}", ), ;, final, static, String, VAR_RENAME_SUFFIX, =]
[,, "Plugins in define requirements are not supported: {0}", ), ;, final, static, String, VAR_RENAME_SUFFIX, =, "__alias", ;, private, final, AbstractCompiler, compiler, ;, private, int, renameIndex, =]
[=, "__alias", ;, private, final, AbstractCompiler, compiler, ;, private, int, renameIndex, =, 0, ;, TransformAMDToCJSModule, (, AbstractCompiler, compiler, ), {]
[=, "__alias", ;, private, final, AbstractCompiler, compiler, ;, private, int, renameIndex, =, 0, ;, TransformAMDToCJSModule, (, AbstractCompiler, compiler, ), {]
[final, AbstractCompiler, compiler, ;, private, int, renameIndex, =, 0, ;, TransformAMDToCJSModule, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[root, ,, new, TransformAMDModulesCallback, (, ), ), ;, }, private, void, unsupportedDefineError, (, NodeTraversal, t, ,, Node, n, ), {]
[root, ,, new, TransformAMDModulesCallback, (, ), ), ;, }, private, void, unsupportedDefineError, (, NodeTraversal, t, ,, Node, n, ), {]
[(, ), ), ;, }, private, void, unsupportedDefineError, (, NodeTraversal, t, ,, Node, n, ), {, t, ., report, (]
[), ;, }, private, void, unsupportedDefineError, (, NodeTraversal, t, ,, Node, n, ), {, t, ., report, (, n, ,]
[{, t, ., report, (, n, ,, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, ), ;, }, private, boolean, isVirtualModuleName, (, String, moduleName, ), {, return]
[{, t, ., report, (, n, ,, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, ), ;, }, private, boolean, isVirtualModuleName, (, String, moduleName, ), {, return]
[{, t, ., report, (, n, ,, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, ), ;, }, private, boolean, isVirtualModuleName, (, String, moduleName, ), {, return]
[{, t, ., report, (, n, ,, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, ), ;, }, private, boolean, isVirtualModuleName, (, String, moduleName, ), {, return]
[(, n, ,, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, ), ;, }, private, boolean, isVirtualModuleName, (, String, moduleName, ), {, return, "exports", ., equals, (]
[UNSUPPORTED_DEFINE_SIGNATURE_ERROR, ), ;, }, private, boolean, isVirtualModuleName, (, String, moduleName, ), {, return, "exports", ., equals, (, moduleName, ), ||]
[UNSUPPORTED_DEFINE_SIGNATURE_ERROR, ), ;, }, private, boolean, isVirtualModuleName, (, String, moduleName, ), {, return, "exports", ., equals, (, moduleName, ), ||]
[private, boolean, isVirtualModuleName, (, String, moduleName, ), {, return, "exports", ., equals, (, moduleName, ), ||, "require", ., equals, (]
[(, String, moduleName, ), {, return, "exports", ., equals, (, moduleName, ), ||, "require", ., equals, (, moduleName, ), ||]
[(, String, moduleName, ), {, return, "exports", ., equals, (, moduleName, ), ||, "require", ., equals, (, moduleName, ), ||]
[{, return, "exports", ., equals, (, moduleName, ), ||, "require", ., equals, (, moduleName, ), ||, "module", ., equals, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), &&]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), &&]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), &&]
[n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), &&, n, ., getFirstChild, (, ), !=]
[Node, parent, ), {, if, (, n, ., isCall, (, ), &&, n, ., getFirstChild, (, ), !=, null, &&]
[Node, parent, ), {, if, (, n, ., isCall, (, ), &&, n, ., getFirstChild, (, ), !=, null, &&]
[Node, parent, ), {, if, (, n, ., isCall, (, ), &&, n, ., getFirstChild, (, ), !=, null, &&]
[), &&, n, ., getFirstChild, (, ), !=, null, &&, n, ., getFirstChild, (, ), ., isName, (, ), &&]
[), &&, n, ., getFirstChild, (, ), !=, null, &&, n, ., getFirstChild, (, ), ., isName, (, ), &&]
[getFirstChild, (, ), !=, null, &&, n, ., getFirstChild, (, ), ., isName, (, ), &&, "define", ., equals, (]
[getFirstChild, (, ), !=, null, &&, n, ., getFirstChild, (, ), ., isName, (, ), &&, "define", ., equals, (]
[getFirstChild, (, ), !=, null, &&, n, ., getFirstChild, (, ), ., isName, (, ), &&, "define", ., equals, (]
[., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ), {, Scope, ., Var, define, =]
[., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ), {, Scope, ., Var, define, =]
[., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ), {, Scope, ., Var, define, =]
[., getString, (, ), ), ), {, Scope, ., Var, define, =, t, ., getScope, (, ), ., getVar, (]
[., getString, (, ), ), ), {, Scope, ., Var, define, =, t, ., getScope, (, ), ., getVar, (]
[., getString, (, ), ), ), {, Scope, ., Var, define, =, t, ., getScope, (, ), ., getVar, (]
[., getScope, (, ), ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (]
[., getScope, (, ), ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (]
[., getScope, (, ), ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (]
[(, ), ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (, define, !=]
[., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (, define, !=, null, &&]
[getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (, define, !=, null, &&, !]
[getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (, define, !=, null, &&, !]
[;, if, (, define, !=, null, &&, !, define, ., isGlobal, (, ), ), {, return, ;, }, if, (]
[if, (, define, !=, null, &&, !, define, ., isGlobal, (, ), ), {, return, ;, }, if, (, !]
[(, define, !=, null, &&, !, define, ., isGlobal, (, ), ), {, return, ;, }, if, (, !, (]
[(, define, !=, null, &&, !, define, ., isGlobal, (, ), ), {, return, ;, }, if, (, !, (]
[(, define, !=, null, &&, !, define, ., isGlobal, (, ), ), {, return, ;, }, if, (, !, (]
[define, ., isGlobal, (, ), ), {, return, ;, }, if, (, !, (, parent, ., isExprResult, (, ), &&]
[define, ., isGlobal, (, ), ), {, return, ;, }, if, (, !, (, parent, ., isExprResult, (, ), &&]
[define, ., isGlobal, (, ), ), {, return, ;, }, if, (, !, (, parent, ., isExprResult, (, ), &&]
[!, (, parent, ., isExprResult, (, ), &&, parent, ., getParent, (, ), ., isScript, (, ), ), ), {]
[!, (, parent, ., isExprResult, (, ), &&, parent, ., getParent, (, ), ., isScript, (, ), ), ), {]
[isExprResult, (, ), &&, parent, ., getParent, (, ), ., isScript, (, ), ), ), {, t, ., report, (]
[), &&, parent, ., getParent, (, ), ., isScript, (, ), ), ), {, t, ., report, (, n, ,]
[(, ), ), ), {, t, ., report, (, n, ,, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, ), ;, return, ;, }, Node, script, =]
[(, ), ), ), {, t, ., report, (, n, ,, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, ), ;, return, ;, }, Node, script, =]
[n, ,, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, ), ;, return, ;, }, Node, script, =, parent, ., getParent, (, ), ;, Node, requiresNode, =]
[return, ;, }, Node, script, =, parent, ., getParent, (, ), ;, Node, requiresNode, =, null, ;, Node, callback, =]
[=, parent, ., getParent, (, ), ;, Node, requiresNode, =, null, ;, Node, callback, =, null, ;, int, defineArity, =]
[=, parent, ., getParent, (, ), ;, Node, requiresNode, =, null, ;, Node, callback, =, null, ;, int, defineArity, =]
[=, parent, ., getParent, (, ), ;, Node, requiresNode, =, null, ;, Node, callback, =, null, ;, int, defineArity, =]
[;, Node, requiresNode, =, null, ;, Node, callback, =, null, ;, int, defineArity, =, n, ., getChildCount, (, ), -]
[null, ;, Node, callback, =, null, ;, int, defineArity, =, n, ., getChildCount, (, ), -, 1, ;, if, (]
[null, ;, Node, callback, =, null, ;, int, defineArity, =, n, ., getChildCount, (, ), -, 1, ;, if, (]
[Node, callback, =, null, ;, int, defineArity, =, n, ., getChildCount, (, ), -, 1, ;, if, (, defineArity, ==]
[null, ;, int, defineArity, =, n, ., getChildCount, (, ), -, 1, ;, if, (, defineArity, ==, 0, ), {]
[int, defineArity, =, n, ., getChildCount, (, ), -, 1, ;, if, (, defineArity, ==, 0, ), {, unsupportedDefineError, (]
[=, n, ., getChildCount, (, ), -, 1, ;, if, (, defineArity, ==, 0, ), {, unsupportedDefineError, (, t, ,]
[if, (, defineArity, ==, 0, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, else, if, (]
[if, (, defineArity, ==, 0, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, else, if, (]
[defineArity, ==, 0, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, else, if, (, defineArity, ==]
[), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, else, if, (, defineArity, ==, 1, ), {]
[unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, else, if, (, defineArity, ==, 1, ), {, callback, =]
[unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, else, if, (, defineArity, ==, 1, ), {, callback, =]
[n, ), ;, return, ;, }, else, if, (, defineArity, ==, 1, ), {, callback, =, n, ., getChildAtIndex, (]
[}, else, if, (, defineArity, ==, 1, ), {, callback, =, n, ., getChildAtIndex, (, 1, ), ;, if, (]
[}, else, if, (, defineArity, ==, 1, ), {, callback, =, n, ., getChildAtIndex, (, 1, ), ;, if, (]
[), {, callback, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, callback, ., isObjectLit, (, ), ), {]
[callback, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, callback, ., isObjectLit, (, ), ), {, handleDefineObjectLiteral, (]
[n, ., getChildAtIndex, (, 1, ), ;, if, (, callback, ., isObjectLit, (, ), ), {, handleDefineObjectLiteral, (, parent, ,]
[getChildAtIndex, (, 1, ), ;, if, (, callback, ., isObjectLit, (, ), ), {, handleDefineObjectLiteral, (, parent, ,, callback, ,]
[(, ), ), {, handleDefineObjectLiteral, (, parent, ,, callback, ,, script, ), ;, return, ;, }, }, else, if, (]
[(, ), ), {, handleDefineObjectLiteral, (, parent, ,, callback, ,, script, ), ;, return, ;, }, }, else, if, (]
[), {, handleDefineObjectLiteral, (, parent, ,, callback, ,, script, ), ;, return, ;, }, }, else, if, (, defineArity, ==]
[(, parent, ,, callback, ,, script, ), ;, return, ;, }, }, else, if, (, defineArity, ==, 2, ), {]
[,, callback, ,, script, ), ;, return, ;, }, }, else, if, (, defineArity, ==, 2, ), {, requiresNode, =]
[,, callback, ,, script, ), ;, return, ;, }, }, else, if, (, defineArity, ==, 2, ), {, requiresNode, =]
[), ;, return, ;, }, }, else, if, (, defineArity, ==, 2, ), {, requiresNode, =, n, ., getChildAtIndex, (]
[;, }, }, else, if, (, defineArity, ==, 2, ), {, requiresNode, =, n, ., getChildAtIndex, (, 1, ), ;]
[}, else, if, (, defineArity, ==, 2, ), {, requiresNode, =, n, ., getChildAtIndex, (, 1, ), ;, callback, =]
[}, else, if, (, defineArity, ==, 2, ), {, requiresNode, =, n, ., getChildAtIndex, (, 1, ), ;, callback, =]
[defineArity, ==, 2, ), {, requiresNode, =, n, ., getChildAtIndex, (, 1, ), ;, callback, =, n, ., getChildAtIndex, (]
[n, ., getChildAtIndex, (, 1, ), ;, callback, =, n, ., getChildAtIndex, (, 2, ), ;, }, else, if, (]
[n, ., getChildAtIndex, (, 1, ), ;, callback, =, n, ., getChildAtIndex, (, 2, ), ;, }, else, if, (]
[getChildAtIndex, (, 1, ), ;, callback, =, n, ., getChildAtIndex, (, 2, ), ;, }, else, if, (, defineArity, >=]
[), ;, callback, =, n, ., getChildAtIndex, (, 2, ), ;, }, else, if, (, defineArity, >=, 3, ), {]
[callback, =, n, ., getChildAtIndex, (, 2, ), ;, }, else, if, (, defineArity, >=, 3, ), {, unsupportedDefineError, (]
[n, ., getChildAtIndex, (, 2, ), ;, }, else, if, (, defineArity, >=, 3, ), {, unsupportedDefineError, (, t, ,]
[else, if, (, defineArity, >=, 3, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, if, (]
[else, if, (, defineArity, >=, 3, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, if, (]
[if, (, defineArity, >=, 3, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, if, (, !]
[if, (, defineArity, >=, 3, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, if, (, !]
[{, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, if, (, !, callback, ., isFunction, (, ), ||]
[unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, if, (, !, callback, ., isFunction, (, ), ||, (]
[unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, if, (, !, callback, ., isFunction, (, ), ||, (]
[unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, if, (, !, callback, ., isFunction, (, ), ||, (]
[t, ,, n, ), ;, return, ;, }, if, (, !, callback, ., isFunction, (, ), ||, (, requiresNode, !=]
[n, ), ;, return, ;, }, if, (, !, callback, ., isFunction, (, ), ||, (, requiresNode, !=, null, &&]
[), ;, return, ;, }, if, (, !, callback, ., isFunction, (, ), ||, (, requiresNode, !=, null, &&, !]
[), ;, return, ;, }, if, (, !, callback, ., isFunction, (, ), ||, (, requiresNode, !=, null, &&, !]
[callback, ., isFunction, (, ), ||, (, requiresNode, !=, null, &&, !, requiresNode, ., isArrayLit, (, ), ), ), {]
[isFunction, (, ), ||, (, requiresNode, !=, null, &&, !, requiresNode, ., isArrayLit, (, ), ), ), {, unsupportedDefineError, (]
[), ||, (, requiresNode, !=, null, &&, !, requiresNode, ., isArrayLit, (, ), ), ), {, unsupportedDefineError, (, t, ,]
[&&, !, requiresNode, ., isArrayLit, (, ), ), ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }]
[requiresNode, ., isArrayLit, (, ), ), ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, handleRequiresAndParamList, (]
[isArrayLit, (, ), ), ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, handleRequiresAndParamList, (, t, ,]
[), ), ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, handleRequiresAndParamList, (, t, ,, n, ,]
[), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, handleRequiresAndParamList, (, t, ,, n, ,, script, ,]
[unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, handleRequiresAndParamList, (, t, ,, n, ,, script, ,, requiresNode, ,]
[;, return, ;, }, handleRequiresAndParamList, (, t, ,, n, ,, script, ,, requiresNode, ,, callback, ), ;, Node, callbackBlock, =]
[;, return, ;, }, handleRequiresAndParamList, (, t, ,, n, ,, script, ,, requiresNode, ,, callback, ), ;, Node, callbackBlock, =]
[handleRequiresAndParamList, (, t, ,, n, ,, script, ,, requiresNode, ,, callback, ), ;, Node, callbackBlock, =, callback, ., getChildAtIndex, (]
[,, n, ,, script, ,, requiresNode, ,, callback, ), ;, Node, callbackBlock, =, callback, ., getChildAtIndex, (, 2, ), ;]
[,, n, ,, script, ,, requiresNode, ,, callback, ), ;, Node, callbackBlock, =, callback, ., getChildAtIndex, (, 2, ), ;]
[,, requiresNode, ,, callback, ), ;, Node, callbackBlock, =, callback, ., getChildAtIndex, (, 2, ), ;, NodeTraversal, ., traverse, (]
[,, callback, ), ;, Node, callbackBlock, =, callback, ., getChildAtIndex, (, 2, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, Node, callbackBlock, =, callback, ., getChildAtIndex, (, 2, ), ;, NodeTraversal, ., traverse, (, compiler, ,, callbackBlock, ,]
[., getChildAtIndex, (, 2, ), ;, NodeTraversal, ., traverse, (, compiler, ,, callbackBlock, ,, new, DefineCallbackReturnCallback, (, ), ), ;]
[(, 2, ), ;, NodeTraversal, ., traverse, (, compiler, ,, callbackBlock, ,, new, DefineCallbackReturnCallback, (, ), ), ;, moveCallbackContentToTopLevel, (]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, callbackBlock, ,, new, DefineCallbackReturnCallback, (, ), ), ;, moveCallbackContentToTopLevel, (, parent, ,]
[NodeTraversal, ., traverse, (, compiler, ,, callbackBlock, ,, new, DefineCallbackReturnCallback, (, ), ), ;, moveCallbackContentToTopLevel, (, parent, ,, script, ,]
[(, compiler, ,, callbackBlock, ,, new, DefineCallbackReturnCallback, (, ), ), ;, moveCallbackContentToTopLevel, (, parent, ,, script, ,, callbackBlock, ), ;]
[(, compiler, ,, callbackBlock, ,, new, DefineCallbackReturnCallback, (, ), ), ;, moveCallbackContentToTopLevel, (, parent, ,, script, ,, callbackBlock, ), ;]
[reportCodeChange, (, ), ;, }, }, private, void, handleDefineObjectLiteral, (, Node, parent, ,, Node, onlyExport, ,, Node, script, ), {]
[reportCodeChange, (, ), ;, }, }, private, void, handleDefineObjectLiteral, (, Node, parent, ,, Node, onlyExport, ,, Node, script, ), {]
[reportCodeChange, (, ), ;, }, }, private, void, handleDefineObjectLiteral, (, Node, parent, ,, Node, onlyExport, ,, Node, script, ), {]
[handleDefineObjectLiteral, (, Node, parent, ,, Node, onlyExport, ,, Node, script, ), {, onlyExport, ., getParent, (, ), ., removeChild, (]
[parent, ,, Node, onlyExport, ,, Node, script, ), {, onlyExport, ., getParent, (, ), ., removeChild, (, onlyExport, ), ;]
[parent, ,, Node, onlyExport, ,, Node, script, ), {, onlyExport, ., getParent, (, ), ., removeChild, (, onlyExport, ), ;]
[,, Node, script, ), {, onlyExport, ., getParent, (, ), ., removeChild, (, onlyExport, ), ;, script, ., replaceChild, (]
[script, ), {, onlyExport, ., getParent, (, ), ., removeChild, (, onlyExport, ), ;, script, ., replaceChild, (, parent, ,]
[script, ), {, onlyExport, ., getParent, (, ), ., removeChild, (, onlyExport, ), ;, script, ., replaceChild, (, parent, ,]
[script, ), {, onlyExport, ., getParent, (, ), ., removeChild, (, onlyExport, ), ;, script, ., replaceChild, (, parent, ,]
[., getParent, (, ), ., removeChild, (, onlyExport, ), ;, script, ., replaceChild, (, parent, ,, IR, ., exprResult, (]
[., getParent, (, ), ., removeChild, (, onlyExport, ), ;, script, ., replaceChild, (, parent, ,, IR, ., exprResult, (]
[., removeChild, (, onlyExport, ), ;, script, ., replaceChild, (, parent, ,, IR, ., exprResult, (, IR, ., assign, (]
[., removeChild, (, onlyExport, ), ;, script, ., replaceChild, (, parent, ,, IR, ., exprResult, (, IR, ., assign, (]
[), ;, script, ., replaceChild, (, parent, ,, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (]
[., replaceChild, (, parent, ,, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, "exports", ), ,]
[., exprResult, (, IR, ., assign, (, IR, ., name, (, "exports", ), ,, onlyExport, ), ), ., copyInformationFromForTree, (]
[., assign, (, IR, ., name, (, "exports", ), ,, onlyExport, ), ), ., copyInformationFromForTree, (, onlyExport, ), ), ;]
[., assign, (, IR, ., name, (, "exports", ), ,, onlyExport, ), ), ., copyInformationFromForTree, (, onlyExport, ), ), ;]
[,, Node, defineNode, ,, Node, script, ,, Node, requiresNode, ,, Node, callback, ), {, Iterator, <, Node, >, paramList, =]
[,, Node, defineNode, ,, Node, script, ,, Node, requiresNode, ,, Node, callback, ), {, Iterator, <, Node, >, paramList, =]
[,, Node, defineNode, ,, Node, script, ,, Node, requiresNode, ,, Node, callback, ), {, Iterator, <, Node, >, paramList, =]
[,, Node, defineNode, ,, Node, script, ,, Node, requiresNode, ,, Node, callback, ), {, Iterator, <, Node, >, paramList, =]
[Node, script, ,, Node, requiresNode, ,, Node, callback, ), {, Iterator, <, Node, >, paramList, =, callback, ., getChildAtIndex, (]
[., getChildAtIndex, (, 1, ), ., children, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, requires, =]
[., getChildAtIndex, (, 1, ), ., children, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, requires, =]
[., getChildAtIndex, (, 1, ), ., children, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, requires, =]
[(, 1, ), ., children, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, requires, =, requiresNode, !=]
[), ., children, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, requires, =, requiresNode, !=, null, ?]
[), ., children, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, requires, =, requiresNode, !=, null, ?]
[), ., children, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, requires, =, requiresNode, !=, null, ?]
[Iterator, <, Node, >, requires, =, requiresNode, !=, null, ?, requiresNode, ., children, (, ), ., iterator, (, ), :]
[Iterator, <, Node, >, requires, =, requiresNode, !=, null, ?, requiresNode, ., children, (, ), ., iterator, (, ), :]
[., children, (, ), ., iterator, (, ), :, Iterators, ., <, Node, >, emptyIterator, (, ), ;, while, (]
[., children, (, ), ., iterator, (, ), :, Iterators, ., <, Node, >, emptyIterator, (, ), ;, while, (]
[., children, (, ), ., iterator, (, ), :, Iterators, ., <, Node, >, emptyIterator, (, ), ;, while, (]
[(, ), :, Iterators, ., <, Node, >, emptyIterator, (, ), ;, while, (, paramList, ., hasNext, (, ), ||]
[(, ), :, Iterators, ., <, Node, >, emptyIterator, (, ), ;, while, (, paramList, ., hasNext, (, ), ||]
[), ;, while, (, paramList, ., hasNext, (, ), ||, requires, ., hasNext, (, ), ), {, Node, aliasNode, =]
[), ;, while, (, paramList, ., hasNext, (, ), ||, requires, ., hasNext, (, ), ), {, Node, aliasNode, =]
[), ;, while, (, paramList, ., hasNext, (, ), ||, requires, ., hasNext, (, ), ), {, Node, aliasNode, =]
[hasNext, (, ), ||, requires, ., hasNext, (, ), ), {, Node, aliasNode, =, paramList, ., hasNext, (, ), ?]
[hasNext, (, ), ||, requires, ., hasNext, (, ), ), {, Node, aliasNode, =, paramList, ., hasNext, (, ), ?]
[hasNext, (, ), ), {, Node, aliasNode, =, paramList, ., hasNext, (, ), ?, paramList, ., next, (, ), :]
[Node, aliasNode, =, paramList, ., hasNext, (, ), ?, paramList, ., next, (, ), :, null, ;, Node, modNode, =]
[Node, aliasNode, =, paramList, ., hasNext, (, ), ?, paramList, ., next, (, ), :, null, ;, Node, modNode, =]
[Node, aliasNode, =, paramList, ., hasNext, (, ), ?, paramList, ., next, (, ), :, null, ;, Node, modNode, =]
[(, ), ?, paramList, ., next, (, ), :, null, ;, Node, modNode, =, requires, ., hasNext, (, ), ?]
[(, ), ?, paramList, ., next, (, ), :, null, ;, Node, modNode, =, requires, ., hasNext, (, ), ?]
[(, ), :, null, ;, Node, modNode, =, requires, ., hasNext, (, ), ?, requires, ., next, (, ), :]
[:, null, ;, Node, modNode, =, requires, ., hasNext, (, ), ?, requires, ., next, (, ), :, null, ;]
[;, Node, modNode, =, requires, ., hasNext, (, ), ?, requires, ., next, (, ), :, null, ;, handleRequire, (]
[modNode, =, requires, ., hasNext, (, ), ?, requires, ., next, (, ), :, null, ;, handleRequire, (, t, ,]
[requires, ., hasNext, (, ), ?, requires, ., next, (, ), :, null, ;, handleRequire, (, t, ,, defineNode, ,]
[hasNext, (, ), ?, requires, ., next, (, ), :, null, ;, handleRequire, (, t, ,, defineNode, ,, script, ,]
[), ?, requires, ., next, (, ), :, null, ;, handleRequire, (, t, ,, defineNode, ,, script, ,, callback, ,]
[requires, ., next, (, ), :, null, ;, handleRequire, (, t, ,, defineNode, ,, script, ,, callback, ,, aliasNode, ,]
[,, Node, defineNode, ,, Node, script, ,, Node, callback, ,, Node, aliasNode, ,, Node, modNode, ), {, String, moduleName, =]
[Node, script, ,, Node, callback, ,, Node, aliasNode, ,, Node, modNode, ), {, String, moduleName, =, null, ;, if, (]
[Node, script, ,, Node, callback, ,, Node, aliasNode, ,, Node, modNode, ), {, String, moduleName, =, null, ;, if, (]
[,, Node, callback, ,, Node, aliasNode, ,, Node, modNode, ), {, String, moduleName, =, null, ;, if, (, modNode, !=]
[,, Node, aliasNode, ,, Node, modNode, ), {, String, moduleName, =, null, ;, if, (, modNode, !=, null, ), {]
[aliasNode, ,, Node, modNode, ), {, String, moduleName, =, null, ;, if, (, modNode, !=, null, ), {, moduleName, =]
[Node, modNode, ), {, String, moduleName, =, null, ;, if, (, modNode, !=, null, ), {, moduleName, =, handlePlugins, (]
[), {, String, moduleName, =, null, ;, if, (, modNode, !=, null, ), {, moduleName, =, handlePlugins, (, t, ,]
[String, moduleName, =, null, ;, if, (, modNode, !=, null, ), {, moduleName, =, handlePlugins, (, t, ,, script, ,]
[String, moduleName, =, null, ;, if, (, modNode, !=, null, ), {, moduleName, =, handlePlugins, (, t, ,, script, ,]
[(, modNode, !=, null, ), {, moduleName, =, handlePlugins, (, t, ,, script, ,, modNode, ., getString, (, ), ,]
[moduleName, =, handlePlugins, (, t, ,, script, ,, modNode, ., getString, (, ), ,, modNode, ), ;, }, if, (]
[handlePlugins, (, t, ,, script, ,, modNode, ., getString, (, ), ,, modNode, ), ;, }, if, (, isVirtualModuleName, (]
[), ,, modNode, ), ;, }, if, (, isVirtualModuleName, (, moduleName, ), ), {, return, ;, }, String, aliasName, =]
[), ,, modNode, ), ;, }, if, (, isVirtualModuleName, (, moduleName, ), ), {, return, ;, }, String, aliasName, =]
[), ,, modNode, ), ;, }, if, (, isVirtualModuleName, (, moduleName, ), ), {, return, ;, }, String, aliasName, =]
[modNode, ), ;, }, if, (, isVirtualModuleName, (, moduleName, ), ), {, return, ;, }, String, aliasName, =, aliasNode, !=]
[;, }, if, (, isVirtualModuleName, (, moduleName, ), ), {, return, ;, }, String, aliasName, =, aliasNode, !=, null, ?]
[;, }, if, (, isVirtualModuleName, (, moduleName, ), ), {, return, ;, }, String, aliasName, =, aliasNode, !=, null, ?]
[moduleName, ), ), {, return, ;, }, String, aliasName, =, aliasNode, !=, null, ?, aliasNode, ., getString, (, ), :]
[;, }, String, aliasName, =, aliasNode, !=, null, ?, aliasNode, ., getString, (, ), :, null, ;, Scope, globalScope, =]
[;, }, String, aliasName, =, aliasNode, !=, null, ?, aliasNode, ., getString, (, ), :, null, ;, Scope, globalScope, =]
[?, aliasNode, ., getString, (, ), :, null, ;, Scope, globalScope, =, t, ., getScope, (, ), ;, if, (]
[?, aliasNode, ., getString, (, ), :, null, ;, Scope, globalScope, =, t, ., getScope, (, ), ;, if, (]
[?, aliasNode, ., getString, (, ), :, null, ;, Scope, globalScope, =, t, ., getScope, (, ), ;, if, (]
[., getString, (, ), :, null, ;, Scope, globalScope, =, t, ., getScope, (, ), ;, if, (, aliasName, !=]
[(, ), :, null, ;, Scope, globalScope, =, t, ., getScope, (, ), ;, if, (, aliasName, !=, null, &&]
[(, ), :, null, ;, Scope, globalScope, =, t, ., getScope, (, ), ;, if, (, aliasName, !=, null, &&]
[;, Scope, globalScope, =, t, ., getScope, (, ), ;, if, (, aliasName, !=, null, &&, globalScope, ., isDeclared, (]
[globalScope, =, t, ., getScope, (, ), ;, if, (, aliasName, !=, null, &&, globalScope, ., isDeclared, (, aliasName, ,]
[), ;, if, (, aliasName, !=, null, &&, globalScope, ., isDeclared, (, aliasName, ,, true, ), ), {, while, (]
[null, &&, globalScope, ., isDeclared, (, aliasName, ,, true, ), ), {, while, (, true, ), {, String, renamed, =]
[null, &&, globalScope, ., isDeclared, (, aliasName, ,, true, ), ), {, while, (, true, ), {, String, renamed, =]
[null, &&, globalScope, ., isDeclared, (, aliasName, ,, true, ), ), {, while, (, true, ), {, String, renamed, =]
[globalScope, ., isDeclared, (, aliasName, ,, true, ), ), {, while, (, true, ), {, String, renamed, =, aliasName, +]
[isDeclared, (, aliasName, ,, true, ), ), {, while, (, true, ), {, String, renamed, =, aliasName, +, VAR_RENAME_SUFFIX, +]
[true, ), ), {, while, (, true, ), {, String, renamed, =, aliasName, +, VAR_RENAME_SUFFIX, +, renameIndex, ;, if, (]
[), ), {, while, (, true, ), {, String, renamed, =, aliasName, +, VAR_RENAME_SUFFIX, +, renameIndex, ;, if, (, !]
[), ), {, while, (, true, ), {, String, renamed, =, aliasName, +, VAR_RENAME_SUFFIX, +, renameIndex, ;, if, (, !]
[(, true, ), {, String, renamed, =, aliasName, +, VAR_RENAME_SUFFIX, +, renameIndex, ;, if, (, !, globalScope, ., isDeclared, (]
[), {, String, renamed, =, aliasName, +, VAR_RENAME_SUFFIX, +, renameIndex, ;, if, (, !, globalScope, ., isDeclared, (, renamed, ,]
[=, aliasName, +, VAR_RENAME_SUFFIX, +, renameIndex, ;, if, (, !, globalScope, ., isDeclared, (, renamed, ,, true, ), ), {]
[=, aliasName, +, VAR_RENAME_SUFFIX, +, renameIndex, ;, if, (, !, globalScope, ., isDeclared, (, renamed, ,, true, ), ), {]
[+, renameIndex, ;, if, (, !, globalScope, ., isDeclared, (, renamed, ,, true, ), ), {, NodeTraversal, ., traverse, (]
[;, if, (, !, globalScope, ., isDeclared, (, renamed, ,, true, ), ), {, NodeTraversal, ., traverse, (, compiler, ,]
[(, !, globalScope, ., isDeclared, (, renamed, ,, true, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, callback, ,]
[., isDeclared, (, renamed, ,, true, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, callback, ,, new, RenameCallback, (]
[(, renamed, ,, true, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, callback, ,, new, RenameCallback, (, aliasName, ,]
[), ), {, NodeTraversal, ., traverse, (, compiler, ,, callback, ,, new, RenameCallback, (, aliasName, ,, renamed, ), ), ;]
[{, NodeTraversal, ., traverse, (, compiler, ,, callback, ,, new, RenameCallback, (, aliasName, ,, renamed, ), ), ;, aliasName, =]
[compiler, ,, callback, ,, new, RenameCallback, (, aliasName, ,, renamed, ), ), ;, aliasName, =, renamed, ;, break, ;, }]
[compiler, ,, callback, ,, new, RenameCallback, (, aliasName, ,, renamed, ), ), ;, aliasName, =, renamed, ;, break, ;, }]
[), ), ;, aliasName, =, renamed, ;, break, ;, }, renameIndex, ++, ;, }, }, Node, requireNode, ;, if, (]
[), ), ;, aliasName, =, renamed, ;, break, ;, }, renameIndex, ++, ;, }, }, Node, requireNode, ;, if, (]
[;, aliasName, =, renamed, ;, break, ;, }, renameIndex, ++, ;, }, }, Node, requireNode, ;, if, (, moduleName, !=]
[;, }, renameIndex, ++, ;, }, }, Node, requireNode, ;, if, (, moduleName, !=, null, ), {, Node, call, =]
[;, }, renameIndex, ++, ;, }, }, Node, requireNode, ;, if, (, moduleName, !=, null, ), {, Node, call, =]
[;, }, }, Node, requireNode, ;, if, (, moduleName, !=, null, ), {, Node, call, =, IR, ., call, (]
[;, }, }, Node, requireNode, ;, if, (, moduleName, !=, null, ), {, Node, call, =, IR, ., call, (]
[requireNode, ;, if, (, moduleName, !=, null, ), {, Node, call, =, IR, ., call, (, IR, ., name, (]
[(, moduleName, !=, null, ), {, Node, call, =, IR, ., call, (, IR, ., name, (, "require", ), ,]
[(, moduleName, !=, null, ), {, Node, call, =, IR, ., call, (, IR, ., name, (, "require", ), ,]
[), {, Node, call, =, IR, ., call, (, IR, ., name, (, "require", ), ,, IR, ., string, (]
[=, IR, ., call, (, IR, ., name, (, "require", ), ,, IR, ., string, (, moduleName, ), ), ;]
[=, IR, ., call, (, IR, ., name, (, "require", ), ,, IR, ., string, (, moduleName, ), ), ;]
[(, IR, ., name, (, "require", ), ,, IR, ., string, (, moduleName, ), ), ;, call, ., putBooleanProp, (]
[(, IR, ., name, (, "require", ), ,, IR, ., string, (, moduleName, ), ), ;, call, ., putBooleanProp, (]
[(, "require", ), ,, IR, ., string, (, moduleName, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[., string, (, moduleName, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, if, (]
[., string, (, moduleName, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, if, (]
[(, moduleName, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, if, (, aliasName, !=]
[), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, if, (, aliasName, !=, null, ), {]
[call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, if, (, aliasName, !=, null, ), {, requireNode, =]
[call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, if, (, aliasName, !=, null, ), {, requireNode, =]
[call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, if, (, aliasName, !=, null, ), {, requireNode, =]
[Node, ., FREE_CALL, ,, true, ), ;, if, (, aliasName, !=, null, ), {, requireNode, =, IR, ., var, (]
[Node, ., FREE_CALL, ,, true, ), ;, if, (, aliasName, !=, null, ), {, requireNode, =, IR, ., var, (]
[true, ), ;, if, (, aliasName, !=, null, ), {, requireNode, =, IR, ., var, (, IR, ., name, (]
[if, (, aliasName, !=, null, ), {, requireNode, =, IR, ., var, (, IR, ., name, (, aliasName, ), ,]
[), {, requireNode, =, IR, ., var, (, IR, ., name, (, aliasName, ), ,, call, ), ., copyInformationFromForTree, (]
[var, (, IR, ., name, (, aliasName, ), ,, call, ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, else, {]
[IR, ., name, (, aliasName, ), ,, call, ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, else, {, requireNode, =]
[IR, ., name, (, aliasName, ), ,, call, ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, else, {, requireNode, =]
[IR, ., name, (, aliasName, ), ,, call, ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, else, {, requireNode, =]
[aliasName, ), ,, call, ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, else, {, requireNode, =, IR, ., exprResult, (]
[., copyInformationFromForTree, (, aliasNode, ), ;, }, else, {, requireNode, =, IR, ., exprResult, (, call, ), ., copyInformationFromForTree, (]
[requireNode, =, IR, ., exprResult, (, call, ), ., copyInformationFromForTree, (, modNode, ), ;, }, }, else, {, if, (]
[IR, ., exprResult, (, call, ), ., copyInformationFromForTree, (, modNode, ), ;, }, }, else, {, if, (, isVirtualModuleName, (]
[copyInformationFromForTree, (, modNode, ), ;, }, }, else, {, if, (, isVirtualModuleName, (, aliasName, ), ), {, return, ;, }]
[modNode, ), ;, }, }, else, {, if, (, isVirtualModuleName, (, aliasName, ), ), {, return, ;, }, requireNode, =]
[modNode, ), ;, }, }, else, {, if, (, isVirtualModuleName, (, aliasName, ), ), {, return, ;, }, requireNode, =]
[modNode, ), ;, }, }, else, {, if, (, isVirtualModuleName, (, aliasName, ), ), {, return, ;, }, requireNode, =]
[}, else, {, if, (, isVirtualModuleName, (, aliasName, ), ), {, return, ;, }, requireNode, =, IR, ., var, (]
[}, else, {, if, (, isVirtualModuleName, (, aliasName, ), ), {, return, ;, }, requireNode, =, IR, ., var, (]
[(, isVirtualModuleName, (, aliasName, ), ), {, return, ;, }, requireNode, =, IR, ., var, (, IR, ., name, (]
[aliasName, ), ), {, return, ;, }, requireNode, =, IR, ., var, (, IR, ., name, (, aliasName, ), ,]
[aliasName, ), ), {, return, ;, }, requireNode, =, IR, ., var, (, IR, ., name, (, aliasName, ), ,]
[IR, ., var, (, IR, ., name, (, aliasName, ), ,, IR, ., nullNode, (, ), ), ., copyInformationFromForTree, (]
[IR, ., name, (, aliasName, ), ,, IR, ., nullNode, (, ), ), ., copyInformationFromForTree, (, aliasNode, ), ;, }]
[IR, ., name, (, aliasName, ), ,, IR, ., nullNode, (, ), ), ., copyInformationFromForTree, (, aliasNode, ), ;, }]
[aliasName, ), ,, IR, ., nullNode, (, ), ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, script, ., addChildBefore, (]
[,, IR, ., nullNode, (, ), ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, script, ., addChildBefore, (, requireNode, ,]
[,, IR, ., nullNode, (, ), ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, script, ., addChildBefore, (, requireNode, ,]
[}, private, String, handlePlugins, (, NodeTraversal, t, ,, Node, script, ,, String, moduleName, ,, Node, modNode, ), {, if, (]
[}, private, String, handlePlugins, (, NodeTraversal, t, ,, Node, script, ,, String, moduleName, ,, Node, modNode, ), {, if, (]
[(, NodeTraversal, t, ,, Node, script, ,, String, moduleName, ,, Node, modNode, ), {, if, (, moduleName, ., contains, (]
[Node, script, ,, String, moduleName, ,, Node, modNode, ), {, if, (, moduleName, ., contains, (, "!", ), ), {]
[Node, script, ,, String, moduleName, ,, Node, modNode, ), {, if, (, moduleName, ., contains, (, "!", ), ), {]
[moduleName, ,, Node, modNode, ), {, if, (, moduleName, ., contains, (, "!", ), ), {, t, ., report, (]
[Node, modNode, ), {, if, (, moduleName, ., contains, (, "!", ), ), {, t, ., report, (, modNode, ,]
[), {, if, (, moduleName, ., contains, (, "!", ), ), {, t, ., report, (, modNode, ,, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, ,]
[contains, (, "!", ), ), {, t, ., report, (, modNode, ,, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, ,, moduleName, ), ;, int, condition, =]
[contains, (, "!", ), ), {, t, ., report, (, modNode, ,, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, ,, moduleName, ), ;, int, condition, =]
[), {, t, ., report, (, modNode, ,, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, ,, moduleName, ), ;, int, condition, =, moduleName, ., indexOf, (]
[(, modNode, ,, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, ,, moduleName, ), ;, int, condition, =, moduleName, ., indexOf, (, '?', ), ;, if, (]
[(, modNode, ,, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, ,, moduleName, ), ;, int, condition, =, moduleName, ., indexOf, (, '?', ), ;, if, (]
[,, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, ,, moduleName, ), ;, int, condition, =, moduleName, ., indexOf, (, '?', ), ;, if, (, condition, >]
[;, int, condition, =, moduleName, ., indexOf, (, '?', ), ;, if, (, condition, >, 0, ), {, if, (]
[;, int, condition, =, moduleName, ., indexOf, (, '?', ), ;, if, (, condition, >, 0, ), {, if, (]
[moduleName, ., indexOf, (, '?', ), ;, if, (, condition, >, 0, ), {, if, (, moduleName, ., contains, (]
[), ;, if, (, condition, >, 0, ), {, if, (, moduleName, ., contains, (, ":", ), ), {, return]
[condition, >, 0, ), {, if, (, moduleName, ., contains, (, ":", ), ), {, return, null, ;, }, return]
[0, ), {, if, (, moduleName, ., contains, (, ":", ), ), {, return, null, ;, }, return, handlePlugins, (]
[{, if, (, moduleName, ., contains, (, ":", ), ), {, return, null, ;, }, return, handlePlugins, (, t, ,]
[(, moduleName, ., contains, (, ":", ), ), {, return, null, ;, }, return, handlePlugins, (, t, ,, script, ,]
[(, moduleName, ., contains, (, ":", ), ), {, return, null, ;, }, return, handlePlugins, (, t, ,, script, ,]
[(, ":", ), ), {, return, null, ;, }, return, handlePlugins, (, t, ,, script, ,, moduleName, ., substring, (]
[(, ":", ), ), {, return, null, ;, }, return, handlePlugins, (, t, ,, script, ,, moduleName, ., substring, (]
[), ), {, return, null, ;, }, return, handlePlugins, (, t, ,, script, ,, moduleName, ., substring, (, condition, +]
[return, null, ;, }, return, handlePlugins, (, t, ,, script, ,, moduleName, ., substring, (, condition, +, 1, ), ,]
[return, handlePlugins, (, t, ,, script, ,, moduleName, ., substring, (, condition, +, 1, ), ,, modNode, ), ;, }]
[(, t, ,, script, ,, moduleName, ., substring, (, condition, +, 1, ), ,, modNode, ), ;, }, moduleName, =]
[,, moduleName, ., substring, (, condition, +, 1, ), ,, modNode, ), ;, }, moduleName, =, null, ;, }, return]
[moduleName, ;, }, private, void, moveCallbackContentToTopLevel, (, Node, defineParent, ,, Node, script, ,, Node, callbackBlock, ), {, int, curIndex, =]
[moduleName, ;, }, private, void, moveCallbackContentToTopLevel, (, Node, defineParent, ,, Node, script, ,, Node, callbackBlock, ), {, int, curIndex, =]
[void, moveCallbackContentToTopLevel, (, Node, defineParent, ,, Node, script, ,, Node, callbackBlock, ), {, int, curIndex, =, script, ., getIndexOfChild, (]
[Node, defineParent, ,, Node, script, ,, Node, callbackBlock, ), {, int, curIndex, =, script, ., getIndexOfChild, (, defineParent, ), ;]
[Node, defineParent, ,, Node, script, ,, Node, callbackBlock, ), {, int, curIndex, =, script, ., getIndexOfChild, (, defineParent, ), ;]
[script, ,, Node, callbackBlock, ), {, int, curIndex, =, script, ., getIndexOfChild, (, defineParent, ), ;, script, ., removeChild, (]
[callbackBlock, ), {, int, curIndex, =, script, ., getIndexOfChild, (, defineParent, ), ;, script, ., removeChild, (, defineParent, ), ;]
[callbackBlock, ), {, int, curIndex, =, script, ., getIndexOfChild, (, defineParent, ), ;, script, ., removeChild, (, defineParent, ), ;]
[callbackBlock, ), {, int, curIndex, =, script, ., getIndexOfChild, (, defineParent, ), ;, script, ., removeChild, (, defineParent, ), ;]
[getIndexOfChild, (, defineParent, ), ;, script, ., removeChild, (, defineParent, ), ;, callbackBlock, ., getParent, (, ), ., removeChild, (]
[., removeChild, (, defineParent, ), ;, callbackBlock, ., getParent, (, ), ., removeChild, (, callbackBlock, ), ;, Node, before, =]
[., removeChild, (, defineParent, ), ;, callbackBlock, ., getParent, (, ), ., removeChild, (, callbackBlock, ), ;, Node, before, =]
[), ;, callbackBlock, ., getParent, (, ), ., removeChild, (, callbackBlock, ), ;, Node, before, =, script, ., getChildAtIndex, (]
[(, ), ., removeChild, (, callbackBlock, ), ;, Node, before, =, script, ., getChildAtIndex, (, curIndex, ), ;, if, (]
[(, ), ., removeChild, (, callbackBlock, ), ;, Node, before, =, script, ., getChildAtIndex, (, curIndex, ), ;, if, (]
[., removeChild, (, callbackBlock, ), ;, Node, before, =, script, ., getChildAtIndex, (, curIndex, ), ;, if, (, before, !=]
[callbackBlock, ), ;, Node, before, =, script, ., getChildAtIndex, (, curIndex, ), ;, if, (, before, !=, null, ), {]
[callbackBlock, ), ;, Node, before, =, script, ., getChildAtIndex, (, curIndex, ), ;, if, (, before, !=, null, ), {]
[before, =, script, ., getChildAtIndex, (, curIndex, ), ;, if, (, before, !=, null, ), {, script, ., addChildBefore, (]
[script, ., getChildAtIndex, (, curIndex, ), ;, if, (, before, !=, null, ), {, script, ., addChildBefore, (, callbackBlock, ,]
[curIndex, ), ;, if, (, before, !=, null, ), {, script, ., addChildBefore, (, callbackBlock, ,, before, ), ;, }]
[curIndex, ), ;, if, (, before, !=, null, ), {, script, ., addChildBefore, (, callbackBlock, ,, before, ), ;, }]
[(, before, !=, null, ), {, script, ., addChildBefore, (, callbackBlock, ,, before, ), ;, }, script, ., addChildToBack, (]
[null, ), {, script, ., addChildBefore, (, callbackBlock, ,, before, ), ;, }, script, ., addChildToBack, (, callbackBlock, ), ;]
[null, ), {, script, ., addChildBefore, (, callbackBlock, ,, before, ), ;, }, script, ., addChildToBack, (, callbackBlock, ), ;]
[., addChildBefore, (, callbackBlock, ,, before, ), ;, }, script, ., addChildToBack, (, callbackBlock, ), ;, NodeUtil, ., tryMergeBlock, (]
[AbstractShallowStatementCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractShallowStatementCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractShallowStatementCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isReturn, (, ), &&]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isReturn, (, ), &&]
[), {, if, (, n, ., isReturn, (, ), &&, n, ., hasChildren, (, ), ), {, Node, retVal, =]
[), {, if, (, n, ., isReturn, (, ), &&, n, ., hasChildren, (, ), ), {, Node, retVal, =]
[isReturn, (, ), &&, n, ., hasChildren, (, ), ), {, Node, retVal, =, n, ., getFirstChild, (, ), ;]
[isReturn, (, ), &&, n, ., hasChildren, (, ), ), {, Node, retVal, =, n, ., getFirstChild, (, ), ;]
[n, ., hasChildren, (, ), ), {, Node, retVal, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (]
[(, ), ), {, Node, retVal, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, retVal, ), ;]
[(, ), ), {, Node, retVal, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, retVal, ), ;]
[Node, retVal, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, retVal, ), ;, parent, ., replaceChild, (]
[=, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, retVal, ), ;, parent, ., replaceChild, (, n, ,]
[=, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, retVal, ), ;, parent, ., replaceChild, (, n, ,]
[=, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, retVal, ), ;, parent, ., replaceChild, (, n, ,]
[(, ), ;, n, ., removeChild, (, retVal, ), ;, parent, ., replaceChild, (, n, ,, IR, ., exprResult, (]
[(, ), ;, n, ., removeChild, (, retVal, ), ;, parent, ., replaceChild, (, n, ,, IR, ., exprResult, (]
[., removeChild, (, retVal, ), ;, parent, ., replaceChild, (, n, ,, IR, ., exprResult, (, IR, ., assign, (]
[., removeChild, (, retVal, ), ;, parent, ., replaceChild, (, n, ,, IR, ., exprResult, (, IR, ., assign, (]
[), ;, parent, ., replaceChild, (, n, ,, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (]
[), ;, parent, ., replaceChild, (, n, ,, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (]
[replaceChild, (, n, ,, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (]
[,, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, "module", ), ,]
[,, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, "module", ), ,]
[(, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, "module", ), ,, IR, ., string, (]
[(, IR, ., getprop, (, IR, ., name, (, "module", ), ,, IR, ., string, (, "exports", ), ), ,]
[., name, (, "module", ), ,, IR, ., string, (, "exports", ), ), ,, retVal, ), ), ., useSourceInfoFromForTree, (]
[private, final, String, from, ;, private, final, String, to, ;, public, RenameCallback, (, String, from, ,, String, to, ), {]
[private, final, String, from, ;, private, final, String, to, ;, public, RenameCallback, (, String, from, ,, String, to, ), {]
[;, private, final, String, to, ;, public, RenameCallback, (, String, from, ,, String, to, ), {, this, ., from, =]
[final, String, to, ;, public, RenameCallback, (, String, from, ,, String, to, ), {, this, ., from, =, from, ;]
[final, String, to, ;, public, RenameCallback, (, String, from, ,, String, to, ), {, this, ., from, =, from, ;]
[public, RenameCallback, (, String, from, ,, String, to, ), {, this, ., from, =, from, ;, this, ., to, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), &&]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), &&]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), &&, from, ., equals, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), &&, from, ., equals, (]
[if, (, n, ., isName, (, ), &&, from, ., equals, (, n, ., getString, (, ), ), ), {]
[if, (, n, ., isName, (, ), &&, from, ., equals, (, n, ., getString, (, ), ), ), {]
[isName, (, ), &&, from, ., equals, (, n, ., getString, (, ), ), ), {, n, ., setString, (]
[&&, from, ., equals, (, n, ., getString, (, ), ), ), {, n, ., setString, (, to, ), ;]
[&&, from, ., equals, (, n, ., getString, (, ), ), ), {, n, ., setString, (, to, ), ;]
[(, n, ., getString, (, ), ), ), {, n, ., setString, (, to, ), ;, n, ., putProp, (]
[(, n, ., getString, (, ), ), ), {, n, ., setString, (, to, ), ;, n, ., putProp, (]
[(, ), ), ), {, n, ., setString, (, to, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,]
