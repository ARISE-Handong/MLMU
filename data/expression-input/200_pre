[commons, ., math3, ., random, ., Well19937c, ;, public, class, HypergeometricDistribution, extends, AbstractIntegerDistribution, {, private, static, final, long, serialVersionUID, =]
[., math3, ., random, ., Well19937c, ;, public, class, HypergeometricDistribution, extends, AbstractIntegerDistribution, {, private, static, final, long, serialVersionUID, =, -]
[;, private, final, int, numberOfSuccesses, ;, private, final, int, populationSize, ;, private, final, int, sampleSize, ;, private, double, numericalVariance, =]
[;, private, final, int, numberOfSuccesses, ;, private, final, int, populationSize, ;, private, final, int, sampleSize, ;, private, double, numericalVariance, =]
[int, populationSize, ;, private, final, int, sampleSize, ;, private, double, numericalVariance, =, Double, ., NaN, ;, private, boolean, numericalVarianceIsCalculated, =]
[HypergeometricDistribution, (, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, this, (]
[int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, this, (, new, Well19937c, (, ), ,]
[,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, this, (, new, Well19937c, (, ), ,, populationSize, ,]
[sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, this, (, new, Well19937c, (, ), ,, populationSize, ,, numberOfSuccesses, ,]
[rng, ,, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, super, (]
[int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (]
[int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (]
[,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (, populationSize, <=]
[throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (, populationSize, <=, 0, ), {, throw]
[NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (, populationSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (, populationSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[super, (, rng, ), ;, if, (, populationSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., POPULATION_SIZE, ,]
[(, populationSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., POPULATION_SIZE, ,, populationSize, ), ;, }, if, (]
[(, populationSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., POPULATION_SIZE, ,, populationSize, ), ;, }, if, (]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., POPULATION_SIZE, ,, populationSize, ), ;, }, if, (, numberOfSuccesses, <]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., POPULATION_SIZE, ,, populationSize, ), ;, }, if, (, numberOfSuccesses, <, 0, ), {, throw]
[(, LocalizedFormats, ., POPULATION_SIZE, ,, populationSize, ), ;, }, if, (, numberOfSuccesses, <, 0, ), {, throw, new, NotPositiveException, (]
[(, LocalizedFormats, ., POPULATION_SIZE, ,, populationSize, ), ;, }, if, (, numberOfSuccesses, <, 0, ), {, throw, new, NotPositiveException, (]
[,, populationSize, ), ;, }, if, (, numberOfSuccesses, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,]
[(, numberOfSuccesses, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, numberOfSuccesses, ), ;, }, if, (]
[(, numberOfSuccesses, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, numberOfSuccesses, ), ;, }, if, (]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, numberOfSuccesses, ), ;, }, if, (, sampleSize, <]
[throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, numberOfSuccesses, ), ;, }, if, (, sampleSize, <, 0, ), {, throw]
[(, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, numberOfSuccesses, ), ;, }, if, (, sampleSize, <, 0, ), {, throw, new, NotPositiveException, (]
[(, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, numberOfSuccesses, ), ;, }, if, (, sampleSize, <, 0, ), {, throw, new, NotPositiveException, (]
[,, numberOfSuccesses, ), ;, }, if, (, sampleSize, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,]
[(, sampleSize, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (]
[(, sampleSize, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, numberOfSuccesses, >]
[throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, numberOfSuccesses, >, populationSize, ), {, throw]
[(, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, numberOfSuccesses, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (]
[(, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, numberOfSuccesses, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (]
[,, sampleSize, ), ;, }, if, (, numberOfSuccesses, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,]
[), ;, }, if, (, numberOfSuccesses, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,, numberOfSuccesses, ,]
[}, if, (, numberOfSuccesses, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,, numberOfSuccesses, ,, populationSize, ,]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,, numberOfSuccesses, ,, populationSize, ,, true, ), ;, }, if, (]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,, numberOfSuccesses, ,, populationSize, ,, true, ), ;, }, if, (]
[throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,, numberOfSuccesses, ,, populationSize, ,, true, ), ;, }, if, (, sampleSize, >]
[LocalizedFormats, ., NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, ,, numberOfSuccesses, ,, populationSize, ,, true, ), ;, }, if, (, sampleSize, >, populationSize, ), {, throw]
[,, numberOfSuccesses, ,, populationSize, ,, true, ), ;, }, if, (, sampleSize, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (]
[,, numberOfSuccesses, ,, populationSize, ,, true, ), ;, }, if, (, sampleSize, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (]
[,, true, ), ;, }, if, (, sampleSize, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,]
[), ;, }, if, (, sampleSize, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,]
[}, if, (, sampleSize, >, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,, populationSize, ,]
[>, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,, populationSize, ,, true, ), ;, }]
[>, populationSize, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,, populationSize, ,, true, ), ;, }]
[throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,, populationSize, ,, true, ), ;, }, this, ., numberOfSuccesses, =]
[NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,, populationSize, ,, true, ), ;, }, this, ., numberOfSuccesses, =, numberOfSuccesses, ;]
[NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,, populationSize, ,, true, ), ;, }, this, ., numberOfSuccesses, =, numberOfSuccesses, ;]
[SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, ,, sampleSize, ,, populationSize, ,, true, ), ;, }, this, ., numberOfSuccesses, =, numberOfSuccesses, ;, this, ., populationSize, =]
[sampleSize, ,, populationSize, ,, true, ), ;, }, this, ., numberOfSuccesses, =, numberOfSuccesses, ;, this, ., populationSize, =, populationSize, ;]
[sampleSize, ,, populationSize, ,, true, ), ;, }, this, ., numberOfSuccesses, =, numberOfSuccesses, ;, this, ., populationSize, =, populationSize, ;]
[true, ), ;, }, this, ., numberOfSuccesses, =, numberOfSuccesses, ;, this, ., populationSize, =, populationSize, ;, this, ., sampleSize, =]
[=, sampleSize, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, int, [, ], domain, =]
[;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, int, [, ], domain, =, getDomain, (]
[public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, int, [, ], domain, =, getDomain, (, populationSize, ,]
[cumulativeProbability, (, int, x, ), {, double, ret, ;, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,]
[{, double, ret, ;, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (]
[{, double, ret, ;, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (]
[ret, ;, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <]
[ret, ;, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <]
[int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <, domain, []
[=, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <, domain, [, 0, ], ), {]
[(, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <, domain, [, 0, ], ), {, ret, =]
[), ;, if, (, x, <, domain, [, 0, ], ), {, ret, =, 0.0, ;, }, else, if, (]
[), ;, if, (, x, <, domain, [, 0, ], ), {, ret, =, 0.0, ;, }, else, if, (]
[if, (, x, <, domain, [, 0, ], ), {, ret, =, 0.0, ;, }, else, if, (, x, >=]
[if, (, x, <, domain, [, 0, ], ), {, ret, =, 0.0, ;, }, else, if, (, x, >=]
[x, <, domain, [, 0, ], ), {, ret, =, 0.0, ;, }, else, if, (, x, >=, domain, []
[0, ], ), {, ret, =, 0.0, ;, }, else, if, (, x, >=, domain, [, 1, ], ), {]
[), {, ret, =, 0.0, ;, }, else, if, (, x, >=, domain, [, 1, ], ), {, ret, =]
[;, }, else, if, (, x, >=, domain, [, 1, ], ), {, ret, =, 1.0, ;, }, else, {]
[else, if, (, x, >=, domain, [, 1, ], ), {, ret, =, 1.0, ;, }, else, {, ret, =]
[(, x, >=, domain, [, 1, ], ), {, ret, =, 1.0, ;, }, else, {, ret, =, innerCumulativeProbability, (]
[(, x, >=, domain, [, 1, ], ), {, ret, =, 1.0, ;, }, else, {, ret, =, innerCumulativeProbability, (]
[>=, domain, [, 1, ], ), {, ret, =, 1.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, []
[1, ], ), {, ret, =, 1.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 0, ], ,]
[), {, ret, =, 1.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 0, ], ,, x, ,]
[;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 0, ], ,, x, ,, 1, ), ;, }, return]
[ret, ;, }, private, int, [, ], getDomain, (, int, n, ,, int, m, ,, int, k, ), {, return]
[int, [, ], getDomain, (, int, n, ,, int, m, ,, int, k, ), {, return, new, int, [, ]]
[[, ], getDomain, (, int, n, ,, int, m, ,, int, k, ), {, return, new, int, [, ], {]
[getDomain, (, int, n, ,, int, m, ,, int, k, ), {, return, new, int, [, ], {, getLowerDomain, (]
[int, n, ,, int, m, ,, int, k, ), {, return, new, int, [, ], {, getLowerDomain, (, n, ,]
[,, int, m, ,, int, k, ), {, return, new, int, [, ], {, getLowerDomain, (, n, ,, m, ,]
[,, int, k, ), {, return, new, int, [, ], {, getLowerDomain, (, n, ,, m, ,, k, ), ,]
[k, ), {, return, new, int, [, ], {, getLowerDomain, (, n, ,, m, ,, k, ), ,, getUpperDomain, (]
[{, return, new, int, [, ], {, getLowerDomain, (, n, ,, m, ,, k, ), ,, getUpperDomain, (, m, ,]
[k, ), }, ;, }, private, int, getLowerDomain, (, int, n, ,, int, m, ,, int, k, ), {, return]
[k, ), }, ;, }, private, int, getLowerDomain, (, int, n, ,, int, m, ,, int, k, ), {, return]
[}, private, int, getLowerDomain, (, int, n, ,, int, m, ,, int, k, ), {, return, FastMath, ., max, (]
[int, getLowerDomain, (, int, n, ,, int, m, ,, int, k, ), {, return, FastMath, ., max, (, 0, ,]
[int, getLowerDomain, (, int, n, ,, int, m, ,, int, k, ), {, return, FastMath, ., max, (, 0, ,]
[(, int, n, ,, int, m, ,, int, k, ), {, return, FastMath, ., max, (, 0, ,, m, -]
[int, n, ,, int, m, ,, int, k, ), {, return, FastMath, ., max, (, 0, ,, m, -, (]
[int, n, ,, int, m, ,, int, k, ), {, return, FastMath, ., max, (, 0, ,, m, -, (]
[,, int, m, ,, int, k, ), {, return, FastMath, ., max, (, 0, ,, m, -, (, n, -]
[(, 0, ,, m, -, (, n, -, k, ), ), ;, }, public, int, getNumberOfSuccesses, (, ), {, return]
[), ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;, }, public, int, getPopulationSize, (, ), {, return]
[numberOfSuccesses, ;, }, public, int, getPopulationSize, (, ), {, return, populationSize, ;, }, public, int, getSampleSize, (, ), {, return]
[getSampleSize, (, ), {, return, sampleSize, ;, }, private, int, getUpperDomain, (, int, m, ,, int, k, ), {, return]
[getSampleSize, (, ), {, return, sampleSize, ;, }, private, int, getUpperDomain, (, int, m, ,, int, k, ), {, return]
[return, sampleSize, ;, }, private, int, getUpperDomain, (, int, m, ,, int, k, ), {, return, FastMath, ., min, (]
[;, }, private, int, getUpperDomain, (, int, m, ,, int, k, ), {, return, FastMath, ., min, (, k, ,]
[m, ), ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, int, [, ], domain, =]
[;, }, public, double, probability, (, int, x, ), {, double, ret, ;, int, [, ], domain, =, getDomain, (]
[public, double, probability, (, int, x, ), {, double, ret, ;, int, [, ], domain, =, getDomain, (, populationSize, ,]
[probability, (, int, x, ), {, double, ret, ;, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,]
[{, double, ret, ;, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (]
[{, double, ret, ;, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (]
[{, double, ret, ;, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (]
[ret, ;, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <]
[ret, ;, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <]
[int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <, domain, []
[domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <, domain, [, 0, ], ||]
[domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <, domain, [, 0, ], ||]
[getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <, domain, [, 0, ], ||, x, >]
[getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <, domain, [, 0, ], ||, x, >]
[populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <, domain, [, 0, ], ||, x, >, domain, []
[sampleSize, ), ;, if, (, x, <, domain, [, 0, ], ||, x, >, domain, [, 1, ], ), {]
[;, if, (, x, <, domain, [, 0, ], ||, x, >, domain, [, 1, ], ), {, ret, =]
[], ||, x, >, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {, double, p, =]
[], ||, x, >, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {, double, p, =]
[>, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {, double, p, =, (, double, )]
[[, 1, ], ), {, ret, =, 0.0, ;, }, else, {, double, p, =, (, double, ), sampleSize, /]
[), {, ret, =, 0.0, ;, }, else, {, double, p, =, (, double, ), sampleSize, /, (, double, )]
[;, }, else, {, double, p, =, (, double, ), sampleSize, /, (, double, ), populationSize, ;, double, q, =]
[;, }, else, {, double, p, =, (, double, ), sampleSize, /, (, double, ), populationSize, ;, double, q, =]
[{, double, p, =, (, double, ), sampleSize, /, (, double, ), populationSize, ;, double, q, =, (, double, )]
[double, p, =, (, double, ), sampleSize, /, (, double, ), populationSize, ;, double, q, =, (, double, ), (]
[double, p, =, (, double, ), sampleSize, /, (, double, ), populationSize, ;, double, q, =, (, double, ), (]
[=, (, double, ), sampleSize, /, (, double, ), populationSize, ;, double, q, =, (, double, ), (, populationSize, -]
[), sampleSize, /, (, double, ), populationSize, ;, double, q, =, (, double, ), (, populationSize, -, sampleSize, ), /]
[(, double, ), populationSize, ;, double, q, =, (, double, ), (, populationSize, -, sampleSize, ), /, (, double, )]
[double, q, =, (, double, ), (, populationSize, -, sampleSize, ), /, (, double, ), populationSize, ;, double, p1, =]
[double, q, =, (, double, ), (, populationSize, -, sampleSize, ), /, (, double, ), populationSize, ;, double, p1, =]
[double, ), (, populationSize, -, sampleSize, ), /, (, double, ), populationSize, ;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (]
[(, populationSize, -, sampleSize, ), /, (, double, ), populationSize, ;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (, x, ,]
[-, sampleSize, ), /, (, double, ), populationSize, ;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,]
[), /, (, double, ), populationSize, ;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,]
[;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,, q, ), ;, double, p2, =]
[;, double, p1, =, SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,, q, ), ;, double, p2, =]
[SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,, q, ), ;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (]
[SaddlePointExpansion, ., logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,, q, ), ;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (]
[logBinomialProbability, (, x, ,, numberOfSuccesses, ,, p, ,, q, ), ;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, -]
[x, ,, numberOfSuccesses, ,, p, ,, q, ), ;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, -, x, ,]
[x, ,, numberOfSuccesses, ,, p, ,, q, ), ;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, -, x, ,]
[numberOfSuccesses, ,, p, ,, q, ), ;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, -, x, ,, populationSize, -]
[p, ,, q, ), ;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, -, x, ,, populationSize, -, numberOfSuccesses, ,]
[q, ), ;, double, p2, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, -, x, ,, populationSize, -, numberOfSuccesses, ,, p, ,]
[SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, -, x, ,, populationSize, -, numberOfSuccesses, ,, p, ,, q, ), ;, double, p3, =]
[SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, -, x, ,, populationSize, -, numberOfSuccesses, ,, p, ,, q, ), ;, double, p3, =]
[sampleSize, -, x, ,, populationSize, -, numberOfSuccesses, ,, p, ,, q, ), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (]
[x, ,, populationSize, -, numberOfSuccesses, ,, p, ,, q, ), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,]
[populationSize, -, numberOfSuccesses, ,, p, ,, q, ), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,]
[numberOfSuccesses, ,, p, ,, q, ), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,]
[,, q, ), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,, q, ), ;]
[), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,, q, ), ;, ret, =]
[), ;, double, p3, =, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,, q, ), ;, ret, =]
[=, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,, q, ), ;, ret, =, FastMath, ., exp, (]
[=, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,, q, ), ;, ret, =, FastMath, ., exp, (]
[=, SaddlePointExpansion, ., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,, q, ), ;, ret, =, FastMath, ., exp, (]
[., logBinomialProbability, (, sampleSize, ,, populationSize, ,, p, ,, q, ), ;, ret, =, FastMath, ., exp, (, p1, +]
[(, sampleSize, ,, populationSize, ,, p, ,, q, ), ;, ret, =, FastMath, ., exp, (, p1, +, p2, -]
[p, ,, q, ), ;, ret, =, FastMath, ., exp, (, p1, +, p2, -, p3, ), ;, }, return]
[ret, ;, }, public, double, upperCumulativeProbability, (, int, x, ), {, double, ret, ;, final, int, [, ], domain, =]
[}, public, double, upperCumulativeProbability, (, int, x, ), {, double, ret, ;, final, int, [, ], domain, =, getDomain, (]
[double, upperCumulativeProbability, (, int, x, ), {, double, ret, ;, final, int, [, ], domain, =, getDomain, (, populationSize, ,]
[(, int, x, ), {, double, ret, ;, final, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,]
[double, ret, ;, final, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (]
[double, ret, ;, final, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (]
[;, final, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <=]
[;, final, int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <=]
[int, [, ], domain, =, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <=, domain, []
[=, getDomain, (, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <=, domain, [, 0, ], ), {]
[(, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ;, if, (, x, <=, domain, [, 0, ], ), {, ret, =]
[), ;, if, (, x, <=, domain, [, 0, ], ), {, ret, =, 1.0, ;, }, else, if, (]
[), ;, if, (, x, <=, domain, [, 0, ], ), {, ret, =, 1.0, ;, }, else, if, (]
[if, (, x, <=, domain, [, 0, ], ), {, ret, =, 1.0, ;, }, else, if, (, x, >]
[if, (, x, <=, domain, [, 0, ], ), {, ret, =, 1.0, ;, }, else, if, (, x, >]
[x, <=, domain, [, 0, ], ), {, ret, =, 1.0, ;, }, else, if, (, x, >, domain, []
[0, ], ), {, ret, =, 1.0, ;, }, else, if, (, x, >, domain, [, 1, ], ), {]
[), {, ret, =, 1.0, ;, }, else, if, (, x, >, domain, [, 1, ], ), {, ret, =]
[;, }, else, if, (, x, >, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {]
[else, if, (, x, >, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {, ret, =]
[(, x, >, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {, ret, =, innerCumulativeProbability, (]
[(, x, >, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {, ret, =, innerCumulativeProbability, (]
[>, domain, [, 1, ], ), {, ret, =, 0.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, []
[1, ], ), {, ret, =, 0.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 1, ], ,]
[), {, ret, =, 0.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 1, ], ,, x, ,]
[{, ret, =, 0.0, ;, }, else, {, ret, =, innerCumulativeProbability, (, domain, [, 1, ], ,, x, ,, -]
[}, else, {, ret, =, innerCumulativeProbability, (, domain, [, 1, ], ,, x, ,, -, 1, ), ;, }, return]
[ret, ;, }, private, double, innerCumulativeProbability, (, int, x0, ,, int, x1, ,, int, dx, ), {, double, ret, =]
[}, private, double, innerCumulativeProbability, (, int, x0, ,, int, x1, ,, int, dx, ), {, double, ret, =, probability, (]
[int, x0, ,, int, x1, ,, int, dx, ), {, double, ret, =, probability, (, x0, ), ;, while, (]
[int, x0, ,, int, x1, ,, int, dx, ), {, double, ret, =, probability, (, x0, ), ;, while, (]
[,, int, x1, ,, int, dx, ), {, double, ret, =, probability, (, x0, ), ;, while, (, x0, !=]
[,, int, dx, ), {, double, ret, =, probability, (, x0, ), ;, while, (, x0, !=, x1, ), {]
[dx, ), {, double, ret, =, probability, (, x0, ), ;, while, (, x0, !=, x1, ), {, x0, +=]
[{, double, ret, =, probability, (, x0, ), ;, while, (, x0, !=, x1, ), {, x0, +=, dx, ;]
[ret, =, probability, (, x0, ), ;, while, (, x0, !=, x1, ), {, x0, +=, dx, ;, ret, +=]
[probability, (, x0, ), ;, while, (, x0, !=, x1, ), {, x0, +=, dx, ;, ret, +=, probability, (]
[while, (, x0, !=, x1, ), {, x0, +=, dx, ;, ret, +=, probability, (, x0, ), ;, }, return]
[;, ret, +=, probability, (, x0, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, return]
[;, ret, +=, probability, (, x0, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, return]
[(, x0, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, return, getSampleSize, (, ), *]
[x0, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, return, getSampleSize, (, ), *, (]
[x0, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, return, getSampleSize, (, ), *, (]
[return, ret, ;, }, public, double, getNumericalMean, (, ), {, return, getSampleSize, (, ), *, (, getNumberOfSuccesses, (, ), /]
[}, public, double, getNumericalMean, (, ), {, return, getSampleSize, (, ), *, (, getNumberOfSuccesses, (, ), /, (, double, )]
[(, ), /, (, double, ), getPopulationSize, (, ), ), ;, }, public, double, getNumericalVariance, (, ), {, if, (]
[), /, (, double, ), getPopulationSize, (, ), ), ;, }, public, double, getNumericalVariance, (, ), {, if, (, !]
[double, ), getPopulationSize, (, ), ), ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {]
[getPopulationSize, (, ), ), ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =]
[;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;]
[public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =]
[), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =, true, ;, }, return]
[;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, N, =]
[;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, N, =, getPopulationSize, (, ), ;, final, double, m, =]
[final, double, N, =, getPopulationSize, (, ), ;, final, double, m, =, getNumberOfSuccesses, (, ), ;, final, double, n, =]
[(, ), ;, final, double, m, =, getNumberOfSuccesses, (, ), ;, final, double, n, =, getSampleSize, (, ), ;, return]
[(, ), ;, final, double, m, =, getNumberOfSuccesses, (, ), ;, final, double, n, =, getSampleSize, (, ), ;, return]
[), ;, final, double, m, =, getNumberOfSuccesses, (, ), ;, final, double, n, =, getSampleSize, (, ), ;, return, (]
[), ;, final, double, m, =, getNumberOfSuccesses, (, ), ;, final, double, n, =, getSampleSize, (, ), ;, return, (]
[), ;, final, double, m, =, getNumberOfSuccesses, (, ), ;, final, double, n, =, getSampleSize, (, ), ;, return, (]
[), ;, final, double, m, =, getNumberOfSuccesses, (, ), ;, final, double, n, =, getSampleSize, (, ), ;, return, (]
[final, double, m, =, getNumberOfSuccesses, (, ), ;, final, double, n, =, getSampleSize, (, ), ;, return, (, n, *]
[m, =, getNumberOfSuccesses, (, ), ;, final, double, n, =, getSampleSize, (, ), ;, return, (, n, *, m, *]
[=, getNumberOfSuccesses, (, ), ;, final, double, n, =, getSampleSize, (, ), ;, return, (, n, *, m, *, (]
[=, getNumberOfSuccesses, (, ), ;, final, double, n, =, getSampleSize, (, ), ;, return, (, n, *, m, *, (]
[(, ), ;, final, double, n, =, getSampleSize, (, ), ;, return, (, n, *, m, *, (, N, -]
[final, double, n, =, getSampleSize, (, ), ;, return, (, n, *, m, *, (, N, -, n, ), *]
[double, n, =, getSampleSize, (, ), ;, return, (, n, *, m, *, (, N, -, n, ), *, (]
[double, n, =, getSampleSize, (, ), ;, return, (, n, *, m, *, (, N, -, n, ), *, (]
[=, getSampleSize, (, ), ;, return, (, n, *, m, *, (, N, -, n, ), *, (, N, -]
[;, return, (, n, *, m, *, (, N, -, n, ), *, (, N, -, m, ), ), /]
[return, (, n, *, m, *, (, N, -, n, ), *, (, N, -, m, ), ), /, (]
[return, (, n, *, m, *, (, N, -, n, ), *, (, N, -, m, ), ), /, (]
[return, (, n, *, m, *, (, N, -, n, ), *, (, N, -, m, ), ), /, (]
[n, *, m, *, (, N, -, n, ), *, (, N, -, m, ), ), /, (, N, *]
[m, *, (, N, -, n, ), *, (, N, -, m, ), ), /, (, N, *, N, *]
[*, (, N, -, n, ), *, (, N, -, m, ), ), /, (, N, *, N, *, (]
[*, (, N, -, n, ), *, (, N, -, m, ), ), /, (, N, *, N, *, (]
[N, -, n, ), *, (, N, -, m, ), ), /, (, N, *, N, *, (, N, -]
[(, N, *, N, *, (, N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (, ), {, return]
[(, N, *, N, *, (, N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (, ), {, return]
[*, (, N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (]
[N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (, 0, ,]
[N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (, 0, ,]
[N, -, 1, ), ), ;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (, 0, ,]
[), ;, }, public, int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (, 0, ,, getSampleSize, (, ), +]
[int, getSupportLowerBound, (, ), {, return, FastMath, ., max, (, 0, ,, getSampleSize, (, ), +, getNumberOfSuccesses, (, ), -]
[(, ), +, getNumberOfSuccesses, (, ), -, getPopulationSize, (, ), ), ;, }, public, int, getSupportUpperBound, (, ), {, return]
[(, ), +, getNumberOfSuccesses, (, ), -, getPopulationSize, (, ), ), ;, }, public, int, getSupportUpperBound, (, ), {, return]
[(, ), -, getPopulationSize, (, ), ), ;, }, public, int, getSupportUpperBound, (, ), {, return, FastMath, ., min, (]
[(, ), ), ;, }, public, int, getSupportUpperBound, (, ), {, return, FastMath, ., min, (, getNumberOfSuccesses, (, ), ,]
[., min, (, getNumberOfSuccesses, (, ), ,, getSampleSize, (, ), ), ;, }, public, boolean, isSupportConnected, (, ), {, return]
