[;, public, static, final, int, MIN_EXP, =, -, 32767, ;, public, static, final, int, MAX_EXP, =, 32768, ;, public, static]
[;, public, static, final, int, MAX_EXP, =, 32768, ;, public, static, final, int, ERR_SCALE, =, 32760, ;, public, static, final]
[;, public, static, final, int, MAX_EXP, =, 32768, ;, public, static, final, int, ERR_SCALE, =, 32760, ;, public, static, final]
[;, public, static, final, int, ERR_SCALE, =, 32760, ;, public, static, final, byte, FINITE, =, 0, ;, public, static, final]
[;, public, static, final, byte, FINITE, =, 0, ;, public, static, final, byte, INFINITE, =, 1, ;, public, static, final]
[;, public, static, final, byte, INFINITE, =, 1, ;, public, static, final, byte, SNAN, =, 2, ;, public, static, final]
[;, public, static, final, byte, SNAN, =, 2, ;, public, static, final, byte, QNAN, =, 3, ;, private, static, final]
[;, public, static, final, byte, QNAN, =, 3, ;, private, static, final, String, NAN_STRING, =, "NaN", ;, private, static, final]
[;, private, static, final, String, NAN_STRING, =, "NaN", ;, private, static, final, String, POS_INFINITY_STRING, =, "Infinity", ;, private, static, final]
[;, private, static, final, String, POS_INFINITY_STRING, =, "Infinity", ;, private, static, final, String, NEG_INFINITY_STRING, =, "-Infinity", ;, private, static, final]
[;, private, static, final, String, NEG_INFINITY_STRING, =, "-Infinity", ;, private, static, final, String, ADD_TRAP, =, "add", ;, private, static, final]
[;, private, static, final, String, ADD_TRAP, =, "add", ;, private, static, final, String, MULTIPLY_TRAP, =, "multiply", ;, private, static, final]
[;, private, static, final, String, MULTIPLY_TRAP, =, "multiply", ;, private, static, final, String, DIVIDE_TRAP, =, "divide", ;, private, static, final]
[;, private, static, final, String, DIVIDE_TRAP, =, "divide", ;, private, static, final, String, SQRT_TRAP, =, "sqrt", ;, private, static, final]
[;, private, static, final, String, SQRT_TRAP, =, "sqrt", ;, private, static, final, String, ALIGN_TRAP, =, "align", ;, private, static, final]
[;, private, static, final, String, ALIGN_TRAP, =, "align", ;, private, static, final, String, TRUNC_TRAP, =, "trunc", ;, private, static, final]
[;, private, static, final, String, TRUNC_TRAP, =, "trunc", ;, private, static, final, String, NEXT_AFTER_TRAP, =, "nextAfter", ;, private, static, final]
[;, private, static, final, String, NEXT_AFTER_TRAP, =, "nextAfter", ;, private, static, final, String, LESS_THAN_TRAP, =, "lessThan", ;, private, static, final]
[;, private, static, final, String, LESS_THAN_TRAP, =, "lessThan", ;, private, static, final, String, GREATER_THAN_TRAP, =, "greaterThan", ;, private, static, final]
[;, private, static, final, String, GREATER_THAN_TRAP, =, "greaterThan", ;, private, static, final, String, NEW_INSTANCE_TRAP, =, "newInstance", ;, protected, int, []
[;, private, static, final, String, NEW_INSTANCE_TRAP, =, "newInstance", ;, protected, int, [, ], mant, ;, protected, byte, sign, ;, protected]
[;, protected, int, [, ], mant, ;, protected, byte, sign, ;, protected, int, exp, ;, protected, byte, nans, ;, private]
[=, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans]
[;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, }]
[], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;]
[., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, .]
[=, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, }, protected, Dfp]
[;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, }, protected, Dfp, (, final]
[=, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, }, protected, Dfp, (, final, DfpField, field]
[;, nans, =, FINITE, ;, this, ., field, =, field, ;, }, protected, Dfp, (, final, DfpField, field, ,, byte]
[=, FINITE, ;, this, ., field, =, field, ;, }, protected, Dfp, (, final, DfpField, field, ,, byte, x, )]
[;, this, ., field, =, field, ;, }, protected, Dfp, (, final, DfpField, field, ,, byte, x, ), {, this]
[=, field, ;, }, protected, Dfp, (, final, DfpField, field, ,, byte, x, ), {, this, (, field, ,, (]
[., field, =, field, ;, }, protected, Dfp, (, final, DfpField, field, ,, byte, x, ), {, this, (, field]
[;, }, protected, Dfp, (, final, DfpField, field, ,, byte, x, ), {, this, (, field, ,, (, long, )]
[,, (, long, ), x, ), ;, }, protected, Dfp, (, final, DfpField, field, ,, int, x, ), {, this]
[), ;, }, protected, Dfp, (, final, DfpField, field, ,, int, x, ), {, this, (, field, ,, (, long]
[), ;, }, protected, Dfp, (, final, DfpField, field, ,, int, x, ), {, this, (, field, ,, (, long]
[,, (, long, ), x, ), ;, }, protected, Dfp, (, final, DfpField, field, ,, long, x, ), {, mant]
[), ;, }, protected, Dfp, (, final, DfpField, field, ,, long, x, ), {, mant, =, new, int, [, field]
[), ;, }, protected, Dfp, (, final, DfpField, field, ,, long, x, ), {, mant, =, new, int, [, field]
[=, new, int, [, field, ., getRadixDigits, (, ), ], ;, nans, =, FINITE, ;, this, ., field, =, field]
[;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, isLongMin, =, false, ;, if, (, x, ==]
[], ;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, isLongMin, =, false, ;, if, (, x]
[., getRadixDigits, (, ), ], ;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, isLongMin, =, false]
[=, FINITE, ;, this, ., field, =, field, ;, boolean, isLongMin, =, false, ;, if, (, x, ==, Long, .]
[;, this, ., field, =, field, ;, boolean, isLongMin, =, false, ;, if, (, x, ==, Long, ., MIN_VALUE, )]
[=, field, ;, boolean, isLongMin, =, false, ;, if, (, x, ==, Long, ., MIN_VALUE, ), {, isLongMin, =, true]
[., field, =, field, ;, boolean, isLongMin, =, false, ;, if, (, x, ==, Long, ., MIN_VALUE, ), {, isLongMin]
[;, boolean, isLongMin, =, false, ;, if, (, x, ==, Long, ., MIN_VALUE, ), {, isLongMin, =, true, ;, ++]
[;, if, (, x, ==, Long, ., MIN_VALUE, ), {, isLongMin, =, true, ;, ++, x, ;, }, if, (]
[), {, isLongMin, =, true, ;, ++, x, ;, }, if, (, x, <, 0, ), {, sign, =, -]
[==, Long, ., MIN_VALUE, ), {, isLongMin, =, true, ;, ++, x, ;, }, if, (, x, <, 0, )]
[), {, isLongMin, =, true, ;, ++, x, ;, }, if, (, x, <, 0, ), {, sign, =, -]
[., MIN_VALUE, ), {, isLongMin, =, true, ;, ++, x, ;, }, if, (, x, <, 0, ), {, sign]
[=, true, ;, ++, x, ;, }, if, (, x, <, 0, ), {, sign, =, -, 1, ;, x]
[;, ++, x, ;, }, if, (, x, <, 0, ), {, sign, =, -, 1, ;, x, =, -]
[;, }, if, (, x, <, 0, ), {, sign, =, -, 1, ;, x, =, -, x, ;, }]
[;, }, if, (, x, <, 0, ), {, sign, =, -, 1, ;, x, =, -, x, ;, }]
[), {, sign, =, -, 1, ;, x, =, -, x, ;, }, else, {, sign, =, 1, ;, }]
[<, 0, ), {, sign, =, -, 1, ;, x, =, -, x, ;, }, else, {, sign, =, 1]
[), {, sign, =, -, 1, ;, x, =, -, x, ;, }, else, {, sign, =, 1, ;, }]
[=, -, 1, ;, x, =, -, x, ;, }, else, {, sign, =, 1, ;, }, exp, =, 0]
[;, x, =, -, x, ;, }, else, {, sign, =, 1, ;, }, exp, =, 0, ;, while, (]
[;, x, =, -, x, ;, }, else, {, sign, =, 1, ;, }, exp, =, 0, ;, while, (]
[=, -, x, ;, }, else, {, sign, =, 1, ;, }, exp, =, 0, ;, while, (, x, !=]
[;, }, else, {, sign, =, 1, ;, }, exp, =, 0, ;, while, (, x, !=, 0, ), {]
[;, }, else, {, sign, =, 1, ;, }, exp, =, 0, ;, while, (, x, !=, 0, ), {]
[=, 1, ;, }, exp, =, 0, ;, while, (, x, !=, 0, ), {, System, ., arraycopy, (, mant]
[;, }, exp, =, 0, ;, while, (, x, !=, 0, ), {, System, ., arraycopy, (, mant, ,, mant]
[=, 0, ;, while, (, x, !=, 0, ), {, System, ., arraycopy, (, mant, ,, mant, ., length, -]
[;, while, (, x, !=, 0, ), {, System, ., arraycopy, (, mant, ,, mant, ., length, -, exp, ,]
[), {, System, ., arraycopy, (, mant, ,, mant, ., length, -, exp, ,, mant, ,, mant, ., length, -]
[!=, 0, ), {, System, ., arraycopy, (, mant, ,, mant, ., length, -, exp, ,, mant, ,, mant, .]
[), {, System, ., arraycopy, (, mant, ,, mant, ., length, -, exp, ,, mant, ,, mant, ., length, -]
[;, mant, [, mant, ., length, -, 1, ], =, (, int, ), (, x, %, RADIX, ), ;, x]
[., arraycopy, (, mant, ,, mant, ., length, -, exp, ,, mant, ,, mant, ., length, -, 1, -, exp]
[,, mant, ., length, -, exp, ,, mant, ,, mant, ., length, -, 1, -, exp, ,, exp, ), ;]
[,, mant, ,, mant, ., length, -, 1, -, exp, ,, exp, ), ;, mant, [, mant, ., length, -]
[-, exp, ,, mant, ,, mant, ., length, -, 1, -, exp, ,, exp, ), ;, mant, [, mant, .]
[., length, -, exp, ,, mant, ,, mant, ., length, -, 1, -, exp, ,, exp, ), ;, mant, []
[,, mant, ,, mant, ., length, -, 1, -, exp, ,, exp, ), ;, mant, [, mant, ., length, -]
[,, mant, ., length, -, 1, -, exp, ,, exp, ), ;, mant, [, mant, ., length, -, 1, ]]
[,, exp, ), ;, mant, [, mant, ., length, -, 1, ], =, (, int, ), (, x, %, RADIX]
[-, exp, ,, exp, ), ;, mant, [, mant, ., length, -, 1, ], =, (, int, ), (, x]
[-, 1, -, exp, ,, exp, ), ;, mant, [, mant, ., length, -, 1, ], =, (, int, )]
[., length, -, 1, -, exp, ,, exp, ), ;, mant, [, mant, ., length, -, 1, ], =, (]
[-, exp, ,, exp, ), ;, mant, [, mant, ., length, -, 1, ], =, (, int, ), (, x]
[,, exp, ), ;, mant, [, mant, ., length, -, 1, ], =, (, int, ), (, x, %, RADIX]
[), ;, mant, [, mant, ., length, -, 1, ], =, (, int, ), (, x, %, RADIX, ), ;]
[=, (, int, ), (, x, %, RADIX, ), ;, x, /=, RADIX, ;, exp, ++, ;, }, if, (]
[[, mant, ., length, -, 1, ], =, (, int, ), (, x, %, RADIX, ), ;, x, /=, RADIX]
[], =, (, int, ), (, x, %, RADIX, ), ;, x, /=, RADIX, ;, exp, ++, ;, }, if]
[-, 1, ], =, (, int, ), (, x, %, RADIX, ), ;, x, /=, RADIX, ;, exp, ++, ;]
[., length, -, 1, ], =, (, int, ), (, x, %, RADIX, ), ;, x, /=, RADIX, ;, exp]
[], =, (, int, ), (, x, %, RADIX, ), ;, x, /=, RADIX, ;, exp, ++, ;, }, if]
[;, x, /=, RADIX, ;, exp, ++, ;, }, if, (, isLongMin, ), {, for, (, int, i, =, 0]
[;, x, /=, RADIX, ;, exp, ++, ;, }, if, (, isLongMin, ), {, for, (, int, i, =, 0]
[), ;, x, /=, RADIX, ;, exp, ++, ;, }, if, (, isLongMin, ), {, for, (, int, i, =]
[%, RADIX, ), ;, x, /=, RADIX, ;, exp, ++, ;, }, if, (, isLongMin, ), {, for, (, int]
[), ;, x, /=, RADIX, ;, exp, ++, ;, }, if, (, isLongMin, ), {, for, (, int, i, =]
[/=, RADIX, ;, exp, ++, ;, }, if, (, isLongMin, ), {, for, (, int, i, =, 0, ;, i]
[;, exp, ++, ;, }, if, (, isLongMin, ), {, for, (, int, i, =, 0, ;, i, <, mant]
[;, }, if, (, isLongMin, ), {, for, (, int, i, =, 0, ;, i, <, mant, ., length, -]
[++, ;, }, if, (, isLongMin, ), {, for, (, int, i, =, 0, ;, i, <, mant, ., length]
[), {, for, (, int, i, =, 0, ;, i, <, mant, ., length, -, 1, ;, i, ++, )]
[;, i, <, mant, ., length, -, 1, ;, i, ++, ), {, if, (, mant, [, i, ], !=]
[;, i, ++, ), {, if, (, mant, [, i, ], !=, 0, ), {, mant, [, i, ], ++]
[<, mant, ., length, -, 1, ;, i, ++, ), {, if, (, mant, [, i, ], !=, 0, )]
[;, i, ++, ), {, if, (, mant, [, i, ], !=, 0, ), {, mant, [, i, ], ++]
[-, 1, ;, i, ++, ), {, if, (, mant, [, i, ], !=, 0, ), {, mant, [, i]
[., length, -, 1, ;, i, ++, ), {, if, (, mant, [, i, ], !=, 0, ), {, mant]
[;, i, ++, ), {, if, (, mant, [, i, ], !=, 0, ), {, mant, [, i, ], ++]
[), {, if, (, mant, [, i, ], !=, 0, ), {, mant, [, i, ], ++, ;, break, ;]
[++, ), {, if, (, mant, [, i, ], !=, 0, ), {, mant, [, i, ], ++, ;, break]
[), {, mant, [, i, ], ++, ;, break, ;, }, }, }, }, protected, Dfp, (, final, DfpField, field]
[!=, 0, ), {, mant, [, i, ], ++, ;, break, ;, }, }, }, }, protected, Dfp, (, final]
[[, i, ], !=, 0, ), {, mant, [, i, ], ++, ;, break, ;, }, }, }, }, protected]
[], !=, 0, ), {, mant, [, i, ], ++, ;, break, ;, }, }, }, }, protected, Dfp, (]
[), {, mant, [, i, ], ++, ;, break, ;, }, }, }, }, protected, Dfp, (, final, DfpField, field]
[;, break, ;, }, }, }, }, protected, Dfp, (, final, DfpField, field, ,, double, x, ), {, mant, =]
[++, ;, break, ;, }, }, }, }, protected, Dfp, (, final, DfpField, field, ,, double, x, ), {, mant]
[[, i, ], ++, ;, break, ;, }, }, }, }, protected, Dfp, (, final, DfpField, field, ,, double, x]
[], ++, ;, break, ;, }, }, }, }, protected, Dfp, (, final, DfpField, field, ,, double, x, ), {]
[=, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans]
[;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, long]
[], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;]
[., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, .]
[=, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, long, bits, =]
[;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, long, bits, =, Double, .]
[=, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, long, bits, =, Double, ., doubleToLongBits, (]
[;, nans, =, FINITE, ;, this, ., field, =, field, ;, long, bits, =, Double, ., doubleToLongBits, (, x, )]
[=, FINITE, ;, this, ., field, =, field, ;, long, bits, =, Double, ., doubleToLongBits, (, x, ), ;, long]
[;, this, ., field, =, field, ;, long, bits, =, Double, ., doubleToLongBits, (, x, ), ;, long, mantissa, =]
[=, field, ;, long, bits, =, Double, ., doubleToLongBits, (, x, ), ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;]
[., field, =, field, ;, long, bits, =, Double, ., doubleToLongBits, (, x, ), ;, long, mantissa, =, bits, &]
[;, long, bits, =, Double, ., doubleToLongBits, (, x, ), ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, exponent]
[;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, exponent, =, (, int, ), (, (, bits, &, 0x7ff0000000000000L, )]
[., doubleToLongBits, (, x, ), ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, exponent, =, (, int, ), (]
[), ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, exponent, =, (, int, ), (, (, bits, &, 0x7ff0000000000000L]
[;, int, exponent, =, (, int, ), (, (, bits, &, 0x7ff0000000000000L, ), >, >, 52, ), -, 1023, ;]
[&, 0x000fffffffffffffL, ;, int, exponent, =, (, int, ), (, (, bits, &, 0x7ff0000000000000L, ), >, >, 52, ), -]
[;, int, exponent, =, (, int, ), (, (, bits, &, 0x7ff0000000000000L, ), >, >, 52, ), -, 1023, ;]
[;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, if, (, (, bits]
[-, 1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, if, (]
[-, 1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, if, (]
[), -, 1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, if]
[>, >, 52, ), -, 1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0]
[), >, >, 52, ), -, 1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==]
[&, 0x7ff0000000000000L, ), >, >, 52, ), -, 1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (]
[), >, >, 52, ), -, 1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==]
[), -, 1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, if]
[;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, if, (, (, bits]
[), {, if, (, x, ==, 0, ), {, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {]
[==, -, 1023, ), {, if, (, x, ==, 0, ), {, if, (, (, bits, &, 0x8000000000000000L, ), !=]
[), {, if, (, x, ==, 0, ), {, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {]
[), {, if, (, x, ==, 0, ), {, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {]
[), {, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, sign, =, -, 1, ;, }, return]
[==, 0, ), {, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, sign, =, -, 1, ;]
[), {, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, sign, =, -, 1, ;, }, return]
[), {, sign, =, -, 1, ;, }, return, ;, }, exponent, ++, ;, while, (, (, mantissa, &, 0x0010000000000000L]
[!=, 0, ), {, sign, =, -, 1, ;, }, return, ;, }, exponent, ++, ;, while, (, (, mantissa]
[), !=, 0, ), {, sign, =, -, 1, ;, }, return, ;, }, exponent, ++, ;, while, (, (]
[&, 0x8000000000000000L, ), !=, 0, ), {, sign, =, -, 1, ;, }, return, ;, }, exponent, ++, ;, while]
[), !=, 0, ), {, sign, =, -, 1, ;, }, return, ;, }, exponent, ++, ;, while, (, (]
[), {, sign, =, -, 1, ;, }, return, ;, }, exponent, ++, ;, while, (, (, mantissa, &, 0x0010000000000000L]
[=, -, 1, ;, }, return, ;, }, exponent, ++, ;, while, (, (, mantissa, &, 0x0010000000000000L, ), ==, 0]
[;, }, return, ;, }, exponent, ++, ;, while, (, (, mantissa, &, 0x0010000000000000L, ), ==, 0, ), {, exponent]
[;, }, return, ;, }, exponent, ++, ;, while, (, (, mantissa, &, 0x0010000000000000L, ), ==, 0, ), {, exponent]
[;, while, (, (, mantissa, &, 0x0010000000000000L, ), ==, 0, ), {, exponent, --, ;, mantissa, <<=, 1, ;, }]
[++, ;, while, (, (, mantissa, &, 0x0010000000000000L, ), ==, 0, ), {, exponent, --, ;, mantissa, <<=, 1, ;]
[), {, exponent, --, ;, mantissa, <<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (, exponent, ==, 1024]
[==, 0, ), {, exponent, --, ;, mantissa, <<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (, exponent]
[), ==, 0, ), {, exponent, --, ;, mantissa, <<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (]
[&, 0x0010000000000000L, ), ==, 0, ), {, exponent, --, ;, mantissa, <<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }]
[), ==, 0, ), {, exponent, --, ;, mantissa, <<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (]
[), {, exponent, --, ;, mantissa, <<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (, exponent, ==, 1024]
[;, mantissa, <<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (, exponent, ==, 1024, ), {, if, (]
[--, ;, mantissa, <<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (, exponent, ==, 1024, ), {, if]
[<<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (, exponent, ==, 1024, ), {, if, (, x, !=]
[;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (, exponent, ==, 1024, ), {, if, (, x, !=, x, )]
[&=, 0x000fffffffffffffL, ;, }, if, (, exponent, ==, 1024, ), {, if, (, x, !=, x, ), {, sign, =]
[;, }, if, (, exponent, ==, 1024, ), {, if, (, x, !=, x, ), {, sign, =, (, byte]
[), {, if, (, x, !=, x, ), {, sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;]
[==, 1024, ), {, if, (, x, !=, x, ), {, sign, =, (, byte, ), 1, ;, nans, =]
[), {, if, (, x, !=, x, ), {, sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;]
[), {, sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;, }, else, if, (, x, <, 0]
[!=, x, ), {, sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;, }, else, if, (, x]
[), {, sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;, }, else, if, (, x, <, 0]
[=, (, byte, ), 1, ;, nans, =, QNAN, ;, }, else, if, (, x, <, 0, ), {, sign]
[;, nans, =, QNAN, ;, }, else, if, (, x, <, 0, ), {, sign, =, (, byte, ), -]
[;, nans, =, QNAN, ;, }, else, if, (, x, <, 0, ), {, sign, =, (, byte, ), -]
[=, QNAN, ;, }, else, if, (, x, <, 0, ), {, sign, =, (, byte, ), -, 1, ;]
[;, }, else, if, (, x, <, 0, ), {, sign, =, (, byte, ), -, 1, ;, nans, =]
[), {, sign, =, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, }, else, {, sign, =, (]
[<, 0, ), {, sign, =, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, }, else, {, sign]
[), {, sign, =, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, }, else, {, sign, =, (]
[=, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, }, else, {, sign, =, (, byte, ), 1]
[;, nans, =, INFINITE, ;, }, else, {, sign, =, (, byte, ), 1, ;, nans, =, INFINITE, ;, }]
[;, nans, =, INFINITE, ;, }, else, {, sign, =, (, byte, ), 1, ;, nans, =, INFINITE, ;, }]
[;, nans, =, INFINITE, ;, }, else, {, sign, =, (, byte, ), 1, ;, nans, =, INFINITE, ;, }]
[=, INFINITE, ;, }, else, {, sign, =, (, byte, ), 1, ;, nans, =, INFINITE, ;, }, return, ;]
[;, }, else, {, sign, =, (, byte, ), 1, ;, nans, =, INFINITE, ;, }, return, ;, }, Dfp]
[=, (, byte, ), 1, ;, nans, =, INFINITE, ;, }, return, ;, }, Dfp, xdfp, =, new, Dfp, (]
[;, nans, =, INFINITE, ;, }, return, ;, }, Dfp, xdfp, =, new, Dfp, (, field, ,, mantissa, ), ;]
[;, nans, =, INFINITE, ;, }, return, ;, }, Dfp, xdfp, =, new, Dfp, (, field, ,, mantissa, ), ;]
[=, INFINITE, ;, }, return, ;, }, Dfp, xdfp, =, new, Dfp, (, field, ,, mantissa, ), ;, xdfp, =]
[;, }, return, ;, }, Dfp, xdfp, =, new, Dfp, (, field, ,, mantissa, ), ;, xdfp, =, xdfp, .]
[;, xdfp, =, xdfp, ., divide, (, new, Dfp, (, field, ,, 4503599627370496l, ), ), ., add, (, field, .]
[,, mantissa, ), ;, xdfp, =, xdfp, ., divide, (, new, Dfp, (, field, ,, 4503599627370496l, ), ), ., add]
[), ;, xdfp, =, xdfp, ., divide, (, new, Dfp, (, field, ,, 4503599627370496l, ), ), ., add, (, field]
[=, xdfp, ., divide, (, new, Dfp, (, field, ,, 4503599627370496l, ), ), ., add, (, field, ., getOne, (]
[;, xdfp, =, xdfp, ., multiply, (, DfpMath, ., pow, (, field, ., getTwo, (, ), ,, exponent, ), )]
[., add, (, field, ., getOne, (, ), ), ;, xdfp, =, xdfp, ., multiply, (, DfpMath, ., pow, (]
[., divide, (, new, Dfp, (, field, ,, 4503599627370496l, ), ), ., add, (, field, ., getOne, (, ), )]
[), ., add, (, field, ., getOne, (, ), ), ;, xdfp, =, xdfp, ., multiply, (, DfpMath, ., pow]
[,, 4503599627370496l, ), ), ., add, (, field, ., getOne, (, ), ), ;, xdfp, =, xdfp, ., multiply, (]
[), ), ., add, (, field, ., getOne, (, ), ), ;, xdfp, =, xdfp, ., multiply, (, DfpMath, .]
[), ;, xdfp, =, xdfp, ., multiply, (, DfpMath, ., pow, (, field, ., getTwo, (, ), ,, exponent, )]
[., getOne, (, ), ), ;, xdfp, =, xdfp, ., multiply, (, DfpMath, ., pow, (, field, ., getTwo, (]
[=, xdfp, ., multiply, (, DfpMath, ., pow, (, field, ., getTwo, (, ), ,, exponent, ), ), ;, if]
[;, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, xdfp, =, xdfp, ., negate, (, ), ;]
[., multiply, (, DfpMath, ., pow, (, field, ., getTwo, (, ), ,, exponent, ), ), ;, if, (, (]
[), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, xdfp, =, xdfp, ., negate, (, )]
[., pow, (, field, ., getTwo, (, ), ,, exponent, ), ), ;, if, (, (, bits, &, 0x8000000000000000L, )]
[,, exponent, ), ), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, xdfp, =, xdfp, .]
[., getTwo, (, ), ,, exponent, ), ), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {]
[), ), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, xdfp, =, xdfp, ., negate, (]
[), {, xdfp, =, xdfp, ., negate, (, ), ;, }, System, ., arraycopy, (, xdfp, ., mant, ,, 0]
[!=, 0, ), {, xdfp, =, xdfp, ., negate, (, ), ;, }, System, ., arraycopy, (, xdfp, ., mant]
[), !=, 0, ), {, xdfp, =, xdfp, ., negate, (, ), ;, }, System, ., arraycopy, (, xdfp, .]
[&, 0x8000000000000000L, ), !=, 0, ), {, xdfp, =, xdfp, ., negate, (, ), ;, }, System, ., arraycopy, (]
[), !=, 0, ), {, xdfp, =, xdfp, ., negate, (, ), ;, }, System, ., arraycopy, (, xdfp, .]
[), {, xdfp, =, xdfp, ., negate, (, ), ;, }, System, ., arraycopy, (, xdfp, ., mant, ,, 0]
[=, xdfp, ., negate, (, ), ;, }, System, ., arraycopy, (, xdfp, ., mant, ,, 0, ,, mant, ,]
[;, }, System, ., arraycopy, (, xdfp, ., mant, ,, 0, ,, mant, ,, 0, ,, mant, ., length, )]
[., negate, (, ), ;, }, System, ., arraycopy, (, xdfp, ., mant, ,, 0, ,, mant, ,, 0, ,]
[;, sign, =, xdfp, ., sign, ;, exp, =, xdfp, ., exp, ;, nans, =, xdfp, ., nans, ;, }]
[., arraycopy, (, xdfp, ., mant, ,, 0, ,, mant, ,, 0, ,, mant, ., length, ), ;, sign, =]
[,, 0, ,, mant, ,, 0, ,, mant, ., length, ), ;, sign, =, xdfp, ., sign, ;, exp, =]
[., mant, ,, 0, ,, mant, ,, 0, ,, mant, ., length, ), ;, sign, =, xdfp, ., sign, ;]
[,, mant, ,, 0, ,, mant, ., length, ), ;, sign, =, xdfp, ., sign, ;, exp, =, xdfp, .]
[,, 0, ,, mant, ., length, ), ;, sign, =, xdfp, ., sign, ;, exp, =, xdfp, ., exp, ;]
[,, mant, ., length, ), ;, sign, =, xdfp, ., sign, ;, exp, =, xdfp, ., exp, ;, nans, =]
[), ;, sign, =, xdfp, ., sign, ;, exp, =, xdfp, ., exp, ;, nans, =, xdfp, ., nans, ;]
[., length, ), ;, sign, =, xdfp, ., sign, ;, exp, =, xdfp, ., exp, ;, nans, =, xdfp, .]
[=, xdfp, ., sign, ;, exp, =, xdfp, ., exp, ;, nans, =, xdfp, ., nans, ;, }, public, Dfp]
[;, exp, =, xdfp, ., exp, ;, nans, =, xdfp, ., nans, ;, }, public, Dfp, (, final, Dfp, d]
[., sign, ;, exp, =, xdfp, ., exp, ;, nans, =, xdfp, ., nans, ;, }, public, Dfp, (, final]
[=, xdfp, ., exp, ;, nans, =, xdfp, ., nans, ;, }, public, Dfp, (, final, Dfp, d, ), {]
[;, nans, =, xdfp, ., nans, ;, }, public, Dfp, (, final, Dfp, d, ), {, mant, =, d, .]
[., exp, ;, nans, =, xdfp, ., nans, ;, }, public, Dfp, (, final, Dfp, d, ), {, mant, =]
[=, xdfp, ., nans, ;, }, public, Dfp, (, final, Dfp, d, ), {, mant, =, d, ., mant, .]
[;, }, public, Dfp, (, final, Dfp, d, ), {, mant, =, d, ., mant, ., clone, (, ), ;]
[., nans, ;, }, public, Dfp, (, final, Dfp, d, ), {, mant, =, d, ., mant, ., clone, (]
[=, d, ., mant, ., clone, (, ), ;, sign, =, d, ., sign, ;, exp, =, d, ., exp]
[;, sign, =, d, ., sign, ;, exp, =, d, ., exp, ;, nans, =, d, ., nans, ;, field]
[., clone, (, ), ;, sign, =, d, ., sign, ;, exp, =, d, ., exp, ;, nans, =, d]
[., mant, ., clone, (, ), ;, sign, =, d, ., sign, ;, exp, =, d, ., exp, ;, nans]
[=, d, ., sign, ;, exp, =, d, ., exp, ;, nans, =, d, ., nans, ;, field, =, d]
[;, exp, =, d, ., exp, ;, nans, =, d, ., nans, ;, field, =, d, ., field, ;, }]
[., sign, ;, exp, =, d, ., exp, ;, nans, =, d, ., nans, ;, field, =, d, ., field]
[=, d, ., exp, ;, nans, =, d, ., nans, ;, field, =, d, ., field, ;, }, protected, Dfp]
[;, nans, =, d, ., nans, ;, field, =, d, ., field, ;, }, protected, Dfp, (, final, DfpField, field]
[., exp, ;, nans, =, d, ., nans, ;, field, =, d, ., field, ;, }, protected, Dfp, (, final]
[=, d, ., nans, ;, field, =, d, ., field, ;, }, protected, Dfp, (, final, DfpField, field, ,, final]
[;, field, =, d, ., field, ;, }, protected, Dfp, (, final, DfpField, field, ,, final, String, s, ), {]
[., nans, ;, field, =, d, ., field, ;, }, protected, Dfp, (, final, DfpField, field, ,, final, String, s]
[=, d, ., field, ;, }, protected, Dfp, (, final, DfpField, field, ,, final, String, s, ), {, mant, =]
[;, }, protected, Dfp, (, final, DfpField, field, ,, final, String, s, ), {, mant, =, new, int, [, field]
[., field, ;, }, protected, Dfp, (, final, DfpField, field, ,, final, String, s, ), {, mant, =, new, int]
[=, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans]
[;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean]
[], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;]
[., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, .]
[=, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, decimalFound, =]
[;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, decimalFound, =, false, ;]
[=, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, decimalFound, =, false, ;, final, int]
[;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, decimalFound, =, false, ;, final, int, rsize, =]
[=, FINITE, ;, this, ., field, =, field, ;, boolean, decimalFound, =, false, ;, final, int, rsize, =, 4, ;]
[;, this, ., field, =, field, ;, boolean, decimalFound, =, false, ;, final, int, rsize, =, 4, ;, final, int]
[=, field, ;, boolean, decimalFound, =, false, ;, final, int, rsize, =, 4, ;, final, int, offset, =, 4, ;]
[., field, =, field, ;, boolean, decimalFound, =, false, ;, final, int, rsize, =, 4, ;, final, int, offset, =]
[;, boolean, decimalFound, =, false, ;, final, int, rsize, =, 4, ;, final, int, offset, =, 4, ;, final, char]
[;, final, int, rsize, =, 4, ;, final, int, offset, =, 4, ;, final, char, [, ], striped, =, new]
[;, final, int, offset, =, 4, ;, final, char, [, ], striped, =, new, char, [, getRadixDigits, (, ), *]
[;, final, char, [, ], striped, =, new, char, [, getRadixDigits, (, ), *, rsize, +, offset, *, 2, ]]
[;, if, (, s, ., equals, (, POS_INFINITY_STRING, ), ), {, sign, =, (, byte, ), 1, ;, nans, =]
[], ;, if, (, s, ., equals, (, POS_INFINITY_STRING, ), ), {, sign, =, (, byte, ), 1, ;, nans]
[+, offset, *, 2, ], ;, if, (, s, ., equals, (, POS_INFINITY_STRING, ), ), {, sign, =, (, byte]
[*, rsize, +, offset, *, 2, ], ;, if, (, s, ., equals, (, POS_INFINITY_STRING, ), ), {, sign, =]
[+, offset, *, 2, ], ;, if, (, s, ., equals, (, POS_INFINITY_STRING, ), ), {, sign, =, (, byte]
[], ;, if, (, s, ., equals, (, POS_INFINITY_STRING, ), ), {, sign, =, (, byte, ), 1, ;, nans]
[*, 2, ], ;, if, (, s, ., equals, (, POS_INFINITY_STRING, ), ), {, sign, =, (, byte, ), 1]
[], ;, if, (, s, ., equals, (, POS_INFINITY_STRING, ), ), {, sign, =, (, byte, ), 1, ;, nans]
[), {, sign, =, (, byte, ), 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (, s, .]
[., equals, (, POS_INFINITY_STRING, ), ), {, sign, =, (, byte, ), 1, ;, nans, =, INFINITE, ;, return, ;]
[), ), {, sign, =, (, byte, ), 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (, s]
[=, (, byte, ), 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NEG_INFINITY_STRING]
[;, nans, =, INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NEG_INFINITY_STRING, ), ), {, sign, =]
[;, nans, =, INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NEG_INFINITY_STRING, ), ), {, sign, =]
[=, INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NEG_INFINITY_STRING, ), ), {, sign, =, (, byte]
[;, return, ;, }, if, (, s, ., equals, (, NEG_INFINITY_STRING, ), ), {, sign, =, (, byte, ), -]
[), {, sign, =, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (, s]
[., equals, (, NEG_INFINITY_STRING, ), ), {, sign, =, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, return]
[), ), {, sign, =, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (]
[=, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (, s, ., equals, (]
[;, nans, =, INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NAN_STRING, ), ), {, sign, =]
[;, nans, =, INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NAN_STRING, ), ), {, sign, =]
[;, nans, =, INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NAN_STRING, ), ), {, sign, =]
[=, INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NAN_STRING, ), ), {, sign, =, (, byte]
[;, return, ;, }, if, (, s, ., equals, (, NAN_STRING, ), ), {, sign, =, (, byte, ), 1]
[), {, sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;, return, ;, }, int, p, =, s]
[., equals, (, NAN_STRING, ), ), {, sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;, return, ;]
[), ), {, sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;, return, ;, }, int, p, =]
[=, (, byte, ), 1, ;, nans, =, QNAN, ;, return, ;, }, int, p, =, s, ., indexOf, (]
[;, nans, =, QNAN, ;, return, ;, }, int, p, =, s, ., indexOf, (, "e", ), ;, if, (]
[;, nans, =, QNAN, ;, return, ;, }, int, p, =, s, ., indexOf, (, "e", ), ;, if, (]
[=, QNAN, ;, return, ;, }, int, p, =, s, ., indexOf, (, "e", ), ;, if, (, p, ==]
[;, return, ;, }, int, p, =, s, ., indexOf, (, "e", ), ;, if, (, p, ==, -, 1]
[;, if, (, p, ==, -, 1, ), {, p, =, s, ., indexOf, (, "E", ), ;, }, final]
[., indexOf, (, "e", ), ;, if, (, p, ==, -, 1, ), {, p, =, s, ., indexOf, (]
[), ;, if, (, p, ==, -, 1, ), {, p, =, s, ., indexOf, (, "E", ), ;, }]
[), {, p, =, s, ., indexOf, (, "E", ), ;, }, final, String, fpdecimal, ;, int, sciexp, =, 0]
[==, -, 1, ), {, p, =, s, ., indexOf, (, "E", ), ;, }, final, String, fpdecimal, ;, int]
[), {, p, =, s, ., indexOf, (, "E", ), ;, }, final, String, fpdecimal, ;, int, sciexp, =, 0]
[), {, p, =, s, ., indexOf, (, "E", ), ;, }, final, String, fpdecimal, ;, int, sciexp, =, 0]
[=, s, ., indexOf, (, "E", ), ;, }, final, String, fpdecimal, ;, int, sciexp, =, 0, ;, if, (]
[;, }, final, String, fpdecimal, ;, int, sciexp, =, 0, ;, if, (, p, !=, -, 1, ), {, fpdecimal]
[., indexOf, (, "E", ), ;, }, final, String, fpdecimal, ;, int, sciexp, =, 0, ;, if, (, p, !=]
[), ;, }, final, String, fpdecimal, ;, int, sciexp, =, 0, ;, if, (, p, !=, -, 1, ), {]
[;, if, (, p, !=, -, 1, ), {, fpdecimal, =, s, ., substring, (, 0, ,, p, ), ;]
[), {, fpdecimal, =, s, ., substring, (, 0, ,, p, ), ;, String, fpexp, =, s, ., substring, (]
[!=, -, 1, ), {, fpdecimal, =, s, ., substring, (, 0, ,, p, ), ;, String, fpexp, =, s]
[), {, fpdecimal, =, s, ., substring, (, 0, ,, p, ), ;, String, fpexp, =, s, ., substring, (]
[), {, fpdecimal, =, s, ., substring, (, 0, ,, p, ), ;, String, fpexp, =, s, ., substring, (]
[=, s, ., substring, (, 0, ,, p, ), ;, String, fpexp, =, s, ., substring, (, p, +, 1]
[;, String, fpexp, =, s, ., substring, (, p, +, 1, ), ;, boolean, negative, =, false, ;, for, (]
[., substring, (, 0, ,, p, ), ;, String, fpexp, =, s, ., substring, (, p, +, 1, ), ;]
[,, p, ), ;, String, fpexp, =, s, ., substring, (, p, +, 1, ), ;, boolean, negative, =, false]
[), ;, String, fpexp, =, s, ., substring, (, p, +, 1, ), ;, boolean, negative, =, false, ;, for]
[;, boolean, negative, =, false, ;, for, (, int, i, =, 0, ;, i, <, fpexp, ., length, (, )]
[., substring, (, p, +, 1, ), ;, boolean, negative, =, false, ;, for, (, int, i, =, 0, ;]
[), ;, boolean, negative, =, false, ;, for, (, int, i, =, 0, ;, i, <, fpexp, ., length, (]
[+, 1, ), ;, boolean, negative, =, false, ;, for, (, int, i, =, 0, ;, i, <, fpexp, .]
[), ;, boolean, negative, =, false, ;, for, (, int, i, =, 0, ;, i, <, fpexp, ., length, (]
[;, for, (, int, i, =, 0, ;, i, <, fpexp, ., length, (, ), ;, i, ++, ), {]
[;, i, <, fpexp, ., length, (, ), ;, i, ++, ), {, if, (, fpexp, ., charAt, (, i]
[;, i, ++, ), {, if, (, fpexp, ., charAt, (, i, ), ==, '-', ), {, negative, =, true]
[<, fpexp, ., length, (, ), ;, i, ++, ), {, if, (, fpexp, ., charAt, (, i, ), ==]
[;, i, ++, ), {, if, (, fpexp, ., charAt, (, i, ), ==, '-', ), {, negative, =, true]
[., length, (, ), ;, i, ++, ), {, if, (, fpexp, ., charAt, (, i, ), ==, '-', )]
[), {, if, (, fpexp, ., charAt, (, i, ), ==, '-', ), {, negative, =, true, ;, continue, ;]
[++, ), {, if, (, fpexp, ., charAt, (, i, ), ==, '-', ), {, negative, =, true, ;, continue]
[), {, negative, =, true, ;, continue, ;, }, if, (, fpexp, ., charAt, (, i, ), >=, '0', &&]
[==, '-', ), {, negative, =, true, ;, continue, ;, }, if, (, fpexp, ., charAt, (, i, ), >=]
[., charAt, (, i, ), ==, '-', ), {, negative, =, true, ;, continue, ;, }, if, (, fpexp, .]
[), ==, '-', ), {, negative, =, true, ;, continue, ;, }, if, (, fpexp, ., charAt, (, i, )]
[), {, negative, =, true, ;, continue, ;, }, if, (, fpexp, ., charAt, (, i, ), >=, '0', &&]
[=, true, ;, continue, ;, }, if, (, fpexp, ., charAt, (, i, ), >=, '0', &&, fpexp, ., charAt]
[;, continue, ;, }, if, (, fpexp, ., charAt, (, i, ), >=, '0', &&, fpexp, ., charAt, (, i]
[), {, sciexp, =, sciexp, *, 10, +, fpexp, ., charAt, (, i, ), -, '0', ;, }, }, if]
[&&, fpexp, ., charAt, (, i, ), <=, '9', ), {, sciexp, =, sciexp, *, 10, +, fpexp, ., charAt]
[>=, '0', &&, fpexp, ., charAt, (, i, ), <=, '9', ), {, sciexp, =, sciexp, *, 10, +, fpexp]
[., charAt, (, i, ), >=, '0', &&, fpexp, ., charAt, (, i, ), <=, '9', ), {, sciexp, =]
[), >=, '0', &&, fpexp, ., charAt, (, i, ), <=, '9', ), {, sciexp, =, sciexp, *, 10, +]
[&&, fpexp, ., charAt, (, i, ), <=, '9', ), {, sciexp, =, sciexp, *, 10, +, fpexp, ., charAt]
[), {, sciexp, =, sciexp, *, 10, +, fpexp, ., charAt, (, i, ), -, '0', ;, }, }, if]
[<=, '9', ), {, sciexp, =, sciexp, *, 10, +, fpexp, ., charAt, (, i, ), -, '0', ;, }]
[., charAt, (, i, ), <=, '9', ), {, sciexp, =, sciexp, *, 10, +, fpexp, ., charAt, (, i]
[), <=, '9', ), {, sciexp, =, sciexp, *, 10, +, fpexp, ., charAt, (, i, ), -, '0', ;]
[), {, sciexp, =, sciexp, *, 10, +, fpexp, ., charAt, (, i, ), -, '0', ;, }, }, if]
[=, sciexp, *, 10, +, fpexp, ., charAt, (, i, ), -, '0', ;, }, }, if, (, negative, )]
[;, }, }, if, (, negative, ), {, sciexp, =, -, sciexp, ;, }, }, else, {, fpdecimal, =, s]
[-, '0', ;, }, }, if, (, negative, ), {, sciexp, =, -, sciexp, ;, }, }, else, {, fpdecimal]
[+, fpexp, ., charAt, (, i, ), -, '0', ;, }, }, if, (, negative, ), {, sciexp, =, -]
[*, 10, +, fpexp, ., charAt, (, i, ), -, '0', ;, }, }, if, (, negative, ), {, sciexp]
[+, fpexp, ., charAt, (, i, ), -, '0', ;, }, }, if, (, negative, ), {, sciexp, =, -]
[-, '0', ;, }, }, if, (, negative, ), {, sciexp, =, -, sciexp, ;, }, }, else, {, fpdecimal]
[., charAt, (, i, ), -, '0', ;, }, }, if, (, negative, ), {, sciexp, =, -, sciexp, ;]
[), -, '0', ;, }, }, if, (, negative, ), {, sciexp, =, -, sciexp, ;, }, }, else, {]
[;, }, }, if, (, negative, ), {, sciexp, =, -, sciexp, ;, }, }, else, {, fpdecimal, =, s]
[), {, sciexp, =, -, sciexp, ;, }, }, else, {, fpdecimal, =, s, ;, }, if, (, fpdecimal, .]
[=, -, sciexp, ;, }, }, else, {, fpdecimal, =, s, ;, }, if, (, fpdecimal, ., indexOf, (, "-"]
[;, }, }, else, {, fpdecimal, =, s, ;, }, if, (, fpdecimal, ., indexOf, (, "-", ), !=, -]
[;, }, }, else, {, fpdecimal, =, s, ;, }, if, (, fpdecimal, ., indexOf, (, "-", ), !=, -]
[=, s, ;, }, if, (, fpdecimal, ., indexOf, (, "-", ), !=, -, 1, ), {, sign, =, -]
[;, }, if, (, fpdecimal, ., indexOf, (, "-", ), !=, -, 1, ), {, sign, =, -, 1, ;]
[), {, sign, =, -, 1, ;, }, p, =, 0, ;, int, decimalPos, =, 0, ;, for, (, ;]
[!=, -, 1, ), {, sign, =, -, 1, ;, }, p, =, 0, ;, int, decimalPos, =, 0, ;]
[., indexOf, (, "-", ), !=, -, 1, ), {, sign, =, -, 1, ;, }, p, =, 0, ;]
[), !=, -, 1, ), {, sign, =, -, 1, ;, }, p, =, 0, ;, int, decimalPos, =, 0]
[), {, sign, =, -, 1, ;, }, p, =, 0, ;, int, decimalPos, =, 0, ;, for, (, ;]
[), {, sign, =, -, 1, ;, }, p, =, 0, ;, int, decimalPos, =, 0, ;, for, (, ;]
[=, -, 1, ;, }, p, =, 0, ;, int, decimalPos, =, 0, ;, for, (, ;, ;, ), {]
[;, }, p, =, 0, ;, int, decimalPos, =, 0, ;, for, (, ;, ;, ), {, if, (, fpdecimal]
[;, }, p, =, 0, ;, int, decimalPos, =, 0, ;, for, (, ;, ;, ), {, if, (, fpdecimal]
[=, 0, ;, int, decimalPos, =, 0, ;, for, (, ;, ;, ), {, if, (, fpdecimal, ., charAt, (]
[;, int, decimalPos, =, 0, ;, for, (, ;, ;, ), {, if, (, fpdecimal, ., charAt, (, p, )]
[;, for, (, ;, ;, ), {, if, (, fpdecimal, ., charAt, (, p, ), >=, '1', &&, fpdecimal, .]
[), {, break, ;, }, if, (, decimalFound, &&, fpdecimal, ., charAt, (, p, ), ==, '0', ), {, decimalPos]
[&&, fpdecimal, ., charAt, (, p, ), <=, '9', ), {, break, ;, }, if, (, decimalFound, &&, fpdecimal, .]
[>=, '1', &&, fpdecimal, ., charAt, (, p, ), <=, '9', ), {, break, ;, }, if, (, decimalFound, &&]
[., charAt, (, p, ), >=, '1', &&, fpdecimal, ., charAt, (, p, ), <=, '9', ), {, break, ;]
[), >=, '1', &&, fpdecimal, ., charAt, (, p, ), <=, '9', ), {, break, ;, }, if, (, decimalFound]
[&&, fpdecimal, ., charAt, (, p, ), <=, '9', ), {, break, ;, }, if, (, decimalFound, &&, fpdecimal, .]
[), {, break, ;, }, if, (, decimalFound, &&, fpdecimal, ., charAt, (, p, ), ==, '0', ), {, decimalPos]
[<=, '9', ), {, break, ;, }, if, (, decimalFound, &&, fpdecimal, ., charAt, (, p, ), ==, '0', )]
[., charAt, (, p, ), <=, '9', ), {, break, ;, }, if, (, decimalFound, &&, fpdecimal, ., charAt, (]
[), <=, '9', ), {, break, ;, }, if, (, decimalFound, &&, fpdecimal, ., charAt, (, p, ), ==, '0']
[), {, break, ;, }, if, (, decimalFound, &&, fpdecimal, ., charAt, (, p, ), ==, '0', ), {, decimalPos]
[), {, decimalPos, --, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =]
[&&, fpdecimal, ., charAt, (, p, ), ==, '0', ), {, decimalPos, --, ;, }, if, (, fpdecimal, ., charAt]
[), {, decimalPos, --, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =]
[==, '0', ), {, decimalPos, --, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {]
[., charAt, (, p, ), ==, '0', ), {, decimalPos, --, ;, }, if, (, fpdecimal, ., charAt, (, p]
[), ==, '0', ), {, decimalPos, --, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', )]
[), {, decimalPos, --, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =]
[;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;, }, p]
[--, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;, }]
[), {, decimalFound, =, true, ;, }, p, ++, ;, if, (, p, ==, fpdecimal, ., length, (, ), )]
[==, '.', ), {, decimalFound, =, true, ;, }, p, ++, ;, if, (, p, ==, fpdecimal, ., length, (]
[., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;, }, p, ++, ;, if, (, p]
[), ==, '.', ), {, decimalFound, =, true, ;, }, p, ++, ;, if, (, p, ==, fpdecimal, ., length]
[), {, decimalFound, =, true, ;, }, p, ++, ;, if, (, p, ==, fpdecimal, ., length, (, ), )]
[=, true, ;, }, p, ++, ;, if, (, p, ==, fpdecimal, ., length, (, ), ), {, break, ;]
[;, }, p, ++, ;, if, (, p, ==, fpdecimal, ., length, (, ), ), {, break, ;, }, }]
[;, if, (, p, ==, fpdecimal, ., length, (, ), ), {, break, ;, }, }, int, q, =, offset]
[++, ;, if, (, p, ==, fpdecimal, ., length, (, ), ), {, break, ;, }, }, int, q, =]
[), {, break, ;, }, }, int, q, =, offset, ;, striped, [, 0, ], =, '0', ;, striped, []
[==, fpdecimal, ., length, (, ), ), {, break, ;, }, }, int, q, =, offset, ;, striped, [, 0]
[), {, break, ;, }, }, int, q, =, offset, ;, striped, [, 0, ], =, '0', ;, striped, []
[., length, (, ), ), {, break, ;, }, }, int, q, =, offset, ;, striped, [, 0, ], =]
[;, striped, [, 0, ], =, '0', ;, striped, [, 1, ], =, '0', ;, striped, [, 2, ], =]
[=, '0', ;, striped, [, 1, ], =, '0', ;, striped, [, 2, ], =, '0', ;, striped, [, 3]
[[, 0, ], =, '0', ;, striped, [, 1, ], =, '0', ;, striped, [, 2, ], =, '0', ;]
[], =, '0', ;, striped, [, 1, ], =, '0', ;, striped, [, 2, ], =, '0', ;, striped, []
[;, striped, [, 1, ], =, '0', ;, striped, [, 2, ], =, '0', ;, striped, [, 3, ], =]
[=, '0', ;, striped, [, 2, ], =, '0', ;, striped, [, 3, ], =, '0', ;, int, significantDigits, =]
[[, 1, ], =, '0', ;, striped, [, 2, ], =, '0', ;, striped, [, 3, ], =, '0', ;]
[], =, '0', ;, striped, [, 2, ], =, '0', ;, striped, [, 3, ], =, '0', ;, int, significantDigits]
[;, striped, [, 2, ], =, '0', ;, striped, [, 3, ], =, '0', ;, int, significantDigits, =, 0, ;]
[=, '0', ;, striped, [, 3, ], =, '0', ;, int, significantDigits, =, 0, ;, for, (, ;, ;, )]
[[, 2, ], =, '0', ;, striped, [, 3, ], =, '0', ;, int, significantDigits, =, 0, ;, for, (]
[], =, '0', ;, striped, [, 3, ], =, '0', ;, int, significantDigits, =, 0, ;, for, (, ;, ;]
[;, striped, [, 3, ], =, '0', ;, int, significantDigits, =, 0, ;, for, (, ;, ;, ), {, if]
[=, '0', ;, int, significantDigits, =, 0, ;, for, (, ;, ;, ), {, if, (, p, ==, (, fpdecimal]
[[, 3, ], =, '0', ;, int, significantDigits, =, 0, ;, for, (, ;, ;, ), {, if, (, p]
[], =, '0', ;, int, significantDigits, =, 0, ;, for, (, ;, ;, ), {, if, (, p, ==, (]
[;, int, significantDigits, =, 0, ;, for, (, ;, ;, ), {, if, (, p, ==, (, fpdecimal, ., length]
[;, for, (, ;, ;, ), {, if, (, p, ==, (, fpdecimal, ., length, (, ), ), ), {]
[), {, break, ;, }, if, (, q, ==, mant, ., length, *, rsize, +, offset, +, 1, ), {]
[==, (, fpdecimal, ., length, (, ), ), ), {, break, ;, }, if, (, q, ==, mant, ., length]
[), {, break, ;, }, if, (, q, ==, mant, ., length, *, rsize, +, offset, +, 1, ), {]
[), ), {, break, ;, }, if, (, q, ==, mant, ., length, *, rsize, +, offset, +, 1, )]
[., length, (, ), ), ), {, break, ;, }, if, (, q, ==, mant, ., length, *, rsize, +]
[), {, break, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true]
[==, mant, ., length, *, rsize, +, offset, +, 1, ), {, break, ;, }, if, (, fpdecimal, ., charAt]
[), {, break, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true]
[+, 1, ), {, break, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound]
[+, offset, +, 1, ), {, break, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', )]
[*, rsize, +, offset, +, 1, ), {, break, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==]
[., length, *, rsize, +, offset, +, 1, ), {, break, ;, }, if, (, fpdecimal, ., charAt, (, p]
[+, offset, +, 1, ), {, break, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', )]
[+, 1, ), {, break, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound]
[), {, break, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true]
[), {, decimalFound, =, true, ;, decimalPos, =, significantDigits, ;, p, ++, ;, continue, ;, }, if, (, fpdecimal, .]
[==, '.', ), {, decimalFound, =, true, ;, decimalPos, =, significantDigits, ;, p, ++, ;, continue, ;, }, if, (]
[., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;, decimalPos, =, significantDigits, ;, p, ++, ;]
[), ==, '.', ), {, decimalFound, =, true, ;, decimalPos, =, significantDigits, ;, p, ++, ;, continue, ;, }, if]
[), {, decimalFound, =, true, ;, decimalPos, =, significantDigits, ;, p, ++, ;, continue, ;, }, if, (, fpdecimal, .]
[=, true, ;, decimalPos, =, significantDigits, ;, p, ++, ;, continue, ;, }, if, (, fpdecimal, ., charAt, (, p]
[;, decimalPos, =, significantDigits, ;, p, ++, ;, continue, ;, }, if, (, fpdecimal, ., charAt, (, p, ), <]
[=, significantDigits, ;, p, ++, ;, continue, ;, }, if, (, fpdecimal, ., charAt, (, p, ), <, '0', ||]
[;, p, ++, ;, continue, ;, }, if, (, fpdecimal, ., charAt, (, p, ), <, '0', ||, fpdecimal, .]
[;, continue, ;, }, if, (, fpdecimal, ., charAt, (, p, ), <, '0', ||, fpdecimal, ., charAt, (, p]
[++, ;, continue, ;, }, if, (, fpdecimal, ., charAt, (, p, ), <, '0', ||, fpdecimal, ., charAt, (]
[), {, p, ++, ;, continue, ;, }, striped, [, q, ], =, fpdecimal, ., charAt, (, p, ), ;]
[||, fpdecimal, ., charAt, (, p, ), >, '9', ), {, p, ++, ;, continue, ;, }, striped, [, q]
[<, '0', ||, fpdecimal, ., charAt, (, p, ), >, '9', ), {, p, ++, ;, continue, ;, }, striped]
[., charAt, (, p, ), <, '0', ||, fpdecimal, ., charAt, (, p, ), >, '9', ), {, p, ++]
[), <, '0', ||, fpdecimal, ., charAt, (, p, ), >, '9', ), {, p, ++, ;, continue, ;, }]
[||, fpdecimal, ., charAt, (, p, ), >, '9', ), {, p, ++, ;, continue, ;, }, striped, [, q]
[), {, p, ++, ;, continue, ;, }, striped, [, q, ], =, fpdecimal, ., charAt, (, p, ), ;]
[>, '9', ), {, p, ++, ;, continue, ;, }, striped, [, q, ], =, fpdecimal, ., charAt, (, p]
[., charAt, (, p, ), >, '9', ), {, p, ++, ;, continue, ;, }, striped, [, q, ], =]
[), >, '9', ), {, p, ++, ;, continue, ;, }, striped, [, q, ], =, fpdecimal, ., charAt, (]
[), {, p, ++, ;, continue, ;, }, striped, [, q, ], =, fpdecimal, ., charAt, (, p, ), ;]
[;, continue, ;, }, striped, [, q, ], =, fpdecimal, ., charAt, (, p, ), ;, q, ++, ;, p]
[++, ;, continue, ;, }, striped, [, q, ], =, fpdecimal, ., charAt, (, p, ), ;, q, ++, ;]
[=, fpdecimal, ., charAt, (, p, ), ;, q, ++, ;, p, ++, ;, significantDigits, ++, ;, }, if, (]
[[, q, ], =, fpdecimal, ., charAt, (, p, ), ;, q, ++, ;, p, ++, ;, significantDigits, ++, ;]
[], =, fpdecimal, ., charAt, (, p, ), ;, q, ++, ;, p, ++, ;, significantDigits, ++, ;, }, if]
[;, q, ++, ;, p, ++, ;, significantDigits, ++, ;, }, if, (, decimalFound, &&, q, !=, offset, ), {]
[., charAt, (, p, ), ;, q, ++, ;, p, ++, ;, significantDigits, ++, ;, }, if, (, decimalFound, &&]
[), ;, q, ++, ;, p, ++, ;, significantDigits, ++, ;, }, if, (, decimalFound, &&, q, !=, offset, )]
[;, p, ++, ;, significantDigits, ++, ;, }, if, (, decimalFound, &&, q, !=, offset, ), {, for, (, ;]
[++, ;, p, ++, ;, significantDigits, ++, ;, }, if, (, decimalFound, &&, q, !=, offset, ), {, for, (]
[;, significantDigits, ++, ;, }, if, (, decimalFound, &&, q, !=, offset, ), {, for, (, ;, ;, ), {]
[++, ;, significantDigits, ++, ;, }, if, (, decimalFound, &&, q, !=, offset, ), {, for, (, ;, ;, )]
[;, }, if, (, decimalFound, &&, q, !=, offset, ), {, for, (, ;, ;, ), {, q, --, ;]
[++, ;, }, if, (, decimalFound, &&, q, !=, offset, ), {, for, (, ;, ;, ), {, q, --]
[), {, for, (, ;, ;, ), {, q, --, ;, if, (, q, ==, offset, ), {, break, ;]
[&&, q, !=, offset, ), {, for, (, ;, ;, ), {, q, --, ;, if, (, q, ==, offset]
[), {, for, (, ;, ;, ), {, q, --, ;, if, (, q, ==, offset, ), {, break, ;]
[!=, offset, ), {, for, (, ;, ;, ), {, q, --, ;, if, (, q, ==, offset, ), {]
[), {, for, (, ;, ;, ), {, q, --, ;, if, (, q, ==, offset, ), {, break, ;]
[;, if, (, q, ==, offset, ), {, break, ;, }, if, (, striped, [, q, ], ==, '0', )]
[--, ;, if, (, q, ==, offset, ), {, break, ;, }, if, (, striped, [, q, ], ==, '0']
[), {, break, ;, }, if, (, striped, [, q, ], ==, '0', ), {, significantDigits, --, ;, }, else]
[==, offset, ), {, break, ;, }, if, (, striped, [, q, ], ==, '0', ), {, significantDigits, --, ;]
[), {, break, ;, }, if, (, striped, [, q, ], ==, '0', ), {, significantDigits, --, ;, }, else]
[), {, significantDigits, --, ;, }, else, {, break, ;, }, }, }, if, (, decimalFound, &&, significantDigits, ==, 0]
[==, '0', ), {, significantDigits, --, ;, }, else, {, break, ;, }, }, }, if, (, decimalFound, &&, significantDigits]
[[, q, ], ==, '0', ), {, significantDigits, --, ;, }, else, {, break, ;, }, }, }, if, (]
[], ==, '0', ), {, significantDigits, --, ;, }, else, {, break, ;, }, }, }, if, (, decimalFound, &&]
[), {, significantDigits, --, ;, }, else, {, break, ;, }, }, }, if, (, decimalFound, &&, significantDigits, ==, 0]
[;, }, else, {, break, ;, }, }, }, if, (, decimalFound, &&, significantDigits, ==, 0, ), {, decimalPos, =]
[--, ;, }, else, {, break, ;, }, }, }, if, (, decimalFound, &&, significantDigits, ==, 0, ), {, decimalPos]
[), {, decimalPos, =, 0, ;, }, if, (, !, decimalFound, ), {, decimalPos, =, q, -, offset, ;, }]
[&&, significantDigits, ==, 0, ), {, decimalPos, =, 0, ;, }, if, (, !, decimalFound, ), {, decimalPos, =, q]
[), {, decimalPos, =, 0, ;, }, if, (, !, decimalFound, ), {, decimalPos, =, q, -, offset, ;, }]
[==, 0, ), {, decimalPos, =, 0, ;, }, if, (, !, decimalFound, ), {, decimalPos, =, q, -, offset]
[), {, decimalPos, =, 0, ;, }, if, (, !, decimalFound, ), {, decimalPos, =, q, -, offset, ;, }]
[=, 0, ;, }, if, (, !, decimalFound, ), {, decimalPos, =, q, -, offset, ;, }, q, =, offset]
[;, }, if, (, !, decimalFound, ), {, decimalPos, =, q, -, offset, ;, }, q, =, offset, ;, p]
[), {, decimalPos, =, q, -, offset, ;, }, q, =, offset, ;, p, =, significantDigits, -, 1, +, offset]
[), {, decimalPos, =, q, -, offset, ;, }, q, =, offset, ;, p, =, significantDigits, -, 1, +, offset]
[=, q, -, offset, ;, }, q, =, offset, ;, p, =, significantDigits, -, 1, +, offset, ;, while, (]
[;, }, q, =, offset, ;, p, =, significantDigits, -, 1, +, offset, ;, while, (, p, >, q, )]
[-, offset, ;, }, q, =, offset, ;, p, =, significantDigits, -, 1, +, offset, ;, while, (, p, >]
[;, }, q, =, offset, ;, p, =, significantDigits, -, 1, +, offset, ;, while, (, p, >, q, )]
[=, offset, ;, p, =, significantDigits, -, 1, +, offset, ;, while, (, p, >, q, ), {, if, (]
[;, p, =, significantDigits, -, 1, +, offset, ;, while, (, p, >, q, ), {, if, (, striped, []
[=, significantDigits, -, 1, +, offset, ;, while, (, p, >, q, ), {, if, (, striped, [, p, ]]
[;, while, (, p, >, q, ), {, if, (, striped, [, p, ], !=, '0', ), {, break, ;]
[+, offset, ;, while, (, p, >, q, ), {, if, (, striped, [, p, ], !=, '0', ), {]
[-, 1, +, offset, ;, while, (, p, >, q, ), {, if, (, striped, [, p, ], !=, '0']
[+, offset, ;, while, (, p, >, q, ), {, if, (, striped, [, p, ], !=, '0', ), {]
[;, while, (, p, >, q, ), {, if, (, striped, [, p, ], !=, '0', ), {, break, ;]
[), {, if, (, striped, [, p, ], !=, '0', ), {, break, ;, }, p, --, ;, }, int]
[>, q, ), {, if, (, striped, [, p, ], !=, '0', ), {, break, ;, }, p, --, ;]
[), {, if, (, striped, [, p, ], !=, '0', ), {, break, ;, }, p, --, ;, }, int]
[), {, break, ;, }, p, --, ;, }, int, i, =, (, (, rsize, *, 100, ), -, decimalPos]
[!=, '0', ), {, break, ;, }, p, --, ;, }, int, i, =, (, (, rsize, *, 100, )]
[[, p, ], !=, '0', ), {, break, ;, }, p, --, ;, }, int, i, =, (, (, rsize]
[], !=, '0', ), {, break, ;, }, p, --, ;, }, int, i, =, (, (, rsize, *, 100]
[), {, break, ;, }, p, --, ;, }, int, i, =, (, (, rsize, *, 100, ), -, decimalPos]
[;, }, int, i, =, (, (, rsize, *, 100, ), -, decimalPos, -, sciexp, %, rsize, ), %, rsize]
[--, ;, }, int, i, =, (, (, rsize, *, 100, ), -, decimalPos, -, sciexp, %, rsize, ), %]
[;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -, q, ), <, (, mant, .]
[%, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -, q, ), <, (]
[), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -, q, ), <]
[-, sciexp, %, rsize, ), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p]
[-, decimalPos, -, sciexp, %, rsize, ), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (]
[), -, decimalPos, -, sciexp, %, rsize, ), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while]
[*, 100, ), -, decimalPos, -, sciexp, %, rsize, ), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i]
[), -, decimalPos, -, sciexp, %, rsize, ), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while]
[-, sciexp, %, rsize, ), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p]
[), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -, q, ), <]
[%, rsize, ), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -, q]
[), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -, q, ), <]
[;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -, q, ), <, (, mant, .]
[-=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -, q, ), <, (, mant, ., length, *]
[;, decimalPos, +=, i, ;, while, (, (, p, -, q, ), <, (, mant, ., length, *, rsize, )]
[+=, i, ;, while, (, (, p, -, q, ), <, (, mant, ., length, *, rsize, ), ), {]
[;, while, (, (, p, -, q, ), <, (, mant, ., length, *, rsize, ), ), {, for, (]
[), {, for, (, i, =, 0, ;, i, <, rsize, ;, i, ++, ), {, striped, [, ++, p]
[<, (, mant, ., length, *, rsize, ), ), {, for, (, i, =, 0, ;, i, <, rsize, ;]
[), <, (, mant, ., length, *, rsize, ), ), {, for, (, i, =, 0, ;, i, <, rsize]
[-, q, ), <, (, mant, ., length, *, rsize, ), ), {, for, (, i, =, 0, ;, i]
[), <, (, mant, ., length, *, rsize, ), ), {, for, (, i, =, 0, ;, i, <, rsize]
[), {, for, (, i, =, 0, ;, i, <, rsize, ;, i, ++, ), {, striped, [, ++, p]
[), ), {, for, (, i, =, 0, ;, i, <, rsize, ;, i, ++, ), {, striped, [, ++]
[*, rsize, ), ), {, for, (, i, =, 0, ;, i, <, rsize, ;, i, ++, ), {, striped]
[., length, *, rsize, ), ), {, for, (, i, =, 0, ;, i, <, rsize, ;, i, ++, )]
[), ), {, for, (, i, =, 0, ;, i, <, rsize, ;, i, ++, ), {, striped, [, ++]
[=, 0, ;, i, <, rsize, ;, i, ++, ), {, striped, [, ++, p, ], =, '0', ;, }]
[;, i, <, rsize, ;, i, ++, ), {, striped, [, ++, p, ], =, '0', ;, }, }, for]
[;, i, ++, ), {, striped, [, ++, p, ], =, '0', ;, }, }, for, (, i, =, mant]
[<, rsize, ;, i, ++, ), {, striped, [, ++, p, ], =, '0', ;, }, }, for, (, i]
[;, i, ++, ), {, striped, [, ++, p, ], =, '0', ;, }, }, for, (, i, =, mant]
[), {, striped, [, ++, p, ], =, '0', ;, }, }, for, (, i, =, mant, ., length, -]
[++, ), {, striped, [, ++, p, ], =, '0', ;, }, }, for, (, i, =, mant, ., length]
[=, '0', ;, }, }, for, (, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i]
[[, ++, p, ], =, '0', ;, }, }, for, (, i, =, mant, ., length, -, 1, ;, i]
[], =, '0', ;, }, }, for, (, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;]
[], =, '0', ;, }, }, for, (, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;]
[;, }, }, for, (, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, )]
[=, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =]
[;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =, (, striped, [, q, ], -]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =, (, striped, [, q]
[., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =, (, striped]
[;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =, (, striped, [, q, ], -]
[;, i, --, ), {, mant, [, i, ], =, (, striped, [, q, ], -, '0', ), *, 1000]
[>=, 0, ;, i, --, ), {, mant, [, i, ], =, (, striped, [, q, ], -, '0', )]
[;, i, --, ), {, mant, [, i, ], =, (, striped, [, q, ], -, '0', ), *, 1000]
[), {, mant, [, i, ], =, (, striped, [, q, ], -, '0', ), *, 1000, +, (, striped]
[--, ), {, mant, [, i, ], =, (, striped, [, q, ], -, '0', ), *, 1000, +, (]
[=, (, striped, [, q, ], -, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -]
[[, i, ], =, (, striped, [, q, ], -, '0', ), *, 1000, +, (, striped, [, q, +]
[], =, (, striped, [, q, ], -, '0', ), *, 1000, +, (, striped, [, q, +, 1, ]]
[;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q, <]
[+, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=, 4, ;, }, exp, =, (]
[+, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (, striped, [, q, +, 3]
[+, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (, striped, [, q, +, 2]
[*, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (, striped, [, q]
[), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (, striped, []
[-, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (]
[[, q, ], -, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *]
[], -, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +]
[), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (, striped, []
[+, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (, striped, [, q, +, 2]
[+, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (, striped, [, q, +, 3]
[*, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (, striped, [, q]
[), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (, striped, []
[-, '0', ), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (]
[[, q, +, 1, ], -, '0', ), *, 100, +, (, striped, [, q, +, 2, ], -, '0']
[], -, '0', ), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +]
[+, 1, ], -, '0', ), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *]
[], -, '0', ), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +]
[), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (, striped, []
[+, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (, striped, [, q, +, 3]
[+, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=, 4, ;, }, exp, =, (]
[*, 10, +, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=, 4, ;, }, exp]
[), *, 10, +, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=, 4, ;, }]
[-, '0', ), *, 10, +, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=, 4]
[[, q, +, 2, ], -, '0', ), *, 10, +, (, striped, [, q, +, 3, ], -, '0']
[], -, '0', ), *, 10, +, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=]
[+, 2, ], -, '0', ), *, 10, +, (, striped, [, q, +, 3, ], -, '0', ), ;]
[], -, '0', ), *, 10, +, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=]
[), *, 10, +, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=, 4, ;, }]
[+, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=, 4, ;, }, exp, =, (]
[;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q, <]
[), ;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q]
[-, '0', ), ;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;, if]
[[, q, +, 3, ], -, '0', ), ;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp]
[], -, '0', ), ;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;]
[+, 3, ], -, '0', ), ;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /]
[], -, '0', ), ;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;]
[), ;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q]
[+=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q, <, striped, .]
[;, }, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q, <, striped, ., length, )]
[=, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q, <, striped, ., length, ), {, round, (]
[;, if, (, q, <, striped, ., length, ), {, round, (, (, striped, [, q, ], -, '0', )]
[/, rsize, ;, if, (, q, <, striped, ., length, ), {, round, (, (, striped, [, q, ], -]
[), /, rsize, ;, if, (, q, <, striped, ., length, ), {, round, (, (, striped, [, q, ]]
[+, sciexp, ), /, rsize, ;, if, (, q, <, striped, ., length, ), {, round, (, (, striped, []
[), /, rsize, ;, if, (, q, <, striped, ., length, ), {, round, (, (, striped, [, q, ]]
[;, if, (, q, <, striped, ., length, ), {, round, (, (, striped, [, q, ], -, '0', )]
[), {, round, (, (, striped, [, q, ], -, '0', ), *, 1000, ), ;, }, }, protected, Dfp]
[<, striped, ., length, ), {, round, (, (, striped, [, q, ], -, '0', ), *, 1000, ), ;]
[), {, round, (, (, striped, [, q, ], -, '0', ), *, 1000, ), ;, }, }, protected, Dfp]
[., length, ), {, round, (, (, striped, [, q, ], -, '0', ), *, 1000, ), ;, }, }]
[;, }, }, protected, Dfp, (, final, DfpField, field, ,, final, byte, sign, ,, final, byte, nans, ), {, this]
[), ;, }, }, protected, Dfp, (, final, DfpField, field, ,, final, byte, sign, ,, final, byte, nans, ), {]
[*, 1000, ), ;, }, }, protected, Dfp, (, final, DfpField, field, ,, final, byte, sign, ,, final, byte, nans]
[), *, 1000, ), ;, }, }, protected, Dfp, (, final, DfpField, field, ,, final, byte, sign, ,, final, byte]
[-, '0', ), *, 1000, ), ;, }, }, protected, Dfp, (, final, DfpField, field, ,, final, byte, sign, ,]
[[, q, ], -, '0', ), *, 1000, ), ;, }, }, protected, Dfp, (, final, DfpField, field, ,, final]
[], -, '0', ), *, 1000, ), ;, }, }, protected, Dfp, (, final, DfpField, field, ,, final, byte, sign]
[), *, 1000, ), ;, }, }, protected, Dfp, (, final, DfpField, field, ,, final, byte, sign, ,, final, byte]
[), ;, }, }, protected, Dfp, (, final, DfpField, field, ,, final, byte, sign, ,, final, byte, nans, ), {]
[=, field, ;, this, ., mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, this, ., sign]
[., field, =, field, ;, this, ., mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, this]
[;, this, ., mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, this, ., sign, =, sign]
[=, new, int, [, field, ., getRadixDigits, (, ), ], ;, this, ., sign, =, sign, ;, this, ., exp]
[., mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, this, ., sign, =, sign, ;, this]
[;, this, ., sign, =, sign, ;, this, ., exp, =, 0, ;, this, ., nans, =, nans, ;, }]
[], ;, this, ., sign, =, sign, ;, this, ., exp, =, 0, ;, this, ., nans, =, nans, ;]
[., getRadixDigits, (, ), ], ;, this, ., sign, =, sign, ;, this, ., exp, =, 0, ;, this, .]
[=, sign, ;, this, ., exp, =, 0, ;, this, ., nans, =, nans, ;, }, public, Dfp, newInstance, (]
[., sign, =, sign, ;, this, ., exp, =, 0, ;, this, ., nans, =, nans, ;, }, public, Dfp]
[;, this, ., exp, =, 0, ;, this, ., nans, =, nans, ;, }, public, Dfp, newInstance, (, ), {]
[=, 0, ;, this, ., nans, =, nans, ;, }, public, Dfp, newInstance, (, ), {, return, new, Dfp, (]
[., exp, =, 0, ;, this, ., nans, =, nans, ;, }, public, Dfp, newInstance, (, ), {, return, new]
[;, this, ., nans, =, nans, ;, }, public, Dfp, newInstance, (, ), {, return, new, Dfp, (, getField, (]
[=, nans, ;, }, public, Dfp, newInstance, (, ), {, return, new, Dfp, (, getField, (, ), ), ;, }]
[., nans, =, nans, ;, }, public, Dfp, newInstance, (, ), {, return, new, Dfp, (, getField, (, ), )]
[;, }, public, Dfp, newInstance, (, ), {, return, new, Dfp, (, getField, (, ), ), ;, }, public, Dfp]
[;, }, public, Dfp, newInstance, (, final, byte, x, ), {, return, new, Dfp, (, getField, (, ), ,, x]
[), ;, }, public, Dfp, newInstance, (, final, byte, x, ), {, return, new, Dfp, (, getField, (, ), ,]
[;, }, public, Dfp, newInstance, (, final, int, x, ), {, return, new, Dfp, (, getField, (, ), ,, x]
[,, x, ), ;, }, public, Dfp, newInstance, (, final, int, x, ), {, return, new, Dfp, (, getField, (]
[), ;, }, public, Dfp, newInstance, (, final, int, x, ), {, return, new, Dfp, (, getField, (, ), ,]
[;, }, public, Dfp, newInstance, (, final, long, x, ), {, return, new, Dfp, (, getField, (, ), ,, x]
[,, x, ), ;, }, public, Dfp, newInstance, (, final, long, x, ), {, return, new, Dfp, (, getField, (]
[), ;, }, public, Dfp, newInstance, (, final, long, x, ), {, return, new, Dfp, (, getField, (, ), ,]
[;, }, public, Dfp, newInstance, (, final, double, x, ), {, return, new, Dfp, (, getField, (, ), ,, x]
[,, x, ), ;, }, public, Dfp, newInstance, (, final, double, x, ), {, return, new, Dfp, (, getField, (]
[), ;, }, public, Dfp, newInstance, (, final, double, x, ), {, return, new, Dfp, (, getField, (, ), ,]
[;, }, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (, field, ., getRadixDigits, (, ), !=, d]
[,, x, ), ;, }, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (, field, ., getRadixDigits, (]
[), ;, }, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[!=, d, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final]
[., getRadixDigits, (, ), !=, d, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, .]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance]
[., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result]
[;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN]
[;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEW_INSTANCE_TRAP, ,, d, ,, result, )]
[), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEW_INSTANCE_TRAP, ,, d, ,, result]
[=, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEW_INSTANCE_TRAP, ,, d, ,, result, ), ;, }, return, new]
[., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEW_INSTANCE_TRAP, ,, d, ,, result, ), ;, }]
[;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEW_INSTANCE_TRAP, ,, d, ,, result, ), ;, }, return, new, Dfp, (]
[;, }, return, new, Dfp, (, d, ), ;, }, public, Dfp, newInstance, (, final, String, s, ), {, return]
[,, NEW_INSTANCE_TRAP, ,, d, ,, result, ), ;, }, return, new, Dfp, (, d, ), ;, }, public, Dfp, newInstance]
[., FLAG_INVALID, ,, NEW_INSTANCE_TRAP, ,, d, ,, result, ), ;, }, return, new, Dfp, (, d, ), ;, }, public]
[,, d, ,, result, ), ;, }, return, new, Dfp, (, d, ), ;, }, public, Dfp, newInstance, (, final]
[,, result, ), ;, }, return, new, Dfp, (, d, ), ;, }, public, Dfp, newInstance, (, final, String, s]
[), ;, }, return, new, Dfp, (, d, ), ;, }, public, Dfp, newInstance, (, final, String, s, ), {]
[;, }, public, Dfp, newInstance, (, final, String, s, ), {, return, new, Dfp, (, field, ,, s, ), ;]
[), ;, }, public, Dfp, newInstance, (, final, String, s, ), {, return, new, Dfp, (, field, ,, s, )]
[;, }, public, Dfp, newInstance, (, final, byte, sig, ,, final, byte, code, ), {, return, field, ., newDfp, (]
[,, s, ), ;, }, public, Dfp, newInstance, (, final, byte, sig, ,, final, byte, code, ), {, return, field]
[), ;, }, public, Dfp, newInstance, (, final, byte, sig, ,, final, byte, code, ), {, return, field, ., newDfp]
[;, }, public, DfpField, getField, (, ), {, return, field, ;, }, public, int, getRadixDigits, (, ), {, return, field]
[., newDfp, (, sig, ,, code, ), ;, }, public, DfpField, getField, (, ), {, return, field, ;, }, public]
[,, code, ), ;, }, public, DfpField, getField, (, ), {, return, field, ;, }, public, int, getRadixDigits, (, )]
[), ;, }, public, DfpField, getField, (, ), {, return, field, ;, }, public, int, getRadixDigits, (, ), {, return]
[;, }, public, int, getRadixDigits, (, ), {, return, field, ., getRadixDigits, (, ), ;, }, public, Dfp, getZero, (]
[;, }, public, Dfp, getZero, (, ), {, return, field, ., getZero, (, ), ;, }, public, Dfp, getOne, (]
[., getRadixDigits, (, ), ;, }, public, Dfp, getZero, (, ), {, return, field, ., getZero, (, ), ;, }]
[;, }, public, Dfp, getOne, (, ), {, return, field, ., getOne, (, ), ;, }, public, Dfp, getTwo, (]
[., getZero, (, ), ;, }, public, Dfp, getOne, (, ), {, return, field, ., getOne, (, ), ;, }]
[;, }, public, Dfp, getTwo, (, ), {, return, field, ., getTwo, (, ), ;, }, protected, void, shiftLeft, (]
[., getOne, (, ), ;, }, public, Dfp, getTwo, (, ), {, return, field, ., getTwo, (, ), ;, }]
[;, }, protected, void, shiftLeft, (, ), {, for, (, int, i, =, mant, ., length, -, 1, ;, i]
[., getTwo, (, ), ;, }, protected, void, shiftLeft, (, ), {, for, (, int, i, =, mant, ., length]
[;, i, >, 0, ;, i, --, ), {, mant, [, i, ], =, mant, [, i, -, 1, ]]
[-, 1, ;, i, >, 0, ;, i, --, ), {, mant, [, i, ], =, mant, [, i, -]
[., length, -, 1, ;, i, >, 0, ;, i, --, ), {, mant, [, i, ], =, mant, []
[;, i, >, 0, ;, i, --, ), {, mant, [, i, ], =, mant, [, i, -, 1, ]]
[;, i, --, ), {, mant, [, i, ], =, mant, [, i, -, 1, ], ;, }, mant, []
[>, 0, ;, i, --, ), {, mant, [, i, ], =, mant, [, i, -, 1, ], ;, }]
[;, i, --, ), {, mant, [, i, ], =, mant, [, i, -, 1, ], ;, }, mant, []
[), {, mant, [, i, ], =, mant, [, i, -, 1, ], ;, }, mant, [, 0, ], =]
[--, ), {, mant, [, i, ], =, mant, [, i, -, 1, ], ;, }, mant, [, 0, ]]
[=, mant, [, i, -, 1, ], ;, }, mant, [, 0, ], =, 0, ;, exp, --, ;, }]
[[, i, ], =, mant, [, i, -, 1, ], ;, }, mant, [, 0, ], =, 0, ;, exp]
[], =, mant, [, i, -, 1, ], ;, }, mant, [, 0, ], =, 0, ;, exp, --, ;]
[;, }, mant, [, 0, ], =, 0, ;, exp, --, ;, }, protected, void, shiftRight, (, ), {, for]
[[, i, -, 1, ], ;, }, mant, [, 0, ], =, 0, ;, exp, --, ;, }, protected, void]
[], ;, }, mant, [, 0, ], =, 0, ;, exp, --, ;, }, protected, void, shiftRight, (, ), {]
[-, 1, ], ;, }, mant, [, 0, ], =, 0, ;, exp, --, ;, }, protected, void, shiftRight, (]
[], ;, }, mant, [, 0, ], =, 0, ;, exp, --, ;, }, protected, void, shiftRight, (, ), {]
[=, 0, ;, exp, --, ;, }, protected, void, shiftRight, (, ), {, for, (, int, i, =, 0, ;]
[[, 0, ], =, 0, ;, exp, --, ;, }, protected, void, shiftRight, (, ), {, for, (, int, i]
[], =, 0, ;, exp, --, ;, }, protected, void, shiftRight, (, ), {, for, (, int, i, =, 0]
[;, exp, --, ;, }, protected, void, shiftRight, (, ), {, for, (, int, i, =, 0, ;, i, <]
[;, }, protected, void, shiftRight, (, ), {, for, (, int, i, =, 0, ;, i, <, mant, ., length]
[--, ;, }, protected, void, shiftRight, (, ), {, for, (, int, i, =, 0, ;, i, <, mant, .]
[;, i, <, mant, ., length, -, 1, ;, i, ++, ), {, mant, [, i, ], =, mant, []
[;, i, ++, ), {, mant, [, i, ], =, mant, [, i, +, 1, ], ;, }, mant, []
[<, mant, ., length, -, 1, ;, i, ++, ), {, mant, [, i, ], =, mant, [, i, +]
[;, i, ++, ), {, mant, [, i, ], =, mant, [, i, +, 1, ], ;, }, mant, []
[-, 1, ;, i, ++, ), {, mant, [, i, ], =, mant, [, i, +, 1, ], ;, }]
[., length, -, 1, ;, i, ++, ), {, mant, [, i, ], =, mant, [, i, +, 1, ]]
[;, i, ++, ), {, mant, [, i, ], =, mant, [, i, +, 1, ], ;, }, mant, []
[), {, mant, [, i, ], =, mant, [, i, +, 1, ], ;, }, mant, [, mant, ., length]
[++, ), {, mant, [, i, ], =, mant, [, i, +, 1, ], ;, }, mant, [, mant, .]
[=, mant, [, i, +, 1, ], ;, }, mant, [, mant, ., length, -, 1, ], =, 0, ;]
[[, i, ], =, mant, [, i, +, 1, ], ;, }, mant, [, mant, ., length, -, 1, ]]
[], =, mant, [, i, +, 1, ], ;, }, mant, [, mant, ., length, -, 1, ], =, 0]
[;, }, mant, [, mant, ., length, -, 1, ], =, 0, ;, exp, ++, ;, }, protected, int, align]
[[, i, +, 1, ], ;, }, mant, [, mant, ., length, -, 1, ], =, 0, ;, exp, ++]
[], ;, }, mant, [, mant, ., length, -, 1, ], =, 0, ;, exp, ++, ;, }, protected, int]
[+, 1, ], ;, }, mant, [, mant, ., length, -, 1, ], =, 0, ;, exp, ++, ;, }]
[], ;, }, mant, [, mant, ., length, -, 1, ], =, 0, ;, exp, ++, ;, }, protected, int]
[=, 0, ;, exp, ++, ;, }, protected, int, align, (, int, e, ), {, int, lostdigit, =, 0, ;]
[[, mant, ., length, -, 1, ], =, 0, ;, exp, ++, ;, }, protected, int, align, (, int, e]
[], =, 0, ;, exp, ++, ;, }, protected, int, align, (, int, e, ), {, int, lostdigit, =, 0]
[-, 1, ], =, 0, ;, exp, ++, ;, }, protected, int, align, (, int, e, ), {, int, lostdigit]
[., length, -, 1, ], =, 0, ;, exp, ++, ;, }, protected, int, align, (, int, e, ), {]
[], =, 0, ;, exp, ++, ;, }, protected, int, align, (, int, e, ), {, int, lostdigit, =, 0]
[;, exp, ++, ;, }, protected, int, align, (, int, e, ), {, int, lostdigit, =, 0, ;, boolean, inexact]
[;, }, protected, int, align, (, int, e, ), {, int, lostdigit, =, 0, ;, boolean, inexact, =, false, ;]
[++, ;, }, protected, int, align, (, int, e, ), {, int, lostdigit, =, 0, ;, boolean, inexact, =, false]
[;, boolean, inexact, =, false, ;, int, diff, =, exp, -, e, ;, int, adiff, =, diff, ;, if, (]
[;, int, diff, =, exp, -, e, ;, int, adiff, =, diff, ;, if, (, adiff, <, 0, ), {]
[;, int, adiff, =, diff, ;, if, (, adiff, <, 0, ), {, adiff, =, -, adiff, ;, }, if]
[-, e, ;, int, adiff, =, diff, ;, if, (, adiff, <, 0, ), {, adiff, =, -, adiff, ;]
[;, int, adiff, =, diff, ;, if, (, adiff, <, 0, ), {, adiff, =, -, adiff, ;, }, if]
[;, if, (, adiff, <, 0, ), {, adiff, =, -, adiff, ;, }, if, (, diff, ==, 0, )]
[), {, adiff, =, -, adiff, ;, }, if, (, diff, ==, 0, ), {, return, 0, ;, }, if]
[<, 0, ), {, adiff, =, -, adiff, ;, }, if, (, diff, ==, 0, ), {, return, 0, ;]
[), {, adiff, =, -, adiff, ;, }, if, (, diff, ==, 0, ), {, return, 0, ;, }, if]
[=, -, adiff, ;, }, if, (, diff, ==, 0, ), {, return, 0, ;, }, if, (, adiff, >]
[;, }, if, (, diff, ==, 0, ), {, return, 0, ;, }, if, (, adiff, >, (, mant, .]
[;, }, if, (, diff, ==, 0, ), {, return, 0, ;, }, if, (, adiff, >, (, mant, .]
[), {, return, 0, ;, }, if, (, adiff, >, (, mant, ., length, +, 1, ), ), {, Arrays]
[==, 0, ), {, return, 0, ;, }, if, (, adiff, >, (, mant, ., length, +, 1, ), )]
[), {, return, 0, ;, }, if, (, adiff, >, (, mant, ., length, +, 1, ), ), {, Arrays]
[;, }, if, (, adiff, >, (, mant, ., length, +, 1, ), ), {, Arrays, ., fill, (, mant]
[), {, Arrays, ., fill, (, mant, ,, 0, ), ;, exp, =, e, ;, field, ., setIEEEFlagsBits, (, DfpField]
[>, (, mant, ., length, +, 1, ), ), {, Arrays, ., fill, (, mant, ,, 0, ), ;, exp]
[), {, Arrays, ., fill, (, mant, ,, 0, ), ;, exp, =, e, ;, field, ., setIEEEFlagsBits, (, DfpField]
[), ), {, Arrays, ., fill, (, mant, ,, 0, ), ;, exp, =, e, ;, field, ., setIEEEFlagsBits, (]
[+, 1, ), ), {, Arrays, ., fill, (, mant, ,, 0, ), ;, exp, =, e, ;, field, .]
[., length, +, 1, ), ), {, Arrays, ., fill, (, mant, ,, 0, ), ;, exp, =, e, ;]
[), ), {, Arrays, ., fill, (, mant, ,, 0, ), ;, exp, =, e, ;, field, ., setIEEEFlagsBits, (]
[;, exp, =, e, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,]
[., fill, (, mant, ,, 0, ), ;, exp, =, e, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[,, 0, ), ;, exp, =, e, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField]
[), ;, exp, =, e, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT]
[=, e, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,]
[;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,]
[;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, ), ;, return, 0, ;, }, for, (]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, )]
[), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, ), ;, return, 0, ;, }, for]
[., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, ), ;, return, 0, ;]
[;, return, 0, ;, }, for, (, int, i, =, 0, ;, i, <, adiff, ;, i, ++, ), {]
[,, ALIGN_TRAP, ,, this, ,, this, ), ;, return, 0, ;, }, for, (, int, i, =, 0, ;, i]
[., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, ), ;, return, 0, ;, }, for, (, int, i, =, 0]
[,, this, ,, this, ), ;, return, 0, ;, }, for, (, int, i, =, 0, ;, i, <, adiff]
[,, this, ), ;, return, 0, ;, }, for, (, int, i, =, 0, ;, i, <, adiff, ;, i]
[), ;, return, 0, ;, }, for, (, int, i, =, 0, ;, i, <, adiff, ;, i, ++, )]
[;, }, for, (, int, i, =, 0, ;, i, <, adiff, ;, i, ++, ), {, if, (, diff]
[;, i, <, adiff, ;, i, ++, ), {, if, (, diff, <, 0, ), {, if, (, lostdigit, !=]
[;, i, ++, ), {, if, (, diff, <, 0, ), {, if, (, lostdigit, !=, 0, ), {, inexact]
[<, adiff, ;, i, ++, ), {, if, (, diff, <, 0, ), {, if, (, lostdigit, !=, 0, )]
[;, i, ++, ), {, if, (, diff, <, 0, ), {, if, (, lostdigit, !=, 0, ), {, inexact]
[), {, if, (, diff, <, 0, ), {, if, (, lostdigit, !=, 0, ), {, inexact, =, true, ;]
[++, ), {, if, (, diff, <, 0, ), {, if, (, lostdigit, !=, 0, ), {, inexact, =, true]
[), {, if, (, lostdigit, !=, 0, ), {, inexact, =, true, ;, }, lostdigit, =, mant, [, 0, ]]
[<, 0, ), {, if, (, lostdigit, !=, 0, ), {, inexact, =, true, ;, }, lostdigit, =, mant, []
[), {, if, (, lostdigit, !=, 0, ), {, inexact, =, true, ;, }, lostdigit, =, mant, [, 0, ]]
[), {, inexact, =, true, ;, }, lostdigit, =, mant, [, 0, ], ;, shiftRight, (, ), ;, }, else]
[!=, 0, ), {, inexact, =, true, ;, }, lostdigit, =, mant, [, 0, ], ;, shiftRight, (, ), ;]
[), {, inexact, =, true, ;, }, lostdigit, =, mant, [, 0, ], ;, shiftRight, (, ), ;, }, else]
[=, true, ;, }, lostdigit, =, mant, [, 0, ], ;, shiftRight, (, ), ;, }, else, {, shiftLeft, (]
[;, }, lostdigit, =, mant, [, 0, ], ;, shiftRight, (, ), ;, }, else, {, shiftLeft, (, ), ;]
[=, mant, [, 0, ], ;, shiftRight, (, ), ;, }, else, {, shiftLeft, (, ), ;, }, }, if]
[;, shiftRight, (, ), ;, }, else, {, shiftLeft, (, ), ;, }, }, if, (, inexact, ), {, field]
[[, 0, ], ;, shiftRight, (, ), ;, }, else, {, shiftLeft, (, ), ;, }, }, if, (, inexact]
[], ;, shiftRight, (, ), ;, }, else, {, shiftLeft, (, ), ;, }, }, if, (, inexact, ), {]
[;, }, else, {, shiftLeft, (, ), ;, }, }, if, (, inexact, ), {, field, ., setIEEEFlagsBits, (, DfpField]
[;, }, }, if, (, inexact, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this]
[;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, ), ;, }, return, lostdigit, ;, }, public]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, )]
[), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, ), ;, }, return, lostdigit, ;, }]
[., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, ), ;, }, return, lostdigit]
[;, }, return, lostdigit, ;, }, public, boolean, lessThan, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits]
[,, ALIGN_TRAP, ,, this, ,, this, ), ;, }, return, lostdigit, ;, }, public, boolean, lessThan, (, final, Dfp, x]
[., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, ), ;, }, return, lostdigit, ;, }, public, boolean, lessThan, (, final]
[,, this, ,, this, ), ;, }, return, lostdigit, ;, }, public, boolean, lessThan, (, final, Dfp, x, ), {]
[,, this, ), ;, }, return, lostdigit, ;, }, public, boolean, lessThan, (, final, Dfp, x, ), {, if, (]
[), ;, }, return, lostdigit, ;, }, public, boolean, lessThan, (, final, Dfp, x, ), {, if, (, field, .]
[;, }, public, boolean, lessThan, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[!=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final]
[., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, .]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance]
[., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result]
[;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, dotrap, (]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, dotrap]
[., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN]
[;, result, ., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, result, ), ;]
[), ;, result, ., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, result, )]
[=, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }]
[., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, result, ), ;, return, false]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (]
[;, return, false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {, field, .]
[,, LESS_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||, x, .]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||]
[,, x, ,, result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (]
[,, result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), )]
[), ;, return, false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {, field]
[;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x]
[||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x]
[., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, newInstance, (]
[), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;]
[., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), )]
[;, return, false, ;, }, return, compare, (, this, ,, x, ), <, 0, ;, }, public, boolean, greaterThan, (]
[,, LESS_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, compare, (]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, compare, (, this, ,]
[,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, compare, (, this, ,, x, )]
[), ;, return, false, ;, }, return, compare, (, this, ,, x, ), <, 0, ;, }, public, boolean, greaterThan]
[), ), ;, return, false, ;, }, return, compare, (, this, ,, x, ), <, 0, ;, }, public, boolean]
[;, }, return, compare, (, this, ,, x, ), <, 0, ;, }, public, boolean, greaterThan, (, final, Dfp, x]
[;, }, public, boolean, greaterThan, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x]
[<, 0, ;, }, public, boolean, greaterThan, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, )]
[,, x, ), <, 0, ;, }, public, boolean, greaterThan, (, final, Dfp, x, ), {, if, (, field, .]
[), <, 0, ;, }, public, boolean, greaterThan, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (]
[;, }, public, boolean, greaterThan, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[!=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final]
[., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, .]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance]
[., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result]
[;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, dotrap, (]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, dotrap]
[., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN]
[;, result, ., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, result, ), ;]
[), ;, result, ., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, result, )]
[=, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }]
[., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, result, ), ;, return, false]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (]
[;, return, false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {, field, .]
[,, GREATER_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||, x, .]
[., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||]
[,, x, ,, result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (]
[,, result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), )]
[), ;, return, false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {, field]
[;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x]
[||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x]
[., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, newInstance, (]
[), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;]
[., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), )]
[;, return, false, ;, }, return, compare, (, this, ,, x, ), >, 0, ;, }, public, boolean, negativeOrNull, (]
[,, GREATER_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, compare, (]
[., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, compare, (, this, ,]
[,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, compare, (, this, ,, x, )]
[), ;, return, false, ;, }, return, compare, (, this, ,, x, ), >, 0, ;, }, public, boolean, negativeOrNull]
[), ), ;, return, false, ;, }, return, compare, (, this, ,, x, ), >, 0, ;, }, public, boolean]
[;, }, return, compare, (, this, ,, x, ), >, 0, ;, }, public, boolean, negativeOrNull, (, ), {, if]
[;, }, public, boolean, negativeOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField]
[>, 0, ;, }, public, boolean, negativeOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits]
[,, x, ), >, 0, ;, }, public, boolean, negativeOrNull, (, ), {, if, (, isNaN, (, ), ), {]
[), >, 0, ;, }, public, boolean, negativeOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, .]
[;, }, public, boolean, negativeOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (]
[), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;]
[., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), )]
[;, return, false, ;, }, return, (, sign, <, 0, ), ||, (, (, mant, [, mant, ., length, -]
[,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0]
[,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), ||]
[), ;, return, false, ;, }, return, (, sign, <, 0, ), ||, (, (, mant, [, mant, ., length]
[), ), ;, return, false, ;, }, return, (, sign, <, 0, ), ||, (, (, mant, [, mant, .]
[;, }, return, (, sign, <, 0, ), ||, (, (, mant, [, mant, ., length, -, 1, ], ==]
[;, }, public, boolean, strictlyNegative, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField]
[||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, ), )]
[), ||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, )]
[<, 0, ), ||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite]
[), ||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, )]
[;, }, public, boolean, strictlyNegative, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField]
[), ;, }, public, boolean, strictlyNegative, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[&&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyNegative, (, ), {, if, (, isNaN, (, ), )]
[), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyNegative, (, ), {, if, (, isNaN, (, )]
[==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyNegative, (, ), {, if, (, isNaN]
[[, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean]
[], ==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyNegative, (, ), {, if, (]
[-, 1, ], ==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyNegative, (, ), {]
[., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyNegative, (]
[], ==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyNegative, (, ), {, if, (]
[), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyNegative, (, ), {, if, (, isNaN, (, )]
[), ;, }, public, boolean, strictlyNegative, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[), ;, }, public, boolean, strictlyNegative, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (]
[), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;]
[., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), )]
[;, return, false, ;, }, return, (, sign, <, 0, ), &&, (, (, mant, [, mant, ., length, -]
[,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0]
[,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), &&]
[), ;, return, false, ;, }, return, (, sign, <, 0, ), &&, (, (, mant, [, mant, ., length]
[), ), ;, return, false, ;, }, return, (, sign, <, 0, ), &&, (, (, mant, [, mant, .]
[;, }, return, (, sign, <, 0, ), &&, (, (, mant, [, mant, ., length, -, 1, ], !=]
[;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField]
[&&, (, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), ), ;]
[), &&, (, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), )]
[<, 0, ), &&, (, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (]
[), &&, (, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), )]
[;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField]
[), ;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[||, isInfinite, (, ), ), ;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN, (, ), ), {]
[), ||, isInfinite, (, ), ), ;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN, (, ), )]
[!=, 0, ), ||, isInfinite, (, ), ), ;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN, (]
[[, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), ), ;, }, public, boolean, positiveOrNull]
[], !=, 0, ), ||, isInfinite, (, ), ), ;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN]
[-, 1, ], !=, 0, ), ||, isInfinite, (, ), ), ;, }, public, boolean, positiveOrNull, (, ), {, if]
[., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), ), ;, }, public, boolean, positiveOrNull, (, )]
[], !=, 0, ), ||, isInfinite, (, ), ), ;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN]
[), ||, isInfinite, (, ), ), ;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN, (, ), )]
[), ;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (]
[), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;]
[., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), )]
[;, return, false, ;, }, return, (, sign, >, 0, ), ||, (, (, mant, [, mant, ., length, -]
[,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0]
[,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), ||]
[), ;, return, false, ;, }, return, (, sign, >, 0, ), ||, (, (, mant, [, mant, ., length]
[), ), ;, return, false, ;, }, return, (, sign, >, 0, ), ||, (, (, mant, [, mant, .]
[;, }, return, (, sign, >, 0, ), ||, (, (, mant, [, mant, ., length, -, 1, ], ==]
[;, }, public, boolean, strictlyPositive, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField]
[||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, ), )]
[), ||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, )]
[>, 0, ), ||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite]
[), ||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, )]
[;, }, public, boolean, strictlyPositive, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField]
[), ;, }, public, boolean, strictlyPositive, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[&&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyPositive, (, ), {, if, (, isNaN, (, ), )]
[), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyPositive, (, ), {, if, (, isNaN, (, )]
[==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyPositive, (, ), {, if, (, isNaN]
[[, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean]
[], ==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyPositive, (, ), {, if, (]
[-, 1, ], ==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyPositive, (, ), {]
[., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyPositive, (]
[], ==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyPositive, (, ), {, if, (]
[), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyPositive, (, ), {, if, (, isNaN, (, )]
[), ;, }, public, boolean, strictlyPositive, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[), ;, }, public, boolean, strictlyPositive, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (]
[), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;]
[., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), )]
[;, return, false, ;, }, return, (, sign, >, 0, ), &&, (, (, mant, [, mant, ., length, -]
[,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0]
[,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), &&]
[), ;, return, false, ;, }, return, (, sign, >, 0, ), &&, (, (, mant, [, mant, ., length]
[), ), ;, return, false, ;, }, return, (, sign, >, 0, ), &&, (, (, mant, [, mant, .]
[;, }, return, (, sign, >, 0, ), &&, (, (, mant, [, mant, ., length, -, 1, ], !=]
[;, }, public, Dfp, abs, (, ), {, Dfp, result, =, newInstance, (, this, ), ;, result, ., sign, =]
[&&, (, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), ), ;]
[), &&, (, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), )]
[>, 0, ), &&, (, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (]
[), &&, (, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), )]
[;, }, public, Dfp, abs, (, ), {, Dfp, result, =, newInstance, (, this, ), ;, result, ., sign, =]
[), ;, }, public, Dfp, abs, (, ), {, Dfp, result, =, newInstance, (, this, ), ;, result, ., sign]
[||, isInfinite, (, ), ), ;, }, public, Dfp, abs, (, ), {, Dfp, result, =, newInstance, (, this, )]
[), ||, isInfinite, (, ), ), ;, }, public, Dfp, abs, (, ), {, Dfp, result, =, newInstance, (, this]
[!=, 0, ), ||, isInfinite, (, ), ), ;, }, public, Dfp, abs, (, ), {, Dfp, result, =, newInstance]
[[, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), ), ;, }, public, Dfp, abs]
[], !=, 0, ), ||, isInfinite, (, ), ), ;, }, public, Dfp, abs, (, ), {, Dfp, result, =]
[-, 1, ], !=, 0, ), ||, isInfinite, (, ), ), ;, }, public, Dfp, abs, (, ), {, Dfp]
[., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), ), ;, }, public, Dfp, abs, (, )]
[], !=, 0, ), ||, isInfinite, (, ), ), ;, }, public, Dfp, abs, (, ), {, Dfp, result, =]
[), ||, isInfinite, (, ), ), ;, }, public, Dfp, abs, (, ), {, Dfp, result, =, newInstance, (, this]
[), ;, }, public, Dfp, abs, (, ), {, Dfp, result, =, newInstance, (, this, ), ;, result, ., sign]
[;, result, ., sign, =, 1, ;, return, result, ;, }, public, boolean, isInfinite, (, ), {, return, nans, ==]
[), ;, result, ., sign, =, 1, ;, return, result, ;, }, public, boolean, isInfinite, (, ), {, return, nans]
[=, 1, ;, return, result, ;, }, public, boolean, isInfinite, (, ), {, return, nans, ==, INFINITE, ;, }, public]
[., sign, =, 1, ;, return, result, ;, }, public, boolean, isInfinite, (, ), {, return, nans, ==, INFINITE, ;]
[;, return, result, ;, }, public, boolean, isInfinite, (, ), {, return, nans, ==, INFINITE, ;, }, public, boolean, isNaN]
[;, }, public, boolean, isInfinite, (, ), {, return, nans, ==, INFINITE, ;, }, public, boolean, isNaN, (, ), {]
[;, }, public, boolean, isNaN, (, ), {, return, (, nans, ==, QNAN, ), ||, (, nans, ==, SNAN, )]
[==, INFINITE, ;, }, public, boolean, isNaN, (, ), {, return, (, nans, ==, QNAN, ), ||, (, nans, ==]
[;, }, public, boolean, isNaN, (, ), {, return, (, nans, ==, QNAN, ), ||, (, nans, ==, SNAN, )]
[;, }, public, boolean, isZero, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField]
[||, (, nans, ==, SNAN, ), ;, }, public, boolean, isZero, (, ), {, if, (, isNaN, (, ), )]
[), ||, (, nans, ==, SNAN, ), ;, }, public, boolean, isZero, (, ), {, if, (, isNaN, (, )]
[==, QNAN, ), ||, (, nans, ==, SNAN, ), ;, }, public, boolean, isZero, (, ), {, if, (, isNaN]
[), ||, (, nans, ==, SNAN, ), ;, }, public, boolean, isZero, (, ), {, if, (, isNaN, (, )]
[;, }, public, boolean, isZero, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField]
[), ;, }, public, boolean, isZero, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[==, SNAN, ), ;, }, public, boolean, isZero, (, ), {, if, (, isNaN, (, ), ), {, field, .]
[), ;, }, public, boolean, isZero, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (]
[), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;]
[., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), )]
[;, return, false, ;, }, return, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !]
[,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, mant]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, mant, [, mant]
[,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, mant, [, mant, ., length]
[), ;, return, false, ;, }, return, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&]
[), ), ;, return, false, ;, }, return, (, mant, [, mant, ., length, -, 1, ], ==, 0, )]
[;, }, return, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, )]
[;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, other, instanceof, Dfp, ), {]
[&&, !, isInfinite, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (]
[), &&, !, isInfinite, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if]
[==, 0, ), &&, !, isInfinite, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, )]
[[, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, ), ;, }, @, Override, public]
[], ==, 0, ), &&, !, isInfinite, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, other]
[-, 1, ], ==, 0, ), &&, !, isInfinite, (, ), ;, }, @, Override, public, boolean, equals, (, final]
[., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, ), ;, }, @, Override, public, boolean, equals]
[], ==, 0, ), &&, !, isInfinite, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, other]
[), &&, !, isInfinite, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if]
[;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, other, instanceof, Dfp, ), {]
[;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, other, instanceof, Dfp, ), {]
[), {, final, Dfp, x, =, (, Dfp, ), other, ;, if, (, isNaN, (, ), ||, x, ., isNaN]
[instanceof, Dfp, ), {, final, Dfp, x, =, (, Dfp, ), other, ;, if, (, isNaN, (, ), ||, x]
[;, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=, x]
[;, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=, x]
[), {, return, false, ;, }, return, compare, (, this, ,, x, ), ==, 0, ;, }, return, false, ;]
[||, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }]
[||, x, ., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, )]
[||, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }]
[., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {]
[), {, return, false, ;, }, return, compare, (, this, ,, x, ), ==, 0, ;, }, return, false, ;]
[!=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return, compare, (, this, ,, x]
[., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return, compare]
[), {, return, false, ;, }, return, compare, (, this, ,, x, ), ==, 0, ;, }, return, false, ;]
[., getRadixDigits, (, ), ), {, return, false, ;, }, return, compare, (, this, ,, x, ), ==, 0, ;]
[., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return, compare, (, this, ,, x, ), ==]
[;, }, return, compare, (, this, ,, x, ), ==, 0, ;, }, return, false, ;, }, @, Override, public]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, 17, +, (, sign, <<]
[==, 0, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, 17, +, (]
[,, x, ), ==, 0, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), ==, 0, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, 17, +]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, 17, +, (, sign, <<]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 17, +, (, sign, <<, 8, ), +, (]
[;, }, public, boolean, unequal, (, final, Dfp, x, ), {, if, (, isNaN, (, ), ||, x, ., isNaN]
[+, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean, unequal, (, final, Dfp, x, ), {, if, (]
[+, exp, +, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean, unequal, (, final, Dfp, x, ), {]
[+, (, nans, <<, 16, ), +, exp, +, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean, unequal]
[+, (, sign, <<, 8, ), +, (, nans, <<, 16, ), +, exp, +, Arrays, ., hashCode, (, mant]
[+, (, nans, <<, 16, ), +, exp, +, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean, unequal]
[), +, (, nans, <<, 16, ), +, exp, +, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean]
[<<, 8, ), +, (, nans, <<, 16, ), +, exp, +, Arrays, ., hashCode, (, mant, ), ;, }]
[), +, (, nans, <<, 16, ), +, exp, +, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean]
[+, exp, +, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean, unequal, (, final, Dfp, x, ), {]
[), +, exp, +, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean, unequal, (, final, Dfp, x, )]
[<<, 16, ), +, exp, +, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean, unequal, (, final, Dfp]
[), +, exp, +, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean, unequal, (, final, Dfp, x, )]
[+, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean, unequal, (, final, Dfp, x, ), {, if, (]
[;, }, public, boolean, unequal, (, final, Dfp, x, ), {, if, (, isNaN, (, ), ||, x, ., isNaN]
[., hashCode, (, mant, ), ;, }, public, boolean, unequal, (, final, Dfp, x, ), {, if, (, isNaN, (]
[), ;, }, public, boolean, unequal, (, final, Dfp, x, ), {, if, (, isNaN, (, ), ||, x, .]
[), {, return, false, ;, }, return, greaterThan, (, x, ), ||, lessThan, (, x, ), ;, }, private, static]
[||, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }]
[||, x, ., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, )]
[||, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }]
[., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {]
[), {, return, false, ;, }, return, greaterThan, (, x, ), ||, lessThan, (, x, ), ;, }, private, static]
[!=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return, greaterThan, (, x, ), ||]
[., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return, greaterThan]
[), {, return, false, ;, }, return, greaterThan, (, x, ), ||, lessThan, (, x, ), ;, }, private, static]
[., getRadixDigits, (, ), ), {, return, false, ;, }, return, greaterThan, (, x, ), ||, lessThan, (, x, )]
[., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return, greaterThan, (, x, ), ||, lessThan, (]
[;, }, return, greaterThan, (, x, ), ||, lessThan, (, x, ), ;, }, private, static, int, compare, (, final]
[;, }, private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (, a, .]
[||, lessThan, (, x, ), ;, }, private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, )]
[), ||, lessThan, (, x, ), ;, }, private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b]
[;, }, private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (, a, .]
[), ;, }, private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (, a]
[), {, return, 0, ;, }, if, (, a, ., sign, !=, b, ., sign, ), {, if, (, a]
[&&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }, if, (, a, ., sign, !=, b, .]
[&&, a, ., nans, ==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }, if, (]
[&&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&, a, ., nans, ==]
[==, 0, &&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&, a, .]
[[, a, ., mant, ., length, -, 1, ], ==, 0, &&, b, ., mant, [, b, ., mant, .]
[., mant, [, a, ., mant, ., length, -, 1, ], ==, 0, &&, b, ., mant, [, b, .]
[], ==, 0, &&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&, a]
[-, 1, ], ==, 0, &&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0]
[., length, -, 1, ], ==, 0, &&, b, ., mant, [, b, ., mant, ., length, -, 1, ]]
[., mant, ., length, -, 1, ], ==, 0, &&, b, ., mant, [, b, ., mant, ., length, -]
[], ==, 0, &&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&, a]
[&&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&, a, ., nans, ==]
[&&, a, ., nans, ==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }, if, (]
[==, 0, &&, a, ., nans, ==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }]
[[, b, ., mant, ., length, -, 1, ], ==, 0, &&, a, ., nans, ==, FINITE, &&, b, .]
[., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&, a, ., nans, ==, FINITE, &&]
[], ==, 0, &&, a, ., nans, ==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return, 0, ;]
[-, 1, ], ==, 0, &&, a, ., nans, ==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return]
[., length, -, 1, ], ==, 0, &&, a, ., nans, ==, FINITE, &&, b, ., nans, ==, FINITE, )]
[., mant, ., length, -, 1, ], ==, 0, &&, a, ., nans, ==, FINITE, &&, b, ., nans, ==]
[], ==, 0, &&, a, ., nans, ==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return, 0, ;]
[&&, a, ., nans, ==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }, if, (]
[&&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }, if, (, a, ., sign, !=, b, .]
[==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }, if, (, a, ., sign, !=]
[., nans, ==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }, if, (, a, .]
[&&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }, if, (, a, ., sign, !=, b, .]
[), {, return, 0, ;, }, if, (, a, ., sign, !=, b, ., sign, ), {, if, (, a]
[==, FINITE, ), {, return, 0, ;, }, if, (, a, ., sign, !=, b, ., sign, ), {, if]
[., nans, ==, FINITE, ), {, return, 0, ;, }, if, (, a, ., sign, !=, b, ., sign, )]
[), {, return, 0, ;, }, if, (, a, ., sign, !=, b, ., sign, ), {, if, (, a]
[;, }, if, (, a, ., sign, !=, b, ., sign, ), {, if, (, a, ., sign, ==, -]
[), {, if, (, a, ., sign, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return]
[!=, b, ., sign, ), {, if, (, a, ., sign, ==, -, 1, ), {, return, -, 1, ;]
[., sign, !=, b, ., sign, ), {, if, (, a, ., sign, ==, -, 1, ), {, return, -]
[), {, if, (, a, ., sign, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return]
[., sign, ), {, if, (, a, ., sign, ==, -, 1, ), {, return, -, 1, ;, }, else]
[), {, return, -, 1, ;, }, else, {, return, 1, ;, }, }, if, (, a, ., nans, ==]
[==, -, 1, ), {, return, -, 1, ;, }, else, {, return, 1, ;, }, }, if, (, a]
[., sign, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return, 1, ;, }, }, if]
[), {, return, -, 1, ;, }, else, {, return, 1, ;, }, }, if, (, a, ., nans, ==]
[), {, return, -, 1, ;, }, else, {, return, 1, ;, }, }, if, (, a, ., nans, ==]
[;, }, else, {, return, 1, ;, }, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans]
[;, }, else, {, return, 1, ;, }, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans]
[;, }, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans, ==, FINITE, ), {, return, a]
[), {, return, a, ., sign, ;, }, if, (, a, ., nans, ==, FINITE, &&, b, ., nans, ==]
[&&, b, ., nans, ==, FINITE, ), {, return, a, ., sign, ;, }, if, (, a, ., nans, ==]
[==, INFINITE, &&, b, ., nans, ==, FINITE, ), {, return, a, ., sign, ;, }, if, (, a, .]
[., nans, ==, INFINITE, &&, b, ., nans, ==, FINITE, ), {, return, a, ., sign, ;, }, if, (]
[&&, b, ., nans, ==, FINITE, ), {, return, a, ., sign, ;, }, if, (, a, ., nans, ==]
[), {, return, a, ., sign, ;, }, if, (, a, ., nans, ==, FINITE, &&, b, ., nans, ==]
[==, FINITE, ), {, return, a, ., sign, ;, }, if, (, a, ., nans, ==, FINITE, &&, b, .]
[., nans, ==, FINITE, ), {, return, a, ., sign, ;, }, if, (, a, ., nans, ==, FINITE, &&]
[), {, return, a, ., sign, ;, }, if, (, a, ., nans, ==, FINITE, &&, b, ., nans, ==]
[;, }, if, (, a, ., nans, ==, FINITE, &&, b, ., nans, ==, INFINITE, ), {, return, -, b]
[., sign, ;, }, if, (, a, ., nans, ==, FINITE, &&, b, ., nans, ==, INFINITE, ), {, return]
[), {, return, -, b, ., sign, ;, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans]
[&&, b, ., nans, ==, INFINITE, ), {, return, -, b, ., sign, ;, }, if, (, a, ., nans]
[==, FINITE, &&, b, ., nans, ==, INFINITE, ), {, return, -, b, ., sign, ;, }, if, (, a]
[., nans, ==, FINITE, &&, b, ., nans, ==, INFINITE, ), {, return, -, b, ., sign, ;, }, if]
[&&, b, ., nans, ==, INFINITE, ), {, return, -, b, ., sign, ;, }, if, (, a, ., nans]
[), {, return, -, b, ., sign, ;, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans]
[==, INFINITE, ), {, return, -, b, ., sign, ;, }, if, (, a, ., nans, ==, INFINITE, &&, b]
[., nans, ==, INFINITE, ), {, return, -, b, ., sign, ;, }, if, (, a, ., nans, ==, INFINITE]
[), {, return, -, b, ., sign, ;, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans]
[;, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return, 0, ;]
[;, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return, 0, ;]
[., sign, ;, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return]
[), {, return, 0, ;, }, if, (, b, ., mant, [, b, ., mant, ., length, -, 1, ]]
[&&, b, ., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (, b, ., mant, [, b, .]
[==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (, b, ., mant, []
[., nans, ==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (, b, .]
[&&, b, ., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (, b, ., mant, [, b, .]
[), {, return, 0, ;, }, if, (, b, ., mant, [, b, ., mant, ., length, -, 1, ]]
[==, INFINITE, ), {, return, 0, ;, }, if, (, b, ., mant, [, b, ., mant, ., length, -]
[., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (, b, ., mant, [, b, ., mant, .]
[), {, return, 0, ;, }, if, (, b, ., mant, [, b, ., mant, ., length, -, 1, ]]
[;, }, if, (, b, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, &&, a]
[), {, if, (, a, ., exp, <, b, ., exp, ), {, return, -, a, ., sign, ;, }]
[&&, a, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, ), {, if, (, a]
[!=, 0, &&, a, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, ), {, if]
[[, b, ., mant, ., length, -, 1, ], !=, 0, &&, a, ., mant, [, b, ., mant, .]
[., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, &&, a, ., mant, [, b, .]
[], !=, 0, &&, a, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, ), {]
[-, 1, ], !=, 0, &&, a, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0]
[., length, -, 1, ], !=, 0, &&, a, ., mant, [, b, ., mant, ., length, -, 1, ]]
[., mant, ., length, -, 1, ], !=, 0, &&, a, ., mant, [, b, ., mant, ., length, -]
[], !=, 0, &&, a, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, ), {]
[&&, a, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, ), {, if, (, a]
[), {, if, (, a, ., exp, <, b, ., exp, ), {, return, -, a, ., sign, ;, }]
[!=, 0, ), {, if, (, a, ., exp, <, b, ., exp, ), {, return, -, a, ., sign]
[[, b, ., mant, ., length, -, 1, ], !=, 0, ), {, if, (, a, ., exp, <, b]
[., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, ), {, if, (, a, ., exp]
[], !=, 0, ), {, if, (, a, ., exp, <, b, ., exp, ), {, return, -, a, .]
[-, 1, ], !=, 0, ), {, if, (, a, ., exp, <, b, ., exp, ), {, return, -]
[., length, -, 1, ], !=, 0, ), {, if, (, a, ., exp, <, b, ., exp, ), {]
[., mant, ., length, -, 1, ], !=, 0, ), {, if, (, a, ., exp, <, b, ., exp]
[], !=, 0, ), {, if, (, a, ., exp, <, b, ., exp, ), {, return, -, a, .]
[), {, if, (, a, ., exp, <, b, ., exp, ), {, return, -, a, ., sign, ;, }]
[), {, return, -, a, ., sign, ;, }, if, (, a, ., exp, >, b, ., exp, ), {]
[<, b, ., exp, ), {, return, -, a, ., sign, ;, }, if, (, a, ., exp, >, b]
[., exp, <, b, ., exp, ), {, return, -, a, ., sign, ;, }, if, (, a, ., exp]
[), {, return, -, a, ., sign, ;, }, if, (, a, ., exp, >, b, ., exp, ), {]
[., exp, ), {, return, -, a, ., sign, ;, }, if, (, a, ., exp, >, b, ., exp]
[;, }, if, (, a, ., exp, >, b, ., exp, ), {, return, a, ., sign, ;, }, }]
[;, }, if, (, a, ., exp, >, b, ., exp, ), {, return, a, ., sign, ;, }, }]
[., sign, ;, }, if, (, a, ., exp, >, b, ., exp, ), {, return, a, ., sign, ;]
[), {, return, a, ., sign, ;, }, }, for, (, int, i, =, a, ., mant, ., length, -]
[>, b, ., exp, ), {, return, a, ., sign, ;, }, }, for, (, int, i, =, a, .]
[., exp, >, b, ., exp, ), {, return, a, ., sign, ;, }, }, for, (, int, i, =]
[), {, return, a, ., sign, ;, }, }, for, (, int, i, =, a, ., mant, ., length, -]
[., exp, ), {, return, a, ., sign, ;, }, }, for, (, int, i, =, a, ., mant, .]
[;, }, }, for, (, int, i, =, a, ., mant, ., length, -, 1, ;, i, >=, 0, ;]
[., sign, ;, }, }, for, (, int, i, =, a, ., mant, ., length, -, 1, ;, i, >=]
[;, i, >=, 0, ;, i, --, ), {, if, (, a, ., mant, [, i, ], >, b, .]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, a, ., mant, [, i, ], >]
[., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, a, ., mant, [, i]
[., mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, a, ., mant]
[;, i, >=, 0, ;, i, --, ), {, if, (, a, ., mant, [, i, ], >, b, .]
[;, i, --, ), {, if, (, a, ., mant, [, i, ], >, b, ., mant, [, i, ]]
[>=, 0, ;, i, --, ), {, if, (, a, ., mant, [, i, ], >, b, ., mant, []
[;, i, --, ), {, if, (, a, ., mant, [, i, ], >, b, ., mant, [, i, ]]
[), {, if, (, a, ., mant, [, i, ], >, b, ., mant, [, i, ], ), {, return]
[--, ), {, if, (, a, ., mant, [, i, ], >, b, ., mant, [, i, ], ), {]
[), {, return, a, ., sign, ;, }, if, (, a, ., mant, [, i, ], <, b, ., mant]
[>, b, ., mant, [, i, ], ), {, return, a, ., sign, ;, }, if, (, a, ., mant]
[[, i, ], >, b, ., mant, [, i, ], ), {, return, a, ., sign, ;, }, if, (]
[., mant, [, i, ], >, b, ., mant, [, i, ], ), {, return, a, ., sign, ;, }]
[], >, b, ., mant, [, i, ], ), {, return, a, ., sign, ;, }, if, (, a, .]
[), {, return, a, ., sign, ;, }, if, (, a, ., mant, [, i, ], <, b, ., mant]
[[, i, ], ), {, return, a, ., sign, ;, }, if, (, a, ., mant, [, i, ], <]
[., mant, [, i, ], ), {, return, a, ., sign, ;, }, if, (, a, ., mant, [, i]
[], ), {, return, a, ., sign, ;, }, if, (, a, ., mant, [, i, ], <, b, .]
[;, }, if, (, a, ., mant, [, i, ], <, b, ., mant, [, i, ], ), {, return]
[., sign, ;, }, if, (, a, ., mant, [, i, ], <, b, ., mant, [, i, ], )]
[), {, return, -, a, ., sign, ;, }, }, return, 0, ;, }, public, Dfp, rint, (, ), {]
[<, b, ., mant, [, i, ], ), {, return, -, a, ., sign, ;, }, }, return, 0, ;]
[[, i, ], <, b, ., mant, [, i, ], ), {, return, -, a, ., sign, ;, }, }]
[., mant, [, i, ], <, b, ., mant, [, i, ], ), {, return, -, a, ., sign, ;]
[], <, b, ., mant, [, i, ], ), {, return, -, a, ., sign, ;, }, }, return, 0]
[), {, return, -, a, ., sign, ;, }, }, return, 0, ;, }, public, Dfp, rint, (, ), {]
[[, i, ], ), {, return, -, a, ., sign, ;, }, }, return, 0, ;, }, public, Dfp, rint]
[., mant, [, i, ], ), {, return, -, a, ., sign, ;, }, }, return, 0, ;, }, public]
[], ), {, return, -, a, ., sign, ;, }, }, return, 0, ;, }, public, Dfp, rint, (, )]
[;, }, }, return, 0, ;, }, public, Dfp, rint, (, ), {, return, trunc, (, DfpField, ., RoundingMode, .]
[;, }, }, return, 0, ;, }, public, Dfp, rint, (, ), {, return, trunc, (, DfpField, ., RoundingMode, .]
[., sign, ;, }, }, return, 0, ;, }, public, Dfp, rint, (, ), {, return, trunc, (, DfpField, .]
[;, }, public, Dfp, rint, (, ), {, return, trunc, (, DfpField, ., RoundingMode, ., ROUND_HALF_EVEN, ), ;, }, public]
[;, }, public, Dfp, floor, (, ), {, return, trunc, (, DfpField, ., RoundingMode, ., ROUND_FLOOR, ), ;, }, public]
[), ;, }, public, Dfp, floor, (, ), {, return, trunc, (, DfpField, ., RoundingMode, ., ROUND_FLOOR, ), ;, }]
[., ROUND_HALF_EVEN, ), ;, }, public, Dfp, floor, (, ), {, return, trunc, (, DfpField, ., RoundingMode, ., ROUND_FLOOR, )]
[., RoundingMode, ., ROUND_HALF_EVEN, ), ;, }, public, Dfp, floor, (, ), {, return, trunc, (, DfpField, ., RoundingMode, .]
[;, }, public, Dfp, ceil, (, ), {, return, trunc, (, DfpField, ., RoundingMode, ., ROUND_CEIL, ), ;, }, public]
[), ;, }, public, Dfp, ceil, (, ), {, return, trunc, (, DfpField, ., RoundingMode, ., ROUND_CEIL, ), ;, }]
[., ROUND_FLOOR, ), ;, }, public, Dfp, ceil, (, ), {, return, trunc, (, DfpField, ., RoundingMode, ., ROUND_CEIL, )]
[., RoundingMode, ., ROUND_FLOOR, ), ;, }, public, Dfp, ceil, (, ), {, return, trunc, (, DfpField, ., RoundingMode, .]
[;, }, public, Dfp, remainder, (, final, Dfp, d, ), {, final, Dfp, result, =, this, ., subtract, (, this]
[), ;, }, public, Dfp, remainder, (, final, Dfp, d, ), {, final, Dfp, result, =, this, ., subtract, (]
[., ROUND_CEIL, ), ;, }, public, Dfp, remainder, (, final, Dfp, d, ), {, final, Dfp, result, =, this, .]
[., RoundingMode, ., ROUND_CEIL, ), ;, }, public, Dfp, remainder, (, final, Dfp, d, ), {, final, Dfp, result, =]
[;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., sign]
[., subtract, (, this, ., divide, (, d, ), ., rint, (, ), ., multiply, (, d, ), ), ;]
[), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, .]
[., multiply, (, d, ), ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==]
[., rint, (, ), ., multiply, (, d, ), ), ;, if, (, result, ., mant, [, mant, ., length]
[., divide, (, d, ), ., rint, (, ), ., multiply, (, d, ), ), ;, if, (, result, .]
[), ., rint, (, ), ., multiply, (, d, ), ), ;, if, (, result, ., mant, [, mant, .]
[), ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result]
[), {, result, ., sign, =, sign, ;, }, return, result, ;, }, protected, Dfp, trunc, (, final, DfpField, .]
[==, 0, ), {, result, ., sign, =, sign, ;, }, return, result, ;, }, protected, Dfp, trunc, (, final]
[[, mant, ., length, -, 1, ], ==, 0, ), {, result, ., sign, =, sign, ;, }, return, result]
[., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., sign, =, sign, ;, }]
[], ==, 0, ), {, result, ., sign, =, sign, ;, }, return, result, ;, }, protected, Dfp, trunc, (]
[-, 1, ], ==, 0, ), {, result, ., sign, =, sign, ;, }, return, result, ;, }, protected, Dfp]
[., length, -, 1, ], ==, 0, ), {, result, ., sign, =, sign, ;, }, return, result, ;, }]
[], ==, 0, ), {, result, ., sign, =, sign, ;, }, return, result, ;, }, protected, Dfp, trunc, (]
[), {, result, ., sign, =, sign, ;, }, return, result, ;, }, protected, Dfp, trunc, (, final, DfpField, .]
[=, sign, ;, }, return, result, ;, }, protected, Dfp, trunc, (, final, DfpField, ., RoundingMode, rmode, ), {, boolean]
[., sign, =, sign, ;, }, return, result, ;, }, protected, Dfp, trunc, (, final, DfpField, ., RoundingMode, rmode, )]
[;, }, return, result, ;, }, protected, Dfp, trunc, (, final, DfpField, ., RoundingMode, rmode, ), {, boolean, changed, =]
[;, }, protected, Dfp, trunc, (, final, DfpField, ., RoundingMode, rmode, ), {, boolean, changed, =, false, ;, if, (]
[;, if, (, isNaN, (, ), ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, INFINITE]
[), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this]
[;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, if, (, mant, []
[), ;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, if, (, mant]
[), {, return, newInstance, (, this, ), ;, }, if, (, mant, [, mant, ., length, -, 1, ], ==]
[==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, if, (, mant, [, mant, ., length, -, 1]
[), {, return, newInstance, (, this, ), ;, }, if, (, mant, [, mant, ., length, -, 1, ], ==]
[;, }, if, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this]
[), ;, }, if, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, return, newInstance, (]
[), {, return, newInstance, (, this, ), ;, }, if, (, exp, <, 0, ), {, field, ., setIEEEFlagsBits, (]
[==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, exp, <, 0, ), {, field, .]
[[, mant, ., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (]
[], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, exp, <, 0, ), {, field]
[-, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, exp, <, 0, )]
[., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, exp, <]
[], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, exp, <, 0, ), {, field]
[), {, return, newInstance, (, this, ), ;, }, if, (, exp, <, 0, ), {, field, ., setIEEEFlagsBits, (]
[;, }, if, (, exp, <, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, Dfp, result]
[), ;, }, if, (, exp, <, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, Dfp]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), )]
[<, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, Dfp, result, =, newInstance, (, getZero, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), )]
[;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, =]
[), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,]
[., FLAG_INEXACT, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, =, dotrap, (, DfpField, .]
[;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;, }]
[), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;]
[=, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;, }, if, (]
[;, return, result, ;, }, if, (, exp, >=, mant, ., length, ), {, return, newInstance, (, this, ), ;]
[,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;, }, if, (, exp, >=, mant, ., length, )]
[., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;, }, if, (, exp, >=, mant, .]
[,, this, ,, result, ), ;, return, result, ;, }, if, (, exp, >=, mant, ., length, ), {, return]
[,, result, ), ;, return, result, ;, }, if, (, exp, >=, mant, ., length, ), {, return, newInstance, (]
[), ;, return, result, ;, }, if, (, exp, >=, mant, ., length, ), {, return, newInstance, (, this, )]
[;, }, if, (, exp, >=, mant, ., length, ), {, return, newInstance, (, this, ), ;, }, Dfp, result]
[), {, return, newInstance, (, this, ), ;, }, Dfp, result, =, newInstance, (, this, ), ;, for, (, int]
[>=, mant, ., length, ), {, return, newInstance, (, this, ), ;, }, Dfp, result, =, newInstance, (, this, )]
[), {, return, newInstance, (, this, ), ;, }, Dfp, result, =, newInstance, (, this, ), ;, for, (, int]
[., length, ), {, return, newInstance, (, this, ), ;, }, Dfp, result, =, newInstance, (, this, ), ;, for]
[;, }, Dfp, result, =, newInstance, (, this, ), ;, for, (, int, i, =, 0, ;, i, <, mant]
[), ;, }, Dfp, result, =, newInstance, (, this, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, -, result, ., exp, ;, i, ++]
[), ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, -, result, ., exp, ;, i]
[;, i, <, mant, ., length, -, result, ., exp, ;, i, ++, ), {, changed, |=, result, ., mant]
[;, i, ++, ), {, changed, |=, result, ., mant, [, i, ], !=, 0, ;, result, ., mant, []
[<, mant, ., length, -, result, ., exp, ;, i, ++, ), {, changed, |=, result, ., mant, [, i]
[;, i, ++, ), {, changed, |=, result, ., mant, [, i, ], !=, 0, ;, result, ., mant, []
[-, result, ., exp, ;, i, ++, ), {, changed, |=, result, ., mant, [, i, ], !=, 0, ;]
[., length, -, result, ., exp, ;, i, ++, ), {, changed, |=, result, ., mant, [, i, ], !=]
[;, i, ++, ), {, changed, |=, result, ., mant, [, i, ], !=, 0, ;, result, ., mant, []
[., exp, ;, i, ++, ), {, changed, |=, result, ., mant, [, i, ], !=, 0, ;, result, .]
[), {, changed, |=, result, ., mant, [, i, ], !=, 0, ;, result, ., mant, [, i, ], =]
[++, ), {, changed, |=, result, ., mant, [, i, ], !=, 0, ;, result, ., mant, [, i, ]]
[|=, result, ., mant, [, i, ], !=, 0, ;, result, ., mant, [, i, ], =, 0, ;, }]
[;, result, ., mant, [, i, ], =, 0, ;, }, if, (, changed, ), {, switch, (, rmode, )]
[!=, 0, ;, result, ., mant, [, i, ], =, 0, ;, }, if, (, changed, ), {, switch, (]
[[, i, ], !=, 0, ;, result, ., mant, [, i, ], =, 0, ;, }, if, (, changed, )]
[., mant, [, i, ], !=, 0, ;, result, ., mant, [, i, ], =, 0, ;, }, if, (]
[], !=, 0, ;, result, ., mant, [, i, ], =, 0, ;, }, if, (, changed, ), {, switch]
[;, result, ., mant, [, i, ], =, 0, ;, }, if, (, changed, ), {, switch, (, rmode, )]
[=, 0, ;, }, if, (, changed, ), {, switch, (, rmode, ), {, case, ROUND_FLOOR, :, if, (, result]
[[, i, ], =, 0, ;, }, if, (, changed, ), {, switch, (, rmode, ), {, case, ROUND_FLOOR, :]
[., mant, [, i, ], =, 0, ;, }, if, (, changed, ), {, switch, (, rmode, ), {, case]
[], =, 0, ;, }, if, (, changed, ), {, switch, (, rmode, ), {, case, ROUND_FLOOR, :, if, (]
[;, }, if, (, changed, ), {, switch, (, rmode, ), {, case, ROUND_FLOOR, :, if, (, result, ., sign]
[), {, switch, (, rmode, ), {, case, ROUND_FLOOR, :, if, (, result, ., sign, ==, -, 1, ), {]
[), {, case, ROUND_FLOOR, :, if, (, result, ., sign, ==, -, 1, ), {, result, =, result, ., add]
[:, if, (, result, ., sign, ==, -, 1, ), {, result, =, result, ., add, (, newInstance, (, -]
[), {, result, =, result, ., add, (, newInstance, (, -, 1, ), ), ;, }, break, ;, case, ROUND_CEIL]
[==, -, 1, ), {, result, =, result, ., add, (, newInstance, (, -, 1, ), ), ;, }, break]
[., sign, ==, -, 1, ), {, result, =, result, ., add, (, newInstance, (, -, 1, ), ), ;]
[), {, result, =, result, ., add, (, newInstance, (, -, 1, ), ), ;, }, break, ;, case, ROUND_CEIL]
[), {, result, =, result, ., add, (, newInstance, (, -, 1, ), ), ;, }, break, ;, case, ROUND_CEIL]
[=, result, ., add, (, newInstance, (, -, 1, ), ), ;, }, break, ;, case, ROUND_CEIL, :, if, (]
[;, }, break, ;, case, ROUND_CEIL, :, if, (, result, ., sign, ==, 1, ), {, result, =, result, .]
[., add, (, newInstance, (, -, 1, ), ), ;, }, break, ;, case, ROUND_CEIL, :, if, (, result, .]
[), ;, }, break, ;, case, ROUND_CEIL, :, if, (, result, ., sign, ==, 1, ), {, result, =, result]
[), ), ;, }, break, ;, case, ROUND_CEIL, :, if, (, result, ., sign, ==, 1, ), {, result, =]
[), ), ;, }, break, ;, case, ROUND_CEIL, :, if, (, result, ., sign, ==, 1, ), {, result, =]
[:, if, (, result, ., sign, ==, 1, ), {, result, =, result, ., add, (, getOne, (, ), )]
[), {, result, =, result, ., add, (, getOne, (, ), ), ;, }, break, ;, case, ROUND_HALF_EVEN, :, default]
[==, 1, ), {, result, =, result, ., add, (, getOne, (, ), ), ;, }, break, ;, case, ROUND_HALF_EVEN]
[., sign, ==, 1, ), {, result, =, result, ., add, (, getOne, (, ), ), ;, }, break, ;]
[), {, result, =, result, ., add, (, getOne, (, ), ), ;, }, break, ;, case, ROUND_HALF_EVEN, :, default]
[=, result, ., add, (, getOne, (, ), ), ;, }, break, ;, case, ROUND_HALF_EVEN, :, default, :, final, Dfp]
[;, }, break, ;, case, ROUND_HALF_EVEN, :, default, :, final, Dfp, half, =, newInstance, (, "0.5", ), ;, Dfp, a]
[., add, (, getOne, (, ), ), ;, }, break, ;, case, ROUND_HALF_EVEN, :, default, :, final, Dfp, half, =]
[), ;, }, break, ;, case, ROUND_HALF_EVEN, :, default, :, final, Dfp, half, =, newInstance, (, "0.5", ), ;, Dfp]
[:, default, :, final, Dfp, half, =, newInstance, (, "0.5", ), ;, Dfp, a, =, subtract, (, result, ), ;]
[;, Dfp, a, =, subtract, (, result, ), ;, a, ., sign, =, 1, ;, if, (, a, ., greaterThan]
[), ;, Dfp, a, =, subtract, (, result, ), ;, a, ., sign, =, 1, ;, if, (, a, .]
[;, a, ., sign, =, 1, ;, if, (, a, ., greaterThan, (, half, ), ), {, a, =, newInstance]
[), ;, a, ., sign, =, 1, ;, if, (, a, ., greaterThan, (, half, ), ), {, a, =]
[=, 1, ;, if, (, a, ., greaterThan, (, half, ), ), {, a, =, newInstance, (, getOne, (, )]
[., sign, =, 1, ;, if, (, a, ., greaterThan, (, half, ), ), {, a, =, newInstance, (, getOne]
[;, if, (, a, ., greaterThan, (, half, ), ), {, a, =, newInstance, (, getOne, (, ), ), ;]
[), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result, =, result]
[., greaterThan, (, half, ), ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =]
[), ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result, =]
[=, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result, =, result, ., add, (]
[;, a, ., sign, =, sign, ;, result, =, result, ., add, (, a, ), ;, }, if, (, a]
[), ;, a, ., sign, =, sign, ;, result, =, result, ., add, (, a, ), ;, }, if, (]
[=, sign, ;, result, =, result, ., add, (, a, ), ;, }, if, (, a, ., equals, (, half]
[., sign, =, sign, ;, result, =, result, ., add, (, a, ), ;, }, if, (, a, ., equals]
[;, result, =, result, ., add, (, a, ), ;, }, if, (, a, ., equals, (, half, ), &&]
[=, result, ., add, (, a, ), ;, }, if, (, a, ., equals, (, half, ), &&, result, .]
[;, }, if, (, a, ., equals, (, half, ), &&, result, ., exp, >, 0, &&, (, result, .]
[., add, (, a, ), ;, }, if, (, a, ., equals, (, half, ), &&, result, ., exp, >]
[), ;, }, if, (, a, ., equals, (, half, ), &&, result, ., exp, >, 0, &&, (, result]
[), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result, =, result]
[&&, (, result, ., mant, [, mant, ., length, -, result, ., exp, ], &, 1, ), !=, 0, )]
[&&, result, ., exp, >, 0, &&, (, result, ., mant, [, mant, ., length, -, result, ., exp, ]]
[., equals, (, half, ), &&, result, ., exp, >, 0, &&, (, result, ., mant, [, mant, ., length]
[), &&, result, ., exp, >, 0, &&, (, result, ., mant, [, mant, ., length, -, result, ., exp]
[&&, (, result, ., mant, [, mant, ., length, -, result, ., exp, ], &, 1, ), !=, 0, )]
[>, 0, &&, (, result, ., mant, [, mant, ., length, -, result, ., exp, ], &, 1, ), !=]
[., exp, >, 0, &&, (, result, ., mant, [, mant, ., length, -, result, ., exp, ], &, 1]
[&&, (, result, ., mant, [, mant, ., length, -, result, ., exp, ], &, 1, ), !=, 0, )]
[), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result, =, result]
[!=, 0, ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result]
[), !=, 0, ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;]
[&, 1, ), !=, 0, ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =]
[[, mant, ., length, -, result, ., exp, ], &, 1, ), !=, 0, ), {, a, =, newInstance, (]
[., mant, [, mant, ., length, -, result, ., exp, ], &, 1, ), !=, 0, ), {, a, =]
[], &, 1, ), !=, 0, ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign]
[-, result, ., exp, ], &, 1, ), !=, 0, ), {, a, =, newInstance, (, getOne, (, ), )]
[., length, -, result, ., exp, ], &, 1, ), !=, 0, ), {, a, =, newInstance, (, getOne, (]
[], &, 1, ), !=, 0, ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign]
[., exp, ], &, 1, ), !=, 0, ), {, a, =, newInstance, (, getOne, (, ), ), ;, a]
[), !=, 0, ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;]
[), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result, =, result]
[=, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result, =, result, ., add, (]
[;, a, ., sign, =, sign, ;, result, =, result, ., add, (, a, ), ;, }, break, ;, }]
[), ;, a, ., sign, =, sign, ;, result, =, result, ., add, (, a, ), ;, }, break, ;]
[=, sign, ;, result, =, result, ., add, (, a, ), ;, }, break, ;, }, field, ., setIEEEFlagsBits, (]
[., sign, =, sign, ;, result, =, result, ., add, (, a, ), ;, }, break, ;, }, field, .]
[;, result, =, result, ., add, (, a, ), ;, }, break, ;, }, field, ., setIEEEFlagsBits, (, DfpField, .]
[=, result, ., add, (, a, ), ;, }, break, ;, }, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[;, }, break, ;, }, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, .]
[., add, (, a, ), ;, }, break, ;, }, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result]
[), ;, }, break, ;, }, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField]
[;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;, }]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,]
[), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;]
[., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return]
[=, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;, }, return, result]
[;, return, result, ;, }, return, result, ;, }, public, int, intValue, (, ), {, Dfp, rounded, ;, int, result]
[,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;, }, return, result, ;, }, public, int, intValue, (]
[., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;, }, return, result, ;, }, public, int]
[,, this, ,, result, ), ;, return, result, ;, }, return, result, ;, }, public, int, intValue, (, ), {]
[,, result, ), ;, return, result, ;, }, return, result, ;, }, public, int, intValue, (, ), {, Dfp, rounded]
[), ;, return, result, ;, }, return, result, ;, }, public, int, intValue, (, ), {, Dfp, rounded, ;, int]
[;, }, return, result, ;, }, public, int, intValue, (, ), {, Dfp, rounded, ;, int, result, =, 0, ;]
[;, }, public, int, intValue, (, ), {, Dfp, rounded, ;, int, result, =, 0, ;, rounded, =, rint, (]
[;, rounded, =, rint, (, ), ;, if, (, rounded, ., greaterThan, (, newInstance, (, 2147483647, ), ), ), {]
[=, rint, (, ), ;, if, (, rounded, ., greaterThan, (, newInstance, (, 2147483647, ), ), ), {, return, 2147483647]
[;, if, (, rounded, ., greaterThan, (, newInstance, (, 2147483647, ), ), ), {, return, 2147483647, ;, }, if, (]
[), {, return, 2147483647, ;, }, if, (, rounded, ., lessThan, (, newInstance, (, -, 2147483648, ), ), ), {]
[., greaterThan, (, newInstance, (, 2147483647, ), ), ), {, return, 2147483647, ;, }, if, (, rounded, ., lessThan, (]
[), ), {, return, 2147483647, ;, }, if, (, rounded, ., lessThan, (, newInstance, (, -, 2147483648, ), ), )]
[), ), ), {, return, 2147483647, ;, }, if, (, rounded, ., lessThan, (, newInstance, (, -, 2147483648, ), )]
[;, }, if, (, rounded, ., lessThan, (, newInstance, (, -, 2147483648, ), ), ), {, return, -, 2147483648, ;]
[), {, return, -, 2147483648, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=]
[., lessThan, (, newInstance, (, -, 2147483648, ), ), ), {, return, -, 2147483648, ;, }, for, (, int, i]
[), ), {, return, -, 2147483648, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i]
[), ), ), {, return, -, 2147483648, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;]
[), ), ), {, return, -, 2147483648, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;]
[;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, mant, ., length, -, rounded]
[;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, mant, ., length, -, rounded]
[;, i, >=, mant, ., length, -, rounded, ., exp, ;, i, --, ), {, result, =, result, *, RADIX]
[-, 1, ;, i, >=, mant, ., length, -, rounded, ., exp, ;, i, --, ), {, result, =, result]
[., length, -, 1, ;, i, >=, mant, ., length, -, rounded, ., exp, ;, i, --, ), {, result]
[;, i, >=, mant, ., length, -, rounded, ., exp, ;, i, --, ), {, result, =, result, *, RADIX]
[;, i, --, ), {, result, =, result, *, RADIX, +, rounded, ., mant, [, i, ], ;, }, if]
[>=, mant, ., length, -, rounded, ., exp, ;, i, --, ), {, result, =, result, *, RADIX, +, rounded]
[;, i, --, ), {, result, =, result, *, RADIX, +, rounded, ., mant, [, i, ], ;, }, if]
[-, rounded, ., exp, ;, i, --, ), {, result, =, result, *, RADIX, +, rounded, ., mant, [, i]
[., length, -, rounded, ., exp, ;, i, --, ), {, result, =, result, *, RADIX, +, rounded, ., mant]
[;, i, --, ), {, result, =, result, *, RADIX, +, rounded, ., mant, [, i, ], ;, }, if]
[., exp, ;, i, --, ), {, result, =, result, *, RADIX, +, rounded, ., mant, [, i, ], ;]
[), {, result, =, result, *, RADIX, +, rounded, ., mant, [, i, ], ;, }, if, (, rounded, .]
[--, ), {, result, =, result, *, RADIX, +, rounded, ., mant, [, i, ], ;, }, if, (, rounded]
[=, result, *, RADIX, +, rounded, ., mant, [, i, ], ;, }, if, (, rounded, ., sign, ==, -]
[;, }, if, (, rounded, ., sign, ==, -, 1, ), {, result, =, -, result, ;, }, return, result]
[+, rounded, ., mant, [, i, ], ;, }, if, (, rounded, ., sign, ==, -, 1, ), {, result]
[*, RADIX, +, rounded, ., mant, [, i, ], ;, }, if, (, rounded, ., sign, ==, -, 1, )]
[+, rounded, ., mant, [, i, ], ;, }, if, (, rounded, ., sign, ==, -, 1, ), {, result]
[;, }, if, (, rounded, ., sign, ==, -, 1, ), {, result, =, -, result, ;, }, return, result]
[[, i, ], ;, }, if, (, rounded, ., sign, ==, -, 1, ), {, result, =, -, result, ;]
[., mant, [, i, ], ;, }, if, (, rounded, ., sign, ==, -, 1, ), {, result, =, -]
[], ;, }, if, (, rounded, ., sign, ==, -, 1, ), {, result, =, -, result, ;, }, return]
[), {, result, =, -, result, ;, }, return, result, ;, }, public, int, log10K, (, ), {, return, exp]
[==, -, 1, ), {, result, =, -, result, ;, }, return, result, ;, }, public, int, log10K, (, )]
[., sign, ==, -, 1, ), {, result, =, -, result, ;, }, return, result, ;, }, public, int, log10K]
[), {, result, =, -, result, ;, }, return, result, ;, }, public, int, log10K, (, ), {, return, exp]
[), {, result, =, -, result, ;, }, return, result, ;, }, public, int, log10K, (, ), {, return, exp]
[=, -, result, ;, }, return, result, ;, }, public, int, log10K, (, ), {, return, exp, -, 1, ;]
[;, }, return, result, ;, }, public, int, log10K, (, ), {, return, exp, -, 1, ;, }, public, Dfp]
[;, }, return, result, ;, }, public, int, log10K, (, ), {, return, exp, -, 1, ;, }, public, Dfp]
[;, }, public, int, log10K, (, ), {, return, exp, -, 1, ;, }, public, Dfp, power10K, (, final, int]
[;, }, public, Dfp, power10K, (, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), )]
[-, 1, ;, }, public, Dfp, power10K, (, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (]
[;, }, public, Dfp, power10K, (, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), )]
[;, d, ., exp, =, e, +, 1, ;, return, d, ;, }, public, int, intLog10, (, ), {, if]
[), ;, d, ., exp, =, e, +, 1, ;, return, d, ;, }, public, int, intLog10, (, ), {]
[=, e, +, 1, ;, return, d, ;, }, public, int, intLog10, (, ), {, if, (, mant, [, mant]
[., exp, =, e, +, 1, ;, return, d, ;, }, public, int, intLog10, (, ), {, if, (, mant]
[;, return, d, ;, }, public, int, intLog10, (, ), {, if, (, mant, [, mant, ., length, -, 1]
[+, 1, ;, return, d, ;, }, public, int, intLog10, (, ), {, if, (, mant, [, mant, ., length]
[;, return, d, ;, }, public, int, intLog10, (, ), {, if, (, mant, [, mant, ., length, -, 1]
[;, }, public, int, intLog10, (, ), {, if, (, mant, [, mant, ., length, -, 1, ], >, 1000]
[), {, return, exp, *, 4, -, 1, ;, }, if, (, mant, [, mant, ., length, -, 1, ]]
[>, 1000, ), {, return, exp, *, 4, -, 1, ;, }, if, (, mant, [, mant, ., length, -]
[[, mant, ., length, -, 1, ], >, 1000, ), {, return, exp, *, 4, -, 1, ;, }, if]
[], >, 1000, ), {, return, exp, *, 4, -, 1, ;, }, if, (, mant, [, mant, ., length]
[-, 1, ], >, 1000, ), {, return, exp, *, 4, -, 1, ;, }, if, (, mant, [, mant]
[., length, -, 1, ], >, 1000, ), {, return, exp, *, 4, -, 1, ;, }, if, (, mant]
[], >, 1000, ), {, return, exp, *, 4, -, 1, ;, }, if, (, mant, [, mant, ., length]
[), {, return, exp, *, 4, -, 1, ;, }, if, (, mant, [, mant, ., length, -, 1, ]]
[;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 100, ), {, return, exp, *, 4]
[-, 1, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 100, ), {, return, exp]
[*, 4, -, 1, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 100, ), {]
[-, 1, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 100, ), {, return, exp]
[;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 100, ), {, return, exp, *, 4]
[), {, return, exp, *, 4, -, 2, ;, }, if, (, mant, [, mant, ., length, -, 1, ]]
[>, 100, ), {, return, exp, *, 4, -, 2, ;, }, if, (, mant, [, mant, ., length, -]
[[, mant, ., length, -, 1, ], >, 100, ), {, return, exp, *, 4, -, 2, ;, }, if]
[], >, 100, ), {, return, exp, *, 4, -, 2, ;, }, if, (, mant, [, mant, ., length]
[-, 1, ], >, 100, ), {, return, exp, *, 4, -, 2, ;, }, if, (, mant, [, mant]
[., length, -, 1, ], >, 100, ), {, return, exp, *, 4, -, 2, ;, }, if, (, mant]
[], >, 100, ), {, return, exp, *, 4, -, 2, ;, }, if, (, mant, [, mant, ., length]
[), {, return, exp, *, 4, -, 2, ;, }, if, (, mant, [, mant, ., length, -, 1, ]]
[;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 10, ), {, return, exp, *, 4]
[-, 2, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 10, ), {, return, exp]
[*, 4, -, 2, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 10, ), {]
[-, 2, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 10, ), {, return, exp]
[;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 10, ), {, return, exp, *, 4]
[), {, return, exp, *, 4, -, 3, ;, }, return, exp, *, 4, -, 4, ;, }, public, Dfp]
[>, 10, ), {, return, exp, *, 4, -, 3, ;, }, return, exp, *, 4, -, 4, ;, }]
[[, mant, ., length, -, 1, ], >, 10, ), {, return, exp, *, 4, -, 3, ;, }, return]
[], >, 10, ), {, return, exp, *, 4, -, 3, ;, }, return, exp, *, 4, -, 4, ;]
[-, 1, ], >, 10, ), {, return, exp, *, 4, -, 3, ;, }, return, exp, *, 4, -]
[., length, -, 1, ], >, 10, ), {, return, exp, *, 4, -, 3, ;, }, return, exp, *]
[], >, 10, ), {, return, exp, *, 4, -, 3, ;, }, return, exp, *, 4, -, 4, ;]
[), {, return, exp, *, 4, -, 3, ;, }, return, exp, *, 4, -, 4, ;, }, public, Dfp]
[;, }, return, exp, *, 4, -, 4, ;, }, public, Dfp, power10, (, final, int, e, ), {, Dfp]
[-, 3, ;, }, return, exp, *, 4, -, 4, ;, }, public, Dfp, power10, (, final, int, e, )]
[*, 4, -, 3, ;, }, return, exp, *, 4, -, 4, ;, }, public, Dfp, power10, (, final, int]
[-, 3, ;, }, return, exp, *, 4, -, 4, ;, }, public, Dfp, power10, (, final, int, e, )]
[;, }, return, exp, *, 4, -, 4, ;, }, public, Dfp, power10, (, final, int, e, ), {, Dfp]
[;, }, public, Dfp, power10, (, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), )]
[-, 4, ;, }, public, Dfp, power10, (, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (]
[*, 4, -, 4, ;, }, public, Dfp, power10, (, final, int, e, ), {, Dfp, d, =, newInstance, (]
[-, 4, ;, }, public, Dfp, power10, (, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (]
[;, }, public, Dfp, power10, (, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), )]
[;, if, (, e, >=, 0, ), {, d, ., exp, =, e, /, 4, +, 1, ;, }, else]
[), ;, if, (, e, >=, 0, ), {, d, ., exp, =, e, /, 4, +, 1, ;, }]
[), {, d, ., exp, =, e, /, 4, +, 1, ;, }, else, {, d, ., exp, =, (]
[>=, 0, ), {, d, ., exp, =, e, /, 4, +, 1, ;, }, else, {, d, ., exp]
[), {, d, ., exp, =, e, /, 4, +, 1, ;, }, else, {, d, ., exp, =, (]
[=, e, /, 4, +, 1, ;, }, else, {, d, ., exp, =, (, e, +, 1, ), /]
[., exp, =, e, /, 4, +, 1, ;, }, else, {, d, ., exp, =, (, e, +, 1]
[;, }, else, {, d, ., exp, =, (, e, +, 1, ), /, 4, ;, }, switch, (, (]
[+, 1, ;, }, else, {, d, ., exp, =, (, e, +, 1, ), /, 4, ;, }, switch]
[/, 4, +, 1, ;, }, else, {, d, ., exp, =, (, e, +, 1, ), /, 4, ;]
[+, 1, ;, }, else, {, d, ., exp, =, (, e, +, 1, ), /, 4, ;, }, switch]
[;, }, else, {, d, ., exp, =, (, e, +, 1, ), /, 4, ;, }, switch, (, (]
[=, (, e, +, 1, ), /, 4, ;, }, switch, (, (, e, %, 4, +, 4, ), %]
[., exp, =, (, e, +, 1, ), /, 4, ;, }, switch, (, (, e, %, 4, +, 4]
[;, }, switch, (, (, e, %, 4, +, 4, ), %, 4, ), {, case, 0, :, break, ;]
[/, 4, ;, }, switch, (, (, e, %, 4, +, 4, ), %, 4, ), {, case, 0, :]
[), /, 4, ;, }, switch, (, (, e, %, 4, +, 4, ), %, 4, ), {, case, 0]
[+, 1, ), /, 4, ;, }, switch, (, (, e, %, 4, +, 4, ), %, 4, ), {]
[), /, 4, ;, }, switch, (, (, e, %, 4, +, 4, ), %, 4, ), {, case, 0]
[;, }, switch, (, (, e, %, 4, +, 4, ), %, 4, ), {, case, 0, :, break, ;]
[), {, case, 0, :, break, ;, case, 1, :, d, =, d, ., multiply, (, 10, ), ;, break]
[%, 4, ), {, case, 0, :, break, ;, case, 1, :, d, =, d, ., multiply, (, 10, )]
[), %, 4, ), {, case, 0, :, break, ;, case, 1, :, d, =, d, ., multiply, (, 10]
[+, 4, ), %, 4, ), {, case, 0, :, break, ;, case, 1, :, d, =, d, ., multiply]
[%, 4, +, 4, ), %, 4, ), {, case, 0, :, break, ;, case, 1, :, d, =, d]
[+, 4, ), %, 4, ), {, case, 0, :, break, ;, case, 1, :, d, =, d, ., multiply]
[), %, 4, ), {, case, 0, :, break, ;, case, 1, :, d, =, d, ., multiply, (, 10]
[), {, case, 0, :, break, ;, case, 1, :, d, =, d, ., multiply, (, 10, ), ;, break]
[:, break, ;, case, 1, :, d, =, d, ., multiply, (, 10, ), ;, break, ;, case, 2, :]
[:, d, =, d, ., multiply, (, 10, ), ;, break, ;, case, 2, :, d, =, d, ., multiply]
[=, d, ., multiply, (, 10, ), ;, break, ;, case, 2, :, d, =, d, ., multiply, (, 100]
[;, break, ;, case, 2, :, d, =, d, ., multiply, (, 100, ), ;, break, ;, default, :, d]
[., multiply, (, 10, ), ;, break, ;, case, 2, :, d, =, d, ., multiply, (, 100, ), ;]
[), ;, break, ;, case, 2, :, d, =, d, ., multiply, (, 100, ), ;, break, ;, default, :]
[:, d, =, d, ., multiply, (, 100, ), ;, break, ;, default, :, d, =, d, ., multiply, (]
[=, d, ., multiply, (, 100, ), ;, break, ;, default, :, d, =, d, ., multiply, (, 1000, )]
[;, break, ;, default, :, d, =, d, ., multiply, (, 1000, ), ;, }, return, d, ;, }, protected]
[., multiply, (, 100, ), ;, break, ;, default, :, d, =, d, ., multiply, (, 1000, ), ;, }]
[), ;, break, ;, default, :, d, =, d, ., multiply, (, 1000, ), ;, }, return, d, ;, }]
[=, d, ., multiply, (, 1000, ), ;, }, return, d, ;, }, protected, int, complement, (, int, extra, )]
[;, }, return, d, ;, }, protected, int, complement, (, int, extra, ), {, extra, =, RADIX, -, extra, ;]
[., multiply, (, 1000, ), ;, }, return, d, ;, }, protected, int, complement, (, int, extra, ), {, extra]
[), ;, }, return, d, ;, }, protected, int, complement, (, int, extra, ), {, extra, =, RADIX, -, extra]
[;, }, protected, int, complement, (, int, extra, ), {, extra, =, RADIX, -, extra, ;, for, (, int, i]
[=, RADIX, -, extra, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, mant, []
[-, extra, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, mant, []
[;, i, <, mant, ., length, ;, i, ++, ), {, mant, [, i, ], =, RADIX, -, mant, []
[;, i, ++, ), {, mant, [, i, ], =, RADIX, -, mant, [, i, ], -, 1, ;, }]
[<, mant, ., length, ;, i, ++, ), {, mant, [, i, ], =, RADIX, -, mant, [, i, ]]
[;, i, ++, ), {, mant, [, i, ], =, RADIX, -, mant, [, i, ], -, 1, ;, }]
[., length, ;, i, ++, ), {, mant, [, i, ], =, RADIX, -, mant, [, i, ], -, 1]
[), {, mant, [, i, ], =, RADIX, -, mant, [, i, ], -, 1, ;, }, int, rh, =]
[++, ), {, mant, [, i, ], =, RADIX, -, mant, [, i, ], -, 1, ;, }, int, rh]
[=, RADIX, -, mant, [, i, ], -, 1, ;, }, int, rh, =, extra, /, RADIX, ;, extra, =]
[[, i, ], =, RADIX, -, mant, [, i, ], -, 1, ;, }, int, rh, =, extra, /, RADIX]
[], =, RADIX, -, mant, [, i, ], -, 1, ;, }, int, rh, =, extra, /, RADIX, ;, extra]
[;, }, int, rh, =, extra, /, RADIX, ;, extra, =, extra, -, rh, *, RADIX, ;, for, (, int]
[-, 1, ;, }, int, rh, =, extra, /, RADIX, ;, extra, =, extra, -, rh, *, RADIX, ;, for]
[-, mant, [, i, ], -, 1, ;, }, int, rh, =, extra, /, RADIX, ;, extra, =, extra, -]
[-, 1, ;, }, int, rh, =, extra, /, RADIX, ;, extra, =, extra, -, rh, *, RADIX, ;, for]
[[, i, ], -, 1, ;, }, int, rh, =, extra, /, RADIX, ;, extra, =, extra, -, rh, *]
[], -, 1, ;, }, int, rh, =, extra, /, RADIX, ;, extra, =, extra, -, rh, *, RADIX, ;]
[;, }, int, rh, =, extra, /, RADIX, ;, extra, =, extra, -, rh, *, RADIX, ;, for, (, int]
[;, extra, =, extra, -, rh, *, RADIX, ;, for, (, int, i, =, 0, ;, i, <, mant, .]
[/, RADIX, ;, extra, =, extra, -, rh, *, RADIX, ;, for, (, int, i, =, 0, ;, i, <]
[;, extra, =, extra, -, rh, *, RADIX, ;, for, (, int, i, =, 0, ;, i, <, mant, .]
[=, extra, -, rh, *, RADIX, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int]
[-, rh, *, RADIX, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int]
[*, RADIX, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int]
[;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +]
[;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /]
[<, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;]
[;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /]
[., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =]
[), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant]
[++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, return]
[+, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;]
[[, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh]
[], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX]
[;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, return]
[=, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, return, extra, ;]
[;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, return, extra, ;, }, public, Dfp, add]
[/, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, return, extra, ;, }, public]
[;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, return, extra, ;, }, public, Dfp, add]
[=, r, -, rh, *, RADIX, ;, }, return, extra, ;, }, public, Dfp, add, (, final, Dfp, x, )]
[[, i, ], =, r, -, rh, *, RADIX, ;, }, return, extra, ;, }, public, Dfp, add, (, final]
[], =, r, -, rh, *, RADIX, ;, }, return, extra, ;, }, public, Dfp, add, (, final, Dfp, x]
[;, }, return, extra, ;, }, public, Dfp, add, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits]
[-, rh, *, RADIX, ;, }, return, extra, ;, }, public, Dfp, add, (, final, Dfp, x, ), {, if]
[;, }, return, extra, ;, }, public, Dfp, add, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits]
[*, RADIX, ;, }, return, extra, ;, }, public, Dfp, add, (, final, Dfp, x, ), {, if, (, field]
[;, }, return, extra, ;, }, public, Dfp, add, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits]
[;, }, public, Dfp, add, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[!=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final]
[., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, .]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance]
[., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result]
[;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN]
[;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, )]
[), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result]
[=, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, if, (]
[., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, }]
[;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, if, (, nans, !=]
[;, }, if, (, nans, !=, FINITE, ||, x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, )]
[,, ADD_TRAP, ,, x, ,, result, ), ;, }, if, (, nans, !=, FINITE, ||, x, ., nans, !=, FINITE]
[., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, if, (, nans, !=, FINITE, ||, x, ., nans]
[,, x, ,, result, ), ;, }, if, (, nans, !=, FINITE, ||, x, ., nans, !=, FINITE, ), {]
[,, result, ), ;, }, if, (, nans, !=, FINITE, ||, x, ., nans, !=, FINITE, ), {, if, (]
[), ;, }, if, (, nans, !=, FINITE, ||, x, ., nans, !=, FINITE, ), {, if, (, isNaN, (]
[), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, x, ., isNaN, (, )]
[||, x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if]
[!=, FINITE, ||, x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;]
[||, x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if]
[), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, x, ., isNaN, (, )]
[!=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, x, ., isNaN]
[., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, x]
[), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, x, ., isNaN, (, )]
[), {, return, this, ;, }, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if]
[;, }, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE]
[), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, ), {, return]
[., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==]
[;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, ), {, return, this, ;, }, if]
[), {, return, this, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, return]
[&&, x, ., nans, ==, FINITE, ), {, return, this, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[==, INFINITE, &&, x, ., nans, ==, FINITE, ), {, return, this, ;, }, if, (, x, ., nans, ==]
[&&, x, ., nans, ==, FINITE, ), {, return, this, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[), {, return, this, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, return]
[==, FINITE, ), {, return, this, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, )]
[., nans, ==, FINITE, ), {, return, this, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==]
[), {, return, this, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, return]
[;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, return, x, ;, }, if]
[), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==]
[&&, nans, ==, FINITE, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==]
[==, INFINITE, &&, nans, ==, FINITE, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, return, x, ;, }, if, (, x, ., nans, ==]
[&&, nans, ==, FINITE, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==]
[), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==]
[==, FINITE, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&]
[), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==]
[;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==, x, ., sign, )]
[), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, !=]
[&&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[&&, nans, ==, INFINITE, &&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (, x, .]
[==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (]
[., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==, x, ., sign, ), {, return, x, ;, }]
[&&, nans, ==, INFINITE, &&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (, x, .]
[&&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[==, INFINITE, &&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (, x, ., nans, ==]
[&&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, !=]
[==, x, ., sign, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==]
[), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, !=]
[., sign, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&]
[;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, !=, x, ., sign, )]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), )]
[&&, sign, !=, x, ., sign, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =]
[&&, nans, ==, INFINITE, &&, sign, !=, x, ., sign, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[==, INFINITE, &&, nans, ==, INFINITE, &&, sign, !=, x, ., sign, ), {, field, ., setIEEEFlagsBits, (, DfpField, .]
[., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, !=, x, ., sign, ), {, field, ., setIEEEFlagsBits, (]
[&&, nans, ==, INFINITE, &&, sign, !=, x, ., sign, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[&&, sign, !=, x, ., sign, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =]
[==, INFINITE, &&, sign, !=, x, ., sign, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp]
[&&, sign, !=, x, ., sign, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), )]
[!=, x, ., sign, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), )]
[., sign, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (]
[;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, .]
[), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =]
[., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;]
[;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,]
[=, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, return, result]
[., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;]
[;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, return, result, ;, }]
[=, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, return, result, ;, }, }, Dfp]
[;, return, result, ;, }, }, Dfp, a, =, newInstance, (, this, ), ;, Dfp, b, =, newInstance, (, x]
[,, ADD_TRAP, ,, x, ,, result, ), ;, return, result, ;, }, }, Dfp, a, =, newInstance, (, this, )]
[., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, return, result, ;, }, }, Dfp, a, =, newInstance, (]
[,, x, ,, result, ), ;, return, result, ;, }, }, Dfp, a, =, newInstance, (, this, ), ;, Dfp]
[,, result, ), ;, return, result, ;, }, }, Dfp, a, =, newInstance, (, this, ), ;, Dfp, b, =]
[), ;, return, result, ;, }, }, Dfp, a, =, newInstance, (, this, ), ;, Dfp, b, =, newInstance, (]
[;, }, }, Dfp, a, =, newInstance, (, this, ), ;, Dfp, b, =, newInstance, (, x, ), ;, Dfp]
[;, Dfp, b, =, newInstance, (, x, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, final]
[), ;, Dfp, b, =, newInstance, (, x, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, final, byte, asign, =, a, ., sign, ;, final]
[), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, final, byte, asign, =, a, ., sign, ;]
[;, final, byte, asign, =, a, ., sign, ;, final, byte, bsign, =, b, ., sign, ;, a, ., sign]
[), ;, final, byte, asign, =, a, ., sign, ;, final, byte, bsign, =, b, ., sign, ;, a, .]
[;, final, byte, bsign, =, b, ., sign, ;, a, ., sign, =, 1, ;, b, ., sign, =, 1]
[., sign, ;, final, byte, bsign, =, b, ., sign, ;, a, ., sign, =, 1, ;, b, ., sign]
[;, a, ., sign, =, 1, ;, b, ., sign, =, 1, ;, byte, rsign, =, bsign, ;, if, (]
[., sign, ;, a, ., sign, =, 1, ;, b, ., sign, =, 1, ;, byte, rsign, =, bsign, ;]
[=, 1, ;, b, ., sign, =, 1, ;, byte, rsign, =, bsign, ;, if, (, compare, (, a, ,]
[., sign, =, 1, ;, b, ., sign, =, 1, ;, byte, rsign, =, bsign, ;, if, (, compare, (]
[;, b, ., sign, =, 1, ;, byte, rsign, =, bsign, ;, if, (, compare, (, a, ,, b, )]
[=, 1, ;, byte, rsign, =, bsign, ;, if, (, compare, (, a, ,, b, ), >, 0, ), {]
[., sign, =, 1, ;, byte, rsign, =, bsign, ;, if, (, compare, (, a, ,, b, ), >, 0]
[;, byte, rsign, =, bsign, ;, if, (, compare, (, a, ,, b, ), >, 0, ), {, rsign, =]
[;, if, (, compare, (, a, ,, b, ), >, 0, ), {, rsign, =, asign, ;, }, if, (]
[), {, rsign, =, asign, ;, }, if, (, b, ., mant, [, mant, ., length, -, 1, ], ==]
[>, 0, ), {, rsign, =, asign, ;, }, if, (, b, ., mant, [, mant, ., length, -, 1]
[,, b, ), >, 0, ), {, rsign, =, asign, ;, }, if, (, b, ., mant, [, mant, .]
[), >, 0, ), {, rsign, =, asign, ;, }, if, (, b, ., mant, [, mant, ., length, -]
[), {, rsign, =, asign, ;, }, if, (, b, ., mant, [, mant, ., length, -, 1, ], ==]
[=, asign, ;, }, if, (, b, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[;, }, if, (, b, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, b, .]
[), {, b, ., exp, =, a, ., exp, ;, }, if, (, a, ., mant, [, mant, ., length]
[==, 0, ), {, b, ., exp, =, a, ., exp, ;, }, if, (, a, ., mant, [, mant]
[[, mant, ., length, -, 1, ], ==, 0, ), {, b, ., exp, =, a, ., exp, ;, }]
[., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, b, ., exp, =, a, ., exp]
[], ==, 0, ), {, b, ., exp, =, a, ., exp, ;, }, if, (, a, ., mant, []
[-, 1, ], ==, 0, ), {, b, ., exp, =, a, ., exp, ;, }, if, (, a, .]
[., length, -, 1, ], ==, 0, ), {, b, ., exp, =, a, ., exp, ;, }, if, (]
[], ==, 0, ), {, b, ., exp, =, a, ., exp, ;, }, if, (, a, ., mant, []
[), {, b, ., exp, =, a, ., exp, ;, }, if, (, a, ., mant, [, mant, ., length]
[=, a, ., exp, ;, }, if, (, a, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[., exp, =, a, ., exp, ;, }, if, (, a, ., mant, [, mant, ., length, -, 1, ]]
[;, }, if, (, a, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, a, .]
[., exp, ;, }, if, (, a, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[), {, a, ., exp, =, b, ., exp, ;, }, int, aextradigit, =, 0, ;, int, bextradigit, =, 0]
[==, 0, ), {, a, ., exp, =, b, ., exp, ;, }, int, aextradigit, =, 0, ;, int, bextradigit]
[[, mant, ., length, -, 1, ], ==, 0, ), {, a, ., exp, =, b, ., exp, ;, }]
[., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, a, ., exp, =, b, ., exp]
[], ==, 0, ), {, a, ., exp, =, b, ., exp, ;, }, int, aextradigit, =, 0, ;, int]
[-, 1, ], ==, 0, ), {, a, ., exp, =, b, ., exp, ;, }, int, aextradigit, =, 0]
[., length, -, 1, ], ==, 0, ), {, a, ., exp, =, b, ., exp, ;, }, int, aextradigit]
[], ==, 0, ), {, a, ., exp, =, b, ., exp, ;, }, int, aextradigit, =, 0, ;, int]
[), {, a, ., exp, =, b, ., exp, ;, }, int, aextradigit, =, 0, ;, int, bextradigit, =, 0]
[=, b, ., exp, ;, }, int, aextradigit, =, 0, ;, int, bextradigit, =, 0, ;, if, (, a, .]
[., exp, =, b, ., exp, ;, }, int, aextradigit, =, 0, ;, int, bextradigit, =, 0, ;, if, (]
[;, }, int, aextradigit, =, 0, ;, int, bextradigit, =, 0, ;, if, (, a, ., exp, <, b, .]
[., exp, ;, }, int, aextradigit, =, 0, ;, int, bextradigit, =, 0, ;, if, (, a, ., exp, <]
[;, int, bextradigit, =, 0, ;, if, (, a, ., exp, <, b, ., exp, ), {, aextradigit, =, a]
[;, if, (, a, ., exp, <, b, ., exp, ), {, aextradigit, =, a, ., align, (, b, .]
[), {, aextradigit, =, a, ., align, (, b, ., exp, ), ;, }, else, {, bextradigit, =, b, .]
[<, b, ., exp, ), {, aextradigit, =, a, ., align, (, b, ., exp, ), ;, }, else, {]
[., exp, <, b, ., exp, ), {, aextradigit, =, a, ., align, (, b, ., exp, ), ;, }]
[), {, aextradigit, =, a, ., align, (, b, ., exp, ), ;, }, else, {, bextradigit, =, b, .]
[., exp, ), {, aextradigit, =, a, ., align, (, b, ., exp, ), ;, }, else, {, bextradigit, =]
[=, a, ., align, (, b, ., exp, ), ;, }, else, {, bextradigit, =, b, ., align, (, a]
[;, }, else, {, bextradigit, =, b, ., align, (, a, ., exp, ), ;, }, if, (, asign, !=]
[., align, (, b, ., exp, ), ;, }, else, {, bextradigit, =, b, ., align, (, a, ., exp]
[), ;, }, else, {, bextradigit, =, b, ., align, (, a, ., exp, ), ;, }, if, (, asign]
[., exp, ), ;, }, else, {, bextradigit, =, b, ., align, (, a, ., exp, ), ;, }, if]
[=, b, ., align, (, a, ., exp, ), ;, }, if, (, asign, !=, bsign, ), {, if, (]
[;, }, if, (, asign, !=, bsign, ), {, if, (, asign, ==, rsign, ), {, bextradigit, =, b, .]
[., align, (, a, ., exp, ), ;, }, if, (, asign, !=, bsign, ), {, if, (, asign, ==]
[), ;, }, if, (, asign, !=, bsign, ), {, if, (, asign, ==, rsign, ), {, bextradigit, =, b]
[., exp, ), ;, }, if, (, asign, !=, bsign, ), {, if, (, asign, ==, rsign, ), {, bextradigit]
[), {, if, (, asign, ==, rsign, ), {, bextradigit, =, b, ., complement, (, bextradigit, ), ;, }, else]
[!=, bsign, ), {, if, (, asign, ==, rsign, ), {, bextradigit, =, b, ., complement, (, bextradigit, ), ;]
[), {, if, (, asign, ==, rsign, ), {, bextradigit, =, b, ., complement, (, bextradigit, ), ;, }, else]
[), {, bextradigit, =, b, ., complement, (, bextradigit, ), ;, }, else, {, aextradigit, =, a, ., complement, (]
[==, rsign, ), {, bextradigit, =, b, ., complement, (, bextradigit, ), ;, }, else, {, aextradigit, =, a, .]
[), {, bextradigit, =, b, ., complement, (, bextradigit, ), ;, }, else, {, aextradigit, =, a, ., complement, (]
[=, b, ., complement, (, bextradigit, ), ;, }, else, {, aextradigit, =, a, ., complement, (, aextradigit, ), ;]
[;, }, else, {, aextradigit, =, a, ., complement, (, aextradigit, ), ;, }, }, int, rh, =, 0, ;]
[., complement, (, bextradigit, ), ;, }, else, {, aextradigit, =, a, ., complement, (, aextradigit, ), ;, }, }]
[), ;, }, else, {, aextradigit, =, a, ., complement, (, aextradigit, ), ;, }, }, int, rh, =, 0]
[=, a, ., complement, (, aextradigit, ), ;, }, }, int, rh, =, 0, ;, for, (, int, i, =]
[;, }, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length]
[., complement, (, aextradigit, ), ;, }, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, .]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int]
[;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, a, ., mant, [, i]
[;, i, ++, ), {, final, int, r, =, a, ., mant, [, i, ], +, b, ., mant, []
[<, mant, ., length, ;, i, ++, ), {, final, int, r, =, a, ., mant, [, i, ], +]
[;, i, ++, ), {, final, int, r, =, a, ., mant, [, i, ], +, b, ., mant, []
[., length, ;, i, ++, ), {, final, int, r, =, a, ., mant, [, i, ], +, b, .]
[), {, final, int, r, =, a, ., mant, [, i, ], +, b, ., mant, [, i, ], +]
[++, ), {, final, int, r, =, a, ., mant, [, i, ], +, b, ., mant, [, i, ]]
[;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;]
[+, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *]
[+, b, ., mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, []
[[, i, ], +, b, ., mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, result]
[., mant, [, i, ], +, b, ., mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX]
[], +, b, ., mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant]
[+, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *]
[[, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r]
[., mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ]]
[], +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh]
[;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;]
[=, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, result]
[;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, result, ., exp, =, a]
[/, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, result, ., exp]
[;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, result, ., exp, =, a]
[=, r, -, rh, *, RADIX, ;, }, result, ., exp, =, a, ., exp, ;, result, ., sign, =]
[[, i, ], =, r, -, rh, *, RADIX, ;, }, result, ., exp, =, a, ., exp, ;, result]
[., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, result, ., exp, =, a, ., exp]
[], =, r, -, rh, *, RADIX, ;, }, result, ., exp, =, a, ., exp, ;, result, ., sign]
[;, }, result, ., exp, =, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (, rh, !=]
[-, rh, *, RADIX, ;, }, result, ., exp, =, a, ., exp, ;, result, ., sign, =, rsign, ;]
[;, }, result, ., exp, =, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (, rh, !=]
[*, RADIX, ;, }, result, ., exp, =, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (]
[;, }, result, ., exp, =, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (, rh, !=]
[=, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (, rh, !=, 0, &&, (, asign, ==]
[., exp, =, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (, rh, !=, 0, &&, (]
[;, result, ., sign, =, rsign, ;, if, (, rh, !=, 0, &&, (, asign, ==, bsign, ), ), {]
[., exp, ;, result, ., sign, =, rsign, ;, if, (, rh, !=, 0, &&, (, asign, ==, bsign, )]
[=, rsign, ;, if, (, rh, !=, 0, &&, (, asign, ==, bsign, ), ), {, final, int, lostdigit, =]
[., sign, =, rsign, ;, if, (, rh, !=, 0, &&, (, asign, ==, bsign, ), ), {, final, int]
[;, if, (, rh, !=, 0, &&, (, asign, ==, bsign, ), ), {, final, int, lostdigit, =, result, .]
[), {, final, int, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result]
[&&, (, asign, ==, bsign, ), ), {, final, int, lostdigit, =, result, ., mant, [, 0, ], ;, result]
[!=, 0, &&, (, asign, ==, bsign, ), ), {, final, int, lostdigit, =, result, ., mant, [, 0, ]]
[&&, (, asign, ==, bsign, ), ), {, final, int, lostdigit, =, result, ., mant, [, 0, ], ;, result]
[), {, final, int, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result]
[), ), {, final, int, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;]
[==, bsign, ), ), {, final, int, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (]
[), ), {, final, int, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;]
[;, result, ., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;]
[[, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ]]
[., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -]
[], ;, result, ., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =, rh]
[;, result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;, final, int, excp, =, result, .]
[., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;, final, int]
[=, rh, ;, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0, )]
[[, mant, ., length, -, 1, ], =, rh, ;, final, int, excp, =, result, ., round, (, lostdigit, )]
[., mant, [, mant, ., length, -, 1, ], =, rh, ;, final, int, excp, =, result, ., round, (]
[], =, rh, ;, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0]
[-, 1, ], =, rh, ;, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp]
[., length, -, 1, ], =, rh, ;, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if]
[], =, rh, ;, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0]
[;, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {, result]
[;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, )]
[., round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP]
[), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result]
[), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, }, for, (, int]
[!=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, }, for]
[), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, }, for, (, int]
[=, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, }, for, (, int, i, =, 0]
[;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[,, ADD_TRAP, ,, x, ,, result, ), ;, }, }, for, (, int, i, =, 0, ;, i, <, mant]
[,, x, ,, result, ), ;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length]
[,, result, ), ;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i]
[), ;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, )]
[;, i, <, mant, ., length, ;, i, ++, ), {, if, (, result, ., mant, [, mant, ., length]
[;, i, ++, ), {, if, (, result, ., mant, [, mant, ., length, -, 1, ], !=, 0, )]
[<, mant, ., length, ;, i, ++, ), {, if, (, result, ., mant, [, mant, ., length, -, 1]
[;, i, ++, ), {, if, (, result, ., mant, [, mant, ., length, -, 1, ], !=, 0, )]
[., length, ;, i, ++, ), {, if, (, result, ., mant, [, mant, ., length, -, 1, ], !=]
[), {, if, (, result, ., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, break, ;]
[++, ), {, if, (, result, ., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, break]
[), {, break, ;, }, result, ., shiftLeft, (, ), ;, if, (, i, ==, 0, ), {, result, .]
[!=, 0, ), {, break, ;, }, result, ., shiftLeft, (, ), ;, if, (, i, ==, 0, ), {]
[[, mant, ., length, -, 1, ], !=, 0, ), {, break, ;, }, result, ., shiftLeft, (, ), ;]
[., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, break, ;, }, result, ., shiftLeft, (]
[], !=, 0, ), {, break, ;, }, result, ., shiftLeft, (, ), ;, if, (, i, ==, 0, )]
[-, 1, ], !=, 0, ), {, break, ;, }, result, ., shiftLeft, (, ), ;, if, (, i, ==]
[., length, -, 1, ], !=, 0, ), {, break, ;, }, result, ., shiftLeft, (, ), ;, if, (]
[], !=, 0, ), {, break, ;, }, result, ., shiftLeft, (, ), ;, if, (, i, ==, 0, )]
[), {, break, ;, }, result, ., shiftLeft, (, ), ;, if, (, i, ==, 0, ), {, result, .]
[;, if, (, i, ==, 0, ), {, result, ., mant, [, 0, ], =, aextradigit, +, bextradigit, ;, aextradigit]
[., shiftLeft, (, ), ;, if, (, i, ==, 0, ), {, result, ., mant, [, 0, ], =, aextradigit]
[), {, result, ., mant, [, 0, ], =, aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0]
[==, 0, ), {, result, ., mant, [, 0, ], =, aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit]
[), {, result, ., mant, [, 0, ], =, aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0]
[=, aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (, result, ., mant]
[[, 0, ], =, aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (]
[., mant, [, 0, ], =, aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }]
[], =, aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (, result, .]
[;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (, result, ., mant, [, mant, ., length]
[+, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (, result, ., mant, [, mant]
[;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (, result, ., mant, [, mant, ., length]
[=, 0, ;, bextradigit, =, 0, ;, }, }, if, (, result, ., mant, [, mant, ., length, -, 1]
[;, bextradigit, =, 0, ;, }, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==]
[=, 0, ;, }, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, )]
[;, }, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result]
[), {, result, ., exp, =, 0, ;, if, (, asign, !=, bsign, ), {, result, ., sign, =, 1]
[==, 0, ), {, result, ., exp, =, 0, ;, if, (, asign, !=, bsign, ), {, result, ., sign]
[[, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, if, (, asign]
[., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, if]
[], ==, 0, ), {, result, ., exp, =, 0, ;, if, (, asign, !=, bsign, ), {, result, .]
[-, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, if, (, asign, !=, bsign, ), {]
[., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, if, (, asign, !=, bsign]
[], ==, 0, ), {, result, ., exp, =, 0, ;, if, (, asign, !=, bsign, ), {, result, .]
[), {, result, ., exp, =, 0, ;, if, (, asign, !=, bsign, ), {, result, ., sign, =, 1]
[=, 0, ;, if, (, asign, !=, bsign, ), {, result, ., sign, =, 1, ;, }, }, final, int]
[., exp, =, 0, ;, if, (, asign, !=, bsign, ), {, result, ., sign, =, 1, ;, }, }]
[;, if, (, asign, !=, bsign, ), {, result, ., sign, =, 1, ;, }, }, final, int, excp, =]
[), {, result, ., sign, =, 1, ;, }, }, final, int, excp, =, result, ., round, (, aextradigit, +]
[!=, bsign, ), {, result, ., sign, =, 1, ;, }, }, final, int, excp, =, result, ., round, (]
[), {, result, ., sign, =, 1, ;, }, }, final, int, excp, =, result, ., round, (, aextradigit, +]
[=, 1, ;, }, }, final, int, excp, =, result, ., round, (, aextradigit, +, bextradigit, ), ;, if, (]
[., sign, =, 1, ;, }, }, final, int, excp, =, result, ., round, (, aextradigit, +, bextradigit, ), ;]
[;, }, }, final, int, excp, =, result, ., round, (, aextradigit, +, bextradigit, ), ;, if, (, excp, !=]
[;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, )]
[., round, (, aextradigit, +, bextradigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp]
[), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result]
[+, bextradigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x]
[), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result]
[), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, return, result, ;, }]
[!=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, return, result]
[), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, return, result, ;, }]
[=, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, return, result, ;, }, public, Dfp, negate]
[;, }, return, result, ;, }, public, Dfp, negate, (, ), {, Dfp, result, =, newInstance, (, this, ), ;]
[,, ADD_TRAP, ,, x, ,, result, ), ;, }, return, result, ;, }, public, Dfp, negate, (, ), {, Dfp]
[,, x, ,, result, ), ;, }, return, result, ;, }, public, Dfp, negate, (, ), {, Dfp, result, =]
[,, result, ), ;, }, return, result, ;, }, public, Dfp, negate, (, ), {, Dfp, result, =, newInstance, (]
[), ;, }, return, result, ;, }, public, Dfp, negate, (, ), {, Dfp, result, =, newInstance, (, this, )]
[;, }, public, Dfp, negate, (, ), {, Dfp, result, =, newInstance, (, this, ), ;, result, ., sign, =]
[;, result, ., sign, =, (, byte, ), -, result, ., sign, ;, return, result, ;, }, public, Dfp, subtract]
[), ;, result, ., sign, =, (, byte, ), -, result, ., sign, ;, return, result, ;, }, public, Dfp]
[=, (, byte, ), -, result, ., sign, ;, return, result, ;, }, public, Dfp, subtract, (, final, Dfp, x]
[., sign, =, (, byte, ), -, result, ., sign, ;, return, result, ;, }, public, Dfp, subtract, (, final]
[;, return, result, ;, }, public, Dfp, subtract, (, final, Dfp, x, ), {, return, add, (, x, ., negate]
[;, return, result, ;, }, public, Dfp, subtract, (, final, Dfp, x, ), {, return, add, (, x, ., negate]
[;, return, result, ;, }, public, Dfp, subtract, (, final, Dfp, x, ), {, return, add, (, x, ., negate]
[., sign, ;, return, result, ;, }, public, Dfp, subtract, (, final, Dfp, x, ), {, return, add, (, x]
[;, }, public, Dfp, subtract, (, final, Dfp, x, ), {, return, add, (, x, ., negate, (, ), )]
[;, }, protected, int, round, (, int, n, ), {, boolean, inc, =, false, ;, switch, (, field, ., getRoundingMode]
[), ;, }, protected, int, round, (, int, n, ), {, boolean, inc, =, false, ;, switch, (, field, .]
[., negate, (, ), ), ;, }, protected, int, round, (, int, n, ), {, boolean, inc, =, false, ;]
[;, switch, (, field, ., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case]
[), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, n, !=, 0, ;]
[., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =]
[:, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, n, !=, 0, ;, break, ;, case, ROUND_HALF_UP]
[=, false, ;, break, ;, case, ROUND_UP, :, inc, =, n, !=, 0, ;, break, ;, case, ROUND_HALF_UP, :, inc]
[;, break, ;, case, ROUND_UP, :, inc, =, n, !=, 0, ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n]
[:, inc, =, n, !=, 0, ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5000, ;, break, ;]
[=, n, !=, 0, ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5000, ;, break, ;, case, ROUND_HALF_DOWN]
[;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n]
[!=, 0, ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc]
[;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n]
[:, inc, =, n, >=, 5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;]
[=, n, >=, 5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN]
[;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n]
[>=, 5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc]
[;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n]
[:, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (, n]
[=, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (, n, ==, 5000]
[;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, []
[>, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (]
[;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, []
[:, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, )]
[=, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 1]
[;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, []
[||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 1, ), ;, break, ;]
[>, 5000, ||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 1, ), ;]
[||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 1, ), ;, break, ;]
[;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, []
[), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant]
[&&, (, mant, [, 0, ], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =]
[==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :]
[&&, (, mant, [, 0, ], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =]
[), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant]
[==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&]
[), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000]
[&, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n]
[[, 0, ], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000]
[], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (]
[), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000]
[), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant]
[:, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, )]
[=, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 0]
[;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR]
[||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 0, ), ;, break, ;]
[>, 5000, ||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 0, ), ;]
[||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 0, ), ;, break, ;]
[;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR]
[), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&, n, !=, 0, ;, break, ;, case]
[&&, (, mant, [, 0, ], &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =]
[==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :]
[&&, (, mant, [, 0, ], &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =]
[), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&, n, !=, 0, ;, break, ;, case]
[==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&, n, !=, 0, ;, break]
[), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&, n, !=, 0, ;]
[&, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&, n, !=]
[[, 0, ], &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1]
[], &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&, n]
[), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&, n, !=, 0, ;]
[), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&, n, !=, 0, ;, break, ;, case]
[:, inc, =, sign, ==, 1, &&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =]
[=, sign, ==, 1, &&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, sign, ==]
[;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, sign, ==, -, 1, &&, n, !=, 0, ;, break]
[&&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, sign, ==, -, 1, &&, n]
[==, 1, &&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, sign, ==, -, 1]
[&&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, sign, ==, -, 1, &&, n]
[;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, sign, ==, -, 1, &&, n, !=, 0, ;, break]
[!=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, sign, ==, -, 1, &&, n, !=, 0]
[;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, sign, ==, -, 1, &&, n, !=, 0, ;, break]
[:, default, :, inc, =, sign, ==, -, 1, &&, n, !=, 0, ;, break, ;, }, if, (, inc]
[=, sign, ==, -, 1, &&, n, !=, 0, ;, break, ;, }, if, (, inc, ), {, int, rh]
[;, break, ;, }, if, (, inc, ), {, int, rh, =, 1, ;, for, (, int, i, =, 0]
[&&, n, !=, 0, ;, break, ;, }, if, (, inc, ), {, int, rh, =, 1, ;, for, (]
[==, -, 1, &&, n, !=, 0, ;, break, ;, }, if, (, inc, ), {, int, rh, =, 1]
[&&, n, !=, 0, ;, break, ;, }, if, (, inc, ), {, int, rh, =, 1, ;, for, (]
[&&, n, !=, 0, ;, break, ;, }, if, (, inc, ), {, int, rh, =, 1, ;, for, (]
[;, break, ;, }, if, (, inc, ), {, int, rh, =, 1, ;, for, (, int, i, =, 0]
[!=, 0, ;, break, ;, }, if, (, inc, ), {, int, rh, =, 1, ;, for, (, int, i]
[;, break, ;, }, if, (, inc, ), {, int, rh, =, 1, ;, for, (, int, i, =, 0]
[), {, int, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int]
[;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +]
[;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /]
[<, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;]
[;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /]
[., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =]
[), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant]
[++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, if]
[+, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;]
[[, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh]
[], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX]
[;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, if]
[=, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh]
[;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, !=, 0, ), {]
[/, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, !=, 0]
[;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, !=, 0, ), {]
[=, r, -, rh, *, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant]
[[, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (]
[], =, r, -, rh, *, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;]
[;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1]
[-, rh, *, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, [, mant]
[;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1]
[*, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, [, mant, ., length]
[;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1]
[), {, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if]
[!=, 0, ), {, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }]
[), {, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if]
[;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, )]
[=, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, )]
[[, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, field]
[], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW]
[-, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField]
[., length, -, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, field, ., setIEEEFlagsBits]
[], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW]
[;, }, }, if, (, exp, <, MIN_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp]
[<, MIN_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp]
[;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, .]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, )]
[), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField]
[., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, field, ., setIEEEFlagsBits]
[;, }, if, (, exp, >, MAX_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField]
[., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n]
[>, MAX_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n]
[;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, .]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, )]
[), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField]
[., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ), {, field, ., setIEEEFlagsBits]
[;, }, if, (, n, !=, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField]
[., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return, 0, ;]
[!=, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return, 0, ;]
[;, return, DfpField, ., FLAG_INEXACT, ;, }, return, 0, ;, }, public, Dfp, multiply, (, final, Dfp, x, ), {]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return, 0, ;, }, public, Dfp]
[), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return, 0, ;, }, public, Dfp, multiply, (, final, Dfp, x, )]
[., FLAG_INEXACT, ), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return, 0, ;, }, public, Dfp, multiply, (, final, Dfp]
[;, }, return, 0, ;, }, public, Dfp, multiply, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits]
[., FLAG_INEXACT, ;, }, return, 0, ;, }, public, Dfp, multiply, (, final, Dfp, x, ), {, if, (, field]
[;, }, public, Dfp, multiply, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[!=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final]
[., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, .]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance]
[., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result]
[;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN]
[;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, )]
[), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result]
[=, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, Dfp, result]
[., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, }]
[;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, Dfp, result, =, newInstance]
[;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||, x, .]
[,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if]
[., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), )]
[,, x, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans]
[,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE]
[), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||, x]
[;, if, (, nans, !=, FINITE, ||, x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), )]
[), ;, if, (, nans, !=, FINITE, ||, x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, )]
[), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, x, ., isNaN, (, )]
[||, x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if]
[!=, FINITE, ||, x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;]
[||, x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if]
[), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, x, ., isNaN, (, )]
[!=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, x, ., isNaN]
[., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, x]
[), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, x, ., isNaN, (, )]
[), {, return, this, ;, }, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if]
[;, }, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE]
[), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, .]
[., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==]
[;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, .]
[), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x]
[&&, x, ., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, this]
[&&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], !=, 0, )]
[==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], !=]
[&&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], !=, 0, )]
[&&, x, ., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, this]
[==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance]
[., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result]
[&&, x, ., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, this]
[), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x]
[!=, 0, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign]
[[, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, this, ), ;, result, .]
[., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, this, ), ;]
[], !=, 0, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (]
[-, 1, ], !=, 0, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte]
[., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =]
[], !=, 0, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (]
[), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x]
[=, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x, ., sign, )]
[;, result, ., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }]
[), ;, result, ., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;]
[=, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, x, .]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant]
[;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant]
[), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, []
[*, x, ., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==]
[), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, []
[., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&]
[;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -]
[), {, result, =, newInstance, (, x, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x]
[&&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, x, ), ;]
[&&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance]
[==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result]
[., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, )]
[&&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance]
[&&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, x, ), ;]
[==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, x]
[&&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, x, ), ;]
[), {, result, =, newInstance, (, x, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x]
[!=, 0, ), {, result, =, newInstance, (, x, ), ;, result, ., sign, =, (, byte, ), (, sign]
[[, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, x, ), ;, result, .]
[], !=, 0, ), {, result, =, newInstance, (, x, ), ;, result, ., sign, =, (, byte, ), (]
[-, 1, ], !=, 0, ), {, result, =, newInstance, (, x, ), ;, result, ., sign, =, (, byte]
[., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, x, ), ;, result, ., sign, =]
[], !=, 0, ), {, result, =, newInstance, (, x, ), ;, result, ., sign, =, (, byte, ), (]
[), {, result, =, newInstance, (, x, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x]
[=, newInstance, (, x, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x, ., sign, )]
[;, result, ., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }]
[), ;, result, ., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;]
[=, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, x, .]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, result, =]
[;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, result, =]
[), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, result]
[*, x, ., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==]
[), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, result]
[., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, )]
[;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, result, =, newInstance, (, this]
[), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x]
[&&, nans, ==, INFINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, )]
[==, INFINITE, &&, nans, ==, INFINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (]
[., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign]
[&&, nans, ==, INFINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, )]
[), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x]
[==, INFINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign]
[), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x]
[=, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x, ., sign, )]
[;, result, ., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }]
[), ;, result, ., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;]
[=, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, (, x]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, []
[;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, []
[), ;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant]
[*, x, ., sign, ), ;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans]
[), ;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant]
[., sign, ), ;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE]
[;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -]
[), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length]
[&&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, .]
[&&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (, nans, ==]
[==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (]
[., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, )]
[&&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (, nans, ==]
[&&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, .]
[==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&]
[&&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, .]
[), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length]
[==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant]
[[, mant, ., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==]
[], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, []
[-, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, .]
[., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&]
[], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, []
[), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), )]
[&&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (]
[&&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0, )]
[==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], ==]
[&&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0, )]
[&&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (]
[==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), ), {, field, .]
[., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), ), {]
[&&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (]
[), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), )]
[==, 0, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (]
[[, mant, ., length, -, 1, ], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[., mant, [, mant, ., length, -, 1, ], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, .]
[], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero]
[-, 1, ], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance]
[., length, -, 1, ], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result]
[], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero]
[), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), )]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans]
[), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap]
[., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result]
[=, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, .]
[;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,]
[=, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, return, result]
[., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;]
[;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, return, result, ;, }]
[=, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, return, result, ;, }, }, int]
[;, return, result, ;, }, }, int, [, ], product, =, new, int, [, mant, ., length, *, 2, ]]
[,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, return, result, ;, }, }, int, [, ], product, =, new, int]
[., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, return, result, ;, }, }, int, [, ], product, =]
[,, x, ,, result, ), ;, return, result, ;, }, }, int, [, ], product, =, new, int, [, mant]
[,, result, ), ;, return, result, ;, }, }, int, [, ], product, =, new, int, [, mant, ., length]
[), ;, return, result, ;, }, }, int, [, ], product, =, new, int, [, mant, ., length, *, 2]
[;, }, }, int, [, ], product, =, new, int, [, mant, ., length, *, 2, ], ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, int, rh]
[], ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, int]
[*, 2, ], ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, )]
[., length, *, 2, ], ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i]
[], ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, int]
[;, i, <, mant, ., length, ;, i, ++, ), {, int, rh, =, 0, ;, for, (, int, j]
[;, i, ++, ), {, int, rh, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mant]
[<, mant, ., length, ;, i, ++, ), {, int, rh, =, 0, ;, for, (, int, j, =, 0]
[;, i, ++, ), {, int, rh, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mant]
[., length, ;, i, ++, ), {, int, rh, =, 0, ;, for, (, int, j, =, 0, ;, j]
[), {, int, rh, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mant, ., length, ;]
[++, ), {, int, rh, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mant, ., length]
[;, for, (, int, j, =, 0, ;, j, <, mant, ., length, ;, j, ++, ), {, int, r]
[;, j, <, mant, ., length, ;, j, ++, ), {, int, r, =, mant, [, i, ], *, x]
[;, j, ++, ), {, int, r, =, mant, [, i, ], *, x, ., mant, [, j, ], ;]
[<, mant, ., length, ;, j, ++, ), {, int, r, =, mant, [, i, ], *, x, ., mant]
[;, j, ++, ), {, int, r, =, mant, [, i, ], *, x, ., mant, [, j, ], ;]
[., length, ;, j, ++, ), {, int, r, =, mant, [, i, ], *, x, ., mant, [, j]
[), {, int, r, =, mant, [, i, ], *, x, ., mant, [, j, ], ;, r, =, r]
[++, ), {, int, r, =, mant, [, i, ], *, x, ., mant, [, j, ], ;, r, =]
[;, r, =, r, +, product, [, i, +, j, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[*, x, ., mant, [, j, ], ;, r, =, r, +, product, [, i, +, j, ], +, rh]
[[, i, ], *, x, ., mant, [, j, ], ;, r, =, r, +, product, [, i, +, j]
[], *, x, ., mant, [, j, ], ;, r, =, r, +, product, [, i, +, j, ], +]
[;, r, =, r, +, product, [, i, +, j, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[[, j, ], ;, r, =, r, +, product, [, i, +, j, ], +, rh, ;, rh, =, r]
[., mant, [, j, ], ;, r, =, r, +, product, [, i, +, j, ], +, rh, ;, rh]
[], ;, r, =, r, +, product, [, i, +, j, ], +, rh, ;, rh, =, r, /, RADIX]
[=, r, +, product, [, i, +, j, ], +, rh, ;, rh, =, r, /, RADIX, ;, product, []
[;, rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =, r, -, rh, *, RADIX, ;]
[+, rh, ;, rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =, r, -, rh, *]
[+, product, [, i, +, j, ], +, rh, ;, rh, =, r, /, RADIX, ;, product, [, i, +]
[+, rh, ;, rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =, r, -, rh, *]
[[, i, +, j, ], +, rh, ;, rh, =, r, /, RADIX, ;, product, [, i, +, j, ]]
[], +, rh, ;, rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =, r, -, rh]
[+, j, ], +, rh, ;, rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =, r]
[], +, rh, ;, rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =, r, -, rh]
[;, rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =, r, -, rh, *, RADIX, ;]
[=, r, /, RADIX, ;, product, [, i, +, j, ], =, r, -, rh, *, RADIX, ;, }, product]
[;, product, [, i, +, j, ], =, r, -, rh, *, RADIX, ;, }, product, [, i, +, mant]
[/, RADIX, ;, product, [, i, +, j, ], =, r, -, rh, *, RADIX, ;, }, product, [, i]
[;, product, [, i, +, j, ], =, r, -, rh, *, RADIX, ;, }, product, [, i, +, mant]
[=, r, -, rh, *, RADIX, ;, }, product, [, i, +, mant, ., length, ], =, rh, ;, }]
[[, i, +, j, ], =, r, -, rh, *, RADIX, ;, }, product, [, i, +, mant, ., length]
[], =, r, -, rh, *, RADIX, ;, }, product, [, i, +, mant, ., length, ], =, rh, ;]
[+, j, ], =, r, -, rh, *, RADIX, ;, }, product, [, i, +, mant, ., length, ], =]
[], =, r, -, rh, *, RADIX, ;, }, product, [, i, +, mant, ., length, ], =, rh, ;]
[;, }, product, [, i, +, mant, ., length, ], =, rh, ;, }, int, md, =, mant, ., length]
[-, rh, *, RADIX, ;, }, product, [, i, +, mant, ., length, ], =, rh, ;, }, int, md]
[;, }, product, [, i, +, mant, ., length, ], =, rh, ;, }, int, md, =, mant, ., length]
[*, RADIX, ;, }, product, [, i, +, mant, ., length, ], =, rh, ;, }, int, md, =, mant]
[;, }, product, [, i, +, mant, ., length, ], =, rh, ;, }, int, md, =, mant, ., length]
[=, rh, ;, }, int, md, =, mant, ., length, *, 2, -, 1, ;, for, (, int, i, =]
[[, i, +, mant, ., length, ], =, rh, ;, }, int, md, =, mant, ., length, *, 2, -]
[], =, rh, ;, }, int, md, =, mant, ., length, *, 2, -, 1, ;, for, (, int, i]
[+, mant, ., length, ], =, rh, ;, }, int, md, =, mant, ., length, *, 2, -, 1, ;]
[], =, rh, ;, }, int, md, =, mant, ., length, *, 2, -, 1, ;, for, (, int, i]
[., length, ], =, rh, ;, }, int, md, =, mant, ., length, *, 2, -, 1, ;, for, (]
[;, }, int, md, =, mant, ., length, *, 2, -, 1, ;, for, (, int, i, =, mant, .]
[;, for, (, int, i, =, mant, ., length, *, 2, -, 1, ;, i, >=, 0, ;, i, --]
[-, 1, ;, for, (, int, i, =, mant, ., length, *, 2, -, 1, ;, i, >=, 0, ;]
[*, 2, -, 1, ;, for, (, int, i, =, mant, ., length, *, 2, -, 1, ;, i, >=]
[., length, *, 2, -, 1, ;, for, (, int, i, =, mant, ., length, *, 2, -, 1, ;]
[-, 1, ;, for, (, int, i, =, mant, ., length, *, 2, -, 1, ;, i, >=, 0, ;]
[;, for, (, int, i, =, mant, ., length, *, 2, -, 1, ;, i, >=, 0, ;, i, --]
[;, i, >=, 0, ;, i, --, ), {, if, (, product, [, i, ], !=, 0, ), {, md]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, product, [, i, ], !=, 0, )]
[*, 2, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, product, [, i, ], !=]
[., length, *, 2, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, product, [, i]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, product, [, i, ], !=, 0, )]
[;, i, >=, 0, ;, i, --, ), {, if, (, product, [, i, ], !=, 0, ), {, md]
[;, i, --, ), {, if, (, product, [, i, ], !=, 0, ), {, md, =, i, ;, break]
[>=, 0, ;, i, --, ), {, if, (, product, [, i, ], !=, 0, ), {, md, =, i]
[;, i, --, ), {, if, (, product, [, i, ], !=, 0, ), {, md, =, i, ;, break]
[), {, if, (, product, [, i, ], !=, 0, ), {, md, =, i, ;, break, ;, }, }]
[--, ), {, if, (, product, [, i, ], !=, 0, ), {, md, =, i, ;, break, ;, }]
[), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <, mant]
[!=, 0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i]
[[, i, ], !=, 0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =]
[], !=, 0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;]
[), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <, mant]
[=, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++]
[;, i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i]
[;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, product, []
[<, mant, ., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1]
[;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, product, []
[., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =]
[), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, product, [, md, -, i]
[++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, product, [, md, -]
[=, product, [, md, -, i, ], ;, }, result, ., exp, =, exp, +, x, ., exp, +, md]
[[, mant, ., length, -, i, -, 1, ], =, product, [, md, -, i, ], ;, }, result, .]
[., mant, [, mant, ., length, -, i, -, 1, ], =, product, [, md, -, i, ], ;, }]
[], =, product, [, md, -, i, ], ;, }, result, ., exp, =, exp, +, x, ., exp, +]
[-, 1, ], =, product, [, md, -, i, ], ;, }, result, ., exp, =, exp, +, x, .]
[-, i, -, 1, ], =, product, [, md, -, i, ], ;, }, result, ., exp, =, exp, +]
[., length, -, i, -, 1, ], =, product, [, md, -, i, ], ;, }, result, ., exp, =]
[-, 1, ], =, product, [, md, -, i, ], ;, }, result, ., exp, =, exp, +, x, .]
[], =, product, [, md, -, i, ], ;, }, result, ., exp, =, exp, +, x, ., exp, +]
[;, }, result, ., exp, =, exp, +, x, ., exp, +, md, -, 2, *, mant, ., length, +]
[[, md, -, i, ], ;, }, result, ., exp, =, exp, +, x, ., exp, +, md, -, 2]
[], ;, }, result, ., exp, =, exp, +, x, ., exp, +, md, -, 2, *, mant, ., length]
[-, i, ], ;, }, result, ., exp, =, exp, +, x, ., exp, +, md, -, 2, *, mant]
[], ;, }, result, ., exp, =, exp, +, x, ., exp, +, md, -, 2, *, mant, ., length]
[=, exp, +, x, ., exp, +, md, -, 2, *, mant, ., length, +, 1, ;, result, ., sign]
[., exp, =, exp, +, x, ., exp, +, md, -, 2, *, mant, ., length, +, 1, ;, result]
[;, result, ., sign, =, (, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1, :, -]
[+, 1, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1]
[-, 2, *, mant, ., length, +, 1, ;, result, ., sign, =, (, byte, ), (, (, sign, ==]
[+, md, -, 2, *, mant, ., length, +, 1, ;, result, ., sign, =, (, byte, ), (, (]
[+, x, ., exp, +, md, -, 2, *, mant, ., length, +, 1, ;, result, ., sign, =, (]
[+, md, -, 2, *, mant, ., length, +, 1, ;, result, ., sign, =, (, byte, ), (, (]
[., exp, +, md, -, 2, *, mant, ., length, +, 1, ;, result, ., sign, =, (, byte, )]
[-, 2, *, mant, ., length, +, 1, ;, result, ., sign, =, (, byte, ), (, (, sign, ==]
[+, 1, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1]
[*, mant, ., length, +, 1, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, x, .]
[+, 1, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1]
[., length, +, 1, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, x, ., sign, )]
[;, result, ., sign, =, (, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1, :, -]
[=, (, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1, :, -, 1, ), ;, if]
[., sign, =, (, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1, :, -, 1, )]
[;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp]
[;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp]
[), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, .]
[?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==]
[), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ]]
[==, x, ., sign, ), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, .]
[), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ]]
[., sign, ), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -]
[:, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, )]
[), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, .]
[), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, .]
[), {, result, ., exp, =, 0, ;, }, final, int, excp, ;, if, (, md, >, (, mant, .]
[==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, ;, if, (, md, >, (]
[[, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int]
[., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }]
[], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, ;, if, (, md, >]
[-, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, ;, if, (]
[., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, ;]
[], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, ;, if, (, md, >]
[), {, result, ., exp, =, 0, ;, }, final, int, excp, ;, if, (, md, >, (, mant, .]
[=, 0, ;, }, final, int, excp, ;, if, (, md, >, (, mant, ., length, -, 1, ), )]
[., exp, =, 0, ;, }, final, int, excp, ;, if, (, md, >, (, mant, ., length, -, 1]
[;, }, final, int, excp, ;, if, (, md, >, (, mant, ., length, -, 1, ), ), {, excp]
[), {, excp, =, result, ., round, (, product, [, md, -, mant, ., length, ], ), ;, }, else]
[>, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (, product, [, md, -]
[), {, excp, =, result, ., round, (, product, [, md, -, mant, ., length, ], ), ;, }, else]
[), ), {, excp, =, result, ., round, (, product, [, md, -, mant, ., length, ], ), ;, }]
[-, 1, ), ), {, excp, =, result, ., round, (, product, [, md, -, mant, ., length, ], )]
[., length, -, 1, ), ), {, excp, =, result, ., round, (, product, [, md, -, mant, ., length]
[), ), {, excp, =, result, ., round, (, product, [, md, -, mant, ., length, ], ), ;, }]
[=, result, ., round, (, product, [, md, -, mant, ., length, ], ), ;, }, else, {, excp, =]
[;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=, 0, )]
[., round, (, product, [, md, -, mant, ., length, ], ), ;, }, else, {, excp, =, result, .]
[), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=, 0]
[[, md, -, mant, ., length, ], ), ;, }, else, {, excp, =, result, ., round, (, 0, )]
[], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=]
[-, mant, ., length, ], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }]
[], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=]
[., length, ], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (]
[=, result, ., round, (, 0, ), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (]
[;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, x, ,, result]
[., round, (, 0, ), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,]
[), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, x, ,]
[), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, return, result, ;, }]
[!=, 0, ), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, return, result]
[), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, return, result, ;, }]
[=, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, return, result, ;, }, public, Dfp, multiply]
[;, }, return, result, ;, }, public, Dfp, multiply, (, final, int, x, ), {, if, (, x, >=, 0]
[,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, return, result, ;, }, public, Dfp, multiply, (, final, int, x]
[,, x, ,, result, ), ;, }, return, result, ;, }, public, Dfp, multiply, (, final, int, x, ), {]
[,, result, ), ;, }, return, result, ;, }, public, Dfp, multiply, (, final, int, x, ), {, if, (]
[), ;, }, return, result, ;, }, public, Dfp, multiply, (, final, int, x, ), {, if, (, x, >=]
[;, }, public, Dfp, multiply, (, final, int, x, ), {, if, (, x, >=, 0, &&, x, <, RADIX]
[), {, return, multiplyFast, (, x, ), ;, }, else, {, return, multiply, (, newInstance, (, x, ), ), ;]
[&&, x, <, RADIX, ), {, return, multiplyFast, (, x, ), ;, }, else, {, return, multiply, (, newInstance, (]
[>=, 0, &&, x, <, RADIX, ), {, return, multiplyFast, (, x, ), ;, }, else, {, return, multiply, (]
[&&, x, <, RADIX, ), {, return, multiplyFast, (, x, ), ;, }, else, {, return, multiply, (, newInstance, (]
[), {, return, multiplyFast, (, x, ), ;, }, else, {, return, multiply, (, newInstance, (, x, ), ), ;]
[<, RADIX, ), {, return, multiplyFast, (, x, ), ;, }, else, {, return, multiply, (, newInstance, (, x, )]
[), {, return, multiplyFast, (, x, ), ;, }, else, {, return, multiply, (, newInstance, (, x, ), ), ;]
[;, }, else, {, return, multiply, (, newInstance, (, x, ), ), ;, }, }, private, Dfp, multiplyFast, (, final]
[), ;, }, else, {, return, multiply, (, newInstance, (, x, ), ), ;, }, }, private, Dfp, multiplyFast, (]
[;, }, }, private, Dfp, multiplyFast, (, final, int, x, ), {, Dfp, result, =, newInstance, (, this, ), ;]
[), ;, }, }, private, Dfp, multiplyFast, (, final, int, x, ), {, Dfp, result, =, newInstance, (, this, )]
[), ), ;, }, }, private, Dfp, multiplyFast, (, final, int, x, ), {, Dfp, result, =, newInstance, (, this]
[;, if, (, nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if]
[), ;, if, (, nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }]
[), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==, INFINITE, &&, x]
[!=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==, INFINITE]
[), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==, INFINITE, &&, x]
[), {, return, this, ;, }, if, (, nans, ==, INFINITE, &&, x, !=, 0, ), {, result, =, newInstance]
[;, }, if, (, nans, ==, INFINITE, &&, x, !=, 0, ), {, result, =, newInstance, (, this, ), ;]
[), {, result, =, newInstance, (, this, ), ;, return, result, ;, }, if, (, nans, ==, INFINITE, &&, x]
[&&, x, !=, 0, ), {, result, =, newInstance, (, this, ), ;, return, result, ;, }, if, (, nans]
[==, INFINITE, &&, x, !=, 0, ), {, result, =, newInstance, (, this, ), ;, return, result, ;, }, if]
[&&, x, !=, 0, ), {, result, =, newInstance, (, this, ), ;, return, result, ;, }, if, (, nans]
[), {, result, =, newInstance, (, this, ), ;, return, result, ;, }, if, (, nans, ==, INFINITE, &&, x]
[!=, 0, ), {, result, =, newInstance, (, this, ), ;, return, result, ;, }, if, (, nans, ==, INFINITE]
[), {, result, =, newInstance, (, this, ), ;, return, result, ;, }, if, (, nans, ==, INFINITE, &&, x]
[=, newInstance, (, this, ), ;, return, result, ;, }, if, (, nans, ==, INFINITE, &&, x, ==, 0, )]
[;, return, result, ;, }, if, (, nans, ==, INFINITE, &&, x, ==, 0, ), {, field, ., setIEEEFlagsBits, (]
[), ;, return, result, ;, }, if, (, nans, ==, INFINITE, &&, x, ==, 0, ), {, field, ., setIEEEFlagsBits]
[;, }, if, (, nans, ==, INFINITE, &&, x, ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[&&, x, ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero]
[==, INFINITE, &&, x, ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance]
[&&, x, ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, )]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans]
[), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap]
[., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result]
[=, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, .]
[;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, newInstance, (, getZero]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, newInstance, (]
[=, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, newInstance, (, getZero, (, ), ), ,]
[., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, newInstance, (, getZero, (, )]
[;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, newInstance, (, getZero, (, ), ), ,, result, )]
[=, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, newInstance, (, getZero, (, ), ), ,, result, ), ;, return]
[;, return, result, ;, }, }, if, (, x, <, 0, ||, x, >=, RADIX, ), {, field, ., setIEEEFlagsBits]
[,, MULTIPLY_TRAP, ,, newInstance, (, getZero, (, ), ), ,, result, ), ;, return, result, ;, }, }, if, (]
[., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, newInstance, (, getZero, (, ), ), ,, result, ), ;, return, result, ;, }, }]
[,, newInstance, (, getZero, (, ), ), ,, result, ), ;, return, result, ;, }, }, if, (, x, <]
[,, result, ), ;, return, result, ;, }, }, if, (, x, <, 0, ||, x, >=, RADIX, ), {]
[), ,, result, ), ;, return, result, ;, }, }, if, (, x, <, 0, ||, x, >=, RADIX, )]
[), ;, return, result, ;, }, }, if, (, x, <, 0, ||, x, >=, RADIX, ), {, field, .]
[;, }, }, if, (, x, <, 0, ||, x, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, .]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[||, x, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero]
[<, 0, ||, x, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance]
[||, x, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[>=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, )]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans]
[), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap]
[., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result]
[=, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, .]
[;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, result, ,, result]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, result, ,]
[=, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, result, ,, result, ), ;, return, result]
[., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, result, ,, result, ), ;]
[;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, result, ,, result, ), ;, return, result, ;, }]
[=, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, result, ,, result, ), ;, return, result, ;, }, int, rh]
[;, return, result, ;, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant]
[,, MULTIPLY_TRAP, ,, result, ,, result, ), ;, return, result, ;, }, int, rh, =, 0, ;, for, (, int]
[., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, result, ,, result, ), ;, return, result, ;, }, int, rh, =, 0, ;, for]
[,, result, ,, result, ), ;, return, result, ;, }, int, rh, =, 0, ;, for, (, int, i, =]
[,, result, ), ;, return, result, ;, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, return, result, ;, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[;, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int]
[;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], *]
[;, i, ++, ), {, final, int, r, =, mant, [, i, ], *, x, +, rh, ;, rh, =]
[<, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], *, x, +]
[;, i, ++, ), {, final, int, r, =, mant, [, i, ], *, x, +, rh, ;, rh, =]
[., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], *, x, +, rh, ;]
[), {, final, int, r, =, mant, [, i, ], *, x, +, rh, ;, rh, =, r, /, RADIX]
[++, ), {, final, int, r, =, mant, [, i, ], *, x, +, rh, ;, rh, =, r, /]
[;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;]
[+, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *]
[*, x, +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -]
[[, i, ], *, x, +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ]]
[], *, x, +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r]
[+, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *]
[;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;]
[=, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, int]
[;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;]
[/, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, int, lostdigit, =]
[;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;]
[=, r, -, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;, if, (, rh, !=, 0, ), {]
[[, i, ], =, r, -, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;, if, (, rh, !=]
[., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;, if, (]
[], =, r, -, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;, if, (, rh, !=, 0, )]
[;, }, int, lostdigit, =, 0, ;, if, (, rh, !=, 0, ), {, lostdigit, =, result, ., mant, []
[-, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;, if, (, rh, !=, 0, ), {, lostdigit, =]
[;, }, int, lostdigit, =, 0, ;, if, (, rh, !=, 0, ), {, lostdigit, =, result, ., mant, []
[*, RADIX, ;, }, int, lostdigit, =, 0, ;, if, (, rh, !=, 0, ), {, lostdigit, =, result, .]
[;, }, int, lostdigit, =, 0, ;, if, (, rh, !=, 0, ), {, lostdigit, =, result, ., mant, []
[;, if, (, rh, !=, 0, ), {, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight]
[), {, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant]
[!=, 0, ), {, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result]
[), {, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant]
[=, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, [, mant, .]
[;, result, ., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;]
[[, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ]]
[., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -]
[], ;, result, ., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =, rh]
[;, result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;, }, if, (, result, ., mant]
[., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;, }, if]
[=, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[[, mant, ., length, -, 1, ], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length]
[., mant, [, mant, ., length, -, 1, ], =, rh, ;, }, if, (, result, ., mant, [, mant]
[], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, )]
[-, 1, ], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==]
[., length, -, 1, ], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1]
[], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, )]
[;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, .]
[), {, result, ., exp, =, 0, ;, }, final, int, excp, =, result, ., round, (, lostdigit, ), ;]
[==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, =, result, ., round, (, lostdigit]
[[, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int]
[., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }]
[], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, =, result, ., round, (]
[-, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, =, result, .]
[., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, =]
[], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, =, result, ., round, (]
[), {, result, ., exp, =, 0, ;, }, final, int, excp, =, result, ., round, (, lostdigit, ), ;]
[=, 0, ;, }, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0]
[., exp, =, 0, ;, }, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp]
[;, }, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {]
[;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, result, ,, result, )]
[., round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP]
[), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, result, ,, result]
[), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, result, ,, result, ), ;, }, return, result, ;, }]
[!=, 0, ), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, result, ,, result, ), ;, }, return, result]
[), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, result, ,, result, ), ;, }, return, result, ;, }]
[=, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, result, ,, result, ), ;, }, return, result, ;, }, public, Dfp, divide]
[;, }, return, result, ;, }, public, Dfp, divide, (, Dfp, divisor, ), {, int, dividend, [, ], ;, int]
[,, MULTIPLY_TRAP, ,, result, ,, result, ), ;, }, return, result, ;, }, public, Dfp, divide, (, Dfp, divisor, )]
[,, result, ,, result, ), ;, }, return, result, ;, }, public, Dfp, divide, (, Dfp, divisor, ), {, int]
[,, result, ), ;, }, return, result, ;, }, public, Dfp, divide, (, Dfp, divisor, ), {, int, dividend, []
[), ;, }, return, result, ;, }, public, Dfp, divide, (, Dfp, divisor, ), {, int, dividend, [, ], ;]
[;, }, public, Dfp, divide, (, Dfp, divisor, ), {, int, dividend, [, ], ;, int, quotient, [, ], ;]
[;, int, minadj, ;, boolean, trialgood, ;, int, md, =, 0, ;, int, excp, ;, if, (, field, ., getRadixDigits]
[;, int, excp, ;, if, (, field, ., getRadixDigits, (, ), !=, divisor, ., field, ., getRadixDigits, (, ), )]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[!=, divisor, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final]
[., getRadixDigits, (, ), !=, divisor, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, .]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance]
[., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result]
[;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN]
[;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, )]
[), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result]
[=, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, Dfp, result]
[., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }]
[;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, Dfp, result, =, newInstance]
[;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||, divisor, .]
[,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if]
[., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), )]
[,, divisor, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans]
[,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE]
[), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||, divisor]
[;, if, (, nans, !=, FINITE, ||, divisor, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), )]
[), ;, if, (, nans, !=, FINITE, ||, divisor, ., nans, !=, FINITE, ), {, if, (, isNaN, (, )]
[), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, divisor, ., isNaN, (, )]
[||, divisor, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if]
[!=, FINITE, ||, divisor, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;]
[||, divisor, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if]
[), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, divisor, ., isNaN, (, )]
[!=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, divisor, ., isNaN]
[., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, divisor]
[), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, divisor, ., isNaN, (, )]
[), {, return, this, ;, }, if, (, divisor, ., isNaN, (, ), ), {, return, divisor, ;, }, if]
[;, }, if, (, divisor, ., isNaN, (, ), ), {, return, divisor, ;, }, if, (, nans, ==, INFINITE]
[), {, return, divisor, ;, }, if, (, nans, ==, INFINITE, &&, divisor, ., nans, ==, FINITE, ), {, result]
[., isNaN, (, ), ), {, return, divisor, ;, }, if, (, nans, ==, INFINITE, &&, divisor, ., nans, ==]
[;, }, if, (, nans, ==, INFINITE, &&, divisor, ., nans, ==, FINITE, ), {, result, =, newInstance, (, this]
[), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, divisor]
[&&, divisor, ., nans, ==, FINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (]
[==, INFINITE, &&, divisor, ., nans, ==, FINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign]
[&&, divisor, ., nans, ==, FINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (]
[), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, divisor]
[==, FINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign]
[., nans, ==, FINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, )]
[), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, divisor]
[=, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, divisor, ., sign, )]
[;, result, ., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }]
[), ;, result, ., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;]
[=, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (, divisor, .]
[., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (]
[;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, result, =]
[;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, result, =]
[), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, result]
[*, divisor, ., sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==]
[), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, result]
[., sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, FINITE, )]
[;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, result, =, newInstance, (, getZero]
[), {, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (, sign]
[&&, nans, ==, FINITE, ), {, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (]
[==, INFINITE, &&, nans, ==, FINITE, ), {, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign]
[., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, result, =, newInstance, (, getZero, (, ), ), ;, result]
[&&, nans, ==, FINITE, ), {, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (]
[), {, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (, sign]
[==, FINITE, ), {, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, )]
[), {, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (, sign]
[=, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (, sign, *, divisor, .]
[;, result, ., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }]
[), ;, result, ., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;]
[=, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (, divisor, .]
[., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (]
[;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, field, .]
[;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, field, .]
[), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, field]
[*, divisor, ., sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==]
[), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, field]
[., sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, )]
[;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[&&, nans, ==, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero]
[==, INFINITE, &&, nans, ==, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance]
[., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result]
[&&, nans, ==, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[==, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, )]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans]
[), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap]
[., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result]
[=, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, .]
[;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,]
[=, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result]
[., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;]
[;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }]
[=, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, }, if]
[;, return, result, ;, }, }, if, (, divisor, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, }, if, (, divisor, ., mant, [, mant]
[., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, }, if, (, divisor, ., mant]
[,, divisor, ,, result, ), ;, return, result, ;, }, }, if, (, divisor, ., mant, [, mant, ., length]
[,, result, ), ;, return, result, ;, }, }, if, (, divisor, ., mant, [, mant, ., length, -, 1]
[), ;, return, result, ;, }, }, if, (, divisor, ., mant, [, mant, ., length, -, 1, ], ==]
[;, }, }, if, (, divisor, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, field]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, result, =, newInstance, (, getZero, (, )]
[[, mant, ., length, -, 1, ], ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;]
[., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO]
[], ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, result, =, newInstance, (, getZero, (]
[-, 1, ], ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, result, =, newInstance, (]
[., length, -, 1, ], ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, result, =]
[], ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, result, =, newInstance, (, getZero, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (, sign, *]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign]
[), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (, sign]
[., FLAG_DIV_ZERO, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, )]
[=, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (, sign, *, divisor, .]
[;, result, ., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, result, ., nans, =]
[), ;, result, ., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, result, ., nans]
[=, (, byte, ), (, sign, *, divisor, ., sign, ), ;, result, ., nans, =, INFINITE, ;, result, =]
[., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, result, ., nans, =, INFINITE, ;]
[;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result]
[;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result]
[), ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,]
[*, divisor, ., sign, ), ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,]
[), ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,]
[., sign, ), ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,]
[=, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result]
[., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;]
[;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }]
[=, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, dividend, =]
[;, return, result, ;, }, dividend, =, new, int, [, mant, ., length, +, 1, ], ;, quotient, =, new]
[,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, dividend, =, new, int, [, mant, ., length]
[., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, dividend, =, new, int, [, mant]
[,, divisor, ,, result, ), ;, return, result, ;, }, dividend, =, new, int, [, mant, ., length, +, 1]
[,, result, ), ;, return, result, ;, }, dividend, =, new, int, [, mant, ., length, +, 1, ], ;]
[), ;, return, result, ;, }, dividend, =, new, int, [, mant, ., length, +, 1, ], ;, quotient, =]
[;, }, dividend, =, new, int, [, mant, ., length, +, 1, ], ;, quotient, =, new, int, [, mant]
[=, new, int, [, mant, ., length, +, 1, ], ;, quotient, =, new, int, [, mant, ., length, +]
[;, quotient, =, new, int, [, mant, ., length, +, 2, ], ;, remainder, =, new, int, [, mant, .]
[], ;, quotient, =, new, int, [, mant, ., length, +, 2, ], ;, remainder, =, new, int, [, mant]
[+, 1, ], ;, quotient, =, new, int, [, mant, ., length, +, 2, ], ;, remainder, =, new, int]
[., length, +, 1, ], ;, quotient, =, new, int, [, mant, ., length, +, 2, ], ;, remainder, =]
[], ;, quotient, =, new, int, [, mant, ., length, +, 2, ], ;, remainder, =, new, int, [, mant]
[=, new, int, [, mant, ., length, +, 2, ], ;, remainder, =, new, int, [, mant, ., length, +]
[;, remainder, =, new, int, [, mant, ., length, +, 1, ], ;, dividend, [, mant, ., length, ], =]
[], ;, remainder, =, new, int, [, mant, ., length, +, 1, ], ;, dividend, [, mant, ., length, ]]
[+, 2, ], ;, remainder, =, new, int, [, mant, ., length, +, 1, ], ;, dividend, [, mant, .]
[., length, +, 2, ], ;, remainder, =, new, int, [, mant, ., length, +, 1, ], ;, dividend, []
[], ;, remainder, =, new, int, [, mant, ., length, +, 1, ], ;, dividend, [, mant, ., length, ]]
[=, new, int, [, mant, ., length, +, 1, ], ;, dividend, [, mant, ., length, ], =, 0, ;]
[;, dividend, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, ], =, 0, ;, quotient]
[], ;, dividend, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, ], =, 0, ;]
[+, 1, ], ;, dividend, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, ], =]
[., length, +, 1, ], ;, dividend, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length]
[], ;, dividend, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, ], =, 0, ;]
[=, 0, ;, quotient, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, +, 1, ]]
[[, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, ], =, 0, ;, quotient, [, mant]
[], =, 0, ;, quotient, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, +, 1]
[., length, ], =, 0, ;, quotient, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length]
[;, quotient, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, +, 1, ], =, 0]
[=, 0, ;, quotient, [, mant, ., length, +, 1, ], =, 0, ;, remainder, [, mant, ., length, ]]
[[, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, +, 1, ], =, 0, ;, remainder]
[], =, 0, ;, quotient, [, mant, ., length, +, 1, ], =, 0, ;, remainder, [, mant, ., length]
[., length, ], =, 0, ;, quotient, [, mant, ., length, +, 1, ], =, 0, ;, remainder, [, mant]
[;, quotient, [, mant, ., length, +, 1, ], =, 0, ;, remainder, [, mant, ., length, ], =, 0]
[=, 0, ;, remainder, [, mant, ., length, ], =, 0, ;, for, (, int, i, =, 0, ;, i]
[[, mant, ., length, +, 1, ], =, 0, ;, remainder, [, mant, ., length, ], =, 0, ;, for]
[], =, 0, ;, remainder, [, mant, ., length, ], =, 0, ;, for, (, int, i, =, 0, ;]
[+, 1, ], =, 0, ;, remainder, [, mant, ., length, ], =, 0, ;, for, (, int, i, =]
[., length, +, 1, ], =, 0, ;, remainder, [, mant, ., length, ], =, 0, ;, for, (, int]
[], =, 0, ;, remainder, [, mant, ., length, ], =, 0, ;, for, (, int, i, =, 0, ;]
[;, remainder, [, mant, ., length, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[[, mant, ., length, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length]
[], =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, )]
[., length, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, dividend, []
[;, i, <, mant, ., length, ;, i, ++, ), {, dividend, [, i, ], =, mant, [, i, ]]
[;, i, ++, ), {, dividend, [, i, ], =, mant, [, i, ], ;, quotient, [, i, ], =]
[<, mant, ., length, ;, i, ++, ), {, dividend, [, i, ], =, mant, [, i, ], ;, quotient]
[;, i, ++, ), {, dividend, [, i, ], =, mant, [, i, ], ;, quotient, [, i, ], =]
[., length, ;, i, ++, ), {, dividend, [, i, ], =, mant, [, i, ], ;, quotient, [, i]
[), {, dividend, [, i, ], =, mant, [, i, ], ;, quotient, [, i, ], =, 0, ;, remainder]
[++, ), {, dividend, [, i, ], =, mant, [, i, ], ;, quotient, [, i, ], =, 0, ;]
[=, mant, [, i, ], ;, quotient, [, i, ], =, 0, ;, remainder, [, i, ], =, 0, ;]
[[, i, ], =, mant, [, i, ], ;, quotient, [, i, ], =, 0, ;, remainder, [, i, ]]
[], =, mant, [, i, ], ;, quotient, [, i, ], =, 0, ;, remainder, [, i, ], =, 0]
[;, quotient, [, i, ], =, 0, ;, remainder, [, i, ], =, 0, ;, }, nsqd, =, 0, ;]
[[, i, ], ;, quotient, [, i, ], =, 0, ;, remainder, [, i, ], =, 0, ;, }, nsqd]
[], ;, quotient, [, i, ], =, 0, ;, remainder, [, i, ], =, 0, ;, }, nsqd, =, 0]
[=, 0, ;, remainder, [, i, ], =, 0, ;, }, nsqd, =, 0, ;, for, (, qd, =, mant]
[[, i, ], =, 0, ;, remainder, [, i, ], =, 0, ;, }, nsqd, =, 0, ;, for, (]
[], =, 0, ;, remainder, [, i, ], =, 0, ;, }, nsqd, =, 0, ;, for, (, qd, =]
[;, remainder, [, i, ], =, 0, ;, }, nsqd, =, 0, ;, for, (, qd, =, mant, ., length]
[=, 0, ;, }, nsqd, =, 0, ;, for, (, qd, =, mant, ., length, +, 1, ;, qd, >=]
[[, i, ], =, 0, ;, }, nsqd, =, 0, ;, for, (, qd, =, mant, ., length, +, 1]
[], =, 0, ;, }, nsqd, =, 0, ;, for, (, qd, =, mant, ., length, +, 1, ;, qd]
[;, }, nsqd, =, 0, ;, for, (, qd, =, mant, ., length, +, 1, ;, qd, >=, 0, ;]
[=, 0, ;, for, (, qd, =, mant, ., length, +, 1, ;, qd, >=, 0, ;, qd, --, )]
[;, for, (, qd, =, mant, ., length, +, 1, ;, qd, >=, 0, ;, qd, --, ), {, final]
[=, mant, ., length, +, 1, ;, qd, >=, 0, ;, qd, --, ), {, final, int, divMsb, =, dividend]
[;, qd, >=, 0, ;, qd, --, ), {, final, int, divMsb, =, dividend, [, mant, ., length, ], *]
[+, 1, ;, qd, >=, 0, ;, qd, --, ), {, final, int, divMsb, =, dividend, [, mant, ., length]
[., length, +, 1, ;, qd, >=, 0, ;, qd, --, ), {, final, int, divMsb, =, dividend, [, mant]
[;, qd, >=, 0, ;, qd, --, ), {, final, int, divMsb, =, dividend, [, mant, ., length, ], *]
[;, qd, --, ), {, final, int, divMsb, =, dividend, [, mant, ., length, ], *, RADIX, +, dividend, []
[>=, 0, ;, qd, --, ), {, final, int, divMsb, =, dividend, [, mant, ., length, ], *, RADIX, +]
[;, qd, --, ), {, final, int, divMsb, =, dividend, [, mant, ., length, ], *, RADIX, +, dividend, []
[), {, final, int, divMsb, =, dividend, [, mant, ., length, ], *, RADIX, +, dividend, [, mant, ., length]
[--, ), {, final, int, divMsb, =, dividend, [, mant, ., length, ], *, RADIX, +, dividend, [, mant, .]
[;, int, min, =, divMsb, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, )]
[+, dividend, [, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /, (, divisor, ., mant, []
[*, RADIX, +, dividend, [, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /, (, divisor, .]
[[, mant, ., length, ], *, RADIX, +, dividend, [, mant, ., length, -, 1, ], ;, int, min, =]
[], *, RADIX, +, dividend, [, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /, (, divisor]
[., length, ], *, RADIX, +, dividend, [, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /]
[+, dividend, [, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /, (, divisor, ., mant, []
[;, int, min, =, divMsb, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, )]
[[, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /, (, divisor, ., mant, [, mant, .]
[], ;, int, min, =, divMsb, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1]
[-, 1, ], ;, int, min, =, divMsb, /, (, divisor, ., mant, [, mant, ., length, -, 1, ]]
[., length, -, 1, ], ;, int, min, =, divMsb, /, (, divisor, ., mant, [, mant, ., length, -]
[], ;, int, min, =, divMsb, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1]
[;, int, max, =, (, divMsb, +, 1, ), /, divisor, ., mant, [, mant, ., length, -, 1, ]]
[/, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, int, max, =, (]
[;, int, max, =, (, divMsb, +, 1, ), /, divisor, ., mant, [, mant, ., length, -, 1, ]]
[), ;, int, max, =, (, divMsb, +, 1, ), /, divisor, ., mant, [, mant, ., length, -, 1]
[+, 1, ), ;, int, max, =, (, divMsb, +, 1, ), /, divisor, ., mant, [, mant, ., length]
[[, mant, ., length, -, 1, ], +, 1, ), ;, int, max, =, (, divMsb, +, 1, ), /]
[., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, int, max, =, (, divMsb, +, 1]
[], +, 1, ), ;, int, max, =, (, divMsb, +, 1, ), /, divisor, ., mant, [, mant, .]
[-, 1, ], +, 1, ), ;, int, max, =, (, divMsb, +, 1, ), /, divisor, ., mant, []
[., length, -, 1, ], +, 1, ), ;, int, max, =, (, divMsb, +, 1, ), /, divisor, .]
[], +, 1, ), ;, int, max, =, (, divMsb, +, 1, ), /, divisor, ., mant, [, mant, .]
[), ;, int, max, =, (, divMsb, +, 1, ), /, divisor, ., mant, [, mant, ., length, -, 1]
[;, trialgood, =, false, ;, while, (, !, trialgood, ), {, trial, =, (, min, +, max, ), /, 2]
[/, divisor, ., mant, [, mant, ., length, -, 1, ], ;, trialgood, =, false, ;, while, (, !, trialgood]
[), /, divisor, ., mant, [, mant, ., length, -, 1, ], ;, trialgood, =, false, ;, while, (, !]
[+, 1, ), /, divisor, ., mant, [, mant, ., length, -, 1, ], ;, trialgood, =, false, ;, while]
[), /, divisor, ., mant, [, mant, ., length, -, 1, ], ;, trialgood, =, false, ;, while, (, !]
[;, trialgood, =, false, ;, while, (, !, trialgood, ), {, trial, =, (, min, +, max, ), /, 2]
[[, mant, ., length, -, 1, ], ;, trialgood, =, false, ;, while, (, !, trialgood, ), {, trial, =]
[., mant, [, mant, ., length, -, 1, ], ;, trialgood, =, false, ;, while, (, !, trialgood, ), {]
[], ;, trialgood, =, false, ;, while, (, !, trialgood, ), {, trial, =, (, min, +, max, ), /]
[-, 1, ], ;, trialgood, =, false, ;, while, (, !, trialgood, ), {, trial, =, (, min, +, max]
[., length, -, 1, ], ;, trialgood, =, false, ;, while, (, !, trialgood, ), {, trial, =, (, min]
[], ;, trialgood, =, false, ;, while, (, !, trialgood, ), {, trial, =, (, min, +, max, ), /]
[=, false, ;, while, (, !, trialgood, ), {, trial, =, (, min, +, max, ), /, 2, ;, int]
[;, while, (, !, trialgood, ), {, trial, =, (, min, +, max, ), /, 2, ;, int, rh, =]
[), {, trial, =, (, min, +, max, ), /, 2, ;, int, rh, =, 0, ;, for, (, int]
[), {, trial, =, (, min, +, max, ), /, 2, ;, int, rh, =, 0, ;, for, (, int]
[=, (, min, +, max, ), /, 2, ;, int, rh, =, 0, ;, for, (, int, i, =, 0]
[;, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +, 1]
[/, 2, ;, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length]
[), /, 2, ;, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, .]
[+, max, ), /, 2, ;, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), /, 2, ;, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, .]
[;, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +, 1]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {]
[;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, int, dm, =, (, i, <, mant]
[;, i, ++, ), {, int, dm, =, (, i, <, mant, ., length, ), ?, divisor, ., mant, []
[<, mant, ., length, +, 1, ;, i, ++, ), {, int, dm, =, (, i, <, mant, ., length]
[;, i, ++, ), {, int, dm, =, (, i, <, mant, ., length, ), ?, divisor, ., mant, []
[+, 1, ;, i, ++, ), {, int, dm, =, (, i, <, mant, ., length, ), ?, divisor, .]
[., length, +, 1, ;, i, ++, ), {, int, dm, =, (, i, <, mant, ., length, ), ?]
[;, i, ++, ), {, int, dm, =, (, i, <, mant, ., length, ), ?, divisor, ., mant, []
[), {, int, dm, =, (, i, <, mant, ., length, ), ?, divisor, ., mant, [, i, ], :]
[++, ), {, int, dm, =, (, i, <, mant, ., length, ), ?, divisor, ., mant, [, i, ]]
[;, final, int, r, =, (, dm, *, trial, ), +, rh, ;, rh, =, r, /, RADIX, ;, remainder]
[?, divisor, ., mant, [, i, ], :, 0, ;, final, int, r, =, (, dm, *, trial, ), +]
[), ?, divisor, ., mant, [, i, ], :, 0, ;, final, int, r, =, (, dm, *, trial, )]
[<, mant, ., length, ), ?, divisor, ., mant, [, i, ], :, 0, ;, final, int, r, =, (]
[), ?, divisor, ., mant, [, i, ], :, 0, ;, final, int, r, =, (, dm, *, trial, )]
[., length, ), ?, divisor, ., mant, [, i, ], :, 0, ;, final, int, r, =, (, dm, *]
[:, 0, ;, final, int, r, =, (, dm, *, trial, ), +, rh, ;, rh, =, r, /, RADIX]
[[, i, ], :, 0, ;, final, int, r, =, (, dm, *, trial, ), +, rh, ;, rh, =]
[., mant, [, i, ], :, 0, ;, final, int, r, =, (, dm, *, trial, ), +, rh, ;]
[], :, 0, ;, final, int, r, =, (, dm, *, trial, ), +, rh, ;, rh, =, r, /]
[;, final, int, r, =, (, dm, *, trial, ), +, rh, ;, rh, =, r, /, RADIX, ;, remainder]
[;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, rh]
[+, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;]
[), +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX]
[*, trial, ), +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh]
[), +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX]
[;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, rh]
[=, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, rh, =, 1]
[;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, rh, =, 1, ;, for, (, int]
[/, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, rh, =, 1, ;, for]
[;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, rh, =, 1, ;, for, (, int]
[=, r, -, rh, *, RADIX, ;, }, rh, =, 1, ;, for, (, int, i, =, 0, ;, i]
[[, i, ], =, r, -, rh, *, RADIX, ;, }, rh, =, 1, ;, for, (, int, i, =]
[], =, r, -, rh, *, RADIX, ;, }, rh, =, 1, ;, for, (, int, i, =, 0, ;]
[;, }, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +, 1]
[-, rh, *, RADIX, ;, }, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <, mant]
[;, }, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +, 1]
[*, RADIX, ;, }, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length]
[;, }, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +, 1]
[=, 1, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +, 1, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {]
[;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, final, int, r, =, (, (, RADIX]
[;, i, ++, ), {, final, int, r, =, (, (, RADIX, -, 1, ), -, remainder, [, i, ]]
[<, mant, ., length, +, 1, ;, i, ++, ), {, final, int, r, =, (, (, RADIX, -, 1]
[;, i, ++, ), {, final, int, r, =, (, (, RADIX, -, 1, ), -, remainder, [, i, ]]
[+, 1, ;, i, ++, ), {, final, int, r, =, (, (, RADIX, -, 1, ), -, remainder, []
[., length, +, 1, ;, i, ++, ), {, final, int, r, =, (, (, RADIX, -, 1, ), -]
[;, i, ++, ), {, final, int, r, =, (, (, RADIX, -, 1, ), -, remainder, [, i, ]]
[), {, final, int, r, =, (, (, RADIX, -, 1, ), -, remainder, [, i, ], ), +, dividend]
[++, ), {, final, int, r, =, (, (, RADIX, -, 1, ), -, remainder, [, i, ], ), +]
[;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, if]
[+, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;]
[+, dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r]
[), +, dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =]
[-, remainder, [, i, ], ), +, dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[), -, remainder, [, i, ], ), +, dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX]
[-, 1, ), -, remainder, [, i, ], ), +, dividend, [, i, ], +, rh, ;, rh, =, r]
[), -, remainder, [, i, ], ), +, dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX]
[), +, dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =]
[[, i, ], ), +, dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, remainder, []
[], ), +, dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ]]
[+, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;]
[[, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh]
[], +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX]
[;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, if]
[=, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh]
[;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, ==, 0, ), {]
[/, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, ==, 0]
[;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, ==, 0, ), {]
[=, r, -, rh, *, RADIX, ;, }, if, (, rh, ==, 0, ), {, max, =, trial, -, 1]
[[, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, ==, 0, ), {, max, =]
[], =, r, -, rh, *, RADIX, ;, }, if, (, rh, ==, 0, ), {, max, =, trial, -]
[;, }, if, (, rh, ==, 0, ), {, max, =, trial, -, 1, ;, continue, ;, }, minadj, =]
[-, rh, *, RADIX, ;, }, if, (, rh, ==, 0, ), {, max, =, trial, -, 1, ;, continue]
[;, }, if, (, rh, ==, 0, ), {, max, =, trial, -, 1, ;, continue, ;, }, minadj, =]
[*, RADIX, ;, }, if, (, rh, ==, 0, ), {, max, =, trial, -, 1, ;, continue, ;, }]
[;, }, if, (, rh, ==, 0, ), {, max, =, trial, -, 1, ;, continue, ;, }, minadj, =]
[), {, max, =, trial, -, 1, ;, continue, ;, }, minadj, =, (, remainder, [, mant, ., length, ]]
[==, 0, ), {, max, =, trial, -, 1, ;, continue, ;, }, minadj, =, (, remainder, [, mant, .]
[), {, max, =, trial, -, 1, ;, continue, ;, }, minadj, =, (, remainder, [, mant, ., length, ]]
[=, trial, -, 1, ;, continue, ;, }, minadj, =, (, remainder, [, mant, ., length, ], *, RADIX, )]
[;, continue, ;, }, minadj, =, (, remainder, [, mant, ., length, ], *, RADIX, ), +, remainder, [, mant]
[-, 1, ;, continue, ;, }, minadj, =, (, remainder, [, mant, ., length, ], *, RADIX, ), +, remainder]
[;, continue, ;, }, minadj, =, (, remainder, [, mant, ., length, ], *, RADIX, ), +, remainder, [, mant]
[=, (, remainder, [, mant, ., length, ], *, RADIX, ), +, remainder, [, mant, ., length, -, 1, ]]
[;, minadj, =, minadj, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, ), ;]
[+, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (, divisor, ., mant, [, mant]
[), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (, divisor, ., mant, []
[*, RADIX, ), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (, divisor, .]
[[, mant, ., length, ], *, RADIX, ), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =]
[], *, RADIX, ), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (, divisor]
[., length, ], *, RADIX, ), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /]
[), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (, divisor, ., mant, []
[;, minadj, =, minadj, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, ), ;]
[[, mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (, divisor, ., mant, [, mant, ., length]
[], ;, minadj, =, minadj, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, )]
[-, 1, ], ;, minadj, =, minadj, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +]
[., length, -, 1, ], ;, minadj, =, minadj, /, (, divisor, ., mant, [, mant, ., length, -, 1]
[], ;, minadj, =, minadj, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, )]
[=, minadj, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, if, (]
[;, if, (, minadj, >=, 2, ), {, min, =, trial, +, minadj, ;, continue, ;, }, trialgood, =, false]
[/, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, if, (, minadj, >=]
[;, if, (, minadj, >=, 2, ), {, min, =, trial, +, minadj, ;, continue, ;, }, trialgood, =, false]
[), ;, if, (, minadj, >=, 2, ), {, min, =, trial, +, minadj, ;, continue, ;, }, trialgood, =]
[+, 1, ), ;, if, (, minadj, >=, 2, ), {, min, =, trial, +, minadj, ;, continue, ;, }]
[[, mant, ., length, -, 1, ], +, 1, ), ;, if, (, minadj, >=, 2, ), {, min, =]
[., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, if, (, minadj, >=, 2, ), {]
[], +, 1, ), ;, if, (, minadj, >=, 2, ), {, min, =, trial, +, minadj, ;, continue, ;]
[-, 1, ], +, 1, ), ;, if, (, minadj, >=, 2, ), {, min, =, trial, +, minadj, ;]
[., length, -, 1, ], +, 1, ), ;, if, (, minadj, >=, 2, ), {, min, =, trial, +]
[], +, 1, ), ;, if, (, minadj, >=, 2, ), {, min, =, trial, +, minadj, ;, continue, ;]
[), ;, if, (, minadj, >=, 2, ), {, min, =, trial, +, minadj, ;, continue, ;, }, trialgood, =]
[), {, min, =, trial, +, minadj, ;, continue, ;, }, trialgood, =, false, ;, for, (, int, i, =]
[>=, 2, ), {, min, =, trial, +, minadj, ;, continue, ;, }, trialgood, =, false, ;, for, (, int]
[), {, min, =, trial, +, minadj, ;, continue, ;, }, trialgood, =, false, ;, for, (, int, i, =]
[=, trial, +, minadj, ;, continue, ;, }, trialgood, =, false, ;, for, (, int, i, =, mant, ., length]
[;, continue, ;, }, trialgood, =, false, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i]
[+, minadj, ;, continue, ;, }, trialgood, =, false, ;, for, (, int, i, =, mant, ., length, -, 1]
[;, continue, ;, }, trialgood, =, false, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i]
[=, false, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --]
[;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, i, >=, 0, ;, i, --, ), {, if, (, divisor, ., mant, [, i, ], >, remainder, []
[-, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, divisor, ., mant, [, i, ], >]
[., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, divisor, ., mant, [, i]
[;, i, >=, 0, ;, i, --, ), {, if, (, divisor, ., mant, [, i, ], >, remainder, []
[;, i, --, ), {, if, (, divisor, ., mant, [, i, ], >, remainder, [, i, ], ), {]
[>=, 0, ;, i, --, ), {, if, (, divisor, ., mant, [, i, ], >, remainder, [, i, ]]
[;, i, --, ), {, if, (, divisor, ., mant, [, i, ], >, remainder, [, i, ], ), {]
[), {, if, (, divisor, ., mant, [, i, ], >, remainder, [, i, ], ), {, trialgood, =, true]
[--, ), {, if, (, divisor, ., mant, [, i, ], >, remainder, [, i, ], ), {, trialgood, =]
[), {, trialgood, =, true, ;, }, if, (, divisor, ., mant, [, i, ], <, remainder, [, i, ]]
[>, remainder, [, i, ], ), {, trialgood, =, true, ;, }, if, (, divisor, ., mant, [, i, ]]
[[, i, ], >, remainder, [, i, ], ), {, trialgood, =, true, ;, }, if, (, divisor, ., mant]
[., mant, [, i, ], >, remainder, [, i, ], ), {, trialgood, =, true, ;, }, if, (, divisor]
[], >, remainder, [, i, ], ), {, trialgood, =, true, ;, }, if, (, divisor, ., mant, [, i]
[), {, trialgood, =, true, ;, }, if, (, divisor, ., mant, [, i, ], <, remainder, [, i, ]]
[[, i, ], ), {, trialgood, =, true, ;, }, if, (, divisor, ., mant, [, i, ], <, remainder]
[], ), {, trialgood, =, true, ;, }, if, (, divisor, ., mant, [, i, ], <, remainder, [, i]
[=, true, ;, }, if, (, divisor, ., mant, [, i, ], <, remainder, [, i, ], ), {, break]
[;, }, if, (, divisor, ., mant, [, i, ], <, remainder, [, i, ], ), {, break, ;, }]
[), {, break, ;, }, }, if, (, remainder, [, mant, ., length, ], !=, 0, ), {, trialgood, =]
[<, remainder, [, i, ], ), {, break, ;, }, }, if, (, remainder, [, mant, ., length, ], !=]
[[, i, ], <, remainder, [, i, ], ), {, break, ;, }, }, if, (, remainder, [, mant, .]
[., mant, [, i, ], <, remainder, [, i, ], ), {, break, ;, }, }, if, (, remainder, []
[], <, remainder, [, i, ], ), {, break, ;, }, }, if, (, remainder, [, mant, ., length, ]]
[), {, break, ;, }, }, if, (, remainder, [, mant, ., length, ], !=, 0, ), {, trialgood, =]
[[, i, ], ), {, break, ;, }, }, if, (, remainder, [, mant, ., length, ], !=, 0, )]
[], ), {, break, ;, }, }, if, (, remainder, [, mant, ., length, ], !=, 0, ), {, trialgood]
[), {, trialgood, =, false, ;, }, if, (, trialgood, ==, false, ), {, min, =, trial, +, 1, ;]
[!=, 0, ), {, trialgood, =, false, ;, }, if, (, trialgood, ==, false, ), {, min, =, trial, +]
[[, mant, ., length, ], !=, 0, ), {, trialgood, =, false, ;, }, if, (, trialgood, ==, false, )]
[], !=, 0, ), {, trialgood, =, false, ;, }, if, (, trialgood, ==, false, ), {, min, =, trial]
[., length, ], !=, 0, ), {, trialgood, =, false, ;, }, if, (, trialgood, ==, false, ), {, min]
[), {, trialgood, =, false, ;, }, if, (, trialgood, ==, false, ), {, min, =, trial, +, 1, ;]
[=, false, ;, }, if, (, trialgood, ==, false, ), {, min, =, trial, +, 1, ;, }, }, quotient]
[;, }, if, (, trialgood, ==, false, ), {, min, =, trial, +, 1, ;, }, }, quotient, [, qd]
[), {, min, =, trial, +, 1, ;, }, }, quotient, [, qd, ], =, trial, ;, if, (, trial]
[==, false, ), {, min, =, trial, +, 1, ;, }, }, quotient, [, qd, ], =, trial, ;, if]
[), {, min, =, trial, +, 1, ;, }, }, quotient, [, qd, ], =, trial, ;, if, (, trial]
[=, trial, +, 1, ;, }, }, quotient, [, qd, ], =, trial, ;, if, (, trial, !=, 0, ||]
[;, }, }, quotient, [, qd, ], =, trial, ;, if, (, trial, !=, 0, ||, nsqd, !=, 0, )]
[+, 1, ;, }, }, quotient, [, qd, ], =, trial, ;, if, (, trial, !=, 0, ||, nsqd, !=]
[;, }, }, quotient, [, qd, ], =, trial, ;, if, (, trial, !=, 0, ||, nsqd, !=, 0, )]
[=, trial, ;, if, (, trial, !=, 0, ||, nsqd, !=, 0, ), {, nsqd, ++, ;, }, if, (]
[[, qd, ], =, trial, ;, if, (, trial, !=, 0, ||, nsqd, !=, 0, ), {, nsqd, ++, ;]
[], =, trial, ;, if, (, trial, !=, 0, ||, nsqd, !=, 0, ), {, nsqd, ++, ;, }, if]
[;, if, (, trial, !=, 0, ||, nsqd, !=, 0, ), {, nsqd, ++, ;, }, if, (, field, .]
[), {, nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&]
[||, nsqd, !=, 0, ), {, nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==, DfpField, .]
[!=, 0, ||, nsqd, !=, 0, ), {, nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==]
[||, nsqd, !=, 0, ), {, nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==, DfpField, .]
[), {, nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&]
[!=, 0, ), {, nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==, DfpField, ., RoundingMode, .]
[), {, nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&]
[;, }, if, (, field, ., getRoundingMode, (, ), ==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&, nsqd, ==, mant, .]
[++, ;, }, if, (, field, ., getRoundingMode, (, ), ==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&, nsqd, ==, mant]
[), {, break, ;, }, if, (, nsqd, >, mant, ., length, ), {, break, ;, }, dividend, [, 0]
[&&, nsqd, ==, mant, ., length, ), {, break, ;, }, if, (, nsqd, >, mant, ., length, ), {]
[==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&, nsqd, ==, mant, ., length, ), {, break, ;, }, if, (, nsqd]
[., getRoundingMode, (, ), ==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&, nsqd, ==, mant, ., length, ), {, break, ;]
[&&, nsqd, ==, mant, ., length, ), {, break, ;, }, if, (, nsqd, >, mant, ., length, ), {]
[., ROUND_DOWN, &&, nsqd, ==, mant, ., length, ), {, break, ;, }, if, (, nsqd, >, mant, ., length]
[., RoundingMode, ., ROUND_DOWN, &&, nsqd, ==, mant, ., length, ), {, break, ;, }, if, (, nsqd, >, mant]
[), {, break, ;, }, if, (, nsqd, >, mant, ., length, ), {, break, ;, }, dividend, [, 0]
[==, mant, ., length, ), {, break, ;, }, if, (, nsqd, >, mant, ., length, ), {, break, ;]
[), {, break, ;, }, if, (, nsqd, >, mant, ., length, ), {, break, ;, }, dividend, [, 0]
[., length, ), {, break, ;, }, if, (, nsqd, >, mant, ., length, ), {, break, ;, }, dividend]
[), {, break, ;, }, dividend, [, 0, ], =, 0, ;, for, (, int, i, =, 0, ;, i]
[>, mant, ., length, ), {, break, ;, }, dividend, [, 0, ], =, 0, ;, for, (, int, i]
[), {, break, ;, }, dividend, [, 0, ], =, 0, ;, for, (, int, i, =, 0, ;, i]
[., length, ), {, break, ;, }, dividend, [, 0, ], =, 0, ;, for, (, int, i, =, 0]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[[, 0, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i]
[], =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, dividend, []
[;, i, <, mant, ., length, ;, i, ++, ), {, dividend, [, i, +, 1, ], =, remainder, []
[;, i, ++, ), {, dividend, [, i, +, 1, ], =, remainder, [, i, ], ;, }, }, md]
[<, mant, ., length, ;, i, ++, ), {, dividend, [, i, +, 1, ], =, remainder, [, i, ]]
[;, i, ++, ), {, dividend, [, i, +, 1, ], =, remainder, [, i, ], ;, }, }, md]
[., length, ;, i, ++, ), {, dividend, [, i, +, 1, ], =, remainder, [, i, ], ;, }]
[), {, dividend, [, i, +, 1, ], =, remainder, [, i, ], ;, }, }, md, =, mant, .]
[++, ), {, dividend, [, i, +, 1, ], =, remainder, [, i, ], ;, }, }, md, =, mant]
[=, remainder, [, i, ], ;, }, }, md, =, mant, ., length, ;, for, (, int, i, =, mant]
[[, i, +, 1, ], =, remainder, [, i, ], ;, }, }, md, =, mant, ., length, ;, for]
[], =, remainder, [, i, ], ;, }, }, md, =, mant, ., length, ;, for, (, int, i, =]
[+, 1, ], =, remainder, [, i, ], ;, }, }, md, =, mant, ., length, ;, for, (, int]
[], =, remainder, [, i, ], ;, }, }, md, =, mant, ., length, ;, for, (, int, i, =]
[;, }, }, md, =, mant, ., length, ;, for, (, int, i, =, mant, ., length, +, 1, ;]
[[, i, ], ;, }, }, md, =, mant, ., length, ;, for, (, int, i, =, mant, ., length]
[], ;, }, }, md, =, mant, ., length, ;, for, (, int, i, =, mant, ., length, +, 1]
[=, mant, ., length, ;, for, (, int, i, =, mant, ., length, +, 1, ;, i, >=, 0, ;]
[;, for, (, int, i, =, mant, ., length, +, 1, ;, i, >=, 0, ;, i, --, ), {]
[., length, ;, for, (, int, i, =, mant, ., length, +, 1, ;, i, >=, 0, ;, i, --]
[;, i, >=, 0, ;, i, --, ), {, if, (, quotient, [, i, ], !=, 0, ), {, md]
[+, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, quotient, [, i, ], !=, 0, )]
[., length, +, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, quotient, [, i, ], !=]
[;, i, >=, 0, ;, i, --, ), {, if, (, quotient, [, i, ], !=, 0, ), {, md]
[;, i, --, ), {, if, (, quotient, [, i, ], !=, 0, ), {, md, =, i, ;, break]
[>=, 0, ;, i, --, ), {, if, (, quotient, [, i, ], !=, 0, ), {, md, =, i]
[;, i, --, ), {, if, (, quotient, [, i, ], !=, 0, ), {, md, =, i, ;, break]
[), {, if, (, quotient, [, i, ], !=, 0, ), {, md, =, i, ;, break, ;, }, }]
[--, ), {, if, (, quotient, [, i, ], !=, 0, ), {, md, =, i, ;, break, ;, }]
[), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <, mant]
[!=, 0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i]
[[, i, ], !=, 0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =]
[], !=, 0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;]
[), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <, mant]
[=, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++]
[;, i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i]
[;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, quotient, []
[<, mant, ., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1]
[;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, quotient, []
[., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =]
[), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, quotient, [, md, -, i]
[++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, quotient, [, md, -]
[=, quotient, [, md, -, i, ], ;, }, result, ., exp, =, exp, -, divisor, ., exp, +, md]
[[, mant, ., length, -, i, -, 1, ], =, quotient, [, md, -, i, ], ;, }, result, .]
[., mant, [, mant, ., length, -, i, -, 1, ], =, quotient, [, md, -, i, ], ;, }]
[], =, quotient, [, md, -, i, ], ;, }, result, ., exp, =, exp, -, divisor, ., exp, +]
[-, 1, ], =, quotient, [, md, -, i, ], ;, }, result, ., exp, =, exp, -, divisor, .]
[-, i, -, 1, ], =, quotient, [, md, -, i, ], ;, }, result, ., exp, =, exp, -]
[., length, -, i, -, 1, ], =, quotient, [, md, -, i, ], ;, }, result, ., exp, =]
[-, 1, ], =, quotient, [, md, -, i, ], ;, }, result, ., exp, =, exp, -, divisor, .]
[], =, quotient, [, md, -, i, ], ;, }, result, ., exp, =, exp, -, divisor, ., exp, +]
[;, }, result, ., exp, =, exp, -, divisor, ., exp, +, md, -, mant, ., length, ;, result, .]
[[, md, -, i, ], ;, }, result, ., exp, =, exp, -, divisor, ., exp, +, md, -, mant]
[], ;, }, result, ., exp, =, exp, -, divisor, ., exp, +, md, -, mant, ., length, ;, result]
[-, i, ], ;, }, result, ., exp, =, exp, -, divisor, ., exp, +, md, -, mant, ., length]
[], ;, }, result, ., exp, =, exp, -, divisor, ., exp, +, md, -, mant, ., length, ;, result]
[=, exp, -, divisor, ., exp, +, md, -, mant, ., length, ;, result, ., sign, =, (, byte, )]
[., exp, =, exp, -, divisor, ., exp, +, md, -, mant, ., length, ;, result, ., sign, =, (]
[;, result, ., sign, =, (, byte, ), (, (, sign, ==, divisor, ., sign, ), ?, 1, :, -]
[-, mant, ., length, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, divisor, ., sign, )]
[+, md, -, mant, ., length, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, divisor, .]
[-, divisor, ., exp, +, md, -, mant, ., length, ;, result, ., sign, =, (, byte, ), (, (]
[+, md, -, mant, ., length, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, divisor, .]
[., exp, +, md, -, mant, ., length, ;, result, ., sign, =, (, byte, ), (, (, sign, ==]
[-, mant, ., length, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, divisor, ., sign, )]
[;, result, ., sign, =, (, byte, ), (, (, sign, ==, divisor, ., sign, ), ?, 1, :, -]
[., length, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, divisor, ., sign, ), ?, 1]
[=, (, byte, ), (, (, sign, ==, divisor, ., sign, ), ?, 1, :, -, 1, ), ;, if]
[., sign, =, (, byte, ), (, (, sign, ==, divisor, ., sign, ), ?, 1, :, -, 1, )]
[;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp]
[;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp]
[), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, .]
[?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==]
[), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ]]
[==, divisor, ., sign, ), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, .]
[), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ]]
[., sign, ), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -]
[:, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, )]
[), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, .]
[), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, .]
[), {, result, ., exp, =, 0, ;, }, if, (, md, >, (, mant, ., length, -, 1, )]
[==, 0, ), {, result, ., exp, =, 0, ;, }, if, (, md, >, (, mant, ., length, -]
[[, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, if, (]
[., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }]
[], ==, 0, ), {, result, ., exp, =, 0, ;, }, if, (, md, >, (, mant, ., length]
[-, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, if, (, md, >, (, mant]
[., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, if, (, md, >]
[], ==, 0, ), {, result, ., exp, =, 0, ;, }, if, (, md, >, (, mant, ., length]
[), {, result, ., exp, =, 0, ;, }, if, (, md, >, (, mant, ., length, -, 1, )]
[=, 0, ;, }, if, (, md, >, (, mant, ., length, -, 1, ), ), {, excp, =, result]
[., exp, =, 0, ;, }, if, (, md, >, (, mant, ., length, -, 1, ), ), {, excp]
[;, }, if, (, md, >, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round]
[), {, excp, =, result, ., round, (, quotient, [, md, -, mant, ., length, ], ), ;, }, else]
[>, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (, quotient, [, md, -]
[), {, excp, =, result, ., round, (, quotient, [, md, -, mant, ., length, ], ), ;, }, else]
[), ), {, excp, =, result, ., round, (, quotient, [, md, -, mant, ., length, ], ), ;, }]
[-, 1, ), ), {, excp, =, result, ., round, (, quotient, [, md, -, mant, ., length, ], )]
[., length, -, 1, ), ), {, excp, =, result, ., round, (, quotient, [, md, -, mant, ., length]
[), ), {, excp, =, result, ., round, (, quotient, [, md, -, mant, ., length, ], ), ;, }]
[=, result, ., round, (, quotient, [, md, -, mant, ., length, ], ), ;, }, else, {, excp, =]
[;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=, 0, )]
[., round, (, quotient, [, md, -, mant, ., length, ], ), ;, }, else, {, excp, =, result, .]
[), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=, 0]
[[, md, -, mant, ., length, ], ), ;, }, else, {, excp, =, result, ., round, (, 0, )]
[], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=]
[-, mant, ., length, ], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }]
[], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=]
[., length, ], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (]
[=, result, ., round, (, 0, ), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (]
[;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, divisor, ,, result]
[., round, (, 0, ), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,]
[), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, divisor, ,]
[), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, return, result, ;, }]
[!=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, return, result]
[), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, return, result, ;, }]
[=, dotrap, (, excp, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, return, result, ;, }, public, Dfp, divide]
[;, }, return, result, ;, }, public, Dfp, divide, (, int, divisor, ), {, if, (, nans, !=, FINITE, )]
[,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, return, result, ;, }, public, Dfp, divide, (, int, divisor, )]
[,, divisor, ,, result, ), ;, }, return, result, ;, }, public, Dfp, divide, (, int, divisor, ), {, if]
[,, result, ), ;, }, return, result, ;, }, public, Dfp, divide, (, int, divisor, ), {, if, (, nans]
[), ;, }, return, result, ;, }, public, Dfp, divide, (, int, divisor, ), {, if, (, nans, !=, FINITE]
[;, }, public, Dfp, divide, (, int, divisor, ), {, if, (, nans, !=, FINITE, ), {, if, (, isNaN]
[), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==, INFINITE, ), {]
[!=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==, INFINITE]
[), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==, INFINITE, ), {]
[), {, return, this, ;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }]
[;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, }, if, (, divisor]
[), {, return, newInstance, (, this, ), ;, }, }, if, (, divisor, ==, 0, ), {, field, ., setIEEEFlagsBits]
[==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, }, if, (, divisor, ==, 0, ), {, field]
[), {, return, newInstance, (, this, ), ;, }, }, if, (, divisor, ==, 0, ), {, field, ., setIEEEFlagsBits]
[;, }, }, if, (, divisor, ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, Dfp]
[), ;, }, }, if, (, divisor, ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), )]
[==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, Dfp, result, =, newInstance, (, getZero, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), )]
[;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, sign, ;, result, ., nans]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, .]
[), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, sign, ;, result, .]
[., FLAG_DIV_ZERO, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, sign, ;]
[;, result, ., sign, =, sign, ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO]
[), ;, result, ., sign, =, sign, ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, .]
[=, sign, ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero]
[., sign, =, sign, ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP]
[;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero, (, )]
[=, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero, (, ), ,, result, ), ;]
[., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero, (, ), ,, result]
[;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero, (, ), ,, result, ), ;, return, result]
[=, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero, (, ), ,, result, ), ;, return, result, ;, }]
[;, return, result, ;, }, if, (, divisor, <, 0, ||, divisor, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (]
[,, DIVIDE_TRAP, ,, getZero, (, ), ,, result, ), ;, return, result, ;, }, if, (, divisor, <, 0, ||]
[., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero, (, ), ,, result, ), ;, return, result, ;, }, if, (, divisor, <]
[,, getZero, (, ), ,, result, ), ;, return, result, ;, }, if, (, divisor, <, 0, ||, divisor, >=]
[,, result, ), ;, return, result, ;, }, if, (, divisor, <, 0, ||, divisor, >=, RADIX, ), {, field]
[), ;, return, result, ;, }, if, (, divisor, <, 0, ||, divisor, >=, RADIX, ), {, field, ., setIEEEFlagsBits]
[;, }, if, (, divisor, <, 0, ||, divisor, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), )]
[||, divisor, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (]
[<, 0, ||, divisor, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =]
[||, divisor, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), )]
[>=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), )]
[;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, .]
[), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =]
[., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;]
[;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, result, ,, result]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, result, ,]
[=, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, result, ,, result, ), ;, return, result]
[., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, result, ,, result, ), ;]
[;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, result, ,, result, ), ;, return, result, ;, }]
[=, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, result, ,, result, ), ;, return, result, ;, }, Dfp, result]
[;, return, result, ;, }, Dfp, result, =, newInstance, (, this, ), ;, int, rl, =, 0, ;, for, (]
[,, DIVIDE_TRAP, ,, result, ,, result, ), ;, return, result, ;, }, Dfp, result, =, newInstance, (, this, ), ;]
[., FLAG_INVALID, ,, DIVIDE_TRAP, ,, result, ,, result, ), ;, return, result, ;, }, Dfp, result, =, newInstance, (, this]
[,, result, ,, result, ), ;, return, result, ;, }, Dfp, result, =, newInstance, (, this, ), ;, int, rl]
[,, result, ), ;, return, result, ;, }, Dfp, result, =, newInstance, (, this, ), ;, int, rl, =, 0]
[), ;, return, result, ;, }, Dfp, result, =, newInstance, (, this, ), ;, int, rl, =, 0, ;, for]
[;, }, Dfp, result, =, newInstance, (, this, ), ;, int, rl, =, 0, ;, for, (, int, i, =]
[;, int, rl, =, 0, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0]
[), ;, int, rl, =, 0, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=]
[;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, i, >=, 0, ;, i, --, ), {, final, int, r, =, rl, *, RADIX, +, result, ., mant]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, final, int, r, =, rl, *, RADIX, +, result]
[., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, final, int, r, =, rl, *, RADIX]
[;, i, >=, 0, ;, i, --, ), {, final, int, r, =, rl, *, RADIX, +, result, ., mant]
[;, i, --, ), {, final, int, r, =, rl, *, RADIX, +, result, ., mant, [, i, ], ;]
[>=, 0, ;, i, --, ), {, final, int, r, =, rl, *, RADIX, +, result, ., mant, [, i]
[;, i, --, ), {, final, int, r, =, rl, *, RADIX, +, result, ., mant, [, i, ], ;]
[), {, final, int, r, =, rl, *, RADIX, +, result, ., mant, [, i, ], ;, final, int, rh]
[--, ), {, final, int, r, =, rl, *, RADIX, +, result, ., mant, [, i, ], ;, final, int]
[;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;, result, ., mant]
[+, result, ., mant, [, i, ], ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -]
[*, RADIX, +, result, ., mant, [, i, ], ;, final, int, rh, =, r, /, divisor, ;, rl, =]
[+, result, ., mant, [, i, ], ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -]
[;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;, result, ., mant]
[[, i, ], ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;]
[., mant, [, i, ], ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *]
[], ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;, result, .]
[;, rl, =, r, -, rh, *, divisor, ;, result, ., mant, [, i, ], =, rh, ;, }, if]
[/, divisor, ;, rl, =, r, -, rh, *, divisor, ;, result, ., mant, [, i, ], =, rh, ;]
[;, rl, =, r, -, rh, *, divisor, ;, result, ., mant, [, i, ], =, rh, ;, }, if]
[=, r, -, rh, *, divisor, ;, result, ., mant, [, i, ], =, rh, ;, }, if, (, result]
[;, result, ., mant, [, i, ], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length]
[-, rh, *, divisor, ;, result, ., mant, [, i, ], =, rh, ;, }, if, (, result, ., mant]
[;, result, ., mant, [, i, ], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length]
[*, divisor, ;, result, ., mant, [, i, ], =, rh, ;, }, if, (, result, ., mant, [, mant]
[;, result, ., mant, [, i, ], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length]
[=, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[[, i, ], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==]
[., mant, [, i, ], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1]
[], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, )]
[;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, .]
[), {, result, ., shiftLeft, (, ), ;, final, int, r, =, rl, *, RADIX, ;, final, int, rh, =]
[==, 0, ), {, result, ., shiftLeft, (, ), ;, final, int, r, =, rl, *, RADIX, ;, final, int]
[[, mant, ., length, -, 1, ], ==, 0, ), {, result, ., shiftLeft, (, ), ;, final, int, r]
[., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., shiftLeft, (, ), ;, final]
[], ==, 0, ), {, result, ., shiftLeft, (, ), ;, final, int, r, =, rl, *, RADIX, ;, final]
[-, 1, ], ==, 0, ), {, result, ., shiftLeft, (, ), ;, final, int, r, =, rl, *, RADIX]
[., length, -, 1, ], ==, 0, ), {, result, ., shiftLeft, (, ), ;, final, int, r, =, rl]
[], ==, 0, ), {, result, ., shiftLeft, (, ), ;, final, int, r, =, rl, *, RADIX, ;, final]
[), {, result, ., shiftLeft, (, ), ;, final, int, r, =, rl, *, RADIX, ;, final, int, rh, =]
[;, final, int, r, =, rl, *, RADIX, ;, final, int, rh, =, r, /, divisor, ;, rl, =, r]
[., shiftLeft, (, ), ;, final, int, r, =, rl, *, RADIX, ;, final, int, rh, =, r, /, divisor]
[;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;, result, ., mant]
[*, RADIX, ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;, result]
[;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;, result, ., mant]
[;, rl, =, r, -, rh, *, divisor, ;, result, ., mant, [, 0, ], =, rh, ;, }, final]
[/, divisor, ;, rl, =, r, -, rh, *, divisor, ;, result, ., mant, [, 0, ], =, rh, ;]
[;, rl, =, r, -, rh, *, divisor, ;, result, ., mant, [, 0, ], =, rh, ;, }, final]
[=, r, -, rh, *, divisor, ;, result, ., mant, [, 0, ], =, rh, ;, }, final, int, excp]
[;, result, ., mant, [, 0, ], =, rh, ;, }, final, int, excp, =, result, ., round, (, rl]
[-, rh, *, divisor, ;, result, ., mant, [, 0, ], =, rh, ;, }, final, int, excp, =, result]
[;, result, ., mant, [, 0, ], =, rh, ;, }, final, int, excp, =, result, ., round, (, rl]
[*, divisor, ;, result, ., mant, [, 0, ], =, rh, ;, }, final, int, excp, =, result, ., round]
[;, result, ., mant, [, 0, ], =, rh, ;, }, final, int, excp, =, result, ., round, (, rl]
[=, rh, ;, }, final, int, excp, =, result, ., round, (, rl, *, RADIX, /, divisor, ), ;, if]
[[, 0, ], =, rh, ;, }, final, int, excp, =, result, ., round, (, rl, *, RADIX, /, divisor]
[., mant, [, 0, ], =, rh, ;, }, final, int, excp, =, result, ., round, (, rl, *, RADIX]
[], =, rh, ;, }, final, int, excp, =, result, ., round, (, rl, *, RADIX, /, divisor, ), ;]
[;, }, final, int, excp, =, result, ., round, (, rl, *, RADIX, /, divisor, ), ;, if, (, excp]
[;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, result, ,, result, )]
[., round, (, rl, *, RADIX, /, divisor, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap]
[), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, result, ,, result]
[/, divisor, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, result]
[*, RADIX, /, divisor, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP]
[/, divisor, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, result]
[), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, result, ,, result]
[), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, result, ,, result, ), ;, }, return, result, ;, }]
[!=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, result, ,, result, ), ;, }, return, result]
[), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, result, ,, result, ), ;, }, return, result, ;, }]
[=, dotrap, (, excp, ,, DIVIDE_TRAP, ,, result, ,, result, ), ;, }, return, result, ;, }, public, Dfp, reciprocal]
[;, }, return, result, ;, }, public, Dfp, reciprocal, (, ), {, return, field, ., getOne, (, ), ., divide]
[,, DIVIDE_TRAP, ,, result, ,, result, ), ;, }, return, result, ;, }, public, Dfp, reciprocal, (, ), {, return]
[,, result, ,, result, ), ;, }, return, result, ;, }, public, Dfp, reciprocal, (, ), {, return, field, .]
[,, result, ), ;, }, return, result, ;, }, public, Dfp, reciprocal, (, ), {, return, field, ., getOne, (]
[), ;, }, return, result, ;, }, public, Dfp, reciprocal, (, ), {, return, field, ., getOne, (, ), .]
[;, }, public, Dfp, reciprocal, (, ), {, return, field, ., getOne, (, ), ., divide, (, this, ), ;]
[;, }, public, Dfp, sqrt, (, ), {, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -]
[., divide, (, this, ), ;, }, public, Dfp, sqrt, (, ), {, if, (, nans, ==, FINITE, &&, mant]
[., getOne, (, ), ., divide, (, this, ), ;, }, public, Dfp, sqrt, (, ), {, if, (, nans]
[), ;, }, public, Dfp, sqrt, (, ), {, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length]
[), {, return, newInstance, (, this, ), ;, }, if, (, nans, !=, FINITE, ), {, if, (, nans, ==]
[&&, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }]
[==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this, )]
[&&, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }]
[), {, return, newInstance, (, this, ), ;, }, if, (, nans, !=, FINITE, ), {, if, (, nans, ==]
[==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, !=, FINITE, ), {, if, (]
[[, mant, ., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (]
[], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, !=, FINITE, ), {, if]
[-, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, !=, FINITE, )]
[., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, !=]
[], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, !=, FINITE, ), {, if]
[), {, return, newInstance, (, this, ), ;, }, if, (, nans, !=, FINITE, ), {, if, (, nans, ==]
[;, }, if, (, nans, !=, FINITE, ), {, if, (, nans, ==, INFINITE, &&, sign, ==, 1, ), {]
[), ;, }, if, (, nans, !=, FINITE, ), {, if, (, nans, ==, INFINITE, &&, sign, ==, 1, )]
[), {, if, (, nans, ==, INFINITE, &&, sign, ==, 1, ), {, return, newInstance, (, this, ), ;, }]
[!=, FINITE, ), {, if, (, nans, ==, INFINITE, &&, sign, ==, 1, ), {, return, newInstance, (, this, )]
[), {, if, (, nans, ==, INFINITE, &&, sign, ==, 1, ), {, return, newInstance, (, this, ), ;, }]
[), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, QNAN, ), {, return, newInstance, (, this]
[&&, sign, ==, 1, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, QNAN, ), {]
[==, INFINITE, &&, sign, ==, 1, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, QNAN]
[&&, sign, ==, 1, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, QNAN, ), {]
[), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, QNAN, ), {, return, newInstance, (, this]
[==, 1, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, QNAN, ), {, return, newInstance]
[), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, QNAN, ), {, return, newInstance, (, this]
[;, }, if, (, nans, ==, QNAN, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==]
[), ;, }, if, (, nans, ==, QNAN, ), {, return, newInstance, (, this, ), ;, }, if, (, nans]
[), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, SNAN, ), {, Dfp, result, ;, field]
[==, QNAN, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, SNAN, ), {, Dfp, result]
[), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, SNAN, ), {, Dfp, result, ;, field]
[;, }, if, (, nans, ==, SNAN, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[), ;, }, if, (, nans, ==, SNAN, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID]
[), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, )]
[==, SNAN, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (]
[), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, )]
[;, result, =, newInstance, (, this, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, =, dotrap, (, DfpField]
[), ;, result, =, newInstance, (, this, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null]
[., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP]
[=, newInstance, (, this, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, )]
[;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }]
[), ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;]
[=, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }, }, if]
[;, return, result, ;, }, }, if, (, sign, ==, -, 1, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits]
[,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }, }, if, (, sign, ==, -, 1, )]
[., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }, }, if, (, sign, ==, -]
[,, null, ,, result, ), ;, return, result, ;, }, }, if, (, sign, ==, -, 1, ), {, Dfp]
[,, result, ), ;, return, result, ;, }, }, if, (, sign, ==, -, 1, ), {, Dfp, result, ;]
[), ;, return, result, ;, }, }, if, (, sign, ==, -, 1, ), {, Dfp, result, ;, field, .]
[;, }, }, if, (, sign, ==, -, 1, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, .]
[), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, )]
[==, -, 1, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance]
[), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, )]
[), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, )]
[;, result, =, newInstance, (, this, ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, .]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, ., nans, =, QNAN]
[), ;, result, =, newInstance, (, this, ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField]
[., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap]
[=, newInstance, (, this, ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,]
[=, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result]
[., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;]
[;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }]
[=, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }, Dfp, x]
[;, return, result, ;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (, x, ., exp, <, -]
[,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }, Dfp, x, =, newInstance, (, this, ), ;]
[., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }, Dfp, x, =, newInstance, (, this]
[,, null, ,, result, ), ;, return, result, ;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (]
[,, result, ), ;, return, result, ;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (, x, .]
[), ;, return, result, ;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (, x, ., exp, <]
[;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (, x, ., exp, <, -, 1, ||, x]
[;, if, (, x, ., exp, <, -, 1, ||, x, ., exp, >, 1, ), {, x, ., exp]
[), ;, if, (, x, ., exp, <, -, 1, ||, x, ., exp, >, 1, ), {, x, .]
[), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch, (, x, ., mant, [, mant]
[||, x, ., exp, >, 1, ), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch]
[<, -, 1, ||, x, ., exp, >, 1, ), {, x, ., exp, =, this, ., exp, /, 2]
[., exp, <, -, 1, ||, x, ., exp, >, 1, ), {, x, ., exp, =, this, ., exp]
[||, x, ., exp, >, 1, ), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch]
[||, x, ., exp, >, 1, ), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch]
[), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch, (, x, ., mant, [, mant]
[>, 1, ), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch, (, x, ., mant]
[., exp, >, 1, ), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch, (, x]
[), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch, (, x, ., mant, [, mant]
[=, this, ., exp, /, 2, ;, }, switch, (, x, ., mant, [, mant, ., length, -, 1, ]]
[., exp, =, this, ., exp, /, 2, ;, }, switch, (, x, ., mant, [, mant, ., length, -]
[;, }, switch, (, x, ., mant, [, mant, ., length, -, 1, ], /, 2000, ), {, case, 0]
[/, 2, ;, }, switch, (, x, ., mant, [, mant, ., length, -, 1, ], /, 2000, ), {]
[., exp, /, 2, ;, }, switch, (, x, ., mant, [, mant, ., length, -, 1, ], /, 2000]
[;, }, switch, (, x, ., mant, [, mant, ., length, -, 1, ], /, 2000, ), {, case, 0]
[), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ], =, x, ., mant, []
[/, 2000, ), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ], =, x, .]
[[, mant, ., length, -, 1, ], /, 2000, ), {, case, 0, :, x, ., mant, [, mant, .]
[., mant, [, mant, ., length, -, 1, ], /, 2000, ), {, case, 0, :, x, ., mant, []
[], /, 2000, ), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ], =, x]
[-, 1, ], /, 2000, ), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ]]
[., length, -, 1, ], /, 2000, ), {, case, 0, :, x, ., mant, [, mant, ., length, -]
[], /, 2000, ), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ], =, x]
[), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ], =, x, ., mant, []
[:, x, ., mant, [, mant, ., length, -, 1, ], =, x, ., mant, [, mant, ., length, -]
[=, x, ., mant, [, mant, ., length, -, 1, ], /, 2, +, 1, ;, break, ;, case, 2]
[[, mant, ., length, -, 1, ], =, x, ., mant, [, mant, ., length, -, 1, ], /, 2]
[., mant, [, mant, ., length, -, 1, ], =, x, ., mant, [, mant, ., length, -, 1, ]]
[], =, x, ., mant, [, mant, ., length, -, 1, ], /, 2, +, 1, ;, break, ;, case]
[-, 1, ], =, x, ., mant, [, mant, ., length, -, 1, ], /, 2, +, 1, ;, break]
[., length, -, 1, ], =, x, ., mant, [, mant, ., length, -, 1, ], /, 2, +, 1]
[], =, x, ., mant, [, mant, ., length, -, 1, ], /, 2, +, 1, ;, break, ;, case]
[;, break, ;, case, 2, :, x, ., mant, [, mant, ., length, -, 1, ], =, 1500, ;, break]
[+, 1, ;, break, ;, case, 2, :, x, ., mant, [, mant, ., length, -, 1, ], =, 1500]
[/, 2, +, 1, ;, break, ;, case, 2, :, x, ., mant, [, mant, ., length, -, 1, ]]
[[, mant, ., length, -, 1, ], /, 2, +, 1, ;, break, ;, case, 2, :, x, ., mant]
[., mant, [, mant, ., length, -, 1, ], /, 2, +, 1, ;, break, ;, case, 2, :, x]
[], /, 2, +, 1, ;, break, ;, case, 2, :, x, ., mant, [, mant, ., length, -, 1]
[-, 1, ], /, 2, +, 1, ;, break, ;, case, 2, :, x, ., mant, [, mant, ., length]
[., length, -, 1, ], /, 2, +, 1, ;, break, ;, case, 2, :, x, ., mant, [, mant]
[], /, 2, +, 1, ;, break, ;, case, 2, :, x, ., mant, [, mant, ., length, -, 1]
[+, 1, ;, break, ;, case, 2, :, x, ., mant, [, mant, ., length, -, 1, ], =, 1500]
[;, break, ;, case, 2, :, x, ., mant, [, mant, ., length, -, 1, ], =, 1500, ;, break]
[:, x, ., mant, [, mant, ., length, -, 1, ], =, 1500, ;, break, ;, case, 3, :, x]
[=, 1500, ;, break, ;, case, 3, :, x, ., mant, [, mant, ., length, -, 1, ], =, 2200]
[[, mant, ., length, -, 1, ], =, 1500, ;, break, ;, case, 3, :, x, ., mant, [, mant]
[., mant, [, mant, ., length, -, 1, ], =, 1500, ;, break, ;, case, 3, :, x, ., mant]
[], =, 1500, ;, break, ;, case, 3, :, x, ., mant, [, mant, ., length, -, 1, ], =]
[-, 1, ], =, 1500, ;, break, ;, case, 3, :, x, ., mant, [, mant, ., length, -, 1]
[., length, -, 1, ], =, 1500, ;, break, ;, case, 3, :, x, ., mant, [, mant, ., length]
[], =, 1500, ;, break, ;, case, 3, :, x, ., mant, [, mant, ., length, -, 1, ], =]
[;, break, ;, case, 3, :, x, ., mant, [, mant, ., length, -, 1, ], =, 2200, ;, break]
[:, x, ., mant, [, mant, ., length, -, 1, ], =, 2200, ;, break, ;, default, :, x, .]
[=, 2200, ;, break, ;, default, :, x, ., mant, [, mant, ., length, -, 1, ], =, 3000, ;]
[[, mant, ., length, -, 1, ], =, 2200, ;, break, ;, default, :, x, ., mant, [, mant, .]
[., mant, [, mant, ., length, -, 1, ], =, 2200, ;, break, ;, default, :, x, ., mant, []
[], =, 2200, ;, break, ;, default, :, x, ., mant, [, mant, ., length, -, 1, ], =, 3000]
[-, 1, ], =, 2200, ;, break, ;, default, :, x, ., mant, [, mant, ., length, -, 1, ]]
[., length, -, 1, ], =, 2200, ;, break, ;, default, :, x, ., mant, [, mant, ., length, -]
[], =, 2200, ;, break, ;, default, :, x, ., mant, [, mant, ., length, -, 1, ], =, 3000]
[;, break, ;, default, :, x, ., mant, [, mant, ., length, -, 1, ], =, 3000, ;, }, Dfp]
[=, 3000, ;, }, Dfp, dx, =, newInstance, (, x, ), ;, Dfp, px, =, getZero, (, ), ;, Dfp]
[[, mant, ., length, -, 1, ], =, 3000, ;, }, Dfp, dx, =, newInstance, (, x, ), ;, Dfp]
[., mant, [, mant, ., length, -, 1, ], =, 3000, ;, }, Dfp, dx, =, newInstance, (, x, )]
[], =, 3000, ;, }, Dfp, dx, =, newInstance, (, x, ), ;, Dfp, px, =, getZero, (, ), ;]
[-, 1, ], =, 3000, ;, }, Dfp, dx, =, newInstance, (, x, ), ;, Dfp, px, =, getZero, (]
[., length, -, 1, ], =, 3000, ;, }, Dfp, dx, =, newInstance, (, x, ), ;, Dfp, px, =]
[], =, 3000, ;, }, Dfp, dx, =, newInstance, (, x, ), ;, Dfp, px, =, getZero, (, ), ;]
[;, }, Dfp, dx, =, newInstance, (, x, ), ;, Dfp, px, =, getZero, (, ), ;, Dfp, ppx, =]
[;, Dfp, px, =, getZero, (, ), ;, Dfp, ppx, =, getZero, (, ), ;, while, (, x, ., unequal]
[), ;, Dfp, px, =, getZero, (, ), ;, Dfp, ppx, =, getZero, (, ), ;, while, (, x, .]
[;, Dfp, ppx, =, getZero, (, ), ;, while, (, x, ., unequal, (, px, ), ), {, dx, =]
[;, while, (, x, ., unequal, (, px, ), ), {, dx, =, newInstance, (, x, ), ;, dx, .]
[), {, dx, =, newInstance, (, x, ), ;, dx, ., sign, =, -, 1, ;, dx, =, dx, .]
[., unequal, (, px, ), ), {, dx, =, newInstance, (, x, ), ;, dx, ., sign, =, -, 1]
[), ), {, dx, =, newInstance, (, x, ), ;, dx, ., sign, =, -, 1, ;, dx, =, dx]
[=, newInstance, (, x, ), ;, dx, ., sign, =, -, 1, ;, dx, =, dx, ., add, (, this]
[;, dx, ., sign, =, -, 1, ;, dx, =, dx, ., add, (, this, ., divide, (, x, )]
[), ;, dx, ., sign, =, -, 1, ;, dx, =, dx, ., add, (, this, ., divide, (, x]
[=, -, 1, ;, dx, =, dx, ., add, (, this, ., divide, (, x, ), ), ;, dx, =]
[., sign, =, -, 1, ;, dx, =, dx, ., add, (, this, ., divide, (, x, ), ), ;]
[;, dx, =, dx, ., add, (, this, ., divide, (, x, ), ), ;, dx, =, dx, ., divide]
[;, dx, =, dx, ., add, (, this, ., divide, (, x, ), ), ;, dx, =, dx, ., divide]
[=, dx, ., add, (, this, ., divide, (, x, ), ), ;, dx, =, dx, ., divide, (, 2]
[;, dx, =, dx, ., divide, (, 2, ), ;, ppx, =, px, ;, px, =, x, ;, x, =]
[., add, (, this, ., divide, (, x, ), ), ;, dx, =, dx, ., divide, (, 2, ), ;]
[), ;, dx, =, dx, ., divide, (, 2, ), ;, ppx, =, px, ;, px, =, x, ;, x]
[., divide, (, x, ), ), ;, dx, =, dx, ., divide, (, 2, ), ;, ppx, =, px, ;]
[), ), ;, dx, =, dx, ., divide, (, 2, ), ;, ppx, =, px, ;, px, =, x, ;]
[=, dx, ., divide, (, 2, ), ;, ppx, =, px, ;, px, =, x, ;, x, =, x, .]
[;, ppx, =, px, ;, px, =, x, ;, x, =, x, ., add, (, dx, ), ;, if, (]
[., divide, (, 2, ), ;, ppx, =, px, ;, px, =, x, ;, x, =, x, ., add, (]
[), ;, ppx, =, px, ;, px, =, x, ;, x, =, x, ., add, (, dx, ), ;, if]
[=, px, ;, px, =, x, ;, x, =, x, ., add, (, dx, ), ;, if, (, x, .]
[;, px, =, x, ;, x, =, x, ., add, (, dx, ), ;, if, (, x, ., equals, (]
[=, x, ;, x, =, x, ., add, (, dx, ), ;, if, (, x, ., equals, (, ppx, )]
[;, x, =, x, ., add, (, dx, ), ;, if, (, x, ., equals, (, ppx, ), ), {]
[=, x, ., add, (, dx, ), ;, if, (, x, ., equals, (, ppx, ), ), {, break, ;]
[;, if, (, x, ., equals, (, ppx, ), ), {, break, ;, }, if, (, dx, ., mant, []
[., add, (, dx, ), ;, if, (, x, ., equals, (, ppx, ), ), {, break, ;, }, if]
[), ;, if, (, x, ., equals, (, ppx, ), ), {, break, ;, }, if, (, dx, ., mant]
[), {, break, ;, }, if, (, dx, ., mant, [, mant, ., length, -, 1, ], ==, 0, )]
[., equals, (, ppx, ), ), {, break, ;, }, if, (, dx, ., mant, [, mant, ., length, -]
[), ), {, break, ;, }, if, (, dx, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[), {, break, ;, }, }, return, x, ;, }, @, Override, public, String, toString, (, ), {, if, (]
[==, 0, ), {, break, ;, }, }, return, x, ;, }, @, Override, public, String, toString, (, ), {]
[[, mant, ., length, -, 1, ], ==, 0, ), {, break, ;, }, }, return, x, ;, }, @]
[., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, break, ;, }, }, return, x, ;]
[], ==, 0, ), {, break, ;, }, }, return, x, ;, }, @, Override, public, String, toString, (, )]
[-, 1, ], ==, 0, ), {, break, ;, }, }, return, x, ;, }, @, Override, public, String, toString]
[., length, -, 1, ], ==, 0, ), {, break, ;, }, }, return, x, ;, }, @, Override, public]
[], ==, 0, ), {, break, ;, }, }, return, x, ;, }, @, Override, public, String, toString, (, )]
[), {, break, ;, }, }, return, x, ;, }, @, Override, public, String, toString, (, ), {, if, (]
[;, }, @, Override, public, String, toString, (, ), {, if, (, nans, !=, FINITE, ), {, if, (, nans]
[), {, if, (, nans, ==, INFINITE, ), {, return, (, sign, <, 0, ), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;]
[!=, FINITE, ), {, if, (, nans, ==, INFINITE, ), {, return, (, sign, <, 0, ), ?, NEG_INFINITY_STRING, :]
[), {, if, (, nans, ==, INFINITE, ), {, return, (, sign, <, 0, ), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;]
[), {, return, (, sign, <, 0, ), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }]
[==, INFINITE, ), {, return, (, sign, <, 0, ), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING]
[), {, return, (, sign, <, 0, ), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }]
[;, }, else, {, return, NAN_STRING, ;, }, }, if, (, exp, >, mant, ., length, ||, exp, <, -]
[?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }, }, if, (, exp, >, mant, ., length]
[), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }, }, if, (, exp, >, mant, .]
[<, 0, ), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }, }, if, (, exp, >]
[), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }, }, if, (, exp, >, mant, .]
[:, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }, }, if, (, exp, >, mant, ., length, ||, exp]
[;, }, else, {, return, NAN_STRING, ;, }, }, if, (, exp, >, mant, ., length, ||, exp, <, -]
[;, }, }, if, (, exp, >, mant, ., length, ||, exp, <, -, 1, ), {, return, dfp2sci, (]
[), {, return, dfp2sci, (, ), ;, }, return, dfp2string, (, ), ;, }, protected, String, dfp2sci, (, ), {]
[||, exp, <, -, 1, ), {, return, dfp2sci, (, ), ;, }, return, dfp2string, (, ), ;, }, protected]
[>, mant, ., length, ||, exp, <, -, 1, ), {, return, dfp2sci, (, ), ;, }, return, dfp2string, (]
[||, exp, <, -, 1, ), {, return, dfp2sci, (, ), ;, }, return, dfp2string, (, ), ;, }, protected]
[., length, ||, exp, <, -, 1, ), {, return, dfp2sci, (, ), ;, }, return, dfp2string, (, ), ;]
[), {, return, dfp2sci, (, ), ;, }, return, dfp2string, (, ), ;, }, protected, String, dfp2sci, (, ), {]
[<, -, 1, ), {, return, dfp2sci, (, ), ;, }, return, dfp2string, (, ), ;, }, protected, String, dfp2sci]
[), {, return, dfp2sci, (, ), ;, }, return, dfp2string, (, ), ;, }, protected, String, dfp2sci, (, ), {]
[), {, return, dfp2sci, (, ), ;, }, return, dfp2string, (, ), ;, }, protected, String, dfp2sci, (, ), {]
[;, }, return, dfp2string, (, ), ;, }, protected, String, dfp2sci, (, ), {, char, rawdigits, [, ], =, new]
[;, }, protected, String, dfp2sci, (, ), {, char, rawdigits, [, ], =, new, char, [, mant, ., length, *]
[;, char, outputbuffer, [, ], =, new, char, [, mant, ., length, *, 4, +, 20, ], ;, int, p]
[], ;, char, outputbuffer, [, ], =, new, char, [, mant, ., length, *, 4, +, 20, ], ;, int]
[*, 4, ], ;, char, outputbuffer, [, ], =, new, char, [, mant, ., length, *, 4, +, 20, ]]
[., length, *, 4, ], ;, char, outputbuffer, [, ], =, new, char, [, mant, ., length, *, 4, +]
[], ;, char, outputbuffer, [, ], =, new, char, [, mant, ., length, *, 4, +, 20, ], ;, int]
[;, int, p, ;, int, q, ;, int, e, ;, int, ae, ;, int, shf, ;, p, =, 0, ;]
[], ;, int, p, ;, int, q, ;, int, e, ;, int, ae, ;, int, shf, ;, p, =, 0]
[+, 20, ], ;, int, p, ;, int, q, ;, int, e, ;, int, ae, ;, int, shf, ;, p]
[*, 4, +, 20, ], ;, int, p, ;, int, q, ;, int, e, ;, int, ae, ;, int, shf]
[., length, *, 4, +, 20, ], ;, int, p, ;, int, q, ;, int, e, ;, int, ae, ;]
[+, 20, ], ;, int, p, ;, int, q, ;, int, e, ;, int, ae, ;, int, shf, ;, p]
[], ;, int, p, ;, int, q, ;, int, e, ;, int, ae, ;, int, shf, ;, p, =, 0]
[=, 0, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --]
[;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, i, >=, 0, ;, i, --, ), {, rawdigits, [, p, ++, ], =, (, char, ), (, (]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, rawdigits, [, p, ++, ], =, (, char, )]
[., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, rawdigits, [, p, ++, ], =, (]
[;, i, >=, 0, ;, i, --, ), {, rawdigits, [, p, ++, ], =, (, char, ), (, (]
[;, i, --, ), {, rawdigits, [, p, ++, ], =, (, char, ), (, (, mant, [, i, ]]
[>=, 0, ;, i, --, ), {, rawdigits, [, p, ++, ], =, (, char, ), (, (, mant, []
[;, i, --, ), {, rawdigits, [, p, ++, ], =, (, char, ), (, (, mant, [, i, ]]
[), {, rawdigits, [, p, ++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000, )]
[--, ), {, rawdigits, [, p, ++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000]
[=, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;, rawdigits, [, p]
[[, p, ++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', )]
[], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;, rawdigits, []
[++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;, rawdigits]
[;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100, )]
[;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100, )]
[), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100]
[+, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ]]
[), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i]
[/, 1000, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant]
[[, i, ], /, 1000, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (]
[], /, 1000, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (]
[), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i]
[), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100]
[=, (, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', )]
[[, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10]
[], =, (, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0']
[++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +]
[;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10, )]
[;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10, )]
[), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10]
[+, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ]]
[), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i]
[%, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant]
[), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (]
[/, 100, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (]
[[, i, ], /, 100, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (]
[], /, 100, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, )]
[), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (]
[), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i]
[), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10]
[=, (, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', )]
[[, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10]
[], =, (, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0']
[++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +]
[;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %, 10]
[;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %, 10]
[), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %]
[+, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ]]
[), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i]
[%, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant]
[), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (]
[/, 10, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (]
[[, i, ], /, 10, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (]
[], /, 10, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, )]
[), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (]
[), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i]
[), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %]
[=, (, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +, '0', ), ;, }]
[[, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +]
[], =, (, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +, '0', ), ;]
[++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +, '0', )]
[;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;, p, ++, ), {, if, (]
[;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;, p, ++, ), {, if, (]
[), ;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;, p, ++, ), {, if]
[+, '0', ), ;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;, p, ++, )]
[), +, '0', ), ;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;, p, ++]
[%, 10, ), +, '0', ), ;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;]
[), %, 10, ), +, '0', ), ;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length]
[[, i, ], ), %, 10, ), +, '0', ), ;, }, for, (, p, =, 0, ;, p, <]
[], ), %, 10, ), +, '0', ), ;, }, for, (, p, =, 0, ;, p, <, rawdigits, .]
[), +, '0', ), ;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;, p, ++]
[), ;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;, p, ++, ), {, if]
[=, 0, ;, p, <, rawdigits, ., length, ;, p, ++, ), {, if, (, rawdigits, [, p, ], !=]
[;, p, <, rawdigits, ., length, ;, p, ++, ), {, if, (, rawdigits, [, p, ], !=, '0', )]
[;, p, ++, ), {, if, (, rawdigits, [, p, ], !=, '0', ), {, break, ;, }, }, shf]
[<, rawdigits, ., length, ;, p, ++, ), {, if, (, rawdigits, [, p, ], !=, '0', ), {, break]
[;, p, ++, ), {, if, (, rawdigits, [, p, ], !=, '0', ), {, break, ;, }, }, shf]
[., length, ;, p, ++, ), {, if, (, rawdigits, [, p, ], !=, '0', ), {, break, ;, }]
[), {, if, (, rawdigits, [, p, ], !=, '0', ), {, break, ;, }, }, shf, =, p, ;]
[++, ), {, if, (, rawdigits, [, p, ], !=, '0', ), {, break, ;, }, }, shf, =, p]
[), {, break, ;, }, }, shf, =, p, ;, q, =, 0, ;, if, (, sign, ==, -, 1]
[!=, '0', ), {, break, ;, }, }, shf, =, p, ;, q, =, 0, ;, if, (, sign, ==]
[[, p, ], !=, '0', ), {, break, ;, }, }, shf, =, p, ;, q, =, 0, ;, if]
[], !=, '0', ), {, break, ;, }, }, shf, =, p, ;, q, =, 0, ;, if, (, sign]
[), {, break, ;, }, }, shf, =, p, ;, q, =, 0, ;, if, (, sign, ==, -, 1]
[=, p, ;, q, =, 0, ;, if, (, sign, ==, -, 1, ), {, outputbuffer, [, q, ++, ]]
[;, q, =, 0, ;, if, (, sign, ==, -, 1, ), {, outputbuffer, [, q, ++, ], =, '-']
[=, 0, ;, if, (, sign, ==, -, 1, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }]
[;, if, (, sign, ==, -, 1, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }, if, (]
[), {, outputbuffer, [, q, ++, ], =, '-', ;, }, if, (, p, !=, rawdigits, ., length, ), {]
[==, -, 1, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }, if, (, p, !=, rawdigits, .]
[), {, outputbuffer, [, q, ++, ], =, '-', ;, }, if, (, p, !=, rawdigits, ., length, ), {]
[), {, outputbuffer, [, q, ++, ], =, '-', ;, }, if, (, p, !=, rawdigits, ., length, ), {]
[=, '-', ;, }, if, (, p, !=, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits]
[[, q, ++, ], =, '-', ;, }, if, (, p, !=, rawdigits, ., length, ), {, outputbuffer, [, q]
[], =, '-', ;, }, if, (, p, !=, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =]
[++, ], =, '-', ;, }, if, (, p, !=, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ]]
[;, }, if, (, p, !=, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p]
[), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, outputbuffer, [, q, ++, ], =]
[!=, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, outputbuffer, []
[), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, outputbuffer, [, q, ++, ], =]
[., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, outputbuffer, [, q, ++]
[=, rawdigits, [, p, ++, ], ;, outputbuffer, [, q, ++, ], =, '.', ;, while, (, p, <, rawdigits]
[[, q, ++, ], =, rawdigits, [, p, ++, ], ;, outputbuffer, [, q, ++, ], =, '.', ;, while]
[], =, rawdigits, [, p, ++, ], ;, outputbuffer, [, q, ++, ], =, '.', ;, while, (, p, <]
[++, ], =, rawdigits, [, p, ++, ], ;, outputbuffer, [, q, ++, ], =, '.', ;, while, (, p]
[;, outputbuffer, [, q, ++, ], =, '.', ;, while, (, p, <, rawdigits, ., length, ), {, outputbuffer, []
[[, p, ++, ], ;, outputbuffer, [, q, ++, ], =, '.', ;, while, (, p, <, rawdigits, ., length]
[], ;, outputbuffer, [, q, ++, ], =, '.', ;, while, (, p, <, rawdigits, ., length, ), {, outputbuffer]
[++, ], ;, outputbuffer, [, q, ++, ], =, '.', ;, while, (, p, <, rawdigits, ., length, ), {]
[=, '.', ;, while, (, p, <, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, []
[[, q, ++, ], =, '.', ;, while, (, p, <, rawdigits, ., length, ), {, outputbuffer, [, q, ++]
[], =, '.', ;, while, (, p, <, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits]
[++, ], =, '.', ;, while, (, p, <, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =]
[;, while, (, p, <, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++]
[), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, }, }, else, {, outputbuffer, []
[<, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, }, }]
[), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, }, }, else, {, outputbuffer, []
[., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, }, }, else, {]
[=, rawdigits, [, p, ++, ], ;, }, }, else, {, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer]
[[, q, ++, ], =, rawdigits, [, p, ++, ], ;, }, }, else, {, outputbuffer, [, q, ++, ]]
[], =, rawdigits, [, p, ++, ], ;, }, }, else, {, outputbuffer, [, q, ++, ], =, '0', ;]
[++, ], =, rawdigits, [, p, ++, ], ;, }, }, else, {, outputbuffer, [, q, ++, ], =, '0']
[;, }, }, else, {, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, '.']
[[, p, ++, ], ;, }, }, else, {, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q]
[], ;, }, }, else, {, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =]
[++, ], ;, }, }, else, {, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ]]
[=, '0', ;, outputbuffer, [, q, ++, ], =, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer]
[[, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, '.', ;, outputbuffer, [, q, ++, ]]
[], =, '0', ;, outputbuffer, [, q, ++, ], =, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;]
[++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, '.', ;, outputbuffer, [, q, ++, ], =, '0']
[;, outputbuffer, [, q, ++, ], =, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q]
[=, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, 'e', ;, outputbuffer]
[[, q, ++, ], =, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ]]
[], =, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, 'e', ;]
[++, ], =, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, 'e']
[;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, 'e', ;, outputbuffer, [, q]
[=, '0', ;, outputbuffer, [, q, ++, ], =, 'e', ;, outputbuffer, [, q, ++, ], =, '0', ;, return]
[[, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, 'e', ;, outputbuffer, [, q, ++, ]]
[], =, '0', ;, outputbuffer, [, q, ++, ], =, 'e', ;, outputbuffer, [, q, ++, ], =, '0', ;]
[++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, 'e', ;, outputbuffer, [, q, ++, ], =, '0']
[;, outputbuffer, [, q, ++, ], =, 'e', ;, outputbuffer, [, q, ++, ], =, '0', ;, return, new, String]
[=, 'e', ;, outputbuffer, [, q, ++, ], =, '0', ;, return, new, String, (, outputbuffer, ,, 0, ,, 5]
[[, q, ++, ], =, 'e', ;, outputbuffer, [, q, ++, ], =, '0', ;, return, new, String, (, outputbuffer]
[], =, 'e', ;, outputbuffer, [, q, ++, ], =, '0', ;, return, new, String, (, outputbuffer, ,, 0, ,]
[++, ], =, 'e', ;, outputbuffer, [, q, ++, ], =, '0', ;, return, new, String, (, outputbuffer, ,, 0]
[;, outputbuffer, [, q, ++, ], =, '0', ;, return, new, String, (, outputbuffer, ,, 0, ,, 5, ), ;]
[=, '0', ;, return, new, String, (, outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer, [, q, ++, ]]
[[, q, ++, ], =, '0', ;, return, new, String, (, outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer]
[], =, '0', ;, return, new, String, (, outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer, [, q, ++]
[++, ], =, '0', ;, return, new, String, (, outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer, [, q]
[;, return, new, String, (, outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer, [, q, ++, ], =, 'e']
[;, }, outputbuffer, [, q, ++, ], =, 'e', ;, e, =, exp, *, 4, -, shf, -, 1, ;]
[,, 0, ,, 5, ), ;, }, outputbuffer, [, q, ++, ], =, 'e', ;, e, =, exp, *, 4]
[,, 5, ), ;, }, outputbuffer, [, q, ++, ], =, 'e', ;, e, =, exp, *, 4, -, shf]
[), ;, }, outputbuffer, [, q, ++, ], =, 'e', ;, e, =, exp, *, 4, -, shf, -, 1]
[=, 'e', ;, e, =, exp, *, 4, -, shf, -, 1, ;, ae, =, e, ;, if, (, e]
[[, q, ++, ], =, 'e', ;, e, =, exp, *, 4, -, shf, -, 1, ;, ae, =, e]
[], =, 'e', ;, e, =, exp, *, 4, -, shf, -, 1, ;, ae, =, e, ;, if, (]
[++, ], =, 'e', ;, e, =, exp, *, 4, -, shf, -, 1, ;, ae, =, e, ;, if]
[;, e, =, exp, *, 4, -, shf, -, 1, ;, ae, =, e, ;, if, (, e, <, 0]
[=, exp, *, 4, -, shf, -, 1, ;, ae, =, e, ;, if, (, e, <, 0, ), {]
[;, ae, =, e, ;, if, (, e, <, 0, ), {, ae, =, -, e, ;, }, for, (]
[-, 1, ;, ae, =, e, ;, if, (, e, <, 0, ), {, ae, =, -, e, ;, }]
[-, shf, -, 1, ;, ae, =, e, ;, if, (, e, <, 0, ), {, ae, =, -, e]
[*, 4, -, shf, -, 1, ;, ae, =, e, ;, if, (, e, <, 0, ), {, ae, =]
[-, shf, -, 1, ;, ae, =, e, ;, if, (, e, <, 0, ), {, ae, =, -, e]
[-, 1, ;, ae, =, e, ;, if, (, e, <, 0, ), {, ae, =, -, e, ;, }]
[;, ae, =, e, ;, if, (, e, <, 0, ), {, ae, =, -, e, ;, }, for, (]
[=, e, ;, if, (, e, <, 0, ), {, ae, =, -, e, ;, }, for, (, p, =]
[;, if, (, e, <, 0, ), {, ae, =, -, e, ;, }, for, (, p, =, 1000000000, ;]
[), {, ae, =, -, e, ;, }, for, (, p, =, 1000000000, ;, p, >, ae, ;, p, /=]
[<, 0, ), {, ae, =, -, e, ;, }, for, (, p, =, 1000000000, ;, p, >, ae, ;]
[), {, ae, =, -, e, ;, }, for, (, p, =, 1000000000, ;, p, >, ae, ;, p, /=]
[=, -, e, ;, }, for, (, p, =, 1000000000, ;, p, >, ae, ;, p, /=, 10, ), {]
[;, }, for, (, p, =, 1000000000, ;, p, >, ae, ;, p, /=, 10, ), {, }, if, (]
[;, }, for, (, p, =, 1000000000, ;, p, >, ae, ;, p, /=, 10, ), {, }, if, (]
[=, 1000000000, ;, p, >, ae, ;, p, /=, 10, ), {, }, if, (, e, <, 0, ), {]
[;, p, >, ae, ;, p, /=, 10, ), {, }, if, (, e, <, 0, ), {, outputbuffer, []
[;, p, /=, 10, ), {, }, if, (, e, <, 0, ), {, outputbuffer, [, q, ++, ], =]
[>, ae, ;, p, /=, 10, ), {, }, if, (, e, <, 0, ), {, outputbuffer, [, q, ++]
[;, p, /=, 10, ), {, }, if, (, e, <, 0, ), {, outputbuffer, [, q, ++, ], =]
[/=, 10, ), {, }, if, (, e, <, 0, ), {, outputbuffer, [, q, ++, ], =, '-', ;]
[), {, }, if, (, e, <, 0, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }, while]
[), {, outputbuffer, [, q, ++, ], =, '-', ;, }, while, (, p, >, 0, ), {, outputbuffer, []
[<, 0, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }, while, (, p, >, 0, ), {]
[), {, outputbuffer, [, q, ++, ], =, '-', ;, }, while, (, p, >, 0, ), {, outputbuffer, []
[=, '-', ;, }, while, (, p, >, 0, ), {, outputbuffer, [, q, ++, ], =, (, char, )]
[[, q, ++, ], =, '-', ;, }, while, (, p, >, 0, ), {, outputbuffer, [, q, ++, ]]
[], =, '-', ;, }, while, (, p, >, 0, ), {, outputbuffer, [, q, ++, ], =, (, char]
[++, ], =, '-', ;, }, while, (, p, >, 0, ), {, outputbuffer, [, q, ++, ], =, (]
[;, }, while, (, p, >, 0, ), {, outputbuffer, [, q, ++, ], =, (, char, ), (, ae]
[), {, outputbuffer, [, q, ++, ], =, (, char, ), (, ae, /, p, +, '0', ), ;, ae]
[>, 0, ), {, outputbuffer, [, q, ++, ], =, (, char, ), (, ae, /, p, +, '0', )]
[), {, outputbuffer, [, q, ++, ], =, (, char, ), (, ae, /, p, +, '0', ), ;, ae]
[=, (, char, ), (, ae, /, p, +, '0', ), ;, ae, =, ae, %, p, ;, p, =]
[[, q, ++, ], =, (, char, ), (, ae, /, p, +, '0', ), ;, ae, =, ae, %]
[], =, (, char, ), (, ae, /, p, +, '0', ), ;, ae, =, ae, %, p, ;, p]
[++, ], =, (, char, ), (, ae, /, p, +, '0', ), ;, ae, =, ae, %, p, ;]
[;, ae, =, ae, %, p, ;, p, =, p, /, 10, ;, }, return, new, String, (, outputbuffer, ,]
[;, ae, =, ae, %, p, ;, p, =, p, /, 10, ;, }, return, new, String, (, outputbuffer, ,]
[), ;, ae, =, ae, %, p, ;, p, =, p, /, 10, ;, }, return, new, String, (, outputbuffer]
[+, '0', ), ;, ae, =, ae, %, p, ;, p, =, p, /, 10, ;, }, return, new, String]
[/, p, +, '0', ), ;, ae, =, ae, %, p, ;, p, =, p, /, 10, ;, }, return]
[+, '0', ), ;, ae, =, ae, %, p, ;, p, =, p, /, 10, ;, }, return, new, String]
[), ;, ae, =, ae, %, p, ;, p, =, p, /, 10, ;, }, return, new, String, (, outputbuffer]
[=, ae, %, p, ;, p, =, p, /, 10, ;, }, return, new, String, (, outputbuffer, ,, 0, ,]
[;, p, =, p, /, 10, ;, }, return, new, String, (, outputbuffer, ,, 0, ,, q, ), ;, }]
[%, p, ;, p, =, p, /, 10, ;, }, return, new, String, (, outputbuffer, ,, 0, ,, q, )]
[;, p, =, p, /, 10, ;, }, return, new, String, (, outputbuffer, ,, 0, ,, q, ), ;, }]
[=, p, /, 10, ;, }, return, new, String, (, outputbuffer, ,, 0, ,, q, ), ;, }, protected, String]
[;, }, return, new, String, (, outputbuffer, ,, 0, ,, q, ), ;, }, protected, String, dfp2string, (, ), {]
[/, 10, ;, }, return, new, String, (, outputbuffer, ,, 0, ,, q, ), ;, }, protected, String, dfp2string, (]
[;, }, return, new, String, (, outputbuffer, ,, 0, ,, q, ), ;, }, protected, String, dfp2string, (, ), {]
[;, }, protected, String, dfp2string, (, ), {, char, buffer, [, ], =, new, char, [, mant, ., length, *]
[,, 0, ,, q, ), ;, }, protected, String, dfp2string, (, ), {, char, buffer, [, ], =, new, char]
[,, q, ), ;, }, protected, String, dfp2string, (, ), {, char, buffer, [, ], =, new, char, [, mant]
[), ;, }, protected, String, dfp2string, (, ), {, char, buffer, [, ], =, new, char, [, mant, ., length]
[;, int, p, =, 1, ;, int, q, ;, int, e, =, exp, ;, boolean, pointInserted, =, false, ;, buffer]
[], ;, int, p, =, 1, ;, int, q, ;, int, e, =, exp, ;, boolean, pointInserted, =, false, ;]
[+, 20, ], ;, int, p, =, 1, ;, int, q, ;, int, e, =, exp, ;, boolean, pointInserted, =]
[*, 4, +, 20, ], ;, int, p, =, 1, ;, int, q, ;, int, e, =, exp, ;, boolean]
[., length, *, 4, +, 20, ], ;, int, p, =, 1, ;, int, q, ;, int, e, =, exp]
[+, 20, ], ;, int, p, =, 1, ;, int, q, ;, int, e, =, exp, ;, boolean, pointInserted, =]
[], ;, int, p, =, 1, ;, int, q, ;, int, e, =, exp, ;, boolean, pointInserted, =, false, ;]
[;, int, q, ;, int, e, =, exp, ;, boolean, pointInserted, =, false, ;, buffer, [, 0, ], =, ' ']
[;, boolean, pointInserted, =, false, ;, buffer, [, 0, ], =, ' ', ;, if, (, e, <=, 0, ), {]
[;, buffer, [, 0, ], =, ' ', ;, if, (, e, <=, 0, ), {, buffer, [, p, ++, ]]
[=, ' ', ;, if, (, e, <=, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, []
[[, 0, ], =, ' ', ;, if, (, e, <=, 0, ), {, buffer, [, p, ++, ], =, '0']
[], =, ' ', ;, if, (, e, <=, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer]
[;, if, (, e, <=, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++]
[), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '.', ;, pointInserted, =]
[<=, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '.', ;]
[), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '.', ;, pointInserted, =]
[=, '0', ;, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, while, (, e, <]
[[, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }]
[], =, '0', ;, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, while, (, e]
[++, ], =, '0', ;, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, while, (]
[;, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, while, (, e, <, 0, )]
[=, '.', ;, pointInserted, =, true, ;, }, while, (, e, <, 0, ), {, buffer, [, p, ++, ]]
[[, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, while, (, e, <, 0, ), {, buffer]
[], =, '.', ;, pointInserted, =, true, ;, }, while, (, e, <, 0, ), {, buffer, [, p, ++]
[++, ], =, '.', ;, pointInserted, =, true, ;, }, while, (, e, <, 0, ), {, buffer, [, p]
[;, pointInserted, =, true, ;, }, while, (, e, <, 0, ), {, buffer, [, p, ++, ], =, '0']
[=, true, ;, }, while, (, e, <, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer]
[;, }, while, (, e, <, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p]
[), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, []
[<, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, []
[=, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer]
[[, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ]]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0']
[;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p]
[=, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, e]
[[, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ]]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0']
[;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, ++, ;]
[=, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, ++, ;, }, for, (, int, i, =]
[[, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, ++, ;, }, for]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, ++, ;, }, for, (, int, i]
[++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, ++, ;, }, for, (, int]
[;, buffer, [, p, ++, ], =, '0', ;, e, ++, ;, }, for, (, int, i, =, mant, .]
[=, '0', ;, e, ++, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=]
[[, p, ++, ], =, '0', ;, e, ++, ;, }, for, (, int, i, =, mant, ., length, -]
[], =, '0', ;, e, ++, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i]
[++, ], =, '0', ;, e, ++, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;]
[;, e, ++, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;]
[;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, )]
[++, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --]
[;, i, >=, 0, ;, i, --, ), {, buffer, [, p, ++, ], =, (, char, ), (, (]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, buffer, [, p, ++, ], =, (, char, )]
[., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, buffer, [, p, ++, ], =, (]
[;, i, >=, 0, ;, i, --, ), {, buffer, [, p, ++, ], =, (, char, ), (, (]
[;, i, --, ), {, buffer, [, p, ++, ], =, (, char, ), (, (, mant, [, i, ]]
[>=, 0, ;, i, --, ), {, buffer, [, p, ++, ], =, (, char, ), (, (, mant, []
[;, i, --, ), {, buffer, [, p, ++, ], =, (, char, ), (, (, mant, [, i, ]]
[), {, buffer, [, p, ++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000, )]
[--, ), {, buffer, [, p, ++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000]
[=, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;, buffer, [, p]
[[, p, ++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', )]
[], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;, buffer, []
[++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;, buffer]
[;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100, )]
[;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100, )]
[), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100]
[+, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ]]
[), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i]
[/, 1000, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant]
[[, i, ], /, 1000, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (]
[], /, 1000, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (]
[), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i]
[), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100]
[=, (, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', )]
[[, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10]
[], =, (, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0']
[++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +]
[;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10, )]
[;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10, )]
[), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10]
[+, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ]]
[), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i]
[%, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant]
[), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (]
[/, 100, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (]
[[, i, ], /, 100, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (]
[], /, 100, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, )]
[), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (]
[), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i]
[), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10]
[=, (, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', )]
[[, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10]
[], =, (, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0']
[++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +]
[;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %, 10]
[;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %, 10]
[), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %]
[+, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ]]
[), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i]
[%, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant]
[), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (]
[/, 10, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (]
[[, i, ], /, 10, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (]
[], /, 10, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, )]
[), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (]
[), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i]
[), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %]
[=, (, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +, '0', ), ;, if]
[[, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +]
[], =, (, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +, '0', ), ;]
[++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +, '0', )]
[;, if, (, --, e, ==, 0, ), {, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true]
[;, if, (, --, e, ==, 0, ), {, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true]
[), ;, if, (, --, e, ==, 0, ), {, buffer, [, p, ++, ], =, '.', ;, pointInserted, =]
[+, '0', ), ;, if, (, --, e, ==, 0, ), {, buffer, [, p, ++, ], =, '.', ;]
[), +, '0', ), ;, if, (, --, e, ==, 0, ), {, buffer, [, p, ++, ], =, '.']
[%, 10, ), +, '0', ), ;, if, (, --, e, ==, 0, ), {, buffer, [, p, ++, ]]
[), %, 10, ), +, '0', ), ;, if, (, --, e, ==, 0, ), {, buffer, [, p, ++]
[[, i, ], ), %, 10, ), +, '0', ), ;, if, (, --, e, ==, 0, ), {, buffer]
[], ), %, 10, ), +, '0', ), ;, if, (, --, e, ==, 0, ), {, buffer, [, p]
[), +, '0', ), ;, if, (, --, e, ==, 0, ), {, buffer, [, p, ++, ], =, '.']
[), ;, if, (, --, e, ==, 0, ), {, buffer, [, p, ++, ], =, '.', ;, pointInserted, =]
[), {, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, }, while, (, e, >]
[==, 0, ), {, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, }, while, (]
[==, 0, ), {, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, }, while, (]
[), {, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, }, while, (, e, >]
[=, '.', ;, pointInserted, =, true, ;, }, }, while, (, e, >, 0, ), {, buffer, [, p, ++]
[[, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, }, while, (, e, >, 0, ), {]
[], =, '.', ;, pointInserted, =, true, ;, }, }, while, (, e, >, 0, ), {, buffer, [, p]
[++, ], =, '.', ;, pointInserted, =, true, ;, }, }, while, (, e, >, 0, ), {, buffer, []
[;, pointInserted, =, true, ;, }, }, while, (, e, >, 0, ), {, buffer, [, p, ++, ], =]
[=, true, ;, }, }, while, (, e, >, 0, ), {, buffer, [, p, ++, ], =, '0', ;]
[;, }, }, while, (, e, >, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, []
[), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, []
[>, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, []
[=, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer]
[[, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ]]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0']
[;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p]
[=, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, e]
[[, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ]]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0']
[;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, --, ;]
[=, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, --, ;, }, if, (, !, pointInserted, )]
[[, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, --, ;, }, if]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, --, ;, }, if, (, !, pointInserted]
[++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, --, ;, }, if, (, !]
[;, buffer, [, p, ++, ], =, '0', ;, e, --, ;, }, if, (, !, pointInserted, ), {, buffer]
[=, '0', ;, e, --, ;, }, if, (, !, pointInserted, ), {, buffer, [, p, ++, ], =, '.']
[[, p, ++, ], =, '0', ;, e, --, ;, }, if, (, !, pointInserted, ), {, buffer, [, p]
[], =, '0', ;, e, --, ;, }, if, (, !, pointInserted, ), {, buffer, [, p, ++, ], =]
[++, ], =, '0', ;, e, --, ;, }, if, (, !, pointInserted, ), {, buffer, [, p, ++, ]]
[;, e, --, ;, }, if, (, !, pointInserted, ), {, buffer, [, p, ++, ], =, '.', ;, }]
[;, }, if, (, !, pointInserted, ), {, buffer, [, p, ++, ], =, '.', ;, }, q, =, 1]
[--, ;, }, if, (, !, pointInserted, ), {, buffer, [, p, ++, ], =, '.', ;, }, q, =]
[), {, buffer, [, p, ++, ], =, '.', ;, }, q, =, 1, ;, while, (, buffer, [, q]
[), {, buffer, [, p, ++, ], =, '.', ;, }, q, =, 1, ;, while, (, buffer, [, q]
[=, '.', ;, }, q, =, 1, ;, while, (, buffer, [, q, ], ==, '0', ), {, q, ++]
[[, p, ++, ], =, '.', ;, }, q, =, 1, ;, while, (, buffer, [, q, ], ==, '0']
[], =, '.', ;, }, q, =, 1, ;, while, (, buffer, [, q, ], ==, '0', ), {, q]
[++, ], =, '.', ;, }, q, =, 1, ;, while, (, buffer, [, q, ], ==, '0', ), {]
[;, }, q, =, 1, ;, while, (, buffer, [, q, ], ==, '0', ), {, q, ++, ;, }]
[=, 1, ;, while, (, buffer, [, q, ], ==, '0', ), {, q, ++, ;, }, if, (, buffer]
[;, while, (, buffer, [, q, ], ==, '0', ), {, q, ++, ;, }, if, (, buffer, [, q]
[), {, q, ++, ;, }, if, (, buffer, [, q, ], ==, '.', ), {, q, --, ;, }]
[==, '0', ), {, q, ++, ;, }, if, (, buffer, [, q, ], ==, '.', ), {, q, --]
[[, q, ], ==, '0', ), {, q, ++, ;, }, if, (, buffer, [, q, ], ==, '.', )]
[], ==, '0', ), {, q, ++, ;, }, if, (, buffer, [, q, ], ==, '.', ), {, q]
[), {, q, ++, ;, }, if, (, buffer, [, q, ], ==, '.', ), {, q, --, ;, }]
[;, }, if, (, buffer, [, q, ], ==, '.', ), {, q, --, ;, }, while, (, buffer, []
[++, ;, }, if, (, buffer, [, q, ], ==, '.', ), {, q, --, ;, }, while, (, buffer]
[), {, q, --, ;, }, while, (, buffer, [, p, -, 1, ], ==, '0', ), {, p, --]
[==, '.', ), {, q, --, ;, }, while, (, buffer, [, p, -, 1, ], ==, '0', ), {]
[[, q, ], ==, '.', ), {, q, --, ;, }, while, (, buffer, [, p, -, 1, ], ==]
[], ==, '.', ), {, q, --, ;, }, while, (, buffer, [, p, -, 1, ], ==, '0', )]
[), {, q, --, ;, }, while, (, buffer, [, p, -, 1, ], ==, '0', ), {, p, --]
[;, }, while, (, buffer, [, p, -, 1, ], ==, '0', ), {, p, --, ;, }, if, (]
[--, ;, }, while, (, buffer, [, p, -, 1, ], ==, '0', ), {, p, --, ;, }, if]
[), {, p, --, ;, }, if, (, sign, <, 0, ), {, buffer, [, --, q, ], =, '-']
[==, '0', ), {, p, --, ;, }, if, (, sign, <, 0, ), {, buffer, [, --, q, ]]
[[, p, -, 1, ], ==, '0', ), {, p, --, ;, }, if, (, sign, <, 0, ), {]
[], ==, '0', ), {, p, --, ;, }, if, (, sign, <, 0, ), {, buffer, [, --, q]
[-, 1, ], ==, '0', ), {, p, --, ;, }, if, (, sign, <, 0, ), {, buffer, []
[], ==, '0', ), {, p, --, ;, }, if, (, sign, <, 0, ), {, buffer, [, --, q]
[), {, p, --, ;, }, if, (, sign, <, 0, ), {, buffer, [, --, q, ], =, '-']
[;, }, if, (, sign, <, 0, ), {, buffer, [, --, q, ], =, '-', ;, }, return, new]
[--, ;, }, if, (, sign, <, 0, ), {, buffer, [, --, q, ], =, '-', ;, }, return]
[), {, buffer, [, --, q, ], =, '-', ;, }, return, new, String, (, buffer, ,, q, ,, p]
[<, 0, ), {, buffer, [, --, q, ], =, '-', ;, }, return, new, String, (, buffer, ,, q]
[), {, buffer, [, --, q, ], =, '-', ;, }, return, new, String, (, buffer, ,, q, ,, p]
[=, '-', ;, }, return, new, String, (, buffer, ,, q, ,, p, -, q, ), ;, }, public, Dfp]
[[, --, q, ], =, '-', ;, }, return, new, String, (, buffer, ,, q, ,, p, -, q, )]
[], =, '-', ;, }, return, new, String, (, buffer, ,, q, ,, p, -, q, ), ;, }, public]
[], =, '-', ;, }, return, new, String, (, buffer, ,, q, ,, p, -, q, ), ;, }, public]
[;, }, return, new, String, (, buffer, ,, q, ,, p, -, q, ), ;, }, public, Dfp, dotrap, (]
[;, }, public, Dfp, dotrap, (, int, type, ,, String, what, ,, Dfp, oper, ,, Dfp, result, ), {, Dfp]
[,, q, ,, p, -, q, ), ;, }, public, Dfp, dotrap, (, int, type, ,, String, what, ,, Dfp]
[,, p, -, q, ), ;, }, public, Dfp, dotrap, (, int, type, ,, String, what, ,, Dfp, oper, ,]
[), ;, }, public, Dfp, dotrap, (, int, type, ,, String, what, ,, Dfp, oper, ,, Dfp, result, ), {]
[-, q, ), ;, }, public, Dfp, dotrap, (, int, type, ,, String, what, ,, Dfp, oper, ,, Dfp, result]
[), ;, }, public, Dfp, dotrap, (, int, type, ,, String, what, ,, Dfp, oper, ,, Dfp, result, ), {]
[;, switch, (, type, ), {, case, DfpField, ., FLAG_INVALID, :, def, =, newInstance, (, getZero, (, ), ), ;]
[), {, case, DfpField, ., FLAG_INVALID, :, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =]
[:, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;, def, .]
[., FLAG_INVALID, :, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;]
[=, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;, def, ., nans, =]
[;, def, ., sign, =, result, ., sign, ;, def, ., nans, =, QNAN, ;, break, ;, case, DfpField, .]
[), ;, def, ., sign, =, result, ., sign, ;, def, ., nans, =, QNAN, ;, break, ;, case, DfpField]
[=, result, ., sign, ;, def, ., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (]
[., sign, =, result, ., sign, ;, def, ., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :]
[;, def, ., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&]
[., sign, ;, def, ., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==]
[=, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&, mant, [, mant, .]
[., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&, mant, []
[;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -]
[:, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, def]
[., FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, )]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, (, byte, ), (, sign]
[&&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, def, =, newInstance, (, getZero, (, )]
[==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, def, =, newInstance, (, getZero]
[&&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, def, =, newInstance, (, getZero, (, )]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, (, byte, ), (, sign]
[!=, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, (, byte, )]
[[, mant, ., length, -, 1, ], !=, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;]
[], !=, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, (, byte]
[-, 1, ], !=, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =]
[., length, -, 1, ], !=, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, .]
[], !=, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, (, byte]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, (, byte, ), (, sign]
[=, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, (, byte, ), (, sign, *, oper, .]
[;, def, ., sign, =, (, byte, ), (, sign, *, oper, ., sign, ), ;, def, ., nans, =]
[), ;, def, ., sign, =, (, byte, ), (, sign, *, oper, ., sign, ), ;, def, ., nans]
[=, (, byte, ), (, sign, *, oper, ., sign, ), ;, def, ., nans, =, INFINITE, ;, }, if]
[., sign, =, (, byte, ), (, sign, *, oper, ., sign, ), ;, def, ., nans, =, INFINITE, ;]
[;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -]
[;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -]
[), ;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length]
[*, oper, ., sign, ), ;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&, mant]
[), ;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length]
[., sign, ), ;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&, mant, [, mant]
[=, INFINITE, ;, }, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0]
[., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ]]
[;, }, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (]
[&&, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, def, =, newInstance, (, getZero, (, )]
[==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, def, =, newInstance, (, getZero]
[&&, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, def, =, newInstance, (, getZero, (, )]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (]
[==, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }]
[[, mant, ., length, -, 1, ], ==, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;]
[], ==, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;]
[-, 1, ], ==, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =]
[., length, -, 1, ], ==, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, .]
[], ==, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (]
[=, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE]
[;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, QNAN, ), {, def]
[), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, QNAN, ), {]
[=, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, QNAN, ), {, def, =, newInstance, (, getZero]
[., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, QNAN, ), {, def, =, newInstance]
[;, }, if, (, nans, ==, INFINITE, ||, nans, ==, QNAN, ), {, def, =, newInstance, (, getZero, (, )]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (]
[||, nans, ==, QNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN]
[==, INFINITE, ||, nans, ==, QNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans]
[||, nans, ==, QNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (]
[==, QNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (]
[=, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE]
[;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, SNAN, ), {, def]
[), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, SNAN, ), {]
[=, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, SNAN, ), {, def, =, newInstance, (, getZero]
[., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, SNAN, ), {, def, =, newInstance]
[;, }, if, (, nans, ==, INFINITE, ||, nans, ==, SNAN, ), {, def, =, newInstance, (, getZero, (, )]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, break, ;]
[||, nans, ==, SNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN]
[==, INFINITE, ||, nans, ==, SNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans]
[||, nans, ==, SNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, break, ;]
[==, SNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, break, ;]
[=, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, break, ;, case, DfpField, .]
[;, def, ., nans, =, QNAN, ;, }, break, ;, case, DfpField, ., FLAG_UNDERFLOW, :, if, (, (, result, .]
[), ;, def, ., nans, =, QNAN, ;, }, break, ;, case, DfpField, ., FLAG_UNDERFLOW, :, if, (, (, result]
[=, QNAN, ;, }, break, ;, case, DfpField, ., FLAG_UNDERFLOW, :, if, (, (, result, ., exp, +, mant, .]
[., nans, =, QNAN, ;, }, break, ;, case, DfpField, ., FLAG_UNDERFLOW, :, if, (, (, result, ., exp, +]
[;, }, break, ;, case, DfpField, ., FLAG_UNDERFLOW, :, if, (, (, result, ., exp, +, mant, ., length, )]
[:, if, (, (, result, ., exp, +, mant, ., length, ), <, MIN_EXP, ), {, def, =, newInstance, (]
[., FLAG_UNDERFLOW, :, if, (, (, result, ., exp, +, mant, ., length, ), <, MIN_EXP, ), {, def, =]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;, }]
[<, MIN_EXP, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign]
[), <, MIN_EXP, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, .]
[+, mant, ., length, ), <, MIN_EXP, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, .]
[., exp, +, mant, ., length, ), <, MIN_EXP, ), {, def, =, newInstance, (, getZero, (, ), ), ;]
[), <, MIN_EXP, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, .]
[., length, ), <, MIN_EXP, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;, }]
[=, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;, }, else, {, def]
[;, def, ., sign, =, result, ., sign, ;, }, else, {, def, =, newInstance, (, result, ), ;, }]
[), ;, def, ., sign, =, result, ., sign, ;, }, else, {, def, =, newInstance, (, result, ), ;]
[=, result, ., sign, ;, }, else, {, def, =, newInstance, (, result, ), ;, }, result, ., exp, =]
[., sign, =, result, ., sign, ;, }, else, {, def, =, newInstance, (, result, ), ;, }, result, .]
[;, }, else, {, def, =, newInstance, (, result, ), ;, }, result, ., exp, =, result, ., exp, +]
[., sign, ;, }, else, {, def, =, newInstance, (, result, ), ;, }, result, ., exp, =, result, .]
[=, newInstance, (, result, ), ;, }, result, ., exp, =, result, ., exp, +, ERR_SCALE, ;, break, ;, case]
[;, }, result, ., exp, =, result, ., exp, +, ERR_SCALE, ;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :, result]
[), ;, }, result, ., exp, =, result, ., exp, +, ERR_SCALE, ;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :]
[=, result, ., exp, +, ERR_SCALE, ;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :, result, ., exp, =, result, .]
[., exp, =, result, ., exp, +, ERR_SCALE, ;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :, result, ., exp, =]
[;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :, result, ., exp, =, result, ., exp, -, ERR_SCALE, ;, def, =]
[+, ERR_SCALE, ;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :, result, ., exp, =, result, ., exp, -, ERR_SCALE, ;]
[., exp, +, ERR_SCALE, ;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :, result, ., exp, =, result, ., exp, -]
[;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :, result, ., exp, =, result, ., exp, -, ERR_SCALE, ;, def, =]
[:, result, ., exp, =, result, ., exp, -, ERR_SCALE, ;, def, =, newInstance, (, getZero, (, ), ), ;]
[., FLAG_OVERFLOW, :, result, ., exp, =, result, ., exp, -, ERR_SCALE, ;, def, =, newInstance, (, getZero, (, )]
[=, result, ., exp, -, ERR_SCALE, ;, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =]
[., exp, =, result, ., exp, -, ERR_SCALE, ;, def, =, newInstance, (, getZero, (, ), ), ;, def, .]
[;, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;, def, .]
[-, ERR_SCALE, ;, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;]
[., exp, -, ERR_SCALE, ;, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, .]
[;, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;, def, .]
[=, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;, def, ., nans, =]
[;, def, ., sign, =, result, ., sign, ;, def, ., nans, =, INFINITE, ;, break, ;, default, :, def]
[), ;, def, ., sign, =, result, ., sign, ;, def, ., nans, =, INFINITE, ;, break, ;, default, :]
[=, result, ., sign, ;, def, ., nans, =, INFINITE, ;, break, ;, default, :, def, =, result, ;, break]
[., sign, =, result, ., sign, ;, def, ., nans, =, INFINITE, ;, break, ;, default, :, def, =, result]
[;, def, ., nans, =, INFINITE, ;, break, ;, default, :, def, =, result, ;, break, ;, }, return, trap]
[., sign, ;, def, ., nans, =, INFINITE, ;, break, ;, default, :, def, =, result, ;, break, ;, }]
[=, INFINITE, ;, break, ;, default, :, def, =, result, ;, break, ;, }, return, trap, (, type, ,, what]
[., nans, =, INFINITE, ;, break, ;, default, :, def, =, result, ;, break, ;, }, return, trap, (, type]
[;, break, ;, default, :, def, =, result, ;, break, ;, }, return, trap, (, type, ,, what, ,, oper]
[=, result, ;, break, ;, }, return, trap, (, type, ,, what, ,, oper, ,, def, ,, result, ), ;]
[;, break, ;, }, return, trap, (, type, ,, what, ,, oper, ,, def, ,, result, ), ;, }, protected]
[;, }, protected, Dfp, trap, (, int, type, ,, String, what, ,, Dfp, oper, ,, Dfp, def, ,, Dfp, result]
[,, what, ,, oper, ,, def, ,, result, ), ;, }, protected, Dfp, trap, (, int, type, ,, String, what]
[,, oper, ,, def, ,, result, ), ;, }, protected, Dfp, trap, (, int, type, ,, String, what, ,, Dfp]
[,, def, ,, result, ), ;, }, protected, Dfp, trap, (, int, type, ,, String, what, ,, Dfp, oper, ,]
[,, result, ), ;, }, protected, Dfp, trap, (, int, type, ,, String, what, ,, Dfp, oper, ,, Dfp, def]
[), ;, }, protected, Dfp, trap, (, int, type, ,, String, what, ,, Dfp, oper, ,, Dfp, def, ,, Dfp]
[;, }, public, int, classify, (, ), {, return, nans, ;, }, public, static, Dfp, copysign, (, final, Dfp, x]
[;, }, public, static, Dfp, copysign, (, final, Dfp, x, ,, final, Dfp, y, ), {, Dfp, result, =, x]
[;, result, ., sign, =, y, ., sign, ;, return, result, ;, }, public, Dfp, nextAfter, (, final, Dfp, x]
[., newInstance, (, x, ), ;, result, ., sign, =, y, ., sign, ;, return, result, ;, }, public, Dfp]
[), ;, result, ., sign, =, y, ., sign, ;, return, result, ;, }, public, Dfp, nextAfter, (, final, Dfp]
[=, y, ., sign, ;, return, result, ;, }, public, Dfp, nextAfter, (, final, Dfp, x, ), {, if, (]
[., sign, =, y, ., sign, ;, return, result, ;, }, public, Dfp, nextAfter, (, final, Dfp, x, ), {]
[;, return, result, ;, }, public, Dfp, nextAfter, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (]
[., sign, ;, return, result, ;, }, public, Dfp, nextAfter, (, final, Dfp, x, ), {, if, (, field, .]
[;, }, public, Dfp, nextAfter, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[!=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final]
[., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, .]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, )]
[., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance]
[., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result]
[;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN]
[;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEXT_AFTER_TRAP, ,, x, ,, result, )]
[), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEXT_AFTER_TRAP, ,, x, ,, result]
[=, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, boolean, up]
[., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }]
[;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, boolean, up, =, false]
[;, }, boolean, up, =, false, ;, if, (, this, ., lessThan, (, x, ), ), {, up, =, true]
[,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, boolean, up, =, false, ;, if, (, this, ., lessThan, (]
[., FLAG_INVALID, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, boolean, up, =, false, ;, if, (, this, .]
[,, x, ,, result, ), ;, }, boolean, up, =, false, ;, if, (, this, ., lessThan, (, x, )]
[,, result, ), ;, }, boolean, up, =, false, ;, if, (, this, ., lessThan, (, x, ), ), {]
[), ;, }, boolean, up, =, false, ;, if, (, this, ., lessThan, (, x, ), ), {, up, =]
[;, if, (, this, ., lessThan, (, x, ), ), {, up, =, true, ;, }, if, (, compare, (]
[), {, up, =, true, ;, }, if, (, compare, (, this, ,, x, ), ==, 0, ), {, return]
[., lessThan, (, x, ), ), {, up, =, true, ;, }, if, (, compare, (, this, ,, x, )]
[), ), {, up, =, true, ;, }, if, (, compare, (, this, ,, x, ), ==, 0, ), {]
[=, true, ;, }, if, (, compare, (, this, ,, x, ), ==, 0, ), {, return, newInstance, (, x]
[;, }, if, (, compare, (, this, ,, x, ), ==, 0, ), {, return, newInstance, (, x, ), ;]
[), {, return, newInstance, (, x, ), ;, }, if, (, lessThan, (, getZero, (, ), ), ), {, up]
[==, 0, ), {, return, newInstance, (, x, ), ;, }, if, (, lessThan, (, getZero, (, ), ), )]
[,, x, ), ==, 0, ), {, return, newInstance, (, x, ), ;, }, if, (, lessThan, (, getZero, (]
[), ==, 0, ), {, return, newInstance, (, x, ), ;, }, if, (, lessThan, (, getZero, (, ), )]
[), {, return, newInstance, (, x, ), ;, }, if, (, lessThan, (, getZero, (, ), ), ), {, up]
[;, }, if, (, lessThan, (, getZero, (, ), ), ), {, up, =, !, up, ;, }, final, Dfp]
[), ;, }, if, (, lessThan, (, getZero, (, ), ), ), {, up, =, !, up, ;, }, final]
[), {, up, =, !, up, ;, }, final, Dfp, inc, ;, Dfp, result, ;, if, (, up, ), {]
[), ), {, up, =, !, up, ;, }, final, Dfp, inc, ;, Dfp, result, ;, if, (, up, )]
[=, !, up, ;, }, final, Dfp, inc, ;, Dfp, result, ;, if, (, up, ), {, inc, =, newInstance]
[;, }, final, Dfp, inc, ;, Dfp, result, ;, if, (, up, ), {, inc, =, newInstance, (, getOne, (]
[;, }, final, Dfp, inc, ;, Dfp, result, ;, if, (, up, ), {, inc, =, newInstance, (, getOne, (]
[), {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =, this, ., exp, -, mant]
[=, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =, this, ., exp, -, mant, ., length, +]
[;, inc, ., exp, =, this, ., exp, -, mant, ., length, +, 1, ;, inc, ., sign, =, this]
[), ;, inc, ., exp, =, this, ., exp, -, mant, ., length, +, 1, ;, inc, ., sign, =]
[=, this, ., exp, -, mant, ., length, +, 1, ;, inc, ., sign, =, this, ., sign, ;, if]
[., exp, =, this, ., exp, -, mant, ., length, +, 1, ;, inc, ., sign, =, this, ., sign]
[;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (, getZero, (, ), ), )]
[+, 1, ;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (, getZero, (, )]
[-, mant, ., length, +, 1, ;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals]
[., exp, -, mant, ., length, +, 1, ;, inc, ., sign, =, this, ., sign, ;, if, (, this]
[+, 1, ;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (, getZero, (, )]
[., length, +, 1, ;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (, getZero]
[;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (, getZero, (, ), ), )]
[=, this, ., sign, ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp]
[., sign, =, this, ., sign, ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc]
[;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -, mant]
[., sign, ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP]
[), {, inc, ., exp, =, MIN_EXP, -, mant, ., length, ;, }, result, =, add, (, inc, ), ;]
[., equals, (, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -, mant, ., length, ;, }]
[), ), {, inc, ., exp, =, MIN_EXP, -, mant, ., length, ;, }, result, =, add, (, inc, )]
[=, MIN_EXP, -, mant, ., length, ;, }, result, =, add, (, inc, ), ;, }, else, {, inc, =]
[., exp, =, MIN_EXP, -, mant, ., length, ;, }, result, =, add, (, inc, ), ;, }, else, {]
[;, }, result, =, add, (, inc, ), ;, }, else, {, inc, =, newInstance, (, getOne, (, ), )]
[-, mant, ., length, ;, }, result, =, add, (, inc, ), ;, }, else, {, inc, =, newInstance, (]
[;, }, result, =, add, (, inc, ), ;, }, else, {, inc, =, newInstance, (, getOne, (, ), )]
[., length, ;, }, result, =, add, (, inc, ), ;, }, else, {, inc, =, newInstance, (, getOne, (]
[=, add, (, inc, ), ;, }, else, {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, .]
[;, }, else, {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =, this, ., exp]
[), ;, }, else, {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =, this, .]
[=, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =, this, ., exp, ;, inc, ., sign, =]
[;, inc, ., exp, =, this, ., exp, ;, inc, ., sign, =, this, ., sign, ;, if, (, this]
[), ;, inc, ., exp, =, this, ., exp, ;, inc, ., sign, =, this, ., sign, ;, if, (]
[=, this, ., exp, ;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (, inc]
[., exp, =, this, ., exp, ;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals]
[;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (, inc, ), ), {, inc]
[., exp, ;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (, inc, ), )]
[=, this, ., sign, ;, if, (, this, ., equals, (, inc, ), ), {, inc, ., exp, =, this]
[., sign, =, this, ., sign, ;, if, (, this, ., equals, (, inc, ), ), {, inc, ., exp]
[;, if, (, this, ., equals, (, inc, ), ), {, inc, ., exp, =, this, ., exp, -, mant]
[., sign, ;, if, (, this, ., equals, (, inc, ), ), {, inc, ., exp, =, this, ., exp]
[), {, inc, ., exp, =, this, ., exp, -, mant, ., length, ;, }, else, {, inc, ., exp]
[., equals, (, inc, ), ), {, inc, ., exp, =, this, ., exp, -, mant, ., length, ;, }]
[), ), {, inc, ., exp, =, this, ., exp, -, mant, ., length, ;, }, else, {, inc, .]
[=, this, ., exp, -, mant, ., length, ;, }, else, {, inc, ., exp, =, this, ., exp, -]
[., exp, =, this, ., exp, -, mant, ., length, ;, }, else, {, inc, ., exp, =, this, .]
[;, }, else, {, inc, ., exp, =, this, ., exp, -, mant, ., length, +, 1, ;, }, if]
[-, mant, ., length, ;, }, else, {, inc, ., exp, =, this, ., exp, -, mant, ., length, +]
[., exp, -, mant, ., length, ;, }, else, {, inc, ., exp, =, this, ., exp, -, mant, .]
[;, }, else, {, inc, ., exp, =, this, ., exp, -, mant, ., length, +, 1, ;, }, if]
[., length, ;, }, else, {, inc, ., exp, =, this, ., exp, -, mant, ., length, +, 1, ;]
[=, this, ., exp, -, mant, ., length, +, 1, ;, }, if, (, this, ., equals, (, getZero, (]
[., exp, =, this, ., exp, -, mant, ., length, +, 1, ;, }, if, (, this, ., equals, (]
[;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -]
[+, 1, ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =]
[-, mant, ., length, +, 1, ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {]
[., exp, -, mant, ., length, +, 1, ;, }, if, (, this, ., equals, (, getZero, (, ), )]
[+, 1, ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =]
[., length, +, 1, ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, .]
[;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -]
[), {, inc, ., exp, =, MIN_EXP, -, mant, ., length, ;, }, result, =, this, ., subtract, (, inc]
[., equals, (, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -, mant, ., length, ;, }]
[), ), {, inc, ., exp, =, MIN_EXP, -, mant, ., length, ;, }, result, =, this, ., subtract, (]
[=, MIN_EXP, -, mant, ., length, ;, }, result, =, this, ., subtract, (, inc, ), ;, }, if, (]
[., exp, =, MIN_EXP, -, mant, ., length, ;, }, result, =, this, ., subtract, (, inc, ), ;, }]
[;, }, result, =, this, ., subtract, (, inc, ), ;, }, if, (, result, ., classify, (, ), ==]
[-, mant, ., length, ;, }, result, =, this, ., subtract, (, inc, ), ;, }, if, (, result, .]
[;, }, result, =, this, ., subtract, (, inc, ), ;, }, if, (, result, ., classify, (, ), ==]
[., length, ;, }, result, =, this, ., subtract, (, inc, ), ;, }, if, (, result, ., classify, (]
[=, this, ., subtract, (, inc, ), ;, }, if, (, result, ., classify, (, ), ==, INFINITE, &&, this]
[;, }, if, (, result, ., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE, )]
[., subtract, (, inc, ), ;, }, if, (, result, ., classify, (, ), ==, INFINITE, &&, this, ., classify]
[), ;, }, if, (, result, ., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP]
[&&, this, ., classify, (, ), !=, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result]
[==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE, ), {, field, ., setIEEEFlagsBits, (]
[&&, this, ., classify, (, ), !=, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP]
[!=, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT]
[., classify, (, ), !=, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP]
[;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, if, (, result]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,]
[), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, if, (]
[., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }]
[=, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, if, (, result, ., equals]
[;, }, if, (, result, ., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (, )]
[,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&]
[., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, )]
[,, x, ,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&, this, .]
[,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&, this, ., equals, (]
[), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP]
[&&, this, ., equals, (, getZero, (, ), ), ==, false, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT]
[., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (, ), ), ==, false, ), {]
[), &&, this, ., equals, (, getZero, (, ), ), ==, false, ), {, field, ., setIEEEFlagsBits, (, DfpField, .]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP]
[==, false, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT]
[., equals, (, getZero, (, ), ), ==, false, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;]
[), ==, false, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, .]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP]
[;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, return, result, ;]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,]
[), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, return, result]
[., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }]
[=, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, return, result, ;, }, public]
[;, }, return, result, ;, }, public, double, toDouble, (, ), {, if, (, isInfinite, (, ), ), {, if]
[,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, return, result, ;, }, public, double, toDouble, (, ), {, if]
[., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, return, result, ;, }, public, double, toDouble, (, )]
[,, x, ,, result, ), ;, }, return, result, ;, }, public, double, toDouble, (, ), {, if, (, isInfinite]
[,, result, ), ;, }, return, result, ;, }, public, double, toDouble, (, ), {, if, (, isInfinite, (, )]
[), ;, }, return, result, ;, }, public, double, toDouble, (, ), {, if, (, isInfinite, (, ), ), {]
[;, }, public, double, toDouble, (, ), {, if, (, isInfinite, (, ), ), {, if, (, lessThan, (, getZero]
[), {, if, (, lessThan, (, getZero, (, ), ), ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, else, {]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, isNaN]
[), ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (]
[;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, isNaN, (, ), ), {, return, Double]
[., NEGATIVE_INFINITY, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, isNaN, (, ), ), {]
[;, }, }, if, (, isNaN, (, ), ), {, return, Double, ., NaN, ;, }, Dfp, y, =, this]
[., POSITIVE_INFINITY, ;, }, }, if, (, isNaN, (, ), ), {, return, Double, ., NaN, ;, }, Dfp, y]
[), {, return, Double, ., NaN, ;, }, Dfp, y, =, this, ;, boolean, negate, =, false, ;, int, cmp0]
[;, }, Dfp, y, =, this, ;, boolean, negate, =, false, ;, int, cmp0, =, compare, (, this, ,, getZero]
[., NaN, ;, }, Dfp, y, =, this, ;, boolean, negate, =, false, ;, int, cmp0, =, compare, (, this]
[;, boolean, negate, =, false, ;, int, cmp0, =, compare, (, this, ,, getZero, (, ), ), ;, if, (]
[;, int, cmp0, =, compare, (, this, ,, getZero, (, ), ), ;, if, (, cmp0, ==, 0, ), {]
[;, if, (, cmp0, ==, 0, ), {, return, sign, <, 0, ?, -, 0.0, :, +, 0.0, ;, }]
[,, getZero, (, ), ), ;, if, (, cmp0, ==, 0, ), {, return, sign, <, 0, ?, -, 0.0]
[), ;, if, (, cmp0, ==, 0, ), {, return, sign, <, 0, ?, -, 0.0, :, +, 0.0, ;]
[), {, return, sign, <, 0, ?, -, 0.0, :, +, 0.0, ;, }, else, if, (, cmp0, <, 0]
[==, 0, ), {, return, sign, <, 0, ?, -, 0.0, :, +, 0.0, ;, }, else, if, (, cmp0]
[), {, return, sign, <, 0, ?, -, 0.0, :, +, 0.0, ;, }, else, if, (, cmp0, <, 0]
[;, }, else, if, (, cmp0, <, 0, ), {, y, =, negate, (, ), ;, negate, =, true, ;]
[?, -, 0.0, :, +, 0.0, ;, }, else, if, (, cmp0, <, 0, ), {, y, =, negate, (]
[<, 0, ?, -, 0.0, :, +, 0.0, ;, }, else, if, (, cmp0, <, 0, ), {, y, =]
[?, -, 0.0, :, +, 0.0, ;, }, else, if, (, cmp0, <, 0, ), {, y, =, negate, (]
[:, +, 0.0, ;, }, else, if, (, cmp0, <, 0, ), {, y, =, negate, (, ), ;, negate]
[:, +, 0.0, ;, }, else, if, (, cmp0, <, 0, ), {, y, =, negate, (, ), ;, negate]
[;, }, else, if, (, cmp0, <, 0, ), {, y, =, negate, (, ), ;, negate, =, true, ;]
[;, }, else, if, (, cmp0, <, 0, ), {, y, =, negate, (, ), ;, negate, =, true, ;]
[), {, y, =, negate, (, ), ;, negate, =, true, ;, }, int, exponent, =, (, int, ), (]
[<, 0, ), {, y, =, negate, (, ), ;, negate, =, true, ;, }, int, exponent, =, (, int]
[), {, y, =, negate, (, ), ;, negate, =, true, ;, }, int, exponent, =, (, int, ), (]
[=, negate, (, ), ;, negate, =, true, ;, }, int, exponent, =, (, int, ), (, y, ., intLog10]
[;, negate, =, true, ;, }, int, exponent, =, (, int, ), (, y, ., intLog10, (, ), *, 3.32]
[=, true, ;, }, int, exponent, =, (, int, ), (, y, ., intLog10, (, ), *, 3.32, ), ;]
[;, }, int, exponent, =, (, int, ), (, y, ., intLog10, (, ), *, 3.32, ), ;, if, (]
[;, if, (, exponent, <, 0, ), {, exponent, --, ;, }, Dfp, tempDfp, =, DfpMath, ., pow, (, getTwo]
[;, if, (, exponent, <, 0, ), {, exponent, --, ;, }, Dfp, tempDfp, =, DfpMath, ., pow, (, getTwo]
[), ;, if, (, exponent, <, 0, ), {, exponent, --, ;, }, Dfp, tempDfp, =, DfpMath, ., pow, (]
[*, 3.32, ), ;, if, (, exponent, <, 0, ), {, exponent, --, ;, }, Dfp, tempDfp, =, DfpMath, .]
[., intLog10, (, ), *, 3.32, ), ;, if, (, exponent, <, 0, ), {, exponent, --, ;, }, Dfp]
[), ;, if, (, exponent, <, 0, ), {, exponent, --, ;, }, Dfp, tempDfp, =, DfpMath, ., pow, (]
[), {, exponent, --, ;, }, Dfp, tempDfp, =, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ;]
[<, 0, ), {, exponent, --, ;, }, Dfp, tempDfp, =, DfpMath, ., pow, (, getTwo, (, ), ,, exponent]
[), {, exponent, --, ;, }, Dfp, tempDfp, =, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ;]
[;, }, Dfp, tempDfp, =, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ;, while, (, tempDfp, .]
[--, ;, }, Dfp, tempDfp, =, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ;, while, (, tempDfp]
[;, while, (, tempDfp, ., lessThan, (, y, ), ||, tempDfp, ., equals, (, y, ), ), {, tempDfp, =]
[., pow, (, getTwo, (, ), ,, exponent, ), ;, while, (, tempDfp, ., lessThan, (, y, ), ||, tempDfp]
[,, exponent, ), ;, while, (, tempDfp, ., lessThan, (, y, ), ||, tempDfp, ., equals, (, y, ), )]
[), ;, while, (, tempDfp, ., lessThan, (, y, ), ||, tempDfp, ., equals, (, y, ), ), {, tempDfp]
[), {, tempDfp, =, tempDfp, ., multiply, (, 2, ), ;, exponent, ++, ;, }, exponent, --, ;, y, =]
[||, tempDfp, ., equals, (, y, ), ), {, tempDfp, =, tempDfp, ., multiply, (, 2, ), ;, exponent, ++]
[., lessThan, (, y, ), ||, tempDfp, ., equals, (, y, ), ), {, tempDfp, =, tempDfp, ., multiply, (]
[), ||, tempDfp, ., equals, (, y, ), ), {, tempDfp, =, tempDfp, ., multiply, (, 2, ), ;, exponent]
[), {, tempDfp, =, tempDfp, ., multiply, (, 2, ), ;, exponent, ++, ;, }, exponent, --, ;, y, =]
[., equals, (, y, ), ), {, tempDfp, =, tempDfp, ., multiply, (, 2, ), ;, exponent, ++, ;, }]
[), ), {, tempDfp, =, tempDfp, ., multiply, (, 2, ), ;, exponent, ++, ;, }, exponent, --, ;, y]
[=, tempDfp, ., multiply, (, 2, ), ;, exponent, ++, ;, }, exponent, --, ;, y, =, y, ., divide]
[;, exponent, ++, ;, }, exponent, --, ;, y, =, y, ., divide, (, DfpMath, ., pow, (, getTwo, (]
[., multiply, (, 2, ), ;, exponent, ++, ;, }, exponent, --, ;, y, =, y, ., divide, (, DfpMath]
[), ;, exponent, ++, ;, }, exponent, --, ;, y, =, y, ., divide, (, DfpMath, ., pow, (, getTwo]
[;, }, exponent, --, ;, y, =, y, ., divide, (, DfpMath, ., pow, (, getTwo, (, ), ,, exponent]
[++, ;, }, exponent, --, ;, y, =, y, ., divide, (, DfpMath, ., pow, (, getTwo, (, ), ,]
[;, y, =, y, ., divide, (, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ), ;, if]
[--, ;, y, =, y, ., divide, (, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ), ;]
[=, y, ., divide, (, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ), ;, if, (, exponent]
[;, if, (, exponent, >, -, 1023, ), {, y, =, y, ., subtract, (, getOne, (, ), ), ;]
[., divide, (, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ), ;, if, (, exponent, >, -]
[), ;, if, (, exponent, >, -, 1023, ), {, y, =, y, ., subtract, (, getOne, (, ), )]
[., pow, (, getTwo, (, ), ,, exponent, ), ), ;, if, (, exponent, >, -, 1023, ), {, y]
[,, exponent, ), ), ;, if, (, exponent, >, -, 1023, ), {, y, =, y, ., subtract, (, getOne]
[), ), ;, if, (, exponent, >, -, 1023, ), {, y, =, y, ., subtract, (, getOne, (, )]
[), {, y, =, y, ., subtract, (, getOne, (, ), ), ;, }, if, (, exponent, <, -, 1074]
[>, -, 1023, ), {, y, =, y, ., subtract, (, getOne, (, ), ), ;, }, if, (, exponent]
[), {, y, =, y, ., subtract, (, getOne, (, ), ), ;, }, if, (, exponent, <, -, 1074]
[), {, y, =, y, ., subtract, (, getOne, (, ), ), ;, }, if, (, exponent, <, -, 1074]
[=, y, ., subtract, (, getOne, (, ), ), ;, }, if, (, exponent, <, -, 1074, ), {, return]
[;, }, if, (, exponent, <, -, 1074, ), {, return, 0, ;, }, if, (, exponent, >, 1023, )]
[., subtract, (, getOne, (, ), ), ;, }, if, (, exponent, <, -, 1074, ), {, return, 0, ;]
[), ;, }, if, (, exponent, <, -, 1074, ), {, return, 0, ;, }, if, (, exponent, >, 1023]
[), {, return, 0, ;, }, if, (, exponent, >, 1023, ), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :]
[<, -, 1074, ), {, return, 0, ;, }, if, (, exponent, >, 1023, ), {, return, negate, ?, Double]
[), {, return, 0, ;, }, if, (, exponent, >, 1023, ), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :]
[), {, return, 0, ;, }, if, (, exponent, >, 1023, ), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :]
[;, }, if, (, exponent, >, 1023, ), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :, Double, ., POSITIVE_INFINITY, ;]
[), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :, Double, ., POSITIVE_INFINITY, ;, }, y, =, y, ., multiply, (]
[>, 1023, ), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :, Double, ., POSITIVE_INFINITY, ;, }, y, =, y, .]
[), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :, Double, ., POSITIVE_INFINITY, ;, }, y, =, y, ., multiply, (]
[;, }, y, =, y, ., multiply, (, newInstance, (, 4503599627370496l, ), ), ., rint, (, ), ;, String, str]
[?, Double, ., NEGATIVE_INFINITY, :, Double, ., POSITIVE_INFINITY, ;, }, y, =, y, ., multiply, (, newInstance, (, 4503599627370496l, )]
[:, Double, ., POSITIVE_INFINITY, ;, }, y, =, y, ., multiply, (, newInstance, (, 4503599627370496l, ), ), ., rint, (]
[., NEGATIVE_INFINITY, :, Double, ., POSITIVE_INFINITY, ;, }, y, =, y, ., multiply, (, newInstance, (, 4503599627370496l, ), ), .]
[;, }, y, =, y, ., multiply, (, newInstance, (, 4503599627370496l, ), ), ., rint, (, ), ;, String, str]
[., POSITIVE_INFINITY, ;, }, y, =, y, ., multiply, (, newInstance, (, 4503599627370496l, ), ), ., rint, (, ), ;]
[=, y, ., multiply, (, newInstance, (, 4503599627370496l, ), ), ., rint, (, ), ;, String, str, =, y, .]
[;, String, str, =, y, ., toString, (, ), ;, str, =, str, ., substring, (, 0, ,, str, .]
[., rint, (, ), ;, String, str, =, y, ., toString, (, ), ;, str, =, str, ., substring, (]
[., multiply, (, newInstance, (, 4503599627370496l, ), ), ., rint, (, ), ;, String, str, =, y, ., toString, (]
[), ., rint, (, ), ;, String, str, =, y, ., toString, (, ), ;, str, =, str, ., substring]
[), ), ., rint, (, ), ;, String, str, =, y, ., toString, (, ), ;, str, =, str, .]
[;, str, =, str, ., substring, (, 0, ,, str, ., length, (, ), -, 1, ), ;, long, mantissa]
[., toString, (, ), ;, str, =, str, ., substring, (, 0, ,, str, ., length, (, ), -, 1]
[=, str, ., substring, (, 0, ,, str, ., length, (, ), -, 1, ), ;, long, mantissa, =, Long]
[;, long, mantissa, =, Long, ., parseLong, (, str, ), ;, if, (, mantissa, ==, 4503599627370496L, ), {, mantissa, =]
[., substring, (, 0, ,, str, ., length, (, ), -, 1, ), ;, long, mantissa, =, Long, ., parseLong]
[,, str, ., length, (, ), -, 1, ), ;, long, mantissa, =, Long, ., parseLong, (, str, ), ;]
[), ;, long, mantissa, =, Long, ., parseLong, (, str, ), ;, if, (, mantissa, ==, 4503599627370496L, ), {, mantissa]
[-, 1, ), ;, long, mantissa, =, Long, ., parseLong, (, str, ), ;, if, (, mantissa, ==, 4503599627370496L, )]
[., length, (, ), -, 1, ), ;, long, mantissa, =, Long, ., parseLong, (, str, ), ;, if, (]
[), ;, long, mantissa, =, Long, ., parseLong, (, str, ), ;, if, (, mantissa, ==, 4503599627370496L, ), {, mantissa]
[;, if, (, mantissa, ==, 4503599627370496L, ), {, mantissa, =, 0, ;, exponent, ++, ;, }, if, (, exponent, <=]
[., parseLong, (, str, ), ;, if, (, mantissa, ==, 4503599627370496L, ), {, mantissa, =, 0, ;, exponent, ++, ;]
[), ;, if, (, mantissa, ==, 4503599627370496L, ), {, mantissa, =, 0, ;, exponent, ++, ;, }, if, (, exponent]
[), {, mantissa, =, 0, ;, exponent, ++, ;, }, if, (, exponent, <=, -, 1023, ), {, exponent, --]
[==, 4503599627370496L, ), {, mantissa, =, 0, ;, exponent, ++, ;, }, if, (, exponent, <=, -, 1023, ), {]
[), {, mantissa, =, 0, ;, exponent, ++, ;, }, if, (, exponent, <=, -, 1023, ), {, exponent, --]
[=, 0, ;, exponent, ++, ;, }, if, (, exponent, <=, -, 1023, ), {, exponent, --, ;, }, while]
[;, exponent, ++, ;, }, if, (, exponent, <=, -, 1023, ), {, exponent, --, ;, }, while, (, exponent]
[;, }, if, (, exponent, <=, -, 1023, ), {, exponent, --, ;, }, while, (, exponent, <, -, 1023]
[++, ;, }, if, (, exponent, <=, -, 1023, ), {, exponent, --, ;, }, while, (, exponent, <, -]
[), {, exponent, --, ;, }, while, (, exponent, <, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=, 1]
[<=, -, 1023, ), {, exponent, --, ;, }, while, (, exponent, <, -, 1023, ), {, exponent, ++, ;]
[), {, exponent, --, ;, }, while, (, exponent, <, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=, 1]
[), {, exponent, --, ;, }, while, (, exponent, <, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=, 1]
[;, }, while, (, exponent, <, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits]
[--, ;, }, while, (, exponent, <, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long]
[), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits, =, mantissa, |, (, (, exponent, +, 1023L]
[<, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits, =, mantissa, |, (, (]
[), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits, =, mantissa, |, (, (, exponent, +, 1023L]
[), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits, =, mantissa, |, (, (, exponent, +, 1023L]
[;, mantissa, >>>=, 1, ;, }, long, bits, =, mantissa, |, (, (, exponent, +, 1023L, ), <<, 52, )]
[++, ;, mantissa, >>>=, 1, ;, }, long, bits, =, mantissa, |, (, (, exponent, +, 1023L, ), <<, 52]
[>>>=, 1, ;, }, long, bits, =, mantissa, |, (, (, exponent, +, 1023L, ), <<, 52, ), ;, double]
[;, }, long, bits, =, mantissa, |, (, (, exponent, +, 1023L, ), <<, 52, ), ;, double, x, =]
[;, double, x, =, Double, ., longBitsToDouble, (, bits, ), ;, if, (, negate, ), {, x, =, -, x]
[|, (, (, exponent, +, 1023L, ), <<, 52, ), ;, double, x, =, Double, ., longBitsToDouble, (, bits, )]
[;, double, x, =, Double, ., longBitsToDouble, (, bits, ), ;, if, (, negate, ), {, x, =, -, x]
[), ;, double, x, =, Double, ., longBitsToDouble, (, bits, ), ;, if, (, negate, ), {, x, =, -]
[<<, 52, ), ;, double, x, =, Double, ., longBitsToDouble, (, bits, ), ;, if, (, negate, ), {, x]
[), <<, 52, ), ;, double, x, =, Double, ., longBitsToDouble, (, bits, ), ;, if, (, negate, ), {]
[+, 1023L, ), <<, 52, ), ;, double, x, =, Double, ., longBitsToDouble, (, bits, ), ;, if, (, negate]
[), <<, 52, ), ;, double, x, =, Double, ., longBitsToDouble, (, bits, ), ;, if, (, negate, ), {]
[), ;, double, x, =, Double, ., longBitsToDouble, (, bits, ), ;, if, (, negate, ), {, x, =, -]
[;, if, (, negate, ), {, x, =, -, x, ;, }, return, x, ;, }, public, double, [, ]]
[., longBitsToDouble, (, bits, ), ;, if, (, negate, ), {, x, =, -, x, ;, }, return, x, ;]
[), ;, if, (, negate, ), {, x, =, -, x, ;, }, return, x, ;, }, public, double, []
[), {, x, =, -, x, ;, }, return, x, ;, }, public, double, [, ], toSplitDouble, (, ), {]
[=, -, x, ;, }, return, x, ;, }, public, double, [, ], toSplitDouble, (, ), {, double, split, []
[;, }, return, x, ;, }, public, double, [, ], toSplitDouble, (, ), {, double, split, [, ], =, new]
[;, }, return, x, ;, }, public, double, [, ], toSplitDouble, (, ), {, double, split, [, ], =, new]
[;, }, public, double, [, ], toSplitDouble, (, ), {, double, split, [, ], =, new, double, [, 2, ]]
[;, long, mask, =, 0xffffffffc0000000L, ;, split, [, 0, ], =, Double, ., longBitsToDouble, (, Double, ., doubleToLongBits, (, toDouble]
[], ;, long, mask, =, 0xffffffffc0000000L, ;, split, [, 0, ], =, Double, ., longBitsToDouble, (, Double, ., doubleToLongBits, (]
[;, split, [, 0, ], =, Double, ., longBitsToDouble, (, Double, ., doubleToLongBits, (, toDouble, (, ), ), &, mask]
[=, Double, ., longBitsToDouble, (, Double, ., doubleToLongBits, (, toDouble, (, ), ), &, mask, ), ;, split, [, 1]
[[, 0, ], =, Double, ., longBitsToDouble, (, Double, ., doubleToLongBits, (, toDouble, (, ), ), &, mask, ), ;]
[], =, Double, ., longBitsToDouble, (, Double, ., doubleToLongBits, (, toDouble, (, ), ), &, mask, ), ;, split, []
[;, split, [, 1, ], =, subtract, (, newInstance, (, split, [, 0, ], ), ), ., toDouble, (, )]
[., longBitsToDouble, (, Double, ., doubleToLongBits, (, toDouble, (, ), ), &, mask, ), ;, split, [, 1, ], =]
[), ;, split, [, 1, ], =, subtract, (, newInstance, (, split, [, 0, ], ), ), ., toDouble, (]
[&, mask, ), ;, split, [, 1, ], =, subtract, (, newInstance, (, split, [, 0, ], ), ), .]
[., doubleToLongBits, (, toDouble, (, ), ), &, mask, ), ;, split, [, 1, ], =, subtract, (, newInstance, (]
[), &, mask, ), ;, split, [, 1, ], =, subtract, (, newInstance, (, split, [, 0, ], ), )]
[), ;, split, [, 1, ], =, subtract, (, newInstance, (, split, [, 0, ], ), ), ., toDouble, (]
[=, subtract, (, newInstance, (, split, [, 0, ], ), ), ., toDouble, (, ), ;, return, split, ;, }]
[[, 1, ], =, subtract, (, newInstance, (, split, [, 0, ], ), ), ., toDouble, (, ), ;, return]
[], =, subtract, (, newInstance, (, split, [, 0, ], ), ), ., toDouble, (, ), ;, return, split, ;]
[;, return, split, ;, }, public, double, getReal, (, ), {, return, toDouble, (, ), ;, }, public, Dfp, add]
[., toDouble, (, ), ;, return, split, ;, }, public, double, getReal, (, ), {, return, toDouble, (, ), ;]
[), ., toDouble, (, ), ;, return, split, ;, }, public, double, getReal, (, ), {, return, toDouble, (, )]
[), ), ., toDouble, (, ), ;, return, split, ;, }, public, double, getReal, (, ), {, return, toDouble, (]
[[, 0, ], ), ), ., toDouble, (, ), ;, return, split, ;, }, public, double, getReal, (, ), {]
[], ), ), ., toDouble, (, ), ;, return, split, ;, }, public, double, getReal, (, ), {, return, toDouble]
[;, }, public, double, getReal, (, ), {, return, toDouble, (, ), ;, }, public, Dfp, add, (, final, double]
[;, }, public, Dfp, add, (, final, double, a, ), {, return, add, (, newInstance, (, a, ), ), ;]
[;, }, public, Dfp, subtract, (, final, double, a, ), {, return, subtract, (, newInstance, (, a, ), ), ;]
[), ;, }, public, Dfp, subtract, (, final, double, a, ), {, return, subtract, (, newInstance, (, a, ), )]
[), ), ;, }, public, Dfp, subtract, (, final, double, a, ), {, return, subtract, (, newInstance, (, a, )]
[;, }, public, Dfp, multiply, (, final, double, a, ), {, return, multiply, (, newInstance, (, a, ), ), ;]
[), ;, }, public, Dfp, multiply, (, final, double, a, ), {, return, multiply, (, newInstance, (, a, ), )]
[), ), ;, }, public, Dfp, multiply, (, final, double, a, ), {, return, multiply, (, newInstance, (, a, )]
[;, }, public, Dfp, divide, (, final, double, a, ), {, return, divide, (, newInstance, (, a, ), ), ;]
[), ;, }, public, Dfp, divide, (, final, double, a, ), {, return, divide, (, newInstance, (, a, ), )]
[), ), ;, }, public, Dfp, divide, (, final, double, a, ), {, return, divide, (, newInstance, (, a, )]
[;, }, public, Dfp, remainder, (, final, double, a, ), {, return, remainder, (, newInstance, (, a, ), ), ;]
[), ;, }, public, Dfp, remainder, (, final, double, a, ), {, return, remainder, (, newInstance, (, a, ), )]
[), ), ;, }, public, Dfp, remainder, (, final, double, a, ), {, return, remainder, (, newInstance, (, a, )]
[;, }, public, long, round, (, ), {, return, FastMath, ., round, (, toDouble, (, ), ), ;, }, public]
[), ;, }, public, long, round, (, ), {, return, FastMath, ., round, (, toDouble, (, ), ), ;, }]
[), ), ;, }, public, long, round, (, ), {, return, FastMath, ., round, (, toDouble, (, ), ), ;]
[;, }, public, Dfp, signum, (, ), {, if, (, isNaN, (, ), ||, isZero, (, ), ), {, return]
[., round, (, toDouble, (, ), ), ;, }, public, Dfp, signum, (, ), {, if, (, isNaN, (, )]
[), ;, }, public, Dfp, signum, (, ), {, if, (, isNaN, (, ), ||, isZero, (, ), ), {]
[), {, return, this, ;, }, else, {, return, newInstance, (, sign, >, 0, ?, +, 1, :, -, 1]
[||, isZero, (, ), ), {, return, this, ;, }, else, {, return, newInstance, (, sign, >, 0, ?, +]
[), {, return, this, ;, }, else, {, return, newInstance, (, sign, >, 0, ?, +, 1, :, -, 1]
[;, }, else, {, return, newInstance, (, sign, >, 0, ?, +, 1, :, -, 1, ), ;, }, }]
[;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (, sign, >=, 0, &&, s]
[), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (, sign, >=, 0, &&]
[?, +, 1, :, -, 1, ), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if]
[>, 0, ?, +, 1, :, -, 1, ), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, )]
[?, +, 1, :, -, 1, ), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if]
[:, -, 1, ), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (, sign]
[:, -, 1, ), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (, sign]
[), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (, sign, >=, 0, &&]
[), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (, sign, >=, 0, &&]
[), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, copySign, (, final, double, s, )]
[||, (, sign, <, 0, &&, s, ., sign, <, 0, ), ), {, return, this, ;, }, return, negate]
[), ||, (, sign, <, 0, &&, s, ., sign, <, 0, ), ), {, return, this, ;, }, return]
[&&, s, ., sign, >=, 0, ), ||, (, sign, <, 0, &&, s, ., sign, <, 0, ), )]
[>=, 0, &&, s, ., sign, >=, 0, ), ||, (, sign, <, 0, &&, s, ., sign, <, 0]
[&&, s, ., sign, >=, 0, ), ||, (, sign, <, 0, &&, s, ., sign, <, 0, ), )]
[), ||, (, sign, <, 0, &&, s, ., sign, <, 0, ), ), {, return, this, ;, }, return]
[>=, 0, ), ||, (, sign, <, 0, &&, s, ., sign, <, 0, ), ), {, return, this, ;]
[., sign, >=, 0, ), ||, (, sign, <, 0, &&, s, ., sign, <, 0, ), ), {, return]
[), ||, (, sign, <, 0, &&, s, ., sign, <, 0, ), ), {, return, this, ;, }, return]
[), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, copySign, (, final, double, s, )]
[), ), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, copySign, (, final, double, s]
[&&, s, ., sign, <, 0, ), ), {, return, this, ;, }, return, negate, (, ), ;, }, public]
[<, 0, &&, s, ., sign, <, 0, ), ), {, return, this, ;, }, return, negate, (, ), ;]
[&&, s, ., sign, <, 0, ), ), {, return, this, ;, }, return, negate, (, ), ;, }, public]
[), ), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, copySign, (, final, double, s]
[<, 0, ), ), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, copySign, (, final]
[., sign, <, 0, ), ), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, copySign]
[), ), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, copySign, (, final, double, s]
[;, }, return, negate, (, ), ;, }, public, Dfp, copySign, (, final, double, s, ), {, long, sb, =]
[;, }, public, Dfp, copySign, (, final, double, s, ), {, long, sb, =, Double, ., doubleToLongBits, (, s, )]
[;, if, (, (, sign, >=, 0, &&, sb, >=, 0, ), ||, (, sign, <, 0, &&, sb, <]
[., doubleToLongBits, (, s, ), ;, if, (, (, sign, >=, 0, &&, sb, >=, 0, ), ||, (, sign]
[), ;, if, (, (, sign, >=, 0, &&, sb, >=, 0, ), ||, (, sign, <, 0, &&, sb]
[), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, scalb, (, final, int, n, )]
[||, (, sign, <, 0, &&, sb, <, 0, ), ), {, return, this, ;, }, return, negate, (, )]
[), ||, (, sign, <, 0, &&, sb, <, 0, ), ), {, return, this, ;, }, return, negate, (]
[&&, sb, >=, 0, ), ||, (, sign, <, 0, &&, sb, <, 0, ), ), {, return, this, ;]
[>=, 0, &&, sb, >=, 0, ), ||, (, sign, <, 0, &&, sb, <, 0, ), ), {, return]
[&&, sb, >=, 0, ), ||, (, sign, <, 0, &&, sb, <, 0, ), ), {, return, this, ;]
[), ||, (, sign, <, 0, &&, sb, <, 0, ), ), {, return, this, ;, }, return, negate, (]
[>=, 0, ), ||, (, sign, <, 0, &&, sb, <, 0, ), ), {, return, this, ;, }, return]
[), ||, (, sign, <, 0, &&, sb, <, 0, ), ), {, return, this, ;, }, return, negate, (]
[), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, scalb, (, final, int, n, )]
[), ), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, scalb, (, final, int, n]
[&&, sb, <, 0, ), ), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, scalb]
[<, 0, &&, sb, <, 0, ), ), {, return, this, ;, }, return, negate, (, ), ;, }, public]
[&&, sb, <, 0, ), ), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, scalb]
[), ), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, scalb, (, final, int, n]
[<, 0, ), ), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, scalb, (, final]
[), ), {, return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, scalb, (, final, int, n]
[;, }, return, negate, (, ), ;, }, public, Dfp, scalb, (, final, int, n, ), {, return, multiply, (]
[;, }, public, Dfp, scalb, (, final, int, n, ), {, return, multiply, (, DfpMath, ., pow, (, getTwo, (]
[;, }, public, Dfp, hypot, (, final, Dfp, y, ), {, return, multiply, (, this, ), ., add, (, y]
[), ;, }, public, Dfp, hypot, (, final, Dfp, y, ), {, return, multiply, (, this, ), ., add, (]
[., pow, (, getTwo, (, ), ,, n, ), ), ;, }, public, Dfp, hypot, (, final, Dfp, y, )]
[,, n, ), ), ;, }, public, Dfp, hypot, (, final, Dfp, y, ), {, return, multiply, (, this, )]
[), ), ;, }, public, Dfp, hypot, (, final, Dfp, y, ), {, return, multiply, (, this, ), ., add]
[;, }, public, Dfp, cbrt, (, ), {, return, rootN, (, 3, ), ;, }, public, Dfp, rootN, (, final]
[., sqrt, (, ), ;, }, public, Dfp, cbrt, (, ), {, return, rootN, (, 3, ), ;, }, public]
[., add, (, y, ., multiply, (, y, ), ), ., sqrt, (, ), ;, }, public, Dfp, cbrt, (]
[), ., add, (, y, ., multiply, (, y, ), ), ., sqrt, (, ), ;, }, public, Dfp, cbrt]
[), ., sqrt, (, ), ;, }, public, Dfp, cbrt, (, ), {, return, rootN, (, 3, ), ;, }]
[., multiply, (, y, ), ), ., sqrt, (, ), ;, }, public, Dfp, cbrt, (, ), {, return, rootN]
[), ), ., sqrt, (, ), ;, }, public, Dfp, cbrt, (, ), {, return, rootN, (, 3, ), ;]
[;, }, public, Dfp, rootN, (, final, int, n, ), {, return, (, sign, >=, 0, ), ?, DfpMath, .]
[), ;, }, public, Dfp, rootN, (, final, int, n, ), {, return, (, sign, >=, 0, ), ?, DfpMath]
[;, }, public, Dfp, pow, (, final, double, p, ), {, return, DfpMath, ., pow, (, this, ,, newInstance, (]
[?, DfpMath, ., pow, (, this, ,, getOne, (, ), ., divide, (, n, ), ), :, DfpMath, ., pow]
[), ?, DfpMath, ., pow, (, this, ,, getOne, (, ), ., divide, (, n, ), ), :, DfpMath, .]
[>=, 0, ), ?, DfpMath, ., pow, (, this, ,, getOne, (, ), ., divide, (, n, ), ), :]
[), ?, DfpMath, ., pow, (, this, ,, getOne, (, ), ., divide, (, n, ), ), :, DfpMath, .]
[:, DfpMath, ., pow, (, negate, (, ), ,, getOne, (, ), ., divide, (, n, ), ), ., negate]
[., pow, (, this, ,, getOne, (, ), ., divide, (, n, ), ), :, DfpMath, ., pow, (, negate]
[,, getOne, (, ), ., divide, (, n, ), ), :, DfpMath, ., pow, (, negate, (, ), ,, getOne]
[), :, DfpMath, ., pow, (, negate, (, ), ,, getOne, (, ), ., divide, (, n, ), ), .]
[., divide, (, n, ), ), :, DfpMath, ., pow, (, negate, (, ), ,, getOne, (, ), ., divide]
[), ), :, DfpMath, ., pow, (, negate, (, ), ,, getOne, (, ), ., divide, (, n, ), )]
[;, }, public, Dfp, pow, (, final, double, p, ), {, return, DfpMath, ., pow, (, this, ,, newInstance, (]
[., negate, (, ), ;, }, public, Dfp, pow, (, final, double, p, ), {, return, DfpMath, ., pow, (]
[., pow, (, negate, (, ), ,, getOne, (, ), ., divide, (, n, ), ), ., negate, (, )]
[,, getOne, (, ), ., divide, (, n, ), ), ., negate, (, ), ;, }, public, Dfp, pow, (]
[), ., negate, (, ), ;, }, public, Dfp, pow, (, final, double, p, ), {, return, DfpMath, ., pow]
[., divide, (, n, ), ), ., negate, (, ), ;, }, public, Dfp, pow, (, final, double, p, )]
[), ), ., negate, (, ), ;, }, public, Dfp, pow, (, final, double, p, ), {, return, DfpMath, .]
[;, }, public, Dfp, pow, (, final, int, n, ), {, return, DfpMath, ., pow, (, this, ,, n, )]
[., pow, (, this, ,, newInstance, (, p, ), ), ;, }, public, Dfp, pow, (, final, int, n, )]
[,, newInstance, (, p, ), ), ;, }, public, Dfp, pow, (, final, int, n, ), {, return, DfpMath, .]
[), ;, }, public, Dfp, pow, (, final, int, n, ), {, return, DfpMath, ., pow, (, this, ,, n]
[), ), ;, }, public, Dfp, pow, (, final, int, n, ), {, return, DfpMath, ., pow, (, this, ,]
[;, }, public, Dfp, pow, (, final, Dfp, e, ), {, return, DfpMath, ., pow, (, this, ,, e, )]
[., pow, (, this, ,, n, ), ;, }, public, Dfp, pow, (, final, Dfp, e, ), {, return, DfpMath]
[,, n, ), ;, }, public, Dfp, pow, (, final, Dfp, e, ), {, return, DfpMath, ., pow, (, this]
[), ;, }, public, Dfp, pow, (, final, Dfp, e, ), {, return, DfpMath, ., pow, (, this, ,, e]
[;, }, public, Dfp, exp, (, ), {, return, DfpMath, ., exp, (, this, ), ;, }, public, Dfp, expm1]
[., pow, (, this, ,, e, ), ;, }, public, Dfp, exp, (, ), {, return, DfpMath, ., exp, (]
[,, e, ), ;, }, public, Dfp, exp, (, ), {, return, DfpMath, ., exp, (, this, ), ;, }]
[), ;, }, public, Dfp, exp, (, ), {, return, DfpMath, ., exp, (, this, ), ;, }, public, Dfp]
[;, }, public, Dfp, expm1, (, ), {, return, DfpMath, ., exp, (, this, ), ., subtract, (, getOne, (]
[., exp, (, this, ), ;, }, public, Dfp, expm1, (, ), {, return, DfpMath, ., exp, (, this, )]
[), ;, }, public, Dfp, expm1, (, ), {, return, DfpMath, ., exp, (, this, ), ., subtract, (, getOne]
[;, }, public, Dfp, log, (, ), {, return, DfpMath, ., log, (, this, ), ;, }, public, Dfp, log1p]
[., subtract, (, getOne, (, ), ), ;, }, public, Dfp, log, (, ), {, return, DfpMath, ., log, (]
[., exp, (, this, ), ., subtract, (, getOne, (, ), ), ;, }, public, Dfp, log, (, ), {]
[), ., subtract, (, getOne, (, ), ), ;, }, public, Dfp, log, (, ), {, return, DfpMath, ., log]
[), ;, }, public, Dfp, log, (, ), {, return, DfpMath, ., log, (, this, ), ;, }, public, Dfp]
[;, }, public, Dfp, log1p, (, ), {, return, DfpMath, ., log, (, this, ., add, (, getOne, (, )]
[., log, (, this, ), ;, }, public, Dfp, log1p, (, ), {, return, DfpMath, ., log, (, this, .]
[), ;, }, public, Dfp, log1p, (, ), {, return, DfpMath, ., log, (, this, ., add, (, getOne, (]
[;, }, @, Deprecated, public, int, log10, (, ), {, return, intLog10, (, ), ;, }, public, Dfp, cos, (]
[., log, (, this, ., add, (, getOne, (, ), ), ), ;, }, @, Deprecated, public, int, log10, (]
[), ;, }, @, Deprecated, public, int, log10, (, ), {, return, intLog10, (, ), ;, }, public, Dfp, cos]
[., add, (, getOne, (, ), ), ), ;, }, @, Deprecated, public, int, log10, (, ), {, return, intLog10]
[), ), ;, }, @, Deprecated, public, int, log10, (, ), {, return, intLog10, (, ), ;, }, public, Dfp]
[;, }, public, Dfp, cos, (, ), {, return, DfpMath, ., cos, (, this, ), ;, }, public, Dfp, sin]
[;, }, public, Dfp, sin, (, ), {, return, DfpMath, ., sin, (, this, ), ;, }, public, Dfp, tan]
[., cos, (, this, ), ;, }, public, Dfp, sin, (, ), {, return, DfpMath, ., sin, (, this, )]
[), ;, }, public, Dfp, sin, (, ), {, return, DfpMath, ., sin, (, this, ), ;, }, public, Dfp]
[;, }, public, Dfp, tan, (, ), {, return, DfpMath, ., tan, (, this, ), ;, }, public, Dfp, acos]
[., sin, (, this, ), ;, }, public, Dfp, tan, (, ), {, return, DfpMath, ., tan, (, this, )]
[), ;, }, public, Dfp, tan, (, ), {, return, DfpMath, ., tan, (, this, ), ;, }, public, Dfp]
[;, }, public, Dfp, acos, (, ), {, return, DfpMath, ., acos, (, this, ), ;, }, public, Dfp, asin]
[., tan, (, this, ), ;, }, public, Dfp, acos, (, ), {, return, DfpMath, ., acos, (, this, )]
[), ;, }, public, Dfp, acos, (, ), {, return, DfpMath, ., acos, (, this, ), ;, }, public, Dfp]
[;, }, public, Dfp, asin, (, ), {, return, DfpMath, ., asin, (, this, ), ;, }, public, Dfp, atan]
[., acos, (, this, ), ;, }, public, Dfp, asin, (, ), {, return, DfpMath, ., asin, (, this, )]
[), ;, }, public, Dfp, asin, (, ), {, return, DfpMath, ., asin, (, this, ), ;, }, public, Dfp]
[;, }, public, Dfp, atan, (, ), {, return, DfpMath, ., atan, (, this, ), ;, }, public, Dfp, atan2]
[., asin, (, this, ), ;, }, public, Dfp, atan, (, ), {, return, DfpMath, ., atan, (, this, )]
[), ;, }, public, Dfp, atan, (, ), {, return, DfpMath, ., atan, (, this, ), ;, }, public, Dfp]
[;, }, public, Dfp, atan2, (, final, Dfp, x, ), throws, DimensionMismatchException, {, final, Dfp, r, =, x, ., multiply]
[., atan, (, this, ), ;, }, public, Dfp, atan2, (, final, Dfp, x, ), throws, DimensionMismatchException, {, final, Dfp]
[), ;, }, public, Dfp, atan2, (, final, Dfp, x, ), throws, DimensionMismatchException, {, final, Dfp, r, =, x, .]
[;, if, (, x, ., sign, >=, 0, ), {, return, getTwo, (, ), ., multiply, (, divide, (, r]
[., sqrt, (, ), ;, if, (, x, ., sign, >=, 0, ), {, return, getTwo, (, ), ., multiply]
[., add, (, multiply, (, this, ), ), ., sqrt, (, ), ;, if, (, x, ., sign, >=, 0]
[., multiply, (, x, ), ., add, (, multiply, (, this, ), ), ., sqrt, (, ), ;, if, (]
[), ., add, (, multiply, (, this, ), ), ., sqrt, (, ), ;, if, (, x, ., sign, >=]
[), ., sqrt, (, ), ;, if, (, x, ., sign, >=, 0, ), {, return, getTwo, (, ), .]
[), ), ., sqrt, (, ), ;, if, (, x, ., sign, >=, 0, ), {, return, getTwo, (, )]
[), {, return, getTwo, (, ), ., multiply, (, divide, (, r, ., add, (, x, ), ), ., atan]
[>=, 0, ), {, return, getTwo, (, ), ., multiply, (, divide, (, r, ., add, (, x, ), )]
[., sign, >=, 0, ), {, return, getTwo, (, ), ., multiply, (, divide, (, r, ., add, (, x]
[), {, return, getTwo, (, ), ., multiply, (, divide, (, r, ., add, (, x, ), ), ., atan]
[;, }, else, {, final, Dfp, tmp, =, getTwo, (, ), ., multiply, (, divide, (, r, ., subtract, (]
[., multiply, (, divide, (, r, ., add, (, x, ), ), ., atan, (, ), ), ;, }, else]
[), ;, }, else, {, final, Dfp, tmp, =, getTwo, (, ), ., multiply, (, divide, (, r, ., subtract]
[., atan, (, ), ), ;, }, else, {, final, Dfp, tmp, =, getTwo, (, ), ., multiply, (, divide]
[), ., atan, (, ), ), ;, }, else, {, final, Dfp, tmp, =, getTwo, (, ), ., multiply, (]
[., add, (, x, ), ), ., atan, (, ), ), ;, }, else, {, final, Dfp, tmp, =, getTwo]
[), ), ., atan, (, ), ), ;, }, else, {, final, Dfp, tmp, =, getTwo, (, ), ., multiply]
[;, final, Dfp, pmPi, =, newInstance, (, (, tmp, ., sign, <=, 0, ), ?, -, FastMath, ., PI, :]
[., multiply, (, divide, (, r, ., subtract, (, x, ), ), ., atan, (, ), ), ;, final, Dfp]
[), ;, final, Dfp, pmPi, =, newInstance, (, (, tmp, ., sign, <=, 0, ), ?, -, FastMath, ., PI]
[., atan, (, ), ), ;, final, Dfp, pmPi, =, newInstance, (, (, tmp, ., sign, <=, 0, ), ?]
[), ., atan, (, ), ), ;, final, Dfp, pmPi, =, newInstance, (, (, tmp, ., sign, <=, 0, )]
[., subtract, (, x, ), ), ., atan, (, ), ), ;, final, Dfp, pmPi, =, newInstance, (, (, tmp]
[), ), ., atan, (, ), ), ;, final, Dfp, pmPi, =, newInstance, (, (, tmp, ., sign, <=, 0]
[;, return, pmPi, ., subtract, (, tmp, ), ;, }, }, public, Dfp, cosh, (, ), {, return, DfpMath, .]
[), ;, return, pmPi, ., subtract, (, tmp, ), ;, }, }, public, Dfp, cosh, (, ), {, return, DfpMath]
[?, -, FastMath, ., PI, :, FastMath, ., PI, ), ;, return, pmPi, ., subtract, (, tmp, ), ;, }]
[), ?, -, FastMath, ., PI, :, FastMath, ., PI, ), ;, return, pmPi, ., subtract, (, tmp, ), ;]
[<=, 0, ), ?, -, FastMath, ., PI, :, FastMath, ., PI, ), ;, return, pmPi, ., subtract, (, tmp]
[., sign, <=, 0, ), ?, -, FastMath, ., PI, :, FastMath, ., PI, ), ;, return, pmPi, ., subtract]
[), ?, -, FastMath, ., PI, :, FastMath, ., PI, ), ;, return, pmPi, ., subtract, (, tmp, ), ;]
[:, FastMath, ., PI, ), ;, return, pmPi, ., subtract, (, tmp, ), ;, }, }, public, Dfp, cosh, (]
[:, FastMath, ., PI, ), ;, return, pmPi, ., subtract, (, tmp, ), ;, }, }, public, Dfp, cosh, (]
[., PI, :, FastMath, ., PI, ), ;, return, pmPi, ., subtract, (, tmp, ), ;, }, }, public, Dfp]
[), ;, return, pmPi, ., subtract, (, tmp, ), ;, }, }, public, Dfp, cosh, (, ), {, return, DfpMath]
[., PI, ), ;, return, pmPi, ., subtract, (, tmp, ), ;, }, }, public, Dfp, cosh, (, ), {]
[;, }, }, public, Dfp, cosh, (, ), {, return, DfpMath, ., exp, (, this, ), ., add, (, DfpMath]
[., subtract, (, tmp, ), ;, }, }, public, Dfp, cosh, (, ), {, return, DfpMath, ., exp, (, this]
[), ;, }, }, public, Dfp, cosh, (, ), {, return, DfpMath, ., exp, (, this, ), ., add, (]
[;, }, public, Dfp, sinh, (, ), {, return, DfpMath, ., exp, (, this, ), ., subtract, (, DfpMath, .]
[., divide, (, 2, ), ;, }, public, Dfp, sinh, (, ), {, return, DfpMath, ., exp, (, this, )]
[., add, (, DfpMath, ., exp, (, negate, (, ), ), ), ., divide, (, 2, ), ;, }, public]
[., exp, (, this, ), ., add, (, DfpMath, ., exp, (, negate, (, ), ), ), ., divide, (]
[), ., add, (, DfpMath, ., exp, (, negate, (, ), ), ), ., divide, (, 2, ), ;, }]
[), ., divide, (, 2, ), ;, }, public, Dfp, sinh, (, ), {, return, DfpMath, ., exp, (, this]
[., exp, (, negate, (, ), ), ), ., divide, (, 2, ), ;, }, public, Dfp, sinh, (, )]
[), ), ., divide, (, 2, ), ;, }, public, Dfp, sinh, (, ), {, return, DfpMath, ., exp, (]
[), ;, }, public, Dfp, sinh, (, ), {, return, DfpMath, ., exp, (, this, ), ., subtract, (, DfpMath]
[;, }, public, Dfp, tanh, (, ), {, final, Dfp, ePlus, =, DfpMath, ., exp, (, this, ), ;, final]
[., divide, (, 2, ), ;, }, public, Dfp, tanh, (, ), {, final, Dfp, ePlus, =, DfpMath, ., exp]
[., subtract, (, DfpMath, ., exp, (, negate, (, ), ), ), ., divide, (, 2, ), ;, }, public]
[., exp, (, this, ), ., subtract, (, DfpMath, ., exp, (, negate, (, ), ), ), ., divide, (]
[), ., subtract, (, DfpMath, ., exp, (, negate, (, ), ), ), ., divide, (, 2, ), ;, }]
[), ., divide, (, 2, ), ;, }, public, Dfp, tanh, (, ), {, final, Dfp, ePlus, =, DfpMath, .]
[., exp, (, negate, (, ), ), ), ., divide, (, 2, ), ;, }, public, Dfp, tanh, (, )]
[), ), ., divide, (, 2, ), ;, }, public, Dfp, tanh, (, ), {, final, Dfp, ePlus, =, DfpMath]
[), ;, }, public, Dfp, tanh, (, ), {, final, Dfp, ePlus, =, DfpMath, ., exp, (, this, ), ;]
[;, final, Dfp, eMinus, =, DfpMath, ., exp, (, negate, (, ), ), ;, return, ePlus, ., subtract, (, eMinus]
[., exp, (, this, ), ;, final, Dfp, eMinus, =, DfpMath, ., exp, (, negate, (, ), ), ;, return]
[), ;, final, Dfp, eMinus, =, DfpMath, ., exp, (, negate, (, ), ), ;, return, ePlus, ., subtract, (]
[;, return, ePlus, ., subtract, (, eMinus, ), ., divide, (, ePlus, ., add, (, eMinus, ), ), ;, }]
[., exp, (, negate, (, ), ), ;, return, ePlus, ., subtract, (, eMinus, ), ., divide, (, ePlus, .]
[), ;, return, ePlus, ., subtract, (, eMinus, ), ., divide, (, ePlus, ., add, (, eMinus, ), ), ;]
[;, }, public, Dfp, acosh, (, ), {, return, multiply, (, this, ), ., subtract, (, getOne, (, ), )]
[., divide, (, ePlus, ., add, (, eMinus, ), ), ;, }, public, Dfp, acosh, (, ), {, return, multiply]
[., subtract, (, eMinus, ), ., divide, (, ePlus, ., add, (, eMinus, ), ), ;, }, public, Dfp, acosh]
[), ., divide, (, ePlus, ., add, (, eMinus, ), ), ;, }, public, Dfp, acosh, (, ), {, return]
[), ;, }, public, Dfp, acosh, (, ), {, return, multiply, (, this, ), ., subtract, (, getOne, (, )]
[., add, (, eMinus, ), ), ;, }, public, Dfp, acosh, (, ), {, return, multiply, (, this, ), .]
[), ), ;, }, public, Dfp, acosh, (, ), {, return, multiply, (, this, ), ., subtract, (, getOne, (]
[;, }, public, Dfp, asinh, (, ), {, return, multiply, (, this, ), ., add, (, getOne, (, ), )]
[., log, (, ), ;, }, public, Dfp, asinh, (, ), {, return, multiply, (, this, ), ., add, (]
[., add, (, this, ), ., log, (, ), ;, }, public, Dfp, asinh, (, ), {, return, multiply, (]
[., sqrt, (, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, asinh, (, )]
[., subtract, (, getOne, (, ), ), ., sqrt, (, ), ., add, (, this, ), ., log, (, )]
[), ., subtract, (, getOne, (, ), ), ., sqrt, (, ), ., add, (, this, ), ., log, (]
[), ., sqrt, (, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, asinh, (]
[), ., log, (, ), ;, }, public, Dfp, asinh, (, ), {, return, multiply, (, this, ), ., add]
[;, }, public, Dfp, atanh, (, ), {, return, getOne, (, ), ., add, (, this, ), ., divide, (]
[., log, (, ), ;, }, public, Dfp, atanh, (, ), {, return, getOne, (, ), ., add, (, this]
[., add, (, this, ), ., log, (, ), ;, }, public, Dfp, atanh, (, ), {, return, getOne, (]
[., sqrt, (, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, atanh, (, )]
[., add, (, getOne, (, ), ), ., sqrt, (, ), ., add, (, this, ), ., log, (, )]
[), ., add, (, getOne, (, ), ), ., sqrt, (, ), ., add, (, this, ), ., log, (]
[), ., sqrt, (, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, atanh, (]
[), ., log, (, ), ;, }, public, Dfp, atanh, (, ), {, return, getOne, (, ), ., add, (]
[;, }, public, Dfp, linearCombination, (, final, Dfp, [, ], a, ,, final, Dfp, [, ], b, ), throws, DimensionMismatchException]
[., divide, (, 2, ), ;, }, public, Dfp, linearCombination, (, final, Dfp, [, ], a, ,, final, Dfp, []
[., log, (, ), ., divide, (, 2, ), ;, }, public, Dfp, linearCombination, (, final, Dfp, [, ], a]
[., divide, (, getOne, (, ), ., subtract, (, this, ), ), ., log, (, ), ., divide, (, 2]
[., add, (, this, ), ., divide, (, getOne, (, ), ., subtract, (, this, ), ), ., log, (]
[), ., divide, (, getOne, (, ), ., subtract, (, this, ), ), ., log, (, ), ., divide, (]
[), ., log, (, ), ., divide, (, 2, ), ;, }, public, Dfp, linearCombination, (, final, Dfp, [, ]]
[., subtract, (, this, ), ), ., log, (, ), ., divide, (, 2, ), ;, }, public, Dfp, linearCombination]
[), ), ., log, (, ), ., divide, (, 2, ), ;, }, public, Dfp, linearCombination, (, final, Dfp, []
[), ;, }, public, Dfp, linearCombination, (, final, Dfp, [, ], a, ,, final, Dfp, [, ], b, ), throws]
[), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, Dfp, r, =, getZero]
[!=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }]
[., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, )]
[), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, Dfp, r, =, getZero]
[., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, Dfp, r]
[;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, .]
[,, b, ., length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0]
[., length, ,, b, ., length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i]
[), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, a]
[., length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =]
[;, i, <, a, ., length, ;, ++, i, ), {, r, =, r, ., add, (, a, [, i]
[;, ++, i, ), {, r, =, r, ., add, (, a, [, i, ], ., multiply, (, b, []
[<, a, ., length, ;, ++, i, ), {, r, =, r, ., add, (, a, [, i, ], .]
[;, ++, i, ), {, r, =, r, ., add, (, a, [, i, ], ., multiply, (, b, []
[., length, ;, ++, i, ), {, r, =, r, ., add, (, a, [, i, ], ., multiply, (]
[), {, r, =, r, ., add, (, a, [, i, ], ., multiply, (, b, [, i, ], )]
[), {, r, =, r, ., add, (, a, [, i, ], ., multiply, (, b, [, i, ], )]
[=, r, ., add, (, a, [, i, ], ., multiply, (, b, [, i, ], ), ), ;, }]
[;, }, return, r, ;, }, public, Dfp, linearCombination, (, final, double, [, ], a, ,, final, Dfp, [, ]]
[., add, (, a, [, i, ], ., multiply, (, b, [, i, ], ), ), ;, }, return, r]
[), ;, }, return, r, ;, }, public, Dfp, linearCombination, (, final, double, [, ], a, ,, final, Dfp, []
[., multiply, (, b, [, i, ], ), ), ;, }, return, r, ;, }, public, Dfp, linearCombination, (, final]
[[, i, ], ., multiply, (, b, [, i, ], ), ), ;, }, return, r, ;, }, public, Dfp]
[], ., multiply, (, b, [, i, ], ), ), ;, }, return, r, ;, }, public, Dfp, linearCombination, (]
[), ), ;, }, return, r, ;, }, public, Dfp, linearCombination, (, final, double, [, ], a, ,, final, Dfp]
[[, i, ], ), ), ;, }, return, r, ;, }, public, Dfp, linearCombination, (, final, double, [, ], a]
[], ), ), ;, }, return, r, ;, }, public, Dfp, linearCombination, (, final, double, [, ], a, ,, final]
[;, }, public, Dfp, linearCombination, (, final, double, [, ], a, ,, final, Dfp, [, ], b, ), throws, DimensionMismatchException]
[), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, Dfp, r, =, getZero]
[!=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }]
[., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, )]
[), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, Dfp, r, =, getZero]
[., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, Dfp, r]
[;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, .]
[,, b, ., length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0]
[., length, ,, b, ., length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i]
[), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, a]
[., length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =]
[;, i, <, a, ., length, ;, ++, i, ), {, r, =, r, ., add, (, b, [, i]
[;, ++, i, ), {, r, =, r, ., add, (, b, [, i, ], ., multiply, (, a, []
[<, a, ., length, ;, ++, i, ), {, r, =, r, ., add, (, b, [, i, ], .]
[;, ++, i, ), {, r, =, r, ., add, (, b, [, i, ], ., multiply, (, a, []
[., length, ;, ++, i, ), {, r, =, r, ., add, (, b, [, i, ], ., multiply, (]
[), {, r, =, r, ., add, (, b, [, i, ], ., multiply, (, a, [, i, ], )]
[), {, r, =, r, ., add, (, b, [, i, ], ., multiply, (, a, [, i, ], )]
[=, r, ., add, (, b, [, i, ], ., multiply, (, a, [, i, ], ), ), ;, }]
[;, }, return, r, ;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,, final, Dfp]
[., add, (, b, [, i, ], ., multiply, (, a, [, i, ], ), ), ;, }, return, r]
[), ;, }, return, r, ;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,, final]
[., multiply, (, a, [, i, ], ), ), ;, }, return, r, ;, }, public, Dfp, linearCombination, (, final]
[[, i, ], ., multiply, (, a, [, i, ], ), ), ;, }, return, r, ;, }, public, Dfp]
[], ., multiply, (, a, [, i, ], ), ), ;, }, return, r, ;, }, public, Dfp, linearCombination, (]
[), ), ;, }, return, r, ;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,]
[[, i, ], ), ), ;, }, return, r, ;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final]
[], ), ), ;, }, return, r, ;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1]
[;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,, final, Dfp, a2, ,, final, Dfp]
[;, }, public, Dfp, linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,, final, double, a2, ,, final, Dfp]
[., add, (, a2, ., multiply, (, b2, ), ), ;, }, public, Dfp, linearCombination, (, final, double, a1, ,]
[., multiply, (, b1, ), ., add, (, a2, ., multiply, (, b2, ), ), ;, }, public, Dfp, linearCombination]
[), ., add, (, a2, ., multiply, (, b2, ), ), ;, }, public, Dfp, linearCombination, (, final, double, a1]
[), ;, }, public, Dfp, linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,, final, double, a2, ,, final]
[., multiply, (, b2, ), ), ;, }, public, Dfp, linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,]
[), ), ;, }, public, Dfp, linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,, final, double, a2, ,]
[;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,, final, Dfp, a2, ,, final, Dfp]
[., add, (, b2, ., multiply, (, a2, ), ), ;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,]
[., multiply, (, a1, ), ., add, (, b2, ., multiply, (, a2, ), ), ;, }, public, Dfp, linearCombination]
[), ., add, (, b2, ., multiply, (, a2, ), ), ;, }, public, Dfp, linearCombination, (, final, Dfp, a1]
[), ;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,, final, Dfp, a2, ,, final]
[., multiply, (, a2, ), ), ;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,]
[), ), ;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,, final, Dfp, a2, ,]
[;, }, public, Dfp, linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,, final, double, a2, ,, final, Dfp]
[., add, (, a3, ., multiply, (, b3, ), ), ;, }, public, Dfp, linearCombination, (, final, double, a1, ,]
[., add, (, a2, ., multiply, (, b2, ), ), ., add, (, a3, ., multiply, (, b3, ), )]
[., multiply, (, b1, ), ., add, (, a2, ., multiply, (, b2, ), ), ., add, (, a3, .]
[), ., add, (, a2, ., multiply, (, b2, ), ), ., add, (, a3, ., multiply, (, b3, )]
[), ., add, (, a3, ., multiply, (, b3, ), ), ;, }, public, Dfp, linearCombination, (, final, double, a1]
[., multiply, (, b2, ), ), ., add, (, a3, ., multiply, (, b3, ), ), ;, }, public, Dfp]
[), ), ., add, (, a3, ., multiply, (, b3, ), ), ;, }, public, Dfp, linearCombination, (, final, double]
[), ;, }, public, Dfp, linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,, final, double, a2, ,, final]
[., multiply, (, b3, ), ), ;, }, public, Dfp, linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,]
[), ), ;, }, public, Dfp, linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,, final, double, a2, ,]
[;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,, final, Dfp, a2, ,, final, Dfp]
[., add, (, b3, ., multiply, (, a3, ), ), ;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,]
[., add, (, b2, ., multiply, (, a2, ), ), ., add, (, b3, ., multiply, (, a3, ), )]
[., multiply, (, a1, ), ., add, (, b2, ., multiply, (, a2, ), ), ., add, (, b3, .]
[), ., add, (, b2, ., multiply, (, a2, ), ), ., add, (, b3, ., multiply, (, a3, )]
[), ., add, (, b3, ., multiply, (, a3, ), ), ;, }, public, Dfp, linearCombination, (, final, Dfp, a1]
[., multiply, (, a2, ), ), ., add, (, b3, ., multiply, (, a3, ), ), ;, }, public, Dfp]
[), ), ., add, (, b3, ., multiply, (, a3, ), ), ;, }, public, Dfp, linearCombination, (, final, Dfp]
[), ;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,, final, Dfp, a2, ,, final]
[., multiply, (, a3, ), ), ;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,]
[), ), ;, }, public, Dfp, linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,, final, Dfp, a2, ,]
[;, }, public, Dfp, linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,, final, double, a2, ,, final, Dfp]
[., add, (, a4, ., multiply, (, b4, ), ), ;, }, public, Dfp, linearCombination, (, final, double, a1, ,]
[., add, (, a3, ., multiply, (, b3, ), ), ., add, (, a4, ., multiply, (, b4, ), )]
[., add, (, a2, ., multiply, (, b2, ), ), ., add, (, a3, ., multiply, (, b3, ), )]
[., multiply, (, b1, ), ., add, (, a2, ., multiply, (, b2, ), ), ., add, (, a3, .]
[), ., add, (, a2, ., multiply, (, b2, ), ), ., add, (, a3, ., multiply, (, b3, )]
[), ., add, (, a3, ., multiply, (, b3, ), ), ., add, (, a4, ., multiply, (, b4, )]
[., multiply, (, b2, ), ), ., add, (, a3, ., multiply, (, b3, ), ), ., add, (, a4]
[), ), ., add, (, a3, ., multiply, (, b3, ), ), ., add, (, a4, ., multiply, (, b4]
[), ., add, (, a4, ., multiply, (, b4, ), ), ;, }, public, Dfp, linearCombination, (, final, double, a1]
[., multiply, (, b3, ), ), ., add, (, a4, ., multiply, (, b4, ), ), ;, }, public, Dfp]
[), ), ., add, (, a4, ., multiply, (, b4, ), ), ;, }, public, Dfp, linearCombination, (, final, double]
[), ;, }, public, Dfp, linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,, final, double, a2, ,, final]
[., multiply, (, b4, ), ), ;, }, public, Dfp, linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,]
[), ), ;, }, public, Dfp, linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,, final, double, a2, ,]
[;, }, }]
[., add, (, b4, ., multiply, (, a4, ), ), ;, }, }]
[., add, (, b3, ., multiply, (, a3, ), ), ., add, (, b4, ., multiply, (, a4, ), )]
[., add, (, b2, ., multiply, (, a2, ), ), ., add, (, b3, ., multiply, (, a3, ), )]
[., multiply, (, a1, ), ., add, (, b2, ., multiply, (, a2, ), ), ., add, (, b3, .]
[), ., add, (, b2, ., multiply, (, a2, ), ), ., add, (, b3, ., multiply, (, a3, )]
[), ., add, (, b3, ., multiply, (, a3, ), ), ., add, (, b4, ., multiply, (, a4, )]
[., multiply, (, a2, ), ), ., add, (, b3, ., multiply, (, a3, ), ), ., add, (, b4]
[), ), ., add, (, b3, ., multiply, (, a3, ), ), ., add, (, b4, ., multiply, (, a4]
[), ., add, (, b4, ., multiply, (, a4, ), ), ;, }, }]
[., multiply, (, a3, ), ), ., add, (, b4, ., multiply, (, a4, ), ), ;, }, }]
[), ), ., add, (, b4, ., multiply, (, a4, ), ), ;, }, }]
[), ;, }, }]
[., multiply, (, a4, ), ), ;, }, }]
[), ), ;, }, }]
