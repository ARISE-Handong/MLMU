[util, ., LocalizedFormats, ;, public, class, ResizableDoubleArray, implements, DoubleArray, ,, Serializable, {, @, Deprecated, public, static, final, int, ADDITIVE_MODE, =]
[Serializable, {, @, Deprecated, public, static, final, int, ADDITIVE_MODE, =, 1, ;, @, Deprecated, public, static, final, int, MULTIPLICATIVE_MODE, =]
[ADDITIVE_MODE, =, 1, ;, @, Deprecated, public, static, final, int, MULTIPLICATIVE_MODE, =, 0, ;, private, static, final, long, serialVersionUID, =]
[=, 1, ;, @, Deprecated, public, static, final, int, MULTIPLICATIVE_MODE, =, 0, ;, private, static, final, long, serialVersionUID, =, -]
[int, MULTIPLICATIVE_MODE, =, 0, ;, private, static, final, long, serialVersionUID, =, -, 3485529955529426875L, ;, private, static, final, int, DEFAULT_INITIAL_CAPACITY, =]
[long, serialVersionUID, =, -, 3485529955529426875L, ;, private, static, final, int, DEFAULT_INITIAL_CAPACITY, =, 16, ;, private, static, final, double, DEFAULT_EXPANSION_FACTOR, =]
[final, int, DEFAULT_INITIAL_CAPACITY, =, 16, ;, private, static, final, double, DEFAULT_EXPANSION_FACTOR, =, 2.0, ;, private, static, final, double, DEFAULT_CONTRACTION_DELTA, =]
[private, static, final, double, DEFAULT_EXPANSION_FACTOR, =, 2.0, ;, private, static, final, double, DEFAULT_CONTRACTION_DELTA, =, 0.5, ;, private, double, contractionCriterion, =]
[2.0, ;, private, static, final, double, DEFAULT_CONTRACTION_DELTA, =, 0.5, ;, private, double, contractionCriterion, =, 2.5, ;, private, double, expansionFactor, =]
[DEFAULT_CONTRACTION_DELTA, =, 0.5, ;, private, double, contractionCriterion, =, 2.5, ;, private, double, expansionFactor, =, 2.0, ;, private, ExpansionMode, expansionMode, =]
[DEFAULT_CONTRACTION_DELTA, =, 0.5, ;, private, double, contractionCriterion, =, 2.5, ;, private, double, expansionFactor, =, 2.0, ;, private, ExpansionMode, expansionMode, =]
[2.0, ;, private, ExpansionMode, expansionMode, =, ExpansionMode, ., MULTIPLICATIVE, ;, private, double, [, ], internalArray, ;, private, int, numElements, =]
[ExpansionMode, ., MULTIPLICATIVE, ;, private, double, [, ], internalArray, ;, private, int, numElements, =, 0, ;, private, int, startIndex, =]
[startIndex, =, 0, ;, public, static, enum, ExpansionMode, {, MULTIPLICATIVE, ,, ADDITIVE, }, public, ResizableDoubleArray, (, ), {, this, (]
[(, ), {, this, (, DEFAULT_INITIAL_CAPACITY, ), ;, }, public, ResizableDoubleArray, (, int, initialCapacity, ), throws, MathIllegalArgumentException, {, this, (]
[{, this, (, DEFAULT_INITIAL_CAPACITY, ), ;, }, public, ResizableDoubleArray, (, int, initialCapacity, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,]
[{, this, (, initialCapacity, ,, DEFAULT_EXPANSION_FACTOR, ), ;, }, public, ResizableDoubleArray, (, double, [, ], initialArray, ), {, this, (]
[(, initialCapacity, ,, DEFAULT_EXPANSION_FACTOR, ), ;, }, public, ResizableDoubleArray, (, double, [, ], initialArray, ), {, this, (, DEFAULT_INITIAL_CAPACITY, ,]
[,, DEFAULT_EXPANSION_FACTOR, ), ;, }, public, ResizableDoubleArray, (, double, [, ], initialArray, ), {, this, (, DEFAULT_INITIAL_CAPACITY, ,, DEFAULT_EXPANSION_FACTOR, ,]
[,, DEFAULT_EXPANSION_FACTOR, ), ;, }, public, ResizableDoubleArray, (, double, [, ], initialArray, ), {, this, (, DEFAULT_INITIAL_CAPACITY, ,, DEFAULT_EXPANSION_FACTOR, ,]
[), ;, }, public, ResizableDoubleArray, (, double, [, ], initialArray, ), {, this, (, DEFAULT_INITIAL_CAPACITY, ,, DEFAULT_EXPANSION_FACTOR, ,, DEFAULT_CONTRACTION_DELTA, +]
[}, public, ResizableDoubleArray, (, double, [, ], initialArray, ), {, this, (, DEFAULT_INITIAL_CAPACITY, ,, DEFAULT_EXPANSION_FACTOR, ,, DEFAULT_CONTRACTION_DELTA, +, DEFAULT_EXPANSION_FACTOR, ,]
[}, public, ResizableDoubleArray, (, double, [, ], initialArray, ), {, this, (, DEFAULT_INITIAL_CAPACITY, ,, DEFAULT_EXPANSION_FACTOR, ,, DEFAULT_CONTRACTION_DELTA, +, DEFAULT_EXPANSION_FACTOR, ,]
[double, [, ], initialArray, ), {, this, (, DEFAULT_INITIAL_CAPACITY, ,, DEFAULT_EXPANSION_FACTOR, ,, DEFAULT_CONTRACTION_DELTA, +, DEFAULT_EXPANSION_FACTOR, ,, ExpansionMode, ., MULTIPLICATIVE, ,]
[initialArray, ), ;, }, @, Deprecated, public, ResizableDoubleArray, (, int, initialCapacity, ,, float, expansionFactor, ), throws, MathIllegalArgumentException, {, this, (]
[;, }, @, Deprecated, public, ResizableDoubleArray, (, int, initialCapacity, ,, float, expansionFactor, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,]
[Deprecated, public, ResizableDoubleArray, (, int, initialCapacity, ,, float, expansionFactor, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, (, double, )]
[double, ), expansionFactor, ), ;, }, public, ResizableDoubleArray, (, int, initialCapacity, ,, double, expansionFactor, ), throws, MathIllegalArgumentException, {, this, (]
[expansionFactor, ), ;, }, public, ResizableDoubleArray, (, int, initialCapacity, ,, double, expansionFactor, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,]
[;, }, public, ResizableDoubleArray, (, int, initialCapacity, ,, double, expansionFactor, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,]
[;, }, public, ResizableDoubleArray, (, int, initialCapacity, ,, double, expansionFactor, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,]
[public, ResizableDoubleArray, (, int, initialCapacity, ,, double, expansionFactor, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,, DEFAULT_CONTRACTION_DELTA, +]
[}, @, Deprecated, public, ResizableDoubleArray, (, int, initialCapacity, ,, float, expansionFactor, ,, float, contractionCriteria, ), throws, MathIllegalArgumentException, {, this, (]
[Deprecated, public, ResizableDoubleArray, (, int, initialCapacity, ,, float, expansionFactor, ,, float, contractionCriteria, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,]
[(, int, initialCapacity, ,, float, expansionFactor, ,, float, contractionCriteria, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, (, double, )]
[initialCapacity, ,, float, expansionFactor, ,, float, contractionCriteria, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, (, double, ), expansionFactor, ,]
[expansionFactor, ,, float, contractionCriteria, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, (, double, ), expansionFactor, ,, (, double, )]
[), ;, }, public, ResizableDoubleArray, (, int, initialCapacity, ,, double, expansionFactor, ,, double, contractionCriterion, ), throws, MathIllegalArgumentException, {, this, (]
[}, public, ResizableDoubleArray, (, int, initialCapacity, ,, double, expansionFactor, ,, double, contractionCriterion, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,]
[ResizableDoubleArray, (, int, initialCapacity, ,, double, expansionFactor, ,, double, contractionCriterion, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,]
[int, initialCapacity, ,, double, expansionFactor, ,, double, contractionCriterion, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,, contractionCriterion, ,]
[int, initialCapacity, ,, double, expansionFactor, ,, double, contractionCriterion, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,, contractionCriterion, ,]
[expansionFactor, ,, double, contractionCriterion, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,, contractionCriterion, ,, ExpansionMode, ., MULTIPLICATIVE, ,]
[public, ResizableDoubleArray, (, int, initialCapacity, ,, float, expansionFactor, ,, float, contractionCriteria, ,, int, expansionMode, ), throws, MathIllegalArgumentException, {, this, (]
[(, int, initialCapacity, ,, float, expansionFactor, ,, float, contractionCriteria, ,, int, expansionMode, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,]
[initialCapacity, ,, float, expansionFactor, ,, float, contractionCriteria, ,, int, expansionMode, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,]
[float, expansionFactor, ,, float, contractionCriteria, ,, int, expansionMode, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,, contractionCriteria, ,]
[float, expansionFactor, ,, float, contractionCriteria, ,, int, expansionMode, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,, contractionCriteria, ,]
[float, expansionFactor, ,, float, contractionCriteria, ,, int, expansionMode, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,, contractionCriteria, ,]
[,, float, contractionCriteria, ,, int, expansionMode, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,, contractionCriteria, ,, expansionMode, ==]
[contractionCriteria, ,, int, expansionMode, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,, contractionCriteria, ,, expansionMode, ==, ADDITIVE_MODE, ?]
[contractionCriteria, ,, int, expansionMode, ), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,, contractionCriteria, ,, expansionMode, ==, ADDITIVE_MODE, ?]
[), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,, contractionCriteria, ,, expansionMode, ==, ADDITIVE_MODE, ?, ExpansionMode, ., ADDITIVE, :]
[), throws, MathIllegalArgumentException, {, this, (, initialCapacity, ,, expansionFactor, ,, contractionCriteria, ,, expansionMode, ==, ADDITIVE_MODE, ?, ExpansionMode, ., ADDITIVE, :]
[this, (, initialCapacity, ,, expansionFactor, ,, contractionCriteria, ,, expansionMode, ==, ADDITIVE_MODE, ?, ExpansionMode, ., ADDITIVE, :, ExpansionMode, ., MULTIPLICATIVE, ,]
[,, expansionFactor, ,, contractionCriteria, ,, expansionMode, ==, ADDITIVE_MODE, ?, ExpansionMode, ., ADDITIVE, :, ExpansionMode, ., MULTIPLICATIVE, ,, null, ), ;]
[,, contractionCriteria, ,, expansionMode, ==, ADDITIVE_MODE, ?, ExpansionMode, ., ADDITIVE, :, ExpansionMode, ., MULTIPLICATIVE, ,, null, ), ;, setExpansionMode, (]
[initialCapacity, ,, double, expansionFactor, ,, double, contractionCriterion, ,, ExpansionMode, expansionMode, ,, double, ..., data, ), throws, MathIllegalArgumentException, {, if, (]
[initialCapacity, ,, double, expansionFactor, ,, double, contractionCriterion, ,, ExpansionMode, expansionMode, ,, double, ..., data, ), throws, MathIllegalArgumentException, {, if, (]
[double, expansionFactor, ,, double, contractionCriterion, ,, ExpansionMode, expansionMode, ,, double, ..., data, ), throws, MathIllegalArgumentException, {, if, (, initialCapacity, <=]
[contractionCriterion, ,, ExpansionMode, expansionMode, ,, double, ..., data, ), throws, MathIllegalArgumentException, {, if, (, initialCapacity, <=, 0, ), {, throw]
[expansionMode, ,, double, ..., data, ), throws, MathIllegalArgumentException, {, if, (, initialCapacity, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[expansionMode, ,, double, ..., data, ), throws, MathIllegalArgumentException, {, if, (, initialCapacity, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[data, ), throws, MathIllegalArgumentException, {, if, (, initialCapacity, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INITIAL_CAPACITY_NOT_POSITIVE, ,]
[{, if, (, initialCapacity, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INITIAL_CAPACITY_NOT_POSITIVE, ,, initialCapacity, ), ;, }]
[(, initialCapacity, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INITIAL_CAPACITY_NOT_POSITIVE, ,, initialCapacity, ), ;, }, checkContractExpand, (]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INITIAL_CAPACITY_NOT_POSITIVE, ,, initialCapacity, ), ;, }, checkContractExpand, (, contractionCriterion, ,]
[{, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INITIAL_CAPACITY_NOT_POSITIVE, ,, initialCapacity, ), ;, }, checkContractExpand, (, contractionCriterion, ,, expansionFactor, ), ;]
[{, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INITIAL_CAPACITY_NOT_POSITIVE, ,, initialCapacity, ), ;, }, checkContractExpand, (, contractionCriterion, ,, expansionFactor, ), ;]
[(, LocalizedFormats, ., INITIAL_CAPACITY_NOT_POSITIVE, ,, initialCapacity, ), ;, }, checkContractExpand, (, contractionCriterion, ,, expansionFactor, ), ;, this, ., expansionFactor, =]
[., INITIAL_CAPACITY_NOT_POSITIVE, ,, initialCapacity, ), ;, }, checkContractExpand, (, contractionCriterion, ,, expansionFactor, ), ;, this, ., expansionFactor, =, expansionFactor, ;]
[., INITIAL_CAPACITY_NOT_POSITIVE, ,, initialCapacity, ), ;, }, checkContractExpand, (, contractionCriterion, ,, expansionFactor, ), ;, this, ., expansionFactor, =, expansionFactor, ;]
[), ;, }, checkContractExpand, (, contractionCriterion, ,, expansionFactor, ), ;, this, ., expansionFactor, =, expansionFactor, ;, this, ., contractionCriterion, =]
[}, checkContractExpand, (, contractionCriterion, ,, expansionFactor, ), ;, this, ., expansionFactor, =, expansionFactor, ;, this, ., contractionCriterion, =, contractionCriterion, ;]
[}, checkContractExpand, (, contractionCriterion, ,, expansionFactor, ), ;, this, ., expansionFactor, =, expansionFactor, ;, this, ., contractionCriterion, =, contractionCriterion, ;]
[,, expansionFactor, ), ;, this, ., expansionFactor, =, expansionFactor, ;, this, ., contractionCriterion, =, contractionCriterion, ;, this, ., expansionMode, =]
[), ;, this, ., expansionFactor, =, expansionFactor, ;, this, ., contractionCriterion, =, contractionCriterion, ;, this, ., expansionMode, =, expansionMode, ;]
[this, ., expansionFactor, =, expansionFactor, ;, this, ., contractionCriterion, =, contractionCriterion, ;, this, ., expansionMode, =, expansionMode, ;, internalArray, =]
[=, expansionFactor, ;, this, ., contractionCriterion, =, contractionCriterion, ;, this, ., expansionMode, =, expansionMode, ;, internalArray, =, new, double, []
[this, ., contractionCriterion, =, contractionCriterion, ;, this, ., expansionMode, =, expansionMode, ;, internalArray, =, new, double, [, initialCapacity, ], ;]
[contractionCriterion, =, contractionCriterion, ;, this, ., expansionMode, =, expansionMode, ;, internalArray, =, new, double, [, initialCapacity, ], ;, numElements, =]
[contractionCriterion, ;, this, ., expansionMode, =, expansionMode, ;, internalArray, =, new, double, [, initialCapacity, ], ;, numElements, =, 0, ;]
[this, ., expansionMode, =, expansionMode, ;, internalArray, =, new, double, [, initialCapacity, ], ;, numElements, =, 0, ;, startIndex, =]
[expansionMode, ;, internalArray, =, new, double, [, initialCapacity, ], ;, numElements, =, 0, ;, startIndex, =, 0, ;, if, (]
[expansionMode, ;, internalArray, =, new, double, [, initialCapacity, ], ;, numElements, =, 0, ;, startIndex, =, 0, ;, if, (]
[internalArray, =, new, double, [, initialCapacity, ], ;, numElements, =, 0, ;, startIndex, =, 0, ;, if, (, data, !=]
[double, [, initialCapacity, ], ;, numElements, =, 0, ;, startIndex, =, 0, ;, if, (, data, !=, null, ), {]
[initialCapacity, ], ;, numElements, =, 0, ;, startIndex, =, 0, ;, if, (, data, !=, null, ), {, addElements, (]
[!=, null, ), {, addElements, (, data, ), ;, }, }, public, ResizableDoubleArray, (, ResizableDoubleArray, original, ), throws, NullArgumentException, {]
[!=, null, ), {, addElements, (, data, ), ;, }, }, public, ResizableDoubleArray, (, ResizableDoubleArray, original, ), throws, NullArgumentException, {]
[addElements, (, data, ), ;, }, }, public, ResizableDoubleArray, (, ResizableDoubleArray, original, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[), ;, }, }, public, ResizableDoubleArray, (, ResizableDoubleArray, original, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, original, ), ;]
[}, }, public, ResizableDoubleArray, (, ResizableDoubleArray, original, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, original, ), ;, copy, (]
[public, ResizableDoubleArray, (, ResizableDoubleArray, original, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, original, ), ;, copy, (, original, ,]
[;, copy, (, original, ,, this, ), ;, }, public, synchronized, void, addElement, (, double, value, ), {, if, (]
[;, copy, (, original, ,, this, ), ;, }, public, synchronized, void, addElement, (, double, value, ), {, if, (]
[;, copy, (, original, ,, this, ), ;, }, public, synchronized, void, addElement, (, double, value, ), {, if, (]
[,, this, ), ;, }, public, synchronized, void, addElement, (, double, value, ), {, if, (, internalArray, ., length, <=]
[,, this, ), ;, }, public, synchronized, void, addElement, (, double, value, ), {, if, (, internalArray, ., length, <=]
[), ;, }, public, synchronized, void, addElement, (, double, value, ), {, if, (, internalArray, ., length, <=, startIndex, +]
[public, synchronized, void, addElement, (, double, value, ), {, if, (, internalArray, ., length, <=, startIndex, +, numElements, ), {]
[double, value, ), {, if, (, internalArray, ., length, <=, startIndex, +, numElements, ), {, expand, (, ), ;, }]
[double, value, ), {, if, (, internalArray, ., length, <=, startIndex, +, numElements, ), {, expand, (, ), ;, }]
[), {, if, (, internalArray, ., length, <=, startIndex, +, numElements, ), {, expand, (, ), ;, }, internalArray, []
[), {, if, (, internalArray, ., length, <=, startIndex, +, numElements, ), {, expand, (, ), ;, }, internalArray, []
[if, (, internalArray, ., length, <=, startIndex, +, numElements, ), {, expand, (, ), ;, }, internalArray, [, startIndex, +]
[if, (, internalArray, ., length, <=, startIndex, +, numElements, ), {, expand, (, ), ;, }, internalArray, [, startIndex, +]
[length, <=, startIndex, +, numElements, ), {, expand, (, ), ;, }, internalArray, [, startIndex, +, numElements, ++, ], =]
[value, ;, }, public, synchronized, void, addElements, (, double, [, ], values, ), {, final, double, [, ], tempArray, =]
[public, synchronized, void, addElements, (, double, [, ], values, ), {, final, double, [, ], tempArray, =, new, double, []
[public, synchronized, void, addElements, (, double, [, ], values, ), {, final, double, [, ], tempArray, =, new, double, []
[public, synchronized, void, addElements, (, double, [, ], values, ), {, final, double, [, ], tempArray, =, new, double, []
[void, addElements, (, double, [, ], values, ), {, final, double, [, ], tempArray, =, new, double, [, numElements, +]
[void, addElements, (, double, [, ], values, ), {, final, double, [, ], tempArray, =, new, double, [, numElements, +]
[[, ], values, ), {, final, double, [, ], tempArray, =, new, double, [, numElements, +, values, ., length, +]
[), {, final, double, [, ], tempArray, =, new, double, [, numElements, +, values, ., length, +, 1, ], ;]
[), {, final, double, [, ], tempArray, =, new, double, [, numElements, +, values, ., length, +, 1, ], ;]
[[, ], tempArray, =, new, double, [, numElements, +, values, ., length, +, 1, ], ;, System, ., arraycopy, (]
[tempArray, =, new, double, [, numElements, +, values, ., length, +, 1, ], ;, System, ., arraycopy, (, internalArray, ,]
[new, double, [, numElements, +, values, ., length, +, 1, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,]
[[, numElements, +, values, ., length, +, 1, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,, tempArray, ,]
[+, values, ., length, +, 1, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,, tempArray, ,, 0, ,]
[length, +, 1, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,, tempArray, ,, 0, ,, numElements, ), ;]
[length, +, 1, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,, tempArray, ,, 0, ,, numElements, ), ;]
[;, System, ., arraycopy, (, internalArray, ,, startIndex, ,, tempArray, ,, 0, ,, numElements, ), ;, System, ., arraycopy, (]
[., arraycopy, (, internalArray, ,, startIndex, ,, tempArray, ,, 0, ,, numElements, ), ;, System, ., arraycopy, (, values, ,]
[(, internalArray, ,, startIndex, ,, tempArray, ,, 0, ,, numElements, ), ;, System, ., arraycopy, (, values, ,, 0, ,]
[,, startIndex, ,, tempArray, ,, 0, ,, numElements, ), ;, System, ., arraycopy, (, values, ,, 0, ,, tempArray, ,]
[,, tempArray, ,, 0, ,, numElements, ), ;, System, ., arraycopy, (, values, ,, 0, ,, tempArray, ,, numElements, ,]
[,, tempArray, ,, 0, ,, numElements, ), ;, System, ., arraycopy, (, values, ,, 0, ,, tempArray, ,, numElements, ,]
[numElements, ), ;, System, ., arraycopy, (, values, ,, 0, ,, tempArray, ,, numElements, ,, values, ., length, ), ;]
[;, System, ., arraycopy, (, values, ,, 0, ,, tempArray, ,, numElements, ,, values, ., length, ), ;, internalArray, =]
[., arraycopy, (, values, ,, 0, ,, tempArray, ,, numElements, ,, values, ., length, ), ;, internalArray, =, tempArray, ;]
[(, values, ,, 0, ,, tempArray, ,, numElements, ,, values, ., length, ), ;, internalArray, =, tempArray, ;, startIndex, =]
[,, 0, ,, tempArray, ,, numElements, ,, values, ., length, ), ;, internalArray, =, tempArray, ;, startIndex, =, 0, ;]
[,, tempArray, ,, numElements, ,, values, ., length, ), ;, internalArray, =, tempArray, ;, startIndex, =, 0, ;, numElements, +=]
[,, tempArray, ,, numElements, ,, values, ., length, ), ;, internalArray, =, tempArray, ;, startIndex, =, 0, ;, numElements, +=]
[;, numElements, +=, values, ., length, ;, }, public, synchronized, double, addElementRolling, (, double, value, ), {, double, discarded, =]
[;, numElements, +=, values, ., length, ;, }, public, synchronized, double, addElementRolling, (, double, value, ), {, double, discarded, =]
[+=, values, ., length, ;, }, public, synchronized, double, addElementRolling, (, double, value, ), {, double, discarded, =, internalArray, []
[}, public, synchronized, double, addElementRolling, (, double, value, ), {, double, discarded, =, internalArray, [, startIndex, ], ;, if, (]
[}, public, synchronized, double, addElementRolling, (, double, value, ), {, double, discarded, =, internalArray, [, startIndex, ], ;, if, (]
[public, synchronized, double, addElementRolling, (, double, value, ), {, double, discarded, =, internalArray, [, startIndex, ], ;, if, (, (]
[public, synchronized, double, addElementRolling, (, double, value, ), {, double, discarded, =, internalArray, [, startIndex, ], ;, if, (, (]
[double, addElementRolling, (, double, value, ), {, double, discarded, =, internalArray, [, startIndex, ], ;, if, (, (, startIndex, +]
[addElementRolling, (, double, value, ), {, double, discarded, =, internalArray, [, startIndex, ], ;, if, (, (, startIndex, +, (]
[addElementRolling, (, double, value, ), {, double, discarded, =, internalArray, [, startIndex, ], ;, if, (, (, startIndex, +, (]
[double, value, ), {, double, discarded, =, internalArray, [, startIndex, ], ;, if, (, (, startIndex, +, (, numElements, +]
[double, discarded, =, internalArray, [, startIndex, ], ;, if, (, (, startIndex, +, (, numElements, +, 1, ), ), >]
[double, discarded, =, internalArray, [, startIndex, ], ;, if, (, (, startIndex, +, (, numElements, +, 1, ), ), >]
[startIndex, ], ;, if, (, (, startIndex, +, (, numElements, +, 1, ), ), >, internalArray, ., length, ), {]
[(, startIndex, +, (, numElements, +, 1, ), ), >, internalArray, ., length, ), {, expand, (, ), ;, }]
[+, (, numElements, +, 1, ), ), >, internalArray, ., length, ), {, expand, (, ), ;, }, startIndex, +=]
[numElements, +, 1, ), ), >, internalArray, ., length, ), {, expand, (, ), ;, }, startIndex, +=, 1, ;]
[numElements, +, 1, ), ), >, internalArray, ., length, ), {, expand, (, ), ;, }, startIndex, +=, 1, ;]
[1, ), ), >, internalArray, ., length, ), {, expand, (, ), ;, }, startIndex, +=, 1, ;, internalArray, []
[1, ), ), >, internalArray, ., length, ), {, expand, (, ), ;, }, startIndex, +=, 1, ;, internalArray, []
[), >, internalArray, ., length, ), {, expand, (, ), ;, }, startIndex, +=, 1, ;, internalArray, [, startIndex, +]
[>, internalArray, ., length, ), {, expand, (, ), ;, }, startIndex, +=, 1, ;, internalArray, [, startIndex, +, (]
[>, internalArray, ., length, ), {, expand, (, ), ;, }, startIndex, +=, 1, ;, internalArray, [, startIndex, +, (]
[., length, ), {, expand, (, ), ;, }, startIndex, +=, 1, ;, internalArray, [, startIndex, +, (, numElements, -]
[expand, (, ), ;, }, startIndex, +=, 1, ;, internalArray, [, startIndex, +, (, numElements, -, 1, ), ], =]
[}, startIndex, +=, 1, ;, internalArray, [, startIndex, +, (, numElements, -, 1, ), ], =, value, ;, if, (]
[internalArray, [, startIndex, +, (, numElements, -, 1, ), ], =, value, ;, if, (, shouldContract, (, ), ), {]
[-, 1, ), ], =, value, ;, if, (, shouldContract, (, ), ), {, contract, (, ), ;, }, return]
[), ;, }, return, discarded, ;, }, public, synchronized, double, substituteMostRecentElement, (, double, value, ), throws, MathIllegalStateException, {, if, (]
[), ;, }, return, discarded, ;, }, public, synchronized, double, substituteMostRecentElement, (, double, value, ), throws, MathIllegalStateException, {, if, (]
[}, return, discarded, ;, }, public, synchronized, double, substituteMostRecentElement, (, double, value, ), throws, MathIllegalStateException, {, if, (, numElements, <]
[}, public, synchronized, double, substituteMostRecentElement, (, double, value, ), throws, MathIllegalStateException, {, if, (, numElements, <, 1, ), {, throw]
[double, substituteMostRecentElement, (, double, value, ), throws, MathIllegalStateException, {, if, (, numElements, <, 1, ), {, throw, new, MathIllegalStateException, (]
[double, substituteMostRecentElement, (, double, value, ), throws, MathIllegalStateException, {, if, (, numElements, <, 1, ), {, throw, new, MathIllegalStateException, (]
[(, numElements, <, 1, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY, ), ;, }, final, int, substIndex, =]
[(, numElements, <, 1, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY, ), ;, }, final, int, substIndex, =]
[<, 1, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY, ), ;, }, final, int, substIndex, =, startIndex, +]
[1, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY, ), ;, }, final, int, substIndex, =, startIndex, +, (]
[1, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY, ), ;, }, final, int, substIndex, =, startIndex, +, (]
[{, throw, new, MathIllegalStateException, (, LocalizedFormats, ., CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY, ), ;, }, final, int, substIndex, =, startIndex, +, (, numElements, -]
[CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY, ), ;, }, final, int, substIndex, =, startIndex, +, (, numElements, -, 1, ), ;, final, double, discarded, =]
[CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY, ), ;, }, final, int, substIndex, =, startIndex, +, (, numElements, -, 1, ), ;, final, double, discarded, =]
[;, }, final, int, substIndex, =, startIndex, +, (, numElements, -, 1, ), ;, final, double, discarded, =, internalArray, []
[int, substIndex, =, startIndex, +, (, numElements, -, 1, ), ;, final, double, discarded, =, internalArray, [, substIndex, ], ;]
[int, substIndex, =, startIndex, +, (, numElements, -, 1, ), ;, final, double, discarded, =, internalArray, [, substIndex, ], ;]
[=, startIndex, +, (, numElements, -, 1, ), ;, final, double, discarded, =, internalArray, [, substIndex, ], ;, internalArray, []
[(, numElements, -, 1, ), ;, final, double, discarded, =, internalArray, [, substIndex, ], ;, internalArray, [, substIndex, ], =]
[1, ), ;, final, double, discarded, =, internalArray, [, substIndex, ], ;, internalArray, [, substIndex, ], =, value, ;, return]
[;, return, discarded, ;, }, @, Deprecated, protected, void, checkContractExpand, (, float, contraction, ,, float, expansion, ), throws, MathIllegalArgumentException, {]
[discarded, ;, }, @, Deprecated, protected, void, checkContractExpand, (, float, contraction, ,, float, expansion, ), throws, MathIllegalArgumentException, {, checkContractExpand, (]
[@, Deprecated, protected, void, checkContractExpand, (, float, contraction, ,, float, expansion, ), throws, MathIllegalArgumentException, {, checkContractExpand, (, (, double, )]
[protected, void, checkContractExpand, (, float, contraction, ,, float, expansion, ), throws, MathIllegalArgumentException, {, checkContractExpand, (, (, double, ), contraction, ,]
[(, float, contraction, ,, float, expansion, ), throws, MathIllegalArgumentException, {, checkContractExpand, (, (, double, ), contraction, ,, (, double, )]
[), expansion, ), ;, }, protected, void, checkContractExpand, (, double, contraction, ,, double, expansion, ), throws, NumberIsTooSmallException, {, if, (]
[), expansion, ), ;, }, protected, void, checkContractExpand, (, double, contraction, ,, double, expansion, ), throws, NumberIsTooSmallException, {, if, (]
[), ;, }, protected, void, checkContractExpand, (, double, contraction, ,, double, expansion, ), throws, NumberIsTooSmallException, {, if, (, contraction, <]
[double, contraction, ,, double, expansion, ), throws, NumberIsTooSmallException, {, if, (, contraction, <, expansion, ), {, final, NumberIsTooSmallException, e, =]
[double, expansion, ), throws, NumberIsTooSmallException, {, if, (, contraction, <, expansion, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (]
[), throws, NumberIsTooSmallException, {, if, (, contraction, <, expansion, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,]
[NumberIsTooSmallException, {, if, (, contraction, <, expansion, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,]
[(, contraction, <, expansion, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, true, ), ;]
[(, contraction, <, expansion, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, true, ), ;]
[(, contraction, <, expansion, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, true, ), ;]
[e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, true, ), ;, e, ., getContext, (, ), ., addMessage, (]
[e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, true, ), ;, e, ., getContext, (, ), ., addMessage, (]
[(, contraction, ,, 1, ,, true, ), ;, e, ., getContext, (, ), ., addMessage, (, LocalizedFormats, ., CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, ,]
[,, 1, ,, true, ), ;, e, ., getContext, (, ), ., addMessage, (, LocalizedFormats, ., CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, ,, contraction, ,]
[), ;, e, ., getContext, (, ), ., addMessage, (, LocalizedFormats, ., CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, ,, contraction, ,, expansion, ), ;, throw]
[(, ), ., addMessage, (, LocalizedFormats, ., CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, ,, contraction, ,, expansion, ), ;, throw, e, ;, }, if, (]
[(, ), ., addMessage, (, LocalizedFormats, ., CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, ,, contraction, ,, expansion, ), ;, throw, e, ;, }, if, (]
[., addMessage, (, LocalizedFormats, ., CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, ,, contraction, ,, expansion, ), ;, throw, e, ;, }, if, (, contraction, <=]
[contraction, ,, expansion, ), ;, throw, e, ;, }, if, (, contraction, <=, 1, ), {, final, NumberIsTooSmallException, e, =]
[), ;, throw, e, ;, }, if, (, contraction, <=, 1, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (]
[throw, e, ;, }, if, (, contraction, <=, 1, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,]
[;, }, if, (, contraction, <=, 1, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,]
[(, contraction, <=, 1, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, false, ), ;]
[(, contraction, <=, 1, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, false, ), ;]
[(, contraction, <=, 1, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, false, ), ;]
[e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, false, ), ;, e, ., getContext, (, ), ., addMessage, (]
[e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, false, ), ;, e, ., getContext, (, ), ., addMessage, (]
[(, contraction, ,, 1, ,, false, ), ;, e, ., getContext, (, ), ., addMessage, (, LocalizedFormats, ., CONTRACTION_CRITERIA_SMALLER_THAN_ONE, ,]
[,, false, ), ;, e, ., getContext, (, ), ., addMessage, (, LocalizedFormats, ., CONTRACTION_CRITERIA_SMALLER_THAN_ONE, ,, contraction, ), ;, throw]
[., getContext, (, ), ., addMessage, (, LocalizedFormats, ., CONTRACTION_CRITERIA_SMALLER_THAN_ONE, ,, contraction, ), ;, throw, e, ;, }, if, (]
[., getContext, (, ), ., addMessage, (, LocalizedFormats, ., CONTRACTION_CRITERIA_SMALLER_THAN_ONE, ,, contraction, ), ;, throw, e, ;, }, if, (]
[(, ), ., addMessage, (, LocalizedFormats, ., CONTRACTION_CRITERIA_SMALLER_THAN_ONE, ,, contraction, ), ;, throw, e, ;, }, if, (, expansion, <=]
[CONTRACTION_CRITERIA_SMALLER_THAN_ONE, ,, contraction, ), ;, throw, e, ;, }, if, (, expansion, <=, 1, ), {, final, NumberIsTooSmallException, e, =]
[), ;, throw, e, ;, }, if, (, expansion, <=, 1, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (]
[throw, e, ;, }, if, (, expansion, <=, 1, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,]
[;, }, if, (, expansion, <=, 1, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,]
[(, expansion, <=, 1, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, false, ), ;]
[(, expansion, <=, 1, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, false, ), ;]
[(, expansion, <=, 1, ), {, final, NumberIsTooSmallException, e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, false, ), ;]
[e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, false, ), ;, e, ., getContext, (, ), ., addMessage, (]
[e, =, new, NumberIsTooSmallException, (, contraction, ,, 1, ,, false, ), ;, e, ., getContext, (, ), ., addMessage, (]
[(, contraction, ,, 1, ,, false, ), ;, e, ., getContext, (, ), ., addMessage, (, LocalizedFormats, ., EXPANSION_FACTOR_SMALLER_THAN_ONE, ,]
[,, false, ), ;, e, ., getContext, (, ), ., addMessage, (, LocalizedFormats, ., EXPANSION_FACTOR_SMALLER_THAN_ONE, ,, expansion, ), ;, throw]
[(, LocalizedFormats, ., EXPANSION_FACTOR_SMALLER_THAN_ONE, ,, expansion, ), ;, throw, e, ;, }, }, public, synchronized, void, clear, (, ), {]
[., EXPANSION_FACTOR_SMALLER_THAN_ONE, ,, expansion, ), ;, throw, e, ;, }, }, public, synchronized, void, clear, (, ), {, numElements, =]
[,, expansion, ), ;, throw, e, ;, }, }, public, synchronized, void, clear, (, ), {, numElements, =, 0, ;]
[), ;, throw, e, ;, }, }, public, synchronized, void, clear, (, ), {, numElements, =, 0, ;, startIndex, =]
[0, ;, startIndex, =, 0, ;, }, public, synchronized, void, contract, (, ), {, final, double, [, ], tempArray, =]
[=, 0, ;, }, public, synchronized, void, contract, (, ), {, final, double, [, ], tempArray, =, new, double, []
[=, 0, ;, }, public, synchronized, void, contract, (, ), {, final, double, [, ], tempArray, =, new, double, []
[;, }, public, synchronized, void, contract, (, ), {, final, double, [, ], tempArray, =, new, double, [, numElements, +]
[synchronized, void, contract, (, ), {, final, double, [, ], tempArray, =, new, double, [, numElements, +, 1, ], ;]
[synchronized, void, contract, (, ), {, final, double, [, ], tempArray, =, new, double, [, numElements, +, 1, ], ;]
[), {, final, double, [, ], tempArray, =, new, double, [, numElements, +, 1, ], ;, System, ., arraycopy, (]
[final, double, [, ], tempArray, =, new, double, [, numElements, +, 1, ], ;, System, ., arraycopy, (, internalArray, ,]
[[, ], tempArray, =, new, double, [, numElements, +, 1, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,]
[tempArray, =, new, double, [, numElements, +, 1, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,, tempArray, ,]
[new, double, [, numElements, +, 1, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,, tempArray, ,, 0, ,]
[numElements, +, 1, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,, tempArray, ,, 0, ,, numElements, ), ;]
[1, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,, tempArray, ,, 0, ,, numElements, ), ;, internalArray, =]
[;, System, ., arraycopy, (, internalArray, ,, startIndex, ,, tempArray, ,, 0, ,, numElements, ), ;, internalArray, =, tempArray, ;]
[., arraycopy, (, internalArray, ,, startIndex, ,, tempArray, ,, 0, ,, numElements, ), ;, internalArray, =, tempArray, ;, startIndex, =]
[internalArray, =, tempArray, ;, startIndex, =, 0, ;, }, public, synchronized, void, discardFrontElements, (, int, i, ), throws, MathIllegalArgumentException, {]
[tempArray, ;, startIndex, =, 0, ;, }, public, synchronized, void, discardFrontElements, (, int, i, ), throws, MathIllegalArgumentException, {, discardExtremeElements, (]
[startIndex, =, 0, ;, }, public, synchronized, void, discardFrontElements, (, int, i, ), throws, MathIllegalArgumentException, {, discardExtremeElements, (, i, ,]
[{, discardExtremeElements, (, i, ,, true, ), ;, }, public, synchronized, void, discardMostRecentElements, (, int, i, ), throws, MathIllegalArgumentException, {]
[(, i, ,, true, ), ;, }, public, synchronized, void, discardMostRecentElements, (, int, i, ), throws, MathIllegalArgumentException, {, discardExtremeElements, (]
[,, true, ), ;, }, public, synchronized, void, discardMostRecentElements, (, int, i, ), throws, MathIllegalArgumentException, {, discardExtremeElements, (, i, ,]
[false, ), ;, }, private, synchronized, void, discardExtremeElements, (, int, i, ,, boolean, front, ), throws, MathIllegalArgumentException, {, if, (]
[false, ), ;, }, private, synchronized, void, discardExtremeElements, (, int, i, ,, boolean, front, ), throws, MathIllegalArgumentException, {, if, (]
[;, }, private, synchronized, void, discardExtremeElements, (, int, i, ,, boolean, front, ), throws, MathIllegalArgumentException, {, if, (, i, >]
[void, discardExtremeElements, (, int, i, ,, boolean, front, ), throws, MathIllegalArgumentException, {, if, (, i, >, numElements, ), {, throw]
[int, i, ,, boolean, front, ), throws, MathIllegalArgumentException, {, if, (, i, >, numElements, ), {, throw, new, MathIllegalArgumentException, (]
[int, i, ,, boolean, front, ), throws, MathIllegalArgumentException, {, if, (, i, >, numElements, ), {, throw, new, MathIllegalArgumentException, (]
[front, ), throws, MathIllegalArgumentException, {, if, (, i, >, numElements, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, ,]
[throws, MathIllegalArgumentException, {, if, (, i, >, numElements, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, ,, i, ,]
[numElements, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, ,, i, ,, numElements, ), ;, }, else, if, (]
[numElements, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, ,, i, ,, numElements, ), ;, }, else, if, (]
[{, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, ,, i, ,, numElements, ), ;, }, else, if, (, i, <]
[(, LocalizedFormats, ., TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, ,, i, ,, numElements, ), ;, }, else, if, (, i, <, 0, ), {, throw]
[TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, ,, i, ,, numElements, ), ;, }, else, if, (, i, <, 0, ), {, throw, new, MathIllegalArgumentException, (]
[TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, ,, i, ,, numElements, ), ;, }, else, if, (, i, <, 0, ), {, throw, new, MathIllegalArgumentException, (]
[numElements, ), ;, }, else, if, (, i, <, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, ,]
[(, i, <, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, ,, i, ), ;, }, else, {]
[<, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, ,, i, ), ;, }, else, {, numElements, -=]
[throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, ,, i, ), ;, }, else, {, numElements, -=, i, ;, if, (]
[(, LocalizedFormats, ., CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, ,, i, ), ;, }, else, {, numElements, -=, i, ;, if, (, front, ), {]
[., CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, ,, i, ), ;, }, else, {, numElements, -=, i, ;, if, (, front, ), {, startIndex, +=]
[}, else, {, numElements, -=, i, ;, if, (, front, ), {, startIndex, +=, i, ;, }, }, if, (]
[i, ;, if, (, front, ), {, startIndex, +=, i, ;, }, }, if, (, shouldContract, (, ), ), {]
[(, ), ), {, contract, (, ), ;, }, }, protected, synchronized, void, expand, (, ), {, int, newSize, =]
[contract, (, ), ;, }, }, protected, synchronized, void, expand, (, ), {, int, newSize, =, 0, ;, if, (]
[contract, (, ), ;, }, }, protected, synchronized, void, expand, (, ), {, int, newSize, =, 0, ;, if, (]
[), ;, }, }, protected, synchronized, void, expand, (, ), {, int, newSize, =, 0, ;, if, (, expansionMode, ==]
[), ;, }, }, protected, synchronized, void, expand, (, ), {, int, newSize, =, 0, ;, if, (, expansionMode, ==]
[synchronized, void, expand, (, ), {, int, newSize, =, 0, ;, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {]
[expand, (, ), {, int, newSize, =, 0, ;, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, newSize, =]
[{, int, newSize, =, 0, ;, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, newSize, =, (, int, )]
[{, int, newSize, =, 0, ;, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, newSize, =, (, int, )]
[0, ;, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, newSize, =, (, int, ), FastMath, ., ceil, (]
[0, ;, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, newSize, =, (, int, ), FastMath, ., ceil, (]
[0, ;, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, newSize, =, (, int, ), FastMath, ., ceil, (]
[expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, newSize, =, (, int, ), FastMath, ., ceil, (, internalArray, ., length, *]
[{, newSize, =, (, int, ), FastMath, ., ceil, (, internalArray, ., length, *, expansionFactor, ), ;, }, else, {]
[=, (, int, ), FastMath, ., ceil, (, internalArray, ., length, *, expansionFactor, ), ;, }, else, {, newSize, =]
[), FastMath, ., ceil, (, internalArray, ., length, *, expansionFactor, ), ;, }, else, {, newSize, =, (, int, )]
[FastMath, ., ceil, (, internalArray, ., length, *, expansionFactor, ), ;, }, else, {, newSize, =, (, int, ), (]
[FastMath, ., ceil, (, internalArray, ., length, *, expansionFactor, ), ;, }, else, {, newSize, =, (, int, ), (]
[FastMath, ., ceil, (, internalArray, ., length, *, expansionFactor, ), ;, }, else, {, newSize, =, (, int, ), (]
[internalArray, ., length, *, expansionFactor, ), ;, }, else, {, newSize, =, (, int, ), (, internalArray, ., length, +]
[internalArray, ., length, *, expansionFactor, ), ;, }, else, {, newSize, =, (, int, ), (, internalArray, ., length, +]
[expansionFactor, ), ;, }, else, {, newSize, =, (, int, ), (, internalArray, ., length, +, FastMath, ., round, (]
[(, internalArray, ., length, +, FastMath, ., round, (, expansionFactor, ), ), ;, }, final, double, [, ], tempArray, =]
[length, +, FastMath, ., round, (, expansionFactor, ), ), ;, }, final, double, [, ], tempArray, =, new, double, []
[., round, (, expansionFactor, ), ), ;, }, final, double, [, ], tempArray, =, new, double, [, newSize, ], ;]
[., round, (, expansionFactor, ), ), ;, }, final, double, [, ], tempArray, =, new, double, [, newSize, ], ;]
[), ), ;, }, final, double, [, ], tempArray, =, new, double, [, newSize, ], ;, System, ., arraycopy, (]
[;, }, final, double, [, ], tempArray, =, new, double, [, newSize, ], ;, System, ., arraycopy, (, internalArray, ,]
[final, double, [, ], tempArray, =, new, double, [, newSize, ], ;, System, ., arraycopy, (, internalArray, ,, 0, ,]
[[, ], tempArray, =, new, double, [, newSize, ], ;, System, ., arraycopy, (, internalArray, ,, 0, ,, tempArray, ,]
[tempArray, =, new, double, [, newSize, ], ;, System, ., arraycopy, (, internalArray, ,, 0, ,, tempArray, ,, 0, ,]
[tempArray, =, new, double, [, newSize, ], ;, System, ., arraycopy, (, internalArray, ,, 0, ,, tempArray, ,, 0, ,]
[newSize, ], ;, System, ., arraycopy, (, internalArray, ,, 0, ,, tempArray, ,, 0, ,, internalArray, ., length, ), ;]
[;, System, ., arraycopy, (, internalArray, ,, 0, ,, tempArray, ,, 0, ,, internalArray, ., length, ), ;, internalArray, =]
[internalArray, =, tempArray, ;, }, private, synchronized, void, expandTo, (, int, size, ), {, final, double, [, ], tempArray, =]
[;, }, private, synchronized, void, expandTo, (, int, size, ), {, final, double, [, ], tempArray, =, new, double, []
[synchronized, void, expandTo, (, int, size, ), {, final, double, [, ], tempArray, =, new, double, [, size, ], ;]
[synchronized, void, expandTo, (, int, size, ), {, final, double, [, ], tempArray, =, new, double, [, size, ], ;]
[int, size, ), {, final, double, [, ], tempArray, =, new, double, [, size, ], ;, System, ., arraycopy, (]
[), {, final, double, [, ], tempArray, =, new, double, [, size, ], ;, System, ., arraycopy, (, internalArray, ,]
[final, double, [, ], tempArray, =, new, double, [, size, ], ;, System, ., arraycopy, (, internalArray, ,, 0, ,]
[[, ], tempArray, =, new, double, [, size, ], ;, System, ., arraycopy, (, internalArray, ,, 0, ,, tempArray, ,]
[tempArray, =, new, double, [, size, ], ;, System, ., arraycopy, (, internalArray, ,, 0, ,, tempArray, ,, 0, ,]
[tempArray, =, new, double, [, size, ], ;, System, ., arraycopy, (, internalArray, ,, 0, ,, tempArray, ,, 0, ,]
[size, ], ;, System, ., arraycopy, (, internalArray, ,, 0, ,, tempArray, ,, 0, ,, internalArray, ., length, ), ;]
[;, System, ., arraycopy, (, internalArray, ,, 0, ,, tempArray, ,, 0, ,, internalArray, ., length, ), ;, internalArray, =]
[,, internalArray, ., length, ), ;, internalArray, =, tempArray, ;, }, @, Deprecated, public, float, getContractionCriteria, (, ), {, return]
[length, ), ;, internalArray, =, tempArray, ;, }, @, Deprecated, public, float, getContractionCriteria, (, ), {, return, (, float, )]
[getContractionCriteria, (, ), {, return, (, float, ), getContractionCriterion, (, ), ;, }, public, double, getContractionCriterion, (, ), {, return]
[double, getContractionCriterion, (, ), {, return, contractionCriterion, ;, }, public, synchronized, double, getElement, (, int, index, ), {, if, (]
[double, getContractionCriterion, (, ), {, return, contractionCriterion, ;, }, public, synchronized, double, getElement, (, int, index, ), {, if, (]
[(, ), {, return, contractionCriterion, ;, }, public, synchronized, double, getElement, (, int, index, ), {, if, (, index, >=]
[contractionCriterion, ;, }, public, synchronized, double, getElement, (, int, index, ), {, if, (, index, >=, numElements, ), {, throw]
[public, synchronized, double, getElement, (, int, index, ), {, if, (, index, >=, numElements, ), {, throw, new, ArrayIndexOutOfBoundsException, (]
[), {, if, (, index, >=, numElements, ), {, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, else, if, (]
[), {, if, (, index, >=, numElements, ), {, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, else, if, (]
[if, (, index, >=, numElements, ), {, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, else, if, (, index, >=]
[numElements, ), {, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, else, if, (, index, >=, 0, ), {, return]
[numElements, ), {, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, else, if, (, index, >=, 0, ), {, return]
[{, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, else, if, (, index, >=, 0, ), {, return, internalArray, []
[{, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, else, if, (, index, >=, 0, ), {, return, internalArray, []
[new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, else, if, (, index, >=, 0, ), {, return, internalArray, [, startIndex, +]
[else, if, (, index, >=, 0, ), {, return, internalArray, [, startIndex, +, index, ], ;, }, else, {, throw]
[index, >=, 0, ), {, return, internalArray, [, startIndex, +, index, ], ;, }, else, {, throw, new, ArrayIndexOutOfBoundsException, (]
[index, ), ;, }, }, public, synchronized, double, [, ], getElements, (, ), {, final, double, [, ], elementArray, =]
[}, }, public, synchronized, double, [, ], getElements, (, ), {, final, double, [, ], elementArray, =, new, double, []
[synchronized, double, [, ], getElements, (, ), {, final, double, [, ], elementArray, =, new, double, [, numElements, ], ;]
[synchronized, double, [, ], getElements, (, ), {, final, double, [, ], elementArray, =, new, double, [, numElements, ], ;]
[getElements, (, ), {, final, double, [, ], elementArray, =, new, double, [, numElements, ], ;, System, ., arraycopy, (]
[), {, final, double, [, ], elementArray, =, new, double, [, numElements, ], ;, System, ., arraycopy, (, internalArray, ,]
[final, double, [, ], elementArray, =, new, double, [, numElements, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,]
[[, ], elementArray, =, new, double, [, numElements, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,, elementArray, ,]
[elementArray, =, new, double, [, numElements, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,, elementArray, ,, 0, ,]
[[, numElements, ], ;, System, ., arraycopy, (, internalArray, ,, startIndex, ,, elementArray, ,, 0, ,, numElements, ), ;, return]
[elementArray, ,, 0, ,, numElements, ), ;, return, elementArray, ;, }, @, Deprecated, public, float, getExpansionFactor, (, ), {, return]
[,, numElements, ), ;, return, elementArray, ;, }, @, Deprecated, public, float, getExpansionFactor, (, ), {, return, (, float, )]
[(, ), {, return, (, float, ), expansionFactor, ;, }, @, Deprecated, public, int, getExpansionMode, (, ), {, switch, (]
[(, float, ), expansionFactor, ;, }, @, Deprecated, public, int, getExpansionMode, (, ), {, switch, (, expansionMode, ), {, case]
[expansionFactor, ;, }, @, Deprecated, public, int, getExpansionMode, (, ), {, switch, (, expansionMode, ), {, case, MULTIPLICATIVE, :, return]
[@, Deprecated, public, int, getExpansionMode, (, ), {, switch, (, expansionMode, ), {, case, MULTIPLICATIVE, :, return, MULTIPLICATIVE_MODE, ;, case]
[int, getExpansionMode, (, ), {, switch, (, expansionMode, ), {, case, MULTIPLICATIVE, :, return, MULTIPLICATIVE_MODE, ;, case, ADDITIVE, :, return]
[switch, (, expansionMode, ), {, case, MULTIPLICATIVE, :, return, MULTIPLICATIVE_MODE, ;, case, ADDITIVE, :, return, ADDITIVE_MODE, ;, default, :, throw]
[;, default, :, throw, new, MathInternalError, (, ), ;, }, }, @, Deprecated, synchronized, int, getInternalLength, (, ), {, return]
[;, default, :, throw, new, MathInternalError, (, ), ;, }, }, @, Deprecated, synchronized, int, getInternalLength, (, ), {, return]
[Deprecated, synchronized, int, getInternalLength, (, ), {, return, internalArray, ., length, ;, }, public, int, getCapacity, (, ), {, return]
[Deprecated, synchronized, int, getInternalLength, (, ), {, return, internalArray, ., length, ;, }, public, int, getCapacity, (, ), {, return]
[public, int, getCapacity, (, ), {, return, internalArray, ., length, ;, }, public, synchronized, int, getNumElements, (, ), {, return]
[getNumElements, (, ), {, return, numElements, ;, }, @, Deprecated, public, synchronized, double, [, ], getInternalValues, (, ), {, return]
[double, [, ], getInternalValues, (, ), {, return, internalArray, ;, }, protected, double, [, ], getArrayRef, (, ), {, return]
[}, protected, double, [, ], getArrayRef, (, ), {, return, internalArray, ;, }, protected, int, getStartIndex, (, ), {, return]
[getStartIndex, (, ), {, return, startIndex, ;, }, @, Deprecated, public, void, setContractionCriteria, (, float, contractionCriteria, ), throws, MathIllegalArgumentException, {]
[), {, return, startIndex, ;, }, @, Deprecated, public, void, setContractionCriteria, (, float, contractionCriteria, ), throws, MathIllegalArgumentException, {, checkContractExpand, (]
[return, startIndex, ;, }, @, Deprecated, public, void, setContractionCriteria, (, float, contractionCriteria, ), throws, MathIllegalArgumentException, {, checkContractExpand, (, contractionCriteria, ,]
[void, setContractionCriteria, (, float, contractionCriteria, ), throws, MathIllegalArgumentException, {, checkContractExpand, (, contractionCriteria, ,, getExpansionFactor, (, ), ), ;, synchronized, (]
[float, contractionCriteria, ), throws, MathIllegalArgumentException, {, checkContractExpand, (, contractionCriteria, ,, getExpansionFactor, (, ), ), ;, synchronized, (, this, ), {]
[float, contractionCriteria, ), throws, MathIllegalArgumentException, {, checkContractExpand, (, contractionCriteria, ,, getExpansionFactor, (, ), ), ;, synchronized, (, this, ), {]
[MathIllegalArgumentException, {, checkContractExpand, (, contractionCriteria, ,, getExpansionFactor, (, ), ), ;, synchronized, (, this, ), {, this, ., contractionCriterion, =]
[Function, f, ), {, final, double, [, ], array, ;, final, int, start, ;, final, int, num, ;, synchronized, (]
[{, final, double, [, ], array, ;, final, int, start, ;, final, int, num, ;, synchronized, (, this, ), {]
[double, [, ], array, ;, final, int, start, ;, final, int, num, ;, synchronized, (, this, ), {, array, =]
[], array, ;, final, int, start, ;, final, int, num, ;, synchronized, (, this, ), {, array, =, internalArray, ;]
[;, final, int, start, ;, final, int, num, ;, synchronized, (, this, ), {, array, =, internalArray, ;, start, =]
[int, start, ;, final, int, num, ;, synchronized, (, this, ), {, array, =, internalArray, ;, start, =, startIndex, ;]
[;, final, int, num, ;, synchronized, (, this, ), {, array, =, internalArray, ;, start, =, startIndex, ;, num, =]
[;, synchronized, (, this, ), {, array, =, internalArray, ;, start, =, startIndex, ;, num, =, numElements, ;, }, return]
[;, synchronized, (, this, ), {, array, =, internalArray, ;, start, =, startIndex, ;, num, =, numElements, ;, }, return]
[), {, array, =, internalArray, ;, start, =, startIndex, ;, num, =, numElements, ;, }, return, f, ., evaluate, (]
[array, =, internalArray, ;, start, =, startIndex, ;, num, =, numElements, ;, }, return, f, ., evaluate, (, array, ,]
[internalArray, ;, start, =, startIndex, ;, num, =, numElements, ;, }, return, f, ., evaluate, (, array, ,, start, ,]
[start, ,, num, ), ;, }, public, synchronized, void, setElement, (, int, index, ,, double, value, ), {, if, (]
[start, ,, num, ), ;, }, public, synchronized, void, setElement, (, int, index, ,, double, value, ), {, if, (]
[num, ), ;, }, public, synchronized, void, setElement, (, int, index, ,, double, value, ), {, if, (, index, <]
[public, synchronized, void, setElement, (, int, index, ,, double, value, ), {, if, (, index, <, 0, ), {, throw]
[setElement, (, int, index, ,, double, value, ), {, if, (, index, <, 0, ), {, throw, new, ArrayIndexOutOfBoundsException, (]
[value, ), {, if, (, index, <, 0, ), {, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, if, (]
[value, ), {, if, (, index, <, 0, ), {, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, if, (]
[value, ), {, if, (, index, <, 0, ), {, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, if, (]
[{, if, (, index, <, 0, ), {, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, if, (, index, +]
[(, index, <, 0, ), {, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, if, (, index, +, 1, >]
[0, ), {, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, if, (, index, +, 1, >, numElements, ), {]
[{, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, if, (, index, +, 1, >, numElements, ), {, numElements, =]
[{, throw, new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, if, (, index, +, 1, >, numElements, ), {, numElements, =]
[new, ArrayIndexOutOfBoundsException, (, index, ), ;, }, if, (, index, +, 1, >, numElements, ), {, numElements, =, index, +]
[;, }, if, (, index, +, 1, >, numElements, ), {, numElements, =, index, +, 1, ;, }, if, (]
[;, }, if, (, index, +, 1, >, numElements, ), {, numElements, =, index, +, 1, ;, }, if, (]
[}, if, (, index, +, 1, >, numElements, ), {, numElements, =, index, +, 1, ;, }, if, (, (]
[}, if, (, index, +, 1, >, numElements, ), {, numElements, =, index, +, 1, ;, }, if, (, (]
[(, index, +, 1, >, numElements, ), {, numElements, =, index, +, 1, ;, }, if, (, (, startIndex, +]
[1, >, numElements, ), {, numElements, =, index, +, 1, ;, }, if, (, (, startIndex, +, index, ), >=]
[1, >, numElements, ), {, numElements, =, index, +, 1, ;, }, if, (, (, startIndex, +, index, ), >=]
[numElements, =, index, +, 1, ;, }, if, (, (, startIndex, +, index, ), >=, internalArray, ., length, ), {]
[index, +, 1, ;, }, if, (, (, startIndex, +, index, ), >=, internalArray, ., length, ), {, expandTo, (]
[index, +, 1, ;, }, if, (, (, startIndex, +, index, ), >=, internalArray, ., length, ), {, expandTo, (]
[1, ;, }, if, (, (, startIndex, +, index, ), >=, internalArray, ., length, ), {, expandTo, (, startIndex, +]
[;, }, if, (, (, startIndex, +, index, ), >=, internalArray, ., length, ), {, expandTo, (, startIndex, +, (]
[;, }, if, (, (, startIndex, +, index, ), >=, internalArray, ., length, ), {, expandTo, (, startIndex, +, (]
[if, (, (, startIndex, +, index, ), >=, internalArray, ., length, ), {, expandTo, (, startIndex, +, (, index, +]
[index, ), >=, internalArray, ., length, ), {, expandTo, (, startIndex, +, (, index, +, 1, ), ), ;, }]
[index, ), >=, internalArray, ., length, ), {, expandTo, (, startIndex, +, (, index, +, 1, ), ), ;, }]
[>=, internalArray, ., length, ), {, expandTo, (, startIndex, +, (, index, +, 1, ), ), ;, }, internalArray, []
[>=, internalArray, ., length, ), {, expandTo, (, startIndex, +, (, index, +, 1, ), ), ;, }, internalArray, []
[., length, ), {, expandTo, (, startIndex, +, (, index, +, 1, ), ), ;, }, internalArray, [, startIndex, +]
[{, expandTo, (, startIndex, +, (, index, +, 1, ), ), ;, }, internalArray, [, startIndex, +, index, ], =]
[startIndex, +, index, ], =, value, ;, }, @, Deprecated, public, void, setExpansionFactor, (, float, expansionFactor, ), throws, MathIllegalArgumentException, {]
[index, ], =, value, ;, }, @, Deprecated, public, void, setExpansionFactor, (, float, expansionFactor, ), throws, MathIllegalArgumentException, {, checkContractExpand, (]
[;, }, @, Deprecated, public, void, setExpansionFactor, (, float, expansionFactor, ), throws, MathIllegalArgumentException, {, checkContractExpand, (, getContractionCriterion, (, ), ,]
[void, setExpansionFactor, (, float, expansionFactor, ), throws, MathIllegalArgumentException, {, checkContractExpand, (, getContractionCriterion, (, ), ,, expansionFactor, ), ;, synchronized, (]
[float, expansionFactor, ), throws, MathIllegalArgumentException, {, checkContractExpand, (, getContractionCriterion, (, ), ,, expansionFactor, ), ;, synchronized, (, this, ), {]
[float, expansionFactor, ), throws, MathIllegalArgumentException, {, checkContractExpand, (, getContractionCriterion, (, ), ,, expansionFactor, ), ;, synchronized, (, this, ), {]
[MathIllegalArgumentException, {, checkContractExpand, (, getContractionCriterion, (, ), ,, expansionFactor, ), ;, synchronized, (, this, ), {, this, ., expansionFactor, =]
[expansionFactor, =, expansionFactor, ;, }, }, @, Deprecated, public, void, setExpansionMode, (, int, expansionMode, ), throws, MathIllegalArgumentException, {, if, (]
[expansionFactor, =, expansionFactor, ;, }, }, @, Deprecated, public, void, setExpansionMode, (, int, expansionMode, ), throws, MathIllegalArgumentException, {, if, (]
[expansionFactor, =, expansionFactor, ;, }, }, @, Deprecated, public, void, setExpansionMode, (, int, expansionMode, ), throws, MathIllegalArgumentException, {, if, (]
[expansionFactor, ;, }, }, @, Deprecated, public, void, setExpansionMode, (, int, expansionMode, ), throws, MathIllegalArgumentException, {, if, (, expansionMode, !=]
[}, }, @, Deprecated, public, void, setExpansionMode, (, int, expansionMode, ), throws, MathIllegalArgumentException, {, if, (, expansionMode, !=, MULTIPLICATIVE_MODE, &&]
[}, }, @, Deprecated, public, void, setExpansionMode, (, int, expansionMode, ), throws, MathIllegalArgumentException, {, if, (, expansionMode, !=, MULTIPLICATIVE_MODE, &&]
[@, Deprecated, public, void, setExpansionMode, (, int, expansionMode, ), throws, MathIllegalArgumentException, {, if, (, expansionMode, !=, MULTIPLICATIVE_MODE, &&, expansionMode, !=]
[setExpansionMode, (, int, expansionMode, ), throws, MathIllegalArgumentException, {, if, (, expansionMode, !=, MULTIPLICATIVE_MODE, &&, expansionMode, !=, ADDITIVE_MODE, ), {, throw]
[expansionMode, ), throws, MathIllegalArgumentException, {, if, (, expansionMode, !=, MULTIPLICATIVE_MODE, &&, expansionMode, !=, ADDITIVE_MODE, ), {, throw, new, MathIllegalArgumentException, (]
[expansionMode, ), throws, MathIllegalArgumentException, {, if, (, expansionMode, !=, MULTIPLICATIVE_MODE, &&, expansionMode, !=, ADDITIVE_MODE, ), {, throw, new, MathIllegalArgumentException, (]
[{, if, (, expansionMode, !=, MULTIPLICATIVE_MODE, &&, expansionMode, !=, ADDITIVE_MODE, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., UNSUPPORTED_EXPANSION_MODE, ,]
[(, expansionMode, !=, MULTIPLICATIVE_MODE, &&, expansionMode, !=, ADDITIVE_MODE, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., UNSUPPORTED_EXPANSION_MODE, ,, expansionMode, ,]
[!=, MULTIPLICATIVE_MODE, &&, expansionMode, !=, ADDITIVE_MODE, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., UNSUPPORTED_EXPANSION_MODE, ,, expansionMode, ,, MULTIPLICATIVE_MODE, ,]
[&&, expansionMode, !=, ADDITIVE_MODE, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., UNSUPPORTED_EXPANSION_MODE, ,, expansionMode, ,, MULTIPLICATIVE_MODE, ,, "MULTIPLICATIVE_MODE", ,]
[!=, ADDITIVE_MODE, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., UNSUPPORTED_EXPANSION_MODE, ,, expansionMode, ,, MULTIPLICATIVE_MODE, ,, "MULTIPLICATIVE_MODE", ,, ADDITIVE_MODE, ,]
[MathIllegalArgumentException, (, LocalizedFormats, ., UNSUPPORTED_EXPANSION_MODE, ,, expansionMode, ,, MULTIPLICATIVE_MODE, ,, "MULTIPLICATIVE_MODE", ,, ADDITIVE_MODE, ,, "ADDITIVE_MODE", ), ;, }, synchronized, (]
[,, expansionMode, ,, MULTIPLICATIVE_MODE, ,, "MULTIPLICATIVE_MODE", ,, ADDITIVE_MODE, ,, "ADDITIVE_MODE", ), ;, }, synchronized, (, this, ), {, if, (]
[,, expansionMode, ,, MULTIPLICATIVE_MODE, ,, "MULTIPLICATIVE_MODE", ,, ADDITIVE_MODE, ,, "ADDITIVE_MODE", ), ;, }, synchronized, (, this, ), {, if, (]
[,, MULTIPLICATIVE_MODE, ,, "MULTIPLICATIVE_MODE", ,, ADDITIVE_MODE, ,, "ADDITIVE_MODE", ), ;, }, synchronized, (, this, ), {, if, (, expansionMode, ==]
["MULTIPLICATIVE_MODE", ,, ADDITIVE_MODE, ,, "ADDITIVE_MODE", ), ;, }, synchronized, (, this, ), {, if, (, expansionMode, ==, MULTIPLICATIVE_MODE, ), {]
[ADDITIVE_MODE, ,, "ADDITIVE_MODE", ), ;, }, synchronized, (, this, ), {, if, (, expansionMode, ==, MULTIPLICATIVE_MODE, ), {, setExpansionMode, (]
[ADDITIVE_MODE, ,, "ADDITIVE_MODE", ), ;, }, synchronized, (, this, ), {, if, (, expansionMode, ==, MULTIPLICATIVE_MODE, ), {, setExpansionMode, (]
[), {, if, (, expansionMode, ==, MULTIPLICATIVE_MODE, ), {, setExpansionMode, (, ExpansionMode, ., MULTIPLICATIVE, ), ;, }, else, if, (]
[), {, if, (, expansionMode, ==, MULTIPLICATIVE_MODE, ), {, setExpansionMode, (, ExpansionMode, ., MULTIPLICATIVE, ), ;, }, else, if, (]
[if, (, expansionMode, ==, MULTIPLICATIVE_MODE, ), {, setExpansionMode, (, ExpansionMode, ., MULTIPLICATIVE, ), ;, }, else, if, (, expansionMode, ==]
[==, MULTIPLICATIVE_MODE, ), {, setExpansionMode, (, ExpansionMode, ., MULTIPLICATIVE, ), ;, }, else, if, (, expansionMode, ==, ADDITIVE_MODE, ), {]
[), {, setExpansionMode, (, ExpansionMode, ., MULTIPLICATIVE, ), ;, }, else, if, (, expansionMode, ==, ADDITIVE_MODE, ), {, setExpansionMode, (]
[), {, setExpansionMode, (, ExpansionMode, ., MULTIPLICATIVE, ), ;, }, else, if, (, expansionMode, ==, ADDITIVE_MODE, ), {, setExpansionMode, (]
[setExpansionMode, (, ExpansionMode, ., ADDITIVE, ), ;, }, }, }, @, Deprecated, public, void, setExpansionMode, (, ExpansionMode, expansionMode, ), {]
[setExpansionMode, (, ExpansionMode, ., ADDITIVE, ), ;, }, }, }, @, Deprecated, public, void, setExpansionMode, (, ExpansionMode, expansionMode, ), {]
[ADDITIVE, ), ;, }, }, }, @, Deprecated, public, void, setExpansionMode, (, ExpansionMode, expansionMode, ), {, this, ., expansionMode, =]
[int, initialCapacity, ), throws, MathIllegalArgumentException, {, }, public, synchronized, void, setNumElements, (, int, i, ), throws, MathIllegalArgumentException, {, if, (]
[int, initialCapacity, ), throws, MathIllegalArgumentException, {, }, public, synchronized, void, setNumElements, (, int, i, ), throws, MathIllegalArgumentException, {, if, (]
[), throws, MathIllegalArgumentException, {, }, public, synchronized, void, setNumElements, (, int, i, ), throws, MathIllegalArgumentException, {, if, (, i, <]
[}, public, synchronized, void, setNumElements, (, int, i, ), throws, MathIllegalArgumentException, {, if, (, i, <, 0, ), {, throw]
[void, setNumElements, (, int, i, ), throws, MathIllegalArgumentException, {, if, (, i, <, 0, ), {, throw, new, MathIllegalArgumentException, (]
[void, setNumElements, (, int, i, ), throws, MathIllegalArgumentException, {, if, (, i, <, 0, ), {, throw, new, MathIllegalArgumentException, (]
[i, ), throws, MathIllegalArgumentException, {, if, (, i, <, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INDEX_NOT_POSITIVE, ,]
[<, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INDEX_NOT_POSITIVE, ,, i, ), ;, }, final, int, newSize, =]
[<, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INDEX_NOT_POSITIVE, ,, i, ), ;, }, final, int, newSize, =]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INDEX_NOT_POSITIVE, ,, i, ), ;, }, final, int, newSize, =, startIndex, +]
[MathIllegalArgumentException, (, LocalizedFormats, ., INDEX_NOT_POSITIVE, ,, i, ), ;, }, final, int, newSize, =, startIndex, +, i, ;, if, (]
[MathIllegalArgumentException, (, LocalizedFormats, ., INDEX_NOT_POSITIVE, ,, i, ), ;, }, final, int, newSize, =, startIndex, +, i, ;, if, (]
[LocalizedFormats, ., INDEX_NOT_POSITIVE, ,, i, ), ;, }, final, int, newSize, =, startIndex, +, i, ;, if, (, newSize, >]
[LocalizedFormats, ., INDEX_NOT_POSITIVE, ,, i, ), ;, }, final, int, newSize, =, startIndex, +, i, ;, if, (, newSize, >]
[), ;, }, final, int, newSize, =, startIndex, +, i, ;, if, (, newSize, >, internalArray, ., length, ), {]
[}, final, int, newSize, =, startIndex, +, i, ;, if, (, newSize, >, internalArray, ., length, ), {, expandTo, (]
[=, startIndex, +, i, ;, if, (, newSize, >, internalArray, ., length, ), {, expandTo, (, newSize, ), ;, }]
[+, i, ;, if, (, newSize, >, internalArray, ., length, ), {, expandTo, (, newSize, ), ;, }, numElements, =]
[expandTo, (, newSize, ), ;, }, numElements, =, i, ;, }, private, synchronized, boolean, shouldContract, (, ), {, if, (]
[expandTo, (, newSize, ), ;, }, numElements, =, i, ;, }, private, synchronized, boolean, shouldContract, (, ), {, if, (]
[newSize, ), ;, }, numElements, =, i, ;, }, private, synchronized, boolean, shouldContract, (, ), {, if, (, expansionMode, ==]
[newSize, ), ;, }, numElements, =, i, ;, }, private, synchronized, boolean, shouldContract, (, ), {, if, (, expansionMode, ==]
[i, ;, }, private, synchronized, boolean, shouldContract, (, ), {, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, return]
[i, ;, }, private, synchronized, boolean, shouldContract, (, ), {, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, return]
[;, }, private, synchronized, boolean, shouldContract, (, ), {, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, return, (]
[;, }, private, synchronized, boolean, shouldContract, (, ), {, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, return, (]
[;, }, private, synchronized, boolean, shouldContract, (, ), {, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, return, (]
[boolean, shouldContract, (, ), {, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, return, (, internalArray, ., length, /]
[shouldContract, (, ), {, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, return, (, internalArray, ., length, /, (]
[{, if, (, expansionMode, ==, ExpansionMode, ., MULTIPLICATIVE, ), {, return, (, internalArray, ., length, /, (, (, float, )]
[==, ExpansionMode, ., MULTIPLICATIVE, ), {, return, (, internalArray, ., length, /, (, (, float, ), numElements, ), ), >]
[return, (, internalArray, ., length, /, (, (, float, ), numElements, ), ), >, contractionCriterion, ;, }, else, {, return]
[return, (, internalArray, ., length, /, (, (, float, ), numElements, ), ), >, contractionCriterion, ;, }, else, {, return]
[(, internalArray, ., length, /, (, (, float, ), numElements, ), ), >, contractionCriterion, ;, }, else, {, return, (]
[(, internalArray, ., length, /, (, (, float, ), numElements, ), ), >, contractionCriterion, ;, }, else, {, return, (]
[(, internalArray, ., length, /, (, (, float, ), numElements, ), ), >, contractionCriterion, ;, }, else, {, return, (]
[/, (, (, float, ), numElements, ), ), >, contractionCriterion, ;, }, else, {, return, (, internalArray, ., length, -]
[float, ), numElements, ), ), >, contractionCriterion, ;, }, else, {, return, (, internalArray, ., length, -, numElements, ), >]
[., length, -, numElements, ), >, contractionCriterion, ;, }, }, @, Deprecated, public, synchronized, int, start, (, ), {, return]
[), {, return, startIndex, ;, }, public, static, void, copy, (, ResizableDoubleArray, source, ,, ResizableDoubleArray, dest, ), throws, NullArgumentException, {]
[), {, return, startIndex, ;, }, public, static, void, copy, (, ResizableDoubleArray, source, ,, ResizableDoubleArray, dest, ), throws, NullArgumentException, {]
[;, }, public, static, void, copy, (, ResizableDoubleArray, source, ,, ResizableDoubleArray, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[static, void, copy, (, ResizableDoubleArray, source, ,, ResizableDoubleArray, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;]
[static, void, copy, (, ResizableDoubleArray, source, ,, ResizableDoubleArray, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;]
[ResizableDoubleArray, source, ,, ResizableDoubleArray, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (]
[), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, synchronized, (]
[., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, synchronized, (, source, ), {, synchronized, (]
[source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, synchronized, (, source, ), {, synchronized, (, dest, ), {]
[source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, synchronized, (, source, ), {, synchronized, (, dest, ), {]
[., checkNotNull, (, dest, ), ;, synchronized, (, source, ), {, synchronized, (, dest, ), {, dest, ., contractionCriterion, =]
[., checkNotNull, (, dest, ), ;, synchronized, (, source, ), {, synchronized, (, dest, ), {, dest, ., contractionCriterion, =]
[), ;, synchronized, (, source, ), {, synchronized, (, dest, ), {, dest, ., contractionCriterion, =, source, ., contractionCriterion, ;]
[), ;, synchronized, (, source, ), {, synchronized, (, dest, ), {, dest, ., contractionCriterion, =, source, ., contractionCriterion, ;]
[source, ), {, synchronized, (, dest, ), {, dest, ., contractionCriterion, =, source, ., contractionCriterion, ;, dest, ., expansionFactor, =]
[source, ), {, synchronized, (, dest, ), {, dest, ., contractionCriterion, =, source, ., contractionCriterion, ;, dest, ., expansionFactor, =]
[(, dest, ), {, dest, ., contractionCriterion, =, source, ., contractionCriterion, ;, dest, ., expansionFactor, =, source, ., expansionFactor, ;]
[(, dest, ), {, dest, ., contractionCriterion, =, source, ., contractionCriterion, ;, dest, ., expansionFactor, =, source, ., expansionFactor, ;]
[dest, ., contractionCriterion, =, source, ., contractionCriterion, ;, dest, ., expansionFactor, =, source, ., expansionFactor, ;, dest, ., expansionMode, =]
[dest, ., contractionCriterion, =, source, ., contractionCriterion, ;, dest, ., expansionFactor, =, source, ., expansionFactor, ;, dest, ., expansionMode, =]
[source, ., contractionCriterion, ;, dest, ., expansionFactor, =, source, ., expansionFactor, ;, dest, ., expansionMode, =, source, ., expansionMode, ;]
[source, ., contractionCriterion, ;, dest, ., expansionFactor, =, source, ., expansionFactor, ;, dest, ., expansionMode, =, source, ., expansionMode, ;]
[dest, ., expansionFactor, =, source, ., expansionFactor, ;, dest, ., expansionMode, =, source, ., expansionMode, ;, dest, ., internalArray, =]
[=, source, ., expansionFactor, ;, dest, ., expansionMode, =, source, ., expansionMode, ;, dest, ., internalArray, =, new, double, []
[=, source, ., expansionFactor, ;, dest, ., expansionMode, =, source, ., expansionMode, ;, dest, ., internalArray, =, new, double, []
[=, source, ., expansionFactor, ;, dest, ., expansionMode, =, source, ., expansionMode, ;, dest, ., internalArray, =, new, double, []
[expansionMode, =, source, ., expansionMode, ;, dest, ., internalArray, =, new, double, [, source, ., internalArray, ., length, ], ;]
[expansionMode, =, source, ., expansionMode, ;, dest, ., internalArray, =, new, double, [, source, ., internalArray, ., length, ], ;]
[expansionMode, ;, dest, ., internalArray, =, new, double, [, source, ., internalArray, ., length, ], ;, System, ., arraycopy, (]
[expansionMode, ;, dest, ., internalArray, =, new, double, [, source, ., internalArray, ., length, ], ;, System, ., arraycopy, (]
[internalArray, =, new, double, [, source, ., internalArray, ., length, ], ;, System, ., arraycopy, (, source, ., internalArray, ,]
[new, double, [, source, ., internalArray, ., length, ], ;, System, ., arraycopy, (, source, ., internalArray, ,, 0, ,]
[new, double, [, source, ., internalArray, ., length, ], ;, System, ., arraycopy, (, source, ., internalArray, ,, 0, ,]
[., internalArray, ., length, ], ;, System, ., arraycopy, (, source, ., internalArray, ,, 0, ,, dest, ., internalArray, ,]
[., length, ], ;, System, ., arraycopy, (, source, ., internalArray, ,, 0, ,, dest, ., internalArray, ,, 0, ,]
[., length, ], ;, System, ., arraycopy, (, source, ., internalArray, ,, 0, ,, dest, ., internalArray, ,, 0, ,]
[., length, ], ;, System, ., arraycopy, (, source, ., internalArray, ,, 0, ,, dest, ., internalArray, ,, 0, ,]
[(, source, ., internalArray, ,, 0, ,, dest, ., internalArray, ,, 0, ,, dest, ., internalArray, ., length, ), ;]
[(, source, ., internalArray, ,, 0, ,, dest, ., internalArray, ,, 0, ,, dest, ., internalArray, ., length, ), ;]
[,, 0, ,, dest, ., internalArray, ,, 0, ,, dest, ., internalArray, ., length, ), ;, dest, ., numElements, =]
[,, 0, ,, dest, ., internalArray, ,, 0, ,, dest, ., internalArray, ., length, ), ;, dest, ., numElements, =]
[., internalArray, ,, 0, ,, dest, ., internalArray, ., length, ), ;, dest, ., numElements, =, source, ., numElements, ;]
[., internalArray, ,, 0, ,, dest, ., internalArray, ., length, ), ;, dest, ., numElements, =, source, ., numElements, ;]
[,, dest, ., internalArray, ., length, ), ;, dest, ., numElements, =, source, ., numElements, ;, dest, ., startIndex, =]
[,, dest, ., internalArray, ., length, ), ;, dest, ., numElements, =, source, ., numElements, ;, dest, ., startIndex, =]
[startIndex, =, source, ., startIndex, ;, }, }, }, public, synchronized, ResizableDoubleArray, copy, (, ), {, final, ResizableDoubleArray, result, =]
[;, }, }, }, public, synchronized, ResizableDoubleArray, copy, (, ), {, final, ResizableDoubleArray, result, =, new, ResizableDoubleArray, (, ), ;]
[}, }, public, synchronized, ResizableDoubleArray, copy, (, ), {, final, ResizableDoubleArray, result, =, new, ResizableDoubleArray, (, ), ;, copy, (]
[public, synchronized, ResizableDoubleArray, copy, (, ), {, final, ResizableDoubleArray, result, =, new, ResizableDoubleArray, (, ), ;, copy, (, this, ,]
[(, ), {, final, ResizableDoubleArray, result, =, new, ResizableDoubleArray, (, ), ;, copy, (, this, ,, result, ), ;, return]
[,, result, ), ;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (]
[,, result, ), ;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (]
[), ;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (, object, ==]
[;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (, object, ==, this, ), {, return]
[boolean, equals, (, Object, object, ), {, if, (, object, ==, this, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, object, ), {, if, (, object, ==, this, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, object, ), {, if, (, object, ==, this, ), {, return, true, ;, }, if, (]
[object, ), {, if, (, object, ==, this, ), {, return, true, ;, }, if, (, object, instanceof, ResizableDoubleArray, ==]
[(, object, ==, this, ), {, return, true, ;, }, if, (, object, instanceof, ResizableDoubleArray, ==, false, ), {, return]
[{, return, true, ;, }, if, (, object, instanceof, ResizableDoubleArray, ==, false, ), {, return, false, ;, }, synchronized, (]
[if, (, object, instanceof, ResizableDoubleArray, ==, false, ), {, return, false, ;, }, synchronized, (, this, ), {, synchronized, (]
[false, ), {, return, false, ;, }, synchronized, (, this, ), {, synchronized, (, object, ), {, boolean, result, =]
[}, synchronized, (, this, ), {, synchronized, (, object, ), {, boolean, result, =, true, ;, final, ResizableDoubleArray, other, =]
[this, ), {, synchronized, (, object, ), {, boolean, result, =, true, ;, final, ResizableDoubleArray, other, =, (, ResizableDoubleArray, )]
[{, synchronized, (, object, ), {, boolean, result, =, true, ;, final, ResizableDoubleArray, other, =, (, ResizableDoubleArray, ), object, ;]
[(, object, ), {, boolean, result, =, true, ;, final, ResizableDoubleArray, other, =, (, ResizableDoubleArray, ), object, ;, result, =]
[(, object, ), {, boolean, result, =, true, ;, final, ResizableDoubleArray, other, =, (, ResizableDoubleArray, ), object, ;, result, =]
[), {, boolean, result, =, true, ;, final, ResizableDoubleArray, other, =, (, ResizableDoubleArray, ), object, ;, result, =, result, &&]
[{, boolean, result, =, true, ;, final, ResizableDoubleArray, other, =, (, ResizableDoubleArray, ), object, ;, result, =, result, &&, (]
[{, boolean, result, =, true, ;, final, ResizableDoubleArray, other, =, (, ResizableDoubleArray, ), object, ;, result, =, result, &&, (]
[{, boolean, result, =, true, ;, final, ResizableDoubleArray, other, =, (, ResizableDoubleArray, ), object, ;, result, =, result, &&, (]
[true, ;, final, ResizableDoubleArray, other, =, (, ResizableDoubleArray, ), object, ;, result, =, result, &&, (, other, ., contractionCriterion, ==]
[ResizableDoubleArray, other, =, (, ResizableDoubleArray, ), object, ;, result, =, result, &&, (, other, ., contractionCriterion, ==, contractionCriterion, ), ;]
[=, (, ResizableDoubleArray, ), object, ;, result, =, result, &&, (, other, ., contractionCriterion, ==, contractionCriterion, ), ;, result, =]
[=, (, ResizableDoubleArray, ), object, ;, result, =, result, &&, (, other, ., contractionCriterion, ==, contractionCriterion, ), ;, result, =]
[ResizableDoubleArray, ), object, ;, result, =, result, &&, (, other, ., contractionCriterion, ==, contractionCriterion, ), ;, result, =, result, &&]
[), object, ;, result, =, result, &&, (, other, ., contractionCriterion, ==, contractionCriterion, ), ;, result, =, result, &&, (]
[), object, ;, result, =, result, &&, (, other, ., contractionCriterion, ==, contractionCriterion, ), ;, result, =, result, &&, (]
[), object, ;, result, =, result, &&, (, other, ., contractionCriterion, ==, contractionCriterion, ), ;, result, =, result, &&, (]
[=, result, &&, (, other, ., contractionCriterion, ==, contractionCriterion, ), ;, result, =, result, &&, (, other, ., expansionFactor, ==]
[(, other, ., contractionCriterion, ==, contractionCriterion, ), ;, result, =, result, &&, (, other, ., expansionFactor, ==, expansionFactor, ), ;]
[., contractionCriterion, ==, contractionCriterion, ), ;, result, =, result, &&, (, other, ., expansionFactor, ==, expansionFactor, ), ;, result, =]
[., contractionCriterion, ==, contractionCriterion, ), ;, result, =, result, &&, (, other, ., expansionFactor, ==, expansionFactor, ), ;, result, =]
[==, contractionCriterion, ), ;, result, =, result, &&, (, other, ., expansionFactor, ==, expansionFactor, ), ;, result, =, result, &&]
[contractionCriterion, ), ;, result, =, result, &&, (, other, ., expansionFactor, ==, expansionFactor, ), ;, result, =, result, &&, (]
[contractionCriterion, ), ;, result, =, result, &&, (, other, ., expansionFactor, ==, expansionFactor, ), ;, result, =, result, &&, (]
[contractionCriterion, ), ;, result, =, result, &&, (, other, ., expansionFactor, ==, expansionFactor, ), ;, result, =, result, &&, (]
[=, result, &&, (, other, ., expansionFactor, ==, expansionFactor, ), ;, result, =, result, &&, (, other, ., expansionMode, ==]
[(, other, ., expansionFactor, ==, expansionFactor, ), ;, result, =, result, &&, (, other, ., expansionMode, ==, expansionMode, ), ;]
[., expansionFactor, ==, expansionFactor, ), ;, result, =, result, &&, (, other, ., expansionMode, ==, expansionMode, ), ;, result, =]
[., expansionFactor, ==, expansionFactor, ), ;, result, =, result, &&, (, other, ., expansionMode, ==, expansionMode, ), ;, result, =]
[==, expansionFactor, ), ;, result, =, result, &&, (, other, ., expansionMode, ==, expansionMode, ), ;, result, =, result, &&]
[expansionFactor, ), ;, result, =, result, &&, (, other, ., expansionMode, ==, expansionMode, ), ;, result, =, result, &&, (]
[expansionFactor, ), ;, result, =, result, &&, (, other, ., expansionMode, ==, expansionMode, ), ;, result, =, result, &&, (]
[expansionFactor, ), ;, result, =, result, &&, (, other, ., expansionMode, ==, expansionMode, ), ;, result, =, result, &&, (]
[=, result, &&, (, other, ., expansionMode, ==, expansionMode, ), ;, result, =, result, &&, (, other, ., numElements, ==]
[(, other, ., expansionMode, ==, expansionMode, ), ;, result, =, result, &&, (, other, ., numElements, ==, numElements, ), ;]
[., expansionMode, ==, expansionMode, ), ;, result, =, result, &&, (, other, ., numElements, ==, numElements, ), ;, result, =]
[., expansionMode, ==, expansionMode, ), ;, result, =, result, &&, (, other, ., numElements, ==, numElements, ), ;, result, =]
[==, expansionMode, ), ;, result, =, result, &&, (, other, ., numElements, ==, numElements, ), ;, result, =, result, &&]
[expansionMode, ), ;, result, =, result, &&, (, other, ., numElements, ==, numElements, ), ;, result, =, result, &&, (]
[expansionMode, ), ;, result, =, result, &&, (, other, ., numElements, ==, numElements, ), ;, result, =, result, &&, (]
[expansionMode, ), ;, result, =, result, &&, (, other, ., numElements, ==, numElements, ), ;, result, =, result, &&, (]
[=, result, &&, (, other, ., numElements, ==, numElements, ), ;, result, =, result, &&, (, other, ., startIndex, ==]
[., numElements, ==, numElements, ), ;, result, =, result, &&, (, other, ., startIndex, ==, startIndex, ), ;, if, (]
[numElements, ==, numElements, ), ;, result, =, result, &&, (, other, ., startIndex, ==, startIndex, ), ;, if, (, !]
[;, result, =, result, &&, (, other, ., startIndex, ==, startIndex, ), ;, if, (, !, result, ), {, return]
[other, ., startIndex, ==, startIndex, ), ;, if, (, !, result, ), {, return, false, ;, }, else, {, return]
[other, ., startIndex, ==, startIndex, ), ;, if, (, !, result, ), {, return, false, ;, }, else, {, return]
[startIndex, ), ;, if, (, !, result, ), {, return, false, ;, }, else, {, return, Arrays, ., equals, (]
[;, if, (, !, result, ), {, return, false, ;, }, else, {, return, Arrays, ., equals, (, internalArray, ,]
[;, if, (, !, result, ), {, return, false, ;, }, else, {, return, Arrays, ., equals, (, internalArray, ,]
[;, }, }, }, }, @, Override, public, synchronized, int, hashCode, (, ), {, final, int, [, ], hashData, =]
[}, }, @, Override, public, synchronized, int, hashCode, (, ), {, final, int, [, ], hashData, =, new, int, []
[Override, public, synchronized, int, hashCode, (, ), {, final, int, [, ], hashData, =, new, int, [, 6, ], ;]
[Override, public, synchronized, int, hashCode, (, ), {, final, int, [, ], hashData, =, new, int, [, 6, ], ;]
[synchronized, int, hashCode, (, ), {, final, int, [, ], hashData, =, new, int, [, 6, ], ;, hashData, []
[(, ), {, final, int, [, ], hashData, =, new, int, [, 6, ], ;, hashData, [, 0, ], =]
[(, ), {, final, int, [, ], hashData, =, new, int, [, 6, ], ;, hashData, [, 0, ], =]
[(, ), {, final, int, [, ], hashData, =, new, int, [, 6, ], ;, hashData, [, 0, ], =]
[int, [, ], hashData, =, new, int, [, 6, ], ;, hashData, [, 0, ], =, Double, ., valueOf, (]
[[, 6, ], ;, hashData, [, 0, ], =, Double, ., valueOf, (, expansionFactor, ), ., hashCode, (, ), ;]
[[, 6, ], ;, hashData, [, 0, ], =, Double, ., valueOf, (, expansionFactor, ), ., hashCode, (, ), ;]
[], ;, hashData, [, 0, ], =, Double, ., valueOf, (, expansionFactor, ), ., hashCode, (, ), ;, hashData, []
[[, 0, ], =, Double, ., valueOf, (, expansionFactor, ), ., hashCode, (, ), ;, hashData, [, 1, ], =]
[[, 0, ], =, Double, ., valueOf, (, expansionFactor, ), ., hashCode, (, ), ;, hashData, [, 1, ], =]
[[, 0, ], =, Double, ., valueOf, (, expansionFactor, ), ., hashCode, (, ), ;, hashData, [, 1, ], =]
[Double, ., valueOf, (, expansionFactor, ), ., hashCode, (, ), ;, hashData, [, 1, ], =, Double, ., valueOf, (]
[hashCode, (, ), ;, hashData, [, 1, ], =, Double, ., valueOf, (, contractionCriterion, ), ., hashCode, (, ), ;]
[hashCode, (, ), ;, hashData, [, 1, ], =, Double, ., valueOf, (, contractionCriterion, ), ., hashCode, (, ), ;]
[), ;, hashData, [, 1, ], =, Double, ., valueOf, (, contractionCriterion, ), ., hashCode, (, ), ;, hashData, []
[[, 1, ], =, Double, ., valueOf, (, contractionCriterion, ), ., hashCode, (, ), ;, hashData, [, 2, ], =]
[[, 1, ], =, Double, ., valueOf, (, contractionCriterion, ), ., hashCode, (, ), ;, hashData, [, 2, ], =]
[valueOf, (, contractionCriterion, ), ., hashCode, (, ), ;, hashData, [, 2, ], =, expansionMode, ., hashCode, (, ), ;]
[valueOf, (, contractionCriterion, ), ., hashCode, (, ), ;, hashData, [, 2, ], =, expansionMode, ., hashCode, (, ), ;]
[contractionCriterion, ), ., hashCode, (, ), ;, hashData, [, 2, ], =, expansionMode, ., hashCode, (, ), ;, hashData, []
[hashCode, (, ), ;, hashData, [, 2, ], =, expansionMode, ., hashCode, (, ), ;, hashData, [, 3, ], =]
[hashCode, (, ), ;, hashData, [, 2, ], =, expansionMode, ., hashCode, (, ), ;, hashData, [, 3, ], =]
[hashData, [, 2, ], =, expansionMode, ., hashCode, (, ), ;, hashData, [, 3, ], =, Arrays, ., hashCode, (]
[], =, expansionMode, ., hashCode, (, ), ;, hashData, [, 3, ], =, Arrays, ., hashCode, (, internalArray, ), ;]
[], =, expansionMode, ., hashCode, (, ), ;, hashData, [, 3, ], =, Arrays, ., hashCode, (, internalArray, ), ;]
[expansionMode, ., hashCode, (, ), ;, hashData, [, 3, ], =, Arrays, ., hashCode, (, internalArray, ), ;, hashData, []
[(, ), ;, hashData, [, 3, ], =, Arrays, ., hashCode, (, internalArray, ), ;, hashData, [, 4, ], =]
[;, hashData, [, 3, ], =, Arrays, ., hashCode, (, internalArray, ), ;, hashData, [, 4, ], =, numElements, ;]
[;, hashData, [, 3, ], =, Arrays, ., hashCode, (, internalArray, ), ;, hashData, [, 4, ], =, numElements, ;]
[[, 3, ], =, Arrays, ., hashCode, (, internalArray, ), ;, hashData, [, 4, ], =, numElements, ;, hashData, []
[=, Arrays, ., hashCode, (, internalArray, ), ;, hashData, [, 4, ], =, numElements, ;, hashData, [, 5, ], =]
[hashCode, (, internalArray, ), ;, hashData, [, 4, ], =, numElements, ;, hashData, [, 5, ], =, startIndex, ;, return]
[hashCode, (, internalArray, ), ;, hashData, [, 4, ], =, numElements, ;, hashData, [, 5, ], =, startIndex, ;, return]
[;, hashData, [, 4, ], =, numElements, ;, hashData, [, 5, ], =, startIndex, ;, return, Arrays, ., hashCode, (]
