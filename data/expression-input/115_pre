[private, AbstractCompiler, compiler, ;, private, Map, <, Node, ,, VariableVisibility, >, visibilityByDeclaringNameNode, ;, public, VariableVisibilityAnalysis, (, AbstractCompiler, compiler, ), {]
[private, AbstractCompiler, compiler, ;, private, Map, <, Node, ,, VariableVisibility, >, visibilityByDeclaringNameNode, ;, public, VariableVisibilityAnalysis, (, AbstractCompiler, compiler, ), {]
[private, Map, <, Node, ,, VariableVisibility, >, visibilityByDeclaringNameNode, ;, public, VariableVisibilityAnalysis, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[<, Node, ,, VariableVisibility, >, visibilityByDeclaringNameNode, ;, public, VariableVisibilityAnalysis, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[,, VariableVisibility, >, visibilityByDeclaringNameNode, ;, public, VariableVisibilityAnalysis, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, visibilityByDeclaringNameNode, =]
[,, VariableVisibility, >, visibilityByDeclaringNameNode, ;, public, VariableVisibilityAnalysis, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, visibilityByDeclaringNameNode, =]
[visibilityByDeclaringNameNode, =, Maps, ., newHashMap, (, ), ;, }, public, VariableVisibility, getVariableVisibility, (, Node, declaringNameNode, ), {, Node, parent, =]
[visibilityByDeclaringNameNode, =, Maps, ., newHashMap, (, ), ;, }, public, VariableVisibility, getVariableVisibility, (, Node, declaringNameNode, ), {, Node, parent, =]
[), ;, }, public, VariableVisibility, getVariableVisibility, (, Node, declaringNameNode, ), {, Node, parent, =, declaringNameNode, ., getParent, (, ), ;]
[), ;, }, public, VariableVisibility, getVariableVisibility, (, Node, declaringNameNode, ), {, Node, parent, =, declaringNameNode, ., getParent, (, ), ;]
[VariableVisibility, getVariableVisibility, (, Node, declaringNameNode, ), {, Node, parent, =, declaringNameNode, ., getParent, (, ), ;, Preconditions, ., checkArgument, (]
[VariableVisibility, getVariableVisibility, (, Node, declaringNameNode, ), {, Node, parent, =, declaringNameNode, ., getParent, (, ), ;, Preconditions, ., checkArgument, (]
[VariableVisibility, getVariableVisibility, (, Node, declaringNameNode, ), {, Node, parent, =, declaringNameNode, ., getParent, (, ), ;, Preconditions, ., checkArgument, (]
[VariableVisibility, getVariableVisibility, (, Node, declaringNameNode, ), {, Node, parent, =, declaringNameNode, ., getParent, (, ), ;, Preconditions, ., checkArgument, (]
[{, Node, parent, =, declaringNameNode, ., getParent, (, ), ;, Preconditions, ., checkArgument, (, parent, ., isVar, (, ), ||]
[{, Node, parent, =, declaringNameNode, ., getParent, (, ), ;, Preconditions, ., checkArgument, (, parent, ., isVar, (, ), ||]
[getParent, (, ), ;, Preconditions, ., checkArgument, (, parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ||]
[getParent, (, ), ;, Preconditions, ., checkArgument, (, parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ||]
[parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ||, parent, ., isParamList, (, ), ), ;, return]
[parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ||, parent, ., isParamList, (, ), ), ;, return]
[), ||, parent, ., isFunction, (, ), ||, parent, ., isParamList, (, ), ), ;, return, visibilityByDeclaringNameNode, ., get, (]
[declaringNameNode, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,]
[Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;]
[Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;]
[root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (]
[{, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[callback, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var, variable, :]
[., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var, variable, :]
[root, ,, callback, ), ;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =]
[root, ,, callback, ), ;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =]
[;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences, (]
[getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences, (, variable, ), ;, VariableVisibility, visibility, ;, if, (]
[), ), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences, (, variable, ), ;, VariableVisibility, visibility, ;, if, (, variableIsParameter, (]
[referenceCollection, =, callback, ., getReferences, (, variable, ), ;, VariableVisibility, visibility, ;, if, (, variableIsParameter, (, variable, ), ), {]
[callback, ., getReferences, (, variable, ), ;, VariableVisibility, visibility, ;, if, (, variableIsParameter, (, variable, ), ), {, visibility, =]
[callback, ., getReferences, (, variable, ), ;, VariableVisibility, visibility, ;, if, (, variableIsParameter, (, variable, ), ), {, visibility, =]
[visibility, ;, if, (, variableIsParameter, (, variable, ), ), {, visibility, =, VariableVisibility, ., PARAMETER, ;, }, else, if, (]
[visibility, ;, if, (, variableIsParameter, (, variable, ), ), {, visibility, =, VariableVisibility, ., PARAMETER, ;, }, else, if, (]
[{, visibility, =, VariableVisibility, ., PARAMETER, ;, }, else, if, (, variable, ., isLocal, (, ), ), {, if, (]
[{, visibility, =, VariableVisibility, ., PARAMETER, ;, }, else, if, (, variable, ., isLocal, (, ), ), {, if, (]
[}, else, if, (, variable, ., isLocal, (, ), ), {, if, (, referenceCollection, ., isEscaped, (, ), ), {]
[if, (, variable, ., isLocal, (, ), ), {, if, (, referenceCollection, ., isEscaped, (, ), ), {, visibility, =]
[if, (, variable, ., isLocal, (, ), ), {, if, (, referenceCollection, ., isEscaped, (, ), ), {, visibility, =]
[), {, if, (, referenceCollection, ., isEscaped, (, ), ), {, visibility, =, VariableVisibility, ., CAPTURED_LOCAL, ;, }, else, {]
[if, (, referenceCollection, ., isEscaped, (, ), ), {, visibility, =, VariableVisibility, ., CAPTURED_LOCAL, ;, }, else, {, visibility, =]
[if, (, referenceCollection, ., isEscaped, (, ), ), {, visibility, =, VariableVisibility, ., CAPTURED_LOCAL, ;, }, else, {, visibility, =]
[visibility, =, VariableVisibility, ., CAPTURED_LOCAL, ;, }, else, {, visibility, =, VariableVisibility, ., LOCAL, ;, }, }, else, if, (]
[visibility, =, VariableVisibility, ., CAPTURED_LOCAL, ;, }, else, {, visibility, =, VariableVisibility, ., LOCAL, ;, }, }, else, if, (]
[else, {, visibility, =, VariableVisibility, ., LOCAL, ;, }, }, else, if, (, variable, ., isGlobal, (, ), ), {]
[visibility, =, VariableVisibility, ., LOCAL, ;, }, }, else, if, (, variable, ., isGlobal, (, ), ), {, visibility, =]
[visibility, =, VariableVisibility, ., LOCAL, ;, }, }, else, if, (, variable, ., isGlobal, (, ), ), {, visibility, =]
[else, if, (, variable, ., isGlobal, (, ), ), {, visibility, =, VariableVisibility, ., GLOBAL, ;, }, else, {, throw]
[variable, ., isGlobal, (, ), ), {, visibility, =, VariableVisibility, ., GLOBAL, ;, }, else, {, throw, new, IllegalStateException, (]
[variable, ., isGlobal, (, ), ), {, visibility, =, VariableVisibility, ., GLOBAL, ;, }, else, {, throw, new, IllegalStateException, (]
[isGlobal, (, ), ), {, visibility, =, VariableVisibility, ., GLOBAL, ;, }, else, {, throw, new, IllegalStateException, (, "Un-handled variable visibility for ", +]
[{, visibility, =, VariableVisibility, ., GLOBAL, ;, }, else, {, throw, new, IllegalStateException, (, "Un-handled variable visibility for ", +, variable, ), ;, }]
[{, visibility, =, VariableVisibility, ., GLOBAL, ;, }, else, {, throw, new, IllegalStateException, (, "Un-handled variable visibility for ", +, variable, ), ;, }]
[., GLOBAL, ;, }, else, {, throw, new, IllegalStateException, (, "Un-handled variable visibility for ", +, variable, ), ;, }, visibilityByDeclaringNameNode, ., put, (]
[., GLOBAL, ;, }, else, {, throw, new, IllegalStateException, (, "Un-handled variable visibility for ", +, variable, ), ;, }, visibilityByDeclaringNameNode, ., put, (]
[throw, new, IllegalStateException, (, "Un-handled variable visibility for ", +, variable, ), ;, }, visibilityByDeclaringNameNode, ., put, (, variable, ., getNameNode, (, ), ,]
[(, ), ,, visibility, ), ;, }, }, private, static, boolean, variableIsParameter, (, Var, variable, ), {, Node, variableParent, =]
[(, ), ,, visibility, ), ;, }, }, private, static, boolean, variableIsParameter, (, Var, variable, ), {, Node, variableParent, =]
[}, private, static, boolean, variableIsParameter, (, Var, variable, ), {, Node, variableParent, =, variable, ., getParentNode, (, ), ;, return]
[}, private, static, boolean, variableIsParameter, (, Var, variable, ), {, Node, variableParent, =, variable, ., getParentNode, (, ), ;, return]
[}, private, static, boolean, variableIsParameter, (, Var, variable, ), {, Node, variableParent, =, variable, ., getParentNode, (, ), ;, return]
[static, boolean, variableIsParameter, (, Var, variable, ), {, Node, variableParent, =, variable, ., getParentNode, (, ), ;, return, variableParent, !=]
[variableIsParameter, (, Var, variable, ), {, Node, variableParent, =, variable, ., getParentNode, (, ), ;, return, variableParent, !=, null, &&]
[variableIsParameter, (, Var, variable, ), {, Node, variableParent, =, variable, ., getParentNode, (, ), ;, return, variableParent, !=, null, &&]
