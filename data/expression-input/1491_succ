[=, new, ArrayList, <, T, >, (, ), ;, this, ., topDiagonal, =, new, ArrayList, <, T, [, ], >]
[., abscissae, =, new, ArrayList, <, T, >, (, ), ;, this, ., topDiagonal, =, new, ArrayList, <, T, []
[;, this, ., topDiagonal, =, new, ArrayList, <, T, [, ], >, (, ), ;, this, ., bottomDiagonal, =, new]
[=, new, ArrayList, <, T, [, ], >, (, ), ;, this, ., bottomDiagonal, =, new, ArrayList, <, T, []
[., topDiagonal, =, new, ArrayList, <, T, [, ], >, (, ), ;, this, ., bottomDiagonal, =, new, ArrayList, <]
[;, this, ., bottomDiagonal, =, new, ArrayList, <, T, [, ], >, (, ), ;, }, public, void, addSamplePoint, (]
[=, new, ArrayList, <, T, [, ], >, (, ), ;, }, public, void, addSamplePoint, (, final, T, x, ,]
[., bottomDiagonal, =, new, ArrayList, <, T, [, ], >, (, ), ;, }, public, void, addSamplePoint, (, final, T]
[;, }, public, void, addSamplePoint, (, final, T, x, ,, final, T, [, ], ..., value, ), throws, ZeroException, ,]
[;, T, factorial, =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0]
[., checkNotNull, (, x, ), ;, T, factorial, =, x, ., getField, (, ), ., getOne, (, ), ;, for]
[), ;, T, factorial, =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, value, ., length, ;, ++, i, ), {, final, T]
[., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <, value, ., length, ;, ++, i]
[., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <, value, .]
[;, i, <, value, ., length, ;, ++, i, ), {, final, T, [, ], y, =, value, [, i]
[;, ++, i, ), {, final, T, [, ], y, =, value, [, i, ], ., clone, (, ), ;]
[<, value, ., length, ;, ++, i, ), {, final, T, [, ], y, =, value, [, i, ], .]
[;, ++, i, ), {, final, T, [, ], y, =, value, [, i, ], ., clone, (, ), ;]
[., length, ;, ++, i, ), {, final, T, [, ], y, =, value, [, i, ], ., clone, (]
[), {, final, T, [, ], y, =, value, [, i, ], ., clone, (, ), ;, if, (, i]
[), {, final, T, [, ], y, =, value, [, i, ], ., clone, (, ), ;, if, (, i]
[;, if, (, i, >, 1, ), {, factorial, =, factorial, ., multiply, (, i, ), ;, final, T, inv]
[., clone, (, ), ;, if, (, i, >, 1, ), {, factorial, =, factorial, ., multiply, (, i, )]
[[, i, ], ., clone, (, ), ;, if, (, i, >, 1, ), {, factorial, =, factorial, ., multiply]
[], ., clone, (, ), ;, if, (, i, >, 1, ), {, factorial, =, factorial, ., multiply, (, i]
[), {, factorial, =, factorial, ., multiply, (, i, ), ;, final, T, inv, =, factorial, ., reciprocal, (, )]
[>, 1, ), {, factorial, =, factorial, ., multiply, (, i, ), ;, final, T, inv, =, factorial, ., reciprocal]
[), {, factorial, =, factorial, ., multiply, (, i, ), ;, final, T, inv, =, factorial, ., reciprocal, (, )]
[=, factorial, ., multiply, (, i, ), ;, final, T, inv, =, factorial, ., reciprocal, (, ), ;, for, (]
[;, final, T, inv, =, factorial, ., reciprocal, (, ), ;, for, (, int, j, =, 0, ;, j, <]
[., multiply, (, i, ), ;, final, T, inv, =, factorial, ., reciprocal, (, ), ;, for, (, int, j]
[), ;, final, T, inv, =, factorial, ., reciprocal, (, ), ;, for, (, int, j, =, 0, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, y, ., length, ;, ++, j, ), {, y, []
[., reciprocal, (, ), ;, for, (, int, j, =, 0, ;, j, <, y, ., length, ;, ++, j]
[;, j, <, y, ., length, ;, ++, j, ), {, y, [, j, ], =, y, [, j, ]]
[;, ++, j, ), {, y, [, j, ], =, y, [, j, ], ., multiply, (, inv, ), ;]
[<, y, ., length, ;, ++, j, ), {, y, [, j, ], =, y, [, j, ], ., multiply]
[;, ++, j, ), {, y, [, j, ], =, y, [, j, ], ., multiply, (, inv, ), ;]
[., length, ;, ++, j, ), {, y, [, j, ], =, y, [, j, ], ., multiply, (, inv]
[), {, y, [, j, ], =, y, [, j, ], ., multiply, (, inv, ), ;, }, }, final]
[), {, y, [, j, ], =, y, [, j, ], ., multiply, (, inv, ), ;, }, }, final]
[=, y, [, j, ], ., multiply, (, inv, ), ;, }, }, final, int, n, =, abscissae, ., size]
[[, j, ], =, y, [, j, ], ., multiply, (, inv, ), ;, }, }, final, int, n, =]
[], =, y, [, j, ], ., multiply, (, inv, ), ;, }, }, final, int, n, =, abscissae, .]
[;, }, }, final, int, n, =, abscissae, ., size, (, ), ;, bottomDiagonal, ., add, (, n, -, i]
[., multiply, (, inv, ), ;, }, }, final, int, n, =, abscissae, ., size, (, ), ;, bottomDiagonal, .]
[[, j, ], ., multiply, (, inv, ), ;, }, }, final, int, n, =, abscissae, ., size, (, )]
[], ., multiply, (, inv, ), ;, }, }, final, int, n, =, abscissae, ., size, (, ), ;, bottomDiagonal]
[), ;, }, }, final, int, n, =, abscissae, ., size, (, ), ;, bottomDiagonal, ., add, (, n, -]
[;, bottomDiagonal, ., add, (, n, -, i, ,, y, ), ;, T, [, ], bottom0, =, y, ;, for]
[., size, (, ), ;, bottomDiagonal, ., add, (, n, -, i, ,, y, ), ;, T, [, ], bottom0]
[;, T, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;, j, <, n, ;, ++]
[., add, (, n, -, i, ,, y, ), ;, T, [, ], bottom0, =, y, ;, for, (, int]
[,, y, ), ;, T, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;, j, <]
[-, i, ,, y, ), ;, T, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;]
[,, y, ), ;, T, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;, j, <]
[), ;, T, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;, j, <, n, ;]
[;, for, (, int, j, =, i, ;, j, <, n, ;, ++, j, ), {, final, T, [, ]]
[;, j, <, n, ;, ++, j, ), {, final, T, [, ], bottom1, =, bottomDiagonal, ., get, (, n]
[;, ++, j, ), {, final, T, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -, (, j, +]
[<, n, ;, ++, j, ), {, final, T, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -, (]
[;, ++, j, ), {, final, T, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -, (, j, +]
[), {, final, T, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -, (, j, +, 1, ), )]
[), {, final, T, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -, (, j, +, 1, ), )]
[;, if, (, x, ., equals, (, abscissae, ., get, (, n, -, (, j, +, 1, ), ), )]
[., get, (, n, -, (, j, +, 1, ), ), ;, if, (, x, ., equals, (, abscissae, .]
[), ;, if, (, x, ., equals, (, abscissae, ., get, (, n, -, (, j, +, 1, ), )]
[-, (, j, +, 1, ), ), ;, if, (, x, ., equals, (, abscissae, ., get, (, n, -]
[), ;, if, (, x, ., equals, (, abscissae, ., get, (, n, -, (, j, +, 1, ), )]
[), ), ;, if, (, x, ., equals, (, abscissae, ., get, (, n, -, (, j, +, 1, )]
[+, 1, ), ), ;, if, (, x, ., equals, (, abscissae, ., get, (, n, -, (, j, +]
[), ), ;, if, (, x, ., equals, (, abscissae, ., get, (, n, -, (, j, +, 1, )]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, final, T, inv, =, x, .]
[., equals, (, abscissae, ., get, (, n, -, (, j, +, 1, ), ), ), ), {, throw, new]
[), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, final, T, inv, =, x]
[., get, (, n, -, (, j, +, 1, ), ), ), ), {, throw, new, ZeroException, (, LocalizedFormats, .]
[), ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, final, T, inv, =]
[-, (, j, +, 1, ), ), ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, )]
[), ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, final, T, inv, =]
[), ), ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, final, T, inv]
[+, 1, ), ), ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, final]
[), ), ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, final, T, inv]
[;, }, final, T, inv, =, x, ., subtract, (, abscissae, ., get, (, n, -, (, j, +, 1]
[,, x, ), ;, }, final, T, inv, =, x, ., subtract, (, abscissae, ., get, (, n, -, (]
[., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, final, T, inv, =, x, ., subtract, (, abscissae, ., get, (, n]
[), ;, }, final, T, inv, =, x, ., subtract, (, abscissae, ., get, (, n, -, (, j, +]
[;, for, (, int, k, =, 0, ;, k, <, y, ., length, ;, ++, k, ), {, bottom1, []
[., reciprocal, (, ), ;, for, (, int, k, =, 0, ;, k, <, y, ., length, ;, ++, k]
[., subtract, (, abscissae, ., get, (, n, -, (, j, +, 1, ), ), ), ., reciprocal, (, )]
[), ., reciprocal, (, ), ;, for, (, int, k, =, 0, ;, k, <, y, ., length, ;, ++]
[., get, (, n, -, (, j, +, 1, ), ), ), ., reciprocal, (, ), ;, for, (, int]
[), ), ., reciprocal, (, ), ;, for, (, int, k, =, 0, ;, k, <, y, ., length, ;]
[-, (, j, +, 1, ), ), ), ., reciprocal, (, ), ;, for, (, int, k, =, 0, ;]
[), ), ., reciprocal, (, ), ;, for, (, int, k, =, 0, ;, k, <, y, ., length, ;]
[), ), ), ., reciprocal, (, ), ;, for, (, int, k, =, 0, ;, k, <, y, ., length]
[+, 1, ), ), ), ., reciprocal, (, ), ;, for, (, int, k, =, 0, ;, k, <, y]
[), ), ), ., reciprocal, (, ), ;, for, (, int, k, =, 0, ;, k, <, y, ., length]
[;, k, <, y, ., length, ;, ++, k, ), {, bottom1, [, k, ], =, inv, ., multiply, (]
[;, ++, k, ), {, bottom1, [, k, ], =, inv, ., multiply, (, bottom0, [, k, ], ., subtract]
[<, y, ., length, ;, ++, k, ), {, bottom1, [, k, ], =, inv, ., multiply, (, bottom0, []
[;, ++, k, ), {, bottom1, [, k, ], =, inv, ., multiply, (, bottom0, [, k, ], ., subtract]
[., length, ;, ++, k, ), {, bottom1, [, k, ], =, inv, ., multiply, (, bottom0, [, k, ]]
[), {, bottom1, [, k, ], =, inv, ., multiply, (, bottom0, [, k, ], ., subtract, (, bottom1, []
[), {, bottom1, [, k, ], =, inv, ., multiply, (, bottom0, [, k, ], ., subtract, (, bottom1, []
[=, inv, ., multiply, (, bottom0, [, k, ], ., subtract, (, bottom1, [, k, ], ), ), ;, }]
[[, k, ], =, inv, ., multiply, (, bottom0, [, k, ], ., subtract, (, bottom1, [, k, ], )]
[], =, inv, ., multiply, (, bottom0, [, k, ], ., subtract, (, bottom1, [, k, ], ), ), ;]
[;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;, abscissae, .]
[., multiply, (, bottom0, [, k, ], ., subtract, (, bottom1, [, k, ], ), ), ;, }, bottom0, =]
[), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;, abscissae]
[., subtract, (, bottom1, [, k, ], ), ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (]
[[, k, ], ., subtract, (, bottom1, [, k, ], ), ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal]
[], ., subtract, (, bottom1, [, k, ], ), ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add]
[), ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;]
[[, k, ], ), ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (]
[], ), ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), )]
[=, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;, abscissae, ., add, (, x]
[;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;, abscissae, ., add, (, x, ), ;]
[;, abscissae, ., add, (, x, ), ;, }, }, public, T, [, ], value, (, T, x, ), throws]
[., add, (, bottom0, ., clone, (, ), ), ;, abscissae, ., add, (, x, ), ;, }, }, public]
[), ;, abscissae, ., add, (, x, ), ;, }, }, public, T, [, ], value, (, T, x, )]
[., clone, (, ), ), ;, abscissae, ., add, (, x, ), ;, }, }, public, T, [, ], value]
[;, }, }, public, T, [, ], value, (, T, x, ), throws, NoDataException, ,, NullArgumentException, {, MathUtils, ., checkNotNull]
[., add, (, x, ), ;, }, }, public, T, [, ], value, (, T, x, ), throws, NoDataException, ,]
[), ;, }, }, public, T, [, ], value, (, T, x, ), throws, NoDataException, ,, NullArgumentException, {, MathUtils, .]
[;, if, (, abscissae, ., isEmpty, (, ), ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_INTERPOLATION_SAMPLE, ), ;, }]
[., checkNotNull, (, x, ), ;, if, (, abscissae, ., isEmpty, (, ), ), {, throw, new, NoDataException, (, LocalizedFormats]
[), ;, if, (, abscissae, ., isEmpty, (, ), ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_INTERPOLATION_SAMPLE, ), ;]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_INTERPOLATION_SAMPLE, ), ;, }, final, T, [, ], value, =, MathArrays, .]
[., isEmpty, (, ), ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_INTERPOLATION_SAMPLE, ), ;, }, final, T, [, ]]
[;, }, final, T, [, ], value, =, MathArrays, ., buildArray, (, x, ., getField, (, ), ,, topDiagonal, .]
[), ;, }, final, T, [, ], value, =, MathArrays, ., buildArray, (, x, ., getField, (, ), ,, topDiagonal]
[., EMPTY_INTERPOLATION_SAMPLE, ), ;, }, final, T, [, ], value, =, MathArrays, ., buildArray, (, x, ., getField, (, )]
[;, T, valueCoeff, =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0]
[., buildArray, (, x, ., getField, (, ), ,, topDiagonal, ., get, (, 0, ), ., length, ), ;, T]
[,, topDiagonal, ., get, (, 0, ), ., length, ), ;, T, valueCoeff, =, x, ., getField, (, ), .]
[., getField, (, ), ,, topDiagonal, ., get, (, 0, ), ., length, ), ;, T, valueCoeff, =, x, .]
[), ;, T, valueCoeff, =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =]
[., length, ), ;, T, valueCoeff, =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int]
[., get, (, 0, ), ., length, ), ;, T, valueCoeff, =, x, ., getField, (, ), ., getOne, (]
[), ., length, ), ;, T, valueCoeff, =, x, ., getField, (, ), ., getOne, (, ), ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {]
[., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;]
[., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, .]
[;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {, T, [, ], dividedDifference, =, topDiagonal, .]
[;, ++, i, ), {, T, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int]
[<, topDiagonal, ., size, (, ), ;, ++, i, ), {, T, [, ], dividedDifference, =, topDiagonal, ., get, (]
[;, ++, i, ), {, T, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int]
[., size, (, ), ;, ++, i, ), {, T, [, ], dividedDifference, =, topDiagonal, ., get, (, i, )]
[), {, T, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0]
[), {, T, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0]
[;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value, []
[., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++]
[), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value]
[;, k, <, value, ., length, ;, ++, k, ), {, value, [, k, ], =, value, [, k, ]]
[;, ++, k, ), {, value, [, k, ], =, value, [, k, ], ., add, (, dividedDifference, [, k]
[<, value, ., length, ;, ++, k, ), {, value, [, k, ], =, value, [, k, ], ., add]
[;, ++, k, ), {, value, [, k, ], =, value, [, k, ], ., add, (, dividedDifference, [, k]
[., length, ;, ++, k, ), {, value, [, k, ], =, value, [, k, ], ., add, (, dividedDifference]
[), {, value, [, k, ], =, value, [, k, ], ., add, (, dividedDifference, [, k, ], ., multiply]
[), {, value, [, k, ], =, value, [, k, ], ., add, (, dividedDifference, [, k, ], ., multiply]
[=, value, [, k, ], ., add, (, dividedDifference, [, k, ], ., multiply, (, valueCoeff, ), ), ;, }]
[[, k, ], =, value, [, k, ], ., add, (, dividedDifference, [, k, ], ., multiply, (, valueCoeff, )]
[], =, value, [, k, ], ., add, (, dividedDifference, [, k, ], ., multiply, (, valueCoeff, ), ), ;]
[;, }, final, T, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, ), ), ;, valueCoeff, =]
[., add, (, dividedDifference, [, k, ], ., multiply, (, valueCoeff, ), ), ;, }, final, T, deltaX, =, x]
[[, k, ], ., add, (, dividedDifference, [, k, ], ., multiply, (, valueCoeff, ), ), ;, }, final, T]
[], ., add, (, dividedDifference, [, k, ], ., multiply, (, valueCoeff, ), ), ;, }, final, T, deltaX, =]
[), ;, }, final, T, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, ), ), ;, valueCoeff]
[., multiply, (, valueCoeff, ), ), ;, }, final, T, deltaX, =, x, ., subtract, (, abscissae, ., get, (]
[[, k, ], ., multiply, (, valueCoeff, ), ), ;, }, final, T, deltaX, =, x, ., subtract, (, abscissae]
[], ., multiply, (, valueCoeff, ), ), ;, }, final, T, deltaX, =, x, ., subtract, (, abscissae, ., get]
[), ), ;, }, final, T, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, ), ), ;]
[;, valueCoeff, =, valueCoeff, ., multiply, (, deltaX, ), ;, }, return, value, ;, }, public, T, [, ], []
[., subtract, (, abscissae, ., get, (, i, ), ), ;, valueCoeff, =, valueCoeff, ., multiply, (, deltaX, ), ;]
[), ;, valueCoeff, =, valueCoeff, ., multiply, (, deltaX, ), ;, }, return, value, ;, }, public, T, [, ]]
[., get, (, i, ), ), ;, valueCoeff, =, valueCoeff, ., multiply, (, deltaX, ), ;, }, return, value, ;]
[), ), ;, valueCoeff, =, valueCoeff, ., multiply, (, deltaX, ), ;, }, return, value, ;, }, public, T, []
[=, valueCoeff, ., multiply, (, deltaX, ), ;, }, return, value, ;, }, public, T, [, ], [, ], derivatives]
[;, }, return, value, ;, }, public, T, [, ], [, ], derivatives, (, T, x, ,, int, order, )]
[., multiply, (, deltaX, ), ;, }, return, value, ;, }, public, T, [, ], [, ], derivatives, (, T]
[), ;, }, return, value, ;, }, public, T, [, ], [, ], derivatives, (, T, x, ,, int, order]
[;, }, public, T, [, ], [, ], derivatives, (, T, x, ,, int, order, ), throws, NoDataException, ,, NullArgumentException]
[;, if, (, abscissae, ., isEmpty, (, ), ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_INTERPOLATION_SAMPLE, ), ;, }]
[., checkNotNull, (, x, ), ;, if, (, abscissae, ., isEmpty, (, ), ), {, throw, new, NoDataException, (, LocalizedFormats]
[), ;, if, (, abscissae, ., isEmpty, (, ), ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_INTERPOLATION_SAMPLE, ), ;]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_INTERPOLATION_SAMPLE, ), ;, }, final, T, zero, =, x, ., getField, (]
[., isEmpty, (, ), ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_INTERPOLATION_SAMPLE, ), ;, }, final, T, zero, =]
[;, }, final, T, zero, =, x, ., getField, (, ), ., getZero, (, ), ;, final, T, one, =]
[), ;, }, final, T, zero, =, x, ., getField, (, ), ., getZero, (, ), ;, final, T, one]
[., EMPTY_INTERPOLATION_SAMPLE, ), ;, }, final, T, zero, =, x, ., getField, (, ), ., getZero, (, ), ;, final]
[;, final, T, one, =, x, ., getField, (, ), ., getOne, (, ), ;, final, T, [, ], tj]
[., getZero, (, ), ;, final, T, one, =, x, ., getField, (, ), ., getOne, (, ), ;, final]
[., getField, (, ), ., getZero, (, ), ;, final, T, one, =, x, ., getField, (, ), ., getOne]
[;, final, T, [, ], tj, =, MathArrays, ., buildArray, (, x, ., getField, (, ), ,, order, +, 1]
[., getOne, (, ), ;, final, T, [, ], tj, =, MathArrays, ., buildArray, (, x, ., getField, (, )]
[., getField, (, ), ., getOne, (, ), ;, final, T, [, ], tj, =, MathArrays, ., buildArray, (, x]
[;, tj, [, 0, ], =, zero, ;, for, (, int, i, =, 0, ;, i, <, order, ;, ++]
[., buildArray, (, x, ., getField, (, ), ,, order, +, 1, ), ;, tj, [, 0, ], =, zero]
[,, order, +, 1, ), ;, tj, [, 0, ], =, zero, ;, for, (, int, i, =, 0, ;]
[., getField, (, ), ,, order, +, 1, ), ;, tj, [, 0, ], =, zero, ;, for, (, int]
[), ;, tj, [, 0, ], =, zero, ;, for, (, int, i, =, 0, ;, i, <, order, ;]
[+, 1, ), ;, tj, [, 0, ], =, zero, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, tj, [, 0, ], =, zero, ;, for, (, int, i, =, 0, ;, i, <, order, ;]
[=, zero, ;, for, (, int, i, =, 0, ;, i, <, order, ;, ++, i, ), {, tj, []
[[, 0, ], =, zero, ;, for, (, int, i, =, 0, ;, i, <, order, ;, ++, i, )]
[], =, zero, ;, for, (, int, i, =, 0, ;, i, <, order, ;, ++, i, ), {, tj]
[;, for, (, int, i, =, 0, ;, i, <, order, ;, ++, i, ), {, tj, [, i, +]
[;, i, <, order, ;, ++, i, ), {, tj, [, i, +, 1, ], =, tj, [, i, ]]
[;, ++, i, ), {, tj, [, i, +, 1, ], =, tj, [, i, ], ., add, (, one]
[<, order, ;, ++, i, ), {, tj, [, i, +, 1, ], =, tj, [, i, ], ., add]
[;, ++, i, ), {, tj, [, i, +, 1, ], =, tj, [, i, ], ., add, (, one]
[), {, tj, [, i, +, 1, ], =, tj, [, i, ], ., add, (, one, ), ;, }]
[), {, tj, [, i, +, 1, ], =, tj, [, i, ], ., add, (, one, ), ;, }]
[=, tj, [, i, ], ., add, (, one, ), ;, }, final, T, [, ], [, ], derivatives, =]
[[, i, +, 1, ], =, tj, [, i, ], ., add, (, one, ), ;, }, final, T, []
[], =, tj, [, i, ], ., add, (, one, ), ;, }, final, T, [, ], [, ], derivatives]
[+, 1, ], =, tj, [, i, ], ., add, (, one, ), ;, }, final, T, [, ], []
[], =, tj, [, i, ], ., add, (, one, ), ;, }, final, T, [, ], [, ], derivatives]
[;, }, final, T, [, ], [, ], derivatives, =, MathArrays, ., buildArray, (, x, ., getField, (, ), ,]
[., add, (, one, ), ;, }, final, T, [, ], [, ], derivatives, =, MathArrays, ., buildArray, (, x]
[[, i, ], ., add, (, one, ), ;, }, final, T, [, ], [, ], derivatives, =, MathArrays, .]
[], ., add, (, one, ), ;, }, final, T, [, ], [, ], derivatives, =, MathArrays, ., buildArray, (]
[), ;, }, final, T, [, ], [, ], derivatives, =, MathArrays, ., buildArray, (, x, ., getField, (, )]
[;, final, T, [, ], valueCoeff, =, MathArrays, ., buildArray, (, x, ., getField, (, ), ,, order, +, 1]
[., buildArray, (, x, ., getField, (, ), ,, order, +, 1, ,, topDiagonal, ., get, (, 0, ), .]
[,, order, +, 1, ,, topDiagonal, ., get, (, 0, ), ., length, ), ;, final, T, [, ], valueCoeff]
[., getField, (, ), ,, order, +, 1, ,, topDiagonal, ., get, (, 0, ), ., length, ), ;, final]
[,, topDiagonal, ., get, (, 0, ), ., length, ), ;, final, T, [, ], valueCoeff, =, MathArrays, ., buildArray]
[+, 1, ,, topDiagonal, ., get, (, 0, ), ., length, ), ;, final, T, [, ], valueCoeff, =, MathArrays]
[,, topDiagonal, ., get, (, 0, ), ., length, ), ;, final, T, [, ], valueCoeff, =, MathArrays, ., buildArray]
[), ;, final, T, [, ], valueCoeff, =, MathArrays, ., buildArray, (, x, ., getField, (, ), ,, order, +]
[., length, ), ;, final, T, [, ], valueCoeff, =, MathArrays, ., buildArray, (, x, ., getField, (, ), ,]
[., get, (, 0, ), ., length, ), ;, final, T, [, ], valueCoeff, =, MathArrays, ., buildArray, (, x]
[), ., length, ), ;, final, T, [, ], valueCoeff, =, MathArrays, ., buildArray, (, x, ., getField, (, )]
[;, valueCoeff, [, 0, ], =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i]
[., buildArray, (, x, ., getField, (, ), ,, order, +, 1, ), ;, valueCoeff, [, 0, ], =, x]
[,, order, +, 1, ), ;, valueCoeff, [, 0, ], =, x, ., getField, (, ), ., getOne, (, )]
[., getField, (, ), ,, order, +, 1, ), ;, valueCoeff, [, 0, ], =, x, ., getField, (, )]
[), ;, valueCoeff, [, 0, ], =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int]
[+, 1, ), ;, valueCoeff, [, 0, ], =, x, ., getField, (, ), ., getOne, (, ), ;, for]
[), ;, valueCoeff, [, 0, ], =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int]
[=, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[[, 0, ], =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0]
[], =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {]
[., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;]
[., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, .]
[;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {, T, [, ], dividedDifference, =, topDiagonal, .]
[;, ++, i, ), {, T, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, final, T, deltaX]
[<, topDiagonal, ., size, (, ), ;, ++, i, ), {, T, [, ], dividedDifference, =, topDiagonal, ., get, (]
[;, ++, i, ), {, T, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, final, T, deltaX]
[., size, (, ), ;, ++, i, ), {, T, [, ], dividedDifference, =, topDiagonal, ., get, (, i, )]
[), {, T, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, final, T, deltaX, =, x, .]
[), {, T, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, final, T, deltaX, =, x, .]
[;, final, T, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, ), ), ;, for, (, int]
[., get, (, i, ), ;, final, T, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, )]
[), ;, final, T, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, ), ), ;, for, (]
[;, for, (, int, j, =, order, ;, j, >=, 0, ;, --, j, ), {, for, (, int, k]
[., subtract, (, abscissae, ., get, (, i, ), ), ;, for, (, int, j, =, order, ;, j, >=]
[), ;, for, (, int, j, =, order, ;, j, >=, 0, ;, --, j, ), {, for, (, int]
[., get, (, i, ), ), ;, for, (, int, j, =, order, ;, j, >=, 0, ;, --, j]
[), ), ;, for, (, int, j, =, order, ;, j, >=, 0, ;, --, j, ), {, for, (]
[;, j, >=, 0, ;, --, j, ), {, for, (, int, k, =, 0, ;, k, <, derivatives, []
[;, --, j, ), {, for, (, int, k, =, 0, ;, k, <, derivatives, [, j, ], ., length]
[>=, 0, ;, --, j, ), {, for, (, int, k, =, 0, ;, k, <, derivatives, [, j, ]]
[;, --, j, ), {, for, (, int, k, =, 0, ;, k, <, derivatives, [, j, ], ., length]
[), {, for, (, int, k, =, 0, ;, k, <, derivatives, [, j, ], ., length, ;, ++, k]
[), {, for, (, int, k, =, 0, ;, k, <, derivatives, [, j, ], ., length, ;, ++, k]
[;, k, <, derivatives, [, j, ], ., length, ;, ++, k, ), {, derivatives, [, j, ], [, k]
[;, ++, k, ), {, derivatives, [, j, ], [, k, ], =, derivatives, [, j, ], [, k, ]]
[<, derivatives, [, j, ], ., length, ;, ++, k, ), {, derivatives, [, j, ], [, k, ], =]
[;, ++, k, ), {, derivatives, [, j, ], [, k, ], =, derivatives, [, j, ], [, k, ]]
[., length, ;, ++, k, ), {, derivatives, [, j, ], [, k, ], =, derivatives, [, j, ], []
[[, j, ], ., length, ;, ++, k, ), {, derivatives, [, j, ], [, k, ], =, derivatives, []
[], ., length, ;, ++, k, ), {, derivatives, [, j, ], [, k, ], =, derivatives, [, j, ]]
[), {, derivatives, [, j, ], [, k, ], =, derivatives, [, j, ], [, k, ], ., add, (]
[), {, derivatives, [, j, ], [, k, ], =, derivatives, [, j, ], [, k, ], ., add, (]
[=, derivatives, [, j, ], [, k, ], ., add, (, dividedDifference, [, k, ], ., multiply, (, valueCoeff, []
[[, k, ], =, derivatives, [, j, ], [, k, ], ., add, (, dividedDifference, [, k, ], ., multiply]
[[, j, ], [, k, ], =, derivatives, [, j, ], [, k, ], ., add, (, dividedDifference, [, k]
[], [, k, ], =, derivatives, [, j, ], [, k, ], ., add, (, dividedDifference, [, k, ], .]
[], =, derivatives, [, j, ], [, k, ], ., add, (, dividedDifference, [, k, ], ., multiply, (, valueCoeff]
[;, }, valueCoeff, [, j, ], =, valueCoeff, [, j, ], ., multiply, (, deltaX, ), ;, if, (, j]
[., add, (, dividedDifference, [, k, ], ., multiply, (, valueCoeff, [, j, ], ), ), ;, }, valueCoeff, []
[[, k, ], ., add, (, dividedDifference, [, k, ], ., multiply, (, valueCoeff, [, j, ], ), ), ;]
[[, j, ], [, k, ], ., add, (, dividedDifference, [, k, ], ., multiply, (, valueCoeff, [, j, ]]
[], [, k, ], ., add, (, dividedDifference, [, k, ], ., multiply, (, valueCoeff, [, j, ], ), )]
[], ., add, (, dividedDifference, [, k, ], ., multiply, (, valueCoeff, [, j, ], ), ), ;, }, valueCoeff]
[), ;, }, valueCoeff, [, j, ], =, valueCoeff, [, j, ], ., multiply, (, deltaX, ), ;, if, (]
[., multiply, (, valueCoeff, [, j, ], ), ), ;, }, valueCoeff, [, j, ], =, valueCoeff, [, j, ]]
[[, k, ], ., multiply, (, valueCoeff, [, j, ], ), ), ;, }, valueCoeff, [, j, ], =, valueCoeff]
[], ., multiply, (, valueCoeff, [, j, ], ), ), ;, }, valueCoeff, [, j, ], =, valueCoeff, [, j]
[), ), ;, }, valueCoeff, [, j, ], =, valueCoeff, [, j, ], ., multiply, (, deltaX, ), ;, if]
[[, j, ], ), ), ;, }, valueCoeff, [, j, ], =, valueCoeff, [, j, ], ., multiply, (, deltaX]
[], ), ), ;, }, valueCoeff, [, j, ], =, valueCoeff, [, j, ], ., multiply, (, deltaX, ), ;]
[=, valueCoeff, [, j, ], ., multiply, (, deltaX, ), ;, if, (, j, >, 0, ), {, valueCoeff, []
[[, j, ], =, valueCoeff, [, j, ], ., multiply, (, deltaX, ), ;, if, (, j, >, 0, )]
[], =, valueCoeff, [, j, ], ., multiply, (, deltaX, ), ;, if, (, j, >, 0, ), {, valueCoeff]
[;, if, (, j, >, 0, ), {, valueCoeff, [, j, ], =, valueCoeff, [, j, ], ., add, (]
[., multiply, (, deltaX, ), ;, if, (, j, >, 0, ), {, valueCoeff, [, j, ], =, valueCoeff, []
[[, j, ], ., multiply, (, deltaX, ), ;, if, (, j, >, 0, ), {, valueCoeff, [, j, ]]
[], ., multiply, (, deltaX, ), ;, if, (, j, >, 0, ), {, valueCoeff, [, j, ], =, valueCoeff]
[), ;, if, (, j, >, 0, ), {, valueCoeff, [, j, ], =, valueCoeff, [, j, ], ., add]
[), {, valueCoeff, [, j, ], =, valueCoeff, [, j, ], ., add, (, tj, [, j, ], ., multiply]
[>, 0, ), {, valueCoeff, [, j, ], =, valueCoeff, [, j, ], ., add, (, tj, [, j, ]]
[), {, valueCoeff, [, j, ], =, valueCoeff, [, j, ], ., add, (, tj, [, j, ], ., multiply]
[=, valueCoeff, [, j, ], ., add, (, tj, [, j, ], ., multiply, (, valueCoeff, [, j, -, 1]
[[, j, ], =, valueCoeff, [, j, ], ., add, (, tj, [, j, ], ., multiply, (, valueCoeff, []
[], =, valueCoeff, [, j, ], ., add, (, tj, [, j, ], ., multiply, (, valueCoeff, [, j, -]
[;, }, }, }, return, derivatives, ;, }, }]
[., add, (, tj, [, j, ], ., multiply, (, valueCoeff, [, j, -, 1, ], ), ), ;, }]
[[, j, ], ., add, (, tj, [, j, ], ., multiply, (, valueCoeff, [, j, -, 1, ], )]
[], ., add, (, tj, [, j, ], ., multiply, (, valueCoeff, [, j, -, 1, ], ), ), ;]
[), ;, }, }, }, return, derivatives, ;, }, }]
[., multiply, (, valueCoeff, [, j, -, 1, ], ), ), ;, }, }, }, return, derivatives, ;, }, }]
[[, j, ], ., multiply, (, valueCoeff, [, j, -, 1, ], ), ), ;, }, }, }, return, derivatives]
[], ., multiply, (, valueCoeff, [, j, -, 1, ], ), ), ;, }, }, }, return, derivatives, ;, }]
[), ), ;, }, }, }, return, derivatives, ;, }, }]
[[, j, -, 1, ], ), ), ;, }, }, }, return, derivatives, ;, }, }]
[], ), ), ;, }, }, }, return, derivatives, ;, }, }]
[-, 1, ], ), ), ;, }, }, }, return, derivatives, ;, }, }]
[], ), ), ;, }, }, }, return, derivatives, ;, }, }]
[;, }, }]
