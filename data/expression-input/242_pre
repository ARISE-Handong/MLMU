[commons, ., math3, ., random, ., Well19937c, ;, public, class, ChiSquaredDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =]
[public, class, ChiSquaredDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =]
[class, ChiSquaredDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =, -]
[;, private, final, GammaDistribution, gamma, ;, private, final, double, solverAbsoluteAccuracy, ;, public, ChiSquaredDistribution, (, double, degreesOfFreedom, ), {, this, (]
[final, GammaDistribution, gamma, ;, private, final, double, solverAbsoluteAccuracy, ;, public, ChiSquaredDistribution, (, double, degreesOfFreedom, ), {, this, (, degreesOfFreedom, ,]
[this, (, degreesOfFreedom, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, ChiSquaredDistribution, (, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, this, (]
[), ;, }, public, ChiSquaredDistribution, (, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (, ), ,]
[}, public, ChiSquaredDistribution, (, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (, ), ,, degreesOfFreedom, ,]
[,, inverseCumAccuracy, ), ;, }, public, ChiSquaredDistribution, (, RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, super, (]
[;, }, public, ChiSquaredDistribution, (, RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;]
[public, ChiSquaredDistribution, (, RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;, gamma, =]
[RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;, gamma, =, new, GammaDistribution, (]
[RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;, gamma, =, new, GammaDistribution, (]
[,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;, gamma, =, new, GammaDistribution, (, degreesOfFreedom, /]
[degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;, gamma, =, new, GammaDistribution, (, degreesOfFreedom, /, 2, ,]
[inverseCumAccuracy, ), {, super, (, rng, ), ;, gamma, =, new, GammaDistribution, (, degreesOfFreedom, /, 2, ,, 2, ), ;]
[{, super, (, rng, ), ;, gamma, =, new, GammaDistribution, (, degreesOfFreedom, /, 2, ,, 2, ), ;, solverAbsoluteAccuracy, =]
[(, degreesOfFreedom, /, 2, ,, 2, ), ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return]
[(, degreesOfFreedom, /, 2, ,, 2, ), ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return]
[(, degreesOfFreedom, /, 2, ,, 2, ), ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return]
[), ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return, gamma, ., getShape, (, ), *]
[{, return, gamma, ., getShape, (, ), *, 2.0, ;, }, public, double, density, (, double, x, ), {, return]
[{, return, gamma, ., getShape, (, ), *, 2.0, ;, }, public, double, density, (, double, x, ), {, return]
[getShape, (, ), *, 2.0, ;, }, public, double, density, (, double, x, ), {, return, gamma, ., density, (]
[), {, return, gamma, ., density, (, x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, return]
[), {, return, gamma, ., density, (, x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, return]
[., density, (, x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, gamma, ., cumulativeProbability, (]
[), {, return, gamma, ., cumulativeProbability, (, x, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[}, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, return]
[}, public, double, getNumericalMean, (, ), {, return, getDegreesOfFreedom, (, ), ;, }, public, double, getNumericalVariance, (, ), {, return]
[}, public, double, getNumericalMean, (, ), {, return, getDegreesOfFreedom, (, ), ;, }, public, double, getNumericalVariance, (, ), {, return]
[double, getNumericalMean, (, ), {, return, getDegreesOfFreedom, (, ), ;, }, public, double, getNumericalVariance, (, ), {, return, 2, *]
[double, getNumericalVariance, (, ), {, return, 2, *, getDegreesOfFreedom, (, ), ;, }, public, double, getSupportLowerBound, (, ), {, return]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[}, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return]
[POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return]
[true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return]
