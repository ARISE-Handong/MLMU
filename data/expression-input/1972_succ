[;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, canModifyExterns, ;, RemoveUnusedNames, (, AbstractCompiler, compiler, ,, boolean, canModifyExterns, ), {]
[., getLogger, (, RemoveUnusedNames, ., class, ., getName, (, ), ), ;, private, final, AbstractCompiler, compiler, ;, private, final, boolean]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, canModifyExterns, ;, RemoveUnusedNames, (, AbstractCompiler, compiler, ,, boolean, canModifyExterns, )]
[., getName, (, ), ), ;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, canModifyExterns, ;, RemoveUnusedNames, (, AbstractCompiler, compiler]
[=, compiler, ;, this, ., canModifyExterns, =, canModifyExterns, ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node]
[., compiler, =, compiler, ;, this, ., canModifyExterns, =, canModifyExterns, ;, }, @, Override, public, void, process, (, Node, externRoot]
[;, this, ., canModifyExterns, =, canModifyExterns, ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, )]
[=, canModifyExterns, ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzeNameReferences, analyzer, =]
[., canModifyExterns, =, canModifyExterns, ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzeNameReferences]
[;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzeNameReferences, analyzer, =, new, AnalyzeNameReferences]
[;, analyzer, ., process, (, externRoot, ,, root, ), ;, removeUnusedProperties, (, analyzer, ., getGraph, (, ), ), ;, }]
[), ;, analyzer, ., process, (, externRoot, ,, root, ), ;, removeUnusedProperties, (, analyzer, ., getGraph, (, ), ), ;]
[;, removeUnusedProperties, (, analyzer, ., getGraph, (, ), ), ;, }, private, void, removeUnusedProperties, (, NameReferenceGraph, graph, ), {, for]
[., process, (, externRoot, ,, root, ), ;, removeUnusedProperties, (, analyzer, ., getGraph, (, ), ), ;, }, private, void]
[,, root, ), ;, removeUnusedProperties, (, analyzer, ., getGraph, (, ), ), ;, }, private, void, removeUnusedProperties, (, NameReferenceGraph, graph]
[), ;, removeUnusedProperties, (, analyzer, ., getGraph, (, ), ), ;, }, private, void, removeUnusedProperties, (, NameReferenceGraph, graph, ), {]
[;, }, private, void, removeUnusedProperties, (, NameReferenceGraph, graph, ), {, for, (, GraphNode, <, Name, ,, Reference, >, node, :]
[), ;, }, private, void, removeUnusedProperties, (, NameReferenceGraph, graph, ), {, for, (, GraphNode, <, Name, ,, Reference, >, node]
[., getGraph, (, ), ), ;, }, private, void, removeUnusedProperties, (, NameReferenceGraph, graph, ), {, for, (, GraphNode, <, Name]
[), {, Name, name, =, node, ., getValue, (, ), ;, NameInfo, nameInfo, =, node, ., getAnnotation, (, ), ;]
[., getNodes, (, ), ), {, Name, name, =, node, ., getValue, (, ), ;, NameInfo, nameInfo, =, node, .]
[;, NameInfo, nameInfo, =, node, ., getAnnotation, (, ), ;, if, (, nameInfo, ==, null, ||, !, nameInfo, ., isReferenced]
[., getValue, (, ), ;, NameInfo, nameInfo, =, node, ., getAnnotation, (, ), ;, if, (, nameInfo, ==, null, ||]
[;, if, (, nameInfo, ==, null, ||, !, nameInfo, ., isReferenced, (, ), ), {, if, (, canModifyExterns, ||, !]
[., getAnnotation, (, ), ;, if, (, nameInfo, ==, null, ||, !, nameInfo, ., isReferenced, (, ), ), {, if]
[), {, if, (, canModifyExterns, ||, !, name, ., isExtern, (, ), ), {, name, ., remove, (, ), ;]
[||, !, nameInfo, ., isReferenced, (, ), ), {, if, (, canModifyExterns, ||, !, name, ., isExtern, (, ), )]
[==, null, ||, !, nameInfo, ., isReferenced, (, ), ), {, if, (, canModifyExterns, ||, !, name, ., isExtern, (]
[||, !, nameInfo, ., isReferenced, (, ), ), {, if, (, canModifyExterns, ||, !, name, ., isExtern, (, ), )]
[), {, if, (, canModifyExterns, ||, !, name, ., isExtern, (, ), ), {, name, ., remove, (, ), ;]
[), {, if, (, canModifyExterns, ||, !, name, ., isExtern, (, ), ), {, name, ., remove, (, ), ;]
[., isReferenced, (, ), ), {, if, (, canModifyExterns, ||, !, name, ., isExtern, (, ), ), {, name, .]
[), {, name, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, logger, ., fine, (, "Removed unused name", +]
[||, !, name, ., isExtern, (, ), ), {, name, ., remove, (, ), ;, compiler, ., reportCodeChange, (, )]
[), {, name, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, logger, ., fine, (, "Removed unused name", +]
[), {, name, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, logger, ., fine, (, "Removed unused name", +]
[., isExtern, (, ), ), {, name, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, logger, .]
[;, compiler, ., reportCodeChange, (, ), ;, logger, ., fine, (, "Removed unused name", +, name, ), ;, }, }, }, }]
[., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, logger, ., fine, (, "Removed unused name", +, name, ), ;]
[;, logger, ., fine, (, "Removed unused name", +, name, ), ;, }, }, }, }, }]
[., reportCodeChange, (, ), ;, logger, ., fine, (, "Removed unused name", +, name, ), ;, }, }, }, }, }]
[;, }, }, }, }, }]
[., fine, (, "Removed unused name", +, name, ), ;, }, }, }, }, }]
[), ;, }, }, }, }, }]
[+, name, ), ;, }, }, }, }, }]
[), ;, }, }, }, }, }]
