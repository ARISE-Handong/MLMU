[private, final, Supplier, <, String, >, safeNameIdSupplier, ;, private, final, boolean, allowDecomposition, ;, private, Set, <, String, >, knownConstants, =]
[private, final, Supplier, <, String, >, safeNameIdSupplier, ;, private, final, boolean, allowDecomposition, ;, private, Set, <, String, >, knownConstants, =]
[(, AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ,, boolean, allowDecomposition, ,, boolean, assumeStrictThis, ,, boolean, assumeMinimumCapture, ), {]
[(, AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ,, boolean, allowDecomposition, ,, boolean, assumeStrictThis, ,, boolean, assumeMinimumCapture, ), {]
[Supplier, <, String, >, safeNameIdSupplier, ,, boolean, allowDecomposition, ,, boolean, assumeStrictThis, ,, boolean, assumeMinimumCapture, ), {, Preconditions, ., checkNotNull, (]
[>, safeNameIdSupplier, ,, boolean, allowDecomposition, ,, boolean, assumeStrictThis, ,, boolean, assumeMinimumCapture, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;]
[>, safeNameIdSupplier, ,, boolean, allowDecomposition, ,, boolean, assumeStrictThis, ,, boolean, assumeMinimumCapture, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;]
[allowDecomposition, ,, boolean, assumeStrictThis, ,, boolean, assumeMinimumCapture, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, Preconditions, ., checkNotNull, (]
[assumeStrictThis, ,, boolean, assumeMinimumCapture, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, Preconditions, ., checkNotNull, (, safeNameIdSupplier, ), ;]
[assumeStrictThis, ,, boolean, assumeMinimumCapture, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, Preconditions, ., checkNotNull, (, safeNameIdSupplier, ), ;]
[), {, Preconditions, ., checkNotNull, (, compiler, ), ;, Preconditions, ., checkNotNull, (, safeNameIdSupplier, ), ;, this, ., compiler, =]
[Preconditions, ., checkNotNull, (, compiler, ), ;, Preconditions, ., checkNotNull, (, safeNameIdSupplier, ), ;, this, ., compiler, =, compiler, ;]
[Preconditions, ., checkNotNull, (, compiler, ), ;, Preconditions, ., checkNotNull, (, safeNameIdSupplier, ), ;, this, ., compiler, =, compiler, ;]
[compiler, ), ;, Preconditions, ., checkNotNull, (, safeNameIdSupplier, ), ;, this, ., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =]
[;, Preconditions, ., checkNotNull, (, safeNameIdSupplier, ), ;, this, ., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;]
[;, Preconditions, ., checkNotNull, (, safeNameIdSupplier, ), ;, this, ., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;]
[(, safeNameIdSupplier, ), ;, this, ., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, this, ., allowDecomposition, =]
[), ;, this, ., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, this, ., allowDecomposition, =, allowDecomposition, ;]
[), ;, this, ., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, this, ., allowDecomposition, =, allowDecomposition, ;]
[compiler, =, compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, this, ., allowDecomposition, =, allowDecomposition, ;, this, ., assumeStrictThis, =]
[compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, this, ., allowDecomposition, =, allowDecomposition, ;, this, ., assumeStrictThis, =, assumeStrictThis, ;]
[compiler, ;, this, ., safeNameIdSupplier, =, safeNameIdSupplier, ;, this, ., allowDecomposition, =, allowDecomposition, ;, this, ., assumeStrictThis, =, assumeStrictThis, ;]
[safeNameIdSupplier, =, safeNameIdSupplier, ;, this, ., allowDecomposition, =, allowDecomposition, ;, this, ., assumeStrictThis, =, assumeStrictThis, ;, this, ., assumeMinimumCapture, =]
[final, JSModule, module, ;, final, InliningMode, mode, ;, Reference, (, Node, callNode, ,, JSModule, module, ,, InliningMode, mode, ), {]
[final, JSModule, module, ;, final, InliningMode, mode, ;, Reference, (, Node, callNode, ,, JSModule, module, ,, InliningMode, mode, ), {]
[final, InliningMode, mode, ;, Reference, (, Node, callNode, ,, JSModule, module, ,, InliningMode, mode, ), {, this, ., callNode, =]
[mode, ;, Reference, (, Node, callNode, ,, JSModule, module, ,, InliningMode, mode, ), {, this, ., callNode, =, callNode, ;]
[mode, ;, Reference, (, Node, callNode, ,, JSModule, module, ,, InliningMode, mode, ), {, this, ., callNode, =, callNode, ;]
[Node, callNode, ,, JSModule, module, ,, InliningMode, mode, ), {, this, ., callNode, =, callNode, ;, this, ., module, =]
[,, JSModule, module, ,, InliningMode, mode, ), {, this, ., callNode, =, callNode, ;, this, ., module, =, module, ;]
[,, JSModule, module, ,, InliningMode, mode, ), {, this, ., callNode, =, callNode, ;, this, ., module, =, module, ;]
[InliningMode, mode, ), {, this, ., callNode, =, callNode, ;, this, ., module, =, module, ;, this, ., mode, =]
[this, ., module, =, module, ;, this, ., mode, =, mode, ;, }, }, private, static, final, int, NAME_COST_ESTIMATE, =]
[this, ., module, =, module, ;, this, ., mode, =, mode, ;, }, }, private, static, final, int, NAME_COST_ESTIMATE, =]
[mode, ;, }, }, private, static, final, int, NAME_COST_ESTIMATE, =, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ;, private, static, final, int, COMMA_COST, =]
[NAME_COST_ESTIMATE, =, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ;, private, static, final, int, COMMA_COST, =, 1, ;, private, static, final, int, PAREN_COST, =]
[final, int, PAREN_COST, =, 2, ;, boolean, doesFunctionMeetMinimumRequirements, (, final, String, fnName, ,, Node, fnNode, ), {, Node, block, =]
[final, int, PAREN_COST, =, 2, ;, boolean, doesFunctionMeetMinimumRequirements, (, final, String, fnName, ,, Node, fnNode, ), {, Node, block, =]
[2, ;, boolean, doesFunctionMeetMinimumRequirements, (, final, String, fnName, ,, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody, (]
[final, String, fnName, ,, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if, (]
[String, fnName, ,, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if, (, !]
[String, fnName, ,, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if, (, !]
[String, fnName, ,, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if, (, !]
[block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if, (, !, compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (]
[(, fnNode, ), ;, if, (, !, compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, fnNode, ), ), {, return]
[compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, fnNode, ), ), {, return, false, ;, }, final, String, fnRecursionName, =]
[compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, fnNode, ), ), {, return, false, ;, }, final, String, fnRecursionName, =]
[compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, fnNode, ), ), {, return, false, ;, }, final, String, fnRecursionName, =]
[), {, return, false, ;, }, final, String, fnRecursionName, =, fnNode, ., getFirstChild, (, ), ., getString, (, ), ;]
[), {, return, false, ;, }, final, String, fnRecursionName, =, fnNode, ., getFirstChild, (, ), ., getString, (, ), ;]
[;, }, final, String, fnRecursionName, =, fnNode, ., getFirstChild, (, ), ., getString, (, ), ;, Preconditions, ., checkState, (]
[;, }, final, String, fnRecursionName, =, fnNode, ., getFirstChild, (, ), ., getString, (, ), ;, Preconditions, ., checkState, (]
[final, String, fnRecursionName, =, fnNode, ., getFirstChild, (, ), ., getString, (, ), ;, Preconditions, ., checkState, (, fnRecursionName, !=]
[getFirstChild, (, ), ., getString, (, ), ;, Preconditions, ., checkState, (, fnRecursionName, !=, null, ), ;, boolean, referencesArguments, =]
[getFirstChild, (, ), ., getString, (, ), ;, Preconditions, ., checkState, (, fnRecursionName, !=, null, ), ;, boolean, referencesArguments, =]
[getString, (, ), ;, Preconditions, ., checkState, (, fnRecursionName, !=, null, ), ;, boolean, referencesArguments, =, NodeUtil, ., isNameReferenced, (]
[), ;, Preconditions, ., checkState, (, fnRecursionName, !=, null, ), ;, boolean, referencesArguments, =, NodeUtil, ., isNameReferenced, (, block, ,]
[Preconditions, ., checkState, (, fnRecursionName, !=, null, ), ;, boolean, referencesArguments, =, NodeUtil, ., isNameReferenced, (, block, ,, "arguments", ,]
[Preconditions, ., checkState, (, fnRecursionName, !=, null, ), ;, boolean, referencesArguments, =, NodeUtil, ., isNameReferenced, (, block, ,, "arguments", ,]
[=, NodeUtil, ., isNameReferenced, (, block, ,, "arguments", ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, Predicate, <, Node, >, p, =]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, n, ), {, if, (]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, n, ), {, if, (]
[@, Override, public, boolean, apply, (, Node, n, ), {, if, (, n, ., isName, (, ), ), {, return]
[@, Override, public, boolean, apply, (, Node, n, ), {, if, (, n, ., isName, (, ), ), {, return]
[@, Override, public, boolean, apply, (, Node, n, ), {, if, (, n, ., isName, (, ), ), {, return]
[@, Override, public, boolean, apply, (, Node, n, ), {, if, (, n, ., isName, (, ), ), {, return]
[@, Override, public, boolean, apply, (, Node, n, ), {, if, (, n, ., isName, (, ), ), {, return]
[), {, if, (, n, ., isName, (, ), ), {, return, n, ., getString, (, ), ., equals, (]
[(, n, ., isName, (, ), ), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ||]
[n, ., isName, (, ), ), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ||, (]
[n, ., isName, (, ), ), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ||, (]
[., isName, (, ), ), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ||, (, !]
[., isName, (, ), ), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ||, (, !]
[return, n, ., getString, (, ), ., equals, (, "eval", ), ||, (, !, fnName, ., isEmpty, (, ), &&]
[return, n, ., getString, (, ), ., equals, (, "eval", ), ||, (, !, fnName, ., isEmpty, (, ), &&]
[return, n, ., getString, (, ), ., equals, (, "eval", ), ||, (, !, fnName, ., isEmpty, (, ), &&]
[(, "eval", ), ||, (, !, fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (]
[(, !, fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnName, ), ), ||]
[!, fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnName, ), ), ||, (]
[!, fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnName, ), ), ||, (]
[fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnName, ), ), ||, (, !]
[fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnName, ), ), ||, (, !]
[n, ., getString, (, ), ., equals, (, fnName, ), ), ||, (, !, fnRecursionName, ., isEmpty, (, ), &&]
[n, ., getString, (, ), ., equals, (, fnName, ), ), ||, (, !, fnRecursionName, ., isEmpty, (, ), &&]
[n, ., getString, (, ), ., equals, (, fnName, ), ), ||, (, !, fnRecursionName, ., isEmpty, (, ), &&]
[fnName, ), ), ||, (, !, fnRecursionName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (]
[fnRecursionName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnRecursionName, ), ), ;, }, return]
[n, ., getString, (, ), ., equals, (, fnRecursionName, ), ), ;, }, return, false, ;, }, }, ;, return]
[n, ., getString, (, ), ., equals, (, fnRecursionName, ), ), ;, }, return, false, ;, }, }, ;, return]
[., getString, (, ), ., equals, (, fnRecursionName, ), ), ;, }, return, false, ;, }, }, ;, return, !]
[(, ), ., equals, (, fnRecursionName, ), ), ;, }, return, false, ;, }, }, ;, return, !, referencesArguments, &&]
[), ., equals, (, fnRecursionName, ), ), ;, }, return, false, ;, }, }, ;, return, !, referencesArguments, &&, !]
[), ., equals, (, fnRecursionName, ), ), ;, }, return, false, ;, }, }, ;, return, !, referencesArguments, &&, !]
[fnRecursionName, ), ), ;, }, return, false, ;, }, }, ;, return, !, referencesArguments, &&, !, NodeUtil, ., has, (]
[), ;, }, return, false, ;, }, }, ;, return, !, referencesArguments, &&, !, NodeUtil, ., has, (, block, ,]
[}, return, false, ;, }, }, ;, return, !, referencesArguments, &&, !, NodeUtil, ., has, (, block, ,, p, ,]
[}, return, false, ;, }, }, ;, return, !, referencesArguments, &&, !, NodeUtil, ., has, (, block, ,, p, ,]
[fnNode, ,, Set, <, String, >, needAliases, ,, InliningMode, mode, ,, boolean, referencesThis, ,, boolean, containsFunctions, ), {, if, (]
[,, Set, <, String, >, needAliases, ,, InliningMode, mode, ,, boolean, referencesThis, ,, boolean, containsFunctions, ), {, if, (, !]
[<, String, >, needAliases, ,, InliningMode, mode, ,, boolean, referencesThis, ,, boolean, containsFunctions, ), {, if, (, !, isSupportedCallType, (]
[InliningMode, mode, ,, boolean, referencesThis, ,, boolean, containsFunctions, ), {, if, (, !, isSupportedCallType, (, callNode, ), ), {, return]
[InliningMode, mode, ,, boolean, referencesThis, ,, boolean, containsFunctions, ), {, if, (, !, isSupportedCallType, (, callNode, ), ), {, return]
[containsFunctions, ), {, if, (, !, isSupportedCallType, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (]
[!, isSupportedCallType, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, containsFunctions, ), {, if, (]
[!, isSupportedCallType, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, containsFunctions, ), {, if, (]
[isSupportedCallType, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, containsFunctions, ), {, if, (, !]
[callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, containsFunctions, ), {, if, (, !, assumeMinimumCapture, &&]
[), ), {, return, CanInlineResult, ., NO, ;, }, if, (, containsFunctions, ), {, if, (, !, assumeMinimumCapture, &&, !]
[), ), {, return, CanInlineResult, ., NO, ;, }, if, (, containsFunctions, ), {, if, (, !, assumeMinimumCapture, &&, !]
[}, if, (, containsFunctions, ), {, if, (, !, assumeMinimumCapture, &&, !, t, ., inGlobalScope, (, ), ), {, return]
[}, if, (, containsFunctions, ), {, if, (, !, assumeMinimumCapture, &&, !, t, ., inGlobalScope, (, ), ), {, return]
[!, assumeMinimumCapture, &&, !, t, ., inGlobalScope, (, ), ), {, return, CanInlineResult, ., NO, ;, }, else, if, (]
[!, assumeMinimumCapture, &&, !, t, ., inGlobalScope, (, ), ), {, return, CanInlineResult, ., NO, ;, }, else, if, (]
[t, ., inGlobalScope, (, ), ), {, return, CanInlineResult, ., NO, ;, }, else, if, (, NodeUtil, ., isWithinLoop, (]
[), {, return, CanInlineResult, ., NO, ;, }, else, if, (, NodeUtil, ., isWithinLoop, (, callNode, ), ), {, return]
[), {, return, CanInlineResult, ., NO, ;, }, else, if, (, NodeUtil, ., isWithinLoop, (, callNode, ), ), {, return]
[else, if, (, NodeUtil, ., isWithinLoop, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, }, if, (]
[else, if, (, NodeUtil, ., isWithinLoop, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, }, if, (]
[(, NodeUtil, ., isWithinLoop, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, }, if, (, referencesThis, &&]
[NodeUtil, ., isWithinLoop, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, }, if, (, referencesThis, &&, !]
[NodeUtil, ., isWithinLoop, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, }, if, (, referencesThis, &&, !]
[callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, }, if, (, referencesThis, &&, !, NodeUtil, ., isFunctionObjectCall, (]
[CanInlineResult, ., NO, ;, }, }, if, (, referencesThis, &&, !, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, return]
[CanInlineResult, ., NO, ;, }, }, if, (, referencesThis, &&, !, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, return]
[(, referencesThis, &&, !, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (]
[(, referencesThis, &&, !, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (]
[&&, !, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, mode, ==]
[&&, !, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, mode, ==]
[callNode, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, canInlineReferenceDirectly, (]
[return, CanInlineResult, ., NO, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, canInlineReferenceDirectly, (, callNode, ,]
[(, mode, ==, InliningMode, ., DIRECT, ), {, return, canInlineReferenceDirectly, (, callNode, ,, fnNode, ), ;, }, else, {, return]
[==, InliningMode, ., DIRECT, ), {, return, canInlineReferenceDirectly, (, callNode, ,, fnNode, ), ;, }, else, {, return, canInlineReferenceAsStatementBlock, (]
[., DIRECT, ), {, return, canInlineReferenceDirectly, (, callNode, ,, fnNode, ), ;, }, else, {, return, canInlineReferenceAsStatementBlock, (, t, ,]
[), {, return, canInlineReferenceDirectly, (, callNode, ,, fnNode, ), ;, }, else, {, return, canInlineReferenceAsStatementBlock, (, t, ,, callNode, ,]
[return, canInlineReferenceDirectly, (, callNode, ,, fnNode, ), ;, }, else, {, return, canInlineReferenceAsStatementBlock, (, t, ,, callNode, ,, fnNode, ,]
[,, callNode, ,, fnNode, ,, needAliases, ), ;, }, }, private, boolean, isSupportedCallType, (, Node, callNode, ), {, if, (]
[callNode, ,, fnNode, ,, needAliases, ), ;, }, }, private, boolean, isSupportedCallType, (, Node, callNode, ), {, if, (, !]
[callNode, ,, fnNode, ,, needAliases, ), ;, }, }, private, boolean, isSupportedCallType, (, Node, callNode, ), {, if, (, !]
[callNode, ,, fnNode, ,, needAliases, ), ;, }, }, private, boolean, isSupportedCallType, (, Node, callNode, ), {, if, (, !]
[Node, callNode, ), {, if, (, !, callNode, ., getFirstChild, (, ), ., isName, (, ), ), {, if, (]
[Node, callNode, ), {, if, (, !, callNode, ., getFirstChild, (, ), ., isName, (, ), ), {, if, (]
[if, (, !, callNode, ., getFirstChild, (, ), ., isName, (, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (]
[(, ), ., isName, (, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (]
[), ., isName, (, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, !]
[{, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, !, assumeStrictThis, ), {, Node, thisValue, =]
[{, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, !, assumeStrictThis, ), {, Node, thisValue, =]
[{, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, !, assumeStrictThis, ), {, Node, thisValue, =]
[(, !, assumeStrictThis, ), {, Node, thisValue, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[(, !, assumeStrictThis, ), {, Node, thisValue, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[(, !, assumeStrictThis, ), {, Node, thisValue, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[assumeStrictThis, ), {, Node, thisValue, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, thisValue, ==]
[{, Node, thisValue, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, thisValue, ==, null, ||]
[Node, thisValue, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, thisValue, ==, null, ||, !]
[Node, thisValue, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, thisValue, ==, null, ||, !]
[., getNext, (, ), ;, if, (, thisValue, ==, null, ||, !, thisValue, ., isThis, (, ), ), {, return]
[==, null, ||, !, thisValue, ., isThis, (, ), ), {, return, false, ;, }, }, }, else, if, (]
[==, null, ||, !, thisValue, ., isThis, (, ), ), {, return, false, ;, }, }, }, else, if, (]
[thisValue, ., isThis, (, ), ), {, return, false, ;, }, }, }, else, if, (, NodeUtil, ., isFunctionObjectApply, (]
[), {, return, false, ;, }, }, }, else, if, (, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), {, return]
[}, }, }, else, if, (, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), {, return, false, ;, }, }, return]
[}, Node, inline, (, NodeTraversal, t, ,, Node, callNode, ,, String, fnName, ,, Node, fnNode, ,, InliningMode, mode, ), {]
[}, Node, inline, (, NodeTraversal, t, ,, Node, callNode, ,, String, fnName, ,, Node, fnNode, ,, InliningMode, mode, ), {]
[NodeTraversal, t, ,, Node, callNode, ,, String, fnName, ,, Node, fnNode, ,, InliningMode, mode, ), {, Preconditions, ., checkState, (]
[NodeTraversal, t, ,, Node, callNode, ,, String, fnName, ,, Node, fnNode, ,, InliningMode, mode, ), {, Preconditions, ., checkState, (]
[NodeTraversal, t, ,, Node, callNode, ,, String, fnName, ,, Node, fnNode, ,, InliningMode, mode, ), {, Preconditions, ., checkState, (]
[mode, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, if, (]
[mode, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, if, (]
[{, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, if, (, mode, ==]
[{, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, if, (, mode, ==]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return]
[(, ), ., isNormalized, (, ), ), ;, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, inlineReturnValue, (]
[., isNormalized, (, ), ), ;, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, inlineReturnValue, (, callNode, ,]
[(, mode, ==, InliningMode, ., DIRECT, ), {, return, inlineReturnValue, (, callNode, ,, fnNode, ), ;, }, else, {, return]
[==, InliningMode, ., DIRECT, ), {, return, inlineReturnValue, (, callNode, ,, fnNode, ), ;, }, else, {, return, inlineFunction, (]
[., DIRECT, ), {, return, inlineReturnValue, (, callNode, ,, fnNode, ), ;, }, else, {, return, inlineFunction, (, callNode, ,]
[), {, return, inlineReturnValue, (, callNode, ,, fnNode, ), ;, }, else, {, return, inlineFunction, (, callNode, ,, fnNode, ,]
[,, fnName, ), ;, }, }, private, Node, inlineReturnValue, (, Node, callNode, ,, Node, fnNode, ), {, Node, block, =]
[,, fnName, ), ;, }, }, private, Node, inlineReturnValue, (, Node, callNode, ,, Node, fnNode, ), {, Node, block, =]
[(, Node, callNode, ,, Node, fnNode, ), {, Node, block, =, fnNode, ., getLastChild, (, ), ;, Node, callParentNode, =]
[(, Node, callNode, ,, Node, fnNode, ), {, Node, block, =, fnNode, ., getLastChild, (, ), ;, Node, callParentNode, =]
[(, ), ;, Node, callParentNode, =, callNode, ., getParent, (, ), ;, Map, <, String, ,, Node, >, argMap, =]
[(, ), ;, Node, callParentNode, =, callNode, ., getParent, (, ), ;, Map, <, String, ,, Node, >, argMap, =]
[callParentNode, =, callNode, ., getParent, (, ), ;, Map, <, String, ,, Node, >, argMap, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (]
[callNode, ., getParent, (, ), ;, Map, <, String, ,, Node, >, argMap, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,]
[getParent, (, ), ;, Map, <, String, ,, Node, >, argMap, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,]
[getParent, (, ), ;, Map, <, String, ,, Node, >, argMap, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,]
[argMap, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,, this, ., safeNameIdSupplier, ), ;, Node, newExpression, ;, if, (]
[=, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,, this, ., safeNameIdSupplier, ), ;, Node, newExpression, ;, if, (, !]
[=, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,, this, ., safeNameIdSupplier, ), ;, Node, newExpression, ;, if, (, !]
[., safeNameIdSupplier, ), ;, Node, newExpression, ;, if, (, !, block, ., hasChildren, (, ), ), {, Node, srcLocation, =]
[), ;, Node, newExpression, ;, if, (, !, block, ., hasChildren, (, ), ), {, Node, srcLocation, =, block, ;]
[Node, newExpression, ;, if, (, !, block, ., hasChildren, (, ), ), {, Node, srcLocation, =, block, ;, newExpression, =]
[Node, newExpression, ;, if, (, !, block, ., hasChildren, (, ), ), {, Node, srcLocation, =, block, ;, newExpression, =]
[(, !, block, ., hasChildren, (, ), ), {, Node, srcLocation, =, block, ;, newExpression, =, NodeUtil, ., newUndefinedNode, (]
[Node, srcLocation, =, block, ;, newExpression, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, else, {, Node, returnNode, =]
[Node, srcLocation, =, block, ;, newExpression, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, else, {, Node, returnNode, =]
[=, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, else, {, Node, returnNode, =, block, ., getFirstChild, (, ), ;]
[=, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, else, {, Node, returnNode, =, block, ., getFirstChild, (, ), ;]
[(, srcLocation, ), ;, }, else, {, Node, returnNode, =, block, ., getFirstChild, (, ), ;, Preconditions, ., checkArgument, (]
[(, srcLocation, ), ;, }, else, {, Node, returnNode, =, block, ., getFirstChild, (, ), ;, Preconditions, ., checkArgument, (]
[block, ., getFirstChild, (, ), ;, Preconditions, ., checkArgument, (, returnNode, ., isReturn, (, ), ), ;, Node, safeReturnNode, =]
[block, ., getFirstChild, (, ), ;, Preconditions, ., checkArgument, (, returnNode, ., isReturn, (, ), ), ;, Node, safeReturnNode, =]
[(, returnNode, ., isReturn, (, ), ), ;, Node, safeReturnNode, =, returnNode, ., cloneTree, (, ), ;, Node, inlineResult, =]
[(, returnNode, ., isReturn, (, ), ), ;, Node, safeReturnNode, =, returnNode, ., cloneTree, (, ), ;, Node, inlineResult, =]
[(, ), ), ;, Node, safeReturnNode, =, returnNode, ., cloneTree, (, ), ;, Node, inlineResult, =, FunctionArgumentInjector, ., inject, (]
[), ;, Node, safeReturnNode, =, returnNode, ., cloneTree, (, ), ;, Node, inlineResult, =, FunctionArgumentInjector, ., inject, (, null, ,]
[Node, safeReturnNode, =, returnNode, ., cloneTree, (, ), ;, Node, inlineResult, =, FunctionArgumentInjector, ., inject, (, null, ,, safeReturnNode, ,]
[=, returnNode, ., cloneTree, (, ), ;, Node, inlineResult, =, FunctionArgumentInjector, ., inject, (, null, ,, safeReturnNode, ,, null, ,]
[cloneTree, (, ), ;, Node, inlineResult, =, FunctionArgumentInjector, ., inject, (, null, ,, safeReturnNode, ,, null, ,, argMap, ), ;]
[cloneTree, (, ), ;, Node, inlineResult, =, FunctionArgumentInjector, ., inject, (, null, ,, safeReturnNode, ,, null, ,, argMap, ), ;]
[Node, inlineResult, =, FunctionArgumentInjector, ., inject, (, null, ,, safeReturnNode, ,, null, ,, argMap, ), ;, Preconditions, ., checkArgument, (]
[Node, inlineResult, =, FunctionArgumentInjector, ., inject, (, null, ,, safeReturnNode, ,, null, ,, argMap, ), ;, Preconditions, ., checkArgument, (]
[=, FunctionArgumentInjector, ., inject, (, null, ,, safeReturnNode, ,, null, ,, argMap, ), ;, Preconditions, ., checkArgument, (, safeReturnNode, ==]
[inject, (, null, ,, safeReturnNode, ,, null, ,, argMap, ), ;, Preconditions, ., checkArgument, (, safeReturnNode, ==, inlineResult, ), ;]
[null, ,, safeReturnNode, ,, null, ,, argMap, ), ;, Preconditions, ., checkArgument, (, safeReturnNode, ==, inlineResult, ), ;, newExpression, =]
[null, ,, safeReturnNode, ,, null, ,, argMap, ), ;, Preconditions, ., checkArgument, (, safeReturnNode, ==, inlineResult, ), ;, newExpression, =]
[), ;, Preconditions, ., checkArgument, (, safeReturnNode, ==, inlineResult, ), ;, newExpression, =, safeReturnNode, ., removeFirstChild, (, ), ;, }]
[), ;, Preconditions, ., checkArgument, (, safeReturnNode, ==, inlineResult, ), ;, newExpression, =, safeReturnNode, ., removeFirstChild, (, ), ;, }]
[checkArgument, (, safeReturnNode, ==, inlineResult, ), ;, newExpression, =, safeReturnNode, ., removeFirstChild, (, ), ;, }, callParentNode, ., replaceChild, (]
[safeReturnNode, ==, inlineResult, ), ;, newExpression, =, safeReturnNode, ., removeFirstChild, (, ), ;, }, callParentNode, ., replaceChild, (, callNode, ,]
[;, newExpression, =, safeReturnNode, ., removeFirstChild, (, ), ;, }, callParentNode, ., replaceChild, (, callNode, ,, newExpression, ), ;, return]
[CallSiteType, {, UNSUPPORTED, (, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, ), {, throw]
[(, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, ), {, throw, new, IllegalStateException, (]
[}, }, ,, EXPRESSION, (, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, ), {]
[}, }, ,, EXPRESSION, (, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, ), {]
[}, }, ,, EXPRESSION, (, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, ), {]
[Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, ), {, injector, ., getDecomposer, (, ), ., moveExpression, (]
[injector, ,, Node, callNode, ), {, injector, ., getDecomposer, (, ), ., moveExpression, (, callNode, ), ;, CallSiteType, callSiteType, =]
[injector, ,, Node, callNode, ), {, injector, ., getDecomposer, (, ), ., moveExpression, (, callNode, ), ;, CallSiteType, callSiteType, =]
[), {, injector, ., getDecomposer, (, ), ., moveExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (]
[., getDecomposer, (, ), ., moveExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;]
[., getDecomposer, (, ), ., moveExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;]
[., moveExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (]
[., moveExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (]
[(, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=]
[;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;]
[;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;]
[injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;, callSiteType, ., prepare, (]
[classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;, callSiteType, ., prepare, (, injector, ,]
[}, }, ,, DECOMPOSABLE_EXPRESSION, (, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, ), {]
[}, }, ,, DECOMPOSABLE_EXPRESSION, (, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, ), {]
[}, }, ,, DECOMPOSABLE_EXPRESSION, (, ), {, @, Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, ), {]
[Override, public, void, prepare, (, FunctionInjector, injector, ,, Node, callNode, ), {, injector, ., getDecomposer, (, ), ., maybeExposeExpression, (]
[injector, ,, Node, callNode, ), {, injector, ., getDecomposer, (, ), ., maybeExposeExpression, (, callNode, ), ;, CallSiteType, callSiteType, =]
[injector, ,, Node, callNode, ), {, injector, ., getDecomposer, (, ), ., maybeExposeExpression, (, callNode, ), ;, CallSiteType, callSiteType, =]
[), {, injector, ., getDecomposer, (, ), ., maybeExposeExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (]
[., getDecomposer, (, ), ., maybeExposeExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;]
[., getDecomposer, (, ), ., maybeExposeExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;]
[., maybeExposeExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (]
[., maybeExposeExpression, (, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (]
[(, callNode, ), ;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=]
[;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;]
[;, CallSiteType, callSiteType, =, injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;]
[injector, ., classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;, callSiteType, ., prepare, (]
[classifyCallSite, (, callNode, ), ;, Preconditions, ., checkState, (, this, !=, callSiteType, ), ;, callSiteType, ., prepare, (, injector, ,]
[(, FunctionInjector, injector, ,, Node, callNode, ), ;, }, private, CallSiteType, classifyCallSite, (, Node, callNode, ), {, Node, parent, =]
[(, FunctionInjector, injector, ,, Node, callNode, ), ;, }, private, CallSiteType, classifyCallSite, (, Node, callNode, ), {, Node, parent, =]
[private, CallSiteType, classifyCallSite, (, Node, callNode, ), {, Node, parent, =, callNode, ., getParent, (, ), ;, Node, grandParent, =]
[private, CallSiteType, classifyCallSite, (, Node, callNode, ), {, Node, parent, =, callNode, ., getParent, (, ), ;, Node, grandParent, =]
[Node, parent, =, callNode, ., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, if, (]
[Node, parent, =, callNode, ., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, if, (]
[., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, if, (, NodeUtil, ., isExprCall, (]
[Node, grandParent, =, parent, ., getParent, (, ), ;, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {, return]
[Node, grandParent, =, parent, ., getParent, (, ), ;, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {, return]
[;, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {, return, CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (]
[;, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {, return, CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (]
[;, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {, return, CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (]
[;, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {, return, CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (]
[;, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {, return, CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (]
[., isExprCall, (, parent, ), ), {, return, CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (, NodeUtil, ., isExprAssign, (]
[parent, ), ), {, return, CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (, NodeUtil, ., isExprAssign, (, grandParent, ), &&]
[), ), {, return, CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (, NodeUtil, ., isExprAssign, (, grandParent, ), &&, !]
[), ), {, return, CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (, NodeUtil, ., isExprAssign, (, grandParent, ), &&, !]
[CallSiteType, ., SIMPLE_CALL, ;, }, else, if, (, NodeUtil, ., isExprAssign, (, grandParent, ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (]
[SIMPLE_CALL, ;, }, else, if, (, NodeUtil, ., isExprAssign, (, grandParent, ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,]
[else, if, (, NodeUtil, ., isExprAssign, (, grandParent, ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, ), &&]
[else, if, (, NodeUtil, ., isExprAssign, (, grandParent, ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, ), &&]
[else, if, (, NodeUtil, ., isExprAssign, (, grandParent, ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, ), &&]
[!, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, ), &&, parent, ., getFirstChild, (, ), ., isName, (, ), &&]
[NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, ), &&, parent, ., getFirstChild, (, ), ., isName, (, ), &&, !]
[NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, ), &&, parent, ., getFirstChild, (, ), ., isName, (, ), &&, !]
[callNode, ,, parent, ), &&, parent, ., getFirstChild, (, ), ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (]
[callNode, ,, parent, ), &&, parent, ., getFirstChild, (, ), ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (]
[), ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ., getFirstChild, (, ), ), ), {, return]
[), ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ., getFirstChild, (, ), ), ), {, return]
[., isConstantName, (, parent, ., getFirstChild, (, ), ), ), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (]
[., isConstantName, (, parent, ., getFirstChild, (, ), ), ), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (]
[., isConstantName, (, parent, ., getFirstChild, (, ), ), ), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (]
[., isConstantName, (, parent, ., getFirstChild, (, ), ), ), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (]
[., isConstantName, (, parent, ., getFirstChild, (, ), ), ), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (]
[(, ), ), ), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (, parent, ., isName, (, ), &&]
[), ), ), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (, parent, ., isName, (, ), &&, !]
[), ), ), {, return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (, parent, ., isName, (, ), &&, !]
[return, CallSiteType, ., SIMPLE_ASSIGNMENT, ;, }, else, if, (, parent, ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (]
[SIMPLE_ASSIGNMENT, ;, }, else, if, (, parent, ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ), &&]
[SIMPLE_ASSIGNMENT, ;, }, else, if, (, parent, ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ), &&]
[parent, ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ), &&, grandParent, ., isVar, (, ), &&]
[parent, ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ), &&, grandParent, ., isVar, (, ), &&]
[., isConstantName, (, parent, ), &&, grandParent, ., isVar, (, ), &&, grandParent, ., hasOneChild, (, ), ), {, return]
[., isConstantName, (, parent, ), &&, grandParent, ., isVar, (, ), &&, grandParent, ., hasOneChild, (, ), ), {, return]
[), &&, grandParent, ., hasOneChild, (, ), ), {, return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }, else, {, Node, expressionRoot, =]
[), &&, grandParent, ., hasOneChild, (, ), ), {, return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }, else, {, Node, expressionRoot, =]
[hasOneChild, (, ), ), {, return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }, else, {, Node, expressionRoot, =, ExpressionDecomposer, ., findExpressionRoot, (]
[return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }, else, {, Node, expressionRoot, =, ExpressionDecomposer, ., findExpressionRoot, (, callNode, ), ;, if, (]
[return, CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }, else, {, Node, expressionRoot, =, ExpressionDecomposer, ., findExpressionRoot, (, callNode, ), ;, if, (]
[., VAR_DECL_SIMPLE_ASSIGNMENT, ;, }, else, {, Node, expressionRoot, =, ExpressionDecomposer, ., findExpressionRoot, (, callNode, ), ;, if, (, expressionRoot, !=]
[Node, expressionRoot, =, ExpressionDecomposer, ., findExpressionRoot, (, callNode, ), ;, if, (, expressionRoot, !=, null, ), {, ExpressionDecomposer, decomposer, =]
[ExpressionDecomposer, ., findExpressionRoot, (, callNode, ), ;, if, (, expressionRoot, !=, null, ), {, ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer, (]
[findExpressionRoot, (, callNode, ), ;, if, (, expressionRoot, !=, null, ), {, ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer, (, compiler, ,]
[callNode, ), ;, if, (, expressionRoot, !=, null, ), {, ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,]
[!=, null, ), {, ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,, knownConstants, ), ;, DecompositionType, type, =]
[!=, null, ), {, ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,, knownConstants, ), ;, DecompositionType, type, =]
[ExpressionDecomposer, decomposer, =, new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,, knownConstants, ), ;, DecompositionType, type, =, decomposer, ., canExposeExpression, (]
[(, compiler, ,, safeNameIdSupplier, ,, knownConstants, ), ;, DecompositionType, type, =, decomposer, ., canExposeExpression, (, callNode, ), ;, if, (]
[(, compiler, ,, safeNameIdSupplier, ,, knownConstants, ), ;, DecompositionType, type, =, decomposer, ., canExposeExpression, (, callNode, ), ;, if, (]
[,, safeNameIdSupplier, ,, knownConstants, ), ;, DecompositionType, type, =, decomposer, ., canExposeExpression, (, callNode, ), ;, if, (, type, ==]
[,, safeNameIdSupplier, ,, knownConstants, ), ;, DecompositionType, type, =, decomposer, ., canExposeExpression, (, callNode, ), ;, if, (, type, ==]
[DecompositionType, type, =, decomposer, ., canExposeExpression, (, callNode, ), ;, if, (, type, ==, DecompositionType, ., MOVABLE, ), {, return]
[DecompositionType, type, =, decomposer, ., canExposeExpression, (, callNode, ), ;, if, (, type, ==, DecompositionType, ., MOVABLE, ), {, return]
[), ;, if, (, type, ==, DecompositionType, ., MOVABLE, ), {, return, CallSiteType, ., EXPRESSION, ;, }, else, if, (]
[), ;, if, (, type, ==, DecompositionType, ., MOVABLE, ), {, return, CallSiteType, ., EXPRESSION, ;, }, else, if, (]
[if, (, type, ==, DecompositionType, ., MOVABLE, ), {, return, CallSiteType, ., EXPRESSION, ;, }, else, if, (, type, ==]
[if, (, type, ==, DecompositionType, ., MOVABLE, ), {, return, CallSiteType, ., EXPRESSION, ;, }, else, if, (, type, ==]
[MOVABLE, ), {, return, CallSiteType, ., EXPRESSION, ;, }, else, if, (, type, ==, DecompositionType, ., DECOMPOSABLE, ), {, return]
[MOVABLE, ), {, return, CallSiteType, ., EXPRESSION, ;, }, else, if, (, type, ==, DecompositionType, ., DECOMPOSABLE, ), {, return]
[;, }, else, if, (, type, ==, DecompositionType, ., DECOMPOSABLE, ), {, return, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ;, }, else, {]
[;, }, else, if, (, type, ==, DecompositionType, ., DECOMPOSABLE, ), {, return, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ;, }, else, {]
[(, type, ==, DecompositionType, ., DECOMPOSABLE, ), {, return, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ;, }, else, {, Preconditions, ., checkState, (]
[(, type, ==, DecompositionType, ., DECOMPOSABLE, ), {, return, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ;, }, else, {, Preconditions, ., checkState, (]
[==, DecompositionType, ., DECOMPOSABLE, ), {, return, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ;, }, else, {, Preconditions, ., checkState, (, type, ==]
[==, DecompositionType, ., DECOMPOSABLE, ), {, return, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ;, }, else, {, Preconditions, ., checkState, (, type, ==]
[DECOMPOSABLE_EXPRESSION, ;, }, else, {, Preconditions, ., checkState, (, type, ==, DecompositionType, ., UNDECOMPOSABLE, ), ;, }, }, }, return]
[DECOMPOSABLE_EXPRESSION, ;, }, else, {, Preconditions, ., checkState, (, type, ==, DecompositionType, ., UNDECOMPOSABLE, ), ;, }, }, }, return]
[., UNDECOMPOSABLE, ), ;, }, }, }, return, CallSiteType, ., UNSUPPORTED, ;, }, private, ExpressionDecomposer, getDecomposer, (, ), {, return]
[;, }, }, }, return, CallSiteType, ., UNSUPPORTED, ;, }, private, ExpressionDecomposer, getDecomposer, (, ), {, return, new, ExpressionDecomposer, (]
[}, }, return, CallSiteType, ., UNSUPPORTED, ;, }, private, ExpressionDecomposer, getDecomposer, (, ), {, return, new, ExpressionDecomposer, (, compiler, ,]
[return, CallSiteType, ., UNSUPPORTED, ;, }, private, ExpressionDecomposer, getDecomposer, (, ), {, return, new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,]
[ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,, knownConstants, ), ;, }, void, maybePrepareCall, (, Node, callNode, ), {, CallSiteType, callSiteType, =]
[compiler, ,, safeNameIdSupplier, ,, knownConstants, ), ;, }, void, maybePrepareCall, (, Node, callNode, ), {, CallSiteType, callSiteType, =, classifyCallSite, (]
[,, knownConstants, ), ;, }, void, maybePrepareCall, (, Node, callNode, ), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;]
[,, knownConstants, ), ;, }, void, maybePrepareCall, (, Node, callNode, ), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;]
[}, void, maybePrepareCall, (, Node, callNode, ), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, callSiteType, ., prepare, (]
[maybePrepareCall, (, Node, callNode, ), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, callSiteType, ., prepare, (, this, ,]
[), ;, }, private, Node, inlineFunction, (, Node, callNode, ,, Node, fnNode, ,, String, fnName, ), {, Node, parent, =]
[), ;, }, private, Node, inlineFunction, (, Node, callNode, ,, Node, fnNode, ,, String, fnName, ), {, Node, parent, =]
[,, Node, fnNode, ,, String, fnName, ), {, Node, parent, =, callNode, ., getParent, (, ), ;, Node, grandParent, =]
[,, Node, fnNode, ,, String, fnName, ), {, Node, parent, =, callNode, ., getParent, (, ), ;, Node, grandParent, =]
[parent, =, callNode, ., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, CallSiteType, callSiteType, =]
[callNode, ., getParent, (, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, CallSiteType, callSiteType, =, classifyCallSite, (]
[(, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;]
[(, ), ;, Node, grandParent, =, parent, ., getParent, (, ), ;, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;]
[grandParent, =, parent, ., getParent, (, ), ;, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, Preconditions, ., checkArgument, (]
[grandParent, =, parent, ., getParent, (, ), ;, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, Preconditions, ., checkArgument, (]
[parent, ., getParent, (, ), ;, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, Preconditions, ., checkArgument, (, callSiteType, !=]
[parent, ., getParent, (, ), ;, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, Preconditions, ., checkArgument, (, callSiteType, !=]
[=, classifyCallSite, (, callNode, ), ;, Preconditions, ., checkArgument, (, callSiteType, !=, CallSiteType, ., UNSUPPORTED, ), ;, boolean, isCallInLoop, =]
[=, classifyCallSite, (, callNode, ), ;, Preconditions, ., checkArgument, (, callSiteType, !=, CallSiteType, ., UNSUPPORTED, ), ;, boolean, isCallInLoop, =]
[), ;, Preconditions, ., checkArgument, (, callSiteType, !=, CallSiteType, ., UNSUPPORTED, ), ;, boolean, isCallInLoop, =, NodeUtil, ., isWithinLoop, (]
[callSiteType, !=, CallSiteType, ., UNSUPPORTED, ), ;, boolean, isCallInLoop, =, NodeUtil, ., isWithinLoop, (, callNode, ), ;, String, resultName, =]
[), ;, boolean, isCallInLoop, =, NodeUtil, ., isWithinLoop, (, callNode, ), ;, String, resultName, =, null, ;, boolean, needsDefaultReturnResult, =]
[=, NodeUtil, ., isWithinLoop, (, callNode, ), ;, String, resultName, =, null, ;, boolean, needsDefaultReturnResult, =, true, ;, switch, (]
[(, callNode, ), ;, String, resultName, =, null, ;, boolean, needsDefaultReturnResult, =, true, ;, switch, (, callSiteType, ), {, case]
[), ;, String, resultName, =, null, ;, boolean, needsDefaultReturnResult, =, true, ;, switch, (, callSiteType, ), {, case, SIMPLE_ASSIGNMENT, :]
[String, resultName, =, null, ;, boolean, needsDefaultReturnResult, =, true, ;, switch, (, callSiteType, ), {, case, SIMPLE_ASSIGNMENT, :, resultName, =]
[String, resultName, =, null, ;, boolean, needsDefaultReturnResult, =, true, ;, switch, (, callSiteType, ), {, case, SIMPLE_ASSIGNMENT, :, resultName, =]
[String, resultName, =, null, ;, boolean, needsDefaultReturnResult, =, true, ;, switch, (, callSiteType, ), {, case, SIMPLE_ASSIGNMENT, :, resultName, =]
[), {, case, SIMPLE_ASSIGNMENT, :, resultName, =, parent, ., getFirstChild, (, ), ., getString, (, ), ;, break, ;, case]
[case, SIMPLE_ASSIGNMENT, :, resultName, =, parent, ., getFirstChild, (, ), ., getString, (, ), ;, break, ;, case, VAR_DECL_SIMPLE_ASSIGNMENT, :]
[:, resultName, =, parent, ., getFirstChild, (, ), ., getString, (, ), ;, break, ;, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, resultName, =]
[:, resultName, =, parent, ., getFirstChild, (, ), ., getString, (, ), ;, break, ;, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, resultName, =]
[getString, (, ), ;, break, ;, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, resultName, =, parent, ., getString, (, ), ;, break, ;, case]
[), ;, break, ;, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, resultName, =, parent, ., getString, (, ), ;, break, ;, case, SIMPLE_CALL, :]
[break, ;, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, resultName, =, parent, ., getString, (, ), ;, break, ;, case, SIMPLE_CALL, :, resultName, =]
[case, VAR_DECL_SIMPLE_ASSIGNMENT, :, resultName, =, parent, ., getString, (, ), ;, break, ;, case, SIMPLE_CALL, :, resultName, =, null, ;]
[:, resultName, =, parent, ., getString, (, ), ;, break, ;, case, SIMPLE_CALL, :, resultName, =, null, ;, needsDefaultReturnResult, =]
[getString, (, ), ;, break, ;, case, SIMPLE_CALL, :, resultName, =, null, ;, needsDefaultReturnResult, =, false, ;, break, ;, case]
[;, break, ;, case, SIMPLE_CALL, :, resultName, =, null, ;, needsDefaultReturnResult, =, false, ;, break, ;, case, EXPRESSION, :, throw]
[case, SIMPLE_CALL, :, resultName, =, null, ;, needsDefaultReturnResult, =, false, ;, break, ;, case, EXPRESSION, :, throw, new, IllegalStateException, (]
[=, null, ;, needsDefaultReturnResult, =, false, ;, break, ;, case, EXPRESSION, :, throw, new, IllegalStateException, (, "Movable expressions must be moved before inlining.", ), ;, case]
[needsDefaultReturnResult, =, false, ;, break, ;, case, EXPRESSION, :, throw, new, IllegalStateException, (, "Movable expressions must be moved before inlining.", ), ;, case, DECOMPOSABLE_EXPRESSION, :, throw]
[;, break, ;, case, EXPRESSION, :, throw, new, IllegalStateException, (, "Movable expressions must be moved before inlining.", ), ;, case, DECOMPOSABLE_EXPRESSION, :, throw, new, IllegalStateException, (]
[throw, new, IllegalStateException, (, "Movable expressions must be moved before inlining.", ), ;, case, DECOMPOSABLE_EXPRESSION, :, throw, new, IllegalStateException, (, "Decomposable expressions must be decomposed before inlining.", ), ;, default, :, throw]
[(, "Movable expressions must be moved before inlining.", ), ;, case, DECOMPOSABLE_EXPRESSION, :, throw, new, IllegalStateException, (, "Decomposable expressions must be decomposed before inlining.", ), ;, default, :, throw, new, IllegalStateException, (]
[throw, new, IllegalStateException, (, "Decomposable expressions must be decomposed before inlining.", ), ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", ), ;, }, FunctionToBlockMutator, mutator, =]
[(, "Decomposable expressions must be decomposed before inlining.", ), ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", ), ;, }, FunctionToBlockMutator, mutator, =, new, FunctionToBlockMutator, (]
[), ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", ), ;, }, FunctionToBlockMutator, mutator, =, new, FunctionToBlockMutator, (, compiler, ,]
[), ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", ), ;, }, FunctionToBlockMutator, mutator, =, new, FunctionToBlockMutator, (, compiler, ,]
["Unexpected call site type.", ), ;, }, FunctionToBlockMutator, mutator, =, new, FunctionToBlockMutator, (, compiler, ,, this, ., safeNameIdSupplier, ), ;, Node, newBlock, =]
["Unexpected call site type.", ), ;, }, FunctionToBlockMutator, mutator, =, new, FunctionToBlockMutator, (, compiler, ,, this, ., safeNameIdSupplier, ), ;, Node, newBlock, =]
[FunctionToBlockMutator, mutator, =, new, FunctionToBlockMutator, (, compiler, ,, this, ., safeNameIdSupplier, ), ;, Node, newBlock, =, mutator, ., mutate, (]
[=, new, FunctionToBlockMutator, (, compiler, ,, this, ., safeNameIdSupplier, ), ;, Node, newBlock, =, mutator, ., mutate, (, fnName, ,]
[FunctionToBlockMutator, (, compiler, ,, this, ., safeNameIdSupplier, ), ;, Node, newBlock, =, mutator, ., mutate, (, fnName, ,, fnNode, ,]
[compiler, ,, this, ., safeNameIdSupplier, ), ;, Node, newBlock, =, mutator, ., mutate, (, fnName, ,, fnNode, ,, callNode, ,]
[this, ., safeNameIdSupplier, ), ;, Node, newBlock, =, mutator, ., mutate, (, fnName, ,, fnNode, ,, callNode, ,, resultName, ,]
[safeNameIdSupplier, ), ;, Node, newBlock, =, mutator, ., mutate, (, fnName, ,, fnNode, ,, callNode, ,, resultName, ,, needsDefaultReturnResult, ,]
[mutator, ., mutate, (, fnName, ,, fnNode, ,, callNode, ,, resultName, ,, needsDefaultReturnResult, ,, isCallInLoop, ), ;, Node, greatGrandParent, =]
[mutator, ., mutate, (, fnName, ,, fnNode, ,, callNode, ,, resultName, ,, needsDefaultReturnResult, ,, isCallInLoop, ), ;, Node, greatGrandParent, =]
[callNode, ,, resultName, ,, needsDefaultReturnResult, ,, isCallInLoop, ), ;, Node, greatGrandParent, =, grandParent, ., getParent, (, ), ;, switch, (]
[needsDefaultReturnResult, ,, isCallInLoop, ), ;, Node, greatGrandParent, =, grandParent, ., getParent, (, ), ;, switch, (, callSiteType, ), {, case]
[isCallInLoop, ), ;, Node, greatGrandParent, =, grandParent, ., getParent, (, ), ;, switch, (, callSiteType, ), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :]
[isCallInLoop, ), ;, Node, greatGrandParent, =, grandParent, ., getParent, (, ), ;, switch, (, callSiteType, ), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :]
[greatGrandParent, =, grandParent, ., getParent, (, ), ;, switch, (, callSiteType, ), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, parent, ., removeChild, (]
[greatGrandParent, =, grandParent, ., getParent, (, ), ;, switch, (, callSiteType, ), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, parent, ., removeChild, (]
[;, switch, (, callSiteType, ), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, parent, ., removeChild, (, parent, ., getFirstChild, (, ), ), ;]
[;, switch, (, callSiteType, ), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, parent, ., removeChild, (, parent, ., getFirstChild, (, ), ), ;]
[), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, parent, ., removeChild, (, parent, ., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (]
[), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, parent, ., removeChild, (, parent, ., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (]
[), {, case, VAR_DECL_SIMPLE_ASSIGNMENT, :, parent, ., removeChild, (, parent, ., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (]
[., removeChild, (, parent, ., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==]
[parent, ., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, null, ), ;]
[parent, ., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, null, ), ;]
[), ), ;, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, null, ), ;, greatGrandParent, ., addChildAfter, (]
[;, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, null, ), ;, greatGrandParent, ., addChildAfter, (, newBlock, ,]
[., getFirstChild, (, ), ==, null, ), ;, greatGrandParent, ., addChildAfter, (, newBlock, ,, grandParent, ), ;, break, ;, case]
[(, ), ==, null, ), ;, greatGrandParent, ., addChildAfter, (, newBlock, ,, grandParent, ), ;, break, ;, case, SIMPLE_ASSIGNMENT, :]
[(, ), ==, null, ), ;, greatGrandParent, ., addChildAfter, (, newBlock, ,, grandParent, ), ;, break, ;, case, SIMPLE_ASSIGNMENT, :]
[), ;, greatGrandParent, ., addChildAfter, (, newBlock, ,, grandParent, ), ;, break, ;, case, SIMPLE_ASSIGNMENT, :, Preconditions, ., checkState, (]
[), ;, greatGrandParent, ., addChildAfter, (, newBlock, ,, grandParent, ), ;, break, ;, case, SIMPLE_ASSIGNMENT, :, Preconditions, ., checkState, (]
[,, grandParent, ), ;, break, ;, case, SIMPLE_ASSIGNMENT, :, Preconditions, ., checkState, (, grandParent, ., isExprResult, (, ), ), ;]
[,, grandParent, ), ;, break, ;, case, SIMPLE_ASSIGNMENT, :, Preconditions, ., checkState, (, grandParent, ., isExprResult, (, ), ), ;]
[break, ;, case, SIMPLE_ASSIGNMENT, :, Preconditions, ., checkState, (, grandParent, ., isExprResult, (, ), ), ;, greatGrandParent, ., replaceChild, (]
[case, SIMPLE_ASSIGNMENT, :, Preconditions, ., checkState, (, grandParent, ., isExprResult, (, ), ), ;, greatGrandParent, ., replaceChild, (, grandParent, ,]
[(, grandParent, ., isExprResult, (, ), ), ;, greatGrandParent, ., replaceChild, (, grandParent, ,, newBlock, ), ;, break, ;, case]
[., isExprResult, (, ), ), ;, greatGrandParent, ., replaceChild, (, grandParent, ,, newBlock, ), ;, break, ;, case, SIMPLE_CALL, :]
[., isExprResult, (, ), ), ;, greatGrandParent, ., replaceChild, (, grandParent, ,, newBlock, ), ;, break, ;, case, SIMPLE_CALL, :]
[), ;, greatGrandParent, ., replaceChild, (, grandParent, ,, newBlock, ), ;, break, ;, case, SIMPLE_CALL, :, Preconditions, ., checkState, (]
[), ;, greatGrandParent, ., replaceChild, (, grandParent, ,, newBlock, ), ;, break, ;, case, SIMPLE_CALL, :, Preconditions, ., checkState, (]
[,, newBlock, ), ;, break, ;, case, SIMPLE_CALL, :, Preconditions, ., checkState, (, parent, ., isExprResult, (, ), ), ;]
[,, newBlock, ), ;, break, ;, case, SIMPLE_CALL, :, Preconditions, ., checkState, (, parent, ., isExprResult, (, ), ), ;]
[break, ;, case, SIMPLE_CALL, :, Preconditions, ., checkState, (, parent, ., isExprResult, (, ), ), ;, grandParent, ., replaceChild, (]
[case, SIMPLE_CALL, :, Preconditions, ., checkState, (, parent, ., isExprResult, (, ), ), ;, grandParent, ., replaceChild, (, parent, ,]
[., isExprResult, (, ), ), ;, grandParent, ., replaceChild, (, parent, ,, newBlock, ), ;, break, ;, default, :, throw]
[), ), ;, grandParent, ., replaceChild, (, parent, ,, newBlock, ), ;, break, ;, default, :, throw, new, IllegalStateException, (]
[replaceChild, (, parent, ,, newBlock, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unexpected call site type.", ), ;, }, return]
[IllegalStateException, (, "Unexpected call site type.", ), ;, }, return, newBlock, ;, }, boolean, isDirectCallNodeReplacementPossible, (, Node, fnNode, ), {, Node, block, =]
[IllegalStateException, (, "Unexpected call site type.", ), ;, }, return, newBlock, ;, }, boolean, isDirectCallNodeReplacementPossible, (, Node, fnNode, ), {, Node, block, =]
[;, }, return, newBlock, ;, }, boolean, isDirectCallNodeReplacementPossible, (, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody, (]
[}, boolean, isDirectCallNodeReplacementPossible, (, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if, (]
[boolean, isDirectCallNodeReplacementPossible, (, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if, (, !]
[boolean, isDirectCallNodeReplacementPossible, (, Node, fnNode, ), {, Node, block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if, (, !]
[block, =, NodeUtil, ., getFunctionBody, (, fnNode, ), ;, if, (, !, block, ., hasChildren, (, ), ), {, return]
[fnNode, ), ;, if, (, !, block, ., hasChildren, (, ), ), {, return, true, ;, }, else, if, (]
[fnNode, ), ;, if, (, !, block, ., hasChildren, (, ), ), {, return, true, ;, }, else, if, (]
[(, ), ), {, return, true, ;, }, else, if, (, block, ., hasOneChild, (, ), ), {, if, (]
[(, ), ), {, return, true, ;, }, else, if, (, block, ., hasOneChild, (, ), ), {, if, (]
[(, ), ), {, return, true, ;, }, else, if, (, block, ., hasOneChild, (, ), ), {, if, (]
[(, ), ), {, return, true, ;, }, else, if, (, block, ., hasOneChild, (, ), ), {, if, (]
[(, block, ., hasOneChild, (, ), ), {, if, (, block, ., getFirstChild, (, ), ., isReturn, (, ), &&]
[(, block, ., hasOneChild, (, ), ), {, if, (, block, ., getFirstChild, (, ), ., isReturn, (, ), &&]
[(, block, ., hasOneChild, (, ), ), {, if, (, block, ., getFirstChild, (, ), ., isReturn, (, ), &&]
[(, block, ., hasOneChild, (, ), ), {, if, (, block, ., getFirstChild, (, ), ., isReturn, (, ), &&]
[block, ., getFirstChild, (, ), ., isReturn, (, ), &&, block, ., getFirstChild, (, ), ., getFirstChild, (, ), !=]
[), ., isReturn, (, ), &&, block, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, return]
[&&, block, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, return, true, ;, }, }, return]
[(, NodeTraversal, t, ,, Node, callNode, ,, Node, fnNode, ,, Set, <, String, >, namesToAlias, ), {, CallSiteType, callSiteType, =]
[t, ,, Node, callNode, ,, Node, fnNode, ,, Set, <, String, >, namesToAlias, ), {, CallSiteType, callSiteType, =, classifyCallSite, (]
[Node, fnNode, ,, Set, <, String, >, namesToAlias, ), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, if, (]
[Node, fnNode, ,, Set, <, String, >, namesToAlias, ), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, if, (]
[,, Set, <, String, >, namesToAlias, ), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, if, (, callSiteType, ==]
[,, Set, <, String, >, namesToAlias, ), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, if, (, callSiteType, ==]
[), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, if, (, callSiteType, ==, CallSiteType, ., UNSUPPORTED, ), {, return]
[), {, CallSiteType, callSiteType, =, classifyCallSite, (, callNode, ), ;, if, (, callSiteType, ==, CallSiteType, ., UNSUPPORTED, ), {, return]
[callNode, ), ;, if, (, callSiteType, ==, CallSiteType, ., UNSUPPORTED, ), {, return, CanInlineResult, ., NO, ;, }, if, (]
[callNode, ), ;, if, (, callSiteType, ==, CallSiteType, ., UNSUPPORTED, ), {, return, CanInlineResult, ., NO, ;, }, if, (]
[), ;, if, (, callSiteType, ==, CallSiteType, ., UNSUPPORTED, ), {, return, CanInlineResult, ., NO, ;, }, if, (, !]
[if, (, callSiteType, ==, CallSiteType, ., UNSUPPORTED, ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&]
[(, callSiteType, ==, CallSiteType, ., UNSUPPORTED, ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&, (]
[(, callSiteType, ==, CallSiteType, ., UNSUPPORTED, ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&, (]
[(, callSiteType, ==, CallSiteType, ., UNSUPPORTED, ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&, (]
[==, CallSiteType, ., UNSUPPORTED, ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&, (, callSiteType, ==]
[==, CallSiteType, ., UNSUPPORTED, ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&, (, callSiteType, ==]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||]
[), {, return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||]
[return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==]
[return, CanInlineResult, ., NO, ;, }, if, (, !, allowDecomposition, &&, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==]
[(, !, allowDecomposition, &&, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), ), {, return]
[(, !, allowDecomposition, &&, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), ), {, return]
[CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (]
[., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, !]
[||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (]
[==, CallSiteType, ., EXPRESSION, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,]
[., EXPRESSION, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,, callNode, ,]
[), ), {, return, CanInlineResult, ., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,]
[., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,, namesToAlias, ), ), {, return]
[., NO, ;, }, if, (, !, callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,, namesToAlias, ), ), {, return]
[callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,, namesToAlias, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (]
[callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,, namesToAlias, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (]
[callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,, namesToAlias, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (]
[t, ,, callNode, ,, fnNode, ,, namesToAlias, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, callSiteType, ==]
[t, ,, callNode, ,, fnNode, ,, namesToAlias, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, callSiteType, ==]
[fnNode, ,, namesToAlias, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||]
[fnNode, ,, namesToAlias, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||]
[namesToAlias, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==]
[namesToAlias, ), ), {, return, CanInlineResult, ., NO, ;, }, if, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==]
[., NO, ;, }, if, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), {, return]
[., NO, ;, }, if, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), {, return]
[CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), {, return, CanInlineResult, ., AFTER_PREPARATION, ;, }, else, {, return]
[CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, ), {, return, CanInlineResult, ., AFTER_PREPARATION, ;, }, else, {, return]
[t, ,, Node, callNode, ,, final, Node, fnNode, ,, Set, <, String, >, namesToAlias, ), {, final, boolean, assumeMinimumCapture, =]
[t, ,, Node, callNode, ,, final, Node, fnNode, ,, Set, <, String, >, namesToAlias, ), {, final, boolean, assumeMinimumCapture, =]
[fnNode, ,, Set, <, String, >, namesToAlias, ), {, final, boolean, assumeMinimumCapture, =, this, ., assumeMinimumCapture, ;, boolean, fnContainsVars, =]
[fnNode, ,, Set, <, String, >, namesToAlias, ), {, final, boolean, assumeMinimumCapture, =, this, ., assumeMinimumCapture, ;, boolean, fnContainsVars, =]
[String, >, namesToAlias, ), {, final, boolean, assumeMinimumCapture, =, this, ., assumeMinimumCapture, ;, boolean, fnContainsVars, =, NodeUtil, ., has, (]
[String, >, namesToAlias, ), {, final, boolean, assumeMinimumCapture, =, this, ., assumeMinimumCapture, ;, boolean, fnContainsVars, =, NodeUtil, ., has, (]
[{, final, boolean, assumeMinimumCapture, =, this, ., assumeMinimumCapture, ;, boolean, fnContainsVars, =, NodeUtil, ., has, (, NodeUtil, ., getFunctionBody, (]
[assumeMinimumCapture, =, this, ., assumeMinimumCapture, ;, boolean, fnContainsVars, =, NodeUtil, ., has, (, NodeUtil, ., getFunctionBody, (, fnNode, ), ,]
[fnContainsVars, =, NodeUtil, ., has, (, NodeUtil, ., getFunctionBody, (, fnNode, ), ,, new, NodeUtil, ., MatchDeclaration, (, ), ,]
[), ,, new, NodeUtil, ., MatchDeclaration, (, ), ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, boolean, forbidTemps, =]
[., MatchDeclaration, (, ), ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, boolean, forbidTemps, =, false, ;, if, (]
[MatchDeclaration, (, ), ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, boolean, forbidTemps, =, false, ;, if, (, !]
[MatchDeclaration, (, ), ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, boolean, forbidTemps, =, false, ;, if, (, !]
[), ;, boolean, forbidTemps, =, false, ;, if, (, !, t, ., inGlobalScope, (, ), ), {, Node, fnCaller, =]
[), ;, boolean, forbidTemps, =, false, ;, if, (, !, t, ., inGlobalScope, (, ), ), {, Node, fnCaller, =]
[!, t, ., inGlobalScope, (, ), ), {, Node, fnCaller, =, t, ., getScopeRoot, (, ), ;, Node, fnCallerBody, =]
[!, t, ., inGlobalScope, (, ), ), {, Node, fnCaller, =, t, ., getScopeRoot, (, ), ;, Node, fnCallerBody, =]
[., getScopeRoot, (, ), ;, Node, fnCallerBody, =, fnCaller, ., getLastChild, (, ), ;, Predicate, <, Node, >, match, =]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, n, ), {, if, (]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, n, ), {, if, (]
[@, Override, public, boolean, apply, (, Node, n, ), {, if, (, n, ., isName, (, ), ), {, return]
[@, Override, public, boolean, apply, (, Node, n, ), {, if, (, n, ., isName, (, ), ), {, return]
[@, Override, public, boolean, apply, (, Node, n, ), {, if, (, n, ., isName, (, ), ), {, return]
[), {, if, (, n, ., isName, (, ), ), {, return, n, ., getString, (, ), ., equals, (]
[isName, (, ), ), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ;, }, if, (]
[isName, (, ), ), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ;, }, if, (]
[(, ), ), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ;, }, if, (, !]
[), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ;, }, if, (, !, assumeMinimumCapture, &&]
[), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ;, }, if, (, !, assumeMinimumCapture, &&]
[., equals, (, "eval", ), ;, }, if, (, !, assumeMinimumCapture, &&, n, ., isFunction, (, ), ), {, return]
[., equals, (, "eval", ), ;, }, if, (, !, assumeMinimumCapture, &&, n, ., isFunction, (, ), ), {, return]
[(, "eval", ), ;, }, if, (, !, assumeMinimumCapture, &&, n, ., isFunction, (, ), ), {, return, n, !=]
[}, if, (, !, assumeMinimumCapture, &&, n, ., isFunction, (, ), ), {, return, n, !=, fnNode, ;, }, return]
[&&, n, ., isFunction, (, ), ), {, return, n, !=, fnNode, ;, }, return, false, ;, }, }, ;]
[., isFunction, (, ), ), {, return, n, !=, fnNode, ;, }, return, false, ;, }, }, ;, forbidTemps, =]
[., isFunction, (, ), ), {, return, n, !=, fnNode, ;, }, return, false, ;, }, }, ;, forbidTemps, =]
[), {, return, n, !=, fnNode, ;, }, return, false, ;, }, }, ;, forbidTemps, =, NodeUtil, ., has, (]
[return, n, !=, fnNode, ;, }, return, false, ;, }, }, ;, forbidTemps, =, NodeUtil, ., has, (, fnCallerBody, ,]
[!=, fnNode, ;, }, return, false, ;, }, }, ;, forbidTemps, =, NodeUtil, ., has, (, fnCallerBody, ,, match, ,]
[!=, fnNode, ;, }, return, false, ;, }, }, ;, forbidTemps, =, NodeUtil, ., has, (, fnCallerBody, ,, match, ,]
[}, ;, forbidTemps, =, NodeUtil, ., has, (, fnCallerBody, ,, match, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, if, (]
[}, ;, forbidTemps, =, NodeUtil, ., has, (, fnCallerBody, ,, match, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, if, (]
[forbidTemps, =, NodeUtil, ., has, (, fnCallerBody, ,, match, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, if, (, fnContainsVars, &&]
[has, (, fnCallerBody, ,, match, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, if, (, fnContainsVars, &&, forbidTemps, ), {, return]
[,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, if, (, fnContainsVars, &&, forbidTemps, ), {, return, false, ;, }, if, (]
[forbidTemps, ), {, return, false, ;, }, if, (, forbidTemps, ), {, Map, <, String, ,, Node, >, args, =]
[forbidTemps, ), {, return, false, ;, }, if, (, forbidTemps, ), {, Map, <, String, ,, Node, >, args, =]
[false, ;, }, if, (, forbidTemps, ), {, Map, <, String, ,, Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (]
[}, if, (, forbidTemps, ), {, Map, <, String, ,, Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,]
[(, forbidTemps, ), {, Map, <, String, ,, Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,]
[(, forbidTemps, ), {, Map, <, String, ,, Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,]
[Node, >, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =]
[>, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !]
[>, args, =, FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !]
[,, callNode, ,, this, ., safeNameIdSupplier, ), ;, boolean, hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (]
[hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, ), {, Set, <, String, >, allNamesToAlias, =]
[hasArgs, =, !, args, ., isEmpty, (, ), ;, if, (, hasArgs, ), {, Set, <, String, >, allNamesToAlias, =]
[., isEmpty, (, ), ;, if, (, hasArgs, ), {, Set, <, String, >, allNamesToAlias, =, Sets, ., newHashSet, (]
[), ;, if, (, hasArgs, ), {, Set, <, String, >, allNamesToAlias, =, Sets, ., newHashSet, (, namesToAlias, ), ;]
[), ;, if, (, hasArgs, ), {, Set, <, String, >, allNamesToAlias, =, Sets, ., newHashSet, (, namesToAlias, ), ;]
[hasArgs, ), {, Set, <, String, >, allNamesToAlias, =, Sets, ., newHashSet, (, namesToAlias, ), ;, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (]
[{, Set, <, String, >, allNamesToAlias, =, Sets, ., newHashSet, (, namesToAlias, ), ;, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, fnNode, ,]
[<, String, >, allNamesToAlias, =, Sets, ., newHashSet, (, namesToAlias, ), ;, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, fnNode, ,, args, ,]
[>, allNamesToAlias, =, Sets, ., newHashSet, (, namesToAlias, ), ;, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, fnNode, ,, args, ,, allNamesToAlias, ,]
[>, allNamesToAlias, =, Sets, ., newHashSet, (, namesToAlias, ), ;, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, fnNode, ,, args, ,, allNamesToAlias, ,]
[;, FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, fnNode, ,, args, ,, allNamesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, if, (]
[FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, fnNode, ,, args, ,, allNamesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, if, (, !]
[FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, fnNode, ,, args, ,, allNamesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, if, (, !]
[allNamesToAlias, ,, compiler, ., getCodingConvention, (, ), ), ;, if, (, !, allNamesToAlias, ., isEmpty, (, ), ), {, return]
[), ), ;, if, (, !, allNamesToAlias, ., isEmpty, (, ), ), {, return, false, ;, }, }, }, return]
[}, }, }, return, true, ;, }, private, CanInlineResult, canInlineReferenceDirectly, (, Node, callNode, ,, Node, fnNode, ), {, if, (]
[}, }, return, true, ;, }, private, CanInlineResult, canInlineReferenceDirectly, (, Node, callNode, ,, Node, fnNode, ), {, if, (, !]
[return, true, ;, }, private, CanInlineResult, canInlineReferenceDirectly, (, Node, callNode, ,, Node, fnNode, ), {, if, (, !, isDirectCallNodeReplacementPossible, (]
[CanInlineResult, canInlineReferenceDirectly, (, Node, callNode, ,, Node, fnNode, ), {, if, (, !, isDirectCallNodeReplacementPossible, (, fnNode, ), ), {, return]
[CanInlineResult, canInlineReferenceDirectly, (, Node, callNode, ,, Node, fnNode, ), {, if, (, !, isDirectCallNodeReplacementPossible, (, fnNode, ), ), {, return]
[), {, if, (, !, isDirectCallNodeReplacementPossible, (, fnNode, ), ), {, return, CanInlineResult, ., NO, ;, }, Node, block, =]
[), {, if, (, !, isDirectCallNodeReplacementPossible, (, fnNode, ), ), {, return, CanInlineResult, ., NO, ;, }, Node, block, =]
[), {, return, CanInlineResult, ., NO, ;, }, Node, block, =, fnNode, ., getLastChild, (, ), ;, Node, cArg, =]
[), {, return, CanInlineResult, ., NO, ;, }, Node, block, =, fnNode, ., getLastChild, (, ), ;, Node, cArg, =]
[), {, return, CanInlineResult, ., NO, ;, }, Node, block, =, fnNode, ., getLastChild, (, ), ;, Node, cArg, =]
[., getLastChild, (, ), ;, Node, cArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[getLastChild, (, ), ;, Node, cArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !]
[getLastChild, (, ), ;, Node, cArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !]
[getLastChild, (, ), ;, Node, cArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !]
[getNext, (, ), ;, if, (, !, callNode, ., getFirstChild, (, ), ., isName, (, ), ), {, if, (]
[getNext, (, ), ;, if, (, !, callNode, ., getFirstChild, (, ), ., isName, (, ), ), {, if, (]
[if, (, !, callNode, ., getFirstChild, (, ), ., isName, (, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (]
[(, ), ., isName, (, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (]
[(, ), ., isName, (, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (]
[(, ), ., isName, (, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (]
[., isName, (, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, cArg, ==]
[(, ), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, cArg, ==, null, ||]
[), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, cArg, ==, null, ||, !]
[), ), {, if, (, NodeUtil, ., isFunctionObjectCall, (, callNode, ), ), {, if, (, cArg, ==, null, ||, !]
[(, callNode, ), ), {, if, (, cArg, ==, null, ||, !, cArg, ., isThis, (, ), ), {, return]
[(, callNode, ), ), {, if, (, cArg, ==, null, ||, !, cArg, ., isThis, (, ), ), {, return]
[if, (, cArg, ==, null, ||, !, cArg, ., isThis, (, ), ), {, return, CanInlineResult, ., NO, ;, }]
[cArg, ==, null, ||, !, cArg, ., isThis, (, ), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =]
[cArg, ==, null, ||, !, cArg, ., isThis, (, ), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =]
[), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, else, {]
[), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, else, {]
[CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (]
[., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (, !]
[., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (, !]
[cArg, =, cArg, ., getNext, (, ), ;, }, else, {, Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (]
[else, {, Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), ;, }, }, Node, fnParam, =]
[else, {, Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), ;, }, }, Node, fnParam, =]
[else, {, Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), ;, }, }, Node, fnParam, =]
[checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), ), ;, }, }, Node, fnParam, =, NodeUtil, ., getFunctionParameters, (]
[), ;, }, }, Node, fnParam, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, while, (]
[), ;, }, }, Node, fnParam, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, while, (]
[), ;, }, }, Node, fnParam, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, while, (]
[}, }, Node, fnParam, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, while, (, cArg, !=]
[Node, fnParam, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, while, (, cArg, !=, null, ||]
[Node, fnParam, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, while, (, cArg, !=, null, ||]
[=, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, while, (, cArg, !=, null, ||, fnParam, !=]
[fnNode, ), ., getFirstChild, (, ), ;, while, (, cArg, !=, null, ||, fnParam, !=, null, ), {, if, (]
[fnNode, ), ., getFirstChild, (, ), ;, while, (, cArg, !=, null, ||, fnParam, !=, null, ), {, if, (]
[., getFirstChild, (, ), ;, while, (, cArg, !=, null, ||, fnParam, !=, null, ), {, if, (, fnParam, !=]
[while, (, cArg, !=, null, ||, fnParam, !=, null, ), {, if, (, fnParam, !=, null, ), {, if, (]
[while, (, cArg, !=, null, ||, fnParam, !=, null, ), {, if, (, fnParam, !=, null, ), {, if, (]
[cArg, !=, null, ||, fnParam, !=, null, ), {, if, (, fnParam, !=, null, ), {, if, (, cArg, !=]
[!=, null, ), {, if, (, fnParam, !=, null, ), {, if, (, cArg, !=, null, ), {, if, (]
[!=, null, ), {, if, (, fnParam, !=, null, ), {, if, (, cArg, !=, null, ), {, if, (]
[!=, null, ), {, if, (, fnParam, !=, null, ), {, if, (, cArg, !=, null, ), {, if, (]
[if, (, fnParam, !=, null, ), {, if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayEffectMutableState, (]
[fnParam, !=, null, ), {, if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ,]
[), {, if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler, ), &&]
[), {, if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler, ), &&]
[), {, if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler, ), &&]
[cArg, !=, null, ), {, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler, ), &&, NodeUtil, ., getNameReferenceCount, (]
[null, ), {, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler, ), &&, NodeUtil, ., getNameReferenceCount, (, block, ,]
[null, ), {, if, (, NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler, ), &&, NodeUtil, ., getNameReferenceCount, (, block, ,]
[mayEffectMutableState, (, cArg, ,, compiler, ), &&, NodeUtil, ., getNameReferenceCount, (, block, ,, fnParam, ., getString, (, ), ), >]
[compiler, ), &&, NodeUtil, ., getNameReferenceCount, (, block, ,, fnParam, ., getString, (, ), ), >, 1, ), {, return]
[compiler, ), &&, NodeUtil, ., getNameReferenceCount, (, block, ,, fnParam, ., getString, (, ), ), >, 1, ), {, return]
[(, block, ,, fnParam, ., getString, (, ), ), >, 1, ), {, return, CanInlineResult, ., NO, ;, }, }]
[,, fnParam, ., getString, (, ), ), >, 1, ), {, return, CanInlineResult, ., NO, ;, }, }, fnParam, =]
[,, fnParam, ., getString, (, ), ), >, 1, ), {, return, CanInlineResult, ., NO, ;, }, }, fnParam, =]
[), {, return, CanInlineResult, ., NO, ;, }, }, fnParam, =, fnParam, ., getNext, (, ), ;, }, if, (]
[), {, return, CanInlineResult, ., NO, ;, }, }, fnParam, =, fnParam, ., getNext, (, ), ;, }, if, (]
[return, CanInlineResult, ., NO, ;, }, }, fnParam, =, fnParam, ., getNext, (, ), ;, }, if, (, cArg, !=]
[}, }, fnParam, =, fnParam, ., getNext, (, ), ;, }, if, (, cArg, !=, null, ), {, if, (]
[}, }, fnParam, =, fnParam, ., getNext, (, ), ;, }, if, (, cArg, !=, null, ), {, if, (]
[fnParam, ., getNext, (, ), ;, }, if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayHaveSideEffects, (]
[getNext, (, ), ;, }, if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ,]
[if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ,, compiler, ), ), {, return]
[if, (, cArg, !=, null, ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ,, compiler, ), ), {, return]
[), {, if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ,, compiler, ), ), {, return, CanInlineResult, ., NO, ;, }]
[if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ,, compiler, ), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =]
[if, (, NodeUtil, ., mayHaveSideEffects, (, cArg, ,, compiler, ), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =]
[), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, }, return]
[), ), {, return, CanInlineResult, ., NO, ;, }, cArg, =, cArg, ., getNext, (, ), ;, }, }, return]
[Reference, >, refs, ,, Set, <, String, >, namesToAlias, ,, boolean, isRemovable, ,, boolean, referencesThis, ), {, int, referenceCount, =]
[Reference, >, refs, ,, Set, <, String, >, namesToAlias, ,, boolean, isRemovable, ,, boolean, referencesThis, ), {, int, referenceCount, =]
[namesToAlias, ,, boolean, isRemovable, ,, boolean, referencesThis, ), {, int, referenceCount, =, refs, ., size, (, ), ;, if, (]
[namesToAlias, ,, boolean, isRemovable, ,, boolean, referencesThis, ), {, int, referenceCount, =, refs, ., size, (, ), ;, if, (]
[boolean, isRemovable, ,, boolean, referencesThis, ), {, int, referenceCount, =, refs, ., size, (, ), ;, if, (, referenceCount, ==]
[referencesThis, ), {, int, referenceCount, =, refs, ., size, (, ), ;, if, (, referenceCount, ==, 0, ), {, return]
[refs, ., size, (, ), ;, if, (, referenceCount, ==, 0, ), {, return, true, ;, }, int, referencesUsingBlockInlining, =]
[;, if, (, referenceCount, ==, 0, ), {, return, true, ;, }, int, referencesUsingBlockInlining, =, 0, ;, boolean, checkModules, =]
[;, if, (, referenceCount, ==, 0, ), {, return, true, ;, }, int, referencesUsingBlockInlining, =, 0, ;, boolean, checkModules, =]
[(, referenceCount, ==, 0, ), {, return, true, ;, }, int, referencesUsingBlockInlining, =, 0, ;, boolean, checkModules, =, isRemovable, &&]
[(, referenceCount, ==, 0, ), {, return, true, ;, }, int, referencesUsingBlockInlining, =, 0, ;, boolean, checkModules, =, isRemovable, &&]
[==, 0, ), {, return, true, ;, }, int, referencesUsingBlockInlining, =, 0, ;, boolean, checkModules, =, isRemovable, &&, fnModule, !=]
[true, ;, }, int, referencesUsingBlockInlining, =, 0, ;, boolean, checkModules, =, isRemovable, &&, fnModule, !=, null, ;, JSModuleGraph, moduleGraph, =]
[true, ;, }, int, referencesUsingBlockInlining, =, 0, ;, boolean, checkModules, =, isRemovable, &&, fnModule, !=, null, ;, JSModuleGraph, moduleGraph, =]
[isRemovable, &&, fnModule, !=, null, ;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Reference, ref, :]
[;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Reference, ref, :, refs, ), {, if, (]
[;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Reference, ref, :, refs, ), {, if, (]
[;, JSModuleGraph, moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, for, (, Reference, ref, :, refs, ), {, if, (]
[compiler, ., getModuleGraph, (, ), ;, for, (, Reference, ref, :, refs, ), {, if, (, ref, ., mode, ==]
[compiler, ., getModuleGraph, (, ), ;, for, (, Reference, ref, :, refs, ), {, if, (, ref, ., mode, ==]
[;, for, (, Reference, ref, :, refs, ), {, if, (, ref, ., mode, ==, InliningMode, ., BLOCK, ), {]
[;, for, (, Reference, ref, :, refs, ), {, if, (, ref, ., mode, ==, InliningMode, ., BLOCK, ), {]
[refs, ), {, if, (, ref, ., mode, ==, InliningMode, ., BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (]
[refs, ), {, if, (, ref, ., mode, ==, InliningMode, ., BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (]
[{, if, (, ref, ., mode, ==, InliningMode, ., BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules, &&]
[{, if, (, ref, ., mode, ==, InliningMode, ., BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules, &&]
[{, if, (, ref, ., mode, ==, InliningMode, ., BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules, &&]
[., mode, ==, InliningMode, ., BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules, &&, ref, ., module, !=]
[BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules, &&, ref, ., module, !=, null, ), {, if, (]
[BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules, &&, ref, ., module, !=, null, ), {, if, (]
[BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules, &&, ref, ., module, !=, null, ), {, if, (]
[BLOCK, ), {, referencesUsingBlockInlining, ++, ;, }, if, (, checkModules, &&, ref, ., module, !=, null, ), {, if, (]
[++, ;, }, if, (, checkModules, &&, ref, ., module, !=, null, ), {, if, (, ref, ., module, !=]
[}, if, (, checkModules, &&, ref, ., module, !=, null, ), {, if, (, ref, ., module, !=, fnModule, &&]
[if, (, checkModules, &&, ref, ., module, !=, null, ), {, if, (, ref, ., module, !=, fnModule, &&, !]
[if, (, checkModules, &&, ref, ., module, !=, null, ), {, if, (, ref, ., module, !=, fnModule, &&, !]
[ref, ., module, !=, null, ), {, if, (, ref, ., module, !=, fnModule, &&, !, moduleGraph, ., dependsOn, (]
[ref, ., module, !=, null, ), {, if, (, ref, ., module, !=, fnModule, &&, !, moduleGraph, ., dependsOn, (]
[null, ), {, if, (, ref, ., module, !=, fnModule, &&, !, moduleGraph, ., dependsOn, (, ref, ., module, ,]
[(, ref, ., module, !=, fnModule, &&, !, moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule, ), ), {]
[., module, !=, fnModule, &&, !, moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule, ), ), {, isRemovable, =]
[!=, fnModule, &&, !, moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule, ), ), {, isRemovable, =, false, ;]
[&&, !, moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule, ), ), {, isRemovable, =, false, ;, checkModules, =]
[module, ,, fnModule, ), ), {, isRemovable, =, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =]
[module, ,, fnModule, ), ), {, isRemovable, =, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =]
[fnModule, ), ), {, isRemovable, =, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -]
[isRemovable, =, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (]
[isRemovable, =, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (]
[isRemovable, =, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (]
[isRemovable, =, false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (]
[false, ;, checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (, referenceCount, ==]
[checkModules, =, false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (, referenceCount, ==, 1, &&]
[false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (, referenceCount, ==, 1, &&, isRemovable, &&]
[false, ;, }, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (, referenceCount, ==, 1, &&, isRemovable, &&]
[}, }, }, int, referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (, referenceCount, ==, 1, &&, isRemovable, &&, referencesUsingDirectInlining, ==]
[referencesUsingDirectInlining, =, referenceCount, -, referencesUsingBlockInlining, ;, if, (, referenceCount, ==, 1, &&, isRemovable, &&, referencesUsingDirectInlining, ==, 1, ), {, return]
[if, (, referenceCount, ==, 1, &&, isRemovable, &&, referencesUsingDirectInlining, ==, 1, ), {, return, true, ;, }, int, callCost, =]
[referenceCount, ==, 1, &&, isRemovable, &&, referencesUsingDirectInlining, ==, 1, ), {, return, true, ;, }, int, callCost, =, estimateCallCost, (]
[1, &&, isRemovable, &&, referencesUsingDirectInlining, ==, 1, ), {, return, true, ;, }, int, callCost, =, estimateCallCost, (, fnNode, ,]
[1, ), {, return, true, ;, }, int, callCost, =, estimateCallCost, (, fnNode, ,, referencesThis, ), ;, int, overallCallCost, =]
[1, ), {, return, true, ;, }, int, callCost, =, estimateCallCost, (, fnNode, ,, referencesThis, ), ;, int, overallCallCost, =]
[{, return, true, ;, }, int, callCost, =, estimateCallCost, (, fnNode, ,, referencesThis, ), ;, int, overallCallCost, =, callCost, *]
[int, callCost, =, estimateCallCost, (, fnNode, ,, referencesThis, ), ;, int, overallCallCost, =, callCost, *, referenceCount, ;, int, costDeltaDirect, =]
[=, estimateCallCost, (, fnNode, ,, referencesThis, ), ;, int, overallCallCost, =, callCost, *, referenceCount, ;, int, costDeltaDirect, =, inlineCostDelta, (]
[(, fnNode, ,, referencesThis, ), ;, int, overallCallCost, =, callCost, *, referenceCount, ;, int, costDeltaDirect, =, inlineCostDelta, (, fnNode, ,]
[,, referencesThis, ), ;, int, overallCallCost, =, callCost, *, referenceCount, ;, int, costDeltaDirect, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,]
[,, referencesThis, ), ;, int, overallCallCost, =, callCost, *, referenceCount, ;, int, costDeltaDirect, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,]
[*, referenceCount, ;, int, costDeltaDirect, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., DIRECT, ), ;, int, costDeltaBlock, =]
[;, int, costDeltaDirect, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., DIRECT, ), ;, int, costDeltaBlock, =, inlineCostDelta, (]
[costDeltaDirect, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., DIRECT, ), ;, int, costDeltaBlock, =, inlineCostDelta, (, fnNode, ,]
[inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., DIRECT, ), ;, int, costDeltaBlock, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,]
[inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., DIRECT, ), ;, int, costDeltaBlock, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,]
[InliningMode, ., DIRECT, ), ;, int, costDeltaBlock, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., BLOCK, ), ;, return]
[DIRECT, ), ;, int, costDeltaBlock, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., BLOCK, ), ;, return, doesLowerCost, (]
[;, int, costDeltaBlock, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., BLOCK, ), ;, return, doesLowerCost, (, fnNode, ,]
[costDeltaBlock, =, inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., BLOCK, ), ;, return, doesLowerCost, (, fnNode, ,, overallCallCost, ,]
[inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., BLOCK, ), ;, return, doesLowerCost, (, fnNode, ,, overallCallCost, ,, referencesUsingDirectInlining, ,]
[fnNode, ,, namesToAlias, ,, InliningMode, ., BLOCK, ), ;, return, doesLowerCost, (, fnNode, ,, overallCallCost, ,, referencesUsingDirectInlining, ,, costDeltaDirect, ,]
[namesToAlias, ,, InliningMode, ., BLOCK, ), ;, return, doesLowerCost, (, fnNode, ,, overallCallCost, ,, referencesUsingDirectInlining, ,, costDeltaDirect, ,, referencesUsingBlockInlining, ,]
[InliningMode, ., BLOCK, ), ;, return, doesLowerCost, (, fnNode, ,, overallCallCost, ,, referencesUsingDirectInlining, ,, costDeltaDirect, ,, referencesUsingBlockInlining, ,, costDeltaBlock, ,]
[,, int, directInlines, ,, int, costDeltaDirect, ,, int, blockInlines, ,, int, costDeltaBlock, ,, boolean, removable, ), {, int, fnInstanceCount, =]
[,, int, directInlines, ,, int, costDeltaDirect, ,, int, blockInlines, ,, int, costDeltaBlock, ,, boolean, removable, ), {, int, fnInstanceCount, =]
[,, int, directInlines, ,, int, costDeltaDirect, ,, int, blockInlines, ,, int, costDeltaBlock, ,, boolean, removable, ), {, int, fnInstanceCount, =]
[directInlines, ,, int, costDeltaDirect, ,, int, blockInlines, ,, int, costDeltaBlock, ,, boolean, removable, ), {, int, fnInstanceCount, =, directInlines, +]
[int, costDeltaDirect, ,, int, blockInlines, ,, int, costDeltaBlock, ,, boolean, removable, ), {, int, fnInstanceCount, =, directInlines, +, blockInlines, -]
[costDeltaDirect, ,, int, blockInlines, ,, int, costDeltaBlock, ,, boolean, removable, ), {, int, fnInstanceCount, =, directInlines, +, blockInlines, -, (]
[costDeltaDirect, ,, int, blockInlines, ,, int, costDeltaBlock, ,, boolean, removable, ), {, int, fnInstanceCount, =, directInlines, +, blockInlines, -, (]
[int, blockInlines, ,, int, costDeltaBlock, ,, boolean, removable, ), {, int, fnInstanceCount, =, directInlines, +, blockInlines, -, (, removable, ?]
[,, int, costDeltaBlock, ,, boolean, removable, ), {, int, fnInstanceCount, =, directInlines, +, blockInlines, -, (, removable, ?, 1, :]
[removable, ), {, int, fnInstanceCount, =, directInlines, +, blockInlines, -, (, removable, ?, 1, :, 0, ), ;, if, (]
[removable, ), {, int, fnInstanceCount, =, directInlines, +, blockInlines, -, (, removable, ?, 1, :, 0, ), ;, if, (]
[{, int, fnInstanceCount, =, directInlines, +, blockInlines, -, (, removable, ?, 1, :, 0, ), ;, if, (, fnInstanceCount, ==]
[+, blockInlines, -, (, removable, ?, 1, :, 0, ), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (]
[+, blockInlines, -, (, removable, ?, 1, :, 0, ), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (]
[+, blockInlines, -, (, removable, ?, 1, :, 0, ), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (]
[-, (, removable, ?, 1, :, 0, ), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (, blockInlines, >]
[removable, ?, 1, :, 0, ), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (, blockInlines, >, 0, &&]
[removable, ?, 1, :, 0, ), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (, blockInlines, >, 0, &&]
[1, :, 0, ), ;, if, (, fnInstanceCount, ==, 0, ), {, if, (, blockInlines, >, 0, &&, costDeltaBlock, >]
[;, if, (, fnInstanceCount, ==, 0, ), {, if, (, blockInlines, >, 0, &&, costDeltaBlock, >, 0, ), {, return]
[==, 0, ), {, if, (, blockInlines, >, 0, &&, costDeltaBlock, >, 0, ), {, return, false, ;, }, return]
[blockInlines, >, 0, &&, costDeltaBlock, >, 0, ), {, return, false, ;, }, return, true, ;, }, int, costDelta, =]
[blockInlines, >, 0, &&, costDeltaBlock, >, 0, ), {, return, false, ;, }, return, true, ;, }, int, costDelta, =]
[>, 0, &&, costDeltaBlock, >, 0, ), {, return, false, ;, }, return, true, ;, }, int, costDelta, =, (]
[>, 0, &&, costDeltaBlock, >, 0, ), {, return, false, ;, }, return, true, ;, }, int, costDelta, =, (]
[&&, costDeltaBlock, >, 0, ), {, return, false, ;, }, return, true, ;, }, int, costDelta, =, (, directInlines, *]
[0, ), {, return, false, ;, }, return, true, ;, }, int, costDelta, =, (, directInlines, *, costDeltaDirect, ), +]
[), {, return, false, ;, }, return, true, ;, }, int, costDelta, =, (, directInlines, *, costDeltaDirect, ), +, (]
[), {, return, false, ;, }, return, true, ;, }, int, costDelta, =, (, directInlines, *, costDeltaDirect, ), +, (]
[return, false, ;, }, return, true, ;, }, int, costDelta, =, (, directInlines, *, costDeltaDirect, ), +, (, blockInlines, *]
[;, }, int, costDelta, =, (, directInlines, *, costDeltaDirect, ), +, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =]
[;, }, int, costDelta, =, (, directInlines, *, costDeltaDirect, ), +, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =]
[}, int, costDelta, =, (, directInlines, *, costDeltaDirect, ), +, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =, (]
[}, int, costDelta, =, (, directInlines, *, costDeltaDirect, ), +, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =, (]
[costDelta, =, (, directInlines, *, costDeltaDirect, ), +, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =, (, callCost, -]
[directInlines, *, costDeltaDirect, ), +, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =, (, callCost, -, costDelta, ), /]
[), +, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return]
[), +, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return]
[), +, (, blockInlines, *, costDeltaBlock, ), ;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return]
[*, costDeltaBlock, ), ;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (]
[), ;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (, fnNode, ,]
[), ;, int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (, fnNode, ,]
[int, threshold, =, (, callCost, -, costDelta, ), /, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (, fnNode, ,, threshold, +]
[(, callCost, -, costDelta, ), /, fnInstanceCount, ;, return, InlineCostEstimator, ., getCost, (, fnNode, ,, threshold, +, 1, ), <=]
[), <=, threshold, ;, }, private, static, int, estimateCallCost, (, Node, fnNode, ,, boolean, referencesThis, ), {, Node, argsNode, =]
[), <=, threshold, ;, }, private, static, int, estimateCallCost, (, Node, fnNode, ,, boolean, referencesThis, ), {, Node, argsNode, =]
[}, private, static, int, estimateCallCost, (, Node, fnNode, ,, boolean, referencesThis, ), {, Node, argsNode, =, NodeUtil, ., getFunctionParameters, (]
[Node, fnNode, ,, boolean, referencesThis, ), {, Node, argsNode, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ;, int, numArgs, =]
[Node, fnNode, ,, boolean, referencesThis, ), {, Node, argsNode, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ;, int, numArgs, =]
[=, NodeUtil, ., getFunctionParameters, (, fnNode, ), ;, int, numArgs, =, argsNode, ., getChildCount, (, ), ;, int, callCost, =]
[=, NodeUtil, ., getFunctionParameters, (, fnNode, ), ;, int, numArgs, =, argsNode, ., getChildCount, (, ), ;, int, callCost, =]
[., getFunctionParameters, (, fnNode, ), ;, int, numArgs, =, argsNode, ., getChildCount, (, ), ;, int, callCost, =, NAME_COST_ESTIMATE, +]
[), ;, int, numArgs, =, argsNode, ., getChildCount, (, ), ;, int, callCost, =, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (]
[), ;, int, numArgs, =, argsNode, ., getChildCount, (, ), ;, int, callCost, =, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (]
[int, numArgs, =, argsNode, ., getChildCount, (, ), ;, int, callCost, =, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (, numArgs, >]
[argsNode, ., getChildCount, (, ), ;, int, callCost, =, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (, numArgs, >, 0, ), {]
[getChildCount, (, ), ;, int, callCost, =, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (, numArgs, >, 0, ), {, callCost, +=]
[getChildCount, (, ), ;, int, callCost, =, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (, numArgs, >, 0, ), {, callCost, +=]
[(, ), ;, int, callCost, =, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (, numArgs, >, 0, ), {, callCost, +=, (]
[(, ), ;, int, callCost, =, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (, numArgs, >, 0, ), {, callCost, +=, (]
[;, int, callCost, =, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (, numArgs, >, 0, ), {, callCost, +=, (, numArgs, *]
[=, NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (, numArgs, >, 0, ), {, callCost, +=, (, numArgs, *, NAME_COST_ESTIMATE, ), +]
[NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (, numArgs, >, 0, ), {, callCost, +=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (]
[NAME_COST_ESTIMATE, +, PAREN_COST, ;, if, (, numArgs, >, 0, ), {, callCost, +=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (]
[+, PAREN_COST, ;, if, (, numArgs, >, 0, ), {, callCost, +=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (, (]
[+, PAREN_COST, ;, if, (, numArgs, >, 0, ), {, callCost, +=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (, (]
[;, if, (, numArgs, >, 0, ), {, callCost, +=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (, (, numArgs, -]
[numArgs, >, 0, ), {, callCost, +=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (, (, numArgs, -, 1, ), *]
[+=, (, numArgs, *, NAME_COST_ESTIMATE, ), +, (, (, numArgs, -, 1, ), *, COMMA_COST, ), ;, }, if, (]
[*, NAME_COST_ESTIMATE, ), +, (, (, numArgs, -, 1, ), *, COMMA_COST, ), ;, }, if, (, referencesThis, ), {]
[), +, (, (, numArgs, -, 1, ), *, COMMA_COST, ), ;, }, if, (, referencesThis, ), {, callCost, +=]
[), +, (, (, numArgs, -, 1, ), *, COMMA_COST, ), ;, }, if, (, referencesThis, ), {, callCost, +=]
[(, (, numArgs, -, 1, ), *, COMMA_COST, ), ;, }, if, (, referencesThis, ), {, callCost, +=, 5, +]
[1, ), *, COMMA_COST, ), ;, }, if, (, referencesThis, ), {, callCost, +=, 5, +, 5, ;, }, return]
[static, int, inlineCostDelta, (, Node, fnNode, ,, Set, <, String, >, namesToAlias, ,, InliningMode, mode, ), {, int, paramCount, =]
[static, int, inlineCostDelta, (, Node, fnNode, ,, Set, <, String, >, namesToAlias, ,, InliningMode, mode, ), {, int, paramCount, =]
[static, int, inlineCostDelta, (, Node, fnNode, ,, Set, <, String, >, namesToAlias, ,, InliningMode, mode, ), {, int, paramCount, =]
[Node, fnNode, ,, Set, <, String, >, namesToAlias, ,, InliningMode, mode, ), {, int, paramCount, =, NodeUtil, ., getFunctionParameters, (]
[mode, ), {, int, paramCount, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getChildCount, (, ), ;, int, commaCount, =]
[mode, ), {, int, paramCount, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getChildCount, (, ), ;, int, commaCount, =]
[), {, int, paramCount, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getChildCount, (, ), ;, int, commaCount, =, (]
[), {, int, paramCount, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getChildCount, (, ), ;, int, commaCount, =, (]
[int, paramCount, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getChildCount, (, ), ;, int, commaCount, =, (, paramCount, >]
[NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getChildCount, (, ), ;, int, commaCount, =, (, paramCount, >, 1, ), ?]
[NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getChildCount, (, ), ;, int, commaCount, =, (, paramCount, >, 1, ), ?]
[getFunctionParameters, (, fnNode, ), ., getChildCount, (, ), ;, int, commaCount, =, (, paramCount, >, 1, ), ?, paramCount, -]
[fnNode, ), ., getChildCount, (, ), ;, int, commaCount, =, (, paramCount, >, 1, ), ?, paramCount, -, 1, :]
[), ;, int, commaCount, =, (, paramCount, >, 1, ), ?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =]
[), ;, int, commaCount, =, (, paramCount, >, 1, ), ?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =]
[), ;, int, commaCount, =, (, paramCount, >, 1, ), ?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =]
[int, commaCount, =, (, paramCount, >, 1, ), ?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =, 15, +]
[=, (, paramCount, >, 1, ), ?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +]
[(, paramCount, >, 1, ), ?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (]
[(, paramCount, >, 1, ), ?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (]
[>, 1, ), ?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (, paramCount, *]
[>, 1, ), ?, paramCount, -, 1, :, 0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (, paramCount, *]
[0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block, =]
[0, ;, int, costDeltaFunctionOverhead, =, 15, +, commaCount, +, (, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block, =]
[+, (, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block, =, fnNode, ., getLastChild, (, ), ;, if, (]
[(, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block, =, fnNode, ., getLastChild, (, ), ;, if, (, !]
[(, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, ), ;, Node, block, =, fnNode, ., getLastChild, (, ), ;, if, (, !]
[Node, block, =, fnNode, ., getLastChild, (, ), ;, if, (, !, block, ., hasChildren, (, ), ), {, return]
[block, =, fnNode, ., getLastChild, (, ), ;, if, (, !, block, ., hasChildren, (, ), ), {, return, -]
[(, ), ;, if, (, !, block, ., hasChildren, (, ), ), {, return, -, costDeltaFunctionOverhead, ;, }, if, (]
[(, ), ;, if, (, !, block, ., hasChildren, (, ), ), {, return, -, costDeltaFunctionOverhead, ;, }, if, (]
[;, if, (, !, block, ., hasChildren, (, ), ), {, return, -, costDeltaFunctionOverhead, ;, }, if, (, mode, ==]
[;, if, (, !, block, ., hasChildren, (, ), ), {, return, -, costDeltaFunctionOverhead, ;, }, if, (, mode, ==]
[hasChildren, (, ), ), {, return, -, costDeltaFunctionOverhead, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return]
[(, ), ), {, return, -, costDeltaFunctionOverhead, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, -]
[), ), {, return, -, costDeltaFunctionOverhead, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, -, (]
[), ), {, return, -, costDeltaFunctionOverhead, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, -, (]
[{, return, -, costDeltaFunctionOverhead, ;, }, if, (, mode, ==, InliningMode, ., DIRECT, ), {, return, -, (, costDeltaFunctionOverhead, +]
[==, InliningMode, ., DIRECT, ), {, return, -, (, costDeltaFunctionOverhead, +, 7, ), ;, }, else, {, int, aliasCount, =]
[==, InliningMode, ., DIRECT, ), {, return, -, (, costDeltaFunctionOverhead, +, 7, ), ;, }, else, {, int, aliasCount, =]
[+, 7, ), ;, }, else, {, int, aliasCount, =, namesToAlias, ., size, (, ), ;, final, int, INLINE_BLOCK_OVERHEAD, =]
[{, int, aliasCount, =, namesToAlias, ., size, (, ), ;, final, int, INLINE_BLOCK_OVERHEAD, =, 4, ;, final, int, PER_RETURN_OVERHEAD, =]
[size, (, ), ;, final, int, INLINE_BLOCK_OVERHEAD, =, 4, ;, final, int, PER_RETURN_OVERHEAD, =, 2, ;, final, int, PER_RETURN_RESULT_OVERHEAD, =]
[INLINE_BLOCK_OVERHEAD, =, 4, ;, final, int, PER_RETURN_OVERHEAD, =, 2, ;, final, int, PER_RETURN_RESULT_OVERHEAD, =, 3, ;, final, int, PER_ALIAS_OVERHEAD, =]
[int, PER_RETURN_OVERHEAD, =, 2, ;, final, int, PER_RETURN_RESULT_OVERHEAD, =, 3, ;, final, int, PER_ALIAS_OVERHEAD, =, 3, ;, int, returnCount, =]
[int, PER_RETURN_OVERHEAD, =, 2, ;, final, int, PER_RETURN_RESULT_OVERHEAD, =, 3, ;, final, int, PER_ALIAS_OVERHEAD, =, 3, ;, int, returnCount, =]
[;, final, int, PER_RETURN_RESULT_OVERHEAD, =, 3, ;, final, int, PER_ALIAS_OVERHEAD, =, 3, ;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (]
[int, PER_RETURN_RESULT_OVERHEAD, =, 3, ;, final, int, PER_ALIAS_OVERHEAD, =, 3, ;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (, block, ,]
[int, PER_RETURN_RESULT_OVERHEAD, =, 3, ;, final, int, PER_ALIAS_OVERHEAD, =, 3, ;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (, block, ,]
[;, final, int, PER_ALIAS_OVERHEAD, =, 3, ;, int, returnCount, =, NodeUtil, ., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,]
[., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, int, resultCount, =]
[., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, int, resultCount, =]
[getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, int, resultCount, =, (]
[getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, int, resultCount, =, (]
[block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, int, resultCount, =, (, returnCount, >]
[., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, int, resultCount, =, (, returnCount, >, 0, ), ?]
[., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, int, resultCount, =, (, returnCount, >, 0, ), ?]
[,, new, NodeUtil, ., MatchShallowStatement, (, ), ), ;, int, resultCount, =, (, returnCount, >, 0, ), ?, returnCount, -]
[NodeUtil, ., MatchShallowStatement, (, ), ), ;, int, resultCount, =, (, returnCount, >, 0, ), ?, returnCount, -, 1, :]
[), ;, int, resultCount, =, (, returnCount, >, 0, ), ?, returnCount, -, 1, :, 0, ;, int, baseOverhead, =]
[), ;, int, resultCount, =, (, returnCount, >, 0, ), ?, returnCount, -, 1, :, 0, ;, int, baseOverhead, =]
[;, int, resultCount, =, (, returnCount, >, 0, ), ?, returnCount, -, 1, :, 0, ;, int, baseOverhead, =, (]
[;, int, resultCount, =, (, returnCount, >, 0, ), ?, returnCount, -, 1, :, 0, ;, int, baseOverhead, =, (]
[resultCount, =, (, returnCount, >, 0, ), ?, returnCount, -, 1, :, 0, ;, int, baseOverhead, =, (, returnCount, >]
[returnCount, >, 0, ), ?, returnCount, -, 1, :, 0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?]
[0, ), ?, returnCount, -, 1, :, 0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :]
[1, :, 0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =]
[1, :, 0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =]
[1, :, 0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =]
[1, :, 0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =]
[0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +]
[0, ;, int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +]
[int, baseOverhead, =, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +, returnCount, *]
[=, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +]
[=, (, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +]
[returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *]
[0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +]
[0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +]
[?, INLINE_BLOCK_OVERHEAD, :, 0, ;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *]
[0, ;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return]
[;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (]
[;, int, overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (]
[overhead, =, baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD, ;, return, (, overhead, -]
[return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (, Set, <, String, >, knownConstants, ), {]
[return, (, overhead, -, costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (, Set, <, String, >, knownConstants, ), {]
[costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (, Set, <, String, >, knownConstants, ), {, Preconditions, ., checkState, (]
[costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (, Set, <, String, >, knownConstants, ), {, Preconditions, ., checkState, (]
[costDeltaFunctionOverhead, ), ;, }, }, public, void, setKnownConstants, (, Set, <, String, >, knownConstants, ), {, Preconditions, ., checkState, (]
[Set, <, String, >, knownConstants, ), {, Preconditions, ., checkState, (, this, ., knownConstants, ., isEmpty, (, ), ), ;]
[Set, <, String, >, knownConstants, ), {, Preconditions, ., checkState, (, this, ., knownConstants, ., isEmpty, (, ), ), ;]
[knownConstants, ), {, Preconditions, ., checkState, (, this, ., knownConstants, ., isEmpty, (, ), ), ;, this, ., knownConstants, =]
