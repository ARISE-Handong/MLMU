[private, double, baseLog, ;, private, String, baseLabel, ;, private, String, powerLabel, ;, private, boolean, showBase, ;, private, NumberFormat, formatter, =]
[;, private, String, baseLabel, ;, private, String, powerLabel, ;, private, boolean, showBase, ;, private, NumberFormat, formatter, =, new, DecimalFormat, (]
[boolean, showBase, ;, private, NumberFormat, formatter, =, new, DecimalFormat, (, "0.0#", ), ;, public, LogFormat, (, ), {, this, (]
[;, private, NumberFormat, formatter, =, new, DecimalFormat, (, "0.0#", ), ;, public, LogFormat, (, ), {, this, (, 10.0, ,]
[NumberFormat, formatter, =, new, DecimalFormat, (, "0.0#", ), ;, public, LogFormat, (, ), {, this, (, 10.0, ,, "10", ,]
[,, true, ), ;, }, public, LogFormat, (, double, base, ,, String, baseLabel, ,, boolean, showBase, ), {, this, (]
[), ;, }, public, LogFormat, (, double, base, ,, String, baseLabel, ,, boolean, showBase, ), {, this, (, base, ,]
[}, public, LogFormat, (, double, base, ,, String, baseLabel, ,, boolean, showBase, ), {, this, (, base, ,, baseLabel, ,]
[LogFormat, (, double, base, ,, String, baseLabel, ,, boolean, showBase, ), {, this, (, base, ,, baseLabel, ,, "^", ,]
[;, }, public, LogFormat, (, double, base, ,, String, baseLabel, ,, String, powerLabel, ,, boolean, showBase, ), {, if, (]
[;, }, public, LogFormat, (, double, base, ,, String, baseLabel, ,, String, powerLabel, ,, boolean, showBase, ), {, if, (]
[public, LogFormat, (, double, base, ,, String, baseLabel, ,, String, powerLabel, ,, boolean, showBase, ), {, if, (, baseLabel, ==]
[base, ,, String, baseLabel, ,, String, powerLabel, ,, boolean, showBase, ), {, if, (, baseLabel, ==, null, ), {, throw]
[baseLabel, ,, String, powerLabel, ,, boolean, showBase, ), {, if, (, baseLabel, ==, null, ), {, throw, new, IllegalArgumentException, (]
[showBase, ), {, if, (, baseLabel, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'baseLabel' argument.", ), ;, }, if, (]
[showBase, ), {, if, (, baseLabel, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'baseLabel' argument.", ), ;, }, if, (]
[{, if, (, baseLabel, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'baseLabel' argument.", ), ;, }, if, (, powerLabel, ==]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'baseLabel' argument.", ), ;, }, if, (, powerLabel, ==, null, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'baseLabel' argument.", ), ;, }, if, (, powerLabel, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, "Null 'baseLabel' argument.", ), ;, }, if, (, powerLabel, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }]
[(, "Null 'baseLabel' argument.", ), ;, }, if, (, powerLabel, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }]
[}, if, (, powerLabel, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }, this, ., base, =]
[(, powerLabel, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }, this, ., base, =, base, ;]
[(, powerLabel, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }, this, ., base, =, base, ;]
[), {, throw, new, IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }, this, ., base, =, base, ;, this, ., baseLog, =]
[), {, throw, new, IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }, this, ., base, =, base, ;, this, ., baseLog, =]
[IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }, this, ., base, =, base, ;, this, ., baseLog, =, Math, ., log, (]
[IllegalArgumentException, (, "Null 'powerLabel' argument.", ), ;, }, this, ., base, =, base, ;, this, ., baseLog, =, Math, ., log, (]
[}, this, ., base, =, base, ;, this, ., baseLog, =, Math, ., log, (, this, ., base, ), ;]
[}, this, ., base, =, base, ;, this, ., baseLog, =, Math, ., log, (, this, ., base, ), ;]
[=, base, ;, this, ., baseLog, =, Math, ., log, (, this, ., base, ), ;, this, ., baseLabel, =]
[;, this, ., baseLog, =, Math, ., log, (, this, ., base, ), ;, this, ., baseLabel, =, baseLabel, ;]
[;, this, ., baseLog, =, Math, ., log, (, this, ., base, ), ;, this, ., baseLabel, =, baseLabel, ;]
[=, Math, ., log, (, this, ., base, ), ;, this, ., baseLabel, =, baseLabel, ;, this, ., showBase, =]
[., log, (, this, ., base, ), ;, this, ., baseLabel, =, baseLabel, ;, this, ., showBase, =, showBase, ;]
[., log, (, this, ., base, ), ;, this, ., baseLabel, =, baseLabel, ;, this, ., showBase, =, showBase, ;]
[., base, ), ;, this, ., baseLabel, =, baseLabel, ;, this, ., showBase, =, showBase, ;, this, ., powerLabel, =]
[this, ., showBase, =, showBase, ;, this, ., powerLabel, =, powerLabel, ;, }, public, NumberFormat, getExponentFormat, (, ), {, return]
[=, showBase, ;, this, ., powerLabel, =, powerLabel, ;, }, public, NumberFormat, getExponentFormat, (, ), {, return, (, NumberFormat, )]
[=, showBase, ;, this, ., powerLabel, =, powerLabel, ;, }, public, NumberFormat, getExponentFormat, (, ), {, return, (, NumberFormat, )]
[=, showBase, ;, this, ., powerLabel, =, powerLabel, ;, }, public, NumberFormat, getExponentFormat, (, ), {, return, (, NumberFormat, )]
[), this, ., formatter, ., clone, (, ), ;, }, public, void, setExponentFormat, (, NumberFormat, format, ), {, if, (]
[), this, ., formatter, ., clone, (, ), ;, }, public, void, setExponentFormat, (, NumberFormat, format, ), {, if, (]
[., formatter, ., clone, (, ), ;, }, public, void, setExponentFormat, (, NumberFormat, format, ), {, if, (, format, ==]
[(, ), ;, }, public, void, setExponentFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw]
[}, public, void, setExponentFormat, (, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'format' argument.", ), ;, }]
[(, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'format' argument.", ), ;, }]
[{, if, (, format, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'format' argument.", ), ;, }, this, ., formatter, =]
["Null 'format' argument.", ), ;, }, this, ., formatter, =, format, ;, }, private, double, calculateLog, (, double, value, ), {, return]
["Null 'format' argument.", ), ;, }, this, ., formatter, =, format, ;, }, private, double, calculateLog, (, double, value, ), {, return]
["Null 'format' argument.", ), ;, }, this, ., formatter, =, format, ;, }, private, double, calculateLog, (, double, value, ), {, return]
[this, ., formatter, =, format, ;, }, private, double, calculateLog, (, double, value, ), {, return, Math, ., log, (]
[=, format, ;, }, private, double, calculateLog, (, double, value, ), {, return, Math, ., log, (, value, ), /]
[=, format, ;, }, private, double, calculateLog, (, double, value, ), {, return, Math, ., log, (, value, ), /]
[baseLog, ;, }, public, StringBuffer, format, (, double, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, StringBuffer, result, =]
[double, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, StringBuffer, result, =, new, StringBuffer, (, ), ;, if, (]
[double, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, StringBuffer, result, =, new, StringBuffer, (, ), ;, if, (]
[,, FieldPosition, pos, ), {, StringBuffer, result, =, new, StringBuffer, (, ), ;, if, (, this, ., showBase, ), {]
[,, FieldPosition, pos, ), {, StringBuffer, result, =, new, StringBuffer, (, ), ;, if, (, this, ., showBase, ), {]
[{, StringBuffer, result, =, new, StringBuffer, (, ), ;, if, (, this, ., showBase, ), {, result, ., append, (]
[{, StringBuffer, result, =, new, StringBuffer, (, ), ;, if, (, this, ., showBase, ), {, result, ., append, (]
[StringBuffer, (, ), ;, if, (, this, ., showBase, ), {, result, ., append, (, this, ., baseLabel, ), ;]
[StringBuffer, (, ), ;, if, (, this, ., showBase, ), {, result, ., append, (, this, ., baseLabel, ), ;]
[if, (, this, ., showBase, ), {, result, ., append, (, this, ., baseLabel, ), ;, result, ., append, (]
[if, (, this, ., showBase, ), {, result, ., append, (, this, ., baseLabel, ), ;, result, ., append, (]
[{, result, ., append, (, this, ., baseLabel, ), ;, result, ., append, (, this, ., powerLabel, ), ;, }]
[{, result, ., append, (, this, ., baseLabel, ), ;, result, ., append, (, this, ., powerLabel, ), ;, }]
[(, this, ., baseLabel, ), ;, result, ., append, (, this, ., powerLabel, ), ;, }, result, ., append, (]
[(, this, ., baseLabel, ), ;, result, ., append, (, this, ., powerLabel, ), ;, }, result, ., append, (]
[(, this, ., baseLabel, ), ;, result, ., append, (, this, ., powerLabel, ), ;, }, result, ., append, (]
[result, ., append, (, this, ., powerLabel, ), ;, }, result, ., append, (, this, ., formatter, ., format, (]
[append, (, this, ., powerLabel, ), ;, }, result, ., append, (, this, ., formatter, ., format, (, calculateLog, (]
[;, }, result, ., append, (, this, ., formatter, ., format, (, calculateLog, (, number, ), ), ), ;, return]
[result, ;, }, public, StringBuffer, format, (, long, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, StringBuffer, result, =]
[long, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, StringBuffer, result, =, new, StringBuffer, (, ), ;, if, (]
[long, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, StringBuffer, result, =, new, StringBuffer, (, ), ;, if, (]
[,, FieldPosition, pos, ), {, StringBuffer, result, =, new, StringBuffer, (, ), ;, if, (, this, ., showBase, ), {]
[,, FieldPosition, pos, ), {, StringBuffer, result, =, new, StringBuffer, (, ), ;, if, (, this, ., showBase, ), {]
[{, StringBuffer, result, =, new, StringBuffer, (, ), ;, if, (, this, ., showBase, ), {, result, ., append, (]
[{, StringBuffer, result, =, new, StringBuffer, (, ), ;, if, (, this, ., showBase, ), {, result, ., append, (]
[StringBuffer, (, ), ;, if, (, this, ., showBase, ), {, result, ., append, (, this, ., baseLabel, ), ;]
[StringBuffer, (, ), ;, if, (, this, ., showBase, ), {, result, ., append, (, this, ., baseLabel, ), ;]
[if, (, this, ., showBase, ), {, result, ., append, (, this, ., baseLabel, ), ;, result, ., append, (]
[showBase, ), {, result, ., append, (, this, ., baseLabel, ), ;, result, ., append, (, "^", ), ;, }]
[showBase, ), {, result, ., append, (, this, ., baseLabel, ), ;, result, ., append, (, "^", ), ;, }]
[., append, (, this, ., baseLabel, ), ;, result, ., append, (, "^", ), ;, }, result, ., append, (]
[., append, (, this, ., baseLabel, ), ;, result, ., append, (, "^", ), ;, }, result, ., append, (]
[., append, (, this, ., baseLabel, ), ;, result, ., append, (, "^", ), ;, }, result, ., append, (]
[), ;, result, ., append, (, "^", ), ;, }, result, ., append, (, this, ., formatter, ., format, (]
[result, ., append, (, "^", ), ;, }, result, ., append, (, this, ., formatter, ., format, (, calculateLog, (]
[;, }, result, ., append, (, this, ., formatter, ., format, (, calculateLog, (, number, ), ), ), ;, return]
[), ), ), ;, return, result, ;, }, public, Number, parse, (, String, source, ,, ParsePosition, parsePosition, ), {, return]
[source, ,, ParsePosition, parsePosition, ), {, return, null, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[source, ,, ParsePosition, parsePosition, ), {, return, null, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[ParsePosition, parsePosition, ), {, return, null, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[return, null, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, LogFormat, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, LogFormat, ), ), {, return, false, ;, }, LogFormat, that, =]
[if, (, !, (, obj, instanceof, LogFormat, ), ), {, return, false, ;, }, LogFormat, that, =, (, LogFormat, )]
[obj, instanceof, LogFormat, ), ), {, return, false, ;, }, LogFormat, that, =, (, LogFormat, ), obj, ;, if, (]
[obj, instanceof, LogFormat, ), ), {, return, false, ;, }, LogFormat, that, =, (, LogFormat, ), obj, ;, if, (]
[obj, instanceof, LogFormat, ), ), {, return, false, ;, }, LogFormat, that, =, (, LogFormat, ), obj, ;, if, (]
[), {, return, false, ;, }, LogFormat, that, =, (, LogFormat, ), obj, ;, if, (, this, ., base, !=]
[), {, return, false, ;, }, LogFormat, that, =, (, LogFormat, ), obj, ;, if, (, this, ., base, !=]
[LogFormat, that, =, (, LogFormat, ), obj, ;, if, (, this, ., base, !=, that, ., base, ), {, return]
[), obj, ;, if, (, this, ., base, !=, that, ., base, ), {, return, false, ;, }, if, (]
[obj, ;, if, (, this, ., base, !=, that, ., base, ), {, return, false, ;, }, if, (, !]
[obj, ;, if, (, this, ., base, !=, that, ., base, ), {, return, false, ;, }, if, (, !]
[obj, ;, if, (, this, ., base, !=, that, ., base, ), {, return, false, ;, }, if, (, !]
[base, !=, that, ., base, ), {, return, false, ;, }, if, (, !, this, ., baseLabel, ., equals, (]
[base, !=, that, ., base, ), {, return, false, ;, }, if, (, !, this, ., baseLabel, ., equals, (]
[return, false, ;, }, if, (, !, this, ., baseLabel, ., equals, (, that, ., baseLabel, ), ), {, return]
[(, !, this, ., baseLabel, ., equals, (, that, ., baseLabel, ), ), {, return, false, ;, }, if, (]
[(, !, this, ., baseLabel, ., equals, (, that, ., baseLabel, ), ), {, return, false, ;, }, if, (]
[(, !, this, ., baseLabel, ., equals, (, that, ., baseLabel, ), ), {, return, false, ;, }, if, (]
[baseLabel, ., equals, (, that, ., baseLabel, ), ), {, return, false, ;, }, if, (, this, ., baseLog, !=]
[baseLabel, ., equals, (, that, ., baseLabel, ), ), {, return, false, ;, }, if, (, this, ., baseLog, !=]
[baseLabel, ), ), {, return, false, ;, }, if, (, this, ., baseLog, !=, that, ., baseLog, ), {, return]
[false, ;, }, if, (, this, ., baseLog, !=, that, ., baseLog, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., baseLog, !=, that, ., baseLog, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., baseLog, !=, that, ., baseLog, ), {, return, false, ;, }, if, (]
[(, this, ., baseLog, !=, that, ., baseLog, ), {, return, false, ;, }, if, (, this, ., showBase, !=]
[(, this, ., baseLog, !=, that, ., baseLog, ), {, return, false, ;, }, if, (, this, ., showBase, !=]
[., baseLog, ), {, return, false, ;, }, if, (, this, ., showBase, !=, that, ., showBase, ), {, return]
[false, ;, }, if, (, this, ., showBase, !=, that, ., showBase, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., showBase, !=, that, ., showBase, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., showBase, !=, that, ., showBase, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., showBase, !=, that, ., showBase, ), {, return, false, ;, }, if, (, !]
[showBase, !=, that, ., showBase, ), {, return, false, ;, }, if, (, !, this, ., formatter, ., equals, (]
[showBase, !=, that, ., showBase, ), {, return, false, ;, }, if, (, !, this, ., formatter, ., equals, (]
[return, false, ;, }, if, (, !, this, ., formatter, ., equals, (, that, ., formatter, ), ), {, return]
[if, (, !, this, ., formatter, ., equals, (, that, ., formatter, ), ), {, return, false, ;, }, return]
[if, (, !, this, ., formatter, ., equals, (, that, ., formatter, ), ), {, return, false, ;, }, return]
[., formatter, ., equals, (, that, ., formatter, ), ), {, return, false, ;, }, return, super, ., equals, (]
[;, }, return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (, ), {, LogFormat, clone, =]
[super, ., equals, (, obj, ), ;, }, public, Object, clone, (, ), {, LogFormat, clone, =, (, LogFormat, )]
[super, ., equals, (, obj, ), ;, }, public, Object, clone, (, ), {, LogFormat, clone, =, (, LogFormat, )]
[;, }, public, Object, clone, (, ), {, LogFormat, clone, =, (, LogFormat, ), super, ., clone, (, ), ;]
[;, }, public, Object, clone, (, ), {, LogFormat, clone, =, (, LogFormat, ), super, ., clone, (, ), ;]
[clone, (, ), {, LogFormat, clone, =, (, LogFormat, ), super, ., clone, (, ), ;, clone, ., formatter, =]
[{, LogFormat, clone, =, (, LogFormat, ), super, ., clone, (, ), ;, clone, ., formatter, =, (, NumberFormat, )]
[{, LogFormat, clone, =, (, LogFormat, ), super, ., clone, (, ), ;, clone, ., formatter, =, (, NumberFormat, )]
[{, LogFormat, clone, =, (, LogFormat, ), super, ., clone, (, ), ;, clone, ., formatter, =, (, NumberFormat, )]
[clone, (, ), ;, clone, ., formatter, =, (, NumberFormat, ), this, ., formatter, ., clone, (, ), ;, return]
