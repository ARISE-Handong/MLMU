[., exception, ., MathInternalError, ;, public, enum, FilterType, {, TRIGGER_ONLY_DECREASING_EVENTS, {, @, Override, protected, boolean, getTriggeredIncreasing, (, ), {, return]
[Override, protected, Transformer, selectTransformer, (, final, Transformer, previous, ,, final, double, g, ,, final, boolean, forward, ), {, if, (]
[final, Transformer, previous, ,, final, double, g, ,, final, boolean, forward, ), {, if, (, forward, ), {, switch, (]
[final, double, g, ,, final, boolean, forward, ), {, if, (, forward, ), {, switch, (, previous, ), {, case]
[final, boolean, forward, ), {, if, (, forward, ), {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (]
[final, boolean, forward, ), {, if, (, forward, ), {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (]
[forward, ), {, if, (, forward, ), {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (, g, >]
[(, forward, ), {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return]
[(, forward, ), {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return]
[{, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return, Transformer, ., MAX, ;, }, else, if, (]
[{, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return, Transformer, ., MAX, ;, }, else, if, (]
[UNINITIALIZED, :, if, (, g, >, 0, ), {, return, Transformer, ., MAX, ;, }, else, if, (, g, <]
[g, >, 0, ), {, return, Transformer, ., MAX, ;, }, else, if, (, g, <, 0, ), {, return]
[g, >, 0, ), {, return, Transformer, ., MAX, ;, }, else, if, (, g, <, 0, ), {, return]
[MAX, ;, }, else, if, (, g, <, 0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return]
[MAX, ;, }, else, if, (, g, <, 0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return]
[g, <, 0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case]
[{, return, Transformer, ., PLUS, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (]
[{, return, Transformer, ., PLUS, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (]
[Transformer, ., PLUS, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (, g, >=]
[}, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (, g, >=, 0, ), {, return]
[}, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (, g, >=, 0, ), {, return]
[}, case, PLUS, :, if, (, g, >=, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return]
[if, (, g, >=, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case]
[0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (]
[0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (]
[{, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (, g, >=]
[MIN, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (, g, >=, 0, ), {, return]
[MIN, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (, g, >=, 0, ), {, return]
[}, case, MINUS, :, if, (, g, >=, 0, ), {, return, Transformer, ., MAX, ;, }, else, {, return]
[if, (, g, >=, 0, ), {, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case]
[0, ), {, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (]
[0, ), {, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (]
[{, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (, g, <=]
[MAX, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (, g, <=, 0, ), {, return]
[MAX, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (, g, <=, 0, ), {, return]
[}, case, MIN, :, if, (, g, <=, 0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return]
[if, (, g, <=, 0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return, previous, ;, }, case]
[0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (]
[0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (]
[{, return, Transformer, ., MINUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (, g, <=]
[MINUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (, g, <=, 0, ), {, return]
[MINUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (, g, <=, 0, ), {, return]
[}, case, MAX, :, if, (, g, <=, 0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return]
[g, <=, 0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return, previous, ;, }, default, :, throw]
[else, {, return, previous, ;, }, default, :, throw, new, MathInternalError, (, ), ;, }, }, else, {, switch, (]
[;, }, default, :, throw, new, MathInternalError, (, ), ;, }, }, else, {, switch, (, previous, ), {, case]
[throw, new, MathInternalError, (, ), ;, }, }, else, {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (]
[throw, new, MathInternalError, (, ), ;, }, }, else, {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (]
[MathInternalError, (, ), ;, }, }, else, {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (, g, >]
[}, }, else, {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return]
[}, }, else, {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return]
[{, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return, Transformer, ., MINUS, ;, }, else, if, (]
[{, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return, Transformer, ., MINUS, ;, }, else, if, (]
[UNINITIALIZED, :, if, (, g, >, 0, ), {, return, Transformer, ., MINUS, ;, }, else, if, (, g, <]
[g, >, 0, ), {, return, Transformer, ., MINUS, ;, }, else, if, (, g, <, 0, ), {, return]
[g, >, 0, ), {, return, Transformer, ., MINUS, ;, }, else, if, (, g, <, 0, ), {, return]
[MINUS, ;, }, else, if, (, g, <, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return]
[MINUS, ;, }, else, if, (, g, <, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return]
[g, <, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case]
[{, return, Transformer, ., MIN, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (]
[{, return, Transformer, ., MIN, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (]
[Transformer, ., MIN, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (, g, <=]
[}, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (, g, <=, 0, ), {, return]
[}, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (, g, <=, 0, ), {, return]
[}, case, PLUS, :, if, (, g, <=, 0, ), {, return, Transformer, ., MAX, ;, }, else, {, return]
[if, (, g, <=, 0, ), {, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case]
[0, ), {, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (]
[0, ), {, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (]
[{, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (, g, <=]
[MAX, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (, g, <=, 0, ), {, return]
[MAX, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (, g, <=, 0, ), {, return]
[}, case, MINUS, :, if, (, g, <=, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return]
[if, (, g, <=, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case]
[0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (]
[0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (]
[{, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (, g, >=]
[MIN, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (, g, >=, 0, ), {, return]
[MIN, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (, g, >=, 0, ), {, return]
[}, case, MIN, :, if, (, g, >=, 0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return]
[if, (, g, >=, 0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return, previous, ;, }, case]
[0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (]
[0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (]
[{, return, Transformer, ., PLUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (, g, >=]
[PLUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (, g, >=, 0, ), {, return]
[PLUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (, g, >=, 0, ), {, return]
[}, case, MAX, :, if, (, g, >=, 0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return]
[g, >=, 0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return, previous, ;, }, default, :, throw]
[MathInternalError, (, ), ;, }, }, }, }, ,, TRIGGER_ONLY_INCREASING_EVENTS, {, @, Override, protected, boolean, getTriggeredIncreasing, (, ), {, return]
[Override, protected, Transformer, selectTransformer, (, final, Transformer, previous, ,, final, double, g, ,, final, boolean, forward, ), {, if, (]
[final, Transformer, previous, ,, final, double, g, ,, final, boolean, forward, ), {, if, (, forward, ), {, switch, (]
[final, double, g, ,, final, boolean, forward, ), {, if, (, forward, ), {, switch, (, previous, ), {, case]
[final, boolean, forward, ), {, if, (, forward, ), {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (]
[final, boolean, forward, ), {, if, (, forward, ), {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (]
[forward, ), {, if, (, forward, ), {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (, g, >]
[(, forward, ), {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return]
[(, forward, ), {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return]
[{, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return, Transformer, ., PLUS, ;, }, else, if, (]
[{, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return, Transformer, ., PLUS, ;, }, else, if, (]
[UNINITIALIZED, :, if, (, g, >, 0, ), {, return, Transformer, ., PLUS, ;, }, else, if, (, g, <]
[g, >, 0, ), {, return, Transformer, ., PLUS, ;, }, else, if, (, g, <, 0, ), {, return]
[g, >, 0, ), {, return, Transformer, ., PLUS, ;, }, else, if, (, g, <, 0, ), {, return]
[PLUS, ;, }, else, if, (, g, <, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return]
[PLUS, ;, }, else, if, (, g, <, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return]
[g, <, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case]
[{, return, Transformer, ., MIN, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (]
[{, return, Transformer, ., MIN, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (]
[Transformer, ., MIN, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (, g, <=]
[}, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (, g, <=, 0, ), {, return]
[}, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (, g, <=, 0, ), {, return]
[}, case, PLUS, :, if, (, g, <=, 0, ), {, return, Transformer, ., MAX, ;, }, else, {, return]
[if, (, g, <=, 0, ), {, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case]
[0, ), {, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (]
[0, ), {, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (]
[{, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (, g, <=]
[MAX, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (, g, <=, 0, ), {, return]
[MAX, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (, g, <=, 0, ), {, return]
[}, case, MINUS, :, if, (, g, <=, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return]
[if, (, g, <=, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case]
[0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (]
[0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (]
[{, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (, g, >=]
[MIN, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (, g, >=, 0, ), {, return]
[MIN, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (, g, >=, 0, ), {, return]
[}, case, MIN, :, if, (, g, >=, 0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return]
[if, (, g, >=, 0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return, previous, ;, }, case]
[0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (]
[0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (]
[{, return, Transformer, ., PLUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (, g, >=]
[PLUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (, g, >=, 0, ), {, return]
[PLUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (, g, >=, 0, ), {, return]
[}, case, MAX, :, if, (, g, >=, 0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return]
[g, >=, 0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return, previous, ;, }, default, :, throw]
[else, {, return, previous, ;, }, default, :, throw, new, MathInternalError, (, ), ;, }, }, else, {, switch, (]
[;, }, default, :, throw, new, MathInternalError, (, ), ;, }, }, else, {, switch, (, previous, ), {, case]
[throw, new, MathInternalError, (, ), ;, }, }, else, {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (]
[throw, new, MathInternalError, (, ), ;, }, }, else, {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (]
[MathInternalError, (, ), ;, }, }, else, {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (, g, >]
[}, }, else, {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return]
[}, }, else, {, switch, (, previous, ), {, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return]
[{, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return, Transformer, ., MAX, ;, }, else, if, (]
[{, case, UNINITIALIZED, :, if, (, g, >, 0, ), {, return, Transformer, ., MAX, ;, }, else, if, (]
[UNINITIALIZED, :, if, (, g, >, 0, ), {, return, Transformer, ., MAX, ;, }, else, if, (, g, <]
[g, >, 0, ), {, return, Transformer, ., MAX, ;, }, else, if, (, g, <, 0, ), {, return]
[g, >, 0, ), {, return, Transformer, ., MAX, ;, }, else, if, (, g, <, 0, ), {, return]
[MAX, ;, }, else, if, (, g, <, 0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return]
[MAX, ;, }, else, if, (, g, <, 0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return]
[g, <, 0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case]
[{, return, Transformer, ., MINUS, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (]
[{, return, Transformer, ., MINUS, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (]
[Transformer, ., MINUS, ;, }, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (, g, >=]
[}, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (, g, >=, 0, ), {, return]
[}, else, {, return, Transformer, ., UNINITIALIZED, ;, }, case, PLUS, :, if, (, g, >=, 0, ), {, return]
[}, case, PLUS, :, if, (, g, >=, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return]
[if, (, g, >=, 0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case]
[0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (]
[0, ), {, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (]
[{, return, Transformer, ., MIN, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (, g, >=]
[MIN, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (, g, >=, 0, ), {, return]
[MIN, ;, }, else, {, return, previous, ;, }, case, MINUS, :, if, (, g, >=, 0, ), {, return]
[}, case, MINUS, :, if, (, g, >=, 0, ), {, return, Transformer, ., MAX, ;, }, else, {, return]
[if, (, g, >=, 0, ), {, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case]
[0, ), {, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (]
[0, ), {, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (]
[{, return, Transformer, ., MAX, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (, g, <=]
[MAX, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (, g, <=, 0, ), {, return]
[MAX, ;, }, else, {, return, previous, ;, }, case, MIN, :, if, (, g, <=, 0, ), {, return]
[}, case, MIN, :, if, (, g, <=, 0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return]
[if, (, g, <=, 0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return, previous, ;, }, case]
[0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (]
[0, ), {, return, Transformer, ., MINUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (]
[{, return, Transformer, ., MINUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (, g, <=]
[MINUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (, g, <=, 0, ), {, return]
[MINUS, ;, }, else, {, return, previous, ;, }, case, MAX, :, if, (, g, <=, 0, ), {, return]
[}, case, MAX, :, if, (, g, <=, 0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return]
[g, <=, 0, ), {, return, Transformer, ., PLUS, ;, }, else, {, return, previous, ;, }, default, :, throw]
