[;, public, class, HilbertMatrix, extends, RealLinearOperator, {, private, final, int, n, ;, public, HilbertMatrix, (, final, int, n, ), {]
[;, public, class, HilbertMatrix, extends, RealLinearOperator, {, private, final, int, n, ;, public, HilbertMatrix, (, final, int, n, ), {]
[extends, RealLinearOperator, {, private, final, int, n, ;, public, HilbertMatrix, (, final, int, n, ), {, this, ., n, =]
[int, n, ), {, this, ., n, =, n, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return]
[Override, public, int, getColumnDimension, (, ), {, return, n, ;, }, @, Override, public, int, getRowDimension, (, ), {, return]
[(, ), {, return, n, ;, }, @, Override, public, RealVector, operate, (, final, RealVector, x, ), {, if, (]
[(, ), {, return, n, ;, }, @, Override, public, RealVector, operate, (, final, RealVector, x, ), {, if, (]
[(, ), {, return, n, ;, }, @, Override, public, RealVector, operate, (, final, RealVector, x, ), {, if, (]
[}, @, Override, public, RealVector, operate, (, final, RealVector, x, ), {, if, (, x, ., getDimension, (, ), !=]
[RealVector, operate, (, final, RealVector, x, ), {, if, (, x, ., getDimension, (, ), !=, n, ), {, throw]
[final, RealVector, x, ), {, if, (, x, ., getDimension, (, ), !=, n, ), {, throw, new, DimensionMismatchException, (]
[final, RealVector, x, ), {, if, (, x, ., getDimension, (, ), !=, n, ), {, throw, new, DimensionMismatchException, (]
[(, x, ., getDimension, (, ), !=, n, ), {, throw, new, DimensionMismatchException, (, x, ., getDimension, (, ), ,]
[throw, new, DimensionMismatchException, (, x, ., getDimension, (, ), ,, n, ), ;, }, final, double, [, ], y, =]
[(, x, ., getDimension, (, ), ,, n, ), ;, }, final, double, [, ], y, =, new, double, []
[), ;, }, final, double, [, ], y, =, new, double, [, n, ], ;, for, (, int, i, =]
[}, final, double, [, ], y, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[}, final, double, [, ], y, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], y, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], y, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], y, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, pos, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, pos, =, 0., ;, double, neg, =]
[;, i, ++, ), {, double, pos, =, 0., ;, double, neg, =, 0., ;, for, (, int, j, =]
[++, ), {, double, pos, =, 0., ;, double, neg, =, 0., ;, for, (, int, j, =, 0, ;]
[++, ), {, double, pos, =, 0., ;, double, neg, =, 0., ;, for, (, int, j, =, 0, ;]
[{, double, pos, =, 0., ;, double, neg, =, 0., ;, for, (, int, j, =, 0, ;, j, <]
[pos, =, 0., ;, double, neg, =, 0., ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[pos, =, 0., ;, double, neg, =, 0., ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, xj, =]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, xj, =]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, xj, =, x, ., getEntry, (]
[;, j, ++, ), {, final, double, xj, =, x, ., getEntry, (, j, ), ;, final, double, coeff, =]
[;, j, ++, ), {, final, double, xj, =, x, ., getEntry, (, j, ), ;, final, double, coeff, =]
[++, ), {, final, double, xj, =, x, ., getEntry, (, j, ), ;, final, double, coeff, =, 1., /]
[), {, final, double, xj, =, x, ., getEntry, (, j, ), ;, final, double, coeff, =, 1., /, (]
[), {, final, double, xj, =, x, ., getEntry, (, j, ), ;, final, double, coeff, =, 1., /, (]
[), {, final, double, xj, =, x, ., getEntry, (, j, ), ;, final, double, coeff, =, 1., /, (]
[final, double, xj, =, x, ., getEntry, (, j, ), ;, final, double, coeff, =, 1., /, (, i, +]
[xj, =, x, ., getEntry, (, j, ), ;, final, double, coeff, =, 1., /, (, i, +, j, +]
[(, j, ), ;, final, double, coeff, =, 1., /, (, i, +, j, +, 1., ), ;, if, (]
[(, j, ), ;, final, double, coeff, =, 1., /, (, i, +, j, +, 1., ), ;, if, (]
[), ;, final, double, coeff, =, 1., /, (, i, +, j, +, 1., ), ;, if, (, xj, >]
[double, coeff, =, 1., /, (, i, +, j, +, 1., ), ;, if, (, xj, >, 0., ), {]
[=, 1., /, (, i, +, j, +, 1., ), ;, if, (, xj, >, 0., ), {, pos, +=]
[=, 1., /, (, i, +, j, +, 1., ), ;, if, (, xj, >, 0., ), {, pos, +=]
[/, (, i, +, j, +, 1., ), ;, if, (, xj, >, 0., ), {, pos, +=, coeff, *]
[+, 1., ), ;, if, (, xj, >, 0., ), {, pos, +=, coeff, *, xj, ;, }, else, {]
[), ;, if, (, xj, >, 0., ), {, pos, +=, coeff, *, xj, ;, }, else, {, neg, +=]
[), ;, if, (, xj, >, 0., ), {, pos, +=, coeff, *, xj, ;, }, else, {, neg, +=]
[if, (, xj, >, 0., ), {, pos, +=, coeff, *, xj, ;, }, else, {, neg, +=, coeff, *]
[0., ), {, pos, +=, coeff, *, xj, ;, }, else, {, neg, +=, coeff, *, xj, ;, }, }]
[0., ), {, pos, +=, coeff, *, xj, ;, }, else, {, neg, +=, coeff, *, xj, ;, }, }]
[{, pos, +=, coeff, *, xj, ;, }, else, {, neg, +=, coeff, *, xj, ;, }, }, y, []
[coeff, *, xj, ;, }, else, {, neg, +=, coeff, *, xj, ;, }, }, y, [, i, ], =]
[coeff, *, xj, ;, }, else, {, neg, +=, coeff, *, xj, ;, }, }, y, [, i, ], =]
[xj, ;, }, else, {, neg, +=, coeff, *, xj, ;, }, }, y, [, i, ], =, pos, +]
[{, neg, +=, coeff, *, xj, ;, }, }, y, [, i, ], =, pos, +, neg, ;, }, return]
[coeff, *, xj, ;, }, }, y, [, i, ], =, pos, +, neg, ;, }, return, new, ArrayRealVector, (]
[xj, ;, }, }, y, [, i, ], =, pos, +, neg, ;, }, return, new, ArrayRealVector, (, y, ,]
