[CategoryDataset, ;, public, class, LevelRenderer, extends, AbstractCategoryItemRenderer, implements, Cloneable, ,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[;, public, class, LevelRenderer, extends, AbstractCategoryItemRenderer, implements, Cloneable, ,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -, 8204856624355025117L, ;, public, static, final, double, DEFAULT_ITEM_MARGIN, =]
[=, 0.20, ;, private, double, itemMargin, ;, private, double, maxItemWidth, ;, public, LevelRenderer, (, ), {, super, (, ), ;]
[=, 0.20, ;, private, double, itemMargin, ;, private, double, maxItemWidth, ;, public, LevelRenderer, (, ), {, super, (, ), ;]
[double, itemMargin, ;, private, double, maxItemWidth, ;, public, LevelRenderer, (, ), {, super, (, ), ;, this, ., itemMargin, =]
[;, private, double, maxItemWidth, ;, public, LevelRenderer, (, ), {, super, (, ), ;, this, ., itemMargin, =, DEFAULT_ITEM_MARGIN, ;]
[;, private, double, maxItemWidth, ;, public, LevelRenderer, (, ), {, super, (, ), ;, this, ., itemMargin, =, DEFAULT_ITEM_MARGIN, ;]
[;, public, LevelRenderer, (, ), {, super, (, ), ;, this, ., itemMargin, =, DEFAULT_ITEM_MARGIN, ;, this, ., maxItemWidth, =]
[LevelRenderer, (, ), {, super, (, ), ;, this, ., itemMargin, =, DEFAULT_ITEM_MARGIN, ;, this, ., maxItemWidth, =, 1.0, ;]
[), {, super, (, ), ;, this, ., itemMargin, =, DEFAULT_ITEM_MARGIN, ;, this, ., maxItemWidth, =, 1.0, ;, setBaseLegendShape, (]
[;, this, ., itemMargin, =, DEFAULT_ITEM_MARGIN, ;, this, ., maxItemWidth, =, 1.0, ;, setBaseLegendShape, (, new, Rectangle2D, ., Float, (]
[this, ., itemMargin, =, DEFAULT_ITEM_MARGIN, ;, this, ., maxItemWidth, =, 1.0, ;, setBaseLegendShape, (, new, Rectangle2D, ., Float, (, -]
[itemMargin, =, DEFAULT_ITEM_MARGIN, ;, this, ., maxItemWidth, =, 1.0, ;, setBaseLegendShape, (, new, Rectangle2D, ., Float, (, -, 5.0f, ,]
[=, DEFAULT_ITEM_MARGIN, ;, this, ., maxItemWidth, =, 1.0, ;, setBaseLegendShape, (, new, Rectangle2D, ., Float, (, -, 5.0f, ,, -]
[;, this, ., maxItemWidth, =, 1.0, ;, setBaseLegendShape, (, new, Rectangle2D, ., Float, (, -, 5.0f, ,, -, 1.0f, ,]
[., maxItemWidth, =, 1.0, ;, setBaseLegendShape, (, new, Rectangle2D, ., Float, (, -, 5.0f, ,, -, 1.0f, ,, 10.0f, ,]
[;, setBaseLegendShape, (, new, Rectangle2D, ., Float, (, -, 5.0f, ,, -, 1.0f, ,, 10.0f, ,, 2.0f, ), ), ;]
[(, new, Rectangle2D, ., Float, (, -, 5.0f, ,, -, 1.0f, ,, 10.0f, ,, 2.0f, ), ), ;, setBaseOutlinePaint, (]
[., Float, (, -, 5.0f, ,, -, 1.0f, ,, 10.0f, ,, 2.0f, ), ), ;, setBaseOutlinePaint, (, new, Color, (]
[(, -, 5.0f, ,, -, 1.0f, ,, 10.0f, ,, 2.0f, ), ), ;, setBaseOutlinePaint, (, new, Color, (, 0, ,]
[5.0f, ,, -, 1.0f, ,, 10.0f, ,, 2.0f, ), ), ;, setBaseOutlinePaint, (, new, Color, (, 0, ,, 0, ,]
[-, 1.0f, ,, 10.0f, ,, 2.0f, ), ), ;, setBaseOutlinePaint, (, new, Color, (, 0, ,, 0, ,, 0, ,]
[Color, (, 0, ,, 0, ,, 0, ,, 0, ), ), ;, }, public, double, getItemMargin, (, ), {, return]
[Color, (, 0, ,, 0, ,, 0, ,, 0, ), ), ;, }, public, double, getItemMargin, (, ), {, return]
[public, double, getItemMargin, (, ), {, return, this, ., itemMargin, ;, }, public, void, setItemMargin, (, double, percent, ), {]
[public, double, getItemMargin, (, ), {, return, this, ., itemMargin, ;, }, public, void, setItemMargin, (, double, percent, ), {]
[), {, return, this, ., itemMargin, ;, }, public, void, setItemMargin, (, double, percent, ), {, this, ., itemMargin, =]
[return, this, ., itemMargin, ;, }, public, void, setItemMargin, (, double, percent, ), {, this, ., itemMargin, =, percent, ;]
[), {, this, ., itemMargin, =, percent, ;, fireChangeEvent, (, ), ;, }, public, double, getMaximumItemWidth, (, ), {, return]
[), {, this, ., itemMargin, =, percent, ;, fireChangeEvent, (, ), ;, }, public, double, getMaximumItemWidth, (, ), {, return]
[public, double, getMaximumItemWidth, (, ), {, return, this, ., maxItemWidth, ;, }, public, void, setMaximumItemWidth, (, double, percent, ), {]
[public, double, getMaximumItemWidth, (, ), {, return, this, ., maxItemWidth, ;, }, public, void, setMaximumItemWidth, (, double, percent, ), {]
[), {, return, this, ., maxItemWidth, ;, }, public, void, setMaximumItemWidth, (, double, percent, ), {, this, ., maxItemWidth, =]
[return, this, ., maxItemWidth, ;, }, public, void, setMaximumItemWidth, (, double, percent, ), {, this, ., maxItemWidth, =, percent, ;]
[(, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, CategoryPlot, plot, ,, CategoryDataset, dataset, ,, PlotRenderingInfo, info, ), {, CategoryItemRendererState, state, =]
[(, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, CategoryPlot, plot, ,, CategoryDataset, dataset, ,, PlotRenderingInfo, info, ), {, CategoryItemRendererState, state, =]
[Rectangle2D, dataArea, ,, CategoryPlot, plot, ,, CategoryDataset, dataset, ,, PlotRenderingInfo, info, ), {, CategoryItemRendererState, state, =, super, ., initialise, (]
[,, CategoryPlot, plot, ,, CategoryDataset, dataset, ,, PlotRenderingInfo, info, ), {, CategoryItemRendererState, state, =, super, ., initialise, (, g2, ,]
[plot, ,, CategoryDataset, dataset, ,, PlotRenderingInfo, info, ), {, CategoryItemRendererState, state, =, super, ., initialise, (, g2, ,, dataArea, ,]
[CategoryDataset, dataset, ,, PlotRenderingInfo, info, ), {, CategoryItemRendererState, state, =, super, ., initialise, (, g2, ,, dataArea, ,, plot, ,]
[,, PlotRenderingInfo, info, ), {, CategoryItemRendererState, state, =, super, ., initialise, (, g2, ,, dataArea, ,, plot, ,, dataset, ,]
[), {, CategoryItemRendererState, state, =, super, ., initialise, (, g2, ,, dataArea, ,, plot, ,, dataset, ,, info, ), ;]
[CategoryItemRendererState, state, =, super, ., initialise, (, g2, ,, dataArea, ,, plot, ,, dataset, ,, info, ), ;, calculateItemWidth, (]
[=, super, ., initialise, (, g2, ,, dataArea, ,, plot, ,, dataset, ,, info, ), ;, calculateItemWidth, (, plot, ,]
[., initialise, (, g2, ,, dataArea, ,, plot, ,, dataset, ,, info, ), ;, calculateItemWidth, (, plot, ,, dataArea, ,]
[(, g2, ,, dataArea, ,, plot, ,, dataset, ,, info, ), ;, calculateItemWidth, (, plot, ,, dataArea, ,, dataset, ,]
[,, plot, ,, dataset, ,, info, ), ;, calculateItemWidth, (, plot, ,, dataArea, ,, dataset, ,, state, ), ;, return]
[protected, void, calculateItemWidth, (, CategoryPlot, plot, ,, Rectangle2D, dataArea, ,, CategoryDataset, dataset, ,, CategoryItemRendererState, state, ), {, CategoryAxis, domainAxis, =]
[calculateItemWidth, (, CategoryPlot, plot, ,, Rectangle2D, dataArea, ,, CategoryDataset, dataset, ,, CategoryItemRendererState, state, ), {, CategoryAxis, domainAxis, =, getDomainAxis, (]
[CategoryPlot, plot, ,, Rectangle2D, dataArea, ,, CategoryDataset, dataset, ,, CategoryItemRendererState, state, ), {, CategoryAxis, domainAxis, =, getDomainAxis, (, plot, ,]
[,, CategoryDataset, dataset, ,, CategoryItemRendererState, state, ), {, CategoryAxis, domainAxis, =, getDomainAxis, (, plot, ,, dataset, ), ;, if, (]
[,, CategoryDataset, dataset, ,, CategoryItemRendererState, state, ), {, CategoryAxis, domainAxis, =, getDomainAxis, (, plot, ,, dataset, ), ;, if, (]
[dataset, ,, CategoryItemRendererState, state, ), {, CategoryAxis, domainAxis, =, getDomainAxis, (, plot, ,, dataset, ), ;, if, (, dataset, !=]
[CategoryAxis, domainAxis, =, getDomainAxis, (, plot, ,, dataset, ), ;, if, (, dataset, !=, null, ), {, int, columns, =]
[CategoryAxis, domainAxis, =, getDomainAxis, (, plot, ,, dataset, ), ;, if, (, dataset, !=, null, ), {, int, columns, =]
[;, if, (, dataset, !=, null, ), {, int, columns, =, dataset, ., getColumnCount, (, ), ;, int, rows, =]
[;, if, (, dataset, !=, null, ), {, int, columns, =, dataset, ., getColumnCount, (, ), ;, int, rows, =]
[;, if, (, dataset, !=, null, ), {, int, columns, =, dataset, ., getColumnCount, (, ), ;, int, rows, =]
[;, if, (, dataset, !=, null, ), {, int, columns, =, dataset, ., getColumnCount, (, ), ;, int, rows, =]
[), {, int, columns, =, dataset, ., getColumnCount, (, ), ;, int, rows, =, state, ., getVisibleSeriesCount, (, ), >=]
[int, columns, =, dataset, ., getColumnCount, (, ), ;, int, rows, =, state, ., getVisibleSeriesCount, (, ), >=, 0, ?]
[int, columns, =, dataset, ., getColumnCount, (, ), ;, int, rows, =, state, ., getVisibleSeriesCount, (, ), >=, 0, ?]
[(, ), ;, int, rows, =, state, ., getVisibleSeriesCount, (, ), >=, 0, ?, state, ., getVisibleSeriesCount, (, ), :]
[(, ), ;, int, rows, =, state, ., getVisibleSeriesCount, (, ), >=, 0, ?, state, ., getVisibleSeriesCount, (, ), :]
[(, ), >=, 0, ?, state, ., getVisibleSeriesCount, (, ), :, dataset, ., getRowCount, (, ), ;, double, space, =]
[state, ., getVisibleSeriesCount, (, ), :, dataset, ., getRowCount, (, ), ;, double, space, =, 0.0, ;, PlotOrientation, orientation, =]
[state, ., getVisibleSeriesCount, (, ), :, dataset, ., getRowCount, (, ), ;, double, space, =, 0.0, ;, PlotOrientation, orientation, =]
[getRowCount, (, ), ;, double, space, =, 0.0, ;, PlotOrientation, orientation, =, plot, ., getOrientation, (, ), ;, if, (]
[getRowCount, (, ), ;, double, space, =, 0.0, ;, PlotOrientation, orientation, =, plot, ., getOrientation, (, ), ;, if, (]
[), ;, double, space, =, 0.0, ;, PlotOrientation, orientation, =, plot, ., getOrientation, (, ), ;, if, (, orientation, ==]
[), ;, double, space, =, 0.0, ;, PlotOrientation, orientation, =, plot, ., getOrientation, (, ), ;, if, (, orientation, ==]
[0.0, ;, PlotOrientation, orientation, =, plot, ., getOrientation, (, ), ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {]
[PlotOrientation, orientation, =, plot, ., getOrientation, (, ), ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, =]
[PlotOrientation, orientation, =, plot, ., getOrientation, (, ), ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, =]
[(, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, =, dataArea, ., getHeight, (, ), ;, }, else, if, (]
[(, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, =, dataArea, ., getHeight, (, ), ;, }, else, if, (]
[==, PlotOrientation, ., HORIZONTAL, ), {, space, =, dataArea, ., getHeight, (, ), ;, }, else, if, (, orientation, ==]
[==, PlotOrientation, ., HORIZONTAL, ), {, space, =, dataArea, ., getHeight, (, ), ;, }, else, if, (, orientation, ==]
[{, space, =, dataArea, ., getHeight, (, ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {]
[=, dataArea, ., getHeight, (, ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, space, =]
[=, dataArea, ., getHeight, (, ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, space, =]
[(, orientation, ==, PlotOrientation, ., VERTICAL, ), {, space, =, dataArea, ., getWidth, (, ), ;, }, double, maxWidth, =]
[(, orientation, ==, PlotOrientation, ., VERTICAL, ), {, space, =, dataArea, ., getWidth, (, ), ;, }, double, maxWidth, =]
[==, PlotOrientation, ., VERTICAL, ), {, space, =, dataArea, ., getWidth, (, ), ;, }, double, maxWidth, =, space, *]
[=, dataArea, ., getWidth, (, ), ;, }, double, maxWidth, =, space, *, getMaximumItemWidth, (, ), ;, double, categoryMargin, =]
[), ;, }, double, maxWidth, =, space, *, getMaximumItemWidth, (, ), ;, double, categoryMargin, =, 0.0, ;, double, currentItemMargin, =]
[maxWidth, =, space, *, getMaximumItemWidth, (, ), ;, double, categoryMargin, =, 0.0, ;, double, currentItemMargin, =, 0.0, ;, if, (]
[maxWidth, =, space, *, getMaximumItemWidth, (, ), ;, double, categoryMargin, =, 0.0, ;, double, currentItemMargin, =, 0.0, ;, if, (]
[space, *, getMaximumItemWidth, (, ), ;, double, categoryMargin, =, 0.0, ;, double, currentItemMargin, =, 0.0, ;, if, (, columns, >]
[(, ), ;, double, categoryMargin, =, 0.0, ;, double, currentItemMargin, =, 0.0, ;, if, (, columns, >, 1, ), {]
[;, double, categoryMargin, =, 0.0, ;, double, currentItemMargin, =, 0.0, ;, if, (, columns, >, 1, ), {, categoryMargin, =]
[;, double, categoryMargin, =, 0.0, ;, double, currentItemMargin, =, 0.0, ;, if, (, columns, >, 1, ), {, categoryMargin, =]
[0.0, ;, if, (, columns, >, 1, ), {, categoryMargin, =, domainAxis, ., getCategoryMargin, (, ), ;, }, if, (]
[0.0, ;, if, (, columns, >, 1, ), {, categoryMargin, =, domainAxis, ., getCategoryMargin, (, ), ;, }, if, (]
[if, (, columns, >, 1, ), {, categoryMargin, =, domainAxis, ., getCategoryMargin, (, ), ;, }, if, (, rows, >]
[>, 1, ), {, categoryMargin, =, domainAxis, ., getCategoryMargin, (, ), ;, }, if, (, rows, >, 1, ), {]
[), {, categoryMargin, =, domainAxis, ., getCategoryMargin, (, ), ;, }, if, (, rows, >, 1, ), {, currentItemMargin, =]
[), ;, }, if, (, rows, >, 1, ), {, currentItemMargin, =, getItemMargin, (, ), ;, }, double, used, =]
[), ;, }, if, (, rows, >, 1, ), {, currentItemMargin, =, getItemMargin, (, ), ;, }, double, used, =]
[}, if, (, rows, >, 1, ), {, currentItemMargin, =, getItemMargin, (, ), ;, }, double, used, =, space, *]
[if, (, rows, >, 1, ), {, currentItemMargin, =, getItemMargin, (, ), ;, }, double, used, =, space, *, (]
[if, (, rows, >, 1, ), {, currentItemMargin, =, getItemMargin, (, ), ;, }, double, used, =, space, *, (]
[if, (, rows, >, 1, ), {, currentItemMargin, =, getItemMargin, (, ), ;, }, double, used, =, space, *, (]
[if, (, rows, >, 1, ), {, currentItemMargin, =, getItemMargin, (, ), ;, }, double, used, =, space, *, (]
[if, (, rows, >, 1, ), {, currentItemMargin, =, getItemMargin, (, ), ;, }, double, used, =, space, *, (]
[rows, >, 1, ), {, currentItemMargin, =, getItemMargin, (, ), ;, }, double, used, =, space, *, (, 1, -]
[rows, >, 1, ), {, currentItemMargin, =, getItemMargin, (, ), ;, }, double, used, =, space, *, (, 1, -]
[=, getItemMargin, (, ), ;, }, double, used, =, space, *, (, 1, -, domainAxis, ., getLowerMargin, (, ), -]
[=, getItemMargin, (, ), ;, }, double, used, =, space, *, (, 1, -, domainAxis, ., getLowerMargin, (, ), -]
[double, used, =, space, *, (, 1, -, domainAxis, ., getLowerMargin, (, ), -, domainAxis, ., getUpperMargin, (, ), -]
[=, space, *, (, 1, -, domainAxis, ., getLowerMargin, (, ), -, domainAxis, ., getUpperMargin, (, ), -, categoryMargin, -]
[-, domainAxis, ., getLowerMargin, (, ), -, domainAxis, ., getUpperMargin, (, ), -, categoryMargin, -, currentItemMargin, ), ;, if, (]
[-, domainAxis, ., getLowerMargin, (, ), -, domainAxis, ., getUpperMargin, (, ), -, categoryMargin, -, currentItemMargin, ), ;, if, (]
[domainAxis, ., getLowerMargin, (, ), -, domainAxis, ., getUpperMargin, (, ), -, categoryMargin, -, currentItemMargin, ), ;, if, (, (]
[domainAxis, ., getLowerMargin, (, ), -, domainAxis, ., getUpperMargin, (, ), -, categoryMargin, -, currentItemMargin, ), ;, if, (, (]
[getLowerMargin, (, ), -, domainAxis, ., getUpperMargin, (, ), -, categoryMargin, -, currentItemMargin, ), ;, if, (, (, rows, *]
[-, domainAxis, ., getUpperMargin, (, ), -, categoryMargin, -, currentItemMargin, ), ;, if, (, (, rows, *, columns, ), >]
[getUpperMargin, (, ), -, categoryMargin, -, currentItemMargin, ), ;, if, (, (, rows, *, columns, ), >, 0, ), {]
[getUpperMargin, (, ), -, categoryMargin, -, currentItemMargin, ), ;, if, (, (, rows, *, columns, ), >, 0, ), {]
[categoryMargin, -, currentItemMargin, ), ;, if, (, (, rows, *, columns, ), >, 0, ), {, state, ., setBarWidth, (]
[categoryMargin, -, currentItemMargin, ), ;, if, (, (, rows, *, columns, ), >, 0, ), {, state, ., setBarWidth, (]
[;, if, (, (, rows, *, columns, ), >, 0, ), {, state, ., setBarWidth, (, Math, ., min, (]
[;, if, (, (, rows, *, columns, ), >, 0, ), {, state, ., setBarWidth, (, Math, ., min, (]
[(, (, rows, *, columns, ), >, 0, ), {, state, ., setBarWidth, (, Math, ., min, (, used, /]
[(, rows, *, columns, ), >, 0, ), {, state, ., setBarWidth, (, Math, ., min, (, used, /, (]
[(, rows, *, columns, ), >, 0, ), {, state, ., setBarWidth, (, Math, ., min, (, used, /, (]
[*, columns, ), >, 0, ), {, state, ., setBarWidth, (, Math, ., min, (, used, /, (, rows, *]
[>, 0, ), {, state, ., setBarWidth, (, Math, ., min, (, used, /, (, rows, *, columns, ), ,]
[(, Math, ., min, (, used, /, (, rows, *, columns, ), ,, maxWidth, ), ), ;, }, else, {]
[(, Math, ., min, (, used, /, (, rows, *, columns, ), ,, maxWidth, ), ), ;, }, else, {]
[(, used, /, (, rows, *, columns, ), ,, maxWidth, ), ), ;, }, else, {, state, ., setBarWidth, (]
[(, used, /, (, rows, *, columns, ), ,, maxWidth, ), ), ;, }, else, {, state, ., setBarWidth, (]
[rows, *, columns, ), ,, maxWidth, ), ), ;, }, else, {, state, ., setBarWidth, (, Math, ., min, (]
[columns, ), ,, maxWidth, ), ), ;, }, else, {, state, ., setBarWidth, (, Math, ., min, (, used, ,]
[,, Rectangle2D, dataArea, ,, CategoryAxis, domainAxis, ,, CategoryItemRendererState, state, ,, int, row, ,, int, column, ), {, double, space, =]
[CategoryAxis, domainAxis, ,, CategoryItemRendererState, state, ,, int, row, ,, int, column, ), {, double, space, =, 0.0, ;, if, (]
[CategoryAxis, domainAxis, ,, CategoryItemRendererState, state, ,, int, row, ,, int, column, ), {, double, space, =, 0.0, ;, if, (]
[,, CategoryItemRendererState, state, ,, int, row, ,, int, column, ), {, double, space, =, 0.0, ;, if, (, orientation, ==]
[,, CategoryItemRendererState, state, ,, int, row, ,, int, column, ), {, double, space, =, 0.0, ;, if, (, orientation, ==]
[row, ,, int, column, ), {, double, space, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {]
[int, column, ), {, double, space, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, =]
[int, column, ), {, double, space, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, =]
[if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, =, dataArea, ., getHeight, (, ), ;, }, else, {]
[orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, =, dataArea, ., getHeight, (, ), ;, }, else, {, space, =]
[orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, =, dataArea, ., getHeight, (, ), ;, }, else, {, space, =]
[., getHeight, (, ), ;, }, else, {, space, =, dataArea, ., getWidth, (, ), ;, }, double, barW0, =]
[., getHeight, (, ), ;, }, else, {, space, =, dataArea, ., getWidth, (, ), ;, }, double, barW0, =]
[;, }, else, {, space, =, dataArea, ., getWidth, (, ), ;, }, double, barW0, =, domainAxis, ., getCategoryStart, (]
[else, {, space, =, dataArea, ., getWidth, (, ), ;, }, double, barW0, =, domainAxis, ., getCategoryStart, (, column, ,]
[dataArea, ., getWidth, (, ), ;, }, double, barW0, =, domainAxis, ., getCategoryStart, (, column, ,, getColumnCount, (, ), ,]
[getWidth, (, ), ;, }, double, barW0, =, domainAxis, ., getCategoryStart, (, column, ,, getColumnCount, (, ), ,, dataArea, ,]
[getWidth, (, ), ;, }, double, barW0, =, domainAxis, ., getCategoryStart, (, column, ,, getColumnCount, (, ), ,, dataArea, ,]
[getCategoryStart, (, column, ,, getColumnCount, (, ), ,, dataArea, ,, plot, ., getDomainAxisEdge, (, ), ), ;, int, seriesCount, =]
[getCategoryStart, (, column, ,, getColumnCount, (, ), ,, dataArea, ,, plot, ., getDomainAxisEdge, (, ), ), ;, int, seriesCount, =]
[dataArea, ,, plot, ., getDomainAxisEdge, (, ), ), ;, int, seriesCount, =, state, ., getVisibleSeriesCount, (, ), ;, if, (]
[dataArea, ,, plot, ., getDomainAxisEdge, (, ), ), ;, int, seriesCount, =, state, ., getVisibleSeriesCount, (, ), ;, if, (]
[plot, ., getDomainAxisEdge, (, ), ), ;, int, seriesCount, =, state, ., getVisibleSeriesCount, (, ), ;, if, (, seriesCount, <]
[(, ), ), ;, int, seriesCount, =, state, ., getVisibleSeriesCount, (, ), ;, if, (, seriesCount, <, 0, ), {]
[), ;, int, seriesCount, =, state, ., getVisibleSeriesCount, (, ), ;, if, (, seriesCount, <, 0, ), {, seriesCount, =]
[(, ), ;, if, (, seriesCount, <, 0, ), {, seriesCount, =, getRowCount, (, ), ;, }, int, categoryCount, =]
[<, 0, ), {, seriesCount, =, getRowCount, (, ), ;, }, int, categoryCount, =, getColumnCount, (, ), ;, if, (]
[<, 0, ), {, seriesCount, =, getRowCount, (, ), ;, }, int, categoryCount, =, getColumnCount, (, ), ;, if, (]
[), {, seriesCount, =, getRowCount, (, ), ;, }, int, categoryCount, =, getColumnCount, (, ), ;, if, (, seriesCount, >]
[), ;, }, int, categoryCount, =, getColumnCount, (, ), ;, if, (, seriesCount, >, 1, ), {, double, seriesGap, =]
[), ;, }, int, categoryCount, =, getColumnCount, (, ), ;, if, (, seriesCount, >, 1, ), {, double, seriesGap, =]
[), ;, }, int, categoryCount, =, getColumnCount, (, ), ;, if, (, seriesCount, >, 1, ), {, double, seriesGap, =]
[}, int, categoryCount, =, getColumnCount, (, ), ;, if, (, seriesCount, >, 1, ), {, double, seriesGap, =, space, *]
[getColumnCount, (, ), ;, if, (, seriesCount, >, 1, ), {, double, seriesGap, =, space, *, getItemMargin, (, ), /]
[(, ), ;, if, (, seriesCount, >, 1, ), {, double, seriesGap, =, space, *, getItemMargin, (, ), /, (]
[(, ), ;, if, (, seriesCount, >, 1, ), {, double, seriesGap, =, space, *, getItemMargin, (, ), /, (]
[;, if, (, seriesCount, >, 1, ), {, double, seriesGap, =, space, *, getItemMargin, (, ), /, (, categoryCount, *]
[if, (, seriesCount, >, 1, ), {, double, seriesGap, =, space, *, getItemMargin, (, ), /, (, categoryCount, *, (]
[if, (, seriesCount, >, 1, ), {, double, seriesGap, =, space, *, getItemMargin, (, ), /, (, categoryCount, *, (]
[seriesCount, >, 1, ), {, double, seriesGap, =, space, *, getItemMargin, (, ), /, (, categoryCount, *, (, seriesCount, -]
[=, space, *, getItemMargin, (, ), /, (, categoryCount, *, (, seriesCount, -, 1, ), ), ;, double, seriesW, =]
[*, getItemMargin, (, ), /, (, categoryCount, *, (, seriesCount, -, 1, ), ), ;, double, seriesW, =, calculateSeriesWidth, (]
[(, ), /, (, categoryCount, *, (, seriesCount, -, 1, ), ), ;, double, seriesW, =, calculateSeriesWidth, (, space, ,]
[/, (, categoryCount, *, (, seriesCount, -, 1, ), ), ;, double, seriesW, =, calculateSeriesWidth, (, space, ,, domainAxis, ,]
[categoryCount, *, (, seriesCount, -, 1, ), ), ;, double, seriesW, =, calculateSeriesWidth, (, space, ,, domainAxis, ,, categoryCount, ,]
[seriesCount, -, 1, ), ), ;, double, seriesW, =, calculateSeriesWidth, (, space, ,, domainAxis, ,, categoryCount, ,, seriesCount, ), ;]
[1, ), ), ;, double, seriesW, =, calculateSeriesWidth, (, space, ,, domainAxis, ,, categoryCount, ,, seriesCount, ), ;, barW0, =]
[1, ), ), ;, double, seriesW, =, calculateSeriesWidth, (, space, ,, domainAxis, ,, categoryCount, ,, seriesCount, ), ;, barW0, =]
[1, ), ), ;, double, seriesW, =, calculateSeriesWidth, (, space, ,, domainAxis, ,, categoryCount, ,, seriesCount, ), ;, barW0, =]
[1, ), ), ;, double, seriesW, =, calculateSeriesWidth, (, space, ,, domainAxis, ,, categoryCount, ,, seriesCount, ), ;, barW0, =]
[), ;, double, seriesW, =, calculateSeriesWidth, (, space, ,, domainAxis, ,, categoryCount, ,, seriesCount, ), ;, barW0, =, barW0, +]
[), ;, double, seriesW, =, calculateSeriesWidth, (, space, ,, domainAxis, ,, categoryCount, ,, seriesCount, ), ;, barW0, =, barW0, +]
[double, seriesW, =, calculateSeriesWidth, (, space, ,, domainAxis, ,, categoryCount, ,, seriesCount, ), ;, barW0, =, barW0, +, row, *]
[seriesW, =, calculateSeriesWidth, (, space, ,, domainAxis, ,, categoryCount, ,, seriesCount, ), ;, barW0, =, barW0, +, row, *, (]
[seriesW, =, calculateSeriesWidth, (, space, ,, domainAxis, ,, categoryCount, ,, seriesCount, ), ;, barW0, =, barW0, +, row, *, (]
[calculateSeriesWidth, (, space, ,, domainAxis, ,, categoryCount, ,, seriesCount, ), ;, barW0, =, barW0, +, row, *, (, seriesW, +]
[,, domainAxis, ,, categoryCount, ,, seriesCount, ), ;, barW0, =, barW0, +, row, *, (, seriesW, +, seriesGap, ), +]
[domainAxis, ,, categoryCount, ,, seriesCount, ), ;, barW0, =, barW0, +, row, *, (, seriesW, +, seriesGap, ), +, (]
[domainAxis, ,, categoryCount, ,, seriesCount, ), ;, barW0, =, barW0, +, row, *, (, seriesW, +, seriesGap, ), +, (]
[categoryCount, ,, seriesCount, ), ;, barW0, =, barW0, +, row, *, (, seriesW, +, seriesGap, ), +, (, seriesW, /]
[), ;, barW0, =, barW0, +, row, *, (, seriesW, +, seriesGap, ), +, (, seriesW, /, 2.0, ), -]
[;, barW0, =, barW0, +, row, *, (, seriesW, +, seriesGap, ), +, (, seriesW, /, 2.0, ), -, (]
[;, barW0, =, barW0, +, row, *, (, seriesW, +, seriesGap, ), +, (, seriesW, /, 2.0, ), -, (]
[;, barW0, =, barW0, +, row, *, (, seriesW, +, seriesGap, ), +, (, seriesW, /, 2.0, ), -, (]
[*, (, seriesW, +, seriesGap, ), +, (, seriesW, /, 2.0, ), -, (, state, ., getBarWidth, (, ), /]
[+, (, seriesW, /, 2.0, ), -, (, state, ., getBarWidth, (, ), /, 2.0, ), ;, }, else, {]
[seriesW, /, 2.0, ), -, (, state, ., getBarWidth, (, ), /, 2.0, ), ;, }, else, {, barW0, =]
[seriesW, /, 2.0, ), -, (, state, ., getBarWidth, (, ), /, 2.0, ), ;, }, else, {, barW0, =]
[seriesW, /, 2.0, ), -, (, state, ., getBarWidth, (, ), /, 2.0, ), ;, }, else, {, barW0, =]
[-, (, state, ., getBarWidth, (, ), /, 2.0, ), ;, }, else, {, barW0, =, domainAxis, ., getCategoryMiddle, (]
[state, ., getBarWidth, (, ), /, 2.0, ), ;, }, else, {, barW0, =, domainAxis, ., getCategoryMiddle, (, column, ,]
[), /, 2.0, ), ;, }, else, {, barW0, =, domainAxis, ., getCategoryMiddle, (, column, ,, getColumnCount, (, ), ,]
[2.0, ), ;, }, else, {, barW0, =, domainAxis, ., getCategoryMiddle, (, column, ,, getColumnCount, (, ), ,, dataArea, ,]
[2.0, ), ;, }, else, {, barW0, =, domainAxis, ., getCategoryMiddle, (, column, ,, getColumnCount, (, ), ,, dataArea, ,]
[=, domainAxis, ., getCategoryMiddle, (, column, ,, getColumnCount, (, ), ,, dataArea, ,, plot, ., getDomainAxisEdge, (, ), ), -]
[=, domainAxis, ., getCategoryMiddle, (, column, ,, getColumnCount, (, ), ,, dataArea, ,, plot, ., getDomainAxisEdge, (, ), ), -]
[=, domainAxis, ., getCategoryMiddle, (, column, ,, getColumnCount, (, ), ,, dataArea, ,, plot, ., getDomainAxisEdge, (, ), ), -]
[,, getColumnCount, (, ), ,, dataArea, ,, plot, ., getDomainAxisEdge, (, ), ), -, state, ., getBarWidth, (, ), /]
[,, dataArea, ,, plot, ., getDomainAxisEdge, (, ), ), -, state, ., getBarWidth, (, ), /, 2.0, ;, }, return]
[,, CategoryDataset, dataset, ,, int, row, ,, int, column, ,, boolean, selected, ,, int, pass, ), {, int, visibleRow, =]
[,, CategoryDataset, dataset, ,, int, row, ,, int, column, ,, boolean, selected, ,, int, pass, ), {, int, visibleRow, =]
[int, row, ,, int, column, ,, boolean, selected, ,, int, pass, ), {, int, visibleRow, =, state, ., getVisibleSeriesIndex, (]
[,, boolean, selected, ,, int, pass, ), {, int, visibleRow, =, state, ., getVisibleSeriesIndex, (, row, ), ;, if, (]
[,, boolean, selected, ,, int, pass, ), {, int, visibleRow, =, state, ., getVisibleSeriesIndex, (, row, ), ;, if, (]
[selected, ,, int, pass, ), {, int, visibleRow, =, state, ., getVisibleSeriesIndex, (, row, ), ;, if, (, visibleRow, <]
[state, ., getVisibleSeriesIndex, (, row, ), ;, if, (, visibleRow, <, 0, ), {, return, ;, }, Number, dataValue, =]
[state, ., getVisibleSeriesIndex, (, row, ), ;, if, (, visibleRow, <, 0, ), {, return, ;, }, Number, dataValue, =]
[row, ), ;, if, (, visibleRow, <, 0, ), {, return, ;, }, Number, dataValue, =, dataset, ., getValue, (]
[;, if, (, visibleRow, <, 0, ), {, return, ;, }, Number, dataValue, =, dataset, ., getValue, (, row, ,]
[0, ), {, return, ;, }, Number, dataValue, =, dataset, ., getValue, (, row, ,, column, ), ;, if, (]
[0, ), {, return, ;, }, Number, dataValue, =, dataset, ., getValue, (, row, ,, column, ), ;, if, (]
[{, return, ;, }, Number, dataValue, =, dataset, ., getValue, (, row, ,, column, ), ;, if, (, dataValue, ==]
[getValue, (, row, ,, column, ), ;, if, (, dataValue, ==, null, ), {, return, ;, }, double, value, =]
[getValue, (, row, ,, column, ), ;, if, (, dataValue, ==, null, ), {, return, ;, }, double, value, =]
[dataValue, ==, null, ), {, return, ;, }, double, value, =, dataValue, ., doubleValue, (, ), ;, PlotOrientation, orientation, =]
[dataValue, ==, null, ), {, return, ;, }, double, value, =, dataValue, ., doubleValue, (, ), ;, PlotOrientation, orientation, =]
[value, =, dataValue, ., doubleValue, (, ), ;, PlotOrientation, orientation, =, plot, ., getOrientation, (, ), ;, double, barW0, =]
[dataValue, ., doubleValue, (, ), ;, PlotOrientation, orientation, =, plot, ., getOrientation, (, ), ;, double, barW0, =, calculateBarW0, (]
[doubleValue, (, ), ;, PlotOrientation, orientation, =, plot, ., getOrientation, (, ), ;, double, barW0, =, calculateBarW0, (, plot, ,]
[), ;, PlotOrientation, orientation, =, plot, ., getOrientation, (, ), ;, double, barW0, =, calculateBarW0, (, plot, ,, orientation, ,]
[PlotOrientation, orientation, =, plot, ., getOrientation, (, ), ;, double, barW0, =, calculateBarW0, (, plot, ,, orientation, ,, dataArea, ,]
[=, plot, ., getOrientation, (, ), ;, double, barW0, =, calculateBarW0, (, plot, ,, orientation, ,, dataArea, ,, domainAxis, ,]
[., getOrientation, (, ), ;, double, barW0, =, calculateBarW0, (, plot, ,, orientation, ,, dataArea, ,, domainAxis, ,, state, ,]
[(, ), ;, double, barW0, =, calculateBarW0, (, plot, ,, orientation, ,, dataArea, ,, domainAxis, ,, state, ,, visibleRow, ,]
[calculateBarW0, (, plot, ,, orientation, ,, dataArea, ,, domainAxis, ,, state, ,, visibleRow, ,, column, ), ;, RectangleEdge, edge, =]
[calculateBarW0, (, plot, ,, orientation, ,, dataArea, ,, domainAxis, ,, state, ,, visibleRow, ,, column, ), ;, RectangleEdge, edge, =]
[,, state, ,, visibleRow, ,, column, ), ;, RectangleEdge, edge, =, plot, ., getRangeAxisEdge, (, ), ;, double, barL, =]
[,, state, ,, visibleRow, ,, column, ), ;, RectangleEdge, edge, =, plot, ., getRangeAxisEdge, (, ), ;, double, barL, =]
[,, column, ), ;, RectangleEdge, edge, =, plot, ., getRangeAxisEdge, (, ), ;, double, barL, =, rangeAxis, ., valueToJava2D, (]
[), ;, RectangleEdge, edge, =, plot, ., getRangeAxisEdge, (, ), ;, double, barL, =, rangeAxis, ., valueToJava2D, (, value, ,]
[RectangleEdge, edge, =, plot, ., getRangeAxisEdge, (, ), ;, double, barL, =, rangeAxis, ., valueToJava2D, (, value, ,, dataArea, ,]
[(, ), ;, double, barL, =, rangeAxis, ., valueToJava2D, (, value, ,, dataArea, ,, edge, ), ;, Line2D, line, =]
[=, rangeAxis, ., valueToJava2D, (, value, ,, dataArea, ,, edge, ), ;, Line2D, line, =, null, ;, double, x, =]
[value, ,, dataArea, ,, edge, ), ;, Line2D, line, =, null, ;, double, x, =, 0.0, ;, double, y, =]
[edge, ), ;, Line2D, line, =, null, ;, double, x, =, 0.0, ;, double, y, =, 0.0, ;, if, (]
[edge, ), ;, Line2D, line, =, null, ;, double, x, =, 0.0, ;, double, y, =, 0.0, ;, if, (]
[;, Line2D, line, =, null, ;, double, x, =, 0.0, ;, double, y, =, 0.0, ;, if, (, orientation, ==]
[;, Line2D, line, =, null, ;, double, x, =, 0.0, ;, double, y, =, 0.0, ;, if, (, orientation, ==]
[;, double, x, =, 0.0, ;, double, y, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {]
[x, =, 0.0, ;, double, y, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, x, =]
[0.0, ;, double, y, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, x, =, barL, ;]
[double, y, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, x, =, barL, ;, y, =]
[double, y, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, x, =, barL, ;, y, =]
[=, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, x, =, barL, ;, y, =, barW0, +]
[=, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, x, =, barL, ;, y, =, barW0, +]
[=, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, x, =, barL, ;, y, =, barW0, +]
[==, PlotOrientation, ., HORIZONTAL, ), {, x, =, barL, ;, y, =, barW0, +, state, ., getBarWidth, (, ), /]
[., HORIZONTAL, ), {, x, =, barL, ;, y, =, barW0, +, state, ., getBarWidth, (, ), /, 2.0, ;]
[), {, x, =, barL, ;, y, =, barW0, +, state, ., getBarWidth, (, ), /, 2.0, ;, line, =]
[;, y, =, barW0, +, state, ., getBarWidth, (, ), /, 2.0, ;, line, =, new, Line2D, ., Double, (]
[=, barW0, +, state, ., getBarWidth, (, ), /, 2.0, ;, line, =, new, Line2D, ., Double, (, barL, ,]
[+, state, ., getBarWidth, (, ), /, 2.0, ;, line, =, new, Line2D, ., Double, (, barL, ,, barW0, ,]
[., getBarWidth, (, ), /, 2.0, ;, line, =, new, Line2D, ., Double, (, barL, ,, barW0, ,, barL, ,]
[., getBarWidth, (, ), /, 2.0, ;, line, =, new, Line2D, ., Double, (, barL, ,, barW0, ,, barL, ,]
[(, ), /, 2.0, ;, line, =, new, Line2D, ., Double, (, barL, ,, barW0, ,, barL, ,, barW0, +]
[(, ), /, 2.0, ;, line, =, new, Line2D, ., Double, (, barL, ,, barW0, ,, barL, ,, barW0, +]
[Double, (, barL, ,, barW0, ,, barL, ,, barW0, +, state, ., getBarWidth, (, ), ), ;, }, else, {]
[barL, ,, barW0, ,, barL, ,, barW0, +, state, ., getBarWidth, (, ), ), ;, }, else, {, x, =]
[barL, ,, barW0, ,, barL, ,, barW0, +, state, ., getBarWidth, (, ), ), ;, }, else, {, x, =]
[barW0, ,, barL, ,, barW0, +, state, ., getBarWidth, (, ), ), ;, }, else, {, x, =, barW0, +]
[barW0, ,, barL, ,, barW0, +, state, ., getBarWidth, (, ), ), ;, }, else, {, x, =, barW0, +]
[barW0, ,, barL, ,, barW0, +, state, ., getBarWidth, (, ), ), ;, }, else, {, x, =, barW0, +]
[state, ., getBarWidth, (, ), ), ;, }, else, {, x, =, barW0, +, state, ., getBarWidth, (, ), /]
[getBarWidth, (, ), ), ;, }, else, {, x, =, barW0, +, state, ., getBarWidth, (, ), /, 2.0, ;]
[), ), ;, }, else, {, x, =, barW0, +, state, ., getBarWidth, (, ), /, 2.0, ;, y, =]
[;, }, else, {, x, =, barW0, +, state, ., getBarWidth, (, ), /, 2.0, ;, y, =, barL, ;]
[else, {, x, =, barW0, +, state, ., getBarWidth, (, ), /, 2.0, ;, y, =, barL, ;, line, =]
[+, state, ., getBarWidth, (, ), /, 2.0, ;, y, =, barL, ;, line, =, new, Line2D, ., Double, (]
[., getBarWidth, (, ), /, 2.0, ;, y, =, barL, ;, line, =, new, Line2D, ., Double, (, barW0, ,]
[(, ), /, 2.0, ;, y, =, barL, ;, line, =, new, Line2D, ., Double, (, barW0, ,, barL, ,]
[(, ), /, 2.0, ;, y, =, barL, ;, line, =, new, Line2D, ., Double, (, barW0, ,, barL, ,]
[/, 2.0, ;, y, =, barL, ;, line, =, new, Line2D, ., Double, (, barW0, ,, barL, ,, barW0, +]
[/, 2.0, ;, y, =, barL, ;, line, =, new, Line2D, ., Double, (, barW0, ,, barL, ,, barW0, +]
[;, line, =, new, Line2D, ., Double, (, barW0, ,, barL, ,, barW0, +, state, ., getBarWidth, (, ), ,]
[(, barW0, ,, barL, ,, barW0, +, state, ., getBarWidth, (, ), ,, barL, ), ;, }, Stroke, itemStroke, =]
[,, barL, ,, barW0, +, state, ., getBarWidth, (, ), ,, barL, ), ;, }, Stroke, itemStroke, =, getItemStroke, (]
[,, barW0, +, state, ., getBarWidth, (, ), ,, barL, ), ;, }, Stroke, itemStroke, =, getItemStroke, (, row, ,]
[+, state, ., getBarWidth, (, ), ,, barL, ), ;, }, Stroke, itemStroke, =, getItemStroke, (, row, ,, column, ,]
[,, barL, ), ;, }, Stroke, itemStroke, =, getItemStroke, (, row, ,, column, ,, selected, ), ;, Paint, itemPaint, =]
[), ;, }, Stroke, itemStroke, =, getItemStroke, (, row, ,, column, ,, selected, ), ;, Paint, itemPaint, =, getItemPaint, (]
[}, Stroke, itemStroke, =, getItemStroke, (, row, ,, column, ,, selected, ), ;, Paint, itemPaint, =, getItemPaint, (, row, ,]
[itemStroke, =, getItemStroke, (, row, ,, column, ,, selected, ), ;, Paint, itemPaint, =, getItemPaint, (, row, ,, column, ,]
[(, row, ,, column, ,, selected, ), ;, Paint, itemPaint, =, getItemPaint, (, row, ,, column, ,, selected, ), ;]
[(, row, ,, column, ,, selected, ), ;, Paint, itemPaint, =, getItemPaint, (, row, ,, column, ,, selected, ), ;]
[,, selected, ), ;, Paint, itemPaint, =, getItemPaint, (, row, ,, column, ,, selected, ), ;, g2, ., setStroke, (]
[;, Paint, itemPaint, =, getItemPaint, (, row, ,, column, ,, selected, ), ;, g2, ., setStroke, (, itemStroke, ), ;]
[;, Paint, itemPaint, =, getItemPaint, (, row, ,, column, ,, selected, ), ;, g2, ., setStroke, (, itemStroke, ), ;]
[getItemPaint, (, row, ,, column, ,, selected, ), ;, g2, ., setStroke, (, itemStroke, ), ;, g2, ., setPaint, (]
[,, column, ,, selected, ), ;, g2, ., setStroke, (, itemStroke, ), ;, g2, ., setPaint, (, itemPaint, ), ;]
[,, column, ,, selected, ), ;, g2, ., setStroke, (, itemStroke, ), ;, g2, ., setPaint, (, itemPaint, ), ;]
[), ;, g2, ., setStroke, (, itemStroke, ), ;, g2, ., setPaint, (, itemPaint, ), ;, g2, ., draw, (]
[itemStroke, ), ;, g2, ., setPaint, (, itemPaint, ), ;, g2, ., draw, (, line, ), ;, CategoryItemLabelGenerator, generator, =]
[;, g2, ., setPaint, (, itemPaint, ), ;, g2, ., draw, (, line, ), ;, CategoryItemLabelGenerator, generator, =, getItemLabelGenerator, (]
[., setPaint, (, itemPaint, ), ;, g2, ., draw, (, line, ), ;, CategoryItemLabelGenerator, generator, =, getItemLabelGenerator, (, row, ,]
[(, itemPaint, ), ;, g2, ., draw, (, line, ), ;, CategoryItemLabelGenerator, generator, =, getItemLabelGenerator, (, row, ,, column, ,]
[., draw, (, line, ), ;, CategoryItemLabelGenerator, generator, =, getItemLabelGenerator, (, row, ,, column, ,, selected, ), ;, if, (]
[., draw, (, line, ), ;, CategoryItemLabelGenerator, generator, =, getItemLabelGenerator, (, row, ,, column, ,, selected, ), ;, if, (]
[., draw, (, line, ), ;, CategoryItemLabelGenerator, generator, =, getItemLabelGenerator, (, row, ,, column, ,, selected, ), ;, if, (]
[(, line, ), ;, CategoryItemLabelGenerator, generator, =, getItemLabelGenerator, (, row, ,, column, ,, selected, ), ;, if, (, generator, !=]
[), ;, CategoryItemLabelGenerator, generator, =, getItemLabelGenerator, (, row, ,, column, ,, selected, ), ;, if, (, generator, !=, null, &&]
[CategoryItemLabelGenerator, generator, =, getItemLabelGenerator, (, row, ,, column, ,, selected, ), ;, if, (, generator, !=, null, &&, isItemLabelVisible, (]
[=, getItemLabelGenerator, (, row, ,, column, ,, selected, ), ;, if, (, generator, !=, null, &&, isItemLabelVisible, (, row, ,]
[(, row, ,, column, ,, selected, ), ;, if, (, generator, !=, null, &&, isItemLabelVisible, (, row, ,, column, ,]
[,, selected, ), ;, if, (, generator, !=, null, &&, isItemLabelVisible, (, row, ,, column, ,, selected, ), ), {]
[), ;, if, (, generator, !=, null, &&, isItemLabelVisible, (, row, ,, column, ,, selected, ), ), {, drawItemLabel, (]
[if, (, generator, !=, null, &&, isItemLabelVisible, (, row, ,, column, ,, selected, ), ), {, drawItemLabel, (, g2, ,]
[generator, !=, null, &&, isItemLabelVisible, (, row, ,, column, ,, selected, ), ), {, drawItemLabel, (, g2, ,, orientation, ,]
[null, &&, isItemLabelVisible, (, row, ,, column, ,, selected, ), ), {, drawItemLabel, (, g2, ,, orientation, ,, dataset, ,]
[isItemLabelVisible, (, row, ,, column, ,, selected, ), ), {, drawItemLabel, (, g2, ,, orientation, ,, dataset, ,, row, ,]
[row, ,, column, ,, selected, ), ), {, drawItemLabel, (, g2, ,, orientation, ,, dataset, ,, row, ,, column, ,]
[column, ,, selected, ), ), {, drawItemLabel, (, g2, ,, orientation, ,, dataset, ,, row, ,, column, ,, selected, ,]
[selected, ), ), {, drawItemLabel, (, g2, ,, orientation, ,, dataset, ,, row, ,, column, ,, selected, ,, x, ,]
[), {, drawItemLabel, (, g2, ,, orientation, ,, dataset, ,, row, ,, column, ,, selected, ,, x, ,, y, ,]
[{, drawItemLabel, (, g2, ,, orientation, ,, dataset, ,, row, ,, column, ,, selected, ,, x, ,, y, ,, (]
[{, drawItemLabel, (, g2, ,, orientation, ,, dataset, ,, row, ,, column, ,, selected, ,, x, ,, y, ,, (]
[(, g2, ,, orientation, ,, dataset, ,, row, ,, column, ,, selected, ,, x, ,, y, ,, (, value, <]
[,, column, ,, selected, ,, x, ,, y, ,, (, value, <, 0.0, ), ), ;, }, int, datasetIndex, =]
[,, column, ,, selected, ,, x, ,, y, ,, (, value, <, 0.0, ), ), ;, }, int, datasetIndex, =]
[,, x, ,, y, ,, (, value, <, 0.0, ), ), ;, }, int, datasetIndex, =, plot, ., indexOf, (]
[y, ,, (, value, <, 0.0, ), ), ;, }, int, datasetIndex, =, plot, ., indexOf, (, dataset, ), ;]
[(, value, <, 0.0, ), ), ;, }, int, datasetIndex, =, plot, ., indexOf, (, dataset, ), ;, updateCrosshairValues, (]
[(, value, <, 0.0, ), ), ;, }, int, datasetIndex, =, plot, ., indexOf, (, dataset, ), ;, updateCrosshairValues, (]
[;, }, int, datasetIndex, =, plot, ., indexOf, (, dataset, ), ;, updateCrosshairValues, (, state, ., getCrosshairState, (, ), ,]
[;, }, int, datasetIndex, =, plot, ., indexOf, (, dataset, ), ;, updateCrosshairValues, (, state, ., getCrosshairState, (, ), ,]
[=, plot, ., indexOf, (, dataset, ), ;, updateCrosshairValues, (, state, ., getCrosshairState, (, ), ,, dataset, ., getRowKey, (]
[indexOf, (, dataset, ), ;, updateCrosshairValues, (, state, ., getCrosshairState, (, ), ,, dataset, ., getRowKey, (, row, ), ,]
[indexOf, (, dataset, ), ;, updateCrosshairValues, (, state, ., getCrosshairState, (, ), ,, dataset, ., getRowKey, (, row, ), ,]
[;, updateCrosshairValues, (, state, ., getCrosshairState, (, ), ,, dataset, ., getRowKey, (, row, ), ,, dataset, ., getColumnKey, (]
[state, ., getCrosshairState, (, ), ,, dataset, ., getRowKey, (, row, ), ,, dataset, ., getColumnKey, (, column, ), ,]
[getCrosshairState, (, ), ,, dataset, ., getRowKey, (, row, ), ,, dataset, ., getColumnKey, (, column, ), ,, value, ,]
[), ,, dataset, ., getRowKey, (, row, ), ,, dataset, ., getColumnKey, (, column, ), ,, value, ,, datasetIndex, ,]
[dataset, ., getRowKey, (, row, ), ,, dataset, ., getColumnKey, (, column, ), ,, value, ,, datasetIndex, ,, barW0, ,]
[getRowKey, (, row, ), ,, dataset, ., getColumnKey, (, column, ), ,, value, ,, datasetIndex, ,, barW0, ,, barL, ,]
[., getColumnKey, (, column, ), ,, value, ,, datasetIndex, ,, barW0, ,, barL, ,, orientation, ), ;, EntityCollection, entities, =]
[., getColumnKey, (, column, ), ,, value, ,, datasetIndex, ,, barW0, ,, barL, ,, orientation, ), ;, EntityCollection, entities, =]
[datasetIndex, ,, barW0, ,, barL, ,, orientation, ), ;, EntityCollection, entities, =, state, ., getEntityCollection, (, ), ;, if, (]
[datasetIndex, ,, barW0, ,, barL, ,, orientation, ), ;, EntityCollection, entities, =, state, ., getEntityCollection, (, ), ;, if, (]
[barW0, ,, barL, ,, orientation, ), ;, EntityCollection, entities, =, state, ., getEntityCollection, (, ), ;, if, (, entities, !=]
[,, orientation, ), ;, EntityCollection, entities, =, state, ., getEntityCollection, (, ), ;, if, (, entities, !=, null, ), {]
[), ;, EntityCollection, entities, =, state, ., getEntityCollection, (, ), ;, if, (, entities, !=, null, ), {, addEntity, (]
[EntityCollection, entities, =, state, ., getEntityCollection, (, ), ;, if, (, entities, !=, null, ), {, addEntity, (, entities, ,]
[EntityCollection, entities, =, state, ., getEntityCollection, (, ), ;, if, (, entities, !=, null, ), {, addEntity, (, entities, ,]
[(, ), ;, if, (, entities, !=, null, ), {, addEntity, (, entities, ,, line, ., getBounds, (, ), ,]
[;, if, (, entities, !=, null, ), {, addEntity, (, entities, ,, line, ., getBounds, (, ), ,, dataset, ,]
[(, entities, !=, null, ), {, addEntity, (, entities, ,, line, ., getBounds, (, ), ,, dataset, ,, row, ,]
[!=, null, ), {, addEntity, (, entities, ,, line, ., getBounds, (, ), ,, dataset, ,, row, ,, column, ,]
[protected, double, calculateSeriesWidth, (, double, space, ,, CategoryAxis, axis, ,, int, categories, ,, int, series, ), {, double, factor, =]
[protected, double, calculateSeriesWidth, (, double, space, ,, CategoryAxis, axis, ,, int, categories, ,, int, series, ), {, double, factor, =]
[protected, double, calculateSeriesWidth, (, double, space, ,, CategoryAxis, axis, ,, int, categories, ,, int, series, ), {, double, factor, =]
[protected, double, calculateSeriesWidth, (, double, space, ,, CategoryAxis, axis, ,, int, categories, ,, int, series, ), {, double, factor, =]
[calculateSeriesWidth, (, double, space, ,, CategoryAxis, axis, ,, int, categories, ,, int, series, ), {, double, factor, =, 1.0, -]
[,, CategoryAxis, axis, ,, int, categories, ,, int, series, ), {, double, factor, =, 1.0, -, getItemMargin, (, ), -]
[,, CategoryAxis, axis, ,, int, categories, ,, int, series, ), {, double, factor, =, 1.0, -, getItemMargin, (, ), -]
[,, int, series, ), {, double, factor, =, 1.0, -, getItemMargin, (, ), -, axis, ., getLowerMargin, (, ), -]
[,, int, series, ), {, double, factor, =, 1.0, -, getItemMargin, (, ), -, axis, ., getLowerMargin, (, ), -]
[1.0, -, getItemMargin, (, ), -, axis, ., getLowerMargin, (, ), -, axis, ., getUpperMargin, (, ), ;, if, (]
[1.0, -, getItemMargin, (, ), -, axis, ., getLowerMargin, (, ), -, axis, ., getUpperMargin, (, ), ;, if, (]
[getItemMargin, (, ), -, axis, ., getLowerMargin, (, ), -, axis, ., getUpperMargin, (, ), ;, if, (, categories, >]
[-, axis, ., getLowerMargin, (, ), -, axis, ., getUpperMargin, (, ), ;, if, (, categories, >, 1, ), {]
[., getLowerMargin, (, ), -, axis, ., getUpperMargin, (, ), ;, if, (, categories, >, 1, ), {, factor, =]
[., getLowerMargin, (, ), -, axis, ., getUpperMargin, (, ), ;, if, (, categories, >, 1, ), {, factor, =]
[(, ), -, axis, ., getUpperMargin, (, ), ;, if, (, categories, >, 1, ), {, factor, =, factor, -]
[(, ), -, axis, ., getUpperMargin, (, ), ;, if, (, categories, >, 1, ), {, factor, =, factor, -]
[;, if, (, categories, >, 1, ), {, factor, =, factor, -, axis, ., getCategoryMargin, (, ), ;, }, return]
[;, if, (, categories, >, 1, ), {, factor, =, factor, -, axis, ., getCategoryMargin, (, ), ;, }, return]
[if, (, categories, >, 1, ), {, factor, =, factor, -, axis, ., getCategoryMargin, (, ), ;, }, return, (]
[if, (, categories, >, 1, ), {, factor, =, factor, -, axis, ., getCategoryMargin, (, ), ;, }, return, (]
[categories, >, 1, ), {, factor, =, factor, -, axis, ., getCategoryMargin, (, ), ;, }, return, (, space, *]
[), {, factor, =, factor, -, axis, ., getCategoryMargin, (, ), ;, }, return, (, space, *, factor, ), /]
[{, factor, =, factor, -, axis, ., getCategoryMargin, (, ), ;, }, return, (, space, *, factor, ), /, (]
[{, factor, =, factor, -, axis, ., getCategoryMargin, (, ), ;, }, return, (, space, *, factor, ), /, (]
[=, factor, -, axis, ., getCategoryMargin, (, ), ;, }, return, (, space, *, factor, ), /, (, categories, *]
[Comparable, rowKey, ,, Comparable, columnKey, ,, CategoryDataset, dataset, ,, CategoryAxis, axis, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return]
[Comparable, rowKey, ,, Comparable, columnKey, ,, CategoryDataset, dataset, ,, CategoryAxis, axis, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return]
[columnKey, ,, CategoryDataset, dataset, ,, CategoryAxis, axis, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return, axis, ., getCategorySeriesMiddle, (]
[CategoryDataset, dataset, ,, CategoryAxis, axis, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return, axis, ., getCategorySeriesMiddle, (, columnKey, ,]
[,, CategoryAxis, axis, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return, axis, ., getCategorySeriesMiddle, (, columnKey, ,, rowKey, ,]
[axis, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return, axis, ., getCategorySeriesMiddle, (, columnKey, ,, rowKey, ,, dataset, ,]
[axis, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return, axis, ., getCategorySeriesMiddle, (, columnKey, ,, rowKey, ,, dataset, ,]
[,, RectangleEdge, edge, ), {, return, axis, ., getCategorySeriesMiddle, (, columnKey, ,, rowKey, ,, dataset, ,, this, ., itemMargin, ,]
[edge, ), {, return, axis, ., getCategorySeriesMiddle, (, columnKey, ,, rowKey, ,, dataset, ,, this, ., itemMargin, ,, area, ,]
[this, ., itemMargin, ,, area, ,, edge, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[this, ., itemMargin, ,, area, ,, edge, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[itemMargin, ,, area, ,, edge, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[edge, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, LevelRenderer, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, LevelRenderer, ), ), {, return, false, ;, }, LevelRenderer, that, =]
[if, (, !, (, obj, instanceof, LevelRenderer, ), ), {, return, false, ;, }, LevelRenderer, that, =, (, LevelRenderer, )]
[obj, instanceof, LevelRenderer, ), ), {, return, false, ;, }, LevelRenderer, that, =, (, LevelRenderer, ), obj, ;, if, (]
[obj, instanceof, LevelRenderer, ), ), {, return, false, ;, }, LevelRenderer, that, =, (, LevelRenderer, ), obj, ;, if, (]
[obj, instanceof, LevelRenderer, ), ), {, return, false, ;, }, LevelRenderer, that, =, (, LevelRenderer, ), obj, ;, if, (]
[), {, return, false, ;, }, LevelRenderer, that, =, (, LevelRenderer, ), obj, ;, if, (, this, ., itemMargin, !=]
[), {, return, false, ;, }, LevelRenderer, that, =, (, LevelRenderer, ), obj, ;, if, (, this, ., itemMargin, !=]
[LevelRenderer, that, =, (, LevelRenderer, ), obj, ;, if, (, this, ., itemMargin, !=, that, ., itemMargin, ), {, return]
[), obj, ;, if, (, this, ., itemMargin, !=, that, ., itemMargin, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., itemMargin, !=, that, ., itemMargin, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., itemMargin, !=, that, ., itemMargin, ), {, return, false, ;, }, if, (]
[(, this, ., itemMargin, !=, that, ., itemMargin, ), {, return, false, ;, }, if, (, this, ., maxItemWidth, !=]
[(, this, ., itemMargin, !=, that, ., itemMargin, ), {, return, false, ;, }, if, (, this, ., maxItemWidth, !=]
[., itemMargin, ), {, return, false, ;, }, if, (, this, ., maxItemWidth, !=, that, ., maxItemWidth, ), {, return]
[return, false, ;, }, if, (, this, ., maxItemWidth, !=, that, ., maxItemWidth, ), {, return, false, ;, }, return]
[return, false, ;, }, if, (, this, ., maxItemWidth, !=, that, ., maxItemWidth, ), {, return, false, ;, }, return]
[if, (, this, ., maxItemWidth, !=, that, ., maxItemWidth, ), {, return, false, ;, }, return, super, ., equals, (]
[;, }, return, super, ., equals, (, obj, ), ;, }, public, int, hashCode, (, ), {, int, hash, =]
[;, }, return, super, ., equals, (, obj, ), ;, }, public, int, hashCode, (, ), {, int, hash, =]
[(, obj, ), ;, }, public, int, hashCode, (, ), {, int, hash, =, super, ., hashCode, (, ), ;]
[), ;, }, public, int, hashCode, (, ), {, int, hash, =, super, ., hashCode, (, ), ;, hash, =]
[), ;, }, public, int, hashCode, (, ), {, int, hash, =, super, ., hashCode, (, ), ;, hash, =]
[int, hashCode, (, ), {, int, hash, =, super, ., hashCode, (, ), ;, hash, =, HashUtilities, ., hashCode, (]
[(, ), {, int, hash, =, super, ., hashCode, (, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[(, ), {, int, hash, =, super, ., hashCode, (, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[=, super, ., hashCode, (, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., itemMargin, ), ;]
[., hashCode, (, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., itemMargin, ), ;, hash, =]
[., hashCode, (, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., itemMargin, ), ;, hash, =]
[;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., itemMargin, ), ;, hash, =, HashUtilities, ., hashCode, (]
[=, HashUtilities, ., hashCode, (, hash, ,, this, ., itemMargin, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[=, HashUtilities, ., hashCode, (, hash, ,, this, ., itemMargin, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[,, this, ., itemMargin, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., maxItemWidth, ), ;, return]
