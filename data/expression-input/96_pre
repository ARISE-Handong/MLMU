[., Set, ;, class, LiveVariablesAnalysis, extends, DataFlowAnalysis, <, Node, ,, LiveVariablesAnalysis, ., LiveVariableLattice, >, {, static, final, int, MAX_VARIABLES_TO_ANALYZE, =]
[Node, ,, LiveVariablesAnalysis, ., LiveVariableLattice, >, {, static, final, int, MAX_VARIABLES_TO_ANALYZE, =, 100, ;, public, static, final, String, ARGUMENT_ARRAY_ALIAS, =]
[<, LiveVariableLattice, >, {, @, Override, public, LiveVariableLattice, apply, (, List, <, LiveVariableLattice, >, in, ), {, LiveVariableLattice, result, =]
[{, @, Override, public, LiveVariableLattice, apply, (, List, <, LiveVariableLattice, >, in, ), {, LiveVariableLattice, result, =, new, LiveVariableLattice, (]
[{, @, Override, public, LiveVariableLattice, apply, (, List, <, LiveVariableLattice, >, in, ), {, LiveVariableLattice, result, =, new, LiveVariableLattice, (]
[LiveVariableLattice, apply, (, List, <, LiveVariableLattice, >, in, ), {, LiveVariableLattice, result, =, new, LiveVariableLattice, (, in, ., get, (]
[{, LiveVariableLattice, result, =, new, LiveVariableLattice, (, in, ., get, (, 0, ), ), ;, for, (, int, i, =]
[result, =, new, LiveVariableLattice, (, in, ., get, (, 0, ), ), ;, for, (, int, i, =, 1, ;]
[result, =, new, LiveVariableLattice, (, in, ., get, (, 0, ), ), ;, for, (, int, i, =, 1, ;]
[new, LiveVariableLattice, (, in, ., get, (, 0, ), ), ;, for, (, int, i, =, 1, ;, i, <]
[new, LiveVariableLattice, (, in, ., get, (, 0, ), ), ;, for, (, int, i, =, 1, ;, i, <]
[(, 0, ), ), ;, for, (, int, i, =, 1, ;, i, <, in, ., size, (, ), ;]
[(, 0, ), ), ;, for, (, int, i, =, 1, ;, i, <, in, ., size, (, ), ;]
[;, for, (, int, i, =, 1, ;, i, <, in, ., size, (, ), ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, in, ., size, (, ), ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, in, ., size, (, ), ;, i, ++, ), {]
[1, ;, i, <, in, ., size, (, ), ;, i, ++, ), {, result, ., liveSet, ., or, (]
[1, ;, i, <, in, ., size, (, ), ;, i, ++, ), {, result, ., liveSet, ., or, (]
[1, ;, i, <, in, ., size, (, ), ;, i, ++, ), {, result, ., liveSet, ., or, (]
[in, ., size, (, ), ;, i, ++, ), {, result, ., liveSet, ., or, (, in, ., get, (]
[), {, result, ., liveSet, ., or, (, in, ., get, (, i, ), ., liveSet, ), ;, }, return]
[}, }, static, class, LiveVariableLattice, implements, LatticeElement, {, private, final, BitSet, liveSet, ;, private, LiveVariableLattice, (, int, numVars, ), {]
[}, }, static, class, LiveVariableLattice, implements, LatticeElement, {, private, final, BitSet, liveSet, ;, private, LiveVariableLattice, (, int, numVars, ), {]
[LiveVariableLattice, implements, LatticeElement, {, private, final, BitSet, liveSet, ;, private, LiveVariableLattice, (, int, numVars, ), {, this, ., liveSet, =]
[{, private, final, BitSet, liveSet, ;, private, LiveVariableLattice, (, int, numVars, ), {, this, ., liveSet, =, new, BitSet, (]
[), {, this, ., liveSet, =, new, BitSet, (, numVars, ), ;, }, private, LiveVariableLattice, (, LiveVariableLattice, other, ), {]
[), {, this, ., liveSet, =, new, BitSet, (, numVars, ), ;, }, private, LiveVariableLattice, (, LiveVariableLattice, other, ), {]
[liveSet, =, new, BitSet, (, numVars, ), ;, }, private, LiveVariableLattice, (, LiveVariableLattice, other, ), {, Preconditions, ., checkNotNull, (]
[BitSet, (, numVars, ), ;, }, private, LiveVariableLattice, (, LiveVariableLattice, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;]
[BitSet, (, numVars, ), ;, }, private, LiveVariableLattice, (, LiveVariableLattice, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;]
[;, }, private, LiveVariableLattice, (, LiveVariableLattice, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, this, ., liveSet, =]
[LiveVariableLattice, (, LiveVariableLattice, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, this, ., liveSet, =, (, BitSet, )]
[LiveVariableLattice, (, LiveVariableLattice, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, this, ., liveSet, =, (, BitSet, )]
[LiveVariableLattice, (, LiveVariableLattice, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, this, ., liveSet, =, (, BitSet, )]
[), other, ., liveSet, ., clone, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {]
[), other, ., liveSet, ., clone, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {]
[., clone, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, Preconditions, ., checkNotNull, (]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, return]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, return]
[}, @, Override, public, boolean, equals, (, Object, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, return, (]
[}, @, Override, public, boolean, equals, (, Object, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, return, (]
[equals, (, Object, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, return, (, other, instanceof, LiveVariableLattice, ), &&]
[equals, (, Object, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, return, (, other, instanceof, LiveVariableLattice, ), &&]
[equals, (, Object, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, return, (, other, instanceof, LiveVariableLattice, ), &&]
[Preconditions, ., checkNotNull, (, other, ), ;, return, (, other, instanceof, LiveVariableLattice, ), &&, this, ., liveSet, ., equals, (]
[Preconditions, ., checkNotNull, (, other, ), ;, return, (, other, instanceof, LiveVariableLattice, ), &&, this, ., liveSet, ., equals, (]
[., checkNotNull, (, other, ), ;, return, (, other, instanceof, LiveVariableLattice, ), &&, this, ., liveSet, ., equals, (, (]
[other, ), ;, return, (, other, instanceof, LiveVariableLattice, ), &&, this, ., liveSet, ., equals, (, (, (, LiveVariableLattice, )]
[(, (, (, LiveVariableLattice, ), other, ), ., liveSet, ), ;, }, public, boolean, isLive, (, Var, v, ), {]
[(, (, (, LiveVariableLattice, ), other, ), ., liveSet, ), ;, }, public, boolean, isLive, (, Var, v, ), {]
[), other, ), ., liveSet, ), ;, }, public, boolean, isLive, (, Var, v, ), {, Preconditions, ., checkNotNull, (]
[liveSet, ), ;, }, public, boolean, isLive, (, Var, v, ), {, Preconditions, ., checkNotNull, (, v, ), ;, return]
[liveSet, ), ;, }, public, boolean, isLive, (, Var, v, ), {, Preconditions, ., checkNotNull, (, v, ), ;, return]
[public, boolean, isLive, (, Var, v, ), {, Preconditions, ., checkNotNull, (, v, ), ;, return, liveSet, ., get, (]
[public, boolean, isLive, (, Var, v, ), {, Preconditions, ., checkNotNull, (, v, ), ;, return, liveSet, ., get, (]
[return, liveSet, ., get, (, v, ., index, ), ;, }, public, boolean, isLive, (, int, index, ), {, return]
[return, liveSet, ., get, (, v, ., index, ), ;, }, public, boolean, isLive, (, int, index, ), {, return]
[(, v, ., index, ), ;, }, public, boolean, isLive, (, int, index, ), {, return, liveSet, ., get, (]
[), {, return, liveSet, ., get, (, index, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[), {, return, liveSet, ., get, (, index, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, liveSet, ., toString, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, ), {, return, liveSet, ., toString, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[>, escaped, ;, LiveVariablesAnalysis, (, ControlFlowGraph, <, Node, >, cfg, ,, Scope, jsScope, ,, AbstractCompiler, compiler, ), {, super, (]
[;, LiveVariablesAnalysis, (, ControlFlowGraph, <, Node, >, cfg, ,, Scope, jsScope, ,, AbstractCompiler, compiler, ), {, super, (, cfg, ,]
[>, cfg, ,, Scope, jsScope, ,, AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, LiveVariableJoinOp, (, ), ), ;]
[>, cfg, ,, Scope, jsScope, ,, AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, LiveVariableJoinOp, (, ), ), ;]
[jsScope, ,, AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, LiveVariableJoinOp, (, ), ), ;, this, ., jsScope, =]
[AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, LiveVariableJoinOp, (, ), ), ;, this, ., jsScope, =, jsScope, ;]
[AbstractCompiler, compiler, ), {, super, (, cfg, ,, new, LiveVariableJoinOp, (, ), ), ;, this, ., jsScope, =, jsScope, ;]
[super, (, cfg, ,, new, LiveVariableJoinOp, (, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., escaped, =]
[super, (, cfg, ,, new, LiveVariableJoinOp, (, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., escaped, =]
[(, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;]
[), ;, this, ., jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (]
[this, ., jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,]
[jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,]
[computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;, }, public, Set, <, Var, >, getEscapedLocals, (, ), {, return]
[<, Var, >, getEscapedLocals, (, ), {, return, escaped, ;, }, public, int, getVarIndex, (, String, var, ), {, return]
[<, Var, >, getEscapedLocals, (, ), {, return, escaped, ;, }, public, int, getVarIndex, (, String, var, ), {, return]
[<, Var, >, getEscapedLocals, (, ), {, return, escaped, ;, }, public, int, getVarIndex, (, String, var, ), {, return]
[(, ), {, return, escaped, ;, }, public, int, getVarIndex, (, String, var, ), {, return, jsScope, ., getVar, (]
[{, return, jsScope, ., getVar, (, var, ), ., index, ;, }, @, Override, boolean, isForward, (, ), {, return]
[}, @, Override, boolean, isForward, (, ), {, return, false, ;, }, @, Override, LiveVariableLattice, createEntryLattice, (, ), {, return]
[boolean, isForward, (, ), {, return, false, ;, }, @, Override, LiveVariableLattice, createEntryLattice, (, ), {, return, new, LiveVariableLattice, (]
[boolean, isForward, (, ), {, return, false, ;, }, @, Override, LiveVariableLattice, createEntryLattice, (, ), {, return, new, LiveVariableLattice, (]
[return, new, LiveVariableLattice, (, jsScope, ., getVarCount, (, ), ), ;, }, @, Override, LiveVariableLattice, createInitialEstimateLattice, (, ), {, return]
[(, jsScope, ., getVarCount, (, ), ), ;, }, @, Override, LiveVariableLattice, createInitialEstimateLattice, (, ), {, return, new, LiveVariableLattice, (]
[(, jsScope, ., getVarCount, (, ), ), ;, }, @, Override, LiveVariableLattice, createInitialEstimateLattice, (, ), {, return, new, LiveVariableLattice, (]
[), ), ;, }, @, Override, LiveVariableLattice, flowThrough, (, Node, node, ,, LiveVariableLattice, input, ), {, final, BitSet, gen, =]
[}, @, Override, LiveVariableLattice, flowThrough, (, Node, node, ,, LiveVariableLattice, input, ), {, final, BitSet, gen, =, new, BitSet, (]
[}, @, Override, LiveVariableLattice, flowThrough, (, Node, node, ,, LiveVariableLattice, input, ), {, final, BitSet, gen, =, new, BitSet, (]
[}, @, Override, LiveVariableLattice, flowThrough, (, Node, node, ,, LiveVariableLattice, input, ), {, final, BitSet, gen, =, new, BitSet, (]
[final, BitSet, gen, =, new, BitSet, (, input, ., liveSet, ., size, (, ), ), ;, final, BitSet, kill, =]
[=, new, BitSet, (, input, ., liveSet, ., size, (, ), ), ;, final, BitSet, kill, =, new, BitSet, (]
[=, new, BitSet, (, input, ., liveSet, ., size, (, ), ), ;, final, BitSet, kill, =, new, BitSet, (]
[=, new, BitSet, (, input, ., liveSet, ., size, (, ), ), ;, final, BitSet, kill, =, new, BitSet, (]
[;, final, BitSet, kill, =, new, BitSet, (, input, ., liveSet, ., size, (, ), ), ;, boolean, conditional, =]
[(, ), ), ;, boolean, conditional, =, false, ;, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, edgeList, =]
[(, ), ), ;, boolean, conditional, =, false, ;, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, edgeList, =]
[=, false, ;, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, edgeList, =, getCfg, (, ), ., getOutEdges, (]
[=, getCfg, (, ), ., getOutEdges, (, node, ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :]
[getOutEdges, (, node, ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :, edgeList, ), {, if, (]
[getOutEdges, (, node, ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :, edgeList, ), {, if, (]
[getOutEdges, (, node, ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :, edgeList, ), {, if, (]
[(, DiGraphEdge, <, Node, ,, Branch, >, edge, :, edgeList, ), {, if, (, Branch, ., ON_EX, ., equals, (]
[(, DiGraphEdge, <, Node, ,, Branch, >, edge, :, edgeList, ), {, if, (, Branch, ., ON_EX, ., equals, (]
[:, edgeList, ), {, if, (, Branch, ., ON_EX, ., equals, (, edge, ., getValue, (, ), ), ), {]
[), {, if, (, Branch, ., ON_EX, ., equals, (, edge, ., getValue, (, ), ), ), {, conditional, =]
[Branch, ., ON_EX, ., equals, (, edge, ., getValue, (, ), ), ), {, conditional, =, true, ;, }, }]
[ON_EX, ., equals, (, edge, ., getValue, (, ), ), ), {, conditional, =, true, ;, }, }, computeGenKill, (]
[equals, (, edge, ., getValue, (, ), ), ), {, conditional, =, true, ;, }, }, computeGenKill, (, node, ,]
[edge, ., getValue, (, ), ), ), {, conditional, =, true, ;, }, }, computeGenKill, (, node, ,, gen, ,]
[getValue, (, ), ), ), {, conditional, =, true, ;, }, }, computeGenKill, (, node, ,, gen, ,, kill, ,]
[conditional, =, true, ;, }, }, computeGenKill, (, node, ,, gen, ,, kill, ,, conditional, ), ;, LiveVariableLattice, result, =]
[;, }, }, computeGenKill, (, node, ,, gen, ,, kill, ,, conditional, ), ;, LiveVariableLattice, result, =, new, LiveVariableLattice, (]
[computeGenKill, (, node, ,, gen, ,, kill, ,, conditional, ), ;, LiveVariableLattice, result, =, new, LiveVariableLattice, (, input, ), ;]
[computeGenKill, (, node, ,, gen, ,, kill, ,, conditional, ), ;, LiveVariableLattice, result, =, new, LiveVariableLattice, (, input, ), ;]
[computeGenKill, (, node, ,, gen, ,, kill, ,, conditional, ), ;, LiveVariableLattice, result, =, new, LiveVariableLattice, (, input, ), ;]
[kill, ,, conditional, ), ;, LiveVariableLattice, result, =, new, LiveVariableLattice, (, input, ), ;, result, ., liveSet, ., andNot, (]
[), ;, LiveVariableLattice, result, =, new, LiveVariableLattice, (, input, ), ;, result, ., liveSet, ., andNot, (, kill, ), ;]
[), ;, LiveVariableLattice, result, =, new, LiveVariableLattice, (, input, ), ;, result, ., liveSet, ., andNot, (, kill, ), ;]
[), ;, LiveVariableLattice, result, =, new, LiveVariableLattice, (, input, ), ;, result, ., liveSet, ., andNot, (, kill, ), ;]
[LiveVariableLattice, (, input, ), ;, result, ., liveSet, ., andNot, (, kill, ), ;, result, ., liveSet, ., or, (]
[;, result, ., liveSet, ., andNot, (, kill, ), ;, result, ., liveSet, ., or, (, gen, ), ;, return]
[}, private, void, computeGenKill, (, Node, n, ,, BitSet, gen, ,, BitSet, kill, ,, boolean, conditional, ), {, switch, (]
[}, private, void, computeGenKill, (, Node, n, ,, BitSet, gen, ,, BitSet, kill, ,, boolean, conditional, ), {, switch, (]
[BitSet, gen, ,, BitSet, kill, ,, boolean, conditional, ), {, switch, (, n, ., getType, (, ), ), {, case]
[BitSet, gen, ,, BitSet, kill, ,, boolean, conditional, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, boolean, conditional, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., SCRIPT, :, case]
[,, boolean, conditional, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., SCRIPT, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case]
[), {, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case]
[), {, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case]
[SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case]
[SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case]
[BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case]
[BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case]
[., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :]
[:, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeGenKill, (]
[:, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeGenKill, (]
[Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeGenKill, (, NodeUtil, ., getConditionExpression, (]
[:, case, Token, ., DO, :, case, Token, ., IF, :, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,]
[Token, ., DO, :, case, Token, ., IF, :, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,]
[DO, :, case, Token, ., IF, :, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill, ,]
[:, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill, ,, conditional, ), ;, return, ;, case]
[:, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill, ,, conditional, ), ;, return, ;, case]
[(, n, ), ,, gen, ,, kill, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (]
[n, ), ,, gen, ,, kill, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !]
[n, ), ,, gen, ,, kill, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !]
[,, kill, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (]
[), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {]
[return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeGenKill, (]
[return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeGenKill, (]
[., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeGenKill, (, NodeUtil, ., getConditionExpression, (]
[if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,]
[!, NodeUtil, ., isForIn, (, n, ), ), {, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,]
[., isForIn, (, n, ), ), {, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill, ,]
[NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill, ,, conditional, ), ;, }, else, {, Node, lhs, =]
[NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill, ,, conditional, ), ;, }, else, {, Node, lhs, =]
[kill, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[kill, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =]
[Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (]
[Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (]
[), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {]
[Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {, lhs, =]
[Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {, lhs, =]
[if, (, lhs, ., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (]
[if, (, lhs, ., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (]
[), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), ), {]
[lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), ), {, addToSetIfLocal, (]
[lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), ), {, addToSetIfLocal, (, lhs, ,]
[(, ), ;, }, if, (, lhs, ., isName, (, ), ), {, addToSetIfLocal, (, lhs, ,, kill, ), ;]
[;, }, if, (, lhs, ., isName, (, ), ), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, addToSetIfLocal, (]
[if, (, lhs, ., isName, (, ), ), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, addToSetIfLocal, (, lhs, ,]
[), ), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, else, {]
[{, addToSetIfLocal, (, lhs, ,, kill, ), ;, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, else, {, computeGenKill, (]
[(, lhs, ,, kill, ), ;, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, else, {, computeGenKill, (, lhs, ,]
[,, kill, ), ;, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, else, {, computeGenKill, (, lhs, ,, gen, ,]
[), ;, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, else, {, computeGenKill, (, lhs, ,, gen, ,, kill, ,]
[;, }, else, {, computeGenKill, (, lhs, ,, gen, ,, kill, ,, conditional, ), ;, }, }, return, ;, case]
[;, }, else, {, computeGenKill, (, lhs, ,, gen, ,, kill, ,, conditional, ), ;, }, }, return, ;, case]
[,, kill, ,, conditional, ), ;, }, }, return, ;, case, Token, ., VAR, :, for, (, Node, c, =]
[,, kill, ,, conditional, ), ;, }, }, return, ;, case, Token, ., VAR, :, for, (, Node, c, =]
[}, }, return, ;, case, Token, ., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[}, }, return, ;, case, Token, ., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[return, ;, case, Token, ., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[case, Token, ., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {]
[c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {, computeGenKill, (]
[c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {, computeGenKill, (]
[), ), {, if, (, c, ., hasChildren, (, ), ), {, computeGenKill, (, c, ., getFirstChild, (, ), ,]
[{, if, (, c, ., hasChildren, (, ), ), {, computeGenKill, (, c, ., getFirstChild, (, ), ,, gen, ,]
[(, c, ., hasChildren, (, ), ), {, computeGenKill, (, c, ., getFirstChild, (, ), ,, gen, ,, kill, ,]
[), ), {, computeGenKill, (, c, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, if, (]
[), {, computeGenKill, (, c, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, if, (, !]
[(, c, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, if, (, !, conditional, ), {]
[., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (]
[(, ), ,, gen, ,, kill, ,, conditional, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (, c, ,]
[;, if, (, !, conditional, ), {, addToSetIfLocal, (, c, ,, kill, ), ;, }, }, }, return, ;, case]
[;, if, (, !, conditional, ), {, addToSetIfLocal, (, c, ,, kill, ), ;, }, }, }, return, ;, case]
[), {, addToSetIfLocal, (, c, ,, kill, ), ;, }, }, }, return, ;, case, Token, ., AND, :, case]
[), {, addToSetIfLocal, (, c, ,, kill, ), ;, }, }, }, return, ;, case, Token, ., AND, :, case]
[c, ,, kill, ), ;, }, }, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :]
[kill, ), ;, }, }, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeGenKill, (]
[kill, ), ;, }, }, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeGenKill, (]
[return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeGenKill, (, n, ., getFirstChild, (, ), ,]
[case, Token, ., AND, :, case, Token, ., OR, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,]
[., AND, :, case, Token, ., OR, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,]
[case, Token, ., OR, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;]
[., OR, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (]
[., OR, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (]
[., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,]
[(, ), ,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,]
[,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,]
[), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case]
[), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case]
[n, ., getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case, Token, ., HOOK, :]
[getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeGenKill, (]
[getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeGenKill, (]
[kill, ,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeGenKill, (, n, ., getFirstChild, (, ), ,]
[true, ), ;, return, ;, case, Token, ., HOOK, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,]
[;, return, ;, case, Token, ., HOOK, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,]
[case, Token, ., HOOK, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;]
[., HOOK, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (]
[., HOOK, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (]
[., HOOK, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (]
[,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,]
[,, kill, ,, conditional, ), ;, computeGenKill, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, gen, ,]
[,, conditional, ), ;, computeGenKill, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, gen, ,, kill, ,]
[;, computeGenKill, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, gen, ,, kill, ,, true, ), ;]
[(, n, ., getFirstChild, (, ), ., getNext, (, ), ,, gen, ,, kill, ,, true, ), ;, computeGenKill, (]
[(, n, ., getFirstChild, (, ), ., getNext, (, ), ,, gen, ,, kill, ,, true, ), ;, computeGenKill, (]
[., getNext, (, ), ,, gen, ,, kill, ,, true, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,]
[(, ), ,, gen, ,, kill, ,, true, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,]
[,, gen, ,, kill, ,, true, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,]
[), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case]
[), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case]
[getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case, Token, ., NAME, :, if, (]
[), ,, gen, ,, kill, ,, true, ), ;, return, ;, case, Token, ., NAME, :, if, (, isArgumentsName, (]
[kill, ,, true, ), ;, return, ;, case, Token, ., NAME, :, if, (, isArgumentsName, (, n, ), ), {]
[case, Token, ., NAME, :, if, (, isArgumentsName, (, n, ), ), {, markAllParametersEscaped, (, ), ;, }, else, {]
[., NAME, :, if, (, isArgumentsName, (, n, ), ), {, markAllParametersEscaped, (, ), ;, }, else, {, addToSetIfLocal, (]
[:, if, (, isArgumentsName, (, n, ), ), {, markAllParametersEscaped, (, ), ;, }, else, {, addToSetIfLocal, (, n, ,]
[(, ), ;, }, else, {, addToSetIfLocal, (, n, ,, gen, ), ;, }, return, ;, default, :, if, (]
[(, ), ;, }, else, {, addToSetIfLocal, (, n, ,, gen, ), ;, }, return, ;, default, :, if, (]
[(, ), ;, }, else, {, addToSetIfLocal, (, n, ,, gen, ), ;, }, return, ;, default, :, if, (]
[else, {, addToSetIfLocal, (, n, ,, gen, ), ;, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (]
[(, n, ,, gen, ), ;, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&]
[(, n, ,, gen, ), ;, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&]
[(, n, ,, gen, ), ;, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&]
[., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, lhs, =]
[., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, lhs, =]
[getFirstChild, (, ), ., isName, (, ), ), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[(, ), ., isName, (, ), ), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !]
[isName, (, ), ), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !, conditional, ), {]
[), ), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (]
[{, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (, lhs, ,]
[getFirstChild, (, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, }, if, (]
[(, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, }, if, (, !]
[(, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, }, if, (, !]
[), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, }, if, (, !, n, ., isAssign, (, ), ), {]
[addToSetIfLocal, (, lhs, ,, kill, ), ;, }, if, (, !, n, ., isAssign, (, ), ), {, addToSetIfLocal, (]
[lhs, ,, kill, ), ;, }, if, (, !, n, ., isAssign, (, ), ), {, addToSetIfLocal, (, lhs, ,]
[;, }, if, (, !, n, ., isAssign, (, ), ), {, addToSetIfLocal, (, lhs, ,, gen, ), ;, }]
[if, (, !, n, ., isAssign, (, ), ), {, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, computeGenKill, (]
[if, (, !, n, ., isAssign, (, ), ), {, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, computeGenKill, (]
[(, ), ), {, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, computeGenKill, (, lhs, ., getNext, (, ), ,]
[), {, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, computeGenKill, (, lhs, ., getNext, (, ), ,, gen, ,]
[addToSetIfLocal, (, lhs, ,, gen, ), ;, }, computeGenKill, (, lhs, ., getNext, (, ), ,, gen, ,, kill, ,]
[., getNext, (, ), ,, gen, ,, kill, ,, conditional, ), ;, }, else, {, for, (, Node, c, =]
[., getNext, (, ), ,, gen, ,, kill, ,, conditional, ), ;, }, else, {, for, (, Node, c, =]
[,, kill, ,, conditional, ), ;, }, else, {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[,, kill, ,, conditional, ), ;, }, else, {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[,, conditional, ), ;, }, else, {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[), ;, }, else, {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[}, else, {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[}, else, {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, computeGenKill, (]
[(, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, computeGenKill, (, c, ,]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, computeGenKill, (, c, ,, gen, ,]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, computeGenKill, (, c, ,, gen, ,, kill, ,]
[conditional, ), ;, }, }, return, ;, }, }, private, void, addToSetIfLocal, (, Node, node, ,, BitSet, set, ), {]
[conditional, ), ;, }, }, return, ;, }, }, private, void, addToSetIfLocal, (, Node, node, ,, BitSet, set, ), {]
[}, return, ;, }, }, private, void, addToSetIfLocal, (, Node, node, ,, BitSet, set, ), {, Preconditions, ., checkState, (]
[}, return, ;, }, }, private, void, addToSetIfLocal, (, Node, node, ,, BitSet, set, ), {, Preconditions, ., checkState, (]
[node, ,, BitSet, set, ), {, Preconditions, ., checkState, (, node, ., isName, (, ), ), ;, String, name, =]
[node, ,, BitSet, set, ), {, Preconditions, ., checkState, (, node, ., isName, (, ), ), ;, String, name, =]
[checkState, (, node, ., isName, (, ), ), ;, String, name, =, node, ., getString, (, ), ;, if, (]
[(, node, ., isName, (, ), ), ;, String, name, =, node, ., getString, (, ), ;, if, (, !]
[(, node, ., isName, (, ), ), ;, String, name, =, node, ., getString, (, ), ;, if, (, !]
[(, ), ), ;, String, name, =, node, ., getString, (, ), ;, if, (, !, jsScope, ., isDeclared, (]
[), ;, String, name, =, node, ., getString, (, ), ;, if, (, !, jsScope, ., isDeclared, (, name, ,]
[;, if, (, !, jsScope, ., isDeclared, (, name, ,, false, ), ), {, return, ;, }, Var, var, =]
[;, if, (, !, jsScope, ., isDeclared, (, name, ,, false, ), ), {, return, ;, }, Var, var, =]
[jsScope, ., isDeclared, (, name, ,, false, ), ), {, return, ;, }, Var, var, =, jsScope, ., getVar, (]
[,, false, ), ), {, return, ;, }, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (]
[false, ), ), {, return, ;, }, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, !]
[false, ), ), {, return, ;, }, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, !]
[return, ;, }, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, !, escaped, ., contains, (]
[var, =, jsScope, ., getVar, (, name, ), ;, if, (, !, escaped, ., contains, (, var, ), ), {]
[var, =, jsScope, ., getVar, (, name, ), ;, if, (, !, escaped, ., contains, (, var, ), ), {]
[getVar, (, name, ), ;, if, (, !, escaped, ., contains, (, var, ), ), {, set, ., set, (]
[getVar, (, name, ), ;, if, (, !, escaped, ., contains, (, var, ), ), {, set, ., set, (]
[{, set, ., set, (, var, ., index, ), ;, }, }, void, markAllParametersEscaped, (, ), {, Node, lp, =]
[{, set, ., set, (, var, ., index, ), ;, }, }, void, markAllParametersEscaped, (, ), {, Node, lp, =]
[{, set, ., set, (, var, ., index, ), ;, }, }, void, markAllParametersEscaped, (, ), {, Node, lp, =]
[{, set, ., set, (, var, ., index, ), ;, }, }, void, markAllParametersEscaped, (, ), {, Node, lp, =]
[=, jsScope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, arg, =]
[=, jsScope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, arg, =]
[., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, arg, =, lp, ., getFirstChild, (, ), ;]
[., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, arg, =, lp, ., getFirstChild, (, ), ;]
[(, ), ., getNext, (, ), ;, for, (, Node, arg, =, lp, ., getFirstChild, (, ), ;, arg, !=]
[., getNext, (, ), ;, for, (, Node, arg, =, lp, ., getFirstChild, (, ), ;, arg, !=, null, ;]
[(, ), ;, for, (, Node, arg, =, lp, ., getFirstChild, (, ), ;, arg, !=, null, ;, arg, =]
[(, ), ;, for, (, Node, arg, =, lp, ., getFirstChild, (, ), ;, arg, !=, null, ;, arg, =]
[=, lp, ., getFirstChild, (, ), ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {]
[=, lp, ., getFirstChild, (, ), ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {]
[(, ), ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, escaped, ., add, (]
[(, ), ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, escaped, ., add, (]
[!=, null, ;, arg, =, arg, ., getNext, (, ), ), {, escaped, ., add, (, jsScope, ., getVar, (]
[!=, null, ;, arg, =, arg, ., getNext, (, ), ), {, escaped, ., add, (, jsScope, ., getVar, (]
[arg, ., getString, (, ), ), ), ;, }, }, private, boolean, isArgumentsName, (, Node, n, ), {, if, (]
[arg, ., getString, (, ), ), ), ;, }, }, private, boolean, isArgumentsName, (, Node, n, ), {, if, (]
[arg, ., getString, (, ), ), ), ;, }, }, private, boolean, isArgumentsName, (, Node, n, ), {, if, (]
[., getString, (, ), ), ), ;, }, }, private, boolean, isArgumentsName, (, Node, n, ), {, if, (, !]
[., getString, (, ), ), ), ;, }, }, private, boolean, isArgumentsName, (, Node, n, ), {, if, (, !]
[;, }, }, private, boolean, isArgumentsName, (, Node, n, ), {, if, (, !, n, ., isName, (, ), ||]
[}, }, private, boolean, isArgumentsName, (, Node, n, ), {, if, (, !, n, ., isName, (, ), ||, !]
[}, }, private, boolean, isArgumentsName, (, Node, n, ), {, if, (, !, n, ., isName, (, ), ||, !]
[}, }, private, boolean, isArgumentsName, (, Node, n, ), {, if, (, !, n, ., isName, (, ), ||, !]
[), {, if, (, !, n, ., isName, (, ), ||, !, n, ., getString, (, ), ., equals, (]
[(, !, n, ., isName, (, ), ||, !, n, ., getString, (, ), ., equals, (, ARGUMENT_ARRAY_ALIAS, ), ||]
[(, !, n, ., isName, (, ), ||, !, n, ., getString, (, ), ., equals, (, ARGUMENT_ARRAY_ALIAS, ), ||]
[isName, (, ), ||, !, n, ., getString, (, ), ., equals, (, ARGUMENT_ARRAY_ALIAS, ), ||, jsScope, ., isDeclared, (]
[), ||, !, n, ., getString, (, ), ., equals, (, ARGUMENT_ARRAY_ALIAS, ), ||, jsScope, ., isDeclared, (, ARGUMENT_ARRAY_ALIAS, ,]
[getString, (, ), ., equals, (, ARGUMENT_ARRAY_ALIAS, ), ||, jsScope, ., isDeclared, (, ARGUMENT_ARRAY_ALIAS, ,, false, ), ), {, return]
[ARGUMENT_ARRAY_ALIAS, ), ||, jsScope, ., isDeclared, (, ARGUMENT_ARRAY_ALIAS, ,, false, ), ), {, return, false, ;, }, else, {, return]
