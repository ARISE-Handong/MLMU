[apache, ., commons, ., math3, ., util, ., MathUtils, ;, public, class, BracketingNthOrderBrentSolverDFP, {, private, static, final, int, MAXIMAL_AGING, =]
[private, final, Dfp, functionValueAccuracy, ;, private, final, Dfp, absoluteAccuracy, ;, private, final, Dfp, relativeAccuracy, ;, private, final, Incrementor, evaluations, =]
[Dfp, relativeAccuracy, ,, final, Dfp, absoluteAccuracy, ,, final, Dfp, functionValueAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, if, (]
[Dfp, relativeAccuracy, ,, final, Dfp, absoluteAccuracy, ,, final, Dfp, functionValueAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, if, (]
[,, final, Dfp, absoluteAccuracy, ,, final, Dfp, functionValueAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, if, (, maximalOrder, <]
[,, final, Dfp, functionValueAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, if, (, maximalOrder, <, 2, ), {, throw]
[functionValueAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (]
[final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,]
[maximalOrder, ), throws, NumberIsTooSmallException, {, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,]
[{, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }]
[{, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }]
[<, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., absoluteAccuracy, =]
[maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., absoluteAccuracy, =, absoluteAccuracy, ;]
[maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., absoluteAccuracy, =, absoluteAccuracy, ;]
[true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., absoluteAccuracy, =, absoluteAccuracy, ;, this, ., relativeAccuracy, =]
[;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., absoluteAccuracy, =, absoluteAccuracy, ;, this, ., relativeAccuracy, =, relativeAccuracy, ;]
[;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., absoluteAccuracy, =, absoluteAccuracy, ;, this, ., relativeAccuracy, =, relativeAccuracy, ;]
[maximalOrder, =, maximalOrder, ;, this, ., absoluteAccuracy, =, absoluteAccuracy, ;, this, ., relativeAccuracy, =, relativeAccuracy, ;, this, ., functionValueAccuracy, =]
[this, ., relativeAccuracy, =, relativeAccuracy, ;, this, ., functionValueAccuracy, =, functionValueAccuracy, ;, }, public, int, getMaximalOrder, (, ), {, return]
[functionValueAccuracy, ;, }, public, int, getMaximalOrder, (, ), {, return, maximalOrder, ;, }, public, int, getMaxEvaluations, (, ), {, return]
[functionValueAccuracy, ;, }, public, int, getMaximalOrder, (, ), {, return, maximalOrder, ;, }, public, int, getMaxEvaluations, (, ), {, return]
[int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (, ), {, return]
[int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (, ), {, return]
[int, getEvaluations, (, ), {, return, evaluations, ., getCount, (, ), ;, }, public, Dfp, getAbsoluteAccuracy, (, ), {, return]
[), ;, }, public, Dfp, getAbsoluteAccuracy, (, ), {, return, absoluteAccuracy, ;, }, public, Dfp, getRelativeAccuracy, (, ), {, return]
[absoluteAccuracy, ;, }, public, Dfp, getRelativeAccuracy, (, ), {, return, relativeAccuracy, ;, }, public, Dfp, getFunctionValueAccuracy, (, ), {, return]
[f, ,, final, Dfp, min, ,, final, Dfp, max, ,, final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {, return]
[final, Dfp, min, ,, final, Dfp, max, ,, final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {, return, solve, (]
[min, ,, final, Dfp, max, ,, final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {, return, solve, (, maxEval, ,]
[final, Dfp, max, ,, final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {, return, solve, (, maxEval, ,, f, ,]
[max, ,, final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {, return, solve, (, maxEval, ,, f, ,, min, ,]
[final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,]
[final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,]
[final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,]
[throws, NullArgumentException, ,, NoBracketingException, {, return, solve, (, maxEval, ,, f, ,, min, ,, max, ,, min, ., add, (]
[return, solve, (, maxEval, ,, f, ,, min, ,, max, ,, min, ., add, (, max, ), ., divide, (]
[maxEval, ,, f, ,, min, ,, max, ,, min, ., add, (, max, ), ., divide, (, 2, ), ,]
[Dfp, min, ,, final, Dfp, max, ,, final, Dfp, startValue, ,, final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {]
[Dfp, min, ,, final, Dfp, max, ,, final, Dfp, startValue, ,, final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {]
[Dfp, max, ,, final, Dfp, startValue, ,, final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {, MathUtils, ., checkNotNull, (]
[final, Dfp, startValue, ,, final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {, MathUtils, ., checkNotNull, (, f, ), ;]
[final, Dfp, startValue, ,, final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {, MathUtils, ., checkNotNull, (, f, ), ;]
[final, AllowedSolution, allowedSolution, ), throws, NullArgumentException, ,, NoBracketingException, {, MathUtils, ., checkNotNull, (, f, ), ;, evaluations, ., setMaximalCount, (]
[), throws, NullArgumentException, ,, NoBracketingException, {, MathUtils, ., checkNotNull, (, f, ), ;, evaluations, ., setMaximalCount, (, maxEval, ), ;]
[), throws, NullArgumentException, ,, NoBracketingException, {, MathUtils, ., checkNotNull, (, f, ), ;, evaluations, ., setMaximalCount, (, maxEval, ), ;]
[(, f, ), ;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, Dfp, zero, =]
[(, f, ), ;, evaluations, ., setMaximalCount, (, maxEval, ), ;, evaluations, ., resetCount, (, ), ;, Dfp, zero, =]
[), ;, evaluations, ., resetCount, (, ), ;, Dfp, zero, =, startValue, ., getZero, (, ), ;, Dfp, nan, =]
[), ;, evaluations, ., resetCount, (, ), ;, Dfp, zero, =, startValue, ., getZero, (, ), ;, Dfp, nan, =]
[resetCount, (, ), ;, Dfp, zero, =, startValue, ., getZero, (, ), ;, Dfp, nan, =, zero, ., newInstance, (]
[;, Dfp, zero, =, startValue, ., getZero, (, ), ;, Dfp, nan, =, zero, ., newInstance, (, (, byte, )]
[zero, =, startValue, ., getZero, (, ), ;, Dfp, nan, =, zero, ., newInstance, (, (, byte, ), 1, ,]
[zero, =, startValue, ., getZero, (, ), ;, Dfp, nan, =, zero, ., newInstance, (, (, byte, ), 1, ,]
[zero, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ;, final, Dfp, [, ], x, =]
[(, (, byte, ), 1, ,, Dfp, ., QNAN, ), ;, final, Dfp, [, ], x, =, new, Dfp, []
[(, (, byte, ), 1, ,, Dfp, ., QNAN, ), ;, final, Dfp, [, ], x, =, new, Dfp, []
[byte, ), 1, ,, Dfp, ., QNAN, ), ;, final, Dfp, [, ], x, =, new, Dfp, [, maximalOrder, +]
[final, Dfp, [, ], x, =, new, Dfp, [, maximalOrder, +, 1, ], ;, final, Dfp, [, ], y, =]
[], x, =, new, Dfp, [, maximalOrder, +, 1, ], ;, final, Dfp, [, ], y, =, new, Dfp, []
[], x, =, new, Dfp, [, maximalOrder, +, 1, ], ;, final, Dfp, [, ], y, =, new, Dfp, []
[=, new, Dfp, [, maximalOrder, +, 1, ], ;, final, Dfp, [, ], y, =, new, Dfp, [, maximalOrder, +]
[[, maximalOrder, +, 1, ], ;, final, Dfp, [, ], y, =, new, Dfp, [, maximalOrder, +, 1, ], ;]
[[, maximalOrder, +, 1, ], ;, final, Dfp, [, ], y, =, new, Dfp, [, maximalOrder, +, 1, ], ;]
[+, 1, ], ;, final, Dfp, [, ], y, =, new, Dfp, [, maximalOrder, +, 1, ], ;, x, []
[;, final, Dfp, [, ], y, =, new, Dfp, [, maximalOrder, +, 1, ], ;, x, [, 0, ], =]
[Dfp, [, ], y, =, new, Dfp, [, maximalOrder, +, 1, ], ;, x, [, 0, ], =, min, ;]
[Dfp, [, ], y, =, new, Dfp, [, maximalOrder, +, 1, ], ;, x, [, 0, ], =, min, ;]
[], y, =, new, Dfp, [, maximalOrder, +, 1, ], ;, x, [, 0, ], =, min, ;, x, []
[new, Dfp, [, maximalOrder, +, 1, ], ;, x, [, 0, ], =, min, ;, x, [, 1, ], =]
[[, maximalOrder, +, 1, ], ;, x, [, 0, ], =, min, ;, x, [, 1, ], =, startValue, ;]
[[, maximalOrder, +, 1, ], ;, x, [, 0, ], =, min, ;, x, [, 1, ], =, startValue, ;]
[+, 1, ], ;, x, [, 0, ], =, min, ;, x, [, 1, ], =, startValue, ;, x, []
[;, x, [, 0, ], =, min, ;, x, [, 1, ], =, startValue, ;, x, [, 2, ], =]
[[, 0, ], =, min, ;, x, [, 1, ], =, startValue, ;, x, [, 2, ], =, max, ;]
[[, 0, ], =, min, ;, x, [, 1, ], =, startValue, ;, x, [, 2, ], =, max, ;]
[x, [, 1, ], =, startValue, ;, x, [, 2, ], =, max, ;, evaluations, ., incrementCount, (, ), ;]
[x, [, 1, ], =, startValue, ;, x, [, 2, ], =, max, ;, evaluations, ., incrementCount, (, ), ;]
[1, ], =, startValue, ;, x, [, 2, ], =, max, ;, evaluations, ., incrementCount, (, ), ;, y, []
[startValue, ;, x, [, 2, ], =, max, ;, evaluations, ., incrementCount, (, ), ;, y, [, 1, ], =]
[startValue, ;, x, [, 2, ], =, max, ;, evaluations, ., incrementCount, (, ), ;, y, [, 1, ], =]
[2, ], =, max, ;, evaluations, ., incrementCount, (, ), ;, y, [, 1, ], =, f, ., value, (]
[2, ], =, max, ;, evaluations, ., incrementCount, (, ), ;, y, [, 1, ], =, f, ., value, (]
[=, max, ;, evaluations, ., incrementCount, (, ), ;, y, [, 1, ], =, f, ., value, (, x, []
[(, ), ;, y, [, 1, ], =, f, ., value, (, x, [, 1, ], ), ;, if, (]
[(, ), ;, y, [, 1, ], =, f, ., value, (, x, [, 1, ], ), ;, if, (]
[(, ), ;, y, [, 1, ], =, f, ., value, (, x, [, 1, ], ), ;, if, (]
[;, y, [, 1, ], =, f, ., value, (, x, [, 1, ], ), ;, if, (, y, []
[(, x, [, 1, ], ), ;, if, (, y, [, 1, ], ., isZero, (, ), ), {, return]
[(, x, [, 1, ], ), ;, if, (, y, [, 1, ], ., isZero, (, ), ), {, return]
[[, 1, ], ), ;, if, (, y, [, 1, ], ., isZero, (, ), ), {, return, x, []
[;, if, (, y, [, 1, ], ., isZero, (, ), ), {, return, x, [, 1, ], ;, }]
[;, if, (, y, [, 1, ], ., isZero, (, ), ), {, return, x, [, 1, ], ;, }]
[], ., isZero, (, ), ), {, return, x, [, 1, ], ;, }, evaluations, ., incrementCount, (, ), ;]
[], ., isZero, (, ), ), {, return, x, [, 1, ], ;, }, evaluations, ., incrementCount, (, ), ;]
[isZero, (, ), ), {, return, x, [, 1, ], ;, }, evaluations, ., incrementCount, (, ), ;, y, []
[), {, return, x, [, 1, ], ;, }, evaluations, ., incrementCount, (, ), ;, y, [, 0, ], =]
[), {, return, x, [, 1, ], ;, }, evaluations, ., incrementCount, (, ), ;, y, [, 0, ], =]
[[, 1, ], ;, }, evaluations, ., incrementCount, (, ), ;, y, [, 0, ], =, f, ., value, (]
[[, 1, ], ;, }, evaluations, ., incrementCount, (, ), ;, y, [, 0, ], =, f, ., value, (]
[], ;, }, evaluations, ., incrementCount, (, ), ;, y, [, 0, ], =, f, ., value, (, x, []
[(, ), ;, y, [, 0, ], =, f, ., value, (, x, [, 0, ], ), ;, if, (]
[(, ), ;, y, [, 0, ], =, f, ., value, (, x, [, 0, ], ), ;, if, (]
[(, ), ;, y, [, 0, ], =, f, ., value, (, x, [, 0, ], ), ;, if, (]
[;, y, [, 0, ], =, f, ., value, (, x, [, 0, ], ), ;, if, (, y, []
[(, x, [, 0, ], ), ;, if, (, y, [, 0, ], ., isZero, (, ), ), {, return]
[(, x, [, 0, ], ), ;, if, (, y, [, 0, ], ., isZero, (, ), ), {, return]
[[, 0, ], ), ;, if, (, y, [, 0, ], ., isZero, (, ), ), {, return, x, []
[isZero, (, ), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (]
[isZero, (, ), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (]
[isZero, (, ), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (]
[isZero, (, ), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (]
[), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, []
[[, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, [, 0, ], ., multiply, (]
[[, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, [, 0, ], ., multiply, (]
[], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, [, 0, ], ., multiply, (, y, []
[if, (, y, [, 0, ], ., multiply, (, y, [, 1, ], ), ., negativeOrNull, (, ), ), {]
[y, [, 0, ], ., multiply, (, y, [, 1, ], ), ., negativeOrNull, (, ), ), {, nbPoints, =]
[0, ], ., multiply, (, y, [, 1, ], ), ., negativeOrNull, (, ), ), {, nbPoints, =, 2, ;]
[., multiply, (, y, [, 1, ], ), ., negativeOrNull, (, ), ), {, nbPoints, =, 2, ;, signChangeIndex, =]
[1, ], ), ., negativeOrNull, (, ), ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {]
[1, ], ), ., negativeOrNull, (, ), ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {]
[), ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, evaluations, ., incrementCount, (, ), ;]
[), ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, evaluations, ., incrementCount, (, ), ;]
[{, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, evaluations, ., incrementCount, (, ), ;, y, []
[2, ;, signChangeIndex, =, 1, ;, }, else, {, evaluations, ., incrementCount, (, ), ;, y, [, 2, ], =]
[2, ;, signChangeIndex, =, 1, ;, }, else, {, evaluations, ., incrementCount, (, ), ;, y, [, 2, ], =]
[1, ;, }, else, {, evaluations, ., incrementCount, (, ), ;, y, [, 2, ], =, f, ., value, (]
[1, ;, }, else, {, evaluations, ., incrementCount, (, ), ;, y, [, 2, ], =, f, ., value, (]
[}, else, {, evaluations, ., incrementCount, (, ), ;, y, [, 2, ], =, f, ., value, (, x, []
[(, ), ;, y, [, 2, ], =, f, ., value, (, x, [, 2, ], ), ;, if, (]
[(, ), ;, y, [, 2, ], =, f, ., value, (, x, [, 2, ], ), ;, if, (]
[(, ), ;, y, [, 2, ], =, f, ., value, (, x, [, 2, ], ), ;, if, (]
[;, y, [, 2, ], =, f, ., value, (, x, [, 2, ], ), ;, if, (, y, []
[(, x, [, 2, ], ), ;, if, (, y, [, 2, ], ., isZero, (, ), ), {, return]
[(, x, [, 2, ], ), ;, if, (, y, [, 2, ], ., isZero, (, ), ), {, return]
[[, 2, ], ), ;, if, (, y, [, 2, ], ., isZero, (, ), ), {, return, x, []
[(, y, [, 2, ], ., isZero, (, ), ), {, return, x, [, 2, ], ;, }, if, (]
[(, y, [, 2, ], ., isZero, (, ), ), {, return, x, [, 2, ], ;, }, if, (]
[(, y, [, 2, ], ., isZero, (, ), ), {, return, x, [, 2, ], ;, }, if, (]
[(, y, [, 2, ], ., isZero, (, ), ), {, return, x, [, 2, ], ;, }, if, (]
[[, 2, ], ., isZero, (, ), ), {, return, x, [, 2, ], ;, }, if, (, y, []
[(, ), ), {, return, x, [, 2, ], ;, }, if, (, y, [, 1, ], ., multiply, (]
[(, ), ), {, return, x, [, 2, ], ;, }, if, (, y, [, 1, ], ., multiply, (]
[), {, return, x, [, 2, ], ;, }, if, (, y, [, 1, ], ., multiply, (, y, []
[if, (, y, [, 1, ], ., multiply, (, y, [, 2, ], ), ., negativeOrNull, (, ), ), {]
[y, [, 1, ], ., multiply, (, y, [, 2, ], ), ., negativeOrNull, (, ), ), {, nbPoints, =]
[1, ], ., multiply, (, y, [, 2, ], ), ., negativeOrNull, (, ), ), {, nbPoints, =, 3, ;]
[., multiply, (, y, [, 2, ], ), ., negativeOrNull, (, ), ), {, nbPoints, =, 3, ;, signChangeIndex, =]
[], ), ., negativeOrNull, (, ), ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw]
[negativeOrNull, (, ), ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (]
[negativeOrNull, (, ), ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (]
[negativeOrNull, (, ), ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (]
[), ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, []
[signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ., toDouble, (, ), ,]
[signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ., toDouble, (, ), ,]
[signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ., toDouble, (, ), ,]
[2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ., toDouble, (, ), ,, x, []
[NoBracketingException, (, x, [, 0, ], ., toDouble, (, ), ,, x, [, 2, ], ., toDouble, (, ), ,]
[NoBracketingException, (, x, [, 0, ], ., toDouble, (, ), ,, x, [, 2, ], ., toDouble, (, ), ,]
[NoBracketingException, (, x, [, 0, ], ., toDouble, (, ), ,, x, [, 2, ], ., toDouble, (, ), ,]
[x, [, 0, ], ., toDouble, (, ), ,, x, [, 2, ], ., toDouble, (, ), ,, y, []
[), ,, x, [, 2, ], ., toDouble, (, ), ,, y, [, 0, ], ., toDouble, (, ), ,]
[), ,, x, [, 2, ], ., toDouble, (, ), ,, y, [, 0, ], ., toDouble, (, ), ,]
[), ,, x, [, 2, ], ., toDouble, (, ), ,, y, [, 0, ], ., toDouble, (, ), ,]
[x, [, 2, ], ., toDouble, (, ), ,, y, [, 0, ], ., toDouble, (, ), ,, y, []
[), ,, y, [, 2, ], ., toDouble, (, ), ), ;, }, }, final, Dfp, [, ], tmpX, =]
[[, 2, ], ., toDouble, (, ), ), ;, }, }, final, Dfp, [, ], tmpX, =, new, Dfp, []
[[, 2, ], ., toDouble, (, ), ), ;, }, }, final, Dfp, [, ], tmpX, =, new, Dfp, []
[;, }, }, final, Dfp, [, ], tmpX, =, new, Dfp, [, x, ., length, ], ;, Dfp, xA, =]
[;, }, }, final, Dfp, [, ], tmpX, =, new, Dfp, [, x, ., length, ], ;, Dfp, xA, =]
[}, final, Dfp, [, ], tmpX, =, new, Dfp, [, x, ., length, ], ;, Dfp, xA, =, x, []
[}, final, Dfp, [, ], tmpX, =, new, Dfp, [, x, ., length, ], ;, Dfp, xA, =, x, []
[Dfp, [, ], tmpX, =, new, Dfp, [, x, ., length, ], ;, Dfp, xA, =, x, [, signChangeIndex, -]
[Dfp, [, x, ., length, ], ;, Dfp, xA, =, x, [, signChangeIndex, -, 1, ], ;, Dfp, yA, =]
[Dfp, [, x, ., length, ], ;, Dfp, xA, =, x, [, signChangeIndex, -, 1, ], ;, Dfp, yA, =]
[x, ., length, ], ;, Dfp, xA, =, x, [, signChangeIndex, -, 1, ], ;, Dfp, yA, =, y, []
[x, ., length, ], ;, Dfp, xA, =, x, [, signChangeIndex, -, 1, ], ;, Dfp, yA, =, y, []
[length, ], ;, Dfp, xA, =, x, [, signChangeIndex, -, 1, ], ;, Dfp, yA, =, y, [, signChangeIndex, -]
[x, [, signChangeIndex, -, 1, ], ;, Dfp, yA, =, y, [, signChangeIndex, -, 1, ], ;, Dfp, absXA, =]
[x, [, signChangeIndex, -, 1, ], ;, Dfp, yA, =, y, [, signChangeIndex, -, 1, ], ;, Dfp, absXA, =]
[=, y, [, signChangeIndex, -, 1, ], ;, Dfp, absXA, =, xA, ., abs, (, ), ;, Dfp, absYA, =]
[=, y, [, signChangeIndex, -, 1, ], ;, Dfp, absXA, =, xA, ., abs, (, ), ;, Dfp, absYA, =]
[absXA, =, xA, ., abs, (, ), ;, Dfp, absYA, =, yA, ., abs, (, ), ;, int, agingA, =]
[(, ), ;, Dfp, absYA, =, yA, ., abs, (, ), ;, int, agingA, =, 0, ;, Dfp, xB, =]
[(, ), ;, Dfp, absYA, =, yA, ., abs, (, ), ;, int, agingA, =, 0, ;, Dfp, xB, =]
[;, Dfp, absYA, =, yA, ., abs, (, ), ;, int, agingA, =, 0, ;, Dfp, xB, =, x, []
[abs, (, ), ;, int, agingA, =, 0, ;, Dfp, xB, =, x, [, signChangeIndex, ], ;, Dfp, yB, =]
[abs, (, ), ;, int, agingA, =, 0, ;, Dfp, xB, =, x, [, signChangeIndex, ], ;, Dfp, yB, =]
[), ;, int, agingA, =, 0, ;, Dfp, xB, =, x, [, signChangeIndex, ], ;, Dfp, yB, =, y, []
[;, Dfp, xB, =, x, [, signChangeIndex, ], ;, Dfp, yB, =, y, [, signChangeIndex, ], ;, Dfp, absXB, =]
[;, Dfp, xB, =, x, [, signChangeIndex, ], ;, Dfp, yB, =, y, [, signChangeIndex, ], ;, Dfp, absXB, =]
[Dfp, yB, =, y, [, signChangeIndex, ], ;, Dfp, absXB, =, xB, ., abs, (, ), ;, Dfp, absYB, =]
[Dfp, yB, =, y, [, signChangeIndex, ], ;, Dfp, absXB, =, xB, ., abs, (, ), ;, Dfp, absYB, =]
[absXB, =, xB, ., abs, (, ), ;, Dfp, absYB, =, yB, ., abs, (, ), ;, int, agingB, =]
[abs, (, ), ;, Dfp, absYB, =, yB, ., abs, (, ), ;, int, agingB, =, 0, ;, while, (]
[=, yB, ., abs, (, ), ;, int, agingB, =, 0, ;, while, (, true, ), {, Dfp, maxX, =]
[=, yB, ., abs, (, ), ;, int, agingB, =, 0, ;, while, (, true, ), {, Dfp, maxX, =]
[=, yB, ., abs, (, ), ;, int, agingB, =, 0, ;, while, (, true, ), {, Dfp, maxX, =]
[(, ), ;, int, agingB, =, 0, ;, while, (, true, ), {, Dfp, maxX, =, absXA, ., lessThan, (]
[int, agingB, =, 0, ;, while, (, true, ), {, Dfp, maxX, =, absXA, ., lessThan, (, absXB, ), ?]
[=, 0, ;, while, (, true, ), {, Dfp, maxX, =, absXA, ., lessThan, (, absXB, ), ?, absXB, :]
[true, ), {, Dfp, maxX, =, absXA, ., lessThan, (, absXB, ), ?, absXB, :, absXA, ;, Dfp, maxY, =]
[true, ), {, Dfp, maxX, =, absXA, ., lessThan, (, absXB, ), ?, absXB, :, absXA, ;, Dfp, maxY, =]
[true, ), {, Dfp, maxX, =, absXA, ., lessThan, (, absXB, ), ?, absXB, :, absXA, ;, Dfp, maxY, =]
[maxX, =, absXA, ., lessThan, (, absXB, ), ?, absXB, :, absXA, ;, Dfp, maxY, =, absYA, ., lessThan, (]
[., lessThan, (, absXB, ), ?, absXB, :, absXA, ;, Dfp, maxY, =, absYA, ., lessThan, (, absYB, ), ?]
[(, absXB, ), ?, absXB, :, absXA, ;, Dfp, maxY, =, absYA, ., lessThan, (, absYB, ), ?, absYB, :]
[absXA, ;, Dfp, maxY, =, absYA, ., lessThan, (, absYB, ), ?, absYB, :, absYA, ;, final, Dfp, xTol, =]
[absXA, ;, Dfp, maxY, =, absYA, ., lessThan, (, absYB, ), ?, absYB, :, absYA, ;, final, Dfp, xTol, =]
[=, absYA, ., lessThan, (, absYB, ), ?, absYB, :, absYA, ;, final, Dfp, xTol, =, absoluteAccuracy, ., add, (]
[=, absYA, ., lessThan, (, absYB, ), ?, absYB, :, absYA, ;, final, Dfp, xTol, =, absoluteAccuracy, ., add, (]
[(, absYB, ), ?, absYB, :, absYA, ;, final, Dfp, xTol, =, absoluteAccuracy, ., add, (, relativeAccuracy, ., multiply, (]
[absYA, ;, final, Dfp, xTol, =, absoluteAccuracy, ., add, (, relativeAccuracy, ., multiply, (, maxX, ), ), ;, if, (]
[absYA, ;, final, Dfp, xTol, =, absoluteAccuracy, ., add, (, relativeAccuracy, ., multiply, (, maxX, ), ), ;, if, (]
[absYA, ;, final, Dfp, xTol, =, absoluteAccuracy, ., add, (, relativeAccuracy, ., multiply, (, maxX, ), ), ;, if, (]
[absYA, ;, final, Dfp, xTol, =, absoluteAccuracy, ., add, (, relativeAccuracy, ., multiply, (, maxX, ), ), ;, if, (]
[absYA, ;, final, Dfp, xTol, =, absoluteAccuracy, ., add, (, relativeAccuracy, ., multiply, (, maxX, ), ), ;, if, (]
[xTol, =, absoluteAccuracy, ., add, (, relativeAccuracy, ., multiply, (, maxX, ), ), ;, if, (, xB, ., subtract, (]
[(, relativeAccuracy, ., multiply, (, maxX, ), ), ;, if, (, xB, ., subtract, (, xA, ), ., subtract, (]
[), ;, if, (, xB, ., subtract, (, xA, ), ., subtract, (, xTol, ), ., negativeOrNull, (, ), ||]
[), ;, if, (, xB, ., subtract, (, xA, ), ., subtract, (, xTol, ), ., negativeOrNull, (, ), ||]
[xB, ., subtract, (, xA, ), ., subtract, (, xTol, ), ., negativeOrNull, (, ), ||, maxY, ., lessThan, (]
[., subtract, (, xTol, ), ., negativeOrNull, (, ), ||, maxY, ., lessThan, (, functionValueAccuracy, ), ), {, switch, (]
[), ., negativeOrNull, (, ), ||, maxY, ., lessThan, (, functionValueAccuracy, ), ), {, switch, (, allowedSolution, ), {, case]
[(, ), ||, maxY, ., lessThan, (, functionValueAccuracy, ), ), {, switch, (, allowedSolution, ), {, case, ANY_SIDE, :, return]
[(, ), ||, maxY, ., lessThan, (, functionValueAccuracy, ), ), {, switch, (, allowedSolution, ), {, case, ANY_SIDE, :, return]
[(, ), ||, maxY, ., lessThan, (, functionValueAccuracy, ), ), {, switch, (, allowedSolution, ), {, case, ANY_SIDE, :, return]
[., lessThan, (, functionValueAccuracy, ), ), {, switch, (, allowedSolution, ), {, case, ANY_SIDE, :, return, absYA, ., lessThan, (]
[functionValueAccuracy, ), ), {, switch, (, allowedSolution, ), {, case, ANY_SIDE, :, return, absYA, ., lessThan, (, absYB, ), ?]
[), {, switch, (, allowedSolution, ), {, case, ANY_SIDE, :, return, absYA, ., lessThan, (, absYB, ), ?, xA, :]
[(, allowedSolution, ), {, case, ANY_SIDE, :, return, absYA, ., lessThan, (, absYB, ), ?, xA, :, xB, ;, case]
[{, case, ANY_SIDE, :, return, absYA, ., lessThan, (, absYB, ), ?, xA, :, xB, ;, case, LEFT_SIDE, :, return]
[:, return, absYA, ., lessThan, (, absYB, ), ?, xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case]
[., lessThan, (, absYB, ), ?, xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return]
[absYB, ), ?, xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case]
[xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return]
[xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return]
[xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return]
[case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, yA, ., lessThan, (]
[return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, yA, ., lessThan, (, zero, ), ?]
[;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, yA, ., lessThan, (, zero, ), ?, xA, :]
[:, return, xB, ;, case, BELOW_SIDE, :, return, yA, ., lessThan, (, zero, ), ?, xA, :, xB, ;, case]
[;, case, BELOW_SIDE, :, return, yA, ., lessThan, (, zero, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return]
[;, case, BELOW_SIDE, :, return, yA, ., lessThan, (, zero, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return]
[;, case, BELOW_SIDE, :, return, yA, ., lessThan, (, zero, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return]
[return, yA, ., lessThan, (, zero, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, yA, ., lessThan, (]
[lessThan, (, zero, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, yA, ., lessThan, (, zero, ), ?]
[zero, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, yA, ., lessThan, (, zero, ), ?, xB, :]
[xB, ;, case, ABOVE_SIDE, :, return, yA, ., lessThan, (, zero, ), ?, xB, :, xA, ;, default, :, throw]
[ABOVE_SIDE, :, return, yA, ., lessThan, (, zero, ), ?, xB, :, xA, ;, default, :, throw, new, MathInternalError, (]
[xB, :, xA, ;, default, :, throw, new, MathInternalError, (, null, ), ;, }, }, Dfp, targetY, ;, if, (]
[xB, :, xA, ;, default, :, throw, new, MathInternalError, (, null, ), ;, }, }, Dfp, targetY, ;, if, (]
[xA, ;, default, :, throw, new, MathInternalError, (, null, ), ;, }, }, Dfp, targetY, ;, if, (, agingA, >=]
[:, throw, new, MathInternalError, (, null, ), ;, }, }, Dfp, targetY, ;, if, (, agingA, >=, MAXIMAL_AGING, ), {]
[new, MathInternalError, (, null, ), ;, }, }, Dfp, targetY, ;, if, (, agingA, >=, MAXIMAL_AGING, ), {, targetY, =]
[new, MathInternalError, (, null, ), ;, }, }, Dfp, targetY, ;, if, (, agingA, >=, MAXIMAL_AGING, ), {, targetY, =]
[new, MathInternalError, (, null, ), ;, }, }, Dfp, targetY, ;, if, (, agingA, >=, MAXIMAL_AGING, ), {, targetY, =]
[), ;, }, }, Dfp, targetY, ;, if, (, agingA, >=, MAXIMAL_AGING, ), {, targetY, =, yB, ., divide, (]
[MAXIMAL_AGING, ), {, targetY, =, yB, ., divide, (, 16, ), ., negate, (, ), ;, }, else, if, (]
[MAXIMAL_AGING, ), {, targetY, =, yB, ., divide, (, 16, ), ., negate, (, ), ;, }, else, if, (]
[{, targetY, =, yB, ., divide, (, 16, ), ., negate, (, ), ;, }, else, if, (, agingB, >=]
[yB, ., divide, (, 16, ), ., negate, (, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {]
[divide, (, 16, ), ., negate, (, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, targetY, =]
[divide, (, 16, ), ., negate, (, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, targetY, =]
[divide, (, 16, ), ., negate, (, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, targetY, =]
[., negate, (, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, targetY, =, yA, ., divide, (]
[>=, MAXIMAL_AGING, ), {, targetY, =, yA, ., divide, (, 16, ), ., negate, (, ), ;, }, else, {]
[), {, targetY, =, yA, ., divide, (, 16, ), ., negate, (, ), ;, }, else, {, targetY, =]
[), ., negate, (, ), ;, }, else, {, targetY, =, zero, ;, }, Dfp, nextX, ;, int, start, =]
[;, }, else, {, targetY, =, zero, ;, }, Dfp, nextX, ;, int, start, =, 0, ;, int, end, =]
[targetY, =, zero, ;, }, Dfp, nextX, ;, int, start, =, 0, ;, int, end, =, nbPoints, ;, do, {]
[targetY, =, zero, ;, }, Dfp, nextX, ;, int, start, =, 0, ;, int, end, =, nbPoints, ;, do, {]
[}, Dfp, nextX, ;, int, start, =, 0, ;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy, (]
[nextX, ;, int, start, =, 0, ;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy, (, x, ,]
[int, start, =, 0, ;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy, (, x, ,, start, ,]
[=, 0, ;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,]
[;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,]
[;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,]
[end, =, nbPoints, ;, do, {, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,, end, -]
[;, do, {, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,, end, -, start, ), ;]
[{, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,, end, -, start, ), ;, nextX, =]
[., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,, end, -, start, ), ;, nextX, =, guessX, (]
[(, x, ,, start, ,, tmpX, ,, start, ,, end, -, start, ), ;, nextX, =, guessX, (, targetY, ,]
[,, start, ,, tmpX, ,, start, ,, end, -, start, ), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,]
[,, tmpX, ,, start, ,, end, -, start, ), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,]
[,, start, ,, end, -, start, ), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,]
[start, ), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (]
[), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !]
[;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (]
[;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (]
[;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (]
[(, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (, nextX, ., greaterThan, (]
[tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (, nextX, ., greaterThan, (, xA, ), &&]
[tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (, nextX, ., greaterThan, (, xA, ), &&]
[start, ,, end, ), ;, if, (, !, (, nextX, ., greaterThan, (, xA, ), &&, nextX, ., lessThan, (]
[!, (, nextX, ., greaterThan, (, xA, ), &&, nextX, ., lessThan, (, xB, ), ), ), {, if, (]
[!, (, nextX, ., greaterThan, (, xA, ), &&, nextX, ., lessThan, (, xB, ), ), ), {, if, (]
[!, (, nextX, ., greaterThan, (, xA, ), &&, nextX, ., lessThan, (, xB, ), ), ), {, if, (]
[nextX, ., greaterThan, (, xA, ), &&, nextX, ., lessThan, (, xB, ), ), ), {, if, (, signChangeIndex, -]
[greaterThan, (, xA, ), &&, nextX, ., lessThan, (, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=]
[greaterThan, (, xA, ), &&, nextX, ., lessThan, (, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=]
[xA, ), &&, nextX, ., lessThan, (, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=, end, -]
[nextX, ., lessThan, (, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {]
[., lessThan, (, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++]
[), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {]
[), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {, --]
[(, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {, --, end, ;, }]
[-, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {, --, end, ;, }, nextX, =]
[), {, ++, start, ;, }, else, {, --, end, ;, }, nextX, =, nan, ;, }, }, while, (]
[), {, ++, start, ;, }, else, {, --, end, ;, }, nextX, =, nan, ;, }, }, while, (]
[), {, ++, start, ;, }, else, {, --, end, ;, }, nextX, =, nan, ;, }, }, while, (]
[else, {, --, end, ;, }, nextX, =, nan, ;, }, }, while, (, nextX, ., isNaN, (, ), &&]
[{, --, end, ;, }, nextX, =, nan, ;, }, }, while, (, nextX, ., isNaN, (, ), &&, (]
[{, --, end, ;, }, nextX, =, nan, ;, }, }, while, (, nextX, ., isNaN, (, ), &&, (]
[{, --, end, ;, }, nextX, =, nan, ;, }, }, while, (, nextX, ., isNaN, (, ), &&, (]
[end, ;, }, nextX, =, nan, ;, }, }, while, (, nextX, ., isNaN, (, ), &&, (, end, -]
[}, nextX, =, nan, ;, }, }, while, (, nextX, ., isNaN, (, ), &&, (, end, -, start, >]
[}, while, (, nextX, ., isNaN, (, ), &&, (, end, -, start, >, 1, ), ), ;, if, (]
[}, while, (, nextX, ., isNaN, (, ), &&, (, end, -, start, >, 1, ), ), ;, if, (]
[), &&, (, end, -, start, >, 1, ), ), ;, if, (, nextX, ., isNaN, (, ), ), {]
[(, end, -, start, >, 1, ), ), ;, if, (, nextX, ., isNaN, (, ), ), {, nextX, =]
[(, end, -, start, >, 1, ), ), ;, if, (, nextX, ., isNaN, (, ), ), {, nextX, =]
[>, 1, ), ), ;, if, (, nextX, ., isNaN, (, ), ), {, nextX, =, xA, ., add, (]
[>, 1, ), ), ;, if, (, nextX, ., isNaN, (, ), ), {, nextX, =, xA, ., add, (]
[>, 1, ), ), ;, if, (, nextX, ., isNaN, (, ), ), {, nextX, =, xA, ., add, (]
[;, if, (, nextX, ., isNaN, (, ), ), {, nextX, =, xA, ., add, (, xB, ., subtract, (]
[isNaN, (, ), ), {, nextX, =, xA, ., add, (, xB, ., subtract, (, xA, ), ., divide, (]
[{, nextX, =, xA, ., add, (, xB, ., subtract, (, xA, ), ., divide, (, 2, ), ), ;]
[=, xA, ., add, (, xB, ., subtract, (, xA, ), ., divide, (, 2, ), ), ;, start, =]
[=, xA, ., add, (, xB, ., subtract, (, xA, ), ., divide, (, 2, ), ), ;, start, =]
[., add, (, xB, ., subtract, (, xA, ), ., divide, (, 2, ), ), ;, start, =, signChangeIndex, -]
[(, xB, ., subtract, (, xA, ), ., divide, (, 2, ), ), ;, start, =, signChangeIndex, -, 1, ;]
[., subtract, (, xA, ), ., divide, (, 2, ), ), ;, start, =, signChangeIndex, -, 1, ;, end, =]
[xA, ), ., divide, (, 2, ), ), ;, start, =, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }]
[xA, ), ., divide, (, 2, ), ), ;, start, =, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }]
[=, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, evaluations, ., incrementCount, (, ), ;, final, Dfp, nextY, =]
[=, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, evaluations, ., incrementCount, (, ), ;, final, Dfp, nextY, =]
[;, end, =, signChangeIndex, ;, }, evaluations, ., incrementCount, (, ), ;, final, Dfp, nextY, =, f, ., value, (]
[}, evaluations, ., incrementCount, (, ), ;, final, Dfp, nextY, =, f, ., value, (, nextX, ), ;, if, (]
[}, evaluations, ., incrementCount, (, ), ;, final, Dfp, nextY, =, f, ., value, (, nextX, ), ;, if, (]
[Dfp, nextY, =, f, ., value, (, nextX, ), ;, if, (, nextY, ., isZero, (, ), ), {, return]
[value, (, nextX, ), ;, if, (, nextY, ., isZero, (, ), ), {, return, nextX, ;, }, if, (]
[value, (, nextX, ), ;, if, (, nextY, ., isZero, (, ), ), {, return, nextX, ;, }, if, (]
[(, nextX, ), ;, if, (, nextY, ., isZero, (, ), ), {, return, nextX, ;, }, if, (, (]
[(, nextX, ), ;, if, (, nextY, ., isZero, (, ), ), {, return, nextX, ;, }, if, (, (]
[), ;, if, (, nextY, ., isZero, (, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >]
[(, nextY, ., isZero, (, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&]
[nextY, ., isZero, (, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (]
[nextY, ., isZero, (, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (]
[nextY, ., isZero, (, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (]
[isZero, (, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (, end, -]
[), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (, end, -, start, !=]
[nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {]
[}, if, (, (, nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =]
[}, if, (, (, nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =]
[(, (, nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -]
[nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;]
[nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;]
[&&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (]
[end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,]
[start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,]
[nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,]
[), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,]
[=, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;]
[=, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;]
[;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (]
[., arraycopy, (, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,]
[(, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,]
[,, start, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,, y, ,]
[,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,, y, ,, 0, ,]
[0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,, y, ,, 0, ,, nbPoints, ), ;]
[nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=]
[(, y, ,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (]
[(, y, ,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (]
[,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==]
[,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==]
[0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {]
[0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {]
[signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (]
[signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (]
[start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=]
[start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=]
[;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (]
[;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (]
[;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (]
[(, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (, x, ., length, +]
[x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, ), /]
[), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, ), /, 2, ), {]
[), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, ), /, 2, ), {]
[;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, ), /, 2, ), {, System, ., arraycopy, (]
[(, signChangeIndex, >=, (, x, ., length, +, 1, ), /, 2, ), {, System, ., arraycopy, (, x, ,]
[>=, (, x, ., length, +, 1, ), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,]
[x, ., length, +, 1, ), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,]
[length, +, 1, ), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,]
[), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;]
[), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;]
[{, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (]
[., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,]
[(, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,]
[,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,, y, ,]
[,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,]
[0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;]
[,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;, --]
[System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }]
[System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }]
[y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (]
[1, ,, y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,]
[y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,]
[0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,]
[0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,]
[nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +]
[;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,]
[;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,]
[signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -]
[}, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;]
[}, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;]
[., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, []
[x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =]
[signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;]
[signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;]
[signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (]
[1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,]
[nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,]
[signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,]
[signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,]
[;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +]
[[, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,]
[[, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,]
[], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -]
[;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;]
[;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;]
[., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, []
[y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =]
[signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;]
[,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++]
[+, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (]
[+, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (]
[+, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (]
[-, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, ., multiply, (]
[=, nextY, ;, ++, nbPoints, ;, if, (, nextY, ., multiply, (, yA, ), ., negativeOrNull, (, ), ), {]
[;, ++, nbPoints, ;, if, (, nextY, ., multiply, (, yA, ), ., negativeOrNull, (, ), ), {, xB, =]
[nbPoints, ;, if, (, nextY, ., multiply, (, yA, ), ., negativeOrNull, (, ), ), {, xB, =, nextX, ;]
[if, (, nextY, ., multiply, (, yA, ), ., negativeOrNull, (, ), ), {, xB, =, nextX, ;, yB, =]
[nextY, ., multiply, (, yA, ), ., negativeOrNull, (, ), ), {, xB, =, nextX, ;, yB, =, nextY, ;]
[multiply, (, yA, ), ., negativeOrNull, (, ), ), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =]
[multiply, (, yA, ), ., negativeOrNull, (, ), ), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =]
[(, ), ), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =, yB, ., abs, (, ), ;]
[), ), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =, yB, ., abs, (, ), ;, ++]
[{, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =, yB, ., abs, (, ), ;, ++, agingA, ;]
[=, nextX, ;, yB, =, nextY, ;, absYB, =, yB, ., abs, (, ), ;, ++, agingA, ;, agingB, =]
[nextY, ;, absYB, =, yB, ., abs, (, ), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {]
[absYB, =, yB, ., abs, (, ), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =]
[yB, ., abs, (, ), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;]
[abs, (, ), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;, yA, =]
[), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;]
[++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;, absYA, =]
[++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;, absYA, =]
[;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;, absYA, =, yA, ., abs, (, ), ;]
[else, {, xA, =, nextX, ;, yA, =, nextY, ;, absYA, =, yA, ., abs, (, ), ;, agingA, =]
[xA, =, nextX, ;, yA, =, nextY, ;, absYA, =, yA, ., abs, (, ), ;, agingA, =, 0, ;]
[=, nextX, ;, yA, =, nextY, ;, absYA, =, yA, ., abs, (, ), ;, agingA, =, 0, ;, ++]
[;, yA, =, nextY, ;, absYA, =, yA, ., abs, (, ), ;, agingA, =, 0, ;, ++, agingB, ;]
[;, yA, =, nextY, ;, absYA, =, yA, ., abs, (, ), ;, agingA, =, 0, ;, ++, agingB, ;]
[final, Dfp, [, ], y, ,, final, int, start, ,, final, int, end, ), {, for, (, int, i, =]
[[, ], y, ,, final, int, start, ,, final, int, end, ), {, for, (, int, i, =, start, ;]
[[, ], y, ,, final, int, start, ,, final, int, end, ), {, for, (, int, i, =, start, ;]
[y, ,, final, int, start, ,, final, int, end, ), {, for, (, int, i, =, start, ;, i, <]
[y, ,, final, int, start, ,, final, int, end, ), {, for, (, int, i, =, start, ;, i, <]
[final, int, start, ,, final, int, end, ), {, for, (, int, i, =, start, ;, i, <, end, -]
[start, ,, final, int, end, ), {, for, (, int, i, =, start, ;, i, <, end, -, 1, ;]
[,, final, int, end, ), {, for, (, int, i, =, start, ;, i, <, end, -, 1, ;, ++]
[(, int, i, =, start, ;, i, <, end, -, 1, ;, ++, i, ), {, final, int, delta, =]
[(, int, i, =, start, ;, i, <, end, -, 1, ;, ++, i, ), {, final, int, delta, =]
[(, int, i, =, start, ;, i, <, end, -, 1, ;, ++, i, ), {, final, int, delta, =]
[i, =, start, ;, i, <, end, -, 1, ;, ++, i, ), {, final, int, delta, =, i, +]
[start, ;, i, <, end, -, 1, ;, ++, i, ), {, final, int, delta, =, i, +, 1, -]
[;, ++, i, ), {, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =]
[;, ++, i, ), {, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =]
[i, ), {, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =, end, -]
[{, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =, end, -, 1, ;]
[{, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =, end, -, 1, ;]
[int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =, end, -, 1, ;, j, >]
[=, i, +, 1, -, start, ;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;]
[i, +, 1, -, start, ;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;, --]
[-, start, ;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {]
[-, start, ;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {]
[;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, []
[int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, [, j, ], =]
[int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, [, j, ], =]
[int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, [, j, ], =]
[int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, [, j, ], =]
[=, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, [, j, ], =, x, []
[j, >, i, ;, --, j, ), {, x, [, j, ], =, x, [, j, ], ., subtract, (]
[j, >, i, ;, --, j, ), {, x, [, j, ], =, x, [, j, ], ., subtract, (]
[i, ;, --, j, ), {, x, [, j, ], =, x, [, j, ], ., subtract, (, x, []
[i, ;, --, j, ), {, x, [, j, ], =, x, [, j, ], ., subtract, (, x, []
[--, j, ), {, x, [, j, ], =, x, [, j, ], ., subtract, (, x, [, j, -]
[j, ], =, x, [, j, ], ., subtract, (, x, [, j, -, 1, ], ), ., divide, (]
[j, ], =, x, [, j, ], ., subtract, (, x, [, j, -, 1, ], ), ., divide, (]
[j, ], =, x, [, j, ], ., subtract, (, x, [, j, -, 1, ], ), ., divide, (]
[=, x, [, j, ], ., subtract, (, x, [, j, -, 1, ], ), ., divide, (, y, []
[., subtract, (, x, [, j, -, 1, ], ), ., divide, (, y, [, j, ], ., subtract, (]
[., subtract, (, x, [, j, -, 1, ], ), ., divide, (, y, [, j, ], ., subtract, (]
[(, x, [, j, -, 1, ], ), ., divide, (, y, [, j, ], ., subtract, (, y, []
[(, x, [, j, -, 1, ], ), ., divide, (, y, [, j, ], ., subtract, (, y, []
[[, j, -, 1, ], ), ., divide, (, y, [, j, ], ., subtract, (, y, [, j, -]
[[, j, ], ., subtract, (, y, [, j, -, delta, ], ), ), ;, }, }, Dfp, x0, =]
[[, j, ], ., subtract, (, y, [, j, -, delta, ], ), ), ;, }, }, Dfp, x0, =]
[], ), ), ;, }, }, Dfp, x0, =, targetY, ., getZero, (, ), ;, for, (, int, j, =]
[], ), ), ;, }, }, Dfp, x0, =, targetY, ., getZero, (, ), ;, for, (, int, j, =]
[), ;, }, }, Dfp, x0, =, targetY, ., getZero, (, ), ;, for, (, int, j, =, end, -]
[}, }, Dfp, x0, =, targetY, ., getZero, (, ), ;, for, (, int, j, =, end, -, 1, ;]
[}, }, Dfp, x0, =, targetY, ., getZero, (, ), ;, for, (, int, j, =, end, -, 1, ;]
[Dfp, x0, =, targetY, ., getZero, (, ), ;, for, (, int, j, =, end, -, 1, ;, j, >=]
[=, targetY, ., getZero, (, ), ;, for, (, int, j, =, end, -, 1, ;, j, >=, start, ;]
[targetY, ., getZero, (, ), ;, for, (, int, j, =, end, -, 1, ;, j, >=, start, ;, --]
[(, ), ;, for, (, int, j, =, end, -, 1, ;, j, >=, start, ;, --, j, ), {]
[;, for, (, int, j, =, end, -, 1, ;, j, >=, start, ;, --, j, ), {, x0, =]
[;, for, (, int, j, =, end, -, 1, ;, j, >=, start, ;, --, j, ), {, x0, =]
[;, for, (, int, j, =, end, -, 1, ;, j, >=, start, ;, --, j, ), {, x0, =]
[(, int, j, =, end, -, 1, ;, j, >=, start, ;, --, j, ), {, x0, =, x, []
[-, 1, ;, j, >=, start, ;, --, j, ), {, x0, =, x, [, j, ], ., add, (]
[-, 1, ;, j, >=, start, ;, --, j, ), {, x0, =, x, [, j, ], ., add, (]
[>=, start, ;, --, j, ), {, x0, =, x, [, j, ], ., add, (, x0, ., multiply, (]
[>=, start, ;, --, j, ), {, x0, =, x, [, j, ], ., add, (, x0, ., multiply, (]
[j, ), {, x0, =, x, [, j, ], ., add, (, x0, ., multiply, (, targetY, ., subtract, (]
[j, ), {, x0, =, x, [, j, ], ., add, (, x0, ., multiply, (, targetY, ., subtract, (]
[{, x0, =, x, [, j, ], ., add, (, x0, ., multiply, (, targetY, ., subtract, (, y, []
[add, (, x0, ., multiply, (, targetY, ., subtract, (, y, [, j, ], ), ), ), ;, }, return]
