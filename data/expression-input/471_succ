[;, private, static, final, CharMatcher, NON_SLASH_MATCHER, =, CharMatcher, ., isNot, (, '/', ), ;, private, PathUtil, (, ), {, }]
[., is, (, '/', ), ;, private, static, final, CharMatcher, NON_SLASH_MATCHER, =, CharMatcher, ., isNot, (, '/', ), ;, private]
[), ;, private, static, final, CharMatcher, NON_SLASH_MATCHER, =, CharMatcher, ., isNot, (, '/', ), ;, private, PathUtil, (, ), {]
[;, private, PathUtil, (, ), {, }, public, static, String, collapseDots, (, String, path, ), {, path, =, removeExtraneousSlashes, (]
[., isNot, (, '/', ), ;, private, PathUtil, (, ), {, }, public, static, String, collapseDots, (, String, path, )]
[), ;, private, PathUtil, (, ), {, }, public, static, String, collapseDots, (, String, path, ), {, path, =, removeExtraneousSlashes]
[=, removeExtraneousSlashes, (, path, ), ;, if, (, !, path, ., contains, (, ".", ), ), {, return, path, ;]
[;, if, (, !, path, ., contains, (, ".", ), ), {, return, path, ;, }, String, [, ], srcFragments]
[), ;, if, (, !, path, ., contains, (, ".", ), ), {, return, path, ;, }, String, [, ]]
[), {, return, path, ;, }, String, [, ], srcFragments, =, path, ., split, (, "/", ), ;, List, <]
[), {, return, path, ;, }, String, [, ], srcFragments, =, path, ., split, (, "/", ), ;, List, <]
[., contains, (, ".", ), ), {, return, path, ;, }, String, [, ], srcFragments, =, path, ., split, (]
[), ), {, return, path, ;, }, String, [, ], srcFragments, =, path, ., split, (, "/", ), ;, List]
[;, }, String, [, ], srcFragments, =, path, ., split, (, "/", ), ;, List, <, String, >, dstFragments, =]
[;, List, <, String, >, dstFragments, =, Lists, ., newArrayList, (, ), ;, for, (, String, fragment, :, srcFragments, )]
[., split, (, "/", ), ;, List, <, String, >, dstFragments, =, Lists, ., newArrayList, (, ), ;, for, (]
[), ;, List, <, String, >, dstFragments, =, Lists, ., newArrayList, (, ), ;, for, (, String, fragment, :, srcFragments]
[;, for, (, String, fragment, :, srcFragments, ), {, if, (, fragment, ., equals, (, "..", ), ), {, if]
[., newArrayList, (, ), ;, for, (, String, fragment, :, srcFragments, ), {, if, (, fragment, ., equals, (, ".."]
[), {, if, (, fragment, ., equals, (, "..", ), ), {, if, (, !, dstFragments, ., isEmpty, (, )]
[), {, if, (, !, dstFragments, ., isEmpty, (, ), ), {, dstFragments, ., remove, (, dstFragments, ., size, (]
[., equals, (, "..", ), ), {, if, (, !, dstFragments, ., isEmpty, (, ), ), {, dstFragments, ., remove]
[), ), {, if, (, !, dstFragments, ., isEmpty, (, ), ), {, dstFragments, ., remove, (, dstFragments, ., size]
[), {, dstFragments, ., remove, (, dstFragments, ., size, (, ), -, 1, ), ;, }, }, else, if, (]
[), {, dstFragments, ., remove, (, dstFragments, ., size, (, ), -, 1, ), ;, }, }, else, if, (]
[., isEmpty, (, ), ), {, dstFragments, ., remove, (, dstFragments, ., size, (, ), -, 1, ), ;, }]
[;, }, }, else, if, (, !, fragment, ., equals, (, ".", ), ), {, dstFragments, ., add, (, fragment]
[., remove, (, dstFragments, ., size, (, ), -, 1, ), ;, }, }, else, if, (, !, fragment, .]
[), ;, }, }, else, if, (, !, fragment, ., equals, (, ".", ), ), {, dstFragments, ., add, (]
[-, 1, ), ;, }, }, else, if, (, !, fragment, ., equals, (, ".", ), ), {, dstFragments, .]
[., size, (, ), -, 1, ), ;, }, }, else, if, (, !, fragment, ., equals, (, ".", )]
[), ;, }, }, else, if, (, !, fragment, ., equals, (, ".", ), ), {, dstFragments, ., add, (]
[), {, dstFragments, ., add, (, fragment, ), ;, }, }, if, (, dstFragments, ., size, (, ), ==, 1]
[), {, dstFragments, ., add, (, fragment, ), ;, }, }, if, (, dstFragments, ., size, (, ), ==, 1]
[., equals, (, ".", ), ), {, dstFragments, ., add, (, fragment, ), ;, }, }, if, (, dstFragments, .]
[), ), {, dstFragments, ., add, (, fragment, ), ;, }, }, if, (, dstFragments, ., size, (, ), ==]
[;, }, }, if, (, dstFragments, ., size, (, ), ==, 1, &&, dstFragments, ., get, (, 0, ), .]
[., add, (, fragment, ), ;, }, }, if, (, dstFragments, ., size, (, ), ==, 1, &&, dstFragments, .]
[), ;, }, }, if, (, dstFragments, ., size, (, ), ==, 1, &&, dstFragments, ., get, (, 0, )]
[), {, return, "/", ;, }, return, Joiner, ., on, (, "/", ), ., join, (, dstFragments, ), ;, }]
[&&, dstFragments, ., get, (, 0, ), ., isEmpty, (, ), ), {, return, "/", ;, }, return, Joiner, .]
[==, 1, &&, dstFragments, ., get, (, 0, ), ., isEmpty, (, ), ), {, return, "/", ;, }, return]
[., size, (, ), ==, 1, &&, dstFragments, ., get, (, 0, ), ., isEmpty, (, ), ), {, return]
[&&, dstFragments, ., get, (, 0, ), ., isEmpty, (, ), ), {, return, "/", ;, }, return, Joiner, .]
[), {, return, "/", ;, }, return, Joiner, ., on, (, "/", ), ., join, (, dstFragments, ), ;, }]
[., isEmpty, (, ), ), {, return, "/", ;, }, return, Joiner, ., on, (, "/", ), ., join, (]
[., get, (, 0, ), ., isEmpty, (, ), ), {, return, "/", ;, }, return, Joiner, ., on, (]
[), ., isEmpty, (, ), ), {, return, "/", ;, }, return, Joiner, ., on, (, "/", ), ., join]
[;, }, return, Joiner, ., on, (, "/", ), ., join, (, dstFragments, ), ;, }, static, boolean, isAbsolute, (]
[;, }, static, boolean, isAbsolute, (, String, path, ), {, return, path, ., startsWith, (, "/", ), ;, }, static]
[., join, (, dstFragments, ), ;, }, static, boolean, isAbsolute, (, String, path, ), {, return, path, ., startsWith, (]
[., on, (, "/", ), ., join, (, dstFragments, ), ;, }, static, boolean, isAbsolute, (, String, path, ), {]
[), ., join, (, dstFragments, ), ;, }, static, boolean, isAbsolute, (, String, path, ), {, return, path, ., startsWith]
[), ;, }, static, boolean, isAbsolute, (, String, path, ), {, return, path, ., startsWith, (, "/", ), ;, }]
[;, }, static, String, removeExtraneousSlashes, (, String, s, ), {, int, lastNonSlash, =, NON_SLASH_MATCHER, ., lastIndexIn, (, s, ), ;]
[., startsWith, (, "/", ), ;, }, static, String, removeExtraneousSlashes, (, String, s, ), {, int, lastNonSlash, =, NON_SLASH_MATCHER, .]
[), ;, }, static, String, removeExtraneousSlashes, (, String, s, ), {, int, lastNonSlash, =, NON_SLASH_MATCHER, ., lastIndexIn, (, s, )]
[;, if, (, lastNonSlash, !=, -, 1, ), {, s, =, s, ., substring, (, 0, ,, lastNonSlash, +, 1]
[., lastIndexIn, (, s, ), ;, if, (, lastNonSlash, !=, -, 1, ), {, s, =, s, ., substring, (]
[), ;, if, (, lastNonSlash, !=, -, 1, ), {, s, =, s, ., substring, (, 0, ,, lastNonSlash, +]
[), {, s, =, s, ., substring, (, 0, ,, lastNonSlash, +, 1, ), ;, }, return, SLASH_MATCHER, ., collapseFrom]
[!=, -, 1, ), {, s, =, s, ., substring, (, 0, ,, lastNonSlash, +, 1, ), ;, }, return]
[), {, s, =, s, ., substring, (, 0, ,, lastNonSlash, +, 1, ), ;, }, return, SLASH_MATCHER, ., collapseFrom]
[), {, s, =, s, ., substring, (, 0, ,, lastNonSlash, +, 1, ), ;, }, return, SLASH_MATCHER, ., collapseFrom]
[=, s, ., substring, (, 0, ,, lastNonSlash, +, 1, ), ;, }, return, SLASH_MATCHER, ., collapseFrom, (, s, ,]
[;, }, return, SLASH_MATCHER, ., collapseFrom, (, s, ,, '/', ), ;, }, public, static, String, makeAbsolute, (, String, path]
[., substring, (, 0, ,, lastNonSlash, +, 1, ), ;, }, return, SLASH_MATCHER, ., collapseFrom, (, s, ,, '/', )]
[,, lastNonSlash, +, 1, ), ;, }, return, SLASH_MATCHER, ., collapseFrom, (, s, ,, '/', ), ;, }, public, static]
[), ;, }, return, SLASH_MATCHER, ., collapseFrom, (, s, ,, '/', ), ;, }, public, static, String, makeAbsolute, (, String]
[+, 1, ), ;, }, return, SLASH_MATCHER, ., collapseFrom, (, s, ,, '/', ), ;, }, public, static, String, makeAbsolute]
[), ;, }, return, SLASH_MATCHER, ., collapseFrom, (, s, ,, '/', ), ;, }, public, static, String, makeAbsolute, (, String]
[;, }, public, static, String, makeAbsolute, (, String, path, ), {, return, makeAbsolute, (, path, ,, System, ., getProperty, (]
[., collapseFrom, (, s, ,, '/', ), ;, }, public, static, String, makeAbsolute, (, String, path, ), {, return, makeAbsolute]
[,, '/', ), ;, }, public, static, String, makeAbsolute, (, String, path, ), {, return, makeAbsolute, (, path, ,, System]
[), ;, }, public, static, String, makeAbsolute, (, String, path, ), {, return, makeAbsolute, (, path, ,, System, ., getProperty]
[;, }, public, static, String, makeAbsolute, (, String, path, ,, String, rootPath, ), {, if, (, !, isAbsolute, (, path]
[,, System, ., getProperty, (, "user.dir", ), ), ;, }, public, static, String, makeAbsolute, (, String, path, ,, String, rootPath]
[), ;, }, public, static, String, makeAbsolute, (, String, path, ,, String, rootPath, ), {, if, (, !, isAbsolute, (]
[., getProperty, (, "user.dir", ), ), ;, }, public, static, String, makeAbsolute, (, String, path, ,, String, rootPath, ), {]
[), ), ;, }, public, static, String, makeAbsolute, (, String, path, ,, String, rootPath, ), {, if, (, !, isAbsolute]
[), {, path, =, rootPath, +, "/", +, path, ;, }, return, collapseDots, (, path, ), ;, }, public, static]
[), {, path, =, rootPath, +, "/", +, path, ;, }, return, collapseDots, (, path, ), ;, }, public, static]
[), ), {, path, =, rootPath, +, "/", +, path, ;, }, return, collapseDots, (, path, ), ;, }, public]
[=, rootPath, +, "/", +, path, ;, }, return, collapseDots, (, path, ), ;, }, public, static, String, makeRelative, (]
[;, }, return, collapseDots, (, path, ), ;, }, public, static, String, makeRelative, (, String, basePath, ,, String, targetPath, )]
[+, path, ;, }, return, collapseDots, (, path, ), ;, }, public, static, String, makeRelative, (, String, basePath, ,, String]
[+, "/", +, path, ;, }, return, collapseDots, (, path, ), ;, }, public, static, String, makeRelative, (, String, basePath]
[+, path, ;, }, return, collapseDots, (, path, ), ;, }, public, static, String, makeRelative, (, String, basePath, ,, String]
[;, }, return, collapseDots, (, path, ), ;, }, public, static, String, makeRelative, (, String, basePath, ,, String, targetPath, )]
[;, }, public, static, String, makeRelative, (, String, basePath, ,, String, targetPath, ), {, if, (, isAbsolute, (, basePath, )]
[), ;, }, public, static, String, makeRelative, (, String, basePath, ,, String, targetPath, ), {, if, (, isAbsolute, (, basePath]
[), {, throw, new, IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n", +, "  targetPath: ", +, targetPath, ), ;, }]
[!=, isAbsolute, (, targetPath, ), ), {, throw, new, IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n", +, "  targetPath: "]
[), !=, isAbsolute, (, targetPath, ), ), {, throw, new, IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n", +]
[), {, throw, new, IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n", +, "  targetPath: ", +, targetPath, ), ;, }]
[), ), {, throw, new, IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n", +, "  targetPath: ", +, targetPath, ), ;]
[;, }, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =, collapseDots, (, targetPath, ), ;, String, [, ], baseFragments]
[), ;, }, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =, collapseDots, (, targetPath, ), ;, String, [, ]]
[+, targetPath, ), ;, }, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =, collapseDots, (, targetPath, ), ;, String]
[+, "  targetPath: ", +, targetPath, ), ;, }, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =, collapseDots, (, targetPath, )]
[+, "\n", +, "  targetPath: ", +, targetPath, ), ;, }, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =, collapseDots, (]
[+, basePath, +, "\n", +, "  targetPath: ", +, targetPath, ), ;, }, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =]
[+, "  basePath: ", +, basePath, +, "\n", +, "  targetPath: ", +, targetPath, ), ;, }, basePath, =, collapseDots, (, basePath, ), ;]
[+, basePath, +, "\n", +, "  targetPath: ", +, targetPath, ), ;, }, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =]
[+, "\n", +, "  targetPath: ", +, targetPath, ), ;, }, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =, collapseDots, (]
[+, "  targetPath: ", +, targetPath, ), ;, }, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =, collapseDots, (, targetPath, )]
[+, targetPath, ), ;, }, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =, collapseDots, (, targetPath, ), ;, String]
[), ;, }, basePath, =, collapseDots, (, basePath, ), ;, targetPath, =, collapseDots, (, targetPath, ), ;, String, [, ]]
[=, collapseDots, (, basePath, ), ;, targetPath, =, collapseDots, (, targetPath, ), ;, String, [, ], baseFragments, =, basePath, .]
[;, targetPath, =, collapseDots, (, targetPath, ), ;, String, [, ], baseFragments, =, basePath, ., split, (, "/", ), ;]
[), ;, targetPath, =, collapseDots, (, targetPath, ), ;, String, [, ], baseFragments, =, basePath, ., split, (, "/", )]
[=, collapseDots, (, targetPath, ), ;, String, [, ], baseFragments, =, basePath, ., split, (, "/", ), ;, String, []
[;, String, [, ], baseFragments, =, basePath, ., split, (, "/", ), ;, String, [, ], targetFragments, =, targetPath, .]
[), ;, String, [, ], baseFragments, =, basePath, ., split, (, "/", ), ;, String, [, ], targetFragments, =, targetPath]
[;, String, [, ], targetFragments, =, targetPath, ., split, (, "/", ), ;, int, i, =, -, 1, ;, do]
[., split, (, "/", ), ;, String, [, ], targetFragments, =, targetPath, ., split, (, "/", ), ;, int, i]
[), ;, String, [, ], targetFragments, =, targetPath, ., split, (, "/", ), ;, int, i, =, -, 1, ;]
[;, int, i, =, -, 1, ;, do, {, i, +=, 1, ;, if, (, i, ==, baseFragments, ., length]
[., split, (, "/", ), ;, int, i, =, -, 1, ;, do, {, i, +=, 1, ;, if, (]
[), ;, int, i, =, -, 1, ;, do, {, i, +=, 1, ;, if, (, i, ==, baseFragments, .]
[;, do, {, i, +=, 1, ;, if, (, i, ==, baseFragments, ., length, &&, i, ==, targetFragments, ., length]
[;, do, {, i, +=, 1, ;, if, (, i, ==, baseFragments, ., length, &&, i, ==, targetFragments, ., length]
[+=, 1, ;, if, (, i, ==, baseFragments, ., length, &&, i, ==, targetFragments, ., length, ), {, return, "."]
[;, if, (, i, ==, baseFragments, ., length, &&, i, ==, targetFragments, ., length, ), {, return, ".", ;, }]
[), {, return, ".", ;, }, else, if, (, i, ==, baseFragments, ., length, ), {, return, Joiner, ., on]
[&&, i, ==, targetFragments, ., length, ), {, return, ".", ;, }, else, if, (, i, ==, baseFragments, ., length]
[==, baseFragments, ., length, &&, i, ==, targetFragments, ., length, ), {, return, ".", ;, }, else, if, (, i]
[&&, i, ==, targetFragments, ., length, ), {, return, ".", ;, }, else, if, (, i, ==, baseFragments, ., length]
[., length, &&, i, ==, targetFragments, ., length, ), {, return, ".", ;, }, else, if, (, i, ==, baseFragments]
[), {, return, ".", ;, }, else, if, (, i, ==, baseFragments, ., length, ), {, return, Joiner, ., on]
[==, targetFragments, ., length, ), {, return, ".", ;, }, else, if, (, i, ==, baseFragments, ., length, ), {]
[), {, return, ".", ;, }, else, if, (, i, ==, baseFragments, ., length, ), {, return, Joiner, ., on]
[., length, ), {, return, ".", ;, }, else, if, (, i, ==, baseFragments, ., length, ), {, return, Joiner]
[;, }, else, if, (, i, ==, baseFragments, ., length, ), {, return, Joiner, ., on, (, "/", ), .]
[), {, return, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (]
[==, baseFragments, ., length, ), {, return, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (]
[), {, return, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (]
[., length, ), {, return, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, .]
[;, }, else, if, (, i, ==, targetFragments, ., length, ), {, return, Strings, ., repeat, (, "../", ,, baseFragments]
[., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), ), )]
[., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator]
[), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), )]
[), ;, }, else, if, (, i, ==, targetFragments, ., length, ), {, return, Strings, ., repeat, (, "../", ,]
[., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), ), ), ;, }, else, if]
[), ), ;, }, else, if, (, i, ==, targetFragments, ., length, ), {, return, Strings, ., repeat, (, "../"]
[., listIterator, (, i, ), ), ), ;, }, else, if, (, i, ==, targetFragments, ., length, ), {, return]
[., asList, (, targetFragments, ), ., listIterator, (, i, ), ), ), ;, }, else, if, (, i, ==, targetFragments]
[), ., listIterator, (, i, ), ), ), ;, }, else, if, (, i, ==, targetFragments, ., length, ), {]
[), ), ), ;, }, else, if, (, i, ==, targetFragments, ., length, ), {, return, Strings, ., repeat, (]
[), {, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, -, 1, ), +, "..", ;]
[==, targetFragments, ., length, ), {, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, -, 1]
[), {, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, -, 1, ), +, "..", ;]
[., length, ), {, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, -, 1, ), +]
[;, }, }, while, (, baseFragments, [, i, ], ., equals, (, targetFragments, [, i, ], ), ), ;, return]
[+, "..", ;, }, }, while, (, baseFragments, [, i, ], ., equals, (, targetFragments, [, i, ], ), )]
[., repeat, (, "../", ,, baseFragments, ., length, -, i, -, 1, ), +, "..", ;, }, }, while, (]
[,, baseFragments, ., length, -, i, -, 1, ), +, "..", ;, }, }, while, (, baseFragments, [, i, ]]
[), +, "..", ;, }, }, while, (, baseFragments, [, i, ], ., equals, (, targetFragments, [, i, ], )]
[-, 1, ), +, "..", ;, }, }, while, (, baseFragments, [, i, ], ., equals, (, targetFragments, [, i]
[-, i, -, 1, ), +, "..", ;, }, }, while, (, baseFragments, [, i, ], ., equals, (, targetFragments]
[., length, -, i, -, 1, ), +, "..", ;, }, }, while, (, baseFragments, [, i, ], ., equals]
[-, 1, ), +, "..", ;, }, }, while, (, baseFragments, [, i, ], ., equals, (, targetFragments, [, i]
[), +, "..", ;, }, }, while, (, baseFragments, [, i, ], ., equals, (, targetFragments, [, i, ], )]
[;, }, }, while, (, baseFragments, [, i, ], ., equals, (, targetFragments, [, i, ], ), ), ;, return]
[), ;, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, ), +, Joiner, ., on, (]
[., equals, (, targetFragments, [, i, ], ), ), ;, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length]
[[, i, ], ., equals, (, targetFragments, [, i, ], ), ), ;, return, Strings, ., repeat, (, "../", ,]
[], ., equals, (, targetFragments, [, i, ], ), ), ;, return, Strings, ., repeat, (, "../", ,, baseFragments, .]
[), ), ;, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, ), +, Joiner, ., on]
[[, i, ], ), ), ;, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, ), +]
[], ), ), ;, return, Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, ), +, Joiner, .]
[;, }, }]
[+, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, )]
[., repeat, (, "../", ,, baseFragments, ., length, -, i, ), +, Joiner, ., on, (, "/", ), ., join]
[,, baseFragments, ., length, -, i, ), +, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList]
[), +, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments]
[-, i, ), +, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList]
[., length, -, i, ), +, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays]
[), +, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments]
[;, }, }]
[., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), ), )]
[., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator]
[), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), )]
[), ;, }, }]
[., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), ), ), ;, }, }]
[), ), ;, }, }]
[., listIterator, (, i, ), ), ), ;, }, }]
[., asList, (, targetFragments, ), ., listIterator, (, i, ), ), ), ;, }, }]
[), ., listIterator, (, i, ), ), ), ;, }, }]
[), ), ), ;, }, }]
