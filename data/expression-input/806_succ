[=, new, BSPTree, <, S, >, (, Boolean, ., TRUE, ), ;, }, protected, AbstractRegion, (, final, BSPTree, <, S]
[;, }, protected, AbstractRegion, (, final, BSPTree, <, S, >, tree, ), {, this, ., tree, =, tree, ;, }]
[), ;, }, protected, AbstractRegion, (, final, BSPTree, <, S, >, tree, ), {, this, ., tree, =, tree, ;]
[., TRUE, ), ;, }, protected, AbstractRegion, (, final, BSPTree, <, S, >, tree, ), {, this, ., tree, =]
[=, tree, ;, }, protected, AbstractRegion, (, final, Collection, <, SubHyperplane, <, S, >, >, boundary, ), {, if, (]
[., tree, =, tree, ;, }, protected, AbstractRegion, (, final, Collection, <, SubHyperplane, <, S, >, >, boundary, ), {]
[;, }, protected, AbstractRegion, (, final, Collection, <, SubHyperplane, <, S, >, >, boundary, ), {, if, (, boundary, .]
[), {, tree, =, new, BSPTree, <, S, >, (, Boolean, ., TRUE, ), ;, }, else, {, final, TreeSet]
[==, 0, ), {, tree, =, new, BSPTree, <, S, >, (, Boolean, ., TRUE, ), ;, }, else, {]
[., size, (, ), ==, 0, ), {, tree, =, new, BSPTree, <, S, >, (, Boolean, ., TRUE, )]
[), {, tree, =, new, BSPTree, <, S, >, (, Boolean, ., TRUE, ), ;, }, else, {, final, TreeSet]
[=, new, BSPTree, <, S, >, (, Boolean, ., TRUE, ), ;, }, else, {, final, TreeSet, <, SubHyperplane, <]
[;, }, else, {, final, TreeSet, <, SubHyperplane, <, S, >, >, ordered, =, new, TreeSet, <, SubHyperplane, <, S]
[), ;, }, else, {, final, TreeSet, <, SubHyperplane, <, S, >, >, ordered, =, new, TreeSet, <, SubHyperplane, <]
[., TRUE, ), ;, }, else, {, final, TreeSet, <, SubHyperplane, <, S, >, >, ordered, =, new, TreeSet, <]
[;, ordered, ., addAll, (, boundary, ), ;, tree, =, new, BSPTree, <, S, >, (, ), ;, insertCuts, (]
[), ;, ordered, ., addAll, (, boundary, ), ;, tree, =, new, BSPTree, <, S, >, (, ), ;, insertCuts]
[;, final, double, size2, =, o2, ., getSize, (, ), ;, return, (, size2, <, size1, ), ?, -, 1]
[., getSize, (, ), ;, final, double, size2, =, o2, ., getSize, (, ), ;, return, (, size2, <, size1]
[;, return, (, size2, <, size1, ), ?, -, 1, :, (, (, o1, ==, o2, ), ?, 0, :]
[., getSize, (, ), ;, return, (, size2, <, size1, ), ?, -, 1, :, (, (, o1, ==, o2]
[;, }, }, ), ;, ordered, ., addAll, (, boundary, ), ;, tree, =, new, BSPTree, <, S, >, (]
[?, -, 1, :, (, (, o1, ==, o2, ), ?, 0, :, +, 1, ), ;, }, }, )]
[), ?, -, 1, :, (, (, o1, ==, o2, ), ?, 0, :, +, 1, ), ;, }, }]
[<, size1, ), ?, -, 1, :, (, (, o1, ==, o2, ), ?, 0, :, +, 1, ), ;]
[), ?, -, 1, :, (, (, o1, ==, o2, ), ?, 0, :, +, 1, ), ;, }, }]
[:, (, (, o1, ==, o2, ), ?, 0, :, +, 1, ), ;, }, }, ), ;, ordered, .]
[:, (, (, o1, ==, o2, ), ?, 0, :, +, 1, ), ;, }, }, ), ;, ordered, .]
[;, }, }, ), ;, ordered, ., addAll, (, boundary, ), ;, tree, =, new, BSPTree, <, S, >, (]
[), ;, }, }, ), ;, ordered, ., addAll, (, boundary, ), ;, tree, =, new, BSPTree, <, S, >]
[?, 0, :, +, 1, ), ;, }, }, ), ;, ordered, ., addAll, (, boundary, ), ;, tree, =]
[), ?, 0, :, +, 1, ), ;, }, }, ), ;, ordered, ., addAll, (, boundary, ), ;, tree]
[==, o2, ), ?, 0, :, +, 1, ), ;, }, }, ), ;, ordered, ., addAll, (, boundary, )]
[), ?, 0, :, +, 1, ), ;, }, }, ), ;, ordered, ., addAll, (, boundary, ), ;, tree]
[:, +, 1, ), ;, }, }, ), ;, ordered, ., addAll, (, boundary, ), ;, tree, =, new, BSPTree]
[), ;, }, }, ), ;, ordered, ., addAll, (, boundary, ), ;, tree, =, new, BSPTree, <, S, >]
[), ;, }, }, ), ;, ordered, ., addAll, (, boundary, ), ;, tree, =, new, BSPTree, <, S, >]
[;, tree, =, new, BSPTree, <, S, >, (, ), ;, insertCuts, (, tree, ,, ordered, ), ;, tree, .]
[., addAll, (, boundary, ), ;, tree, =, new, BSPTree, <, S, >, (, ), ;, insertCuts, (, tree, ,]
[), ;, tree, =, new, BSPTree, <, S, >, (, ), ;, insertCuts, (, tree, ,, ordered, ), ;, tree]
[=, new, BSPTree, <, S, >, (, ), ;, insertCuts, (, tree, ,, ordered, ), ;, tree, ., visit, (]
[;, insertCuts, (, tree, ,, ordered, ), ;, tree, ., visit, (, new, BSPTreeVisitor, <, S, >, (, ), {]
[;, tree, ., visit, (, new, BSPTreeVisitor, <, S, >, (, ), {, public, Order, visitOrder, (, final, BSPTree, <]
[,, ordered, ), ;, tree, ., visit, (, new, BSPTreeVisitor, <, S, >, (, ), {, public, Order, visitOrder, (]
[), ;, tree, ., visit, (, new, BSPTreeVisitor, <, S, >, (, ), {, public, Order, visitOrder, (, final, BSPTree]
[;, }, }, public, AbstractRegion, (, final, Hyperplane, <, S, >, [, ], hyperplanes, ), {, if, (, (, hyperplanes]
[., visit, (, new, BSPTreeVisitor, <, S, >, (, ), {, public, Order, visitOrder, (, final, BSPTree, <, S, >]
[), ;, }, }, public, AbstractRegion, (, final, Hyperplane, <, S, >, [, ], hyperplanes, ), {, if, (, (]
[;, }, public, void, visitInternalNode, (, final, BSPTree, <, S, >, node, ), {, }, public, void, visitLeafNode, (, final]
[., PLUS_SUB_MINUS, ;, }, public, void, visitInternalNode, (, final, BSPTree, <, S, >, node, ), {, }, public, void, visitLeafNode]
[;, }, }, ), ;, }, }, public, AbstractRegion, (, final, Hyperplane, <, S, >, [, ], hyperplanes, ), {]
[., setAttribute, (, (, node, ==, node, ., getParent, (, ), ., getPlus, (, ), ), ?, Boolean, ., FALSE]
[), ;, }, }, ), ;, }, }, public, AbstractRegion, (, final, Hyperplane, <, S, >, [, ], hyperplanes, )]
[?, Boolean, ., FALSE, :, Boolean, ., TRUE, ), ;, }, }, ), ;, }, }, public, AbstractRegion, (, final]
[), ?, Boolean, ., FALSE, :, Boolean, ., TRUE, ), ;, }, }, ), ;, }, }, public, AbstractRegion, (]
[==, node, ., getParent, (, ), ., getPlus, (, ), ), ?, Boolean, ., FALSE, :, Boolean, ., TRUE, )]
[), ?, Boolean, ., FALSE, :, Boolean, ., TRUE, ), ;, }, }, ), ;, }, }, public, AbstractRegion, (]
[., getPlus, (, ), ), ?, Boolean, ., FALSE, :, Boolean, ., TRUE, ), ;, }, }, ), ;, }]
[., getParent, (, ), ., getPlus, (, ), ), ?, Boolean, ., FALSE, :, Boolean, ., TRUE, ), ;, }]
[:, Boolean, ., TRUE, ), ;, }, }, ), ;, }, }, public, AbstractRegion, (, final, Hyperplane, <, S, >]
[., FALSE, :, Boolean, ., TRUE, ), ;, }, }, ), ;, }, }, public, AbstractRegion, (, final, Hyperplane, <]
[), ;, }, }, ), ;, }, }, public, AbstractRegion, (, final, Hyperplane, <, S, >, [, ], hyperplanes, )]
[., TRUE, ), ;, }, }, ), ;, }, }, public, AbstractRegion, (, final, Hyperplane, <, S, >, [, ]]
[), {, tree, =, new, BSPTree, <, S, >, (, Boolean, ., FALSE, ), ;, }, else, {, tree, =]
[||, (, hyperplanes, ., length, ==, 0, ), ), {, tree, =, new, BSPTree, <, S, >, (, Boolean, .]
[), ||, (, hyperplanes, ., length, ==, 0, ), ), {, tree, =, new, BSPTree, <, S, >, (, Boolean]
[==, null, ), ||, (, hyperplanes, ., length, ==, 0, ), ), {, tree, =, new, BSPTree, <, S, >]
[), ||, (, hyperplanes, ., length, ==, 0, ), ), {, tree, =, new, BSPTree, <, S, >, (, Boolean]
[), {, tree, =, new, BSPTree, <, S, >, (, Boolean, ., FALSE, ), ;, }, else, {, tree, =]
[), ), {, tree, =, new, BSPTree, <, S, >, (, Boolean, ., FALSE, ), ;, }, else, {, tree]
[==, 0, ), ), {, tree, =, new, BSPTree, <, S, >, (, Boolean, ., FALSE, ), ;, }, else]
[., length, ==, 0, ), ), {, tree, =, new, BSPTree, <, S, >, (, Boolean, ., FALSE, ), ;]
[), ), {, tree, =, new, BSPTree, <, S, >, (, Boolean, ., FALSE, ), ;, }, else, {, tree]
[=, new, BSPTree, <, S, >, (, Boolean, ., FALSE, ), ;, }, else, {, tree, =, hyperplanes, [, 0]
[;, }, else, {, tree, =, hyperplanes, [, 0, ], ., wholeSpace, (, ), ., getTree, (, false, ), ;]
[), ;, }, else, {, tree, =, hyperplanes, [, 0, ], ., wholeSpace, (, ), ., getTree, (, false, )]
[., FALSE, ), ;, }, else, {, tree, =, hyperplanes, [, 0, ], ., wholeSpace, (, ), ., getTree, (]
[=, hyperplanes, [, 0, ], ., wholeSpace, (, ), ., getTree, (, false, ), ;, BSPTree, <, S, >, node]
[;, BSPTree, <, S, >, node, =, tree, ;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, for, (]
[., getTree, (, false, ), ;, BSPTree, <, S, >, node, =, tree, ;, node, ., setAttribute, (, Boolean, .]
[., wholeSpace, (, ), ., getTree, (, false, ), ;, BSPTree, <, S, >, node, =, tree, ;, node, .]
[[, 0, ], ., wholeSpace, (, ), ., getTree, (, false, ), ;, BSPTree, <, S, >, node, =, tree]
[], ., wholeSpace, (, ), ., getTree, (, false, ), ;, BSPTree, <, S, >, node, =, tree, ;, node]
[), ;, BSPTree, <, S, >, node, =, tree, ;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, for]
[;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, for, (, final, Hyperplane, <, S, >, hyperplane, :, hyperplanes]
[;, for, (, final, Hyperplane, <, S, >, hyperplane, :, hyperplanes, ), {, if, (, node, ., insertCut, (, hyperplane]
[., setAttribute, (, Boolean, ., TRUE, ), ;, for, (, final, Hyperplane, <, S, >, hyperplane, :, hyperplanes, ), {]
[), ;, for, (, final, Hyperplane, <, S, >, hyperplane, :, hyperplanes, ), {, if, (, node, ., insertCut, (]
[., TRUE, ), ;, for, (, final, Hyperplane, <, S, >, hyperplane, :, hyperplanes, ), {, if, (, node, .]
[), {, if, (, node, ., insertCut, (, hyperplane, ), ), {, node, ., setAttribute, (, null, ), ;, node]
[), {, node, ., setAttribute, (, null, ), ;, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE]
[., insertCut, (, hyperplane, ), ), {, node, ., setAttribute, (, null, ), ;, node, ., getPlus, (, ), .]
[), ), {, node, ., setAttribute, (, null, ), ;, node, ., getPlus, (, ), ., setAttribute, (, Boolean, .]
[;, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, node, =, node, ., getMinus, (]
[., setAttribute, (, null, ), ;, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, node]
[), ;, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, node, =, node, ., getMinus]
[;, node, =, node, ., getMinus, (, ), ;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, }]
[., setAttribute, (, Boolean, ., FALSE, ), ;, node, =, node, ., getMinus, (, ), ;, node, ., setAttribute, (]
[., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, node, =, node, ., getMinus, (, ), ;]
[), ;, node, =, node, ., getMinus, (, ), ;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }]
[., FALSE, ), ;, node, =, node, ., getMinus, (, ), ;, node, ., setAttribute, (, Boolean, ., TRUE, )]
[=, node, ., getMinus, (, ), ;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, }, }, }]
[;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, }, }, }, public, abstract, AbstractRegion, <, S, ,]
[., getMinus, (, ), ;, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, }, }, }, public, abstract]
[;, }, }, }, }, public, abstract, AbstractRegion, <, S, ,, T, >, buildNew, (, BSPTree, <, S, >, newTree]
[., setAttribute, (, Boolean, ., TRUE, ), ;, }, }, }, }, public, abstract, AbstractRegion, <, S, ,, T, >]
[), ;, }, }, }, }, public, abstract, AbstractRegion, <, S, ,, T, >, buildNew, (, BSPTree, <, S, >]
[., TRUE, ), ;, }, }, }, }, public, abstract, AbstractRegion, <, S, ,, T, >, buildNew, (, BSPTree, <]
[;, Hyperplane, <, S, >, inserted, =, null, ;, while, (, (, inserted, ==, null, ), &&, iterator, ., hasNext]
[., iterator, (, ), ;, Hyperplane, <, S, >, inserted, =, null, ;, while, (, (, inserted, ==, null, )]
[;, while, (, (, inserted, ==, null, ), &&, iterator, ., hasNext, (, ), ), {, inserted, =, iterator, .]
[), {, inserted, =, iterator, ., next, (, ), ., getHyperplane, (, ), ;, if, (, !, node, ., insertCut]
[&&, iterator, ., hasNext, (, ), ), {, inserted, =, iterator, ., next, (, ), ., getHyperplane, (, ), ;]
[), &&, iterator, ., hasNext, (, ), ), {, inserted, =, iterator, ., next, (, ), ., getHyperplane, (, )]
[==, null, ), &&, iterator, ., hasNext, (, ), ), {, inserted, =, iterator, ., next, (, ), ., getHyperplane]
[), &&, iterator, ., hasNext, (, ), ), {, inserted, =, iterator, ., next, (, ), ., getHyperplane, (, )]
[), {, inserted, =, iterator, ., next, (, ), ., getHyperplane, (, ), ;, if, (, !, node, ., insertCut]
[., hasNext, (, ), ), {, inserted, =, iterator, ., next, (, ), ., getHyperplane, (, ), ;, if, (]
[=, iterator, ., next, (, ), ., getHyperplane, (, ), ;, if, (, !, node, ., insertCut, (, inserted, .]
[;, if, (, !, node, ., insertCut, (, inserted, ., copySelf, (, ), ), ), {, inserted, =, null, ;]
[., getHyperplane, (, ), ;, if, (, !, node, ., insertCut, (, inserted, ., copySelf, (, ), ), ), {]
[., next, (, ), ., getHyperplane, (, ), ;, if, (, !, node, ., insertCut, (, inserted, ., copySelf, (]
[), {, inserted, =, null, ;, }, }, if, (, !, iterator, ., hasNext, (, ), ), {, return, ;]
[), {, inserted, =, null, ;, }, }, if, (, !, iterator, ., hasNext, (, ), ), {, return, ;]
[., insertCut, (, inserted, ., copySelf, (, ), ), ), {, inserted, =, null, ;, }, }, if, (, !]
[), ), {, inserted, =, null, ;, }, }, if, (, !, iterator, ., hasNext, (, ), ), {, return]
[., copySelf, (, ), ), ), {, inserted, =, null, ;, }, }, if, (, !, iterator, ., hasNext, (]
[=, null, ;, }, }, if, (, !, iterator, ., hasNext, (, ), ), {, return, ;, }, final, ArrayList]
[;, }, }, if, (, !, iterator, ., hasNext, (, ), ), {, return, ;, }, final, ArrayList, <, SubHyperplane]
[), {, return, ;, }, final, ArrayList, <, SubHyperplane, <, S, >, >, plusList, =, new, ArrayList, <, SubHyperplane, <]
[), {, return, ;, }, final, ArrayList, <, SubHyperplane, <, S, >, >, plusList, =, new, ArrayList, <, SubHyperplane, <]
[., hasNext, (, ), ), {, return, ;, }, final, ArrayList, <, SubHyperplane, <, S, >, >, plusList, =, new]
[;, final, ArrayList, <, SubHyperplane, <, S, >, >, minusList, =, new, ArrayList, <, SubHyperplane, <, S, >, >, (]
[;, while, (, iterator, ., hasNext, (, ), ), {, final, SubHyperplane, <, S, >, other, =, iterator, ., next]
[), {, final, SubHyperplane, <, S, >, other, =, iterator, ., next, (, ), ;, switch, (, other, ., side]
[., hasNext, (, ), ), {, final, SubHyperplane, <, S, >, other, =, iterator, ., next, (, ), ;, switch]
[;, switch, (, other, ., side, (, inserted, ), ), {, case, PLUS, :, plusList, ., add, (, other, )]
[., next, (, ), ;, switch, (, other, ., side, (, inserted, ), ), {, case, PLUS, :, plusList, .]
[), {, case, PLUS, :, plusList, ., add, (, other, ), ;, break, ;, case, MINUS, :, minusList, ., add]
[., side, (, inserted, ), ), {, case, PLUS, :, plusList, ., add, (, other, ), ;, break, ;, case]
[), ), {, case, PLUS, :, plusList, ., add, (, other, ), ;, break, ;, case, MINUS, :, minusList, .]
[:, plusList, ., add, (, other, ), ;, break, ;, case, MINUS, :, minusList, ., add, (, other, ), ;]
[;, break, ;, case, MINUS, :, minusList, ., add, (, other, ), ;, break, ;, case, BOTH, :, final, SubHyperplane]
[., add, (, other, ), ;, break, ;, case, MINUS, :, minusList, ., add, (, other, ), ;, break, ;]
[), ;, break, ;, case, MINUS, :, minusList, ., add, (, other, ), ;, break, ;, case, BOTH, :, final]
[:, minusList, ., add, (, other, ), ;, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >]
[;, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, other, ., split, (, inserted]
[., add, (, other, ), ;, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =]
[), ;, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, other, ., split, (]
[:, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, other, ., split, (, inserted, ), ;, plusList, ., add]
[;, plusList, ., add, (, split, ., getPlus, (, ), ), ;, minusList, ., add, (, split, ., getMinus, (]
[., split, (, inserted, ), ;, plusList, ., add, (, split, ., getPlus, (, ), ), ;, minusList, ., add]
[), ;, plusList, ., add, (, split, ., getPlus, (, ), ), ;, minusList, ., add, (, split, ., getMinus]
[;, minusList, ., add, (, split, ., getMinus, (, ), ), ;, break, ;, default, :, }, }, insertCuts, (]
[., add, (, split, ., getPlus, (, ), ), ;, minusList, ., add, (, split, ., getMinus, (, ), )]
[), ;, minusList, ., add, (, split, ., getMinus, (, ), ), ;, break, ;, default, :, }, }, insertCuts]
[., getPlus, (, ), ), ;, minusList, ., add, (, split, ., getMinus, (, ), ), ;, break, ;, default]
[;, break, ;, default, :, }, }, insertCuts, (, node, ., getPlus, (, ), ,, plusList, ), ;, insertCuts, (]
[., add, (, split, ., getMinus, (, ), ), ;, break, ;, default, :, }, }, insertCuts, (, node, .]
[), ;, break, ;, default, :, }, }, insertCuts, (, node, ., getPlus, (, ), ,, plusList, ), ;, insertCuts]
[., getMinus, (, ), ), ;, break, ;, default, :, }, }, insertCuts, (, node, ., getPlus, (, ), ,]
[;, insertCuts, (, node, ., getMinus, (, ), ,, minusList, ), ;, }, public, AbstractRegion, <, S, ,, T, >]
[,, plusList, ), ;, insertCuts, (, node, ., getMinus, (, ), ,, minusList, ), ;, }, public, AbstractRegion, <, S]
[., getPlus, (, ), ,, plusList, ), ;, insertCuts, (, node, ., getMinus, (, ), ,, minusList, ), ;, }]
[), ;, insertCuts, (, node, ., getMinus, (, ), ,, minusList, ), ;, }, public, AbstractRegion, <, S, ,, T]
[;, }, public, AbstractRegion, <, S, ,, T, >, copySelf, (, ), {, return, buildNew, (, tree, ., copySelf, (]
[,, minusList, ), ;, }, public, AbstractRegion, <, S, ,, T, >, copySelf, (, ), {, return, buildNew, (, tree]
[., getMinus, (, ), ,, minusList, ), ;, }, public, AbstractRegion, <, S, ,, T, >, copySelf, (, ), {]
[), ;, }, public, AbstractRegion, <, S, ,, T, >, copySelf, (, ), {, return, buildNew, (, tree, ., copySelf]
[;, }, public, boolean, isEmpty, (, ), {, return, isEmpty, (, tree, ), ;, }, public, boolean, isEmpty, (, final]
[), ;, }, public, boolean, isEmpty, (, ), {, return, isEmpty, (, tree, ), ;, }, public, boolean, isEmpty, (]
[., copySelf, (, ), ), ;, }, public, boolean, isEmpty, (, ), {, return, isEmpty, (, tree, ), ;, }]
[;, }, public, boolean, isEmpty, (, final, BSPTree, <, S, >, node, ), {, if, (, node, ., getCut, (]
[), ;, }, public, boolean, isEmpty, (, final, BSPTree, <, S, >, node, ), {, if, (, node, ., getCut]
[), {, return, !, (, (, Boolean, ), node, ., getAttribute, (, ), ), ;, }, return, isEmpty, (, node]
[==, null, ), {, return, !, (, (, Boolean, ), node, ., getAttribute, (, ), ), ;, }, return, isEmpty]
[., getCut, (, ), ==, null, ), {, return, !, (, (, Boolean, ), node, ., getAttribute, (, ), )]
[), {, return, !, (, (, Boolean, ), node, ., getAttribute, (, ), ), ;, }, return, isEmpty, (, node]
[;, }, return, isEmpty, (, node, ., getMinus, (, ), ), &&, isEmpty, (, node, ., getPlus, (, ), )]
[;, }, return, isEmpty, (, node, ., getMinus, (, ), ), &&, isEmpty, (, node, ., getPlus, (, ), )]
[), ;, }, return, isEmpty, (, node, ., getMinus, (, ), ), &&, isEmpty, (, node, ., getPlus, (, )]
[), ;, }, return, isEmpty, (, node, ., getMinus, (, ), ), &&, isEmpty, (, node, ., getPlus, (, )]
[., getAttribute, (, ), ), ;, }, return, isEmpty, (, node, ., getMinus, (, ), ), &&, isEmpty, (, node]
[;, }, public, boolean, contains, (, final, Region, <, S, >, region, ), {, return, new, RegionFactory, <, S, >]
[&&, isEmpty, (, node, ., getPlus, (, ), ), ;, }, public, boolean, contains, (, final, Region, <, S, >]
[), &&, isEmpty, (, node, ., getPlus, (, ), ), ;, }, public, boolean, contains, (, final, Region, <, S]
[., getMinus, (, ), ), &&, isEmpty, (, node, ., getPlus, (, ), ), ;, }, public, boolean, contains, (]
[;, }, public, boolean, contains, (, final, Region, <, S, >, region, ), {, return, new, RegionFactory, <, S, >]
[), ;, }, public, boolean, contains, (, final, Region, <, S, >, region, ), {, return, new, RegionFactory, <, S]
[., getPlus, (, ), ), ;, }, public, boolean, contains, (, final, Region, <, S, >, region, ), {, return]
[;, }, public, Location, checkPoint, (, final, Vector, <, S, >, point, ), {, return, checkPoint, (, tree, ,, point]
[., isEmpty, (, ), ;, }, public, Location, checkPoint, (, final, Vector, <, S, >, point, ), {, return, checkPoint]
[., difference, (, region, ,, this, ), ., isEmpty, (, ), ;, }, public, Location, checkPoint, (, final, Vector, <]
[,, this, ), ., isEmpty, (, ), ;, }, public, Location, checkPoint, (, final, Vector, <, S, >, point, )]
[), ., isEmpty, (, ), ;, }, public, Location, checkPoint, (, final, Vector, <, S, >, point, ), {, return]
[;, }, protected, Location, checkPoint, (, final, BSPTree, <, S, >, node, ,, final, Vector, <, S, >, point, )]
[,, point, ), ;, }, protected, Location, checkPoint, (, final, BSPTree, <, S, >, node, ,, final, Vector, <, S]
[), ;, }, protected, Location, checkPoint, (, final, BSPTree, <, S, >, node, ,, final, Vector, <, S, >, point]
[;, if, (, cell, ., getCut, (, ), ==, null, ), {, return, (, (, Boolean, ), cell, ., getAttribute]
[., getCell, (, point, ), ;, if, (, cell, ., getCut, (, ), ==, null, ), {, return, (, (]
[), ;, if, (, cell, ., getCut, (, ), ==, null, ), {, return, (, (, Boolean, ), cell, .]
[), {, return, (, (, Boolean, ), cell, ., getAttribute, (, ), ), ?, Location, ., INSIDE, :, Location, .]
[==, null, ), {, return, (, (, Boolean, ), cell, ., getAttribute, (, ), ), ?, Location, ., INSIDE, :]
[., getCut, (, ), ==, null, ), {, return, (, (, Boolean, ), cell, ., getAttribute, (, ), ), ?]
[), {, return, (, (, Boolean, ), cell, ., getAttribute, (, ), ), ?, Location, ., INSIDE, :, Location, .]
[;, }, final, Location, minusCode, =, checkPoint, (, cell, ., getMinus, (, ), ,, point, ), ;, final, Location, plusCode]
[?, Location, ., INSIDE, :, Location, ., OUTSIDE, ;, }, final, Location, minusCode, =, checkPoint, (, cell, ., getMinus, (]
[), ?, Location, ., INSIDE, :, Location, ., OUTSIDE, ;, }, final, Location, minusCode, =, checkPoint, (, cell, ., getMinus]
[), ?, Location, ., INSIDE, :, Location, ., OUTSIDE, ;, }, final, Location, minusCode, =, checkPoint, (, cell, ., getMinus]
[., getAttribute, (, ), ), ?, Location, ., INSIDE, :, Location, ., OUTSIDE, ;, }, final, Location, minusCode, =, checkPoint]
[:, Location, ., OUTSIDE, ;, }, final, Location, minusCode, =, checkPoint, (, cell, ., getMinus, (, ), ,, point, )]
[., INSIDE, :, Location, ., OUTSIDE, ;, }, final, Location, minusCode, =, checkPoint, (, cell, ., getMinus, (, ), ,]
[;, }, final, Location, minusCode, =, checkPoint, (, cell, ., getMinus, (, ), ,, point, ), ;, final, Location, plusCode]
[., OUTSIDE, ;, }, final, Location, minusCode, =, checkPoint, (, cell, ., getMinus, (, ), ,, point, ), ;, final]
[;, final, Location, plusCode, =, checkPoint, (, cell, ., getPlus, (, ), ,, point, ), ;, return, (, minusCode, ==]
[,, point, ), ;, final, Location, plusCode, =, checkPoint, (, cell, ., getPlus, (, ), ,, point, ), ;, return]
[., getMinus, (, ), ,, point, ), ;, final, Location, plusCode, =, checkPoint, (, cell, ., getPlus, (, ), ,]
[), ;, final, Location, plusCode, =, checkPoint, (, cell, ., getPlus, (, ), ,, point, ), ;, return, (, minusCode]
[;, return, (, minusCode, ==, plusCode, ), ?, minusCode, :, Location, ., BOUNDARY, ;, }, public, BSPTree, <, S, >]
[,, point, ), ;, return, (, minusCode, ==, plusCode, ), ?, minusCode, :, Location, ., BOUNDARY, ;, }, public, BSPTree]
[., getPlus, (, ), ,, point, ), ;, return, (, minusCode, ==, plusCode, ), ?, minusCode, :, Location, ., BOUNDARY]
[), ;, return, (, minusCode, ==, plusCode, ), ?, minusCode, :, Location, ., BOUNDARY, ;, }, public, BSPTree, <, S]
[;, }, public, BSPTree, <, S, >, getTree, (, final, boolean, includeBoundaryAttributes, ), {, if, (, includeBoundaryAttributes, &&, (, tree]
[?, minusCode, :, Location, ., BOUNDARY, ;, }, public, BSPTree, <, S, >, getTree, (, final, boolean, includeBoundaryAttributes, ), {]
[), ?, minusCode, :, Location, ., BOUNDARY, ;, }, public, BSPTree, <, S, >, getTree, (, final, boolean, includeBoundaryAttributes, )]
[==, plusCode, ), ?, minusCode, :, Location, ., BOUNDARY, ;, }, public, BSPTree, <, S, >, getTree, (, final, boolean]
[), ?, minusCode, :, Location, ., BOUNDARY, ;, }, public, BSPTree, <, S, >, getTree, (, final, boolean, includeBoundaryAttributes, )]
[:, Location, ., BOUNDARY, ;, }, public, BSPTree, <, S, >, getTree, (, final, boolean, includeBoundaryAttributes, ), {, if, (]
[;, }, public, BSPTree, <, S, >, getTree, (, final, boolean, includeBoundaryAttributes, ), {, if, (, includeBoundaryAttributes, &&, (, tree]
[., BOUNDARY, ;, }, public, BSPTree, <, S, >, getTree, (, final, boolean, includeBoundaryAttributes, ), {, if, (, includeBoundaryAttributes, &&]
[), {, tree, ., visit, (, new, BoundaryBuilder, <, S, >, (, ), ), ;, }, return, tree, ;, }]
[&&, (, tree, ., getAttribute, (, ), ==, null, ), ), {, tree, ., visit, (, new, BoundaryBuilder, <, S]
[&&, (, tree, ., getCut, (, ), !=, null, ), &&, (, tree, ., getAttribute, (, ), ==, null, )]
[&&, (, tree, ., getAttribute, (, ), ==, null, ), ), {, tree, ., visit, (, new, BoundaryBuilder, <, S]
[), &&, (, tree, ., getAttribute, (, ), ==, null, ), ), {, tree, ., visit, (, new, BoundaryBuilder, <]
[!=, null, ), &&, (, tree, ., getAttribute, (, ), ==, null, ), ), {, tree, ., visit, (, new]
[., getCut, (, ), !=, null, ), &&, (, tree, ., getAttribute, (, ), ==, null, ), ), {, tree]
[), &&, (, tree, ., getAttribute, (, ), ==, null, ), ), {, tree, ., visit, (, new, BoundaryBuilder, <]
[), {, tree, ., visit, (, new, BoundaryBuilder, <, S, >, (, ), ), ;, }, return, tree, ;, }]
[), ), {, tree, ., visit, (, new, BoundaryBuilder, <, S, >, (, ), ), ;, }, return, tree, ;]
[==, null, ), ), {, tree, ., visit, (, new, BoundaryBuilder, <, S, >, (, ), ), ;, }, return]
[., getAttribute, (, ), ==, null, ), ), {, tree, ., visit, (, new, BoundaryBuilder, <, S, >, (, )]
[), ), {, tree, ., visit, (, new, BoundaryBuilder, <, S, >, (, ), ), ;, }, return, tree, ;]
[;, }, return, tree, ;, }, private, static, class, BoundaryBuilder, <, S, extends, Space, >, implements, BSPTreeVisitor, <, S, >]
[., visit, (, new, BoundaryBuilder, <, S, >, (, ), ), ;, }, return, tree, ;, }, private, static, class]
[), ;, }, return, tree, ;, }, private, static, class, BoundaryBuilder, <, S, extends, Space, >, implements, BSPTreeVisitor, <, S]
[;, }, private, static, class, BoundaryBuilder, <, S, extends, Space, >, implements, BSPTreeVisitor, <, S, >, {, public, Order, visitOrder]
[;, }, public, void, visitInternalNode, (, BSPTree, <, S, >, node, ), {, SubHyperplane, <, S, >, plusOutside, =, null]
[., PLUS_MINUS_SUB, ;, }, public, void, visitInternalNode, (, BSPTree, <, S, >, node, ), {, SubHyperplane, <, S, >, plusOutside]
[;, SubHyperplane, <, S, >, plusInside, =, null, ;, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, []
[;, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, [, ], plusChar, =, (, SubHyperplane, <, S, >]
[final, SubHyperplane, <, S, >, [, ], plusChar, =, (, SubHyperplane, <, S, >, [, ], ), Array, ., newInstance]
[), final, SubHyperplane, <, S, >, [, ], plusChar, =, (, SubHyperplane, <, S, >, [, ], ), Array, .]
[;, characterize, (, node, ., getPlus, (, ), ,, node, ., getCut, (, ), ., copySelf, (, ), ,, plusChar]
[;, characterize, (, node, ., getPlus, (, ), ,, node, ., getCut, (, ), ., copySelf, (, ), ,, plusChar]
[., newInstance, (, SubHyperplane, ., class, ,, 2, ), ;, characterize, (, node, ., getPlus, (, ), ,, node, .]
[,, 2, ), ;, characterize, (, node, ., getPlus, (, ), ,, node, ., getCut, (, ), ., copySelf, (]
[), ;, characterize, (, node, ., getPlus, (, ), ,, node, ., getCut, (, ), ., copySelf, (, ), ,]
[;, if, (, plusChar, [, 0, ], !=, null, &&, !, plusChar, [, 0, ], ., isEmpty, (, ), )]
[,, node, ., getCut, (, ), ., copySelf, (, ), ,, plusChar, ), ;, if, (, plusChar, [, 0, ]]
[., getPlus, (, ), ,, node, ., getCut, (, ), ., copySelf, (, ), ,, plusChar, ), ;, if, (]
[,, plusChar, ), ;, if, (, plusChar, [, 0, ], !=, null, &&, !, plusChar, [, 0, ], ., isEmpty]
[., copySelf, (, ), ,, plusChar, ), ;, if, (, plusChar, [, 0, ], !=, null, &&, !, plusChar, []
[., getCut, (, ), ., copySelf, (, ), ,, plusChar, ), ;, if, (, plusChar, [, 0, ], !=, null]
[), ;, if, (, plusChar, [, 0, ], !=, null, &&, !, plusChar, [, 0, ], ., isEmpty, (, )]
[), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, [, ], minusChar, =, (, SubHyperplane, <, S]
[&&, !, plusChar, [, 0, ], ., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <]
[!=, null, &&, !, plusChar, [, 0, ], ., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", ), final]
[[, 0, ], !=, null, &&, !, plusChar, [, 0, ], ., isEmpty, (, ), ), {, @, SuppressWarnings, (]
[], !=, null, &&, !, plusChar, [, 0, ], ., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", )]
[&&, !, plusChar, [, 0, ], ., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <]
[), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, [, ], minusChar, =, (, SubHyperplane, <, S]
[), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, [, ], minusChar, =, (, SubHyperplane, <, S]
[., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, [, ], minusChar, =]
[[, 0, ], ., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, []
[], ., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, [, ], minusChar]
[final, SubHyperplane, <, S, >, [, ], minusChar, =, (, SubHyperplane, <, S, >, [, ], ), Array, ., newInstance]
[), final, SubHyperplane, <, S, >, [, ], minusChar, =, (, SubHyperplane, <, S, >, [, ], ), Array, .]
[;, characterize, (, node, ., getMinus, (, ), ,, plusChar, [, 0, ], ,, minusChar, ), ;, if, (, minusChar]
[;, characterize, (, node, ., getMinus, (, ), ,, plusChar, [, 0, ], ,, minusChar, ), ;, if, (, minusChar]
[., newInstance, (, SubHyperplane, ., class, ,, 2, ), ;, characterize, (, node, ., getMinus, (, ), ,, plusChar, []
[,, 2, ), ;, characterize, (, node, ., getMinus, (, ), ,, plusChar, [, 0, ], ,, minusChar, ), ;]
[), ;, characterize, (, node, ., getMinus, (, ), ,, plusChar, [, 0, ], ,, minusChar, ), ;, if, (]
[;, if, (, minusChar, [, 1, ], !=, null, &&, !, minusChar, [, 1, ], ., isEmpty, (, ), )]
[,, plusChar, [, 0, ], ,, minusChar, ), ;, if, (, minusChar, [, 1, ], !=, null, &&, !, minusChar]
[., getMinus, (, ), ,, plusChar, [, 0, ], ,, minusChar, ), ;, if, (, minusChar, [, 1, ], !=]
[,, minusChar, ), ;, if, (, minusChar, [, 1, ], !=, null, &&, !, minusChar, [, 1, ], ., isEmpty]
[[, 0, ], ,, minusChar, ), ;, if, (, minusChar, [, 1, ], !=, null, &&, !, minusChar, [, 1]
[], ,, minusChar, ), ;, if, (, minusChar, [, 1, ], !=, null, &&, !, minusChar, [, 1, ], .]
[), ;, if, (, minusChar, [, 1, ], !=, null, &&, !, minusChar, [, 1, ], ., isEmpty, (, )]
[), {, plusOutside, =, minusChar, [, 1, ], ;, }, }, if, (, plusChar, [, 1, ], !=, null, &&]
[&&, !, minusChar, [, 1, ], ., isEmpty, (, ), ), {, plusOutside, =, minusChar, [, 1, ], ;, }]
[!=, null, &&, !, minusChar, [, 1, ], ., isEmpty, (, ), ), {, plusOutside, =, minusChar, [, 1, ]]
[[, 1, ], !=, null, &&, !, minusChar, [, 1, ], ., isEmpty, (, ), ), {, plusOutside, =, minusChar]
[], !=, null, &&, !, minusChar, [, 1, ], ., isEmpty, (, ), ), {, plusOutside, =, minusChar, [, 1]
[&&, !, minusChar, [, 1, ], ., isEmpty, (, ), ), {, plusOutside, =, minusChar, [, 1, ], ;, }]
[), {, plusOutside, =, minusChar, [, 1, ], ;, }, }, if, (, plusChar, [, 1, ], !=, null, &&]
[), {, plusOutside, =, minusChar, [, 1, ], ;, }, }, if, (, plusChar, [, 1, ], !=, null, &&]
[., isEmpty, (, ), ), {, plusOutside, =, minusChar, [, 1, ], ;, }, }, if, (, plusChar, [, 1]
[[, 1, ], ., isEmpty, (, ), ), {, plusOutside, =, minusChar, [, 1, ], ;, }, }, if, (]
[], ., isEmpty, (, ), ), {, plusOutside, =, minusChar, [, 1, ], ;, }, }, if, (, plusChar, []
[=, minusChar, [, 1, ], ;, }, }, if, (, plusChar, [, 1, ], !=, null, &&, !, plusChar, []
[;, }, }, if, (, plusChar, [, 1, ], !=, null, &&, !, plusChar, [, 1, ], ., isEmpty, (]
[[, 1, ], ;, }, }, if, (, plusChar, [, 1, ], !=, null, &&, !, plusChar, [, 1, ]]
[], ;, }, }, if, (, plusChar, [, 1, ], !=, null, &&, !, plusChar, [, 1, ], ., isEmpty]
[), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, [, ], minusChar, =, (, SubHyperplane, <, S]
[&&, !, plusChar, [, 1, ], ., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <]
[!=, null, &&, !, plusChar, [, 1, ], ., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", ), final]
[[, 1, ], !=, null, &&, !, plusChar, [, 1, ], ., isEmpty, (, ), ), {, @, SuppressWarnings, (]
[], !=, null, &&, !, plusChar, [, 1, ], ., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", )]
[&&, !, plusChar, [, 1, ], ., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <]
[), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, [, ], minusChar, =, (, SubHyperplane, <, S]
[), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, [, ], minusChar, =, (, SubHyperplane, <, S]
[., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, [, ], minusChar, =]
[[, 1, ], ., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, []
[], ., isEmpty, (, ), ), {, @, SuppressWarnings, (, "unchecked", ), final, SubHyperplane, <, S, >, [, ], minusChar]
[final, SubHyperplane, <, S, >, [, ], minusChar, =, (, SubHyperplane, <, S, >, [, ], ), Array, ., newInstance]
[), final, SubHyperplane, <, S, >, [, ], minusChar, =, (, SubHyperplane, <, S, >, [, ], ), Array, .]
[;, characterize, (, node, ., getMinus, (, ), ,, plusChar, [, 1, ], ,, minusChar, ), ;, if, (, minusChar]
[;, characterize, (, node, ., getMinus, (, ), ,, plusChar, [, 1, ], ,, minusChar, ), ;, if, (, minusChar]
[., newInstance, (, SubHyperplane, ., class, ,, 2, ), ;, characterize, (, node, ., getMinus, (, ), ,, plusChar, []
[,, 2, ), ;, characterize, (, node, ., getMinus, (, ), ,, plusChar, [, 1, ], ,, minusChar, ), ;]
[), ;, characterize, (, node, ., getMinus, (, ), ,, plusChar, [, 1, ], ,, minusChar, ), ;, if, (]
[;, if, (, minusChar, [, 0, ], !=, null, &&, !, minusChar, [, 0, ], ., isEmpty, (, ), )]
[,, plusChar, [, 1, ], ,, minusChar, ), ;, if, (, minusChar, [, 0, ], !=, null, &&, !, minusChar]
[., getMinus, (, ), ,, plusChar, [, 1, ], ,, minusChar, ), ;, if, (, minusChar, [, 0, ], !=]
[,, minusChar, ), ;, if, (, minusChar, [, 0, ], !=, null, &&, !, minusChar, [, 0, ], ., isEmpty]
[[, 1, ], ,, minusChar, ), ;, if, (, minusChar, [, 0, ], !=, null, &&, !, minusChar, [, 0]
[], ,, minusChar, ), ;, if, (, minusChar, [, 0, ], !=, null, &&, !, minusChar, [, 0, ], .]
[), ;, if, (, minusChar, [, 0, ], !=, null, &&, !, minusChar, [, 0, ], ., isEmpty, (, )]
[), {, plusInside, =, minusChar, [, 0, ], ;, }, }, node, ., setAttribute, (, new, BoundaryAttribute, <, S, >]
[&&, !, minusChar, [, 0, ], ., isEmpty, (, ), ), {, plusInside, =, minusChar, [, 0, ], ;, }]
[!=, null, &&, !, minusChar, [, 0, ], ., isEmpty, (, ), ), {, plusInside, =, minusChar, [, 0, ]]
[[, 0, ], !=, null, &&, !, minusChar, [, 0, ], ., isEmpty, (, ), ), {, plusInside, =, minusChar]
[], !=, null, &&, !, minusChar, [, 0, ], ., isEmpty, (, ), ), {, plusInside, =, minusChar, [, 0]
[&&, !, minusChar, [, 0, ], ., isEmpty, (, ), ), {, plusInside, =, minusChar, [, 0, ], ;, }]
[), {, plusInside, =, minusChar, [, 0, ], ;, }, }, node, ., setAttribute, (, new, BoundaryAttribute, <, S, >]
[), {, plusInside, =, minusChar, [, 0, ], ;, }, }, node, ., setAttribute, (, new, BoundaryAttribute, <, S, >]
[., isEmpty, (, ), ), {, plusInside, =, minusChar, [, 0, ], ;, }, }, node, ., setAttribute, (, new]
[[, 0, ], ., isEmpty, (, ), ), {, plusInside, =, minusChar, [, 0, ], ;, }, }, node, .]
[], ., isEmpty, (, ), ), {, plusInside, =, minusChar, [, 0, ], ;, }, }, node, ., setAttribute, (]
[=, minusChar, [, 0, ], ;, }, }, node, ., setAttribute, (, new, BoundaryAttribute, <, S, >, (, plusOutside, ,]
[;, }, }, node, ., setAttribute, (, new, BoundaryAttribute, <, S, >, (, plusOutside, ,, plusInside, ), ), ;, }]
[[, 0, ], ;, }, }, node, ., setAttribute, (, new, BoundaryAttribute, <, S, >, (, plusOutside, ,, plusInside, )]
[], ;, }, }, node, ., setAttribute, (, new, BoundaryAttribute, <, S, >, (, plusOutside, ,, plusInside, ), ), ;]
[;, }, public, void, visitLeafNode, (, BSPTree, <, S, >, node, ), {, }, private, void, characterize, (, final, BSPTree]
[., setAttribute, (, new, BoundaryAttribute, <, S, >, (, plusOutside, ,, plusInside, ), ), ;, }, public, void, visitLeafNode, (]
[), ;, }, public, void, visitLeafNode, (, BSPTree, <, S, >, node, ), {, }, private, void, characterize, (, final]
[,, plusInside, ), ), ;, }, public, void, visitLeafNode, (, BSPTree, <, S, >, node, ), {, }, private, void]
[), ), ;, }, public, void, visitLeafNode, (, BSPTree, <, S, >, node, ), {, }, private, void, characterize, (]
[), {, final, boolean, inside, =, (, Boolean, ), node, ., getAttribute, (, ), ;, if, (, inside, ), {]
[==, null, ), {, final, boolean, inside, =, (, Boolean, ), node, ., getAttribute, (, ), ;, if, (, inside]
[., getCut, (, ), ==, null, ), {, final, boolean, inside, =, (, Boolean, ), node, ., getAttribute, (, )]
[), {, final, boolean, inside, =, (, Boolean, ), node, ., getAttribute, (, ), ;, if, (, inside, ), {]
[;, if, (, inside, ), {, if, (, characterization, [, 1, ], ==, null, ), {, characterization, [, 1, ]]
[;, if, (, inside, ), {, if, (, characterization, [, 1, ], ==, null, ), {, characterization, [, 1, ]]
[., getAttribute, (, ), ;, if, (, inside, ), {, if, (, characterization, [, 1, ], ==, null, ), {]
[), {, if, (, characterization, [, 1, ], ==, null, ), {, characterization, [, 1, ], =, sub, ;, }]
[), {, characterization, [, 1, ], =, sub, ;, }, else, {, characterization, [, 1, ], =, characterization, [, 1]
[==, null, ), {, characterization, [, 1, ], =, sub, ;, }, else, {, characterization, [, 1, ], =, characterization]
[[, 1, ], ==, null, ), {, characterization, [, 1, ], =, sub, ;, }, else, {, characterization, [, 1]
[], ==, null, ), {, characterization, [, 1, ], =, sub, ;, }, else, {, characterization, [, 1, ], =]
[), {, characterization, [, 1, ], =, sub, ;, }, else, {, characterization, [, 1, ], =, characterization, [, 1]
[=, sub, ;, }, else, {, characterization, [, 1, ], =, characterization, [, 1, ], ., reunite, (, sub, )]
[[, 1, ], =, sub, ;, }, else, {, characterization, [, 1, ], =, characterization, [, 1, ], ., reunite]
[], =, sub, ;, }, else, {, characterization, [, 1, ], =, characterization, [, 1, ], ., reunite, (, sub]
[;, }, else, {, characterization, [, 1, ], =, characterization, [, 1, ], ., reunite, (, sub, ), ;, }]
[=, characterization, [, 1, ], ., reunite, (, sub, ), ;, }, }, else, {, if, (, characterization, [, 0]
[[, 1, ], =, characterization, [, 1, ], ., reunite, (, sub, ), ;, }, }, else, {, if, (]
[], =, characterization, [, 1, ], ., reunite, (, sub, ), ;, }, }, else, {, if, (, characterization, []
[;, }, }, else, {, if, (, characterization, [, 0, ], ==, null, ), {, characterization, [, 0, ], =]
[., reunite, (, sub, ), ;, }, }, else, {, if, (, characterization, [, 0, ], ==, null, ), {]
[[, 1, ], ., reunite, (, sub, ), ;, }, }, else, {, if, (, characterization, [, 0, ], ==]
[], ., reunite, (, sub, ), ;, }, }, else, {, if, (, characterization, [, 0, ], ==, null, )]
[), ;, }, }, else, {, if, (, characterization, [, 0, ], ==, null, ), {, characterization, [, 0, ]]
[), {, characterization, [, 0, ], =, sub, ;, }, else, {, characterization, [, 0, ], =, characterization, [, 0]
[==, null, ), {, characterization, [, 0, ], =, sub, ;, }, else, {, characterization, [, 0, ], =, characterization]
[[, 0, ], ==, null, ), {, characterization, [, 0, ], =, sub, ;, }, else, {, characterization, [, 0]
[], ==, null, ), {, characterization, [, 0, ], =, sub, ;, }, else, {, characterization, [, 0, ], =]
[), {, characterization, [, 0, ], =, sub, ;, }, else, {, characterization, [, 0, ], =, characterization, [, 0]
[=, sub, ;, }, else, {, characterization, [, 0, ], =, characterization, [, 0, ], ., reunite, (, sub, )]
[[, 0, ], =, sub, ;, }, else, {, characterization, [, 0, ], =, characterization, [, 0, ], ., reunite]
[], =, sub, ;, }, else, {, characterization, [, 0, ], =, characterization, [, 0, ], ., reunite, (, sub]
[;, }, else, {, characterization, [, 0, ], =, characterization, [, 0, ], ., reunite, (, sub, ), ;, }]
[=, characterization, [, 0, ], ., reunite, (, sub, ), ;, }, }, }, else, {, final, Hyperplane, <, S]
[[, 0, ], =, characterization, [, 0, ], ., reunite, (, sub, ), ;, }, }, }, else, {, final]
[], =, characterization, [, 0, ], ., reunite, (, sub, ), ;, }, }, }, else, {, final, Hyperplane, <]
[;, }, }, }, else, {, final, Hyperplane, <, S, >, hyperplane, =, node, ., getCut, (, ), ., getHyperplane]
[., reunite, (, sub, ), ;, }, }, }, else, {, final, Hyperplane, <, S, >, hyperplane, =, node, .]
[[, 0, ], ., reunite, (, sub, ), ;, }, }, }, else, {, final, Hyperplane, <, S, >, hyperplane]
[], ., reunite, (, sub, ), ;, }, }, }, else, {, final, Hyperplane, <, S, >, hyperplane, =, node]
[), ;, }, }, }, else, {, final, Hyperplane, <, S, >, hyperplane, =, node, ., getCut, (, ), .]
[;, switch, (, sub, ., side, (, hyperplane, ), ), {, case, PLUS, :, characterize, (, node, ., getPlus, (]
[., getHyperplane, (, ), ;, switch, (, sub, ., side, (, hyperplane, ), ), {, case, PLUS, :, characterize, (]
[., getCut, (, ), ., getHyperplane, (, ), ;, switch, (, sub, ., side, (, hyperplane, ), ), {, case]
[), {, case, PLUS, :, characterize, (, node, ., getPlus, (, ), ,, sub, ,, characterization, ), ;, break, ;]
[., side, (, hyperplane, ), ), {, case, PLUS, :, characterize, (, node, ., getPlus, (, ), ,, sub, ,]
[), ), {, case, PLUS, :, characterize, (, node, ., getPlus, (, ), ,, sub, ,, characterization, ), ;, break]
[:, characterize, (, node, ., getPlus, (, ), ,, sub, ,, characterization, ), ;, break, ;, case, MINUS, :, characterize]
[;, break, ;, case, MINUS, :, characterize, (, node, ., getMinus, (, ), ,, sub, ,, characterization, ), ;, break]
[,, sub, ,, characterization, ), ;, break, ;, case, MINUS, :, characterize, (, node, ., getMinus, (, ), ,, sub]
[., getPlus, (, ), ,, sub, ,, characterization, ), ;, break, ;, case, MINUS, :, characterize, (, node, ., getMinus]
[,, characterization, ), ;, break, ;, case, MINUS, :, characterize, (, node, ., getMinus, (, ), ,, sub, ,, characterization]
[), ;, break, ;, case, MINUS, :, characterize, (, node, ., getMinus, (, ), ,, sub, ,, characterization, ), ;]
[:, characterize, (, node, ., getMinus, (, ), ,, sub, ,, characterization, ), ;, break, ;, case, BOTH, :, final]
[;, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, sub, ., split, (, hyperplane]
[,, sub, ,, characterization, ), ;, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =]
[., getMinus, (, ), ,, sub, ,, characterization, ), ;, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <]
[,, characterization, ), ;, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, sub, .]
[), ;, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, sub, ., split, (]
[:, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, sub, ., split, (, hyperplane, ), ;, characterize, (, node]
[;, characterize, (, node, ., getPlus, (, ), ,, split, ., getPlus, (, ), ,, characterization, ), ;, characterize, (]
[., split, (, hyperplane, ), ;, characterize, (, node, ., getPlus, (, ), ,, split, ., getPlus, (, ), ,]
[), ;, characterize, (, node, ., getPlus, (, ), ,, split, ., getPlus, (, ), ,, characterization, ), ;, characterize]
[;, characterize, (, node, ., getMinus, (, ), ,, split, ., getMinus, (, ), ,, characterization, ), ;, break, ;]
[,, split, ., getPlus, (, ), ,, characterization, ), ;, characterize, (, node, ., getMinus, (, ), ,, split, .]
[., getPlus, (, ), ,, split, ., getPlus, (, ), ,, characterization, ), ;, characterize, (, node, ., getMinus, (]
[,, characterization, ), ;, characterize, (, node, ., getMinus, (, ), ,, split, ., getMinus, (, ), ,, characterization, )]
[., getPlus, (, ), ,, characterization, ), ;, characterize, (, node, ., getMinus, (, ), ,, split, ., getMinus, (]
[), ;, characterize, (, node, ., getMinus, (, ), ,, split, ., getMinus, (, ), ,, characterization, ), ;, break]
[;, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, }, }, public, double, getBoundarySize, (, )]
[,, split, ., getMinus, (, ), ,, characterization, ), ;, break, ;, default, :, throw, new, MathInternalError, (, ), ;]
[., getMinus, (, ), ,, split, ., getMinus, (, ), ,, characterization, ), ;, break, ;, default, :, throw, new]
[,, characterization, ), ;, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, }, }, public, double]
[., getMinus, (, ), ,, characterization, ), ;, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }]
[), ;, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, }, }, public, double, getBoundarySize, (]
[;, }, }, }, }, public, double, getBoundarySize, (, ), {, final, BoundarySizeVisitor, <, S, >, visitor, =, new, BoundarySizeVisitor]
[;, getTree, (, true, ), ., visit, (, visitor, ), ;, return, visitor, ., getSize, (, ), ;, }, public]
[;, return, visitor, ., getSize, (, ), ;, }, public, double, getSize, (, ), {, if, (, barycenter, ==, null]
[., visit, (, visitor, ), ;, return, visitor, ., getSize, (, ), ;, }, public, double, getSize, (, ), {]
[), ., visit, (, visitor, ), ;, return, visitor, ., getSize, (, ), ;, }, public, double, getSize, (, )]
[), ;, return, visitor, ., getSize, (, ), ;, }, public, double, getSize, (, ), {, if, (, barycenter, ==]
[;, }, public, double, getSize, (, ), {, if, (, barycenter, ==, null, ), {, computeGeometricalProperties, (, ), ;, }]
[., getSize, (, ), ;, }, public, double, getSize, (, ), {, if, (, barycenter, ==, null, ), {, computeGeometricalProperties]
[), {, computeGeometricalProperties, (, ), ;, }, return, size, ;, }, protected, void, setSize, (, final, double, size, ), {]
[==, null, ), {, computeGeometricalProperties, (, ), ;, }, return, size, ;, }, protected, void, setSize, (, final, double, size]
[), {, computeGeometricalProperties, (, ), ;, }, return, size, ;, }, protected, void, setSize, (, final, double, size, ), {]
[;, }, return, size, ;, }, protected, void, setSize, (, final, double, size, ), {, this, ., size, =, size]
[;, }, protected, void, setSize, (, final, double, size, ), {, this, ., size, =, size, ;, }, public, Vector]
[=, size, ;, }, public, Vector, <, S, >, getBarycenter, (, ), {, if, (, barycenter, ==, null, ), {]
[., size, =, size, ;, }, public, Vector, <, S, >, getBarycenter, (, ), {, if, (, barycenter, ==, null]
[;, }, public, Vector, <, S, >, getBarycenter, (, ), {, if, (, barycenter, ==, null, ), {, computeGeometricalProperties, (]
[), {, computeGeometricalProperties, (, ), ;, }, return, barycenter, ;, }, protected, void, setBarycenter, (, final, Vector, <, S, >]
[==, null, ), {, computeGeometricalProperties, (, ), ;, }, return, barycenter, ;, }, protected, void, setBarycenter, (, final, Vector, <]
[), {, computeGeometricalProperties, (, ), ;, }, return, barycenter, ;, }, protected, void, setBarycenter, (, final, Vector, <, S, >]
[;, }, return, barycenter, ;, }, protected, void, setBarycenter, (, final, Vector, <, S, >, barycenter, ), {, this, .]
[;, }, protected, void, setBarycenter, (, final, Vector, <, S, >, barycenter, ), {, this, ., barycenter, =, barycenter, ;]
[=, barycenter, ;, }, protected, abstract, void, computeGeometricalProperties, (, ), ;, public, Side, side, (, final, Hyperplane, <, S, >]
[., barycenter, =, barycenter, ;, }, protected, abstract, void, computeGeometricalProperties, (, ), ;, public, Side, side, (, final, Hyperplane, <]
[;, }, protected, abstract, void, computeGeometricalProperties, (, ), ;, public, Side, side, (, final, Hyperplane, <, S, >, hyperplane, )]
[;, recurseSides, (, tree, ,, hyperplane, ., wholeHyperplane, (, ), ,, sides, ), ;, return, sides, ., plusFound, (, )]
[;, return, sides, ., plusFound, (, ), ?, (, sides, ., minusFound, (, ), ?, Side, ., BOTH, :, Side]
[,, hyperplane, ., wholeHyperplane, (, ), ,, sides, ), ;, return, sides, ., plusFound, (, ), ?, (, sides, .]
[,, sides, ), ;, return, sides, ., plusFound, (, ), ?, (, sides, ., minusFound, (, ), ?, Side, .]
[., wholeHyperplane, (, ), ,, sides, ), ;, return, sides, ., plusFound, (, ), ?, (, sides, ., minusFound, (]
[), ;, return, sides, ., plusFound, (, ), ?, (, sides, ., minusFound, (, ), ?, Side, ., BOTH, :]
[;, }, private, void, recurseSides, (, final, BSPTree, <, S, >, node, ,, final, SubHyperplane, <, S, >, sub, ,]
[?, (, sides, ., minusFound, (, ), ?, Side, ., BOTH, :, Side, ., PLUS, ), :, (, sides, .]
[., plusFound, (, ), ?, (, sides, ., minusFound, (, ), ?, Side, ., BOTH, :, Side, ., PLUS, )]
[:, (, sides, ., minusFound, (, ), ?, Side, ., MINUS, :, Side, ., HYPER, ), ;, }, private, void]
[), :, (, sides, ., minusFound, (, ), ?, Side, ., MINUS, :, Side, ., HYPER, ), ;, }, private]
[?, Side, ., BOTH, :, Side, ., PLUS, ), :, (, sides, ., minusFound, (, ), ?, Side, ., MINUS]
[., minusFound, (, ), ?, Side, ., BOTH, :, Side, ., PLUS, ), :, (, sides, ., minusFound, (, )]
[:, Side, ., PLUS, ), :, (, sides, ., minusFound, (, ), ?, Side, ., MINUS, :, Side, ., HYPER]
[., BOTH, :, Side, ., PLUS, ), :, (, sides, ., minusFound, (, ), ?, Side, ., MINUS, :, Side]
[), :, (, sides, ., minusFound, (, ), ?, Side, ., MINUS, :, Side, ., HYPER, ), ;, }, private]
[., PLUS, ), :, (, sides, ., minusFound, (, ), ?, Side, ., MINUS, :, Side, ., HYPER, ), ;]
[;, }, private, void, recurseSides, (, final, BSPTree, <, S, >, node, ,, final, SubHyperplane, <, S, >, sub, ,]
[), ;, }, private, void, recurseSides, (, final, BSPTree, <, S, >, node, ,, final, SubHyperplane, <, S, >, sub]
[?, Side, ., MINUS, :, Side, ., HYPER, ), ;, }, private, void, recurseSides, (, final, BSPTree, <, S, >]
[., minusFound, (, ), ?, Side, ., MINUS, :, Side, ., HYPER, ), ;, }, private, void, recurseSides, (, final]
[:, Side, ., HYPER, ), ;, }, private, void, recurseSides, (, final, BSPTree, <, S, >, node, ,, final, SubHyperplane]
[., MINUS, :, Side, ., HYPER, ), ;, }, private, void, recurseSides, (, final, BSPTree, <, S, >, node, ,]
[), ;, }, private, void, recurseSides, (, final, BSPTree, <, S, >, node, ,, final, SubHyperplane, <, S, >, sub]
[., HYPER, ), ;, }, private, void, recurseSides, (, final, BSPTree, <, S, >, node, ,, final, SubHyperplane, <, S]
[), {, if, (, (, Boolean, ), node, ., getAttribute, (, ), ), {, sides, ., rememberPlusFound, (, ), ;]
[==, null, ), {, if, (, (, Boolean, ), node, ., getAttribute, (, ), ), {, sides, ., rememberPlusFound, (]
[., getCut, (, ), ==, null, ), {, if, (, (, Boolean, ), node, ., getAttribute, (, ), ), {]
[), {, if, (, (, Boolean, ), node, ., getAttribute, (, ), ), {, sides, ., rememberPlusFound, (, ), ;]
[), {, sides, ., rememberPlusFound, (, ), ;, sides, ., rememberMinusFound, (, ), ;, }, return, ;, }, final, Hyperplane]
[), {, sides, ., rememberPlusFound, (, ), ;, sides, ., rememberMinusFound, (, ), ;, }, return, ;, }, final, Hyperplane]
[., getAttribute, (, ), ), {, sides, ., rememberPlusFound, (, ), ;, sides, ., rememberMinusFound, (, ), ;, }, return]
[;, sides, ., rememberMinusFound, (, ), ;, }, return, ;, }, final, Hyperplane, <, S, >, hyperplane, =, node, .]
[., rememberPlusFound, (, ), ;, sides, ., rememberMinusFound, (, ), ;, }, return, ;, }, final, Hyperplane, <, S, >]
[;, }, return, ;, }, final, Hyperplane, <, S, >, hyperplane, =, node, ., getCut, (, ), ., getHyperplane, (]
[., rememberMinusFound, (, ), ;, }, return, ;, }, final, Hyperplane, <, S, >, hyperplane, =, node, ., getCut, (]
[;, switch, (, sub, ., side, (, hyperplane, ), ), {, case, PLUS, :, if, (, node, ., getCut, (]
[., getHyperplane, (, ), ;, switch, (, sub, ., side, (, hyperplane, ), ), {, case, PLUS, :, if, (]
[., getCut, (, ), ., getHyperplane, (, ), ;, switch, (, sub, ., side, (, hyperplane, ), ), {, case]
[), {, case, PLUS, :, if, (, node, ., getCut, (, ), ., side, (, sub, ., getHyperplane, (, )]
[., side, (, hyperplane, ), ), {, case, PLUS, :, if, (, node, ., getCut, (, ), ., side, (]
[), ), {, case, PLUS, :, if, (, node, ., getCut, (, ), ., side, (, sub, ., getHyperplane, (]
[:, if, (, node, ., getCut, (, ), ., side, (, sub, ., getHyperplane, (, ), ), ==, Side, .]
[), {, if, (, !, isEmpty, (, node, ., getMinus, (, ), ), ), {, sides, ., rememberPlusFound, (, )]
[==, Side, ., PLUS, ), {, if, (, !, isEmpty, (, node, ., getMinus, (, ), ), ), {, sides]
[., side, (, sub, ., getHyperplane, (, ), ), ==, Side, ., PLUS, ), {, if, (, !, isEmpty, (]
[., getCut, (, ), ., side, (, sub, ., getHyperplane, (, ), ), ==, Side, ., PLUS, ), {, if]
[), ==, Side, ., PLUS, ), {, if, (, !, isEmpty, (, node, ., getMinus, (, ), ), ), {]
[., getHyperplane, (, ), ), ==, Side, ., PLUS, ), {, if, (, !, isEmpty, (, node, ., getMinus, (]
[), {, if, (, !, isEmpty, (, node, ., getMinus, (, ), ), ), {, sides, ., rememberPlusFound, (, )]
[., PLUS, ), {, if, (, !, isEmpty, (, node, ., getMinus, (, ), ), ), {, sides, ., rememberPlusFound]
[), {, sides, ., rememberPlusFound, (, ), ;, }, }, else, {, if, (, !, isEmpty, (, node, ., getMinus]
[), {, sides, ., rememberPlusFound, (, ), ;, }, }, else, {, if, (, !, isEmpty, (, node, ., getMinus]
[), ), {, sides, ., rememberPlusFound, (, ), ;, }, }, else, {, if, (, !, isEmpty, (, node, .]
[., getMinus, (, ), ), ), {, sides, ., rememberPlusFound, (, ), ;, }, }, else, {, if, (, !]
[;, }, }, else, {, if, (, !, isEmpty, (, node, ., getMinus, (, ), ), ), {, sides, .]
[., rememberPlusFound, (, ), ;, }, }, else, {, if, (, !, isEmpty, (, node, ., getMinus, (, ), )]
[), {, sides, ., rememberMinusFound, (, ), ;, }, }, if, (, !, (, sides, ., plusFound, (, ), &&]
[), {, sides, ., rememberMinusFound, (, ), ;, }, }, if, (, !, (, sides, ., plusFound, (, ), &&]
[), ), {, sides, ., rememberMinusFound, (, ), ;, }, }, if, (, !, (, sides, ., plusFound, (, )]
[., getMinus, (, ), ), ), {, sides, ., rememberMinusFound, (, ), ;, }, }, if, (, !, (, sides]
[;, }, }, if, (, !, (, sides, ., plusFound, (, ), &&, sides, ., minusFound, (, ), ), )]
[., rememberMinusFound, (, ), ;, }, }, if, (, !, (, sides, ., plusFound, (, ), &&, sides, ., minusFound]
[), {, recurseSides, (, node, ., getPlus, (, ), ,, sub, ,, sides, ), ;, }, break, ;, case, MINUS]
[), {, recurseSides, (, node, ., getPlus, (, ), ,, sub, ,, sides, ), ;, }, break, ;, case, MINUS]
[), ), {, recurseSides, (, node, ., getPlus, (, ), ,, sub, ,, sides, ), ;, }, break, ;, case]
[&&, sides, ., minusFound, (, ), ), ), {, recurseSides, (, node, ., getPlus, (, ), ,, sub, ,, sides]
[., plusFound, (, ), &&, sides, ., minusFound, (, ), ), ), {, recurseSides, (, node, ., getPlus, (, )]
[), ), {, recurseSides, (, node, ., getPlus, (, ), ,, sub, ,, sides, ), ;, }, break, ;, case]
[., minusFound, (, ), ), ), {, recurseSides, (, node, ., getPlus, (, ), ,, sub, ,, sides, ), ;]
[;, }, break, ;, case, MINUS, :, if, (, node, ., getCut, (, ), ., side, (, sub, ., getHyperplane]
[,, sub, ,, sides, ), ;, }, break, ;, case, MINUS, :, if, (, node, ., getCut, (, ), .]
[., getPlus, (, ), ,, sub, ,, sides, ), ;, }, break, ;, case, MINUS, :, if, (, node, .]
[,, sides, ), ;, }, break, ;, case, MINUS, :, if, (, node, ., getCut, (, ), ., side, (]
[), ;, }, break, ;, case, MINUS, :, if, (, node, ., getCut, (, ), ., side, (, sub, .]
[:, if, (, node, ., getCut, (, ), ., side, (, sub, ., getHyperplane, (, ), ), ==, Side, .]
[), {, if, (, !, isEmpty, (, node, ., getPlus, (, ), ), ), {, sides, ., rememberPlusFound, (, )]
[==, Side, ., PLUS, ), {, if, (, !, isEmpty, (, node, ., getPlus, (, ), ), ), {, sides]
[., side, (, sub, ., getHyperplane, (, ), ), ==, Side, ., PLUS, ), {, if, (, !, isEmpty, (]
[., getCut, (, ), ., side, (, sub, ., getHyperplane, (, ), ), ==, Side, ., PLUS, ), {, if]
[), ==, Side, ., PLUS, ), {, if, (, !, isEmpty, (, node, ., getPlus, (, ), ), ), {]
[., getHyperplane, (, ), ), ==, Side, ., PLUS, ), {, if, (, !, isEmpty, (, node, ., getPlus, (]
[), {, if, (, !, isEmpty, (, node, ., getPlus, (, ), ), ), {, sides, ., rememberPlusFound, (, )]
[., PLUS, ), {, if, (, !, isEmpty, (, node, ., getPlus, (, ), ), ), {, sides, ., rememberPlusFound]
[), {, sides, ., rememberPlusFound, (, ), ;, }, }, else, {, if, (, !, isEmpty, (, node, ., getPlus]
[), {, sides, ., rememberPlusFound, (, ), ;, }, }, else, {, if, (, !, isEmpty, (, node, ., getPlus]
[), ), {, sides, ., rememberPlusFound, (, ), ;, }, }, else, {, if, (, !, isEmpty, (, node, .]
[., getPlus, (, ), ), ), {, sides, ., rememberPlusFound, (, ), ;, }, }, else, {, if, (, !]
[;, }, }, else, {, if, (, !, isEmpty, (, node, ., getPlus, (, ), ), ), {, sides, .]
[., rememberPlusFound, (, ), ;, }, }, else, {, if, (, !, isEmpty, (, node, ., getPlus, (, ), )]
[), {, sides, ., rememberMinusFound, (, ), ;, }, }, if, (, !, (, sides, ., plusFound, (, ), &&]
[), {, sides, ., rememberMinusFound, (, ), ;, }, }, if, (, !, (, sides, ., plusFound, (, ), &&]
[), ), {, sides, ., rememberMinusFound, (, ), ;, }, }, if, (, !, (, sides, ., plusFound, (, )]
[., getPlus, (, ), ), ), {, sides, ., rememberMinusFound, (, ), ;, }, }, if, (, !, (, sides]
[;, }, }, if, (, !, (, sides, ., plusFound, (, ), &&, sides, ., minusFound, (, ), ), )]
[., rememberMinusFound, (, ), ;, }, }, if, (, !, (, sides, ., plusFound, (, ), &&, sides, ., minusFound]
[), {, recurseSides, (, node, ., getMinus, (, ), ,, sub, ,, sides, ), ;, }, break, ;, case, BOTH]
[), {, recurseSides, (, node, ., getMinus, (, ), ,, sub, ,, sides, ), ;, }, break, ;, case, BOTH]
[), ), {, recurseSides, (, node, ., getMinus, (, ), ,, sub, ,, sides, ), ;, }, break, ;, case]
[&&, sides, ., minusFound, (, ), ), ), {, recurseSides, (, node, ., getMinus, (, ), ,, sub, ,, sides]
[., plusFound, (, ), &&, sides, ., minusFound, (, ), ), ), {, recurseSides, (, node, ., getMinus, (, )]
[), ), {, recurseSides, (, node, ., getMinus, (, ), ,, sub, ,, sides, ), ;, }, break, ;, case]
[., minusFound, (, ), ), ), {, recurseSides, (, node, ., getMinus, (, ), ,, sub, ,, sides, ), ;]
[;, }, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, sub, ., split, (]
[,, sub, ,, sides, ), ;, }, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split]
[., getMinus, (, ), ,, sub, ,, sides, ), ;, }, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane]
[,, sides, ), ;, }, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, sub]
[), ;, }, break, ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, sub, ., split]
[:, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, sub, ., split, (, hyperplane, ), ;, recurseSides, (, node]
[;, recurseSides, (, node, ., getPlus, (, ), ,, split, ., getPlus, (, ), ,, sides, ), ;, if, (]
[., split, (, hyperplane, ), ;, recurseSides, (, node, ., getPlus, (, ), ,, split, ., getPlus, (, ), ,]
[), ;, recurseSides, (, node, ., getPlus, (, ), ,, split, ., getPlus, (, ), ,, sides, ), ;, if]
[;, if, (, !, (, sides, ., plusFound, (, ), &&, sides, ., minusFound, (, ), ), ), {, recurseSides]
[,, split, ., getPlus, (, ), ,, sides, ), ;, if, (, !, (, sides, ., plusFound, (, ), &&]
[., getPlus, (, ), ,, split, ., getPlus, (, ), ,, sides, ), ;, if, (, !, (, sides, .]
[,, sides, ), ;, if, (, !, (, sides, ., plusFound, (, ), &&, sides, ., minusFound, (, ), )]
[., getPlus, (, ), ,, sides, ), ;, if, (, !, (, sides, ., plusFound, (, ), &&, sides, .]
[), ;, if, (, !, (, sides, ., plusFound, (, ), &&, sides, ., minusFound, (, ), ), ), {]
[), {, recurseSides, (, node, ., getMinus, (, ), ,, split, ., getMinus, (, ), ,, sides, ), ;, }]
[), {, recurseSides, (, node, ., getMinus, (, ), ,, split, ., getMinus, (, ), ,, sides, ), ;, }]
[), ), {, recurseSides, (, node, ., getMinus, (, ), ,, split, ., getMinus, (, ), ,, sides, ), ;]
[&&, sides, ., minusFound, (, ), ), ), {, recurseSides, (, node, ., getMinus, (, ), ,, split, ., getMinus]
[., plusFound, (, ), &&, sides, ., minusFound, (, ), ), ), {, recurseSides, (, node, ., getMinus, (, )]
[), ), {, recurseSides, (, node, ., getMinus, (, ), ,, split, ., getMinus, (, ), ,, sides, ), ;]
[., minusFound, (, ), ), ), {, recurseSides, (, node, ., getMinus, (, ), ,, split, ., getMinus, (, )]
[;, }, break, ;, default, :, if, (, node, ., getCut, (, ), ., getHyperplane, (, ), ., sameOrientationAs, (]
[,, split, ., getMinus, (, ), ,, sides, ), ;, }, break, ;, default, :, if, (, node, ., getCut]
[., getMinus, (, ), ,, split, ., getMinus, (, ), ,, sides, ), ;, }, break, ;, default, :, if]
[,, sides, ), ;, }, break, ;, default, :, if, (, node, ., getCut, (, ), ., getHyperplane, (, )]
[., getMinus, (, ), ,, sides, ), ;, }, break, ;, default, :, if, (, node, ., getCut, (, )]
[), ;, }, break, ;, default, :, if, (, node, ., getCut, (, ), ., getHyperplane, (, ), ., sameOrientationAs]
[), {, if, (, (, node, ., getPlus, (, ), ., getCut, (, ), !=, null, ), ||, (, (]
[., sameOrientationAs, (, sub, ., getHyperplane, (, ), ), ), {, if, (, (, node, ., getPlus, (, ), .]
[., getHyperplane, (, ), ., sameOrientationAs, (, sub, ., getHyperplane, (, ), ), ), {, if, (, (, node, .]
[., getCut, (, ), ., getHyperplane, (, ), ., sameOrientationAs, (, sub, ., getHyperplane, (, ), ), ), {, if]
[), ), {, if, (, (, node, ., getPlus, (, ), ., getCut, (, ), !=, null, ), ||, (]
[., getHyperplane, (, ), ), ), {, if, (, (, node, ., getPlus, (, ), ., getCut, (, ), !=]
[), {, sides, ., rememberPlusFound, (, ), ;, }, if, (, (, node, ., getMinus, (, ), ., getCut, (]
[||, (, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, ), ), ), {, sides, ., rememberPlusFound]
[), ||, (, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, ), ), ), {, sides, .]
[!=, null, ), ||, (, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, ), ), ), {]
[., getCut, (, ), !=, null, ), ||, (, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (]
[., getPlus, (, ), ., getCut, (, ), !=, null, ), ||, (, (, Boolean, ), node, ., getPlus, (]
[), ||, (, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, ), ), ), {, sides, .]
[), {, sides, ., rememberPlusFound, (, ), ;, }, if, (, (, node, ., getMinus, (, ), ., getCut, (]
[), ), {, sides, ., rememberPlusFound, (, ), ;, }, if, (, (, node, ., getMinus, (, ), ., getCut]
[), ), {, sides, ., rememberPlusFound, (, ), ;, }, if, (, (, node, ., getMinus, (, ), ., getCut]
[., getAttribute, (, ), ), ), {, sides, ., rememberPlusFound, (, ), ;, }, if, (, (, node, ., getMinus]
[., getPlus, (, ), ., getAttribute, (, ), ), ), {, sides, ., rememberPlusFound, (, ), ;, }, if, (]
[;, }, if, (, (, node, ., getMinus, (, ), ., getCut, (, ), !=, null, ), ||, (, (]
[., rememberPlusFound, (, ), ;, }, if, (, (, node, ., getMinus, (, ), ., getCut, (, ), !=, null]
[), {, sides, ., rememberMinusFound, (, ), ;, }, }, else, {, if, (, (, node, ., getPlus, (, )]
[||, (, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, ), ), ), {, sides, ., rememberMinusFound]
[), ||, (, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, ), ), ), {, sides, .]
[!=, null, ), ||, (, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, ), ), ), {]
[., getCut, (, ), !=, null, ), ||, (, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (]
[., getMinus, (, ), ., getCut, (, ), !=, null, ), ||, (, (, Boolean, ), node, ., getMinus, (]
[), ||, (, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, ), ), ), {, sides, .]
[), {, sides, ., rememberMinusFound, (, ), ;, }, }, else, {, if, (, (, node, ., getPlus, (, )]
[), ), {, sides, ., rememberMinusFound, (, ), ;, }, }, else, {, if, (, (, node, ., getPlus, (]
[), ), {, sides, ., rememberMinusFound, (, ), ;, }, }, else, {, if, (, (, node, ., getPlus, (]
[., getAttribute, (, ), ), ), {, sides, ., rememberMinusFound, (, ), ;, }, }, else, {, if, (, (]
[., getMinus, (, ), ., getAttribute, (, ), ), ), {, sides, ., rememberMinusFound, (, ), ;, }, }, else]
[;, }, }, else, {, if, (, (, node, ., getPlus, (, ), ., getCut, (, ), !=, null, )]
[., rememberMinusFound, (, ), ;, }, }, else, {, if, (, (, node, ., getPlus, (, ), ., getCut, (]
[), {, sides, ., rememberMinusFound, (, ), ;, }, if, (, (, node, ., getMinus, (, ), ., getCut, (]
[||, (, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, ), ), ), {, sides, ., rememberMinusFound]
[), ||, (, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, ), ), ), {, sides, .]
[!=, null, ), ||, (, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, ), ), ), {]
[., getCut, (, ), !=, null, ), ||, (, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (]
[., getPlus, (, ), ., getCut, (, ), !=, null, ), ||, (, (, Boolean, ), node, ., getPlus, (]
[), ||, (, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, ), ), ), {, sides, .]
[), {, sides, ., rememberMinusFound, (, ), ;, }, if, (, (, node, ., getMinus, (, ), ., getCut, (]
[), ), {, sides, ., rememberMinusFound, (, ), ;, }, if, (, (, node, ., getMinus, (, ), ., getCut]
[), ), {, sides, ., rememberMinusFound, (, ), ;, }, if, (, (, node, ., getMinus, (, ), ., getCut]
[., getAttribute, (, ), ), ), {, sides, ., rememberMinusFound, (, ), ;, }, if, (, (, node, ., getMinus]
[., getPlus, (, ), ., getAttribute, (, ), ), ), {, sides, ., rememberMinusFound, (, ), ;, }, if, (]
[;, }, if, (, (, node, ., getMinus, (, ), ., getCut, (, ), !=, null, ), ||, (, (]
[., rememberMinusFound, (, ), ;, }, if, (, (, node, ., getMinus, (, ), ., getCut, (, ), !=, null]
[), {, sides, ., rememberPlusFound, (, ), ;, }, }, }, }, private, static, final, class, Sides, {, private, boolean]
[||, (, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, ), ), ), {, sides, ., rememberPlusFound]
[), ||, (, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, ), ), ), {, sides, .]
[!=, null, ), ||, (, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, ), ), ), {]
[., getCut, (, ), !=, null, ), ||, (, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (]
[., getMinus, (, ), ., getCut, (, ), !=, null, ), ||, (, (, Boolean, ), node, ., getMinus, (]
[), ||, (, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, ), ), ), {, sides, .]
[), {, sides, ., rememberPlusFound, (, ), ;, }, }, }, }, private, static, final, class, Sides, {, private, boolean]
[), ), {, sides, ., rememberPlusFound, (, ), ;, }, }, }, }, private, static, final, class, Sides, {, private]
[), ), {, sides, ., rememberPlusFound, (, ), ;, }, }, }, }, private, static, final, class, Sides, {, private]
[., getAttribute, (, ), ), ), {, sides, ., rememberPlusFound, (, ), ;, }, }, }, }, private, static, final]
[., getMinus, (, ), ., getAttribute, (, ), ), ), {, sides, ., rememberPlusFound, (, ), ;, }, }, }]
[;, }, }, }, }, private, static, final, class, Sides, {, private, boolean, plusFound, ;, private, boolean, minusFound, ;, public]
[., rememberPlusFound, (, ), ;, }, }, }, }, private, static, final, class, Sides, {, private, boolean, plusFound, ;, private]
[=, false, ;, minusFound, =, false, ;, }, public, void, rememberPlusFound, (, ), {, plusFound, =, true, ;, }, public]
[;, minusFound, =, false, ;, }, public, void, rememberPlusFound, (, ), {, plusFound, =, true, ;, }, public, boolean, plusFound]
[=, false, ;, }, public, void, rememberPlusFound, (, ), {, plusFound, =, true, ;, }, public, boolean, plusFound, (, )]
[;, }, public, void, rememberPlusFound, (, ), {, plusFound, =, true, ;, }, public, boolean, plusFound, (, ), {, return]
[=, true, ;, }, public, boolean, plusFound, (, ), {, return, plusFound, ;, }, public, void, rememberMinusFound, (, ), {]
[;, }, public, boolean, plusFound, (, ), {, return, plusFound, ;, }, public, void, rememberMinusFound, (, ), {, minusFound, =]
[;, }, public, void, rememberMinusFound, (, ), {, minusFound, =, true, ;, }, public, boolean, minusFound, (, ), {, return]
[=, true, ;, }, public, boolean, minusFound, (, ), {, return, minusFound, ;, }, }, public, SubHyperplane, <, S, >]
[;, }, public, boolean, minusFound, (, ), {, return, minusFound, ;, }, }, public, SubHyperplane, <, S, >, intersection, (]
[;, }, }, public, SubHyperplane, <, S, >, intersection, (, final, SubHyperplane, <, S, >, sub, ), {, return, recurseIntersection]
[;, }, private, SubHyperplane, <, S, >, recurseIntersection, (, final, BSPTree, <, S, >, node, ,, final, SubHyperplane, <, S]
[,, sub, ), ;, }, private, SubHyperplane, <, S, >, recurseIntersection, (, final, BSPTree, <, S, >, node, ,, final]
[), ;, }, private, SubHyperplane, <, S, >, recurseIntersection, (, final, BSPTree, <, S, >, node, ,, final, SubHyperplane, <]
[), {, return, (, Boolean, ), node, ., getAttribute, (, ), ?, sub, ., copySelf, (, ), :, null, ;]
[==, null, ), {, return, (, Boolean, ), node, ., getAttribute, (, ), ?, sub, ., copySelf, (, ), :]
[., getCut, (, ), ==, null, ), {, return, (, Boolean, ), node, ., getAttribute, (, ), ?, sub, .]
[), {, return, (, Boolean, ), node, ., getAttribute, (, ), ?, sub, ., copySelf, (, ), :, null, ;]
[;, }, final, Hyperplane, <, S, >, hyperplane, =, node, ., getCut, (, ), ., getHyperplane, (, ), ;, switch]
[?, sub, ., copySelf, (, ), :, null, ;, }, final, Hyperplane, <, S, >, hyperplane, =, node, ., getCut]
[?, sub, ., copySelf, (, ), :, null, ;, }, final, Hyperplane, <, S, >, hyperplane, =, node, ., getCut]
[., getAttribute, (, ), ?, sub, ., copySelf, (, ), :, null, ;, }, final, Hyperplane, <, S, >, hyperplane]
[:, null, ;, }, final, Hyperplane, <, S, >, hyperplane, =, node, ., getCut, (, ), ., getHyperplane, (, )]
[., copySelf, (, ), :, null, ;, }, final, Hyperplane, <, S, >, hyperplane, =, node, ., getCut, (, )]
[;, }, final, Hyperplane, <, S, >, hyperplane, =, node, ., getCut, (, ), ., getHyperplane, (, ), ;, switch]
[;, switch, (, sub, ., side, (, hyperplane, ), ), {, case, PLUS, :, return, recurseIntersection, (, node, ., getPlus]
[., getHyperplane, (, ), ;, switch, (, sub, ., side, (, hyperplane, ), ), {, case, PLUS, :, return, recurseIntersection]
[., getCut, (, ), ., getHyperplane, (, ), ;, switch, (, sub, ., side, (, hyperplane, ), ), {, case]
[), {, case, PLUS, :, return, recurseIntersection, (, node, ., getPlus, (, ), ,, sub, ), ;, case, MINUS, :]
[., side, (, hyperplane, ), ), {, case, PLUS, :, return, recurseIntersection, (, node, ., getPlus, (, ), ,, sub]
[), ), {, case, PLUS, :, return, recurseIntersection, (, node, ., getPlus, (, ), ,, sub, ), ;, case, MINUS]
[:, return, recurseIntersection, (, node, ., getPlus, (, ), ,, sub, ), ;, case, MINUS, :, return, recurseIntersection, (, node]
[;, case, MINUS, :, return, recurseIntersection, (, node, ., getMinus, (, ), ,, sub, ), ;, case, BOTH, :, final]
[,, sub, ), ;, case, MINUS, :, return, recurseIntersection, (, node, ., getMinus, (, ), ,, sub, ), ;, case]
[., getPlus, (, ), ,, sub, ), ;, case, MINUS, :, return, recurseIntersection, (, node, ., getMinus, (, ), ,]
[), ;, case, MINUS, :, return, recurseIntersection, (, node, ., getMinus, (, ), ,, sub, ), ;, case, BOTH, :]
[:, return, recurseIntersection, (, node, ., getMinus, (, ), ,, sub, ), ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane]
[;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, sub, ., split, (, hyperplane, ), ;]
[,, sub, ), ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, sub, ., split, (]
[., getMinus, (, ), ,, sub, ), ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =]
[), ;, case, BOTH, :, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, sub, ., split, (, hyperplane, )]
[:, final, SubHyperplane, ., SplitSubHyperplane, <, S, >, split, =, sub, ., split, (, hyperplane, ), ;, final, SubHyperplane, <]
[;, final, SubHyperplane, <, S, >, plus, =, recurseIntersection, (, node, ., getPlus, (, ), ,, split, ., getPlus, (]
[., split, (, hyperplane, ), ;, final, SubHyperplane, <, S, >, plus, =, recurseIntersection, (, node, ., getPlus, (, )]
[), ;, final, SubHyperplane, <, S, >, plus, =, recurseIntersection, (, node, ., getPlus, (, ), ,, split, ., getPlus]
[;, final, SubHyperplane, <, S, >, minus, =, recurseIntersection, (, node, ., getMinus, (, ), ,, split, ., getMinus, (]
[,, split, ., getPlus, (, ), ), ;, final, SubHyperplane, <, S, >, minus, =, recurseIntersection, (, node, ., getMinus]
[., getPlus, (, ), ,, split, ., getPlus, (, ), ), ;, final, SubHyperplane, <, S, >, minus, =, recurseIntersection]
[), ;, final, SubHyperplane, <, S, >, minus, =, recurseIntersection, (, node, ., getMinus, (, ), ,, split, ., getMinus]
[., getPlus, (, ), ), ;, final, SubHyperplane, <, S, >, minus, =, recurseIntersection, (, node, ., getMinus, (, )]
[;, if, (, plus, ==, null, ), {, return, minus, ;, }, else, if, (, minus, ==, null, ), {]
[,, split, ., getMinus, (, ), ), ;, if, (, plus, ==, null, ), {, return, minus, ;, }, else]
[., getMinus, (, ), ,, split, ., getMinus, (, ), ), ;, if, (, plus, ==, null, ), {, return]
[), ;, if, (, plus, ==, null, ), {, return, minus, ;, }, else, if, (, minus, ==, null, )]
[., getMinus, (, ), ), ;, if, (, plus, ==, null, ), {, return, minus, ;, }, else, if, (]
[), {, return, minus, ;, }, else, if, (, minus, ==, null, ), {, return, plus, ;, }, else, {]
[==, null, ), {, return, minus, ;, }, else, if, (, minus, ==, null, ), {, return, plus, ;, }]
[), {, return, minus, ;, }, else, if, (, minus, ==, null, ), {, return, plus, ;, }, else, {]
[;, }, else, if, (, minus, ==, null, ), {, return, plus, ;, }, else, {, return, plus, ., reunite]
[), {, return, plus, ;, }, else, {, return, plus, ., reunite, (, minus, ), ;, }, default, :, return]
[==, null, ), {, return, plus, ;, }, else, {, return, plus, ., reunite, (, minus, ), ;, }, default]
[), {, return, plus, ;, }, else, {, return, plus, ., reunite, (, minus, ), ;, }, default, :, return]
[;, }, else, {, return, plus, ., reunite, (, minus, ), ;, }, default, :, return, recurseIntersection, (, node, .]
[;, }, default, :, return, recurseIntersection, (, node, ., getPlus, (, ), ,, recurseIntersection, (, node, ., getMinus, (, )]
[., reunite, (, minus, ), ;, }, default, :, return, recurseIntersection, (, node, ., getPlus, (, ), ,, recurseIntersection, (]
[), ;, }, default, :, return, recurseIntersection, (, node, ., getPlus, (, ), ,, recurseIntersection, (, node, ., getMinus, (]
[;, }, }, public, AbstractRegion, <, S, ,, T, >, applyTransform, (, final, Transform, <, S, ,, T, >, transform]
[,, recurseIntersection, (, node, ., getMinus, (, ), ,, sub, ), ), ;, }, }, public, AbstractRegion, <, S, ,]
[., getPlus, (, ), ,, recurseIntersection, (, node, ., getMinus, (, ), ,, sub, ), ), ;, }, }, public]
[), ;, }, }, public, AbstractRegion, <, S, ,, T, >, applyTransform, (, final, Transform, <, S, ,, T, >]
[,, sub, ), ), ;, }, }, public, AbstractRegion, <, S, ,, T, >, applyTransform, (, final, Transform, <, S]
[., getMinus, (, ), ,, sub, ), ), ;, }, }, public, AbstractRegion, <, S, ,, T, >, applyTransform, (]
[), ), ;, }, }, public, AbstractRegion, <, S, ,, T, >, applyTransform, (, final, Transform, <, S, ,, T]
[;, }, @, SuppressWarnings, (, "unchecked", ), private, BSPTree, <, S, >, recurseTransform, (, final, BSPTree, <, S, >, node]
[), ;, }, @, SuppressWarnings, (, "unchecked", ), private, BSPTree, <, S, >, recurseTransform, (, final, BSPTree, <, S, >]
[,, transform, ), ), ;, }, @, SuppressWarnings, (, "unchecked", ), private, BSPTree, <, S, >, recurseTransform, (, final, BSPTree]
[), ,, transform, ), ), ;, }, @, SuppressWarnings, (, "unchecked", ), private, BSPTree, <, S, >, recurseTransform, (, final]
[), ), ;, }, @, SuppressWarnings, (, "unchecked", ), private, BSPTree, <, S, >, recurseTransform, (, final, BSPTree, <, S]
[private, BSPTree, <, S, >, recurseTransform, (, final, BSPTree, <, S, >, node, ,, final, Transform, <, S, ,, T]
[), private, BSPTree, <, S, >, recurseTransform, (, final, BSPTree, <, S, >, node, ,, final, Transform, <, S, ,]
[), {, return, new, BSPTree, <, S, >, (, node, ., getAttribute, (, ), ), ;, }, final, SubHyperplane, <]
[==, null, ), {, return, new, BSPTree, <, S, >, (, node, ., getAttribute, (, ), ), ;, }, final]
[., getCut, (, ), ==, null, ), {, return, new, BSPTree, <, S, >, (, node, ., getAttribute, (, )]
[), {, return, new, BSPTree, <, S, >, (, node, ., getAttribute, (, ), ), ;, }, final, SubHyperplane, <]
[;, }, final, SubHyperplane, <, S, >, sub, =, node, ., getCut, (, ), ;, final, SubHyperplane, <, S, >]
[), ;, }, final, SubHyperplane, <, S, >, sub, =, node, ., getCut, (, ), ;, final, SubHyperplane, <, S]
[., getAttribute, (, ), ), ;, }, final, SubHyperplane, <, S, >, sub, =, node, ., getCut, (, ), ;]
[;, final, SubHyperplane, <, S, >, tSub, =, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), sub, ), .]
[., getCut, (, ), ;, final, SubHyperplane, <, S, >, tSub, =, (, (, AbstractSubHyperplane, <, S, ,, T, >]
[;, BoundaryAttribute, <, S, >, attribute, =, (, BoundaryAttribute, <, S, >, ), node, ., getAttribute, (, ), ;, if]
[., applyTransform, (, transform, ), ;, BoundaryAttribute, <, S, >, attribute, =, (, BoundaryAttribute, <, S, >, ), node, .]
[), ., applyTransform, (, transform, ), ;, BoundaryAttribute, <, S, >, attribute, =, (, BoundaryAttribute, <, S, >, ), node]
[), ., applyTransform, (, transform, ), ;, BoundaryAttribute, <, S, >, attribute, =, (, BoundaryAttribute, <, S, >, ), node]
[), ;, BoundaryAttribute, <, S, >, attribute, =, (, BoundaryAttribute, <, S, >, ), node, ., getAttribute, (, ), ;]
[;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, S, >, tPO, =, (, attribute, ., getPlusOutside, (]
[;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, S, >, tPO, =, (, attribute, ., getPlusOutside, (]
[., getAttribute, (, ), ;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, S, >, tPO, =, (]
[), {, final, SubHyperplane, <, S, >, tPO, =, (, attribute, ., getPlusOutside, (, ), ==, null, ), ?, null]
[!=, null, ), {, final, SubHyperplane, <, S, >, tPO, =, (, attribute, ., getPlusOutside, (, ), ==, null, )]
[), {, final, SubHyperplane, <, S, >, tPO, =, (, attribute, ., getPlusOutside, (, ), ==, null, ), ?, null]
[;, final, SubHyperplane, <, S, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==, null, ), ?, null, :]
[?, null, :, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusOutside, (, ), ), ., applyTransform]
[), ?, null, :, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusOutside, (, ), ), .]
[==, null, ), ?, null, :, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusOutside, (, )]
[., getPlusOutside, (, ), ==, null, ), ?, null, :, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute]
[), ?, null, :, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusOutside, (, ), ), .]
[:, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusOutside, (, ), ), ., applyTransform, (, transform]
[;, final, SubHyperplane, <, S, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==, null, ), ?, null, :]
[., applyTransform, (, transform, ), ;, final, SubHyperplane, <, S, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==]
[), ., applyTransform, (, transform, ), ;, final, SubHyperplane, <, S, >, tPI, =, (, attribute, ., getPlusInside, (, )]
[), ., applyTransform, (, transform, ), ;, final, SubHyperplane, <, S, >, tPI, =, (, attribute, ., getPlusInside, (, )]
[., getPlusOutside, (, ), ), ., applyTransform, (, transform, ), ;, final, SubHyperplane, <, S, >, tPI, =, (, attribute]
[), ;, final, SubHyperplane, <, S, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==, null, ), ?, null]
[;, attribute, =, new, BoundaryAttribute, <, S, >, (, tPO, ,, tPI, ), ;, }, return, new, BSPTree, <, S]
[?, null, :, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusInside, (, ), ), ., applyTransform]
[), ?, null, :, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusInside, (, ), ), .]
[==, null, ), ?, null, :, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusInside, (, )]
[., getPlusInside, (, ), ==, null, ), ?, null, :, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute]
[), ?, null, :, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusInside, (, ), ), .]
[:, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusInside, (, ), ), ., applyTransform, (, transform]
[;, attribute, =, new, BoundaryAttribute, <, S, >, (, tPO, ,, tPI, ), ;, }, return, new, BSPTree, <, S]
[., applyTransform, (, transform, ), ;, attribute, =, new, BoundaryAttribute, <, S, >, (, tPO, ,, tPI, ), ;, }]
[), ., applyTransform, (, transform, ), ;, attribute, =, new, BoundaryAttribute, <, S, >, (, tPO, ,, tPI, ), ;]
[), ., applyTransform, (, transform, ), ;, attribute, =, new, BoundaryAttribute, <, S, >, (, tPO, ,, tPI, ), ;]
[., getPlusInside, (, ), ), ., applyTransform, (, transform, ), ;, attribute, =, new, BoundaryAttribute, <, S, >, (, tPO]
[), ;, attribute, =, new, BoundaryAttribute, <, S, >, (, tPO, ,, tPI, ), ;, }, return, new, BSPTree, <]
[=, new, BoundaryAttribute, <, S, >, (, tPO, ,, tPI, ), ;, }, return, new, BSPTree, <, S, >, (]
[;, }, return, new, BSPTree, <, S, >, (, tSub, ,, recurseTransform, (, node, ., getPlus, (, ), ,, transform]
[,, tPI, ), ;, }, return, new, BSPTree, <, S, >, (, tSub, ,, recurseTransform, (, node, ., getPlus, (]
[), ;, }, return, new, BSPTree, <, S, >, (, tSub, ,, recurseTransform, (, node, ., getPlus, (, ), ,]
[;, }, }]
[,, recurseTransform, (, node, ., getPlus, (, ), ,, transform, ), ,, recurseTransform, (, node, ., getMinus, (, ), ,]
[,, recurseTransform, (, node, ., getMinus, (, ), ,, transform, ), ,, attribute, ), ;, }, }]
[,, transform, ), ,, recurseTransform, (, node, ., getMinus, (, ), ,, transform, ), ,, attribute, ), ;, }, }]
[., getPlus, (, ), ,, transform, ), ,, recurseTransform, (, node, ., getMinus, (, ), ,, transform, ), ,, attribute]
[), ,, recurseTransform, (, node, ., getMinus, (, ), ,, transform, ), ,, attribute, ), ;, }, }]
[,, attribute, ), ;, }, }]
[,, transform, ), ,, attribute, ), ;, }, }]
[., getMinus, (, ), ,, transform, ), ,, attribute, ), ;, }, }]
[), ,, attribute, ), ;, }, }]
[), ;, }, }]
