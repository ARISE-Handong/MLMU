[math3, ., random, ., Well19937c, ;, public, class, UniformRealDistribution, extends, AbstractRealDistribution, {, @, Deprecated, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =]
[UniformRealDistribution, extends, AbstractRealDistribution, {, @, Deprecated, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =]
[=, 20120109L, ;, private, final, double, lower, ;, private, final, double, upper, ;, public, UniformRealDistribution, (, ), {, this, (]
[;, private, final, double, lower, ;, private, final, double, upper, ;, public, UniformRealDistribution, (, ), {, this, (, 0, ,]
[0, ,, 1, ), ;, }, public, UniformRealDistribution, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, {, this, (]
[}, public, UniformRealDistribution, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, {, this, (, new, Well19937c, (, ), ,]
[UniformRealDistribution, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, {, this, (, new, Well19937c, (, ), ,, lower, ,]
[}, @, Deprecated, public, UniformRealDistribution, (, double, lower, ,, double, upper, ,, double, inverseCumAccuracy, ), throws, NumberIsTooLargeException, {, this, (]
[(, double, lower, ,, double, upper, ,, double, inverseCumAccuracy, ), throws, NumberIsTooLargeException, {, this, (, new, Well19937c, (, ), ,]
[lower, ,, double, upper, ,, double, inverseCumAccuracy, ), throws, NumberIsTooLargeException, {, this, (, new, Well19937c, (, ), ,, lower, ,]
[@, Deprecated, public, UniformRealDistribution, (, RandomGenerator, rng, ,, double, lower, ,, double, upper, ,, double, inverseCumAccuracy, ), {, this, (]
[public, UniformRealDistribution, (, RandomGenerator, rng, ,, double, lower, ,, double, upper, ,, double, inverseCumAccuracy, ), {, this, (, rng, ,]
[(, RandomGenerator, rng, ,, double, lower, ,, double, upper, ,, double, inverseCumAccuracy, ), {, this, (, rng, ,, lower, ,]
[), ;, }, public, UniformRealDistribution, (, RandomGenerator, rng, ,, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, {, super, (]
[(, RandomGenerator, rng, ,, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (]
[(, RandomGenerator, rng, ,, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (]
[rng, ,, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (, lower, >=]
[,, double, upper, ), throws, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (, lower, >=, upper, ), {, throw]
[), throws, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (]
[), throws, NumberIsTooLargeException, {, super, (, rng, ), ;, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (]
[super, (, rng, ), ;, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,]
[rng, ), ;, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,]
[;, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,]
[>=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }]
[>=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }]
[throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, ., lower, =]
[NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, ., lower, =, lower, ;]
[NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, ., lower, =, lower, ;]
[LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, ., lower, =, lower, ;, this, ., upper, =]
[=, lower, ;, this, ., upper, =, upper, ;, }, public, double, density, (, double, x, ), {, if, (]
[=, lower, ;, this, ., upper, =, upper, ;, }, public, double, density, (, double, x, ), {, if, (]
[=, lower, ;, this, ., upper, =, upper, ;, }, public, double, density, (, double, x, ), {, if, (]
[;, this, ., upper, =, upper, ;, }, public, double, density, (, double, x, ), {, if, (, x, <]
[., upper, =, upper, ;, }, public, double, density, (, double, x, ), {, if, (, x, <, lower, ||]
[., upper, =, upper, ;, }, public, double, density, (, double, x, ), {, if, (, x, <, lower, ||]
[=, upper, ;, }, public, double, density, (, double, x, ), {, if, (, x, <, lower, ||, x, >]
[public, double, density, (, double, x, ), {, if, (, x, <, lower, ||, x, >, upper, ), {, return]
[double, x, ), {, if, (, x, <, lower, ||, x, >, upper, ), {, return, 0.0, ;, }, return]
[double, x, ), {, if, (, x, <, lower, ||, x, >, upper, ), {, return, 0.0, ;, }, return]
[), {, if, (, x, <, lower, ||, x, >, upper, ), {, return, 0.0, ;, }, return, 1, /]
[{, if, (, x, <, lower, ||, x, >, upper, ), {, return, 0.0, ;, }, return, 1, /, (]
[{, if, (, x, <, lower, ||, x, >, upper, ), {, return, 0.0, ;, }, return, 1, /, (]
[(, x, <, lower, ||, x, >, upper, ), {, return, 0.0, ;, }, return, 1, /, (, upper, -]
[return, 1, /, (, upper, -, lower, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (]
[return, 1, /, (, upper, -, lower, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (]
[/, (, upper, -, lower, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=]
[lower, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, lower, ), {, return]
[double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, lower, ), {, return, 0, ;, }, if, (]
[double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, lower, ), {, return, 0, ;, }, if, (]
[(, double, x, ), {, if, (, x, <=, lower, ), {, return, 0, ;, }, if, (, x, >=]
[{, if, (, x, <=, lower, ), {, return, 0, ;, }, if, (, x, >=, upper, ), {, return]
[<=, lower, ), {, return, 0, ;, }, if, (, x, >=, upper, ), {, return, 1, ;, }, return]
[<=, lower, ), {, return, 0, ;, }, if, (, x, >=, upper, ), {, return, 1, ;, }, return]
[lower, ), {, return, 0, ;, }, if, (, x, >=, upper, ), {, return, 1, ;, }, return, (]
[lower, ), {, return, 0, ;, }, if, (, x, >=, upper, ), {, return, 1, ;, }, return, (]
[{, return, 0, ;, }, if, (, x, >=, upper, ), {, return, 1, ;, }, return, (, x, -]
[;, }, if, (, x, >=, upper, ), {, return, 1, ;, }, return, (, x, -, lower, ), /]
[}, if, (, x, >=, upper, ), {, return, 1, ;, }, return, (, x, -, lower, ), /, (]
[}, if, (, x, >=, upper, ), {, return, 1, ;, }, return, (, x, -, lower, ), /, (]
[(, x, >=, upper, ), {, return, 1, ;, }, return, (, x, -, lower, ), /, (, upper, -]
[-, lower, ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[-, lower, ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[-, lower, ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <]
[}, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||]
[}, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||]
[Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >]
[(, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw]
[p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (]
[throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,]
[{, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,]
[0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return]
[0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return]
[0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return]
[p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, p, *]
[>, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, p, *, (]
[>, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, p, *, (]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, p, *, (, upper, -]
[new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, p, *, (, upper, -, lower, ), +]
[}, return, p, *, (, upper, -, lower, ), +, lower, ;, }, public, double, getNumericalMean, (, ), {, return]
[}, return, p, *, (, upper, -, lower, ), +, lower, ;, }, public, double, getNumericalMean, (, ), {, return]
[p, *, (, upper, -, lower, ), +, lower, ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *]
[*, (, upper, -, lower, ), +, lower, ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (]
[*, (, upper, -, lower, ), +, lower, ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (]
[upper, -, lower, ), +, lower, ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +]
[{, return, 0.5, *, (, lower, +, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, ul, =]
[{, return, 0.5, *, (, lower, +, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, ul, =]
[0.5, *, (, lower, +, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, ul, =, upper, -]
[lower, +, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, ul, =, upper, -, lower, ;, return]
[lower, +, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, ul, =, upper, -, lower, ;, return]
[lower, +, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, ul, =, upper, -, lower, ;, return]
[upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, ul, =, upper, -, lower, ;, return, ul, *]
[;, }, public, double, getNumericalVariance, (, ), {, double, ul, =, upper, -, lower, ;, return, ul, *, ul, /]
[=, upper, -, lower, ;, return, ul, *, ul, /, 12, ;, }, public, double, getSupportLowerBound, (, ), {, return]
[12, ;, }, public, double, getSupportLowerBound, (, ), {, return, lower, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[lower, ;, }, public, double, getSupportUpperBound, (, ), {, return, upper, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return]
[upper, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return]
[true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportConnected, (, ), {, return]
[isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, final, double, u, =]
[isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, final, double, u, =]
[}, @, Override, public, double, sample, (, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, return]
[}, @, Override, public, double, sample, (, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, return]
[}, @, Override, public, double, sample, (, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, return]
[Override, public, double, sample, (, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, return, u, *]
[double, sample, (, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, return, u, *, upper, +]
[double, sample, (, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, return, u, *, upper, +]
[sample, (, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, return, u, *, upper, +, (]
[sample, (, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, return, u, *, upper, +, (]
[), {, final, double, u, =, random, ., nextDouble, (, ), ;, return, u, *, upper, +, (, 1, -]
[double, u, =, random, ., nextDouble, (, ), ;, return, u, *, upper, +, (, 1, -, u, ), *]
