[=, handler, ;, this, ., maxCheckInterval, =, maxCheckInterval, ;, this, ., convergence, =, FastMath, ., abs, (, convergence, ), ;]
[., handler, =, handler, ;, this, ., maxCheckInterval, =, maxCheckInterval, ;, this, ., convergence, =, FastMath, ., abs, (, convergence]
[;, this, ., maxCheckInterval, =, maxCheckInterval, ;, this, ., convergence, =, FastMath, ., abs, (, convergence, ), ;, this, .]
[=, maxCheckInterval, ;, this, ., convergence, =, FastMath, ., abs, (, convergence, ), ;, this, ., maxIterationCount, =, maxIterationCount, ;]
[., maxCheckInterval, =, maxCheckInterval, ;, this, ., convergence, =, FastMath, ., abs, (, convergence, ), ;, this, ., maxIterationCount, =]
[;, this, ., convergence, =, FastMath, ., abs, (, convergence, ), ;, this, ., maxIterationCount, =, maxIterationCount, ;, this, .]
[=, FastMath, ., abs, (, convergence, ), ;, this, ., maxIterationCount, =, maxIterationCount, ;, this, ., solver, =, solver, ;]
[., convergence, =, FastMath, ., abs, (, convergence, ), ;, this, ., maxIterationCount, =, maxIterationCount, ;, this, ., solver, =]
[;, this, ., maxIterationCount, =, maxIterationCount, ;, this, ., solver, =, solver, ;, expandable, =, null, ;, t0, =, Double]
[., abs, (, convergence, ), ;, this, ., maxIterationCount, =, maxIterationCount, ;, this, ., solver, =, solver, ;, expandable, =]
[), ;, this, ., maxIterationCount, =, maxIterationCount, ;, this, ., solver, =, solver, ;, expandable, =, null, ;, t0, =]
[=, maxIterationCount, ;, this, ., solver, =, solver, ;, expandable, =, null, ;, t0, =, Double, ., NaN, ;, g0]
[., maxIterationCount, =, maxIterationCount, ;, this, ., solver, =, solver, ;, expandable, =, null, ;, t0, =, Double, ., NaN]
[;, this, ., solver, =, solver, ;, expandable, =, null, ;, t0, =, Double, ., NaN, ;, g0, =, Double]
[=, solver, ;, expandable, =, null, ;, t0, =, Double, ., NaN, ;, g0, =, Double, ., NaN, ;, g0Positive]
[., solver, =, solver, ;, expandable, =, null, ;, t0, =, Double, ., NaN, ;, g0, =, Double, ., NaN]
[;, expandable, =, null, ;, t0, =, Double, ., NaN, ;, g0, =, Double, ., NaN, ;, g0Positive, =, true]
[=, null, ;, t0, =, Double, ., NaN, ;, g0, =, Double, ., NaN, ;, g0Positive, =, true, ;, pendingEvent]
[;, t0, =, Double, ., NaN, ;, g0, =, Double, ., NaN, ;, g0Positive, =, true, ;, pendingEvent, =, false]
[=, Double, ., NaN, ;, g0, =, Double, ., NaN, ;, g0Positive, =, true, ;, pendingEvent, =, false, ;, pendingEventTime]
[;, g0, =, Double, ., NaN, ;, g0Positive, =, true, ;, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN]
[., NaN, ;, g0, =, Double, ., NaN, ;, g0Positive, =, true, ;, pendingEvent, =, false, ;, pendingEventTime, =, Double]
[=, Double, ., NaN, ;, g0Positive, =, true, ;, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime]
[;, g0Positive, =, true, ;, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =, Double, ., NaN]
[., NaN, ;, g0Positive, =, true, ;, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =, Double]
[=, true, ;, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =, Double, ., NaN, ;, increasing]
[;, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =, Double, ., NaN, ;, increasing, =, true]
[=, false, ;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =, Double, ., NaN, ;, increasing, =, true, ;, nextAction]
[;, pendingEventTime, =, Double, ., NaN, ;, previousEventTime, =, Double, ., NaN, ;, increasing, =, true, ;, nextAction, =, EventHandler]
[=, Double, ., NaN, ;, previousEventTime, =, Double, ., NaN, ;, increasing, =, true, ;, nextAction, =, EventHandler, ., Action]
[;, previousEventTime, =, Double, ., NaN, ;, increasing, =, true, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }]
[., NaN, ;, previousEventTime, =, Double, ., NaN, ;, increasing, =, true, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE]
[=, Double, ., NaN, ;, increasing, =, true, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, public, EventHandler]
[;, increasing, =, true, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, public, EventHandler, getEventHandler, (, ), {]
[., NaN, ;, increasing, =, true, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, public, EventHandler, getEventHandler, (]
[=, true, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, public, EventHandler, getEventHandler, (, ), {, return, handler]
[;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, public, EventHandler, getEventHandler, (, ), {, return, handler, ;, }]
[=, EventHandler, ., Action, ., CONTINUE, ;, }, public, EventHandler, getEventHandler, (, ), {, return, handler, ;, }, public, void]
[;, }, public, EventHandler, getEventHandler, (, ), {, return, handler, ;, }, public, void, setExpandable, (, final, ExpandableStatefulODE, expandable, )]
[., CONTINUE, ;, }, public, EventHandler, getEventHandler, (, ), {, return, handler, ;, }, public, void, setExpandable, (, final, ExpandableStatefulODE]
[., Action, ., CONTINUE, ;, }, public, EventHandler, getEventHandler, (, ), {, return, handler, ;, }, public, void, setExpandable, (]
[;, }, public, void, setExpandable, (, final, ExpandableStatefulODE, expandable, ), {, this, ., expandable, =, expandable, ;, }, public, double]
[=, expandable, ;, }, public, double, getMaxCheckInterval, (, ), {, return, maxCheckInterval, ;, }, public, double, getConvergence, (, ), {]
[., expandable, =, expandable, ;, }, public, double, getMaxCheckInterval, (, ), {, return, maxCheckInterval, ;, }, public, double, getConvergence, (]
[;, }, public, double, getMaxCheckInterval, (, ), {, return, maxCheckInterval, ;, }, public, double, getConvergence, (, ), {, return, convergence]
[;, }, public, double, getConvergence, (, ), {, return, convergence, ;, }, public, int, getMaxIterationCount, (, ), {, return, maxIterationCount]
[;, }, public, int, getMaxIterationCount, (, ), {, return, maxIterationCount, ;, }, public, void, reinitializeBegin, (, final, StepInterpolator, interpolator, )]
[;, }, public, void, reinitializeBegin, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, {, t0, =, interpolator, ., getPreviousTime, (, )]
[=, interpolator, ., getPreviousTime, (, ), ;, interpolator, ., setInterpolatedTime, (, t0, ), ;, g0, =, handler, ., g, (]
[;, interpolator, ., setInterpolatedTime, (, t0, ), ;, g0, =, handler, ., g, (, t0, ,, getCompleteState, (, interpolator, )]
[., getPreviousTime, (, ), ;, interpolator, ., setInterpolatedTime, (, t0, ), ;, g0, =, handler, ., g, (, t0, ,]
[;, g0, =, handler, ., g, (, t0, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0, ==, 0]
[., setInterpolatedTime, (, t0, ), ;, g0, =, handler, ., g, (, t0, ,, getCompleteState, (, interpolator, ), ), ;]
[), ;, g0, =, handler, ., g, (, t0, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0, ==]
[=, handler, ., g, (, t0, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0, ==, 0, ), {]
[;, if, (, g0, ==, 0, ), {, final, double, epsilon, =, FastMath, ., max, (, solver, ., getAbsoluteAccuracy, (]
[., g, (, t0, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0, ==, 0, ), {, final, double]
[,, getCompleteState, (, interpolator, ), ), ;, if, (, g0, ==, 0, ), {, final, double, epsilon, =, FastMath, .]
[), ;, if, (, g0, ==, 0, ), {, final, double, epsilon, =, FastMath, ., max, (, solver, ., getAbsoluteAccuracy]
[), ), ;, if, (, g0, ==, 0, ), {, final, double, epsilon, =, FastMath, ., max, (, solver, .]
[), {, final, double, epsilon, =, FastMath, ., max, (, solver, ., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (]
[==, 0, ), {, final, double, epsilon, =, FastMath, ., max, (, solver, ., getAbsoluteAccuracy, (, ), ,, FastMath, .]
[), {, final, double, epsilon, =, FastMath, ., max, (, solver, ., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (]
[;, final, double, tStart, =, t0, +, 0.5, *, epsilon, ;, interpolator, ., setInterpolatedTime, (, tStart, ), ;, g0, =]
[., max, (, solver, ., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (, solver, ., getRelativeAccuracy, (, ), *, t0]
[,, FastMath, ., abs, (, solver, ., getRelativeAccuracy, (, ), *, t0, ), ), ;, final, double, tStart, =, t0]
[., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (, solver, ., getRelativeAccuracy, (, ), *, t0, ), ), ;, final]
[), ;, final, double, tStart, =, t0, +, 0.5, *, epsilon, ;, interpolator, ., setInterpolatedTime, (, tStart, ), ;, g0]
[., abs, (, solver, ., getRelativeAccuracy, (, ), *, t0, ), ), ;, final, double, tStart, =, t0, +, 0.5]
[), ), ;, final, double, tStart, =, t0, +, 0.5, *, epsilon, ;, interpolator, ., setInterpolatedTime, (, tStart, ), ;]
[*, t0, ), ), ;, final, double, tStart, =, t0, +, 0.5, *, epsilon, ;, interpolator, ., setInterpolatedTime, (, tStart]
[., getRelativeAccuracy, (, ), *, t0, ), ), ;, final, double, tStart, =, t0, +, 0.5, *, epsilon, ;, interpolator]
[), ), ;, final, double, tStart, =, t0, +, 0.5, *, epsilon, ;, interpolator, ., setInterpolatedTime, (, tStart, ), ;]
[;, interpolator, ., setInterpolatedTime, (, tStart, ), ;, g0, =, handler, ., g, (, tStart, ,, getCompleteState, (, interpolator, )]
[+, 0.5, *, epsilon, ;, interpolator, ., setInterpolatedTime, (, tStart, ), ;, g0, =, handler, ., g, (, tStart, ,]
[;, interpolator, ., setInterpolatedTime, (, tStart, ), ;, g0, =, handler, ., g, (, tStart, ,, getCompleteState, (, interpolator, )]
[*, epsilon, ;, interpolator, ., setInterpolatedTime, (, tStart, ), ;, g0, =, handler, ., g, (, tStart, ,, getCompleteState, (]
[;, interpolator, ., setInterpolatedTime, (, tStart, ), ;, g0, =, handler, ., g, (, tStart, ,, getCompleteState, (, interpolator, )]
[;, g0, =, handler, ., g, (, tStart, ,, getCompleteState, (, interpolator, ), ), ;, }, g0Positive, =, g0, >=]
[., setInterpolatedTime, (, tStart, ), ;, g0, =, handler, ., g, (, tStart, ,, getCompleteState, (, interpolator, ), ), ;]
[), ;, g0, =, handler, ., g, (, tStart, ,, getCompleteState, (, interpolator, ), ), ;, }, g0Positive, =, g0]
[=, handler, ., g, (, tStart, ,, getCompleteState, (, interpolator, ), ), ;, }, g0Positive, =, g0, >=, 0, ;]
[;, }, g0Positive, =, g0, >=, 0, ;, }, private, double, [, ], getCompleteState, (, final, StepInterpolator, interpolator, ), {]
[., g, (, tStart, ,, getCompleteState, (, interpolator, ), ), ;, }, g0Positive, =, g0, >=, 0, ;, }, private]
[,, getCompleteState, (, interpolator, ), ), ;, }, g0Positive, =, g0, >=, 0, ;, }, private, double, [, ], getCompleteState]
[), ;, }, g0Positive, =, g0, >=, 0, ;, }, private, double, [, ], getCompleteState, (, final, StepInterpolator, interpolator, )]
[), ), ;, }, g0Positive, =, g0, >=, 0, ;, }, private, double, [, ], getCompleteState, (, final, StepInterpolator, interpolator]
[=, g0, >=, 0, ;, }, private, double, [, ], getCompleteState, (, final, StepInterpolator, interpolator, ), {, final, double, []
[;, }, private, double, [, ], getCompleteState, (, final, StepInterpolator, interpolator, ), {, final, double, [, ], complete, =, new]
[>=, 0, ;, }, private, double, [, ], getCompleteState, (, final, StepInterpolator, interpolator, ), {, final, double, [, ], complete]
[;, }, private, double, [, ], getCompleteState, (, final, StepInterpolator, interpolator, ), {, final, double, [, ], complete, =, new]
[;, expandable, ., getPrimaryMapper, (, ), ., insertEquationData, (, interpolator, ., getInterpolatedState, (, ), ,, complete, ), ;, int, index]
[], ;, expandable, ., getPrimaryMapper, (, ), ., insertEquationData, (, interpolator, ., getInterpolatedState, (, ), ,, complete, ), ;, int]
[., getTotalDimension, (, ), ], ;, expandable, ., getPrimaryMapper, (, ), ., insertEquationData, (, interpolator, ., getInterpolatedState, (, ), ,]
[;, int, index, =, 0, ;, for, (, EquationsMapper, secondary, :, expandable, ., getSecondaryMappers, (, ), ), {, secondary, .]
[., insertEquationData, (, interpolator, ., getInterpolatedState, (, ), ,, complete, ), ;, int, index, =, 0, ;, for, (, EquationsMapper]
[., getPrimaryMapper, (, ), ., insertEquationData, (, interpolator, ., getInterpolatedState, (, ), ,, complete, ), ;, int, index, =, 0]
[,, complete, ), ;, int, index, =, 0, ;, for, (, EquationsMapper, secondary, :, expandable, ., getSecondaryMappers, (, ), )]
[., getInterpolatedState, (, ), ,, complete, ), ;, int, index, =, 0, ;, for, (, EquationsMapper, secondary, :, expandable, .]
[), ;, int, index, =, 0, ;, for, (, EquationsMapper, secondary, :, expandable, ., getSecondaryMappers, (, ), ), {, secondary]
[;, for, (, EquationsMapper, secondary, :, expandable, ., getSecondaryMappers, (, ), ), {, secondary, ., insertEquationData, (, interpolator, ., getInterpolatedSecondaryState]
[), {, secondary, ., insertEquationData, (, interpolator, ., getInterpolatedSecondaryState, (, index, ++, ), ,, complete, ), ;, }, return, complete]
[., getSecondaryMappers, (, ), ), {, secondary, ., insertEquationData, (, interpolator, ., getInterpolatedSecondaryState, (, index, ++, ), ,, complete, )]
[;, }, return, complete, ;, }, public, boolean, evaluateStep, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, ,, NoBracketingException, {, try]
[., insertEquationData, (, interpolator, ., getInterpolatedSecondaryState, (, index, ++, ), ,, complete, ), ;, }, return, complete, ;, }, public]
[,, complete, ), ;, }, return, complete, ;, }, public, boolean, evaluateStep, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, ,]
[., getInterpolatedSecondaryState, (, index, ++, ), ,, complete, ), ;, }, return, complete, ;, }, public, boolean, evaluateStep, (, final]
[), ,, complete, ), ;, }, return, complete, ;, }, public, boolean, evaluateStep, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException]
[++, ), ,, complete, ), ;, }, return, complete, ;, }, public, boolean, evaluateStep, (, final, StepInterpolator, interpolator, ), throws]
[), ;, }, return, complete, ;, }, public, boolean, evaluateStep, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, ,, NoBracketingException, {]
[;, }, public, boolean, evaluateStep, (, final, StepInterpolator, interpolator, ), throws, MaxCountExceededException, ,, NoBracketingException, {, try, {, forward, =, interpolator]
[=, interpolator, ., isForward, (, ), ;, final, double, t1, =, interpolator, ., getCurrentTime, (, ), ;, final, double, dt]
[;, final, double, t1, =, interpolator, ., getCurrentTime, (, ), ;, final, double, dt, =, t1, -, t0, ;, if]
[., isForward, (, ), ;, final, double, t1, =, interpolator, ., getCurrentTime, (, ), ;, final, double, dt, =, t1]
[;, final, double, dt, =, t1, -, t0, ;, if, (, FastMath, ., abs, (, dt, ), <, convergence, )]
[., getCurrentTime, (, ), ;, final, double, dt, =, t1, -, t0, ;, if, (, FastMath, ., abs, (, dt]
[;, if, (, FastMath, ., abs, (, dt, ), <, convergence, ), {, return, false, ;, }, final, int, n]
[-, t0, ;, if, (, FastMath, ., abs, (, dt, ), <, convergence, ), {, return, false, ;, }, final]
[;, if, (, FastMath, ., abs, (, dt, ), <, convergence, ), {, return, false, ;, }, final, int, n]
[), {, return, false, ;, }, final, int, n, =, FastMath, ., max, (, 1, ,, (, int, ), FastMath]
[<, convergence, ), {, return, false, ;, }, final, int, n, =, FastMath, ., max, (, 1, ,, (, int]
[., abs, (, dt, ), <, convergence, ), {, return, false, ;, }, final, int, n, =, FastMath, ., max]
[), <, convergence, ), {, return, false, ;, }, final, int, n, =, FastMath, ., max, (, 1, ,, (]
[), {, return, false, ;, }, final, int, n, =, FastMath, ., max, (, 1, ,, (, int, ), FastMath]
[;, }, final, int, n, =, FastMath, ., max, (, 1, ,, (, int, ), FastMath, ., ceil, (, FastMath]
[;, final, double, h, =, dt, /, n, ;, final, UnivariateFunction, f, =, new, UnivariateFunction, (, ), {, public, double]
[., max, (, 1, ,, (, int, ), FastMath, ., ceil, (, FastMath, ., abs, (, dt, ), /, maxCheckInterval]
[,, (, int, ), FastMath, ., ceil, (, FastMath, ., abs, (, dt, ), /, maxCheckInterval, ), ), ;, final]
[), ;, final, double, h, =, dt, /, n, ;, final, UnivariateFunction, f, =, new, UnivariateFunction, (, ), {, public]
[), ;, final, double, h, =, dt, /, n, ;, final, UnivariateFunction, f, =, new, UnivariateFunction, (, ), {, public]
[., ceil, (, FastMath, ., abs, (, dt, ), /, maxCheckInterval, ), ), ;, final, double, h, =, dt, /]
[), ), ;, final, double, h, =, dt, /, n, ;, final, UnivariateFunction, f, =, new, UnivariateFunction, (, ), {]
[/, maxCheckInterval, ), ), ;, final, double, h, =, dt, /, n, ;, final, UnivariateFunction, f, =, new, UnivariateFunction, (]
[., abs, (, dt, ), /, maxCheckInterval, ), ), ;, final, double, h, =, dt, /, n, ;, final, UnivariateFunction]
[), /, maxCheckInterval, ), ), ;, final, double, h, =, dt, /, n, ;, final, UnivariateFunction, f, =, new, UnivariateFunction]
[), ), ;, final, double, h, =, dt, /, n, ;, final, UnivariateFunction, f, =, new, UnivariateFunction, (, ), {]
[;, final, UnivariateFunction, f, =, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, t, ), throws, LocalMaxCountExceededException]
[/, n, ;, final, UnivariateFunction, f, =, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, t, )]
[;, final, UnivariateFunction, f, =, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, t, ), throws, LocalMaxCountExceededException]
[;, double, ta, =, t0, ;, double, ga, =, g0, ;, for, (, int, i, =, 0, ;, i, <]
[;, return, handler, ., g, (, t, ,, getCompleteState, (, interpolator, ), ), ;, }, catch, (, MaxCountExceededException, mcee, )]
[., setInterpolatedTime, (, t, ), ;, return, handler, ., g, (, t, ,, getCompleteState, (, interpolator, ), ), ;, }]
[), ;, return, handler, ., g, (, t, ,, getCompleteState, (, interpolator, ), ), ;, }, catch, (, MaxCountExceededException, mcee]
[;, }, catch, (, MaxCountExceededException, mcee, ), {, throw, new, LocalMaxCountExceededException, (, mcee, ), ;, }, }, }, ;, double]
[., g, (, t, ,, getCompleteState, (, interpolator, ), ), ;, }, catch, (, MaxCountExceededException, mcee, ), {, throw, new]
[,, getCompleteState, (, interpolator, ), ), ;, }, catch, (, MaxCountExceededException, mcee, ), {, throw, new, LocalMaxCountExceededException, (, mcee, )]
[), ;, }, catch, (, MaxCountExceededException, mcee, ), {, throw, new, LocalMaxCountExceededException, (, mcee, ), ;, }, }, }, ;]
[), ), ;, }, catch, (, MaxCountExceededException, mcee, ), {, throw, new, LocalMaxCountExceededException, (, mcee, ), ;, }, }, }]
[;, }, }, }, ;, double, ta, =, t0, ;, double, ga, =, g0, ;, for, (, int, i, =]
[), ;, }, }, }, ;, double, ta, =, t0, ;, double, ga, =, g0, ;, for, (, int, i]
[;, double, ga, =, g0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, )]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, tb, =]
[;, i, <, n, ;, ++, i, ), {, final, double, tb, =, t0, +, (, i, +, 1, )]
[;, ++, i, ), {, final, double, tb, =, t0, +, (, i, +, 1, ), *, h, ;, interpolator]
[<, n, ;, ++, i, ), {, final, double, tb, =, t0, +, (, i, +, 1, ), *, h]
[;, ++, i, ), {, final, double, tb, =, t0, +, (, i, +, 1, ), *, h, ;, interpolator]
[), {, final, double, tb, =, t0, +, (, i, +, 1, ), *, h, ;, interpolator, ., setInterpolatedTime, (]
[), {, final, double, tb, =, t0, +, (, i, +, 1, ), *, h, ;, interpolator, ., setInterpolatedTime, (]
[;, interpolator, ., setInterpolatedTime, (, tb, ), ;, final, double, gb, =, handler, ., g, (, tb, ,, getCompleteState, (]
[+, (, i, +, 1, ), *, h, ;, interpolator, ., setInterpolatedTime, (, tb, ), ;, final, double, gb, =]
[;, interpolator, ., setInterpolatedTime, (, tb, ), ;, final, double, gb, =, handler, ., g, (, tb, ,, getCompleteState, (]
[*, h, ;, interpolator, ., setInterpolatedTime, (, tb, ), ;, final, double, gb, =, handler, ., g, (, tb, ,]
[), *, h, ;, interpolator, ., setInterpolatedTime, (, tb, ), ;, final, double, gb, =, handler, ., g, (, tb]
[+, 1, ), *, h, ;, interpolator, ., setInterpolatedTime, (, tb, ), ;, final, double, gb, =, handler, ., g]
[), *, h, ;, interpolator, ., setInterpolatedTime, (, tb, ), ;, final, double, gb, =, handler, ., g, (, tb]
[;, interpolator, ., setInterpolatedTime, (, tb, ), ;, final, double, gb, =, handler, ., g, (, tb, ,, getCompleteState, (]
[;, final, double, gb, =, handler, ., g, (, tb, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0Positive]
[., setInterpolatedTime, (, tb, ), ;, final, double, gb, =, handler, ., g, (, tb, ,, getCompleteState, (, interpolator, )]
[), ;, final, double, gb, =, handler, ., g, (, tb, ,, getCompleteState, (, interpolator, ), ), ;, if, (]
[;, if, (, g0Positive, ^, (, gb, >=, 0, ), ), {, increasing, =, gb, >=, ga, ;, final, double]
[., g, (, tb, ,, getCompleteState, (, interpolator, ), ), ;, if, (, g0Positive, ^, (, gb, >=, 0, )]
[,, getCompleteState, (, interpolator, ), ), ;, if, (, g0Positive, ^, (, gb, >=, 0, ), ), {, increasing, =]
[), ;, if, (, g0Positive, ^, (, gb, >=, 0, ), ), {, increasing, =, gb, >=, ga, ;, final]
[), ), ;, if, (, g0Positive, ^, (, gb, >=, 0, ), ), {, increasing, =, gb, >=, ga, ;]
[), {, increasing, =, gb, >=, ga, ;, final, double, root, ;, if, (, solver, instanceof, BracketedUnivariateSolver, <, ?, >]
[^, (, gb, >=, 0, ), ), {, increasing, =, gb, >=, ga, ;, final, double, root, ;, if, (]
[), {, increasing, =, gb, >=, ga, ;, final, double, root, ;, if, (, solver, instanceof, BracketedUnivariateSolver, <, ?, >]
[), ), {, increasing, =, gb, >=, ga, ;, final, double, root, ;, if, (, solver, instanceof, BracketedUnivariateSolver, <, ?]
[>=, 0, ), ), {, increasing, =, gb, >=, ga, ;, final, double, root, ;, if, (, solver, instanceof, BracketedUnivariateSolver]
[), ), {, increasing, =, gb, >=, ga, ;, final, double, root, ;, if, (, solver, instanceof, BracketedUnivariateSolver, <, ?]
[=, gb, >=, ga, ;, final, double, root, ;, if, (, solver, instanceof, BracketedUnivariateSolver, <, ?, >, ), {, @]
[;, final, double, root, ;, if, (, solver, instanceof, BracketedUnivariateSolver, <, ?, >, ), {, @, SuppressWarnings, (, "unchecked", )]
[>=, ga, ;, final, double, root, ;, if, (, solver, instanceof, BracketedUnivariateSolver, <, ?, >, ), {, @, SuppressWarnings, (]
[;, final, double, root, ;, if, (, solver, instanceof, BracketedUnivariateSolver, <, ?, >, ), {, @, SuppressWarnings, (, "unchecked", )]
[), {, @, SuppressWarnings, (, "unchecked", ), BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, (, BracketedUnivariateSolver, <, UnivariateFunction, >, ), solver]
[instanceof, BracketedUnivariateSolver, <, ?, >, ), {, @, SuppressWarnings, (, "unchecked", ), BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, (, BracketedUnivariateSolver]
[BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, (, BracketedUnivariateSolver, <, UnivariateFunction, >, ), solver, ;, root, =, forward, ?, bracketing, .]
[), BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, (, BracketedUnivariateSolver, <, UnivariateFunction, >, ), solver, ;, root, =, forward, ?, bracketing]
[;, root, =, forward, ?, bracketing, ., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE]
[;, root, =, forward, ?, bracketing, ., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE]
[=, forward, ?, bracketing, ., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :]
[;, }, else, {, final, double, baseRoot, =, forward, ?, solver, ., solve, (, maxIterationCount, ,, f, ,, ta, ,]
[?, bracketing, ., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, bracketing, .]
[:, bracketing, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, else]
[., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, bracketing, ., solve, (]
[,, f, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, bracketing, ., solve, (, maxIterationCount, ,, f, ,]
[,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, bracketing, ., solve, (, maxIterationCount, ,, f, ,, tb, ,]
[,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, bracketing, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ,]
[,, AllowedSolution, ., RIGHT_SIDE, ), :, bracketing, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ,, AllowedSolution, .]
[), :, bracketing, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }]
[., RIGHT_SIDE, ), :, bracketing, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, )]
[;, }, else, {, final, double, baseRoot, =, forward, ?, solver, ., solve, (, maxIterationCount, ,, f, ,, ta, ,]
[., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, else, {, final]
[,, f, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, else, {, final, double, baseRoot, =, forward]
[,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, else, {, final, double, baseRoot, =, forward, ?, solver]
[,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, else, {, final, double, baseRoot, =, forward, ?, solver, ., solve]
[,, AllowedSolution, ., LEFT_SIDE, ), ;, }, else, {, final, double, baseRoot, =, forward, ?, solver, ., solve, (, maxIterationCount]
[), ;, }, else, {, final, double, baseRoot, =, forward, ?, solver, ., solve, (, maxIterationCount, ,, f, ,, ta]
[., LEFT_SIDE, ), ;, }, else, {, final, double, baseRoot, =, forward, ?, solver, ., solve, (, maxIterationCount, ,, f]
[;, final, int, remainingEval, =, maxIterationCount, -, solver, ., getEvaluations, (, ), ;, BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, new]
[?, solver, ., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ), :, solver, ., solve, (, maxIterationCount, ,]
[:, solver, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ), ;, final, int, remainingEval, =, maxIterationCount, -]
[., solve, (, maxIterationCount, ,, f, ,, ta, ,, tb, ), :, solver, ., solve, (, maxIterationCount, ,, f, ,]
[,, f, ,, ta, ,, tb, ), :, solver, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, )]
[,, ta, ,, tb, ), :, solver, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ), ;, final]
[,, tb, ), :, solver, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ), ;, final, int, remainingEval]
[), :, solver, ., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ), ;, final, int, remainingEval, =, maxIterationCount]
[;, final, int, remainingEval, =, maxIterationCount, -, solver, ., getEvaluations, (, ), ;, BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, new]
[., solve, (, maxIterationCount, ,, f, ,, tb, ,, ta, ), ;, final, int, remainingEval, =, maxIterationCount, -, solver, .]
[,, f, ,, tb, ,, ta, ), ;, final, int, remainingEval, =, maxIterationCount, -, solver, ., getEvaluations, (, ), ;]
[,, tb, ,, ta, ), ;, final, int, remainingEval, =, maxIterationCount, -, solver, ., getEvaluations, (, ), ;, BracketedUnivariateSolver, <]
[,, ta, ), ;, final, int, remainingEval, =, maxIterationCount, -, solver, ., getEvaluations, (, ), ;, BracketedUnivariateSolver, <, UnivariateFunction, >]
[), ;, final, int, remainingEval, =, maxIterationCount, -, solver, ., getEvaluations, (, ), ;, BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =]
[;, BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, new, PegasusSolver, (, solver, ., getRelativeAccuracy, (, ), ,, solver, ., getAbsoluteAccuracy, (]
[-, solver, ., getEvaluations, (, ), ;, BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, new, PegasusSolver, (, solver, ., getRelativeAccuracy, (]
[;, BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, new, PegasusSolver, (, solver, ., getRelativeAccuracy, (, ), ,, solver, ., getAbsoluteAccuracy, (]
[., getEvaluations, (, ), ;, BracketedUnivariateSolver, <, UnivariateFunction, >, bracketing, =, new, PegasusSolver, (, solver, ., getRelativeAccuracy, (, ), ,]
[;, root, =, forward, ?, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, ta, ,, tb]
[,, solver, ., getAbsoluteAccuracy, (, ), ), ;, root, =, forward, ?, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,]
[., getRelativeAccuracy, (, ), ,, solver, ., getAbsoluteAccuracy, (, ), ), ;, root, =, forward, ?, UnivariateSolverUtils, ., forceSide, (]
[), ;, root, =, forward, ?, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, ta, ,]
[., getAbsoluteAccuracy, (, ), ), ;, root, =, forward, ?, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,]
[=, forward, ?, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, ta, ,, tb, ,, AllowedSolution]
[;, }, if, (, (, !, Double, ., isNaN, (, previousEventTime, ), ), &&, (, FastMath, ., abs, (, root]
[?, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE]
[:, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE]
[., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :]
[,, f, ,, bracketing, ,, baseRoot, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (]
[,, bracketing, ,, baseRoot, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,]
[,, baseRoot, ,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,]
[,, ta, ,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,]
[,, tb, ,, AllowedSolution, ., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,]
[,, AllowedSolution, ., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, tb, ,]
[), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,, AllowedSolution, .]
[., RIGHT_SIDE, ), :, UnivariateSolverUtils, ., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,]
[;, }, if, (, (, !, Double, ., isNaN, (, previousEventTime, ), ), &&, (, FastMath, ., abs, (, root]
[., forceSide, (, remainingEval, ,, f, ,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;]
[,, f, ,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (]
[,, bracketing, ,, baseRoot, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (, !, Double]
[,, baseRoot, ,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (, !, Double, ., isNaN]
[,, tb, ,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (, !, Double, ., isNaN, (, previousEventTime]
[,, ta, ,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (, !, Double, ., isNaN, (, previousEventTime, ), )]
[,, AllowedSolution, ., LEFT_SIDE, ), ;, }, if, (, (, !, Double, ., isNaN, (, previousEventTime, ), ), &&, (]
[), ;, }, if, (, (, !, Double, ., isNaN, (, previousEventTime, ), ), &&, (, FastMath, ., abs, (]
[., LEFT_SIDE, ), ;, }, if, (, (, !, Double, ., isNaN, (, previousEventTime, ), ), &&, (, FastMath, .]
[), {, ta, =, forward, ?, ta, +, convergence, :, ta, -, convergence, ;, ga, =, f, ., value, (]
[&&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =, forward, ?, ta]
[&&, (, FastMath, ., abs, (, root, -, ta, ), <=, convergence, ), &&, (, FastMath, ., abs, (, root]
[), &&, (, FastMath, ., abs, (, root, -, ta, ), <=, convergence, ), &&, (, FastMath, ., abs, (]
[), &&, (, FastMath, ., abs, (, root, -, ta, ), <=, convergence, ), &&, (, FastMath, ., abs, (]
[., isNaN, (, previousEventTime, ), ), &&, (, FastMath, ., abs, (, root, -, ta, ), <=, convergence, ), &&]
[), ), &&, (, FastMath, ., abs, (, root, -, ta, ), <=, convergence, ), &&, (, FastMath, ., abs]
[&&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =, forward, ?, ta]
[), &&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =, forward, ?]
[<=, convergence, ), &&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =]
[., abs, (, root, -, ta, ), <=, convergence, ), &&, (, FastMath, ., abs, (, root, -, previousEventTime, )]
[), <=, convergence, ), &&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta]
[-, ta, ), <=, convergence, ), &&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), )]
[), <=, convergence, ), &&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta]
[), &&, (, FastMath, ., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =, forward, ?]
[), {, ta, =, forward, ?, ta, +, convergence, :, ta, -, convergence, ;, ga, =, f, ., value, (]
[), ), {, ta, =, forward, ?, ta, +, convergence, :, ta, -, convergence, ;, ga, =, f, ., value]
[<=, convergence, ), ), {, ta, =, forward, ?, ta, +, convergence, :, ta, -, convergence, ;, ga, =, f]
[., abs, (, root, -, previousEventTime, ), <=, convergence, ), ), {, ta, =, forward, ?, ta, +, convergence, :]
[), <=, convergence, ), ), {, ta, =, forward, ?, ta, +, convergence, :, ta, -, convergence, ;, ga, =]
[-, previousEventTime, ), <=, convergence, ), ), {, ta, =, forward, ?, ta, +, convergence, :, ta, -, convergence, ;]
[), <=, convergence, ), ), {, ta, =, forward, ?, ta, +, convergence, :, ta, -, convergence, ;, ga, =]
[), ), {, ta, =, forward, ?, ta, +, convergence, :, ta, -, convergence, ;, ga, =, f, ., value]
[=, forward, ?, ta, +, convergence, :, ta, -, convergence, ;, ga, =, f, ., value, (, ta, ), ;]
[;, ga, =, f, ., value, (, ta, ), ;, --, i, ;, }, else, if, (, Double, ., isNaN]
[?, ta, +, convergence, :, ta, -, convergence, ;, ga, =, f, ., value, (, ta, ), ;, --, i]
[:, ta, -, convergence, ;, ga, =, f, ., value, (, ta, ), ;, --, i, ;, }, else, if]
[+, convergence, :, ta, -, convergence, ;, ga, =, f, ., value, (, ta, ), ;, --, i, ;, }]
[:, ta, -, convergence, ;, ga, =, f, ., value, (, ta, ), ;, --, i, ;, }, else, if]
[;, ga, =, f, ., value, (, ta, ), ;, --, i, ;, }, else, if, (, Double, ., isNaN]
[-, convergence, ;, ga, =, f, ., value, (, ta, ), ;, --, i, ;, }, else, if, (, Double]
[;, ga, =, f, ., value, (, ta, ), ;, --, i, ;, }, else, if, (, Double, ., isNaN]
[=, f, ., value, (, ta, ), ;, --, i, ;, }, else, if, (, Double, ., isNaN, (, previousEventTime]
[;, --, i, ;, }, else, if, (, Double, ., isNaN, (, previousEventTime, ), ||, (, FastMath, ., abs, (]
[., value, (, ta, ), ;, --, i, ;, }, else, if, (, Double, ., isNaN, (, previousEventTime, ), ||]
[), ;, --, i, ;, }, else, if, (, Double, ., isNaN, (, previousEventTime, ), ||, (, FastMath, ., abs]
[;, }, else, if, (, Double, ., isNaN, (, previousEventTime, ), ||, (, FastMath, ., abs, (, previousEventTime, -, root]
[;, }, else, if, (, Double, ., isNaN, (, previousEventTime, ), ||, (, FastMath, ., abs, (, previousEventTime, -, root]
[), {, pendingEventTime, =, root, ;, pendingEvent, =, true, ;, return, true, ;, }, else, {, ta, =, tb, ;]
[||, (, FastMath, ., abs, (, previousEventTime, -, root, ), >, convergence, ), ), {, pendingEventTime, =, root, ;, pendingEvent]
[., isNaN, (, previousEventTime, ), ||, (, FastMath, ., abs, (, previousEventTime, -, root, ), >, convergence, ), ), {]
[), ||, (, FastMath, ., abs, (, previousEventTime, -, root, ), >, convergence, ), ), {, pendingEventTime, =, root, ;]
[), {, pendingEventTime, =, root, ;, pendingEvent, =, true, ;, return, true, ;, }, else, {, ta, =, tb, ;]
[), ), {, pendingEventTime, =, root, ;, pendingEvent, =, true, ;, return, true, ;, }, else, {, ta, =, tb]
[>, convergence, ), ), {, pendingEventTime, =, root, ;, pendingEvent, =, true, ;, return, true, ;, }, else, {, ta]
[., abs, (, previousEventTime, -, root, ), >, convergence, ), ), {, pendingEventTime, =, root, ;, pendingEvent, =, true, ;]
[), >, convergence, ), ), {, pendingEventTime, =, root, ;, pendingEvent, =, true, ;, return, true, ;, }, else, {]
[-, root, ), >, convergence, ), ), {, pendingEventTime, =, root, ;, pendingEvent, =, true, ;, return, true, ;, }]
[), >, convergence, ), ), {, pendingEventTime, =, root, ;, pendingEvent, =, true, ;, return, true, ;, }, else, {]
[), ), {, pendingEventTime, =, root, ;, pendingEvent, =, true, ;, return, true, ;, }, else, {, ta, =, tb]
[=, root, ;, pendingEvent, =, true, ;, return, true, ;, }, else, {, ta, =, tb, ;, ga, =, gb]
[;, pendingEvent, =, true, ;, return, true, ;, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }]
[=, true, ;, return, true, ;, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, else]
[;, return, true, ;, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, else, {, ta]
[;, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, else, {, ta, =, tb, ;]
[=, tb, ;, ga, =, gb, ;, }, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }]
[;, ga, =, gb, ;, }, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, pendingEvent]
[=, gb, ;, }, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, pendingEvent, =, false]
[;, }, }, else, {, ta, =, tb, ;, ga, =, gb, ;, }, }, pendingEvent, =, false, ;, pendingEventTime]
[=, tb, ;, ga, =, gb, ;, }, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return]
[;, ga, =, gb, ;, }, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, false, ;]
[=, gb, ;, }, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, false, ;, }, catch]
[;, }, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, false, ;, }, catch, (, LocalMaxCountExceededException]
[=, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, false, ;, }, catch, (, LocalMaxCountExceededException, lmcee, ), {, throw]
[;, pendingEventTime, =, Double, ., NaN, ;, return, false, ;, }, catch, (, LocalMaxCountExceededException, lmcee, ), {, throw, lmcee, .]
[=, Double, ., NaN, ;, return, false, ;, }, catch, (, LocalMaxCountExceededException, lmcee, ), {, throw, lmcee, ., getException, (]
[;, return, false, ;, }, catch, (, LocalMaxCountExceededException, lmcee, ), {, throw, lmcee, ., getException, (, ), ;, }, }]
[., NaN, ;, return, false, ;, }, catch, (, LocalMaxCountExceededException, lmcee, ), {, throw, lmcee, ., getException, (, ), ;]
[;, }, catch, (, LocalMaxCountExceededException, lmcee, ), {, throw, lmcee, ., getException, (, ), ;, }, }, public, double, getEventTime]
[;, }, }, public, double, getEventTime, (, ), {, return, pendingEvent, ?, pendingEventTime, :, (, forward, ?, Double, ., POSITIVE_INFINITY]
[., getException, (, ), ;, }, }, public, double, getEventTime, (, ), {, return, pendingEvent, ?, pendingEventTime, :, (, forward]
[;, }, public, void, stepAccepted, (, final, double, t, ,, final, double, [, ], y, ), {, t0, =, t]
[?, pendingEventTime, :, (, forward, ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ), ;, }, public, void, stepAccepted, (]
[:, (, forward, ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ), ;, }, public, void, stepAccepted, (, final, double]
[;, }, public, void, stepAccepted, (, final, double, t, ,, final, double, [, ], y, ), {, t0, =, t]
[), ;, }, public, void, stepAccepted, (, final, double, t, ,, final, double, [, ], y, ), {, t0, =]
[?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ), ;, }, public, void, stepAccepted, (, final, double, t, ,, final]
[:, Double, ., NEGATIVE_INFINITY, ), ;, }, public, void, stepAccepted, (, final, double, t, ,, final, double, [, ], y]
[., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ), ;, }, public, void, stepAccepted, (, final, double, t, ,, final, double, []
[), ;, }, public, void, stepAccepted, (, final, double, t, ,, final, double, [, ], y, ), {, t0, =]
[., NEGATIVE_INFINITY, ), ;, }, public, void, stepAccepted, (, final, double, t, ,, final, double, [, ], y, ), {]
[=, t, ;, g0, =, handler, ., g, (, t, ,, y, ), ;, if, (, pendingEvent, &&, (, FastMath]
[;, g0, =, handler, ., g, (, t, ,, y, ), ;, if, (, pendingEvent, &&, (, FastMath, ., abs]
[=, handler, ., g, (, t, ,, y, ), ;, if, (, pendingEvent, &&, (, FastMath, ., abs, (, pendingEventTime]
[;, if, (, pendingEvent, &&, (, FastMath, ., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), {, previousEventTime]
[., g, (, t, ,, y, ), ;, if, (, pendingEvent, &&, (, FastMath, ., abs, (, pendingEventTime, -, t]
[,, y, ), ;, if, (, pendingEvent, &&, (, FastMath, ., abs, (, pendingEventTime, -, t, ), <=, convergence, )]
[), ;, if, (, pendingEvent, &&, (, FastMath, ., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), {]
[), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t, ,, y, ,]
[&&, (, FastMath, ., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), {, previousEventTime, =, t, ;, g0Positive]
[), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t, ,, y, ,]
[), ), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t, ,, y]
[<=, convergence, ), ), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t]
[., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;]
[), <=, convergence, ), ), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (]
[-, t, ), <=, convergence, ), ), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, .]
[), <=, convergence, ), ), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (]
[), ), {, previousEventTime, =, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t, ,, y]
[=, t, ;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t, ,, y, ,, !, (, increasing]
[;, g0Positive, =, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t, ,, y, ,, !, (, increasing, ^, forward]
[=, increasing, ;, nextAction, =, handler, ., eventOccurred, (, t, ,, y, ,, !, (, increasing, ^, forward, ), )]
[;, nextAction, =, handler, ., eventOccurred, (, t, ,, y, ,, !, (, increasing, ^, forward, ), ), ;, }]
[=, handler, ., eventOccurred, (, t, ,, y, ,, !, (, increasing, ^, forward, ), ), ;, }, else, {]
[;, }, else, {, g0Positive, =, g0, >=, 0, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, }]
[., eventOccurred, (, t, ,, y, ,, !, (, increasing, ^, forward, ), ), ;, }, else, {, g0Positive, =]
[,, y, ,, !, (, increasing, ^, forward, ), ), ;, }, else, {, g0Positive, =, g0, >=, 0, ;]
[,, !, (, increasing, ^, forward, ), ), ;, }, else, {, g0Positive, =, g0, >=, 0, ;, nextAction, =]
[), ;, }, else, {, g0Positive, =, g0, >=, 0, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }]
[), ;, }, else, {, g0Positive, =, g0, >=, 0, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }]
[), ), ;, }, else, {, g0Positive, =, g0, >=, 0, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;]
[^, forward, ), ), ;, }, else, {, g0Positive, =, g0, >=, 0, ;, nextAction, =, EventHandler, ., Action, .]
[), ), ;, }, else, {, g0Positive, =, g0, >=, 0, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;]
[=, g0, >=, 0, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, }, public, boolean, stop, (, )]
[;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, }, public, boolean, stop, (, ), {, return, nextAction, ==]
[>=, 0, ;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, }, public, boolean, stop, (, ), {, return]
[;, nextAction, =, EventHandler, ., Action, ., CONTINUE, ;, }, }, public, boolean, stop, (, ), {, return, nextAction, ==]
[=, EventHandler, ., Action, ., CONTINUE, ;, }, }, public, boolean, stop, (, ), {, return, nextAction, ==, EventHandler, .]
[;, }, }, public, boolean, stop, (, ), {, return, nextAction, ==, EventHandler, ., Action, ., STOP, ;, }, public]
[., CONTINUE, ;, }, }, public, boolean, stop, (, ), {, return, nextAction, ==, EventHandler, ., Action, ., STOP, ;]
[., Action, ., CONTINUE, ;, }, }, public, boolean, stop, (, ), {, return, nextAction, ==, EventHandler, ., Action, .]
[;, }, public, boolean, reset, (, final, double, t, ,, final, double, [, ], y, ), {, if, (, !]
[==, EventHandler, ., Action, ., STOP, ;, }, public, boolean, reset, (, final, double, t, ,, final, double, [, ]]
[;, }, public, boolean, reset, (, final, double, t, ,, final, double, [, ], y, ), {, if, (, !]
[., STOP, ;, }, public, boolean, reset, (, final, double, t, ,, final, double, [, ], y, ), {, if]
[., Action, ., STOP, ;, }, public, boolean, reset, (, final, double, t, ,, final, double, [, ], y, )]
[), {, return, false, ;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), {, handler, ., resetState]
[), {, return, false, ;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), {, handler, ., resetState]
[), ), {, return, false, ;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), {, handler, .]
[&&, (, FastMath, ., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), ), {, return, false, ;, }]
[), ), {, return, false, ;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), {, handler, .]
[), ), ), {, return, false, ;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), {, handler]
[<=, convergence, ), ), ), {, return, false, ;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, )]
[., abs, (, pendingEventTime, -, t, ), <=, convergence, ), ), ), {, return, false, ;, }, if, (, nextAction]
[), <=, convergence, ), ), ), {, return, false, ;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE]
[-, t, ), <=, convergence, ), ), ), {, return, false, ;, }, if, (, nextAction, ==, EventHandler, ., Action]
[), <=, convergence, ), ), ), {, return, false, ;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE]
[), ), ), {, return, false, ;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), {, handler]
[;, }, if, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), {, handler, ., resetState, (, t, ,, y]
[), {, handler, ., resetState, (, t, ,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, .]
[==, EventHandler, ., Action, ., RESET_STATE, ), {, handler, ., resetState, (, t, ,, y, ), ;, }, pendingEvent, =]
[), {, handler, ., resetState, (, t, ,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, .]
[., RESET_STATE, ), {, handler, ., resetState, (, t, ,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =]
[., Action, ., RESET_STATE, ), {, handler, ., resetState, (, t, ,, y, ), ;, }, pendingEvent, =, false, ;]
[;, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==, EventHandler, ., Action, .]
[., resetState, (, t, ,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return]
[,, y, ), ;, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==, EventHandler]
[), ;, }, pendingEvent, =, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==, EventHandler, ., Action]
[=, false, ;, pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), ||]
[;, pendingEventTime, =, Double, ., NaN, ;, return, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), ||, (, nextAction]
[=, Double, ., NaN, ;, return, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), ||, (, nextAction, ==, EventHandler]
[;, return, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), ||, (, nextAction, ==, EventHandler, ., Action, ., RESET_DERIVATIVES]
[., NaN, ;, return, (, nextAction, ==, EventHandler, ., Action, ., RESET_STATE, ), ||, (, nextAction, ==, EventHandler, ., Action]
[;, }, private, static, class, LocalMaxCountExceededException, extends, RuntimeException, {, private, static, final, long, serialVersionUID, =, 20120901L, ;, private, final, MaxCountExceededException]
[||, (, nextAction, ==, EventHandler, ., Action, ., RESET_DERIVATIVES, ), ;, }, private, static, class, LocalMaxCountExceededException, extends, RuntimeException, {, private]
[), ||, (, nextAction, ==, EventHandler, ., Action, ., RESET_DERIVATIVES, ), ;, }, private, static, class, LocalMaxCountExceededException, extends, RuntimeException, {]
[==, EventHandler, ., Action, ., RESET_STATE, ), ||, (, nextAction, ==, EventHandler, ., Action, ., RESET_DERIVATIVES, ), ;, }, private]
[), ||, (, nextAction, ==, EventHandler, ., Action, ., RESET_DERIVATIVES, ), ;, }, private, static, class, LocalMaxCountExceededException, extends, RuntimeException, {]
[., RESET_STATE, ), ||, (, nextAction, ==, EventHandler, ., Action, ., RESET_DERIVATIVES, ), ;, }, private, static, class, LocalMaxCountExceededException, extends]
[., Action, ., RESET_STATE, ), ||, (, nextAction, ==, EventHandler, ., Action, ., RESET_DERIVATIVES, ), ;, }, private, static, class]
[;, }, private, static, class, LocalMaxCountExceededException, extends, RuntimeException, {, private, static, final, long, serialVersionUID, =, 20120901L, ;, private, final, MaxCountExceededException]
[), ;, }, private, static, class, LocalMaxCountExceededException, extends, RuntimeException, {, private, static, final, long, serialVersionUID, =, 20120901L, ;, private, final]
[==, EventHandler, ., Action, ., RESET_DERIVATIVES, ), ;, }, private, static, class, LocalMaxCountExceededException, extends, RuntimeException, {, private, static, final, long]
[), ;, }, private, static, class, LocalMaxCountExceededException, extends, RuntimeException, {, private, static, final, long, serialVersionUID, =, 20120901L, ;, private, final]
[., RESET_DERIVATIVES, ), ;, }, private, static, class, LocalMaxCountExceededException, extends, RuntimeException, {, private, static, final, long, serialVersionUID, =, 20120901L, ;]
[., Action, ., RESET_DERIVATIVES, ), ;, }, private, static, class, LocalMaxCountExceededException, extends, RuntimeException, {, private, static, final, long, serialVersionUID, =]
[;, private, final, MaxCountExceededException, wrapped, ;, public, LocalMaxCountExceededException, (, final, MaxCountExceededException, exception, ), {, wrapped, =, exception, ;, }, public]
[=, exception, ;, }, public, MaxCountExceededException, getException, (, ), {, return, wrapped, ;, }, }, }]
[;, }, public, MaxCountExceededException, getException, (, ), {, return, wrapped, ;, }, }, }]
[;, }, }, }]
