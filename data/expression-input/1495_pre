[int, below, ;, private, final, int, above, ;, private, final, boolean, between, ;, public, UnicodeEscaper, (, ), {, this, (]
[;, private, final, int, above, ;, private, final, boolean, between, ;, public, UnicodeEscaper, (, ), {, this, (, 0, ,]
[;, private, final, int, above, ;, private, final, boolean, between, ;, public, UnicodeEscaper, (, ), {, this, (, 0, ,]
[above, ;, private, final, boolean, between, ;, public, UnicodeEscaper, (, ), {, this, (, 0, ,, Integer, ., MAX_VALUE, ,]
[true, ), ;, }, protected, UnicodeEscaper, (, final, int, below, ,, final, int, above, ,, final, boolean, between, ), {]
[true, ), ;, }, protected, UnicodeEscaper, (, final, int, below, ,, final, int, above, ,, final, boolean, between, ), {]
[protected, UnicodeEscaper, (, final, int, below, ,, final, int, above, ,, final, boolean, between, ), {, this, ., below, =]
[(, final, int, below, ,, final, int, above, ,, final, boolean, between, ), {, this, ., below, =, below, ;]
[(, final, int, below, ,, final, int, above, ,, final, boolean, between, ), {, this, ., below, =, below, ;]
[,, final, int, above, ,, final, boolean, between, ), {, this, ., below, =, below, ;, this, ., above, =]
[int, above, ,, final, boolean, between, ), {, this, ., below, =, below, ;, this, ., above, =, above, ;]
[int, above, ,, final, boolean, between, ), {, this, ., below, =, below, ;, this, ., above, =, above, ;]
[boolean, between, ), {, this, ., below, =, below, ;, this, ., above, =, above, ;, this, ., between, =]
[above, ;, this, ., between, =, between, ;, }, public, static, UnicodeEscaper, below, (, final, int, codepoint, ), {, return]
[this, ., between, =, between, ;, }, public, static, UnicodeEscaper, below, (, final, int, codepoint, ), {, return, outsideOf, (]
[between, =, between, ;, }, public, static, UnicodeEscaper, below, (, final, int, codepoint, ), {, return, outsideOf, (, codepoint, ,]
[between, =, between, ;, }, public, static, UnicodeEscaper, below, (, final, int, codepoint, ), {, return, outsideOf, (, codepoint, ,]
[(, codepoint, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, UnicodeEscaper, above, (, final, int, codepoint, ), {, return]
[,, Integer, ., MAX_VALUE, ), ;, }, public, static, UnicodeEscaper, above, (, final, int, codepoint, ), {, return, outsideOf, (]
[., MAX_VALUE, ), ;, }, public, static, UnicodeEscaper, above, (, final, int, codepoint, ), {, return, outsideOf, (, 0, ,]
[,, codepoint, ), ;, }, public, static, UnicodeEscaper, outsideOf, (, final, int, codepointLow, ,, final, int, codepointHigh, ), {, return]
[;, }, public, static, UnicodeEscaper, outsideOf, (, final, int, codepointLow, ,, final, int, codepointHigh, ), {, return, new, UnicodeEscaper, (]
[public, static, UnicodeEscaper, outsideOf, (, final, int, codepointLow, ,, final, int, codepointHigh, ), {, return, new, UnicodeEscaper, (, codepointLow, ,]
[UnicodeEscaper, outsideOf, (, final, int, codepointLow, ,, final, int, codepointHigh, ), {, return, new, UnicodeEscaper, (, codepointLow, ,, codepointHigh, ,]
[,, false, ), ;, }, public, static, UnicodeEscaper, between, (, final, int, codepointLow, ,, final, int, codepointHigh, ), {, return]
[;, }, public, static, UnicodeEscaper, between, (, final, int, codepointLow, ,, final, int, codepointHigh, ), {, return, new, UnicodeEscaper, (]
[public, static, UnicodeEscaper, between, (, final, int, codepointLow, ,, final, int, codepointHigh, ), {, return, new, UnicodeEscaper, (, codepointLow, ,]
[UnicodeEscaper, between, (, final, int, codepointLow, ,, final, int, codepointHigh, ), {, return, new, UnicodeEscaper, (, codepointLow, ,, codepointHigh, ,]
[}, @, Override, public, boolean, translate, (, final, int, codepoint, ,, final, Writer, out, ), throws, IOException, {, if, (]
[translate, (, final, int, codepoint, ,, final, Writer, out, ), throws, IOException, {, if, (, between, ), {, if, (]
[translate, (, final, int, codepoint, ,, final, Writer, out, ), throws, IOException, {, if, (, between, ), {, if, (]
[translate, (, final, int, codepoint, ,, final, Writer, out, ), throws, IOException, {, if, (, between, ), {, if, (]
[final, int, codepoint, ,, final, Writer, out, ), throws, IOException, {, if, (, between, ), {, if, (, codepoint, <]
[codepoint, ,, final, Writer, out, ), throws, IOException, {, if, (, between, ), {, if, (, codepoint, <, below, ||]
[codepoint, ,, final, Writer, out, ), throws, IOException, {, if, (, between, ), {, if, (, codepoint, <, below, ||]
[final, Writer, out, ), throws, IOException, {, if, (, between, ), {, if, (, codepoint, <, below, ||, codepoint, >]
[throws, IOException, {, if, (, between, ), {, if, (, codepoint, <, below, ||, codepoint, >, above, ), {, return]
[if, (, codepoint, <, below, ||, codepoint, >, above, ), {, return, false, ;, }, }, else, {, if, (]
[if, (, codepoint, <, below, ||, codepoint, >, above, ), {, return, false, ;, }, }, else, {, if, (]
[if, (, codepoint, <, below, ||, codepoint, >, above, ), {, return, false, ;, }, }, else, {, if, (]
[codepoint, <, below, ||, codepoint, >, above, ), {, return, false, ;, }, }, else, {, if, (, codepoint, >=]
[below, ||, codepoint, >, above, ), {, return, false, ;, }, }, else, {, if, (, codepoint, >=, below, &&]
[below, ||, codepoint, >, above, ), {, return, false, ;, }, }, else, {, if, (, codepoint, >=, below, &&]
[codepoint, >, above, ), {, return, false, ;, }, }, else, {, if, (, codepoint, >=, below, &&, codepoint, <=]
[{, return, false, ;, }, }, else, {, if, (, codepoint, >=, below, &&, codepoint, <=, above, ), {, return]
[else, {, if, (, codepoint, >=, below, &&, codepoint, <=, above, ), {, return, false, ;, }, }, if, (]
[else, {, if, (, codepoint, >=, below, &&, codepoint, <=, above, ), {, return, false, ;, }, }, if, (]
[if, (, codepoint, >=, below, &&, codepoint, <=, above, ), {, return, false, ;, }, }, if, (, codepoint, >]
[>=, below, &&, codepoint, <=, above, ), {, return, false, ;, }, }, if, (, codepoint, >, 0xffff, ), {]
[>=, below, &&, codepoint, <=, above, ), {, return, false, ;, }, }, if, (, codepoint, >, 0xffff, ), {]
[<=, above, ), {, return, false, ;, }, }, if, (, codepoint, >, 0xffff, ), {, out, ., write, (]
[), {, return, false, ;, }, }, if, (, codepoint, >, 0xffff, ), {, out, ., write, (, toUtf16Escape, (]
[(, codepoint, >, 0xffff, ), {, out, ., write, (, toUtf16Escape, (, codepoint, ), ), ;, }, else, if, (]
[(, codepoint, >, 0xffff, ), {, out, ., write, (, toUtf16Escape, (, codepoint, ), ), ;, }, else, if, (]
[>, 0xffff, ), {, out, ., write, (, toUtf16Escape, (, codepoint, ), ), ;, }, else, if, (, codepoint, >]
[{, out, ., write, (, toUtf16Escape, (, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xfff, ), {]
[{, out, ., write, (, toUtf16Escape, (, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xfff, ), {]
[(, toUtf16Escape, (, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xfff, ), {, out, ., write, (]
[(, toUtf16Escape, (, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xfff, ), {, out, ., write, (]
[(, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xfff, ), {, out, ., write, (, "\\u", +]
[), ), ;, }, else, if, (, codepoint, >, 0xfff, ), {, out, ., write, (, "\\u", +, hex, (]
[>, 0xfff, ), {, out, ., write, (, "\\u", +, hex, (, codepoint, ), ), ;, }, else, if, (]
[>, 0xfff, ), {, out, ., write, (, "\\u", +, hex, (, codepoint, ), ), ;, }, else, if, (]
[), {, out, ., write, (, "\\u", +, hex, (, codepoint, ), ), ;, }, else, if, (, codepoint, >]
[., write, (, "\\u", +, hex, (, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xff, ), {]
[., write, (, "\\u", +, hex, (, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xff, ), {]
[+, hex, (, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xff, ), {, out, ., write, (]
[+, hex, (, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xff, ), {, out, ., write, (]
[(, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xff, ), {, out, ., write, (, "\\u0", +]
[), ), ;, }, else, if, (, codepoint, >, 0xff, ), {, out, ., write, (, "\\u0", +, hex, (]
[>, 0xff, ), {, out, ., write, (, "\\u0", +, hex, (, codepoint, ), ), ;, }, else, if, (]
[>, 0xff, ), {, out, ., write, (, "\\u0", +, hex, (, codepoint, ), ), ;, }, else, if, (]
[), {, out, ., write, (, "\\u0", +, hex, (, codepoint, ), ), ;, }, else, if, (, codepoint, >]
[., write, (, "\\u0", +, hex, (, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xf, ), {]
[., write, (, "\\u0", +, hex, (, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xf, ), {]
[+, hex, (, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xf, ), {, out, ., write, (]
[+, hex, (, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xf, ), {, out, ., write, (]
[(, codepoint, ), ), ;, }, else, if, (, codepoint, >, 0xf, ), {, out, ., write, (, "\\u00", +]
[), ), ;, }, else, if, (, codepoint, >, 0xf, ), {, out, ., write, (, "\\u00", +, hex, (]
[codepoint, >, 0xf, ), {, out, ., write, (, "\\u00", +, hex, (, codepoint, ), ), ;, }, else, {]
[codepoint, >, 0xf, ), {, out, ., write, (, "\\u00", +, hex, (, codepoint, ), ), ;, }, else, {]
[{, out, ., write, (, "\\u00", +, hex, (, codepoint, ), ), ;, }, else, {, out, ., write, (]
[{, out, ., write, (, "\\u00", +, hex, (, codepoint, ), ), ;, }, else, {, out, ., write, (]
[., write, (, "\\u00", +, hex, (, codepoint, ), ), ;, }, else, {, out, ., write, (, "\\u000", +]
[(, "\\u00", +, hex, (, codepoint, ), ), ;, }, else, {, out, ., write, (, "\\u000", +, hex, (]
[), ), ;, }, else, {, out, ., write, (, "\\u000", +, hex, (, codepoint, ), ), ;, }, return]
[(, codepoint, ), ), ;, }, return, true, ;, }, protected, String, toUtf16Escape, (, final, int, codepoint, ), {, return]
[(, codepoint, ), ), ;, }, return, true, ;, }, protected, String, toUtf16Escape, (, final, int, codepoint, ), {, return]
[), ), ;, }, return, true, ;, }, protected, String, toUtf16Escape, (, final, int, codepoint, ), {, return, "\\u", +]
[;, }, return, true, ;, }, protected, String, toUtf16Escape, (, final, int, codepoint, ), {, return, "\\u", +, hex, (]
