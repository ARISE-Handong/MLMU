[Node, ;, import, java, ., util, ., List, ;, class, NamedType, extends, ProxyObjectType, {, private, static, final, long, serialVersionUID, =]
[;, private, final, int, charno, ;, private, Predicate, <, JSType, >, validator, ;, private, List, <, PropertyContinuation, >, propertyContinuations, =]
[NamedType, (, JSTypeRegistry, registry, ,, String, reference, ,, String, sourceName, ,, int, lineno, ,, int, charno, ), {, super, (]
[JSTypeRegistry, registry, ,, String, reference, ,, String, sourceName, ,, int, lineno, ,, int, charno, ), {, super, (, registry, ,]
[JSTypeRegistry, registry, ,, String, reference, ,, String, sourceName, ,, int, lineno, ,, int, charno, ), {, super, (, registry, ,]
[reference, ,, String, sourceName, ,, int, lineno, ,, int, charno, ), {, super, (, registry, ,, registry, ., getNativeObjectType, (]
[reference, ,, String, sourceName, ,, int, lineno, ,, int, charno, ), {, super, (, registry, ,, registry, ., getNativeObjectType, (]
[lineno, ,, int, charno, ), {, super, (, registry, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;]
[lineno, ,, int, charno, ), {, super, (, registry, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;]
[), {, super, (, registry, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, Preconditions, ., checkNotNull, (]
[(, registry, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, Preconditions, ., checkNotNull, (, reference, ), ;]
[(, registry, ,, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, Preconditions, ., checkNotNull, (, reference, ), ;]
[., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, Preconditions, ., checkNotNull, (, reference, ), ;, this, ., reference, =]
[(, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, Preconditions, ., checkNotNull, (, reference, ), ;, this, ., reference, =, reference, ;]
[(, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, Preconditions, ., checkNotNull, (, reference, ), ;, this, ., reference, =, reference, ;]
[), ), ;, Preconditions, ., checkNotNull, (, reference, ), ;, this, ., reference, =, reference, ;, this, ., sourceName, =]
[;, Preconditions, ., checkNotNull, (, reference, ), ;, this, ., reference, =, reference, ;, this, ., sourceName, =, sourceName, ;]
[;, Preconditions, ., checkNotNull, (, reference, ), ;, this, ., reference, =, reference, ;, this, ., sourceName, =, sourceName, ;]
[(, reference, ), ;, this, ., reference, =, reference, ;, this, ., sourceName, =, sourceName, ;, this, ., lineno, =]
[), ;, this, ., reference, =, reference, ;, this, ., sourceName, =, sourceName, ;, this, ., lineno, =, lineno, ;]
[), ;, this, ., reference, =, reference, ;, this, ., sourceName, =, sourceName, ;, this, ., lineno, =, lineno, ;]
[reference, =, reference, ;, this, ., sourceName, =, sourceName, ;, this, ., lineno, =, lineno, ;, this, ., charno, =]
[@, Override, boolean, defineProperty, (, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, if, (]
[Override, boolean, defineProperty, (, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, if, (, !]
[JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, if, (, !, isResolved, (, ), ), {, if, (]
[JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, if, (, !, isResolved, (, ), ), {, if, (]
[,, boolean, inferred, ,, Node, propertyNode, ), {, if, (, !, isResolved, (, ), ), {, if, (, propertyContinuations, ==]
[,, Node, propertyNode, ), {, if, (, !, isResolved, (, ), ), {, if, (, propertyContinuations, ==, null, ), {]
[propertyNode, ), {, if, (, !, isResolved, (, ), ), {, if, (, propertyContinuations, ==, null, ), {, propertyContinuations, =]
[propertyNode, ), {, if, (, !, isResolved, (, ), ), {, if, (, propertyContinuations, ==, null, ), {, propertyContinuations, =]
[(, ), ), {, if, (, propertyContinuations, ==, null, ), {, propertyContinuations, =, Lists, ., newArrayList, (, ), ;, }]
[(, ), ), {, if, (, propertyContinuations, ==, null, ), {, propertyContinuations, =, Lists, ., newArrayList, (, ), ;, }]
[if, (, propertyContinuations, ==, null, ), {, propertyContinuations, =, Lists, ., newArrayList, (, ), ;, }, propertyContinuations, ., add, (]
[==, null, ), {, propertyContinuations, =, Lists, ., newArrayList, (, ), ;, }, propertyContinuations, ., add, (, new, PropertyContinuation, (]
[), {, propertyContinuations, =, Lists, ., newArrayList, (, ), ;, }, propertyContinuations, ., add, (, new, PropertyContinuation, (, propertyName, ,]
[propertyContinuations, =, Lists, ., newArrayList, (, ), ;, }, propertyContinuations, ., add, (, new, PropertyContinuation, (, propertyName, ,, type, ,]
[Lists, ., newArrayList, (, ), ;, }, propertyContinuations, ., add, (, new, PropertyContinuation, (, propertyName, ,, type, ,, inferred, ,]
[;, }, propertyContinuations, ., add, (, new, PropertyContinuation, (, propertyName, ,, type, ,, inferred, ,, propertyNode, ), ), ;, return]
[new, PropertyContinuation, (, propertyName, ,, type, ,, inferred, ,, propertyNode, ), ), ;, return, true, ;, }, else, {, return]
[new, PropertyContinuation, (, propertyName, ,, type, ,, inferred, ,, propertyNode, ), ), ;, return, true, ;, }, else, {, return]
[,, type, ,, inferred, ,, propertyNode, ), ), ;, return, true, ;, }, else, {, return, super, ., defineProperty, (]
[,, inferred, ,, propertyNode, ), ), ;, return, true, ;, }, else, {, return, super, ., defineProperty, (, propertyName, ,]
[,, propertyNode, ), ), ;, return, true, ;, }, else, {, return, super, ., defineProperty, (, propertyName, ,, type, ,]
[), ), ;, return, true, ;, }, else, {, return, super, ., defineProperty, (, propertyName, ,, type, ,, inferred, ,]
[propertyName, ,, type, ,, inferred, ,, propertyNode, ), ;, }, }, private, void, finishPropertyContinuations, (, ), {, ObjectType, referencedObjType, =]
[propertyNode, ), ;, }, }, private, void, finishPropertyContinuations, (, ), {, ObjectType, referencedObjType, =, getReferencedObjTypeInternal, (, ), ;, if, (]
[propertyNode, ), ;, }, }, private, void, finishPropertyContinuations, (, ), {, ObjectType, referencedObjType, =, getReferencedObjTypeInternal, (, ), ;, if, (]
[propertyNode, ), ;, }, }, private, void, finishPropertyContinuations, (, ), {, ObjectType, referencedObjType, =, getReferencedObjTypeInternal, (, ), ;, if, (]
[;, }, }, private, void, finishPropertyContinuations, (, ), {, ObjectType, referencedObjType, =, getReferencedObjTypeInternal, (, ), ;, if, (, referencedObjType, !=]
[}, private, void, finishPropertyContinuations, (, ), {, ObjectType, referencedObjType, =, getReferencedObjTypeInternal, (, ), ;, if, (, referencedObjType, !=, null, &&]
[private, void, finishPropertyContinuations, (, ), {, ObjectType, referencedObjType, =, getReferencedObjTypeInternal, (, ), ;, if, (, referencedObjType, !=, null, &&, !]
[private, void, finishPropertyContinuations, (, ), {, ObjectType, referencedObjType, =, getReferencedObjTypeInternal, (, ), ;, if, (, referencedObjType, !=, null, &&, !]
[getReferencedObjTypeInternal, (, ), ;, if, (, referencedObjType, !=, null, &&, !, referencedObjType, ., isUnknownType, (, ), ), {, if, (]
[getReferencedObjTypeInternal, (, ), ;, if, (, referencedObjType, !=, null, &&, !, referencedObjType, ., isUnknownType, (, ), ), {, if, (]
[), ;, if, (, referencedObjType, !=, null, &&, !, referencedObjType, ., isUnknownType, (, ), ), {, if, (, propertyContinuations, !=]
[!, referencedObjType, ., isUnknownType, (, ), ), {, if, (, propertyContinuations, !=, null, ), {, for, (, PropertyContinuation, c, :]
[isUnknownType, (, ), ), {, if, (, propertyContinuations, !=, null, ), {, for, (, PropertyContinuation, c, :, propertyContinuations, ), {]
[isUnknownType, (, ), ), {, if, (, propertyContinuations, !=, null, ), {, for, (, PropertyContinuation, c, :, propertyContinuations, ), {]
[{, if, (, propertyContinuations, !=, null, ), {, for, (, PropertyContinuation, c, :, propertyContinuations, ), {, c, ., commit, (]
[), {, for, (, PropertyContinuation, c, :, propertyContinuations, ), {, c, ., commit, (, this, ), ;, }, }, }]
[for, (, PropertyContinuation, c, :, propertyContinuations, ), {, c, ., commit, (, this, ), ;, }, }, }, propertyContinuations, =]
[commit, (, this, ), ;, }, }, }, propertyContinuations, =, null, ;, }, public, JSType, getReferencedType, (, ), {, return]
[JSType, getReferencedType, (, ), {, return, getReferencedTypeInternal, (, ), ;, }, @, Override, public, String, getReferenceName, (, ), {, return]
[public, String, getReferenceName, (, ), {, return, reference, ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, return]
[String, toStringHelper, (, boolean, forAnnotations, ), {, return, reference, ;, }, @, Override, public, boolean, hasReferenceName, (, ), {, return]
[@, Override, public, boolean, hasReferenceName, (, ), {, return, true, ;, }, @, Override, boolean, isNamedType, (, ), {, return]
[@, Override, boolean, isNamedType, (, ), {, return, true, ;, }, @, Override, public, boolean, isNominalType, (, ), {, return]
[Override, public, boolean, isNominalType, (, ), {, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[Override, public, boolean, isNominalType, (, ), {, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[;, }, @, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, boolean, resolved, =]
[@, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, boolean, resolved, =, resolveViaRegistry, (]
[JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, boolean, resolved, =, resolveViaRegistry, (, t, ,]
[,, StaticScope, <, JSType, >, enclosing, ), {, boolean, resolved, =, resolveViaRegistry, (, t, ,, enclosing, ), ;, if, (]
[enclosing, ), {, boolean, resolved, =, resolveViaRegistry, (, t, ,, enclosing, ), ;, if, (, detectInheritanceCycle, (, ), ), {]
[{, boolean, resolved, =, resolveViaRegistry, (, t, ,, enclosing, ), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (]
[t, ,, enclosing, ), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }, if, (]
[), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }, if, (, resolved, ), {]
[), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }, if, (, resolved, ), {]
[detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }, if, (, resolved, ), {, super, ., resolveInternal, (]
[), ), {, handleTypeCycle, (, t, ), ;, }, if, (, resolved, ), {, super, ., resolveInternal, (, t, ,]
[handleTypeCycle, (, t, ), ;, }, if, (, resolved, ), {, super, ., resolveInternal, (, t, ,, enclosing, ), ;]
[}, if, (, resolved, ), {, super, ., resolveInternal, (, t, ,, enclosing, ), ;, finishPropertyContinuations, (, ), ;, return]
[}, if, (, resolved, ), {, super, ., resolveInternal, (, t, ,, enclosing, ), ;, finishPropertyContinuations, (, ), ;, return]
[}, if, (, resolved, ), {, super, ., resolveInternal, (, t, ,, enclosing, ), ;, finishPropertyContinuations, (, ), ;, return]
[super, ., resolveInternal, (, t, ,, enclosing, ), ;, finishPropertyContinuations, (, ), ;, return, registry, ., isLastGeneration, (, ), ?]
[t, ,, enclosing, ), ;, finishPropertyContinuations, (, ), ;, return, registry, ., isLastGeneration, (, ), ?, getReferencedType, (, ), :]
[), ;, finishPropertyContinuations, (, ), ;, return, registry, ., isLastGeneration, (, ), ?, getReferencedType, (, ), :, this, ;, }]
[finishPropertyContinuations, (, ), ;, return, registry, ., isLastGeneration, (, ), ?, getReferencedType, (, ), :, this, ;, }, resolveViaProperties, (]
[), ;, return, registry, ., isLastGeneration, (, ), ?, getReferencedType, (, ), :, this, ;, }, resolveViaProperties, (, t, ,]
[isLastGeneration, (, ), ?, getReferencedType, (, ), :, this, ;, }, resolveViaProperties, (, t, ,, enclosing, ), ;, if, (]
[(, ), :, this, ;, }, resolveViaProperties, (, t, ,, enclosing, ), ;, if, (, detectInheritanceCycle, (, ), ), {]
[:, this, ;, }, resolveViaProperties, (, t, ,, enclosing, ), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (]
[resolveViaProperties, (, t, ,, enclosing, ), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }]
[resolveViaProperties, (, t, ,, enclosing, ), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }]
[enclosing, ), ;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }, super, ., resolveInternal, (]
[;, if, (, detectInheritanceCycle, (, ), ), {, handleTypeCycle, (, t, ), ;, }, super, ., resolveInternal, (, t, ,]
[), ), {, handleTypeCycle, (, t, ), ;, }, super, ., resolveInternal, (, t, ,, enclosing, ), ;, if, (]
[t, ), ;, }, super, ., resolveInternal, (, t, ,, enclosing, ), ;, if, (, isResolved, (, ), ), {]
[resolveInternal, (, t, ,, enclosing, ), ;, if, (, isResolved, (, ), ), {, finishPropertyContinuations, (, ), ;, }, return]
[resolveInternal, (, t, ,, enclosing, ), ;, if, (, isResolved, (, ), ), {, finishPropertyContinuations, (, ), ;, }, return]
[resolveInternal, (, t, ,, enclosing, ), ;, if, (, isResolved, (, ), ), {, finishPropertyContinuations, (, ), ;, }, return]
[;, if, (, isResolved, (, ), ), {, finishPropertyContinuations, (, ), ;, }, return, registry, ., isLastGeneration, (, ), ?]
[(, ), ), {, finishPropertyContinuations, (, ), ;, }, return, registry, ., isLastGeneration, (, ), ?, getReferencedType, (, ), :]
[this, ;, }, private, boolean, resolveViaRegistry, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, JSType, type, =]
[this, ;, }, private, boolean, resolveViaRegistry, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, JSType, type, =]
[boolean, resolveViaRegistry, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, JSType, type, =, registry, ., getType, (]
[,, StaticScope, <, JSType, >, enclosing, ), {, JSType, type, =, registry, ., getType, (, reference, ), ;, if, (]
[,, StaticScope, <, JSType, >, enclosing, ), {, JSType, type, =, registry, ., getType, (, reference, ), ;, if, (]
[<, JSType, >, enclosing, ), {, JSType, type, =, registry, ., getType, (, reference, ), ;, if, (, type, !=]
[enclosing, ), {, JSType, type, =, registry, ., getType, (, reference, ), ;, if, (, type, !=, null, ), {]
[{, JSType, type, =, registry, ., getType, (, reference, ), ;, if, (, type, !=, null, ), {, setReferencedAndResolvedType, (]
[type, =, registry, ., getType, (, reference, ), ;, if, (, type, !=, null, ), {, setReferencedAndResolvedType, (, type, ,]
[registry, ., getType, (, reference, ), ;, if, (, type, !=, null, ), {, setReferencedAndResolvedType, (, type, ,, t, ,]
[reference, ), ;, if, (, type, !=, null, ), {, setReferencedAndResolvedType, (, type, ,, t, ,, enclosing, ), ;, return]
[(, type, !=, null, ), {, setReferencedAndResolvedType, (, type, ,, t, ,, enclosing, ), ;, return, true, ;, }, return]
[false, ;, }, private, void, resolveViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, JSType, value, =]
[}, private, void, resolveViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, JSType, value, =, lookupViaProperties, (]
[void, resolveViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, JSType, value, =, lookupViaProperties, (, t, ,]
[,, StaticScope, <, JSType, >, enclosing, ), {, JSType, value, =, lookupViaProperties, (, t, ,, enclosing, ), ;, if, (]
[,, StaticScope, <, JSType, >, enclosing, ), {, JSType, value, =, lookupViaProperties, (, t, ,, enclosing, ), ;, if, (]
[,, StaticScope, <, JSType, >, enclosing, ), {, JSType, value, =, lookupViaProperties, (, t, ,, enclosing, ), ;, if, (]
[,, StaticScope, <, JSType, >, enclosing, ), {, JSType, value, =, lookupViaProperties, (, t, ,, enclosing, ), ;, if, (]
[<, JSType, >, enclosing, ), {, JSType, value, =, lookupViaProperties, (, t, ,, enclosing, ), ;, if, (, value, !=]
[>, enclosing, ), {, JSType, value, =, lookupViaProperties, (, t, ,, enclosing, ), ;, if, (, value, !=, null, &&]
[>, enclosing, ), {, JSType, value, =, lookupViaProperties, (, t, ,, enclosing, ), ;, if, (, value, !=, null, &&]
[=, lookupViaProperties, (, t, ,, enclosing, ), ;, if, (, value, !=, null, &&, value, ., isFunctionType, (, ), &&]
[lookupViaProperties, (, t, ,, enclosing, ), ;, if, (, value, !=, null, &&, value, ., isFunctionType, (, ), &&, (]
[lookupViaProperties, (, t, ,, enclosing, ), ;, if, (, value, !=, null, &&, value, ., isFunctionType, (, ), &&, (]
[lookupViaProperties, (, t, ,, enclosing, ), ;, if, (, value, !=, null, &&, value, ., isFunctionType, (, ), &&, (]
[;, if, (, value, !=, null, &&, value, ., isFunctionType, (, ), &&, (, value, ., isConstructor, (, ), ||]
[;, if, (, value, !=, null, &&, value, ., isFunctionType, (, ), &&, (, value, ., isConstructor, (, ), ||]
[), &&, (, value, ., isConstructor, (, ), ||, value, ., isInterface, (, ), ), ), {, FunctionType, functionType, =]
[), &&, (, value, ., isConstructor, (, ), ||, value, ., isInterface, (, ), ), ), {, FunctionType, functionType, =]
[(, ), ||, value, ., isInterface, (, ), ), ), {, FunctionType, functionType, =, value, ., toMaybeFunctionType, (, ), ;]
[||, value, ., isInterface, (, ), ), ), {, FunctionType, functionType, =, value, ., toMaybeFunctionType, (, ), ;, setReferencedAndResolvedType, (]
[||, value, ., isInterface, (, ), ), ), {, FunctionType, functionType, =, value, ., toMaybeFunctionType, (, ), ;, setReferencedAndResolvedType, (]
[), ), {, FunctionType, functionType, =, value, ., toMaybeFunctionType, (, ), ;, setReferencedAndResolvedType, (, functionType, ., getInstanceType, (, ), ,]
[{, FunctionType, functionType, =, value, ., toMaybeFunctionType, (, ), ;, setReferencedAndResolvedType, (, functionType, ., getInstanceType, (, ), ,, t, ,]
[(, ), ;, setReferencedAndResolvedType, (, functionType, ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (]
[(, ), ;, setReferencedAndResolvedType, (, functionType, ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (]
[(, ), ;, setReferencedAndResolvedType, (, functionType, ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (]
[;, setReferencedAndResolvedType, (, functionType, ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (, value, !=]
[(, functionType, ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (, value, !=, null, &&]
[(, functionType, ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (, value, !=, null, &&]
[t, ,, enclosing, ), ;, }, else, if, (, value, !=, null, &&, value, ., isNoObjectType, (, ), ), {]
[enclosing, ), ;, }, else, if, (, value, !=, null, &&, value, ., isNoObjectType, (, ), ), {, setReferencedAndResolvedType, (]
[enclosing, ), ;, }, else, if, (, value, !=, null, &&, value, ., isNoObjectType, (, ), ), {, setReferencedAndResolvedType, (]
[enclosing, ), ;, }, else, if, (, value, !=, null, &&, value, ., isNoObjectType, (, ), ), {, setReferencedAndResolvedType, (]
[else, if, (, value, !=, null, &&, value, ., isNoObjectType, (, ), ), {, setReferencedAndResolvedType, (, registry, ., getNativeFunctionType, (]
[else, if, (, value, !=, null, &&, value, ., isNoObjectType, (, ), ), {, setReferencedAndResolvedType, (, registry, ., getNativeFunctionType, (]
[isNoObjectType, (, ), ), {, setReferencedAndResolvedType, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ., getInstanceType, (, ), ,]
[), ), {, setReferencedAndResolvedType, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ., getInstanceType, (, ), ,, t, ,]
[getNativeFunctionType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (]
[getNativeFunctionType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (]
[), ., getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (, value, instanceof, EnumType, ), {]
[getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (, value, instanceof, EnumType, ), {, setReferencedAndResolvedType, (]
[getInstanceType, (, ), ,, t, ,, enclosing, ), ;, }, else, if, (, value, instanceof, EnumType, ), {, setReferencedAndResolvedType, (]
[(, ), ,, t, ,, enclosing, ), ;, }, else, if, (, value, instanceof, EnumType, ), {, setReferencedAndResolvedType, (, (]
[t, ,, enclosing, ), ;, }, else, if, (, value, instanceof, EnumType, ), {, setReferencedAndResolvedType, (, (, (, EnumType, )]
[if, (, value, instanceof, EnumType, ), {, setReferencedAndResolvedType, (, (, (, EnumType, ), value, ), ., getElementsType, (, ), ,]
[value, instanceof, EnumType, ), {, setReferencedAndResolvedType, (, (, (, EnumType, ), value, ), ., getElementsType, (, ), ,, t, ,]
[(, (, (, EnumType, ), value, ), ., getElementsType, (, ), ,, t, ,, enclosing, ), ;, }, else, {]
[(, EnumType, ), value, ), ., getElementsType, (, ), ,, t, ,, enclosing, ), ;, }, else, {, handleUnresolvedType, (]
[), value, ), ., getElementsType, (, ), ,, t, ,, enclosing, ), ;, }, else, {, handleUnresolvedType, (, t, ,]
[), value, ), ., getElementsType, (, ), ,, t, ,, enclosing, ), ;, }, else, {, handleUnresolvedType, (, t, ,]
[), value, ), ., getElementsType, (, ), ,, t, ,, enclosing, ), ;, }, else, {, handleUnresolvedType, (, t, ,]
[), ., getElementsType, (, ), ,, t, ,, enclosing, ), ;, }, else, {, handleUnresolvedType, (, t, ,, value, ==]
[getElementsType, (, ), ,, t, ,, enclosing, ), ;, }, else, {, handleUnresolvedType, (, t, ,, value, ==, null, ||]
[getElementsType, (, ), ,, t, ,, enclosing, ), ;, }, else, {, handleUnresolvedType, (, t, ,, value, ==, null, ||]
[}, private, JSType, lookupViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, String, [, ], componentNames, =]
[}, private, JSType, lookupViaProperties, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, String, [, ], componentNames, =]
[(, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, String, [, ], componentNames, =, reference, ., split, (]
[t, ,, StaticScope, <, JSType, >, enclosing, ), {, String, [, ], componentNames, =, reference, ., split, (, "\\.", ,]
[,, StaticScope, <, JSType, >, enclosing, ), {, String, [, ], componentNames, =, reference, ., split, (, "\\.", ,, -]
[enclosing, ), {, String, [, ], componentNames, =, reference, ., split, (, "\\.", ,, -, 1, ), ;, if, (]
[enclosing, ), {, String, [, ], componentNames, =, reference, ., split, (, "\\.", ,, -, 1, ), ;, if, (]
[enclosing, ), {, String, [, ], componentNames, =, reference, ., split, (, "\\.", ,, -, 1, ), ;, if, (]
[enclosing, ), {, String, [, ], componentNames, =, reference, ., split, (, "\\.", ,, -, 1, ), ;, if, (]
[{, String, [, ], componentNames, =, reference, ., split, (, "\\.", ,, -, 1, ), ;, if, (, componentNames, []
[., split, (, "\\.", ,, -, 1, ), ;, if, (, componentNames, [, 0, ], ., length, (, ), ==]
[,, -, 1, ), ;, if, (, componentNames, [, 0, ], ., length, (, ), ==, 0, ), {, return]
[0, ], ., length, (, ), ==, 0, ), {, return, null, ;, }, StaticSlot, <, JSType, >, slot, =]
[0, ], ., length, (, ), ==, 0, ), {, return, null, ;, }, StaticSlot, <, JSType, >, slot, =]
[(, ), ==, 0, ), {, return, null, ;, }, StaticSlot, <, JSType, >, slot, =, enclosing, ., getSlot, (]
[(, ), ==, 0, ), {, return, null, ;, }, StaticSlot, <, JSType, >, slot, =, enclosing, ., getSlot, (]
[==, 0, ), {, return, null, ;, }, StaticSlot, <, JSType, >, slot, =, enclosing, ., getSlot, (, componentNames, []
[;, }, StaticSlot, <, JSType, >, slot, =, enclosing, ., getSlot, (, componentNames, [, 0, ], ), ;, if, (]
[;, }, StaticSlot, <, JSType, >, slot, =, enclosing, ., getSlot, (, componentNames, [, 0, ], ), ;, if, (]
[StaticSlot, <, JSType, >, slot, =, enclosing, ., getSlot, (, componentNames, [, 0, ], ), ;, if, (, slot, ==]
[slot, =, enclosing, ., getSlot, (, componentNames, [, 0, ], ), ;, if, (, slot, ==, null, ), {, return]
[componentNames, [, 0, ], ), ;, if, (, slot, ==, null, ), {, return, null, ;, }, JSType, slotType, =]
[componentNames, [, 0, ], ), ;, if, (, slot, ==, null, ), {, return, null, ;, }, JSType, slotType, =]
[slot, ==, null, ), {, return, null, ;, }, JSType, slotType, =, slot, ., getType, (, ), ;, if, (]
[slot, ==, null, ), {, return, null, ;, }, JSType, slotType, =, slot, ., getType, (, ), ;, if, (]
[slot, ==, null, ), {, return, null, ;, }, JSType, slotType, =, slot, ., getType, (, ), ;, if, (]
[slot, ==, null, ), {, return, null, ;, }, JSType, slotType, =, slot, ., getType, (, ), ;, if, (]
[null, ), {, return, null, ;, }, JSType, slotType, =, slot, ., getType, (, ), ;, if, (, slotType, ==]
[{, return, null, ;, }, JSType, slotType, =, slot, ., getType, (, ), ;, if, (, slotType, ==, null, ||]
[{, return, null, ;, }, JSType, slotType, =, slot, ., getType, (, ), ;, if, (, slotType, ==, null, ||]
[slotType, =, slot, ., getType, (, ), ;, if, (, slotType, ==, null, ||, slotType, ., isAllType, (, ), ||]
[slotType, =, slot, ., getType, (, ), ;, if, (, slotType, ==, null, ||, slotType, ., isAllType, (, ), ||]
[if, (, slotType, ==, null, ||, slotType, ., isAllType, (, ), ||, slotType, ., isNoType, (, ), ), {, return]
[slotType, ., isAllType, (, ), ||, slotType, ., isNoType, (, ), ), {, return, null, ;, }, JSType, value, =]
[isAllType, (, ), ||, slotType, ., isNoType, (, ), ), {, return, null, ;, }, JSType, value, =, getTypedefType, (]
[), ||, slotType, ., isNoType, (, ), ), {, return, null, ;, }, JSType, value, =, getTypedefType, (, t, ,]
[slotType, ., isNoType, (, ), ), {, return, null, ;, }, JSType, value, =, getTypedefType, (, t, ,, slot, ,]
[slotType, ., isNoType, (, ), ), {, return, null, ;, }, JSType, value, =, getTypedefType, (, t, ,, slot, ,]
[isNoType, (, ), ), {, return, null, ;, }, JSType, value, =, getTypedefType, (, t, ,, slot, ,, componentNames, []
[null, ;, }, JSType, value, =, getTypedefType, (, t, ,, slot, ,, componentNames, [, 0, ], ), ;, if, (]
[null, ;, }, JSType, value, =, getTypedefType, (, t, ,, slot, ,, componentNames, [, 0, ], ), ;, if, (]
[}, JSType, value, =, getTypedefType, (, t, ,, slot, ,, componentNames, [, 0, ], ), ;, if, (, value, ==]
[getTypedefType, (, t, ,, slot, ,, componentNames, [, 0, ], ), ;, if, (, value, ==, null, ), {, return]
[0, ], ), ;, if, (, value, ==, null, ), {, return, null, ;, }, for, (, int, i, =]
[), ;, if, (, value, ==, null, ), {, return, null, ;, }, for, (, int, i, =, 1, ;]
[), ;, if, (, value, ==, null, ), {, return, null, ;, }, for, (, int, i, =, 1, ;]
[if, (, value, ==, null, ), {, return, null, ;, }, for, (, int, i, =, 1, ;, i, <]
[if, (, value, ==, null, ), {, return, null, ;, }, for, (, int, i, =, 1, ;, i, <]
[null, ), {, return, null, ;, }, for, (, int, i, =, 1, ;, i, <, componentNames, ., length, ;]
[null, ), {, return, null, ;, }, for, (, int, i, =, 1, ;, i, <, componentNames, ., length, ;]
[for, (, int, i, =, 1, ;, i, <, componentNames, ., length, ;, i, ++, ), {, ObjectType, parentClass, =]
[for, (, int, i, =, 1, ;, i, <, componentNames, ., length, ;, i, ++, ), {, ObjectType, parentClass, =]
[=, 1, ;, i, <, componentNames, ., length, ;, i, ++, ), {, ObjectType, parentClass, =, ObjectType, ., cast, (]
[componentNames, ., length, ;, i, ++, ), {, ObjectType, parentClass, =, ObjectType, ., cast, (, value, ), ;, if, (]
[componentNames, ., length, ;, i, ++, ), {, ObjectType, parentClass, =, ObjectType, ., cast, (, value, ), ;, if, (]
[length, ;, i, ++, ), {, ObjectType, parentClass, =, ObjectType, ., cast, (, value, ), ;, if, (, parentClass, ==]
[), {, ObjectType, parentClass, =, ObjectType, ., cast, (, value, ), ;, if, (, parentClass, ==, null, ), {, return]
[ObjectType, ., cast, (, value, ), ;, if, (, parentClass, ==, null, ), {, return, null, ;, }, if, (]
[ObjectType, ., cast, (, value, ), ;, if, (, parentClass, ==, null, ), {, return, null, ;, }, if, (]
[ObjectType, ., cast, (, value, ), ;, if, (, parentClass, ==, null, ), {, return, null, ;, }, if, (]
[ObjectType, ., cast, (, value, ), ;, if, (, parentClass, ==, null, ), {, return, null, ;, }, if, (]
[cast, (, value, ), ;, if, (, parentClass, ==, null, ), {, return, null, ;, }, if, (, componentNames, []
[parentClass, ==, null, ), {, return, null, ;, }, if, (, componentNames, [, i, ], ., length, (, ), ==]
[{, return, null, ;, }, if, (, componentNames, [, i, ], ., length, (, ), ==, 0, ), {, return]
[;, }, if, (, componentNames, [, i, ], ., length, (, ), ==, 0, ), {, return, null, ;, }]
[if, (, componentNames, [, i, ], ., length, (, ), ==, 0, ), {, return, null, ;, }, value, =]
[if, (, componentNames, [, i, ], ., length, (, ), ==, 0, ), {, return, null, ;, }, value, =]
[i, ], ., length, (, ), ==, 0, ), {, return, null, ;, }, value, =, parentClass, ., getPropertyType, (]
[i, ], ., length, (, ), ==, 0, ), {, return, null, ;, }, value, =, parentClass, ., getPropertyType, (]
[., length, (, ), ==, 0, ), {, return, null, ;, }, value, =, parentClass, ., getPropertyType, (, componentNames, []
[), {, return, null, ;, }, value, =, parentClass, ., getPropertyType, (, componentNames, [, i, ], ), ;, }, return]
[}, private, void, setReferencedAndResolvedType, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, if, (]
[}, private, void, setReferencedAndResolvedType, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, if, (]
[void, setReferencedAndResolvedType, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, if, (, validator, !=]
[JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, if, (, validator, !=, null, ), {]
[JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, enclosing, ), {, if, (, validator, !=, null, ), {]
[t, ,, StaticScope, <, JSType, >, enclosing, ), {, if, (, validator, !=, null, ), {, validator, ., apply, (]
[JSType, >, enclosing, ), {, if, (, validator, !=, null, ), {, validator, ., apply, (, type, ), ;, }]
[enclosing, ), {, if, (, validator, !=, null, ), {, validator, ., apply, (, type, ), ;, }, setReferencedType, (]
[if, (, validator, !=, null, ), {, validator, ., apply, (, type, ), ;, }, setReferencedType, (, type, ), ;]
[validator, !=, null, ), {, validator, ., apply, (, type, ), ;, }, setReferencedType, (, type, ), ;, checkEnumElementCycle, (]
[), {, validator, ., apply, (, type, ), ;, }, setReferencedType, (, type, ), ;, checkEnumElementCycle, (, t, ), ;]
[validator, ., apply, (, type, ), ;, }, setReferencedType, (, type, ), ;, checkEnumElementCycle, (, t, ), ;, checkProtoCycle, (]
[(, type, ), ;, }, setReferencedType, (, type, ), ;, checkEnumElementCycle, (, t, ), ;, checkProtoCycle, (, t, ), ;]
[), ;, }, setReferencedType, (, type, ), ;, checkEnumElementCycle, (, t, ), ;, checkProtoCycle, (, t, ), ;, setResolvedTypeInternal, (]
[(, t, ), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, handleTypeCycle, (, ErrorReporter, t, ), {]
[), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, handleTypeCycle, (, ErrorReporter, t, ), {, setReferencedType, (]
[), ;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, handleTypeCycle, (, ErrorReporter, t, ), {, setReferencedType, (]
[getReferencedType, (, ), ), ;, }, private, void, handleTypeCycle, (, ErrorReporter, t, ), {, setReferencedType, (, registry, ., getNativeObjectType, (]
[getReferencedType, (, ), ), ;, }, private, void, handleTypeCycle, (, ErrorReporter, t, ), {, setReferencedType, (, registry, ., getNativeObjectType, (]
[private, void, handleTypeCycle, (, ErrorReporter, t, ), {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;]
[private, void, handleTypeCycle, (, ErrorReporter, t, ), {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;]
[ErrorReporter, t, ), {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, t, ., warning, (]
[ErrorReporter, t, ), {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, t, ., warning, (]
[), {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, t, ., warning, (, "Cycle detected in inheritance chain of type ", +]
[setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, t, ., warning, (, "Cycle detected in inheritance chain of type ", +, reference, ,]
[registry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, t, ., warning, (, "Cycle detected in inheritance chain of type ", +, reference, ,, sourceName, ,]
[getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, t, ., warning, (, "Cycle detected in inheritance chain of type ", +, reference, ,, sourceName, ,, lineno, ,]
[., UNKNOWN_TYPE, ), ), ;, t, ., warning, (, "Cycle detected in inheritance chain of type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;]
[), ), ;, t, ., warning, (, "Cycle detected in inheritance chain of type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, setResolvedTypeInternal, (]
[;, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, private, void, checkEnumElementCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =]
[), ;, }, private, void, checkEnumElementCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (]
[), ;, }, private, void, checkEnumElementCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (]
[), ;, }, private, void, checkEnumElementCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (]
[void, checkEnumElementCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (, referencedType, instanceof, EnumElementType, &&]
[void, checkEnumElementCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (, referencedType, instanceof, EnumElementType, &&]
[void, checkEnumElementCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (, referencedType, instanceof, EnumElementType, &&]
[checkEnumElementCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (, referencedType, instanceof, EnumElementType, &&, (]
[t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (, referencedType, instanceof, EnumElementType, &&, (, (, EnumElementType, )]
[(, ), ;, if, (, referencedType, instanceof, EnumElementType, &&, (, (, EnumElementType, ), referencedType, ), ., getPrimitiveType, (, ), ==]
[if, (, referencedType, instanceof, EnumElementType, &&, (, (, EnumElementType, ), referencedType, ), ., getPrimitiveType, (, ), ==, this, ), {]
[referencedType, instanceof, EnumElementType, &&, (, (, EnumElementType, ), referencedType, ), ., getPrimitiveType, (, ), ==, this, ), {, handleTypeCycle, (]
[), {, handleTypeCycle, (, t, ), ;, }, }, private, void, checkProtoCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =]
[;, }, }, private, void, checkProtoCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (]
[;, }, }, private, void, checkProtoCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (]
[}, private, void, checkProtoCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (, referencedType, ==]
[checkProtoCycle, (, ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (, referencedType, ==, this, ), {]
[ErrorReporter, t, ), {, JSType, referencedType, =, getReferencedType, (, ), ;, if, (, referencedType, ==, this, ), {, handleTypeCycle, (]
[handleTypeCycle, (, t, ), ;, }, }, private, void, handleUnresolvedType, (, ErrorReporter, t, ,, boolean, ignoreForwardReferencedTypes, ), {, if, (]
[handleTypeCycle, (, t, ), ;, }, }, private, void, handleUnresolvedType, (, ErrorReporter, t, ,, boolean, ignoreForwardReferencedTypes, ), {, if, (]
[(, ErrorReporter, t, ,, boolean, ignoreForwardReferencedTypes, ), {, if, (, registry, ., isLastGeneration, (, ), ), {, boolean, isForwardDeclared, =]
[(, ErrorReporter, t, ,, boolean, ignoreForwardReferencedTypes, ), {, if, (, registry, ., isLastGeneration, (, ), ), {, boolean, isForwardDeclared, =]
[t, ,, boolean, ignoreForwardReferencedTypes, ), {, if, (, registry, ., isLastGeneration, (, ), ), {, boolean, isForwardDeclared, =, ignoreForwardReferencedTypes, &&]
[t, ,, boolean, ignoreForwardReferencedTypes, ), {, if, (, registry, ., isLastGeneration, (, ), ), {, boolean, isForwardDeclared, =, ignoreForwardReferencedTypes, &&]
[), {, if, (, registry, ., isLastGeneration, (, ), ), {, boolean, isForwardDeclared, =, ignoreForwardReferencedTypes, &&, registry, ., isForwardDeclaredType, (]
[., isLastGeneration, (, ), ), {, boolean, isForwardDeclared, =, ignoreForwardReferencedTypes, &&, registry, ., isForwardDeclaredType, (, reference, ), ;, if, (]
[., isLastGeneration, (, ), ), {, boolean, isForwardDeclared, =, ignoreForwardReferencedTypes, &&, registry, ., isForwardDeclaredType, (, reference, ), ;, if, (]
[isLastGeneration, (, ), ), {, boolean, isForwardDeclared, =, ignoreForwardReferencedTypes, &&, registry, ., isForwardDeclaredType, (, reference, ), ;, if, (, !]
[), ), {, boolean, isForwardDeclared, =, ignoreForwardReferencedTypes, &&, registry, ., isForwardDeclaredType, (, reference, ), ;, if, (, !, isForwardDeclared, &&]
[), ), {, boolean, isForwardDeclared, =, ignoreForwardReferencedTypes, &&, registry, ., isForwardDeclaredType, (, reference, ), ;, if, (, !, isForwardDeclared, &&]
[&&, registry, ., isForwardDeclaredType, (, reference, ), ;, if, (, !, isForwardDeclared, &&, registry, ., isLastGeneration, (, ), ), {]
[&&, registry, ., isForwardDeclaredType, (, reference, ), ;, if, (, !, isForwardDeclared, &&, registry, ., isLastGeneration, (, ), ), {]
[(, reference, ), ;, if, (, !, isForwardDeclared, &&, registry, ., isLastGeneration, (, ), ), {, t, ., warning, (]
[(, reference, ), ;, if, (, !, isForwardDeclared, &&, registry, ., isLastGeneration, (, ), ), {, t, ., warning, (]
[), ;, if, (, !, isForwardDeclared, &&, registry, ., isLastGeneration, (, ), ), {, t, ., warning, (, "Bad type annotation. Unknown type ", +]
[if, (, !, isForwardDeclared, &&, registry, ., isLastGeneration, (, ), ), {, t, ., warning, (, "Bad type annotation. Unknown type ", +, reference, ,]
[!, isForwardDeclared, &&, registry, ., isLastGeneration, (, ), ), {, t, ., warning, (, "Bad type annotation. Unknown type ", +, reference, ,, sourceName, ,]
[&&, registry, ., isLastGeneration, (, ), ), {, t, ., warning, (, "Bad type annotation. Unknown type ", +, reference, ,, sourceName, ,, lineno, ,]
[), {, t, ., warning, (, "Bad type annotation. Unknown type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, }, else, {]
[t, ., warning, (, "Bad type annotation. Unknown type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, }, else, {, setReferencedType, (]
[t, ., warning, (, "Bad type annotation. Unknown type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, }, else, {, setReferencedType, (]
["Bad type annotation. Unknown type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, }, else, {, setReferencedType, (, registry, ., getNativeObjectType, (]
["Bad type annotation. Unknown type ", +, reference, ,, sourceName, ,, lineno, ,, charno, ), ;, }, else, {, setReferencedType, (, registry, ., getNativeObjectType, (]
[charno, ), ;, }, else, {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, if, (]
[charno, ), ;, }, else, {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, if, (]
[charno, ), ;, }, else, {, setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, if, (]
[setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, if, (, registry, ., isLastGeneration, (, ), &&]
[setReferencedType, (, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, if, (, registry, ., isLastGeneration, (, ), &&]
[registry, ., getNativeObjectType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, if, (, registry, ., isLastGeneration, (, ), &&, validator, !=]
[(, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, if, (, registry, ., isLastGeneration, (, ), &&, validator, !=, null, ), {]
[(, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, if, (, registry, ., isLastGeneration, (, ), &&, validator, !=, null, ), {]
[), ), ;, if, (, registry, ., isLastGeneration, (, ), &&, validator, !=, null, ), {, validator, ., apply, (]
[isLastGeneration, (, ), &&, validator, !=, null, ), {, validator, ., apply, (, getReferencedType, (, ), ), ;, }, }]
[), &&, validator, !=, null, ), {, validator, ., apply, (, getReferencedType, (, ), ), ;, }, }, setResolvedTypeInternal, (]
[., apply, (, getReferencedType, (, ), ), ;, }, }, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, else, {]
[(, getReferencedType, (, ), ), ;, }, }, setResolvedTypeInternal, (, getReferencedType, (, ), ), ;, }, else, {, setResolvedTypeInternal, (]
[}, JSType, getTypedefType, (, ErrorReporter, t, ,, StaticSlot, <, JSType, >, slot, ,, String, name, ), {, JSType, type, =]
[}, JSType, getTypedefType, (, ErrorReporter, t, ,, StaticSlot, <, JSType, >, slot, ,, String, name, ), {, JSType, type, =]
[<, JSType, >, slot, ,, String, name, ), {, JSType, type, =, slot, ., getType, (, ), ;, if, (]
[<, JSType, >, slot, ,, String, name, ), {, JSType, type, =, slot, ., getType, (, ), ;, if, (]
[>, slot, ,, String, name, ), {, JSType, type, =, slot, ., getType, (, ), ;, if, (, type, !=]
[name, ), {, JSType, type, =, slot, ., getType, (, ), ;, if, (, type, !=, null, ), {, return]
[JSType, type, =, slot, ., getType, (, ), ;, if, (, type, !=, null, ), {, return, type, ;, }]
[=, slot, ., getType, (, ), ;, if, (, type, !=, null, ), {, return, type, ;, }, handleUnresolvedType, (]
[., getType, (, ), ;, if, (, type, !=, null, ), {, return, type, ;, }, handleUnresolvedType, (, t, ,]
[;, if, (, type, !=, null, ), {, return, type, ;, }, handleUnresolvedType, (, t, ,, true, ), ;, return]
[;, return, null, ;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, if, (]
[;, return, null, ;, }, @, Override, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, if, (]
[boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, if, (, this, ., isResolved, (, ), ), {, return]
[boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, if, (, this, ., isResolved, (, ), ), {, return]
[<, JSType, >, validator, ), {, if, (, this, ., isResolved, (, ), ), {, return, super, ., setValidator, (]
[if, (, this, ., isResolved, (, ), ), {, return, super, ., setValidator, (, validator, ), ;, }, else, {]
[if, (, this, ., isResolved, (, ), ), {, return, super, ., setValidator, (, validator, ), ;, }, else, {]
[isResolved, (, ), ), {, return, super, ., setValidator, (, validator, ), ;, }, else, {, this, ., validator, =]
[), {, return, super, ., setValidator, (, validator, ), ;, }, else, {, this, ., validator, =, validator, ;, return]
[final, Node, propertyNode, ;, private, PropertyContinuation, (, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {]
[final, Node, propertyNode, ;, private, PropertyContinuation, (, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {]
[private, PropertyContinuation, (, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, this, ., propertyName, =]
[(, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, this, ., propertyName, =, propertyName, ;]
[(, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, this, ., propertyName, =, propertyName, ;]
[JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {, this, ., propertyName, =, propertyName, ;, this, ., type, =]
[,, boolean, inferred, ,, Node, propertyNode, ), {, this, ., propertyName, =, propertyName, ;, this, ., type, =, type, ;]
[,, boolean, inferred, ,, Node, propertyNode, ), {, this, ., propertyName, =, propertyName, ;, this, ., type, =, type, ;]
[Node, propertyNode, ), {, this, ., propertyName, =, propertyName, ;, this, ., type, =, type, ;, this, ., inferred, =]
[), {, this, ., propertyName, =, propertyName, ;, this, ., type, =, type, ;, this, ., inferred, =, inferred, ;]
[), {, this, ., propertyName, =, propertyName, ;, this, ., type, =, type, ;, this, ., inferred, =, inferred, ;]
[propertyName, =, propertyName, ;, this, ., type, =, type, ;, this, ., inferred, =, inferred, ;, this, ., propertyNode, =]
[this, ., inferred, =, inferred, ;, this, ., propertyNode, =, propertyNode, ;, }, void, commit, (, ObjectType, target, ), {]
[this, ., inferred, =, inferred, ;, this, ., propertyNode, =, propertyNode, ;, }, void, commit, (, ObjectType, target, ), {]
[inferred, ;, this, ., propertyNode, =, propertyNode, ;, }, void, commit, (, ObjectType, target, ), {, target, ., defineProperty, (]
[this, ., propertyNode, =, propertyNode, ;, }, void, commit, (, ObjectType, target, ), {, target, ., defineProperty, (, propertyName, ,]
[propertyNode, =, propertyNode, ;, }, void, commit, (, ObjectType, target, ), {, target, ., defineProperty, (, propertyName, ,, type, ,]
[propertyNode, ;, }, void, commit, (, ObjectType, target, ), {, target, ., defineProperty, (, propertyName, ,, type, ,, inferred, ,]
