[;, private, static, final, long, MILLIS_PER_YEAR, =, (, long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, ), ;, private, static]
[;, private, static, final, long, MILLIS_PER_YEAR, =, (, long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, ), ;, private, static]
[;, private, static, final, long, MILLIS_PER_MONTH, =, (, long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, /, 12, ), ;]
[;, private, static, final, long, MILLIS_PER_MONTH, =, (, long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, /, 12, ), ;]
[), ;, private, static, final, long, MILLIS_PER_MONTH, =, (, long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, /, 12, )]
[*, DateTimeConstants, ., MILLIS_PER_DAY, ), ;, private, static, final, long, MILLIS_PER_MONTH, =, (, long, ), (, 365.25, *, DateTimeConstants, .]
[), ;, private, static, final, long, MILLIS_PER_MONTH, =, (, long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, /, 12, )]
[., MILLIS_PER_DAY, ), ;, private, static, final, long, MILLIS_PER_MONTH, =, (, long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, /]
[;, private, static, final, int, MIN_YEAR, =, -, 292269054, ;, private, static, final, int, MAX_YEAR, =, 292272992, ;, private, static]
[;, private, static, final, int, MIN_YEAR, =, -, 292269054, ;, private, static, final, int, MAX_YEAR, =, 292272992, ;, private, static]
[), ;, private, static, final, int, MIN_YEAR, =, -, 292269054, ;, private, static, final, int, MAX_YEAR, =, 292272992, ;, private]
[/, 12, ), ;, private, static, final, int, MIN_YEAR, =, -, 292269054, ;, private, static, final, int, MAX_YEAR, =, 292272992]
[*, DateTimeConstants, ., MILLIS_PER_DAY, /, 12, ), ;, private, static, final, int, MIN_YEAR, =, -, 292269054, ;, private, static, final]
[/, 12, ), ;, private, static, final, int, MIN_YEAR, =, -, 292269054, ;, private, static, final, int, MAX_YEAR, =, 292272992]
[., MILLIS_PER_DAY, /, 12, ), ;, private, static, final, int, MIN_YEAR, =, -, 292269054, ;, private, static, final, int, MAX_YEAR]
[), ;, private, static, final, int, MIN_YEAR, =, -, 292269054, ;, private, static, final, int, MAX_YEAR, =, 292272992, ;, private]
[;, private, static, final, int, MAX_YEAR, =, 292272992, ;, private, static, final, JulianChronology, INSTANCE_UTC, ;, private, static, final, Map, <]
[;, private, static, final, int, MAX_YEAR, =, 292272992, ;, private, static, final, JulianChronology, INSTANCE_UTC, ;, private, static, final, Map, <]
[;, private, static, final, JulianChronology, INSTANCE_UTC, ;, private, static, final, Map, <, DateTimeZone, ,, JulianChronology, [, ], >, cCache, =]
[;, static, {, INSTANCE_UTC, =, getInstance, (, DateTimeZone, ., UTC, ), ;, }, static, int, adjustYearForSet, (, int, year, )]
[=, getInstance, (, DateTimeZone, ., UTC, ), ;, }, static, int, adjustYearForSet, (, int, year, ), {, if, (, year]
[;, }, static, int, adjustYearForSet, (, int, year, ), {, if, (, year, <=, 0, ), {, if, (, year]
[), ;, }, static, int, adjustYearForSet, (, int, year, ), {, if, (, year, <=, 0, ), {, if, (]
[., UTC, ), ;, }, static, int, adjustYearForSet, (, int, year, ), {, if, (, year, <=, 0, ), {]
[), {, if, (, year, ==, 0, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,, Integer]
[<=, 0, ), {, if, (, year, ==, 0, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, )]
[), {, if, (, year, ==, 0, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,, Integer]
[), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,, Integer, ., valueOf, (, year, ), ,, null]
[==, 0, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,, Integer, ., valueOf, (, year, )]
[), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,, Integer, ., valueOf, (, year, ), ,, null]
[;, }, year, ++, ;, }, return, year, ;, }, public, static, JulianChronology, getInstanceUTC, (, ), {, return, INSTANCE_UTC, ;]
[,, Integer, ., valueOf, (, year, ), ,, null, ,, null, ), ;, }, year, ++, ;, }, return, year]
[., year, (, ), ,, Integer, ., valueOf, (, year, ), ,, null, ,, null, ), ;, }, year, ++]
[,, null, ,, null, ), ;, }, year, ++, ;, }, return, year, ;, }, public, static, JulianChronology, getInstanceUTC, (]
[., valueOf, (, year, ), ,, null, ,, null, ), ;, }, year, ++, ;, }, return, year, ;, }]
[), ,, null, ,, null, ), ;, }, year, ++, ;, }, return, year, ;, }, public, static, JulianChronology, getInstanceUTC]
[,, null, ), ;, }, year, ++, ;, }, return, year, ;, }, public, static, JulianChronology, getInstanceUTC, (, ), {]
[), ;, }, year, ++, ;, }, return, year, ;, }, public, static, JulianChronology, getInstanceUTC, (, ), {, return, INSTANCE_UTC]
[;, }, return, year, ;, }, public, static, JulianChronology, getInstanceUTC, (, ), {, return, INSTANCE_UTC, ;, }, public, static, JulianChronology]
[++, ;, }, return, year, ;, }, public, static, JulianChronology, getInstanceUTC, (, ), {, return, INSTANCE_UTC, ;, }, public, static]
[;, }, public, static, JulianChronology, getInstanceUTC, (, ), {, return, INSTANCE_UTC, ;, }, public, static, JulianChronology, getInstance, (, ), {]
[;, }, public, static, JulianChronology, getInstance, (, ), {, return, getInstance, (, DateTimeZone, ., getDefault, (, ), ,, 4, )]
[;, }, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ), {, return, getInstance, (, zone, ,, 4, ), ;, }]
[,, 4, ), ;, }, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ), {, return, getInstance, (, zone, ,, 4]
[., getDefault, (, ), ,, 4, ), ;, }, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ), {, return, getInstance]
[), ;, }, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ), {, return, getInstance, (, zone, ,, 4, ), ;]
[;, }, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ,, int, minDaysInFirstWeek, ), {, if, (, zone, ==, null, )]
[,, 4, ), ;, }, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ,, int, minDaysInFirstWeek, ), {, if, (, zone]
[), ;, }, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ,, int, minDaysInFirstWeek, ), {, if, (, zone, ==, null]
[), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, JulianChronology, chrono, ;, synchronized, (, cCache, ), {, JulianChronology]
[==, null, ), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, JulianChronology, chrono, ;, synchronized, (, cCache, )]
[), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, JulianChronology, chrono, ;, synchronized, (, cCache, ), {, JulianChronology]
[=, DateTimeZone, ., getDefault, (, ), ;, }, JulianChronology, chrono, ;, synchronized, (, cCache, ), {, JulianChronology, [, ], chronos]
[;, }, JulianChronology, chrono, ;, synchronized, (, cCache, ), {, JulianChronology, [, ], chronos, =, cCache, ., get, (, zone]
[., getDefault, (, ), ;, }, JulianChronology, chrono, ;, synchronized, (, cCache, ), {, JulianChronology, [, ], chronos, =, cCache]
[), {, JulianChronology, [, ], chronos, =, cCache, ., get, (, zone, ), ;, if, (, chronos, ==, null, )]
[;, if, (, chronos, ==, null, ), {, chronos, =, new, JulianChronology, [, 7, ], ;, cCache, ., put, (]
[., get, (, zone, ), ;, if, (, chronos, ==, null, ), {, chronos, =, new, JulianChronology, [, 7, ]]
[), ;, if, (, chronos, ==, null, ), {, chronos, =, new, JulianChronology, [, 7, ], ;, cCache, ., put]
[), {, chronos, =, new, JulianChronology, [, 7, ], ;, cCache, ., put, (, zone, ,, chronos, ), ;, }]
[==, null, ), {, chronos, =, new, JulianChronology, [, 7, ], ;, cCache, ., put, (, zone, ,, chronos, )]
[), {, chronos, =, new, JulianChronology, [, 7, ], ;, cCache, ., put, (, zone, ,, chronos, ), ;, }]
[=, new, JulianChronology, [, 7, ], ;, cCache, ., put, (, zone, ,, chronos, ), ;, }, try, {, chrono]
[;, cCache, ., put, (, zone, ,, chronos, ), ;, }, try, {, chrono, =, chronos, [, minDaysInFirstWeek, -, 1]
[], ;, cCache, ., put, (, zone, ,, chronos, ), ;, }, try, {, chrono, =, chronos, [, minDaysInFirstWeek, -]
[;, }, try, {, chrono, =, chronos, [, minDaysInFirstWeek, -, 1, ], ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {]
[., put, (, zone, ,, chronos, ), ;, }, try, {, chrono, =, chronos, [, minDaysInFirstWeek, -, 1, ], ;]
[,, chronos, ), ;, }, try, {, chrono, =, chronos, [, minDaysInFirstWeek, -, 1, ], ;, }, catch, (, ArrayIndexOutOfBoundsException]
[), ;, }, try, {, chrono, =, chronos, [, minDaysInFirstWeek, -, 1, ], ;, }, catch, (, ArrayIndexOutOfBoundsException, e, )]
[=, chronos, [, minDaysInFirstWeek, -, 1, ], ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, IllegalArgumentException, (, "Invalid min days in first week: "]
[;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, IllegalArgumentException, (, "Invalid min days in first week: ", +, minDaysInFirstWeek, ), ;, }, if, (]
[[, minDaysInFirstWeek, -, 1, ], ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, IllegalArgumentException, (, "Invalid min days in first week: ", +, minDaysInFirstWeek]
[], ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, IllegalArgumentException, (, "Invalid min days in first week: ", +, minDaysInFirstWeek, ), ;, }, if]
[-, 1, ], ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, IllegalArgumentException, (, "Invalid min days in first week: ", +, minDaysInFirstWeek, ), ;]
[], ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, IllegalArgumentException, (, "Invalid min days in first week: ", +, minDaysInFirstWeek, ), ;, }, if]
[;, }, if, (, chrono, ==, null, ), {, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =]
[), ;, }, if, (, chrono, ==, null, ), {, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono]
[+, minDaysInFirstWeek, ), ;, }, if, (, chrono, ==, null, ), {, if, (, zone, ==, DateTimeZone, ., UTC, )]
[), ;, }, if, (, chrono, ==, null, ), {, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono]
[), {, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =, new, JulianChronology, (, null, ,, null, ,]
[==, null, ), {, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =, new, JulianChronology, (, null, ,]
[), {, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =, new, JulianChronology, (, null, ,, null, ,]
[), {, chrono, =, new, JulianChronology, (, null, ,, null, ,, minDaysInFirstWeek, ), ;, }, else, {, chrono, =, getInstance]
[==, DateTimeZone, ., UTC, ), {, chrono, =, new, JulianChronology, (, null, ,, null, ,, minDaysInFirstWeek, ), ;, }, else]
[), {, chrono, =, new, JulianChronology, (, null, ,, null, ,, minDaysInFirstWeek, ), ;, }, else, {, chrono, =, getInstance]
[., UTC, ), {, chrono, =, new, JulianChronology, (, null, ,, null, ,, minDaysInFirstWeek, ), ;, }, else, {, chrono]
[=, new, JulianChronology, (, null, ,, null, ,, minDaysInFirstWeek, ), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, .]
[;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, minDaysInFirstWeek, ), ;, chrono, =, new, JulianChronology, (]
[,, null, ,, minDaysInFirstWeek, ), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, minDaysInFirstWeek, ), ;]
[,, minDaysInFirstWeek, ), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, minDaysInFirstWeek, ), ;, chrono, =]
[), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, minDaysInFirstWeek, ), ;, chrono, =, new, JulianChronology]
[=, getInstance, (, DateTimeZone, ., UTC, ,, minDaysInFirstWeek, ), ;, chrono, =, new, JulianChronology, (, ZonedChronology, ., getInstance, (, chrono]
[;, chrono, =, new, JulianChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, null, ,, minDaysInFirstWeek, ), ;]
[,, minDaysInFirstWeek, ), ;, chrono, =, new, JulianChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, null, ,]
[., UTC, ,, minDaysInFirstWeek, ), ;, chrono, =, new, JulianChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,]
[), ;, chrono, =, new, JulianChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, null, ,, minDaysInFirstWeek, )]
[=, new, JulianChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, null, ,, minDaysInFirstWeek, ), ;, }, chronos]
[;, }, chronos, [, minDaysInFirstWeek, -, 1, ], =, chrono, ;, }, }, return, chrono, ;, }, JulianChronology, (, Chronology]
[,, null, ,, minDaysInFirstWeek, ), ;, }, chronos, [, minDaysInFirstWeek, -, 1, ], =, chrono, ;, }, }, return, chrono]
[., getInstance, (, chrono, ,, zone, ), ,, null, ,, minDaysInFirstWeek, ), ;, }, chronos, [, minDaysInFirstWeek, -, 1, ]]
[,, zone, ), ,, null, ,, minDaysInFirstWeek, ), ;, }, chronos, [, minDaysInFirstWeek, -, 1, ], =, chrono, ;, }]
[), ,, null, ,, minDaysInFirstWeek, ), ;, }, chronos, [, minDaysInFirstWeek, -, 1, ], =, chrono, ;, }, }, return]
[,, minDaysInFirstWeek, ), ;, }, chronos, [, minDaysInFirstWeek, -, 1, ], =, chrono, ;, }, }, return, chrono, ;, }]
[), ;, }, chronos, [, minDaysInFirstWeek, -, 1, ], =, chrono, ;, }, }, return, chrono, ;, }, JulianChronology, (]
[=, chrono, ;, }, }, return, chrono, ;, }, JulianChronology, (, Chronology, base, ,, Object, param, ,, int, minDaysInFirstWeek, )]
[[, minDaysInFirstWeek, -, 1, ], =, chrono, ;, }, }, return, chrono, ;, }, JulianChronology, (, Chronology, base, ,, Object]
[], =, chrono, ;, }, }, return, chrono, ;, }, JulianChronology, (, Chronology, base, ,, Object, param, ,, int, minDaysInFirstWeek]
[-, 1, ], =, chrono, ;, }, }, return, chrono, ;, }, JulianChronology, (, Chronology, base, ,, Object, param, ,]
[], =, chrono, ;, }, }, return, chrono, ;, }, JulianChronology, (, Chronology, base, ,, Object, param, ,, int, minDaysInFirstWeek]
[;, }, }, return, chrono, ;, }, JulianChronology, (, Chronology, base, ,, Object, param, ,, int, minDaysInFirstWeek, ), {, super]
[;, }, JulianChronology, (, Chronology, base, ,, Object, param, ,, int, minDaysInFirstWeek, ), {, super, (, base, ,, param, ,]
[,, param, ,, minDaysInFirstWeek, ), ;, }, private, Object, readResolve, (, ), {, Chronology, base, =, getBase, (, ), ;]
[,, minDaysInFirstWeek, ), ;, }, private, Object, readResolve, (, ), {, Chronology, base, =, getBase, (, ), ;, int, minDays]
[), ;, }, private, Object, readResolve, (, ), {, Chronology, base, =, getBase, (, ), ;, int, minDays, =, getMinimumDaysInFirstWeek]
[;, int, minDays, =, getMinimumDaysInFirstWeek, (, ), ;, minDays, =, (, minDays, ==, 0, ?, 4, :, minDays, ), ;]
[;, minDays, =, (, minDays, ==, 0, ?, 4, :, minDays, ), ;, return, base, ==, null, ?, getInstance, (]
[=, (, minDays, ==, 0, ?, 4, :, minDays, ), ;, return, base, ==, null, ?, getInstance, (, DateTimeZone, .]
[;, return, base, ==, null, ?, getInstance, (, DateTimeZone, ., UTC, ,, minDays, ), :, getInstance, (, base, ., getZone]
[), ;, return, base, ==, null, ?, getInstance, (, DateTimeZone, ., UTC, ,, minDays, ), :, getInstance, (, base, .]
[?, 4, :, minDays, ), ;, return, base, ==, null, ?, getInstance, (, DateTimeZone, ., UTC, ,, minDays, ), :]
[==, 0, ?, 4, :, minDays, ), ;, return, base, ==, null, ?, getInstance, (, DateTimeZone, ., UTC, ,, minDays]
[?, 4, :, minDays, ), ;, return, base, ==, null, ?, getInstance, (, DateTimeZone, ., UTC, ,, minDays, ), :]
[:, minDays, ), ;, return, base, ==, null, ?, getInstance, (, DateTimeZone, ., UTC, ,, minDays, ), :, getInstance, (]
[), ;, return, base, ==, null, ?, getInstance, (, DateTimeZone, ., UTC, ,, minDays, ), :, getInstance, (, base, .]
[;, }, public, Chronology, withUTC, (, ), {, return, INSTANCE_UTC, ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {]
[?, getInstance, (, DateTimeZone, ., UTC, ,, minDays, ), :, getInstance, (, base, ., getZone, (, ), ,, minDays, )]
[==, null, ?, getInstance, (, DateTimeZone, ., UTC, ,, minDays, ), :, getInstance, (, base, ., getZone, (, ), ,]
[?, getInstance, (, DateTimeZone, ., UTC, ,, minDays, ), :, getInstance, (, base, ., getZone, (, ), ,, minDays, )]
[:, getInstance, (, base, ., getZone, (, ), ,, minDays, ), ;, }, public, Chronology, withUTC, (, ), {, return]
[,, minDays, ), :, getInstance, (, base, ., getZone, (, ), ,, minDays, ), ;, }, public, Chronology, withUTC, (]
[., UTC, ,, minDays, ), :, getInstance, (, base, ., getZone, (, ), ,, minDays, ), ;, }, public, Chronology]
[), :, getInstance, (, base, ., getZone, (, ), ,, minDays, ), ;, }, public, Chronology, withUTC, (, ), {]
[;, }, public, Chronology, withUTC, (, ), {, return, INSTANCE_UTC, ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {]
[,, minDays, ), ;, }, public, Chronology, withUTC, (, ), {, return, INSTANCE_UTC, ;, }, public, Chronology, withZone, (, DateTimeZone]
[., getZone, (, ), ,, minDays, ), ;, }, public, Chronology, withUTC, (, ), {, return, INSTANCE_UTC, ;, }, public]
[), ;, }, public, Chronology, withUTC, (, ), {, return, INSTANCE_UTC, ;, }, public, Chronology, withZone, (, DateTimeZone, zone, )]
[;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (, zone, ==, null, ), {, zone, =, DateTimeZone]
[), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, ), ), {]
[==, null, ), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, )]
[), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, ), ), {]
[=, DateTimeZone, ., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, ), ), {, return, this, ;]
[;, }, if, (, zone, ==, getZone, (, ), ), {, return, this, ;, }, return, getInstance, (, zone, )]
[., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, ), ), {, return, this, ;, }, return]
[), {, return, this, ;, }, return, getInstance, (, zone, ), ;, }, long, getDateMidnightMillis, (, int, year, ,, int]
[==, getZone, (, ), ), {, return, this, ;, }, return, getInstance, (, zone, ), ;, }, long, getDateMidnightMillis, (]
[), {, return, this, ;, }, return, getInstance, (, zone, ), ;, }, long, getDateMidnightMillis, (, int, year, ,, int]
[;, }, return, getInstance, (, zone, ), ;, }, long, getDateMidnightMillis, (, int, year, ,, int, monthOfYear, ,, int, dayOfMonth]
[;, }, long, getDateMidnightMillis, (, int, year, ,, int, monthOfYear, ,, int, dayOfMonth, ), throws, IllegalArgumentException, {, return, super, .]
[), ;, }, long, getDateMidnightMillis, (, int, year, ,, int, monthOfYear, ,, int, dayOfMonth, ), throws, IllegalArgumentException, {, return, super]
[;, }, boolean, isLeapYear, (, int, year, ), {, return, (, year, &, 3, ), ==, 0, ;, }, long]
[., getDateMidnightMillis, (, adjustYearForSet, (, year, ), ,, monthOfYear, ,, dayOfMonth, ), ;, }, boolean, isLeapYear, (, int, year, )]
[,, monthOfYear, ,, dayOfMonth, ), ;, }, boolean, isLeapYear, (, int, year, ), {, return, (, year, &, 3, )]
[), ,, monthOfYear, ,, dayOfMonth, ), ;, }, boolean, isLeapYear, (, int, year, ), {, return, (, year, &, 3]
[,, dayOfMonth, ), ;, }, boolean, isLeapYear, (, int, year, ), {, return, (, year, &, 3, ), ==, 0]
[), ;, }, boolean, isLeapYear, (, int, year, ), {, return, (, year, &, 3, ), ==, 0, ;, }]
[;, }, long, calculateFirstDayOfYearMillis, (, int, year, ), {, int, relativeYear, =, year, -, 1968, ;, int, leapYears, ;, if]
[==, 0, ;, }, long, calculateFirstDayOfYearMillis, (, int, year, ), {, int, relativeYear, =, year, -, 1968, ;, int, leapYears]
[), ==, 0, ;, }, long, calculateFirstDayOfYearMillis, (, int, year, ), {, int, relativeYear, =, year, -, 1968, ;, int]
[&, 3, ), ==, 0, ;, }, long, calculateFirstDayOfYearMillis, (, int, year, ), {, int, relativeYear, =, year, -, 1968]
[), ==, 0, ;, }, long, calculateFirstDayOfYearMillis, (, int, year, ), {, int, relativeYear, =, year, -, 1968, ;, int]
[;, }, long, calculateFirstDayOfYearMillis, (, int, year, ), {, int, relativeYear, =, year, -, 1968, ;, int, leapYears, ;, if]
[;, int, leapYears, ;, if, (, relativeYear, <=, 0, ), {, leapYears, =, (, relativeYear, +, 3, ), >, >]
[-, 1968, ;, int, leapYears, ;, if, (, relativeYear, <=, 0, ), {, leapYears, =, (, relativeYear, +, 3, )]
[;, int, leapYears, ;, if, (, relativeYear, <=, 0, ), {, leapYears, =, (, relativeYear, +, 3, ), >, >]
[), {, leapYears, =, (, relativeYear, +, 3, ), >, >, 2, ;, }, else, {, leapYears, =, relativeYear, >]
[<=, 0, ), {, leapYears, =, (, relativeYear, +, 3, ), >, >, 2, ;, }, else, {, leapYears, =]
[), {, leapYears, =, (, relativeYear, +, 3, ), >, >, 2, ;, }, else, {, leapYears, =, relativeYear, >]
[=, (, relativeYear, +, 3, ), >, >, 2, ;, }, else, {, leapYears, =, relativeYear, >, >, 2, ;]
[;, }, else, {, leapYears, =, relativeYear, >, >, 2, ;, if, (, !, isLeapYear, (, year, ), ), {]
[>, >, 2, ;, }, else, {, leapYears, =, relativeYear, >, >, 2, ;, if, (, !, isLeapYear, (, year]
[), >, >, 2, ;, }, else, {, leapYears, =, relativeYear, >, >, 2, ;, if, (, !, isLeapYear, (]
[+, 3, ), >, >, 2, ;, }, else, {, leapYears, =, relativeYear, >, >, 2, ;, if, (, !]
[), >, >, 2, ;, }, else, {, leapYears, =, relativeYear, >, >, 2, ;, if, (, !, isLeapYear, (]
[;, }, else, {, leapYears, =, relativeYear, >, >, 2, ;, if, (, !, isLeapYear, (, year, ), ), {]
[=, relativeYear, >, >, 2, ;, if, (, !, isLeapYear, (, year, ), ), {, leapYears, ++, ;, }, }]
[;, if, (, !, isLeapYear, (, year, ), ), {, leapYears, ++, ;, }, }, long, millis, =, (, relativeYear]
[>, >, 2, ;, if, (, !, isLeapYear, (, year, ), ), {, leapYears, ++, ;, }, }, long, millis]
[;, if, (, !, isLeapYear, (, year, ), ), {, leapYears, ++, ;, }, }, long, millis, =, (, relativeYear]
[), {, leapYears, ++, ;, }, }, long, millis, =, (, relativeYear, *, 365L, +, leapYears, ), *, (, long]
[), {, leapYears, ++, ;, }, }, long, millis, =, (, relativeYear, *, 365L, +, leapYears, ), *, (, long]
[), ), {, leapYears, ++, ;, }, }, long, millis, =, (, relativeYear, *, 365L, +, leapYears, ), *, (]
[;, }, }, long, millis, =, (, relativeYear, *, 365L, +, leapYears, ), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY]
[++, ;, }, }, long, millis, =, (, relativeYear, *, 365L, +, leapYears, ), *, (, long, ), DateTimeConstants, .]
[;, return, millis, -, (, 366L, +, 352, ), *, DateTimeConstants, ., MILLIS_PER_DAY, ;, }, int, getMinYear, (, ), {]
[*, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return, millis, -, (, 366L, +, 352, ), *, DateTimeConstants, ., MILLIS_PER_DAY]
[), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return, millis, -, (, 366L, +, 352, ), *, DateTimeConstants, .]
[+, leapYears, ), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return, millis, -, (, 366L, +, 352, ), *]
[*, 365L, +, leapYears, ), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return, millis, -, (, 366L, +, 352]
[+, leapYears, ), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return, millis, -, (, 366L, +, 352, ), *]
[), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return, millis, -, (, 366L, +, 352, ), *, DateTimeConstants, .]
[;, return, millis, -, (, 366L, +, 352, ), *, DateTimeConstants, ., MILLIS_PER_DAY, ;, }, int, getMinYear, (, ), {]
[;, return, millis, -, (, 366L, +, 352, ), *, DateTimeConstants, ., MILLIS_PER_DAY, ;, }, int, getMinYear, (, ), {]
[., MILLIS_PER_DAY, ;, return, millis, -, (, 366L, +, 352, ), *, DateTimeConstants, ., MILLIS_PER_DAY, ;, }, int, getMinYear, (]
[;, }, int, getMinYear, (, ), {, return, MIN_YEAR, ;, }, int, getMaxYear, (, ), {, return, MAX_YEAR, ;, }]
[-, (, 366L, +, 352, ), *, DateTimeConstants, ., MILLIS_PER_DAY, ;, }, int, getMinYear, (, ), {, return, MIN_YEAR, ;]
[;, }, int, getMinYear, (, ), {, return, MIN_YEAR, ;, }, int, getMaxYear, (, ), {, return, MAX_YEAR, ;, }]
[*, DateTimeConstants, ., MILLIS_PER_DAY, ;, }, int, getMinYear, (, ), {, return, MIN_YEAR, ;, }, int, getMaxYear, (, ), {]
[), *, DateTimeConstants, ., MILLIS_PER_DAY, ;, }, int, getMinYear, (, ), {, return, MIN_YEAR, ;, }, int, getMaxYear, (, )]
[+, 352, ), *, DateTimeConstants, ., MILLIS_PER_DAY, ;, }, int, getMinYear, (, ), {, return, MIN_YEAR, ;, }, int, getMaxYear]
[), *, DateTimeConstants, ., MILLIS_PER_DAY, ;, }, int, getMinYear, (, ), {, return, MIN_YEAR, ;, }, int, getMaxYear, (, )]
[;, }, int, getMinYear, (, ), {, return, MIN_YEAR, ;, }, int, getMaxYear, (, ), {, return, MAX_YEAR, ;, }]
[., MILLIS_PER_DAY, ;, }, int, getMinYear, (, ), {, return, MIN_YEAR, ;, }, int, getMaxYear, (, ), {, return, MAX_YEAR]
[;, }, int, getMaxYear, (, ), {, return, MAX_YEAR, ;, }, long, getAverageMillisPerYear, (, ), {, return, MILLIS_PER_YEAR, ;, }]
[;, }, long, getAverageMillisPerYear, (, ), {, return, MILLIS_PER_YEAR, ;, }, long, getAverageMillisPerYearDividedByTwo, (, ), {, return, MILLIS_PER_YEAR, /, 2]
[;, }, long, getAverageMillisPerYearDividedByTwo, (, ), {, return, MILLIS_PER_YEAR, /, 2, ;, }, long, getAverageMillisPerMonth, (, ), {, return, MILLIS_PER_MONTH]
[;, }, long, getAverageMillisPerMonth, (, ), {, return, MILLIS_PER_MONTH, ;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return, (, 1969L, *]
[/, 2, ;, }, long, getAverageMillisPerMonth, (, ), {, return, MILLIS_PER_MONTH, ;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return, (]
[;, }, long, getAverageMillisPerMonth, (, ), {, return, MILLIS_PER_MONTH, ;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return, (, 1969L, *]
[;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return, (, 1969L, *, MILLIS_PER_YEAR, +, 352L, *, DateTimeConstants, ., MILLIS_PER_DAY, ), /]
[;, }, protected, void, assemble, (, Fields, fields, ), {, if, (, getBase, (, ), ==, null, ), {, super]
[/, 2, ;, }, protected, void, assemble, (, Fields, fields, ), {, if, (, getBase, (, ), ==, null, )]
[), /, 2, ;, }, protected, void, assemble, (, Fields, fields, ), {, if, (, getBase, (, ), ==, null]
[+, 352L, *, DateTimeConstants, ., MILLIS_PER_DAY, ), /, 2, ;, }, protected, void, assemble, (, Fields, fields, ), {, if]
[*, MILLIS_PER_YEAR, +, 352L, *, DateTimeConstants, ., MILLIS_PER_DAY, ), /, 2, ;, }, protected, void, assemble, (, Fields, fields, )]
[+, 352L, *, DateTimeConstants, ., MILLIS_PER_DAY, ), /, 2, ;, }, protected, void, assemble, (, Fields, fields, ), {, if]
[), /, 2, ;, }, protected, void, assemble, (, Fields, fields, ), {, if, (, getBase, (, ), ==, null]
[*, DateTimeConstants, ., MILLIS_PER_DAY, ), /, 2, ;, }, protected, void, assemble, (, Fields, fields, ), {, if, (, getBase]
[), /, 2, ;, }, protected, void, assemble, (, Fields, fields, ), {, if, (, getBase, (, ), ==, null]
[., MILLIS_PER_DAY, ), /, 2, ;, }, protected, void, assemble, (, Fields, fields, ), {, if, (, getBase, (, )]
[;, }, protected, void, assemble, (, Fields, fields, ), {, if, (, getBase, (, ), ==, null, ), {, super]
[), {, super, ., assemble, (, fields, ), ;, fields, ., year, =, new, SkipDateTimeField, (, this, ,, fields, .]
[==, null, ), {, super, ., assemble, (, fields, ), ;, fields, ., year, =, new, SkipDateTimeField, (, this, ,]
[), {, super, ., assemble, (, fields, ), ;, fields, ., year, =, new, SkipDateTimeField, (, this, ,, fields, .]
[;, fields, ., year, =, new, SkipDateTimeField, (, this, ,, fields, ., year, ), ;, fields, ., weekyear, =, new]
[., assemble, (, fields, ), ;, fields, ., year, =, new, SkipDateTimeField, (, this, ,, fields, ., year, ), ;]
[), ;, fields, ., year, =, new, SkipDateTimeField, (, this, ,, fields, ., year, ), ;, fields, ., weekyear, =]
[=, new, SkipDateTimeField, (, this, ,, fields, ., year, ), ;, fields, ., weekyear, =, new, SkipDateTimeField, (, this, ,]
[., year, =, new, SkipDateTimeField, (, this, ,, fields, ., year, ), ;, fields, ., weekyear, =, new, SkipDateTimeField, (]
[;, fields, ., weekyear, =, new, SkipDateTimeField, (, this, ,, fields, ., weekyear, ), ;, }, }, }]
[,, fields, ., year, ), ;, fields, ., weekyear, =, new, SkipDateTimeField, (, this, ,, fields, ., weekyear, ), ;]
[), ;, fields, ., weekyear, =, new, SkipDateTimeField, (, this, ,, fields, ., weekyear, ), ;, }, }, }]
[., year, ), ;, fields, ., weekyear, =, new, SkipDateTimeField, (, this, ,, fields, ., weekyear, ), ;, }, }]
[=, new, SkipDateTimeField, (, this, ,, fields, ., weekyear, ), ;, }, }, }]
[., weekyear, =, new, SkipDateTimeField, (, this, ,, fields, ., weekyear, ), ;, }, }, }]
[;, }, }, }]
[,, fields, ., weekyear, ), ;, }, }, }]
[), ;, }, }, }]
[., weekyear, ), ;, }, }, }]
