[java, ., util, ., regex, ., Pattern, ;, public, class, ProcessCommonJSModules, implements, CompilerPass, {, private, static, final, String, MODULE_SLASH, =]
[public, class, ProcessCommonJSModules, implements, CompilerPass, {, private, static, final, String, MODULE_SLASH, =, "/", ;, public, static, final, String, DEFAULT_FILENAME_PREFIX, =]
[public, class, ProcessCommonJSModules, implements, CompilerPass, {, private, static, final, String, MODULE_SLASH, =, "/", ;, public, static, final, String, DEFAULT_FILENAME_PREFIX, =]
[ProcessCommonJSModules, implements, CompilerPass, {, private, static, final, String, MODULE_SLASH, =, "/", ;, public, static, final, String, DEFAULT_FILENAME_PREFIX, =, ".", +]
[MODULE_SLASH, =, "/", ;, public, static, final, String, DEFAULT_FILENAME_PREFIX, =, ".", +, MODULE_SLASH, ;, private, static, final, String, MODULE_NAME_SEPARATOR, =]
[DEFAULT_FILENAME_PREFIX, =, ".", +, MODULE_SLASH, ;, private, static, final, String, MODULE_NAME_SEPARATOR, =, "\\$", ;, private, static, final, String, MODULE_NAME_PREFIX, =]
[private, final, boolean, reportDependencies, ;, private, JSModule, module, ;, ProcessCommonJSModules, (, AbstractCompiler, compiler, ,, String, filenamePrefix, ), {, this, (]
[boolean, reportDependencies, ;, private, JSModule, module, ;, ProcessCommonJSModules, (, AbstractCompiler, compiler, ,, String, filenamePrefix, ), {, this, (, compiler, ,]
[;, private, JSModule, module, ;, ProcessCommonJSModules, (, AbstractCompiler, compiler, ,, String, filenamePrefix, ), {, this, (, compiler, ,, filenamePrefix, ,]
[compiler, ,, filenamePrefix, ,, true, ), ;, }, ProcessCommonJSModules, (, AbstractCompiler, compiler, ,, String, filenamePrefix, ,, boolean, reportDependencies, ), {]
[compiler, ,, filenamePrefix, ,, true, ), ;, }, ProcessCommonJSModules, (, AbstractCompiler, compiler, ,, String, filenamePrefix, ,, boolean, reportDependencies, ), {]
[true, ), ;, }, ProcessCommonJSModules, (, AbstractCompiler, compiler, ,, String, filenamePrefix, ,, boolean, reportDependencies, ), {, this, ., compiler, =]
[;, }, ProcessCommonJSModules, (, AbstractCompiler, compiler, ,, String, filenamePrefix, ,, boolean, reportDependencies, ), {, this, ., compiler, =, compiler, ;]
[;, }, ProcessCommonJSModules, (, AbstractCompiler, compiler, ,, String, filenamePrefix, ,, boolean, reportDependencies, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, String, filenamePrefix, ,, boolean, reportDependencies, ), {, this, ., compiler, =, compiler, ;, this, ., filenamePrefix, =]
[AbstractCompiler, compiler, ,, String, filenamePrefix, ,, boolean, reportDependencies, ), {, this, ., compiler, =, compiler, ;, this, ., filenamePrefix, =]
[AbstractCompiler, compiler, ,, String, filenamePrefix, ,, boolean, reportDependencies, ), {, this, ., compiler, =, compiler, ;, this, ., filenamePrefix, =]
[filenamePrefix, ,, boolean, reportDependencies, ), {, this, ., compiler, =, compiler, ;, this, ., filenamePrefix, =, filenamePrefix, ., endsWith, (]
[reportDependencies, ), {, this, ., compiler, =, compiler, ;, this, ., filenamePrefix, =, filenamePrefix, ., endsWith, (, MODULE_SLASH, ), ?]
[{, this, ., compiler, =, compiler, ;, this, ., filenamePrefix, =, filenamePrefix, ., endsWith, (, MODULE_SLASH, ), ?, filenamePrefix, :]
[{, this, ., compiler, =, compiler, ;, this, ., filenamePrefix, =, filenamePrefix, ., endsWith, (, MODULE_SLASH, ), ?, filenamePrefix, :]
[., compiler, =, compiler, ;, this, ., filenamePrefix, =, filenamePrefix, ., endsWith, (, MODULE_SLASH, ), ?, filenamePrefix, :, filenamePrefix, +]
[=, compiler, ;, this, ., filenamePrefix, =, filenamePrefix, ., endsWith, (, MODULE_SLASH, ), ?, filenamePrefix, :, filenamePrefix, +, MODULE_SLASH, ;]
[=, compiler, ;, this, ., filenamePrefix, =, filenamePrefix, ., endsWith, (, MODULE_SLASH, ), ?, filenamePrefix, :, filenamePrefix, +, MODULE_SLASH, ;]
[., filenamePrefix, =, filenamePrefix, ., endsWith, (, MODULE_SLASH, ), ?, filenamePrefix, :, filenamePrefix, +, MODULE_SLASH, ;, this, ., reportDependencies, =]
[this, ., reportDependencies, =, reportDependencies, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., reportDependencies, =, reportDependencies, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[reportDependencies, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[(, compiler, ,, root, ,, new, ProcessCommonJsModulesCallback, (, ), ), ;, }, String, guessCJSModuleName, (, String, filename, ), {, return]
[,, root, ,, new, ProcessCommonJsModulesCallback, (, ), ), ;, }, String, guessCJSModuleName, (, String, filename, ), {, return, toModuleName, (]
[,, new, ProcessCommonJsModulesCallback, (, ), ), ;, }, String, guessCJSModuleName, (, String, filename, ), {, return, toModuleName, (, normalizeSourceName, (]
[String, filename, ), {, return, toModuleName, (, normalizeSourceName, (, filename, ), ), ;, }, JSModule, getModule, (, ), {, return]
[}, JSModule, getModule, (, ), {, return, module, ;, }, public, static, String, toModuleName, (, String, filename, ), {, return]
[}, JSModule, getModule, (, ), {, return, module, ;, }, public, static, String, toModuleName, (, String, filename, ), {, return]
[getModule, (, ), {, return, module, ;, }, public, static, String, toModuleName, (, String, filename, ), {, return, MODULE_NAME_PREFIX, +]
[getModule, (, ), {, return, module, ;, }, public, static, String, toModuleName, (, String, filename, ), {, return, MODULE_NAME_PREFIX, +]
[getModule, (, ), {, return, module, ;, }, public, static, String, toModuleName, (, String, filename, ), {, return, MODULE_NAME_PREFIX, +]
[getModule, (, ), {, return, module, ;, }, public, static, String, toModuleName, (, String, filename, ), {, return, MODULE_NAME_PREFIX, +]
[getModule, (, ), {, return, module, ;, }, public, static, String, toModuleName, (, String, filename, ), {, return, MODULE_NAME_PREFIX, +]
[return, module, ;, }, public, static, String, toModuleName, (, String, filename, ), {, return, MODULE_NAME_PREFIX, +, filename, ., replaceAll, (]
[return, module, ;, }, public, static, String, toModuleName, (, String, filename, ), {, return, MODULE_NAME_PREFIX, +, filename, ., replaceAll, (]
[;, }, public, static, String, toModuleName, (, String, filename, ), {, return, MODULE_NAME_PREFIX, +, filename, ., replaceAll, (, "^\\.", +]
[;, }, public, static, String, toModuleName, (, String, filename, ), {, return, MODULE_NAME_PREFIX, +, filename, ., replaceAll, (, "^\\.", +]
[String, toModuleName, (, String, filename, ), {, return, MODULE_NAME_PREFIX, +, filename, ., replaceAll, (, "^\\.", +, Pattern, ., quote, (]
[String, filename, ), {, return, MODULE_NAME_PREFIX, +, filename, ., replaceAll, (, "^\\.", +, Pattern, ., quote, (, MODULE_SLASH, ), ,]
[MODULE_NAME_PREFIX, +, filename, ., replaceAll, (, "^\\.", +, Pattern, ., quote, (, MODULE_SLASH, ), ,, "", ), ., replaceAll, (]
[MODULE_NAME_PREFIX, +, filename, ., replaceAll, (, "^\\.", +, Pattern, ., quote, (, MODULE_SLASH, ), ,, "", ), ., replaceAll, (]
[replaceAll, (, "^\\.", +, Pattern, ., quote, (, MODULE_SLASH, ), ,, "", ), ., replaceAll, (, Pattern, ., quote, (]
[+, Pattern, ., quote, (, MODULE_SLASH, ), ,, "", ), ., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,]
[MODULE_SLASH, ), ,, "", ), ., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (]
[,, "", ), ., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$", ,]
[(, Pattern, ., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$", ,, "", ), ., replaceAll, (]
[., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$", ,, "", ), ., replaceAll, (, "-", ,]
[replaceAll, (, "-", ,, "_", ), ;, }, public, static, String, toModuleName, (, String, requiredFilename, ,, String, currentFilename, ), {]
["-", ,, "_", ), ;, }, public, static, String, toModuleName, (, String, requiredFilename, ,, String, currentFilename, ), {, requiredFilename, =]
["-", ,, "_", ), ;, }, public, static, String, toModuleName, (, String, requiredFilename, ,, String, currentFilename, ), {, requiredFilename, =]
[;, }, public, static, String, toModuleName, (, String, requiredFilename, ,, String, currentFilename, ), {, requiredFilename, =, requiredFilename, ., replaceAll, (]
[public, static, String, toModuleName, (, String, requiredFilename, ,, String, currentFilename, ), {, requiredFilename, =, requiredFilename, ., replaceAll, (, "\\.js$", ,]
[toModuleName, (, String, requiredFilename, ,, String, currentFilename, ), {, requiredFilename, =, requiredFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;]
[String, requiredFilename, ,, String, currentFilename, ), {, requiredFilename, =, requiredFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, currentFilename, =]
[String, requiredFilename, ,, String, currentFilename, ), {, requiredFilename, =, requiredFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, currentFilename, =]
[currentFilename, ), {, requiredFilename, =, requiredFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, currentFilename, =, currentFilename, ., replaceAll, (]
[{, requiredFilename, =, requiredFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, currentFilename, =, currentFilename, ., replaceAll, (, "\\.js$", ,]
[replaceAll, (, "\\.js$", ,, "", ), ;, currentFilename, =, currentFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, if, (]
[replaceAll, (, "\\.js$", ,, "", ), ;, currentFilename, =, currentFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, if, (]
[replaceAll, (, "\\.js$", ,, "", ), ;, currentFilename, =, currentFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, if, (]
["", ), ;, currentFilename, =, currentFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, if, (, requiredFilename, ., startsWith, (]
["", ), ;, currentFilename, =, currentFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, if, (, requiredFilename, ., startsWith, (]
[;, currentFilename, =, currentFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, if, (, requiredFilename, ., startsWith, (, ".", +]
[currentFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, if, (, requiredFilename, ., startsWith, (, ".", +, MODULE_SLASH, ), ||]
[currentFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, if, (, requiredFilename, ., startsWith, (, ".", +, MODULE_SLASH, ), ||]
["\\.js$", ,, "", ), ;, if, (, requiredFilename, ., startsWith, (, ".", +, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (]
["\\.js$", ,, "", ), ;, if, (, requiredFilename, ., startsWith, (, ".", +, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (]
["", ), ;, if, (, requiredFilename, ., startsWith, (, ".", +, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (, "..", +]
[., startsWith, (, ".", +, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, ), ), {, try, {]
[(, ".", +, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, ), ), {, try, {, requiredFilename, =]
[(, ".", +, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, ), ), {, try, {, requiredFilename, =]
[(, ".", +, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, ), ), {, try, {, requiredFilename, =]
[".", +, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, ), ), {, try, {, requiredFilename, =, (]
[), ||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, ), ), {, try, {, requiredFilename, =, (, new, URI, (]
["..", +, MODULE_SLASH, ), ), {, try, {, requiredFilename, =, (, new, URI, (, currentFilename, ), ), ., resolve, (]
[), ), {, try, {, requiredFilename, =, (, new, URI, (, currentFilename, ), ), ., resolve, (, new, URI, (]
[(, new, URI, (, requiredFilename, ), ), ., toString, (, ), ;, }, catch, (, URISyntaxException, e, ), {, throw]
[(, requiredFilename, ), ), ., toString, (, ), ;, }, catch, (, URISyntaxException, e, ), {, throw, new, RuntimeException, (]
[(, ), ;, }, catch, (, URISyntaxException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, }, return]
[;, }, catch, (, URISyntaxException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, }, return, toModuleName, (]
[e, ), ;, }, }, return, toModuleName, (, requiredFilename, ), ;, }, private, String, normalizeSourceName, (, String, filename, ), {]
[;, }, }, return, toModuleName, (, requiredFilename, ), ;, }, private, String, normalizeSourceName, (, String, filename, ), {, filename, =]
[;, }, }, return, toModuleName, (, requiredFilename, ), ;, }, private, String, normalizeSourceName, (, String, filename, ), {, filename, =]
[toModuleName, (, requiredFilename, ), ;, }, private, String, normalizeSourceName, (, String, filename, ), {, filename, =, filename, ., replace, (]
[requiredFilename, ), ;, }, private, String, normalizeSourceName, (, String, filename, ), {, filename, =, filename, ., replace, (, "\\", ,]
[String, normalizeSourceName, (, String, filename, ), {, filename, =, filename, ., replace, (, "\\", ,, "/", ), ;, if, (]
[String, normalizeSourceName, (, String, filename, ), {, filename, =, filename, ., replace, (, "\\", ,, "/", ), ;, if, (]
[String, normalizeSourceName, (, String, filename, ), {, filename, =, filename, ., replace, (, "\\", ,, "/", ), ;, if, (]
[filename, ), {, filename, =, filename, ., replace, (, "\\", ,, "/", ), ;, if, (, filename, ., indexOf, (]
[filename, =, filename, ., replace, (, "\\", ,, "/", ), ;, if, (, filename, ., indexOf, (, filenamePrefix, ), ==]
[., replace, (, "\\", ,, "/", ), ;, if, (, filename, ., indexOf, (, filenamePrefix, ), ==, 0, ), {]
[(, "\\", ,, "/", ), ;, if, (, filename, ., indexOf, (, filenamePrefix, ), ==, 0, ), {, filename, =]
[(, "\\", ,, "/", ), ;, if, (, filename, ., indexOf, (, filenamePrefix, ), ==, 0, ), {, filename, =]
[), ;, if, (, filename, ., indexOf, (, filenamePrefix, ), ==, 0, ), {, filename, =, filename, ., substring, (]
[), ;, if, (, filename, ., indexOf, (, filenamePrefix, ), ==, 0, ), {, filename, =, filename, ., substring, (]
[), ==, 0, ), {, filename, =, filename, ., substring, (, filenamePrefix, ., length, (, ), ), ;, }, return]
[length, (, ), ), ;, }, return, filename, ;, }, private, class, ProcessCommonJsModulesCallback, extends, AbstractPostOrderCallback, {, private, int, scriptNodeCount, =]
[}, private, class, ProcessCommonJsModulesCallback, extends, AbstractPostOrderCallback, {, private, int, scriptNodeCount, =, 0, ;, private, Set, <, String, >, modulesWithExports, =]
[}, private, class, ProcessCommonJsModulesCallback, extends, AbstractPostOrderCallback, {, private, int, scriptNodeCount, =, 0, ;, private, Set, <, String, >, modulesWithExports, =]
[), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), &&]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), &&]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), &&]
[n, ,, Node, parent, ), {, if, (, n, ., isCall, (, ), &&, n, ., getChildCount, (, ), ==]
[Node, parent, ), {, if, (, n, ., isCall, (, ), &&, n, ., getChildCount, (, ), ==, 2, &&]
[Node, parent, ), {, if, (, n, ., isCall, (, ), &&, n, ., getChildCount, (, ), ==, 2, &&]
[if, (, n, ., isCall, (, ), &&, n, ., getChildCount, (, ), ==, 2, &&, "require", ., equals, (]
[if, (, n, ., isCall, (, ), &&, n, ., getChildCount, (, ), ==, 2, &&, "require", ., equals, (]
[if, (, n, ., isCall, (, ), &&, n, ., getChildCount, (, ), ==, 2, &&, "require", ., equals, (]
[(, ), ==, 2, &&, "require", ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&]
[(, ), ==, 2, &&, "require", ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&]
[(, ), ==, 2, &&, "require", ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&]
[&&, "require", ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&, n, ., getChildAtIndex, (]
[(, ), ., getQualifiedName, (, ), ), &&, n, ., getChildAtIndex, (, 1, ), ., isString, (, ), ), {]
[., getQualifiedName, (, ), ), &&, n, ., getChildAtIndex, (, 1, ), ., isString, (, ), ), {, visitRequireCall, (]
[(, ), ), &&, n, ., getChildAtIndex, (, 1, ), ., isString, (, ), ), {, visitRequireCall, (, t, ,]
[), &&, n, ., getChildAtIndex, (, 1, ), ., isString, (, ), ), {, visitRequireCall, (, t, ,, n, ,]
[1, ), ., isString, (, ), ), {, visitRequireCall, (, t, ,, n, ,, parent, ), ;, }, if, (]
[1, ), ., isString, (, ), ), {, visitRequireCall, (, t, ,, n, ,, parent, ), ;, }, if, (]
[{, visitRequireCall, (, t, ,, n, ,, parent, ), ;, }, if, (, n, ., isScript, (, ), ), {]
[{, visitRequireCall, (, t, ,, n, ,, parent, ), ;, }, if, (, n, ., isScript, (, ), ), {]
[t, ,, n, ,, parent, ), ;, }, if, (, n, ., isScript, (, ), ), {, scriptNodeCount, ++, ;]
[n, ,, parent, ), ;, }, if, (, n, ., isScript, (, ), ), {, scriptNodeCount, ++, ;, visitScript, (]
[parent, ), ;, }, if, (, n, ., isScript, (, ), ), {, scriptNodeCount, ++, ;, visitScript, (, t, ,]
[n, ., isScript, (, ), ), {, scriptNodeCount, ++, ;, visitScript, (, t, ,, n, ), ;, }, if, (]
[n, ., isScript, (, ), ), {, scriptNodeCount, ++, ;, visitScript, (, t, ,, n, ), ;, }, if, (]
[n, ., isScript, (, ), ), {, scriptNodeCount, ++, ;, visitScript, (, t, ,, n, ), ;, }, if, (]
[{, scriptNodeCount, ++, ;, visitScript, (, t, ,, n, ), ;, }, if, (, n, ., isGetProp, (, ), &&]
[{, scriptNodeCount, ++, ;, visitScript, (, t, ,, n, ), ;, }, if, (, n, ., isGetProp, (, ), &&]
[visitScript, (, t, ,, n, ), ;, }, if, (, n, ., isGetProp, (, ), &&, "module.exports", ., equals, (]
[visitScript, (, t, ,, n, ), ;, }, if, (, n, ., isGetProp, (, ), &&, "module.exports", ., equals, (]
[if, (, n, ., isGetProp, (, ), &&, "module.exports", ., equals, (, n, ., getQualifiedName, (, ), ), ), {]
[n, ., isGetProp, (, ), &&, "module.exports", ., equals, (, n, ., getQualifiedName, (, ), ), ), {, visitModuleExports, (]
[;, }, }, private, void, visitRequireCall, (, NodeTraversal, t, ,, Node, require, ,, Node, parent, ), {, String, moduleName, =]
[}, private, void, visitRequireCall, (, NodeTraversal, t, ,, Node, require, ,, Node, parent, ), {, String, moduleName, =, toModuleName, (]
[}, private, void, visitRequireCall, (, NodeTraversal, t, ,, Node, require, ,, Node, parent, ), {, String, moduleName, =, toModuleName, (]
[}, private, void, visitRequireCall, (, NodeTraversal, t, ,, Node, require, ,, Node, parent, ), {, String, moduleName, =, toModuleName, (]
[(, NodeTraversal, t, ,, Node, require, ,, Node, parent, ), {, String, moduleName, =, toModuleName, (, require, ., getChildAtIndex, (]
[Node, parent, ), {, String, moduleName, =, toModuleName, (, require, ., getChildAtIndex, (, 1, ), ., getString, (, ), ,]
[), {, String, moduleName, =, toModuleName, (, require, ., getChildAtIndex, (, 1, ), ., getString, (, ), ,, normalizeSourceName, (]
[), {, String, moduleName, =, toModuleName, (, require, ., getChildAtIndex, (, 1, ), ., getString, (, ), ,, normalizeSourceName, (]
[1, ), ., getString, (, ), ,, normalizeSourceName, (, t, ., getSourceName, (, ), ), ), ;, Node, moduleRef, =]
[1, ), ., getString, (, ), ,, normalizeSourceName, (, t, ., getSourceName, (, ), ), ), ;, Node, moduleRef, =]
[1, ), ., getString, (, ), ,, normalizeSourceName, (, t, ., getSourceName, (, ), ), ), ;, Node, moduleRef, =]
[(, ), ,, normalizeSourceName, (, t, ., getSourceName, (, ), ), ), ;, Node, moduleRef, =, IR, ., name, (]
[t, ., getSourceName, (, ), ), ), ;, Node, moduleRef, =, IR, ., name, (, moduleName, ), ., srcref, (]
[(, ), ), ), ;, Node, moduleRef, =, IR, ., name, (, moduleName, ), ., srcref, (, require, ), ;]
[(, ), ), ), ;, Node, moduleRef, =, IR, ., name, (, moduleName, ), ., srcref, (, require, ), ;]
[;, Node, moduleRef, =, IR, ., name, (, moduleName, ), ., srcref, (, require, ), ;, parent, ., replaceChild, (]
[moduleRef, =, IR, ., name, (, moduleName, ), ., srcref, (, require, ), ;, parent, ., replaceChild, (, require, ,]
[moduleName, ), ., srcref, (, require, ), ;, parent, ., replaceChild, (, require, ,, moduleRef, ), ;, Node, script, =]
[., srcref, (, require, ), ;, parent, ., replaceChild, (, require, ,, moduleRef, ), ;, Node, script, =, getCurrentScriptNode, (]
[;, parent, ., replaceChild, (, require, ,, moduleRef, ), ;, Node, script, =, getCurrentScriptNode, (, parent, ), ;, if, (]
[replaceChild, (, require, ,, moduleRef, ), ;, Node, script, =, getCurrentScriptNode, (, parent, ), ;, if, (, reportDependencies, ), {]
[replaceChild, (, require, ,, moduleRef, ), ;, Node, script, =, getCurrentScriptNode, (, parent, ), ;, if, (, reportDependencies, ), {]
[replaceChild, (, require, ,, moduleRef, ), ;, Node, script, =, getCurrentScriptNode, (, parent, ), ;, if, (, reportDependencies, ), {]
[script, =, getCurrentScriptNode, (, parent, ), ;, if, (, reportDependencies, ), {, t, ., getInput, (, ), ., addRequire, (]
[parent, ), ;, if, (, reportDependencies, ), {, t, ., getInput, (, ), ., addRequire, (, moduleName, ), ;, }]
[parent, ), ;, if, (, reportDependencies, ), {, t, ., getInput, (, ), ., addRequire, (, moduleName, ), ;, }]
[(, reportDependencies, ), {, t, ., getInput, (, ), ., addRequire, (, moduleName, ), ;, }, script, ., addChildToFront, (]
[(, reportDependencies, ), {, t, ., getInput, (, ), ., addRequire, (, moduleName, ), ;, }, script, ., addChildToFront, (]
[(, reportDependencies, ), {, t, ., getInput, (, ), ., addRequire, (, moduleName, ), ;, }, script, ., addChildToFront, (]
[t, ., getInput, (, ), ., addRequire, (, moduleName, ), ;, }, script, ., addChildToFront, (, IR, ., exprResult, (]
[t, ., getInput, (, ), ., addRequire, (, moduleName, ), ;, }, script, ., addChildToFront, (, IR, ., exprResult, (]
[), ., addRequire, (, moduleName, ), ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (]
[), ., addRequire, (, moduleName, ), ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (]
[moduleName, ), ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (]
[moduleName, ), ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (]
[script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (]
[(, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,]
[(, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,]
[(, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (]
[(, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "require", ), ), ,]
[(, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "require", ), ), ,]
[(, IR, ., name, (, "goog", ), ,, IR, ., string, (, "require", ), ), ,, IR, ., string, (]
[,, IR, ., string, (, "require", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (]
[(, "require", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, require, ), ), ;]
[(, "require", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, require, ), ), ;]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, visitScript, (, NodeTraversal, t, ,, Node, script, ), {]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, visitScript, (, NodeTraversal, t, ,, Node, script, ), {]
[reportCodeChange, (, ), ;, }, private, void, visitScript, (, NodeTraversal, t, ,, Node, script, ), {, Preconditions, ., checkArgument, (]
[reportCodeChange, (, ), ;, }, private, void, visitScript, (, NodeTraversal, t, ,, Node, script, ), {, Preconditions, ., checkArgument, (]
[), ;, }, private, void, visitScript, (, NodeTraversal, t, ,, Node, script, ), {, Preconditions, ., checkArgument, (, scriptNodeCount, ==]
[}, private, void, visitScript, (, NodeTraversal, t, ,, Node, script, ), {, Preconditions, ., checkArgument, (, scriptNodeCount, ==, 1, ,]
[}, private, void, visitScript, (, NodeTraversal, t, ,, Node, script, ), {, Preconditions, ., checkArgument, (, scriptNodeCount, ==, 1, ,]
[void, visitScript, (, NodeTraversal, t, ,, Node, script, ), {, Preconditions, ., checkArgument, (, scriptNodeCount, ==, 1, ,, "ProcessCommonJSModules supports only one invocation per ", +]
[Node, script, ), {, Preconditions, ., checkArgument, (, scriptNodeCount, ==, 1, ,, "ProcessCommonJSModules supports only one invocation per ", +, "CompilerInput / script node", ), ;, String, moduleName, =]
[), {, Preconditions, ., checkArgument, (, scriptNodeCount, ==, 1, ,, "ProcessCommonJSModules supports only one invocation per ", +, "CompilerInput / script node", ), ;, String, moduleName, =, guessCJSModuleName, (]
[), {, Preconditions, ., checkArgument, (, scriptNodeCount, ==, 1, ,, "ProcessCommonJSModules supports only one invocation per ", +, "CompilerInput / script node", ), ;, String, moduleName, =, guessCJSModuleName, (]
[==, 1, ,, "ProcessCommonJSModules supports only one invocation per ", +, "CompilerInput / script node", ), ;, String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;]
[==, 1, ,, "ProcessCommonJSModules supports only one invocation per ", +, "CompilerInput / script node", ), ;, String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;]
[+, "CompilerInput / script node", ), ;, String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;, script, ., addChildToFront, (]
[+, "CompilerInput / script node", ), ;, String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;, script, ., addChildToFront, (]
[+, "CompilerInput / script node", ), ;, String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;, script, ., addChildToFront, (]
[String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;, script, ., addChildToFront, (, IR, ., var, (]
[String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;, script, ., addChildToFront, (, IR, ., var, (]
[(, script, ., getSourceFileName, (, ), ), ;, script, ., addChildToFront, (, IR, ., var, (, IR, ., name, (]
[getSourceFileName, (, ), ), ;, script, ., addChildToFront, (, IR, ., var, (, IR, ., name, (, moduleName, ), ,]
[getSourceFileName, (, ), ), ;, script, ., addChildToFront, (, IR, ., var, (, IR, ., name, (, moduleName, ), ,]
[IR, ., var, (, IR, ., name, (, moduleName, ), ,, IR, ., objectlit, (, ), ), ., copyInformationFromForTree, (]
[name, (, moduleName, ), ,, IR, ., objectlit, (, ), ), ., copyInformationFromForTree, (, script, ), ), ;, if, (]
[., objectlit, (, ), ), ., copyInformationFromForTree, (, script, ), ), ;, if, (, reportDependencies, ), {, CompilerInput, ci, =]
[., objectlit, (, ), ), ., copyInformationFromForTree, (, script, ), ), ;, if, (, reportDependencies, ), {, CompilerInput, ci, =]
[copyInformationFromForTree, (, script, ), ), ;, if, (, reportDependencies, ), {, CompilerInput, ci, =, t, ., getInput, (, ), ;]
[copyInformationFromForTree, (, script, ), ), ;, if, (, reportDependencies, ), {, CompilerInput, ci, =, t, ., getInput, (, ), ;]
[), ;, if, (, reportDependencies, ), {, CompilerInput, ci, =, t, ., getInput, (, ), ;, ci, ., addProvide, (]
[{, CompilerInput, ci, =, t, ., getInput, (, ), ;, ci, ., addProvide, (, moduleName, ), ;, JSModule, m, =]
[=, t, ., getInput, (, ), ;, ci, ., addProvide, (, moduleName, ), ;, JSModule, m, =, new, JSModule, (]
[getInput, (, ), ;, ci, ., addProvide, (, moduleName, ), ;, JSModule, m, =, new, JSModule, (, moduleName, ), ;]
[getInput, (, ), ;, ci, ., addProvide, (, moduleName, ), ;, JSModule, m, =, new, JSModule, (, moduleName, ), ;]
[ci, ., addProvide, (, moduleName, ), ;, JSModule, m, =, new, JSModule, (, moduleName, ), ;, m, ., addAndOverrideModule, (]
[(, moduleName, ), ;, JSModule, m, =, new, JSModule, (, moduleName, ), ;, m, ., addAndOverrideModule, (, ci, ), ;]
[), ;, JSModule, m, =, new, JSModule, (, moduleName, ), ;, m, ., addAndOverrideModule, (, ci, ), ;, module, =]
[m, =, new, JSModule, (, moduleName, ), ;, m, ., addAndOverrideModule, (, ci, ), ;, module, =, m, ;, }]
[m, =, new, JSModule, (, moduleName, ), ;, m, ., addAndOverrideModule, (, ci, ), ;, module, =, m, ;, }]
[(, moduleName, ), ;, m, ., addAndOverrideModule, (, ci, ), ;, module, =, m, ;, }, script, ., addChildToFront, (]
[(, moduleName, ), ;, m, ., addAndOverrideModule, (, ci, ), ;, module, =, m, ;, }, script, ., addChildToFront, (]
[(, moduleName, ), ;, m, ., addAndOverrideModule, (, ci, ), ;, module, =, m, ;, }, script, ., addChildToFront, (]
[m, ., addAndOverrideModule, (, ci, ), ;, module, =, m, ;, }, script, ., addChildToFront, (, IR, ., exprResult, (]
[m, ., addAndOverrideModule, (, ci, ), ;, module, =, m, ;, }, script, ., addChildToFront, (, IR, ., exprResult, (]
[ci, ), ;, module, =, m, ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (]
[ci, ), ;, module, =, m, ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (]
[=, m, ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (]
[=, m, ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (]
[script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (]
[(, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,]
[(, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,]
[(, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (]
[(, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "provide", ), ), ,]
[(, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "provide", ), ), ,]
[(, IR, ., name, (, "goog", ), ,, IR, ., string, (, "provide", ), ), ,, IR, ., string, (]
[,, IR, ., string, (, "provide", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (]
[(, "provide", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, script, ), ), ;]
[), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (]
[,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (, script, ,]
[string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, ), ;]
[string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, ), ;]
[), ), ., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, ), ;, NodeTraversal, ., traverse, (]
[., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[(, script, ), ), ;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, ), ;, NodeTraversal, ., traverse, (, compiler, ,, script, ,]
[), ;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, ), ;, NodeTraversal, ., traverse, (, compiler, ,, script, ,, new, SuffixVarsCallback, (]
[script, ,, moduleName, ), ;, NodeTraversal, ., traverse, (, compiler, ,, script, ,, new, SuffixVarsCallback, (, moduleName, ), ), ;]
[script, ,, moduleName, ), ;, NodeTraversal, ., traverse, (, compiler, ,, script, ,, new, SuffixVarsCallback, (, moduleName, ), ), ;]
[compiler, ., reportCodeChange, (, ), ;, }, private, void, emitOptionalModuleExportsOverride, (, Node, script, ,, String, moduleName, ), {, if, (]
[., reportCodeChange, (, ), ;, }, private, void, emitOptionalModuleExportsOverride, (, Node, script, ,, String, moduleName, ), {, if, (, !]
[., reportCodeChange, (, ), ;, }, private, void, emitOptionalModuleExportsOverride, (, Node, script, ,, String, moduleName, ), {, if, (, !]
[;, }, private, void, emitOptionalModuleExportsOverride, (, Node, script, ,, String, moduleName, ), {, if, (, !, modulesWithExports, ., contains, (]
[moduleName, ), {, if, (, !, modulesWithExports, ., contains, (, moduleName, ), ), {, return, ;, }, Node, moduleExportsProp, =]
[moduleName, ), {, if, (, !, modulesWithExports, ., contains, (, moduleName, ), ), {, return, ;, }, Node, moduleExportsProp, =]
[(, !, modulesWithExports, ., contains, (, moduleName, ), ), {, return, ;, }, Node, moduleExportsProp, =, IR, ., getprop, (]
[(, !, modulesWithExports, ., contains, (, moduleName, ), ), {, return, ;, }, Node, moduleExportsProp, =, IR, ., getprop, (]
[contains, (, moduleName, ), ), {, return, ;, }, Node, moduleExportsProp, =, IR, ., getprop, (, IR, ., name, (]
[), ), {, return, ;, }, Node, moduleExportsProp, =, IR, ., getprop, (, IR, ., name, (, moduleName, ), ,]
[), ), {, return, ;, }, Node, moduleExportsProp, =, IR, ., getprop, (, IR, ., name, (, moduleName, ), ,]
[;, }, Node, moduleExportsProp, =, IR, ., getprop, (, IR, ., name, (, moduleName, ), ,, IR, ., string, (]
[=, IR, ., getprop, (, IR, ., name, (, moduleName, ), ,, IR, ., string, (, "module$exports", ), ), ;]
[=, IR, ., getprop, (, IR, ., name, (, moduleName, ), ,, IR, ., string, (, "module$exports", ), ), ;]
[(, IR, ., name, (, moduleName, ), ,, IR, ., string, (, "module$exports", ), ), ;, script, ., addChildToBack, (]
[(, IR, ., name, (, moduleName, ), ,, IR, ., string, (, "module$exports", ), ), ;, script, ., addChildToBack, (]
[(, IR, ., name, (, moduleName, ), ,, IR, ., string, (, "module$exports", ), ), ;, script, ., addChildToBack, (]
[(, moduleName, ), ,, IR, ., string, (, "module$exports", ), ), ;, script, ., addChildToBack, (, IR, ., ifNode, (]
[), ,, IR, ., string, (, "module$exports", ), ), ;, script, ., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,]
[), ,, IR, ., string, (, "module$exports", ), ), ;, script, ., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,]
[string, (, "module$exports", ), ), ;, script, ., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block, (]
[string, (, "module$exports", ), ), ;, script, ., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block, (]
[), ;, script, ., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block, (, IR, ., exprResult, (]
[), ;, script, ., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block, (, IR, ., exprResult, (]
[addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (]
[addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (]
[ifNode, (, moduleExportsProp, ,, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (]
[,, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, moduleName, ), ,]
[,, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, moduleName, ), ,]
[(, IR, ., name, (, moduleName, ), ,, moduleExportsProp, ., cloneTree, (, ), ), ), ), ), ., copyInformationFromForTree, (]
[), ., copyInformationFromForTree, (, script, ), ), ;, }, private, void, visitModuleExports, (, Node, prop, ), {, String, moduleName, =]
[copyInformationFromForTree, (, script, ), ), ;, }, private, void, visitModuleExports, (, Node, prop, ), {, String, moduleName, =, guessCJSModuleName, (]
[copyInformationFromForTree, (, script, ), ), ;, }, private, void, visitModuleExports, (, Node, prop, ), {, String, moduleName, =, guessCJSModuleName, (]
[(, Node, prop, ), {, String, moduleName, =, guessCJSModuleName, (, prop, ., getSourceFileName, (, ), ), ;, Node, module, =]
[(, Node, prop, ), {, String, moduleName, =, guessCJSModuleName, (, prop, ., getSourceFileName, (, ), ), ;, Node, module, =]
[{, String, moduleName, =, guessCJSModuleName, (, prop, ., getSourceFileName, (, ), ), ;, Node, module, =, prop, ., getChildAtIndex, (]
[=, guessCJSModuleName, (, prop, ., getSourceFileName, (, ), ), ;, Node, module, =, prop, ., getChildAtIndex, (, 0, ), ;]
[=, guessCJSModuleName, (, prop, ., getSourceFileName, (, ), ), ;, Node, module, =, prop, ., getChildAtIndex, (, 0, ), ;]
[., getSourceFileName, (, ), ), ;, Node, module, =, prop, ., getChildAtIndex, (, 0, ), ;, module, ., putProp, (]
[., getSourceFileName, (, ), ), ;, Node, module, =, prop, ., getChildAtIndex, (, 0, ), ;, module, ., putProp, (]
[), ;, Node, module, =, prop, ., getChildAtIndex, (, 0, ), ;, module, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,]
[module, =, prop, ., getChildAtIndex, (, 0, ), ;, module, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "module", ), ;]
[module, =, prop, ., getChildAtIndex, (, 0, ), ;, module, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "module", ), ;]
[getChildAtIndex, (, 0, ), ;, module, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "module", ), ;, module, ., setString, (]
[., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "module", ), ;, module, ., setString, (, moduleName, ), ;, Node, exports, =]
[., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "module", ), ;, module, ., setString, (, moduleName, ), ;, Node, exports, =]
[., ORIGINALNAME_PROP, ,, "module", ), ;, module, ., setString, (, moduleName, ), ;, Node, exports, =, prop, ., getChildAtIndex, (]
["module", ), ;, module, ., setString, (, moduleName, ), ;, Node, exports, =, prop, ., getChildAtIndex, (, 1, ), ;]
["module", ), ;, module, ., setString, (, moduleName, ), ;, Node, exports, =, prop, ., getChildAtIndex, (, 1, ), ;]
[., setString, (, moduleName, ), ;, Node, exports, =, prop, ., getChildAtIndex, (, 1, ), ;, exports, ., putProp, (]
[., setString, (, moduleName, ), ;, Node, exports, =, prop, ., getChildAtIndex, (, 1, ), ;, exports, ., putProp, (]
[), ;, Node, exports, =, prop, ., getChildAtIndex, (, 1, ), ;, exports, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,]
[exports, =, prop, ., getChildAtIndex, (, 1, ), ;, exports, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "exports", ), ;]
[exports, =, prop, ., getChildAtIndex, (, 1, ), ;, exports, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "exports", ), ;]
[getChildAtIndex, (, 1, ), ;, exports, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "exports", ), ;, exports, ., setString, (]
[), ;, exports, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "exports", ), ;, exports, ., setString, (, "module$exports", ), ;]
[), ;, exports, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "exports", ), ;, exports, ., setString, (, "module$exports", ), ;]
[putProp, (, Node, ., ORIGINALNAME_PROP, ,, "exports", ), ;, exports, ., setString, (, "module$exports", ), ;, modulesWithExports, ., add, (]
[), ;, modulesWithExports, ., add, (, moduleName, ), ;, }, private, Node, getCurrentScriptNode, (, Node, n, ), {, while, (]
[(, moduleName, ), ;, }, private, Node, getCurrentScriptNode, (, Node, n, ), {, while, (, true, ), {, if, (]
[(, moduleName, ), ;, }, private, Node, getCurrentScriptNode, (, Node, n, ), {, while, (, true, ), {, if, (]
[(, Node, n, ), {, while, (, true, ), {, if, (, n, ., isScript, (, ), ), {, return]
[), {, while, (, true, ), {, if, (, n, ., isScript, (, ), ), {, return, n, ;, }]
[while, (, true, ), {, if, (, n, ., isScript, (, ), ), {, return, n, ;, }, n, =]
[while, (, true, ), {, if, (, n, ., isScript, (, ), ), {, return, n, ;, }, n, =]
[., getParent, (, ), ;, }, }, }, private, class, SuffixVarsCallback, extends, AbstractPostOrderCallback, {, private, static, final, String, EXPORTS, =]
[{, private, static, final, String, EXPORTS, =, "exports", ;, private, final, String, suffix, ;, SuffixVarsCallback, (, String, suffix, ), {]
[{, private, static, final, String, EXPORTS, =, "exports", ;, private, final, String, suffix, ;, SuffixVarsCallback, (, String, suffix, ), {]
[String, EXPORTS, =, "exports", ;, private, final, String, suffix, ;, SuffixVarsCallback, (, String, suffix, ), {, this, ., suffix, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, String, name, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, String, name, =]
[if, (, n, ., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[if, (, n, ., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (, suffix, ., equals, (]
[., getString, (, ), ;, if, (, suffix, ., equals, (, name, ), ), {, return, ;, }, if, (]
[., getString, (, ), ;, if, (, suffix, ., equals, (, name, ), ), {, return, ;, }, if, (]
[;, if, (, suffix, ., equals, (, name, ), ), {, return, ;, }, if, (, EXPORTS, ., equals, (]
[., equals, (, name, ), ), {, return, ;, }, if, (, EXPORTS, ., equals, (, name, ), ), {]
[., equals, (, name, ), ), {, return, ;, }, if, (, EXPORTS, ., equals, (, name, ), ), {]
[), ), {, return, ;, }, if, (, EXPORTS, ., equals, (, name, ), ), {, n, ., setString, (]
[return, ;, }, if, (, EXPORTS, ., equals, (, name, ), ), {, n, ., setString, (, suffix, ), ;]
[return, ;, }, if, (, EXPORTS, ., equals, (, name, ), ), {, n, ., setString, (, suffix, ), ;]
[(, EXPORTS, ., equals, (, name, ), ), {, n, ., setString, (, suffix, ), ;, n, ., putProp, (]
[(, EXPORTS, ., equals, (, name, ), ), {, n, ., setString, (, suffix, ), ;, n, ., putProp, (]
[(, name, ), ), {, n, ., setString, (, suffix, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,]
[;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, EXPORTS, ), ;, }, else, {, Scope, ., Var, var, =]
[;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, EXPORTS, ), ;, }, else, {, Scope, ., Var, var, =]
[;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, EXPORTS, ), ;, }, else, {, Scope, ., Var, var, =]
[,, EXPORTS, ), ;, }, else, {, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[else, {, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[else, {, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[else, {, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, &&]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, &&]
[), ., getVar, (, name, ), ;, if, (, var, !=, null, &&, var, ., isGlobal, (, ), ), {]
[), ., getVar, (, name, ), ;, if, (, var, !=, null, &&, var, ., isGlobal, (, ), ), {]
[name, ), ;, if, (, var, !=, null, &&, var, ., isGlobal, (, ), ), {, n, ., setString, (]
[name, ), ;, if, (, var, !=, null, &&, var, ., isGlobal, (, ), ), {, n, ., setString, (]
[name, ), ;, if, (, var, !=, null, &&, var, ., isGlobal, (, ), ), {, n, ., setString, (]
[;, if, (, var, !=, null, &&, var, ., isGlobal, (, ), ), {, n, ., setString, (, name, +]
[(, var, !=, null, &&, var, ., isGlobal, (, ), ), {, n, ., setString, (, name, +, "$$", +]
[null, &&, var, ., isGlobal, (, ), ), {, n, ., setString, (, name, +, "$$", +, suffix, ), ;]
[null, &&, var, ., isGlobal, (, ), ), {, n, ., setString, (, name, +, "$$", +, suffix, ), ;]
[isGlobal, (, ), ), {, n, ., setString, (, name, +, "$$", +, suffix, ), ;, n, ., putProp, (]
[isGlobal, (, ), ), {, n, ., setString, (, name, +, "$$", +, suffix, ), ;, n, ., putProp, (]
[{, n, ., setString, (, name, +, "$$", +, suffix, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,]
