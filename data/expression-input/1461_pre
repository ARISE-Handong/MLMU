[., math3, ., util, ., FastMath, ;, public, class, FastCosineTransformer, implements, RealTransformer, ,, Serializable, {, static, final, long, serialVersionUID, =]
[static, final, long, serialVersionUID, =, 20120212L, ;, private, final, DctNormalization, normalization, ;, public, FastCosineTransformer, (, final, DctNormalization, normalization, ), {]
[static, final, long, serialVersionUID, =, 20120212L, ;, private, final, DctNormalization, normalization, ;, public, FastCosineTransformer, (, final, DctNormalization, normalization, ), {]
[=, 20120212L, ;, private, final, DctNormalization, normalization, ;, public, FastCosineTransformer, (, final, DctNormalization, normalization, ), {, this, ., normalization, =]
[double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), throws, MathIllegalArgumentException, {, if, (]
[double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), throws, MathIllegalArgumentException, {, if, (]
[], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), throws, MathIllegalArgumentException, {, if, (, type, ==]
[], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), throws, MathIllegalArgumentException, {, if, (, type, ==]
[f, ,, final, TransformType, type, ), throws, MathIllegalArgumentException, {, if, (, type, ==, TransformType, ., FORWARD, ), {, if, (]
[f, ,, final, TransformType, type, ), throws, MathIllegalArgumentException, {, if, (, type, ==, TransformType, ., FORWARD, ), {, if, (]
[final, TransformType, type, ), throws, MathIllegalArgumentException, {, if, (, type, ==, TransformType, ., FORWARD, ), {, if, (, normalization, ==]
[final, TransformType, type, ), throws, MathIllegalArgumentException, {, if, (, type, ==, TransformType, ., FORWARD, ), {, if, (, normalization, ==]
[type, ==, TransformType, ., FORWARD, ), {, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =]
[type, ==, TransformType, ., FORWARD, ), {, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =]
[FORWARD, ), {, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =, FastMath, ., sqrt, (]
[FORWARD, ), {, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =, FastMath, ., sqrt, (]
[{, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /]
[if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, (]
[if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, (]
[if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, (]
[DctNormalization, ., ORTHOGONAL_DCT_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, (, f, ., length, -]
[final, double, s, =, FastMath, ., sqrt, (, 2.0, /, (, f, ., length, -, 1, ), ), ;, return]
[final, double, s, =, FastMath, ., sqrt, (, 2.0, /, (, f, ., length, -, 1, ), ), ;, return]
[FastMath, ., sqrt, (, 2.0, /, (, f, ., length, -, 1, ), ), ;, return, TransformUtils, ., scaleArray, (]
[sqrt, (, 2.0, /, (, f, ., length, -, 1, ), ), ;, return, TransformUtils, ., scaleArray, (, fct, (]
[/, (, f, ., length, -, 1, ), ), ;, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,]
[-, 1, ), ), ;, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,, s, ), ;, }, return]
[), ), ;, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,, s, ), ;, }, return, fct, (]
[fct, (, f, ), ,, s, ), ;, }, return, fct, (, f, ), ;, }, final, double, s2, =]
[fct, (, f, ), ,, s, ), ;, }, return, fct, (, f, ), ;, }, final, double, s2, =]
[f, ), ,, s, ), ;, }, return, fct, (, f, ), ;, }, final, double, s2, =, 2.0, /]
[), ,, s, ), ;, }, return, fct, (, f, ), ;, }, final, double, s2, =, 2.0, /, (]
[), ,, s, ), ;, }, return, fct, (, f, ), ;, }, final, double, s2, =, 2.0, /, (]
[), ,, s, ), ;, }, return, fct, (, f, ), ;, }, final, double, s2, =, 2.0, /, (]
[;, }, return, fct, (, f, ), ;, }, final, double, s2, =, 2.0, /, (, f, ., length, -]
[final, double, s2, =, 2.0, /, (, f, ., length, -, 1, ), ;, final, double, s1, ;, if, (]
[final, double, s2, =, 2.0, /, (, f, ., length, -, 1, ), ;, final, double, s1, ;, if, (]
[s2, =, 2.0, /, (, f, ., length, -, 1, ), ;, final, double, s1, ;, if, (, normalization, ==]
[s2, =, 2.0, /, (, f, ., length, -, 1, ), ;, final, double, s1, ;, if, (, normalization, ==]
[f, ., length, -, 1, ), ;, final, double, s1, ;, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {]
[length, -, 1, ), ;, final, double, s1, ;, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, s1, =]
[length, -, 1, ), ;, final, double, s1, ;, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, s1, =]
[;, final, double, s1, ;, if, (, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, s1, =, FastMath, ., sqrt, (]
[(, normalization, ==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, s1, =, FastMath, ., sqrt, (, s2, ), ;, }, else, {]
[==, DctNormalization, ., ORTHOGONAL_DCT_I, ), {, s1, =, FastMath, ., sqrt, (, s2, ), ;, }, else, {, s1, =]
[), {, s1, =, FastMath, ., sqrt, (, s2, ), ;, }, else, {, s1, =, s2, ;, }, return]
[), {, s1, =, FastMath, ., sqrt, (, s2, ), ;, }, else, {, s1, =, s2, ;, }, return]
[FastMath, ., sqrt, (, s2, ), ;, }, else, {, s1, =, s2, ;, }, return, TransformUtils, ., scaleArray, (]
[sqrt, (, s2, ), ;, }, else, {, s1, =, s2, ;, }, return, TransformUtils, ., scaleArray, (, fct, (]
[), ;, }, else, {, s1, =, s2, ;, }, return, TransformUtils, ., scaleArray, (, fct, (, f, ), ,]
[double, max, ,, final, int, n, ,, final, TransformType, type, ), throws, MathIllegalArgumentException, {, final, double, [, ], data, =]
[double, max, ,, final, int, n, ,, final, TransformType, type, ), throws, MathIllegalArgumentException, {, final, double, [, ], data, =]
[int, n, ,, final, TransformType, type, ), throws, MathIllegalArgumentException, {, final, double, [, ], data, =, FunctionUtils, ., sample, (]
[,, final, TransformType, type, ), throws, MathIllegalArgumentException, {, final, double, [, ], data, =, FunctionUtils, ., sample, (, f, ,]
[TransformType, type, ), throws, MathIllegalArgumentException, {, final, double, [, ], data, =, FunctionUtils, ., sample, (, f, ,, min, ,]
[), throws, MathIllegalArgumentException, {, final, double, [, ], data, =, FunctionUtils, ., sample, (, f, ,, min, ,, max, ,]
[final, double, [, ], data, =, FunctionUtils, ., sample, (, f, ,, min, ,, max, ,, n, ), ;, return]
[[, ], data, =, FunctionUtils, ., sample, (, f, ,, min, ,, max, ,, n, ), ;, return, transform, (]
[data, =, FunctionUtils, ., sample, (, f, ,, min, ,, max, ,, n, ), ;, return, transform, (, data, ,]
[protected, double, [, ], fct, (, double, [, ], f, ), throws, MathIllegalArgumentException, {, final, double, [, ], transformed, =]
[], fct, (, double, [, ], f, ), throws, MathIllegalArgumentException, {, final, double, [, ], transformed, =, new, double, []
[], fct, (, double, [, ], f, ), throws, MathIllegalArgumentException, {, final, double, [, ], transformed, =, new, double, []
[MathIllegalArgumentException, {, final, double, [, ], transformed, =, new, double, [, f, ., length, ], ;, final, int, n, =]
[MathIllegalArgumentException, {, final, double, [, ], transformed, =, new, double, [, f, ., length, ], ;, final, int, n, =]
[MathIllegalArgumentException, {, final, double, [, ], transformed, =, new, double, [, f, ., length, ], ;, final, int, n, =]
[[, ], transformed, =, new, double, [, f, ., length, ], ;, final, int, n, =, f, ., length, -]
[new, double, [, f, ., length, ], ;, final, int, n, =, f, ., length, -, 1, ;, if, (]
[double, [, f, ., length, ], ;, final, int, n, =, f, ., length, -, 1, ;, if, (, !]
[double, [, f, ., length, ], ;, final, int, n, =, f, ., length, -, 1, ;, if, (, !]
[length, ], ;, final, int, n, =, f, ., length, -, 1, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (]
[n, =, f, ., length, -, 1, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw]
[., length, -, 1, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (]
[., length, -, 1, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (]
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_PLUS_ONE, ,]
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_PLUS_ONE, ,]
[ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_PLUS_ONE, ,, Integer, ., valueOf, (]
[ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_PLUS_ONE, ,, Integer, ., valueOf, (]
[new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_PLUS_ONE, ,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (]
[new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_PLUS_ONE, ,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (]
[(, LocalizedFormats, ., NOT_POWER_OF_TWO_PLUS_ONE, ,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (, n, ==]
[NOT_POWER_OF_TWO_PLUS_ONE, ,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (, n, ==, 1, ), {]
[NOT_POWER_OF_TWO_PLUS_ONE, ,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (, n, ==, 1, ), {]
[Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (, n, ==, 1, ), {, transformed, []
[(, f, ., length, ), ), ;, }, if, (, n, ==, 1, ), {, transformed, [, 0, ], =]
[(, f, ., length, ), ), ;, }, if, (, n, ==, 1, ), {, transformed, [, 0, ], =]
[., length, ), ), ;, }, if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.5, *]
[length, ), ), ;, }, if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.5, *, (]
[length, ), ), ;, }, if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.5, *, (]
[length, ), ), ;, }, if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.5, *, (]
[), ;, }, if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.5, *, (, f, []
[if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.5, *, (, f, [, 0, ], +]
[if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.5, *, (, f, [, 0, ], +]
[n, ==, 1, ), {, transformed, [, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, []
[{, transformed, [, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, 1, ], ), ;]
[{, transformed, [, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, 1, ], ), ;]
[[, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, 1, ], ), ;, transformed, []
[=, 0.5, *, (, f, [, 0, ], +, f, [, 1, ], ), ;, transformed, [, 1, ], =]
[=, 0.5, *, (, f, [, 0, ], +, f, [, 1, ], ), ;, transformed, [, 1, ], =]
[*, (, f, [, 0, ], +, f, [, 1, ], ), ;, transformed, [, 1, ], =, 0.5, *]
[(, f, [, 0, ], +, f, [, 1, ], ), ;, transformed, [, 1, ], =, 0.5, *, (]
[(, f, [, 0, ], +, f, [, 1, ], ), ;, transformed, [, 1, ], =, 0.5, *, (]
[(, f, [, 0, ], +, f, [, 1, ], ), ;, transformed, [, 1, ], =, 0.5, *, (]
[[, 0, ], +, f, [, 1, ], ), ;, transformed, [, 1, ], =, 0.5, *, (, f, []
[+, f, [, 1, ], ), ;, transformed, [, 1, ], =, 0.5, *, (, f, [, 0, ], -]
[+, f, [, 1, ], ), ;, transformed, [, 1, ], =, 0.5, *, (, f, [, 0, ], -]
[[, 1, ], ), ;, transformed, [, 1, ], =, 0.5, *, (, f, [, 0, ], -, f, []
[transformed, [, 1, ], =, 0.5, *, (, f, [, 0, ], -, f, [, 1, ], ), ;, return]
[[, 0, ], -, f, [, 1, ], ), ;, return, transformed, ;, }, final, double, [, ], x, =]
[-, f, [, 1, ], ), ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, []
[1, ], ), ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;]
[1, ], ), ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;]
[), ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x, []
[transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =]
[transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =]
[}, final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =, 0.5, *]
[final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =, 0.5, *, (]
[final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =, 0.5, *, (]
[final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =, 0.5, *, (]
[[, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =, 0.5, *, (, f, []
[=, new, double, [, n, ], ;, x, [, 0, ], =, 0.5, *, (, f, [, 0, ], +]
[=, new, double, [, n, ], ;, x, [, 0, ], =, 0.5, *, (, f, [, 0, ], +]
[double, [, n, ], ;, x, [, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, []
[;, x, [, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, n, ], ), ;]
[;, x, [, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, n, ], ), ;]
[[, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, n, ], ), ;, x, []
[[, 0, ], =, 0.5, *, (, f, [, 0, ], +, f, [, n, ], ), ;, x, []
[=, 0.5, *, (, f, [, 0, ], +, f, [, n, ], ), ;, x, [, n, >, >]
[(, f, [, 0, ], +, f, [, n, ], ), ;, x, [, n, >, >, 1, ], =]
[(, f, [, 0, ], +, f, [, n, ], ), ;, x, [, n, >, >, 1, ], =]
[[, 0, ], +, f, [, n, ], ), ;, x, [, n, >, >, 1, ], =, f, []
[[, 0, ], +, f, [, n, ], ), ;, x, [, n, >, >, 1, ], =, f, []
[+, f, [, n, ], ), ;, x, [, n, >, >, 1, ], =, f, [, n, >, >]
[;, x, [, n, >, >, 1, ], =, f, [, n, >, >, 1, ], ;, double, t1, =]
[;, x, [, n, >, >, 1, ], =, f, [, n, >, >, 1, ], ;, double, t1, =]
[[, n, >, >, 1, ], =, f, [, n, >, >, 1, ], ;, double, t1, =, 0.5, *]
[n, >, >, 1, ], =, f, [, n, >, >, 1, ], ;, double, t1, =, 0.5, *, (]
[n, >, >, 1, ], =, f, [, n, >, >, 1, ], ;, double, t1, =, 0.5, *, (]
[n, >, >, 1, ], =, f, [, n, >, >, 1, ], ;, double, t1, =, 0.5, *, (]
[>, 1, ], =, f, [, n, >, >, 1, ], ;, double, t1, =, 0.5, *, (, f, []
[=, f, [, n, >, >, 1, ], ;, double, t1, =, 0.5, *, (, f, [, 0, ], -]
[=, f, [, n, >, >, 1, ], ;, double, t1, =, 0.5, *, (, f, [, 0, ], -]
[[, n, >, >, 1, ], ;, double, t1, =, 0.5, *, (, f, [, 0, ], -, f, []
[=, 0.5, *, (, f, [, 0, ], -, f, [, n, ], ), ;, for, (, int, i, =]
[*, (, f, [, 0, ], -, f, [, n, ], ), ;, for, (, int, i, =, 1, ;]
[*, (, f, [, 0, ], -, f, [, n, ], ), ;, for, (, int, i, =, 1, ;]
[f, [, 0, ], -, f, [, n, ], ), ;, for, (, int, i, =, 1, ;, i, <]
[[, 0, ], -, f, [, n, ], ), ;, for, (, int, i, =, 1, ;, i, <, (]
[[, 0, ], -, f, [, n, ], ), ;, for, (, int, i, =, 1, ;, i, <, (]
[-, f, [, n, ], ), ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >]
[n, ], ), ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;]
[n, ], ), ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;]
[=, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =]
[=, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =]
[;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, 0.5, *]
[i, <, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, 0.5, *, (]
[i, <, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, 0.5, *, (]
[i, <, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, 0.5, *, (]
[(, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, 0.5, *, (, f, []
[>, 1, ), ;, i, ++, ), {, final, double, a, =, 0.5, *, (, f, [, i, ], +]
[>, 1, ), ;, i, ++, ), {, final, double, a, =, 0.5, *, (, f, [, i, ], +]
[), ;, i, ++, ), {, final, double, a, =, 0.5, *, (, f, [, i, ], +, f, []
[), ;, i, ++, ), {, final, double, a, =, 0.5, *, (, f, [, i, ], +, f, []
[i, ++, ), {, final, double, a, =, 0.5, *, (, f, [, i, ], +, f, [, n, -]
[0.5, *, (, f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =]
[0.5, *, (, f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =]
[0.5, *, (, f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =]
[[, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =, FastMath, ., sin, (]
[[, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =, FastMath, ., sin, (]
[[, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =, FastMath, ., sin, (]
[], +, f, [, n, -, i, ], ), ;, final, double, b, =, FastMath, ., sin, (, i, *]
[], +, f, [, n, -, i, ], ), ;, final, double, b, =, FastMath, ., sin, (, i, *]
[n, -, i, ], ), ;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /]
[], ), ;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *]
[), ;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (]
[), ;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (]
[), ;, final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (]
[final, double, b, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f, []
[=, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -]
[=, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -]
[., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -, f, []
[., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -, f, []
[(, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -, f, [, n, -]
[), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, final, double, c, =]
[), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, final, double, c, =]
[), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, final, double, c, =]
[[, i, ], -, f, [, n, -, i, ], ), ;, final, double, c, =, FastMath, ., cos, (]
[[, i, ], -, f, [, n, -, i, ], ), ;, final, double, c, =, FastMath, ., cos, (]
[[, i, ], -, f, [, n, -, i, ], ), ;, final, double, c, =, FastMath, ., cos, (]
[], -, f, [, n, -, i, ], ), ;, final, double, c, =, FastMath, ., cos, (, i, *]
[], -, f, [, n, -, i, ], ), ;, final, double, c, =, FastMath, ., cos, (, i, *]
[n, -, i, ], ), ;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI, /]
[], ), ;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n, ), *]
[), ;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n, ), *, (]
[), ;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n, ), *, (]
[), ;, final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n, ), *, (]
[final, double, c, =, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n, ), *, (, f, []
[=, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -]
[=, FastMath, ., cos, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -]
[., cos, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -, f, []
[., cos, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -, f, []
[(, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], -, f, [, n, -]
[., PI, /, n, ), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;]
[., PI, /, n, ), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;]
[/, n, ), *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, x, []
[*, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =]
[*, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =]
[f, [, i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, -]
[i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, -, b, ;]
[i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, -, b, ;]
[-, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, -, b, ;, x, []
[-, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, -, b, ;, x, []
[[, n, -, i, ], ), ;, x, [, i, ], =, a, -, b, ;, x, [, n, -]
[i, ], ), ;, x, [, i, ], =, a, -, b, ;, x, [, n, -, i, ], =]
[i, ], ), ;, x, [, i, ], =, a, -, b, ;, x, [, n, -, i, ], =]
[), ;, x, [, i, ], =, a, -, b, ;, x, [, n, -, i, ], =, a, +]
[x, [, i, ], =, a, -, b, ;, x, [, n, -, i, ], =, a, +, b, ;]
[i, ], =, a, -, b, ;, x, [, n, -, i, ], =, a, +, b, ;, t1, +=]
[;, x, [, n, -, i, ], =, a, +, b, ;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;]
[[, n, -, i, ], =, a, +, b, ;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;, transformer, =]
[i, ], =, a, +, b, ;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (]
[i, ], =, a, +, b, ;, t1, +=, c, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (]
[;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =]
[;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =]
[;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (]
[=, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,]
[=, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,]
[., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;]
[., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;]
[), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, []
[[, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =]
[[, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =]
[[, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =]
[y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, y, []
[,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, y, [, 0, ], ., getReal, (, ), ;]
[,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, y, [, 0, ], ., getReal, (, ), ;]
[., FORWARD, ), ;, transformed, [, 0, ], =, y, [, 0, ], ., getReal, (, ), ;, transformed, []
[;, transformed, [, 0, ], =, y, [, 0, ], ., getReal, (, ), ;, transformed, [, 1, ], =]
[[, 0, ], ., getReal, (, ), ;, transformed, [, 1, ], =, t1, ;, for, (, int, i, =]
[], ., getReal, (, ), ;, transformed, [, 1, ], =, t1, ;, for, (, int, i, =, 1, ;]
[], ., getReal, (, ), ;, transformed, [, 1, ], =, t1, ;, for, (, int, i, =, 1, ;]
[getReal, (, ), ;, transformed, [, 1, ], =, t1, ;, for, (, int, i, =, 1, ;, i, <]
[(, ), ;, transformed, [, 1, ], =, t1, ;, for, (, int, i, =, 1, ;, i, <, (]
[(, ), ;, transformed, [, 1, ], =, t1, ;, for, (, int, i, =, 1, ;, i, <, (]
[transformed, [, 1, ], =, t1, ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >]
[], =, t1, ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;]
[], =, t1, ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;]
[for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {]
[for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {]
[int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, []
[int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, []
[=, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *]
[i, <, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ], =]
[i, <, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ], =]
[i, <, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ], =]
[(, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ], =, y, []
[i, ++, ), {, transformed, [, 2, *, i, ], =, y, [, i, ], ., getReal, (, ), ;]
[i, ++, ), {, transformed, [, 2, *, i, ], =, y, [, i, ], ., getReal, (, ), ;]
[), {, transformed, [, 2, *, i, ], =, y, [, i, ], ., getReal, (, ), ;, transformed, []
[), {, transformed, [, 2, *, i, ], =, y, [, i, ], ., getReal, (, ), ;, transformed, []
[), {, transformed, [, 2, *, i, ], =, y, [, i, ], ., getReal, (, ), ;, transformed, []
[transformed, [, 2, *, i, ], =, y, [, i, ], ., getReal, (, ), ;, transformed, [, 2, *]
[2, *, i, ], =, y, [, i, ], ., getReal, (, ), ;, transformed, [, 2, *, i, +]
[], =, y, [, i, ], ., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =]
[], =, y, [, i, ], ., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =]
[], =, y, [, i, ], ., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =]
[y, [, i, ], ., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =, transformed, []
[y, [, i, ], ., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =, transformed, []
[y, [, i, ], ., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =, transformed, []
[i, ], ., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =, transformed, [, 2, *]
[., getReal, (, ), ;, transformed, [, 2, *, i, +, 1, ], =, transformed, [, 2, *, i, -]
[), ;, transformed, [, 2, *, i, +, 1, ], =, transformed, [, 2, *, i, -, 1, ], -]
[), ;, transformed, [, 2, *, i, +, 1, ], =, transformed, [, 2, *, i, -, 1, ], -]
[), ;, transformed, [, 2, *, i, +, 1, ], =, transformed, [, 2, *, i, -, 1, ], -]
[transformed, [, 2, *, i, +, 1, ], =, transformed, [, 2, *, i, -, 1, ], -, y, []
[=, transformed, [, 2, *, i, -, 1, ], -, y, [, i, ], ., getImaginary, (, ), ;, }]
[=, transformed, [, 2, *, i, -, 1, ], -, y, [, i, ], ., getImaginary, (, ), ;, }]
[[, 2, *, i, -, 1, ], -, y, [, i, ], ., getImaginary, (, ), ;, }, transformed, []
[i, -, 1, ], -, y, [, i, ], ., getImaginary, (, ), ;, }, transformed, [, n, ], =]
[i, -, 1, ], -, y, [, i, ], ., getImaginary, (, ), ;, }, transformed, [, n, ], =]
[i, -, 1, ], -, y, [, i, ], ., getImaginary, (, ), ;, }, transformed, [, n, ], =]
[1, ], -, y, [, i, ], ., getImaginary, (, ), ;, }, transformed, [, n, ], =, y, []
[1, ], -, y, [, i, ], ., getImaginary, (, ), ;, }, transformed, [, n, ], =, y, []
[y, [, i, ], ., getImaginary, (, ), ;, }, transformed, [, n, ], =, y, [, n, >, >]
[;, }, transformed, [, n, ], =, y, [, n, >, >, 1, ], ., getReal, (, ), ;, return]
