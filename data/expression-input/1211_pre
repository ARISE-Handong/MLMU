[., commons, ., math3, ., util, ., FastMath, ;, class, GraggBulirschStoerStepInterpolator, extends, AbstractStepInterpolator, {, private, static, final, long, serialVersionUID, =]
[], [, ], polynomials, ;, private, double, [, ], errfac, ;, private, int, currentDegree, ;, public, GraggBulirschStoerStepInterpolator, (, ), {]
[], polynomials, ;, private, double, [, ], errfac, ;, private, int, currentDegree, ;, public, GraggBulirschStoerStepInterpolator, (, ), {, y0Dot, =]
[;, private, double, [, ], errfac, ;, private, int, currentDegree, ;, public, GraggBulirschStoerStepInterpolator, (, ), {, y0Dot, =, null, ;]
[double, [, ], errfac, ;, private, int, currentDegree, ;, public, GraggBulirschStoerStepInterpolator, (, ), {, y0Dot, =, null, ;, y1, =]
[], errfac, ;, private, int, currentDegree, ;, public, GraggBulirschStoerStepInterpolator, (, ), {, y0Dot, =, null, ;, y1, =, null, ;]
[;, private, int, currentDegree, ;, public, GraggBulirschStoerStepInterpolator, (, ), {, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =]
[int, currentDegree, ;, public, GraggBulirschStoerStepInterpolator, (, ), {, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =, null, ;]
[;, public, GraggBulirschStoerStepInterpolator, (, ), {, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =]
[GraggBulirschStoerStepInterpolator, (, ), {, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;]
[), {, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, resetTables, (]
[{, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, resetTables, (, -]
[], yMidDots, ,, final, boolean, forward, ,, final, EquationsMapper, primaryMapper, ,, final, EquationsMapper, [, ], secondaryMappers, ), {, super, (]
[,, final, boolean, forward, ,, final, EquationsMapper, primaryMapper, ,, final, EquationsMapper, [, ], secondaryMappers, ), {, super, (, y, ,]
[boolean, forward, ,, final, EquationsMapper, primaryMapper, ,, final, EquationsMapper, [, ], secondaryMappers, ), {, super, (, y, ,, forward, ,]
[,, final, EquationsMapper, primaryMapper, ,, final, EquationsMapper, [, ], secondaryMappers, ), {, super, (, y, ,, forward, ,, primaryMapper, ,]
[primaryMapper, ,, final, EquationsMapper, [, ], secondaryMappers, ), {, super, (, y, ,, forward, ,, primaryMapper, ,, secondaryMappers, ), ;]
[primaryMapper, ,, final, EquationsMapper, [, ], secondaryMappers, ), {, super, (, y, ,, forward, ,, primaryMapper, ,, secondaryMappers, ), ;]
[[, ], secondaryMappers, ), {, super, (, y, ,, forward, ,, primaryMapper, ,, secondaryMappers, ), ;, this, ., y0Dot, =]
[secondaryMappers, ), {, super, (, y, ,, forward, ,, primaryMapper, ,, secondaryMappers, ), ;, this, ., y0Dot, =, y0Dot, ;]
[secondaryMappers, ), {, super, (, y, ,, forward, ,, primaryMapper, ,, secondaryMappers, ), ;, this, ., y0Dot, =, y0Dot, ;]
[(, y, ,, forward, ,, primaryMapper, ,, secondaryMappers, ), ;, this, ., y0Dot, =, y0Dot, ;, this, ., y1, =]
[,, forward, ,, primaryMapper, ,, secondaryMappers, ), ;, this, ., y0Dot, =, y0Dot, ;, this, ., y1, =, y1, ;]
[,, forward, ,, primaryMapper, ,, secondaryMappers, ), ;, this, ., y0Dot, =, y0Dot, ;, this, ., y1, =, y1, ;]
[,, secondaryMappers, ), ;, this, ., y0Dot, =, y0Dot, ;, this, ., y1, =, y1, ;, this, ., y1Dot, =]
[), ;, this, ., y0Dot, =, y0Dot, ;, this, ., y1, =, y1, ;, this, ., y1Dot, =, y1Dot, ;]
[), ;, this, ., y0Dot, =, y0Dot, ;, this, ., y1, =, y1, ;, this, ., y1Dot, =, y1Dot, ;]
[y0Dot, =, y0Dot, ;, this, ., y1, =, y1, ;, this, ., y1Dot, =, y1Dot, ;, this, ., yMidDots, =]
[y0Dot, ;, this, ., y1, =, y1, ;, this, ., y1Dot, =, y1Dot, ;, this, ., yMidDots, =, yMidDots, ;]
[this, ., y1, =, y1, ;, this, ., y1Dot, =, y1Dot, ;, this, ., yMidDots, =, yMidDots, ;, resetTables, (]
[this, ., y1, =, y1, ;, this, ., y1Dot, =, y1Dot, ;, this, ., yMidDots, =, yMidDots, ;, resetTables, (]
[this, ., y1, =, y1, ;, this, ., y1Dot, =, y1Dot, ;, this, ., yMidDots, =, yMidDots, ;, resetTables, (]
[y1, ;, this, ., y1Dot, =, y1Dot, ;, this, ., yMidDots, =, yMidDots, ;, resetTables, (, yMidDots, ., length, +]
[resetTables, (, yMidDots, ., length, +, 4, ), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, GraggBulirschStoerStepInterpolator, interpolator, ), {, super, (]
[), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, GraggBulirschStoerStepInterpolator, interpolator, ), {, super, (, interpolator, ), ;, final, int, dimension, =]
[), ;, }, public, GraggBulirschStoerStepInterpolator, (, final, GraggBulirschStoerStepInterpolator, interpolator, ), {, super, (, interpolator, ), ;, final, int, dimension, =]
[GraggBulirschStoerStepInterpolator, (, final, GraggBulirschStoerStepInterpolator, interpolator, ), {, super, (, interpolator, ), ;, final, int, dimension, =, currentState, ., length, ;]
[final, GraggBulirschStoerStepInterpolator, interpolator, ), {, super, (, interpolator, ), ;, final, int, dimension, =, currentState, ., length, ;, y0Dot, =]
[interpolator, ), {, super, (, interpolator, ), ;, final, int, dimension, =, currentState, ., length, ;, y0Dot, =, null, ;]
[{, super, (, interpolator, ), ;, final, int, dimension, =, currentState, ., length, ;, y0Dot, =, null, ;, y1, =]
[(, interpolator, ), ;, final, int, dimension, =, currentState, ., length, ;, y0Dot, =, null, ;, y1, =, null, ;]
[), ;, final, int, dimension, =, currentState, ., length, ;, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =]
[final, int, dimension, =, currentState, ., length, ;, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =, null, ;]
[dimension, =, currentState, ., length, ;, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =]
[length, ;, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, if, (]
[length, ;, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, if, (]
[length, ;, y0Dot, =, null, ;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, if, (]
[null, ;, y1, =, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, if, (, interpolator, ., polynomials, ==]
[=, null, ;, y1Dot, =, null, ;, yMidDots, =, null, ;, if, (, interpolator, ., polynomials, ==, null, ), {]
[;, y1Dot, =, null, ;, yMidDots, =, null, ;, if, (, interpolator, ., polynomials, ==, null, ), {, polynomials, =]
[=, null, ;, yMidDots, =, null, ;, if, (, interpolator, ., polynomials, ==, null, ), {, polynomials, =, null, ;]
[;, yMidDots, =, null, ;, if, (, interpolator, ., polynomials, ==, null, ), {, polynomials, =, null, ;, currentDegree, =]
[yMidDots, =, null, ;, if, (, interpolator, ., polynomials, ==, null, ), {, polynomials, =, null, ;, currentDegree, =, -]
[(, interpolator, ., polynomials, ==, null, ), {, polynomials, =, null, ;, currentDegree, =, -, 1, ;, }, else, {]
[., polynomials, ==, null, ), {, polynomials, =, null, ;, currentDegree, =, -, 1, ;, }, else, {, resetTables, (]
[., polynomials, ==, null, ), {, polynomials, =, null, ;, currentDegree, =, -, 1, ;, }, else, {, resetTables, (]
[currentDegree, =, -, 1, ;, }, else, {, resetTables, (, interpolator, ., currentDegree, ), ;, for, (, int, i, =]
[-, 1, ;, }, else, {, resetTables, (, interpolator, ., currentDegree, ), ;, for, (, int, i, =, 0, ;]
[-, 1, ;, }, else, {, resetTables, (, interpolator, ., currentDegree, ), ;, for, (, int, i, =, 0, ;]
[;, }, else, {, resetTables, (, interpolator, ., currentDegree, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, }, else, {, resetTables, (, interpolator, ., currentDegree, ), ;, for, (, int, i, =, 0, ;, i, <]
[resetTables, (, interpolator, ., currentDegree, ), ;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;]
[(, interpolator, ., currentDegree, ), ;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++]
[currentDegree, ), ;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, ), {]
[currentDegree, ), ;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, ), {, polynomials, []
[int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, ), {, polynomials, [, i, ], =]
[0, ;, i, <, polynomials, ., length, ;, ++, i, ), {, polynomials, [, i, ], =, new, double, []
[<, polynomials, ., length, ;, ++, i, ), {, polynomials, [, i, ], =, new, double, [, dimension, ], ;]
[<, polynomials, ., length, ;, ++, i, ), {, polynomials, [, i, ], =, new, double, [, dimension, ], ;]
[;, ++, i, ), {, polynomials, [, i, ], =, new, double, [, dimension, ], ;, System, ., arraycopy, (]
[;, ++, i, ), {, polynomials, [, i, ], =, new, double, [, dimension, ], ;, System, ., arraycopy, (]
[;, ++, i, ), {, polynomials, [, i, ], =, new, double, [, dimension, ], ;, System, ., arraycopy, (]
[{, polynomials, [, i, ], =, new, double, [, dimension, ], ;, System, ., arraycopy, (, interpolator, ., polynomials, []
[i, ], =, new, double, [, dimension, ], ;, System, ., arraycopy, (, interpolator, ., polynomials, [, i, ], ,]
[=, new, double, [, dimension, ], ;, System, ., arraycopy, (, interpolator, ., polynomials, [, i, ], ,, 0, ,]
[=, new, double, [, dimension, ], ;, System, ., arraycopy, (, interpolator, ., polynomials, [, i, ], ,, 0, ,]
[double, [, dimension, ], ;, System, ., arraycopy, (, interpolator, ., polynomials, [, i, ], ,, 0, ,, polynomials, []
[], ;, System, ., arraycopy, (, interpolator, ., polynomials, [, i, ], ,, 0, ,, polynomials, [, i, ], ,]
[System, ., arraycopy, (, interpolator, ., polynomials, [, i, ], ,, 0, ,, polynomials, [, i, ], ,, 0, ,]
[interpolator, ., polynomials, [, i, ], ,, 0, ,, polynomials, [, i, ], ,, 0, ,, dimension, ), ;, }]
[polynomials, [, i, ], ,, 0, ,, polynomials, [, i, ], ,, 0, ,, dimension, ), ;, }, currentDegree, =]
[polynomials, [, i, ], ,, 0, ,, polynomials, [, i, ], ,, 0, ,, dimension, ), ;, }, currentDegree, =]
[}, currentDegree, =, interpolator, ., currentDegree, ;, }, }, private, void, resetTables, (, final, int, maxDegree, ), {, if, (]
[}, currentDegree, =, interpolator, ., currentDegree, ;, }, }, private, void, resetTables, (, final, int, maxDegree, ), {, if, (]
[=, interpolator, ., currentDegree, ;, }, }, private, void, resetTables, (, final, int, maxDegree, ), {, if, (, maxDegree, <]
[currentDegree, ;, }, }, private, void, resetTables, (, final, int, maxDegree, ), {, if, (, maxDegree, <, 0, ), {]
[}, }, private, void, resetTables, (, final, int, maxDegree, ), {, if, (, maxDegree, <, 0, ), {, polynomials, =]
[private, void, resetTables, (, final, int, maxDegree, ), {, if, (, maxDegree, <, 0, ), {, polynomials, =, null, ;]
[resetTables, (, final, int, maxDegree, ), {, if, (, maxDegree, <, 0, ), {, polynomials, =, null, ;, errfac, =]
[final, int, maxDegree, ), {, if, (, maxDegree, <, 0, ), {, polynomials, =, null, ;, errfac, =, null, ;]
[maxDegree, ), {, if, (, maxDegree, <, 0, ), {, polynomials, =, null, ;, errfac, =, null, ;, currentDegree, =]
[), {, if, (, maxDegree, <, 0, ), {, polynomials, =, null, ;, errfac, =, null, ;, currentDegree, =, -]
[errfac, =, null, ;, currentDegree, =, -, 1, ;, }, else, {, final, double, [, ], [, ], newPols, =]
[;, currentDegree, =, -, 1, ;, }, else, {, final, double, [, ], [, ], newPols, =, new, double, []
[;, currentDegree, =, -, 1, ;, }, else, {, final, double, [, ], [, ], newPols, =, new, double, []
[=, -, 1, ;, }, else, {, final, double, [, ], [, ], newPols, =, new, double, [, maxDegree, +]
[final, double, [, ], [, ], newPols, =, new, double, [, maxDegree, +, 1, ], [, ], ;, if, (]
[final, double, [, ], [, ], newPols, =, new, double, [, maxDegree, +, 1, ], [, ], ;, if, (]
[[, ], [, ], newPols, =, new, double, [, maxDegree, +, 1, ], [, ], ;, if, (, polynomials, !=]
[], newPols, =, new, double, [, maxDegree, +, 1, ], [, ], ;, if, (, polynomials, !=, null, ), {]
[], newPols, =, new, double, [, maxDegree, +, 1, ], [, ], ;, if, (, polynomials, !=, null, ), {]
[double, [, maxDegree, +, 1, ], [, ], ;, if, (, polynomials, !=, null, ), {, System, ., arraycopy, (]
[maxDegree, +, 1, ], [, ], ;, if, (, polynomials, !=, null, ), {, System, ., arraycopy, (, polynomials, ,]
[1, ], [, ], ;, if, (, polynomials, !=, null, ), {, System, ., arraycopy, (, polynomials, ,, 0, ,]
[[, ], ;, if, (, polynomials, !=, null, ), {, System, ., arraycopy, (, polynomials, ,, 0, ,, newPols, ,]
[;, if, (, polynomials, !=, null, ), {, System, ., arraycopy, (, polynomials, ,, 0, ,, newPols, ,, 0, ,]
[;, if, (, polynomials, !=, null, ), {, System, ., arraycopy, (, polynomials, ,, 0, ,, newPols, ,, 0, ,]
[arraycopy, (, polynomials, ,, 0, ,, newPols, ,, 0, ,, polynomials, ., length, ), ;, for, (, int, i, =]
[arraycopy, (, polynomials, ,, 0, ,, newPols, ,, 0, ,, polynomials, ., length, ), ;, for, (, int, i, =]
[0, ,, newPols, ,, 0, ,, polynomials, ., length, ), ;, for, (, int, i, =, polynomials, ., length, ;]
[0, ,, newPols, ,, 0, ,, polynomials, ., length, ), ;, for, (, int, i, =, polynomials, ., length, ;]
[newPols, ,, 0, ,, polynomials, ., length, ), ;, for, (, int, i, =, polynomials, ., length, ;, i, <]
[newPols, ,, 0, ,, polynomials, ., length, ), ;, for, (, int, i, =, polynomials, ., length, ;, i, <]
[polynomials, ., length, ), ;, for, (, int, i, =, polynomials, ., length, ;, i, <, newPols, ., length, ;]
[., length, ), ;, for, (, int, i, =, polynomials, ., length, ;, i, <, newPols, ., length, ;, ++]
[;, for, (, int, i, =, polynomials, ., length, ;, i, <, newPols, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, polynomials, ., length, ;, i, <, newPols, ., length, ;, ++, i, ), {]
[(, int, i, =, polynomials, ., length, ;, i, <, newPols, ., length, ;, ++, i, ), {, newPols, []
[=, polynomials, ., length, ;, i, <, newPols, ., length, ;, ++, i, ), {, newPols, [, i, ], =]
[length, ;, i, <, newPols, ., length, ;, ++, i, ), {, newPols, [, i, ], =, new, double, []
[length, ;, i, <, newPols, ., length, ;, ++, i, ), {, newPols, [, i, ], =, new, double, []
[i, ], =, new, double, [, currentState, ., length, ], ;, }, }, else, {, for, (, int, i, =]
[=, new, double, [, currentState, ., length, ], ;, }, }, else, {, for, (, int, i, =, 0, ;]
[=, new, double, [, currentState, ., length, ], ;, }, }, else, {, for, (, int, i, =, 0, ;]
[double, [, currentState, ., length, ], ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <]
[double, [, currentState, ., length, ], ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <]
[length, ], ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, newPols, ., length, ;]
[], ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, newPols, ., length, ;, ++]
[}, else, {, for, (, int, i, =, 0, ;, i, <, newPols, ., length, ;, ++, i, ), {]
[}, else, {, for, (, int, i, =, 0, ;, i, <, newPols, ., length, ;, ++, i, ), {]
[{, for, (, int, i, =, 0, ;, i, <, newPols, ., length, ;, ++, i, ), {, newPols, []
[int, i, =, 0, ;, i, <, newPols, ., length, ;, ++, i, ), {, newPols, [, i, ], =]
[0, ;, i, <, newPols, ., length, ;, ++, i, ), {, newPols, [, i, ], =, new, double, []
[0, ;, i, <, newPols, ., length, ;, ++, i, ), {, newPols, [, i, ], =, new, double, []
[;, ++, i, ), {, newPols, [, i, ], =, new, double, [, currentState, ., length, ], ;, }, }]
[i, ), {, newPols, [, i, ], =, new, double, [, currentState, ., length, ], ;, }, }, polynomials, =]
[[, i, ], =, new, double, [, currentState, ., length, ], ;, }, }, polynomials, =, newPols, ;, if, (]
[[, i, ], =, new, double, [, currentState, ., length, ], ;, }, }, polynomials, =, newPols, ;, if, (]
[], =, new, double, [, currentState, ., length, ], ;, }, }, polynomials, =, newPols, ;, if, (, maxDegree, <=]
[double, [, currentState, ., length, ], ;, }, }, polynomials, =, newPols, ;, if, (, maxDegree, <=, 4, ), {]
[currentState, ., length, ], ;, }, }, polynomials, =, newPols, ;, if, (, maxDegree, <=, 4, ), {, errfac, =]
[}, }, polynomials, =, newPols, ;, if, (, maxDegree, <=, 4, ), {, errfac, =, null, ;, }, else, {]
[polynomials, =, newPols, ;, if, (, maxDegree, <=, 4, ), {, errfac, =, null, ;, }, else, {, errfac, =]
[;, if, (, maxDegree, <=, 4, ), {, errfac, =, null, ;, }, else, {, errfac, =, new, double, []
[;, if, (, maxDegree, <=, 4, ), {, errfac, =, null, ;, }, else, {, errfac, =, new, double, []
[(, maxDegree, <=, 4, ), {, errfac, =, null, ;, }, else, {, errfac, =, new, double, [, maxDegree, -]
[null, ;, }, else, {, errfac, =, new, double, [, maxDegree, -, 4, ], ;, for, (, int, i, =]
[}, else, {, errfac, =, new, double, [, maxDegree, -, 4, ], ;, for, (, int, i, =, 0, ;]
[}, else, {, errfac, =, new, double, [, maxDegree, -, 4, ], ;, for, (, int, i, =, 0, ;]
[{, errfac, =, new, double, [, maxDegree, -, 4, ], ;, for, (, int, i, =, 0, ;, i, <]
[{, errfac, =, new, double, [, maxDegree, -, 4, ], ;, for, (, int, i, =, 0, ;, i, <]
[double, [, maxDegree, -, 4, ], ;, for, (, int, i, =, 0, ;, i, <, errfac, ., length, ;]
[[, maxDegree, -, 4, ], ;, for, (, int, i, =, 0, ;, i, <, errfac, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, errfac, ., length, ;, ++, i, ), {, final, int, ip5, =]
[(, int, i, =, 0, ;, i, <, errfac, ., length, ;, ++, i, ), {, final, int, ip5, =]
[i, =, 0, ;, i, <, errfac, ., length, ;, ++, i, ), {, final, int, ip5, =, i, +]
[0, ;, i, <, errfac, ., length, ;, ++, i, ), {, final, int, ip5, =, i, +, 5, ;]
[0, ;, i, <, errfac, ., length, ;, ++, i, ), {, final, int, ip5, =, i, +, 5, ;]
[i, <, errfac, ., length, ;, ++, i, ), {, final, int, ip5, =, i, +, 5, ;, errfac, []
[., length, ;, ++, i, ), {, final, int, ip5, =, i, +, 5, ;, errfac, [, i, ], =]
[., length, ;, ++, i, ), {, final, int, ip5, =, i, +, 5, ;, errfac, [, i, ], =]
[;, ++, i, ), {, final, int, ip5, =, i, +, 5, ;, errfac, [, i, ], =, 1.0, /]
[++, i, ), {, final, int, ip5, =, i, +, 5, ;, errfac, [, i, ], =, 1.0, /, (]
[++, i, ), {, final, int, ip5, =, i, +, 5, ;, errfac, [, i, ], =, 1.0, /, (]
[), {, final, int, ip5, =, i, +, 5, ;, errfac, [, i, ], =, 1.0, /, (, ip5, *]
[+, 5, ;, errfac, [, i, ], =, 1.0, /, (, ip5, *, ip5, ), ;, final, double, e, =]
[+, 5, ;, errfac, [, i, ], =, 1.0, /, (, ip5, *, ip5, ), ;, final, double, e, =]
[;, errfac, [, i, ], =, 1.0, /, (, ip5, *, ip5, ), ;, final, double, e, =, 0.5, *]
[;, errfac, [, i, ], =, 1.0, /, (, ip5, *, ip5, ), ;, final, double, e, =, 0.5, *]
[], =, 1.0, /, (, ip5, *, ip5, ), ;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (]
[], =, 1.0, /, (, ip5, *, ip5, ), ;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (]
[=, 1.0, /, (, ip5, *, ip5, ), ;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (, (]
[(, ip5, *, ip5, ), ;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (, (, (, double, )]
[ip5, *, ip5, ), ;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (, (, (, double, ), (]
[ip5, *, ip5, ), ;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (, (, (, double, ), (]
[ip5, ), ;, final, double, e, =, 0.5, *, FastMath, ., sqrt, (, (, (, double, ), (, i, +]
[double, e, =, 0.5, *, FastMath, ., sqrt, (, (, (, double, ), (, i, +, 1, ), ), /]
[(, (, (, double, ), (, i, +, 1, ), ), /, ip5, ), ;, for, (, int, j, =]
[(, double, ), (, i, +, 1, ), ), /, ip5, ), ;, for, (, int, j, =, 0, ;]
[(, double, ), (, i, +, 1, ), ), /, ip5, ), ;, for, (, int, j, =, 0, ;]
[), (, i, +, 1, ), ), /, ip5, ), ;, for, (, int, j, =, 0, ;, j, <=]
[i, +, 1, ), ), /, ip5, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;]
[+, 1, ), ), /, ip5, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++]
[), /, ip5, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, ), {]
[), /, ip5, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, ), {]
[ip5, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, ), {, errfac, []
[for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, ), {, errfac, [, i, ], *=]
[for, (, int, j, =, 0, ;, j, <=, i, ;, ++, j, ), {, errfac, [, i, ], *=]
[int, j, =, 0, ;, j, <=, i, ;, ++, j, ), {, errfac, [, i, ], *=, e, /]
[j, =, 0, ;, j, <=, i, ;, ++, j, ), {, errfac, [, i, ], *=, e, /, (]
[j, =, 0, ;, j, <=, i, ;, ++, j, ), {, errfac, [, i, ], *=, e, /, (]
[0, ;, j, <=, i, ;, ++, j, ), {, errfac, [, i, ], *=, e, /, (, j, +]
[++, j, ), {, errfac, [, i, ], *=, e, /, (, j, +, 1, ), ;, }, }, }]
[), {, errfac, [, i, ], *=, e, /, (, j, +, 1, ), ;, }, }, }, currentDegree, =]
[), ;, }, }, }, currentDegree, =, 0, ;, }, }, @, Override, protected, StepInterpolator, doCopy, (, ), {, return]
[}, }, currentDegree, =, 0, ;, }, }, @, Override, protected, StepInterpolator, doCopy, (, ), {, return, new, GraggBulirschStoerStepInterpolator, (]
[(, this, ), ;, }, public, void, computeCoefficients, (, final, int, mu, ,, final, double, h, ), {, if, (]
[(, this, ), ;, }, public, void, computeCoefficients, (, final, int, mu, ,, final, double, h, ), {, if, (]
[this, ), ;, }, public, void, computeCoefficients, (, final, int, mu, ,, final, double, h, ), {, if, (, (]
[this, ), ;, }, public, void, computeCoefficients, (, final, int, mu, ,, final, double, h, ), {, if, (, (]
[;, }, public, void, computeCoefficients, (, final, int, mu, ,, final, double, h, ), {, if, (, (, polynomials, ==]
[void, computeCoefficients, (, final, int, mu, ,, final, double, h, ), {, if, (, (, polynomials, ==, null, ), ||]
[computeCoefficients, (, final, int, mu, ,, final, double, h, ), {, if, (, (, polynomials, ==, null, ), ||, (]
[computeCoefficients, (, final, int, mu, ,, final, double, h, ), {, if, (, (, polynomials, ==, null, ), ||, (]
[computeCoefficients, (, final, int, mu, ,, final, double, h, ), {, if, (, (, polynomials, ==, null, ), ||, (]
[mu, ,, final, double, h, ), {, if, (, (, polynomials, ==, null, ), ||, (, polynomials, ., length, <=]
[,, final, double, h, ), {, if, (, (, polynomials, ==, null, ), ||, (, polynomials, ., length, <=, (]
[,, final, double, h, ), {, if, (, (, polynomials, ==, null, ), ||, (, polynomials, ., length, <=, (]
[double, h, ), {, if, (, (, polynomials, ==, null, ), ||, (, polynomials, ., length, <=, (, mu, +]
[(, (, polynomials, ==, null, ), ||, (, polynomials, ., length, <=, (, mu, +, 4, ), ), ), {]
[polynomials, ==, null, ), ||, (, polynomials, ., length, <=, (, mu, +, 4, ), ), ), {, resetTables, (]
[polynomials, ==, null, ), ||, (, polynomials, ., length, <=, (, mu, +, 4, ), ), ), {, resetTables, (]
[null, ), ||, (, polynomials, ., length, <=, (, mu, +, 4, ), ), ), {, resetTables, (, mu, +]
[polynomials, ., length, <=, (, mu, +, 4, ), ), ), {, resetTables, (, mu, +, 4, ), ;, }]
[length, <=, (, mu, +, 4, ), ), ), {, resetTables, (, mu, +, 4, ), ;, }, currentDegree, =]
[length, <=, (, mu, +, 4, ), ), ), {, resetTables, (, mu, +, 4, ), ;, }, currentDegree, =]
[(, mu, +, 4, ), ), ), {, resetTables, (, mu, +, 4, ), ;, }, currentDegree, =, mu, +]
[{, resetTables, (, mu, +, 4, ), ;, }, currentDegree, =, mu, +, 4, ;, for, (, int, i, =]
[(, mu, +, 4, ), ;, }, currentDegree, =, mu, +, 4, ;, for, (, int, i, =, 0, ;]
[(, mu, +, 4, ), ;, }, currentDegree, =, mu, +, 4, ;, for, (, int, i, =, 0, ;]
[+, 4, ), ;, }, currentDegree, =, mu, +, 4, ;, for, (, int, i, =, 0, ;, i, <]
[+, 4, ), ;, }, currentDegree, =, mu, +, 4, ;, for, (, int, i, =, 0, ;, i, <]
[}, currentDegree, =, mu, +, 4, ;, for, (, int, i, =, 0, ;, i, <, currentState, ., length, ;]
[currentDegree, =, mu, +, 4, ;, for, (, int, i, =, 0, ;, i, <, currentState, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, currentState, ., length, ;, ++, i, ), {, final, double, yp0, =]
[(, int, i, =, 0, ;, i, <, currentState, ., length, ;, ++, i, ), {, final, double, yp0, =]
[i, =, 0, ;, i, <, currentState, ., length, ;, ++, i, ), {, final, double, yp0, =, h, *]
[i, =, 0, ;, i, <, currentState, ., length, ;, ++, i, ), {, final, double, yp0, =, h, *]
[0, ;, i, <, currentState, ., length, ;, ++, i, ), {, final, double, yp0, =, h, *, y0Dot, []
[;, ++, i, ), {, final, double, yp0, =, h, *, y0Dot, [, i, ], ;, final, double, yp1, =]
[;, ++, i, ), {, final, double, yp0, =, h, *, y0Dot, [, i, ], ;, final, double, yp1, =]
[i, ), {, final, double, yp0, =, h, *, y0Dot, [, i, ], ;, final, double, yp1, =, h, *]
[i, ), {, final, double, yp0, =, h, *, y0Dot, [, i, ], ;, final, double, yp1, =, h, *]
[{, final, double, yp0, =, h, *, y0Dot, [, i, ], ;, final, double, yp1, =, h, *, y1Dot, []
[y0Dot, [, i, ], ;, final, double, yp1, =, h, *, y1Dot, [, i, ], ;, final, double, ydiff, =]
[y0Dot, [, i, ], ;, final, double, yp1, =, h, *, y1Dot, [, i, ], ;, final, double, ydiff, =]
[y0Dot, [, i, ], ;, final, double, yp1, =, h, *, y1Dot, [, i, ], ;, final, double, ydiff, =]
[i, ], ;, final, double, yp1, =, h, *, y1Dot, [, i, ], ;, final, double, ydiff, =, y1, []
[final, double, yp1, =, h, *, y1Dot, [, i, ], ;, final, double, ydiff, =, y1, [, i, ], -]
[final, double, yp1, =, h, *, y1Dot, [, i, ], ;, final, double, ydiff, =, y1, [, i, ], -]
[yp1, =, h, *, y1Dot, [, i, ], ;, final, double, ydiff, =, y1, [, i, ], -, currentState, []
[], ;, final, double, ydiff, =, y1, [, i, ], -, currentState, [, i, ], ;, final, double, aspl, =]
[], ;, final, double, ydiff, =, y1, [, i, ], -, currentState, [, i, ], ;, final, double, aspl, =]
[final, double, ydiff, =, y1, [, i, ], -, currentState, [, i, ], ;, final, double, aspl, =, ydiff, -]
[i, ], -, currentState, [, i, ], ;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =]
[i, ], -, currentState, [, i, ], ;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =]
[-, currentState, [, i, ], ;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =, yp0, -]
[[, i, ], ;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =, yp0, -, ydiff, ;]
[[, i, ], ;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =, yp0, -, ydiff, ;]
[[, i, ], ;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =, yp0, -, ydiff, ;]
[], ;, final, double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =, yp0, -, ydiff, ;, polynomials, []
[double, aspl, =, ydiff, -, yp1, ;, final, double, bspl, =, yp0, -, ydiff, ;, polynomials, [, 0, ], []
[ydiff, -, yp1, ;, final, double, bspl, =, yp0, -, ydiff, ;, polynomials, [, 0, ], [, i, ], =]
[ydiff, -, yp1, ;, final, double, bspl, =, yp0, -, ydiff, ;, polynomials, [, 0, ], [, i, ], =]
[yp1, ;, final, double, bspl, =, yp0, -, ydiff, ;, polynomials, [, 0, ], [, i, ], =, currentState, []
[double, bspl, =, yp0, -, ydiff, ;, polynomials, [, 0, ], [, i, ], =, currentState, [, i, ], ;]
[double, bspl, =, yp0, -, ydiff, ;, polynomials, [, 0, ], [, i, ], =, currentState, [, i, ], ;]
[double, bspl, =, yp0, -, ydiff, ;, polynomials, [, 0, ], [, i, ], =, currentState, [, i, ], ;]
[=, yp0, -, ydiff, ;, polynomials, [, 0, ], [, i, ], =, currentState, [, i, ], ;, polynomials, []
[ydiff, ;, polynomials, [, 0, ], [, i, ], =, currentState, [, i, ], ;, polynomials, [, 1, ], []
[[, 0, ], [, i, ], =, currentState, [, i, ], ;, polynomials, [, 1, ], [, i, ], =]
[], [, i, ], =, currentState, [, i, ], ;, polynomials, [, 1, ], [, i, ], =, ydiff, ;]
[], [, i, ], =, currentState, [, i, ], ;, polynomials, [, 1, ], [, i, ], =, ydiff, ;]
[], [, i, ], =, currentState, [, i, ], ;, polynomials, [, 1, ], [, i, ], =, ydiff, ;]
[i, ], =, currentState, [, i, ], ;, polynomials, [, 1, ], [, i, ], =, ydiff, ;, polynomials, []
[currentState, [, i, ], ;, polynomials, [, 1, ], [, i, ], =, ydiff, ;, polynomials, [, 2, ], []
[], ;, polynomials, [, 1, ], [, i, ], =, ydiff, ;, polynomials, [, 2, ], [, i, ], =]
[polynomials, [, 1, ], [, i, ], =, ydiff, ;, polynomials, [, 2, ], [, i, ], =, aspl, ;]
[polynomials, [, 1, ], [, i, ], =, ydiff, ;, polynomials, [, 2, ], [, i, ], =, aspl, ;]
[polynomials, [, 1, ], [, i, ], =, ydiff, ;, polynomials, [, 2, ], [, i, ], =, aspl, ;]
[1, ], [, i, ], =, ydiff, ;, polynomials, [, 2, ], [, i, ], =, aspl, ;, polynomials, []
[i, ], =, ydiff, ;, polynomials, [, 2, ], [, i, ], =, aspl, ;, polynomials, [, 3, ], []
[ydiff, ;, polynomials, [, 2, ], [, i, ], =, aspl, ;, polynomials, [, 3, ], [, i, ], =]
[2, ], [, i, ], =, aspl, ;, polynomials, [, 3, ], [, i, ], =, bspl, ;, if, (]
[2, ], [, i, ], =, aspl, ;, polynomials, [, 3, ], [, i, ], =, bspl, ;, if, (]
[[, i, ], =, aspl, ;, polynomials, [, 3, ], [, i, ], =, bspl, ;, if, (, mu, <]
[[, i, ], =, bspl, ;, if, (, mu, <, 0, ), {, return, ;, }, final, double, ph0, =]
[[, i, ], =, bspl, ;, if, (, mu, <, 0, ), {, return, ;, }, final, double, ph0, =]
[[, i, ], =, bspl, ;, if, (, mu, <, 0, ), {, return, ;, }, final, double, ph0, =]
[], =, bspl, ;, if, (, mu, <, 0, ), {, return, ;, }, final, double, ph0, =, 0.5, *]
[=, bspl, ;, if, (, mu, <, 0, ), {, return, ;, }, final, double, ph0, =, 0.5, *, (]
[=, bspl, ;, if, (, mu, <, 0, ), {, return, ;, }, final, double, ph0, =, 0.5, *, (]
[=, bspl, ;, if, (, mu, <, 0, ), {, return, ;, }, final, double, ph0, =, 0.5, *, (]
[;, if, (, mu, <, 0, ), {, return, ;, }, final, double, ph0, =, 0.5, *, (, currentState, []
[mu, <, 0, ), {, return, ;, }, final, double, ph0, =, 0.5, *, (, currentState, [, i, ], +]
[mu, <, 0, ), {, return, ;, }, final, double, ph0, =, 0.5, *, (, currentState, [, i, ], +]
[0, ), {, return, ;, }, final, double, ph0, =, 0.5, *, (, currentState, [, i, ], +, y1, []
[;, }, final, double, ph0, =, 0.5, *, (, currentState, [, i, ], +, y1, [, i, ], ), +]
[;, }, final, double, ph0, =, 0.5, *, (, currentState, [, i, ], +, y1, [, i, ], ), +]
[final, double, ph0, =, 0.5, *, (, currentState, [, i, ], +, y1, [, i, ], ), +, 0.125, *]
[double, ph0, =, 0.5, *, (, currentState, [, i, ], +, y1, [, i, ], ), +, 0.125, *, (]
[double, ph0, =, 0.5, *, (, currentState, [, i, ], +, y1, [, i, ], ), +, 0.125, *, (]
[=, 0.5, *, (, currentState, [, i, ], +, y1, [, i, ], ), +, 0.125, *, (, aspl, +]
[(, currentState, [, i, ], +, y1, [, i, ], ), +, 0.125, *, (, aspl, +, bspl, ), ;]
[(, currentState, [, i, ], +, y1, [, i, ], ), +, 0.125, *, (, aspl, +, bspl, ), ;]
[(, currentState, [, i, ], +, y1, [, i, ], ), +, 0.125, *, (, aspl, +, bspl, ), ;]
[[, i, ], +, y1, [, i, ], ), +, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, []
[+, y1, [, i, ], ), +, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], []
[i, ], ), +, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =]
[i, ], ), +, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =]
[), +, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16, *]
[+, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16, *, (]
[+, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16, *, (]
[+, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16, *, (]
[+, 0.125, *, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16, *, (]
[*, (, aspl, +, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16, *, (, yMidDots, []
[+, bspl, ), ;, polynomials, [, 4, ], [, i, ], =, 16, *, (, yMidDots, [, 0, ], []
[;, polynomials, [, 4, ], [, i, ], =, 16, *, (, yMidDots, [, 0, ], [, i, ], -]
[[, i, ], =, 16, *, (, yMidDots, [, 0, ], [, i, ], -, ph0, ), ;, if, (]
[[, i, ], =, 16, *, (, yMidDots, [, 0, ], [, i, ], -, ph0, ), ;, if, (]
[], =, 16, *, (, yMidDots, [, 0, ], [, i, ], -, ph0, ), ;, if, (, mu, >]
[0, ], [, i, ], -, ph0, ), ;, if, (, mu, >, 0, ), {, final, double, ph1, =]
[0, ], [, i, ], -, ph0, ), ;, if, (, mu, >, 0, ), {, final, double, ph1, =]
[[, i, ], -, ph0, ), ;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff, +]
[[, i, ], -, ph0, ), ;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff, +]
[], -, ph0, ), ;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *]
[-, ph0, ), ;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *, (]
[-, ph0, ), ;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *, (]
[), ;, if, (, mu, >, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *, (, aspl, -]
[(, mu, >, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *, (, aspl, -, bspl, ), ;]
[(, mu, >, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *, (, aspl, -, bspl, ), ;]
[(, mu, >, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *, (, aspl, -, bspl, ), ;]
[>, 0, ), {, final, double, ph1, =, ydiff, +, 0.25, *, (, aspl, -, bspl, ), ;, polynomials, []
[{, final, double, ph1, =, ydiff, +, 0.25, *, (, aspl, -, bspl, ), ;, polynomials, [, 5, ], []
[ph1, =, ydiff, +, 0.25, *, (, aspl, -, bspl, ), ;, polynomials, [, 5, ], [, i, ], =]
[ph1, =, ydiff, +, 0.25, *, (, aspl, -, bspl, ), ;, polynomials, [, 5, ], [, i, ], =]
[ydiff, +, 0.25, *, (, aspl, -, bspl, ), ;, polynomials, [, 5, ], [, i, ], =, 16, *]
[+, 0.25, *, (, aspl, -, bspl, ), ;, polynomials, [, 5, ], [, i, ], =, 16, *, (]
[+, 0.25, *, (, aspl, -, bspl, ), ;, polynomials, [, 5, ], [, i, ], =, 16, *, (]
[+, 0.25, *, (, aspl, -, bspl, ), ;, polynomials, [, 5, ], [, i, ], =, 16, *, (]
[+, 0.25, *, (, aspl, -, bspl, ), ;, polynomials, [, 5, ], [, i, ], =, 16, *, (]
[*, (, aspl, -, bspl, ), ;, polynomials, [, 5, ], [, i, ], =, 16, *, (, yMidDots, []
[-, bspl, ), ;, polynomials, [, 5, ], [, i, ], =, 16, *, (, yMidDots, [, 1, ], []
[;, polynomials, [, 5, ], [, i, ], =, 16, *, (, yMidDots, [, 1, ], [, i, ], -]
[[, i, ], =, 16, *, (, yMidDots, [, 1, ], [, i, ], -, ph1, ), ;, if, (]
[[, i, ], =, 16, *, (, yMidDots, [, 1, ], [, i, ], -, ph1, ), ;, if, (]
[], =, 16, *, (, yMidDots, [, 1, ], [, i, ], -, ph1, ), ;, if, (, mu, >]
[1, ], [, i, ], -, ph1, ), ;, if, (, mu, >, 1, ), {, final, double, ph2, =]
[1, ], [, i, ], -, ph1, ), ;, if, (, mu, >, 1, ), {, final, double, ph2, =]
[[, i, ], -, ph1, ), ;, if, (, mu, >, 1, ), {, final, double, ph2, =, yp1, -]
[], -, ph1, ), ;, if, (, mu, >, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;]
[], -, ph1, ), ;, if, (, mu, >, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;]
[], -, ph1, ), ;, if, (, mu, >, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;]
[ph1, ), ;, if, (, mu, >, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;, polynomials, []
[if, (, mu, >, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ], []
[>, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ], [, i, ], =]
[>, 1, ), {, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ], [, i, ], =]
[), {, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ], [, i, ], =, 16, *]
[{, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ], [, i, ], =, 16, *, (]
[{, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ], [, i, ], =, 16, *, (]
[{, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ], [, i, ], =, 16, *, (]
[{, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ], [, i, ], =, 16, *, (]
[{, final, double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ], [, i, ], =, 16, *, (]
[double, ph2, =, yp1, -, yp0, ;, polynomials, [, 6, ], [, i, ], =, 16, *, (, yMidDots, []
[yp1, -, yp0, ;, polynomials, [, 6, ], [, i, ], =, 16, *, (, yMidDots, [, 2, ], []
[;, polynomials, [, 6, ], [, i, ], =, 16, *, (, yMidDots, [, 2, ], [, i, ], -]
[[, 6, ], [, i, ], =, 16, *, (, yMidDots, [, 2, ], [, i, ], -, ph2, +]
[[, 6, ], [, i, ], =, 16, *, (, yMidDots, [, 2, ], [, i, ], -, ph2, +]
[[, 6, ], [, i, ], =, 16, *, (, yMidDots, [, 2, ], [, i, ], -, ph2, +]
[], [, i, ], =, 16, *, (, yMidDots, [, 2, ], [, i, ], -, ph2, +, polynomials, []
[], =, 16, *, (, yMidDots, [, 2, ], [, i, ], -, ph2, +, polynomials, [, 4, ], []
[[, 2, ], [, i, ], -, ph2, +, polynomials, [, 4, ], [, i, ], ), ;, if, (]
[[, 2, ], [, i, ], -, ph2, +, polynomials, [, 4, ], [, i, ], ), ;, if, (]
[], [, i, ], -, ph2, +, polynomials, [, 4, ], [, i, ], ), ;, if, (, mu, >]
[polynomials, [, 4, ], [, i, ], ), ;, if, (, mu, >, 2, ), {, final, double, ph3, =]
[polynomials, [, 4, ], [, i, ], ), ;, if, (, mu, >, 2, ), {, final, double, ph3, =]
[4, ], [, i, ], ), ;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *]
[], [, i, ], ), ;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *, (]
[], [, i, ], ), ;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *, (]
[i, ], ), ;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *, (, bspl, -]
[;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *, (, bspl, -, aspl, ), ;]
[;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *, (, bspl, -, aspl, ), ;]
[;, if, (, mu, >, 2, ), {, final, double, ph3, =, 6, *, (, bspl, -, aspl, ), ;]
[(, mu, >, 2, ), {, final, double, ph3, =, 6, *, (, bspl, -, aspl, ), ;, polynomials, []
[2, ), {, final, double, ph3, =, 6, *, (, bspl, -, aspl, ), ;, polynomials, [, 7, ], []
[final, double, ph3, =, 6, *, (, bspl, -, aspl, ), ;, polynomials, [, 7, ], [, i, ], =]
[final, double, ph3, =, 6, *, (, bspl, -, aspl, ), ;, polynomials, [, 7, ], [, i, ], =]
[ph3, =, 6, *, (, bspl, -, aspl, ), ;, polynomials, [, 7, ], [, i, ], =, 16, *]
[=, 6, *, (, bspl, -, aspl, ), ;, polynomials, [, 7, ], [, i, ], =, 16, *, (]
[=, 6, *, (, bspl, -, aspl, ), ;, polynomials, [, 7, ], [, i, ], =, 16, *, (]
[=, 6, *, (, bspl, -, aspl, ), ;, polynomials, [, 7, ], [, i, ], =, 16, *, (]
[=, 6, *, (, bspl, -, aspl, ), ;, polynomials, [, 7, ], [, i, ], =, 16, *, (]
[=, 6, *, (, bspl, -, aspl, ), ;, polynomials, [, 7, ], [, i, ], =, 16, *, (]
[*, (, bspl, -, aspl, ), ;, polynomials, [, 7, ], [, i, ], =, 16, *, (, yMidDots, []
[-, aspl, ), ;, polynomials, [, 7, ], [, i, ], =, 16, *, (, yMidDots, [, 3, ], []
[;, polynomials, [, 7, ], [, i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ], -]
[[, 7, ], [, i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ], -, ph3, +]
[[, 7, ], [, i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ], -, ph3, +]
[], [, i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ], -, ph3, +, 3, *]
[], [, i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ], -, ph3, +, 3, *]
[], [, i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ], -, ph3, +, 3, *]
[i, ], =, 16, *, (, yMidDots, [, 3, ], [, i, ], -, ph3, +, 3, *, polynomials, []
[16, *, (, yMidDots, [, 3, ], [, i, ], -, ph3, +, 3, *, polynomials, [, 5, ], []
[], -, ph3, +, 3, *, polynomials, [, 5, ], [, i, ], ), ;, for, (, int, j, =]
[ph3, +, 3, *, polynomials, [, 5, ], [, i, ], ), ;, for, (, int, j, =, 4, ;]
[ph3, +, 3, *, polynomials, [, 5, ], [, i, ], ), ;, for, (, int, j, =, 4, ;]
[3, *, polynomials, [, 5, ], [, i, ], ), ;, for, (, int, j, =, 4, ;, j, <=]
[polynomials, [, 5, ], [, i, ], ), ;, for, (, int, j, =, 4, ;, j, <=, mu, ;]
[[, 5, ], [, i, ], ), ;, for, (, int, j, =, 4, ;, j, <=, mu, ;, ++]
[;, for, (, int, j, =, 4, ;, j, <=, mu, ;, ++, j, ), {, final, double, fac1, =]
[;, for, (, int, j, =, 4, ;, j, <=, mu, ;, ++, j, ), {, final, double, fac1, =]
[;, for, (, int, j, =, 4, ;, j, <=, mu, ;, ++, j, ), {, final, double, fac1, =]
[(, int, j, =, 4, ;, j, <=, mu, ;, ++, j, ), {, final, double, fac1, =, 0.5, *]
[j, =, 4, ;, j, <=, mu, ;, ++, j, ), {, final, double, fac1, =, 0.5, *, j, *]
[=, 4, ;, j, <=, mu, ;, ++, j, ), {, final, double, fac1, =, 0.5, *, j, *, (]
[=, 4, ;, j, <=, mu, ;, ++, j, ), {, final, double, fac1, =, 0.5, *, j, *, (]
[;, j, <=, mu, ;, ++, j, ), {, final, double, fac1, =, 0.5, *, j, *, (, j, -]
[), {, final, double, fac1, =, 0.5, *, j, *, (, j, -, 1, ), ;, final, double, fac2, =]
[), {, final, double, fac1, =, 0.5, *, j, *, (, j, -, 1, ), ;, final, double, fac2, =]
[), {, final, double, fac1, =, 0.5, *, j, *, (, j, -, 1, ), ;, final, double, fac2, =]
[), {, final, double, fac1, =, 0.5, *, j, *, (, j, -, 1, ), ;, final, double, fac2, =]
[final, double, fac1, =, 0.5, *, j, *, (, j, -, 1, ), ;, final, double, fac2, =, 2, *]
[fac1, =, 0.5, *, j, *, (, j, -, 1, ), ;, final, double, fac2, =, 2, *, fac1, *]
[=, 0.5, *, j, *, (, j, -, 1, ), ;, final, double, fac2, =, 2, *, fac1, *, (]
[=, 0.5, *, j, *, (, j, -, 1, ), ;, final, double, fac2, =, 2, *, fac1, *, (]
[*, j, *, (, j, -, 1, ), ;, final, double, fac2, =, 2, *, fac1, *, (, j, -]
[(, j, -, 1, ), ;, final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, ), *]
[j, -, 1, ), ;, final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, ), *, (]
[j, -, 1, ), ;, final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, ), *, (]
[1, ), ;, final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, ), *, (, j, -]
[final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, ), *, (, j, -, 3, ), ;]
[final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, ), *, (, j, -, 3, ), ;]
[final, double, fac2, =, 2, *, fac1, *, (, j, -, 2, ), *, (, j, -, 3, ), ;]
[fac2, =, 2, *, fac1, *, (, j, -, 2, ), *, (, j, -, 3, ), ;, polynomials, []
[fac2, =, 2, *, fac1, *, (, j, -, 2, ), *, (, j, -, 3, ), ;, polynomials, []
[2, *, fac1, *, (, j, -, 2, ), *, (, j, -, 3, ), ;, polynomials, [, j, +]
[*, (, j, -, 2, ), *, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], []
[-, 2, ), *, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =]
[-, 2, ), *, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =]
[), *, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *]
[*, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (]
[*, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (]
[*, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (]
[*, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (]
[*, (, j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (]
[j, -, 3, ), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (, yMidDots, []
[), ;, polynomials, [, j, +, 4, ], [, i, ], =, 16, *, (, yMidDots, [, j, ], []
[[, j, +, 4, ], [, i, ], =, 16, *, (, yMidDots, [, j, ], [, i, ], +]
[[, j, +, 4, ], [, i, ], =, 16, *, (, yMidDots, [, j, ], [, i, ], +]
[+, 4, ], [, i, ], =, 16, *, (, yMidDots, [, j, ], [, i, ], +, fac1, *]
[+, 4, ], [, i, ], =, 16, *, (, yMidDots, [, j, ], [, i, ], +, fac1, *]
[+, 4, ], [, i, ], =, 16, *, (, yMidDots, [, j, ], [, i, ], +, fac1, *]
[], [, i, ], =, 16, *, (, yMidDots, [, j, ], [, i, ], +, fac1, *, polynomials, []
[], [, i, ], =, 16, *, (, yMidDots, [, j, ], [, i, ], +, fac1, *, polynomials, []
[i, ], =, 16, *, (, yMidDots, [, j, ], [, i, ], +, fac1, *, polynomials, [, j, +]
[16, *, (, yMidDots, [, j, ], [, i, ], +, fac1, *, polynomials, [, j, +, 2, ], []
[yMidDots, [, j, ], [, i, ], +, fac1, *, polynomials, [, j, +, 2, ], [, i, ], -]
[yMidDots, [, j, ], [, i, ], +, fac1, *, polynomials, [, j, +, 2, ], [, i, ], -]
[j, ], [, i, ], +, fac1, *, polynomials, [, j, +, 2, ], [, i, ], -, fac2, *]
[j, ], [, i, ], +, fac1, *, polynomials, [, j, +, 2, ], [, i, ], -, fac2, *]
[j, ], [, i, ], +, fac1, *, polynomials, [, j, +, 2, ], [, i, ], -, fac2, *]
[[, i, ], +, fac1, *, polynomials, [, j, +, 2, ], [, i, ], -, fac2, *, polynomials, []
[+, fac1, *, polynomials, [, j, +, 2, ], [, i, ], -, fac2, *, polynomials, [, j, ], []
[}, }, }, }, }, }, public, double, estimateError, (, final, double, [, ], scale, ), {, double, error, =]
[}, }, public, double, estimateError, (, final, double, [, ], scale, ), {, double, error, =, 0, ;, if, (]
[}, }, public, double, estimateError, (, final, double, [, ], scale, ), {, double, error, =, 0, ;, if, (]
[public, double, estimateError, (, final, double, [, ], scale, ), {, double, error, =, 0, ;, if, (, currentDegree, >=]
[scale, ), {, double, error, =, 0, ;, if, (, currentDegree, >=, 5, ), {, for, (, int, i, =]
[{, double, error, =, 0, ;, if, (, currentDegree, >=, 5, ), {, for, (, int, i, =, 0, ;]
[{, double, error, =, 0, ;, if, (, currentDegree, >=, 5, ), {, for, (, int, i, =, 0, ;]
[error, =, 0, ;, if, (, currentDegree, >=, 5, ), {, for, (, int, i, =, 0, ;, i, <]
[error, =, 0, ;, if, (, currentDegree, >=, 5, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, currentDegree, >=, 5, ), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;]
[(, currentDegree, >=, 5, ), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, final, double, e, =]
[(, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, final, double, e, =]
[(, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, final, double, e, =]
[(, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, final, double, e, =]
[i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, final, double, e, =, polynomials, []
[;, i, <, scale, ., length, ;, ++, i, ), {, final, double, e, =, polynomials, [, currentDegree, ], []
[scale, ., length, ;, ++, i, ), {, final, double, e, =, polynomials, [, currentDegree, ], [, i, ], /]
[scale, ., length, ;, ++, i, ), {, final, double, e, =, polynomials, [, currentDegree, ], [, i, ], /]
[length, ;, ++, i, ), {, final, double, e, =, polynomials, [, currentDegree, ], [, i, ], /, scale, []
[i, ), {, final, double, e, =, polynomials, [, currentDegree, ], [, i, ], /, scale, [, i, ], ;]
[{, final, double, e, =, polynomials, [, currentDegree, ], [, i, ], /, scale, [, i, ], ;, error, +=]
[{, final, double, e, =, polynomials, [, currentDegree, ], [, i, ], /, scale, [, i, ], ;, error, +=]
[double, e, =, polynomials, [, currentDegree, ], [, i, ], /, scale, [, i, ], ;, error, +=, e, *]
[polynomials, [, currentDegree, ], [, i, ], /, scale, [, i, ], ;, error, +=, e, *, e, ;, }]
[currentDegree, ], [, i, ], /, scale, [, i, ], ;, error, +=, e, *, e, ;, }, error, =]
[currentDegree, ], [, i, ], /, scale, [, i, ], ;, error, +=, e, *, e, ;, }, error, =]
[currentDegree, ], [, i, ], /, scale, [, i, ], ;, error, +=, e, *, e, ;, }, error, =]
[], /, scale, [, i, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (]
[], /, scale, [, i, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (]
[scale, [, i, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /]
[scale, [, i, ], ;, error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /]
[error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, scale, ., length, ), *]
[error, +=, e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, scale, ., length, ), *]
[e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, scale, ., length, ), *, errfac, []
[e, *, e, ;, }, error, =, FastMath, ., sqrt, (, error, /, scale, ., length, ), *, errfac, []
[e, ;, }, error, =, FastMath, ., sqrt, (, error, /, scale, ., length, ), *, errfac, [, currentDegree, -]
[FastMath, ., sqrt, (, error, /, scale, ., length, ), *, errfac, [, currentDegree, -, 5, ], ;, }, return]
[}, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (, final, double, theta, ,, final, double, oneMinusThetaH, ), {, final, int, dimension, =]
[}, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (, final, double, theta, ,, final, double, oneMinusThetaH, ), {, final, int, dimension, =]
[double, theta, ,, final, double, oneMinusThetaH, ), {, final, int, dimension, =, currentState, ., length, ;, final, double, oneMinusTheta, =]
[double, theta, ,, final, double, oneMinusThetaH, ), {, final, int, dimension, =, currentState, ., length, ;, final, double, oneMinusTheta, =]
[,, final, double, oneMinusThetaH, ), {, final, int, dimension, =, currentState, ., length, ;, final, double, oneMinusTheta, =, 1.0, -]
[final, int, dimension, =, currentState, ., length, ;, final, double, oneMinusTheta, =, 1.0, -, theta, ;, final, double, theta05, =]
[final, int, dimension, =, currentState, ., length, ;, final, double, oneMinusTheta, =, 1.0, -, theta, ;, final, double, theta05, =]
[dimension, =, currentState, ., length, ;, final, double, oneMinusTheta, =, 1.0, -, theta, ;, final, double, theta05, =, theta, -]
[final, double, oneMinusTheta, =, 1.0, -, theta, ;, final, double, theta05, =, theta, -, 0.5, ;, final, double, tOmT, =]
[final, double, oneMinusTheta, =, 1.0, -, theta, ;, final, double, theta05, =, theta, -, 0.5, ;, final, double, tOmT, =]
[oneMinusTheta, =, 1.0, -, theta, ;, final, double, theta05, =, theta, -, 0.5, ;, final, double, tOmT, =, theta, *]
[final, double, theta05, =, theta, -, 0.5, ;, final, double, tOmT, =, theta, *, oneMinusTheta, ;, final, double, t4, =]
[final, double, theta05, =, theta, -, 0.5, ;, final, double, tOmT, =, theta, *, oneMinusTheta, ;, final, double, t4, =]
[theta05, =, theta, -, 0.5, ;, final, double, tOmT, =, theta, *, oneMinusTheta, ;, final, double, t4, =, tOmT, *]
[final, double, tOmT, =, theta, *, oneMinusTheta, ;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot, =]
[final, double, tOmT, =, theta, *, oneMinusTheta, ;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot, =]
[final, double, tOmT, =, theta, *, oneMinusTheta, ;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot, =]
[tOmT, =, theta, *, oneMinusTheta, ;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot, =, 2, *]
[theta, *, oneMinusTheta, ;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot, =, 2, *, tOmT, *]
[*, oneMinusTheta, ;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot, =, 2, *, tOmT, *, (]
[*, oneMinusTheta, ;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot, =, 2, *, tOmT, *, (]
[;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot, =, 2, *, tOmT, *, (, 1, -]
[;, final, double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot, =, 2, *, tOmT, *, (, 1, -]
[double, t4, =, tOmT, *, tOmT, ;, final, double, t4Dot, =, 2, *, tOmT, *, (, 1, -, 2, *]
[final, double, t4Dot, =, 2, *, tOmT, *, (, 1, -, 2, *, theta, ), ;, final, double, dot1, =]
[final, double, t4Dot, =, 2, *, tOmT, *, (, 1, -, 2, *, theta, ), ;, final, double, dot1, =]
[t4Dot, =, 2, *, tOmT, *, (, 1, -, 2, *, theta, ), ;, final, double, dot1, =, 1.0, /]
[(, 1, -, 2, *, theta, ), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =]
[(, 1, -, 2, *, theta, ), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =]
[(, 1, -, 2, *, theta, ), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =]
[-, 2, *, theta, ), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *]
[2, *, theta, ), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *, (]
[2, *, theta, ), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *, (]
[theta, ), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *, (, 2, -]
[theta, ), ;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *, (, 2, -]
[;, final, double, dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *, (, 2, -, 3, *]
[dot1, =, 1.0, /, h, ;, final, double, dot2, =, theta, *, (, 2, -, 3, *, theta, ), /]
[final, double, dot2, =, theta, *, (, 2, -, 3, *, theta, ), /, h, ;, final, double, dot3, =]
[final, double, dot2, =, theta, *, (, 2, -, 3, *, theta, ), /, h, ;, final, double, dot3, =]
[double, dot2, =, theta, *, (, 2, -, 3, *, theta, ), /, h, ;, final, double, dot3, =, (]
[double, dot2, =, theta, *, (, 2, -, 3, *, theta, ), /, h, ;, final, double, dot3, =, (]
[double, dot2, =, theta, *, (, 2, -, 3, *, theta, ), /, h, ;, final, double, dot3, =, (]
[dot2, =, theta, *, (, 2, -, 3, *, theta, ), /, h, ;, final, double, dot3, =, (, (]
[dot2, =, theta, *, (, 2, -, 3, *, theta, ), /, h, ;, final, double, dot3, =, (, (]
[dot2, =, theta, *, (, 2, -, 3, *, theta, ), /, h, ;, final, double, dot3, =, (, (]
[theta, *, (, 2, -, 3, *, theta, ), /, h, ;, final, double, dot3, =, (, (, 3, *]
[(, 2, -, 3, *, theta, ), /, h, ;, final, double, dot3, =, (, (, 3, *, theta, -]
[3, *, theta, ), /, h, ;, final, double, dot3, =, (, (, 3, *, theta, -, 4, ), *]
[theta, ), /, h, ;, final, double, dot3, =, (, (, 3, *, theta, -, 4, ), *, theta, +]
[h, ;, final, double, dot3, =, (, (, 3, *, theta, -, 4, ), *, theta, +, 1, ), /]
[(, 3, *, theta, -, 4, ), *, theta, +, 1, ), /, h, ;, for, (, int, i, =]
[*, theta, -, 4, ), *, theta, +, 1, ), /, h, ;, for, (, int, i, =, 0, ;]
[*, theta, -, 4, ), *, theta, +, 1, ), /, h, ;, for, (, int, i, =, 0, ;]
[-, 4, ), *, theta, +, 1, ), /, h, ;, for, (, int, i, =, 0, ;, i, <]
[), *, theta, +, 1, ), /, h, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[*, theta, +, 1, ), /, h, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, final, double, p0, =]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, final, double, p0, =]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, final, double, p0, =]
[(, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, final, double, p0, =, polynomials, []
[=, 0, ;, i, <, dimension, ;, ++, i, ), {, final, double, p0, =, polynomials, [, 0, ], []
[++, i, ), {, final, double, p0, =, polynomials, [, 0, ], [, i, ], ;, final, double, p1, =]
[++, i, ), {, final, double, p0, =, polynomials, [, 0, ], [, i, ], ;, final, double, p1, =]
[++, i, ), {, final, double, p0, =, polynomials, [, 0, ], [, i, ], ;, final, double, p1, =]
[), {, final, double, p0, =, polynomials, [, 0, ], [, i, ], ;, final, double, p1, =, polynomials, []
[double, p0, =, polynomials, [, 0, ], [, i, ], ;, final, double, p1, =, polynomials, [, 1, ], []
[[, i, ], ;, final, double, p1, =, polynomials, [, 1, ], [, i, ], ;, final, double, p2, =]
[[, i, ], ;, final, double, p1, =, polynomials, [, 1, ], [, i, ], ;, final, double, p2, =]
[[, i, ], ;, final, double, p1, =, polynomials, [, 1, ], [, i, ], ;, final, double, p2, =]
[], ;, final, double, p1, =, polynomials, [, 1, ], [, i, ], ;, final, double, p2, =, polynomials, []
[double, p1, =, polynomials, [, 1, ], [, i, ], ;, final, double, p2, =, polynomials, [, 2, ], []
[[, i, ], ;, final, double, p2, =, polynomials, [, 2, ], [, i, ], ;, final, double, p3, =]
[[, i, ], ;, final, double, p2, =, polynomials, [, 2, ], [, i, ], ;, final, double, p3, =]
[[, i, ], ;, final, double, p2, =, polynomials, [, 2, ], [, i, ], ;, final, double, p3, =]
[], ;, final, double, p2, =, polynomials, [, 2, ], [, i, ], ;, final, double, p3, =, polynomials, []
[double, p2, =, polynomials, [, 2, ], [, i, ], ;, final, double, p3, =, polynomials, [, 3, ], []
[polynomials, [, 2, ], [, i, ], ;, final, double, p3, =, polynomials, [, 3, ], [, i, ], ;]
[polynomials, [, 2, ], [, i, ], ;, final, double, p3, =, polynomials, [, 3, ], [, i, ], ;]
[2, ], [, i, ], ;, final, double, p3, =, polynomials, [, 3, ], [, i, ], ;, interpolatedState, []
[i, ], ;, final, double, p3, =, polynomials, [, 3, ], [, i, ], ;, interpolatedState, [, i, ], =]
[i, ], ;, final, double, p3, =, polynomials, [, 3, ], [, i, ], ;, interpolatedState, [, i, ], =]
[;, final, double, p3, =, polynomials, [, 3, ], [, i, ], ;, interpolatedState, [, i, ], =, p0, +]
[;, final, double, p3, =, polynomials, [, 3, ], [, i, ], ;, interpolatedState, [, i, ], =, p0, +]
[double, p3, =, polynomials, [, 3, ], [, i, ], ;, interpolatedState, [, i, ], =, p0, +, theta, *]
[p3, =, polynomials, [, 3, ], [, i, ], ;, interpolatedState, [, i, ], =, p0, +, theta, *, (]
[p3, =, polynomials, [, 3, ], [, i, ], ;, interpolatedState, [, i, ], =, p0, +, theta, *, (]
[polynomials, [, 3, ], [, i, ], ;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +]
[polynomials, [, 3, ], [, i, ], ;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +]
[3, ], [, i, ], ;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *]
[], [, i, ], ;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (]
[], [, i, ], ;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (]
[], [, i, ], ;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (]
[i, ], ;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (, p2, *]
[;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (, p2, *, theta, +]
[;, interpolatedState, [, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (, p2, *, theta, +]
[[, i, ], =, p0, +, theta, *, (, p1, +, oneMinusTheta, *, (, p2, *, theta, +, p3, *]
[p0, +, theta, *, (, p1, +, oneMinusTheta, *, (, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;]
[p0, +, theta, *, (, p1, +, oneMinusTheta, *, (, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;]
[theta, *, (, p1, +, oneMinusTheta, *, (, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, []
[p1, +, oneMinusTheta, *, (, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =]
[p1, +, oneMinusTheta, *, (, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =]
[p1, +, oneMinusTheta, *, (, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =]
[p1, +, oneMinusTheta, *, (, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =]
[oneMinusTheta, *, (, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *]
[(, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +]
[(, p2, *, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +]
[*, theta, +, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *]
[+, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +]
[+, p3, *, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +]
[*, oneMinusTheta, ), ), ;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *]
[;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;, if, (]
[;, interpolatedDerivatives, [, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;, if, (]
[[, i, ], =, dot1, *, p1, +, dot2, *, p2, +, dot3, *, p3, ;, if, (, currentDegree, >]
[p1, +, dot2, *, p2, +, dot3, *, p3, ;, if, (, currentDegree, >, 3, ), {, double, cDot, =]
[+, dot3, *, p3, ;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0, ;, double, c, =]
[+, dot3, *, p3, ;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0, ;, double, c, =]
[+, dot3, *, p3, ;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0, ;, double, c, =]
[*, p3, ;, if, (, currentDegree, >, 3, ), {, double, cDot, =, 0, ;, double, c, =, polynomials, []
[if, (, currentDegree, >, 3, ), {, double, cDot, =, 0, ;, double, c, =, polynomials, [, currentDegree, ], []
[cDot, =, 0, ;, double, c, =, polynomials, [, currentDegree, ], [, i, ], ;, for, (, int, j, =]
[cDot, =, 0, ;, double, c, =, polynomials, [, currentDegree, ], [, i, ], ;, for, (, int, j, =]
[0, ;, double, c, =, polynomials, [, currentDegree, ], [, i, ], ;, for, (, int, j, =, currentDegree, -]
[double, c, =, polynomials, [, currentDegree, ], [, i, ], ;, for, (, int, j, =, currentDegree, -, 1, ;]
[double, c, =, polynomials, [, currentDegree, ], [, i, ], ;, for, (, int, j, =, currentDegree, -, 1, ;]
[=, polynomials, [, currentDegree, ], [, i, ], ;, for, (, int, j, =, currentDegree, -, 1, ;, j, >]
[[, currentDegree, ], [, i, ], ;, for, (, int, j, =, currentDegree, -, 1, ;, j, >, 3, ;]
[currentDegree, ], [, i, ], ;, for, (, int, j, =, currentDegree, -, 1, ;, j, >, 3, ;, --]
[(, int, j, =, currentDegree, -, 1, ;, j, >, 3, ;, --, j, ), {, final, double, d, =]
[(, int, j, =, currentDegree, -, 1, ;, j, >, 3, ;, --, j, ), {, final, double, d, =]
[j, =, currentDegree, -, 1, ;, j, >, 3, ;, --, j, ), {, final, double, d, =, 1.0, /]
[=, currentDegree, -, 1, ;, j, >, 3, ;, --, j, ), {, final, double, d, =, 1.0, /, (]
[=, currentDegree, -, 1, ;, j, >, 3, ;, --, j, ), {, final, double, d, =, 1.0, /, (]
[-, 1, ;, j, >, 3, ;, --, j, ), {, final, double, d, =, 1.0, /, (, j, -]
[j, >, 3, ;, --, j, ), {, final, double, d, =, 1.0, /, (, j, -, 3, ), ;]
[3, ;, --, j, ), {, final, double, d, =, 1.0, /, (, j, -, 3, ), ;, cDot, =]
[3, ;, --, j, ), {, final, double, d, =, 1.0, /, (, j, -, 3, ), ;, cDot, =]
[--, j, ), {, final, double, d, =, 1.0, /, (, j, -, 3, ), ;, cDot, =, d, *]
[j, ), {, final, double, d, =, 1.0, /, (, j, -, 3, ), ;, cDot, =, d, *, (]
[j, ), {, final, double, d, =, 1.0, /, (, j, -, 3, ), ;, cDot, =, d, *, (]
[j, ), {, final, double, d, =, 1.0, /, (, j, -, 3, ), ;, cDot, =, d, *, (]
[{, final, double, d, =, 1.0, /, (, j, -, 3, ), ;, cDot, =, d, *, (, theta05, *]
[double, d, =, 1.0, /, (, j, -, 3, ), ;, cDot, =, d, *, (, theta05, *, cDot, +]
[1.0, /, (, j, -, 3, ), ;, cDot, =, d, *, (, theta05, *, cDot, +, c, ), ;]
[(, j, -, 3, ), ;, cDot, =, d, *, (, theta05, *, cDot, +, c, ), ;, c, =]
[(, j, -, 3, ), ;, cDot, =, d, *, (, theta05, *, cDot, +, c, ), ;, c, =]
[(, j, -, 3, ), ;, cDot, =, d, *, (, theta05, *, cDot, +, c, ), ;, c, =]
[(, j, -, 3, ), ;, cDot, =, d, *, (, theta05, *, cDot, +, c, ), ;, c, =]
[-, 3, ), ;, cDot, =, d, *, (, theta05, *, cDot, +, c, ), ;, c, =, polynomials, []
[;, cDot, =, d, *, (, theta05, *, cDot, +, c, ), ;, c, =, polynomials, [, j, ], []
[d, *, (, theta05, *, cDot, +, c, ), ;, c, =, polynomials, [, j, ], [, i, ], +]
[d, *, (, theta05, *, cDot, +, c, ), ;, c, =, polynomials, [, j, ], [, i, ], +]
[d, *, (, theta05, *, cDot, +, c, ), ;, c, =, polynomials, [, j, ], [, i, ], +]
[(, theta05, *, cDot, +, c, ), ;, c, =, polynomials, [, j, ], [, i, ], +, c, *]
[*, cDot, +, c, ), ;, c, =, polynomials, [, j, ], [, i, ], +, c, *, d, *]
[c, ), ;, c, =, polynomials, [, j, ], [, i, ], +, c, *, d, *, theta05, ;, }]
[c, ), ;, c, =, polynomials, [, j, ], [, i, ], +, c, *, d, *, theta05, ;, }]
[;, c, =, polynomials, [, j, ], [, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState, []
[polynomials, [, j, ], [, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState, [, i, ], +=]
[polynomials, [, j, ], [, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState, [, i, ], +=]
[j, ], [, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *]
[[, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;]
[[, i, ], +, c, *, d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;]
[], +, c, *, d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, []
[*, d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=]
[*, d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=]
[d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (]
[d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (]
[d, *, theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (]
[theta05, ;, }, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4, *]
[}, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4, *, cDot, +]
[}, interpolatedState, [, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4, *, cDot, +]
[[, i, ], +=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4, *, cDot, +, t4Dot, *]
[+=, t4, *, c, ;, interpolatedDerivatives, [, i, ], +=, (, t4, *, cDot, +, t4Dot, *, c, ), /]
[[, i, ], +=, (, t4, *, cDot, +, t4Dot, *, c, ), /, h, ;, }, }, if, (]
[[, i, ], +=, (, t4, *, cDot, +, t4Dot, *, c, ), /, h, ;, }, }, if, (]
[], +=, (, t4, *, cDot, +, t4Dot, *, c, ), /, h, ;, }, }, if, (, h, ==]
[t4, *, cDot, +, t4Dot, *, c, ), /, h, ;, }, }, if, (, h, ==, 0, ), {]
[t4, *, cDot, +, t4Dot, *, c, ), /, h, ;, }, }, if, (, h, ==, 0, ), {]
[t4Dot, *, c, ), /, h, ;, }, }, if, (, h, ==, 0, ), {, System, ., arraycopy, (]
[t4Dot, *, c, ), /, h, ;, }, }, if, (, h, ==, 0, ), {, System, ., arraycopy, (]
[c, ), /, h, ;, }, }, if, (, h, ==, 0, ), {, System, ., arraycopy, (, yMidDots, []
[h, ;, }, }, if, (, h, ==, 0, ), {, System, ., arraycopy, (, yMidDots, [, 1, ], ,]
[}, }, if, (, h, ==, 0, ), {, System, ., arraycopy, (, yMidDots, [, 1, ], ,, 0, ,]
[if, (, h, ==, 0, ), {, System, ., arraycopy, (, yMidDots, [, 1, ], ,, 0, ,, interpolatedDerivatives, ,]
[h, ==, 0, ), {, System, ., arraycopy, (, yMidDots, [, 1, ], ,, 0, ,, interpolatedDerivatives, ,, 0, ,]
[;, }, }, @, Override, public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, final, int, dimension, =]
[;, }, }, @, Override, public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, final, int, dimension, =]
[}, }, @, Override, public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, final, int, dimension, =, (]
[}, }, @, Override, public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, final, int, dimension, =, (]
[@, Override, public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, final, int, dimension, =, (, currentState, ==]
[void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, final, int, dimension, =, (, currentState, ==, null, ), ?]
[writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, final, int, dimension, =, (, currentState, ==, null, ), ?, -]
[final, ObjectOutput, out, ), throws, IOException, {, final, int, dimension, =, (, currentState, ==, null, ), ?, -, 1, :]
[final, ObjectOutput, out, ), throws, IOException, {, final, int, dimension, =, (, currentState, ==, null, ), ?, -, 1, :]
[throws, IOException, {, final, int, dimension, =, (, currentState, ==, null, ), ?, -, 1, :, currentState, ., length, ;]
[{, final, int, dimension, =, (, currentState, ==, null, ), ?, -, 1, :, currentState, ., length, ;, writeBaseExternal, (]
[dimension, =, (, currentState, ==, null, ), ?, -, 1, :, currentState, ., length, ;, writeBaseExternal, (, out, ), ;]
[dimension, =, (, currentState, ==, null, ), ?, -, 1, :, currentState, ., length, ;, writeBaseExternal, (, out, ), ;]
[==, null, ), ?, -, 1, :, currentState, ., length, ;, writeBaseExternal, (, out, ), ;, out, ., writeInt, (]
[., length, ;, writeBaseExternal, (, out, ), ;, out, ., writeInt, (, currentDegree, ), ;, for, (, int, k, =]
[;, writeBaseExternal, (, out, ), ;, out, ., writeInt, (, currentDegree, ), ;, for, (, int, k, =, 0, ;]
[;, writeBaseExternal, (, out, ), ;, out, ., writeInt, (, currentDegree, ), ;, for, (, int, k, =, 0, ;]
[(, out, ), ;, out, ., writeInt, (, currentDegree, ), ;, for, (, int, k, =, 0, ;, k, <=]
[), ;, out, ., writeInt, (, currentDegree, ), ;, for, (, int, k, =, 0, ;, k, <=, currentDegree, ;]
[;, out, ., writeInt, (, currentDegree, ), ;, for, (, int, k, =, 0, ;, k, <=, currentDegree, ;, ++]
[for, (, int, k, =, 0, ;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =]
[int, k, =, 0, ;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;]
[int, k, =, 0, ;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;]
[=, 0, ;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <]
[;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;]
[k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++]
[;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {]
[;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {]
[{, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {, out, ., writeDouble, (]
[{, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {, out, ., writeDouble, (]
[{, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {, out, ., writeDouble, (]
[(, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {, out, ., writeDouble, (, polynomials, []
[=, 0, ;, l, <, dimension, ;, ++, l, ), {, out, ., writeDouble, (, polynomials, [, k, ], []
[}, @, Override, public, void, readExternal, (, final, ObjectInput, in, ), throws, IOException, ,, ClassNotFoundException, {, final, double, t, =]
[Override, public, void, readExternal, (, final, ObjectInput, in, ), throws, IOException, ,, ClassNotFoundException, {, final, double, t, =, readBaseExternal, (]
[in, ), throws, IOException, ,, ClassNotFoundException, {, final, double, t, =, readBaseExternal, (, in, ), ;, final, int, dimension, =]
[in, ), throws, IOException, ,, ClassNotFoundException, {, final, double, t, =, readBaseExternal, (, in, ), ;, final, int, dimension, =]
[), throws, IOException, ,, ClassNotFoundException, {, final, double, t, =, readBaseExternal, (, in, ), ;, final, int, dimension, =, (]
[), throws, IOException, ,, ClassNotFoundException, {, final, double, t, =, readBaseExternal, (, in, ), ;, final, int, dimension, =, (]
[IOException, ,, ClassNotFoundException, {, final, double, t, =, readBaseExternal, (, in, ), ;, final, int, dimension, =, (, currentState, ==]
[{, final, double, t, =, readBaseExternal, (, in, ), ;, final, int, dimension, =, (, currentState, ==, null, ), ?]
[final, double, t, =, readBaseExternal, (, in, ), ;, final, int, dimension, =, (, currentState, ==, null, ), ?, -]
[t, =, readBaseExternal, (, in, ), ;, final, int, dimension, =, (, currentState, ==, null, ), ?, -, 1, :]
[t, =, readBaseExternal, (, in, ), ;, final, int, dimension, =, (, currentState, ==, null, ), ?, -, 1, :]
[int, dimension, =, (, currentState, ==, null, ), ?, -, 1, :, currentState, ., length, ;, final, int, degree, =]
[int, dimension, =, (, currentState, ==, null, ), ?, -, 1, :, currentState, ., length, ;, final, int, degree, =]
[null, ), ?, -, 1, :, currentState, ., length, ;, final, int, degree, =, in, ., readInt, (, ), ;]
[?, -, 1, :, currentState, ., length, ;, final, int, degree, =, in, ., readInt, (, ), ;, resetTables, (]
[:, currentState, ., length, ;, final, int, degree, =, in, ., readInt, (, ), ;, resetTables, (, degree, ), ;]
[., length, ;, final, int, degree, =, in, ., readInt, (, ), ;, resetTables, (, degree, ), ;, currentDegree, =]
[in, ., readInt, (, ), ;, resetTables, (, degree, ), ;, currentDegree, =, degree, ;, for, (, int, k, =]
[readInt, (, ), ;, resetTables, (, degree, ), ;, currentDegree, =, degree, ;, for, (, int, k, =, 0, ;]
[readInt, (, ), ;, resetTables, (, degree, ), ;, currentDegree, =, degree, ;, for, (, int, k, =, 0, ;]
[), ;, resetTables, (, degree, ), ;, currentDegree, =, degree, ;, for, (, int, k, =, 0, ;, k, <=]
[resetTables, (, degree, ), ;, currentDegree, =, degree, ;, for, (, int, k, =, 0, ;, k, <=, currentDegree, ;]
[(, degree, ), ;, currentDegree, =, degree, ;, for, (, int, k, =, 0, ;, k, <=, currentDegree, ;, ++]
[for, (, int, k, =, 0, ;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =]
[int, k, =, 0, ;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;]
[int, k, =, 0, ;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;]
[=, 0, ;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <]
[;, k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;]
[k, <=, currentDegree, ;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++]
[;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {]
[;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {]
[;, ++, k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {]
[k, ), {, for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {, polynomials, []
[for, (, int, l, =, 0, ;, l, <, dimension, ;, ++, l, ), {, polynomials, [, k, ], []
[l, =, 0, ;, l, <, dimension, ;, ++, l, ), {, polynomials, [, k, ], [, l, ], =]
[l, =, 0, ;, l, <, dimension, ;, ++, l, ), {, polynomials, [, k, ], [, l, ], =]
[++, l, ), {, polynomials, [, k, ], [, l, ], =, in, ., readDouble, (, ), ;, }, }]
[), {, polynomials, [, k, ], [, l, ], =, in, ., readDouble, (, ), ;, }, }, setInterpolatedTime, (]
