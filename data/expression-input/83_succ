[;, private, XYDataset, dataset, ;, private, boolean, autoWidth, ;, private, double, intervalPositionFactor, ;, private, double, fixedIntervalWidth, ;, private, double, autoIntervalWidth]
[;, private, XYDataset, dataset, ;, private, boolean, autoWidth, ;, private, double, intervalPositionFactor, ;, private, double, fixedIntervalWidth, ;, private, double, autoIntervalWidth]
[,, true, ), ;, }, public, IntervalXYDelegate, (, XYDataset, dataset, ,, boolean, autoWidth, ), {, if, (, dataset, ==, null]
[), ;, }, public, IntervalXYDelegate, (, XYDataset, dataset, ,, boolean, autoWidth, ), {, if, (, dataset, ==, null, ), {]
[), {, throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, this, ., dataset, =, dataset, ;, this, ., autoWidth, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, this, ., dataset, =, dataset, ;, this, .]
[), {, throw, new, IllegalArgumentException, (, "Null 'dataset' argument.", ), ;, }, this, ., dataset, =, dataset, ;, this, ., autoWidth, =]
[;, }, this, ., dataset, =, dataset, ;, this, ., autoWidth, =, autoWidth, ;, this, ., intervalPositionFactor, =, 0.5, ;]
[), ;, }, this, ., dataset, =, dataset, ;, this, ., autoWidth, =, autoWidth, ;, this, ., intervalPositionFactor, =, 0.5]
[=, dataset, ;, this, ., autoWidth, =, autoWidth, ;, this, ., intervalPositionFactor, =, 0.5, ;, this, ., autoIntervalWidth, =, Double]
[., dataset, =, dataset, ;, this, ., autoWidth, =, autoWidth, ;, this, ., intervalPositionFactor, =, 0.5, ;, this, ., autoIntervalWidth]
[;, this, ., autoWidth, =, autoWidth, ;, this, ., intervalPositionFactor, =, 0.5, ;, this, ., autoIntervalWidth, =, Double, ., POSITIVE_INFINITY]
[=, autoWidth, ;, this, ., intervalPositionFactor, =, 0.5, ;, this, ., autoIntervalWidth, =, Double, ., POSITIVE_INFINITY, ;, this, ., fixedIntervalWidth]
[., autoWidth, =, autoWidth, ;, this, ., intervalPositionFactor, =, 0.5, ;, this, ., autoIntervalWidth, =, Double, ., POSITIVE_INFINITY, ;, this]
[;, this, ., intervalPositionFactor, =, 0.5, ;, this, ., autoIntervalWidth, =, Double, ., POSITIVE_INFINITY, ;, this, ., fixedIntervalWidth, =, 1.0]
[=, 0.5, ;, this, ., autoIntervalWidth, =, Double, ., POSITIVE_INFINITY, ;, this, ., fixedIntervalWidth, =, 1.0, ;, }, public, boolean]
[., intervalPositionFactor, =, 0.5, ;, this, ., autoIntervalWidth, =, Double, ., POSITIVE_INFINITY, ;, this, ., fixedIntervalWidth, =, 1.0, ;, }]
[;, this, ., autoIntervalWidth, =, Double, ., POSITIVE_INFINITY, ;, this, ., fixedIntervalWidth, =, 1.0, ;, }, public, boolean, isAutoWidth, (]
[=, Double, ., POSITIVE_INFINITY, ;, this, ., fixedIntervalWidth, =, 1.0, ;, }, public, boolean, isAutoWidth, (, ), {, return, this]
[., autoIntervalWidth, =, Double, ., POSITIVE_INFINITY, ;, this, ., fixedIntervalWidth, =, 1.0, ;, }, public, boolean, isAutoWidth, (, ), {]
[;, this, ., fixedIntervalWidth, =, 1.0, ;, }, public, boolean, isAutoWidth, (, ), {, return, this, ., autoWidth, ;, }]
[., POSITIVE_INFINITY, ;, this, ., fixedIntervalWidth, =, 1.0, ;, }, public, boolean, isAutoWidth, (, ), {, return, this, ., autoWidth]
[=, 1.0, ;, }, public, boolean, isAutoWidth, (, ), {, return, this, ., autoWidth, ;, }, public, void, setAutoWidth, (]
[., fixedIntervalWidth, =, 1.0, ;, }, public, boolean, isAutoWidth, (, ), {, return, this, ., autoWidth, ;, }, public, void]
[;, }, public, boolean, isAutoWidth, (, ), {, return, this, ., autoWidth, ;, }, public, void, setAutoWidth, (, boolean, b]
[;, }, public, void, setAutoWidth, (, boolean, b, ), {, this, ., autoWidth, =, b, ;, if, (, b, )]
[., autoWidth, ;, }, public, void, setAutoWidth, (, boolean, b, ), {, this, ., autoWidth, =, b, ;, if, (]
[=, b, ;, if, (, b, ), {, this, ., autoIntervalWidth, =, recalculateInterval, (, ), ;, }, }, public, double]
[., autoWidth, =, b, ;, if, (, b, ), {, this, ., autoIntervalWidth, =, recalculateInterval, (, ), ;, }, }]
[;, if, (, b, ), {, this, ., autoIntervalWidth, =, recalculateInterval, (, ), ;, }, }, public, double, getIntervalPositionFactor, (]
[), {, this, ., autoIntervalWidth, =, recalculateInterval, (, ), ;, }, }, public, double, getIntervalPositionFactor, (, ), {, return, this]
[=, recalculateInterval, (, ), ;, }, }, public, double, getIntervalPositionFactor, (, ), {, return, this, ., intervalPositionFactor, ;, }, public]
[., autoIntervalWidth, =, recalculateInterval, (, ), ;, }, }, public, double, getIntervalPositionFactor, (, ), {, return, this, ., intervalPositionFactor, ;]
[;, }, }, public, double, getIntervalPositionFactor, (, ), {, return, this, ., intervalPositionFactor, ;, }, public, void, setIntervalPositionFactor, (, double]
[;, }, public, void, setIntervalPositionFactor, (, double, d, ), {, if, (, d, <, 0.0, ||, 1.0, <, d, )]
[., intervalPositionFactor, ;, }, public, void, setIntervalPositionFactor, (, double, d, ), {, if, (, d, <, 0.0, ||, 1.0, <]
[), {, throw, new, IllegalArgumentException, (, "Argument 'd' outside valid range.", ), ;, }, this, ., intervalPositionFactor, =, d, ;, }, public, double, getFixedIntervalWidth]
[||, 1.0, <, d, ), {, throw, new, IllegalArgumentException, (, "Argument 'd' outside valid range.", ), ;, }, this, ., intervalPositionFactor, =, d, ;]
[<, 0.0, ||, 1.0, <, d, ), {, throw, new, IllegalArgumentException, (, "Argument 'd' outside valid range.", ), ;, }, this, ., intervalPositionFactor, =]
[||, 1.0, <, d, ), {, throw, new, IllegalArgumentException, (, "Argument 'd' outside valid range.", ), ;, }, this, ., intervalPositionFactor, =, d, ;]
[), {, throw, new, IllegalArgumentException, (, "Argument 'd' outside valid range.", ), ;, }, this, ., intervalPositionFactor, =, d, ;, }, public, double, getFixedIntervalWidth]
[<, d, ), {, throw, new, IllegalArgumentException, (, "Argument 'd' outside valid range.", ), ;, }, this, ., intervalPositionFactor, =, d, ;, }, public]
[), {, throw, new, IllegalArgumentException, (, "Argument 'd' outside valid range.", ), ;, }, this, ., intervalPositionFactor, =, d, ;, }, public, double, getFixedIntervalWidth]
[;, }, this, ., intervalPositionFactor, =, d, ;, }, public, double, getFixedIntervalWidth, (, ), {, return, this, ., fixedIntervalWidth, ;]
[), ;, }, this, ., intervalPositionFactor, =, d, ;, }, public, double, getFixedIntervalWidth, (, ), {, return, this, ., fixedIntervalWidth]
[=, d, ;, }, public, double, getFixedIntervalWidth, (, ), {, return, this, ., fixedIntervalWidth, ;, }, public, void, setFixedIntervalWidth, (]
[., intervalPositionFactor, =, d, ;, }, public, double, getFixedIntervalWidth, (, ), {, return, this, ., fixedIntervalWidth, ;, }, public, void]
[;, }, public, double, getFixedIntervalWidth, (, ), {, return, this, ., fixedIntervalWidth, ;, }, public, void, setFixedIntervalWidth, (, double, w]
[;, }, public, void, setFixedIntervalWidth, (, double, w, ), {, if, (, w, <, 0.0, ), {, throw, new, IllegalArgumentException]
[., fixedIntervalWidth, ;, }, public, void, setFixedIntervalWidth, (, double, w, ), {, if, (, w, <, 0.0, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Negative 'w' argument.", ), ;, }, this, ., fixedIntervalWidth, =, w, ;, this, ., autoWidth, =]
[<, 0.0, ), {, throw, new, IllegalArgumentException, (, "Negative 'w' argument.", ), ;, }, this, ., fixedIntervalWidth, =, w, ;, this, .]
[), {, throw, new, IllegalArgumentException, (, "Negative 'w' argument.", ), ;, }, this, ., fixedIntervalWidth, =, w, ;, this, ., autoWidth, =]
[;, }, this, ., fixedIntervalWidth, =, w, ;, this, ., autoWidth, =, false, ;, }, public, double, getIntervalWidth, (, )]
[), ;, }, this, ., fixedIntervalWidth, =, w, ;, this, ., autoWidth, =, false, ;, }, public, double, getIntervalWidth, (]
[=, w, ;, this, ., autoWidth, =, false, ;, }, public, double, getIntervalWidth, (, ), {, if, (, isAutoWidth, (]
[., fixedIntervalWidth, =, w, ;, this, ., autoWidth, =, false, ;, }, public, double, getIntervalWidth, (, ), {, if, (]
[;, this, ., autoWidth, =, false, ;, }, public, double, getIntervalWidth, (, ), {, if, (, isAutoWidth, (, ), &&]
[=, false, ;, }, public, double, getIntervalWidth, (, ), {, if, (, isAutoWidth, (, ), &&, !, Double, ., isInfinite]
[., autoWidth, =, false, ;, }, public, double, getIntervalWidth, (, ), {, if, (, isAutoWidth, (, ), &&, !, Double]
[;, }, public, double, getIntervalWidth, (, ), {, if, (, isAutoWidth, (, ), &&, !, Double, ., isInfinite, (, this]
[), {, return, this, ., autoIntervalWidth, ;, }, else, {, return, this, ., fixedIntervalWidth, ;, }, }, public, Number, getStartX]
[&&, !, Double, ., isInfinite, (, this, ., autoIntervalWidth, ), ), {, return, this, ., autoIntervalWidth, ;, }, else, {]
[), {, return, this, ., autoIntervalWidth, ;, }, else, {, return, this, ., fixedIntervalWidth, ;, }, }, public, Number, getStartX]
[), {, return, this, ., autoIntervalWidth, ;, }, else, {, return, this, ., fixedIntervalWidth, ;, }, }, public, Number, getStartX]
[., isInfinite, (, this, ., autoIntervalWidth, ), ), {, return, this, ., autoIntervalWidth, ;, }, else, {, return, this, .]
[), ), {, return, this, ., autoIntervalWidth, ;, }, else, {, return, this, ., fixedIntervalWidth, ;, }, }, public, Number]
[., autoIntervalWidth, ), ), {, return, this, ., autoIntervalWidth, ;, }, else, {, return, this, ., fixedIntervalWidth, ;, }, }]
[;, }, else, {, return, this, ., fixedIntervalWidth, ;, }, }, public, Number, getStartX, (, int, series, ,, int, item]
[., autoIntervalWidth, ;, }, else, {, return, this, ., fixedIntervalWidth, ;, }, }, public, Number, getStartX, (, int, series, ,]
[;, }, }, public, Number, getStartX, (, int, series, ,, int, item, ), {, Number, startX, =, null, ;, Number]
[., fixedIntervalWidth, ;, }, }, public, Number, getStartX, (, int, series, ,, int, item, ), {, Number, startX, =, null]
[;, Number, x, =, this, ., dataset, ., getX, (, series, ,, item, ), ;, if, (, x, !=, null]
[;, if, (, x, !=, null, ), {, startX, =, new, Double, (, x, ., doubleValue, (, ), -, (]
[., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {, startX, =, new, Double, (]
[., dataset, ., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {, startX, =, new]
[,, item, ), ;, if, (, x, !=, null, ), {, startX, =, new, Double, (, x, ., doubleValue, (]
[), ;, if, (, x, !=, null, ), {, startX, =, new, Double, (, x, ., doubleValue, (, ), -]
[), {, startX, =, new, Double, (, x, ., doubleValue, (, ), -, (, getIntervalPositionFactor, (, ), *, getIntervalWidth, (]
[!=, null, ), {, startX, =, new, Double, (, x, ., doubleValue, (, ), -, (, getIntervalPositionFactor, (, ), *]
[), {, startX, =, new, Double, (, x, ., doubleValue, (, ), -, (, getIntervalPositionFactor, (, ), *, getIntervalWidth, (]
[=, new, Double, (, x, ., doubleValue, (, ), -, (, getIntervalPositionFactor, (, ), *, getIntervalWidth, (, ), ), )]
[;, }, return, startX, ;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, return, this, .]
[), ;, }, return, startX, ;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, return, this]
[-, (, getIntervalPositionFactor, (, ), *, getIntervalWidth, (, ), ), ), ;, }, return, startX, ;, }, public, double, getStartXValue]
[., doubleValue, (, ), -, (, getIntervalPositionFactor, (, ), *, getIntervalWidth, (, ), ), ), ;, }, return, startX, ;]
[), ;, }, return, startX, ;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, return, this]
[), ), ;, }, return, startX, ;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, return]
[*, getIntervalWidth, (, ), ), ), ;, }, return, startX, ;, }, public, double, getStartXValue, (, int, series, ,, int]
[), ), ;, }, return, startX, ;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, return]
[;, }, public, double, getStartXValue, (, int, series, ,, int, item, ), {, return, this, ., dataset, ., getXValue, (]
[;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, Number, endX, =, null, ;, Number, x]
[-, getIntervalPositionFactor, (, ), *, getIntervalWidth, (, ), ;, }, public, Number, getEndX, (, int, series, ,, int, item, )]
[., getXValue, (, series, ,, item, ), -, getIntervalPositionFactor, (, ), *, getIntervalWidth, (, ), ;, }, public, Number, getEndX]
[., dataset, ., getXValue, (, series, ,, item, ), -, getIntervalPositionFactor, (, ), *, getIntervalWidth, (, ), ;, }, public]
[,, item, ), -, getIntervalPositionFactor, (, ), *, getIntervalWidth, (, ), ;, }, public, Number, getEndX, (, int, series, ,]
[), -, getIntervalPositionFactor, (, ), *, getIntervalWidth, (, ), ;, }, public, Number, getEndX, (, int, series, ,, int, item]
[;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, Number, endX, =, null, ;, Number, x]
[*, getIntervalWidth, (, ), ;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, Number, endX, =]
[;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, Number, endX, =, null, ;, Number, x]
[;, Number, x, =, this, ., dataset, ., getX, (, series, ,, item, ), ;, if, (, x, !=, null]
[;, if, (, x, !=, null, ), {, endX, =, new, Double, (, x, ., doubleValue, (, ), +, (]
[., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {, endX, =, new, Double, (]
[., dataset, ., getX, (, series, ,, item, ), ;, if, (, x, !=, null, ), {, endX, =, new]
[,, item, ), ;, if, (, x, !=, null, ), {, endX, =, new, Double, (, x, ., doubleValue, (]
[), ;, if, (, x, !=, null, ), {, endX, =, new, Double, (, x, ., doubleValue, (, ), +]
[), {, endX, =, new, Double, (, x, ., doubleValue, (, ), +, (, (, 1.0, -, getIntervalPositionFactor, (, )]
[!=, null, ), {, endX, =, new, Double, (, x, ., doubleValue, (, ), +, (, (, 1.0, -, getIntervalPositionFactor]
[), {, endX, =, new, Double, (, x, ., doubleValue, (, ), +, (, (, 1.0, -, getIntervalPositionFactor, (, )]
[=, new, Double, (, x, ., doubleValue, (, ), +, (, (, 1.0, -, getIntervalPositionFactor, (, ), ), *, getIntervalWidth]
[;, }, return, endX, ;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, return, this, .]
[), ;, }, return, endX, ;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, return, this]
[+, (, (, 1.0, -, getIntervalPositionFactor, (, ), ), *, getIntervalWidth, (, ), ), ), ;, }, return, endX, ;]
[., doubleValue, (, ), +, (, (, 1.0, -, getIntervalPositionFactor, (, ), ), *, getIntervalWidth, (, ), ), ), ;]
[), ;, }, return, endX, ;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, return, this]
[), ), ;, }, return, endX, ;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, return]
[*, getIntervalWidth, (, ), ), ), ;, }, return, endX, ;, }, public, double, getEndXValue, (, int, series, ,, int]
[), *, getIntervalWidth, (, ), ), ), ;, }, return, endX, ;, }, public, double, getEndXValue, (, int, series, ,]
[-, getIntervalPositionFactor, (, ), ), *, getIntervalWidth, (, ), ), ), ;, }, return, endX, ;, }, public, double, getEndXValue]
[), *, getIntervalWidth, (, ), ), ), ;, }, return, endX, ;, }, public, double, getEndXValue, (, int, series, ,]
[), ), ;, }, return, endX, ;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, return]
[;, }, public, double, getEndXValue, (, int, series, ,, int, item, ), {, return, this, ., dataset, ., getXValue, (]
[;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, double, result, =, Double, ., NaN, ;, Range, r, =]
[+, (, 1.0, -, getIntervalPositionFactor, (, ), ), *, getIntervalWidth, (, ), ;, }, public, double, getDomainLowerBound, (, boolean, includeInterval]
[., getXValue, (, series, ,, item, ), +, (, 1.0, -, getIntervalPositionFactor, (, ), ), *, getIntervalWidth, (, ), ;]
[., dataset, ., getXValue, (, series, ,, item, ), +, (, 1.0, -, getIntervalPositionFactor, (, ), ), *, getIntervalWidth, (]
[,, item, ), +, (, 1.0, -, getIntervalPositionFactor, (, ), ), *, getIntervalWidth, (, ), ;, }, public, double, getDomainLowerBound]
[), +, (, 1.0, -, getIntervalPositionFactor, (, ), ), *, getIntervalWidth, (, ), ;, }, public, double, getDomainLowerBound, (, boolean]
[;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, double, result, =, Double, ., NaN, ;, Range, r, =]
[*, getIntervalWidth, (, ), ;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, double, result, =, Double, ., NaN]
[), *, getIntervalWidth, (, ), ;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, double, result, =, Double, .]
[-, getIntervalPositionFactor, (, ), ), *, getIntervalWidth, (, ), ;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, double]
[), *, getIntervalWidth, (, ), ;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, double, result, =, Double, .]
[;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, double, result, =, Double, ., NaN, ;, Range, r, =]
[;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (, r, !=, null, ), {, result, =, r, .]
[., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (, r, !=, null, ), {, result, =]
[;, if, (, r, !=, null, ), {, result, =, r, ., getLowerBound, (, ), ;, }, return, result, ;]
[), ;, if, (, r, !=, null, ), {, result, =, r, ., getLowerBound, (, ), ;, }, return, result]
[), {, result, =, r, ., getLowerBound, (, ), ;, }, return, result, ;, }, public, double, getDomainUpperBound, (, boolean]
[!=, null, ), {, result, =, r, ., getLowerBound, (, ), ;, }, return, result, ;, }, public, double, getDomainUpperBound]
[), {, result, =, r, ., getLowerBound, (, ), ;, }, return, result, ;, }, public, double, getDomainUpperBound, (, boolean]
[=, r, ., getLowerBound, (, ), ;, }, return, result, ;, }, public, double, getDomainUpperBound, (, boolean, includeInterval, ), {]
[;, }, return, result, ;, }, public, double, getDomainUpperBound, (, boolean, includeInterval, ), {, double, result, =, Double, ., NaN]
[., getLowerBound, (, ), ;, }, return, result, ;, }, public, double, getDomainUpperBound, (, boolean, includeInterval, ), {, double, result]
[;, }, public, double, getDomainUpperBound, (, boolean, includeInterval, ), {, double, result, =, Double, ., NaN, ;, Range, r, =]
[;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (, r, !=, null, ), {, result, =, r, .]
[., NaN, ;, Range, r, =, getDomainBounds, (, includeInterval, ), ;, if, (, r, !=, null, ), {, result, =]
[;, if, (, r, !=, null, ), {, result, =, r, ., getUpperBound, (, ), ;, }, return, result, ;]
[), ;, if, (, r, !=, null, ), {, result, =, r, ., getUpperBound, (, ), ;, }, return, result]
[), {, result, =, r, ., getUpperBound, (, ), ;, }, return, result, ;, }, public, Range, getDomainBounds, (, boolean]
[!=, null, ), {, result, =, r, ., getUpperBound, (, ), ;, }, return, result, ;, }, public, Range, getDomainBounds]
[), {, result, =, r, ., getUpperBound, (, ), ;, }, return, result, ;, }, public, Range, getDomainBounds, (, boolean]
[=, r, ., getUpperBound, (, ), ;, }, return, result, ;, }, public, Range, getDomainBounds, (, boolean, includeInterval, ), {]
[;, }, return, result, ;, }, public, Range, getDomainBounds, (, boolean, includeInterval, ), {, Range, range, =, DatasetUtilities, ., findDomainBounds]
[., getUpperBound, (, ), ;, }, return, result, ;, }, public, Range, getDomainBounds, (, boolean, includeInterval, ), {, Range, range]
[;, }, public, Range, getDomainBounds, (, boolean, includeInterval, ), {, Range, range, =, DatasetUtilities, ., findDomainBounds, (, this, ., dataset]
[;, if, (, includeInterval, &&, range, !=, null, ), {, double, lowerAdj, =, getIntervalWidth, (, ), *, getIntervalPositionFactor, (, )]
[., findDomainBounds, (, this, ., dataset, ,, false, ), ;, if, (, includeInterval, &&, range, !=, null, ), {, double]
[,, false, ), ;, if, (, includeInterval, &&, range, !=, null, ), {, double, lowerAdj, =, getIntervalWidth, (, ), *]
[., dataset, ,, false, ), ;, if, (, includeInterval, &&, range, !=, null, ), {, double, lowerAdj, =, getIntervalWidth, (]
[), ;, if, (, includeInterval, &&, range, !=, null, ), {, double, lowerAdj, =, getIntervalWidth, (, ), *, getIntervalPositionFactor, (]
[), {, double, lowerAdj, =, getIntervalWidth, (, ), *, getIntervalPositionFactor, (, ), ;, double, upperAdj, =, getIntervalWidth, (, ), -]
[&&, range, !=, null, ), {, double, lowerAdj, =, getIntervalWidth, (, ), *, getIntervalPositionFactor, (, ), ;, double, upperAdj, =]
[), {, double, lowerAdj, =, getIntervalWidth, (, ), *, getIntervalPositionFactor, (, ), ;, double, upperAdj, =, getIntervalWidth, (, ), -]
[!=, null, ), {, double, lowerAdj, =, getIntervalWidth, (, ), *, getIntervalPositionFactor, (, ), ;, double, upperAdj, =, getIntervalWidth, (]
[), {, double, lowerAdj, =, getIntervalWidth, (, ), *, getIntervalPositionFactor, (, ), ;, double, upperAdj, =, getIntervalWidth, (, ), -]
[;, double, upperAdj, =, getIntervalWidth, (, ), -, lowerAdj, ;, range, =, new, Range, (, range, ., getLowerBound, (, )]
[*, getIntervalPositionFactor, (, ), ;, double, upperAdj, =, getIntervalWidth, (, ), -, lowerAdj, ;, range, =, new, Range, (, range]
[;, double, upperAdj, =, getIntervalWidth, (, ), -, lowerAdj, ;, range, =, new, Range, (, range, ., getLowerBound, (, )]
[;, range, =, new, Range, (, range, ., getLowerBound, (, ), -, lowerAdj, ,, range, ., getUpperBound, (, ), +]
[-, lowerAdj, ;, range, =, new, Range, (, range, ., getLowerBound, (, ), -, lowerAdj, ,, range, ., getUpperBound, (]
[;, range, =, new, Range, (, range, ., getLowerBound, (, ), -, lowerAdj, ,, range, ., getUpperBound, (, ), +]
[=, new, Range, (, range, ., getLowerBound, (, ), -, lowerAdj, ,, range, ., getUpperBound, (, ), +, upperAdj, )]
[;, }, return, range, ;, }, public, void, datasetChanged, (, DatasetChangeEvent, e, ), {, if, (, this, ., autoWidth, )]
[,, range, ., getUpperBound, (, ), +, upperAdj, ), ;, }, return, range, ;, }, public, void, datasetChanged, (, DatasetChangeEvent]
[-, lowerAdj, ,, range, ., getUpperBound, (, ), +, upperAdj, ), ;, }, return, range, ;, }, public, void, datasetChanged]
[., getLowerBound, (, ), -, lowerAdj, ,, range, ., getUpperBound, (, ), +, upperAdj, ), ;, }, return, range, ;]
[,, range, ., getUpperBound, (, ), +, upperAdj, ), ;, }, return, range, ;, }, public, void, datasetChanged, (, DatasetChangeEvent]
[), ;, }, return, range, ;, }, public, void, datasetChanged, (, DatasetChangeEvent, e, ), {, if, (, this, ., autoWidth]
[+, upperAdj, ), ;, }, return, range, ;, }, public, void, datasetChanged, (, DatasetChangeEvent, e, ), {, if, (, this]
[., getUpperBound, (, ), +, upperAdj, ), ;, }, return, range, ;, }, public, void, datasetChanged, (, DatasetChangeEvent, e, )]
[), ;, }, return, range, ;, }, public, void, datasetChanged, (, DatasetChangeEvent, e, ), {, if, (, this, ., autoWidth]
[;, }, public, void, datasetChanged, (, DatasetChangeEvent, e, ), {, if, (, this, ., autoWidth, ), {, this, ., autoIntervalWidth]
[), {, this, ., autoIntervalWidth, =, recalculateInterval, (, ), ;, }, }, private, double, recalculateInterval, (, ), {, double, result]
[., autoWidth, ), {, this, ., autoIntervalWidth, =, recalculateInterval, (, ), ;, }, }, private, double, recalculateInterval, (, ), {]
[=, recalculateInterval, (, ), ;, }, }, private, double, recalculateInterval, (, ), {, double, result, =, Double, ., POSITIVE_INFINITY, ;]
[., autoIntervalWidth, =, recalculateInterval, (, ), ;, }, }, private, double, recalculateInterval, (, ), {, double, result, =, Double, .]
[;, }, }, private, double, recalculateInterval, (, ), {, double, result, =, Double, ., POSITIVE_INFINITY, ;, int, seriesCount, =, this]
[;, int, seriesCount, =, this, ., dataset, ., getSeriesCount, (, ), ;, for, (, int, series, =, 0, ;, series]
[., POSITIVE_INFINITY, ;, int, seriesCount, =, this, ., dataset, ., getSeriesCount, (, ), ;, for, (, int, series, =, 0]
[;, for, (, int, series, =, 0, ;, series, <, seriesCount, ;, series, ++, ), {, result, =, Math, .]
[., getSeriesCount, (, ), ;, for, (, int, series, =, 0, ;, series, <, seriesCount, ;, series, ++, ), {]
[., dataset, ., getSeriesCount, (, ), ;, for, (, int, series, =, 0, ;, series, <, seriesCount, ;, series, ++]
[;, series, <, seriesCount, ;, series, ++, ), {, result, =, Math, ., min, (, result, ,, calculateIntervalForSeries, (, series]
[;, series, ++, ), {, result, =, Math, ., min, (, result, ,, calculateIntervalForSeries, (, series, ), ), ;, }]
[<, seriesCount, ;, series, ++, ), {, result, =, Math, ., min, (, result, ,, calculateIntervalForSeries, (, series, ), )]
[;, series, ++, ), {, result, =, Math, ., min, (, result, ,, calculateIntervalForSeries, (, series, ), ), ;, }]
[), {, result, =, Math, ., min, (, result, ,, calculateIntervalForSeries, (, series, ), ), ;, }, return, result, ;]
[++, ), {, result, =, Math, ., min, (, result, ,, calculateIntervalForSeries, (, series, ), ), ;, }, return, result]
[=, Math, ., min, (, result, ,, calculateIntervalForSeries, (, series, ), ), ;, }, return, result, ;, }, private, double]
[;, }, return, result, ;, }, private, double, calculateIntervalForSeries, (, int, series, ), {, double, result, =, Double, ., POSITIVE_INFINITY]
[., min, (, result, ,, calculateIntervalForSeries, (, series, ), ), ;, }, return, result, ;, }, private, double, calculateIntervalForSeries, (]
[,, calculateIntervalForSeries, (, series, ), ), ;, }, return, result, ;, }, private, double, calculateIntervalForSeries, (, int, series, ), {]
[), ;, }, return, result, ;, }, private, double, calculateIntervalForSeries, (, int, series, ), {, double, result, =, Double, .]
[), ), ;, }, return, result, ;, }, private, double, calculateIntervalForSeries, (, int, series, ), {, double, result, =, Double]
[;, }, private, double, calculateIntervalForSeries, (, int, series, ), {, double, result, =, Double, ., POSITIVE_INFINITY, ;, int, itemCount, =]
[;, int, itemCount, =, this, ., dataset, ., getItemCount, (, series, ), ;, if, (, itemCount, >, 1, ), {]
[., POSITIVE_INFINITY, ;, int, itemCount, =, this, ., dataset, ., getItemCount, (, series, ), ;, if, (, itemCount, >, 1]
[;, if, (, itemCount, >, 1, ), {, double, prev, =, this, ., dataset, ., getXValue, (, series, ,, 0]
[., getItemCount, (, series, ), ;, if, (, itemCount, >, 1, ), {, double, prev, =, this, ., dataset, .]
[., dataset, ., getItemCount, (, series, ), ;, if, (, itemCount, >, 1, ), {, double, prev, =, this, .]
[), ;, if, (, itemCount, >, 1, ), {, double, prev, =, this, ., dataset, ., getXValue, (, series, ,]
[), {, double, prev, =, this, ., dataset, ., getXValue, (, series, ,, 0, ), ;, for, (, int, item]
[>, 1, ), {, double, prev, =, this, ., dataset, ., getXValue, (, series, ,, 0, ), ;, for, (]
[), {, double, prev, =, this, ., dataset, ., getXValue, (, series, ,, 0, ), ;, for, (, int, item]
[;, for, (, int, item, =, 1, ;, item, <, itemCount, ;, item, ++, ), {, double, x, =, this]
[., getXValue, (, series, ,, 0, ), ;, for, (, int, item, =, 1, ;, item, <, itemCount, ;, item]
[., dataset, ., getXValue, (, series, ,, 0, ), ;, for, (, int, item, =, 1, ;, item, <, itemCount]
[,, 0, ), ;, for, (, int, item, =, 1, ;, item, <, itemCount, ;, item, ++, ), {, double]
[), ;, for, (, int, item, =, 1, ;, item, <, itemCount, ;, item, ++, ), {, double, x, =]
[;, item, <, itemCount, ;, item, ++, ), {, double, x, =, this, ., dataset, ., getXValue, (, series, ,]
[;, item, ++, ), {, double, x, =, this, ., dataset, ., getXValue, (, series, ,, item, ), ;, result]
[<, itemCount, ;, item, ++, ), {, double, x, =, this, ., dataset, ., getXValue, (, series, ,, item, )]
[;, item, ++, ), {, double, x, =, this, ., dataset, ., getXValue, (, series, ,, item, ), ;, result]
[), {, double, x, =, this, ., dataset, ., getXValue, (, series, ,, item, ), ;, result, =, Math, .]
[++, ), {, double, x, =, this, ., dataset, ., getXValue, (, series, ,, item, ), ;, result, =, Math]
[;, result, =, Math, ., min, (, result, ,, x, -, prev, ), ;, prev, =, x, ;, }, }]
[., getXValue, (, series, ,, item, ), ;, result, =, Math, ., min, (, result, ,, x, -, prev, )]
[., dataset, ., getXValue, (, series, ,, item, ), ;, result, =, Math, ., min, (, result, ,, x, -]
[,, item, ), ;, result, =, Math, ., min, (, result, ,, x, -, prev, ), ;, prev, =, x]
[), ;, result, =, Math, ., min, (, result, ,, x, -, prev, ), ;, prev, =, x, ;, }]
[=, Math, ., min, (, result, ,, x, -, prev, ), ;, prev, =, x, ;, }, }, return, result]
[;, prev, =, x, ;, }, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if]
[., min, (, result, ,, x, -, prev, ), ;, prev, =, x, ;, }, }, return, result, ;, }]
[,, x, -, prev, ), ;, prev, =, x, ;, }, }, return, result, ;, }, public, boolean, equals, (]
[), ;, prev, =, x, ;, }, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {]
[-, prev, ), ;, prev, =, x, ;, }, }, return, result, ;, }, public, boolean, equals, (, Object, obj]
[), ;, prev, =, x, ;, }, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {]
[=, x, ;, }, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj]
[;, }, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, IntervalXYDelegate, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, IntervalXYDelegate, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, IntervalXYDelegate, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, IntervalXYDelegate, ), ), {, return, false, ;, }, IntervalXYDelegate, that, =, (]
[), {, return, false, ;, }, IntervalXYDelegate, that, =, (, IntervalXYDelegate, ), obj, ;, if, (, this, ., autoWidth, !=]
[), {, return, false, ;, }, IntervalXYDelegate, that, =, (, IntervalXYDelegate, ), obj, ;, if, (, this, ., autoWidth, !=]
[), ), {, return, false, ;, }, IntervalXYDelegate, that, =, (, IntervalXYDelegate, ), obj, ;, if, (, this, ., autoWidth]
[instanceof, IntervalXYDelegate, ), ), {, return, false, ;, }, IntervalXYDelegate, that, =, (, IntervalXYDelegate, ), obj, ;, if, (, this]
[;, }, IntervalXYDelegate, that, =, (, IntervalXYDelegate, ), obj, ;, if, (, this, ., autoWidth, !=, that, ., autoWidth, )]
[;, if, (, this, ., autoWidth, !=, that, ., autoWidth, ), {, return, false, ;, }, if, (, this, .]
[;, if, (, this, ., autoWidth, !=, that, ., autoWidth, ), {, return, false, ;, }, if, (, this, .]
[), {, return, false, ;, }, if, (, this, ., intervalPositionFactor, !=, that, ., intervalPositionFactor, ), {, return, false, ;]
[!=, that, ., autoWidth, ), {, return, false, ;, }, if, (, this, ., intervalPositionFactor, !=, that, ., intervalPositionFactor, )]
[., autoWidth, !=, that, ., autoWidth, ), {, return, false, ;, }, if, (, this, ., intervalPositionFactor, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., intervalPositionFactor, !=, that, ., intervalPositionFactor, ), {, return, false, ;]
[., autoWidth, ), {, return, false, ;, }, if, (, this, ., intervalPositionFactor, !=, that, ., intervalPositionFactor, ), {, return]
[;, }, if, (, this, ., intervalPositionFactor, !=, that, ., intervalPositionFactor, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., fixedIntervalWidth, !=, that, ., fixedIntervalWidth, ), {, return, false, ;]
[!=, that, ., intervalPositionFactor, ), {, return, false, ;, }, if, (, this, ., fixedIntervalWidth, !=, that, ., fixedIntervalWidth, )]
[., intervalPositionFactor, !=, that, ., intervalPositionFactor, ), {, return, false, ;, }, if, (, this, ., fixedIntervalWidth, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., fixedIntervalWidth, !=, that, ., fixedIntervalWidth, ), {, return, false, ;]
[., intervalPositionFactor, ), {, return, false, ;, }, if, (, this, ., fixedIntervalWidth, !=, that, ., fixedIntervalWidth, ), {, return]
[;, }, if, (, this, ., fixedIntervalWidth, !=, that, ., fixedIntervalWidth, ), {, return, false, ;, }, return, true, ;]
[), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super]
[!=, that, ., fixedIntervalWidth, ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws]
[., fixedIntervalWidth, !=, that, ., fixedIntervalWidth, ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (]
[), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super]
[., fixedIntervalWidth, ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super, ., clone, (, )]
[;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super, ., clone, (, ), ;, }, public, int]
[;, }, public, int, hashCode, (, ), {, int, hash, =, 5, ;, hash, =, HashUtilities, ., hashCode, (, hash]
[., clone, (, ), ;, }, public, int, hashCode, (, ), {, int, hash, =, 5, ;, hash, =, HashUtilities]
[;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., autoWidth, ), ;, hash, =, HashUtilities, ., hashCode, (]
[=, HashUtilities, ., hashCode, (, hash, ,, this, ., autoWidth, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalPositionFactor, ), ;, hash, =, HashUtilities, ., hashCode, (]
[., hashCode, (, hash, ,, this, ., autoWidth, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, .]
[,, this, ., autoWidth, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalPositionFactor, ), ;, hash]
[), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalPositionFactor, ), ;, hash, =, HashUtilities, ., hashCode]
[., autoWidth, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalPositionFactor, ), ;, hash, =, HashUtilities]
[=, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalPositionFactor, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., fixedIntervalWidth, ), ;, return, hash, ;, }, }]
[., hashCode, (, hash, ,, this, ., intervalPositionFactor, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, .]
[,, this, ., intervalPositionFactor, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., fixedIntervalWidth, ), ;, return]
[), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., fixedIntervalWidth, ), ;, return, hash, ;, }, }]
[., intervalPositionFactor, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., fixedIntervalWidth, ), ;, return, hash, ;]
[=, HashUtilities, ., hashCode, (, hash, ,, this, ., fixedIntervalWidth, ), ;, return, hash, ;, }, }]
[;, return, hash, ;, }, }]
[., hashCode, (, hash, ,, this, ., fixedIntervalWidth, ), ;, return, hash, ;, }, }]
[,, this, ., fixedIntervalWidth, ), ;, return, hash, ;, }, }]
[), ;, return, hash, ;, }, }]
[., fixedIntervalWidth, ), ;, return, hash, ;, }, }]
[;, }, }]
