[Precision, {, public, static, final, double, EPSILON, ;, public, static, final, double, SAFE_MIN, ;, private, static, final, long, EXPONENT_OFFSET, =]
[public, static, final, double, SAFE_MIN, ;, private, static, final, long, EXPONENT_OFFSET, =, 1023l, ;, private, static, final, long, SGN_MASK, =]
[final, long, EXPONENT_OFFSET, =, 1023l, ;, private, static, final, long, SGN_MASK, =, 0x8000000000000000L, ;, private, static, final, int, SGN_MASK_FLOAT, =]
[1023l, ;, private, static, final, long, SGN_MASK, =, 0x8000000000000000L, ;, private, static, final, int, SGN_MASK_FLOAT, =, 0x80000000, ;, static, {]
[private, static, final, long, SGN_MASK, =, 0x8000000000000000L, ;, private, static, final, int, SGN_MASK_FLOAT, =, 0x80000000, ;, static, {, EPSILON, =]
[private, static, final, long, SGN_MASK, =, 0x8000000000000000L, ;, private, static, final, int, SGN_MASK_FLOAT, =, 0x80000000, ;, static, {, EPSILON, =]
[SGN_MASK, =, 0x8000000000000000L, ;, private, static, final, int, SGN_MASK_FLOAT, =, 0x80000000, ;, static, {, EPSILON, =, Double, ., longBitsToDouble, (]
[SGN_MASK, =, 0x8000000000000000L, ;, private, static, final, int, SGN_MASK_FLOAT, =, 0x80000000, ;, static, {, EPSILON, =, Double, ., longBitsToDouble, (]
[=, 0x8000000000000000L, ;, private, static, final, int, SGN_MASK_FLOAT, =, 0x80000000, ;, static, {, EPSILON, =, Double, ., longBitsToDouble, (, (]
[=, 0x8000000000000000L, ;, private, static, final, int, SGN_MASK_FLOAT, =, 0x80000000, ;, static, {, EPSILON, =, Double, ., longBitsToDouble, (, (]
[;, private, static, final, int, SGN_MASK_FLOAT, =, 0x80000000, ;, static, {, EPSILON, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -]
[final, int, SGN_MASK_FLOAT, =, 0x80000000, ;, static, {, EPSILON, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 53l, ), <<]
[=, 0x80000000, ;, static, {, EPSILON, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 53l, ), <<, 52, ), ;]
[;, static, {, EPSILON, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 53l, ), <<, 52, ), ;, SAFE_MIN, =]
[;, static, {, EPSILON, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 53l, ), <<, 52, ), ;, SAFE_MIN, =]
[=, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 53l, ), <<, 52, ), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (]
[=, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 53l, ), <<, 52, ), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (]
[Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 53l, ), <<, 52, ), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (, (]
[Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 53l, ), <<, 52, ), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (, (]
[longBitsToDouble, (, (, EXPONENT_OFFSET, -, 53l, ), <<, 52, ), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -]
[EXPONENT_OFFSET, -, 53l, ), <<, 52, ), ;, SAFE_MIN, =, Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 1022l, ), <<]
[), {, }, public, static, int, compareTo, (, double, x, ,, double, y, ,, double, eps, ), {, if, (]
[}, public, static, int, compareTo, (, double, x, ,, double, y, ,, double, eps, ), {, if, (, equals, (]
[static, int, compareTo, (, double, x, ,, double, y, ,, double, eps, ), {, if, (, equals, (, x, ,]
[compareTo, (, double, x, ,, double, y, ,, double, eps, ), {, if, (, equals, (, x, ,, y, ,]
[double, y, ,, double, eps, ), {, if, (, equals, (, x, ,, y, ,, eps, ), ), {, return]
[{, if, (, equals, (, x, ,, y, ,, eps, ), ), {, return, 0, ;, }, else, if, (]
[{, if, (, equals, (, x, ,, y, ,, eps, ), ), {, return, 0, ;, }, else, if, (]
[(, equals, (, x, ,, y, ,, eps, ), ), {, return, 0, ;, }, else, if, (, x, <]
[,, y, ,, eps, ), ), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return]
[y, ,, eps, ), ), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return, -]
[), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return, -, 1, ;, }, return]
[public, static, int, compareTo, (, final, double, x, ,, final, double, y, ,, final, int, maxUlps, ), {, if, (]
[int, compareTo, (, final, double, x, ,, final, double, y, ,, final, int, maxUlps, ), {, if, (, equals, (]
[(, final, double, x, ,, final, double, y, ,, final, int, maxUlps, ), {, if, (, equals, (, x, ,]
[double, x, ,, final, double, y, ,, final, int, maxUlps, ), {, if, (, equals, (, x, ,, y, ,]
[y, ,, final, int, maxUlps, ), {, if, (, equals, (, x, ,, y, ,, maxUlps, ), ), {, return]
[{, if, (, equals, (, x, ,, y, ,, maxUlps, ), ), {, return, 0, ;, }, else, if, (]
[{, if, (, equals, (, x, ,, y, ,, maxUlps, ), ), {, return, 0, ;, }, else, if, (]
[(, equals, (, x, ,, y, ,, maxUlps, ), ), {, return, 0, ;, }, else, if, (, x, <]
[,, y, ,, maxUlps, ), ), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return]
[y, ,, maxUlps, ), ), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return, -]
[), {, return, 0, ;, }, else, if, (, x, <, y, ), {, return, -, 1, ;, }, return]
[1, ;, }, return, 1, ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ), {, return]
[}, return, 1, ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ), {, return, equals, (]
[1, ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ), {, return, equals, (, x, ,]
[}, public, static, boolean, equals, (, float, x, ,, float, y, ), {, return, equals, (, x, ,, y, ,]
[,, y, ,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ), {, return]
[,, y, ,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ), {, return]
[y, ,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ), {, return, (]
[y, ,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ), {, return, (]
[y, ,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ), {, return, (]
[;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ), {, return, (, Float, ., isNaN, (]
[static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ), {, return, (, Float, ., isNaN, (, x, ), &&]
[static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ), {, return, (, Float, ., isNaN, (, x, ), &&]
[float, x, ,, float, y, ), {, return, (, Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (]
[y, ), {, return, (, Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), ), ||]
[{, return, (, Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), ), ||, equals, (]
[(, Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), ), ||, equals, (, x, ,]
[., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,]
[1, ), ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, float, eps, ), {, return]
[1, ), ;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, float, eps, ), {, return]
[;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, float, eps, ), {, return, equals, (]
[public, static, boolean, equals, (, float, x, ,, float, y, ,, float, eps, ), {, return, equals, (, x, ,]
[boolean, equals, (, float, x, ,, float, y, ,, float, eps, ), {, return, equals, (, x, ,, y, ,]
[float, x, ,, float, y, ,, float, eps, ), {, return, equals, (, x, ,, y, ,, 1, ), ||]
[float, x, ,, float, y, ,, float, eps, ), {, return, equals, (, x, ,, y, ,, 1, ), ||]
[float, x, ,, float, y, ,, float, eps, ), {, return, equals, (, x, ,, y, ,, 1, ), ||]
[y, ,, float, eps, ), {, return, equals, (, x, ,, y, ,, 1, ), ||, FastMath, ., abs, (]
[y, ,, float, eps, ), {, return, equals, (, x, ,, y, ,, 1, ), ||, FastMath, ., abs, (]
[float, eps, ), {, return, equals, (, x, ,, y, ,, 1, ), ||, FastMath, ., abs, (, y, -]
[{, return, equals, (, x, ,, y, ,, 1, ), ||, FastMath, ., abs, (, y, -, x, ), <=]
[<=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, float, eps, ), {, return]
[<=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, float, eps, ), {, return]
[;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, float, eps, ), {, return, equalsIncludingNaN, (]
[public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, float, eps, ), {, return, equalsIncludingNaN, (, x, ,]
[equalsIncludingNaN, (, float, x, ,, float, y, ,, float, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||]
[(, float, x, ,, float, y, ,, float, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (]
[(, float, x, ,, float, y, ,, float, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (]
[(, float, x, ,, float, y, ,, float, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (]
[float, y, ,, float, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (, FastMath, ., abs, (]
[float, y, ,, float, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (, FastMath, ., abs, (]
[,, float, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (, FastMath, ., abs, (, y, -]
[), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (, FastMath, ., abs, (, y, -, x, ), <=]
[;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, int, maxUlps, ), {, int, xInt, =]
[;, }, public, static, boolean, equals, (, float, x, ,, float, y, ,, int, maxUlps, ), {, int, xInt, =]
[boolean, equals, (, float, x, ,, float, y, ,, int, maxUlps, ), {, int, xInt, =, Float, ., floatToIntBits, (]
[float, y, ,, int, maxUlps, ), {, int, xInt, =, Float, ., floatToIntBits, (, x, ), ;, int, yInt, =]
[float, y, ,, int, maxUlps, ), {, int, xInt, =, Float, ., floatToIntBits, (, x, ), ;, int, yInt, =]
[maxUlps, ), {, int, xInt, =, Float, ., floatToIntBits, (, x, ), ;, int, yInt, =, Float, ., floatToIntBits, (]
[=, Float, ., floatToIntBits, (, x, ), ;, int, yInt, =, Float, ., floatToIntBits, (, y, ), ;, if, (]
[=, Float, ., floatToIntBits, (, x, ), ;, int, yInt, =, Float, ., floatToIntBits, (, y, ), ;, if, (]
[., floatToIntBits, (, x, ), ;, int, yInt, =, Float, ., floatToIntBits, (, y, ), ;, if, (, xInt, <]
[x, ), ;, int, yInt, =, Float, ., floatToIntBits, (, y, ), ;, if, (, xInt, <, 0, ), {]
[;, int, yInt, =, Float, ., floatToIntBits, (, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =]
[;, int, yInt, =, Float, ., floatToIntBits, (, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =]
[yInt, =, Float, ., floatToIntBits, (, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK_FLOAT, -]
[(, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK_FLOAT, -, xInt, ;, }, if, (]
[(, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK_FLOAT, -, xInt, ;, }, if, (]
[), ;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK_FLOAT, -, xInt, ;, }, if, (, yInt, <]
[(, xInt, <, 0, ), {, xInt, =, SGN_MASK_FLOAT, -, xInt, ;, }, if, (, yInt, <, 0, ), {]
[<, 0, ), {, xInt, =, SGN_MASK_FLOAT, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =]
[<, 0, ), {, xInt, =, SGN_MASK_FLOAT, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =]
[), {, xInt, =, SGN_MASK_FLOAT, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK_FLOAT, -]
[;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean, isEqual, =]
[;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean, isEqual, =]
[;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean, isEqual, =]
[yInt, <, 0, ), {, yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (]
[yInt, <, 0, ), {, yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (]
[0, ), {, yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -]
[yInt, =, SGN_MASK_FLOAT, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=]
[-, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return]
[-, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return]
[-, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return]
[;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&]
[}, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !]
[}, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !]
[=, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !, Float, ., isNaN, (]
[abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !, Float, ., isNaN, (, x, ), &&]
[(, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !, Float, ., isNaN, (, x, ), &&, !]
[(, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !, Float, ., isNaN, (, x, ), &&, !]
[), <=, maxUlps, ;, return, isEqual, &&, !, Float, ., isNaN, (, x, ), &&, !, Float, ., isNaN, (]
[y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, int, maxUlps, ), {, return]
[y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, int, maxUlps, ), {, return]
[), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, int, maxUlps, ), {, return, (]
[), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, int, maxUlps, ), {, return, (]
[), ;, }, public, static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, int, maxUlps, ), {, return, (]
[static, boolean, equalsIncludingNaN, (, float, x, ,, float, y, ,, int, maxUlps, ), {, return, (, Float, ., isNaN, (]
[(, float, x, ,, float, y, ,, int, maxUlps, ), {, return, (, Float, ., isNaN, (, x, ), &&]
[(, float, x, ,, float, y, ,, int, maxUlps, ), {, return, (, Float, ., isNaN, (, x, ), &&]
[float, y, ,, int, maxUlps, ), {, return, (, Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (]
[maxUlps, ), {, return, (, Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), ), ||]
[{, return, (, Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), ), ||, equals, (]
[(, Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), ), ||, equals, (, x, ,]
[., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,]
[,, y, ,, maxUlps, ), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ), {, return]
[,, maxUlps, ), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ), {, return, equals, (]
[), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ), {, return, equals, (, x, ,]
[}, public, static, boolean, equals, (, double, x, ,, double, y, ), {, return, equals, (, x, ,, y, ,]
[,, y, ,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ), {, return]
[,, y, ,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ), {, return]
[y, ,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ), {, return, (]
[y, ,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ), {, return, (]
[y, ,, 1, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ), {, return, (]
[;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ), {, return, (, Double, ., isNaN, (]
[static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ), {, return, (, Double, ., isNaN, (, x, ), &&]
[static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ), {, return, (, Double, ., isNaN, (, x, ), &&]
[double, x, ,, double, y, ), {, return, (, Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (]
[y, ), {, return, (, Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), ), ||]
[{, return, (, Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), ), ||, equals, (]
[(, Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), ), ||, equals, (, x, ,]
[., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,]
[1, ), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, double, eps, ), {, return]
[1, ), ;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, double, eps, ), {, return]
[;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, double, eps, ), {, return, equals, (]
[public, static, boolean, equals, (, double, x, ,, double, y, ,, double, eps, ), {, return, equals, (, x, ,]
[boolean, equals, (, double, x, ,, double, y, ,, double, eps, ), {, return, equals, (, x, ,, y, ,]
[double, x, ,, double, y, ,, double, eps, ), {, return, equals, (, x, ,, y, ,, 1, ), ||]
[double, x, ,, double, y, ,, double, eps, ), {, return, equals, (, x, ,, y, ,, 1, ), ||]
[double, x, ,, double, y, ,, double, eps, ), {, return, equals, (, x, ,, y, ,, 1, ), ||]
[y, ,, double, eps, ), {, return, equals, (, x, ,, y, ,, 1, ), ||, FastMath, ., abs, (]
[y, ,, double, eps, ), {, return, equals, (, x, ,, y, ,, 1, ), ||, FastMath, ., abs, (]
[double, eps, ), {, return, equals, (, x, ,, y, ,, 1, ), ||, FastMath, ., abs, (, y, -]
[{, return, equals, (, x, ,, y, ,, 1, ), ||, FastMath, ., abs, (, y, -, x, ), <=]
[eps, ;, }, public, static, boolean, equalsWithRelativeTolerance, (, double, x, ,, double, y, ,, double, eps, ), {, if, (]
[}, public, static, boolean, equalsWithRelativeTolerance, (, double, x, ,, double, y, ,, double, eps, ), {, if, (, equals, (]
[static, boolean, equalsWithRelativeTolerance, (, double, x, ,, double, y, ,, double, eps, ), {, if, (, equals, (, x, ,]
[equalsWithRelativeTolerance, (, double, x, ,, double, y, ,, double, eps, ), {, if, (, equals, (, x, ,, y, ,]
[double, y, ,, double, eps, ), {, if, (, equals, (, x, ,, y, ,, 1, ), ), {, return]
[if, (, equals, (, x, ,, y, ,, 1, ), ), {, return, true, ;, }, final, double, absoluteMax, =]
[if, (, equals, (, x, ,, y, ,, 1, ), ), {, return, true, ;, }, final, double, absoluteMax, =]
[x, ,, y, ,, 1, ), ), {, return, true, ;, }, final, double, absoluteMax, =, FastMath, ., max, (]
[x, ,, y, ,, 1, ), ), {, return, true, ;, }, final, double, absoluteMax, =, FastMath, ., max, (]
[1, ), ), {, return, true, ;, }, final, double, absoluteMax, =, FastMath, ., max, (, FastMath, ., abs, (]
[{, return, true, ;, }, final, double, absoluteMax, =, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,]
[{, return, true, ;, }, final, double, absoluteMax, =, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,]
[}, final, double, absoluteMax, =, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,, FastMath, ., abs, (]
[(, FastMath, ., abs, (, x, ), ,, FastMath, ., abs, (, y, ), ), ;, final, double, relativeDifference, =]
[(, FastMath, ., abs, (, x, ), ,, FastMath, ., abs, (, y, ), ), ;, final, double, relativeDifference, =]
[(, x, ), ,, FastMath, ., abs, (, y, ), ), ;, final, double, relativeDifference, =, FastMath, ., abs, (]
[(, x, ), ,, FastMath, ., abs, (, y, ), ), ;, final, double, relativeDifference, =, FastMath, ., abs, (]
[x, ), ,, FastMath, ., abs, (, y, ), ), ;, final, double, relativeDifference, =, FastMath, ., abs, (, (]
[x, ), ,, FastMath, ., abs, (, y, ), ), ;, final, double, relativeDifference, =, FastMath, ., abs, (, (]
[,, FastMath, ., abs, (, y, ), ), ;, final, double, relativeDifference, =, FastMath, ., abs, (, (, x, -]
[abs, (, y, ), ), ;, final, double, relativeDifference, =, FastMath, ., abs, (, (, x, -, y, ), /]
[), ;, final, double, relativeDifference, =, FastMath, ., abs, (, (, x, -, y, ), /, absoluteMax, ), ;, return]
[), ;, final, double, relativeDifference, =, FastMath, ., abs, (, (, x, -, y, ), /, absoluteMax, ), ;, return]
[final, double, relativeDifference, =, FastMath, ., abs, (, (, x, -, y, ), /, absoluteMax, ), ;, return, relativeDifference, <=]
[<=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, double, eps, ), {, return]
[<=, eps, ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, double, eps, ), {, return]
[;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, double, eps, ), {, return, equalsIncludingNaN, (]
[public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, double, eps, ), {, return, equalsIncludingNaN, (, x, ,]
[equalsIncludingNaN, (, double, x, ,, double, y, ,, double, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||]
[(, double, x, ,, double, y, ,, double, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (]
[(, double, x, ,, double, y, ,, double, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (]
[(, double, x, ,, double, y, ,, double, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (]
[double, y, ,, double, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (, FastMath, ., abs, (]
[double, y, ,, double, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (, FastMath, ., abs, (]
[,, double, eps, ), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (, FastMath, ., abs, (, y, -]
[), {, return, equalsIncludingNaN, (, x, ,, y, ), ||, (, FastMath, ., abs, (, y, -, x, ), <=]
[;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, int, maxUlps, ), {, long, xInt, =]
[;, }, public, static, boolean, equals, (, double, x, ,, double, y, ,, int, maxUlps, ), {, long, xInt, =]
[boolean, equals, (, double, x, ,, double, y, ,, int, maxUlps, ), {, long, xInt, =, Double, ., doubleToLongBits, (]
[double, y, ,, int, maxUlps, ), {, long, xInt, =, Double, ., doubleToLongBits, (, x, ), ;, long, yInt, =]
[double, y, ,, int, maxUlps, ), {, long, xInt, =, Double, ., doubleToLongBits, (, x, ), ;, long, yInt, =]
[maxUlps, ), {, long, xInt, =, Double, ., doubleToLongBits, (, x, ), ;, long, yInt, =, Double, ., doubleToLongBits, (]
[=, Double, ., doubleToLongBits, (, x, ), ;, long, yInt, =, Double, ., doubleToLongBits, (, y, ), ;, if, (]
[=, Double, ., doubleToLongBits, (, x, ), ;, long, yInt, =, Double, ., doubleToLongBits, (, y, ), ;, if, (]
[., doubleToLongBits, (, x, ), ;, long, yInt, =, Double, ., doubleToLongBits, (, y, ), ;, if, (, xInt, <]
[x, ), ;, long, yInt, =, Double, ., doubleToLongBits, (, y, ), ;, if, (, xInt, <, 0, ), {]
[;, long, yInt, =, Double, ., doubleToLongBits, (, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =]
[;, long, yInt, =, Double, ., doubleToLongBits, (, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =]
[yInt, =, Double, ., doubleToLongBits, (, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK, -]
[(, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK, -, xInt, ;, }, if, (]
[(, y, ), ;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK, -, xInt, ;, }, if, (]
[), ;, if, (, xInt, <, 0, ), {, xInt, =, SGN_MASK, -, xInt, ;, }, if, (, yInt, <]
[(, xInt, <, 0, ), {, xInt, =, SGN_MASK, -, xInt, ;, }, if, (, yInt, <, 0, ), {]
[<, 0, ), {, xInt, =, SGN_MASK, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =]
[<, 0, ), {, xInt, =, SGN_MASK, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =]
[), {, xInt, =, SGN_MASK, -, xInt, ;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK, -]
[;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK, -, yInt, ;, }, final, boolean, isEqual, =]
[;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK, -, yInt, ;, }, final, boolean, isEqual, =]
[;, }, if, (, yInt, <, 0, ), {, yInt, =, SGN_MASK, -, yInt, ;, }, final, boolean, isEqual, =]
[yInt, <, 0, ), {, yInt, =, SGN_MASK, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (]
[yInt, <, 0, ), {, yInt, =, SGN_MASK, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (]
[0, ), {, yInt, =, SGN_MASK, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -]
[yInt, =, SGN_MASK, -, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=]
[-, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return]
[-, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return]
[-, yInt, ;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return]
[;, }, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&]
[}, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !]
[}, final, boolean, isEqual, =, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !]
[=, FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !, Double, ., isNaN, (]
[abs, (, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !, Double, ., isNaN, (, x, ), &&]
[(, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !, Double, ., isNaN, (, x, ), &&, !]
[(, xInt, -, yInt, ), <=, maxUlps, ;, return, isEqual, &&, !, Double, ., isNaN, (, x, ), &&, !]
[), <=, maxUlps, ;, return, isEqual, &&, !, Double, ., isNaN, (, x, ), &&, !, Double, ., isNaN, (]
[y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, int, maxUlps, ), {, return]
[y, ), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, int, maxUlps, ), {, return]
[), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, int, maxUlps, ), {, return, (]
[), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, int, maxUlps, ), {, return, (]
[), ;, }, public, static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, int, maxUlps, ), {, return, (]
[static, boolean, equalsIncludingNaN, (, double, x, ,, double, y, ,, int, maxUlps, ), {, return, (, Double, ., isNaN, (]
[(, double, x, ,, double, y, ,, int, maxUlps, ), {, return, (, Double, ., isNaN, (, x, ), &&]
[(, double, x, ,, double, y, ,, int, maxUlps, ), {, return, (, Double, ., isNaN, (, x, ), &&]
[double, y, ,, int, maxUlps, ), {, return, (, Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (]
[maxUlps, ), {, return, (, Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), ), ||]
[{, return, (, Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), ), ||, equals, (]
[(, Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), ), ||, equals, (, x, ,]
[., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,]
[,, y, ,, maxUlps, ), ;, }, public, static, double, round, (, double, x, ,, int, scale, ), {, return]
[,, maxUlps, ), ;, }, public, static, double, round, (, double, x, ,, int, scale, ), {, return, round, (]
[), ;, }, public, static, double, round, (, double, x, ,, int, scale, ), {, return, round, (, x, ,]
[}, public, static, double, round, (, double, x, ,, int, scale, ), {, return, round, (, x, ,, scale, ,]
[}, public, static, double, round, (, double, x, ,, int, scale, ), {, return, round, (, x, ,, scale, ,]
[;, }, public, static, double, round, (, double, x, ,, int, scale, ,, int, roundingMethod, ), {, try, {, return]
[;, }, public, static, double, round, (, double, x, ,, int, scale, ,, int, roundingMethod, ), {, try, {, return]
[}, public, static, double, round, (, double, x, ,, int, scale, ,, int, roundingMethod, ), {, try, {, return, (]
[}, public, static, double, round, (, double, x, ,, int, scale, ,, int, roundingMethod, ), {, try, {, return, (]
[double, round, (, double, x, ,, int, scale, ,, int, roundingMethod, ), {, try, {, return, (, new, BigDecimal, (]
[double, round, (, double, x, ,, int, scale, ,, int, roundingMethod, ), {, try, {, return, (, new, BigDecimal, (]
[x, ,, int, scale, ,, int, roundingMethod, ), {, try, {, return, (, new, BigDecimal, (, Double, ., toString, (]
[roundingMethod, ), {, try, {, return, (, new, BigDecimal, (, Double, ., toString, (, x, ), ), ., setScale, (]
[{, try, {, return, (, new, BigDecimal, (, Double, ., toString, (, x, ), ), ., setScale, (, scale, ,]
[(, scale, ,, roundingMethod, ), ), ., doubleValue, (, ), ;, }, catch, (, NumberFormatException, ex, ), {, if, (]
[(, scale, ,, roundingMethod, ), ), ., doubleValue, (, ), ;, }, catch, (, NumberFormatException, ex, ), {, if, (]
[), ), ., doubleValue, (, ), ;, }, catch, (, NumberFormatException, ex, ), {, if, (, Double, ., isInfinite, (]
[), ;, }, catch, (, NumberFormatException, ex, ), {, if, (, Double, ., isInfinite, (, x, ), ), {, return]
[ex, ), {, if, (, Double, ., isInfinite, (, x, ), ), {, return, x, ;, }, else, {, return]
[ex, ), {, if, (, Double, ., isInfinite, (, x, ), ), {, return, x, ;, }, else, {, return]
[Double, ., NaN, ;, }, }, }, public, static, float, round, (, float, x, ,, int, scale, ), {, return]
[NaN, ;, }, }, }, public, static, float, round, (, float, x, ,, int, scale, ), {, return, round, (]
[}, }, }, public, static, float, round, (, float, x, ,, int, scale, ), {, return, round, (, x, ,]
[}, public, static, float, round, (, float, x, ,, int, scale, ), {, return, round, (, x, ,, scale, ,]
[}, public, static, float, round, (, float, x, ,, int, scale, ), {, return, round, (, x, ,, scale, ,]
[round, (, float, x, ,, int, scale, ,, int, roundingMethod, ), throws, MathArithmeticException, ,, MathIllegalArgumentException, {, final, float, sign, =]
[round, (, float, x, ,, int, scale, ,, int, roundingMethod, ), throws, MathArithmeticException, ,, MathIllegalArgumentException, {, final, float, sign, =]
[,, int, scale, ,, int, roundingMethod, ), throws, MathArithmeticException, ,, MathIllegalArgumentException, {, final, float, sign, =, FastMath, ., copySign, (]
[scale, ,, int, roundingMethod, ), throws, MathArithmeticException, ,, MathIllegalArgumentException, {, final, float, sign, =, FastMath, ., copySign, (, 1f, ,]
[,, MathIllegalArgumentException, {, final, float, sign, =, FastMath, ., copySign, (, 1f, ,, x, ), ;, final, float, factor, =]
[,, MathIllegalArgumentException, {, final, float, sign, =, FastMath, ., copySign, (, 1f, ,, x, ), ;, final, float, factor, =]
[final, float, sign, =, FastMath, ., copySign, (, 1f, ,, x, ), ;, final, float, factor, =, (, float, )]
[final, float, sign, =, FastMath, ., copySign, (, 1f, ,, x, ), ;, final, float, factor, =, (, float, )]
[FastMath, ., copySign, (, 1f, ,, x, ), ;, final, float, factor, =, (, float, ), FastMath, ., pow, (]
[copySign, (, 1f, ,, x, ), ;, final, float, factor, =, (, float, ), FastMath, ., pow, (, 10.0f, ,]
[,, x, ), ;, final, float, factor, =, (, float, ), FastMath, ., pow, (, 10.0f, ,, scale, ), *]
[;, final, float, factor, =, (, float, ), FastMath, ., pow, (, 10.0f, ,, scale, ), *, sign, ;, return]
[;, final, float, factor, =, (, float, ), FastMath, ., pow, (, 10.0f, ,, scale, ), *, sign, ;, return]
[factor, =, (, float, ), FastMath, ., pow, (, 10.0f, ,, scale, ), *, sign, ;, return, (, float, )]
[(, float, ), FastMath, ., pow, (, 10.0f, ,, scale, ), *, sign, ;, return, (, float, ), roundUnscaled, (]
[(, float, ), FastMath, ., pow, (, 10.0f, ,, scale, ), *, sign, ;, return, (, float, ), roundUnscaled, (]
[), FastMath, ., pow, (, 10.0f, ,, scale, ), *, sign, ;, return, (, float, ), roundUnscaled, (, x, *]
[., pow, (, 10.0f, ,, scale, ), *, sign, ;, return, (, float, ), roundUnscaled, (, x, *, factor, ,]
[(, 10.0f, ,, scale, ), *, sign, ;, return, (, float, ), roundUnscaled, (, x, *, factor, ,, sign, ,]
[scale, ), *, sign, ;, return, (, float, ), roundUnscaled, (, x, *, factor, ,, sign, ,, roundingMethod, ), /]
[static, double, roundUnscaled, (, double, unscaled, ,, double, sign, ,, int, roundingMethod, ), throws, MathArithmeticException, ,, MathIllegalArgumentException, {, switch, (]
[double, unscaled, ,, double, sign, ,, int, roundingMethod, ), throws, MathArithmeticException, ,, MathIllegalArgumentException, {, switch, (, roundingMethod, ), {, case]
[double, unscaled, ,, double, sign, ,, int, roundingMethod, ), throws, MathArithmeticException, ,, MathIllegalArgumentException, {, switch, (, roundingMethod, ), {, case]
[int, roundingMethod, ), throws, MathArithmeticException, ,, MathIllegalArgumentException, {, switch, (, roundingMethod, ), {, case, BigDecimal, ., ROUND_CEILING, :, if, (]
[int, roundingMethod, ), throws, MathArithmeticException, ,, MathIllegalArgumentException, {, switch, (, roundingMethod, ), {, case, BigDecimal, ., ROUND_CEILING, :, if, (]
[), throws, MathArithmeticException, ,, MathIllegalArgumentException, {, switch, (, roundingMethod, ), {, case, BigDecimal, ., ROUND_CEILING, :, if, (, sign, ==]
[throws, MathArithmeticException, ,, MathIllegalArgumentException, {, switch, (, roundingMethod, ), {, case, BigDecimal, ., ROUND_CEILING, :, if, (, sign, ==, -]
[MathIllegalArgumentException, {, switch, (, roundingMethod, ), {, case, BigDecimal, ., ROUND_CEILING, :, if, (, sign, ==, -, 1, ), {]
[switch, (, roundingMethod, ), {, case, BigDecimal, ., ROUND_CEILING, :, if, (, sign, ==, -, 1, ), {, unscaled, =]
[switch, (, roundingMethod, ), {, case, BigDecimal, ., ROUND_CEILING, :, if, (, sign, ==, -, 1, ), {, unscaled, =]
[{, case, BigDecimal, ., ROUND_CEILING, :, if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., floor, (]
[{, case, BigDecimal, ., ROUND_CEILING, :, if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., floor, (]
[ROUND_CEILING, :, if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (]
[if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,]
[if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,]
[=, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, else, {]
[., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, else, {, unscaled, =]
[., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, else, {, unscaled, =]
[., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (]
[., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (]
[,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (]
[., NEGATIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,]
[., NEGATIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,]
[FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, break, ;, case]
[FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, break, ;, case]
[FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_DOWN, :]
[nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_DOWN, :, unscaled, =]
[nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_DOWN, :, unscaled, =]
[Double, ., POSITIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_DOWN, :, unscaled, =, FastMath, ., floor, (]
[Double, ., POSITIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_DOWN, :, unscaled, =, FastMath, ., floor, (]
[), ;, }, break, ;, case, BigDecimal, ., ROUND_DOWN, :, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (]
[}, break, ;, case, BigDecimal, ., ROUND_DOWN, :, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,]
[}, break, ;, case, BigDecimal, ., ROUND_DOWN, :, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,]
[=, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, break, ;, case]
[=, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, break, ;, case]
[., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, break, ;, case, BigDecimal, ., ROUND_FLOOR, :, if, (]
[., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, break, ;, case, BigDecimal, ., ROUND_FLOOR, :, if, (]
[(, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, break, ;, case, BigDecimal, ., ROUND_FLOOR, :, if, (, sign, ==]
[unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, break, ;, case, BigDecimal, ., ROUND_FLOOR, :, if, (, sign, ==, -]
[., NEGATIVE_INFINITY, ), ), ;, break, ;, case, BigDecimal, ., ROUND_FLOOR, :, if, (, sign, ==, -, 1, ), {]
[), ), ;, break, ;, case, BigDecimal, ., ROUND_FLOOR, :, if, (, sign, ==, -, 1, ), {, unscaled, =]
[), ), ;, break, ;, case, BigDecimal, ., ROUND_FLOOR, :, if, (, sign, ==, -, 1, ), {, unscaled, =]
[;, case, BigDecimal, ., ROUND_FLOOR, :, if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., ceil, (]
[;, case, BigDecimal, ., ROUND_FLOOR, :, if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., ceil, (]
[ROUND_FLOOR, :, if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (]
[if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,]
[if, (, sign, ==, -, 1, ), {, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,]
[=, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, else, {]
[., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, else, {, unscaled, =]
[., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, else, {, unscaled, =]
[., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., floor, (]
[., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., floor, (]
[,, Double, ., POSITIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (]
[., POSITIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,]
[., POSITIVE_INFINITY, ), ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,]
[FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, break, ;, case]
[FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, break, ;, case]
[., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_HALF_DOWN, :, {]
[(, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_HALF_DOWN, :, {, unscaled, =]
[(, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_HALF_DOWN, :, {, unscaled, =]
[., NEGATIVE_INFINITY, ), ), ;, }, break, ;, case, BigDecimal, ., ROUND_HALF_DOWN, :, {, unscaled, =, FastMath, ., nextAfter, (]
[), ), ;, }, break, ;, case, BigDecimal, ., ROUND_HALF_DOWN, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,]
[), ), ;, }, break, ;, case, BigDecimal, ., ROUND_HALF_DOWN, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,]
[., ROUND_HALF_DOWN, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ;, double, fraction, =]
[., ROUND_HALF_DOWN, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ;, double, fraction, =]
[:, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ;, double, fraction, =, unscaled, -]
[:, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ;, double, fraction, =, unscaled, -]
[FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (]
[,, Double, ., NEGATIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (]
[,, Double, ., NEGATIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (]
[., NEGATIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >]
[;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, ), {]
[fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, ), {, unscaled, =]
[fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, ), {, unscaled, =]
[FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (]
[;, if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {]
[(, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =]
[(, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =]
[), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (]
[unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case]
[unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case]
[FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_EVEN, :, {, double, fraction, =]
[FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_EVEN, :, {, double, fraction, =]
[floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_EVEN, :, {, double, fraction, =, unscaled, -]
[floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_EVEN, :, {, double, fraction, =, unscaled, -]
[;, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_EVEN, :, {, double, fraction, =, unscaled, -, FastMath, ., floor, (]
[case, BigDecimal, ., ROUND_HALF_EVEN, :, {, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (]
[case, BigDecimal, ., ROUND_HALF_EVEN, :, {, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (]
[., ROUND_HALF_EVEN, :, {, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >]
[{, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, ), {]
[fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, ), {, unscaled, =]
[fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, ), {, unscaled, =]
[FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (]
[if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, if, (]
[if, (, fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, if, (]
[fraction, >, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, if, (, fraction, <]
[), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, if, (, fraction, <, 0.5, ), {]
[unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, if, (, fraction, <, 0.5, ), {, unscaled, =]
[unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, if, (, fraction, <, 0.5, ), {, unscaled, =]
[ceil, (, unscaled, ), ;, }, else, if, (, fraction, <, 0.5, ), {, unscaled, =, FastMath, ., floor, (]
[(, fraction, <, 0.5, ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, if, (]
[(, fraction, <, 0.5, ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, if, (]
[(, fraction, <, 0.5, ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, if, (]
[(, fraction, <, 0.5, ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, if, (]
[), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, if, (, FastMath, ., floor, (]
[=, FastMath, ., floor, (, unscaled, ), ;, }, else, {, if, (, FastMath, ., floor, (, unscaled, ), /]
[., floor, (, unscaled, ), ;, }, else, {, if, (, FastMath, ., floor, (, unscaled, ), /, 2.0, ==]
[., floor, (, unscaled, ), ;, }, else, {, if, (, FastMath, ., floor, (, unscaled, ), /, 2.0, ==]
[), ;, }, else, {, if, (, FastMath, ., floor, (, unscaled, ), /, 2.0, ==, FastMath, ., floor, (]
[), ;, }, else, {, if, (, FastMath, ., floor, (, unscaled, ), /, 2.0, ==, FastMath, ., floor, (]
[), ;, }, else, {, if, (, FastMath, ., floor, (, unscaled, ), /, 2.0, ==, FastMath, ., floor, (]
[{, if, (, FastMath, ., floor, (, unscaled, ), /, 2.0, ==, FastMath, ., floor, (, Math, ., floor, (]
[FastMath, ., floor, (, unscaled, ), /, 2.0, ==, FastMath, ., floor, (, Math, ., floor, (, unscaled, ), /]
[unscaled, ), /, 2.0, ==, FastMath, ., floor, (, Math, ., floor, (, unscaled, ), /, 2.0, ), ), {]
[/, 2.0, ==, FastMath, ., floor, (, Math, ., floor, (, unscaled, ), /, 2.0, ), ), {, unscaled, =]
[/, 2.0, ==, FastMath, ., floor, (, Math, ., floor, (, unscaled, ), /, 2.0, ), ), {, unscaled, =]
[., floor, (, Math, ., floor, (, unscaled, ), /, 2.0, ), ), {, unscaled, =, FastMath, ., floor, (]
[(, unscaled, ), /, 2.0, ), ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {]
[), /, 2.0, ), ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, unscaled, =]
[), /, 2.0, ), ), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, unscaled, =]
[), {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., ceil, (]
[), ;, }, else, {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, }, break, ;, }, case]
[), ;, }, else, {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, }, break, ;, }, case]
[unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_UP, :, {]
[FastMath, ., ceil, (, unscaled, ), ;, }, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_UP, :, {, unscaled, =]
[FastMath, ., ceil, (, unscaled, ), ;, }, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_UP, :, {, unscaled, =]
[unscaled, ), ;, }, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_UP, :, {, unscaled, =, FastMath, ., nextAfter, (]
[;, }, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_UP, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,]
[;, }, }, break, ;, }, case, BigDecimal, ., ROUND_HALF_UP, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,]
[., ROUND_HALF_UP, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ;, double, fraction, =]
[., ROUND_HALF_UP, :, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ;, double, fraction, =]
[:, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ;, double, fraction, =, unscaled, -]
[:, {, unscaled, =, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ;, double, fraction, =, unscaled, -]
[FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (]
[,, Double, ., POSITIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (]
[,, Double, ., POSITIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (]
[., POSITIVE_INFINITY, ), ;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >=]
[;, double, fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >=, 0.5, ), {]
[fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >=, 0.5, ), {, unscaled, =]
[fraction, =, unscaled, -, FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >=, 0.5, ), {, unscaled, =]
[FastMath, ., floor, (, unscaled, ), ;, if, (, fraction, >=, 0.5, ), {, unscaled, =, FastMath, ., ceil, (]
[;, if, (, fraction, >=, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {]
[(, fraction, >=, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =]
[(, fraction, >=, 0.5, ), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =]
[), {, unscaled, =, FastMath, ., ceil, (, unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (]
[unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case]
[unscaled, ), ;, }, else, {, unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case]
[unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, ., ROUND_UNNECESSARY, :, if, (]
[unscaled, =, FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, ., ROUND_UNNECESSARY, :, if, (]
[FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, ., ROUND_UNNECESSARY, :, if, (, unscaled, !=]
[FastMath, ., floor, (, unscaled, ), ;, }, break, ;, }, case, BigDecimal, ., ROUND_UNNECESSARY, :, if, (, unscaled, !=]
[unscaled, ), ;, }, break, ;, }, case, BigDecimal, ., ROUND_UNNECESSARY, :, if, (, unscaled, !=, FastMath, ., floor, (]
[;, }, case, BigDecimal, ., ROUND_UNNECESSARY, :, if, (, unscaled, !=, FastMath, ., floor, (, unscaled, ), ), {, throw]
[unscaled, !=, FastMath, ., floor, (, unscaled, ), ), {, throw, new, MathArithmeticException, (, ), ;, }, break, ;, case]
[unscaled, !=, FastMath, ., floor, (, unscaled, ), ), {, throw, new, MathArithmeticException, (, ), ;, }, break, ;, case]
[floor, (, unscaled, ), ), {, throw, new, MathArithmeticException, (, ), ;, }, break, ;, case, BigDecimal, ., ROUND_UP, :]
[unscaled, ), ), {, throw, new, MathArithmeticException, (, ), ;, }, break, ;, case, BigDecimal, ., ROUND_UP, :, unscaled, =]
[unscaled, ), ), {, throw, new, MathArithmeticException, (, ), ;, }, break, ;, case, BigDecimal, ., ROUND_UP, :, unscaled, =]
[throw, new, MathArithmeticException, (, ), ;, }, break, ;, case, BigDecimal, ., ROUND_UP, :, unscaled, =, FastMath, ., ceil, (]
[throw, new, MathArithmeticException, (, ), ;, }, break, ;, case, BigDecimal, ., ROUND_UP, :, unscaled, =, FastMath, ., ceil, (]
[), ;, }, break, ;, case, BigDecimal, ., ROUND_UP, :, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (]
[}, break, ;, case, BigDecimal, ., ROUND_UP, :, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,]
[}, break, ;, case, BigDecimal, ., ROUND_UP, :, unscaled, =, FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,]
[., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, break, ;, default, :, throw]
[FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (]
[FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (]
[unscaled, ,, Double, ., POSITIVE_INFINITY, ), ), ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,]
[Double, ., POSITIVE_INFINITY, ), ), ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,]
[POSITIVE_INFINITY, ), ), ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING", ,]
[POSITIVE_INFINITY, ), ), ;, break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING", ,]
[break, ;, default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING, ,]
[default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING, ,, "ROUND_DOWN", ,]
[default, :, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING, ,, "ROUND_DOWN", ,]
[MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING, ,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,]
[LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING, ,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,]
[LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING, ,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,]
[roundingMethod, ,, "ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING, ,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,]
["ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING, ,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,]
["ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING, ,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,]
[ROUND_CEILING, ,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,]
["ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,]
["ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,]
[ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,]
["ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,]
["ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,]
[ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,]
["ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,]
["ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,]
[ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,, BigDecimal, ., ROUND_UNNECESSARY, ,]
["ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,, BigDecimal, ., ROUND_UNNECESSARY, ,, "ROUND_UP", ,]
["ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,, BigDecimal, ., ROUND_UNNECESSARY, ,, "ROUND_UP", ,]
[,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,, BigDecimal, ., ROUND_UNNECESSARY, ,, "ROUND_UP", ,, BigDecimal, ., ROUND_UP, ), ;, }, return]
[), ;, }, return, unscaled, ;, }, public, static, double, representableDelta, (, double, x, ,, double, originalDelta, ), {, return]
[), ;, }, return, unscaled, ;, }, public, static, double, representableDelta, (, double, x, ,, double, originalDelta, ), {, return]
[), ;, }, return, unscaled, ;, }, public, static, double, representableDelta, (, double, x, ,, double, originalDelta, ), {, return]
[}, return, unscaled, ;, }, public, static, double, representableDelta, (, double, x, ,, double, originalDelta, ), {, return, x, +]
[unscaled, ;, }, public, static, double, representableDelta, (, double, x, ,, double, originalDelta, ), {, return, x, +, originalDelta, -]
