[,, true, ), ;, }, public, StorelessCovariance, (, final, int, dim, ,, final, boolean, biasCorrected, ), {, dimension, =, dim]
[), ;, }, public, StorelessCovariance, (, final, int, dim, ,, final, boolean, biasCorrected, ), {, dimension, =, dim, ;, covMatrix]
[=, dim, ;, covMatrix, =, new, StorelessBivariateCovariance, [, dimension, *, (, dimension, +, 1, ), /, 2, ], ;, initializeMatrix]
[;, covMatrix, =, new, StorelessBivariateCovariance, [, dimension, *, (, dimension, +, 1, ), /, 2, ], ;, initializeMatrix, (, biasCorrected]
[=, new, StorelessBivariateCovariance, [, dimension, *, (, dimension, +, 1, ), /, 2, ], ;, initializeMatrix, (, biasCorrected, ), ;]
[;, initializeMatrix, (, biasCorrected, ), ;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {, for, (, int, i]
[], ;, initializeMatrix, (, biasCorrected, ), ;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {, for, (, int]
[/, 2, ], ;, initializeMatrix, (, biasCorrected, ), ;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {, for]
[*, (, dimension, +, 1, ), /, 2, ], ;, initializeMatrix, (, biasCorrected, ), ;, }, private, void, initializeMatrix, (]
[/, 2, ], ;, initializeMatrix, (, biasCorrected, ), ;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {, for]
[), /, 2, ], ;, initializeMatrix, (, biasCorrected, ), ;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {]
[+, 1, ), /, 2, ], ;, initializeMatrix, (, biasCorrected, ), ;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected]
[), /, 2, ], ;, initializeMatrix, (, biasCorrected, ), ;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {]
[], ;, initializeMatrix, (, biasCorrected, ), ;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {, for, (, int]
[;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {, for, (, int, i, =, 0, ;, i, <]
[), ;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {, for, (, int, i, =, 0, ;, i]
[;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {]
[<, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, setElement, (, i]
[++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, setElement, (]
[;, j, <, dimension, ;, j, ++, ), {, setElement, (, i, ,, j, ,, new, StorelessBivariateCovariance, (, biasCorrected, )]
[;, j, ++, ), {, setElement, (, i, ,, j, ,, new, StorelessBivariateCovariance, (, biasCorrected, ), ), ;, }, }]
[<, dimension, ;, j, ++, ), {, setElement, (, i, ,, j, ,, new, StorelessBivariateCovariance, (, biasCorrected, ), ), ;]
[;, j, ++, ), {, setElement, (, i, ,, j, ,, new, StorelessBivariateCovariance, (, biasCorrected, ), ), ;, }, }]
[), {, setElement, (, i, ,, j, ,, new, StorelessBivariateCovariance, (, biasCorrected, ), ), ;, }, }, }, private, int]
[++, ), {, setElement, (, i, ,, j, ,, new, StorelessBivariateCovariance, (, biasCorrected, ), ), ;, }, }, }, private]
[;, }, }, }, private, int, indexOf, (, final, int, i, ,, final, int, j, ), {, return, j, <]
[,, j, ,, new, StorelessBivariateCovariance, (, biasCorrected, ), ), ;, }, }, }, private, int, indexOf, (, final, int, i]
[,, new, StorelessBivariateCovariance, (, biasCorrected, ), ), ;, }, }, }, private, int, indexOf, (, final, int, i, ,, final]
[), ;, }, }, }, private, int, indexOf, (, final, int, i, ,, final, int, j, ), {, return, j]
[), ), ;, }, }, }, private, int, indexOf, (, final, int, i, ,, final, int, j, ), {, return]
[;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {, return, covMatrix, [, indexOf, (]
[?, i, *, (, i, +, 1, ), /, 2, +, j, :, j, *, (, j, +, 1, )]
[<, i, ?, i, *, (, i, +, 1, ), /, 2, +, j, :, j, *, (, j, +]
[?, i, *, (, i, +, 1, ), /, 2, +, j, :, j, *, (, j, +, 1, )]
[:, j, *, (, j, +, 1, ), /, 2, +, i, ;, }, private, StorelessBivariateCovariance, getElement, (, final, int]
[+, j, :, j, *, (, j, +, 1, ), /, 2, +, i, ;, }, private, StorelessBivariateCovariance, getElement, (]
[/, 2, +, j, :, j, *, (, j, +, 1, ), /, 2, +, i, ;, }, private, StorelessBivariateCovariance]
[*, (, i, +, 1, ), /, 2, +, j, :, j, *, (, j, +, 1, ), /, 2]
[/, 2, +, j, :, j, *, (, j, +, 1, ), /, 2, +, i, ;, }, private, StorelessBivariateCovariance]
[), /, 2, +, j, :, j, *, (, j, +, 1, ), /, 2, +, i, ;, }, private]
[+, 1, ), /, 2, +, j, :, j, *, (, j, +, 1, ), /, 2, +, i, ;]
[), /, 2, +, j, :, j, *, (, j, +, 1, ), /, 2, +, i, ;, }, private]
[+, j, :, j, *, (, j, +, 1, ), /, 2, +, i, ;, }, private, StorelessBivariateCovariance, getElement, (]
[:, j, *, (, j, +, 1, ), /, 2, +, i, ;, }, private, StorelessBivariateCovariance, getElement, (, final, int]
[;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {, return, covMatrix, [, indexOf, (]
[+, i, ;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {, return, covMatrix, []
[/, 2, +, i, ;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {, return]
[*, (, j, +, 1, ), /, 2, +, i, ;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,]
[/, 2, +, i, ;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {, return]
[), /, 2, +, i, ;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {]
[+, 1, ), /, 2, +, i, ;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j]
[), /, 2, +, i, ;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {]
[+, i, ;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {, return, covMatrix, []
[;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {, return, covMatrix, [, indexOf, (]
[;, }, private, void, setElement, (, final, int, i, ,, final, int, j, ,, final, StorelessBivariateCovariance, cov, ), {, covMatrix]
[[, indexOf, (, i, ,, j, ), ], ;, }, private, void, setElement, (, final, int, i, ,, final, int]
[], ;, }, private, void, setElement, (, final, int, i, ,, final, int, j, ,, final, StorelessBivariateCovariance, cov, ), {]
[,, j, ), ], ;, }, private, void, setElement, (, final, int, i, ,, final, int, j, ,, final, StorelessBivariateCovariance]
[), ], ;, }, private, void, setElement, (, final, int, i, ,, final, int, j, ,, final, StorelessBivariateCovariance, cov, )]
[=, cov, ;, }, public, double, getCovariance, (, final, int, xIndex, ,, final, int, yIndex, ), throws, NumberIsTooSmallException, {, return]
[[, indexOf, (, i, ,, j, ), ], =, cov, ;, }, public, double, getCovariance, (, final, int, xIndex, ,]
[], =, cov, ;, }, public, double, getCovariance, (, final, int, xIndex, ,, final, int, yIndex, ), throws, NumberIsTooSmallException, {]
[,, j, ), ], =, cov, ;, }, public, double, getCovariance, (, final, int, xIndex, ,, final, int, yIndex, )]
[), ], =, cov, ;, }, public, double, getCovariance, (, final, int, xIndex, ,, final, int, yIndex, ), throws, NumberIsTooSmallException]
[;, }, public, double, getCovariance, (, final, int, xIndex, ,, final, int, yIndex, ), throws, NumberIsTooSmallException, {, return, getElement, (]
[;, }, public, void, increment, (, final, double, [, ], data, ), throws, DimensionMismatchException, {, int, length, =, data, .]
[., getResult, (, ), ;, }, public, void, increment, (, final, double, [, ], data, ), throws, DimensionMismatchException, {, int]
[,, yIndex, ), ., getResult, (, ), ;, }, public, void, increment, (, final, double, [, ], data, ), throws]
[), ., getResult, (, ), ;, }, public, void, increment, (, final, double, [, ], data, ), throws, DimensionMismatchException, {]
[;, if, (, length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, length, ,, dimension, ), ;, }, for, (]
[., length, ;, if, (, length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, length, ,, dimension, ), ;, }]
[), {, throw, new, DimensionMismatchException, (, length, ,, dimension, ), ;, }, for, (, int, i, =, 0, ;, i]
[!=, dimension, ), {, throw, new, DimensionMismatchException, (, length, ,, dimension, ), ;, }, for, (, int, i, =, 0]
[), {, throw, new, DimensionMismatchException, (, length, ,, dimension, ), ;, }, for, (, int, i, =, 0, ;, i]
[;, }, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, for, (, int]
[,, dimension, ), ;, }, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, for, (]
[;, i, <, length, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, length, ;]
[;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, length, ;, j, ++, ), {]
[<, length, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, length, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, length, ;, j, ++, ), {]
[), {, for, (, int, j, =, i, ;, j, <, length, ;, j, ++, ), {, getElement, (, i]
[++, ), {, for, (, int, j, =, i, ;, j, <, length, ;, j, ++, ), {, getElement, (]
[;, j, <, length, ;, j, ++, ), {, getElement, (, i, ,, j, ), ., increment, (, data, []
[;, j, ++, ), {, getElement, (, i, ,, j, ), ., increment, (, data, [, i, ], ,, data]
[<, length, ;, j, ++, ), {, getElement, (, i, ,, j, ), ., increment, (, data, [, i, ]]
[;, j, ++, ), {, getElement, (, i, ,, j, ), ., increment, (, data, [, i, ], ,, data]
[), {, getElement, (, i, ,, j, ), ., increment, (, data, [, i, ], ,, data, [, j, ]]
[++, ), {, getElement, (, i, ,, j, ), ., increment, (, data, [, i, ], ,, data, [, j]
[;, }, }, }, public, void, append, (, StorelessCovariance, sc, ), throws, DimensionMismatchException, {, if, (, sc, ., dimension, !=]
[., increment, (, data, [, i, ], ,, data, [, j, ], ), ;, }, }, }, public, void, append]
[,, j, ), ., increment, (, data, [, i, ], ,, data, [, j, ], ), ;, }, }, }]
[), ., increment, (, data, [, i, ], ,, data, [, j, ], ), ;, }, }, }, public, void]
[,, data, [, j, ], ), ;, }, }, }, public, void, append, (, StorelessCovariance, sc, ), throws, DimensionMismatchException, {]
[[, i, ], ,, data, [, j, ], ), ;, }, }, }, public, void, append, (, StorelessCovariance, sc, )]
[], ,, data, [, j, ], ), ;, }, }, }, public, void, append, (, StorelessCovariance, sc, ), throws, DimensionMismatchException]
[), ;, }, }, }, public, void, append, (, StorelessCovariance, sc, ), throws, DimensionMismatchException, {, if, (, sc, ., dimension]
[[, j, ], ), ;, }, }, }, public, void, append, (, StorelessCovariance, sc, ), throws, DimensionMismatchException, {, if, (]
[], ), ;, }, }, }, public, void, append, (, StorelessCovariance, sc, ), throws, DimensionMismatchException, {, if, (, sc, .]
[), {, throw, new, DimensionMismatchException, (, sc, ., dimension, ,, dimension, ), ;, }, for, (, int, i, =, 0]
[!=, dimension, ), {, throw, new, DimensionMismatchException, (, sc, ., dimension, ,, dimension, ), ;, }, for, (, int, i]
[., dimension, !=, dimension, ), {, throw, new, DimensionMismatchException, (, sc, ., dimension, ,, dimension, ), ;, }, for, (]
[), {, throw, new, DimensionMismatchException, (, sc, ., dimension, ,, dimension, ), ;, }, for, (, int, i, =, 0]
[;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int]
[,, dimension, ), ;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[., dimension, ,, dimension, ), ;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++]
[), ;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (]
[;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, dimension, ;]
[;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, dimension, ;, j, ++, ), {]
[<, dimension, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, dimension, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, dimension, ;, j, ++, ), {]
[), {, for, (, int, j, =, i, ;, j, <, dimension, ;, j, ++, ), {, getElement, (, i]
[++, ), {, for, (, int, j, =, i, ;, j, <, dimension, ;, j, ++, ), {, getElement, (]
[;, j, <, dimension, ;, j, ++, ), {, getElement, (, i, ,, j, ), ., append, (, sc, .]
[;, j, ++, ), {, getElement, (, i, ,, j, ), ., append, (, sc, ., getElement, (, i, ,]
[<, dimension, ;, j, ++, ), {, getElement, (, i, ,, j, ), ., append, (, sc, ., getElement, (]
[;, j, ++, ), {, getElement, (, i, ,, j, ), ., append, (, sc, ., getElement, (, i, ,]
[), {, getElement, (, i, ,, j, ), ., append, (, sc, ., getElement, (, i, ,, j, ), )]
[++, ), {, getElement, (, i, ,, j, ), ., append, (, sc, ., getElement, (, i, ,, j, )]
[;, }, }, }, @, Override, public, RealMatrix, getCovarianceMatrix, (, ), throws, NumberIsTooSmallException, {, return, MatrixUtils, ., createRealMatrix, (, getData]
[., append, (, sc, ., getElement, (, i, ,, j, ), ), ;, }, }, }, @, Override, public, RealMatrix]
[,, j, ), ., append, (, sc, ., getElement, (, i, ,, j, ), ), ;, }, }, }, @]
[), ., append, (, sc, ., getElement, (, i, ,, j, ), ), ;, }, }, }, @, Override, public]
[), ;, }, }, }, @, Override, public, RealMatrix, getCovarianceMatrix, (, ), throws, NumberIsTooSmallException, {, return, MatrixUtils, ., createRealMatrix, (]
[., getElement, (, i, ,, j, ), ), ;, }, }, }, @, Override, public, RealMatrix, getCovarianceMatrix, (, ), throws]
[,, j, ), ), ;, }, }, }, @, Override, public, RealMatrix, getCovarianceMatrix, (, ), throws, NumberIsTooSmallException, {, return, MatrixUtils]
[), ), ;, }, }, }, @, Override, public, RealMatrix, getCovarianceMatrix, (, ), throws, NumberIsTooSmallException, {, return, MatrixUtils, ., createRealMatrix]
[;, }, public, double, [, ], [, ], getData, (, ), throws, NumberIsTooSmallException, {, final, double, [, ], [, ]]
[., createRealMatrix, (, getData, (, ), ), ;, }, public, double, [, ], [, ], getData, (, ), throws, NumberIsTooSmallException]
[), ;, }, public, double, [, ], [, ], getData, (, ), throws, NumberIsTooSmallException, {, final, double, [, ], []
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int, j]
[], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int]
[;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {]
[<, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, data, [, i]
[++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, data, []
[;, j, <, dimension, ;, j, ++, ), {, data, [, i, ], [, j, ], =, getElement, (, i]
[;, j, ++, ), {, data, [, i, ], [, j, ], =, getElement, (, i, ,, j, ), .]
[<, dimension, ;, j, ++, ), {, data, [, i, ], [, j, ], =, getElement, (, i, ,, j]
[;, j, ++, ), {, data, [, i, ], [, j, ], =, getElement, (, i, ,, j, ), .]
[), {, data, [, i, ], [, j, ], =, getElement, (, i, ,, j, ), ., getResult, (, )]
[++, ), {, data, [, i, ], [, j, ], =, getElement, (, i, ,, j, ), ., getResult, (]
[=, getElement, (, i, ,, j, ), ., getResult, (, ), ;, }, }, return, data, ;, }, @, Override]
[[, j, ], =, getElement, (, i, ,, j, ), ., getResult, (, ), ;, }, }, return, data, ;]
[[, i, ], [, j, ], =, getElement, (, i, ,, j, ), ., getResult, (, ), ;, }, }]
[], [, j, ], =, getElement, (, i, ,, j, ), ., getResult, (, ), ;, }, }, return, data]
[], =, getElement, (, i, ,, j, ), ., getResult, (, ), ;, }, }, return, data, ;, }, @]
[;, }, }, return, data, ;, }, @, Override, public, int, getN, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException]
[., getResult, (, ), ;, }, }, return, data, ;, }, @, Override, public, int, getN, (, ), throws, MathUnsupportedOperationException]
[,, j, ), ., getResult, (, ), ;, }, }, return, data, ;, }, @, Override, public, int, getN, (]
[), ., getResult, (, ), ;, }, }, return, data, ;, }, @, Override, public, int, getN, (, ), throws]
[;, }, @, Override, public, int, getN, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, }]
[;, }, }]
