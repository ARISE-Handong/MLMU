[., List, ;, import, java, ., util, ., Set, ;, class, VariableReferenceCheck, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, UNDECLARED_REFERENCE, =]
[., List, ;, import, java, ., util, ., Set, ;, class, VariableReferenceCheck, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, UNDECLARED_REFERENCE, =]
[java, ., util, ., Set, ;, class, VariableReferenceCheck, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, UNDECLARED_REFERENCE, =, DiagnosticType, ., warning, (]
[util, ., Set, ;, class, VariableReferenceCheck, implements, HotSwapCompilerPass, {, static, final, DiagnosticType, UNDECLARED_REFERENCE, =, DiagnosticType, ., warning, (, "JSC_REFERENCE_BEFORE_DECLARE", ,]
[{, static, final, DiagnosticType, UNDECLARED_REFERENCE, =, DiagnosticType, ., warning, (, "JSC_REFERENCE_BEFORE_DECLARE", ,, "Variable referenced before declaration: {0}", ), ;, static, final, DiagnosticType, REDECLARED_VARIABLE, =]
[{, static, final, DiagnosticType, UNDECLARED_REFERENCE, =, DiagnosticType, ., warning, (, "JSC_REFERENCE_BEFORE_DECLARE", ,, "Variable referenced before declaration: {0}", ), ;, static, final, DiagnosticType, REDECLARED_VARIABLE, =]
[UNDECLARED_REFERENCE, =, DiagnosticType, ., warning, (, "JSC_REFERENCE_BEFORE_DECLARE", ,, "Variable referenced before declaration: {0}", ), ;, static, final, DiagnosticType, REDECLARED_VARIABLE, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_REFERENCE_BEFORE_DECLARE", ,, "Variable referenced before declaration: {0}", ), ;, static, final, DiagnosticType, REDECLARED_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_REDECLARED_VARIABLE", ,]
[;, static, final, DiagnosticType, REDECLARED_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_REDECLARED_VARIABLE", ,, "Redeclared variable: {0}", ), ;, static, final, DiagnosticType, AMBIGUOUS_FUNCTION_DECL, =]
[;, static, final, DiagnosticType, REDECLARED_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_REDECLARED_VARIABLE", ,, "Redeclared variable: {0}", ), ;, static, final, DiagnosticType, AMBIGUOUS_FUNCTION_DECL, =]
[REDECLARED_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_REDECLARED_VARIABLE", ,, "Redeclared variable: {0}", ), ;, static, final, DiagnosticType, AMBIGUOUS_FUNCTION_DECL, =, DiagnosticType, ., disabled, (]
[DiagnosticType, ., warning, (, "JSC_REDECLARED_VARIABLE", ,, "Redeclared variable: {0}", ), ;, static, final, DiagnosticType, AMBIGUOUS_FUNCTION_DECL, =, DiagnosticType, ., disabled, (, "AMBIGUOUS_FUNCTION_DECL", ,]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, checkLevel, ;, private, final, Set, <, BasicBlock, >, blocksWithDeclarations, =]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, checkLevel, ;, private, final, Set, <, BasicBlock, >, blocksWithDeclarations, =]
[BasicBlock, >, blocksWithDeclarations, =, Sets, ., newHashSet, (, ), ;, public, VariableReferenceCheck, (, AbstractCompiler, compiler, ,, CheckLevel, checkLevel, ), {]
[BasicBlock, >, blocksWithDeclarations, =, Sets, ., newHashSet, (, ), ;, public, VariableReferenceCheck, (, AbstractCompiler, compiler, ,, CheckLevel, checkLevel, ), {]
[Sets, ., newHashSet, (, ), ;, public, VariableReferenceCheck, (, AbstractCompiler, compiler, ,, CheckLevel, checkLevel, ), {, this, ., compiler, =]
[newHashSet, (, ), ;, public, VariableReferenceCheck, (, AbstractCompiler, compiler, ,, CheckLevel, checkLevel, ), {, this, ., compiler, =, compiler, ;]
[newHashSet, (, ), ;, public, VariableReferenceCheck, (, AbstractCompiler, compiler, ,, CheckLevel, checkLevel, ), {, this, ., compiler, =, compiler, ;]
[public, VariableReferenceCheck, (, AbstractCompiler, compiler, ,, CheckLevel, checkLevel, ), {, this, ., compiler, =, compiler, ;, this, ., checkLevel, =]
[=, checkLevel, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,]
[externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, ReferenceCheckingBehavior, (, ), ), ;]
[externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, ReferenceCheckingBehavior, (, ), ), ;]
[), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, ReferenceCheckingBehavior, (, ), ), ;, callback, ., process, (]
[ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, ReferenceCheckingBehavior, (, ), ), ;, callback, ., process, (, externs, ,]
[root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, ReferenceCollectingCallback, callback, =]
[}, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (]
[Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,]
[scriptRoot, ,, Node, originalRoot, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, ReferenceCheckingBehavior, (, ), ), ;]
[scriptRoot, ,, Node, originalRoot, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, ReferenceCheckingBehavior, (, ), ), ;]
[), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, ReferenceCheckingBehavior, (, ), ), ;, callback, ., hotSwapScript, (]
[ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, ReferenceCheckingBehavior, (, ), ), ;, callback, ., hotSwapScript, (, scriptRoot, ,]
[Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, for, (, Iterator, <, Var, >, it, =]
[Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, for, (, Iterator, <, Var, >, it, =]
[Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, for, (, Iterator, <, Var, >, it, =]
[), {, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[), {, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[(, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;]
[;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, checkVar, (]
[., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, checkVar, (, t, ,]
[(, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, checkVar, (, t, ,, v, ,]
[(, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, checkVar, (, t, ,, v, ,]
[(, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, checkVar, (, t, ,, v, ,]
[{, Var, v, =, it, ., next, (, ), ;, checkVar, (, t, ,, v, ,, referenceMap, ., getReferences, (]
[;, }, }, private, void, checkVar, (, NodeTraversal, t, ,, Var, v, ,, List, <, Reference, >, references, ), {]
[;, }, }, private, void, checkVar, (, NodeTraversal, t, ,, Var, v, ,, List, <, Reference, >, references, ), {]
[,, Var, v, ,, List, <, Reference, >, references, ), {, blocksWithDeclarations, ., clear, (, ), ;, boolean, isDeclaredInScope, =]
[<, Reference, >, references, ), {, blocksWithDeclarations, ., clear, (, ), ;, boolean, isDeclaredInScope, =, false, ;, boolean, isUnhoistedNamedFunction, =]
[{, blocksWithDeclarations, ., clear, (, ), ;, boolean, isDeclaredInScope, =, false, ;, boolean, isUnhoistedNamedFunction, =, false, ;, Reference, hoistedFn, =]
[boolean, isDeclaredInScope, =, false, ;, boolean, isUnhoistedNamedFunction, =, false, ;, Reference, hoistedFn, =, null, ;, for, (, Reference, reference, :]
[boolean, isUnhoistedNamedFunction, =, false, ;, Reference, hoistedFn, =, null, ;, for, (, Reference, reference, :, references, ), {, if, (]
[boolean, isUnhoistedNamedFunction, =, false, ;, Reference, hoistedFn, =, null, ;, for, (, Reference, reference, :, references, ), {, if, (]
[=, null, ;, for, (, Reference, reference, :, references, ), {, if, (, reference, ., isHoistedFunction, (, ), ), {]
[=, null, ;, for, (, Reference, reference, :, references, ), {, if, (, reference, ., isHoistedFunction, (, ), ), {]
[(, Reference, reference, :, references, ), {, if, (, reference, ., isHoistedFunction, (, ), ), {, blocksWithDeclarations, ., add, (]
[(, Reference, reference, :, references, ), {, if, (, reference, ., isHoistedFunction, (, ), ), {, blocksWithDeclarations, ., add, (]
[if, (, reference, ., isHoistedFunction, (, ), ), {, blocksWithDeclarations, ., add, (, reference, ., getBasicBlock, (, ), ), ;]
[reference, ., isHoistedFunction, (, ), ), {, blocksWithDeclarations, ., add, (, reference, ., getBasicBlock, (, ), ), ;, isDeclaredInScope, =]
[isHoistedFunction, (, ), ), {, blocksWithDeclarations, ., add, (, reference, ., getBasicBlock, (, ), ), ;, isDeclaredInScope, =, true, ;]
[), ), {, blocksWithDeclarations, ., add, (, reference, ., getBasicBlock, (, ), ), ;, isDeclaredInScope, =, true, ;, hoistedFn, =]
[., getBasicBlock, (, ), ), ;, isDeclaredInScope, =, true, ;, hoistedFn, =, reference, ;, break, ;, }, else, if, (]
[., getBasicBlock, (, ), ), ;, isDeclaredInScope, =, true, ;, hoistedFn, =, reference, ;, break, ;, }, else, if, (]
[), ;, isDeclaredInScope, =, true, ;, hoistedFn, =, reference, ;, break, ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (]
[), ;, isDeclaredInScope, =, true, ;, hoistedFn, =, reference, ;, break, ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (]
[), ;, isDeclaredInScope, =, true, ;, hoistedFn, =, reference, ;, break, ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (]
[}, else, if, (, NodeUtil, ., isFunctionDeclaration, (, reference, ., getNode, (, ), ., getParent, (, ), ), ), {]
[if, (, NodeUtil, ., isFunctionDeclaration, (, reference, ., getNode, (, ), ., getParent, (, ), ), ), {, isUnhoistedNamedFunction, =]
[(, ), ., getParent, (, ), ), ), {, isUnhoistedNamedFunction, =, true, ;, }, }, for, (, Reference, reference, :]
[), ), ), {, isUnhoistedNamedFunction, =, true, ;, }, }, for, (, Reference, reference, :, references, ), {, if, (]
[), ), ), {, isUnhoistedNamedFunction, =, true, ;, }, }, for, (, Reference, reference, :, references, ), {, if, (]
[), {, isUnhoistedNamedFunction, =, true, ;, }, }, for, (, Reference, reference, :, references, ), {, if, (, reference, ==]
[(, Reference, reference, :, references, ), {, if, (, reference, ==, hoistedFn, ), {, continue, ;, }, BasicBlock, basicBlock, =]
[(, Reference, reference, :, references, ), {, if, (, reference, ==, hoistedFn, ), {, continue, ;, }, BasicBlock, basicBlock, =]
[reference, ==, hoistedFn, ), {, continue, ;, }, BasicBlock, basicBlock, =, reference, ., getBasicBlock, (, ), ;, boolean, isDeclaration, =]
[reference, ==, hoistedFn, ), {, continue, ;, }, BasicBlock, basicBlock, =, reference, ., getBasicBlock, (, ), ;, boolean, isDeclaration, =]
[basicBlock, =, reference, ., getBasicBlock, (, ), ;, boolean, isDeclaration, =, reference, ., isDeclaration, (, ), ;, boolean, allowDupe, =]
[basicBlock, =, reference, ., getBasicBlock, (, ), ;, boolean, isDeclaration, =, reference, ., isDeclaration, (, ), ;, boolean, allowDupe, =]
[getBasicBlock, (, ), ;, boolean, isDeclaration, =, reference, ., isDeclaration, (, ), ;, boolean, allowDupe, =, SyntacticScopeCreator, ., hasDuplicateDeclarationSuppression, (]
[getBasicBlock, (, ), ;, boolean, isDeclaration, =, reference, ., isDeclaration, (, ), ;, boolean, allowDupe, =, SyntacticScopeCreator, ., hasDuplicateDeclarationSuppression, (]
[=, reference, ., isDeclaration, (, ), ;, boolean, allowDupe, =, SyntacticScopeCreator, ., hasDuplicateDeclarationSuppression, (, reference, ., getNode, (, ), ,]
[), ;, boolean, allowDupe, =, SyntacticScopeCreator, ., hasDuplicateDeclarationSuppression, (, reference, ., getNode, (, ), ,, v, ), ;, if, (]
[), ;, boolean, allowDupe, =, SyntacticScopeCreator, ., hasDuplicateDeclarationSuppression, (, reference, ., getNode, (, ), ,, v, ), ;, if, (]
[boolean, allowDupe, =, SyntacticScopeCreator, ., hasDuplicateDeclarationSuppression, (, reference, ., getNode, (, ), ,, v, ), ;, if, (, isDeclaration, &&]
[allowDupe, =, SyntacticScopeCreator, ., hasDuplicateDeclarationSuppression, (, reference, ., getNode, (, ), ,, v, ), ;, if, (, isDeclaration, &&, !]
[getNode, (, ), ,, v, ), ;, if, (, isDeclaration, &&, !, allowDupe, ), {, for, (, BasicBlock, declaredBlock, :]
[), ;, if, (, isDeclaration, &&, !, allowDupe, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (]
[), ;, if, (, isDeclaration, &&, !, allowDupe, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (]
[isDeclaration, &&, !, allowDupe, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, declaredBlock, ., provablyExecutesBefore, (]
[(, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =]
[(, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =]
[blocksWithDeclarations, ), {, if, (, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =, NodeUtil, ., getSourceName, (]
[blocksWithDeclarations, ), {, if, (, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =, NodeUtil, ., getSourceName, (]
[provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;]
[provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;]
[), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (]
[), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (]
[=, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (]
[., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,]
[., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,]
[(, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,]
[), ;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,]
[compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,, REDECLARED_VARIABLE, ,]
[compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,, REDECLARED_VARIABLE, ,]
[(, ), ,, checkLevel, ,, REDECLARED_VARIABLE, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (]
[(, ), ,, checkLevel, ,, REDECLARED_VARIABLE, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (]
[(, ), ,, checkLevel, ,, REDECLARED_VARIABLE, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (]
[,, checkLevel, ,, REDECLARED_VARIABLE, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (, isUnhoistedNamedFunction, &&]
[checkLevel, ,, REDECLARED_VARIABLE, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (, isUnhoistedNamedFunction, &&, !]
[REDECLARED_VARIABLE, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (, isUnhoistedNamedFunction, &&, !, isDeclaration, &&]
[break, ;, }, }, }, if, (, isUnhoistedNamedFunction, &&, !, isDeclaration, &&, isDeclaredInScope, ), {, for, (, BasicBlock, declaredBlock, :]
[if, (, isUnhoistedNamedFunction, &&, !, isDeclaration, &&, isDeclaredInScope, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (]
[(, isUnhoistedNamedFunction, &&, !, isDeclaration, &&, isDeclaredInScope, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, !]
[(, isUnhoistedNamedFunction, &&, !, isDeclaration, &&, isDeclaredInScope, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, !]
[isDeclaration, &&, isDeclaredInScope, ), {, for, (, BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, !, declaredBlock, ., provablyExecutesBefore, (]
[BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, !, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =]
[BasicBlock, declaredBlock, :, blocksWithDeclarations, ), {, if, (, !, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =]
[), {, if, (, !, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =, NodeUtil, ., getSourceName, (]
[), {, if, (, !, declaredBlock, ., provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =, NodeUtil, ., getSourceName, (]
[provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;]
[provablyExecutesBefore, (, basicBlock, ), ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;]
[), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (]
[), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (]
[=, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (]
[., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,]
[., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,]
[(, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,]
[), ;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, AMBIGUOUS_FUNCTION_DECL, ,]
[), ;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, AMBIGUOUS_FUNCTION_DECL, ,]
[., getNode, (, ), ,, AMBIGUOUS_FUNCTION_DECL, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (]
[., getNode, (, ), ,, AMBIGUOUS_FUNCTION_DECL, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (]
[getNode, (, ), ,, AMBIGUOUS_FUNCTION_DECL, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (, !]
[), ,, AMBIGUOUS_FUNCTION_DECL, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (, !, isDeclaration, &&]
[,, AMBIGUOUS_FUNCTION_DECL, ,, v, ., name, ), ), ;, break, ;, }, }, }, if, (, !, isDeclaration, &&, !]
[name, ), ), ;, break, ;, }, }, }, if, (, !, isDeclaration, &&, !, isDeclaredInScope, ), {, if, (]
[), ), ;, break, ;, }, }, }, if, (, !, isDeclaration, &&, !, isDeclaredInScope, ), {, if, (, !]
[), ), ;, break, ;, }, }, }, if, (, !, isDeclaration, &&, !, isDeclaredInScope, ), {, if, (, !]
[), ), ;, break, ;, }, }, }, if, (, !, isDeclaration, &&, !, isDeclaredInScope, ), {, if, (, !]
[isDeclaredInScope, ), {, if, (, !, reference, ., getNode, (, ), ., isFromExterns, (, ), ), {, Node, grandparent, =]
[isDeclaredInScope, ), {, if, (, !, reference, ., getNode, (, ), ., isFromExterns, (, ), ), {, Node, grandparent, =]
[getNode, (, ), ., isFromExterns, (, ), ), {, Node, grandparent, =, reference, ., getGrandparent, (, ), ;, if, (]
[getNode, (, ), ., isFromExterns, (, ), ), {, Node, grandparent, =, reference, ., getGrandparent, (, ), ;, if, (]
[getNode, (, ), ., isFromExterns, (, ), ), {, Node, grandparent, =, reference, ., getGrandparent, (, ), ;, if, (]
[), ), {, Node, grandparent, =, reference, ., getGrandparent, (, ), ;, if, (, grandparent, ., isName, (, ), &&]
[), ), {, Node, grandparent, =, reference, ., getGrandparent, (, ), ;, if, (, grandparent, ., isName, (, ), &&]
[), ), {, Node, grandparent, =, reference, ., getGrandparent, (, ), ;, if, (, grandparent, ., isName, (, ), &&]
[reference, ., getGrandparent, (, ), ;, if, (, grandparent, ., isName, (, ), &&, grandparent, ., getString, (, ), ==]
[reference, ., getGrandparent, (, ), ;, if, (, grandparent, ., isName, (, ), &&, grandparent, ., getString, (, ), ==]
[isName, (, ), &&, grandparent, ., getString, (, ), ==, v, ., name, ), {, continue, ;, }, if, (]
[isName, (, ), &&, grandparent, ., getString, (, ), ==, v, ., name, ), {, continue, ;, }, if, (]
[isName, (, ), &&, grandparent, ., getString, (, ), ==, v, ., name, ), {, continue, ;, }, if, (]
[getString, (, ), ==, v, ., name, ), {, continue, ;, }, if, (, reference, ., getScope, (, ), ==]
[getString, (, ), ==, v, ., name, ), {, continue, ;, }, if, (, reference, ., getScope, (, ), ==]
[{, continue, ;, }, if, (, reference, ., getScope, (, ), ==, v, ., scope, ), {, String, filename, =]
[{, continue, ;, }, if, (, reference, ., getScope, (, ), ==, v, ., scope, ), {, String, filename, =]
[if, (, reference, ., getScope, (, ), ==, v, ., scope, ), {, String, filename, =, NodeUtil, ., getSourceName, (]
[if, (, reference, ., getScope, (, ), ==, v, ., scope, ), {, String, filename, =, NodeUtil, ., getSourceName, (]
[==, v, ., scope, ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;]
[==, v, ., scope, ), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;]
[), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (]
[), {, String, filename, =, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (]
[=, NodeUtil, ., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (]
[., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,]
[., getSourceName, (, reference, ., getNode, (, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,]
[(, ), ), ;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,]
[), ;, compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,]
[compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,, UNDECLARED_REFERENCE, ,]
[compiler, ., report, (, JSError, ., make, (, filename, ,, reference, ., getNode, (, ), ,, checkLevel, ,, UNDECLARED_REFERENCE, ,]
[., getNode, (, ), ,, checkLevel, ,, UNDECLARED_REFERENCE, ,, v, ., name, ), ), ;, }, }, }, if, (]
[), ,, checkLevel, ,, UNDECLARED_REFERENCE, ,, v, ., name, ), ), ;, }, }, }, if, (, isDeclaration, ), {]
[), ,, checkLevel, ,, UNDECLARED_REFERENCE, ,, v, ., name, ), ), ;, }, }, }, if, (, isDeclaration, ), {]
[UNDECLARED_REFERENCE, ,, v, ., name, ), ), ;, }, }, }, if, (, isDeclaration, ), {, blocksWithDeclarations, ., add, (]
[., name, ), ), ;, }, }, }, if, (, isDeclaration, ), {, blocksWithDeclarations, ., add, (, basicBlock, ), ;]
[), ), ;, }, }, }, if, (, isDeclaration, ), {, blocksWithDeclarations, ., add, (, basicBlock, ), ;, isDeclaredInScope, =]
