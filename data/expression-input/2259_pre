[util, ., MathUtils, ;, public, class, PolynomialFunction, implements, UnivariateDifferentiableFunction, ,, DifferentiableUnivariateFunction, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[., MathUtils, ;, public, class, PolynomialFunction, implements, UnivariateDifferentiableFunction, ,, DifferentiableUnivariateFunction, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[[, ], ;, public, PolynomialFunction, (, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException, {, super, (, ), ;]
[[, ], ;, public, PolynomialFunction, (, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException, {, super, (, ), ;]
[PolynomialFunction, (, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException, {, super, (, ), ;, MathUtils, ., checkNotNull, (]
[), throws, NullArgumentException, ,, NoDataException, {, super, (, ), ;, MathUtils, ., checkNotNull, (, c, ), ;, int, n, =]
[), throws, NullArgumentException, ,, NoDataException, {, super, (, ), ;, MathUtils, ., checkNotNull, (, c, ), ;, int, n, =]
[super, (, ), ;, MathUtils, ., checkNotNull, (, c, ), ;, int, n, =, c, ., length, ;, if, (]
[super, (, ), ;, MathUtils, ., checkNotNull, (, c, ), ;, int, n, =, c, ., length, ;, if, (]
[), ;, MathUtils, ., checkNotNull, (, c, ), ;, int, n, =, c, ., length, ;, if, (, n, ==]
[checkNotNull, (, c, ), ;, int, n, =, c, ., length, ;, if, (, n, ==, 0, ), {, throw]
[), ;, int, n, =, c, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[), ;, int, n, =, c, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (]
[;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (]
[if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (]
[if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (]
[n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (, n, >]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (, n, >, 1, ), &&]
[{, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (, n, >, 1, ), &&, (]
[{, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (, n, >, 1, ), &&, (]
[{, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (, n, >, 1, ), &&, (]
[new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (, n, >, 1, ), &&, (, c, []
[new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (, n, >, 1, ), &&, (, c, []
[(, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (, n, >, 1, ), &&, (, c, [, n, -]
[EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, while, (, (, n, >, 1, ), &&, (, c, [, n, -, 1, ], ==]
[while, (, (, n, >, 1, ), &&, (, c, [, n, -, 1, ], ==, 0, ), ), {]
[(, (, n, >, 1, ), &&, (, c, [, n, -, 1, ], ==, 0, ), ), {, --]
[>, 1, ), &&, (, c, [, n, -, 1, ], ==, 0, ), ), {, --, n, ;, }]
[>, 1, ), &&, (, c, [, n, -, 1, ], ==, 0, ), ), {, --, n, ;, }]
[(, c, [, n, -, 1, ], ==, 0, ), ), {, --, n, ;, }, this, ., coefficients, =]
[n, -, 1, ], ==, 0, ), ), {, --, n, ;, }, this, ., coefficients, =, new, double, []
[], ==, 0, ), ), {, --, n, ;, }, this, ., coefficients, =, new, double, [, n, ], ;]
[], ==, 0, ), ), {, --, n, ;, }, this, ., coefficients, =, new, double, [, n, ], ;]
[), {, --, n, ;, }, this, ., coefficients, =, new, double, [, n, ], ;, System, ., arraycopy, (]
[--, n, ;, }, this, ., coefficients, =, new, double, [, n, ], ;, System, ., arraycopy, (, c, ,]
[;, }, this, ., coefficients, =, new, double, [, n, ], ;, System, ., arraycopy, (, c, ,, 0, ,]
[;, }, this, ., coefficients, =, new, double, [, n, ], ;, System, ., arraycopy, (, c, ,, 0, ,]
[coefficients, =, new, double, [, n, ], ;, System, ., arraycopy, (, c, ,, 0, ,, this, ., coefficients, ,]
[new, double, [, n, ], ;, System, ., arraycopy, (, c, ,, 0, ,, this, ., coefficients, ,, 0, ,]
[,, this, ., coefficients, ,, 0, ,, n, ), ;, }, public, double, value, (, double, x, ), {, return]
[., coefficients, ,, 0, ,, n, ), ;, }, public, double, value, (, double, x, ), {, return, evaluate, (]
[,, 0, ,, n, ), ;, }, public, double, value, (, double, x, ), {, return, evaluate, (, coefficients, ,]
[double, x, ), {, return, evaluate, (, coefficients, ,, x, ), ;, }, public, int, degree, (, ), {, return]
[double, x, ), {, return, evaluate, (, coefficients, ,, x, ), ;, }, public, int, degree, (, ), {, return]
[double, x, ), {, return, evaluate, (, coefficients, ,, x, ), ;, }, public, int, degree, (, ), {, return]
[return, evaluate, (, coefficients, ,, x, ), ;, }, public, int, degree, (, ), {, return, coefficients, ., length, -]
[(, ), {, return, coefficients, ., length, -, 1, ;, }, public, double, [, ], getCoefficients, (, ), {, return]
[(, ), {, return, coefficients, ., length, -, 1, ;, }, public, double, [, ], getCoefficients, (, ), {, return]
[;, }, protected, static, double, evaluate, (, double, [, ], coefficients, ,, double, argument, ), throws, NullArgumentException, ,, NoDataException, {]
[;, }, protected, static, double, evaluate, (, double, [, ], coefficients, ,, double, argument, ), throws, NullArgumentException, ,, NoDataException, {]
[double, evaluate, (, double, [, ], coefficients, ,, double, argument, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (]
[coefficients, ,, double, argument, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =]
[coefficients, ,, double, argument, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =]
[NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (]
[NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (]
[NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==]
[checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw]
[), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, double, result, =]
[if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, double, result, =]
[n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, double, result, =, coefficients, []
[n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, double, result, =, coefficients, []
[0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, double, result, =, coefficients, [, n, -]
[., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, double, result, =, coefficients, [, n, -, 1, ], ;, for, (, int, j, =]
[., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, double, result, =, coefficients, [, n, -, 1, ], ;, for, (, int, j, =]
[), ;, }, double, result, =, coefficients, [, n, -, 1, ], ;, for, (, int, j, =, n, -]
[}, double, result, =, coefficients, [, n, -, 1, ], ;, for, (, int, j, =, n, -, 2, ;]
[}, double, result, =, coefficients, [, n, -, 1, ], ;, for, (, int, j, =, n, -, 2, ;]
[result, =, coefficients, [, n, -, 1, ], ;, for, (, int, j, =, n, -, 2, ;, j, >=]
[coefficients, [, n, -, 1, ], ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;]
[coefficients, [, n, -, 1, ], ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;]
[1, ], ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {]
[;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result, =]
[;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result, =]
[;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result, =]
[(, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result, =, argument, *]
[j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result, =, argument, *, result, +]
[j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result, =, argument, *, result, +]
[n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result, =, argument, *, result, +, coefficients, []
[>=, 0, ;, j, --, ), {, result, =, argument, *, result, +, coefficients, [, j, ], ;, }, return]
[], ;, }, return, result, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NullArgumentException, ,, NoDataException, {]
[], ;, }, return, result, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NullArgumentException, ,, NoDataException, {]
[result, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (]
[(, final, DerivativeStructure, t, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =]
[(, final, DerivativeStructure, t, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =]
[NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (]
[NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (]
[NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==]
[checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw]
[), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, DerivativeStructure, result, =]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, DerivativeStructure, result, =, new, DerivativeStructure, (]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, DerivativeStructure, result, =, new, DerivativeStructure, (]
[NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, DerivativeStructure, result, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,]
[NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, DerivativeStructure, result, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,]
[;, }, DerivativeStructure, result, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, t, ., getOrder, (, ), ,]
[;, }, DerivativeStructure, result, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, t, ., getOrder, (, ), ,]
[DerivativeStructure, result, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, t, ., getOrder, (, ), ,, coefficients, []
[DerivativeStructure, result, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, t, ., getOrder, (, ), ,, coefficients, []
[=, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, t, ., getOrder, (, ), ,, coefficients, [, n, -]
[,, t, ., getOrder, (, ), ,, coefficients, [, n, -, 1, ], ), ;, for, (, int, j, =]
[,, t, ., getOrder, (, ), ,, coefficients, [, n, -, 1, ], ), ;, for, (, int, j, =]
[., getOrder, (, ), ,, coefficients, [, n, -, 1, ], ), ;, for, (, int, j, =, n, -]
[(, ), ,, coefficients, [, n, -, 1, ], ), ;, for, (, int, j, =, n, -, 2, ;]
[(, ), ,, coefficients, [, n, -, 1, ], ), ;, for, (, int, j, =, n, -, 2, ;]
[,, coefficients, [, n, -, 1, ], ), ;, for, (, int, j, =, n, -, 2, ;, j, >=]
[[, n, -, 1, ], ), ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;]
[[, n, -, 1, ], ), ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;]
[], ), ;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {]
[;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result, =]
[;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result, =]
[;, for, (, int, j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result, =]
[j, =, n, -, 2, ;, j, >=, 0, ;, j, --, ), {, result, =, result, ., multiply, (]
[;, j, >=, 0, ;, j, --, ), {, result, =, result, ., multiply, (, t, ), ., add, (]
[;, j, >=, 0, ;, j, --, ), {, result, =, result, ., multiply, (, t, ), ., add, (]
[>=, 0, ;, j, --, ), {, result, =, result, ., multiply, (, t, ), ., add, (, coefficients, []
[{, result, =, result, ., multiply, (, t, ), ., add, (, coefficients, [, j, ], ), ;, }, return]
[), ;, }, return, result, ;, }, public, PolynomialFunction, add, (, final, PolynomialFunction, p, ), {, final, int, lowLength, =]
[), ;, }, return, result, ;, }, public, PolynomialFunction, add, (, final, PolynomialFunction, p, ), {, final, int, lowLength, =]
[result, ;, }, public, PolynomialFunction, add, (, final, PolynomialFunction, p, ), {, final, int, lowLength, =, FastMath, ., min, (]
[result, ;, }, public, PolynomialFunction, add, (, final, PolynomialFunction, p, ), {, final, int, lowLength, =, FastMath, ., min, (]
[PolynomialFunction, add, (, final, PolynomialFunction, p, ), {, final, int, lowLength, =, FastMath, ., min, (, coefficients, ., length, ,]
[PolynomialFunction, add, (, final, PolynomialFunction, p, ), {, final, int, lowLength, =, FastMath, ., min, (, coefficients, ., length, ,]
[PolynomialFunction, add, (, final, PolynomialFunction, p, ), {, final, int, lowLength, =, FastMath, ., min, (, coefficients, ., length, ,]
[=, FastMath, ., min, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, final, int, highLength, =]
[=, FastMath, ., min, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, final, int, highLength, =]
[(, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, final, int, highLength, =, FastMath, ., max, (]
[(, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, final, int, highLength, =, FastMath, ., max, (]
[,, p, ., coefficients, ., length, ), ;, final, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,]
[,, p, ., coefficients, ., length, ), ;, final, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,]
[,, p, ., coefficients, ., length, ), ;, final, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,]
[FastMath, ., max, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, double, [, ], newCoefficients, =]
[(, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, double, [, ], newCoefficients, =, new, double, []
[., length, ), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =]
[), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;]
[), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;, i, <]
[], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;, i, <, lowLength, ;]
[newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++]
[double, [, highLength, ], ;, for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {]
[double, [, highLength, ], ;, for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {]
[highLength, ], ;, for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, []
[for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =]
[int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, []
[0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], +]
[0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], +]
[0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], +]
[lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], +, p, ., coefficients, []
[), {, newCoefficients, [, i, ], =, coefficients, [, i, ], +, p, ., coefficients, [, i, ], ;, }]
[), {, newCoefficients, [, i, ], =, coefficients, [, i, ], +, p, ., coefficients, [, i, ], ;, }]
[i, ], =, coefficients, [, i, ], +, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy, (]
[i, ], =, coefficients, [, i, ], +, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy, (]
[], =, coefficients, [, i, ], +, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy, (, (]
[], =, coefficients, [, i, ], +, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy, (, (]
[], =, coefficients, [, i, ], +, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy, (, (]
[i, ], +, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy, (, (, coefficients, ., length, <]
[i, ], +, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy, (, (, coefficients, ., length, <]
[i, ], +, p, ., coefficients, [, i, ], ;, }, System, ., arraycopy, (, (, coefficients, ., length, <]
[i, ], ;, }, System, ., arraycopy, (, (, coefficients, ., length, <, p, ., coefficients, ., length, ), ?]
[i, ], ;, }, System, ., arraycopy, (, (, coefficients, ., length, <, p, ., coefficients, ., length, ), ?]
[System, ., arraycopy, (, (, coefficients, ., length, <, p, ., coefficients, ., length, ), ?, p, ., coefficients, :]
[arraycopy, (, (, coefficients, ., length, <, p, ., coefficients, ., length, ), ?, p, ., coefficients, :, coefficients, ,]
[(, coefficients, ., length, <, p, ., coefficients, ., length, ), ?, p, ., coefficients, :, coefficients, ,, lowLength, ,]
[., length, <, p, ., coefficients, ., length, ), ?, p, ., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,]
[<, p, ., coefficients, ., length, ), ?, p, ., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,]
[<, p, ., coefficients, ., length, ), ?, p, ., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,]
[., coefficients, ., length, ), ?, p, ., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -]
[), ?, p, ., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, return]
[., coefficients, :, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, return, new, PolynomialFunction, (]
[return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, subtract, (, final, PolynomialFunction, p, ), {, int, lowLength, =]
[return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, subtract, (, final, PolynomialFunction, p, ), {, int, lowLength, =]
[newCoefficients, ), ;, }, public, PolynomialFunction, subtract, (, final, PolynomialFunction, p, ), {, int, lowLength, =, FastMath, ., min, (]
[newCoefficients, ), ;, }, public, PolynomialFunction, subtract, (, final, PolynomialFunction, p, ), {, int, lowLength, =, FastMath, ., min, (]
[public, PolynomialFunction, subtract, (, final, PolynomialFunction, p, ), {, int, lowLength, =, FastMath, ., min, (, coefficients, ., length, ,]
[public, PolynomialFunction, subtract, (, final, PolynomialFunction, p, ), {, int, lowLength, =, FastMath, ., min, (, coefficients, ., length, ,]
[public, PolynomialFunction, subtract, (, final, PolynomialFunction, p, ), {, int, lowLength, =, FastMath, ., min, (, coefficients, ., length, ,]
[lowLength, =, FastMath, ., min, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, int, highLength, =]
[lowLength, =, FastMath, ., min, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, int, highLength, =]
[min, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, int, highLength, =, FastMath, ., max, (]
[min, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, int, highLength, =, FastMath, ., max, (]
[length, ,, p, ., coefficients, ., length, ), ;, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,]
[length, ,, p, ., coefficients, ., length, ), ;, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,]
[length, ,, p, ., coefficients, ., length, ), ;, int, highLength, =, FastMath, ., max, (, coefficients, ., length, ,]
[FastMath, ., max, (, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, double, [, ], newCoefficients, =]
[(, coefficients, ., length, ,, p, ., coefficients, ., length, ), ;, double, [, ], newCoefficients, =, new, double, []
[., length, ), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =]
[), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;]
[), ;, double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;, i, <]
[], newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;, i, <, lowLength, ;]
[newCoefficients, =, new, double, [, highLength, ], ;, for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++]
[double, [, highLength, ], ;, for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {]
[double, [, highLength, ], ;, for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {]
[highLength, ], ;, for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, []
[for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =]
[int, i, =, 0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, []
[0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], -]
[0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], -]
[0, ;, i, <, lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], -]
[lowLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, coefficients, [, i, ], -, p, ., coefficients, []
[newCoefficients, [, i, ], =, coefficients, [, i, ], -, p, ., coefficients, [, i, ], ;, }, if, (]
[newCoefficients, [, i, ], =, coefficients, [, i, ], -, p, ., coefficients, [, i, ], ;, }, if, (]
[newCoefficients, [, i, ], =, coefficients, [, i, ], -, p, ., coefficients, [, i, ], ;, }, if, (]
[=, coefficients, [, i, ], -, p, ., coefficients, [, i, ], ;, }, if, (, coefficients, ., length, <]
[=, coefficients, [, i, ], -, p, ., coefficients, [, i, ], ;, }, if, (, coefficients, ., length, <]
[=, coefficients, [, i, ], -, p, ., coefficients, [, i, ], ;, }, if, (, coefficients, ., length, <]
[;, }, if, (, coefficients, ., length, <, p, ., coefficients, ., length, ), {, for, (, int, i, =]
[if, (, coefficients, ., length, <, p, ., coefficients, ., length, ), {, for, (, int, i, =, lowLength, ;]
[if, (, coefficients, ., length, <, p, ., coefficients, ., length, ), {, for, (, int, i, =, lowLength, ;]
[coefficients, ., length, <, p, ., coefficients, ., length, ), {, for, (, int, i, =, lowLength, ;, i, <]
[length, <, p, ., coefficients, ., length, ), {, for, (, int, i, =, lowLength, ;, i, <, highLength, ;]
[<, p, ., coefficients, ., length, ), {, for, (, int, i, =, lowLength, ;, i, <, highLength, ;, ++]
[coefficients, ., length, ), {, for, (, int, i, =, lowLength, ;, i, <, highLength, ;, ++, i, ), {]
[coefficients, ., length, ), {, for, (, int, i, =, lowLength, ;, i, <, highLength, ;, ++, i, ), {]
[length, ), {, for, (, int, i, =, lowLength, ;, i, <, highLength, ;, ++, i, ), {, newCoefficients, []
[for, (, int, i, =, lowLength, ;, i, <, highLength, ;, ++, i, ), {, newCoefficients, [, i, ], =]
[(, int, i, =, lowLength, ;, i, <, highLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, -]
[(, int, i, =, lowLength, ;, i, <, highLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, -]
[(, int, i, =, lowLength, ;, i, <, highLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, -]
[lowLength, ;, i, <, highLength, ;, ++, i, ), {, newCoefficients, [, i, ], =, -, p, ., coefficients, []
[i, ), {, newCoefficients, [, i, ], =, -, p, ., coefficients, [, i, ], ;, }, }, else, {]
[i, ), {, newCoefficients, [, i, ], =, -, p, ., coefficients, [, i, ], ;, }, }, else, {]
[[, i, ], =, -, p, ., coefficients, [, i, ], ;, }, }, else, {, System, ., arraycopy, (]
[], =, -, p, ., coefficients, [, i, ], ;, }, }, else, {, System, ., arraycopy, (, coefficients, ,]
[-, p, ., coefficients, [, i, ], ;, }, }, else, {, System, ., arraycopy, (, coefficients, ,, lowLength, ,]
[., coefficients, [, i, ], ;, }, }, else, {, System, ., arraycopy, (, coefficients, ,, lowLength, ,, newCoefficients, ,]
[[, i, ], ;, }, }, else, {, System, ., arraycopy, (, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,]
[[, i, ], ;, }, }, else, {, System, ., arraycopy, (, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,]
[], ;, }, }, else, {, System, ., arraycopy, (, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -]
[{, System, ., arraycopy, (, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, }, return]
[arraycopy, (, coefficients, ,, lowLength, ,, newCoefficients, ,, lowLength, ,, highLength, -, lowLength, ), ;, }, return, new, PolynomialFunction, (]
[}, return, new, PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, negate, (, ), {, double, [, ], newCoefficients, =]
[PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, negate, (, ), {, double, [, ], newCoefficients, =, new, double, []
[PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, negate, (, ), {, double, [, ], newCoefficients, =, new, double, []
[), {, double, [, ], newCoefficients, =, new, double, [, coefficients, ., length, ], ;, for, (, int, i, =]
[double, [, ], newCoefficients, =, new, double, [, coefficients, ., length, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], newCoefficients, =, new, double, [, coefficients, ., length, ], ;, for, (, int, i, =, 0, ;]
[], newCoefficients, =, new, double, [, coefficients, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[], newCoefficients, =, new, double, [, coefficients, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[double, [, coefficients, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;]
[[, coefficients, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;, ++]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;, ++, i, ), {]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;, ++, i, ), {, newCoefficients, []
[int, i, =, 0, ;, i, <, coefficients, ., length, ;, ++, i, ), {, newCoefficients, [, i, ], =]
[i, =, 0, ;, i, <, coefficients, ., length, ;, ++, i, ), {, newCoefficients, [, i, ], =, -]
[i, =, 0, ;, i, <, coefficients, ., length, ;, ++, i, ), {, newCoefficients, [, i, ], =, -]
[0, ;, i, <, coefficients, ., length, ;, ++, i, ), {, newCoefficients, [, i, ], =, -, coefficients, []
[., length, ;, ++, i, ), {, newCoefficients, [, i, ], =, -, coefficients, [, i, ], ;, }, return]
[++, i, ), {, newCoefficients, [, i, ], =, -, coefficients, [, i, ], ;, }, return, new, PolynomialFunction, (]
[PolynomialFunction, (, newCoefficients, ), ;, }, public, PolynomialFunction, multiply, (, final, PolynomialFunction, p, ), {, double, [, ], newCoefficients, =]
[), ;, }, public, PolynomialFunction, multiply, (, final, PolynomialFunction, p, ), {, double, [, ], newCoefficients, =, new, double, []
[), ;, }, public, PolynomialFunction, multiply, (, final, PolynomialFunction, p, ), {, double, [, ], newCoefficients, =, new, double, []
[), ;, }, public, PolynomialFunction, multiply, (, final, PolynomialFunction, p, ), {, double, [, ], newCoefficients, =, new, double, []
[), ;, }, public, PolynomialFunction, multiply, (, final, PolynomialFunction, p, ), {, double, [, ], newCoefficients, =, new, double, []
[PolynomialFunction, multiply, (, final, PolynomialFunction, p, ), {, double, [, ], newCoefficients, =, new, double, [, coefficients, ., length, +]
[PolynomialFunction, multiply, (, final, PolynomialFunction, p, ), {, double, [, ], newCoefficients, =, new, double, [, coefficients, ., length, +]
[PolynomialFunction, multiply, (, final, PolynomialFunction, p, ), {, double, [, ], newCoefficients, =, new, double, [, coefficients, ., length, +]
[), {, double, [, ], newCoefficients, =, new, double, [, coefficients, ., length, +, p, ., coefficients, ., length, -]
[double, [, coefficients, ., length, +, p, ., coefficients, ., length, -, 1, ], ;, for, (, int, i, =]
[coefficients, ., length, +, p, ., coefficients, ., length, -, 1, ], ;, for, (, int, i, =, 0, ;]
[coefficients, ., length, +, p, ., coefficients, ., length, -, 1, ], ;, for, (, int, i, =, 0, ;]
[length, +, p, ., coefficients, ., length, -, 1, ], ;, for, (, int, i, =, 0, ;, i, <]
[length, +, p, ., coefficients, ., length, -, 1, ], ;, for, (, int, i, =, 0, ;, i, <]
[coefficients, ., length, -, 1, ], ;, for, (, int, i, =, 0, ;, i, <, newCoefficients, ., length, ;]
[., length, -, 1, ], ;, for, (, int, i, =, 0, ;, i, <, newCoefficients, ., length, ;, ++]
[1, ], ;, for, (, int, i, =, 0, ;, i, <, newCoefficients, ., length, ;, ++, i, ), {]
[1, ], ;, for, (, int, i, =, 0, ;, i, <, newCoefficients, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, newCoefficients, ., length, ;, ++, i, ), {, newCoefficients, []
[int, i, =, 0, ;, i, <, newCoefficients, ., length, ;, ++, i, ), {, newCoefficients, [, i, ], =]
[newCoefficients, ., length, ;, ++, i, ), {, newCoefficients, [, i, ], =, 0.0, ;, for, (, int, j, =]
[newCoefficients, ., length, ;, ++, i, ), {, newCoefficients, [, i, ], =, 0.0, ;, for, (, int, j, =]
[++, i, ), {, newCoefficients, [, i, ], =, 0.0, ;, for, (, int, j, =, FastMath, ., max, (]
[), {, newCoefficients, [, i, ], =, 0.0, ;, for, (, int, j, =, FastMath, ., max, (, 0, ,]
[), {, newCoefficients, [, i, ], =, 0.0, ;, for, (, int, j, =, FastMath, ., max, (, 0, ,]
[), {, newCoefficients, [, i, ], =, 0.0, ;, for, (, int, j, =, FastMath, ., max, (, 0, ,]
[newCoefficients, [, i, ], =, 0.0, ;, for, (, int, j, =, FastMath, ., max, (, 0, ,, i, +]
[i, ], =, 0.0, ;, for, (, int, j, =, FastMath, ., max, (, 0, ,, i, +, 1, -]
[i, ], =, 0.0, ;, for, (, int, j, =, FastMath, ., max, (, 0, ,, i, +, 1, -]
[i, ], =, 0.0, ;, for, (, int, j, =, FastMath, ., max, (, 0, ,, i, +, 1, -]
[int, j, =, FastMath, ., max, (, 0, ,, i, +, 1, -, p, ., coefficients, ., length, ), ;]
[int, j, =, FastMath, ., max, (, 0, ,, i, +, 1, -, p, ., coefficients, ., length, ), ;]
[=, FastMath, ., max, (, 0, ,, i, +, 1, -, p, ., coefficients, ., length, ), ;, j, <]
[=, FastMath, ., max, (, 0, ,, i, +, 1, -, p, ., coefficients, ., length, ), ;, j, <]
[(, 0, ,, i, +, 1, -, p, ., coefficients, ., length, ), ;, j, <, FastMath, ., min, (]
[(, 0, ,, i, +, 1, -, p, ., coefficients, ., length, ), ;, j, <, FastMath, ., min, (]
[+, 1, -, p, ., coefficients, ., length, ), ;, j, <, FastMath, ., min, (, coefficients, ., length, ,]
[+, 1, -, p, ., coefficients, ., length, ), ;, j, <, FastMath, ., min, (, coefficients, ., length, ,]
[-, p, ., coefficients, ., length, ), ;, j, <, FastMath, ., min, (, coefficients, ., length, ,, i, +]
[coefficients, ., length, ), ;, j, <, FastMath, ., min, (, coefficients, ., length, ,, i, +, 1, ), ;]
[., length, ), ;, j, <, FastMath, ., min, (, coefficients, ., length, ,, i, +, 1, ), ;, ++]
[;, j, <, FastMath, ., min, (, coefficients, ., length, ,, i, +, 1, ), ;, ++, j, ), {]
[;, j, <, FastMath, ., min, (, coefficients, ., length, ,, i, +, 1, ), ;, ++, j, ), {]
[<, FastMath, ., min, (, coefficients, ., length, ,, i, +, 1, ), ;, ++, j, ), {, newCoefficients, []
[min, (, coefficients, ., length, ,, i, +, 1, ), ;, ++, j, ), {, newCoefficients, [, i, ], +=]
[min, (, coefficients, ., length, ,, i, +, 1, ), ;, ++, j, ), {, newCoefficients, [, i, ], +=]
[min, (, coefficients, ., length, ,, i, +, 1, ), ;, ++, j, ), {, newCoefficients, [, i, ], +=]
[coefficients, ., length, ,, i, +, 1, ), ;, ++, j, ), {, newCoefficients, [, i, ], +=, coefficients, []
[,, i, +, 1, ), ;, ++, j, ), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *]
[,, i, +, 1, ), ;, ++, j, ), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *]
[,, i, +, 1, ), ;, ++, j, ), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *]
[), ;, ++, j, ), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *, p, ., coefficients, []
[), ;, ++, j, ), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *, p, ., coefficients, []
[++, j, ), {, newCoefficients, [, i, ], +=, coefficients, [, j, ], *, p, ., coefficients, [, i, -]
[i, ], +=, coefficients, [, j, ], *, p, ., coefficients, [, i, -, j, ], ;, }, }, return]
[coefficients, [, j, ], *, p, ., coefficients, [, i, -, j, ], ;, }, }, return, new, PolynomialFunction, (]
[), ;, }, protected, static, double, [, ], differentiate, (, double, [, ], coefficients, ), throws, NullArgumentException, ,, NoDataException, {]
[), ;, }, protected, static, double, [, ], differentiate, (, double, [, ], coefficients, ), throws, NullArgumentException, ,, NoDataException, {]
[static, double, [, ], differentiate, (, double, [, ], coefficients, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (]
[double, [, ], coefficients, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =]
[double, [, ], coefficients, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =]
[NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (]
[NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (]
[NoDataException, {, MathUtils, ., checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==]
[checkNotNull, (, coefficients, ), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw]
[), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[), ;, int, n, =, coefficients, ., length, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (]
[;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (]
[(, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (, n, ==]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (, n, ==, 1, ), {, return]
[NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (, n, ==, 1, ), {, return, new, double, [, ]]
[(, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (, n, ==, 1, ), {, return, new, double, [, ], {]
[n, ==, 1, ), {, return, new, double, [, ], {, 0, }, ;, }, double, [, ], result, =]
[), {, return, new, double, [, ], {, 0, }, ;, }, double, [, ], result, =, new, double, []
[), {, return, new, double, [, ], {, 0, }, ;, }, double, [, ], result, =, new, double, []
[return, new, double, [, ], {, 0, }, ;, }, double, [, ], result, =, new, double, [, n, -]
[;, }, double, [, ], result, =, new, double, [, n, -, 1, ], ;, for, (, int, i, =]
[;, }, double, [, ], result, =, new, double, [, n, -, 1, ], ;, for, (, int, i, =]
[double, [, ], result, =, new, double, [, n, -, 1, ], ;, for, (, int, i, =, n, -]
[], result, =, new, double, [, n, -, 1, ], ;, for, (, int, i, =, n, -, 1, ;]
[], result, =, new, double, [, n, -, 1, ], ;, for, (, int, i, =, n, -, 1, ;]
[=, new, double, [, n, -, 1, ], ;, for, (, int, i, =, n, -, 1, ;, i, >]
[double, [, n, -, 1, ], ;, for, (, int, i, =, n, -, 1, ;, i, >, 0, ;]
[double, [, n, -, 1, ], ;, for, (, int, i, =, n, -, 1, ;, i, >, 0, ;]
[1, ], ;, for, (, int, i, =, n, -, 1, ;, i, >, 0, ;, i, --, ), {]
[1, ], ;, for, (, int, i, =, n, -, 1, ;, i, >, 0, ;, i, --, ), {]
[;, for, (, int, i, =, n, -, 1, ;, i, >, 0, ;, i, --, ), {, result, []
[;, for, (, int, i, =, n, -, 1, ;, i, >, 0, ;, i, --, ), {, result, []
[(, int, i, =, n, -, 1, ;, i, >, 0, ;, i, --, ), {, result, [, i, -]
[=, n, -, 1, ;, i, >, 0, ;, i, --, ), {, result, [, i, -, 1, ], =]
[=, n, -, 1, ;, i, >, 0, ;, i, --, ), {, result, [, i, -, 1, ], =]
[-, 1, ;, i, >, 0, ;, i, --, ), {, result, [, i, -, 1, ], =, i, *]
[-, 1, ;, i, >, 0, ;, i, --, ), {, result, [, i, -, 1, ], =, i, *]
[;, i, >, 0, ;, i, --, ), {, result, [, i, -, 1, ], =, i, *, coefficients, []
[i, --, ), {, result, [, i, -, 1, ], =, i, *, coefficients, [, i, ], ;, }, return]
[=, i, *, coefficients, [, i, ], ;, }, return, result, ;, }, public, PolynomialFunction, polynomialDerivative, (, ), {, return]
[coefficients, [, i, ], ;, }, return, result, ;, }, public, PolynomialFunction, polynomialDerivative, (, ), {, return, new, PolynomialFunction, (]
[i, ], ;, }, return, result, ;, }, public, PolynomialFunction, polynomialDerivative, (, ), {, return, new, PolynomialFunction, (, differentiate, (]
[), {, return, new, PolynomialFunction, (, differentiate, (, coefficients, ), ), ;, }, public, UnivariateFunction, derivative, (, ), {, return]
[(, ), {, return, polynomialDerivative, (, ), ;, }, @, Override, public, String, toString, (, ), {, StringBuilder, s, =]
[;, }, @, Override, public, String, toString, (, ), {, StringBuilder, s, =, new, StringBuilder, (, ), ;, if, (]
[;, }, @, Override, public, String, toString, (, ), {, StringBuilder, s, =, new, StringBuilder, (, ), ;, if, (]
[;, }, @, Override, public, String, toString, (, ), {, StringBuilder, s, =, new, StringBuilder, (, ), ;, if, (]
[@, Override, public, String, toString, (, ), {, StringBuilder, s, =, new, StringBuilder, (, ), ;, if, (, coefficients, []
[String, toString, (, ), {, StringBuilder, s, =, new, StringBuilder, (, ), ;, if, (, coefficients, [, 0, ], ==]
[StringBuilder, s, =, new, StringBuilder, (, ), ;, if, (, coefficients, [, 0, ], ==, 0.0, ), {, if, (]
[StringBuilder, s, =, new, StringBuilder, (, ), ;, if, (, coefficients, [, 0, ], ==, 0.0, ), {, if, (]
[StringBuilder, s, =, new, StringBuilder, (, ), ;, if, (, coefficients, [, 0, ], ==, 0.0, ), {, if, (]
[StringBuilder, (, ), ;, if, (, coefficients, [, 0, ], ==, 0.0, ), {, if, (, coefficients, ., length, ==]
[if, (, coefficients, [, 0, ], ==, 0.0, ), {, if, (, coefficients, ., length, ==, 1, ), {, return]
[==, 0.0, ), {, if, (, coefficients, ., length, ==, 1, ), {, return, "0", ;, }, }, else, {]
[==, 0.0, ), {, if, (, coefficients, ., length, ==, 1, ), {, return, "0", ;, }, }, else, {]
[if, (, coefficients, ., length, ==, 1, ), {, return, "0", ;, }, }, else, {, s, ., append, (]
[coefficients, ., length, ==, 1, ), {, return, "0", ;, }, }, else, {, s, ., append, (, toString, (]
[coefficients, ., length, ==, 1, ), {, return, "0", ;, }, }, else, {, s, ., append, (, toString, (]
[length, ==, 1, ), {, return, "0", ;, }, }, else, {, s, ., append, (, toString, (, coefficients, []
[{, s, ., append, (, toString, (, coefficients, [, 0, ], ), ), ;, }, for, (, int, i, =]
[., append, (, toString, (, coefficients, [, 0, ], ), ), ;, }, for, (, int, i, =, 1, ;]
[., append, (, toString, (, coefficients, [, 0, ], ), ), ;, }, for, (, int, i, =, 1, ;]
[(, toString, (, coefficients, [, 0, ], ), ), ;, }, for, (, int, i, =, 1, ;, i, <]
[(, toString, (, coefficients, [, 0, ], ), ), ;, }, for, (, int, i, =, 1, ;, i, <]
[[, 0, ], ), ), ;, }, for, (, int, i, =, 1, ;, i, <, coefficients, ., length, ;]
[0, ], ), ), ;, }, for, (, int, i, =, 1, ;, i, <, coefficients, ., length, ;, ++]
[}, for, (, int, i, =, 1, ;, i, <, coefficients, ., length, ;, ++, i, ), {, if, (]
[}, for, (, int, i, =, 1, ;, i, <, coefficients, ., length, ;, ++, i, ), {, if, (]
[}, for, (, int, i, =, 1, ;, i, <, coefficients, ., length, ;, ++, i, ), {, if, (]
[(, int, i, =, 1, ;, i, <, coefficients, ., length, ;, ++, i, ), {, if, (, coefficients, []
[=, 1, ;, i, <, coefficients, ., length, ;, ++, i, ), {, if, (, coefficients, [, i, ], !=]
[coefficients, ., length, ;, ++, i, ), {, if, (, coefficients, [, i, ], !=, 0, ), {, if, (]
[coefficients, ., length, ;, ++, i, ), {, if, (, coefficients, [, i, ], !=, 0, ), {, if, (]
[coefficients, ., length, ;, ++, i, ), {, if, (, coefficients, [, i, ], !=, 0, ), {, if, (]
[), {, if, (, coefficients, [, i, ], !=, 0, ), {, if, (, s, ., length, (, ), >]
[[, i, ], !=, 0, ), {, if, (, s, ., length, (, ), >, 0, ), {, if, (]
[[, i, ], !=, 0, ), {, if, (, s, ., length, (, ), >, 0, ), {, if, (]
[[, i, ], !=, 0, ), {, if, (, s, ., length, (, ), >, 0, ), {, if, (]
[], !=, 0, ), {, if, (, s, ., length, (, ), >, 0, ), {, if, (, coefficients, []
[), {, if, (, s, ., length, (, ), >, 0, ), {, if, (, coefficients, [, i, ], <]
[(, s, ., length, (, ), >, 0, ), {, if, (, coefficients, [, i, ], <, 0, ), {]
[(, s, ., length, (, ), >, 0, ), {, if, (, coefficients, [, i, ], <, 0, ), {]
[(, ), >, 0, ), {, if, (, coefficients, [, i, ], <, 0, ), {, s, ., append, (]
[if, (, coefficients, [, i, ], <, 0, ), {, s, ., append, (, " - ", ), ;, }, else, {]
[if, (, coefficients, [, i, ], <, 0, ), {, s, ., append, (, " - ", ), ;, }, else, {]
[i, ], <, 0, ), {, s, ., append, (, " - ", ), ;, }, else, {, s, ., append, (]
[(, " - ", ), ;, }, else, {, s, ., append, (, " + ", ), ;, }, }, else, {, if, (]
[(, " - ", ), ;, }, else, {, s, ., append, (, " + ", ), ;, }, }, else, {, if, (]
[(, " - ", ), ;, }, else, {, s, ., append, (, " + ", ), ;, }, }, else, {, if, (]
[), ;, }, else, {, s, ., append, (, " + ", ), ;, }, }, else, {, if, (, coefficients, []
[else, {, s, ., append, (, " + ", ), ;, }, }, else, {, if, (, coefficients, [, i, ], <]
[., append, (, " + ", ), ;, }, }, else, {, if, (, coefficients, [, i, ], <, 0, ), {]
[., append, (, " + ", ), ;, }, }, else, {, if, (, coefficients, [, i, ], <, 0, ), {]
[), ;, }, }, else, {, if, (, coefficients, [, i, ], <, 0, ), {, s, ., append, (]
[coefficients, [, i, ], <, 0, ), {, s, ., append, (, "-", ), ;, }, }, double, absAi, =]
[coefficients, [, i, ], <, 0, ), {, s, ., append, (, "-", ), ;, }, }, double, absAi, =]
[<, 0, ), {, s, ., append, (, "-", ), ;, }, }, double, absAi, =, FastMath, ., abs, (]
[<, 0, ), {, s, ., append, (, "-", ), ;, }, }, double, absAi, =, FastMath, ., abs, (]
[), {, s, ., append, (, "-", ), ;, }, }, double, absAi, =, FastMath, ., abs, (, coefficients, []
["-", ), ;, }, }, double, absAi, =, FastMath, ., abs, (, coefficients, [, i, ], ), ;, if, (]
["-", ), ;, }, }, double, absAi, =, FastMath, ., abs, (, coefficients, [, i, ], ), ;, if, (]
[), ;, }, }, double, absAi, =, FastMath, ., abs, (, coefficients, [, i, ], ), ;, if, (, (]
[), ;, }, }, double, absAi, =, FastMath, ., abs, (, coefficients, [, i, ], ), ;, if, (, (]
[}, }, double, absAi, =, FastMath, ., abs, (, coefficients, [, i, ], ), ;, if, (, (, absAi, -]
[absAi, =, FastMath, ., abs, (, coefficients, [, i, ], ), ;, if, (, (, absAi, -, 1, ), !=]
[., abs, (, coefficients, [, i, ], ), ;, if, (, (, absAi, -, 1, ), !=, 0, ), {]
[., abs, (, coefficients, [, i, ], ), ;, if, (, (, absAi, -, 1, ), !=, 0, ), {]
[[, i, ], ), ;, if, (, (, absAi, -, 1, ), !=, 0, ), {, s, ., append, (]
[], ), ;, if, (, (, absAi, -, 1, ), !=, 0, ), {, s, ., append, (, toString, (]
[(, (, absAi, -, 1, ), !=, 0, ), {, s, ., append, (, toString, (, absAi, ), ), ;]
[(, (, absAi, -, 1, ), !=, 0, ), {, s, ., append, (, toString, (, absAi, ), ), ;]
[1, ), !=, 0, ), {, s, ., append, (, toString, (, absAi, ), ), ;, s, ., append, (]
[), {, s, ., append, (, toString, (, absAi, ), ), ;, s, ., append, (, ' ', ), ;, }]
[), {, s, ., append, (, toString, (, absAi, ), ), ;, s, ., append, (, ' ', ), ;, }]
[append, (, toString, (, absAi, ), ), ;, s, ., append, (, ' ', ), ;, }, s, ., append, (]
[), ), ;, s, ., append, (, ' ', ), ;, }, s, ., append, (, "x", ), ;, if, (]
[), ), ;, s, ., append, (, ' ', ), ;, }, s, ., append, (, "x", ), ;, if, (]
[;, s, ., append, (, ' ', ), ;, }, s, ., append, (, "x", ), ;, if, (, i, >]
[append, (, ' ', ), ;, }, s, ., append, (, "x", ), ;, if, (, i, >, 1, ), {]
[append, (, ' ', ), ;, }, s, ., append, (, "x", ), ;, if, (, i, >, 1, ), {]
[;, }, s, ., append, (, "x", ), ;, if, (, i, >, 1, ), {, s, ., append, (]
[., append, (, "x", ), ;, if, (, i, >, 1, ), {, s, ., append, (, '^', ), ;]
[., append, (, "x", ), ;, if, (, i, >, 1, ), {, s, ., append, (, '^', ), ;]
[), ;, if, (, i, >, 1, ), {, s, ., append, (, '^', ), ;, s, ., append, (]
[), ;, if, (, i, >, 1, ), {, s, ., append, (, '^', ), ;, s, ., append, (]
[i, >, 1, ), {, s, ., append, (, '^', ), ;, s, ., append, (, Integer, ., toString, (]
[(, '^', ), ;, s, ., append, (, Integer, ., toString, (, i, ), ), ;, }, }, }, return]
[(, '^', ), ;, s, ., append, (, Integer, ., toString, (, i, ), ), ;, }, }, }, return]
[s, ., toString, (, ), ;, }, private, static, String, toString, (, double, coeff, ), {, final, String, c, =]
[s, ., toString, (, ), ;, }, private, static, String, toString, (, double, coeff, ), {, final, String, c, =]
[), ;, }, private, static, String, toString, (, double, coeff, ), {, final, String, c, =, Double, ., toString, (]
[String, toString, (, double, coeff, ), {, final, String, c, =, Double, ., toString, (, coeff, ), ;, if, (]
[String, toString, (, double, coeff, ), {, final, String, c, =, Double, ., toString, (, coeff, ), ;, if, (]
[coeff, ), {, final, String, c, =, Double, ., toString, (, coeff, ), ;, if, (, c, ., endsWith, (]
[c, =, Double, ., toString, (, coeff, ), ;, if, (, c, ., endsWith, (, ".0", ), ), {, return]
[c, =, Double, ., toString, (, coeff, ), ;, if, (, c, ., endsWith, (, ".0", ), ), {, return]
[toString, (, coeff, ), ;, if, (, c, ., endsWith, (, ".0", ), ), {, return, c, ., substring, (]
[coeff, ), ;, if, (, c, ., endsWith, (, ".0", ), ), {, return, c, ., substring, (, 0, ,]
[coeff, ), ;, if, (, c, ., endsWith, (, ".0", ), ), {, return, c, ., substring, (, 0, ,]
[coeff, ), ;, if, (, c, ., endsWith, (, ".0", ), ), {, return, c, ., substring, (, 0, ,]
[., endsWith, (, ".0", ), ), {, return, c, ., substring, (, 0, ,, c, ., length, (, ), -]
[return, c, ., substring, (, 0, ,, c, ., length, (, ), -, 2, ), ;, }, else, {, return]
[}, else, {, return, c, ;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =]
[;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =]
[}, @, Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;]
[Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =]
[Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =]
[Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =]
[int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *]
[(, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *, result, +]
[(, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *, result, +]
[int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *, result, +, Arrays, ., hashCode, (]
[;, int, result, =, 1, ;, result, =, prime, *, result, +, Arrays, ., hashCode, (, coefficients, ), ;, return]
[(, coefficients, ), ;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[(, coefficients, ), ;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[), ;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==]
[;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !, (]
[this, ==, obj, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, PolynomialFunction, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, PolynomialFunction, ), ), {, return, false, ;, }, PolynomialFunction, other, =]
[if, (, !, (, obj, instanceof, PolynomialFunction, ), ), {, return, false, ;, }, PolynomialFunction, other, =, (, PolynomialFunction, )]
[obj, instanceof, PolynomialFunction, ), ), {, return, false, ;, }, PolynomialFunction, other, =, (, PolynomialFunction, ), obj, ;, if, (]
[instanceof, PolynomialFunction, ), ), {, return, false, ;, }, PolynomialFunction, other, =, (, PolynomialFunction, ), obj, ;, if, (, !]
[instanceof, PolynomialFunction, ), ), {, return, false, ;, }, PolynomialFunction, other, =, (, PolynomialFunction, ), obj, ;, if, (, !]
[{, return, false, ;, }, PolynomialFunction, other, =, (, PolynomialFunction, ), obj, ;, if, (, !, Arrays, ., equals, (]
[false, ;, }, PolynomialFunction, other, =, (, PolynomialFunction, ), obj, ;, if, (, !, Arrays, ., equals, (, coefficients, ,]
[false, ;, }, PolynomialFunction, other, =, (, PolynomialFunction, ), obj, ;, if, (, !, Arrays, ., equals, (, coefficients, ,]
[PolynomialFunction, ), obj, ;, if, (, !, Arrays, ., equals, (, coefficients, ,, other, ., coefficients, ), ), {, return]
[if, (, !, Arrays, ., equals, (, coefficients, ,, other, ., coefficients, ), ), {, return, false, ;, }, return]
[public, double, [, ], gradient, (, double, x, ,, double, ..., parameters, ), {, final, double, [, ], gradient, =]
[], gradient, (, double, x, ,, double, ..., parameters, ), {, final, double, [, ], gradient, =, new, double, []
[], gradient, (, double, x, ,, double, ..., parameters, ), {, final, double, [, ], gradient, =, new, double, []
[parameters, ), {, final, double, [, ], gradient, =, new, double, [, parameters, ., length, ], ;, double, xn, =]
[gradient, =, new, double, [, parameters, ., length, ], ;, double, xn, =, 1.0, ;, for, (, int, i, =]
[new, double, [, parameters, ., length, ], ;, double, xn, =, 1.0, ;, for, (, int, i, =, 0, ;]
[new, double, [, parameters, ., length, ], ;, double, xn, =, 1.0, ;, for, (, int, i, =, 0, ;]
[[, parameters, ., length, ], ;, double, xn, =, 1.0, ;, for, (, int, i, =, 0, ;, i, <]
[[, parameters, ., length, ], ;, double, xn, =, 1.0, ;, for, (, int, i, =, 0, ;, i, <]
[], ;, double, xn, =, 1.0, ;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;]
[;, double, xn, =, 1.0, ;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;, ++]
[=, 1.0, ;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;, ++, i, ), {]
[=, 1.0, ;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;, ++, i, ), {, gradient, []
[int, i, =, 0, ;, i, <, parameters, ., length, ;, ++, i, ), {, gradient, [, i, ], =]
[=, 0, ;, i, <, parameters, ., length, ;, ++, i, ), {, gradient, [, i, ], =, xn, ;]
[;, i, <, parameters, ., length, ;, ++, i, ), {, gradient, [, i, ], =, xn, ;, xn, *=]
[., length, ;, ++, i, ), {, gradient, [, i, ], =, xn, ;, xn, *=, x, ;, }, return]
[gradient, ;, }, public, double, value, (, final, double, x, ,, final, double, ..., parameters, ), throws, NoDataException, {, return]
[gradient, ;, }, public, double, value, (, final, double, x, ,, final, double, ..., parameters, ), throws, NoDataException, {, return]
[double, value, (, final, double, x, ,, final, double, ..., parameters, ), throws, NoDataException, {, return, PolynomialFunction, ., evaluate, (]
[(, final, double, x, ,, final, double, ..., parameters, ), throws, NoDataException, {, return, PolynomialFunction, ., evaluate, (, parameters, ,]
