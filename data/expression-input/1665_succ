[;, private, double, sserr, =, 0.0, ;, private, boolean, rss_set, =, false, ;, private, boolean, tol_set, =, false, ;, private]
[;, private, boolean, rss_set, =, false, ;, private, boolean, tol_set, =, false, ;, private, final, boolean, [, ], lindep, ;]
[;, private, boolean, tol_set, =, false, ;, private, final, boolean, [, ], lindep, ;, private, final, double, [, ], x_sing]
[;, private, final, boolean, [, ], lindep, ;, private, final, double, [, ], x_sing, ;, private, final, double, [, ]]
[;, private, double, sumsqy, =, 0.0, ;, private, boolean, hasIntercept, ;, private, final, double, epsilon, ;, @, SuppressWarnings, (, "unused"]
[;, private, boolean, hasIntercept, ;, private, final, double, epsilon, ;, @, SuppressWarnings, (, "unused", ), private, MillerUpdatingRegression, (, ), {]
[private, MillerUpdatingRegression, (, ), {, this, (, -, 1, ,, false, ,, Double, ., NaN, ), ;, }, public, MillerUpdatingRegression]
[), private, MillerUpdatingRegression, (, ), {, this, (, -, 1, ,, false, ,, Double, ., NaN, ), ;, }, public]
[,, false, ,, Double, ., NaN, ), ;, }, public, MillerUpdatingRegression, (, int, numberOfVariables, ,, boolean, includeConstant, ,, double, errorTolerance]
[,, false, ,, Double, ., NaN, ), ;, }, public, MillerUpdatingRegression, (, int, numberOfVariables, ,, boolean, includeConstant, ,, double, errorTolerance]
[,, Double, ., NaN, ), ;, }, public, MillerUpdatingRegression, (, int, numberOfVariables, ,, boolean, includeConstant, ,, double, errorTolerance, ), throws]
[), ;, }, public, MillerUpdatingRegression, (, int, numberOfVariables, ,, boolean, includeConstant, ,, double, errorTolerance, ), throws, ModelSpecificationException, {, if, (]
[., NaN, ), ;, }, public, MillerUpdatingRegression, (, int, numberOfVariables, ,, boolean, includeConstant, ,, double, errorTolerance, ), throws, ModelSpecificationException, {]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NO_REGRESSORS, ), ;, }, if, (, includeConstant, ), {, this, ., nvars]
[<, 1, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NO_REGRESSORS, ), ;, }, if, (, includeConstant, ), {, this]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NO_REGRESSORS, ), ;, }, if, (, includeConstant, ), {, this, ., nvars]
[;, }, if, (, includeConstant, ), {, this, ., nvars, =, numberOfVariables, +, 1, ;, }, else, {, this, .]
[), ;, }, if, (, includeConstant, ), {, this, ., nvars, =, numberOfVariables, +, 1, ;, }, else, {, this]
[., NO_REGRESSORS, ), ;, }, if, (, includeConstant, ), {, this, ., nvars, =, numberOfVariables, +, 1, ;, }, else]
[), {, this, ., nvars, =, numberOfVariables, +, 1, ;, }, else, {, this, ., nvars, =, numberOfVariables, ;, }]
[=, numberOfVariables, +, 1, ;, }, else, {, this, ., nvars, =, numberOfVariables, ;, }, this, ., hasIntercept, =, includeConstant]
[., nvars, =, numberOfVariables, +, 1, ;, }, else, {, this, ., nvars, =, numberOfVariables, ;, }, this, ., hasIntercept]
[;, }, else, {, this, ., nvars, =, numberOfVariables, ;, }, this, ., hasIntercept, =, includeConstant, ;, this, ., nobs]
[+, 1, ;, }, else, {, this, ., nvars, =, numberOfVariables, ;, }, this, ., hasIntercept, =, includeConstant, ;, this]
[;, }, else, {, this, ., nvars, =, numberOfVariables, ;, }, this, ., hasIntercept, =, includeConstant, ;, this, ., nobs]
[=, numberOfVariables, ;, }, this, ., hasIntercept, =, includeConstant, ;, this, ., nobs, =, 0, ;, this, ., d, =]
[., nvars, =, numberOfVariables, ;, }, this, ., hasIntercept, =, includeConstant, ;, this, ., nobs, =, 0, ;, this, .]
[;, }, this, ., hasIntercept, =, includeConstant, ;, this, ., nobs, =, 0, ;, this, ., d, =, new, double]
[=, includeConstant, ;, this, ., nobs, =, 0, ;, this, ., d, =, new, double, [, this, ., nvars, ]]
[., hasIntercept, =, includeConstant, ;, this, ., nobs, =, 0, ;, this, ., d, =, new, double, [, this, .]
[;, this, ., nobs, =, 0, ;, this, ., d, =, new, double, [, this, ., nvars, ], ;, this]
[=, 0, ;, this, ., d, =, new, double, [, this, ., nvars, ], ;, this, ., rhs, =, new]
[., nobs, =, 0, ;, this, ., d, =, new, double, [, this, ., nvars, ], ;, this, ., rhs]
[;, this, ., d, =, new, double, [, this, ., nvars, ], ;, this, ., rhs, =, new, double, []
[=, new, double, [, this, ., nvars, ], ;, this, ., rhs, =, new, double, [, this, ., nvars, ]]
[., d, =, new, double, [, this, ., nvars, ], ;, this, ., rhs, =, new, double, [, this, .]
[;, this, ., rhs, =, new, double, [, this, ., nvars, ], ;, this, ., r, =, new, double, []
[], ;, this, ., rhs, =, new, double, [, this, ., nvars, ], ;, this, ., r, =, new, double]
[., nvars, ], ;, this, ., rhs, =, new, double, [, this, ., nvars, ], ;, this, ., r, =]
[=, new, double, [, this, ., nvars, ], ;, this, ., r, =, new, double, [, this, ., nvars, *]
[., rhs, =, new, double, [, this, ., nvars, ], ;, this, ., r, =, new, double, [, this, .]
[;, this, ., r, =, new, double, [, this, ., nvars, *, (, this, ., nvars, -, 1, ), /]
[], ;, this, ., r, =, new, double, [, this, ., nvars, *, (, this, ., nvars, -, 1, )]
[., nvars, ], ;, this, ., r, =, new, double, [, this, ., nvars, *, (, this, ., nvars, -]
[=, new, double, [, this, ., nvars, *, (, this, ., nvars, -, 1, ), /, 2, ], ;, this]
[., r, =, new, double, [, this, ., nvars, *, (, this, ., nvars, -, 1, ), /, 2, ]]
[;, this, ., tol, =, new, double, [, this, ., nvars, ], ;, this, ., rss, =, new, double, []
[], ;, this, ., tol, =, new, double, [, this, ., nvars, ], ;, this, ., rss, =, new, double]
[/, 2, ], ;, this, ., tol, =, new, double, [, this, ., nvars, ], ;, this, ., rss, =]
[*, (, this, ., nvars, -, 1, ), /, 2, ], ;, this, ., tol, =, new, double, [, this]
[., nvars, *, (, this, ., nvars, -, 1, ), /, 2, ], ;, this, ., tol, =, new, double]
[/, 2, ], ;, this, ., tol, =, new, double, [, this, ., nvars, ], ;, this, ., rss, =]
[), /, 2, ], ;, this, ., tol, =, new, double, [, this, ., nvars, ], ;, this, ., rss]
[-, 1, ), /, 2, ], ;, this, ., tol, =, new, double, [, this, ., nvars, ], ;, this]
[., nvars, -, 1, ), /, 2, ], ;, this, ., tol, =, new, double, [, this, ., nvars, ]]
[), /, 2, ], ;, this, ., tol, =, new, double, [, this, ., nvars, ], ;, this, ., rss]
[], ;, this, ., tol, =, new, double, [, this, ., nvars, ], ;, this, ., rss, =, new, double]
[=, new, double, [, this, ., nvars, ], ;, this, ., rss, =, new, double, [, this, ., nvars, ]]
[., tol, =, new, double, [, this, ., nvars, ], ;, this, ., rss, =, new, double, [, this, .]
[;, this, ., rss, =, new, double, [, this, ., nvars, ], ;, this, ., vorder, =, new, int, []
[], ;, this, ., rss, =, new, double, [, this, ., nvars, ], ;, this, ., vorder, =, new, int]
[., nvars, ], ;, this, ., rss, =, new, double, [, this, ., nvars, ], ;, this, ., vorder, =]
[=, new, double, [, this, ., nvars, ], ;, this, ., vorder, =, new, int, [, this, ., nvars, ]]
[., rss, =, new, double, [, this, ., nvars, ], ;, this, ., vorder, =, new, int, [, this, .]
[;, this, ., vorder, =, new, int, [, this, ., nvars, ], ;, this, ., x_sing, =, new, double, []
[], ;, this, ., vorder, =, new, int, [, this, ., nvars, ], ;, this, ., x_sing, =, new, double]
[., nvars, ], ;, this, ., vorder, =, new, int, [, this, ., nvars, ], ;, this, ., x_sing, =]
[=, new, int, [, this, ., nvars, ], ;, this, ., x_sing, =, new, double, [, this, ., nvars, ]]
[., vorder, =, new, int, [, this, ., nvars, ], ;, this, ., x_sing, =, new, double, [, this, .]
[;, this, ., x_sing, =, new, double, [, this, ., nvars, ], ;, this, ., work_sing, =, new, double, []
[], ;, this, ., x_sing, =, new, double, [, this, ., nvars, ], ;, this, ., work_sing, =, new, double]
[., nvars, ], ;, this, ., x_sing, =, new, double, [, this, ., nvars, ], ;, this, ., work_sing, =]
[=, new, double, [, this, ., nvars, ], ;, this, ., work_sing, =, new, double, [, this, ., nvars, ]]
[., x_sing, =, new, double, [, this, ., nvars, ], ;, this, ., work_sing, =, new, double, [, this, .]
[;, this, ., work_sing, =, new, double, [, this, ., nvars, ], ;, this, ., work_tolset, =, new, double, []
[], ;, this, ., work_sing, =, new, double, [, this, ., nvars, ], ;, this, ., work_tolset, =, new, double]
[., nvars, ], ;, this, ., work_sing, =, new, double, [, this, ., nvars, ], ;, this, ., work_tolset, =]
[=, new, double, [, this, ., nvars, ], ;, this, ., work_tolset, =, new, double, [, this, ., nvars, ]]
[., work_sing, =, new, double, [, this, ., nvars, ], ;, this, ., work_tolset, =, new, double, [, this, .]
[;, this, ., work_tolset, =, new, double, [, this, ., nvars, ], ;, this, ., lindep, =, new, boolean, []
[], ;, this, ., work_tolset, =, new, double, [, this, ., nvars, ], ;, this, ., lindep, =, new, boolean]
[., nvars, ], ;, this, ., work_tolset, =, new, double, [, this, ., nvars, ], ;, this, ., lindep, =]
[=, new, double, [, this, ., nvars, ], ;, this, ., lindep, =, new, boolean, [, this, ., nvars, ]]
[., work_tolset, =, new, double, [, this, ., nvars, ], ;, this, ., lindep, =, new, boolean, [, this, .]
[;, this, ., lindep, =, new, boolean, [, this, ., nvars, ], ;, for, (, int, i, =, 0, ;]
[], ;, this, ., lindep, =, new, boolean, [, this, ., nvars, ], ;, for, (, int, i, =, 0]
[., nvars, ], ;, this, ., lindep, =, new, boolean, [, this, ., nvars, ], ;, for, (, int, i]
[=, new, boolean, [, this, ., nvars, ], ;, for, (, int, i, =, 0, ;, i, <, this, .]
[., lindep, =, new, boolean, [, this, ., nvars, ], ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, this, ., nvars, ;, i, ++, ), {, vorder, []
[], ;, for, (, int, i, =, 0, ;, i, <, this, ., nvars, ;, i, ++, ), {, vorder]
[., nvars, ], ;, for, (, int, i, =, 0, ;, i, <, this, ., nvars, ;, i, ++, )]
[;, i, <, this, ., nvars, ;, i, ++, ), {, vorder, [, i, ], =, i, ;, }, if]
[;, i, ++, ), {, vorder, [, i, ], =, i, ;, }, if, (, errorTolerance, >, 0, ), {]
[<, this, ., nvars, ;, i, ++, ), {, vorder, [, i, ], =, i, ;, }, if, (, errorTolerance]
[;, i, ++, ), {, vorder, [, i, ], =, i, ;, }, if, (, errorTolerance, >, 0, ), {]
[., nvars, ;, i, ++, ), {, vorder, [, i, ], =, i, ;, }, if, (, errorTolerance, >, 0]
[), {, vorder, [, i, ], =, i, ;, }, if, (, errorTolerance, >, 0, ), {, this, ., epsilon]
[++, ), {, vorder, [, i, ], =, i, ;, }, if, (, errorTolerance, >, 0, ), {, this, .]
[=, i, ;, }, if, (, errorTolerance, >, 0, ), {, this, ., epsilon, =, errorTolerance, ;, }, else, {]
[[, i, ], =, i, ;, }, if, (, errorTolerance, >, 0, ), {, this, ., epsilon, =, errorTolerance, ;]
[], =, i, ;, }, if, (, errorTolerance, >, 0, ), {, this, ., epsilon, =, errorTolerance, ;, }, else]
[;, }, if, (, errorTolerance, >, 0, ), {, this, ., epsilon, =, errorTolerance, ;, }, else, {, this, .]
[), {, this, ., epsilon, =, errorTolerance, ;, }, else, {, this, ., epsilon, =, -, errorTolerance, ;, }, }]
[>, 0, ), {, this, ., epsilon, =, errorTolerance, ;, }, else, {, this, ., epsilon, =, -, errorTolerance, ;]
[), {, this, ., epsilon, =, errorTolerance, ;, }, else, {, this, ., epsilon, =, -, errorTolerance, ;, }, }]
[=, errorTolerance, ;, }, else, {, this, ., epsilon, =, -, errorTolerance, ;, }, }, public, MillerUpdatingRegression, (, int, numberOfVariables]
[., epsilon, =, errorTolerance, ;, }, else, {, this, ., epsilon, =, -, errorTolerance, ;, }, }, public, MillerUpdatingRegression, (]
[;, }, else, {, this, ., epsilon, =, -, errorTolerance, ;, }, }, public, MillerUpdatingRegression, (, int, numberOfVariables, ,, boolean]
[=, -, errorTolerance, ;, }, }, public, MillerUpdatingRegression, (, int, numberOfVariables, ,, boolean, includeConstant, ), throws, ModelSpecificationException, {, this, (]
[., epsilon, =, -, errorTolerance, ;, }, }, public, MillerUpdatingRegression, (, int, numberOfVariables, ,, boolean, includeConstant, ), throws, ModelSpecificationException, {]
[;, }, }, public, MillerUpdatingRegression, (, int, numberOfVariables, ,, boolean, includeConstant, ), throws, ModelSpecificationException, {, this, (, numberOfVariables, ,, includeConstant]
[;, }, }, public, MillerUpdatingRegression, (, int, numberOfVariables, ,, boolean, includeConstant, ), throws, ModelSpecificationException, {, this, (, numberOfVariables, ,, includeConstant]
[,, includeConstant, ,, Precision, ., EPSILON, ), ;, }, public, boolean, hasIntercept, (, ), {, return, this, ., hasIntercept, ;]
[,, Precision, ., EPSILON, ), ;, }, public, boolean, hasIntercept, (, ), {, return, this, ., hasIntercept, ;, }, public]
[), ;, }, public, boolean, hasIntercept, (, ), {, return, this, ., hasIntercept, ;, }, public, long, getN, (, )]
[., EPSILON, ), ;, }, public, boolean, hasIntercept, (, ), {, return, this, ., hasIntercept, ;, }, public, long, getN]
[;, }, public, long, getN, (, ), {, return, this, ., nobs, ;, }, public, void, addObservation, (, final, double]
[., hasIntercept, ;, }, public, long, getN, (, ), {, return, this, ., nobs, ;, }, public, void, addObservation, (]
[;, }, public, void, addObservation, (, final, double, [, ], x, ,, final, double, y, ), throws, ModelSpecificationException, {, if]
[., nobs, ;, }, public, void, addObservation, (, final, double, [, ], x, ,, final, double, y, ), throws, ModelSpecificationException]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, ., length, ,, nvars, ), ;, }, if, (]
[||, (, this, ., hasIntercept, &&, x, ., length, +, 1, !=, nvars, ), ), {, throw, new, ModelSpecificationException, (]
[), ||, (, this, ., hasIntercept, &&, x, ., length, +, 1, !=, nvars, ), ), {, throw, new, ModelSpecificationException]
[&&, x, ., length, !=, nvars, ), ||, (, this, ., hasIntercept, &&, x, ., length, +, 1, !=, nvars]
[&&, x, ., length, !=, nvars, ), ||, (, this, ., hasIntercept, &&, x, ., length, +, 1, !=, nvars]
[., hasIntercept, &&, x, ., length, !=, nvars, ), ||, (, this, ., hasIntercept, &&, x, ., length, +, 1]
[), ||, (, this, ., hasIntercept, &&, x, ., length, +, 1, !=, nvars, ), ), {, throw, new, ModelSpecificationException]
[!=, nvars, ), ||, (, this, ., hasIntercept, &&, x, ., length, +, 1, !=, nvars, ), ), {, throw]
[., length, !=, nvars, ), ||, (, this, ., hasIntercept, &&, x, ., length, +, 1, !=, nvars, ), )]
[), ||, (, this, ., hasIntercept, &&, x, ., length, +, 1, !=, nvars, ), ), {, throw, new, ModelSpecificationException]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, ., length, ,, nvars, ), ;, }, if, (]
[), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, ., length, ,, nvars, ), ;, }, if]
[&&, x, ., length, +, 1, !=, nvars, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x]
[., hasIntercept, &&, x, ., length, +, 1, !=, nvars, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION]
[), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, ., length, ,, nvars, ), ;, }, if]
[!=, nvars, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, ., length, ,, nvars, ), ;]
[+, 1, !=, nvars, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, ., length, ,, nvars]
[., length, +, 1, !=, nvars, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, ., length]
[!=, nvars, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, ., length, ,, nvars, ), ;]
[), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, ., length, ,, nvars, ), ;, }, if]
[;, }, if, (, !, this, ., hasIntercept, ), {, include, (, MathArrays, ., copyOf, (, x, ,, x, .]
[,, x, ., length, ,, nvars, ), ;, }, if, (, !, this, ., hasIntercept, ), {, include, (, MathArrays]
[., INVALID_REGRESSION_OBSERVATION, ,, x, ., length, ,, nvars, ), ;, }, if, (, !, this, ., hasIntercept, ), {, include]
[,, nvars, ), ;, }, if, (, !, this, ., hasIntercept, ), {, include, (, MathArrays, ., copyOf, (, x]
[., length, ,, nvars, ), ;, }, if, (, !, this, ., hasIntercept, ), {, include, (, MathArrays, ., copyOf]
[), ;, }, if, (, !, this, ., hasIntercept, ), {, include, (, MathArrays, ., copyOf, (, x, ,, x]
[), {, include, (, MathArrays, ., copyOf, (, x, ,, x, ., length, ), ,, 1.0, ,, y, ), ;]
[), {, include, (, MathArrays, ., copyOf, (, x, ,, x, ., length, ), ,, 1.0, ,, y, ), ;]
[., hasIntercept, ), {, include, (, MathArrays, ., copyOf, (, x, ,, x, ., length, ), ,, 1.0, ,, y]
[;, }, else, {, final, double, [, ], tmp, =, new, double, [, x, ., length, +, 1, ], ;]
[,, 1.0, ,, y, ), ;, }, else, {, final, double, [, ], tmp, =, new, double, [, x, .]
[., copyOf, (, x, ,, x, ., length, ), ,, 1.0, ,, y, ), ;, }, else, {, final, double]
[,, x, ., length, ), ,, 1.0, ,, y, ), ;, }, else, {, final, double, [, ], tmp, =]
[), ,, 1.0, ,, y, ), ;, }, else, {, final, double, [, ], tmp, =, new, double, [, x]
[., length, ), ,, 1.0, ,, y, ), ;, }, else, {, final, double, [, ], tmp, =, new, double]
[,, y, ), ;, }, else, {, final, double, [, ], tmp, =, new, double, [, x, ., length, +]
[), ;, }, else, {, final, double, [, ], tmp, =, new, double, [, x, ., length, +, 1, ]]
[;, System, ., arraycopy, (, x, ,, 0, ,, tmp, ,, 1, ,, x, ., length, ), ;, tmp, []
[], ;, System, ., arraycopy, (, x, ,, 0, ,, tmp, ,, 1, ,, x, ., length, ), ;, tmp]
[+, 1, ], ;, System, ., arraycopy, (, x, ,, 0, ,, tmp, ,, 1, ,, x, ., length, )]
[., length, +, 1, ], ;, System, ., arraycopy, (, x, ,, 0, ,, tmp, ,, 1, ,, x, .]
[], ;, System, ., arraycopy, (, x, ,, 0, ,, tmp, ,, 1, ,, x, ., length, ), ;, tmp]
[;, tmp, [, 0, ], =, 1.0, ;, include, (, tmp, ,, 1.0, ,, y, ), ;, }, ++, nobs]
[., arraycopy, (, x, ,, 0, ,, tmp, ,, 1, ,, x, ., length, ), ;, tmp, [, 0, ]]
[,, 0, ,, tmp, ,, 1, ,, x, ., length, ), ;, tmp, [, 0, ], =, 1.0, ;, include]
[,, tmp, ,, 1, ,, x, ., length, ), ;, tmp, [, 0, ], =, 1.0, ;, include, (, tmp]
[,, 1, ,, x, ., length, ), ;, tmp, [, 0, ], =, 1.0, ;, include, (, tmp, ,, 1.0]
[,, x, ., length, ), ;, tmp, [, 0, ], =, 1.0, ;, include, (, tmp, ,, 1.0, ,, y]
[), ;, tmp, [, 0, ], =, 1.0, ;, include, (, tmp, ,, 1.0, ,, y, ), ;, }, ++]
[., length, ), ;, tmp, [, 0, ], =, 1.0, ;, include, (, tmp, ,, 1.0, ,, y, ), ;]
[=, 1.0, ;, include, (, tmp, ,, 1.0, ,, y, ), ;, }, ++, nobs, ;, }, public, void, addObservations]
[[, 0, ], =, 1.0, ;, include, (, tmp, ,, 1.0, ,, y, ), ;, }, ++, nobs, ;, }]
[], =, 1.0, ;, include, (, tmp, ,, 1.0, ,, y, ), ;, }, ++, nobs, ;, }, public, void]
[;, include, (, tmp, ,, 1.0, ,, y, ), ;, }, ++, nobs, ;, }, public, void, addObservations, (, double]
[;, }, ++, nobs, ;, }, public, void, addObservations, (, double, [, ], [, ], x, ,, double, [, ]]
[,, 1.0, ,, y, ), ;, }, ++, nobs, ;, }, public, void, addObservations, (, double, [, ], [, ]]
[,, y, ), ;, }, ++, nobs, ;, }, public, void, addObservations, (, double, [, ], [, ], x, ,]
[), ;, }, ++, nobs, ;, }, public, void, addObservations, (, double, [, ], [, ], x, ,, double, []
[;, }, public, void, addObservations, (, double, [, ], [, ], x, ,, double, [, ], y, ), throws, ModelSpecificationException]
[;, }, public, void, addObservations, (, double, [, ], [, ], x, ,, double, [, ], y, ), throws, ModelSpecificationException]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0, :, x, .]
[||, (, x, ., length, !=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,]
[||, (, y, ==, null, ), ||, (, x, ., length, !=, y, ., length, ), ), {, throw, new]
[), ||, (, y, ==, null, ), ||, (, x, ., length, !=, y, ., length, ), ), {, throw]
[==, null, ), ||, (, y, ==, null, ), ||, (, x, ., length, !=, y, ., length, ), )]
[), ||, (, y, ==, null, ), ||, (, x, ., length, !=, y, ., length, ), ), {, throw]
[||, (, x, ., length, !=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,]
[), ||, (, x, ., length, !=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE]
[==, null, ), ||, (, x, ., length, !=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats]
[), ||, (, x, ., length, !=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0, :, x, .]
[), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0, :, x]
[!=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, )]
[., length, !=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==]
[), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0, :, x]
[., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0]
[;, }, if, (, x, ., length, ==, 0, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NO_DATA, ), ;]
[,, (, x, ==, null, ), ?, 0, :, x, ., length, ,, (, y, ==, null, ), ?, 0]
[., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0, :, x, ., length, ,, (, y, ==, null, )]
[,, (, y, ==, null, ), ?, 0, :, y, ., length, ), ;, }, if, (, x, ., length]
[?, 0, :, x, ., length, ,, (, y, ==, null, ), ?, 0, :, y, ., length, ), ;]
[), ?, 0, :, x, ., length, ,, (, y, ==, null, ), ?, 0, :, y, ., length, )]
[==, null, ), ?, 0, :, x, ., length, ,, (, y, ==, null, ), ?, 0, :, y, .]
[), ?, 0, :, x, ., length, ,, (, y, ==, null, ), ?, 0, :, y, ., length, )]
[:, x, ., length, ,, (, y, ==, null, ), ?, 0, :, y, ., length, ), ;, }, if]
[,, (, y, ==, null, ), ?, 0, :, y, ., length, ), ;, }, if, (, x, ., length]
[., length, ,, (, y, ==, null, ), ?, 0, :, y, ., length, ), ;, }, if, (, x]
[), ;, }, if, (, x, ., length, ==, 0, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NO_DATA, )]
[?, 0, :, y, ., length, ), ;, }, if, (, x, ., length, ==, 0, ), {, throw, new]
[), ?, 0, :, y, ., length, ), ;, }, if, (, x, ., length, ==, 0, ), {, throw]
[==, null, ), ?, 0, :, y, ., length, ), ;, }, if, (, x, ., length, ==, 0, )]
[), ?, 0, :, y, ., length, ), ;, }, if, (, x, ., length, ==, 0, ), {, throw]
[:, y, ., length, ), ;, }, if, (, x, ., length, ==, 0, ), {, throw, new, ModelSpecificationException, (]
[), ;, }, if, (, x, ., length, ==, 0, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NO_DATA, )]
[., length, ), ;, }, if, (, x, ., length, ==, 0, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, .]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NO_DATA, ), ;, }, if, (, x, [, 0, ], ., length]
[==, 0, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NO_DATA, ), ;, }, if, (, x, [, 0, ]]
[., length, ==, 0, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NO_DATA, ), ;, }, if, (, x, []
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NO_DATA, ), ;, }, if, (, x, [, 0, ], ., length]
[;, }, if, (, x, [, 0, ], ., length, +, 1, >, x, ., length, ), {, throw, new]
[), ;, }, if, (, x, [, 0, ], ., length, +, 1, >, x, ., length, ), {, throw]
[., NO_DATA, ), ;, }, if, (, x, [, 0, ], ., length, +, 1, >, x, ., length, )]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,, x, [, 0, ], ., length]
[>, x, ., length, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,, x, []
[+, 1, >, x, ., length, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,]
[., length, +, 1, >, x, ., length, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, .]
[[, 0, ], ., length, +, 1, >, x, ., length, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS]
[], ., length, +, 1, >, x, ., length, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x]
[>, x, ., length, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,, x, []
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,, x, [, 0, ], ., length]
[., length, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,, x, [, 0, ]]
[;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, addObservation]
[,, x, ., length, ,, x, [, 0, ], ., length, ), ;, }, for, (, int, i, =, 0]
[., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, x, ., length, ,, x, [, 0, ], ., length, ), ;, }, for, (, int, i]
[,, x, [, 0, ], ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, x]
[., length, ,, x, [, 0, ], ., length, ), ;, }, for, (, int, i, =, 0, ;, i]
[), ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {]
[., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++]
[[, 0, ], ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length]
[], ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i]
[;, i, <, x, ., length, ;, i, ++, ), {, addObservation, (, x, [, i, ], ,, y, []
[;, i, ++, ), {, addObservation, (, x, [, i, ], ,, y, [, i, ], ), ;, }, }]
[<, x, ., length, ;, i, ++, ), {, addObservation, (, x, [, i, ], ,, y, [, i, ]]
[;, i, ++, ), {, addObservation, (, x, [, i, ], ,, y, [, i, ], ), ;, }, }]
[., length, ;, i, ++, ), {, addObservation, (, x, [, i, ], ,, y, [, i, ], ), ;]
[), {, addObservation, (, x, [, i, ], ,, y, [, i, ], ), ;, }, }, private, void, include]
[++, ), {, addObservation, (, x, [, i, ], ,, y, [, i, ], ), ;, }, }, private, void]
[;, }, }, private, void, include, (, final, double, [, ], x, ,, final, double, wi, ,, final, double, yi]
[,, y, [, i, ], ), ;, }, }, private, void, include, (, final, double, [, ], x, ,, final]
[[, i, ], ,, y, [, i, ], ), ;, }, }, private, void, include, (, final, double, [, ]]
[], ,, y, [, i, ], ), ;, }, }, private, void, include, (, final, double, [, ], x, ,]
[), ;, }, }, private, void, include, (, final, double, [, ], x, ,, final, double, wi, ,, final, double]
[[, i, ], ), ;, }, }, private, void, include, (, final, double, [, ], x, ,, final, double, wi]
[], ), ;, }, }, private, void, include, (, final, double, [, ], x, ,, final, double, wi, ,, final]
[;, double, w, =, wi, ;, double, y, =, yi, ;, double, xi, ;, double, di, ;, double, wxi, ;]
[;, double, y, =, yi, ;, double, xi, ;, double, di, ;, double, wxi, ;, double, dpi, ;, double, xk]
[;, double, xi, ;, double, di, ;, double, wxi, ;, double, dpi, ;, double, xk, ;, double, _w, ;, this]
[=, false, ;, sumy, =, smartAdd, (, yi, ,, sumy, ), ;, sumsqy, =, smartAdd, (, sumsqy, ,, yi, *]
[., rss_set, =, false, ;, sumy, =, smartAdd, (, yi, ,, sumy, ), ;, sumsqy, =, smartAdd, (, sumsqy, ,]
[;, sumy, =, smartAdd, (, yi, ,, sumy, ), ;, sumsqy, =, smartAdd, (, sumsqy, ,, yi, *, yi, )]
[=, smartAdd, (, yi, ,, sumy, ), ;, sumsqy, =, smartAdd, (, sumsqy, ,, yi, *, yi, ), ;, for]
[;, sumsqy, =, smartAdd, (, sumsqy, ,, yi, *, yi, ), ;, for, (, int, i, =, 0, ;, i]
[,, sumy, ), ;, sumsqy, =, smartAdd, (, sumsqy, ,, yi, *, yi, ), ;, for, (, int, i, =]
[), ;, sumsqy, =, smartAdd, (, sumsqy, ,, yi, *, yi, ), ;, for, (, int, i, =, 0, ;]
[=, smartAdd, (, sumsqy, ,, yi, *, yi, ), ;, for, (, int, i, =, 0, ;, i, <, x]
[;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if, (]
[,, yi, *, yi, ), ;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if]
[*, yi, ), ;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if]
[;, i, <, x, ., length, ;, i, ++, ), {, if, (, w, ==, 0.0, ), {, return, ;]
[;, i, ++, ), {, if, (, w, ==, 0.0, ), {, return, ;, }, xi, =, x, [, i]
[<, x, ., length, ;, i, ++, ), {, if, (, w, ==, 0.0, ), {, return, ;, }, xi]
[;, i, ++, ), {, if, (, w, ==, 0.0, ), {, return, ;, }, xi, =, x, [, i]
[., length, ;, i, ++, ), {, if, (, w, ==, 0.0, ), {, return, ;, }, xi, =, x]
[), {, if, (, w, ==, 0.0, ), {, return, ;, }, xi, =, x, [, i, ], ;, if]
[++, ), {, if, (, w, ==, 0.0, ), {, return, ;, }, xi, =, x, [, i, ], ;]
[), {, return, ;, }, xi, =, x, [, i, ], ;, if, (, xi, ==, 0.0, ), {, nextr]
[==, 0.0, ), {, return, ;, }, xi, =, x, [, i, ], ;, if, (, xi, ==, 0.0, )]
[), {, return, ;, }, xi, =, x, [, i, ], ;, if, (, xi, ==, 0.0, ), {, nextr]
[=, x, [, i, ], ;, if, (, xi, ==, 0.0, ), {, nextr, +=, nvars, -, i, -, 1]
[;, if, (, xi, ==, 0.0, ), {, nextr, +=, nvars, -, i, -, 1, ;, continue, ;, }, di]
[[, i, ], ;, if, (, xi, ==, 0.0, ), {, nextr, +=, nvars, -, i, -, 1, ;, continue]
[], ;, if, (, xi, ==, 0.0, ), {, nextr, +=, nvars, -, i, -, 1, ;, continue, ;, }]
[), {, nextr, +=, nvars, -, i, -, 1, ;, continue, ;, }, di, =, d, [, i, ], ;]
[==, 0.0, ), {, nextr, +=, nvars, -, i, -, 1, ;, continue, ;, }, di, =, d, [, i]
[), {, nextr, +=, nvars, -, i, -, 1, ;, continue, ;, }, di, =, d, [, i, ], ;]
[+=, nvars, -, i, -, 1, ;, continue, ;, }, di, =, d, [, i, ], ;, wxi, =, w]
[;, continue, ;, }, di, =, d, [, i, ], ;, wxi, =, w, *, xi, ;, _w, =, w]
[-, 1, ;, continue, ;, }, di, =, d, [, i, ], ;, wxi, =, w, *, xi, ;, _w]
[-, i, -, 1, ;, continue, ;, }, di, =, d, [, i, ], ;, wxi, =, w, *, xi]
[-, 1, ;, continue, ;, }, di, =, d, [, i, ], ;, wxi, =, w, *, xi, ;, _w]
[;, continue, ;, }, di, =, d, [, i, ], ;, wxi, =, w, *, xi, ;, _w, =, w]
[=, d, [, i, ], ;, wxi, =, w, *, xi, ;, _w, =, w, ;, if, (, di, !=]
[;, wxi, =, w, *, xi, ;, _w, =, w, ;, if, (, di, !=, 0.0, ), {, dpi, =]
[[, i, ], ;, wxi, =, w, *, xi, ;, _w, =, w, ;, if, (, di, !=, 0.0, )]
[], ;, wxi, =, w, *, xi, ;, _w, =, w, ;, if, (, di, !=, 0.0, ), {, dpi]
[=, w, *, xi, ;, _w, =, w, ;, if, (, di, !=, 0.0, ), {, dpi, =, smartAdd, (]
[;, _w, =, w, ;, if, (, di, !=, 0.0, ), {, dpi, =, smartAdd, (, di, ,, wxi, *]
[*, xi, ;, _w, =, w, ;, if, (, di, !=, 0.0, ), {, dpi, =, smartAdd, (, di, ,]
[;, _w, =, w, ;, if, (, di, !=, 0.0, ), {, dpi, =, smartAdd, (, di, ,, wxi, *]
[=, w, ;, if, (, di, !=, 0.0, ), {, dpi, =, smartAdd, (, di, ,, wxi, *, xi, )]
[;, if, (, di, !=, 0.0, ), {, dpi, =, smartAdd, (, di, ,, wxi, *, xi, ), ;, final]
[), {, dpi, =, smartAdd, (, di, ,, wxi, *, xi, ), ;, final, double, tmp, =, wxi, *, xi]
[!=, 0.0, ), {, dpi, =, smartAdd, (, di, ,, wxi, *, xi, ), ;, final, double, tmp, =, wxi]
[), {, dpi, =, smartAdd, (, di, ,, wxi, *, xi, ), ;, final, double, tmp, =, wxi, *, xi]
[=, smartAdd, (, di, ,, wxi, *, xi, ), ;, final, double, tmp, =, wxi, *, xi, /, di, ;]
[;, final, double, tmp, =, wxi, *, xi, /, di, ;, if, (, FastMath, ., abs, (, tmp, ), >]
[,, wxi, *, xi, ), ;, final, double, tmp, =, wxi, *, xi, /, di, ;, if, (, FastMath, .]
[), ;, final, double, tmp, =, wxi, *, xi, /, di, ;, if, (, FastMath, ., abs, (, tmp, )]
[*, xi, ), ;, final, double, tmp, =, wxi, *, xi, /, di, ;, if, (, FastMath, ., abs, (]
[), ;, final, double, tmp, =, wxi, *, xi, /, di, ;, if, (, FastMath, ., abs, (, tmp, )]
[;, if, (, FastMath, ., abs, (, tmp, ), >, Precision, ., EPSILON, ), {, w, =, (, di, *]
[/, di, ;, if, (, FastMath, ., abs, (, tmp, ), >, Precision, ., EPSILON, ), {, w, =, (]
[*, xi, /, di, ;, if, (, FastMath, ., abs, (, tmp, ), >, Precision, ., EPSILON, ), {, w]
[/, di, ;, if, (, FastMath, ., abs, (, tmp, ), >, Precision, ., EPSILON, ), {, w, =, (]
[;, if, (, FastMath, ., abs, (, tmp, ), >, Precision, ., EPSILON, ), {, w, =, (, di, *]
[), {, w, =, (, di, *, w, ), /, dpi, ;, }, }, else, {, dpi, =, wxi, *]
[>, Precision, ., EPSILON, ), {, w, =, (, di, *, w, ), /, dpi, ;, }, }, else, {]
[., abs, (, tmp, ), >, Precision, ., EPSILON, ), {, w, =, (, di, *, w, ), /, dpi]
[), >, Precision, ., EPSILON, ), {, w, =, (, di, *, w, ), /, dpi, ;, }, }, else]
[), {, w, =, (, di, *, w, ), /, dpi, ;, }, }, else, {, dpi, =, wxi, *]
[., EPSILON, ), {, w, =, (, di, *, w, ), /, dpi, ;, }, }, else, {, dpi, =]
[=, (, di, *, w, ), /, dpi, ;, }, }, else, {, dpi, =, wxi, *, xi, ;, w]
[;, }, }, else, {, dpi, =, wxi, *, xi, ;, w, =, 0.0, ;, }, d, [, i, ]]
[/, dpi, ;, }, }, else, {, dpi, =, wxi, *, xi, ;, w, =, 0.0, ;, }, d, []
[), /, dpi, ;, }, }, else, {, dpi, =, wxi, *, xi, ;, w, =, 0.0, ;, }, d]
[*, w, ), /, dpi, ;, }, }, else, {, dpi, =, wxi, *, xi, ;, w, =, 0.0, ;]
[), /, dpi, ;, }, }, else, {, dpi, =, wxi, *, xi, ;, w, =, 0.0, ;, }, d]
[;, }, }, else, {, dpi, =, wxi, *, xi, ;, w, =, 0.0, ;, }, d, [, i, ]]
[=, wxi, *, xi, ;, w, =, 0.0, ;, }, d, [, i, ], =, dpi, ;, for, (, int]
[;, w, =, 0.0, ;, }, d, [, i, ], =, dpi, ;, for, (, int, k, =, i, +]
[*, xi, ;, w, =, 0.0, ;, }, d, [, i, ], =, dpi, ;, for, (, int, k, =]
[;, w, =, 0.0, ;, }, d, [, i, ], =, dpi, ;, for, (, int, k, =, i, +]
[=, 0.0, ;, }, d, [, i, ], =, dpi, ;, for, (, int, k, =, i, +, 1, ;]
[;, }, d, [, i, ], =, dpi, ;, for, (, int, k, =, i, +, 1, ;, k, <]
[=, dpi, ;, for, (, int, k, =, i, +, 1, ;, k, <, nvars, ;, k, ++, ), {]
[[, i, ], =, dpi, ;, for, (, int, k, =, i, +, 1, ;, k, <, nvars, ;, k]
[], =, dpi, ;, for, (, int, k, =, i, +, 1, ;, k, <, nvars, ;, k, ++, )]
[;, for, (, int, k, =, i, +, 1, ;, k, <, nvars, ;, k, ++, ), {, xk, =]
[;, k, <, nvars, ;, k, ++, ), {, xk, =, x, [, k, ], ;, x, [, k, ]]
[+, 1, ;, k, <, nvars, ;, k, ++, ), {, xk, =, x, [, k, ], ;, x, []
[;, k, <, nvars, ;, k, ++, ), {, xk, =, x, [, k, ], ;, x, [, k, ]]
[;, k, ++, ), {, xk, =, x, [, k, ], ;, x, [, k, ], =, smartAdd, (, xk]
[<, nvars, ;, k, ++, ), {, xk, =, x, [, k, ], ;, x, [, k, ], =, smartAdd]
[;, k, ++, ), {, xk, =, x, [, k, ], ;, x, [, k, ], =, smartAdd, (, xk]
[), {, xk, =, x, [, k, ], ;, x, [, k, ], =, smartAdd, (, xk, ,, -, xi]
[++, ), {, xk, =, x, [, k, ], ;, x, [, k, ], =, smartAdd, (, xk, ,, -]
[=, x, [, k, ], ;, x, [, k, ], =, smartAdd, (, xk, ,, -, xi, *, r, []
[;, x, [, k, ], =, smartAdd, (, xk, ,, -, xi, *, r, [, nextr, ], ), ;, if]
[[, k, ], ;, x, [, k, ], =, smartAdd, (, xk, ,, -, xi, *, r, [, nextr, ]]
[], ;, x, [, k, ], =, smartAdd, (, xk, ,, -, xi, *, r, [, nextr, ], ), ;]
[=, smartAdd, (, xk, ,, -, xi, *, r, [, nextr, ], ), ;, if, (, di, !=, 0.0, )]
[[, k, ], =, smartAdd, (, xk, ,, -, xi, *, r, [, nextr, ], ), ;, if, (, di]
[], =, smartAdd, (, xk, ,, -, xi, *, r, [, nextr, ], ), ;, if, (, di, !=, 0.0]
[;, if, (, di, !=, 0.0, ), {, r, [, nextr, ], =, smartAdd, (, di, *, r, [, nextr]
[,, -, xi, *, r, [, nextr, ], ), ;, if, (, di, !=, 0.0, ), {, r, [, nextr]
[), ;, if, (, di, !=, 0.0, ), {, r, [, nextr, ], =, smartAdd, (, di, *, r, []
[*, r, [, nextr, ], ), ;, if, (, di, !=, 0.0, ), {, r, [, nextr, ], =, smartAdd]
[*, r, [, nextr, ], ), ;, if, (, di, !=, 0.0, ), {, r, [, nextr, ], =, smartAdd]
[), ;, if, (, di, !=, 0.0, ), {, r, [, nextr, ], =, smartAdd, (, di, *, r, []
[[, nextr, ], ), ;, if, (, di, !=, 0.0, ), {, r, [, nextr, ], =, smartAdd, (, di]
[], ), ;, if, (, di, !=, 0.0, ), {, r, [, nextr, ], =, smartAdd, (, di, *, r]
[), {, r, [, nextr, ], =, smartAdd, (, di, *, r, [, nextr, ], ,, (, _w, *, xi]
[!=, 0.0, ), {, r, [, nextr, ], =, smartAdd, (, di, *, r, [, nextr, ], ,, (, _w]
[), {, r, [, nextr, ], =, smartAdd, (, di, *, r, [, nextr, ], ,, (, _w, *, xi]
[=, smartAdd, (, di, *, r, [, nextr, ], ,, (, _w, *, xi, ), *, xk, ), /, dpi]
[[, nextr, ], =, smartAdd, (, di, *, r, [, nextr, ], ,, (, _w, *, xi, ), *, xk]
[], =, smartAdd, (, di, *, r, [, nextr, ], ,, (, _w, *, xi, ), *, xk, ), /]
[;, }, else, {, r, [, nextr, ], =, xk, /, xi, ;, }, ++, nextr, ;, }, xk, =]
[/, dpi, ;, }, else, {, r, [, nextr, ], =, xk, /, xi, ;, }, ++, nextr, ;, }]
[,, (, _w, *, xi, ), *, xk, ), /, dpi, ;, }, else, {, r, [, nextr, ], =]
[*, r, [, nextr, ], ,, (, _w, *, xi, ), *, xk, ), /, dpi, ;, }, else, {]
[,, (, _w, *, xi, ), *, xk, ), /, dpi, ;, }, else, {, r, [, nextr, ], =]
[[, nextr, ], ,, (, _w, *, xi, ), *, xk, ), /, dpi, ;, }, else, {, r, []
[], ,, (, _w, *, xi, ), *, xk, ), /, dpi, ;, }, else, {, r, [, nextr, ]]
[), /, dpi, ;, }, else, {, r, [, nextr, ], =, xk, /, xi, ;, }, ++, nextr, ;]
[*, xk, ), /, dpi, ;, }, else, {, r, [, nextr, ], =, xk, /, xi, ;, }, ++]
[), *, xk, ), /, dpi, ;, }, else, {, r, [, nextr, ], =, xk, /, xi, ;, }]
[*, xi, ), *, xk, ), /, dpi, ;, }, else, {, r, [, nextr, ], =, xk, /, xi]
[), *, xk, ), /, dpi, ;, }, else, {, r, [, nextr, ], =, xk, /, xi, ;, }]
[), /, dpi, ;, }, else, {, r, [, nextr, ], =, xk, /, xi, ;, }, ++, nextr, ;]
[;, }, else, {, r, [, nextr, ], =, xk, /, xi, ;, }, ++, nextr, ;, }, xk, =]
[=, xk, /, xi, ;, }, ++, nextr, ;, }, xk, =, y, ;, y, =, smartAdd, (, xk, ,]
[[, nextr, ], =, xk, /, xi, ;, }, ++, nextr, ;, }, xk, =, y, ;, y, =, smartAdd]
[], =, xk, /, xi, ;, }, ++, nextr, ;, }, xk, =, y, ;, y, =, smartAdd, (, xk]
[;, }, ++, nextr, ;, }, xk, =, y, ;, y, =, smartAdd, (, xk, ,, -, xi, *, rhs]
[/, xi, ;, }, ++, nextr, ;, }, xk, =, y, ;, y, =, smartAdd, (, xk, ,, -, xi]
[;, }, ++, nextr, ;, }, xk, =, y, ;, y, =, smartAdd, (, xk, ,, -, xi, *, rhs]
[;, }, xk, =, y, ;, y, =, smartAdd, (, xk, ,, -, xi, *, rhs, [, i, ], )]
[;, }, xk, =, y, ;, y, =, smartAdd, (, xk, ,, -, xi, *, rhs, [, i, ], )]
[=, y, ;, y, =, smartAdd, (, xk, ,, -, xi, *, rhs, [, i, ], ), ;, if, (]
[;, y, =, smartAdd, (, xk, ,, -, xi, *, rhs, [, i, ], ), ;, if, (, di, !=]
[=, smartAdd, (, xk, ,, -, xi, *, rhs, [, i, ], ), ;, if, (, di, !=, 0.0, )]
[;, if, (, di, !=, 0.0, ), {, rhs, [, i, ], =, smartAdd, (, di, *, rhs, [, i]
[,, -, xi, *, rhs, [, i, ], ), ;, if, (, di, !=, 0.0, ), {, rhs, [, i]
[), ;, if, (, di, !=, 0.0, ), {, rhs, [, i, ], =, smartAdd, (, di, *, rhs, []
[*, rhs, [, i, ], ), ;, if, (, di, !=, 0.0, ), {, rhs, [, i, ], =, smartAdd]
[*, rhs, [, i, ], ), ;, if, (, di, !=, 0.0, ), {, rhs, [, i, ], =, smartAdd]
[), ;, if, (, di, !=, 0.0, ), {, rhs, [, i, ], =, smartAdd, (, di, *, rhs, []
[[, i, ], ), ;, if, (, di, !=, 0.0, ), {, rhs, [, i, ], =, smartAdd, (, di]
[], ), ;, if, (, di, !=, 0.0, ), {, rhs, [, i, ], =, smartAdd, (, di, *, rhs]
[), {, rhs, [, i, ], =, smartAdd, (, di, *, rhs, [, i, ], ,, wxi, *, xk, )]
[!=, 0.0, ), {, rhs, [, i, ], =, smartAdd, (, di, *, rhs, [, i, ], ,, wxi, *]
[), {, rhs, [, i, ], =, smartAdd, (, di, *, rhs, [, i, ], ,, wxi, *, xk, )]
[=, smartAdd, (, di, *, rhs, [, i, ], ,, wxi, *, xk, ), /, dpi, ;, }, else, {]
[[, i, ], =, smartAdd, (, di, *, rhs, [, i, ], ,, wxi, *, xk, ), /, dpi, ;]
[], =, smartAdd, (, di, *, rhs, [, i, ], ,, wxi, *, xk, ), /, dpi, ;, }, else]
[;, }, else, {, rhs, [, i, ], =, xk, /, xi, ;, }, }, sserr, =, smartAdd, (, sserr]
[/, dpi, ;, }, else, {, rhs, [, i, ], =, xk, /, xi, ;, }, }, sserr, =, smartAdd]
[,, wxi, *, xk, ), /, dpi, ;, }, else, {, rhs, [, i, ], =, xk, /, xi, ;]
[*, rhs, [, i, ], ,, wxi, *, xk, ), /, dpi, ;, }, else, {, rhs, [, i, ]]
[,, wxi, *, xk, ), /, dpi, ;, }, else, {, rhs, [, i, ], =, xk, /, xi, ;]
[[, i, ], ,, wxi, *, xk, ), /, dpi, ;, }, else, {, rhs, [, i, ], =, xk]
[], ,, wxi, *, xk, ), /, dpi, ;, }, else, {, rhs, [, i, ], =, xk, /, xi]
[), /, dpi, ;, }, else, {, rhs, [, i, ], =, xk, /, xi, ;, }, }, sserr, =]
[*, xk, ), /, dpi, ;, }, else, {, rhs, [, i, ], =, xk, /, xi, ;, }, }]
[), /, dpi, ;, }, else, {, rhs, [, i, ], =, xk, /, xi, ;, }, }, sserr, =]
[;, }, else, {, rhs, [, i, ], =, xk, /, xi, ;, }, }, sserr, =, smartAdd, (, sserr]
[=, xk, /, xi, ;, }, }, sserr, =, smartAdd, (, sserr, ,, w, *, y, *, y, ), ;]
[[, i, ], =, xk, /, xi, ;, }, }, sserr, =, smartAdd, (, sserr, ,, w, *, y, *]
[], =, xk, /, xi, ;, }, }, sserr, =, smartAdd, (, sserr, ,, w, *, y, *, y, )]
[;, }, }, sserr, =, smartAdd, (, sserr, ,, w, *, y, *, y, ), ;, }, private, double, smartAdd]
[/, xi, ;, }, }, sserr, =, smartAdd, (, sserr, ,, w, *, y, *, y, ), ;, }, private]
[;, }, }, sserr, =, smartAdd, (, sserr, ,, w, *, y, *, y, ), ;, }, private, double, smartAdd]
[=, smartAdd, (, sserr, ,, w, *, y, *, y, ), ;, }, private, double, smartAdd, (, double, a, ,]
[;, }, private, double, smartAdd, (, double, a, ,, double, b, ), {, final, double, _a, =, FastMath, ., abs]
[,, w, *, y, *, y, ), ;, }, private, double, smartAdd, (, double, a, ,, double, b, ), {]
[), ;, }, private, double, smartAdd, (, double, a, ,, double, b, ), {, final, double, _a, =, FastMath, .]
[*, y, ), ;, }, private, double, smartAdd, (, double, a, ,, double, b, ), {, final, double, _a, =]
[*, y, *, y, ), ;, }, private, double, smartAdd, (, double, a, ,, double, b, ), {, final, double]
[*, y, ), ;, }, private, double, smartAdd, (, double, a, ,, double, b, ), {, final, double, _a, =]
[), ;, }, private, double, smartAdd, (, double, a, ,, double, b, ), {, final, double, _a, =, FastMath, .]
[;, final, double, _b, =, FastMath, ., abs, (, b, ), ;, if, (, _a, >, _b, ), {, final]
[., abs, (, a, ), ;, final, double, _b, =, FastMath, ., abs, (, b, ), ;, if, (, _a]
[), ;, final, double, _b, =, FastMath, ., abs, (, b, ), ;, if, (, _a, >, _b, ), {]
[;, if, (, _a, >, _b, ), {, final, double, eps, =, _a, *, Precision, ., EPSILON, ;, if, (]
[., abs, (, b, ), ;, if, (, _a, >, _b, ), {, final, double, eps, =, _a, *, Precision]
[), ;, if, (, _a, >, _b, ), {, final, double, eps, =, _a, *, Precision, ., EPSILON, ;, if]
[), {, final, double, eps, =, _a, *, Precision, ., EPSILON, ;, if, (, _b, >, eps, ), {, return]
[>, _b, ), {, final, double, eps, =, _a, *, Precision, ., EPSILON, ;, if, (, _b, >, eps, )]
[), {, final, double, eps, =, _a, *, Precision, ., EPSILON, ;, if, (, _b, >, eps, ), {, return]
[;, if, (, _b, >, eps, ), {, return, a, +, b, ;, }, return, a, ;, }, else, {]
[*, Precision, ., EPSILON, ;, if, (, _b, >, eps, ), {, return, a, +, b, ;, }, return, a]
[;, if, (, _b, >, eps, ), {, return, a, +, b, ;, }, return, a, ;, }, else, {]
[., EPSILON, ;, if, (, _b, >, eps, ), {, return, a, +, b, ;, }, return, a, ;, }]
[), {, return, a, +, b, ;, }, return, a, ;, }, else, {, final, double, eps, =, _b, *]
[>, eps, ), {, return, a, +, b, ;, }, return, a, ;, }, else, {, final, double, eps, =]
[), {, return, a, +, b, ;, }, return, a, ;, }, else, {, final, double, eps, =, _b, *]
[;, }, return, a, ;, }, else, {, final, double, eps, =, _b, *, Precision, ., EPSILON, ;, if, (]
[+, b, ;, }, return, a, ;, }, else, {, final, double, eps, =, _b, *, Precision, ., EPSILON, ;]
[;, }, return, a, ;, }, else, {, final, double, eps, =, _b, *, Precision, ., EPSILON, ;, if, (]
[;, }, else, {, final, double, eps, =, _b, *, Precision, ., EPSILON, ;, if, (, _a, >, eps, )]
[;, if, (, _a, >, eps, ), {, return, a, +, b, ;, }, return, b, ;, }, }, public]
[*, Precision, ., EPSILON, ;, if, (, _a, >, eps, ), {, return, a, +, b, ;, }, return, b]
[;, if, (, _a, >, eps, ), {, return, a, +, b, ;, }, return, b, ;, }, }, public]
[., EPSILON, ;, if, (, _a, >, eps, ), {, return, a, +, b, ;, }, return, b, ;, }]
[), {, return, a, +, b, ;, }, return, b, ;, }, }, public, void, clear, (, ), {, Arrays]
[>, eps, ), {, return, a, +, b, ;, }, return, b, ;, }, }, public, void, clear, (, )]
[), {, return, a, +, b, ;, }, return, b, ;, }, }, public, void, clear, (, ), {, Arrays]
[;, }, return, b, ;, }, }, public, void, clear, (, ), {, Arrays, ., fill, (, this, ., d]
[+, b, ;, }, return, b, ;, }, }, public, void, clear, (, ), {, Arrays, ., fill, (, this]
[;, }, return, b, ;, }, }, public, void, clear, (, ), {, Arrays, ., fill, (, this, ., d]
[;, }, }, public, void, clear, (, ), {, Arrays, ., fill, (, this, ., d, ,, 0.0, ), ;]
[;, Arrays, ., fill, (, this, ., rhs, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., r, ,]
[., fill, (, this, ., d, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., rhs, ,, 0.0, )]
[,, 0.0, ), ;, Arrays, ., fill, (, this, ., rhs, ,, 0.0, ), ;, Arrays, ., fill, (, this]
[., d, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., rhs, ,, 0.0, ), ;, Arrays, ., fill]
[), ;, Arrays, ., fill, (, this, ., rhs, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., r]
[;, Arrays, ., fill, (, this, ., r, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., tol, ,]
[., fill, (, this, ., rhs, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., r, ,, 0.0, )]
[,, 0.0, ), ;, Arrays, ., fill, (, this, ., r, ,, 0.0, ), ;, Arrays, ., fill, (, this]
[., rhs, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., r, ,, 0.0, ), ;, Arrays, ., fill]
[), ;, Arrays, ., fill, (, this, ., r, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., tol]
[;, Arrays, ., fill, (, this, ., tol, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., rss, ,]
[., fill, (, this, ., r, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., tol, ,, 0.0, )]
[,, 0.0, ), ;, Arrays, ., fill, (, this, ., tol, ,, 0.0, ), ;, Arrays, ., fill, (, this]
[., r, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., tol, ,, 0.0, ), ;, Arrays, ., fill]
[), ;, Arrays, ., fill, (, this, ., tol, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., rss]
[;, Arrays, ., fill, (, this, ., rss, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., work_tolset, ,]
[., fill, (, this, ., tol, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., rss, ,, 0.0, )]
[,, 0.0, ), ;, Arrays, ., fill, (, this, ., rss, ,, 0.0, ), ;, Arrays, ., fill, (, this]
[., tol, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., rss, ,, 0.0, ), ;, Arrays, ., fill]
[), ;, Arrays, ., fill, (, this, ., rss, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., work_tolset]
[;, Arrays, ., fill, (, this, ., work_tolset, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., work_sing, ,]
[., fill, (, this, ., rss, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., work_tolset, ,, 0.0, )]
[,, 0.0, ), ;, Arrays, ., fill, (, this, ., work_tolset, ,, 0.0, ), ;, Arrays, ., fill, (, this]
[., rss, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., work_tolset, ,, 0.0, ), ;, Arrays, ., fill]
[), ;, Arrays, ., fill, (, this, ., work_tolset, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., work_sing]
[;, Arrays, ., fill, (, this, ., work_sing, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., x_sing, ,]
[., fill, (, this, ., work_tolset, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., work_sing, ,, 0.0, )]
[,, 0.0, ), ;, Arrays, ., fill, (, this, ., work_sing, ,, 0.0, ), ;, Arrays, ., fill, (, this]
[., work_tolset, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., work_sing, ,, 0.0, ), ;, Arrays, ., fill]
[), ;, Arrays, ., fill, (, this, ., work_sing, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., x_sing]
[;, Arrays, ., fill, (, this, ., x_sing, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., lindep, ,]
[., fill, (, this, ., work_sing, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., x_sing, ,, 0.0, )]
[,, 0.0, ), ;, Arrays, ., fill, (, this, ., x_sing, ,, 0.0, ), ;, Arrays, ., fill, (, this]
[., work_sing, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., x_sing, ,, 0.0, ), ;, Arrays, ., fill]
[), ;, Arrays, ., fill, (, this, ., x_sing, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., lindep]
[;, Arrays, ., fill, (, this, ., lindep, ,, false, ), ;, for, (, int, i, =, 0, ;, i]
[., fill, (, this, ., x_sing, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., lindep, ,, false, )]
[,, 0.0, ), ;, Arrays, ., fill, (, this, ., lindep, ,, false, ), ;, for, (, int, i, =]
[., x_sing, ,, 0.0, ), ;, Arrays, ., fill, (, this, ., lindep, ,, false, ), ;, for, (, int]
[), ;, Arrays, ., fill, (, this, ., lindep, ,, false, ), ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, nvars, ;, i, ++, ), {, this, ., vorder, []
[., fill, (, this, ., lindep, ,, false, ), ;, for, (, int, i, =, 0, ;, i, <, nvars]
[,, false, ), ;, for, (, int, i, =, 0, ;, i, <, nvars, ;, i, ++, ), {, this]
[., lindep, ,, false, ), ;, for, (, int, i, =, 0, ;, i, <, nvars, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, nvars, ;, i, ++, ), {, this, ., vorder]
[;, i, <, nvars, ;, i, ++, ), {, this, ., vorder, [, i, ], =, i, ;, }, this]
[;, i, ++, ), {, this, ., vorder, [, i, ], =, i, ;, }, this, ., nobs, =, 0]
[<, nvars, ;, i, ++, ), {, this, ., vorder, [, i, ], =, i, ;, }, this, ., nobs]
[;, i, ++, ), {, this, ., vorder, [, i, ], =, i, ;, }, this, ., nobs, =, 0]
[), {, this, ., vorder, [, i, ], =, i, ;, }, this, ., nobs, =, 0, ;, this, .]
[++, ), {, this, ., vorder, [, i, ], =, i, ;, }, this, ., nobs, =, 0, ;, this]
[=, i, ;, }, this, ., nobs, =, 0, ;, this, ., sserr, =, 0.0, ;, this, ., sumy, =]
[[, i, ], =, i, ;, }, this, ., nobs, =, 0, ;, this, ., sserr, =, 0.0, ;, this]
[., vorder, [, i, ], =, i, ;, }, this, ., nobs, =, 0, ;, this, ., sserr, =, 0.0]
[], =, i, ;, }, this, ., nobs, =, 0, ;, this, ., sserr, =, 0.0, ;, this, ., sumy]
[;, }, this, ., nobs, =, 0, ;, this, ., sserr, =, 0.0, ;, this, ., sumy, =, 0.0, ;]
[=, 0, ;, this, ., sserr, =, 0.0, ;, this, ., sumy, =, 0.0, ;, this, ., sumsqy, =, 0.0]
[., nobs, =, 0, ;, this, ., sserr, =, 0.0, ;, this, ., sumy, =, 0.0, ;, this, ., sumsqy]
[;, this, ., sserr, =, 0.0, ;, this, ., sumy, =, 0.0, ;, this, ., sumsqy, =, 0.0, ;, this]
[=, 0.0, ;, this, ., sumy, =, 0.0, ;, this, ., sumsqy, =, 0.0, ;, this, ., rss_set, =, false]
[., sserr, =, 0.0, ;, this, ., sumy, =, 0.0, ;, this, ., sumsqy, =, 0.0, ;, this, ., rss_set]
[;, this, ., sumy, =, 0.0, ;, this, ., sumsqy, =, 0.0, ;, this, ., rss_set, =, false, ;, this]
[=, 0.0, ;, this, ., sumsqy, =, 0.0, ;, this, ., rss_set, =, false, ;, this, ., tol_set, =, false]
[., sumy, =, 0.0, ;, this, ., sumsqy, =, 0.0, ;, this, ., rss_set, =, false, ;, this, ., tol_set]
[;, this, ., sumsqy, =, 0.0, ;, this, ., rss_set, =, false, ;, this, ., tol_set, =, false, ;, }]
[=, 0.0, ;, this, ., rss_set, =, false, ;, this, ., tol_set, =, false, ;, }, private, void, tolset, (]
[., sumsqy, =, 0.0, ;, this, ., rss_set, =, false, ;, this, ., tol_set, =, false, ;, }, private, void]
[;, this, ., rss_set, =, false, ;, this, ., tol_set, =, false, ;, }, private, void, tolset, (, ), {]
[=, false, ;, this, ., tol_set, =, false, ;, }, private, void, tolset, (, ), {, int, pos, ;, double]
[., rss_set, =, false, ;, this, ., tol_set, =, false, ;, }, private, void, tolset, (, ), {, int, pos]
[;, this, ., tol_set, =, false, ;, }, private, void, tolset, (, ), {, int, pos, ;, double, total, ;]
[=, false, ;, }, private, void, tolset, (, ), {, int, pos, ;, double, total, ;, final, double, eps, =]
[., tol_set, =, false, ;, }, private, void, tolset, (, ), {, int, pos, ;, double, total, ;, final, double]
[;, }, private, void, tolset, (, ), {, int, pos, ;, double, total, ;, final, double, eps, =, this, .]
[;, for, (, int, i, =, 0, ;, i, <, nvars, ;, i, ++, ), {, this, ., work_tolset, []
[., epsilon, ;, for, (, int, i, =, 0, ;, i, <, nvars, ;, i, ++, ), {, this, .]
[;, i, <, nvars, ;, i, ++, ), {, this, ., work_tolset, [, i, ], =, Math, ., sqrt, (]
[;, i, ++, ), {, this, ., work_tolset, [, i, ], =, Math, ., sqrt, (, d, [, i, ]]
[<, nvars, ;, i, ++, ), {, this, ., work_tolset, [, i, ], =, Math, ., sqrt, (, d, []
[;, i, ++, ), {, this, ., work_tolset, [, i, ], =, Math, ., sqrt, (, d, [, i, ]]
[), {, this, ., work_tolset, [, i, ], =, Math, ., sqrt, (, d, [, i, ], ), ;, }]
[++, ), {, this, ., work_tolset, [, i, ], =, Math, ., sqrt, (, d, [, i, ], ), ;]
[=, Math, ., sqrt, (, d, [, i, ], ), ;, }, tol, [, 0, ], =, eps, *, this]
[[, i, ], =, Math, ., sqrt, (, d, [, i, ], ), ;, }, tol, [, 0, ], =]
[., work_tolset, [, i, ], =, Math, ., sqrt, (, d, [, i, ], ), ;, }, tol, [, 0]
[], =, Math, ., sqrt, (, d, [, i, ], ), ;, }, tol, [, 0, ], =, eps, *]
[;, }, tol, [, 0, ], =, eps, *, this, ., work_tolset, [, 0, ], ;, for, (, int, col]
[., sqrt, (, d, [, i, ], ), ;, }, tol, [, 0, ], =, eps, *, this, ., work_tolset]
[), ;, }, tol, [, 0, ], =, eps, *, this, ., work_tolset, [, 0, ], ;, for, (, int]
[[, i, ], ), ;, }, tol, [, 0, ], =, eps, *, this, ., work_tolset, [, 0, ], ;]
[], ), ;, }, tol, [, 0, ], =, eps, *, this, ., work_tolset, [, 0, ], ;, for, (]
[=, eps, *, this, ., work_tolset, [, 0, ], ;, for, (, int, col, =, 1, ;, col, <, nvars]
[[, 0, ], =, eps, *, this, ., work_tolset, [, 0, ], ;, for, (, int, col, =, 1, ;]
[], =, eps, *, this, ., work_tolset, [, 0, ], ;, for, (, int, col, =, 1, ;, col, <]
[;, for, (, int, col, =, 1, ;, col, <, nvars, ;, col, ++, ), {, pos, =, col, -]
[*, this, ., work_tolset, [, 0, ], ;, for, (, int, col, =, 1, ;, col, <, nvars, ;, col]
[;, for, (, int, col, =, 1, ;, col, <, nvars, ;, col, ++, ), {, pos, =, col, -]
[[, 0, ], ;, for, (, int, col, =, 1, ;, col, <, nvars, ;, col, ++, ), {, pos]
[., work_tolset, [, 0, ], ;, for, (, int, col, =, 1, ;, col, <, nvars, ;, col, ++, )]
[], ;, for, (, int, col, =, 1, ;, col, <, nvars, ;, col, ++, ), {, pos, =, col]
[;, col, <, nvars, ;, col, ++, ), {, pos, =, col, -, 1, ;, total, =, work_tolset, [, col]
[;, col, ++, ), {, pos, =, col, -, 1, ;, total, =, work_tolset, [, col, ], ;, for, (]
[<, nvars, ;, col, ++, ), {, pos, =, col, -, 1, ;, total, =, work_tolset, [, col, ], ;]
[;, col, ++, ), {, pos, =, col, -, 1, ;, total, =, work_tolset, [, col, ], ;, for, (]
[), {, pos, =, col, -, 1, ;, total, =, work_tolset, [, col, ], ;, for, (, int, row, =]
[++, ), {, pos, =, col, -, 1, ;, total, =, work_tolset, [, col, ], ;, for, (, int, row]
[=, col, -, 1, ;, total, =, work_tolset, [, col, ], ;, for, (, int, row, =, 0, ;, row]
[;, total, =, work_tolset, [, col, ], ;, for, (, int, row, =, 0, ;, row, <, col, ;, row]
[-, 1, ;, total, =, work_tolset, [, col, ], ;, for, (, int, row, =, 0, ;, row, <, col]
[;, total, =, work_tolset, [, col, ], ;, for, (, int, row, =, 0, ;, row, <, col, ;, row]
[=, work_tolset, [, col, ], ;, for, (, int, row, =, 0, ;, row, <, col, ;, row, ++, )]
[;, for, (, int, row, =, 0, ;, row, <, col, ;, row, ++, ), {, total, +=, Math, .]
[[, col, ], ;, for, (, int, row, =, 0, ;, row, <, col, ;, row, ++, ), {, total]
[], ;, for, (, int, row, =, 0, ;, row, <, col, ;, row, ++, ), {, total, +=, Math]
[;, row, <, col, ;, row, ++, ), {, total, +=, Math, ., abs, (, r, [, pos, ], )]
[;, row, ++, ), {, total, +=, Math, ., abs, (, r, [, pos, ], ), *, work_tolset, [, row]
[<, col, ;, row, ++, ), {, total, +=, Math, ., abs, (, r, [, pos, ], ), *, work_tolset]
[;, row, ++, ), {, total, +=, Math, ., abs, (, r, [, pos, ], ), *, work_tolset, [, row]
[), {, total, +=, Math, ., abs, (, r, [, pos, ], ), *, work_tolset, [, row, ], ;, pos]
[++, ), {, total, +=, Math, ., abs, (, r, [, pos, ], ), *, work_tolset, [, row, ], ;]
[+=, Math, ., abs, (, r, [, pos, ], ), *, work_tolset, [, row, ], ;, pos, +=, nvars, -]
[;, pos, +=, nvars, -, row, -, 2, ;, }, tol, [, col, ], =, eps, *, total, ;, }]
[*, work_tolset, [, row, ], ;, pos, +=, nvars, -, row, -, 2, ;, }, tol, [, col, ], =]
[., abs, (, r, [, pos, ], ), *, work_tolset, [, row, ], ;, pos, +=, nvars, -, row, -]
[), *, work_tolset, [, row, ], ;, pos, +=, nvars, -, row, -, 2, ;, }, tol, [, col, ]]
[[, pos, ], ), *, work_tolset, [, row, ], ;, pos, +=, nvars, -, row, -, 2, ;, }, tol]
[], ), *, work_tolset, [, row, ], ;, pos, +=, nvars, -, row, -, 2, ;, }, tol, [, col]
[;, pos, +=, nvars, -, row, -, 2, ;, }, tol, [, col, ], =, eps, *, total, ;, }]
[[, row, ], ;, pos, +=, nvars, -, row, -, 2, ;, }, tol, [, col, ], =, eps, *]
[], ;, pos, +=, nvars, -, row, -, 2, ;, }, tol, [, col, ], =, eps, *, total, ;]
[+=, nvars, -, row, -, 2, ;, }, tol, [, col, ], =, eps, *, total, ;, }, tol_set, =]
[;, }, tol, [, col, ], =, eps, *, total, ;, }, tol_set, =, true, ;, }, private, double, []
[-, 2, ;, }, tol, [, col, ], =, eps, *, total, ;, }, tol_set, =, true, ;, }, private]
[-, row, -, 2, ;, }, tol, [, col, ], =, eps, *, total, ;, }, tol_set, =, true, ;]
[-, 2, ;, }, tol, [, col, ], =, eps, *, total, ;, }, tol_set, =, true, ;, }, private]
[;, }, tol, [, col, ], =, eps, *, total, ;, }, tol_set, =, true, ;, }, private, double, []
[=, eps, *, total, ;, }, tol_set, =, true, ;, }, private, double, [, ], regcf, (, int, nreq, )]
[[, col, ], =, eps, *, total, ;, }, tol_set, =, true, ;, }, private, double, [, ], regcf, (]
[], =, eps, *, total, ;, }, tol_set, =, true, ;, }, private, double, [, ], regcf, (, int, nreq]
[;, }, tol_set, =, true, ;, }, private, double, [, ], regcf, (, int, nreq, ), throws, ModelSpecificationException, {, int]
[*, total, ;, }, tol_set, =, true, ;, }, private, double, [, ], regcf, (, int, nreq, ), throws, ModelSpecificationException]
[;, }, tol_set, =, true, ;, }, private, double, [, ], regcf, (, int, nreq, ), throws, ModelSpecificationException, {, int]
[=, true, ;, }, private, double, [, ], regcf, (, int, nreq, ), throws, ModelSpecificationException, {, int, nextr, ;, if]
[;, }, private, double, [, ], regcf, (, int, nreq, ), throws, ModelSpecificationException, {, int, nextr, ;, if, (, nreq]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NO_REGRESSORS, ), ;, }, if, (, nreq, >, this, ., nvars, )]
[<, 1, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NO_REGRESSORS, ), ;, }, if, (, nreq, >, this, .]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NO_REGRESSORS, ), ;, }, if, (, nreq, >, this, ., nvars, )]
[;, }, if, (, nreq, >, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, nreq]
[), ;, }, if, (, nreq, >, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,]
[., NO_REGRESSORS, ), ;, }, if, (, nreq, >, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, .]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, nreq, ,, this, ., nvars, ), ;, }, if, (]
[>, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, nreq, ,, this, ., nvars, )]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, nreq, ,, this, ., nvars, ), ;, }, if, (]
[., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, nreq, ,, this, ., nvars, ), ;, }]
[;, }, if, (, !, this, ., tol_set, ), {, tolset, (, ), ;, }, final, double, [, ], ret]
[,, nreq, ,, this, ., nvars, ), ;, }, if, (, !, this, ., tol_set, ), {, tolset, (, )]
[., TOO_MANY_REGRESSORS, ,, nreq, ,, this, ., nvars, ), ;, }, if, (, !, this, ., tol_set, ), {, tolset]
[,, this, ., nvars, ), ;, }, if, (, !, this, ., tol_set, ), {, tolset, (, ), ;, }]
[), ;, }, if, (, !, this, ., tol_set, ), {, tolset, (, ), ;, }, final, double, [, ]]
[., nvars, ), ;, }, if, (, !, this, ., tol_set, ), {, tolset, (, ), ;, }, final, double]
[), {, tolset, (, ), ;, }, final, double, [, ], ret, =, new, double, [, nreq, ], ;, boolean]
[), {, tolset, (, ), ;, }, final, double, [, ], ret, =, new, double, [, nreq, ], ;, boolean]
[., tol_set, ), {, tolset, (, ), ;, }, final, double, [, ], ret, =, new, double, [, nreq, ]]
[;, }, final, double, [, ], ret, =, new, double, [, nreq, ], ;, boolean, rankProblem, =, false, ;, for]
[;, boolean, rankProblem, =, false, ;, for, (, int, i, =, nreq, -, 1, ;, i, >, -, 1, ;]
[], ;, boolean, rankProblem, =, false, ;, for, (, int, i, =, nreq, -, 1, ;, i, >, -, 1]
[;, for, (, int, i, =, nreq, -, 1, ;, i, >, -, 1, ;, i, --, ), {, if]
[;, i, >, -, 1, ;, i, --, ), {, if, (, Math, ., sqrt, (, d, [, i, ]]
[-, 1, ;, i, >, -, 1, ;, i, --, ), {, if, (, Math, ., sqrt, (, d, []
[;, i, >, -, 1, ;, i, --, ), {, if, (, Math, ., sqrt, (, d, [, i, ]]
[;, i, --, ), {, if, (, Math, ., sqrt, (, d, [, i, ], ), <, tol, [, i]
[>, -, 1, ;, i, --, ), {, if, (, Math, ., sqrt, (, d, [, i, ], ), <]
[;, i, --, ), {, if, (, Math, ., sqrt, (, d, [, i, ], ), <, tol, [, i]
[;, i, --, ), {, if, (, Math, ., sqrt, (, d, [, i, ], ), <, tol, [, i]
[), {, if, (, Math, ., sqrt, (, d, [, i, ], ), <, tol, [, i, ], ), {]
[--, ), {, if, (, Math, ., sqrt, (, d, [, i, ], ), <, tol, [, i, ], )]
[), {, ret, [, i, ], =, 0.0, ;, d, [, i, ], =, 0.0, ;, rankProblem, =, true, ;]
[<, tol, [, i, ], ), {, ret, [, i, ], =, 0.0, ;, d, [, i, ], =, 0.0]
[., sqrt, (, d, [, i, ], ), <, tol, [, i, ], ), {, ret, [, i, ], =]
[), <, tol, [, i, ], ), {, ret, [, i, ], =, 0.0, ;, d, [, i, ], =]
[[, i, ], ), <, tol, [, i, ], ), {, ret, [, i, ], =, 0.0, ;, d, []
[], ), <, tol, [, i, ], ), {, ret, [, i, ], =, 0.0, ;, d, [, i, ]]
[), {, ret, [, i, ], =, 0.0, ;, d, [, i, ], =, 0.0, ;, rankProblem, =, true, ;]
[[, i, ], ), {, ret, [, i, ], =, 0.0, ;, d, [, i, ], =, 0.0, ;, rankProblem]
[], ), {, ret, [, i, ], =, 0.0, ;, d, [, i, ], =, 0.0, ;, rankProblem, =, true]
[=, 0.0, ;, d, [, i, ], =, 0.0, ;, rankProblem, =, true, ;, }, else, {, ret, [, i]
[[, i, ], =, 0.0, ;, d, [, i, ], =, 0.0, ;, rankProblem, =, true, ;, }, else, {]
[], =, 0.0, ;, d, [, i, ], =, 0.0, ;, rankProblem, =, true, ;, }, else, {, ret, []
[;, d, [, i, ], =, 0.0, ;, rankProblem, =, true, ;, }, else, {, ret, [, i, ], =]
[=, 0.0, ;, rankProblem, =, true, ;, }, else, {, ret, [, i, ], =, rhs, [, i, ], ;]
[[, i, ], =, 0.0, ;, rankProblem, =, true, ;, }, else, {, ret, [, i, ], =, rhs, []
[], =, 0.0, ;, rankProblem, =, true, ;, }, else, {, ret, [, i, ], =, rhs, [, i, ]]
[;, rankProblem, =, true, ;, }, else, {, ret, [, i, ], =, rhs, [, i, ], ;, nextr, =]
[=, true, ;, }, else, {, ret, [, i, ], =, rhs, [, i, ], ;, nextr, =, i, *]
[;, }, else, {, ret, [, i, ], =, rhs, [, i, ], ;, nextr, =, i, *, (, nvars]
[=, rhs, [, i, ], ;, nextr, =, i, *, (, nvars, +, nvars, -, i, -, 1, ), /]
[[, i, ], =, rhs, [, i, ], ;, nextr, =, i, *, (, nvars, +, nvars, -, i, -]
[], =, rhs, [, i, ], ;, nextr, =, i, *, (, nvars, +, nvars, -, i, -, 1, )]
[;, nextr, =, i, *, (, nvars, +, nvars, -, i, -, 1, ), /, 2, ;, for, (, int]
[[, i, ], ;, nextr, =, i, *, (, nvars, +, nvars, -, i, -, 1, ), /, 2, ;]
[], ;, nextr, =, i, *, (, nvars, +, nvars, -, i, -, 1, ), /, 2, ;, for, (]
[=, i, *, (, nvars, +, nvars, -, i, -, 1, ), /, 2, ;, for, (, int, j, =]
[;, for, (, int, j, =, i, +, 1, ;, j, <, nreq, ;, j, ++, ), {, ret, []
[/, 2, ;, for, (, int, j, =, i, +, 1, ;, j, <, nreq, ;, j, ++, ), {]
[*, (, nvars, +, nvars, -, i, -, 1, ), /, 2, ;, for, (, int, j, =, i, +]
[/, 2, ;, for, (, int, j, =, i, +, 1, ;, j, <, nreq, ;, j, ++, ), {]
[), /, 2, ;, for, (, int, j, =, i, +, 1, ;, j, <, nreq, ;, j, ++, )]
[-, 1, ), /, 2, ;, for, (, int, j, =, i, +, 1, ;, j, <, nreq, ;, j]
[-, i, -, 1, ), /, 2, ;, for, (, int, j, =, i, +, 1, ;, j, <, nreq]
[+, nvars, -, i, -, 1, ), /, 2, ;, for, (, int, j, =, i, +, 1, ;, j]
[-, i, -, 1, ), /, 2, ;, for, (, int, j, =, i, +, 1, ;, j, <, nreq]
[-, 1, ), /, 2, ;, for, (, int, j, =, i, +, 1, ;, j, <, nreq, ;, j]
[), /, 2, ;, for, (, int, j, =, i, +, 1, ;, j, <, nreq, ;, j, ++, )]
[;, for, (, int, j, =, i, +, 1, ;, j, <, nreq, ;, j, ++, ), {, ret, []
[;, j, <, nreq, ;, j, ++, ), {, ret, [, i, ], =, smartAdd, (, ret, [, i, ]]
[+, 1, ;, j, <, nreq, ;, j, ++, ), {, ret, [, i, ], =, smartAdd, (, ret, []
[;, j, <, nreq, ;, j, ++, ), {, ret, [, i, ], =, smartAdd, (, ret, [, i, ]]
[;, j, ++, ), {, ret, [, i, ], =, smartAdd, (, ret, [, i, ], ,, -, r, []
[<, nreq, ;, j, ++, ), {, ret, [, i, ], =, smartAdd, (, ret, [, i, ], ,, -]
[;, j, ++, ), {, ret, [, i, ], =, smartAdd, (, ret, [, i, ], ,, -, r, []
[), {, ret, [, i, ], =, smartAdd, (, ret, [, i, ], ,, -, r, [, nextr, ], *]
[++, ), {, ret, [, i, ], =, smartAdd, (, ret, [, i, ], ,, -, r, [, nextr, ]]
[=, smartAdd, (, ret, [, i, ], ,, -, r, [, nextr, ], *, ret, [, j, ], ), ;]
[[, i, ], =, smartAdd, (, ret, [, i, ], ,, -, r, [, nextr, ], *, ret, [, j]
[], =, smartAdd, (, ret, [, i, ], ,, -, r, [, nextr, ], *, ret, [, j, ], )]
[;, ++, nextr, ;, }, }, }, if, (, rankProblem, ), {, for, (, int, i, =, 0, ;, i]
[,, -, r, [, nextr, ], *, ret, [, j, ], ), ;, ++, nextr, ;, }, }, }, if]
[[, i, ], ,, -, r, [, nextr, ], *, ret, [, j, ], ), ;, ++, nextr, ;, }]
[], ,, -, r, [, nextr, ], *, ret, [, j, ], ), ;, ++, nextr, ;, }, }, }]
[), ;, ++, nextr, ;, }, }, }, if, (, rankProblem, ), {, for, (, int, i, =, 0, ;]
[*, ret, [, j, ], ), ;, ++, nextr, ;, }, }, }, if, (, rankProblem, ), {, for, (]
[*, ret, [, j, ], ), ;, ++, nextr, ;, }, }, }, if, (, rankProblem, ), {, for, (]
[[, nextr, ], *, ret, [, j, ], ), ;, ++, nextr, ;, }, }, }, if, (, rankProblem, )]
[], *, ret, [, j, ], ), ;, ++, nextr, ;, }, }, }, if, (, rankProblem, ), {, for]
[), ;, ++, nextr, ;, }, }, }, if, (, rankProblem, ), {, for, (, int, i, =, 0, ;]
[[, j, ], ), ;, ++, nextr, ;, }, }, }, if, (, rankProblem, ), {, for, (, int, i]
[], ), ;, ++, nextr, ;, }, }, }, if, (, rankProblem, ), {, for, (, int, i, =, 0]
[;, }, }, }, if, (, rankProblem, ), {, for, (, int, i, =, 0, ;, i, <, nreq, ;]
[;, }, }, }, if, (, rankProblem, ), {, for, (, int, i, =, 0, ;, i, <, nreq, ;]
[), {, for, (, int, i, =, 0, ;, i, <, nreq, ;, i, ++, ), {, if, (, this]
[;, i, <, nreq, ;, i, ++, ), {, if, (, this, ., lindep, [, i, ], ), {, ret]
[;, i, ++, ), {, if, (, this, ., lindep, [, i, ], ), {, ret, [, i, ], =]
[<, nreq, ;, i, ++, ), {, if, (, this, ., lindep, [, i, ], ), {, ret, [, i]
[;, i, ++, ), {, if, (, this, ., lindep, [, i, ], ), {, ret, [, i, ], =]
[), {, if, (, this, ., lindep, [, i, ], ), {, ret, [, i, ], =, Double, ., NaN]
[++, ), {, if, (, this, ., lindep, [, i, ], ), {, ret, [, i, ], =, Double, .]
[), {, ret, [, i, ], =, Double, ., NaN, ;, }, }, }, return, ret, ;, }, private, void]
[[, i, ], ), {, ret, [, i, ], =, Double, ., NaN, ;, }, }, }, return, ret, ;]
[., lindep, [, i, ], ), {, ret, [, i, ], =, Double, ., NaN, ;, }, }, }, return]
[], ), {, ret, [, i, ], =, Double, ., NaN, ;, }, }, }, return, ret, ;, }, private]
[=, Double, ., NaN, ;, }, }, }, return, ret, ;, }, private, void, singcheck, (, ), {, int, pos]
[[, i, ], =, Double, ., NaN, ;, }, }, }, return, ret, ;, }, private, void, singcheck, (, )]
[], =, Double, ., NaN, ;, }, }, }, return, ret, ;, }, private, void, singcheck, (, ), {, int]
[;, }, }, }, return, ret, ;, }, private, void, singcheck, (, ), {, int, pos, ;, for, (, int]
[., NaN, ;, }, }, }, return, ret, ;, }, private, void, singcheck, (, ), {, int, pos, ;, for]
[;, }, private, void, singcheck, (, ), {, int, pos, ;, for, (, int, i, =, 0, ;, i, <]
[;, i, <, nvars, ;, i, ++, ), {, work_sing, [, i, ], =, Math, ., sqrt, (, d, []
[;, i, ++, ), {, work_sing, [, i, ], =, Math, ., sqrt, (, d, [, i, ], ), ;]
[<, nvars, ;, i, ++, ), {, work_sing, [, i, ], =, Math, ., sqrt, (, d, [, i, ]]
[;, i, ++, ), {, work_sing, [, i, ], =, Math, ., sqrt, (, d, [, i, ], ), ;]
[), {, work_sing, [, i, ], =, Math, ., sqrt, (, d, [, i, ], ), ;, }, for, (]
[++, ), {, work_sing, [, i, ], =, Math, ., sqrt, (, d, [, i, ], ), ;, }, for]
[=, Math, ., sqrt, (, d, [, i, ], ), ;, }, for, (, int, col, =, 0, ;, col]
[[, i, ], =, Math, ., sqrt, (, d, [, i, ], ), ;, }, for, (, int, col, =]
[], =, Math, ., sqrt, (, d, [, i, ], ), ;, }, for, (, int, col, =, 0, ;]
[;, }, for, (, int, col, =, 0, ;, col, <, nvars, ;, col, ++, ), {, final, double, temp]
[., sqrt, (, d, [, i, ], ), ;, }, for, (, int, col, =, 0, ;, col, <, nvars]
[), ;, }, for, (, int, col, =, 0, ;, col, <, nvars, ;, col, ++, ), {, final, double]
[[, i, ], ), ;, }, for, (, int, col, =, 0, ;, col, <, nvars, ;, col, ++, )]
[], ), ;, }, for, (, int, col, =, 0, ;, col, <, nvars, ;, col, ++, ), {, final]
[;, col, <, nvars, ;, col, ++, ), {, final, double, temp, =, tol, [, col, ], ;, pos, =]
[;, col, ++, ), {, final, double, temp, =, tol, [, col, ], ;, pos, =, col, -, 1, ;]
[<, nvars, ;, col, ++, ), {, final, double, temp, =, tol, [, col, ], ;, pos, =, col, -]
[;, col, ++, ), {, final, double, temp, =, tol, [, col, ], ;, pos, =, col, -, 1, ;]
[), {, final, double, temp, =, tol, [, col, ], ;, pos, =, col, -, 1, ;, for, (, int]
[++, ), {, final, double, temp, =, tol, [, col, ], ;, pos, =, col, -, 1, ;, for, (]
[;, pos, =, col, -, 1, ;, for, (, int, row, =, 0, ;, row, <, col, -, 1, ;]
[[, col, ], ;, pos, =, col, -, 1, ;, for, (, int, row, =, 0, ;, row, <, col]
[], ;, pos, =, col, -, 1, ;, for, (, int, row, =, 0, ;, row, <, col, -, 1]
[=, col, -, 1, ;, for, (, int, row, =, 0, ;, row, <, col, -, 1, ;, row, ++]
[;, for, (, int, row, =, 0, ;, row, <, col, -, 1, ;, row, ++, ), {, if, (]
[-, 1, ;, for, (, int, row, =, 0, ;, row, <, col, -, 1, ;, row, ++, ), {]
[;, for, (, int, row, =, 0, ;, row, <, col, -, 1, ;, row, ++, ), {, if, (]
[;, row, <, col, -, 1, ;, row, ++, ), {, if, (, Math, ., abs, (, r, [, pos]
[;, row, ++, ), {, if, (, Math, ., abs, (, r, [, pos, ], ), *, work_sing, [, row]
[<, col, -, 1, ;, row, ++, ), {, if, (, Math, ., abs, (, r, [, pos, ], )]
[;, row, ++, ), {, if, (, Math, ., abs, (, r, [, pos, ], ), *, work_sing, [, row]
[-, 1, ;, row, ++, ), {, if, (, Math, ., abs, (, r, [, pos, ], ), *, work_sing]
[;, row, ++, ), {, if, (, Math, ., abs, (, r, [, pos, ], ), *, work_sing, [, row]
[), {, if, (, Math, ., abs, (, r, [, pos, ], ), *, work_sing, [, row, ], <, temp]
[++, ), {, if, (, Math, ., abs, (, r, [, pos, ], ), *, work_sing, [, row, ], <]
[), {, r, [, pos, ], =, 0.0, ;, }, pos, +=, nvars, -, row, -, 2, ;, }, lindep]
[<, temp, ), {, r, [, pos, ], =, 0.0, ;, }, pos, +=, nvars, -, row, -, 2, ;]
[*, work_sing, [, row, ], <, temp, ), {, r, [, pos, ], =, 0.0, ;, }, pos, +=, nvars]
[., abs, (, r, [, pos, ], ), *, work_sing, [, row, ], <, temp, ), {, r, [, pos]
[), *, work_sing, [, row, ], <, temp, ), {, r, [, pos, ], =, 0.0, ;, }, pos, +=]
[[, pos, ], ), *, work_sing, [, row, ], <, temp, ), {, r, [, pos, ], =, 0.0, ;]
[], ), *, work_sing, [, row, ], <, temp, ), {, r, [, pos, ], =, 0.0, ;, }, pos]
[<, temp, ), {, r, [, pos, ], =, 0.0, ;, }, pos, +=, nvars, -, row, -, 2, ;]
[[, row, ], <, temp, ), {, r, [, pos, ], =, 0.0, ;, }, pos, +=, nvars, -, row]
[], <, temp, ), {, r, [, pos, ], =, 0.0, ;, }, pos, +=, nvars, -, row, -, 2]
[), {, r, [, pos, ], =, 0.0, ;, }, pos, +=, nvars, -, row, -, 2, ;, }, lindep]
[=, 0.0, ;, }, pos, +=, nvars, -, row, -, 2, ;, }, lindep, [, col, ], =, false, ;]
[[, pos, ], =, 0.0, ;, }, pos, +=, nvars, -, row, -, 2, ;, }, lindep, [, col, ]]
[], =, 0.0, ;, }, pos, +=, nvars, -, row, -, 2, ;, }, lindep, [, col, ], =, false]
[;, }, pos, +=, nvars, -, row, -, 2, ;, }, lindep, [, col, ], =, false, ;, if, (]
[+=, nvars, -, row, -, 2, ;, }, lindep, [, col, ], =, false, ;, if, (, work_sing, [, col]
[;, }, lindep, [, col, ], =, false, ;, if, (, work_sing, [, col, ], <, temp, ), {, lindep]
[-, 2, ;, }, lindep, [, col, ], =, false, ;, if, (, work_sing, [, col, ], <, temp, )]
[-, row, -, 2, ;, }, lindep, [, col, ], =, false, ;, if, (, work_sing, [, col, ], <]
[-, 2, ;, }, lindep, [, col, ], =, false, ;, if, (, work_sing, [, col, ], <, temp, )]
[;, }, lindep, [, col, ], =, false, ;, if, (, work_sing, [, col, ], <, temp, ), {, lindep]
[=, false, ;, if, (, work_sing, [, col, ], <, temp, ), {, lindep, [, col, ], =, true, ;]
[[, col, ], =, false, ;, if, (, work_sing, [, col, ], <, temp, ), {, lindep, [, col, ]]
[], =, false, ;, if, (, work_sing, [, col, ], <, temp, ), {, lindep, [, col, ], =, true]
[;, if, (, work_sing, [, col, ], <, temp, ), {, lindep, [, col, ], =, true, ;, if, (]
[), {, lindep, [, col, ], =, true, ;, if, (, col, <, nvars, -, 1, ), {, Arrays, .]
[<, temp, ), {, lindep, [, col, ], =, true, ;, if, (, col, <, nvars, -, 1, ), {]
[[, col, ], <, temp, ), {, lindep, [, col, ], =, true, ;, if, (, col, <, nvars, -]
[], <, temp, ), {, lindep, [, col, ], =, true, ;, if, (, col, <, nvars, -, 1, )]
[), {, lindep, [, col, ], =, true, ;, if, (, col, <, nvars, -, 1, ), {, Arrays, .]
[=, true, ;, if, (, col, <, nvars, -, 1, ), {, Arrays, ., fill, (, x_sing, ,, 0.0, )]
[[, col, ], =, true, ;, if, (, col, <, nvars, -, 1, ), {, Arrays, ., fill, (, x_sing]
[], =, true, ;, if, (, col, <, nvars, -, 1, ), {, Arrays, ., fill, (, x_sing, ,, 0.0]
[;, if, (, col, <, nvars, -, 1, ), {, Arrays, ., fill, (, x_sing, ,, 0.0, ), ;, int]
[), {, Arrays, ., fill, (, x_sing, ,, 0.0, ), ;, int, _pi, =, col, *, (, nvars, +, nvars]
[<, nvars, -, 1, ), {, Arrays, ., fill, (, x_sing, ,, 0.0, ), ;, int, _pi, =, col, *]
[), {, Arrays, ., fill, (, x_sing, ,, 0.0, ), ;, int, _pi, =, col, *, (, nvars, +, nvars]
[-, 1, ), {, Arrays, ., fill, (, x_sing, ,, 0.0, ), ;, int, _pi, =, col, *, (, nvars]
[), {, Arrays, ., fill, (, x_sing, ,, 0.0, ), ;, int, _pi, =, col, *, (, nvars, +, nvars]
[;, int, _pi, =, col, *, (, nvars, +, nvars, -, col, -, 1, ), /, 2, ;, for, (]
[., fill, (, x_sing, ,, 0.0, ), ;, int, _pi, =, col, *, (, nvars, +, nvars, -, col, -]
[,, 0.0, ), ;, int, _pi, =, col, *, (, nvars, +, nvars, -, col, -, 1, ), /, 2]
[), ;, int, _pi, =, col, *, (, nvars, +, nvars, -, col, -, 1, ), /, 2, ;, for]
[;, for, (, int, _xi, =, col, +, 1, ;, _xi, <, nvars, ;, _xi, ++, ,, _pi, ++, )]
[/, 2, ;, for, (, int, _xi, =, col, +, 1, ;, _xi, <, nvars, ;, _xi, ++, ,, _pi]
[*, (, nvars, +, nvars, -, col, -, 1, ), /, 2, ;, for, (, int, _xi, =, col, +]
[/, 2, ;, for, (, int, _xi, =, col, +, 1, ;, _xi, <, nvars, ;, _xi, ++, ,, _pi]
[), /, 2, ;, for, (, int, _xi, =, col, +, 1, ;, _xi, <, nvars, ;, _xi, ++, ,]
[-, 1, ), /, 2, ;, for, (, int, _xi, =, col, +, 1, ;, _xi, <, nvars, ;, _xi]
[-, col, -, 1, ), /, 2, ;, for, (, int, _xi, =, col, +, 1, ;, _xi, <, nvars]
[+, nvars, -, col, -, 1, ), /, 2, ;, for, (, int, _xi, =, col, +, 1, ;, _xi]
[-, col, -, 1, ), /, 2, ;, for, (, int, _xi, =, col, +, 1, ;, _xi, <, nvars]
[-, 1, ), /, 2, ;, for, (, int, _xi, =, col, +, 1, ;, _xi, <, nvars, ;, _xi]
[), /, 2, ;, for, (, int, _xi, =, col, +, 1, ;, _xi, <, nvars, ;, _xi, ++, ,]
[;, for, (, int, _xi, =, col, +, 1, ;, _xi, <, nvars, ;, _xi, ++, ,, _pi, ++, )]
[;, _xi, <, nvars, ;, _xi, ++, ,, _pi, ++, ), {, x_sing, [, _xi, ], =, r, [, _pi]
[+, 1, ;, _xi, <, nvars, ;, _xi, ++, ,, _pi, ++, ), {, x_sing, [, _xi, ], =, r]
[;, _xi, <, nvars, ;, _xi, ++, ,, _pi, ++, ), {, x_sing, [, _xi, ], =, r, [, _pi]
[;, _xi, ++, ,, _pi, ++, ), {, x_sing, [, _xi, ], =, r, [, _pi, ], ;, r, []
[<, nvars, ;, _xi, ++, ,, _pi, ++, ), {, x_sing, [, _xi, ], =, r, [, _pi, ], ;]
[;, _xi, ++, ,, _pi, ++, ), {, x_sing, [, _xi, ], =, r, [, _pi, ], ;, r, []
[,, _pi, ++, ), {, x_sing, [, _xi, ], =, r, [, _pi, ], ;, r, [, _pi, ], =]
[++, ,, _pi, ++, ), {, x_sing, [, _xi, ], =, r, [, _pi, ], ;, r, [, _pi, ]]
[), {, x_sing, [, _xi, ], =, r, [, _pi, ], ;, r, [, _pi, ], =, 0.0, ;, }]
[++, ), {, x_sing, [, _xi, ], =, r, [, _pi, ], ;, r, [, _pi, ], =, 0.0, ;]
[=, r, [, _pi, ], ;, r, [, _pi, ], =, 0.0, ;, }, final, double, y, =, rhs, []
[[, _xi, ], =, r, [, _pi, ], ;, r, [, _pi, ], =, 0.0, ;, }, final, double, y]
[], =, r, [, _pi, ], ;, r, [, _pi, ], =, 0.0, ;, }, final, double, y, =, rhs]
[;, r, [, _pi, ], =, 0.0, ;, }, final, double, y, =, rhs, [, col, ], ;, final, double]
[[, _pi, ], ;, r, [, _pi, ], =, 0.0, ;, }, final, double, y, =, rhs, [, col, ]]
[], ;, r, [, _pi, ], =, 0.0, ;, }, final, double, y, =, rhs, [, col, ], ;, final]
[=, 0.0, ;, }, final, double, y, =, rhs, [, col, ], ;, final, double, weight, =, d, [, col]
[[, _pi, ], =, 0.0, ;, }, final, double, y, =, rhs, [, col, ], ;, final, double, weight, =]
[], =, 0.0, ;, }, final, double, y, =, rhs, [, col, ], ;, final, double, weight, =, d, []
[;, }, final, double, y, =, rhs, [, col, ], ;, final, double, weight, =, d, [, col, ], ;]
[;, final, double, weight, =, d, [, col, ], ;, d, [, col, ], =, 0.0, ;, rhs, [, col]
[[, col, ], ;, final, double, weight, =, d, [, col, ], ;, d, [, col, ], =, 0.0, ;]
[], ;, final, double, weight, =, d, [, col, ], ;, d, [, col, ], =, 0.0, ;, rhs, []
[;, d, [, col, ], =, 0.0, ;, rhs, [, col, ], =, 0.0, ;, this, ., include, (, x_sing]
[[, col, ], ;, d, [, col, ], =, 0.0, ;, rhs, [, col, ], =, 0.0, ;, this, .]
[], ;, d, [, col, ], =, 0.0, ;, rhs, [, col, ], =, 0.0, ;, this, ., include, (]
[=, 0.0, ;, rhs, [, col, ], =, 0.0, ;, this, ., include, (, x_sing, ,, weight, ,, y, )]
[[, col, ], =, 0.0, ;, rhs, [, col, ], =, 0.0, ;, this, ., include, (, x_sing, ,, weight]
[], =, 0.0, ;, rhs, [, col, ], =, 0.0, ;, this, ., include, (, x_sing, ,, weight, ,, y]
[;, rhs, [, col, ], =, 0.0, ;, this, ., include, (, x_sing, ,, weight, ,, y, ), ;, }]
[=, 0.0, ;, this, ., include, (, x_sing, ,, weight, ,, y, ), ;, }, else, {, sserr, +=, d]
[[, col, ], =, 0.0, ;, this, ., include, (, x_sing, ,, weight, ,, y, ), ;, }, else, {]
[], =, 0.0, ;, this, ., include, (, x_sing, ,, weight, ,, y, ), ;, }, else, {, sserr, +=]
[;, this, ., include, (, x_sing, ,, weight, ,, y, ), ;, }, else, {, sserr, +=, d, [, col]
[;, }, else, {, sserr, +=, d, [, col, ], *, rhs, [, col, ], *, rhs, [, col, ]]
[., include, (, x_sing, ,, weight, ,, y, ), ;, }, else, {, sserr, +=, d, [, col, ], *]
[,, weight, ,, y, ), ;, }, else, {, sserr, +=, d, [, col, ], *, rhs, [, col, ]]
[,, y, ), ;, }, else, {, sserr, +=, d, [, col, ], *, rhs, [, col, ], *, rhs]
[), ;, }, else, {, sserr, +=, d, [, col, ], *, rhs, [, col, ], *, rhs, [, col]
[+=, d, [, col, ], *, rhs, [, col, ], *, rhs, [, col, ], ;, }, }, }, }]
[;, }, }, }, }, private, void, ss, (, ), {, double, total, =, sserr, ;, rss, [, nvars, -]
[*, rhs, [, col, ], ;, }, }, }, }, private, void, ss, (, ), {, double, total, =, sserr]
[*, rhs, [, col, ], *, rhs, [, col, ], ;, }, }, }, }, private, void, ss, (, )]
[[, col, ], *, rhs, [, col, ], *, rhs, [, col, ], ;, }, }, }, }, private, void]
[], *, rhs, [, col, ], *, rhs, [, col, ], ;, }, }, }, }, private, void, ss, (]
[*, rhs, [, col, ], ;, }, }, }, }, private, void, ss, (, ), {, double, total, =, sserr]
[[, col, ], *, rhs, [, col, ], ;, }, }, }, }, private, void, ss, (, ), {, double]
[], *, rhs, [, col, ], ;, }, }, }, }, private, void, ss, (, ), {, double, total, =]
[;, }, }, }, }, private, void, ss, (, ), {, double, total, =, sserr, ;, rss, [, nvars, -]
[[, col, ], ;, }, }, }, }, private, void, ss, (, ), {, double, total, =, sserr, ;, rss]
[], ;, }, }, }, }, private, void, ss, (, ), {, double, total, =, sserr, ;, rss, [, nvars]
[;, rss, [, nvars, -, 1, ], =, sserr, ;, for, (, int, i, =, nvars, -, 1, ;, i]
[=, sserr, ;, for, (, int, i, =, nvars, -, 1, ;, i, >, 0, ;, i, --, ), {]
[[, nvars, -, 1, ], =, sserr, ;, for, (, int, i, =, nvars, -, 1, ;, i, >, 0]
[], =, sserr, ;, for, (, int, i, =, nvars, -, 1, ;, i, >, 0, ;, i, --, )]
[-, 1, ], =, sserr, ;, for, (, int, i, =, nvars, -, 1, ;, i, >, 0, ;, i]
[], =, sserr, ;, for, (, int, i, =, nvars, -, 1, ;, i, >, 0, ;, i, --, )]
[;, for, (, int, i, =, nvars, -, 1, ;, i, >, 0, ;, i, --, ), {, total, +=]
[;, i, >, 0, ;, i, --, ), {, total, +=, d, [, i, ], *, rhs, [, i, ]]
[-, 1, ;, i, >, 0, ;, i, --, ), {, total, +=, d, [, i, ], *, rhs, []
[;, i, >, 0, ;, i, --, ), {, total, +=, d, [, i, ], *, rhs, [, i, ]]
[;, i, --, ), {, total, +=, d, [, i, ], *, rhs, [, i, ], *, rhs, [, i]
[>, 0, ;, i, --, ), {, total, +=, d, [, i, ], *, rhs, [, i, ], *, rhs]
[;, i, --, ), {, total, +=, d, [, i, ], *, rhs, [, i, ], *, rhs, [, i]
[), {, total, +=, d, [, i, ], *, rhs, [, i, ], *, rhs, [, i, ], ;, rss]
[--, ), {, total, +=, d, [, i, ], *, rhs, [, i, ], *, rhs, [, i, ], ;]
[+=, d, [, i, ], *, rhs, [, i, ], *, rhs, [, i, ], ;, rss, [, i, -]
[;, rss, [, i, -, 1, ], =, total, ;, }, rss_set, =, true, ;, }, private, double, [, ]]
[*, rhs, [, i, ], ;, rss, [, i, -, 1, ], =, total, ;, }, rss_set, =, true, ;]
[*, rhs, [, i, ], *, rhs, [, i, ], ;, rss, [, i, -, 1, ], =, total, ;]
[[, i, ], *, rhs, [, i, ], *, rhs, [, i, ], ;, rss, [, i, -, 1, ]]
[], *, rhs, [, i, ], *, rhs, [, i, ], ;, rss, [, i, -, 1, ], =, total]
[*, rhs, [, i, ], ;, rss, [, i, -, 1, ], =, total, ;, }, rss_set, =, true, ;]
[[, i, ], *, rhs, [, i, ], ;, rss, [, i, -, 1, ], =, total, ;, }, rss_set]
[], *, rhs, [, i, ], ;, rss, [, i, -, 1, ], =, total, ;, }, rss_set, =, true]
[;, rss, [, i, -, 1, ], =, total, ;, }, rss_set, =, true, ;, }, private, double, [, ]]
[[, i, ], ;, rss, [, i, -, 1, ], =, total, ;, }, rss_set, =, true, ;, }, private]
[], ;, rss, [, i, -, 1, ], =, total, ;, }, rss_set, =, true, ;, }, private, double, []
[=, total, ;, }, rss_set, =, true, ;, }, private, double, [, ], cov, (, int, nreq, ), {, if]
[[, i, -, 1, ], =, total, ;, }, rss_set, =, true, ;, }, private, double, [, ], cov, (]
[], =, total, ;, }, rss_set, =, true, ;, }, private, double, [, ], cov, (, int, nreq, ), {]
[-, 1, ], =, total, ;, }, rss_set, =, true, ;, }, private, double, [, ], cov, (, int, nreq]
[], =, total, ;, }, rss_set, =, true, ;, }, private, double, [, ], cov, (, int, nreq, ), {]
[;, }, rss_set, =, true, ;, }, private, double, [, ], cov, (, int, nreq, ), {, if, (, this]
[=, true, ;, }, private, double, [, ], cov, (, int, nreq, ), {, if, (, this, ., nobs, <=]
[;, }, private, double, [, ], cov, (, int, nreq, ), {, if, (, this, ., nobs, <=, nreq, )]
[), {, return, null, ;, }, double, rnk, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <]
[<=, nreq, ), {, return, null, ;, }, double, rnk, =, 0.0, ;, for, (, int, i, =, 0, ;]
[., nobs, <=, nreq, ), {, return, null, ;, }, double, rnk, =, 0.0, ;, for, (, int, i, =]
[), {, return, null, ;, }, double, rnk, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <]
[;, }, double, rnk, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <, nreq, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, nreq, ;, i, ++, ), {, if, (, !, this]
[;, i, <, nreq, ;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ], ), {]
[;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ], ), {, rnk, +=, 1.0, ;]
[<, nreq, ;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ], ), {, rnk, +=]
[;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ], ), {, rnk, +=, 1.0, ;]
[), {, if, (, !, this, ., lindep, [, i, ], ), {, rnk, +=, 1.0, ;, }, }, final]
[++, ), {, if, (, !, this, ., lindep, [, i, ], ), {, rnk, +=, 1.0, ;, }, }]
[), {, rnk, +=, 1.0, ;, }, }, final, double, var, =, rss, [, nreq, -, 1, ], /, (]
[), {, rnk, +=, 1.0, ;, }, }, final, double, var, =, rss, [, nreq, -, 1, ], /, (]
[[, i, ], ), {, rnk, +=, 1.0, ;, }, }, final, double, var, =, rss, [, nreq, -, 1]
[., lindep, [, i, ], ), {, rnk, +=, 1.0, ;, }, }, final, double, var, =, rss, [, nreq]
[], ), {, rnk, +=, 1.0, ;, }, }, final, double, var, =, rss, [, nreq, -, 1, ], /]
[+=, 1.0, ;, }, }, final, double, var, =, rss, [, nreq, -, 1, ], /, (, nobs, -, rnk]
[;, }, }, final, double, var, =, rss, [, nreq, -, 1, ], /, (, nobs, -, rnk, ), ;]
[;, final, double, [, ], rinv, =, new, double, [, nreq, *, (, nreq, -, 1, ), /, 2, ]]
[/, (, nobs, -, rnk, ), ;, final, double, [, ], rinv, =, new, double, [, nreq, *, (, nreq]
[[, nreq, -, 1, ], /, (, nobs, -, rnk, ), ;, final, double, [, ], rinv, =, new, double]
[], /, (, nobs, -, rnk, ), ;, final, double, [, ], rinv, =, new, double, [, nreq, *, (]
[-, 1, ], /, (, nobs, -, rnk, ), ;, final, double, [, ], rinv, =, new, double, [, nreq]
[], /, (, nobs, -, rnk, ), ;, final, double, [, ], rinv, =, new, double, [, nreq, *, (]
[;, final, double, [, ], rinv, =, new, double, [, nreq, *, (, nreq, -, 1, ), /, 2, ]]
[), ;, final, double, [, ], rinv, =, new, double, [, nreq, *, (, nreq, -, 1, ), /, 2]
[-, rnk, ), ;, final, double, [, ], rinv, =, new, double, [, nreq, *, (, nreq, -, 1, )]
[), ;, final, double, [, ], rinv, =, new, double, [, nreq, *, (, nreq, -, 1, ), /, 2]
[;, inverse, (, rinv, ,, nreq, ), ;, final, double, [, ], covmat, =, new, double, [, nreq, *, (]
[], ;, inverse, (, rinv, ,, nreq, ), ;, final, double, [, ], covmat, =, new, double, [, nreq, *]
[/, 2, ], ;, inverse, (, rinv, ,, nreq, ), ;, final, double, [, ], covmat, =, new, double, []
[*, (, nreq, -, 1, ), /, 2, ], ;, inverse, (, rinv, ,, nreq, ), ;, final, double, []
[/, 2, ], ;, inverse, (, rinv, ,, nreq, ), ;, final, double, [, ], covmat, =, new, double, []
[), /, 2, ], ;, inverse, (, rinv, ,, nreq, ), ;, final, double, [, ], covmat, =, new, double]
[-, 1, ), /, 2, ], ;, inverse, (, rinv, ,, nreq, ), ;, final, double, [, ], covmat, =]
[), /, 2, ], ;, inverse, (, rinv, ,, nreq, ), ;, final, double, [, ], covmat, =, new, double]
[], ;, inverse, (, rinv, ,, nreq, ), ;, final, double, [, ], covmat, =, new, double, [, nreq, *]
[;, final, double, [, ], covmat, =, new, double, [, nreq, *, (, nreq, +, 1, ), /, 2, ]]
[,, nreq, ), ;, final, double, [, ], covmat, =, new, double, [, nreq, *, (, nreq, +, 1, )]
[), ;, final, double, [, ], covmat, =, new, double, [, nreq, *, (, nreq, +, 1, ), /, 2]
[;, Arrays, ., fill, (, covmat, ,, Double, ., NaN, ), ;, int, pos2, ;, int, pos1, ;, int, start]
[], ;, Arrays, ., fill, (, covmat, ,, Double, ., NaN, ), ;, int, pos2, ;, int, pos1, ;, int]
[/, 2, ], ;, Arrays, ., fill, (, covmat, ,, Double, ., NaN, ), ;, int, pos2, ;, int, pos1]
[*, (, nreq, +, 1, ), /, 2, ], ;, Arrays, ., fill, (, covmat, ,, Double, ., NaN, )]
[/, 2, ], ;, Arrays, ., fill, (, covmat, ,, Double, ., NaN, ), ;, int, pos2, ;, int, pos1]
[), /, 2, ], ;, Arrays, ., fill, (, covmat, ,, Double, ., NaN, ), ;, int, pos2, ;, int]
[+, 1, ), /, 2, ], ;, Arrays, ., fill, (, covmat, ,, Double, ., NaN, ), ;, int, pos2]
[), /, 2, ], ;, Arrays, ., fill, (, covmat, ,, Double, ., NaN, ), ;, int, pos2, ;, int]
[], ;, Arrays, ., fill, (, covmat, ,, Double, ., NaN, ), ;, int, pos2, ;, int, pos1, ;, int]
[;, int, pos2, ;, int, pos1, ;, int, start, =, 0, ;, double, total, =, 0, ;, for, (, int]
[., fill, (, covmat, ,, Double, ., NaN, ), ;, int, pos2, ;, int, pos1, ;, int, start, =, 0]
[,, Double, ., NaN, ), ;, int, pos2, ;, int, pos1, ;, int, start, =, 0, ;, double, total, =]
[), ;, int, pos2, ;, int, pos1, ;, int, start, =, 0, ;, double, total, =, 0, ;, for, (]
[., NaN, ), ;, int, pos2, ;, int, pos1, ;, int, start, =, 0, ;, double, total, =, 0, ;]
[;, double, total, =, 0, ;, for, (, int, row, =, 0, ;, row, <, nreq, ;, row, ++, )]
[;, for, (, int, row, =, 0, ;, row, <, nreq, ;, row, ++, ), {, pos2, =, start, ;]
[;, row, <, nreq, ;, row, ++, ), {, pos2, =, start, ;, if, (, !, this, ., lindep, []
[;, row, ++, ), {, pos2, =, start, ;, if, (, !, this, ., lindep, [, row, ], ), {]
[<, nreq, ;, row, ++, ), {, pos2, =, start, ;, if, (, !, this, ., lindep, [, row, ]]
[;, row, ++, ), {, pos2, =, start, ;, if, (, !, this, ., lindep, [, row, ], ), {]
[), {, pos2, =, start, ;, if, (, !, this, ., lindep, [, row, ], ), {, for, (, int]
[++, ), {, pos2, =, start, ;, if, (, !, this, ., lindep, [, row, ], ), {, for, (]
[=, start, ;, if, (, !, this, ., lindep, [, row, ], ), {, for, (, int, col, =, row]
[;, if, (, !, this, ., lindep, [, row, ], ), {, for, (, int, col, =, row, ;, col]
[), {, for, (, int, col, =, row, ;, col, <, nreq, ;, col, ++, ), {, if, (, !]
[), {, for, (, int, col, =, row, ;, col, <, nreq, ;, col, ++, ), {, if, (, !]
[[, row, ], ), {, for, (, int, col, =, row, ;, col, <, nreq, ;, col, ++, ), {]
[., lindep, [, row, ], ), {, for, (, int, col, =, row, ;, col, <, nreq, ;, col, ++]
[], ), {, for, (, int, col, =, row, ;, col, <, nreq, ;, col, ++, ), {, if, (]
[;, col, <, nreq, ;, col, ++, ), {, if, (, !, this, ., lindep, [, col, ], ), {]
[;, col, ++, ), {, if, (, !, this, ., lindep, [, col, ], ), {, pos1, =, start, +]
[<, nreq, ;, col, ++, ), {, if, (, !, this, ., lindep, [, col, ], ), {, pos1, =]
[;, col, ++, ), {, if, (, !, this, ., lindep, [, col, ], ), {, pos1, =, start, +]
[), {, if, (, !, this, ., lindep, [, col, ], ), {, pos1, =, start, +, col, -, row]
[++, ), {, if, (, !, this, ., lindep, [, col, ], ), {, pos1, =, start, +, col, -]
[), {, pos1, =, start, +, col, -, row, ;, if, (, row, ==, col, ), {, total, =, 1.0]
[), {, pos1, =, start, +, col, -, row, ;, if, (, row, ==, col, ), {, total, =, 1.0]
[[, col, ], ), {, pos1, =, start, +, col, -, row, ;, if, (, row, ==, col, ), {]
[., lindep, [, col, ], ), {, pos1, =, start, +, col, -, row, ;, if, (, row, ==, col]
[], ), {, pos1, =, start, +, col, -, row, ;, if, (, row, ==, col, ), {, total, =]
[=, start, +, col, -, row, ;, if, (, row, ==, col, ), {, total, =, 1.0, /, d, []
[;, if, (, row, ==, col, ), {, total, =, 1.0, /, d, [, col, ], ;, }, else, {]
[-, row, ;, if, (, row, ==, col, ), {, total, =, 1.0, /, d, [, col, ], ;, }]
[+, col, -, row, ;, if, (, row, ==, col, ), {, total, =, 1.0, /, d, [, col, ]]
[-, row, ;, if, (, row, ==, col, ), {, total, =, 1.0, /, d, [, col, ], ;, }]
[;, if, (, row, ==, col, ), {, total, =, 1.0, /, d, [, col, ], ;, }, else, {]
[), {, total, =, 1.0, /, d, [, col, ], ;, }, else, {, total, =, rinv, [, pos1, -]
[==, col, ), {, total, =, 1.0, /, d, [, col, ], ;, }, else, {, total, =, rinv, []
[), {, total, =, 1.0, /, d, [, col, ], ;, }, else, {, total, =, rinv, [, pos1, -]
[=, 1.0, /, d, [, col, ], ;, }, else, {, total, =, rinv, [, pos1, -, 1, ], /]
[;, }, else, {, total, =, rinv, [, pos1, -, 1, ], /, d, [, col, ], ;, }, for]
[/, d, [, col, ], ;, }, else, {, total, =, rinv, [, pos1, -, 1, ], /, d, []
[;, }, else, {, total, =, rinv, [, pos1, -, 1, ], /, d, [, col, ], ;, }, for]
[[, col, ], ;, }, else, {, total, =, rinv, [, pos1, -, 1, ], /, d, [, col, ]]
[], ;, }, else, {, total, =, rinv, [, pos1, -, 1, ], /, d, [, col, ], ;, }]
[=, rinv, [, pos1, -, 1, ], /, d, [, col, ], ;, }, for, (, int, k, =, col]
[;, }, for, (, int, k, =, col, +, 1, ;, k, <, nreq, ;, k, ++, ), {, if]
[/, d, [, col, ], ;, }, for, (, int, k, =, col, +, 1, ;, k, <, nreq, ;]
[[, pos1, -, 1, ], /, d, [, col, ], ;, }, for, (, int, k, =, col, +, 1]
[], /, d, [, col, ], ;, }, for, (, int, k, =, col, +, 1, ;, k, <, nreq]
[-, 1, ], /, d, [, col, ], ;, }, for, (, int, k, =, col, +, 1, ;, k]
[], /, d, [, col, ], ;, }, for, (, int, k, =, col, +, 1, ;, k, <, nreq]
[;, }, for, (, int, k, =, col, +, 1, ;, k, <, nreq, ;, k, ++, ), {, if]
[[, col, ], ;, }, for, (, int, k, =, col, +, 1, ;, k, <, nreq, ;, k, ++]
[], ;, }, for, (, int, k, =, col, +, 1, ;, k, <, nreq, ;, k, ++, ), {]
[;, k, <, nreq, ;, k, ++, ), {, if, (, !, this, ., lindep, [, k, ], ), {]
[+, 1, ;, k, <, nreq, ;, k, ++, ), {, if, (, !, this, ., lindep, [, k, ]]
[;, k, <, nreq, ;, k, ++, ), {, if, (, !, this, ., lindep, [, k, ], ), {]
[;, k, ++, ), {, if, (, !, this, ., lindep, [, k, ], ), {, total, +=, rinv, []
[<, nreq, ;, k, ++, ), {, if, (, !, this, ., lindep, [, k, ], ), {, total, +=]
[;, k, ++, ), {, if, (, !, this, ., lindep, [, k, ], ), {, total, +=, rinv, []
[), {, if, (, !, this, ., lindep, [, k, ], ), {, total, +=, rinv, [, pos1, ], *]
[++, ), {, if, (, !, this, ., lindep, [, k, ], ), {, total, +=, rinv, [, pos1, ]]
[), {, total, +=, rinv, [, pos1, ], *, rinv, [, pos2, ], /, d, [, k, ], ;, }]
[), {, total, +=, rinv, [, pos1, ], *, rinv, [, pos2, ], /, d, [, k, ], ;, }]
[[, k, ], ), {, total, +=, rinv, [, pos1, ], *, rinv, [, pos2, ], /, d, [, k]
[., lindep, [, k, ], ), {, total, +=, rinv, [, pos1, ], *, rinv, [, pos2, ], /, d]
[], ), {, total, +=, rinv, [, pos1, ], *, rinv, [, pos2, ], /, d, [, k, ], ;]
[+=, rinv, [, pos1, ], *, rinv, [, pos2, ], /, d, [, k, ], ;, }, ++, pos1, ;]
[;, }, ++, pos1, ;, ++, pos2, ;, }, covmat, [, (, col, +, 1, ), *, col, /, 2]
[/, d, [, k, ], ;, }, ++, pos1, ;, ++, pos2, ;, }, covmat, [, (, col, +, 1]
[*, rinv, [, pos2, ], /, d, [, k, ], ;, }, ++, pos1, ;, ++, pos2, ;, }, covmat]
[[, pos1, ], *, rinv, [, pos2, ], /, d, [, k, ], ;, }, ++, pos1, ;, ++, pos2]
[], *, rinv, [, pos2, ], /, d, [, k, ], ;, }, ++, pos1, ;, ++, pos2, ;, }]
[/, d, [, k, ], ;, }, ++, pos1, ;, ++, pos2, ;, }, covmat, [, (, col, +, 1]
[[, pos2, ], /, d, [, k, ], ;, }, ++, pos1, ;, ++, pos2, ;, }, covmat, [, (]
[], /, d, [, k, ], ;, }, ++, pos1, ;, ++, pos2, ;, }, covmat, [, (, col, +]
[;, }, ++, pos1, ;, ++, pos2, ;, }, covmat, [, (, col, +, 1, ), *, col, /, 2]
[[, k, ], ;, }, ++, pos1, ;, ++, pos2, ;, }, covmat, [, (, col, +, 1, ), *]
[], ;, }, ++, pos1, ;, ++, pos2, ;, }, covmat, [, (, col, +, 1, ), *, col, /]
[;, ++, pos2, ;, }, covmat, [, (, col, +, 1, ), *, col, /, 2, +, row, ], =]
[;, ++, pos2, ;, }, covmat, [, (, col, +, 1, ), *, col, /, 2, +, row, ], =]
[;, }, covmat, [, (, col, +, 1, ), *, col, /, 2, +, row, ], =, total, *, var]
[;, }, covmat, [, (, col, +, 1, ), *, col, /, 2, +, row, ], =, total, *, var]
[=, total, *, var, ;, }, else, {, pos2, +=, nreq, -, col, -, 1, ;, }, }, }, start]
[[, (, col, +, 1, ), *, col, /, 2, +, row, ], =, total, *, var, ;, }, else]
[], =, total, *, var, ;, }, else, {, pos2, +=, nreq, -, col, -, 1, ;, }, }, }]
[+, row, ], =, total, *, var, ;, }, else, {, pos2, +=, nreq, -, col, -, 1, ;, }]
[/, 2, +, row, ], =, total, *, var, ;, }, else, {, pos2, +=, nreq, -, col, -, 1]
[*, col, /, 2, +, row, ], =, total, *, var, ;, }, else, {, pos2, +=, nreq, -, col]
[), *, col, /, 2, +, row, ], =, total, *, var, ;, }, else, {, pos2, +=, nreq, -]
[+, 1, ), *, col, /, 2, +, row, ], =, total, *, var, ;, }, else, {, pos2, +=]
[), *, col, /, 2, +, row, ], =, total, *, var, ;, }, else, {, pos2, +=, nreq, -]
[/, 2, +, row, ], =, total, *, var, ;, }, else, {, pos2, +=, nreq, -, col, -, 1]
[+, row, ], =, total, *, var, ;, }, else, {, pos2, +=, nreq, -, col, -, 1, ;, }]
[], =, total, *, var, ;, }, else, {, pos2, +=, nreq, -, col, -, 1, ;, }, }, }]
[;, }, else, {, pos2, +=, nreq, -, col, -, 1, ;, }, }, }, start, +=, nreq, -, row]
[*, var, ;, }, else, {, pos2, +=, nreq, -, col, -, 1, ;, }, }, }, start, +=, nreq]
[;, }, else, {, pos2, +=, nreq, -, col, -, 1, ;, }, }, }, start, +=, nreq, -, row]
[+=, nreq, -, col, -, 1, ;, }, }, }, start, +=, nreq, -, row, -, 1, ;, }, return]
[;, }, }, }, start, +=, nreq, -, row, -, 1, ;, }, return, covmat, ;, }, private, void, inverse]
[-, 1, ;, }, }, }, start, +=, nreq, -, row, -, 1, ;, }, return, covmat, ;, }, private]
[-, col, -, 1, ;, }, }, }, start, +=, nreq, -, row, -, 1, ;, }, return, covmat, ;]
[-, 1, ;, }, }, }, start, +=, nreq, -, row, -, 1, ;, }, return, covmat, ;, }, private]
[;, }, }, }, start, +=, nreq, -, row, -, 1, ;, }, return, covmat, ;, }, private, void, inverse]
[+=, nreq, -, row, -, 1, ;, }, return, covmat, ;, }, private, void, inverse, (, double, [, ], rinv]
[;, }, return, covmat, ;, }, private, void, inverse, (, double, [, ], rinv, ,, int, nreq, ), {, int]
[-, 1, ;, }, return, covmat, ;, }, private, void, inverse, (, double, [, ], rinv, ,, int, nreq, )]
[-, row, -, 1, ;, }, return, covmat, ;, }, private, void, inverse, (, double, [, ], rinv, ,, int]
[-, 1, ;, }, return, covmat, ;, }, private, void, inverse, (, double, [, ], rinv, ,, int, nreq, )]
[;, }, return, covmat, ;, }, private, void, inverse, (, double, [, ], rinv, ,, int, nreq, ), {, int]
[;, }, private, void, inverse, (, double, [, ], rinv, ,, int, nreq, ), {, int, pos, =, nreq, *]
[;, int, pos1, =, -, 1, ;, int, pos2, =, -, 1, ;, double, total, =, 0.0, ;, Arrays, .]
[-, 1, ;, int, pos1, =, -, 1, ;, int, pos2, =, -, 1, ;, double, total, =, 0.0, ;]
[/, 2, -, 1, ;, int, pos1, =, -, 1, ;, int, pos2, =, -, 1, ;, double, total, =]
[*, (, nreq, -, 1, ), /, 2, -, 1, ;, int, pos1, =, -, 1, ;, int, pos2, =]
[/, 2, -, 1, ;, int, pos1, =, -, 1, ;, int, pos2, =, -, 1, ;, double, total, =]
[), /, 2, -, 1, ;, int, pos1, =, -, 1, ;, int, pos2, =, -, 1, ;, double, total]
[-, 1, ), /, 2, -, 1, ;, int, pos1, =, -, 1, ;, int, pos2, =, -, 1, ;]
[), /, 2, -, 1, ;, int, pos1, =, -, 1, ;, int, pos2, =, -, 1, ;, double, total]
[-, 1, ;, int, pos1, =, -, 1, ;, int, pos2, =, -, 1, ;, double, total, =, 0.0, ;]
[;, int, pos1, =, -, 1, ;, int, pos2, =, -, 1, ;, double, total, =, 0.0, ;, Arrays, .]
[;, int, pos2, =, -, 1, ;, double, total, =, 0.0, ;, Arrays, ., fill, (, rinv, ,, Double, .]
[;, int, pos2, =, -, 1, ;, double, total, =, 0.0, ;, Arrays, ., fill, (, rinv, ,, Double, .]
[;, double, total, =, 0.0, ;, Arrays, ., fill, (, rinv, ,, Double, ., NaN, ), ;, for, (, int]
[;, double, total, =, 0.0, ;, Arrays, ., fill, (, rinv, ,, Double, ., NaN, ), ;, for, (, int]
[;, Arrays, ., fill, (, rinv, ,, Double, ., NaN, ), ;, for, (, int, row, =, nreq, -, 1]
[;, for, (, int, row, =, nreq, -, 1, ;, row, >, 0, ;, --, row, ), {, if, (]
[., fill, (, rinv, ,, Double, ., NaN, ), ;, for, (, int, row, =, nreq, -, 1, ;, row]
[,, Double, ., NaN, ), ;, for, (, int, row, =, nreq, -, 1, ;, row, >, 0, ;, --]
[), ;, for, (, int, row, =, nreq, -, 1, ;, row, >, 0, ;, --, row, ), {, if]
[., NaN, ), ;, for, (, int, row, =, nreq, -, 1, ;, row, >, 0, ;, --, row, )]
[;, row, >, 0, ;, --, row, ), {, if, (, !, this, ., lindep, [, row, ], ), {]
[-, 1, ;, row, >, 0, ;, --, row, ), {, if, (, !, this, ., lindep, [, row, ]]
[;, row, >, 0, ;, --, row, ), {, if, (, !, this, ., lindep, [, row, ], ), {]
[;, --, row, ), {, if, (, !, this, ., lindep, [, row, ], ), {, final, int, start, =]
[>, 0, ;, --, row, ), {, if, (, !, this, ., lindep, [, row, ], ), {, final, int]
[;, --, row, ), {, if, (, !, this, ., lindep, [, row, ], ), {, final, int, start, =]
[), {, if, (, !, this, ., lindep, [, row, ], ), {, final, int, start, =, (, row, -]
[), {, if, (, !, this, ., lindep, [, row, ], ), {, final, int, start, =, (, row, -]
[), {, final, int, start, =, (, row, -, 1, ), *, (, nvars, +, nvars, -, row, ), /]
[), {, final, int, start, =, (, row, -, 1, ), *, (, nvars, +, nvars, -, row, ), /]
[[, row, ], ), {, final, int, start, =, (, row, -, 1, ), *, (, nvars, +, nvars, -]
[., lindep, [, row, ], ), {, final, int, start, =, (, row, -, 1, ), *, (, nvars, +]
[], ), {, final, int, start, =, (, row, -, 1, ), *, (, nvars, +, nvars, -, row, )]
[;, for, (, int, col, =, nreq, ;, col, >, row, ;, --, col, ), {, pos1, =, start, ;]
[/, 2, ;, for, (, int, col, =, nreq, ;, col, >, row, ;, --, col, ), {, pos1, =]
[*, (, nvars, +, nvars, -, row, ), /, 2, ;, for, (, int, col, =, nreq, ;, col, >]
[), *, (, nvars, +, nvars, -, row, ), /, 2, ;, for, (, int, col, =, nreq, ;, col]
[-, 1, ), *, (, nvars, +, nvars, -, row, ), /, 2, ;, for, (, int, col, =, nreq]
[), *, (, nvars, +, nvars, -, row, ), /, 2, ;, for, (, int, col, =, nreq, ;, col]
[/, 2, ;, for, (, int, col, =, nreq, ;, col, >, row, ;, --, col, ), {, pos1, =]
[), /, 2, ;, for, (, int, col, =, nreq, ;, col, >, row, ;, --, col, ), {, pos1]
[-, row, ), /, 2, ;, for, (, int, col, =, nreq, ;, col, >, row, ;, --, col, )]
[+, nvars, -, row, ), /, 2, ;, for, (, int, col, =, nreq, ;, col, >, row, ;, --]
[-, row, ), /, 2, ;, for, (, int, col, =, nreq, ;, col, >, row, ;, --, col, )]
[), /, 2, ;, for, (, int, col, =, nreq, ;, col, >, row, ;, --, col, ), {, pos1]
[;, for, (, int, col, =, nreq, ;, col, >, row, ;, --, col, ), {, pos1, =, start, ;]
[;, col, >, row, ;, --, col, ), {, pos1, =, start, ;, pos2, =, pos, ;, total, =, 0.0]
[;, --, col, ), {, pos1, =, start, ;, pos2, =, pos, ;, total, =, 0.0, ;, for, (, int]
[>, row, ;, --, col, ), {, pos1, =, start, ;, pos2, =, pos, ;, total, =, 0.0, ;, for]
[;, --, col, ), {, pos1, =, start, ;, pos2, =, pos, ;, total, =, 0.0, ;, for, (, int]
[), {, pos1, =, start, ;, pos2, =, pos, ;, total, =, 0.0, ;, for, (, int, k, =, row]
[), {, pos1, =, start, ;, pos2, =, pos, ;, total, =, 0.0, ;, for, (, int, k, =, row]
[=, start, ;, pos2, =, pos, ;, total, =, 0.0, ;, for, (, int, k, =, row, ;, k, <]
[;, pos2, =, pos, ;, total, =, 0.0, ;, for, (, int, k, =, row, ;, k, <, col, -]
[=, pos, ;, total, =, 0.0, ;, for, (, int, k, =, row, ;, k, <, col, -, 1, ;]
[;, total, =, 0.0, ;, for, (, int, k, =, row, ;, k, <, col, -, 1, ;, k, ++]
[=, 0.0, ;, for, (, int, k, =, row, ;, k, <, col, -, 1, ;, k, ++, ), {]
[;, for, (, int, k, =, row, ;, k, <, col, -, 1, ;, k, ++, ), {, pos2, +=]
[;, k, <, col, -, 1, ;, k, ++, ), {, pos2, +=, nreq, -, k, -, 1, ;, if]
[;, k, ++, ), {, pos2, +=, nreq, -, k, -, 1, ;, if, (, !, this, ., lindep, []
[<, col, -, 1, ;, k, ++, ), {, pos2, +=, nreq, -, k, -, 1, ;, if, (, !]
[;, k, ++, ), {, pos2, +=, nreq, -, k, -, 1, ;, if, (, !, this, ., lindep, []
[-, 1, ;, k, ++, ), {, pos2, +=, nreq, -, k, -, 1, ;, if, (, !, this, .]
[;, k, ++, ), {, pos2, +=, nreq, -, k, -, 1, ;, if, (, !, this, ., lindep, []
[), {, pos2, +=, nreq, -, k, -, 1, ;, if, (, !, this, ., lindep, [, k, ], )]
[++, ), {, pos2, +=, nreq, -, k, -, 1, ;, if, (, !, this, ., lindep, [, k, ]]
[+=, nreq, -, k, -, 1, ;, if, (, !, this, ., lindep, [, k, ], ), {, total, +=]
[;, if, (, !, this, ., lindep, [, k, ], ), {, total, +=, -, r, [, pos1, ], *]
[-, 1, ;, if, (, !, this, ., lindep, [, k, ], ), {, total, +=, -, r, [, pos1]
[-, k, -, 1, ;, if, (, !, this, ., lindep, [, k, ], ), {, total, +=, -, r]
[-, 1, ;, if, (, !, this, ., lindep, [, k, ], ), {, total, +=, -, r, [, pos1]
[;, if, (, !, this, ., lindep, [, k, ], ), {, total, +=, -, r, [, pos1, ], *]
[), {, total, +=, -, r, [, pos1, ], *, rinv, [, pos2, ], ;, }, ++, pos1, ;, }]
[), {, total, +=, -, r, [, pos1, ], *, rinv, [, pos2, ], ;, }, ++, pos1, ;, }]
[[, k, ], ), {, total, +=, -, r, [, pos1, ], *, rinv, [, pos2, ], ;, }, ++]
[., lindep, [, k, ], ), {, total, +=, -, r, [, pos1, ], *, rinv, [, pos2, ], ;]
[], ), {, total, +=, -, r, [, pos1, ], *, rinv, [, pos2, ], ;, }, ++, pos1, ;]
[+=, -, r, [, pos1, ], *, rinv, [, pos2, ], ;, }, ++, pos1, ;, }, rinv, [, pos]
[;, }, ++, pos1, ;, }, rinv, [, pos, ], =, total, -, r, [, pos1, ], ;, --, pos]
[*, rinv, [, pos2, ], ;, }, ++, pos1, ;, }, rinv, [, pos, ], =, total, -, r, []
[*, rinv, [, pos2, ], ;, }, ++, pos1, ;, }, rinv, [, pos, ], =, total, -, r, []
[[, pos1, ], *, rinv, [, pos2, ], ;, }, ++, pos1, ;, }, rinv, [, pos, ], =, total]
[], *, rinv, [, pos2, ], ;, }, ++, pos1, ;, }, rinv, [, pos, ], =, total, -, r]
[;, }, ++, pos1, ;, }, rinv, [, pos, ], =, total, -, r, [, pos1, ], ;, --, pos]
[[, pos2, ], ;, }, ++, pos1, ;, }, rinv, [, pos, ], =, total, -, r, [, pos1, ]]
[], ;, }, ++, pos1, ;, }, rinv, [, pos, ], =, total, -, r, [, pos1, ], ;, --]
[;, }, rinv, [, pos, ], =, total, -, r, [, pos1, ], ;, --, pos, ;, }, }, else]
[;, }, rinv, [, pos, ], =, total, -, r, [, pos1, ], ;, --, pos, ;, }, }, else]
[=, total, -, r, [, pos1, ], ;, --, pos, ;, }, }, else, {, pos, -=, nreq, -, row]
[[, pos, ], =, total, -, r, [, pos1, ], ;, --, pos, ;, }, }, else, {, pos, -=]
[], =, total, -, r, [, pos1, ], ;, --, pos, ;, }, }, else, {, pos, -=, nreq, -]
[;, --, pos, ;, }, }, else, {, pos, -=, nreq, -, row, ;, }, }, }, public, double, []
[-, r, [, pos1, ], ;, --, pos, ;, }, }, else, {, pos, -=, nreq, -, row, ;, }]
[;, --, pos, ;, }, }, else, {, pos, -=, nreq, -, row, ;, }, }, }, public, double, []
[[, pos1, ], ;, --, pos, ;, }, }, else, {, pos, -=, nreq, -, row, ;, }, }, }]
[], ;, --, pos, ;, }, }, else, {, pos, -=, nreq, -, row, ;, }, }, }, public, double]
[;, }, }, else, {, pos, -=, nreq, -, row, ;, }, }, }, public, double, [, ], getPartialCorrelations, (]
[;, }, }, else, {, pos, -=, nreq, -, row, ;, }, }, }, public, double, [, ], getPartialCorrelations, (]
[-=, nreq, -, row, ;, }, }, }, public, double, [, ], getPartialCorrelations, (, int, in, ), {, final, double]
[;, }, }, }, public, double, [, ], getPartialCorrelations, (, int, in, ), {, final, double, [, ], output, =]
[-, row, ;, }, }, }, public, double, [, ], getPartialCorrelations, (, int, in, ), {, final, double, [, ]]
[;, }, }, }, public, double, [, ], getPartialCorrelations, (, int, in, ), {, final, double, [, ], output, =]
[;, int, pos, ;, int, pos1, ;, int, pos2, ;, final, int, rms_off, =, -, in, ;, final, int, wrk_off]
[], ;, int, pos, ;, int, pos1, ;, int, pos2, ;, final, int, rms_off, =, -, in, ;, final, int]
[/, 2, ], ;, int, pos, ;, int, pos1, ;, int, pos2, ;, final, int, rms_off, =, -, in, ;]
[*, (, nvars, -, in, ), /, 2, ], ;, int, pos, ;, int, pos1, ;, int, pos2, ;, final]
[), *, (, nvars, -, in, ), /, 2, ], ;, int, pos, ;, int, pos1, ;, int, pos2, ;]
[+, 1, ), *, (, nvars, -, in, ), /, 2, ], ;, int, pos, ;, int, pos1, ;, int]
[-, in, +, 1, ), *, (, nvars, -, in, ), /, 2, ], ;, int, pos, ;, int, pos1]
[+, 1, ), *, (, nvars, -, in, ), /, 2, ], ;, int, pos, ;, int, pos1, ;, int]
[), *, (, nvars, -, in, ), /, 2, ], ;, int, pos, ;, int, pos1, ;, int, pos2, ;]
[/, 2, ], ;, int, pos, ;, int, pos1, ;, int, pos2, ;, final, int, rms_off, =, -, in, ;]
[), /, 2, ], ;, int, pos, ;, int, pos1, ;, int, pos2, ;, final, int, rms_off, =, -, in]
[-, in, ), /, 2, ], ;, int, pos, ;, int, pos1, ;, int, pos2, ;, final, int, rms_off, =]
[), /, 2, ], ;, int, pos, ;, int, pos1, ;, int, pos2, ;, final, int, rms_off, =, -, in]
[], ;, int, pos, ;, int, pos1, ;, int, pos2, ;, final, int, rms_off, =, -, in, ;, final, int]
[;, final, int, wrk_off, =, -, (, in, +, 1, ), ;, final, double, [, ], rms, =, new, double]
[;, final, int, wrk_off, =, -, (, in, +, 1, ), ;, final, double, [, ], rms, =, new, double]
[;, final, double, [, ], rms, =, new, double, [, nvars, -, in, ], ;, final, double, [, ], work]
[;, final, double, [, ], rms, =, new, double, [, nvars, -, in, ], ;, final, double, [, ], work]
[), ;, final, double, [, ], rms, =, new, double, [, nvars, -, in, ], ;, final, double, [, ]]
[+, 1, ), ;, final, double, [, ], rms, =, new, double, [, nvars, -, in, ], ;, final, double]
[), ;, final, double, [, ], rms, =, new, double, [, nvars, -, in, ], ;, final, double, [, ]]
[;, final, double, [, ], work, =, new, double, [, nvars, -, in, -, 1, ], ;, double, sumxx, ;]
[], ;, final, double, [, ], work, =, new, double, [, nvars, -, in, -, 1, ], ;, double, sumxx]
[-, in, ], ;, final, double, [, ], work, =, new, double, [, nvars, -, in, -, 1, ], ;]
[], ;, final, double, [, ], work, =, new, double, [, nvars, -, in, -, 1, ], ;, double, sumxx]
[;, double, sumxx, ;, double, sumxy, ;, double, sumyy, ;, final, int, offXX, =, (, nvars, -, in, ), *]
[], ;, double, sumxx, ;, double, sumxy, ;, double, sumyy, ;, final, int, offXX, =, (, nvars, -, in, )]
[-, 1, ], ;, double, sumxx, ;, double, sumxy, ;, double, sumyy, ;, final, int, offXX, =, (, nvars, -]
[-, in, -, 1, ], ;, double, sumxx, ;, double, sumxy, ;, double, sumyy, ;, final, int, offXX, =, (]
[-, 1, ], ;, double, sumxx, ;, double, sumxy, ;, double, sumyy, ;, final, int, offXX, =, (, nvars, -]
[], ;, double, sumxx, ;, double, sumxy, ;, double, sumyy, ;, final, int, offXX, =, (, nvars, -, in, )]
[;, if, (, in, <, -, 1, ||, in, >=, nvars, ), {, return, null, ;, }, final, int, nvm]
[/, 2, ;, if, (, in, <, -, 1, ||, in, >=, nvars, ), {, return, null, ;, }, final]
[*, (, nvars, -, in, -, 1, ), /, 2, ;, if, (, in, <, -, 1, ||, in, >=]
[), *, (, nvars, -, in, -, 1, ), /, 2, ;, if, (, in, <, -, 1, ||, in]
[-, in, ), *, (, nvars, -, in, -, 1, ), /, 2, ;, if, (, in, <, -, 1]
[), *, (, nvars, -, in, -, 1, ), /, 2, ;, if, (, in, <, -, 1, ||, in]
[/, 2, ;, if, (, in, <, -, 1, ||, in, >=, nvars, ), {, return, null, ;, }, final]
[), /, 2, ;, if, (, in, <, -, 1, ||, in, >=, nvars, ), {, return, null, ;, }]
[-, 1, ), /, 2, ;, if, (, in, <, -, 1, ||, in, >=, nvars, ), {, return, null]
[-, in, -, 1, ), /, 2, ;, if, (, in, <, -, 1, ||, in, >=, nvars, ), {]
[-, 1, ), /, 2, ;, if, (, in, <, -, 1, ||, in, >=, nvars, ), {, return, null]
[), /, 2, ;, if, (, in, <, -, 1, ||, in, >=, nvars, ), {, return, null, ;, }]
[;, if, (, in, <, -, 1, ||, in, >=, nvars, ), {, return, null, ;, }, final, int, nvm]
[), {, return, null, ;, }, final, int, nvm, =, nvars, -, 1, ;, final, int, base_pos, =, r, .]
[||, in, >=, nvars, ), {, return, null, ;, }, final, int, nvm, =, nvars, -, 1, ;, final, int]
[<, -, 1, ||, in, >=, nvars, ), {, return, null, ;, }, final, int, nvm, =, nvars, -, 1]
[||, in, >=, nvars, ), {, return, null, ;, }, final, int, nvm, =, nvars, -, 1, ;, final, int]
[||, in, >=, nvars, ), {, return, null, ;, }, final, int, nvm, =, nvars, -, 1, ;, final, int]
[), {, return, null, ;, }, final, int, nvm, =, nvars, -, 1, ;, final, int, base_pos, =, r, .]
[>=, nvars, ), {, return, null, ;, }, final, int, nvm, =, nvars, -, 1, ;, final, int, base_pos, =]
[), {, return, null, ;, }, final, int, nvm, =, nvars, -, 1, ;, final, int, base_pos, =, r, .]
[;, }, final, int, nvm, =, nvars, -, 1, ;, final, int, base_pos, =, r, ., length, -, (, nvm]
[;, final, int, base_pos, =, r, ., length, -, (, nvm, -, in, ), *, (, nvm, -, in, +]
[-, 1, ;, final, int, base_pos, =, r, ., length, -, (, nvm, -, in, ), *, (, nvm, -]
[;, final, int, base_pos, =, r, ., length, -, (, nvm, -, in, ), *, (, nvm, -, in, +]
[;, if, (, d, [, in, ], >, 0.0, ), {, rms, [, in, +, rms_off, ], =, 1.0, /]
[-, (, nvm, -, in, ), *, (, nvm, -, in, +, 1, ), /, 2, ;, if, (, d]
[., length, -, (, nvm, -, in, ), *, (, nvm, -, in, +, 1, ), /, 2, ;, if]
[;, if, (, d, [, in, ], >, 0.0, ), {, rms, [, in, +, rms_off, ], =, 1.0, /]
[/, 2, ;, if, (, d, [, in, ], >, 0.0, ), {, rms, [, in, +, rms_off, ], =]
[*, (, nvm, -, in, +, 1, ), /, 2, ;, if, (, d, [, in, ], >, 0.0, )]
[), *, (, nvm, -, in, +, 1, ), /, 2, ;, if, (, d, [, in, ], >, 0.0]
[-, in, ), *, (, nvm, -, in, +, 1, ), /, 2, ;, if, (, d, [, in, ]]
[), *, (, nvm, -, in, +, 1, ), /, 2, ;, if, (, d, [, in, ], >, 0.0]
[/, 2, ;, if, (, d, [, in, ], >, 0.0, ), {, rms, [, in, +, rms_off, ], =]
[), /, 2, ;, if, (, d, [, in, ], >, 0.0, ), {, rms, [, in, +, rms_off, ]]
[+, 1, ), /, 2, ;, if, (, d, [, in, ], >, 0.0, ), {, rms, [, in, +]
[-, in, +, 1, ), /, 2, ;, if, (, d, [, in, ], >, 0.0, ), {, rms, []
[+, 1, ), /, 2, ;, if, (, d, [, in, ], >, 0.0, ), {, rms, [, in, +]
[), /, 2, ;, if, (, d, [, in, ], >, 0.0, ), {, rms, [, in, +, rms_off, ]]
[;, if, (, d, [, in, ], >, 0.0, ), {, rms, [, in, +, rms_off, ], =, 1.0, /]
[), {, rms, [, in, +, rms_off, ], =, 1.0, /, Math, ., sqrt, (, d, [, in, ], )]
[>, 0.0, ), {, rms, [, in, +, rms_off, ], =, 1.0, /, Math, ., sqrt, (, d, [, in]
[[, in, ], >, 0.0, ), {, rms, [, in, +, rms_off, ], =, 1.0, /, Math, ., sqrt, (]
[], >, 0.0, ), {, rms, [, in, +, rms_off, ], =, 1.0, /, Math, ., sqrt, (, d, []
[), {, rms, [, in, +, rms_off, ], =, 1.0, /, Math, ., sqrt, (, d, [, in, ], )]
[=, 1.0, /, Math, ., sqrt, (, d, [, in, ], ), ;, }, for, (, int, col, =, in]
[[, in, +, rms_off, ], =, 1.0, /, Math, ., sqrt, (, d, [, in, ], ), ;, }, for]
[], =, 1.0, /, Math, ., sqrt, (, d, [, in, ], ), ;, }, for, (, int, col, =]
[+, rms_off, ], =, 1.0, /, Math, ., sqrt, (, d, [, in, ], ), ;, }, for, (, int]
[], =, 1.0, /, Math, ., sqrt, (, d, [, in, ], ), ;, }, for, (, int, col, =]
[;, }, for, (, int, col, =, in, +, 1, ;, col, <, nvars, ;, col, ++, ), {, pos]
[/, Math, ., sqrt, (, d, [, in, ], ), ;, }, for, (, int, col, =, in, +, 1]
[;, }, for, (, int, col, =, in, +, 1, ;, col, <, nvars, ;, col, ++, ), {, pos]
[., sqrt, (, d, [, in, ], ), ;, }, for, (, int, col, =, in, +, 1, ;, col]
[), ;, }, for, (, int, col, =, in, +, 1, ;, col, <, nvars, ;, col, ++, ), {]
[[, in, ], ), ;, }, for, (, int, col, =, in, +, 1, ;, col, <, nvars, ;, col]
[], ), ;, }, for, (, int, col, =, in, +, 1, ;, col, <, nvars, ;, col, ++, )]
[;, col, <, nvars, ;, col, ++, ), {, pos, =, base_pos, +, col, -, 1, -, in, ;, sumxx]
[+, 1, ;, col, <, nvars, ;, col, ++, ), {, pos, =, base_pos, +, col, -, 1, -, in]
[;, col, <, nvars, ;, col, ++, ), {, pos, =, base_pos, +, col, -, 1, -, in, ;, sumxx]
[;, col, ++, ), {, pos, =, base_pos, +, col, -, 1, -, in, ;, sumxx, =, d, [, col]
[<, nvars, ;, col, ++, ), {, pos, =, base_pos, +, col, -, 1, -, in, ;, sumxx, =, d]
[;, col, ++, ), {, pos, =, base_pos, +, col, -, 1, -, in, ;, sumxx, =, d, [, col]
[), {, pos, =, base_pos, +, col, -, 1, -, in, ;, sumxx, =, d, [, col, ], ;, for]
[++, ), {, pos, =, base_pos, +, col, -, 1, -, in, ;, sumxx, =, d, [, col, ], ;]
[=, base_pos, +, col, -, 1, -, in, ;, sumxx, =, d, [, col, ], ;, for, (, int, row]
[;, sumxx, =, d, [, col, ], ;, for, (, int, row, =, in, ;, row, <, col, ;, row]
[-, in, ;, sumxx, =, d, [, col, ], ;, for, (, int, row, =, in, ;, row, <, col]
[-, 1, -, in, ;, sumxx, =, d, [, col, ], ;, for, (, int, row, =, in, ;, row]
[+, col, -, 1, -, in, ;, sumxx, =, d, [, col, ], ;, for, (, int, row, =, in]
[-, 1, -, in, ;, sumxx, =, d, [, col, ], ;, for, (, int, row, =, in, ;, row]
[-, in, ;, sumxx, =, d, [, col, ], ;, for, (, int, row, =, in, ;, row, <, col]
[;, sumxx, =, d, [, col, ], ;, for, (, int, row, =, in, ;, row, <, col, ;, row]
[=, d, [, col, ], ;, for, (, int, row, =, in, ;, row, <, col, ;, row, ++, )]
[;, for, (, int, row, =, in, ;, row, <, col, ;, row, ++, ), {, sumxx, +=, d, []
[[, col, ], ;, for, (, int, row, =, in, ;, row, <, col, ;, row, ++, ), {, sumxx]
[], ;, for, (, int, row, =, in, ;, row, <, col, ;, row, ++, ), {, sumxx, +=, d]
[;, row, <, col, ;, row, ++, ), {, sumxx, +=, d, [, row, ], *, r, [, pos, ]]
[;, row, ++, ), {, sumxx, +=, d, [, row, ], *, r, [, pos, ], *, r, [, pos]
[<, col, ;, row, ++, ), {, sumxx, +=, d, [, row, ], *, r, [, pos, ], *, r]
[;, row, ++, ), {, sumxx, +=, d, [, row, ], *, r, [, pos, ], *, r, [, pos]
[), {, sumxx, +=, d, [, row, ], *, r, [, pos, ], *, r, [, pos, ], ;, pos]
[++, ), {, sumxx, +=, d, [, row, ], *, r, [, pos, ], *, r, [, pos, ], ;]
[+=, d, [, row, ], *, r, [, pos, ], *, r, [, pos, ], ;, pos, +=, nvars, -]
[;, pos, +=, nvars, -, row, -, 2, ;, }, if, (, sumxx, >, 0.0, ), {, rms, [, col]
[*, r, [, pos, ], ;, pos, +=, nvars, -, row, -, 2, ;, }, if, (, sumxx, >, 0.0]
[*, r, [, pos, ], *, r, [, pos, ], ;, pos, +=, nvars, -, row, -, 2, ;, }]
[[, row, ], *, r, [, pos, ], *, r, [, pos, ], ;, pos, +=, nvars, -, row, -]
[], *, r, [, pos, ], *, r, [, pos, ], ;, pos, +=, nvars, -, row, -, 2, ;]
[*, r, [, pos, ], ;, pos, +=, nvars, -, row, -, 2, ;, }, if, (, sumxx, >, 0.0]
[[, pos, ], *, r, [, pos, ], ;, pos, +=, nvars, -, row, -, 2, ;, }, if, (]
[], *, r, [, pos, ], ;, pos, +=, nvars, -, row, -, 2, ;, }, if, (, sumxx, >]
[;, pos, +=, nvars, -, row, -, 2, ;, }, if, (, sumxx, >, 0.0, ), {, rms, [, col]
[[, pos, ], ;, pos, +=, nvars, -, row, -, 2, ;, }, if, (, sumxx, >, 0.0, ), {]
[], ;, pos, +=, nvars, -, row, -, 2, ;, }, if, (, sumxx, >, 0.0, ), {, rms, []
[+=, nvars, -, row, -, 2, ;, }, if, (, sumxx, >, 0.0, ), {, rms, [, col, +, rms_off]
[;, }, if, (, sumxx, >, 0.0, ), {, rms, [, col, +, rms_off, ], =, 1.0, /, Math, .]
[-, 2, ;, }, if, (, sumxx, >, 0.0, ), {, rms, [, col, +, rms_off, ], =, 1.0, /]
[-, row, -, 2, ;, }, if, (, sumxx, >, 0.0, ), {, rms, [, col, +, rms_off, ], =]
[-, 2, ;, }, if, (, sumxx, >, 0.0, ), {, rms, [, col, +, rms_off, ], =, 1.0, /]
[;, }, if, (, sumxx, >, 0.0, ), {, rms, [, col, +, rms_off, ], =, 1.0, /, Math, .]
[), {, rms, [, col, +, rms_off, ], =, 1.0, /, Math, ., sqrt, (, sumxx, ), ;, }, else]
[>, 0.0, ), {, rms, [, col, +, rms_off, ], =, 1.0, /, Math, ., sqrt, (, sumxx, ), ;]
[), {, rms, [, col, +, rms_off, ], =, 1.0, /, Math, ., sqrt, (, sumxx, ), ;, }, else]
[=, 1.0, /, Math, ., sqrt, (, sumxx, ), ;, }, else, {, rms, [, col, +, rms_off, ], =]
[[, col, +, rms_off, ], =, 1.0, /, Math, ., sqrt, (, sumxx, ), ;, }, else, {, rms, []
[], =, 1.0, /, Math, ., sqrt, (, sumxx, ), ;, }, else, {, rms, [, col, +, rms_off, ]]
[+, rms_off, ], =, 1.0, /, Math, ., sqrt, (, sumxx, ), ;, }, else, {, rms, [, col, +]
[], =, 1.0, /, Math, ., sqrt, (, sumxx, ), ;, }, else, {, rms, [, col, +, rms_off, ]]
[;, }, else, {, rms, [, col, +, rms_off, ], =, 0.0, ;, }, }, sumyy, =, sserr, ;, for]
[/, Math, ., sqrt, (, sumxx, ), ;, }, else, {, rms, [, col, +, rms_off, ], =, 0.0, ;]
[;, }, else, {, rms, [, col, +, rms_off, ], =, 0.0, ;, }, }, sumyy, =, sserr, ;, for]
[., sqrt, (, sumxx, ), ;, }, else, {, rms, [, col, +, rms_off, ], =, 0.0, ;, }, }]
[), ;, }, else, {, rms, [, col, +, rms_off, ], =, 0.0, ;, }, }, sumyy, =, sserr, ;]
[=, 0.0, ;, }, }, sumyy, =, sserr, ;, for, (, int, row, =, in, ;, row, <, nvars, ;]
[[, col, +, rms_off, ], =, 0.0, ;, }, }, sumyy, =, sserr, ;, for, (, int, row, =, in]
[], =, 0.0, ;, }, }, sumyy, =, sserr, ;, for, (, int, row, =, in, ;, row, <, nvars]
[+, rms_off, ], =, 0.0, ;, }, }, sumyy, =, sserr, ;, for, (, int, row, =, in, ;, row]
[], =, 0.0, ;, }, }, sumyy, =, sserr, ;, for, (, int, row, =, in, ;, row, <, nvars]
[;, }, }, sumyy, =, sserr, ;, for, (, int, row, =, in, ;, row, <, nvars, ;, row, ++]
[=, sserr, ;, for, (, int, row, =, in, ;, row, <, nvars, ;, row, ++, ), {, sumyy, +=]
[;, for, (, int, row, =, in, ;, row, <, nvars, ;, row, ++, ), {, sumyy, +=, d, []
[;, row, <, nvars, ;, row, ++, ), {, sumyy, +=, d, [, row, ], *, rhs, [, row, ]]
[;, row, ++, ), {, sumyy, +=, d, [, row, ], *, rhs, [, row, ], *, rhs, [, row]
[<, nvars, ;, row, ++, ), {, sumyy, +=, d, [, row, ], *, rhs, [, row, ], *, rhs]
[;, row, ++, ), {, sumyy, +=, d, [, row, ], *, rhs, [, row, ], *, rhs, [, row]
[), {, sumyy, +=, d, [, row, ], *, rhs, [, row, ], *, rhs, [, row, ], ;, }]
[++, ), {, sumyy, +=, d, [, row, ], *, rhs, [, row, ], *, rhs, [, row, ], ;]
[+=, d, [, row, ], *, rhs, [, row, ], *, rhs, [, row, ], ;, }, if, (, sumyy]
[;, }, if, (, sumyy, >, 0.0, ), {, sumyy, =, 1.0, /, Math, ., sqrt, (, sumyy, ), ;]
[*, rhs, [, row, ], ;, }, if, (, sumyy, >, 0.0, ), {, sumyy, =, 1.0, /, Math, .]
[*, rhs, [, row, ], *, rhs, [, row, ], ;, }, if, (, sumyy, >, 0.0, ), {, sumyy]
[[, row, ], *, rhs, [, row, ], *, rhs, [, row, ], ;, }, if, (, sumyy, >, 0.0]
[], *, rhs, [, row, ], *, rhs, [, row, ], ;, }, if, (, sumyy, >, 0.0, ), {]
[*, rhs, [, row, ], ;, }, if, (, sumyy, >, 0.0, ), {, sumyy, =, 1.0, /, Math, .]
[[, row, ], *, rhs, [, row, ], ;, }, if, (, sumyy, >, 0.0, ), {, sumyy, =, 1.0]
[], *, rhs, [, row, ], ;, }, if, (, sumyy, >, 0.0, ), {, sumyy, =, 1.0, /, Math]
[;, }, if, (, sumyy, >, 0.0, ), {, sumyy, =, 1.0, /, Math, ., sqrt, (, sumyy, ), ;]
[[, row, ], ;, }, if, (, sumyy, >, 0.0, ), {, sumyy, =, 1.0, /, Math, ., sqrt, (]
[], ;, }, if, (, sumyy, >, 0.0, ), {, sumyy, =, 1.0, /, Math, ., sqrt, (, sumyy, )]
[), {, sumyy, =, 1.0, /, Math, ., sqrt, (, sumyy, ), ;, }, pos, =, 0, ;, for, (]
[>, 0.0, ), {, sumyy, =, 1.0, /, Math, ., sqrt, (, sumyy, ), ;, }, pos, =, 0, ;]
[), {, sumyy, =, 1.0, /, Math, ., sqrt, (, sumyy, ), ;, }, pos, =, 0, ;, for, (]
[=, 1.0, /, Math, ., sqrt, (, sumyy, ), ;, }, pos, =, 0, ;, for, (, int, col1, =]
[;, }, pos, =, 0, ;, for, (, int, col1, =, in, ;, col1, <, nvars, ;, col1, ++, )]
[/, Math, ., sqrt, (, sumyy, ), ;, }, pos, =, 0, ;, for, (, int, col1, =, in, ;]
[;, }, pos, =, 0, ;, for, (, int, col1, =, in, ;, col1, <, nvars, ;, col1, ++, )]
[., sqrt, (, sumyy, ), ;, }, pos, =, 0, ;, for, (, int, col1, =, in, ;, col1, <]
[), ;, }, pos, =, 0, ;, for, (, int, col1, =, in, ;, col1, <, nvars, ;, col1, ++]
[=, 0, ;, for, (, int, col1, =, in, ;, col1, <, nvars, ;, col1, ++, ), {, sumxy, =]
[;, for, (, int, col1, =, in, ;, col1, <, nvars, ;, col1, ++, ), {, sumxy, =, 0.0, ;]
[;, col1, <, nvars, ;, col1, ++, ), {, sumxy, =, 0.0, ;, Arrays, ., fill, (, work, ,, 0.0]
[;, col1, ++, ), {, sumxy, =, 0.0, ;, Arrays, ., fill, (, work, ,, 0.0, ), ;, pos1, =]
[<, nvars, ;, col1, ++, ), {, sumxy, =, 0.0, ;, Arrays, ., fill, (, work, ,, 0.0, ), ;]
[;, col1, ++, ), {, sumxy, =, 0.0, ;, Arrays, ., fill, (, work, ,, 0.0, ), ;, pos1, =]
[), {, sumxy, =, 0.0, ;, Arrays, ., fill, (, work, ,, 0.0, ), ;, pos1, =, base_pos, +, col1]
[++, ), {, sumxy, =, 0.0, ;, Arrays, ., fill, (, work, ,, 0.0, ), ;, pos1, =, base_pos, +]
[=, 0.0, ;, Arrays, ., fill, (, work, ,, 0.0, ), ;, pos1, =, base_pos, +, col1, -, in, -]
[;, Arrays, ., fill, (, work, ,, 0.0, ), ;, pos1, =, base_pos, +, col1, -, in, -, 1, ;]
[;, pos1, =, base_pos, +, col1, -, in, -, 1, ;, for, (, int, row, =, in, ;, row, <]
[., fill, (, work, ,, 0.0, ), ;, pos1, =, base_pos, +, col1, -, in, -, 1, ;, for, (]
[,, 0.0, ), ;, pos1, =, base_pos, +, col1, -, in, -, 1, ;, for, (, int, row, =, in]
[), ;, pos1, =, base_pos, +, col1, -, in, -, 1, ;, for, (, int, row, =, in, ;, row]
[=, base_pos, +, col1, -, in, -, 1, ;, for, (, int, row, =, in, ;, row, <, col1, ;]
[;, for, (, int, row, =, in, ;, row, <, col1, ;, row, ++, ), {, pos2, =, pos1, +]
[-, 1, ;, for, (, int, row, =, in, ;, row, <, col1, ;, row, ++, ), {, pos2, =]
[-, in, -, 1, ;, for, (, int, row, =, in, ;, row, <, col1, ;, row, ++, ), {]
[+, col1, -, in, -, 1, ;, for, (, int, row, =, in, ;, row, <, col1, ;, row, ++]
[-, in, -, 1, ;, for, (, int, row, =, in, ;, row, <, col1, ;, row, ++, ), {]
[-, 1, ;, for, (, int, row, =, in, ;, row, <, col1, ;, row, ++, ), {, pos2, =]
[;, for, (, int, row, =, in, ;, row, <, col1, ;, row, ++, ), {, pos2, =, pos1, +]
[;, row, <, col1, ;, row, ++, ), {, pos2, =, pos1, +, 1, ;, for, (, int, col2, =]
[;, row, ++, ), {, pos2, =, pos1, +, 1, ;, for, (, int, col2, =, col1, +, 1, ;]
[<, col1, ;, row, ++, ), {, pos2, =, pos1, +, 1, ;, for, (, int, col2, =, col1, +]
[;, row, ++, ), {, pos2, =, pos1, +, 1, ;, for, (, int, col2, =, col1, +, 1, ;]
[), {, pos2, =, pos1, +, 1, ;, for, (, int, col2, =, col1, +, 1, ;, col2, <, nvars]
[++, ), {, pos2, =, pos1, +, 1, ;, for, (, int, col2, =, col1, +, 1, ;, col2, <]
[=, pos1, +, 1, ;, for, (, int, col2, =, col1, +, 1, ;, col2, <, nvars, ;, col2, ++]
[;, for, (, int, col2, =, col1, +, 1, ;, col2, <, nvars, ;, col2, ++, ), {, work, []
[+, 1, ;, for, (, int, col2, =, col1, +, 1, ;, col2, <, nvars, ;, col2, ++, ), {]
[;, for, (, int, col2, =, col1, +, 1, ;, col2, <, nvars, ;, col2, ++, ), {, work, []
[;, col2, <, nvars, ;, col2, ++, ), {, work, [, col2, +, wrk_off, ], +=, d, [, row, ]]
[+, 1, ;, col2, <, nvars, ;, col2, ++, ), {, work, [, col2, +, wrk_off, ], +=, d, []
[;, col2, <, nvars, ;, col2, ++, ), {, work, [, col2, +, wrk_off, ], +=, d, [, row, ]]
[;, col2, ++, ), {, work, [, col2, +, wrk_off, ], +=, d, [, row, ], *, r, [, pos1]
[<, nvars, ;, col2, ++, ), {, work, [, col2, +, wrk_off, ], +=, d, [, row, ], *, r]
[;, col2, ++, ), {, work, [, col2, +, wrk_off, ], +=, d, [, row, ], *, r, [, pos1]
[), {, work, [, col2, +, wrk_off, ], +=, d, [, row, ], *, r, [, pos1, ], *, r]
[++, ), {, work, [, col2, +, wrk_off, ], +=, d, [, row, ], *, r, [, pos1, ], *]
[+=, d, [, row, ], *, r, [, pos1, ], *, r, [, pos2, ], ;, pos2, ++, ;, }]
[[, col2, +, wrk_off, ], +=, d, [, row, ], *, r, [, pos1, ], *, r, [, pos2, ]]
[], +=, d, [, row, ], *, r, [, pos1, ], *, r, [, pos2, ], ;, pos2, ++, ;]
[+, wrk_off, ], +=, d, [, row, ], *, r, [, pos1, ], *, r, [, pos2, ], ;, pos2]
[], +=, d, [, row, ], *, r, [, pos1, ], *, r, [, pos2, ], ;, pos2, ++, ;]
[;, pos2, ++, ;, }, sumxy, +=, d, [, row, ], *, r, [, pos1, ], *, rhs, [, row]
[*, r, [, pos2, ], ;, pos2, ++, ;, }, sumxy, +=, d, [, row, ], *, r, [, pos1]
[*, r, [, pos1, ], *, r, [, pos2, ], ;, pos2, ++, ;, }, sumxy, +=, d, [, row]
[[, row, ], *, r, [, pos1, ], *, r, [, pos2, ], ;, pos2, ++, ;, }, sumxy, +=]
[], *, r, [, pos1, ], *, r, [, pos2, ], ;, pos2, ++, ;, }, sumxy, +=, d, []
[*, r, [, pos2, ], ;, pos2, ++, ;, }, sumxy, +=, d, [, row, ], *, r, [, pos1]
[[, pos1, ], *, r, [, pos2, ], ;, pos2, ++, ;, }, sumxy, +=, d, [, row, ], *]
[], *, r, [, pos2, ], ;, pos2, ++, ;, }, sumxy, +=, d, [, row, ], *, r, []
[;, pos2, ++, ;, }, sumxy, +=, d, [, row, ], *, r, [, pos1, ], *, rhs, [, row]
[[, pos2, ], ;, pos2, ++, ;, }, sumxy, +=, d, [, row, ], *, r, [, pos1, ], *]
[], ;, pos2, ++, ;, }, sumxy, +=, d, [, row, ], *, r, [, pos1, ], *, rhs, []
[;, }, sumxy, +=, d, [, row, ], *, r, [, pos1, ], *, rhs, [, row, ], ;, pos1]
[++, ;, }, sumxy, +=, d, [, row, ], *, r, [, pos1, ], *, rhs, [, row, ], ;]
[+=, d, [, row, ], *, r, [, pos1, ], *, rhs, [, row, ], ;, pos1, +=, nvars, -]
[;, pos1, +=, nvars, -, row, -, 2, ;, }, pos2, =, pos1, +, 1, ;, for, (, int, col2]
[*, rhs, [, row, ], ;, pos1, +=, nvars, -, row, -, 2, ;, }, pos2, =, pos1, +, 1]
[*, r, [, pos1, ], *, rhs, [, row, ], ;, pos1, +=, nvars, -, row, -, 2, ;, }]
[[, row, ], *, r, [, pos1, ], *, rhs, [, row, ], ;, pos1, +=, nvars, -, row, -]
[], *, r, [, pos1, ], *, rhs, [, row, ], ;, pos1, +=, nvars, -, row, -, 2, ;]
[*, rhs, [, row, ], ;, pos1, +=, nvars, -, row, -, 2, ;, }, pos2, =, pos1, +, 1]
[[, pos1, ], *, rhs, [, row, ], ;, pos1, +=, nvars, -, row, -, 2, ;, }, pos2, =]
[], *, rhs, [, row, ], ;, pos1, +=, nvars, -, row, -, 2, ;, }, pos2, =, pos1, +]
[;, pos1, +=, nvars, -, row, -, 2, ;, }, pos2, =, pos1, +, 1, ;, for, (, int, col2]
[[, row, ], ;, pos1, +=, nvars, -, row, -, 2, ;, }, pos2, =, pos1, +, 1, ;, for]
[], ;, pos1, +=, nvars, -, row, -, 2, ;, }, pos2, =, pos1, +, 1, ;, for, (, int]
[+=, nvars, -, row, -, 2, ;, }, pos2, =, pos1, +, 1, ;, for, (, int, col2, =, col1]
[;, }, pos2, =, pos1, +, 1, ;, for, (, int, col2, =, col1, +, 1, ;, col2, <, nvars]
[-, 2, ;, }, pos2, =, pos1, +, 1, ;, for, (, int, col2, =, col1, +, 1, ;, col2]
[-, row, -, 2, ;, }, pos2, =, pos1, +, 1, ;, for, (, int, col2, =, col1, +, 1]
[-, 2, ;, }, pos2, =, pos1, +, 1, ;, for, (, int, col2, =, col1, +, 1, ;, col2]
[;, }, pos2, =, pos1, +, 1, ;, for, (, int, col2, =, col1, +, 1, ;, col2, <, nvars]
[=, pos1, +, 1, ;, for, (, int, col2, =, col1, +, 1, ;, col2, <, nvars, ;, col2, ++]
[;, for, (, int, col2, =, col1, +, 1, ;, col2, <, nvars, ;, col2, ++, ), {, work, []
[+, 1, ;, for, (, int, col2, =, col1, +, 1, ;, col2, <, nvars, ;, col2, ++, ), {]
[;, for, (, int, col2, =, col1, +, 1, ;, col2, <, nvars, ;, col2, ++, ), {, work, []
[;, col2, <, nvars, ;, col2, ++, ), {, work, [, col2, +, wrk_off, ], +=, d, [, col1, ]]
[+, 1, ;, col2, <, nvars, ;, col2, ++, ), {, work, [, col2, +, wrk_off, ], +=, d, []
[;, col2, <, nvars, ;, col2, ++, ), {, work, [, col2, +, wrk_off, ], +=, d, [, col1, ]]
[;, col2, ++, ), {, work, [, col2, +, wrk_off, ], +=, d, [, col1, ], *, r, [, pos2]
[<, nvars, ;, col2, ++, ), {, work, [, col2, +, wrk_off, ], +=, d, [, col1, ], *, r]
[;, col2, ++, ), {, work, [, col2, +, wrk_off, ], +=, d, [, col1, ], *, r, [, pos2]
[), {, work, [, col2, +, wrk_off, ], +=, d, [, col1, ], *, r, [, pos2, ], ;, ++]
[++, ), {, work, [, col2, +, wrk_off, ], +=, d, [, col1, ], *, r, [, pos2, ], ;]
[+=, d, [, col1, ], *, r, [, pos2, ], ;, ++, pos2, ;, output, [, (, col2, -, 1]
[[, col2, +, wrk_off, ], +=, d, [, col1, ], *, r, [, pos2, ], ;, ++, pos2, ;, output]
[], +=, d, [, col1, ], *, r, [, pos2, ], ;, ++, pos2, ;, output, [, (, col2, -]
[+, wrk_off, ], +=, d, [, col1, ], *, r, [, pos2, ], ;, ++, pos2, ;, output, [, (]
[], +=, d, [, col1, ], *, r, [, pos2, ], ;, ++, pos2, ;, output, [, (, col2, -]
[;, ++, pos2, ;, output, [, (, col2, -, 1, -, in, ), *, (, col2, -, in, ), /]
[*, r, [, pos2, ], ;, ++, pos2, ;, output, [, (, col2, -, 1, -, in, ), *, (]
[[, col1, ], *, r, [, pos2, ], ;, ++, pos2, ;, output, [, (, col2, -, 1, -, in]
[], *, r, [, pos2, ], ;, ++, pos2, ;, output, [, (, col2, -, 1, -, in, ), *]
[;, ++, pos2, ;, output, [, (, col2, -, 1, -, in, ), *, (, col2, -, in, ), /]
[[, pos2, ], ;, ++, pos2, ;, output, [, (, col2, -, 1, -, in, ), *, (, col2, -]
[], ;, ++, pos2, ;, output, [, (, col2, -, 1, -, in, ), *, (, col2, -, in, )]
[;, output, [, (, col2, -, 1, -, in, ), *, (, col2, -, in, ), /, 2, +, col1]
[;, output, [, (, col2, -, 1, -, in, ), *, (, col2, -, in, ), /, 2, +, col1]
[=, work, [, col2, +, wrk_off, ], *, rms, [, col1, +, rms_off, ], *, rms, [, col2, +, rms_off]
[[, (, col2, -, 1, -, in, ), *, (, col2, -, in, ), /, 2, +, col1, -, in]
[], =, work, [, col2, +, wrk_off, ], *, rms, [, col1, +, rms_off, ], *, rms, [, col2, +]
[-, in, ], =, work, [, col2, +, wrk_off, ], *, rms, [, col1, +, rms_off, ], *, rms, []
[+, col1, -, in, ], =, work, [, col2, +, wrk_off, ], *, rms, [, col1, +, rms_off, ], *]
[/, 2, +, col1, -, in, ], =, work, [, col2, +, wrk_off, ], *, rms, [, col1, +, rms_off]
[*, (, col2, -, in, ), /, 2, +, col1, -, in, ], =, work, [, col2, +, wrk_off, ]]
[), *, (, col2, -, in, ), /, 2, +, col1, -, in, ], =, work, [, col2, +, wrk_off]
[-, in, ), *, (, col2, -, in, ), /, 2, +, col1, -, in, ], =, work, [, col2]
[-, 1, -, in, ), *, (, col2, -, in, ), /, 2, +, col1, -, in, ], =, work]
[-, in, ), *, (, col2, -, in, ), /, 2, +, col1, -, in, ], =, work, [, col2]
[), *, (, col2, -, in, ), /, 2, +, col1, -, in, ], =, work, [, col2, +, wrk_off]
[/, 2, +, col1, -, in, ], =, work, [, col2, +, wrk_off, ], *, rms, [, col1, +, rms_off]
[), /, 2, +, col1, -, in, ], =, work, [, col2, +, wrk_off, ], *, rms, [, col1, +]
[-, in, ), /, 2, +, col1, -, in, ], =, work, [, col2, +, wrk_off, ], *, rms, []
[), /, 2, +, col1, -, in, ], =, work, [, col2, +, wrk_off, ], *, rms, [, col1, +]
[+, col1, -, in, ], =, work, [, col2, +, wrk_off, ], *, rms, [, col1, +, rms_off, ], *]
[-, in, ], =, work, [, col2, +, wrk_off, ], *, rms, [, col1, +, rms_off, ], *, rms, []
[], =, work, [, col2, +, wrk_off, ], *, rms, [, col1, +, rms_off, ], *, rms, [, col2, +]
[;, ++, pos, ;, }, sumxy, +=, d, [, col1, ], *, rhs, [, col1, ], ;, output, [, col1]
[*, rms, [, col2, +, rms_off, ], ;, ++, pos, ;, }, sumxy, +=, d, [, col1, ], *, rhs]
[*, rms, [, col1, +, rms_off, ], *, rms, [, col2, +, rms_off, ], ;, ++, pos, ;, }, sumxy]
[[, col2, +, wrk_off, ], *, rms, [, col1, +, rms_off, ], *, rms, [, col2, +, rms_off, ], ;]
[], *, rms, [, col1, +, rms_off, ], *, rms, [, col2, +, rms_off, ], ;, ++, pos, ;, }]
[+, wrk_off, ], *, rms, [, col1, +, rms_off, ], *, rms, [, col2, +, rms_off, ], ;, ++, pos]
[], *, rms, [, col1, +, rms_off, ], *, rms, [, col2, +, rms_off, ], ;, ++, pos, ;, }]
[*, rms, [, col2, +, rms_off, ], ;, ++, pos, ;, }, sumxy, +=, d, [, col1, ], *, rhs]
[[, col1, +, rms_off, ], *, rms, [, col2, +, rms_off, ], ;, ++, pos, ;, }, sumxy, +=, d]
[], *, rms, [, col2, +, rms_off, ], ;, ++, pos, ;, }, sumxy, +=, d, [, col1, ], *]
[+, rms_off, ], *, rms, [, col2, +, rms_off, ], ;, ++, pos, ;, }, sumxy, +=, d, [, col1]
[], *, rms, [, col2, +, rms_off, ], ;, ++, pos, ;, }, sumxy, +=, d, [, col1, ], *]
[;, ++, pos, ;, }, sumxy, +=, d, [, col1, ], *, rhs, [, col1, ], ;, output, [, col1]
[[, col2, +, rms_off, ], ;, ++, pos, ;, }, sumxy, +=, d, [, col1, ], *, rhs, [, col1]
[], ;, ++, pos, ;, }, sumxy, +=, d, [, col1, ], *, rhs, [, col1, ], ;, output, []
[+, rms_off, ], ;, ++, pos, ;, }, sumxy, +=, d, [, col1, ], *, rhs, [, col1, ], ;]
[], ;, ++, pos, ;, }, sumxy, +=, d, [, col1, ], *, rhs, [, col1, ], ;, output, []
[;, }, sumxy, +=, d, [, col1, ], *, rhs, [, col1, ], ;, output, [, col1, +, rms_off, +]
[;, }, sumxy, +=, d, [, col1, ], *, rhs, [, col1, ], ;, output, [, col1, +, rms_off, +]
[+=, d, [, col1, ], *, rhs, [, col1, ], ;, output, [, col1, +, rms_off, +, offXX, ], =]
[;, output, [, col1, +, rms_off, +, offXX, ], =, sumxy, *, rms, [, col1, +, rms_off, ], *, sumyy]
[*, rhs, [, col1, ], ;, output, [, col1, +, rms_off, +, offXX, ], =, sumxy, *, rms, [, col1]
[[, col1, ], *, rhs, [, col1, ], ;, output, [, col1, +, rms_off, +, offXX, ], =, sumxy, *]
[], *, rhs, [, col1, ], ;, output, [, col1, +, rms_off, +, offXX, ], =, sumxy, *, rms, []
[;, output, [, col1, +, rms_off, +, offXX, ], =, sumxy, *, rms, [, col1, +, rms_off, ], *, sumyy]
[[, col1, ], ;, output, [, col1, +, rms_off, +, offXX, ], =, sumxy, *, rms, [, col1, +, rms_off]
[], ;, output, [, col1, +, rms_off, +, offXX, ], =, sumxy, *, rms, [, col1, +, rms_off, ], *]
[=, sumxy, *, rms, [, col1, +, rms_off, ], *, sumyy, ;, }, return, output, ;, }, private, void, vmove]
[[, col1, +, rms_off, +, offXX, ], =, sumxy, *, rms, [, col1, +, rms_off, ], *, sumyy, ;, }]
[], =, sumxy, *, rms, [, col1, +, rms_off, ], *, sumyy, ;, }, return, output, ;, }, private, void]
[+, offXX, ], =, sumxy, *, rms, [, col1, +, rms_off, ], *, sumyy, ;, }, return, output, ;, }]
[+, rms_off, +, offXX, ], =, sumxy, *, rms, [, col1, +, rms_off, ], *, sumyy, ;, }, return, output]
[+, offXX, ], =, sumxy, *, rms, [, col1, +, rms_off, ], *, sumyy, ;, }, return, output, ;, }]
[], =, sumxy, *, rms, [, col1, +, rms_off, ], *, sumyy, ;, }, return, output, ;, }, private, void]
[;, }, return, output, ;, }, private, void, vmove, (, int, from, ,, int, to, ), {, double, d1, ;]
[*, sumyy, ;, }, return, output, ;, }, private, void, vmove, (, int, from, ,, int, to, ), {, double]
[*, rms, [, col1, +, rms_off, ], *, sumyy, ;, }, return, output, ;, }, private, void, vmove, (, int]
[*, sumyy, ;, }, return, output, ;, }, private, void, vmove, (, int, from, ,, int, to, ), {, double]
[[, col1, +, rms_off, ], *, sumyy, ;, }, return, output, ;, }, private, void, vmove, (, int, from, ,]
[], *, sumyy, ;, }, return, output, ;, }, private, void, vmove, (, int, from, ,, int, to, ), {]
[+, rms_off, ], *, sumyy, ;, }, return, output, ;, }, private, void, vmove, (, int, from, ,, int, to]
[], *, sumyy, ;, }, return, output, ;, }, private, void, vmove, (, int, from, ,, int, to, ), {]
[;, }, return, output, ;, }, private, void, vmove, (, int, from, ,, int, to, ), {, double, d1, ;]
[;, }, private, void, vmove, (, int, from, ,, int, to, ), {, double, d1, ;, double, d2, ;, double]
[;, if, (, from, ==, to, ), {, return, ;, }, if, (, !, this, ., rss_set, ), {, ss]
[), {, return, ;, }, if, (, !, this, ., rss_set, ), {, ss, (, ), ;, }, int, count]
[==, to, ), {, return, ;, }, if, (, !, this, ., rss_set, ), {, ss, (, ), ;, }]
[), {, return, ;, }, if, (, !, this, ., rss_set, ), {, ss, (, ), ;, }, int, count]
[), {, ss, (, ), ;, }, int, count, =, 0, ;, if, (, from, <, to, ), {, first]
[), {, ss, (, ), ;, }, int, count, =, 0, ;, if, (, from, <, to, ), {, first]
[., rss_set, ), {, ss, (, ), ;, }, int, count, =, 0, ;, if, (, from, <, to, )]
[;, }, int, count, =, 0, ;, if, (, from, <, to, ), {, first, =, from, ;, inc, =]
[;, if, (, from, <, to, ), {, first, =, from, ;, inc, =, 1, ;, count, =, to, -]
[), {, first, =, from, ;, inc, =, 1, ;, count, =, to, -, from, ;, }, else, {, first]
[<, to, ), {, first, =, from, ;, inc, =, 1, ;, count, =, to, -, from, ;, }, else]
[), {, first, =, from, ;, inc, =, 1, ;, count, =, to, -, from, ;, }, else, {, first]
[=, from, ;, inc, =, 1, ;, count, =, to, -, from, ;, }, else, {, first, =, from, -]
[;, inc, =, 1, ;, count, =, to, -, from, ;, }, else, {, first, =, from, -, 1, ;]
[=, 1, ;, count, =, to, -, from, ;, }, else, {, first, =, from, -, 1, ;, inc, =]
[;, count, =, to, -, from, ;, }, else, {, first, =, from, -, 1, ;, inc, =, -, 1]
[=, to, -, from, ;, }, else, {, first, =, from, -, 1, ;, inc, =, -, 1, ;, count]
[;, }, else, {, first, =, from, -, 1, ;, inc, =, -, 1, ;, count, =, from, -, to]
[-, from, ;, }, else, {, first, =, from, -, 1, ;, inc, =, -, 1, ;, count, =, from]
[;, }, else, {, first, =, from, -, 1, ;, inc, =, -, 1, ;, count, =, from, -, to]
[=, from, -, 1, ;, inc, =, -, 1, ;, count, =, from, -, to, ;, }, int, m, =]
[;, inc, =, -, 1, ;, count, =, from, -, to, ;, }, int, m, =, first, ;, int, idx]
[-, 1, ;, inc, =, -, 1, ;, count, =, from, -, to, ;, }, int, m, =, first, ;]
[;, inc, =, -, 1, ;, count, =, from, -, to, ;, }, int, m, =, first, ;, int, idx]
[=, -, 1, ;, count, =, from, -, to, ;, }, int, m, =, first, ;, int, idx, =, 0]
[;, count, =, from, -, to, ;, }, int, m, =, first, ;, int, idx, =, 0, ;, while, (]
[;, count, =, from, -, to, ;, }, int, m, =, first, ;, int, idx, =, 0, ;, while, (]
[=, from, -, to, ;, }, int, m, =, first, ;, int, idx, =, 0, ;, while, (, idx, <]
[;, }, int, m, =, first, ;, int, idx, =, 0, ;, while, (, idx, <, count, ), {, m1]
[-, to, ;, }, int, m, =, first, ;, int, idx, =, 0, ;, while, (, idx, <, count, )]
[;, }, int, m, =, first, ;, int, idx, =, 0, ;, while, (, idx, <, count, ), {, m1]
[;, int, idx, =, 0, ;, while, (, idx, <, count, ), {, m1, =, m, *, (, nvars, +]
[;, while, (, idx, <, count, ), {, m1, =, m, *, (, nvars, +, nvars, -, m, -, 1]
[), {, m1, =, m, *, (, nvars, +, nvars, -, m, -, 1, ), /, 2, ;, m2, =]
[<, count, ), {, m1, =, m, *, (, nvars, +, nvars, -, m, -, 1, ), /, 2, ;]
[), {, m1, =, m, *, (, nvars, +, nvars, -, m, -, 1, ), /, 2, ;, m2, =]
[=, m, *, (, nvars, +, nvars, -, m, -, 1, ), /, 2, ;, m2, =, m1, +, nvars]
[;, m2, =, m1, +, nvars, -, m, -, 1, ;, mp1, =, m, +, 1, ;, d1, =, d]
[/, 2, ;, m2, =, m1, +, nvars, -, m, -, 1, ;, mp1, =, m, +, 1, ;, d1]
[*, (, nvars, +, nvars, -, m, -, 1, ), /, 2, ;, m2, =, m1, +, nvars, -, m]
[/, 2, ;, m2, =, m1, +, nvars, -, m, -, 1, ;, mp1, =, m, +, 1, ;, d1]
[), /, 2, ;, m2, =, m1, +, nvars, -, m, -, 1, ;, mp1, =, m, +, 1, ;]
[-, 1, ), /, 2, ;, m2, =, m1, +, nvars, -, m, -, 1, ;, mp1, =, m, +]
[-, m, -, 1, ), /, 2, ;, m2, =, m1, +, nvars, -, m, -, 1, ;, mp1, =]
[+, nvars, -, m, -, 1, ), /, 2, ;, m2, =, m1, +, nvars, -, m, -, 1, ;]
[-, m, -, 1, ), /, 2, ;, m2, =, m1, +, nvars, -, m, -, 1, ;, mp1, =]
[-, 1, ), /, 2, ;, m2, =, m1, +, nvars, -, m, -, 1, ;, mp1, =, m, +]
[), /, 2, ;, m2, =, m1, +, nvars, -, m, -, 1, ;, mp1, =, m, +, 1, ;]
[;, m2, =, m1, +, nvars, -, m, -, 1, ;, mp1, =, m, +, 1, ;, d1, =, d]
[=, m1, +, nvars, -, m, -, 1, ;, mp1, =, m, +, 1, ;, d1, =, d, [, m]
[;, mp1, =, m, +, 1, ;, d1, =, d, [, m, ], ;, d2, =, d, [, mp1, ]]
[-, 1, ;, mp1, =, m, +, 1, ;, d1, =, d, [, m, ], ;, d2, =, d, []
[-, m, -, 1, ;, mp1, =, m, +, 1, ;, d1, =, d, [, m, ], ;, d2, =]
[+, nvars, -, m, -, 1, ;, mp1, =, m, +, 1, ;, d1, =, d, [, m, ], ;]
[-, m, -, 1, ;, mp1, =, m, +, 1, ;, d1, =, d, [, m, ], ;, d2, =]
[-, 1, ;, mp1, =, m, +, 1, ;, d1, =, d, [, m, ], ;, d2, =, d, []
[;, mp1, =, m, +, 1, ;, d1, =, d, [, m, ], ;, d2, =, d, [, mp1, ]]
[=, m, +, 1, ;, d1, =, d, [, m, ], ;, d2, =, d, [, mp1, ], ;, if]
[;, d1, =, d, [, m, ], ;, d2, =, d, [, mp1, ], ;, if, (, d1, >, this]
[+, 1, ;, d1, =, d, [, m, ], ;, d2, =, d, [, mp1, ], ;, if, (, d1]
[;, d1, =, d, [, m, ], ;, d2, =, d, [, mp1, ], ;, if, (, d1, >, this]
[=, d, [, m, ], ;, d2, =, d, [, mp1, ], ;, if, (, d1, >, this, ., epsilon]
[;, d2, =, d, [, mp1, ], ;, if, (, d1, >, this, ., epsilon, ||, d2, >, this, .]
[[, m, ], ;, d2, =, d, [, mp1, ], ;, if, (, d1, >, this, ., epsilon, ||, d2]
[], ;, d2, =, d, [, mp1, ], ;, if, (, d1, >, this, ., epsilon, ||, d2, >, this]
[=, d, [, mp1, ], ;, if, (, d1, >, this, ., epsilon, ||, d2, >, this, ., epsilon, )]
[;, if, (, d1, >, this, ., epsilon, ||, d2, >, this, ., epsilon, ), {, X, =, r, []
[[, mp1, ], ;, if, (, d1, >, this, ., epsilon, ||, d2, >, this, ., epsilon, ), {, X]
[], ;, if, (, d1, >, this, ., epsilon, ||, d2, >, this, ., epsilon, ), {, X, =, r]
[), {, X, =, r, [, m1, ], ;, if, (, Math, ., abs, (, X, ), *, Math, .]
[||, d2, >, this, ., epsilon, ), {, X, =, r, [, m1, ], ;, if, (, Math, ., abs]
[>, this, ., epsilon, ||, d2, >, this, ., epsilon, ), {, X, =, r, [, m1, ], ;, if]
[||, d2, >, this, ., epsilon, ), {, X, =, r, [, m1, ], ;, if, (, Math, ., abs]
[., epsilon, ||, d2, >, this, ., epsilon, ), {, X, =, r, [, m1, ], ;, if, (, Math]
[), {, X, =, r, [, m1, ], ;, if, (, Math, ., abs, (, X, ), *, Math, .]
[>, this, ., epsilon, ), {, X, =, r, [, m1, ], ;, if, (, Math, ., abs, (, X]
[), {, X, =, r, [, m1, ], ;, if, (, Math, ., abs, (, X, ), *, Math, .]
[., epsilon, ), {, X, =, r, [, m1, ], ;, if, (, Math, ., abs, (, X, ), *]
[=, r, [, m1, ], ;, if, (, Math, ., abs, (, X, ), *, Math, ., sqrt, (, d1]
[;, if, (, Math, ., abs, (, X, ), *, Math, ., sqrt, (, d1, ), <, tol, [, mp1]
[[, m1, ], ;, if, (, Math, ., abs, (, X, ), *, Math, ., sqrt, (, d1, ), <]
[], ;, if, (, Math, ., abs, (, X, ), *, Math, ., sqrt, (, d1, ), <, tol, []
[), {, X, =, 0.0, ;, }, if, (, d1, <, this, ., epsilon, ||, Math, ., abs, (, X]
[<, tol, [, mp1, ], ), {, X, =, 0.0, ;, }, if, (, d1, <, this, ., epsilon, ||]
[*, Math, ., sqrt, (, d1, ), <, tol, [, mp1, ], ), {, X, =, 0.0, ;, }, if]
[., abs, (, X, ), *, Math, ., sqrt, (, d1, ), <, tol, [, mp1, ], ), {, X]
[), *, Math, ., sqrt, (, d1, ), <, tol, [, mp1, ], ), {, X, =, 0.0, ;, }]
[<, tol, [, mp1, ], ), {, X, =, 0.0, ;, }, if, (, d1, <, this, ., epsilon, ||]
[., sqrt, (, d1, ), <, tol, [, mp1, ], ), {, X, =, 0.0, ;, }, if, (, d1]
[), <, tol, [, mp1, ], ), {, X, =, 0.0, ;, }, if, (, d1, <, this, ., epsilon]
[), {, X, =, 0.0, ;, }, if, (, d1, <, this, ., epsilon, ||, Math, ., abs, (, X]
[[, mp1, ], ), {, X, =, 0.0, ;, }, if, (, d1, <, this, ., epsilon, ||, Math, .]
[], ), {, X, =, 0.0, ;, }, if, (, d1, <, this, ., epsilon, ||, Math, ., abs, (]
[=, 0.0, ;, }, if, (, d1, <, this, ., epsilon, ||, Math, ., abs, (, X, ), <, this]
[;, }, if, (, d1, <, this, ., epsilon, ||, Math, ., abs, (, X, ), <, this, ., epsilon]
[), {, d, [, m, ], =, d2, ;, d, [, mp1, ], =, d1, ;, r, [, m1, ]]
[||, Math, ., abs, (, X, ), <, this, ., epsilon, ), {, d, [, m, ], =, d2, ;]
[<, this, ., epsilon, ||, Math, ., abs, (, X, ), <, this, ., epsilon, ), {, d, [, m]
[||, Math, ., abs, (, X, ), <, this, ., epsilon, ), {, d, [, m, ], =, d2, ;]
[., epsilon, ||, Math, ., abs, (, X, ), <, this, ., epsilon, ), {, d, [, m, ], =]
[), {, d, [, m, ], =, d2, ;, d, [, mp1, ], =, d1, ;, r, [, m1, ]]
[<, this, ., epsilon, ), {, d, [, m, ], =, d2, ;, d, [, mp1, ], =, d1, ;]
[., abs, (, X, ), <, this, ., epsilon, ), {, d, [, m, ], =, d2, ;, d, []
[), <, this, ., epsilon, ), {, d, [, m, ], =, d2, ;, d, [, mp1, ], =, d1]
[), {, d, [, m, ], =, d2, ;, d, [, mp1, ], =, d1, ;, r, [, m1, ]]
[., epsilon, ), {, d, [, m, ], =, d2, ;, d, [, mp1, ], =, d1, ;, r, []
[=, d2, ;, d, [, mp1, ], =, d1, ;, r, [, m1, ], =, 0.0, ;, for, (, int]
[[, m, ], =, d2, ;, d, [, mp1, ], =, d1, ;, r, [, m1, ], =, 0.0, ;]
[], =, d2, ;, d, [, mp1, ], =, d1, ;, r, [, m1, ], =, 0.0, ;, for, (]
[;, d, [, mp1, ], =, d1, ;, r, [, m1, ], =, 0.0, ;, for, (, int, col, =]
[=, d1, ;, r, [, m1, ], =, 0.0, ;, for, (, int, col, =, m, +, 2, ;, col]
[[, mp1, ], =, d1, ;, r, [, m1, ], =, 0.0, ;, for, (, int, col, =, m, +]
[], =, d1, ;, r, [, m1, ], =, 0.0, ;, for, (, int, col, =, m, +, 2, ;]
[;, r, [, m1, ], =, 0.0, ;, for, (, int, col, =, m, +, 2, ;, col, <, nvars]
[=, 0.0, ;, for, (, int, col, =, m, +, 2, ;, col, <, nvars, ;, col, ++, ), {]
[[, m1, ], =, 0.0, ;, for, (, int, col, =, m, +, 2, ;, col, <, nvars, ;, col]
[], =, 0.0, ;, for, (, int, col, =, m, +, 2, ;, col, <, nvars, ;, col, ++, )]
[;, for, (, int, col, =, m, +, 2, ;, col, <, nvars, ;, col, ++, ), {, ++, m1]
[;, col, <, nvars, ;, col, ++, ), {, ++, m1, ;, X, =, r, [, m1, ], ;, r]
[+, 2, ;, col, <, nvars, ;, col, ++, ), {, ++, m1, ;, X, =, r, [, m1, ]]
[;, col, <, nvars, ;, col, ++, ), {, ++, m1, ;, X, =, r, [, m1, ], ;, r]
[;, col, ++, ), {, ++, m1, ;, X, =, r, [, m1, ], ;, r, [, m1, ], =]
[<, nvars, ;, col, ++, ), {, ++, m1, ;, X, =, r, [, m1, ], ;, r, [, m1]
[;, col, ++, ), {, ++, m1, ;, X, =, r, [, m1, ], ;, r, [, m1, ], =]
[), {, ++, m1, ;, X, =, r, [, m1, ], ;, r, [, m1, ], =, r, [, m2]
[++, ), {, ++, m1, ;, X, =, r, [, m1, ], ;, r, [, m1, ], =, r, []
[;, X, =, r, [, m1, ], ;, r, [, m1, ], =, r, [, m2, ], ;, r, []
[;, X, =, r, [, m1, ], ;, r, [, m1, ], =, r, [, m2, ], ;, r, []
[=, r, [, m1, ], ;, r, [, m1, ], =, r, [, m2, ], ;, r, [, m2, ]]
[;, r, [, m1, ], =, r, [, m2, ], ;, r, [, m2, ], =, X, ;, ++, m2]
[[, m1, ], ;, r, [, m1, ], =, r, [, m2, ], ;, r, [, m2, ], =, X]
[], ;, r, [, m1, ], =, r, [, m2, ], ;, r, [, m2, ], =, X, ;, ++]
[=, r, [, m2, ], ;, r, [, m2, ], =, X, ;, ++, m2, ;, }, X, =, rhs]
[[, m1, ], =, r, [, m2, ], ;, r, [, m2, ], =, X, ;, ++, m2, ;, }]
[], =, r, [, m2, ], ;, r, [, m2, ], =, X, ;, ++, m2, ;, }, X, =]
[;, r, [, m2, ], =, X, ;, ++, m2, ;, }, X, =, rhs, [, m, ], ;, rhs]
[[, m2, ], ;, r, [, m2, ], =, X, ;, ++, m2, ;, }, X, =, rhs, [, m]
[], ;, r, [, m2, ], =, X, ;, ++, m2, ;, }, X, =, rhs, [, m, ], ;]
[=, X, ;, ++, m2, ;, }, X, =, rhs, [, m, ], ;, rhs, [, m, ], =, rhs]
[[, m2, ], =, X, ;, ++, m2, ;, }, X, =, rhs, [, m, ], ;, rhs, [, m]
[], =, X, ;, ++, m2, ;, }, X, =, rhs, [, m, ], ;, rhs, [, m, ], =]
[;, ++, m2, ;, }, X, =, rhs, [, m, ], ;, rhs, [, m, ], =, rhs, [, mp1]
[;, }, X, =, rhs, [, m, ], ;, rhs, [, m, ], =, rhs, [, mp1, ], ;, rhs]
[;, }, X, =, rhs, [, m, ], ;, rhs, [, m, ], =, rhs, [, mp1, ], ;, rhs]
[=, rhs, [, m, ], ;, rhs, [, m, ], =, rhs, [, mp1, ], ;, rhs, [, mp1, ]]
[;, rhs, [, m, ], =, rhs, [, mp1, ], ;, rhs, [, mp1, ], =, X, ;, bSkipTo40, =]
[[, m, ], ;, rhs, [, m, ], =, rhs, [, mp1, ], ;, rhs, [, mp1, ], =, X]
[], ;, rhs, [, m, ], =, rhs, [, mp1, ], ;, rhs, [, mp1, ], =, X, ;, bSkipTo40]
[=, rhs, [, mp1, ], ;, rhs, [, mp1, ], =, X, ;, bSkipTo40, =, true, ;, }, else, if]
[[, m, ], =, rhs, [, mp1, ], ;, rhs, [, mp1, ], =, X, ;, bSkipTo40, =, true, ;]
[], =, rhs, [, mp1, ], ;, rhs, [, mp1, ], =, X, ;, bSkipTo40, =, true, ;, }, else]
[;, rhs, [, mp1, ], =, X, ;, bSkipTo40, =, true, ;, }, else, if, (, d2, <, this, .]
[[, mp1, ], ;, rhs, [, mp1, ], =, X, ;, bSkipTo40, =, true, ;, }, else, if, (, d2]
[], ;, rhs, [, mp1, ], =, X, ;, bSkipTo40, =, true, ;, }, else, if, (, d2, <, this]
[=, X, ;, bSkipTo40, =, true, ;, }, else, if, (, d2, <, this, ., epsilon, ), {, d, []
[[, mp1, ], =, X, ;, bSkipTo40, =, true, ;, }, else, if, (, d2, <, this, ., epsilon, )]
[], =, X, ;, bSkipTo40, =, true, ;, }, else, if, (, d2, <, this, ., epsilon, ), {, d]
[;, bSkipTo40, =, true, ;, }, else, if, (, d2, <, this, ., epsilon, ), {, d, [, m, ]]
[=, true, ;, }, else, if, (, d2, <, this, ., epsilon, ), {, d, [, m, ], =, d1]
[;, }, else, if, (, d2, <, this, ., epsilon, ), {, d, [, m, ], =, d1, *, X]
[), {, d, [, m, ], =, d1, *, X, *, X, ;, r, [, m1, ], =, 1.0, /]
[<, this, ., epsilon, ), {, d, [, m, ], =, d1, *, X, *, X, ;, r, [, m1]
[), {, d, [, m, ], =, d1, *, X, *, X, ;, r, [, m1, ], =, 1.0, /]
[., epsilon, ), {, d, [, m, ], =, d1, *, X, *, X, ;, r, [, m1, ], =]
[=, d1, *, X, *, X, ;, r, [, m1, ], =, 1.0, /, X, ;, for, (, int, _i]
[[, m, ], =, d1, *, X, *, X, ;, r, [, m1, ], =, 1.0, /, X, ;, for]
[], =, d1, *, X, *, X, ;, r, [, m1, ], =, 1.0, /, X, ;, for, (, int]
[;, r, [, m1, ], =, 1.0, /, X, ;, for, (, int, _i, =, m1, +, 1, ;, _i]
[*, X, ;, r, [, m1, ], =, 1.0, /, X, ;, for, (, int, _i, =, m1, +, 1]
[*, X, *, X, ;, r, [, m1, ], =, 1.0, /, X, ;, for, (, int, _i, =, m1]
[*, X, ;, r, [, m1, ], =, 1.0, /, X, ;, for, (, int, _i, =, m1, +, 1]
[;, r, [, m1, ], =, 1.0, /, X, ;, for, (, int, _i, =, m1, +, 1, ;, _i]
[=, 1.0, /, X, ;, for, (, int, _i, =, m1, +, 1, ;, _i, <, m1, +, nvars, -]
[[, m1, ], =, 1.0, /, X, ;, for, (, int, _i, =, m1, +, 1, ;, _i, <, m1]
[], =, 1.0, /, X, ;, for, (, int, _i, =, m1, +, 1, ;, _i, <, m1, +, nvars]
[;, for, (, int, _i, =, m1, +, 1, ;, _i, <, m1, +, nvars, -, m, -, 1, ;]
[/, X, ;, for, (, int, _i, =, m1, +, 1, ;, _i, <, m1, +, nvars, -, m, -]
[;, for, (, int, _i, =, m1, +, 1, ;, _i, <, m1, +, nvars, -, m, -, 1, ;]
[;, _i, <, m1, +, nvars, -, m, -, 1, ;, _i, ++, ), {, r, [, _i, ], /=]
[+, 1, ;, _i, <, m1, +, nvars, -, m, -, 1, ;, _i, ++, ), {, r, [, _i]
[;, _i, <, m1, +, nvars, -, m, -, 1, ;, _i, ++, ), {, r, [, _i, ], /=]
[;, _i, ++, ), {, r, [, _i, ], /=, X, ;, }, rhs, [, m, ], =, rhs, []
[<, m1, +, nvars, -, m, -, 1, ;, _i, ++, ), {, r, [, _i, ], /=, X, ;]
[;, _i, ++, ), {, r, [, _i, ], /=, X, ;, }, rhs, [, m, ], =, rhs, []
[-, 1, ;, _i, ++, ), {, r, [, _i, ], /=, X, ;, }, rhs, [, m, ], =]
[-, m, -, 1, ;, _i, ++, ), {, r, [, _i, ], /=, X, ;, }, rhs, [, m]
[+, nvars, -, m, -, 1, ;, _i, ++, ), {, r, [, _i, ], /=, X, ;, }, rhs]
[-, m, -, 1, ;, _i, ++, ), {, r, [, _i, ], /=, X, ;, }, rhs, [, m]
[-, 1, ;, _i, ++, ), {, r, [, _i, ], /=, X, ;, }, rhs, [, m, ], =]
[;, _i, ++, ), {, r, [, _i, ], /=, X, ;, }, rhs, [, m, ], =, rhs, []
[), {, r, [, _i, ], /=, X, ;, }, rhs, [, m, ], =, rhs, [, m, ], /]
[++, ), {, r, [, _i, ], /=, X, ;, }, rhs, [, m, ], =, rhs, [, m, ]]
[/=, X, ;, }, rhs, [, m, ], =, rhs, [, m, ], /, X, ;, bSkipTo40, =, true, ;]
[[, _i, ], /=, X, ;, }, rhs, [, m, ], =, rhs, [, m, ], /, X, ;, bSkipTo40]
[], /=, X, ;, }, rhs, [, m, ], =, rhs, [, m, ], /, X, ;, bSkipTo40, =, true]
[;, }, rhs, [, m, ], =, rhs, [, m, ], /, X, ;, bSkipTo40, =, true, ;, }, if]
[=, rhs, [, m, ], /, X, ;, bSkipTo40, =, true, ;, }, if, (, !, bSkipTo40, ), {, d1new]
[[, m, ], =, rhs, [, m, ], /, X, ;, bSkipTo40, =, true, ;, }, if, (, !, bSkipTo40]
[], =, rhs, [, m, ], /, X, ;, bSkipTo40, =, true, ;, }, if, (, !, bSkipTo40, ), {]
[;, bSkipTo40, =, true, ;, }, if, (, !, bSkipTo40, ), {, d1new, =, d2, +, d1, *, X, *]
[/, X, ;, bSkipTo40, =, true, ;, }, if, (, !, bSkipTo40, ), {, d1new, =, d2, +, d1, *]
[[, m, ], /, X, ;, bSkipTo40, =, true, ;, }, if, (, !, bSkipTo40, ), {, d1new, =, d2]
[], /, X, ;, bSkipTo40, =, true, ;, }, if, (, !, bSkipTo40, ), {, d1new, =, d2, +, d1]
[;, bSkipTo40, =, true, ;, }, if, (, !, bSkipTo40, ), {, d1new, =, d2, +, d1, *, X, *]
[=, true, ;, }, if, (, !, bSkipTo40, ), {, d1new, =, d2, +, d1, *, X, *, X, ;]
[;, }, if, (, !, bSkipTo40, ), {, d1new, =, d2, +, d1, *, X, *, X, ;, cbar, =]
[), {, d1new, =, d2, +, d1, *, X, *, X, ;, cbar, =, d2, /, d1new, ;, sbar, =]
[), {, d1new, =, d2, +, d1, *, X, *, X, ;, cbar, =, d2, /, d1new, ;, sbar, =]
[=, d2, +, d1, *, X, *, X, ;, cbar, =, d2, /, d1new, ;, sbar, =, X, *, d1]
[;, cbar, =, d2, /, d1new, ;, sbar, =, X, *, d1, /, d1new, ;, d2new, =, d1, *, cbar]
[+, d1, *, X, *, X, ;, cbar, =, d2, /, d1new, ;, sbar, =, X, *, d1, /, d1new]
[;, cbar, =, d2, /, d1new, ;, sbar, =, X, *, d1, /, d1new, ;, d2new, =, d1, *, cbar]
[*, X, ;, cbar, =, d2, /, d1new, ;, sbar, =, X, *, d1, /, d1new, ;, d2new, =, d1]
[*, X, *, X, ;, cbar, =, d2, /, d1new, ;, sbar, =, X, *, d1, /, d1new, ;, d2new]
[*, X, ;, cbar, =, d2, /, d1new, ;, sbar, =, X, *, d1, /, d1new, ;, d2new, =, d1]
[;, cbar, =, d2, /, d1new, ;, sbar, =, X, *, d1, /, d1new, ;, d2new, =, d1, *, cbar]
[=, d2, /, d1new, ;, sbar, =, X, *, d1, /, d1new, ;, d2new, =, d1, *, cbar, ;, d]
[;, sbar, =, X, *, d1, /, d1new, ;, d2new, =, d1, *, cbar, ;, d, [, m, ], =]
[/, d1new, ;, sbar, =, X, *, d1, /, d1new, ;, d2new, =, d1, *, cbar, ;, d, [, m]
[;, sbar, =, X, *, d1, /, d1new, ;, d2new, =, d1, *, cbar, ;, d, [, m, ], =]
[=, X, *, d1, /, d1new, ;, d2new, =, d1, *, cbar, ;, d, [, m, ], =, d1new, ;]
[;, d2new, =, d1, *, cbar, ;, d, [, m, ], =, d1new, ;, d, [, mp1, ], =, d2new]
[/, d1new, ;, d2new, =, d1, *, cbar, ;, d, [, m, ], =, d1new, ;, d, [, mp1, ]]
[*, d1, /, d1new, ;, d2new, =, d1, *, cbar, ;, d, [, m, ], =, d1new, ;, d, []
[/, d1new, ;, d2new, =, d1, *, cbar, ;, d, [, m, ], =, d1new, ;, d, [, mp1, ]]
[;, d2new, =, d1, *, cbar, ;, d, [, m, ], =, d1new, ;, d, [, mp1, ], =, d2new]
[=, d1, *, cbar, ;, d, [, m, ], =, d1new, ;, d, [, mp1, ], =, d2new, ;, r]
[;, d, [, m, ], =, d1new, ;, d, [, mp1, ], =, d2new, ;, r, [, m1, ], =]
[*, cbar, ;, d, [, m, ], =, d1new, ;, d, [, mp1, ], =, d2new, ;, r, [, m1]
[;, d, [, m, ], =, d1new, ;, d, [, mp1, ], =, d2new, ;, r, [, m1, ], =]
[=, d1new, ;, d, [, mp1, ], =, d2new, ;, r, [, m1, ], =, sbar, ;, for, (, int]
[[, m, ], =, d1new, ;, d, [, mp1, ], =, d2new, ;, r, [, m1, ], =, sbar, ;]
[], =, d1new, ;, d, [, mp1, ], =, d2new, ;, r, [, m1, ], =, sbar, ;, for, (]
[;, d, [, mp1, ], =, d2new, ;, r, [, m1, ], =, sbar, ;, for, (, int, col, =]
[=, d2new, ;, r, [, m1, ], =, sbar, ;, for, (, int, col, =, m, +, 2, ;, col]
[[, mp1, ], =, d2new, ;, r, [, m1, ], =, sbar, ;, for, (, int, col, =, m, +]
[], =, d2new, ;, r, [, m1, ], =, sbar, ;, for, (, int, col, =, m, +, 2, ;]
[;, r, [, m1, ], =, sbar, ;, for, (, int, col, =, m, +, 2, ;, col, <, nvars]
[=, sbar, ;, for, (, int, col, =, m, +, 2, ;, col, <, nvars, ;, col, ++, ), {]
[[, m1, ], =, sbar, ;, for, (, int, col, =, m, +, 2, ;, col, <, nvars, ;, col]
[], =, sbar, ;, for, (, int, col, =, m, +, 2, ;, col, <, nvars, ;, col, ++, )]
[;, for, (, int, col, =, m, +, 2, ;, col, <, nvars, ;, col, ++, ), {, ++, m1]
[;, col, <, nvars, ;, col, ++, ), {, ++, m1, ;, Y, =, r, [, m1, ], ;, r]
[+, 2, ;, col, <, nvars, ;, col, ++, ), {, ++, m1, ;, Y, =, r, [, m1, ]]
[;, col, <, nvars, ;, col, ++, ), {, ++, m1, ;, Y, =, r, [, m1, ], ;, r]
[;, col, ++, ), {, ++, m1, ;, Y, =, r, [, m1, ], ;, r, [, m1, ], =]
[<, nvars, ;, col, ++, ), {, ++, m1, ;, Y, =, r, [, m1, ], ;, r, [, m1]
[;, col, ++, ), {, ++, m1, ;, Y, =, r, [, m1, ], ;, r, [, m1, ], =]
[), {, ++, m1, ;, Y, =, r, [, m1, ], ;, r, [, m1, ], =, cbar, *, r]
[++, ), {, ++, m1, ;, Y, =, r, [, m1, ], ;, r, [, m1, ], =, cbar, *]
[;, Y, =, r, [, m1, ], ;, r, [, m1, ], =, cbar, *, r, [, m2, ], +]
[;, Y, =, r, [, m1, ], ;, r, [, m1, ], =, cbar, *, r, [, m2, ], +]
[=, r, [, m1, ], ;, r, [, m1, ], =, cbar, *, r, [, m2, ], +, sbar, *]
[;, r, [, m1, ], =, cbar, *, r, [, m2, ], +, sbar, *, Y, ;, r, [, m2]
[[, m1, ], ;, r, [, m1, ], =, cbar, *, r, [, m2, ], +, sbar, *, Y, ;]
[], ;, r, [, m1, ], =, cbar, *, r, [, m2, ], +, sbar, *, Y, ;, r, []
[=, cbar, *, r, [, m2, ], +, sbar, *, Y, ;, r, [, m2, ], =, Y, -, X]
[[, m1, ], =, cbar, *, r, [, m2, ], +, sbar, *, Y, ;, r, [, m2, ], =]
[], =, cbar, *, r, [, m2, ], +, sbar, *, Y, ;, r, [, m2, ], =, Y, -]
[;, r, [, m2, ], =, Y, -, X, *, r, [, m2, ], ;, ++, m2, ;, }, Y]
[+, sbar, *, Y, ;, r, [, m2, ], =, Y, -, X, *, r, [, m2, ], ;, ++]
[*, r, [, m2, ], +, sbar, *, Y, ;, r, [, m2, ], =, Y, -, X, *, r]
[+, sbar, *, Y, ;, r, [, m2, ], =, Y, -, X, *, r, [, m2, ], ;, ++]
[[, m2, ], +, sbar, *, Y, ;, r, [, m2, ], =, Y, -, X, *, r, [, m2]
[], +, sbar, *, Y, ;, r, [, m2, ], =, Y, -, X, *, r, [, m2, ], ;]
[;, r, [, m2, ], =, Y, -, X, *, r, [, m2, ], ;, ++, m2, ;, }, Y]
[*, Y, ;, r, [, m2, ], =, Y, -, X, *, r, [, m2, ], ;, ++, m2, ;]
[;, r, [, m2, ], =, Y, -, X, *, r, [, m2, ], ;, ++, m2, ;, }, Y]
[=, Y, -, X, *, r, [, m2, ], ;, ++, m2, ;, }, Y, =, rhs, [, m, ]]
[[, m2, ], =, Y, -, X, *, r, [, m2, ], ;, ++, m2, ;, }, Y, =, rhs]
[], =, Y, -, X, *, r, [, m2, ], ;, ++, m2, ;, }, Y, =, rhs, [, m]
[;, ++, m2, ;, }, Y, =, rhs, [, m, ], ;, rhs, [, m, ], =, cbar, *, rhs]
[-, X, *, r, [, m2, ], ;, ++, m2, ;, }, Y, =, rhs, [, m, ], ;, rhs]
[;, ++, m2, ;, }, Y, =, rhs, [, m, ], ;, rhs, [, m, ], =, cbar, *, rhs]
[*, r, [, m2, ], ;, ++, m2, ;, }, Y, =, rhs, [, m, ], ;, rhs, [, m]
[;, ++, m2, ;, }, Y, =, rhs, [, m, ], ;, rhs, [, m, ], =, cbar, *, rhs]
[[, m2, ], ;, ++, m2, ;, }, Y, =, rhs, [, m, ], ;, rhs, [, m, ], =]
[], ;, ++, m2, ;, }, Y, =, rhs, [, m, ], ;, rhs, [, m, ], =, cbar, *]
[;, }, Y, =, rhs, [, m, ], ;, rhs, [, m, ], =, cbar, *, rhs, [, mp1, ]]
[;, }, Y, =, rhs, [, m, ], ;, rhs, [, m, ], =, cbar, *, rhs, [, mp1, ]]
[=, rhs, [, m, ], ;, rhs, [, m, ], =, cbar, *, rhs, [, mp1, ], +, sbar, *]
[;, rhs, [, m, ], =, cbar, *, rhs, [, mp1, ], +, sbar, *, Y, ;, rhs, [, mp1]
[[, m, ], ;, rhs, [, m, ], =, cbar, *, rhs, [, mp1, ], +, sbar, *, Y, ;]
[], ;, rhs, [, m, ], =, cbar, *, rhs, [, mp1, ], +, sbar, *, Y, ;, rhs, []
[=, cbar, *, rhs, [, mp1, ], +, sbar, *, Y, ;, rhs, [, mp1, ], =, Y, -, X]
[[, m, ], =, cbar, *, rhs, [, mp1, ], +, sbar, *, Y, ;, rhs, [, mp1, ], =]
[], =, cbar, *, rhs, [, mp1, ], +, sbar, *, Y, ;, rhs, [, mp1, ], =, Y, -]
[;, rhs, [, mp1, ], =, Y, -, X, *, rhs, [, mp1, ], ;, }, }, if, (, m]
[+, sbar, *, Y, ;, rhs, [, mp1, ], =, Y, -, X, *, rhs, [, mp1, ], ;, }]
[*, rhs, [, mp1, ], +, sbar, *, Y, ;, rhs, [, mp1, ], =, Y, -, X, *, rhs]
[+, sbar, *, Y, ;, rhs, [, mp1, ], =, Y, -, X, *, rhs, [, mp1, ], ;, }]
[[, mp1, ], +, sbar, *, Y, ;, rhs, [, mp1, ], =, Y, -, X, *, rhs, [, mp1]
[], +, sbar, *, Y, ;, rhs, [, mp1, ], =, Y, -, X, *, rhs, [, mp1, ], ;]
[;, rhs, [, mp1, ], =, Y, -, X, *, rhs, [, mp1, ], ;, }, }, if, (, m]
[*, Y, ;, rhs, [, mp1, ], =, Y, -, X, *, rhs, [, mp1, ], ;, }, }, if]
[;, rhs, [, mp1, ], =, Y, -, X, *, rhs, [, mp1, ], ;, }, }, if, (, m]
[=, Y, -, X, *, rhs, [, mp1, ], ;, }, }, if, (, m, >, 0, ), {, pos]
[[, mp1, ], =, Y, -, X, *, rhs, [, mp1, ], ;, }, }, if, (, m, >, 0]
[], =, Y, -, X, *, rhs, [, mp1, ], ;, }, }, if, (, m, >, 0, ), {]
[;, }, }, if, (, m, >, 0, ), {, pos, =, m, ;, for, (, int, row, =, 0]
[-, X, *, rhs, [, mp1, ], ;, }, }, if, (, m, >, 0, ), {, pos, =, m]
[;, }, }, if, (, m, >, 0, ), {, pos, =, m, ;, for, (, int, row, =, 0]
[*, rhs, [, mp1, ], ;, }, }, if, (, m, >, 0, ), {, pos, =, m, ;, for]
[;, }, }, if, (, m, >, 0, ), {, pos, =, m, ;, for, (, int, row, =, 0]
[[, mp1, ], ;, }, }, if, (, m, >, 0, ), {, pos, =, m, ;, for, (, int]
[], ;, }, }, if, (, m, >, 0, ), {, pos, =, m, ;, for, (, int, row, =]
[), {, pos, =, m, ;, for, (, int, row, =, 0, ;, row, <, m, ;, row, ++, )]
[>, 0, ), {, pos, =, m, ;, for, (, int, row, =, 0, ;, row, <, m, ;, row]
[), {, pos, =, m, ;, for, (, int, row, =, 0, ;, row, <, m, ;, row, ++, )]
[=, m, ;, for, (, int, row, =, 0, ;, row, <, m, ;, row, ++, ), {, X, =]
[;, for, (, int, row, =, 0, ;, row, <, m, ;, row, ++, ), {, X, =, r, []
[;, row, <, m, ;, row, ++, ), {, X, =, r, [, pos, ], ;, r, [, pos, ]]
[;, row, ++, ), {, X, =, r, [, pos, ], ;, r, [, pos, ], =, r, [, pos]
[<, m, ;, row, ++, ), {, X, =, r, [, pos, ], ;, r, [, pos, ], =, r]
[;, row, ++, ), {, X, =, r, [, pos, ], ;, r, [, pos, ], =, r, [, pos]
[), {, X, =, r, [, pos, ], ;, r, [, pos, ], =, r, [, pos, -, 1, ]]
[++, ), {, X, =, r, [, pos, ], ;, r, [, pos, ], =, r, [, pos, -, 1]
[=, r, [, pos, ], ;, r, [, pos, ], =, r, [, pos, -, 1, ], ;, r, []
[;, r, [, pos, ], =, r, [, pos, -, 1, ], ;, r, [, pos, -, 1, ], =]
[[, pos, ], ;, r, [, pos, ], =, r, [, pos, -, 1, ], ;, r, [, pos, -]
[], ;, r, [, pos, ], =, r, [, pos, -, 1, ], ;, r, [, pos, -, 1, ]]
[=, r, [, pos, -, 1, ], ;, r, [, pos, -, 1, ], =, X, ;, pos, +=, nvars]
[[, pos, ], =, r, [, pos, -, 1, ], ;, r, [, pos, -, 1, ], =, X, ;]
[], =, r, [, pos, -, 1, ], ;, r, [, pos, -, 1, ], =, X, ;, pos, +=]
[;, r, [, pos, -, 1, ], =, X, ;, pos, +=, nvars, -, row, -, 2, ;, }, }]
[[, pos, -, 1, ], ;, r, [, pos, -, 1, ], =, X, ;, pos, +=, nvars, -, row]
[], ;, r, [, pos, -, 1, ], =, X, ;, pos, +=, nvars, -, row, -, 2, ;, }]
[-, 1, ], ;, r, [, pos, -, 1, ], =, X, ;, pos, +=, nvars, -, row, -, 2]
[], ;, r, [, pos, -, 1, ], =, X, ;, pos, +=, nvars, -, row, -, 2, ;, }]
[=, X, ;, pos, +=, nvars, -, row, -, 2, ;, }, }, m1, =, vorder, [, m, ], ;]
[[, pos, -, 1, ], =, X, ;, pos, +=, nvars, -, row, -, 2, ;, }, }, m1, =]
[], =, X, ;, pos, +=, nvars, -, row, -, 2, ;, }, }, m1, =, vorder, [, m, ]]
[-, 1, ], =, X, ;, pos, +=, nvars, -, row, -, 2, ;, }, }, m1, =, vorder, []
[], =, X, ;, pos, +=, nvars, -, row, -, 2, ;, }, }, m1, =, vorder, [, m, ]]
[;, pos, +=, nvars, -, row, -, 2, ;, }, }, m1, =, vorder, [, m, ], ;, vorder, []
[+=, nvars, -, row, -, 2, ;, }, }, m1, =, vorder, [, m, ], ;, vorder, [, m, ]]
[;, }, }, m1, =, vorder, [, m, ], ;, vorder, [, m, ], =, vorder, [, mp1, ], ;]
[-, 2, ;, }, }, m1, =, vorder, [, m, ], ;, vorder, [, m, ], =, vorder, [, mp1]
[-, row, -, 2, ;, }, }, m1, =, vorder, [, m, ], ;, vorder, [, m, ], =, vorder]
[-, 2, ;, }, }, m1, =, vorder, [, m, ], ;, vorder, [, m, ], =, vorder, [, mp1]
[;, }, }, m1, =, vorder, [, m, ], ;, vorder, [, m, ], =, vorder, [, mp1, ], ;]
[=, vorder, [, m, ], ;, vorder, [, m, ], =, vorder, [, mp1, ], ;, vorder, [, mp1, ]]
[;, vorder, [, m, ], =, vorder, [, mp1, ], ;, vorder, [, mp1, ], =, m1, ;, X, =]
[[, m, ], ;, vorder, [, m, ], =, vorder, [, mp1, ], ;, vorder, [, mp1, ], =, m1]
[], ;, vorder, [, m, ], =, vorder, [, mp1, ], ;, vorder, [, mp1, ], =, m1, ;, X]
[=, vorder, [, mp1, ], ;, vorder, [, mp1, ], =, m1, ;, X, =, tol, [, m, ], ;]
[[, m, ], =, vorder, [, mp1, ], ;, vorder, [, mp1, ], =, m1, ;, X, =, tol, []
[], =, vorder, [, mp1, ], ;, vorder, [, mp1, ], =, m1, ;, X, =, tol, [, m, ]]
[;, vorder, [, mp1, ], =, m1, ;, X, =, tol, [, m, ], ;, tol, [, m, ], =]
[[, mp1, ], ;, vorder, [, mp1, ], =, m1, ;, X, =, tol, [, m, ], ;, tol, []
[], ;, vorder, [, mp1, ], =, m1, ;, X, =, tol, [, m, ], ;, tol, [, m, ]]
[=, m1, ;, X, =, tol, [, m, ], ;, tol, [, m, ], =, tol, [, mp1, ], ;]
[[, mp1, ], =, m1, ;, X, =, tol, [, m, ], ;, tol, [, m, ], =, tol, []
[], =, m1, ;, X, =, tol, [, m, ], ;, tol, [, m, ], =, tol, [, mp1, ]]
[;, X, =, tol, [, m, ], ;, tol, [, m, ], =, tol, [, mp1, ], ;, tol, []
[=, tol, [, m, ], ;, tol, [, m, ], =, tol, [, mp1, ], ;, tol, [, mp1, ]]
[;, tol, [, m, ], =, tol, [, mp1, ], ;, tol, [, mp1, ], =, X, ;, rss, []
[[, m, ], ;, tol, [, m, ], =, tol, [, mp1, ], ;, tol, [, mp1, ], =, X]
[], ;, tol, [, m, ], =, tol, [, mp1, ], ;, tol, [, mp1, ], =, X, ;, rss]
[=, tol, [, mp1, ], ;, tol, [, mp1, ], =, X, ;, rss, [, m, ], =, rss, []
[[, m, ], =, tol, [, mp1, ], ;, tol, [, mp1, ], =, X, ;, rss, [, m, ]]
[], =, tol, [, mp1, ], ;, tol, [, mp1, ], =, X, ;, rss, [, m, ], =, rss]
[;, tol, [, mp1, ], =, X, ;, rss, [, m, ], =, rss, [, mp1, ], +, d, []
[[, mp1, ], ;, tol, [, mp1, ], =, X, ;, rss, [, m, ], =, rss, [, mp1, ]]
[], ;, tol, [, mp1, ], =, X, ;, rss, [, m, ], =, rss, [, mp1, ], +, d]
[=, X, ;, rss, [, m, ], =, rss, [, mp1, ], +, d, [, mp1, ], *, rhs, []
[[, mp1, ], =, X, ;, rss, [, m, ], =, rss, [, mp1, ], +, d, [, mp1, ]]
[], =, X, ;, rss, [, m, ], =, rss, [, mp1, ], +, d, [, mp1, ], *, rhs]
[;, rss, [, m, ], =, rss, [, mp1, ], +, d, [, mp1, ], *, rhs, [, mp1, ]]
[=, rss, [, mp1, ], +, d, [, mp1, ], *, rhs, [, mp1, ], *, rhs, [, mp1, ]]
[[, m, ], =, rss, [, mp1, ], +, d, [, mp1, ], *, rhs, [, mp1, ], *, rhs]
[], =, rss, [, mp1, ], +, d, [, mp1, ], *, rhs, [, mp1, ], *, rhs, [, mp1]
[;, m, +=, inc, ;, ++, idx, ;, }, }, private, int, reorderRegressors, (, int, [, ], list, ,, int]
[+, d, [, mp1, ], *, rhs, [, mp1, ], *, rhs, [, mp1, ], ;, m, +=, inc, ;]
[[, mp1, ], +, d, [, mp1, ], *, rhs, [, mp1, ], *, rhs, [, mp1, ], ;, m]
[], +, d, [, mp1, ], *, rhs, [, mp1, ], *, rhs, [, mp1, ], ;, m, +=, inc]
[;, m, +=, inc, ;, ++, idx, ;, }, }, private, int, reorderRegressors, (, int, [, ], list, ,, int]
[*, rhs, [, mp1, ], ;, m, +=, inc, ;, ++, idx, ;, }, }, private, int, reorderRegressors, (, int]
[*, rhs, [, mp1, ], *, rhs, [, mp1, ], ;, m, +=, inc, ;, ++, idx, ;, }, }]
[[, mp1, ], *, rhs, [, mp1, ], *, rhs, [, mp1, ], ;, m, +=, inc, ;, ++, idx]
[], *, rhs, [, mp1, ], *, rhs, [, mp1, ], ;, m, +=, inc, ;, ++, idx, ;, }]
[*, rhs, [, mp1, ], ;, m, +=, inc, ;, ++, idx, ;, }, }, private, int, reorderRegressors, (, int]
[[, mp1, ], *, rhs, [, mp1, ], ;, m, +=, inc, ;, ++, idx, ;, }, }, private, int]
[], *, rhs, [, mp1, ], ;, m, +=, inc, ;, ++, idx, ;, }, }, private, int, reorderRegressors, (]
[;, m, +=, inc, ;, ++, idx, ;, }, }, private, int, reorderRegressors, (, int, [, ], list, ,, int]
[[, mp1, ], ;, m, +=, inc, ;, ++, idx, ;, }, }, private, int, reorderRegressors, (, int, [, ]]
[], ;, m, +=, inc, ;, ++, idx, ;, }, }, private, int, reorderRegressors, (, int, [, ], list, ,]
[+=, inc, ;, ++, idx, ;, }, }, private, int, reorderRegressors, (, int, [, ], list, ,, int, pos1, )]
[;, ++, idx, ;, }, }, private, int, reorderRegressors, (, int, [, ], list, ,, int, pos1, ), {, int]
[;, }, }, private, int, reorderRegressors, (, int, [, ], list, ,, int, pos1, ), {, int, next, ;, int]
[;, }, }, private, int, reorderRegressors, (, int, [, ], list, ,, int, pos1, ), {, int, next, ;, int]
[), {, return, -, 1, ;, }, next, =, pos1, ;, i, =, pos1, ;, while, (, i, <, nvars]
[||, list, ., length, >, nvars, +, 1, -, pos1, ), {, return, -, 1, ;, }, next, =, pos1]
[<, 1, ||, list, ., length, >, nvars, +, 1, -, pos1, ), {, return, -, 1, ;, }, next]
[., length, <, 1, ||, list, ., length, >, nvars, +, 1, -, pos1, ), {, return, -, 1, ;]
[||, list, ., length, >, nvars, +, 1, -, pos1, ), {, return, -, 1, ;, }, next, =, pos1]
[), {, return, -, 1, ;, }, next, =, pos1, ;, i, =, pos1, ;, while, (, i, <, nvars]
[>, nvars, +, 1, -, pos1, ), {, return, -, 1, ;, }, next, =, pos1, ;, i, =, pos1]
[., length, >, nvars, +, 1, -, pos1, ), {, return, -, 1, ;, }, next, =, pos1, ;, i]
[), {, return, -, 1, ;, }, next, =, pos1, ;, i, =, pos1, ;, while, (, i, <, nvars]
[-, pos1, ), {, return, -, 1, ;, }, next, =, pos1, ;, i, =, pos1, ;, while, (, i]
[+, 1, -, pos1, ), {, return, -, 1, ;, }, next, =, pos1, ;, i, =, pos1, ;, while]
[-, pos1, ), {, return, -, 1, ;, }, next, =, pos1, ;, i, =, pos1, ;, while, (, i]
[), {, return, -, 1, ;, }, next, =, pos1, ;, i, =, pos1, ;, while, (, i, <, nvars]
[;, }, next, =, pos1, ;, i, =, pos1, ;, while, (, i, <, nvars, ), {, l, =, vorder]
[;, }, next, =, pos1, ;, i, =, pos1, ;, while, (, i, <, nvars, ), {, l, =, vorder]
[=, pos1, ;, i, =, pos1, ;, while, (, i, <, nvars, ), {, l, =, vorder, [, i, ]]
[;, i, =, pos1, ;, while, (, i, <, nvars, ), {, l, =, vorder, [, i, ], ;, for]
[=, pos1, ;, while, (, i, <, nvars, ), {, l, =, vorder, [, i, ], ;, for, (, int]
[;, while, (, i, <, nvars, ), {, l, =, vorder, [, i, ], ;, for, (, int, j, =]
[), {, l, =, vorder, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, list, .]
[<, nvars, ), {, l, =, vorder, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[), {, l, =, vorder, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, list, .]
[=, vorder, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, list, ., length, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, list, ., length, ;, j, ++, ), {, if, (]
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, list, ., length, ;, j, ++, )]
[], ;, for, (, int, j, =, 0, ;, j, <, list, ., length, ;, j, ++, ), {, if]
[;, j, <, list, ., length, ;, j, ++, ), {, if, (, l, ==, list, [, j, ], &&]
[;, j, ++, ), {, if, (, l, ==, list, [, j, ], &&, i, >, next, ), {, this]
[<, list, ., length, ;, j, ++, ), {, if, (, l, ==, list, [, j, ], &&, i, >]
[;, j, ++, ), {, if, (, l, ==, list, [, j, ], &&, i, >, next, ), {, this]
[., length, ;, j, ++, ), {, if, (, l, ==, list, [, j, ], &&, i, >, next, )]
[), {, if, (, l, ==, list, [, j, ], &&, i, >, next, ), {, this, ., vmove, (]
[++, ), {, if, (, l, ==, list, [, j, ], &&, i, >, next, ), {, this, ., vmove]
[), {, this, ., vmove, (, i, ,, next, ), ;, ++, next, ;, if, (, next, >=, list, .]
[&&, i, >, next, ), {, this, ., vmove, (, i, ,, next, ), ;, ++, next, ;, if, (]
[==, list, [, j, ], &&, i, >, next, ), {, this, ., vmove, (, i, ,, next, ), ;]
[&&, i, >, next, ), {, this, ., vmove, (, i, ,, next, ), ;, ++, next, ;, if, (]
[[, j, ], &&, i, >, next, ), {, this, ., vmove, (, i, ,, next, ), ;, ++, next]
[], &&, i, >, next, ), {, this, ., vmove, (, i, ,, next, ), ;, ++, next, ;, if]
[), {, this, ., vmove, (, i, ,, next, ), ;, ++, next, ;, if, (, next, >=, list, .]
[>, next, ), {, this, ., vmove, (, i, ,, next, ), ;, ++, next, ;, if, (, next, >=]
[), {, this, ., vmove, (, i, ,, next, ), ;, ++, next, ;, if, (, next, >=, list, .]
[;, ++, next, ;, if, (, next, >=, list, ., length, +, pos1, ), {, return, 0, ;, }, else]
[., vmove, (, i, ,, next, ), ;, ++, next, ;, if, (, next, >=, list, ., length, +, pos1]
[,, next, ), ;, ++, next, ;, if, (, next, >=, list, ., length, +, pos1, ), {, return, 0]
[), ;, ++, next, ;, if, (, next, >=, list, ., length, +, pos1, ), {, return, 0, ;, }]
[;, if, (, next, >=, list, ., length, +, pos1, ), {, return, 0, ;, }, else, {, break, ;]
[;, if, (, next, >=, list, ., length, +, pos1, ), {, return, 0, ;, }, else, {, break, ;]
[), {, return, 0, ;, }, else, {, break, ;, }, }, }, ++, i, ;, }, return, 0, ;]
[>=, list, ., length, +, pos1, ), {, return, 0, ;, }, else, {, break, ;, }, }, }, ++]
[), {, return, 0, ;, }, else, {, break, ;, }, }, }, ++, i, ;, }, return, 0, ;]
[+, pos1, ), {, return, 0, ;, }, else, {, break, ;, }, }, }, ++, i, ;, }, return]
[., length, +, pos1, ), {, return, 0, ;, }, else, {, break, ;, }, }, }, ++, i, ;]
[), {, return, 0, ;, }, else, {, break, ;, }, }, }, ++, i, ;, }, return, 0, ;]
[;, }, else, {, break, ;, }, }, }, ++, i, ;, }, return, 0, ;, }, public, double, getDiagonalOfHatMatrix]
[;, }, return, 0, ;, }, public, double, getDiagonalOfHatMatrix, (, double, [, ], row_data, ), {, double, [, ], wk]
[;, }, return, 0, ;, }, public, double, getDiagonalOfHatMatrix, (, double, [, ], row_data, ), {, double, [, ], wk]
[;, }, public, double, getDiagonalOfHatMatrix, (, double, [, ], row_data, ), {, double, [, ], wk, =, new, double, []
[;, int, pos, ;, double, total, ;, if, (, row_data, ., length, >, nvars, ), {, return, Double, ., NaN]
[], ;, int, pos, ;, double, total, ;, if, (, row_data, ., length, >, nvars, ), {, return, Double, .]
[., nvars, ], ;, int, pos, ;, double, total, ;, if, (, row_data, ., length, >, nvars, ), {, return]
[), {, return, Double, ., NaN, ;, }, double, [, ], xrow, ;, if, (, this, ., hasIntercept, ), {]
[>, nvars, ), {, return, Double, ., NaN, ;, }, double, [, ], xrow, ;, if, (, this, ., hasIntercept]
[., length, >, nvars, ), {, return, Double, ., NaN, ;, }, double, [, ], xrow, ;, if, (, this]
[), {, return, Double, ., NaN, ;, }, double, [, ], xrow, ;, if, (, this, ., hasIntercept, ), {]
[;, }, double, [, ], xrow, ;, if, (, this, ., hasIntercept, ), {, xrow, =, new, double, [, row_data]
[., NaN, ;, }, double, [, ], xrow, ;, if, (, this, ., hasIntercept, ), {, xrow, =, new, double]
[), {, xrow, =, new, double, [, row_data, ., length, +, 1, ], ;, xrow, [, 0, ], =, 1.0]
[., hasIntercept, ), {, xrow, =, new, double, [, row_data, ., length, +, 1, ], ;, xrow, [, 0, ]]
[=, new, double, [, row_data, ., length, +, 1, ], ;, xrow, [, 0, ], =, 1.0, ;, System, .]
[;, xrow, [, 0, ], =, 1.0, ;, System, ., arraycopy, (, row_data, ,, 0, ,, xrow, ,, 1, ,]
[], ;, xrow, [, 0, ], =, 1.0, ;, System, ., arraycopy, (, row_data, ,, 0, ,, xrow, ,, 1]
[+, 1, ], ;, xrow, [, 0, ], =, 1.0, ;, System, ., arraycopy, (, row_data, ,, 0, ,, xrow]
[., length, +, 1, ], ;, xrow, [, 0, ], =, 1.0, ;, System, ., arraycopy, (, row_data, ,, 0]
[], ;, xrow, [, 0, ], =, 1.0, ;, System, ., arraycopy, (, row_data, ,, 0, ,, xrow, ,, 1]
[=, 1.0, ;, System, ., arraycopy, (, row_data, ,, 0, ,, xrow, ,, 1, ,, row_data, ., length, ), ;]
[[, 0, ], =, 1.0, ;, System, ., arraycopy, (, row_data, ,, 0, ,, xrow, ,, 1, ,, row_data, .]
[], =, 1.0, ;, System, ., arraycopy, (, row_data, ,, 0, ,, xrow, ,, 1, ,, row_data, ., length, )]
[;, System, ., arraycopy, (, row_data, ,, 0, ,, xrow, ,, 1, ,, row_data, ., length, ), ;, }, else]
[;, }, else, {, xrow, =, row_data, ;, }, double, hii, =, 0.0, ;, for, (, int, col, =, 0]
[., arraycopy, (, row_data, ,, 0, ,, xrow, ,, 1, ,, row_data, ., length, ), ;, }, else, {, xrow]
[,, 0, ,, xrow, ,, 1, ,, row_data, ., length, ), ;, }, else, {, xrow, =, row_data, ;, }]
[,, xrow, ,, 1, ,, row_data, ., length, ), ;, }, else, {, xrow, =, row_data, ;, }, double, hii]
[,, 1, ,, row_data, ., length, ), ;, }, else, {, xrow, =, row_data, ;, }, double, hii, =, 0.0]
[,, row_data, ., length, ), ;, }, else, {, xrow, =, row_data, ;, }, double, hii, =, 0.0, ;, for]
[), ;, }, else, {, xrow, =, row_data, ;, }, double, hii, =, 0.0, ;, for, (, int, col, =]
[., length, ), ;, }, else, {, xrow, =, row_data, ;, }, double, hii, =, 0.0, ;, for, (, int]
[=, row_data, ;, }, double, hii, =, 0.0, ;, for, (, int, col, =, 0, ;, col, <, xrow, .]
[;, }, double, hii, =, 0.0, ;, for, (, int, col, =, 0, ;, col, <, xrow, ., length, ;]
[;, for, (, int, col, =, 0, ;, col, <, xrow, ., length, ;, col, ++, ), {, if, (]
[;, col, <, xrow, ., length, ;, col, ++, ), {, if, (, Math, ., sqrt, (, d, [, col]
[;, col, ++, ), {, if, (, Math, ., sqrt, (, d, [, col, ], ), <, tol, [, col]
[<, xrow, ., length, ;, col, ++, ), {, if, (, Math, ., sqrt, (, d, [, col, ], )]
[;, col, ++, ), {, if, (, Math, ., sqrt, (, d, [, col, ], ), <, tol, [, col]
[., length, ;, col, ++, ), {, if, (, Math, ., sqrt, (, d, [, col, ], ), <, tol]
[), {, if, (, Math, ., sqrt, (, d, [, col, ], ), <, tol, [, col, ], ), {]
[++, ), {, if, (, Math, ., sqrt, (, d, [, col, ], ), <, tol, [, col, ], )]
[), {, wk, [, col, ], =, 0.0, ;, }, else, {, pos, =, col, -, 1, ;, total, =]
[<, tol, [, col, ], ), {, wk, [, col, ], =, 0.0, ;, }, else, {, pos, =, col]
[., sqrt, (, d, [, col, ], ), <, tol, [, col, ], ), {, wk, [, col, ], =]
[), <, tol, [, col, ], ), {, wk, [, col, ], =, 0.0, ;, }, else, {, pos, =]
[[, col, ], ), <, tol, [, col, ], ), {, wk, [, col, ], =, 0.0, ;, }, else]
[], ), <, tol, [, col, ], ), {, wk, [, col, ], =, 0.0, ;, }, else, {, pos]
[), {, wk, [, col, ], =, 0.0, ;, }, else, {, pos, =, col, -, 1, ;, total, =]
[[, col, ], ), {, wk, [, col, ], =, 0.0, ;, }, else, {, pos, =, col, -, 1]
[], ), {, wk, [, col, ], =, 0.0, ;, }, else, {, pos, =, col, -, 1, ;, total]
[=, 0.0, ;, }, else, {, pos, =, col, -, 1, ;, total, =, xrow, [, col, ], ;, for]
[[, col, ], =, 0.0, ;, }, else, {, pos, =, col, -, 1, ;, total, =, xrow, [, col]
[], =, 0.0, ;, }, else, {, pos, =, col, -, 1, ;, total, =, xrow, [, col, ], ;]
[;, }, else, {, pos, =, col, -, 1, ;, total, =, xrow, [, col, ], ;, for, (, int]
[=, col, -, 1, ;, total, =, xrow, [, col, ], ;, for, (, int, row, =, 0, ;, row]
[;, total, =, xrow, [, col, ], ;, for, (, int, row, =, 0, ;, row, <, col, ;, row]
[-, 1, ;, total, =, xrow, [, col, ], ;, for, (, int, row, =, 0, ;, row, <, col]
[;, total, =, xrow, [, col, ], ;, for, (, int, row, =, 0, ;, row, <, col, ;, row]
[=, xrow, [, col, ], ;, for, (, int, row, =, 0, ;, row, <, col, ;, row, ++, )]
[;, for, (, int, row, =, 0, ;, row, <, col, ;, row, ++, ), {, total, =, smartAdd, (]
[[, col, ], ;, for, (, int, row, =, 0, ;, row, <, col, ;, row, ++, ), {, total]
[], ;, for, (, int, row, =, 0, ;, row, <, col, ;, row, ++, ), {, total, =, smartAdd]
[;, row, <, col, ;, row, ++, ), {, total, =, smartAdd, (, total, ,, -, wk, [, row, ]]
[;, row, ++, ), {, total, =, smartAdd, (, total, ,, -, wk, [, row, ], *, r, [, pos]
[<, col, ;, row, ++, ), {, total, =, smartAdd, (, total, ,, -, wk, [, row, ], *, r]
[;, row, ++, ), {, total, =, smartAdd, (, total, ,, -, wk, [, row, ], *, r, [, pos]
[), {, total, =, smartAdd, (, total, ,, -, wk, [, row, ], *, r, [, pos, ], ), ;]
[++, ), {, total, =, smartAdd, (, total, ,, -, wk, [, row, ], *, r, [, pos, ], )]
[=, smartAdd, (, total, ,, -, wk, [, row, ], *, r, [, pos, ], ), ;, pos, +=, nvars]
[;, pos, +=, nvars, -, row, -, 2, ;, }, wk, [, col, ], =, total, ;, hii, =, smartAdd]
[,, -, wk, [, row, ], *, r, [, pos, ], ), ;, pos, +=, nvars, -, row, -, 2]
[), ;, pos, +=, nvars, -, row, -, 2, ;, }, wk, [, col, ], =, total, ;, hii, =]
[*, r, [, pos, ], ), ;, pos, +=, nvars, -, row, -, 2, ;, }, wk, [, col, ]]
[*, r, [, pos, ], ), ;, pos, +=, nvars, -, row, -, 2, ;, }, wk, [, col, ]]
[[, row, ], *, r, [, pos, ], ), ;, pos, +=, nvars, -, row, -, 2, ;, }, wk]
[], *, r, [, pos, ], ), ;, pos, +=, nvars, -, row, -, 2, ;, }, wk, [, col]
[), ;, pos, +=, nvars, -, row, -, 2, ;, }, wk, [, col, ], =, total, ;, hii, =]
[[, pos, ], ), ;, pos, +=, nvars, -, row, -, 2, ;, }, wk, [, col, ], =, total]
[], ), ;, pos, +=, nvars, -, row, -, 2, ;, }, wk, [, col, ], =, total, ;, hii]
[+=, nvars, -, row, -, 2, ;, }, wk, [, col, ], =, total, ;, hii, =, smartAdd, (, hii]
[;, }, wk, [, col, ], =, total, ;, hii, =, smartAdd, (, hii, ,, (, total, *, total, )]
[-, 2, ;, }, wk, [, col, ], =, total, ;, hii, =, smartAdd, (, hii, ,, (, total, *]
[-, row, -, 2, ;, }, wk, [, col, ], =, total, ;, hii, =, smartAdd, (, hii, ,, (]
[-, 2, ;, }, wk, [, col, ], =, total, ;, hii, =, smartAdd, (, hii, ,, (, total, *]
[;, }, wk, [, col, ], =, total, ;, hii, =, smartAdd, (, hii, ,, (, total, *, total, )]
[=, total, ;, hii, =, smartAdd, (, hii, ,, (, total, *, total, ), /, d, [, col, ], )]
[[, col, ], =, total, ;, hii, =, smartAdd, (, hii, ,, (, total, *, total, ), /, d, []
[], =, total, ;, hii, =, smartAdd, (, hii, ,, (, total, *, total, ), /, d, [, col, ]]
[;, hii, =, smartAdd, (, hii, ,, (, total, *, total, ), /, d, [, col, ], ), ;, }]
[=, smartAdd, (, hii, ,, (, total, *, total, ), /, d, [, col, ], ), ;, }, }, return]
[;, }, }, return, hii, ;, }, public, int, [, ], getOrderOfRegressors, (, ), {, return, MathArrays, ., copyOf, (]
[,, (, total, *, total, ), /, d, [, col, ], ), ;, }, }, return, hii, ;, }, public]
[), ;, }, }, return, hii, ;, }, public, int, [, ], getOrderOfRegressors, (, ), {, return, MathArrays, ., copyOf]
[/, d, [, col, ], ), ;, }, }, return, hii, ;, }, public, int, [, ], getOrderOfRegressors, (, )]
[), /, d, [, col, ], ), ;, }, }, return, hii, ;, }, public, int, [, ], getOrderOfRegressors, (]
[*, total, ), /, d, [, col, ], ), ;, }, }, return, hii, ;, }, public, int, [, ]]
[), /, d, [, col, ], ), ;, }, }, return, hii, ;, }, public, int, [, ], getOrderOfRegressors, (]
[), ;, }, }, return, hii, ;, }, public, int, [, ], getOrderOfRegressors, (, ), {, return, MathArrays, ., copyOf]
[[, col, ], ), ;, }, }, return, hii, ;, }, public, int, [, ], getOrderOfRegressors, (, ), {, return]
[], ), ;, }, }, return, hii, ;, }, public, int, [, ], getOrderOfRegressors, (, ), {, return, MathArrays, .]
[;, }, public, int, [, ], getOrderOfRegressors, (, ), {, return, MathArrays, ., copyOf, (, vorder, ), ;, }, public]
[;, }, public, RegressionResults, regress, (, ), throws, ModelSpecificationException, {, return, regress, (, this, ., nvars, ), ;, }, public]
[., copyOf, (, vorder, ), ;, }, public, RegressionResults, regress, (, ), throws, ModelSpecificationException, {, return, regress, (, this, .]
[), ;, }, public, RegressionResults, regress, (, ), throws, ModelSpecificationException, {, return, regress, (, this, ., nvars, ), ;, }]
[;, }, public, RegressionResults, regress, (, int, numberOfRegressors, ), throws, ModelSpecificationException, {, if, (, this, ., nobs, <=, numberOfRegressors, )]
[), ;, }, public, RegressionResults, regress, (, int, numberOfRegressors, ), throws, ModelSpecificationException, {, if, (, this, ., nobs, <=, numberOfRegressors]
[., nvars, ), ;, }, public, RegressionResults, regress, (, int, numberOfRegressors, ), throws, ModelSpecificationException, {, if, (, this, ., nobs]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, this, ., nobs, ,, numberOfRegressors, ), ;, }, if, (]
[<=, numberOfRegressors, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, this, ., nobs, ,, numberOfRegressors, ), ;, }]
[., nobs, <=, numberOfRegressors, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, this, ., nobs, ,, numberOfRegressors, )]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, this, ., nobs, ,, numberOfRegressors, ), ;, }, if, (]
[;, }, if, (, numberOfRegressors, >, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, numberOfRegressors]
[,, this, ., nobs, ,, numberOfRegressors, ), ;, }, if, (, numberOfRegressors, >, this, ., nvars, ), {, throw, new]
[., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, this, ., nobs, ,, numberOfRegressors, ), ;, }, if, (, numberOfRegressors, >, this, ., nvars, ), {]
[,, numberOfRegressors, ), ;, }, if, (, numberOfRegressors, >, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, .]
[., nobs, ,, numberOfRegressors, ), ;, }, if, (, numberOfRegressors, >, this, ., nvars, ), {, throw, new, ModelSpecificationException, (]
[), ;, }, if, (, numberOfRegressors, >, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, numberOfRegressors, ,, this, ., nvars, ), ;, }, tolset, (]
[>, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, numberOfRegressors, ,, this, ., nvars, )]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, numberOfRegressors, ,, this, ., nvars, ), ;, }, tolset, (]
[., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, numberOfRegressors, ,, this, ., nvars, ), ;, }]
[;, }, tolset, (, ), ;, singcheck, (, ), ;, double, [, ], beta, =, this, ., regcf, (, numberOfRegressors]
[,, numberOfRegressors, ,, this, ., nvars, ), ;, }, tolset, (, ), ;, singcheck, (, ), ;, double, [, ]]
[., TOO_MANY_REGRESSORS, ,, numberOfRegressors, ,, this, ., nvars, ), ;, }, tolset, (, ), ;, singcheck, (, ), ;, double]
[,, this, ., nvars, ), ;, }, tolset, (, ), ;, singcheck, (, ), ;, double, [, ], beta, =]
[), ;, }, tolset, (, ), ;, singcheck, (, ), ;, double, [, ], beta, =, this, ., regcf, (]
[., nvars, ), ;, }, tolset, (, ), ;, singcheck, (, ), ;, double, [, ], beta, =, this, .]
[;, singcheck, (, ), ;, double, [, ], beta, =, this, ., regcf, (, numberOfRegressors, ), ;, ss, (, )]
[;, double, [, ], beta, =, this, ., regcf, (, numberOfRegressors, ), ;, ss, (, ), ;, double, [, ]]
[;, ss, (, ), ;, double, [, ], cov, =, this, ., cov, (, numberOfRegressors, ), ;, int, rnk, =]
[., regcf, (, numberOfRegressors, ), ;, ss, (, ), ;, double, [, ], cov, =, this, ., cov, (, numberOfRegressors]
[), ;, ss, (, ), ;, double, [, ], cov, =, this, ., cov, (, numberOfRegressors, ), ;, int, rnk]
[;, double, [, ], cov, =, this, ., cov, (, numberOfRegressors, ), ;, int, rnk, =, 0, ;, for, (]
[;, int, rnk, =, 0, ;, for, (, int, i, =, 0, ;, i, <, this, ., lindep, ., length]
[., cov, (, numberOfRegressors, ), ;, int, rnk, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, int, rnk, =, 0, ;, for, (, int, i, =, 0, ;, i, <, this, ., lindep, .]
[;, for, (, int, i, =, 0, ;, i, <, this, ., lindep, ., length, ;, i, ++, ), {]
[;, i, <, this, ., lindep, ., length, ;, i, ++, ), {, if, (, !, this, ., lindep, []
[;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ], ), {, ++, rnk, ;, }]
[<, this, ., lindep, ., length, ;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ]]
[;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ], ), {, ++, rnk, ;, }]
[., length, ;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ], ), {, ++, rnk]
[., lindep, ., length, ;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ], ), {]
[), {, if, (, !, this, ., lindep, [, i, ], ), {, ++, rnk, ;, }, }, boolean, needsReorder]
[++, ), {, if, (, !, this, ., lindep, [, i, ], ), {, ++, rnk, ;, }, }, boolean]
[), {, ++, rnk, ;, }, }, boolean, needsReorder, =, false, ;, for, (, int, i, =, 0, ;, i]
[), {, ++, rnk, ;, }, }, boolean, needsReorder, =, false, ;, for, (, int, i, =, 0, ;, i]
[[, i, ], ), {, ++, rnk, ;, }, }, boolean, needsReorder, =, false, ;, for, (, int, i, =]
[., lindep, [, i, ], ), {, ++, rnk, ;, }, }, boolean, needsReorder, =, false, ;, for, (, int]
[], ), {, ++, rnk, ;, }, }, boolean, needsReorder, =, false, ;, for, (, int, i, =, 0, ;]
[;, }, }, boolean, needsReorder, =, false, ;, for, (, int, i, =, 0, ;, i, <, numberOfRegressors, ;, i]
[;, }, }, boolean, needsReorder, =, false, ;, for, (, int, i, =, 0, ;, i, <, numberOfRegressors, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, numberOfRegressors, ;, i, ++, ), {, if, (, this, .]
[;, i, <, numberOfRegressors, ;, i, ++, ), {, if, (, this, ., vorder, [, i, ], !=, i, )]
[;, i, ++, ), {, if, (, this, ., vorder, [, i, ], !=, i, ), {, needsReorder, =, true]
[<, numberOfRegressors, ;, i, ++, ), {, if, (, this, ., vorder, [, i, ], !=, i, ), {, needsReorder]
[;, i, ++, ), {, if, (, this, ., vorder, [, i, ], !=, i, ), {, needsReorder, =, true]
[), {, if, (, this, ., vorder, [, i, ], !=, i, ), {, needsReorder, =, true, ;, break, ;]
[++, ), {, if, (, this, ., vorder, [, i, ], !=, i, ), {, needsReorder, =, true, ;, break]
[), {, needsReorder, =, true, ;, break, ;, }, }, if, (, !, needsReorder, ), {, return, new, RegressionResults, (]
[!=, i, ), {, needsReorder, =, true, ;, break, ;, }, }, if, (, !, needsReorder, ), {, return, new]
[[, i, ], !=, i, ), {, needsReorder, =, true, ;, break, ;, }, }, if, (, !, needsReorder, )]
[., vorder, [, i, ], !=, i, ), {, needsReorder, =, true, ;, break, ;, }, }, if, (, !]
[], !=, i, ), {, needsReorder, =, true, ;, break, ;, }, }, if, (, !, needsReorder, ), {, return]
[), {, needsReorder, =, true, ;, break, ;, }, }, if, (, !, needsReorder, ), {, return, new, RegressionResults, (]
[=, true, ;, break, ;, }, }, if, (, !, needsReorder, ), {, return, new, RegressionResults, (, beta, ,, new]
[;, break, ;, }, }, if, (, !, needsReorder, ), {, return, new, RegressionResults, (, beta, ,, new, double, []
[), {, return, new, RegressionResults, (, beta, ,, new, double, [, ], [, ], {, cov, }, ,, true, ,]
[), {, return, new, RegressionResults, (, beta, ,, new, double, [, ], [, ], {, cov, }, ,, true, ,]
[;, }, else, {, double, [, ], betaNew, =, new, double, [, beta, ., length, ], ;, double, [, ]]
[,, new, double, [, ], [, ], {, cov, }, ,, true, ,, this, ., nobs, ,, rnk, ,, this]
[,, true, ,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr]
[,, true, ,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr]
[}, ,, true, ,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, .]
[,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this]
[,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false]
[., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept]
[,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;]
[,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, else, {, double]
[., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, else]
[,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, else, {, double, [, ], betaNew, =]
[., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, else, {, double, [, ]]
[,, this, ., hasIntercept, ,, false, ), ;, }, else, {, double, [, ], betaNew, =, new, double, [, beta]
[., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, else, {, double, [, ], betaNew, =, new, double]
[,, false, ), ;, }, else, {, double, [, ], betaNew, =, new, double, [, beta, ., length, ], ;]
[., hasIntercept, ,, false, ), ;, }, else, {, double, [, ], betaNew, =, new, double, [, beta, ., length]
[), ;, }, else, {, double, [, ], betaNew, =, new, double, [, beta, ., length, ], ;, double, []
[;, double, [, ], covNew, =, new, double, [, cov, ., length, ], ;, int, [, ], newIndices, =, new]
[], ;, double, [, ], covNew, =, new, double, [, cov, ., length, ], ;, int, [, ], newIndices, =]
[., length, ], ;, double, [, ], covNew, =, new, double, [, cov, ., length, ], ;, int, [, ]]
[;, int, [, ], newIndices, =, new, int, [, beta, ., length, ], ;, for, (, int, i, =, 0]
[], ;, int, [, ], newIndices, =, new, int, [, beta, ., length, ], ;, for, (, int, i, =]
[., length, ], ;, int, [, ], newIndices, =, new, int, [, beta, ., length, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, nvars, ;, i, ++, ), {, for, (, int, j]
[], ;, for, (, int, i, =, 0, ;, i, <, nvars, ;, i, ++, ), {, for, (, int]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, nvars, ;, i, ++, ), {, for]
[;, i, <, nvars, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, numberOfRegressors, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, numberOfRegressors, ;, j, ++, ), {]
[<, nvars, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, numberOfRegressors, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, numberOfRegressors, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, numberOfRegressors, ;, j, ++, ), {, if, (, this]
[++, ), {, for, (, int, j, =, 0, ;, j, <, numberOfRegressors, ;, j, ++, ), {, if, (]
[;, j, <, numberOfRegressors, ;, j, ++, ), {, if, (, this, ., vorder, [, j, ], ==, i, )]
[;, j, ++, ), {, if, (, this, ., vorder, [, j, ], ==, i, ), {, betaNew, [, i]
[<, numberOfRegressors, ;, j, ++, ), {, if, (, this, ., vorder, [, j, ], ==, i, ), {, betaNew]
[;, j, ++, ), {, if, (, this, ., vorder, [, j, ], ==, i, ), {, betaNew, [, i]
[), {, if, (, this, ., vorder, [, j, ], ==, i, ), {, betaNew, [, i, ], =, beta]
[++, ), {, if, (, this, ., vorder, [, j, ], ==, i, ), {, betaNew, [, i, ], =]
[), {, betaNew, [, i, ], =, beta, [, j, ], ;, newIndices, [, i, ], =, j, ;, }]
[==, i, ), {, betaNew, [, i, ], =, beta, [, j, ], ;, newIndices, [, i, ], =, j]
[[, j, ], ==, i, ), {, betaNew, [, i, ], =, beta, [, j, ], ;, newIndices, [, i]
[., vorder, [, j, ], ==, i, ), {, betaNew, [, i, ], =, beta, [, j, ], ;, newIndices]
[], ==, i, ), {, betaNew, [, i, ], =, beta, [, j, ], ;, newIndices, [, i, ], =]
[), {, betaNew, [, i, ], =, beta, [, j, ], ;, newIndices, [, i, ], =, j, ;, }]
[=, beta, [, j, ], ;, newIndices, [, i, ], =, j, ;, }, }, }, int, idx1, =, 0]
[[, i, ], =, beta, [, j, ], ;, newIndices, [, i, ], =, j, ;, }, }, }, int]
[], =, beta, [, j, ], ;, newIndices, [, i, ], =, j, ;, }, }, }, int, idx1, =]
[;, newIndices, [, i, ], =, j, ;, }, }, }, int, idx1, =, 0, ;, int, idx2, ;, int]
[[, j, ], ;, newIndices, [, i, ], =, j, ;, }, }, }, int, idx1, =, 0, ;, int]
[], ;, newIndices, [, i, ], =, j, ;, }, }, }, int, idx1, =, 0, ;, int, idx2, ;]
[=, j, ;, }, }, }, int, idx1, =, 0, ;, int, idx2, ;, int, _i, ;, int, _j, ;]
[[, i, ], =, j, ;, }, }, }, int, idx1, =, 0, ;, int, idx2, ;, int, _i, ;]
[], =, j, ;, }, }, }, int, idx1, =, 0, ;, int, idx2, ;, int, _i, ;, int, _j]
[;, }, }, }, int, idx1, =, 0, ;, int, idx2, ;, int, _i, ;, int, _j, ;, for, (]
[;, int, idx2, ;, int, _i, ;, int, _j, ;, for, (, int, i, =, 0, ;, i, <, beta]
[;, i, <, beta, ., length, ;, i, ++, ), {, _i, =, newIndices, [, i, ], ;, for, (]
[;, i, ++, ), {, _i, =, newIndices, [, i, ], ;, for, (, int, j, =, 0, ;, j]
[<, beta, ., length, ;, i, ++, ), {, _i, =, newIndices, [, i, ], ;, for, (, int, j]
[;, i, ++, ), {, _i, =, newIndices, [, i, ], ;, for, (, int, j, =, 0, ;, j]
[., length, ;, i, ++, ), {, _i, =, newIndices, [, i, ], ;, for, (, int, j, =, 0]
[), {, _i, =, newIndices, [, i, ], ;, for, (, int, j, =, 0, ;, j, <=, i, ;]
[++, ), {, _i, =, newIndices, [, i, ], ;, for, (, int, j, =, 0, ;, j, <=, i]
[=, newIndices, [, i, ], ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ,]
[;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ,, idx1, ++, ), {, _j]
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ,, idx1, ++]
[], ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ,, idx1, ++, ), {]
[;, j, <=, i, ;, j, ++, ,, idx1, ++, ), {, _j, =, newIndices, [, j, ], ;, if]
[;, j, ++, ,, idx1, ++, ), {, _j, =, newIndices, [, j, ], ;, if, (, _i, >, _j]
[<=, i, ;, j, ++, ,, idx1, ++, ), {, _j, =, newIndices, [, j, ], ;, if, (, _i]
[;, j, ++, ,, idx1, ++, ), {, _j, =, newIndices, [, j, ], ;, if, (, _i, >, _j]
[,, idx1, ++, ), {, _j, =, newIndices, [, j, ], ;, if, (, _i, >, _j, ), {, idx2]
[++, ,, idx1, ++, ), {, _j, =, newIndices, [, j, ], ;, if, (, _i, >, _j, ), {]
[), {, _j, =, newIndices, [, j, ], ;, if, (, _i, >, _j, ), {, idx2, =, _i, *]
[++, ), {, _j, =, newIndices, [, j, ], ;, if, (, _i, >, _j, ), {, idx2, =, _i]
[=, newIndices, [, j, ], ;, if, (, _i, >, _j, ), {, idx2, =, _i, *, (, _i, +]
[;, if, (, _i, >, _j, ), {, idx2, =, _i, *, (, _i, +, 1, ), /, 2, +]
[[, j, ], ;, if, (, _i, >, _j, ), {, idx2, =, _i, *, (, _i, +, 1, )]
[], ;, if, (, _i, >, _j, ), {, idx2, =, _i, *, (, _i, +, 1, ), /, 2]
[), {, idx2, =, _i, *, (, _i, +, 1, ), /, 2, +, _j, ;, }, else, {, idx2]
[>, _j, ), {, idx2, =, _i, *, (, _i, +, 1, ), /, 2, +, _j, ;, }, else]
[), {, idx2, =, _i, *, (, _i, +, 1, ), /, 2, +, _j, ;, }, else, {, idx2]
[=, _i, *, (, _i, +, 1, ), /, 2, +, _j, ;, }, else, {, idx2, =, _j, *]
[;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2, +, _i, ;, }, covNew]
[+, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2, +, _i, ;]
[/, 2, +, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2, +]
[*, (, _i, +, 1, ), /, 2, +, _j, ;, }, else, {, idx2, =, _j, *, (, _j]
[/, 2, +, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2, +]
[), /, 2, +, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2]
[+, 1, ), /, 2, +, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, )]
[), /, 2, +, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2]
[+, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2, +, _i, ;]
[;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2, +, _i, ;, }, covNew]
[=, _j, *, (, _j, +, 1, ), /, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov]
[;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (, betaNew, ,]
[+, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (]
[/, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new]
[*, (, _j, +, 1, ), /, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2]
[/, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new]
[), /, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return]
[+, 1, ), /, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }]
[), /, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return]
[+, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (]
[;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (, betaNew, ,]
[=, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (, betaNew, ,, new, double, [, ], [, ]]
[[, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (, betaNew, ,, new, double, []
[], =, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (, betaNew, ,, new, double, [, ], []
[;, }, }, return, new, RegressionResults, (, betaNew, ,, new, double, [, ], [, ], {, covNew, }, ,, true]
[[, idx2, ], ;, }, }, return, new, RegressionResults, (, betaNew, ,, new, double, [, ], [, ], {, covNew]
[], ;, }, }, return, new, RegressionResults, (, betaNew, ,, new, double, [, ], [, ], {, covNew, }, ,]
[;, }, }, public, RegressionResults, regress, (, int, [, ], variablesToInclude, ), throws, ModelSpecificationException, {, if, (, variablesToInclude, ., length]
[,, new, double, [, ], [, ], {, covNew, }, ,, true, ,, this, ., nobs, ,, rnk, ,, this]
[,, true, ,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr]
[,, true, ,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr]
[}, ,, true, ,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, .]
[,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this]
[,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false]
[., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept]
[,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;]
[,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, }, public, RegressionResults]
[., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, }]
[,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, }, public, RegressionResults, regress, (, int, []
[., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, }, public, RegressionResults, regress, (]
[,, this, ., hasIntercept, ,, false, ), ;, }, }, public, RegressionResults, regress, (, int, [, ], variablesToInclude, ), throws]
[., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, }, public, RegressionResults, regress, (, int, [, ], variablesToInclude]
[,, false, ), ;, }, }, public, RegressionResults, regress, (, int, [, ], variablesToInclude, ), throws, ModelSpecificationException, {, if, (]
[., hasIntercept, ,, false, ), ;, }, }, public, RegressionResults, regress, (, int, [, ], variablesToInclude, ), throws, ModelSpecificationException, {]
[), ;, }, }, public, RegressionResults, regress, (, int, [, ], variablesToInclude, ), throws, ModelSpecificationException, {, if, (, variablesToInclude, .]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, variablesToInclude, ., length, ,, this, ., nvars, ), ;, }]
[>, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, variablesToInclude, ., length, ,, this, .]
[., length, >, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, variablesToInclude, ., length, ,]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, variablesToInclude, ., length, ,, this, ., nvars, ), ;, }]
[., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., TOO_MANY_REGRESSORS, ,, variablesToInclude, ., length, ,, this, ., nvars, )]
[;, }, if, (, this, ., nobs, <=, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS]
[,, variablesToInclude, ., length, ,, this, ., nvars, ), ;, }, if, (, this, ., nobs, <=, this, ., nvars]
[., TOO_MANY_REGRESSORS, ,, variablesToInclude, ., length, ,, this, ., nvars, ), ;, }, if, (, this, ., nobs, <=, this]
[,, this, ., nvars, ), ;, }, if, (, this, ., nobs, <=, this, ., nvars, ), {, throw, new]
[., length, ,, this, ., nvars, ), ;, }, if, (, this, ., nobs, <=, this, ., nvars, ), {]
[), ;, }, if, (, this, ., nobs, <=, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, .]
[., nvars, ), ;, }, if, (, this, ., nobs, <=, this, ., nvars, ), {, throw, new, ModelSpecificationException, (]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, this, ., nobs, ,, this, ., nvars, ), ;, }]
[<=, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, this, ., nobs, ,, this, .]
[., nobs, <=, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, this, ., nobs, ,]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, this, ., nobs, ,, this, ., nvars, ), ;, }]
[., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, this, ., nobs, ,, this, ., nvars, )]
[;, }, Arrays, ., sort, (, variablesToInclude, ), ;, int, iExclude, =, 0, ;, for, (, int, i, =, 0]
[,, this, ., nobs, ,, this, ., nvars, ), ;, }, Arrays, ., sort, (, variablesToInclude, ), ;, int, iExclude]
[., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, this, ., nobs, ,, this, ., nvars, ), ;, }, Arrays, ., sort, (, variablesToInclude, ), ;]
[,, this, ., nvars, ), ;, }, Arrays, ., sort, (, variablesToInclude, ), ;, int, iExclude, =, 0, ;, for]
[., nobs, ,, this, ., nvars, ), ;, }, Arrays, ., sort, (, variablesToInclude, ), ;, int, iExclude, =, 0]
[), ;, }, Arrays, ., sort, (, variablesToInclude, ), ;, int, iExclude, =, 0, ;, for, (, int, i, =]
[., nvars, ), ;, }, Arrays, ., sort, (, variablesToInclude, ), ;, int, iExclude, =, 0, ;, for, (, int]
[;, int, iExclude, =, 0, ;, for, (, int, i, =, 0, ;, i, <, variablesToInclude, ., length, ;, i]
[., sort, (, variablesToInclude, ), ;, int, iExclude, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, int, iExclude, =, 0, ;, for, (, int, i, =, 0, ;, i, <, variablesToInclude, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, variablesToInclude, ., length, ;, i, ++, ), {, if, (]
[;, i, <, variablesToInclude, ., length, ;, i, ++, ), {, if, (, i, >=, this, ., nvars, ), {]
[;, i, ++, ), {, if, (, i, >=, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, .]
[<, variablesToInclude, ., length, ;, i, ++, ), {, if, (, i, >=, this, ., nvars, ), {, throw, new]
[;, i, ++, ), {, if, (, i, >=, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, .]
[., length, ;, i, ++, ), {, if, (, i, >=, this, ., nvars, ), {, throw, new, ModelSpecificationException, (]
[), {, if, (, i, >=, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INDEX_LARGER_THAN_MAX, ,, i]
[++, ), {, if, (, i, >=, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INDEX_LARGER_THAN_MAX, ,]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INDEX_LARGER_THAN_MAX, ,, i, ,, this, ., nvars, ), ;, }, if, (]
[>=, this, ., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INDEX_LARGER_THAN_MAX, ,, i, ,, this, ., nvars, )]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INDEX_LARGER_THAN_MAX, ,, i, ,, this, ., nvars, ), ;, }, if, (]
[., nvars, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INDEX_LARGER_THAN_MAX, ,, i, ,, this, ., nvars, ), ;, }]
[;, }, if, (, i, >, 0, &&, variablesToInclude, [, i, ], ==, variablesToInclude, [, i, -, 1, ], )]
[,, i, ,, this, ., nvars, ), ;, }, if, (, i, >, 0, &&, variablesToInclude, [, i, ], ==]
[., INDEX_LARGER_THAN_MAX, ,, i, ,, this, ., nvars, ), ;, }, if, (, i, >, 0, &&, variablesToInclude, [, i]
[,, this, ., nvars, ), ;, }, if, (, i, >, 0, &&, variablesToInclude, [, i, ], ==, variablesToInclude, []
[), ;, }, if, (, i, >, 0, &&, variablesToInclude, [, i, ], ==, variablesToInclude, [, i, -, 1, ]]
[., nvars, ), ;, }, if, (, i, >, 0, &&, variablesToInclude, [, i, ], ==, variablesToInclude, [, i, -]
[), {, variablesToInclude, [, i, ], =, -, 1, ;, ++, iExclude, ;, }, }, int, [, ], series, ;]
[&&, variablesToInclude, [, i, ], ==, variablesToInclude, [, i, -, 1, ], ), {, variablesToInclude, [, i, ], =, -]
[>, 0, &&, variablesToInclude, [, i, ], ==, variablesToInclude, [, i, -, 1, ], ), {, variablesToInclude, [, i, ]]
[&&, variablesToInclude, [, i, ], ==, variablesToInclude, [, i, -, 1, ], ), {, variablesToInclude, [, i, ], =, -]
[), {, variablesToInclude, [, i, ], =, -, 1, ;, ++, iExclude, ;, }, }, int, [, ], series, ;]
[==, variablesToInclude, [, i, -, 1, ], ), {, variablesToInclude, [, i, ], =, -, 1, ;, ++, iExclude, ;]
[[, i, ], ==, variablesToInclude, [, i, -, 1, ], ), {, variablesToInclude, [, i, ], =, -, 1, ;]
[], ==, variablesToInclude, [, i, -, 1, ], ), {, variablesToInclude, [, i, ], =, -, 1, ;, ++, iExclude]
[), {, variablesToInclude, [, i, ], =, -, 1, ;, ++, iExclude, ;, }, }, int, [, ], series, ;]
[[, i, -, 1, ], ), {, variablesToInclude, [, i, ], =, -, 1, ;, ++, iExclude, ;, }, }]
[], ), {, variablesToInclude, [, i, ], =, -, 1, ;, ++, iExclude, ;, }, }, int, [, ], series]
[-, 1, ], ), {, variablesToInclude, [, i, ], =, -, 1, ;, ++, iExclude, ;, }, }, int, []
[], ), {, variablesToInclude, [, i, ], =, -, 1, ;, ++, iExclude, ;, }, }, int, [, ], series]
[=, -, 1, ;, ++, iExclude, ;, }, }, int, [, ], series, ;, if, (, iExclude, >, 0, )]
[[, i, ], =, -, 1, ;, ++, iExclude, ;, }, }, int, [, ], series, ;, if, (, iExclude]
[], =, -, 1, ;, ++, iExclude, ;, }, }, int, [, ], series, ;, if, (, iExclude, >, 0]
[;, ++, iExclude, ;, }, }, int, [, ], series, ;, if, (, iExclude, >, 0, ), {, int, j]
[;, ++, iExclude, ;, }, }, int, [, ], series, ;, if, (, iExclude, >, 0, ), {, int, j]
[;, }, }, int, [, ], series, ;, if, (, iExclude, >, 0, ), {, int, j, =, 0, ;]
[;, }, }, int, [, ], series, ;, if, (, iExclude, >, 0, ), {, int, j, =, 0, ;]
[), {, int, j, =, 0, ;, series, =, new, int, [, variablesToInclude, ., length, -, iExclude, ], ;, for]
[>, 0, ), {, int, j, =, 0, ;, series, =, new, int, [, variablesToInclude, ., length, -, iExclude, ]]
[), {, int, j, =, 0, ;, series, =, new, int, [, variablesToInclude, ., length, -, iExclude, ], ;, for]
[;, series, =, new, int, [, variablesToInclude, ., length, -, iExclude, ], ;, for, (, int, i, =, 0, ;]
[=, new, int, [, variablesToInclude, ., length, -, iExclude, ], ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, variablesToInclude, ., length, ;, i, ++, ), {, if, (]
[], ;, for, (, int, i, =, 0, ;, i, <, variablesToInclude, ., length, ;, i, ++, ), {, if]
[-, iExclude, ], ;, for, (, int, i, =, 0, ;, i, <, variablesToInclude, ., length, ;, i, ++, )]
[., length, -, iExclude, ], ;, for, (, int, i, =, 0, ;, i, <, variablesToInclude, ., length, ;, i]
[], ;, for, (, int, i, =, 0, ;, i, <, variablesToInclude, ., length, ;, i, ++, ), {, if]
[;, i, <, variablesToInclude, ., length, ;, i, ++, ), {, if, (, variablesToInclude, [, i, ], >, -, 1]
[;, i, ++, ), {, if, (, variablesToInclude, [, i, ], >, -, 1, ), {, series, [, j, ]]
[<, variablesToInclude, ., length, ;, i, ++, ), {, if, (, variablesToInclude, [, i, ], >, -, 1, ), {]
[;, i, ++, ), {, if, (, variablesToInclude, [, i, ], >, -, 1, ), {, series, [, j, ]]
[., length, ;, i, ++, ), {, if, (, variablesToInclude, [, i, ], >, -, 1, ), {, series, []
[), {, if, (, variablesToInclude, [, i, ], >, -, 1, ), {, series, [, j, ], =, variablesToInclude, []
[++, ), {, if, (, variablesToInclude, [, i, ], >, -, 1, ), {, series, [, j, ], =, variablesToInclude]
[), {, series, [, j, ], =, variablesToInclude, [, i, ], ;, ++, j, ;, }, }, }, else, {]
[>, -, 1, ), {, series, [, j, ], =, variablesToInclude, [, i, ], ;, ++, j, ;, }, }]
[[, i, ], >, -, 1, ), {, series, [, j, ], =, variablesToInclude, [, i, ], ;, ++, j]
[], >, -, 1, ), {, series, [, j, ], =, variablesToInclude, [, i, ], ;, ++, j, ;, }]
[), {, series, [, j, ], =, variablesToInclude, [, i, ], ;, ++, j, ;, }, }, }, else, {]
[), {, series, [, j, ], =, variablesToInclude, [, i, ], ;, ++, j, ;, }, }, }, else, {]
[=, variablesToInclude, [, i, ], ;, ++, j, ;, }, }, }, else, {, series, =, variablesToInclude, ;, }, reorderRegressors]
[[, j, ], =, variablesToInclude, [, i, ], ;, ++, j, ;, }, }, }, else, {, series, =, variablesToInclude]
[], =, variablesToInclude, [, i, ], ;, ++, j, ;, }, }, }, else, {, series, =, variablesToInclude, ;, }]
[;, ++, j, ;, }, }, }, else, {, series, =, variablesToInclude, ;, }, reorderRegressors, (, series, ,, 0, )]
[[, i, ], ;, ++, j, ;, }, }, }, else, {, series, =, variablesToInclude, ;, }, reorderRegressors, (, series]
[], ;, ++, j, ;, }, }, }, else, {, series, =, variablesToInclude, ;, }, reorderRegressors, (, series, ,, 0]
[;, }, }, }, else, {, series, =, variablesToInclude, ;, }, reorderRegressors, (, series, ,, 0, ), ;, tolset, (]
[;, }, }, }, else, {, series, =, variablesToInclude, ;, }, reorderRegressors, (, series, ,, 0, ), ;, tolset, (]
[=, variablesToInclude, ;, }, reorderRegressors, (, series, ,, 0, ), ;, tolset, (, ), ;, singcheck, (, ), ;, double]
[;, }, reorderRegressors, (, series, ,, 0, ), ;, tolset, (, ), ;, singcheck, (, ), ;, double, [, ]]
[;, tolset, (, ), ;, singcheck, (, ), ;, double, [, ], beta, =, this, ., regcf, (, series, .]
[,, 0, ), ;, tolset, (, ), ;, singcheck, (, ), ;, double, [, ], beta, =, this, ., regcf]
[), ;, tolset, (, ), ;, singcheck, (, ), ;, double, [, ], beta, =, this, ., regcf, (, series]
[;, singcheck, (, ), ;, double, [, ], beta, =, this, ., regcf, (, series, ., length, ), ;, ss]
[;, double, [, ], beta, =, this, ., regcf, (, series, ., length, ), ;, ss, (, ), ;, double]
[;, ss, (, ), ;, double, [, ], cov, =, this, ., cov, (, series, ., length, ), ;, int]
[., regcf, (, series, ., length, ), ;, ss, (, ), ;, double, [, ], cov, =, this, ., cov]
[), ;, ss, (, ), ;, double, [, ], cov, =, this, ., cov, (, series, ., length, ), ;]
[., length, ), ;, ss, (, ), ;, double, [, ], cov, =, this, ., cov, (, series, ., length]
[;, double, [, ], cov, =, this, ., cov, (, series, ., length, ), ;, int, rnk, =, 0, ;]
[;, int, rnk, =, 0, ;, for, (, int, i, =, 0, ;, i, <, this, ., lindep, ., length]
[., cov, (, series, ., length, ), ;, int, rnk, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, int, rnk, =, 0, ;, for, (, int, i, =, 0, ;, i, <, this, ., lindep, .]
[., length, ), ;, int, rnk, =, 0, ;, for, (, int, i, =, 0, ;, i, <, this, .]
[;, for, (, int, i, =, 0, ;, i, <, this, ., lindep, ., length, ;, i, ++, ), {]
[;, i, <, this, ., lindep, ., length, ;, i, ++, ), {, if, (, !, this, ., lindep, []
[;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ], ), {, ++, rnk, ;, }]
[<, this, ., lindep, ., length, ;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ]]
[;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ], ), {, ++, rnk, ;, }]
[., length, ;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ], ), {, ++, rnk]
[., lindep, ., length, ;, i, ++, ), {, if, (, !, this, ., lindep, [, i, ], ), {]
[), {, if, (, !, this, ., lindep, [, i, ], ), {, ++, rnk, ;, }, }, boolean, needsReorder]
[++, ), {, if, (, !, this, ., lindep, [, i, ], ), {, ++, rnk, ;, }, }, boolean]
[), {, ++, rnk, ;, }, }, boolean, needsReorder, =, false, ;, for, (, int, i, =, 0, ;, i]
[), {, ++, rnk, ;, }, }, boolean, needsReorder, =, false, ;, for, (, int, i, =, 0, ;, i]
[[, i, ], ), {, ++, rnk, ;, }, }, boolean, needsReorder, =, false, ;, for, (, int, i, =]
[., lindep, [, i, ], ), {, ++, rnk, ;, }, }, boolean, needsReorder, =, false, ;, for, (, int]
[], ), {, ++, rnk, ;, }, }, boolean, needsReorder, =, false, ;, for, (, int, i, =, 0, ;]
[;, }, }, boolean, needsReorder, =, false, ;, for, (, int, i, =, 0, ;, i, <, this, ., nvars]
[;, }, }, boolean, needsReorder, =, false, ;, for, (, int, i, =, 0, ;, i, <, this, ., nvars]
[;, for, (, int, i, =, 0, ;, i, <, this, ., nvars, ;, i, ++, ), {, if, (]
[;, i, <, this, ., nvars, ;, i, ++, ), {, if, (, this, ., vorder, [, i, ], !=]
[;, i, ++, ), {, if, (, this, ., vorder, [, i, ], !=, series, [, i, ], ), {]
[<, this, ., nvars, ;, i, ++, ), {, if, (, this, ., vorder, [, i, ], !=, series, []
[;, i, ++, ), {, if, (, this, ., vorder, [, i, ], !=, series, [, i, ], ), {]
[., nvars, ;, i, ++, ), {, if, (, this, ., vorder, [, i, ], !=, series, [, i, ]]
[), {, if, (, this, ., vorder, [, i, ], !=, series, [, i, ], ), {, needsReorder, =, true]
[++, ), {, if, (, this, ., vorder, [, i, ], !=, series, [, i, ], ), {, needsReorder, =]
[), {, needsReorder, =, true, ;, break, ;, }, }, if, (, !, needsReorder, ), {, return, new, RegressionResults, (]
[!=, series, [, i, ], ), {, needsReorder, =, true, ;, break, ;, }, }, if, (, !, needsReorder, )]
[[, i, ], !=, series, [, i, ], ), {, needsReorder, =, true, ;, break, ;, }, }, if, (]
[., vorder, [, i, ], !=, series, [, i, ], ), {, needsReorder, =, true, ;, break, ;, }, }]
[], !=, series, [, i, ], ), {, needsReorder, =, true, ;, break, ;, }, }, if, (, !, needsReorder]
[), {, needsReorder, =, true, ;, break, ;, }, }, if, (, !, needsReorder, ), {, return, new, RegressionResults, (]
[[, i, ], ), {, needsReorder, =, true, ;, break, ;, }, }, if, (, !, needsReorder, ), {, return]
[], ), {, needsReorder, =, true, ;, break, ;, }, }, if, (, !, needsReorder, ), {, return, new, RegressionResults]
[=, true, ;, break, ;, }, }, if, (, !, needsReorder, ), {, return, new, RegressionResults, (, beta, ,, new]
[;, break, ;, }, }, if, (, !, needsReorder, ), {, return, new, RegressionResults, (, beta, ,, new, double, []
[), {, return, new, RegressionResults, (, beta, ,, new, double, [, ], [, ], {, cov, }, ,, true, ,]
[), {, return, new, RegressionResults, (, beta, ,, new, double, [, ], [, ], {, cov, }, ,, true, ,]
[;, }, else, {, double, [, ], betaNew, =, new, double, [, beta, ., length, ], ;, int, [, ]]
[,, new, double, [, ], [, ], {, cov, }, ,, true, ,, this, ., nobs, ,, rnk, ,, this]
[,, true, ,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr]
[,, true, ,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr]
[}, ,, true, ,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, .]
[,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this]
[,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false]
[., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept]
[,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;]
[,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, else, {, double]
[., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, else]
[,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, else, {, double, [, ], betaNew, =]
[., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, else, {, double, [, ]]
[,, this, ., hasIntercept, ,, false, ), ;, }, else, {, double, [, ], betaNew, =, new, double, [, beta]
[., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, else, {, double, [, ], betaNew, =, new, double]
[,, false, ), ;, }, else, {, double, [, ], betaNew, =, new, double, [, beta, ., length, ], ;]
[., hasIntercept, ,, false, ), ;, }, else, {, double, [, ], betaNew, =, new, double, [, beta, ., length]
[), ;, }, else, {, double, [, ], betaNew, =, new, double, [, beta, ., length, ], ;, int, []
[;, int, [, ], newIndices, =, new, int, [, beta, ., length, ], ;, for, (, int, i, =, 0]
[], ;, int, [, ], newIndices, =, new, int, [, beta, ., length, ], ;, for, (, int, i, =]
[., length, ], ;, int, [, ], newIndices, =, new, int, [, beta, ., length, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, series, ., length, ;, i, ++, ), {, for, (]
[], ;, for, (, int, i, =, 0, ;, i, <, series, ., length, ;, i, ++, ), {, for]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, series, ., length, ;, i, ++, )]
[;, i, <, series, ., length, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, this, ., vorder, ., length, ;]
[<, series, ., length, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, this, .]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, this, ., vorder, ., length, ;]
[., length, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, this, ., vorder, .]
[), {, for, (, int, j, =, 0, ;, j, <, this, ., vorder, ., length, ;, j, ++, )]
[++, ), {, for, (, int, j, =, 0, ;, j, <, this, ., vorder, ., length, ;, j, ++]
[;, j, <, this, ., vorder, ., length, ;, j, ++, ), {, if, (, this, ., vorder, [, j]
[;, j, ++, ), {, if, (, this, ., vorder, [, j, ], ==, series, [, i, ], ), {]
[<, this, ., vorder, ., length, ;, j, ++, ), {, if, (, this, ., vorder, [, j, ], ==]
[;, j, ++, ), {, if, (, this, ., vorder, [, j, ], ==, series, [, i, ], ), {]
[., length, ;, j, ++, ), {, if, (, this, ., vorder, [, j, ], ==, series, [, i, ]]
[., vorder, ., length, ;, j, ++, ), {, if, (, this, ., vorder, [, j, ], ==, series, []
[), {, if, (, this, ., vorder, [, j, ], ==, series, [, i, ], ), {, betaNew, [, i]
[++, ), {, if, (, this, ., vorder, [, j, ], ==, series, [, i, ], ), {, betaNew, []
[), {, betaNew, [, i, ], =, beta, [, j, ], ;, newIndices, [, i, ], =, j, ;, }]
[==, series, [, i, ], ), {, betaNew, [, i, ], =, beta, [, j, ], ;, newIndices, [, i]
[[, j, ], ==, series, [, i, ], ), {, betaNew, [, i, ], =, beta, [, j, ], ;]
[., vorder, [, j, ], ==, series, [, i, ], ), {, betaNew, [, i, ], =, beta, [, j]
[], ==, series, [, i, ], ), {, betaNew, [, i, ], =, beta, [, j, ], ;, newIndices, []
[), {, betaNew, [, i, ], =, beta, [, j, ], ;, newIndices, [, i, ], =, j, ;, }]
[[, i, ], ), {, betaNew, [, i, ], =, beta, [, j, ], ;, newIndices, [, i, ], =]
[], ), {, betaNew, [, i, ], =, beta, [, j, ], ;, newIndices, [, i, ], =, j, ;]
[=, beta, [, j, ], ;, newIndices, [, i, ], =, j, ;, }, }, }, double, [, ], covNew]
[[, i, ], =, beta, [, j, ], ;, newIndices, [, i, ], =, j, ;, }, }, }, double]
[], =, beta, [, j, ], ;, newIndices, [, i, ], =, j, ;, }, }, }, double, [, ]]
[;, newIndices, [, i, ], =, j, ;, }, }, }, double, [, ], covNew, =, new, double, [, cov]
[[, j, ], ;, newIndices, [, i, ], =, j, ;, }, }, }, double, [, ], covNew, =, new]
[], ;, newIndices, [, i, ], =, j, ;, }, }, }, double, [, ], covNew, =, new, double, []
[=, j, ;, }, }, }, double, [, ], covNew, =, new, double, [, cov, ., length, ], ;, int]
[[, i, ], =, j, ;, }, }, }, double, [, ], covNew, =, new, double, [, cov, ., length]
[], =, j, ;, }, }, }, double, [, ], covNew, =, new, double, [, cov, ., length, ], ;]
[;, }, }, }, double, [, ], covNew, =, new, double, [, cov, ., length, ], ;, int, idx1, =]
[;, int, idx1, =, 0, ;, int, idx2, ;, int, _i, ;, int, _j, ;, for, (, int, i, =]
[], ;, int, idx1, =, 0, ;, int, idx2, ;, int, _i, ;, int, _j, ;, for, (, int, i]
[., length, ], ;, int, idx1, =, 0, ;, int, idx2, ;, int, _i, ;, int, _j, ;, for, (]
[;, int, idx2, ;, int, _i, ;, int, _j, ;, for, (, int, i, =, 0, ;, i, <, beta]
[;, i, <, beta, ., length, ;, i, ++, ), {, _i, =, newIndices, [, i, ], ;, for, (]
[;, i, ++, ), {, _i, =, newIndices, [, i, ], ;, for, (, int, j, =, 0, ;, j]
[<, beta, ., length, ;, i, ++, ), {, _i, =, newIndices, [, i, ], ;, for, (, int, j]
[;, i, ++, ), {, _i, =, newIndices, [, i, ], ;, for, (, int, j, =, 0, ;, j]
[., length, ;, i, ++, ), {, _i, =, newIndices, [, i, ], ;, for, (, int, j, =, 0]
[), {, _i, =, newIndices, [, i, ], ;, for, (, int, j, =, 0, ;, j, <=, i, ;]
[++, ), {, _i, =, newIndices, [, i, ], ;, for, (, int, j, =, 0, ;, j, <=, i]
[=, newIndices, [, i, ], ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ,]
[;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ,, idx1, ++, ), {, _j]
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ,, idx1, ++]
[], ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ,, idx1, ++, ), {]
[;, j, <=, i, ;, j, ++, ,, idx1, ++, ), {, _j, =, newIndices, [, j, ], ;, if]
[;, j, ++, ,, idx1, ++, ), {, _j, =, newIndices, [, j, ], ;, if, (, _i, >, _j]
[<=, i, ;, j, ++, ,, idx1, ++, ), {, _j, =, newIndices, [, j, ], ;, if, (, _i]
[;, j, ++, ,, idx1, ++, ), {, _j, =, newIndices, [, j, ], ;, if, (, _i, >, _j]
[,, idx1, ++, ), {, _j, =, newIndices, [, j, ], ;, if, (, _i, >, _j, ), {, idx2]
[++, ,, idx1, ++, ), {, _j, =, newIndices, [, j, ], ;, if, (, _i, >, _j, ), {]
[), {, _j, =, newIndices, [, j, ], ;, if, (, _i, >, _j, ), {, idx2, =, _i, *]
[++, ), {, _j, =, newIndices, [, j, ], ;, if, (, _i, >, _j, ), {, idx2, =, _i]
[=, newIndices, [, j, ], ;, if, (, _i, >, _j, ), {, idx2, =, _i, *, (, _i, +]
[;, if, (, _i, >, _j, ), {, idx2, =, _i, *, (, _i, +, 1, ), /, 2, +]
[[, j, ], ;, if, (, _i, >, _j, ), {, idx2, =, _i, *, (, _i, +, 1, )]
[], ;, if, (, _i, >, _j, ), {, idx2, =, _i, *, (, _i, +, 1, ), /, 2]
[), {, idx2, =, _i, *, (, _i, +, 1, ), /, 2, +, _j, ;, }, else, {, idx2]
[>, _j, ), {, idx2, =, _i, *, (, _i, +, 1, ), /, 2, +, _j, ;, }, else]
[), {, idx2, =, _i, *, (, _i, +, 1, ), /, 2, +, _j, ;, }, else, {, idx2]
[=, _i, *, (, _i, +, 1, ), /, 2, +, _j, ;, }, else, {, idx2, =, _j, *]
[;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2, +, _i, ;, }, covNew]
[+, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2, +, _i, ;]
[/, 2, +, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2, +]
[*, (, _i, +, 1, ), /, 2, +, _j, ;, }, else, {, idx2, =, _j, *, (, _j]
[/, 2, +, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2, +]
[), /, 2, +, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2]
[+, 1, ), /, 2, +, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, )]
[), /, 2, +, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2]
[+, _j, ;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2, +, _i, ;]
[;, }, else, {, idx2, =, _j, *, (, _j, +, 1, ), /, 2, +, _i, ;, }, covNew]
[=, _j, *, (, _j, +, 1, ), /, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov]
[;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (, betaNew, ,]
[+, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (]
[/, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new]
[*, (, _j, +, 1, ), /, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2]
[/, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new]
[), /, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return]
[+, 1, ), /, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }]
[), /, 2, +, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return]
[+, _i, ;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (]
[;, }, covNew, [, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (, betaNew, ,]
[=, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (, betaNew, ,, new, double, [, ], [, ]]
[[, idx1, ], =, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (, betaNew, ,, new, double, []
[], =, cov, [, idx2, ], ;, }, }, return, new, RegressionResults, (, betaNew, ,, new, double, [, ], []
[;, }, }, return, new, RegressionResults, (, betaNew, ,, new, double, [, ], [, ], {, covNew, }, ,, true]
[[, idx2, ], ;, }, }, return, new, RegressionResults, (, betaNew, ,, new, double, [, ], [, ], {, covNew]
[], ;, }, }, return, new, RegressionResults, (, betaNew, ,, new, double, [, ], [, ], {, covNew, }, ,]
[;, }, }, }]
[,, new, double, [, ], [, ], {, covNew, }, ,, true, ,, this, ., nobs, ,, rnk, ,, this]
[,, true, ,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr]
[,, true, ,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr]
[}, ,, true, ,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, .]
[,, this, ., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this]
[,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false]
[., nobs, ,, rnk, ,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept]
[,, this, ., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;]
[,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, }, }]
[., sumy, ,, this, ., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, }]
[,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, }, }]
[., sumsqy, ,, this, ., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, }, }]
[,, this, ., hasIntercept, ,, false, ), ;, }, }, }]
[., sserr, ,, this, ., hasIntercept, ,, false, ), ;, }, }, }]
[,, false, ), ;, }, }, }]
[., hasIntercept, ,, false, ), ;, }, }, }]
[), ;, }, }, }]
