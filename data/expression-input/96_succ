[;, public, static, final, String, ARGUMENT_ARRAY_ALIAS, =, "arguments", ;, private, static, class, LiveVariableJoinOp, implements, JoinOp, <, LiveVariableLattice, >, {, @]
[;, private, static, class, LiveVariableJoinOp, implements, JoinOp, <, LiveVariableLattice, >, {, @, Override, public, LiveVariableLattice, apply, (, List, <, LiveVariableLattice]
[;, for, (, int, i, =, 1, ;, i, <, in, ., size, (, ), ;, i, ++, ), {]
[), ;, for, (, int, i, =, 1, ;, i, <, in, ., size, (, ), ;, i, ++, )]
[., get, (, 0, ), ), ;, for, (, int, i, =, 1, ;, i, <, in, ., size, (]
[), ), ;, for, (, int, i, =, 1, ;, i, <, in, ., size, (, ), ;, i, ++]
[;, i, <, in, ., size, (, ), ;, i, ++, ), {, result, ., liveSet, ., or, (, in]
[;, i, ++, ), {, result, ., liveSet, ., or, (, in, ., get, (, i, ), ., liveSet, )]
[<, in, ., size, (, ), ;, i, ++, ), {, result, ., liveSet, ., or, (, in, ., get]
[;, i, ++, ), {, result, ., liveSet, ., or, (, in, ., get, (, i, ), ., liveSet, )]
[., size, (, ), ;, i, ++, ), {, result, ., liveSet, ., or, (, in, ., get, (, i]
[), {, result, ., liveSet, ., or, (, in, ., get, (, i, ), ., liveSet, ), ;, }, return]
[++, ), {, result, ., liveSet, ., or, (, in, ., get, (, i, ), ., liveSet, ), ;, }]
[;, }, return, result, ;, }, }, static, class, LiveVariableLattice, implements, LatticeElement, {, private, final, BitSet, liveSet, ;, private, LiveVariableLattice]
[., or, (, in, ., get, (, i, ), ., liveSet, ), ;, }, return, result, ;, }, }, static]
[., liveSet, ., or, (, in, ., get, (, i, ), ., liveSet, ), ;, }, return, result, ;, }]
[), ;, }, return, result, ;, }, }, static, class, LiveVariableLattice, implements, LatticeElement, {, private, final, BitSet, liveSet, ;, private]
[., liveSet, ), ;, }, return, result, ;, }, }, static, class, LiveVariableLattice, implements, LatticeElement, {, private, final, BitSet, liveSet]
[., get, (, i, ), ., liveSet, ), ;, }, return, result, ;, }, }, static, class, LiveVariableLattice, implements, LatticeElement]
[), ., liveSet, ), ;, }, return, result, ;, }, }, static, class, LiveVariableLattice, implements, LatticeElement, {, private, final, BitSet]
[;, }, }, static, class, LiveVariableLattice, implements, LatticeElement, {, private, final, BitSet, liveSet, ;, private, LiveVariableLattice, (, int, numVars, )]
[=, new, BitSet, (, numVars, ), ;, }, private, LiveVariableLattice, (, LiveVariableLattice, other, ), {, Preconditions, ., checkNotNull, (, other]
[., liveSet, =, new, BitSet, (, numVars, ), ;, }, private, LiveVariableLattice, (, LiveVariableLattice, other, ), {, Preconditions, ., checkNotNull]
[;, }, private, LiveVariableLattice, (, LiveVariableLattice, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, this, ., liveSet, =]
[), ;, }, private, LiveVariableLattice, (, LiveVariableLattice, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, this, ., liveSet]
[;, this, ., liveSet, =, (, BitSet, ), other, ., liveSet, ., clone, (, ), ;, }, @, Override, public]
[., checkNotNull, (, other, ), ;, this, ., liveSet, =, (, BitSet, ), other, ., liveSet, ., clone, (, )]
[), ;, this, ., liveSet, =, (, BitSet, ), other, ., liveSet, ., clone, (, ), ;, }, @, Override]
[=, (, BitSet, ), other, ., liveSet, ., clone, (, ), ;, }, @, Override, public, boolean, equals, (, Object]
[., liveSet, =, (, BitSet, ), other, ., liveSet, ., clone, (, ), ;, }, @, Override, public, boolean, equals]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, return]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, Preconditions, ., checkNotNull, (, other, ), ;, return]
[., clone, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, Preconditions, ., checkNotNull, (]
[., liveSet, ., clone, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, Preconditions, .]
[;, return, (, other, instanceof, LiveVariableLattice, ), &&, this, ., liveSet, ., equals, (, (, (, LiveVariableLattice, ), other, )]
[., checkNotNull, (, other, ), ;, return, (, other, instanceof, LiveVariableLattice, ), &&, this, ., liveSet, ., equals, (, (]
[), ;, return, (, other, instanceof, LiveVariableLattice, ), &&, this, ., liveSet, ., equals, (, (, (, LiveVariableLattice, ), other]
[;, }, public, boolean, isLive, (, Var, v, ), {, Preconditions, ., checkNotNull, (, v, ), ;, return, liveSet, .]
[&&, this, ., liveSet, ., equals, (, (, (, LiveVariableLattice, ), other, ), ., liveSet, ), ;, }, public, boolean]
[), &&, this, ., liveSet, ., equals, (, (, (, LiveVariableLattice, ), other, ), ., liveSet, ), ;, }, public]
[instanceof, LiveVariableLattice, ), &&, this, ., liveSet, ., equals, (, (, (, LiveVariableLattice, ), other, ), ., liveSet, ), ;]
[;, }, public, boolean, isLive, (, Var, v, ), {, Preconditions, ., checkNotNull, (, v, ), ;, return, liveSet, .]
[., equals, (, (, (, LiveVariableLattice, ), other, ), ., liveSet, ), ;, }, public, boolean, isLive, (, Var, v]
[., liveSet, ., equals, (, (, (, LiveVariableLattice, ), other, ), ., liveSet, ), ;, }, public, boolean, isLive, (]
[), ;, }, public, boolean, isLive, (, Var, v, ), {, Preconditions, ., checkNotNull, (, v, ), ;, return, liveSet]
[., liveSet, ), ;, }, public, boolean, isLive, (, Var, v, ), {, Preconditions, ., checkNotNull, (, v, ), ;]
[), ., liveSet, ), ;, }, public, boolean, isLive, (, Var, v, ), {, Preconditions, ., checkNotNull, (, v, )]
[), ., liveSet, ), ;, }, public, boolean, isLive, (, Var, v, ), {, Preconditions, ., checkNotNull, (, v, )]
[;, return, liveSet, ., get, (, v, ., index, ), ;, }, public, boolean, isLive, (, int, index, ), {]
[., checkNotNull, (, v, ), ;, return, liveSet, ., get, (, v, ., index, ), ;, }, public, boolean, isLive]
[), ;, return, liveSet, ., get, (, v, ., index, ), ;, }, public, boolean, isLive, (, int, index, )]
[;, }, public, boolean, isLive, (, int, index, ), {, return, liveSet, ., get, (, index, ), ;, }, @]
[., get, (, v, ., index, ), ;, }, public, boolean, isLive, (, int, index, ), {, return, liveSet, .]
[), ;, }, public, boolean, isLive, (, int, index, ), {, return, liveSet, ., get, (, index, ), ;, }]
[., index, ), ;, }, public, boolean, isLive, (, int, index, ), {, return, liveSet, ., get, (, index, )]
[;, }, @, Override, public, String, toString, (, ), {, return, liveSet, ., toString, (, ), ;, }, @, Override]
[., get, (, index, ), ;, }, @, Override, public, String, toString, (, ), {, return, liveSet, ., toString, (]
[), ;, }, @, Override, public, String, toString, (, ), {, return, liveSet, ., toString, (, ), ;, }, @]
[;, }, @, Override, public, int, hashCode, (, ), {, return, liveSet, ., hashCode, (, ), ;, }, }, private]
[., toString, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, liveSet, ., hashCode, (, )]
[;, }, }, private, final, Scope, jsScope, ;, private, final, Set, <, Var, >, escaped, ;, LiveVariablesAnalysis, (, ControlFlowGraph, <]
[., hashCode, (, ), ;, }, }, private, final, Scope, jsScope, ;, private, final, Set, <, Var, >, escaped, ;]
[,, new, LiveVariableJoinOp, (, ), ), ;, this, ., jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet]
[), ;, this, ., jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (]
[=, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler]
[., jsScope, =, jsScope, ;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped]
[;, this, ., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;]
[=, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;, }, public, Set, <]
[., escaped, =, Sets, ., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;, }, public]
[;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;, }, public, Set, <, Var, >, getEscapedLocals, (, ), {]
[., newHashSet, (, ), ;, computeEscaped, (, jsScope, ,, escaped, ,, compiler, ), ;, }, public, Set, <, Var, >]
[;, }, public, Set, <, Var, >, getEscapedLocals, (, ), {, return, escaped, ;, }, public, int, getVarIndex, (, String]
[,, escaped, ,, compiler, ), ;, }, public, Set, <, Var, >, getEscapedLocals, (, ), {, return, escaped, ;, }]
[,, compiler, ), ;, }, public, Set, <, Var, >, getEscapedLocals, (, ), {, return, escaped, ;, }, public, int]
[), ;, }, public, Set, <, Var, >, getEscapedLocals, (, ), {, return, escaped, ;, }, public, int, getVarIndex, (]
[;, }, public, int, getVarIndex, (, String, var, ), {, return, jsScope, ., getVar, (, var, ), ., index, ;]
[;, }, @, Override, boolean, isForward, (, ), {, return, false, ;, }, @, Override, LiveVariableLattice, createEntryLattice, (, ), {]
[., index, ;, }, @, Override, boolean, isForward, (, ), {, return, false, ;, }, @, Override, LiveVariableLattice, createEntryLattice, (]
[., getVar, (, var, ), ., index, ;, }, @, Override, boolean, isForward, (, ), {, return, false, ;, }]
[), ., index, ;, }, @, Override, boolean, isForward, (, ), {, return, false, ;, }, @, Override, LiveVariableLattice, createEntryLattice]
[;, }, @, Override, LiveVariableLattice, createEntryLattice, (, ), {, return, new, LiveVariableLattice, (, jsScope, ., getVarCount, (, ), ), ;]
[;, }, @, Override, LiveVariableLattice, createInitialEstimateLattice, (, ), {, return, new, LiveVariableLattice, (, jsScope, ., getVarCount, (, ), ), ;]
[), ;, }, @, Override, LiveVariableLattice, createInitialEstimateLattice, (, ), {, return, new, LiveVariableLattice, (, jsScope, ., getVarCount, (, ), )]
[., getVarCount, (, ), ), ;, }, @, Override, LiveVariableLattice, createInitialEstimateLattice, (, ), {, return, new, LiveVariableLattice, (, jsScope, .]
[;, }, @, Override, LiveVariableLattice, flowThrough, (, Node, node, ,, LiveVariableLattice, input, ), {, final, BitSet, gen, =, new, BitSet]
[), ;, }, @, Override, LiveVariableLattice, flowThrough, (, Node, node, ,, LiveVariableLattice, input, ), {, final, BitSet, gen, =, new]
[., getVarCount, (, ), ), ;, }, @, Override, LiveVariableLattice, flowThrough, (, Node, node, ,, LiveVariableLattice, input, ), {, final]
[;, final, BitSet, kill, =, new, BitSet, (, input, ., liveSet, ., size, (, ), ), ;, boolean, conditional, =]
[), ;, final, BitSet, kill, =, new, BitSet, (, input, ., liveSet, ., size, (, ), ), ;, boolean, conditional]
[., size, (, ), ), ;, final, BitSet, kill, =, new, BitSet, (, input, ., liveSet, ., size, (, )]
[., liveSet, ., size, (, ), ), ;, final, BitSet, kill, =, new, BitSet, (, input, ., liveSet, ., size]
[;, boolean, conditional, =, false, ;, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, edgeList, =, getCfg, (, )]
[), ;, boolean, conditional, =, false, ;, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, edgeList, =, getCfg, (]
[., size, (, ), ), ;, boolean, conditional, =, false, ;, List, <, DiGraphEdge, <, Node, ,, Branch, >, >]
[., liveSet, ., size, (, ), ), ;, boolean, conditional, =, false, ;, List, <, DiGraphEdge, <, Node, ,, Branch]
[;, List, <, DiGraphEdge, <, Node, ,, Branch, >, >, edgeList, =, getCfg, (, ), ., getOutEdges, (, node, )]
[;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :, edgeList, ), {, if, (, Branch, ., ON_EX, .]
[., getOutEdges, (, node, ), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :, edgeList, ), {, if]
[), ;, for, (, DiGraphEdge, <, Node, ,, Branch, >, edge, :, edgeList, ), {, if, (, Branch, ., ON_EX]
[), {, if, (, Branch, ., ON_EX, ., equals, (, edge, ., getValue, (, ), ), ), {, conditional, =]
[), {, conditional, =, true, ;, }, }, computeGenKill, (, node, ,, gen, ,, kill, ,, conditional, ), ;, LiveVariableLattice]
[., equals, (, edge, ., getValue, (, ), ), ), {, conditional, =, true, ;, }, }, computeGenKill, (, node]
[., ON_EX, ., equals, (, edge, ., getValue, (, ), ), ), {, conditional, =, true, ;, }, }, computeGenKill]
[), ), {, conditional, =, true, ;, }, }, computeGenKill, (, node, ,, gen, ,, kill, ,, conditional, ), ;]
[., getValue, (, ), ), ), {, conditional, =, true, ;, }, }, computeGenKill, (, node, ,, gen, ,, kill]
[=, true, ;, }, }, computeGenKill, (, node, ,, gen, ,, kill, ,, conditional, ), ;, LiveVariableLattice, result, =, new]
[;, }, }, computeGenKill, (, node, ,, gen, ,, kill, ,, conditional, ), ;, LiveVariableLattice, result, =, new, LiveVariableLattice, (]
[;, LiveVariableLattice, result, =, new, LiveVariableLattice, (, input, ), ;, result, ., liveSet, ., andNot, (, kill, ), ;, result]
[,, gen, ,, kill, ,, conditional, ), ;, LiveVariableLattice, result, =, new, LiveVariableLattice, (, input, ), ;, result, ., liveSet]
[,, kill, ,, conditional, ), ;, LiveVariableLattice, result, =, new, LiveVariableLattice, (, input, ), ;, result, ., liveSet, ., andNot]
[,, conditional, ), ;, LiveVariableLattice, result, =, new, LiveVariableLattice, (, input, ), ;, result, ., liveSet, ., andNot, (, kill]
[), ;, LiveVariableLattice, result, =, new, LiveVariableLattice, (, input, ), ;, result, ., liveSet, ., andNot, (, kill, ), ;]
[;, result, ., liveSet, ., andNot, (, kill, ), ;, result, ., liveSet, ., or, (, gen, ), ;, return]
[), ;, result, ., liveSet, ., andNot, (, kill, ), ;, result, ., liveSet, ., or, (, gen, ), ;]
[;, result, ., liveSet, ., or, (, gen, ), ;, return, result, ;, }, private, void, computeGenKill, (, Node, n]
[., andNot, (, kill, ), ;, result, ., liveSet, ., or, (, gen, ), ;, return, result, ;, }, private]
[., liveSet, ., andNot, (, kill, ), ;, result, ., liveSet, ., or, (, gen, ), ;, return, result, ;]
[), ;, result, ., liveSet, ., or, (, gen, ), ;, return, result, ;, }, private, void, computeGenKill, (, Node]
[;, return, result, ;, }, private, void, computeGenKill, (, Node, n, ,, BitSet, gen, ,, BitSet, kill, ,, boolean, conditional]
[., or, (, gen, ), ;, return, result, ;, }, private, void, computeGenKill, (, Node, n, ,, BitSet, gen, ,]
[., liveSet, ., or, (, gen, ), ;, return, result, ;, }, private, void, computeGenKill, (, Node, n, ,, BitSet]
[), ;, return, result, ;, }, private, void, computeGenKill, (, Node, n, ,, BitSet, gen, ,, BitSet, kill, ,, boolean]
[;, }, private, void, computeGenKill, (, Node, n, ,, BitSet, gen, ,, BitSet, kill, ,, boolean, conditional, ), {, switch]
[), {, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case]
[., getType, (, ), ), {, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., FUNCTION]
[:, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case, Token]
[., SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :]
[:, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token]
[., BLOCK, :, case, Token, ., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :]
[:, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeGenKill, (]
[., FUNCTION, :, return, ;, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :]
[:, case, Token, ., DO, :, case, Token, ., IF, :, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,]
[., WHILE, :, case, Token, ., DO, :, case, Token, ., IF, :, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n]
[:, case, Token, ., IF, :, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill, ,, conditional]
[., DO, :, case, Token, ., IF, :, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill]
[:, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill, ,, conditional, ), ;, return, ;, case]
[., IF, :, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill, ,, conditional, ), ;, return]
[;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeGenKill]
[,, gen, ,, kill, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, .]
[., getConditionExpression, (, n, ), ,, gen, ,, kill, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :]
[), ,, gen, ,, kill, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil]
[,, kill, ,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (]
[,, conditional, ), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, )]
[), ;, return, ;, case, Token, ., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {]
[:, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, )]
[., FOR, :, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, computeGenKill, (, NodeUtil, ., getConditionExpression, (]
[), {, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill, ,, conditional, ), ;, }, else]
[), {, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill, ,, conditional, ), ;, }, else]
[., isForIn, (, n, ), ), {, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill, ,]
[), ), {, computeGenKill, (, NodeUtil, ., getConditionExpression, (, n, ), ,, gen, ,, kill, ,, conditional, ), ;, }]
[;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (]
[,, gen, ,, kill, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;]
[., getConditionExpression, (, n, ), ,, gen, ,, kill, ,, conditional, ), ;, }, else, {, Node, lhs, =, n]
[), ,, gen, ,, kill, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, )]
[,, kill, ,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs]
[,, conditional, ), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs]
[), ;, }, else, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext]
[;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {, lhs]
[., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, lhs, ., isVar, (]
[;, if, (, lhs, ., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if]
[., getNext, (, ), ;, if, (, lhs, ., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (]
[), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), ), {]
[., isVar, (, ), ), {, lhs, =, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName]
[=, lhs, ., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), ), {, addToSetIfLocal, (, lhs]
[;, }, if, (, lhs, ., isName, (, ), ), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, addToSetIfLocal, (]
[., getLastChild, (, ), ;, }, if, (, lhs, ., isName, (, ), ), {, addToSetIfLocal, (, lhs, ,, kill]
[), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, else, {, computeGenKill]
[., isName, (, ), ), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, addToSetIfLocal, (, lhs, ,, gen, ), ;]
[;, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, else, {, computeGenKill, (, lhs, ,, gen, ,, kill, ,, conditional]
[,, kill, ), ;, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, else, {, computeGenKill, (, lhs, ,, gen, ,]
[), ;, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, else, {, computeGenKill, (, lhs, ,, gen, ,, kill, ,]
[;, }, else, {, computeGenKill, (, lhs, ,, gen, ,, kill, ,, conditional, ), ;, }, }, return, ;, case]
[,, gen, ), ;, }, else, {, computeGenKill, (, lhs, ,, gen, ,, kill, ,, conditional, ), ;, }, }]
[), ;, }, else, {, computeGenKill, (, lhs, ,, gen, ,, kill, ,, conditional, ), ;, }, }, return, ;]
[;, }, }, return, ;, case, Token, ., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, )]
[,, gen, ,, kill, ,, conditional, ), ;, }, }, return, ;, case, Token, ., VAR, :, for, (, Node]
[,, kill, ,, conditional, ), ;, }, }, return, ;, case, Token, ., VAR, :, for, (, Node, c, =]
[,, conditional, ), ;, }, }, return, ;, case, Token, ., VAR, :, for, (, Node, c, =, n, .]
[), ;, }, }, return, ;, case, Token, ., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (]
[:, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, .]
[., VAR, :, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {, computeGenKill]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), )]
[;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {, computeGenKill]
[=, c, ., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {, computeGenKill, (, c]
[), {, if, (, c, ., hasChildren, (, ), ), {, computeGenKill, (, c, ., getFirstChild, (, ), ,, gen]
[., getNext, (, ), ), {, if, (, c, ., hasChildren, (, ), ), {, computeGenKill, (, c, ., getFirstChild]
[), {, computeGenKill, (, c, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, if, (, !]
[., hasChildren, (, ), ), {, computeGenKill, (, c, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, )]
[;, if, (, !, conditional, ), {, addToSetIfLocal, (, c, ,, kill, ), ;, }, }, }, return, ;, case]
[,, gen, ,, kill, ,, conditional, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (, c, ,, kill, )]
[., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (]
[,, kill, ,, conditional, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (, c, ,, kill, ), ;, }]
[,, conditional, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (, c, ,, kill, ), ;, }, }, }]
[), ;, if, (, !, conditional, ), {, addToSetIfLocal, (, c, ,, kill, ), ;, }, }, }, return, ;]
[), {, addToSetIfLocal, (, c, ,, kill, ), ;, }, }, }, return, ;, case, Token, ., AND, :, case]
[), {, addToSetIfLocal, (, c, ,, kill, ), ;, }, }, }, return, ;, case, Token, ., AND, :, case]
[;, }, }, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeGenKill, (, n, .]
[,, kill, ), ;, }, }, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeGenKill]
[), ;, }, }, }, return, ;, case, Token, ., AND, :, case, Token, ., OR, :, computeGenKill, (, n]
[:, case, Token, ., OR, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, )]
[., AND, :, case, Token, ., OR, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,]
[:, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (, n, .]
[., OR, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (]
[;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case, Token]
[,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,]
[., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,]
[,, kill, ,, conditional, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,, true, )]
[,, conditional, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return]
[), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case]
[;, return, ;, case, Token, ., HOOK, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,]
[,, gen, ,, kill, ,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeGenKill, (, n, ., getFirstChild]
[., getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeGenKill]
[,, kill, ,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeGenKill, (, n, ., getFirstChild, (, )]
[,, true, ), ;, return, ;, case, Token, ., HOOK, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen]
[), ;, return, ;, case, Token, ., HOOK, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill]
[:, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (, n, .]
[., HOOK, :, computeGenKill, (, n, ., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (]
[;, computeGenKill, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, gen, ,, kill, ,, true, ), ;]
[,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,]
[., getFirstChild, (, ), ,, gen, ,, kill, ,, conditional, ), ;, computeGenKill, (, n, ., getFirstChild, (, ), .]
[,, kill, ,, conditional, ), ;, computeGenKill, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, gen, ,]
[,, conditional, ), ;, computeGenKill, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, gen, ,, kill, ,]
[), ;, computeGenKill, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, gen, ,, kill, ,, true, )]
[;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case, Token]
[,, gen, ,, kill, ,, true, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,]
[., getNext, (, ), ,, gen, ,, kill, ,, true, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,]
[., getFirstChild, (, ), ., getNext, (, ), ,, gen, ,, kill, ,, true, ), ;, computeGenKill, (, n, .]
[,, kill, ,, true, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,, true, )]
[,, true, ), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return]
[), ;, computeGenKill, (, n, ., getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case]
[;, return, ;, case, Token, ., NAME, :, if, (, isArgumentsName, (, n, ), ), {, markAllParametersEscaped, (, ), ;]
[,, gen, ,, kill, ,, true, ), ;, return, ;, case, Token, ., NAME, :, if, (, isArgumentsName, (, n]
[., getLastChild, (, ), ,, gen, ,, kill, ,, true, ), ;, return, ;, case, Token, ., NAME, :, if]
[,, kill, ,, true, ), ;, return, ;, case, Token, ., NAME, :, if, (, isArgumentsName, (, n, ), )]
[,, true, ), ;, return, ;, case, Token, ., NAME, :, if, (, isArgumentsName, (, n, ), ), {, markAllParametersEscaped]
[), ;, return, ;, case, Token, ., NAME, :, if, (, isArgumentsName, (, n, ), ), {, markAllParametersEscaped, (, )]
[:, if, (, isArgumentsName, (, n, ), ), {, markAllParametersEscaped, (, ), ;, }, else, {, addToSetIfLocal, (, n, ,]
[., NAME, :, if, (, isArgumentsName, (, n, ), ), {, markAllParametersEscaped, (, ), ;, }, else, {, addToSetIfLocal, (]
[), {, markAllParametersEscaped, (, ), ;, }, else, {, addToSetIfLocal, (, n, ,, gen, ), ;, }, return, ;, default]
[), ), {, markAllParametersEscaped, (, ), ;, }, else, {, addToSetIfLocal, (, n, ,, gen, ), ;, }, return, ;]
[;, }, else, {, addToSetIfLocal, (, n, ,, gen, ), ;, }, return, ;, default, :, if, (, NodeUtil, .]
[;, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, )]
[,, gen, ), ;, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, n, .]
[), ;, }, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (]
[), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (, lhs]
[&&, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, lhs, =, n, ., getFirstChild, (, )]
[., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, lhs, =]
[), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Node, lhs, =, n, ., getFirstChild, (]
[), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (, lhs]
[., isName, (, ), ), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !, conditional, )]
[., getFirstChild, (, ), ., isName, (, ), ), {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if]
[;, if, (, !, conditional, ), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, }, if, (, !, n, .]
[., getFirstChild, (, ), ;, if, (, !, conditional, ), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, }, if]
[), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, }, if, (, !, n, ., isAssign, (, ), ), {]
[), {, addToSetIfLocal, (, lhs, ,, kill, ), ;, }, if, (, !, n, ., isAssign, (, ), ), {]
[;, }, if, (, !, n, ., isAssign, (, ), ), {, addToSetIfLocal, (, lhs, ,, gen, ), ;, }]
[,, kill, ), ;, }, if, (, !, n, ., isAssign, (, ), ), {, addToSetIfLocal, (, lhs, ,, gen]
[), ;, }, if, (, !, n, ., isAssign, (, ), ), {, addToSetIfLocal, (, lhs, ,, gen, ), ;]
[), {, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, computeGenKill, (, lhs, ., getNext, (, ), ,, gen, ,]
[), {, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, computeGenKill, (, lhs, ., getNext, (, ), ,, gen, ,]
[., isAssign, (, ), ), {, addToSetIfLocal, (, lhs, ,, gen, ), ;, }, computeGenKill, (, lhs, ., getNext, (]
[;, }, computeGenKill, (, lhs, ., getNext, (, ), ,, gen, ,, kill, ,, conditional, ), ;, }, else, {]
[,, gen, ), ;, }, computeGenKill, (, lhs, ., getNext, (, ), ,, gen, ,, kill, ,, conditional, ), ;]
[), ;, }, computeGenKill, (, lhs, ., getNext, (, ), ,, gen, ,, kill, ,, conditional, ), ;, }, else]
[;, }, else, {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c]
[,, gen, ,, kill, ,, conditional, ), ;, }, else, {, for, (, Node, c, =, n, ., getFirstChild, (]
[., getNext, (, ), ,, gen, ,, kill, ,, conditional, ), ;, }, else, {, for, (, Node, c, =]
[,, kill, ,, conditional, ), ;, }, else, {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[,, conditional, ), ;, }, else, {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[), ;, }, else, {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, computeGenKill, (, c, ,, gen, ,]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, computeGenKill, (]
[;, c, =, c, ., getNext, (, ), ), {, computeGenKill, (, c, ,, gen, ,, kill, ,, conditional, )]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, computeGenKill, (, c, ,, gen, ,, kill, ,]
[;, c, =, c, ., getNext, (, ), ), {, computeGenKill, (, c, ,, gen, ,, kill, ,, conditional, )]
[=, c, ., getNext, (, ), ), {, computeGenKill, (, c, ,, gen, ,, kill, ,, conditional, ), ;, }]
[), {, computeGenKill, (, c, ,, gen, ,, kill, ,, conditional, ), ;, }, }, return, ;, }, }, private]
[., getNext, (, ), ), {, computeGenKill, (, c, ,, gen, ,, kill, ,, conditional, ), ;, }, }, return]
[;, }, }, return, ;, }, }, private, void, addToSetIfLocal, (, Node, node, ,, BitSet, set, ), {, Preconditions, .]
[,, gen, ,, kill, ,, conditional, ), ;, }, }, return, ;, }, }, private, void, addToSetIfLocal, (, Node, node]
[,, kill, ,, conditional, ), ;, }, }, return, ;, }, }, private, void, addToSetIfLocal, (, Node, node, ,, BitSet]
[,, conditional, ), ;, }, }, return, ;, }, }, private, void, addToSetIfLocal, (, Node, node, ,, BitSet, set, )]
[), ;, }, }, return, ;, }, }, private, void, addToSetIfLocal, (, Node, node, ,, BitSet, set, ), {, Preconditions]
[;, String, name, =, node, ., getString, (, ), ;, if, (, !, jsScope, ., isDeclared, (, name, ,, false]
[., checkState, (, node, ., isName, (, ), ), ;, String, name, =, node, ., getString, (, ), ;, if]
[), ;, String, name, =, node, ., getString, (, ), ;, if, (, !, jsScope, ., isDeclared, (, name, ,]
[., isName, (, ), ), ;, String, name, =, node, ., getString, (, ), ;, if, (, !, jsScope, .]
[;, if, (, !, jsScope, ., isDeclared, (, name, ,, false, ), ), {, return, ;, }, Var, var, =]
[., getString, (, ), ;, if, (, !, jsScope, ., isDeclared, (, name, ,, false, ), ), {, return, ;]
[), {, return, ;, }, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, !, escaped, .]
[), {, return, ;, }, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, !, escaped, .]
[., isDeclared, (, name, ,, false, ), ), {, return, ;, }, Var, var, =, jsScope, ., getVar, (, name]
[,, false, ), ), {, return, ;, }, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (]
[), ), {, return, ;, }, Var, var, =, jsScope, ., getVar, (, name, ), ;, if, (, !, escaped]
[;, if, (, !, escaped, ., contains, (, var, ), ), {, set, ., set, (, var, ., index, )]
[., getVar, (, name, ), ;, if, (, !, escaped, ., contains, (, var, ), ), {, set, ., set]
[), ;, if, (, !, escaped, ., contains, (, var, ), ), {, set, ., set, (, var, ., index]
[), {, set, ., set, (, var, ., index, ), ;, }, }, void, markAllParametersEscaped, (, ), {, Node, lp]
[), {, set, ., set, (, var, ., index, ), ;, }, }, void, markAllParametersEscaped, (, ), {, Node, lp]
[., contains, (, var, ), ), {, set, ., set, (, var, ., index, ), ;, }, }, void, markAllParametersEscaped]
[), ), {, set, ., set, (, var, ., index, ), ;, }, }, void, markAllParametersEscaped, (, ), {, Node]
[;, }, }, void, markAllParametersEscaped, (, ), {, Node, lp, =, jsScope, ., getRootNode, (, ), ., getFirstChild, (, )]
[., set, (, var, ., index, ), ;, }, }, void, markAllParametersEscaped, (, ), {, Node, lp, =, jsScope, .]
[), ;, }, }, void, markAllParametersEscaped, (, ), {, Node, lp, =, jsScope, ., getRootNode, (, ), ., getFirstChild, (]
[., index, ), ;, }, }, void, markAllParametersEscaped, (, ), {, Node, lp, =, jsScope, ., getRootNode, (, ), .]
[;, for, (, Node, arg, =, lp, ., getFirstChild, (, ), ;, arg, !=, null, ;, arg, =, arg, .]
[., getNext, (, ), ;, for, (, Node, arg, =, lp, ., getFirstChild, (, ), ;, arg, !=, null, ;]
[., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, arg, =, lp, ., getFirstChild, (, ), ;]
[., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, for, (, Node, arg, =, lp, .]
[;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, escaped, ., add, (, jsScope, .]
[., getFirstChild, (, ), ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, escaped, .]
[;, arg, =, arg, ., getNext, (, ), ), {, escaped, ., add, (, jsScope, ., getVar, (, arg, .]
[!=, null, ;, arg, =, arg, ., getNext, (, ), ), {, escaped, ., add, (, jsScope, ., getVar, (]
[;, arg, =, arg, ., getNext, (, ), ), {, escaped, ., add, (, jsScope, ., getVar, (, arg, .]
[=, arg, ., getNext, (, ), ), {, escaped, ., add, (, jsScope, ., getVar, (, arg, ., getString, (]
[), {, escaped, ., add, (, jsScope, ., getVar, (, arg, ., getString, (, ), ), ), ;, }, }]
[., getNext, (, ), ), {, escaped, ., add, (, jsScope, ., getVar, (, arg, ., getString, (, ), )]
[;, }, }, private, boolean, isArgumentsName, (, Node, n, ), {, if, (, !, n, ., isName, (, ), ||]
[., add, (, jsScope, ., getVar, (, arg, ., getString, (, ), ), ), ;, }, }, private, boolean, isArgumentsName]
[), ;, }, }, private, boolean, isArgumentsName, (, Node, n, ), {, if, (, !, n, ., isName, (, )]
[., getVar, (, arg, ., getString, (, ), ), ), ;, }, }, private, boolean, isArgumentsName, (, Node, n, )]
[), ), ;, }, }, private, boolean, isArgumentsName, (, Node, n, ), {, if, (, !, n, ., isName, (]
[., getString, (, ), ), ), ;, }, }, private, boolean, isArgumentsName, (, Node, n, ), {, if, (, !]
[), {, return, false, ;, }, else, {, return, true, ;, }, }, }]
[||, jsScope, ., isDeclared, (, ARGUMENT_ARRAY_ALIAS, ,, false, ), ), {, return, false, ;, }, else, {, return, true, ;]
[||, !, n, ., getString, (, ), ., equals, (, ARGUMENT_ARRAY_ALIAS, ), ||, jsScope, ., isDeclared, (, ARGUMENT_ARRAY_ALIAS, ,, false]
[||, !, n, ., getString, (, ), ., equals, (, ARGUMENT_ARRAY_ALIAS, ), ||, jsScope, ., isDeclared, (, ARGUMENT_ARRAY_ALIAS, ,, false]
[., isName, (, ), ||, !, n, ., getString, (, ), ., equals, (, ARGUMENT_ARRAY_ALIAS, ), ||, jsScope, ., isDeclared]
[||, jsScope, ., isDeclared, (, ARGUMENT_ARRAY_ALIAS, ,, false, ), ), {, return, false, ;, }, else, {, return, true, ;]
[||, jsScope, ., isDeclared, (, ARGUMENT_ARRAY_ALIAS, ,, false, ), ), {, return, false, ;, }, else, {, return, true, ;]
[., equals, (, ARGUMENT_ARRAY_ALIAS, ), ||, jsScope, ., isDeclared, (, ARGUMENT_ARRAY_ALIAS, ,, false, ), ), {, return, false, ;, }]
[., getString, (, ), ., equals, (, ARGUMENT_ARRAY_ALIAS, ), ||, jsScope, ., isDeclared, (, ARGUMENT_ARRAY_ALIAS, ,, false, ), ), {]
[), ||, jsScope, ., isDeclared, (, ARGUMENT_ARRAY_ALIAS, ,, false, ), ), {, return, false, ;, }, else, {, return, true]
[), {, return, false, ;, }, else, {, return, true, ;, }, }, }]
[., isDeclared, (, ARGUMENT_ARRAY_ALIAS, ,, false, ), ), {, return, false, ;, }, else, {, return, true, ;, }, }]
[,, false, ), ), {, return, false, ;, }, else, {, return, true, ;, }, }, }]
[), ), {, return, false, ;, }, else, {, return, true, ;, }, }, }]
[;, }, else, {, return, true, ;, }, }, }]
[;, }, }, }]
