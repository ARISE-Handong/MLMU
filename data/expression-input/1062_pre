[commons, ., math3, ., util, ., FastMath, ;, public, class, MidPointIntegrator, extends, BaseAbstractUnivariateIntegrator, {, public, static, final, int, MIDPOINT_MAX_ITERATIONS_COUNT, =]
[double, absoluteAccuracy, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (]
[,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,]
[int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,]
[,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,]
[throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >]
[{, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw]
[relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (]
[absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,]
[minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,]
[public, MidPointIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (]
[(, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,]
[final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >]
[,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw]
[NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (]
[super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,]
[minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, MIDPOINT_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,]
[throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, MidPointIntegrator, (, ), {, super, (]
[NumberIsTooLargeException, (, maximalIterationCount, ,, MIDPOINT_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, MidPointIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,]
[final, int, n, ,, double, previousStageResult, ,, double, min, ,, double, diffMaxMin, ), throws, TooManyEvaluationsException, {, final, long, np, =]
[final, int, n, ,, double, previousStageResult, ,, double, min, ,, double, diffMaxMin, ), throws, TooManyEvaluationsException, {, final, long, np, =]
[n, ,, double, previousStageResult, ,, double, min, ,, double, diffMaxMin, ), throws, TooManyEvaluationsException, {, final, long, np, =, 1L, <<]
[,, double, previousStageResult, ,, double, min, ,, double, diffMaxMin, ), throws, TooManyEvaluationsException, {, final, long, np, =, 1L, <<, (]
[,, double, previousStageResult, ,, double, min, ,, double, diffMaxMin, ), throws, TooManyEvaluationsException, {, final, long, np, =, 1L, <<, (]
[previousStageResult, ,, double, min, ,, double, diffMaxMin, ), throws, TooManyEvaluationsException, {, final, long, np, =, 1L, <<, (, n, -]
[diffMaxMin, ), throws, TooManyEvaluationsException, {, final, long, np, =, 1L, <<, (, n, -, 1, ), ;, double, sum, =]
[long, np, =, 1L, <<, (, n, -, 1, ), ;, double, sum, =, 0, ;, final, double, spacing, =]
[long, np, =, 1L, <<, (, n, -, 1, ), ;, double, sum, =, 0, ;, final, double, spacing, =]
[=, 1L, <<, (, n, -, 1, ), ;, double, sum, =, 0, ;, final, double, spacing, =, diffMaxMin, /]
[-, 1, ), ;, double, sum, =, 0, ;, final, double, spacing, =, diffMaxMin, /, np, ;, double, x, =]
[-, 1, ), ;, double, sum, =, 0, ;, final, double, spacing, =, diffMaxMin, /, np, ;, double, x, =]
[), ;, double, sum, =, 0, ;, final, double, spacing, =, diffMaxMin, /, np, ;, double, x, =, min, +]
[), ;, double, sum, =, 0, ;, final, double, spacing, =, diffMaxMin, /, np, ;, double, x, =, min, +]
[double, sum, =, 0, ;, final, double, spacing, =, diffMaxMin, /, np, ;, double, x, =, min, +, 0.5, *]
[spacing, =, diffMaxMin, /, np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =]
[diffMaxMin, /, np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;]
[diffMaxMin, /, np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;]
[np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <]
[double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <, np, ;]
[double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <, np, ;]
[+, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {]
[*, spacing, ;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=]
[;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=, computeObjectiveValue, (]
[long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=, computeObjectiveValue, (, x, ), ;]
[=, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=]
[<, np, ;, i, ++, ), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return]
[<, np, ;, i, ++, ), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return]
[;, i, ++, ), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return, 0.5, *]
[i, ++, ), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return, 0.5, *, (]
[i, ++, ), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return, 0.5, *, (]
[), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return, 0.5, *, (, previousStageResult, +]
[), {, sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return, 0.5, *, (, previousStageResult, +]
[sum, +=, computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, return, 0.5, *, (, previousStageResult, +, sum, *]
[;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, double, min, =]
[), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, double, min, =, getMin, (, ), ;, final, double, diff, =]
[), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, double, min, =, getMin, (, ), ;, final, double, diff, =]
[TooManyEvaluationsException, ,, MaxCountExceededException, {, final, double, min, =, getMin, (, ), ;, final, double, diff, =, getMax, (, ), -]
[min, =, getMin, (, ), ;, final, double, diff, =, getMax, (, ), -, min, ;, final, double, midPoint, =]
[min, =, getMin, (, ), ;, final, double, diff, =, getMax, (, ), -, min, ;, final, double, midPoint, =]
[getMin, (, ), ;, final, double, diff, =, getMax, (, ), -, min, ;, final, double, midPoint, =, min, +]
[getMin, (, ), ;, final, double, diff, =, getMax, (, ), -, min, ;, final, double, midPoint, =, min, +]
[), ;, final, double, diff, =, getMax, (, ), -, min, ;, final, double, midPoint, =, min, +, 0.5, *]
[=, getMax, (, ), -, min, ;, final, double, midPoint, =, min, +, 0.5, *, diff, ;, double, oldt, =]
[=, getMax, (, ), -, min, ;, final, double, midPoint, =, min, +, 0.5, *, diff, ;, double, oldt, =]
[(, ), -, min, ;, final, double, midPoint, =, min, +, 0.5, *, diff, ;, double, oldt, =, diff, *]
[-, min, ;, final, double, midPoint, =, min, +, 0.5, *, diff, ;, double, oldt, =, diff, *, computeObjectiveValue, (]
[midPoint, =, min, +, 0.5, *, diff, ;, double, oldt, =, diff, *, computeObjectiveValue, (, midPoint, ), ;, while, (]
[+, 0.5, *, diff, ;, double, oldt, =, diff, *, computeObjectiveValue, (, midPoint, ), ;, while, (, true, ), {]
[+, 0.5, *, diff, ;, double, oldt, =, diff, *, computeObjectiveValue, (, midPoint, ), ;, while, (, true, ), {]
[computeObjectiveValue, (, midPoint, ), ;, while, (, true, ), {, iterations, ., incrementCount, (, ), ;, final, int, i, =]
[computeObjectiveValue, (, midPoint, ), ;, while, (, true, ), {, iterations, ., incrementCount, (, ), ;, final, int, i, =]
[iterations, ., incrementCount, (, ), ;, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, t, =]
[incrementCount, (, ), ;, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, t, =, stage, (]
[), ;, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, t, =, stage, (, i, ,]
[final, int, i, =, iterations, ., getCount, (, ), ;, final, double, t, =, stage, (, i, ,, oldt, ,]
[i, =, iterations, ., getCount, (, ), ;, final, double, t, =, stage, (, i, ,, oldt, ,, min, ,]
[(, ), ;, final, double, t, =, stage, (, i, ,, oldt, ,, min, ,, diff, ), ;, if, (]
[(, ), ;, final, double, t, =, stage, (, i, ,, oldt, ,, min, ,, diff, ), ;, if, (]
[;, final, double, t, =, stage, (, i, ,, oldt, ,, min, ,, diff, ), ;, if, (, i, >=]
[oldt, ,, min, ,, diff, ), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =]
[oldt, ,, min, ,, diff, ), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =]
[diff, ), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (]
[diff, ), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (]
[;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, t, -]
[), ), {, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =]
[), ), {, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =]
[), ), {, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =]
[double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *]
[delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (]
[delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (]
[delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (]
[abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (]
[-, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +]
[-, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +]
[final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (]
[getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *]
[(, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (]
[(, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (]
[FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (]
[FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (]
[abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=]
[), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||]
[+, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (]
[+, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (]
[., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=]
[0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return]
[(, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }]
[<=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =]
