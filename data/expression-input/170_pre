[;, import, java, ., util, ., logging, ., Logger, ;, public, class, ParserRunner, {, private, static, final, String, configResource, =]
[public, class, ParserRunner, {, private, static, final, String, configResource, =, "com.google.javascript.jscomp.parsing.ParserConfig", ;, private, static, Set, <, String, >, annotationNames, =]
["com.google.javascript.jscomp.parsing.ParserConfig", ;, private, static, Set, <, String, >, annotationNames, =, null, ;, private, static, Set, <, String, >, suppressionNames, =]
[null, ;, private, static, Set, <, String, >, suppressionNames, =, null, ;, private, static, Set, <, String, >, reservedVars, =]
[null, ;, private, ParserRunner, (, ), {, }, @, Deprecated, public, static, Config, createConfig, (, boolean, isIdeMode, ), {, return]
[private, ParserRunner, (, ), {, }, @, Deprecated, public, static, Config, createConfig, (, boolean, isIdeMode, ), {, return, createConfig, (]
[(, ), {, }, @, Deprecated, public, static, Config, createConfig, (, boolean, isIdeMode, ), {, return, createConfig, (, isIdeMode, ,]
[(, ), {, }, @, Deprecated, public, static, Config, createConfig, (, boolean, isIdeMode, ), {, return, createConfig, (, isIdeMode, ,]
[@, Deprecated, public, static, Config, createConfig, (, boolean, isIdeMode, ), {, return, createConfig, (, isIdeMode, ,, LanguageMode, ., ECMASCRIPT3, ,]
[false, ), ;, }, public, static, Config, createConfig, (, boolean, isIdeMode, ,, LanguageMode, languageMode, ,, boolean, acceptConstKeyword, ), {, return]
[;, }, public, static, Config, createConfig, (, boolean, isIdeMode, ,, LanguageMode, languageMode, ,, boolean, acceptConstKeyword, ), {, return, createConfig, (]
[public, static, Config, createConfig, (, boolean, isIdeMode, ,, LanguageMode, languageMode, ,, boolean, acceptConstKeyword, ), {, return, createConfig, (, isIdeMode, ,]
[Config, createConfig, (, boolean, isIdeMode, ,, LanguageMode, languageMode, ,, boolean, acceptConstKeyword, ), {, return, createConfig, (, isIdeMode, ,, languageMode, ,]
[(, boolean, isIdeMode, ,, LanguageMode, languageMode, ,, boolean, acceptConstKeyword, ), {, return, createConfig, (, isIdeMode, ,, languageMode, ,, acceptConstKeyword, ,]
[static, Config, createConfig, (, boolean, isIdeMode, ,, LanguageMode, languageMode, ,, boolean, acceptConstKeyword, ,, Set, <, String, >, extraAnnotationNames, ), {]
[,, Set, <, String, >, extraAnnotationNames, ), {, initResourceConfig, (, ), ;, Set, <, String, >, effectiveAnnotationNames, ;, if, (]
[,, Set, <, String, >, extraAnnotationNames, ), {, initResourceConfig, (, ), ;, Set, <, String, >, effectiveAnnotationNames, ;, if, (]
[<, String, >, extraAnnotationNames, ), {, initResourceConfig, (, ), ;, Set, <, String, >, effectiveAnnotationNames, ;, if, (, extraAnnotationNames, ==]
[extraAnnotationNames, ), {, initResourceConfig, (, ), ;, Set, <, String, >, effectiveAnnotationNames, ;, if, (, extraAnnotationNames, ==, null, ), {]
[{, initResourceConfig, (, ), ;, Set, <, String, >, effectiveAnnotationNames, ;, if, (, extraAnnotationNames, ==, null, ), {, effectiveAnnotationNames, =]
[Set, <, String, >, effectiveAnnotationNames, ;, if, (, extraAnnotationNames, ==, null, ), {, effectiveAnnotationNames, =, annotationNames, ;, }, else, {]
[String, >, effectiveAnnotationNames, ;, if, (, extraAnnotationNames, ==, null, ), {, effectiveAnnotationNames, =, annotationNames, ;, }, else, {, effectiveAnnotationNames, =]
[extraAnnotationNames, ==, null, ), {, effectiveAnnotationNames, =, annotationNames, ;, }, else, {, effectiveAnnotationNames, =, new, HashSet, <, String, >, (]
[), {, effectiveAnnotationNames, =, annotationNames, ;, }, else, {, effectiveAnnotationNames, =, new, HashSet, <, String, >, (, annotationNames, ), ;]
[), {, effectiveAnnotationNames, =, annotationNames, ;, }, else, {, effectiveAnnotationNames, =, new, HashSet, <, String, >, (, annotationNames, ), ;]
[annotationNames, ;, }, else, {, effectiveAnnotationNames, =, new, HashSet, <, String, >, (, annotationNames, ), ;, effectiveAnnotationNames, ., addAll, (]
[effectiveAnnotationNames, =, new, HashSet, <, String, >, (, annotationNames, ), ;, effectiveAnnotationNames, ., addAll, (, extraAnnotationNames, ), ;, }, return]
[HashSet, <, String, >, (, annotationNames, ), ;, effectiveAnnotationNames, ., addAll, (, extraAnnotationNames, ), ;, }, return, new, Config, (]
[String, >, (, annotationNames, ), ;, effectiveAnnotationNames, ., addAll, (, extraAnnotationNames, ), ;, }, return, new, Config, (, effectiveAnnotationNames, ,]
[(, annotationNames, ), ;, effectiveAnnotationNames, ., addAll, (, extraAnnotationNames, ), ;, }, return, new, Config, (, effectiveAnnotationNames, ,, suppressionNames, ,]
[), ;, effectiveAnnotationNames, ., addAll, (, extraAnnotationNames, ), ;, }, return, new, Config, (, effectiveAnnotationNames, ,, suppressionNames, ,, isIdeMode, ,]
[effectiveAnnotationNames, ., addAll, (, extraAnnotationNames, ), ;, }, return, new, Config, (, effectiveAnnotationNames, ,, suppressionNames, ,, isIdeMode, ,, languageMode, ,]
[suppressionNames, ,, isIdeMode, ,, languageMode, ,, acceptConstKeyword, ), ;, }, public, static, Set, <, String, >, getReservedVars, (, ), {]
[,, acceptConstKeyword, ), ;, }, public, static, Set, <, String, >, getReservedVars, (, ), {, initResourceConfig, (, ), ;, return]
[), {, initResourceConfig, (, ), ;, return, reservedVars, ;, }, private, static, synchronized, void, initResourceConfig, (, ), {, if, (]
[), {, initResourceConfig, (, ), ;, return, reservedVars, ;, }, private, static, synchronized, void, initResourceConfig, (, ), {, if, (]
[initResourceConfig, (, ), ;, return, reservedVars, ;, }, private, static, synchronized, void, initResourceConfig, (, ), {, if, (, annotationNames, !=]
[static, synchronized, void, initResourceConfig, (, ), {, if, (, annotationNames, !=, null, ), {, return, ;, }, ResourceBundle, config, =]
[static, synchronized, void, initResourceConfig, (, ), {, if, (, annotationNames, !=, null, ), {, return, ;, }, ResourceBundle, config, =]
[(, ), {, if, (, annotationNames, !=, null, ), {, return, ;, }, ResourceBundle, config, =, ResourceBundle, ., getBundle, (]
[if, (, annotationNames, !=, null, ), {, return, ;, }, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, configResource, ), ;]
[annotationNames, !=, null, ), {, return, ;, }, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, configResource, ), ;, annotationNames, =]
[null, ), {, return, ;, }, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, configResource, ), ;, annotationNames, =, extractList, (]
[null, ), {, return, ;, }, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, configResource, ), ;, annotationNames, =, extractList, (]
[;, }, ResourceBundle, config, =, ResourceBundle, ., getBundle, (, configResource, ), ;, annotationNames, =, extractList, (, config, ., getString, (]
[=, ResourceBundle, ., getBundle, (, configResource, ), ;, annotationNames, =, extractList, (, config, ., getString, (, "jsdoc.annotations", ), ), ;]
[., getBundle, (, configResource, ), ;, annotationNames, =, extractList, (, config, ., getString, (, "jsdoc.annotations", ), ), ;, suppressionNames, =]
[(, configResource, ), ;, annotationNames, =, extractList, (, config, ., getString, (, "jsdoc.annotations", ), ), ;, suppressionNames, =, extractList, (]
[(, configResource, ), ;, annotationNames, =, extractList, (, config, ., getString, (, "jsdoc.annotations", ), ), ;, suppressionNames, =, extractList, (]
[annotationNames, =, extractList, (, config, ., getString, (, "jsdoc.annotations", ), ), ;, suppressionNames, =, extractList, (, config, ., getString, (]
[config, ., getString, (, "jsdoc.annotations", ), ), ;, suppressionNames, =, extractList, (, config, ., getString, (, "jsdoc.suppressions", ), ), ;]
[getString, (, "jsdoc.annotations", ), ), ;, suppressionNames, =, extractList, (, config, ., getString, (, "jsdoc.suppressions", ), ), ;, reservedVars, =]
["jsdoc.annotations", ), ), ;, suppressionNames, =, extractList, (, config, ., getString, (, "jsdoc.suppressions", ), ), ;, reservedVars, =, extractList, (]
["jsdoc.annotations", ), ), ;, suppressionNames, =, extractList, (, config, ., getString, (, "jsdoc.suppressions", ), ), ;, reservedVars, =, extractList, (]
[suppressionNames, =, extractList, (, config, ., getString, (, "jsdoc.suppressions", ), ), ;, reservedVars, =, extractList, (, config, ., getString, (]
[), ;, }, private, static, Set, <, String, >, extractList, (, String, configProp, ), {, String, [, ], names, =]
[), ;, }, private, static, Set, <, String, >, extractList, (, String, configProp, ), {, String, [, ], names, =]
[static, Set, <, String, >, extractList, (, String, configProp, ), {, String, [, ], names, =, configProp, ., split, (]
[), {, String, [, ], names, =, configProp, ., split, (, ",", ), ;, Set, <, String, >, trimmedNames, =]
[), {, String, [, ], names, =, configProp, ., split, (, ",", ), ;, Set, <, String, >, trimmedNames, =]
[",", ), ;, Set, <, String, >, trimmedNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, name, :]
[Set, <, String, >, trimmedNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, name, :, names, ), {]
[Set, <, String, >, trimmedNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, name, :, names, ), {]
[trimmedNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, name, :, names, ), {, trimmedNames, ., add, (]
[trimmedNames, =, Sets, ., newHashSet, (, ), ;, for, (, String, name, :, names, ), {, trimmedNames, ., add, (]
[(, String, name, :, names, ), {, trimmedNames, ., add, (, name, ., trim, (, ), ), ;, }, return]
[(, String, name, :, names, ), {, trimmedNames, ., add, (, name, ., trim, (, ), ), ;, }, return]
[names, ), {, trimmedNames, ., add, (, name, ., trim, (, ), ), ;, }, return, ImmutableSet, ., copyOf, (]
[sourceFile, ,, String, sourceString, ,, Config, config, ,, ErrorReporter, errorReporter, ,, Logger, logger, ), throws, IOException, {, Context, cx, =]
[sourceFile, ,, String, sourceString, ,, Config, config, ,, ErrorReporter, errorReporter, ,, Logger, logger, ), throws, IOException, {, Context, cx, =]
[config, ,, ErrorReporter, errorReporter, ,, Logger, logger, ), throws, IOException, {, Context, cx, =, Context, ., enter, (, ), ;]
[config, ,, ErrorReporter, errorReporter, ,, Logger, logger, ), throws, IOException, {, Context, cx, =, Context, ., enter, (, ), ;]
[,, Logger, logger, ), throws, IOException, {, Context, cx, =, Context, ., enter, (, ), ;, cx, ., setErrorReporter, (]
[), throws, IOException, {, Context, cx, =, Context, ., enter, (, ), ;, cx, ., setErrorReporter, (, errorReporter, ), ;]
[), throws, IOException, {, Context, cx, =, Context, ., enter, (, ), ;, cx, ., setErrorReporter, (, errorReporter, ), ;]
[Context, cx, =, Context, ., enter, (, ), ;, cx, ., setErrorReporter, (, errorReporter, ), ;, cx, ., setLanguageVersion, (]
[Context, cx, =, Context, ., enter, (, ), ;, cx, ., setErrorReporter, (, errorReporter, ), ;, cx, ., setLanguageVersion, (]
[;, cx, ., setErrorReporter, (, errorReporter, ), ;, cx, ., setLanguageVersion, (, Context, ., VERSION_1_5, ), ;, CompilerEnvirons, compilerEnv, =]
[errorReporter, ), ;, cx, ., setLanguageVersion, (, Context, ., VERSION_1_5, ), ;, CompilerEnvirons, compilerEnv, =, new, CompilerEnvirons, (, ), ;]
[errorReporter, ), ;, cx, ., setLanguageVersion, (, Context, ., VERSION_1_5, ), ;, CompilerEnvirons, compilerEnv, =, new, CompilerEnvirons, (, ), ;]
[., setLanguageVersion, (, Context, ., VERSION_1_5, ), ;, CompilerEnvirons, compilerEnv, =, new, CompilerEnvirons, (, ), ;, compilerEnv, ., initFromContext, (]
[Context, ., VERSION_1_5, ), ;, CompilerEnvirons, compilerEnv, =, new, CompilerEnvirons, (, ), ;, compilerEnv, ., initFromContext, (, cx, ), ;]
[Context, ., VERSION_1_5, ), ;, CompilerEnvirons, compilerEnv, =, new, CompilerEnvirons, (, ), ;, compilerEnv, ., initFromContext, (, cx, ), ;]
[;, CompilerEnvirons, compilerEnv, =, new, CompilerEnvirons, (, ), ;, compilerEnv, ., initFromContext, (, cx, ), ;, compilerEnv, ., setRecordingComments, (]
[=, new, CompilerEnvirons, (, ), ;, compilerEnv, ., initFromContext, (, cx, ), ;, compilerEnv, ., setRecordingComments, (, true, ), ;]
[=, new, CompilerEnvirons, (, ), ;, compilerEnv, ., initFromContext, (, cx, ), ;, compilerEnv, ., setRecordingComments, (, true, ), ;]
[), ;, compilerEnv, ., initFromContext, (, cx, ), ;, compilerEnv, ., setRecordingComments, (, true, ), ;, compilerEnv, ., setRecordingLocalJsDocComments, (]
[., initFromContext, (, cx, ), ;, compilerEnv, ., setRecordingComments, (, true, ), ;, compilerEnv, ., setRecordingLocalJsDocComments, (, true, ), ;]
[., initFromContext, (, cx, ), ;, compilerEnv, ., setRecordingComments, (, true, ), ;, compilerEnv, ., setRecordingLocalJsDocComments, (, true, ), ;]
[), ;, compilerEnv, ., setRecordingComments, (, true, ), ;, compilerEnv, ., setRecordingLocalJsDocComments, (, true, ), ;, compilerEnv, ., setWarnTrailingComma, (]
[), ;, compilerEnv, ., setRecordingComments, (, true, ), ;, compilerEnv, ., setRecordingLocalJsDocComments, (, true, ), ;, compilerEnv, ., setWarnTrailingComma, (]
[), ;, compilerEnv, ., setRecordingComments, (, true, ), ;, compilerEnv, ., setRecordingLocalJsDocComments, (, true, ), ;, compilerEnv, ., setWarnTrailingComma, (]
[setRecordingComments, (, true, ), ;, compilerEnv, ., setRecordingLocalJsDocComments, (, true, ), ;, compilerEnv, ., setWarnTrailingComma, (, config, ., languageMode, ==]
[setRecordingComments, (, true, ), ;, compilerEnv, ., setRecordingLocalJsDocComments, (, true, ), ;, compilerEnv, ., setWarnTrailingComma, (, config, ., languageMode, ==]
[(, true, ), ;, compilerEnv, ., setWarnTrailingComma, (, config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3, ), ;, boolean, acceptEs5, =]
[(, true, ), ;, compilerEnv, ., setWarnTrailingComma, (, config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3, ), ;, boolean, acceptEs5, =]
[(, true, ), ;, compilerEnv, ., setWarnTrailingComma, (, config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3, ), ;, boolean, acceptEs5, =]
[compilerEnv, ., setWarnTrailingComma, (, config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3, ), ;, boolean, acceptEs5, =, config, ., isIdeMode, ||]
[compilerEnv, ., setWarnTrailingComma, (, config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3, ), ;, boolean, acceptEs5, =, config, ., isIdeMode, ||]
[compilerEnv, ., setWarnTrailingComma, (, config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3, ), ;, boolean, acceptEs5, =, config, ., isIdeMode, ||]
[config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3, ), ;, boolean, acceptEs5, =, config, ., isIdeMode, ||, config, ., languageMode, !=]
[config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3, ), ;, boolean, acceptEs5, =, config, ., isIdeMode, ||, config, ., languageMode, !=]
[LanguageMode, ., ECMASCRIPT3, ), ;, boolean, acceptEs5, =, config, ., isIdeMode, ||, config, ., languageMode, !=, LanguageMode, ., ECMASCRIPT3, ;]
[LanguageMode, ., ECMASCRIPT3, ), ;, boolean, acceptEs5, =, config, ., isIdeMode, ||, config, ., languageMode, !=, LanguageMode, ., ECMASCRIPT3, ;]
[;, boolean, acceptEs5, =, config, ., isIdeMode, ||, config, ., languageMode, !=, LanguageMode, ., ECMASCRIPT3, ;, compilerEnv, ., setReservedKeywordAsIdentifier, (]
[=, config, ., isIdeMode, ||, config, ., languageMode, !=, LanguageMode, ., ECMASCRIPT3, ;, compilerEnv, ., setReservedKeywordAsIdentifier, (, acceptEs5, ), ;]
[=, config, ., isIdeMode, ||, config, ., languageMode, !=, LanguageMode, ., ECMASCRIPT3, ;, compilerEnv, ., setReservedKeywordAsIdentifier, (, acceptEs5, ), ;]
[||, config, ., languageMode, !=, LanguageMode, ., ECMASCRIPT3, ;, compilerEnv, ., setReservedKeywordAsIdentifier, (, acceptEs5, ), ;, compilerEnv, ., setAllowMemberExprAsFunctionName, (]
[languageMode, !=, LanguageMode, ., ECMASCRIPT3, ;, compilerEnv, ., setReservedKeywordAsIdentifier, (, acceptEs5, ), ;, compilerEnv, ., setAllowMemberExprAsFunctionName, (, false, ), ;]
[languageMode, !=, LanguageMode, ., ECMASCRIPT3, ;, compilerEnv, ., setReservedKeywordAsIdentifier, (, acceptEs5, ), ;, compilerEnv, ., setAllowMemberExprAsFunctionName, (, false, ), ;]
[ECMASCRIPT3, ;, compilerEnv, ., setReservedKeywordAsIdentifier, (, acceptEs5, ), ;, compilerEnv, ., setAllowMemberExprAsFunctionName, (, false, ), ;, compilerEnv, ., setIdeMode, (]
[ECMASCRIPT3, ;, compilerEnv, ., setReservedKeywordAsIdentifier, (, acceptEs5, ), ;, compilerEnv, ., setAllowMemberExprAsFunctionName, (, false, ), ;, compilerEnv, ., setIdeMode, (]
[(, acceptEs5, ), ;, compilerEnv, ., setAllowMemberExprAsFunctionName, (, false, ), ;, compilerEnv, ., setIdeMode, (, config, ., isIdeMode, ), ;]
[(, acceptEs5, ), ;, compilerEnv, ., setAllowMemberExprAsFunctionName, (, false, ), ;, compilerEnv, ., setIdeMode, (, config, ., isIdeMode, ), ;]
[compilerEnv, ., setAllowMemberExprAsFunctionName, (, false, ), ;, compilerEnv, ., setIdeMode, (, config, ., isIdeMode, ), ;, compilerEnv, ., setRecoverFromErrors, (]
[compilerEnv, ., setAllowMemberExprAsFunctionName, (, false, ), ;, compilerEnv, ., setIdeMode, (, config, ., isIdeMode, ), ;, compilerEnv, ., setRecoverFromErrors, (]
[., setIdeMode, (, config, ., isIdeMode, ), ;, compilerEnv, ., setRecoverFromErrors, (, config, ., isIdeMode, ), ;, Parser, p, =]
[config, ., isIdeMode, ), ;, compilerEnv, ., setRecoverFromErrors, (, config, ., isIdeMode, ), ;, Parser, p, =, new, Parser, (]
[isIdeMode, ), ;, compilerEnv, ., setRecoverFromErrors, (, config, ., isIdeMode, ), ;, Parser, p, =, new, Parser, (, compilerEnv, ,]
[(, config, ., isIdeMode, ), ;, Parser, p, =, new, Parser, (, compilerEnv, ,, errorReporter, ), ;, AstRoot, astRoot, =]
[), ;, Parser, p, =, new, Parser, (, compilerEnv, ,, errorReporter, ), ;, AstRoot, astRoot, =, null, ;, try, {]
[Parser, p, =, new, Parser, (, compilerEnv, ,, errorReporter, ), ;, AstRoot, astRoot, =, null, ;, try, {, astRoot, =]
[Parser, p, =, new, Parser, (, compilerEnv, ,, errorReporter, ), ;, AstRoot, astRoot, =, null, ;, try, {, astRoot, =]
[Parser, (, compilerEnv, ,, errorReporter, ), ;, AstRoot, astRoot, =, null, ;, try, {, astRoot, =, p, ., parse, (]
[compilerEnv, ,, errorReporter, ), ;, AstRoot, astRoot, =, null, ;, try, {, astRoot, =, p, ., parse, (, sourceString, ,]
[compilerEnv, ,, errorReporter, ), ;, AstRoot, astRoot, =, null, ;, try, {, astRoot, =, p, ., parse, (, sourceString, ,]
[astRoot, =, null, ;, try, {, astRoot, =, p, ., parse, (, sourceString, ,, sourceFile, ., getName, (, ), ,]
[parse, (, sourceString, ,, sourceFile, ., getName, (, ), ,, 1, ), ;, }, catch, (, EvaluatorException, e, ), {]
[parse, (, sourceString, ,, sourceFile, ., getName, (, ), ,, 1, ), ;, }, catch, (, EvaluatorException, e, ), {]
[sourceFile, ., getName, (, ), ,, 1, ), ;, }, catch, (, EvaluatorException, e, ), {, logger, ., info, (]
[sourceFile, ., getName, (, ), ,, 1, ), ;, }, catch, (, EvaluatorException, e, ), {, logger, ., info, (]
[sourceFile, ., getName, (, ), ,, 1, ), ;, }, catch, (, EvaluatorException, e, ), {, logger, ., info, (]
[sourceFile, ., getName, (, ), ,, 1, ), ;, }, catch, (, EvaluatorException, e, ), {, logger, ., info, (]
[getName, (, ), ,, 1, ), ;, }, catch, (, EvaluatorException, e, ), {, logger, ., info, (, "Error parsing ", +]
[getName, (, ), ,, 1, ), ;, }, catch, (, EvaluatorException, e, ), {, logger, ., info, (, "Error parsing ", +]
[;, }, catch, (, EvaluatorException, e, ), {, logger, ., info, (, "Error parsing ", +, sourceFile, ., getName, (, ), +]
[catch, (, EvaluatorException, e, ), {, logger, ., info, (, "Error parsing ", +, sourceFile, ., getName, (, ), +, ": ", +]
[catch, (, EvaluatorException, e, ), {, logger, ., info, (, "Error parsing ", +, sourceFile, ., getName, (, ), +, ": ", +]
["Error parsing ", +, sourceFile, ., getName, (, ), +, ": ", +, e, ., getMessage, (, ), ), ;, }, finally, {]
["Error parsing ", +, sourceFile, ., getName, (, ), +, ": ", +, e, ., getMessage, (, ), ), ;, }, finally, {]
[e, ., getMessage, (, ), ), ;, }, finally, {, Context, ., exit, (, ), ;, }, Node, root, =]
[), ), ;, }, finally, {, Context, ., exit, (, ), ;, }, Node, root, =, null, ;, if, (]
[), ), ;, }, finally, {, Context, ., exit, (, ), ;, }, Node, root, =, null, ;, if, (]
[;, }, finally, {, Context, ., exit, (, ), ;, }, Node, root, =, null, ;, if, (, astRoot, !=]
[{, Context, ., exit, (, ), ;, }, Node, root, =, null, ;, if, (, astRoot, !=, null, ), {]
[., exit, (, ), ;, }, Node, root, =, null, ;, if, (, astRoot, !=, null, ), {, root, =]
[., exit, (, ), ;, }, Node, root, =, null, ;, if, (, astRoot, !=, null, ), {, root, =]
[;, }, Node, root, =, null, ;, if, (, astRoot, !=, null, ), {, root, =, IRFactory, ., transformTree, (]
[Node, root, =, null, ;, if, (, astRoot, !=, null, ), {, root, =, IRFactory, ., transformTree, (, astRoot, ,]
[=, null, ;, if, (, astRoot, !=, null, ), {, root, =, IRFactory, ., transformTree, (, astRoot, ,, sourceFile, ,]
[;, if, (, astRoot, !=, null, ), {, root, =, IRFactory, ., transformTree, (, astRoot, ,, sourceFile, ,, sourceString, ,]
[(, astRoot, !=, null, ), {, root, =, IRFactory, ., transformTree, (, astRoot, ,, sourceFile, ,, sourceString, ,, config, ,]
[null, ), {, root, =, IRFactory, ., transformTree, (, astRoot, ,, sourceFile, ,, sourceString, ,, config, ,, errorReporter, ), ;]
[null, ), {, root, =, IRFactory, ., transformTree, (, astRoot, ,, sourceFile, ,, sourceString, ,, config, ,, errorReporter, ), ;]
[=, IRFactory, ., transformTree, (, astRoot, ,, sourceFile, ,, sourceString, ,, config, ,, errorReporter, ), ;, root, ., setIsSyntheticBlock, (]
[astRoot, ,, sourceFile, ,, sourceString, ,, config, ,, errorReporter, ), ;, root, ., setIsSyntheticBlock, (, true, ), ;, }, return]
[,, sourceString, ,, config, ,, errorReporter, ), ;, root, ., setIsSyntheticBlock, (, true, ), ;, }, return, new, ParseResult, (]
[,, config, ,, errorReporter, ), ;, root, ., setIsSyntheticBlock, (, true, ), ;, }, return, new, ParseResult, (, root, ,]
[public, final, Node, ast, ;, public, final, AstRoot, oldAst, ;, public, ParseResult, (, Node, ast, ,, AstRoot, oldAst, ), {]
[public, final, Node, ast, ;, public, final, AstRoot, oldAst, ;, public, ParseResult, (, Node, ast, ,, AstRoot, oldAst, ), {]
[;, public, final, AstRoot, oldAst, ;, public, ParseResult, (, Node, ast, ,, AstRoot, oldAst, ), {, this, ., ast, =]
[final, AstRoot, oldAst, ;, public, ParseResult, (, Node, ast, ,, AstRoot, oldAst, ), {, this, ., ast, =, ast, ;]
[final, AstRoot, oldAst, ;, public, ParseResult, (, Node, ast, ,, AstRoot, oldAst, ), {, this, ., ast, =, ast, ;]
[public, ParseResult, (, Node, ast, ,, AstRoot, oldAst, ), {, this, ., ast, =, ast, ;, this, ., oldAst, =]
