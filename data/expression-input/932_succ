[;, private, static, final, RealVectorFormat, DEFAULT_FORMAT, =, RealVectorFormat, ., getInstance, (, ), ;, private, double, data, [, ], ;, public]
[;, private, static, final, RealVectorFormat, DEFAULT_FORMAT, =, RealVectorFormat, ., getInstance, (, ), ;, private, double, data, [, ], ;, public]
[;, private, double, data, [, ], ;, public, ArrayRealVector, (, ), {, data, =, new, double, [, 0, ], ;]
[., getInstance, (, ), ;, private, double, data, [, ], ;, public, ArrayRealVector, (, ), {, data, =, new, double]
[=, new, double, [, 0, ], ;, }, public, ArrayRealVector, (, int, size, ), {, data, =, new, double, []
[;, }, public, ArrayRealVector, (, int, size, ), {, data, =, new, double, [, size, ], ;, }, public, ArrayRealVector]
[], ;, }, public, ArrayRealVector, (, int, size, ), {, data, =, new, double, [, size, ], ;, }, public]
[=, new, double, [, size, ], ;, }, public, ArrayRealVector, (, int, size, ,, double, preset, ), {, data, =]
[;, }, public, ArrayRealVector, (, int, size, ,, double, preset, ), {, data, =, new, double, [, size, ], ;]
[], ;, }, public, ArrayRealVector, (, int, size, ,, double, preset, ), {, data, =, new, double, [, size, ]]
[=, new, double, [, size, ], ;, Arrays, ., fill, (, data, ,, preset, ), ;, }, public, ArrayRealVector, (]
[;, Arrays, ., fill, (, data, ,, preset, ), ;, }, public, ArrayRealVector, (, double, [, ], d, ), {]
[], ;, Arrays, ., fill, (, data, ,, preset, ), ;, }, public, ArrayRealVector, (, double, [, ], d, )]
[;, }, public, ArrayRealVector, (, double, [, ], d, ), {, data, =, d, ., clone, (, ), ;, }]
[., fill, (, data, ,, preset, ), ;, }, public, ArrayRealVector, (, double, [, ], d, ), {, data, =]
[,, preset, ), ;, }, public, ArrayRealVector, (, double, [, ], d, ), {, data, =, d, ., clone, (]
[), ;, }, public, ArrayRealVector, (, double, [, ], d, ), {, data, =, d, ., clone, (, ), ;]
[=, d, ., clone, (, ), ;, }, public, ArrayRealVector, (, double, [, ], d, ,, boolean, copyArray, ), throws]
[;, }, public, ArrayRealVector, (, double, [, ], d, ,, boolean, copyArray, ), throws, NullArgumentException, {, if, (, d, ==]
[., clone, (, ), ;, }, public, ArrayRealVector, (, double, [, ], d, ,, boolean, copyArray, ), throws, NullArgumentException, {]
[), {, throw, new, NullArgumentException, (, ), ;, }, data, =, copyArray, ?, d, ., clone, (, ), :, d]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, data, =, copyArray, ?, d, ., clone, (, )]
[), {, throw, new, NullArgumentException, (, ), ;, }, data, =, copyArray, ?, d, ., clone, (, ), :, d]
[;, }, data, =, copyArray, ?, d, ., clone, (, ), :, d, ;, }, public, ArrayRealVector, (, double, []
[=, copyArray, ?, d, ., clone, (, ), :, d, ;, }, public, ArrayRealVector, (, double, [, ], d, ,]
[;, }, public, ArrayRealVector, (, double, [, ], d, ,, int, pos, ,, int, size, ), throws, NullArgumentException, ,, NumberIsTooLargeException]
[?, d, ., clone, (, ), :, d, ;, }, public, ArrayRealVector, (, double, [, ], d, ,, int, pos]
[:, d, ;, }, public, ArrayRealVector, (, double, [, ], d, ,, int, pos, ,, int, size, ), throws, NullArgumentException]
[., clone, (, ), :, d, ;, }, public, ArrayRealVector, (, double, [, ], d, ,, int, pos, ,, int]
[;, }, public, ArrayRealVector, (, double, [, ], d, ,, int, pos, ,, int, size, ), throws, NullArgumentException, ,, NumberIsTooLargeException]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +, size, ), {]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +, size]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +, size, ), {]
[;, }, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, data, =]
[<, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, )]
[., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, data, =]
[+, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, data, =]
[;, }, data, =, new, double, [, size, ], ;, System, ., arraycopy, (, d, ,, pos, ,, data, ,]
[,, d, ., length, ,, true, ), ;, }, data, =, new, double, [, size, ], ;, System, ., arraycopy]
[+, size, ,, d, ., length, ,, true, ), ;, }, data, =, new, double, [, size, ], ;, System]
[,, d, ., length, ,, true, ), ;, }, data, =, new, double, [, size, ], ;, System, ., arraycopy]
[,, true, ), ;, }, data, =, new, double, [, size, ], ;, System, ., arraycopy, (, d, ,, pos]
[., length, ,, true, ), ;, }, data, =, new, double, [, size, ], ;, System, ., arraycopy, (, d]
[), ;, }, data, =, new, double, [, size, ], ;, System, ., arraycopy, (, d, ,, pos, ,, data]
[=, new, double, [, size, ], ;, System, ., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,, size]
[;, System, ., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,, size, ), ;, }, public, ArrayRealVector, (]
[], ;, System, ., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,, size, ), ;, }, public, ArrayRealVector]
[;, }, public, ArrayRealVector, (, Double, [, ], d, ), {, data, =, new, double, [, d, ., length, ]]
[., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,, size, ), ;, }, public, ArrayRealVector, (, Double, []
[,, pos, ,, data, ,, 0, ,, size, ), ;, }, public, ArrayRealVector, (, Double, [, ], d, ), {]
[,, data, ,, 0, ,, size, ), ;, }, public, ArrayRealVector, (, Double, [, ], d, ), {, data, =]
[,, 0, ,, size, ), ;, }, public, ArrayRealVector, (, Double, [, ], d, ), {, data, =, new, double]
[,, size, ), ;, }, public, ArrayRealVector, (, Double, [, ], d, ), {, data, =, new, double, [, d]
[), ;, }, public, ArrayRealVector, (, Double, [, ], d, ), {, data, =, new, double, [, d, ., length]
[=, new, double, [, d, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, d, .]
[;, for, (, int, i, =, 0, ;, i, <, d, ., length, ;, i, ++, ), {, data, []
[], ;, for, (, int, i, =, 0, ;, i, <, d, ., length, ;, i, ++, ), {, data]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, d, ., length, ;, i, ++, )]
[;, i, <, d, ., length, ;, i, ++, ), {, data, [, i, ], =, d, [, i, ]]
[;, i, ++, ), {, data, [, i, ], =, d, [, i, ], ., doubleValue, (, ), ;, }]
[<, d, ., length, ;, i, ++, ), {, data, [, i, ], =, d, [, i, ], ., doubleValue]
[;, i, ++, ), {, data, [, i, ], =, d, [, i, ], ., doubleValue, (, ), ;, }]
[., length, ;, i, ++, ), {, data, [, i, ], =, d, [, i, ], ., doubleValue, (, )]
[), {, data, [, i, ], =, d, [, i, ], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector]
[++, ), {, data, [, i, ], =, d, [, i, ], ., doubleValue, (, ), ;, }, }, public]
[=, d, [, i, ], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, Double, [, ], d, ,]
[[, i, ], =, d, [, i, ], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, Double, []
[], =, d, [, i, ], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, Double, [, ], d]
[;, }, }, public, ArrayRealVector, (, Double, [, ], d, ,, int, pos, ,, int, size, ), throws, NullArgumentException, ,]
[., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, Double, [, ], d, ,, int, pos, ,, int, size]
[[, i, ], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, Double, [, ], d, ,, int, pos]
[], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, Double, [, ], d, ,, int, pos, ,, int]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +, size, ), {]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +, size]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +, size, ), {]
[;, }, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, data, =]
[<, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, )]
[., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, data, =]
[+, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, data, =]
[;, }, data, =, new, double, [, size, ], ;, for, (, int, i, =, pos, ;, i, <, pos]
[,, d, ., length, ,, true, ), ;, }, data, =, new, double, [, size, ], ;, for, (, int]
[+, size, ,, d, ., length, ,, true, ), ;, }, data, =, new, double, [, size, ], ;, for]
[,, d, ., length, ,, true, ), ;, }, data, =, new, double, [, size, ], ;, for, (, int]
[,, true, ), ;, }, data, =, new, double, [, size, ], ;, for, (, int, i, =, pos, ;]
[., length, ,, true, ), ;, }, data, =, new, double, [, size, ], ;, for, (, int, i, =]
[), ;, }, data, =, new, double, [, size, ], ;, for, (, int, i, =, pos, ;, i, <]
[=, new, double, [, size, ], ;, for, (, int, i, =, pos, ;, i, <, pos, +, size, ;]
[;, for, (, int, i, =, pos, ;, i, <, pos, +, size, ;, i, ++, ), {, data, []
[], ;, for, (, int, i, =, pos, ;, i, <, pos, +, size, ;, i, ++, ), {, data]
[;, i, <, pos, +, size, ;, i, ++, ), {, data, [, i, -, pos, ], =, d, []
[;, i, ++, ), {, data, [, i, -, pos, ], =, d, [, i, ], ., doubleValue, (, )]
[<, pos, +, size, ;, i, ++, ), {, data, [, i, -, pos, ], =, d, [, i, ]]
[;, i, ++, ), {, data, [, i, -, pos, ], =, d, [, i, ], ., doubleValue, (, )]
[+, size, ;, i, ++, ), {, data, [, i, -, pos, ], =, d, [, i, ], ., doubleValue]
[;, i, ++, ), {, data, [, i, -, pos, ], =, d, [, i, ], ., doubleValue, (, )]
[), {, data, [, i, -, pos, ], =, d, [, i, ], ., doubleValue, (, ), ;, }, }]
[++, ), {, data, [, i, -, pos, ], =, d, [, i, ], ., doubleValue, (, ), ;, }]
[=, d, [, i, ], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, RealVector, v, ), throws, NullArgumentException]
[[, i, -, pos, ], =, d, [, i, ], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (]
[], =, d, [, i, ], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, RealVector, v, ), throws]
[-, pos, ], =, d, [, i, ], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, RealVector, v]
[], =, d, [, i, ], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, RealVector, v, ), throws]
[;, }, }, public, ArrayRealVector, (, RealVector, v, ), throws, NullArgumentException, {, if, (, v, ==, null, ), {, throw]
[., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, RealVector, v, ), throws, NullArgumentException, {, if, (, v, ==]
[[, i, ], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, RealVector, v, ), throws, NullArgumentException, {, if]
[], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, RealVector, v, ), throws, NullArgumentException, {, if, (, v]
[), {, throw, new, NullArgumentException, (, ), ;, }, data, =, new, double, [, v, ., getDimension, (, ), ]]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, data, =, new, double, [, v, ., getDimension, (]
[), {, throw, new, NullArgumentException, (, ), ;, }, data, =, new, double, [, v, ., getDimension, (, ), ]]
[;, }, data, =, new, double, [, v, ., getDimension, (, ), ], ;, for, (, int, i, =, 0]
[=, new, double, [, v, ., getDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, data, []
[], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, data]
[., getDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[;, i, <, data, ., length, ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (]
[;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, ), ;, }, }, public]
[<, data, ., length, ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, )]
[;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, ), ;, }, }, public]
[., length, ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, ), ;, }]
[), {, data, [, i, ], =, v, ., getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, ArrayRealVector]
[), {, data, [, i, ], =, v, ., getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, ArrayRealVector]
[=, v, ., getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, ArrayRealVector, v, ), throws, NullArgumentException, {, this]
[[, i, ], =, v, ., getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, ArrayRealVector, v, ), throws]
[], =, v, ., getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, ArrayRealVector, v, ), throws, NullArgumentException, {]
[;, }, }, public, ArrayRealVector, (, ArrayRealVector, v, ), throws, NullArgumentException, {, this, (, v, ,, true, ), ;, }]
[., getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, ArrayRealVector, v, ), throws, NullArgumentException, {, this, (, v]
[), ;, }, }, public, ArrayRealVector, (, ArrayRealVector, v, ), throws, NullArgumentException, {, this, (, v, ,, true, ), ;]
[,, true, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v, ,, boolean, deep, ), {, data, =, deep, ?, v]
[), ;, }, public, ArrayRealVector, (, ArrayRealVector, v, ,, boolean, deep, ), {, data, =, deep, ?, v, ., data]
[=, deep, ?, v, ., data, ., clone, (, ), :, v, ., data, ;, }, public, ArrayRealVector, (, ArrayRealVector]
[;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {, data, =, new, double, [, v1, ., data]
[?, v, ., data, ., clone, (, ), :, v, ., data, ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,]
[:, v, ., data, ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {, data, =, new, double]
[., clone, (, ), :, v, ., data, ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {]
[., data, ., clone, (, ), :, v, ., data, ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2]
[;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {, data, =, new, double, [, v1, ., data]
[., data, ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {, data, =, new, double, [, v1]
[=, new, double, [, v1, ., data, ., length, +, v2, ., data, ., length, ], ;, System, ., arraycopy]
[;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, v1, ., data, ., length]
[], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, v1, ., data, .]
[+, v2, ., data, ., length, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,]
[., length, +, v2, ., data, ., length, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,]
[., data, ., length, +, v2, ., data, ., length, ], ;, System, ., arraycopy, (, v1, ., data, ,]
[], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, v1, ., data, .]
[., length, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, v1, .]
[., data, ., length, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,]
[;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, v1, ., data, ., length, ,, v2]
[., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, v1, ., data, ., length, ), ;]
[,, 0, ,, data, ,, 0, ,, v1, ., data, ., length, ), ;, System, ., arraycopy, (, v2, .]
[., data, ,, 0, ,, data, ,, 0, ,, v1, ., data, ., length, ), ;, System, ., arraycopy, (]
[,, data, ,, 0, ,, v1, ., data, ., length, ), ;, System, ., arraycopy, (, v2, ., data, ,]
[,, 0, ,, v1, ., data, ., length, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,]
[,, v1, ., data, ., length, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,]
[), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, v1, ., data, ., length, ,]
[., length, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, v1, ., data, .]
[., data, ., length, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, v1, .]
[;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, RealVector, v2, ), {, final, int, l1, =, v1, ., data, .]
[., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, v1, ., data, ., length, ,, v2, ., data]
[,, 0, ,, data, ,, v1, ., data, ., length, ,, v2, ., data, ., length, ), ;, }, public]
[., data, ,, 0, ,, data, ,, v1, ., data, ., length, ,, v2, ., data, ., length, ), ;]
[,, data, ,, v1, ., data, ., length, ,, v2, ., data, ., length, ), ;, }, public, ArrayRealVector, (]
[,, v1, ., data, ., length, ,, v2, ., data, ., length, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1]
[,, v2, ., data, ., length, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, RealVector, v2, ), {, final]
[., length, ,, v2, ., data, ., length, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, RealVector, v2, )]
[., data, ., length, ,, v2, ., data, ., length, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, RealVector]
[), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, RealVector, v2, ), {, final, int, l1, =, v1, ., data]
[., length, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, RealVector, v2, ), {, final, int, l1, =, v1]
[., data, ., length, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, RealVector, v2, ), {, final, int, l1]
[;, final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, [, l1, +, l2, ]]
[., length, ;, final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, [, l1, +]
[., data, ., length, ;, final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, []
[;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0]
[., getDimension, (, ), ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1]
[=, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data]
[;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, for, (]
[], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, for]
[+, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, )]
[], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, for]
[;, for, (, int, i, =, 0, ;, i, <, l2, ;, ++, i, ), {, data, [, l1, +]
[., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, for, (, int, i]
[,, 0, ,, data, ,, 0, ,, l1, ), ;, for, (, int, i, =, 0, ;, i, <, l2]
[., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, for, (, int, i, =, 0, ;, i]
[,, data, ,, 0, ,, l1, ), ;, for, (, int, i, =, 0, ;, i, <, l2, ;, ++]
[,, 0, ,, l1, ), ;, for, (, int, i, =, 0, ;, i, <, l2, ;, ++, i, )]
[,, l1, ), ;, for, (, int, i, =, 0, ;, i, <, l2, ;, ++, i, ), {, data]
[), ;, for, (, int, i, =, 0, ;, i, <, l2, ;, ++, i, ), {, data, [, l1]
[;, i, <, l2, ;, ++, i, ), {, data, [, l1, +, i, ], =, v2, ., getEntry, (]
[;, ++, i, ), {, data, [, l1, +, i, ], =, v2, ., getEntry, (, i, ), ;, }]
[<, l2, ;, ++, i, ), {, data, [, l1, +, i, ], =, v2, ., getEntry, (, i, )]
[;, ++, i, ), {, data, [, l1, +, i, ], =, v2, ., getEntry, (, i, ), ;, }]
[), {, data, [, l1, +, i, ], =, v2, ., getEntry, (, i, ), ;, }, }, public, ArrayRealVector]
[), {, data, [, l1, +, i, ], =, v2, ., getEntry, (, i, ), ;, }, }, public, ArrayRealVector]
[=, v2, ., getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, RealVector, v1, ,, ArrayRealVector, v2, ), {]
[[, l1, +, i, ], =, v2, ., getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, RealVector, v1]
[], =, v2, ., getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, RealVector, v1, ,, ArrayRealVector, v2, )]
[+, i, ], =, v2, ., getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, RealVector, v1, ,, ArrayRealVector]
[], =, v2, ., getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, RealVector, v1, ,, ArrayRealVector, v2, )]
[;, }, }, public, ArrayRealVector, (, RealVector, v1, ,, ArrayRealVector, v2, ), {, final, int, l1, =, v1, ., getDimension]
[., getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, RealVector, v1, ,, ArrayRealVector, v2, ), {, final, int]
[), ;, }, }, public, ArrayRealVector, (, RealVector, v1, ,, ArrayRealVector, v2, ), {, final, int, l1, =, v1, .]
[;, final, int, l2, =, v2, ., data, ., length, ;, data, =, new, double, [, l1, +, l2, ]]
[., getDimension, (, ), ;, final, int, l2, =, v2, ., data, ., length, ;, data, =, new, double, []
[;, data, =, new, double, [, l1, +, l2, ], ;, for, (, int, i, =, 0, ;, i, <]
[., length, ;, data, =, new, double, [, l1, +, l2, ], ;, for, (, int, i, =, 0, ;]
[., data, ., length, ;, data, =, new, double, [, l1, +, l2, ], ;, for, (, int, i, =]
[=, new, double, [, l1, +, l2, ], ;, for, (, int, i, =, 0, ;, i, <, l1, ;]
[;, for, (, int, i, =, 0, ;, i, <, l1, ;, ++, i, ), {, data, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, l1, ;, ++, i, ), {, data, [, i]
[+, l2, ], ;, for, (, int, i, =, 0, ;, i, <, l1, ;, ++, i, ), {, data]
[], ;, for, (, int, i, =, 0, ;, i, <, l1, ;, ++, i, ), {, data, [, i]
[;, i, <, l1, ;, ++, i, ), {, data, [, i, ], =, v1, ., getEntry, (, i, )]
[;, ++, i, ), {, data, [, i, ], =, v1, ., getEntry, (, i, ), ;, }, System, .]
[<, l1, ;, ++, i, ), {, data, [, i, ], =, v1, ., getEntry, (, i, ), ;, }]
[;, ++, i, ), {, data, [, i, ], =, v1, ., getEntry, (, i, ), ;, }, System, .]
[), {, data, [, i, ], =, v1, ., getEntry, (, i, ), ;, }, System, ., arraycopy, (, v2]
[), {, data, [, i, ], =, v1, ., getEntry, (, i, ), ;, }, System, ., arraycopy, (, v2]
[=, v1, ., getEntry, (, i, ), ;, }, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data]
[[, i, ], =, v1, ., getEntry, (, i, ), ;, }, System, ., arraycopy, (, v2, ., data, ,]
[], =, v1, ., getEntry, (, i, ), ;, }, System, ., arraycopy, (, v2, ., data, ,, 0, ,]
[;, }, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }]
[., getEntry, (, i, ), ;, }, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, l1]
[), ;, }, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, l1, ,, l2, ), ;]
[;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, double, [, ], v2, ), {, final, int, l1, =, v1, .]
[., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (]
[,, 0, ,, data, ,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, double, [, ]]
[., data, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, double]
[,, data, ,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, double, [, ], v2, )]
[,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, double, [, ], v2, ), {, final]
[,, l2, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, double, [, ], v2, ), {, final, int, l1]
[), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, double, [, ], v2, ), {, final, int, l1, =, v1]
[;, final, int, l2, =, v2, ., length, ;, data, =, new, double, [, l1, +, l2, ], ;, System]
[., getDimension, (, ), ;, final, int, l2, =, v2, ., length, ;, data, =, new, double, [, l1, +]
[;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0]
[., length, ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ., data]
[=, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data]
[;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, .]
[], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System]
[+, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, )]
[], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System]
[;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (]
[., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (]
[,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,]
[., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,]
[,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,]
[,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,, l2, )]
[,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }]
[), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }, public, ArrayRealVector]
[;, }, public, ArrayRealVector, (, double, [, ], v1, ,, ArrayRealVector, v2, ), {, final, int, l1, =, v1, .]
[., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (, double, []
[,, 0, ,, data, ,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (, double, [, ], v1, ,, ArrayRealVector]
[,, data, ,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (, double, [, ], v1, ,, ArrayRealVector, v2, )]
[,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (, double, [, ], v1, ,, ArrayRealVector, v2, ), {, final]
[,, l2, ), ;, }, public, ArrayRealVector, (, double, [, ], v1, ,, ArrayRealVector, v2, ), {, final, int, l1]
[), ;, }, public, ArrayRealVector, (, double, [, ], v1, ,, ArrayRealVector, v2, ), {, final, int, l1, =, v1]
[;, final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, [, l1, +, l2, ]]
[., length, ;, final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, [, l1, +]
[;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data]
[., getDimension, (, ), ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1]
[=, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0]
[;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (]
[], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy]
[+, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System]
[], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy]
[;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }, public]
[., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, .]
[,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,]
[,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,]
[,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, l1, ,]
[,, l1, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, l1, ,, l2, )]
[), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }]
[;, }, public, ArrayRealVector, (, double, [, ], v1, ,, double, [, ], v2, ), {, final, int, l1, =]
[., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (]
[,, 0, ,, data, ,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (, double, [, ], v1, ,, double]
[., data, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (, double, [, ], v1]
[,, data, ,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (, double, [, ], v1, ,, double, [, ]]
[,, l1, ,, l2, ), ;, }, public, ArrayRealVector, (, double, [, ], v1, ,, double, [, ], v2, )]
[,, l2, ), ;, }, public, ArrayRealVector, (, double, [, ], v1, ,, double, [, ], v2, ), {, final]
[), ;, }, public, ArrayRealVector, (, double, [, ], v1, ,, double, [, ], v2, ), {, final, int, l1]
[;, final, int, l2, =, v2, ., length, ;, data, =, new, double, [, l1, +, l2, ], ;, System]
[., length, ;, final, int, l2, =, v2, ., length, ;, data, =, new, double, [, l1, +, l2, ]]
[;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data]
[., length, ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0]
[=, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0]
[;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (]
[], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy]
[+, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System]
[], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy]
[;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }, @, Override, public]
[., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,]
[,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,]
[,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,]
[,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,, l2, )]
[,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }]
[), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }, @, Override]
[;, }, @, Override, public, ArrayRealVector, copy, (, ), {, return, new, ArrayRealVector, (, this, ,, true, ), ;, }]
[., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,, l2, ), ;, }, @, Override, public, ArrayRealVector, copy]
[,, 0, ,, data, ,, l1, ,, l2, ), ;, }, @, Override, public, ArrayRealVector, copy, (, ), {, return]
[,, data, ,, l1, ,, l2, ), ;, }, @, Override, public, ArrayRealVector, copy, (, ), {, return, new, ArrayRealVector]
[,, l1, ,, l2, ), ;, }, @, Override, public, ArrayRealVector, copy, (, ), {, return, new, ArrayRealVector, (, this]
[,, l2, ), ;, }, @, Override, public, ArrayRealVector, copy, (, ), {, return, new, ArrayRealVector, (, this, ,, true]
[), ;, }, @, Override, public, ArrayRealVector, copy, (, ), {, return, new, ArrayRealVector, (, this, ,, true, ), ;]
[;, }, @, Override, public, ArrayRealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, )]
[,, true, ), ;, }, @, Override, public, ArrayRealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v]
[), ;, }, @, Override, public, ArrayRealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector]
[), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim]
[instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final]
[;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (]
[., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new]
[), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =]
[), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =]
[;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =]
[., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ]]
[;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for]
[), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =, result, ., data, ;]
[;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim]
[), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ]]
[., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, []
[;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], +, vData]
[;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], +, vData, [, i, ], ;]
[<, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], +, vData, [, i]
[;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], +, vData, [, i, ], ;]
[), {, resultData, [, i, ], =, data, [, i, ], +, vData, [, i, ], ;, }, return, result]
[++, ), {, resultData, [, i, ], =, data, [, i, ], +, vData, [, i, ], ;, }, return]
[=, data, [, i, ], +, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (]
[[, i, ], =, data, [, i, ], +, vData, [, i, ], ;, }, return, result, ;, }, else]
[], =, data, [, i, ], +, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions]
[;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data, .]
[+, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, []
[[, i, ], +, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, )]
[], +, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double]
[;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data, .]
[[, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out]
[], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data]
[;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data, ., clone, (, ), ;]
[;, double, [, ], out, =, data, ., clone, (, ), ;, Iterator, <, Entry, >, it, =, v, .]
[), ;, double, [, ], out, =, data, ., clone, (, ), ;, Iterator, <, Entry, >, it, =, v]
[;, Iterator, <, Entry, >, it, =, v, ., iterator, (, ), ;, while, (, it, ., hasNext, (, )]
[., clone, (, ), ;, Iterator, <, Entry, >, it, =, v, ., iterator, (, ), ;, while, (, it]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, .]
[), {, final, Entry, e, =, it, ., next, (, ), ;, out, [, e, ., getIndex, (, ), ]]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, out, [, e, .]
[;, out, [, e, ., getIndex, (, ), ], +=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector]
[., next, (, ), ;, out, [, e, ., getIndex, (, ), ], +=, e, ., getValue, (, ), ;]
[+=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, @]
[[, e, ., getIndex, (, ), ], +=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector, (, out]
[], +=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }]
[., getIndex, (, ), ], +=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector, (, out, ,, false]
[;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, @, Override, public, ArrayRealVector, subtract, (, RealVector]
[., getValue, (, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, @, Override, public]
[;, }, }, @, Override, public, ArrayRealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector]
[,, false, ), ;, }, }, @, Override, public, ArrayRealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[), ;, }, }, @, Override, public, ArrayRealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof]
[), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim]
[instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final]
[;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (]
[., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new]
[), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =]
[), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =]
[;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =]
[., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ]]
[;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for]
[), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =, result, ., data, ;]
[;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim]
[), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ]]
[., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, []
[;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], -, vData]
[;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], -, vData, [, i, ], ;]
[<, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], -, vData, [, i]
[;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], -, vData, [, i, ], ;]
[), {, resultData, [, i, ], =, data, [, i, ], -, vData, [, i, ], ;, }, return, result]
[++, ), {, resultData, [, i, ], =, data, [, i, ], -, vData, [, i, ], ;, }, return]
[=, data, [, i, ], -, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (]
[[, i, ], =, data, [, i, ], -, vData, [, i, ], ;, }, return, result, ;, }, else]
[], =, data, [, i, ], -, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions]
[;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data, .]
[-, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, []
[[, i, ], -, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, )]
[], -, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double]
[;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data, .]
[[, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out]
[], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data]
[;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data, ., clone, (, ), ;]
[;, double, [, ], out, =, data, ., clone, (, ), ;, Iterator, <, Entry, >, it, =, v, .]
[), ;, double, [, ], out, =, data, ., clone, (, ), ;, Iterator, <, Entry, >, it, =, v]
[;, Iterator, <, Entry, >, it, =, v, ., iterator, (, ), ;, while, (, it, ., hasNext, (, )]
[., clone, (, ), ;, Iterator, <, Entry, >, it, =, v, ., iterator, (, ), ;, while, (, it]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, .]
[), {, final, Entry, e, =, it, ., next, (, ), ;, out, [, e, ., getIndex, (, ), ]]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, out, [, e, .]
[;, out, [, e, ., getIndex, (, ), ], -=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector]
[., next, (, ), ;, out, [, e, ., getIndex, (, ), ], -=, e, ., getValue, (, ), ;]
[-=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, @]
[[, e, ., getIndex, (, ), ], -=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector, (, out]
[], -=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }]
[., getIndex, (, ), ], -=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector, (, out, ,, false]
[;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, @, Override, public, ArrayRealVector, map, (, UnivariateFunction]
[., getValue, (, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, @, Override, public]
[;, }, }, @, Override, public, ArrayRealVector, map, (, UnivariateFunction, function, ), {, return, copy, (, ), ., mapToSelf, (]
[,, false, ), ;, }, }, @, Override, public, ArrayRealVector, map, (, UnivariateFunction, function, ), {, return, copy, (, )]
[), ;, }, }, @, Override, public, ArrayRealVector, map, (, UnivariateFunction, function, ), {, return, copy, (, ), ., mapToSelf]
[;, }, @, Override, public, ArrayRealVector, mapToSelf, (, UnivariateFunction, function, ), {, for, (, int, i, =, 0, ;, i]
[., mapToSelf, (, function, ), ;, }, @, Override, public, ArrayRealVector, mapToSelf, (, UnivariateFunction, function, ), {, for, (, int]
[), ;, }, @, Override, public, ArrayRealVector, mapToSelf, (, UnivariateFunction, function, ), {, for, (, int, i, =, 0, ;]
[;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, function, ., value, (]
[;, i, ++, ), {, data, [, i, ], =, function, ., value, (, data, [, i, ], ), ;]
[<, data, ., length, ;, i, ++, ), {, data, [, i, ], =, function, ., value, (, data, []
[;, i, ++, ), {, data, [, i, ], =, function, ., value, (, data, [, i, ], ), ;]
[., length, ;, i, ++, ), {, data, [, i, ], =, function, ., value, (, data, [, i, ]]
[), {, data, [, i, ], =, function, ., value, (, data, [, i, ], ), ;, }, return, this]
[++, ), {, data, [, i, ], =, function, ., value, (, data, [, i, ], ), ;, }, return]
[=, function, ., value, (, data, [, i, ], ), ;, }, return, this, ;, }, @, Override, public, RealVector]
[[, i, ], =, function, ., value, (, data, [, i, ], ), ;, }, return, this, ;, }, @]
[], =, function, ., value, (, data, [, i, ], ), ;, }, return, this, ;, }, @, Override, public]
[;, }, return, this, ;, }, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i]
[., value, (, data, [, i, ], ), ;, }, return, this, ;, }, @, Override, public, RealVector, mapAddToSelf, (]
[), ;, }, return, this, ;, }, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), {, for, (, int]
[[, i, ], ), ;, }, return, this, ;, }, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), {]
[], ), ;, }, return, this, ;, }, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), {, for, (]
[;, }, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i]
[;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], +, d, ;, }, return, this]
[<, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], +, d]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], +, d, ;, }, return, this]
[., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], +, d, ;, }]
[), {, data, [, i, ], =, data, [, i, ], +, d, ;, }, return, this, ;, }, @]
[++, ), {, data, [, i, ], =, data, [, i, ], +, d, ;, }, return, this, ;, }]
[=, data, [, i, ], +, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double]
[[, i, ], =, data, [, i, ], +, d, ;, }, return, this, ;, }, @, Override, public, RealVector]
[], =, data, [, i, ], +, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapSubtractToSelf, (]
[;, }, return, this, ;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), {, for, (, int, i]
[+, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), {, for, (]
[[, i, ], +, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, )]
[], +, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), {, for]
[;, }, return, this, ;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), {, for, (, int, i]
[;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i]
[;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], -, d, ;, }, return, this]
[<, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], -, d]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], -, d, ;, }, return, this]
[., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], -, d, ;, }]
[), {, data, [, i, ], =, data, [, i, ], -, d, ;, }, return, this, ;, }, @]
[++, ), {, data, [, i, ], =, data, [, i, ], -, d, ;, }, return, this, ;, }]
[=, data, [, i, ], -, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double]
[[, i, ], =, data, [, i, ], -, d, ;, }, return, this, ;, }, @, Override, public, RealVector]
[], =, data, [, i, ], -, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (]
[;, }, return, this, ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, for, (, int, i]
[-, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, for, (]
[[, i, ], -, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, )]
[], -, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, for]
[;, }, return, this, ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, for, (, int, i]
[;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i]
[;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], *, d, ;, }, return, this]
[<, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], *, d]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], *, d, ;, }, return, this]
[., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], *, d, ;, }]
[), {, data, [, i, ], =, data, [, i, ], *, d, ;, }, return, this, ;, }, @]
[++, ), {, data, [, i, ], =, data, [, i, ], *, d, ;, }, return, this, ;, }]
[=, data, [, i, ], *, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapDivideToSelf, (, double]
[[, i, ], =, data, [, i, ], *, d, ;, }, return, this, ;, }, @, Override, public, RealVector]
[], =, data, [, i, ], *, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapDivideToSelf, (]
[;, }, return, this, ;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), {, for, (, int, i]
[*, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), {, for, (]
[[, i, ], *, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, )]
[], *, d, ;, }, return, this, ;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), {, for]
[;, }, return, this, ;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), {, for, (, int, i]
[;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i]
[;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ]]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], /, d, ;, }, return, this]
[<, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], /, d]
[;, i, ++, ), {, data, [, i, ], =, data, [, i, ], /, d, ;, }, return, this]
[., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], /, d, ;, }]
[), {, data, [, i, ], =, data, [, i, ], /, d, ;, }, return, this, ;, }, @]
[++, ), {, data, [, i, ], =, data, [, i, ], /, d, ;, }, return, this, ;, }]
[=, data, [, i, ], /, d, ;, }, return, this, ;, }, @, Override, public, ArrayRealVector, ebeMultiply, (, RealVector]
[[, i, ], =, data, [, i, ], /, d, ;, }, return, this, ;, }, @, Override, public, ArrayRealVector]
[], =, data, [, i, ], /, d, ;, }, return, this, ;, }, @, Override, public, ArrayRealVector, ebeMultiply, (]
[;, }, return, this, ;, }, @, Override, public, ArrayRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[/, d, ;, }, return, this, ;, }, @, Override, public, ArrayRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {]
[[, i, ], /, d, ;, }, return, this, ;, }, @, Override, public, ArrayRealVector, ebeMultiply, (, RealVector, v, )]
[], /, d, ;, }, return, this, ;, }, @, Override, public, ArrayRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException]
[;, }, return, this, ;, }, @, Override, public, ArrayRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[;, }, @, Override, public, ArrayRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, )]
[), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim]
[instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final]
[;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (]
[., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new]
[), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =]
[), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =]
[;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =]
[., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ]]
[;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for]
[), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =, result, ., data, ;]
[;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim]
[), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ]]
[., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, []
[;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], *, vData]
[;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], *, vData, [, i, ], ;]
[<, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], *, vData, [, i]
[;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], *, vData, [, i, ], ;]
[), {, resultData, [, i, ], =, data, [, i, ], *, vData, [, i, ], ;, }, return, result]
[++, ), {, resultData, [, i, ], =, data, [, i, ], *, vData, [, i, ], ;, }, return]
[=, data, [, i, ], *, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (]
[[, i, ], =, data, [, i, ], *, vData, [, i, ], ;, }, return, result, ;, }, else]
[], =, data, [, i, ], *, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions]
[;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data, .]
[*, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, []
[[, i, ], *, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, )]
[], *, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double]
[;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data, .]
[[, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out]
[], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data]
[;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data, ., clone, (, ), ;]
[;, double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i]
[), ;, double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], *=, v, ., getEntry, (]
[;, i, ++, ), {, out, [, i, ], *=, v, ., getEntry, (, i, ), ;, }, return, new]
[<, data, ., length, ;, i, ++, ), {, out, [, i, ], *=, v, ., getEntry, (, i, )]
[;, i, ++, ), {, out, [, i, ], *=, v, ., getEntry, (, i, ), ;, }, return, new]
[., length, ;, i, ++, ), {, out, [, i, ], *=, v, ., getEntry, (, i, ), ;, }]
[), {, out, [, i, ], *=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (, out]
[++, ), {, out, [, i, ], *=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (]
[*=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }]
[[, i, ], *=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, )]
[], *=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }]
[;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, @, Override, public, ArrayRealVector, ebeDivide, (, RealVector]
[., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, @, Override]
[), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, @, Override, public, ArrayRealVector, ebeDivide, (]
[;, }, }, @, Override, public, ArrayRealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector]
[,, false, ), ;, }, }, @, Override, public, ArrayRealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[), ;, }, }, @, Override, public, ArrayRealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof]
[), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim]
[instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final]
[;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (]
[., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new]
[), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =]
[), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =]
[;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =]
[., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ]]
[;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for]
[), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =, result, ., data, ;]
[;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim]
[), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ]]
[., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, []
[;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], /, vData]
[;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], /, vData, [, i, ], ;]
[<, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], /, vData, [, i]
[;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], /, vData, [, i, ], ;]
[), {, resultData, [, i, ], =, data, [, i, ], /, vData, [, i, ], ;, }, return, result]
[++, ), {, resultData, [, i, ], =, data, [, i, ], /, vData, [, i, ], ;, }, return]
[=, data, [, i, ], /, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (]
[[, i, ], =, data, [, i, ], /, vData, [, i, ], ;, }, return, result, ;, }, else]
[], =, data, [, i, ], /, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions]
[;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data, .]
[/, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, []
[[, i, ], /, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, )]
[], /, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double]
[;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data, .]
[[, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out]
[], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data]
[;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =, data, ., clone, (, ), ;]
[;, double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i]
[), ;, double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], /=, v, ., getEntry, (]
[;, i, ++, ), {, out, [, i, ], /=, v, ., getEntry, (, i, ), ;, }, return, new]
[<, data, ., length, ;, i, ++, ), {, out, [, i, ], /=, v, ., getEntry, (, i, )]
[;, i, ++, ), {, out, [, i, ], /=, v, ., getEntry, (, i, ), ;, }, return, new]
[., length, ;, i, ++, ), {, out, [, i, ], /=, v, ., getEntry, (, i, ), ;, }]
[), {, out, [, i, ], /=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (, out]
[++, ), {, out, [, i, ], /=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (]
[/=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }]
[[, i, ], /=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, )]
[], /=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }]
[;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, public, double, [, ], getDataRef, (, )]
[., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, public, double]
[), ;, }, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, public, double, [, ], getDataRef, (]
[;, }, }, public, double, [, ], getDataRef, (, ), {, return, data, ;, }, @, Override, public, double, dotProduct]
[,, false, ), ;, }, }, public, double, [, ], getDataRef, (, ), {, return, data, ;, }, @, Override]
[), ;, }, }, public, double, [, ], getDataRef, (, ), {, return, data, ;, }, @, Override, public, double]
[;, }, @, Override, public, double, dotProduct, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, )]
[), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (, vData]
[instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions]
[;, checkVectorDimensions, (, vData, ., length, ), ;, double, dot, =, 0, ;, for, (, int, i, =, 0, ;]
[., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, dot, =, 0, ;, for, (, int, i, =]
[), ., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, dot, =, 0, ;, for, (, int, i]
[), ., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, dot, =, 0, ;, for, (, int, i]
[;, double, dot, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, double, dot, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[., length, ), ;, double, dot, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, .]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, dot, +=]
[;, i, <, data, ., length, ;, i, ++, ), {, dot, +=, data, [, i, ], *, vData, []
[;, i, ++, ), {, dot, +=, data, [, i, ], *, vData, [, i, ], ;, }, return, dot]
[<, data, ., length, ;, i, ++, ), {, dot, +=, data, [, i, ], *, vData, [, i, ]]
[;, i, ++, ), {, dot, +=, data, [, i, ], *, vData, [, i, ], ;, }, return, dot]
[., length, ;, i, ++, ), {, dot, +=, data, [, i, ], *, vData, [, i, ], ;, }]
[), {, dot, +=, data, [, i, ], *, vData, [, i, ], ;, }, return, dot, ;, }, return]
[++, ), {, dot, +=, data, [, i, ], *, vData, [, i, ], ;, }, return, dot, ;, }]
[+=, data, [, i, ], *, vData, [, i, ], ;, }, return, dot, ;, }, return, super, ., dotProduct]
[;, }, return, dot, ;, }, return, super, ., dotProduct, (, v, ), ;, }, @, Override, public, double, getNorm]
[*, vData, [, i, ], ;, }, return, dot, ;, }, return, super, ., dotProduct, (, v, ), ;, }]
[[, i, ], *, vData, [, i, ], ;, }, return, dot, ;, }, return, super, ., dotProduct, (, v]
[], *, vData, [, i, ], ;, }, return, dot, ;, }, return, super, ., dotProduct, (, v, ), ;]
[;, }, return, dot, ;, }, return, super, ., dotProduct, (, v, ), ;, }, @, Override, public, double, getNorm]
[[, i, ], ;, }, return, dot, ;, }, return, super, ., dotProduct, (, v, ), ;, }, @, Override]
[], ;, }, return, dot, ;, }, return, super, ., dotProduct, (, v, ), ;, }, @, Override, public, double]
[;, }, return, super, ., dotProduct, (, v, ), ;, }, @, Override, public, double, getNorm, (, ), {, double]
[;, }, @, Override, public, double, getNorm, (, ), {, double, sum, =, 0, ;, for, (, double, a, :]
[., dotProduct, (, v, ), ;, }, @, Override, public, double, getNorm, (, ), {, double, sum, =, 0, ;]
[), ;, }, @, Override, public, double, getNorm, (, ), {, double, sum, =, 0, ;, for, (, double, a]
[;, for, (, double, a, :, data, ), {, sum, +=, a, *, a, ;, }, return, FastMath, ., sqrt]
[), {, sum, +=, a, *, a, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, @, Override]
[+=, a, *, a, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, @, Override, public, double, getL1Norm]
[;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, @, Override, public, double, getL1Norm, (, ), {, double]
[*, a, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, @, Override, public, double, getL1Norm, (, )]
[;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, @, Override, public, double, getL1Norm, (, ), {, double]
[;, }, @, Override, public, double, getL1Norm, (, ), {, double, sum, =, 0, ;, for, (, double, a, :]
[., sqrt, (, sum, ), ;, }, @, Override, public, double, getL1Norm, (, ), {, double, sum, =, 0, ;]
[), ;, }, @, Override, public, double, getL1Norm, (, ), {, double, sum, =, 0, ;, for, (, double, a]
[;, for, (, double, a, :, data, ), {, sum, +=, FastMath, ., abs, (, a, ), ;, }, return]
[), {, sum, +=, FastMath, ., abs, (, a, ), ;, }, return, sum, ;, }, @, Override, public, double]
[+=, FastMath, ., abs, (, a, ), ;, }, return, sum, ;, }, @, Override, public, double, getLInfNorm, (, )]
[;, }, return, sum, ;, }, @, Override, public, double, getLInfNorm, (, ), {, double, max, =, 0, ;, for]
[., abs, (, a, ), ;, }, return, sum, ;, }, @, Override, public, double, getLInfNorm, (, ), {, double]
[), ;, }, return, sum, ;, }, @, Override, public, double, getLInfNorm, (, ), {, double, max, =, 0, ;]
[;, }, @, Override, public, double, getLInfNorm, (, ), {, double, max, =, 0, ;, for, (, double, a, :]
[;, for, (, double, a, :, data, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs]
[), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, a, ), ), ;, }, return]
[=, FastMath, ., max, (, max, ,, FastMath, ., abs, (, a, ), ), ;, }, return, max, ;, }]
[;, }, return, max, ;, }, @, Override, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[., max, (, max, ,, FastMath, ., abs, (, a, ), ), ;, }, return, max, ;, }, @, Override]
[,, FastMath, ., abs, (, a, ), ), ;, }, return, max, ;, }, @, Override, public, double, getDistance, (]
[), ;, }, return, max, ;, }, @, Override, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, if]
[., abs, (, a, ), ), ;, }, return, max, ;, }, @, Override, public, double, getDistance, (, RealVector, v]
[), ), ;, }, return, max, ;, }, @, Override, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {]
[;, }, @, Override, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, )]
[), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (, vData]
[instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions]
[;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =]
[), ., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i]
[), ., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, .]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum]
[<, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, []
[;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum]
[., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ]]
[), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum, +=, delta, *]
[), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum, +=, delta, *]
[;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, else, {, checkVectorDimensions]
[-, vData, [, i, ], ;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum, )]
[[, i, ], -, vData, [, i, ], ;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt]
[], -, vData, [, i, ], ;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum]
[;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, else, {, checkVectorDimensions]
[[, i, ], ;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }]
[], ;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, else, {]
[+=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, else, {, checkVectorDimensions, (, v]
[;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, sum]
[*, delta, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, else, {, checkVectorDimensions, (, v, ), ;]
[;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, sum]
[;, }, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0]
[., sqrt, (, sum, ), ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for]
[), ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (, int, i, =]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, )]
[<, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, .]
[;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, )]
[., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (]
[), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=]
[), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=]
[;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, }, @, Override]
[-, v, ., getEntry, (, i, ), ;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (]
[[, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=, delta, *, delta, ;, }, return, FastMath]
[], -, v, ., getEntry, (, i, ), ;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt]
[;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, }, @, Override]
[., getEntry, (, i, ), ;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum, )]
[), ;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, }, @]
[+=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, }, @, Override, public, double]
[;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, }, @, Override, public, double, getL1Distance, (, RealVector, v]
[*, delta, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, }, @, Override, public, double, getL1Distance, (]
[;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, }, @, Override, public, double, getL1Distance, (, RealVector, v]
[;, }, }, @, Override, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector]
[., sqrt, (, sum, ), ;, }, }, @, Override, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {]
[), ;, }, }, @, Override, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof]
[), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (, vData]
[instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions]
[;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =]
[), ., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i]
[), ., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, .]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum]
[<, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, []
[;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum]
[., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ]]
[), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum, +=, FastMath, .]
[), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum, +=, FastMath, .]
[;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;, }, else, {, checkVectorDimensions, (, v]
[-, vData, [, i, ], ;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;, }]
[[, i, ], -, vData, [, i, ], ;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return]
[], -, vData, [, i, ], ;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;]
[;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;, }, else, {, checkVectorDimensions, (, v]
[[, i, ], ;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;, }, else, {]
[], ;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;, }, else, {, checkVectorDimensions, (]
[+=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;, }, else, {, checkVectorDimensions, (, v, ), ;]
[;, }, return, sum, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (]
[., abs, (, delta, ), ;, }, return, sum, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, sum]
[), ;, }, return, sum, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for]
[;, }, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, )]
[<, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, .]
[;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, )]
[., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (]
[), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=]
[), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=]
[;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;, }, }, @, Override, public, double]
[-, v, ., getEntry, (, i, ), ;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return, sum]
[[, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=, FastMath, ., abs, (, delta, ), ;]
[], -, v, ., getEntry, (, i, ), ;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return]
[;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;, }, }, @, Override, public, double]
[., getEntry, (, i, ), ;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;, }]
[), ;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;, }, }, @, Override, public]
[+=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;, }, }, @, Override, public, double, getLInfDistance, (]
[;, }, return, sum, ;, }, }, @, Override, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, if]
[., abs, (, delta, ), ;, }, return, sum, ;, }, }, @, Override, public, double, getLInfDistance, (, RealVector, v]
[), ;, }, return, sum, ;, }, }, @, Override, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {]
[;, }, }, @, Override, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector]
[), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (, vData]
[instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions]
[;, checkVectorDimensions, (, vData, ., length, ), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;]
[., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, max, =, 0, ;, for, (, int, i, =]
[), ., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, max, =, 0, ;, for, (, int, i]
[), ., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, max, =, 0, ;, for, (, int, i]
[;, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[., length, ), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, .]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, max]
[<, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, []
[;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, max]
[., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ]]
[), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, max, =, FastMath, .]
[), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, max, =, FastMath, .]
[;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return, max]
[-, vData, [, i, ], ;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta, )]
[[, i, ], -, vData, [, i, ], ;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs]
[], -, vData, [, i, ], ;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta]
[;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return, max]
[[, i, ], ;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;]
[], ;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return]
[=, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return, max, ;, }]
[;, }, return, max, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, max, =, 0, ;, for, (]
[., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return, max, ;, }, else, {]
[,, FastMath, ., abs, (, delta, ), ), ;, }, return, max, ;, }, else, {, checkVectorDimensions, (, v, )]
[), ;, }, return, max, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, max, =, 0, ;, for]
[., abs, (, delta, ), ), ;, }, return, max, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double]
[), ), ;, }, return, max, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, max, =, 0, ;]
[;, }, else, {, checkVectorDimensions, (, v, ), ;, double, max, =, 0, ;, for, (, int, i, =, 0]
[;, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, )]
[<, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, .]
[;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, )]
[., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (]
[), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, max, =]
[), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, max, =]
[;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return, max]
[-, v, ., getEntry, (, i, ), ;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (]
[[, i, ], -, v, ., getEntry, (, i, ), ;, max, =, FastMath, ., max, (, max, ,, FastMath]
[], -, v, ., getEntry, (, i, ), ;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs]
[;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return, max]
[., getEntry, (, i, ), ;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta, )]
[), ;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return]
[=, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return, max, ;, }]
[;, }, return, max, ;, }, }, @, Override, public, RealMatrix, outerProduct, (, RealVector, v, ), {, if, (, v]
[., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return, max, ;, }, }, @]
[,, FastMath, ., abs, (, delta, ), ), ;, }, return, max, ;, }, }, @, Override, public, RealMatrix, outerProduct]
[), ;, }, return, max, ;, }, }, @, Override, public, RealMatrix, outerProduct, (, RealVector, v, ), {, if, (]
[., abs, (, delta, ), ), ;, }, return, max, ;, }, }, @, Override, public, RealMatrix, outerProduct, (, RealVector]
[), ), ;, }, return, max, ;, }, }, @, Override, public, RealMatrix, outerProduct, (, RealVector, v, ), {, if]
[;, }, }, @, Override, public, RealMatrix, outerProduct, (, RealVector, v, ), {, if, (, v, instanceof, ArrayRealVector, ), {]
[), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, m]
[instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final]
[;, final, int, m, =, data, ., length, ;, final, int, n, =, vData, ., length, ;, final, RealMatrix, out]
[., data, ;, final, int, m, =, data, ., length, ;, final, int, n, =, vData, ., length, ;, final]
[), ., data, ;, final, int, m, =, data, ., length, ;, final, int, n, =, vData, ., length, ;]
[), ., data, ;, final, int, m, =, data, ., length, ;, final, int, n, =, vData, ., length, ;]
[;, final, int, n, =, vData, ., length, ;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m, ,, n]
[., length, ;, final, int, n, =, vData, ., length, ;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m]
[;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0]
[., length, ;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j]
[., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, i]
[,, n, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for]
[), ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int]
[;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[<, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry]
[++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, .]
[;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i]
[;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *, vData, []
[<, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *]
[;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *, vData, []
[), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *, vData, [, j, ], )]
[++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *, vData, [, j, ]]
[;, }, }, return, out, ;, }, else, {, final, int, m, =, data, ., length, ;, final, int, n]
[., setEntry, (, i, ,, j, ,, data, [, i, ], *, vData, [, j, ], ), ;, }, }]
[,, j, ,, data, [, i, ], *, vData, [, j, ], ), ;, }, }, return, out, ;, }]
[,, data, [, i, ], *, vData, [, j, ], ), ;, }, }, return, out, ;, }, else, {]
[), ;, }, }, return, out, ;, }, else, {, final, int, m, =, data, ., length, ;, final, int]
[*, vData, [, j, ], ), ;, }, }, return, out, ;, }, else, {, final, int, m, =, data]
[[, i, ], *, vData, [, j, ], ), ;, }, }, return, out, ;, }, else, {, final, int]
[], *, vData, [, j, ], ), ;, }, }, return, out, ;, }, else, {, final, int, m, =]
[), ;, }, }, return, out, ;, }, else, {, final, int, m, =, data, ., length, ;, final, int]
[[, j, ], ), ;, }, }, return, out, ;, }, else, {, final, int, m, =, data, ., length]
[], ), ;, }, }, return, out, ;, }, else, {, final, int, m, =, data, ., length, ;, final]
[;, }, else, {, final, int, m, =, data, ., length, ;, final, int, n, =, v, ., getDimension, (]
[;, final, int, n, =, v, ., getDimension, (, ), ;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m]
[., length, ;, final, int, n, =, v, ., getDimension, (, ), ;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix]
[;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0]
[., getDimension, (, ), ;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j]
[., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, i]
[,, n, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for]
[), ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int]
[;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[<, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry]
[++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, .]
[;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i]
[;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *, v, .]
[<, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *]
[;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *, v, .]
[), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *, v, ., getEntry, (, j]
[++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *, v, ., getEntry, (]
[;, }, }, return, out, ;, }, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {]
[., setEntry, (, i, ,, j, ,, data, [, i, ], *, v, ., getEntry, (, j, ), ), ;]
[,, j, ,, data, [, i, ], *, v, ., getEntry, (, j, ), ), ;, }, }, return, out]
[,, data, [, i, ], *, v, ., getEntry, (, j, ), ), ;, }, }, return, out, ;, }]
[), ;, }, }, return, out, ;, }, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException]
[*, v, ., getEntry, (, j, ), ), ;, }, }, return, out, ;, }, }, @, Override, public, double]
[[, i, ], *, v, ., getEntry, (, j, ), ), ;, }, }, return, out, ;, }, }, @]
[], *, v, ., getEntry, (, j, ), ), ;, }, }, return, out, ;, }, }, @, Override, public]
[), ;, }, }, return, out, ;, }, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException]
[., getEntry, (, j, ), ), ;, }, }, return, out, ;, }, }, @, Override, public, double, getEntry, (]
[), ), ;, }, }, return, out, ;, }, }, @, Override, public, double, getEntry, (, int, index, ), throws]
[;, }, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, try, {, return, data, []
[;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,]
[[, index, ], ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index]
[], ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0]
[;, }, }, @, Override, public, int, getDimension, (, ), {, return, data, ., length, ;, }, @, Override, public]
[,, index, ,, 0, ,, getDimension, (, ), -, 1, ), ;, }, }, @, Override, public, int, getDimension, (]
[., INDEX, ,, index, ,, 0, ,, getDimension, (, ), -, 1, ), ;, }, }, @, Override, public, int]
[,, 0, ,, getDimension, (, ), -, 1, ), ;, }, }, @, Override, public, int, getDimension, (, ), {]
[,, getDimension, (, ), -, 1, ), ;, }, }, @, Override, public, int, getDimension, (, ), {, return, data]
[), ;, }, }, @, Override, public, int, getDimension, (, ), {, return, data, ., length, ;, }, @, Override]
[-, 1, ), ;, }, }, @, Override, public, int, getDimension, (, ), {, return, data, ., length, ;, }]
[), ;, }, }, @, Override, public, int, getDimension, (, ), {, return, data, ., length, ;, }, @, Override]
[;, }, @, Override, public, RealVector, append, (, RealVector, v, ), {, try, {, return, new, ArrayRealVector, (, this, ,]
[., length, ;, }, @, Override, public, RealVector, append, (, RealVector, v, ), {, try, {, return, new, ArrayRealVector, (]
[;, }, catch, (, ClassCastException, cce, ), {, return, new, ArrayRealVector, (, this, ,, v, ), ;, }, }, public]
[,, (, ArrayRealVector, ), v, ), ;, }, catch, (, ClassCastException, cce, ), {, return, new, ArrayRealVector, (, this, ,]
[), ;, }, catch, (, ClassCastException, cce, ), {, return, new, ArrayRealVector, (, this, ,, v, ), ;, }, }]
[), ;, }, catch, (, ClassCastException, cce, ), {, return, new, ArrayRealVector, (, this, ,, v, ), ;, }, }]
[;, }, }, public, ArrayRealVector, append, (, ArrayRealVector, v, ), {, return, new, ArrayRealVector, (, this, ,, v, ), ;]
[,, v, ), ;, }, }, public, ArrayRealVector, append, (, ArrayRealVector, v, ), {, return, new, ArrayRealVector, (, this, ,]
[), ;, }, }, public, ArrayRealVector, append, (, ArrayRealVector, v, ), {, return, new, ArrayRealVector, (, this, ,, v, )]
[;, }, @, Override, public, RealVector, append, (, double, in, ), {, final, double, [, ], out, =, new, double]
[,, v, ), ;, }, @, Override, public, RealVector, append, (, double, in, ), {, final, double, [, ], out]
[), ;, }, @, Override, public, RealVector, append, (, double, in, ), {, final, double, [, ], out, =, new]
[;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, ), ;, out, []
[], ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, ), ;, out]
[+, 1, ], ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, )]
[., length, +, 1, ], ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, .]
[], ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, ), ;, out]
[;, out, [, data, ., length, ], =, in, ;, return, new, ArrayRealVector, (, out, ,, false, ), ;, }]
[., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, ), ;, out, [, data, .]
[,, 0, ,, out, ,, 0, ,, data, ., length, ), ;, out, [, data, ., length, ], =, in]
[,, out, ,, 0, ,, data, ., length, ), ;, out, [, data, ., length, ], =, in, ;, return]
[,, 0, ,, data, ., length, ), ;, out, [, data, ., length, ], =, in, ;, return, new, ArrayRealVector]
[,, data, ., length, ), ;, out, [, data, ., length, ], =, in, ;, return, new, ArrayRealVector, (, out]
[), ;, out, [, data, ., length, ], =, in, ;, return, new, ArrayRealVector, (, out, ,, false, ), ;]
[., length, ), ;, out, [, data, ., length, ], =, in, ;, return, new, ArrayRealVector, (, out, ,, false]
[=, in, ;, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, @, Override, public, RealVector, getSubVector, (, int]
[[, data, ., length, ], =, in, ;, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, @, Override]
[], =, in, ;, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, @, Override, public, RealVector, getSubVector, (]
[., length, ], =, in, ;, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, @, Override, public, RealVector]
[;, return, new, ArrayRealVector, (, out, ,, false, ), ;, }, @, Override, public, RealVector, getSubVector, (, int, index, ,]
[;, }, @, Override, public, RealVector, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, if]
[,, false, ), ;, }, @, Override, public, RealVector, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,]
[), ;, }, @, Override, public, RealVector, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, ArrayRealVector, out, =, new, ArrayRealVector, (]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, ArrayRealVector, out, =, new]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, ArrayRealVector, out, =, new, ArrayRealVector, (]
[;, }, ArrayRealVector, out, =, new, ArrayRealVector, (, n, ), ;, try, {, System, ., arraycopy, (, data, ,, index]
[,, n, ), ;, }, ArrayRealVector, out, =, new, ArrayRealVector, (, n, ), ;, try, {, System, ., arraycopy, (]
[., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, ArrayRealVector, out, =, new, ArrayRealVector, (, n, ), ;, try, {, System, .]
[), ;, }, ArrayRealVector, out, =, new, ArrayRealVector, (, n, ), ;, try, {, System, ., arraycopy, (, data, ,]
[;, try, {, System, ., arraycopy, (, data, ,, index, ,, out, ., data, ,, 0, ,, n, ), ;]
[), ;, try, {, System, ., arraycopy, (, data, ,, index, ,, out, ., data, ,, 0, ,, n, )]
[;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, n, -, 1]
[., arraycopy, (, data, ,, index, ,, out, ., data, ,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException]
[,, index, ,, out, ., data, ,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex]
[,, out, ., data, ,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index]
[,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[., data, ,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;]
[,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, n, -]
[;, checkIndex, (, index, +, n, -, 1, ), ;, }, return, out, ;, }, @, Override, public, void, setEntry]
[), ;, checkIndex, (, index, +, n, -, 1, ), ;, }, return, out, ;, }, @, Override, public, void]
[;, }, return, out, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws, OutOfRangeException]
[), ;, }, return, out, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws]
[-, 1, ), ;, }, return, out, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value]
[+, n, -, 1, ), ;, }, return, out, ;, }, @, Override, public, void, setEntry, (, int, index, ,]
[-, 1, ), ;, }, return, out, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value]
[), ;, }, return, out, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws]
[;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws, OutOfRangeException, {, try, {, data]
[=, value, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, }, }, @, Override, public]
[[, index, ], =, value, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, }, }]
[], =, value, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, }, }, @, Override]
[;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, }, }, @, Override, public, void, addToEntry]
[;, }, }, @, Override, public, void, addToEntry, (, int, index, ,, double, increment, ), throws, OutOfRangeException, {, try, {]
[), ;, }, }, @, Override, public, void, addToEntry, (, int, index, ,, double, increment, ), throws, OutOfRangeException, {, try]
[+=, increment, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,]
[[, index, ], +=, increment, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX]
[], +=, increment, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index]
[;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,]
[;, }, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, if, (]
[,, index, ,, 0, ,, data, ., length, -, 1, ), ;, }, }, @, Override, public, void, setSubVector, (]
[., INDEX, ,, index, ,, 0, ,, data, ., length, -, 1, ), ;, }, }, @, Override, public, void]
[,, 0, ,, data, ., length, -, 1, ), ;, }, }, @, Override, public, void, setSubVector, (, int, index]
[,, data, ., length, -, 1, ), ;, }, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector]
[), ;, }, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, if]
[-, 1, ), ;, }, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException]
[., length, -, 1, ), ;, }, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, v, )]
[), ;, }, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, if]
[), {, setSubVector, (, index, ,, (, (, ArrayRealVector, ), v, ), ., data, ), ;, }, else, {, try]
[instanceof, ArrayRealVector, ), {, setSubVector, (, index, ,, (, (, ArrayRealVector, ), v, ), ., data, ), ;, }, else]
[;, }, else, {, try, {, for, (, int, i, =, index, ;, i, <, index, +, v, ., getDimension]
[,, (, (, ArrayRealVector, ), v, ), ., data, ), ;, }, else, {, try, {, for, (, int, i]
[), ;, }, else, {, try, {, for, (, int, i, =, index, ;, i, <, index, +, v, .]
[., data, ), ;, }, else, {, try, {, for, (, int, i, =, index, ;, i, <, index, +]
[), ., data, ), ;, }, else, {, try, {, for, (, int, i, =, index, ;, i, <, index]
[), ., data, ), ;, }, else, {, try, {, for, (, int, i, =, index, ;, i, <, index]
[;, i, <, index, +, v, ., getDimension, (, ), ;, ++, i, ), {, data, [, i, ], =]
[;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, -, index, ), ;, }]
[<, index, +, v, ., getDimension, (, ), ;, ++, i, ), {, data, [, i, ], =, v, .]
[;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, -, index, ), ;, }]
[+, v, ., getDimension, (, ), ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (]
[;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, -, index, ), ;, }]
[., getDimension, (, ), ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, -]
[), {, data, [, i, ], =, v, ., getEntry, (, i, -, index, ), ;, }, }, catch, (]
[), {, data, [, i, ], =, v, ., getEntry, (, i, -, index, ), ;, }, }, catch, (]
[=, v, ., getEntry, (, i, -, index, ), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (]
[[, i, ], =, v, ., getEntry, (, i, -, index, ), ;, }, }, catch, (, IndexOutOfBoundsException, e, )]
[], =, v, ., getEntry, (, i, -, index, ), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex]
[;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, v, .]
[., getEntry, (, i, -, index, ), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, )]
[), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, v]
[-, index, ), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index]
[), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, v]
[;, checkIndex, (, index, +, v, ., getDimension, (, ), -, 1, ), ;, }, }, }, public, void, setSubVector]
[), ;, checkIndex, (, index, +, v, ., getDimension, (, ), -, 1, ), ;, }, }, }, public, void]
[;, }, }, }, public, void, setSubVector, (, int, index, ,, double, [, ], v, ), throws, OutOfRangeException, {, try]
[), ;, }, }, }, public, void, setSubVector, (, int, index, ,, double, [, ], v, ), throws, OutOfRangeException, {]
[-, 1, ), ;, }, }, }, public, void, setSubVector, (, int, index, ,, double, [, ], v, ), throws]
[+, v, ., getDimension, (, ), -, 1, ), ;, }, }, }, public, void, setSubVector, (, int, index, ,]
[-, 1, ), ;, }, }, }, public, void, setSubVector, (, int, index, ,, double, [, ], v, ), throws]
[., getDimension, (, ), -, 1, ), ;, }, }, }, public, void, setSubVector, (, int, index, ,, double, []
[), ;, }, }, }, public, void, setSubVector, (, int, index, ,, double, [, ], v, ), throws, OutOfRangeException, {]
[;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, v, ., length]
[., arraycopy, (, v, ,, 0, ,, data, ,, index, ,, v, ., length, ), ;, }, catch, (, IndexOutOfBoundsException]
[,, 0, ,, data, ,, index, ,, v, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex]
[,, data, ,, index, ,, v, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index]
[,, index, ,, v, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;]
[,, v, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, v, .]
[., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[;, checkIndex, (, index, +, v, ., length, -, 1, ), ;, }, }, @, Override, public, void, set, (]
[), ;, checkIndex, (, index, +, v, ., length, -, 1, ), ;, }, }, @, Override, public, void, set]
[;, }, }, @, Override, public, void, set, (, double, value, ), {, Arrays, ., fill, (, data, ,, value]
[), ;, }, }, @, Override, public, void, set, (, double, value, ), {, Arrays, ., fill, (, data, ,]
[-, 1, ), ;, }, }, @, Override, public, void, set, (, double, value, ), {, Arrays, ., fill, (]
[+, v, ., length, -, 1, ), ;, }, }, @, Override, public, void, set, (, double, value, ), {]
[-, 1, ), ;, }, }, @, Override, public, void, set, (, double, value, ), {, Arrays, ., fill, (]
[., length, -, 1, ), ;, }, }, @, Override, public, void, set, (, double, value, ), {, Arrays, .]
[), ;, }, }, @, Override, public, void, set, (, double, value, ), {, Arrays, ., fill, (, data, ,]
[;, }, @, Override, public, double, [, ], toArray, (, ), {, return, data, ., clone, (, ), ;, }]
[., fill, (, data, ,, value, ), ;, }, @, Override, public, double, [, ], toArray, (, ), {, return]
[,, value, ), ;, }, @, Override, public, double, [, ], toArray, (, ), {, return, data, ., clone, (]
[), ;, }, @, Override, public, double, [, ], toArray, (, ), {, return, data, ., clone, (, ), ;]
[;, }, @, Override, public, String, toString, (, ), {, return, DEFAULT_FORMAT, ., format, (, this, ), ;, }, @]
[., clone, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, DEFAULT_FORMAT, ., format, (, this]
[;, }, @, Override, protected, void, checkVectorDimensions, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (]
[., format, (, this, ), ;, }, @, Override, protected, void, checkVectorDimensions, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[), ;, }, @, Override, protected, void, checkVectorDimensions, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension]
[;, }, @, Override, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (, data, ., length, !=]
[), ;, }, @, Override, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (, data, ., length]
[., getDimension, (, ), ), ;, }, @, Override, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if]
[), {, throw, new, DimensionMismatchException, (, data, ., length, ,, n, ), ;, }, }, @, Override, public, boolean, isNaN]
[!=, n, ), {, throw, new, DimensionMismatchException, (, data, ., length, ,, n, ), ;, }, }, @, Override, public]
[., length, !=, n, ), {, throw, new, DimensionMismatchException, (, data, ., length, ,, n, ), ;, }, }, @]
[), {, throw, new, DimensionMismatchException, (, data, ., length, ,, n, ), ;, }, }, @, Override, public, boolean, isNaN]
[;, }, }, @, Override, public, boolean, isNaN, (, ), {, for, (, double, v, :, data, ), {, if]
[,, n, ), ;, }, }, @, Override, public, boolean, isNaN, (, ), {, for, (, double, v, :, data]
[., length, ,, n, ), ;, }, }, @, Override, public, boolean, isNaN, (, ), {, for, (, double, v]
[), ;, }, }, @, Override, public, boolean, isNaN, (, ), {, for, (, double, v, :, data, ), {]
[), {, if, (, Double, ., isNaN, (, v, ), ), {, return, true, ;, }, }, return, false, ;]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, isInfinite, (, ), {, if]
[., isNaN, (, v, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean]
[), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, isInfinite, (, ), {]
[;, }, }, return, false, ;, }, @, Override, public, boolean, isInfinite, (, ), {, if, (, isNaN, (, )]
[;, }, @, Override, public, boolean, isInfinite, (, ), {, if, (, isNaN, (, ), ), {, return, false, ;]
[), {, return, false, ;, }, for, (, double, v, :, data, ), {, if, (, Double, ., isInfinite, (]
[;, }, for, (, double, v, :, data, ), {, if, (, Double, ., isInfinite, (, v, ), ), {]
[), {, if, (, Double, ., isInfinite, (, v, ), ), {, return, true, ;, }, }, return, false, ;]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, equals, (, Object, other, )]
[., isInfinite, (, v, ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean]
[), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, equals, (, Object, other]
[;, }, }, return, false, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[), {, return, true, ;, }, if, (, !, (, other, instanceof, RealVector, ), ), {, return, false, ;, }]
[==, other, ), {, return, true, ;, }, if, (, !, (, other, instanceof, RealVector, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, other, instanceof, RealVector, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, other, instanceof, RealVector, ), ), {, return, false, ;, }, RealVector, rhs, =, (]
[), {, return, false, ;, }, RealVector, rhs, =, (, RealVector, ), other, ;, if, (, data, ., length, !=]
[), {, return, false, ;, }, RealVector, rhs, =, (, RealVector, ), other, ;, if, (, data, ., length, !=]
[), ), {, return, false, ;, }, RealVector, rhs, =, (, RealVector, ), other, ;, if, (, data, ., length]
[instanceof, RealVector, ), ), {, return, false, ;, }, RealVector, rhs, =, (, RealVector, ), other, ;, if, (, data]
[;, }, RealVector, rhs, =, (, RealVector, ), other, ;, if, (, data, ., length, !=, rhs, ., getDimension, (]
[;, if, (, data, ., length, !=, rhs, ., getDimension, (, ), ), {, return, false, ;, }, if, (]
[;, if, (, data, ., length, !=, rhs, ., getDimension, (, ), ), {, return, false, ;, }, if, (]
[), {, return, false, ;, }, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (]
[!=, rhs, ., getDimension, (, ), ), {, return, false, ;, }, if, (, rhs, ., isNaN, (, ), )]
[., length, !=, rhs, ., getDimension, (, ), ), {, return, false, ;, }, if, (, rhs, ., isNaN, (]
[), {, return, false, ;, }, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (]
[., getDimension, (, ), ), {, return, false, ;, }, if, (, rhs, ., isNaN, (, ), ), {, return]
[;, }, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, for]
[), {, return, this, ., isNaN, (, ), ;, }, for, (, int, i, =, 0, ;, i, <, data]
[., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, for, (, int, i, =, 0]
[;, }, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if]
[., isNaN, (, ), ;, }, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[;, i, <, data, ., length, ;, ++, i, ), {, if, (, data, [, i, ], !=, rhs, .]
[;, ++, i, ), {, if, (, data, [, i, ], !=, rhs, ., getEntry, (, i, ), ), {]
[<, data, ., length, ;, ++, i, ), {, if, (, data, [, i, ], !=, rhs, ., getEntry, (]
[;, ++, i, ), {, if, (, data, [, i, ], !=, rhs, ., getEntry, (, i, ), ), {]
[., length, ;, ++, i, ), {, if, (, data, [, i, ], !=, rhs, ., getEntry, (, i, )]
[), {, if, (, data, [, i, ], !=, rhs, ., getEntry, (, i, ), ), {, return, false, ;]
[), {, if, (, data, [, i, ], !=, rhs, ., getEntry, (, i, ), ), {, return, false, ;]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, if]
[!=, rhs, ., getEntry, (, i, ), ), {, return, false, ;, }, }, return, true, ;, }, @, Override]
[[, i, ], !=, rhs, ., getEntry, (, i, ), ), {, return, false, ;, }, }, return, true, ;]
[], !=, rhs, ., getEntry, (, i, ), ), {, return, false, ;, }, }, return, true, ;, }, @]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, if]
[., getEntry, (, i, ), ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, int]
[), ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {]
[;, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, )]
[;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 9, ;]
[), {, return, 9, ;, }, return, MathUtils, ., hash, (, data, ), ;, }, @, Override, public, ArrayRealVector, combine]
[;, }, return, MathUtils, ., hash, (, data, ), ;, }, @, Override, public, ArrayRealVector, combine, (, double, a, ,]
[;, }, @, Override, public, ArrayRealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {]
[., hash, (, data, ), ;, }, @, Override, public, ArrayRealVector, combine, (, double, a, ,, double, b, ,, RealVector]
[), ;, }, @, Override, public, ArrayRealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException]
[;, }, @, Override, public, ArrayRealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {]
[., combineToSelf, (, a, ,, b, ,, y, ), ;, }, @, Override, public, ArrayRealVector, combineToSelf, (, double, a, ,]
[,, b, ,, y, ), ;, }, @, Override, public, ArrayRealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector]
[,, y, ), ;, }, @, Override, public, ArrayRealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, )]
[), ;, }, @, Override, public, ArrayRealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException]
[), {, final, double, [, ], yData, =, (, (, ArrayRealVector, ), y, ), ., data, ;, checkVectorDimensions, (, yData]
[instanceof, ArrayRealVector, ), {, final, double, [, ], yData, =, (, (, ArrayRealVector, ), y, ), ., data, ;, checkVectorDimensions]
[;, checkVectorDimensions, (, yData, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, this, ., data]
[., data, ;, checkVectorDimensions, (, yData, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, this]
[), ., data, ;, checkVectorDimensions, (, yData, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ., data, ;, checkVectorDimensions, (, yData, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {]
[), ;, for, (, int, i, =, 0, ;, i, <, this, ., data, ., length, ;, i, ++, )]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, this, ., data, ., length, ;, i]
[;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *]
[;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *, yData]
[<, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, []
[;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *, yData]
[., length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +, b]
[., data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ]]
[), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *, yData, [, i, ]]
[++, ), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *, yData, [, i]
[=, a, *, data, [, i, ], +, b, *, yData, [, i, ], ;, }, }, else, {, checkVectorDimensions]
[[, i, ], =, a, *, data, [, i, ], +, b, *, yData, [, i, ], ;, }, }]
[], =, a, *, data, [, i, ], +, b, *, yData, [, i, ], ;, }, }, else, {]
[;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;, i, <, this]
[+, b, *, yData, [, i, ], ;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int]
[*, data, [, i, ], +, b, *, yData, [, i, ], ;, }, }, else, {, checkVectorDimensions, (, y]
[+, b, *, yData, [, i, ], ;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int]
[[, i, ], +, b, *, yData, [, i, ], ;, }, }, else, {, checkVectorDimensions, (, y, ), ;]
[], +, b, *, yData, [, i, ], ;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (]
[;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;, i, <, this]
[*, yData, [, i, ], ;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =]
[;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;, i, <, this]
[[, i, ], ;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;]
[], ;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {]
[), ;, for, (, int, i, =, 0, ;, i, <, this, ., data, ., length, ;, i, ++, )]
[;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *]
[;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *, y]
[<, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, []
[;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *, y]
[., length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +, b]
[., data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ]]
[), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *, y, ., getEntry, (]
[++, ), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *, y, ., getEntry]
[=, a, *, data, [, i, ], +, b, *, y, ., getEntry, (, i, ), ;, }, }, return]
[[, i, ], =, a, *, data, [, i, ], +, b, *, y, ., getEntry, (, i, ), ;]
[], =, a, *, data, [, i, ], +, b, *, y, ., getEntry, (, i, ), ;, }, }]
[;, }, }, return, this, ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, visitor, .]
[+, b, *, y, ., getEntry, (, i, ), ;, }, }, return, this, ;, }, @, Override, public, double]
[*, data, [, i, ], +, b, *, y, ., getEntry, (, i, ), ;, }, }, return, this, ;]
[+, b, *, y, ., getEntry, (, i, ), ;, }, }, return, this, ;, }, @, Override, public, double]
[[, i, ], +, b, *, y, ., getEntry, (, i, ), ;, }, }, return, this, ;, }, @]
[], +, b, *, y, ., getEntry, (, i, ), ;, }, }, return, this, ;, }, @, Override, public]
[;, }, }, return, this, ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, visitor, .]
[*, y, ., getEntry, (, i, ), ;, }, }, return, this, ;, }, @, Override, public, double, walkInDefaultOrder, (]
[;, }, }, return, this, ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, visitor, .]
[., getEntry, (, i, ), ;, }, }, return, this, ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor]
[), ;, }, }, return, this, ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, visitor]
[;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, visitor, ., start, (, data, ., length]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, visitor, .]
[., start, (, data, ., length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i]
[,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[., length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i]
[,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, visitor]
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, visitor]
[;, i, <, data, ., length, ;, i, ++, ), {, visitor, ., visit, (, i, ,, data, [, i]
[;, i, ++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor]
[<, data, ., length, ;, i, ++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], )]
[;, i, ++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor]
[., length, ;, i, ++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }]
[), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, ., end, (]
[++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, ., end]
[;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ,]
[., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, ., end, (, ), ;, }]
[,, data, [, i, ], ), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double]
[), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor]
[[, i, ], ), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInDefaultOrder, (]
[], ), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor]
[;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, )]
[., end, (, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,]
[;, visitor, ., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start]
[,, end, ), ;, visitor, ., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int]
[), ;, visitor, ., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, visitor, ., visit, (]
[., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i]
[,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, )]
[., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i]
[,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, visitor]
[), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, visitor, ., visit]
[;, i, <=, end, ;, i, ++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], )]
[;, i, ++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor]
[<=, end, ;, i, ++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }]
[;, i, ++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor]
[), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, ., end, (]
[++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, ., end]
[;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, )]
[., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, ., end, (, ), ;, }]
[,, data, [, i, ], ), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double]
[), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor]
[[, i, ], ), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (]
[], ), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor]
[;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, return, walkInDefaultOrder, (, visitor, ), ;, }]
[., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, return, walkInDefaultOrder, (]
[;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, )]
[), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end]
[;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, visitor, ., start, (, data, ., length]
[,, start, ,, end, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, visitor, .]
[,, end, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, visitor, ., start, (]
[), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, visitor, ., start, (, data, .]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, []
[., start, (, data, ., length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i]
[,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, data]
[., length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i]
[,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data]
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, )]
[., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data]
[;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (]
[;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ]]
[<, data, ., length, ;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,]
[;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ]]
[., length, ;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,, data, []
[), {, data, [, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }]
[++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ], ), ;]
[=, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, ., end, (, )]
[[, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, .]
[], =, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, ., end, (]
[;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ,]
[., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, ., end, (, ), ;, }]
[,, data, [, i, ], ), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double]
[), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor]
[[, i, ], ), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInDefaultOrder, (]
[], ), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor]
[;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, )]
[., end, (, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,]
[;, visitor, ., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start]
[,, end, ), ;, visitor, ., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int]
[), ;, visitor, ., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, data, [, i, ]]
[., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i]
[,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, )]
[., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i]
[,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, data]
[), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, data, [, i]
[;, i, <=, end, ;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,]
[;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ]]
[<=, end, ;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,, data, []
[;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ]]
[), {, data, [, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }]
[++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ], ), ;]
[=, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, ., end, (, )]
[[, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, .]
[], =, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, ., end, (]
[;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, )]
[., visit, (, i, ,, data, [, i, ], ), ;, }, return, visitor, ., end, (, ), ;, }]
[,, data, [, i, ], ), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double]
[), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor]
[[, i, ], ), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (]
[], ), ;, }, return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor]
[;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ), {, return, walkInDefaultOrder, (, visitor, ), ;, }]
[., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ), {, return, walkInDefaultOrder, (]
[;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, )]
[), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end]
[;, }, }]
[,, start, ,, end, ), ;, }, }]
[,, end, ), ;, }, }]
[), ;, }, }]
