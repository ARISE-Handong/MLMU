[;, private, static, final, String, GT_ESCAPED, =, "\\x3e", ;, private, final, Map, <, String, ,, String, >, ESCAPED_JS_STRINGS, =, Maps]
[;, private, final, Map, <, String, ,, String, >, ESCAPED_JS_STRINGS, =, Maps, ., newHashMap, (, ), ;, private, static, final]
[;, private, static, final, char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,, '3', ,, '4', ,]
[., newHashMap, (, ), ;, private, static, final, char, [, ], HEX_CHARS, =, {, '0', ,, '1', ,, '2', ,]
[;, private, final, CodeConsumer, cc, ;, private, final, CharsetEncoder, outputCharsetEncoder, ;, private, final, boolean, preferSingleQuotes, ;, private, final, boolean, trustedStrings]
[,, '1', ,, '2', ,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a']
[,, '2', ,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b']
[,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,, 'c']
[,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,, 'c', ,, 'd']
[,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,, 'c', ,, 'd', ,, 'e']
[,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,, 'c', ,, 'd', ,, 'e', ,, 'f']
[,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,, 'c', ,, 'd', ,, 'e', ,, 'f', }, ;]
[,, '8', ,, '9', ,, 'a', ,, 'b', ,, 'c', ,, 'd', ,, 'e', ,, 'f', }, ;, private, final]
[,, '9', ,, 'a', ,, 'b', ,, 'c', ,, 'd', ,, 'e', ,, 'f', }, ;, private, final, CodeConsumer, cc]
[,, 'a', ,, 'b', ,, 'c', ,, 'd', ,, 'e', ,, 'f', }, ;, private, final, CodeConsumer, cc, ;, private]
[,, 'b', ,, 'c', ,, 'd', ,, 'e', ,, 'f', }, ;, private, final, CodeConsumer, cc, ;, private, final, CharsetEncoder]
[,, 'c', ,, 'd', ,, 'e', ,, 'f', }, ;, private, final, CodeConsumer, cc, ;, private, final, CharsetEncoder, outputCharsetEncoder, ;]
[,, 'd', ,, 'e', ,, 'f', }, ;, private, final, CodeConsumer, cc, ;, private, final, CharsetEncoder, outputCharsetEncoder, ;, private, final]
[,, 'e', ,, 'f', }, ;, private, final, CodeConsumer, cc, ;, private, final, CharsetEncoder, outputCharsetEncoder, ;, private, final, boolean, preferSingleQuotes]
[,, 'f', }, ;, private, final, CodeConsumer, cc, ;, private, final, CharsetEncoder, outputCharsetEncoder, ;, private, final, boolean, preferSingleQuotes, ;, private]
[}, ;, private, final, CodeConsumer, cc, ;, private, final, CharsetEncoder, outputCharsetEncoder, ;, private, final, boolean, preferSingleQuotes, ;, private, final, boolean]
[=, consumer, ;, outputCharsetEncoder, =, null, ;, preferSingleQuotes, =, false, ;, trustedStrings, =, true, ;, }, static, CodeGenerator, forCostEstimation, (]
[;, outputCharsetEncoder, =, null, ;, preferSingleQuotes, =, false, ;, trustedStrings, =, true, ;, }, static, CodeGenerator, forCostEstimation, (, CodeConsumer, consumer]
[=, null, ;, preferSingleQuotes, =, false, ;, trustedStrings, =, true, ;, }, static, CodeGenerator, forCostEstimation, (, CodeConsumer, consumer, ), {]
[;, preferSingleQuotes, =, false, ;, trustedStrings, =, true, ;, }, static, CodeGenerator, forCostEstimation, (, CodeConsumer, consumer, ), {, return, new]
[=, false, ;, trustedStrings, =, true, ;, }, static, CodeGenerator, forCostEstimation, (, CodeConsumer, consumer, ), {, return, new, CodeGenerator, (]
[;, trustedStrings, =, true, ;, }, static, CodeGenerator, forCostEstimation, (, CodeConsumer, consumer, ), {, return, new, CodeGenerator, (, consumer, )]
[=, true, ;, }, static, CodeGenerator, forCostEstimation, (, CodeConsumer, consumer, ), {, return, new, CodeGenerator, (, consumer, ), ;, }]
[;, }, static, CodeGenerator, forCostEstimation, (, CodeConsumer, consumer, ), {, return, new, CodeGenerator, (, consumer, ), ;, }, CodeGenerator, (]
[;, }, CodeGenerator, (, CodeConsumer, consumer, ,, CompilerOptions, options, ), {, cc, =, consumer, ;, Charset, outputCharset, =, options, .]
[), ;, }, CodeGenerator, (, CodeConsumer, consumer, ,, CompilerOptions, options, ), {, cc, =, consumer, ;, Charset, outputCharset, =, options]
[=, consumer, ;, Charset, outputCharset, =, options, ., getOutputCharset, (, ), ;, if, (, outputCharset, ==, null, ||, outputCharset, ==]
[;, Charset, outputCharset, =, options, ., getOutputCharset, (, ), ;, if, (, outputCharset, ==, null, ||, outputCharset, ==, Charsets, .]
[;, if, (, outputCharset, ==, null, ||, outputCharset, ==, Charsets, ., US_ASCII, ), {, this, ., outputCharsetEncoder, =, null, ;]
[., getOutputCharset, (, ), ;, if, (, outputCharset, ==, null, ||, outputCharset, ==, Charsets, ., US_ASCII, ), {, this, .]
[), {, this, ., outputCharsetEncoder, =, null, ;, }, else, {, this, ., outputCharsetEncoder, =, outputCharset, ., newEncoder, (, )]
[||, outputCharset, ==, Charsets, ., US_ASCII, ), {, this, ., outputCharsetEncoder, =, null, ;, }, else, {, this, ., outputCharsetEncoder]
[==, null, ||, outputCharset, ==, Charsets, ., US_ASCII, ), {, this, ., outputCharsetEncoder, =, null, ;, }, else, {, this]
[||, outputCharset, ==, Charsets, ., US_ASCII, ), {, this, ., outputCharsetEncoder, =, null, ;, }, else, {, this, ., outputCharsetEncoder]
[), {, this, ., outputCharsetEncoder, =, null, ;, }, else, {, this, ., outputCharsetEncoder, =, outputCharset, ., newEncoder, (, )]
[==, Charsets, ., US_ASCII, ), {, this, ., outputCharsetEncoder, =, null, ;, }, else, {, this, ., outputCharsetEncoder, =, outputCharset]
[), {, this, ., outputCharsetEncoder, =, null, ;, }, else, {, this, ., outputCharsetEncoder, =, outputCharset, ., newEncoder, (, )]
[., US_ASCII, ), {, this, ., outputCharsetEncoder, =, null, ;, }, else, {, this, ., outputCharsetEncoder, =, outputCharset, ., newEncoder]
[=, null, ;, }, else, {, this, ., outputCharsetEncoder, =, outputCharset, ., newEncoder, (, ), ;, }, this, ., preferSingleQuotes]
[., outputCharsetEncoder, =, null, ;, }, else, {, this, ., outputCharsetEncoder, =, outputCharset, ., newEncoder, (, ), ;, }, this]
[;, }, else, {, this, ., outputCharsetEncoder, =, outputCharset, ., newEncoder, (, ), ;, }, this, ., preferSingleQuotes, =, options]
[=, outputCharset, ., newEncoder, (, ), ;, }, this, ., preferSingleQuotes, =, options, ., preferSingleQuotes, ;, this, ., trustedStrings, =]
[., outputCharsetEncoder, =, outputCharset, ., newEncoder, (, ), ;, }, this, ., preferSingleQuotes, =, options, ., preferSingleQuotes, ;, this, .]
[;, }, this, ., preferSingleQuotes, =, options, ., preferSingleQuotes, ;, this, ., trustedStrings, =, options, ., trustedStrings, ;, }, public]
[., newEncoder, (, ), ;, }, this, ., preferSingleQuotes, =, options, ., preferSingleQuotes, ;, this, ., trustedStrings, =, options, .]
[=, options, ., preferSingleQuotes, ;, this, ., trustedStrings, =, options, ., trustedStrings, ;, }, public, void, tagAsStrict, (, ), {]
[., preferSingleQuotes, =, options, ., preferSingleQuotes, ;, this, ., trustedStrings, =, options, ., trustedStrings, ;, }, public, void, tagAsStrict, (]
[;, this, ., trustedStrings, =, options, ., trustedStrings, ;, }, public, void, tagAsStrict, (, ), {, add, (, "'use strict';", )]
[., preferSingleQuotes, ;, this, ., trustedStrings, =, options, ., trustedStrings, ;, }, public, void, tagAsStrict, (, ), {, add, (]
[=, options, ., trustedStrings, ;, }, public, void, tagAsStrict, (, ), {, add, (, "'use strict';", ), ;, }, void, add]
[., trustedStrings, =, options, ., trustedStrings, ;, }, public, void, tagAsStrict, (, ), {, add, (, "'use strict';", ), ;, }]
[;, }, public, void, tagAsStrict, (, ), {, add, (, "'use strict';", ), ;, }, void, add, (, String, str, )]
[., trustedStrings, ;, }, public, void, tagAsStrict, (, ), {, add, (, "'use strict';", ), ;, }, void, add, (, String]
[;, }, void, add, (, String, str, ), {, cc, ., add, (, str, ), ;, }, private, void, addIdentifier]
[), ;, }, void, add, (, String, str, ), {, cc, ., add, (, str, ), ;, }, private, void]
[;, }, private, void, addIdentifier, (, String, identifier, ), {, cc, ., addIdentifier, (, identifierEscape, (, identifier, ), ), ;]
[., add, (, str, ), ;, }, private, void, addIdentifier, (, String, identifier, ), {, cc, ., addIdentifier, (, identifierEscape]
[), ;, }, private, void, addIdentifier, (, String, identifier, ), {, cc, ., addIdentifier, (, identifierEscape, (, identifier, ), )]
[;, }, void, add, (, Node, n, ), {, add, (, n, ,, Context, ., OTHER, ), ;, }, void]
[., addIdentifier, (, identifierEscape, (, identifier, ), ), ;, }, void, add, (, Node, n, ), {, add, (, n]
[), ;, }, void, add, (, Node, n, ), {, add, (, n, ,, Context, ., OTHER, ), ;, }]
[), ), ;, }, void, add, (, Node, n, ), {, add, (, n, ,, Context, ., OTHER, ), ;]
[;, }, void, add, (, Node, n, ,, Context, context, ), {, if, (, !, cc, ., continueProcessing, (, )]
[,, Context, ., OTHER, ), ;, }, void, add, (, Node, n, ,, Context, context, ), {, if, (, !]
[), ;, }, void, add, (, Node, n, ,, Context, context, ), {, if, (, !, cc, ., continueProcessing, (]
[., OTHER, ), ;, }, void, add, (, Node, n, ,, Context, context, ), {, if, (, !, cc, .]
[), {, return, ;, }, int, type, =, n, ., getType, (, ), ;, String, opstr, =, NodeUtil, ., opToStr]
[), {, return, ;, }, int, type, =, n, ., getType, (, ), ;, String, opstr, =, NodeUtil, ., opToStr]
[., continueProcessing, (, ), ), {, return, ;, }, int, type, =, n, ., getType, (, ), ;, String, opstr]
[;, String, opstr, =, NodeUtil, ., opToStr, (, type, ), ;, int, childCount, =, n, ., getChildCount, (, ), ;]
[., getType, (, ), ;, String, opstr, =, NodeUtil, ., opToStr, (, type, ), ;, int, childCount, =, n, .]
[;, int, childCount, =, n, ., getChildCount, (, ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, Node]
[., opToStr, (, type, ), ;, int, childCount, =, n, ., getChildCount, (, ), ;, Node, first, =, n, .]
[), ;, int, childCount, =, n, ., getChildCount, (, ), ;, Node, first, =, n, ., getFirstChild, (, ), ;]
[;, Node, first, =, n, ., getFirstChild, (, ), ;, Node, last, =, n, ., getLastChild, (, ), ;, if]
[., getChildCount, (, ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, Node, last, =, n, ., getLastChild]
[;, Node, last, =, n, ., getLastChild, (, ), ;, if, (, opstr, !=, null, &&, first, !=, last, )]
[., getFirstChild, (, ), ;, Node, last, =, n, ., getLastChild, (, ), ;, if, (, opstr, !=, null, &&]
[;, if, (, opstr, !=, null, &&, first, !=, last, ), {, Preconditions, ., checkState, (, childCount, ==, 2, ,]
[., getLastChild, (, ), ;, if, (, opstr, !=, null, &&, first, !=, last, ), {, Preconditions, ., checkState, (]
[), {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, ), ;, int, p, =]
[&&, first, !=, last, ), {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, )]
[!=, null, &&, first, !=, last, ), {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,]
[&&, first, !=, last, ), {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, )]
[), {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, ), ;, int, p, =]
[!=, last, ), {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, ), ;, int]
[), {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, ), ;, int, p, =]
[;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, Context, rhsContext, =, getContextForNoInOperator, (, context, ), ;, if]
[., checkState, (, childCount, ==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, ), ;, int, p, =, NodeUtil, ., precedence]
[,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, Context, rhsContext]
[==, 2, ,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;]
[,, "Bad binary operator \"%s\": expected 2 arguments but got %s", ,, opstr, ,, childCount, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, Context, rhsContext]
[,, opstr, ,, childCount, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, Context, rhsContext, =, getContextForNoInOperator]
[,, childCount, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, Context, rhsContext, =, getContextForNoInOperator, (, context]
[), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, Context, rhsContext, =, getContextForNoInOperator, (, context, ), ;]
[;, Context, rhsContext, =, getContextForNoInOperator, (, context, ), ;, if, (, last, ., getType, (, ), ==, type, &&, NodeUtil]
[., precedence, (, type, ), ;, Context, rhsContext, =, getContextForNoInOperator, (, context, ), ;, if, (, last, ., getType, (]
[), ;, Context, rhsContext, =, getContextForNoInOperator, (, context, ), ;, if, (, last, ., getType, (, ), ==, type, &&]
[;, if, (, last, ., getType, (, ), ==, type, &&, NodeUtil, ., isAssociative, (, type, ), ), {, addExpr]
[), ;, if, (, last, ., getType, (, ), ==, type, &&, NodeUtil, ., isAssociative, (, type, ), ), {]
[), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;]
[&&, NodeUtil, ., isAssociative, (, type, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, .]
[==, type, &&, NodeUtil, ., isAssociative, (, type, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;]
[., getType, (, ), ==, type, &&, NodeUtil, ., isAssociative, (, type, ), ), {, addExpr, (, first, ,, p]
[&&, NodeUtil, ., isAssociative, (, type, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, .]
[), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;]
[., isAssociative, (, type, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (]
[), ), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, )]
[;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }]
[,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p]
[,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext]
[), ;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;]
[;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n, )]
[., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, if]
[,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, if, (, NodeUtil, ., isAssignmentOp]
[), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n]
[;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, NodeUtil, ., isAssignmentOp, (, last, ), ), {]
[,, p, ,, rhsContext, ), ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, NodeUtil, ., isAssignmentOp]
[,, rhsContext, ), ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, NodeUtil, ., isAssignmentOp, (, last]
[), ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, NodeUtil, ., isAssignmentOp, (, last, ), )]
[), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;]
[&&, NodeUtil, ., isAssignmentOp, (, last, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, .]
[., isAssignmentOp, (, n, ), &&, NodeUtil, ., isAssignmentOp, (, last, ), ), {, addExpr, (, first, ,, p, ,]
[), &&, NodeUtil, ., isAssignmentOp, (, last, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;, cc]
[), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;]
[., isAssignmentOp, (, last, ), ), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (]
[), ), {, addExpr, (, first, ,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, )]
[;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }]
[,, p, ,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p]
[,, context, ), ;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext]
[), ;, cc, ., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;]
[;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, {, unrollBinaryOperator, (, n, ,, type, ,, opstr]
[., addOp, (, opstr, ,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, {]
[,, true, ), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, {, unrollBinaryOperator, (, n, ,]
[), ;, addExpr, (, last, ,, p, ,, rhsContext, ), ;, }, else, {, unrollBinaryOperator, (, n, ,, type, ,]
[;, }, else, {, unrollBinaryOperator, (, n, ,, type, ,, opstr, ,, context, ,, rhsContext, ,, p, ,, p, +]
[,, p, ,, rhsContext, ), ;, }, else, {, unrollBinaryOperator, (, n, ,, type, ,, opstr, ,, context, ,, rhsContext]
[,, rhsContext, ), ;, }, else, {, unrollBinaryOperator, (, n, ,, type, ,, opstr, ,, context, ,, rhsContext, ,, p]
[), ;, }, else, {, unrollBinaryOperator, (, n, ,, type, ,, opstr, ,, context, ,, rhsContext, ,, p, ,, p]
[;, }, return, ;, }, cc, ., startSourceMapping, (, n, ), ;, switch, (, type, ), {, case, Token, .]
[,, type, ,, opstr, ,, context, ,, rhsContext, ,, p, ,, p, +, 1, ), ;, }, return, ;, }]
[,, opstr, ,, context, ,, rhsContext, ,, p, ,, p, +, 1, ), ;, }, return, ;, }, cc, .]
[,, context, ,, rhsContext, ,, p, ,, p, +, 1, ), ;, }, return, ;, }, cc, ., startSourceMapping, (]
[,, rhsContext, ,, p, ,, p, +, 1, ), ;, }, return, ;, }, cc, ., startSourceMapping, (, n, )]
[,, p, ,, p, +, 1, ), ;, }, return, ;, }, cc, ., startSourceMapping, (, n, ), ;, switch]
[,, p, +, 1, ), ;, }, return, ;, }, cc, ., startSourceMapping, (, n, ), ;, switch, (, type]
[), ;, }, return, ;, }, cc, ., startSourceMapping, (, n, ), ;, switch, (, type, ), {, case, Token]
[+, 1, ), ;, }, return, ;, }, cc, ., startSourceMapping, (, n, ), ;, switch, (, type, ), {]
[), ;, }, return, ;, }, cc, ., startSourceMapping, (, n, ), ;, switch, (, type, ), {, case, Token]
[;, switch, (, type, ), {, case, Token, ., TRY, :, {, Preconditions, ., checkState, (, first, ., getNext, (]
[., startSourceMapping, (, n, ), ;, switch, (, type, ), {, case, Token, ., TRY, :, {, Preconditions, ., checkState]
[), ;, switch, (, type, ), {, case, Token, ., TRY, :, {, Preconditions, ., checkState, (, first, ., getNext]
[), {, case, Token, ., TRY, :, {, Preconditions, ., checkState, (, first, ., getNext, (, ), ., isBlock, (]
[:, {, Preconditions, ., checkState, (, first, ., getNext, (, ), ., isBlock, (, ), &&, !, first, ., getNext]
[., TRY, :, {, Preconditions, ., checkState, (, first, ., getNext, (, ), ., isBlock, (, ), &&, !, first]
[;, Preconditions, ., checkState, (, childCount, >=, 2, &&, childCount, <=, 3, ), ;, add, (, "try", ), ;, add]
[., checkState, (, first, ., getNext, (, ), ., isBlock, (, ), &&, !, first, ., getNext, (, ), .]
[), ;, Preconditions, ., checkState, (, childCount, >=, 2, &&, childCount, <=, 3, ), ;, add, (, "try", ), ;]
[&&, !, first, ., getNext, (, ), ., hasMoreThanOneChild, (, ), ), ;, Preconditions, ., checkState, (, childCount, >=, 2]
[., isBlock, (, ), &&, !, first, ., getNext, (, ), ., hasMoreThanOneChild, (, ), ), ;, Preconditions, ., checkState]
[., getNext, (, ), ., isBlock, (, ), &&, !, first, ., getNext, (, ), ., hasMoreThanOneChild, (, ), )]
[), ;, Preconditions, ., checkState, (, childCount, >=, 2, &&, childCount, <=, 3, ), ;, add, (, "try", ), ;]
[), ;, Preconditions, ., checkState, (, childCount, >=, 2, &&, childCount, <=, 3, ), ;, add, (, "try", ), ;]
[., hasMoreThanOneChild, (, ), ), ;, Preconditions, ., checkState, (, childCount, >=, 2, &&, childCount, <=, 3, ), ;, add]
[., getNext, (, ), ., hasMoreThanOneChild, (, ), ), ;, Preconditions, ., checkState, (, childCount, >=, 2, &&, childCount, <=]
[;, add, (, "try", ), ;, add, (, first, ,, Context, ., PRESERVE_BLOCK, ), ;, Node, catchblock, =, first, .]
[., checkState, (, childCount, >=, 2, &&, childCount, <=, 3, ), ;, add, (, "try", ), ;, add, (, first]
[), ;, add, (, "try", ), ;, add, (, first, ,, Context, ., PRESERVE_BLOCK, ), ;, Node, catchblock, =, first]
[&&, childCount, <=, 3, ), ;, add, (, "try", ), ;, add, (, first, ,, Context, ., PRESERVE_BLOCK, ), ;]
[>=, 2, &&, childCount, <=, 3, ), ;, add, (, "try", ), ;, add, (, first, ,, Context, ., PRESERVE_BLOCK]
[&&, childCount, <=, 3, ), ;, add, (, "try", ), ;, add, (, first, ,, Context, ., PRESERVE_BLOCK, ), ;]
[), ;, add, (, "try", ), ;, add, (, first, ,, Context, ., PRESERVE_BLOCK, ), ;, Node, catchblock, =, first]
[<=, 3, ), ;, add, (, "try", ), ;, add, (, first, ,, Context, ., PRESERVE_BLOCK, ), ;, Node, catchblock]
[), ;, add, (, "try", ), ;, add, (, first, ,, Context, ., PRESERVE_BLOCK, ), ;, Node, catchblock, =, first]
[;, add, (, first, ,, Context, ., PRESERVE_BLOCK, ), ;, Node, catchblock, =, first, ., getNext, (, ), ., getFirstChild]
[), ;, add, (, first, ,, Context, ., PRESERVE_BLOCK, ), ;, Node, catchblock, =, first, ., getNext, (, ), .]
[;, Node, catchblock, =, first, ., getNext, (, ), ., getFirstChild, (, ), ;, if, (, catchblock, !=, null, )]
[,, Context, ., PRESERVE_BLOCK, ), ;, Node, catchblock, =, first, ., getNext, (, ), ., getFirstChild, (, ), ;, if]
[), ;, Node, catchblock, =, first, ., getNext, (, ), ., getFirstChild, (, ), ;, if, (, catchblock, !=, null]
[., PRESERVE_BLOCK, ), ;, Node, catchblock, =, first, ., getNext, (, ), ., getFirstChild, (, ), ;, if, (, catchblock]
[;, if, (, catchblock, !=, null, ), {, add, (, catchblock, ), ;, }, if, (, childCount, ==, 3, )]
[., getFirstChild, (, ), ;, if, (, catchblock, !=, null, ), {, add, (, catchblock, ), ;, }, if, (]
[., getNext, (, ), ., getFirstChild, (, ), ;, if, (, catchblock, !=, null, ), {, add, (, catchblock, )]
[), {, add, (, catchblock, ), ;, }, if, (, childCount, ==, 3, ), {, add, (, "finally", ), ;]
[!=, null, ), {, add, (, catchblock, ), ;, }, if, (, childCount, ==, 3, ), {, add, (, "finally"]
[), {, add, (, catchblock, ), ;, }, if, (, childCount, ==, 3, ), {, add, (, "finally", ), ;]
[;, }, if, (, childCount, ==, 3, ), {, add, (, "finally", ), ;, add, (, last, ,, Context, .]
[), ;, }, if, (, childCount, ==, 3, ), {, add, (, "finally", ), ;, add, (, last, ,, Context]
[), {, add, (, "finally", ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, }, break, ;, }]
[==, 3, ), {, add, (, "finally", ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, }, break]
[), {, add, (, "finally", ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, }, break, ;, }]
[;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, }, break, ;, }, case, Token, ., CATCH, :, Preconditions]
[), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, }, break, ;, }, case, Token, ., CATCH, :]
[;, }, break, ;, }, case, Token, ., CATCH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add]
[,, Context, ., PRESERVE_BLOCK, ), ;, }, break, ;, }, case, Token, ., CATCH, :, Preconditions, ., checkState, (, childCount]
[), ;, }, break, ;, }, case, Token, ., CATCH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;]
[., PRESERVE_BLOCK, ), ;, }, break, ;, }, case, Token, ., CATCH, :, Preconditions, ., checkState, (, childCount, ==, 2]
[:, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "catch(", ), ;, add, (, first, ), ;]
[., CATCH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "catch(", ), ;, add, (, first]
[;, add, (, "catch(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, add, (, last, ,]
[., checkState, (, childCount, ==, 2, ), ;, add, (, "catch(", ), ;, add, (, first, ), ;, add, (]
[), ;, add, (, "catch(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, add, (, last]
[==, 2, ), ;, add, (, "catch(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, add]
[), ;, add, (, "catch(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, add, (, last]
[;, add, (, first, ), ;, add, (, ")", ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;]
[), ;, add, (, first, ), ;, add, (, ")", ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, )]
[;, add, (, ")", ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, .]
[), ;, add, (, ")", ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token]
[;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., THROW, :, Preconditions, ., checkState]
[), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., THROW, :, Preconditions, .]
[;, break, ;, case, Token, ., THROW, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "throw"]
[,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., THROW, :, Preconditions, ., checkState, (, childCount, ==, 1]
[), ;, break, ;, case, Token, ., THROW, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (]
[., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., THROW, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;]
[:, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "throw", ), ;, add, (, first, ), ;]
[., THROW, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "throw", ), ;, add, (, first]
[;, add, (, "throw", ), ;, add, (, first, ), ;, cc, ., endStatement, (, true, ), ;, break, ;]
[., checkState, (, childCount, ==, 1, ), ;, add, (, "throw", ), ;, add, (, first, ), ;, cc, .]
[), ;, add, (, "throw", ), ;, add, (, first, ), ;, cc, ., endStatement, (, true, ), ;, break]
[==, 1, ), ;, add, (, "throw", ), ;, add, (, first, ), ;, cc, ., endStatement, (, true, )]
[), ;, add, (, "throw", ), ;, add, (, first, ), ;, cc, ., endStatement, (, true, ), ;, break]
[;, add, (, first, ), ;, cc, ., endStatement, (, true, ), ;, break, ;, case, Token, ., RETURN, :]
[), ;, add, (, first, ), ;, cc, ., endStatement, (, true, ), ;, break, ;, case, Token, ., RETURN]
[;, cc, ., endStatement, (, true, ), ;, break, ;, case, Token, ., RETURN, :, add, (, "return", ), ;]
[), ;, cc, ., endStatement, (, true, ), ;, break, ;, case, Token, ., RETURN, :, add, (, "return", )]
[;, break, ;, case, Token, ., RETURN, :, add, (, "return", ), ;, if, (, childCount, ==, 1, ), {]
[., endStatement, (, true, ), ;, break, ;, case, Token, ., RETURN, :, add, (, "return", ), ;, if, (]
[), ;, break, ;, case, Token, ., RETURN, :, add, (, "return", ), ;, if, (, childCount, ==, 1, )]
[:, add, (, "return", ), ;, if, (, childCount, ==, 1, ), {, add, (, first, ), ;, }, else]
[., RETURN, :, add, (, "return", ), ;, if, (, childCount, ==, 1, ), {, add, (, first, ), ;]
[;, if, (, childCount, ==, 1, ), {, add, (, first, ), ;, }, else, {, Preconditions, ., checkState, (]
[), ;, if, (, childCount, ==, 1, ), {, add, (, first, ), ;, }, else, {, Preconditions, ., checkState]
[), {, add, (, first, ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, }]
[==, 1, ), {, add, (, first, ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 0, )]
[), {, add, (, first, ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, }]
[;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, }, cc, ., endStatement, (, ), ;]
[), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, }, cc, ., endStatement, (, )]
[;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., VAR, :, if, (, first, !=, null]
[., checkState, (, childCount, ==, 0, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, .]
[), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., VAR, :, if, (, first, !=]
[==, 0, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., VAR, :, if, (]
[), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., VAR, :, if, (, first, !=]
[;, break, ;, case, Token, ., VAR, :, if, (, first, !=, null, ), {, add, (, "var ", ), ;]
[., endStatement, (, ), ;, break, ;, case, Token, ., VAR, :, if, (, first, !=, null, ), {, add]
[:, if, (, first, !=, null, ), {, add, (, "var ", ), ;, addList, (, first, ,, false, ,, getContextForNoInOperator]
[., VAR, :, if, (, first, !=, null, ), {, add, (, "var ", ), ;, addList, (, first, ,, false]
[), {, add, (, "var ", ), ;, addList, (, first, ,, false, ,, getContextForNoInOperator, (, context, ), ), ;, }]
[!=, null, ), {, add, (, "var ", ), ;, addList, (, first, ,, false, ,, getContextForNoInOperator, (, context, ), )]
[), {, add, (, "var ", ), ;, addList, (, first, ,, false, ,, getContextForNoInOperator, (, context, ), ), ;, }]
[;, addList, (, first, ,, false, ,, getContextForNoInOperator, (, context, ), ), ;, }, break, ;, case, Token, ., LABEL_NAME]
[), ;, addList, (, first, ,, false, ,, getContextForNoInOperator, (, context, ), ), ;, }, break, ;, case, Token, .]
[;, }, break, ;, case, Token, ., LABEL_NAME, :, Preconditions, ., checkState, (, !, n, ., getString, (, ), .]
[,, false, ,, getContextForNoInOperator, (, context, ), ), ;, }, break, ;, case, Token, ., LABEL_NAME, :, Preconditions, ., checkState]
[,, getContextForNoInOperator, (, context, ), ), ;, }, break, ;, case, Token, ., LABEL_NAME, :, Preconditions, ., checkState, (, !]
[), ;, }, break, ;, case, Token, ., LABEL_NAME, :, Preconditions, ., checkState, (, !, n, ., getString, (, )]
[), ), ;, }, break, ;, case, Token, ., LABEL_NAME, :, Preconditions, ., checkState, (, !, n, ., getString, (]
[:, Preconditions, ., checkState, (, !, n, ., getString, (, ), ., isEmpty, (, ), ), ;, addIdentifier, (, n]
[., LABEL_NAME, :, Preconditions, ., checkState, (, !, n, ., getString, (, ), ., isEmpty, (, ), ), ;, addIdentifier]
[;, addIdentifier, (, n, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, if, (, first]
[., checkState, (, !, n, ., getString, (, ), ., isEmpty, (, ), ), ;, addIdentifier, (, n, ., getString]
[), ;, addIdentifier, (, n, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, if, (]
[), ;, addIdentifier, (, n, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, if, (]
[., isEmpty, (, ), ), ;, addIdentifier, (, n, ., getString, (, ), ), ;, break, ;, case, Token, .]
[., getString, (, ), ., isEmpty, (, ), ), ;, addIdentifier, (, n, ., getString, (, ), ), ;, break]
[;, break, ;, case, Token, ., NAME, :, if, (, first, ==, null, ||, first, ., isEmpty, (, ), )]
[), ;, break, ;, case, Token, ., NAME, :, if, (, first, ==, null, ||, first, ., isEmpty, (, )]
[., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, if, (, first, ==, null, ||, first]
[:, if, (, first, ==, null, ||, first, ., isEmpty, (, ), ), {, addIdentifier, (, n, ., getString, (]
[., NAME, :, if, (, first, ==, null, ||, first, ., isEmpty, (, ), ), {, addIdentifier, (, n, .]
[), {, addIdentifier, (, n, ., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==]
[||, first, ., isEmpty, (, ), ), {, addIdentifier, (, n, ., getString, (, ), ), ;, }, else, {]
[==, null, ||, first, ., isEmpty, (, ), ), {, addIdentifier, (, n, ., getString, (, ), ), ;, }]
[||, first, ., isEmpty, (, ), ), {, addIdentifier, (, n, ., getString, (, ), ), ;, }, else, {]
[), {, addIdentifier, (, n, ., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==]
[., isEmpty, (, ), ), {, addIdentifier, (, n, ., getString, (, ), ), ;, }, else, {, Preconditions, .]
[;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, addIdentifier, (, n, ., getString, (, )]
[), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, addIdentifier, (, n, ., getString, (]
[., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, addIdentifier, (]
[;, addIdentifier, (, n, ., getString, (, ), ), ;, cc, ., addOp, (, "=", ,, true, ), ;, if]
[., checkState, (, childCount, ==, 1, ), ;, addIdentifier, (, n, ., getString, (, ), ), ;, cc, ., addOp]
[), ;, addIdentifier, (, n, ., getString, (, ), ), ;, cc, ., addOp, (, "=", ,, true, ), ;]
[==, 1, ), ;, addIdentifier, (, n, ., getString, (, ), ), ;, cc, ., addOp, (, "=", ,, true]
[), ;, addIdentifier, (, n, ., getString, (, ), ), ;, cc, ., addOp, (, "=", ,, true, ), ;]
[;, cc, ., addOp, (, "=", ,, true, ), ;, if, (, first, ., isComma, (, ), ), {, addExpr]
[), ;, cc, ., addOp, (, "=", ,, true, ), ;, if, (, first, ., isComma, (, ), ), {]
[., getString, (, ), ), ;, cc, ., addOp, (, "=", ,, true, ), ;, if, (, first, ., isComma]
[;, if, (, first, ., isComma, (, ), ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, .]
[., addOp, (, "=", ,, true, ), ;, if, (, first, ., isComma, (, ), ), {, addExpr, (, first]
[,, true, ), ;, if, (, first, ., isComma, (, ), ), {, addExpr, (, first, ,, NodeUtil, ., precedence]
[), ;, if, (, first, ., isComma, (, ), ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token]
[), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., ASSIGN, ), ,, Context, ., OTHER, ), ;]
[., isComma, (, ), ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., ASSIGN, ), ,, Context]
[;, }, else, {, addExpr, (, first, ,, 0, ,, getContextForNoInOperator, (, context, ), ), ;, }, }, break, ;]
[,, NodeUtil, ., precedence, (, Token, ., ASSIGN, ), ,, Context, ., OTHER, ), ;, }, else, {, addExpr, (]
[,, Context, ., OTHER, ), ;, }, else, {, addExpr, (, first, ,, 0, ,, getContextForNoInOperator, (, context, ), )]
[., precedence, (, Token, ., ASSIGN, ), ,, Context, ., OTHER, ), ;, }, else, {, addExpr, (, first, ,]
[), ,, Context, ., OTHER, ), ;, }, else, {, addExpr, (, first, ,, 0, ,, getContextForNoInOperator, (, context, )]
[., ASSIGN, ), ,, Context, ., OTHER, ), ;, }, else, {, addExpr, (, first, ,, 0, ,, getContextForNoInOperator, (]
[), ;, }, else, {, addExpr, (, first, ,, 0, ,, getContextForNoInOperator, (, context, ), ), ;, }, }, break]
[., OTHER, ), ;, }, else, {, addExpr, (, first, ,, 0, ,, getContextForNoInOperator, (, context, ), ), ;, }]
[;, }, }, break, ;, case, Token, ., ARRAYLIT, :, add, (, "[", ), ;, addArrayList, (, first, ), ;]
[,, 0, ,, getContextForNoInOperator, (, context, ), ), ;, }, }, break, ;, case, Token, ., ARRAYLIT, :, add, (]
[,, getContextForNoInOperator, (, context, ), ), ;, }, }, break, ;, case, Token, ., ARRAYLIT, :, add, (, "[", )]
[), ;, }, }, break, ;, case, Token, ., ARRAYLIT, :, add, (, "[", ), ;, addArrayList, (, first, )]
[), ), ;, }, }, break, ;, case, Token, ., ARRAYLIT, :, add, (, "[", ), ;, addArrayList, (, first]
[:, add, (, "[", ), ;, addArrayList, (, first, ), ;, add, (, "]", ), ;, break, ;, case, Token]
[., ARRAYLIT, :, add, (, "[", ), ;, addArrayList, (, first, ), ;, add, (, "]", ), ;, break, ;]
[;, addArrayList, (, first, ), ;, add, (, "]", ), ;, break, ;, case, Token, ., PARAM_LIST, :, add, (]
[), ;, addArrayList, (, first, ), ;, add, (, "]", ), ;, break, ;, case, Token, ., PARAM_LIST, :, add]
[;, add, (, "]", ), ;, break, ;, case, Token, ., PARAM_LIST, :, add, (, "(", ), ;, addList, (]
[), ;, add, (, "]", ), ;, break, ;, case, Token, ., PARAM_LIST, :, add, (, "(", ), ;, addList]
[;, break, ;, case, Token, ., PARAM_LIST, :, add, (, "(", ), ;, addList, (, first, ), ;, add, (]
[), ;, break, ;, case, Token, ., PARAM_LIST, :, add, (, "(", ), ;, addList, (, first, ), ;, add]
[:, add, (, "(", ), ;, addList, (, first, ), ;, add, (, ")", ), ;, break, ;, case, Token]
[., PARAM_LIST, :, add, (, "(", ), ;, addList, (, first, ), ;, add, (, ")", ), ;, break, ;]
[;, addList, (, first, ), ;, add, (, ")", ), ;, break, ;, case, Token, ., COMMA, :, Preconditions, .]
[), ;, addList, (, first, ), ;, add, (, ")", ), ;, break, ;, case, Token, ., COMMA, :, Preconditions]
[;, add, (, ")", ), ;, break, ;, case, Token, ., COMMA, :, Preconditions, ., checkState, (, childCount, ==, 2]
[), ;, add, (, ")", ), ;, break, ;, case, Token, ., COMMA, :, Preconditions, ., checkState, (, childCount, ==]
[;, break, ;, case, Token, ., COMMA, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, unrollBinaryOperator, (, n]
[), ;, break, ;, case, Token, ., COMMA, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, unrollBinaryOperator, (]
[:, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, unrollBinaryOperator, (, n, ,, Token, ., COMMA, ,, ",", ,]
[., COMMA, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, unrollBinaryOperator, (, n, ,, Token, ., COMMA, ,]
[;, unrollBinaryOperator, (, n, ,, Token, ., COMMA, ,, ",", ,, context, ,, Context, ., OTHER, ,, 0, ,, 0]
[., checkState, (, childCount, ==, 2, ), ;, unrollBinaryOperator, (, n, ,, Token, ., COMMA, ,, ",", ,, context, ,]
[), ;, unrollBinaryOperator, (, n, ,, Token, ., COMMA, ,, ",", ,, context, ,, Context, ., OTHER, ,, 0, ,]
[==, 2, ), ;, unrollBinaryOperator, (, n, ,, Token, ., COMMA, ,, ",", ,, context, ,, Context, ., OTHER, ,]
[), ;, unrollBinaryOperator, (, n, ,, Token, ., COMMA, ,, ",", ,, context, ,, Context, ., OTHER, ,, 0, ,]
[;, break, ;, case, Token, ., NUMBER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addNumber]
[,, Token, ., COMMA, ,, ",", ,, context, ,, Context, ., OTHER, ,, 0, ,, 0, ), ;, break, ;]
[,, ",", ,, context, ,, Context, ., OTHER, ,, 0, ,, 0, ), ;, break, ;, case, Token, ., NUMBER]
[., COMMA, ,, ",", ,, context, ,, Context, ., OTHER, ,, 0, ,, 0, ), ;, break, ;, case, Token]
[,, context, ,, Context, ., OTHER, ,, 0, ,, 0, ), ;, break, ;, case, Token, ., NUMBER, :, Preconditions]
[,, Context, ., OTHER, ,, 0, ,, 0, ), ;, break, ;, case, Token, ., NUMBER, :, Preconditions, ., checkState]
[,, 0, ,, 0, ), ;, break, ;, case, Token, ., NUMBER, :, Preconditions, ., checkState, (, childCount, ==, 0]
[., OTHER, ,, 0, ,, 0, ), ;, break, ;, case, Token, ., NUMBER, :, Preconditions, ., checkState, (, childCount]
[,, 0, ), ;, break, ;, case, Token, ., NUMBER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;]
[), ;, break, ;, case, Token, ., NUMBER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, .]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addNumber, (, n, ., getDouble, (, ), )]
[., NUMBER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addNumber, (, n, ., getDouble, (]
[;, cc, ., addNumber, (, n, ., getDouble, (, ), ), ;, break, ;, case, Token, ., TYPEOF, :, case]
[., checkState, (, childCount, ==, 0, ), ;, cc, ., addNumber, (, n, ., getDouble, (, ), ), ;, break]
[), ;, cc, ., addNumber, (, n, ., getDouble, (, ), ), ;, break, ;, case, Token, ., TYPEOF, :]
[==, 0, ), ;, cc, ., addNumber, (, n, ., getDouble, (, ), ), ;, break, ;, case, Token, .]
[), ;, cc, ., addNumber, (, n, ., getDouble, (, ), ), ;, break, ;, case, Token, ., TYPEOF, :]
[;, break, ;, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token]
[., addNumber, (, n, ., getDouble, (, ), ), ;, break, ;, case, Token, ., TYPEOF, :, case, Token, .]
[), ;, break, ;, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case]
[., getDouble, (, ), ), ;, break, ;, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token]
[:, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS]
[., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token]
[:, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, {, Preconditions, ., checkState]
[., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, {, Preconditions]
[:, case, Token, ., BITNOT, :, case, Token, ., POS, :, {, Preconditions, ., checkState, (, childCount, ==, 1, )]
[., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, {, Preconditions, ., checkState, (, childCount, ==]
[:, case, Token, ., POS, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, cc, ., addOp, (]
[., BITNOT, :, case, Token, ., POS, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, cc, .]
[:, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type]
[., POS, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, cc, ., addOp, (, NodeUtil, ., opToStrNoFail]
[;, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,, NodeUtil]
[., checkState, (, childCount, ==, 1, ), ;, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false]
[), ;, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,]
[==, 1, ), ;, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (]
[), ;, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,]
[;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, ), ;, break, ;, }]
[., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence]
[,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, ), ;]
[., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,]
[), ,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, )]
[), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, ), ;, break, ;]
[;, break, ;, }, case, Token, ., NEG, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, if]
[,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., NEG]
[,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., NEG, :, {, Preconditions, ., checkState, (, childCount]
[., precedence, (, type, ), ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., NEG, :, {]
[), ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., NEG, :, {, Preconditions, ., checkState, (]
[), ;, break, ;, }, case, Token, ., NEG, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;]
[., OTHER, ), ;, break, ;, }, case, Token, ., NEG, :, {, Preconditions, ., checkState, (, childCount, ==, 1]
[:, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, if, (, n, ., getFirstChild, (, ), ., isNumber]
[., NEG, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, if, (, n, ., getFirstChild, (, )]
[;, if, (, n, ., getFirstChild, (, ), ., isNumber, (, ), ), {, cc, ., addNumber, (, -, n]
[., checkState, (, childCount, ==, 1, ), ;, if, (, n, ., getFirstChild, (, ), ., isNumber, (, ), )]
[), ;, if, (, n, ., getFirstChild, (, ), ., isNumber, (, ), ), {, cc, ., addNumber, (, -]
[==, 1, ), ;, if, (, n, ., getFirstChild, (, ), ., isNumber, (, ), ), {, cc, ., addNumber]
[), ;, if, (, n, ., getFirstChild, (, ), ., isNumber, (, ), ), {, cc, ., addNumber, (, -]
[), {, cc, ., addNumber, (, -, n, ., getFirstChild, (, ), ., getDouble, (, ), ), ;, }, else]
[., isNumber, (, ), ), {, cc, ., addNumber, (, -, n, ., getFirstChild, (, ), ., getDouble, (, )]
[., getFirstChild, (, ), ., isNumber, (, ), ), {, cc, ., addNumber, (, -, n, ., getFirstChild, (, )]
[;, }, else, {, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (]
[., addNumber, (, -, n, ., getFirstChild, (, ), ., getDouble, (, ), ), ;, }, else, {, cc, .]
[), ;, }, else, {, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr]
[), ;, }, else, {, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr]
[., getDouble, (, ), ), ;, }, else, {, cc, ., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,]
[., getFirstChild, (, ), ., getDouble, (, ), ), ;, }, else, {, cc, ., addOp, (, NodeUtil, ., opToStrNoFail]
[;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, ), ;, }, break, ;]
[., addOp, (, NodeUtil, ., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence]
[,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, ), ;]
[., opToStrNoFail, (, type, ), ,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,]
[), ,, false, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, )]
[), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, ), ;, }, break]
[;, }, break, ;, }, case, Token, ., HOOK, :, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;]
[,, NodeUtil, ., precedence, (, type, ), ,, Context, ., OTHER, ), ;, }, break, ;, }, case, Token, .]
[,, Context, ., OTHER, ), ;, }, break, ;, }, case, Token, ., HOOK, :, {, Preconditions, ., checkState, (]
[., precedence, (, type, ), ,, Context, ., OTHER, ), ;, }, break, ;, }, case, Token, ., HOOK, :]
[), ,, Context, ., OTHER, ), ;, }, break, ;, }, case, Token, ., HOOK, :, {, Preconditions, ., checkState]
[), ;, }, break, ;, }, case, Token, ., HOOK, :, {, Preconditions, ., checkState, (, childCount, ==, 3, )]
[., OTHER, ), ;, }, break, ;, }, case, Token, ., HOOK, :, {, Preconditions, ., checkState, (, childCount, ==]
[:, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, int, p, =, NodeUtil, ., precedence, (, type, )]
[., HOOK, :, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, int, p, =, NodeUtil, ., precedence, (]
[;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, addExpr, (, first, ,, p, +, 1, ,, context]
[., checkState, (, childCount, ==, 3, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, addExpr, (]
[), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, addExpr, (, first, ,, p, +, 1, ,]
[==, 3, ), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, addExpr, (, first, ,, p, +]
[), ;, int, p, =, NodeUtil, ., precedence, (, type, ), ;, addExpr, (, first, ,, p, +, 1, ,]
[;, addExpr, (, first, ,, p, +, 1, ,, context, ), ;, cc, ., addOp, (, "?", ,, true, )]
[., precedence, (, type, ), ;, addExpr, (, first, ,, p, +, 1, ,, context, ), ;, cc, ., addOp]
[), ;, addExpr, (, first, ,, p, +, 1, ,, context, ), ;, cc, ., addOp, (, "?", ,, true]
[;, cc, ., addOp, (, "?", ,, true, ), ;, addExpr, (, first, ., getNext, (, ), ,, 1, ,]
[,, p, +, 1, ,, context, ), ;, cc, ., addOp, (, "?", ,, true, ), ;, addExpr, (, first]
[,, context, ), ;, cc, ., addOp, (, "?", ,, true, ), ;, addExpr, (, first, ., getNext, (, )]
[+, 1, ,, context, ), ;, cc, ., addOp, (, "?", ,, true, ), ;, addExpr, (, first, ., getNext]
[,, context, ), ;, cc, ., addOp, (, "?", ,, true, ), ;, addExpr, (, first, ., getNext, (, )]
[), ;, cc, ., addOp, (, "?", ,, true, ), ;, addExpr, (, first, ., getNext, (, ), ,, 1]
[;, addExpr, (, first, ., getNext, (, ), ,, 1, ,, Context, ., OTHER, ), ;, cc, ., addOp, (]
[., addOp, (, "?", ,, true, ), ;, addExpr, (, first, ., getNext, (, ), ,, 1, ,, Context, .]
[,, true, ), ;, addExpr, (, first, ., getNext, (, ), ,, 1, ,, Context, ., OTHER, ), ;, cc]
[), ;, addExpr, (, first, ., getNext, (, ), ,, 1, ,, Context, ., OTHER, ), ;, cc, ., addOp]
[;, cc, ., addOp, (, ":", ,, true, ), ;, addExpr, (, last, ,, 1, ,, Context, ., OTHER, )]
[,, 1, ,, Context, ., OTHER, ), ;, cc, ., addOp, (, ":", ,, true, ), ;, addExpr, (, last]
[., getNext, (, ), ,, 1, ,, Context, ., OTHER, ), ;, cc, ., addOp, (, ":", ,, true, )]
[,, Context, ., OTHER, ), ;, cc, ., addOp, (, ":", ,, true, ), ;, addExpr, (, last, ,, 1]
[), ;, cc, ., addOp, (, ":", ,, true, ), ;, addExpr, (, last, ,, 1, ,, Context, ., OTHER]
[., OTHER, ), ;, cc, ., addOp, (, ":", ,, true, ), ;, addExpr, (, last, ,, 1, ,, Context]
[;, addExpr, (, last, ,, 1, ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., REGEXP, :]
[., addOp, (, ":", ,, true, ), ;, addExpr, (, last, ,, 1, ,, Context, ., OTHER, ), ;, break]
[,, true, ), ;, addExpr, (, last, ,, 1, ,, Context, ., OTHER, ), ;, break, ;, }, case, Token]
[), ;, addExpr, (, last, ,, 1, ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., REGEXP]
[;, break, ;, }, case, Token, ., REGEXP, :, if, (, !, first, ., isString, (, ), ||, !, last]
[,, 1, ,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., REGEXP, :, if, (, !, first]
[,, Context, ., OTHER, ), ;, break, ;, }, case, Token, ., REGEXP, :, if, (, !, first, ., isString]
[), ;, break, ;, }, case, Token, ., REGEXP, :, if, (, !, first, ., isString, (, ), ||, !]
[., OTHER, ), ;, break, ;, }, case, Token, ., REGEXP, :, if, (, !, first, ., isString, (, )]
[:, if, (, !, first, ., isString, (, ), ||, !, last, ., isString, (, ), ), {, throw, new]
[., REGEXP, :, if, (, !, first, ., isString, (, ), ||, !, last, ., isString, (, ), ), {]
[), {, throw, new, Error, (, "Expected children to be strings", ), ;, }, String, regexp, =, regexpEscape, (, first, ., getString, (, )]
[||, !, last, ., isString, (, ), ), {, throw, new, Error, (, "Expected children to be strings", ), ;, }, String, regexp, =]
[||, !, last, ., isString, (, ), ), {, throw, new, Error, (, "Expected children to be strings", ), ;, }, String, regexp, =]
[., isString, (, ), ||, !, last, ., isString, (, ), ), {, throw, new, Error, (, "Expected children to be strings", ), ;]
[), {, throw, new, Error, (, "Expected children to be strings", ), ;, }, String, regexp, =, regexpEscape, (, first, ., getString, (, )]
[), {, throw, new, Error, (, "Expected children to be strings", ), ;, }, String, regexp, =, regexpEscape, (, first, ., getString, (, )]
[., isString, (, ), ), {, throw, new, Error, (, "Expected children to be strings", ), ;, }, String, regexp, =, regexpEscape, (, first]
[;, }, String, regexp, =, regexpEscape, (, first, ., getString, (, ), ,, outputCharsetEncoder, ), ;, if, (, childCount, ==]
[), ;, }, String, regexp, =, regexpEscape, (, first, ., getString, (, ), ,, outputCharsetEncoder, ), ;, if, (, childCount]
[;, if, (, childCount, ==, 2, ), {, add, (, regexp, +, last, ., getString, (, ), ), ;, }]
[,, outputCharsetEncoder, ), ;, if, (, childCount, ==, 2, ), {, add, (, regexp, +, last, ., getString, (, )]
[., getString, (, ), ,, outputCharsetEncoder, ), ;, if, (, childCount, ==, 2, ), {, add, (, regexp, +, last]
[), ;, if, (, childCount, ==, 2, ), {, add, (, regexp, +, last, ., getString, (, ), ), ;]
[), {, add, (, regexp, +, last, ., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (]
[==, 2, ), {, add, (, regexp, +, last, ., getString, (, ), ), ;, }, else, {, Preconditions, .]
[), {, add, (, regexp, +, last, ., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (]
[;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, regexp, ), ;, }, break]
[), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, regexp, ), ;, }]
[+, last, ., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;]
[), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, regexp, ), ;, }]
[., getString, (, ), ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (]
[;, add, (, regexp, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (, n, ., getClass, (]
[., checkState, (, childCount, ==, 1, ), ;, add, (, regexp, ), ;, }, break, ;, case, Token, ., FUNCTION]
[), ;, add, (, regexp, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (, n, ., getClass]
[==, 1, ), ;, add, (, regexp, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (, n]
[), ;, add, (, regexp, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (, n, ., getClass]
[;, }, break, ;, case, Token, ., FUNCTION, :, if, (, n, ., getClass, (, ), !=, Node, ., class]
[), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (, n, ., getClass, (, ), !=, Node, .]
[:, if, (, n, ., getClass, (, ), !=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", )]
[., FUNCTION, :, if, (, n, ., getClass, (, ), !=, Node, ., class, ), {, throw, new, Error, (]
[), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, boolean]
[!=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, Preconditions, ., checkState, (, childCount, ==]
[., getClass, (, ), !=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, Preconditions, .]
[), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, boolean]
[;, }, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, boolean, funcNeedsParens, =, (, context, ==, Context, ., START_OF_EXPR]
[), ;, }, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, boolean, funcNeedsParens, =, (, context, ==, Context, .]
[;, boolean, funcNeedsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (, funcNeedsParens, ), {, add, (, "("]
[., checkState, (, childCount, ==, 3, ), ;, boolean, funcNeedsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;, if]
[), ;, boolean, funcNeedsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (, funcNeedsParens, ), {, add, (]
[==, 3, ), ;, boolean, funcNeedsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (, funcNeedsParens, ), {]
[), ;, boolean, funcNeedsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (, funcNeedsParens, ), {, add, (]
[;, if, (, funcNeedsParens, ), {, add, (, "(", ), ;, }, add, (, "function", ), ;, add, (, first]
[), ;, if, (, funcNeedsParens, ), {, add, (, "(", ), ;, }, add, (, "function", ), ;, add, (]
[==, Context, ., START_OF_EXPR, ), ;, if, (, funcNeedsParens, ), {, add, (, "(", ), ;, }, add, (, "function"]
[), ;, if, (, funcNeedsParens, ), {, add, (, "(", ), ;, }, add, (, "function", ), ;, add, (]
[., START_OF_EXPR, ), ;, if, (, funcNeedsParens, ), {, add, (, "(", ), ;, }, add, (, "function", ), ;]
[), {, add, (, "(", ), ;, }, add, (, "function", ), ;, add, (, first, ), ;, add, (]
[;, }, add, (, "function", ), ;, add, (, first, ), ;, add, (, first, ., getNext, (, ), )]
[), ;, }, add, (, "function", ), ;, add, (, first, ), ;, add, (, first, ., getNext, (, )]
[;, add, (, first, ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, last, ,, Context]
[), ;, add, (, first, ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, last, ,]
[;, add, (, first, ., getNext, (, ), ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, cc]
[), ;, add, (, first, ., getNext, (, ), ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;]
[;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, cc, ., endFunction, (, context, ==, Context, ., STATEMENT, )]
[), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, cc, ., endFunction, (, context, ==, Context, ., STATEMENT]
[., getNext, (, ), ), ;, add, (, last, ,, Context, ., PRESERVE_BLOCK, ), ;, cc, ., endFunction, (, context]
[;, cc, ., endFunction, (, context, ==, Context, ., STATEMENT, ), ;, if, (, funcNeedsParens, ), {, add, (, ")"]
[,, Context, ., PRESERVE_BLOCK, ), ;, cc, ., endFunction, (, context, ==, Context, ., STATEMENT, ), ;, if, (, funcNeedsParens]
[), ;, cc, ., endFunction, (, context, ==, Context, ., STATEMENT, ), ;, if, (, funcNeedsParens, ), {, add, (]
[., PRESERVE_BLOCK, ), ;, cc, ., endFunction, (, context, ==, Context, ., STATEMENT, ), ;, if, (, funcNeedsParens, ), {]
[;, if, (, funcNeedsParens, ), {, add, (, ")", ), ;, }, break, ;, case, Token, ., GETTER_DEF, :, case]
[., endFunction, (, context, ==, Context, ., STATEMENT, ), ;, if, (, funcNeedsParens, ), {, add, (, ")", ), ;]
[), ;, if, (, funcNeedsParens, ), {, add, (, ")", ), ;, }, break, ;, case, Token, ., GETTER_DEF, :]
[==, Context, ., STATEMENT, ), ;, if, (, funcNeedsParens, ), {, add, (, ")", ), ;, }, break, ;, case]
[), ;, if, (, funcNeedsParens, ), {, add, (, ")", ), ;, }, break, ;, case, Token, ., GETTER_DEF, :]
[., STATEMENT, ), ;, if, (, funcNeedsParens, ), {, add, (, ")", ), ;, }, break, ;, case, Token, .]
[), {, add, (, ")", ), ;, }, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :]
[;, }, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, Preconditions, ., checkState, (, n, .]
[), ;, }, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, Preconditions, ., checkState, (, n]
[:, case, Token, ., SETTER_DEF, :, Preconditions, ., checkState, (, n, ., getParent, (, ), ., isObjectLit, (, ), )]
[., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, Preconditions, ., checkState, (, n, ., getParent, (, ), ., isObjectLit, (]
[:, Preconditions, ., checkState, (, n, ., getParent, (, ), ., isObjectLit, (, ), ), ;, Preconditions, ., checkState, (]
[., SETTER_DEF, :, Preconditions, ., checkState, (, n, ., getParent, (, ), ., isObjectLit, (, ), ), ;, Preconditions, .]
[;, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, Preconditions, ., checkState, (, first, ., isFunction, (, ), )]
[., checkState, (, n, ., getParent, (, ), ., isObjectLit, (, ), ), ;, Preconditions, ., checkState, (, childCount, ==]
[), ;, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, Preconditions, ., checkState, (, first, ., isFunction, (, )]
[., isObjectLit, (, ), ), ;, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, Preconditions, ., checkState, (, first]
[., getParent, (, ), ., isObjectLit, (, ), ), ;, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, Preconditions]
[;, Preconditions, ., checkState, (, first, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (, first, ., getFirstChild, (]
[., checkState, (, childCount, ==, 1, ), ;, Preconditions, ., checkState, (, first, ., isFunction, (, ), ), ;, Preconditions]
[), ;, Preconditions, ., checkState, (, first, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (, first, ., getFirstChild]
[==, 1, ), ;, Preconditions, ., checkState, (, first, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (, first]
[), ;, Preconditions, ., checkState, (, first, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (, first, ., getFirstChild]
[;, Preconditions, ., checkState, (, first, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), ;]
[., checkState, (, first, ., isFunction, (, ), ), ;, Preconditions, ., checkState, (, first, ., getFirstChild, (, ), .]
[), ;, Preconditions, ., checkState, (, first, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), )]
[., isFunction, (, ), ), ;, Preconditions, ., checkState, (, first, ., getFirstChild, (, ), ., getString, (, ), .]
[;, if, (, type, ==, Token, ., GETTER_DEF, ), {, Preconditions, ., checkState, (, !, first, ., getChildAtIndex, (, 1]
[., checkState, (, first, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), ;, if, (]
[), ;, if, (, type, ==, Token, ., GETTER_DEF, ), {, Preconditions, ., checkState, (, !, first, ., getChildAtIndex, (]
[., isEmpty, (, ), ), ;, if, (, type, ==, Token, ., GETTER_DEF, ), {, Preconditions, ., checkState, (, !]
[., getString, (, ), ., isEmpty, (, ), ), ;, if, (, type, ==, Token, ., GETTER_DEF, ), {, Preconditions]
[., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, ), ), ;, if, (, type, ==, Token, .]
[), {, Preconditions, ., checkState, (, !, first, ., getChildAtIndex, (, 1, ), ., hasChildren, (, ), ), ;, add]
[==, Token, ., GETTER_DEF, ), {, Preconditions, ., checkState, (, !, first, ., getChildAtIndex, (, 1, ), ., hasChildren, (]
[), {, Preconditions, ., checkState, (, !, first, ., getChildAtIndex, (, 1, ), ., hasChildren, (, ), ), ;, add]
[., GETTER_DEF, ), {, Preconditions, ., checkState, (, !, first, ., getChildAtIndex, (, 1, ), ., hasChildren, (, ), )]
[;, add, (, "get ", ), ;, }, else, {, Preconditions, ., checkState, (, first, ., getChildAtIndex, (, 1, ), .]
[., checkState, (, !, first, ., getChildAtIndex, (, 1, ), ., hasChildren, (, ), ), ;, add, (, "get ", )]
[), ;, add, (, "get ", ), ;, }, else, {, Preconditions, ., checkState, (, first, ., getChildAtIndex, (, 1, )]
[), ;, add, (, "get ", ), ;, }, else, {, Preconditions, ., checkState, (, first, ., getChildAtIndex, (, 1, )]
[., hasChildren, (, ), ), ;, add, (, "get ", ), ;, }, else, {, Preconditions, ., checkState, (, first, .]
[., getChildAtIndex, (, 1, ), ., hasChildren, (, ), ), ;, add, (, "get ", ), ;, }, else, {, Preconditions]
[), ., hasChildren, (, ), ), ;, add, (, "get ", ), ;, }, else, {, Preconditions, ., checkState, (, first]
[;, }, else, {, Preconditions, ., checkState, (, first, ., getChildAtIndex, (, 1, ), ., hasOneChild, (, ), ), ;]
[), ;, }, else, {, Preconditions, ., checkState, (, first, ., getChildAtIndex, (, 1, ), ., hasOneChild, (, ), )]
[;, add, (, "set ", ), ;, }, String, name, =, n, ., getString, (, ), ;, Node, fn, =, first]
[., checkState, (, first, ., getChildAtIndex, (, 1, ), ., hasOneChild, (, ), ), ;, add, (, "set ", ), ;]
[), ;, add, (, "set ", ), ;, }, String, name, =, n, ., getString, (, ), ;, Node, fn, =]
[., hasOneChild, (, ), ), ;, add, (, "set ", ), ;, }, String, name, =, n, ., getString, (, )]
[., getChildAtIndex, (, 1, ), ., hasOneChild, (, ), ), ;, add, (, "set ", ), ;, }, String, name, =]
[), ., hasOneChild, (, ), ), ;, add, (, "set ", ), ;, }, String, name, =, n, ., getString, (]
[;, }, String, name, =, n, ., getString, (, ), ;, Node, fn, =, first, ;, Node, parameters, =, fn]
[), ;, }, String, name, =, n, ., getString, (, ), ;, Node, fn, =, first, ;, Node, parameters, =]
[;, Node, fn, =, first, ;, Node, parameters, =, fn, ., getChildAtIndex, (, 1, ), ;, Node, body, =, fn]
[., getString, (, ), ;, Node, fn, =, first, ;, Node, parameters, =, fn, ., getChildAtIndex, (, 1, ), ;]
[;, Node, parameters, =, fn, ., getChildAtIndex, (, 1, ), ;, Node, body, =, fn, ., getLastChild, (, ), ;]
[;, Node, body, =, fn, ., getLastChild, (, ), ;, if, (, !, n, ., isQuotedString, (, ), &&, TokenStream]
[., getChildAtIndex, (, 1, ), ;, Node, body, =, fn, ., getLastChild, (, ), ;, if, (, !, n, .]
[), ;, Node, body, =, fn, ., getLastChild, (, ), ;, if, (, !, n, ., isQuotedString, (, ), &&]
[;, if, (, !, n, ., isQuotedString, (, ), &&, TokenStream, ., isJSIdentifier, (, name, ), &&, NodeUtil, ., isLatin]
[., getLastChild, (, ), ;, if, (, !, n, ., isQuotedString, (, ), &&, TokenStream, ., isJSIdentifier, (, name, )]
[), {, add, (, name, ), ;, }, else, {, double, d, =, getSimpleNumber, (, name, ), ;, if, (]
[&&, NodeUtil, ., isLatin, (, name, ), ), {, add, (, name, ), ;, }, else, {, double, d, =]
[&&, TokenStream, ., isJSIdentifier, (, name, ), &&, NodeUtil, ., isLatin, (, name, ), ), {, add, (, name, )]
[&&, TokenStream, ., isJSIdentifier, (, name, ), &&, NodeUtil, ., isLatin, (, name, ), ), {, add, (, name, )]
[., isQuotedString, (, ), &&, TokenStream, ., isJSIdentifier, (, name, ), &&, NodeUtil, ., isLatin, (, name, ), ), {]
[&&, NodeUtil, ., isLatin, (, name, ), ), {, add, (, name, ), ;, }, else, {, double, d, =]
[., isJSIdentifier, (, name, ), &&, NodeUtil, ., isLatin, (, name, ), ), {, add, (, name, ), ;, }]
[), &&, NodeUtil, ., isLatin, (, name, ), ), {, add, (, name, ), ;, }, else, {, double, d]
[), {, add, (, name, ), ;, }, else, {, double, d, =, getSimpleNumber, (, name, ), ;, if, (]
[., isLatin, (, name, ), ), {, add, (, name, ), ;, }, else, {, double, d, =, getSimpleNumber, (]
[), ), {, add, (, name, ), ;, }, else, {, double, d, =, getSimpleNumber, (, name, ), ;, if]
[;, }, else, {, double, d, =, getSimpleNumber, (, name, ), ;, if, (, !, Double, ., isNaN, (, d]
[), ;, }, else, {, double, d, =, getSimpleNumber, (, name, ), ;, if, (, !, Double, ., isNaN, (]
[;, if, (, !, Double, ., isNaN, (, d, ), ), {, cc, ., addNumber, (, d, ), ;, }]
[), ;, if, (, !, Double, ., isNaN, (, d, ), ), {, cc, ., addNumber, (, d, ), ;]
[), {, cc, ., addNumber, (, d, ), ;, }, else, {, addJsString, (, n, ), ;, }, }, add]
[), {, cc, ., addNumber, (, d, ), ;, }, else, {, addJsString, (, n, ), ;, }, }, add]
[., isNaN, (, d, ), ), {, cc, ., addNumber, (, d, ), ;, }, else, {, addJsString, (, n]
[), ), {, cc, ., addNumber, (, d, ), ;, }, else, {, addJsString, (, n, ), ;, }, }]
[;, }, else, {, addJsString, (, n, ), ;, }, }, add, (, parameters, ), ;, add, (, body, ,]
[., addNumber, (, d, ), ;, }, else, {, addJsString, (, n, ), ;, }, }, add, (, parameters, )]
[), ;, }, else, {, addJsString, (, n, ), ;, }, }, add, (, parameters, ), ;, add, (, body]
[;, }, }, add, (, parameters, ), ;, add, (, body, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case]
[), ;, }, }, add, (, parameters, ), ;, add, (, body, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;]
[;, add, (, body, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., SCRIPT, :, case, Token, .]
[), ;, add, (, body, ,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., SCRIPT, :, case, Token]
[;, break, ;, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, {, if, (, n, ., getClass, (]
[,, Context, ., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, {, if]
[), ;, break, ;, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, {, if, (, n, ., getClass]
[., PRESERVE_BLOCK, ), ;, break, ;, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, {, if, (, n]
[:, case, Token, ., BLOCK, :, {, if, (, n, ., getClass, (, ), !=, Node, ., class, ), {]
[., SCRIPT, :, case, Token, ., BLOCK, :, {, if, (, n, ., getClass, (, ), !=, Node, ., class]
[:, {, if, (, n, ., getClass, (, ), !=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass."]
[., BLOCK, :, {, if, (, n, ., getClass, (, ), !=, Node, ., class, ), {, throw, new, Error]
[), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, boolean, preserveBlock, =, context, ==, Context, ., PRESERVE_BLOCK, ;, if]
[!=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, boolean, preserveBlock, =, context, ==, Context]
[., getClass, (, ), !=, Node, ., class, ), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, boolean, preserveBlock]
[), {, throw, new, Error, (, "Unexpected Node subclass.", ), ;, }, boolean, preserveBlock, =, context, ==, Context, ., PRESERVE_BLOCK, ;, if]
[;, }, boolean, preserveBlock, =, context, ==, Context, ., PRESERVE_BLOCK, ;, if, (, preserveBlock, ), {, cc, ., beginBlock, (]
[), ;, }, boolean, preserveBlock, =, context, ==, Context, ., PRESERVE_BLOCK, ;, if, (, preserveBlock, ), {, cc, ., beginBlock]
[;, if, (, preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==, Token, .]
[==, Context, ., PRESERVE_BLOCK, ;, if, (, preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =]
[;, if, (, preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==, Token, .]
[., PRESERVE_BLOCK, ;, if, (, preserveBlock, ), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==]
[), {, cc, ., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (, type]
[;, }, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (, type, ==, Token, ., BLOCK, &&, !, preserveBlock]
[., beginBlock, (, ), ;, }, boolean, preferLineBreaks, =, type, ==, Token, ., SCRIPT, ||, (, type, ==, Token, .]
[;, for, (, Node, c, =, first, ;, c, !=, null, ;, c, =, c, ., getNext, (, ), )]
[||, (, type, ==, Token, ., BLOCK, &&, !, preserveBlock, &&, n, ., getParent, (, ), !=, null, &&, n]
[==, Token, ., SCRIPT, ||, (, type, ==, Token, ., BLOCK, &&, !, preserveBlock, &&, n, ., getParent, (, )]
[||, (, type, ==, Token, ., BLOCK, &&, !, preserveBlock, &&, n, ., getParent, (, ), !=, null, &&, n]
[., SCRIPT, ||, (, type, ==, Token, ., BLOCK, &&, !, preserveBlock, &&, n, ., getParent, (, ), !=, null]
[;, for, (, Node, c, =, first, ;, c, !=, null, ;, c, =, c, ., getNext, (, ), )]
[), ;, for, (, Node, c, =, first, ;, c, !=, null, ;, c, =, c, ., getNext, (, )]
[&&, n, ., getParent, (, ), ., isScript, (, ), ), ;, for, (, Node, c, =, first, ;, c]
[&&, n, ., getParent, (, ), !=, null, &&, n, ., getParent, (, ), ., isScript, (, ), ), ;]
[&&, !, preserveBlock, &&, n, ., getParent, (, ), !=, null, &&, n, ., getParent, (, ), ., isScript, (]
[==, Token, ., BLOCK, &&, !, preserveBlock, &&, n, ., getParent, (, ), !=, null, &&, n, ., getParent, (]
[&&, !, preserveBlock, &&, n, ., getParent, (, ), !=, null, &&, n, ., getParent, (, ), ., isScript, (]
[., BLOCK, &&, !, preserveBlock, &&, n, ., getParent, (, ), !=, null, &&, n, ., getParent, (, ), .]
[&&, n, ., getParent, (, ), !=, null, &&, n, ., getParent, (, ), ., isScript, (, ), ), ;]
[&&, n, ., getParent, (, ), !=, null, &&, n, ., getParent, (, ), ., isScript, (, ), ), ;]
[&&, n, ., getParent, (, ), ., isScript, (, ), ), ;, for, (, Node, c, =, first, ;, c]
[!=, null, &&, n, ., getParent, (, ), ., isScript, (, ), ), ;, for, (, Node, c, =, first]
[., getParent, (, ), !=, null, &&, n, ., getParent, (, ), ., isScript, (, ), ), ;, for, (]
[&&, n, ., getParent, (, ), ., isScript, (, ), ), ;, for, (, Node, c, =, first, ;, c]
[), ;, for, (, Node, c, =, first, ;, c, !=, null, ;, c, =, c, ., getNext, (, )]
[., isScript, (, ), ), ;, for, (, Node, c, =, first, ;, c, !=, null, ;, c, =, c]
[., getParent, (, ), ., isScript, (, ), ), ;, for, (, Node, c, =, first, ;, c, !=, null]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, add, (, c, ,, Context, .]
[;, c, =, c, ., getNext, (, ), ), {, add, (, c, ,, Context, ., STATEMENT, ), ;, if]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, add, (, c, ,, Context, ., STATEMENT, )]
[;, c, =, c, ., getNext, (, ), ), {, add, (, c, ,, Context, ., STATEMENT, ), ;, if]
[=, c, ., getNext, (, ), ), {, add, (, c, ,, Context, ., STATEMENT, ), ;, if, (, c]
[), {, add, (, c, ,, Context, ., STATEMENT, ), ;, if, (, c, ., isVar, (, ), ), {]
[., getNext, (, ), ), {, add, (, c, ,, Context, ., STATEMENT, ), ;, if, (, c, ., isVar]
[;, if, (, c, ., isVar, (, ), ), {, cc, ., endStatement, (, ), ;, }, if, (, c]
[,, Context, ., STATEMENT, ), ;, if, (, c, ., isVar, (, ), ), {, cc, ., endStatement, (, )]
[), ;, if, (, c, ., isVar, (, ), ), {, cc, ., endStatement, (, ), ;, }, if, (]
[., STATEMENT, ), ;, if, (, c, ., isVar, (, ), ), {, cc, ., endStatement, (, ), ;, }]
[), {, cc, ., endStatement, (, ), ;, }, if, (, c, ., isFunction, (, ), ), {, cc, .]
[., isVar, (, ), ), {, cc, ., endStatement, (, ), ;, }, if, (, c, ., isFunction, (, )]
[;, }, if, (, c, ., isFunction, (, ), ), {, cc, ., maybeLineBreak, (, ), ;, }, if, (]
[., endStatement, (, ), ;, }, if, (, c, ., isFunction, (, ), ), {, cc, ., maybeLineBreak, (, )]
[), {, cc, ., maybeLineBreak, (, ), ;, }, if, (, preferLineBreaks, ), {, cc, ., notePreferredLineBreak, (, ), ;]
[., isFunction, (, ), ), {, cc, ., maybeLineBreak, (, ), ;, }, if, (, preferLineBreaks, ), {, cc, .]
[;, }, if, (, preferLineBreaks, ), {, cc, ., notePreferredLineBreak, (, ), ;, }, }, if, (, preserveBlock, ), {]
[., maybeLineBreak, (, ), ;, }, if, (, preferLineBreaks, ), {, cc, ., notePreferredLineBreak, (, ), ;, }, }, if]
[), {, cc, ., notePreferredLineBreak, (, ), ;, }, }, if, (, preserveBlock, ), {, cc, ., endBlock, (, cc]
[;, }, }, if, (, preserveBlock, ), {, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==]
[., notePreferredLineBreak, (, ), ;, }, }, if, (, preserveBlock, ), {, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (]
[), {, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;]
[;, }, break, ;, }, case, Token, ., FOR, :, if, (, childCount, ==, 4, ), {, add, (, "for("]
[., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, }, break, ;]
[), ;, }, break, ;, }, case, Token, ., FOR, :, if, (, childCount, ==, 4, ), {, add, (]
[., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, }, break, ;, }, case, Token, .]
[,, context, ==, Context, ., STATEMENT, ), ), ;, }, break, ;, }, case, Token, ., FOR, :, if, (]
[), ), ;, }, break, ;, }, case, Token, ., FOR, :, if, (, childCount, ==, 4, ), {, add]
[==, Context, ., STATEMENT, ), ), ;, }, break, ;, }, case, Token, ., FOR, :, if, (, childCount, ==]
[), ), ;, }, break, ;, }, case, Token, ., FOR, :, if, (, childCount, ==, 4, ), {, add]
[., STATEMENT, ), ), ;, }, break, ;, }, case, Token, ., FOR, :, if, (, childCount, ==, 4, )]
[:, if, (, childCount, ==, 4, ), {, add, (, "for(", ), ;, if, (, first, ., isVar, (, )]
[., FOR, :, if, (, childCount, ==, 4, ), {, add, (, "for(", ), ;, if, (, first, ., isVar]
[), {, add, (, "for(", ), ;, if, (, first, ., isVar, (, ), ), {, add, (, first, ,]
[==, 4, ), {, add, (, "for(", ), ;, if, (, first, ., isVar, (, ), ), {, add, (]
[), {, add, (, "for(", ), ;, if, (, first, ., isVar, (, ), ), {, add, (, first, ,]
[;, if, (, first, ., isVar, (, ), ), {, add, (, first, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }]
[), ;, if, (, first, ., isVar, (, ), ), {, add, (, first, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;]
[), {, add, (, first, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, else, {, addExpr, (, first, ,, 0, ,]
[., isVar, (, ), ), {, add, (, first, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, else, {, addExpr, (]
[;, }, else, {, addExpr, (, first, ,, 0, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, add, (, ";", )]
[,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, else, {, addExpr, (, first, ,, 0, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;]
[), ;, }, else, {, addExpr, (, first, ,, 0, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, add, (, ";"]
[., IN_FOR_INIT_CLAUSE, ), ;, }, else, {, addExpr, (, first, ,, 0, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, add]
[;, }, add, (, ";", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, ";", )]
[,, 0, ,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, add, (, ";", ), ;, add, (, first, ., getNext, (]
[,, Context, ., IN_FOR_INIT_CLAUSE, ), ;, }, add, (, ";", ), ;, add, (, first, ., getNext, (, ), )]
[), ;, }, add, (, ";", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, ";"]
[., IN_FOR_INIT_CLAUSE, ), ;, }, add, (, ";", ), ;, add, (, first, ., getNext, (, ), ), ;, add]
[;, add, (, first, ., getNext, (, ), ), ;, add, (, ";", ), ;, add, (, first, ., getNext]
[), ;, add, (, first, ., getNext, (, ), ), ;, add, (, ";", ), ;, add, (, first, .]
[;, add, (, ";", ), ;, add, (, first, ., getNext, (, ), ., getNext, (, ), ), ;, add]
[), ;, add, (, ";", ), ;, add, (, first, ., getNext, (, ), ., getNext, (, ), ), ;]
[., getNext, (, ), ), ;, add, (, ";", ), ;, add, (, first, ., getNext, (, ), ., getNext]
[;, add, (, first, ., getNext, (, ), ., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement]
[), ;, add, (, first, ., getNext, (, ), ., getNext, (, ), ), ;, add, (, ")", ), ;]
[;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else]
[), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }]
[., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,]
[., getNext, (, ), ., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression]
[;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, Preconditions, ., checkState, (]
[), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, Preconditions, ., checkState]
[;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, add, (, "for(", ), ;, add, (]
[,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 3, )]
[,, false, ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, add, (, "for(", )]
[), ,, false, ), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, add, (, "for("]
[), ;, }, else, {, Preconditions, ., checkState, (, childCount, ==, 3, ), ;, add, (, "for(", ), ;, add]
[;, add, (, "for(", ), ;, add, (, first, ), ;, add, (, "in", ), ;, add, (, first, .]
[., checkState, (, childCount, ==, 3, ), ;, add, (, "for(", ), ;, add, (, first, ), ;, add, (]
[), ;, add, (, "for(", ), ;, add, (, first, ), ;, add, (, "in", ), ;, add, (, first]
[==, 3, ), ;, add, (, "for(", ), ;, add, (, first, ), ;, add, (, "in", ), ;, add]
[), ;, add, (, "for(", ), ;, add, (, first, ), ;, add, (, "in", ), ;, add, (, first]
[;, add, (, first, ), ;, add, (, "in", ), ;, add, (, first, ., getNext, (, ), ), ;]
[), ;, add, (, first, ), ;, add, (, "in", ), ;, add, (, first, ., getNext, (, ), )]
[;, add, (, "in", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, ")", ), ;]
[), ;, add, (, "in", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, ")", )]
[;, add, (, first, ., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression]
[), ;, add, (, first, ., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,]
[;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, break]
[), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }]
[., getNext, (, ), ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,]
[;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, break, ;, case, Token, ., DO]
[), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, break, ;, case, Token, .]
[;, }, break, ;, case, Token, ., DO, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (]
[,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, break, ;, case, Token, ., DO, :, Preconditions, ., checkState]
[,, false, ), ;, }, break, ;, case, Token, ., DO, :, Preconditions, ., checkState, (, childCount, ==, 2, )]
[), ,, false, ), ;, }, break, ;, case, Token, ., DO, :, Preconditions, ., checkState, (, childCount, ==, 2]
[), ;, }, break, ;, case, Token, ., DO, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add]
[:, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "do", ), ;, addNonEmptyStatement, (, first, ,, Context]
[., DO, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "do", ), ;, addNonEmptyStatement, (, first]
[;, add, (, "do", ), ;, addNonEmptyStatement, (, first, ,, Context, ., OTHER, ,, false, ), ;, add, (, "while("]
[., checkState, (, childCount, ==, 2, ), ;, add, (, "do", ), ;, addNonEmptyStatement, (, first, ,, Context, ., OTHER]
[), ;, add, (, "do", ), ;, addNonEmptyStatement, (, first, ,, Context, ., OTHER, ,, false, ), ;, add, (]
[==, 2, ), ;, add, (, "do", ), ;, addNonEmptyStatement, (, first, ,, Context, ., OTHER, ,, false, ), ;]
[), ;, add, (, "do", ), ;, addNonEmptyStatement, (, first, ,, Context, ., OTHER, ,, false, ), ;, add, (]
[;, addNonEmptyStatement, (, first, ,, Context, ., OTHER, ,, false, ), ;, add, (, "while(", ), ;, add, (, last]
[), ;, addNonEmptyStatement, (, first, ,, Context, ., OTHER, ,, false, ), ;, add, (, "while(", ), ;, add, (]
[;, add, (, "while(", ), ;, add, (, last, ), ;, add, (, ")", ), ;, cc, ., endStatement, (]
[,, Context, ., OTHER, ,, false, ), ;, add, (, "while(", ), ;, add, (, last, ), ;, add, (]
[,, false, ), ;, add, (, "while(", ), ;, add, (, last, ), ;, add, (, ")", ), ;, cc]
[., OTHER, ,, false, ), ;, add, (, "while(", ), ;, add, (, last, ), ;, add, (, ")", )]
[), ;, add, (, "while(", ), ;, add, (, last, ), ;, add, (, ")", ), ;, cc, ., endStatement]
[;, add, (, last, ), ;, add, (, ")", ), ;, cc, ., endStatement, (, ), ;, break, ;, case]
[), ;, add, (, last, ), ;, add, (, ")", ), ;, cc, ., endStatement, (, ), ;, break, ;]
[;, add, (, ")", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., WHILE, :, Preconditions]
[), ;, add, (, ")", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., WHILE, :]
[;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., WHILE, :, Preconditions, ., checkState, (, childCount, ==]
[), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., WHILE, :, Preconditions, ., checkState, (, childCount]
[;, break, ;, case, Token, ., WHILE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "while("]
[., endStatement, (, ), ;, break, ;, case, Token, ., WHILE, :, Preconditions, ., checkState, (, childCount, ==, 2, )]
[:, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "while(", ), ;, add, (, first, ), ;]
[., WHILE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "while(", ), ;, add, (, first]
[;, add, (, "while(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,]
[., checkState, (, childCount, ==, 2, ), ;, add, (, "while(", ), ;, add, (, first, ), ;, add, (]
[), ;, add, (, "while(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last]
[==, 2, ), ;, add, (, "while(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement]
[), ;, add, (, "while(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last]
[;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,]
[), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, )]
[;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;]
[), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break]
[;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case, Token, ., EMPTY, :]
[), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case, Token, ., EMPTY]
[;, break, ;, case, Token, ., EMPTY, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, break, ;, case]
[,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case, Token, ., EMPTY, :, Preconditions, ., checkState, (]
[,, false, ), ;, break, ;, case, Token, ., EMPTY, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;]
[), ,, false, ), ;, break, ;, case, Token, ., EMPTY, :, Preconditions, ., checkState, (, childCount, ==, 0, )]
[), ;, break, ;, case, Token, ., EMPTY, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, break, ;]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, break, ;, case, Token, ., GETPROP, :, {, Preconditions, .]
[., EMPTY, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, break, ;, case, Token, ., GETPROP, :, {]
[;, break, ;, case, Token, ., GETPROP, :, {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETPROP: expected 2 children, but got %s", ,, childCount]
[., checkState, (, childCount, ==, 0, ), ;, break, ;, case, Token, ., GETPROP, :, {, Preconditions, ., checkState, (]
[), ;, break, ;, case, Token, ., GETPROP, :, {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETPROP: expected 2 children, but got %s", ,]
[==, 0, ), ;, break, ;, case, Token, ., GETPROP, :, {, Preconditions, ., checkState, (, childCount, ==, 2, ,]
[), ;, break, ;, case, Token, ., GETPROP, :, {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETPROP: expected 2 children, but got %s", ,]
[:, {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETPROP: expected 2 children, but got %s", ,, childCount, ), ;, Preconditions, ., checkState, (, last]
[., GETPROP, :, {, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETPROP: expected 2 children, but got %s", ,, childCount, ), ;, Preconditions, ., checkState]
[;, Preconditions, ., checkState, (, last, ., isString, (, ), ,, "Bad GETPROP: RHS should be STRING", ), ;, boolean, needsParens, =, (, first, .]
[., checkState, (, childCount, ==, 2, ,, "Bad GETPROP: expected 2 children, but got %s", ,, childCount, ), ;, Preconditions, ., checkState, (, last, ., isString, (]
[,, "Bad GETPROP: expected 2 children, but got %s", ,, childCount, ), ;, Preconditions, ., checkState, (, last, ., isString, (, ), ,, "Bad GETPROP: RHS should be STRING", ), ;, boolean]
[==, 2, ,, "Bad GETPROP: expected 2 children, but got %s", ,, childCount, ), ;, Preconditions, ., checkState, (, last, ., isString, (, ), ,, "Bad GETPROP: RHS should be STRING", )]
[,, "Bad GETPROP: expected 2 children, but got %s", ,, childCount, ), ;, Preconditions, ., checkState, (, last, ., isString, (, ), ,, "Bad GETPROP: RHS should be STRING", ), ;, boolean]
[,, childCount, ), ;, Preconditions, ., checkState, (, last, ., isString, (, ), ,, "Bad GETPROP: RHS should be STRING", ), ;, boolean, needsParens, =]
[), ;, Preconditions, ., checkState, (, last, ., isString, (, ), ,, "Bad GETPROP: RHS should be STRING", ), ;, boolean, needsParens, =, (, first]
[;, boolean, needsParens, =, (, first, ., isNumber, (, ), ), ;, if, (, needsParens, ), {, add, (, "("]
[., checkState, (, last, ., isString, (, ), ,, "Bad GETPROP: RHS should be STRING", ), ;, boolean, needsParens, =, (, first, ., isNumber, (]
[,, "Bad GETPROP: RHS should be STRING", ), ;, boolean, needsParens, =, (, first, ., isNumber, (, ), ), ;, if, (, needsParens, ), {]
[., isString, (, ), ,, "Bad GETPROP: RHS should be STRING", ), ;, boolean, needsParens, =, (, first, ., isNumber, (, ), ), ;, if]
[), ;, boolean, needsParens, =, (, first, ., isNumber, (, ), ), ;, if, (, needsParens, ), {, add, (]
[;, if, (, needsParens, ), {, add, (, "(", ), ;, }, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[), ;, if, (, needsParens, ), {, add, (, "(", ), ;, }, addExpr, (, first, ,, NodeUtil, ., precedence]
[., isNumber, (, ), ), ;, if, (, needsParens, ), {, add, (, "(", ), ;, }, addExpr, (, first]
[), {, add, (, "(", ), ;, }, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context]
[;, }, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, if, (, needsParens, )]
[), ;, }, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, if, (, needsParens]
[;, if, (, needsParens, ), {, add, (, ")", ), ;, }, add, (, ".", ), ;, addIdentifier, (, last]
[,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, if, (, needsParens, ), {, add, (, ")", )]
[,, context, ), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }, add, (, ".", ), ;]
[., precedence, (, type, ), ,, context, ), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }]
[), ,, context, ), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }, add, (, ".", )]
[), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }, add, (, ".", ), ;, addIdentifier, (]
[), {, add, (, ")", ), ;, }, add, (, ".", ), ;, addIdentifier, (, last, ., getString, (, )]
[;, }, add, (, ".", ), ;, addIdentifier, (, last, ., getString, (, ), ), ;, break, ;, }, case]
[), ;, }, add, (, ".", ), ;, addIdentifier, (, last, ., getString, (, ), ), ;, break, ;, }]
[;, addIdentifier, (, last, ., getString, (, ), ), ;, break, ;, }, case, Token, ., GETELEM, :, Preconditions, .]
[), ;, addIdentifier, (, last, ., getString, (, ), ), ;, break, ;, }, case, Token, ., GETELEM, :, Preconditions]
[;, break, ;, }, case, Token, ., GETELEM, :, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETELEM: expected 2 children but got %s", ,, childCount]
[), ;, break, ;, }, case, Token, ., GETELEM, :, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETELEM: expected 2 children but got %s", ,]
[., getString, (, ), ), ;, break, ;, }, case, Token, ., GETELEM, :, Preconditions, ., checkState, (, childCount, ==]
[:, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETELEM: expected 2 children but got %s", ,, childCount, ), ;, addExpr, (, first, ,, NodeUtil, .]
[., GETELEM, :, Preconditions, ., checkState, (, childCount, ==, 2, ,, "Bad GETELEM: expected 2 children but got %s", ,, childCount, ), ;, addExpr, (, first, ,]
[;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, add, (, "[", ), ;]
[., checkState, (, childCount, ==, 2, ,, "Bad GETELEM: expected 2 children but got %s", ,, childCount, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[,, "Bad GETELEM: expected 2 children but got %s", ,, childCount, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;]
[==, 2, ,, "Bad GETELEM: expected 2 children but got %s", ,, childCount, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context]
[,, "Bad GETELEM: expected 2 children but got %s", ,, childCount, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;]
[,, childCount, ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, add, (]
[), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, add, (, "[", )]
[;, add, (, "[", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, "]", ), ;]
[,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, add, (, "[", ), ;, add, (, first, .]
[,, context, ), ;, add, (, "[", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (]
[., precedence, (, type, ), ,, context, ), ;, add, (, "[", ), ;, add, (, first, ., getNext, (]
[), ,, context, ), ;, add, (, "[", ), ;, add, (, first, ., getNext, (, ), ), ;, add]
[), ;, add, (, "[", ), ;, add, (, first, ., getNext, (, ), ), ;, add, (, "]", )]
[;, add, (, first, ., getNext, (, ), ), ;, add, (, "]", ), ;, break, ;, case, Token, .]
[), ;, add, (, first, ., getNext, (, ), ), ;, add, (, "]", ), ;, break, ;, case, Token]
[;, add, (, "]", ), ;, break, ;, case, Token, ., WITH, :, Preconditions, ., checkState, (, childCount, ==, 2]
[), ;, add, (, "]", ), ;, break, ;, case, Token, ., WITH, :, Preconditions, ., checkState, (, childCount, ==]
[., getNext, (, ), ), ;, add, (, "]", ), ;, break, ;, case, Token, ., WITH, :, Preconditions, .]
[;, break, ;, case, Token, ., WITH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "with("]
[), ;, break, ;, case, Token, ., WITH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (]
[:, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "with(", ), ;, add, (, first, ), ;]
[., WITH, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "with(", ), ;, add, (, first]
[;, add, (, "with(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,]
[., checkState, (, childCount, ==, 2, ), ;, add, (, "with(", ), ;, add, (, first, ), ;, add, (]
[), ;, add, (, "with(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last]
[==, 2, ), ;, add, (, "with(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement]
[), ;, add, (, "with(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last]
[;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,]
[), ;, add, (, first, ), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, )]
[;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;]
[), ;, add, (, ")", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break]
[;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case, Token, ., INC, :]
[), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case, Token, ., INC]
[;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, {, Preconditions, ., checkState, (, childCount, ==]
[,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC]
[,, false, ), ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, {, Preconditions, ., checkState]
[), ,, false, ), ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, {, Preconditions, .]
[), ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, {, Preconditions, ., checkState, (, childCount]
[:, case, Token, ., DEC, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, String, o, =, type]
[., INC, :, case, Token, ., DEC, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, String, o]
[:, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, String, o, =, type, ==, Token, ., INC, ?]
[., DEC, :, {, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, String, o, =, type, ==, Token, .]
[;, String, o, =, type, ==, Token, ., INC, ?, "++", :, "--", ;, int, postProp, =, n, ., getIntProp]
[., checkState, (, childCount, ==, 1, ), ;, String, o, =, type, ==, Token, ., INC, ?, "++", :, "--"]
[), ;, String, o, =, type, ==, Token, ., INC, ?, "++", :, "--", ;, int, postProp, =, n, .]
[==, 1, ), ;, String, o, =, type, ==, Token, ., INC, ?, "++", :, "--", ;, int, postProp, =]
[), ;, String, o, =, type, ==, Token, ., INC, ?, "++", :, "--", ;, int, postProp, =, n, .]
[;, int, postProp, =, n, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if, (, postProp, !=, 0, ), {]
[?, "++", :, "--", ;, int, postProp, =, n, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if, (, postProp]
[==, Token, ., INC, ?, "++", :, "--", ;, int, postProp, =, n, ., getIntProp, (, Node, ., INCRDECR_PROP, )]
[?, "++", :, "--", ;, int, postProp, =, n, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if, (, postProp]
[., INC, ?, "++", :, "--", ;, int, postProp, =, n, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if]
[:, "--", ;, int, postProp, =, n, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if, (, postProp, !=, 0]
[;, int, postProp, =, n, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if, (, postProp, !=, 0, ), {]
[;, if, (, postProp, !=, 0, ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context]
[., getIntProp, (, Node, ., INCRDECR_PROP, ), ;, if, (, postProp, !=, 0, ), {, addExpr, (, first, ,, NodeUtil]
[), ;, if, (, postProp, !=, 0, ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,]
[., INCRDECR_PROP, ), ;, if, (, postProp, !=, 0, ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type]
[), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, cc, ., addOp, (]
[!=, 0, ), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, cc, .]
[), {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, cc, ., addOp, (]
[;, cc, ., addOp, (, o, ,, false, ), ;, }, else, {, cc, ., addOp, (, o, ,, false]
[,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, cc, ., addOp, (, o, ,, false, ), ;]
[,, context, ), ;, cc, ., addOp, (, o, ,, false, ), ;, }, else, {, cc, ., addOp, (]
[., precedence, (, type, ), ,, context, ), ;, cc, ., addOp, (, o, ,, false, ), ;, }, else]
[), ,, context, ), ;, cc, ., addOp, (, o, ,, false, ), ;, }, else, {, cc, ., addOp]
[), ;, cc, ., addOp, (, o, ,, false, ), ;, }, else, {, cc, ., addOp, (, o, ,]
[;, }, else, {, cc, ., addOp, (, o, ,, false, ), ;, add, (, first, ), ;, }, break]
[., addOp, (, o, ,, false, ), ;, }, else, {, cc, ., addOp, (, o, ,, false, ), ;]
[,, false, ), ;, }, else, {, cc, ., addOp, (, o, ,, false, ), ;, add, (, first, )]
[), ;, }, else, {, cc, ., addOp, (, o, ,, false, ), ;, add, (, first, ), ;, }]
[;, add, (, first, ), ;, }, break, ;, }, case, Token, ., CALL, :, if, (, isIndirectEval, (, first]
[., addOp, (, o, ,, false, ), ;, add, (, first, ), ;, }, break, ;, }, case, Token, .]
[,, false, ), ;, add, (, first, ), ;, }, break, ;, }, case, Token, ., CALL, :, if, (]
[), ;, add, (, first, ), ;, }, break, ;, }, case, Token, ., CALL, :, if, (, isIndirectEval, (]
[;, }, break, ;, }, case, Token, ., CALL, :, if, (, isIndirectEval, (, first, ), ||, n, ., getBooleanProp]
[), ;, }, break, ;, }, case, Token, ., CALL, :, if, (, isIndirectEval, (, first, ), ||, n, .]
[:, if, (, isIndirectEval, (, first, ), ||, n, ., getBooleanProp, (, Node, ., FREE_CALL, ), &&, NodeUtil, ., isGet]
[., CALL, :, if, (, isIndirectEval, (, first, ), ||, n, ., getBooleanProp, (, Node, ., FREE_CALL, ), &&, NodeUtil]
[), {, add, (, "(0,", ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., COMMA, ), ,]
[||, n, ., getBooleanProp, (, Node, ., FREE_CALL, ), &&, NodeUtil, ., isGet, (, first, ), ), {, add, (]
[), ||, n, ., getBooleanProp, (, Node, ., FREE_CALL, ), &&, NodeUtil, ., isGet, (, first, ), ), {, add]
[), {, add, (, "(0,", ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., COMMA, ), ,]
[&&, NodeUtil, ., isGet, (, first, ), ), {, add, (, "(0,", ), ;, addExpr, (, first, ,, NodeUtil, .]
[., getBooleanProp, (, Node, ., FREE_CALL, ), &&, NodeUtil, ., isGet, (, first, ), ), {, add, (, "(0,", )]
[), &&, NodeUtil, ., isGet, (, first, ), ), {, add, (, "(0,", ), ;, addExpr, (, first, ,, NodeUtil]
[., FREE_CALL, ), &&, NodeUtil, ., isGet, (, first, ), ), {, add, (, "(0,", ), ;, addExpr, (, first]
[), {, add, (, "(0,", ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., COMMA, ), ,]
[., isGet, (, first, ), ), {, add, (, "(0,", ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[), ), {, add, (, "(0,", ), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., COMMA, )]
[;, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., COMMA, ), ,, Context, ., OTHER, ), ;, add]
[), ;, addExpr, (, first, ,, NodeUtil, ., precedence, (, Token, ., COMMA, ), ,, Context, ., OTHER, ), ;]
[;, add, (, ")", ), ;, }, else, {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,]
[,, NodeUtil, ., precedence, (, Token, ., COMMA, ), ,, Context, ., OTHER, ), ;, add, (, ")", ), ;]
[,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else, {, addExpr, (, first, ,, NodeUtil, .]
[., precedence, (, Token, ., COMMA, ), ,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else]
[), ,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else, {, addExpr, (, first, ,, NodeUtil]
[., COMMA, ), ,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else, {, addExpr, (, first]
[), ;, add, (, ")", ), ;, }, else, {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, )]
[., OTHER, ), ;, add, (, ")", ), ;, }, else, {, addExpr, (, first, ,, NodeUtil, ., precedence, (]
[;, }, else, {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, }, add]
[), ;, }, else, {, addExpr, (, first, ,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, }]
[;, }, add, (, "(", ), ;, addList, (, first, ., getNext, (, ), ), ;, add, (, ")", )]
[,, NodeUtil, ., precedence, (, type, ), ,, context, ), ;, }, add, (, "(", ), ;, addList, (, first]
[,, context, ), ;, }, add, (, "(", ), ;, addList, (, first, ., getNext, (, ), ), ;, add]
[., precedence, (, type, ), ,, context, ), ;, }, add, (, "(", ), ;, addList, (, first, ., getNext]
[), ,, context, ), ;, }, add, (, "(", ), ;, addList, (, first, ., getNext, (, ), ), ;]
[), ;, }, add, (, "(", ), ;, addList, (, first, ., getNext, (, ), ), ;, add, (, ")"]
[;, addList, (, first, ., getNext, (, ), ), ;, add, (, ")", ), ;, break, ;, case, Token, .]
[), ;, addList, (, first, ., getNext, (, ), ), ;, add, (, ")", ), ;, break, ;, case, Token]
[;, add, (, ")", ), ;, break, ;, case, Token, ., IF, :, boolean, hasElse, =, childCount, ==, 3, ;]
[), ;, add, (, ")", ), ;, break, ;, case, Token, ., IF, :, boolean, hasElse, =, childCount, ==, 3]
[., getNext, (, ), ), ;, add, (, ")", ), ;, break, ;, case, Token, ., IF, :, boolean, hasElse]
[;, break, ;, case, Token, ., IF, :, boolean, hasElse, =, childCount, ==, 3, ;, boolean, ambiguousElseClause, =, context, ==]
[), ;, break, ;, case, Token, ., IF, :, boolean, hasElse, =, childCount, ==, 3, ;, boolean, ambiguousElseClause, =, context]
[:, boolean, hasElse, =, childCount, ==, 3, ;, boolean, ambiguousElseClause, =, context, ==, Context, ., BEFORE_DANGLING_ELSE, &&, !, hasElse, ;]
[., IF, :, boolean, hasElse, =, childCount, ==, 3, ;, boolean, ambiguousElseClause, =, context, ==, Context, ., BEFORE_DANGLING_ELSE, &&, !]
[;, boolean, ambiguousElseClause, =, context, ==, Context, ., BEFORE_DANGLING_ELSE, &&, !, hasElse, ;, if, (, ambiguousElseClause, ), {, cc, .]
[==, 3, ;, boolean, ambiguousElseClause, =, context, ==, Context, ., BEFORE_DANGLING_ELSE, &&, !, hasElse, ;, if, (, ambiguousElseClause, ), {]
[;, boolean, ambiguousElseClause, =, context, ==, Context, ., BEFORE_DANGLING_ELSE, &&, !, hasElse, ;, if, (, ambiguousElseClause, ), {, cc, .]
[;, if, (, ambiguousElseClause, ), {, cc, ., beginBlock, (, ), ;, }, add, (, "if(", ), ;, add, (]
[&&, !, hasElse, ;, if, (, ambiguousElseClause, ), {, cc, ., beginBlock, (, ), ;, }, add, (, "if(", )]
[==, Context, ., BEFORE_DANGLING_ELSE, &&, !, hasElse, ;, if, (, ambiguousElseClause, ), {, cc, ., beginBlock, (, ), ;, }]
[&&, !, hasElse, ;, if, (, ambiguousElseClause, ), {, cc, ., beginBlock, (, ), ;, }, add, (, "if(", )]
[., BEFORE_DANGLING_ELSE, &&, !, hasElse, ;, if, (, ambiguousElseClause, ), {, cc, ., beginBlock, (, ), ;, }, add, (]
[;, if, (, ambiguousElseClause, ), {, cc, ., beginBlock, (, ), ;, }, add, (, "if(", ), ;, add, (]
[;, if, (, ambiguousElseClause, ), {, cc, ., beginBlock, (, ), ;, }, add, (, "if(", ), ;, add, (]
[), {, cc, ., beginBlock, (, ), ;, }, add, (, "if(", ), ;, add, (, first, ), ;, add]
[;, }, add, (, "if(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, if, (, hasElse]
[., beginBlock, (, ), ;, }, add, (, "if(", ), ;, add, (, first, ), ;, add, (, ")", )]
[;, add, (, first, ), ;, add, (, ")", ), ;, if, (, hasElse, ), {, addNonEmptyStatement, (, first, .]
[), ;, add, (, first, ), ;, add, (, ")", ), ;, if, (, hasElse, ), {, addNonEmptyStatement, (, first]
[;, add, (, ")", ), ;, if, (, hasElse, ), {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context]
[), ;, add, (, ")", ), ;, if, (, hasElse, ), {, addNonEmptyStatement, (, first, ., getNext, (, ), ,]
[;, if, (, hasElse, ), {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., BEFORE_DANGLING_ELSE, ,, false, )]
[), ;, if, (, hasElse, ), {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., BEFORE_DANGLING_ELSE, ,, false]
[), {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., BEFORE_DANGLING_ELSE, ,, false, ), ;, add, (, "else"]
[;, add, (, "else", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else]
[,, Context, ., BEFORE_DANGLING_ELSE, ,, false, ), ;, add, (, "else", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context]
[., getNext, (, ), ,, Context, ., BEFORE_DANGLING_ELSE, ,, false, ), ;, add, (, "else", ), ;, addNonEmptyStatement, (, last]
[,, false, ), ;, add, (, "else", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, )]
[., BEFORE_DANGLING_ELSE, ,, false, ), ;, add, (, "else", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,]
[), ;, add, (, "else", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }]
[;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, addNonEmptyStatement, (, first, .]
[), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, addNonEmptyStatement, (, first]
[;, }, else, {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., OTHER, ,, false, ), ;, Preconditions]
[,, getContextForNonEmptyExpression, (, context, ), ,, false, ), ;, }, else, {, addNonEmptyStatement, (, first, ., getNext, (, ), ,]
[,, false, ), ;, }, else, {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., OTHER, ,, false]
[), ,, false, ), ;, }, else, {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., OTHER, ,]
[), ;, }, else, {, addNonEmptyStatement, (, first, ., getNext, (, ), ,, Context, ., OTHER, ,, false, ), ;]
[;, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, }, if, (, ambiguousElseClause, ), {, cc, ., endBlock, (]
[,, Context, ., OTHER, ,, false, ), ;, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, }, if, (]
[., getNext, (, ), ,, Context, ., OTHER, ,, false, ), ;, Preconditions, ., checkState, (, childCount, ==, 2, )]
[,, false, ), ;, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, }, if, (, ambiguousElseClause, ), {, cc]
[., OTHER, ,, false, ), ;, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, }, if, (, ambiguousElseClause, )]
[), ;, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, }, if, (, ambiguousElseClause, ), {, cc, ., endBlock]
[;, }, if, (, ambiguousElseClause, ), {, cc, ., endBlock, (, ), ;, }, break, ;, case, Token, ., NULL]
[., checkState, (, childCount, ==, 2, ), ;, }, if, (, ambiguousElseClause, ), {, cc, ., endBlock, (, ), ;]
[), ;, }, if, (, ambiguousElseClause, ), {, cc, ., endBlock, (, ), ;, }, break, ;, case, Token, .]
[==, 2, ), ;, }, if, (, ambiguousElseClause, ), {, cc, ., endBlock, (, ), ;, }, break, ;, case]
[), ;, }, if, (, ambiguousElseClause, ), {, cc, ., endBlock, (, ), ;, }, break, ;, case, Token, .]
[), {, cc, ., endBlock, (, ), ;, }, break, ;, case, Token, ., NULL, :, Preconditions, ., checkState, (]
[;, }, break, ;, case, Token, ., NULL, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, .]
[., endBlock, (, ), ;, }, break, ;, case, Token, ., NULL, :, Preconditions, ., checkState, (, childCount, ==, 0]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "null", ), ;, break, ;, case]
[., NULL, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "null", ), ;, break]
[;, cc, ., addConstant, (, "null", ), ;, break, ;, case, Token, ., THIS, :, Preconditions, ., checkState, (, childCount]
[., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "null", ), ;, break, ;, case, Token, .]
[), ;, cc, ., addConstant, (, "null", ), ;, break, ;, case, Token, ., THIS, :, Preconditions, ., checkState, (]
[==, 0, ), ;, cc, ., addConstant, (, "null", ), ;, break, ;, case, Token, ., THIS, :, Preconditions, .]
[), ;, cc, ., addConstant, (, "null", ), ;, break, ;, case, Token, ., THIS, :, Preconditions, ., checkState, (]
[;, break, ;, case, Token, ., THIS, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, add, (, "this"]
[., addConstant, (, "null", ), ;, break, ;, case, Token, ., THIS, :, Preconditions, ., checkState, (, childCount, ==, 0]
[), ;, break, ;, case, Token, ., THIS, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, add, (]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, add, (, "this", ), ;, break, ;, case, Token, .]
[., THIS, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, add, (, "this", ), ;, break, ;, case]
[;, add, (, "this", ), ;, break, ;, case, Token, ., FALSE, :, Preconditions, ., checkState, (, childCount, ==, 0]
[., checkState, (, childCount, ==, 0, ), ;, add, (, "this", ), ;, break, ;, case, Token, ., FALSE, :]
[), ;, add, (, "this", ), ;, break, ;, case, Token, ., FALSE, :, Preconditions, ., checkState, (, childCount, ==]
[==, 0, ), ;, add, (, "this", ), ;, break, ;, case, Token, ., FALSE, :, Preconditions, ., checkState, (]
[), ;, add, (, "this", ), ;, break, ;, case, Token, ., FALSE, :, Preconditions, ., checkState, (, childCount, ==]
[;, break, ;, case, Token, ., FALSE, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant]
[), ;, break, ;, case, Token, ., FALSE, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, .]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "false", ), ;, break, ;, case]
[., FALSE, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "false", ), ;, break]
[;, cc, ., addConstant, (, "false", ), ;, break, ;, case, Token, ., TRUE, :, Preconditions, ., checkState, (, childCount]
[., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "false", ), ;, break, ;, case, Token, .]
[), ;, cc, ., addConstant, (, "false", ), ;, break, ;, case, Token, ., TRUE, :, Preconditions, ., checkState, (]
[==, 0, ), ;, cc, ., addConstant, (, "false", ), ;, break, ;, case, Token, ., TRUE, :, Preconditions, .]
[), ;, cc, ., addConstant, (, "false", ), ;, break, ;, case, Token, ., TRUE, :, Preconditions, ., checkState, (]
[;, break, ;, case, Token, ., TRUE, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant]
[., addConstant, (, "false", ), ;, break, ;, case, Token, ., TRUE, :, Preconditions, ., checkState, (, childCount, ==, 0]
[), ;, break, ;, case, Token, ., TRUE, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, .]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "true", ), ;, break, ;, case]
[., TRUE, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "true", ), ;, break]
[;, cc, ., addConstant, (, "true", ), ;, break, ;, case, Token, ., CONTINUE, :, Preconditions, ., checkState, (, childCount]
[., checkState, (, childCount, ==, 0, ), ;, cc, ., addConstant, (, "true", ), ;, break, ;, case, Token, .]
[), ;, cc, ., addConstant, (, "true", ), ;, break, ;, case, Token, ., CONTINUE, :, Preconditions, ., checkState, (]
[==, 0, ), ;, cc, ., addConstant, (, "true", ), ;, break, ;, case, Token, ., CONTINUE, :, Preconditions, .]
[), ;, cc, ., addConstant, (, "true", ), ;, break, ;, case, Token, ., CONTINUE, :, Preconditions, ., checkState, (]
[;, break, ;, case, Token, ., CONTINUE, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (, "continue"]
[., addConstant, (, "true", ), ;, break, ;, case, Token, ., CONTINUE, :, Preconditions, ., checkState, (, childCount, <=, 1]
[), ;, break, ;, case, Token, ., CONTINUE, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (]
[:, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (, "continue", ), ;, if, (, childCount, ==, 1]
[., CONTINUE, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (, "continue", ), ;, if, (, childCount]
[;, add, (, "continue", ), ;, if, (, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName, (]
[., checkState, (, childCount, <=, 1, ), ;, add, (, "continue", ), ;, if, (, childCount, ==, 1, ), {]
[), ;, add, (, "continue", ), ;, if, (, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName]
[<=, 1, ), ;, add, (, "continue", ), ;, if, (, childCount, ==, 1, ), {, if, (, !, first]
[), ;, add, (, "continue", ), ;, if, (, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName]
[;, if, (, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName, (, ), ), {, throw, new]
[), ;, if, (, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName, (, ), ), {, throw]
[), {, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }]
[==, 1, ), {, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", )]
[), {, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }]
[), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;, add, (, first, ), ;]
[), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;, add, (, first, ), ;]
[., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;, add]
[;, }, add, (, " ", ), ;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break]
[), ;, }, add, (, " ", ), ;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;]
[;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., DEBUGGER, :]
[), ;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., DEBUGGER]
[;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., DEBUGGER, :, Preconditions, ., checkState, (, childCount]
[), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., DEBUGGER, :, Preconditions, ., checkState, (]
[;, break, ;, case, Token, ., DEBUGGER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, add, (, "debugger"]
[., endStatement, (, ), ;, break, ;, case, Token, ., DEBUGGER, :, Preconditions, ., checkState, (, childCount, ==, 0, )]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, add, (, "debugger", ), ;, cc, ., endStatement, (, )]
[., DEBUGGER, :, Preconditions, ., checkState, (, childCount, ==, 0, ), ;, add, (, "debugger", ), ;, cc, ., endStatement]
[;, add, (, "debugger", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., BREAK, :, Preconditions]
[., checkState, (, childCount, ==, 0, ), ;, add, (, "debugger", ), ;, cc, ., endStatement, (, ), ;, break]
[), ;, add, (, "debugger", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., BREAK, :]
[==, 0, ), ;, add, (, "debugger", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, .]
[), ;, add, (, "debugger", ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., BREAK, :]
[;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., BREAK, :, Preconditions, ., checkState, (, childCount, <=]
[), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., BREAK, :, Preconditions, ., checkState, (, childCount]
[;, break, ;, case, Token, ., BREAK, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (, "break"]
[., endStatement, (, ), ;, break, ;, case, Token, ., BREAK, :, Preconditions, ., checkState, (, childCount, <=, 1, )]
[:, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (, "break", ), ;, if, (, childCount, ==, 1]
[., BREAK, :, Preconditions, ., checkState, (, childCount, <=, 1, ), ;, add, (, "break", ), ;, if, (, childCount]
[;, add, (, "break", ), ;, if, (, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName, (]
[., checkState, (, childCount, <=, 1, ), ;, add, (, "break", ), ;, if, (, childCount, ==, 1, ), {]
[), ;, add, (, "break", ), ;, if, (, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName]
[<=, 1, ), ;, add, (, "break", ), ;, if, (, childCount, ==, 1, ), {, if, (, !, first]
[), ;, add, (, "break", ), ;, if, (, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName]
[;, if, (, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName, (, ), ), {, throw, new]
[), ;, if, (, childCount, ==, 1, ), {, if, (, !, first, ., isLabelName, (, ), ), {, throw]
[), {, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }]
[==, 1, ), {, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", )]
[), {, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }]
[), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;, add, (, first, ), ;]
[), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;, add, (, first, ), ;]
[., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, " ", ), ;, add]
[;, }, add, (, " ", ), ;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break]
[), ;, }, add, (, " ", ), ;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;]
[;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., EXPR_RESULT, :]
[), ;, add, (, first, ), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., EXPR_RESULT]
[;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, Preconditions, ., checkState, (, childCount]
[), ;, }, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, Preconditions, ., checkState, (]
[;, break, ;, case, Token, ., EXPR_RESULT, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, first]
[., endStatement, (, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, Preconditions, ., checkState, (, childCount, ==, 1, )]
[:, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, first, ,, Context, ., START_OF_EXPR, ), ;, cc]
[., EXPR_RESULT, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, first, ,, Context, ., START_OF_EXPR, )]
[;, add, (, first, ,, Context, ., START_OF_EXPR, ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token]
[., checkState, (, childCount, ==, 1, ), ;, add, (, first, ,, Context, ., START_OF_EXPR, ), ;, cc, ., endStatement]
[), ;, add, (, first, ,, Context, ., START_OF_EXPR, ), ;, cc, ., endStatement, (, ), ;, break, ;, case]
[==, 1, ), ;, add, (, first, ,, Context, ., START_OF_EXPR, ), ;, cc, ., endStatement, (, ), ;, break]
[), ;, add, (, first, ,, Context, ., START_OF_EXPR, ), ;, cc, ., endStatement, (, ), ;, break, ;, case]
[;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., NEW, :, add, (, "new ", ), ;, int]
[,, Context, ., START_OF_EXPR, ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., NEW, :, add]
[), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., NEW, :, add, (, "new ", ), ;]
[., START_OF_EXPR, ), ;, cc, ., endStatement, (, ), ;, break, ;, case, Token, ., NEW, :, add, (, "new "]
[;, break, ;, case, Token, ., NEW, :, add, (, "new ", ), ;, int, precedence, =, NodeUtil, ., precedence, (]
[., endStatement, (, ), ;, break, ;, case, Token, ., NEW, :, add, (, "new ", ), ;, int, precedence, =]
[:, add, (, "new ", ), ;, int, precedence, =, NodeUtil, ., precedence, (, type, ), ;, if, (, NodeUtil, .]
[., NEW, :, add, (, "new ", ), ;, int, precedence, =, NodeUtil, ., precedence, (, type, ), ;, if, (]
[;, int, precedence, =, NodeUtil, ., precedence, (, type, ), ;, if, (, NodeUtil, ., containsType, (, first, ,, Token]
[), ;, int, precedence, =, NodeUtil, ., precedence, (, type, ), ;, if, (, NodeUtil, ., containsType, (, first, ,]
[;, if, (, NodeUtil, ., containsType, (, first, ,, Token, ., CALL, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), {, precedence]
[., precedence, (, type, ), ;, if, (, NodeUtil, ., containsType, (, first, ,, Token, ., CALL, ,, NodeUtil, .]
[), ;, if, (, NodeUtil, ., containsType, (, first, ,, Token, ., CALL, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), {]
[), {, precedence, =, NodeUtil, ., precedence, (, first, ., getType, (, ), ), +, 1, ;, }, addExpr, (]
[., containsType, (, first, ,, Token, ., CALL, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), {, precedence, =, NodeUtil, ., precedence]
[,, Token, ., CALL, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), {, precedence, =, NodeUtil, ., precedence, (, first, ., getType]
[,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), {, precedence, =, NodeUtil, ., precedence, (, first, ., getType, (, ), ), +]
[., CALL, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ), {, precedence, =, NodeUtil, ., precedence, (, first, ., getType, (, )]
[), ), {, precedence, =, NodeUtil, ., precedence, (, first, ., getType, (, ), ), +, 1, ;, }, addExpr]
[., MATCH_NOT_FUNCTION, ), ), {, precedence, =, NodeUtil, ., precedence, (, first, ., getType, (, ), ), +, 1, ;]
[=, NodeUtil, ., precedence, (, first, ., getType, (, ), ), +, 1, ;, }, addExpr, (, first, ,, precedence]
[;, }, addExpr, (, first, ,, precedence, ,, Context, ., OTHER, ), ;, Node, next, =, first, ., getNext, (]
[+, 1, ;, }, addExpr, (, first, ,, precedence, ,, Context, ., OTHER, ), ;, Node, next, =, first, .]
[., precedence, (, first, ., getType, (, ), ), +, 1, ;, }, addExpr, (, first, ,, precedence, ,, Context]
[), +, 1, ;, }, addExpr, (, first, ,, precedence, ,, Context, ., OTHER, ), ;, Node, next, =, first]
[., getType, (, ), ), +, 1, ;, }, addExpr, (, first, ,, precedence, ,, Context, ., OTHER, ), ;]
[;, }, addExpr, (, first, ,, precedence, ,, Context, ., OTHER, ), ;, Node, next, =, first, ., getNext, (]
[;, Node, next, =, first, ., getNext, (, ), ;, if, (, next, !=, null, ), {, add, (, "("]
[,, precedence, ,, Context, ., OTHER, ), ;, Node, next, =, first, ., getNext, (, ), ;, if, (, next]
[,, Context, ., OTHER, ), ;, Node, next, =, first, ., getNext, (, ), ;, if, (, next, !=, null]
[), ;, Node, next, =, first, ., getNext, (, ), ;, if, (, next, !=, null, ), {, add, (]
[., OTHER, ), ;, Node, next, =, first, ., getNext, (, ), ;, if, (, next, !=, null, ), {]
[;, if, (, next, !=, null, ), {, add, (, "(", ), ;, addList, (, next, ), ;, add, (]
[., getNext, (, ), ;, if, (, next, !=, null, ), {, add, (, "(", ), ;, addList, (, next]
[), {, add, (, "(", ), ;, addList, (, next, ), ;, add, (, ")", ), ;, }, break, ;]
[!=, null, ), {, add, (, "(", ), ;, addList, (, next, ), ;, add, (, ")", ), ;, }]
[), {, add, (, "(", ), ;, addList, (, next, ), ;, add, (, ")", ), ;, }, break, ;]
[;, addList, (, next, ), ;, add, (, ")", ), ;, }, break, ;, case, Token, ., STRING_KEY, :, Preconditions]
[), ;, addList, (, next, ), ;, add, (, ")", ), ;, }, break, ;, case, Token, ., STRING_KEY, :]
[;, add, (, ")", ), ;, }, break, ;, case, Token, ., STRING_KEY, :, Preconditions, ., checkState, (, childCount, ==]
[), ;, add, (, ")", ), ;, }, break, ;, case, Token, ., STRING_KEY, :, Preconditions, ., checkState, (, childCount]
[;, }, break, ;, case, Token, ., STRING_KEY, :, Preconditions, ., checkState, (, childCount, ==, 1, ,, "Object lit key must have 1 child", ), ;]
[), ;, }, break, ;, case, Token, ., STRING_KEY, :, Preconditions, ., checkState, (, childCount, ==, 1, ,, "Object lit key must have 1 child", )]
[:, Preconditions, ., checkState, (, childCount, ==, 1, ,, "Object lit key must have 1 child", ), ;, addJsString, (, n, ), ;, break, ;, case]
[., STRING_KEY, :, Preconditions, ., checkState, (, childCount, ==, 1, ,, "Object lit key must have 1 child", ), ;, addJsString, (, n, ), ;, break]
[;, addJsString, (, n, ), ;, break, ;, case, Token, ., STRING, :, Preconditions, ., checkState, (, childCount, ==, 0]
[., checkState, (, childCount, ==, 1, ,, "Object lit key must have 1 child", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, .]
[,, "Object lit key must have 1 child", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., STRING, :, Preconditions, ., checkState, (]
[==, 1, ,, "Object lit key must have 1 child", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., STRING, :, Preconditions, .]
[,, "Object lit key must have 1 child", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., STRING, :, Preconditions, ., checkState, (]
[), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., STRING, :, Preconditions, ., checkState, (, childCount, ==]
[;, break, ;, case, Token, ., STRING, :, Preconditions, ., checkState, (, childCount, ==, 0, ,, "A string may not have children", ), ;, addJsString]
[), ;, break, ;, case, Token, ., STRING, :, Preconditions, ., checkState, (, childCount, ==, 0, ,, "A string may not have children", ), ;]
[:, Preconditions, ., checkState, (, childCount, ==, 0, ,, "A string may not have children", ), ;, addJsString, (, n, ), ;, break, ;, case]
[., STRING, :, Preconditions, ., checkState, (, childCount, ==, 0, ,, "A string may not have children", ), ;, addJsString, (, n, ), ;, break]
[;, addJsString, (, n, ), ;, break, ;, case, Token, ., DELPROP, :, Preconditions, ., checkState, (, childCount, ==, 1]
[., checkState, (, childCount, ==, 0, ,, "A string may not have children", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, .]
[,, "A string may not have children", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., DELPROP, :, Preconditions, ., checkState, (]
[==, 0, ,, "A string may not have children", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., DELPROP, :, Preconditions, .]
[,, "A string may not have children", ), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., DELPROP, :, Preconditions, ., checkState, (]
[), ;, addJsString, (, n, ), ;, break, ;, case, Token, ., DELPROP, :, Preconditions, ., checkState, (, childCount, ==]
[;, break, ;, case, Token, ., DELPROP, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "delete "]
[), ;, break, ;, case, Token, ., DELPROP, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (]
[:, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "delete ", ), ;, add, (, first, ), ;]
[., DELPROP, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "delete ", ), ;, add, (, first]
[;, add, (, "delete ", ), ;, add, (, first, ), ;, break, ;, case, Token, ., OBJECTLIT, :, {, boolean]
[., checkState, (, childCount, ==, 1, ), ;, add, (, "delete ", ), ;, add, (, first, ), ;, break, ;]
[), ;, add, (, "delete ", ), ;, add, (, first, ), ;, break, ;, case, Token, ., OBJECTLIT, :, {]
[==, 1, ), ;, add, (, "delete ", ), ;, add, (, first, ), ;, break, ;, case, Token, ., OBJECTLIT]
[), ;, add, (, "delete ", ), ;, add, (, first, ), ;, break, ;, case, Token, ., OBJECTLIT, :, {]
[;, add, (, first, ), ;, break, ;, case, Token, ., OBJECTLIT, :, {, boolean, needsParens, =, (, context, ==]
[), ;, add, (, first, ), ;, break, ;, case, Token, ., OBJECTLIT, :, {, boolean, needsParens, =, (, context]
[;, break, ;, case, Token, ., OBJECTLIT, :, {, boolean, needsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, {, boolean, needsParens, =, (, context, ==, Context, ., START_OF_EXPR, )]
[:, {, boolean, needsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (, needsParens, ), {, add, (]
[., OBJECTLIT, :, {, boolean, needsParens, =, (, context, ==, Context, ., START_OF_EXPR, ), ;, if, (, needsParens, ), {]
[;, if, (, needsParens, ), {, add, (, "(", ), ;, }, add, (, "{", ), ;, for, (, Node]
[), ;, if, (, needsParens, ), {, add, (, "(", ), ;, }, add, (, "{", ), ;, for, (]
[==, Context, ., START_OF_EXPR, ), ;, if, (, needsParens, ), {, add, (, "(", ), ;, }, add, (, "{"]
[), ;, if, (, needsParens, ), {, add, (, "(", ), ;, }, add, (, "{", ), ;, for, (]
[., START_OF_EXPR, ), ;, if, (, needsParens, ), {, add, (, "(", ), ;, }, add, (, "{", ), ;]
[), {, add, (, "(", ), ;, }, add, (, "{", ), ;, for, (, Node, c, =, first, ;]
[;, }, add, (, "{", ), ;, for, (, Node, c, =, first, ;, c, !=, null, ;, c, =]
[), ;, }, add, (, "{", ), ;, for, (, Node, c, =, first, ;, c, !=, null, ;, c]
[;, for, (, Node, c, =, first, ;, c, !=, null, ;, c, =, c, ., getNext, (, ), )]
[), ;, for, (, Node, c, =, first, ;, c, !=, null, ;, c, =, c, ., getNext, (, )]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, !=, first, )]
[;, c, =, c, ., getNext, (, ), ), {, if, (, c, !=, first, ), {, cc, ., listSeparator]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, !=, first, ), {, cc]
[;, c, =, c, ., getNext, (, ), ), {, if, (, c, !=, first, ), {, cc, ., listSeparator]
[=, c, ., getNext, (, ), ), {, if, (, c, !=, first, ), {, cc, ., listSeparator, (, )]
[), {, if, (, c, !=, first, ), {, cc, ., listSeparator, (, ), ;, }, if, (, c, .]
[., getNext, (, ), ), {, if, (, c, !=, first, ), {, cc, ., listSeparator, (, ), ;, }]
[), {, cc, ., listSeparator, (, ), ;, }, if, (, c, ., isGetterDef, (, ), ||, c, ., isSetterDef]
[!=, first, ), {, cc, ., listSeparator, (, ), ;, }, if, (, c, ., isGetterDef, (, ), ||, c]
[), {, cc, ., listSeparator, (, ), ;, }, if, (, c, ., isGetterDef, (, ), ||, c, ., isSetterDef]
[;, }, if, (, c, ., isGetterDef, (, ), ||, c, ., isSetterDef, (, ), ), {, add, (, c]
[., listSeparator, (, ), ;, }, if, (, c, ., isGetterDef, (, ), ||, c, ., isSetterDef, (, ), )]
[), {, add, (, c, ), ;, }, else, {, Preconditions, ., checkState, (, c, ., isStringKey, (, ), )]
[||, c, ., isSetterDef, (, ), ), {, add, (, c, ), ;, }, else, {, Preconditions, ., checkState, (]
[., isGetterDef, (, ), ||, c, ., isSetterDef, (, ), ), {, add, (, c, ), ;, }, else, {]
[), {, add, (, c, ), ;, }, else, {, Preconditions, ., checkState, (, c, ., isStringKey, (, ), )]
[., isSetterDef, (, ), ), {, add, (, c, ), ;, }, else, {, Preconditions, ., checkState, (, c, .]
[;, }, else, {, Preconditions, ., checkState, (, c, ., isStringKey, (, ), ), ;, String, key, =, c, .]
[), ;, }, else, {, Preconditions, ., checkState, (, c, ., isStringKey, (, ), ), ;, String, key, =, c]
[;, String, key, =, c, ., getString, (, ), ;, if, (, !, c, ., isQuotedString, (, ), &&, !]
[., checkState, (, c, ., isStringKey, (, ), ), ;, String, key, =, c, ., getString, (, ), ;, if]
[), ;, String, key, =, c, ., getString, (, ), ;, if, (, !, c, ., isQuotedString, (, ), &&]
[., isStringKey, (, ), ), ;, String, key, =, c, ., getString, (, ), ;, if, (, !, c, .]
[;, if, (, !, c, ., isQuotedString, (, ), &&, !, TokenStream, ., isKeyword, (, key, ), &&, TokenStream, .]
[., getString, (, ), ;, if, (, !, c, ., isQuotedString, (, ), &&, !, TokenStream, ., isKeyword, (, key]
[), {, add, (, key, ), ;, }, else, {, double, d, =, getSimpleNumber, (, key, ), ;, if, (]
[&&, NodeUtil, ., isLatin, (, key, ), ), {, add, (, key, ), ;, }, else, {, double, d, =]
[&&, TokenStream, ., isJSIdentifier, (, key, ), &&, NodeUtil, ., isLatin, (, key, ), ), {, add, (, key, )]
[&&, !, TokenStream, ., isKeyword, (, key, ), &&, TokenStream, ., isJSIdentifier, (, key, ), &&, NodeUtil, ., isLatin, (]
[&&, !, TokenStream, ., isKeyword, (, key, ), &&, TokenStream, ., isJSIdentifier, (, key, ), &&, NodeUtil, ., isLatin, (]
[., isQuotedString, (, ), &&, !, TokenStream, ., isKeyword, (, key, ), &&, TokenStream, ., isJSIdentifier, (, key, ), &&]
[&&, TokenStream, ., isJSIdentifier, (, key, ), &&, NodeUtil, ., isLatin, (, key, ), ), {, add, (, key, )]
[&&, TokenStream, ., isJSIdentifier, (, key, ), &&, NodeUtil, ., isLatin, (, key, ), ), {, add, (, key, )]
[., isKeyword, (, key, ), &&, TokenStream, ., isJSIdentifier, (, key, ), &&, NodeUtil, ., isLatin, (, key, ), )]
[), &&, TokenStream, ., isJSIdentifier, (, key, ), &&, NodeUtil, ., isLatin, (, key, ), ), {, add, (, key]
[&&, NodeUtil, ., isLatin, (, key, ), ), {, add, (, key, ), ;, }, else, {, double, d, =]
[., isJSIdentifier, (, key, ), &&, NodeUtil, ., isLatin, (, key, ), ), {, add, (, key, ), ;, }]
[), &&, NodeUtil, ., isLatin, (, key, ), ), {, add, (, key, ), ;, }, else, {, double, d]
[), {, add, (, key, ), ;, }, else, {, double, d, =, getSimpleNumber, (, key, ), ;, if, (]
[., isLatin, (, key, ), ), {, add, (, key, ), ;, }, else, {, double, d, =, getSimpleNumber, (]
[), ), {, add, (, key, ), ;, }, else, {, double, d, =, getSimpleNumber, (, key, ), ;, if]
[;, }, else, {, double, d, =, getSimpleNumber, (, key, ), ;, if, (, !, Double, ., isNaN, (, d]
[), ;, }, else, {, double, d, =, getSimpleNumber, (, key, ), ;, if, (, !, Double, ., isNaN, (]
[;, if, (, !, Double, ., isNaN, (, d, ), ), {, cc, ., addNumber, (, d, ), ;, }]
[), ;, if, (, !, Double, ., isNaN, (, d, ), ), {, cc, ., addNumber, (, d, ), ;]
[), {, cc, ., addNumber, (, d, ), ;, }, else, {, addExpr, (, c, ,, 1, ,, Context, .]
[), {, cc, ., addNumber, (, d, ), ;, }, else, {, addExpr, (, c, ,, 1, ,, Context, .]
[., isNaN, (, d, ), ), {, cc, ., addNumber, (, d, ), ;, }, else, {, addExpr, (, c]
[), ), {, cc, ., addNumber, (, d, ), ;, }, else, {, addExpr, (, c, ,, 1, ,, Context]
[;, }, else, {, addExpr, (, c, ,, 1, ,, Context, ., OTHER, ), ;, }, }, add, (, ":"]
[., addNumber, (, d, ), ;, }, else, {, addExpr, (, c, ,, 1, ,, Context, ., OTHER, ), ;]
[), ;, }, else, {, addExpr, (, c, ,, 1, ,, Context, ., OTHER, ), ;, }, }, add, (]
[;, }, }, add, (, ":", ), ;, addExpr, (, c, ., getFirstChild, (, ), ,, 1, ,, Context, .]
[,, 1, ,, Context, ., OTHER, ), ;, }, }, add, (, ":", ), ;, addExpr, (, c, ., getFirstChild]
[,, Context, ., OTHER, ), ;, }, }, add, (, ":", ), ;, addExpr, (, c, ., getFirstChild, (, )]
[), ;, }, }, add, (, ":", ), ;, addExpr, (, c, ., getFirstChild, (, ), ,, 1, ,, Context]
[., OTHER, ), ;, }, }, add, (, ":", ), ;, addExpr, (, c, ., getFirstChild, (, ), ,, 1]
[;, addExpr, (, c, ., getFirstChild, (, ), ,, 1, ,, Context, ., OTHER, ), ;, }, }, add, (]
[), ;, addExpr, (, c, ., getFirstChild, (, ), ,, 1, ,, Context, ., OTHER, ), ;, }, }, add]
[;, }, }, add, (, "}", ), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }, break]
[,, 1, ,, Context, ., OTHER, ), ;, }, }, add, (, "}", ), ;, if, (, needsParens, ), {]
[., getFirstChild, (, ), ,, 1, ,, Context, ., OTHER, ), ;, }, }, add, (, "}", ), ;, if]
[,, Context, ., OTHER, ), ;, }, }, add, (, "}", ), ;, if, (, needsParens, ), {, add, (]
[), ;, }, }, add, (, "}", ), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }]
[., OTHER, ), ;, }, }, add, (, "}", ), ;, if, (, needsParens, ), {, add, (, ")", )]
[;, if, (, needsParens, ), {, add, (, ")", ), ;, }, break, ;, }, case, Token, ., SWITCH, :]
[), ;, if, (, needsParens, ), {, add, (, ")", ), ;, }, break, ;, }, case, Token, ., SWITCH]
[), {, add, (, ")", ), ;, }, break, ;, }, case, Token, ., SWITCH, :, add, (, "switch(", )]
[;, }, break, ;, }, case, Token, ., SWITCH, :, add, (, "switch(", ), ;, add, (, first, ), ;]
[), ;, }, break, ;, }, case, Token, ., SWITCH, :, add, (, "switch(", ), ;, add, (, first, )]
[:, add, (, "switch(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, cc, ., beginBlock, (]
[., SWITCH, :, add, (, "switch(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, cc, .]
[;, add, (, first, ), ;, add, (, ")", ), ;, cc, ., beginBlock, (, ), ;, addAllSiblings, (, first]
[), ;, add, (, first, ), ;, add, (, ")", ), ;, cc, ., beginBlock, (, ), ;, addAllSiblings, (]
[;, add, (, ")", ), ;, cc, ., beginBlock, (, ), ;, addAllSiblings, (, first, ., getNext, (, ), )]
[), ;, add, (, ")", ), ;, cc, ., beginBlock, (, ), ;, addAllSiblings, (, first, ., getNext, (, )]
[;, cc, ., beginBlock, (, ), ;, addAllSiblings, (, first, ., getNext, (, ), ), ;, cc, ., endBlock, (]
[), ;, cc, ., beginBlock, (, ), ;, addAllSiblings, (, first, ., getNext, (, ), ), ;, cc, ., endBlock]
[;, addAllSiblings, (, first, ., getNext, (, ), ), ;, cc, ., endBlock, (, context, ==, Context, ., STATEMENT, )]
[., beginBlock, (, ), ;, addAllSiblings, (, first, ., getNext, (, ), ), ;, cc, ., endBlock, (, context, ==]
[;, cc, ., endBlock, (, context, ==, Context, ., STATEMENT, ), ;, break, ;, case, Token, ., CASE, :, Preconditions]
[), ;, cc, ., endBlock, (, context, ==, Context, ., STATEMENT, ), ;, break, ;, case, Token, ., CASE, :]
[., getNext, (, ), ), ;, cc, ., endBlock, (, context, ==, Context, ., STATEMENT, ), ;, break, ;, case]
[;, break, ;, case, Token, ., CASE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "case "]
[., endBlock, (, context, ==, Context, ., STATEMENT, ), ;, break, ;, case, Token, ., CASE, :, Preconditions, ., checkState]
[), ;, break, ;, case, Token, ., CASE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (]
[==, Context, ., STATEMENT, ), ;, break, ;, case, Token, ., CASE, :, Preconditions, ., checkState, (, childCount, ==, 2]
[), ;, break, ;, case, Token, ., CASE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (]
[., STATEMENT, ), ;, break, ;, case, Token, ., CASE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;]
[:, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "case ", ), ;, add, (, first, ), ;]
[., CASE, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, add, (, "case ", ), ;, add, (, first]
[;, add, (, "case ", ), ;, add, (, first, ), ;, addCaseBody, (, last, ), ;, break, ;, case, Token]
[., checkState, (, childCount, ==, 2, ), ;, add, (, "case ", ), ;, add, (, first, ), ;, addCaseBody, (]
[), ;, add, (, "case ", ), ;, add, (, first, ), ;, addCaseBody, (, last, ), ;, break, ;, case]
[==, 2, ), ;, add, (, "case ", ), ;, add, (, first, ), ;, addCaseBody, (, last, ), ;, break]
[), ;, add, (, "case ", ), ;, add, (, first, ), ;, addCaseBody, (, last, ), ;, break, ;, case]
[;, add, (, first, ), ;, addCaseBody, (, last, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, Preconditions, .]
[), ;, add, (, first, ), ;, addCaseBody, (, last, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, Preconditions]
[;, addCaseBody, (, last, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, Preconditions, ., checkState, (, childCount, ==, 1]
[), ;, addCaseBody, (, last, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, Preconditions, ., checkState, (, childCount, ==]
[;, break, ;, case, Token, ., DEFAULT_CASE, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "default"]
[), ;, break, ;, case, Token, ., DEFAULT_CASE, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (]
[:, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "default", ), ;, addCaseBody, (, first, ), ;]
[., DEFAULT_CASE, :, Preconditions, ., checkState, (, childCount, ==, 1, ), ;, add, (, "default", ), ;, addCaseBody, (, first]
[;, add, (, "default", ), ;, addCaseBody, (, first, ), ;, break, ;, case, Token, ., LABEL, :, Preconditions, .]
[., checkState, (, childCount, ==, 1, ), ;, add, (, "default", ), ;, addCaseBody, (, first, ), ;, break, ;]
[), ;, add, (, "default", ), ;, addCaseBody, (, first, ), ;, break, ;, case, Token, ., LABEL, :, Preconditions]
[==, 1, ), ;, add, (, "default", ), ;, addCaseBody, (, first, ), ;, break, ;, case, Token, ., LABEL]
[), ;, add, (, "default", ), ;, addCaseBody, (, first, ), ;, break, ;, case, Token, ., LABEL, :, Preconditions]
[;, addCaseBody, (, first, ), ;, break, ;, case, Token, ., LABEL, :, Preconditions, ., checkState, (, childCount, ==, 2]
[), ;, addCaseBody, (, first, ), ;, break, ;, case, Token, ., LABEL, :, Preconditions, ., checkState, (, childCount, ==]
[;, break, ;, case, Token, ., LABEL, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, if, (, !]
[), ;, break, ;, case, Token, ., LABEL, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, if, (]
[:, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, if, (, !, first, ., isLabelName, (, ), ), {]
[., LABEL, :, Preconditions, ., checkState, (, childCount, ==, 2, ), ;, if, (, !, first, ., isLabelName, (, )]
[;, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add]
[., checkState, (, childCount, ==, 2, ), ;, if, (, !, first, ., isLabelName, (, ), ), {, throw, new]
[), ;, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }]
[==, 2, ), ;, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", )]
[), ;, if, (, !, first, ., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }]
[), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, first, ), ;, add, (, ":", ), ;]
[), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, first, ), ;, add, (, ":", ), ;]
[., isLabelName, (, ), ), {, throw, new, Error, (, "Unexpected token type. Should be LABEL_NAME.", ), ;, }, add, (, first, ), ;, add]
[;, }, add, (, first, ), ;, add, (, ":", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, )]
[), ;, }, add, (, first, ), ;, add, (, ":", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context]
[;, add, (, ":", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, true, ), ;, break, ;]
[), ;, add, (, ":", ), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, true, ), ;, break]
[;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, true, ), ;, break, ;, case, Token, ., CAST, :]
[), ;, addNonEmptyStatement, (, last, ,, getContextForNonEmptyExpression, (, context, ), ,, true, ), ;, break, ;, case, Token, ., CAST]
[;, break, ;, case, Token, ., CAST, :, add, (, "(", ), ;, add, (, first, ), ;, add, (]
[,, getContextForNonEmptyExpression, (, context, ), ,, true, ), ;, break, ;, case, Token, ., CAST, :, add, (, "(", )]
[,, true, ), ;, break, ;, case, Token, ., CAST, :, add, (, "(", ), ;, add, (, first, )]
[), ,, true, ), ;, break, ;, case, Token, ., CAST, :, add, (, "(", ), ;, add, (, first]
[), ;, break, ;, case, Token, ., CAST, :, add, (, "(", ), ;, add, (, first, ), ;, add]
[:, add, (, "(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, break, ;, default, :]
[., CAST, :, add, (, "(", ), ;, add, (, first, ), ;, add, (, ")", ), ;, break, ;]
[;, add, (, first, ), ;, add, (, ")", ), ;, break, ;, default, :, throw, new, Error, (, "Unknown type "]
[), ;, add, (, first, ), ;, add, (, ")", ), ;, break, ;, default, :, throw, new, Error, (]
[;, add, (, ")", ), ;, break, ;, default, :, throw, new, Error, (, "Unknown type ", +, type, +, "\n", +]
[), ;, add, (, ")", ), ;, break, ;, default, :, throw, new, Error, (, "Unknown type ", +, type, +, "\n"]
[;, break, ;, default, :, throw, new, Error, (, "Unknown type ", +, type, +, "\n", +, n, ., toStringTree, (, )]
[), ;, break, ;, default, :, throw, new, Error, (, "Unknown type ", +, type, +, "\n", +, n, ., toStringTree, (]
[;, }, cc, ., endSourceMapping, (, n, ), ;, }, private, void, unrollBinaryOperator, (, Node, n, ,, int, op, ,]
[), ;, }, cc, ., endSourceMapping, (, n, ), ;, }, private, void, unrollBinaryOperator, (, Node, n, ,, int, op]
[+, n, ., toStringTree, (, ), ), ;, }, cc, ., endSourceMapping, (, n, ), ;, }, private, void, unrollBinaryOperator]
[+, "\n", +, n, ., toStringTree, (, ), ), ;, }, cc, ., endSourceMapping, (, n, ), ;, }, private]
[+, type, +, "\n", +, n, ., toStringTree, (, ), ), ;, }, cc, ., endSourceMapping, (, n, ), ;]
[+, "\n", +, n, ., toStringTree, (, ), ), ;, }, cc, ., endSourceMapping, (, n, ), ;, }, private]
[+, n, ., toStringTree, (, ), ), ;, }, cc, ., endSourceMapping, (, n, ), ;, }, private, void, unrollBinaryOperator]
[), ;, }, cc, ., endSourceMapping, (, n, ), ;, }, private, void, unrollBinaryOperator, (, Node, n, ,, int, op]
[., toStringTree, (, ), ), ;, }, cc, ., endSourceMapping, (, n, ), ;, }, private, void, unrollBinaryOperator, (, Node]
[;, }, private, void, unrollBinaryOperator, (, Node, n, ,, int, op, ,, String, opStr, ,, Context, context, ,, Context, rhsContext]
[., endSourceMapping, (, n, ), ;, }, private, void, unrollBinaryOperator, (, Node, n, ,, int, op, ,, String, opStr, ,]
[), ;, }, private, void, unrollBinaryOperator, (, Node, n, ,, int, op, ,, String, opStr, ,, Context, context, ,, Context]
[;, while, (, firstNonOperator, ., getType, (, ), ==, op, ), {, firstNonOperator, =, firstNonOperator, ., getFirstChild, (, ), ;]
[., getFirstChild, (, ), ;, while, (, firstNonOperator, ., getType, (, ), ==, op, ), {, firstNonOperator, =, firstNonOperator, .]
[), {, firstNonOperator, =, firstNonOperator, ., getFirstChild, (, ), ;, }, addExpr, (, firstNonOperator, ,, leftPrecedence, ,, context, ), ;]
[==, op, ), {, firstNonOperator, =, firstNonOperator, ., getFirstChild, (, ), ;, }, addExpr, (, firstNonOperator, ,, leftPrecedence, ,, context]
[., getType, (, ), ==, op, ), {, firstNonOperator, =, firstNonOperator, ., getFirstChild, (, ), ;, }, addExpr, (, firstNonOperator]
[), {, firstNonOperator, =, firstNonOperator, ., getFirstChild, (, ), ;, }, addExpr, (, firstNonOperator, ,, leftPrecedence, ,, context, ), ;]
[=, firstNonOperator, ., getFirstChild, (, ), ;, }, addExpr, (, firstNonOperator, ,, leftPrecedence, ,, context, ), ;, Node, current, =]
[;, }, addExpr, (, firstNonOperator, ,, leftPrecedence, ,, context, ), ;, Node, current, =, firstNonOperator, ;, do, {, current, =]
[., getFirstChild, (, ), ;, }, addExpr, (, firstNonOperator, ,, leftPrecedence, ,, context, ), ;, Node, current, =, firstNonOperator, ;]
[;, Node, current, =, firstNonOperator, ;, do, {, current, =, current, ., getParent, (, ), ;, cc, ., addOp, (]
[,, leftPrecedence, ,, context, ), ;, Node, current, =, firstNonOperator, ;, do, {, current, =, current, ., getParent, (, )]
[,, context, ), ;, Node, current, =, firstNonOperator, ;, do, {, current, =, current, ., getParent, (, ), ;, cc]
[), ;, Node, current, =, firstNonOperator, ;, do, {, current, =, current, ., getParent, (, ), ;, cc, ., addOp]
[;, do, {, current, =, current, ., getParent, (, ), ;, cc, ., addOp, (, opStr, ,, true, ), ;]
[=, current, ., getParent, (, ), ;, cc, ., addOp, (, opStr, ,, true, ), ;, addExpr, (, current, .]
[;, cc, ., addOp, (, opStr, ,, true, ), ;, addExpr, (, current, ., getFirstChild, (, ), ., getNext, (]
[., getParent, (, ), ;, cc, ., addOp, (, opStr, ,, true, ), ;, addExpr, (, current, ., getFirstChild, (]
[;, addExpr, (, current, ., getFirstChild, (, ), ., getNext, (, ), ,, rightPrecedence, ,, rhsContext, ), ;, }, while]
[., addOp, (, opStr, ,, true, ), ;, addExpr, (, current, ., getFirstChild, (, ), ., getNext, (, ), ,]
[,, true, ), ;, addExpr, (, current, ., getFirstChild, (, ), ., getNext, (, ), ,, rightPrecedence, ,, rhsContext, )]
[), ;, addExpr, (, current, ., getFirstChild, (, ), ., getNext, (, ), ,, rightPrecedence, ,, rhsContext, ), ;, }]
[;, }, while, (, current, !=, n, ), ;, }, static, boolean, isSimpleNumber, (, String, s, ), {, int, len]
[,, rightPrecedence, ,, rhsContext, ), ;, }, while, (, current, !=, n, ), ;, }, static, boolean, isSimpleNumber, (, String]
[., getNext, (, ), ,, rightPrecedence, ,, rhsContext, ), ;, }, while, (, current, !=, n, ), ;, }, static]
[., getFirstChild, (, ), ., getNext, (, ), ,, rightPrecedence, ,, rhsContext, ), ;, }, while, (, current, !=, n]
[,, rhsContext, ), ;, }, while, (, current, !=, n, ), ;, }, static, boolean, isSimpleNumber, (, String, s, )]
[), ;, }, while, (, current, !=, n, ), ;, }, static, boolean, isSimpleNumber, (, String, s, ), {, int]
[), ;, }, static, boolean, isSimpleNumber, (, String, s, ), {, int, len, =, s, ., length, (, ), ;]
[!=, n, ), ;, }, static, boolean, isSimpleNumber, (, String, s, ), {, int, len, =, s, ., length, (]
[), ;, }, static, boolean, isSimpleNumber, (, String, s, ), {, int, len, =, s, ., length, (, ), ;]
[;, for, (, int, index, =, 0, ;, index, <, len, ;, index, ++, ), {, char, c, =, s]
[., length, (, ), ;, for, (, int, index, =, 0, ;, index, <, len, ;, index, ++, ), {]
[;, index, <, len, ;, index, ++, ), {, char, c, =, s, ., charAt, (, index, ), ;, if]
[;, index, ++, ), {, char, c, =, s, ., charAt, (, index, ), ;, if, (, c, <, '0']
[<, len, ;, index, ++, ), {, char, c, =, s, ., charAt, (, index, ), ;, if, (, c]
[;, index, ++, ), {, char, c, =, s, ., charAt, (, index, ), ;, if, (, c, <, '0']
[), {, char, c, =, s, ., charAt, (, index, ), ;, if, (, c, <, '0', ||, c, >]
[++, ), {, char, c, =, s, ., charAt, (, index, ), ;, if, (, c, <, '0', ||, c]
[;, if, (, c, <, '0', ||, c, >, '9', ), {, return, false, ;, }, }, return, len, >]
[., charAt, (, index, ), ;, if, (, c, <, '0', ||, c, >, '9', ), {, return, false, ;]
[), ;, if, (, c, <, '0', ||, c, >, '9', ), {, return, false, ;, }, }, return, len]
[), {, return, false, ;, }, }, return, len, >, 0, &&, s, ., charAt, (, 0, ), !=, '0']
[||, c, >, '9', ), {, return, false, ;, }, }, return, len, >, 0, &&, s, ., charAt, (]
[<, '0', ||, c, >, '9', ), {, return, false, ;, }, }, return, len, >, 0, &&, s, .]
[||, c, >, '9', ), {, return, false, ;, }, }, return, len, >, 0, &&, s, ., charAt, (]
[), {, return, false, ;, }, }, return, len, >, 0, &&, s, ., charAt, (, 0, ), !=, '0']
[>, '9', ), {, return, false, ;, }, }, return, len, >, 0, &&, s, ., charAt, (, 0, )]
[), {, return, false, ;, }, }, return, len, >, 0, &&, s, ., charAt, (, 0, ), !=, '0']
[;, }, }, return, len, >, 0, &&, s, ., charAt, (, 0, ), !=, '0', ;, }, static, double]
[;, }, static, double, getSimpleNumber, (, String, s, ), {, if, (, isSimpleNumber, (, s, ), ), {, try, {]
[&&, s, ., charAt, (, 0, ), !=, '0', ;, }, static, double, getSimpleNumber, (, String, s, ), {, if]
[>, 0, &&, s, ., charAt, (, 0, ), !=, '0', ;, }, static, double, getSimpleNumber, (, String, s, )]
[&&, s, ., charAt, (, 0, ), !=, '0', ;, }, static, double, getSimpleNumber, (, String, s, ), {, if]
[;, }, static, double, getSimpleNumber, (, String, s, ), {, if, (, isSimpleNumber, (, s, ), ), {, try, {]
[!=, '0', ;, }, static, double, getSimpleNumber, (, String, s, ), {, if, (, isSimpleNumber, (, s, ), ), {]
[., charAt, (, 0, ), !=, '0', ;, }, static, double, getSimpleNumber, (, String, s, ), {, if, (, isSimpleNumber]
[), !=, '0', ;, }, static, double, getSimpleNumber, (, String, s, ), {, if, (, isSimpleNumber, (, s, ), )]
[;, }, static, double, getSimpleNumber, (, String, s, ), {, if, (, isSimpleNumber, (, s, ), ), {, try, {]
[), {, try, {, long, l, =, Long, ., parseLong, (, s, ), ;, if, (, l, <, NodeUtil, .]
[), ), {, try, {, long, l, =, Long, ., parseLong, (, s, ), ;, if, (, l, <, NodeUtil]
[;, if, (, l, <, NodeUtil, ., MAX_POSITIVE_INTEGER_NUMBER, ), {, return, l, ;, }, }, catch, (, NumberFormatException, e, )]
[., parseLong, (, s, ), ;, if, (, l, <, NodeUtil, ., MAX_POSITIVE_INTEGER_NUMBER, ), {, return, l, ;, }, }]
[), ;, if, (, l, <, NodeUtil, ., MAX_POSITIVE_INTEGER_NUMBER, ), {, return, l, ;, }, }, catch, (, NumberFormatException, e]
[), {, return, l, ;, }, }, catch, (, NumberFormatException, e, ), {, }, }, return, Double, ., NaN, ;]
[<, NodeUtil, ., MAX_POSITIVE_INTEGER_NUMBER, ), {, return, l, ;, }, }, catch, (, NumberFormatException, e, ), {, }, }, return]
[), {, return, l, ;, }, }, catch, (, NumberFormatException, e, ), {, }, }, return, Double, ., NaN, ;]
[., MAX_POSITIVE_INTEGER_NUMBER, ), {, return, l, ;, }, }, catch, (, NumberFormatException, e, ), {, }, }, return, Double, .]
[;, }, }, catch, (, NumberFormatException, e, ), {, }, }, return, Double, ., NaN, ;, }, private, boolean, isIndirectEval]
[;, }, private, boolean, isIndirectEval, (, Node, n, ), {, return, n, ., isName, (, ), &&, "eval", ., equals]
[., NaN, ;, }, private, boolean, isIndirectEval, (, Node, n, ), {, return, n, ., isName, (, ), &&, "eval"]
[;, }, private, void, addNonEmptyStatement, (, Node, n, ,, Context, context, ,, boolean, allowNonBlockChild, ), {, Node, nodeToProcess, =, n]
[&&, !, n, ., getBooleanProp, (, Node, ., DIRECT_EVAL, ), ;, }, private, void, addNonEmptyStatement, (, Node, n, ,, Context]
[&&, "eval", ., equals, (, n, ., getString, (, ), ), &&, !, n, ., getBooleanProp, (, Node, ., DIRECT_EVAL]
[., isName, (, ), &&, "eval", ., equals, (, n, ., getString, (, ), ), &&, !, n, ., getBooleanProp]
[&&, !, n, ., getBooleanProp, (, Node, ., DIRECT_EVAL, ), ;, }, private, void, addNonEmptyStatement, (, Node, n, ,, Context]
[., equals, (, n, ., getString, (, ), ), &&, !, n, ., getBooleanProp, (, Node, ., DIRECT_EVAL, ), ;]
[), &&, !, n, ., getBooleanProp, (, Node, ., DIRECT_EVAL, ), ;, }, private, void, addNonEmptyStatement, (, Node, n, ,]
[., getString, (, ), ), &&, !, n, ., getBooleanProp, (, Node, ., DIRECT_EVAL, ), ;, }, private, void, addNonEmptyStatement]
[;, }, private, void, addNonEmptyStatement, (, Node, n, ,, Context, context, ,, boolean, allowNonBlockChild, ), {, Node, nodeToProcess, =, n]
[;, }, private, void, addNonEmptyStatement, (, Node, n, ,, Context, context, ,, boolean, allowNonBlockChild, ), {, Node, nodeToProcess, =, n]
[., getBooleanProp, (, Node, ., DIRECT_EVAL, ), ;, }, private, void, addNonEmptyStatement, (, Node, n, ,, Context, context, ,, boolean]
[), ;, }, private, void, addNonEmptyStatement, (, Node, n, ,, Context, context, ,, boolean, allowNonBlockChild, ), {, Node, nodeToProcess, =]
[., DIRECT_EVAL, ), ;, }, private, void, addNonEmptyStatement, (, Node, n, ,, Context, context, ,, boolean, allowNonBlockChild, ), {, Node]
[;, if, (, !, allowNonBlockChild, &&, !, n, ., isBlock, (, ), ), {, throw, new, Error, (, "Missing BLOCK child.", )]
[), {, throw, new, Error, (, "Missing BLOCK child.", ), ;, }, if, (, n, ., isBlock, (, ), ), {, int]
[&&, !, n, ., isBlock, (, ), ), {, throw, new, Error, (, "Missing BLOCK child.", ), ;, }, if, (, n]
[&&, !, n, ., isBlock, (, ), ), {, throw, new, Error, (, "Missing BLOCK child.", ), ;, }, if, (, n]
[), {, throw, new, Error, (, "Missing BLOCK child.", ), ;, }, if, (, n, ., isBlock, (, ), ), {, int]
[), {, throw, new, Error, (, "Missing BLOCK child.", ), ;, }, if, (, n, ., isBlock, (, ), ), {, int]
[., isBlock, (, ), ), {, throw, new, Error, (, "Missing BLOCK child.", ), ;, }, if, (, n, ., isBlock, (]
[;, }, if, (, n, ., isBlock, (, ), ), {, int, count, =, getNonEmptyChildCount, (, n, ,, 2, )]
[), ;, }, if, (, n, ., isBlock, (, ), ), {, int, count, =, getNonEmptyChildCount, (, n, ,, 2]
[), {, int, count, =, getNonEmptyChildCount, (, n, ,, 2, ), ;, if, (, count, ==, 0, ), {, if]
[., isBlock, (, ), ), {, int, count, =, getNonEmptyChildCount, (, n, ,, 2, ), ;, if, (, count, ==]
[;, if, (, count, ==, 0, ), {, if, (, cc, ., shouldPreserveExtraBlocks, (, ), ), {, cc, ., beginBlock]
[,, 2, ), ;, if, (, count, ==, 0, ), {, if, (, cc, ., shouldPreserveExtraBlocks, (, ), ), {]
[), ;, if, (, count, ==, 0, ), {, if, (, cc, ., shouldPreserveExtraBlocks, (, ), ), {, cc, .]
[), {, if, (, cc, ., shouldPreserveExtraBlocks, (, ), ), {, cc, ., beginBlock, (, ), ;, cc, ., endBlock]
[==, 0, ), {, if, (, cc, ., shouldPreserveExtraBlocks, (, ), ), {, cc, ., beginBlock, (, ), ;, cc]
[), {, if, (, cc, ., shouldPreserveExtraBlocks, (, ), ), {, cc, ., beginBlock, (, ), ;, cc, ., endBlock]
[), {, cc, ., beginBlock, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==]
[., shouldPreserveExtraBlocks, (, ), ), {, cc, ., beginBlock, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (]
[;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, }]
[., beginBlock, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT]
[;, }, else, {, cc, ., endStatement, (, true, ), ;, }, return, ;, }, if, (, count, ==, 1]
[., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, }, else, {]
[), ;, }, else, {, cc, ., endStatement, (, true, ), ;, }, return, ;, }, if, (, count, ==]
[., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, }, else, {, cc, ., endStatement, (]
[,, context, ==, Context, ., STATEMENT, ), ), ;, }, else, {, cc, ., endStatement, (, true, ), ;, }]
[), ), ;, }, else, {, cc, ., endStatement, (, true, ), ;, }, return, ;, }, if, (, count]
[==, Context, ., STATEMENT, ), ), ;, }, else, {, cc, ., endStatement, (, true, ), ;, }, return, ;]
[), ), ;, }, else, {, cc, ., endStatement, (, true, ), ;, }, return, ;, }, if, (, count]
[., STATEMENT, ), ), ;, }, else, {, cc, ., endStatement, (, true, ), ;, }, return, ;, }, if]
[;, }, return, ;, }, if, (, count, ==, 1, ), {, Node, firstAndOnlyChild, =, getFirstNonEmptyChild, (, n, ), ;]
[., endStatement, (, true, ), ;, }, return, ;, }, if, (, count, ==, 1, ), {, Node, firstAndOnlyChild, =]
[), ;, }, return, ;, }, if, (, count, ==, 1, ), {, Node, firstAndOnlyChild, =, getFirstNonEmptyChild, (, n, )]
[), {, Node, firstAndOnlyChild, =, getFirstNonEmptyChild, (, n, ), ;, boolean, alwaysWrapInBlock, =, cc, ., shouldPreserveExtraBlocks, (, ), ;, if]
[==, 1, ), {, Node, firstAndOnlyChild, =, getFirstNonEmptyChild, (, n, ), ;, boolean, alwaysWrapInBlock, =, cc, ., shouldPreserveExtraBlocks, (, )]
[), {, Node, firstAndOnlyChild, =, getFirstNonEmptyChild, (, n, ), ;, boolean, alwaysWrapInBlock, =, cc, ., shouldPreserveExtraBlocks, (, ), ;, if]
[;, boolean, alwaysWrapInBlock, =, cc, ., shouldPreserveExtraBlocks, (, ), ;, if, (, alwaysWrapInBlock, ||, isOneExactlyFunctionOrDo, (, firstAndOnlyChild, ), ), {]
[), ;, boolean, alwaysWrapInBlock, =, cc, ., shouldPreserveExtraBlocks, (, ), ;, if, (, alwaysWrapInBlock, ||, isOneExactlyFunctionOrDo, (, firstAndOnlyChild, ), )]
[;, if, (, alwaysWrapInBlock, ||, isOneExactlyFunctionOrDo, (, firstAndOnlyChild, ), ), {, cc, ., beginBlock, (, ), ;, add, (, firstAndOnlyChild]
[., shouldPreserveExtraBlocks, (, ), ;, if, (, alwaysWrapInBlock, ||, isOneExactlyFunctionOrDo, (, firstAndOnlyChild, ), ), {, cc, ., beginBlock, (, )]
[), {, cc, ., beginBlock, (, ), ;, add, (, firstAndOnlyChild, ,, Context, ., STATEMENT, ), ;, cc, ., maybeLineBreak]
[||, isOneExactlyFunctionOrDo, (, firstAndOnlyChild, ), ), {, cc, ., beginBlock, (, ), ;, add, (, firstAndOnlyChild, ,, Context, ., STATEMENT]
[), {, cc, ., beginBlock, (, ), ;, add, (, firstAndOnlyChild, ,, Context, ., STATEMENT, ), ;, cc, ., maybeLineBreak]
[), ), {, cc, ., beginBlock, (, ), ;, add, (, firstAndOnlyChild, ,, Context, ., STATEMENT, ), ;, cc, .]
[;, add, (, firstAndOnlyChild, ,, Context, ., STATEMENT, ), ;, cc, ., maybeLineBreak, (, ), ;, cc, ., endBlock, (]
[., beginBlock, (, ), ;, add, (, firstAndOnlyChild, ,, Context, ., STATEMENT, ), ;, cc, ., maybeLineBreak, (, ), ;]
[;, cc, ., maybeLineBreak, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context]
[,, Context, ., STATEMENT, ), ;, cc, ., maybeLineBreak, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (]
[), ;, cc, ., maybeLineBreak, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==]
[., STATEMENT, ), ;, cc, ., maybeLineBreak, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,]
[;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, return]
[., maybeLineBreak, (, ), ;, cc, ., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT]
[;, return, ;, }, else, {, nodeToProcess, =, firstAndOnlyChild, ;, }, }, if, (, count, >, 1, ), {, context]
[., endBlock, (, cc, ., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, return, ;, }]
[), ;, return, ;, }, else, {, nodeToProcess, =, firstAndOnlyChild, ;, }, }, if, (, count, >, 1, ), {]
[., breakAfterBlockFor, (, n, ,, context, ==, Context, ., STATEMENT, ), ), ;, return, ;, }, else, {, nodeToProcess, =]
[,, context, ==, Context, ., STATEMENT, ), ), ;, return, ;, }, else, {, nodeToProcess, =, firstAndOnlyChild, ;, }, }]
[), ), ;, return, ;, }, else, {, nodeToProcess, =, firstAndOnlyChild, ;, }, }, if, (, count, >, 1, )]
[==, Context, ., STATEMENT, ), ), ;, return, ;, }, else, {, nodeToProcess, =, firstAndOnlyChild, ;, }, }, if, (]
[), ), ;, return, ;, }, else, {, nodeToProcess, =, firstAndOnlyChild, ;, }, }, if, (, count, >, 1, )]
[., STATEMENT, ), ), ;, return, ;, }, else, {, nodeToProcess, =, firstAndOnlyChild, ;, }, }, if, (, count, >]
[=, firstAndOnlyChild, ;, }, }, if, (, count, >, 1, ), {, context, =, Context, ., PRESERVE_BLOCK, ;, }, }]
[;, }, }, if, (, count, >, 1, ), {, context, =, Context, ., PRESERVE_BLOCK, ;, }, }, if, (]
[), {, context, =, Context, ., PRESERVE_BLOCK, ;, }, }, if, (, nodeToProcess, ., isEmpty, (, ), ), {, cc]
[>, 1, ), {, context, =, Context, ., PRESERVE_BLOCK, ;, }, }, if, (, nodeToProcess, ., isEmpty, (, ), )]
[), {, context, =, Context, ., PRESERVE_BLOCK, ;, }, }, if, (, nodeToProcess, ., isEmpty, (, ), ), {, cc]
[=, Context, ., PRESERVE_BLOCK, ;, }, }, if, (, nodeToProcess, ., isEmpty, (, ), ), {, cc, ., endStatement, (]
[;, }, }, if, (, nodeToProcess, ., isEmpty, (, ), ), {, cc, ., endStatement, (, true, ), ;, }]
[., PRESERVE_BLOCK, ;, }, }, if, (, nodeToProcess, ., isEmpty, (, ), ), {, cc, ., endStatement, (, true, )]
[), {, cc, ., endStatement, (, true, ), ;, }, else, {, add, (, nodeToProcess, ,, context, ), ;, if]
[., isEmpty, (, ), ), {, cc, ., endStatement, (, true, ), ;, }, else, {, add, (, nodeToProcess, ,]
[;, }, else, {, add, (, nodeToProcess, ,, context, ), ;, if, (, nodeToProcess, ., isVar, (, ), ), {]
[., endStatement, (, true, ), ;, }, else, {, add, (, nodeToProcess, ,, context, ), ;, if, (, nodeToProcess, .]
[), ;, }, else, {, add, (, nodeToProcess, ,, context, ), ;, if, (, nodeToProcess, ., isVar, (, ), )]
[;, if, (, nodeToProcess, ., isVar, (, ), ), {, cc, ., endStatement, (, ), ;, }, }, }, private]
[,, context, ), ;, if, (, nodeToProcess, ., isVar, (, ), ), {, cc, ., endStatement, (, ), ;, }]
[), ;, if, (, nodeToProcess, ., isVar, (, ), ), {, cc, ., endStatement, (, ), ;, }, }, }]
[), {, cc, ., endStatement, (, ), ;, }, }, }, private, boolean, isOneExactlyFunctionOrDo, (, Node, n, ), {, if]
[., isVar, (, ), ), {, cc, ., endStatement, (, ), ;, }, }, }, private, boolean, isOneExactlyFunctionOrDo, (, Node]
[;, }, }, }, private, boolean, isOneExactlyFunctionOrDo, (, Node, n, ), {, if, (, n, ., isLabel, (, ), )]
[., endStatement, (, ), ;, }, }, }, private, boolean, isOneExactlyFunctionOrDo, (, Node, n, ), {, if, (, n, .]
[), {, Node, labeledStatement, =, n, ., getLastChild, (, ), ;, if, (, !, labeledStatement, ., isBlock, (, ), )]
[., isLabel, (, ), ), {, Node, labeledStatement, =, n, ., getLastChild, (, ), ;, if, (, !, labeledStatement, .]
[;, if, (, !, labeledStatement, ., isBlock, (, ), ), {, return, isOneExactlyFunctionOrDo, (, labeledStatement, ), ;, }, else, {]
[., getLastChild, (, ), ;, if, (, !, labeledStatement, ., isBlock, (, ), ), {, return, isOneExactlyFunctionOrDo, (, labeledStatement, )]
[), {, return, isOneExactlyFunctionOrDo, (, labeledStatement, ), ;, }, else, {, if, (, getNonEmptyChildCount, (, n, ,, 2, ), ==]
[), {, return, isOneExactlyFunctionOrDo, (, labeledStatement, ), ;, }, else, {, if, (, getNonEmptyChildCount, (, n, ,, 2, ), ==]
[., isBlock, (, ), ), {, return, isOneExactlyFunctionOrDo, (, labeledStatement, ), ;, }, else, {, if, (, getNonEmptyChildCount, (, n]
[;, }, else, {, if, (, getNonEmptyChildCount, (, n, ,, 2, ), ==, 1, ), {, return, isOneExactlyFunctionOrDo, (, getFirstNonEmptyChild]
[), ;, }, else, {, if, (, getNonEmptyChildCount, (, n, ,, 2, ), ==, 1, ), {, return, isOneExactlyFunctionOrDo, (]
[), {, return, isOneExactlyFunctionOrDo, (, getFirstNonEmptyChild, (, n, ), ), ;, }, else, {, return, false, ;, }, }, }]
[==, 1, ), {, return, isOneExactlyFunctionOrDo, (, getFirstNonEmptyChild, (, n, ), ), ;, }, else, {, return, false, ;, }]
[,, 2, ), ==, 1, ), {, return, isOneExactlyFunctionOrDo, (, getFirstNonEmptyChild, (, n, ), ), ;, }, else, {, return]
[), ==, 1, ), {, return, isOneExactlyFunctionOrDo, (, getFirstNonEmptyChild, (, n, ), ), ;, }, else, {, return, false, ;]
[), {, return, isOneExactlyFunctionOrDo, (, getFirstNonEmptyChild, (, n, ), ), ;, }, else, {, return, false, ;, }, }, }]
[;, }, else, {, return, false, ;, }, }, }, else, {, return, (, n, ., isFunction, (, ), ||]
[), ;, }, else, {, return, false, ;, }, }, }, else, {, return, (, n, ., isFunction, (, )]
[), ), ;, }, else, {, return, false, ;, }, }, }, else, {, return, (, n, ., isFunction, (]
[;, }, }, }, else, {, return, (, n, ., isFunction, (, ), ||, n, ., isDo, (, ), )]
[;, }, }, private, void, addExpr, (, Node, n, ,, int, minPrecedence, ,, Context, context, ), {, if, (, (]
[), ;, }, }, private, void, addExpr, (, Node, n, ,, int, minPrecedence, ,, Context, context, ), {, if, (]
[||, n, ., isDo, (, ), ), ;, }, }, private, void, addExpr, (, Node, n, ,, int, minPrecedence, ,]
[., isFunction, (, ), ||, n, ., isDo, (, ), ), ;, }, }, private, void, addExpr, (, Node, n]
[), ;, }, }, private, void, addExpr, (, Node, n, ,, int, minPrecedence, ,, Context, context, ), {, if, (]
[., isDo, (, ), ), ;, }, }, private, void, addExpr, (, Node, n, ,, int, minPrecedence, ,, Context, context]
[), {, add, (, "(", ), ;, add, (, n, ,, Context, ., OTHER, ), ;, add, (, ")", )]
[||, (, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ), &&, n, ., isIn, (, ), ), ), {, add, (]
[), ||, (, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ), &&, n, ., isIn, (, ), ), ), {, add]
[<, minPrecedence, ), ||, (, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ), &&, n, ., isIn, (, ), ), )]
[., precedence, (, n, ., getType, (, ), ), <, minPrecedence, ), ||, (, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE]
[), <, minPrecedence, ), ||, (, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ), &&, n, ., isIn, (, ), )]
[., getType, (, ), ), <, minPrecedence, ), ||, (, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ), &&, n, .]
[), ||, (, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ), &&, n, ., isIn, (, ), ), ), {, add]
[), {, add, (, "(", ), ;, add, (, n, ,, Context, ., OTHER, ), ;, add, (, ")", )]
[), ), {, add, (, "(", ), ;, add, (, n, ,, Context, ., OTHER, ), ;, add, (, ")"]
[&&, n, ., isIn, (, ), ), ), {, add, (, "(", ), ;, add, (, n, ,, Context, .]
[), &&, n, ., isIn, (, ), ), ), {, add, (, "(", ), ;, add, (, n, ,, Context]
[==, Context, ., IN_FOR_INIT_CLAUSE, ), &&, n, ., isIn, (, ), ), ), {, add, (, "(", ), ;, add]
[), &&, n, ., isIn, (, ), ), ), {, add, (, "(", ), ;, add, (, n, ,, Context]
[., IN_FOR_INIT_CLAUSE, ), &&, n, ., isIn, (, ), ), ), {, add, (, "(", ), ;, add, (, n]
[), ), {, add, (, "(", ), ;, add, (, n, ,, Context, ., OTHER, ), ;, add, (, ")"]
[., isIn, (, ), ), ), {, add, (, "(", ), ;, add, (, n, ,, Context, ., OTHER, )]
[;, add, (, n, ,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else, {, add, (]
[), ;, add, (, n, ,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else, {, add]
[;, add, (, ")", ), ;, }, else, {, add, (, n, ,, context, ), ;, }, }, void, addList]
[,, Context, ., OTHER, ), ;, add, (, ")", ), ;, }, else, {, add, (, n, ,, context, )]
[), ;, add, (, ")", ), ;, }, else, {, add, (, n, ,, context, ), ;, }, }, void]
[., OTHER, ), ;, add, (, ")", ), ;, }, else, {, add, (, n, ,, context, ), ;, }]
[;, }, else, {, add, (, n, ,, context, ), ;, }, }, void, addList, (, Node, firstInList, ), {]
[), ;, }, else, {, add, (, n, ,, context, ), ;, }, }, void, addList, (, Node, firstInList, )]
[;, }, }, void, addList, (, Node, firstInList, ), {, addList, (, firstInList, ,, true, ,, Context, ., OTHER, )]
[,, context, ), ;, }, }, void, addList, (, Node, firstInList, ), {, addList, (, firstInList, ,, true, ,, Context]
[), ;, }, }, void, addList, (, Node, firstInList, ), {, addList, (, firstInList, ,, true, ,, Context, ., OTHER]
[;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ), {, addList, (, firstInList, ,, isArrayOrFunctionArgument, ,, Context, .]
[,, true, ,, Context, ., OTHER, ), ;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ), {, addList]
[,, Context, ., OTHER, ), ;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ), {, addList, (, firstInList]
[), ;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ), {, addList, (, firstInList, ,, isArrayOrFunctionArgument, ,, Context]
[., OTHER, ), ;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ), {, addList, (, firstInList, ,, isArrayOrFunctionArgument]
[;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ,, Context, lhsContext, ), {, for, (, Node, n, =]
[,, isArrayOrFunctionArgument, ,, Context, ., OTHER, ), ;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ,, Context, lhsContext]
[,, Context, ., OTHER, ), ;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ,, Context, lhsContext, ), {]
[), ;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ,, Context, lhsContext, ), {, for, (, Node, n]
[., OTHER, ), ;, }, void, addList, (, Node, firstInList, ,, boolean, isArrayOrFunctionArgument, ,, Context, lhsContext, ), {, for, (]
[;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, boolean, isFirst, =, n, ==, firstInList]
[;, n, =, n, ., getNext, (, ), ), {, boolean, isFirst, =, n, ==, firstInList, ;, if, (, isFirst]
[!=, null, ;, n, =, n, ., getNext, (, ), ), {, boolean, isFirst, =, n, ==, firstInList, ;, if]
[;, n, =, n, ., getNext, (, ), ), {, boolean, isFirst, =, n, ==, firstInList, ;, if, (, isFirst]
[=, n, ., getNext, (, ), ), {, boolean, isFirst, =, n, ==, firstInList, ;, if, (, isFirst, ), {]
[), {, boolean, isFirst, =, n, ==, firstInList, ;, if, (, isFirst, ), {, addExpr, (, n, ,, isArrayOrFunctionArgument, ?]
[., getNext, (, ), ), {, boolean, isFirst, =, n, ==, firstInList, ;, if, (, isFirst, ), {, addExpr, (]
[;, if, (, isFirst, ), {, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :, 0, ,, lhsContext, ), ;, }]
[==, firstInList, ;, if, (, isFirst, ), {, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :, 0, ,, lhsContext, )]
[;, if, (, isFirst, ), {, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :, 0, ,, lhsContext, ), ;, }]
[), {, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :, 0, ,, lhsContext, ), ;, }, else, {, cc, .]
[;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :, 0, ,]
[,, isArrayOrFunctionArgument, ?, 1, :, 0, ,, lhsContext, ), ;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr]
[,, lhsContext, ), ;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1]
[?, 1, :, 0, ,, lhsContext, ), ;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr, (, n]
[:, 0, ,, lhsContext, ), ;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr, (, n, ,, isArrayOrFunctionArgument]
[,, lhsContext, ), ;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1]
[), ;, }, else, {, cc, ., listSeparator, (, ), ;, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :, 0]
[;, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :, 0, ,, Context, ., OTHER, ), ;, }, }, }, void]
[., listSeparator, (, ), ;, addExpr, (, n, ,, isArrayOrFunctionArgument, ?, 1, :, 0, ,, Context, ., OTHER, ), ;]
[;, }, }, }, void, addArrayList, (, Node, firstInList, ), {, boolean, lastWasEmpty, =, false, ;, for, (, Node, n]
[,, isArrayOrFunctionArgument, ?, 1, :, 0, ,, Context, ., OTHER, ), ;, }, }, }, void, addArrayList, (, Node, firstInList]
[,, Context, ., OTHER, ), ;, }, }, }, void, addArrayList, (, Node, firstInList, ), {, boolean, lastWasEmpty, =, false]
[?, 1, :, 0, ,, Context, ., OTHER, ), ;, }, }, }, void, addArrayList, (, Node, firstInList, ), {]
[:, 0, ,, Context, ., OTHER, ), ;, }, }, }, void, addArrayList, (, Node, firstInList, ), {, boolean, lastWasEmpty]
[,, Context, ., OTHER, ), ;, }, }, }, void, addArrayList, (, Node, firstInList, ), {, boolean, lastWasEmpty, =, false]
[), ;, }, }, }, void, addArrayList, (, Node, firstInList, ), {, boolean, lastWasEmpty, =, false, ;, for, (, Node]
[., OTHER, ), ;, }, }, }, void, addArrayList, (, Node, firstInList, ), {, boolean, lastWasEmpty, =, false, ;, for]
[;, for, (, Node, n, =, firstInList, ;, n, !=, null, ;, n, =, n, ., getNext, (, ), )]
[;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (, n, !=, firstInList, )]
[;, n, =, n, ., getNext, (, ), ), {, if, (, n, !=, firstInList, ), {, cc, ., listSeparator]
[!=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (, n, !=, firstInList, ), {, cc]
[;, n, =, n, ., getNext, (, ), ), {, if, (, n, !=, firstInList, ), {, cc, ., listSeparator]
[=, n, ., getNext, (, ), ), {, if, (, n, !=, firstInList, ), {, cc, ., listSeparator, (, )]
[), {, if, (, n, !=, firstInList, ), {, cc, ., listSeparator, (, ), ;, }, addExpr, (, n, ,]
[., getNext, (, ), ), {, if, (, n, !=, firstInList, ), {, cc, ., listSeparator, (, ), ;, }]
[), {, cc, ., listSeparator, (, ), ;, }, addExpr, (, n, ,, 1, ,, Context, ., OTHER, ), ;]
[!=, firstInList, ), {, cc, ., listSeparator, (, ), ;, }, addExpr, (, n, ,, 1, ,, Context, ., OTHER]
[), {, cc, ., listSeparator, (, ), ;, }, addExpr, (, n, ,, 1, ,, Context, ., OTHER, ), ;]
[;, }, addExpr, (, n, ,, 1, ,, Context, ., OTHER, ), ;, lastWasEmpty, =, n, ., isEmpty, (, )]
[., listSeparator, (, ), ;, }, addExpr, (, n, ,, 1, ,, Context, ., OTHER, ), ;, lastWasEmpty, =, n]
[;, lastWasEmpty, =, n, ., isEmpty, (, ), ;, }, if, (, lastWasEmpty, ), {, cc, ., listSeparator, (, )]
[,, 1, ,, Context, ., OTHER, ), ;, lastWasEmpty, =, n, ., isEmpty, (, ), ;, }, if, (, lastWasEmpty]
[,, Context, ., OTHER, ), ;, lastWasEmpty, =, n, ., isEmpty, (, ), ;, }, if, (, lastWasEmpty, ), {]
[), ;, lastWasEmpty, =, n, ., isEmpty, (, ), ;, }, if, (, lastWasEmpty, ), {, cc, ., listSeparator, (]
[., OTHER, ), ;, lastWasEmpty, =, n, ., isEmpty, (, ), ;, }, if, (, lastWasEmpty, ), {, cc, .]
[=, n, ., isEmpty, (, ), ;, }, if, (, lastWasEmpty, ), {, cc, ., listSeparator, (, ), ;, }]
[;, }, if, (, lastWasEmpty, ), {, cc, ., listSeparator, (, ), ;, }, }, void, addCaseBody, (, Node, caseBody]
[., isEmpty, (, ), ;, }, if, (, lastWasEmpty, ), {, cc, ., listSeparator, (, ), ;, }, }, void]
[), {, cc, ., listSeparator, (, ), ;, }, }, void, addCaseBody, (, Node, caseBody, ), {, cc, ., beginCaseBody]
[;, }, }, void, addCaseBody, (, Node, caseBody, ), {, cc, ., beginCaseBody, (, ), ;, add, (, caseBody, )]
[., listSeparator, (, ), ;, }, }, void, addCaseBody, (, Node, caseBody, ), {, cc, ., beginCaseBody, (, ), ;]
[;, add, (, caseBody, ), ;, cc, ., endCaseBody, (, ), ;, }, void, addAllSiblings, (, Node, n, ), {]
[., beginCaseBody, (, ), ;, add, (, caseBody, ), ;, cc, ., endCaseBody, (, ), ;, }, void, addAllSiblings, (]
[;, cc, ., endCaseBody, (, ), ;, }, void, addAllSiblings, (, Node, n, ), {, for, (, Node, c, =]
[), ;, cc, ., endCaseBody, (, ), ;, }, void, addAllSiblings, (, Node, n, ), {, for, (, Node, c]
[;, }, void, addAllSiblings, (, Node, n, ), {, for, (, Node, c, =, n, ;, c, !=, null, ;]
[., endCaseBody, (, ), ;, }, void, addAllSiblings, (, Node, n, ), {, for, (, Node, c, =, n, ;]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, add, (, c, ), ;, }]
[;, c, =, c, ., getNext, (, ), ), {, add, (, c, ), ;, }, }, private, void, addJsString]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, add, (, c, ), ;, }, }, private]
[;, c, =, c, ., getNext, (, ), ), {, add, (, c, ), ;, }, }, private, void, addJsString]
[=, c, ., getNext, (, ), ), {, add, (, c, ), ;, }, }, private, void, addJsString, (, Node]
[), {, add, (, c, ), ;, }, }, private, void, addJsString, (, Node, n, ), {, String, s, =]
[., getNext, (, ), ), {, add, (, c, ), ;, }, }, private, void, addJsString, (, Node, n, )]
[;, }, }, private, void, addJsString, (, Node, n, ), {, String, s, =, n, ., getString, (, ), ;]
[), ;, }, }, private, void, addJsString, (, Node, n, ), {, String, s, =, n, ., getString, (, )]
[;, boolean, useSlashV, =, n, ., getBooleanProp, (, Node, ., SLASH_V, ), ;, if, (, useSlashV, ), {, add, (]
[., getString, (, ), ;, boolean, useSlashV, =, n, ., getBooleanProp, (, Node, ., SLASH_V, ), ;, if, (, useSlashV]
[;, if, (, useSlashV, ), {, add, (, jsString, (, n, ., getString, (, ), ,, useSlashV, ), ), ;]
[., getBooleanProp, (, Node, ., SLASH_V, ), ;, if, (, useSlashV, ), {, add, (, jsString, (, n, ., getString]
[), ;, if, (, useSlashV, ), {, add, (, jsString, (, n, ., getString, (, ), ,, useSlashV, ), )]
[., SLASH_V, ), ;, if, (, useSlashV, ), {, add, (, jsString, (, n, ., getString, (, ), ,, useSlashV]
[), {, add, (, jsString, (, n, ., getString, (, ), ,, useSlashV, ), ), ;, }, else, {, String]
[;, }, else, {, String, cached, =, ESCAPED_JS_STRINGS, ., get, (, s, ), ;, if, (, cached, ==, null, )]
[), ;, }, else, {, String, cached, =, ESCAPED_JS_STRINGS, ., get, (, s, ), ;, if, (, cached, ==, null]
[,, useSlashV, ), ), ;, }, else, {, String, cached, =, ESCAPED_JS_STRINGS, ., get, (, s, ), ;, if, (]
[., getString, (, ), ,, useSlashV, ), ), ;, }, else, {, String, cached, =, ESCAPED_JS_STRINGS, ., get, (, s]
[), ), ;, }, else, {, String, cached, =, ESCAPED_JS_STRINGS, ., get, (, s, ), ;, if, (, cached, ==]
[;, if, (, cached, ==, null, ), {, cached, =, jsString, (, n, ., getString, (, ), ,, useSlashV, )]
[., get, (, s, ), ;, if, (, cached, ==, null, ), {, cached, =, jsString, (, n, ., getString]
[), ;, if, (, cached, ==, null, ), {, cached, =, jsString, (, n, ., getString, (, ), ,, useSlashV]
[), {, cached, =, jsString, (, n, ., getString, (, ), ,, useSlashV, ), ;, ESCAPED_JS_STRINGS, ., put, (, s]
[==, null, ), {, cached, =, jsString, (, n, ., getString, (, ), ,, useSlashV, ), ;, ESCAPED_JS_STRINGS, ., put]
[), {, cached, =, jsString, (, n, ., getString, (, ), ,, useSlashV, ), ;, ESCAPED_JS_STRINGS, ., put, (, s]
[=, jsString, (, n, ., getString, (, ), ,, useSlashV, ), ;, ESCAPED_JS_STRINGS, ., put, (, s, ,, cached, )]
[;, ESCAPED_JS_STRINGS, ., put, (, s, ,, cached, ), ;, }, add, (, cached, ), ;, }, }, private, String]
[,, useSlashV, ), ;, ESCAPED_JS_STRINGS, ., put, (, s, ,, cached, ), ;, }, add, (, cached, ), ;, }]
[., getString, (, ), ,, useSlashV, ), ;, ESCAPED_JS_STRINGS, ., put, (, s, ,, cached, ), ;, }, add, (]
[), ;, ESCAPED_JS_STRINGS, ., put, (, s, ,, cached, ), ;, }, add, (, cached, ), ;, }, }, private]
[;, }, add, (, cached, ), ;, }, }, private, String, jsString, (, String, s, ,, boolean, useSlashV, ), {]
[., put, (, s, ,, cached, ), ;, }, add, (, cached, ), ;, }, }, private, String, jsString, (]
[,, cached, ), ;, }, add, (, cached, ), ;, }, }, private, String, jsString, (, String, s, ,, boolean]
[), ;, }, add, (, cached, ), ;, }, }, private, String, jsString, (, String, s, ,, boolean, useSlashV, )]
[;, }, }, private, String, jsString, (, String, s, ,, boolean, useSlashV, ), {, int, singleq, =, 0, ,, doubleq]
[), ;, }, }, private, String, jsString, (, String, s, ,, boolean, useSlashV, ), {, int, singleq, =, 0, ,]
[,, doubleq, =, 0, ;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, ), ;]
[;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, ), ;, i, ++, ), {]
[;, i, <, s, ., length, (, ), ;, i, ++, ), {, switch, (, s, ., charAt, (, i]
[;, i, ++, ), {, switch, (, s, ., charAt, (, i, ), ), {, case, '"', :, doubleq, ++]
[<, s, ., length, (, ), ;, i, ++, ), {, switch, (, s, ., charAt, (, i, ), )]
[;, i, ++, ), {, switch, (, s, ., charAt, (, i, ), ), {, case, '"', :, doubleq, ++]
[., length, (, ), ;, i, ++, ), {, switch, (, s, ., charAt, (, i, ), ), {, case]
[), {, switch, (, s, ., charAt, (, i, ), ), {, case, '"', :, doubleq, ++, ;, break, ;]
[++, ), {, switch, (, s, ., charAt, (, i, ), ), {, case, '"', :, doubleq, ++, ;, break]
[), {, case, '"', :, doubleq, ++, ;, break, ;, case, '\'', :, singleq, ++, ;, break, ;, }, }]
[., charAt, (, i, ), ), {, case, '"', :, doubleq, ++, ;, break, ;, case, '\'', :, singleq, ++]
[), ), {, case, '"', :, doubleq, ++, ;, break, ;, case, '\'', :, singleq, ++, ;, break, ;, }]
[:, doubleq, ++, ;, break, ;, case, '\'', :, singleq, ++, ;, break, ;, }, }, String, doublequote, ,, singlequote]
[;, break, ;, case, '\'', :, singleq, ++, ;, break, ;, }, }, String, doublequote, ,, singlequote, ;, char, quote]
[++, ;, break, ;, case, '\'', :, singleq, ++, ;, break, ;, }, }, String, doublequote, ,, singlequote, ;, char]
[:, singleq, ++, ;, break, ;, }, }, String, doublequote, ,, singlequote, ;, char, quote, ;, if, (, preferSingleQuotes, ?]
[;, break, ;, }, }, String, doublequote, ,, singlequote, ;, char, quote, ;, if, (, preferSingleQuotes, ?, (, singleq, <=]
[++, ;, break, ;, }, }, String, doublequote, ,, singlequote, ;, char, quote, ;, if, (, preferSingleQuotes, ?, (, singleq]
[), {, quote, =, '\'', ;, doublequote, =, "\"", ;, singlequote, =, "\\\'", ;, }, else, {, quote, =, '\"']
[?, (, singleq, <=, doubleq, ), :, (, singleq, <, doubleq, ), ), {, quote, =, '\'', ;, doublequote, =]
[:, (, singleq, <, doubleq, ), ), {, quote, =, '\'', ;, doublequote, =, "\"", ;, singlequote, =, "\\\'", ;]
[), :, (, singleq, <, doubleq, ), ), {, quote, =, '\'', ;, doublequote, =, "\"", ;, singlequote, =, "\\\'"]
[<=, doubleq, ), :, (, singleq, <, doubleq, ), ), {, quote, =, '\'', ;, doublequote, =, "\"", ;, singlequote]
[), :, (, singleq, <, doubleq, ), ), {, quote, =, '\'', ;, doublequote, =, "\"", ;, singlequote, =, "\\\'"]
[), {, quote, =, '\'', ;, doublequote, =, "\"", ;, singlequote, =, "\\\'", ;, }, else, {, quote, =, '\"']
[), ), {, quote, =, '\'', ;, doublequote, =, "\"", ;, singlequote, =, "\\\'", ;, }, else, {, quote, =]
[<, doubleq, ), ), {, quote, =, '\'', ;, doublequote, =, "\"", ;, singlequote, =, "\\\'", ;, }, else, {]
[), ), {, quote, =, '\'', ;, doublequote, =, "\"", ;, singlequote, =, "\\\'", ;, }, else, {, quote, =]
[=, '\'', ;, doublequote, =, "\"", ;, singlequote, =, "\\\'", ;, }, else, {, quote, =, '\"', ;, doublequote, =]
[;, doublequote, =, "\"", ;, singlequote, =, "\\\'", ;, }, else, {, quote, =, '\"', ;, doublequote, =, "\\\"", ;]
[=, "\"", ;, singlequote, =, "\\\'", ;, }, else, {, quote, =, '\"', ;, doublequote, =, "\\\"", ;, singlequote, =]
[;, singlequote, =, "\\\'", ;, }, else, {, quote, =, '\"', ;, doublequote, =, "\\\"", ;, singlequote, =, "\'", ;]
[=, "\\\'", ;, }, else, {, quote, =, '\"', ;, doublequote, =, "\\\"", ;, singlequote, =, "\'", ;, }, return]
[;, }, else, {, quote, =, '\"', ;, doublequote, =, "\\\"", ;, singlequote, =, "\'", ;, }, return, strEscape, (]
[=, '\"', ;, doublequote, =, "\\\"", ;, singlequote, =, "\'", ;, }, return, strEscape, (, s, ,, quote, ,, doublequote]
[;, doublequote, =, "\\\"", ;, singlequote, =, "\'", ;, }, return, strEscape, (, s, ,, quote, ,, doublequote, ,, singlequote]
[=, "\\\"", ;, singlequote, =, "\'", ;, }, return, strEscape, (, s, ,, quote, ,, doublequote, ,, singlequote, ,, "\\\\"]
[;, singlequote, =, "\'", ;, }, return, strEscape, (, s, ,, quote, ,, doublequote, ,, singlequote, ,, "\\\\", ,, outputCharsetEncoder]
[=, "\'", ;, }, return, strEscape, (, s, ,, quote, ,, doublequote, ,, singlequote, ,, "\\\\", ,, outputCharsetEncoder, ,, useSlashV]
[;, }, return, strEscape, (, s, ,, quote, ,, doublequote, ,, singlequote, ,, "\\\\", ,, outputCharsetEncoder, ,, useSlashV, ,, false]
[;, }, String, regexpEscape, (, String, s, ,, CharsetEncoder, outputCharsetEncoder, ), {, return, strEscape, (, s, ,, '/', ,, "\""]
[,, quote, ,, doublequote, ,, singlequote, ,, "\\\\", ,, outputCharsetEncoder, ,, useSlashV, ,, false, ), ;, }, String, regexpEscape, (]
[,, doublequote, ,, singlequote, ,, "\\\\", ,, outputCharsetEncoder, ,, useSlashV, ,, false, ), ;, }, String, regexpEscape, (, String, s]
[,, singlequote, ,, "\\\\", ,, outputCharsetEncoder, ,, useSlashV, ,, false, ), ;, }, String, regexpEscape, (, String, s, ,, CharsetEncoder]
[,, "\\\\", ,, outputCharsetEncoder, ,, useSlashV, ,, false, ), ;, }, String, regexpEscape, (, String, s, ,, CharsetEncoder, outputCharsetEncoder, )]
[,, outputCharsetEncoder, ,, useSlashV, ,, false, ), ;, }, String, regexpEscape, (, String, s, ,, CharsetEncoder, outputCharsetEncoder, ), {, return]
[,, useSlashV, ,, false, ), ;, }, String, regexpEscape, (, String, s, ,, CharsetEncoder, outputCharsetEncoder, ), {, return, strEscape, (]
[,, false, ), ;, }, String, regexpEscape, (, String, s, ,, CharsetEncoder, outputCharsetEncoder, ), {, return, strEscape, (, s, ,]
[), ;, }, String, regexpEscape, (, String, s, ,, CharsetEncoder, outputCharsetEncoder, ), {, return, strEscape, (, s, ,, '/', ,]
[;, }, String, escapeToDoubleQuotedJsString, (, String, s, ), {, return, strEscape, (, s, ,, '"', ,, "\\\"", ,, "\'", ,]
[,, '/', ,, "\"", ,, "'", ,, "\\", ,, outputCharsetEncoder, ,, false, ,, true, ), ;, }, String, escapeToDoubleQuotedJsString, (]
[,, "\"", ,, "'", ,, "\\", ,, outputCharsetEncoder, ,, false, ,, true, ), ;, }, String, escapeToDoubleQuotedJsString, (, String, s]
[,, "'", ,, "\\", ,, outputCharsetEncoder, ,, false, ,, true, ), ;, }, String, escapeToDoubleQuotedJsString, (, String, s, ), {]
[,, "\\", ,, outputCharsetEncoder, ,, false, ,, true, ), ;, }, String, escapeToDoubleQuotedJsString, (, String, s, ), {, return, strEscape]
[,, outputCharsetEncoder, ,, false, ,, true, ), ;, }, String, escapeToDoubleQuotedJsString, (, String, s, ), {, return, strEscape, (, s]
[,, false, ,, true, ), ;, }, String, escapeToDoubleQuotedJsString, (, String, s, ), {, return, strEscape, (, s, ,, '"']
[,, true, ), ;, }, String, escapeToDoubleQuotedJsString, (, String, s, ), {, return, strEscape, (, s, ,, '"', ,, "\\\""]
[), ;, }, String, escapeToDoubleQuotedJsString, (, String, s, ), {, return, strEscape, (, s, ,, '"', ,, "\\\"", ,, "\'"]
[;, }, String, regexpEscape, (, String, s, ), {, return, regexpEscape, (, s, ,, null, ), ;, }, private, String]
[,, '"', ,, "\\\"", ,, "\'", ,, "\\\\", ,, null, ,, false, ,, false, ), ;, }, String, regexpEscape, (]
[,, "\\\"", ,, "\'", ,, "\\\\", ,, null, ,, false, ,, false, ), ;, }, String, regexpEscape, (, String, s]
[,, "\'", ,, "\\\\", ,, null, ,, false, ,, false, ), ;, }, String, regexpEscape, (, String, s, ), {]
[,, "\\\\", ,, null, ,, false, ,, false, ), ;, }, String, regexpEscape, (, String, s, ), {, return, regexpEscape]
[,, null, ,, false, ,, false, ), ;, }, String, regexpEscape, (, String, s, ), {, return, regexpEscape, (, s]
[,, false, ,, false, ), ;, }, String, regexpEscape, (, String, s, ), {, return, regexpEscape, (, s, ,, null]
[,, false, ), ;, }, String, regexpEscape, (, String, s, ), {, return, regexpEscape, (, s, ,, null, ), ;]
[), ;, }, String, regexpEscape, (, String, s, ), {, return, regexpEscape, (, s, ,, null, ), ;, }, private]
[;, }, private, String, strEscape, (, String, s, ,, char, quote, ,, String, doublequoteEscape, ,, String, singlequoteEscape, ,, String, backslashEscape]
[,, null, ), ;, }, private, String, strEscape, (, String, s, ,, char, quote, ,, String, doublequoteEscape, ,, String, singlequoteEscape]
[), ;, }, private, String, strEscape, (, String, s, ,, char, quote, ,, String, doublequoteEscape, ,, String, singlequoteEscape, ,, String]
[;, sb, ., append, (, quote, ), ;, for, (, int, i, =, 0, ;, i, <, s, ., length]
[), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =, 0, ;, i, <, s, .]
[+, 2, ), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =, 0, ;, i, <]
[., length, (, ), +, 2, ), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =]
[), ;, sb, ., append, (, quote, ), ;, for, (, int, i, =, 0, ;, i, <, s, .]
[;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, ), ;, i, ++, ), {]
[., append, (, quote, ), ;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, )]
[), ;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, ), ;, i, ++, )]
[;, i, <, s, ., length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (]
[;, i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, switch, (, c, ), {]
[<, s, ., length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (, i, )]
[;, i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, switch, (, c, ), {]
[., length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, switch]
[), {, char, c, =, s, ., charAt, (, i, ), ;, switch, (, c, ), {, case, '\0', :]
[++, ), {, char, c, =, s, ., charAt, (, i, ), ;, switch, (, c, ), {, case, '\0']
[;, switch, (, c, ), {, case, '\0', :, sb, ., append, (, "\\x00", ), ;, break, ;, case, '\u000B']
[., charAt, (, i, ), ;, switch, (, c, ), {, case, '\0', :, sb, ., append, (, "\\x00", )]
[), ;, switch, (, c, ), {, case, '\0', :, sb, ., append, (, "\\x00", ), ;, break, ;, case]
[), {, case, '\0', :, sb, ., append, (, "\\x00", ), ;, break, ;, case, '\u000B', :, if, (, useSlashV]
[:, sb, ., append, (, "\\x00", ), ;, break, ;, case, '\u000B', :, if, (, useSlashV, ), {, sb, .]
[;, break, ;, case, '\u000B', :, if, (, useSlashV, ), {, sb, ., append, (, "\\v", ), ;, }, else]
[., append, (, "\\x00", ), ;, break, ;, case, '\u000B', :, if, (, useSlashV, ), {, sb, ., append, (]
[), ;, break, ;, case, '\u000B', :, if, (, useSlashV, ), {, sb, ., append, (, "\\v", ), ;, }]
[:, if, (, useSlashV, ), {, sb, ., append, (, "\\v", ), ;, }, else, {, sb, ., append, (]
[), {, sb, ., append, (, "\\v", ), ;, }, else, {, sb, ., append, (, "\\x0B", ), ;, }]
[;, }, else, {, sb, ., append, (, "\\x0B", ), ;, }, break, ;, case, '\b', :, sb, ., append]
[., append, (, "\\v", ), ;, }, else, {, sb, ., append, (, "\\x0B", ), ;, }, break, ;, case]
[), ;, }, else, {, sb, ., append, (, "\\x0B", ), ;, }, break, ;, case, '\b', :, sb, .]
[;, }, break, ;, case, '\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case, '\f', :, sb]
[., append, (, "\\x0B", ), ;, }, break, ;, case, '\b', :, sb, ., append, (, "\\b", ), ;, break]
[), ;, }, break, ;, case, '\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case, '\f', :]
[:, sb, ., append, (, "\\b", ), ;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;]
[;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;, case, '\n', :, sb, .]
[., append, (, "\\b", ), ;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;]
[), ;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;, case, '\n', :, sb]
[:, sb, ., append, (, "\\f", ), ;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;]
[;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :, sb, .]
[., append, (, "\\f", ), ;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;]
[), ;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :, sb]
[:, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;]
[;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case, '\t', :, sb, .]
[., append, (, "\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;]
[), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case, '\t', :, sb]
[:, sb, ., append, (, "\\r", ), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;]
[;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case, '\\', :, sb, .]
[., append, (, "\\r", ), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;]
[), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case, '\\', :, sb]
[:, sb, ., append, (, "\\t", ), ;, break, ;, case, '\\', :, sb, ., append, (, backslashEscape, ), ;]
[;, break, ;, case, '\\', :, sb, ., append, (, backslashEscape, ), ;, break, ;, case, '\"', :, sb, .]
[., append, (, "\\t", ), ;, break, ;, case, '\\', :, sb, ., append, (, backslashEscape, ), ;, break, ;]
[), ;, break, ;, case, '\\', :, sb, ., append, (, backslashEscape, ), ;, break, ;, case, '\"', :, sb]
[:, sb, ., append, (, backslashEscape, ), ;, break, ;, case, '\"', :, sb, ., append, (, doublequoteEscape, ), ;]
[;, break, ;, case, '\"', :, sb, ., append, (, doublequoteEscape, ), ;, break, ;, case, '\'', :, sb, .]
[., append, (, backslashEscape, ), ;, break, ;, case, '\"', :, sb, ., append, (, doublequoteEscape, ), ;, break, ;]
[), ;, break, ;, case, '\"', :, sb, ., append, (, doublequoteEscape, ), ;, break, ;, case, '\'', :, sb]
[:, sb, ., append, (, doublequoteEscape, ), ;, break, ;, case, '\'', :, sb, ., append, (, singlequoteEscape, ), ;]
[;, break, ;, case, '\'', :, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '\u2028', :, sb, .]
[., append, (, doublequoteEscape, ), ;, break, ;, case, '\'', :, sb, ., append, (, singlequoteEscape, ), ;, break, ;]
[), ;, break, ;, case, '\'', :, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '\u2028', :, sb]
[:, sb, ., append, (, singlequoteEscape, ), ;, break, ;, case, '\u2028', :, sb, ., append, (, "\\u2028", ), ;]
[;, break, ;, case, '\u2028', :, sb, ., append, (, "\\u2028", ), ;, break, ;, case, '\u2029', :, sb, .]
[., append, (, singlequoteEscape, ), ;, break, ;, case, '\u2028', :, sb, ., append, (, "\\u2028", ), ;, break, ;]
[), ;, break, ;, case, '\u2028', :, sb, ., append, (, "\\u2028", ), ;, break, ;, case, '\u2029', :, sb]
[:, sb, ., append, (, "\\u2028", ), ;, break, ;, case, '\u2029', :, sb, ., append, (, "\\u2029", ), ;]
[;, break, ;, case, '\u2029', :, sb, ., append, (, "\\u2029", ), ;, break, ;, case, '=', :, if, (]
[., append, (, "\\u2028", ), ;, break, ;, case, '\u2029', :, sb, ., append, (, "\\u2029", ), ;, break, ;]
[), ;, break, ;, case, '\u2029', :, sb, ., append, (, "\\u2029", ), ;, break, ;, case, '=', :, if]
[:, sb, ., append, (, "\\u2029", ), ;, break, ;, case, '=', :, if, (, trustedStrings, ||, isRegexp, ), {]
[;, break, ;, case, '=', :, if, (, trustedStrings, ||, isRegexp, ), {, sb, ., append, (, c, ), ;]
[., append, (, "\\u2029", ), ;, break, ;, case, '=', :, if, (, trustedStrings, ||, isRegexp, ), {, sb, .]
[), ;, break, ;, case, '=', :, if, (, trustedStrings, ||, isRegexp, ), {, sb, ., append, (, c, )]
[:, if, (, trustedStrings, ||, isRegexp, ), {, sb, ., append, (, c, ), ;, }, else, {, sb, .]
[), {, sb, ., append, (, c, ), ;, }, else, {, sb, ., append, (, "\\x3d", ), ;, }]
[||, isRegexp, ), {, sb, ., append, (, c, ), ;, }, else, {, sb, ., append, (, "\\x3d", )]
[), {, sb, ., append, (, c, ), ;, }, else, {, sb, ., append, (, "\\x3d", ), ;, }]
[;, }, else, {, sb, ., append, (, "\\x3d", ), ;, }, break, ;, case, '&', :, if, (, trustedStrings]
[., append, (, c, ), ;, }, else, {, sb, ., append, (, "\\x3d", ), ;, }, break, ;, case]
[), ;, }, else, {, sb, ., append, (, "\\x3d", ), ;, }, break, ;, case, '&', :, if, (]
[;, }, break, ;, case, '&', :, if, (, trustedStrings, ||, isRegexp, ), {, sb, ., append, (, c, )]
[., append, (, "\\x3d", ), ;, }, break, ;, case, '&', :, if, (, trustedStrings, ||, isRegexp, ), {, sb]
[), ;, }, break, ;, case, '&', :, if, (, trustedStrings, ||, isRegexp, ), {, sb, ., append, (, c]
[:, if, (, trustedStrings, ||, isRegexp, ), {, sb, ., append, (, c, ), ;, }, else, {, sb, .]
[), {, sb, ., append, (, c, ), ;, }, else, {, sb, ., append, (, "\\x26", ), ;, }]
[||, isRegexp, ), {, sb, ., append, (, c, ), ;, }, else, {, sb, ., append, (, "\\x26", )]
[), {, sb, ., append, (, c, ), ;, }, else, {, sb, ., append, (, "\\x26", ), ;, }]
[;, }, else, {, sb, ., append, (, "\\x26", ), ;, }, break, ;, case, '>', :, if, (, !]
[., append, (, c, ), ;, }, else, {, sb, ., append, (, "\\x26", ), ;, }, break, ;, case]
[), ;, }, else, {, sb, ., append, (, "\\x26", ), ;, }, break, ;, case, '>', :, if, (]
[;, }, break, ;, case, '>', :, if, (, !, trustedStrings, &&, !, isRegexp, ), {, sb, ., append, (]
[., append, (, "\\x26", ), ;, }, break, ;, case, '>', :, if, (, !, trustedStrings, &&, !, isRegexp, )]
[), ;, }, break, ;, case, '>', :, if, (, !, trustedStrings, &&, !, isRegexp, ), {, sb, ., append]
[:, if, (, !, trustedStrings, &&, !, isRegexp, ), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }]
[), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&, (, (]
[&&, !, isRegexp, ), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2]
[&&, !, isRegexp, ), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2]
[), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&, (, (]
[), {, sb, ., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&, (, (]
[;, break, ;, }, if, (, i, >=, 2, &&, (, (, s, ., charAt, (, i, -, 1, )]
[., append, (, GT_ESCAPED, ), ;, break, ;, }, if, (, i, >=, 2, &&, (, (, s, ., charAt]
[), ;, break, ;, }, if, (, i, >=, 2, &&, (, (, s, ., charAt, (, i, -, 1]
[), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, ), ;, }]
[&&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -]
[>=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (]
[&&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -]
[), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, ), ;, }]
[), ), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, ), ;]
[||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2]
[), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -]
[&&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -]
[==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (]
[., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-']
[), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt]
[-, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s]
[), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt]
[&&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -]
[), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -]
[==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (]
[., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, )]
[), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt]
[-, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s]
[), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt]
[), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -]
[), ), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, ), ;]
[), ), ), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, )]
[&&, s, ., charAt, (, i, -, 2, ), ==, ']', ), ), ), {, sb, ., append, (, GT_ESCAPED]
[==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', ), ), ), {, sb, ., append]
[., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']']
[), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', ), ), ), {, sb, .]
[-, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', ), ), ), {]
[), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', ), ), ), {, sb, .]
[&&, s, ., charAt, (, i, -, 2, ), ==, ']', ), ), ), {, sb, ., append, (, GT_ESCAPED]
[), ), ), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, )]
[==, ']', ), ), ), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {, sb, ., append, (]
[., charAt, (, i, -, 2, ), ==, ']', ), ), ), {, sb, ., append, (, GT_ESCAPED, ), ;]
[), ==, ']', ), ), ), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {, sb, ., append]
[-, 2, ), ==, ']', ), ), ), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {, sb]
[), ==, ']', ), ), ), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {, sb, ., append]
[), ), ), {, sb, ., append, (, GT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, )]
[;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, case, '<', :, if, (, !]
[., append, (, GT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, case]
[), ;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, case, '<', :, if, (]
[;, }, break, ;, case, '<', :, if, (, !, trustedStrings, &&, !, isRegexp, ), {, sb, ., append, (]
[., append, (, c, ), ;, }, break, ;, case, '<', :, if, (, !, trustedStrings, &&, !, isRegexp, )]
[), ;, }, break, ;, case, '<', :, if, (, !, trustedStrings, &&, !, isRegexp, ), {, sb, ., append]
[:, if, (, !, trustedStrings, &&, !, isRegexp, ), {, sb, ., append, (, LT_ESCAPED, ), ;, break, ;, }]
[), {, sb, ., append, (, LT_ESCAPED, ), ;, break, ;, }, final, String, END_SCRIPT, =, "/script", ;, final, String]
[&&, !, isRegexp, ), {, sb, ., append, (, LT_ESCAPED, ), ;, break, ;, }, final, String, END_SCRIPT, =, "/script"]
[&&, !, isRegexp, ), {, sb, ., append, (, LT_ESCAPED, ), ;, break, ;, }, final, String, END_SCRIPT, =, "/script"]
[), {, sb, ., append, (, LT_ESCAPED, ), ;, break, ;, }, final, String, END_SCRIPT, =, "/script", ;, final, String]
[), {, sb, ., append, (, LT_ESCAPED, ), ;, break, ;, }, final, String, END_SCRIPT, =, "/script", ;, final, String]
[;, break, ;, }, final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (, s, .]
[., append, (, LT_ESCAPED, ), ;, break, ;, }, final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--"]
[), ;, break, ;, }, final, String, END_SCRIPT, =, "/script", ;, final, String, START_COMMENT, =, "!--", ;, if, (, s]
[;, final, String, START_COMMENT, =, "!--", ;, if, (, s, ., regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT]
[;, if, (, s, ., regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT, ,, 0, ,, END_SCRIPT, ., length]
[), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, if, (, s, ., regionMatches, (, false, ,, i]
[., regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT, ,, 0, ,, END_SCRIPT, ., length, (, ), ), )]
[,, i, +, 1, ,, END_SCRIPT, ,, 0, ,, END_SCRIPT, ., length, (, ), ), ), {, sb, ., append]
[,, END_SCRIPT, ,, 0, ,, END_SCRIPT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;]
[+, 1, ,, END_SCRIPT, ,, 0, ,, END_SCRIPT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED]
[,, END_SCRIPT, ,, 0, ,, END_SCRIPT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;]
[,, 0, ,, END_SCRIPT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else]
[,, END_SCRIPT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, if, (]
[), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, if, (, s, ., regionMatches, (, false, ,]
[., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, if, (, s, .]
[;, }, else, if, (, s, ., regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,, 0, ,, START_COMMENT]
[., append, (, LT_ESCAPED, ), ;, }, else, if, (, s, ., regionMatches, (, false, ,, i, +, 1, ,]
[), ;, }, else, if, (, s, ., regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,, 0, ,]
[), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, ), ;, }]
[., regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,, 0, ,, START_COMMENT, ., length, (, ), ), )]
[,, i, +, 1, ,, START_COMMENT, ,, 0, ,, START_COMMENT, ., length, (, ), ), ), {, sb, ., append]
[,, START_COMMENT, ,, 0, ,, START_COMMENT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;]
[+, 1, ,, START_COMMENT, ,, 0, ,, START_COMMENT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED]
[,, START_COMMENT, ,, 0, ,, START_COMMENT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;]
[,, 0, ,, START_COMMENT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else]
[,, START_COMMENT, ., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, {, sb]
[), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, ), ;]
[., length, (, ), ), ), {, sb, ., append, (, LT_ESCAPED, ), ;, }, else, {, sb, ., append]
[;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, default, :, if, (, outputCharsetEncoder, !=]
[., append, (, LT_ESCAPED, ), ;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, default]
[), ;, }, else, {, sb, ., append, (, c, ), ;, }, break, ;, default, :, if, (, outputCharsetEncoder]
[;, }, break, ;, default, :, if, (, outputCharsetEncoder, !=, null, ), {, if, (, outputCharsetEncoder, ., canEncode, (, c]
[., append, (, c, ), ;, }, break, ;, default, :, if, (, outputCharsetEncoder, !=, null, ), {, if, (]
[), ;, }, break, ;, default, :, if, (, outputCharsetEncoder, !=, null, ), {, if, (, outputCharsetEncoder, ., canEncode, (]
[), {, if, (, outputCharsetEncoder, ., canEncode, (, c, ), ), {, sb, ., append, (, c, ), ;, }]
[!=, null, ), {, if, (, outputCharsetEncoder, ., canEncode, (, c, ), ), {, sb, ., append, (, c, )]
[), {, if, (, outputCharsetEncoder, ., canEncode, (, c, ), ), {, sb, ., append, (, c, ), ;, }]
[), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }]
[., canEncode, (, c, ), ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb]
[), ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;]
[;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, else, {, if, (, c, >, 0x1f]
[., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, else, {]
[), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, else, {, if, (, c, >]
[;, }, }, else, {, if, (, c, >, 0x1f, &&, c, <, 0x7f, ), {, sb, ., append, (]
[,, c, ), ;, }, }, else, {, if, (, c, >, 0x1f, &&, c, <, 0x7f, ), {, sb]
[), ;, }, }, else, {, if, (, c, >, 0x1f, &&, c, <, 0x7f, ), {, sb, ., append]
[), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }]
[&&, c, <, 0x7f, ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,]
[>, 0x1f, &&, c, <, 0x7f, ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (]
[&&, c, <, 0x7f, ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,]
[), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }]
[<, 0x7f, ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, )]
[), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }]
[;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, }, }, sb, ., append, (, quote]
[., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, }, }]
[), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, }, }, sb, ., append, (]
[;, }, }, }, }, sb, ., append, (, quote, ), ;, return, sb, ., toString, (, ), ;, }]
[,, c, ), ;, }, }, }, }, sb, ., append, (, quote, ), ;, return, sb, ., toString, (]
[), ;, }, }, }, }, sb, ., append, (, quote, ), ;, return, sb, ., toString, (, ), ;]
[;, return, sb, ., toString, (, ), ;, }, static, String, identifierEscape, (, String, s, ), {, if, (, NodeUtil]
[., append, (, quote, ), ;, return, sb, ., toString, (, ), ;, }, static, String, identifierEscape, (, String, s]
[), ;, return, sb, ., toString, (, ), ;, }, static, String, identifierEscape, (, String, s, ), {, if, (]
[;, }, static, String, identifierEscape, (, String, s, ), {, if, (, NodeUtil, ., isLatin, (, s, ), ), {]
[., toString, (, ), ;, }, static, String, identifierEscape, (, String, s, ), {, if, (, NodeUtil, ., isLatin, (]
[), {, return, s, ;, }, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =, 0]
[., isLatin, (, s, ), ), {, return, s, ;, }, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for]
[), ), {, return, s, ;, }, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =]
[;, }, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, s]
[;, for, (, int, i, =, 0, ;, i, <, s, ., length, (, ), ;, i, ++, ), {]
[;, i, <, s, ., length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (]
[;, i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, if, (, c, >, 0x1F]
[<, s, ., length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (, i, )]
[;, i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, if, (, c, >, 0x1F]
[., length, (, ), ;, i, ++, ), {, char, c, =, s, ., charAt, (, i, ), ;, if]
[), {, char, c, =, s, ., charAt, (, i, ), ;, if, (, c, >, 0x1F, &&, c, <]
[++, ), {, char, c, =, s, ., charAt, (, i, ), ;, if, (, c, >, 0x1F, &&, c]
[;, if, (, c, >, 0x1F, &&, c, <, 0x7F, ), {, sb, ., append, (, c, ), ;, }]
[., charAt, (, i, ), ;, if, (, c, >, 0x1F, &&, c, <, 0x7F, ), {, sb, ., append]
[), ;, if, (, c, >, 0x1F, &&, c, <, 0x7F, ), {, sb, ., append, (, c, ), ;]
[), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }]
[&&, c, <, 0x7F, ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,]
[>, 0x1F, &&, c, <, 0x7F, ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (]
[&&, c, <, 0x7F, ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,]
[), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }]
[<, 0x7F, ), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, )]
[), {, sb, ., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }]
[;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, return, sb, ., toString, (, ), ;]
[., append, (, c, ), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, return, sb]
[), ;, }, else, {, appendHexJavaScriptRepresentation, (, sb, ,, c, ), ;, }, }, return, sb, ., toString, (, )]
[;, }, }, return, sb, ., toString, (, ), ;, }, private, static, int, getNonEmptyChildCount, (, Node, n, ,, int]
[,, c, ), ;, }, }, return, sb, ., toString, (, ), ;, }, private, static, int, getNonEmptyChildCount, (, Node]
[), ;, }, }, return, sb, ., toString, (, ), ;, }, private, static, int, getNonEmptyChildCount, (, Node, n, ,]
[;, }, private, static, int, getNonEmptyChildCount, (, Node, n, ,, int, maxCount, ), {, int, i, =, 0, ;, Node]
[., toString, (, ), ;, }, private, static, int, getNonEmptyChildCount, (, Node, n, ,, int, maxCount, ), {, int, i]
[;, Node, c, =, n, ., getFirstChild, (, ), ;, for, (, ;, c, !=, null, &&, i, <, maxCount]
[;, for, (, ;, c, !=, null, &&, i, <, maxCount, ;, c, =, c, ., getNext, (, ), )]
[., getFirstChild, (, ), ;, for, (, ;, c, !=, null, &&, i, <, maxCount, ;, c, =, c, .]
[;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, i]
[&&, i, <, maxCount, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (]
[!=, null, &&, i, <, maxCount, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, .]
[&&, i, <, maxCount, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (]
[;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, i]
[<, maxCount, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), )]
[;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, i]
[=, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, i, +=, getNonEmptyChildCount]
[), {, if, (, c, ., isBlock, (, ), ), {, i, +=, getNonEmptyChildCount, (, c, ,, maxCount, -, i]
[., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, i, +=, getNonEmptyChildCount, (, c]
[), {, i, +=, getNonEmptyChildCount, (, c, ,, maxCount, -, i, ), ;, }, else, if, (, !, c, .]
[., isBlock, (, ), ), {, i, +=, getNonEmptyChildCount, (, c, ,, maxCount, -, i, ), ;, }, else, if]
[+=, getNonEmptyChildCount, (, c, ,, maxCount, -, i, ), ;, }, else, if, (, !, c, ., isEmpty, (, )]
[;, }, else, if, (, !, c, ., isEmpty, (, ), ), {, i, ++, ;, }, }, return, i]
[,, maxCount, -, i, ), ;, }, else, if, (, !, c, ., isEmpty, (, ), ), {, i, ++]
[), ;, }, else, if, (, !, c, ., isEmpty, (, ), ), {, i, ++, ;, }, }, return]
[-, i, ), ;, }, else, if, (, !, c, ., isEmpty, (, ), ), {, i, ++, ;, }]
[), ;, }, else, if, (, !, c, ., isEmpty, (, ), ), {, i, ++, ;, }, }, return]
[), {, i, ++, ;, }, }, return, i, ;, }, private, static, Node, getFirstNonEmptyChild, (, Node, n, ), {]
[), {, i, ++, ;, }, }, return, i, ;, }, private, static, Node, getFirstNonEmptyChild, (, Node, n, ), {]
[., isEmpty, (, ), ), {, i, ++, ;, }, }, return, i, ;, }, private, static, Node, getFirstNonEmptyChild, (]
[;, }, }, return, i, ;, }, private, static, Node, getFirstNonEmptyChild, (, Node, n, ), {, for, (, Node, c]
[++, ;, }, }, return, i, ;, }, private, static, Node, getFirstNonEmptyChild, (, Node, n, ), {, for, (, Node]
[;, }, private, static, Node, getFirstNonEmptyChild, (, Node, n, ), {, for, (, Node, c, =, n, ., getFirstChild, (]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, Node]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), )]
[;, c, =, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, Node]
[=, c, ., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, Node, result, =]
[), {, if, (, c, ., isBlock, (, ), ), {, Node, result, =, getFirstNonEmptyChild, (, c, ), ;, if]
[., getNext, (, ), ), {, if, (, c, ., isBlock, (, ), ), {, Node, result, =, getFirstNonEmptyChild, (]
[), {, Node, result, =, getFirstNonEmptyChild, (, c, ), ;, if, (, result, !=, null, ), {, return, result, ;]
[., isBlock, (, ), ), {, Node, result, =, getFirstNonEmptyChild, (, c, ), ;, if, (, result, !=, null, )]
[;, if, (, result, !=, null, ), {, return, result, ;, }, }, else, if, (, !, c, ., isEmpty]
[), ;, if, (, result, !=, null, ), {, return, result, ;, }, }, else, if, (, !, c, .]
[), {, return, result, ;, }, }, else, if, (, !, c, ., isEmpty, (, ), ), {, return, c]
[!=, null, ), {, return, result, ;, }, }, else, if, (, !, c, ., isEmpty, (, ), ), {]
[), {, return, result, ;, }, }, else, if, (, !, c, ., isEmpty, (, ), ), {, return, c]
[;, }, }, else, if, (, !, c, ., isEmpty, (, ), ), {, return, c, ;, }, }, return]
[), {, return, c, ;, }, }, return, null, ;, }, enum, Context, {, STATEMENT, ,, BEFORE_DANGLING_ELSE, ,, START_OF_EXPR, ,]
[), {, return, c, ;, }, }, return, null, ;, }, enum, Context, {, STATEMENT, ,, BEFORE_DANGLING_ELSE, ,, START_OF_EXPR, ,]
[., isEmpty, (, ), ), {, return, c, ;, }, }, return, null, ;, }, enum, Context, {, STATEMENT, ,]
[;, }, }, return, null, ;, }, enum, Context, {, STATEMENT, ,, BEFORE_DANGLING_ELSE, ,, START_OF_EXPR, ,, PRESERVE_BLOCK, ,, IN_FOR_INIT_CLAUSE, ,]
[;, }, enum, Context, {, STATEMENT, ,, BEFORE_DANGLING_ELSE, ,, START_OF_EXPR, ,, PRESERVE_BLOCK, ,, IN_FOR_INIT_CLAUSE, ,, OTHER, }, private, Context, getContextForNonEmptyExpression]
[;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ?, Context, .]
[?, Context, ., BEFORE_DANGLING_ELSE, :, Context, ., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (]
[==, Context, ., BEFORE_DANGLING_ELSE, ?, Context, ., BEFORE_DANGLING_ELSE, :, Context, ., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context]
[?, Context, ., BEFORE_DANGLING_ELSE, :, Context, ., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (]
[., BEFORE_DANGLING_ELSE, ?, Context, ., BEFORE_DANGLING_ELSE, :, Context, ., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {]
[:, Context, ., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (, context, ==, Context, .]
[., BEFORE_DANGLING_ELSE, :, Context, ., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (, context, ==]
[;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ?, Context, .]
[., OTHER, ;, }, private, Context, getContextForNoInOperator, (, Context, context, ), {, return, (, context, ==, Context, ., IN_FOR_INIT_CLAUSE, ?]
[;, }, private, static, void, appendHexJavaScriptRepresentation, (, StringBuilder, sb, ,, char, c, ), {, try, {, appendHexJavaScriptRepresentation, (, c, ,]
[), ;, }, private, static, void, appendHexJavaScriptRepresentation, (, StringBuilder, sb, ,, char, c, ), {, try, {, appendHexJavaScriptRepresentation, (, c]
[?, Context, ., IN_FOR_INIT_CLAUSE, :, Context, ., OTHER, ), ;, }, private, static, void, appendHexJavaScriptRepresentation, (, StringBuilder, sb, ,, char]
[==, Context, ., IN_FOR_INIT_CLAUSE, ?, Context, ., IN_FOR_INIT_CLAUSE, :, Context, ., OTHER, ), ;, }, private, static, void, appendHexJavaScriptRepresentation, (]
[?, Context, ., IN_FOR_INIT_CLAUSE, :, Context, ., OTHER, ), ;, }, private, static, void, appendHexJavaScriptRepresentation, (, StringBuilder, sb, ,, char]
[., IN_FOR_INIT_CLAUSE, ?, Context, ., IN_FOR_INIT_CLAUSE, :, Context, ., OTHER, ), ;, }, private, static, void, appendHexJavaScriptRepresentation, (, StringBuilder, sb]
[:, Context, ., OTHER, ), ;, }, private, static, void, appendHexJavaScriptRepresentation, (, StringBuilder, sb, ,, char, c, ), {, try]
[., IN_FOR_INIT_CLAUSE, :, Context, ., OTHER, ), ;, }, private, static, void, appendHexJavaScriptRepresentation, (, StringBuilder, sb, ,, char, c, )]
[), ;, }, private, static, void, appendHexJavaScriptRepresentation, (, StringBuilder, sb, ,, char, c, ), {, try, {, appendHexJavaScriptRepresentation, (, c]
[., OTHER, ), ;, }, private, static, void, appendHexJavaScriptRepresentation, (, StringBuilder, sb, ,, char, c, ), {, try, {, appendHexJavaScriptRepresentation]
[;, }, catch, (, IOException, ex, ), {, throw, new, RuntimeException, (, ex, ), ;, }, }, private, static, void]
[,, sb, ), ;, }, catch, (, IOException, ex, ), {, throw, new, RuntimeException, (, ex, ), ;, }, }]
[), ;, }, catch, (, IOException, ex, ), {, throw, new, RuntimeException, (, ex, ), ;, }, }, private, static]
[;, }, }, private, static, void, appendHexJavaScriptRepresentation, (, int, codePoint, ,, Appendable, out, ), throws, IOException, {, if, (, Character]
[), ;, }, }, private, static, void, appendHexJavaScriptRepresentation, (, int, codePoint, ,, Appendable, out, ), throws, IOException, {, if, (]
[), {, char, [, ], surrogates, =, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 0, ]]
[., isSupplementaryCodePoint, (, codePoint, ), ), {, char, [, ], surrogates, =, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation]
[), ), {, char, [, ], surrogates, =, Character, ., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 0]
[;, appendHexJavaScriptRepresentation, (, surrogates, [, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out, )]
[., toChars, (, codePoint, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, []
[), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out]
[;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out, ), ;, return, ;, }, out, ., append, (, "\\u", )]
[,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out, ), ;, return, ;, }, out, ., append]
[[, 0, ], ,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out, ), ;, return, ;, }]
[], ,, out, ), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out, ), ;, return, ;, }, out, .]
[), ;, appendHexJavaScriptRepresentation, (, surrogates, [, 1, ], ,, out, ), ;, return, ;, }, out, ., append, (, "\\u"]
[;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >]
[,, out, ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (, codePoint]
[[, 1, ], ,, out, ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS]
[], ,, out, ), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (]
[), ;, return, ;, }, out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (, codePoint, >, >]
[;, }, }]
[., append, (, HEX_CHARS, [, codePoint, &, 0xf, ], ), ;, }, }]
[., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (, HEX_CHARS]
[., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS]
[., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS]
[., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ]]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (]
[[, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >]
[], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append]
[&, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], )]
[), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ]]
[>, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8]
[), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ]]
[], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append]
[), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (]
[[, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >]
[], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append]
[&, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], )]
[), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ]]
[>, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4]
[), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ]]
[], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append]
[), ., append, (, HEX_CHARS, [, codePoint, &, 0xf, ], ), ;, }, }]
[[, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, codePoint, &, 0xf]
[], ), ., append, (, HEX_CHARS, [, codePoint, &, 0xf, ], ), ;, }, }]
[&, 0xf, ], ), ., append, (, HEX_CHARS, [, codePoint, &, 0xf, ], ), ;, }, }]
[), &, 0xf, ], ), ., append, (, HEX_CHARS, [, codePoint, &, 0xf, ], ), ;, }, }]
[>, >, >, 4, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, codePoint, &, 0xf, ], ), ;]
[), &, 0xf, ], ), ., append, (, HEX_CHARS, [, codePoint, &, 0xf, ], ), ;, }, }]
[], ), ., append, (, HEX_CHARS, [, codePoint, &, 0xf, ], ), ;, }, }]
[), ;, }, }]
[[, codePoint, &, 0xf, ], ), ;, }, }]
[], ), ;, }, }]
[&, 0xf, ], ), ;, }, }]
[], ), ;, }, }]
