[;, private, final, AbstractCompiler, compiler, ;, private, final, PreprocessorSymbolTable, preprocessorSymbolTable, ;, private, final, AliasTransformationHandler, transformationHandler, ;, static, final, DiagnosticType, GOOG_SCOPE_USED_IMPROPERLY]
[;, static, final, DiagnosticType, GOOG_SCOPE_HAS_BAD_PARAMETERS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS", ,, "The call to goog.scope must take only a single parameter.  It must", +, " be an anonymous function that itself takes no parameters.", ), ;, static, final, DiagnosticType]
[., error, (, "JSC_GOOG_SCOPE_USED_IMPROPERLY", ,, "The call to goog.scope must be alone in a single statement.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_HAS_BAD_PARAMETERS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS", ,, "The call to goog.scope must take only a single parameter.  It must"]
[,, "The call to goog.scope must be alone in a single statement.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_HAS_BAD_PARAMETERS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS", ,, "The call to goog.scope must take only a single parameter.  It must", +, " be an anonymous function that itself takes no parameters.", ), ;]
[), ;, static, final, DiagnosticType, GOOG_SCOPE_HAS_BAD_PARAMETERS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS", ,, "The call to goog.scope must take only a single parameter.  It must", +, " be an anonymous function that itself takes no parameters.", ), ;, static, final]
[;, static, final, DiagnosticType, GOOG_SCOPE_REFERENCES_THIS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_REFERENCES_THIS", ,, "The body of a goog.scope function cannot reference 'this'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_RETURN, =]
[., error, (, "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS", ,, "The call to goog.scope must take only a single parameter.  It must", +, " be an anonymous function that itself takes no parameters.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_REFERENCES_THIS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_REFERENCES_THIS"]
[,, "The call to goog.scope must take only a single parameter.  It must", +, " be an anonymous function that itself takes no parameters.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_REFERENCES_THIS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_REFERENCES_THIS", ,, "The body of a goog.scope function cannot reference 'this'.", ), ;]
[), ;, static, final, DiagnosticType, GOOG_SCOPE_REFERENCES_THIS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_REFERENCES_THIS", ,, "The body of a goog.scope function cannot reference 'this'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_RETURN]
[+, " be an anonymous function that itself takes no parameters.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_REFERENCES_THIS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_REFERENCES_THIS", ,, "The body of a goog.scope function cannot reference 'this'.", ), ;, static, final]
[), ;, static, final, DiagnosticType, GOOG_SCOPE_REFERENCES_THIS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_REFERENCES_THIS", ,, "The body of a goog.scope function cannot reference 'this'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_RETURN]
[;, static, final, DiagnosticType, GOOG_SCOPE_USES_RETURN, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_RETURN", ,, "The body of a goog.scope function cannot use 'return'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_THROW, =]
[., error, (, "JSC_GOOG_SCOPE_REFERENCES_THIS", ,, "The body of a goog.scope function cannot reference 'this'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_RETURN, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_RETURN", ,, "The body of a goog.scope function cannot use 'return'."]
[,, "The body of a goog.scope function cannot reference 'this'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_RETURN, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_RETURN", ,, "The body of a goog.scope function cannot use 'return'.", ), ;, static, final]
[), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_RETURN, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_RETURN", ,, "The body of a goog.scope function cannot use 'return'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_THROW]
[;, static, final, DiagnosticType, GOOG_SCOPE_USES_THROW, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_THROW", ,, "The body of a goog.scope function cannot use 'throw'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_ALIAS_REDEFINED, =]
[., error, (, "JSC_GOOG_SCOPE_USES_RETURN", ,, "The body of a goog.scope function cannot use 'return'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_THROW, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_THROW", ,, "The body of a goog.scope function cannot use 'throw'."]
[,, "The body of a goog.scope function cannot use 'return'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_THROW, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_THROW", ,, "The body of a goog.scope function cannot use 'throw'.", ), ;, static, final]
[), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_THROW, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_THROW", ,, "The body of a goog.scope function cannot use 'throw'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_ALIAS_REDEFINED]
[;, static, final, DiagnosticType, GOOG_SCOPE_ALIAS_REDEFINED, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_ALIAS_REDEFINED", ,, "The alias {0} is assigned a value more than once.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_NON_ALIAS_LOCAL, =]
[., error, (, "JSC_GOOG_SCOPE_USES_THROW", ,, "The body of a goog.scope function cannot use 'throw'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_ALIAS_REDEFINED, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_ALIAS_REDEFINED", ,, "The alias {0} is assigned a value more than once."]
[,, "The body of a goog.scope function cannot use 'throw'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_ALIAS_REDEFINED, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_ALIAS_REDEFINED", ,, "The alias {0} is assigned a value more than once.", ), ;, static, final]
[), ;, static, final, DiagnosticType, GOOG_SCOPE_ALIAS_REDEFINED, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_ALIAS_REDEFINED", ,, "The alias {0} is assigned a value more than once.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_NON_ALIAS_LOCAL]
[;, static, final, DiagnosticType, GOOG_SCOPE_NON_ALIAS_LOCAL, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_NON_ALIAS_LOCAL", ,, "The local variable {0} is in a goog.scope and is not an alias.", ), ;, ScopedAliases, (, AbstractCompiler, compiler, ,]
[., error, (, "JSC_GOOG_SCOPE_ALIAS_REDEFINED", ,, "The alias {0} is assigned a value more than once.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_NON_ALIAS_LOCAL, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_NON_ALIAS_LOCAL", ,, "The local variable {0} is in a goog.scope and is not an alias."]
[,, "The alias {0} is assigned a value more than once.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_NON_ALIAS_LOCAL, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_NON_ALIAS_LOCAL", ,, "The local variable {0} is in a goog.scope and is not an alias.", ), ;, ScopedAliases, (]
[), ;, static, final, DiagnosticType, GOOG_SCOPE_NON_ALIAS_LOCAL, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_NON_ALIAS_LOCAL", ,, "The local variable {0} is in a goog.scope and is not an alias.", ), ;, ScopedAliases, (, AbstractCompiler, compiler]
[;, ScopedAliases, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, AliasTransformationHandler, transformationHandler, ), {, this, ., compiler, =, compiler]
[., error, (, "JSC_GOOG_SCOPE_NON_ALIAS_LOCAL", ,, "The local variable {0} is in a goog.scope and is not an alias.", ), ;, ScopedAliases, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, AliasTransformationHandler, transformationHandler]
[,, "The local variable {0} is in a goog.scope and is not an alias.", ), ;, ScopedAliases, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, AliasTransformationHandler, transformationHandler, ), {, this, .]
[), ;, ScopedAliases, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, AliasTransformationHandler, transformationHandler, ), {, this, ., compiler, =]
[=, compiler, ;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., transformationHandler, =, transformationHandler, ;, }, @, Override, public, void]
[., compiler, =, compiler, ;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., transformationHandler, =, transformationHandler, ;, }, @, Override]
[;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., transformationHandler, =, transformationHandler, ;, }, @, Override, public, void, process, (]
[=, preprocessorSymbolTable, ;, this, ., transformationHandler, =, transformationHandler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., transformationHandler, =, transformationHandler, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., transformationHandler, =, transformationHandler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, transformationHandler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, hotSwapScript, (, root]
[., transformationHandler, =, transformationHandler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, hotSwapScript]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, hotSwapScript, (, root, ,, null]
[;, }, @, Override, public, void, hotSwapScript, (, Node, root, ,, Node, originalRoot, ), {, Traversal, traversal, =, new, Traversal]
[,, null, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, root, ,, Node, originalRoot, ), {, Traversal, traversal]
[), ;, }, @, Override, public, void, hotSwapScript, (, Node, root, ,, Node, originalRoot, ), {, Traversal, traversal, =, new]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, traversal, ), ;, if, (, !, traversal, ., hasErrors, (, )]
[;, if, (, !, traversal, ., hasErrors, (, ), ), {, for, (, AliasUsage, aliasUsage, :, traversal, ., getAliasUsages, (]
[., traverse, (, compiler, ,, root, ,, traversal, ), ;, if, (, !, traversal, ., hasErrors, (, ), ), {]
[,, root, ,, traversal, ), ;, if, (, !, traversal, ., hasErrors, (, ), ), {, for, (, AliasUsage, aliasUsage]
[,, traversal, ), ;, if, (, !, traversal, ., hasErrors, (, ), ), {, for, (, AliasUsage, aliasUsage, :, traversal]
[), ;, if, (, !, traversal, ., hasErrors, (, ), ), {, for, (, AliasUsage, aliasUsage, :, traversal, ., getAliasUsages]
[), {, for, (, AliasUsage, aliasUsage, :, traversal, ., getAliasUsages, (, ), ), {, aliasUsage, ., applyAlias, (, ), ;]
[), {, for, (, AliasUsage, aliasUsage, :, traversal, ., getAliasUsages, (, ), ), {, aliasUsage, ., applyAlias, (, ), ;]
[., hasErrors, (, ), ), {, for, (, AliasUsage, aliasUsage, :, traversal, ., getAliasUsages, (, ), ), {, aliasUsage, .]
[), {, aliasUsage, ., applyAlias, (, ), ;, }, for, (, Node, aliasDefinition, :, traversal, ., getAliasDefinitionsInOrder, (, ), )]
[., getAliasUsages, (, ), ), {, aliasUsage, ., applyAlias, (, ), ;, }, for, (, Node, aliasDefinition, :, traversal, .]
[;, }, for, (, Node, aliasDefinition, :, traversal, ., getAliasDefinitionsInOrder, (, ), ), {, if, (, aliasDefinition, ., getParent, (]
[., applyAlias, (, ), ;, }, for, (, Node, aliasDefinition, :, traversal, ., getAliasDefinitionsInOrder, (, ), ), {, if, (]
[), {, if, (, aliasDefinition, ., getParent, (, ), ., isVar, (, ), &&, aliasDefinition, ., getParent, (, ), .]
[., getAliasDefinitionsInOrder, (, ), ), {, if, (, aliasDefinition, ., getParent, (, ), ., isVar, (, ), &&, aliasDefinition, .]
[), {, aliasDefinition, ., getParent, (, ), ., detachFromParent, (, ), ;, }, else, {, aliasDefinition, ., detachFromParent, (, )]
[&&, aliasDefinition, ., getParent, (, ), ., hasOneChild, (, ), ), {, aliasDefinition, ., getParent, (, ), ., detachFromParent, (]
[., isVar, (, ), &&, aliasDefinition, ., getParent, (, ), ., hasOneChild, (, ), ), {, aliasDefinition, ., getParent, (]
[., getParent, (, ), ., isVar, (, ), &&, aliasDefinition, ., getParent, (, ), ., hasOneChild, (, ), ), {]
[), {, aliasDefinition, ., getParent, (, ), ., detachFromParent, (, ), ;, }, else, {, aliasDefinition, ., detachFromParent, (, )]
[., hasOneChild, (, ), ), {, aliasDefinition, ., getParent, (, ), ., detachFromParent, (, ), ;, }, else, {, aliasDefinition]
[., getParent, (, ), ., hasOneChild, (, ), ), {, aliasDefinition, ., getParent, (, ), ., detachFromParent, (, ), ;]
[;, }, else, {, aliasDefinition, ., detachFromParent, (, ), ;, }, }, for, (, Node, scopeCall, :, traversal, ., getScopeCalls]
[., detachFromParent, (, ), ;, }, else, {, aliasDefinition, ., detachFromParent, (, ), ;, }, }, for, (, Node, scopeCall]
[., getParent, (, ), ., detachFromParent, (, ), ;, }, else, {, aliasDefinition, ., detachFromParent, (, ), ;, }, }]
[;, }, }, for, (, Node, scopeCall, :, traversal, ., getScopeCalls, (, ), ), {, Node, expressionWithScopeCall, =, scopeCall, .]
[., detachFromParent, (, ), ;, }, }, for, (, Node, scopeCall, :, traversal, ., getScopeCalls, (, ), ), {, Node]
[), {, Node, expressionWithScopeCall, =, scopeCall, ., getParent, (, ), ;, Node, scopeClosureBlock, =, scopeCall, ., getLastChild, (, ), .]
[., getScopeCalls, (, ), ), {, Node, expressionWithScopeCall, =, scopeCall, ., getParent, (, ), ;, Node, scopeClosureBlock, =, scopeCall, .]
[;, Node, scopeClosureBlock, =, scopeCall, ., getLastChild, (, ), ., getLastChild, (, ), ;, scopeClosureBlock, ., detachFromParent, (, ), ;]
[., getParent, (, ), ;, Node, scopeClosureBlock, =, scopeCall, ., getLastChild, (, ), ., getLastChild, (, ), ;, scopeClosureBlock, .]
[;, scopeClosureBlock, ., detachFromParent, (, ), ;, expressionWithScopeCall, ., getParent, (, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;]
[., getLastChild, (, ), ;, scopeClosureBlock, ., detachFromParent, (, ), ;, expressionWithScopeCall, ., getParent, (, ), ., replaceChild, (, expressionWithScopeCall]
[., getLastChild, (, ), ., getLastChild, (, ), ;, scopeClosureBlock, ., detachFromParent, (, ), ;, expressionWithScopeCall, ., getParent, (, )]
[;, expressionWithScopeCall, ., getParent, (, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;, NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, )]
[., detachFromParent, (, ), ;, expressionWithScopeCall, ., getParent, (, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;, NodeUtil, .]
[;, NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (, traversal, ., getAliasUsages, (, ), ., size, (, )]
[., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;, NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (, traversal, .]
[., getParent, (, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;, NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, ), ;, }]
[,, scopeClosureBlock, ), ;, NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (, traversal, ., getAliasUsages, (, ), .]
[), ;, NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (, traversal, ., getAliasUsages, (, ), ., size, (]
[;, }, if, (, traversal, ., getAliasUsages, (, ), ., size, (, ), >, 0, ||, traversal, ., getAliasDefinitionsInOrder, (]
[., tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (, traversal, ., getAliasUsages, (, ), ., size, (, ), >, 0]
[), ;, }, if, (, traversal, ., getAliasUsages, (, ), ., size, (, ), >, 0, ||, traversal, ., getAliasDefinitionsInOrder]
[), {, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, interface, AliasUsage, {, public, void, applyAlias, (, )]
[||, traversal, ., getScopeCalls, (, ), ., size, (, ), >, 0, ), {, compiler, ., reportCodeChange, (, ), ;]
[||, traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, ), >, 0, ||, traversal, ., getScopeCalls, (, ), ., size]
[>, 0, ||, traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, ), >, 0, ||, traversal, ., getScopeCalls, (, )]
[., size, (, ), >, 0, ||, traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, ), >, 0, ||, traversal]
[., getAliasUsages, (, ), ., size, (, ), >, 0, ||, traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, )]
[||, traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, ), >, 0, ||, traversal, ., getScopeCalls, (, ), ., size]
[||, traversal, ., getScopeCalls, (, ), ., size, (, ), >, 0, ), {, compiler, ., reportCodeChange, (, ), ;]
[>, 0, ||, traversal, ., getScopeCalls, (, ), ., size, (, ), >, 0, ), {, compiler, ., reportCodeChange, (]
[., size, (, ), >, 0, ||, traversal, ., getScopeCalls, (, ), ., size, (, ), >, 0, ), {]
[., getAliasDefinitionsInOrder, (, ), ., size, (, ), >, 0, ||, traversal, ., getScopeCalls, (, ), ., size, (, )]
[||, traversal, ., getScopeCalls, (, ), ., size, (, ), >, 0, ), {, compiler, ., reportCodeChange, (, ), ;]
[), {, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, interface, AliasUsage, {, public, void, applyAlias, (, )]
[>, 0, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, interface, AliasUsage, {, public, void, applyAlias]
[., size, (, ), >, 0, ), {, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, interface, AliasUsage]
[., getScopeCalls, (, ), ., size, (, ), >, 0, ), {, compiler, ., reportCodeChange, (, ), ;, }, }]
[), {, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, interface, AliasUsage, {, public, void, applyAlias, (, )]
[;, }, }, }, private, interface, AliasUsage, {, public, void, applyAlias, (, ), ;, }, private, class, AliasedNode, implements, AliasUsage]
[., reportCodeChange, (, ), ;, }, }, }, private, interface, AliasUsage, {, public, void, applyAlias, (, ), ;, }, private]
[=, aliasReference, ;, this, ., aliasDefinition, =, aliasDefinition, ;, }, @, Override, public, void, applyAlias, (, ), {, aliasReference, .]
[., aliasReference, =, aliasReference, ;, this, ., aliasDefinition, =, aliasDefinition, ;, }, @, Override, public, void, applyAlias, (, ), {]
[;, this, ., aliasDefinition, =, aliasDefinition, ;, }, @, Override, public, void, applyAlias, (, ), {, aliasReference, ., getParent, (]
[=, aliasDefinition, ;, }, @, Override, public, void, applyAlias, (, ), {, aliasReference, ., getParent, (, ), ., replaceChild, (]
[., aliasDefinition, =, aliasDefinition, ;, }, @, Override, public, void, applyAlias, (, ), {, aliasReference, ., getParent, (, ), .]
[;, }, @, Override, public, void, applyAlias, (, ), {, aliasReference, ., getParent, (, ), ., replaceChild, (, aliasReference, ,]
[;, }, }, private, class, AliasedTypeNode, implements, AliasUsage, {, private, final, Node, typeReference, ;, private, final, Node, aliasDefinition, ;, private]
[., replaceChild, (, aliasReference, ,, aliasDefinition, ., cloneTree, (, ), ), ;, }, }, private, class, AliasedTypeNode, implements, AliasUsage, {]
[., getParent, (, ), ., replaceChild, (, aliasReference, ,, aliasDefinition, ., cloneTree, (, ), ), ;, }, }, private, class]
[,, aliasDefinition, ., cloneTree, (, ), ), ;, }, }, private, class, AliasedTypeNode, implements, AliasUsage, {, private, final, Node, typeReference]
[), ;, }, }, private, class, AliasedTypeNode, implements, AliasUsage, {, private, final, Node, typeReference, ;, private, final, Node, aliasDefinition, ;]
[., cloneTree, (, ), ), ;, }, }, private, class, AliasedTypeNode, implements, AliasUsage, {, private, final, Node, typeReference, ;, private]
[=, typeReference, ;, this, ., aliasDefinition, =, aliasDefinition, ;, this, ., aliasName, =, aliasName, ;, }, @, Override, public, void]
[., typeReference, =, typeReference, ;, this, ., aliasDefinition, =, aliasDefinition, ;, this, ., aliasName, =, aliasName, ;, }, @, Override]
[;, this, ., aliasDefinition, =, aliasDefinition, ;, this, ., aliasName, =, aliasName, ;, }, @, Override, public, void, applyAlias, (]
[=, aliasDefinition, ;, this, ., aliasName, =, aliasName, ;, }, @, Override, public, void, applyAlias, (, ), {, String, typeName]
[., aliasDefinition, =, aliasDefinition, ;, this, ., aliasName, =, aliasName, ;, }, @, Override, public, void, applyAlias, (, ), {]
[;, this, ., aliasName, =, aliasName, ;, }, @, Override, public, void, applyAlias, (, ), {, String, typeName, =, typeReference]
[=, aliasName, ;, }, @, Override, public, void, applyAlias, (, ), {, String, typeName, =, typeReference, ., getString, (, )]
[., aliasName, =, aliasName, ;, }, @, Override, public, void, applyAlias, (, ), {, String, typeName, =, typeReference, ., getString]
[;, }, @, Override, public, void, applyAlias, (, ), {, String, typeName, =, typeReference, ., getString, (, ), ;, String]
[;, String, aliasExpanded, =, Preconditions, ., checkNotNull, (, aliasDefinition, ., getQualifiedName, (, ), ), ;, Preconditions, ., checkState, (, typeName]
[., getString, (, ), ;, String, aliasExpanded, =, Preconditions, ., checkNotNull, (, aliasDefinition, ., getQualifiedName, (, ), ), ;, Preconditions]
[;, Preconditions, ., checkState, (, typeName, ., startsWith, (, aliasName, ), ), ;, typeReference, ., setString, (, typeName, ., replaceFirst]
[., checkNotNull, (, aliasDefinition, ., getQualifiedName, (, ), ), ;, Preconditions, ., checkState, (, typeName, ., startsWith, (, aliasName, )]
[), ;, Preconditions, ., checkState, (, typeName, ., startsWith, (, aliasName, ), ), ;, typeReference, ., setString, (, typeName, .]
[., getQualifiedName, (, ), ), ;, Preconditions, ., checkState, (, typeName, ., startsWith, (, aliasName, ), ), ;, typeReference, .]
[;, typeReference, ., setString, (, typeName, ., replaceFirst, (, aliasName, ,, aliasExpanded, ), ), ;, }, }, private, class, Traversal]
[., checkState, (, typeName, ., startsWith, (, aliasName, ), ), ;, typeReference, ., setString, (, typeName, ., replaceFirst, (, aliasName]
[), ;, typeReference, ., setString, (, typeName, ., replaceFirst, (, aliasName, ,, aliasExpanded, ), ), ;, }, }, private, class]
[., startsWith, (, aliasName, ), ), ;, typeReference, ., setString, (, typeName, ., replaceFirst, (, aliasName, ,, aliasExpanded, ), )]
[), ), ;, typeReference, ., setString, (, typeName, ., replaceFirst, (, aliasName, ,, aliasExpanded, ), ), ;, }, }, private]
[;, }, }, private, class, Traversal, implements, NodeTraversal, ., ScopedCallback, {, private, final, List, <, Node, >, aliasDefinitionsInOrder, =, Lists]
[., setString, (, typeName, ., replaceFirst, (, aliasName, ,, aliasExpanded, ), ), ;, }, }, private, class, Traversal, implements, NodeTraversal]
[), ;, }, }, private, class, Traversal, implements, NodeTraversal, ., ScopedCallback, {, private, final, List, <, Node, >, aliasDefinitionsInOrder, =]
[., replaceFirst, (, aliasName, ,, aliasExpanded, ), ), ;, }, }, private, class, Traversal, implements, NodeTraversal, ., ScopedCallback, {, private]
[,, aliasExpanded, ), ), ;, }, }, private, class, Traversal, implements, NodeTraversal, ., ScopedCallback, {, private, final, List, <, Node]
[), ), ;, }, }, private, class, Traversal, implements, NodeTraversal, ., ScopedCallback, {, private, final, List, <, Node, >, aliasDefinitionsInOrder]
[;, private, final, List, <, Node, >, scopeCalls, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, AliasUsage]
[., newArrayList, (, ), ;, private, final, List, <, Node, >, scopeCalls, =, Lists, ., newArrayList, (, ), ;, private]
[;, private, final, List, <, AliasUsage, >, aliasUsages, =, Lists, ., newArrayList, (, ), ;, private, final, Map, <, String]
[., newArrayList, (, ), ;, private, final, List, <, AliasUsage, >, aliasUsages, =, Lists, ., newArrayList, (, ), ;, private]
[;, private, final, Map, <, String, ,, Var, >, aliases, =, Maps, ., newHashMap, (, ), ;, private, final, Set]
[., newArrayList, (, ), ;, private, final, Map, <, String, ,, Var, >, aliases, =, Maps, ., newHashMap, (, )]
[;, private, final, Set, <, String, >, forbiddenLocals, =, Sets, ., newHashSet, (, ), ;, private, boolean, hasNamespaceShadows, =, false]
[., newHashMap, (, ), ;, private, final, Set, <, String, >, forbiddenLocals, =, Sets, ., newHashSet, (, ), ;, private]
[;, private, boolean, hasNamespaceShadows, =, false, ;, private, boolean, hasErrors, =, false, ;, private, AliasTransformation, transformation, =, null, ;, Collection]
[., newHashSet, (, ), ;, private, boolean, hasNamespaceShadows, =, false, ;, private, boolean, hasErrors, =, false, ;, private, AliasTransformation, transformation]
[;, private, boolean, hasErrors, =, false, ;, private, AliasTransformation, transformation, =, null, ;, Collection, <, Node, >, getAliasDefinitionsInOrder, (, )]
[;, private, AliasTransformation, transformation, =, null, ;, Collection, <, Node, >, getAliasDefinitionsInOrder, (, ), {, return, aliasDefinitionsInOrder, ;, }, private]
[;, Collection, <, Node, >, getAliasDefinitionsInOrder, (, ), {, return, aliasDefinitionsInOrder, ;, }, private, List, <, AliasUsage, >, getAliasUsages, (]
[;, }, private, List, <, AliasUsage, >, getAliasUsages, (, ), {, return, aliasUsages, ;, }, List, <, Node, >, getScopeCalls]
[;, }, List, <, Node, >, getScopeCalls, (, ), {, return, scopeCalls, ;, }, boolean, hasErrors, (, ), {, return]
[;, }, boolean, hasErrors, (, ), {, return, hasErrors, ;, }, private, boolean, isCallToScopeMethod, (, Node, n, ), {, return]
[;, }, private, boolean, isCallToScopeMethod, (, Node, n, ), {, return, n, ., isCall, (, ), &&, SCOPING_METHOD_NAME, ., equals]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =, t, ., getCurrentNode, (, )]
[&&, SCOPING_METHOD_NAME, ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), ;, }, @, Override, public]
[., isCall, (, ), &&, SCOPING_METHOD_NAME, ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), ;]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =, t, ., getCurrentNode, (, )]
[., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), ;, }, @, Override, public, void, enterScope]
[), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =, t, ., getCurrentNode, (]
[., getQualifiedName, (, ), ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, )]
[;, if, (, n, !=, null, &&, isCallToScopeMethod, (, n, ), ), {, transformation, =, transformationHandler, ., logAliasTransformation, (, n]
[., getParent, (, ), ;, if, (, n, !=, null, &&, isCallToScopeMethod, (, n, ), ), {, transformation, =, transformationHandler]
[., getCurrentNode, (, ), ., getParent, (, ), ;, if, (, n, !=, null, &&, isCallToScopeMethod, (, n, ), )]
[), {, transformation, =, transformationHandler, ., logAliasTransformation, (, n, ., getSourceFileName, (, ), ,, getSourceRegion, (, n, ), ), ;]
[&&, isCallToScopeMethod, (, n, ), ), {, transformation, =, transformationHandler, ., logAliasTransformation, (, n, ., getSourceFileName, (, ), ,, getSourceRegion]
[!=, null, &&, isCallToScopeMethod, (, n, ), ), {, transformation, =, transformationHandler, ., logAliasTransformation, (, n, ., getSourceFileName, (, )]
[&&, isCallToScopeMethod, (, n, ), ), {, transformation, =, transformationHandler, ., logAliasTransformation, (, n, ., getSourceFileName, (, ), ,, getSourceRegion]
[), {, transformation, =, transformationHandler, ., logAliasTransformation, (, n, ., getSourceFileName, (, ), ,, getSourceRegion, (, n, ), ), ;]
[), ), {, transformation, =, transformationHandler, ., logAliasTransformation, (, n, ., getSourceFileName, (, ), ,, getSourceRegion, (, n, ), )]
[=, transformationHandler, ., logAliasTransformation, (, n, ., getSourceFileName, (, ), ,, getSourceRegion, (, n, ), ), ;, findAliases, (, t]
[;, findAliases, (, t, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (]
[., logAliasTransformation, (, n, ., getSourceFileName, (, ), ,, getSourceRegion, (, n, ), ), ;, findAliases, (, t, ), ;]
[,, getSourceRegion, (, n, ), ), ;, findAliases, (, t, ), ;, }, }, @, Override, public, void, exitScope, (]
[., getSourceFileName, (, ), ,, getSourceRegion, (, n, ), ), ;, findAliases, (, t, ), ;, }, }, @, Override]
[), ;, findAliases, (, t, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if]
[), ), ;, findAliases, (, t, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {]
[;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, t, ., getScopeDepth, (, )]
[), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, t, ., getScopeDepth, (]
[), {, findNamespaceShadows, (, t, ), ;, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, renameNamespaceShadows]
[>, 2, ), {, findNamespaceShadows, (, t, ), ;, }, if, (, t, ., getScopeDepth, (, ), ==, 2, )]
[., getScopeDepth, (, ), >, 2, ), {, findNamespaceShadows, (, t, ), ;, }, if, (, t, ., getScopeDepth, (]
[), {, findNamespaceShadows, (, t, ), ;, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, renameNamespaceShadows]
[;, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, renameNamespaceShadows, (, t, ), ;, aliases, .]
[), ;, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, renameNamespaceShadows, (, t, ), ;, aliases]
[), {, renameNamespaceShadows, (, t, ), ;, aliases, ., clear, (, ), ;, forbiddenLocals, ., clear, (, ), ;, transformation]
[==, 2, ), {, renameNamespaceShadows, (, t, ), ;, aliases, ., clear, (, ), ;, forbiddenLocals, ., clear, (, )]
[., getScopeDepth, (, ), ==, 2, ), {, renameNamespaceShadows, (, t, ), ;, aliases, ., clear, (, ), ;, forbiddenLocals]
[), {, renameNamespaceShadows, (, t, ), ;, aliases, ., clear, (, ), ;, forbiddenLocals, ., clear, (, ), ;, transformation]
[;, aliases, ., clear, (, ), ;, forbiddenLocals, ., clear, (, ), ;, transformation, =, null, ;, hasNamespaceShadows, =, false]
[), ;, aliases, ., clear, (, ), ;, forbiddenLocals, ., clear, (, ), ;, transformation, =, null, ;, hasNamespaceShadows, =]
[;, forbiddenLocals, ., clear, (, ), ;, transformation, =, null, ;, hasNamespaceShadows, =, false, ;, }, }, @, Override, public]
[., clear, (, ), ;, forbiddenLocals, ., clear, (, ), ;, transformation, =, null, ;, hasNamespaceShadows, =, false, ;, }]
[;, transformation, =, null, ;, hasNamespaceShadows, =, false, ;, }, }, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t]
[., clear, (, ), ;, transformation, =, null, ;, hasNamespaceShadows, =, false, ;, }, }, @, Override, public, final, boolean]
[=, null, ;, hasNamespaceShadows, =, false, ;, }, }, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node]
[;, hasNamespaceShadows, =, false, ;, }, }, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,]
[=, false, ;, }, }, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, }, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[), {, if, (, parent, ==, null, ||, !, isCallToScopeMethod, (, parent, ), ), {, return, false, ;, }, }]
[&&, t, ., inGlobalScope, (, ), ), {, if, (, parent, ==, null, ||, !, isCallToScopeMethod, (, parent, ), )]
[., isFunction, (, ), &&, t, ., inGlobalScope, (, ), ), {, if, (, parent, ==, null, ||, !, isCallToScopeMethod]
[), {, if, (, parent, ==, null, ||, !, isCallToScopeMethod, (, parent, ), ), {, return, false, ;, }, }]
[., inGlobalScope, (, ), ), {, if, (, parent, ==, null, ||, !, isCallToScopeMethod, (, parent, ), ), {, return]
[), {, return, false, ;, }, }, return, true, ;, }, private, SourcePosition, <, AliasTransformation, >, getSourceRegion, (, Node, n]
[||, !, isCallToScopeMethod, (, parent, ), ), {, return, false, ;, }, }, return, true, ;, }, private, SourcePosition, <]
[==, null, ||, !, isCallToScopeMethod, (, parent, ), ), {, return, false, ;, }, }, return, true, ;, }, private]
[||, !, isCallToScopeMethod, (, parent, ), ), {, return, false, ;, }, }, return, true, ;, }, private, SourcePosition, <]
[), {, return, false, ;, }, }, return, true, ;, }, private, SourcePosition, <, AliasTransformation, >, getSourceRegion, (, Node, n]
[), {, return, false, ;, }, }, return, true, ;, }, private, SourcePosition, <, AliasTransformation, >, getSourceRegion, (, Node, n]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, SourcePosition, <, AliasTransformation, >, getSourceRegion, (, Node]
[;, }, }, return, true, ;, }, private, SourcePosition, <, AliasTransformation, >, getSourceRegion, (, Node, n, ), {, Node, testNode]
[;, }, private, SourcePosition, <, AliasTransformation, >, getSourceRegion, (, Node, n, ), {, Node, testNode, =, n, ;, Node, next]
[;, Node, next, =, null, ;, for, (, ;, next, !=, null, ||, testNode, ., isScript, (, ), ;, )]
[;, for, (, ;, next, !=, null, ||, testNode, ., isScript, (, ), ;, ), {, next, =, testNode, .]
[;, ), {, next, =, testNode, ., getNext, (, ), ;, testNode, =, testNode, ., getParent, (, ), ;, }]
[||, testNode, ., isScript, (, ), ;, ), {, next, =, testNode, ., getNext, (, ), ;, testNode, =, testNode]
[!=, null, ||, testNode, ., isScript, (, ), ;, ), {, next, =, testNode, ., getNext, (, ), ;, testNode]
[||, testNode, ., isScript, (, ), ;, ), {, next, =, testNode, ., getNext, (, ), ;, testNode, =, testNode]
[;, ), {, next, =, testNode, ., getNext, (, ), ;, testNode, =, testNode, ., getParent, (, ), ;, }]
[., isScript, (, ), ;, ), {, next, =, testNode, ., getNext, (, ), ;, testNode, =, testNode, ., getParent]
[=, testNode, ., getNext, (, ), ;, testNode, =, testNode, ., getParent, (, ), ;, }, int, endLine, =, next]
[;, testNode, =, testNode, ., getParent, (, ), ;, }, int, endLine, =, next, ==, null, ?, Integer, ., MAX_VALUE]
[., getNext, (, ), ;, testNode, =, testNode, ., getParent, (, ), ;, }, int, endLine, =, next, ==, null]
[=, testNode, ., getParent, (, ), ;, }, int, endLine, =, next, ==, null, ?, Integer, ., MAX_VALUE, :, next]
[;, }, int, endLine, =, next, ==, null, ?, Integer, ., MAX_VALUE, :, next, ., getLineno, (, ), ;, int]
[., getParent, (, ), ;, }, int, endLine, =, next, ==, null, ?, Integer, ., MAX_VALUE, :, next, ., getLineno]
[;, int, endChar, =, next, ==, null, ?, Integer, ., MAX_VALUE, :, next, ., getCharno, (, ), ;, SourcePosition, <]
[?, Integer, ., MAX_VALUE, :, next, ., getLineno, (, ), ;, int, endChar, =, next, ==, null, ?, Integer, .]
[==, null, ?, Integer, ., MAX_VALUE, :, next, ., getLineno, (, ), ;, int, endChar, =, next, ==, null, ?]
[?, Integer, ., MAX_VALUE, :, next, ., getLineno, (, ), ;, int, endChar, =, next, ==, null, ?, Integer, .]
[:, next, ., getLineno, (, ), ;, int, endChar, =, next, ==, null, ?, Integer, ., MAX_VALUE, :, next, .]
[., MAX_VALUE, :, next, ., getLineno, (, ), ;, int, endChar, =, next, ==, null, ?, Integer, ., MAX_VALUE, :]
[;, int, endChar, =, next, ==, null, ?, Integer, ., MAX_VALUE, :, next, ., getCharno, (, ), ;, SourcePosition, <]
[., getLineno, (, ), ;, int, endChar, =, next, ==, null, ?, Integer, ., MAX_VALUE, :, next, ., getCharno, (]
[;, SourcePosition, <, AliasTransformation, >, pos, =, new, SourcePosition, <, AliasTransformation, >, (, ), {, }, ;, pos, ., setPositionInformation]
[?, Integer, ., MAX_VALUE, :, next, ., getCharno, (, ), ;, SourcePosition, <, AliasTransformation, >, pos, =, new, SourcePosition, <]
[==, null, ?, Integer, ., MAX_VALUE, :, next, ., getCharno, (, ), ;, SourcePosition, <, AliasTransformation, >, pos, =, new]
[?, Integer, ., MAX_VALUE, :, next, ., getCharno, (, ), ;, SourcePosition, <, AliasTransformation, >, pos, =, new, SourcePosition, <]
[:, next, ., getCharno, (, ), ;, SourcePosition, <, AliasTransformation, >, pos, =, new, SourcePosition, <, AliasTransformation, >, (, )]
[., MAX_VALUE, :, next, ., getCharno, (, ), ;, SourcePosition, <, AliasTransformation, >, pos, =, new, SourcePosition, <, AliasTransformation, >]
[;, SourcePosition, <, AliasTransformation, >, pos, =, new, SourcePosition, <, AliasTransformation, >, (, ), {, }, ;, pos, ., setPositionInformation]
[., getCharno, (, ), ;, SourcePosition, <, AliasTransformation, >, pos, =, new, SourcePosition, <, AliasTransformation, >, (, ), {, }]
[;, pos, ., setPositionInformation, (, n, ., getLineno, (, ), ,, n, ., getCharno, (, ), ,, endLine, ,, endChar]
[;, return, pos, ;, }, private, void, report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, error, ,, String, ...]
[., setPositionInformation, (, n, ., getLineno, (, ), ,, n, ., getCharno, (, ), ,, endLine, ,, endChar, ), ;]
[,, n, ., getCharno, (, ), ,, endLine, ,, endChar, ), ;, return, pos, ;, }, private, void, report, (]
[., getLineno, (, ), ,, n, ., getCharno, (, ), ,, endLine, ,, endChar, ), ;, return, pos, ;, }]
[,, endLine, ,, endChar, ), ;, return, pos, ;, }, private, void, report, (, NodeTraversal, t, ,, Node, n, ,]
[., getCharno, (, ), ,, endLine, ,, endChar, ), ;, return, pos, ;, }, private, void, report, (, NodeTraversal, t]
[,, endChar, ), ;, return, pos, ;, }, private, void, report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, error]
[), ;, return, pos, ;, }, private, void, report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, error, ,, String]
[;, }, private, void, report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, error, ,, String, ..., arguments, ), {]
[;, hasErrors, =, true, ;, }, private, void, findAliases, (, NodeTraversal, t, ), {, Scope, scope, =, t, ., getScope]
[., report, (, t, ., makeError, (, n, ,, error, ,, arguments, ), ), ;, hasErrors, =, true, ;, }]
[), ;, hasErrors, =, true, ;, }, private, void, findAliases, (, NodeTraversal, t, ), {, Scope, scope, =, t, .]
[., makeError, (, n, ,, error, ,, arguments, ), ), ;, hasErrors, =, true, ;, }, private, void, findAliases, (]
[,, error, ,, arguments, ), ), ;, hasErrors, =, true, ;, }, private, void, findAliases, (, NodeTraversal, t, ), {]
[,, arguments, ), ), ;, hasErrors, =, true, ;, }, private, void, findAliases, (, NodeTraversal, t, ), {, Scope, scope]
[), ), ;, hasErrors, =, true, ;, }, private, void, findAliases, (, NodeTraversal, t, ), {, Scope, scope, =, t]
[=, true, ;, }, private, void, findAliases, (, NodeTraversal, t, ), {, Scope, scope, =, t, ., getScope, (, )]
[;, }, private, void, findAliases, (, NodeTraversal, t, ), {, Scope, scope, =, t, ., getScope, (, ), ;, for]
[;, for, (, Var, v, :, scope, ., getVarIterable, (, ), ), {, Node, n, =, v, ., getNode, (]
[., getScope, (, ), ;, for, (, Var, v, :, scope, ., getVarIterable, (, ), ), {, Node, n, =]
[), {, Node, n, =, v, ., getNode, (, ), ;, int, type, =, n, ., getType, (, ), ;]
[., getVarIterable, (, ), ), {, Node, n, =, v, ., getNode, (, ), ;, int, type, =, n, .]
[;, int, type, =, n, ., getType, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, if]
[., getNode, (, ), ;, int, type, =, n, ., getType, (, ), ;, Node, parent, =, n, ., getParent]
[;, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, ., isVar, (, ), &&, n, .]
[., getType, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, ., isVar, (]
[;, if, (, parent, ., isVar, (, ), &&, n, ., hasChildren, (, ), &&, n, ., getFirstChild, (, )]
[., getParent, (, ), ;, if, (, parent, ., isVar, (, ), &&, n, ., hasChildren, (, ), &&, n]
[), {, String, name, =, n, ., getString, (, ), ;, Var, aliasVar, =, scope, ., getVar, (, name, )]
[&&, n, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, String, name, =, n, ., getString, (, )]
[&&, n, ., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, String, name]
[., isVar, (, ), &&, n, ., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isQualifiedName, (, )]
[&&, n, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, String, name, =, n, ., getString, (, )]
[., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, String, name, =, n]
[), {, String, name, =, n, ., getString, (, ), ;, Var, aliasVar, =, scope, ., getVar, (, name, )]
[., isQualifiedName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Var, aliasVar, =, scope, .]
[., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Var]
[;, Var, aliasVar, =, scope, ., getVar, (, name, ), ;, aliases, ., put, (, name, ,, aliasVar, ), ;]
[., getString, (, ), ;, Var, aliasVar, =, scope, ., getVar, (, name, ), ;, aliases, ., put, (, name]
[;, aliases, ., put, (, name, ,, aliasVar, ), ;, String, qualifiedName, =, aliasVar, ., getInitialValue, (, ), ., getQualifiedName]
[., getVar, (, name, ), ;, aliases, ., put, (, name, ,, aliasVar, ), ;, String, qualifiedName, =, aliasVar, .]
[), ;, aliases, ., put, (, name, ,, aliasVar, ), ;, String, qualifiedName, =, aliasVar, ., getInitialValue, (, ), .]
[;, String, qualifiedName, =, aliasVar, ., getInitialValue, (, ), ., getQualifiedName, (, ), ;, transformation, ., addAlias, (, name, ,]
[., put, (, name, ,, aliasVar, ), ;, String, qualifiedName, =, aliasVar, ., getInitialValue, (, ), ., getQualifiedName, (, )]
[,, aliasVar, ), ;, String, qualifiedName, =, aliasVar, ., getInitialValue, (, ), ., getQualifiedName, (, ), ;, transformation, ., addAlias]
[), ;, String, qualifiedName, =, aliasVar, ., getInitialValue, (, ), ., getQualifiedName, (, ), ;, transformation, ., addAlias, (, name]
[;, transformation, ., addAlias, (, name, ,, qualifiedName, ), ;, int, rootIndex, =, qualifiedName, ., indexOf, (, ".", ), ;]
[., getQualifiedName, (, ), ;, transformation, ., addAlias, (, name, ,, qualifiedName, ), ;, int, rootIndex, =, qualifiedName, ., indexOf]
[., getInitialValue, (, ), ., getQualifiedName, (, ), ;, transformation, ., addAlias, (, name, ,, qualifiedName, ), ;, int, rootIndex]
[;, int, rootIndex, =, qualifiedName, ., indexOf, (, ".", ), ;, if, (, rootIndex, !=, -, 1, ), {, String]
[., addAlias, (, name, ,, qualifiedName, ), ;, int, rootIndex, =, qualifiedName, ., indexOf, (, ".", ), ;, if, (]
[,, qualifiedName, ), ;, int, rootIndex, =, qualifiedName, ., indexOf, (, ".", ), ;, if, (, rootIndex, !=, -, 1]
[), ;, int, rootIndex, =, qualifiedName, ., indexOf, (, ".", ), ;, if, (, rootIndex, !=, -, 1, ), {]
[;, if, (, rootIndex, !=, -, 1, ), {, String, qNameRoot, =, qualifiedName, ., substring, (, 0, ,, rootIndex, )]
[., indexOf, (, ".", ), ;, if, (, rootIndex, !=, -, 1, ), {, String, qNameRoot, =, qualifiedName, ., substring]
[), ;, if, (, rootIndex, !=, -, 1, ), {, String, qNameRoot, =, qualifiedName, ., substring, (, 0, ,, rootIndex]
[), {, String, qNameRoot, =, qualifiedName, ., substring, (, 0, ,, rootIndex, ), ;, if, (, !, aliases, ., containsKey]
[!=, -, 1, ), {, String, qNameRoot, =, qualifiedName, ., substring, (, 0, ,, rootIndex, ), ;, if, (, !]
[), {, String, qNameRoot, =, qualifiedName, ., substring, (, 0, ,, rootIndex, ), ;, if, (, !, aliases, ., containsKey]
[), {, String, qNameRoot, =, qualifiedName, ., substring, (, 0, ,, rootIndex, ), ;, if, (, !, aliases, ., containsKey]
[;, if, (, !, aliases, ., containsKey, (, qNameRoot, ), ), {, forbiddenLocals, ., add, (, qNameRoot, ), ;, }]
[., substring, (, 0, ,, rootIndex, ), ;, if, (, !, aliases, ., containsKey, (, qNameRoot, ), ), {, forbiddenLocals]
[,, rootIndex, ), ;, if, (, !, aliases, ., containsKey, (, qNameRoot, ), ), {, forbiddenLocals, ., add, (, qNameRoot]
[), ;, if, (, !, aliases, ., containsKey, (, qNameRoot, ), ), {, forbiddenLocals, ., add, (, qNameRoot, ), ;]
[), {, forbiddenLocals, ., add, (, qNameRoot, ), ;, }, }, }, else, if, (, v, ., isBleedingFunction, (, )]
[), {, forbiddenLocals, ., add, (, qNameRoot, ), ;, }, }, }, else, if, (, v, ., isBleedingFunction, (, )]
[., containsKey, (, qNameRoot, ), ), {, forbiddenLocals, ., add, (, qNameRoot, ), ;, }, }, }, else, if, (]
[), ), {, forbiddenLocals, ., add, (, qNameRoot, ), ;, }, }, }, else, if, (, v, ., isBleedingFunction, (]
[;, }, }, }, else, if, (, v, ., isBleedingFunction, (, ), ), {, }, else, if, (, parent, .]
[., add, (, qNameRoot, ), ;, }, }, }, else, if, (, v, ., isBleedingFunction, (, ), ), {, }]
[), ;, }, }, }, else, if, (, v, ., isBleedingFunction, (, ), ), {, }, else, if, (, parent]
[), {, }, else, if, (, parent, ., getType, (, ), ==, Token, ., LP, ), {, }, else, {]
[., isBleedingFunction, (, ), ), {, }, else, if, (, parent, ., getType, (, ), ==, Token, ., LP, )]
[), {, }, else, {, report, (, t, ,, n, ,, GOOG_SCOPE_NON_ALIAS_LOCAL, ,, n, ., getString, (, ), ), ;]
[==, Token, ., LP, ), {, }, else, {, report, (, t, ,, n, ,, GOOG_SCOPE_NON_ALIAS_LOCAL, ,, n, ., getString]
[., getType, (, ), ==, Token, ., LP, ), {, }, else, {, report, (, t, ,, n, ,, GOOG_SCOPE_NON_ALIAS_LOCAL]
[), {, }, else, {, report, (, t, ,, n, ,, GOOG_SCOPE_NON_ALIAS_LOCAL, ,, n, ., getString, (, ), ), ;]
[., LP, ), {, }, else, {, report, (, t, ,, n, ,, GOOG_SCOPE_NON_ALIAS_LOCAL, ,, n, ., getString, (, )]
[;, }, }, }, private, void, findNamespaceShadows, (, NodeTraversal, t, ), {, if, (, hasNamespaceShadows, ), {, return, ;, }]
[,, n, ,, GOOG_SCOPE_NON_ALIAS_LOCAL, ,, n, ., getString, (, ), ), ;, }, }, }, private, void, findNamespaceShadows, (, NodeTraversal]
[,, GOOG_SCOPE_NON_ALIAS_LOCAL, ,, n, ., getString, (, ), ), ;, }, }, }, private, void, findNamespaceShadows, (, NodeTraversal, t, )]
[,, n, ., getString, (, ), ), ;, }, }, }, private, void, findNamespaceShadows, (, NodeTraversal, t, ), {, if]
[), ;, }, }, }, private, void, findNamespaceShadows, (, NodeTraversal, t, ), {, if, (, hasNamespaceShadows, ), {, return, ;]
[., getString, (, ), ), ;, }, }, }, private, void, findNamespaceShadows, (, NodeTraversal, t, ), {, if, (, hasNamespaceShadows]
[), {, return, ;, }, Scope, scope, =, t, ., getScope, (, ), ;, for, (, Var, v, :, scope]
[;, for, (, Var, v, :, scope, ., getVarIterable, (, ), ), {, if, (, forbiddenLocals, ., contains, (, v]
[., getScope, (, ), ;, for, (, Var, v, :, scope, ., getVarIterable, (, ), ), {, if, (, forbiddenLocals]
[), {, if, (, forbiddenLocals, ., contains, (, v, ., getName, (, ), ), ), {, hasNamespaceShadows, =, true, ;]
[., getVarIterable, (, ), ), {, if, (, forbiddenLocals, ., contains, (, v, ., getName, (, ), ), ), {]
[), {, hasNamespaceShadows, =, true, ;, return, ;, }, }, }, private, void, renameNamespaceShadows, (, NodeTraversal, t, ), {, if]
[., contains, (, v, ., getName, (, ), ), ), {, hasNamespaceShadows, =, true, ;, return, ;, }, }, }]
[), ), {, hasNamespaceShadows, =, true, ;, return, ;, }, }, }, private, void, renameNamespaceShadows, (, NodeTraversal, t, ), {]
[., getName, (, ), ), ), {, hasNamespaceShadows, =, true, ;, return, ;, }, }, }, private, void, renameNamespaceShadows, (]
[=, true, ;, return, ;, }, }, }, private, void, renameNamespaceShadows, (, NodeTraversal, t, ), {, if, (, hasNamespaceShadows, )]
[;, return, ;, }, }, }, private, void, renameNamespaceShadows, (, NodeTraversal, t, ), {, if, (, hasNamespaceShadows, ), {, MakeDeclaredNamesUnique]
[), {, MakeDeclaredNamesUnique, ., Renamer, renamer, =, new, MakeDeclaredNamesUnique, ., WhitelistedRenamer, (, new, MakeDeclaredNamesUnique, ., ContextualRenamer, (, ), ,, forbiddenLocals]
[;, for, (, String, s, :, forbiddenLocals, ), {, renamer, ., addDeclaredName, (, s, ), ;, }, MakeDeclaredNamesUnique, uniquifier, =]
[,, forbiddenLocals, ), ;, for, (, String, s, :, forbiddenLocals, ), {, renamer, ., addDeclaredName, (, s, ), ;, }]
[), ;, for, (, String, s, :, forbiddenLocals, ), {, renamer, ., addDeclaredName, (, s, ), ;, }, MakeDeclaredNamesUnique, uniquifier]
[), {, renamer, ., addDeclaredName, (, s, ), ;, }, MakeDeclaredNamesUnique, uniquifier, =, new, MakeDeclaredNamesUnique, (, renamer, ), ;, NodeTraversal]
[;, }, MakeDeclaredNamesUnique, uniquifier, =, new, MakeDeclaredNamesUnique, (, renamer, ), ;, NodeTraversal, ., traverse, (, compiler, ,, t, ., getScopeRoot]
[., addDeclaredName, (, s, ), ;, }, MakeDeclaredNamesUnique, uniquifier, =, new, MakeDeclaredNamesUnique, (, renamer, ), ;, NodeTraversal, ., traverse, (]
[), ;, }, MakeDeclaredNamesUnique, uniquifier, =, new, MakeDeclaredNamesUnique, (, renamer, ), ;, NodeTraversal, ., traverse, (, compiler, ,, t, .]
[;, NodeTraversal, ., traverse, (, compiler, ,, t, ., getScopeRoot, (, ), ,, uniquifier, ), ;, }, }, private, void]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, t, ., getScopeRoot, (, ), ,, uniquifier, ), ;, }, }, private]
[;, }, }, private, void, validateScopeCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, preprocessorSymbolTable]
[., traverse, (, compiler, ,, t, ., getScopeRoot, (, ), ,, uniquifier, ), ;, }, }, private, void, validateScopeCall, (]
[,, t, ., getScopeRoot, (, ), ,, uniquifier, ), ;, }, }, private, void, validateScopeCall, (, NodeTraversal, t, ,, Node]
[,, uniquifier, ), ;, }, }, private, void, validateScopeCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., getScopeRoot, (, ), ,, uniquifier, ), ;, }, }, private, void, validateScopeCall, (, NodeTraversal, t, ,, Node, n, ,]
[), ;, }, }, private, void, validateScopeCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, preprocessorSymbolTable, ., addReference, (, n, ., getFirstChild, (, ), ), ;, }, if, (, !, parent, ., isExprResult]
[!=, null, ), {, preprocessorSymbolTable, ., addReference, (, n, ., getFirstChild, (, ), ), ;, }, if, (, !, parent]
[), {, preprocessorSymbolTable, ., addReference, (, n, ., getFirstChild, (, ), ), ;, }, if, (, !, parent, ., isExprResult]
[;, }, if, (, !, parent, ., isExprResult, (, ), ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USED_IMPROPERLY, )]
[., addReference, (, n, ., getFirstChild, (, ), ), ;, }, if, (, !, parent, ., isExprResult, (, ), )]
[), ;, }, if, (, !, parent, ., isExprResult, (, ), ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USED_IMPROPERLY]
[., getFirstChild, (, ), ), ;, }, if, (, !, parent, ., isExprResult, (, ), ), {, report, (, t]
[), {, report, (, t, ,, n, ,, GOOG_SCOPE_USED_IMPROPERLY, ), ;, }, if, (, n, ., getChildCount, (, ), !=]
[), {, report, (, t, ,, n, ,, GOOG_SCOPE_USED_IMPROPERLY, ), ;, }, if, (, n, ., getChildCount, (, ), !=]
[., isExprResult, (, ), ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USED_IMPROPERLY, ), ;, }, if, (, n, .]
[;, }, if, (, n, ., getChildCount, (, ), !=, 2, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS]
[,, n, ,, GOOG_SCOPE_USED_IMPROPERLY, ), ;, }, if, (, n, ., getChildCount, (, ), !=, 2, ), {, report, (]
[,, GOOG_SCOPE_USED_IMPROPERLY, ), ;, }, if, (, n, ., getChildCount, (, ), !=, 2, ), {, report, (, t, ,]
[), ;, }, if, (, n, ., getChildCount, (, ), !=, 2, ), {, report, (, t, ,, n, ,]
[), {, report, (, t, ,, n, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, Node, anonymousFnNode, =, n, ., getChildAtIndex]
[!=, 2, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, Node, anonymousFnNode, =, n]
[., getChildCount, (, ), !=, 2, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {]
[), {, report, (, t, ,, n, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, Node, anonymousFnNode, =, n, ., getChildAtIndex]
[;, }, else, {, Node, anonymousFnNode, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, !, anonymousFnNode, ., isFunction]
[,, n, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, Node, anonymousFnNode, =, n, ., getChildAtIndex, (, 1, ), ;, if]
[,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, Node, anonymousFnNode, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, !]
[), ;, }, else, {, Node, anonymousFnNode, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, !, anonymousFnNode, .]
[;, if, (, !, anonymousFnNode, ., isFunction, (, ), ||, NodeUtil, ., getFunctionName, (, anonymousFnNode, ), !=, null, ||, NodeUtil]
[., getChildAtIndex, (, 1, ), ;, if, (, !, anonymousFnNode, ., isFunction, (, ), ||, NodeUtil, ., getFunctionName, (, anonymousFnNode]
[), ;, if, (, !, anonymousFnNode, ., isFunction, (, ), ||, NodeUtil, ., getFunctionName, (, anonymousFnNode, ), !=, null, ||]
[), {, report, (, t, ,, anonymousFnNode, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, scopeCalls, ., add, (, n, )]
[||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, ), ), {, report, (, t, ,, anonymousFnNode, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS]
[||, NodeUtil, ., getFunctionName, (, anonymousFnNode, ), !=, null, ||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, )]
[||, NodeUtil, ., getFunctionName, (, anonymousFnNode, ), !=, null, ||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, )]
[., isFunction, (, ), ||, NodeUtil, ., getFunctionName, (, anonymousFnNode, ), !=, null, ||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, )]
[||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, ), ), {, report, (, t, ,, anonymousFnNode, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS]
[!=, null, ||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, ), ), {, report, (, t, ,, anonymousFnNode]
[., getFunctionName, (, anonymousFnNode, ), !=, null, ||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, ), ), {]
[), !=, null, ||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, ), ), {, report, (, t, ,]
[||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, ), ), {, report, (, t, ,, anonymousFnNode, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS]
[), {, report, (, t, ,, anonymousFnNode, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, scopeCalls, ., add, (, n, )]
[., hasChildren, (, ), ), {, report, (, t, ,, anonymousFnNode, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, scopeCalls, .]
[., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, ), ), {, report, (, t, ,, anonymousFnNode, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;]
[), ., hasChildren, (, ), ), {, report, (, t, ,, anonymousFnNode, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, scopeCalls]
[;, }, else, {, scopeCalls, ., add, (, n, ), ;, }, }, }, @, Override, public, void, visit, (]
[,, anonymousFnNode, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, scopeCalls, ., add, (, n, ), ;, }, }, }, @]
[,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, scopeCalls, ., add, (, n, ), ;, }, }, }, @, Override, public]
[), ;, }, else, {, scopeCalls, ., add, (, n, ), ;, }, }, }, @, Override, public, void, visit]
[;, }, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., add, (, n, ), ;, }, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), ;, }, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), {, validateScopeCall, (, t, ,, n, ,, n, ., getParent, (, ), ), ;, }, if, (, t, .]
[), ), {, validateScopeCall, (, t, ,, n, ,, n, ., getParent, (, ), ), ;, }, if, (, t]
[;, }, if, (, t, ., getScopeDepth, (, ), <, 2, ), {, return, ;, }, int, type, =, n]
[,, n, ,, n, ., getParent, (, ), ), ;, }, if, (, t, ., getScopeDepth, (, ), <, 2]
[,, n, ., getParent, (, ), ), ;, }, if, (, t, ., getScopeDepth, (, ), <, 2, ), {]
[), ;, }, if, (, t, ., getScopeDepth, (, ), <, 2, ), {, return, ;, }, int, type, =]
[., getParent, (, ), ), ;, }, if, (, t, ., getScopeDepth, (, ), <, 2, ), {, return, ;]
[), {, return, ;, }, int, type, =, n, ., getType, (, ), ;, Var, aliasVar, =, null, ;, if]
[<, 2, ), {, return, ;, }, int, type, =, n, ., getType, (, ), ;, Var, aliasVar, =, null]
[., getScopeDepth, (, ), <, 2, ), {, return, ;, }, int, type, =, n, ., getType, (, ), ;]
[), {, return, ;, }, int, type, =, n, ., getType, (, ), ;, Var, aliasVar, =, null, ;, if]
[;, Var, aliasVar, =, null, ;, if, (, type, ==, Token, ., NAME, ), {, String, name, =, n, .]
[., getType, (, ), ;, Var, aliasVar, =, null, ;, if, (, type, ==, Token, ., NAME, ), {, String]
[;, if, (, type, ==, Token, ., NAME, ), {, String, name, =, n, ., getString, (, ), ;, Var]
[), {, String, name, =, n, ., getString, (, ), ;, Var, lexicalVar, =, t, ., getScope, (, ), .]
[==, Token, ., NAME, ), {, String, name, =, n, ., getString, (, ), ;, Var, lexicalVar, =, t, .]
[), {, String, name, =, n, ., getString, (, ), ;, Var, lexicalVar, =, t, ., getScope, (, ), .]
[., NAME, ), {, String, name, =, n, ., getString, (, ), ;, Var, lexicalVar, =, t, ., getScope, (]
[;, Var, lexicalVar, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if]
[., getString, (, ), ;, Var, lexicalVar, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (]
[;, if, (, lexicalVar, !=, null, &&, lexicalVar, ==, aliases, ., get, (, name, ), ), {, aliasVar, =, lexicalVar]
[., getVar, (, n, ., getString, (, ), ), ;, if, (, lexicalVar, !=, null, &&, lexicalVar, ==, aliases, .]
[., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, lexicalVar, !=, null, &&]
[), ;, if, (, lexicalVar, !=, null, &&, lexicalVar, ==, aliases, ., get, (, name, ), ), {, aliasVar, =]
[., getString, (, ), ), ;, if, (, lexicalVar, !=, null, &&, lexicalVar, ==, aliases, ., get, (, name, )]
[), {, aliasVar, =, lexicalVar, ;, }, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, if]
[&&, lexicalVar, ==, aliases, ., get, (, name, ), ), {, aliasVar, =, lexicalVar, ;, }, }, if, (, t]
[!=, null, &&, lexicalVar, ==, aliases, ., get, (, name, ), ), {, aliasVar, =, lexicalVar, ;, }, }, if]
[&&, lexicalVar, ==, aliases, ., get, (, name, ), ), {, aliasVar, =, lexicalVar, ;, }, }, if, (, t]
[), {, aliasVar, =, lexicalVar, ;, }, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, if]
[==, aliases, ., get, (, name, ), ), {, aliasVar, =, lexicalVar, ;, }, }, if, (, t, ., getScopeDepth]
[), {, aliasVar, =, lexicalVar, ;, }, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, if]
[., get, (, name, ), ), {, aliasVar, =, lexicalVar, ;, }, }, if, (, t, ., getScopeDepth, (, )]
[), ), {, aliasVar, =, lexicalVar, ;, }, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {]
[=, lexicalVar, ;, }, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, if, (, aliasVar, !=]
[;, }, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, if, (, aliasVar, !=, null, &&]
[), {, if, (, aliasVar, !=, null, &&, NodeUtil, ., isLValue, (, n, ), ), {, if, (, aliasVar, .]
[==, 2, ), {, if, (, aliasVar, !=, null, &&, NodeUtil, ., isLValue, (, n, ), ), {, if, (]
[., getScopeDepth, (, ), ==, 2, ), {, if, (, aliasVar, !=, null, &&, NodeUtil, ., isLValue, (, n, )]
[), {, if, (, aliasVar, !=, null, &&, NodeUtil, ., isLValue, (, n, ), ), {, if, (, aliasVar, .]
[), {, if, (, aliasVar, ., getNode, (, ), ==, n, ), {, aliasDefinitionsInOrder, ., add, (, n, ), ;]
[&&, NodeUtil, ., isLValue, (, n, ), ), {, if, (, aliasVar, ., getNode, (, ), ==, n, ), {]
[!=, null, &&, NodeUtil, ., isLValue, (, n, ), ), {, if, (, aliasVar, ., getNode, (, ), ==, n]
[&&, NodeUtil, ., isLValue, (, n, ), ), {, if, (, aliasVar, ., getNode, (, ), ==, n, ), {]
[), {, if, (, aliasVar, ., getNode, (, ), ==, n, ), {, aliasDefinitionsInOrder, ., add, (, n, ), ;]
[., isLValue, (, n, ), ), {, if, (, aliasVar, ., getNode, (, ), ==, n, ), {, aliasDefinitionsInOrder, .]
[), ), {, if, (, aliasVar, ., getNode, (, ), ==, n, ), {, aliasDefinitionsInOrder, ., add, (, n, )]
[), {, aliasDefinitionsInOrder, ., add, (, n, ), ;, return, ;, }, else, {, report, (, t, ,, n, ,]
[==, n, ), {, aliasDefinitionsInOrder, ., add, (, n, ), ;, return, ;, }, else, {, report, (, t, ,]
[., getNode, (, ), ==, n, ), {, aliasDefinitionsInOrder, ., add, (, n, ), ;, return, ;, }, else, {]
[), {, aliasDefinitionsInOrder, ., add, (, n, ), ;, return, ;, }, else, {, report, (, t, ,, n, ,]
[;, return, ;, }, else, {, report, (, t, ,, n, ,, GOOG_SCOPE_ALIAS_REDEFINED, ,, n, ., getString, (, ), )]
[., add, (, n, ), ;, return, ;, }, else, {, report, (, t, ,, n, ,, GOOG_SCOPE_ALIAS_REDEFINED, ,, n]
[), ;, return, ;, }, else, {, report, (, t, ,, n, ,, GOOG_SCOPE_ALIAS_REDEFINED, ,, n, ., getString, (, )]
[;, }, }, if, (, type, ==, Token, ., RETURN, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_RETURN, )]
[,, n, ,, GOOG_SCOPE_ALIAS_REDEFINED, ,, n, ., getString, (, ), ), ;, }, }, if, (, type, ==, Token, .]
[,, GOOG_SCOPE_ALIAS_REDEFINED, ,, n, ., getString, (, ), ), ;, }, }, if, (, type, ==, Token, ., RETURN, )]
[,, n, ., getString, (, ), ), ;, }, }, if, (, type, ==, Token, ., RETURN, ), {, report]
[), ;, }, }, if, (, type, ==, Token, ., RETURN, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_RETURN]
[., getString, (, ), ), ;, }, }, if, (, type, ==, Token, ., RETURN, ), {, report, (, t]
[), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (, type, ==, Token, ., THIS]
[==, Token, ., RETURN, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (, type]
[), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (, type, ==, Token, ., THIS]
[., RETURN, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (, type, ==, Token]
[;, }, else, if, (, type, ==, Token, ., THIS, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_REFERENCES_THIS, )]
[,, n, ,, GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (, type, ==, Token, ., THIS, ), {, report, (, t]
[,, GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (, type, ==, Token, ., THIS, ), {, report, (, t, ,, n]
[), ;, }, else, if, (, type, ==, Token, ., THIS, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_REFERENCES_THIS]
[), {, report, (, t, ,, n, ,, GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (, type, ==, Token, ., THROW]
[==, Token, ., THIS, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (, type]
[), {, report, (, t, ,, n, ,, GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (, type, ==, Token, ., THROW]
[., THIS, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (, type, ==, Token]
[;, }, else, if, (, type, ==, Token, ., THROW, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_THROW, )]
[,, n, ,, GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (, type, ==, Token, ., THROW, ), {, report, (, t]
[,, GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (, type, ==, Token, ., THROW, ), {, report, (, t, ,, n]
[), ;, }, else, if, (, type, ==, Token, ., THROW, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_THROW]
[), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_THROW, ), ;, }, }, if, (, t, ., getScopeDepth, (, )]
[==, Token, ., THROW, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_THROW, ), ;, }, }, if, (, t]
[), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_THROW, ), ;, }, }, if, (, t, ., getScopeDepth, (, )]
[., THROW, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_THROW, ), ;, }, }, if, (, t, ., getScopeDepth]
[;, }, }, if, (, t, ., getScopeDepth, (, ), >=, 2, ), {, if, (, aliasVar, !=, null, )]
[,, n, ,, GOOG_SCOPE_USES_THROW, ), ;, }, }, if, (, t, ., getScopeDepth, (, ), >=, 2, ), {, if]
[,, GOOG_SCOPE_USES_THROW, ), ;, }, }, if, (, t, ., getScopeDepth, (, ), >=, 2, ), {, if, (, aliasVar]
[), ;, }, }, if, (, t, ., getScopeDepth, (, ), >=, 2, ), {, if, (, aliasVar, !=, null]
[), {, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, .]
[>=, 2, ), {, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;]
[., getScopeDepth, (, ), >=, 2, ), {, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =, aliasVar, .]
[), {, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, .]
[), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add, (, new, AliasedNode, (, n, ,]
[!=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add, (, new, AliasedNode, (]
[), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add, (, new, AliasedNode, (, n, ,]
[;, aliasUsages, ., add, (, new, AliasedNode, (, n, ,, aliasedNode, ), ), ;, }, JSDocInfo, info, =, n, .]
[., getInitialValue, (, ), ;, aliasUsages, ., add, (, new, AliasedNode, (, n, ,, aliasedNode, ), ), ;, }, JSDocInfo]
[;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, for, (]
[., add, (, new, AliasedNode, (, n, ,, aliasedNode, ), ), ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (]
[), ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, for]
[,, aliasedNode, ), ), ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null]
[), ), ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {]
[;, if, (, info, !=, null, ), {, for, (, Node, node, :, info, ., getTypeNodes, (, ), ), {]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, for, (, Node, node, :, info, ., getTypeNodes]
[), {, for, (, Node, node, :, info, ., getTypeNodes, (, ), ), {, fixTypeNode, (, node, ), ;, }]
[!=, null, ), {, for, (, Node, node, :, info, ., getTypeNodes, (, ), ), {, fixTypeNode, (, node, )]
[), {, for, (, Node, node, :, info, ., getTypeNodes, (, ), ), {, fixTypeNode, (, node, ), ;, }]
[), {, fixTypeNode, (, node, ), ;, }, }, }, }, private, void, fixTypeNode, (, Node, typeNode, ), {, if]
[., getTypeNodes, (, ), ), {, fixTypeNode, (, node, ), ;, }, }, }, }, private, void, fixTypeNode, (, Node]
[;, }, }, }, }, private, void, fixTypeNode, (, Node, typeNode, ), {, if, (, typeNode, ., isString, (, )]
[), ;, }, }, }, }, private, void, fixTypeNode, (, Node, typeNode, ), {, if, (, typeNode, ., isString, (]
[), {, String, name, =, typeNode, ., getString, (, ), ;, int, endIndex, =, name, ., indexOf, (, '.', )]
[., isString, (, ), ), {, String, name, =, typeNode, ., getString, (, ), ;, int, endIndex, =, name, .]
[;, int, endIndex, =, name, ., indexOf, (, '.', ), ;, if, (, endIndex, ==, -, 1, ), {, endIndex]
[., getString, (, ), ;, int, endIndex, =, name, ., indexOf, (, '.', ), ;, if, (, endIndex, ==, -]
[;, if, (, endIndex, ==, -, 1, ), {, endIndex, =, name, ., length, (, ), ;, }, String, baseName]
[., indexOf, (, '.', ), ;, if, (, endIndex, ==, -, 1, ), {, endIndex, =, name, ., length, (]
[), ;, if, (, endIndex, ==, -, 1, ), {, endIndex, =, name, ., length, (, ), ;, }, String]
[), {, endIndex, =, name, ., length, (, ), ;, }, String, baseName, =, name, ., substring, (, 0, ,]
[==, -, 1, ), {, endIndex, =, name, ., length, (, ), ;, }, String, baseName, =, name, ., substring]
[), {, endIndex, =, name, ., length, (, ), ;, }, String, baseName, =, name, ., substring, (, 0, ,]
[), {, endIndex, =, name, ., length, (, ), ;, }, String, baseName, =, name, ., substring, (, 0, ,]
[=, name, ., length, (, ), ;, }, String, baseName, =, name, ., substring, (, 0, ,, endIndex, ), ;]
[;, }, String, baseName, =, name, ., substring, (, 0, ,, endIndex, ), ;, Var, aliasVar, =, aliases, ., get]
[., length, (, ), ;, }, String, baseName, =, name, ., substring, (, 0, ,, endIndex, ), ;, Var, aliasVar]
[;, Var, aliasVar, =, aliases, ., get, (, baseName, ), ;, if, (, aliasVar, !=, null, ), {, Node, aliasedNode]
[., substring, (, 0, ,, endIndex, ), ;, Var, aliasVar, =, aliases, ., get, (, baseName, ), ;, if, (]
[,, endIndex, ), ;, Var, aliasVar, =, aliases, ., get, (, baseName, ), ;, if, (, aliasVar, !=, null, )]
[), ;, Var, aliasVar, =, aliases, ., get, (, baseName, ), ;, if, (, aliasVar, !=, null, ), {, Node]
[;, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add]
[., get, (, baseName, ), ;, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (]
[), ;, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, .]
[), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add, (, new, AliasedTypeNode, (, typeNode, ,]
[!=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add, (, new, AliasedTypeNode, (]
[), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add, (, new, AliasedTypeNode, (, typeNode, ,]
[;, aliasUsages, ., add, (, new, AliasedTypeNode, (, typeNode, ,, aliasedNode, ,, baseName, ), ), ;, }, }, for, (]
[., getInitialValue, (, ), ;, aliasUsages, ., add, (, new, AliasedTypeNode, (, typeNode, ,, aliasedNode, ,, baseName, ), ), ;]
[;, }, }, for, (, Node, child, =, typeNode, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., add, (, new, AliasedTypeNode, (, typeNode, ,, aliasedNode, ,, baseName, ), ), ;, }, }, for, (, Node, child]
[), ;, }, }, for, (, Node, child, =, typeNode, ., getFirstChild, (, ), ;, child, !=, null, ;, child]
[,, aliasedNode, ,, baseName, ), ), ;, }, }, for, (, Node, child, =, typeNode, ., getFirstChild, (, ), ;]
[,, baseName, ), ), ;, }, }, for, (, Node, child, =, typeNode, ., getFirstChild, (, ), ;, child, !=]
[), ), ;, }, }, for, (, Node, child, =, typeNode, ., getFirstChild, (, ), ;, child, !=, null, ;]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, fixTypeNode, (, child, ), ;, }]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, fixTypeNode, (]
[;, child, =, child, ., getNext, (, ), ), {, fixTypeNode, (, child, ), ;, }, }, }, }]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, fixTypeNode, (, child, ), ;, }, }, }]
[;, child, =, child, ., getNext, (, ), ), {, fixTypeNode, (, child, ), ;, }, }, }, }]
[=, child, ., getNext, (, ), ), {, fixTypeNode, (, child, ), ;, }, }, }, }]
[), {, fixTypeNode, (, child, ), ;, }, }, }, }]
[., getNext, (, ), ), {, fixTypeNode, (, child, ), ;, }, }, }, }]
[;, }, }, }, }]
[), ;, }, }, }, }]
