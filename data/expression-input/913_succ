[=, compiler, ;, this, ., specializationPassFactories, =, specializationPassFactories, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., compiler, =, compiler, ;, this, ., specializationPassFactories, =, specializationPassFactories, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., specializationPassFactories, =, specializationPassFactories, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, specializationPassFactories, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, JSModuleGraph, moduleGraph, =]
[., specializationPassFactories, =, specializationPassFactories, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, JSModuleGraph]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, JSModuleGraph, moduleGraph, =, compiler, .]
[;, if, (, moduleGraph, ==, null, ), {, return, ;, }, JSModule, module, =, moduleGraph, ., getRootModule, (, ), ;]
[., getModuleGraph, (, ), ;, if, (, moduleGraph, ==, null, ), {, return, ;, }, JSModule, module, =, moduleGraph, .]
[), {, return, ;, }, JSModule, module, =, moduleGraph, ., getRootModule, (, ), ;, Node, fakeModuleRoot, =, copyModuleInputs, (, module]
[==, null, ), {, return, ;, }, JSModule, module, =, moduleGraph, ., getRootModule, (, ), ;, Node, fakeModuleRoot, =, copyModuleInputs]
[), {, return, ;, }, JSModule, module, =, moduleGraph, ., getRootModule, (, ), ;, Node, fakeModuleRoot, =, copyModuleInputs, (, module]
[;, Node, fakeModuleRoot, =, copyModuleInputs, (, module, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, .]
[., getRootModule, (, ), ;, Node, fakeModuleRoot, =, copyModuleInputs, (, module, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler]
[;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, fakeModuleRoot, ), ;, SimpleFunctionAliasAnalysis]
[), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, fakeModuleRoot, ), ;]
[;, defFinder, ., process, (, externs, ,, fakeModuleRoot, ), ;, SimpleFunctionAliasAnalysis, initialModuleFunctionAliasAnalysis, =, new, SimpleFunctionAliasAnalysis, (, ), ;, initialModuleFunctionAliasAnalysis, .]
[), ;, defFinder, ., process, (, externs, ,, fakeModuleRoot, ), ;, SimpleFunctionAliasAnalysis, initialModuleFunctionAliasAnalysis, =, new, SimpleFunctionAliasAnalysis, (, ), ;, initialModuleFunctionAliasAnalysis]
[;, SimpleFunctionAliasAnalysis, initialModuleFunctionAliasAnalysis, =, new, SimpleFunctionAliasAnalysis, (, ), ;, initialModuleFunctionAliasAnalysis, ., analyze, (, defFinder, ), ;, specializationState, =, new, SpecializationState]
[., process, (, externs, ,, fakeModuleRoot, ), ;, SimpleFunctionAliasAnalysis, initialModuleFunctionAliasAnalysis, =, new, SimpleFunctionAliasAnalysis, (, ), ;, initialModuleFunctionAliasAnalysis, ., analyze, (]
[,, fakeModuleRoot, ), ;, SimpleFunctionAliasAnalysis, initialModuleFunctionAliasAnalysis, =, new, SimpleFunctionAliasAnalysis, (, ), ;, initialModuleFunctionAliasAnalysis, ., analyze, (, defFinder, ), ;, specializationState]
[), ;, SimpleFunctionAliasAnalysis, initialModuleFunctionAliasAnalysis, =, new, SimpleFunctionAliasAnalysis, (, ), ;, initialModuleFunctionAliasAnalysis, ., analyze, (, defFinder, ), ;, specializationState, =, new]
[;, initialModuleFunctionAliasAnalysis, ., analyze, (, defFinder, ), ;, specializationState, =, new, SpecializationState, (, initialModuleFunctionAliasAnalysis, ), ;, do, {, specializationState, .]
[;, specializationState, =, new, SpecializationState, (, initialModuleFunctionAliasAnalysis, ), ;, do, {, specializationState, ., resetHasChanged, (, ), ;, for, (, SpecializationAwareCompilerPass]
[., analyze, (, defFinder, ), ;, specializationState, =, new, SpecializationState, (, initialModuleFunctionAliasAnalysis, ), ;, do, {, specializationState, ., resetHasChanged, (]
[), ;, specializationState, =, new, SpecializationState, (, initialModuleFunctionAliasAnalysis, ), ;, do, {, specializationState, ., resetHasChanged, (, ), ;, for, (]
[=, new, SpecializationState, (, initialModuleFunctionAliasAnalysis, ), ;, do, {, specializationState, ., resetHasChanged, (, ), ;, for, (, SpecializationAwareCompilerPass, pass, :]
[;, do, {, specializationState, ., resetHasChanged, (, ), ;, for, (, SpecializationAwareCompilerPass, pass, :, createSpecializingPasses, (, ), ), {, pass]
[), ;, do, {, specializationState, ., resetHasChanged, (, ), ;, for, (, SpecializationAwareCompilerPass, pass, :, createSpecializingPasses, (, ), ), {]
[;, for, (, SpecializationAwareCompilerPass, pass, :, createSpecializingPasses, (, ), ), {, pass, ., enableSpecialization, (, specializationState, ), ;, pass, .]
[., resetHasChanged, (, ), ;, for, (, SpecializationAwareCompilerPass, pass, :, createSpecializingPasses, (, ), ), {, pass, ., enableSpecialization, (, specializationState]
[), {, pass, ., enableSpecialization, (, specializationState, ), ;, pass, ., process, (, externs, ,, fakeModuleRoot, ), ;, }, }]
[;, pass, ., process, (, externs, ,, fakeModuleRoot, ), ;, }, }, while, (, specializationState, ., hasChanged, (, ), )]
[., enableSpecialization, (, specializationState, ), ;, pass, ., process, (, externs, ,, fakeModuleRoot, ), ;, }, }, while, (, specializationState]
[), ;, pass, ., process, (, externs, ,, fakeModuleRoot, ), ;, }, }, while, (, specializationState, ., hasChanged, (, )]
[;, }, }, while, (, specializationState, ., hasChanged, (, ), ), ;, addDummyVarDeclarationsToInitialModule, (, module, ), ;, replaceOriginalModuleInputsWithSpecialized, (, )]
[., process, (, externs, ,, fakeModuleRoot, ), ;, }, }, while, (, specializationState, ., hasChanged, (, ), ), ;, addDummyVarDeclarationsToInitialModule]
[,, fakeModuleRoot, ), ;, }, }, while, (, specializationState, ., hasChanged, (, ), ), ;, addDummyVarDeclarationsToInitialModule, (, module, ), ;]
[), ;, }, }, while, (, specializationState, ., hasChanged, (, ), ), ;, addDummyVarDeclarationsToInitialModule, (, module, ), ;, replaceOriginalModuleInputsWithSpecialized, (]
[), ;, addDummyVarDeclarationsToInitialModule, (, module, ), ;, replaceOriginalModuleInputsWithSpecialized, (, ), ;, addOriginalFunctionVersionsToDependentModules, (, module, ), ;, }, private, Collection, <]
[., hasChanged, (, ), ), ;, addDummyVarDeclarationsToInitialModule, (, module, ), ;, replaceOriginalModuleInputsWithSpecialized, (, ), ;, addOriginalFunctionVersionsToDependentModules, (, module, ), ;]
[;, replaceOriginalModuleInputsWithSpecialized, (, ), ;, addOriginalFunctionVersionsToDependentModules, (, module, ), ;, }, private, Collection, <, SpecializationAwareCompilerPass, >, createSpecializingPasses, (, ), {]
[), ;, replaceOriginalModuleInputsWithSpecialized, (, ), ;, addOriginalFunctionVersionsToDependentModules, (, module, ), ;, }, private, Collection, <, SpecializationAwareCompilerPass, >, createSpecializingPasses, (, )]
[;, addOriginalFunctionVersionsToDependentModules, (, module, ), ;, }, private, Collection, <, SpecializationAwareCompilerPass, >, createSpecializingPasses, (, ), {, Collection, <, SpecializationAwareCompilerPass, >]
[;, }, private, Collection, <, SpecializationAwareCompilerPass, >, createSpecializingPasses, (, ), {, Collection, <, SpecializationAwareCompilerPass, >, passes, =, Lists, ., newLinkedList]
[), ;, }, private, Collection, <, SpecializationAwareCompilerPass, >, createSpecializingPasses, (, ), {, Collection, <, SpecializationAwareCompilerPass, >, passes, =, Lists, .]
[;, for, (, PassFactory, passFactory, :, specializationPassFactories, ), {, CompilerPass, pass, =, passFactory, ., create, (, compiler, ), ;, Preconditions]
[., newLinkedList, (, ), ;, for, (, PassFactory, passFactory, :, specializationPassFactories, ), {, CompilerPass, pass, =, passFactory, ., create, (]
[), {, CompilerPass, pass, =, passFactory, ., create, (, compiler, ), ;, Preconditions, ., checkState, (, pass, instanceof, SpecializationAwareCompilerPass, )]
[;, Preconditions, ., checkState, (, pass, instanceof, SpecializationAwareCompilerPass, ), ;, passes, ., add, (, (, SpecializationAwareCompilerPass, ), pass, ), ;]
[., create, (, compiler, ), ;, Preconditions, ., checkState, (, pass, instanceof, SpecializationAwareCompilerPass, ), ;, passes, ., add, (, (]
[), ;, Preconditions, ., checkState, (, pass, instanceof, SpecializationAwareCompilerPass, ), ;, passes, ., add, (, (, SpecializationAwareCompilerPass, ), pass, )]
[;, passes, ., add, (, (, SpecializationAwareCompilerPass, ), pass, ), ;, }, return, passes, ;, }, private, Node, copyModuleInputs, (]
[., checkState, (, pass, instanceof, SpecializationAwareCompilerPass, ), ;, passes, ., add, (, (, SpecializationAwareCompilerPass, ), pass, ), ;, }, return]
[), ;, passes, ., add, (, (, SpecializationAwareCompilerPass, ), pass, ), ;, }, return, passes, ;, }, private, Node, copyModuleInputs]
[instanceof, SpecializationAwareCompilerPass, ), ;, passes, ., add, (, (, SpecializationAwareCompilerPass, ), pass, ), ;, }, return, passes, ;, }, private]
[;, }, return, passes, ;, }, private, Node, copyModuleInputs, (, JSModule, module, ), {, specializedInputRootsByOriginal, =, Maps, ., newLinkedHashMap, (]
[., add, (, (, SpecializationAwareCompilerPass, ), pass, ), ;, }, return, passes, ;, }, private, Node, copyModuleInputs, (, JSModule, module]
[), ;, }, return, passes, ;, }, private, Node, copyModuleInputs, (, JSModule, module, ), {, specializedInputRootsByOriginal, =, Maps, ., newLinkedHashMap]
[), ;, }, return, passes, ;, }, private, Node, copyModuleInputs, (, JSModule, module, ), {, specializedInputRootsByOriginal, =, Maps, ., newLinkedHashMap]
[;, }, private, Node, copyModuleInputs, (, JSModule, module, ), {, specializedInputRootsByOriginal, =, Maps, ., newLinkedHashMap, (, ), ;, functionInfoBySpecializedFunctionNode, =]
[=, Maps, ., newLinkedHashMap, (, ), ;, functionInfoBySpecializedFunctionNode, =, Maps, ., newLinkedHashMap, (, ), ;, Node, syntheticModuleJsRoot, =, IR, .]
[;, functionInfoBySpecializedFunctionNode, =, Maps, ., newLinkedHashMap, (, ), ;, Node, syntheticModuleJsRoot, =, IR, ., block, (, ), ;, syntheticModuleJsRoot, .]
[., newLinkedHashMap, (, ), ;, functionInfoBySpecializedFunctionNode, =, Maps, ., newLinkedHashMap, (, ), ;, Node, syntheticModuleJsRoot, =, IR, ., block, (]
[=, Maps, ., newLinkedHashMap, (, ), ;, Node, syntheticModuleJsRoot, =, IR, ., block, (, ), ;, syntheticModuleJsRoot, ., setIsSyntheticBlock, (]
[;, Node, syntheticModuleJsRoot, =, IR, ., block, (, ), ;, syntheticModuleJsRoot, ., setIsSyntheticBlock, (, true, ), ;, for, (, CompilerInput]
[., newLinkedHashMap, (, ), ;, Node, syntheticModuleJsRoot, =, IR, ., block, (, ), ;, syntheticModuleJsRoot, ., setIsSyntheticBlock, (, true, )]
[;, syntheticModuleJsRoot, ., setIsSyntheticBlock, (, true, ), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {]
[., block, (, ), ;, syntheticModuleJsRoot, ., setIsSyntheticBlock, (, true, ), ;, for, (, CompilerInput, input, :, module, ., getInputs]
[;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, Node, originalInputRoot, =, input, ., getAstRoot, (]
[., setIsSyntheticBlock, (, true, ), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, Node, originalInputRoot]
[), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, Node, originalInputRoot, =, input, ., getAstRoot]
[), {, Node, originalInputRoot, =, input, ., getAstRoot, (, compiler, ), ;, Node, copiedInputRoot, =, originalInputRoot, ., cloneTree, (, )]
[., getInputs, (, ), ), {, Node, originalInputRoot, =, input, ., getAstRoot, (, compiler, ), ;, Node, copiedInputRoot, =, originalInputRoot]
[;, Node, copiedInputRoot, =, originalInputRoot, ., cloneTree, (, ), ;, copiedInputRoot, ., copyInformationFromForTree, (, originalInputRoot, ), ;, specializedInputRootsByOriginal, ., put]
[., getAstRoot, (, compiler, ), ;, Node, copiedInputRoot, =, originalInputRoot, ., cloneTree, (, ), ;, copiedInputRoot, ., copyInformationFromForTree, (, originalInputRoot]
[), ;, Node, copiedInputRoot, =, originalInputRoot, ., cloneTree, (, ), ;, copiedInputRoot, ., copyInformationFromForTree, (, originalInputRoot, ), ;, specializedInputRootsByOriginal, .]
[;, copiedInputRoot, ., copyInformationFromForTree, (, originalInputRoot, ), ;, specializedInputRootsByOriginal, ., put, (, originalInputRoot, ,, copiedInputRoot, ), ;, matchTopLevelFunctions, (, originalInputRoot]
[., cloneTree, (, ), ;, copiedInputRoot, ., copyInformationFromForTree, (, originalInputRoot, ), ;, specializedInputRootsByOriginal, ., put, (, originalInputRoot, ,, copiedInputRoot, )]
[;, specializedInputRootsByOriginal, ., put, (, originalInputRoot, ,, copiedInputRoot, ), ;, matchTopLevelFunctions, (, originalInputRoot, ,, copiedInputRoot, ), ;, syntheticModuleJsRoot, ., addChildToBack]
[., copyInformationFromForTree, (, originalInputRoot, ), ;, specializedInputRootsByOriginal, ., put, (, originalInputRoot, ,, copiedInputRoot, ), ;, matchTopLevelFunctions, (, originalInputRoot, ,, copiedInputRoot]
[), ;, specializedInputRootsByOriginal, ., put, (, originalInputRoot, ,, copiedInputRoot, ), ;, matchTopLevelFunctions, (, originalInputRoot, ,, copiedInputRoot, ), ;, syntheticModuleJsRoot, .]
[;, matchTopLevelFunctions, (, originalInputRoot, ,, copiedInputRoot, ), ;, syntheticModuleJsRoot, ., addChildToBack, (, copiedInputRoot, ), ;, }, Node, syntheticExternsAndJsRoot, =, IR]
[., put, (, originalInputRoot, ,, copiedInputRoot, ), ;, matchTopLevelFunctions, (, originalInputRoot, ,, copiedInputRoot, ), ;, syntheticModuleJsRoot, ., addChildToBack, (, copiedInputRoot]
[,, copiedInputRoot, ), ;, matchTopLevelFunctions, (, originalInputRoot, ,, copiedInputRoot, ), ;, syntheticModuleJsRoot, ., addChildToBack, (, copiedInputRoot, ), ;, }, Node]
[), ;, matchTopLevelFunctions, (, originalInputRoot, ,, copiedInputRoot, ), ;, syntheticModuleJsRoot, ., addChildToBack, (, copiedInputRoot, ), ;, }, Node, syntheticExternsAndJsRoot, =]
[;, syntheticModuleJsRoot, ., addChildToBack, (, copiedInputRoot, ), ;, }, Node, syntheticExternsAndJsRoot, =, IR, ., block, (, ), ;, syntheticExternsAndJsRoot, .]
[,, copiedInputRoot, ), ;, syntheticModuleJsRoot, ., addChildToBack, (, copiedInputRoot, ), ;, }, Node, syntheticExternsAndJsRoot, =, IR, ., block, (, )]
[), ;, syntheticModuleJsRoot, ., addChildToBack, (, copiedInputRoot, ), ;, }, Node, syntheticExternsAndJsRoot, =, IR, ., block, (, ), ;, syntheticExternsAndJsRoot]
[;, }, Node, syntheticExternsAndJsRoot, =, IR, ., block, (, ), ;, syntheticExternsAndJsRoot, ., addChildToBack, (, syntheticModuleJsRoot, ), ;, return, syntheticModuleJsRoot]
[., addChildToBack, (, copiedInputRoot, ), ;, }, Node, syntheticExternsAndJsRoot, =, IR, ., block, (, ), ;, syntheticExternsAndJsRoot, ., addChildToBack, (]
[), ;, }, Node, syntheticExternsAndJsRoot, =, IR, ., block, (, ), ;, syntheticExternsAndJsRoot, ., addChildToBack, (, syntheticModuleJsRoot, ), ;, return]
[;, syntheticExternsAndJsRoot, ., addChildToBack, (, syntheticModuleJsRoot, ), ;, return, syntheticModuleJsRoot, ;, }, private, void, matchTopLevelFunctions, (, Node, original, ,, Node]
[., block, (, ), ;, syntheticExternsAndJsRoot, ., addChildToBack, (, syntheticModuleJsRoot, ), ;, return, syntheticModuleJsRoot, ;, }, private, void, matchTopLevelFunctions, (]
[;, return, syntheticModuleJsRoot, ;, }, private, void, matchTopLevelFunctions, (, Node, original, ,, Node, toBeSpecialized, ), {, new, NodeMatcher, (, )]
[., addChildToBack, (, syntheticModuleJsRoot, ), ;, return, syntheticModuleJsRoot, ;, }, private, void, matchTopLevelFunctions, (, Node, original, ,, Node, toBeSpecialized, )]
[), ;, return, syntheticModuleJsRoot, ;, }, private, void, matchTopLevelFunctions, (, Node, original, ,, Node, toBeSpecialized, ), {, new, NodeMatcher, (]
[;, }, private, void, matchTopLevelFunctions, (, Node, original, ,, Node, toBeSpecialized, ), {, new, NodeMatcher, (, ), {, @, Override]
[;, }, private, void, replaceOriginalModuleInputsWithSpecialized, (, ), {, for, (, Node, original, :, specializedInputRootsByOriginal, ., keySet, (, ), ), {]
[., match, (, original, ,, toBeSpecialized, ), ;, }, private, void, replaceOriginalModuleInputsWithSpecialized, (, ), {, for, (, Node, original, :]
[), {, OriginalFunctionInformation, functionInfo, =, new, OriginalFunctionInformation, (, original, ), ;, functionInfoBySpecializedFunctionNode, ., put, (, specialized, ,, functionInfo, ), ;]
[., isFunction, (, ), ), {, OriginalFunctionInformation, functionInfo, =, new, OriginalFunctionInformation, (, original, ), ;, functionInfoBySpecializedFunctionNode, ., put, (, specialized]
[;, functionInfoBySpecializedFunctionNode, ., put, (, specialized, ,, functionInfo, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, Node, n1]
[), ;, functionInfoBySpecializedFunctionNode, ., put, (, specialized, ,, functionInfo, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, Node]
[;, }, }, @, Override, public, boolean, shouldTraverse, (, Node, n1, ,, Node, n2, ), {, return, !, n1, .]
[., put, (, specialized, ,, functionInfo, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, Node, n1, ,, Node]
[,, functionInfo, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, Node, n1, ,, Node, n2, ), {, return]
[), ;, }, }, @, Override, public, boolean, shouldTraverse, (, Node, n1, ,, Node, n2, ), {, return, !, n1]
[;, }, }, ., match, (, original, ,, toBeSpecialized, ), ;, }, private, void, replaceOriginalModuleInputsWithSpecialized, (, ), {, for, (]
[;, }, }, ., match, (, original, ,, toBeSpecialized, ), ;, }, private, void, replaceOriginalModuleInputsWithSpecialized, (, ), {, for, (]
[., isFunction, (, ), ;, }, }, ., match, (, original, ,, toBeSpecialized, ), ;, }, private, void, replaceOriginalModuleInputsWithSpecialized, (]
[,, toBeSpecialized, ), ;, }, private, void, replaceOriginalModuleInputsWithSpecialized, (, ), {, for, (, Node, original, :, specializedInputRootsByOriginal, ., keySet, (]
[), ;, }, private, void, replaceOriginalModuleInputsWithSpecialized, (, ), {, for, (, Node, original, :, specializedInputRootsByOriginal, ., keySet, (, ), )]
[), {, Node, specialized, =, specializedInputRootsByOriginal, ., get, (, original, ), ;, original, ., removeChildren, (, ), ;, List, <]
[., keySet, (, ), ), {, Node, specialized, =, specializedInputRootsByOriginal, ., get, (, original, ), ;, original, ., removeChildren, (]
[;, original, ., removeChildren, (, ), ;, List, <, Node, >, specializedChildren, =, Lists, ., newLinkedList, (, ), ;, while]
[., get, (, original, ), ;, original, ., removeChildren, (, ), ;, List, <, Node, >, specializedChildren, =, Lists, .]
[), ;, original, ., removeChildren, (, ), ;, List, <, Node, >, specializedChildren, =, Lists, ., newLinkedList, (, ), ;]
[;, List, <, Node, >, specializedChildren, =, Lists, ., newLinkedList, (, ), ;, while, (, specialized, ., getFirstChild, (, )]
[., removeChildren, (, ), ;, List, <, Node, >, specializedChildren, =, Lists, ., newLinkedList, (, ), ;, while, (, specialized]
[;, while, (, specialized, ., getFirstChild, (, ), !=, null, ), {, original, ., addChildToBack, (, specialized, ., removeFirstChild, (]
[., newLinkedList, (, ), ;, while, (, specialized, ., getFirstChild, (, ), !=, null, ), {, original, ., addChildToBack, (]
[), {, original, ., addChildToBack, (, specialized, ., removeFirstChild, (, ), ), ;, }, }, }, private, void, addDummyVarDeclarationsToInitialModule, (]
[!=, null, ), {, original, ., addChildToBack, (, specialized, ., removeFirstChild, (, ), ), ;, }, }, }, private, void]
[., getFirstChild, (, ), !=, null, ), {, original, ., addChildToBack, (, specialized, ., removeFirstChild, (, ), ), ;, }]
[), {, original, ., addChildToBack, (, specialized, ., removeFirstChild, (, ), ), ;, }, }, }, private, void, addDummyVarDeclarationsToInitialModule, (]
[;, }, }, }, private, void, addDummyVarDeclarationsToInitialModule, (, JSModule, module, ), {, for, (, Node, modifiedFunction, :, functionInfoBySpecializedFunctionNode, ., keySet]
[., addChildToBack, (, specialized, ., removeFirstChild, (, ), ), ;, }, }, }, private, void, addDummyVarDeclarationsToInitialModule, (, JSModule, module, )]
[), ;, }, }, }, private, void, addDummyVarDeclarationsToInitialModule, (, JSModule, module, ), {, for, (, Node, modifiedFunction, :, functionInfoBySpecializedFunctionNode, .]
[., removeFirstChild, (, ), ), ;, }, }, }, private, void, addDummyVarDeclarationsToInitialModule, (, JSModule, module, ), {, for, (, Node]
[), {, if, (, specializationState, ., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode]
[., keySet, (, ), ), {, if, (, specializationState, ., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ), {]
[), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (, originalInfo, ., name, !=, null, &&]
[., contains, (, modifiedFunction, ), ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (, originalInfo]
[., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, )]
[), ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (, originalInfo, ., name, !=, null]
[;, if, (, originalInfo, ., name, !=, null, &&, originalInfo, ., originalWasDeclaration, (, ), ), {, Node, block, =, specializationState]
[., get, (, modifiedFunction, ), ;, if, (, originalInfo, ., name, !=, null, &&, originalInfo, ., originalWasDeclaration, (, ), )]
[), ;, if, (, originalInfo, ., name, !=, null, &&, originalInfo, ., originalWasDeclaration, (, ), ), {, Node, block, =]
[), {, Node, block, =, specializationState, ., removedFunctionToBlock, ., get, (, modifiedFunction, ), ;, if, (, block, !=, null, )]
[&&, originalInfo, ., originalWasDeclaration, (, ), ), {, Node, block, =, specializationState, ., removedFunctionToBlock, ., get, (, modifiedFunction, ), ;]
[!=, null, &&, originalInfo, ., originalWasDeclaration, (, ), ), {, Node, block, =, specializationState, ., removedFunctionToBlock, ., get, (, modifiedFunction]
[., name, !=, null, &&, originalInfo, ., originalWasDeclaration, (, ), ), {, Node, block, =, specializationState, ., removedFunctionToBlock, ., get]
[&&, originalInfo, ., originalWasDeclaration, (, ), ), {, Node, block, =, specializationState, ., removedFunctionToBlock, ., get, (, modifiedFunction, ), ;]
[), {, Node, block, =, specializationState, ., removedFunctionToBlock, ., get, (, modifiedFunction, ), ;, if, (, block, !=, null, )]
[., originalWasDeclaration, (, ), ), {, Node, block, =, specializationState, ., removedFunctionToBlock, ., get, (, modifiedFunction, ), ;, if, (]
[;, if, (, block, !=, null, ), {, Node, originalRoot, =, specializedInputRootsByOriginal, ., get, (, block, ), ;, block, .]
[., get, (, modifiedFunction, ), ;, if, (, block, !=, null, ), {, Node, originalRoot, =, specializedInputRootsByOriginal, ., get, (]
[., removedFunctionToBlock, ., get, (, modifiedFunction, ), ;, if, (, block, !=, null, ), {, Node, originalRoot, =, specializedInputRootsByOriginal, .]
[), ;, if, (, block, !=, null, ), {, Node, originalRoot, =, specializedInputRootsByOriginal, ., get, (, block, ), ;, block]
[), {, Node, originalRoot, =, specializedInputRootsByOriginal, ., get, (, block, ), ;, block, ., addChildrenToBack, (, originalInfo, ., generateDummyDeclaration, (]
[!=, null, ), {, Node, originalRoot, =, specializedInputRootsByOriginal, ., get, (, block, ), ;, block, ., addChildrenToBack, (, originalInfo, .]
[), {, Node, originalRoot, =, specializedInputRootsByOriginal, ., get, (, block, ), ;, block, ., addChildrenToBack, (, originalInfo, ., generateDummyDeclaration, (]
[;, block, ., addChildrenToBack, (, originalInfo, ., generateDummyDeclaration, (, ), ), ;, }, }, }, }, }, private, void, addOriginalFunctionVersionsToDependentModules]
[., get, (, block, ), ;, block, ., addChildrenToBack, (, originalInfo, ., generateDummyDeclaration, (, ), ), ;, }, }, }]
[), ;, block, ., addChildrenToBack, (, originalInfo, ., generateDummyDeclaration, (, ), ), ;, }, }, }, }, }, private, void]
[;, }, }, }, }, }, private, void, addOriginalFunctionVersionsToDependentModules, (, JSModule, module, ), {, for, (, JSModule, directDependent, :, getDirectDependents]
[., addChildrenToBack, (, originalInfo, ., generateDummyDeclaration, (, ), ), ;, }, }, }, }, }, private, void, addOriginalFunctionVersionsToDependentModules, (, JSModule]
[), ;, }, }, }, }, }, private, void, addOriginalFunctionVersionsToDependentModules, (, JSModule, module, ), {, for, (, JSModule, directDependent, :]
[., generateDummyDeclaration, (, ), ), ;, }, }, }, }, }, private, void, addOriginalFunctionVersionsToDependentModules, (, JSModule, module, ), {, for]
[), {, CompilerInput, firstInput, =, directDependent, ., getInputs, (, ), ., get, (, 0, ), ;, Node, firstInputRootNode, =, firstInput]
[), ), {, CompilerInput, firstInput, =, directDependent, ., getInputs, (, ), ., get, (, 0, ), ;, Node, firstInputRootNode, =]
[;, Node, firstInputRootNode, =, firstInput, ., getAstRoot, (, compiler, ), ;, List, <, Node, >, possiblyModifiedFunctions, =, Lists, ., newArrayList]
[., get, (, 0, ), ;, Node, firstInputRootNode, =, firstInput, ., getAstRoot, (, compiler, ), ;, List, <, Node, >]
[., getInputs, (, ), ., get, (, 0, ), ;, Node, firstInputRootNode, =, firstInput, ., getAstRoot, (, compiler, ), ;]
[), ;, Node, firstInputRootNode, =, firstInput, ., getAstRoot, (, compiler, ), ;, List, <, Node, >, possiblyModifiedFunctions, =, Lists, .]
[;, List, <, Node, >, possiblyModifiedFunctions, =, Lists, ., newArrayList, (, functionInfoBySpecializedFunctionNode, ., keySet, (, ), ), ;, Collections, .]
[., getAstRoot, (, compiler, ), ;, List, <, Node, >, possiblyModifiedFunctions, =, Lists, ., newArrayList, (, functionInfoBySpecializedFunctionNode, ., keySet, (]
[), ;, List, <, Node, >, possiblyModifiedFunctions, =, Lists, ., newArrayList, (, functionInfoBySpecializedFunctionNode, ., keySet, (, ), ), ;, Collections]
[;, Collections, ., reverse, (, possiblyModifiedFunctions, ), ;, for, (, Node, modifiedFunction, :, possiblyModifiedFunctions, ), {, boolean, declarationWasSpecialized, =, specializationState]
[., newArrayList, (, functionInfoBySpecializedFunctionNode, ., keySet, (, ), ), ;, Collections, ., reverse, (, possiblyModifiedFunctions, ), ;, for, (, Node]
[), ;, Collections, ., reverse, (, possiblyModifiedFunctions, ), ;, for, (, Node, modifiedFunction, :, possiblyModifiedFunctions, ), {, boolean, declarationWasSpecialized, =]
[., keySet, (, ), ), ;, Collections, ., reverse, (, possiblyModifiedFunctions, ), ;, for, (, Node, modifiedFunction, :, possiblyModifiedFunctions, )]
[;, for, (, Node, modifiedFunction, :, possiblyModifiedFunctions, ), {, boolean, declarationWasSpecialized, =, specializationState, ., getSpecializedFunctions, (, ), ., contains, (]
[., reverse, (, possiblyModifiedFunctions, ), ;, for, (, Node, modifiedFunction, :, possiblyModifiedFunctions, ), {, boolean, declarationWasSpecialized, =, specializationState, ., getSpecializedFunctions]
[), ;, for, (, Node, modifiedFunction, :, possiblyModifiedFunctions, ), {, boolean, declarationWasSpecialized, =, specializationState, ., getSpecializedFunctions, (, ), ., contains]
[), {, boolean, declarationWasSpecialized, =, specializationState, ., getSpecializedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, boolean, declarationWasRemoved, =, specializationState]
[;, boolean, declarationWasRemoved, =, specializationState, ., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, if, (, declarationWasSpecialized, ||, declarationWasRemoved]
[., contains, (, modifiedFunction, ), ;, boolean, declarationWasRemoved, =, specializationState, ., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ;]
[., getSpecializedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, boolean, declarationWasRemoved, =, specializationState, ., getRemovedFunctions, (, ), ., contains]
[), ;, boolean, declarationWasRemoved, =, specializationState, ., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, if, (, declarationWasSpecialized, ||]
[;, if, (, declarationWasSpecialized, ||, declarationWasRemoved, ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (]
[., contains, (, modifiedFunction, ), ;, if, (, declarationWasSpecialized, ||, declarationWasRemoved, ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (]
[., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, ), ;, if, (, declarationWasSpecialized, ||, declarationWasRemoved, ), {, OriginalFunctionInformation, originalInfo, =]
[), ;, if, (, declarationWasSpecialized, ||, declarationWasRemoved, ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if]
[), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (, originalInfo, ., name, !=, null, )]
[||, declarationWasRemoved, ), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (, originalInfo, ., name, !=]
[), {, OriginalFunctionInformation, originalInfo, =, functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, ), ;, if, (, originalInfo, ., name, !=, null, )]
[;, if, (, originalInfo, ., name, !=, null, ), {, Node, newDefinition, =, originalInfo, ., generateFixupDefinition, (, ), ;, firstInputRootNode]
[., get, (, modifiedFunction, ), ;, if, (, originalInfo, ., name, !=, null, ), {, Node, newDefinition, =, originalInfo, .]
[), ;, if, (, originalInfo, ., name, !=, null, ), {, Node, newDefinition, =, originalInfo, ., generateFixupDefinition, (, ), ;]
[), {, Node, newDefinition, =, originalInfo, ., generateFixupDefinition, (, ), ;, firstInputRootNode, ., addChildrenToFront, (, newDefinition, ), ;, }, }]
[!=, null, ), {, Node, newDefinition, =, originalInfo, ., generateFixupDefinition, (, ), ;, firstInputRootNode, ., addChildrenToFront, (, newDefinition, ), ;]
[., name, !=, null, ), {, Node, newDefinition, =, originalInfo, ., generateFixupDefinition, (, ), ;, firstInputRootNode, ., addChildrenToFront, (, newDefinition]
[), {, Node, newDefinition, =, originalInfo, ., generateFixupDefinition, (, ), ;, firstInputRootNode, ., addChildrenToFront, (, newDefinition, ), ;, }, }]
[;, firstInputRootNode, ., addChildrenToFront, (, newDefinition, ), ;, }, }, }, }, }, public, Collection, <, JSModule, >, getDirectDependents, (]
[., generateFixupDefinition, (, ), ;, firstInputRootNode, ., addChildrenToFront, (, newDefinition, ), ;, }, }, }, }, }, public, Collection, <]
[;, }, }, }, }, }, public, Collection, <, JSModule, >, getDirectDependents, (, JSModule, module, ), {, Set, <, JSModule]
[., addChildrenToFront, (, newDefinition, ), ;, }, }, }, }, }, public, Collection, <, JSModule, >, getDirectDependents, (, JSModule, module]
[), ;, }, }, }, }, }, public, Collection, <, JSModule, >, getDirectDependents, (, JSModule, module, ), {, Set, <]
[;, for, (, JSModule, possibleDependent, :, compiler, ., getModuleGraph, (, ), ., getAllModules, (, ), ), {, if, (, possibleDependent]
[., newHashSet, (, ), ;, for, (, JSModule, possibleDependent, :, compiler, ., getModuleGraph, (, ), ., getAllModules, (, ), )]
[), {, if, (, possibleDependent, ., getDependencies, (, ), ., contains, (, module, ), ), {, directDependents, ., add, (]
[., getAllModules, (, ), ), {, if, (, possibleDependent, ., getDependencies, (, ), ., contains, (, module, ), ), {]
[., getModuleGraph, (, ), ., getAllModules, (, ), ), {, if, (, possibleDependent, ., getDependencies, (, ), ., contains, (]
[), {, directDependents, ., add, (, possibleDependent, ), ;, }, }, return, directDependents, ;, }, private, abstract, static, class, NodeMatcher]
[., contains, (, module, ), ), {, directDependents, ., add, (, possibleDependent, ), ;, }, }, return, directDependents, ;, }]
[., getDependencies, (, ), ., contains, (, module, ), ), {, directDependents, ., add, (, possibleDependent, ), ;, }, }]
[), ), {, directDependents, ., add, (, possibleDependent, ), ;, }, }, return, directDependents, ;, }, private, abstract, static, class]
[;, }, }, return, directDependents, ;, }, private, abstract, static, class, NodeMatcher, {, public, void, match, (, Node, ast1, ,]
[., add, (, possibleDependent, ), ;, }, }, return, directDependents, ;, }, private, abstract, static, class, NodeMatcher, {, public, void]
[), ;, }, }, return, directDependents, ;, }, private, abstract, static, class, NodeMatcher, {, public, void, match, (, Node, ast1]
[;, }, private, abstract, static, class, NodeMatcher, {, public, void, match, (, Node, ast1, ,, Node, ast2, ), {, reportMatch]
[;, if, (, shouldTraverse, (, ast1, ,, ast2, ), ), {, Node, childOf1, =, ast1, ., getFirstChild, (, ), ;]
[,, ast2, ), ;, if, (, shouldTraverse, (, ast1, ,, ast2, ), ), {, Node, childOf1, =, ast1, ., getFirstChild]
[), ;, if, (, shouldTraverse, (, ast1, ,, ast2, ), ), {, Node, childOf1, =, ast1, ., getFirstChild, (, )]
[), {, Node, childOf1, =, ast1, ., getFirstChild, (, ), ;, Node, childOf2, =, ast2, ., getFirstChild, (, ), ;]
[,, ast2, ), ), {, Node, childOf1, =, ast1, ., getFirstChild, (, ), ;, Node, childOf2, =, ast2, ., getFirstChild]
[), ), {, Node, childOf1, =, ast1, ., getFirstChild, (, ), ;, Node, childOf2, =, ast2, ., getFirstChild, (, )]
[;, Node, childOf2, =, ast2, ., getFirstChild, (, ), ;, while, (, childOf1, !=, null, ), {, match, (, childOf1]
[., getFirstChild, (, ), ;, Node, childOf2, =, ast2, ., getFirstChild, (, ), ;, while, (, childOf1, !=, null, )]
[;, while, (, childOf1, !=, null, ), {, match, (, childOf1, ,, childOf2, ), ;, childOf1, =, childOf1, ., getNext]
[., getFirstChild, (, ), ;, while, (, childOf1, !=, null, ), {, match, (, childOf1, ,, childOf2, ), ;, childOf1]
[), {, match, (, childOf1, ,, childOf2, ), ;, childOf1, =, childOf1, ., getNext, (, ), ;, childOf2, =, childOf2]
[!=, null, ), {, match, (, childOf1, ,, childOf2, ), ;, childOf1, =, childOf1, ., getNext, (, ), ;, childOf2]
[), {, match, (, childOf1, ,, childOf2, ), ;, childOf1, =, childOf1, ., getNext, (, ), ;, childOf2, =, childOf2]
[;, childOf1, =, childOf1, ., getNext, (, ), ;, childOf2, =, childOf2, ., getNext, (, ), ;, }, }, }]
[,, childOf2, ), ;, childOf1, =, childOf1, ., getNext, (, ), ;, childOf2, =, childOf2, ., getNext, (, ), ;]
[), ;, childOf1, =, childOf1, ., getNext, (, ), ;, childOf2, =, childOf2, ., getNext, (, ), ;, }, }]
[=, childOf1, ., getNext, (, ), ;, childOf2, =, childOf2, ., getNext, (, ), ;, }, }, }, public, abstract]
[;, childOf2, =, childOf2, ., getNext, (, ), ;, }, }, }, public, abstract, void, reportMatch, (, Node, n1, ,]
[., getNext, (, ), ;, childOf2, =, childOf2, ., getNext, (, ), ;, }, }, }, public, abstract, void, reportMatch]
[=, childOf2, ., getNext, (, ), ;, }, }, }, public, abstract, void, reportMatch, (, Node, n1, ,, Node, n2]
[;, }, }, }, public, abstract, void, reportMatch, (, Node, n1, ,, Node, n2, ), ;, public, boolean, shouldTraverse, (]
[., getNext, (, ), ;, }, }, }, public, abstract, void, reportMatch, (, Node, n1, ,, Node, n2, ), ;]
[;, }, }, private, class, OriginalFunctionInformation, {, private, String, name, ;, private, boolean, isAssignFunction, ;, private, boolean, assignHasVar, ;, private]
[=, NodeUtil, ., getFunctionName, (, originalFunction, ), ;, originalFunctionCopy, =, originalFunction, ., cloneTree, (, ), ;, originalFunctionCopy, ., copyInformationFromForTree, (]
[;, originalFunctionCopy, =, originalFunction, ., cloneTree, (, ), ;, originalFunctionCopy, ., copyInformationFromForTree, (, originalFunction, ), ;, Node, originalParent, =, originalFunction]
[., getFunctionName, (, originalFunction, ), ;, originalFunctionCopy, =, originalFunction, ., cloneTree, (, ), ;, originalFunctionCopy, ., copyInformationFromForTree, (, originalFunction, )]
[), ;, originalFunctionCopy, =, originalFunction, ., cloneTree, (, ), ;, originalFunctionCopy, ., copyInformationFromForTree, (, originalFunction, ), ;, Node, originalParent, =]
[=, originalFunction, ., cloneTree, (, ), ;, originalFunctionCopy, ., copyInformationFromForTree, (, originalFunction, ), ;, Node, originalParent, =, originalFunction, ., getParent]
[;, originalFunctionCopy, ., copyInformationFromForTree, (, originalFunction, ), ;, Node, originalParent, =, originalFunction, ., getParent, (, ), ;, isAssignFunction, =, originalParent]
[., cloneTree, (, ), ;, originalFunctionCopy, ., copyInformationFromForTree, (, originalFunction, ), ;, Node, originalParent, =, originalFunction, ., getParent, (, )]
[;, Node, originalParent, =, originalFunction, ., getParent, (, ), ;, isAssignFunction, =, originalParent, ., isAssign, (, ), ||, originalParent, .]
[., copyInformationFromForTree, (, originalFunction, ), ;, Node, originalParent, =, originalFunction, ., getParent, (, ), ;, isAssignFunction, =, originalParent, ., isAssign]
[), ;, Node, originalParent, =, originalFunction, ., getParent, (, ), ;, isAssignFunction, =, originalParent, ., isAssign, (, ), ||, originalParent]
[;, isAssignFunction, =, originalParent, ., isAssign, (, ), ||, originalParent, ., isName, (, ), ;, assignHasVar, =, isAssignFunction, &&, originalParent]
[., getParent, (, ), ;, isAssignFunction, =, originalParent, ., isAssign, (, ), ||, originalParent, ., isName, (, ), ;, assignHasVar]
[=, originalParent, ., isAssign, (, ), ||, originalParent, ., isName, (, ), ;, assignHasVar, =, isAssignFunction, &&, originalParent, ., getParent]
[;, assignHasVar, =, isAssignFunction, &&, originalParent, ., getParent, (, ), ., isVar, (, ), ;, }, private, Node, copiedOriginalFunction, (]
[||, originalParent, ., isName, (, ), ;, assignHasVar, =, isAssignFunction, &&, originalParent, ., getParent, (, ), ., isVar, (, )]
[., isAssign, (, ), ||, originalParent, ., isName, (, ), ;, assignHasVar, =, isAssignFunction, &&, originalParent, ., getParent, (, )]
[;, assignHasVar, =, isAssignFunction, &&, originalParent, ., getParent, (, ), ., isVar, (, ), ;, }, private, Node, copiedOriginalFunction, (]
[., isName, (, ), ;, assignHasVar, =, isAssignFunction, &&, originalParent, ., getParent, (, ), ., isVar, (, ), ;, }]
[=, isAssignFunction, &&, originalParent, ., getParent, (, ), ., isVar, (, ), ;, }, private, Node, copiedOriginalFunction, (, ), {]
[;, }, private, Node, copiedOriginalFunction, (, ), {, Node, copy, =, originalFunctionCopy, ., cloneTree, (, ), ;, copy, ., copyInformationFromForTree]
[&&, originalParent, ., getParent, (, ), ., isVar, (, ), ;, }, private, Node, copiedOriginalFunction, (, ), {, Node, copy]
[;, }, private, Node, copiedOriginalFunction, (, ), {, Node, copy, =, originalFunctionCopy, ., cloneTree, (, ), ;, copy, ., copyInformationFromForTree]
[., isVar, (, ), ;, }, private, Node, copiedOriginalFunction, (, ), {, Node, copy, =, originalFunctionCopy, ., cloneTree, (, )]
[., getParent, (, ), ., isVar, (, ), ;, }, private, Node, copiedOriginalFunction, (, ), {, Node, copy, =, originalFunctionCopy]
[;, copy, ., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return, copy, ;, }, private, boolean, originalWasDeclaration, (, ), {, return, (]
[., cloneTree, (, ), ;, copy, ., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return, copy, ;, }, private, boolean, originalWasDeclaration, (]
[;, return, copy, ;, }, private, boolean, originalWasDeclaration, (, ), {, return, (, !, isAssignFunction, ), ||, (, assignHasVar, )]
[., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return, copy, ;, }, private, boolean, originalWasDeclaration, (, ), {, return, (, !, isAssignFunction]
[), ;, return, copy, ;, }, private, boolean, originalWasDeclaration, (, ), {, return, (, !, isAssignFunction, ), ||, (, assignHasVar]
[;, }, private, boolean, originalWasDeclaration, (, ), {, return, (, !, isAssignFunction, ), ||, (, assignHasVar, ), ;, }, private]
[;, }, private, Node, generateFixupDefinition, (, ), {, Node, functionCopy, =, copiedOriginalFunction, (, ), ;, Node, nameNode, ;, if, (]
[||, (, assignHasVar, ), ;, }, private, Node, generateFixupDefinition, (, ), {, Node, functionCopy, =, copiedOriginalFunction, (, ), ;, Node]
[), ||, (, assignHasVar, ), ;, }, private, Node, generateFixupDefinition, (, ), {, Node, functionCopy, =, copiedOriginalFunction, (, ), ;]
[), ||, (, assignHasVar, ), ;, }, private, Node, generateFixupDefinition, (, ), {, Node, functionCopy, =, copiedOriginalFunction, (, ), ;]
[;, }, private, Node, generateFixupDefinition, (, ), {, Node, functionCopy, =, copiedOriginalFunction, (, ), ;, Node, nameNode, ;, if, (]
[), ;, }, private, Node, generateFixupDefinition, (, ), {, Node, functionCopy, =, copiedOriginalFunction, (, ), ;, Node, nameNode, ;, if]
[;, Node, nameNode, ;, if, (, isAssignFunction, ), {, nameNode, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, )]
[), {, nameNode, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,, functionCopy, ,, name, )]
[=, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,, functionCopy, ,, name, ), ;, }, else]
[;, }, else, {, nameNode, =, functionCopy, ., getFirstChild, (, ), ;, functionCopy, ., replaceChild, (, nameNode, ,, NodeUtil, .]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,, functionCopy, ,, name, ), ;, }, else, {, nameNode]
[,, name, ,, functionCopy, ,, name, ), ;, }, else, {, nameNode, =, functionCopy, ., getFirstChild, (, ), ;, functionCopy]
[., getCodingConvention, (, ), ,, name, ,, functionCopy, ,, name, ), ;, }, else, {, nameNode, =, functionCopy, ., getFirstChild]
[,, functionCopy, ,, name, ), ;, }, else, {, nameNode, =, functionCopy, ., getFirstChild, (, ), ;, functionCopy, ., replaceChild]
[,, name, ), ;, }, else, {, nameNode, =, functionCopy, ., getFirstChild, (, ), ;, functionCopy, ., replaceChild, (, nameNode]
[), ;, }, else, {, nameNode, =, functionCopy, ., getFirstChild, (, ), ;, functionCopy, ., replaceChild, (, nameNode, ,, NodeUtil]
[=, functionCopy, ., getFirstChild, (, ), ;, functionCopy, ., replaceChild, (, nameNode, ,, NodeUtil, ., newName, (, compiler, ., getCodingConvention]
[;, functionCopy, ., replaceChild, (, nameNode, ,, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, "", ,, nameNode]
[., getFirstChild, (, ), ;, functionCopy, ., replaceChild, (, nameNode, ,, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, )]
[;, }, Node, assignment, =, IR, ., assign, (, nameNode, ,, functionCopy, ), ;, assignment, ., copyInformationFrom, (, functionCopy, )]
[., replaceChild, (, nameNode, ,, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, "", ,, nameNode, ), )]
[,, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, "", ,, nameNode, ), ), ;, }, Node, assignment]
[), ;, }, Node, assignment, =, IR, ., assign, (, nameNode, ,, functionCopy, ), ;, assignment, ., copyInformationFrom, (, functionCopy]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, "", ,, nameNode, ), ), ;, }, Node, assignment, =, IR]
[,, "", ,, nameNode, ), ), ;, }, Node, assignment, =, IR, ., assign, (, nameNode, ,, functionCopy, ), ;]
[., getCodingConvention, (, ), ,, "", ,, nameNode, ), ), ;, }, Node, assignment, =, IR, ., assign, (, nameNode]
[,, nameNode, ), ), ;, }, Node, assignment, =, IR, ., assign, (, nameNode, ,, functionCopy, ), ;, assignment, .]
[), ), ;, }, Node, assignment, =, IR, ., assign, (, nameNode, ,, functionCopy, ), ;, assignment, ., copyInformationFrom, (]
[;, assignment, ., copyInformationFrom, (, functionCopy, ), ;, return, NodeUtil, ., newExpr, (, assignment, ), ;, }, private, Node, generateDummyDeclaration]
[., assign, (, nameNode, ,, functionCopy, ), ;, assignment, ., copyInformationFrom, (, functionCopy, ), ;, return, NodeUtil, ., newExpr, (]
[,, functionCopy, ), ;, assignment, ., copyInformationFrom, (, functionCopy, ), ;, return, NodeUtil, ., newExpr, (, assignment, ), ;, }]
[), ;, assignment, ., copyInformationFrom, (, functionCopy, ), ;, return, NodeUtil, ., newExpr, (, assignment, ), ;, }, private, Node]
[;, return, NodeUtil, ., newExpr, (, assignment, ), ;, }, private, Node, generateDummyDeclaration, (, ), {, Node, declaration, =, NodeUtil]
[., copyInformationFrom, (, functionCopy, ), ;, return, NodeUtil, ., newExpr, (, assignment, ), ;, }, private, Node, generateDummyDeclaration, (, )]
[), ;, return, NodeUtil, ., newExpr, (, assignment, ), ;, }, private, Node, generateDummyDeclaration, (, ), {, Node, declaration, =]
[;, }, private, Node, generateDummyDeclaration, (, ), {, Node, declaration, =, NodeUtil, ., newVarNode, (, name, ,, null, ), ;]
[., newExpr, (, assignment, ), ;, }, private, Node, generateDummyDeclaration, (, ), {, Node, declaration, =, NodeUtil, ., newVarNode, (]
[), ;, }, private, Node, generateDummyDeclaration, (, ), {, Node, declaration, =, NodeUtil, ., newVarNode, (, name, ,, null, )]
[;, declaration, ., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return, declaration, ;, }, }, public, static, class, SpecializationState, {, private, Set]
[., newVarNode, (, name, ,, null, ), ;, declaration, ., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return, declaration, ;, }, }]
[,, null, ), ;, declaration, ., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return, declaration, ;, }, }, public, static, class, SpecializationState]
[), ;, declaration, ., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return, declaration, ;, }, }, public, static, class, SpecializationState, {, private]
[;, return, declaration, ;, }, }, public, static, class, SpecializationState, {, private, Set, <, Node, >, specializedFunctions, ;, private, Set]
[., copyInformationFromForTree, (, originalFunctionCopy, ), ;, return, declaration, ;, }, }, public, static, class, SpecializationState, {, private, Set, <, Node]
[), ;, return, declaration, ;, }, }, public, static, class, SpecializationState, {, private, Set, <, Node, >, specializedFunctions, ;, private]
[;, }, }, public, static, class, SpecializationState, {, private, Set, <, Node, >, specializedFunctions, ;, private, Set, <, Node, >]
[;, public, SpecializationState, (, SimpleFunctionAliasAnalysis, initialModuleAliasAnalysis, ), {, this, ., initialModuleAliasAnalysis, =, initialModuleAliasAnalysis, ;, specializedFunctions, =, Sets, ., newLinkedHashSet, (]
[=, initialModuleAliasAnalysis, ;, specializedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctionToBlock]
[., initialModuleAliasAnalysis, =, initialModuleAliasAnalysis, ;, specializedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctions, =, Sets, ., newLinkedHashSet, (, )]
[;, specializedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctionToBlock, =, Maps]
[=, Sets, ., newLinkedHashSet, (, ), ;, removedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctionToBlock, =, Maps, ., newLinkedHashMap]
[;, removedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctionToBlock, =, Maps, ., newLinkedHashMap, (, ), ;, }, private, boolean]
[., newLinkedHashSet, (, ), ;, removedFunctions, =, Sets, ., newLinkedHashSet, (, ), ;, removedFunctionToBlock, =, Maps, ., newLinkedHashMap, (, )]
[=, Sets, ., newLinkedHashSet, (, ), ;, removedFunctionToBlock, =, Maps, ., newLinkedHashMap, (, ), ;, }, private, boolean, hasChanged, (]
[;, removedFunctionToBlock, =, Maps, ., newLinkedHashMap, (, ), ;, }, private, boolean, hasChanged, (, ), {, return, hasChanged, ;, }]
[., newLinkedHashSet, (, ), ;, removedFunctionToBlock, =, Maps, ., newLinkedHashMap, (, ), ;, }, private, boolean, hasChanged, (, ), {]
[=, Maps, ., newLinkedHashMap, (, ), ;, }, private, boolean, hasChanged, (, ), {, return, hasChanged, ;, }, private, void]
[;, }, private, boolean, hasChanged, (, ), {, return, hasChanged, ;, }, private, void, resetHasChanged, (, ), {, hasChanged, =]
[., newLinkedHashMap, (, ), ;, }, private, boolean, hasChanged, (, ), {, return, hasChanged, ;, }, private, void, resetHasChanged, (]
[;, }, private, void, resetHasChanged, (, ), {, hasChanged, =, false, ;, }, public, Set, <, Node, >, getSpecializedFunctions, (]
[=, false, ;, }, public, Set, <, Node, >, getSpecializedFunctions, (, ), {, return, specializedFunctions, ;, }, public, void, reportSpecializedFunction]
[;, }, public, Set, <, Node, >, getSpecializedFunctions, (, ), {, return, specializedFunctions, ;, }, public, void, reportSpecializedFunction, (, Node]
[;, }, public, void, reportSpecializedFunction, (, Node, functionNode, ), {, if, (, specializedFunctions, ., add, (, functionNode, ), ), {]
[), {, hasChanged, =, true, ;, }, }, public, void, reportSpecializedFunctionContainingNode, (, Node, node, ), {, Node, containingFunction, =, containingFunction]
[., add, (, functionNode, ), ), {, hasChanged, =, true, ;, }, }, public, void, reportSpecializedFunctionContainingNode, (, Node, node, )]
[), ), {, hasChanged, =, true, ;, }, }, public, void, reportSpecializedFunctionContainingNode, (, Node, node, ), {, Node, containingFunction, =]
[=, true, ;, }, }, public, void, reportSpecializedFunctionContainingNode, (, Node, node, ), {, Node, containingFunction, =, containingFunction, (, node, )]
[;, }, }, public, void, reportSpecializedFunctionContainingNode, (, Node, node, ), {, Node, containingFunction, =, containingFunction, (, node, ), ;, if]
[;, if, (, containingFunction, !=, null, ), {, reportSpecializedFunction, (, containingFunction, ), ;, }, }, public, Set, <, Node, >]
[), ;, if, (, containingFunction, !=, null, ), {, reportSpecializedFunction, (, containingFunction, ), ;, }, }, public, Set, <, Node]
[), {, reportSpecializedFunction, (, containingFunction, ), ;, }, }, public, Set, <, Node, >, getRemovedFunctions, (, ), {, return, removedFunctions]
[!=, null, ), {, reportSpecializedFunction, (, containingFunction, ), ;, }, }, public, Set, <, Node, >, getRemovedFunctions, (, ), {]
[), {, reportSpecializedFunction, (, containingFunction, ), ;, }, }, public, Set, <, Node, >, getRemovedFunctions, (, ), {, return, removedFunctions]
[;, }, }, public, Set, <, Node, >, getRemovedFunctions, (, ), {, return, removedFunctions, ;, }, public, void, reportRemovedFunction, (]
[), ;, }, }, public, Set, <, Node, >, getRemovedFunctions, (, ), {, return, removedFunctions, ;, }, public, void, reportRemovedFunction]
[;, }, public, void, reportRemovedFunction, (, Node, functionNode, ,, Node, declaringBlock, ), {, if, (, removedFunctions, ., add, (, functionNode]
[), {, hasChanged, =, true, ;, removedFunctionToBlock, ., put, (, functionNode, ,, declaringBlock, ), ;, }, }, public, boolean, canFixupFunction]
[., add, (, functionNode, ), ), {, hasChanged, =, true, ;, removedFunctionToBlock, ., put, (, functionNode, ,, declaringBlock, ), ;]
[), ), {, hasChanged, =, true, ;, removedFunctionToBlock, ., put, (, functionNode, ,, declaringBlock, ), ;, }, }, public, boolean]
[=, true, ;, removedFunctionToBlock, ., put, (, functionNode, ,, declaringBlock, ), ;, }, }, public, boolean, canFixupFunction, (, Node, functionNode]
[;, removedFunctionToBlock, ., put, (, functionNode, ,, declaringBlock, ), ;, }, }, public, boolean, canFixupFunction, (, Node, functionNode, ), {]
[;, }, }, public, boolean, canFixupFunction, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode, ., isFunction, (, )]
[., put, (, functionNode, ,, declaringBlock, ), ;, }, }, public, boolean, canFixupFunction, (, Node, functionNode, ), {, Preconditions, .]
[,, declaringBlock, ), ;, }, }, public, boolean, canFixupFunction, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode, .]
[), ;, }, }, public, boolean, canFixupFunction, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode, ., isFunction, (]
[;, if, (, !, nodeIsInGlobalScope, (, functionNode, ), ||, initialModuleAliasAnalysis, ., isAliased, (, functionNode, ), ), {, return, false, ;]
[., checkArgument, (, functionNode, ., isFunction, (, ), ), ;, if, (, !, nodeIsInGlobalScope, (, functionNode, ), ||, initialModuleAliasAnalysis, .]
[), ;, if, (, !, nodeIsInGlobalScope, (, functionNode, ), ||, initialModuleAliasAnalysis, ., isAliased, (, functionNode, ), ), {, return, false]
[., isFunction, (, ), ), ;, if, (, !, nodeIsInGlobalScope, (, functionNode, ), ||, initialModuleAliasAnalysis, ., isAliased, (, functionNode, )]
[), {, return, false, ;, }, if, (, NodeUtil, ., isStatement, (, functionNode, ), ), {, return, true, ;, }]
[||, initialModuleAliasAnalysis, ., isAliased, (, functionNode, ), ), {, return, false, ;, }, if, (, NodeUtil, ., isStatement, (, functionNode]
[||, initialModuleAliasAnalysis, ., isAliased, (, functionNode, ), ), {, return, false, ;, }, if, (, NodeUtil, ., isStatement, (, functionNode]
[), ||, initialModuleAliasAnalysis, ., isAliased, (, functionNode, ), ), {, return, false, ;, }, if, (, NodeUtil, ., isStatement, (]
[), {, return, false, ;, }, if, (, NodeUtil, ., isStatement, (, functionNode, ), ), {, return, true, ;, }]
[., isAliased, (, functionNode, ), ), {, return, false, ;, }, if, (, NodeUtil, ., isStatement, (, functionNode, ), )]
[), ), {, return, false, ;, }, if, (, NodeUtil, ., isStatement, (, functionNode, ), ), {, return, true, ;]
[;, }, if, (, NodeUtil, ., isStatement, (, functionNode, ), ), {, return, true, ;, }, Node, parent, =, functionNode]
[), {, return, true, ;, }, Node, parent, =, functionNode, ., getParent, (, ), ;, Node, gramps, =, parent, .]
[., isStatement, (, functionNode, ), ), {, return, true, ;, }, Node, parent, =, functionNode, ., getParent, (, ), ;]
[), ), {, return, true, ;, }, Node, parent, =, functionNode, ., getParent, (, ), ;, Node, gramps, =, parent]
[;, }, Node, parent, =, functionNode, ., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;]
[;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, parent, ., isName, (, ), &&, gramps, .]
[., getParent, (, ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, parent, ., isName, (]
[;, if, (, parent, ., isName, (, ), &&, gramps, ., isVar, (, ), ), {, return, true, ;, }]
[., getParent, (, ), ;, if, (, parent, ., isName, (, ), &&, gramps, ., isVar, (, ), ), {]
[), {, return, true, ;, }, if, (, NodeUtil, ., isExprAssign, (, gramps, ), &&, parent, ., getChildAtIndex, (, 1]
[&&, gramps, ., isVar, (, ), ), {, return, true, ;, }, if, (, NodeUtil, ., isExprAssign, (, gramps, )]
[., isName, (, ), &&, gramps, ., isVar, (, ), ), {, return, true, ;, }, if, (, NodeUtil, .]
[), {, return, true, ;, }, if, (, NodeUtil, ., isExprAssign, (, gramps, ), &&, parent, ., getChildAtIndex, (, 1]
[., isVar, (, ), ), {, return, true, ;, }, if, (, NodeUtil, ., isExprAssign, (, gramps, ), &&, parent]
[;, }, if, (, NodeUtil, ., isExprAssign, (, gramps, ), &&, parent, ., getChildAtIndex, (, 1, ), ==, functionNode, )]
[), {, return, true, ;, }, return, false, ;, }, public, boolean, canFixupSpecializedFunctionContainingNode, (, Node, n, ), {, Node, containingFunction]
[&&, parent, ., getChildAtIndex, (, 1, ), ==, functionNode, ), {, return, true, ;, }, return, false, ;, }, public]
[., isExprAssign, (, gramps, ), &&, parent, ., getChildAtIndex, (, 1, ), ==, functionNode, ), {, return, true, ;, }]
[), &&, parent, ., getChildAtIndex, (, 1, ), ==, functionNode, ), {, return, true, ;, }, return, false, ;, }]
[), {, return, true, ;, }, return, false, ;, }, public, boolean, canFixupSpecializedFunctionContainingNode, (, Node, n, ), {, Node, containingFunction]
[==, functionNode, ), {, return, true, ;, }, return, false, ;, }, public, boolean, canFixupSpecializedFunctionContainingNode, (, Node, n, ), {]
[., getChildAtIndex, (, 1, ), ==, functionNode, ), {, return, true, ;, }, return, false, ;, }, public, boolean, canFixupSpecializedFunctionContainingNode]
[), ==, functionNode, ), {, return, true, ;, }, return, false, ;, }, public, boolean, canFixupSpecializedFunctionContainingNode, (, Node, n, )]
[), {, return, true, ;, }, return, false, ;, }, public, boolean, canFixupSpecializedFunctionContainingNode, (, Node, n, ), {, Node, containingFunction]
[;, }, return, false, ;, }, public, boolean, canFixupSpecializedFunctionContainingNode, (, Node, n, ), {, Node, containingFunction, =, containingFunction, (, n]
[;, }, public, boolean, canFixupSpecializedFunctionContainingNode, (, Node, n, ), {, Node, containingFunction, =, containingFunction, (, n, ), ;, if, (]
[;, if, (, containingFunction, !=, null, ), {, return, canFixupFunction, (, containingFunction, ), ;, }, else, {, return, true, ;]
[), ;, if, (, containingFunction, !=, null, ), {, return, canFixupFunction, (, containingFunction, ), ;, }, else, {, return, true]
[), {, return, canFixupFunction, (, containingFunction, ), ;, }, else, {, return, true, ;, }, }, private, boolean, nodeIsInGlobalScope, (]
[!=, null, ), {, return, canFixupFunction, (, containingFunction, ), ;, }, else, {, return, true, ;, }, }, private, boolean]
[), {, return, canFixupFunction, (, containingFunction, ), ;, }, else, {, return, true, ;, }, }, private, boolean, nodeIsInGlobalScope, (]
[;, }, else, {, return, true, ;, }, }, private, boolean, nodeIsInGlobalScope, (, Node, node, ), {, return, containingFunction, (]
[), ;, }, else, {, return, true, ;, }, }, private, boolean, nodeIsInGlobalScope, (, Node, node, ), {, return, containingFunction]
[;, }, }, private, boolean, nodeIsInGlobalScope, (, Node, node, ), {, return, containingFunction, (, node, ), ==, null, ;, }]
[;, }, private, Node, containingFunction, (, Node, node, ), {, for, (, Node, ancestor, :, node, ., getAncestors, (, )]
[==, null, ;, }, private, Node, containingFunction, (, Node, node, ), {, for, (, Node, ancestor, :, node, ., getAncestors]
[), ==, null, ;, }, private, Node, containingFunction, (, Node, node, ), {, for, (, Node, ancestor, :, node, .]
[;, }, private, Node, containingFunction, (, Node, node, ), {, for, (, Node, ancestor, :, node, ., getAncestors, (, )]
[), {, if, (, ancestor, ., isFunction, (, ), ), {, return, ancestor, ;, }, }, return, null, ;, }]
[., getAncestors, (, ), ), {, if, (, ancestor, ., isFunction, (, ), ), {, return, ancestor, ;, }, }]
[), {, return, ancestor, ;, }, }, return, null, ;, }, }, }]
[., isFunction, (, ), ), {, return, ancestor, ;, }, }, return, null, ;, }, }, }]
[;, }, }, return, null, ;, }, }, }]
[;, }, }, }]
