[protected, final, RandomGenerator, random, ;, private, final, int, dimension, ;, protected, AbstractMultivariateRealDistribution, (, RandomGenerator, rng, ,, int, n, ), {]
[RandomGenerator, random, ;, private, final, int, dimension, ;, protected, AbstractMultivariateRealDistribution, (, RandomGenerator, rng, ,, int, n, ), {, random, =]
[;, private, final, int, dimension, ;, protected, AbstractMultivariateRealDistribution, (, RandomGenerator, rng, ,, int, n, ), {, random, =, rng, ;]
[final, int, dimension, ;, protected, AbstractMultivariateRealDistribution, (, RandomGenerator, rng, ,, int, n, ), {, random, =, rng, ;, dimension, =]
[n, ), {, random, =, rng, ;, dimension, =, n, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {]
[n, ), {, random, =, rng, ;, dimension, =, n, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {]
[=, rng, ;, dimension, =, n, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (]
[(, long, seed, ), {, random, ., setSeed, (, seed, ), ;, }, public, int, getDimension, (, ), {, return]
[], sample, (, ), ;, public, double, [, ], [, ], sample, (, final, int, sampleSize, ), {, if, (]
[], sample, (, ), ;, public, double, [, ], [, ], sample, (, final, int, sampleSize, ), {, if, (]
[(, ), ;, public, double, [, ], [, ], sample, (, final, int, sampleSize, ), {, if, (, sampleSize, <=]
[double, [, ], [, ], sample, (, final, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw]
[[, ], sample, (, final, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[[, ], sample, (, final, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[final, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, final, double, [, ], [, ], out, =]
[(, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, final, double, [, ], [, ], out, =, new, double, []
[NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, final, double, [, ], [, ], out, =, new, double, [, sampleSize, ], []
[[, ], [, ], out, =, new, double, [, sampleSize, ], [, dimension, ], ;, for, (, int, i, =]
[[, ], out, =, new, double, [, sampleSize, ], [, dimension, ], ;, for, (, int, i, =, 0, ;]
[[, ], out, =, new, double, [, sampleSize, ], [, dimension, ], ;, for, (, int, i, =, 0, ;]
[out, =, new, double, [, sampleSize, ], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, sampleSize, ], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;]
[new, double, [, sampleSize, ], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;]
[], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {]
[], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {]
[dimension, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, []
[for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =]
[;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return]
