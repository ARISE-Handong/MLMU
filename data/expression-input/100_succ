[;, private, static, final, double, [, ], [, ], AINV, =, {, {, 1, ,, 0, ,, 0, ,, 0]
[;, private, final, double, [, ], xval, ;, private, final, double, [, ], yval, ;, private, final, BicubicSplineFunction, [, ]]
[,, {, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 1]
[,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0]
[,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0]
[,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0]
[}, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0]
[,, {, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, -]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, -, 3, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, -, 3, ,, 3, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, -, 3, ,, 3, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, -, 3, ,, 3, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, }, ,, {, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2]
[,, 0, ,, 0, }, ,, {, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -]
[,, 0, }, ,, {, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,]
[}, ,, {, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,]
[,, {, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, ,, 0]
[,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, -, 2, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 2]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 2, ,, -]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 2, ,, -, 2, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 2, ,, -, 2, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 2, ,, -, 2, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, }, ,, {, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,]
[,, 0, ,, 0, }, ,, {, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,]
[,, 0, }, ,, {, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,]
[}, ,, {, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, ,]
[,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,]
[,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 1, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 1, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[}, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1]
[,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[}, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 3]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, }, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, }, ,, {, 0]
[,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0]
[,, 0, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0]
[,, 0, ,, 1, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0]
[,, 1, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[}, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -]
[,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 3, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 3, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 3, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2]
[,, 0, ,, 0, ,, 0, ,, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -]
[,, 0, ,, 0, ,, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,]
[,, 0, ,, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,]
[,, -, 3, ,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, }]
[,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, }, ,, {, 0]
[,, 3, ,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, }, ,, {, 0]
[,, 0, ,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, }, ,, {, 0, ,, 0]
[,, 0, ,, -, 2, ,, -, 1, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0]
[,, -, 2, ,, -, 1, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0]
[,, -, 1, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, -, 1, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[}, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 2]
[,, {, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, -, 2, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, -, 2, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, -, 2, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,]
[,, 0, ,, 0, ,, 0, ,, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,]
[,, 0, ,, 0, ,, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,]
[,, 0, ,, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, }]
[,, 2, ,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, }, ,, {]
[,, -, 2, ,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, }, ,, {, -, 3]
[,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, }, ,, {, -, 3, ,, 0, ,]
[,, 0, ,, 0, ,, 1, ,, 1, ,, 0, ,, 0, }, ,, {, -, 3, ,, 0, ,]
[,, 0, ,, 1, ,, 1, ,, 0, ,, 0, }, ,, {, -, 3, ,, 0, ,, 3, ,]
[,, 1, ,, 1, ,, 0, ,, 0, }, ,, {, -, 3, ,, 0, ,, 3, ,, 0, ,]
[,, 1, ,, 0, ,, 0, }, ,, {, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,]
[,, 0, ,, 0, }, ,, {, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,]
[,, 0, }, ,, {, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[}, ,, {, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, {, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 0, ,, 3, ,, 0, ,, 0]
[,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,]
[,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,]
[,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, -, 2, ,, 0, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[,, 0, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,]
[,, 0, ,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,]
[,, -, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, -]
[,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,]
[,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 0, ,]
[,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 0, ,, 3, ,]
[}, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, -, 3, ,, 0, ,, 3, ,, 0, ,]
[,, {, 9, ,, -, 9, ,, -, 9, ,, 9, ,, 6, ,, 3, ,, -, 6, ,, -]
[,, 0, ,, 0, ,, 0, ,, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, -, 3, ,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2]
[,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,]
[,, 0, ,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,]
[,, 3, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, }, ,]
[,, 0, ,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, }, ,, {, 9]
[,, 0, ,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, }, ,, {, 9, ,, -]
[,, 0, ,, -, 2, ,, 0, ,, -, 1, ,, 0, }, ,, {, 9, ,, -, 9, ,]
[,, -, 2, ,, 0, ,, -, 1, ,, 0, }, ,, {, 9, ,, -, 9, ,, -, 9]
[,, 0, ,, -, 1, ,, 0, }, ,, {, 9, ,, -, 9, ,, -, 9, ,, 9, ,]
[,, 0, ,, -, 1, ,, 0, }, ,, {, 9, ,, -, 9, ,, -, 9, ,, 9, ,]
[,, -, 1, ,, 0, }, ,, {, 9, ,, -, 9, ,, -, 9, ,, 9, ,, 6, ,]
[,, 0, }, ,, {, 9, ,, -, 9, ,, -, 9, ,, 9, ,, 6, ,, 3, ,, -]
[,, 0, }, ,, {, 9, ,, -, 9, ,, -, 9, ,, 9, ,, 6, ,, 3, ,, -]
[}, ,, {, 9, ,, -, 9, ,, -, 9, ,, 9, ,, 6, ,, 3, ,, -, 6, ,]
[,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 3, ,, -, 3, ,, 3, ,]
[,, -, 9, ,, -, 9, ,, 9, ,, 6, ,, 3, ,, -, 6, ,, -, 3, ,, 6]
[,, -, 9, ,, 9, ,, 6, ,, 3, ,, -, 6, ,, -, 3, ,, 6, ,, -, 6]
[,, -, 9, ,, 9, ,, 6, ,, 3, ,, -, 6, ,, -, 3, ,, 6, ,, -, 6]
[,, 9, ,, 6, ,, 3, ,, -, 6, ,, -, 3, ,, 6, ,, -, 6, ,, 3, ,]
[,, 9, ,, 6, ,, 3, ,, -, 6, ,, -, 3, ,, 6, ,, -, 6, ,, 3, ,]
[,, 6, ,, 3, ,, -, 6, ,, -, 3, ,, 6, ,, -, 6, ,, 3, ,, -, 3]
[,, 3, ,, -, 6, ,, -, 3, ,, 6, ,, -, 6, ,, 3, ,, -, 3, ,, 4]
[,, -, 6, ,, -, 3, ,, 6, ,, -, 6, ,, 3, ,, -, 3, ,, 4, ,, 2]
[,, -, 3, ,, 6, ,, -, 6, ,, 3, ,, -, 3, ,, 4, ,, 2, ,, 2, ,]
[,, -, 3, ,, 6, ,, -, 6, ,, 3, ,, -, 3, ,, 4, ,, 2, ,, 2, ,]
[,, 6, ,, -, 6, ,, 3, ,, -, 3, ,, 4, ,, 2, ,, 2, ,, 1, }, ,]
[,, 6, ,, -, 6, ,, 3, ,, -, 3, ,, 4, ,, 2, ,, 2, ,, 1, }, ,]
[,, -, 6, ,, 3, ,, -, 3, ,, 4, ,, 2, ,, 2, ,, 1, }, ,, {, -]
[,, 3, ,, -, 3, ,, 4, ,, 2, ,, 2, ,, 1, }, ,, {, -, 6, ,, 6]
[,, 3, ,, -, 3, ,, 4, ,, 2, ,, 2, ,, 1, }, ,, {, -, 6, ,, 6]
[,, -, 3, ,, 4, ,, 2, ,, 2, ,, 1, }, ,, {, -, 6, ,, 6, ,, 6]
[,, 4, ,, 2, ,, 2, ,, 1, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6]
[,, 4, ,, 2, ,, 2, ,, 1, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6]
[,, 2, ,, 2, ,, 1, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -]
[,, 2, ,, 1, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 3, ,]
[,, 1, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 3, ,, -, 3]
[}, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 3, ,, -, 3, ,, 3]
[,, {, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1]
[,, 6, ,, 6, ,, -, 6, ,, -, 3, ,, -, 3, ,, 3, ,, 3, ,, -, 4]
[,, 6, ,, 6, ,, -, 6, ,, -, 3, ,, -, 3, ,, 3, ,, 3, ,, -, 4]
[,, 6, ,, -, 6, ,, -, 3, ,, -, 3, ,, 3, ,, 3, ,, -, 4, ,, 4]
[,, -, 6, ,, -, 3, ,, -, 3, ,, 3, ,, 3, ,, -, 4, ,, 4, ,, -]
[,, -, 3, ,, -, 3, ,, 3, ,, 3, ,, -, 4, ,, 4, ,, -, 2, ,, 2]
[,, -, 3, ,, -, 3, ,, 3, ,, 3, ,, -, 4, ,, 4, ,, -, 2, ,, 2]
[,, -, 3, ,, 3, ,, 3, ,, -, 4, ,, 4, ,, -, 2, ,, 2, ,, -, 2]
[,, -, 3, ,, 3, ,, 3, ,, -, 4, ,, 4, ,, -, 2, ,, 2, ,, -, 2]
[,, 3, ,, 3, ,, -, 4, ,, 4, ,, -, 2, ,, 2, ,, -, 2, ,, -, 2]
[,, 3, ,, 3, ,, -, 4, ,, 4, ,, -, 2, ,, 2, ,, -, 2, ,, -, 2]
[,, 3, ,, -, 4, ,, 4, ,, -, 2, ,, 2, ,, -, 2, ,, -, 2, ,, -]
[,, -, 4, ,, 4, ,, -, 2, ,, 2, ,, -, 2, ,, -, 2, ,, -, 1, ,]
[,, 4, ,, -, 2, ,, 2, ,, -, 2, ,, -, 2, ,, -, 1, ,, -, 1, }]
[,, 4, ,, -, 2, ,, 2, ,, -, 2, ,, -, 2, ,, -, 1, ,, -, 1, }]
[,, -, 2, ,, 2, ,, -, 2, ,, -, 2, ,, -, 1, ,, -, 1, }, ,, {]
[,, 2, ,, -, 2, ,, -, 2, ,, -, 1, ,, -, 1, }, ,, {, 2, ,, 0]
[,, 2, ,, -, 2, ,, -, 2, ,, -, 1, ,, -, 1, }, ,, {, 2, ,, 0]
[,, -, 2, ,, -, 2, ,, -, 1, ,, -, 1, }, ,, {, 2, ,, 0, ,, -]
[,, -, 2, ,, -, 1, ,, -, 1, }, ,, {, 2, ,, 0, ,, -, 2, ,, 0]
[,, -, 2, ,, -, 1, ,, -, 1, }, ,, {, 2, ,, 0, ,, -, 2, ,, 0]
[,, -, 1, ,, -, 1, }, ,, {, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,]
[,, -, 1, ,, -, 1, }, ,, {, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,]
[,, -, 1, }, ,, {, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0]
[,, -, 1, }, ,, {, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0]
[}, ,, {, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[}, ,, {, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, {, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, 0, ,, -, 2, ,, 0, ,, 0]
[,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,]
[,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 1, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,]
[,, 1, ,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0]
[,, 0, ,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0]
[,, 1, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0]
[,, 0, ,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 2]
[,, 0, ,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, 0]
[,, 0, ,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, 0, ,, -]
[,, 0, }, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, 0, ,, -, 2, ,]
[}, ,, {, 0, ,, 0, ,, 0, ,, 0, ,, 2, ,, 0, ,, -, 2, ,, 0, ,]
[,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 4, ,, -, 2, ,, 4, ,]
[,, 0, ,, 0, ,, 0, ,, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 0, ,, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 0, ,, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,]
[,, 2, ,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,]
[,, 0, ,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,]
[,, -, 2, ,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, }, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, }, ,]
[,, 0, ,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, }, ,, {, -]
[,, 0, ,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, }, ,, {, -, 6, ,]
[,, 0, ,, 0, ,, 1, ,, 0, ,, 1, ,, 0, }, ,, {, -, 6, ,, 6, ,]
[,, 0, ,, 1, ,, 0, ,, 1, ,, 0, }, ,, {, -, 6, ,, 6, ,, 6, ,]
[,, 1, ,, 0, ,, 1, ,, 0, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6]
[,, 0, ,, 1, ,, 0, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -]
[,, 1, ,, 0, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 4, ,]
[,, 0, }, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 4, ,, -, 2]
[}, ,, {, -, 6, ,, 6, ,, 6, ,, -, 6, ,, -, 4, ,, -, 2, ,, 4]
[,, {, 4, ,, -, 4, ,, -, 4, ,, 4, ,, 2, ,, 2, ,, -, 2, ,, -]
[,, 6, ,, 6, ,, -, 6, ,, -, 4, ,, -, 2, ,, 4, ,, 2, ,, -, 3]
[,, 6, ,, 6, ,, -, 6, ,, -, 4, ,, -, 2, ,, 4, ,, 2, ,, -, 3]
[,, 6, ,, -, 6, ,, -, 4, ,, -, 2, ,, 4, ,, 2, ,, -, 3, ,, 3]
[,, -, 6, ,, -, 4, ,, -, 2, ,, 4, ,, 2, ,, -, 3, ,, 3, ,, -]
[,, -, 4, ,, -, 2, ,, 4, ,, 2, ,, -, 3, ,, 3, ,, -, 3, ,, 3]
[,, -, 4, ,, -, 2, ,, 4, ,, 2, ,, -, 3, ,, 3, ,, -, 3, ,, 3]
[,, -, 2, ,, 4, ,, 2, ,, -, 3, ,, 3, ,, -, 3, ,, 3, ,, -, 2]
[,, -, 2, ,, 4, ,, 2, ,, -, 3, ,, 3, ,, -, 3, ,, 3, ,, -, 2]
[,, 4, ,, 2, ,, -, 3, ,, 3, ,, -, 3, ,, 3, ,, -, 2, ,, -, 1]
[,, 4, ,, 2, ,, -, 3, ,, 3, ,, -, 3, ,, 3, ,, -, 2, ,, -, 1]
[,, 2, ,, -, 3, ,, 3, ,, -, 3, ,, 3, ,, -, 2, ,, -, 1, ,, -]
[,, -, 3, ,, 3, ,, -, 3, ,, 3, ,, -, 2, ,, -, 1, ,, -, 2, ,]
[,, 3, ,, -, 3, ,, 3, ,, -, 2, ,, -, 1, ,, -, 2, ,, -, 1, }]
[,, 3, ,, -, 3, ,, 3, ,, -, 2, ,, -, 1, ,, -, 2, ,, -, 1, }]
[,, -, 3, ,, 3, ,, -, 2, ,, -, 1, ,, -, 2, ,, -, 1, }, ,, {]
[,, 3, ,, -, 2, ,, -, 1, ,, -, 2, ,, -, 1, }, ,, {, 4, ,, -]
[,, 3, ,, -, 2, ,, -, 1, ,, -, 2, ,, -, 1, }, ,, {, 4, ,, -]
[,, -, 2, ,, -, 1, ,, -, 2, ,, -, 1, }, ,, {, 4, ,, -, 4, ,]
[,, -, 1, ,, -, 2, ,, -, 1, }, ,, {, 4, ,, -, 4, ,, -, 4, ,]
[,, -, 1, ,, -, 2, ,, -, 1, }, ,, {, 4, ,, -, 4, ,, -, 4, ,]
[,, -, 2, ,, -, 1, }, ,, {, 4, ,, -, 4, ,, -, 4, ,, 4, ,, 2]
[,, -, 2, ,, -, 1, }, ,, {, 4, ,, -, 4, ,, -, 4, ,, 4, ,, 2]
[,, -, 1, }, ,, {, 4, ,, -, 4, ,, -, 4, ,, 4, ,, 2, ,, 2, ,]
[,, -, 1, }, ,, {, 4, ,, -, 4, ,, -, 4, ,, 4, ,, 2, ,, 2, ,]
[}, ,, {, 4, ,, -, 4, ,, -, 4, ,, 4, ,, 2, ,, 2, ,, -, 2, ,]
[}, ,, {, 4, ,, -, 4, ,, -, 4, ,, 4, ,, 2, ,, 2, ,, -, 2, ,]
[}, ;, private, final, double, [, ], xval, ;, private, final, double, [, ], yval, ;, private, final, BicubicSplineFunction, []
[,, -, 4, ,, -, 4, ,, 4, ,, 2, ,, 2, ,, -, 2, ,, -, 2, ,, 2]
[,, -, 4, ,, 4, ,, 2, ,, 2, ,, -, 2, ,, -, 2, ,, 2, ,, -, 2]
[,, -, 4, ,, 4, ,, 2, ,, 2, ,, -, 2, ,, -, 2, ,, 2, ,, -, 2]
[,, 4, ,, 2, ,, 2, ,, -, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 2, ,]
[,, 4, ,, 2, ,, 2, ,, -, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 2, ,]
[,, 2, ,, 2, ,, -, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 2, ,, -, 2]
[,, 2, ,, -, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 1]
[,, -, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 1, ,, 1]
[,, -, 2, ,, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 1, ,, 1, ,, 1, ,]
[,, -, 2, ,, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 1, ,, 1, ,, 1, ,]
[,, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 1, ,, 1, ,, 1, ,, 1, }, }]
[,, 2, ,, -, 2, ,, 2, ,, -, 2, ,, 1, ,, 1, ,, 1, ,, 1, }, }]
[,, -, 2, ,, 2, ,, -, 2, ,, 1, ,, 1, ,, 1, ,, 1, }, }, ;, private]
[,, 2, ,, -, 2, ,, 1, ,, 1, ,, 1, ,, 1, }, }, ;, private, final, double, []
[,, 2, ,, -, 2, ,, 1, ,, 1, ,, 1, ,, 1, }, }, ;, private, final, double, []
[,, -, 2, ,, 1, ,, 1, ,, 1, ,, 1, }, }, ;, private, final, double, [, ], xval]
[,, 1, ,, 1, ,, 1, ,, 1, }, }, ;, private, final, double, [, ], xval, ;, private, final]
[,, 1, ,, 1, ,, 1, ,, 1, }, }, ;, private, final, double, [, ], xval, ;, private, final]
[,, 1, ,, 1, ,, 1, }, }, ;, private, final, double, [, ], xval, ;, private, final, double, []
[,, 1, ,, 1, }, }, ;, private, final, double, [, ], xval, ;, private, final, double, [, ], yval]
[,, 1, }, }, ;, private, final, double, [, ], xval, ;, private, final, double, [, ], yval, ;, private]
[}, }, ;, private, final, double, [, ], xval, ;, private, final, double, [, ], yval, ;, private, final, BicubicSplineFunction]
[;, public, BicubicSplineInterpolatingFunction, (, double, [, ], x, ,, double, [, ], y, ,, double, [, ], [, ], f]
[;, final, int, yLen, =, y, ., length, ;, if, (, xLen, ==, 0, ||, yLen, ==, 0, ||, f]
[., length, ;, final, int, yLen, =, y, ., length, ;, if, (, xLen, ==, 0, ||, yLen, ==, 0]
[;, if, (, xLen, ==, 0, ||, yLen, ==, 0, ||, f, ., length, ==, 0, ||, f, [, 0]
[., length, ;, if, (, xLen, ==, 0, ||, yLen, ==, 0, ||, f, ., length, ==, 0, ||, f]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, xLen, !=, f, ., length, ), {, throw, new]
[||, f, [, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[||, f, ., length, ==, 0, ||, f, [, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException]
[||, yLen, ==, 0, ||, f, ., length, ==, 0, ||, f, [, 0, ], ., length, ==, 0, )]
[==, 0, ||, yLen, ==, 0, ||, f, ., length, ==, 0, ||, f, [, 0, ], ., length, ==]
[||, yLen, ==, 0, ||, f, ., length, ==, 0, ||, f, [, 0, ], ., length, ==, 0, )]
[||, f, ., length, ==, 0, ||, f, [, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException]
[==, 0, ||, f, ., length, ==, 0, ||, f, [, 0, ], ., length, ==, 0, ), {, throw]
[||, f, ., length, ==, 0, ||, f, [, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException]
[||, f, [, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[==, 0, ||, f, [, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }]
[., length, ==, 0, ||, f, [, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException, (, )]
[||, f, [, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, xLen, !=, f, ., length, ), {, throw, new]
[==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xLen, !=, f, ., length, ), {]
[., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xLen, !=, f, ., length]
[[, 0, ], ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xLen, !=]
[], ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xLen, !=, f, .]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, xLen, !=, f, ., length, ), {, throw, new]
[;, }, if, (, xLen, !=, f, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, f, ., length]
[), {, throw, new, DimensionMismatchException, (, xLen, ,, f, ., length, ), ;, }, if, (, xLen, !=, dFdX, .]
[!=, f, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, f, ., length, ), ;, }, if, (]
[), {, throw, new, DimensionMismatchException, (, xLen, ,, f, ., length, ), ;, }, if, (, xLen, !=, dFdX, .]
[., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, f, ., length, ), ;, }, if, (, xLen, !=]
[;, }, if, (, xLen, !=, dFdX, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdX, ., length]
[,, f, ., length, ), ;, }, if, (, xLen, !=, dFdX, ., length, ), {, throw, new, DimensionMismatchException, (]
[), ;, }, if, (, xLen, !=, dFdX, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdX, .]
[., length, ), ;, }, if, (, xLen, !=, dFdX, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,]
[), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdX, ., length, ), ;, }, if, (, xLen, !=, dFdY, .]
[!=, dFdX, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdX, ., length, ), ;, }, if, (]
[), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdX, ., length, ), ;, }, if, (, xLen, !=, dFdY, .]
[., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdX, ., length, ), ;, }, if, (, xLen, !=]
[;, }, if, (, xLen, !=, dFdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdY, ., length]
[,, dFdX, ., length, ), ;, }, if, (, xLen, !=, dFdY, ., length, ), {, throw, new, DimensionMismatchException, (]
[), ;, }, if, (, xLen, !=, dFdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdY, .]
[., length, ), ;, }, if, (, xLen, !=, dFdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,]
[), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdY, ., length, ), ;, }, if, (, xLen, !=, d2FdXdY, .]
[!=, dFdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdY, ., length, ), ;, }, if, (]
[), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdY, ., length, ), ;, }, if, (, xLen, !=, d2FdXdY, .]
[., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, dFdY, ., length, ), ;, }, if, (, xLen, !=]
[;, }, if, (, xLen, !=, d2FdXdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, d2FdXdY, ., length]
[,, dFdY, ., length, ), ;, }, if, (, xLen, !=, d2FdXdY, ., length, ), {, throw, new, DimensionMismatchException, (]
[), ;, }, if, (, xLen, !=, d2FdXdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, d2FdXdY, .]
[., length, ), ;, }, if, (, xLen, !=, d2FdXdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,]
[), {, throw, new, DimensionMismatchException, (, xLen, ,, d2FdXdY, ., length, ), ;, }, MathArrays, ., checkOrder, (, x, )]
[!=, d2FdXdY, ., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, d2FdXdY, ., length, ), ;, }, MathArrays, .]
[), {, throw, new, DimensionMismatchException, (, xLen, ,, d2FdXdY, ., length, ), ;, }, MathArrays, ., checkOrder, (, x, )]
[., length, ), {, throw, new, DimensionMismatchException, (, xLen, ,, d2FdXdY, ., length, ), ;, }, MathArrays, ., checkOrder, (]
[;, }, MathArrays, ., checkOrder, (, x, ), ;, MathArrays, ., checkOrder, (, y, ), ;, xval, =, x, .]
[,, d2FdXdY, ., length, ), ;, }, MathArrays, ., checkOrder, (, x, ), ;, MathArrays, ., checkOrder, (, y, )]
[), ;, }, MathArrays, ., checkOrder, (, x, ), ;, MathArrays, ., checkOrder, (, y, ), ;, xval, =, x]
[., length, ), ;, }, MathArrays, ., checkOrder, (, x, ), ;, MathArrays, ., checkOrder, (, y, ), ;, xval]
[;, MathArrays, ., checkOrder, (, y, ), ;, xval, =, x, ., clone, (, ), ;, yval, =, y, .]
[., checkOrder, (, x, ), ;, MathArrays, ., checkOrder, (, y, ), ;, xval, =, x, ., clone, (, )]
[), ;, MathArrays, ., checkOrder, (, y, ), ;, xval, =, x, ., clone, (, ), ;, yval, =, y]
[;, xval, =, x, ., clone, (, ), ;, yval, =, y, ., clone, (, ), ;, final, int, lastI]
[., checkOrder, (, y, ), ;, xval, =, x, ., clone, (, ), ;, yval, =, y, ., clone, (]
[), ;, xval, =, x, ., clone, (, ), ;, yval, =, y, ., clone, (, ), ;, final, int]
[=, x, ., clone, (, ), ;, yval, =, y, ., clone, (, ), ;, final, int, lastI, =, xLen]
[;, yval, =, y, ., clone, (, ), ;, final, int, lastI, =, xLen, -, 1, ;, final, int, lastJ]
[., clone, (, ), ;, yval, =, y, ., clone, (, ), ;, final, int, lastI, =, xLen, -, 1]
[=, y, ., clone, (, ), ;, final, int, lastI, =, xLen, -, 1, ;, final, int, lastJ, =, yLen]
[;, final, int, lastI, =, xLen, -, 1, ;, final, int, lastJ, =, yLen, -, 1, ;, splines, =, new]
[., clone, (, ), ;, final, int, lastI, =, xLen, -, 1, ;, final, int, lastJ, =, yLen, -, 1]
[;, final, int, lastJ, =, yLen, -, 1, ;, splines, =, new, BicubicSplineFunction, [, lastI, ], [, lastJ, ], ;]
[-, 1, ;, final, int, lastJ, =, yLen, -, 1, ;, splines, =, new, BicubicSplineFunction, [, lastI, ], [, lastJ]
[;, final, int, lastJ, =, yLen, -, 1, ;, splines, =, new, BicubicSplineFunction, [, lastI, ], [, lastJ, ], ;]
[;, splines, =, new, BicubicSplineFunction, [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;, i]
[-, 1, ;, splines, =, new, BicubicSplineFunction, [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0]
[;, splines, =, new, BicubicSplineFunction, [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;, i]
[=, new, BicubicSplineFunction, [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;, i, <, lastI]
[;, for, (, int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {, if, (, f, []
[], [, lastJ, ], ;, for, (, int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {, if, (, f]
[;, i, <, lastI, ;, i, ++, ), {, if, (, f, [, i, ], ., length, !=, yLen, )]
[;, i, ++, ), {, if, (, f, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException]
[<, lastI, ;, i, ++, ), {, if, (, f, [, i, ], ., length, !=, yLen, ), {, throw]
[;, i, ++, ), {, if, (, f, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException]
[), {, if, (, f, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, f, []
[++, ), {, if, (, f, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, f]
[), {, throw, new, DimensionMismatchException, (, f, [, i, ], ., length, ,, yLen, ), ;, }, if, (, dFdX]
[!=, yLen, ), {, throw, new, DimensionMismatchException, (, f, [, i, ], ., length, ,, yLen, ), ;, }, if]
[., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, f, [, i, ], ., length, ,, yLen, ), ;]
[[, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, f, [, i, ], ., length, ,]
[], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, f, [, i, ], ., length, ,, yLen, )]
[), {, throw, new, DimensionMismatchException, (, f, [, i, ], ., length, ,, yLen, ), ;, }, if, (, dFdX]
[;, }, if, (, dFdX, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdX, []
[,, yLen, ), ;, }, if, (, dFdX, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException]
[., length, ,, yLen, ), ;, }, if, (, dFdX, [, i, ], ., length, !=, yLen, ), {, throw]
[[, i, ], ., length, ,, yLen, ), ;, }, if, (, dFdX, [, i, ], ., length, !=, yLen]
[], ., length, ,, yLen, ), ;, }, if, (, dFdX, [, i, ], ., length, !=, yLen, ), {]
[), ;, }, if, (, dFdX, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdX]
[), {, throw, new, DimensionMismatchException, (, dFdX, [, i, ], ., length, ,, yLen, ), ;, }, if, (, dFdY]
[!=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdX, [, i, ], ., length, ,, yLen, ), ;, }, if]
[., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdX, [, i, ], ., length, ,, yLen, ), ;]
[[, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdX, [, i, ], ., length, ,]
[], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdX, [, i, ], ., length, ,, yLen, )]
[), {, throw, new, DimensionMismatchException, (, dFdX, [, i, ], ., length, ,, yLen, ), ;, }, if, (, dFdY]
[;, }, if, (, dFdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdY, []
[,, yLen, ), ;, }, if, (, dFdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException]
[., length, ,, yLen, ), ;, }, if, (, dFdY, [, i, ], ., length, !=, yLen, ), {, throw]
[[, i, ], ., length, ,, yLen, ), ;, }, if, (, dFdY, [, i, ], ., length, !=, yLen]
[], ., length, ,, yLen, ), ;, }, if, (, dFdY, [, i, ], ., length, !=, yLen, ), {]
[), ;, }, if, (, dFdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdY]
[), {, throw, new, DimensionMismatchException, (, dFdY, [, i, ], ., length, ,, yLen, ), ;, }, if, (, d2FdXdY]
[!=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdY, [, i, ], ., length, ,, yLen, ), ;, }, if]
[., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdY, [, i, ], ., length, ,, yLen, ), ;]
[[, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdY, [, i, ], ., length, ,]
[], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, dFdY, [, i, ], ., length, ,, yLen, )]
[), {, throw, new, DimensionMismatchException, (, dFdY, [, i, ], ., length, ,, yLen, ), ;, }, if, (, d2FdXdY]
[;, }, if, (, d2FdXdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, d2FdXdY, []
[,, yLen, ), ;, }, if, (, d2FdXdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException]
[., length, ,, yLen, ), ;, }, if, (, d2FdXdY, [, i, ], ., length, !=, yLen, ), {, throw]
[[, i, ], ., length, ,, yLen, ), ;, }, if, (, d2FdXdY, [, i, ], ., length, !=, yLen]
[], ., length, ,, yLen, ), ;, }, if, (, d2FdXdY, [, i, ], ., length, !=, yLen, ), {]
[), ;, }, if, (, d2FdXdY, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, d2FdXdY]
[), {, throw, new, DimensionMismatchException, (, d2FdXdY, [, i, ], ., length, ,, yLen, ), ;, }, final, int, ip1]
[!=, yLen, ), {, throw, new, DimensionMismatchException, (, d2FdXdY, [, i, ], ., length, ,, yLen, ), ;, }, final]
[., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, d2FdXdY, [, i, ], ., length, ,, yLen, ), ;]
[[, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, d2FdXdY, [, i, ], ., length, ,]
[], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, d2FdXdY, [, i, ], ., length, ,, yLen, )]
[), {, throw, new, DimensionMismatchException, (, d2FdXdY, [, i, ], ., length, ,, yLen, ), ;, }, final, int, ip1]
[;, }, final, int, ip1, =, i, +, 1, ;, for, (, int, j, =, 0, ;, j, <, lastJ]
[,, yLen, ), ;, }, final, int, ip1, =, i, +, 1, ;, for, (, int, j, =, 0, ;]
[., length, ,, yLen, ), ;, }, final, int, ip1, =, i, +, 1, ;, for, (, int, j, =]
[[, i, ], ., length, ,, yLen, ), ;, }, final, int, ip1, =, i, +, 1, ;, for, (]
[], ., length, ,, yLen, ), ;, }, final, int, ip1, =, i, +, 1, ;, for, (, int, j]
[), ;, }, final, int, ip1, =, i, +, 1, ;, for, (, int, j, =, 0, ;, j, <]
[;, for, (, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {, final, int, jp1, =]
[+, 1, ;, for, (, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {, final, int]
[;, for, (, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {, final, int, jp1, =]
[;, j, <, lastJ, ;, j, ++, ), {, final, int, jp1, =, j, +, 1, ;, final, double, []
[;, j, ++, ), {, final, int, jp1, =, j, +, 1, ;, final, double, [, ], beta, =, new]
[<, lastJ, ;, j, ++, ), {, final, int, jp1, =, j, +, 1, ;, final, double, [, ], beta]
[;, j, ++, ), {, final, int, jp1, =, j, +, 1, ;, final, double, [, ], beta, =, new]
[), {, final, int, jp1, =, j, +, 1, ;, final, double, [, ], beta, =, new, double, [, ]]
[++, ), {, final, int, jp1, =, j, +, 1, ;, final, double, [, ], beta, =, new, double, []
[;, final, double, [, ], beta, =, new, double, [, ], {, f, [, i, ], [, j, ], ,]
[+, 1, ;, final, double, [, ], beta, =, new, double, [, ], {, f, [, i, ], [, j]
[;, final, double, [, ], beta, =, new, double, [, ], {, f, [, i, ], [, j, ], ,]
[;, splines, [, i, ], [, j, ], =, new, BicubicSplineFunction, (, computeSplineCoefficients, (, beta, ), ), ;, }, }]
[;, splines, [, i, ], [, j, ], =, new, BicubicSplineFunction, (, computeSplineCoefficients, (, beta, ), ), ;, }, }]
[,, f, [, ip1, ], [, j, ], ,, f, [, i, ], [, jp1, ], ,, f, [, ip1]
[[, j, ], ,, f, [, ip1, ], [, j, ], ,, f, [, i, ], [, jp1, ], ,]
[[, i, ], [, j, ], ,, f, [, ip1, ], [, j, ], ,, f, [, i, ], []
[], [, j, ], ,, f, [, ip1, ], [, j, ], ,, f, [, i, ], [, jp1, ]]
[], ,, f, [, ip1, ], [, j, ], ,, f, [, i, ], [, jp1, ], ,, f, []
[,, f, [, i, ], [, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,, dFdX, [, i]
[[, j, ], ,, f, [, i, ], [, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,]
[[, ip1, ], [, j, ], ,, f, [, i, ], [, jp1, ], ,, f, [, ip1, ], []
[], [, j, ], ,, f, [, i, ], [, jp1, ], ,, f, [, ip1, ], [, jp1, ]]
[], ,, f, [, i, ], [, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,, dFdX, []
[,, f, [, ip1, ], [, jp1, ], ,, dFdX, [, i, ], [, j, ], ,, dFdX, [, ip1]
[[, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,, dFdX, [, i, ], [, j, ], ,]
[[, i, ], [, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,, dFdX, [, i, ], []
[], [, jp1, ], ,, f, [, ip1, ], [, jp1, ], ,, dFdX, [, i, ], [, j, ]]
[], ,, f, [, ip1, ], [, jp1, ], ,, dFdX, [, i, ], [, j, ], ,, dFdX, []
[,, dFdX, [, i, ], [, j, ], ,, dFdX, [, ip1, ], [, j, ], ,, dFdX, [, i]
[[, jp1, ], ,, dFdX, [, i, ], [, j, ], ,, dFdX, [, ip1, ], [, j, ], ,]
[[, ip1, ], [, jp1, ], ,, dFdX, [, i, ], [, j, ], ,, dFdX, [, ip1, ], []
[], [, jp1, ], ,, dFdX, [, i, ], [, j, ], ,, dFdX, [, ip1, ], [, j, ]]
[], ,, dFdX, [, i, ], [, j, ], ,, dFdX, [, ip1, ], [, j, ], ,, dFdX, []
[,, dFdX, [, ip1, ], [, j, ], ,, dFdX, [, i, ], [, jp1, ], ,, dFdX, [, ip1]
[[, j, ], ,, dFdX, [, ip1, ], [, j, ], ,, dFdX, [, i, ], [, jp1, ], ,]
[[, i, ], [, j, ], ,, dFdX, [, ip1, ], [, j, ], ,, dFdX, [, i, ], []
[], [, j, ], ,, dFdX, [, ip1, ], [, j, ], ,, dFdX, [, i, ], [, jp1, ]]
[], ,, dFdX, [, ip1, ], [, j, ], ,, dFdX, [, i, ], [, jp1, ], ,, dFdX, []
[,, dFdX, [, i, ], [, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,, dFdY, [, i]
[[, j, ], ,, dFdX, [, i, ], [, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,]
[[, ip1, ], [, j, ], ,, dFdX, [, i, ], [, jp1, ], ,, dFdX, [, ip1, ], []
[], [, j, ], ,, dFdX, [, i, ], [, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ]]
[], ,, dFdX, [, i, ], [, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,, dFdY, []
[,, dFdX, [, ip1, ], [, jp1, ], ,, dFdY, [, i, ], [, j, ], ,, dFdY, [, ip1]
[[, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,, dFdY, [, i, ], [, j, ], ,]
[[, i, ], [, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,, dFdY, [, i, ], []
[], [, jp1, ], ,, dFdX, [, ip1, ], [, jp1, ], ,, dFdY, [, i, ], [, j, ]]
[], ,, dFdX, [, ip1, ], [, jp1, ], ,, dFdY, [, i, ], [, j, ], ,, dFdY, []
[,, dFdY, [, i, ], [, j, ], ,, dFdY, [, ip1, ], [, j, ], ,, dFdY, [, i]
[[, jp1, ], ,, dFdY, [, i, ], [, j, ], ,, dFdY, [, ip1, ], [, j, ], ,]
[[, ip1, ], [, jp1, ], ,, dFdY, [, i, ], [, j, ], ,, dFdY, [, ip1, ], []
[], [, jp1, ], ,, dFdY, [, i, ], [, j, ], ,, dFdY, [, ip1, ], [, j, ]]
[], ,, dFdY, [, i, ], [, j, ], ,, dFdY, [, ip1, ], [, j, ], ,, dFdY, []
[,, dFdY, [, ip1, ], [, j, ], ,, dFdY, [, i, ], [, jp1, ], ,, dFdY, [, ip1]
[[, j, ], ,, dFdY, [, ip1, ], [, j, ], ,, dFdY, [, i, ], [, jp1, ], ,]
[[, i, ], [, j, ], ,, dFdY, [, ip1, ], [, j, ], ,, dFdY, [, i, ], []
[], [, j, ], ,, dFdY, [, ip1, ], [, j, ], ,, dFdY, [, i, ], [, jp1, ]]
[], ,, dFdY, [, ip1, ], [, j, ], ,, dFdY, [, i, ], [, jp1, ], ,, dFdY, []
[,, dFdY, [, i, ], [, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,, d2FdXdY, [, i]
[[, j, ], ,, dFdY, [, i, ], [, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,]
[[, ip1, ], [, j, ], ,, dFdY, [, i, ], [, jp1, ], ,, dFdY, [, ip1, ], []
[], [, j, ], ,, dFdY, [, i, ], [, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ]]
[], ,, dFdY, [, i, ], [, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,, d2FdXdY, []
[,, dFdY, [, ip1, ], [, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,, d2FdXdY, [, ip1]
[[, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,]
[[, i, ], [, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,, d2FdXdY, [, i, ], []
[], [, jp1, ], ,, dFdY, [, ip1, ], [, jp1, ], ,, d2FdXdY, [, i, ], [, j, ]]
[], ,, dFdY, [, ip1, ], [, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,, d2FdXdY, []
[,, d2FdXdY, [, i, ], [, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,, d2FdXdY, [, i]
[[, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,]
[[, ip1, ], [, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,, d2FdXdY, [, ip1, ], []
[], [, jp1, ], ,, d2FdXdY, [, i, ], [, j, ], ,, d2FdXdY, [, ip1, ], [, j, ]]
[], ,, d2FdXdY, [, i, ], [, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,, d2FdXdY, []
[,, d2FdXdY, [, ip1, ], [, j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,, d2FdXdY, [, ip1]
[[, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,]
[[, i, ], [, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,, d2FdXdY, [, i, ], []
[], [, j, ], ,, d2FdXdY, [, ip1, ], [, j, ], ,, d2FdXdY, [, i, ], [, jp1, ]]
[], ,, d2FdXdY, [, ip1, ], [, j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,, d2FdXdY, []
[,, d2FdXdY, [, i, ], [, jp1, ], ,, d2FdXdY, [, ip1, ], [, jp1, ], }, ;, splines, []
[[, j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,, d2FdXdY, [, ip1, ], [, jp1, ], }]
[[, ip1, ], [, j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,, d2FdXdY, [, ip1, ], []
[], [, j, ], ,, d2FdXdY, [, i, ], [, jp1, ], ,, d2FdXdY, [, ip1, ], [, jp1, ]]
[], ,, d2FdXdY, [, i, ], [, jp1, ], ,, d2FdXdY, [, ip1, ], [, jp1, ], }, ;, splines]
[,, d2FdXdY, [, ip1, ], [, jp1, ], }, ;, splines, [, i, ], [, j, ], =, new, BicubicSplineFunction]
[[, jp1, ], ,, d2FdXdY, [, ip1, ], [, jp1, ], }, ;, splines, [, i, ], [, j, ]]
[[, i, ], [, jp1, ], ,, d2FdXdY, [, ip1, ], [, jp1, ], }, ;, splines, [, i, ]]
[], [, jp1, ], ,, d2FdXdY, [, ip1, ], [, jp1, ], }, ;, splines, [, i, ], [, j]
[], ,, d2FdXdY, [, ip1, ], [, jp1, ], }, ;, splines, [, i, ], [, j, ], =, new]
[}, ;, splines, [, i, ], [, j, ], =, new, BicubicSplineFunction, (, computeSplineCoefficients, (, beta, ), ), ;, }]
[[, jp1, ], }, ;, splines, [, i, ], [, j, ], =, new, BicubicSplineFunction, (, computeSplineCoefficients, (, beta, )]
[[, ip1, ], [, jp1, ], }, ;, splines, [, i, ], [, j, ], =, new, BicubicSplineFunction, (, computeSplineCoefficients]
[], [, jp1, ], }, ;, splines, [, i, ], [, j, ], =, new, BicubicSplineFunction, (, computeSplineCoefficients, (, beta]
[], }, ;, splines, [, i, ], [, j, ], =, new, BicubicSplineFunction, (, computeSplineCoefficients, (, beta, ), ), ;]
[=, new, BicubicSplineFunction, (, computeSplineCoefficients, (, beta, ), ), ;, }, }, }, public, double, value, (, double, x, ,]
[[, j, ], =, new, BicubicSplineFunction, (, computeSplineCoefficients, (, beta, ), ), ;, }, }, }, public, double, value, (]
[[, i, ], [, j, ], =, new, BicubicSplineFunction, (, computeSplineCoefficients, (, beta, ), ), ;, }, }, }, public]
[], [, j, ], =, new, BicubicSplineFunction, (, computeSplineCoefficients, (, beta, ), ), ;, }, }, }, public, double, value]
[], =, new, BicubicSplineFunction, (, computeSplineCoefficients, (, beta, ), ), ;, }, }, }, public, double, value, (, double, x]
[;, }, }, }, public, double, value, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, final, int, i]
[), ;, }, }, }, public, double, value, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, final, int]
[), ), ;, }, }, }, public, double, value, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, final]
[;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (, x, -, xval]
[,, xval, ), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (]
[), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (, x, -]
[;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, [, i, +, 1]
[,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, []
[), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, [, i, +]
[;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +, 1]
[/, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (]
[), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =]
[-, xval, [, i, ], ), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], )]
[), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =]
[[, i, ], ), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final]
[], ), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN]
[;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +, 1]
[), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +]
[-, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /]
[[, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval]
[], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], )]
[+, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j]
[], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], )]
[), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +]
[[, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval]
[], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j]
[;, return, splines, [, i, ], [, j, ], ., value, (, xN, ,, yN, ), ;, }, public, boolean]
[/, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return, splines, [, i, ]]
[), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return, splines, [, i]
[-, yval, [, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], )]
[), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return, splines, [, i]
[[, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return]
[], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return, splines, []
[;, return, splines, [, i, ], [, j, ], ., value, (, xN, ,, yN, ), ;, }, public, boolean]
[), ;, return, splines, [, i, ], [, j, ], ., value, (, xN, ,, yN, ), ;, }, public]
[-, yval, [, j, ], ), ;, return, splines, [, i, ], [, j, ], ., value, (, xN, ,]
[[, j, +, 1, ], -, yval, [, j, ], ), ;, return, splines, [, i, ], [, j, ]]
[], -, yval, [, j, ], ), ;, return, splines, [, i, ], [, j, ], ., value, (, xN]
[+, 1, ], -, yval, [, j, ], ), ;, return, splines, [, i, ], [, j, ], ., value]
[], -, yval, [, j, ], ), ;, return, splines, [, i, ], [, j, ], ., value, (, xN]
[), ;, return, splines, [, i, ], [, j, ], ., value, (, xN, ,, yN, ), ;, }, public]
[[, j, ], ), ;, return, splines, [, i, ], [, j, ], ., value, (, xN, ,, yN, )]
[], ), ;, return, splines, [, i, ], [, j, ], ., value, (, xN, ,, yN, ), ;, }]
[;, }, public, boolean, isValidPoint, (, double, x, ,, double, y, ), {, if, (, x, <, xval, [, 0]
[., value, (, xN, ,, yN, ), ;, }, public, boolean, isValidPoint, (, double, x, ,, double, y, ), {]
[[, j, ], ., value, (, xN, ,, yN, ), ;, }, public, boolean, isValidPoint, (, double, x, ,, double]
[[, i, ], [, j, ], ., value, (, xN, ,, yN, ), ;, }, public, boolean, isValidPoint, (, double]
[], [, j, ], ., value, (, xN, ,, yN, ), ;, }, public, boolean, isValidPoint, (, double, x, ,]
[], ., value, (, xN, ,, yN, ), ;, }, public, boolean, isValidPoint, (, double, x, ,, double, y, )]
[,, yN, ), ;, }, public, boolean, isValidPoint, (, double, x, ,, double, y, ), {, if, (, x, <]
[), ;, }, public, boolean, isValidPoint, (, double, x, ,, double, y, ), {, if, (, x, <, xval, []
[), {, return, false, ;, }, else, {, return, true, ;, }, }, public, double, partialDerivativeX, (, double, x, ,]
[||, y, >, yval, [, yval, ., length, -, 1, ], ), {, return, false, ;, }, else, {, return]
[||, y, <, yval, [, 0, ], ||, y, >, yval, [, yval, ., length, -, 1, ], ), {]
[||, x, >, xval, [, xval, ., length, -, 1, ], ||, y, <, yval, [, 0, ], ||, y]
[<, xval, [, 0, ], ||, x, >, xval, [, xval, ., length, -, 1, ], ||, y, <, yval]
[||, x, >, xval, [, xval, ., length, -, 1, ], ||, y, <, yval, [, 0, ], ||, y]
[[, 0, ], ||, x, >, xval, [, xval, ., length, -, 1, ], ||, y, <, yval, [, 0]
[], ||, x, >, xval, [, xval, ., length, -, 1, ], ||, y, <, yval, [, 0, ], ||]
[||, y, <, yval, [, 0, ], ||, y, >, yval, [, yval, ., length, -, 1, ], ), {]
[>, xval, [, xval, ., length, -, 1, ], ||, y, <, yval, [, 0, ], ||, y, >, yval]
[||, y, <, yval, [, 0, ], ||, y, >, yval, [, yval, ., length, -, 1, ], ), {]
[[, xval, ., length, -, 1, ], ||, y, <, yval, [, 0, ], ||, y, >, yval, [, yval]
[], ||, y, <, yval, [, 0, ], ||, y, >, yval, [, yval, ., length, -, 1, ], )]
[-, 1, ], ||, y, <, yval, [, 0, ], ||, y, >, yval, [, yval, ., length, -, 1]
[., length, -, 1, ], ||, y, <, yval, [, 0, ], ||, y, >, yval, [, yval, ., length]
[], ||, y, <, yval, [, 0, ], ||, y, >, yval, [, yval, ., length, -, 1, ], )]
[||, y, >, yval, [, yval, ., length, -, 1, ], ), {, return, false, ;, }, else, {, return]
[<, yval, [, 0, ], ||, y, >, yval, [, yval, ., length, -, 1, ], ), {, return, false]
[||, y, >, yval, [, yval, ., length, -, 1, ], ), {, return, false, ;, }, else, {, return]
[[, 0, ], ||, y, >, yval, [, yval, ., length, -, 1, ], ), {, return, false, ;, }]
[], ||, y, >, yval, [, yval, ., length, -, 1, ], ), {, return, false, ;, }, else, {]
[), {, return, false, ;, }, else, {, return, true, ;, }, }, public, double, partialDerivativeX, (, double, x, ,]
[>, yval, [, yval, ., length, -, 1, ], ), {, return, false, ;, }, else, {, return, true, ;]
[), {, return, false, ;, }, else, {, return, true, ;, }, }, public, double, partialDerivativeX, (, double, x, ,]
[[, yval, ., length, -, 1, ], ), {, return, false, ;, }, else, {, return, true, ;, }, }]
[], ), {, return, false, ;, }, else, {, return, true, ;, }, }, public, double, partialDerivativeX, (, double, x]
[-, 1, ], ), {, return, false, ;, }, else, {, return, true, ;, }, }, public, double, partialDerivativeX, (]
[., length, -, 1, ], ), {, return, false, ;, }, else, {, return, true, ;, }, }, public, double]
[], ), {, return, false, ;, }, else, {, return, true, ;, }, }, public, double, partialDerivativeX, (, double, x]
[;, }, else, {, return, true, ;, }, }, public, double, partialDerivativeX, (, double, x, ,, double, y, ), throws]
[;, }, }, public, double, partialDerivativeX, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 0]
[;, }, public, double, partialDerivativeY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 1, ,]
[,, x, ,, y, ), ;, }, public, double, partialDerivativeY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {]
[,, y, ), ;, }, public, double, partialDerivativeY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative]
[), ;, }, public, double, partialDerivativeY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 1]
[;, }, public, double, partialDerivativeXX, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 2, ,]
[,, x, ,, y, ), ;, }, public, double, partialDerivativeXX, (, double, x, ,, double, y, ), throws, OutOfRangeException, {]
[,, y, ), ;, }, public, double, partialDerivativeXX, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative]
[), ;, }, public, double, partialDerivativeXX, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 2]
[;, }, public, double, partialDerivativeYY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 3, ,]
[,, x, ,, y, ), ;, }, public, double, partialDerivativeYY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {]
[,, y, ), ;, }, public, double, partialDerivativeYY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative]
[), ;, }, public, double, partialDerivativeYY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 3]
[;, }, public, double, partialDerivativeXY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 4, ,]
[,, x, ,, y, ), ;, }, public, double, partialDerivativeXY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {]
[,, y, ), ;, }, public, double, partialDerivativeXY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative]
[), ;, }, public, double, partialDerivativeXY, (, double, x, ,, double, y, ), throws, OutOfRangeException, {, return, partialDerivative, (, 4]
[;, }, private, double, partialDerivative, (, int, which, ,, double, x, ,, double, y, ), throws, OutOfRangeException, {, if, (]
[,, x, ,, y, ), ;, }, private, double, partialDerivative, (, int, which, ,, double, x, ,, double, y, )]
[,, y, ), ;, }, private, double, partialDerivative, (, int, which, ,, double, x, ,, double, y, ), throws, OutOfRangeException]
[), ;, }, private, double, partialDerivative, (, int, which, ,, double, x, ,, double, y, ), throws, OutOfRangeException, {, if]
[), {, computePartialDerivatives, (, ), ;, }, final, int, i, =, searchIndex, (, x, ,, xval, ), ;, final, int]
[==, null, ), {, computePartialDerivatives, (, ), ;, }, final, int, i, =, searchIndex, (, x, ,, xval, ), ;]
[), {, computePartialDerivatives, (, ), ;, }, final, int, i, =, searchIndex, (, x, ,, xval, ), ;, final, int]
[;, }, final, int, i, =, searchIndex, (, x, ,, xval, ), ;, final, int, j, =, searchIndex, (, y]
[;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (, x, -, xval]
[,, xval, ), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (]
[), ;, final, int, j, =, searchIndex, (, y, ,, yval, ), ;, final, double, xN, =, (, x, -]
[;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, [, i, +, 1]
[,, yval, ), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, []
[), ;, final, double, xN, =, (, x, -, xval, [, i, ], ), /, (, xval, [, i, +]
[;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +, 1]
[/, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (]
[), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =]
[-, xval, [, i, ], ), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], )]
[), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =]
[[, i, ], ), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final]
[], ), /, (, xval, [, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN]
[;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +, 1]
[), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +]
[-, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /]
[[, i, +, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval]
[], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], )]
[+, 1, ], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j]
[], -, xval, [, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], )]
[), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j, +]
[[, i, ], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval]
[], ), ;, final, double, yN, =, (, y, -, yval, [, j, ], ), /, (, yval, [, j]
[;, return, partialDerivatives, [, which, ], [, i, ], [, j, ], ., value, (, xN, ,, yN, ), ;]
[/, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return, partialDerivatives, [, which, ]]
[), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return, partialDerivatives, [, which]
[-, yval, [, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], )]
[), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return, partialDerivatives, [, which]
[[, j, ], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return]
[], ), /, (, yval, [, j, +, 1, ], -, yval, [, j, ], ), ;, return, partialDerivatives, []
[;, return, partialDerivatives, [, which, ], [, i, ], [, j, ], ., value, (, xN, ,, yN, ), ;]
[), ;, return, partialDerivatives, [, which, ], [, i, ], [, j, ], ., value, (, xN, ,, yN, )]
[-, yval, [, j, ], ), ;, return, partialDerivatives, [, which, ], [, i, ], [, j, ], ., value]
[[, j, +, 1, ], -, yval, [, j, ], ), ;, return, partialDerivatives, [, which, ], [, i, ]]
[], -, yval, [, j, ], ), ;, return, partialDerivatives, [, which, ], [, i, ], [, j, ], .]
[+, 1, ], -, yval, [, j, ], ), ;, return, partialDerivatives, [, which, ], [, i, ], [, j]
[], -, yval, [, j, ], ), ;, return, partialDerivatives, [, which, ], [, i, ], [, j, ], .]
[), ;, return, partialDerivatives, [, which, ], [, i, ], [, j, ], ., value, (, xN, ,, yN, )]
[[, j, ], ), ;, return, partialDerivatives, [, which, ], [, i, ], [, j, ], ., value, (, xN]
[], ), ;, return, partialDerivatives, [, which, ], [, i, ], [, j, ], ., value, (, xN, ,, yN]
[;, }, private, void, computePartialDerivatives, (, ), {, final, int, lastI, =, xval, ., length, -, 1, ;, final, int]
[., value, (, xN, ,, yN, ), ;, }, private, void, computePartialDerivatives, (, ), {, final, int, lastI, =, xval]
[[, j, ], ., value, (, xN, ,, yN, ), ;, }, private, void, computePartialDerivatives, (, ), {, final, int]
[[, i, ], [, j, ], ., value, (, xN, ,, yN, ), ;, }, private, void, computePartialDerivatives, (, )]
[[, which, ], [, i, ], [, j, ], ., value, (, xN, ,, yN, ), ;, }, private, void]
[], [, i, ], [, j, ], ., value, (, xN, ,, yN, ), ;, }, private, void, computePartialDerivatives, (]
[], [, j, ], ., value, (, xN, ,, yN, ), ;, }, private, void, computePartialDerivatives, (, ), {, final]
[], ., value, (, xN, ,, yN, ), ;, }, private, void, computePartialDerivatives, (, ), {, final, int, lastI, =]
[,, yN, ), ;, }, private, void, computePartialDerivatives, (, ), {, final, int, lastI, =, xval, ., length, -, 1]
[), ;, }, private, void, computePartialDerivatives, (, ), {, final, int, lastI, =, xval, ., length, -, 1, ;, final]
[;, final, int, lastJ, =, yval, ., length, -, 1, ;, partialDerivatives, =, new, BivariateFunction, [, 5, ], [, lastI]
[-, 1, ;, final, int, lastJ, =, yval, ., length, -, 1, ;, partialDerivatives, =, new, BivariateFunction, [, 5, ]]
[., length, -, 1, ;, final, int, lastJ, =, yval, ., length, -, 1, ;, partialDerivatives, =, new, BivariateFunction, []
[;, final, int, lastJ, =, yval, ., length, -, 1, ;, partialDerivatives, =, new, BivariateFunction, [, 5, ], [, lastI]
[;, partialDerivatives, =, new, BivariateFunction, [, 5, ], [, lastI, ], [, lastJ, ], ;, for, (, int, i, =]
[-, 1, ;, partialDerivatives, =, new, BivariateFunction, [, 5, ], [, lastI, ], [, lastJ, ], ;, for, (, int]
[., length, -, 1, ;, partialDerivatives, =, new, BivariateFunction, [, 5, ], [, lastI, ], [, lastJ, ], ;, for]
[;, partialDerivatives, =, new, BivariateFunction, [, 5, ], [, lastI, ], [, lastJ, ], ;, for, (, int, i, =]
[=, new, BivariateFunction, [, 5, ], [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {, for, (, int, j]
[], [, lastI, ], [, lastJ, ], ;, for, (, int, i, =, 0, ;, i, <, lastI, ;, i]
[], [, lastJ, ], ;, for, (, int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, lastI, ;, i, ++, ), {, for, (, int]
[;, i, <, lastI, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, lastJ, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {]
[<, lastI, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, lastJ, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {, final, BicubicSplineFunction, f]
[++, ), {, for, (, int, j, =, 0, ;, j, <, lastJ, ;, j, ++, ), {, final, BicubicSplineFunction]
[;, j, <, lastJ, ;, j, ++, ), {, final, BicubicSplineFunction, f, =, splines, [, i, ], [, j, ]]
[;, j, ++, ), {, final, BicubicSplineFunction, f, =, splines, [, i, ], [, j, ], ;, partialDerivatives, [, 0]
[<, lastJ, ;, j, ++, ), {, final, BicubicSplineFunction, f, =, splines, [, i, ], [, j, ], ;, partialDerivatives]
[;, j, ++, ), {, final, BicubicSplineFunction, f, =, splines, [, i, ], [, j, ], ;, partialDerivatives, [, 0]
[), {, final, BicubicSplineFunction, f, =, splines, [, i, ], [, j, ], ;, partialDerivatives, [, 0, ], [, i]
[++, ), {, final, BicubicSplineFunction, f, =, splines, [, i, ], [, j, ], ;, partialDerivatives, [, 0, ], []
[;, partialDerivatives, [, 0, ], [, i, ], [, j, ], =, f, ., partialDerivativeX, (, ), ;, partialDerivatives, []
[[, j, ], ;, partialDerivatives, [, 0, ], [, i, ], [, j, ], =, f, ., partialDerivativeX, (, )]
[[, i, ], [, j, ], ;, partialDerivatives, [, 0, ], [, i, ], [, j, ], =, f, .]
[], [, j, ], ;, partialDerivatives, [, 0, ], [, i, ], [, j, ], =, f, ., partialDerivativeX, (]
[], ;, partialDerivatives, [, 0, ], [, i, ], [, j, ], =, f, ., partialDerivativeX, (, ), ;, partialDerivatives]
[=, f, ., partialDerivativeX, (, ), ;, partialDerivatives, [, 1, ], [, i, ], [, j, ], =, f, .]
[[, j, ], =, f, ., partialDerivativeX, (, ), ;, partialDerivatives, [, 1, ], [, i, ], [, j, ]]
[[, i, ], [, j, ], =, f, ., partialDerivativeX, (, ), ;, partialDerivatives, [, 1, ], [, i, ]]
[[, 0, ], [, i, ], [, j, ], =, f, ., partialDerivativeX, (, ), ;, partialDerivatives, [, 1, ]]
[], [, i, ], [, j, ], =, f, ., partialDerivativeX, (, ), ;, partialDerivatives, [, 1, ], [, i]
[], [, j, ], =, f, ., partialDerivativeX, (, ), ;, partialDerivatives, [, 1, ], [, i, ], [, j]
[], =, f, ., partialDerivativeX, (, ), ;, partialDerivatives, [, 1, ], [, i, ], [, j, ], =, f]
[;, partialDerivatives, [, 1, ], [, i, ], [, j, ], =, f, ., partialDerivativeY, (, ), ;, partialDerivatives, []
[., partialDerivativeX, (, ), ;, partialDerivatives, [, 1, ], [, i, ], [, j, ], =, f, ., partialDerivativeY, (]
[=, f, ., partialDerivativeY, (, ), ;, partialDerivatives, [, 2, ], [, i, ], [, j, ], =, f, .]
[[, j, ], =, f, ., partialDerivativeY, (, ), ;, partialDerivatives, [, 2, ], [, i, ], [, j, ]]
[[, i, ], [, j, ], =, f, ., partialDerivativeY, (, ), ;, partialDerivatives, [, 2, ], [, i, ]]
[[, 1, ], [, i, ], [, j, ], =, f, ., partialDerivativeY, (, ), ;, partialDerivatives, [, 2, ]]
[], [, i, ], [, j, ], =, f, ., partialDerivativeY, (, ), ;, partialDerivatives, [, 2, ], [, i]
[], [, j, ], =, f, ., partialDerivativeY, (, ), ;, partialDerivatives, [, 2, ], [, i, ], [, j]
[], =, f, ., partialDerivativeY, (, ), ;, partialDerivatives, [, 2, ], [, i, ], [, j, ], =, f]
[;, partialDerivatives, [, 2, ], [, i, ], [, j, ], =, f, ., partialDerivativeXX, (, ), ;, partialDerivatives, []
[., partialDerivativeY, (, ), ;, partialDerivatives, [, 2, ], [, i, ], [, j, ], =, f, ., partialDerivativeXX, (]
[=, f, ., partialDerivativeXX, (, ), ;, partialDerivatives, [, 3, ], [, i, ], [, j, ], =, f, .]
[[, j, ], =, f, ., partialDerivativeXX, (, ), ;, partialDerivatives, [, 3, ], [, i, ], [, j, ]]
[[, i, ], [, j, ], =, f, ., partialDerivativeXX, (, ), ;, partialDerivatives, [, 3, ], [, i, ]]
[[, 2, ], [, i, ], [, j, ], =, f, ., partialDerivativeXX, (, ), ;, partialDerivatives, [, 3, ]]
[], [, i, ], [, j, ], =, f, ., partialDerivativeXX, (, ), ;, partialDerivatives, [, 3, ], [, i]
[], [, j, ], =, f, ., partialDerivativeXX, (, ), ;, partialDerivatives, [, 3, ], [, i, ], [, j]
[], =, f, ., partialDerivativeXX, (, ), ;, partialDerivatives, [, 3, ], [, i, ], [, j, ], =, f]
[;, partialDerivatives, [, 3, ], [, i, ], [, j, ], =, f, ., partialDerivativeYY, (, ), ;, partialDerivatives, []
[., partialDerivativeXX, (, ), ;, partialDerivatives, [, 3, ], [, i, ], [, j, ], =, f, ., partialDerivativeYY, (]
[=, f, ., partialDerivativeYY, (, ), ;, partialDerivatives, [, 4, ], [, i, ], [, j, ], =, f, .]
[[, j, ], =, f, ., partialDerivativeYY, (, ), ;, partialDerivatives, [, 4, ], [, i, ], [, j, ]]
[[, i, ], [, j, ], =, f, ., partialDerivativeYY, (, ), ;, partialDerivatives, [, 4, ], [, i, ]]
[[, 3, ], [, i, ], [, j, ], =, f, ., partialDerivativeYY, (, ), ;, partialDerivatives, [, 4, ]]
[], [, i, ], [, j, ], =, f, ., partialDerivativeYY, (, ), ;, partialDerivatives, [, 4, ], [, i]
[], [, j, ], =, f, ., partialDerivativeYY, (, ), ;, partialDerivatives, [, 4, ], [, i, ], [, j]
[], =, f, ., partialDerivativeYY, (, ), ;, partialDerivatives, [, 4, ], [, i, ], [, j, ], =, f]
[;, partialDerivatives, [, 4, ], [, i, ], [, j, ], =, f, ., partialDerivativeXY, (, ), ;, }, }]
[., partialDerivativeYY, (, ), ;, partialDerivatives, [, 4, ], [, i, ], [, j, ], =, f, ., partialDerivativeXY, (]
[=, f, ., partialDerivativeXY, (, ), ;, }, }, }, private, int, searchIndex, (, double, c, ,, double, [, ]]
[[, j, ], =, f, ., partialDerivativeXY, (, ), ;, }, }, }, private, int, searchIndex, (, double, c, ,]
[[, i, ], [, j, ], =, f, ., partialDerivativeXY, (, ), ;, }, }, }, private, int, searchIndex, (]
[[, 4, ], [, i, ], [, j, ], =, f, ., partialDerivativeXY, (, ), ;, }, }, }, private]
[], [, i, ], [, j, ], =, f, ., partialDerivativeXY, (, ), ;, }, }, }, private, int, searchIndex]
[], [, j, ], =, f, ., partialDerivativeXY, (, ), ;, }, }, }, private, int, searchIndex, (, double, c]
[], =, f, ., partialDerivativeXY, (, ), ;, }, }, }, private, int, searchIndex, (, double, c, ,, double, []
[;, }, }, }, private, int, searchIndex, (, double, c, ,, double, [, ], val, ), {, final, int, r]
[., partialDerivativeXY, (, ), ;, }, }, }, private, int, searchIndex, (, double, c, ,, double, [, ], val, )]
[;, if, (, r, ==, -, 1, ||, r, ==, -, val, ., length, -, 1, ), {, throw, new]
[., binarySearch, (, val, ,, c, ), ;, if, (, r, ==, -, 1, ||, r, ==, -, val, .]
[,, c, ), ;, if, (, r, ==, -, 1, ||, r, ==, -, val, ., length, -, 1, )]
[), ;, if, (, r, ==, -, 1, ||, r, ==, -, val, ., length, -, 1, ), {, throw]
[), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,, val, [, val, ., length, -, 1]
[||, r, ==, -, val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0]
[==, -, 1, ||, r, ==, -, val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,]
[||, r, ==, -, val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0]
[||, r, ==, -, val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0]
[), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,, val, [, val, ., length, -, 1]
[==, -, val, ., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,]
[), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,, val, [, val, ., length, -, 1]
[-, 1, ), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,, val, [, val, ., length]
[-, 1, ), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,, val, [, val, ., length]
[., length, -, 1, ), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,, val, [, val]
[), {, throw, new, OutOfRangeException, (, c, ,, val, [, 0, ], ,, val, [, val, ., length, -, 1]
[;, }, if, (, r, <, 0, ), {, return, -, r, -, 2, ;, }, final, int, last, =]
[,, val, [, 0, ], ,, val, [, val, ., length, -, 1, ], ), ;, }, if, (, r]
[,, val, [, val, ., length, -, 1, ], ), ;, }, if, (, r, <, 0, ), {, return]
[[, 0, ], ,, val, [, val, ., length, -, 1, ], ), ;, }, if, (, r, <, 0]
[], ,, val, [, val, ., length, -, 1, ], ), ;, }, if, (, r, <, 0, ), {]
[), ;, }, if, (, r, <, 0, ), {, return, -, r, -, 2, ;, }, final, int, last]
[[, val, ., length, -, 1, ], ), ;, }, if, (, r, <, 0, ), {, return, -, r]
[], ), ;, }, if, (, r, <, 0, ), {, return, -, r, -, 2, ;, }, final, int]
[-, 1, ], ), ;, }, if, (, r, <, 0, ), {, return, -, r, -, 2, ;, }]
[., length, -, 1, ], ), ;, }, if, (, r, <, 0, ), {, return, -, r, -, 2]
[], ), ;, }, if, (, r, <, 0, ), {, return, -, r, -, 2, ;, }, final, int]
[), {, return, -, r, -, 2, ;, }, final, int, last, =, val, ., length, -, 1, ;, if]
[<, 0, ), {, return, -, r, -, 2, ;, }, final, int, last, =, val, ., length, -, 1]
[), {, return, -, r, -, 2, ;, }, final, int, last, =, val, ., length, -, 1, ;, if]
[;, }, final, int, last, =, val, ., length, -, 1, ;, if, (, r, ==, last, ), {, return]
[-, 2, ;, }, final, int, last, =, val, ., length, -, 1, ;, if, (, r, ==, last, )]
[-, 2, ;, }, final, int, last, =, val, ., length, -, 1, ;, if, (, r, ==, last, )]
[;, }, final, int, last, =, val, ., length, -, 1, ;, if, (, r, ==, last, ), {, return]
[;, if, (, r, ==, last, ), {, return, last, -, 1, ;, }, return, r, ;, }, private, double]
[-, 1, ;, if, (, r, ==, last, ), {, return, last, -, 1, ;, }, return, r, ;, }]
[., length, -, 1, ;, if, (, r, ==, last, ), {, return, last, -, 1, ;, }, return, r]
[;, if, (, r, ==, last, ), {, return, last, -, 1, ;, }, return, r, ;, }, private, double]
[), {, return, last, -, 1, ;, }, return, r, ;, }, private, double, [, ], computeSplineCoefficients, (, double, []
[==, last, ), {, return, last, -, 1, ;, }, return, r, ;, }, private, double, [, ], computeSplineCoefficients, (]
[), {, return, last, -, 1, ;, }, return, r, ;, }, private, double, [, ], computeSplineCoefficients, (, double, []
[;, }, return, r, ;, }, private, double, [, ], computeSplineCoefficients, (, double, [, ], beta, ), {, final, double]
[-, 1, ;, }, return, r, ;, }, private, double, [, ], computeSplineCoefficients, (, double, [, ], beta, ), {]
[;, }, return, r, ;, }, private, double, [, ], computeSplineCoefficients, (, double, [, ], beta, ), {, final, double]
[;, }, private, double, [, ], computeSplineCoefficients, (, double, [, ], beta, ), {, final, double, [, ], a, =]
[;, for, (, int, i, =, 0, ;, i, <, NUM_COEFF, ;, i, ++, ), {, double, result, =, 0]
[], ;, for, (, int, i, =, 0, ;, i, <, NUM_COEFF, ;, i, ++, ), {, double, result, =]
[;, i, <, NUM_COEFF, ;, i, ++, ), {, double, result, =, 0, ;, final, double, [, ], row, =]
[;, i, ++, ), {, double, result, =, 0, ;, final, double, [, ], row, =, AINV, [, i, ]]
[<, NUM_COEFF, ;, i, ++, ), {, double, result, =, 0, ;, final, double, [, ], row, =, AINV, []
[;, i, ++, ), {, double, result, =, 0, ;, final, double, [, ], row, =, AINV, [, i, ]]
[), {, double, result, =, 0, ;, final, double, [, ], row, =, AINV, [, i, ], ;, for, (]
[++, ), {, double, result, =, 0, ;, final, double, [, ], row, =, AINV, [, i, ], ;, for]
[;, final, double, [, ], row, =, AINV, [, i, ], ;, for, (, int, j, =, 0, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, NUM_COEFF, ;, j, ++, ), {, result, +=, row, []
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, NUM_COEFF, ;, j, ++, ), {, result]
[], ;, for, (, int, j, =, 0, ;, j, <, NUM_COEFF, ;, j, ++, ), {, result, +=, row]
[;, j, <, NUM_COEFF, ;, j, ++, ), {, result, +=, row, [, j, ], *, beta, [, j, ]]
[;, j, ++, ), {, result, +=, row, [, j, ], *, beta, [, j, ], ;, }, a, []
[<, NUM_COEFF, ;, j, ++, ), {, result, +=, row, [, j, ], *, beta, [, j, ], ;, }]
[;, j, ++, ), {, result, +=, row, [, j, ], *, beta, [, j, ], ;, }, a, []
[), {, result, +=, row, [, j, ], *, beta, [, j, ], ;, }, a, [, i, ], =]
[++, ), {, result, +=, row, [, j, ], *, beta, [, j, ], ;, }, a, [, i, ]]
[+=, row, [, j, ], *, beta, [, j, ], ;, }, a, [, i, ], =, result, ;, }]
[;, }, a, [, i, ], =, result, ;, }, return, a, ;, }, }, class, BicubicSplineFunction, implements, BivariateFunction, {]
[*, beta, [, j, ], ;, }, a, [, i, ], =, result, ;, }, return, a, ;, }, }]
[[, j, ], *, beta, [, j, ], ;, }, a, [, i, ], =, result, ;, }, return, a]
[], *, beta, [, j, ], ;, }, a, [, i, ], =, result, ;, }, return, a, ;, }]
[;, }, a, [, i, ], =, result, ;, }, return, a, ;, }, }, class, BicubicSplineFunction, implements, BivariateFunction, {]
[[, j, ], ;, }, a, [, i, ], =, result, ;, }, return, a, ;, }, }, class, BicubicSplineFunction]
[], ;, }, a, [, i, ], =, result, ;, }, return, a, ;, }, }, class, BicubicSplineFunction, implements, BivariateFunction]
[=, result, ;, }, return, a, ;, }, }, class, BicubicSplineFunction, implements, BivariateFunction, {, private, static, final, short, N, =]
[[, i, ], =, result, ;, }, return, a, ;, }, }, class, BicubicSplineFunction, implements, BivariateFunction, {, private, static, final]
[], =, result, ;, }, return, a, ;, }, }, class, BicubicSplineFunction, implements, BivariateFunction, {, private, static, final, short, N]
[;, }, return, a, ;, }, }, class, BicubicSplineFunction, implements, BivariateFunction, {, private, static, final, short, N, =, 4, ;]
[;, }, }, class, BicubicSplineFunction, implements, BivariateFunction, {, private, static, final, short, N, =, 4, ;, private, final, double, []
[;, private, final, double, [, ], [, ], a, ;, private, BivariateFunction, partialDerivativeX, ;, private, BivariateFunction, partialDerivativeY, ;, private, BivariateFunction]
[=, new, double, [, N, ], [, N, ], ;, for, (, int, i, =, 0, ;, i, <, N]
[., a, =, new, double, [, N, ], [, N, ], ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j]
[], [, N, ], ;, for, (, int, i, =, 0, ;, i, <, N, ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int]
[;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {]
[<, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, this, ., a]
[++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, this, .]
[;, j, <, N, ;, j, ++, ), {, this, ., a, [, i, ], [, j, ], =, a]
[;, j, ++, ), {, this, ., a, [, i, ], [, j, ], =, a, [, i, *, N]
[<, N, ;, j, ++, ), {, this, ., a, [, i, ], [, j, ], =, a, [, i]
[;, j, ++, ), {, this, ., a, [, i, ], [, j, ], =, a, [, i, *, N]
[), {, this, ., a, [, i, ], [, j, ], =, a, [, i, *, N, +, j, ]]
[++, ), {, this, ., a, [, i, ], [, j, ], =, a, [, i, *, N, +, j]
[=, a, [, i, *, N, +, j, ], ;, }, }, }, public, double, value, (, double, x, ,]
[[, j, ], =, a, [, i, *, N, +, j, ], ;, }, }, }, public, double, value, (]
[[, i, ], [, j, ], =, a, [, i, *, N, +, j, ], ;, }, }, }, public]
[., a, [, i, ], [, j, ], =, a, [, i, *, N, +, j, ], ;, }, }]
[], [, j, ], =, a, [, i, *, N, +, j, ], ;, }, }, }, public, double, value]
[], =, a, [, i, *, N, +, j, ], ;, }, }, }, public, double, value, (, double, x]
[;, }, }, }, public, double, value, (, double, x, ,, double, y, ), {, if, (, x, <, 0]
[[, i, *, N, +, j, ], ;, }, }, }, public, double, value, (, double, x, ,, double, y]
[], ;, }, }, }, public, double, value, (, double, x, ,, double, y, ), {, if, (, x, <]
[+, j, ], ;, }, }, }, public, double, value, (, double, x, ,, double, y, ), {, if, (]
[*, N, +, j, ], ;, }, }, }, public, double, value, (, double, x, ,, double, y, ), {]
[+, j, ], ;, }, }, }, public, double, value, (, double, x, ,, double, y, ), {, if, (]
[], ;, }, }, }, public, double, value, (, double, x, ,, double, y, ), {, if, (, x, <]
[), {, throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }, if, (, y, <, 0, ||]
[||, x, >, 1, ), {, throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }, if, (]
[<, 0, ||, x, >, 1, ), {, throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }]
[||, x, >, 1, ), {, throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }, if, (]
[), {, throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }, if, (, y, <, 0, ||]
[>, 1, ), {, throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }, if, (, y, <]
[), {, throw, new, OutOfRangeException, (, x, ,, 0, ,, 1, ), ;, }, if, (, y, <, 0, ||]
[;, }, if, (, y, <, 0, ||, y, >, 1, ), {, throw, new, OutOfRangeException, (, y, ,, 0]
[,, 0, ,, 1, ), ;, }, if, (, y, <, 0, ||, y, >, 1, ), {, throw, new]
[,, 1, ), ;, }, if, (, y, <, 0, ||, y, >, 1, ), {, throw, new, OutOfRangeException, (]
[), ;, }, if, (, y, <, 0, ||, y, >, 1, ), {, throw, new, OutOfRangeException, (, y, ,]
[), {, throw, new, OutOfRangeException, (, y, ,, 0, ,, 1, ), ;, }, final, double, x2, =, x, *]
[||, y, >, 1, ), {, throw, new, OutOfRangeException, (, y, ,, 0, ,, 1, ), ;, }, final, double]
[<, 0, ||, y, >, 1, ), {, throw, new, OutOfRangeException, (, y, ,, 0, ,, 1, ), ;, }]
[||, y, >, 1, ), {, throw, new, OutOfRangeException, (, y, ,, 0, ,, 1, ), ;, }, final, double]
[), {, throw, new, OutOfRangeException, (, y, ,, 0, ,, 1, ), ;, }, final, double, x2, =, x, *]
[>, 1, ), {, throw, new, OutOfRangeException, (, y, ,, 0, ,, 1, ), ;, }, final, double, x2, =]
[), {, throw, new, OutOfRangeException, (, y, ,, 0, ,, 1, ), ;, }, final, double, x2, =, x, *]
[;, }, final, double, x2, =, x, *, x, ;, final, double, x3, =, x2, *, x, ;, final, double]
[,, 0, ,, 1, ), ;, }, final, double, x2, =, x, *, x, ;, final, double, x3, =, x2]
[,, 1, ), ;, }, final, double, x2, =, x, *, x, ;, final, double, x3, =, x2, *, x]
[), ;, }, final, double, x2, =, x, *, x, ;, final, double, x3, =, x2, *, x, ;, final]
[;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,]
[*, x, ;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,]
[;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,]
[;, final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, y2]
[*, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final]
[;, final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, y2]
[;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *, y, ;, final, double, []
[,, x, ,, x2, ,, x3, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =]
[,, x2, ,, x3, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *]
[,, x3, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *, y, ;]
[}, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *, y, ;, final, double]
[;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,]
[*, y, ;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,]
[;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,]
[;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (]
[*, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return]
[;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (]
[;, return, apply, (, pX, ,, pY, ,, a, ), ;, }, private, double, apply, (, double, [, ], pX]
[,, y, ,, y2, ,, y3, }, ;, return, apply, (, pX, ,, pY, ,, a, ), ;, }, private]
[,, y2, ,, y3, }, ;, return, apply, (, pX, ,, pY, ,, a, ), ;, }, private, double, apply]
[,, y3, }, ;, return, apply, (, pX, ,, pY, ,, a, ), ;, }, private, double, apply, (, double]
[}, ;, return, apply, (, pX, ,, pY, ,, a, ), ;, }, private, double, apply, (, double, [, ]]
[;, }, private, double, apply, (, double, [, ], pX, ,, double, [, ], pY, ,, double, [, ], []
[,, pY, ,, a, ), ;, }, private, double, apply, (, double, [, ], pX, ,, double, [, ], pY]
[,, a, ), ;, }, private, double, apply, (, double, [, ], pX, ,, double, [, ], pY, ,, double]
[), ;, }, private, double, apply, (, double, [, ], pX, ,, double, [, ], pY, ,, double, [, ]]
[;, for, (, int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j]
[;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {]
[<, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, result, +=, coeff]
[++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, result, +=]
[;, j, <, N, ;, j, ++, ), {, result, +=, coeff, [, i, ], [, j, ], *, pX]
[;, j, ++, ), {, result, +=, coeff, [, i, ], [, j, ], *, pX, [, i, ], *]
[<, N, ;, j, ++, ), {, result, +=, coeff, [, i, ], [, j, ], *, pX, [, i]
[;, j, ++, ), {, result, +=, coeff, [, i, ], [, j, ], *, pX, [, i, ], *]
[), {, result, +=, coeff, [, i, ], [, j, ], *, pX, [, i, ], *, pY, [, j]
[++, ), {, result, +=, coeff, [, i, ], [, j, ], *, pX, [, i, ], *, pY, []
[+=, coeff, [, i, ], [, j, ], *, pX, [, i, ], *, pY, [, j, ], ;, }]
[;, }, }, return, result, ;, }, public, BivariateFunction, partialDerivativeX, (, ), {, if, (, partialDerivativeX, ==, null, ), {]
[*, pY, [, j, ], ;, }, }, return, result, ;, }, public, BivariateFunction, partialDerivativeX, (, ), {, if, (]
[*, pX, [, i, ], *, pY, [, j, ], ;, }, }, return, result, ;, }, public, BivariateFunction, partialDerivativeX]
[[, j, ], *, pX, [, i, ], *, pY, [, j, ], ;, }, }, return, result, ;, }]
[[, i, ], [, j, ], *, pX, [, i, ], *, pY, [, j, ], ;, }, }, return]
[], [, j, ], *, pX, [, i, ], *, pY, [, j, ], ;, }, }, return, result, ;]
[], *, pX, [, i, ], *, pY, [, j, ], ;, }, }, return, result, ;, }, public, BivariateFunction]
[*, pY, [, j, ], ;, }, }, return, result, ;, }, public, BivariateFunction, partialDerivativeX, (, ), {, if, (]
[[, i, ], *, pY, [, j, ], ;, }, }, return, result, ;, }, public, BivariateFunction, partialDerivativeX, (, )]
[], *, pY, [, j, ], ;, }, }, return, result, ;, }, public, BivariateFunction, partialDerivativeX, (, ), {, if]
[;, }, }, return, result, ;, }, public, BivariateFunction, partialDerivativeX, (, ), {, if, (, partialDerivativeX, ==, null, ), {]
[[, j, ], ;, }, }, return, result, ;, }, public, BivariateFunction, partialDerivativeX, (, ), {, if, (, partialDerivativeX, ==]
[], ;, }, }, return, result, ;, }, public, BivariateFunction, partialDerivativeX, (, ), {, if, (, partialDerivativeX, ==, null, )]
[;, }, public, BivariateFunction, partialDerivativeX, (, ), {, if, (, partialDerivativeX, ==, null, ), {, computePartialDerivatives, (, ), ;, }]
[), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeX, ;, }, public, BivariateFunction, partialDerivativeY, (, ), {, if, (, partialDerivativeY]
[==, null, ), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeX, ;, }, public, BivariateFunction, partialDerivativeY, (, ), {, if]
[), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeX, ;, }, public, BivariateFunction, partialDerivativeY, (, ), {, if, (, partialDerivativeY]
[;, }, return, partialDerivativeX, ;, }, public, BivariateFunction, partialDerivativeY, (, ), {, if, (, partialDerivativeY, ==, null, ), {, computePartialDerivatives]
[;, }, public, BivariateFunction, partialDerivativeY, (, ), {, if, (, partialDerivativeY, ==, null, ), {, computePartialDerivatives, (, ), ;, }]
[), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeY, ;, }, public, BivariateFunction, partialDerivativeXX, (, ), {, if, (, partialDerivativeXX]
[==, null, ), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeY, ;, }, public, BivariateFunction, partialDerivativeXX, (, ), {, if]
[), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeY, ;, }, public, BivariateFunction, partialDerivativeXX, (, ), {, if, (, partialDerivativeXX]
[;, }, return, partialDerivativeY, ;, }, public, BivariateFunction, partialDerivativeXX, (, ), {, if, (, partialDerivativeXX, ==, null, ), {, computePartialDerivatives]
[;, }, public, BivariateFunction, partialDerivativeXX, (, ), {, if, (, partialDerivativeXX, ==, null, ), {, computePartialDerivatives, (, ), ;, }]
[), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeXX, ;, }, public, BivariateFunction, partialDerivativeYY, (, ), {, if, (, partialDerivativeYY]
[==, null, ), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeXX, ;, }, public, BivariateFunction, partialDerivativeYY, (, ), {, if]
[), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeXX, ;, }, public, BivariateFunction, partialDerivativeYY, (, ), {, if, (, partialDerivativeYY]
[;, }, return, partialDerivativeXX, ;, }, public, BivariateFunction, partialDerivativeYY, (, ), {, if, (, partialDerivativeYY, ==, null, ), {, computePartialDerivatives]
[;, }, public, BivariateFunction, partialDerivativeYY, (, ), {, if, (, partialDerivativeYY, ==, null, ), {, computePartialDerivatives, (, ), ;, }]
[), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeYY, ;, }, public, BivariateFunction, partialDerivativeXY, (, ), {, if, (, partialDerivativeXY]
[==, null, ), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeYY, ;, }, public, BivariateFunction, partialDerivativeXY, (, ), {, if]
[), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeYY, ;, }, public, BivariateFunction, partialDerivativeXY, (, ), {, if, (, partialDerivativeXY]
[;, }, return, partialDerivativeYY, ;, }, public, BivariateFunction, partialDerivativeXY, (, ), {, if, (, partialDerivativeXY, ==, null, ), {, computePartialDerivatives]
[;, }, public, BivariateFunction, partialDerivativeXY, (, ), {, if, (, partialDerivativeXY, ==, null, ), {, computePartialDerivatives, (, ), ;, }]
[), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeXY, ;, }, private, void, computePartialDerivatives, (, ), {, final, double, []
[==, null, ), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeXY, ;, }, private, void, computePartialDerivatives, (, ), {, final]
[), {, computePartialDerivatives, (, ), ;, }, return, partialDerivativeXY, ;, }, private, void, computePartialDerivatives, (, ), {, final, double, []
[;, }, return, partialDerivativeXY, ;, }, private, void, computePartialDerivatives, (, ), {, final, double, [, ], [, ], aX, =]
[;, }, private, void, computePartialDerivatives, (, ), {, final, double, [, ], [, ], aX, =, new, double, [, N]
[;, final, double, [, ], [, ], aY, =, new, double, [, N, ], [, N, ], ;, final, double]
[], [, N, ], ;, final, double, [, ], [, ], aY, =, new, double, [, N, ], [, N]
[], ;, final, double, [, ], [, ], aY, =, new, double, [, N, ], [, N, ], ;, final]
[;, final, double, [, ], [, ], aXX, =, new, double, [, N, ], [, N, ], ;, final, double]
[], [, N, ], ;, final, double, [, ], [, ], aXX, =, new, double, [, N, ], [, N]
[], ;, final, double, [, ], [, ], aXX, =, new, double, [, N, ], [, N, ], ;, final]
[;, final, double, [, ], [, ], aYY, =, new, double, [, N, ], [, N, ], ;, final, double]
[], [, N, ], ;, final, double, [, ], [, ], aYY, =, new, double, [, N, ], [, N]
[], ;, final, double, [, ], [, ], aYY, =, new, double, [, N, ], [, N, ], ;, final]
[;, final, double, [, ], [, ], aXY, =, new, double, [, N, ], [, N, ], ;, for, (]
[], [, N, ], ;, final, double, [, ], [, ], aXY, =, new, double, [, N, ], [, N]
[], ;, final, double, [, ], [, ], aXY, =, new, double, [, N, ], [, N, ], ;, for]
[;, for, (, int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int, j]
[], [, N, ], ;, for, (, int, i, =, 0, ;, i, <, N, ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, N, ;, i, ++, ), {, for, (, int]
[;, i, <, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {]
[<, N, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, final, double, c]
[++, ), {, for, (, int, j, =, 0, ;, j, <, N, ;, j, ++, ), {, final, double]
[;, j, <, N, ;, j, ++, ), {, final, double, c, =, a, [, i, ], [, j, ]]
[;, j, ++, ), {, final, double, c, =, a, [, i, ], [, j, ], ;, aX, [, i]
[<, N, ;, j, ++, ), {, final, double, c, =, a, [, i, ], [, j, ], ;, aX]
[;, j, ++, ), {, final, double, c, =, a, [, i, ], [, j, ], ;, aX, [, i]
[), {, final, double, c, =, a, [, i, ], [, j, ], ;, aX, [, i, ], [, j]
[++, ), {, final, double, c, =, a, [, i, ], [, j, ], ;, aX, [, i, ], []
[;, aX, [, i, ], [, j, ], =, i, *, c, ;, aY, [, i, ], [, j, ]]
[[, j, ], ;, aX, [, i, ], [, j, ], =, i, *, c, ;, aY, [, i, ]]
[[, i, ], [, j, ], ;, aX, [, i, ], [, j, ], =, i, *, c, ;, aY]
[], [, j, ], ;, aX, [, i, ], [, j, ], =, i, *, c, ;, aY, [, i]
[], ;, aX, [, i, ], [, j, ], =, i, *, c, ;, aY, [, i, ], [, j]
[=, i, *, c, ;, aY, [, i, ], [, j, ], =, j, *, c, ;, aXX, [, i]
[[, j, ], =, i, *, c, ;, aY, [, i, ], [, j, ], =, j, *, c, ;]
[[, i, ], [, j, ], =, i, *, c, ;, aY, [, i, ], [, j, ], =, j]
[], [, j, ], =, i, *, c, ;, aY, [, i, ], [, j, ], =, j, *, c]
[], =, i, *, c, ;, aY, [, i, ], [, j, ], =, j, *, c, ;, aXX, []
[;, aY, [, i, ], [, j, ], =, j, *, c, ;, aXX, [, i, ], [, j, ]]
[*, c, ;, aY, [, i, ], [, j, ], =, j, *, c, ;, aXX, [, i, ], []
[;, aY, [, i, ], [, j, ], =, j, *, c, ;, aXX, [, i, ], [, j, ]]
[=, j, *, c, ;, aXX, [, i, ], [, j, ], =, (, i, -, 1, ), *, aX]
[[, j, ], =, j, *, c, ;, aXX, [, i, ], [, j, ], =, (, i, -, 1]
[[, i, ], [, j, ], =, j, *, c, ;, aXX, [, i, ], [, j, ], =, (]
[], [, j, ], =, j, *, c, ;, aXX, [, i, ], [, j, ], =, (, i, -]
[], =, j, *, c, ;, aXX, [, i, ], [, j, ], =, (, i, -, 1, ), *]
[;, aXX, [, i, ], [, j, ], =, (, i, -, 1, ), *, aX, [, i, ], []
[*, c, ;, aXX, [, i, ], [, j, ], =, (, i, -, 1, ), *, aX, [, i]
[;, aXX, [, i, ], [, j, ], =, (, i, -, 1, ), *, aX, [, i, ], []
[=, (, i, -, 1, ), *, aX, [, i, ], [, j, ], ;, aYY, [, i, ], []
[[, j, ], =, (, i, -, 1, ), *, aX, [, i, ], [, j, ], ;, aYY, []
[[, i, ], [, j, ], =, (, i, -, 1, ), *, aX, [, i, ], [, j, ]]
[], [, j, ], =, (, i, -, 1, ), *, aX, [, i, ], [, j, ], ;, aYY]
[], =, (, i, -, 1, ), *, aX, [, i, ], [, j, ], ;, aYY, [, i, ]]
[;, aYY, [, i, ], [, j, ], =, (, j, -, 1, ), *, aY, [, i, ], []
[*, aX, [, i, ], [, j, ], ;, aYY, [, i, ], [, j, ], =, (, j, -]
[), *, aX, [, i, ], [, j, ], ;, aYY, [, i, ], [, j, ], =, (, j]
[-, 1, ), *, aX, [, i, ], [, j, ], ;, aYY, [, i, ], [, j, ], =]
[), *, aX, [, i, ], [, j, ], ;, aYY, [, i, ], [, j, ], =, (, j]
[;, aYY, [, i, ], [, j, ], =, (, j, -, 1, ), *, aY, [, i, ], []
[[, j, ], ;, aYY, [, i, ], [, j, ], =, (, j, -, 1, ), *, aY, []
[[, i, ], [, j, ], ;, aYY, [, i, ], [, j, ], =, (, j, -, 1, )]
[], [, j, ], ;, aYY, [, i, ], [, j, ], =, (, j, -, 1, ), *, aY]
[], ;, aYY, [, i, ], [, j, ], =, (, j, -, 1, ), *, aY, [, i, ]]
[=, (, j, -, 1, ), *, aY, [, i, ], [, j, ], ;, aXY, [, i, ], []
[[, j, ], =, (, j, -, 1, ), *, aY, [, i, ], [, j, ], ;, aXY, []
[[, i, ], [, j, ], =, (, j, -, 1, ), *, aY, [, i, ], [, j, ]]
[], [, j, ], =, (, j, -, 1, ), *, aY, [, i, ], [, j, ], ;, aXY]
[], =, (, j, -, 1, ), *, aY, [, i, ], [, j, ], ;, aXY, [, i, ]]
[;, aXY, [, i, ], [, j, ], =, j, *, aX, [, i, ], [, j, ], ;, }]
[*, aY, [, i, ], [, j, ], ;, aXY, [, i, ], [, j, ], =, j, *, aX]
[), *, aY, [, i, ], [, j, ], ;, aXY, [, i, ], [, j, ], =, j, *]
[-, 1, ), *, aY, [, i, ], [, j, ], ;, aXY, [, i, ], [, j, ], =]
[), *, aY, [, i, ], [, j, ], ;, aXY, [, i, ], [, j, ], =, j, *]
[;, aXY, [, i, ], [, j, ], =, j, *, aX, [, i, ], [, j, ], ;, }]
[[, j, ], ;, aXY, [, i, ], [, j, ], =, j, *, aX, [, i, ], [, j]
[[, i, ], [, j, ], ;, aXY, [, i, ], [, j, ], =, j, *, aX, [, i]
[], [, j, ], ;, aXY, [, i, ], [, j, ], =, j, *, aX, [, i, ], []
[], ;, aXY, [, i, ], [, j, ], =, j, *, aX, [, i, ], [, j, ], ;]
[=, j, *, aX, [, i, ], [, j, ], ;, }, }, partialDerivativeX, =, new, BivariateFunction, (, ), {]
[[, j, ], =, j, *, aX, [, i, ], [, j, ], ;, }, }, partialDerivativeX, =, new, BivariateFunction]
[[, i, ], [, j, ], =, j, *, aX, [, i, ], [, j, ], ;, }, }, partialDerivativeX]
[], [, j, ], =, j, *, aX, [, i, ], [, j, ], ;, }, }, partialDerivativeX, =, new]
[], =, j, *, aX, [, i, ], [, j, ], ;, }, }, partialDerivativeX, =, new, BivariateFunction, (, )]
[;, }, }, partialDerivativeX, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, )]
[*, aX, [, i, ], [, j, ], ;, }, }, partialDerivativeX, =, new, BivariateFunction, (, ), {, public, double]
[;, }, }, partialDerivativeX, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, )]
[[, j, ], ;, }, }, partialDerivativeX, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,]
[[, i, ], [, j, ], ;, }, }, partialDerivativeX, =, new, BivariateFunction, (, ), {, public, double, value, (]
[], [, j, ], ;, }, }, partialDerivativeX, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x]
[], ;, }, }, partialDerivativeX, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y]
[=, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2]
[;, partialDerivativeY, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final]
[;, final, double, [, ], pX, =, {, 0, ,, 1, ,, x, ,, x2, }, ;, final, double, y2]
[*, x, ;, final, double, [, ], pX, =, {, 0, ,, 1, ,, x, ,, x2, }, ;, final]
[;, final, double, [, ], pX, =, {, 0, ,, 1, ,, x, ,, x2, }, ;, final, double, y2]
[;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *, y, ;, final, double, []
[,, 1, ,, x, ,, x2, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =]
[,, x, ,, x2, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *]
[,, x2, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *, y, ;]
[}, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *, y, ;, final, double]
[;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,]
[*, y, ;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,]
[;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,]
[;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (]
[*, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return]
[;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (]
[;, return, apply, (, pX, ,, pY, ,, aX, ), ;, }, }, ;, partialDerivativeY, =, new, BivariateFunction, (, )]
[,, y, ,, y2, ,, y3, }, ;, return, apply, (, pX, ,, pY, ,, aX, ), ;, }, }]
[,, y2, ,, y3, }, ;, return, apply, (, pX, ,, pY, ,, aX, ), ;, }, }, ;, partialDerivativeY]
[,, y3, }, ;, return, apply, (, pX, ,, pY, ,, aX, ), ;, }, }, ;, partialDerivativeY, =, new]
[}, ;, return, apply, (, pX, ,, pY, ,, aX, ), ;, }, }, ;, partialDerivativeY, =, new, BivariateFunction, (]
[;, }, }, ;, partialDerivativeY, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y]
[,, pY, ,, aX, ), ;, }, }, ;, partialDerivativeY, =, new, BivariateFunction, (, ), {, public, double, value, (]
[,, aX, ), ;, }, }, ;, partialDerivativeY, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x]
[), ;, }, }, ;, partialDerivativeY, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double]
[=, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2]
[;, partialDerivativeXX, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final]
[;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,]
[*, x, ;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,]
[;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,]
[;, final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, y2]
[*, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final]
[;, final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, y2]
[;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {, 0, ,, 1, ,]
[,, x, ,, x2, ,, x3, }, ;, final, double, y2, =, y, *, y, ;, final, double, [, ]]
[,, x2, ,, x3, }, ;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =]
[,, x3, }, ;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {, 0]
[}, ;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {, 0, ,, 1]
[;, final, double, [, ], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return, apply, (]
[*, y, ;, final, double, [, ], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return]
[;, final, double, [, ], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return, apply, (]
[;, return, apply, (, pX, ,, pY, ,, aY, ), ;, }, }, ;, partialDerivativeXX, =, new, BivariateFunction, (, )]
[,, 1, ,, y, ,, y2, }, ;, return, apply, (, pX, ,, pY, ,, aY, ), ;, }, }]
[,, y, ,, y2, }, ;, return, apply, (, pX, ,, pY, ,, aY, ), ;, }, }, ;, partialDerivativeXX]
[,, y2, }, ;, return, apply, (, pX, ,, pY, ,, aY, ), ;, }, }, ;, partialDerivativeXX, =, new]
[}, ;, return, apply, (, pX, ,, pY, ,, aY, ), ;, }, }, ;, partialDerivativeXX, =, new, BivariateFunction, (]
[;, }, }, ;, partialDerivativeXX, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y]
[,, pY, ,, aY, ), ;, }, }, ;, partialDerivativeXX, =, new, BivariateFunction, (, ), {, public, double, value, (]
[,, aY, ), ;, }, }, ;, partialDerivativeXX, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x]
[), ;, }, }, ;, partialDerivativeXX, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double]
[=, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, []
[;, partialDerivativeYY, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final]
[;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *, y, ;, final, double, []
[,, 0, ,, 1, ,, x, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =]
[,, 1, ,, x, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *]
[,, x, }, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *, y, ;]
[}, ;, final, double, y2, =, y, *, y, ;, final, double, y3, =, y2, *, y, ;, final, double]
[;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,]
[*, y, ;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,]
[;, final, double, y3, =, y2, *, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,]
[;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (]
[*, y, ;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return]
[;, final, double, [, ], pY, =, {, 1, ,, y, ,, y2, ,, y3, }, ;, return, apply, (]
[;, return, apply, (, pX, ,, pY, ,, aXX, ), ;, }, }, ;, partialDerivativeYY, =, new, BivariateFunction, (, )]
[,, y, ,, y2, ,, y3, }, ;, return, apply, (, pX, ,, pY, ,, aXX, ), ;, }, }]
[,, y2, ,, y3, }, ;, return, apply, (, pX, ,, pY, ,, aXX, ), ;, }, }, ;, partialDerivativeYY]
[,, y3, }, ;, return, apply, (, pX, ,, pY, ,, aXX, ), ;, }, }, ;, partialDerivativeYY, =, new]
[}, ;, return, apply, (, pX, ,, pY, ,, aXX, ), ;, }, }, ;, partialDerivativeYY, =, new, BivariateFunction, (]
[;, }, }, ;, partialDerivativeYY, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y]
[,, pY, ,, aXX, ), ;, }, }, ;, partialDerivativeYY, =, new, BivariateFunction, (, ), {, public, double, value, (]
[,, aXX, ), ;, }, }, ;, partialDerivativeYY, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x]
[), ;, }, }, ;, partialDerivativeYY, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double]
[=, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2]
[;, partialDerivativeXY, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final]
[;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,]
[*, x, ;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,]
[;, final, double, x3, =, x2, *, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,]
[;, final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, []
[*, x, ;, final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final]
[;, final, double, [, ], pX, =, {, 1, ,, x, ,, x2, ,, x3, }, ;, final, double, []
[;, final, double, [, ], pY, =, {, 0, ,, 0, ,, 1, ,, y, }, ;, return, apply, (]
[,, x, ,, x2, ,, x3, }, ;, final, double, [, ], pY, =, {, 0, ,, 0, ,, 1]
[,, x2, ,, x3, }, ;, final, double, [, ], pY, =, {, 0, ,, 0, ,, 1, ,, y]
[,, x3, }, ;, final, double, [, ], pY, =, {, 0, ,, 0, ,, 1, ,, y, }, ;]
[}, ;, final, double, [, ], pY, =, {, 0, ,, 0, ,, 1, ,, y, }, ;, return, apply]
[;, return, apply, (, pX, ,, pY, ,, aYY, ), ;, }, }, ;, partialDerivativeXY, =, new, BivariateFunction, (, )]
[,, 0, ,, 1, ,, y, }, ;, return, apply, (, pX, ,, pY, ,, aYY, ), ;, }, }]
[,, 1, ,, y, }, ;, return, apply, (, pX, ,, pY, ,, aYY, ), ;, }, }, ;, partialDerivativeXY]
[,, y, }, ;, return, apply, (, pX, ,, pY, ,, aYY, ), ;, }, }, ;, partialDerivativeXY, =, new]
[}, ;, return, apply, (, pX, ,, pY, ,, aYY, ), ;, }, }, ;, partialDerivativeXY, =, new, BivariateFunction, (]
[;, }, }, ;, partialDerivativeXY, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y]
[,, pY, ,, aYY, ), ;, }, }, ;, partialDerivativeXY, =, new, BivariateFunction, (, ), {, public, double, value, (]
[,, aYY, ), ;, }, }, ;, partialDerivativeXY, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x]
[), ;, }, }, ;, partialDerivativeXY, =, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double]
[=, new, BivariateFunction, (, ), {, public, double, value, (, double, x, ,, double, y, ), {, final, double, x2]
[;, }, }]
[;, final, double, [, ], pX, =, {, 0, ,, 1, ,, x, ,, x2, }, ;, final, double, y2]
[*, x, ;, final, double, [, ], pX, =, {, 0, ,, 1, ,, x, ,, x2, }, ;, final]
[;, final, double, [, ], pX, =, {, 0, ,, 1, ,, x, ,, x2, }, ;, final, double, y2]
[;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {, 0, ,, 1, ,]
[,, 1, ,, x, ,, x2, }, ;, final, double, y2, =, y, *, y, ;, final, double, [, ]]
[,, x, ,, x2, }, ;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =]
[,, x2, }, ;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {, 0]
[}, ;, final, double, y2, =, y, *, y, ;, final, double, [, ], pY, =, {, 0, ,, 1]
[;, final, double, [, ], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return, apply, (]
[*, y, ;, final, double, [, ], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return]
[;, final, double, [, ], pY, =, {, 0, ,, 1, ,, y, ,, y2, }, ;, return, apply, (]
[;, return, apply, (, pX, ,, pY, ,, aXY, ), ;, }, }, ;, }, }]
[,, 1, ,, y, ,, y2, }, ;, return, apply, (, pX, ,, pY, ,, aXY, ), ;, }, }]
[,, y, ,, y2, }, ;, return, apply, (, pX, ,, pY, ,, aXY, ), ;, }, }, ;, }]
[,, y2, }, ;, return, apply, (, pX, ,, pY, ,, aXY, ), ;, }, }, ;, }, }]
[}, ;, return, apply, (, pX, ,, pY, ,, aXY, ), ;, }, }, ;, }, }]
[;, }, }, ;, }, }]
[,, pY, ,, aXY, ), ;, }, }, ;, }, }]
[,, aXY, ), ;, }, }, ;, }, }]
[), ;, }, }, ;, }, }]
