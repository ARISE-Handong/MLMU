[Node, thisValue, ;, final, Node, parameters, ;, public, Bind, (, Node, target, ,, Node, thisValue, ,, Node, parameters, ), {]
[Node, thisValue, ;, final, Node, parameters, ;, public, Bind, (, Node, target, ,, Node, thisValue, ,, Node, parameters, ), {]
[Node, parameters, ;, public, Bind, (, Node, target, ,, Node, thisValue, ,, Node, parameters, ), {, this, ., target, =]
[;, public, Bind, (, Node, target, ,, Node, thisValue, ,, Node, parameters, ), {, this, ., target, =, target, ;]
[;, public, Bind, (, Node, target, ,, Node, thisValue, ,, Node, parameters, ), {, this, ., target, =, target, ;]
[Node, target, ,, Node, thisValue, ,, Node, parameters, ), {, this, ., target, =, target, ;, this, ., thisValue, =]
[,, Node, thisValue, ,, Node, parameters, ), {, this, ., target, =, target, ;, this, ., thisValue, =, thisValue, ;]
[,, Node, thisValue, ,, Node, parameters, ), {, this, ., target, =, target, ;, this, ., thisValue, =, thisValue, ;]
[Node, parameters, ), {, this, ., target, =, target, ;, this, ., thisValue, =, thisValue, ;, this, ., parameters, =]
[this, ., thisValue, =, thisValue, ;, this, ., parameters, =, parameters, ;, }, int, getBoundParameterCount, (, ), {, if, (]
[this, ., thisValue, =, thisValue, ;, this, ., parameters, =, parameters, ;, }, int, getBoundParameterCount, (, ), {, if, (]
[thisValue, =, thisValue, ;, this, ., parameters, =, parameters, ;, }, int, getBoundParameterCount, (, ), {, if, (, parameters, ==]
[this, ., parameters, =, parameters, ;, }, int, getBoundParameterCount, (, ), {, if, (, parameters, ==, null, ), {, return]
[}, int, getBoundParameterCount, (, ), {, if, (, parameters, ==, null, ), {, return, 0, ;, }, Node, paramParent, =]
[}, int, getBoundParameterCount, (, ), {, if, (, parameters, ==, null, ), {, return, 0, ;, }, Node, paramParent, =]
[(, parameters, ==, null, ), {, return, 0, ;, }, Node, paramParent, =, parameters, ., getParent, (, ), ;, return]
[(, parameters, ==, null, ), {, return, 0, ;, }, Node, paramParent, =, parameters, ., getParent, (, ), ;, return]
[(, parameters, ==, null, ), {, return, 0, ;, }, Node, paramParent, =, parameters, ., getParent, (, ), ;, return]
[return, 0, ;, }, Node, paramParent, =, parameters, ., getParent, (, ), ;, return, paramParent, ., getChildCount, (, ), -]
[return, 0, ;, }, Node, paramParent, =, parameters, ., getParent, (, ), ;, return, paramParent, ., getChildCount, (, ), -]
[Node, paramParent, =, parameters, ., getParent, (, ), ;, return, paramParent, ., getChildCount, (, ), -, paramParent, ., getIndexOfChild, (]
[String, subclassName, ;, final, String, superclassName, ;, public, SubclassRelationship, (, SubclassType, type, ,, Node, subclassNode, ,, Node, superclassNode, ), {]
[String, subclassName, ;, final, String, superclassName, ;, public, SubclassRelationship, (, SubclassType, type, ,, Node, subclassNode, ,, Node, superclassNode, ), {]
[String, superclassName, ;, public, SubclassRelationship, (, SubclassType, type, ,, Node, subclassNode, ,, Node, superclassNode, ), {, this, ., type, =]
[;, public, SubclassRelationship, (, SubclassType, type, ,, Node, subclassNode, ,, Node, superclassNode, ), {, this, ., type, =, type, ;]
[;, public, SubclassRelationship, (, SubclassType, type, ,, Node, subclassNode, ,, Node, superclassNode, ), {, this, ., type, =, type, ;]
[SubclassType, type, ,, Node, subclassNode, ,, Node, superclassNode, ), {, this, ., type, =, type, ;, this, ., subclassName, =]
[SubclassType, type, ,, Node, subclassNode, ,, Node, superclassNode, ), {, this, ., type, =, type, ;, this, ., subclassName, =]
[Node, superclassNode, ), {, this, ., type, =, type, ;, this, ., subclassName, =, subclassNode, ., getQualifiedName, (, ), ;]
[Node, superclassNode, ), {, this, ., type, =, type, ;, this, ., subclassName, =, subclassNode, ., getQualifiedName, (, ), ;]
[this, ., type, =, type, ;, this, ., subclassName, =, subclassNode, ., getQualifiedName, (, ), ;, this, ., superclassName, =]
[this, ., type, =, type, ;, this, ., subclassName, =, subclassNode, ., getQualifiedName, (, ), ;, this, ., superclassName, =]
[class, DelegateRelationship, {, final, String, delegateBase, ;, final, String, delegator, ;, DelegateRelationship, (, String, delegateBase, ,, String, delegator, ), {]
[class, DelegateRelationship, {, final, String, delegateBase, ;, final, String, delegator, ;, DelegateRelationship, (, String, delegateBase, ,, String, delegator, ), {]
[String, delegateBase, ;, final, String, delegator, ;, DelegateRelationship, (, String, delegateBase, ,, String, delegator, ), {, this, ., delegateBase, =]
[;, final, String, delegator, ;, DelegateRelationship, (, String, delegateBase, ,, String, delegator, ), {, this, ., delegateBase, =, delegateBase, ;]
[;, final, String, delegator, ;, DelegateRelationship, (, String, delegateBase, ,, String, delegator, ), {, this, ., delegateBase, =, delegateBase, ;]
[;, DelegateRelationship, (, String, delegateBase, ,, String, delegator, ), {, this, ., delegateBase, =, delegateBase, ;, this, ., delegator, =]
[final, Node, objectNode, ;, final, DiagnosticType, diagnosticType, ;, ObjectLiteralCast, (, String, typeName, ,, Node, objectNode, ,, DiagnosticType, diagnosticType, ), {]
[final, Node, objectNode, ;, final, DiagnosticType, diagnosticType, ;, ObjectLiteralCast, (, String, typeName, ,, Node, objectNode, ,, DiagnosticType, diagnosticType, ), {]
[final, DiagnosticType, diagnosticType, ;, ObjectLiteralCast, (, String, typeName, ,, Node, objectNode, ,, DiagnosticType, diagnosticType, ), {, this, ., typeName, =]
[diagnosticType, ;, ObjectLiteralCast, (, String, typeName, ,, Node, objectNode, ,, DiagnosticType, diagnosticType, ), {, this, ., typeName, =, typeName, ;]
[diagnosticType, ;, ObjectLiteralCast, (, String, typeName, ,, Node, objectNode, ,, DiagnosticType, diagnosticType, ), {, this, ., typeName, =, typeName, ;]
[String, typeName, ,, Node, objectNode, ,, DiagnosticType, diagnosticType, ), {, this, ., typeName, =, typeName, ;, this, ., objectNode, =]
[,, Node, objectNode, ,, DiagnosticType, diagnosticType, ), {, this, ., typeName, =, typeName, ;, this, ., objectNode, =, objectNode, ;]
[,, Node, objectNode, ,, DiagnosticType, diagnosticType, ), {, this, ., typeName, =, typeName, ;, this, ., objectNode, =, objectNode, ;]
[DiagnosticType, diagnosticType, ), {, this, ., typeName, =, typeName, ;, this, ., objectNode, =, objectNode, ;, this, ., diagnosticType, =]
[{, protected, final, String, functionName, ;, protected, final, JSTypeNative, assertedType, ;, public, AssertionFunctionSpec, (, String, functionName, ), {, this, (]
[final, String, functionName, ;, protected, final, JSTypeNative, assertedType, ;, public, AssertionFunctionSpec, (, String, functionName, ), {, this, (, functionName, ,]
[), {, this, (, functionName, ,, null, ), ;, }, public, AssertionFunctionSpec, (, String, functionName, ,, JSTypeNative, assertedType, ), {]
[), {, this, (, functionName, ,, null, ), ;, }, public, AssertionFunctionSpec, (, String, functionName, ,, JSTypeNative, assertedType, ), {]
[functionName, ,, null, ), ;, }, public, AssertionFunctionSpec, (, String, functionName, ,, JSTypeNative, assertedType, ), {, this, ., functionName, =]
[null, ), ;, }, public, AssertionFunctionSpec, (, String, functionName, ,, JSTypeNative, assertedType, ), {, this, ., functionName, =, functionName, ;]
[null, ), ;, }, public, AssertionFunctionSpec, (, String, functionName, ,, JSTypeNative, assertedType, ), {, this, ., functionName, =, functionName, ;]
[public, AssertionFunctionSpec, (, String, functionName, ,, JSTypeNative, assertedType, ), {, this, ., functionName, =, functionName, ;, this, ., assertedType, =]
[this, ., functionName, =, functionName, ;, this, ., assertedType, =, assertedType, ;, }, public, String, getFunctionName, (, ), {, return]
[}, public, String, getFunctionName, (, ), {, return, functionName, ;, }, public, Node, getAssertedParam, (, Node, firstParam, ), {, return]
[Node, firstParam, ), {, return, firstParam, ;, }, public, JSType, getAssertedType, (, Node, call, ,, JSTypeRegistry, registry, ), {, return]
[Node, firstParam, ), {, return, firstParam, ;, }, public, JSType, getAssertedType, (, Node, call, ,, JSTypeRegistry, registry, ), {, return]
[Node, firstParam, ), {, return, firstParam, ;, }, public, JSType, getAssertedType, (, Node, call, ,, JSTypeRegistry, registry, ), {, return]
[), {, return, firstParam, ;, }, public, JSType, getAssertedType, (, Node, call, ,, JSTypeRegistry, registry, ), {, return, assertedType, !=]
[return, firstParam, ;, }, public, JSType, getAssertedType, (, Node, call, ,, JSTypeRegistry, registry, ), {, return, assertedType, !=, null, ?]
[return, firstParam, ;, }, public, JSType, getAssertedType, (, Node, call, ,, JSTypeRegistry, registry, ), {, return, assertedType, !=, null, ?]
[public, JSType, getAssertedType, (, Node, call, ,, JSTypeRegistry, registry, ), {, return, assertedType, !=, null, ?, registry, ., getNativeType, (]
[(, Node, call, ,, JSTypeRegistry, registry, ), {, return, assertedType, !=, null, ?, registry, ., getNativeType, (, assertedType, ), :]
