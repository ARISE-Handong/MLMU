[{, private, int, [, ], p, ;, private, RealMatrix, cachedP, ;, public, RRQRDecomposition, (, RealMatrix, matrix, ), {, this, (]
[int, [, ], p, ;, private, RealMatrix, cachedP, ;, public, RRQRDecomposition, (, RealMatrix, matrix, ), {, this, (, matrix, ,]
[this, (, matrix, ,, 0d, ), ;, }, public, RRQRDecomposition, (, RealMatrix, matrix, ,, double, threshold, ), {, super, (]
[matrix, ,, 0d, ), ;, }, public, RRQRDecomposition, (, RealMatrix, matrix, ,, double, threshold, ), {, super, (, matrix, ,]
[matrix, ,, threshold, ), ;, }, @, Override, protected, void, decompose, (, double, [, ], [, ], qrt, ), {]
[threshold, ), ;, }, @, Override, protected, void, decompose, (, double, [, ], [, ], qrt, ), {, p, =]
[}, @, Override, protected, void, decompose, (, double, [, ], [, ], qrt, ), {, p, =, new, int, []
[}, @, Override, protected, void, decompose, (, double, [, ], [, ], qrt, ), {, p, =, new, int, []
[[, ], qrt, ), {, p, =, new, int, [, qrt, ., length, ], ;, for, (, int, i, =]
[qrt, ), {, p, =, new, int, [, qrt, ., length, ], ;, for, (, int, i, =, 0, ;]
[qrt, ), {, p, =, new, int, [, qrt, ., length, ], ;, for, (, int, i, =, 0, ;]
[{, p, =, new, int, [, qrt, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[{, p, =, new, int, [, qrt, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[int, [, qrt, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, p, ., length, ;]
[int, [, qrt, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, p, ., length, ;]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, p, ., length, ;, i, ++, ), {]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, p, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, p, ., length, ;, i, ++, ), {, p, []
[int, i, =, 0, ;, i, <, p, ., length, ;, i, ++, ), {, p, [, i, ], =]
[0, ;, i, <, p, ., length, ;, i, ++, ), {, p, [, i, ], =, i, ;, }]
[0, ;, i, <, p, ., length, ;, i, ++, ), {, p, [, i, ], =, i, ;, }]
[p, ., length, ;, i, ++, ), {, p, [, i, ], =, i, ;, }, super, ., decompose, (]
[@, Override, protected, void, performHouseholderReflection, (, int, minor, ,, double, [, ], [, ], qrt, ), {, double, l2NormSquaredMax, =]
[(, int, minor, ,, double, [, ], [, ], qrt, ), {, double, l2NormSquaredMax, =, 0, ;, int, l2NormSquaredMaxIndex, =]
[[, ], qrt, ), {, double, l2NormSquaredMax, =, 0, ;, int, l2NormSquaredMaxIndex, =, minor, ;, for, (, int, i, =]
[qrt, ), {, double, l2NormSquaredMax, =, 0, ;, int, l2NormSquaredMaxIndex, =, minor, ;, for, (, int, i, =, minor, ;]
[qrt, ), {, double, l2NormSquaredMax, =, 0, ;, int, l2NormSquaredMaxIndex, =, minor, ;, for, (, int, i, =, minor, ;]
[{, double, l2NormSquaredMax, =, 0, ;, int, l2NormSquaredMaxIndex, =, minor, ;, for, (, int, i, =, minor, ;, i, <]
[{, double, l2NormSquaredMax, =, 0, ;, int, l2NormSquaredMaxIndex, =, minor, ;, for, (, int, i, =, minor, ;, i, <]
[0, ;, int, l2NormSquaredMaxIndex, =, minor, ;, for, (, int, i, =, minor, ;, i, <, qrt, ., length, ;]
[0, ;, int, l2NormSquaredMaxIndex, =, minor, ;, for, (, int, i, =, minor, ;, i, <, qrt, ., length, ;]
[for, (, int, i, =, minor, ;, i, <, qrt, ., length, ;, i, ++, ), {, double, l2NormSquared, =]
[i, <, qrt, ., length, ;, i, ++, ), {, double, l2NormSquared, =, 0, ;, for, (, int, j, =]
[qrt, ., length, ;, i, ++, ), {, double, l2NormSquared, =, 0, ;, for, (, int, j, =, 0, ;]
[qrt, ., length, ;, i, ++, ), {, double, l2NormSquared, =, 0, ;, for, (, int, j, =, 0, ;]
[length, ;, i, ++, ), {, double, l2NormSquared, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[length, ;, i, ++, ), {, double, l2NormSquared, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[length, ;, i, ++, ), {, double, l2NormSquared, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[i, ++, ), {, double, l2NormSquared, =, 0, ;, for, (, int, j, =, 0, ;, j, <, qrt, []
[l2NormSquared, =, 0, ;, for, (, int, j, =, 0, ;, j, <, qrt, [, i, ], ., length, ;]
[l2NormSquared, =, 0, ;, for, (, int, j, =, 0, ;, j, <, qrt, [, i, ], ., length, ;]
[for, (, int, j, =, 0, ;, j, <, qrt, [, i, ], ., length, ;, j, ++, ), {]
[int, j, =, 0, ;, j, <, qrt, [, i, ], ., length, ;, j, ++, ), {, l2NormSquared, +=]
[int, j, =, 0, ;, j, <, qrt, [, i, ], ., length, ;, j, ++, ), {, l2NormSquared, +=]
[int, j, =, 0, ;, j, <, qrt, [, i, ], ., length, ;, j, ++, ), {, l2NormSquared, +=]
[int, j, =, 0, ;, j, <, qrt, [, i, ], ., length, ;, j, ++, ), {, l2NormSquared, +=]
[=, 0, ;, j, <, qrt, [, i, ], ., length, ;, j, ++, ), {, l2NormSquared, +=, qrt, []
[j, <, qrt, [, i, ], ., length, ;, j, ++, ), {, l2NormSquared, +=, qrt, [, i, ], []
[[, i, ], ., length, ;, j, ++, ), {, l2NormSquared, +=, qrt, [, i, ], [, j, ], *]
[[, i, ], ., length, ;, j, ++, ), {, l2NormSquared, +=, qrt, [, i, ], [, j, ], *]
[[, i, ], ., length, ;, j, ++, ), {, l2NormSquared, +=, qrt, [, i, ], [, j, ], *]
[], ., length, ;, j, ++, ), {, l2NormSquared, +=, qrt, [, i, ], [, j, ], *, qrt, []
[;, j, ++, ), {, l2NormSquared, +=, qrt, [, i, ], [, j, ], *, qrt, [, i, ], []
[+=, qrt, [, i, ], [, j, ], *, qrt, [, i, ], [, j, ], ;, }, if, (]
[+=, qrt, [, i, ], [, j, ], *, qrt, [, i, ], [, j, ], ;, }, if, (]
[[, i, ], [, j, ], *, qrt, [, i, ], [, j, ], ;, }, if, (, l2NormSquared, >]
[[, j, ], *, qrt, [, i, ], [, j, ], ;, }, if, (, l2NormSquared, >, l2NormSquaredMax, ), {]
[], *, qrt, [, i, ], [, j, ], ;, }, if, (, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =]
[qrt, [, i, ], [, j, ], ;, }, if, (, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =, l2NormSquared, ;]
[i, ], [, j, ], ;, }, if, (, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =, l2NormSquared, ;, l2NormSquaredMaxIndex, =]
[}, if, (, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =, l2NormSquared, ;, l2NormSquaredMaxIndex, =, i, ;, }, }, if, (]
[}, if, (, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =, l2NormSquared, ;, l2NormSquaredMaxIndex, =, i, ;, }, }, if, (]
[(, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =, l2NormSquared, ;, l2NormSquaredMaxIndex, =, i, ;, }, }, if, (, l2NormSquaredMaxIndex, !=]
[l2NormSquared, ;, l2NormSquaredMaxIndex, =, i, ;, }, }, if, (, l2NormSquaredMaxIndex, !=, minor, ), {, double, [, ], tmp1, =]
[l2NormSquared, ;, l2NormSquaredMaxIndex, =, i, ;, }, }, if, (, l2NormSquaredMaxIndex, !=, minor, ), {, double, [, ], tmp1, =]
[l2NormSquaredMaxIndex, =, i, ;, }, }, if, (, l2NormSquaredMaxIndex, !=, minor, ), {, double, [, ], tmp1, =, qrt, []
[;, }, }, if, (, l2NormSquaredMaxIndex, !=, minor, ), {, double, [, ], tmp1, =, qrt, [, minor, ], ;]
[;, }, }, if, (, l2NormSquaredMaxIndex, !=, minor, ), {, double, [, ], tmp1, =, qrt, [, minor, ], ;]
[}, if, (, l2NormSquaredMaxIndex, !=, minor, ), {, double, [, ], tmp1, =, qrt, [, minor, ], ;, qrt, []
[l2NormSquaredMaxIndex, !=, minor, ), {, double, [, ], tmp1, =, qrt, [, minor, ], ;, qrt, [, minor, ], =]
[l2NormSquaredMaxIndex, !=, minor, ), {, double, [, ], tmp1, =, qrt, [, minor, ], ;, qrt, [, minor, ], =]
[minor, ), {, double, [, ], tmp1, =, qrt, [, minor, ], ;, qrt, [, minor, ], =, qrt, []
[double, [, ], tmp1, =, qrt, [, minor, ], ;, qrt, [, minor, ], =, qrt, [, l2NormSquaredMaxIndex, ], ;]
[double, [, ], tmp1, =, qrt, [, minor, ], ;, qrt, [, minor, ], =, qrt, [, l2NormSquaredMaxIndex, ], ;]
[], tmp1, =, qrt, [, minor, ], ;, qrt, [, minor, ], =, qrt, [, l2NormSquaredMaxIndex, ], ;, qrt, []
[qrt, [, minor, ], ;, qrt, [, minor, ], =, qrt, [, l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =]
[qrt, [, minor, ], =, qrt, [, l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =]
[qrt, [, minor, ], =, qrt, [, l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =]
[minor, ], =, qrt, [, l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p, []
[qrt, [, l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p, [, minor, ], ;]
[qrt, [, l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p, [, minor, ], ;]
[l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p, [, minor, ], ;, p, []
[qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p, [, minor, ], ;, p, [, minor, ], =]
[qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p, [, minor, ], ;, p, [, minor, ], =]
[l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p, [, minor, ], ;, p, [, minor, ], =, p, []
[tmp1, ;, int, tmp2, =, p, [, minor, ], ;, p, [, minor, ], =, p, [, l2NormSquaredMaxIndex, ], ;]
[tmp1, ;, int, tmp2, =, p, [, minor, ], ;, p, [, minor, ], =, p, [, l2NormSquaredMaxIndex, ], ;]
[int, tmp2, =, p, [, minor, ], ;, p, [, minor, ], =, p, [, l2NormSquaredMaxIndex, ], ;, p, []
[p, [, minor, ], ;, p, [, minor, ], =, p, [, l2NormSquaredMaxIndex, ], ;, p, [, l2NormSquaredMaxIndex, ], =]
[], ;, p, [, minor, ], =, p, [, l2NormSquaredMaxIndex, ], ;, p, [, l2NormSquaredMaxIndex, ], =, tmp2, ;, }]
[], ;, p, [, minor, ], =, p, [, l2NormSquaredMaxIndex, ], ;, p, [, l2NormSquaredMaxIndex, ], =, tmp2, ;, }]
[minor, ], =, p, [, l2NormSquaredMaxIndex, ], ;, p, [, l2NormSquaredMaxIndex, ], =, tmp2, ;, }, super, ., performHouseholderReflection, (]
[=, p, [, l2NormSquaredMaxIndex, ], ;, p, [, l2NormSquaredMaxIndex, ], =, tmp2, ;, }, super, ., performHouseholderReflection, (, minor, ,]
[;, }, super, ., performHouseholderReflection, (, minor, ,, qrt, ), ;, }, public, RealMatrix, getP, (, ), {, if, (]
[;, }, super, ., performHouseholderReflection, (, minor, ,, qrt, ), ;, }, public, RealMatrix, getP, (, ), {, if, (]
[super, ., performHouseholderReflection, (, minor, ,, qrt, ), ;, }, public, RealMatrix, getP, (, ), {, if, (, cachedP, ==]
[qrt, ), ;, }, public, RealMatrix, getP, (, ), {, if, (, cachedP, ==, null, ), {, int, n, =]
[qrt, ), ;, }, public, RealMatrix, getP, (, ), {, if, (, cachedP, ==, null, ), {, int, n, =]
[public, RealMatrix, getP, (, ), {, if, (, cachedP, ==, null, ), {, int, n, =, p, ., length, ;]
[getP, (, ), {, if, (, cachedP, ==, null, ), {, int, n, =, p, ., length, ;, cachedP, =]
[getP, (, ), {, if, (, cachedP, ==, null, ), {, int, n, =, p, ., length, ;, cachedP, =]
[if, (, cachedP, ==, null, ), {, int, n, =, p, ., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (]
[cachedP, ==, null, ), {, int, n, =, p, ., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (, n, ,]
[p, ., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (, n, ,, n, ), ;, for, (, int, i, =]
[length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (, n, ,, n, ), ;, for, (, int, i, =, 0, ;]
[length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (, n, ,, n, ), ;, for, (, int, i, =, 0, ;]
[cachedP, =, MatrixUtils, ., createRealMatrix, (, n, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <]
[MatrixUtils, ., createRealMatrix, (, n, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[MatrixUtils, ., createRealMatrix, (, n, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[n, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[n, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, cachedP, ., setEntry, (]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, cachedP, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, cachedP, ., setEntry, (, p, []
[=, 0, ;, i, <, n, ;, i, ++, ), {, cachedP, ., setEntry, (, p, [, i, ], ,]
[;, i, <, n, ;, i, ++, ), {, cachedP, ., setEntry, (, p, [, i, ], ,, i, ,]
[++, ), {, cachedP, ., setEntry, (, p, [, i, ], ,, i, ,, 1, ), ;, }, }, return]
[), ;, }, }, return, cachedP, ;, }, public, int, getRank, (, final, double, dropThreshold, ), {, RealMatrix, r, =]
[}, public, int, getRank, (, final, double, dropThreshold, ), {, RealMatrix, r, =, getR, (, ), ;, int, rows, =]
[}, public, int, getRank, (, final, double, dropThreshold, ), {, RealMatrix, r, =, getR, (, ), ;, int, rows, =]
[{, RealMatrix, r, =, getR, (, ), ;, int, rows, =, r, ., getRowDimension, (, ), ;, int, columns, =]
[{, RealMatrix, r, =, getR, (, ), ;, int, rows, =, r, ., getRowDimension, (, ), ;, int, columns, =]
[rows, =, r, ., getRowDimension, (, ), ;, int, columns, =, r, ., getColumnDimension, (, ), ;, int, rank, =]
[(, ), ;, int, columns, =, r, ., getColumnDimension, (, ), ;, int, rank, =, 1, ;, double, lastNorm, =]
[(, ), ;, int, columns, =, r, ., getColumnDimension, (, ), ;, int, rank, =, 1, ;, double, lastNorm, =]
[(, ), ;, int, rank, =, 1, ;, double, lastNorm, =, r, ., getFrobeniusNorm, (, ), ;, double, rNorm, =]
[rank, =, 1, ;, double, lastNorm, =, r, ., getFrobeniusNorm, (, ), ;, double, rNorm, =, lastNorm, ;, while, (]
[rank, =, 1, ;, double, lastNorm, =, r, ., getFrobeniusNorm, (, ), ;, double, rNorm, =, lastNorm, ;, while, (]
[1, ;, double, lastNorm, =, r, ., getFrobeniusNorm, (, ), ;, double, rNorm, =, lastNorm, ;, while, (, rank, <]
[1, ;, double, lastNorm, =, r, ., getFrobeniusNorm, (, ), ;, double, rNorm, =, lastNorm, ;, while, (, rank, <]
[=, r, ., getFrobeniusNorm, (, ), ;, double, rNorm, =, lastNorm, ;, while, (, rank, <, FastMath, ., min, (]
[., getFrobeniusNorm, (, ), ;, double, rNorm, =, lastNorm, ;, while, (, rank, <, FastMath, ., min, (, rows, ,]
[=, lastNorm, ;, while, (, rank, <, FastMath, ., min, (, rows, ,, columns, ), ), {, double, thisNorm, =]
[=, lastNorm, ;, while, (, rank, <, FastMath, ., min, (, rows, ,, columns, ), ), {, double, thisNorm, =]
[=, lastNorm, ;, while, (, rank, <, FastMath, ., min, (, rows, ,, columns, ), ), {, double, thisNorm, =]
[(, rank, <, FastMath, ., min, (, rows, ,, columns, ), ), {, double, thisNorm, =, r, ., getSubMatrix, (]
[<, FastMath, ., min, (, rows, ,, columns, ), ), {, double, thisNorm, =, r, ., getSubMatrix, (, rank, ,]
[<, FastMath, ., min, (, rows, ,, columns, ), ), {, double, thisNorm, =, r, ., getSubMatrix, (, rank, ,]
[., min, (, rows, ,, columns, ), ), {, double, thisNorm, =, r, ., getSubMatrix, (, rank, ,, rows, -]
[(, rows, ,, columns, ), ), {, double, thisNorm, =, r, ., getSubMatrix, (, rank, ,, rows, -, 1, ,]
[,, columns, ), ), {, double, thisNorm, =, r, ., getSubMatrix, (, rank, ,, rows, -, 1, ,, rank, ,]
[,, columns, ), ), {, double, thisNorm, =, r, ., getSubMatrix, (, rank, ,, rows, -, 1, ,, rank, ,]
[), ), {, double, thisNorm, =, r, ., getSubMatrix, (, rank, ,, rows, -, 1, ,, rank, ,, columns, -]
[(, rank, ,, rows, -, 1, ,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (]
[(, rank, ,, rows, -, 1, ,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (]
[(, rank, ,, rows, -, 1, ,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (]
[,, rows, -, 1, ,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==]
[-, 1, ,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||]
[-, 1, ,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||]
[-, 1, ,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||]
[1, ,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||, (]
[1, ,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||, (]
[rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||, (, thisNorm, /]
[-, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||, (, thisNorm, /, lastNorm, ), *]
[), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||, (, thisNorm, /, lastNorm, ), *, rNorm, <]
[if, (, thisNorm, ==, 0, ||, (, thisNorm, /, lastNorm, ), *, rNorm, <, dropThreshold, ), {, break, ;, }]
[thisNorm, ==, 0, ||, (, thisNorm, /, lastNorm, ), *, rNorm, <, dropThreshold, ), {, break, ;, }, lastNorm, =]
[0, ||, (, thisNorm, /, lastNorm, ), *, rNorm, <, dropThreshold, ), {, break, ;, }, lastNorm, =, thisNorm, ;]
[0, ||, (, thisNorm, /, lastNorm, ), *, rNorm, <, dropThreshold, ), {, break, ;, }, lastNorm, =, thisNorm, ;]
[lastNorm, ), *, rNorm, <, dropThreshold, ), {, break, ;, }, lastNorm, =, thisNorm, ;, rank, ++, ;, }, return]
[=, thisNorm, ;, rank, ++, ;, }, return, rank, ;, }, @, Override, public, DecompositionSolver, getSolver, (, ), {, return]
[rank, ++, ;, }, return, rank, ;, }, @, Override, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (]
[rank, ++, ;, }, return, rank, ;, }, @, Override, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (]
[;, }, @, Override, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, super, ., getSolver, (, ), ,]
[;, }, @, Override, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, super, ., getSolver, (, ), ,]
[final, DecompositionSolver, upper, ;, private, RealMatrix, p, ;, private, Solver, (, final, DecompositionSolver, upper, ,, final, RealMatrix, p, ), {]
[final, DecompositionSolver, upper, ;, private, RealMatrix, p, ;, private, Solver, (, final, DecompositionSolver, upper, ,, final, RealMatrix, p, ), {]
[private, RealMatrix, p, ;, private, Solver, (, final, DecompositionSolver, upper, ,, final, RealMatrix, p, ), {, this, ., upper, =]
[p, ;, private, Solver, (, final, DecompositionSolver, upper, ,, final, RealMatrix, p, ), {, this, ., upper, =, upper, ;]
[p, ;, private, Solver, (, final, DecompositionSolver, upper, ,, final, RealMatrix, p, ), {, this, ., upper, =, upper, ;]
[(, final, DecompositionSolver, upper, ,, final, RealMatrix, p, ), {, this, ., upper, =, upper, ;, this, ., p, =]
[this, ., upper, =, upper, ;, this, ., p, =, p, ;, }, public, boolean, isNonSingular, (, ), {, return]
[this, ., upper, =, upper, ;, this, ., p, =, p, ;, }, public, boolean, isNonSingular, (, ), {, return]
[(, ), {, return, upper, ., isNonSingular, (, ), ;, }, public, RealVector, solve, (, RealVector, b, ), {, return]
[(, ), {, return, upper, ., isNonSingular, (, ), ;, }, public, RealVector, solve, (, RealVector, b, ), {, return]
[upper, ., isNonSingular, (, ), ;, }, public, RealVector, solve, (, RealVector, b, ), {, return, p, ., operate, (]
[upper, ., isNonSingular, (, ), ;, }, public, RealVector, solve, (, RealVector, b, ), {, return, p, ., operate, (]
[), ;, }, public, RealVector, solve, (, RealVector, b, ), {, return, p, ., operate, (, upper, ., solve, (]
[operate, (, upper, ., solve, (, b, ), ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, return]
[operate, (, upper, ., solve, (, b, ), ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, return]
[solve, (, b, ), ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, return, p, ., multiply, (]
[solve, (, b, ), ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, return, p, ., multiply, (]
[), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, return, p, ., multiply, (, upper, ., solve, (]
[p, ., multiply, (, upper, ., solve, (, b, ), ), ;, }, public, RealMatrix, getInverse, (, ), {, return]
[multiply, (, upper, ., solve, (, b, ), ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (]
[multiply, (, upper, ., solve, (, b, ), ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (]
[solve, (, b, ), ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (]
[solve, (, b, ), ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (]
