[,, double, value, ), throws, OutOfRangeException, ;, public, void, addToEntry, (, int, index, ,, double, increment, ), throws, OutOfRangeException, {]
[value, ), throws, OutOfRangeException, ;, public, void, addToEntry, (, int, index, ,, double, increment, ), throws, OutOfRangeException, {, setEntry, (]
[throws, OutOfRangeException, ;, public, void, addToEntry, (, int, index, ,, double, increment, ), throws, OutOfRangeException, {, setEntry, (, index, ,]
[throws, OutOfRangeException, ;, public, void, addToEntry, (, int, index, ,, double, increment, ), throws, OutOfRangeException, {, setEntry, (, index, ,]
[;, public, void, addToEntry, (, int, index, ,, double, increment, ), throws, OutOfRangeException, {, setEntry, (, index, ,, getEntry, (]
[addToEntry, (, int, index, ,, double, increment, ), throws, OutOfRangeException, {, setEntry, (, index, ,, getEntry, (, index, ), +]
[(, ), ;, public, abstract, boolean, isInfinite, (, ), ;, protected, void, checkVectorDimensions, (, RealVector, v, ), throws, DimensionMismatchException, {]
[;, public, abstract, boolean, isInfinite, (, ), ;, protected, void, checkVectorDimensions, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[;, public, abstract, boolean, isInfinite, (, ), ;, protected, void, checkVectorDimensions, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[., getDimension, (, ), ), ;, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, int, d, =]
[}, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, int, d, =, getDimension, (, ), ;, if, (]
[}, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, int, d, =, getDimension, (, ), ;, if, (]
[void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, int, d, =, getDimension, (, ), ;, if, (, d, !=]
[n, ), throws, DimensionMismatchException, {, int, d, =, getDimension, (, ), ;, if, (, d, !=, n, ), {, throw]
[DimensionMismatchException, {, int, d, =, getDimension, (, ), ;, if, (, d, !=, n, ), {, throw, new, DimensionMismatchException, (]
[int, d, =, getDimension, (, ), ;, if, (, d, !=, n, ), {, throw, new, DimensionMismatchException, (, d, ,]
[d, ,, n, ), ;, }, }, protected, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (]
[d, ,, n, ), ;, }, }, protected, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (]
[d, ,, n, ), ;, }, }, protected, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (]
[n, ), ;, }, }, protected, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index, <]
[;, }, }, protected, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||]
[;, }, }, protected, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||]
[}, protected, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||, index, >=]
[int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||, index, >=, getDimension, (, ), ), {, throw]
[throws, OutOfRangeException, {, if, (, index, <, 0, ||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (]
[throws, OutOfRangeException, {, if, (, index, <, 0, ||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (]
[(, index, <, 0, ||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,]
[<, 0, ||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,]
[||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,]
[||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,]
[(, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,, getDimension, (, ), -]
[void, checkIndices, (, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, final, int, dim, =]
[,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, final, int, dim, =, getDimension, (, ), ;, if, (]
[,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, final, int, dim, =, getDimension, (, ), ;, if, (]
[final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, final, int, dim, =, getDimension, (, ), ;, if, (, (]
[final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, final, int, dim, =, getDimension, (, ), ;, if, (, (]
[end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, final, int, dim, =, getDimension, (, ), ;, if, (, (, start, <]
[NumberIsTooSmallException, ,, OutOfRangeException, {, final, int, dim, =, getDimension, (, ), ;, if, (, (, start, <, 0, ), ||]
[,, OutOfRangeException, {, final, int, dim, =, getDimension, (, ), ;, if, (, (, start, <, 0, ), ||, (]
[,, OutOfRangeException, {, final, int, dim, =, getDimension, (, ), ;, if, (, (, start, <, 0, ), ||, (]
[{, final, int, dim, =, getDimension, (, ), ;, if, (, (, start, <, 0, ), ||, (, start, >=]
[getDimension, (, ), ;, if, (, (, start, <, 0, ), ||, (, start, >=, dim, ), ), {, throw]
[;, if, (, (, start, <, 0, ), ||, (, start, >=, dim, ), ), {, throw, new, OutOfRangeException, (]
[;, if, (, (, start, <, 0, ), ||, (, start, >=, dim, ), ), {, throw, new, OutOfRangeException, (]
[start, <, 0, ), ||, (, start, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,]
[0, ), ||, (, start, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,]
[||, (, start, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,]
[||, (, start, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,]
[start, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,, dim, -]
[throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,, dim, -, 1, ), ;, }, if, (]
[throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,, dim, -, 1, ), ;, }, if, (]
[new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,, dim, -, 1, ), ;, }, if, (, (]
[new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,, dim, -, 1, ), ;, }, if, (, (]
[(, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,, dim, -, 1, ), ;, }, if, (, (, end, <]
[INDEX, ,, start, ,, 0, ,, dim, -, 1, ), ;, }, if, (, (, end, <, 0, ), ||]
[,, start, ,, 0, ,, dim, -, 1, ), ;, }, if, (, (, end, <, 0, ), ||, (]
[,, start, ,, 0, ,, dim, -, 1, ), ;, }, if, (, (, end, <, 0, ), ||, (]
[,, 0, ,, dim, -, 1, ), ;, }, if, (, (, end, <, 0, ), ||, (, end, >=]
[1, ), ;, }, if, (, (, end, <, 0, ), ||, (, end, >=, dim, ), ), {, throw]
[}, if, (, (, end, <, 0, ), ||, (, end, >=, dim, ), ), {, throw, new, OutOfRangeException, (]
[}, if, (, (, end, <, 0, ), ||, (, end, >=, dim, ), ), {, throw, new, OutOfRangeException, (]
[end, <, 0, ), ||, (, end, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,]
[0, ), ||, (, end, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,]
[||, (, end, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0, ,]
[||, (, end, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0, ,]
[end, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0, ,, dim, -]
[throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0, ,, dim, -, 1, ), ;, }, if, (]
[throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0, ,, dim, -, 1, ), ;, }, if, (]
[OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0, ,, dim, -, 1, ), ;, }, if, (, end, <]
[INDEX, ,, end, ,, 0, ,, dim, -, 1, ), ;, }, if, (, end, <, start, ), {, throw]
[,, 0, ,, dim, -, 1, ), ;, }, if, (, end, <, start, ), {, throw, new, NumberIsTooSmallException, (]
[,, 0, ,, dim, -, 1, ), ;, }, if, (, end, <, start, ), {, throw, new, NumberIsTooSmallException, (]
[-, 1, ), ;, }, if, (, end, <, start, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,]
[), ;, }, if, (, end, <, start, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, end, ,]
[}, if, (, end, <, start, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, end, ,, start, ,]
[,, end, ,, start, ,, false, ), ;, }, }, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {]
[,, start, ,, false, ), ;, }, }, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[}, }, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, RealVector, result, =]
[}, }, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, RealVector, result, =]
[checkVectorDimensions, (, v, ), ;, RealVector, result, =, v, ., copy, (, ), ;, Iterator, <, Entry, >, it, =]
[result, =, v, ., copy, (, ), ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[result, =, v, ., copy, (, ), ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, final, int, index, =]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, final, int, index, =]
[final, Entry, e, =, it, ., next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;]
[final, Entry, e, =, it, ., next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;]
[it, ., next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (]
[next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index, ,]
[next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index, ,]
[next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index, ,]
[index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index, ,, e, ., getValue, (, ), +]
[index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index, ,, e, ., getValue, (, ), +]
[getIndex, (, ), ;, result, ., setEntry, (, index, ,, e, ., getValue, (, ), +, result, ., getEntry, (]
[setEntry, (, index, ,, e, ., getValue, (, ), +, result, ., getEntry, (, index, ), ), ;, }, return]
[(, index, ), ), ;, }, return, result, ;, }, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {]
[), ), ;, }, return, result, ;, }, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[;, }, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, RealVector, result, =]
[;, }, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, RealVector, result, =]
[subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, RealVector, result, =, v, ., mapMultiply, (]
[(, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, RealVector, result, =, v, ., mapMultiply, (, -]
[v, ), ;, RealVector, result, =, v, ., mapMultiply, (, -, 1d, ), ;, Iterator, <, Entry, >, it, =]
[v, ., mapMultiply, (, -, 1d, ), ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[v, ., mapMultiply, (, -, 1d, ), ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, final, int, index, =]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, final, int, index, =]
[final, Entry, e, =, it, ., next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;]
[final, Entry, e, =, it, ., next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;]
[it, ., next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (]
[next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index, ,]
[next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index, ,]
[next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index, ,]
[index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index, ,, e, ., getValue, (, ), +]
[index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index, ,, e, ., getValue, (, ), +]
[getIndex, (, ), ;, result, ., setEntry, (, index, ,, e, ., getValue, (, ), +, result, ., getEntry, (]
[setEntry, (, index, ,, e, ., getValue, (, ), +, result, ., getEntry, (, index, ), ), ;, }, return]
[getEntry, (, index, ), ), ;, }, return, result, ;, }, public, RealVector, mapAdd, (, double, d, ), {, return]
[getEntry, (, index, ), ), ;, }, return, result, ;, }, public, RealVector, mapAdd, (, double, d, ), {, return]
[}, return, result, ;, }, public, RealVector, mapAdd, (, double, d, ), {, return, copy, (, ), ., mapAddToSelf, (]
[copy, (, ), ., mapAddToSelf, (, d, ), ;, }, public, RealVector, mapAddToSelf, (, double, d, ), {, if, (]
[copy, (, ), ., mapAddToSelf, (, d, ), ;, }, public, RealVector, mapAddToSelf, (, double, d, ), {, if, (]
[), ., mapAddToSelf, (, d, ), ;, }, public, RealVector, mapAddToSelf, (, double, d, ), {, if, (, d, !=]
[d, ), ;, }, public, RealVector, mapAddToSelf, (, double, d, ), {, if, (, d, !=, 0, ), {, return]
[;, }, public, RealVector, mapAddToSelf, (, double, d, ), {, if, (, d, !=, 0, ), {, return, mapToSelf, (]
[;, }, public, RealVector, mapAddToSelf, (, double, d, ), {, if, (, d, !=, 0, ), {, return, mapToSelf, (]
[mapAddToSelf, (, double, d, ), {, if, (, d, !=, 0, ), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (]
[{, if, (, d, !=, 0, ), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Add, (, ), ,]
[), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Add, (, ), ,, d, ), ), ;, }, return]
[this, ;, }, public, abstract, RealVector, copy, (, ), ;, public, double, dotProduct, (, RealVector, v, ), throws, DimensionMismatchException, {]
[}, public, abstract, RealVector, copy, (, ), ;, public, double, dotProduct, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[), ;, public, double, dotProduct, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, double, d, =]
[RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, double, d, =, 0, ;, final, int, n, =]
[), ;, double, d, =, 0, ;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =]
[double, d, =, 0, ;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[double, d, =, 0, ;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[=, 0, ;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, d, +=]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, d, +=]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, d, +=, getEntry, (]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, d, +=, getEntry, (, i, ), *]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, d, +=, getEntry, (, i, ), *]
[;, i, <, n, ;, i, ++, ), {, d, +=, getEntry, (, i, ), *, v, ., getEntry, (]
[i, ++, ), {, d, +=, getEntry, (, i, ), *, v, ., getEntry, (, i, ), ;, }, return]
[return, d, ;, }, public, double, cosine, (, RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, final, double, norm, =]
[RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, final, double, norm, =, getNorm, (, ), ;, final, double, vNorm, =]
[RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, final, double, norm, =, getNorm, (, ), ;, final, double, vNorm, =]
[final, double, norm, =, getNorm, (, ), ;, final, double, vNorm, =, v, ., getNorm, (, ), ;, if, (]
[final, double, norm, =, getNorm, (, ), ;, final, double, vNorm, =, v, ., getNorm, (, ), ;, if, (]
[final, double, norm, =, getNorm, (, ), ;, final, double, vNorm, =, v, ., getNorm, (, ), ;, if, (]
[norm, =, getNorm, (, ), ;, final, double, vNorm, =, v, ., getNorm, (, ), ;, if, (, norm, ==]
[getNorm, (, ), ;, final, double, vNorm, =, v, ., getNorm, (, ), ;, if, (, norm, ==, 0, ||]
[getNorm, (, ), ;, final, double, vNorm, =, v, ., getNorm, (, ), ;, if, (, norm, ==, 0, ||]
[), ;, final, double, vNorm, =, v, ., getNorm, (, ), ;, if, (, norm, ==, 0, ||, vNorm, ==]
[vNorm, =, v, ., getNorm, (, ), ;, if, (, norm, ==, 0, ||, vNorm, ==, 0, ), {, throw]
[., getNorm, (, ), ;, if, (, norm, ==, 0, ||, vNorm, ==, 0, ), {, throw, new, MathArithmeticException, (]
[., getNorm, (, ), ;, if, (, norm, ==, 0, ||, vNorm, ==, 0, ), {, throw, new, MathArithmeticException, (]
[norm, ==, 0, ||, vNorm, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return]
[norm, ==, 0, ||, vNorm, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return]
[0, ||, vNorm, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, dotProduct, (]
[==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, dotProduct, (, v, ), /]
[0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, dotProduct, (, v, ), /, (]
[0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, dotProduct, (, v, ), /, (]
[{, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, dotProduct, (, v, ), /, (, norm, *]
[abstract, RealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, ;, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {]
[ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, ;, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[DimensionMismatchException, ;, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, double, d, =]
[), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =]
[v, ), ;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[v, ), ;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, final, double, diff, =]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, final, double, diff, =]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, final, double, diff, =]
[final, Entry, e, =, it, ., next, (, ), ;, final, double, diff, =, e, ., getValue, (, ), -]
[final, Entry, e, =, it, ., next, (, ), ;, final, double, diff, =, e, ., getValue, (, ), -]
[it, ., next, (, ), ;, final, double, diff, =, e, ., getValue, (, ), -, v, ., getEntry, (]
[it, ., next, (, ), ;, final, double, diff, =, e, ., getValue, (, ), -, v, ., getEntry, (]
[double, diff, =, e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), ;]
[=, e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), ;, d, +=]
[=, e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), ;, d, +=]
[., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), ;, d, +=, diff, *]
[-, v, ., getEntry, (, e, ., getIndex, (, ), ), ;, d, +=, diff, *, diff, ;, }, return]
[-, v, ., getEntry, (, e, ., getIndex, (, ), ), ;, d, +=, diff, *, diff, ;, }, return]
[(, e, ., getIndex, (, ), ), ;, d, +=, diff, *, diff, ;, }, return, FastMath, ., sqrt, (]
[;, }, return, FastMath, ., sqrt, (, d, ), ;, }, public, double, getNorm, (, ), {, double, sum, =]
[), ;, }, public, double, getNorm, (, ), {, double, sum, =, 0, ;, Iterator, <, Entry, >, it, =]
[(, ), {, double, sum, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[(, ), {, double, sum, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, final, double, value, =]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, final, double, value, =]
[final, Entry, e, =, it, ., next, (, ), ;, final, double, value, =, e, ., getValue, (, ), ;]
[e, =, it, ., next, (, ), ;, final, double, value, =, e, ., getValue, (, ), ;, sum, +=]
[e, =, it, ., next, (, ), ;, final, double, value, =, e, ., getValue, (, ), ;, sum, +=]
[it, ., next, (, ), ;, final, double, value, =, e, ., getValue, (, ), ;, sum, +=, value, *]
[), ;, final, double, value, =, e, ., getValue, (, ), ;, sum, +=, value, *, value, ;, }, return]
[), ;, final, double, value, =, e, ., getValue, (, ), ;, sum, +=, value, *, value, ;, }, return]
[value, =, e, ., getValue, (, ), ;, sum, +=, value, *, value, ;, }, return, FastMath, ., sqrt, (]
[;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, double, getL1Norm, (, ), {, double, norm, =]
[), ;, }, public, double, getL1Norm, (, ), {, double, norm, =, 0, ;, Iterator, <, Entry, >, it, =]
[(, ), {, double, norm, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[(, ), {, double, norm, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[(, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, norm, +=]
[(, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, norm, +=]
[(, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, norm, +=, FastMath, ., abs, (]
[(, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, norm, +=, FastMath, ., abs, (]
[., next, (, ), ;, norm, +=, FastMath, ., abs, (, e, ., getValue, (, ), ), ;, }, return]
[., getValue, (, ), ), ;, }, return, norm, ;, }, public, double, getLInfNorm, (, ), {, double, norm, =]
[norm, ;, }, public, double, getLInfNorm, (, ), {, double, norm, =, 0, ;, Iterator, <, Entry, >, it, =]
[(, ), {, double, norm, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[(, ), {, double, norm, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[(, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, norm, =]
[(, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, norm, =]
[(, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, norm, =, FastMath, ., max, (]
[), {, final, Entry, e, =, it, ., next, (, ), ;, norm, =, FastMath, ., max, (, norm, ,]
[), {, final, Entry, e, =, it, ., next, (, ), ;, norm, =, FastMath, ., max, (, norm, ,]
[e, =, it, ., next, (, ), ;, norm, =, FastMath, ., max, (, norm, ,, FastMath, ., abs, (]
[e, =, it, ., next, (, ), ;, norm, =, FastMath, ., max, (, norm, ,, FastMath, ., abs, (]
[FastMath, ., max, (, norm, ,, FastMath, ., abs, (, e, ., getValue, (, ), ), ), ;, }, return]
[(, ), ), ), ;, }, return, norm, ;, }, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {]
[), ), ;, }, return, norm, ;, }, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[;, }, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, double, d, =]
[), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =]
[v, ), ;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[v, ), ;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[(, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, d, +=]
[(, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, d, +=]
[(, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, d, +=, FastMath, ., abs, (]
[(, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, d, +=, FastMath, ., abs, (]
[(, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, d, +=, FastMath, ., abs, (]
[e, =, it, ., next, (, ), ;, d, +=, FastMath, ., abs, (, e, ., getValue, (, ), -]
[e, =, it, ., next, (, ), ;, d, +=, FastMath, ., abs, (, e, ., getValue, (, ), -]
[next, (, ), ;, d, +=, FastMath, ., abs, (, e, ., getValue, (, ), -, v, ., getEntry, (]
[next, (, ), ;, d, +=, FastMath, ., abs, (, e, ., getValue, (, ), -, v, ., getEntry, (]
[e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), ), ;, }, return]
[(, ), ), ), ;, }, return, d, ;, }, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {]
[), ), ;, }, return, d, ;, }, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[;, }, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, double, d, =]
[), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =]
[v, ), ;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[v, ), ;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[(, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, d, =]
[(, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, d, =]
[(, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, d, =, FastMath, ., max, (]
[(, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, d, =, FastMath, ., max, (]
[final, Entry, e, =, it, ., next, (, ), ;, d, =, FastMath, ., max, (, FastMath, ., abs, (]
[final, Entry, e, =, it, ., next, (, ), ;, d, =, FastMath, ., max, (, FastMath, ., abs, (]
[final, Entry, e, =, it, ., next, (, ), ;, d, =, FastMath, ., max, (, FastMath, ., abs, (]
[next, (, ), ;, d, =, FastMath, ., max, (, FastMath, ., abs, (, e, ., getValue, (, ), -]
[next, (, ), ;, d, =, FastMath, ., max, (, FastMath, ., abs, (, e, ., getValue, (, ), -]
[d, =, FastMath, ., max, (, FastMath, ., abs, (, e, ., getValue, (, ), -, v, ., getEntry, (]
[d, =, FastMath, ., max, (, FastMath, ., abs, (, e, ., getValue, (, ), -, v, ., getEntry, (]
[abs, (, e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), ), ,]
[(, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), ), ,, d, ), ;, }, return]
[), ), ,, d, ), ;, }, return, d, ;, }, public, int, getMinIndex, (, ), {, int, minIndex, =]
[), ,, d, ), ;, }, return, d, ;, }, public, int, getMinIndex, (, ), {, int, minIndex, =, -]
[}, return, d, ;, }, public, int, getMinIndex, (, ), {, int, minIndex, =, -, 1, ;, double, minValue, =]
[}, return, d, ;, }, public, int, getMinIndex, (, ), {, int, minIndex, =, -, 1, ;, double, minValue, =]
[{, int, minIndex, =, -, 1, ;, double, minValue, =, Double, ., POSITIVE_INFINITY, ;, Iterator, <, Entry, >, iterator, =]
[;, double, minValue, =, Double, ., POSITIVE_INFINITY, ;, Iterator, <, Entry, >, iterator, =, iterator, (, ), ;, while, (]
[;, double, minValue, =, Double, ., POSITIVE_INFINITY, ;, Iterator, <, Entry, >, iterator, =, iterator, (, ), ;, while, (]
[>, iterator, =, iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, final, Entry, entry, =]
[>, iterator, =, iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, final, Entry, entry, =]
[(, iterator, ., hasNext, (, ), ), {, final, Entry, entry, =, iterator, ., next, (, ), ;, if, (]
[(, iterator, ., hasNext, (, ), ), {, final, Entry, entry, =, iterator, ., next, (, ), ;, if, (]
[(, iterator, ., hasNext, (, ), ), {, final, Entry, entry, =, iterator, ., next, (, ), ;, if, (]
[), {, final, Entry, entry, =, iterator, ., next, (, ), ;, if, (, entry, ., getValue, (, ), <=]
[Entry, entry, =, iterator, ., next, (, ), ;, if, (, entry, ., getValue, (, ), <=, minValue, ), {]
[=, iterator, ., next, (, ), ;, if, (, entry, ., getValue, (, ), <=, minValue, ), {, minIndex, =]
[=, iterator, ., next, (, ), ;, if, (, entry, ., getValue, (, ), <=, minValue, ), {, minIndex, =]
[;, if, (, entry, ., getValue, (, ), <=, minValue, ), {, minIndex, =, entry, ., getIndex, (, ), ;]
[(, entry, ., getValue, (, ), <=, minValue, ), {, minIndex, =, entry, ., getIndex, (, ), ;, minValue, =]
[(, entry, ., getValue, (, ), <=, minValue, ), {, minIndex, =, entry, ., getIndex, (, ), ;, minValue, =]
[{, minIndex, =, entry, ., getIndex, (, ), ;, minValue, =, entry, ., getValue, (, ), ;, }, }, return]
[getValue, (, ), ;, }, }, return, minIndex, ;, }, public, double, getMinValue, (, ), {, final, int, minIndex, =]
[}, return, minIndex, ;, }, public, double, getMinValue, (, ), {, final, int, minIndex, =, getMinIndex, (, ), ;, return]
[}, return, minIndex, ;, }, public, double, getMinValue, (, ), {, final, int, minIndex, =, getMinIndex, (, ), ;, return]
[}, return, minIndex, ;, }, public, double, getMinValue, (, ), {, final, int, minIndex, =, getMinIndex, (, ), ;, return]
[minIndex, ;, }, public, double, getMinValue, (, ), {, final, int, minIndex, =, getMinIndex, (, ), ;, return, minIndex, <]
[}, public, double, getMinValue, (, ), {, final, int, minIndex, =, getMinIndex, (, ), ;, return, minIndex, <, 0, ?]
[}, public, double, getMinValue, (, ), {, final, int, minIndex, =, getMinIndex, (, ), ;, return, minIndex, <, 0, ?]
[(, ), {, final, int, minIndex, =, getMinIndex, (, ), ;, return, minIndex, <, 0, ?, Double, ., NaN, :]
[{, final, int, minIndex, =, getMinIndex, (, ), ;, return, minIndex, <, 0, ?, Double, ., NaN, :, getEntry, (]
[?, Double, ., NaN, :, getEntry, (, minIndex, ), ;, }, public, int, getMaxIndex, (, ), {, int, maxIndex, =]
[Double, ., NaN, :, getEntry, (, minIndex, ), ;, }, public, int, getMaxIndex, (, ), {, int, maxIndex, =, -]
[(, minIndex, ), ;, }, public, int, getMaxIndex, (, ), {, int, maxIndex, =, -, 1, ;, double, maxValue, =]
[(, minIndex, ), ;, }, public, int, getMaxIndex, (, ), {, int, maxIndex, =, -, 1, ;, double, maxValue, =]
[{, int, maxIndex, =, -, 1, ;, double, maxValue, =, Double, ., NEGATIVE_INFINITY, ;, Iterator, <, Entry, >, iterator, =]
[;, double, maxValue, =, Double, ., NEGATIVE_INFINITY, ;, Iterator, <, Entry, >, iterator, =, iterator, (, ), ;, while, (]
[;, double, maxValue, =, Double, ., NEGATIVE_INFINITY, ;, Iterator, <, Entry, >, iterator, =, iterator, (, ), ;, while, (]
[>, iterator, =, iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, final, Entry, entry, =]
[>, iterator, =, iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, final, Entry, entry, =]
[(, iterator, ., hasNext, (, ), ), {, final, Entry, entry, =, iterator, ., next, (, ), ;, if, (]
[(, iterator, ., hasNext, (, ), ), {, final, Entry, entry, =, iterator, ., next, (, ), ;, if, (]
[(, iterator, ., hasNext, (, ), ), {, final, Entry, entry, =, iterator, ., next, (, ), ;, if, (]
[), {, final, Entry, entry, =, iterator, ., next, (, ), ;, if, (, entry, ., getValue, (, ), >=]
[Entry, entry, =, iterator, ., next, (, ), ;, if, (, entry, ., getValue, (, ), >=, maxValue, ), {]
[=, iterator, ., next, (, ), ;, if, (, entry, ., getValue, (, ), >=, maxValue, ), {, maxIndex, =]
[=, iterator, ., next, (, ), ;, if, (, entry, ., getValue, (, ), >=, maxValue, ), {, maxIndex, =]
[;, if, (, entry, ., getValue, (, ), >=, maxValue, ), {, maxIndex, =, entry, ., getIndex, (, ), ;]
[(, entry, ., getValue, (, ), >=, maxValue, ), {, maxIndex, =, entry, ., getIndex, (, ), ;, maxValue, =]
[(, entry, ., getValue, (, ), >=, maxValue, ), {, maxIndex, =, entry, ., getIndex, (, ), ;, maxValue, =]
[{, maxIndex, =, entry, ., getIndex, (, ), ;, maxValue, =, entry, ., getValue, (, ), ;, }, }, return]
[getValue, (, ), ;, }, }, return, maxIndex, ;, }, public, double, getMaxValue, (, ), {, final, int, maxIndex, =]
[}, return, maxIndex, ;, }, public, double, getMaxValue, (, ), {, final, int, maxIndex, =, getMaxIndex, (, ), ;, return]
[}, return, maxIndex, ;, }, public, double, getMaxValue, (, ), {, final, int, maxIndex, =, getMaxIndex, (, ), ;, return]
[}, return, maxIndex, ;, }, public, double, getMaxValue, (, ), {, final, int, maxIndex, =, getMaxIndex, (, ), ;, return]
[maxIndex, ;, }, public, double, getMaxValue, (, ), {, final, int, maxIndex, =, getMaxIndex, (, ), ;, return, maxIndex, <]
[}, public, double, getMaxValue, (, ), {, final, int, maxIndex, =, getMaxIndex, (, ), ;, return, maxIndex, <, 0, ?]
[}, public, double, getMaxValue, (, ), {, final, int, maxIndex, =, getMaxIndex, (, ), ;, return, maxIndex, <, 0, ?]
[(, ), {, final, int, maxIndex, =, getMaxIndex, (, ), ;, return, maxIndex, <, 0, ?, Double, ., NaN, :]
[{, final, int, maxIndex, =, getMaxIndex, (, ), ;, return, maxIndex, <, 0, ?, Double, ., NaN, :, getEntry, (]
[?, Double, ., NaN, :, getEntry, (, maxIndex, ), ;, }, public, RealVector, mapMultiply, (, double, d, ), {, return]
[?, Double, ., NaN, :, getEntry, (, maxIndex, ), ;, }, public, RealVector, mapMultiply, (, double, d, ), {, return]
[(, maxIndex, ), ;, }, public, RealVector, mapMultiply, (, double, d, ), {, return, copy, (, ), ., mapMultiplyToSelf, (]
[return, copy, (, ), ., mapMultiplyToSelf, (, d, ), ;, }, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, return]
[(, ), ., mapMultiplyToSelf, (, d, ), ;, }, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, return, mapToSelf, (]
[(, ), ., mapMultiplyToSelf, (, d, ), ;, }, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, return, mapToSelf, (]
[(, d, ), ;, }, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (]
[public, RealVector, mapMultiplyToSelf, (, double, d, ), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Multiply, (, ), ,]
[(, new, Multiply, (, ), ,, d, ), ), ;, }, public, RealVector, mapSubtract, (, double, d, ), {, return]
[(, new, Multiply, (, ), ,, d, ), ), ;, }, public, RealVector, mapSubtract, (, double, d, ), {, return]
[d, ), ), ;, }, public, RealVector, mapSubtract, (, double, d, ), {, return, copy, (, ), ., mapSubtractToSelf, (]
[return, copy, (, ), ., mapSubtractToSelf, (, d, ), ;, }, public, RealVector, mapSubtractToSelf, (, double, d, ), {, return]
[(, ), ., mapSubtractToSelf, (, d, ), ;, }, public, RealVector, mapSubtractToSelf, (, double, d, ), {, return, mapAddToSelf, (]
[), ., mapSubtractToSelf, (, d, ), ;, }, public, RealVector, mapSubtractToSelf, (, double, d, ), {, return, mapAddToSelf, (, -]
[d, ), {, return, mapAddToSelf, (, -, d, ), ;, }, public, RealVector, mapDivide, (, double, d, ), {, return]
[d, ), {, return, mapAddToSelf, (, -, d, ), ;, }, public, RealVector, mapDivide, (, double, d, ), {, return]
[-, d, ), ;, }, public, RealVector, mapDivide, (, double, d, ), {, return, copy, (, ), ., mapDivideToSelf, (]
[return, copy, (, ), ., mapDivideToSelf, (, d, ), ;, }, public, RealVector, mapDivideToSelf, (, double, d, ), {, return]
[(, ), ., mapDivideToSelf, (, d, ), ;, }, public, RealVector, mapDivideToSelf, (, double, d, ), {, return, mapToSelf, (]
[(, ), ., mapDivideToSelf, (, d, ), ;, }, public, RealVector, mapDivideToSelf, (, double, d, ), {, return, mapToSelf, (]
[(, d, ), ;, }, public, RealVector, mapDivideToSelf, (, double, d, ), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (]
[public, RealVector, mapDivideToSelf, (, double, d, ), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Divide, (, ), ,]
[(, ), ,, d, ), ), ;, }, public, RealMatrix, outerProduct, (, RealVector, v, ), {, final, int, m, =]
[(, ), ,, d, ), ), ;, }, public, RealMatrix, outerProduct, (, RealVector, v, ), {, final, int, m, =]
[outerProduct, (, RealVector, v, ), {, final, int, m, =, this, ., getDimension, (, ), ;, final, int, n, =]
[outerProduct, (, RealVector, v, ), {, final, int, m, =, this, ., getDimension, (, ), ;, final, int, n, =]
[getDimension, (, ), ;, final, int, n, =, v, ., getDimension, (, ), ;, final, RealMatrix, product, ;, if, (]
[getDimension, (, ), ;, final, int, n, =, v, ., getDimension, (, ), ;, final, RealMatrix, product, ;, if, (]
[getDimension, (, ), ;, final, int, n, =, v, ., getDimension, (, ), ;, final, RealMatrix, product, ;, if, (]
[final, int, n, =, v, ., getDimension, (, ), ;, final, RealMatrix, product, ;, if, (, v, instanceof, SparseRealVector, ||]
[final, int, n, =, v, ., getDimension, (, ), ;, final, RealMatrix, product, ;, if, (, v, instanceof, SparseRealVector, ||]
[., getDimension, (, ), ;, final, RealMatrix, product, ;, if, (, v, instanceof, SparseRealVector, ||, this, instanceof, SparseRealVector, ), {]
[(, ), ;, final, RealMatrix, product, ;, if, (, v, instanceof, SparseRealVector, ||, this, instanceof, SparseRealVector, ), {, product, =]
[final, RealMatrix, product, ;, if, (, v, instanceof, SparseRealVector, ||, this, instanceof, SparseRealVector, ), {, product, =, new, OpenMapRealMatrix, (]
[product, ;, if, (, v, instanceof, SparseRealVector, ||, this, instanceof, SparseRealVector, ), {, product, =, new, OpenMapRealMatrix, (, m, ,]
[SparseRealVector, ||, this, instanceof, SparseRealVector, ), {, product, =, new, OpenMapRealMatrix, (, m, ,, n, ), ;, }, else, {]
[this, instanceof, SparseRealVector, ), {, product, =, new, OpenMapRealMatrix, (, m, ,, n, ), ;, }, else, {, product, =]
[), {, product, =, new, OpenMapRealMatrix, (, m, ,, n, ), ;, }, else, {, product, =, new, Array2DRowRealMatrix, (]
[product, =, new, OpenMapRealMatrix, (, m, ,, n, ), ;, }, else, {, product, =, new, Array2DRowRealMatrix, (, m, ,]
[;, }, else, {, product, =, new, Array2DRowRealMatrix, (, m, ,, n, ), ;, }, for, (, int, i, =]
[else, {, product, =, new, Array2DRowRealMatrix, (, m, ,, n, ), ;, }, for, (, int, i, =, 0, ;]
[else, {, product, =, new, Array2DRowRealMatrix, (, m, ,, n, ), ;, }, for, (, int, i, =, 0, ;]
[product, =, new, Array2DRowRealMatrix, (, m, ,, n, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[new, Array2DRowRealMatrix, (, m, ,, n, ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;]
[new, Array2DRowRealMatrix, (, m, ,, n, ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;]
[for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[{, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, product, ., setEntry, (]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, product, ., setEntry, (, i, ,]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, product, ., setEntry, (, i, ,, j, ,]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, product, ., setEntry, (, i, ,, j, ,]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, product, ., setEntry, (, i, ,, j, ,]
[j, <, n, ;, j, ++, ), {, product, ., setEntry, (, i, ,, j, ,, this, ., getEntry, (]
[;, j, ++, ), {, product, ., setEntry, (, i, ,, j, ,, this, ., getEntry, (, i, ), *]
[;, j, ++, ), {, product, ., setEntry, (, i, ,, j, ,, this, ., getEntry, (, i, ), *]
[{, product, ., setEntry, (, i, ,, j, ,, this, ., getEntry, (, i, ), *, v, ., getEntry, (]
[j, ,, this, ., getEntry, (, i, ), *, v, ., getEntry, (, j, ), ), ;, }, }, return]
[product, ;, }, public, RealVector, projection, (, final, RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, final, double, norm2, =]
[product, ;, }, public, RealVector, projection, (, final, RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, final, double, norm2, =]
[RealVector, projection, (, final, RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, final, double, norm2, =, v, ., dotProduct, (]
[v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, final, double, norm2, =, v, ., dotProduct, (, v, ), ;, if, (]
[v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, final, double, norm2, =, v, ., dotProduct, (, v, ), ;, if, (]
[throws, DimensionMismatchException, ,, MathArithmeticException, {, final, double, norm2, =, v, ., dotProduct, (, v, ), ;, if, (, norm2, ==]
[{, final, double, norm2, =, v, ., dotProduct, (, v, ), ;, if, (, norm2, ==, 0.0, ), {, throw]
[norm2, =, v, ., dotProduct, (, v, ), ;, if, (, norm2, ==, 0.0, ), {, throw, new, MathArithmeticException, (]
[norm2, =, v, ., dotProduct, (, v, ), ;, if, (, norm2, ==, 0.0, ), {, throw, new, MathArithmeticException, (]
[), ;, if, (, norm2, ==, 0.0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return]
[), ;, if, (, norm2, ==, 0.0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return]
[norm2, ==, 0.0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, v, ., mapMultiply, (]
[norm2, ==, 0.0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, v, ., mapMultiply, (]
[0.0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, v, ., mapMultiply, (, dotProduct, (]
[throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, v, ., mapMultiply, (, dotProduct, (, v, ), /]
[throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, v, ., mapMultiply, (, dotProduct, (, v, ), /]
[LocalizedFormats, ., ZERO_NORM, ), ;, }, return, v, ., mapMultiply, (, dotProduct, (, v, ), /, v, ., dotProduct, (]
[(, v, ), ), ;, }, public, void, set, (, double, value, ), {, Iterator, <, Entry, >, it, =]
[public, void, set, (, double, value, ), {, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[public, void, set, (, double, value, ), {, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, e, ., setValue, (]
[e, ., setValue, (, value, ), ;, }, }, public, double, [, ], toArray, (, ), {, int, dim, =]
[public, double, [, ], toArray, (, ), {, int, dim, =, getDimension, (, ), ;, double, [, ], values, =]
[], toArray, (, ), {, int, dim, =, getDimension, (, ), ;, double, [, ], values, =, new, double, []
[getDimension, (, ), ;, double, [, ], values, =, new, double, [, dim, ], ;, for, (, int, i, =]
[), ;, double, [, ], values, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[), ;, double, [, ], values, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], values, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <]
[], values, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[], values, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[double, [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, values, []
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, values, [, i, ], =]
[int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, values, [, i, ], =, getEntry, (]
[i, <, dim, ;, i, ++, ), {, values, [, i, ], =, getEntry, (, i, ), ;, }, return]
[i, ), ;, }, return, values, ;, }, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, final, double, norm, =]
[;, }, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, final, double, norm, =, getNorm, (, ), ;, if, (]
[;, }, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, final, double, norm, =, getNorm, (, ), ;, if, (]
[public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, final, double, norm, =, getNorm, (, ), ;, if, (, norm, ==]
[), throws, MathArithmeticException, {, final, double, norm, =, getNorm, (, ), ;, if, (, norm, ==, 0, ), {, throw]
[{, final, double, norm, =, getNorm, (, ), ;, if, (, norm, ==, 0, ), {, throw, new, MathArithmeticException, (]
[{, final, double, norm, =, getNorm, (, ), ;, if, (, norm, ==, 0, ), {, throw, new, MathArithmeticException, (]
[), ;, if, (, norm, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return]
[if, (, norm, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, mapDivide, (]
[}, return, mapDivide, (, norm, ), ;, }, public, void, unitize, (, ), throws, MathArithmeticException, {, final, double, norm, =]
[;, }, public, void, unitize, (, ), throws, MathArithmeticException, {, final, double, norm, =, getNorm, (, ), ;, if, (]
[;, }, public, void, unitize, (, ), throws, MathArithmeticException, {, final, double, norm, =, getNorm, (, ), ;, if, (]
[public, void, unitize, (, ), throws, MathArithmeticException, {, final, double, norm, =, getNorm, (, ), ;, if, (, norm, ==]
[), throws, MathArithmeticException, {, final, double, norm, =, getNorm, (, ), ;, if, (, norm, ==, 0, ), {, throw]
[{, final, double, norm, =, getNorm, (, ), ;, if, (, norm, ==, 0, ), {, throw, new, MathArithmeticException, (]
[{, final, double, norm, =, getNorm, (, ), ;, if, (, norm, ==, 0, ), {, throw, new, MathArithmeticException, (]
[(, ), ;, if, (, norm, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }]
[;, if, (, norm, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, mapDivideToSelf, (]
[mapDivideToSelf, (, getNorm, (, ), ), ;, }, @, Deprecated, public, Iterator, <, Entry, >, sparseIterator, (, ), {, return]
[return, new, SparseEntryIterator, (, ), ;, }, public, Iterator, <, Entry, >, iterator, (, ), {, final, int, dim, =]
[;, }, public, Iterator, <, Entry, >, iterator, (, ), {, final, int, dim, =, getDimension, (, ), ;, return]
[int, dim, =, getDimension, (, ), ;, return, new, Iterator, <, Entry, >, (, ), {, private, int, i, =]
[;, return, new, Iterator, <, Entry, >, (, ), {, private, int, i, =, 0, ;, private, Entry, e, =]
[i, =, 0, ;, private, Entry, e, =, new, Entry, (, ), ;, public, boolean, hasNext, (, ), {, return]
[i, =, 0, ;, private, Entry, e, =, new, Entry, (, ), ;, public, boolean, hasNext, (, ), {, return]
[0, ;, private, Entry, e, =, new, Entry, (, ), ;, public, boolean, hasNext, (, ), {, return, i, <]
[public, boolean, hasNext, (, ), {, return, i, <, dim, ;, }, public, Entry, next, (, ), {, if, (]
[public, boolean, hasNext, (, ), {, return, i, <, dim, ;, }, public, Entry, next, (, ), {, if, (]
[hasNext, (, ), {, return, i, <, dim, ;, }, public, Entry, next, (, ), {, if, (, i, <]
[{, return, i, <, dim, ;, }, public, Entry, next, (, ), {, if, (, i, <, dim, ), {]
[{, return, i, <, dim, ;, }, public, Entry, next, (, ), {, if, (, i, <, dim, ), {]
[dim, ;, }, public, Entry, next, (, ), {, if, (, i, <, dim, ), {, e, ., setIndex, (]
[dim, ;, }, public, Entry, next, (, ), {, if, (, i, <, dim, ), {, e, ., setIndex, (]
[next, (, ), {, if, (, i, <, dim, ), {, e, ., setIndex, (, i, ++, ), ;, return]
[i, <, dim, ), {, e, ., setIndex, (, i, ++, ), ;, return, e, ;, }, else, {, throw]
[}, else, {, throw, new, NoSuchElementException, (, ), ;, }, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw]
[{, throw, new, MathUnsupportedOperationException, (, ), ;, }, }, ;, }, public, RealVector, map, (, UnivariateFunction, function, ), {, return]
[{, throw, new, MathUnsupportedOperationException, (, ), ;, }, }, ;, }, public, RealVector, map, (, UnivariateFunction, function, ), {, return]
[;, }, }, ;, }, public, RealVector, map, (, UnivariateFunction, function, ), {, return, copy, (, ), ., mapToSelf, (]
[mapToSelf, (, function, ), ;, }, public, RealVector, mapToSelf, (, UnivariateFunction, function, ), {, Iterator, <, Entry, >, it, =]
[public, RealVector, mapToSelf, (, UnivariateFunction, function, ), {, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[public, RealVector, mapToSelf, (, UnivariateFunction, function, ), {, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[>, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, e, ., setValue, (]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, e, ., setValue, (]
[), {, final, Entry, e, =, it, ., next, (, ), ;, e, ., setValue, (, function, ., value, (]
[), {, final, Entry, e, =, it, ., next, (, ), ;, e, ., setValue, (, function, ., value, (]
[), ;, e, ., setValue, (, function, ., value, (, e, ., getValue, (, ), ), ), ;, }, return]
[this, ;, }, public, RealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return]
[this, ;, }, public, RealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return]
[(, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return, copy, (, ), ., combineToSelf, (]
[a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return, copy, (, ), ., combineToSelf, (, a, ,]
[double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return, copy, (, ), ., combineToSelf, (, a, ,, b, ,]
[y, ), ;, }, public, RealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {]
[;, }, public, RealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =]
[b, ,, RealVector, y, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;]
[b, ,, RealVector, y, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;]
[RealVector, y, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;, i, <]
[DimensionMismatchException, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;, i, <, getDimension, (, ), ;]
[DimensionMismatchException, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;, i, <, getDimension, (, ), ;]
[(, int, i, =, 0, ;, i, <, getDimension, (, ), ;, i, ++, ), {, final, double, xi, =]
[i, =, 0, ;, i, <, getDimension, (, ), ;, i, ++, ), {, final, double, xi, =, getEntry, (]
[(, ), ;, i, ++, ), {, final, double, xi, =, getEntry, (, i, ), ;, final, double, yi, =]
[(, ), ;, i, ++, ), {, final, double, xi, =, getEntry, (, i, ), ;, final, double, yi, =]
[++, ), {, final, double, xi, =, getEntry, (, i, ), ;, final, double, yi, =, y, ., getEntry, (]
[final, double, xi, =, getEntry, (, i, ), ;, final, double, yi, =, y, ., getEntry, (, i, ), ;]
[xi, =, getEntry, (, i, ), ;, final, double, yi, =, y, ., getEntry, (, i, ), ;, setEntry, (]
[getEntry, (, i, ), ;, final, double, yi, =, y, ., getEntry, (, i, ), ;, setEntry, (, i, ,]
[getEntry, (, i, ), ;, final, double, yi, =, y, ., getEntry, (, i, ), ;, setEntry, (, i, ,]
[getEntry, (, i, ), ;, final, double, yi, =, y, ., getEntry, (, i, ), ;, setEntry, (, i, ,]
[i, ), ;, final, double, yi, =, y, ., getEntry, (, i, ), ;, setEntry, (, i, ,, a, *]
[;, final, double, yi, =, y, ., getEntry, (, i, ), ;, setEntry, (, i, ,, a, *, xi, +]
[;, final, double, yi, =, y, ., getEntry, (, i, ), ;, setEntry, (, i, ,, a, *, xi, +]
[double, yi, =, y, ., getEntry, (, i, ), ;, setEntry, (, i, ,, a, *, xi, +, b, *]
[getEntry, (, i, ), ;, setEntry, (, i, ,, a, *, xi, +, b, *, yi, ), ;, }, return]
[), ;, }, return, this, ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, final, int, dim, =]
[this, ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;]
[this, ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;]
[double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;, visitor, ., start, (]
[(, final, RealVectorPreservingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;, visitor, ., start, (, dim, ,]
[RealVectorPreservingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;, visitor, ., start, (, dim, ,, 0, ,]
[RealVectorPreservingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;, visitor, ., start, (, dim, ,, 0, ,]
[), {, final, int, dim, =, getDimension, (, ), ;, visitor, ., start, (, dim, ,, 0, ,, dim, -]
[), ;, visitor, ., start, (, dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =]
[visitor, ., start, (, dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;]
[visitor, ., start, (, dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;]
[start, (, dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, visitor, ., visit, (]
[(, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, visitor, ., visit, (, i, ,]
[i, =, 0, ;, i, <, dim, ;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (]
[dim, ;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return]
[dim, ;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return]
[double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {]
[(, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (]
[RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,]
[final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;]
[final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;]
[final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (]
[throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (, getDimension, (, ), ,]
[,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (, getDimension, (, ), ,, start, ,]
[), ;, visitor, ., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =]
[visitor, ., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start, ;]
[visitor, ., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start, ;]
[start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=]
[getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;]
[getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;]
[start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {]
[start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {]
[;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, visitor, ., visit, (]
[(, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, visitor, ., visit, (, i, ,]
[i, =, start, ;, i, <=, end, ;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (]
[end, ;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return]
[end, ;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return]
[;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, return]
[return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, return, walkInDefaultOrder, (]
[walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return]
[final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return, walkInDefaultOrder, (]
[visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return, walkInDefaultOrder, (, visitor, ,]
[final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return, walkInDefaultOrder, (, visitor, ,, start, ,]
[,, start, ,, end, ), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, final, int, dim, =]
[), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;]
[), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;]
[double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;, visitor, ., start, (]
[(, final, RealVectorChangingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;, visitor, ., start, (, dim, ,]
[RealVectorChangingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;, visitor, ., start, (, dim, ,, 0, ,]
[RealVectorChangingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;, visitor, ., start, (, dim, ,, 0, ,]
[), {, final, int, dim, =, getDimension, (, ), ;, visitor, ., start, (, dim, ,, 0, ,, dim, -]
[), ;, visitor, ., start, (, dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =]
[visitor, ., start, (, dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;]
[visitor, ., start, (, dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;]
[start, (, dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, setEntry, (]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, setEntry, (, i, ,]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, setEntry, (, i, ,]
[i, =, 0, ;, i, <, dim, ;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (]
[0, ;, i, <, dim, ;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,]
[i, <, dim, ;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (]
[{, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ), ;, }, return]
[{, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ), ;, }, return]
[double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {]
[(, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (]
[RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,]
[final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;]
[final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;]
[final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (]
[throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (, getDimension, (, ), ,]
[,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (, getDimension, (, ), ,, start, ,]
[), ;, visitor, ., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =]
[visitor, ., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start, ;]
[visitor, ., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start, ;]
[start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=]
[getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;]
[getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;]
[start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {]
[end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, setEntry, (]
[;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, setEntry, (, i, ,]
[;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, setEntry, (, i, ,]
[i, =, start, ;, i, <=, end, ;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (]
[start, ;, i, <=, end, ;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,]
[i, <=, end, ;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (]
[{, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ), ;, }, return]
[{, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ), ;, }, return]
[;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ), {, return]
[return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ), {, return, walkInDefaultOrder, (]
[walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return]
[final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return, walkInDefaultOrder, (]
[visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return, walkInDefaultOrder, (, visitor, ,]
[final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return, walkInDefaultOrder, (, visitor, ,, start, ,]
[,, start, ,, end, ), ;, }, protected, class, Entry, {, private, int, index, ;, public, Entry, (, ), {]
[,, end, ), ;, }, protected, class, Entry, {, private, int, index, ;, public, Entry, (, ), {, setIndex, (]
[index, ;, public, Entry, (, ), {, setIndex, (, 0, ), ;, }, public, double, getValue, (, ), {, return]
[public, Entry, (, ), {, setIndex, (, 0, ), ;, }, public, double, getValue, (, ), {, return, getEntry, (]
[(, ), {, return, getEntry, (, getIndex, (, ), ), ;, }, public, void, setValue, (, double, value, ), {]
[{, return, getEntry, (, getIndex, (, ), ), ;, }, public, void, setValue, (, double, value, ), {, setEntry, (]
[getIndex, (, ), ), ;, }, public, void, setValue, (, double, value, ), {, setEntry, (, getIndex, (, ), ,]
[value, ), {, setEntry, (, getIndex, (, ), ,, value, ), ;, }, public, int, getIndex, (, ), {, return]
[;, }, public, int, getIndex, (, ), {, return, index, ;, }, public, void, setIndex, (, int, index, ), {]
[;, }, public, int, getIndex, (, ), {, return, index, ;, }, public, void, setIndex, (, int, index, ), {]
[getIndex, (, ), {, return, index, ;, }, public, void, setIndex, (, int, index, ), {, this, ., index, =]
[., index, =, index, ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), throws, MathUnsupportedOperationException, {, throw]
[MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, int, hashCode, (, ), throws, MathUnsupportedOperationException, {, throw]
[>, {, private, final, int, dim, ;, private, Entry, current, ;, private, Entry, next, ;, protected, SparseEntryIterator, (, ), {]
[private, final, int, dim, ;, private, Entry, current, ;, private, Entry, next, ;, protected, SparseEntryIterator, (, ), {, dim, =]
[;, private, Entry, current, ;, private, Entry, next, ;, protected, SparseEntryIterator, (, ), {, dim, =, getDimension, (, ), ;]
[Entry, current, ;, private, Entry, next, ;, protected, SparseEntryIterator, (, ), {, dim, =, getDimension, (, ), ;, current, =]
[next, ;, protected, SparseEntryIterator, (, ), {, dim, =, getDimension, (, ), ;, current, =, new, Entry, (, ), ;]
[protected, SparseEntryIterator, (, ), {, dim, =, getDimension, (, ), ;, current, =, new, Entry, (, ), ;, next, =]
[getDimension, (, ), ;, current, =, new, Entry, (, ), ;, next, =, new, Entry, (, ), ;, if, (]
[getDimension, (, ), ;, current, =, new, Entry, (, ), ;, next, =, new, Entry, (, ), ;, if, (]
[getDimension, (, ), ;, current, =, new, Entry, (, ), ;, next, =, new, Entry, (, ), ;, if, (]
[new, Entry, (, ), ;, next, =, new, Entry, (, ), ;, if, (, next, ., getValue, (, ), ==]
[), ;, next, =, new, Entry, (, ), ;, if, (, next, ., getValue, (, ), ==, 0, ), {]
[next, =, new, Entry, (, ), ;, if, (, next, ., getValue, (, ), ==, 0, ), {, advance, (]
[0, ), {, advance, (, next, ), ;, }, }, protected, void, advance, (, Entry, e, ), {, if, (]
[0, ), {, advance, (, next, ), ;, }, }, protected, void, advance, (, Entry, e, ), {, if, (]
[{, advance, (, next, ), ;, }, }, protected, void, advance, (, Entry, e, ), {, if, (, e, ==]
[protected, void, advance, (, Entry, e, ), {, if, (, e, ==, null, ), {, return, ;, }, do, {]
[protected, void, advance, (, Entry, e, ), {, if, (, e, ==, null, ), {, return, ;, }, do, {]
[Entry, e, ), {, if, (, e, ==, null, ), {, return, ;, }, do, {, e, ., setIndex, (]
[Entry, e, ), {, if, (, e, ==, null, ), {, return, ;, }, do, {, e, ., setIndex, (]
[Entry, e, ), {, if, (, e, ==, null, ), {, return, ;, }, do, {, e, ., setIndex, (]
[e, ==, null, ), {, return, ;, }, do, {, e, ., setIndex, (, e, ., getIndex, (, ), +]
[;, }, do, {, e, ., setIndex, (, e, ., getIndex, (, ), +, 1, ), ;, }, while, (]
[;, }, do, {, e, ., setIndex, (, e, ., getIndex, (, ), +, 1, ), ;, }, while, (]
[;, }, do, {, e, ., setIndex, (, e, ., getIndex, (, ), +, 1, ), ;, }, while, (]
[;, }, do, {, e, ., setIndex, (, e, ., getIndex, (, ), +, 1, ), ;, }, while, (]
[setIndex, (, e, ., getIndex, (, ), +, 1, ), ;, }, while, (, e, ., getIndex, (, ), <]
[e, ., getIndex, (, ), +, 1, ), ;, }, while, (, e, ., getIndex, (, ), <, dim, &&]
[e, ., getIndex, (, ), +, 1, ), ;, }, while, (, e, ., getIndex, (, ), <, dim, &&]
[e, ., getIndex, (, ), +, 1, ), ;, }, while, (, e, ., getIndex, (, ), <, dim, &&]
[1, ), ;, }, while, (, e, ., getIndex, (, ), <, dim, &&, e, ., getValue, (, ), ==]
[(, e, ., getIndex, (, ), <, dim, &&, e, ., getValue, (, ), ==, 0, ), ;, if, (]
[(, e, ., getIndex, (, ), <, dim, &&, e, ., getValue, (, ), ==, 0, ), ;, if, (]
[(, e, ., getIndex, (, ), <, dim, &&, e, ., getValue, (, ), ==, 0, ), ;, if, (]
[<, dim, &&, e, ., getValue, (, ), ==, 0, ), ;, if, (, e, ., getIndex, (, ), >=]
[e, ., getValue, (, ), ==, 0, ), ;, if, (, e, ., getIndex, (, ), >=, dim, ), {]
[e, ., getValue, (, ), ==, 0, ), ;, if, (, e, ., getIndex, (, ), >=, dim, ), {]
[), ==, 0, ), ;, if, (, e, ., getIndex, (, ), >=, dim, ), {, e, ., setIndex, (]
[==, 0, ), ;, if, (, e, ., getIndex, (, ), >=, dim, ), {, e, ., setIndex, (, -]
[dim, ), {, e, ., setIndex, (, -, 1, ), ;, }, }, public, boolean, hasNext, (, ), {, return]
[dim, ), {, e, ., setIndex, (, -, 1, ), ;, }, }, public, boolean, hasNext, (, ), {, return]
[dim, ), {, e, ., setIndex, (, -, 1, ), ;, }, }, public, boolean, hasNext, (, ), {, return]
[(, -, 1, ), ;, }, }, public, boolean, hasNext, (, ), {, return, next, ., getIndex, (, ), >=]
[{, return, next, ., getIndex, (, ), >=, 0, ;, }, public, Entry, next, (, ), {, int, index, =]
[{, return, next, ., getIndex, (, ), >=, 0, ;, }, public, Entry, next, (, ), {, int, index, =]
[0, ;, }, public, Entry, next, (, ), {, int, index, =, next, ., getIndex, (, ), ;, if, (]
[0, ;, }, public, Entry, next, (, ), {, int, index, =, next, ., getIndex, (, ), ;, if, (]
[}, public, Entry, next, (, ), {, int, index, =, next, ., getIndex, (, ), ;, if, (, index, <]
[(, ), {, int, index, =, next, ., getIndex, (, ), ;, if, (, index, <, 0, ), {, throw]
[next, ., getIndex, (, ), ;, if, (, index, <, 0, ), {, throw, new, NoSuchElementException, (, ), ;, }]
[next, ., getIndex, (, ), ;, if, (, index, <, 0, ), {, throw, new, NoSuchElementException, (, ), ;, }]
[), ;, if, (, index, <, 0, ), {, throw, new, NoSuchElementException, (, ), ;, }, current, ., setIndex, (]
[(, index, <, 0, ), {, throw, new, NoSuchElementException, (, ), ;, }, current, ., setIndex, (, index, ), ;]
[<, 0, ), {, throw, new, NoSuchElementException, (, ), ;, }, current, ., setIndex, (, index, ), ;, advance, (]
[throw, new, NoSuchElementException, (, ), ;, }, current, ., setIndex, (, index, ), ;, advance, (, next, ), ;, return]
[), ;, advance, (, next, ), ;, return, current, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw]
[{, throw, new, MathUnsupportedOperationException, (, ), ;, }, }, public, static, RealVector, unmodifiableRealVector, (, final, RealVector, v, ), {, return]
[{, return, new, RealVector, (, ), {, @, Override, public, RealVector, mapToSelf, (, UnivariateFunction, function, ), throws, MathUnsupportedOperationException, {, throw]
[MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, map, (, UnivariateFunction, function, ), {, return]
[MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, map, (, UnivariateFunction, function, ), {, return]
[MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, map, (, UnivariateFunction, function, ), {, return, v, ., map, (]
[;, }, @, Override, public, Iterator, <, Entry, >, iterator, (, ), {, final, Iterator, <, Entry, >, i, =]
[;, }, @, Override, public, Iterator, <, Entry, >, iterator, (, ), {, final, Iterator, <, Entry, >, i, =]
[Entry, >, iterator, (, ), {, final, Iterator, <, Entry, >, i, =, v, ., iterator, (, ), ;, return]
[v, ., iterator, (, ), ;, return, new, Iterator, <, Entry, >, (, ), {, private, final, UnmodifiableEntry, e, =]
[(, ), {, private, final, UnmodifiableEntry, e, =, new, UnmodifiableEntry, (, ), ;, public, boolean, hasNext, (, ), {, return]
[(, ), {, private, final, UnmodifiableEntry, e, =, new, UnmodifiableEntry, (, ), ;, public, boolean, hasNext, (, ), {, return]
[public, boolean, hasNext, (, ), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {]
[public, boolean, hasNext, (, ), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {]
[), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {, e, ., setIndex, (]
[), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {, e, ., setIndex, (]
[), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {, e, ., setIndex, (]
[next, (, ), {, e, ., setIndex, (, i, ., next, (, ), ., getIndex, (, ), ), ;, return]
[), ., getIndex, (, ), ), ;, return, e, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw]
[;, }, @, Override, public, Iterator, <, Entry, >, sparseIterator, (, ), {, final, Iterator, <, Entry, >, i, =]
[;, }, @, Override, public, Iterator, <, Entry, >, sparseIterator, (, ), {, final, Iterator, <, Entry, >, i, =]
[Entry, >, sparseIterator, (, ), {, final, Iterator, <, Entry, >, i, =, v, ., sparseIterator, (, ), ;, return]
[v, ., sparseIterator, (, ), ;, return, new, Iterator, <, Entry, >, (, ), {, private, final, UnmodifiableEntry, e, =]
[(, ), {, private, final, UnmodifiableEntry, e, =, new, UnmodifiableEntry, (, ), ;, public, boolean, hasNext, (, ), {, return]
[(, ), {, private, final, UnmodifiableEntry, e, =, new, UnmodifiableEntry, (, ), ;, public, boolean, hasNext, (, ), {, return]
[public, boolean, hasNext, (, ), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {]
[public, boolean, hasNext, (, ), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {]
[), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {, e, ., setIndex, (]
[), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {, e, ., setIndex, (]
[), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {, e, ., setIndex, (]
[next, (, ), {, e, ., setIndex, (, i, ., next, (, ), ., getIndex, (, ), ), ;, return]
[), ., getIndex, (, ), ), ;, return, e, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw]
[{, throw, new, MathUnsupportedOperationException, (, ), ;, }, }, ;, }, @, Override, public, RealVector, copy, (, ), {, return]
[{, throw, new, MathUnsupportedOperationException, (, ), ;, }, }, ;, }, @, Override, public, RealVector, copy, (, ), {, return]
[v, ., copy, (, ), ;, }, @, Override, public, RealVector, add, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[v, ., copy, (, ), ;, }, @, Override, public, RealVector, add, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[), ;, }, @, Override, public, RealVector, add, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., add, (]
[., add, (, w, ), ;, }, @, Override, public, RealVector, subtract, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[., add, (, w, ), ;, }, @, Override, public, RealVector, subtract, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[), ;, }, @, Override, public, RealVector, subtract, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., subtract, (]
[return, v, ., subtract, (, w, ), ;, }, @, Override, public, RealVector, mapAdd, (, double, d, ), {, return]
[return, v, ., subtract, (, w, ), ;, }, @, Override, public, RealVector, mapAdd, (, double, d, ), {, return]
[(, w, ), ;, }, @, Override, public, RealVector, mapAdd, (, double, d, ), {, return, v, ., mapAdd, (]
[., mapAdd, (, d, ), ;, }, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw]
[MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, mapSubtract, (, double, d, ), {, return]
[MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, mapSubtract, (, double, d, ), {, return]
[MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, mapSubtract, (, double, d, ), {, return, v, ., mapSubtract, (]
[., mapSubtract, (, d, ), ;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw]
[MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, mapMultiply, (, double, d, ), {, return]
[MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, mapMultiply, (, double, d, ), {, return]
[MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, mapMultiply, (, double, d, ), {, return, v, ., mapMultiply, (]
[., mapMultiply, (, d, ), ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw]
[MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, mapDivide, (, double, d, ), {, return]
[MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, mapDivide, (, double, d, ), {, return]
[MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, mapDivide, (, double, d, ), {, return, v, ., mapDivide, (]
[., mapDivide, (, d, ), ;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw]
[throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, ebeMultiply, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, ebeMultiply, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[), ;, }, @, Override, public, RealVector, ebeMultiply, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., ebeMultiply, (]
[., ebeMultiply, (, w, ), ;, }, @, Override, public, RealVector, ebeDivide, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[., ebeMultiply, (, w, ), ;, }, @, Override, public, RealVector, ebeDivide, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[), ;, }, @, Override, public, RealVector, ebeDivide, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., ebeDivide, (]
[., ebeDivide, (, w, ), ;, }, @, Override, public, double, dotProduct, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[., ebeDivide, (, w, ), ;, }, @, Override, public, double, dotProduct, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[), ;, }, @, Override, public, double, dotProduct, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., dotProduct, (]
[(, w, ), ;, }, @, Override, public, double, cosine, (, RealVector, w, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, return]
[(, w, ), ;, }, @, Override, public, double, cosine, (, RealVector, w, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, return]
[}, @, Override, public, double, cosine, (, RealVector, w, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, return, v, ., cosine, (]
[MathArithmeticException, {, return, v, ., cosine, (, w, ), ;, }, @, Override, public, double, getNorm, (, ), {, return]
[MathArithmeticException, {, return, v, ., cosine, (, w, ), ;, }, @, Override, public, double, getNorm, (, ), {, return]
[(, ), {, return, v, ., getNorm, (, ), ;, }, @, Override, public, double, getL1Norm, (, ), {, return]
[(, ), {, return, v, ., getNorm, (, ), ;, }, @, Override, public, double, getL1Norm, (, ), {, return]
[(, ), {, return, v, ., getL1Norm, (, ), ;, }, @, Override, public, double, getLInfNorm, (, ), {, return]
[(, ), {, return, v, ., getL1Norm, (, ), ;, }, @, Override, public, double, getLInfNorm, (, ), {, return]
[v, ., getLInfNorm, (, ), ;, }, @, Override, public, double, getDistance, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[v, ., getLInfNorm, (, ), ;, }, @, Override, public, double, getDistance, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[), ;, }, @, Override, public, double, getDistance, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., getDistance, (]
[., getDistance, (, w, ), ;, }, @, Override, public, double, getL1Distance, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[., getDistance, (, w, ), ;, }, @, Override, public, double, getL1Distance, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[), ;, }, @, Override, public, double, getL1Distance, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., getL1Distance, (]
[., getL1Distance, (, w, ), ;, }, @, Override, public, double, getLInfDistance, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[., getL1Distance, (, w, ), ;, }, @, Override, public, double, getLInfDistance, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[), ;, }, @, Override, public, double, getLInfDistance, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., getLInfDistance, (]
[return, v, ., getLInfDistance, (, w, ), ;, }, @, Override, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, return]
[return, v, ., getLInfDistance, (, w, ), ;, }, @, Override, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, return]
[{, return, v, ., unitVector, (, ), ;, }, @, Override, public, void, unitize, (, ), throws, MathUnsupportedOperationException, {, throw]
[MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealMatrix, outerProduct, (, RealVector, w, ), {, return]
[MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealMatrix, outerProduct, (, RealVector, w, ), {, return]
[MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealMatrix, outerProduct, (, RealVector, w, ), {, return, v, ., outerProduct, (]
[., outerProduct, (, w, ), ;, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, return]
[., outerProduct, (, w, ), ;, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, return]
[), ;, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, return, v, ., getEntry, (]
[index, ), ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws, MathUnsupportedOperationException, {, throw]
[(, ), ;, }, @, Override, public, void, addToEntry, (, int, index, ,, double, value, ), throws, MathUnsupportedOperationException, {, throw]
[), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, int, getDimension, (, ), {, return]
[), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, int, getDimension, (, ), {, return]
[{, return, v, ., getDimension, (, ), ;, }, @, Override, public, RealVector, append, (, RealVector, w, ), {, return]
[{, return, v, ., getDimension, (, ), ;, }, @, Override, public, RealVector, append, (, RealVector, w, ), {, return]
[getDimension, (, ), ;, }, @, Override, public, RealVector, append, (, RealVector, w, ), {, return, v, ., append, (]
[return, v, ., append, (, w, ), ;, }, @, Override, public, RealVector, append, (, double, d, ), {, return]
[return, v, ., append, (, w, ), ;, }, @, Override, public, RealVector, append, (, double, d, ), {, return]
[(, w, ), ;, }, @, Override, public, RealVector, append, (, double, d, ), {, return, v, ., append, (]
[;, }, @, Override, public, RealVector, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, return]
[;, }, @, Override, public, RealVector, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, return]
[public, RealVector, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, return, v, ., getSubVector, (]
[getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, return, v, ., getSubVector, (, index, ,]
[n, ), ;, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, w, ), throws, MathUnsupportedOperationException, {, throw]
[throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, void, set, (, double, value, ), throws, MathUnsupportedOperationException, {, throw]
[MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, double, [, ], toArray, (, ), {, return]
[MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, double, [, ], toArray, (, ), {, return]
[(, ), {, return, v, ., toArray, (, ), ;, }, @, Override, public, boolean, isNaN, (, ), {, return]
[(, ), {, return, v, ., toArray, (, ), ;, }, @, Override, public, boolean, isNaN, (, ), {, return]
[(, ), {, return, v, ., isNaN, (, ), ;, }, @, Override, public, boolean, isInfinite, (, ), {, return]
[(, ), {, return, v, ., isNaN, (, ), ;, }, @, Override, public, boolean, isInfinite, (, ), {, return]
[}, @, Override, public, RealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return]
[}, @, Override, public, RealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return]
[RealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return, v, ., combine, (]
[(, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return, v, ., combine, (, a, ,]
[a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return, v, ., combine, (, a, ,, b, ,]
[}, @, Override, public, RealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, ), throws, MathUnsupportedOperationException, {, throw]
[new, MathUnsupportedOperationException, (, ), ;, }, class, UnmodifiableEntry, extends, Entry, {, @, Override, public, double, getValue, (, ), {, return]
[new, MathUnsupportedOperationException, (, ), ;, }, class, UnmodifiableEntry, extends, Entry, {, @, Override, public, double, getValue, (, ), {, return]
[;, }, class, UnmodifiableEntry, extends, Entry, {, @, Override, public, double, getValue, (, ), {, return, v, ., getEntry, (]
[(, getIndex, (, ), ), ;, }, @, Override, public, void, setValue, (, double, value, ), throws, MathUnsupportedOperationException, {, throw]
