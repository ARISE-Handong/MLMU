[), ;, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, ), {, List, <, PassFactory, >, checks, =]
[;, checks, ., add, (, fieldCleanupPassFactory, ), ;, checks, ., add, (, scopeCleanupPassFactory, ), ;, checks, ., add, (, globalVarRefCleanupPassFactory]
[., newArrayList, (, ), ;, checks, ., add, (, fieldCleanupPassFactory, ), ;, checks, ., add, (, scopeCleanupPassFactory, ), ;, checks]
[;, checks, ., add, (, scopeCleanupPassFactory, ), ;, checks, ., add, (, globalVarRefCleanupPassFactory, ), ;, return, checks, ;, }, @]
[., add, (, fieldCleanupPassFactory, ), ;, checks, ., add, (, scopeCleanupPassFactory, ), ;, checks, ., add, (, globalVarRefCleanupPassFactory, ), ;]
[), ;, checks, ., add, (, scopeCleanupPassFactory, ), ;, checks, ., add, (, globalVarRefCleanupPassFactory, ), ;, return, checks, ;, }]
[;, checks, ., add, (, globalVarRefCleanupPassFactory, ), ;, return, checks, ;, }, @, Override, protected, State, getIntermediateState, (, ), {]
[., add, (, scopeCleanupPassFactory, ), ;, checks, ., add, (, globalVarRefCleanupPassFactory, ), ;, return, checks, ;, }, @, Override, protected]
[), ;, checks, ., add, (, globalVarRefCleanupPassFactory, ), ;, return, checks, ;, }, @, Override, protected, State, getIntermediateState, (, )]
[;, return, checks, ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, state, ;, }, @, Override, protected]
[., add, (, globalVarRefCleanupPassFactory, ), ;, return, checks, ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, state]
[), ;, return, checks, ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, state, ;, }, @, Override]
[;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, state, ;, }, @, Override, protected, List, <, PassFactory]
[;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (, ), {, return, ImmutableList, ., of, (, ), ;]
[;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., state, =, state, ;, }, final]
[., of, (, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., state, =]
[=, state, ;, }, final, PassFactory, fieldCleanupPassFactory, =, new, HotSwapPassFactory, (, "FieldCleaupPassFactory", ,, false, ), {, @, Override, protected, HotSwapCompilerPass]
[., state, =, state, ;, }, final, PassFactory, fieldCleanupPassFactory, =, new, HotSwapPassFactory, (, "FieldCleaupPassFactory", ,, false, ), {, @, Override]
[;, }, final, PassFactory, fieldCleanupPassFactory, =, new, HotSwapPassFactory, (, "FieldCleaupPassFactory", ,, false, ), {, @, Override, protected, HotSwapCompilerPass, create, (]
[;, final, PassFactory, scopeCleanupPassFactory, =, new, HotSwapPassFactory, (, "ScopeCleanupPassFactory", ,, false, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, FieldCleanupPass, (, compiler, )]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, FieldCleanupPass, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, scopeCleanupPassFactory, =, new, HotSwapPassFactory, (, "ScopeCleanupPassFactory", ,, false, ), {, @, Override, protected, HotSwapCompilerPass]
[), ;, }, }, ;, final, PassFactory, scopeCleanupPassFactory, =, new, HotSwapPassFactory, (, "ScopeCleanupPassFactory", ,, false, ), {, @, Override, protected]
[;, final, PassFactory, globalVarRefCleanupPassFactory, =, new, HotSwapPassFactory, (, "GlobalVarRefCleanupPassFactory", ,, false, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MemoizedScopeCleanupPass, (, compiler, )]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MemoizedScopeCleanupPass, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, globalVarRefCleanupPassFactory, =, new, HotSwapPassFactory, (, "GlobalVarRefCleanupPassFactory", ,, false, ), {, @, Override, protected, HotSwapCompilerPass]
[), ;, }, }, ;, final, PassFactory, globalVarRefCleanupPassFactory, =, new, HotSwapPassFactory, (, "GlobalVarRefCleanupPassFactory", ,, false, ), {, @, Override, protected]
[;, static, class, MemoizedScopeCleanupPass, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, MemoizedScopeCleanupPass, (, AbstractCompiler, compiler, ), {, this]
[,, false, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, GlobalVarRefCleanupPass, (, compiler, )]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, GlobalVarRefCleanupPass, (, compiler, ), ;, }]
[;, }, }, ;, static, class, MemoizedScopeCleanupPass, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, MemoizedScopeCleanupPass, (, AbstractCompiler, compiler]
[), ;, }, }, ;, static, class, MemoizedScopeCleanupPass, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, MemoizedScopeCleanupPass, (, AbstractCompiler]
[=, compiler, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, ScopeCreator, creator, =]
[., compiler, =, compiler, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, ScopeCreator]
[;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, ScopeCreator, creator, =, compiler, .]
[;, if, (, creator, instanceof, MemoizedScopeCreator, ), {, MemoizedScopeCreator, scopeCreator, =, (, MemoizedScopeCreator, ), creator, ;, String, newSrc, =, scriptRoot]
[., getTypedScopeCreator, (, ), ;, if, (, creator, instanceof, MemoizedScopeCreator, ), {, MemoizedScopeCreator, scopeCreator, =, (, MemoizedScopeCreator, ), creator, ;]
[), {, MemoizedScopeCreator, scopeCreator, =, (, MemoizedScopeCreator, ), creator, ;, String, newSrc, =, scriptRoot, ., getSourceFileName, (, ), ;, for]
[instanceof, MemoizedScopeCreator, ), {, MemoizedScopeCreator, scopeCreator, =, (, MemoizedScopeCreator, ), creator, ;, String, newSrc, =, scriptRoot, ., getSourceFileName, (, )]
[;, String, newSrc, =, scriptRoot, ., getSourceFileName, (, ), ;, for, (, Var, var, :, scopeCreator, ., getAllSymbols, (, )]
[;, String, newSrc, =, scriptRoot, ., getSourceFileName, (, ), ;, for, (, Var, var, :, scopeCreator, ., getAllSymbols, (, )]
[;, for, (, Var, var, :, scopeCreator, ., getAllSymbols, (, ), ), {, JSType, type, =, var, ., getType, (]
[., getSourceFileName, (, ), ;, for, (, Var, var, :, scopeCreator, ., getAllSymbols, (, ), ), {, JSType, type, =]
[), {, JSType, type, =, var, ., getType, (, ), ;, if, (, type, !=, null, ), {, FunctionType, fnType]
[., getAllSymbols, (, ), ), {, JSType, type, =, var, ., getType, (, ), ;, if, (, type, !=, null]
[;, if, (, type, !=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType]
[., getType, (, ), ;, if, (, type, !=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, )]
[), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, &&, newSrc, ., equals]
[!=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, &&, newSrc]
[), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, &&, newSrc, ., equals]
[;, if, (, fnType, !=, null, &&, newSrc, ., equals, (, NodeUtil, ., getSourceName, (, fnType, ., getSource, (, )]
[., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, &&, newSrc, ., equals, (, NodeUtil, ., getSourceName, (, fnType]
[), {, fnType, ., setSource, (, null, ), ;, }, }, }, scopeCreator, ., removeScopesForScript, (, originalRoot, ., getSourceFileName, (]
[&&, newSrc, ., equals, (, NodeUtil, ., getSourceName, (, fnType, ., getSource, (, ), ), ), ), {, fnType, .]
[!=, null, &&, newSrc, ., equals, (, NodeUtil, ., getSourceName, (, fnType, ., getSource, (, ), ), ), ), {]
[&&, newSrc, ., equals, (, NodeUtil, ., getSourceName, (, fnType, ., getSource, (, ), ), ), ), {, fnType, .]
[), {, fnType, ., setSource, (, null, ), ;, }, }, }, scopeCreator, ., removeScopesForScript, (, originalRoot, ., getSourceFileName, (]
[., equals, (, NodeUtil, ., getSourceName, (, fnType, ., getSource, (, ), ), ), ), {, fnType, ., setSource, (]
[), ), {, fnType, ., setSource, (, null, ), ;, }, }, }, scopeCreator, ., removeScopesForScript, (, originalRoot, ., getSourceFileName]
[., getSourceName, (, fnType, ., getSource, (, ), ), ), ), {, fnType, ., setSource, (, null, ), ;, }]
[), ), ), {, fnType, ., setSource, (, null, ), ;, }, }, }, scopeCreator, ., removeScopesForScript, (, originalRoot, .]
[., getSource, (, ), ), ), ), {, fnType, ., setSource, (, null, ), ;, }, }, }, scopeCreator, .]
[;, }, }, }, scopeCreator, ., removeScopesForScript, (, originalRoot, ., getSourceFileName, (, ), ), ;, }, }, @, Override, public]
[., setSource, (, null, ), ;, }, }, }, scopeCreator, ., removeScopesForScript, (, originalRoot, ., getSourceFileName, (, ), ), ;]
[), ;, }, }, }, scopeCreator, ., removeScopesForScript, (, originalRoot, ., getSourceFileName, (, ), ), ;, }, }, @, Override]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, }, }, }]
[., removeScopesForScript, (, originalRoot, ., getSourceFileName, (, ), ), ;, }, }, @, Override, public, void, process, (, Node, externs]
[), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, }, }, }]
[., getSourceFileName, (, ), ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
