[;, public, static, final, double, E, =, 2850325.0, /, 1048576.0, +, 8.254840070411028747e-8, ;, static, final, int, EXP_INT_TABLE_MAX_INDEX, =, 750, ;]
[+, 1.984187159361080883e-9, ;, public, static, final, double, E, =, 2850325.0, /, 1048576.0, +, 8.254840070411028747e-8, ;, static, final, int, EXP_INT_TABLE_MAX_INDEX, =]
[/, 33554432.0, +, 1.984187159361080883e-9, ;, public, static, final, double, E, =, 2850325.0, /, 1048576.0, +, 8.254840070411028747e-8, ;, static, final, int]
[+, 1.984187159361080883e-9, ;, public, static, final, double, E, =, 2850325.0, /, 1048576.0, +, 8.254840070411028747e-8, ;, static, final, int, EXP_INT_TABLE_MAX_INDEX, =]
[;, public, static, final, double, E, =, 2850325.0, /, 1048576.0, +, 8.254840070411028747e-8, ;, static, final, int, EXP_INT_TABLE_MAX_INDEX, =, 750, ;]
[;, static, final, int, EXP_INT_TABLE_MAX_INDEX, =, 750, ;, static, final, int, EXP_INT_TABLE_LEN, =, EXP_INT_TABLE_MAX_INDEX, *, 2, ;, static, final, int]
[+, 8.254840070411028747e-8, ;, static, final, int, EXP_INT_TABLE_MAX_INDEX, =, 750, ;, static, final, int, EXP_INT_TABLE_LEN, =, EXP_INT_TABLE_MAX_INDEX, *, 2, ;, static]
[/, 1048576.0, +, 8.254840070411028747e-8, ;, static, final, int, EXP_INT_TABLE_MAX_INDEX, =, 750, ;, static, final, int, EXP_INT_TABLE_LEN, =, EXP_INT_TABLE_MAX_INDEX, *, 2]
[+, 8.254840070411028747e-8, ;, static, final, int, EXP_INT_TABLE_MAX_INDEX, =, 750, ;, static, final, int, EXP_INT_TABLE_LEN, =, EXP_INT_TABLE_MAX_INDEX, *, 2, ;, static]
[;, static, final, int, EXP_INT_TABLE_MAX_INDEX, =, 750, ;, static, final, int, EXP_INT_TABLE_LEN, =, EXP_INT_TABLE_MAX_INDEX, *, 2, ;, static, final, int]
[;, static, final, int, EXP_INT_TABLE_LEN, =, EXP_INT_TABLE_MAX_INDEX, *, 2, ;, static, final, int, LN_MANT_LEN, =, 1024, ;, static, final, int]
[;, static, final, int, LN_MANT_LEN, =, 1024, ;, static, final, int, EXP_FRAC_TABLE_LEN, =, 1025, ;, private, static, final, double, LOG_MAX_VALUE]
[*, 2, ;, static, final, int, LN_MANT_LEN, =, 1024, ;, static, final, int, EXP_FRAC_TABLE_LEN, =, 1025, ;, private, static, final]
[;, static, final, int, LN_MANT_LEN, =, 1024, ;, static, final, int, EXP_FRAC_TABLE_LEN, =, 1025, ;, private, static, final, double, LOG_MAX_VALUE]
[;, static, final, int, EXP_FRAC_TABLE_LEN, =, 1025, ;, private, static, final, double, LOG_MAX_VALUE, =, StrictMath, ., log, (, Double, .]
[;, private, static, final, double, LOG_MAX_VALUE, =, StrictMath, ., log, (, Double, ., MAX_VALUE, ), ;, private, static, final, boolean]
[;, private, static, final, boolean, RECOMPUTE_TABLES_AT_RUNTIME, =, false, ;, private, static, final, double, LN_2_A, =, 0.693147063255310059, ;, private, static, final]
[., log, (, Double, ., MAX_VALUE, ), ;, private, static, final, boolean, RECOMPUTE_TABLES_AT_RUNTIME, =, false, ;, private, static, final, double]
[), ;, private, static, final, boolean, RECOMPUTE_TABLES_AT_RUNTIME, =, false, ;, private, static, final, double, LN_2_A, =, 0.693147063255310059, ;, private, static]
[., MAX_VALUE, ), ;, private, static, final, boolean, RECOMPUTE_TABLES_AT_RUNTIME, =, false, ;, private, static, final, double, LN_2_A, =, 0.693147063255310059, ;]
[;, private, static, final, double, LN_2_A, =, 0.693147063255310059, ;, private, static, final, double, LN_2_B, =, 1.17304635250823482e-7, ;, private, static, final]
[;, private, static, final, double, LN_2_B, =, 1.17304635250823482e-7, ;, private, static, final, double, LN_QUICK_COEF, [, ], [, ], =, {]
[;, private, static, final, double, LN_QUICK_COEF, [, ], [, ], =, {, {, 1.0, ,, 5.669184079525E-24, }, ,, {, -]
[;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =, {, {, 1.0, ,, -, 6.032174644509064E-23, }, ,, {]
[,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -]
[,, 5.669184079525E-24, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -]
[}, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,]
[,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }]
[,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {]
[,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {]
[}, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8]
[}, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8]
[,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -]
[,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -]
[}, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,]
[,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }]
[,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {]
[,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {]
[}, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9]
[}, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9]
[,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,, -]
[,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -]
[}, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,]
[,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,, -, 7.44321345601866E-11, }, ,, {, 0.11113807559013367, ,, 9.219544613762692E-9, }]
[,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,, -, 7.44321345601866E-11, }, ,, {]
[,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,, -, 7.44321345601866E-11, }, ,, {]
[}, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,, -, 7.44321345601866E-11, }, ,, {, 0.11113807559013367, ,, 9.219544613762692E-9]
[}, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,, -, 7.44321345601866E-11, }, ,, {, 0.11113807559013367, ,, 9.219544613762692E-9]
[,, {, -, 0.12502530217170715, ,, -, 7.44321345601866E-11, }, ,, {, 0.11113807559013367, ,, 9.219544613762692E-9, }, ,, }, ;, private, static, final]
[,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,, -, 7.44321345601866E-11, }, ,, {, 0.11113807559013367, ,, 9.219544613762692E-9, }, ,, }, ;]
[}, ,, {, -, 0.12502530217170715, ,, -, 7.44321345601866E-11, }, ,, {, 0.11113807559013367, ,, 9.219544613762692E-9, }, ,, }, ;, private, static]
[,, {, 0.11113807559013367, ,, 9.219544613762692E-9, }, ,, }, ;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =, {]
[,, -, 7.44321345601866E-11, }, ,, {, 0.11113807559013367, ,, 9.219544613762692E-9, }, ,, }, ;, private, static, final, double, LN_HI_PREC_COEF, [, ]]
[,, -, 7.44321345601866E-11, }, ,, {, 0.11113807559013367, ,, 9.219544613762692E-9, }, ,, }, ;, private, static, final, double, LN_HI_PREC_COEF, [, ]]
[}, ,, {, 0.11113807559013367, ,, 9.219544613762692E-9, }, ,, }, ;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =]
[}, ,, {, 0.11113807559013367, ,, 9.219544613762692E-9, }, ,, }, ;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =]
[,, }, ;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =, {, {, 1.0, ,, -, 6.032174644509064E-23, }]
[,, 9.219544613762692E-9, }, ,, }, ;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =, {, {, 1.0, ,]
[}, ,, }, ;, private, static, final, double, LN_HI_PREC_COEF, [, ], [, ], =, {, {, 1.0, ,, -, 6.032174644509064E-23]
[;, private, static, final, int, SINE_TABLE_LEN, =, 14, ;, private, static, final, double, SINE_TABLE_A, [, ], =, {, +, 0.0d]
[,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -]
[,, -, 6.032174644509064E-23, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {]
[}, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,]
[}, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,]
[,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }]
[,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {]
[,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {]
[}, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10]
[}, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10]
[,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {, -, 0.16624879837036133, ,, -]
[,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {, -]
[}, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {, -, 0.16624879837036133, ,]
[,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {, -, 0.16624879837036133, ,, -, 2.6033824355191673E-8, }, }, ;, private, static, final, int]
[,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {, -, 0.16624879837036133, ,, -, 2.6033824355191673E-8, }, }, ;]
[,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {, -, 0.16624879837036133, ,, -, 2.6033824355191673E-8, }, }, ;]
[}, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {, -, 0.16624879837036133, ,, -, 2.6033824355191673E-8, }, }, ;, private, static, final]
[}, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {, -, 0.16624879837036133, ,, -, 2.6033824355191673E-8, }, }, ;, private, static, final]
[,, {, -, 0.16624879837036133, ,, -, 2.6033824355191673E-8, }, }, ;, private, static, final, int, SINE_TABLE_LEN, =, 14, ;, private, static]
[,, 1.5830993332061267E-10, }, ,, {, -, 0.16624879837036133, ,, -, 2.6033824355191673E-8, }, }, ;, private, static, final, int, SINE_TABLE_LEN, =, 14]
[}, ,, {, -, 0.16624879837036133, ,, -, 2.6033824355191673E-8, }, }, ;, private, static, final, int, SINE_TABLE_LEN, =, 14, ;, private]
[}, ;, private, static, final, int, SINE_TABLE_LEN, =, 14, ;, private, static, final, double, SINE_TABLE_A, [, ], =, {, +]
[,, -, 2.6033824355191673E-8, }, }, ;, private, static, final, int, SINE_TABLE_LEN, =, 14, ;, private, static, final, double, SINE_TABLE_A, []
[,, -, 2.6033824355191673E-8, }, }, ;, private, static, final, int, SINE_TABLE_LEN, =, 14, ;, private, static, final, double, SINE_TABLE_A, []
[}, }, ;, private, static, final, int, SINE_TABLE_LEN, =, 14, ;, private, static, final, double, SINE_TABLE_A, [, ], =, {]
[}, }, ;, private, static, final, int, SINE_TABLE_LEN, =, 14, ;, private, static, final, double, SINE_TABLE_A, [, ], =, {]
[;, private, static, final, double, SINE_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +]
[;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +]
[,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +]
[,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +]
[,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +]
[,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +]
[,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +]
[,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +]
[,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +]
[,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +]
[,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +]
[,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +]
[,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +]
[,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +]
[,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +]
[,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +]
[,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }]
[,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }]
[,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }, ;, private, static]
[,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }, ;, private, static]
[,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B]
[,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B]
[,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =]
[,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =]
[,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d]
[,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d]
[,, +, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 4.068233003401932E-9d]
[,, +, 0.9985313415527344d, ,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 4.068233003401932E-9d]
[,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d]
[,, }, ;, private, static, final, double, SINE_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d]
[;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +]
[,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -]
[,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -]
[,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +]
[,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +]
[,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +]
[,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +]
[,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -]
[,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -]
[,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +]
[,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +]
[,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +]
[,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +]
[,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -]
[,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -]
[,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }]
[,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }]
[,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }, ;, private, static]
[,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }, ;, private, static]
[,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A]
[,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A]
[,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =]
[,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =]
[,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d]
[,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d]
[,, -, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,, +, 0.9921976327896118d]
[,, -, 1.0129027912496858E-9d, ,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,, +, 0.9921976327896118d]
[,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d]
[,, }, ;, private, static, final, double, COSINE_TABLE_A, [, ], =, {, +, 1.0d, ,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d]
[;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -]
[,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +]
[,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +]
[,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +]
[,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +]
[,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +]
[,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +]
[,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +]
[,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +]
[,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +]
[,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +]
[,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +]
[,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +]
[,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -]
[,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -]
[,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }]
[,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }]
[,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }, ;, private, static]
[,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }, ;, private, static]
[,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B]
[,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B]
[,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =]
[,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =]
[,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d]
[,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d]
[,, -, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,, +, 3.4439717236742845E-8d]
[,, -, 0.05417713522911072d, ,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,, +, 3.4439717236742845E-8d]
[,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d]
[,, }, ;, private, static, final, double, COSINE_TABLE_B, [, ], =, {, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d]
[;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +]
[,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +]
[,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +]
[,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +]
[,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +]
[,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -]
[,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -]
[,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +]
[,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +]
[,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -]
[,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -]
[,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +]
[,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +]
[,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +]
[,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +]
[,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }]
[,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }]
[,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }, ;, private, static]
[,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }, ;, private, static]
[,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A]
[,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A]
[,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =]
[,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =]
[,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d]
[,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d]
[,, +, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1256551444530487d]
[,, +, 2.0217439756338078E-10d, ,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1256551444530487d]
[,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d]
[,, }, ;, private, static, final, double, TANGENT_TABLE_A, [, ], =, {, +, 0.0d, ,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d]
[;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +]
[,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +]
[,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +]
[,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +]
[,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +]
[,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +]
[,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +]
[,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +]
[,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +]
[,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +]
[,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +]
[,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +]
[,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +]
[,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -]
[,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -]
[,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }]
[,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }]
[,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }, ;, private, static]
[,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }, ;, private, static]
[,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B]
[,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B]
[,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =]
[,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =]
[,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d]
[,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d]
[,, -, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 7.877917738262007E-9d]
[,, -, 18.430862426757812d, ,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 7.877917738262007E-9d]
[,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d]
[,, }, ;, private, static, final, double, TANGENT_TABLE_B, [, ], =, {, +, 0.0d, ,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d]
[;, private, static, final, long, RECIP_2PI, [, ], =, new, long, [, ], {, (, 0x28be60dbL, <<, 32, ), |]
[,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +]
[,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +]
[,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +]
[,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +]
[,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +]
[,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +]
[,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +]
[,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +]
[,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +]
[,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +]
[,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +]
[,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +]
[,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,, -]
[,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,, -]
[,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }]
[,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }]
[,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }, ;, private, static]
[,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }, ;, private, static]
[,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI]
[,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI]
[,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI, [, ], =]
[,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI, [, ], =]
[,, +, 4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI, [, ], =, new, long, []
[,, +, 4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI, [, ], =, new, long, []
[,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI, [, ], =, new, long, [, ], {, (]
[,, -, 3.356118100840571E-7d, ,, }, ;, private, static, final, long, RECIP_2PI, [, ], =, new, long, [, ], {, (]
[,, }, ;, private, static, final, long, RECIP_2PI, [, ], =, new, long, [, ], {, (, 0x28be60dbL, <<, 32]
[,, }, ;, private, static, final, long, RECIP_2PI, [, ], =, new, long, [, ], {, (, 0x28be60dbL, <<, 32]
[;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (, 0xc90fdaa2L, <<, 32, ), |]
[;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (, 0xc90fdaa2L, <<, 32, ), |]
[,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<]
[|, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (]
[), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,]
[<<, 32, ), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |]
[), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,]
[,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<]
[,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<]
[|, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (]
[), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,]
[<<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |]
[), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,]
[,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<]
[,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<]
[|, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (]
[), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,]
[<<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |]
[), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,]
[,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<]
[,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<]
[|, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (]
[), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,]
[<<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |]
[), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,]
[,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<]
[,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<]
[|, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (]
[), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,]
[<<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |]
[), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,]
[,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<]
[,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<]
[|, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (]
[), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,]
[<<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |]
[), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,]
[,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<]
[,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<]
[|, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (]
[), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,]
[<<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |]
[), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,]
[,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<]
[,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<]
[|, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (]
[), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,]
[<<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |]
[), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,]
[,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<]
[,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<]
[|, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (]
[), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,]
[<<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |]
[), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,]
[,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<]
[,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<]
[|, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (]
[), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,]
[<<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |]
[), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,]
[,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<]
[,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<]
[|, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (]
[), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,]
[<<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |]
[), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,]
[,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<]
[,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<]
[|, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (]
[), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,]
[<<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |]
[), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,]
[,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<]
[,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<]
[|, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (]
[), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,]
[<<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |]
[), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,]
[,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<]
[,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<]
[|, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (]
[), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,]
[<<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |]
[), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,]
[,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<]
[,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32]
[|, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL]
[), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,]
[<<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |]
[), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,]
[,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32]
[,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, []
[|, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long]
[), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private, static, final]
[<<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private]
[), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private, static, final]
[,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, []
[,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (]
[|, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ]]
[), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, []
[<<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new]
[), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, []
[,, 0x9afed7ecL, <<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (]
[}, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (, 0xc90fdaa2L, <<, 32, )]
[<<, 32, }, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (, 0xc90fdaa2L, <<]
[}, ;, private, static, final, long, PI_O_4_BITS, [, ], =, new, long, [, ], {, (, 0xc90fdaa2L, <<, 32, )]
[;, private, static, final, double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,, 0.25, ,, 0.375, ,, 0.5, ,]
[;, private, static, final, double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,, 0.25, ,, 0.375, ,, 0.5, ,]
[,, (, 0xc4c6628bL, <<, 32, ), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ], =, {, 0]
[|, 0x2168c234L, ,, (, 0xc4c6628bL, <<, 32, ), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ], =]
[), |, 0x2168c234L, ,, (, 0xc4c6628bL, <<, 32, ), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ]]
[<<, 32, ), |, 0x2168c234L, ,, (, 0xc4c6628bL, <<, 32, ), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS]
[), |, 0x2168c234L, ,, (, 0xc4c6628bL, <<, 32, ), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ]]
[,, (, 0xc4c6628bL, <<, 32, ), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ], =, {, 0]
[}, ;, private, static, final, double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,, 0.25, ,, 0.375, ,, 0.5]
[|, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,, 0.25, ,, 0.375]
[), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,, 0.25, ,]
[<<, 32, ), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,]
[), |, 0x80dc1cd1L, }, ;, private, static, final, double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,, 0.25, ,]
[}, ;, private, static, final, double, EIGHTHS, [, ], =, {, 0, ,, 0.125, ,, 0.25, ,, 0.375, ,, 0.5]
[;, private, static, final, double, CBRTTWO, [, ], =, {, 0.6299605249474366, ,, 0.7937005259840998, ,, 1.0, ,, 1.2599210498948732, ,, 1.5874010519681994, }]
[,, 0.125, ,, 0.25, ,, 0.375, ,, 0.5, ,, 0.625, ,, 0.75, ,, 0.875, ,, 1.0, ,, 1.125, ,, 1.25]
[,, 0.25, ,, 0.375, ,, 0.5, ,, 0.625, ,, 0.75, ,, 0.875, ,, 1.0, ,, 1.125, ,, 1.25, ,, 1.375]
[,, 0.375, ,, 0.5, ,, 0.625, ,, 0.75, ,, 0.875, ,, 1.0, ,, 1.125, ,, 1.25, ,, 1.375, ,, 1.5]
[,, 0.5, ,, 0.625, ,, 0.75, ,, 0.875, ,, 1.0, ,, 1.125, ,, 1.25, ,, 1.375, ,, 1.5, ,, 1.625]
[,, 0.625, ,, 0.75, ,, 0.875, ,, 1.0, ,, 1.125, ,, 1.25, ,, 1.375, ,, 1.5, ,, 1.625, }, ;]
[,, 0.75, ,, 0.875, ,, 1.0, ,, 1.125, ,, 1.25, ,, 1.375, ,, 1.5, ,, 1.625, }, ;, private, static]
[,, 0.875, ,, 1.0, ,, 1.125, ,, 1.25, ,, 1.375, ,, 1.5, ,, 1.625, }, ;, private, static, final, double]
[,, 1.0, ,, 1.125, ,, 1.25, ,, 1.375, ,, 1.5, ,, 1.625, }, ;, private, static, final, double, CBRTTWO, []
[,, 1.125, ,, 1.25, ,, 1.375, ,, 1.5, ,, 1.625, }, ;, private, static, final, double, CBRTTWO, [, ], =]
[,, 1.25, ,, 1.375, ,, 1.5, ,, 1.625, }, ;, private, static, final, double, CBRTTWO, [, ], =, {, 0.6299605249474366]
[,, 1.375, ,, 1.5, ,, 1.625, }, ;, private, static, final, double, CBRTTWO, [, ], =, {, 0.6299605249474366, ,, 0.7937005259840998]
[,, 1.5, ,, 1.625, }, ;, private, static, final, double, CBRTTWO, [, ], =, {, 0.6299605249474366, ,, 0.7937005259840998, ,, 1.0]
[,, 1.625, }, ;, private, static, final, double, CBRTTWO, [, ], =, {, 0.6299605249474366, ,, 0.7937005259840998, ,, 1.0, ,, 1.2599210498948732]
[}, ;, private, static, final, double, CBRTTWO, [, ], =, {, 0.6299605249474366, ,, 0.7937005259840998, ,, 1.0, ,, 1.2599210498948732, ,, 1.5874010519681994]
[;, private, static, final, long, HEX_40000000, =, 0x40000000L, ;, private, static, final, long, MASK_30BITS, =, -, 1L, -, (, HEX_40000000]
[,, 0.7937005259840998, ,, 1.0, ,, 1.2599210498948732, ,, 1.5874010519681994, }, ;, private, static, final, long, HEX_40000000, =, 0x40000000L, ;, private, static]
[,, 1.0, ,, 1.2599210498948732, ,, 1.5874010519681994, }, ;, private, static, final, long, HEX_40000000, =, 0x40000000L, ;, private, static, final, long]
[,, 1.2599210498948732, ,, 1.5874010519681994, }, ;, private, static, final, long, HEX_40000000, =, 0x40000000L, ;, private, static, final, long, MASK_30BITS, =]
[,, 1.5874010519681994, }, ;, private, static, final, long, HEX_40000000, =, 0x40000000L, ;, private, static, final, long, MASK_30BITS, =, -, 1L]
[}, ;, private, static, final, long, HEX_40000000, =, 0x40000000L, ;, private, static, final, long, MASK_30BITS, =, -, 1L, -, (]
[;, private, static, final, long, MASK_30BITS, =, -, 1L, -, (, HEX_40000000, -, 1, ), ;, private, static, final, int]
[;, private, static, final, int, MASK_NON_SIGN_INT, =, 0x7fffffff, ;, private, static, final, long, MASK_NON_SIGN_LONG, =, 0x7fffffffffffffffl, ;, private, static, final]
[-, (, HEX_40000000, -, 1, ), ;, private, static, final, int, MASK_NON_SIGN_INT, =, 0x7fffffff, ;, private, static, final, long, MASK_NON_SIGN_LONG]
[-, (, HEX_40000000, -, 1, ), ;, private, static, final, int, MASK_NON_SIGN_INT, =, 0x7fffffff, ;, private, static, final, long, MASK_NON_SIGN_LONG]
[;, private, static, final, int, MASK_NON_SIGN_INT, =, 0x7fffffff, ;, private, static, final, long, MASK_NON_SIGN_LONG, =, 0x7fffffffffffffffl, ;, private, static, final]
[), ;, private, static, final, int, MASK_NON_SIGN_INT, =, 0x7fffffff, ;, private, static, final, long, MASK_NON_SIGN_LONG, =, 0x7fffffffffffffffl, ;, private, static]
[-, 1, ), ;, private, static, final, int, MASK_NON_SIGN_INT, =, 0x7fffffff, ;, private, static, final, long, MASK_NON_SIGN_LONG, =, 0x7fffffffffffffffl, ;]
[), ;, private, static, final, int, MASK_NON_SIGN_INT, =, 0x7fffffff, ;, private, static, final, long, MASK_NON_SIGN_LONG, =, 0x7fffffffffffffffl, ;, private, static]
[;, private, static, final, long, MASK_NON_SIGN_LONG, =, 0x7fffffffffffffffl, ;, private, static, final, double, TWO_POWER_52, =, 4503599627370496.0, ;, private, static, final]
[;, private, static, final, double, TWO_POWER_52, =, 4503599627370496.0, ;, private, static, final, double, TWO_POWER_53, =, 2, *, TWO_POWER_52, ;, private]
[;, private, static, final, double, TWO_POWER_53, =, 2, *, TWO_POWER_52, ;, private, static, final, double, F_1_3, =, 1d, /, 3d]
[;, private, static, final, double, F_1_3, =, 1d, /, 3d, ;, private, static, final, double, F_1_5, =, 1d, /, 5d]
[*, TWO_POWER_52, ;, private, static, final, double, F_1_3, =, 1d, /, 3d, ;, private, static, final, double, F_1_5, =, 1d]
[;, private, static, final, double, F_1_3, =, 1d, /, 3d, ;, private, static, final, double, F_1_5, =, 1d, /, 5d]
[;, private, static, final, double, F_1_5, =, 1d, /, 5d, ;, private, static, final, double, F_1_7, =, 1d, /, 7d]
[/, 3d, ;, private, static, final, double, F_1_5, =, 1d, /, 5d, ;, private, static, final, double, F_1_7, =, 1d]
[;, private, static, final, double, F_1_5, =, 1d, /, 5d, ;, private, static, final, double, F_1_7, =, 1d, /, 7d]
[;, private, static, final, double, F_1_7, =, 1d, /, 7d, ;, private, static, final, double, F_1_9, =, 1d, /, 9d]
[/, 5d, ;, private, static, final, double, F_1_7, =, 1d, /, 7d, ;, private, static, final, double, F_1_9, =, 1d]
[;, private, static, final, double, F_1_7, =, 1d, /, 7d, ;, private, static, final, double, F_1_9, =, 1d, /, 9d]
[;, private, static, final, double, F_1_9, =, 1d, /, 9d, ;, private, static, final, double, F_1_11, =, 1d, /, 11d]
[/, 7d, ;, private, static, final, double, F_1_9, =, 1d, /, 9d, ;, private, static, final, double, F_1_11, =, 1d]
[;, private, static, final, double, F_1_9, =, 1d, /, 9d, ;, private, static, final, double, F_1_11, =, 1d, /, 11d]
[;, private, static, final, double, F_1_11, =, 1d, /, 11d, ;, private, static, final, double, F_1_13, =, 1d, /, 13d]
[/, 9d, ;, private, static, final, double, F_1_11, =, 1d, /, 11d, ;, private, static, final, double, F_1_13, =, 1d]
[;, private, static, final, double, F_1_11, =, 1d, /, 11d, ;, private, static, final, double, F_1_13, =, 1d, /, 13d]
[;, private, static, final, double, F_1_13, =, 1d, /, 13d, ;, private, static, final, double, F_1_15, =, 1d, /, 15d]
[/, 11d, ;, private, static, final, double, F_1_13, =, 1d, /, 13d, ;, private, static, final, double, F_1_15, =, 1d]
[;, private, static, final, double, F_1_13, =, 1d, /, 13d, ;, private, static, final, double, F_1_15, =, 1d, /, 15d]
[;, private, static, final, double, F_1_15, =, 1d, /, 15d, ;, private, static, final, double, F_1_17, =, 1d, /, 17d]
[/, 13d, ;, private, static, final, double, F_1_15, =, 1d, /, 15d, ;, private, static, final, double, F_1_17, =, 1d]
[;, private, static, final, double, F_1_15, =, 1d, /, 15d, ;, private, static, final, double, F_1_17, =, 1d, /, 17d]
[;, private, static, final, double, F_1_17, =, 1d, /, 17d, ;, private, static, final, double, F_3_4, =, 3d, /, 4d]
[/, 15d, ;, private, static, final, double, F_1_17, =, 1d, /, 17d, ;, private, static, final, double, F_3_4, =, 3d]
[;, private, static, final, double, F_1_17, =, 1d, /, 17d, ;, private, static, final, double, F_3_4, =, 3d, /, 4d]
[;, private, static, final, double, F_3_4, =, 3d, /, 4d, ;, private, static, final, double, F_15_16, =, 15d, /, 16d]
[/, 17d, ;, private, static, final, double, F_3_4, =, 3d, /, 4d, ;, private, static, final, double, F_15_16, =, 15d]
[;, private, static, final, double, F_3_4, =, 3d, /, 4d, ;, private, static, final, double, F_15_16, =, 15d, /, 16d]
[;, private, static, final, double, F_15_16, =, 15d, /, 16d, ;, private, static, final, double, F_13_14, =, 13d, /, 14d]
[/, 4d, ;, private, static, final, double, F_15_16, =, 15d, /, 16d, ;, private, static, final, double, F_13_14, =, 13d]
[;, private, static, final, double, F_15_16, =, 15d, /, 16d, ;, private, static, final, double, F_13_14, =, 13d, /, 14d]
[;, private, static, final, double, F_13_14, =, 13d, /, 14d, ;, private, static, final, double, F_11_12, =, 11d, /, 12d]
[/, 16d, ;, private, static, final, double, F_13_14, =, 13d, /, 14d, ;, private, static, final, double, F_11_12, =, 11d]
[;, private, static, final, double, F_13_14, =, 13d, /, 14d, ;, private, static, final, double, F_11_12, =, 11d, /, 12d]
[;, private, static, final, double, F_11_12, =, 11d, /, 12d, ;, private, static, final, double, F_9_10, =, 9d, /, 10d]
[/, 14d, ;, private, static, final, double, F_11_12, =, 11d, /, 12d, ;, private, static, final, double, F_9_10, =, 9d]
[;, private, static, final, double, F_11_12, =, 11d, /, 12d, ;, private, static, final, double, F_9_10, =, 9d, /, 10d]
[;, private, static, final, double, F_9_10, =, 9d, /, 10d, ;, private, static, final, double, F_7_8, =, 7d, /, 8d]
[/, 12d, ;, private, static, final, double, F_9_10, =, 9d, /, 10d, ;, private, static, final, double, F_7_8, =, 7d]
[;, private, static, final, double, F_9_10, =, 9d, /, 10d, ;, private, static, final, double, F_7_8, =, 7d, /, 8d]
[;, private, static, final, double, F_7_8, =, 7d, /, 8d, ;, private, static, final, double, F_5_6, =, 5d, /, 6d]
[/, 10d, ;, private, static, final, double, F_7_8, =, 7d, /, 8d, ;, private, static, final, double, F_5_6, =, 5d]
[;, private, static, final, double, F_7_8, =, 7d, /, 8d, ;, private, static, final, double, F_5_6, =, 5d, /, 6d]
[;, private, static, final, double, F_5_6, =, 5d, /, 6d, ;, private, static, final, double, F_1_2, =, 1d, /, 2d]
[/, 8d, ;, private, static, final, double, F_5_6, =, 5d, /, 6d, ;, private, static, final, double, F_1_2, =, 1d]
[;, private, static, final, double, F_5_6, =, 5d, /, 6d, ;, private, static, final, double, F_1_2, =, 1d, /, 2d]
[;, private, static, final, double, F_1_2, =, 1d, /, 2d, ;, private, static, final, double, F_1_4, =, 1d, /, 4d]
[/, 6d, ;, private, static, final, double, F_1_2, =, 1d, /, 2d, ;, private, static, final, double, F_1_4, =, 1d]
[;, private, static, final, double, F_1_2, =, 1d, /, 2d, ;, private, static, final, double, F_1_4, =, 1d, /, 4d]
[;, private, static, final, double, F_1_4, =, 1d, /, 4d, ;, private, FastMath, (, ), {, }, private, static, double]
[/, 2d, ;, private, static, final, double, F_1_4, =, 1d, /, 4d, ;, private, FastMath, (, ), {, }, private]
[;, private, static, final, double, F_1_4, =, 1d, /, 4d, ;, private, FastMath, (, ), {, }, private, static, double]
[;, private, FastMath, (, ), {, }, private, static, double, doubleHighPart, (, double, d, ), {, if, (, d, >]
[/, 4d, ;, private, FastMath, (, ), {, }, private, static, double, doubleHighPart, (, double, d, ), {, if, (]
[;, private, FastMath, (, ), {, }, private, static, double, doubleHighPart, (, double, d, ), {, if, (, d, >]
[), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d, ), ;, xl, =, xl, &]
[&&, d, <, Precision, ., SAFE_MIN, ), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d]
[>, -, Precision, ., SAFE_MIN, &&, d, <, Precision, ., SAFE_MIN, ), {, return, d, ;, }, long, xl, =]
[&&, d, <, Precision, ., SAFE_MIN, ), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d]
[&&, d, <, Precision, ., SAFE_MIN, ), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d]
[., SAFE_MIN, &&, d, <, Precision, ., SAFE_MIN, ), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits]
[), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d, ), ;, xl, =, xl, &]
[<, Precision, ., SAFE_MIN, ), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d, ), ;]
[), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d, ), ;, xl, =, xl, &]
[., SAFE_MIN, ), {, return, d, ;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d, ), ;, xl, =]
[;, }, long, xl, =, Double, ., doubleToRawLongBits, (, d, ), ;, xl, =, xl, &, MASK_30BITS, ;, return, Double]
[;, xl, =, xl, &, MASK_30BITS, ;, return, Double, ., longBitsToDouble, (, xl, ), ;, }, public, static, double, sqrt]
[., doubleToRawLongBits, (, d, ), ;, xl, =, xl, &, MASK_30BITS, ;, return, Double, ., longBitsToDouble, (, xl, ), ;]
[), ;, xl, =, xl, &, MASK_30BITS, ;, return, Double, ., longBitsToDouble, (, xl, ), ;, }, public, static, double]
[=, xl, &, MASK_30BITS, ;, return, Double, ., longBitsToDouble, (, xl, ), ;, }, public, static, double, sqrt, (, final]
[;, return, Double, ., longBitsToDouble, (, xl, ), ;, }, public, static, double, sqrt, (, final, double, a, ), {]
[&, MASK_30BITS, ;, return, Double, ., longBitsToDouble, (, xl, ), ;, }, public, static, double, sqrt, (, final, double, a]
[;, return, Double, ., longBitsToDouble, (, xl, ), ;, }, public, static, double, sqrt, (, final, double, a, ), {]
[;, }, public, static, double, sqrt, (, final, double, a, ), {, return, Math, ., sqrt, (, a, ), ;]
[., longBitsToDouble, (, xl, ), ;, }, public, static, double, sqrt, (, final, double, a, ), {, return, Math, .]
[), ;, }, public, static, double, sqrt, (, final, double, a, ), {, return, Math, ., sqrt, (, a, )]
[;, }, public, static, double, cosh, (, double, x, ), {, if, (, x, !=, x, ), {, return, x]
[., sqrt, (, a, ), ;, }, public, static, double, cosh, (, double, x, ), {, if, (, x, !=]
[), ;, }, public, static, double, cosh, (, double, x, ), {, if, (, x, !=, x, ), {, return]
[), {, return, x, ;, }, if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {]
[!=, x, ), {, return, x, ;, }, if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE]
[), {, return, x, ;, }, if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {]
[;, }, if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =]
[), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;]
[>, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x]
[), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;]
[), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (, 0.5, *, t, ), *]
[>=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (, 0.5, *, t]
[), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (, 0.5, *, t, ), *]
[;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (, x, )]
[), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (, x]
[*, x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp]
[), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (, x]
[;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (, x, <, -]
[*, t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (, x]
[), *, t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (]
[*, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else]
[), *, t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (]
[;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (, x, <, -]
[;, }, }, else, if, (, x, <, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {]
[*, exp, (, x, ), ;, }, }, else, if, (, x, <, -, 20, ), {, if, (, x]
[;, }, }, else, if, (, x, <, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {]
[), ;, }, }, else, if, (, x, <, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, )]
[), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x]
[<, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -]
[), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x]
[), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x]
[), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (, 0.5, *, t, )]
[<=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (, 0.5]
[), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (, 0.5, *, t, )]
[), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (, 0.5, *, t, )]
[;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (, -, x]
[), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (, -]
[*, x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp]
[*, x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp]
[), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (, -]
[;, }, else, {, return, 0.5, *, exp, (, -, x, ), ;, }, }, final, double, hiPrec, [, ]]
[*, t, ;, }, else, {, return, 0.5, *, exp, (, -, x, ), ;, }, }, final, double, hiPrec]
[), *, t, ;, }, else, {, return, 0.5, *, exp, (, -, x, ), ;, }, }, final, double]
[*, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (, -, x, ), ;, }, }]
[), *, t, ;, }, else, {, return, 0.5, *, exp, (, -, x, ), ;, }, }, final, double]
[;, }, else, {, return, 0.5, *, exp, (, -, x, ), ;, }, }, final, double, hiPrec, [, ]]
[;, }, }, final, double, hiPrec, [, ], =, new, double, [, 2, ], ;, if, (, x, <, 0.0]
[*, exp, (, -, x, ), ;, }, }, final, double, hiPrec, [, ], =, new, double, [, 2, ]]
[;, }, }, final, double, hiPrec, [, ], =, new, double, [, 2, ], ;, if, (, x, <, 0.0]
[), ;, }, }, final, double, hiPrec, [, ], =, new, double, [, 2, ], ;, if, (, x, <]
[), ;, }, }, final, double, hiPrec, [, ], =, new, double, [, 2, ], ;, if, (, x, <]
[;, if, (, x, <, 0.0, ), {, x, =, -, x, ;, }, exp, (, x, ,, 0.0, ,]
[], ;, if, (, x, <, 0.0, ), {, x, =, -, x, ;, }, exp, (, x, ,, 0.0]
[), {, x, =, -, x, ;, }, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =]
[<, 0.0, ), {, x, =, -, x, ;, }, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double]
[), {, x, =, -, x, ;, }, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =]
[=, -, x, ;, }, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0]
[;, }, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec]
[;, }, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec]
[;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya]
[,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double]
[,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double]
[+, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, []
[[, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ]]
[], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec]
[;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double]
[[, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ]]
[], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;]
[;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =]
[;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =]
[), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab]
[-, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp]
[-, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double]
[-, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp]
[[, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =]
[], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +]
[), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab]
[[, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp]
[], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double]
[;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =]
[*, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double]
[;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =]
[;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000]
[-, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip]
[+, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp]
[-, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip]
[;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000]
[;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp]
[-, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip]
[;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp]
[;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip]
[/, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb]
[;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip]
[=, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[*, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb]
[-, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa]
[+, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa]
[-, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa]
[;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb]
[;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *]
[-, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -]
[;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *]
[+=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, )]
[;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (]
[*, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb, +=]
[), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb]
[-, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya]
[-, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip]
[-, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb]
[-, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;]
[-, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb]
[*, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=]
[-, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb]
[-, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip]
[*, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip]
[-, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip]
[-, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya]
[*, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp]
[-, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya]
[), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb]
[*, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa]
[), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb]
[;, recipb, +=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (]
[+=, -, yb, *, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -]
[;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =]
[*, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;]
[*, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa]
[*, recip, *, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa]
[*, recip, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;]
[;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =]
[=, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;]
[;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb]
[;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb]
[), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -]
[-, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -]
[-, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (]
[-, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -]
[=, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;]
[;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =]
[=, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, double, result, =, ya]
[+, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, double, result]
[;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, double, result, =, ya]
[+=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, double, result, =, ya, +, yb]
[;, ya, =, temp, ;, double, result, =, ya, +, yb, ;, result, *=, 0.5, ;, return, result, ;, }]
[;, ya, =, temp, ;, double, result, =, ya, +, yb, ;, result, *=, 0.5, ;, return, result, ;, }]
[), ;, ya, =, temp, ;, double, result, =, ya, +, yb, ;, result, *=, 0.5, ;, return, result, ;]
[-, recipb, ), ;, ya, =, temp, ;, double, result, =, ya, +, yb, ;, result, *=, 0.5, ;, return]
[-, ya, -, recipb, ), ;, ya, =, temp, ;, double, result, =, ya, +, yb, ;, result, *=, 0.5]
[-, recipb, ), ;, ya, =, temp, ;, double, result, =, ya, +, yb, ;, result, *=, 0.5, ;, return]
[), ;, ya, =, temp, ;, double, result, =, ya, +, yb, ;, result, *=, 0.5, ;, return, result, ;]
[=, temp, ;, double, result, =, ya, +, yb, ;, result, *=, 0.5, ;, return, result, ;, }, public, static]
[;, double, result, =, ya, +, yb, ;, result, *=, 0.5, ;, return, result, ;, }, public, static, double, sinh]
[;, result, *=, 0.5, ;, return, result, ;, }, public, static, double, sinh, (, double, x, ), {, boolean, negate]
[+, yb, ;, result, *=, 0.5, ;, return, result, ;, }, public, static, double, sinh, (, double, x, ), {]
[;, result, *=, 0.5, ;, return, result, ;, }, public, static, double, sinh, (, double, x, ), {, boolean, negate]
[*=, 0.5, ;, return, result, ;, }, public, static, double, sinh, (, double, x, ), {, boolean, negate, =, false]
[;, return, result, ;, }, public, static, double, sinh, (, double, x, ), {, boolean, negate, =, false, ;, if]
[;, }, public, static, double, sinh, (, double, x, ), {, boolean, negate, =, false, ;, if, (, x, !=]
[;, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >, 20, ), {, if]
[), {, return, x, ;, }, if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {]
[!=, x, ), {, return, x, ;, }, if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE]
[), {, return, x, ;, }, if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {]
[;, }, if, (, x, >, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =]
[), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;]
[>, 20, ), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x]
[), {, if, (, x, >=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;]
[), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (, 0.5, *, t, ), *]
[>=, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (, 0.5, *, t]
[), {, final, double, t, =, exp, (, 0.5, *, x, ), ;, return, (, 0.5, *, t, ), *]
[;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (, x, )]
[), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (, x]
[*, x, ), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp]
[), ;, return, (, 0.5, *, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (, x]
[;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (, x, <, -]
[*, t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (, x]
[), *, t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (]
[*, t, ), *, t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else]
[), *, t, ;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (]
[;, }, else, {, return, 0.5, *, exp, (, x, ), ;, }, }, else, if, (, x, <, -]
[;, }, }, else, if, (, x, <, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {]
[*, exp, (, x, ), ;, }, }, else, if, (, x, <, -, 20, ), {, if, (, x]
[;, }, }, else, if, (, x, <, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {]
[), ;, }, }, else, if, (, x, <, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, )]
[), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x]
[<, -, 20, ), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -]
[), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x]
[), {, if, (, x, <=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x]
[), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (, -, 0.5, *, t]
[<=, -, LOG_MAX_VALUE, ), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (, -]
[), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (, -, 0.5, *, t]
[), {, final, double, t, =, exp, (, -, 0.5, *, x, ), ;, return, (, -, 0.5, *, t]
[;, return, (, -, 0.5, *, t, ), *, t, ;, }, else, {, return, -, 0.5, *, exp, (]
[), ;, return, (, -, 0.5, *, t, ), *, t, ;, }, else, {, return, -, 0.5, *, exp]
[*, x, ), ;, return, (, -, 0.5, *, t, ), *, t, ;, }, else, {, return, -, 0.5]
[*, x, ), ;, return, (, -, 0.5, *, t, ), *, t, ;, }, else, {, return, -, 0.5]
[), ;, return, (, -, 0.5, *, t, ), *, t, ;, }, else, {, return, -, 0.5, *, exp]
[;, }, else, {, return, -, 0.5, *, exp, (, -, x, ), ;, }, }, if, (, x, ==]
[*, t, ;, }, else, {, return, -, 0.5, *, exp, (, -, x, ), ;, }, }, if, (]
[), *, t, ;, }, else, {, return, -, 0.5, *, exp, (, -, x, ), ;, }, }, if]
[*, t, ), *, t, ;, }, else, {, return, -, 0.5, *, exp, (, -, x, ), ;, }]
[*, t, ), *, t, ;, }, else, {, return, -, 0.5, *, exp, (, -, x, ), ;, }]
[), *, t, ;, }, else, {, return, -, 0.5, *, exp, (, -, x, ), ;, }, }, if]
[;, }, else, {, return, -, 0.5, *, exp, (, -, x, ), ;, }, }, if, (, x, ==]
[;, }, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, )]
[*, exp, (, -, x, ), ;, }, }, if, (, x, ==, 0, ), {, return, x, ;, }]
[*, exp, (, -, x, ), ;, }, }, if, (, x, ==, 0, ), {, return, x, ;, }]
[;, }, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, )]
[), ;, }, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0]
[), ;, }, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0]
[), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =, -, x, ;, negate, =]
[==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =, -, x, ;]
[), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =, -, x, ;, negate, =]
[;, }, if, (, x, <, 0.0, ), {, x, =, -, x, ;, negate, =, true, ;, }, double]
[), {, x, =, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (, x, >, 0.25]
[<, 0.0, ), {, x, =, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (, x]
[), {, x, =, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (, x, >, 0.25]
[=, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (, x, >, 0.25, ), {, double]
[;, negate, =, true, ;, }, double, result, ;, if, (, x, >, 0.25, ), {, double, hiPrec, [, ]]
[;, negate, =, true, ;, }, double, result, ;, if, (, x, >, 0.25, ), {, double, hiPrec, [, ]]
[=, true, ;, }, double, result, ;, if, (, x, >, 0.25, ), {, double, hiPrec, [, ], =, new]
[;, }, double, result, ;, if, (, x, >, 0.25, ), {, double, hiPrec, [, ], =, new, double, []
[), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec]
[>, 0.25, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0]
[), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec]
[;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, []
[], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec]
[;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya]
[,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double]
[,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double]
[+, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, []
[[, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ]]
[], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec]
[;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double]
[[, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ]]
[], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;]
[;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =]
[;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =]
[), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab]
[-, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp]
[-, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double]
[-, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp]
[[, 0, ], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =]
[], -, hiPrec, [, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +]
[), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab]
[[, 1, ], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp]
[], ), ;, double, temp, =, ya, *, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double]
[;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =]
[*, HEX_40000000, ;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double]
[;, double, yaa, =, ya, +, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =]
[;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000]
[-, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip]
[+, temp, -, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp]
[-, temp, ;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip]
[;, double, yab, =, ya, -, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000]
[;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp]
[-, yaa, ;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip]
[;, double, recip, =, 1.0, /, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp]
[;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip]
[/, ya, ;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb]
[;, temp, =, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip]
[=, recip, *, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[*, HEX_40000000, ;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb]
[;, double, recipa, =, recip, +, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (]
[;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb]
[-, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa]
[+, temp, -, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa]
[-, temp, ;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa]
[;, double, recipb, =, recip, -, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb]
[;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *]
[-, recipa, ;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -]
[;, recipb, +=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *]
[+=, (, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, )]
[;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;]
[*, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =, -]
[), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =]
[-, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -]
[-, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip]
[-, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb]
[-, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;]
[-, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb]
[*, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=]
[-, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb]
[-, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip]
[*, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip]
[-, yab, *, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip]
[-, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -]
[*, recipa, -, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa]
[-, yab, *, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -]
[), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =]
[*, recipb, ), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;]
[), *, recip, ;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =]
[;, recipb, +=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;]
[+=, -, yb, *, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =]
[;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=, -]
[*, recip, ;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb]
[*, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa]
[*, recip, *, recip, ;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa]
[*, recip, ;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb]
[;, recipa, =, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=, -]
[=, -, recipa, ;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp]
[;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -]
[;, recipb, =, -, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -]
[=, -, recipb, ;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, )]
[;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =]
[;, temp, =, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =]
[=, ya, +, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+, recipa, ;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+=, -, (, temp, -, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;]
[;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb]
[;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb]
[), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -]
[-, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -]
[-, ya, -, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (]
[-, recipa, ), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -]
[=, temp, ;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;]
[;, temp, =, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =]
[=, ya, +, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, result, =, ya, +]
[+, recipb, ;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, result, =]
[;, yb, +=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, result, =, ya, +]
[+=, -, (, temp, -, ya, -, recipb, ), ;, ya, =, temp, ;, result, =, ya, +, yb, ;]
[;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, else, {, double, hiPrec]
[;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, else, {, double, hiPrec]
[), ;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, else, {, double]
[-, recipb, ), ;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, else]
[-, ya, -, recipb, ), ;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;]
[-, recipb, ), ;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, else]
[), ;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, else, {, double]
[=, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, else, {, double, hiPrec, [, ]]
[;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, else, {, double, hiPrec, [, ], =, new]
[=, ya, +, yb, ;, result, *=, 0.5, ;, }, else, {, double, hiPrec, [, ], =, new, double, []
[;, result, *=, 0.5, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1]
[+, yb, ;, result, *=, 0.5, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ]]
[;, result, *=, 0.5, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1]
[*=, 0.5, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (, x]
[;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (, x, ,, hiPrec]
[;, expm1, (, x, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ]]
[], ;, expm1, (, x, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1]
[;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya]
[,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double]
[+, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, []
[[, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ]]
[], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec]
[;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double]
[[, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ]]
[], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;]
[;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (]
[;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (]
[), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -]
[-, hiPrec, [, 1, ], ), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom]
[-, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, denom, =, 1.0, +, ya, ;, double]
[-, hiPrec, [, 1, ], ), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom]
[[, 0, ], -, hiPrec, [, 1, ], ), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =]
[], -, hiPrec, [, 1, ], ), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /]
[), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -]
[[, 1, ], ), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double]
[], ), ;, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =]
[;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +]
[+, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya]
[;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +]
[;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *]
[/, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =]
[;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *]
[;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =, ratio, +]
[+, yb, ;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =]
[+, yb, ;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =]
[), +, yb, ;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra]
[-, ya, ), +, yb, ;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;]
[-, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *]
[-, ya, ), +, yb, ;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;]
[), +, yb, ;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra]
[;, double, ratio, =, ya, *, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =, ratio, +]
[;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =]
[*, denomr, ;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =, ratio, +, temp, -, temp, ;, double]
[;, double, temp, =, ratio, *, HEX_40000000, ;, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =]
[;, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom]
[*, HEX_40000000, ;, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp]
[;, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom]
[;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, double, za, =, denom, +, temp]
[-, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, double, za, =, denom]
[+, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, double, za]
[-, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, double, za, =, denom]
[;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, double, za, =, denom, +, temp]
[;, temp, =, denom, *, HEX_40000000, ;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom]
[-, ra, ;, temp, =, denom, *, HEX_40000000, ;, double, za, =, denom, +, temp, -, temp, ;, double, zb]
[;, temp, =, denom, *, HEX_40000000, ;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom]
[=, denom, *, HEX_40000000, ;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za]
[;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (]
[*, HEX_40000000, ;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb]
[;, double, za, =, denom, +, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (]
[;, double, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb]
[-, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za]
[+, temp, -, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra]
[-, temp, ;, double, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za]
[;, double, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb]
[;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *]
[-, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -]
[;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *]
[+=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, )]
[;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =]
[*, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;]
[), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr]
[-, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[-, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *]
[-, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;]
[-, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *]
[*, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=]
[-, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[*, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[-, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb]
[*, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya]
[-, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb]
[), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr]
[*, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr]
[), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr]
[;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =]
[+=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =, ya, +]
[;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=]
[*, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;]
[;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=]
[+=, -, ya, *, denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -, (]
[;, temp, =, ya, +, ra, ;, yb, +=, -, (, temp, -, ya, -, ra, ), ;, ya, =]
[*, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -, (, temp, -, ya, -, ra, ), ;]
[*, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -, (, temp, -, ya, -, ra]
[*, denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -, (, temp, -, ya]
[*, denomb, *, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -, (, temp, -, ya]
[*, denomr, *, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -, (, temp, -, ya, -, ra]
[*, denomr, ;, temp, =, ya, +, ra, ;, yb, +=, -, (, temp, -, ya, -, ra, ), ;]
[;, temp, =, ya, +, ra, ;, yb, +=, -, (, temp, -, ya, -, ra, ), ;, ya, =]
[=, ya, +, ra, ;, yb, +=, -, (, temp, -, ya, -, ra, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, ya, -, ra, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+, ra, ;, yb, +=, -, (, temp, -, ya, -, ra, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, ya, -, ra, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+=, -, (, temp, -, ya, -, ra, ), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;]
[;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (, temp, -, ya, -, rb]
[;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (, temp, -, ya, -, rb]
[), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (, temp, -, ya, -]
[-, ra, ), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (, temp, -]
[-, ya, -, ra, ), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (]
[-, ra, ), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (, temp, -, ya, -]
[=, temp, ;, temp, =, ya, +, rb, ;, yb, +=, -, (, temp, -, ya, -, rb, ), ;]
[;, temp, =, ya, +, rb, ;, yb, +=, -, (, temp, -, ya, -, rb, ), ;, ya, =]
[=, ya, +, rb, ;, yb, +=, -, (, temp, -, ya, -, rb, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, ya, -, rb, ), ;, ya, =, temp, ;, result, =, ya, +]
[+, rb, ;, yb, +=, -, (, temp, -, ya, -, rb, ), ;, ya, =, temp, ;, result, =]
[;, yb, +=, -, (, temp, -, ya, -, rb, ), ;, ya, =, temp, ;, result, =, ya, +]
[+=, -, (, temp, -, ya, -, rb, ), ;, ya, =, temp, ;, result, =, ya, +, yb, ;]
[;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, if, (, negate, )]
[;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, if, (, negate, )]
[), ;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, if, (, negate]
[-, rb, ), ;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, if]
[-, ya, -, rb, ), ;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;]
[-, rb, ), ;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, if]
[), ;, ya, =, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, if, (, negate]
[=, temp, ;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, if, (, negate, ), {, result]
[;, result, =, ya, +, yb, ;, result, *=, 0.5, ;, }, if, (, negate, ), {, result, =, -]
[=, ya, +, yb, ;, result, *=, 0.5, ;, }, if, (, negate, ), {, result, =, -, result, ;]
[;, result, *=, 0.5, ;, }, if, (, negate, ), {, result, =, -, result, ;, }, return, result, ;]
[+, yb, ;, result, *=, 0.5, ;, }, if, (, negate, ), {, result, =, -, result, ;, }, return]
[;, result, *=, 0.5, ;, }, if, (, negate, ), {, result, =, -, result, ;, }, return, result, ;]
[*=, 0.5, ;, }, if, (, negate, ), {, result, =, -, result, ;, }, return, result, ;, }, public]
[;, }, if, (, negate, ), {, result, =, -, result, ;, }, return, result, ;, }, public, static, double]
[), {, result, =, -, result, ;, }, return, result, ;, }, public, static, double, tanh, (, double, x, )]
[=, -, result, ;, }, return, result, ;, }, public, static, double, tanh, (, double, x, ), {, boolean, negate]
[;, }, return, result, ;, }, public, static, double, tanh, (, double, x, ), {, boolean, negate, =, false, ;]
[;, }, return, result, ;, }, public, static, double, tanh, (, double, x, ), {, boolean, negate, =, false, ;]
[;, }, public, static, double, tanh, (, double, x, ), {, boolean, negate, =, false, ;, if, (, x, !=]
[;, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, >, 20.0, ), {, return]
[), {, return, x, ;, }, if, (, x, >, 20.0, ), {, return, 1.0, ;, }, if, (, x]
[!=, x, ), {, return, x, ;, }, if, (, x, >, 20.0, ), {, return, 1.0, ;, }, if]
[), {, return, x, ;, }, if, (, x, >, 20.0, ), {, return, 1.0, ;, }, if, (, x]
[;, }, if, (, x, >, 20.0, ), {, return, 1.0, ;, }, if, (, x, <, -, 20, )]
[), {, return, 1.0, ;, }, if, (, x, <, -, 20, ), {, return, -, 1.0, ;, }, if]
[>, 20.0, ), {, return, 1.0, ;, }, if, (, x, <, -, 20, ), {, return, -, 1.0, ;]
[), {, return, 1.0, ;, }, if, (, x, <, -, 20, ), {, return, -, 1.0, ;, }, if]
[;, }, if, (, x, <, -, 20, ), {, return, -, 1.0, ;, }, if, (, x, ==, 0]
[), {, return, -, 1.0, ;, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (]
[<, -, 20, ), {, return, -, 1.0, ;, }, if, (, x, ==, 0, ), {, return, x, ;]
[), {, return, -, 1.0, ;, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (]
[), {, return, -, 1.0, ;, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (]
[;, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, ), {]
[;, }, if, (, x, ==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, ), {]
[), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =, -, x, ;, negate, =]
[==, 0, ), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =, -, x, ;]
[), {, return, x, ;, }, if, (, x, <, 0.0, ), {, x, =, -, x, ;, negate, =]
[;, }, if, (, x, <, 0.0, ), {, x, =, -, x, ;, negate, =, true, ;, }, double]
[), {, x, =, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (, x, >=, 0.5]
[<, 0.0, ), {, x, =, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (, x]
[), {, x, =, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (, x, >=, 0.5]
[=, -, x, ;, negate, =, true, ;, }, double, result, ;, if, (, x, >=, 0.5, ), {, double]
[;, negate, =, true, ;, }, double, result, ;, if, (, x, >=, 0.5, ), {, double, hiPrec, [, ]]
[;, negate, =, true, ;, }, double, result, ;, if, (, x, >=, 0.5, ), {, double, hiPrec, [, ]]
[=, true, ;, }, double, result, ;, if, (, x, >=, 0.5, ), {, double, hiPrec, [, ], =, new]
[;, }, double, result, ;, if, (, x, >=, 0.5, ), {, double, hiPrec, [, ], =, new, double, []
[), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, *, 2.0, ,, 0.0]
[>=, 0.5, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, *, 2.0]
[), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, *, 2.0, ,, 0.0]
[;, exp, (, x, *, 2.0, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +]
[], ;, exp, (, x, *, 2.0, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ]]
[;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya]
[,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double]
[*, 2.0, ,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ]]
[,, 0.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double]
[,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double]
[+, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, []
[[, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ]]
[], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec]
[;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double]
[[, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ]]
[], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;]
[;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -, (, na, +, 1.0, -, ya, )]
[;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -, (, na, +, 1.0, -, ya, )]
[), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -, (, na, +, 1.0, -, ya]
[-, hiPrec, [, 1, ], ), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -, (]
[-, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, na, =, -, 1.0, +, ya, ;]
[-, hiPrec, [, 1, ], ), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -, (]
[[, 0, ], -, hiPrec, [, 1, ], ), ;, double, na, =, -, 1.0, +, ya, ;, double, nb]
[], -, hiPrec, [, 1, ], ), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -]
[), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -, (, na, +, 1.0, -, ya]
[[, 1, ], ), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -, (, na, +]
[], ), ;, double, na, =, -, 1.0, +, ya, ;, double, nb, =, -, (, na, +, 1.0, -]
[;, double, nb, =, -, (, na, +, 1.0, -, ya, ), ;, double, temp, =, na, +, yb, ;]
[+, ya, ;, double, nb, =, -, (, na, +, 1.0, -, ya, ), ;, double, temp, =, na, +]
[+, ya, ;, double, nb, =, -, (, na, +, 1.0, -, ya, ), ;, double, temp, =, na, +]
[;, double, nb, =, -, (, na, +, 1.0, -, ya, ), ;, double, temp, =, na, +, yb, ;]
[;, double, temp, =, na, +, yb, ;, nb, +=, -, (, temp, -, na, -, yb, ), ;, na]
[;, double, temp, =, na, +, yb, ;, nb, +=, -, (, temp, -, na, -, yb, ), ;, na]
[), ;, double, temp, =, na, +, yb, ;, nb, +=, -, (, temp, -, na, -, yb, ), ;]
[-, ya, ), ;, double, temp, =, na, +, yb, ;, nb, +=, -, (, temp, -, na, -, yb]
[+, 1.0, -, ya, ), ;, double, temp, =, na, +, yb, ;, nb, +=, -, (, temp, -, na]
[-, ya, ), ;, double, temp, =, na, +, yb, ;, nb, +=, -, (, temp, -, na, -, yb]
[), ;, double, temp, =, na, +, yb, ;, nb, +=, -, (, temp, -, na, -, yb, ), ;]
[;, nb, +=, -, (, temp, -, na, -, yb, ), ;, na, =, temp, ;, double, da, =, 1.0]
[+, yb, ;, nb, +=, -, (, temp, -, na, -, yb, ), ;, na, =, temp, ;, double, da]
[;, nb, +=, -, (, temp, -, na, -, yb, ), ;, na, =, temp, ;, double, da, =, 1.0]
[+=, -, (, temp, -, na, -, yb, ), ;, na, =, temp, ;, double, da, =, 1.0, +, ya]
[;, na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (, da, -, 1.0]
[;, na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (, da, -, 1.0]
[), ;, na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (, da, -]
[-, yb, ), ;, na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (]
[-, na, -, yb, ), ;, na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =]
[-, yb, ), ;, na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (]
[), ;, na, =, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (, da, -]
[=, temp, ;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (, da, -, 1.0, -, ya]
[;, double, da, =, 1.0, +, ya, ;, double, db, =, -, (, da, -, 1.0, -, ya, ), ;]
[;, double, db, =, -, (, da, -, 1.0, -, ya, ), ;, temp, =, da, +, yb, ;, db]
[+, ya, ;, double, db, =, -, (, da, -, 1.0, -, ya, ), ;, temp, =, da, +, yb]
[;, double, db, =, -, (, da, -, 1.0, -, ya, ), ;, temp, =, da, +, yb, ;, db]
[;, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =]
[;, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =]
[), ;, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da]
[-, ya, ), ;, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, )]
[-, 1.0, -, ya, ), ;, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -]
[-, ya, ), ;, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, )]
[), ;, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da]
[=, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;]
[;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *]
[+, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =]
[;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *]
[+=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;]
[;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;]
[;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;]
[), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp]
[-, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp]
[-, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da]
[-, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp]
[), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp]
[=, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab]
[;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da]
[=, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa]
[;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =]
[*, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double]
[;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =]
[;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000]
[-, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio]
[+, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp]
[-, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio]
[;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000]
[;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp]
[-, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio]
[;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp]
[;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio]
[/, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob]
[;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio]
[=, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[*, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob]
[-, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa]
[+, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa]
[-, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa]
[;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob]
[;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *]
[-, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -]
[;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *]
[+=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, )]
[;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =]
[/, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;]
[), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da]
[-, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[-, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /]
[-, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;]
[-, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /]
[*, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=]
[-, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[*, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[-, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na]
[*, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db]
[-, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na]
[), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da]
[*, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da]
[), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da]
[;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =]
[+=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =, ratioa, +]
[;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, else]
[/, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;]
[;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, else]
[+=, -, db, *, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, else, {, double]
[;, result, =, ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ]]
[/, da, ;, result, =, ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ], =, new, double, []
[/, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ], =, new]
[*, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ]]
[*, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ]]
[/, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ], =, new]
[/, da, ;, result, =, ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ], =, new, double, []
[;, result, =, ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ]]
[=, ratioa, +, ratiob, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1]
[;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (, x, *, 2.0]
[+, ratiob, ;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (, x]
[;, }, else, {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, expm1, (, x, *, 2.0]
[;, expm1, (, x, *, 2.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, []
[], ;, expm1, (, x, *, 2.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec]
[;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya]
[,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =]
[*, 2.0, ,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double]
[,, hiPrec, ), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =]
[), ;, double, ya, =, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (]
[;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double]
[+, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, []
[[, 0, ], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ]]
[], +, hiPrec, [, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec]
[;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double]
[[, 1, ], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ]]
[], ;, double, yb, =, -, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;]
[;, double, na, =, ya, ;, double, nb, =, yb, ;, double, da, =, 2.0, +, ya, ;, double, db]
[;, double, na, =, ya, ;, double, nb, =, yb, ;, double, da, =, 2.0, +, ya, ;, double, db]
[), ;, double, na, =, ya, ;, double, nb, =, yb, ;, double, da, =, 2.0, +, ya, ;, double]
[-, hiPrec, [, 1, ], ), ;, double, na, =, ya, ;, double, nb, =, yb, ;, double, da, =]
[-, hiPrec, [, 0, ], -, hiPrec, [, 1, ], ), ;, double, na, =, ya, ;, double, nb, =]
[-, hiPrec, [, 1, ], ), ;, double, na, =, ya, ;, double, nb, =, yb, ;, double, da, =]
[[, 0, ], -, hiPrec, [, 1, ], ), ;, double, na, =, ya, ;, double, nb, =, yb, ;]
[], -, hiPrec, [, 1, ], ), ;, double, na, =, ya, ;, double, nb, =, yb, ;, double, da]
[), ;, double, na, =, ya, ;, double, nb, =, yb, ;, double, da, =, 2.0, +, ya, ;, double]
[[, 1, ], ), ;, double, na, =, ya, ;, double, nb, =, yb, ;, double, da, =, 2.0, +]
[], ), ;, double, na, =, ya, ;, double, nb, =, yb, ;, double, da, =, 2.0, +, ya, ;]
[;, double, nb, =, yb, ;, double, da, =, 2.0, +, ya, ;, double, db, =, -, (, da, -]
[;, double, da, =, 2.0, +, ya, ;, double, db, =, -, (, da, -, 2.0, -, ya, ), ;]
[;, double, db, =, -, (, da, -, 2.0, -, ya, ), ;, double, temp, =, da, +, yb, ;]
[+, ya, ;, double, db, =, -, (, da, -, 2.0, -, ya, ), ;, double, temp, =, da, +]
[;, double, db, =, -, (, da, -, 2.0, -, ya, ), ;, double, temp, =, da, +, yb, ;]
[;, double, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da]
[;, double, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da]
[), ;, double, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;]
[-, ya, ), ;, double, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb]
[-, 2.0, -, ya, ), ;, double, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da]
[-, ya, ), ;, double, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb]
[), ;, double, temp, =, da, +, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;]
[;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *]
[+, yb, ;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =]
[;, db, +=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *]
[+=, -, (, temp, -, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;]
[;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;]
[;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;]
[), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp]
[-, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp]
[-, da, -, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da]
[-, yb, ), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp]
[), ;, da, =, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp]
[=, temp, ;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab]
[;, temp, =, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da]
[=, da, *, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa]
[;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =]
[*, HEX_40000000, ;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double]
[;, double, daa, =, da, +, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =]
[;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000]
[-, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio]
[+, temp, -, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp]
[-, temp, ;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio]
[;, double, dab, =, da, -, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000]
[;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp]
[-, daa, ;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio]
[;, double, ratio, =, na, /, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp]
[;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio]
[/, da, ;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob]
[;, temp, =, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio]
[=, ratio, *, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[*, HEX_40000000, ;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob]
[;, double, ratioa, =, ratio, +, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (]
[;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob]
[-, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa]
[+, temp, -, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa]
[-, temp, ;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa]
[;, double, ratiob, =, ratio, -, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob]
[;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *]
[-, ratioa, ;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -]
[;, ratiob, +=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *]
[+=, (, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, )]
[;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =]
[/, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;]
[), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da]
[-, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[-, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /]
[-, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;]
[-, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /]
[*, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=]
[-, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[*, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;]
[-, dab, *, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=]
[-, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na]
[*, ratioa, -, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db]
[-, dab, *, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na]
[), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da]
[*, ratiob, ), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da]
[), /, da, ;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da]
[;, ratiob, +=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =]
[+=, nb, /, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =, ratioa, +]
[;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, if]
[/, da, ;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;]
[;, ratiob, +=, -, db, *, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, if]
[+=, -, db, *, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, if, (, negate]
[;, result, =, ratioa, +, ratiob, ;, }, if, (, negate, ), {, result, =, -, result, ;, }, return]
[/, da, ;, result, =, ratioa, +, ratiob, ;, }, if, (, negate, ), {, result, =, -, result, ;]
[/, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, if, (, negate, ), {, result, =, -]
[*, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, if, (, negate, ), {, result]
[*, na, /, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, if, (, negate, ), {, result]
[/, da, /, da, ;, result, =, ratioa, +, ratiob, ;, }, if, (, negate, ), {, result, =, -]
[/, da, ;, result, =, ratioa, +, ratiob, ;, }, if, (, negate, ), {, result, =, -, result, ;]
[;, result, =, ratioa, +, ratiob, ;, }, if, (, negate, ), {, result, =, -, result, ;, }, return]
[=, ratioa, +, ratiob, ;, }, if, (, negate, ), {, result, =, -, result, ;, }, return, result, ;]
[;, }, if, (, negate, ), {, result, =, -, result, ;, }, return, result, ;, }, public, static, double]
[+, ratiob, ;, }, if, (, negate, ), {, result, =, -, result, ;, }, return, result, ;, }, public]
[;, }, if, (, negate, ), {, result, =, -, result, ;, }, return, result, ;, }, public, static, double]
[), {, result, =, -, result, ;, }, return, result, ;, }, public, static, double, acosh, (, final, double, a]
[=, -, result, ;, }, return, result, ;, }, public, static, double, acosh, (, final, double, a, ), {, return]
[;, }, return, result, ;, }, public, static, double, acosh, (, final, double, a, ), {, return, FastMath, ., log]
[;, }, return, result, ;, }, public, static, double, acosh, (, final, double, a, ), {, return, FastMath, ., log]
[;, }, public, static, double, acosh, (, final, double, a, ), {, return, FastMath, ., log, (, a, +, FastMath]
[;, }, public, static, double, asinh, (, double, a, ), {, boolean, negative, =, false, ;, if, (, a, <]
[., log, (, a, +, FastMath, ., sqrt, (, a, *, a, -, 1, ), ), ;, }, public, static]
[), ;, }, public, static, double, asinh, (, double, a, ), {, boolean, negative, =, false, ;, if, (, a]
[+, FastMath, ., sqrt, (, a, *, a, -, 1, ), ), ;, }, public, static, double, asinh, (, double]
[), ;, }, public, static, double, asinh, (, double, a, ), {, boolean, negative, =, false, ;, if, (, a]
[., sqrt, (, a, *, a, -, 1, ), ), ;, }, public, static, double, asinh, (, double, a, )]
[), ), ;, }, public, static, double, asinh, (, double, a, ), {, boolean, negative, =, false, ;, if, (]
[-, 1, ), ), ;, }, public, static, double, asinh, (, double, a, ), {, boolean, negative, =, false, ;]
[*, a, -, 1, ), ), ;, }, public, static, double, asinh, (, double, a, ), {, boolean, negative, =]
[-, 1, ), ), ;, }, public, static, double, asinh, (, double, a, ), {, boolean, negative, =, false, ;]
[), ), ;, }, public, static, double, asinh, (, double, a, ), {, boolean, negative, =, false, ;, if, (]
[;, if, (, a, <, 0, ), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAsinh]
[), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAsinh, ;, if, (, a, >, 0.167]
[<, 0, ), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAsinh, ;, if, (, a]
[), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAsinh, ;, if, (, a, >, 0.167]
[=, true, ;, a, =, -, a, ;, }, double, absAsinh, ;, if, (, a, >, 0.167, ), {, absAsinh]
[;, a, =, -, a, ;, }, double, absAsinh, ;, if, (, a, >, 0.167, ), {, absAsinh, =, FastMath]
[=, -, a, ;, }, double, absAsinh, ;, if, (, a, >, 0.167, ), {, absAsinh, =, FastMath, ., log]
[;, }, double, absAsinh, ;, if, (, a, >, 0.167, ), {, absAsinh, =, FastMath, ., log, (, FastMath, .]
[;, }, double, absAsinh, ;, if, (, a, >, 0.167, ), {, absAsinh, =, FastMath, ., log, (, FastMath, .]
[), {, absAsinh, =, FastMath, ., log, (, FastMath, ., sqrt, (, a, *, a, +, 1, ), +, a]
[>, 0.167, ), {, absAsinh, =, FastMath, ., log, (, FastMath, ., sqrt, (, a, *, a, +, 1, )]
[), {, absAsinh, =, FastMath, ., log, (, FastMath, ., sqrt, (, a, *, a, +, 1, ), +, a]
[=, FastMath, ., log, (, FastMath, ., sqrt, (, a, *, a, +, 1, ), +, a, ), ;, }]
[;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.097, ), {, absAsinh]
[., log, (, FastMath, ., sqrt, (, a, *, a, +, 1, ), +, a, ), ;, }, else, {]
[), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.097, ), {]
[+, a, ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.097]
[., sqrt, (, a, *, a, +, 1, ), +, a, ), ;, }, else, {, final, double, a2, =]
[), +, a, ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >]
[+, 1, ), +, a, ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (]
[*, a, +, 1, ), +, a, ), ;, }, else, {, final, double, a2, =, a, *, a, ;]
[+, 1, ), +, a, ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (]
[), +, a, ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >]
[), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.097, ), {]
[;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[*, a, ;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[;, if, (, a, >, 0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2]
[>, 0.097, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5]
[), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2]
[=, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7]
[;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[*, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2]
[;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *]
[-, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9]
[), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *]
[*, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -]
[*, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2]
[*, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -]
[), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1]
[-, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11]
[), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1]
[*, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *]
[*, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2]
[*, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *]
[), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a]
[-, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13]
[), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a]
[*, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh]
[*, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2]
[*, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh]
[), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {]
[-, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15]
[), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {]
[*, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036]
[*, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2]
[*, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036]
[), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >]
[-, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *]
[), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >]
[*, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (]
[*, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, )]
[*, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (]
[), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if]
[-, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, )]
[), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if]
[*, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }]
[*, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12]
[*, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }]
[), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;]
[-, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10]
[), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;]
[*, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2]
[*, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *]
[*, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2]
[), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *]
[-, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *]
[), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *]
[*, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4]
[*, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, )]
[*, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4]
[), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *]
[), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;]
[), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if]
[), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >]
[), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {]
[), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a]
[), *, F_1_2, ), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1]
[), ;, }, else, if, (, a, >, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *]
[), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2]
[>, 0.036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5]
[), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2]
[=, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7]
[;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[*, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2]
[;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *]
[-, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9]
[), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *]
[*, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -]
[*, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2]
[*, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -]
[), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1]
[-, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11]
[), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1]
[*, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *]
[*, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2]
[*, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *]
[), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a]
[-, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *]
[), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a]
[*, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh]
[*, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, )]
[*, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh]
[), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {]
[-, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, )]
[), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {]
[*, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036]
[*, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8]
[*, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036]
[), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >]
[-, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6]
[), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >]
[*, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (]
[*, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *]
[*, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (]
[), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if]
[-, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *]
[), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if]
[*, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }]
[*, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, )]
[*, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }]
[), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if]
[), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >]
[), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {]
[), *, F_3_4, ), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a]
[), *, F_1_2, ), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1]
[), ;, }, else, if, (, a, >, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *]
[), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2]
[>, 0.0036, ), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5]
[), {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2]
[=, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7]
[;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, F_1_5, *]
[*, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2]
[;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, F_1_5, *]
[), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, F_1_5]
[-, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *]
[), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, F_1_5]
[*, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2]
[*, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, )]
[*, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2]
[), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[-, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, )]
[), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[*, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[*, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4]
[*, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (]
[), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *]
[-, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2]
[), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *]
[*, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -]
[*, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;]
[*, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -]
[), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1]
[-, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {]
[), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1]
[*, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *]
[*, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =]
[*, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *]
[), *, F_5_6, ), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1]
[), *, F_3_4, ), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *]
[), *, F_1_2, ), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -]
[), ;, }, else, {, absAsinh, =, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, F_1_5]
[=, a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *, F_1_2, )]
[;, }, }, return, negative, ?, -, absAsinh, :, absAsinh, ;, }, public, static, double, atanh, (, double, a, )]
[*, (, 1, -, a2, *, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *, F_1_2, ), ;, }]
[;, }, }, return, negative, ?, -, absAsinh, :, absAsinh, ;, }, public, static, double, atanh, (, double, a, )]
[), ;, }, }, return, negative, ?, -, absAsinh, :, absAsinh, ;, }, public, static, double, atanh, (, double, a]
[-, a2, *, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *, F_1_2, ), ;, }, }, return, negative]
[), ;, }, }, return, negative, ?, -, absAsinh, :, absAsinh, ;, }, public, static, double, atanh, (, double, a]
[*, F_1_2, ), ;, }, }, return, negative, ?, -, absAsinh, :, absAsinh, ;, }, public, static, double, atanh, (]
[*, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *, F_1_2, ), ;, }, }, return, negative, ?, -]
[*, F_1_2, ), ;, }, }, return, negative, ?, -, absAsinh, :, absAsinh, ;, }, public, static, double, atanh, (]
[), *, F_1_2, ), ;, }, }, return, negative, ?, -, absAsinh, :, absAsinh, ;, }, public, static, double, atanh]
[-, a2, *, F_1_5, *, F_3_4, ), *, F_1_2, ), ;, }, }, return, negative, ?, -, absAsinh, :, absAsinh]
[), *, F_1_2, ), ;, }, }, return, negative, ?, -, absAsinh, :, absAsinh, ;, }, public, static, double, atanh]
[*, F_3_4, ), *, F_1_2, ), ;, }, }, return, negative, ?, -, absAsinh, :, absAsinh, ;, }, public, static]
[*, F_1_5, *, F_3_4, ), *, F_1_2, ), ;, }, }, return, negative, ?, -, absAsinh, :, absAsinh, ;, }]
[*, F_3_4, ), *, F_1_2, ), ;, }, }, return, negative, ?, -, absAsinh, :, absAsinh, ;, }, public, static]
[), *, F_1_2, ), ;, }, }, return, negative, ?, -, absAsinh, :, absAsinh, ;, }, public, static, double, atanh]
[), ;, }, }, return, negative, ?, -, absAsinh, :, absAsinh, ;, }, public, static, double, atanh, (, double, a]
[;, }, public, static, double, atanh, (, double, a, ), {, boolean, negative, =, false, ;, if, (, a, <]
[?, -, absAsinh, :, absAsinh, ;, }, public, static, double, atanh, (, double, a, ), {, boolean, negative, =, false]
[:, absAsinh, ;, }, public, static, double, atanh, (, double, a, ), {, boolean, negative, =, false, ;, if, (]
[:, absAsinh, ;, }, public, static, double, atanh, (, double, a, ), {, boolean, negative, =, false, ;, if, (]
[;, }, public, static, double, atanh, (, double, a, ), {, boolean, negative, =, false, ;, if, (, a, <]
[;, if, (, a, <, 0, ), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAtanh]
[), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAtanh, ;, if, (, a, >, 0.15]
[<, 0, ), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAtanh, ;, if, (, a]
[), {, negative, =, true, ;, a, =, -, a, ;, }, double, absAtanh, ;, if, (, a, >, 0.15]
[=, true, ;, a, =, -, a, ;, }, double, absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh]
[;, a, =, -, a, ;, }, double, absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh, =, 0.5]
[=, -, a, ;, }, double, absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh, =, 0.5, *, FastMath]
[;, }, double, absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh, =, 0.5, *, FastMath, ., log, (]
[;, }, double, absAtanh, ;, if, (, a, >, 0.15, ), {, absAtanh, =, 0.5, *, FastMath, ., log, (]
[), {, absAtanh, =, 0.5, *, FastMath, ., log, (, (, 1, +, a, ), /, (, 1, -, a]
[>, 0.15, ), {, absAtanh, =, 0.5, *, FastMath, ., log, (, (, 1, +, a, ), /, (, 1]
[), {, absAtanh, =, 0.5, *, FastMath, ., log, (, (, 1, +, a, ), /, (, 1, -, a]
[=, 0.5, *, FastMath, ., log, (, (, 1, +, a, ), /, (, 1, -, a, ), ), ;]
[;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.087, ), {, absAtanh]
[*, FastMath, ., log, (, (, 1, +, a, ), /, (, 1, -, a, ), ), ;, }, else]
[;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.087, ), {, absAtanh]
[., log, (, (, 1, +, a, ), /, (, 1, -, a, ), ), ;, }, else, {, final]
[), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.087, ), {]
[/, (, 1, -, a, ), ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if]
[), /, (, 1, -, a, ), ), ;, }, else, {, final, double, a2, =, a, *, a, ;]
[+, a, ), /, (, 1, -, a, ), ), ;, }, else, {, final, double, a2, =, a, *]
[), /, (, 1, -, a, ), ), ;, }, else, {, final, double, a2, =, a, *, a, ;]
[), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.087, ), {]
[), ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.087, )]
[-, a, ), ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >]
[), ), ;, }, else, {, final, double, a2, =, a, *, a, ;, if, (, a, >, 0.087, )]
[;, if, (, a, >, 0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +]
[*, a, ;, if, (, a, >, 0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[;, if, (, a, >, 0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +]
[), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2]
[>, 0.087, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5]
[), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2]
[=, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7]
[;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[*, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2]
[;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *]
[+, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9]
[), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *]
[*, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2]
[), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *]
[), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2]
[+, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11]
[), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2]
[*, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2]
[), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2]
[), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +]
[+, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13]
[), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +]
[*, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2]
[), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1, +]
[), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1]
[+, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15]
[), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1]
[*, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2]
[), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (, 1]
[), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (]
[+, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, )]
[), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (]
[*, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), )]
[), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *, (]
[), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *]
[+, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), )]
[), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *]
[*, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), ), ), )]
[), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a, *]
[), ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a]
[+, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), ), ), ), ;, }, else]
[), ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a]
[*, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), ), ), ), ;, }, else, if, (]
[), ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =, a]
[), ), ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =]
[+, a2, *, F_1_17, ), ), ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031]
[), ), ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =]
[*, F_1_17, ), ), ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {]
[), ), ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.031, ), {, absAtanh, =]
[), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2]
[>, 0.031, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5]
[), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2]
[=, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7]
[;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[*, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2]
[;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *]
[+, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9]
[), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *]
[*, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2]
[), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *]
[), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2]
[+, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11]
[), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2]
[*, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2]
[), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2]
[), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +]
[+, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, )]
[), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +]
[*, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), )]
[), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1, +]
[), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1]
[+, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), ), ), ), )]
[), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1]
[*, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), ), ), ), ), ;, }]
[), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (, 1]
[), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (]
[+, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), ), ), ), ), ;, }, else, if, (]
[), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (]
[*, (, F_1_11, +, a2, *, F_1_13, ), ), ), ), ), ), ;, }, else, if, (, a, >]
[), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *, (]
[), ), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *]
[+, a2, *, F_1_13, ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {]
[), ), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *]
[*, F_1_13, ), ), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =]
[), ), ), ), ), ), ;, }, else, if, (, a, >, 0.003, ), {, absAtanh, =, a, *]
[), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2]
[>, 0.003, ), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5]
[), {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2]
[=, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7]
[;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, F_1_5, )]
[*, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2]
[;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, F_1_5, )]
[), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, F_1_5]
[+, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, )]
[), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, F_1_5]
[*, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), ), )]
[), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, F_1_5]
[), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *]
[+, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), ), ), ), ;, }]
[), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *]
[*, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), ), ), ), ;, }, else, {]
[), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *]
[), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2]
[+, a2, *, (, F_1_7, +, a2, *, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =, a]
[), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2]
[*, (, F_1_7, +, a2, *, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =, a, *, (]
[), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +, a2]
[), ), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +]
[+, a2, *, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2]
[), ), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +]
[*, F_1_9, ), ), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (]
[), ), ), ), ;, }, else, {, absAtanh, =, a, *, (, 1, +, a2, *, (, F_1_3, +]
[=, a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, F_1_5, ), ), ;, }, }, return]
[;, }, }, return, negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final, double, a]
[*, (, 1, +, a2, *, (, F_1_3, +, a2, *, F_1_5, ), ), ;, }, }, return, negative, ?]
[;, }, }, return, negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final, double, a]
[), ;, }, }, return, negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final, double]
[+, a2, *, (, F_1_3, +, a2, *, F_1_5, ), ), ;, }, }, return, negative, ?, -, absAtanh, :]
[), ;, }, }, return, negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final, double]
[*, (, F_1_3, +, a2, *, F_1_5, ), ), ;, }, }, return, negative, ?, -, absAtanh, :, absAtanh, ;]
[), ;, }, }, return, negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final, double]
[), ), ;, }, }, return, negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final]
[+, a2, *, F_1_5, ), ), ;, }, }, return, negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static]
[), ), ;, }, }, return, negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final]
[*, F_1_5, ), ), ;, }, }, return, negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum]
[), ), ;, }, }, return, negative, ?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final]
[;, }, public, static, double, signum, (, final, double, a, ), {, return, (, a, <, 0.0, ), ?, -]
[?, -, absAtanh, :, absAtanh, ;, }, public, static, double, signum, (, final, double, a, ), {, return, (, a]
[:, absAtanh, ;, }, public, static, double, signum, (, final, double, a, ), {, return, (, a, <, 0.0, )]
[:, absAtanh, ;, }, public, static, double, signum, (, final, double, a, ), {, return, (, a, <, 0.0, )]
[;, }, public, static, double, signum, (, final, double, a, ), {, return, (, a, <, 0.0, ), ?, -]
[;, }, public, static, float, signum, (, final, float, a, ), {, return, (, a, <, 0.0f, ), ?, -]
[?, -, 1.0, :, (, (, a, >, 0.0, ), ?, 1.0, :, a, ), ;, }, public, static, float]
[), ?, -, 1.0, :, (, (, a, >, 0.0, ), ?, 1.0, :, a, ), ;, }, public, static]
[<, 0.0, ), ?, -, 1.0, :, (, (, a, >, 0.0, ), ?, 1.0, :, a, ), ;, }]
[), ?, -, 1.0, :, (, (, a, >, 0.0, ), ?, 1.0, :, a, ), ;, }, public, static]
[:, (, (, a, >, 0.0, ), ?, 1.0, :, a, ), ;, }, public, static, float, signum, (, final]
[:, (, (, a, >, 0.0, ), ?, 1.0, :, a, ), ;, }, public, static, float, signum, (, final]
[;, }, public, static, float, signum, (, final, float, a, ), {, return, (, a, <, 0.0f, ), ?, -]
[), ;, }, public, static, float, signum, (, final, float, a, ), {, return, (, a, <, 0.0f, ), ?]
[?, 1.0, :, a, ), ;, }, public, static, float, signum, (, final, float, a, ), {, return, (, a]
[), ?, 1.0, :, a, ), ;, }, public, static, float, signum, (, final, float, a, ), {, return, (]
[>, 0.0, ), ?, 1.0, :, a, ), ;, }, public, static, float, signum, (, final, float, a, ), {]
[), ?, 1.0, :, a, ), ;, }, public, static, float, signum, (, final, float, a, ), {, return, (]
[:, a, ), ;, }, public, static, float, signum, (, final, float, a, ), {, return, (, a, <, 0.0f]
[), ;, }, public, static, float, signum, (, final, float, a, ), {, return, (, a, <, 0.0f, ), ?]
[;, }, public, static, double, nextUp, (, final, double, a, ), {, return, nextAfter, (, a, ,, Double, ., POSITIVE_INFINITY]
[?, -, 1.0f, :, (, (, a, >, 0.0f, ), ?, 1.0f, :, a, ), ;, }, public, static, double]
[), ?, -, 1.0f, :, (, (, a, >, 0.0f, ), ?, 1.0f, :, a, ), ;, }, public, static]
[<, 0.0f, ), ?, -, 1.0f, :, (, (, a, >, 0.0f, ), ?, 1.0f, :, a, ), ;, }]
[), ?, -, 1.0f, :, (, (, a, >, 0.0f, ), ?, 1.0f, :, a, ), ;, }, public, static]
[:, (, (, a, >, 0.0f, ), ?, 1.0f, :, a, ), ;, }, public, static, double, nextUp, (, final]
[:, (, (, a, >, 0.0f, ), ?, 1.0f, :, a, ), ;, }, public, static, double, nextUp, (, final]
[;, }, public, static, double, nextUp, (, final, double, a, ), {, return, nextAfter, (, a, ,, Double, ., POSITIVE_INFINITY]
[), ;, }, public, static, double, nextUp, (, final, double, a, ), {, return, nextAfter, (, a, ,, Double, .]
[?, 1.0f, :, a, ), ;, }, public, static, double, nextUp, (, final, double, a, ), {, return, nextAfter, (]
[), ?, 1.0f, :, a, ), ;, }, public, static, double, nextUp, (, final, double, a, ), {, return, nextAfter]
[>, 0.0f, ), ?, 1.0f, :, a, ), ;, }, public, static, double, nextUp, (, final, double, a, ), {]
[), ?, 1.0f, :, a, ), ;, }, public, static, double, nextUp, (, final, double, a, ), {, return, nextAfter]
[:, a, ), ;, }, public, static, double, nextUp, (, final, double, a, ), {, return, nextAfter, (, a, ,]
[), ;, }, public, static, double, nextUp, (, final, double, a, ), {, return, nextAfter, (, a, ,, Double, .]
[;, }, public, static, float, nextUp, (, final, float, a, ), {, return, nextAfter, (, a, ,, Float, ., POSITIVE_INFINITY]
[,, Double, ., POSITIVE_INFINITY, ), ;, }, public, static, float, nextUp, (, final, float, a, ), {, return, nextAfter, (]
[), ;, }, public, static, float, nextUp, (, final, float, a, ), {, return, nextAfter, (, a, ,, Float, .]
[., POSITIVE_INFINITY, ), ;, }, public, static, float, nextUp, (, final, float, a, ), {, return, nextAfter, (, a, ,]
[;, }, public, static, double, random, (, ), {, return, Math, ., random, (, ), ;, }, public, static, double]
[,, Float, ., POSITIVE_INFINITY, ), ;, }, public, static, double, random, (, ), {, return, Math, ., random, (, )]
[), ;, }, public, static, double, random, (, ), {, return, Math, ., random, (, ), ;, }, public, static]
[., POSITIVE_INFINITY, ), ;, }, public, static, double, random, (, ), {, return, Math, ., random, (, ), ;, }]
[;, }, public, static, double, exp, (, double, x, ), {, return, exp, (, x, ,, 0.0, ,, null, )]
[., random, (, ), ;, }, public, static, double, exp, (, double, x, ), {, return, exp, (, x, ,]
[;, }, private, static, double, exp, (, double, x, ,, double, extra, ,, double, [, ], hiPrec, ), {, double]
[,, 0.0, ,, null, ), ;, }, private, static, double, exp, (, double, x, ,, double, extra, ,, double, []
[,, null, ), ;, }, private, static, double, exp, (, double, x, ,, double, extra, ,, double, [, ], hiPrec]
[), ;, }, private, static, double, exp, (, double, x, ,, double, extra, ,, double, [, ], hiPrec, ), {]
[), {, intVal, =, (, int, ), -, x, ;, if, (, intVal, >, 746, ), {, if, (, hiPrec]
[<, 0.0, ), {, intVal, =, (, int, ), -, x, ;, if, (, intVal, >, 746, ), {, if]
[), {, intVal, =, (, int, ), -, x, ;, if, (, intVal, >, 746, ), {, if, (, hiPrec]
[=, (, int, ), -, x, ;, if, (, intVal, >, 746, ), {, if, (, hiPrec, !=, null, )]
[;, if, (, intVal, >, 746, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[;, if, (, intVal, >, 746, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[;, if, (, intVal, >, 746, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, 0.0, ;, hiPrec, [, 1, ]]
[>, 746, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, 0.0, ;, hiPrec, []
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, 0.0, ;, hiPrec, [, 1, ]]
[), {, hiPrec, [, 0, ], =, 0.0, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, 0.0, ;]
[!=, null, ), {, hiPrec, [, 0, ], =, 0.0, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return]
[), {, hiPrec, [, 0, ], =, 0.0, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, 0.0, ;]
[=, 0.0, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, 0.0, ;, }, if, (, intVal, >, 709]
[[, 0, ], =, 0.0, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, 0.0, ;, }, if, (]
[], =, 0.0, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, 0.0, ;, }, if, (, intVal, >]
[;, hiPrec, [, 1, ], =, 0.0, ;, }, return, 0.0, ;, }, if, (, intVal, >, 709, ), {]
[=, 0.0, ;, }, return, 0.0, ;, }, if, (, intVal, >, 709, ), {, final, double, result, =, exp]
[[, 1, ], =, 0.0, ;, }, return, 0.0, ;, }, if, (, intVal, >, 709, ), {, final, double]
[], =, 0.0, ;, }, return, 0.0, ;, }, if, (, intVal, >, 709, ), {, final, double, result, =]
[;, }, return, 0.0, ;, }, if, (, intVal, >, 709, ), {, final, double, result, =, exp, (, x]
[;, }, if, (, intVal, >, 709, ), {, final, double, result, =, exp, (, x, +, 40.19140625, ,, extra]
[), {, final, double, result, =, exp, (, x, +, 40.19140625, ,, extra, ,, hiPrec, ), /, 285040095144011776.0, ;, if]
[>, 709, ), {, final, double, result, =, exp, (, x, +, 40.19140625, ,, extra, ,, hiPrec, ), /, 285040095144011776.0]
[), {, final, double, result, =, exp, (, x, +, 40.19140625, ,, extra, ,, hiPrec, ), /, 285040095144011776.0, ;, if]
[;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 285040095144011776.0, ;, hiPrec, [, 1, ], /=]
[/, 285040095144011776.0, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 285040095144011776.0, ;, hiPrec, [, 1]
[,, extra, ,, hiPrec, ), /, 285040095144011776.0, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=]
[+, 40.19140625, ,, extra, ,, hiPrec, ), /, 285040095144011776.0, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0]
[,, extra, ,, hiPrec, ), /, 285040095144011776.0, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=]
[,, hiPrec, ), /, 285040095144011776.0, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 285040095144011776.0, ;]
[), /, 285040095144011776.0, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 285040095144011776.0, ;, hiPrec, []
[;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 285040095144011776.0, ;, hiPrec, [, 1, ], /=]
[), {, hiPrec, [, 0, ], /=, 285040095144011776.0, ;, hiPrec, [, 1, ], /=, 285040095144011776.0, ;, }, return, result, ;]
[!=, null, ), {, hiPrec, [, 0, ], /=, 285040095144011776.0, ;, hiPrec, [, 1, ], /=, 285040095144011776.0, ;, }, return]
[), {, hiPrec, [, 0, ], /=, 285040095144011776.0, ;, hiPrec, [, 1, ], /=, 285040095144011776.0, ;, }, return, result, ;]
[/=, 285040095144011776.0, ;, hiPrec, [, 1, ], /=, 285040095144011776.0, ;, }, return, result, ;, }, if, (, intVal, ==, 709]
[[, 0, ], /=, 285040095144011776.0, ;, hiPrec, [, 1, ], /=, 285040095144011776.0, ;, }, return, result, ;, }, if, (]
[], /=, 285040095144011776.0, ;, hiPrec, [, 1, ], /=, 285040095144011776.0, ;, }, return, result, ;, }, if, (, intVal, ==]
[;, hiPrec, [, 1, ], /=, 285040095144011776.0, ;, }, return, result, ;, }, if, (, intVal, ==, 709, ), {]
[/=, 285040095144011776.0, ;, }, return, result, ;, }, if, (, intVal, ==, 709, ), {, final, double, result, =, exp]
[[, 1, ], /=, 285040095144011776.0, ;, }, return, result, ;, }, if, (, intVal, ==, 709, ), {, final, double]
[], /=, 285040095144011776.0, ;, }, return, result, ;, }, if, (, intVal, ==, 709, ), {, final, double, result, =]
[;, }, return, result, ;, }, if, (, intVal, ==, 709, ), {, final, double, result, =, exp, (, x]
[;, }, if, (, intVal, ==, 709, ), {, final, double, result, =, exp, (, x, +, 1.494140625, ,, extra]
[), {, final, double, result, =, exp, (, x, +, 1.494140625, ,, extra, ,, hiPrec, ), /, 4.455505956692756620, ;, if]
[==, 709, ), {, final, double, result, =, exp, (, x, +, 1.494140625, ,, extra, ,, hiPrec, ), /, 4.455505956692756620]
[), {, final, double, result, =, exp, (, x, +, 1.494140625, ,, extra, ,, hiPrec, ), /, 4.455505956692756620, ;, if]
[;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=]
[/, 4.455505956692756620, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 4.455505956692756620, ;, hiPrec, [, 1]
[,, extra, ,, hiPrec, ), /, 4.455505956692756620, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=]
[+, 1.494140625, ,, extra, ,, hiPrec, ), /, 4.455505956692756620, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0]
[,, extra, ,, hiPrec, ), /, 4.455505956692756620, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=]
[,, hiPrec, ), /, 4.455505956692756620, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 4.455505956692756620, ;]
[), /, 4.455505956692756620, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 4.455505956692756620, ;, hiPrec, []
[;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], /=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=]
[), {, hiPrec, [, 0, ], /=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;]
[!=, null, ), {, hiPrec, [, 0, ], /=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return]
[), {, hiPrec, [, 0, ], /=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;]
[/=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++, ;, intPartA, =]
[[, 0, ], /=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++]
[], /=, 4.455505956692756620, ;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++, ;, intPartA]
[;, hiPrec, [, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++, ;, intPartA, =, ExpIntTable, .]
[/=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal]
[[, 1, ], /=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, []
[], /=, 4.455505956692756620, ;, }, return, result, ;, }, intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -]
[;, }, return, result, ;, }, intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;]
[;, }, intVal, ++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =, ExpIntTable, .]
[;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -]
[++, ;, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX]
[=, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ]]
[;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal, =, -, intVal, ;, }, else, {]
[[, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal, =, -]
[., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal]
[], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal, =, -, intVal, ;, }, else]
[-, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal, =, -, intVal, ;]
[], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal, =, -, intVal, ;, }, else]
[=, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal, =, -, intVal, ;, }, else, {, intVal, =]
[;, intVal, =, -, intVal, ;, }, else, {, intVal, =, (, int, ), x, ;, if, (, intVal, >]
[[, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal, =, -, intVal, ;, }, else, {, intVal, =, (, int, ), x]
[., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ], ;, intVal, =, -, intVal, ;, }, else, {, intVal, =, (, int]
[], ;, intVal, =, -, intVal, ;, }, else, {, intVal, =, (, int, ), x, ;, if, (, intVal]
[-, intVal, ], ;, intVal, =, -, intVal, ;, }, else, {, intVal, =, (, int, ), x, ;, if]
[], ;, intVal, =, -, intVal, ;, }, else, {, intVal, =, (, int, ), x, ;, if, (, intVal]
[=, -, intVal, ;, }, else, {, intVal, =, (, int, ), x, ;, if, (, intVal, >, 709, )]
[;, }, else, {, intVal, =, (, int, ), x, ;, if, (, intVal, >, 709, ), {, if, (]
[;, }, else, {, intVal, =, (, int, ), x, ;, if, (, intVal, >, 709, ), {, if, (]
[=, (, int, ), x, ;, if, (, intVal, >, 709, ), {, if, (, hiPrec, !=, null, ), {]
[;, if, (, intVal, >, 709, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[;, if, (, intVal, >, 709, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, hiPrec, []
[>, 709, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, hiPrec, []
[), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return]
[!=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =, 0.0, ;]
[), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return]
[=, Double, ., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA]
[[, 0, ], =, Double, ., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY]
[], =, Double, ., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }]
[;, hiPrec, [, 1, ], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A]
[., POSITIVE_INFINITY, ;, hiPrec, [, 1, ], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable]
[=, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ]]
[[, 1, ], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX]
[], =, 0.0, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal]
[;, }, return, Double, ., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, intPartB]
[;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX]
[., POSITIVE_INFINITY, ;, }, intPartA, =, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B]
[=, ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ]]
[;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =, (, int, )]
[[, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int]
[., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }]
[], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =, (, int]
[+, intVal, ], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =]
[], ;, intPartB, =, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =, (, int]
[=, ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =, (, int, ), (, (]
[;, }, final, int, intFrac, =, (, int, ), (, (, x, -, intVal, ), *, 1024.0, ), ;, final]
[[, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =, (, int, ), (, (, x, -, intVal, )]
[., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ], ;, }, final, int, intFrac, =, (, int, ), (, (, x, -]
[], ;, }, final, int, intFrac, =, (, int, ), (, (, x, -, intVal, ), *, 1024.0, ), ;]
[+, intVal, ], ;, }, final, int, intFrac, =, (, int, ), (, (, x, -, intVal, ), *, 1024.0]
[], ;, }, final, int, intFrac, =, (, int, ), (, (, x, -, intVal, ), *, 1024.0, ), ;]
[;, final, double, fracPartA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, []
[;, final, double, fracPartA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, []
[), ;, final, double, fracPartA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B]
[*, 1024.0, ), ;, final, double, fracPartA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =, ExpFracTable]
[), *, 1024.0, ), ;, final, double, fracPartA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =]
[-, intVal, ), *, 1024.0, ), ;, final, double, fracPartA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double]
[), *, 1024.0, ), ;, final, double, fracPartA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =]
[), ;, final, double, fracPartA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B]
[;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, final, double, epsilon, =, x, -, (, intVal]
[[, intFrac, ], ;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, final, double, epsilon, =, x]
[., EXP_FRAC_TABLE_A, [, intFrac, ], ;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, final, double, epsilon]
[], ;, final, double, fracPartB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, final, double, epsilon, =, x, -, (]
[;, final, double, epsilon, =, x, -, (, intVal, +, intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;]
[[, intFrac, ], ;, final, double, epsilon, =, x, -, (, intVal, +, intFrac, /, 1024.0, ), ;, double, z]
[., EXP_FRAC_TABLE_B, [, intFrac, ], ;, final, double, epsilon, =, x, -, (, intVal, +, intFrac, /, 1024.0, ), ;]
[], ;, final, double, epsilon, =, x, -, (, intVal, +, intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507]
[;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon, +]
[-, (, intVal, +, intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +]
[;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon, +]
[), ;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon]
[+, intFrac, /, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z]
[), ;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon]
[/, 1024.0, ), ;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z]
[), ;, double, z, =, 0.04168701738764507, ;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon]
[;, z, =, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z]
[=, z, *, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon]
[;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z, =, z]
[+, 0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z]
[*, epsilon, +, 0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0]
[+, 0.1666666505023083, ;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z]
[;, z, =, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z, =, z]
[=, z, *, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z, =, z, *, epsilon]
[;, z, =, z, *, epsilon, +, 1.0, ;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA]
[+, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;]
[*, epsilon, +, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z, =, z, *, epsilon, +, -]
[+, 0.5000000000042687, ;, z, =, z, *, epsilon, +, 1.0, ;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;]
[;, z, =, z, *, epsilon, +, 1.0, ;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA]
[=, z, *, epsilon, +, 1.0, ;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA]
[;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =]
[+, 1.0, ;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double]
[*, epsilon, +, 1.0, ;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA]
[+, 1.0, ;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double]
[;, z, =, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =]
[=, z, *, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *]
[;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *, fracPartA, +, intPartB]
[+, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *]
[*, epsilon, +, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *, fracPartB, +]
[+, -, 3.940510424527919E-20, ;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *]
[;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *, fracPartA, +, intPartB]
[;, double, tempA, =, intPartA, *, fracPartA, ;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *, fracPartA, +, intPartB]
[;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *, fracPartA, +, intPartB, *, fracPartB, ;, final, double, tempC, =]
[*, fracPartA, ;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *, fracPartA, +, intPartB, *, fracPartB, ;, final, double]
[;, double, tempB, =, intPartA, *, fracPartB, +, intPartB, *, fracPartA, +, intPartB, *, fracPartB, ;, final, double, tempC, =]
[;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {]
[+, intPartB, *, fracPartB, ;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra]
[+, intPartB, *, fracPartA, +, intPartB, *, fracPartB, ;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result]
[*, fracPartB, +, intPartB, *, fracPartA, +, intPartB, *, fracPartB, ;, final, double, tempC, =, tempB, +, tempA, ;, final]
[+, intPartB, *, fracPartA, +, intPartB, *, fracPartB, ;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result]
[+, intPartB, *, fracPartB, ;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra]
[*, fracPartA, +, intPartB, *, fracPartB, ;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if]
[+, intPartB, *, fracPartB, ;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra]
[;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {]
[*, fracPartB, ;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0]
[;, final, double, tempC, =, tempB, +, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {]
[;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =, tempC, *, extra, *, z, +]
[+, tempA, ;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =, tempC, *, extra, *]
[;, final, double, result, ;, if, (, extra, !=, 0.0, ), {, result, =, tempC, *, extra, *, z, +]
[), {, result, =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, +]
[!=, 0.0, ), {, result, =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +]
[), {, result, =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, +]
[=, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }]
[;, }, else, {, result, =, tempC, *, z, +, tempB, +, tempA, ;, }, if, (, hiPrec, !=, null]
[+, tempA, ;, }, else, {, result, =, tempC, *, z, +, tempB, +, tempA, ;, }, if, (, hiPrec]
[+, tempB, +, tempA, ;, }, else, {, result, =, tempC, *, z, +, tempB, +, tempA, ;, }, if]
[+, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =, tempC, *, z, +, tempB, +]
[+, tempC, *, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =, tempC, *]
[*, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =]
[*, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }, else, {]
[*, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =]
[+, tempC, *, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =, tempC, *]
[+, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =, tempC, *, z, +, tempB, +]
[*, extra, +, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =, tempC, *, z, +]
[+, tempC, *, z, +, tempB, +, tempA, ;, }, else, {, result, =, tempC, *, z, +, tempB, +]
[+, tempB, +, tempA, ;, }, else, {, result, =, tempC, *, z, +, tempB, +, tempA, ;, }, if]
[*, z, +, tempB, +, tempA, ;, }, else, {, result, =, tempC, *, z, +, tempB, +, tempA, ;]
[+, tempB, +, tempA, ;, }, else, {, result, =, tempC, *, z, +, tempB, +, tempA, ;, }, if]
[+, tempA, ;, }, else, {, result, =, tempC, *, z, +, tempB, +, tempA, ;, }, if, (, hiPrec]
[;, }, else, {, result, =, tempC, *, z, +, tempB, +, tempA, ;, }, if, (, hiPrec, !=, null]
[=, tempC, *, z, +, tempB, +, tempA, ;, }, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0]
[;, }, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ]]
[+, tempA, ;, }, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, []
[+, tempB, +, tempA, ;, }, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;]
[*, z, +, tempB, +, tempA, ;, }, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =]
[+, tempB, +, tempA, ;, }, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;]
[+, tempA, ;, }, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, []
[;, }, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ]]
[), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =, tempC, *, extra, *, z, +]
[!=, null, ), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =, tempC, *, extra, *]
[), {, hiPrec, [, 0, ], =, tempA, ;, hiPrec, [, 1, ], =, tempC, *, extra, *, z, +]
[=, tempA, ;, hiPrec, [, 1, ], =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *]
[[, 0, ], =, tempA, ;, hiPrec, [, 1, ], =, tempC, *, extra, *, z, +, tempC, *, extra]
[], =, tempA, ;, hiPrec, [, 1, ], =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC]
[;, hiPrec, [, 1, ], =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +]
[=, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, ;, }, return, result]
[[, 1, ], =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, ;]
[], =, tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, ;, }, return]
[;, }, return, result, ;, }, public, static, double, expm1, (, double, x, ), {, return, expm1, (, x, ,]
[+, tempB, ;, }, return, result, ;, }, public, static, double, expm1, (, double, x, ), {, return, expm1, (]
[+, tempC, *, z, +, tempB, ;, }, return, result, ;, }, public, static, double, expm1, (, double, x, )]
[+, tempC, *, extra, +, tempC, *, z, +, tempB, ;, }, return, result, ;, }, public, static, double, expm1]
[*, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, ;, }, return, result, ;, }, public, static]
[*, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, ;, }, return, result, ;, }]
[*, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, ;, }, return, result, ;, }, public, static]
[+, tempC, *, extra, +, tempC, *, z, +, tempB, ;, }, return, result, ;, }, public, static, double, expm1]
[+, tempC, *, z, +, tempB, ;, }, return, result, ;, }, public, static, double, expm1, (, double, x, )]
[*, extra, +, tempC, *, z, +, tempB, ;, }, return, result, ;, }, public, static, double, expm1, (, double]
[+, tempC, *, z, +, tempB, ;, }, return, result, ;, }, public, static, double, expm1, (, double, x, )]
[+, tempB, ;, }, return, result, ;, }, public, static, double, expm1, (, double, x, ), {, return, expm1, (]
[*, z, +, tempB, ;, }, return, result, ;, }, public, static, double, expm1, (, double, x, ), {, return]
[+, tempB, ;, }, return, result, ;, }, public, static, double, expm1, (, double, x, ), {, return, expm1, (]
[;, }, return, result, ;, }, public, static, double, expm1, (, double, x, ), {, return, expm1, (, x, ,]
[;, }, public, static, double, expm1, (, double, x, ), {, return, expm1, (, x, ,, null, ), ;, }]
[;, }, private, static, double, expm1, (, double, x, ,, double, hiPrecOut, [, ], ), {, if, (, x, !=]
[,, null, ), ;, }, private, static, double, expm1, (, double, x, ,, double, hiPrecOut, [, ], ), {, if]
[), ;, }, private, static, double, expm1, (, double, x, ,, double, hiPrecOut, [, ], ), {, if, (, x]
[), {, return, x, ;, }, if, (, x, <=, -, 1.0, ||, x, >=, 1.0, ), {, double, hiPrec]
[||, x, ==, 0.0, ), {, return, x, ;, }, if, (, x, <=, -, 1.0, ||, x, >=, 1.0]
[!=, x, ||, x, ==, 0.0, ), {, return, x, ;, }, if, (, x, <=, -, 1.0, ||, x]
[||, x, ==, 0.0, ), {, return, x, ;, }, if, (, x, <=, -, 1.0, ||, x, >=, 1.0]
[), {, return, x, ;, }, if, (, x, <=, -, 1.0, ||, x, >=, 1.0, ), {, double, hiPrec]
[==, 0.0, ), {, return, x, ;, }, if, (, x, <=, -, 1.0, ||, x, >=, 1.0, ), {]
[), {, return, x, ;, }, if, (, x, <=, -, 1.0, ||, x, >=, 1.0, ), {, double, hiPrec]
[;, }, if, (, x, <=, -, 1.0, ||, x, >=, 1.0, ), {, double, hiPrec, [, ], =, new]
[), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec]
[||, x, >=, 1.0, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x]
[<=, -, 1.0, ||, x, >=, 1.0, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;]
[||, x, >=, 1.0, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x]
[||, x, >=, 1.0, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x]
[), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec]
[>=, 1.0, ), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0]
[), {, double, hiPrec, [, ], =, new, double, [, 2, ], ;, exp, (, x, ,, 0.0, ,, hiPrec]
[;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, if, (, x, >, 0.0, ), {, return, -, 1.0]
[], ;, exp, (, x, ,, 0.0, ,, hiPrec, ), ;, if, (, x, >, 0.0, ), {, return, -]
[;, if, (, x, >, 0.0, ), {, return, -, 1.0, +, hiPrec, [, 0, ], +, hiPrec, [, 1]
[,, 0.0, ,, hiPrec, ), ;, if, (, x, >, 0.0, ), {, return, -, 1.0, +, hiPrec, [, 0]
[,, hiPrec, ), ;, if, (, x, >, 0.0, ), {, return, -, 1.0, +, hiPrec, [, 0, ], +]
[), ;, if, (, x, >, 0.0, ), {, return, -, 1.0, +, hiPrec, [, 0, ], +, hiPrec, []
[), {, return, -, 1.0, +, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, }, else, {, final]
[>, 0.0, ), {, return, -, 1.0, +, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, }, else]
[), {, return, -, 1.0, +, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, }, else, {, final]
[;, }, else, {, final, double, ra, =, -, 1.0, +, hiPrec, [, 0, ], ;, double, rb, =, -]
[+, hiPrec, [, 1, ], ;, }, else, {, final, double, ra, =, -, 1.0, +, hiPrec, [, 0, ]]
[+, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, }, else, {, final, double, ra, =, -, 1.0]
[+, hiPrec, [, 0, ], +, hiPrec, [, 1, ], ;, }, else, {, final, double, ra, =, -, 1.0]
[+, hiPrec, [, 1, ], ;, }, else, {, final, double, ra, =, -, 1.0, +, hiPrec, [, 0, ]]
[[, 0, ], +, hiPrec, [, 1, ], ;, }, else, {, final, double, ra, =, -, 1.0, +, hiPrec]
[], +, hiPrec, [, 1, ], ;, }, else, {, final, double, ra, =, -, 1.0, +, hiPrec, [, 0]
[;, }, else, {, final, double, ra, =, -, 1.0, +, hiPrec, [, 0, ], ;, double, rb, =, -]
[[, 1, ], ;, }, else, {, final, double, ra, =, -, 1.0, +, hiPrec, [, 0, ], ;, double]
[], ;, }, else, {, final, double, ra, =, -, 1.0, +, hiPrec, [, 0, ], ;, double, rb, =]
[;, double, rb, =, -, (, ra, +, 1.0, -, hiPrec, [, 0, ], ), ;, rb, +=, hiPrec, []
[+, hiPrec, [, 0, ], ;, double, rb, =, -, (, ra, +, 1.0, -, hiPrec, [, 0, ], )]
[+, hiPrec, [, 0, ], ;, double, rb, =, -, (, ra, +, 1.0, -, hiPrec, [, 0, ], )]
[;, double, rb, =, -, (, ra, +, 1.0, -, hiPrec, [, 0, ], ), ;, rb, +=, hiPrec, []
[[, 0, ], ;, double, rb, =, -, (, ra, +, 1.0, -, hiPrec, [, 0, ], ), ;, rb]
[], ;, double, rb, =, -, (, ra, +, 1.0, -, hiPrec, [, 0, ], ), ;, rb, +=, hiPrec]
[;, rb, +=, hiPrec, [, 1, ], ;, return, ra, +, rb, ;, }, }, double, baseA, ;, double, baseB]
[;, rb, +=, hiPrec, [, 1, ], ;, return, ra, +, rb, ;, }, }, double, baseA, ;, double, baseB]
[), ;, rb, +=, hiPrec, [, 1, ], ;, return, ra, +, rb, ;, }, }, double, baseA, ;, double]
[-, hiPrec, [, 0, ], ), ;, rb, +=, hiPrec, [, 1, ], ;, return, ra, +, rb, ;, }]
[+, 1.0, -, hiPrec, [, 0, ], ), ;, rb, +=, hiPrec, [, 1, ], ;, return, ra, +, rb]
[-, hiPrec, [, 0, ], ), ;, rb, +=, hiPrec, [, 1, ], ;, return, ra, +, rb, ;, }]
[), ;, rb, +=, hiPrec, [, 1, ], ;, return, ra, +, rb, ;, }, }, double, baseA, ;, double]
[[, 0, ], ), ;, rb, +=, hiPrec, [, 1, ], ;, return, ra, +, rb, ;, }, }, double]
[], ), ;, rb, +=, hiPrec, [, 1, ], ;, return, ra, +, rb, ;, }, }, double, baseA, ;]
[+=, hiPrec, [, 1, ], ;, return, ra, +, rb, ;, }, }, double, baseA, ;, double, baseB, ;, double]
[;, return, ra, +, rb, ;, }, }, double, baseA, ;, double, baseB, ;, double, epsilon, ;, boolean, negative, =]
[[, 1, ], ;, return, ra, +, rb, ;, }, }, double, baseA, ;, double, baseB, ;, double, epsilon, ;]
[], ;, return, ra, +, rb, ;, }, }, double, baseA, ;, double, baseB, ;, double, epsilon, ;, boolean, negative]
[;, }, }, double, baseA, ;, double, baseB, ;, double, epsilon, ;, boolean, negative, =, false, ;, if, (, x]
[+, rb, ;, }, }, double, baseA, ;, double, baseB, ;, double, epsilon, ;, boolean, negative, =, false, ;, if]
[;, }, }, double, baseA, ;, double, baseB, ;, double, epsilon, ;, boolean, negative, =, false, ;, if, (, x]
[;, if, (, x, <, 0.0, ), {, x, =, -, x, ;, negative, =, true, ;, }, {, int]
[), {, x, =, -, x, ;, negative, =, true, ;, }, {, int, intFrac, =, (, int, ), (]
[<, 0.0, ), {, x, =, -, x, ;, negative, =, true, ;, }, {, int, intFrac, =, (, int]
[), {, x, =, -, x, ;, negative, =, true, ;, }, {, int, intFrac, =, (, int, ), (]
[=, -, x, ;, negative, =, true, ;, }, {, int, intFrac, =, (, int, ), (, x, *, 1024.0]
[;, negative, =, true, ;, }, {, int, intFrac, =, (, int, ), (, x, *, 1024.0, ), ;, double]
[;, negative, =, true, ;, }, {, int, intFrac, =, (, int, ), (, x, *, 1024.0, ), ;, double]
[=, true, ;, }, {, int, intFrac, =, (, int, ), (, x, *, 1024.0, ), ;, double, tempA, =]
[;, }, {, int, intFrac, =, (, int, ), (, x, *, 1024.0, ), ;, double, tempA, =, ExpFracTable, .]
[;, double, tempA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], -, 1.0, ;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, []
[;, double, tempA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], -, 1.0, ;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, []
[), ;, double, tempA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], -, 1.0, ;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B]
[*, 1024.0, ), ;, double, tempA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], -, 1.0, ;, double, tempB, =, ExpFracTable]
[), ;, double, tempA, =, ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], -, 1.0, ;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B]
[;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +, tempB, ;, tempB, =]
[-, 1.0, ;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +, tempB, ;]
[[, intFrac, ], -, 1.0, ;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA]
[., EXP_FRAC_TABLE_A, [, intFrac, ], -, 1.0, ;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp]
[], -, 1.0, ;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +, tempB]
[;, double, tempB, =, ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +, tempB, ;, tempB, =]
[;, double, temp, =, tempA, +, tempB, ;, tempB, =, -, (, temp, -, tempA, -, tempB, ), ;, tempA]
[[, intFrac, ], ;, double, temp, =, tempA, +, tempB, ;, tempB, =, -, (, temp, -, tempA, -, tempB]
[., EXP_FRAC_TABLE_B, [, intFrac, ], ;, double, temp, =, tempA, +, tempB, ;, tempB, =, -, (, temp, -, tempA]
[], ;, double, temp, =, tempA, +, tempB, ;, tempB, =, -, (, temp, -, tempA, -, tempB, ), ;]
[;, tempB, =, -, (, temp, -, tempA, -, tempB, ), ;, tempA, =, temp, ;, temp, =, tempA, *]
[+, tempB, ;, tempB, =, -, (, temp, -, tempA, -, tempB, ), ;, tempA, =, temp, ;, temp, =]
[;, tempB, =, -, (, temp, -, tempA, -, tempB, ), ;, tempA, =, temp, ;, temp, =, tempA, *]
[=, -, (, temp, -, tempA, -, tempB, ), ;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;]
[;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;, baseB]
[;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;, baseB]
[), ;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;]
[-, tempB, ), ;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -]
[-, tempA, -, tempB, ), ;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +]
[-, tempB, ), ;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -]
[), ;, tempA, =, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;]
[=, temp, ;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;, baseB, =, tempB]
[;, temp, =, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (]
[=, tempA, *, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (, tempA, -]
[;, baseA, =, tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;, epsilon]
[*, HEX_40000000, ;, baseA, =, tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (, tempA, -, baseA, )]
[;, baseA, =, tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;, epsilon]
[=, tempA, +, temp, -, temp, ;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;, epsilon, =, x]
[;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }]
[-, temp, ;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;, epsilon, =, x, -, intFrac, /, 1024.0]
[+, temp, -, temp, ;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;, epsilon, =, x, -, intFrac]
[-, temp, ;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;, epsilon, =, x, -, intFrac, /, 1024.0]
[;, baseB, =, tempB, +, (, tempA, -, baseA, ), ;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }]
[=, tempB, +, (, tempA, -, baseA, ), ;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb]
[;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon]
[+, (, tempA, -, baseA, ), ;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571]
[;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon]
[), ;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *]
[-, baseA, ), ;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =]
[), ;, epsilon, =, x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *]
[=, x, -, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654]
[;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon]
[-, intFrac, /, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb]
[;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon]
[/, 1024.0, ;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb]
[;, }, double, zb, =, 0.008336750013465571, ;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon]
[;, zb, =, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb]
[=, zb, *, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon]
[;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb]
[+, 0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb]
[*, epsilon, +, 0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994]
[+, 0.041666663879186654, ;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb]
[;, zb, =, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb]
[=, zb, *, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *, epsilon]
[;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;, zb, =, zb, *, epsilon]
[+, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;, zb, =, zb]
[*, epsilon, +, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;, zb]
[+, 0.16666666666745392, ;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;, zb, =, zb]
[;, zb, =, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;, zb, =, zb, *, epsilon]
[=, zb, *, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;, zb, =, zb, *, epsilon, ;, double]
[;, zb, =, zb, *, epsilon, ;, zb, =, zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp]
[+, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;, zb, =, zb, *, epsilon, ;, double, za, =, epsilon, ;]
[*, epsilon, +, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;, zb, =, zb, *, epsilon, ;, double, za, =]
[+, 0.49999999999999994, ;, zb, =, zb, *, epsilon, ;, zb, =, zb, *, epsilon, ;, double, za, =, epsilon, ;]
[;, zb, =, zb, *, epsilon, ;, zb, =, zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp]
[=, zb, *, epsilon, ;, zb, =, zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za]
[;, zb, =, zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;, zb]
[*, epsilon, ;, zb, =, zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za, +, zb]
[;, zb, =, zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;, zb]
[=, zb, *, epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;, zb, =, -]
[;, double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;, zb, =, -, (, temp, -, za]
[*, epsilon, ;, double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;, zb, =, -, (, temp]
[;, double, za, =, epsilon, ;, double, temp, =, za, +, zb, ;, zb, =, -, (, temp, -, za]
[;, double, temp, =, za, +, zb, ;, zb, =, -, (, temp, -, za, -, zb, ), ;, za]
[;, zb, =, -, (, temp, -, za, -, zb, ), ;, za, =, temp, ;, temp, =, za, *]
[+, zb, ;, zb, =, -, (, temp, -, za, -, zb, ), ;, za, =, temp, ;, temp, =]
[;, zb, =, -, (, temp, -, za, -, zb, ), ;, za, =, temp, ;, temp, =, za, *]
[=, -, (, temp, -, za, -, zb, ), ;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;]
[;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;, zb]
[;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;, zb]
[), ;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;]
[-, zb, ), ;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -]
[-, za, -, zb, ), ;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +]
[-, zb, ), ;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -]
[), ;, za, =, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;]
[=, temp, ;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;, zb, +=, za]
[;, temp, =, za, *, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp]
[=, za, *, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp, ;, za]
[;, temp, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp, ;, za, =, temp, ;, double]
[*, HEX_40000000, ;, temp, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp, ;, za, =, temp]
[;, temp, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp, ;, za, =, temp, ;, double]
[=, za, +, temp, -, temp, ;, zb, +=, za, -, temp, ;, za, =, temp, ;, double, ya, =]
[;, zb, +=, za, -, temp, ;, za, =, temp, ;, double, ya, =, za, *, baseA, ;, temp, =]
[-, temp, ;, zb, +=, za, -, temp, ;, za, =, temp, ;, double, ya, =, za, *, baseA, ;]
[+, temp, -, temp, ;, zb, +=, za, -, temp, ;, za, =, temp, ;, double, ya, =, za, *]
[-, temp, ;, zb, +=, za, -, temp, ;, za, =, temp, ;, double, ya, =, za, *, baseA, ;]
[;, zb, +=, za, -, temp, ;, za, =, temp, ;, double, ya, =, za, *, baseA, ;, temp, =]
[+=, za, -, temp, ;, za, =, temp, ;, double, ya, =, za, *, baseA, ;, temp, =, ya, +]
[;, za, =, temp, ;, double, ya, =, za, *, baseA, ;, temp, =, ya, +, za, *, baseB, ;]
[-, temp, ;, za, =, temp, ;, double, ya, =, za, *, baseA, ;, temp, =, ya, +, za, *]
[;, za, =, temp, ;, double, ya, =, za, *, baseA, ;, temp, =, ya, +, za, *, baseB, ;]
[=, temp, ;, double, ya, =, za, *, baseA, ;, temp, =, ya, +, za, *, baseB, ;, double, yb]
[;, double, ya, =, za, *, baseA, ;, temp, =, ya, +, za, *, baseB, ;, double, yb, =, -]
[;, temp, =, ya, +, za, *, baseB, ;, double, yb, =, -, (, temp, -, ya, -, za, *]
[*, baseA, ;, temp, =, ya, +, za, *, baseB, ;, double, yb, =, -, (, temp, -, ya, -]
[;, temp, =, ya, +, za, *, baseB, ;, double, yb, =, -, (, temp, -, ya, -, za, *]
[=, ya, +, za, *, baseB, ;, double, yb, =, -, (, temp, -, ya, -, za, *, baseB, )]
[;, double, yb, =, -, (, temp, -, ya, -, za, *, baseB, ), ;, ya, =, temp, ;, temp]
[+, za, *, baseB, ;, double, yb, =, -, (, temp, -, ya, -, za, *, baseB, ), ;, ya]
[;, double, yb, =, -, (, temp, -, ya, -, za, *, baseB, ), ;, ya, =, temp, ;, temp]
[*, baseB, ;, double, yb, =, -, (, temp, -, ya, -, za, *, baseB, ), ;, ya, =, temp]
[;, double, yb, =, -, (, temp, -, ya, -, za, *, baseB, ), ;, ya, =, temp, ;, temp]
[;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (, temp, -, ya]
[;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (, temp, -, ya]
[), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (, temp, -]
[-, za, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=]
[-, ya, -, za, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;]
[-, za, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=]
[), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (, temp, -]
[*, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (]
[), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (, temp, -]
[=, temp, ;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (, temp, -, ya, -, zb]
[;, temp, =, ya, +, zb, *, baseA, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseA]
[=, ya, +, zb, *, baseA, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseA, ), ;]
[;, yb, +=, -, (, temp, -, ya, -, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =]
[+, zb, *, baseA, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseA, ), ;, ya, =]
[;, yb, +=, -, (, temp, -, ya, -, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =]
[*, baseA, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseA, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, ya, -, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =]
[+=, -, (, temp, -, ya, -, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +]
[;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (, temp, -, ya]
[;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (, temp, -, ya]
[), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (, temp, -]
[-, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=]
[-, ya, -, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;]
[-, zb, *, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=]
[), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (, temp, -]
[*, baseA, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (]
[), ;, ya, =, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (, temp, -]
[=, temp, ;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (, temp, -, ya, -, zb]
[;, temp, =, ya, +, zb, *, baseB, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseB]
[=, ya, +, zb, *, baseB, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseB, ), ;]
[;, yb, +=, -, (, temp, -, ya, -, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =]
[+, zb, *, baseB, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseB, ), ;, ya, =]
[;, yb, +=, -, (, temp, -, ya, -, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =]
[*, baseB, ;, yb, +=, -, (, temp, -, ya, -, zb, *, baseB, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, ya, -, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =]
[+=, -, (, temp, -, ya, -, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +]
[;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (, temp, -, baseA, -, ya]
[;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (, temp, -, baseA, -, ya]
[), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (, temp, -, baseA, -]
[-, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (]
[-, ya, -, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=]
[-, zb, *, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (]
[), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (, temp, -, baseA, -]
[*, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (, temp, -, baseA, -]
[=, temp, ;, temp, =, ya, +, baseA, ;, yb, +=, -, (, temp, -, baseA, -, ya, ), ;]
[;, temp, =, ya, +, baseA, ;, yb, +=, -, (, temp, -, baseA, -, ya, ), ;, ya, =]
[=, ya, +, baseA, ;, yb, +=, -, (, temp, -, baseA, -, ya, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+, baseA, ;, yb, +=, -, (, temp, -, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+=, -, (, temp, -, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =, ya, +, za, ;]
[;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (, temp, -, ya, -, za]
[;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (, temp, -, ya, -, za]
[), ;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (, temp, -, ya, -]
[-, ya, ), ;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (, temp, -]
[-, baseA, -, ya, ), ;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (]
[-, ya, ), ;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (, temp, -, ya, -]
[=, temp, ;, temp, =, ya, +, za, ;, yb, +=, -, (, temp, -, ya, -, za, ), ;]
[;, temp, =, ya, +, za, ;, yb, +=, -, (, temp, -, ya, -, za, ), ;, ya, =]
[=, ya, +, za, ;, yb, +=, -, (, temp, -, ya, -, za, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, ya, -, za, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+, za, ;, yb, +=, -, (, temp, -, ya, -, za, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, ya, -, za, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+=, -, (, temp, -, ya, -, za, ), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;]
[;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (, temp, -, ya, -, baseB]
[;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (, temp, -, ya, -, baseB]
[), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (, temp, -, ya, -]
[-, za, ), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (, temp, -]
[-, ya, -, za, ), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (]
[-, za, ), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (, temp, -, ya, -]
[=, temp, ;, temp, =, ya, +, baseB, ;, yb, +=, -, (, temp, -, ya, -, baseB, ), ;]
[;, temp, =, ya, +, baseB, ;, yb, +=, -, (, temp, -, ya, -, baseB, ), ;, ya, =]
[=, ya, +, baseB, ;, yb, +=, -, (, temp, -, ya, -, baseB, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+, baseB, ;, yb, +=, -, (, temp, -, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =]
[;, yb, +=, -, (, temp, -, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +]
[+=, -, (, temp, -, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;]
[;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (, temp, -, ya, -, zb]
[;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (, temp, -, ya, -, zb]
[), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (, temp, -, ya, -]
[-, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (, temp, -]
[-, ya, -, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (]
[-, baseB, ), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (, temp, -]
[), ;, ya, =, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (, temp, -, ya, -]
[=, temp, ;, temp, =, ya, +, zb, ;, yb, +=, -, (, temp, -, ya, -, zb, ), ;]
[;, temp, =, ya, +, zb, ;, yb, +=, -, (, temp, -, ya, -, zb, ), ;, ya, =]
[=, ya, +, zb, ;, yb, +=, -, (, temp, -, ya, -, zb, ), ;, ya, =, temp, ;]
[;, yb, +=, -, (, temp, -, ya, -, zb, ), ;, ya, =, temp, ;, if, (, negative, )]
[+, zb, ;, yb, +=, -, (, temp, -, ya, -, zb, ), ;, ya, =, temp, ;, if, (]
[;, yb, +=, -, (, temp, -, ya, -, zb, ), ;, ya, =, temp, ;, if, (, negative, )]
[+=, -, (, temp, -, ya, -, zb, ), ;, ya, =, temp, ;, if, (, negative, ), {, double]
[;, ya, =, temp, ;, if, (, negative, ), {, double, denom, =, 1.0, +, ya, ;, double, denomr, =]
[;, ya, =, temp, ;, if, (, negative, ), {, double, denom, =, 1.0, +, ya, ;, double, denomr, =]
[), ;, ya, =, temp, ;, if, (, negative, ), {, double, denom, =, 1.0, +, ya, ;, double, denomr]
[-, zb, ), ;, ya, =, temp, ;, if, (, negative, ), {, double, denom, =, 1.0, +, ya, ;]
[-, ya, -, zb, ), ;, ya, =, temp, ;, if, (, negative, ), {, double, denom, =, 1.0, +]
[-, zb, ), ;, ya, =, temp, ;, if, (, negative, ), {, double, denom, =, 1.0, +, ya, ;]
[), ;, ya, =, temp, ;, if, (, negative, ), {, double, denom, =, 1.0, +, ya, ;, double, denomr]
[=, temp, ;, if, (, negative, ), {, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /]
[;, if, (, negative, ), {, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;]
[), {, double, denom, =, 1.0, +, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -]
[;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +]
[+, ya, ;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya]
[;, double, denomr, =, 1.0, /, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +]
[;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *]
[/, denom, ;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =]
[;, double, denomb, =, -, (, denom, -, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *]
[;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =, ratio, +]
[+, yb, ;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =]
[+, yb, ;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =]
[), +, yb, ;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra]
[-, ya, ), +, yb, ;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final]
[-, 1.0, -, ya, ), +, yb, ;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000]
[-, ya, ), +, yb, ;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final]
[), +, yb, ;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra]
[;, double, ratio, =, ya, *, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =, ratio, +]
[;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =]
[*, denomr, ;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =, ratio, +, temp, -, temp, ;, double]
[;, temp, =, ratio, *, HEX_40000000, ;, final, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =]
[=, ratio, *, HEX_40000000, ;, final, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -]
[;, final, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =]
[*, HEX_40000000, ;, final, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;]
[;, final, double, ra, =, ratio, +, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =]
[;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =, denom, +, temp, -]
[-, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =, denom, +]
[+, temp, -, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =]
[-, temp, ;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =, denom, +]
[;, double, rb, =, ratio, -, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =, denom, +, temp, -]
[;, temp, =, denom, *, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za]
[-, ra, ;, temp, =, denom, *, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom]
[;, temp, =, denom, *, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za]
[=, denom, *, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb]
[;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (, ya, -]
[*, HEX_40000000, ;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (]
[;, za, =, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (, ya, -]
[=, denom, +, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *]
[;, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -]
[-, temp, ;, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *]
[+, temp, -, temp, ;, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -]
[-, temp, ;, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *]
[;, zb, =, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -]
[=, denom, -, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *]
[;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *]
[-, za, ;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -]
[;, rb, +=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *]
[+=, (, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, )]
[;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, ya, =]
[*, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;]
[), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr]
[-, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[-, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *]
[-, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;]
[-, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *]
[*, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=]
[-, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[*, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;]
[-, zb, *, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=]
[-, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb]
[*, ra, -, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya]
[-, zb, *, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb]
[), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr]
[*, rb, ), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr]
[), *, denomr, ;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr]
[;, rb, +=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, ya, =]
[+=, yb, *, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, ya, =, -, ra]
[;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, ya, =, -, ra, ;, yb, =, -]
[*, denomr, ;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, ya, =, -, ra, ;, yb]
[;, rb, +=, -, ya, *, denomb, *, denomr, *, denomr, ;, ya, =, -, ra, ;, yb, =, -]
[+=, -, ya, *, denomb, *, denomr, *, denomr, ;, ya, =, -, ra, ;, yb, =, -, rb, ;]
[;, ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=, null, ), {, hiPrecOut]
[*, denomr, ;, ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=, null, )]
[*, denomr, *, denomr, ;, ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=]
[*, denomb, *, denomr, *, denomr, ;, ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (]
[*, denomb, *, denomr, *, denomr, ;, ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (]
[*, denomr, *, denomr, ;, ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=]
[*, denomr, ;, ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=, null, )]
[;, ya, =, -, ra, ;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=, null, ), {, hiPrecOut]
[=, -, ra, ;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=, null, ), {, hiPrecOut, [, 0]
[;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=, null, ), {, hiPrecOut, [, 0, ], =, ya]
[;, yb, =, -, rb, ;, }, if, (, hiPrecOut, !=, null, ), {, hiPrecOut, [, 0, ], =, ya]
[=, -, rb, ;, }, if, (, hiPrecOut, !=, null, ), {, hiPrecOut, [, 0, ], =, ya, ;, hiPrecOut]
[;, }, if, (, hiPrecOut, !=, null, ), {, hiPrecOut, [, 0, ], =, ya, ;, hiPrecOut, [, 1, ]]
[;, }, if, (, hiPrecOut, !=, null, ), {, hiPrecOut, [, 0, ], =, ya, ;, hiPrecOut, [, 1, ]]
[), {, hiPrecOut, [, 0, ], =, ya, ;, hiPrecOut, [, 1, ], =, yb, ;, }, return, ya, +]
[!=, null, ), {, hiPrecOut, [, 0, ], =, ya, ;, hiPrecOut, [, 1, ], =, yb, ;, }, return]
[), {, hiPrecOut, [, 0, ], =, ya, ;, hiPrecOut, [, 1, ], =, yb, ;, }, return, ya, +]
[=, ya, ;, hiPrecOut, [, 1, ], =, yb, ;, }, return, ya, +, yb, ;, }, public, static, double]
[[, 0, ], =, ya, ;, hiPrecOut, [, 1, ], =, yb, ;, }, return, ya, +, yb, ;, }]
[], =, ya, ;, hiPrecOut, [, 1, ], =, yb, ;, }, return, ya, +, yb, ;, }, public, static]
[;, hiPrecOut, [, 1, ], =, yb, ;, }, return, ya, +, yb, ;, }, public, static, double, log, (]
[=, yb, ;, }, return, ya, +, yb, ;, }, public, static, double, log, (, final, double, x, ), {]
[[, 1, ], =, yb, ;, }, return, ya, +, yb, ;, }, public, static, double, log, (, final, double]
[], =, yb, ;, }, return, ya, +, yb, ;, }, public, static, double, log, (, final, double, x, )]
[;, }, return, ya, +, yb, ;, }, public, static, double, log, (, final, double, x, ), {, return, log]
[;, }, public, static, double, log, (, final, double, x, ), {, return, log, (, x, ,, null, ), ;]
[+, yb, ;, }, public, static, double, log, (, final, double, x, ), {, return, log, (, x, ,, null]
[;, }, public, static, double, log, (, final, double, x, ), {, return, log, (, x, ,, null, ), ;]
[;, }, private, static, double, log, (, final, double, x, ,, final, double, [, ], hiPrec, ), {, if, (]
[,, null, ), ;, }, private, static, double, log, (, final, double, x, ,, final, double, [, ], hiPrec, )]
[), ;, }, private, static, double, log, (, final, double, x, ,, final, double, [, ], hiPrec, ), {, if]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (]
[==, 0, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (]
[;, }, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, (, bits, &, 0x8000000000000000L, )]
[., NEGATIVE_INFINITY, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, (, bits, &]
[;, if, (, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ||, x, !=, x, ), &&, x, !=, 0.0]
[., doubleToRawLongBits, (, x, ), ;, if, (, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ||, x, !=, x]
[), ;, if, (, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ||, x, !=, x, ), &&, x, !=]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., NaN, ;, }, return]
[&&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, .]
[), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double]
[||, x, !=, x, ), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, []
[!=, 0, ||, x, !=, x, ), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, ), {]
[), !=, 0, ||, x, !=, x, ), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, )]
[&, 0x8000000000000000L, ), !=, 0, ||, x, !=, x, ), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=]
[), !=, 0, ||, x, !=, x, ), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, )]
[||, x, !=, x, ), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, []
[), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double]
[!=, x, ), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ]]
[), &&, x, !=, 0.0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., NaN, ;, }, return]
[!=, 0.0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., NaN, ;]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., NaN, ;, }, return]
[), {, hiPrec, [, 0, ], =, Double, ., NaN, ;, }, return, Double, ., NaN, ;, }, if, (]
[!=, null, ), {, hiPrec, [, 0, ], =, Double, ., NaN, ;, }, return, Double, ., NaN, ;, }]
[), {, hiPrec, [, 0, ], =, Double, ., NaN, ;, }, return, Double, ., NaN, ;, }, if, (]
[=, Double, ., NaN, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, )]
[[, 0, ], =, Double, ., NaN, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==, Double]
[], =, Double, ., NaN, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY]
[;, }, return, Double, ., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, hiPrec]
[., NaN, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if]
[;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, []
[., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, hiPrec, !=, null, ), {]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, }, return]
[==, Double, ., POSITIVE_INFINITY, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, .]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, }, return]
[., POSITIVE_INFINITY, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;]
[), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp]
[!=, null, ), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }]
[), {, hiPrec, [, 0, ], =, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp]
[=, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp, =, (, int, ), (, bits]
[[, 0, ], =, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp, =, (, int]
[], =, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp, =, (, int, ), (]
[;, }, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp, =, (, int, ), (, bits, >, >, 52, )]
[., POSITIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, int, exp, =, (, int, ), (, bits, >, >]
[;, }, int, exp, =, (, int, ), (, bits, >, >, 52, ), -, 1023, ;, if, (, (]
[., POSITIVE_INFINITY, ;, }, int, exp, =, (, int, ), (, bits, >, >, 52, ), -, 1023, ;, if]
[;, if, (, (, bits, &, 0x7ff0000000000000L, ), ==, 0, ), {, if, (, x, ==, 0, ), {, if]
[-, 1023, ;, if, (, (, bits, &, 0x7ff0000000000000L, ), ==, 0, ), {, if, (, x, ==, 0, )]
[-, 1023, ;, if, (, (, bits, &, 0x7ff0000000000000L, ), ==, 0, ), {, if, (, x, ==, 0, )]
[), -, 1023, ;, if, (, (, bits, &, 0x7ff0000000000000L, ), ==, 0, ), {, if, (, x, ==, 0]
[>, >, 52, ), -, 1023, ;, if, (, (, bits, &, 0x7ff0000000000000L, ), ==, 0, ), {, if, (]
[), -, 1023, ;, if, (, (, bits, &, 0x7ff0000000000000L, ), ==, 0, ), {, if, (, x, ==, 0]
[;, if, (, (, bits, &, 0x7ff0000000000000L, ), ==, 0, ), {, if, (, x, ==, 0, ), {, if]
[), {, if, (, x, ==, 0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ]]
[==, 0, ), {, if, (, x, ==, 0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, []
[), ==, 0, ), {, if, (, x, ==, 0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec]
[&, 0x7ff0000000000000L, ), ==, 0, ), {, if, (, x, ==, 0, ), {, if, (, hiPrec, !=, null, )]
[), ==, 0, ), {, if, (, x, ==, 0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec]
[), {, if, (, x, ==, 0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ]]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., NEGATIVE_INFINITY, ;, }, return]
[==, 0, ), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., NEGATIVE_INFINITY, ;]
[), {, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, Double, ., NEGATIVE_INFINITY, ;, }, return]
[), {, hiPrec, [, 0, ], =, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=]
[!=, null, ), {, hiPrec, [, 0, ], =, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }]
[), {, hiPrec, [, 0, ], =, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=]
[=, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while, (, (, bits]
[[, 0, ], =, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while]
[], =, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while, (, (]
[;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while, (, (, bits, &, 0x0010000000000000L, ), ==]
[., NEGATIVE_INFINITY, ;, }, return, Double, ., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while, (, (, bits, &, 0x0010000000000000L]
[;, }, bits, <<=, 1, ;, while, (, (, bits, &, 0x0010000000000000L, ), ==, 0, ), {, --, exp, ;]
[., NEGATIVE_INFINITY, ;, }, bits, <<=, 1, ;, while, (, (, bits, &, 0x0010000000000000L, ), ==, 0, ), {, --]
[<<=, 1, ;, while, (, (, bits, &, 0x0010000000000000L, ), ==, 0, ), {, --, exp, ;, bits, <<=, 1]
[;, while, (, (, bits, &, 0x0010000000000000L, ), ==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }]
[), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==, -, 1, ||, exp]
[==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==, -, 1]
[), ==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==, -]
[&, 0x0010000000000000L, ), ==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (, exp]
[), ==, 0, ), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==, -]
[), {, --, exp, ;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==, -, 1, ||, exp]
[;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==, -, 1, ||, exp, ==, 0, ), &&]
[;, bits, <<=, 1, ;, }, }, if, (, (, exp, ==, -, 1, ||, exp, ==, 0, ), &&]
[<<=, 1, ;, }, }, if, (, (, exp, ==, -, 1, ||, exp, ==, 0, ), &&, x, <]
[;, }, }, if, (, (, exp, ==, -, 1, ||, exp, ==, 0, ), &&, x, <, 1.01, &&]
[), {, double, xa, =, x, -, 1.0, ;, double, xb, =, xa, -, x, +, 1.0, ;, double, tmp]
[&&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0, ;, double, xb, =, xa, -, x, +]
[&&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0, ;, double, xb, =]
[&&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0]
[), &&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -]
[||, exp, ==, 0, ), &&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double]
[==, -, 1, ||, exp, ==, 0, ), &&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null]
[||, exp, ==, 0, ), &&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double]
[||, exp, ==, 0, ), &&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double]
[), &&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -]
[==, 0, ), &&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =]
[), &&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -]
[&&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0, ;, double, xb, =]
[<, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0, ;, double]
[&&, x, >, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0, ;, double, xb, =]
[&&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0, ;, double, xb, =, xa, -, x, +]
[>, 0.99, &&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0, ;, double, xb, =, xa, -]
[&&, hiPrec, ==, null, ), {, double, xa, =, x, -, 1.0, ;, double, xb, =, xa, -, x, +]
[), {, double, xa, =, x, -, 1.0, ;, double, xb, =, xa, -, x, +, 1.0, ;, double, tmp]
[==, null, ), {, double, xa, =, x, -, 1.0, ;, double, xb, =, xa, -, x, +, 1.0, ;]
[), {, double, xa, =, x, -, 1.0, ;, double, xb, =, xa, -, x, +, 1.0, ;, double, tmp]
[;, double, xb, =, xa, -, x, +, 1.0, ;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =]
[-, 1.0, ;, double, xb, =, xa, -, x, +, 1.0, ;, double, tmp, =, xa, *, HEX_40000000, ;, double]
[;, double, xb, =, xa, -, x, +, 1.0, ;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =]
[;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =, xa, +, tmp, -, tmp, ;, double, ab, =]
[+, 1.0, ;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =, xa, +, tmp, -, tmp, ;, double]
[-, x, +, 1.0, ;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =, xa, +, tmp, -, tmp]
[+, 1.0, ;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =, xa, +, tmp, -, tmp, ;, double]
[;, double, tmp, =, xa, *, HEX_40000000, ;, double, aa, =, xa, +, tmp, -, tmp, ;, double, ab, =]
[;, double, aa, =, xa, +, tmp, -, tmp, ;, double, ab, =, xa, -, aa, ;, xa, =, aa]
[*, HEX_40000000, ;, double, aa, =, xa, +, tmp, -, tmp, ;, double, ab, =, xa, -, aa, ;, xa]
[;, double, aa, =, xa, +, tmp, -, tmp, ;, double, ab, =, xa, -, aa, ;, xa, =, aa]
[;, double, ab, =, xa, -, aa, ;, xa, =, aa, ;, xb, =, ab, ;, final, double, [, ]]
[-, tmp, ;, double, ab, =, xa, -, aa, ;, xa, =, aa, ;, xb, =, ab, ;, final, double]
[+, tmp, -, tmp, ;, double, ab, =, xa, -, aa, ;, xa, =, aa, ;, xb, =, ab, ;]
[-, tmp, ;, double, ab, =, xa, -, aa, ;, xa, =, aa, ;, xb, =, ab, ;, final, double]
[;, double, ab, =, xa, -, aa, ;, xa, =, aa, ;, xb, =, ab, ;, final, double, [, ]]
[;, xa, =, aa, ;, xb, =, ab, ;, final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, [, LN_QUICK_COEF, ., length]
[-, aa, ;, xa, =, aa, ;, xb, =, ab, ;, final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, [, LN_QUICK_COEF]
[;, xa, =, aa, ;, xb, =, ab, ;, final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, [, LN_QUICK_COEF, ., length]
[=, aa, ;, xb, =, ab, ;, final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, [, LN_QUICK_COEF, ., length, -, 1]
[;, xb, =, ab, ;, final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, [, LN_QUICK_COEF, ., length, -, 1, ], ;]
[=, ab, ;, final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, [, LN_QUICK_COEF, ., length, -, 1, ], ;, double, ya]
[;, final, double, [, ], lnCoef_last, =, LN_QUICK_COEF, [, LN_QUICK_COEF, ., length, -, 1, ], ;, double, ya, =, lnCoef_last]
[;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int]
[[, LN_QUICK_COEF, ., length, -, 1, ], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last]
[], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (]
[-, 1, ], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;]
[., length, -, 1, ], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1]
[], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (]
[;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_QUICK_COEF, ., length, -, 2, ;]
[[, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_QUICK_COEF, ., length]
[], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_QUICK_COEF, ., length, -, 2]
[;, for, (, int, i, =, LN_QUICK_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {]
[[, 1, ], ;, for, (, int, i, =, LN_QUICK_COEF, ., length, -, 2, ;, i, >=, 0, ;, i]
[], ;, for, (, int, i, =, LN_QUICK_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, )]
[;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb]
[-, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya]
[., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab]
[;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb]
[;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa]
[>=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb]
[;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa]
[), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *]
[--, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb]
[=, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp]
[;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000]
[*, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa]
[;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000]
[=, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya]
[;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya]
[+, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb]
[+, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp]
[*, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa]
[+, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp]
[+, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb]
[*, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp]
[+, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb]
[;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya]
[*, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa]
[;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya]
[=, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, []
[*, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, []
[=, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i]
[;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i]
[+, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i]
[;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;]
[=, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =]
[;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ]]
[+, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, []
[-, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +]
[+, ab, ;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, []
[;, final, double, [, ], lnCoef_i, =, LN_QUICK_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ]]
[;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp]
[[, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1]
[], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;]
[=, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa]
[;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +]
[+, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000]
[;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +]
[[, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya]
[], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa]
[=, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -]
[;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya]
[+, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;]
[;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya]
[[, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -]
[=, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =]
[*, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =]
[=, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *]
[;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =]
[+, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =]
[;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *]
[=, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +]
[;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *]
[+, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +]
[-, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *]
[+, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +]
[;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *]
[=, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp]
[;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000]
[*, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa]
[;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000]
[=, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya]
[;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya]
[+, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb]
[+, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp]
[*, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa]
[+, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp]
[+, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb]
[*, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp]
[+, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb]
[;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya]
[*, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa]
[;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya]
[=, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, return, ya, +]
[*, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, return]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, return, ya, +]
[=, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, return, ya, +, yb, ;]
[;, yb, =, aa, -, ya, +, ab, ;, return, ya, +, yb, ;, }, final, double, [, ], lnm]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, return, ya, +, yb, ;, }, final, double, []
[+, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, return, ya, +, yb, ;, }, final]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, return, ya, +, yb, ;, }, final, double, []
[;, yb, =, aa, -, ya, +, ab, ;, return, ya, +, yb, ;, }, final, double, [, ], lnm]
[=, aa, -, ya, +, ab, ;, return, ya, +, yb, ;, }, final, double, [, ], lnm, =, lnMant]
[;, return, ya, +, yb, ;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, [, (, int, )]
[+, ab, ;, return, ya, +, yb, ;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, [, (]
[-, ya, +, ab, ;, return, ya, +, yb, ;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT]
[+, ab, ;, return, ya, +, yb, ;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, [, (]
[;, return, ya, +, yb, ;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, [, (, int, )]
[;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, [, (, int, ), (, (, bits, &, 0x000ffc0000000000L]
[+, yb, ;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, [, (, int, ), (, (, bits]
[;, }, final, double, [, ], lnm, =, lnMant, ., LN_MANT, [, (, int, ), (, (, bits, &, 0x000ffc0000000000L]
[;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), )]
[[, (, int, ), (, (, bits, &, 0x000ffc0000000000L, ), >, >, 42, ), ], ;, final, double, epsilon, =]
[., LN_MANT, [, (, int, ), (, (, bits, &, 0x000ffc0000000000L, ), >, >, 42, ), ], ;, final, double]
[], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, )]
[], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, )]
[), ], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L]
[>, >, 42, ), ], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +, (]
[), >, >, 42, ), ], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +]
[&, 0x000ffc0000000000L, ), >, >, 42, ), ], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (]
[), >, >, 42, ), ], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +]
[), ], ;, final, double, epsilon, =, (, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L]
[;, double, lnza, =, 0.0, ;, double, lnzb, =, 0.0, ;, if, (, hiPrec, !=, null, ), {, double, tmp]
[/, (, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ), ;, double, lnza, =, 0.0, ;, double, lnzb, =, 0.0]
[), /, (, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ), ;, double, lnza, =, 0.0, ;, double, lnzb, =]
[&, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ), ;, double, lnza, =, 0.0, ;, double]
[), /, (, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ), ;, double, lnza, =, 0.0, ;, double, lnzb, =]
[;, double, lnza, =, 0.0, ;, double, lnzb, =, 0.0, ;, if, (, hiPrec, !=, null, ), {, double, tmp]
[), ;, double, lnza, =, 0.0, ;, double, lnzb, =, 0.0, ;, if, (, hiPrec, !=, null, ), {, double]
[+, (, bits, &, 0x000ffc0000000000L, ), ), ;, double, lnza, =, 0.0, ;, double, lnzb, =, 0.0, ;, if, (]
[), ;, double, lnza, =, 0.0, ;, double, lnzb, =, 0.0, ;, if, (, hiPrec, !=, null, ), {, double]
[), ), ;, double, lnza, =, 0.0, ;, double, lnzb, =, 0.0, ;, if, (, hiPrec, !=, null, ), {]
[&, 0x000ffc0000000000L, ), ), ;, double, lnza, =, 0.0, ;, double, lnzb, =, 0.0, ;, if, (, hiPrec, !=, null]
[), ), ;, double, lnza, =, 0.0, ;, double, lnzb, =, 0.0, ;, if, (, hiPrec, !=, null, ), {]
[;, double, lnzb, =, 0.0, ;, if, (, hiPrec, !=, null, ), {, double, tmp, =, epsilon, *, HEX_40000000, ;]
[;, if, (, hiPrec, !=, null, ), {, double, tmp, =, epsilon, *, HEX_40000000, ;, double, aa, =, epsilon, +]
[), {, double, tmp, =, epsilon, *, HEX_40000000, ;, double, aa, =, epsilon, +, tmp, -, tmp, ;, double, ab]
[!=, null, ), {, double, tmp, =, epsilon, *, HEX_40000000, ;, double, aa, =, epsilon, +, tmp, -, tmp, ;]
[), {, double, tmp, =, epsilon, *, HEX_40000000, ;, double, aa, =, epsilon, +, tmp, -, tmp, ;, double, ab]
[;, double, aa, =, epsilon, +, tmp, -, tmp, ;, double, ab, =, epsilon, -, aa, ;, double, xa, =]
[*, HEX_40000000, ;, double, aa, =, epsilon, +, tmp, -, tmp, ;, double, ab, =, epsilon, -, aa, ;, double]
[;, double, aa, =, epsilon, +, tmp, -, tmp, ;, double, ab, =, epsilon, -, aa, ;, double, xa, =]
[;, double, ab, =, epsilon, -, aa, ;, double, xa, =, aa, ;, double, xb, =, ab, ;, final, double]
[-, tmp, ;, double, ab, =, epsilon, -, aa, ;, double, xa, =, aa, ;, double, xb, =, ab, ;]
[+, tmp, -, tmp, ;, double, ab, =, epsilon, -, aa, ;, double, xa, =, aa, ;, double, xb, =]
[-, tmp, ;, double, ab, =, epsilon, -, aa, ;, double, xa, =, aa, ;, double, xb, =, ab, ;]
[;, double, ab, =, epsilon, -, aa, ;, double, xa, =, aa, ;, double, xb, =, ab, ;, final, double]
[;, double, xa, =, aa, ;, double, xb, =, ab, ;, final, double, numer, =, bits, &, 0x3ffffffffffL, ;, final]
[-, aa, ;, double, xa, =, aa, ;, double, xb, =, ab, ;, final, double, numer, =, bits, &, 0x3ffffffffffL]
[;, double, xa, =, aa, ;, double, xb, =, ab, ;, final, double, numer, =, bits, &, 0x3ffffffffffL, ;, final]
[;, double, xb, =, ab, ;, final, double, numer, =, bits, &, 0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +]
[;, final, double, numer, =, bits, &, 0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, )]
[;, final, double, denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =, numer, -, xa, *, denom]
[&, 0x3ffffffffffL, ;, final, double, denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =, numer, -, xa]
[;, final, double, denom, =, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =, numer, -, xa, *, denom]
[;, aa, =, numer, -, xa, *, denom, -, xb, *, denom, ;, xb, +=, aa, /, denom, ;, final]
[+, (, bits, &, 0x000ffc0000000000L, ), ;, aa, =, numer, -, xa, *, denom, -, xb, *, denom, ;, xb]
[;, aa, =, numer, -, xa, *, denom, -, xb, *, denom, ;, xb, +=, aa, /, denom, ;, final]
[), ;, aa, =, numer, -, xa, *, denom, -, xb, *, denom, ;, xb, +=, aa, /, denom, ;]
[&, 0x000ffc0000000000L, ), ;, aa, =, numer, -, xa, *, denom, -, xb, *, denom, ;, xb, +=, aa, /]
[), ;, aa, =, numer, -, xa, *, denom, -, xb, *, denom, ;, xb, +=, aa, /, denom, ;]
[=, numer, -, xa, *, denom, -, xb, *, denom, ;, xb, +=, aa, /, denom, ;, final, double, []
[;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -, 1]
[-, xb, *, denom, ;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF]
[-, xa, *, denom, -, xb, *, denom, ;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last]
[-, xb, *, denom, ;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF]
[*, denom, -, xb, *, denom, ;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF]
[-, xb, *, denom, ;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF]
[;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -, 1]
[*, denom, ;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length]
[;, xb, +=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -, 1]
[+=, aa, /, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -, 1, ], ;]
[;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -, 1, ], ;, double, ya, =, lnCoef_last]
[/, denom, ;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -, 1, ], ;, double, ya]
[;, final, double, [, ], lnCoef_last, =, LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -, 1, ], ;, double, ya, =, lnCoef_last]
[;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int]
[[, LN_HI_PREC_COEF, ., length, -, 1, ], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last]
[], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (]
[-, 1, ], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;]
[., length, -, 1, ], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1]
[], ;, double, ya, =, lnCoef_last, [, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (]
[;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_HI_PREC_COEF, ., length, -, 2, ;]
[[, 0, ], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_HI_PREC_COEF, ., length]
[], ;, double, yb, =, lnCoef_last, [, 1, ], ;, for, (, int, i, =, LN_HI_PREC_COEF, ., length, -, 2]
[;, for, (, int, i, =, LN_HI_PREC_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {]
[[, 1, ], ;, for, (, int, i, =, LN_HI_PREC_COEF, ., length, -, 2, ;, i, >=, 0, ;, i]
[], ;, for, (, int, i, =, LN_HI_PREC_COEF, ., length, -, 2, ;, i, >=, 0, ;, i, --, )]
[;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb]
[-, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya]
[., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab]
[;, i, >=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb]
[;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa]
[>=, 0, ;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb]
[;, i, --, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa]
[), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *]
[--, ), {, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb]
[=, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp]
[;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000]
[*, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa]
[;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000]
[=, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya]
[;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya]
[+, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb]
[+, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp]
[*, xb, +, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa]
[+, yb, *, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp]
[+, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb]
[*, xa, +, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp]
[+, yb, *, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb]
[;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya]
[*, xb, ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa]
[;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya]
[=, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, []
[*, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, []
[=, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i]
[;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i]
[+, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i]
[;, yb, =, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;]
[=, aa, -, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =]
[;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ]]
[+, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, []
[-, ya, +, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +]
[+, ab, ;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, []
[;, final, double, [, ], lnCoef_i, =, LN_HI_PREC_COEF, [, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ]]
[;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp]
[[, i, ], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1]
[], ;, aa, =, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;]
[=, ya, +, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa]
[;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +]
[+, lnCoef_i, [, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000]
[;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +]
[[, 0, ], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya]
[], ;, ab, =, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa]
[=, yb, +, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -]
[;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya]
[+, lnCoef_i, [, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;]
[;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya]
[[, 1, ], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =]
[], ;, tmp, =, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -]
[=, aa, *, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =]
[*, HEX_40000000, ;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }]
[;, ya, =, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =]
[=, aa, +, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *]
[;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =]
[+, tmp, -, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;]
[-, tmp, ;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =]
[;, yb, =, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *]
[=, aa, -, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +]
[;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *]
[+, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +]
[-, ya, +, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *]
[+, ab, ;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +]
[;, }, aa, =, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *]
[=, ya, *, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, lnza]
[;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab]
[*, xa, ;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa]
[;, ab, =, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab]
[=, ya, *, xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb]
[;, lnza, =, aa, +, ab, ;, lnzb, =, -, (, lnza, -, aa, -, ab, ), ;, }, else]
[+, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -, (, lnza, -, aa, -, ab]
[+, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -, (, lnza]
[*, xb, +, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -]
[+, yb, *, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -, (, lnza]
[+, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -, (, lnza, -, aa, -, ab]
[*, xa, +, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -, (, lnza, -, aa]
[+, yb, *, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -, (, lnza, -, aa, -, ab]
[;, lnza, =, aa, +, ab, ;, lnzb, =, -, (, lnza, -, aa, -, ab, ), ;, }, else]
[*, xb, ;, lnza, =, aa, +, ab, ;, lnzb, =, -, (, lnza, -, aa, -, ab, ), ;]
[;, lnza, =, aa, +, ab, ;, lnzb, =, -, (, lnza, -, aa, -, ab, ), ;, }, else]
[=, aa, +, ab, ;, lnzb, =, -, (, lnza, -, aa, -, ab, ), ;, }, else, {, lnza]
[;, lnzb, =, -, (, lnza, -, aa, -, ab, ), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;]
[+, ab, ;, lnzb, =, -, (, lnza, -, aa, -, ab, ), ;, }, else, {, lnza, =, -]
[;, lnzb, =, -, (, lnza, -, aa, -, ab, ), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;]
[=, -, (, lnza, -, aa, -, ab, ), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =]
[;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza]
[;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza]
[), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =]
[-, ab, ), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;]
[-, aa, -, ab, ), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +]
[-, ab, ), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;]
[), ;, }, else, {, lnza, =, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =]
[=, -, 0.16624882440418567, ;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497]
[;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =]
[;, lnza, =, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =]
[=, lnza, *, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *]
[;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =]
[+, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;]
[*, epsilon, +, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +]
[+, 0.19999954120254515, ;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;]
[;, lnza, =, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =]
[=, lnza, *, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *]
[;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =]
[+, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5]
[*, epsilon, +, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +]
[+, -, 0.2499999997677497, ;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5]
[;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =]
[;, lnza, =, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =]
[=, lnza, *, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =, lnza, *]
[;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =]
[+, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;]
[*, epsilon, +, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =, lnza, *, epsilon, +]
[+, 0.3333333333332802, ;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;]
[;, lnza, =, lnza, *, epsilon, +, -, 0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =]
[=, lnza, *, epsilon, +, -, 0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =, lnza, *]
[;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =, lnza, *, epsilon, ;, }, double, a, =, LN_2_A]
[+, -, 0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =, lnza, *, epsilon, ;, }, double]
[*, epsilon, +, -, 0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =, lnza, *, epsilon, ;]
[+, -, 0.5, ;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =, lnza, *, epsilon, ;, }, double]
[;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =, lnza, *, epsilon, ;, }, double, a, =, LN_2_A]
[;, lnza, =, lnza, *, epsilon, +, 1.0, ;, lnza, =, lnza, *, epsilon, ;, }, double, a, =, LN_2_A]
[=, lnza, *, epsilon, +, 1.0, ;, lnza, =, lnza, *, epsilon, ;, }, double, a, =, LN_2_A, *, exp]
[;, lnza, =, lnza, *, epsilon, ;, }, double, a, =, LN_2_A, *, exp, ;, double, b, =, 0.0, ;]
[+, 1.0, ;, lnza, =, lnza, *, epsilon, ;, }, double, a, =, LN_2_A, *, exp, ;, double, b, =]
[*, epsilon, +, 1.0, ;, lnza, =, lnza, *, epsilon, ;, }, double, a, =, LN_2_A, *, exp, ;, double]
[+, 1.0, ;, lnza, =, lnza, *, epsilon, ;, }, double, a, =, LN_2_A, *, exp, ;, double, b, =]
[;, lnza, =, lnza, *, epsilon, ;, }, double, a, =, LN_2_A, *, exp, ;, double, b, =, 0.0, ;]
[=, lnza, *, epsilon, ;, }, double, a, =, LN_2_A, *, exp, ;, double, b, =, 0.0, ;, double, c]
[;, }, double, a, =, LN_2_A, *, exp, ;, double, b, =, 0.0, ;, double, c, =, a, +, lnm]
[*, epsilon, ;, }, double, a, =, LN_2_A, *, exp, ;, double, b, =, 0.0, ;, double, c, =, a]
[;, }, double, a, =, LN_2_A, *, exp, ;, double, b, =, 0.0, ;, double, c, =, a, +, lnm]
[;, double, b, =, 0.0, ;, double, c, =, a, +, lnm, [, 0, ], ;, double, d, =, -]
[*, exp, ;, double, b, =, 0.0, ;, double, c, =, a, +, lnm, [, 0, ], ;, double, d]
[;, double, b, =, 0.0, ;, double, c, =, a, +, lnm, [, 0, ], ;, double, d, =, -]
[;, double, c, =, a, +, lnm, [, 0, ], ;, double, d, =, -, (, c, -, a, -]
[;, double, d, =, -, (, c, -, a, -, lnm, [, 0, ], ), ;, a, =, c, ;]
[+, lnm, [, 0, ], ;, double, d, =, -, (, c, -, a, -, lnm, [, 0, ], )]
[;, double, d, =, -, (, c, -, a, -, lnm, [, 0, ], ), ;, a, =, c, ;]
[[, 0, ], ;, double, d, =, -, (, c, -, a, -, lnm, [, 0, ], ), ;, a]
[], ;, double, d, =, -, (, c, -, a, -, lnm, [, 0, ], ), ;, a, =, c]
[;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnza, ;, d, =, -]
[;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnza, ;, d, =, -]
[), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnza, ;, d, =]
[-, lnm, [, 0, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a]
[-, a, -, lnm, [, 0, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c]
[-, lnm, [, 0, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a]
[), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnza, ;, d, =]
[[, 0, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnza]
[], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnza, ;, d]
[=, c, ;, b, =, b, +, d, ;, c, =, a, +, lnza, ;, d, =, -, (, c]
[;, b, =, b, +, d, ;, c, =, a, +, lnza, ;, d, =, -, (, c, -, a]
[=, b, +, d, ;, c, =, a, +, lnza, ;, d, =, -, (, c, -, a, -, lnza]
[;, c, =, a, +, lnza, ;, d, =, -, (, c, -, a, -, lnza, ), ;, a, =]
[+, d, ;, c, =, a, +, lnza, ;, d, =, -, (, c, -, a, -, lnza, ), ;]
[;, c, =, a, +, lnza, ;, d, =, -, (, c, -, a, -, lnza, ), ;, a, =]
[=, a, +, lnza, ;, d, =, -, (, c, -, a, -, lnza, ), ;, a, =, c, ;]
[;, d, =, -, (, c, -, a, -, lnza, ), ;, a, =, c, ;, b, =, b, +]
[+, lnza, ;, d, =, -, (, c, -, a, -, lnza, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, lnza, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, lnza, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d]
[;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d]
[), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;]
[-, lnza, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *]
[-, a, -, lnza, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +]
[-, lnza, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *]
[), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;]
[=, c, ;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -]
[;, b, =, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -, (, c]
[=, b, +, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -, (, c, -, a]
[;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -, (, c, -, a, -, LN_2_B, *, exp]
[+, d, ;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -, (, c, -, a, -, LN_2_B]
[;, c, =, a, +, LN_2_B, *, exp, ;, d, =, -, (, c, -, a, -, LN_2_B, *, exp]
[=, a, +, LN_2_B, *, exp, ;, d, =, -, (, c, -, a, -, LN_2_B, *, exp, ), ;]
[;, d, =, -, (, c, -, a, -, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =]
[+, LN_2_B, *, exp, ;, d, =, -, (, c, -, a, -, LN_2_B, *, exp, ), ;, a, =]
[;, d, =, -, (, c, -, a, -, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =]
[*, exp, ;, d, =, -, (, c, -, a, -, LN_2_B, *, exp, ), ;, a, =, c, ;]
[;, d, =, -, (, c, -, a, -, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =]
[=, -, (, c, -, a, -, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =, b, +]
[;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnm, [, 1, ], ;]
[;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnm, [, 1, ], ;]
[), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnm, [, 1, ]]
[-, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +]
[-, a, -, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =]
[-, LN_2_B, *, exp, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +]
[), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnm, [, 1, ]]
[*, exp, ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnm, []
[), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnm, [, 1, ]]
[=, c, ;, b, =, b, +, d, ;, c, =, a, +, lnm, [, 1, ], ;, d, =]
[;, b, =, b, +, d, ;, c, =, a, +, lnm, [, 1, ], ;, d, =, -, (]
[=, b, +, d, ;, c, =, a, +, lnm, [, 1, ], ;, d, =, -, (, c, -]
[;, c, =, a, +, lnm, [, 1, ], ;, d, =, -, (, c, -, a, -, lnm, []
[+, d, ;, c, =, a, +, lnm, [, 1, ], ;, d, =, -, (, c, -, a, -]
[;, c, =, a, +, lnm, [, 1, ], ;, d, =, -, (, c, -, a, -, lnm, []
[=, a, +, lnm, [, 1, ], ;, d, =, -, (, c, -, a, -, lnm, [, 1, ]]
[;, d, =, -, (, c, -, a, -, lnm, [, 1, ], ), ;, a, =, c, ;, b]
[+, lnm, [, 1, ], ;, d, =, -, (, c, -, a, -, lnm, [, 1, ], ), ;]
[;, d, =, -, (, c, -, a, -, lnm, [, 1, ], ), ;, a, =, c, ;, b]
[[, 1, ], ;, d, =, -, (, c, -, a, -, lnm, [, 1, ], ), ;, a, =]
[], ;, d, =, -, (, c, -, a, -, lnm, [, 1, ], ), ;, a, =, c, ;]
[=, -, (, c, -, a, -, lnm, [, 1, ], ), ;, a, =, c, ;, b, =, b]
[;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d, =, -]
[;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d, =, -]
[), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d, =]
[-, lnm, [, 1, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a]
[-, a, -, lnm, [, 1, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c]
[-, lnm, [, 1, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a]
[), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d, =]
[[, 1, ], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb]
[], ), ;, a, =, c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d]
[=, c, ;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d, =, -, (, c]
[;, b, =, b, +, d, ;, c, =, a, +, lnzb, ;, d, =, -, (, c, -, a]
[=, b, +, d, ;, c, =, a, +, lnzb, ;, d, =, -, (, c, -, a, -, lnzb]
[;, c, =, a, +, lnzb, ;, d, =, -, (, c, -, a, -, lnzb, ), ;, a, =]
[+, d, ;, c, =, a, +, lnzb, ;, d, =, -, (, c, -, a, -, lnzb, ), ;]
[;, c, =, a, +, lnzb, ;, d, =, -, (, c, -, a, -, lnzb, ), ;, a, =]
[=, a, +, lnzb, ;, d, =, -, (, c, -, a, -, lnzb, ), ;, a, =, c, ;]
[;, d, =, -, (, c, -, a, -, lnzb, ), ;, a, =, c, ;, b, =, b, +]
[+, lnzb, ;, d, =, -, (, c, -, a, -, lnzb, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, lnzb, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, lnzb, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[;, a, =, c, ;, b, =, b, +, d, ;, if, (, hiPrec, !=, null, ), {, hiPrec, []
[;, a, =, c, ;, b, =, b, +, d, ;, if, (, hiPrec, !=, null, ), {, hiPrec, []
[), ;, a, =, c, ;, b, =, b, +, d, ;, if, (, hiPrec, !=, null, ), {, hiPrec]
[-, lnzb, ), ;, a, =, c, ;, b, =, b, +, d, ;, if, (, hiPrec, !=, null, )]
[-, a, -, lnzb, ), ;, a, =, c, ;, b, =, b, +, d, ;, if, (, hiPrec, !=]
[-, lnzb, ), ;, a, =, c, ;, b, =, b, +, d, ;, if, (, hiPrec, !=, null, )]
[), ;, a, =, c, ;, b, =, b, +, d, ;, if, (, hiPrec, !=, null, ), {, hiPrec]
[=, c, ;, b, =, b, +, d, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ]]
[;, b, =, b, +, d, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, a]
[=, b, +, d, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, a, ;, hiPrec]
[;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, a, ;, hiPrec, [, 1, ], =]
[+, d, ;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, a, ;, hiPrec, [, 1]
[;, if, (, hiPrec, !=, null, ), {, hiPrec, [, 0, ], =, a, ;, hiPrec, [, 1, ], =]
[), {, hiPrec, [, 0, ], =, a, ;, hiPrec, [, 1, ], =, b, ;, }, return, a, +]
[!=, null, ), {, hiPrec, [, 0, ], =, a, ;, hiPrec, [, 1, ], =, b, ;, }, return]
[), {, hiPrec, [, 0, ], =, a, ;, hiPrec, [, 1, ], =, b, ;, }, return, a, +]
[=, a, ;, hiPrec, [, 1, ], =, b, ;, }, return, a, +, b, ;, }, public, static, double]
[[, 0, ], =, a, ;, hiPrec, [, 1, ], =, b, ;, }, return, a, +, b, ;, }]
[], =, a, ;, hiPrec, [, 1, ], =, b, ;, }, return, a, +, b, ;, }, public, static]
[;, hiPrec, [, 1, ], =, b, ;, }, return, a, +, b, ;, }, public, static, double, log1p, (]
[=, b, ;, }, return, a, +, b, ;, }, public, static, double, log1p, (, final, double, x, ), {]
[[, 1, ], =, b, ;, }, return, a, +, b, ;, }, public, static, double, log1p, (, final, double]
[], =, b, ;, }, return, a, +, b, ;, }, public, static, double, log1p, (, final, double, x, )]
[;, }, return, a, +, b, ;, }, public, static, double, log1p, (, final, double, x, ), {, if, (]
[;, }, public, static, double, log1p, (, final, double, x, ), {, if, (, x, ==, -, 1, ), {]
[+, b, ;, }, public, static, double, log1p, (, final, double, x, ), {, if, (, x, ==, -, 1]
[;, }, public, static, double, log1p, (, final, double, x, ), {, if, (, x, ==, -, 1, ), {]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, .]
[==, -, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, .]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, .]
[;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, x]
[., NEGATIVE_INFINITY, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, x, >, 1e-6, ||, x, <, -, 1e-6, ), {]
[==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, x, >, 1e-6, ||, x, <]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, x, >, 1e-6, ||, x, <, -, 1e-6, ), {]
[., POSITIVE_INFINITY, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, x, >, 1e-6, ||, x, <, -, 1e-6]
[;, }, if, (, x, >, 1e-6, ||, x, <, -, 1e-6, ), {, final, double, xpa, =, 1, +]
[., POSITIVE_INFINITY, ;, }, if, (, x, >, 1e-6, ||, x, <, -, 1e-6, ), {, final, double, xpa, =]
[), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =, -, (, xpa, -, 1, -]
[||, x, <, -, 1e-6, ), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =, -]
[>, 1e-6, ||, x, <, -, 1e-6, ), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb]
[||, x, <, -, 1e-6, ), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =, -]
[), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =, -, (, xpa, -, 1, -]
[<, -, 1e-6, ), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =, -, (, xpa]
[), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =, -, (, xpa, -, 1, -]
[), {, final, double, xpa, =, 1, +, x, ;, final, double, xpb, =, -, (, xpa, -, 1, -]
[;, final, double, xpb, =, -, (, xpa, -, 1, -, x, ), ;, final, double, [, ], hiPrec, =]
[+, x, ;, final, double, xpb, =, -, (, xpa, -, 1, -, x, ), ;, final, double, [, ]]
[;, final, double, xpb, =, -, (, xpa, -, 1, -, x, ), ;, final, double, [, ], hiPrec, =]
[;, final, double, [, ], hiPrec, =, new, double, [, 2, ], ;, final, double, lores, =, log, (, xpa]
[;, final, double, [, ], hiPrec, =, new, double, [, 2, ], ;, final, double, lores, =, log, (, xpa]
[), ;, final, double, [, ], hiPrec, =, new, double, [, 2, ], ;, final, double, lores, =, log, (]
[-, x, ), ;, final, double, [, ], hiPrec, =, new, double, [, 2, ], ;, final, double, lores, =]
[-, 1, -, x, ), ;, final, double, [, ], hiPrec, =, new, double, [, 2, ], ;, final, double]
[-, x, ), ;, final, double, [, ], hiPrec, =, new, double, [, 2, ], ;, final, double, lores, =]
[), ;, final, double, [, ], hiPrec, =, new, double, [, 2, ], ;, final, double, lores, =, log, (]
[;, final, double, lores, =, log, (, xpa, ,, hiPrec, ), ;, if, (, Double, ., isInfinite, (, lores, )]
[], ;, final, double, lores, =, log, (, xpa, ,, hiPrec, ), ;, if, (, Double, ., isInfinite, (, lores]
[;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, fx1, =, xpb]
[,, hiPrec, ), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double]
[), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, fx1, =]
[), {, return, lores, ;, }, final, double, fx1, =, xpb, /, xpa, ;, final, double, epsilon, =, 0.5, *]
[., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, fx1, =, xpb, /, xpa, ;, final]
[), ), {, return, lores, ;, }, final, double, fx1, =, xpb, /, xpa, ;, final, double, epsilon, =, 0.5]
[;, }, final, double, fx1, =, xpb, /, xpa, ;, final, double, epsilon, =, 0.5, *, fx1, +, 1, ;]
[;, final, double, epsilon, =, 0.5, *, fx1, +, 1, ;, return, epsilon, *, fx1, +, hiPrec, [, 1, ]]
[/, xpa, ;, final, double, epsilon, =, 0.5, *, fx1, +, 1, ;, return, epsilon, *, fx1, +, hiPrec, []
[;, final, double, epsilon, =, 0.5, *, fx1, +, 1, ;, return, epsilon, *, fx1, +, hiPrec, [, 1, ]]
[;, return, epsilon, *, fx1, +, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else, {, final]
[+, 1, ;, return, epsilon, *, fx1, +, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else]
[*, fx1, +, 1, ;, return, epsilon, *, fx1, +, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;]
[+, 1, ;, return, epsilon, *, fx1, +, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else]
[;, return, epsilon, *, fx1, +, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else, {, final]
[;, }, else, {, final, double, y, =, (, x, *, F_1_3, -, F_1_2, ), *, x, +, 1, ;]
[+, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =, (, x, *, F_1_3, -, F_1_2, )]
[+, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =, (, x]
[*, fx1, +, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =]
[+, hiPrec, [, 1, ], +, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =, (, x]
[+, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =, (, x, *, F_1_3, -, F_1_2, )]
[[, 1, ], +, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =, (, x, *, F_1_3]
[], +, hiPrec, [, 0, ], ;, }, else, {, final, double, y, =, (, x, *, F_1_3, -, F_1_2]
[;, }, else, {, final, double, y, =, (, x, *, F_1_3, -, F_1_2, ), *, x, +, 1, ;]
[[, 0, ], ;, }, else, {, final, double, y, =, (, x, *, F_1_3, -, F_1_2, ), *, x]
[], ;, }, else, {, final, double, y, =, (, x, *, F_1_3, -, F_1_2, ), *, x, +, 1]
[;, return, y, *, x, ;, }, }, public, static, double, log10, (, final, double, x, ), {, final, double]
[+, 1, ;, return, y, *, x, ;, }, }, public, static, double, log10, (, final, double, x, ), {]
[*, x, +, 1, ;, return, y, *, x, ;, }, }, public, static, double, log10, (, final, double, x]
[), *, x, +, 1, ;, return, y, *, x, ;, }, }, public, static, double, log10, (, final, double]
[-, F_1_2, ), *, x, +, 1, ;, return, y, *, x, ;, }, }, public, static, double, log10, (]
[*, F_1_3, -, F_1_2, ), *, x, +, 1, ;, return, y, *, x, ;, }, }, public, static, double]
[-, F_1_2, ), *, x, +, 1, ;, return, y, *, x, ;, }, }, public, static, double, log10, (]
[), *, x, +, 1, ;, return, y, *, x, ;, }, }, public, static, double, log10, (, final, double]
[+, 1, ;, return, y, *, x, ;, }, }, public, static, double, log10, (, final, double, x, ), {]
[;, return, y, *, x, ;, }, }, public, static, double, log10, (, final, double, x, ), {, final, double]
[;, }, }, public, static, double, log10, (, final, double, x, ), {, final, double, hiPrec, [, ], =, new]
[*, x, ;, }, }, public, static, double, log10, (, final, double, x, ), {, final, double, hiPrec, [, ]]
[;, }, }, public, static, double, log10, (, final, double, x, ), {, final, double, hiPrec, [, ], =, new]
[;, final, double, lores, =, log, (, x, ,, hiPrec, ), ;, if, (, Double, ., isInfinite, (, lores, )]
[], ;, final, double, lores, =, log, (, x, ,, hiPrec, ), ;, if, (, Double, ., isInfinite, (, lores]
[;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, tmp, =, hiPrec]
[,, hiPrec, ), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double]
[), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, tmp, =]
[), {, return, lores, ;, }, final, double, tmp, =, hiPrec, [, 0, ], *, HEX_40000000, ;, final, double, lna]
[., isInfinite, (, lores, ), ), {, return, lores, ;, }, final, double, tmp, =, hiPrec, [, 0, ], *]
[), ), {, return, lores, ;, }, final, double, tmp, =, hiPrec, [, 0, ], *, HEX_40000000, ;, final, double]
[;, }, final, double, tmp, =, hiPrec, [, 0, ], *, HEX_40000000, ;, final, double, lna, =, hiPrec, [, 0]
[;, final, double, lna, =, hiPrec, [, 0, ], +, tmp, -, tmp, ;, final, double, lnb, =, hiPrec, []
[*, HEX_40000000, ;, final, double, lna, =, hiPrec, [, 0, ], +, tmp, -, tmp, ;, final, double, lnb, =]
[[, 0, ], *, HEX_40000000, ;, final, double, lna, =, hiPrec, [, 0, ], +, tmp, -, tmp, ;, final]
[], *, HEX_40000000, ;, final, double, lna, =, hiPrec, [, 0, ], +, tmp, -, tmp, ;, final, double, lnb]
[;, final, double, lna, =, hiPrec, [, 0, ], +, tmp, -, tmp, ;, final, double, lnb, =, hiPrec, []
[;, final, double, lnb, =, hiPrec, [, 0, ], -, lna, +, hiPrec, [, 1, ], ;, final, double, rln10a]
[-, tmp, ;, final, double, lnb, =, hiPrec, [, 0, ], -, lna, +, hiPrec, [, 1, ], ;, final]
[+, tmp, -, tmp, ;, final, double, lnb, =, hiPrec, [, 0, ], -, lna, +, hiPrec, [, 1, ]]
[[, 0, ], +, tmp, -, tmp, ;, final, double, lnb, =, hiPrec, [, 0, ], -, lna, +, hiPrec]
[], +, tmp, -, tmp, ;, final, double, lnb, =, hiPrec, [, 0, ], -, lna, +, hiPrec, [, 1]
[-, tmp, ;, final, double, lnb, =, hiPrec, [, 0, ], -, lna, +, hiPrec, [, 1, ], ;, final]
[;, final, double, lnb, =, hiPrec, [, 0, ], -, lna, +, hiPrec, [, 1, ], ;, final, double, rln10a]
[;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb, +, rln10b, *]
[+, hiPrec, [, 1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b]
[-, lna, +, hiPrec, [, 1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;]
[[, 0, ], -, lna, +, hiPrec, [, 1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b]
[], -, lna, +, hiPrec, [, 1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8]
[+, hiPrec, [, 1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b]
[;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb, +, rln10b, *]
[[, 1, ], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb]
[], ;, final, double, rln10a, =, 0.4342944622039795, ;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb, +, rln10b]
[;, final, double, rln10b, =, 1.9699272335463627E-8, ;, return, rln10b, *, lnb, +, rln10b, *, lna, +, rln10a, *, lnb, +]
[;, return, rln10b, *, lnb, +, rln10b, *, lna, +, rln10a, *, lnb, +, rln10a, *, lna, ;, }, public]
[;, }, public, static, double, log, (, double, base, ,, double, x, ), {, return, log, (, x, ), /]
[+, rln10a, *, lna, ;, }, public, static, double, log, (, double, base, ,, double, x, ), {, return, log]
[+, rln10a, *, lnb, +, rln10a, *, lna, ;, }, public, static, double, log, (, double, base, ,, double, x]
[+, rln10b, *, lna, +, rln10a, *, lnb, +, rln10a, *, lna, ;, }, public, static, double, log, (, double]
[*, lnb, +, rln10b, *, lna, +, rln10a, *, lnb, +, rln10a, *, lna, ;, }, public, static, double, log]
[+, rln10b, *, lna, +, rln10a, *, lnb, +, rln10a, *, lna, ;, }, public, static, double, log, (, double]
[+, rln10a, *, lnb, +, rln10a, *, lna, ;, }, public, static, double, log, (, double, base, ,, double, x]
[*, lna, +, rln10a, *, lnb, +, rln10a, *, lna, ;, }, public, static, double, log, (, double, base, ,]
[+, rln10a, *, lnb, +, rln10a, *, lna, ;, }, public, static, double, log, (, double, base, ,, double, x]
[+, rln10a, *, lna, ;, }, public, static, double, log, (, double, base, ,, double, x, ), {, return, log]
[*, lnb, +, rln10a, *, lna, ;, }, public, static, double, log, (, double, base, ,, double, x, ), {]
[+, rln10a, *, lna, ;, }, public, static, double, log, (, double, base, ,, double, x, ), {, return, log]
[;, }, public, static, double, log, (, double, base, ,, double, x, ), {, return, log, (, x, ), /]
[*, lna, ;, }, public, static, double, log, (, double, base, ,, double, x, ), {, return, log, (, x]
[;, }, public, static, double, log, (, double, base, ,, double, x, ), {, return, log, (, x, ), /]
[;, }, public, static, double, pow, (, double, x, ,, double, y, ), {, final, double, lns, [, ], =]
[/, log, (, base, ), ;, }, public, static, double, pow, (, double, x, ,, double, y, ), {, final]
[), /, log, (, base, ), ;, }, public, static, double, pow, (, double, x, ,, double, y, ), {]
[;, }, public, static, double, pow, (, double, x, ,, double, y, ), {, final, double, lns, [, ], =]
[), ;, }, public, static, double, pow, (, double, x, ,, double, y, ), {, final, double, lns, [, ]]
[;, if, (, y, ==, 0.0, ), {, return, 1.0, ;, }, if, (, x, !=, x, ), {, return]
[], ;, if, (, y, ==, 0.0, ), {, return, 1.0, ;, }, if, (, x, !=, x, ), {]
[), {, return, 1.0, ;, }, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x]
[==, 0.0, ), {, return, 1.0, ;, }, if, (, x, !=, x, ), {, return, x, ;, }, if]
[), {, return, 1.0, ;, }, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x]
[;, }, if, (, x, !=, x, ), {, return, x, ;, }, if, (, x, ==, 0, ), {]
[), {, return, x, ;, }, if, (, x, ==, 0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (]
[!=, x, ), {, return, x, ;, }, if, (, x, ==, 0, ), {, long, bits, =, Double, .]
[), {, return, x, ;, }, if, (, x, ==, 0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (]
[;, }, if, (, x, ==, 0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if]
[), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=]
[==, 0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, bits, &, 0x8000000000000000L]
[), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=]
[;, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, long, yi, =, (, long, ), y, ;]
[., doubleToRawLongBits, (, x, ), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, long, yi, =]
[), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, long, yi, =, (, long, ), y]
[), {, long, yi, =, (, long, ), y, ;, if, (, y, <, 0, &&, y, ==, yi, &&]
[!=, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, <, 0, &&, y, ==]
[), !=, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, <, 0, &&, y]
[&, 0x8000000000000000L, ), !=, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, <, 0]
[), !=, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, <, 0, &&, y]
[), {, long, yi, =, (, long, ), y, ;, if, (, y, <, 0, &&, y, ==, yi, &&]
[;, if, (, y, <, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {]
[;, if, (, y, <, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==, yi, &&, (, yi]
[&&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >]
[&&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }]
[<, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY]
[&&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }]
[&&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >]
[==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (]
[&&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==, yi, &&, (, yi]
[==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==, yi, &&]
[), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==, yi]
[&, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y]
[), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==, yi]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==, yi, &&, (, yi]
[;, }, if, (, y, >, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, )]
[., NEGATIVE_INFINITY, ;, }, if, (, y, >, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==]
[), {, return, -, 0.0, ;, }, }, if, (, y, <, 0, ), {, return, Double, ., POSITIVE_INFINITY, ;]
[&&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, }, if, (, y, <]
[&&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, }]
[>, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;]
[&&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, }]
[&&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, }, if, (, y, <]
[==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, }, if, (]
[&&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, }, if, (, y, <]
[), {, return, -, 0.0, ;, }, }, if, (, y, <, 0, ), {, return, Double, ., POSITIVE_INFINITY, ;]
[==, 1, ), {, return, -, 0.0, ;, }, }, if, (, y, <, 0, ), {, return, Double, .]
[), ==, 1, ), {, return, -, 0.0, ;, }, }, if, (, y, <, 0, ), {, return, Double]
[&, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, }, if, (, y, <, 0, ), {]
[), ==, 1, ), {, return, -, 0.0, ;, }, }, if, (, y, <, 0, ), {, return, Double]
[), {, return, -, 0.0, ;, }, }, if, (, y, <, 0, ), {, return, Double, ., POSITIVE_INFINITY, ;]
[;, }, }, if, (, y, <, 0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, y, >]
[;, }, }, if, (, y, <, 0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, y, >]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, y, >, 0, ), {, return, 0.0, ;, }, return]
[<, 0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, y, >, 0, ), {, return, 0.0, ;]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, y, >, 0, ), {, return, 0.0, ;, }, return]
[;, }, if, (, y, >, 0, ), {, return, 0.0, ;, }, return, Double, ., NaN, ;, }, if]
[., POSITIVE_INFINITY, ;, }, if, (, y, >, 0, ), {, return, 0.0, ;, }, return, Double, ., NaN, ;]
[), {, return, 0.0, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, )]
[>, 0, ), {, return, 0.0, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==, Double, .]
[), {, return, 0.0, ;, }, return, Double, ., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, )]
[;, }, return, Double, ., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y]
[;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return, y]
[., NaN, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, !=, y, ), {]
[), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (, y, <, 0.0, ), {]
[==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (, y]
[), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (, y, <, 0.0, ), {]
[., POSITIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (, y, <, 0.0]
[), {, return, y, ;, }, if, (, y, <, 0.0, ), {, return, 0.0, ;, }, else, {, return]
[!=, y, ), {, return, y, ;, }, if, (, y, <, 0.0, ), {, return, 0.0, ;, }, else]
[), {, return, y, ;, }, if, (, y, <, 0.0, ), {, return, 0.0, ;, }, else, {, return]
[;, }, if, (, y, <, 0.0, ), {, return, 0.0, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;]
[), {, return, 0.0, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double]
[<, 0.0, ), {, return, 0.0, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y]
[), {, return, 0.0, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double]
[;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {]
[;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, )]
[., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, *, x, ==]
[), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x]
[==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;]
[), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x]
[., POSITIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if]
[), {, return, Double, ., NaN, ;, }, if, (, x, *, x, >, 1.0, ), {, return, Double, .]
[==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *, x, >, 1.0, ), {, return]
[*, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *, x, >, 1.0, )]
[==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *, x, >, 1.0, ), {, return]
[), {, return, Double, ., NaN, ;, }, if, (, x, *, x, >, 1.0, ), {, return, Double, .]
[;, }, if, (, x, *, x, >, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return]
[., NaN, ;, }, if, (, x, *, x, >, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x, ==, Double]
[>, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x]
[*, x, >, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if]
[>, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x, ==, Double]
[;, }, else, {, return, 0.0, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {]
[;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return]
[), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (, y, <, 0, ), {]
[==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (, y]
[), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (, y, <, 0, ), {]
[., NEGATIVE_INFINITY, ), {, if, (, y, !=, y, ), {, return, y, ;, }, if, (, y, <, 0]
[), {, return, y, ;, }, if, (, y, <, 0, ), {, long, yi, =, (, long, ), y]
[!=, y, ), {, return, y, ;, }, if, (, y, <, 0, ), {, long, yi, =, (, long]
[), {, return, y, ;, }, if, (, y, <, 0, ), {, long, yi, =, (, long, ), y]
[;, }, if, (, y, <, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y]
[), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (, yi, &, 1]
[<, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (, yi]
[), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (, yi, &, 1]
[;, if, (, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;]
[;, if, (, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;]
[), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, y, >, 0, ), {, long, yi]
[&&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if]
[==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, return, 0.0, ;]
[&&, (, yi, &, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if]
[), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, y, >, 0, ), {, long, yi]
[==, 1, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, y, >, 0, ), {]
[), ==, 1, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, y, >, 0, )]
[&, 1, ), ==, 1, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, y, >]
[), ==, 1, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, y, >, 0, )]
[), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, y, >, 0, ), {, long, yi]
[;, }, return, 0.0, ;, }, if, (, y, >, 0, ), {, long, yi, =, (, long, ), y]
[;, }, return, 0.0, ;, }, if, (, y, >, 0, ), {, long, yi, =, (, long, ), y]
[;, }, if, (, y, >, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y]
[), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (, yi, &, 1]
[>, 0, ), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (, yi]
[), {, long, yi, =, (, long, ), y, ;, if, (, y, ==, yi, &&, (, yi, &, 1]
[;, if, (, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY]
[;, if, (, y, ==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double]
[&&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY]
[==, yi, &&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double]
[&&, (, yi, &, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double]
[==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y]
[), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (]
[&, 1, ), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }]
[), ==, 1, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (]
[), {, return, Double, ., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double]
[;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (]
[., NEGATIVE_INFINITY, ;, }, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {]
[;, }, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, )]
[., POSITIVE_INFINITY, ;, }, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, *, x, ==]
[), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x]
[==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;]
[), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x]
[., NEGATIVE_INFINITY, ), {, if, (, x, *, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if]
[), {, return, Double, ., NaN, ;, }, if, (, x, *, x, <, 1.0, ), {, return, Double, .]
[==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *, x, <, 1.0, ), {, return]
[*, x, ==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *, x, <, 1.0, )]
[==, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, *, x, <, 1.0, ), {, return]
[), {, return, Double, ., NaN, ;, }, if, (, x, *, x, <, 1.0, ), {, return, Double, .]
[;, }, if, (, x, *, x, <, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return]
[., NaN, ;, }, if, (, x, *, x, <, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x, <, 0]
[<, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x]
[*, x, <, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if]
[<, 1.0, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x, <, 0]
[;, }, else, {, return, 0.0, ;, }, }, if, (, x, <, 0, ), {, if, (, y, >=]
[., POSITIVE_INFINITY, ;, }, else, {, return, 0.0, ;, }, }, if, (, x, <, 0, ), {, if, (]
[;, }, }, if, (, x, <, 0, ), {, if, (, y, >=, TWO_POWER_53, ||, y, <=, -, TWO_POWER_53]
[), {, if, (, y, >=, TWO_POWER_53, ||, y, <=, -, TWO_POWER_53, ), {, return, pow, (, -, x, ,]
[<, 0, ), {, if, (, y, >=, TWO_POWER_53, ||, y, <=, -, TWO_POWER_53, ), {, return, pow, (, -]
[), {, if, (, y, >=, TWO_POWER_53, ||, y, <=, -, TWO_POWER_53, ), {, return, pow, (, -, x, ,]
[), {, return, pow, (, -, x, ,, y, ), ;, }, if, (, y, ==, (, long, ), y]
[||, y, <=, -, TWO_POWER_53, ), {, return, pow, (, -, x, ,, y, ), ;, }, if, (, y]
[>=, TWO_POWER_53, ||, y, <=, -, TWO_POWER_53, ), {, return, pow, (, -, x, ,, y, ), ;, }, if]
[||, y, <=, -, TWO_POWER_53, ), {, return, pow, (, -, x, ,, y, ), ;, }, if, (, y]
[), {, return, pow, (, -, x, ,, y, ), ;, }, if, (, y, ==, (, long, ), y]
[<=, -, TWO_POWER_53, ), {, return, pow, (, -, x, ,, y, ), ;, }, if, (, y, ==, (]
[), {, return, pow, (, -, x, ,, y, ), ;, }, if, (, y, ==, (, long, ), y]
[), {, return, pow, (, -, x, ,, y, ), ;, }, if, (, y, ==, (, long, ), y]
[;, }, if, (, y, ==, (, long, ), y, ), {, return, (, (, long, ), y, &, 1]
[,, y, ), ;, }, if, (, y, ==, (, long, ), y, ), {, return, (, (, long, )]
[,, y, ), ;, }, if, (, y, ==, (, long, ), y, ), {, return, (, (, long, )]
[), ;, }, if, (, y, ==, (, long, ), y, ), {, return, (, (, long, ), y, &]
[), {, return, (, (, long, ), y, &, 1, ), ==, 0, ?, pow, (, -, x, ,, y]
[==, (, long, ), y, ), {, return, (, (, long, ), y, &, 1, ), ==, 0, ?, pow]
[), {, return, (, (, long, ), y, &, 1, ), ==, 0, ?, pow, (, -, x, ,, y]
[), {, return, (, (, long, ), y, &, 1, ), ==, 0, ?, pow, (, -, x, ,, y]
[;, }, else, {, return, Double, ., NaN, ;, }, }, double, ya, ;, double, yb, ;, if, (, y]
[?, pow, (, -, x, ,, y, ), :, -, pow, (, -, x, ,, y, ), ;, }, else]
[==, 0, ?, pow, (, -, x, ,, y, ), :, -, pow, (, -, x, ,, y, ), ;]
[), ==, 0, ?, pow, (, -, x, ,, y, ), :, -, pow, (, -, x, ,, y, )]
[&, 1, ), ==, 0, ?, pow, (, -, x, ,, y, ), :, -, pow, (, -, x, ,]
[&, 1, ), ==, 0, ?, pow, (, -, x, ,, y, ), :, -, pow, (, -, x, ,]
[), ==, 0, ?, pow, (, -, x, ,, y, ), :, -, pow, (, -, x, ,, y, )]
[?, pow, (, -, x, ,, y, ), :, -, pow, (, -, x, ,, y, ), ;, }, else]
[:, -, pow, (, -, x, ,, y, ), ;, }, else, {, return, Double, ., NaN, ;, }, }]
[,, y, ), :, -, pow, (, -, x, ,, y, ), ;, }, else, {, return, Double, ., NaN]
[,, y, ), :, -, pow, (, -, x, ,, y, ), ;, }, else, {, return, Double, ., NaN]
[), :, -, pow, (, -, x, ,, y, ), ;, }, else, {, return, Double, ., NaN, ;, }]
[;, }, else, {, return, Double, ., NaN, ;, }, }, double, ya, ;, double, yb, ;, if, (, y]
[;, }, else, {, return, Double, ., NaN, ;, }, }, double, ya, ;, double, yb, ;, if, (, y]
[,, y, ), ;, }, else, {, return, Double, ., NaN, ;, }, }, double, ya, ;, double, yb, ;]
[,, y, ), ;, }, else, {, return, Double, ., NaN, ;, }, }, double, ya, ;, double, yb, ;]
[), ;, }, else, {, return, Double, ., NaN, ;, }, }, double, ya, ;, double, yb, ;, if, (]
[;, }, }, double, ya, ;, double, yb, ;, if, (, y, <, 8e298, &&, y, >, -, 8e298, )]
[., NaN, ;, }, }, double, ya, ;, double, yb, ;, if, (, y, <, 8e298, &&, y, >, -]
[), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +, tmp1, -, tmp1, ;, yb, =, y]
[&&, y, >, -, 8e298, ), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +, tmp1, -]
[<, 8e298, &&, y, >, -, 8e298, ), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +]
[&&, y, >, -, 8e298, ), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +, tmp1, -]
[), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +, tmp1, -, tmp1, ;, yb, =, y]
[>, -, 8e298, ), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +, tmp1, -, tmp1, ;]
[), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +, tmp1, -, tmp1, ;, yb, =, y]
[), {, double, tmp1, =, y, *, HEX_40000000, ;, ya, =, y, +, tmp1, -, tmp1, ;, yb, =, y]
[;, ya, =, y, +, tmp1, -, tmp1, ;, yb, =, y, -, ya, ;, }, else, {, double, tmp1]
[*, HEX_40000000, ;, ya, =, y, +, tmp1, -, tmp1, ;, yb, =, y, -, ya, ;, }, else, {]
[;, ya, =, y, +, tmp1, -, tmp1, ;, yb, =, y, -, ya, ;, }, else, {, double, tmp1]
[=, y, +, tmp1, -, tmp1, ;, yb, =, y, -, ya, ;, }, else, {, double, tmp1, =, y]
[;, yb, =, y, -, ya, ;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =]
[-, tmp1, ;, yb, =, y, -, ya, ;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double]
[+, tmp1, -, tmp1, ;, yb, =, y, -, ya, ;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10]
[-, tmp1, ;, yb, =, y, -, ya, ;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double]
[;, yb, =, y, -, ya, ;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =]
[=, y, -, ya, ;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *]
[;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =]
[-, ya, ;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;]
[;, }, else, {, double, tmp1, =, y, *, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =]
[;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =, (, tmp1, +, tmp2, -, tmp1, ), *, HEX_40000000, *]
[*, 9.31322574615478515625E-10, ;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =, (, tmp1, +, tmp2, -, tmp1, ), *]
[;, double, tmp2, =, tmp1, *, 9.31322574615478515625E-10, ;, ya, =, (, tmp1, +, tmp2, -, tmp1, ), *, HEX_40000000, *]
[;, ya, =, (, tmp1, +, tmp2, -, tmp1, ), *, HEX_40000000, *, HEX_40000000, ;, yb, =, y, -, ya]
[*, 9.31322574615478515625E-10, ;, ya, =, (, tmp1, +, tmp2, -, tmp1, ), *, HEX_40000000, *, HEX_40000000, ;, yb, =, y]
[;, ya, =, (, tmp1, +, tmp2, -, tmp1, ), *, HEX_40000000, *, HEX_40000000, ;, yb, =, y, -, ya]
[=, (, tmp1, +, tmp2, -, tmp1, ), *, HEX_40000000, *, HEX_40000000, ;, yb, =, y, -, ya, ;, }]
[;, yb, =, y, -, ya, ;, }, final, double, lores, =, log, (, x, ,, lns, ), ;, if]
[*, HEX_40000000, ;, yb, =, y, -, ya, ;, }, final, double, lores, =, log, (, x, ,, lns, )]
[*, HEX_40000000, *, HEX_40000000, ;, yb, =, y, -, ya, ;, }, final, double, lores, =, log, (, x, ,]
[), *, HEX_40000000, *, HEX_40000000, ;, yb, =, y, -, ya, ;, }, final, double, lores, =, log, (, x]
[-, tmp1, ), *, HEX_40000000, *, HEX_40000000, ;, yb, =, y, -, ya, ;, }, final, double, lores, =, log]
[+, tmp2, -, tmp1, ), *, HEX_40000000, *, HEX_40000000, ;, yb, =, y, -, ya, ;, }, final, double, lores]
[-, tmp1, ), *, HEX_40000000, *, HEX_40000000, ;, yb, =, y, -, ya, ;, }, final, double, lores, =, log]
[), *, HEX_40000000, *, HEX_40000000, ;, yb, =, y, -, ya, ;, }, final, double, lores, =, log, (, x]
[*, HEX_40000000, ;, yb, =, y, -, ya, ;, }, final, double, lores, =, log, (, x, ,, lns, )]
[;, yb, =, y, -, ya, ;, }, final, double, lores, =, log, (, x, ,, lns, ), ;, if]
[=, y, -, ya, ;, }, final, double, lores, =, log, (, x, ,, lns, ), ;, if, (, Double]
[;, }, final, double, lores, =, log, (, x, ,, lns, ), ;, if, (, Double, ., isInfinite, (, lores]
[-, ya, ;, }, final, double, lores, =, log, (, x, ,, lns, ), ;, if, (, Double, ., isInfinite]
[;, }, final, double, lores, =, log, (, x, ,, lns, ), ;, if, (, Double, ., isInfinite, (, lores]
[;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, double, lna, =, lns, []
[,, lns, ), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, double, lna]
[), ;, if, (, Double, ., isInfinite, (, lores, ), ), {, return, lores, ;, }, double, lna, =, lns]
[), {, return, lores, ;, }, double, lna, =, lns, [, 0, ], ;, double, lnb, =, lns, [, 1]
[., isInfinite, (, lores, ), ), {, return, lores, ;, }, double, lna, =, lns, [, 0, ], ;, double]
[), ), {, return, lores, ;, }, double, lna, =, lns, [, 0, ], ;, double, lnb, =, lns, []
[;, }, double, lna, =, lns, [, 0, ], ;, double, lnb, =, lns, [, 1, ], ;, double, tmp1]
[;, double, lnb, =, lns, [, 1, ], ;, double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =, lna]
[[, 0, ], ;, double, lnb, =, lns, [, 1, ], ;, double, tmp1, =, lna, *, HEX_40000000, ;, double]
[], ;, double, lnb, =, lns, [, 1, ], ;, double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =]
[;, double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =, lna, +, tmp1, -, tmp1, ;, lnb, +=, lna]
[[, 1, ], ;, double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =, lna, +, tmp1, -, tmp1, ;]
[], ;, double, tmp1, =, lna, *, HEX_40000000, ;, double, tmp2, =, lna, +, tmp1, -, tmp1, ;, lnb, +=]
[;, double, tmp2, =, lna, +, tmp1, -, tmp1, ;, lnb, +=, lna, -, tmp2, ;, lna, =, tmp2, ;]
[*, HEX_40000000, ;, double, tmp2, =, lna, +, tmp1, -, tmp1, ;, lnb, +=, lna, -, tmp2, ;, lna, =]
[;, double, tmp2, =, lna, +, tmp1, -, tmp1, ;, lnb, +=, lna, -, tmp2, ;, lna, =, tmp2, ;]
[;, lnb, +=, lna, -, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final]
[-, tmp1, ;, lnb, +=, lna, -, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =, lna, *, ya]
[+, tmp1, -, tmp1, ;, lnb, +=, lna, -, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =, lna]
[-, tmp1, ;, lnb, +=, lna, -, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =, lna, *, ya]
[;, lnb, +=, lna, -, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final]
[+=, lna, -, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final, double, ab]
[;, lna, =, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final, double, ab, =, lna, *, yb]
[-, tmp2, ;, lna, =, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final, double, ab, =, lna]
[;, lna, =, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final, double, ab, =, lna, *, yb]
[=, tmp2, ;, final, double, aa, =, lna, *, ya, ;, final, double, ab, =, lna, *, yb, +, lnb]
[;, final, double, aa, =, lna, *, ya, ;, final, double, ab, =, lna, *, yb, +, lnb, *, ya]
[;, final, double, ab, =, lna, *, yb, +, lnb, *, ya, +, lnb, *, yb, ;, lna, =, aa]
[*, ya, ;, final, double, ab, =, lna, *, yb, +, lnb, *, ya, +, lnb, *, yb, ;, lna]
[;, final, double, ab, =, lna, *, yb, +, lnb, *, ya, +, lnb, *, yb, ;, lna, =, aa]
[;, lna, =, aa, +, ab, ;, lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z]
[+, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -, (, lna, -, aa, -, ab]
[+, lnb, *, ya, +, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -, (, lna]
[*, yb, +, lnb, *, ya, +, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -]
[+, lnb, *, ya, +, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -, (, lna]
[+, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -, (, lna, -, aa, -, ab]
[*, ya, +, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -, (, lna, -, aa]
[+, lnb, *, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -, (, lna, -, aa, -, ab]
[;, lna, =, aa, +, ab, ;, lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z]
[*, yb, ;, lna, =, aa, +, ab, ;, lnb, =, -, (, lna, -, aa, -, ab, ), ;]
[;, lna, =, aa, +, ab, ;, lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z]
[=, aa, +, ab, ;, lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z, =, 1.0]
[;, lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z]
[+, ab, ;, lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z, =, 1.0, /, 120.0]
[;, lnb, =, -, (, lna, -, aa, -, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z]
[=, -, (, lna, -, aa, -, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z, =, z]
[;, double, z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, ), ;]
[;, double, z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, ), ;]
[), ;, double, z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, )]
[-, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (, 1.0, /]
[-, aa, -, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (]
[-, ab, ), ;, double, z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (, 1.0, /]
[), ;, double, z, =, 1.0, /, 120.0, ;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, )]
[;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +, (]
[/, 120.0, ;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, ), ;, z, =, z, *, lnb]
[;, z, =, z, *, lnb, +, (, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +, (]
[=, z, *, lnb, +, (, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +, (, 1.0, /]
[;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +, 0.5]
[+, (, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z]
[*, lnb, +, (, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, )]
[+, (, 1.0, /, 24.0, ), ;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z]
[;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +, 0.5]
[), ;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +]
[/, 24.0, ), ;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *]
[), ;, z, =, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +]
[=, z, *, lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +, 0.5, ;, z]
[;, z, =, z, *, lnb, +, 0.5, ;, z, =, z, *, lnb, +, 1.0, ;, z, =, z]
[+, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +, 0.5, ;, z, =, z, *, lnb]
[*, lnb, +, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +, 0.5, ;, z, =, z]
[+, (, 1.0, /, 6.0, ), ;, z, =, z, *, lnb, +, 0.5, ;, z, =, z, *, lnb]
[;, z, =, z, *, lnb, +, 0.5, ;, z, =, z, *, lnb, +, 1.0, ;, z, =, z]
[), ;, z, =, z, *, lnb, +, 0.5, ;, z, =, z, *, lnb, +, 1.0, ;, z, =]
[/, 6.0, ), ;, z, =, z, *, lnb, +, 0.5, ;, z, =, z, *, lnb, +, 1.0, ;]
[), ;, z, =, z, *, lnb, +, 0.5, ;, z, =, z, *, lnb, +, 1.0, ;, z, =]
[=, z, *, lnb, +, 0.5, ;, z, =, z, *, lnb, +, 1.0, ;, z, =, z, *, lnb]
[;, z, =, z, *, lnb, +, 1.0, ;, z, =, z, *, lnb, ;, final, double, result, =, exp]
[+, 0.5, ;, z, =, z, *, lnb, +, 1.0, ;, z, =, z, *, lnb, ;, final, double, result]
[*, lnb, +, 0.5, ;, z, =, z, *, lnb, +, 1.0, ;, z, =, z, *, lnb, ;, final]
[+, 0.5, ;, z, =, z, *, lnb, +, 1.0, ;, z, =, z, *, lnb, ;, final, double, result]
[;, z, =, z, *, lnb, +, 1.0, ;, z, =, z, *, lnb, ;, final, double, result, =, exp]
[=, z, *, lnb, +, 1.0, ;, z, =, z, *, lnb, ;, final, double, result, =, exp, (, lna]
[;, z, =, z, *, lnb, ;, final, double, result, =, exp, (, lna, ,, z, ,, null, ), ;]
[+, 1.0, ;, z, =, z, *, lnb, ;, final, double, result, =, exp, (, lna, ,, z, ,, null]
[*, lnb, +, 1.0, ;, z, =, z, *, lnb, ;, final, double, result, =, exp, (, lna, ,, z]
[+, 1.0, ;, z, =, z, *, lnb, ;, final, double, result, =, exp, (, lna, ,, z, ,, null]
[;, z, =, z, *, lnb, ;, final, double, result, =, exp, (, lna, ,, z, ,, null, ), ;]
[=, z, *, lnb, ;, final, double, result, =, exp, (, lna, ,, z, ,, null, ), ;, return, result]
[;, final, double, result, =, exp, (, lna, ,, z, ,, null, ), ;, return, result, ;, }, public, static]
[*, lnb, ;, final, double, result, =, exp, (, lna, ,, z, ,, null, ), ;, return, result, ;, }]
[;, final, double, result, =, exp, (, lna, ,, z, ,, null, ), ;, return, result, ;, }, public, static]
[;, return, result, ;, }, public, static, double, pow, (, double, d, ,, int, e, ), {, if, (, e]
[,, z, ,, null, ), ;, return, result, ;, }, public, static, double, pow, (, double, d, ,, int, e]
[,, null, ), ;, return, result, ;, }, public, static, double, pow, (, double, d, ,, int, e, ), {]
[), ;, return, result, ;, }, public, static, double, pow, (, double, d, ,, int, e, ), {, if, (]
[;, }, public, static, double, pow, (, double, d, ,, int, e, ), {, if, (, e, ==, 0, )]
[), {, return, 1.0, ;, }, else, if, (, e, <, 0, ), {, e, =, -, e, ;, d]
[==, 0, ), {, return, 1.0, ;, }, else, if, (, e, <, 0, ), {, e, =, -, e]
[), {, return, 1.0, ;, }, else, if, (, e, <, 0, ), {, e, =, -, e, ;, d]
[;, }, else, if, (, e, <, 0, ), {, e, =, -, e, ;, d, =, 1.0, /, d]
[), {, e, =, -, e, ;, d, =, 1.0, /, d, ;, }, final, int, splitFactor, =, 0x8000001, ;]
[<, 0, ), {, e, =, -, e, ;, d, =, 1.0, /, d, ;, }, final, int, splitFactor, =]
[), {, e, =, -, e, ;, d, =, 1.0, /, d, ;, }, final, int, splitFactor, =, 0x8000001, ;]
[=, -, e, ;, d, =, 1.0, /, d, ;, }, final, int, splitFactor, =, 0x8000001, ;, final, double, cd]
[;, d, =, 1.0, /, d, ;, }, final, int, splitFactor, =, 0x8000001, ;, final, double, cd, =, splitFactor, *]
[;, d, =, 1.0, /, d, ;, }, final, int, splitFactor, =, 0x8000001, ;, final, double, cd, =, splitFactor, *]
[=, 1.0, /, d, ;, }, final, int, splitFactor, =, 0x8000001, ;, final, double, cd, =, splitFactor, *, d, ;]
[;, }, final, int, splitFactor, =, 0x8000001, ;, final, double, cd, =, splitFactor, *, d, ;, final, double, d1High, =]
[/, d, ;, }, final, int, splitFactor, =, 0x8000001, ;, final, double, cd, =, splitFactor, *, d, ;, final, double]
[;, }, final, int, splitFactor, =, 0x8000001, ;, final, double, cd, =, splitFactor, *, d, ;, final, double, d1High, =]
[;, final, double, cd, =, splitFactor, *, d, ;, final, double, d1High, =, cd, -, (, cd, -, d, )]
[;, final, double, d1High, =, cd, -, (, cd, -, d, ), ;, final, double, d1Low, =, d, -, d1High]
[*, d, ;, final, double, d1High, =, cd, -, (, cd, -, d, ), ;, final, double, d1Low, =, d]
[;, final, double, d1High, =, cd, -, (, cd, -, d, ), ;, final, double, d1Low, =, d, -, d1High]
[;, final, double, d1Low, =, d, -, d1High, ;, double, resultHigh, =, 1, ;, double, resultLow, =, 0, ;, double]
[-, (, cd, -, d, ), ;, final, double, d1Low, =, d, -, d1High, ;, double, resultHigh, =, 1, ;]
[;, final, double, d1Low, =, d, -, d1High, ;, double, resultHigh, =, 1, ;, double, resultLow, =, 0, ;, double]
[), ;, final, double, d1Low, =, d, -, d1High, ;, double, resultHigh, =, 1, ;, double, resultLow, =, 0, ;]
[-, d, ), ;, final, double, d1Low, =, d, -, d1High, ;, double, resultHigh, =, 1, ;, double, resultLow, =]
[), ;, final, double, d1Low, =, d, -, d1High, ;, double, resultHigh, =, 1, ;, double, resultLow, =, 0, ;]
[;, double, resultHigh, =, 1, ;, double, resultLow, =, 0, ;, double, d2p, =, d, ;, double, d2pHigh, =, d1High]
[-, d1High, ;, double, resultHigh, =, 1, ;, double, resultLow, =, 0, ;, double, d2p, =, d, ;, double, d2pHigh]
[;, double, resultHigh, =, 1, ;, double, resultLow, =, 0, ;, double, d2p, =, d, ;, double, d2pHigh, =, d1High]
[;, double, resultLow, =, 0, ;, double, d2p, =, d, ;, double, d2pHigh, =, d1High, ;, double, d2pLow, =, d1Low]
[;, double, d2p, =, d, ;, double, d2pHigh, =, d1High, ;, double, d2pLow, =, d1Low, ;, while, (, e, !=]
[;, double, d2pHigh, =, d1High, ;, double, d2pLow, =, d1Low, ;, while, (, e, !=, 0, ), {, if, (]
[;, double, d2pLow, =, d1Low, ;, while, (, e, !=, 0, ), {, if, (, (, e, &, 0x1, )]
[;, while, (, e, !=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, final]
[), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, final, double, tmpHigh, =, resultHigh, *, d2p]
[!=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, final, double, tmpHigh, =, resultHigh]
[), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, final, double, tmpHigh, =, resultHigh, *, d2p]
[), {, final, double, tmpHigh, =, resultHigh, *, d2p, ;, final, double, cRH, =, splitFactor, *, resultHigh, ;, final, double]
[!=, 0, ), {, final, double, tmpHigh, =, resultHigh, *, d2p, ;, final, double, cRH, =, splitFactor, *, resultHigh, ;]
[), !=, 0, ), {, final, double, tmpHigh, =, resultHigh, *, d2p, ;, final, double, cRH, =, splitFactor, *, resultHigh]
[&, 0x1, ), !=, 0, ), {, final, double, tmpHigh, =, resultHigh, *, d2p, ;, final, double, cRH, =, splitFactor]
[), !=, 0, ), {, final, double, tmpHigh, =, resultHigh, *, d2p, ;, final, double, cRH, =, splitFactor, *, resultHigh]
[), {, final, double, tmpHigh, =, resultHigh, *, d2p, ;, final, double, cRH, =, splitFactor, *, resultHigh, ;, final, double]
[;, final, double, cRH, =, splitFactor, *, resultHigh, ;, final, double, rHH, =, cRH, -, (, cRH, -, resultHigh, )]
[*, d2p, ;, final, double, cRH, =, splitFactor, *, resultHigh, ;, final, double, rHH, =, cRH, -, (, cRH, -]
[;, final, double, cRH, =, splitFactor, *, resultHigh, ;, final, double, rHH, =, cRH, -, (, cRH, -, resultHigh, )]
[;, final, double, rHH, =, cRH, -, (, cRH, -, resultHigh, ), ;, final, double, rHL, =, resultHigh, -, rHH]
[*, resultHigh, ;, final, double, rHH, =, cRH, -, (, cRH, -, resultHigh, ), ;, final, double, rHL, =, resultHigh]
[;, final, double, rHH, =, cRH, -, (, cRH, -, resultHigh, ), ;, final, double, rHL, =, resultHigh, -, rHH]
[;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (, (]
[-, (, cRH, -, resultHigh, ), ;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL]
[;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (, (]
[), ;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (]
[-, resultHigh, ), ;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -]
[), ;, final, double, rHL, =, resultHigh, -, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (]
[;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL]
[-, rHH, ;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (, (, tmpHigh, -, rHH, *, d2pHigh, )]
[;, final, double, tmpLow, =, rHL, *, d2pLow, -, (, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL]
[;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh, *]
[-, (, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, )]
[*, d2pLow, -, (, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *]
[-, (, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, )]
[;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh, *]
[), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh]
[-, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }, final]
[), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }]
[-, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p]
[), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *]
[-, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;]
[), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *]
[*, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =]
[), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *]
[), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }]
[*, d2pHigh, ), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow]
[), -, rHH, *, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }]
[), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh]
[*, d2pLow, ), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh]
[), ;, resultHigh, =, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh]
[=, tmpHigh, ;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh, *, d2p, ;]
[;, resultLow, =, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh, *, d2p, ;, final, double]
[=, resultLow, *, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh, *, d2p, ;, final, double, cD2pH, =]
[;, }, final, double, tmpHigh, =, d2pHigh, *, d2p, ;, final, double, cD2pH, =, splitFactor, *, d2pHigh, ;, final, double]
[+, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh, *, d2p, ;, final, double, cD2pH, =, splitFactor, *, d2pHigh, ;]
[*, d2p, +, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh, *, d2p, ;, final, double, cD2pH, =, splitFactor, *]
[+, tmpLow, ;, }, final, double, tmpHigh, =, d2pHigh, *, d2p, ;, final, double, cD2pH, =, splitFactor, *, d2pHigh, ;]
[;, }, final, double, tmpHigh, =, d2pHigh, *, d2p, ;, final, double, cD2pH, =, splitFactor, *, d2pHigh, ;, final, double]
[;, final, double, cD2pH, =, splitFactor, *, d2pHigh, ;, final, double, d2pHH, =, cD2pH, -, (, cD2pH, -, d2pHigh, )]
[*, d2p, ;, final, double, cD2pH, =, splitFactor, *, d2pHigh, ;, final, double, d2pHH, =, cD2pH, -, (, cD2pH, -]
[;, final, double, cD2pH, =, splitFactor, *, d2pHigh, ;, final, double, d2pHH, =, cD2pH, -, (, cD2pH, -, d2pHigh, )]
[;, final, double, d2pHH, =, cD2pH, -, (, cD2pH, -, d2pHigh, ), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH]
[*, d2pHigh, ;, final, double, d2pHH, =, cD2pH, -, (, cD2pH, -, d2pHigh, ), ;, final, double, d2pHL, =, d2pHigh]
[;, final, double, d2pHH, =, cD2pH, -, (, cD2pH, -, d2pHigh, ), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH]
[;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (, (]
[-, (, cD2pH, -, d2pHigh, ), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL]
[;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (, (]
[), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (]
[-, d2pHigh, ), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -]
[), ;, final, double, d2pHL, =, d2pHigh, -, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (]
[;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL]
[-, d2pHH, ;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (, (, tmpHigh, -, d2pHH, *, d2pHigh, )]
[;, final, double, tmpLow, =, d2pHL, *, d2pLow, -, (, (, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL]
[;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow]
[-, (, (, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, )]
[*, d2pLow, -, (, (, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -, d2pHH, *]
[-, (, (, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, )]
[;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow]
[), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;]
[-, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH]
[), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (]
[-, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh]
[), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;]
[-, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =]
[), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;]
[*, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *]
[), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;]
[), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (]
[*, d2pHigh, ), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH]
[), -, d2pHH, *, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (]
[), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;]
[*, d2pLow, ), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh]
[), ;, final, double, cTmpH, =, splitFactor, *, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;]
[;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (]
[*, tmpHigh, ;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow]
[;, d2pHigh, =, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (]
[=, cTmpH, -, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -]
[;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow]
[-, (, cTmpH, -, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, )]
[;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow]
[), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +]
[-, tmpHigh, ), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =]
[), ;, d2pLow, =, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +]
[=, d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;, e]
[;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e, >, >, 1, ;, }, return, resultHigh, +, resultLow, ;]
[+, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e, >, >, 1, ;]
[+, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e, >, >]
[*, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e]
[+, tmpLow, +, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e, >, >]
[+, (, tmpHigh, -, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e, >, >, 1, ;]
[;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e, >, >, 1, ;, }, return, resultHigh, +, resultLow, ;]
[), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e, >, >, 1, ;, }, return, resultHigh, +, resultLow]
[-, d2pHigh, ), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e, >, >, 1, ;, }, return, resultHigh]
[), ;, d2p, =, d2pHigh, +, d2pLow, ;, e, =, e, >, >, 1, ;, }, return, resultHigh, +, resultLow]
[=, d2pHigh, +, d2pLow, ;, e, =, e, >, >, 1, ;, }, return, resultHigh, +, resultLow, ;, }, private]
[;, e, =, e, >, >, 1, ;, }, return, resultHigh, +, resultLow, ;, }, private, static, double, polySine, (]
[+, d2pLow, ;, e, =, e, >, >, 1, ;, }, return, resultHigh, +, resultLow, ;, }, private, static, double]
[;, e, =, e, >, >, 1, ;, }, return, resultHigh, +, resultLow, ;, }, private, static, double, polySine, (]
[=, e, >, >, 1, ;, }, return, resultHigh, +, resultLow, ;, }, private, static, double, polySine, (, final, double]
[;, }, return, resultHigh, +, resultLow, ;, }, private, static, double, polySine, (, final, double, x, ), {, double, x2]
[>, >, 1, ;, }, return, resultHigh, +, resultLow, ;, }, private, static, double, polySine, (, final, double, x, )]
[;, }, return, resultHigh, +, resultLow, ;, }, private, static, double, polySine, (, final, double, x, ), {, double, x2]
[;, }, private, static, double, polySine, (, final, double, x, ), {, double, x2, =, x, *, x, ;, double]
[+, resultLow, ;, }, private, static, double, polySine, (, final, double, x, ), {, double, x2, =, x, *, x]
[;, }, private, static, double, polySine, (, final, double, x, ), {, double, x2, =, x, *, x, ;, double]
[;, double, p, =, 2.7553817452272217E-6, ;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *, x2]
[*, x, ;, double, p, =, 2.7553817452272217E-6, ;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =, p]
[;, double, p, =, 2.7553817452272217E-6, ;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *, x2]
[;, p, =, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =]
[=, p, *, x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *]
[;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =]
[+, -, 1.9841269659586505E-4, ;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666]
[*, x2, +, -, 1.9841269659586505E-4, ;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +]
[+, -, 1.9841269659586505E-4, ;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666]
[;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =]
[;, p, =, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =]
[=, p, *, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =, p, *]
[;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =, p, *, x2, *, x, ;, return, p]
[+, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =, p, *, x2, *, x, ;]
[*, x2, +, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =, p, *, x2, *]
[+, 0.008333333333329196, ;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =, p, *, x2, *, x, ;]
[;, p, =, p, *, x2, +, -, 0.16666666666666666, ;, p, =, p, *, x2, *, x, ;, return, p]
[=, p, *, x2, +, -, 0.16666666666666666, ;, p, =, p, *, x2, *, x, ;, return, p, ;, }]
[;, p, =, p, *, x2, *, x, ;, return, p, ;, }, private, static, double, polyCosine, (, double, x]
[+, -, 0.16666666666666666, ;, p, =, p, *, x2, *, x, ;, return, p, ;, }, private, static, double, polyCosine]
[*, x2, +, -, 0.16666666666666666, ;, p, =, p, *, x2, *, x, ;, return, p, ;, }, private, static]
[+, -, 0.16666666666666666, ;, p, =, p, *, x2, *, x, ;, return, p, ;, }, private, static, double, polyCosine]
[;, p, =, p, *, x2, *, x, ;, return, p, ;, }, private, static, double, polyCosine, (, double, x]
[;, p, =, p, *, x2, *, x, ;, return, p, ;, }, private, static, double, polyCosine, (, double, x]
[=, p, *, x2, *, x, ;, return, p, ;, }, private, static, double, polyCosine, (, double, x, ), {]
[;, return, p, ;, }, private, static, double, polyCosine, (, double, x, ), {, double, x2, =, x, *, x]
[*, x, ;, return, p, ;, }, private, static, double, polyCosine, (, double, x, ), {, double, x2, =, x]
[*, x2, *, x, ;, return, p, ;, }, private, static, double, polyCosine, (, double, x, ), {, double, x2]
[*, x, ;, return, p, ;, }, private, static, double, polyCosine, (, double, x, ), {, double, x2, =, x]
[;, return, p, ;, }, private, static, double, polyCosine, (, double, x, ), {, double, x2, =, x, *, x]
[;, }, private, static, double, polyCosine, (, double, x, ), {, double, x2, =, x, *, x, ;, double, p]
[;, double, p, =, 2.479773539153719E-5, ;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;, p, =, p, *, x2]
[*, x, ;, double, p, =, 2.479773539153719E-5, ;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;, p, =, p]
[;, double, p, =, 2.479773539153719E-5, ;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;, p, =, p, *, x2]
[;, p, =, p, *, x2, +, -, 0.0013888888689039883, ;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =]
[=, p, *, x2, +, -, 0.0013888888689039883, ;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =, p, *]
[;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =, p, *, x2, +, -, 0.49999999999999994, ;, p, *=]
[+, -, 0.0013888888689039883, ;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =, p, *, x2, +, -, 0.49999999999999994]
[*, x2, +, -, 0.0013888888689039883, ;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =, p, *, x2, +]
[+, -, 0.0013888888689039883, ;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =, p, *, x2, +, -, 0.49999999999999994]
[;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =, p, *, x2, +, -, 0.49999999999999994, ;, p, *=]
[;, p, =, p, *, x2, +, 0.041666666666621166, ;, p, =, p, *, x2, +, -, 0.49999999999999994, ;, p, *=]
[=, p, *, x2, +, 0.041666666666621166, ;, p, =, p, *, x2, +, -, 0.49999999999999994, ;, p, *=, x2, ;]
[;, p, =, p, *, x2, +, -, 0.49999999999999994, ;, p, *=, x2, ;, return, p, ;, }, private, static]
[+, 0.041666666666621166, ;, p, =, p, *, x2, +, -, 0.49999999999999994, ;, p, *=, x2, ;, return, p, ;, }]
[*, x2, +, 0.041666666666621166, ;, p, =, p, *, x2, +, -, 0.49999999999999994, ;, p, *=, x2, ;, return, p]
[+, 0.041666666666621166, ;, p, =, p, *, x2, +, -, 0.49999999999999994, ;, p, *=, x2, ;, return, p, ;, }]
[;, p, =, p, *, x2, +, -, 0.49999999999999994, ;, p, *=, x2, ;, return, p, ;, }, private, static]
[=, p, *, x2, +, -, 0.49999999999999994, ;, p, *=, x2, ;, return, p, ;, }, private, static, double, sinQ]
[;, p, *=, x2, ;, return, p, ;, }, private, static, double, sinQ, (, double, xa, ,, double, xb, )]
[+, -, 0.49999999999999994, ;, p, *=, x2, ;, return, p, ;, }, private, static, double, sinQ, (, double, xa, ,]
[*, x2, +, -, 0.49999999999999994, ;, p, *=, x2, ;, return, p, ;, }, private, static, double, sinQ, (, double]
[+, -, 0.49999999999999994, ;, p, *=, x2, ;, return, p, ;, }, private, static, double, sinQ, (, double, xa, ,]
[;, p, *=, x2, ;, return, p, ;, }, private, static, double, sinQ, (, double, xa, ,, double, xb, )]
[;, p, *=, x2, ;, return, p, ;, }, private, static, double, sinQ, (, double, xa, ,, double, xb, )]
[*=, x2, ;, return, p, ;, }, private, static, double, sinQ, (, double, xa, ,, double, xb, ), {, int]
[;, return, p, ;, }, private, static, double, sinQ, (, double, xa, ,, double, xb, ), {, int, idx, =]
[;, }, private, static, double, sinQ, (, double, xa, ,, double, xb, ), {, int, idx, =, (, int, )]
[;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ]]
[;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ]]
[), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx]
[+, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A]
[), +, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =]
[*, 8.0, ), +, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double]
[), +, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =]
[), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx]
[;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final]
[-, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B]
[;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final]
[[, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx]
[], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;]
[;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final]
[[, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx]
[], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;]
[;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double]
[[, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =, COSINE_TABLE_B, [, idx]
[], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;]
[;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine, (]
[[, idx, ], ;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB]
[], ;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine]
[;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA, =, 1.0, ;]
[[, idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA]
[], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA, =, 1.0]
[;, double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine]
[;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, final, double, temp, =]
[), ;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, final, double, temp]
[;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, final, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2]
[;, final, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;]
[), ;, final, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp]
[;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =]
[*, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;]
[;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =]
[;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, result, ;, double, a, =, 0, ;, double]
[-, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, result, ;, double, a, =, 0]
[), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, result, ;, double, a, =]
[+, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, result, ;, double]
[), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, result, ;, double, a, =]
[;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, result, ;, double, a, =, 0, ;, double]
[+=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, result, ;, double, a, =, 0, ;, double, b, =]
[;, sinEpsA, =, temp2, ;, double, result, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t]
[-, temp2, ;, sinEpsA, =, temp2, ;, double, result, ;, double, a, =, 0, ;, double, b, =, 0, ;]
[;, sinEpsA, =, temp2, ;, double, result, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t]
[=, temp2, ;, double, result, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t, =, sintA]
[;, double, result, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t, =, sintA, ;, double]
[;, double, b, =, 0, ;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d]
[;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -, (, c, -]
[;, double, c, =, a, +, t, ;, double, d, =, -, (, c, -, a, -, t, ), ;]
[;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b]
[+, t, ;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b]
[;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b]
[;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a]
[;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a]
[), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;]
[), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =]
[=, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t]
[;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d]
[=, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -]
[;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a]
[+, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c]
[;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a]
[=, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[*, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[=, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA]
[;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA]
[), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *]
[), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +]
[=, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB]
[;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b]
[=, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b]
[;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB]
[+, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB]
[;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB]
[=, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA]
[;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if]
[+, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB]
[+, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB]
[+, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB]
[*, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB]
[+, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB]
[;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if]
[*, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB]
[;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if]
[=, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb]
[;, if, (, xb, !=, 0.0, ), {, t, =, (, (, costA, +, costB, ), *, (, cosEpsA, +]
[+, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (, costA, +, costB, )]
[+, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (]
[+, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {]
[+, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0]
[+, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {]
[+, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (]
[*, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =]
[+, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (]
[+, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (, costA, +, costB, )]
[*, cosEpsB, +, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (, costA, +]
[+, costB, *, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (, costA, +, costB, )]
[;, if, (, xb, !=, 0.0, ), {, t, =, (, (, costA, +, costB, ), *, (, cosEpsA, +]
[*, sinEpsB, ;, if, (, xb, !=, 0.0, ), {, t, =, (, (, costA, +, costB, ), *, (]
[;, if, (, xb, !=, 0.0, ), {, t, =, (, (, costA, +, costB, ), *, (, cosEpsA, +]
[), {, t, =, (, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +]
[!=, 0.0, ), {, t, =, (, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (]
[), {, t, =, (, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +]
[=, (, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[*, xb, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;]
[), *, xb, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, )]
[-, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +]
[*, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *]
[), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), )]
[+, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB]
[), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), )]
[-, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +]
[), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a]
[+, cosEpsB, ), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c]
[), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a]
[), *, xb, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, )]
[*, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +, t, ;, d, =, -, (]
[), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +, t, ;, d, =, -]
[+, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +, t, ;, d]
[), *, (, sinEpsA, +, sinEpsB, ), ), *, xb, ;, c, =, a, +, t, ;, d, =, -]
[), *, xb, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, )]
[), ), *, xb, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t]
[+, sinEpsB, ), ), *, xb, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a]
[), ), *, xb, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[=, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[;, a, =, c, ;, b, =, b, +, d, ;, }, result, =, a, +, b, ;, return, result]
[;, a, =, c, ;, b, =, b, +, d, ;, }, result, =, a, +, b, ;, return, result]
[), ;, a, =, c, ;, b, =, b, +, d, ;, }, result, =, a, +, b, ;, return]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, }, result, =, a, +, b]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, }, result, =, a]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, }, result, =, a, +, b]
[), ;, a, =, c, ;, b, =, b, +, d, ;, }, result, =, a, +, b, ;, return]
[=, c, ;, b, =, b, +, d, ;, }, result, =, a, +, b, ;, return, result, ;, }]
[;, b, =, b, +, d, ;, }, result, =, a, +, b, ;, return, result, ;, }, private, static]
[=, b, +, d, ;, }, result, =, a, +, b, ;, return, result, ;, }, private, static, double, cosQ]
[;, }, result, =, a, +, b, ;, return, result, ;, }, private, static, double, cosQ, (, double, xa, ,]
[+, d, ;, }, result, =, a, +, b, ;, return, result, ;, }, private, static, double, cosQ, (, double]
[;, }, result, =, a, +, b, ;, return, result, ;, }, private, static, double, cosQ, (, double, xa, ,]
[=, a, +, b, ;, return, result, ;, }, private, static, double, cosQ, (, double, xa, ,, double, xb, )]
[;, return, result, ;, }, private, static, double, cosQ, (, double, xa, ,, double, xb, ), {, final, double, pi2a]
[+, b, ;, return, result, ;, }, private, static, double, cosQ, (, double, xa, ,, double, xb, ), {, final]
[;, return, result, ;, }, private, static, double, cosQ, (, double, xa, ,, double, xb, ), {, final, double, pi2a]
[;, }, private, static, double, cosQ, (, double, xa, ,, double, xb, ), {, final, double, pi2a, =, 1.5707963267948966, ;]
[;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (]
[;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (, a, -, pi2a, +, xa, )]
[;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, return]
[-, xa, ;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb]
[;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, return]
[;, b, +=, pi2b, -, xb, ;, return, sinQ, (, a, ,, b, ), ;, }, private, static, double, tanQ]
[;, b, +=, pi2b, -, xb, ;, return, sinQ, (, a, ,, b, ), ;, }, private, static, double, tanQ]
[), ;, b, +=, pi2b, -, xb, ;, return, sinQ, (, a, ,, b, ), ;, }, private, static, double]
[+, xa, ), ;, b, +=, pi2b, -, xb, ;, return, sinQ, (, a, ,, b, ), ;, }, private]
[-, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, return, sinQ, (, a, ,, b, ), ;]
[+, xa, ), ;, b, +=, pi2b, -, xb, ;, return, sinQ, (, a, ,, b, ), ;, }, private]
[), ;, b, +=, pi2b, -, xb, ;, return, sinQ, (, a, ,, b, ), ;, }, private, static, double]
[+=, pi2b, -, xb, ;, return, sinQ, (, a, ,, b, ), ;, }, private, static, double, tanQ, (, double]
[;, return, sinQ, (, a, ,, b, ), ;, }, private, static, double, tanQ, (, double, xa, ,, double, xb]
[-, xb, ;, return, sinQ, (, a, ,, b, ), ;, }, private, static, double, tanQ, (, double, xa, ,]
[;, return, sinQ, (, a, ,, b, ), ;, }, private, static, double, tanQ, (, double, xa, ,, double, xb]
[;, }, private, static, double, tanQ, (, double, xa, ,, double, xb, ,, boolean, cotanFlag, ), {, int, idx, =]
[,, b, ), ;, }, private, static, double, tanQ, (, double, xa, ,, double, xb, ,, boolean, cotanFlag, ), {]
[), ;, }, private, static, double, tanQ, (, double, xa, ,, double, xb, ,, boolean, cotanFlag, ), {, int, idx]
[;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ]]
[;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ]]
[), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx]
[+, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A]
[), +, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =]
[*, 8.0, ), +, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double]
[), +, 0.5, ), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =]
[), ;, final, double, epsilon, =, xa, -, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx]
[;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final]
[-, EIGHTHS, [, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B]
[;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final]
[[, idx, ], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx]
[], ;, final, double, sintA, =, SINE_TABLE_A, [, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;]
[;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final]
[[, idx, ], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx]
[], ;, final, double, sintB, =, SINE_TABLE_B, [, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;]
[;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double]
[[, idx, ], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =, COSINE_TABLE_B, [, idx]
[], ;, final, double, costA, =, COSINE_TABLE_A, [, idx, ], ;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;]
[;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine, (]
[[, idx, ], ;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB]
[], ;, final, double, costB, =, COSINE_TABLE_B, [, idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine]
[;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA, =, 1.0, ;]
[[, idx, ], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA]
[], ;, double, sinEpsA, =, epsilon, ;, double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA, =, 1.0]
[;, double, sinEpsB, =, polySine, (, epsilon, ), ;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine]
[;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, double, temp, =, sinEpsA]
[), ;, final, double, cosEpsA, =, 1.0, ;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, double, temp, =]
[;, final, double, cosEpsB, =, polyCosine, (, epsilon, ), ;, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =]
[;, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB]
[), ;, double, temp, =, sinEpsA, *, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;]
[;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =]
[*, HEX_40000000, ;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;]
[;, double, temp2, =, (, sinEpsA, +, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =]
[;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, a, =, 0, ;, double, b, =, 0]
[-, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, a, =, 0, ;, double, b]
[), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, a, =, 0, ;, double]
[+, temp, ), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, a, =, 0]
[), -, temp, ;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, a, =, 0, ;, double]
[;, sinEpsB, +=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, a, =, 0, ;, double, b, =, 0]
[+=, sinEpsA, -, temp2, ;, sinEpsA, =, temp2, ;, double, a, =, 0, ;, double, b, =, 0, ;, double]
[;, sinEpsA, =, temp2, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t, =, sintA, ;]
[-, temp2, ;, sinEpsA, =, temp2, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t, =]
[;, sinEpsA, =, temp2, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t, =, sintA, ;]
[=, temp2, ;, double, a, =, 0, ;, double, b, =, 0, ;, double, t, =, sintA, ;, double, c]
[;, double, a, =, 0, ;, double, b, =, 0, ;, double, t, =, sintA, ;, double, c, =, a]
[;, double, b, =, 0, ;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d]
[;, double, t, =, sintA, ;, double, c, =, a, +, t, ;, double, d, =, -, (, c, -]
[;, double, c, =, a, +, t, ;, double, d, =, -, (, c, -, a, -, t, ), ;]
[;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b]
[+, t, ;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b]
[;, double, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b]
[;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a]
[;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a]
[), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;]
[), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =]
[=, c, ;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t]
[;, b, =, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d]
[=, b, +, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -]
[;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a]
[+, d, ;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c]
[;, t, =, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a]
[=, costA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[*, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[=, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA]
[;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA]
[), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *]
[), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +]
[=, c, ;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB]
[;, b, =, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b]
[=, b, +, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b]
[;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB]
[+, d, ;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB]
[;, b, =, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB]
[=, b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA]
[;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double]
[+, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB]
[+, sintA, *, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB]
[+, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB]
[*, cosEpsB, +, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB]
[+, costA, *, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB]
[;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double]
[*, sinEpsB, ;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB]
[;, b, =, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double]
[=, b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =]
[;, double, sina, =, a, +, b, ;, double, sinb, =, -, (, sina, -, a, -, b, ), ;]
[+, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -, (, sina, -, a]
[+, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -]
[+, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;]
[+, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +]
[+, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;]
[+, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -]
[*, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb]
[+, sintB, *, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -]
[+, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -, (, sina, -, a]
[*, cosEpsB, +, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -, (, sina]
[+, costB, *, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -, (, sina, -, a]
[;, double, sina, =, a, +, b, ;, double, sinb, =, -, (, sina, -, a, -, b, ), ;]
[*, sinEpsB, ;, double, sina, =, a, +, b, ;, double, sinb, =, -, (, sina, -, a, -, b]
[;, double, sina, =, a, +, b, ;, double, sinb, =, -, (, sina, -, a, -, b, ), ;]
[;, double, sinb, =, -, (, sina, -, a, -, b, ), ;, a, =, b, =, c, =, d]
[+, b, ;, double, sinb, =, -, (, sina, -, a, -, b, ), ;, a, =, b, =, c]
[;, double, sinb, =, -, (, sina, -, a, -, b, ), ;, a, =, b, =, c, =, d]
[;, a, =, b, =, c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a]
[;, a, =, b, =, c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a]
[), ;, a, =, b, =, c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =]
[-, b, ), ;, a, =, b, =, c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;]
[-, a, -, b, ), ;, a, =, b, =, c, =, d, =, 0.0, ;, t, =, costA, *]
[-, b, ), ;, a, =, b, =, c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;]
[), ;, a, =, b, =, c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =]
[=, b, =, c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a, +, t]
[=, c, =, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a, +, t, ;, d]
[=, d, =, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a, +, t, ;, d, =, -]
[=, 0.0, ;, t, =, costA, *, cosEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c]
[;, t, =, costA, *, cosEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a]
[=, costA, *, cosEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[*, cosEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[=, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[;, a, =, c, ;, b, =, b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =]
[;, a, =, c, ;, b, =, b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =]
[), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;, c]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, -, sintA, *, sinEpsA]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, -, sintA]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, -, sintA, *, sinEpsA]
[), ;, a, =, c, ;, b, =, b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;, c]
[=, c, ;, b, =, b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +]
[;, b, =, b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;]
[=, b, +, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =]
[;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -]
[+, d, ;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (]
[;, t, =, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -]
[=, -, sintA, *, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[*, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;]
[*, sinEpsA, ;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;]
[;, c, =, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =]
[=, a, +, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[+, t, ;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =]
[;, d, =, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +]
[=, -, (, c, -, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;]
[;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +, costA]
[;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +, costA]
[), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, costB, *]
[-, a, -, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +]
[-, t, ), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, costB, *]
[), ;, a, =, c, ;, b, =, b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +]
[=, c, ;, b, =, b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB]
[;, b, =, b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB]
[=, b, +, d, ;, b, =, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB]
[;, b, =, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b]
[+, d, ;, b, =, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b]
[;, b, =, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b]
[=, b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (]
[;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *, sinEpsB, ), ;, double]
[+, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *]
[+, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *]
[+, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *]
[+, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *]
[*, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +]
[+, costA, *, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *]
[+, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *]
[*, cosEpsB, +, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +]
[+, costB, *, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *]
[;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *, sinEpsB, ), ;, double]
[*, cosEpsB, ;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *, sinEpsB, )]
[;, b, =, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *, sinEpsB, ), ;, double]
[=, b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =]
[;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (, cosa, -, a, -, b, ), ;]
[-, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +]
[;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (, cosa, -, a, -, b, ), ;]
[), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (, cosa, -, a, -, b, )]
[+, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (, cosa, -]
[+, sintA, *, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =]
[*, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double]
[+, sintA, *, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =]
[+, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (, cosa, -]
[*, sinEpsB, +, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (]
[+, sintB, *, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (, cosa, -]
[), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (, cosa, -, a, -, b, )]
[*, sinEpsB, ), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (, cosa, -, a, -]
[), ;, double, cosa, =, a, +, b, ;, double, cosb, =, -, (, cosa, -, a, -, b, )]
[;, double, cosb, =, -, (, cosa, -, a, -, b, ), ;, if, (, cotanFlag, ), {, double, tmp]
[+, b, ;, double, cosb, =, -, (, cosa, -, a, -, b, ), ;, if, (, cotanFlag, ), {]
[;, double, cosb, =, -, (, cosa, -, a, -, b, ), ;, if, (, cotanFlag, ), {, double, tmp]
[;, if, (, cotanFlag, ), {, double, tmp, ;, tmp, =, cosa, ;, cosa, =, sina, ;, sina, =, tmp]
[;, if, (, cotanFlag, ), {, double, tmp, ;, tmp, =, cosa, ;, cosa, =, sina, ;, sina, =, tmp]
[), ;, if, (, cotanFlag, ), {, double, tmp, ;, tmp, =, cosa, ;, cosa, =, sina, ;, sina, =]
[-, b, ), ;, if, (, cotanFlag, ), {, double, tmp, ;, tmp, =, cosa, ;, cosa, =, sina, ;]
[-, a, -, b, ), ;, if, (, cotanFlag, ), {, double, tmp, ;, tmp, =, cosa, ;, cosa, =]
[-, b, ), ;, if, (, cotanFlag, ), {, double, tmp, ;, tmp, =, cosa, ;, cosa, =, sina, ;]
[), ;, if, (, cotanFlag, ), {, double, tmp, ;, tmp, =, cosa, ;, cosa, =, sina, ;, sina, =]
[), {, double, tmp, ;, tmp, =, cosa, ;, cosa, =, sina, ;, sina, =, tmp, ;, tmp, =, cosb]
[=, cosa, ;, cosa, =, sina, ;, sina, =, tmp, ;, tmp, =, cosb, ;, cosb, =, sinb, ;, sinb]
[;, cosa, =, sina, ;, sina, =, tmp, ;, tmp, =, cosb, ;, cosb, =, sinb, ;, sinb, =, tmp]
[=, sina, ;, sina, =, tmp, ;, tmp, =, cosb, ;, cosb, =, sinb, ;, sinb, =, tmp, ;, }]
[;, sina, =, tmp, ;, tmp, =, cosb, ;, cosb, =, sinb, ;, sinb, =, tmp, ;, }, double, est]
[=, tmp, ;, tmp, =, cosb, ;, cosb, =, sinb, ;, sinb, =, tmp, ;, }, double, est, =, sina]
[;, tmp, =, cosb, ;, cosb, =, sinb, ;, sinb, =, tmp, ;, }, double, est, =, sina, /, cosa]
[=, cosb, ;, cosb, =, sinb, ;, sinb, =, tmp, ;, }, double, est, =, sina, /, cosa, ;, temp]
[;, cosb, =, sinb, ;, sinb, =, tmp, ;, }, double, est, =, sina, /, cosa, ;, temp, =, est]
[=, sinb, ;, sinb, =, tmp, ;, }, double, est, =, sina, /, cosa, ;, temp, =, est, *, HEX_40000000]
[;, sinb, =, tmp, ;, }, double, est, =, sina, /, cosa, ;, temp, =, est, *, HEX_40000000, ;, double]
[=, tmp, ;, }, double, est, =, sina, /, cosa, ;, temp, =, est, *, HEX_40000000, ;, double, esta, =]
[;, }, double, est, =, sina, /, cosa, ;, temp, =, est, *, HEX_40000000, ;, double, esta, =, (, est]
[;, temp, =, est, *, HEX_40000000, ;, double, esta, =, (, est, +, temp, ), -, temp, ;, double, estb]
[/, cosa, ;, temp, =, est, *, HEX_40000000, ;, double, esta, =, (, est, +, temp, ), -, temp, ;]
[;, temp, =, est, *, HEX_40000000, ;, double, esta, =, (, est, +, temp, ), -, temp, ;, double, estb]
[=, est, *, HEX_40000000, ;, double, esta, =, (, est, +, temp, ), -, temp, ;, double, estb, =, est]
[;, double, esta, =, (, est, +, temp, ), -, temp, ;, double, estb, =, est, -, esta, ;, temp]
[*, HEX_40000000, ;, double, esta, =, (, est, +, temp, ), -, temp, ;, double, estb, =, est, -, esta]
[;, double, esta, =, (, est, +, temp, ), -, temp, ;, double, estb, =, est, -, esta, ;, temp]
[;, double, estb, =, est, -, esta, ;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =, (, cosa, +]
[-, temp, ;, double, estb, =, est, -, esta, ;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =, (]
[), -, temp, ;, double, estb, =, est, -, esta, ;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =]
[+, temp, ), -, temp, ;, double, estb, =, est, -, esta, ;, temp, =, cosa, *, HEX_40000000, ;, double]
[), -, temp, ;, double, estb, =, est, -, esta, ;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =]
[;, double, estb, =, est, -, esta, ;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =, (, cosa, +]
[;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =, (, cosa, +, temp, ), -, temp, ;, double, cosab]
[-, esta, ;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =, (, cosa, +, temp, ), -, temp, ;]
[;, temp, =, cosa, *, HEX_40000000, ;, double, cosaa, =, (, cosa, +, temp, ), -, temp, ;, double, cosab]
[=, cosa, *, HEX_40000000, ;, double, cosaa, =, (, cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa]
[;, double, cosaa, =, (, cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double]
[*, HEX_40000000, ;, double, cosaa, =, (, cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa]
[;, double, cosaa, =, (, cosa, +, temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double]
[;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa, -, esta, *]
[-, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa, -]
[), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa]
[+, temp, ), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -, esta]
[), -, temp, ;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa]
[;, double, cosab, =, cosa, -, cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa, -, esta, *]
[;, double, err, =, (, sina, -, esta, *, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -, estb]
[-, cosaa, ;, double, err, =, (, sina, -, esta, *, cosaa, -, esta, *, cosab, -, estb, *, cosaa]
[;, double, err, =, (, sina, -, esta, *, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -, estb]
[;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb, /, cosa, /, cosa, ;, if, (]
[/, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb, /, cosa, /, cosa, ;]
[), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb, /, cosa, /, cosa]
[-, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb]
[-, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=]
[-, esta, *, cosab, -, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /]
[-, esta, *, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;]
[-, esta, *, cosab, -, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /]
[*, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=]
[-, esta, *, cosab, -, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /]
[-, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=]
[*, cosab, -, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;]
[-, estb, *, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=]
[-, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb]
[*, cosaa, -, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=, -, sina]
[-, estb, *, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb]
[), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb, /, cosa, /, cosa]
[*, cosab, ), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb, /, cosa]
[), /, cosa, ;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb, /, cosa, /, cosa]
[;, err, +=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb, /, cosa, /, cosa, ;, if, (]
[+=, sinb, /, cosa, ;, err, +=, -, sina, *, cosb, /, cosa, /, cosa, ;, if, (, xb, !=]
[;, err, +=, -, sina, *, cosb, /, cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double]
[/, cosa, ;, err, +=, -, sina, *, cosb, /, cosa, /, cosa, ;, if, (, xb, !=, 0.0, )]
[;, err, +=, -, sina, *, cosb, /, cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double]
[+=, -, sina, *, cosb, /, cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =]
[;, if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +, est, *, est, *, xb, ;, if]
[/, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +, est, *, est, *, xb]
[/, cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +, est, *, est]
[*, cosb, /, cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +, est]
[*, cosb, /, cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +, est]
[/, cosa, /, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +, est, *, est]
[/, cosa, ;, if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +, est, *, est, *, xb]
[;, if, (, xb, !=, 0.0, ), {, double, xbadj, =, xb, +, est, *, est, *, xb, ;, if]
[), {, double, xbadj, =, xb, +, est, *, est, *, xb, ;, if, (, cotanFlag, ), {, xbadj, =]
[!=, 0.0, ), {, double, xbadj, =, xb, +, est, *, est, *, xb, ;, if, (, cotanFlag, ), {]
[), {, double, xbadj, =, xb, +, est, *, est, *, xb, ;, if, (, cotanFlag, ), {, xbadj, =]
[;, if, (, cotanFlag, ), {, xbadj, =, -, xbadj, ;, }, err, +=, xbadj, ;, }, return, est, +]
[+, est, *, est, *, xb, ;, if, (, cotanFlag, ), {, xbadj, =, -, xbadj, ;, }, err, +=]
[;, if, (, cotanFlag, ), {, xbadj, =, -, xbadj, ;, }, err, +=, xbadj, ;, }, return, est, +]
[*, xb, ;, if, (, cotanFlag, ), {, xbadj, =, -, xbadj, ;, }, err, +=, xbadj, ;, }, return]
[*, est, *, xb, ;, if, (, cotanFlag, ), {, xbadj, =, -, xbadj, ;, }, err, +=, xbadj, ;]
[*, xb, ;, if, (, cotanFlag, ), {, xbadj, =, -, xbadj, ;, }, err, +=, xbadj, ;, }, return]
[;, if, (, cotanFlag, ), {, xbadj, =, -, xbadj, ;, }, err, +=, xbadj, ;, }, return, est, +]
[), {, xbadj, =, -, xbadj, ;, }, err, +=, xbadj, ;, }, return, est, +, err, ;, }, private]
[=, -, xbadj, ;, }, err, +=, xbadj, ;, }, return, est, +, err, ;, }, private, static, void, reducePayneHanek]
[;, }, err, +=, xbadj, ;, }, return, est, +, err, ;, }, private, static, void, reducePayneHanek, (, double, x]
[;, }, err, +=, xbadj, ;, }, return, est, +, err, ;, }, private, static, void, reducePayneHanek, (, double, x]
[+=, xbadj, ;, }, return, est, +, err, ;, }, private, static, void, reducePayneHanek, (, double, x, ,, double, result]
[;, }, return, est, +, err, ;, }, private, static, void, reducePayneHanek, (, double, x, ,, double, result, [, ]]
[;, }, private, static, void, reducePayneHanek, (, double, x, ,, double, result, [, ], ), {, long, inbits, =, Double]
[+, err, ;, }, private, static, void, reducePayneHanek, (, double, x, ,, double, result, [, ], ), {, long, inbits]
[;, }, private, static, void, reducePayneHanek, (, double, x, ,, double, result, [, ], ), {, long, inbits, =, Double]
[;, int, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;]
[., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &]
[), ;, int, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023]
[;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;, exponent, ++, ;, inbits, <<=, 11, ;, long, shpi0, ;, long]
[-, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;, exponent, ++, ;, inbits, <<=, 11, ;, long, shpi0]
[-, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;, exponent, ++, ;, inbits, <<=, 11, ;, long, shpi0]
[), -, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;, exponent, ++, ;, inbits, <<=, 11, ;, long]
[&, 0x7ff, ), -, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;, exponent, ++, ;, inbits, <<=, 11]
[), &, 0x7ff, ), -, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;, exponent, ++, ;, inbits, <<=]
[>, >, 52, ), &, 0x7ff, ), -, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;, exponent, ++]
[), &, 0x7ff, ), -, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;, exponent, ++, ;, inbits, <<=]
[), -, 1023, ;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;, exponent, ++, ;, inbits, <<=, 11, ;, long]
[;, inbits, &=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;, exponent, ++, ;, inbits, <<=, 11, ;, long, shpi0, ;, long]
[&=, 0x000fffffffffffffL, ;, inbits, |=, 0x0010000000000000L, ;, exponent, ++, ;, inbits, <<=, 11, ;, long, shpi0, ;, long, shpiA, ;]
[;, inbits, |=, 0x0010000000000000L, ;, exponent, ++, ;, inbits, <<=, 11, ;, long, shpi0, ;, long, shpiA, ;, long, shpiB]
[|=, 0x0010000000000000L, ;, exponent, ++, ;, inbits, <<=, 11, ;, long, shpi0, ;, long, shpiA, ;, long, shpiB, ;, int]
[;, exponent, ++, ;, inbits, <<=, 11, ;, long, shpi0, ;, long, shpiA, ;, long, shpiB, ;, int, idx, =]
[;, inbits, <<=, 11, ;, long, shpi0, ;, long, shpiA, ;, long, shpiB, ;, int, idx, =, exponent, >, >]
[++, ;, inbits, <<=, 11, ;, long, shpi0, ;, long, shpiA, ;, long, shpiB, ;, int, idx, =, exponent, >]
[<<=, 11, ;, long, shpi0, ;, long, shpiA, ;, long, shpiB, ;, int, idx, =, exponent, >, >, 6, ;]
[;, long, shpi0, ;, long, shpiA, ;, long, shpiB, ;, int, idx, =, exponent, >, >, 6, ;, int, shift]
[;, int, shift, =, exponent, -, (, idx, <<, 6, ), ;, if, (, shift, !=, 0, ), {, shpi0]
[>, >, 6, ;, int, shift, =, exponent, -, (, idx, <<, 6, ), ;, if, (, shift, !=, 0]
[;, int, shift, =, exponent, -, (, idx, <<, 6, ), ;, if, (, shift, !=, 0, ), {, shpi0]
[;, if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (, RECIP_2PI]
[-, (, idx, <<, 6, ), ;, if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0]
[;, if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (, RECIP_2PI]
[), ;, if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (]
[<<, 6, ), ;, if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?, 0]
[), ;, if, (, shift, !=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (]
[), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<]
[!=, 0, ), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (, RECIP_2PI, [, idx, -, 1]
[), {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<]
[=, (, idx, ==, 0, ), ?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;]
[;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI]
[?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ]]
[), ?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx]
[==, 0, ), ?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;, shpi0, |=, RECIP_2PI]
[), ?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx]
[:, (, RECIP_2PI, [, idx, -, 1, ], <<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >]
[;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI]
[), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA, =, (]
[<<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA]
[[, idx, -, 1, ], <<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64]
[], <<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;]
[-, 1, ], <<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift]
[], <<, shift, ), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;]
[), ;, shpi0, |=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA, =, (]
[|=, RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI, [, idx]
[;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 1, ], >]
[>, >, >, (, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, ), |]
[[, idx, ], >, >, >, (, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<]
[], >, >, >, (, 64, -, shift, ), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, )]
[;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 1, ], >]
[), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 1, ]]
[-, shift, ), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +]
[), ;, shpiA, =, (, RECIP_2PI, [, idx, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 1, ]]
[=, (, RECIP_2PI, [, idx, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 1, ], >, >, >]
[;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 2]
[|, (, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, ), ), ;, shpiB, =]
[), |, (, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, ), ), ;, shpiB]
[<<, shift, ), |, (, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, ), )]
[[, idx, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -]
[], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, )]
[), |, (, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, ), ), ;, shpiB]
[;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 2]
[), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +]
[>, >, >, (, 64, -, shift, ), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<]
[[, idx, +, 1, ], >, >, >, (, 64, -, shift, ), ), ;, shpiB, =, (, RECIP_2PI, []
[], >, >, >, (, 64, -, shift, ), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ]]
[+, 1, ], >, >, >, (, 64, -, shift, ), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +]
[], >, >, >, (, 64, -, shift, ), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ]]
[), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +]
[), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx]
[-, shift, ), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI]
[), ), ;, shpiB, =, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx]
[=, (, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 2, ], >]
[;, }, else, {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -, 1, ]]
[|, (, RECIP_2PI, [, idx, +, 2, ], >, >, >, (, 64, -, shift, ), ), ;, }, else]
[), |, (, RECIP_2PI, [, idx, +, 2, ], >, >, >, (, 64, -, shift, ), ), ;, }]
[<<, shift, ), |, (, RECIP_2PI, [, idx, +, 2, ], >, >, >, (, 64, -, shift, ), )]
[[, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 2, ], >, >, >, (]
[], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 2, ], >, >, >, (, 64, -, shift, )]
[+, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 2, ], >, >, >, (, 64, -]
[], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 2, ], >, >, >, (, 64, -, shift, )]
[), |, (, RECIP_2PI, [, idx, +, 2, ], >, >, >, (, 64, -, shift, ), ), ;, }]
[;, }, else, {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -, 1, ]]
[), ;, }, else, {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -, 1]
[>, >, >, (, 64, -, shift, ), ), ;, }, else, {, shpi0, =, (, idx, ==, 0, )]
[[, idx, +, 2, ], >, >, >, (, 64, -, shift, ), ), ;, }, else, {, shpi0, =]
[], >, >, >, (, 64, -, shift, ), ), ;, }, else, {, shpi0, =, (, idx, ==, 0]
[+, 2, ], >, >, >, (, 64, -, shift, ), ), ;, }, else, {, shpi0, =, (, idx]
[], >, >, >, (, 64, -, shift, ), ), ;, }, else, {, shpi0, =, (, idx, ==, 0]
[), ;, }, else, {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -, 1]
[), ), ;, }, else, {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -]
[-, shift, ), ), ;, }, else, {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, []
[), ), ;, }, else, {, shpi0, =, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -]
[=, (, idx, ==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, []
[;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI, [, idx, +, 1, ], ;, }, long, a]
[?, 0, :, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI]
[), ?, 0, :, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =]
[==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, [, idx, ], ;]
[), ?, 0, :, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =]
[:, RECIP_2PI, [, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI, [, idx]
[;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI, [, idx, +, 1, ], ;, }, long, a]
[[, idx, -, 1, ], ;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI, [, idx, +, 1]
[], ;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI, [, idx, +, 1, ], ;, }, long]
[-, 1, ], ;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI, [, idx, +, 1, ], ;]
[], ;, shpiA, =, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI, [, idx, +, 1, ], ;, }, long]
[=, RECIP_2PI, [, idx, ], ;, shpiB, =, RECIP_2PI, [, idx, +, 1, ], ;, }, long, a, =, inbits]
[;, shpiB, =, RECIP_2PI, [, idx, +, 1, ], ;, }, long, a, =, inbits, >, >, >, 32, ;]
[[, idx, ], ;, shpiB, =, RECIP_2PI, [, idx, +, 1, ], ;, }, long, a, =, inbits, >, >]
[], ;, shpiB, =, RECIP_2PI, [, idx, +, 1, ], ;, }, long, a, =, inbits, >, >, >, 32]
[=, RECIP_2PI, [, idx, +, 1, ], ;, }, long, a, =, inbits, >, >, >, 32, ;, long, b]
[;, }, long, a, =, inbits, >, >, >, 32, ;, long, b, =, inbits, &, 0xffffffffL, ;, long, c]
[[, idx, +, 1, ], ;, }, long, a, =, inbits, >, >, >, 32, ;, long, b, =, inbits]
[], ;, }, long, a, =, inbits, >, >, >, 32, ;, long, b, =, inbits, &, 0xffffffffL, ;, long]
[+, 1, ], ;, }, long, a, =, inbits, >, >, >, 32, ;, long, b, =, inbits, &, 0xffffffffL]
[], ;, }, long, a, =, inbits, >, >, >, 32, ;, long, b, =, inbits, &, 0xffffffffL, ;, long]
[;, long, b, =, inbits, &, 0xffffffffL, ;, long, c, =, shpiA, >, >, >, 32, ;, long, d, =]
[>, >, >, 32, ;, long, b, =, inbits, &, 0xffffffffL, ;, long, c, =, shpiA, >, >, >, 32]
[;, long, b, =, inbits, &, 0xffffffffL, ;, long, c, =, shpiA, >, >, >, 32, ;, long, d, =]
[;, long, c, =, shpiA, >, >, >, 32, ;, long, d, =, shpiA, &, 0xffffffffL, ;, long, ac, =]
[&, 0xffffffffL, ;, long, c, =, shpiA, >, >, >, 32, ;, long, d, =, shpiA, &, 0xffffffffL, ;, long]
[;, long, c, =, shpiA, >, >, >, 32, ;, long, d, =, shpiA, &, 0xffffffffL, ;, long, ac, =]
[;, long, d, =, shpiA, &, 0xffffffffL, ;, long, ac, =, a, *, c, ;, long, bd, =, b, *]
[>, >, >, 32, ;, long, d, =, shpiA, &, 0xffffffffL, ;, long, ac, =, a, *, c, ;, long]
[;, long, d, =, shpiA, &, 0xffffffffL, ;, long, ac, =, a, *, c, ;, long, bd, =, b, *]
[;, long, ac, =, a, *, c, ;, long, bd, =, b, *, d, ;, long, bc, =, b, *]
[&, 0xffffffffL, ;, long, ac, =, a, *, c, ;, long, bd, =, b, *, d, ;, long, bc, =]
[;, long, ac, =, a, *, c, ;, long, bd, =, b, *, d, ;, long, bc, =, b, *]
[;, long, bd, =, b, *, d, ;, long, bc, =, b, *, c, ;, long, ad, =, a, *]
[*, c, ;, long, bd, =, b, *, d, ;, long, bc, =, b, *, c, ;, long, ad, =]
[;, long, bd, =, b, *, d, ;, long, bc, =, b, *, c, ;, long, ad, =, a, *]
[;, long, bc, =, b, *, c, ;, long, ad, =, a, *, d, ;, long, prodB, =, bd, +]
[*, d, ;, long, bc, =, b, *, c, ;, long, ad, =, a, *, d, ;, long, prodB, =]
[;, long, bc, =, b, *, c, ;, long, ad, =, a, *, d, ;, long, prodB, =, bd, +]
[;, long, ad, =, a, *, d, ;, long, prodB, =, bd, +, (, ad, <<, 32, ), ;, long]
[*, c, ;, long, ad, =, a, *, d, ;, long, prodB, =, bd, +, (, ad, <<, 32, )]
[;, long, ad, =, a, *, d, ;, long, prodB, =, bd, +, (, ad, <<, 32, ), ;, long]
[;, long, prodB, =, bd, +, (, ad, <<, 32, ), ;, long, prodA, =, ac, +, (, ad, >]
[*, d, ;, long, prodB, =, bd, +, (, ad, <<, 32, ), ;, long, prodA, =, ac, +, (]
[;, long, prodB, =, bd, +, (, ad, <<, 32, ), ;, long, prodA, =, ac, +, (, ad, >]
[;, long, prodA, =, ac, +, (, ad, >, >, >, 32, ), ;, boolean, bita, =, (, bd, &]
[+, (, ad, <<, 32, ), ;, long, prodA, =, ac, +, (, ad, >, >, >, 32, ), ;]
[;, long, prodA, =, ac, +, (, ad, >, >, >, 32, ), ;, boolean, bita, =, (, bd, &]
[), ;, long, prodA, =, ac, +, (, ad, >, >, >, 32, ), ;, boolean, bita, =, (, bd]
[<<, 32, ), ;, long, prodA, =, ac, +, (, ad, >, >, >, 32, ), ;, boolean, bita, =]
[), ;, long, prodA, =, ac, +, (, ad, >, >, >, 32, ), ;, boolean, bita, =, (, bd]
[;, boolean, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L, )]
[+, (, ad, >, >, >, 32, ), ;, boolean, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;]
[;, boolean, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L, )]
[), ;, boolean, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L]
[>, >, >, 32, ), ;, boolean, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =]
[), ;, boolean, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L]
[;, boolean, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, )]
[!=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (, prodB, &]
[), !=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (, prodB]
[&, 0x8000000000000000L, ), !=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =]
[), !=, 0, ;, boolean, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (, prodB]
[;, boolean, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, )]
[;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||]
[!=, 0, ;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb]
[), !=, 0, ;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[&, 0x80000000L, ), !=, 0, ;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[), !=, 0, ;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[;, boolean, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[!=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[&, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, )]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc]
[||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =, (]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =]
[&&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =]
[), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc]
[), ), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[&&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;]
[), &&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0]
[||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, )]
[), &&, !, bitsum, ), ), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0]
[), ), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[), ), {, prodA, ++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=]
[++, ;, }, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, )]
[=, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB]
[;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc, <<, 32, )]
[!=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc, <<]
[), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc]
[&, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +]
[), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc]
[;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc, <<, 32, )]
[=, (, bc, &, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc, <<, 32, ), ;, prodA]
[;, prodB, =, prodB, +, (, bc, <<, 32, ), ;, prodA, =, prodA, +, (, bc, >, >, >]
[!=, 0, ;, prodB, =, prodB, +, (, bc, <<, 32, ), ;, prodA, =, prodA, +, (, bc, >]
[), !=, 0, ;, prodB, =, prodB, +, (, bc, <<, 32, ), ;, prodA, =, prodA, +, (, bc]
[&, 0x80000000L, ), !=, 0, ;, prodB, =, prodB, +, (, bc, <<, 32, ), ;, prodA, =, prodA, +]
[), !=, 0, ;, prodB, =, prodB, +, (, bc, <<, 32, ), ;, prodA, =, prodA, +, (, bc]
[;, prodB, =, prodB, +, (, bc, <<, 32, ), ;, prodA, =, prodA, +, (, bc, >, >, >]
[=, prodB, +, (, bc, <<, 32, ), ;, prodA, =, prodA, +, (, bc, >, >, >, 32, )]
[;, prodA, =, prodA, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, )]
[+, (, bc, <<, 32, ), ;, prodA, =, prodA, +, (, bc, >, >, >, 32, ), ;, bitsum]
[;, prodA, =, prodA, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, )]
[), ;, prodA, =, prodA, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prodB, &, 0x8000000000000000L]
[<<, 32, ), ;, prodA, =, prodA, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prodB]
[), ;, prodA, =, prodA, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prodB, &, 0x8000000000000000L]
[=, prodA, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0]
[;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[+, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if]
[;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||]
[>, >, >, 32, ), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita]
[), ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||]
[=, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[!=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[&, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, )]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;]
[||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpiB]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =]
[&&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =]
[), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;]
[), ), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL]
[&&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d, =]
[), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d]
[||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32]
[), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d]
[), ), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL]
[), ), {, prodA, ++, ;, }, c, =, shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL]
[;, }, c, =, shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;, ac, =, a, *]
[++, ;, }, c, =, shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;, ac, =, a]
[=, shpiB, >, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc]
[;, d, =, shpiB, &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad]
[>, >, >, 32, ;, d, =, shpiB, &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b]
[;, d, =, shpiB, &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad]
[=, shpiB, &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a]
[;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac]
[&, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d]
[;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac]
[=, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac]
[;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc]
[*, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (]
[;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc]
[=, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad]
[;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >]
[*, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >]
[;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >]
[=, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, )]
[;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (]
[*, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita]
[;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (]
[=, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prodB, &]
[;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0]
[+, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prodB, &, 0x8000000000000000L, )]
[;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0]
[), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=]
[>, >, >, 32, ), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac]
[), >, >, >, 32, ), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[+, ad, ), >, >, >, 32, ), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb]
[), >, >, >, 32, ), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[), ;, bita, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=]
[=, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB]
[;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;, bitsum, =, (, prodB, &]
[!=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;, bitsum, =, (]
[), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;, bitsum, =]
[&, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;]
[), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;, bitsum, =]
[;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;, bitsum, =, (, prodB, &]
[=, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, )]
[;, prodB, +=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[!=, 0, ;, prodB, +=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[), !=, 0, ;, prodB, +=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[&, 0x8000000000000000L, ), !=, 0, ;, prodB, +=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;]
[), !=, 0, ;, prodB, +=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[;, prodB, +=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[+=, ac, ;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, )]
[;, bitsum, =, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[=, (, prodB, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[!=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[&, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, )]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;]
[||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpi0]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =]
[&&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =]
[), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;]
[), ), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL]
[&&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d, =]
[), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d]
[||, bitb, ), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32]
[), &&, !, bitsum, ), ), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d]
[), ), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL]
[), ), {, prodA, ++, ;, }, c, =, shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL]
[;, }, c, =, shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;, bd, =, b, *]
[++, ;, }, c, =, shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;, bd, =, b]
[=, shpi0, >, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;, bd, =, b, *, d, ;, bc]
[;, d, =, shpi0, &, 0xffffffffL, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad]
[>, >, >, 32, ;, d, =, shpi0, &, 0xffffffffL, ;, bd, =, b, *, d, ;, bc, =, b]
[;, d, =, shpi0, &, 0xffffffffL, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad]
[=, shpi0, &, 0xffffffffL, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a]
[;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA]
[&, 0xffffffffL, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d]
[;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA]
[=, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA, +=, bd]
[;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA, +=, bd, +, (, (, bc]
[*, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA, +=, bd, +, (]
[;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, prodA, +=, bd, +, (, (, bc]
[=, b, *, c, ;, ad, =, a, *, d, ;, prodA, +=, bd, +, (, (, bc, +, ad]
[;, ad, =, a, *, d, ;, prodA, +=, bd, +, (, (, bc, +, ad, ), <<, 32, )]
[*, c, ;, ad, =, a, *, d, ;, prodA, +=, bd, +, (, (, bc, +, ad, ), <<]
[;, ad, =, a, *, d, ;, prodA, +=, bd, +, (, (, bc, +, ad, ), <<, 32, )]
[=, a, *, d, ;, prodA, +=, bd, +, (, (, bc, +, ad, ), <<, 32, ), ;, int]
[;, prodA, +=, bd, +, (, (, bc, +, ad, ), <<, 32, ), ;, int, intPart, =, (, int]
[*, d, ;, prodA, +=, bd, +, (, (, bc, +, ad, ), <<, 32, ), ;, int, intPart, =]
[;, prodA, +=, bd, +, (, (, bc, +, ad, ), <<, 32, ), ;, int, intPart, =, (, int]
[+=, bd, +, (, (, bc, +, ad, ), <<, 32, ), ;, int, intPart, =, (, int, ), (]
[;, int, intPart, =, (, int, ), (, prodA, >, >, >, 62, ), ;, prodA, <<=, 2, ;, prodA]
[+, (, (, bc, +, ad, ), <<, 32, ), ;, int, intPart, =, (, int, ), (, prodA, >]
[;, int, intPart, =, (, int, ), (, prodA, >, >, >, 62, ), ;, prodA, <<=, 2, ;, prodA]
[), ;, int, intPart, =, (, int, ), (, prodA, >, >, >, 62, ), ;, prodA, <<=, 2, ;]
[<<, 32, ), ;, int, intPart, =, (, int, ), (, prodA, >, >, >, 62, ), ;, prodA, <<=]
[), <<, 32, ), ;, int, intPart, =, (, int, ), (, prodA, >, >, >, 62, ), ;, prodA]
[+, ad, ), <<, 32, ), ;, int, intPart, =, (, int, ), (, prodA, >, >, >, 62, )]
[), <<, 32, ), ;, int, intPart, =, (, int, ), (, prodA, >, >, >, 62, ), ;, prodA]
[), ;, int, intPart, =, (, int, ), (, prodA, >, >, >, 62, ), ;, prodA, <<=, 2, ;]
[;, prodA, <<=, 2, ;, prodA, |=, prodB, >, >, >, 62, ;, prodB, <<=, 2, ;, a, =, prodA]
[;, prodA, <<=, 2, ;, prodA, |=, prodB, >, >, >, 62, ;, prodB, <<=, 2, ;, a, =, prodA]
[), ;, prodA, <<=, 2, ;, prodA, |=, prodB, >, >, >, 62, ;, prodB, <<=, 2, ;, a, =]
[>, >, >, 62, ), ;, prodA, <<=, 2, ;, prodA, |=, prodB, >, >, >, 62, ;, prodB, <<=]
[), ;, prodA, <<=, 2, ;, prodA, |=, prodB, >, >, >, 62, ;, prodB, <<=, 2, ;, a, =]
[<<=, 2, ;, prodA, |=, prodB, >, >, >, 62, ;, prodB, <<=, 2, ;, a, =, prodA, >, >]
[;, prodA, |=, prodB, >, >, >, 62, ;, prodB, <<=, 2, ;, a, =, prodA, >, >, >, 32]
[|=, prodB, >, >, >, 62, ;, prodB, <<=, 2, ;, a, =, prodA, >, >, >, 32, ;, b]
[;, prodB, <<=, 2, ;, a, =, prodA, >, >, >, 32, ;, b, =, prodA, &, 0xffffffffL, ;, c]
[>, >, >, 62, ;, prodB, <<=, 2, ;, a, =, prodA, >, >, >, 32, ;, b, =, prodA]
[;, prodB, <<=, 2, ;, a, =, prodA, >, >, >, 32, ;, b, =, prodA, &, 0xffffffffL, ;, c]
[<<=, 2, ;, a, =, prodA, >, >, >, 32, ;, b, =, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS]
[;, a, =, prodA, >, >, >, 32, ;, b, =, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0]
[=, prodA, >, >, >, 32, ;, b, =, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >]
[;, b, =, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =]
[>, >, >, 32, ;, b, =, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >]
[;, b, =, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =]
[=, prodA, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, []
[;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL]
[&, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ]]
[;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL]
[=, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac]
[;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bd, =, b, *]
[>, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;]
[[, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a]
[], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c]
[;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bd, =, b, *]
[=, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bd, =, b, *, d, ;]
[;, ac, =, a, *, c, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad]
[&, 0xffffffffL, ;, ac, =, a, *, c, ;, bd, =, b, *, d, ;, bc, =, b, *, c]
[[, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bd, =, b, *, d, ;, bc, =]
[], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bd, =, b, *, d, ;, bc, =, b, *]
[;, ac, =, a, *, c, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad]
[=, a, *, c, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a]
[;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, long]
[*, c, ;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d]
[;, bd, =, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, long]
[=, b, *, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, long, prod2B, =]
[;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, long, prod2B, =, bd, +, (, ad]
[*, d, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, long, prod2B, =, bd, +]
[;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, long, prod2B, =, bd, +, (, ad]
[=, b, *, c, ;, ad, =, a, *, d, ;, long, prod2B, =, bd, +, (, ad, <<, 32]
[;, ad, =, a, *, d, ;, long, prod2B, =, bd, +, (, ad, <<, 32, ), ;, long, prod2A]
[*, c, ;, ad, =, a, *, d, ;, long, prod2B, =, bd, +, (, ad, <<, 32, ), ;]
[;, ad, =, a, *, d, ;, long, prod2B, =, bd, +, (, ad, <<, 32, ), ;, long, prod2A]
[=, a, *, d, ;, long, prod2B, =, bd, +, (, ad, <<, 32, ), ;, long, prod2A, =, ac]
[;, long, prod2B, =, bd, +, (, ad, <<, 32, ), ;, long, prod2A, =, ac, +, (, ad, >]
[*, d, ;, long, prod2B, =, bd, +, (, ad, <<, 32, ), ;, long, prod2A, =, ac, +, (]
[;, long, prod2B, =, bd, +, (, ad, <<, 32, ), ;, long, prod2A, =, ac, +, (, ad, >]
[;, long, prod2A, =, ac, +, (, ad, >, >, >, 32, ), ;, bita, =, (, bd, &, 0x8000000000000000L]
[+, (, ad, <<, 32, ), ;, long, prod2A, =, ac, +, (, ad, >, >, >, 32, ), ;]
[;, long, prod2A, =, ac, +, (, ad, >, >, >, 32, ), ;, bita, =, (, bd, &, 0x8000000000000000L]
[), ;, long, prod2A, =, ac, +, (, ad, >, >, >, 32, ), ;, bita, =, (, bd, &]
[<<, 32, ), ;, long, prod2A, =, ac, +, (, ad, >, >, >, 32, ), ;, bita, =, (]
[), ;, long, prod2A, =, ac, +, (, ad, >, >, >, 32, ), ;, bita, =, (, bd, &]
[;, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0]
[+, (, ad, >, >, >, 32, ), ;, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb]
[;, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0]
[), ;, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=]
[>, >, >, 32, ), ;, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad]
[), ;, bita, =, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=]
[=, (, bd, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum]
[;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0]
[!=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, )]
[), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L]
[&, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B]
[), !=, 0, ;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L]
[;, bitb, =, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0]
[=, (, ad, &, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[!=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, )]
[), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb]
[&, 0x80000000L, ), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita]
[), !=, 0, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[=, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[!=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[&, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, )]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc]
[||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =, (]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =]
[&&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =]
[), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc]
[), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[&&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;]
[), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0]
[||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, )]
[), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0]
[), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[), ), {, prod2A, ++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=]
[++, ;, }, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, )]
[=, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B]
[;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<, 32, )]
[!=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<]
[), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc]
[&, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +]
[), !=, 0, ;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc]
[;, bitb, =, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<, 32, )]
[=, (, bc, &, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;, prod2A]
[;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;, prod2A, =, prod2A, +, (, bc, >, >, >]
[!=, 0, ;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;, prod2A, =, prod2A, +, (, bc, >]
[), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;, prod2A, =, prod2A, +, (, bc]
[&, 0x80000000L, ), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;, prod2A, =, prod2A, +]
[), !=, 0, ;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;, prod2A, =, prod2A, +, (, bc]
[;, prod2B, =, prod2B, +, (, bc, <<, 32, ), ;, prod2A, =, prod2A, +, (, bc, >, >, >]
[=, prod2B, +, (, bc, <<, 32, ), ;, prod2A, =, prod2A, +, (, bc, >, >, >, 32, )]
[;, prod2A, =, prod2A, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, )]
[+, (, bc, <<, 32, ), ;, prod2A, =, prod2A, +, (, bc, >, >, >, 32, ), ;, bitsum]
[;, prod2A, =, prod2A, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, )]
[), ;, prod2A, =, prod2A, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L]
[<<, 32, ), ;, prod2A, =, prod2A, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prod2B]
[), ;, prod2A, =, prod2A, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L]
[=, prod2A, +, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[+, (, bc, >, >, >, 32, ), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||]
[>, >, >, 32, ), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita]
[), ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||]
[=, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[!=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[&, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, )]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =, PI_O_4_BITS]
[||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, c, =]
[&&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, c, =]
[), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =, PI_O_4_BITS]
[), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =]
[&&, !, bitsum, ), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32]
[), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >]
[||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >]
[), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >]
[), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =]
[), ), {, prod2A, ++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =]
[;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 1, ], &]
[++, ;, }, c, =, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 1, ]]
[=, PI_O_4_BITS, [, 1, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac]
[;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *]
[>, >, >, 32, ;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;]
[[, 1, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =, a]
[], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =, a, *, c]
[;, d, =, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *]
[=, PI_O_4_BITS, [, 1, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;]
[;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac]
[&, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d]
[[, 1, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =]
[], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *]
[;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac]
[=, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac]
[;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc]
[*, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (]
[;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc]
[=, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad]
[;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >]
[*, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >]
[;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >]
[=, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, )]
[;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (]
[*, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita]
[;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (]
[=, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &]
[;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0]
[+, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, )]
[;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0]
[), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=]
[>, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac]
[), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[+, ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb]
[), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=]
[=, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B]
[;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &]
[!=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (]
[), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =]
[&, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;]
[), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =]
[;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &]
[=, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, )]
[;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[!=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[&, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;]
[), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[+=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, )]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[=, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[!=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[&, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, )]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =, prodB, &, 0xffffffffL, ;]
[||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, a, =, prodB]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, a, =]
[&&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, a, =]
[), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =, prodB, &, 0xffffffffL, ;]
[), ), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =, prodB, &, 0xffffffffL]
[&&, !, bitsum, ), ), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =]
[), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b]
[||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32]
[), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b]
[), ), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =, prodB, &, 0xffffffffL]
[), ), {, prod2A, ++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =, prodB, &, 0xffffffffL]
[;, }, a, =, prodB, >, >, >, 32, ;, b, =, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, []
[++, ;, }, a, =, prodB, >, >, >, 32, ;, b, =, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS]
[=, prodB, >, >, >, 32, ;, b, =, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >]
[;, b, =, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =]
[>, >, >, 32, ;, b, =, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >]
[;, b, =, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =]
[=, prodB, &, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, []
[;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL]
[&, 0xffffffffL, ;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ]]
[;, c, =, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL]
[=, PI_O_4_BITS, [, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac]
[;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *]
[>, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;]
[[, 0, ], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a]
[], >, >, >, 32, ;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c]
[;, d, =, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *]
[=, PI_O_4_BITS, [, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;]
[;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac]
[&, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d]
[[, 0, ], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =]
[], &, 0xffffffffL, ;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *]
[;, ac, =, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac]
[=, a, *, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac]
[;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc]
[*, c, ;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (]
[;, bc, =, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc]
[=, b, *, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad]
[;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >]
[*, c, ;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >]
[;, ad, =, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >]
[=, a, *, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, )]
[;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (]
[*, d, ;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita]
[;, ac, =, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (]
[=, ac, +, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &]
[;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0]
[+, (, (, bc, +, ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, )]
[;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0]
[), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=]
[>, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac]
[), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[+, ad, ), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb]
[), >, >, >, 32, ), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (]
[), ;, bita, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=]
[=, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B]
[;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &]
[!=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (]
[), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =]
[&, 0x8000000000000000L, ), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;]
[), !=, 0, ;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =]
[;, bitb, =, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &]
[=, (, ac, &, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, )]
[;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[!=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (]
[), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[&, 0x8000000000000000L, ), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;]
[), !=, 0, ;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (]
[;, prod2B, +=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&]
[+=, ac, ;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, )]
[;, bitsum, =, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (]
[=, (, prod2B, &, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[!=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[&, 0x8000000000000000L, ), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, )]
[), !=, 0, ;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !]
[;, if, (, (, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), )]
[), {, prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double]
[||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, double, tmpA, =]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, double, tmpA]
[&&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }]
[), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, double, tmpA]
[), {, prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double]
[), ), {, prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;]
[&&, !, bitsum, ), ), {, prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12, )]
[), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12]
[||, bitb, ), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >]
[), &&, !, bitsum, ), ), {, prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12]
[), ), {, prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;]
[), ), {, prod2A, ++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;]
[;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =, (, (]
[++, ;, }, double, tmpA, =, (, prod2A, >, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =, (]
[;, double, tmpB, =, (, (, (, prod2A, &, 0xfffL, ), <<, 40, ), +, (, prod2B, >, >, >]
[/, TWO_POWER_52, ;, double, tmpB, =, (, (, (, prod2A, &, 0xfffL, ), <<, 40, ), +, (, prod2B, >]
[), /, TWO_POWER_52, ;, double, tmpB, =, (, (, (, prod2A, &, 0xfffL, ), <<, 40, ), +, (, prod2B]
[>, >, >, 12, ), /, TWO_POWER_52, ;, double, tmpB, =, (, (, (, prod2A, &, 0xfffL, ), <<, 40]
[), /, TWO_POWER_52, ;, double, tmpB, =, (, (, (, prod2A, &, 0xfffL, ), <<, 40, ), +, (, prod2B]
[;, double, tmpB, =, (, (, (, prod2A, &, 0xfffL, ), <<, 40, ), +, (, prod2B, >, >, >]
[;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA, -, tmpA, -, tmpB, ), ;]
[/, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA, -, tmpA, -, tmpB]
[/, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA, -, tmpA]
[), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA, -]
[+, (, prod2B, >, >, >, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB]
[), +, (, prod2B, >, >, >, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +]
[<<, 40, ), +, (, prod2B, >, >, >, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =]
[), <<, 40, ), +, (, prod2B, >, >, >, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA]
[&, 0xfffL, ), <<, 40, ), +, (, prod2B, >, >, >, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;]
[), <<, 40, ), +, (, prod2B, >, >, >, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA]
[), +, (, prod2B, >, >, >, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +]
[), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA, -]
[), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA]
[>, >, >, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB]
[), ), /, TWO_POWER_52, /, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA]
[/, TWO_POWER_52, ;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA, -, tmpA, -, tmpB]
[;, double, sumA, =, tmpA, +, tmpB, ;, double, sumB, =, -, (, sumA, -, tmpA, -, tmpB, ), ;]
[;, double, sumB, =, -, (, sumA, -, tmpA, -, tmpB, ), ;, result, [, 0, ], =, intPart, ;]
[+, tmpB, ;, double, sumB, =, -, (, sumA, -, tmpA, -, tmpB, ), ;, result, [, 0, ], =]
[;, double, sumB, =, -, (, sumA, -, tmpA, -, tmpB, ), ;, result, [, 0, ], =, intPart, ;]
[;, result, [, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;, result, [, 2]
[;, result, [, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;, result, [, 2]
[), ;, result, [, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;, result, []
[-, tmpB, ), ;, result, [, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;]
[-, tmpA, -, tmpB, ), ;, result, [, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *]
[-, tmpB, ), ;, result, [, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;]
[), ;, result, [, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;, result, []
[=, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;, result, [, 2, ], =, sumB, *, 2.0]
[[, 0, ], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;, result, [, 2, ], =]
[], =, intPart, ;, result, [, 1, ], =, sumA, *, 2.0, ;, result, [, 2, ], =, sumB, *]
[;, result, [, 1, ], =, sumA, *, 2.0, ;, result, [, 2, ], =, sumB, *, 2.0, ;, }]
[=, sumA, *, 2.0, ;, result, [, 2, ], =, sumB, *, 2.0, ;, }, public, static, double, sin, (]
[[, 1, ], =, sumA, *, 2.0, ;, result, [, 2, ], =, sumB, *, 2.0, ;, }, public, static]
[], =, sumA, *, 2.0, ;, result, [, 2, ], =, sumB, *, 2.0, ;, }, public, static, double, sin]
[;, result, [, 2, ], =, sumB, *, 2.0, ;, }, public, static, double, sin, (, double, x, ), {]
[*, 2.0, ;, result, [, 2, ], =, sumB, *, 2.0, ;, }, public, static, double, sin, (, double, x]
[;, result, [, 2, ], =, sumB, *, 2.0, ;, }, public, static, double, sin, (, double, x, ), {]
[=, sumB, *, 2.0, ;, }, public, static, double, sin, (, double, x, ), {, boolean, negative, =, false, ;]
[[, 2, ], =, sumB, *, 2.0, ;, }, public, static, double, sin, (, double, x, ), {, boolean, negative]
[], =, sumB, *, 2.0, ;, }, public, static, double, sin, (, double, x, ), {, boolean, negative, =, false]
[;, }, public, static, double, sin, (, double, x, ), {, boolean, negative, =, false, ;, int, quadrant, =, 0]
[*, 2.0, ;, }, public, static, double, sin, (, double, x, ), {, boolean, negative, =, false, ;, int, quadrant]
[;, }, public, static, double, sin, (, double, x, ), {, boolean, negative, =, false, ;, int, quadrant, =, 0]
[;, int, quadrant, =, 0, ;, double, xa, ;, double, xb, =, 0.0, ;, xa, =, x, ;, if, (]
[;, double, xa, ;, double, xb, =, 0.0, ;, xa, =, x, ;, if, (, x, <, 0, ), {]
[;, xa, =, x, ;, if, (, x, <, 0, ), {, negative, =, true, ;, xa, =, -, xa]
[=, x, ;, if, (, x, <, 0, ), {, negative, =, true, ;, xa, =, -, xa, ;, }]
[;, if, (, x, <, 0, ), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (]
[), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long]
[<, 0, ), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, )]
[), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long]
[=, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long, bits, =, Double]
[;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits]
[=, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x]
[;, }, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if]
[;, }, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if]
[), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, ), {, return]
[==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, )]
[), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, ), {, return]
[;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa]
[., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0]
[), ;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (]
[), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double]
[<, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa]
[), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double]
[;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;]
[), {, return, Double, ., NaN, ;, }, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =]
[||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, if, (, xa, >, 3294198.0, )]
[!=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, if, (, xa, >]
[||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, if, (, xa, >, 3294198.0, )]
[), {, return, Double, ., NaN, ;, }, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =]
[==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, if, (, xa, >, 3294198.0, ), {, double]
[), {, return, Double, ., NaN, ;, }, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =]
[., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, if, (, xa, >, 3294198.0, ), {, double, reduceResults, []
[;, }, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;]
[., NaN, ;, }, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3]
[), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;]
[>, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults]
[), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;]
[;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &]
[], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], )]
[;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1]
[,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =]
[), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, []
[=, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;]
[;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa]
[&, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if]
[), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else]
[), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else]
[[, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ]]
[], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }]
[;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa]
[=, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966]
[;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw]
[[, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {]
[], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite]
[=, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new]
[;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;]
[[, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (]
[], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, )]
[), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &]
[>, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (]
[), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &]
[;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb]
[), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;]
[=, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw]
[;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (]
[&, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }]
[., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB]
[;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (]
[=, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (, negative, )]
[;, xb, =, cw, ., getRemB, (, ), ;, }, if, (, negative, ), {, quadrant, ^=, 2, ;, }]
[., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (, negative, ), {, quadrant]
[=, cw, ., getRemB, (, ), ;, }, if, (, negative, ), {, quadrant, ^=, 2, ;, }, switch, (]
[;, }, if, (, negative, ), {, quadrant, ^=, 2, ;, }, switch, (, quadrant, ), {, case, 0, :]
[., getRemB, (, ), ;, }, if, (, negative, ), {, quadrant, ^=, 2, ;, }, switch, (, quadrant, )]
[), {, quadrant, ^=, 2, ;, }, switch, (, quadrant, ), {, case, 0, :, return, sinQ, (, xa, ,]
[^=, 2, ;, }, switch, (, quadrant, ), {, case, 0, :, return, sinQ, (, xa, ,, xb, ), ;]
[;, }, switch, (, quadrant, ), {, case, 0, :, return, sinQ, (, xa, ,, xb, ), ;, case, 1]
[), {, case, 0, :, return, sinQ, (, xa, ,, xb, ), ;, case, 1, :, return, cosQ, (, xa]
[:, return, sinQ, (, xa, ,, xb, ), ;, case, 1, :, return, cosQ, (, xa, ,, xb, ), ;]
[;, case, 1, :, return, cosQ, (, xa, ,, xb, ), ;, case, 2, :, return, -, sinQ, (, xa]
[,, xb, ), ;, case, 1, :, return, cosQ, (, xa, ,, xb, ), ;, case, 2, :, return, -]
[), ;, case, 1, :, return, cosQ, (, xa, ,, xb, ), ;, case, 2, :, return, -, sinQ, (]
[:, return, cosQ, (, xa, ,, xb, ), ;, case, 2, :, return, -, sinQ, (, xa, ,, xb, )]
[;, case, 2, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 3, :, return, -, cosQ, (]
[,, xb, ), ;, case, 2, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 3, :, return]
[), ;, case, 2, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 3, :, return, -, cosQ]
[:, return, -, sinQ, (, xa, ,, xb, ), ;, case, 3, :, return, -, cosQ, (, xa, ,, xb]
[;, case, 3, :, return, -, cosQ, (, xa, ,, xb, ), ;, default, :, return, Double, ., NaN, ;]
[;, case, 3, :, return, -, cosQ, (, xa, ,, xb, ), ;, default, :, return, Double, ., NaN, ;]
[,, xb, ), ;, case, 3, :, return, -, cosQ, (, xa, ,, xb, ), ;, default, :, return, Double]
[), ;, case, 3, :, return, -, cosQ, (, xa, ,, xb, ), ;, default, :, return, Double, ., NaN]
[:, return, -, cosQ, (, xa, ,, xb, ), ;, default, :, return, Double, ., NaN, ;, }, }, public]
[;, default, :, return, Double, ., NaN, ;, }, }, public, static, double, cos, (, double, x, ), {, int]
[;, default, :, return, Double, ., NaN, ;, }, }, public, static, double, cos, (, double, x, ), {, int]
[,, xb, ), ;, default, :, return, Double, ., NaN, ;, }, }, public, static, double, cos, (, double, x]
[), ;, default, :, return, Double, ., NaN, ;, }, }, public, static, double, cos, (, double, x, ), {]
[;, }, }, public, static, double, cos, (, double, x, ), {, int, quadrant, =, 0, ;, double, xa, =]
[., NaN, ;, }, }, public, static, double, cos, (, double, x, ), {, int, quadrant, =, 0, ;, double]
[;, double, xa, =, x, ;, if, (, x, <, 0, ), {, xa, =, -, xa, ;, }, if]
[;, if, (, x, <, 0, ), {, xa, =, -, xa, ;, }, if, (, xa, !=, xa, ||]
[), {, xa, =, -, xa, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, )]
[<, 0, ), {, xa, =, -, xa, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, .]
[), {, xa, =, -, xa, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, )]
[=, -, xa, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double]
[;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;]
[;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;]
[), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {]
[||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if]
[!=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0]
[||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if]
[), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {]
[==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (, xa]
[), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {]
[., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0]
[;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new]
[., NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ]]
[;, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek]
[), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;]
[>, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults]
[), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;]
[;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &]
[], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], )]
[;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1]
[,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =]
[), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, []
[=, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;]
[;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa]
[&, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if]
[), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else]
[), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else]
[[, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ]]
[], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }]
[;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa]
[=, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966]
[;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw]
[[, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {]
[], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite]
[=, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new]
[;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;]
[[, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (]
[], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, )]
[), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &]
[>, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (]
[), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &]
[;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb]
[), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;]
[=, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw]
[;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, switch, (]
[&, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }]
[., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB]
[;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, switch, (]
[=, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, switch, (, quadrant, )]
[;, xb, =, cw, ., getRemB, (, ), ;, }, switch, (, quadrant, ), {, case, 0, :, return, cosQ]
[., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, switch, (, quadrant, ), {, case]
[=, cw, ., getRemB, (, ), ;, }, switch, (, quadrant, ), {, case, 0, :, return, cosQ, (, xa]
[;, }, switch, (, quadrant, ), {, case, 0, :, return, cosQ, (, xa, ,, xb, ), ;, case, 1]
[., getRemB, (, ), ;, }, switch, (, quadrant, ), {, case, 0, :, return, cosQ, (, xa, ,, xb]
[), {, case, 0, :, return, cosQ, (, xa, ,, xb, ), ;, case, 1, :, return, -, sinQ, (]
[:, return, cosQ, (, xa, ,, xb, ), ;, case, 1, :, return, -, sinQ, (, xa, ,, xb, )]
[;, case, 1, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 2, :, return, -, cosQ, (]
[,, xb, ), ;, case, 1, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 2, :, return]
[), ;, case, 1, :, return, -, sinQ, (, xa, ,, xb, ), ;, case, 2, :, return, -, cosQ]
[:, return, -, sinQ, (, xa, ,, xb, ), ;, case, 2, :, return, -, cosQ, (, xa, ,, xb]
[;, case, 2, :, return, -, cosQ, (, xa, ,, xb, ), ;, case, 3, :, return, sinQ, (, xa]
[;, case, 2, :, return, -, cosQ, (, xa, ,, xb, ), ;, case, 3, :, return, sinQ, (, xa]
[,, xb, ), ;, case, 2, :, return, -, cosQ, (, xa, ,, xb, ), ;, case, 3, :, return]
[), ;, case, 2, :, return, -, cosQ, (, xa, ,, xb, ), ;, case, 3, :, return, sinQ, (]
[:, return, -, cosQ, (, xa, ,, xb, ), ;, case, 3, :, return, sinQ, (, xa, ,, xb, )]
[;, case, 3, :, return, sinQ, (, xa, ,, xb, ), ;, default, :, return, Double, ., NaN, ;, }]
[;, case, 3, :, return, sinQ, (, xa, ,, xb, ), ;, default, :, return, Double, ., NaN, ;, }]
[,, xb, ), ;, case, 3, :, return, sinQ, (, xa, ,, xb, ), ;, default, :, return, Double, .]
[), ;, case, 3, :, return, sinQ, (, xa, ,, xb, ), ;, default, :, return, Double, ., NaN, ;]
[:, return, sinQ, (, xa, ,, xb, ), ;, default, :, return, Double, ., NaN, ;, }, }, public, static]
[;, default, :, return, Double, ., NaN, ;, }, }, public, static, double, tan, (, double, x, ), {, boolean]
[,, xb, ), ;, default, :, return, Double, ., NaN, ;, }, }, public, static, double, tan, (, double, x]
[), ;, default, :, return, Double, ., NaN, ;, }, }, public, static, double, tan, (, double, x, ), {]
[;, }, }, public, static, double, tan, (, double, x, ), {, boolean, negative, =, false, ;, int, quadrant, =]
[., NaN, ;, }, }, public, static, double, tan, (, double, x, ), {, boolean, negative, =, false, ;, int]
[;, int, quadrant, =, 0, ;, double, xa, =, x, ;, if, (, x, <, 0, ), {, negative, =]
[;, double, xa, =, x, ;, if, (, x, <, 0, ), {, negative, =, true, ;, xa, =, -]
[;, if, (, x, <, 0, ), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (]
[), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long]
[<, 0, ), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, )]
[), {, negative, =, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long]
[=, true, ;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long, bits, =, Double]
[;, xa, =, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits]
[=, -, xa, ;, }, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x]
[;, }, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if]
[;, }, if, (, xa, ==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if]
[), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, ), {, return]
[==, 0.0, ), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, )]
[), {, long, bits, =, Double, ., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, ), {, return]
[;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa]
[., doubleToRawLongBits, (, x, ), ;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0]
[), ;, if, (, bits, <, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (]
[), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double]
[<, 0, ), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa]
[), {, return, -, 0.0, ;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double]
[;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[;, }, return, 0.0, ;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return]
[;, }, if, (, xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;]
[), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {]
[||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if]
[!=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0]
[||, xa, ==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if]
[), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {]
[==, Double, ., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (, xa]
[), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {]
[., POSITIVE_INFINITY, ), {, return, Double, ., NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0]
[;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new]
[., NaN, ;, }, double, xb, =, 0, ;, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ]]
[;, if, (, xa, >, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek]
[), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;]
[>, 3294198.0, ), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults]
[), {, double, reduceResults, [, ], =, new, double, [, 3, ], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;]
[;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &]
[], ;, reducePayneHanek, (, xa, ,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], )]
[;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1]
[,, reduceResults, ), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =]
[), ;, quadrant, =, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, []
[=, (, (, int, ), reduceResults, [, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;]
[;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa]
[&, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if]
[), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else]
[), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else]
[[, 0, ], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ]]
[], ), &, 3, ;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }]
[;, xa, =, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa]
[=, reduceResults, [, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966]
[;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw]
[[, 1, ], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {]
[], ;, xb, =, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite]
[=, reduceResults, [, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new]
[;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;]
[[, 2, ], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (]
[], ;, }, else, if, (, xa, >, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, )]
[), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &]
[>, 1.5707963267948966, ), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (]
[), {, final, CodyWaite, cw, =, new, CodyWaite, (, xa, ), ;, quadrant, =, cw, ., getK, (, ), &]
[;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb]
[), ;, quadrant, =, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;]
[=, cw, ., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw]
[;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (]
[&, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }]
[., getK, (, ), &, 3, ;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB]
[;, xa, =, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (]
[=, cw, ., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (, xa, >]
[;, xb, =, cw, ., getRemB, (, ), ;, }, if, (, xa, >, 1.5, ), {, final, double, pi2a]
[., getRemA, (, ), ;, xb, =, cw, ., getRemB, (, ), ;, }, if, (, xa, >, 1.5, )]
[=, cw, ., getRemB, (, ), ;, }, if, (, xa, >, 1.5, ), {, final, double, pi2a, =, 1.5707963267948966]
[;, }, if, (, xa, >, 1.5, ), {, final, double, pi2a, =, 1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17]
[., getRemB, (, ), ;, }, if, (, xa, >, 1.5, ), {, final, double, pi2a, =, 1.5707963267948966, ;, final]
[), {, final, double, pi2a, =, 1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -]
[>, 1.5, ), {, final, double, pi2a, =, 1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =]
[), {, final, double, pi2a, =, 1.5707963267948966, ;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -]
[;, final, double, pi2b, =, 6.123233995736766E-17, ;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (]
[;, final, double, a, =, pi2a, -, xa, ;, double, b, =, -, (, a, -, pi2a, +, xa, )]
[;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, xa]
[-, xa, ;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb]
[;, double, b, =, -, (, a, -, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, xa]
[;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =, -, (, xa, -, a]
[;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =, -, (, xa, -, a]
[), ;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =, -, (, xa, -]
[+, xa, ), ;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =, -, (]
[-, pi2a, +, xa, ), ;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =]
[+, xa, ), ;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =, -, (]
[), ;, b, +=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =, -, (, xa, -]
[+=, pi2b, -, xb, ;, xa, =, a, +, b, ;, xb, =, -, (, xa, -, a, -, b]
[;, xa, =, a, +, b, ;, xb, =, -, (, xa, -, a, -, b, ), ;, quadrant, ^=]
[-, xb, ;, xa, =, a, +, b, ;, xb, =, -, (, xa, -, a, -, b, ), ;]
[;, xa, =, a, +, b, ;, xb, =, -, (, xa, -, a, -, b, ), ;, quadrant, ^=]
[=, a, +, b, ;, xb, =, -, (, xa, -, a, -, b, ), ;, quadrant, ^=, 1, ;]
[;, xb, =, -, (, xa, -, a, -, b, ), ;, quadrant, ^=, 1, ;, negative, ^=, true, ;]
[+, b, ;, xb, =, -, (, xa, -, a, -, b, ), ;, quadrant, ^=, 1, ;, negative, ^=]
[;, xb, =, -, (, xa, -, a, -, b, ), ;, quadrant, ^=, 1, ;, negative, ^=, true, ;]
[=, -, (, xa, -, a, -, b, ), ;, quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double]
[;, quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (, (, quadrant, &, 1, )]
[;, quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (, (, quadrant, &, 1, )]
[), ;, quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (, (, quadrant, &, 1]
[-, b, ), ;, quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (, (, quadrant]
[-, a, -, b, ), ;, quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (]
[-, b, ), ;, quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (, (, quadrant]
[), ;, quadrant, ^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (, (, quadrant, &, 1]
[^=, 1, ;, negative, ^=, true, ;, }, double, result, ;, if, (, (, quadrant, &, 1, ), ==, 0]
[;, negative, ^=, true, ;, }, double, result, ;, if, (, (, quadrant, &, 1, ), ==, 0, ), {]
[^=, true, ;, }, double, result, ;, if, (, (, quadrant, &, 1, ), ==, 0, ), {, result, =]
[;, }, double, result, ;, if, (, (, quadrant, &, 1, ), ==, 0, ), {, result, =, tanQ, (]
[), {, result, =, tanQ, (, xa, ,, xb, ,, false, ), ;, }, else, {, result, =, -, tanQ]
[==, 0, ), {, result, =, tanQ, (, xa, ,, xb, ,, false, ), ;, }, else, {, result, =]
[), ==, 0, ), {, result, =, tanQ, (, xa, ,, xb, ,, false, ), ;, }, else, {, result]
[&, 1, ), ==, 0, ), {, result, =, tanQ, (, xa, ,, xb, ,, false, ), ;, }, else]
[), ==, 0, ), {, result, =, tanQ, (, xa, ,, xb, ,, false, ), ;, }, else, {, result]
[), {, result, =, tanQ, (, xa, ,, xb, ,, false, ), ;, }, else, {, result, =, -, tanQ]
[=, tanQ, (, xa, ,, xb, ,, false, ), ;, }, else, {, result, =, -, tanQ, (, xa, ,]
[;, }, else, {, result, =, -, tanQ, (, xa, ,, xb, ,, true, ), ;, }, if, (, negative]
[,, xb, ,, false, ), ;, }, else, {, result, =, -, tanQ, (, xa, ,, xb, ,, true, )]
[,, false, ), ;, }, else, {, result, =, -, tanQ, (, xa, ,, xb, ,, true, ), ;, }]
[), ;, }, else, {, result, =, -, tanQ, (, xa, ,, xb, ,, true, ), ;, }, if, (]
[=, -, tanQ, (, xa, ,, xb, ,, true, ), ;, }, if, (, negative, ), {, result, =, -]
[;, }, if, (, negative, ), {, result, =, -, result, ;, }, return, result, ;, }, public, static, double]
[;, }, if, (, negative, ), {, result, =, -, result, ;, }, return, result, ;, }, public, static, double]
[,, xb, ,, true, ), ;, }, if, (, negative, ), {, result, =, -, result, ;, }, return, result]
[,, true, ), ;, }, if, (, negative, ), {, result, =, -, result, ;, }, return, result, ;, }]
[), ;, }, if, (, negative, ), {, result, =, -, result, ;, }, return, result, ;, }, public, static]
[), {, result, =, -, result, ;, }, return, result, ;, }, public, static, double, atan, (, double, x, )]
[=, -, result, ;, }, return, result, ;, }, public, static, double, atan, (, double, x, ), {, return, atan]
[;, }, return, result, ;, }, public, static, double, atan, (, double, x, ), {, return, atan, (, x, ,]
[;, }, return, result, ;, }, public, static, double, atan, (, double, x, ), {, return, atan, (, x, ,]
[;, }, public, static, double, atan, (, double, x, ), {, return, atan, (, x, ,, 0.0, ,, false, )]
[;, }, private, static, double, atan, (, double, xa, ,, double, xb, ,, boolean, leftPlane, ), {, boolean, negate, =]
[,, 0.0, ,, false, ), ;, }, private, static, double, atan, (, double, xa, ,, double, xb, ,, boolean, leftPlane]
[,, false, ), ;, }, private, static, double, atan, (, double, xa, ,, double, xb, ,, boolean, leftPlane, ), {]
[), ;, }, private, static, double, atan, (, double, xa, ,, double, xb, ,, boolean, leftPlane, ), {, boolean, negate]
[;, int, idx, ;, if, (, xa, ==, 0.0, ), {, return, leftPlane, ?, copySign, (, Math, ., PI, ,]
[), {, return, leftPlane, ?, copySign, (, Math, ., PI, ,, xa, ), :, xa, ;, }, if, (, xa]
[==, 0.0, ), {, return, leftPlane, ?, copySign, (, Math, ., PI, ,, xa, ), :, xa, ;, }, if]
[), {, return, leftPlane, ?, copySign, (, Math, ., PI, ,, xa, ), :, xa, ;, }, if, (, xa]
[;, }, if, (, xa, <, 0, ), {, xa, =, -, xa, ;, xb, =, -, xb, ;, negate]
[?, copySign, (, Math, ., PI, ,, xa, ), :, xa, ;, }, if, (, xa, <, 0, ), {]
[:, xa, ;, }, if, (, xa, <, 0, ), {, xa, =, -, xa, ;, xb, =, -, xb]
[,, xa, ), :, xa, ;, }, if, (, xa, <, 0, ), {, xa, =, -, xa, ;, xb]
[., PI, ,, xa, ), :, xa, ;, }, if, (, xa, <, 0, ), {, xa, =, -, xa]
[), :, xa, ;, }, if, (, xa, <, 0, ), {, xa, =, -, xa, ;, xb, =, -]
[;, }, if, (, xa, <, 0, ), {, xa, =, -, xa, ;, xb, =, -, xb, ;, negate]
[), {, xa, =, -, xa, ;, xb, =, -, xb, ;, negate, =, true, ;, }, if, (, xa]
[<, 0, ), {, xa, =, -, xa, ;, xb, =, -, xb, ;, negate, =, true, ;, }, if]
[), {, xa, =, -, xa, ;, xb, =, -, xb, ;, negate, =, true, ;, }, if, (, xa]
[=, -, xa, ;, xb, =, -, xb, ;, negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, )]
[;, xb, =, -, xb, ;, negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (]
[;, xb, =, -, xb, ;, negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (]
[=, -, xb, ;, negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (, negate, ^]
[;, negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?]
[;, negate, =, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?]
[=, true, ;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?, (, -]
[;, }, if, (, xa, >, 1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?, (, -, Math, .]
[), {, return, (, negate, ^, leftPlane, ), ?, (, -, Math, ., PI, *, F_1_2, ), :, (, Math]
[>, 1.633123935319537E16, ), {, return, (, negate, ^, leftPlane, ), ?, (, -, Math, ., PI, *, F_1_2, ), :]
[), {, return, (, negate, ^, leftPlane, ), ?, (, -, Math, ., PI, *, F_1_2, ), :, (, Math]
[;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (, (, -, 1.7168146928204136, *]
[?, (, -, Math, ., PI, *, F_1_2, ), :, (, Math, ., PI, *, F_1_2, ), ;, }, if]
[), ?, (, -, Math, ., PI, *, F_1_2, ), :, (, Math, ., PI, *, F_1_2, ), ;, }]
[^, leftPlane, ), ?, (, -, Math, ., PI, *, F_1_2, ), :, (, Math, ., PI, *, F_1_2, )]
[), ?, (, -, Math, ., PI, *, F_1_2, ), :, (, Math, ., PI, *, F_1_2, ), ;, }]
[:, (, Math, ., PI, *, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =, (]
[), :, (, Math, ., PI, *, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =]
[*, F_1_2, ), :, (, Math, ., PI, *, F_1_2, ), ;, }, if, (, xa, <, 1, ), {]
[*, F_1_2, ), :, (, Math, ., PI, *, F_1_2, ), ;, }, if, (, xa, <, 1, ), {]
[., PI, *, F_1_2, ), :, (, Math, ., PI, *, F_1_2, ), ;, }, if, (, xa, <, 1]
[), :, (, Math, ., PI, *, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =]
[;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (, (, -, 1.7168146928204136, *]
[), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (, (, -, 1.7168146928204136]
[*, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (, (]
[., PI, *, F_1_2, ), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (]
[), ;, }, if, (, xa, <, 1, ), {, idx, =, (, int, ), (, (, (, -, 1.7168146928204136]
[), {, idx, =, (, int, ), (, (, (, -, 1.7168146928204136, *, xa, *, xa, +, 8.0, ), *]
[<, 1, ), {, idx, =, (, int, ), (, (, (, -, 1.7168146928204136, *, xa, *, xa, +, 8.0]
[), {, idx, =, (, int, ), (, (, (, -, 1.7168146928204136, *, xa, *, xa, +, 8.0, ), *]
[=, (, int, ), (, (, (, -, 1.7168146928204136, *, xa, *, xa, +, 8.0, ), *, xa, ), +]
[;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -, (]
[;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -, (]
[), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -]
[+, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, )]
[), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int]
[*, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =]
[), *, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx]
[+, 8.0, ), *, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa]
[*, xa, +, 8.0, ), *, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1]
[*, xa, *, xa, +, 8.0, ), *, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa]
[*, xa, *, xa, +, 8.0, ), *, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa]
[*, xa, +, 8.0, ), *, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1]
[+, 8.0, ), *, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa]
[), *, xa, ), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx]
[), +, 0.5, ), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int]
[), ;, }, else, {, final, double, oneOverXa, =, 1, /, xa, ;, idx, =, (, int, ), (, -]
[;, idx, =, (, int, ), (, -, (, (, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, ), *]
[/, xa, ;, idx, =, (, int, ), (, -, (, (, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0]
[;, idx, =, (, int, ), (, -, (, (, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, ), *]
[=, (, int, ), (, -, (, (, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa, )]
[;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (, epsA, -, xa]
[;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (, epsA, -, xa]
[), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (, epsA, -]
[+, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (]
[+, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (]
[), +, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -]
[*, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB]
[), *, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double]
[+, 8.0, ), *, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ]]
[*, oneOverXa, +, 8.0, ), *, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, []
[*, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =, xa, -]
[*, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =, xa, -]
[*, oneOverXa, +, 8.0, ), *, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, []
[+, 8.0, ), *, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ]]
[), *, oneOverXa, ), +, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double]
[), +, 13.07, ), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -]
[), ;, }, double, epsA, =, xa, -, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (, epsA, -]
[;, double, epsB, =, -, (, epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=, xb, -]
[-, TANGENT_TABLE_A, [, idx, ], ;, double, epsB, =, -, (, epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ], )]
[;, double, epsB, =, -, (, epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=, xb, -]
[[, idx, ], ;, double, epsB, =, -, (, epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ], ), ;, epsB]
[], ;, double, epsB, =, -, (, epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=, xb]
[;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =, -]
[;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =, -]
[), ;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =]
[+, TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA]
[-, xa, +, TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp]
[+, TANGENT_TABLE_A, [, idx, ], ), ;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA]
[), ;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =]
[[, idx, ], ), ;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB]
[], ), ;, epsB, +=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB]
[+=, xb, -, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =, -, (, temp]
[;, double, temp, =, epsA, +, epsB, ;, epsB, =, -, (, temp, -, epsA, -, epsB, ), ;, epsA]
[-, TANGENT_TABLE_B, [, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =, -, (, temp, -, epsA]
[;, double, temp, =, epsA, +, epsB, ;, epsB, =, -, (, temp, -, epsA, -, epsB, ), ;, epsA]
[[, idx, ], ;, double, temp, =, epsA, +, epsB, ;, epsB, =, -, (, temp, -, epsA, -, epsB]
[], ;, double, temp, =, epsA, +, epsB, ;, epsB, =, -, (, temp, -, epsA, -, epsB, ), ;]
[;, epsB, =, -, (, temp, -, epsA, -, epsB, ), ;, epsA, =, temp, ;, temp, =, xa, *]
[+, epsB, ;, epsB, =, -, (, temp, -, epsA, -, epsB, ), ;, epsA, =, temp, ;, temp, =]
[;, epsB, =, -, (, temp, -, epsA, -, epsB, ), ;, epsA, =, temp, ;, temp, =, xa, *]
[=, -, (, temp, -, epsA, -, epsB, ), ;, epsA, =, temp, ;, temp, =, xa, *, HEX_40000000, ;]
[;, epsA, =, temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp, ;]
[;, epsA, =, temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp, ;]
[), ;, epsA, =, temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp]
[-, epsB, ), ;, epsA, =, temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp]
[-, epsA, -, epsB, ), ;, epsA, =, temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa]
[-, epsB, ), ;, epsA, =, temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp]
[), ;, epsA, =, temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp]
[=, temp, ;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp, ;, double, yb]
[;, temp, =, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp, ;, double, yb, =, xb]
[=, xa, *, HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp, ;, double, yb, =, xb, +, xa]
[;, double, ya, =, xa, +, temp, -, temp, ;, double, yb, =, xb, +, xa, -, ya, ;, xa]
[*, HEX_40000000, ;, double, ya, =, xa, +, temp, -, temp, ;, double, yb, =, xb, +, xa, -, ya]
[;, double, ya, =, xa, +, temp, -, temp, ;, double, yb, =, xb, +, xa, -, ya, ;, xa]
[;, double, yb, =, xb, +, xa, -, ya, ;, xa, =, ya, ;, xb, +=, yb, ;, if, (]
[-, temp, ;, double, yb, =, xb, +, xa, -, ya, ;, xa, =, ya, ;, xb, +=, yb, ;]
[+, temp, -, temp, ;, double, yb, =, xb, +, xa, -, ya, ;, xa, =, ya, ;, xb, +=]
[-, temp, ;, double, yb, =, xb, +, xa, -, ya, ;, xa, =, ya, ;, xb, +=, yb, ;]
[;, double, yb, =, xb, +, xa, -, ya, ;, xa, =, ya, ;, xb, +=, yb, ;, if, (]
[;, xa, =, ya, ;, xb, +=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =]
[-, ya, ;, xa, =, ya, ;, xb, +=, yb, ;, if, (, idx, ==, 0, ), {, final, double]
[+, xa, -, ya, ;, xa, =, ya, ;, xb, +=, yb, ;, if, (, idx, ==, 0, ), {]
[-, ya, ;, xa, =, ya, ;, xb, +=, yb, ;, if, (, idx, ==, 0, ), {, final, double]
[;, xa, =, ya, ;, xb, +=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =]
[=, ya, ;, xb, +=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =, 1d, /]
[;, xb, +=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =, 1d, /, (, 1d]
[+=, yb, ;, if, (, idx, ==, 0, ), {, final, double, denom, =, 1d, /, (, 1d, +, (]
[;, if, (, idx, ==, 0, ), {, final, double, denom, =, 1d, /, (, 1d, +, (, xa, +]
[), {, final, double, denom, =, 1d, /, (, 1d, +, (, xa, +, xb, ), *, (, TANGENT_TABLE_A, []
[==, 0, ), {, final, double, denom, =, 1d, /, (, 1d, +, (, xa, +, xb, ), *, (]
[), {, final, double, denom, =, 1d, /, (, 1d, +, (, xa, +, xb, ), *, (, TANGENT_TABLE_A, []
[;, ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =, xa]
[/, (, 1d, +, (, xa, +, xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ]]
[;, ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =, xa]
[), ;, ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =]
[+, (, xa, +, xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;]
[), ;, ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =]
[*, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =, epsA, *, denom, ;]
[), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =, epsA, *, denom]
[+, xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =, epsA]
[), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =, epsA, *, denom]
[), ;, ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =]
[), ), ;, ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2]
[+, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;]
[[, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =, epsA, *, denom, ;, yb, =, epsB]
[], +, TANGENT_TABLE_B, [, idx, ], ), ), ;, ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom]
[), ), ;, ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2]
[[, idx, ], ), ), ;, ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else]
[], ), ), ;, ya, =, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double]
[=, epsA, *, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =, xa, *, TANGENT_TABLE_A]
[;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =, xa, *, TANGENT_TABLE_A, [, idx, ], ;]
[*, denom, ;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =, xa, *, TANGENT_TABLE_A, [, idx]
[;, yb, =, epsB, *, denom, ;, }, else, {, double, temp2, =, xa, *, TANGENT_TABLE_A, [, idx, ], ;]
[=, epsB, *, denom, ;, }, else, {, double, temp2, =, xa, *, TANGENT_TABLE_A, [, idx, ], ;, double, za]
[;, }, else, {, double, temp2, =, xa, *, TANGENT_TABLE_A, [, idx, ], ;, double, za, =, 1d, +, temp2]
[*, denom, ;, }, else, {, double, temp2, =, xa, *, TANGENT_TABLE_A, [, idx, ], ;, double, za, =, 1d]
[;, }, else, {, double, temp2, =, xa, *, TANGENT_TABLE_A, [, idx, ], ;, double, za, =, 1d, +, temp2]
[;, double, za, =, 1d, +, temp2, ;, double, zb, =, -, (, za, -, 1d, -, temp2, ), ;]
[*, TANGENT_TABLE_A, [, idx, ], ;, double, za, =, 1d, +, temp2, ;, double, zb, =, -, (, za, -]
[;, double, za, =, 1d, +, temp2, ;, double, zb, =, -, (, za, -, 1d, -, temp2, ), ;]
[[, idx, ], ;, double, za, =, 1d, +, temp2, ;, double, zb, =, -, (, za, -, 1d, -]
[], ;, double, za, =, 1d, +, temp2, ;, double, zb, =, -, (, za, -, 1d, -, temp2, )]
[;, double, zb, =, -, (, za, -, 1d, -, temp2, ), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx]
[+, temp2, ;, double, zb, =, -, (, za, -, 1d, -, temp2, ), ;, temp2, =, xb, *, TANGENT_TABLE_A]
[;, double, zb, =, -, (, za, -, 1d, -, temp2, ), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx]
[;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za]
[;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za]
[), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =]
[-, temp2, ), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;]
[-, 1d, -, temp2, ), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx]
[-, temp2, ), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;]
[), ;, temp2, =, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =]
[=, xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2]
[;, temp, =, za, +, temp2, ;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za, =]
[+, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;, zb, +=, -, (, temp, -]
[*, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;, zb]
[+, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;, zb, +=, -, (, temp, -]
[[, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;, zb, +=, -]
[], +, xa, *, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;, zb, +=, -, (, temp]
[;, temp, =, za, +, temp2, ;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za, =]
[*, TANGENT_TABLE_B, [, idx, ], ;, temp, =, za, +, temp2, ;, zb, +=, -, (, temp, -, za, -]
[;, temp, =, za, +, temp2, ;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za, =]
[[, idx, ], ;, temp, =, za, +, temp2, ;, zb, +=, -, (, temp, -, za, -, temp2, )]
[], ;, temp, =, za, +, temp2, ;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za]
[=, za, +, temp2, ;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za, =, temp, ;]
[;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za, =, temp, ;, zb, +=, xb, *]
[+, temp2, ;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za, =, temp, ;, zb, +=]
[;, zb, +=, -, (, temp, -, za, -, temp2, ), ;, za, =, temp, ;, zb, +=, xb, *]
[+=, -, (, temp, -, za, -, temp2, ), ;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, []
[;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA, /, za, ;]
[;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA, /, za, ;]
[), ;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA, /, za]
[-, temp2, ), ;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA]
[-, za, -, temp2, ), ;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya]
[-, temp2, ), ;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA]
[), ;, za, =, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA, /, za]
[=, temp, ;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA, /, za, ;, temp, =]
[;, zb, +=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA, /, za, ;, temp, =, ya, *]
[+=, xb, *, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA, /, za, ;, temp, =, ya, *, HEX_40000000, ;]
[;, ya, =, epsA, /, za, ;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =, (, ya, +]
[*, TANGENT_TABLE_B, [, idx, ], ;, ya, =, epsA, /, za, ;, temp, =, ya, *, HEX_40000000, ;, final, double]
[;, ya, =, epsA, /, za, ;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =, (, ya, +]
[[, idx, ], ;, ya, =, epsA, /, za, ;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =]
[], ;, ya, =, epsA, /, za, ;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =, (, ya]
[=, epsA, /, za, ;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =, (, ya, +, temp, )]
[;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =, (, ya, +, temp, ), -, temp, ;, final]
[/, za, ;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =, (, ya, +, temp, ), -, temp]
[;, temp, =, ya, *, HEX_40000000, ;, final, double, yaa, =, (, ya, +, temp, ), -, temp, ;, final]
[=, ya, *, HEX_40000000, ;, final, double, yaa, =, (, ya, +, temp, ), -, temp, ;, final, double, yab]
[;, final, double, yaa, =, (, ya, +, temp, ), -, temp, ;, final, double, yab, =, ya, -, yaa]
[*, HEX_40000000, ;, final, double, yaa, =, (, ya, +, temp, ), -, temp, ;, final, double, yab, =, ya]
[;, final, double, yaa, =, (, ya, +, temp, ), -, temp, ;, final, double, yab, =, ya, -, yaa]
[;, final, double, yab, =, ya, -, yaa, ;, temp, =, za, *, HEX_40000000, ;, final, double, zaa, =, (]
[-, temp, ;, final, double, yab, =, ya, -, yaa, ;, temp, =, za, *, HEX_40000000, ;, final, double, zaa]
[), -, temp, ;, final, double, yab, =, ya, -, yaa, ;, temp, =, za, *, HEX_40000000, ;, final, double]
[+, temp, ), -, temp, ;, final, double, yab, =, ya, -, yaa, ;, temp, =, za, *, HEX_40000000, ;]
[), -, temp, ;, final, double, yab, =, ya, -, yaa, ;, temp, =, za, *, HEX_40000000, ;, final, double]
[;, final, double, yab, =, ya, -, yaa, ;, temp, =, za, *, HEX_40000000, ;, final, double, zaa, =, (]
[;, temp, =, za, *, HEX_40000000, ;, final, double, zaa, =, (, za, +, temp, ), -, temp, ;, final]
[-, yaa, ;, temp, =, za, *, HEX_40000000, ;, final, double, zaa, =, (, za, +, temp, ), -, temp]
[;, temp, =, za, *, HEX_40000000, ;, final, double, zaa, =, (, za, +, temp, ), -, temp, ;, final]
[=, za, *, HEX_40000000, ;, final, double, zaa, =, (, za, +, temp, ), -, temp, ;, final, double, zab]
[;, final, double, zaa, =, (, za, +, temp, ), -, temp, ;, final, double, zab, =, za, -, zaa]
[*, HEX_40000000, ;, final, double, zaa, =, (, za, +, temp, ), -, temp, ;, final, double, zab, =, za]
[;, final, double, zaa, =, (, za, +, temp, ), -, temp, ;, final, double, zab, =, za, -, zaa]
[;, final, double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa, -, yaa, *]
[-, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa, -]
[), -, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa]
[+, temp, ), -, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -, yaa]
[), -, temp, ;, final, double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa]
[;, final, double, zab, =, za, -, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa, -, yaa, *]
[;, yb, =, (, epsA, -, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *]
[-, zaa, ;, yb, =, (, epsA, -, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa, -]
[;, yb, =, (, epsA, -, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *]
[=, (, epsA, -, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, )]
[;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb, +=, epsB, /, za, ;, }, epsA]
[/, za, ;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb, +=, epsB, /, za, ;]
[), /, za, ;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb, +=, epsB, /, za]
[-, yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb]
[-, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /, za]
[-, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=, -, epsA]
[-, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;]
[-, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=, -, epsA]
[*, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=]
[-, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=, -, epsA]
[-, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /, za]
[*, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *, zb]
[-, yab, *, zaa, -, yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /, za]
[-, yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb]
[*, zaa, -, yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /, za, /, za]
[-, yab, *, zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb]
[), /, za, ;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb, +=, epsB, /, za]
[*, zab, ), /, za, ;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb, +=, epsB]
[), /, za, ;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb, +=, epsB, /, za]
[;, yb, +=, -, epsA, *, zb, /, za, /, za, ;, yb, +=, epsB, /, za, ;, }, epsA]
[+=, -, epsA, *, zb, /, za, /, za, ;, yb, +=, epsB, /, za, ;, }, epsA, =, ya]
[;, yb, +=, epsB, /, za, ;, }, epsA, =, ya, ;, epsB, =, yb, ;, final, double, epsA2, =]
[/, za, ;, yb, +=, epsB, /, za, ;, }, epsA, =, ya, ;, epsB, =, yb, ;, final, double]
[/, za, /, za, ;, yb, +=, epsB, /, za, ;, }, epsA, =, ya, ;, epsB, =, yb, ;]
[*, zb, /, za, /, za, ;, yb, +=, epsB, /, za, ;, }, epsA, =, ya, ;, epsB, =]
[*, zb, /, za, /, za, ;, yb, +=, epsB, /, za, ;, }, epsA, =, ya, ;, epsB, =]
[/, za, /, za, ;, yb, +=, epsB, /, za, ;, }, epsA, =, ya, ;, epsB, =, yb, ;]
[/, za, ;, yb, +=, epsB, /, za, ;, }, epsA, =, ya, ;, epsB, =, yb, ;, final, double]
[;, yb, +=, epsB, /, za, ;, }, epsA, =, ya, ;, epsB, =, yb, ;, final, double, epsA2, =]
[+=, epsB, /, za, ;, }, epsA, =, ya, ;, epsB, =, yb, ;, final, double, epsA2, =, epsA, *]
[;, }, epsA, =, ya, ;, epsB, =, yb, ;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =]
[/, za, ;, }, epsA, =, ya, ;, epsB, =, yb, ;, final, double, epsA2, =, epsA, *, epsA, ;]
[;, }, epsA, =, ya, ;, epsB, =, yb, ;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =]
[=, ya, ;, epsB, =, yb, ;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb]
[;, epsB, =, yb, ;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =, yb]
[=, yb, ;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =, yb, *, epsA2]
[;, final, double, epsA2, =, epsA, *, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +, -]
[;, yb, =, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +]
[*, epsA, ;, yb, =, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *]
[;, yb, =, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +]
[=, 0.07490822288864472, ;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;]
[;, yb, =, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =]
[=, yb, *, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *]
[;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =]
[+, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182]
[*, epsA2, +, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +]
[+, -, 0.09088450866185192, ;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182]
[;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =]
[;, yb, =, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =]
[=, yb, *, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *]
[;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =]
[+, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;]
[*, epsA2, +, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +]
[+, 0.11111095942313305, ;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;]
[;, yb, =, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =]
[=, yb, *, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *]
[;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =]
[+, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287]
[*, epsA2, +, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +]
[+, -, 0.1428571423679182, ;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287]
[;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =]
[;, yb, =, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =]
[=, yb, *, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *]
[;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =]
[+, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;]
[*, epsA2, +, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *]
[+, 0.19999999999923582, ;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;]
[;, yb, =, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =]
[=, yb, *, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;]
[;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb]
[+, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +]
[*, epsA2, +, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =]
[+, -, 0.33333333333333287, ;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +]
[;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb]
[;, yb, =, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb]
[=, yb, *, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -]
[;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -, (, temp, -, ya, -, yb]
[*, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -, (, temp, -, ya]
[*, epsA2, *, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -, (, temp]
[*, epsA, ;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -, (, temp, -, ya]
[;, ya, =, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -, (, temp, -, ya, -, yb]
[=, epsA, ;, temp, =, ya, +, yb, ;, yb, =, -, (, temp, -, ya, -, yb, ), ;]
[;, temp, =, ya, +, yb, ;, yb, =, -, (, temp, -, ya, -, yb, ), ;, ya, =]
[=, ya, +, yb, ;, yb, =, -, (, temp, -, ya, -, yb, ), ;, ya, =, temp, ;]
[;, yb, =, -, (, temp, -, ya, -, yb, ), ;, ya, =, temp, ;, yb, +=, epsB, /]
[+, yb, ;, yb, =, -, (, temp, -, ya, -, yb, ), ;, ya, =, temp, ;, yb, +=]
[;, yb, =, -, (, temp, -, ya, -, yb, ), ;, ya, =, temp, ;, yb, +=, epsB, /]
[=, -, (, temp, -, ya, -, yb, ), ;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d]
[;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;, double, za, =]
[;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;, double, za, =]
[), ;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;, double, za]
[-, yb, ), ;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;]
[-, ya, -, yb, ), ;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d, +, epsA, *, epsA]
[-, yb, ), ;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;]
[), ;, ya, =, temp, ;, yb, +=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;, double, za]
[=, temp, ;, yb, +=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;, double, za, =, EIGHTHS, []
[;, yb, +=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;, double, za, =, EIGHTHS, [, idx, ]]
[+=, epsB, /, (, 1d, +, epsA, *, epsA, ), ;, double, za, =, EIGHTHS, [, idx, ], +, ya]
[;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -, (, za, -, EIGHTHS, []
[/, (, 1d, +, epsA, *, epsA, ), ;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double]
[;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -, (, za, -, EIGHTHS, []
[), ;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -, (, za, -, EIGHTHS]
[+, epsA, *, epsA, ), ;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -]
[), ;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -, (, za, -, EIGHTHS]
[*, epsA, ), ;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -, (, za]
[), ;, double, za, =, EIGHTHS, [, idx, ], +, ya, ;, double, zb, =, -, (, za, -, EIGHTHS]
[;, double, zb, =, -, (, za, -, EIGHTHS, [, idx, ], -, ya, ), ;, temp, =, za, +]
[+, ya, ;, double, zb, =, -, (, za, -, EIGHTHS, [, idx, ], -, ya, ), ;, temp, =]
[[, idx, ], +, ya, ;, double, zb, =, -, (, za, -, EIGHTHS, [, idx, ], -, ya, )]
[], +, ya, ;, double, zb, =, -, (, za, -, EIGHTHS, [, idx, ], -, ya, ), ;, temp]
[;, double, zb, =, -, (, za, -, EIGHTHS, [, idx, ], -, ya, ), ;, temp, =, za, +]
[;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =]
[;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =]
[), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za]
[-, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, )]
[-, EIGHTHS, [, idx, ], -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp]
[-, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, )]
[[, idx, ], -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za]
[], -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb]
[), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za]
[=, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;]
[;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, result, =, za]
[+, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, result]
[;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, result, =, za]
[+=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, result, =, za, +, zb]
[;, za, =, temp, ;, double, result, =, za, +, zb, ;, if, (, leftPlane, ), {, final, double, resultb]
[;, za, =, temp, ;, double, result, =, za, +, zb, ;, if, (, leftPlane, ), {, final, double, resultb]
[), ;, za, =, temp, ;, double, result, =, za, +, zb, ;, if, (, leftPlane, ), {, final, double]
[-, yb, ), ;, za, =, temp, ;, double, result, =, za, +, zb, ;, if, (, leftPlane, ), {]
[-, za, -, yb, ), ;, za, =, temp, ;, double, result, =, za, +, zb, ;, if, (, leftPlane]
[-, yb, ), ;, za, =, temp, ;, double, result, =, za, +, zb, ;, if, (, leftPlane, ), {]
[), ;, za, =, temp, ;, double, result, =, za, +, zb, ;, if, (, leftPlane, ), {, final, double]
[=, temp, ;, double, result, =, za, +, zb, ;, if, (, leftPlane, ), {, final, double, resultb, =, -]
[;, double, result, =, za, +, zb, ;, if, (, leftPlane, ), {, final, double, resultb, =, -, (, result]
[;, if, (, leftPlane, ), {, final, double, resultb, =, -, (, result, -, za, -, zb, ), ;, final]
[+, zb, ;, if, (, leftPlane, ), {, final, double, resultb, =, -, (, result, -, za, -, zb, )]
[;, if, (, leftPlane, ), {, final, double, resultb, =, -, (, result, -, za, -, zb, ), ;, final]
[), {, final, double, resultb, =, -, (, result, -, za, -, zb, ), ;, final, double, pia, =, 1.5707963267948966]
[;, final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia]
[;, final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia]
[), ;, final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =]
[-, zb, ), ;, final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;]
[-, za, -, zb, ), ;, final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *]
[-, zb, ), ;, final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;]
[), ;, final, double, pia, =, 1.5707963267948966, *, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =]
[;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia, -, result, ;, zb, =, -, (, za]
[*, 2, ;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia, -, result, ;, zb, =, -]
[;, final, double, pib, =, 6.123233995736766E-17, *, 2, ;, za, =, pia, -, result, ;, zb, =, -, (, za]
[;, za, =, pia, -, result, ;, zb, =, -, (, za, -, pia, +, result, ), ;, zb, +=]
[*, 2, ;, za, =, pia, -, result, ;, zb, =, -, (, za, -, pia, +, result, ), ;]
[;, za, =, pia, -, result, ;, zb, =, -, (, za, -, pia, +, result, ), ;, zb, +=]
[=, pia, -, result, ;, zb, =, -, (, za, -, pia, +, result, ), ;, zb, +=, pib, -]
[;, zb, =, -, (, za, -, pia, +, result, ), ;, zb, +=, pib, -, resultb, ;, result, =]
[-, result, ;, zb, =, -, (, za, -, pia, +, result, ), ;, zb, +=, pib, -, resultb, ;]
[;, zb, =, -, (, za, -, pia, +, result, ), ;, zb, +=, pib, -, resultb, ;, result, =]
[=, -, (, za, -, pia, +, result, ), ;, zb, +=, pib, -, resultb, ;, result, =, za, +]
[;, zb, +=, pib, -, resultb, ;, result, =, za, +, zb, ;, }, if, (, negate, ^, leftPlane, )]
[;, zb, +=, pib, -, resultb, ;, result, =, za, +, zb, ;, }, if, (, negate, ^, leftPlane, )]
[), ;, zb, +=, pib, -, resultb, ;, result, =, za, +, zb, ;, }, if, (, negate, ^, leftPlane]
[+, result, ), ;, zb, +=, pib, -, resultb, ;, result, =, za, +, zb, ;, }, if, (, negate]
[-, pia, +, result, ), ;, zb, +=, pib, -, resultb, ;, result, =, za, +, zb, ;, }, if]
[+, result, ), ;, zb, +=, pib, -, resultb, ;, result, =, za, +, zb, ;, }, if, (, negate]
[), ;, zb, +=, pib, -, resultb, ;, result, =, za, +, zb, ;, }, if, (, negate, ^, leftPlane]
[+=, pib, -, resultb, ;, result, =, za, +, zb, ;, }, if, (, negate, ^, leftPlane, ), {, result]
[;, result, =, za, +, zb, ;, }, if, (, negate, ^, leftPlane, ), {, result, =, -, result, ;]
[-, resultb, ;, result, =, za, +, zb, ;, }, if, (, negate, ^, leftPlane, ), {, result, =, -]
[;, result, =, za, +, zb, ;, }, if, (, negate, ^, leftPlane, ), {, result, =, -, result, ;]
[=, za, +, zb, ;, }, if, (, negate, ^, leftPlane, ), {, result, =, -, result, ;, }, return]
[;, }, if, (, negate, ^, leftPlane, ), {, result, =, -, result, ;, }, return, result, ;, }, public]
[+, zb, ;, }, if, (, negate, ^, leftPlane, ), {, result, =, -, result, ;, }, return, result, ;]
[;, }, if, (, negate, ^, leftPlane, ), {, result, =, -, result, ;, }, return, result, ;, }, public]
[), {, result, =, -, result, ;, }, return, result, ;, }, public, static, double, atan2, (, double, y, ,]
[^, leftPlane, ), {, result, =, -, result, ;, }, return, result, ;, }, public, static, double, atan2, (, double]
[), {, result, =, -, result, ;, }, return, result, ;, }, public, static, double, atan2, (, double, y, ,]
[=, -, result, ;, }, return, result, ;, }, public, static, double, atan2, (, double, y, ,, double, x, )]
[;, }, return, result, ;, }, public, static, double, atan2, (, double, y, ,, double, x, ), {, if, (]
[;, }, return, result, ;, }, public, static, double, atan2, (, double, y, ,, double, x, ), {, if, (]
[;, }, public, static, double, atan2, (, double, y, ,, double, x, ), {, if, (, x, !=, x, ||]
[), {, return, Double, ., NaN, ;, }, if, (, y, ==, 0, ), {, final, double, result, =, x]
[||, y, !=, y, ), {, return, Double, ., NaN, ;, }, if, (, y, ==, 0, ), {, final]
[!=, x, ||, y, !=, y, ), {, return, Double, ., NaN, ;, }, if, (, y, ==, 0, )]
[||, y, !=, y, ), {, return, Double, ., NaN, ;, }, if, (, y, ==, 0, ), {, final]
[), {, return, Double, ., NaN, ;, }, if, (, y, ==, 0, ), {, final, double, result, =, x]
[!=, y, ), {, return, Double, ., NaN, ;, }, if, (, y, ==, 0, ), {, final, double, result]
[), {, return, Double, ., NaN, ;, }, if, (, y, ==, 0, ), {, final, double, result, =, x]
[;, }, if, (, y, ==, 0, ), {, final, double, result, =, x, *, y, ;, final, double, invx]
[., NaN, ;, }, if, (, y, ==, 0, ), {, final, double, result, =, x, *, y, ;, final]
[), {, final, double, result, =, x, *, y, ;, final, double, invx, =, 1d, /, x, ;, final, double]
[==, 0, ), {, final, double, result, =, x, *, y, ;, final, double, invx, =, 1d, /, x, ;]
[), {, final, double, result, =, x, *, y, ;, final, double, invx, =, 1d, /, x, ;, final, double]
[;, final, double, invx, =, 1d, /, x, ;, final, double, invy, =, 1d, /, y, ;, if, (, invx]
[*, y, ;, final, double, invx, =, 1d, /, x, ;, final, double, invy, =, 1d, /, y, ;, if]
[;, final, double, invx, =, 1d, /, x, ;, final, double, invy, =, 1d, /, y, ;, if, (, invx]
[;, final, double, invy, =, 1d, /, y, ;, if, (, invx, ==, 0, ), {, if, (, x, >]
[/, x, ;, final, double, invy, =, 1d, /, y, ;, if, (, invx, ==, 0, ), {, if, (]
[;, final, double, invy, =, 1d, /, y, ;, if, (, invx, ==, 0, ), {, if, (, x, >]
[;, if, (, invx, ==, 0, ), {, if, (, x, >, 0, ), {, return, y, ;, }, else]
[/, y, ;, if, (, invx, ==, 0, ), {, if, (, x, >, 0, ), {, return, y, ;]
[;, if, (, invx, ==, 0, ), {, if, (, x, >, 0, ), {, return, y, ;, }, else]
[), {, if, (, x, >, 0, ), {, return, y, ;, }, else, {, return, copySign, (, Math, .]
[==, 0, ), {, if, (, x, >, 0, ), {, return, y, ;, }, else, {, return, copySign, (]
[), {, if, (, x, >, 0, ), {, return, y, ;, }, else, {, return, copySign, (, Math, .]
[), {, return, y, ;, }, else, {, return, copySign, (, Math, ., PI, ,, y, ), ;, }, }]
[>, 0, ), {, return, y, ;, }, else, {, return, copySign, (, Math, ., PI, ,, y, ), ;]
[), {, return, y, ;, }, else, {, return, copySign, (, Math, ., PI, ,, y, ), ;, }, }]
[;, }, else, {, return, copySign, (, Math, ., PI, ,, y, ), ;, }, }, if, (, x, <]
[;, }, }, if, (, x, <, 0, ||, invx, <, 0, ), {, if, (, y, <, 0, ||]
[,, y, ), ;, }, }, if, (, x, <, 0, ||, invx, <, 0, ), {, if, (, y]
[., PI, ,, y, ), ;, }, }, if, (, x, <, 0, ||, invx, <, 0, ), {, if]
[), ;, }, }, if, (, x, <, 0, ||, invx, <, 0, ), {, if, (, y, <, 0]
[), {, if, (, y, <, 0, ||, invy, <, 0, ), {, return, -, Math, ., PI, ;, }]
[||, invx, <, 0, ), {, if, (, y, <, 0, ||, invy, <, 0, ), {, return, -, Math]
[<, 0, ||, invx, <, 0, ), {, if, (, y, <, 0, ||, invy, <, 0, ), {, return]
[||, invx, <, 0, ), {, if, (, y, <, 0, ||, invy, <, 0, ), {, return, -, Math]
[), {, if, (, y, <, 0, ||, invy, <, 0, ), {, return, -, Math, ., PI, ;, }]
[<, 0, ), {, if, (, y, <, 0, ||, invy, <, 0, ), {, return, -, Math, ., PI]
[), {, if, (, y, <, 0, ||, invy, <, 0, ), {, return, -, Math, ., PI, ;, }]
[), {, return, -, Math, ., PI, ;, }, else, {, return, Math, ., PI, ;, }, }, else, {]
[||, invy, <, 0, ), {, return, -, Math, ., PI, ;, }, else, {, return, Math, ., PI, ;]
[<, 0, ||, invy, <, 0, ), {, return, -, Math, ., PI, ;, }, else, {, return, Math, .]
[||, invy, <, 0, ), {, return, -, Math, ., PI, ;, }, else, {, return, Math, ., PI, ;]
[), {, return, -, Math, ., PI, ;, }, else, {, return, Math, ., PI, ;, }, }, else, {]
[<, 0, ), {, return, -, Math, ., PI, ;, }, else, {, return, Math, ., PI, ;, }, }]
[), {, return, -, Math, ., PI, ;, }, else, {, return, Math, ., PI, ;, }, }, else, {]
[;, }, else, {, return, Math, ., PI, ;, }, }, else, {, return, result, ;, }, }, if, (]
[;, }, else, {, return, Math, ., PI, ;, }, }, else, {, return, result, ;, }, }, if, (]
[., PI, ;, }, else, {, return, Math, ., PI, ;, }, }, else, {, return, result, ;, }, }]
[;, }, }, else, {, return, result, ;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if]
[., PI, ;, }, }, else, {, return, result, ;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, )]
[;, }, }, if, (, y, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, )]
[), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Math, ., PI, *, F_1_4, ;, }, if]
[==, Double, ., POSITIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Math, ., PI, *]
[), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Math, ., PI, *, F_1_4, ;, }, if]
[., POSITIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, Math, ., PI, *, F_1_4, ;]
[), {, return, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return]
[==, Double, ., POSITIVE_INFINITY, ), {, return, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, .]
[), {, return, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return]
[., POSITIVE_INFINITY, ), {, return, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, )]
[;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, Math, ., PI, *, F_3_4, ;, }, return]
[*, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, Math, ., PI, *, F_3_4, ;]
[., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, Math, ., PI, *]
[;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, Math, ., PI, *, F_3_4, ;, }, return]
[), {, return, Math, ., PI, *, F_3_4, ;, }, return, Math, ., PI, *, F_1_2, ;, }, if, (]
[==, Double, ., NEGATIVE_INFINITY, ), {, return, Math, ., PI, *, F_3_4, ;, }, return, Math, ., PI, *, F_1_2]
[), {, return, Math, ., PI, *, F_3_4, ;, }, return, Math, ., PI, *, F_1_2, ;, }, if, (]
[., NEGATIVE_INFINITY, ), {, return, Math, ., PI, *, F_3_4, ;, }, return, Math, ., PI, *, F_1_2, ;, }]
[;, }, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if]
[*, F_3_4, ;, }, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, )]
[., PI, *, F_3_4, ;, }, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, ==, Double, .]
[;, }, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if]
[;, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {]
[*, F_1_2, ;, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY]
[., PI, *, F_1_2, ;, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, ==, Double]
[;, }, if, (, y, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {]
[), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_1_4, ;, }]
[==, Double, ., NEGATIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, -, Math, ., PI]
[), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_1_4, ;, }]
[., NEGATIVE_INFINITY, ), {, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_1_4]
[), {, return, -, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {]
[==, Double, ., POSITIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double]
[), {, return, -, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {]
[., POSITIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY]
[;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_3_4, ;, }]
[*, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_3_4]
[*, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_3_4]
[., PI, *, F_1_4, ;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, -, Math, ., PI]
[;, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_3_4, ;, }]
[), {, return, -, Math, ., PI, *, F_3_4, ;, }, return, -, Math, ., PI, *, F_1_2, ;, }]
[==, Double, ., NEGATIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_3_4, ;, }, return, -, Math, ., PI]
[), {, return, -, Math, ., PI, *, F_3_4, ;, }, return, -, Math, ., PI, *, F_1_2, ;, }]
[., NEGATIVE_INFINITY, ), {, return, -, Math, ., PI, *, F_3_4, ;, }, return, -, Math, ., PI, *, F_1_2]
[;, }, return, -, Math, ., PI, *, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {]
[*, F_3_4, ;, }, return, -, Math, ., PI, *, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY]
[*, F_3_4, ;, }, return, -, Math, ., PI, *, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY]
[., PI, *, F_3_4, ;, }, return, -, Math, ., PI, *, F_1_2, ;, }, if, (, x, ==, Double]
[;, }, return, -, Math, ., PI, *, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {]
[;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, >, 0, ||, 1, /, y]
[*, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, >, 0, ||, 1]
[*, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, >, 0, ||, 1]
[., PI, *, F_1_2, ;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, >, 0]
[;, }, if, (, x, ==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, >, 0, ||, 1, /, y]
[), {, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return, 0d, ;, }, if]
[==, Double, ., POSITIVE_INFINITY, ), {, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return]
[), {, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return, 0d, ;, }, if]
[., POSITIVE_INFINITY, ), {, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return, 0d, ;]
[), {, return, 0d, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return]
[||, 1, /, y, >, 0, ), {, return, 0d, ;, }, if, (, y, <, 0, ||, 1, /]
[>, 0, ||, 1, /, y, >, 0, ), {, return, 0d, ;, }, if, (, y, <, 0, ||]
[||, 1, /, y, >, 0, ), {, return, 0d, ;, }, if, (, y, <, 0, ||, 1, /]
[), {, return, 0d, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return]
[>, 0, ), {, return, 0d, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, )]
[/, y, >, 0, ), {, return, 0d, ;, }, if, (, y, <, 0, ||, 1, /, y, <]
[>, 0, ), {, return, 0d, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, )]
[), {, return, 0d, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return]
[;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -, 0d, ;, }]
[), {, return, -, 0d, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y]
[||, 1, /, y, <, 0, ), {, return, -, 0d, ;, }, }, if, (, x, ==, Double, .]
[<, 0, ||, 1, /, y, <, 0, ), {, return, -, 0d, ;, }, }, if, (, x, ==]
[||, 1, /, y, <, 0, ), {, return, -, 0d, ;, }, }, if, (, x, ==, Double, .]
[), {, return, -, 0d, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y]
[<, 0, ), {, return, -, 0d, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if]
[/, y, <, 0, ), {, return, -, 0d, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, )]
[<, 0, ), {, return, -, 0d, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if]
[), {, return, -, 0d, ;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y]
[;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, >, 0.0, ||, 1, /]
[;, }, }, if, (, x, ==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, >, 0.0, ||, 1, /]
[), {, if, (, y, >, 0.0, ||, 1, /, y, >, 0.0, ), {, return, Math, ., PI, ;]
[==, Double, ., NEGATIVE_INFINITY, ), {, if, (, y, >, 0.0, ||, 1, /, y, >, 0.0, ), {, return]
[), {, if, (, y, >, 0.0, ||, 1, /, y, >, 0.0, ), {, return, Math, ., PI, ;]
[., NEGATIVE_INFINITY, ), {, if, (, y, >, 0.0, ||, 1, /, y, >, 0.0, ), {, return, Math, .]
[), {, return, Math, ., PI, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, )]
[||, 1, /, y, >, 0.0, ), {, return, Math, ., PI, ;, }, if, (, y, <, 0, ||]
[>, 0.0, ||, 1, /, y, >, 0.0, ), {, return, Math, ., PI, ;, }, if, (, y, <]
[||, 1, /, y, >, 0.0, ), {, return, Math, ., PI, ;, }, if, (, y, <, 0, ||]
[), {, return, Math, ., PI, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, )]
[>, 0.0, ), {, return, Math, ., PI, ;, }, if, (, y, <, 0, ||, 1, /, y, <]
[/, y, >, 0.0, ), {, return, Math, ., PI, ;, }, if, (, y, <, 0, ||, 1, /]
[>, 0.0, ), {, return, Math, ., PI, ;, }, if, (, y, <, 0, ||, 1, /, y, <]
[), {, return, Math, ., PI, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, )]
[;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -, Math, ., PI]
[., PI, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -, Math]
[), {, return, -, Math, ., PI, ;, }, }, if, (, x, ==, 0, ), {, if, (, y]
[||, 1, /, y, <, 0, ), {, return, -, Math, ., PI, ;, }, }, if, (, x, ==]
[<, 0, ||, 1, /, y, <, 0, ), {, return, -, Math, ., PI, ;, }, }, if, (]
[||, 1, /, y, <, 0, ), {, return, -, Math, ., PI, ;, }, }, if, (, x, ==]
[), {, return, -, Math, ., PI, ;, }, }, if, (, x, ==, 0, ), {, if, (, y]
[<, 0, ), {, return, -, Math, ., PI, ;, }, }, if, (, x, ==, 0, ), {, if]
[/, y, <, 0, ), {, return, -, Math, ., PI, ;, }, }, if, (, x, ==, 0, )]
[<, 0, ), {, return, -, Math, ., PI, ;, }, }, if, (, x, ==, 0, ), {, if]
[), {, return, -, Math, ., PI, ;, }, }, if, (, x, ==, 0, ), {, if, (, y]
[;, }, }, if, (, x, ==, 0, ), {, if, (, y, >, 0, ||, 1, /, y, >]
[;, }, }, if, (, x, ==, 0, ), {, if, (, y, >, 0, ||, 1, /, y, >]
[., PI, ;, }, }, if, (, x, ==, 0, ), {, if, (, y, >, 0, ||, 1, /]
[), {, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return, Math, ., PI, *]
[==, 0, ), {, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return, Math, .]
[), {, if, (, y, >, 0, ||, 1, /, y, >, 0, ), {, return, Math, ., PI, *]
[), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||, 1, /, y, <]
[||, 1, /, y, >, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <]
[>, 0, ||, 1, /, y, >, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (]
[||, 1, /, y, >, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <]
[), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||, 1, /, y, <]
[>, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||, 1, /]
[/, y, >, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||]
[>, 0, ), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||, 1, /]
[), {, return, Math, ., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||, 1, /, y, <]
[;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -, Math, ., PI]
[*, F_1_2, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -, Math]
[., PI, *, F_1_2, ;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return]
[;, }, if, (, y, <, 0, ||, 1, /, y, <, 0, ), {, return, -, Math, ., PI]
[), {, return, -, Math, ., PI, *, F_1_2, ;, }, }, final, double, r, =, y, /, x, ;]
[||, 1, /, y, <, 0, ), {, return, -, Math, ., PI, *, F_1_2, ;, }, }, final, double]
[<, 0, ||, 1, /, y, <, 0, ), {, return, -, Math, ., PI, *, F_1_2, ;, }, }]
[||, 1, /, y, <, 0, ), {, return, -, Math, ., PI, *, F_1_2, ;, }, }, final, double]
[), {, return, -, Math, ., PI, *, F_1_2, ;, }, }, final, double, r, =, y, /, x, ;]
[<, 0, ), {, return, -, Math, ., PI, *, F_1_2, ;, }, }, final, double, r, =, y, /]
[/, y, <, 0, ), {, return, -, Math, ., PI, *, F_1_2, ;, }, }, final, double, r, =]
[<, 0, ), {, return, -, Math, ., PI, *, F_1_2, ;, }, }, final, double, r, =, y, /]
[), {, return, -, Math, ., PI, *, F_1_2, ;, }, }, final, double, r, =, y, /, x, ;]
[;, }, }, final, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), )]
[*, F_1_2, ;, }, }, final, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r]
[*, F_1_2, ;, }, }, final, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r]
[., PI, *, F_1_2, ;, }, }, final, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite]
[;, }, }, final, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), )]
[;, if, (, Double, ., isInfinite, (, r, ), ), {, return, atan, (, r, ,, 0, ,, x, <]
[/, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return, atan, (, r, ,, 0, ,]
[;, if, (, Double, ., isInfinite, (, r, ), ), {, return, atan, (, r, ,, 0, ,, x, <]
[), {, return, atan, (, r, ,, 0, ,, x, <, 0, ), ;, }, double, ra, =, doubleHighPart, (]
[., isInfinite, (, r, ), ), {, return, atan, (, r, ,, 0, ,, x, <, 0, ), ;, }]
[), ), {, return, atan, (, r, ,, 0, ,, x, <, 0, ), ;, }, double, ra, =, doubleHighPart]
[;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, final, double, xa]
[,, 0, ,, x, <, 0, ), ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =]
[,, x, <, 0, ), ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -]
[), ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, final, double]
[<, 0, ), ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;]
[), ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, final, double]
[;, double, rb, =, r, -, ra, ;, final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb]
[), ;, double, rb, =, r, -, ra, ;, final, double, xa, =, doubleHighPart, (, x, ), ;, final, double]
[;, final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=]
[-, ra, ;, final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;]
[;, final, double, xa, =, doubleHighPart, (, x, ), ;, final, double, xb, =, x, -, xa, ;, rb, +=]
[;, final, double, xb, =, x, -, xa, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *]
[), ;, final, double, xb, =, x, -, xa, ;, rb, +=, (, y, -, ra, *, xa, -, ra]
[;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *]
[-, xa, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -]
[;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *]
[+=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, )]
[;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;]
[/, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb]
[), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -]
[-, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (]
[-, rb, *, xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;]
[-, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =]
[-, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;]
[-, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =]
[*, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, final, double]
[-, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =]
[-, rb, *, xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;]
[*, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +]
[-, rb, *, xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;]
[-, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (]
[*, xa, -, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =]
[-, rb, *, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (]
[), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -]
[*, xb, ), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -]
[), /, x, ;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -]
[;, final, double, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;]
[;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, if, (, ra, ==]
[+, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, if, (]
[;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, if, (, ra, ==]
[=, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, if, (, ra, ==, 0, )]
[;, ra, =, temp, ;, if, (, ra, ==, 0, ), {, ra, =, copySign, (, 0d, ,, y, )]
[;, ra, =, temp, ;, if, (, ra, ==, 0, ), {, ra, =, copySign, (, 0d, ,, y, )]
[), ;, ra, =, temp, ;, if, (, ra, ==, 0, ), {, ra, =, copySign, (, 0d, ,, y]
[-, rb, ), ;, ra, =, temp, ;, if, (, ra, ==, 0, ), {, ra, =, copySign, (, 0d]
[-, ra, -, rb, ), ;, ra, =, temp, ;, if, (, ra, ==, 0, ), {, ra, =, copySign]
[-, rb, ), ;, ra, =, temp, ;, if, (, ra, ==, 0, ), {, ra, =, copySign, (, 0d]
[), ;, ra, =, temp, ;, if, (, ra, ==, 0, ), {, ra, =, copySign, (, 0d, ,, y]
[=, temp, ;, if, (, ra, ==, 0, ), {, ra, =, copySign, (, 0d, ,, y, ), ;, }]
[;, if, (, ra, ==, 0, ), {, ra, =, copySign, (, 0d, ,, y, ), ;, }, final, double]
[), {, ra, =, copySign, (, 0d, ,, y, ), ;, }, final, double, result, =, atan, (, ra, ,]
[==, 0, ), {, ra, =, copySign, (, 0d, ,, y, ), ;, }, final, double, result, =, atan, (]
[), {, ra, =, copySign, (, 0d, ,, y, ), ;, }, final, double, result, =, atan, (, ra, ,]
[=, copySign, (, 0d, ,, y, ), ;, }, final, double, result, =, atan, (, ra, ,, rb, ,, x]
[;, }, final, double, result, =, atan, (, ra, ,, rb, ,, x, <, 0, ), ;, return, result, ;]
[,, y, ), ;, }, final, double, result, =, atan, (, ra, ,, rb, ,, x, <, 0, ), ;]
[), ;, }, final, double, result, =, atan, (, ra, ,, rb, ,, x, <, 0, ), ;, return, result]
[;, return, result, ;, }, public, static, double, asin, (, double, x, ), {, if, (, x, !=, x, )]
[,, rb, ,, x, <, 0, ), ;, return, result, ;, }, public, static, double, asin, (, double, x, )]
[,, x, <, 0, ), ;, return, result, ;, }, public, static, double, asin, (, double, x, ), {, if]
[), ;, return, result, ;, }, public, static, double, asin, (, double, x, ), {, if, (, x, !=, x]
[<, 0, ), ;, return, result, ;, }, public, static, double, asin, (, double, x, ), {, if, (, x]
[), ;, return, result, ;, }, public, static, double, asin, (, double, x, ), {, if, (, x, !=, x]
[;, }, public, static, double, asin, (, double, x, ), {, if, (, x, !=, x, ), {, return, Double]
[), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {]
[!=, x, ), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0]
[), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {]
[;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }]
[., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {, return, Double, ., NaN]
[), {, return, Double, ., NaN, ;, }, if, (, x, ==, 1.0, ), {, return, Math, ., PI, /]
[||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, 1.0, ), {]
[>, 1.0, ||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, 1.0]
[||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, 1.0, ), {]
[), {, return, Double, ., NaN, ;, }, if, (, x, ==, 1.0, ), {, return, Math, ., PI, /]
[<, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, 1.0, ), {, return, Math]
[), {, return, Double, ., NaN, ;, }, if, (, x, ==, 1.0, ), {, return, Math, ., PI, /]
[), {, return, Double, ., NaN, ;, }, if, (, x, ==, 1.0, ), {, return, Math, ., PI, /]
[;, }, if, (, x, ==, 1.0, ), {, return, Math, ., PI, /, 2.0, ;, }, if, (, x]
[., NaN, ;, }, if, (, x, ==, 1.0, ), {, return, Math, ., PI, /, 2.0, ;, }, if]
[), {, return, Math, ., PI, /, 2.0, ;, }, if, (, x, ==, -, 1.0, ), {, return, -]
[==, 1.0, ), {, return, Math, ., PI, /, 2.0, ;, }, if, (, x, ==, -, 1.0, ), {]
[), {, return, Math, ., PI, /, 2.0, ;, }, if, (, x, ==, -, 1.0, ), {, return, -]
[;, }, if, (, x, ==, -, 1.0, ), {, return, -, Math, ., PI, /, 2.0, ;, }, if]
[/, 2.0, ;, }, if, (, x, ==, -, 1.0, ), {, return, -, Math, ., PI, /, 2.0, ;]
[., PI, /, 2.0, ;, }, if, (, x, ==, -, 1.0, ), {, return, -, Math, ., PI, /]
[;, }, if, (, x, ==, -, 1.0, ), {, return, -, Math, ., PI, /, 2.0, ;, }, if]
[), {, return, -, Math, ., PI, /, 2.0, ;, }, if, (, x, ==, 0.0, ), {, return, x]
[==, -, 1.0, ), {, return, -, Math, ., PI, /, 2.0, ;, }, if, (, x, ==, 0.0, )]
[), {, return, -, Math, ., PI, /, 2.0, ;, }, if, (, x, ==, 0.0, ), {, return, x]
[), {, return, -, Math, ., PI, /, 2.0, ;, }, if, (, x, ==, 0.0, ), {, return, x]
[;, }, if, (, x, ==, 0.0, ), {, return, x, ;, }, double, temp, =, x, *, HEX_40000000, ;]
[/, 2.0, ;, }, if, (, x, ==, 0.0, ), {, return, x, ;, }, double, temp, =, x, *]
[/, 2.0, ;, }, if, (, x, ==, 0.0, ), {, return, x, ;, }, double, temp, =, x, *]
[., PI, /, 2.0, ;, }, if, (, x, ==, 0.0, ), {, return, x, ;, }, double, temp, =]
[;, }, if, (, x, ==, 0.0, ), {, return, x, ;, }, double, temp, =, x, *, HEX_40000000, ;]
[), {, return, x, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp]
[==, 0.0, ), {, return, x, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x]
[), {, return, x, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp]
[;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp, -, temp, ;, final]
[;, final, double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =, x, -, xa, ;, double]
[*, HEX_40000000, ;, final, double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =, x, -, xa]
[;, final, double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =, x, -, xa, ;, double]
[;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa]
[-, temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb]
[+, temp, -, temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;]
[-, temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb]
[;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa]
[;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb]
[-, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb]
[;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb]
[;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb]
[*, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya]
[;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb]
[;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb]
[+, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +]
[*, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =]
[*, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double]
[*, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =]
[+, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +]
[;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb]
[*, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;]
[;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb]
[=, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -]
[;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -]
[;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -]
[=, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -]
[;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;]
[;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;]
[;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb]
[+, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb]
[;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb]
[;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =]
[;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =]
[), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za]
[-, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, )]
[-, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -]
[-, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, )]
[), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za]
[=, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;]
[;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y, ;, y]
[+, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y]
[;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y, ;, y]
[+=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y, ;, y, =, sqrt]
[;, za, =, temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000]
[;, za, =, temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000]
[), ;, za, =, temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =, y, *]
[-, yb, ), ;, za, =, temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =]
[-, za, -, yb, ), ;, za, =, temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;]
[-, yb, ), ;, za, =, temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =]
[), ;, za, =, temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =, y, *]
[=, temp, ;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya]
[;, double, y, ;, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y]
[=, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;]
[;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya]
[), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -]
[=, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb]
[;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -]
[*, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (]
[;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -]
[=, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *]
[;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *]
[-, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *]
[+, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -]
[-, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *]
[;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *]
[=, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -]
[;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, )]
[-, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *]
[;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, )]
[+=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (]
[;, double, dx, =, zb, /, (, 2.0, *, y, ), ;, double, r, =, x, /, y, ;, temp]
[/, (, 2.0, *, y, ), ;, double, dx, =, zb, /, (, 2.0, *, y, ), ;, double, r]
[), /, (, 2.0, *, y, ), ;, double, dx, =, zb, /, (, 2.0, *, y, ), ;, double]
[-, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx, =, zb, /, (, 2.0, *]
[-, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx]
[-, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y]
[-, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx]
[*, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;]
[-, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx]
[-, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx, =, zb, /, (, 2.0, *]
[*, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx, =, zb, /, (]
[*, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx, =, zb]
[*, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx, =, zb, /, (]
[-, yb, *, yb, ), /, (, 2.0, *, y, ), ;, double, dx, =, zb, /, (, 2.0, *]
[), /, (, 2.0, *, y, ), ;, double, dx, =, zb, /, (, 2.0, *, y, ), ;, double]
[*, yb, ), /, (, 2.0, *, y, ), ;, double, dx, =, zb, /, (, 2.0, *, y, )]
[), /, (, 2.0, *, y, ), ;, double, dx, =, zb, /, (, 2.0, *, y, ), ;, double]
[;, double, dx, =, zb, /, (, 2.0, *, y, ), ;, double, r, =, x, /, y, ;, temp]
[), ;, double, dx, =, zb, /, (, 2.0, *, y, ), ;, double, r, =, x, /, y, ;]
[*, y, ), ;, double, dx, =, zb, /, (, 2.0, *, y, ), ;, double, r, =, x, /]
[), ;, double, dx, =, zb, /, (, 2.0, *, y, ), ;, double, r, =, x, /, y, ;]
[;, double, r, =, x, /, y, ;, temp, =, r, *, HEX_40000000, ;, double, ra, =, r, +, temp]
[/, (, 2.0, *, y, ), ;, double, r, =, x, /, y, ;, temp, =, r, *, HEX_40000000, ;]
[;, double, r, =, x, /, y, ;, temp, =, r, *, HEX_40000000, ;, double, ra, =, r, +, temp]
[), ;, double, r, =, x, /, y, ;, temp, =, r, *, HEX_40000000, ;, double, ra, =, r, +]
[*, y, ), ;, double, r, =, x, /, y, ;, temp, =, r, *, HEX_40000000, ;, double, ra, =]
[), ;, double, r, =, x, /, y, ;, temp, =, r, *, HEX_40000000, ;, double, ra, =, r, +]
[;, temp, =, r, *, HEX_40000000, ;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r]
[/, y, ;, temp, =, r, *, HEX_40000000, ;, double, ra, =, r, +, temp, -, temp, ;, double, rb]
[;, temp, =, r, *, HEX_40000000, ;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r]
[=, r, *, HEX_40000000, ;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra]
[;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[*, HEX_40000000, ;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb]
[;, double, ra, =, r, +, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[;, double, rb, =, r, -, ra, ;, rb, +=, (, x, -, ra, *, ya, -, ra, *, yb]
[-, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (, x, -, ra, *, ya, -, ra]
[+, temp, -, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (, x, -, ra, *, ya]
[-, temp, ;, double, rb, =, r, -, ra, ;, rb, +=, (, x, -, ra, *, ya, -, ra]
[;, double, rb, =, r, -, ra, ;, rb, +=, (, x, -, ra, *, ya, -, ra, *, yb]
[;, rb, +=, (, x, -, ra, *, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *]
[-, ra, ;, rb, +=, (, x, -, ra, *, ya, -, ra, *, yb, -, rb, *, ya, -]
[;, rb, +=, (, x, -, ra, *, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *]
[+=, (, x, -, ra, *, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *, yb, )]
[;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =]
[/, y, ;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb, ;]
[), /, y, ;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb]
[-, rb, *, yb, ), /, y, ;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp]
[-, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=, -, x, *, dx, /, y]
[-, ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=, -, x]
[-, ra, *, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;]
[-, ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=, -, x]
[*, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=]
[-, ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=, -, x]
[-, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=, -, x, *, dx, /, y]
[*, yb, -, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=, -, x, *, dx]
[-, rb, *, ya, -, rb, *, yb, ), /, y, ;, rb, +=, -, x, *, dx, /, y]
[-, rb, *, yb, ), /, y, ;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp]
[*, ya, -, rb, *, yb, ), /, y, ;, rb, +=, -, x, *, dx, /, y, /, y]
[-, rb, *, yb, ), /, y, ;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp]
[), /, y, ;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb]
[*, yb, ), /, y, ;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp, =, ra]
[), /, y, ;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb]
[;, rb, +=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =]
[+=, -, x, *, dx, /, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =, -, (]
[;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =]
[/, y, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;]
[/, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb]
[*, dx, /, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra]
[*, dx, /, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra]
[/, y, /, y, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb]
[/, y, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;]
[;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =]
[=, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;]
[;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra]
[+, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan]
[;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra]
[=, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb]
[;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, false, ), ;, }, public, static, double, acos]
[;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, false, ), ;, }, public, static, double, acos]
[), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, false, ), ;, }, public, static, double]
[-, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, false, ), ;, }, public]
[-, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, false, ), ;]
[-, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, false, ), ;, }, public]
[), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, false, ), ;, }, public, static, double]
[=, temp, ;, return, atan, (, ra, ,, rb, ,, false, ), ;, }, public, static, double, acos, (, double]
[;, return, atan, (, ra, ,, rb, ,, false, ), ;, }, public, static, double, acos, (, double, x, )]
[;, }, public, static, double, acos, (, double, x, ), {, if, (, x, !=, x, ), {, return, Double]
[,, rb, ,, false, ), ;, }, public, static, double, acos, (, double, x, ), {, if, (, x, !=]
[,, false, ), ;, }, public, static, double, acos, (, double, x, ), {, if, (, x, !=, x, )]
[), ;, }, public, static, double, acos, (, double, x, ), {, if, (, x, !=, x, ), {, return]
[), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {]
[!=, x, ), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0]
[), {, return, Double, ., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {]
[;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }]
[., NaN, ;, }, if, (, x, >, 1.0, ||, x, <, -, 1.0, ), {, return, Double, ., NaN]
[), {, return, Double, ., NaN, ;, }, if, (, x, ==, -, 1.0, ), {, return, Math, ., PI]
[||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, -, 1.0, )]
[>, 1.0, ||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, -]
[||, x, <, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, -, 1.0, )]
[), {, return, Double, ., NaN, ;, }, if, (, x, ==, -, 1.0, ), {, return, Math, ., PI]
[<, -, 1.0, ), {, return, Double, ., NaN, ;, }, if, (, x, ==, -, 1.0, ), {, return]
[), {, return, Double, ., NaN, ;, }, if, (, x, ==, -, 1.0, ), {, return, Math, ., PI]
[), {, return, Double, ., NaN, ;, }, if, (, x, ==, -, 1.0, ), {, return, Math, ., PI]
[;, }, if, (, x, ==, -, 1.0, ), {, return, Math, ., PI, ;, }, if, (, x, ==]
[., NaN, ;, }, if, (, x, ==, -, 1.0, ), {, return, Math, ., PI, ;, }, if, (]
[), {, return, Math, ., PI, ;, }, if, (, x, ==, 1.0, ), {, return, 0.0, ;, }, if]
[==, -, 1.0, ), {, return, Math, ., PI, ;, }, if, (, x, ==, 1.0, ), {, return, 0.0]
[), {, return, Math, ., PI, ;, }, if, (, x, ==, 1.0, ), {, return, 0.0, ;, }, if]
[), {, return, Math, ., PI, ;, }, if, (, x, ==, 1.0, ), {, return, 0.0, ;, }, if]
[;, }, if, (, x, ==, 1.0, ), {, return, 0.0, ;, }, if, (, x, ==, 0, ), {]
[., PI, ;, }, if, (, x, ==, 1.0, ), {, return, 0.0, ;, }, if, (, x, ==, 0]
[), {, return, 0.0, ;, }, if, (, x, ==, 0, ), {, return, Math, ., PI, /, 2.0, ;]
[==, 1.0, ), {, return, 0.0, ;, }, if, (, x, ==, 0, ), {, return, Math, ., PI, /]
[), {, return, 0.0, ;, }, if, (, x, ==, 0, ), {, return, Math, ., PI, /, 2.0, ;]
[;, }, if, (, x, ==, 0, ), {, return, Math, ., PI, /, 2.0, ;, }, double, temp, =]
[), {, return, Math, ., PI, /, 2.0, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa]
[==, 0, ), {, return, Math, ., PI, /, 2.0, ;, }, double, temp, =, x, *, HEX_40000000, ;, final]
[), {, return, Math, ., PI, /, 2.0, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa]
[;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp, -, temp, ;, final]
[/, 2.0, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp, -, temp]
[., PI, /, 2.0, ;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp]
[;, }, double, temp, =, x, *, HEX_40000000, ;, final, double, xa, =, x, +, temp, -, temp, ;, final]
[;, final, double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =, x, -, xa, ;, double]
[*, HEX_40000000, ;, final, double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =, x, -, xa]
[;, final, double, xa, =, x, +, temp, -, temp, ;, final, double, xb, =, x, -, xa, ;, double]
[;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa]
[-, temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb]
[+, temp, -, temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;]
[-, temp, ;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb]
[;, final, double, xb, =, x, -, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa]
[;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb]
[-, xa, ;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb]
[;, double, ya, =, xa, *, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb]
[;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb]
[*, xa, ;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya]
[;, double, yb, =, xa, *, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb]
[;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb]
[+, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +]
[*, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =]
[*, xb, *, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double]
[*, 2.0, +, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =]
[+, xb, *, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +]
[;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb]
[*, xb, ;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;]
[;, ya, =, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb]
[=, -, ya, ;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -]
[;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -]
[;, yb, =, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -]
[=, -, yb, ;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -]
[;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;]
[;, double, za, =, 1.0, +, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;]
[;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb]
[+, ya, ;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb]
[;, double, zb, =, -, (, za, -, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb]
[;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =]
[;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =]
[), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za]
[-, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, )]
[-, 1.0, -, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -]
[-, ya, ), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, )]
[), ;, temp, =, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za]
[=, za, +, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;]
[;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y, =, sqrt]
[+, yb, ;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y]
[;, zb, +=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y, =, sqrt]
[+=, -, (, temp, -, za, -, yb, ), ;, za, =, temp, ;, double, y, =, sqrt, (, za]
[;, za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya]
[;, za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya]
[), ;, za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;]
[-, yb, ), ;, za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *]
[-, za, -, yb, ), ;, za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =]
[-, yb, ), ;, za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *]
[), ;, za, =, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;]
[=, temp, ;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y]
[;, double, y, =, sqrt, (, za, ), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp]
[;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya]
[), ;, temp, =, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -]
[=, y, *, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb]
[;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -]
[*, HEX_40000000, ;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (]
[;, ya, =, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -]
[=, y, +, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *]
[;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *]
[-, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *]
[+, temp, -, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -]
[-, temp, ;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *]
[;, yb, =, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *]
[=, y, -, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -]
[;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, )]
[-, ya, ;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *]
[;, yb, +=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, )]
[+=, (, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (]
[;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;, yb, =, -]
[/, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =, ya]
[), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =]
[-, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0, *, y]
[-, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=]
[-, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y]
[-, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=]
[*, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;]
[-, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=]
[-, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0, *, y]
[*, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0]
[*, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=, zb, /]
[*, yb, -, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0]
[-, yb, *, yb, ), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0, *, y]
[), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =]
[*, yb, ), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;]
[), /, (, 2.0, *, y, ), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =]
[;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;, yb, =, -]
[), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;, yb, =]
[*, y, ), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;]
[), ;, yb, +=, zb, /, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;, yb, =]
[+=, zb, /, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;, yb, =, -, (, y]
[;, y, =, ya, +, yb, ;, yb, =, -, (, y, -, ya, -, yb, ), ;, double, r]
[/, (, 2.0, *, y, ), ;, y, =, ya, +, yb, ;, yb, =, -, (, y, -, ya]
[;, y, =, ya, +, yb, ;, yb, =, -, (, y, -, ya, -, yb, ), ;, double, r]
[), ;, y, =, ya, +, yb, ;, yb, =, -, (, y, -, ya, -, yb, ), ;, double]
[*, y, ), ;, y, =, ya, +, yb, ;, yb, =, -, (, y, -, ya, -, yb, )]
[), ;, y, =, ya, +, yb, ;, yb, =, -, (, y, -, ya, -, yb, ), ;, double]
[=, ya, +, yb, ;, yb, =, -, (, y, -, ya, -, yb, ), ;, double, r, =, y]
[;, yb, =, -, (, y, -, ya, -, yb, ), ;, double, r, =, y, /, x, ;, if]
[+, yb, ;, yb, =, -, (, y, -, ya, -, yb, ), ;, double, r, =, y, /, x]
[;, yb, =, -, (, y, -, ya, -, yb, ), ;, double, r, =, y, /, x, ;, if]
[=, -, (, y, -, ya, -, yb, ), ;, double, r, =, y, /, x, ;, if, (, Double]
[;, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return, Math]
[;, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return, Math]
[), ;, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return]
[-, yb, ), ;, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), )]
[-, ya, -, yb, ), ;, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r]
[-, yb, ), ;, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), )]
[), ;, double, r, =, y, /, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return]
[;, if, (, Double, ., isInfinite, (, r, ), ), {, return, Math, ., PI, /, 2, ;, }, double]
[/, x, ;, if, (, Double, ., isInfinite, (, r, ), ), {, return, Math, ., PI, /, 2, ;]
[;, if, (, Double, ., isInfinite, (, r, ), ), {, return, Math, ., PI, /, 2, ;, }, double]
[), {, return, Math, ., PI, /, 2, ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb]
[., isInfinite, (, r, ), ), {, return, Math, ., PI, /, 2, ;, }, double, ra, =, doubleHighPart, (]
[), ), {, return, Math, ., PI, /, 2, ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double]
[;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[/, 2, ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, rb]
[., PI, /, 2, ;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra]
[;, }, double, ra, =, doubleHighPart, (, r, ), ;, double, rb, =, r, -, ra, ;, rb, +=, (]
[;, double, rb, =, r, -, ra, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb]
[), ;, double, rb, =, r, -, ra, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *]
[;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *]
[-, ra, ;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -]
[;, rb, +=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *]
[+=, (, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, )]
[;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra]
[/, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp]
[), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (]
[-, rb, *, xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;]
[-, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =]
[-, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=, yb, /]
[-, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;]
[-, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=, yb, /]
[*, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=]
[-, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=, yb, /]
[-, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =]
[*, xb, -, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=, yb, /, x, ;]
[-, rb, *, xa, -, rb, *, xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =]
[-, rb, *, xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;]
[*, xa, -, rb, *, xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +]
[-, rb, *, xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;]
[), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (]
[*, xb, ), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =]
[), /, x, ;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (]
[;, rb, +=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra]
[+=, yb, /, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb]
[;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =]
[/, x, ;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;]
[;, temp, =, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =]
[=, ra, +, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;]
[;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra]
[+, rb, ;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan]
[;, rb, =, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra]
[=, -, (, temp, -, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb]
[;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, x, <, 0, ), ;, }, public, static]
[;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, x, <, 0, ), ;, }, public, static]
[), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, x, <, 0, ), ;, }, public]
[-, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, x, <, 0, ), ;]
[-, ra, -, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, x, <, 0]
[-, rb, ), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, x, <, 0, ), ;]
[), ;, ra, =, temp, ;, return, atan, (, ra, ,, rb, ,, x, <, 0, ), ;, }, public]
[=, temp, ;, return, atan, (, ra, ,, rb, ,, x, <, 0, ), ;, }, public, static, double, cbrt]
[;, return, atan, (, ra, ,, rb, ,, x, <, 0, ), ;, }, public, static, double, cbrt, (, double]
[;, }, public, static, double, cbrt, (, double, x, ), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x, )]
[,, rb, ,, x, <, 0, ), ;, }, public, static, double, cbrt, (, double, x, ), {, long, inbits]
[,, x, <, 0, ), ;, }, public, static, double, cbrt, (, double, x, ), {, long, inbits, =, Double]
[), ;, }, public, static, double, cbrt, (, double, x, ), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x]
[<, 0, ), ;, }, public, static, double, cbrt, (, double, x, ), {, long, inbits, =, Double, ., doubleToRawLongBits]
[), ;, }, public, static, double, cbrt, (, double, x, ), {, long, inbits, =, Double, ., doubleToRawLongBits, (, x]
[;, int, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;]
[., doubleToRawLongBits, (, x, ), ;, int, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &]
[), ;, int, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023]
[;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, )]
[-, 1023, ;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==]
[-, 1023, ;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==]
[), -, 1023, ;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x]
[&, 0x7ff, ), -, 1023, ;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -, 1023, ), {, if]
[), &, 0x7ff, ), -, 1023, ;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -, 1023, ), {]
[>, >, 52, ), &, 0x7ff, ), -, 1023, ;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -]
[), &, 0x7ff, ), -, 1023, ;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -, 1023, ), {]
[), -, 1023, ;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x]
[;, boolean, subnormal, =, false, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, )]
[;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, return, x, ;, }]
[), {, if, (, x, ==, 0, ), {, return, x, ;, }, subnormal, =, true, ;, x, *=, 1.8014398509481984E16]
[==, -, 1023, ), {, if, (, x, ==, 0, ), {, return, x, ;, }, subnormal, =, true, ;]
[), {, if, (, x, ==, 0, ), {, return, x, ;, }, subnormal, =, true, ;, x, *=, 1.8014398509481984E16]
[), {, if, (, x, ==, 0, ), {, return, x, ;, }, subnormal, =, true, ;, x, *=, 1.8014398509481984E16]
[), {, return, x, ;, }, subnormal, =, true, ;, x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (]
[==, 0, ), {, return, x, ;, }, subnormal, =, true, ;, x, *=, 1.8014398509481984E16, ;, inbits, =, Double, .]
[), {, return, x, ;, }, subnormal, =, true, ;, x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (]
[;, }, subnormal, =, true, ;, x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, exponent]
[=, true, ;, x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =, (, int]
[;, x, *=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =, (, int, ), (]
[*=, 1.8014398509481984E16, ;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =, (, int, ), (, (, inbits]
[;, inbits, =, Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =, (, int, ), (, (, inbits, >, >]
[=, Double, ., doubleToRawLongBits, (, x, ), ;, exponent, =, (, int, ), (, (, inbits, >, >, 52, )]
[;, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, }]
[., doubleToRawLongBits, (, x, ), ;, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff]
[), ;, exponent, =, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;]
[=, (, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, }, if, (]
[;, }, if, (, exponent, ==, 1024, ), {, return, x, ;, }, int, exp3, =, exponent, /, 3, ;]
[-, 1023, ;, }, if, (, exponent, ==, 1024, ), {, return, x, ;, }, int, exp3, =, exponent, /]
[-, 1023, ;, }, if, (, exponent, ==, 1024, ), {, return, x, ;, }, int, exp3, =, exponent, /]
[), -, 1023, ;, }, if, (, exponent, ==, 1024, ), {, return, x, ;, }, int, exp3, =, exponent]
[&, 0x7ff, ), -, 1023, ;, }, if, (, exponent, ==, 1024, ), {, return, x, ;, }, int, exp3]
[), &, 0x7ff, ), -, 1023, ;, }, if, (, exponent, ==, 1024, ), {, return, x, ;, }, int]
[>, >, 52, ), &, 0x7ff, ), -, 1023, ;, }, if, (, exponent, ==, 1024, ), {, return, x]
[), &, 0x7ff, ), -, 1023, ;, }, if, (, exponent, ==, 1024, ), {, return, x, ;, }, int]
[), -, 1023, ;, }, if, (, exponent, ==, 1024, ), {, return, x, ;, }, int, exp3, =, exponent]
[;, }, if, (, exponent, ==, 1024, ), {, return, x, ;, }, int, exp3, =, exponent, /, 3, ;]
[), {, return, x, ;, }, int, exp3, =, exponent, /, 3, ;, double, p2, =, Double, ., longBitsToDouble, (]
[==, 1024, ), {, return, x, ;, }, int, exp3, =, exponent, /, 3, ;, double, p2, =, Double, .]
[), {, return, x, ;, }, int, exp3, =, exponent, /, 3, ;, double, p2, =, Double, ., longBitsToDouble, (]
[;, }, int, exp3, =, exponent, /, 3, ;, double, p2, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L]
[;, double, p2, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |, (, long, ), (, (, (]
[/, 3, ;, double, p2, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |, (, long, ), (]
[;, double, p2, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |, (, long, ), (, (, (]
[;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double, est]
[., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |, (, long, ), (, (, (, exp3, +, 1023, ), &]
[), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double]
[|, (, long, ), (, (, (, exp3, +, 1023, ), &, 0x7ff, ), ), <<, 52, ), ;, final]
[), |, (, long, ), (, (, (, exp3, +, 1023, ), &, 0x7ff, ), ), <<, 52, ), ;]
[&, 0x8000000000000000L, ), |, (, long, ), (, (, (, exp3, +, 1023, ), &, 0x7ff, ), ), <<, 52]
[), |, (, long, ), (, (, (, exp3, +, 1023, ), &, 0x7ff, ), ), <<, 52, ), ;]
[), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double]
[<<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, )]
[<<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, )]
[), <<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L]
[), ), <<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |]
[&, 0x7ff, ), ), <<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL]
[), &, 0x7ff, ), ), <<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &]
[+, 1023, ), &, 0x7ff, ), ), <<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (]
[), &, 0x7ff, ), ), <<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &]
[), ), <<, 52, ), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |]
[), ;, final, double, mant, =, Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double]
[;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *, mant]
[., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =]
[), ;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *]
[|, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =]
[), |, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;, est]
[&, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075]
[), |, 0x3ff0000000000000L, ), ;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;, est]
[), ;, double, est, =, -, 0.010714690733195933, ;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *]
[;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =]
[;, est, =, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =]
[=, est, *, mant, +, 0.0875862700108075, ;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *]
[;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =]
[+, 0.0875862700108075, ;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;]
[*, mant, +, 0.0875862700108075, ;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +]
[+, 0.0875862700108075, ;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;]
[;, est, =, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =]
[=, est, *, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *]
[;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO]
[+, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;]
[*, mant, +, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +]
[+, -, 0.3058015757857271, ;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;]
[;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO]
[;, est, =, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO]
[=, est, *, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent]
[;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;]
[+, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2]
[*, mant, +, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3]
[+, 0.7249995199969751, ;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2]
[;, est, =, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;]
[=, est, *, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double]
[;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =, x, /, (, p2]
[+, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =, x, /]
[*, mant, +, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =]
[+, 0.5039018405998233, ;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =, x, /]
[;, est, *=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =, x, /, (, p2]
[*=, CBRTTWO, [, exponent, %, 3, +, 2, ], ;, final, double, xs, =, x, /, (, p2, *, p2]
[;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;, est, +=, (, xs, -]
[[, exponent, %, 3, +, 2, ], ;, final, double, xs, =, x, /, (, p2, *, p2, *, p2]
[], ;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;, est, +=, (, xs]
[+, 2, ], ;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;, est, +=]
[%, 3, +, 2, ], ;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;]
[+, 2, ], ;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;, est, +=]
[], ;, final, double, xs, =, x, /, (, p2, *, p2, *, p2, ), ;, est, +=, (, xs]
[;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, )]
[/, (, p2, *, p2, *, p2, ), ;, est, +=, (, xs, -, est, *, est, *, est, )]
[;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, )]
[), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est]
[*, p2, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est]
[*, p2, *, p2, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3]
[*, p2, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est]
[), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est]
[+=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, est]
[;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, )]
[/, (, 3, *, est, *, est, ), ;, est, +=, (, xs, -, est, *, est, *, est, )]
[), /, (, 3, *, est, *, est, ), ;, est, +=, (, xs, -, est, *, est, *, est]
[-, est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, est, +=, (, xs]
[), /, (, 3, *, est, *, est, ), ;, est, +=, (, xs, -, est, *, est, *, est]
[*, est, ), /, (, 3, *, est, *, est, ), ;, est, +=, (, xs, -, est, *, est]
[*, est, *, est, ), /, (, 3, *, est, *, est, ), ;, est, +=, (, xs, -, est]
[*, est, ), /, (, 3, *, est, *, est, ), ;, est, +=, (, xs, -, est, *, est]
[), /, (, 3, *, est, *, est, ), ;, est, +=, (, xs, -, est, *, est, *, est]
[;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, )]
[), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est]
[*, est, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est]
[*, est, *, est, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3]
[*, est, ), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est]
[), ;, est, +=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est]
[+=, (, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, double]
[;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =, est, +, temp, -, temp, ;, double, yb, =]
[/, (, 3, *, est, *, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =, est]
[), /, (, 3, *, est, *, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =]
[-, est, *, est, *, est, ), /, (, 3, *, est, *, est, ), ;, double, temp, =, est]
[), /, (, 3, *, est, *, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =]
[*, est, ), /, (, 3, *, est, *, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double]
[*, est, *, est, ), /, (, 3, *, est, *, est, ), ;, double, temp, =, est, *, HEX_40000000]
[*, est, ), /, (, 3, *, est, *, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double]
[), /, (, 3, *, est, *, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =]
[;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =, est, +, temp, -, temp, ;, double, yb, =]
[), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =, est, +, temp, -, temp, ;, double, yb]
[*, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =, est, +, temp, -, temp, ;]
[*, est, *, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =, est, +, temp, -]
[*, est, ), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =, est, +, temp, -, temp, ;]
[), ;, double, temp, =, est, *, HEX_40000000, ;, double, ya, =, est, +, temp, -, temp, ;, double, yb]
[;, double, ya, =, est, +, temp, -, temp, ;, double, yb, =, est, -, ya, ;, double, za, =]
[*, HEX_40000000, ;, double, ya, =, est, +, temp, -, temp, ;, double, yb, =, est, -, ya, ;, double]
[;, double, ya, =, est, +, temp, -, temp, ;, double, yb, =, est, -, ya, ;, double, za, =]
[;, double, yb, =, est, -, ya, ;, double, za, =, ya, *, ya, ;, double, zb, =, ya, *]
[-, temp, ;, double, yb, =, est, -, ya, ;, double, za, =, ya, *, ya, ;, double, zb, =]
[+, temp, -, temp, ;, double, yb, =, est, -, ya, ;, double, za, =, ya, *, ya, ;, double]
[-, temp, ;, double, yb, =, est, -, ya, ;, double, za, =, ya, *, ya, ;, double, zb, =]
[;, double, yb, =, est, -, ya, ;, double, za, =, ya, *, ya, ;, double, zb, =, ya, *]
[;, double, za, =, ya, *, ya, ;, double, zb, =, ya, *, yb, *, 2.0, +, yb, *, yb]
[-, ya, ;, double, za, =, ya, *, ya, ;, double, zb, =, ya, *, yb, *, 2.0, +, yb]
[;, double, za, =, ya, *, ya, ;, double, zb, =, ya, *, yb, *, 2.0, +, yb, *, yb]
[;, double, zb, =, ya, *, yb, *, 2.0, +, yb, *, yb, ;, temp, =, za, *, HEX_40000000, ;]
[*, ya, ;, double, zb, =, ya, *, yb, *, 2.0, +, yb, *, yb, ;, temp, =, za, *]
[;, double, zb, =, ya, *, yb, *, 2.0, +, yb, *, yb, ;, temp, =, za, *, HEX_40000000, ;]
[;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -]
[+, yb, *, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;]
[*, 2.0, +, yb, *, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -]
[*, yb, *, 2.0, +, yb, *, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +]
[*, 2.0, +, yb, *, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -]
[+, yb, *, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;]
[;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -]
[*, yb, ;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=]
[;, temp, =, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -]
[=, za, *, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp2, ;]
[;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;]
[*, HEX_40000000, ;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp2, ;, za, =]
[;, double, temp2, =, za, +, temp, -, temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;]
[;, zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =, za, *, yb, +, ya, *, zb]
[-, temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =, za, *, yb, +, ya]
[+, temp, -, temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =, za, *, yb]
[-, temp, ;, zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =, za, *, yb, +, ya]
[;, zb, +=, za, -, temp2, ;, za, =, temp2, ;, zb, =, za, *, yb, +, ya, *, zb]
[+=, za, -, temp2, ;, za, =, temp2, ;, zb, =, za, *, yb, +, ya, *, zb, +, zb]
[;, za, =, temp2, ;, zb, =, za, *, yb, +, ya, *, zb, +, zb, *, yb, ;, za]
[-, temp2, ;, za, =, temp2, ;, zb, =, za, *, yb, +, ya, *, zb, +, zb, *, yb]
[;, za, =, temp2, ;, zb, =, za, *, yb, +, ya, *, zb, +, zb, *, yb, ;, za]
[=, temp2, ;, zb, =, za, *, yb, +, ya, *, zb, +, zb, *, yb, ;, za, =, za]
[;, zb, =, za, *, yb, +, ya, *, zb, +, zb, *, yb, ;, za, =, za, *, ya]
[=, za, *, yb, +, ya, *, zb, +, zb, *, yb, ;, za, =, za, *, ya, ;, double]
[;, za, =, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb, =, -, (, na]
[+, zb, *, yb, ;, za, =, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb]
[+, ya, *, zb, +, zb, *, yb, ;, za, =, za, *, ya, ;, double, na, =, xs, -]
[*, yb, +, ya, *, zb, +, zb, *, yb, ;, za, =, za, *, ya, ;, double, na, =]
[+, ya, *, zb, +, zb, *, yb, ;, za, =, za, *, ya, ;, double, na, =, xs, -]
[+, zb, *, yb, ;, za, =, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb]
[*, zb, +, zb, *, yb, ;, za, =, za, *, ya, ;, double, na, =, xs, -, za, ;]
[+, zb, *, yb, ;, za, =, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb]
[;, za, =, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb, =, -, (, na]
[*, yb, ;, za, =, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb, =, -]
[;, za, =, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb, =, -, (, na]
[=, za, *, ya, ;, double, na, =, xs, -, za, ;, double, nb, =, -, (, na, -, xs]
[;, double, na, =, xs, -, za, ;, double, nb, =, -, (, na, -, xs, +, za, ), ;]
[*, ya, ;, double, na, =, xs, -, za, ;, double, nb, =, -, (, na, -, xs, +, za]
[;, double, na, =, xs, -, za, ;, double, nb, =, -, (, na, -, xs, +, za, ), ;]
[;, double, nb, =, -, (, na, -, xs, +, za, ), ;, nb, -=, zb, ;, est, +=, (]
[-, za, ;, double, nb, =, -, (, na, -, xs, +, za, ), ;, nb, -=, zb, ;, est]
[;, double, nb, =, -, (, na, -, xs, +, za, ), ;, nb, -=, zb, ;, est, +=, (]
[;, nb, -=, zb, ;, est, +=, (, na, +, nb, ), /, (, 3, *, est, *, est, )]
[;, nb, -=, zb, ;, est, +=, (, na, +, nb, ), /, (, 3, *, est, *, est, )]
[), ;, nb, -=, zb, ;, est, +=, (, na, +, nb, ), /, (, 3, *, est, *, est]
[+, za, ), ;, nb, -=, zb, ;, est, +=, (, na, +, nb, ), /, (, 3, *, est]
[-, xs, +, za, ), ;, nb, -=, zb, ;, est, +=, (, na, +, nb, ), /, (, 3]
[+, za, ), ;, nb, -=, zb, ;, est, +=, (, na, +, nb, ), /, (, 3, *, est]
[), ;, nb, -=, zb, ;, est, +=, (, na, +, nb, ), /, (, 3, *, est, *, est]
[-=, zb, ;, est, +=, (, na, +, nb, ), /, (, 3, *, est, *, est, ), ;, est]
[;, est, +=, (, na, +, nb, ), /, (, 3, *, est, *, est, ), ;, est, *=, p2]
[+=, (, na, +, nb, ), /, (, 3, *, est, *, est, ), ;, est, *=, p2, ;, if]
[;, est, *=, p2, ;, if, (, subnormal, ), {, est, *=, 3.814697265625E-6, ;, }, return, est, ;, }, public]
[/, (, 3, *, est, *, est, ), ;, est, *=, p2, ;, if, (, subnormal, ), {, est, *=]
[), /, (, 3, *, est, *, est, ), ;, est, *=, p2, ;, if, (, subnormal, ), {, est]
[+, nb, ), /, (, 3, *, est, *, est, ), ;, est, *=, p2, ;, if, (, subnormal, )]
[), /, (, 3, *, est, *, est, ), ;, est, *=, p2, ;, if, (, subnormal, ), {, est]
[;, est, *=, p2, ;, if, (, subnormal, ), {, est, *=, 3.814697265625E-6, ;, }, return, est, ;, }, public]
[), ;, est, *=, p2, ;, if, (, subnormal, ), {, est, *=, 3.814697265625E-6, ;, }, return, est, ;, }]
[*, est, ), ;, est, *=, p2, ;, if, (, subnormal, ), {, est, *=, 3.814697265625E-6, ;, }, return, est]
[*, est, *, est, ), ;, est, *=, p2, ;, if, (, subnormal, ), {, est, *=, 3.814697265625E-6, ;, }]
[*, est, ), ;, est, *=, p2, ;, if, (, subnormal, ), {, est, *=, 3.814697265625E-6, ;, }, return, est]
[), ;, est, *=, p2, ;, if, (, subnormal, ), {, est, *=, 3.814697265625E-6, ;, }, return, est, ;, }]
[*=, p2, ;, if, (, subnormal, ), {, est, *=, 3.814697265625E-6, ;, }, return, est, ;, }, public, static, double]
[;, if, (, subnormal, ), {, est, *=, 3.814697265625E-6, ;, }, return, est, ;, }, public, static, double, toRadians, (]
[), {, est, *=, 3.814697265625E-6, ;, }, return, est, ;, }, public, static, double, toRadians, (, double, x, ), {]
[*=, 3.814697265625E-6, ;, }, return, est, ;, }, public, static, double, toRadians, (, double, x, ), {, if, (, Double]
[;, }, return, est, ;, }, public, static, double, toRadians, (, double, x, ), {, if, (, Double, ., isInfinite]
[;, }, public, static, double, toRadians, (, double, x, ), {, if, (, Double, ., isInfinite, (, x, ), ||]
[), {, return, x, ;, }, final, double, facta, =, 0.01745329052209854, ;, final, double, factb, =, 1.997844754509471E-9, ;, double, xa]
[||, x, ==, 0.0, ), {, return, x, ;, }, final, double, facta, =, 0.01745329052209854, ;, final, double, factb, =]
[., isInfinite, (, x, ), ||, x, ==, 0.0, ), {, return, x, ;, }, final, double, facta, =, 0.01745329052209854]
[), ||, x, ==, 0.0, ), {, return, x, ;, }, final, double, facta, =, 0.01745329052209854, ;, final, double, factb]
[), {, return, x, ;, }, final, double, facta, =, 0.01745329052209854, ;, final, double, factb, =, 1.997844754509471E-9, ;, double, xa]
[==, 0.0, ), {, return, x, ;, }, final, double, facta, =, 0.01745329052209854, ;, final, double, factb, =, 1.997844754509471E-9, ;]
[), {, return, x, ;, }, final, double, facta, =, 0.01745329052209854, ;, final, double, factb, =, 1.997844754509471E-9, ;, double, xa]
[;, }, final, double, facta, =, 0.01745329052209854, ;, final, double, factb, =, 1.997844754509471E-9, ;, double, xa, =, doubleHighPart, (, x]
[;, final, double, factb, =, 1.997844754509471E-9, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -]
[;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, double, result, =, xb]
[;, double, xb, =, x, -, xa, ;, double, result, =, xb, *, factb, +, xb, *, facta, +, xa]
[), ;, double, xb, =, x, -, xa, ;, double, result, =, xb, *, factb, +, xb, *, facta, +]
[;, double, result, =, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;]
[-, xa, ;, double, result, =, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *]
[;, double, result, =, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;]
[;, if, (, result, ==, 0, ), {, result, =, result, *, x, ;, }, return, result, ;, }, public]
[+, xa, *, facta, ;, if, (, result, ==, 0, ), {, result, =, result, *, x, ;, }, return]
[+, xa, *, factb, +, xa, *, facta, ;, if, (, result, ==, 0, ), {, result, =, result, *]
[+, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;, if, (, result, ==, 0, ), {]
[*, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;, if, (, result, ==, 0]
[+, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;, if, (, result, ==, 0, ), {]
[+, xa, *, factb, +, xa, *, facta, ;, if, (, result, ==, 0, ), {, result, =, result, *]
[*, facta, +, xa, *, factb, +, xa, *, facta, ;, if, (, result, ==, 0, ), {, result, =]
[+, xa, *, factb, +, xa, *, facta, ;, if, (, result, ==, 0, ), {, result, =, result, *]
[+, xa, *, facta, ;, if, (, result, ==, 0, ), {, result, =, result, *, x, ;, }, return]
[*, factb, +, xa, *, facta, ;, if, (, result, ==, 0, ), {, result, =, result, *, x, ;]
[+, xa, *, facta, ;, if, (, result, ==, 0, ), {, result, =, result, *, x, ;, }, return]
[;, if, (, result, ==, 0, ), {, result, =, result, *, x, ;, }, return, result, ;, }, public]
[*, facta, ;, if, (, result, ==, 0, ), {, result, =, result, *, x, ;, }, return, result, ;]
[;, if, (, result, ==, 0, ), {, result, =, result, *, x, ;, }, return, result, ;, }, public]
[), {, result, =, result, *, x, ;, }, return, result, ;, }, public, static, double, toDegrees, (, double, x]
[==, 0, ), {, result, =, result, *, x, ;, }, return, result, ;, }, public, static, double, toDegrees, (]
[), {, result, =, result, *, x, ;, }, return, result, ;, }, public, static, double, toDegrees, (, double, x]
[=, result, *, x, ;, }, return, result, ;, }, public, static, double, toDegrees, (, double, x, ), {, if]
[;, }, return, result, ;, }, public, static, double, toDegrees, (, double, x, ), {, if, (, Double, ., isInfinite]
[*, x, ;, }, return, result, ;, }, public, static, double, toDegrees, (, double, x, ), {, if, (, Double]
[;, }, return, result, ;, }, public, static, double, toDegrees, (, double, x, ), {, if, (, Double, ., isInfinite]
[;, }, public, static, double, toDegrees, (, double, x, ), {, if, (, Double, ., isInfinite, (, x, ), ||]
[), {, return, x, ;, }, final, double, facta, =, 57.2957763671875, ;, final, double, factb, =, 3.145894820876798E-6, ;, double, xa]
[||, x, ==, 0.0, ), {, return, x, ;, }, final, double, facta, =, 57.2957763671875, ;, final, double, factb, =]
[., isInfinite, (, x, ), ||, x, ==, 0.0, ), {, return, x, ;, }, final, double, facta, =, 57.2957763671875]
[), ||, x, ==, 0.0, ), {, return, x, ;, }, final, double, facta, =, 57.2957763671875, ;, final, double, factb]
[), {, return, x, ;, }, final, double, facta, =, 57.2957763671875, ;, final, double, factb, =, 3.145894820876798E-6, ;, double, xa]
[==, 0.0, ), {, return, x, ;, }, final, double, facta, =, 57.2957763671875, ;, final, double, factb, =, 3.145894820876798E-6, ;]
[), {, return, x, ;, }, final, double, facta, =, 57.2957763671875, ;, final, double, factb, =, 3.145894820876798E-6, ;, double, xa]
[;, }, final, double, facta, =, 57.2957763671875, ;, final, double, factb, =, 3.145894820876798E-6, ;, double, xa, =, doubleHighPart, (, x]
[;, final, double, factb, =, 3.145894820876798E-6, ;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -]
[;, double, xa, =, doubleHighPart, (, x, ), ;, double, xb, =, x, -, xa, ;, return, xb, *, factb]
[;, double, xb, =, x, -, xa, ;, return, xb, *, factb, +, xb, *, facta, +, xa, *, factb]
[), ;, double, xb, =, x, -, xa, ;, return, xb, *, factb, +, xb, *, facta, +, xa, *]
[;, return, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;, }, public]
[-, xa, ;, return, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;]
[;, return, xb, *, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;, }, public]
[;, }, public, static, int, abs, (, final, int, x, ), {, final, int, i, =, x, >, >, >]
[+, xa, *, facta, ;, }, public, static, int, abs, (, final, int, x, ), {, final, int, i, =]
[+, xa, *, factb, +, xa, *, facta, ;, }, public, static, int, abs, (, final, int, x, ), {]
[+, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;, }, public, static, int, abs, (, final]
[*, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;, }, public, static, int, abs]
[+, xb, *, facta, +, xa, *, factb, +, xa, *, facta, ;, }, public, static, int, abs, (, final]
[+, xa, *, factb, +, xa, *, facta, ;, }, public, static, int, abs, (, final, int, x, ), {]
[*, facta, +, xa, *, factb, +, xa, *, facta, ;, }, public, static, int, abs, (, final, int, x]
[+, xa, *, factb, +, xa, *, facta, ;, }, public, static, int, abs, (, final, int, x, ), {]
[+, xa, *, facta, ;, }, public, static, int, abs, (, final, int, x, ), {, final, int, i, =]
[*, factb, +, xa, *, facta, ;, }, public, static, int, abs, (, final, int, x, ), {, final, int]
[+, xa, *, facta, ;, }, public, static, int, abs, (, final, int, x, ), {, final, int, i, =]
[;, }, public, static, int, abs, (, final, int, x, ), {, final, int, i, =, x, >, >, >]
[*, facta, ;, }, public, static, int, abs, (, final, int, x, ), {, final, int, i, =, x, >]
[;, }, public, static, int, abs, (, final, int, x, ), {, final, int, i, =, x, >, >, >]
[;, return, (, x, ^, (, ~, i, +, 1, ), ), +, i, ;, }, public, static, long, abs]
[>, >, >, 31, ;, return, (, x, ^, (, ~, i, +, 1, ), ), +, i, ;, }]
[;, return, (, x, ^, (, ~, i, +, 1, ), ), +, i, ;, }, public, static, long, abs]
[;, }, public, static, long, abs, (, final, long, x, ), {, final, long, l, =, x, >, >, >]
[+, i, ;, }, public, static, long, abs, (, final, long, x, ), {, final, long, l, =, x, >]
[), +, i, ;, }, public, static, long, abs, (, final, long, x, ), {, final, long, l, =, x]
[^, (, ~, i, +, 1, ), ), +, i, ;, }, public, static, long, abs, (, final, long, x]
[), +, i, ;, }, public, static, long, abs, (, final, long, x, ), {, final, long, l, =, x]
[), ), +, i, ;, }, public, static, long, abs, (, final, long, x, ), {, final, long, l, =]
[+, 1, ), ), +, i, ;, }, public, static, long, abs, (, final, long, x, ), {, final, long]
[+, 1, ), ), +, i, ;, }, public, static, long, abs, (, final, long, x, ), {, final, long]
[), ), +, i, ;, }, public, static, long, abs, (, final, long, x, ), {, final, long, l, =]
[;, }, public, static, long, abs, (, final, long, x, ), {, final, long, l, =, x, >, >, >]
[;, return, (, x, ^, (, ~, l, +, 1, ), ), +, l, ;, }, public, static, float, abs]
[>, >, >, 63, ;, return, (, x, ^, (, ~, l, +, 1, ), ), +, l, ;, }]
[;, return, (, x, ^, (, ~, l, +, 1, ), ), +, l, ;, }, public, static, float, abs]
[;, }, public, static, float, abs, (, final, float, x, ), {, return, Float, ., intBitsToFloat, (, MASK_NON_SIGN_INT, &, Float]
[+, l, ;, }, public, static, float, abs, (, final, float, x, ), {, return, Float, ., intBitsToFloat, (, MASK_NON_SIGN_INT]
[), +, l, ;, }, public, static, float, abs, (, final, float, x, ), {, return, Float, ., intBitsToFloat, (]
[^, (, ~, l, +, 1, ), ), +, l, ;, }, public, static, float, abs, (, final, float, x]
[), +, l, ;, }, public, static, float, abs, (, final, float, x, ), {, return, Float, ., intBitsToFloat, (]
[), ), +, l, ;, }, public, static, float, abs, (, final, float, x, ), {, return, Float, ., intBitsToFloat]
[+, 1, ), ), +, l, ;, }, public, static, float, abs, (, final, float, x, ), {, return, Float]
[+, 1, ), ), +, l, ;, }, public, static, float, abs, (, final, float, x, ), {, return, Float]
[), ), +, l, ;, }, public, static, float, abs, (, final, float, x, ), {, return, Float, ., intBitsToFloat]
[;, }, public, static, float, abs, (, final, float, x, ), {, return, Float, ., intBitsToFloat, (, MASK_NON_SIGN_INT, &, Float]
[;, }, public, static, double, abs, (, double, x, ), {, return, Double, ., longBitsToDouble, (, MASK_NON_SIGN_LONG, &, Double, .]
[., intBitsToFloat, (, MASK_NON_SIGN_INT, &, Float, ., floatToRawIntBits, (, x, ), ), ;, }, public, static, double, abs, (, double]
[), ;, }, public, static, double, abs, (, double, x, ), {, return, Double, ., longBitsToDouble, (, MASK_NON_SIGN_LONG, &, Double]
[&, Float, ., floatToRawIntBits, (, x, ), ), ;, }, public, static, double, abs, (, double, x, ), {, return]
[), ;, }, public, static, double, abs, (, double, x, ), {, return, Double, ., longBitsToDouble, (, MASK_NON_SIGN_LONG, &, Double]
[., floatToRawIntBits, (, x, ), ), ;, }, public, static, double, abs, (, double, x, ), {, return, Double, .]
[), ), ;, }, public, static, double, abs, (, double, x, ), {, return, Double, ., longBitsToDouble, (, MASK_NON_SIGN_LONG, &]
[;, }, public, static, double, ulp, (, double, x, ), {, if, (, Double, ., isInfinite, (, x, ), )]
[., longBitsToDouble, (, MASK_NON_SIGN_LONG, &, Double, ., doubleToRawLongBits, (, x, ), ), ;, }, public, static, double, ulp, (, double]
[), ;, }, public, static, double, ulp, (, double, x, ), {, if, (, Double, ., isInfinite, (, x, )]
[&, Double, ., doubleToRawLongBits, (, x, ), ), ;, }, public, static, double, ulp, (, double, x, ), {, if]
[), ;, }, public, static, double, ulp, (, double, x, ), {, if, (, Double, ., isInfinite, (, x, )]
[., doubleToRawLongBits, (, x, ), ), ;, }, public, static, double, ulp, (, double, x, ), {, if, (, Double]
[), ), ;, }, public, static, double, ulp, (, double, x, ), {, if, (, Double, ., isInfinite, (, x]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Double, ., longBitsToDouble, (, Double, ., doubleToRawLongBits]
[., isInfinite, (, x, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Double, .]
[), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Double, ., longBitsToDouble, (, Double, .]
[;, }, return, abs, (, x, -, Double, ., longBitsToDouble, (, Double, ., doubleToRawLongBits, (, x, ), ^, 1, )]
[., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Double, ., longBitsToDouble, (, Double, ., doubleToRawLongBits, (, x, ), ^]
[;, }, public, static, float, ulp, (, float, x, ), {, if, (, Float, ., isInfinite, (, x, ), )]
[), ;, }, public, static, float, ulp, (, float, x, ), {, if, (, Float, ., isInfinite, (, x, )]
[-, Double, ., longBitsToDouble, (, Double, ., doubleToRawLongBits, (, x, ), ^, 1, ), ), ;, }, public, static, float]
[), ;, }, public, static, float, ulp, (, float, x, ), {, if, (, Float, ., isInfinite, (, x, )]
[., longBitsToDouble, (, Double, ., doubleToRawLongBits, (, x, ), ^, 1, ), ), ;, }, public, static, float, ulp, (]
[), ), ;, }, public, static, float, ulp, (, float, x, ), {, if, (, Float, ., isInfinite, (, x]
[^, 1, ), ), ;, }, public, static, float, ulp, (, float, x, ), {, if, (, Float, ., isInfinite]
[., doubleToRawLongBits, (, x, ), ^, 1, ), ), ;, }, public, static, float, ulp, (, float, x, ), {]
[), ^, 1, ), ), ;, }, public, static, float, ulp, (, float, x, ), {, if, (, Float, .]
[), ), ;, }, public, static, float, ulp, (, float, x, ), {, if, (, Float, ., isInfinite, (, x]
[), {, return, Float, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Float, ., intBitsToFloat, (, Float, ., floatToIntBits]
[., isInfinite, (, x, ), ), {, return, Float, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Float, .]
[), ), {, return, Float, ., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Float, ., intBitsToFloat, (, Float, .]
[;, }, return, abs, (, x, -, Float, ., intBitsToFloat, (, Float, ., floatToIntBits, (, x, ), ^, 1, )]
[., POSITIVE_INFINITY, ;, }, return, abs, (, x, -, Float, ., intBitsToFloat, (, Float, ., floatToIntBits, (, x, ), ^]
[;, }, public, static, double, scalb, (, final, double, d, ,, final, int, n, ), {, if, (, (, n]
[), ;, }, public, static, double, scalb, (, final, double, d, ,, final, int, n, ), {, if, (, (]
[-, Float, ., intBitsToFloat, (, Float, ., floatToIntBits, (, x, ), ^, 1, ), ), ;, }, public, static, double]
[), ;, }, public, static, double, scalb, (, final, double, d, ,, final, int, n, ), {, if, (, (]
[., intBitsToFloat, (, Float, ., floatToIntBits, (, x, ), ^, 1, ), ), ;, }, public, static, double, scalb, (]
[), ), ;, }, public, static, double, scalb, (, final, double, d, ,, final, int, n, ), {, if, (]
[^, 1, ), ), ;, }, public, static, double, scalb, (, final, double, d, ,, final, int, n, ), {]
[., floatToIntBits, (, x, ), ^, 1, ), ), ;, }, public, static, double, scalb, (, final, double, d, ,]
[), ^, 1, ), ), ;, }, public, static, double, scalb, (, final, double, d, ,, final, int, n, )]
[), ), ;, }, public, static, double, scalb, (, final, double, d, ,, final, int, n, ), {, if, (]
[), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, ), (, n, +, 1023, ), ), <<]
[&&, (, n, <, 1024, ), ), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, ), (]
[), &&, (, n, <, 1024, ), ), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, )]
[>, -, 1023, ), &&, (, n, <, 1024, ), ), {, return, d, *, Double, ., longBitsToDouble, (, (]
[), &&, (, n, <, 1024, ), ), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, )]
[), &&, (, n, <, 1024, ), ), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, )]
[), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, ), (, n, +, 1023, ), ), <<]
[), ), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, ), (, n, +, 1023, ), )]
[<, 1024, ), ), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, ), (, n, +, 1023]
[), ), {, return, d, *, Double, ., longBitsToDouble, (, (, (, long, ), (, n, +, 1023, ), )]
[;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (, d, ), ||, (, d]
[*, Double, ., longBitsToDouble, (, (, (, long, ), (, n, +, 1023, ), ), <<, 52, ), ;, }]
[;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (, d, ), ||, (, d]
[., longBitsToDouble, (, (, (, long, ), (, n, +, 1023, ), ), <<, 52, ), ;, }, if, (]
[), ;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (, d, ), ||, (]
[<<, 52, ), ;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (, d, )]
[), <<, 52, ), ;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (, d]
[), <<, 52, ), ;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (, d]
[), ), <<, 52, ), ;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (]
[+, 1023, ), ), <<, 52, ), ;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, .]
[), ), <<, 52, ), ;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (]
[), ;, }, if, (, Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (, d, ), ||, (]
[), {, return, d, ;, }, if, (, n, <, -, 2098, ), {, return, (, d, >, 0, )]
[||, (, d, ==, 0, ), ), {, return, d, ;, }, if, (, n, <, -, 2098, ), {]
[||, Double, ., isInfinite, (, d, ), ||, (, d, ==, 0, ), ), {, return, d, ;, }, if]
[., isNaN, (, d, ), ||, Double, ., isInfinite, (, d, ), ||, (, d, ==, 0, ), ), {]
[), ||, Double, ., isInfinite, (, d, ), ||, (, d, ==, 0, ), ), {, return, d, ;, }]
[||, (, d, ==, 0, ), ), {, return, d, ;, }, if, (, n, <, -, 2098, ), {]
[., isInfinite, (, d, ), ||, (, d, ==, 0, ), ), {, return, d, ;, }, if, (, n]
[), ||, (, d, ==, 0, ), ), {, return, d, ;, }, if, (, n, <, -, 2098, )]
[), {, return, d, ;, }, if, (, n, <, -, 2098, ), {, return, (, d, >, 0, )]
[), ), {, return, d, ;, }, if, (, n, <, -, 2098, ), {, return, (, d, >, 0]
[==, 0, ), ), {, return, d, ;, }, if, (, n, <, -, 2098, ), {, return, (, d]
[), ), {, return, d, ;, }, if, (, n, <, -, 2098, ), {, return, (, d, >, 0]
[;, }, if, (, n, <, -, 2098, ), {, return, (, d, >, 0, ), ?, 0.0, :, -]
[), {, return, (, d, >, 0, ), ?, 0.0, :, -, 0.0, ;, }, if, (, n, >, 2097]
[<, -, 2098, ), {, return, (, d, >, 0, ), ?, 0.0, :, -, 0.0, ;, }, if, (]
[), {, return, (, d, >, 0, ), ?, 0.0, :, -, 0.0, ;, }, if, (, n, >, 2097]
[), {, return, (, d, >, 0, ), ?, 0.0, :, -, 0.0, ;, }, if, (, n, >, 2097]
[;, }, if, (, n, >, 2097, ), {, return, (, d, >, 0, ), ?, Double, ., POSITIVE_INFINITY, :]
[?, 0.0, :, -, 0.0, ;, }, if, (, n, >, 2097, ), {, return, (, d, >, 0, )]
[), ?, 0.0, :, -, 0.0, ;, }, if, (, n, >, 2097, ), {, return, (, d, >, 0]
[>, 0, ), ?, 0.0, :, -, 0.0, ;, }, if, (, n, >, 2097, ), {, return, (, d]
[), ?, 0.0, :, -, 0.0, ;, }, if, (, n, >, 2097, ), {, return, (, d, >, 0]
[:, -, 0.0, ;, }, if, (, n, >, 2097, ), {, return, (, d, >, 0, ), ?, Double]
[;, }, if, (, n, >, 2097, ), {, return, (, d, >, 0, ), ?, Double, ., POSITIVE_INFINITY, :]
[;, }, if, (, n, >, 2097, ), {, return, (, d, >, 0, ), ?, Double, ., POSITIVE_INFINITY, :]
[), {, return, (, d, >, 0, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, final, long]
[>, 2097, ), {, return, (, d, >, 0, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }]
[), {, return, (, d, >, 0, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, final, long]
[;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L]
[?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, )]
[), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d]
[>, 0, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits]
[), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d]
[:, Double, ., NEGATIVE_INFINITY, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign]
[., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final]
[;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L]
[., NEGATIVE_INFINITY, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits]
[;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, int, exponent, =, (, (, int, ), (, bits, >, >]
[., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, int, exponent, =, (, (, int]
[), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, int, exponent, =, (, (, int, ), (, bits, >]
[;, int, exponent, =, (, (, int, ), (, bits, >, >, >, 52, ), ), &, 0x7ff, ;, long]
[&, 0x8000000000000000L, ;, int, exponent, =, (, (, int, ), (, bits, >, >, >, 52, ), ), &, 0x7ff]
[;, int, exponent, =, (, (, int, ), (, bits, >, >, >, 52, ), ), &, 0x7ff, ;, long]
[;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0]
[&, 0x7ff, ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n]
[), &, 0x7ff, ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if, (]
[), &, 0x7ff, ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if, (]
[), ), &, 0x7ff, ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if]
[>, >, >, 52, ), ), &, 0x7ff, ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent]
[), ), &, 0x7ff, ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if]
[;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0]
[;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0]
[&, 0x000fffffffffffffL, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent]
[;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0]
[;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (]
[+, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Double, .]
[;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (]
[), {, if, (, scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long]
[<, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (]
[), {, if, (, scaledExponent, >, 0, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long]
[), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |]
[>, 0, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52]
[), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |]
[;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =, mantissa, |, (, 1L, <<, 52, )]
[., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }]
[), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =, mantissa, |, (, 1L, <<, 52]
[|, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =, mantissa, |, (, 1L]
[|, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, if, (, scaledExponent]
[|, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =, mantissa, |, (, 1L]
[), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =, mantissa, |, (]
[<<, 52, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =, mantissa]
[), <<, 52, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =]
[), <<, 52, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =]
[), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =, mantissa, |, (]
[), ;, }, else, if, (, scaledExponent, >, -, 53, ), {, mantissa, =, mantissa, |, (, 1L, <<, 52]
[), {, mantissa, =, mantissa, |, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L]
[>, -, 53, ), {, mantissa, =, mantissa, |, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa]
[), {, mantissa, =, mantissa, |, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L]
[), {, mantissa, =, mantissa, |, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L]
[=, mantissa, |, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -]
[;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >]
[|, (, 1L, <<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -, scaledExponent, )]
[;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >]
[), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa]
[<<, 52, ), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -, scaledExponent, ), ), ;, mantissa]
[), ;, final, long, mostSignificantLostBit, =, mantissa, &, (, 1L, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa]
[;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {]
[&, (, 1L, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent]
[;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {]
[), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, )]
[<<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if]
[), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, )]
[), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0]
[), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0]
[=, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++]
[;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (, sign, |, mantissa]
[>, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }]
[;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (, sign, |, mantissa]
[), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (, sign, |]
[-, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (]
[), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (, sign, |]
[), {, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (, sign, |, mantissa, ), ;, }, else, {, return]
[!=, 0, ), {, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (, sign, |, mantissa, ), ;, }, else]
[), {, mantissa, ++, ;, }, return, Double, ., longBitsToDouble, (, sign, |, mantissa, ), ;, }, else, {, return]
[;, }, return, Double, ., longBitsToDouble, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L]
[++, ;, }, return, Double, ., longBitsToDouble, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==]
[;, }, else, {, return, (, sign, ==, 0L, ), ?, 0.0, :, -, 0.0, ;, }, }, else, {]
[., longBitsToDouble, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, 0.0, :]
[), ;, }, else, {, return, (, sign, ==, 0L, ), ?, 0.0, :, -, 0.0, ;, }, }, else]
[|, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, 0.0, :, -, 0.0, ;, }]
[), ;, }, else, {, return, (, sign, ==, 0L, ), ?, 0.0, :, -, 0.0, ;, }, }, else]
[;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 52]
[?, 0.0, :, -, 0.0, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (]
[), ?, 0.0, :, -, 0.0, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (]
[==, 0L, ), ?, 0.0, :, -, 0.0, ;, }, }, else, {, if, (, exponent, ==, 0, ), {]
[), ?, 0.0, :, -, 0.0, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (]
[:, -, 0.0, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >]
[;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 52]
[;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 52]
[), {, while, (, (, mantissa, >, >, >, 52, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1]
[==, 0, ), {, while, (, (, mantissa, >, >, >, 52, ), !=, 1, ), {, mantissa, =, mantissa]
[), {, while, (, (, mantissa, >, >, >, 52, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1]
[), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL]
[!=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa]
[), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =]
[>, >, >, 52, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++]
[), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =]
[), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL]
[=, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (]
[;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, )]
[<<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <]
[;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, )]
[;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return, Double]
[;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return, Double]
[;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign]
[;, mantissa, =, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign]
[=, mantissa, &, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (]
[;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, )]
[&, 0x000fffffffffffffL, ;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (]
[;, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, )]
[), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |]
[<, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52]
[), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |]
[;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }]
[., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }]
[), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;]
[|, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, .]
[|, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (]
[|, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, .]
[), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double]
[<<, 52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY]
[), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, .]
[), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, .]
[), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double]
[), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;]
[;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (]
[?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return]
[), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {]
[==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047]
[), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {]
[:, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (]
[., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return, Double, .]
[;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (]
[., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |]
[), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |]
[<, 2047, ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52]
[), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |]
[;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }]
[., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }]
[), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;]
[|, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, .]
[|, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (]
[|, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, .]
[), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double]
[<<, 52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY]
[), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, .]
[), <<, 52, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, .]
[), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double]
[), ;, }, else, {, return, (, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;]
[;, }, }, }, public, static, float, scalb, (, final, float, f, ,, final, int, n, ), {, if, (]
[?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, }, public, static, float, scalb, (, final, float, f]
[), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, }, public, static, float, scalb, (, final, float]
[==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, }, public, static, float, scalb, (]
[), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, }, public, static, float, scalb, (, final, float]
[:, Double, ., NEGATIVE_INFINITY, ;, }, }, }, public, static, float, scalb, (, final, float, f, ,, final, int, n]
[., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY, ;, }, }, }, public, static, float, scalb, (, final, float, f, ,, final]
[;, }, }, }, public, static, float, scalb, (, final, float, f, ,, final, int, n, ), {, if, (]
[., NEGATIVE_INFINITY, ;, }, }, }, public, static, float, scalb, (, final, float, f, ,, final, int, n, ), {]
[), {, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127, ), <<, 23, ), ;, }, if]
[&&, (, n, <, 128, ), ), {, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127, )]
[), &&, (, n, <, 128, ), ), {, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127]
[>, -, 127, ), &&, (, n, <, 128, ), ), {, return, f, *, Float, ., intBitsToFloat, (, (]
[), &&, (, n, <, 128, ), ), {, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127]
[), &&, (, n, <, 128, ), ), {, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127]
[), {, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127, ), <<, 23, ), ;, }, if]
[), ), {, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127, ), <<, 23, ), ;, }]
[<, 128, ), ), {, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127, ), <<, 23, )]
[), ), {, return, f, *, Float, ., intBitsToFloat, (, (, n, +, 127, ), <<, 23, ), ;, }]
[;, }, if, (, Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (, f, ), ||, (, f]
[*, Float, ., intBitsToFloat, (, (, n, +, 127, ), <<, 23, ), ;, }, if, (, Float, ., isNaN]
[;, }, if, (, Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (, f, ), ||, (, f]
[., intBitsToFloat, (, (, n, +, 127, ), <<, 23, ), ;, }, if, (, Float, ., isNaN, (, f]
[), ;, }, if, (, Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (, f, ), ||, (]
[<<, 23, ), ;, }, if, (, Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (, f, )]
[), <<, 23, ), ;, }, if, (, Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (, f]
[+, 127, ), <<, 23, ), ;, }, if, (, Float, ., isNaN, (, f, ), ||, Float, ., isInfinite]
[), <<, 23, ), ;, }, if, (, Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (, f]
[), ;, }, if, (, Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (, f, ), ||, (]
[), {, return, f, ;, }, if, (, n, <, -, 277, ), {, return, (, f, >, 0, )]
[||, (, f, ==, 0f, ), ), {, return, f, ;, }, if, (, n, <, -, 277, ), {]
[||, Float, ., isInfinite, (, f, ), ||, (, f, ==, 0f, ), ), {, return, f, ;, }, if]
[., isNaN, (, f, ), ||, Float, ., isInfinite, (, f, ), ||, (, f, ==, 0f, ), ), {]
[), ||, Float, ., isInfinite, (, f, ), ||, (, f, ==, 0f, ), ), {, return, f, ;, }]
[||, (, f, ==, 0f, ), ), {, return, f, ;, }, if, (, n, <, -, 277, ), {]
[., isInfinite, (, f, ), ||, (, f, ==, 0f, ), ), {, return, f, ;, }, if, (, n]
[), ||, (, f, ==, 0f, ), ), {, return, f, ;, }, if, (, n, <, -, 277, )]
[), {, return, f, ;, }, if, (, n, <, -, 277, ), {, return, (, f, >, 0, )]
[), ), {, return, f, ;, }, if, (, n, <, -, 277, ), {, return, (, f, >, 0]
[==, 0f, ), ), {, return, f, ;, }, if, (, n, <, -, 277, ), {, return, (, f]
[), ), {, return, f, ;, }, if, (, n, <, -, 277, ), {, return, (, f, >, 0]
[;, }, if, (, n, <, -, 277, ), {, return, (, f, >, 0, ), ?, 0.0f, :, -]
[), {, return, (, f, >, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276]
[<, -, 277, ), {, return, (, f, >, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, if, (]
[), {, return, (, f, >, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276]
[), {, return, (, f, >, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276]
[;, }, if, (, n, >, 276, ), {, return, (, f, >, 0, ), ?, Float, ., POSITIVE_INFINITY, :]
[?, 0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276, ), {, return, (, f, >, 0, )]
[), ?, 0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276, ), {, return, (, f, >, 0]
[>, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276, ), {, return, (, f]
[), ?, 0.0f, :, -, 0.0f, ;, }, if, (, n, >, 276, ), {, return, (, f, >, 0]
[:, -, 0.0f, ;, }, if, (, n, >, 276, ), {, return, (, f, >, 0, ), ?, Float]
[;, }, if, (, n, >, 276, ), {, return, (, f, >, 0, ), ?, Float, ., POSITIVE_INFINITY, :]
[;, }, if, (, n, >, 276, ), {, return, (, f, >, 0, ), ?, Float, ., POSITIVE_INFINITY, :]
[), {, return, (, f, >, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, final, int]
[>, 276, ), {, return, (, f, >, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }]
[), {, return, (, f, >, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, final, int]
[;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000]
[?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, )]
[), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f]
[>, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, final, int, bits, =, Float, ., floatToIntBits]
[), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f]
[:, Float, ., NEGATIVE_INFINITY, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign]
[., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final]
[;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000]
[., NEGATIVE_INFINITY, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits]
[;, final, int, sign, =, bits, &, 0x80000000, ;, int, exponent, =, (, bits, >, >, >, 23, ), &]
[., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, int, exponent, =, (, bits, >]
[), ;, final, int, sign, =, bits, &, 0x80000000, ;, int, exponent, =, (, bits, >, >, >, 23, )]
[;, int, exponent, =, (, bits, >, >, >, 23, ), &, 0xff, ;, int, mantissa, =, bits, &, 0x007fffff]
[&, 0x80000000, ;, int, exponent, =, (, bits, >, >, >, 23, ), &, 0xff, ;, int, mantissa, =, bits]
[;, int, exponent, =, (, bits, >, >, >, 23, ), &, 0xff, ;, int, mantissa, =, bits, &, 0x007fffff]
[;, int, mantissa, =, bits, &, 0x007fffff, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0]
[&, 0xff, ;, int, mantissa, =, bits, &, 0x007fffff, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n]
[), &, 0xff, ;, int, mantissa, =, bits, &, 0x007fffff, ;, int, scaledExponent, =, exponent, +, n, ;, if, (]
[>, >, >, 23, ), &, 0xff, ;, int, mantissa, =, bits, &, 0x007fffff, ;, int, scaledExponent, =, exponent, +]
[), &, 0xff, ;, int, mantissa, =, bits, &, 0x007fffff, ;, int, scaledExponent, =, exponent, +, n, ;, if, (]
[;, int, mantissa, =, bits, &, 0x007fffff, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0]
[;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0]
[&, 0x007fffff, ;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent]
[;, int, scaledExponent, =, exponent, +, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0]
[;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Float, ., intBitsToFloat, (]
[+, n, ;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Float, .]
[;, if, (, n, <, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Float, ., intBitsToFloat, (]
[), {, if, (, scaledExponent, >, 0, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23]
[<, 0, ), {, if, (, scaledExponent, >, 0, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent]
[), {, if, (, scaledExponent, >, 0, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23]
[), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else]
[>, 0, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;]
[), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else]
[;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =, mantissa, |, (, 1, <<, 23, )]
[., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >]
[), ;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =, mantissa, |, (, 1, <<, 23]
[|, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =, mantissa, |, (, 1]
[|, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 24, ), {]
[|, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =, mantissa, |, (, 1]
[), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =, mantissa, |, (]
[<<, 23, ), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =, mantissa]
[), |, mantissa, ), ;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =, mantissa, |, (]
[), ;, }, else, if, (, scaledExponent, >, -, 24, ), {, mantissa, =, mantissa, |, (, 1, <<, 23]
[), {, mantissa, =, mantissa, |, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1]
[>, -, 24, ), {, mantissa, =, mantissa, |, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa]
[), {, mantissa, =, mantissa, |, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1]
[), {, mantissa, =, mantissa, |, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1]
[=, mantissa, |, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -]
[;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >]
[|, (, 1, <<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -, scaledExponent, )]
[;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >]
[), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa]
[<<, 23, ), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -, scaledExponent, ), ), ;, mantissa]
[), ;, final, int, mostSignificantLostBit, =, mantissa, &, (, 1, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa]
[;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {]
[&, (, 1, <<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent]
[;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {]
[), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, )]
[<<, (, -, scaledExponent, ), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if]
[), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, )]
[), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0]
[), ), ;, mantissa, =, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0]
[=, mantissa, >, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++]
[;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (, sign, |, mantissa]
[>, >, >, (, 1, -, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }]
[;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (, sign, |, mantissa]
[), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (, sign, |]
[-, scaledExponent, ), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (]
[), ;, if, (, mostSignificantLostBit, !=, 0, ), {, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (, sign, |]
[), {, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (, sign, |, mantissa, ), ;, }, else, {, return]
[!=, 0, ), {, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (, sign, |, mantissa, ), ;, }, else]
[), {, mantissa, ++, ;, }, return, Float, ., intBitsToFloat, (, sign, |, mantissa, ), ;, }, else, {, return]
[;, }, return, Float, ., intBitsToFloat, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0]
[++, ;, }, return, Float, ., intBitsToFloat, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==]
[;, }, else, {, return, (, sign, ==, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, }, else, {]
[., intBitsToFloat, (, sign, |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, 0.0f, :]
[), ;, }, else, {, return, (, sign, ==, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, }, else]
[|, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, 0.0f, :, -, 0.0f, ;, }]
[), ;, }, else, {, return, (, sign, ==, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, }, else]
[;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 23]
[?, 0.0f, :, -, 0.0f, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (]
[), ?, 0.0f, :, -, 0.0f, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (]
[==, 0, ), ?, 0.0f, :, -, 0.0f, ;, }, }, else, {, if, (, exponent, ==, 0, ), {]
[), ?, 0.0f, :, -, 0.0f, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (]
[:, -, 0.0f, ;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >]
[;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 23]
[;, }, }, else, {, if, (, exponent, ==, 0, ), {, while, (, (, mantissa, >, >, >, 23]
[), {, while, (, (, mantissa, >, >, >, 23, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1]
[==, 0, ), {, while, (, (, mantissa, >, >, >, 23, ), !=, 1, ), {, mantissa, =, mantissa]
[), {, while, (, (, mantissa, >, >, >, 23, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1]
[), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff]
[!=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa]
[), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =]
[>, >, >, 23, ), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++]
[), !=, 1, ), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =]
[), {, mantissa, =, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff]
[=, mantissa, <<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (]
[;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, )]
[<<, 1, ;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <]
[;, --, scaledExponent, ;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, )]
[;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return, Float]
[;, }, ++, scaledExponent, ;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return, Float]
[;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign]
[;, mantissa, =, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign]
[=, mantissa, &, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (]
[;, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, )]
[&, 0x007fffff, ;, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<]
[;, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, )]
[), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else]
[<, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;]
[), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else]
[;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }]
[., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (, sign]
[), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;]
[|, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, .]
[|, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?]
[|, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, .]
[), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float]
[<<, 23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY]
[), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float]
[), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;]
[;, }, }, else, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent]
[?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {, return]
[), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {]
[==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255]
[), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {]
[:, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (]
[., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {, return, Float, .]
[;, }, }, else, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent]
[., NEGATIVE_INFINITY, ;, }, }, else, if, (, scaledExponent, <, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |]
[), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else]
[<, 255, ), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;]
[), {, return, Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else]
[;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }]
[., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (, sign]
[), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;]
[|, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, .]
[|, (, scaledExponent, <<, 23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?]
[|, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, .]
[), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float]
[<<, 23, ), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY]
[), |, mantissa, ), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float]
[), ;, }, else, {, return, (, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;]
[;, }, }, }, public, static, double, nextAfter, (, double, d, ,, double, direction, ), {, if, (, Double, .]
[?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, }, public, static, double, nextAfter, (, double, d, ,]
[), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, }, public, static, double, nextAfter, (, double, d]
[==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, }, public, static, double, nextAfter, (]
[), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, }, public, static, double, nextAfter, (, double, d]
[:, Float, ., NEGATIVE_INFINITY, ;, }, }, }, public, static, double, nextAfter, (, double, d, ,, double, direction, ), {]
[., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY, ;, }, }, }, public, static, double, nextAfter, (, double, d, ,, double, direction]
[;, }, }, }, public, static, double, nextAfter, (, double, d, ,, double, direction, ), {, if, (, Double, .]
[., NEGATIVE_INFINITY, ;, }, }, }, public, static, double, nextAfter, (, double, d, ,, double, direction, ), {, if, (]
[), {, return, Double, ., NaN, ;, }, else, if, (, d, ==, direction, ), {, return, direction, ;, }]
[||, Double, ., isNaN, (, direction, ), ), {, return, Double, ., NaN, ;, }, else, if, (, d, ==]
[., isNaN, (, d, ), ||, Double, ., isNaN, (, direction, ), ), {, return, Double, ., NaN, ;, }]
[), ||, Double, ., isNaN, (, direction, ), ), {, return, Double, ., NaN, ;, }, else, if, (, d]
[), {, return, Double, ., NaN, ;, }, else, if, (, d, ==, direction, ), {, return, direction, ;, }]
[., isNaN, (, direction, ), ), {, return, Double, ., NaN, ;, }, else, if, (, d, ==, direction, )]
[), ), {, return, Double, ., NaN, ;, }, else, if, (, d, ==, direction, ), {, return, direction, ;]
[;, }, else, if, (, d, ==, direction, ), {, return, direction, ;, }, else, if, (, Double, ., isInfinite]
[., NaN, ;, }, else, if, (, d, ==, direction, ), {, return, direction, ;, }, else, if, (, Double]
[), {, return, direction, ;, }, else, if, (, Double, ., isInfinite, (, d, ), ), {, return, (, d]
[==, direction, ), {, return, direction, ;, }, else, if, (, Double, ., isInfinite, (, d, ), ), {, return]
[), {, return, direction, ;, }, else, if, (, Double, ., isInfinite, (, d, ), ), {, return, (, d]
[;, }, else, if, (, Double, ., isInfinite, (, d, ), ), {, return, (, d, <, 0, ), ?]
[), {, return, (, d, <, 0, ), ?, -, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else]
[., isInfinite, (, d, ), ), {, return, (, d, <, 0, ), ?, -, Double, ., MAX_VALUE, :, Double]
[), ), {, return, (, d, <, 0, ), ?, -, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }]
[;, }, else, if, (, d, ==, 0, ), {, return, (, direction, <, 0, ), ?, -, Double, .]
[?, -, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {, return]
[), ?, -, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {]
[<, 0, ), ?, -, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else, if, (, d, ==, 0]
[), ?, -, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {]
[:, Double, ., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {, return, (, direction, <, 0, )]
[:, Double, ., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {, return, (, direction, <, 0, )]
[., MAX_VALUE, :, Double, ., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {, return, (, direction, <]
[;, }, else, if, (, d, ==, 0, ), {, return, (, direction, <, 0, ), ?, -, Double, .]
[., MAX_VALUE, ;, }, else, if, (, d, ==, 0, ), {, return, (, direction, <, 0, ), ?, -]
[), {, return, (, direction, <, 0, ), ?, -, Double, ., MIN_VALUE, :, Double, ., MIN_VALUE, ;, }, final]
[==, 0, ), {, return, (, direction, <, 0, ), ?, -, Double, ., MIN_VALUE, :, Double, ., MIN_VALUE, ;]
[), {, return, (, direction, <, 0, ), ?, -, Double, ., MIN_VALUE, :, Double, ., MIN_VALUE, ;, }, final]
[;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L]
[?, -, Double, ., MIN_VALUE, :, Double, ., MIN_VALUE, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d]
[), ?, -, Double, ., MIN_VALUE, :, Double, ., MIN_VALUE, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (]
[<, 0, ), ?, -, Double, ., MIN_VALUE, :, Double, ., MIN_VALUE, ;, }, final, long, bits, =, Double, .]
[), ?, -, Double, ., MIN_VALUE, :, Double, ., MIN_VALUE, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (]
[:, Double, ., MIN_VALUE, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign]
[:, Double, ., MIN_VALUE, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign]
[., MIN_VALUE, :, Double, ., MIN_VALUE, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final]
[;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L]
[., MIN_VALUE, ;, }, final, long, bits, =, Double, ., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits]
[;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, if, (, (, direction, <, d, ), ^, (, sign, ==]
[., doubleToRawLongBits, (, d, ), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, if, (, (, direction, <, d]
[), ;, final, long, sign, =, bits, &, 0x8000000000000000L, ;, if, (, (, direction, <, d, ), ^, (, sign]
[;, if, (, (, direction, <, d, ), ^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble]
[&, 0x8000000000000000L, ;, if, (, (, direction, <, d, ), ^, (, sign, ==, 0L, ), ), {, return, Double]
[;, if, (, (, direction, <, d, ), ^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble]
[), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), +, 1, ), ), ;]
[^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL]
[), ^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &]
[<, d, ), ^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (]
[), ^, (, sign, ==, 0L, ), ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &]
[), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), +, 1, ), ), ;]
[), ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), +, 1, ), )]
[==, 0L, ), ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), +, 1]
[), ), {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), +, 1, ), )]
[;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), -, 1, )]
[., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), +, 1, ), ), ;, }, else, {, return]
[), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), -, 1]
[|, (, (, bits, &, 0x7fffffffffffffffL, ), +, 1, ), ), ;, }, else, {, return, Double, ., longBitsToDouble, (]
[), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), -, 1]
[), ), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), -]
[+, 1, ), ), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL]
[), +, 1, ), ), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &]
[&, 0x7fffffffffffffffL, ), +, 1, ), ), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (, (]
[), +, 1, ), ), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &]
[), ), ;, }, else, {, return, Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), -]
[;, }, }, public, static, float, nextAfter, (, final, float, f, ,, final, double, direction, ), {, if, (, Double]
[., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), -, 1, ), ), ;, }, }, public, static]
[), ;, }, }, public, static, float, nextAfter, (, final, float, f, ,, final, double, direction, ), {, if, (]
[|, (, (, bits, &, 0x7fffffffffffffffL, ), -, 1, ), ), ;, }, }, public, static, float, nextAfter, (, final]
[), ;, }, }, public, static, float, nextAfter, (, final, float, f, ,, final, double, direction, ), {, if, (]
[), ), ;, }, }, public, static, float, nextAfter, (, final, float, f, ,, final, double, direction, ), {, if]
[-, 1, ), ), ;, }, }, public, static, float, nextAfter, (, final, float, f, ,, final, double, direction, )]
[), -, 1, ), ), ;, }, }, public, static, float, nextAfter, (, final, float, f, ,, final, double, direction]
[&, 0x7fffffffffffffffL, ), -, 1, ), ), ;, }, }, public, static, float, nextAfter, (, final, float, f, ,, final]
[), -, 1, ), ), ;, }, }, public, static, float, nextAfter, (, final, float, f, ,, final, double, direction]
[), ), ;, }, }, public, static, float, nextAfter, (, final, float, f, ,, final, double, direction, ), {, if]
[), {, return, Float, ., NaN, ;, }, else, if, (, f, ==, direction, ), {, return, (, float, )]
[||, Double, ., isNaN, (, direction, ), ), {, return, Float, ., NaN, ;, }, else, if, (, f, ==]
[., isNaN, (, f, ), ||, Double, ., isNaN, (, direction, ), ), {, return, Float, ., NaN, ;, }]
[), ||, Double, ., isNaN, (, direction, ), ), {, return, Float, ., NaN, ;, }, else, if, (, f]
[), {, return, Float, ., NaN, ;, }, else, if, (, f, ==, direction, ), {, return, (, float, )]
[., isNaN, (, direction, ), ), {, return, Float, ., NaN, ;, }, else, if, (, f, ==, direction, )]
[), ), {, return, Float, ., NaN, ;, }, else, if, (, f, ==, direction, ), {, return, (, float]
[;, }, else, if, (, f, ==, direction, ), {, return, (, float, ), direction, ;, }, else, if, (]
[., NaN, ;, }, else, if, (, f, ==, direction, ), {, return, (, float, ), direction, ;, }, else]
[), {, return, (, float, ), direction, ;, }, else, if, (, Float, ., isInfinite, (, f, ), ), {]
[==, direction, ), {, return, (, float, ), direction, ;, }, else, if, (, Float, ., isInfinite, (, f, )]
[), {, return, (, float, ), direction, ;, }, else, if, (, Float, ., isInfinite, (, f, ), ), {]
[;, }, else, if, (, Float, ., isInfinite, (, f, ), ), {, return, (, f, <, 0f, ), ?]
[;, }, else, if, (, Float, ., isInfinite, (, f, ), ), {, return, (, f, <, 0f, ), ?]
[), {, return, (, f, <, 0f, ), ?, -, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else]
[., isInfinite, (, f, ), ), {, return, (, f, <, 0f, ), ?, -, Float, ., MAX_VALUE, :, Float]
[), ), {, return, (, f, <, 0f, ), ?, -, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }]
[;, }, else, if, (, f, ==, 0f, ), {, return, (, direction, <, 0, ), ?, -, Float, .]
[?, -, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {, return]
[), ?, -, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {]
[<, 0f, ), ?, -, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else, if, (, f, ==, 0f]
[), ?, -, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {]
[:, Float, ., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {, return, (, direction, <, 0, )]
[:, Float, ., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {, return, (, direction, <, 0, )]
[., MAX_VALUE, :, Float, ., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {, return, (, direction, <]
[;, }, else, if, (, f, ==, 0f, ), {, return, (, direction, <, 0, ), ?, -, Float, .]
[., MAX_VALUE, ;, }, else, if, (, f, ==, 0f, ), {, return, (, direction, <, 0, ), ?, -]
[), {, return, (, direction, <, 0, ), ?, -, Float, ., MIN_VALUE, :, Float, ., MIN_VALUE, ;, }, final]
[==, 0f, ), {, return, (, direction, <, 0, ), ?, -, Float, ., MIN_VALUE, :, Float, ., MIN_VALUE, ;]
[), {, return, (, direction, <, 0, ), ?, -, Float, ., MIN_VALUE, :, Float, ., MIN_VALUE, ;, }, final]
[;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000]
[?, -, Float, ., MIN_VALUE, :, Float, ., MIN_VALUE, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f]
[), ?, -, Float, ., MIN_VALUE, :, Float, ., MIN_VALUE, ;, }, final, int, bits, =, Float, ., floatToIntBits, (]
[<, 0, ), ?, -, Float, ., MIN_VALUE, :, Float, ., MIN_VALUE, ;, }, final, int, bits, =, Float, .]
[), ?, -, Float, ., MIN_VALUE, :, Float, ., MIN_VALUE, ;, }, final, int, bits, =, Float, ., floatToIntBits, (]
[:, Float, ., MIN_VALUE, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign]
[:, Float, ., MIN_VALUE, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign]
[., MIN_VALUE, :, Float, ., MIN_VALUE, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final]
[;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000]
[., MIN_VALUE, ;, }, final, int, bits, =, Float, ., floatToIntBits, (, f, ), ;, final, int, sign, =, bits]
[;, final, int, sign, =, bits, &, 0x80000000, ;, if, (, (, direction, <, f, ), ^, (, sign, ==]
[., floatToIntBits, (, f, ), ;, final, int, sign, =, bits, &, 0x80000000, ;, if, (, (, direction, <, f]
[), ;, final, int, sign, =, bits, &, 0x80000000, ;, if, (, (, direction, <, f, ), ^, (, sign]
[;, if, (, (, direction, <, f, ), ^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat]
[&, 0x80000000, ;, if, (, (, direction, <, f, ), ^, (, sign, ==, 0, ), ), {, return, Float]
[;, if, (, (, direction, <, f, ), ^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat]
[), {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), +, 1, ), ), ;]
[^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff]
[), ^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &]
[<, f, ), ^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat, (, sign, |, (, (]
[), ^, (, sign, ==, 0, ), ), {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &]
[), {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), +, 1, ), ), ;]
[), ), {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), +, 1, ), )]
[==, 0, ), ), {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), +, 1]
[), ), {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), +, 1, ), )]
[;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), -, 1, )]
[., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), +, 1, ), ), ;, }, else, {, return]
[), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), -, 1]
[|, (, (, bits, &, 0x7fffffff, ), +, 1, ), ), ;, }, else, {, return, Float, ., intBitsToFloat, (]
[), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), -, 1]
[), ), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), -]
[+, 1, ), ), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff]
[), +, 1, ), ), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &]
[&, 0x7fffffff, ), +, 1, ), ), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (, (]
[), +, 1, ), ), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &]
[), ), ;, }, else, {, return, Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), -]
[;, }, }, public, static, double, floor, (, double, x, ), {, long, y, ;, if, (, x, !=, x]
[., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), -, 1, ), ), ;, }, }, public, static]
[), ;, }, }, public, static, double, floor, (, double, x, ), {, long, y, ;, if, (, x, !=]
[|, (, (, bits, &, 0x7fffffff, ), -, 1, ), ), ;, }, }, public, static, double, floor, (, double]
[), ;, }, }, public, static, double, floor, (, double, x, ), {, long, y, ;, if, (, x, !=]
[), ), ;, }, }, public, static, double, floor, (, double, x, ), {, long, y, ;, if, (, x]
[-, 1, ), ), ;, }, }, public, static, double, floor, (, double, x, ), {, long, y, ;, if]
[), -, 1, ), ), ;, }, }, public, static, double, floor, (, double, x, ), {, long, y, ;]
[&, 0x7fffffff, ), -, 1, ), ), ;, }, }, public, static, double, floor, (, double, x, ), {, long]
[), -, 1, ), ), ;, }, }, public, static, double, floor, (, double, x, ), {, long, y, ;]
[), ), ;, }, }, public, static, double, floor, (, double, x, ), {, long, y, ;, if, (, x]
[), {, return, x, ;, }, if, (, x, >=, TWO_POWER_52, ||, x, <=, -, TWO_POWER_52, ), {, return, x]
[!=, x, ), {, return, x, ;, }, if, (, x, >=, TWO_POWER_52, ||, x, <=, -, TWO_POWER_52, ), {]
[), {, return, x, ;, }, if, (, x, >=, TWO_POWER_52, ||, x, <=, -, TWO_POWER_52, ), {, return, x]
[;, }, if, (, x, >=, TWO_POWER_52, ||, x, <=, -, TWO_POWER_52, ), {, return, x, ;, }, y, =]
[), {, return, x, ;, }, y, =, (, long, ), x, ;, if, (, x, <, 0, &&, y]
[||, x, <=, -, TWO_POWER_52, ), {, return, x, ;, }, y, =, (, long, ), x, ;, if, (]
[>=, TWO_POWER_52, ||, x, <=, -, TWO_POWER_52, ), {, return, x, ;, }, y, =, (, long, ), x, ;]
[||, x, <=, -, TWO_POWER_52, ), {, return, x, ;, }, y, =, (, long, ), x, ;, if, (]
[), {, return, x, ;, }, y, =, (, long, ), x, ;, if, (, x, <, 0, &&, y]
[<=, -, TWO_POWER_52, ), {, return, x, ;, }, y, =, (, long, ), x, ;, if, (, x, <]
[), {, return, x, ;, }, y, =, (, long, ), x, ;, if, (, x, <, 0, &&, y]
[), {, return, x, ;, }, y, =, (, long, ), x, ;, if, (, x, <, 0, &&, y]
[;, }, y, =, (, long, ), x, ;, if, (, x, <, 0, &&, y, !=, x, ), {]
[=, (, long, ), x, ;, if, (, x, <, 0, &&, y, !=, x, ), {, y, --, ;]
[;, if, (, x, <, 0, &&, y, !=, x, ), {, y, --, ;, }, if, (, y, ==]
[;, if, (, x, <, 0, &&, y, !=, x, ), {, y, --, ;, }, if, (, y, ==]
[), {, y, --, ;, }, if, (, y, ==, 0, ), {, return, x, *, y, ;, }, return]
[&&, y, !=, x, ), {, y, --, ;, }, if, (, y, ==, 0, ), {, return, x, *]
[<, 0, &&, y, !=, x, ), {, y, --, ;, }, if, (, y, ==, 0, ), {, return]
[&&, y, !=, x, ), {, y, --, ;, }, if, (, y, ==, 0, ), {, return, x, *]
[), {, y, --, ;, }, if, (, y, ==, 0, ), {, return, x, *, y, ;, }, return]
[!=, x, ), {, y, --, ;, }, if, (, y, ==, 0, ), {, return, x, *, y, ;]
[), {, y, --, ;, }, if, (, y, ==, 0, ), {, return, x, *, y, ;, }, return]
[;, }, if, (, y, ==, 0, ), {, return, x, *, y, ;, }, return, y, ;, }, public]
[--, ;, }, if, (, y, ==, 0, ), {, return, x, *, y, ;, }, return, y, ;, }]
[), {, return, x, *, y, ;, }, return, y, ;, }, public, static, double, ceil, (, double, x, )]
[==, 0, ), {, return, x, *, y, ;, }, return, y, ;, }, public, static, double, ceil, (, double]
[), {, return, x, *, y, ;, }, return, y, ;, }, public, static, double, ceil, (, double, x, )]
[;, }, return, y, ;, }, public, static, double, ceil, (, double, x, ), {, double, y, ;, if, (]
[*, y, ;, }, return, y, ;, }, public, static, double, ceil, (, double, x, ), {, double, y, ;]
[;, }, return, y, ;, }, public, static, double, ceil, (, double, x, ), {, double, y, ;, if, (]
[;, }, public, static, double, ceil, (, double, x, ), {, double, y, ;, if, (, x, !=, x, )]
[), {, return, x, ;, }, y, =, floor, (, x, ), ;, if, (, y, ==, x, ), {]
[!=, x, ), {, return, x, ;, }, y, =, floor, (, x, ), ;, if, (, y, ==, x]
[), {, return, x, ;, }, y, =, floor, (, x, ), ;, if, (, y, ==, x, ), {]
[;, }, y, =, floor, (, x, ), ;, if, (, y, ==, x, ), {, return, y, ;, }]
[=, floor, (, x, ), ;, if, (, y, ==, x, ), {, return, y, ;, }, y, +=, 1.0]
[;, if, (, y, ==, x, ), {, return, y, ;, }, y, +=, 1.0, ;, if, (, y, ==]
[), ;, if, (, y, ==, x, ), {, return, y, ;, }, y, +=, 1.0, ;, if, (, y]
[), {, return, y, ;, }, y, +=, 1.0, ;, if, (, y, ==, 0, ), {, return, x, *]
[==, x, ), {, return, y, ;, }, y, +=, 1.0, ;, if, (, y, ==, 0, ), {, return]
[), {, return, y, ;, }, y, +=, 1.0, ;, if, (, y, ==, 0, ), {, return, x, *]
[;, }, y, +=, 1.0, ;, if, (, y, ==, 0, ), {, return, x, *, y, ;, }, return]
[+=, 1.0, ;, if, (, y, ==, 0, ), {, return, x, *, y, ;, }, return, y, ;, }]
[;, if, (, y, ==, 0, ), {, return, x, *, y, ;, }, return, y, ;, }, public, static]
[), {, return, x, *, y, ;, }, return, y, ;, }, public, static, double, rint, (, double, x, )]
[==, 0, ), {, return, x, *, y, ;, }, return, y, ;, }, public, static, double, rint, (, double]
[), {, return, x, *, y, ;, }, return, y, ;, }, public, static, double, rint, (, double, x, )]
[;, }, return, y, ;, }, public, static, double, rint, (, double, x, ), {, double, y, =, floor, (]
[*, y, ;, }, return, y, ;, }, public, static, double, rint, (, double, x, ), {, double, y, =]
[;, }, return, y, ;, }, public, static, double, rint, (, double, x, ), {, double, y, =, floor, (]
[;, }, public, static, double, rint, (, double, x, ), {, double, y, =, floor, (, x, ), ;, double]
[;, double, d, =, x, -, y, ;, if, (, d, >, 0.5, ), {, if, (, y, ==, -]
[), ;, double, d, =, x, -, y, ;, if, (, d, >, 0.5, ), {, if, (, y, ==]
[;, if, (, d, >, 0.5, ), {, if, (, y, ==, -, 1.0, ), {, return, -, 0.0, ;]
[-, y, ;, if, (, d, >, 0.5, ), {, if, (, y, ==, -, 1.0, ), {, return, -]
[;, if, (, d, >, 0.5, ), {, if, (, y, ==, -, 1.0, ), {, return, -, 0.0, ;]
[), {, if, (, y, ==, -, 1.0, ), {, return, -, 0.0, ;, }, return, y, +, 1.0, ;]
[>, 0.5, ), {, if, (, y, ==, -, 1.0, ), {, return, -, 0.0, ;, }, return, y, +]
[), {, if, (, y, ==, -, 1.0, ), {, return, -, 0.0, ;, }, return, y, +, 1.0, ;]
[), {, return, -, 0.0, ;, }, return, y, +, 1.0, ;, }, if, (, d, <, 0.5, ), {]
[==, -, 1.0, ), {, return, -, 0.0, ;, }, return, y, +, 1.0, ;, }, if, (, d, <]
[), {, return, -, 0.0, ;, }, return, y, +, 1.0, ;, }, if, (, d, <, 0.5, ), {]
[), {, return, -, 0.0, ;, }, return, y, +, 1.0, ;, }, if, (, d, <, 0.5, ), {]
[;, }, return, y, +, 1.0, ;, }, if, (, d, <, 0.5, ), {, return, y, ;, }, long]
[;, }, return, y, +, 1.0, ;, }, if, (, d, <, 0.5, ), {, return, y, ;, }, long]
[;, }, if, (, d, <, 0.5, ), {, return, y, ;, }, long, z, =, (, long, ), y]
[+, 1.0, ;, }, if, (, d, <, 0.5, ), {, return, y, ;, }, long, z, =, (, long]
[;, }, if, (, d, <, 0.5, ), {, return, y, ;, }, long, z, =, (, long, ), y]
[), {, return, y, ;, }, long, z, =, (, long, ), y, ;, return, (, z, &, 1, )]
[<, 0.5, ), {, return, y, ;, }, long, z, =, (, long, ), y, ;, return, (, z, &]
[), {, return, y, ;, }, long, z, =, (, long, ), y, ;, return, (, z, &, 1, )]
[;, }, long, z, =, (, long, ), y, ;, return, (, z, &, 1, ), ==, 0, ?, y]
[;, return, (, z, &, 1, ), ==, 0, ?, y, :, y, +, 1.0, ;, }, public, static, long]
[;, return, (, z, &, 1, ), ==, 0, ?, y, :, y, +, 1.0, ;, }, public, static, long]
[;, }, public, static, long, round, (, double, x, ), {, return, (, long, ), floor, (, x, +, 0.5]
[?, y, :, y, +, 1.0, ;, }, public, static, long, round, (, double, x, ), {, return, (, long]
[==, 0, ?, y, :, y, +, 1.0, ;, }, public, static, long, round, (, double, x, ), {, return]
[), ==, 0, ?, y, :, y, +, 1.0, ;, }, public, static, long, round, (, double, x, ), {]
[&, 1, ), ==, 0, ?, y, :, y, +, 1.0, ;, }, public, static, long, round, (, double, x]
[), ==, 0, ?, y, :, y, +, 1.0, ;, }, public, static, long, round, (, double, x, ), {]
[?, y, :, y, +, 1.0, ;, }, public, static, long, round, (, double, x, ), {, return, (, long]
[:, y, +, 1.0, ;, }, public, static, long, round, (, double, x, ), {, return, (, long, ), floor]
[;, }, public, static, long, round, (, double, x, ), {, return, (, long, ), floor, (, x, +, 0.5]
[+, 1.0, ;, }, public, static, long, round, (, double, x, ), {, return, (, long, ), floor, (, x]
[;, }, public, static, long, round, (, double, x, ), {, return, (, long, ), floor, (, x, +, 0.5]
[;, }, public, static, int, round, (, final, float, x, ), {, return, (, int, ), floor, (, x, +]
[;, }, public, static, int, round, (, final, float, x, ), {, return, (, int, ), floor, (, x, +]
[), ;, }, public, static, int, round, (, final, float, x, ), {, return, (, int, ), floor, (, x]
[+, 0.5, ), ;, }, public, static, int, round, (, final, float, x, ), {, return, (, int, ), floor]
[), ;, }, public, static, int, round, (, final, float, x, ), {, return, (, int, ), floor, (, x]
[;, }, public, static, int, min, (, final, int, a, ,, final, int, b, ), {, return, (, a, <=]
[;, }, public, static, int, min, (, final, int, a, ,, final, int, b, ), {, return, (, a, <=]
[), ;, }, public, static, int, min, (, final, int, a, ,, final, int, b, ), {, return, (, a]
[+, 0.5f, ), ;, }, public, static, int, min, (, final, int, a, ,, final, int, b, ), {, return]
[), ;, }, public, static, int, min, (, final, int, a, ,, final, int, b, ), {, return, (, a]
[;, }, public, static, long, min, (, final, long, a, ,, final, long, b, ), {, return, (, a, <=]
[?, a, :, b, ;, }, public, static, long, min, (, final, long, a, ,, final, long, b, ), {]
[), ?, a, :, b, ;, }, public, static, long, min, (, final, long, a, ,, final, long, b, )]
[<=, b, ), ?, a, :, b, ;, }, public, static, long, min, (, final, long, a, ,, final, long]
[), ?, a, :, b, ;, }, public, static, long, min, (, final, long, a, ,, final, long, b, )]
[:, b, ;, }, public, static, long, min, (, final, long, a, ,, final, long, b, ), {, return, (]
[;, }, public, static, long, min, (, final, long, a, ,, final, long, b, ), {, return, (, a, <=]
[;, }, public, static, float, min, (, final, float, a, ,, final, float, b, ), {, if, (, a, >]
[?, a, :, b, ;, }, public, static, float, min, (, final, float, a, ,, final, float, b, ), {]
[), ?, a, :, b, ;, }, public, static, float, min, (, final, float, a, ,, final, float, b, )]
[<=, b, ), ?, a, :, b, ;, }, public, static, float, min, (, final, float, a, ,, final, float]
[), ?, a, :, b, ;, }, public, static, float, min, (, final, float, a, ,, final, float, b, )]
[:, b, ;, }, public, static, float, min, (, final, float, a, ,, final, float, b, ), {, if, (]
[;, }, public, static, float, min, (, final, float, a, ,, final, float, b, ), {, if, (, a, >]
[), {, return, b, ;, }, if, (, a, <, b, ), {, return, a, ;, }, if, (, a]
[>, b, ), {, return, b, ;, }, if, (, a, <, b, ), {, return, a, ;, }, if]
[), {, return, b, ;, }, if, (, a, <, b, ), {, return, a, ;, }, if, (, a]
[;, }, if, (, a, <, b, ), {, return, a, ;, }, if, (, a, !=, b, ), {]
[), {, return, a, ;, }, if, (, a, !=, b, ), {, return, Float, ., NaN, ;, }, int]
[<, b, ), {, return, a, ;, }, if, (, a, !=, b, ), {, return, Float, ., NaN, ;]
[), {, return, a, ;, }, if, (, a, !=, b, ), {, return, Float, ., NaN, ;, }, int]
[;, }, if, (, a, !=, b, ), {, return, Float, ., NaN, ;, }, int, bits, =, Float, .]
[), {, return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (]
[!=, b, ), {, return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;]
[), {, return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (]
[;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (, bits, ==, 0x80000000, ), {, return]
[., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (, bits, ==, 0x80000000, )]
[;, if, (, bits, ==, 0x80000000, ), {, return, a, ;, }, return, b, ;, }, public, static, double, min]
[., floatToRawIntBits, (, a, ), ;, if, (, bits, ==, 0x80000000, ), {, return, a, ;, }, return, b, ;]
[), ;, if, (, bits, ==, 0x80000000, ), {, return, a, ;, }, return, b, ;, }, public, static, double]
[), {, return, a, ;, }, return, b, ;, }, public, static, double, min, (, final, double, a, ,, final]
[==, 0x80000000, ), {, return, a, ;, }, return, b, ;, }, public, static, double, min, (, final, double, a]
[), {, return, a, ;, }, return, b, ;, }, public, static, double, min, (, final, double, a, ,, final]
[;, }, return, b, ;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ), {]
[;, }, public, static, double, min, (, final, double, a, ,, final, double, b, ), {, if, (, a, >]
[), {, return, b, ;, }, if, (, a, <, b, ), {, return, a, ;, }, if, (, a]
[>, b, ), {, return, b, ;, }, if, (, a, <, b, ), {, return, a, ;, }, if]
[), {, return, b, ;, }, if, (, a, <, b, ), {, return, a, ;, }, if, (, a]
[;, }, if, (, a, <, b, ), {, return, a, ;, }, if, (, a, !=, b, ), {]
[), {, return, a, ;, }, if, (, a, !=, b, ), {, return, Double, ., NaN, ;, }, long]
[<, b, ), {, return, a, ;, }, if, (, a, !=, b, ), {, return, Double, ., NaN, ;]
[), {, return, a, ;, }, if, (, a, !=, b, ), {, return, Double, ., NaN, ;, }, long]
[;, }, if, (, a, !=, b, ), {, return, Double, ., NaN, ;, }, long, bits, =, Double, .]
[), {, return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (]
[!=, b, ), {, return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;]
[), {, return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (]
[;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (, bits, ==, 0x8000000000000000L, ), {, return]
[., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (, bits, ==, 0x8000000000000000L, )]
[;, if, (, bits, ==, 0x8000000000000000L, ), {, return, a, ;, }, return, b, ;, }, public, static, int, max]
[., doubleToRawLongBits, (, a, ), ;, if, (, bits, ==, 0x8000000000000000L, ), {, return, a, ;, }, return, b, ;]
[), ;, if, (, bits, ==, 0x8000000000000000L, ), {, return, a, ;, }, return, b, ;, }, public, static, int]
[), {, return, a, ;, }, return, b, ;, }, public, static, int, max, (, final, int, a, ,, final]
[==, 0x8000000000000000L, ), {, return, a, ;, }, return, b, ;, }, public, static, int, max, (, final, int, a]
[), {, return, a, ;, }, return, b, ;, }, public, static, int, max, (, final, int, a, ,, final]
[;, }, return, b, ;, }, public, static, int, max, (, final, int, a, ,, final, int, b, ), {]
[;, }, public, static, int, max, (, final, int, a, ,, final, int, b, ), {, return, (, a, <=]
[;, }, public, static, long, max, (, final, long, a, ,, final, long, b, ), {, return, (, a, <=]
[?, b, :, a, ;, }, public, static, long, max, (, final, long, a, ,, final, long, b, ), {]
[), ?, b, :, a, ;, }, public, static, long, max, (, final, long, a, ,, final, long, b, )]
[<=, b, ), ?, b, :, a, ;, }, public, static, long, max, (, final, long, a, ,, final, long]
[), ?, b, :, a, ;, }, public, static, long, max, (, final, long, a, ,, final, long, b, )]
[:, a, ;, }, public, static, long, max, (, final, long, a, ,, final, long, b, ), {, return, (]
[;, }, public, static, long, max, (, final, long, a, ,, final, long, b, ), {, return, (, a, <=]
[;, }, public, static, float, max, (, final, float, a, ,, final, float, b, ), {, if, (, a, >]
[?, b, :, a, ;, }, public, static, float, max, (, final, float, a, ,, final, float, b, ), {]
[), ?, b, :, a, ;, }, public, static, float, max, (, final, float, a, ,, final, float, b, )]
[<=, b, ), ?, b, :, a, ;, }, public, static, float, max, (, final, float, a, ,, final, float]
[), ?, b, :, a, ;, }, public, static, float, max, (, final, float, a, ,, final, float, b, )]
[:, a, ;, }, public, static, float, max, (, final, float, a, ,, final, float, b, ), {, if, (]
[;, }, public, static, float, max, (, final, float, a, ,, final, float, b, ), {, if, (, a, >]
[), {, return, a, ;, }, if, (, a, <, b, ), {, return, b, ;, }, if, (, a]
[>, b, ), {, return, a, ;, }, if, (, a, <, b, ), {, return, b, ;, }, if]
[), {, return, a, ;, }, if, (, a, <, b, ), {, return, b, ;, }, if, (, a]
[;, }, if, (, a, <, b, ), {, return, b, ;, }, if, (, a, !=, b, ), {]
[), {, return, b, ;, }, if, (, a, !=, b, ), {, return, Float, ., NaN, ;, }, int]
[<, b, ), {, return, b, ;, }, if, (, a, !=, b, ), {, return, Float, ., NaN, ;]
[), {, return, b, ;, }, if, (, a, !=, b, ), {, return, Float, ., NaN, ;, }, int]
[;, }, if, (, a, !=, b, ), {, return, Float, ., NaN, ;, }, int, bits, =, Float, .]
[), {, return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (]
[!=, b, ), {, return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;]
[), {, return, Float, ., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (]
[;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (, bits, ==, 0x80000000, ), {, return]
[., NaN, ;, }, int, bits, =, Float, ., floatToRawIntBits, (, a, ), ;, if, (, bits, ==, 0x80000000, )]
[;, if, (, bits, ==, 0x80000000, ), {, return, b, ;, }, return, a, ;, }, public, static, double, max]
[., floatToRawIntBits, (, a, ), ;, if, (, bits, ==, 0x80000000, ), {, return, b, ;, }, return, a, ;]
[), ;, if, (, bits, ==, 0x80000000, ), {, return, b, ;, }, return, a, ;, }, public, static, double]
[), {, return, b, ;, }, return, a, ;, }, public, static, double, max, (, final, double, a, ,, final]
[==, 0x80000000, ), {, return, b, ;, }, return, a, ;, }, public, static, double, max, (, final, double, a]
[), {, return, b, ;, }, return, a, ;, }, public, static, double, max, (, final, double, a, ,, final]
[;, }, return, a, ;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ), {]
[;, }, public, static, double, max, (, final, double, a, ,, final, double, b, ), {, if, (, a, >]
[), {, return, a, ;, }, if, (, a, <, b, ), {, return, b, ;, }, if, (, a]
[>, b, ), {, return, a, ;, }, if, (, a, <, b, ), {, return, b, ;, }, if]
[), {, return, a, ;, }, if, (, a, <, b, ), {, return, b, ;, }, if, (, a]
[;, }, if, (, a, <, b, ), {, return, b, ;, }, if, (, a, !=, b, ), {]
[), {, return, b, ;, }, if, (, a, !=, b, ), {, return, Double, ., NaN, ;, }, long]
[<, b, ), {, return, b, ;, }, if, (, a, !=, b, ), {, return, Double, ., NaN, ;]
[), {, return, b, ;, }, if, (, a, !=, b, ), {, return, Double, ., NaN, ;, }, long]
[;, }, if, (, a, !=, b, ), {, return, Double, ., NaN, ;, }, long, bits, =, Double, .]
[), {, return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (]
[!=, b, ), {, return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;]
[), {, return, Double, ., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (]
[;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (, bits, ==, 0x8000000000000000L, ), {, return]
[., NaN, ;, }, long, bits, =, Double, ., doubleToRawLongBits, (, a, ), ;, if, (, bits, ==, 0x8000000000000000L, )]
[;, if, (, bits, ==, 0x8000000000000000L, ), {, return, b, ;, }, return, a, ;, }, public, static, double, hypot]
[., doubleToRawLongBits, (, a, ), ;, if, (, bits, ==, 0x8000000000000000L, ), {, return, b, ;, }, return, a, ;]
[), ;, if, (, bits, ==, 0x8000000000000000L, ), {, return, b, ;, }, return, a, ;, }, public, static, double]
[), {, return, b, ;, }, return, a, ;, }, public, static, double, hypot, (, final, double, x, ,, final]
[==, 0x8000000000000000L, ), {, return, b, ;, }, return, a, ;, }, public, static, double, hypot, (, final, double, x]
[), {, return, b, ;, }, return, a, ;, }, public, static, double, hypot, (, final, double, x, ,, final]
[;, }, return, a, ;, }, public, static, double, hypot, (, final, double, x, ,, final, double, y, ), {]
[;, }, public, static, double, hypot, (, final, double, x, ,, final, double, y, ), {, if, (, Double, .]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, if, (, Double, ., isNaN, (, x, ), ||, Double, .]
[||, Double, ., isInfinite, (, y, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, if, (, Double, .]
[., isInfinite, (, x, ), ||, Double, ., isInfinite, (, y, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }]
[), ||, Double, ., isInfinite, (, y, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, if, (, Double]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, if, (, Double, ., isNaN, (, x, ), ||, Double, .]
[., isInfinite, (, y, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, if, (, Double, ., isNaN, (]
[), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, else, if, (, Double, ., isNaN, (, x, ), ||, Double]
[;, }, else, if, (, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, y, ), ), {]
[., POSITIVE_INFINITY, ;, }, else, if, (, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, y, )]
[), {, return, Double, ., NaN, ;, }, else, {, final, int, expX, =, getExponent, (, x, ), ;, final]
[||, Double, ., isNaN, (, y, ), ), {, return, Double, ., NaN, ;, }, else, {, final, int, expX]
[., isNaN, (, x, ), ||, Double, ., isNaN, (, y, ), ), {, return, Double, ., NaN, ;, }]
[), ||, Double, ., isNaN, (, y, ), ), {, return, Double, ., NaN, ;, }, else, {, final, int]
[), {, return, Double, ., NaN, ;, }, else, {, final, int, expX, =, getExponent, (, x, ), ;, final]
[., isNaN, (, y, ), ), {, return, Double, ., NaN, ;, }, else, {, final, int, expX, =, getExponent]
[), ), {, return, Double, ., NaN, ;, }, else, {, final, int, expX, =, getExponent, (, x, ), ;]
[;, }, else, {, final, int, expX, =, getExponent, (, x, ), ;, final, int, expY, =, getExponent, (, y]
[., NaN, ;, }, else, {, final, int, expX, =, getExponent, (, x, ), ;, final, int, expY, =, getExponent]
[;, final, int, expY, =, getExponent, (, y, ), ;, if, (, expX, >, expY, +, 27, ), {, return]
[), ;, final, int, expY, =, getExponent, (, y, ), ;, if, (, expX, >, expY, +, 27, ), {]
[;, if, (, expX, >, expY, +, 27, ), {, return, abs, (, x, ), ;, }, else, if, (]
[), ;, if, (, expX, >, expY, +, 27, ), {, return, abs, (, x, ), ;, }, else, if]
[), {, return, abs, (, x, ), ;, }, else, if, (, expY, >, expX, +, 27, ), {, return]
[>, expY, +, 27, ), {, return, abs, (, x, ), ;, }, else, if, (, expY, >, expX, +]
[), {, return, abs, (, x, ), ;, }, else, if, (, expY, >, expX, +, 27, ), {, return]
[+, 27, ), {, return, abs, (, x, ), ;, }, else, if, (, expY, >, expX, +, 27, )]
[), {, return, abs, (, x, ), ;, }, else, if, (, expY, >, expX, +, 27, ), {, return]
[;, }, else, if, (, expY, >, expX, +, 27, ), {, return, abs, (, y, ), ;, }, else]
[), ;, }, else, if, (, expY, >, expX, +, 27, ), {, return, abs, (, y, ), ;, }]
[), {, return, abs, (, y, ), ;, }, else, {, final, int, middleExp, =, (, expX, +, expY, )]
[>, expX, +, 27, ), {, return, abs, (, y, ), ;, }, else, {, final, int, middleExp, =, (]
[), {, return, abs, (, y, ), ;, }, else, {, final, int, middleExp, =, (, expX, +, expY, )]
[+, 27, ), {, return, abs, (, y, ), ;, }, else, {, final, int, middleExp, =, (, expX, +]
[), {, return, abs, (, y, ), ;, }, else, {, final, int, middleExp, =, (, expX, +, expY, )]
[;, }, else, {, final, int, middleExp, =, (, expX, +, expY, ), /, 2, ;, final, double, scaledX, =]
[), ;, }, else, {, final, int, middleExp, =, (, expX, +, expY, ), /, 2, ;, final, double, scaledX]
[;, final, double, scaledX, =, scalb, (, x, ,, -, middleExp, ), ;, final, double, scaledY, =, scalb, (, y]
[/, 2, ;, final, double, scaledX, =, scalb, (, x, ,, -, middleExp, ), ;, final, double, scaledY, =, scalb]
[), /, 2, ;, final, double, scaledX, =, scalb, (, x, ,, -, middleExp, ), ;, final, double, scaledY, =]
[+, expY, ), /, 2, ;, final, double, scaledX, =, scalb, (, x, ,, -, middleExp, ), ;, final, double]
[), /, 2, ;, final, double, scaledX, =, scalb, (, x, ,, -, middleExp, ), ;, final, double, scaledY, =]
[;, final, double, scaledX, =, scalb, (, x, ,, -, middleExp, ), ;, final, double, scaledY, =, scalb, (, y]
[;, final, double, scaledY, =, scalb, (, y, ,, -, middleExp, ), ;, final, double, scaledH, =, sqrt, (, scaledX]
[,, -, middleExp, ), ;, final, double, scaledY, =, scalb, (, y, ,, -, middleExp, ), ;, final, double, scaledH]
[), ;, final, double, scaledY, =, scalb, (, y, ,, -, middleExp, ), ;, final, double, scaledH, =, sqrt, (]
[), ;, final, double, scaledY, =, scalb, (, y, ,, -, middleExp, ), ;, final, double, scaledH, =, sqrt, (]
[;, final, double, scaledH, =, sqrt, (, scaledX, *, scaledX, +, scaledY, *, scaledY, ), ;, return, scalb, (, scaledH]
[,, -, middleExp, ), ;, final, double, scaledH, =, sqrt, (, scaledX, *, scaledX, +, scaledY, *, scaledY, ), ;]
[), ;, final, double, scaledH, =, sqrt, (, scaledX, *, scaledX, +, scaledY, *, scaledY, ), ;, return, scalb, (]
[), ;, final, double, scaledH, =, sqrt, (, scaledX, *, scaledX, +, scaledY, *, scaledY, ), ;, return, scalb, (]
[;, return, scalb, (, scaledH, ,, middleExp, ), ;, }, }, }, public, static, double, IEEEremainder, (, double, dividend, ,]
[), ;, return, scalb, (, scaledH, ,, middleExp, ), ;, }, }, }, public, static, double, IEEEremainder, (, double, dividend]
[+, scaledY, *, scaledY, ), ;, return, scalb, (, scaledH, ,, middleExp, ), ;, }, }, }, public, static, double]
[*, scaledX, +, scaledY, *, scaledY, ), ;, return, scalb, (, scaledH, ,, middleExp, ), ;, }, }, }, public]
[+, scaledY, *, scaledY, ), ;, return, scalb, (, scaledH, ,, middleExp, ), ;, }, }, }, public, static, double]
[), ;, return, scalb, (, scaledH, ,, middleExp, ), ;, }, }, }, public, static, double, IEEEremainder, (, double, dividend]
[*, scaledY, ), ;, return, scalb, (, scaledH, ,, middleExp, ), ;, }, }, }, public, static, double, IEEEremainder, (]
[), ;, return, scalb, (, scaledH, ,, middleExp, ), ;, }, }, }, public, static, double, IEEEremainder, (, double, dividend]
[;, }, }, }, public, static, double, IEEEremainder, (, double, dividend, ,, double, divisor, ), {, return, StrictMath, ., IEEEremainder]
[,, middleExp, ), ;, }, }, }, public, static, double, IEEEremainder, (, double, dividend, ,, double, divisor, ), {, return]
[), ;, }, }, }, public, static, double, IEEEremainder, (, double, dividend, ,, double, divisor, ), {, return, StrictMath, .]
[;, }, public, static, double, copySign, (, double, magnitude, ,, double, sign, ), {, final, long, m, =, Double, .]
[., IEEEremainder, (, dividend, ,, divisor, ), ;, }, public, static, double, copySign, (, double, magnitude, ,, double, sign, )]
[,, divisor, ), ;, }, public, static, double, copySign, (, double, magnitude, ,, double, sign, ), {, final, long, m]
[), ;, }, public, static, double, copySign, (, double, magnitude, ,, double, sign, ), {, final, long, m, =, Double]
[;, final, long, s, =, Double, ., doubleToRawLongBits, (, sign, ), ;, if, (, (, m, ^, s, ), >=]
[., doubleToRawLongBits, (, magnitude, ), ;, final, long, s, =, Double, ., doubleToRawLongBits, (, sign, ), ;, if, (, (]
[), ;, final, long, s, =, Double, ., doubleToRawLongBits, (, sign, ), ;, if, (, (, m, ^, s, )]
[;, if, (, (, m, ^, s, ), >=, 0, ), {, return, magnitude, ;, }, return, -, magnitude, ;]
[., doubleToRawLongBits, (, sign, ), ;, if, (, (, m, ^, s, ), >=, 0, ), {, return, magnitude, ;]
[), ;, if, (, (, m, ^, s, ), >=, 0, ), {, return, magnitude, ;, }, return, -, magnitude]
[), {, return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, float, copySign, (, float, magnitude, ,, float]
[>=, 0, ), {, return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, float, copySign, (, float, magnitude]
[), >=, 0, ), {, return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, float, copySign, (, float]
[^, s, ), >=, 0, ), {, return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, float, copySign]
[), >=, 0, ), {, return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, float, copySign, (, float]
[), {, return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, float, copySign, (, float, magnitude, ,, float]
[;, }, return, -, magnitude, ;, }, public, static, float, copySign, (, float, magnitude, ,, float, sign, ), {, final]
[;, }, public, static, float, copySign, (, float, magnitude, ,, float, sign, ), {, final, int, m, =, Float, .]
[;, }, public, static, float, copySign, (, float, magnitude, ,, float, sign, ), {, final, int, m, =, Float, .]
[;, final, int, s, =, Float, ., floatToRawIntBits, (, sign, ), ;, if, (, (, m, ^, s, ), >=]
[., floatToRawIntBits, (, magnitude, ), ;, final, int, s, =, Float, ., floatToRawIntBits, (, sign, ), ;, if, (, (]
[), ;, final, int, s, =, Float, ., floatToRawIntBits, (, sign, ), ;, if, (, (, m, ^, s, )]
[;, if, (, (, m, ^, s, ), >=, 0, ), {, return, magnitude, ;, }, return, -, magnitude, ;]
[., floatToRawIntBits, (, sign, ), ;, if, (, (, m, ^, s, ), >=, 0, ), {, return, magnitude, ;]
[), ;, if, (, (, m, ^, s, ), >=, 0, ), {, return, magnitude, ;, }, return, -, magnitude]
[), {, return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, int, getExponent, (, final, double, d, )]
[>=, 0, ), {, return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, int, getExponent, (, final, double]
[), >=, 0, ), {, return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, int, getExponent, (, final]
[^, s, ), >=, 0, ), {, return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, int, getExponent]
[), >=, 0, ), {, return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, int, getExponent, (, final]
[), {, return, magnitude, ;, }, return, -, magnitude, ;, }, public, static, int, getExponent, (, final, double, d, )]
[;, }, return, -, magnitude, ;, }, public, static, int, getExponent, (, final, double, d, ), {, return, (, int]
[;, }, public, static, int, getExponent, (, final, double, d, ), {, return, (, int, ), (, (, Double, .]
[;, }, public, static, int, getExponent, (, final, double, d, ), {, return, (, int, ), (, (, Double, .]
[;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (, (, Float, ., floatToRawIntBits, (, f]
[-, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (, (, Float, ., floatToRawIntBits]
[-, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (, (, Float, ., floatToRawIntBits]
[), -, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (, (, Float, .]
[&, 0x7ff, ), -, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (, (]
[), &, 0x7ff, ), -, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (]
[>, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, }, public, static, int, getExponent, (, final, float, f]
[., doubleToRawLongBits, (, d, ), >, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, }, public, static, int]
[), >, >, >, 52, ), &, 0x7ff, ), -, 1023, ;, }, public, static, int, getExponent, (, final, float]
[), &, 0x7ff, ), -, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (]
[), -, 1023, ;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (, (, Float, .]
[;, }, public, static, int, getExponent, (, final, float, f, ), {, return, (, (, Float, ., floatToRawIntBits, (, f]
[;, }, public, static, void, main, (, String, [, ], a, ), {, PrintStream, out, =, System, ., out, ;]
[-, 127, ;, }, public, static, void, main, (, String, [, ], a, ), {, PrintStream, out, =, System, .]
[), -, 127, ;, }, public, static, void, main, (, String, [, ], a, ), {, PrintStream, out, =, System]
[&, 0xff, ), -, 127, ;, }, public, static, void, main, (, String, [, ], a, ), {, PrintStream, out]
[), &, 0xff, ), -, 127, ;, }, public, static, void, main, (, String, [, ], a, ), {, PrintStream]
[>, >, >, 23, ), &, 0xff, ), -, 127, ;, }, public, static, void, main, (, String, [, ]]
[., floatToRawIntBits, (, f, ), >, >, >, 23, ), &, 0xff, ), -, 127, ;, }, public, static, void]
[), >, >, >, 23, ), &, 0xff, ), -, 127, ;, }, public, static, void, main, (, String, []
[), &, 0xff, ), -, 127, ;, }, public, static, void, main, (, String, [, ], a, ), {, PrintStream]
[), -, 127, ;, }, public, static, void, main, (, String, [, ], a, ), {, PrintStream, out, =, System]
[;, }, public, static, void, main, (, String, [, ], a, ), {, PrintStream, out, =, System, ., out, ;]
[;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_A, ), ;, FastMathCalc, ., printarray, (]
[., out, ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_A, ), ;, FastMathCalc, .]
[;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray, (]
[., printarray, (, out, ,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,]
[,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,]
[,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, .]
[,, ExpIntTable, ., EXP_INT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, )]
[), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray]
[., EXP_INT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc]
[;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray, (]
[., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,]
[,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,]
[,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, .]
[,, ExpIntTable, ., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, )]
[), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray]
[., EXP_INT_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc]
[;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray, (]
[., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,]
[,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,]
[,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, .]
[,, ExpFracTable, ., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, )]
[), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray]
[., EXP_FRAC_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc]
[;, FastMathCalc, ., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;, FastMathCalc, ., printarray, (]
[., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,]
[,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,]
[,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, .]
[,, ExpFracTable, ., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, )]
[), ;, FastMathCalc, ., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;, FastMathCalc, ., printarray]
[., EXP_FRAC_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;, FastMathCalc]
[;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,]
[., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;, FastMathCalc, ., printarray, (, out, ,]
[,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,]
[,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, )]
[,, lnMant, ., LN_MANT, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;, FastMathCalc]
[), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out]
[., LN_MANT, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;, FastMathCalc, ., printarray]
[;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,]
[., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_B", ,]
[,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, )]
[,, SINE_TABLE_LEN, ,, SINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;, FastMathCalc]
[,, SINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;, FastMathCalc, ., printarray]
[), ;, FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out]
[;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,]
[., printarray, (, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_A", ,]
[,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, )]
[,, SINE_TABLE_LEN, ,, SINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;, FastMathCalc]
[,, SINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray]
[), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out]
[;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,]
[., printarray, (, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_B", ,]
[,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, )]
[,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;, FastMathCalc]
[,, COSINE_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray]
[), ;, FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out]
[;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,]
[., printarray, (, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_A", ,]
[,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, )]
[,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, ), ;, FastMathCalc]
[,, COSINE_TABLE_B, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, ), ;, FastMathCalc, ., printarray]
[), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out]
[;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_B", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_B, ), ;, }, private, static, class, ExpIntTable, {]
[., printarray, (, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_B", ,]
[,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_B", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_B, )]
[,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_B", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_B, ), ;, }]
[,, TANGENT_TABLE_A, ), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_B", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_B, ), ;, }, private, static]
[), ;, FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_B", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_B, ), ;, }, private, static, class, ExpIntTable]
[;, }, private, static, class, ExpIntTable, {, private, static, final, double, [, ], EXP_INT_TABLE_A, ;, private, static, final, double, []
[., printarray, (, out, ,, "TANGENT_TABLE_B", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_B, ), ;, }, private, static, class, ExpIntTable, {, private, static]
[,, "TANGENT_TABLE_B", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_B, ), ;, }, private, static, class, ExpIntTable, {, private, static, final, double, [, ]]
[,, SINE_TABLE_LEN, ,, TANGENT_TABLE_B, ), ;, }, private, static, class, ExpIntTable, {, private, static, final, double, [, ], EXP_INT_TABLE_A, ;]
[,, TANGENT_TABLE_B, ), ;, }, private, static, class, ExpIntTable, {, private, static, final, double, [, ], EXP_INT_TABLE_A, ;, private, static]
[), ;, }, private, static, class, ExpIntTable, {, private, static, final, double, [, ], EXP_INT_TABLE_A, ;, private, static, final, double]
[), {, EXP_INT_TABLE_A, =, new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ], ;, EXP_INT_TABLE_B, =, new, double, [, FastMath, ., EXP_INT_TABLE_LEN]
[=, new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ], ;, EXP_INT_TABLE_B, =, new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ], ;, final]
[;, EXP_INT_TABLE_B, =, new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ], ;, final, double, tmp, [, ], =, new, double, []
[], ;, EXP_INT_TABLE_B, =, new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ], ;, final, double, tmp, [, ], =, new, double]
[., EXP_INT_TABLE_LEN, ], ;, EXP_INT_TABLE_B, =, new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ], ;, final, double, tmp, [, ], =]
[=, new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ], ;, final, double, tmp, [, ], =, new, double, [, 2, ]]
[;, final, double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, recip, [, ], =, new]
[], ;, final, double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, recip, [, ], =]
[., EXP_INT_TABLE_LEN, ], ;, final, double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, recip, []
[;, final, double, recip, [, ], =, new, double, [, 2, ], ;, for, (, int, i, =, 0, ;]
[], ;, final, double, recip, [, ], =, new, double, [, 2, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {, FastMathCalc, .]
[], ;, for, (, int, i, =, 0, ;, i, <, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {, FastMathCalc]
[;, i, <, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;]
[;, i, ++, ), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +, FastMath, .]
[<, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, []
[;, i, ++, ), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +, FastMath, .]
[., EXP_INT_TABLE_MAX_INDEX, ;, i, ++, ), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +]
[), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =]
[++, ), {, FastMathCalc, ., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ]]
[;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, [, i, +, FastMath]
[., expint, (, i, ,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0]
[,, tmp, ), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, []
[), ;, EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, [, i, +]
[=, tmp, [, 0, ], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ], ;]
[[, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX]
[], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ]]
[+, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =]
[], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ]]
[., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 0, ], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, []
[;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ], ;, if, (, i, !=, 0]
[[, 0, ], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ], ;, if, (]
[], ;, EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ], ;, if, (, i, !=]
[=, tmp, [, 1, ], ;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip]
[[, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ], ;, if, (, i, !=, 0, ), {]
[], =, tmp, [, 1, ], ;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,]
[+, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ], ;, if, (, i, !=, 0, ), {, FastMathCalc, .]
[], =, tmp, [, 1, ], ;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,]
[., EXP_INT_TABLE_MAX_INDEX, ], =, tmp, [, 1, ], ;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (]
[;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath]
[[, 1, ], ;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;]
[], ;, if, (, i, !=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, []
[), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =]
[!=, 0, ), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i]
[), {, FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =]
[;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX]
[., splitReciprocal, (, tmp, ,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0]
[,, recip, ), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, []
[), ;, EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, [, FastMath, .]
[=, recip, [, 0, ], ;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 1, ], ;]
[[, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i]
[], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 1, ]]
[-, i, ], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, []
[., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =]
[], =, recip, [, 0, ], ;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 1, ]]
[;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 1, ], ;, }, }, }, else, {]
[[, 0, ], ;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 1, ], ;, }, }]
[], ;, EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 1, ], ;, }, }, }, else]
[=, recip, [, 1, ], ;, }, }, }, else, {, EXP_INT_TABLE_A, =, FastMathLiteralArrays, ., loadExpIntA, (, ), ;, EXP_INT_TABLE_B]
[[, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 1, ], ;, }, }, }, else, {, EXP_INT_TABLE_A, =]
[], =, recip, [, 1, ], ;, }, }, }, else, {, EXP_INT_TABLE_A, =, FastMathLiteralArrays, ., loadExpIntA, (, ), ;]
[-, i, ], =, recip, [, 1, ], ;, }, }, }, else, {, EXP_INT_TABLE_A, =, FastMathLiteralArrays, ., loadExpIntA, (]
[., EXP_INT_TABLE_MAX_INDEX, -, i, ], =, recip, [, 1, ], ;, }, }, }, else, {, EXP_INT_TABLE_A, =, FastMathLiteralArrays, .]
[], =, recip, [, 1, ], ;, }, }, }, else, {, EXP_INT_TABLE_A, =, FastMathLiteralArrays, ., loadExpIntA, (, ), ;]
[;, }, }, }, else, {, EXP_INT_TABLE_A, =, FastMathLiteralArrays, ., loadExpIntA, (, ), ;, EXP_INT_TABLE_B, =, FastMathLiteralArrays, ., loadExpIntB, (]
[[, 1, ], ;, }, }, }, else, {, EXP_INT_TABLE_A, =, FastMathLiteralArrays, ., loadExpIntA, (, ), ;, EXP_INT_TABLE_B, =, FastMathLiteralArrays]
[], ;, }, }, }, else, {, EXP_INT_TABLE_A, =, FastMathLiteralArrays, ., loadExpIntA, (, ), ;, EXP_INT_TABLE_B, =, FastMathLiteralArrays, ., loadExpIntB]
[=, FastMathLiteralArrays, ., loadExpIntA, (, ), ;, EXP_INT_TABLE_B, =, FastMathLiteralArrays, ., loadExpIntB, (, ), ;, }, }, }, private, static]
[;, EXP_INT_TABLE_B, =, FastMathLiteralArrays, ., loadExpIntB, (, ), ;, }, }, }, private, static, class, ExpFracTable, {, private, static, final]
[., loadExpIntA, (, ), ;, EXP_INT_TABLE_B, =, FastMathLiteralArrays, ., loadExpIntB, (, ), ;, }, }, }, private, static, class, ExpFracTable]
[=, FastMathLiteralArrays, ., loadExpIntB, (, ), ;, }, }, }, private, static, class, ExpFracTable, {, private, static, final, double, []
[;, }, }, }, private, static, class, ExpFracTable, {, private, static, final, double, [, ], EXP_FRAC_TABLE_A, ;, private, static, final]
[., loadExpIntB, (, ), ;, }, }, }, private, static, class, ExpFracTable, {, private, static, final, double, [, ], EXP_FRAC_TABLE_A]
[), {, EXP_FRAC_TABLE_A, =, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ], ;, EXP_FRAC_TABLE_B, =, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN]
[=, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ], ;, EXP_FRAC_TABLE_B, =, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ], ;, final]
[;, EXP_FRAC_TABLE_B, =, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ], ;, final, double, tmp, [, ], =, new, double, []
[], ;, EXP_FRAC_TABLE_B, =, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ], ;, final, double, tmp, [, ], =, new, double]
[., EXP_FRAC_TABLE_LEN, ], ;, EXP_FRAC_TABLE_B, =, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ], ;, final, double, tmp, [, ], =]
[=, new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ], ;, final, double, tmp, [, ], =, new, double, [, 2, ]]
[;, final, double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, factor, =, 1d, /, (]
[], ;, final, double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, factor, =, 1d, /]
[., EXP_FRAC_TABLE_LEN, ], ;, final, double, tmp, [, ], =, new, double, [, 2, ], ;, final, double, factor, =]
[;, final, double, factor, =, 1d, /, (, EXP_FRAC_TABLE_LEN, -, 1, ), ;, for, (, int, i, =, 0, ;]
[], ;, final, double, factor, =, 1d, /, (, EXP_FRAC_TABLE_LEN, -, 1, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {, FastMathCalc, .]
[/, (, EXP_FRAC_TABLE_LEN, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {, FastMathCalc, .]
[), ;, for, (, int, i, =, 0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {, FastMathCalc]
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {, FastMathCalc]
[;, i, <, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {, FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp]
[;, i, ++, ), {, FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ]]
[<, EXP_FRAC_TABLE_A, ., length, ;, i, ++, ), {, FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp, ), ;]
[;, i, ++, ), {, FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ]]
[., length, ;, i, ++, ), {, FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, []
[), {, FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, []
[++, ), {, FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp]
[;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, [, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =, tmp, [, 1, ]]
[., slowexp, (, i, *, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, [, 0, ], ;]
[,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, [, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =, tmp]
[*, factor, ,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, [, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ]]
[,, tmp, ), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, [, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =, tmp]
[), ;, EXP_FRAC_TABLE_A, [, i, ], =, tmp, [, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =, tmp, [, 1]
[=, tmp, [, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =, tmp, [, 1, ], ;, }, }, else, {]
[[, i, ], =, tmp, [, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =, tmp, [, 1, ], ;, }]
[], =, tmp, [, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =, tmp, [, 1, ], ;, }, }, else]
[;, EXP_FRAC_TABLE_B, [, i, ], =, tmp, [, 1, ], ;, }, }, else, {, EXP_FRAC_TABLE_A, =, FastMathLiteralArrays, ., loadExpFracA]
[[, 0, ], ;, EXP_FRAC_TABLE_B, [, i, ], =, tmp, [, 1, ], ;, }, }, else, {, EXP_FRAC_TABLE_A, =]
[], ;, EXP_FRAC_TABLE_B, [, i, ], =, tmp, [, 1, ], ;, }, }, else, {, EXP_FRAC_TABLE_A, =, FastMathLiteralArrays, .]
[=, tmp, [, 1, ], ;, }, }, else, {, EXP_FRAC_TABLE_A, =, FastMathLiteralArrays, ., loadExpFracA, (, ), ;, EXP_FRAC_TABLE_B, =]
[[, i, ], =, tmp, [, 1, ], ;, }, }, else, {, EXP_FRAC_TABLE_A, =, FastMathLiteralArrays, ., loadExpFracA, (, )]
[], =, tmp, [, 1, ], ;, }, }, else, {, EXP_FRAC_TABLE_A, =, FastMathLiteralArrays, ., loadExpFracA, (, ), ;, EXP_FRAC_TABLE_B]
[;, }, }, else, {, EXP_FRAC_TABLE_A, =, FastMathLiteralArrays, ., loadExpFracA, (, ), ;, EXP_FRAC_TABLE_B, =, FastMathLiteralArrays, ., loadExpFracB, (, )]
[[, 1, ], ;, }, }, else, {, EXP_FRAC_TABLE_A, =, FastMathLiteralArrays, ., loadExpFracA, (, ), ;, EXP_FRAC_TABLE_B, =, FastMathLiteralArrays, .]
[], ;, }, }, else, {, EXP_FRAC_TABLE_A, =, FastMathLiteralArrays, ., loadExpFracA, (, ), ;, EXP_FRAC_TABLE_B, =, FastMathLiteralArrays, ., loadExpFracB, (]
[=, FastMathLiteralArrays, ., loadExpFracA, (, ), ;, EXP_FRAC_TABLE_B, =, FastMathLiteralArrays, ., loadExpFracB, (, ), ;, }, }, }, private, static]
[;, EXP_FRAC_TABLE_B, =, FastMathLiteralArrays, ., loadExpFracB, (, ), ;, }, }, }, private, static, class, lnMant, {, private, static, final]
[., loadExpFracA, (, ), ;, EXP_FRAC_TABLE_B, =, FastMathLiteralArrays, ., loadExpFracB, (, ), ;, }, }, }, private, static, class, lnMant]
[=, FastMathLiteralArrays, ., loadExpFracB, (, ), ;, }, }, }, private, static, class, lnMant, {, private, static, final, double, []
[;, }, }, }, private, static, class, lnMant, {, private, static, final, double, [, ], [, ], LN_MANT, ;, static]
[., loadExpFracB, (, ), ;, }, }, }, private, static, class, lnMant, {, private, static, final, double, [, ], []
[), {, LN_MANT, =, new, double, [, FastMath, ., LN_MANT_LEN, ], [, ], ;, for, (, int, i, =, 0]
[=, new, double, [, FastMath, ., LN_MANT_LEN, ], [, ], ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, LN_MANT, ., length, ;, i, ++, ), {, final, double]
[], [, ], ;, for, (, int, i, =, 0, ;, i, <, LN_MANT, ., length, ;, i, ++, )]
[., LN_MANT_LEN, ], [, ], ;, for, (, int, i, =, 0, ;, i, <, LN_MANT, ., length, ;, i]
[;, i, <, LN_MANT, ., length, ;, i, ++, ), {, final, double, d, =, Double, ., longBitsToDouble, (, (]
[;, i, ++, ), {, final, double, d, =, Double, ., longBitsToDouble, (, (, (, (, long, ), i, )]
[<, LN_MANT, ., length, ;, i, ++, ), {, final, double, d, =, Double, ., longBitsToDouble, (, (, (, (]
[;, i, ++, ), {, final, double, d, =, Double, ., longBitsToDouble, (, (, (, (, long, ), i, )]
[., length, ;, i, ++, ), {, final, double, d, =, Double, ., longBitsToDouble, (, (, (, (, long, )]
[), {, final, double, d, =, Double, ., longBitsToDouble, (, (, (, (, long, ), i, ), <<, 42, )]
[++, ), {, final, double, d, =, Double, ., longBitsToDouble, (, (, (, (, long, ), i, ), <<, 42]
[;, LN_MANT, [, i, ], =, FastMathCalc, ., slowLog, (, d, ), ;, }, }, else, {, LN_MANT, =, FastMathLiteralArrays]
[., longBitsToDouble, (, (, (, (, long, ), i, ), <<, 42, ), |, 0x3ff0000000000000L, ), ;, LN_MANT, [, i]
[), ;, LN_MANT, [, i, ], =, FastMathCalc, ., slowLog, (, d, ), ;, }, }, else, {, LN_MANT, =]
[|, 0x3ff0000000000000L, ), ;, LN_MANT, [, i, ], =, FastMathCalc, ., slowLog, (, d, ), ;, }, }, else, {]
[), |, 0x3ff0000000000000L, ), ;, LN_MANT, [, i, ], =, FastMathCalc, ., slowLog, (, d, ), ;, }, }, else]
[<<, 42, ), |, 0x3ff0000000000000L, ), ;, LN_MANT, [, i, ], =, FastMathCalc, ., slowLog, (, d, ), ;, }]
[), <<, 42, ), |, 0x3ff0000000000000L, ), ;, LN_MANT, [, i, ], =, FastMathCalc, ., slowLog, (, d, ), ;]
[), <<, 42, ), |, 0x3ff0000000000000L, ), ;, LN_MANT, [, i, ], =, FastMathCalc, ., slowLog, (, d, ), ;]
[), |, 0x3ff0000000000000L, ), ;, LN_MANT, [, i, ], =, FastMathCalc, ., slowLog, (, d, ), ;, }, }, else]
[), ;, LN_MANT, [, i, ], =, FastMathCalc, ., slowLog, (, d, ), ;, }, }, else, {, LN_MANT, =]
[=, FastMathCalc, ., slowLog, (, d, ), ;, }, }, else, {, LN_MANT, =, FastMathLiteralArrays, ., loadLnMant, (, ), ;]
[[, i, ], =, FastMathCalc, ., slowLog, (, d, ), ;, }, }, else, {, LN_MANT, =, FastMathLiteralArrays, ., loadLnMant]
[], =, FastMathCalc, ., slowLog, (, d, ), ;, }, }, else, {, LN_MANT, =, FastMathLiteralArrays, ., loadLnMant, (, )]
[;, }, }, else, {, LN_MANT, =, FastMathLiteralArrays, ., loadLnMant, (, ), ;, }, }, }, private, static, class, CodyWaite]
[., slowLog, (, d, ), ;, }, }, else, {, LN_MANT, =, FastMathLiteralArrays, ., loadLnMant, (, ), ;, }, }]
[), ;, }, }, else, {, LN_MANT, =, FastMathLiteralArrays, ., loadLnMant, (, ), ;, }, }, }, private, static, class]
[=, FastMathLiteralArrays, ., loadLnMant, (, ), ;, }, }, }, private, static, class, CodyWaite, {, private, final, int, finalK, ;]
[;, }, }, }, private, static, class, CodyWaite, {, private, final, int, finalK, ;, private, final, double, finalRemA, ;, private]
[., loadLnMant, (, ), ;, }, }, }, private, static, class, CodyWaite, {, private, final, int, finalK, ;, private, final]
[;, double, remA, ;, double, remB, ;, while, (, true, ), {, double, a, =, -, k, *, 1.570796251296997, ;]
[;, double, remA, ;, double, remB, ;, while, (, true, ), {, double, a, =, -, k, *, 1.570796251296997, ;]
[), ;, double, remA, ;, double, remB, ;, while, (, true, ), {, double, a, =, -, k, *, 1.570796251296997]
[*, 0.6366197723675814, ), ;, double, remA, ;, double, remB, ;, while, (, true, ), {, double, a, =, -, k]
[), ;, double, remA, ;, double, remB, ;, while, (, true, ), {, double, a, =, -, k, *, 1.570796251296997]
[), {, double, a, =, -, k, *, 1.570796251296997, ;, remA, =, xa, +, a, ;, remB, =, -, (]
[;, remA, =, xa, +, a, ;, remB, =, -, (, remA, -, xa, -, a, ), ;, a, =]
[*, 1.570796251296997, ;, remA, =, xa, +, a, ;, remB, =, -, (, remA, -, xa, -, a, ), ;]
[*, 1.570796251296997, ;, remA, =, xa, +, a, ;, remB, =, -, (, remA, -, xa, -, a, ), ;]
[;, remA, =, xa, +, a, ;, remB, =, -, (, remA, -, xa, -, a, ), ;, a, =]
[=, xa, +, a, ;, remB, =, -, (, remA, -, xa, -, a, ), ;, a, =, -, k]
[;, remB, =, -, (, remA, -, xa, -, a, ), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double]
[+, a, ;, remB, =, -, (, remA, -, xa, -, a, ), ;, a, =, -, k, *, 7.549789948768648E-8]
[;, remB, =, -, (, remA, -, xa, -, a, ), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double]
[=, -, (, remA, -, xa, -, a, ), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =]
[;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB]
[;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB]
[), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;]
[-, a, ), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +]
[-, xa, -, a, ), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =]
[-, a, ), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +]
[), ;, a, =, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;]
[=, -, k, *, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -]
[;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -]
[*, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -]
[*, 7.549789948768648E-8, ;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -]
[;, double, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -]
[;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, a, =]
[=, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, a, =, -, k]
[;, remB, +=, -, (, remA, -, b, -, a, ), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b]
[+, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, a, =, -, k, *, 6.123233995736766E-17]
[;, remB, +=, -, (, remA, -, b, -, a, ), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b]
[+=, -, (, remA, -, b, -, a, ), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA]
[;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=]
[;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=]
[), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB]
[-, a, ), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b]
[-, b, -, a, ), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a]
[-, a, ), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b]
[), ;, a, =, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB]
[=, -, k, *, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (]
[;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a]
[*, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b]
[*, 6.123233995736766E-17, ;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b]
[;, b, =, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a]
[=, remA, ;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;]
[;, remA, =, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, if, (]
[=, a, +, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, if, (, remA, >]
[;, remB, +=, -, (, remA, -, b, -, a, ), ;, if, (, remA, >, 0, ), {, break]
[+, b, ;, remB, +=, -, (, remA, -, b, -, a, ), ;, if, (, remA, >, 0, )]
[;, remB, +=, -, (, remA, -, b, -, a, ), ;, if, (, remA, >, 0, ), {, break]
[+=, -, (, remA, -, b, -, a, ), ;, if, (, remA, >, 0, ), {, break, ;, }]
[;, if, (, remA, >, 0, ), {, break, ;, }, --, k, ;, }, this, ., finalK, =, k]
[;, if, (, remA, >, 0, ), {, break, ;, }, --, k, ;, }, this, ., finalK, =, k]
[), ;, if, (, remA, >, 0, ), {, break, ;, }, --, k, ;, }, this, ., finalK, =]
[-, a, ), ;, if, (, remA, >, 0, ), {, break, ;, }, --, k, ;, }, this, .]
[-, b, -, a, ), ;, if, (, remA, >, 0, ), {, break, ;, }, --, k, ;, }]
[-, a, ), ;, if, (, remA, >, 0, ), {, break, ;, }, --, k, ;, }, this, .]
[), ;, if, (, remA, >, 0, ), {, break, ;, }, --, k, ;, }, this, ., finalK, =]
[), {, break, ;, }, --, k, ;, }, this, ., finalK, =, k, ;, this, ., finalRemA, =, remA]
[>, 0, ), {, break, ;, }, --, k, ;, }, this, ., finalK, =, k, ;, this, ., finalRemA]
[), {, break, ;, }, --, k, ;, }, this, ., finalK, =, k, ;, this, ., finalRemA, =, remA]
[;, }, this, ., finalK, =, k, ;, this, ., finalRemA, =, remA, ;, this, ., finalRemB, =, remB, ;]
[;, }, this, ., finalK, =, k, ;, this, ., finalRemA, =, remA, ;, this, ., finalRemB, =, remB, ;]
[=, k, ;, this, ., finalRemA, =, remA, ;, this, ., finalRemB, =, remB, ;, }, int, getK, (, )]
[., finalK, =, k, ;, this, ., finalRemA, =, remA, ;, this, ., finalRemB, =, remB, ;, }, int, getK]
[;, this, ., finalRemA, =, remA, ;, this, ., finalRemB, =, remB, ;, }, int, getK, (, ), {, return]
[=, remA, ;, this, ., finalRemB, =, remB, ;, }, int, getK, (, ), {, return, finalK, ;, }, double]
[., finalRemA, =, remA, ;, this, ., finalRemB, =, remB, ;, }, int, getK, (, ), {, return, finalK, ;]
[;, this, ., finalRemB, =, remB, ;, }, int, getK, (, ), {, return, finalK, ;, }, double, getRemA, (]
[=, remB, ;, }, int, getK, (, ), {, return, finalK, ;, }, double, getRemA, (, ), {, return, finalRemA]
[., finalRemB, =, remB, ;, }, int, getK, (, ), {, return, finalK, ;, }, double, getRemA, (, ), {]
[;, }, int, getK, (, ), {, return, finalK, ;, }, double, getRemA, (, ), {, return, finalRemA, ;, }]
[;, }, double, getRemA, (, ), {, return, finalRemA, ;, }, double, getRemB, (, ), {, return, finalRemB, ;, }]
[;, }, double, getRemB, (, ), {, return, finalRemB, ;, }, }, }]
[;, }, }, }]
