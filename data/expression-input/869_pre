[org, ., apache, ., commons, ., math3, ., dfp, ;, public, class, DfpMath, {, private, static, final, String, POW_TRAP, =]
[static, Dfp, [, ], split, (, final, DfpField, field, ,, final, String, a, ), {, Dfp, result, [, ], =]
[], split, (, final, DfpField, field, ,, final, String, a, ), {, Dfp, result, [, ], =, new, Dfp, []
[{, Dfp, result, [, ], =, new, Dfp, [, 2, ], ;, char, [, ], buf, ;, boolean, leading, =]
[=, new, Dfp, [, 2, ], ;, char, [, ], buf, ;, boolean, leading, =, true, ;, int, sp, =]
[], ;, char, [, ], buf, ;, boolean, leading, =, true, ;, int, sp, =, 0, ;, int, sig, =]
[char, [, ], buf, ;, boolean, leading, =, true, ;, int, sp, =, 0, ;, int, sig, =, 0, ;]
[], buf, ;, boolean, leading, =, true, ;, int, sp, =, 0, ;, int, sig, =, 0, ;, buf, =]
[boolean, leading, =, true, ;, int, sp, =, 0, ;, int, sig, =, 0, ;, buf, =, new, char, []
[boolean, leading, =, true, ;, int, sp, =, 0, ;, int, sig, =, 0, ;, buf, =, new, char, []
[=, 0, ;, buf, =, new, char, [, a, ., length, (, ), ], ;, for, (, int, i, =]
[;, buf, =, new, char, [, a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;]
[;, buf, =, new, char, [, a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;]
[=, new, char, [, a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, char, [, a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;]
[a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;]
[), ], ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {]
[), ], ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, []
[int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =]
[int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =]
[;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, []
[{, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&]
[], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&, buf, []
[., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i, ], <=]
[i, ), ;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {]
[;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =]
[i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (]
[i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (]
[i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (]
[>=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, []
[buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==]
[], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {]
['9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=]
['9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=]
[), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (]
[), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (]
[leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (, 400, -]
[;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (, 400, -, sig, ), %]
[if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;]
[buf, [, i, ], ==, '.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =]
['.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (]
['.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (]
[{, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==]
[{, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==]
[sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (]
[sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (]
[sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (]
[), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (, field, ., getRadixDigits, (, ), /]
[;, leading, =, false, ;, }, if, (, sig, ==, (, field, ., getRadixDigits, (, ), /, 2, ), *]
[false, ;, }, if, (, sig, ==, (, field, ., getRadixDigits, (, ), /, 2, ), *, 4, ), {]
[}, if, (, sig, ==, (, field, ., getRadixDigits, (, ), /, 2, ), *, 4, ), {, sp, =]
[., getRadixDigits, (, ), /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (]
[., getRadixDigits, (, ), /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (]
[., getRadixDigits, (, ), /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (]
[., getRadixDigits, (, ), /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (]
[., getRadixDigits, (, ), /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (]
[(, ), /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, []
[2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=]
[*, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&]
[*, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&]
[*, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&]
[), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, []
[=, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=]
[;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&]
[break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, !]
[if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {]
[if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {]
[], >=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }]
[], >=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }]
['0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, []
[[, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =]
[[, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =]
['9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, field, ., newDfp, (]
[leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, field, ., newDfp, (, new, String, (]
[{, sig, ++, ;, }, }, result, [, 0, ], =, field, ., newDfp, (, new, String, (, buf, ,]
[++, ;, }, }, result, [, 0, ], =, field, ., newDfp, (, new, String, (, buf, ,, 0, ,]
[field, ., newDfp, (, new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int, i, =]
[newDfp, (, new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;]
[newDfp, (, new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;]
[new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;]
[,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;]
[), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {]
[), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, []
[int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =]
[int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =]
[;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (]
[i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, []
[{, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&]
[], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, []
[., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=]
[(, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&]
[(, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&]
[), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <]
[(, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {]
[(, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {]
[[, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, []
[>=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =]
[[, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }]
[[, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }]
[], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, []
[&&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =]
[&&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =]
[), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =, field, ., newDfp, (]
[[, i, ], =, '0', ;, }, }, result, [, 1, ], =, field, ., newDfp, (, new, String, (]
[;, }, }, result, [, 1, ], =, field, ., newDfp, (, new, String, (, buf, ), ), ;, return]
[;, }, protected, static, Dfp, [, ], split, (, final, Dfp, a, ), {, final, Dfp, [, ], result, =]
[static, Dfp, [, ], split, (, final, Dfp, a, ), {, final, Dfp, [, ], result, =, new, Dfp, []
[Dfp, a, ), {, final, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, final, Dfp, shift, =]
[Dfp, a, ), {, final, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, final, Dfp, shift, =]
[final, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, final, Dfp, shift, =, a, ., multiply, (]
[final, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, final, Dfp, shift, =, a, ., multiply, (]
[result, =, new, Dfp, [, 2, ], ;, final, Dfp, shift, =, a, ., multiply, (, a, ., power10K, (]
[result, =, new, Dfp, [, 2, ], ;, final, Dfp, shift, =, a, ., multiply, (, a, ., power10K, (]
[result, =, new, Dfp, [, 2, ], ;, final, Dfp, shift, =, a, ., multiply, (, a, ., power10K, (]
[], ;, final, Dfp, shift, =, a, ., multiply, (, a, ., power10K, (, a, ., getRadixDigits, (, ), /]
[shift, =, a, ., multiply, (, a, ., power10K, (, a, ., getRadixDigits, (, ), /, 2, ), ), ;]
[shift, =, a, ., multiply, (, a, ., power10K, (, a, ., getRadixDigits, (, ), /, 2, ), ), ;]
[a, ., multiply, (, a, ., power10K, (, a, ., getRadixDigits, (, ), /, 2, ), ), ;, result, []
[(, a, ., power10K, (, a, ., getRadixDigits, (, ), /, 2, ), ), ;, result, [, 0, ], =]
[(, a, ., power10K, (, a, ., getRadixDigits, (, ), /, 2, ), ), ;, result, [, 0, ], =]
[(, a, ., power10K, (, a, ., getRadixDigits, (, ), /, 2, ), ), ;, result, [, 0, ], =]
[(, a, ., getRadixDigits, (, ), /, 2, ), ), ;, result, [, 0, ], =, a, ., add, (]
[), /, 2, ), ), ;, result, [, 0, ], =, a, ., add, (, shift, ), ., subtract, (]
[), ), ;, result, [, 0, ], =, a, ., add, (, shift, ), ., subtract, (, shift, ), ;]
[), ), ;, result, [, 0, ], =, a, ., add, (, shift, ), ., subtract, (, shift, ), ;]
[;, result, [, 0, ], =, a, ., add, (, shift, ), ., subtract, (, shift, ), ;, result, []
[0, ], =, a, ., add, (, shift, ), ., subtract, (, shift, ), ;, result, [, 1, ], =]
[0, ], =, a, ., add, (, shift, ), ., subtract, (, shift, ), ;, result, [, 1, ], =]
[., add, (, shift, ), ., subtract, (, shift, ), ;, result, [, 1, ], =, a, ., subtract, (]
[., add, (, shift, ), ., subtract, (, shift, ), ;, result, [, 1, ], =, a, ., subtract, (]
[(, shift, ), ., subtract, (, shift, ), ;, result, [, 1, ], =, a, ., subtract, (, result, []
[(, shift, ), ;, result, [, 1, ], =, a, ., subtract, (, result, [, 0, ], ), ;, return]
[(, final, Dfp, [, ], a, ,, final, Dfp, [, ], b, ), {, final, Dfp, [, ], result, =]
[[, ], a, ,, final, Dfp, [, ], b, ), {, final, Dfp, [, ], result, =, new, Dfp, []
[,, final, Dfp, [, ], b, ), {, final, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;]
[,, final, Dfp, [, ], b, ), {, final, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;]
[Dfp, [, ], b, ), {, final, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, result, []
[b, ), {, final, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, result, [, 1, ], =]
[b, ), {, final, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, result, [, 1, ], =]
[b, ), {, final, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, result, [, 1, ], =]
[{, final, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, result, [, 1, ], =, a, []
[new, Dfp, [, 2, ], ;, result, [, 1, ], =, a, [, 0, ], ., getZero, (, ), ;]
[new, Dfp, [, 2, ], ;, result, [, 1, ], =, a, [, 0, ], ., getZero, (, ), ;]
[[, 2, ], ;, result, [, 1, ], =, a, [, 0, ], ., getZero, (, ), ;, result, []
[;, result, [, 1, ], =, a, [, 0, ], ., getZero, (, ), ;, result, [, 0, ], =]
[;, result, [, 1, ], =, a, [, 0, ], ., getZero, (, ), ;, result, [, 0, ], =]
[;, result, [, 1, ], =, a, [, 0, ], ., getZero, (, ), ;, result, [, 0, ], =]
[[, 1, ], =, a, [, 0, ], ., getZero, (, ), ;, result, [, 0, ], =, a, []
[[, 0, ], ., getZero, (, ), ;, result, [, 0, ], =, a, [, 0, ], ., multiply, (]
[[, 0, ], ., getZero, (, ), ;, result, [, 0, ], =, a, [, 0, ], ., multiply, (]
[], ., getZero, (, ), ;, result, [, 0, ], =, a, [, 0, ], ., multiply, (, b, []
[result, [, 0, ], =, a, [, 0, ], ., multiply, (, b, [, 0, ], ), ;, if, (]
[result, [, 0, ], =, a, [, 0, ], ., multiply, (, b, [, 0, ], ), ;, if, (]
[result, [, 0, ], =, a, [, 0, ], ., multiply, (, b, [, 0, ], ), ;, if, (]
[result, [, 0, ], =, a, [, 0, ], ., multiply, (, b, [, 0, ], ), ;, if, (]
[result, [, 0, ], =, a, [, 0, ], ., multiply, (, b, [, 0, ], ), ;, if, (]
[0, ], =, a, [, 0, ], ., multiply, (, b, [, 0, ], ), ;, if, (, result, []
[., multiply, (, b, [, 0, ], ), ;, if, (, result, [, 0, ], ., classify, (, ), ==]
[., multiply, (, b, [, 0, ], ), ;, if, (, result, [, 0, ], ., classify, (, ), ==]
[[, 0, ], ), ;, if, (, result, [, 0, ], ., classify, (, ), ==, Dfp, ., INFINITE, ||]
[[, 0, ], ), ;, if, (, result, [, 0, ], ., classify, (, ), ==, Dfp, ., INFINITE, ||]
[[, 0, ], ), ;, if, (, result, [, 0, ], ., classify, (, ), ==, Dfp, ., INFINITE, ||]
[], ), ;, if, (, result, [, 0, ], ., classify, (, ), ==, Dfp, ., INFINITE, ||, result, []
[result, [, 0, ], ., classify, (, ), ==, Dfp, ., INFINITE, ||, result, [, 0, ], ., equals, (]
[result, [, 0, ], ., classify, (, ), ==, Dfp, ., INFINITE, ||, result, [, 0, ], ., equals, (]
[0, ], ., classify, (, ), ==, Dfp, ., INFINITE, ||, result, [, 0, ], ., equals, (, result, []
[==, Dfp, ., INFINITE, ||, result, [, 0, ], ., equals, (, result, [, 1, ], ), ), {, return]
[INFINITE, ||, result, [, 0, ], ., equals, (, result, [, 1, ], ), ), {, return, result, ;, }]
[INFINITE, ||, result, [, 0, ], ., equals, (, result, [, 1, ], ), ), {, return, result, ;, }]
[result, [, 0, ], ., equals, (, result, [, 1, ], ), ), {, return, result, ;, }, result, []
[], ., equals, (, result, [, 1, ], ), ), {, return, result, ;, }, result, [, 1, ], =]
[], ., equals, (, result, [, 1, ], ), ), {, return, result, ;, }, result, [, 1, ], =]
[], ., equals, (, result, [, 1, ], ), ), {, return, result, ;, }, result, [, 1, ], =]
[], ., equals, (, result, [, 1, ], ), ), {, return, result, ;, }, result, [, 1, ], =]
[], ., equals, (, result, [, 1, ], ), ), {, return, result, ;, }, result, [, 1, ], =]
[equals, (, result, [, 1, ], ), ), {, return, result, ;, }, result, [, 1, ], =, a, []
[], ), ), {, return, result, ;, }, result, [, 1, ], =, a, [, 0, ], ., multiply, (]
[], ), ), {, return, result, ;, }, result, [, 1, ], =, a, [, 0, ], ., multiply, (]
[), {, return, result, ;, }, result, [, 1, ], =, a, [, 0, ], ., multiply, (, b, []
[result, [, 1, ], =, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ., add, (]
[result, [, 1, ], =, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ., add, (]
[result, [, 1, ], =, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ., add, (]
[1, ], =, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ., add, (, a, []
[0, ], ., multiply, (, b, [, 1, ], ), ., add, (, a, [, 1, ], ., multiply, (]
[0, ], ., multiply, (, b, [, 1, ], ), ., add, (, a, [, 1, ], ., multiply, (]
[., multiply, (, b, [, 1, ], ), ., add, (, a, [, 1, ], ., multiply, (, b, []
[), ., add, (, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ), ., add, (]
[), ., add, (, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ), ., add, (]
[), ., add, (, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ), ., add, (]
[add, (, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ), ., add, (, a, []
[], ., multiply, (, b, [, 0, ], ), ), ., add, (, a, [, 1, ], ., multiply, (]
[], ., multiply, (, b, [, 0, ], ), ), ., add, (, a, [, 1, ], ., multiply, (]
[multiply, (, b, [, 0, ], ), ), ., add, (, a, [, 1, ], ., multiply, (, b, []
[), ), ., add, (, a, [, 1, ], ., multiply, (, b, [, 1, ], ), ), ;, return]
[(, final, Dfp, [, ], a, ,, final, Dfp, [, ], b, ), {, final, Dfp, [, ], result, ;]
[Dfp, [, ], a, ,, final, Dfp, [, ], b, ), {, final, Dfp, [, ], result, ;, result, =]
[a, ,, final, Dfp, [, ], b, ), {, final, Dfp, [, ], result, ;, result, =, new, Dfp, []
[Dfp, [, ], b, ), {, final, Dfp, [, ], result, ;, result, =, new, Dfp, [, 2, ], ;]
[Dfp, [, ], b, ), {, final, Dfp, [, ], result, ;, result, =, new, Dfp, [, 2, ], ;]
[], b, ), {, final, Dfp, [, ], result, ;, result, =, new, Dfp, [, 2, ], ;, result, []
[{, final, Dfp, [, ], result, ;, result, =, new, Dfp, [, 2, ], ;, result, [, 0, ], =]
[{, final, Dfp, [, ], result, ;, result, =, new, Dfp, [, 2, ], ;, result, [, 0, ], =]
[{, final, Dfp, [, ], result, ;, result, =, new, Dfp, [, 2, ], ;, result, [, 0, ], =]
[Dfp, [, ], result, ;, result, =, new, Dfp, [, 2, ], ;, result, [, 0, ], =, a, []
[result, =, new, Dfp, [, 2, ], ;, result, [, 0, ], =, a, [, 0, ], ., divide, (]
[result, =, new, Dfp, [, 2, ], ;, result, [, 0, ], =, a, [, 0, ], ., divide, (]
[new, Dfp, [, 2, ], ;, result, [, 0, ], =, a, [, 0, ], ., divide, (, b, []
[], ;, result, [, 0, ], =, a, [, 0, ], ., divide, (, b, [, 0, ], ), ;]
[], ;, result, [, 0, ], =, a, [, 0, ], ., divide, (, b, [, 0, ], ), ;]
[result, [, 0, ], =, a, [, 0, ], ., divide, (, b, [, 0, ], ), ;, result, []
[], =, a, [, 0, ], ., divide, (, b, [, 0, ], ), ;, result, [, 1, ], =]
[], =, a, [, 0, ], ., divide, (, b, [, 0, ], ), ;, result, [, 1, ], =]
[], =, a, [, 0, ], ., divide, (, b, [, 0, ], ), ;, result, [, 1, ], =]
[], =, a, [, 0, ], ., divide, (, b, [, 0, ], ), ;, result, [, 1, ], =]
[a, [, 0, ], ., divide, (, b, [, 0, ], ), ;, result, [, 1, ], =, a, []
[divide, (, b, [, 0, ], ), ;, result, [, 1, ], =, a, [, 1, ], ., multiply, (]
[divide, (, b, [, 0, ], ), ;, result, [, 1, ], =, a, [, 1, ], ., multiply, (]
[b, [, 0, ], ), ;, result, [, 1, ], =, a, [, 1, ], ., multiply, (, b, []
[result, [, 1, ], =, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ., subtract, (]
[result, [, 1, ], =, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ., subtract, (]
[result, [, 1, ], =, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ., subtract, (]
[1, ], =, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ., subtract, (, a, []
[1, ], ., multiply, (, b, [, 0, ], ), ., subtract, (, a, [, 0, ], ., multiply, (]
[1, ], ., multiply, (, b, [, 0, ], ), ., subtract, (, a, [, 0, ], ., multiply, (]
[., multiply, (, b, [, 0, ], ), ., subtract, (, a, [, 0, ], ., multiply, (, b, []
[0, ], ), ., subtract, (, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ), ;]
[0, ], ), ., subtract, (, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ), ;]
[), ., subtract, (, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ), ;, result, []
[(, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ), ;, result, [, 1, ], =]
[(, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ), ;, result, [, 1, ], =]
[(, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ), ;, result, [, 1, ], =]
[[, 0, ], ., multiply, (, b, [, 1, ], ), ), ;, result, [, 1, ], =, result, []
[(, b, [, 1, ], ), ), ;, result, [, 1, ], =, result, [, 1, ], ., divide, (]
[(, b, [, 1, ], ), ), ;, result, [, 1, ], =, result, [, 1, ], ., divide, (]
[(, b, [, 1, ], ), ), ;, result, [, 1, ], =, result, [, 1, ], ., divide, (]
[(, b, [, 1, ], ), ), ;, result, [, 1, ], =, result, [, 1, ], ., divide, (]
[[, 1, ], ), ), ;, result, [, 1, ], =, result, [, 1, ], ., divide, (, b, []
[;, result, [, 1, ], =, result, [, 1, ], ., divide, (, b, [, 0, ], ., multiply, (]
[;, result, [, 1, ], =, result, [, 1, ], ., divide, (, b, [, 0, ], ., multiply, (]
[[, 1, ], =, result, [, 1, ], ., divide, (, b, [, 0, ], ., multiply, (, b, []
[1, ], ., divide, (, b, [, 0, ], ., multiply, (, b, [, 0, ], ), ., add, (]
[1, ], ., divide, (, b, [, 0, ], ., multiply, (, b, [, 0, ], ), ., add, (]
[1, ], ., divide, (, b, [, 0, ], ., multiply, (, b, [, 0, ], ), ., add, (]
[., divide, (, b, [, 0, ], ., multiply, (, b, [, 0, ], ), ., add, (, b, []
[0, ], ., multiply, (, b, [, 0, ], ), ., add, (, b, [, 0, ], ., multiply, (]
[0, ], ., multiply, (, b, [, 0, ], ), ., add, (, b, [, 0, ], ., multiply, (]
[., multiply, (, b, [, 0, ], ), ., add, (, b, [, 0, ], ., multiply, (, b, []
[), ., add, (, b, [, 0, ], ., multiply, (, b, [, 1, ], ), ), ), ;, return]
[;, }, protected, static, Dfp, splitPow, (, final, Dfp, [, ], base, ,, int, a, ), {, boolean, invert, =]
[final, Dfp, [, ], base, ,, int, a, ), {, boolean, invert, =, false, ;, Dfp, [, ], r, =]
[], base, ,, int, a, ), {, boolean, invert, =, false, ;, Dfp, [, ], r, =, new, Dfp, []
[invert, =, false, ;, Dfp, [, ], r, =, new, Dfp, [, 2, ], ;, Dfp, [, ], result, =]
[;, Dfp, [, ], r, =, new, Dfp, [, 2, ], ;, Dfp, [, ], result, =, new, Dfp, []
[], r, =, new, Dfp, [, 2, ], ;, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;]
[], r, =, new, Dfp, [, 2, ], ;, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;]
[=, new, Dfp, [, 2, ], ;, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, result, []
[[, 2, ], ;, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, result, [, 0, ], =]
[[, 2, ], ;, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, result, [, 0, ], =]
[[, 2, ], ;, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, result, [, 0, ], =]
[], ;, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, result, [, 0, ], =, base, []
[new, Dfp, [, 2, ], ;, result, [, 0, ], =, base, [, 0, ], ., getOne, (, ), ;]
[new, Dfp, [, 2, ], ;, result, [, 0, ], =, base, [, 0, ], ., getOne, (, ), ;]
[[, 2, ], ;, result, [, 0, ], =, base, [, 0, ], ., getOne, (, ), ;, result, []
[;, result, [, 0, ], =, base, [, 0, ], ., getOne, (, ), ;, result, [, 1, ], =]
[;, result, [, 0, ], =, base, [, 0, ], ., getOne, (, ), ;, result, [, 1, ], =]
[;, result, [, 0, ], =, base, [, 0, ], ., getOne, (, ), ;, result, [, 1, ], =]
[[, 0, ], =, base, [, 0, ], ., getOne, (, ), ;, result, [, 1, ], =, base, []
[getOne, (, ), ;, result, [, 1, ], =, base, [, 0, ], ., getZero, (, ), ;, if, (]
[getOne, (, ), ;, result, [, 1, ], =, base, [, 0, ], ., getZero, (, ), ;, if, (]
[), ;, result, [, 1, ], =, base, [, 0, ], ., getZero, (, ), ;, if, (, a, ==]
[1, ], =, base, [, 0, ], ., getZero, (, ), ;, if, (, a, ==, 0, ), {, return]
[1, ], =, base, [, 0, ], ., getZero, (, ), ;, if, (, a, ==, 0, ), {, return]
[1, ], =, base, [, 0, ], ., getZero, (, ), ;, if, (, a, ==, 0, ), {, return]
[=, base, [, 0, ], ., getZero, (, ), ;, if, (, a, ==, 0, ), {, return, result, []
[., getZero, (, ), ;, if, (, a, ==, 0, ), {, return, result, [, 0, ], ., add, (]
[., getZero, (, ), ;, if, (, a, ==, 0, ), {, return, result, [, 0, ], ., add, (]
[(, ), ;, if, (, a, ==, 0, ), {, return, result, [, 0, ], ., add, (, result, []
[0, ), {, return, result, [, 0, ], ., add, (, result, [, 1, ], ), ;, }, if, (]
[0, ), {, return, result, [, 0, ], ., add, (, result, [, 1, ], ), ;, }, if, (]
[{, return, result, [, 0, ], ., add, (, result, [, 1, ], ), ;, }, if, (, a, <]
[[, 0, ], ., add, (, result, [, 1, ], ), ;, }, if, (, a, <, 0, ), {]
[], ., add, (, result, [, 1, ], ), ;, }, if, (, a, <, 0, ), {, invert, =]
[add, (, result, [, 1, ], ), ;, }, if, (, a, <, 0, ), {, invert, =, true, ;]
[result, [, 1, ], ), ;, }, if, (, a, <, 0, ), {, invert, =, true, ;, a, =]
[[, 1, ], ), ;, }, if, (, a, <, 0, ), {, invert, =, true, ;, a, =, -]
[}, if, (, a, <, 0, ), {, invert, =, true, ;, a, =, -, a, ;, }, do, {]
[}, if, (, a, <, 0, ), {, invert, =, true, ;, a, =, -, a, ;, }, do, {]
[(, a, <, 0, ), {, invert, =, true, ;, a, =, -, a, ;, }, do, {, r, []
[0, ), {, invert, =, true, ;, a, =, -, a, ;, }, do, {, r, [, 0, ], =]
[invert, =, true, ;, a, =, -, a, ;, }, do, {, r, [, 0, ], =, new, Dfp, (]
[invert, =, true, ;, a, =, -, a, ;, }, do, {, r, [, 0, ], =, new, Dfp, (]
[true, ;, a, =, -, a, ;, }, do, {, r, [, 0, ], =, new, Dfp, (, base, []
[-, a, ;, }, do, {, r, [, 0, ], =, new, Dfp, (, base, [, 0, ], ), ;]
[-, a, ;, }, do, {, r, [, 0, ], =, new, Dfp, (, base, [, 0, ], ), ;]
[;, }, do, {, r, [, 0, ], =, new, Dfp, (, base, [, 0, ], ), ;, r, []
[{, r, [, 0, ], =, new, Dfp, (, base, [, 0, ], ), ;, r, [, 1, ], =]
[0, ], =, new, Dfp, (, base, [, 0, ], ), ;, r, [, 1, ], =, new, Dfp, (]
[0, ], =, new, Dfp, (, base, [, 0, ], ), ;, r, [, 1, ], =, new, Dfp, (]
[=, new, Dfp, (, base, [, 0, ], ), ;, r, [, 1, ], =, new, Dfp, (, base, []
[], ), ;, r, [, 1, ], =, new, Dfp, (, base, [, 1, ], ), ;, int, trial, =]
[=, new, Dfp, (, base, [, 1, ], ), ;, int, trial, =, 1, ;, int, prevtrial, ;, while, (]
[(, base, [, 1, ], ), ;, int, trial, =, 1, ;, int, prevtrial, ;, while, (, true, ), {]
[[, 1, ], ), ;, int, trial, =, 1, ;, int, prevtrial, ;, while, (, true, ), {, prevtrial, =]
[], ), ;, int, trial, =, 1, ;, int, prevtrial, ;, while, (, true, ), {, prevtrial, =, trial, ;]
[;, int, trial, =, 1, ;, int, prevtrial, ;, while, (, true, ), {, prevtrial, =, trial, ;, trial, =]
[;, int, trial, =, 1, ;, int, prevtrial, ;, while, (, true, ), {, prevtrial, =, trial, ;, trial, =]
[trial, =, 1, ;, int, prevtrial, ;, while, (, true, ), {, prevtrial, =, trial, ;, trial, =, trial, *]
[int, prevtrial, ;, while, (, true, ), {, prevtrial, =, trial, ;, trial, =, trial, *, 2, ;, if, (]
[int, prevtrial, ;, while, (, true, ), {, prevtrial, =, trial, ;, trial, =, trial, *, 2, ;, if, (]
[;, while, (, true, ), {, prevtrial, =, trial, ;, trial, =, trial, *, 2, ;, if, (, trial, >]
[prevtrial, =, trial, ;, trial, =, trial, *, 2, ;, if, (, trial, >, a, ), {, break, ;, }]
[trial, ;, trial, =, trial, *, 2, ;, if, (, trial, >, a, ), {, break, ;, }, r, =]
[trial, =, trial, *, 2, ;, if, (, trial, >, a, ), {, break, ;, }, r, =, splitMult, (]
[trial, *, 2, ;, if, (, trial, >, a, ), {, break, ;, }, r, =, splitMult, (, r, ,]
[if, (, trial, >, a, ), {, break, ;, }, r, =, splitMult, (, r, ,, r, ), ;, }]
[trial, >, a, ), {, break, ;, }, r, =, splitMult, (, r, ,, r, ), ;, }, trial, =]
[a, ), {, break, ;, }, r, =, splitMult, (, r, ,, r, ), ;, }, trial, =, prevtrial, ;]
[{, break, ;, }, r, =, splitMult, (, r, ,, r, ), ;, }, trial, =, prevtrial, ;, a, -=]
[;, }, r, =, splitMult, (, r, ,, r, ), ;, }, trial, =, prevtrial, ;, a, -=, trial, ;]
[r, =, splitMult, (, r, ,, r, ), ;, }, trial, =, prevtrial, ;, a, -=, trial, ;, result, =]
[splitMult, (, r, ,, r, ), ;, }, trial, =, prevtrial, ;, a, -=, trial, ;, result, =, splitMult, (]
[r, ,, r, ), ;, }, trial, =, prevtrial, ;, a, -=, trial, ;, result, =, splitMult, (, result, ,]
[trial, =, prevtrial, ;, a, -=, trial, ;, result, =, splitMult, (, result, ,, r, ), ;, }, while, (]
[trial, =, prevtrial, ;, a, -=, trial, ;, result, =, splitMult, (, result, ,, r, ), ;, }, while, (]
[prevtrial, ;, a, -=, trial, ;, result, =, splitMult, (, result, ,, r, ), ;, }, while, (, a, >=]
[-=, trial, ;, result, =, splitMult, (, result, ,, r, ), ;, }, while, (, a, >=, 1, ), ;]
[-=, trial, ;, result, =, splitMult, (, result, ,, r, ), ;, }, while, (, a, >=, 1, ), ;]
[;, result, =, splitMult, (, result, ,, r, ), ;, }, while, (, a, >=, 1, ), ;, result, []
[splitMult, (, result, ,, r, ), ;, }, while, (, a, >=, 1, ), ;, result, [, 0, ], =]
[splitMult, (, result, ,, r, ), ;, }, while, (, a, >=, 1, ), ;, result, [, 0, ], =]
[splitMult, (, result, ,, r, ), ;, }, while, (, a, >=, 1, ), ;, result, [, 0, ], =]
[result, ,, r, ), ;, }, while, (, a, >=, 1, ), ;, result, [, 0, ], =, result, []
[}, while, (, a, >=, 1, ), ;, result, [, 0, ], =, result, [, 0, ], ., add, (]
[}, while, (, a, >=, 1, ), ;, result, [, 0, ], =, result, [, 0, ], ., add, (]
[(, a, >=, 1, ), ;, result, [, 0, ], =, result, [, 0, ], ., add, (, result, []
[result, [, 0, ], =, result, [, 0, ], ., add, (, result, [, 1, ], ), ;, if, (]
[], =, result, [, 0, ], ., add, (, result, [, 1, ], ), ;, if, (, invert, ), {]
[], =, result, [, 0, ], ., add, (, result, [, 1, ], ), ;, if, (, invert, ), {]
[result, [, 0, ], ., add, (, result, [, 1, ], ), ;, if, (, invert, ), {, result, []
[], ., add, (, result, [, 1, ], ), ;, if, (, invert, ), {, result, [, 0, ], =]
[], ., add, (, result, [, 1, ], ), ;, if, (, invert, ), {, result, [, 0, ], =]
[], ., add, (, result, [, 1, ], ), ;, if, (, invert, ), {, result, [, 0, ], =]
[], ., add, (, result, [, 1, ], ), ;, if, (, invert, ), {, result, [, 0, ], =]
[add, (, result, [, 1, ], ), ;, if, (, invert, ), {, result, [, 0, ], =, base, []
[(, invert, ), {, result, [, 0, ], =, base, [, 0, ], ., getOne, (, ), ., divide, (]
[(, invert, ), {, result, [, 0, ], =, base, [, 0, ], ., getOne, (, ), ., divide, (]
[), {, result, [, 0, ], =, base, [, 0, ], ., getOne, (, ), ., divide, (, result, []
[=, base, [, 0, ], ., getOne, (, ), ., divide, (, result, [, 0, ], ), ;, }, return]
[=, base, [, 0, ], ., getOne, (, ), ., divide, (, result, [, 0, ], ), ;, }, return]
[[, 0, ], ., getOne, (, ), ., divide, (, result, [, 0, ], ), ;, }, return, result, []
[[, 0, ], ;, }, public, static, Dfp, pow, (, Dfp, base, ,, int, a, ), {, boolean, invert, =]
[public, static, Dfp, pow, (, Dfp, base, ,, int, a, ), {, boolean, invert, =, false, ;, Dfp, result, =]
[public, static, Dfp, pow, (, Dfp, base, ,, int, a, ), {, boolean, invert, =, false, ;, Dfp, result, =]
[int, a, ), {, boolean, invert, =, false, ;, Dfp, result, =, base, ., getOne, (, ), ;, if, (]
[int, a, ), {, boolean, invert, =, false, ;, Dfp, result, =, base, ., getOne, (, ), ;, if, (]
[), {, boolean, invert, =, false, ;, Dfp, result, =, base, ., getOne, (, ), ;, if, (, a, ==]
[=, false, ;, Dfp, result, =, base, ., getOne, (, ), ;, if, (, a, ==, 0, ), {, return]
[=, base, ., getOne, (, ), ;, if, (, a, ==, 0, ), {, return, result, ;, }, if, (]
[=, base, ., getOne, (, ), ;, if, (, a, ==, 0, ), {, return, result, ;, }, if, (]
[., getOne, (, ), ;, if, (, a, ==, 0, ), {, return, result, ;, }, if, (, a, <]
[), ;, if, (, a, ==, 0, ), {, return, result, ;, }, if, (, a, <, 0, ), {]
[if, (, a, ==, 0, ), {, return, result, ;, }, if, (, a, <, 0, ), {, invert, =]
[a, ==, 0, ), {, return, result, ;, }, if, (, a, <, 0, ), {, invert, =, true, ;]
[0, ), {, return, result, ;, }, if, (, a, <, 0, ), {, invert, =, true, ;, a, =]
[), {, return, result, ;, }, if, (, a, <, 0, ), {, invert, =, true, ;, a, =, -]
[a, <, 0, ), {, invert, =, true, ;, a, =, -, a, ;, }, do, {, Dfp, r, =]
[), {, invert, =, true, ;, a, =, -, a, ;, }, do, {, Dfp, r, =, new, Dfp, (]
[a, ;, }, do, {, Dfp, r, =, new, Dfp, (, base, ), ;, Dfp, prevr, ;, int, trial, =]
[=, new, Dfp, (, base, ), ;, Dfp, prevr, ;, int, trial, =, 1, ;, int, prevtrial, ;, do, {]
[Dfp, (, base, ), ;, Dfp, prevr, ;, int, trial, =, 1, ;, int, prevtrial, ;, do, {, prevr, =]
[), ;, Dfp, prevr, ;, int, trial, =, 1, ;, int, prevtrial, ;, do, {, prevr, =, new, Dfp, (]
[prevr, ;, int, trial, =, 1, ;, int, prevtrial, ;, do, {, prevr, =, new, Dfp, (, r, ), ;]
[int, trial, =, 1, ;, int, prevtrial, ;, do, {, prevr, =, new, Dfp, (, r, ), ;, prevtrial, =]
[=, 1, ;, int, prevtrial, ;, do, {, prevr, =, new, Dfp, (, r, ), ;, prevtrial, =, trial, ;]
[;, int, prevtrial, ;, do, {, prevr, =, new, Dfp, (, r, ), ;, prevtrial, =, trial, ;, r, =]
[;, int, prevtrial, ;, do, {, prevr, =, new, Dfp, (, r, ), ;, prevtrial, =, trial, ;, r, =]
[do, {, prevr, =, new, Dfp, (, r, ), ;, prevtrial, =, trial, ;, r, =, r, ., multiply, (]
[=, new, Dfp, (, r, ), ;, prevtrial, =, trial, ;, r, =, r, ., multiply, (, r, ), ;]
[Dfp, (, r, ), ;, prevtrial, =, trial, ;, r, =, r, ., multiply, (, r, ), ;, trial, =]
[Dfp, (, r, ), ;, prevtrial, =, trial, ;, r, =, r, ., multiply, (, r, ), ;, trial, =]
[r, ), ;, prevtrial, =, trial, ;, r, =, r, ., multiply, (, r, ), ;, trial, =, trial, *]
[trial, ;, r, =, r, ., multiply, (, r, ), ;, trial, =, trial, *, 2, ;, }, while, (]
[trial, ;, r, =, r, ., multiply, (, r, ), ;, trial, =, trial, *, 2, ;, }, while, (]
[r, =, r, ., multiply, (, r, ), ;, trial, =, trial, *, 2, ;, }, while, (, a, >]
[., multiply, (, r, ), ;, trial, =, trial, *, 2, ;, }, while, (, a, >, trial, ), ;]
[(, r, ), ;, trial, =, trial, *, 2, ;, }, while, (, a, >, trial, ), ;, r, =]
[), ;, trial, =, trial, *, 2, ;, }, while, (, a, >, trial, ), ;, r, =, prevr, ;]
[trial, =, trial, *, 2, ;, }, while, (, a, >, trial, ), ;, r, =, prevr, ;, trial, =]
[trial, *, 2, ;, }, while, (, a, >, trial, ), ;, r, =, prevr, ;, trial, =, prevtrial, ;]
[2, ;, }, while, (, a, >, trial, ), ;, r, =, prevr, ;, trial, =, prevtrial, ;, a, =]
[2, ;, }, while, (, a, >, trial, ), ;, r, =, prevr, ;, trial, =, prevtrial, ;, a, =]
[}, while, (, a, >, trial, ), ;, r, =, prevr, ;, trial, =, prevtrial, ;, a, =, a, -]
[(, a, >, trial, ), ;, r, =, prevr, ;, trial, =, prevtrial, ;, a, =, a, -, trial, ;]
[>, trial, ), ;, r, =, prevr, ;, trial, =, prevtrial, ;, a, =, a, -, trial, ;, result, =]
[>, trial, ), ;, r, =, prevr, ;, trial, =, prevtrial, ;, a, =, a, -, trial, ;, result, =]
[r, =, prevr, ;, trial, =, prevtrial, ;, a, =, a, -, trial, ;, result, =, result, ., multiply, (]
[prevtrial, ;, a, =, a, -, trial, ;, result, =, result, ., multiply, (, r, ), ;, }, while, (]
[prevtrial, ;, a, =, a, -, trial, ;, result, =, result, ., multiply, (, r, ), ;, }, while, (]
[a, =, a, -, trial, ;, result, =, result, ., multiply, (, r, ), ;, }, while, (, a, >=]
[;, result, =, result, ., multiply, (, r, ), ;, }, while, (, a, >=, 1, ), ;, if, (]
[result, ., multiply, (, r, ), ;, }, while, (, a, >=, 1, ), ;, if, (, invert, ), {]
[multiply, (, r, ), ;, }, while, (, a, >=, 1, ), ;, if, (, invert, ), {, result, =]
[multiply, (, r, ), ;, }, while, (, a, >=, 1, ), ;, if, (, invert, ), {, result, =]
[multiply, (, r, ), ;, }, while, (, a, >=, 1, ), ;, if, (, invert, ), {, result, =]
[a, >=, 1, ), ;, if, (, invert, ), {, result, =, base, ., getOne, (, ), ., divide, (]
[if, (, invert, ), {, result, =, base, ., getOne, (, ), ., divide, (, result, ), ;, }, return]
[if, (, invert, ), {, result, =, base, ., getOne, (, ), ., divide, (, result, ), ;, }, return]
[{, result, =, base, ., getOne, (, ), ., divide, (, result, ), ;, }, return, base, ., newInstance, (]
[newInstance, (, result, ), ;, }, public, static, Dfp, exp, (, final, Dfp, a, ), {, final, Dfp, inta, =]
[newInstance, (, result, ), ;, }, public, static, Dfp, exp, (, final, Dfp, a, ), {, final, Dfp, inta, =]
[(, final, Dfp, a, ), {, final, Dfp, inta, =, a, ., rint, (, ), ;, final, Dfp, fraca, =]
[(, final, Dfp, a, ), {, final, Dfp, inta, =, a, ., rint, (, ), ;, final, Dfp, fraca, =]
[), {, final, Dfp, inta, =, a, ., rint, (, ), ;, final, Dfp, fraca, =, a, ., subtract, (]
[., rint, (, ), ;, final, Dfp, fraca, =, a, ., subtract, (, inta, ), ;, final, int, ia, =]
[., rint, (, ), ;, final, Dfp, fraca, =, a, ., subtract, (, inta, ), ;, final, int, ia, =]
[=, a, ., subtract, (, inta, ), ;, final, int, ia, =, inta, ., intValue, (, ), ;, if, (]
[=, a, ., subtract, (, inta, ), ;, final, int, ia, =, inta, ., intValue, (, ), ;, if, (]
[., subtract, (, inta, ), ;, final, int, ia, =, inta, ., intValue, (, ), ;, if, (, ia, >]
[), ;, final, int, ia, =, inta, ., intValue, (, ), ;, if, (, ia, >, 2147483646, ), {, return]
[), ;, final, int, ia, =, inta, ., intValue, (, ), ;, if, (, ia, >, 2147483646, ), {, return]
[ia, =, inta, ., intValue, (, ), ;, if, (, ia, >, 2147483646, ), {, return, a, ., newInstance, (]
[., intValue, (, ), ;, if, (, ia, >, 2147483646, ), {, return, a, ., newInstance, (, (, byte, )]
[(, ), ;, if, (, ia, >, 2147483646, ), {, return, a, ., newInstance, (, (, byte, ), 1, ,]
[(, ), ;, if, (, ia, >, 2147483646, ), {, return, a, ., newInstance, (, (, byte, ), 1, ,]
[), {, return, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ;, }, if, (]
[), {, return, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ;, }, if, (]
[return, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ;, }, if, (, ia, <]
[a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ;, }, if, (, ia, <, -]
[(, byte, ), 1, ,, Dfp, ., INFINITE, ), ;, }, if, (, ia, <, -, 2147483646, ), {, return]
[(, byte, ), 1, ,, Dfp, ., INFINITE, ), ;, }, if, (, ia, <, -, 2147483646, ), {, return]
[if, (, ia, <, -, 2147483646, ), {, return, a, ., newInstance, (, ), ;, }, final, Dfp, einta, =]
[ia, <, -, 2147483646, ), {, return, a, ., newInstance, (, ), ;, }, final, Dfp, einta, =, splitPow, (]
[ia, <, -, 2147483646, ), {, return, a, ., newInstance, (, ), ;, }, final, Dfp, einta, =, splitPow, (]
[ia, <, -, 2147483646, ), {, return, a, ., newInstance, (, ), ;, }, final, Dfp, einta, =, splitPow, (]
[(, ), ;, }, final, Dfp, einta, =, splitPow, (, a, ., getField, (, ), ., getESplit, (, ), ,]
[=, splitPow, (, a, ., getField, (, ), ., getESplit, (, ), ,, ia, ), ;, final, Dfp, efraca, =]
[(, a, ., getField, (, ), ., getESplit, (, ), ,, ia, ), ;, final, Dfp, efraca, =, expInternal, (]
[(, ), ., getESplit, (, ), ,, ia, ), ;, final, Dfp, efraca, =, expInternal, (, fraca, ), ;, return]
[(, ), ., getESplit, (, ), ,, ia, ), ;, final, Dfp, efraca, =, expInternal, (, fraca, ), ;, return]
[(, ), ,, ia, ), ;, final, Dfp, efraca, =, expInternal, (, fraca, ), ;, return, einta, ., multiply, (]
[., multiply, (, efraca, ), ;, }, protected, static, Dfp, expInternal, (, final, Dfp, a, ), {, Dfp, y, =]
[., multiply, (, efraca, ), ;, }, protected, static, Dfp, expInternal, (, final, Dfp, a, ), {, Dfp, y, =]
[Dfp, expInternal, (, final, Dfp, a, ), {, Dfp, y, =, a, ., getOne, (, ), ;, Dfp, x, =]
[Dfp, expInternal, (, final, Dfp, a, ), {, Dfp, y, =, a, ., getOne, (, ), ;, Dfp, x, =]
[y, =, a, ., getOne, (, ), ;, Dfp, x, =, a, ., getOne, (, ), ;, Dfp, fact, =]
[y, =, a, ., getOne, (, ), ;, Dfp, x, =, a, ., getOne, (, ), ;, Dfp, fact, =]
[x, =, a, ., getOne, (, ), ;, Dfp, fact, =, a, ., getOne, (, ), ;, Dfp, py, =]
[., getOne, (, ), ;, Dfp, fact, =, a, ., getOne, (, ), ;, Dfp, py, =, new, Dfp, (]
[a, ., getOne, (, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =]
[getOne, (, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 1, ;]
[getOne, (, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 1, ;]
[), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 1, ;, i, <]
[Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 1, ;, i, <, 90, ;]
[Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 1, ;, i, <, 90, ;]
[Dfp, (, y, ), ;, for, (, int, i, =, 1, ;, i, <, 90, ;, i, ++, ), {]
[y, ), ;, for, (, int, i, =, 1, ;, i, <, 90, ;, i, ++, ), {, x, =]
[y, ), ;, for, (, int, i, =, 1, ;, i, <, 90, ;, i, ++, ), {, x, =]
[(, int, i, =, 1, ;, i, <, 90, ;, i, ++, ), {, x, =, x, ., multiply, (]
[=, 1, ;, i, <, 90, ;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;]
[;, i, <, 90, ;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, fact, =]
[;, i, <, 90, ;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, fact, =]
[;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, fact, =, fact, ., divide, (]
[), {, x, =, x, ., multiply, (, a, ), ;, fact, =, fact, ., divide, (, i, ), ;]
[x, =, x, ., multiply, (, a, ), ;, fact, =, fact, ., divide, (, i, ), ;, y, =]
[x, =, x, ., multiply, (, a, ), ;, fact, =, fact, ., divide, (, i, ), ;, y, =]
[multiply, (, a, ), ;, fact, =, fact, ., divide, (, i, ), ;, y, =, y, ., add, (]
[multiply, (, a, ), ;, fact, =, fact, ., divide, (, i, ), ;, y, =, y, ., add, (]
[;, fact, =, fact, ., divide, (, i, ), ;, y, =, y, ., add, (, x, ., multiply, (]
[(, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (]
[(, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (]
[y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, ., equals, (]
[., multiply, (, fact, ), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }]
[(, fact, ), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return]
[static, Dfp, log, (, Dfp, a, ), {, int, lr, ;, Dfp, x, ;, int, ix, ;, int, p2, =]
[Dfp, a, ), {, int, lr, ;, Dfp, x, ;, int, ix, ;, int, p2, =, 0, ;, if, (]
[Dfp, a, ), {, int, lr, ;, Dfp, x, ;, int, ix, ;, int, p2, =, 0, ;, if, (]
[Dfp, a, ), {, int, lr, ;, Dfp, x, ;, int, ix, ;, int, p2, =, 0, ;, if, (]
[Dfp, a, ), {, int, lr, ;, Dfp, x, ;, int, ix, ;, int, p2, =, 0, ;, if, (]
[int, lr, ;, Dfp, x, ;, int, ix, ;, int, p2, =, 0, ;, if, (, a, ., equals, (]
[int, lr, ;, Dfp, x, ;, int, ix, ;, int, p2, =, 0, ;, if, (, a, ., equals, (]
[ix, ;, int, p2, =, 0, ;, if, (, a, ., equals, (, a, ., getZero, (, ), ), ||]
[ix, ;, int, p2, =, 0, ;, if, (, a, ., equals, (, a, ., getZero, (, ), ), ||]
[=, 0, ;, if, (, a, ., equals, (, a, ., getZero, (, ), ), ||, a, ., lessThan, (]
[=, 0, ;, if, (, a, ., equals, (, a, ., getZero, (, ), ), ||, a, ., lessThan, (]
[equals, (, a, ., getZero, (, ), ), ||, a, ., lessThan, (, a, ., getZero, (, ), ), ||]
[equals, (, a, ., getZero, (, ), ), ||, a, ., lessThan, (, a, ., getZero, (, ), ), ||]
[), ||, a, ., lessThan, (, a, ., getZero, (, ), ), ||, a, ., isNaN, (, ), ), {]
[), ||, a, ., lessThan, (, a, ., getZero, (, ), ), ||, a, ., isNaN, (, ), ), {]
[), ||, a, ., lessThan, (, a, ., getZero, (, ), ), ||, a, ., isNaN, (, ), ), {]
[getZero, (, ), ), ||, a, ., isNaN, (, ), ), {, a, ., getField, (, ), ., setIEEEFlagsBits, (]
[getZero, (, ), ), ||, a, ., isNaN, (, ), ), {, a, ., getField, (, ), ., setIEEEFlagsBits, (]
[., isNaN, (, ), ), {, a, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[., isNaN, (, ), ), {, a, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[), {, a, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, a, ., dotrap, (]
[), {, a, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, a, ., dotrap, (]
[getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, a, ., dotrap, (, DfpField, ., FLAG_INVALID, ,]
[), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, a, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, "ln", ,]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, a, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, "ln", ,, a, ,]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, a, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, "ln", ,, a, ,]
[FLAG_INVALID, ), ;, return, a, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, "ln", ,, a, ,, a, ., newInstance, (]
[return, a, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, "ln", ,, a, ,, a, ., newInstance, (, (, byte, )]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, "ln", ,, a, ,, a, ., newInstance, (, (, byte, ), 1, ,]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, "ln", ,, a, ,, a, ., newInstance, (, (, byte, ), 1, ,]
[a, ,, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (]
[a, ,, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (]
[a, ,, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (]
[(, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (, a, ., classify, (, ), ==]
[(, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (, a, ., classify, (, ), ==]
[., QNAN, ), ), ;, }, if, (, a, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, return]
[), ;, }, if, (, a, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, return, a, ;, }]
[}, if, (, a, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, return, a, ;, }, x, =]
[a, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, return, a, ;, }, x, =, new, Dfp, (]
[(, ), ==, Dfp, ., INFINITE, ), {, return, a, ;, }, x, =, new, Dfp, (, a, ), ;]
[==, Dfp, ., INFINITE, ), {, return, a, ;, }, x, =, new, Dfp, (, a, ), ;, lr, =]
[==, Dfp, ., INFINITE, ), {, return, a, ;, }, x, =, new, Dfp, (, a, ), ;, lr, =]
[return, a, ;, }, x, =, new, Dfp, (, a, ), ;, lr, =, x, ., log10K, (, ), ;]
[;, }, x, =, new, Dfp, (, a, ), ;, lr, =, x, ., log10K, (, ), ;, x, =]
[;, }, x, =, new, Dfp, (, a, ), ;, lr, =, x, ., log10K, (, ), ;, x, =]
[new, Dfp, (, a, ), ;, lr, =, x, ., log10K, (, ), ;, x, =, x, ., divide, (]
[(, a, ), ;, lr, =, x, ., log10K, (, ), ;, x, =, x, ., divide, (, pow, (]
[(, a, ), ;, lr, =, x, ., log10K, (, ), ;, x, =, x, ., divide, (, pow, (]
[lr, =, x, ., log10K, (, ), ;, x, =, x, ., divide, (, pow, (, a, ., newInstance, (]
[., log10K, (, ), ;, x, =, x, ., divide, (, pow, (, a, ., newInstance, (, 10000, ), ,]
[;, x, =, x, ., divide, (, pow, (, a, ., newInstance, (, 10000, ), ,, lr, ), ), ;]
[=, x, ., divide, (, pow, (, a, ., newInstance, (, 10000, ), ,, lr, ), ), ;, ix, =]
[=, x, ., divide, (, pow, (, a, ., newInstance, (, 10000, ), ,, lr, ), ), ;, ix, =]
[=, x, ., divide, (, pow, (, a, ., newInstance, (, 10000, ), ,, lr, ), ), ;, ix, =]
[), ,, lr, ), ), ;, ix, =, x, ., floor, (, ), ., intValue, (, ), ;, while, (]
[), ,, lr, ), ), ;, ix, =, x, ., floor, (, ), ., intValue, (, ), ;, while, (]
[lr, ), ), ;, ix, =, x, ., floor, (, ), ., intValue, (, ), ;, while, (, ix, >]
[;, ix, =, x, ., floor, (, ), ., intValue, (, ), ;, while, (, ix, >, 2, ), {]
[=, x, ., floor, (, ), ., intValue, (, ), ;, while, (, ix, >, 2, ), {, ix, >>=]
[., floor, (, ), ., intValue, (, ), ;, while, (, ix, >, 2, ), {, ix, >>=, 1, ;]
[., floor, (, ), ., intValue, (, ), ;, while, (, ix, >, 2, ), {, ix, >>=, 1, ;]
[while, (, ix, >, 2, ), {, ix, >>=, 1, ;, p2, ++, ;, }, Dfp, [, ], spx, =]
[ix, >, 2, ), {, ix, >>=, 1, ;, p2, ++, ;, }, Dfp, [, ], spx, =, split, (]
[;, p2, ++, ;, }, Dfp, [, ], spx, =, split, (, x, ), ;, Dfp, [, ], spy, =]
[;, }, Dfp, [, ], spx, =, split, (, x, ), ;, Dfp, [, ], spy, =, new, Dfp, []
[[, ], spx, =, split, (, x, ), ;, Dfp, [, ], spy, =, new, Dfp, [, 2, ], ;]
[[, ], spx, =, split, (, x, ), ;, Dfp, [, ], spy, =, new, Dfp, [, 2, ], ;]
[spx, =, split, (, x, ), ;, Dfp, [, ], spy, =, new, Dfp, [, 2, ], ;, spy, []
[(, x, ), ;, Dfp, [, ], spy, =, new, Dfp, [, 2, ], ;, spy, [, 0, ], =]
[), ;, Dfp, [, ], spy, =, new, Dfp, [, 2, ], ;, spy, [, 0, ], =, pow, (]
[), ;, Dfp, [, ], spy, =, new, Dfp, [, 2, ], ;, spy, [, 0, ], =, pow, (]
[=, new, Dfp, [, 2, ], ;, spy, [, 0, ], =, pow, (, a, ., getTwo, (, ), ,]
[[, 2, ], ;, spy, [, 0, ], =, pow, (, a, ., getTwo, (, ), ,, p2, ), ;]
[[, 2, ], ;, spy, [, 0, ], =, pow, (, a, ., getTwo, (, ), ,, p2, ), ;]
[], ;, spy, [, 0, ], =, pow, (, a, ., getTwo, (, ), ,, p2, ), ;, spx, []
[[, 0, ], =, pow, (, a, ., getTwo, (, ), ,, p2, ), ;, spx, [, 0, ], =]
[[, 0, ], =, pow, (, a, ., getTwo, (, ), ,, p2, ), ;, spx, [, 0, ], =]
[[, 0, ], =, pow, (, a, ., getTwo, (, ), ,, p2, ), ;, spx, [, 0, ], =]
[], =, pow, (, a, ., getTwo, (, ), ,, p2, ), ;, spx, [, 0, ], =, spx, []
[., getTwo, (, ), ,, p2, ), ;, spx, [, 0, ], =, spx, [, 0, ], ., divide, (]
[., getTwo, (, ), ,, p2, ), ;, spx, [, 0, ], =, spx, [, 0, ], ., divide, (]
[(, ), ,, p2, ), ;, spx, [, 0, ], =, spx, [, 0, ], ., divide, (, spy, []
[), ;, spx, [, 0, ], =, spx, [, 0, ], ., divide, (, spy, [, 0, ], ), ;]
[), ;, spx, [, 0, ], =, spx, [, 0, ], ., divide, (, spy, [, 0, ], ), ;]
[spx, [, 0, ], =, spx, [, 0, ], ., divide, (, spy, [, 0, ], ), ;, spx, []
[], =, spx, [, 0, ], ., divide, (, spy, [, 0, ], ), ;, spx, [, 1, ], =]
[], =, spx, [, 0, ], ., divide, (, spy, [, 0, ], ), ;, spx, [, 1, ], =]
[], =, spx, [, 0, ], ., divide, (, spy, [, 0, ], ), ;, spx, [, 1, ], =]
[spx, [, 0, ], ., divide, (, spy, [, 0, ], ), ;, spx, [, 1, ], =, spx, []
[divide, (, spy, [, 0, ], ), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (]
[divide, (, spy, [, 0, ], ), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (]
[spy, [, 0, ], ), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (, spy, []
[), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (, spy, [, 0, ], ), ;]
[), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (, spy, [, 0, ], ), ;]
[spx, [, 1, ], =, spx, [, 1, ], ., divide, (, spy, [, 0, ], ), ;, spy, []
[], =, spx, [, 1, ], ., divide, (, spy, [, 0, ], ), ;, spy, [, 0, ], =]
[], =, spx, [, 1, ], ., divide, (, spy, [, 0, ], ), ;, spy, [, 0, ], =]
[1, ], ., divide, (, spy, [, 0, ], ), ;, spy, [, 0, ], =, a, ., newInstance, (]
[spy, [, 0, ], ), ;, spy, [, 0, ], =, a, ., newInstance, (, "1.33333", ), ;, while, (]
[spy, [, 0, ], ), ;, spy, [, 0, ], =, a, ., newInstance, (, "1.33333", ), ;, while, (]
[spy, [, 0, ], ), ;, spy, [, 0, ], =, a, ., newInstance, (, "1.33333", ), ;, while, (]
[spy, [, 0, ], ), ;, spy, [, 0, ], =, a, ., newInstance, (, "1.33333", ), ;, while, (]
[0, ], ), ;, spy, [, 0, ], =, a, ., newInstance, (, "1.33333", ), ;, while, (, spx, []
[[, 0, ], =, a, ., newInstance, (, "1.33333", ), ;, while, (, spx, [, 0, ], ., add, (]
[[, 0, ], =, a, ., newInstance, (, "1.33333", ), ;, while, (, spx, [, 0, ], ., add, (]
[], =, a, ., newInstance, (, "1.33333", ), ;, while, (, spx, [, 0, ], ., add, (, spx, []
["1.33333", ), ;, while, (, spx, [, 0, ], ., add, (, spx, [, 1, ], ), ., greaterThan, (]
["1.33333", ), ;, while, (, spx, [, 0, ], ., add, (, spx, [, 1, ], ), ., greaterThan, (]
[;, while, (, spx, [, 0, ], ., add, (, spx, [, 1, ], ), ., greaterThan, (, spy, []
[0, ], ., add, (, spx, [, 1, ], ), ., greaterThan, (, spy, [, 0, ], ), ), {]
[0, ], ., add, (, spx, [, 1, ], ), ., greaterThan, (, spy, [, 0, ], ), ), {]
[., add, (, spx, [, 1, ], ), ., greaterThan, (, spy, [, 0, ], ), ), {, spx, []
[spx, [, 1, ], ), ., greaterThan, (, spy, [, 0, ], ), ), {, spx, [, 0, ], =]
[spx, [, 1, ], ), ., greaterThan, (, spy, [, 0, ], ), ), {, spx, [, 0, ], =]
[spx, [, 1, ], ), ., greaterThan, (, spy, [, 0, ], ), ), {, spx, [, 0, ], =]
[1, ], ), ., greaterThan, (, spy, [, 0, ], ), ), {, spx, [, 0, ], =, spx, []
[(, spy, [, 0, ], ), ), {, spx, [, 0, ], =, spx, [, 0, ], ., divide, (]
[0, ], ), ), {, spx, [, 0, ], =, spx, [, 0, ], ., divide, (, 2, ), ;]
[0, ], ), ), {, spx, [, 0, ], =, spx, [, 0, ], ., divide, (, 2, ), ;]
[), ), {, spx, [, 0, ], =, spx, [, 0, ], ., divide, (, 2, ), ;, spx, []
[spx, [, 0, ], =, spx, [, 0, ], ., divide, (, 2, ), ;, spx, [, 1, ], =]
[spx, [, 0, ], =, spx, [, 0, ], ., divide, (, 2, ), ;, spx, [, 1, ], =]
[spx, [, 0, ], =, spx, [, 0, ], ., divide, (, 2, ), ;, spx, [, 1, ], =]
[0, ], =, spx, [, 0, ], ., divide, (, 2, ), ;, spx, [, 1, ], =, spx, []
[0, ], ., divide, (, 2, ), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (]
[divide, (, 2, ), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (, 2, ), ;]
[divide, (, 2, ), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (, 2, ), ;]
[=, spx, [, 1, ], ., divide, (, 2, ), ;, p2, ++, ;, }, Dfp, [, ], spz, =]
[[, 1, ], ., divide, (, 2, ), ;, p2, ++, ;, }, Dfp, [, ], spz, =, logInternal, (]
[., divide, (, 2, ), ;, p2, ++, ;, }, Dfp, [, ], spz, =, logInternal, (, spx, ), ;]
[., divide, (, 2, ), ;, p2, ++, ;, }, Dfp, [, ], spz, =, logInternal, (, spx, ), ;]
[(, 2, ), ;, p2, ++, ;, }, Dfp, [, ], spz, =, logInternal, (, spx, ), ;, spx, []
[;, p2, ++, ;, }, Dfp, [, ], spz, =, logInternal, (, spx, ), ;, spx, [, 0, ], =]
[;, p2, ++, ;, }, Dfp, [, ], spz, =, logInternal, (, spx, ), ;, spx, [, 0, ], =]
[}, Dfp, [, ], spz, =, logInternal, (, spx, ), ;, spx, [, 0, ], =, a, ., newInstance, (]
[}, Dfp, [, ], spz, =, logInternal, (, spx, ), ;, spx, [, 0, ], =, a, ., newInstance, (]
[}, Dfp, [, ], spz, =, logInternal, (, spx, ), ;, spx, [, 0, ], =, a, ., newInstance, (]
[(, spx, ), ;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (]
[(, spx, ), ;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (]
[), ;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, p2, +]
[), ;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, p2, +]
[spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, p2, +, 4, *]
[(, new, StringBuilder, (, ), ., append, (, p2, +, 4, *, lr, ), ., toString, (, ), ), ;]
[(, new, StringBuilder, (, ), ., append, (, p2, +, 4, *, lr, ), ., toString, (, ), ), ;]
[StringBuilder, (, ), ., append, (, p2, +, 4, *, lr, ), ., toString, (, ), ), ;, spx, []
[., append, (, p2, +, 4, *, lr, ), ., toString, (, ), ), ;, spx, [, 1, ], =]
[., append, (, p2, +, 4, *, lr, ), ., toString, (, ), ), ;, spx, [, 1, ], =]
[*, lr, ), ., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;]
[), ., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =]
[toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult, (]
[toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult, (]
[toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult, (]
[a, ., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn2Split, (, ), ,]
[(, ), ;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn2Split, (, ), ,, spx, ), ;]
[(, ), ;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn2Split, (, ), ,, spx, ), ;]
[;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn2Split, (, ), ,, spx, ), ;, spz, []
[splitMult, (, a, ., getField, (, ), ., getLn2Split, (, ), ,, spx, ), ;, spz, [, 0, ], =]
[splitMult, (, a, ., getField, (, ), ., getLn2Split, (, ), ,, spx, ), ;, spz, [, 0, ], =]
[splitMult, (, a, ., getField, (, ), ., getLn2Split, (, ), ,, spx, ), ;, spz, [, 0, ], =]
[a, ., getField, (, ), ., getLn2Split, (, ), ,, spx, ), ;, spz, [, 0, ], =, spz, []
[., getLn2Split, (, ), ,, spx, ), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (]
[., getLn2Split, (, ), ,, spx, ), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (]
[(, ), ,, spx, ), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, []
[), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;]
[), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;]
[spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, []
[], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =]
[], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =]
[], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =]
[spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, []
[add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (]
[add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (]
[spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, []
[), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;]
[), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;]
[spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, spx, []
[], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, spx, [, 0, ], =]
[], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, spx, [, 0, ], =]
[1, ], ., add, (, spy, [, 1, ], ), ;, spx, [, 0, ], =, a, ., newInstance, (]
[1, ], ., add, (, spy, [, 1, ], ), ;, spx, [, 0, ], =, a, ., newInstance, (]
[1, ], ., add, (, spy, [, 1, ], ), ;, spx, [, 0, ], =, a, ., newInstance, (]
[1, ], ), ;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (]
[1, ], ), ;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (]
[), ;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, 4, *]
[., newInstance, (, new, StringBuilder, (, ), ., append, (, 4, *, lr, ), ., toString, (, ), ), ;]
[., newInstance, (, new, StringBuilder, (, ), ., append, (, 4, *, lr, ), ., toString, (, ), ), ;]
[(, new, StringBuilder, (, ), ., append, (, 4, *, lr, ), ., toString, (, ), ), ;, spx, []
[(, ), ., append, (, 4, *, lr, ), ., toString, (, ), ), ;, spx, [, 1, ], =]
[(, ), ., append, (, 4, *, lr, ), ., toString, (, ), ), ;, spx, [, 1, ], =]
[*, lr, ), ., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;]
[), ., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =]
[toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult, (]
[toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult, (]
[toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult, (]
[a, ., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn5Split, (, ), ,]
[(, ), ;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn5Split, (, ), ,, spx, ), ;]
[(, ), ;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn5Split, (, ), ,, spx, ), ;]
[;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn5Split, (, ), ,, spx, ), ;, spz, []
[splitMult, (, a, ., getField, (, ), ., getLn5Split, (, ), ,, spx, ), ;, spz, [, 0, ], =]
[splitMult, (, a, ., getField, (, ), ., getLn5Split, (, ), ,, spx, ), ;, spz, [, 0, ], =]
[splitMult, (, a, ., getField, (, ), ., getLn5Split, (, ), ,, spx, ), ;, spz, [, 0, ], =]
[a, ., getField, (, ), ., getLn5Split, (, ), ,, spx, ), ;, spz, [, 0, ], =, spz, []
[., getLn5Split, (, ), ,, spx, ), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (]
[., getLn5Split, (, ), ,, spx, ), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (]
[(, ), ,, spx, ), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, []
[), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;]
[), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;]
[spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, []
[], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =]
[], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =]
[], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =]
[spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, []
[add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (]
[add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (]
[spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, []
[;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, return]
[;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, return]
[], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, return, a, ., newInstance, (]
[], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, return, a, ., newInstance, (]
[], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, return, a, ., newInstance, (]
[spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, return, a, ., newInstance, (, spz, []
[add, (, spy, [, 1, ], ), ;, return, a, ., newInstance, (, spz, [, 0, ], ., add, (]
[add, (, spy, [, 1, ], ), ;, return, a, ., newInstance, (, spz, [, 0, ], ., add, (]
[spy, [, 1, ], ), ;, return, a, ., newInstance, (, spz, [, 0, ], ., add, (, spz, []
[), ;, }, protected, static, Dfp, [, ], logInternal, (, final, Dfp, a, [, ], ), {, Dfp, t, =]
[), ;, }, protected, static, Dfp, [, ], logInternal, (, final, Dfp, a, [, ], ), {, Dfp, t, =]
[), ;, }, protected, static, Dfp, [, ], logInternal, (, final, Dfp, a, [, ], ), {, Dfp, t, =]
[), ;, }, protected, static, Dfp, [, ], logInternal, (, final, Dfp, a, [, ], ), {, Dfp, t, =]
[}, protected, static, Dfp, [, ], logInternal, (, final, Dfp, a, [, ], ), {, Dfp, t, =, a, []
[], logInternal, (, final, Dfp, a, [, ], ), {, Dfp, t, =, a, [, 0, ], ., divide, (]
[a, [, ], ), {, Dfp, t, =, a, [, 0, ], ., divide, (, 4, ), ., add, (]
[a, [, ], ), {, Dfp, t, =, a, [, 0, ], ., divide, (, 4, ), ., add, (]
[a, [, ], ), {, Dfp, t, =, a, [, 0, ], ., divide, (, 4, ), ., add, (]
[], ), {, Dfp, t, =, a, [, 0, ], ., divide, (, 4, ), ., add, (, a, []
[=, a, [, 0, ], ., divide, (, 4, ), ., add, (, a, [, 1, ], ., divide, (]
[(, 4, ), ., add, (, a, [, 1, ], ., divide, (, 4, ), ), ;, Dfp, x, =]
[(, 4, ), ., add, (, a, [, 1, ], ., divide, (, 4, ), ), ;, Dfp, x, =]
[(, 4, ), ., add, (, a, [, 1, ], ., divide, (, 4, ), ), ;, Dfp, x, =]
[add, (, a, [, 1, ], ., divide, (, 4, ), ), ;, Dfp, x, =, t, ., add, (]
[add, (, a, [, 1, ], ., divide, (, 4, ), ), ;, Dfp, x, =, t, ., add, (]
[add, (, a, [, 1, ], ., divide, (, 4, ), ), ;, Dfp, x, =, t, ., add, (]
[a, [, 1, ], ., divide, (, 4, ), ), ;, Dfp, x, =, t, ., add, (, a, []
[divide, (, 4, ), ), ;, Dfp, x, =, t, ., add, (, a, [, 0, ], ., newInstance, (]
[Dfp, x, =, t, ., add, (, a, [, 0, ], ., newInstance, (, "-0.25", ), ), ., divide, (]
[Dfp, x, =, t, ., add, (, a, [, 0, ], ., newInstance, (, "-0.25", ), ), ., divide, (]
[., add, (, a, [, 0, ], ., newInstance, (, "-0.25", ), ), ., divide, (, t, ., add, (]
[., add, (, a, [, 0, ], ., newInstance, (, "-0.25", ), ), ., divide, (, t, ., add, (]
[., add, (, a, [, 0, ], ., newInstance, (, "-0.25", ), ), ., divide, (, t, ., add, (]
[(, a, [, 0, ], ., newInstance, (, "-0.25", ), ), ., divide, (, t, ., add, (, a, []
[., newInstance, (, "-0.25", ), ), ., divide, (, t, ., add, (, a, [, 0, ], ., newInstance, (]
[(, t, ., add, (, a, [, 0, ], ., newInstance, (, "0.25", ), ), ), ;, Dfp, y, =]
[add, (, a, [, 0, ], ., newInstance, (, "0.25", ), ), ), ;, Dfp, y, =, new, Dfp, (]
[., newInstance, (, "0.25", ), ), ), ;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num, =]
["0.25", ), ), ), ;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num, =, new, Dfp, (]
[y, =, new, Dfp, (, x, ), ;, Dfp, num, =, new, Dfp, (, x, ), ;, Dfp, py, =]
[Dfp, (, x, ), ;, Dfp, num, =, new, Dfp, (, x, ), ;, Dfp, py, =, new, Dfp, (]
[num, =, new, Dfp, (, x, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, int, den, =]
[;, Dfp, py, =, new, Dfp, (, y, ), ;, int, den, =, 1, ;, for, (, int, i, =]
[py, =, new, Dfp, (, y, ), ;, int, den, =, 1, ;, for, (, int, i, =, 0, ;]
[py, =, new, Dfp, (, y, ), ;, int, den, =, 1, ;, for, (, int, i, =, 0, ;]
[new, Dfp, (, y, ), ;, int, den, =, 1, ;, for, (, int, i, =, 0, ;, i, <]
[(, y, ), ;, int, den, =, 1, ;, for, (, int, i, =, 0, ;, i, <, 10000, ;]
[(, y, ), ;, int, den, =, 1, ;, for, (, int, i, =, 0, ;, i, <, 10000, ;]
[int, den, =, 1, ;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {]
[=, 1, ;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, num, =]
[=, 1, ;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, num, =]
[(, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, num, =, num, ., multiply, (]
[=, 0, ;, i, <, 10000, ;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;]
[;, i, <, 10000, ;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =]
[;, i, <, 10000, ;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =]
[;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (]
[), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;]
[num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;, den, =]
[num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;, den, =]
[num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;, den, =, den, +]
[multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;, den, =, den, +, 2, ;]
[x, ), ;, num, =, num, ., multiply, (, x, ), ;, den, =, den, +, 2, ;, t, =]
[x, ), ;, num, =, num, ., multiply, (, x, ), ;, den, =, den, +, 2, ;, t, =]
[=, num, ., multiply, (, x, ), ;, den, =, den, +, 2, ;, t, =, num, ., divide, (]
[multiply, (, x, ), ;, den, =, den, +, 2, ;, t, =, num, ., divide, (, den, ), ;]
[x, ), ;, den, =, den, +, 2, ;, t, =, num, ., divide, (, den, ), ;, y, =]
[x, ), ;, den, =, den, +, 2, ;, t, =, num, ., divide, (, den, ), ;, y, =]
[=, den, +, 2, ;, t, =, num, ., divide, (, den, ), ;, y, =, y, ., add, (]
[t, =, num, ., divide, (, den, ), ;, y, =, y, ., add, (, t, ), ;, if, (]
[t, =, num, ., divide, (, den, ), ;, y, =, y, ., add, (, t, ), ;, if, (]
[divide, (, den, ), ;, y, =, y, ., add, (, t, ), ;, if, (, y, ., equals, (]
[y, ., add, (, t, ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }]
[add, (, t, ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }]
[equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, y, =]
[equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, y, =]
[), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, y, =, y, ., multiply, (]
[), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, y, =, y, ., multiply, (]
[), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, y, =, y, ., multiply, (]
[break, ;, }, py, =, new, Dfp, (, y, ), ;, }, y, =, y, ., multiply, (, a, []
[), ;, }, y, =, y, ., multiply, (, a, [, 0, ], ., getTwo, (, ), ), ;, return]
[}, y, =, y, ., multiply, (, a, [, 0, ], ., getTwo, (, ), ), ;, return, split, (]
[(, y, ), ;, }, public, static, Dfp, pow, (, Dfp, x, ,, final, Dfp, y, ), {, if, (]
[(, y, ), ;, }, public, static, Dfp, pow, (, Dfp, x, ,, final, Dfp, y, ), {, if, (]
[(, y, ), ;, }, public, static, Dfp, pow, (, Dfp, x, ,, final, Dfp, y, ), {, if, (]
[(, y, ), ;, }, public, static, Dfp, pow, (, Dfp, x, ,, final, Dfp, y, ), {, if, (]
[Dfp, x, ,, final, Dfp, y, ), {, if, (, x, ., getField, (, ), ., getRadixDigits, (, ), !=]
[Dfp, x, ,, final, Dfp, y, ), {, if, (, x, ., getField, (, ), ., getRadixDigits, (, ), !=]
[Dfp, x, ,, final, Dfp, y, ), {, if, (, x, ., getField, (, ), ., getRadixDigits, (, ), !=]
[., getField, (, ), ., getRadixDigits, (, ), !=, y, ., getField, (, ), ., getRadixDigits, (, ), ), {]
[., getField, (, ), ., getRadixDigits, (, ), !=, y, ., getField, (, ), ., getRadixDigits, (, ), ), {]
[., getField, (, ), ., getRadixDigits, (, ), !=, y, ., getField, (, ), ., getRadixDigits, (, ), ), {]
[!=, y, ., getField, (, ), ., getRadixDigits, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[!=, y, ., getField, (, ), ., getRadixDigits, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =]
[), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =]
[., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, x, ., newInstance, (]
[., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, x, ., newInstance, (]
[DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, x, ., newInstance, (, x, ., getZero, (, ), ), ;]
[DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, x, ., newInstance, (, x, ., getZero, (, ), ), ;]
[;, final, Dfp, result, =, x, ., newInstance, (, x, ., getZero, (, ), ), ;, result, ., nans, =]
[;, final, Dfp, result, =, x, ., newInstance, (, x, ., getZero, (, ), ), ;, result, ., nans, =]
[x, ., newInstance, (, x, ., getZero, (, ), ), ;, result, ., nans, =, Dfp, ., QNAN, ;, return]
[x, ., newInstance, (, x, ., getZero, (, ), ), ;, result, ., nans, =, Dfp, ., QNAN, ;, return]
[x, ., getZero, (, ), ), ;, result, ., nans, =, Dfp, ., QNAN, ;, return, x, ., dotrap, (]
[x, ., getZero, (, ), ), ;, result, ., nans, =, Dfp, ., QNAN, ;, return, x, ., dotrap, (]
[), ), ;, result, ., nans, =, Dfp, ., QNAN, ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,]
[;, result, ., nans, =, Dfp, ., QNAN, ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,]
[., nans, =, Dfp, ., QNAN, ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,]
[x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, result, ), ;, }, final, Dfp, zero, =]
[x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, result, ), ;, }, final, Dfp, zero, =]
[x, ,, result, ), ;, }, final, Dfp, zero, =, x, ., getZero, (, ), ;, final, Dfp, one, =]
[x, ,, result, ), ;, }, final, Dfp, zero, =, x, ., getZero, (, ), ;, final, Dfp, one, =]
[x, ., getZero, (, ), ;, final, Dfp, one, =, x, ., getOne, (, ), ;, final, Dfp, two, =]
[x, ., getZero, (, ), ;, final, Dfp, one, =, x, ., getOne, (, ), ;, final, Dfp, two, =]
[=, x, ., getOne, (, ), ;, final, Dfp, two, =, x, ., getTwo, (, ), ;, boolean, invert, =]
[final, Dfp, two, =, x, ., getTwo, (, ), ;, boolean, invert, =, false, ;, int, ui, ;, if, (]
[final, Dfp, two, =, x, ., getTwo, (, ), ;, boolean, invert, =, false, ;, int, ui, ;, if, (]
[x, ., getTwo, (, ), ;, boolean, invert, =, false, ;, int, ui, ;, if, (, y, ., equals, (]
[;, boolean, invert, =, false, ;, int, ui, ;, if, (, y, ., equals, (, zero, ), ), {, return]
[;, boolean, invert, =, false, ;, int, ui, ;, if, (, y, ., equals, (, zero, ), ), {, return]
[false, ;, int, ui, ;, if, (, y, ., equals, (, zero, ), ), {, return, x, ., newInstance, (]
[(, y, ., equals, (, zero, ), ), {, return, x, ., newInstance, (, one, ), ;, }, if, (]
[(, y, ., equals, (, zero, ), ), {, return, x, ., newInstance, (, one, ), ;, }, if, (]
[(, zero, ), ), {, return, x, ., newInstance, (, one, ), ;, }, if, (, y, ., equals, (]
[x, ., newInstance, (, one, ), ;, }, if, (, y, ., equals, (, one, ), ), {, if, (]
[x, ., newInstance, (, one, ), ;, }, if, (, y, ., equals, (, one, ), ), {, if, (]
[}, if, (, y, ., equals, (, one, ), ), {, if, (, x, ., isNaN, (, ), ), {]
[}, if, (, y, ., equals, (, one, ), ), {, if, (, x, ., isNaN, (, ), ), {]
[}, if, (, y, ., equals, (, one, ), ), {, if, (, x, ., isNaN, (, ), ), {]
[), ), {, if, (, x, ., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[), ), {, if, (, x, ., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,]
[), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,]
[), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ), ;, }, return]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ), ;, }, return, x, ;, }, if, (]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ), ;, }, return, x, ;, }, if, (]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ), ;, }, return, x, ;, }, if, (]
[POW_TRAP, ,, x, ,, x, ), ;, }, return, x, ;, }, if, (, x, ., isNaN, (, ), ||]
[POW_TRAP, ,, x, ,, x, ), ;, }, return, x, ;, }, if, (, x, ., isNaN, (, ), ||]
[}, return, x, ;, }, if, (, x, ., isNaN, (, ), ||, y, ., isNaN, (, ), ), {]
[}, return, x, ;, }, if, (, x, ., isNaN, (, ), ||, y, ., isNaN, (, ), ), {]
[}, return, x, ;, }, if, (, x, ., isNaN, (, ), ||, y, ., isNaN, (, ), ), {]
[., isNaN, (, ), ||, y, ., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[., isNaN, (, ), ||, y, ., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,]
[), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,]
[FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (]
[return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, )]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,]
[x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (]
[x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (]
[newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (, x, ., equals, (]
[,, Dfp, ., QNAN, ), ), ;, }, if, (, x, ., equals, (, zero, ), ), {, if, (]
[,, Dfp, ., QNAN, ), ), ;, }, if, (, x, ., equals, (, zero, ), ), {, if, (]
[,, Dfp, ., QNAN, ), ), ;, }, if, (, x, ., equals, (, zero, ), ), {, if, (]
[), ), ;, }, if, (, x, ., equals, (, zero, ), ), {, if, (, Dfp, ., copysign, (]
[;, }, if, (, x, ., equals, (, zero, ), ), {, if, (, Dfp, ., copysign, (, one, ,]
[., equals, (, zero, ), ), {, if, (, Dfp, ., copysign, (, one, ,, x, ), ., greaterThan, (]
[{, if, (, Dfp, ., copysign, (, one, ,, x, ), ., greaterThan, (, zero, ), ), {, if, (]
[{, if, (, Dfp, ., copysign, (, one, ,, x, ), ., greaterThan, (, zero, ), ), {, if, (]
[., copysign, (, one, ,, x, ), ., greaterThan, (, zero, ), ), {, if, (, y, ., greaterThan, (]
[x, ), ., greaterThan, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[x, ), ., greaterThan, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[(, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (]
[y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return]
[y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return]
[zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (]
[zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (]
[return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (]
[newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, )]
[zero, ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,]
[zero, ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (]
[1, ,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (, y, ., classify, (, ), ==]
[1, ,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (, y, ., classify, (, ), ==]
[INFINITE, ), ), ;, }, }, else, {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&]
[INFINITE, ), ), ;, }, }, else, {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&]
[INFINITE, ), ), ;, }, }, else, {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&]
[if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (]
[., classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&]
[classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !]
[classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !]
[classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !]
[Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (]
[., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (]
[(, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (]
[(, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (]
[!, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan, (]
[two, ), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[two, ), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[(, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (]
[(, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (]
[zero, ), ), {, return, x, ., newInstance, (, zero, ., negate, (, ), ), ;, }, else, {, return]
[zero, ), ), {, return, x, ., newInstance, (, zero, ., negate, (, ), ), ;, }, else, {, return]
[return, x, ., newInstance, (, zero, ., negate, (, ), ), ;, }, else, {, return, x, ., newInstance, (]
[return, x, ., newInstance, (, zero, ., negate, (, ), ), ;, }, else, {, return, x, ., newInstance, (]
[(, zero, ., negate, (, ), ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (]
[negate, (, ), ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, )]
[(, ), ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), -]
[), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), -, 1, ,]
[), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), -, 1, ,]
[newInstance, (, (, byte, ), -, 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (]
[newInstance, (, (, byte, ), -, 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (]
[), -, 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (, y, ., greaterThan, (]
[., INFINITE, ), ), ;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[., INFINITE, ), ), ;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (]
[y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return]
[y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return]
[zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (]
[zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (]
[return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (]
[newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, )]
[zero, ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,]
[zero, ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, }, }, if, (]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, }, }, if, (]
[byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, }, }, if, (, x, ., lessThan, (]
[Dfp, ., INFINITE, ), ), ;, }, }, }, }, if, (, x, ., lessThan, (, zero, ), ), {]
[INFINITE, ), ), ;, }, }, }, }, if, (, x, ., lessThan, (, zero, ), ), {, x, =]
[INFINITE, ), ), ;, }, }, }, }, if, (, x, ., lessThan, (, zero, ), ), {, x, =]
[}, }, if, (, x, ., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, ), ;]
[if, (, x, ., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, ), ;, invert, =]
[(, zero, ), ), {, x, =, x, ., negate, (, ), ;, invert, =, true, ;, }, if, (]
[(, zero, ), ), {, x, =, x, ., negate, (, ), ;, invert, =, true, ;, }, if, (]
[(, zero, ), ), {, x, =, x, ., negate, (, ), ;, invert, =, true, ;, }, if, (]
[{, x, =, x, ., negate, (, ), ;, invert, =, true, ;, }, if, (, x, ., greaterThan, (]
[x, ., negate, (, ), ;, invert, =, true, ;, }, if, (, x, ., greaterThan, (, one, ), &&]
[x, ., negate, (, ), ;, invert, =, true, ;, }, if, (, x, ., greaterThan, (, one, ), &&]
[x, ., negate, (, ), ;, invert, =, true, ;, }, if, (, x, ., greaterThan, (, one, ), &&]
[invert, =, true, ;, }, if, (, x, ., greaterThan, (, one, ), &&, y, ., classify, (, ), ==]
[invert, =, true, ;, }, if, (, x, ., greaterThan, (, one, ), &&, y, ., classify, (, ), ==]
[x, ., greaterThan, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (]
[x, ., greaterThan, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (]
[one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (]
[classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[INFINITE, ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, y, ;, }, else, {, return]
[INFINITE, ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, y, ;, }, else, {, return]
[(, y, ., greaterThan, (, zero, ), ), {, return, y, ;, }, else, {, return, x, ., newInstance, (]
[), {, return, y, ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, if, (]
[), {, return, y, ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, if, (]
[), {, return, y, ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, if, (]
[;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, if, (, x, ., lessThan, (]
[{, return, x, ., newInstance, (, zero, ), ;, }, }, if, (, x, ., lessThan, (, one, ), &&]
[{, return, x, ., newInstance, (, zero, ), ;, }, }, if, (, x, ., lessThan, (, one, ), &&]
[{, return, x, ., newInstance, (, zero, ), ;, }, }, if, (, x, ., lessThan, (, one, ), &&]
[zero, ), ;, }, }, if, (, x, ., lessThan, (, one, ), &&, y, ., classify, (, ), ==]
[zero, ), ;, }, }, if, (, x, ., lessThan, (, one, ), &&, y, ., classify, (, ), ==]
[x, ., lessThan, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (]
[x, ., lessThan, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (]
[one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (]
[classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (]
[y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return]
[y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return]
[zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (]
[zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (]
[return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, Dfp, ., copysign, (]
[., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, Dfp, ., copysign, (, y, ,]
[{, return, x, ., newInstance, (, Dfp, ., copysign, (, y, ,, one, ), ), ;, }, }, if, (]
[{, return, x, ., newInstance, (, Dfp, ., copysign, (, y, ,, one, ), ), ;, }, }, if, (]
[{, return, x, ., newInstance, (, Dfp, ., copysign, (, y, ,, one, ), ), ;, }, }, if, (]
[newInstance, (, Dfp, ., copysign, (, y, ,, one, ), ), ;, }, }, if, (, x, ., equals, (]
[., copysign, (, y, ,, one, ), ), ;, }, }, if, (, x, ., equals, (, one, ), &&]
[., copysign, (, y, ,, one, ), ), ;, }, }, if, (, x, ., equals, (, one, ), &&]
[., copysign, (, y, ,, one, ), ), ;, }, }, if, (, x, ., equals, (, one, ), &&]
[), ), ;, }, }, if, (, x, ., equals, (, one, ), &&, y, ., classify, (, ), ==]
[), ), ;, }, }, if, (, x, ., equals, (, one, ), &&, y, ., classify, (, ), ==]
[if, (, x, ., equals, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {]
[if, (, x, ., equals, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {]
[if, (, x, ., equals, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {]
[&&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[&&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[==, Dfp, ., INFINITE, ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[==, Dfp, ., INFINITE, ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,]
[), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,]
[FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (]
[return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, )]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,]
[x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (]
[x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (]
[x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (]
[(, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (, x, ., classify, (, ), ==]
[(, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (, x, ., classify, (, ), ==]
[QNAN, ), ), ;, }, if, (, x, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (]
[if, (, x, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, invert, ), {, if, (]
[if, (, x, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, invert, ), {, if, (]
[if, (, x, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, invert, ), {, if, (]
[if, (, x, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, invert, ), {, if, (]
[if, (, x, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, invert, ), {, if, (]
[), ==, Dfp, ., INFINITE, ), {, if, (, invert, ), {, if, (, y, ., classify, (, ), ==]
[), ==, Dfp, ., INFINITE, ), {, if, (, invert, ), {, if, (, y, ., classify, (, ), ==]
[INFINITE, ), {, if, (, invert, ), {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&]
[INFINITE, ), {, if, (, invert, ), {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&]
[INFINITE, ), {, if, (, invert, ), {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&]
[if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (]
[., classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&]
[classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !]
[classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !]
[classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !]
[Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (]
[., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (]
[(, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (]
[(, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (]
[!, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan, (]
[two, ), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[two, ), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[(, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (]
[(, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (]
[{, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance, (]
[y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, )]
[., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), -]
[(, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), -, 1, ,]
[(, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), -, 1, ,]
[x, ., newInstance, (, (, byte, ), -, 1, ,, Dfp, ., INFINITE, ), ), ;, }, else, {, return]
[x, ., newInstance, (, (, byte, ), -, 1, ,, Dfp, ., INFINITE, ), ), ;, }, else, {, return]
[(, byte, ), -, 1, ,, Dfp, ., INFINITE, ), ), ;, }, else, {, return, x, ., newInstance, (]
[(, byte, ), -, 1, ,, Dfp, ., INFINITE, ), ), ;, }, else, {, return, x, ., newInstance, (]
[else, {, return, x, ., newInstance, (, zero, ., negate, (, ), ), ;, }, }, else, {, if, (]
[else, {, return, x, ., newInstance, (, zero, ., negate, (, ), ), ;, }, }, else, {, if, (]
[., newInstance, (, zero, ., negate, (, ), ), ;, }, }, else, {, if, (, y, ., greaterThan, (]
[negate, (, ), ), ;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[negate, (, ), ), ;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (]
[;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (]
[{, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance, (]
[y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, )]
[greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,]
[greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,]
[(, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, else, {, return]
[(, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, else, {, return]
[(, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, else, {, return, x, ., newInstance, (]
[), ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, else, {, if, (]
[), ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, else, {, if, (]
[{, return, x, ., newInstance, (, zero, ), ;, }, }, }, else, {, if, (, y, ., greaterThan, (]
[(, zero, ), ;, }, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[}, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ;, }, else, {, return]
[}, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ;, }, else, {, return]
[(, y, ., greaterThan, (, zero, ), ), {, return, x, ;, }, else, {, return, x, ., newInstance, (]
[{, return, x, ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, if, (]
[{, return, x, ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, if, (]
[x, ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, if, (, invert, &&]
[;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, if, (, invert, &&, !]
[;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, if, (, invert, &&, !]
[;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, if, (, invert, &&, !]
[(, zero, ), ;, }, }, }, if, (, invert, &&, !, y, ., rint, (, ), ., equals, (]
[}, }, }, if, (, invert, &&, !, y, ., rint, (, ), ., equals, (, y, ), ), {]
[}, }, }, if, (, invert, &&, !, y, ., rint, (, ), ., equals, (, y, ), ), {]
[}, }, }, if, (, invert, &&, !, y, ., rint, (, ), ., equals, (, y, ), ), {]
[y, ., rint, (, ), ., equals, (, y, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[y, ., rint, (, ), ., equals, (, y, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[equals, (, y, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[equals, (, y, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,]
[), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,]
[FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (]
[return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, )]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, Dfp, r, ;, if, (]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, Dfp, r, ;, if, (]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, Dfp, r, ;, if, (]
[byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, Dfp, r, ;, if, (, y, ., lessThan, (]
[byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, Dfp, r, ;, if, (, y, ., lessThan, (]
[Dfp, ., QNAN, ), ), ;, }, Dfp, r, ;, if, (, y, ., lessThan, (, x, ., newInstance, (]
[), ;, }, Dfp, r, ;, if, (, y, ., lessThan, (, x, ., newInstance, (, 100000000, ), ), &&]
[), ;, }, Dfp, r, ;, if, (, y, ., lessThan, (, x, ., newInstance, (, 100000000, ), ), &&]
[r, ;, if, (, y, ., lessThan, (, x, ., newInstance, (, 100000000, ), ), &&, y, ., greaterThan, (]
[r, ;, if, (, y, ., lessThan, (, x, ., newInstance, (, 100000000, ), ), &&, y, ., greaterThan, (]
[y, ., lessThan, (, x, ., newInstance, (, 100000000, ), ), &&, y, ., greaterThan, (, x, ., newInstance, (]
[., lessThan, (, x, ., newInstance, (, 100000000, ), ), &&, y, ., greaterThan, (, x, ., newInstance, (, -]
[), &&, y, ., greaterThan, (, x, ., newInstance, (, -, 100000000, ), ), ), {, final, Dfp, u, =]
[), &&, y, ., greaterThan, (, x, ., newInstance, (, -, 100000000, ), ), ), {, final, Dfp, u, =]
[x, ., newInstance, (, -, 100000000, ), ), ), {, final, Dfp, u, =, y, ., rint, (, ), ;]
[newInstance, (, -, 100000000, ), ), ), {, final, Dfp, u, =, y, ., rint, (, ), ;, ui, =]
[newInstance, (, -, 100000000, ), ), ), {, final, Dfp, u, =, y, ., rint, (, ), ;, ui, =]
[u, =, y, ., rint, (, ), ;, ui, =, u, ., intValue, (, ), ;, final, Dfp, v, =]
[u, =, y, ., rint, (, ), ;, ui, =, u, ., intValue, (, ), ;, final, Dfp, v, =]
[rint, (, ), ;, ui, =, u, ., intValue, (, ), ;, final, Dfp, v, =, y, ., subtract, (]
[=, u, ., intValue, (, ), ;, final, Dfp, v, =, y, ., subtract, (, u, ), ;, if, (]
[=, u, ., intValue, (, ), ;, final, Dfp, v, =, y, ., subtract, (, u, ), ;, if, (]
[(, ), ;, final, Dfp, v, =, y, ., subtract, (, u, ), ;, if, (, v, ., unequal, (]
[., subtract, (, u, ), ;, if, (, v, ., unequal, (, zero, ), ), {, final, Dfp, a, =]
[., subtract, (, u, ), ;, if, (, v, ., unequal, (, zero, ), ), {, final, Dfp, a, =]
[), ;, if, (, v, ., unequal, (, zero, ), ), {, final, Dfp, a, =, v, ., multiply, (]
[if, (, v, ., unequal, (, zero, ), ), {, final, Dfp, a, =, v, ., multiply, (, log, (]
[), {, final, Dfp, a, =, v, ., multiply, (, log, (, x, ), ), ;, final, Dfp, b, =]
[), {, final, Dfp, a, =, v, ., multiply, (, log, (, x, ), ), ;, final, Dfp, b, =]
[), {, final, Dfp, a, =, v, ., multiply, (, log, (, x, ), ), ;, final, Dfp, b, =]
[a, =, v, ., multiply, (, log, (, x, ), ), ;, final, Dfp, b, =, a, ., divide, (]
[a, =, v, ., multiply, (, log, (, x, ), ), ;, final, Dfp, b, =, a, ., divide, (]
[a, =, v, ., multiply, (, log, (, x, ), ), ;, final, Dfp, b, =, a, ., divide, (]
[(, x, ., getField, (, ), ., getLn2, (, ), ), ., rint, (, ), ;, final, Dfp, c, =]
[(, x, ., getField, (, ), ., getLn2, (, ), ), ., rint, (, ), ;, final, Dfp, c, =]
[(, ), ., getLn2, (, ), ), ., rint, (, ), ;, final, Dfp, c, =, a, ., subtract, (]
[(, ), ., getLn2, (, ), ), ., rint, (, ), ;, final, Dfp, c, =, a, ., subtract, (]
[(, ), ), ., rint, (, ), ;, final, Dfp, c, =, a, ., subtract, (, b, ., multiply, (]
[(, ), ), ., rint, (, ), ;, final, Dfp, c, =, a, ., subtract, (, b, ., multiply, (]
[(, ), ), ., rint, (, ), ;, final, Dfp, c, =, a, ., subtract, (, b, ., multiply, (]
[a, ., subtract, (, b, ., multiply, (, x, ., getField, (, ), ., getLn2, (, ), ), ), ;]
[subtract, (, b, ., multiply, (, x, ., getField, (, ), ., getLn2, (, ), ), ), ;, r, =]
[b, ., multiply, (, x, ., getField, (, ), ., getLn2, (, ), ), ), ;, r, =, splitPow, (]
[multiply, (, x, ., getField, (, ), ., getLn2, (, ), ), ), ;, r, =, splitPow, (, split, (]
[., getField, (, ), ., getLn2, (, ), ), ), ;, r, =, splitPow, (, split, (, x, ), ,]
[), ., getLn2, (, ), ), ), ;, r, =, splitPow, (, split, (, x, ), ,, ui, ), ;]
[getLn2, (, ), ), ), ;, r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, r, =]
[getLn2, (, ), ), ), ;, r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, r, =]
[), ;, r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, r, =, r, ., multiply, (]
[r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, r, =, r, ., multiply, (, pow, (]
[splitPow, (, split, (, x, ), ,, ui, ), ;, r, =, r, ., multiply, (, pow, (, two, ,]
[splitPow, (, split, (, x, ), ,, ui, ), ;, r, =, r, ., multiply, (, pow, (, two, ,]
[), ;, r, =, r, ., multiply, (, pow, (, two, ,, b, ., intValue, (, ), ), ), ;]
[r, =, r, ., multiply, (, pow, (, two, ,, b, ., intValue, (, ), ), ), ;, r, =]
[r, =, r, ., multiply, (, pow, (, two, ,, b, ., intValue, (, ), ), ), ;, r, =]
[multiply, (, pow, (, two, ,, b, ., intValue, (, ), ), ), ;, r, =, r, ., multiply, (]
[pow, (, two, ,, b, ., intValue, (, ), ), ), ;, r, =, r, ., multiply, (, exp, (]
[(, ), ), ), ;, r, =, r, ., multiply, (, exp, (, c, ), ), ;, }, else, {]
[), ), ;, r, =, r, ., multiply, (, exp, (, c, ), ), ;, }, else, {, r, =]
[;, r, =, r, ., multiply, (, exp, (, c, ), ), ;, }, else, {, r, =, splitPow, (]
[=, r, ., multiply, (, exp, (, c, ), ), ;, }, else, {, r, =, splitPow, (, split, (]
[multiply, (, exp, (, c, ), ), ;, }, else, {, r, =, splitPow, (, split, (, x, ), ,]
[;, }, else, {, r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, }, }, else, {]
[else, {, r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, }, }, else, {, r, =]
[r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, }, }, else, {, r, =, exp, (]
[r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, }, }, else, {, r, =, exp, (]
[splitPow, (, split, (, x, ), ,, ui, ), ;, }, }, else, {, r, =, exp, (, log, (]
[), ,, ui, ), ;, }, }, else, {, r, =, exp, (, log, (, x, ), ., multiply, (]
[else, {, r, =, exp, (, log, (, x, ), ., multiply, (, y, ), ), ;, }, if, (]
[else, {, r, =, exp, (, log, (, x, ), ., multiply, (, y, ), ), ;, }, if, (]
[else, {, r, =, exp, (, log, (, x, ), ., multiply, (, y, ), ), ;, }, if, (]
[r, =, exp, (, log, (, x, ), ., multiply, (, y, ), ), ;, }, if, (, invert, &&]
[r, =, exp, (, log, (, x, ), ., multiply, (, y, ), ), ;, }, if, (, invert, &&]
[r, =, exp, (, log, (, x, ), ., multiply, (, y, ), ), ;, }, if, (, invert, &&]
[., multiply, (, y, ), ), ;, }, if, (, invert, &&, y, ., rint, (, ), ., equals, (]
[y, ), ), ;, }, if, (, invert, &&, y, ., rint, (, ), ., equals, (, y, ), &&]
[), ), ;, }, if, (, invert, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !]
[), ), ;, }, if, (, invert, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !]
[), ), ;, }, if, (, invert, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !]
[if, (, invert, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (]
[., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (]
[., equals, (, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {]
[(, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, r, =]
[(, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, r, =]
[(, two, ), ., equals, (, zero, ), ), {, r, =, r, ., negate, (, ), ;, }, return]
[(, two, ), ., equals, (, zero, ), ), {, r, =, r, ., negate, (, ), ;, }, return]
[equals, (, zero, ), ), {, r, =, r, ., negate, (, ), ;, }, return, x, ., newInstance, (]
[newInstance, (, r, ), ;, }, protected, static, Dfp, sinInternal, (, Dfp, a, [, ], ), {, Dfp, c, =]
[newInstance, (, r, ), ;, }, protected, static, Dfp, sinInternal, (, Dfp, a, [, ], ), {, Dfp, c, =]
[newInstance, (, r, ), ;, }, protected, static, Dfp, sinInternal, (, Dfp, a, [, ], ), {, Dfp, c, =]
[r, ), ;, }, protected, static, Dfp, sinInternal, (, Dfp, a, [, ], ), {, Dfp, c, =, a, []
[static, Dfp, sinInternal, (, Dfp, a, [, ], ), {, Dfp, c, =, a, [, 0, ], ., add, (]
[static, Dfp, sinInternal, (, Dfp, a, [, ], ), {, Dfp, c, =, a, [, 0, ], ., add, (]
[sinInternal, (, Dfp, a, [, ], ), {, Dfp, c, =, a, [, 0, ], ., add, (, a, []
[{, Dfp, c, =, a, [, 0, ], ., add, (, a, [, 1, ], ), ;, Dfp, y, =]
[c, =, a, [, 0, ], ., add, (, a, [, 1, ], ), ;, Dfp, y, =, c, ;]
[a, [, 0, ], ., add, (, a, [, 1, ], ), ;, Dfp, y, =, c, ;, c, =]
[a, [, 0, ], ., add, (, a, [, 1, ], ), ;, Dfp, y, =, c, ;, c, =]
[., add, (, a, [, 1, ], ), ;, Dfp, y, =, c, ;, c, =, c, ., multiply, (]
[], ), ;, Dfp, y, =, c, ;, c, =, c, ., multiply, (, c, ), ;, Dfp, x, =]
[=, c, ;, c, =, c, ., multiply, (, c, ), ;, Dfp, x, =, y, ;, Dfp, fact, =]
[=, c, ;, c, =, c, ., multiply, (, c, ), ;, Dfp, x, =, y, ;, Dfp, fact, =]
[=, c, ;, c, =, c, ., multiply, (, c, ), ;, Dfp, x, =, y, ;, Dfp, fact, =]
[;, c, =, c, ., multiply, (, c, ), ;, Dfp, x, =, y, ;, Dfp, fact, =, a, []
[Dfp, x, =, y, ;, Dfp, fact, =, a, [, 0, ], ., getOne, (, ), ;, Dfp, py, =]
[y, ;, Dfp, fact, =, a, [, 0, ], ., getOne, (, ), ;, Dfp, py, =, new, Dfp, (]
[], ., getOne, (, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =]
[getOne, (, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 3, ;]
[getOne, (, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 3, ;]
[), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 3, ;, i, <]
[Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 3, ;, i, <, 90, ;]
[=, new, Dfp, (, y, ), ;, for, (, int, i, =, 3, ;, i, <, 90, ;, i, +=]
[(, y, ), ;, for, (, int, i, =, 3, ;, i, <, 90, ;, i, +=, 2, ), {]
[), ;, for, (, int, i, =, 3, ;, i, <, 90, ;, i, +=, 2, ), {, x, =]
[), ;, for, (, int, i, =, 3, ;, i, <, 90, ;, i, +=, 2, ), {, x, =]
[int, i, =, 3, ;, i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (]
[3, ;, i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;]
[i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =]
[i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =]
[2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;]
[{, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =]
[{, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =]
[., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (]
[., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (]
[multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (]
[multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (]
[c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -]
[x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, ), *]
[., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;]
[(, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;, y, =]
[(, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;, y, =]
[=, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;, y, =, y, ., add, (]
[=, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;, y, =, y, ., add, (]
[(, (, i, -, 1, ), *, i, ), ;, y, =, y, ., add, (, x, ., multiply, (]
[*, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (]
[*, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (]
[y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, ., equals, (]
[., multiply, (, fact, ), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }]
[(, fact, ), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return]
[}, return, y, ;, }, protected, static, Dfp, cosInternal, (, Dfp, a, [, ], ), {, final, Dfp, one, =]
[}, return, y, ;, }, protected, static, Dfp, cosInternal, (, Dfp, a, [, ], ), {, final, Dfp, one, =]
[}, return, y, ;, }, protected, static, Dfp, cosInternal, (, Dfp, a, [, ], ), {, final, Dfp, one, =]
[y, ;, }, protected, static, Dfp, cosInternal, (, Dfp, a, [, ], ), {, final, Dfp, one, =, a, []
[[, ], ), {, final, Dfp, one, =, a, [, 0, ], ., getOne, (, ), ;, Dfp, x, =]
[Dfp, one, =, a, [, 0, ], ., getOne, (, ), ;, Dfp, x, =, one, ;, Dfp, y, =]
[0, ], ., getOne, (, ), ;, Dfp, x, =, one, ;, Dfp, y, =, one, ;, Dfp, c, =]
[0, ], ., getOne, (, ), ;, Dfp, x, =, one, ;, Dfp, y, =, one, ;, Dfp, c, =]
[0, ], ., getOne, (, ), ;, Dfp, x, =, one, ;, Dfp, y, =, one, ;, Dfp, c, =]
[., getOne, (, ), ;, Dfp, x, =, one, ;, Dfp, y, =, one, ;, Dfp, c, =, a, []
[Dfp, x, =, one, ;, Dfp, y, =, one, ;, Dfp, c, =, a, [, 0, ], ., add, (]
[Dfp, x, =, one, ;, Dfp, y, =, one, ;, Dfp, c, =, a, [, 0, ], ., add, (]
[=, one, ;, Dfp, y, =, one, ;, Dfp, c, =, a, [, 0, ], ., add, (, a, []
[y, =, one, ;, Dfp, c, =, a, [, 0, ], ., add, (, a, [, 1, ], ), ;]
[one, ;, Dfp, c, =, a, [, 0, ], ., add, (, a, [, 1, ], ), ;, c, =]
[one, ;, Dfp, c, =, a, [, 0, ], ., add, (, a, [, 1, ], ), ;, c, =]
[=, a, [, 0, ], ., add, (, a, [, 1, ], ), ;, c, =, c, ., multiply, (]
[add, (, a, [, 1, ], ), ;, c, =, c, ., multiply, (, c, ), ;, Dfp, fact, =]
[], ), ;, c, =, c, ., multiply, (, c, ), ;, Dfp, fact, =, one, ;, Dfp, py, =]
[c, =, c, ., multiply, (, c, ), ;, Dfp, fact, =, one, ;, Dfp, py, =, new, Dfp, (]
[;, Dfp, fact, =, one, ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =]
[fact, =, one, ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 2, ;]
[fact, =, one, ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 2, ;]
[one, ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 2, ;, i, <]
[Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 2, ;, i, <, 90, ;]
[=, new, Dfp, (, y, ), ;, for, (, int, i, =, 2, ;, i, <, 90, ;, i, +=]
[(, y, ), ;, for, (, int, i, =, 2, ;, i, <, 90, ;, i, +=, 2, ), {]
[), ;, for, (, int, i, =, 2, ;, i, <, 90, ;, i, +=, 2, ), {, x, =]
[), ;, for, (, int, i, =, 2, ;, i, <, 90, ;, i, +=, 2, ), {, x, =]
[int, i, =, 2, ;, i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (]
[2, ;, i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;]
[i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =]
[i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =]
[2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;]
[{, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =]
[{, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =]
[., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (]
[., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (]
[multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (]
[multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (]
[c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -]
[x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, ), *]
[., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;]
[(, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;, y, =]
[(, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;, y, =]
[=, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;, y, =, y, ., add, (]
[=, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;, y, =, y, ., add, (]
[(, (, i, -, 1, ), *, i, ), ;, y, =, y, ., add, (, x, ., multiply, (]
[*, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (]
[*, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (]
[y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, ., equals, (]
[., multiply, (, fact, ), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }]
[(, fact, ), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return]
[;, }, return, y, ;, }, public, static, Dfp, sin, (, final, Dfp, a, ), {, final, Dfp, pi, =]
[;, }, return, y, ;, }, public, static, Dfp, sin, (, final, Dfp, a, ), {, final, Dfp, pi, =]
[;, }, return, y, ;, }, public, static, Dfp, sin, (, final, Dfp, a, ), {, final, Dfp, pi, =]
[), {, final, Dfp, pi, =, a, ., getField, (, ), ., getPi, (, ), ;, final, Dfp, zero, =]
[), {, final, Dfp, pi, =, a, ., getField, (, ), ., getPi, (, ), ;, final, Dfp, zero, =]
[), {, final, Dfp, pi, =, a, ., getField, (, ), ., getPi, (, ), ;, final, Dfp, zero, =]
[(, ), ;, final, Dfp, zero, =, a, ., getField, (, ), ., getZero, (, ), ;, boolean, neg, =]
[zero, =, a, ., getField, (, ), ., getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =]
[zero, =, a, ., getField, (, ), ., getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =]
[getField, (, ), ., getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =, a, ., remainder, (]
[getField, (, ), ., getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =, a, ., remainder, (]
[getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =, a, ., remainder, (, pi, ., multiply, (]
[=, false, ;, Dfp, x, =, a, ., remainder, (, pi, ., multiply, (, 2, ), ), ;, if, (]
[=, false, ;, Dfp, x, =, a, ., remainder, (, pi, ., multiply, (, 2, ), ), ;, if, (]
[x, =, a, ., remainder, (, pi, ., multiply, (, 2, ), ), ;, if, (, x, ., lessThan, (]
[remainder, (, pi, ., multiply, (, 2, ), ), ;, if, (, x, ., lessThan, (, zero, ), ), {]
[pi, ., multiply, (, 2, ), ), ;, if, (, x, ., lessThan, (, zero, ), ), {, x, =]
[pi, ., multiply, (, 2, ), ), ;, if, (, x, ., lessThan, (, zero, ), ), {, x, =]
[), ;, if, (, x, ., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, ), ;]
[if, (, x, ., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, ), ;, neg, =]
[(, zero, ), ), {, x, =, x, ., negate, (, ), ;, neg, =, true, ;, }, if, (]
[(, zero, ), ), {, x, =, x, ., negate, (, ), ;, neg, =, true, ;, }, if, (]
[{, x, =, x, ., negate, (, ), ;, neg, =, true, ;, }, if, (, x, ., greaterThan, (]
[{, x, =, x, ., negate, (, ), ;, neg, =, true, ;, }, if, (, x, ., greaterThan, (]
[., negate, (, ), ;, neg, =, true, ;, }, if, (, x, ., greaterThan, (, pi, ., divide, (]
[neg, =, true, ;, }, if, (, x, ., greaterThan, (, pi, ., divide, (, 2, ), ), ), {]
[true, ;, }, if, (, x, ., greaterThan, (, pi, ., divide, (, 2, ), ), ), {, x, =]
[true, ;, }, if, (, x, ., greaterThan, (, pi, ., divide, (, 2, ), ), ), {, x, =]
[(, x, ., greaterThan, (, pi, ., divide, (, 2, ), ), ), {, x, =, pi, ., subtract, (]
[2, ), ), ), {, x, =, pi, ., subtract, (, x, ), ;, }, Dfp, y, ;, if, (]
[2, ), ), ), {, x, =, pi, ., subtract, (, x, ), ;, }, Dfp, y, ;, if, (]
[{, x, =, pi, ., subtract, (, x, ), ;, }, Dfp, y, ;, if, (, x, ., lessThan, (]
[{, x, =, pi, ., subtract, (, x, ), ;, }, Dfp, y, ;, if, (, x, ., lessThan, (]
[., subtract, (, x, ), ;, }, Dfp, y, ;, if, (, x, ., lessThan, (, pi, ., divide, (]
[if, (, x, ., lessThan, (, pi, ., divide, (, 4, ), ), ), {, Dfp, c, [, ], =]
[., lessThan, (, pi, ., divide, (, 4, ), ), ), {, Dfp, c, [, ], =, new, Dfp, []
[pi, ., divide, (, 4, ), ), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;]
[pi, ., divide, (, 4, ), ), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;]
[divide, (, 4, ), ), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, []
[), ), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =]
[), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =, x, ;]
[), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =, x, ;]
[Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =, x, ;, c, []
[], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =, x, ;, c, [, 1, ], =]
[new, Dfp, [, 2, ], ;, c, [, 0, ], =, x, ;, c, [, 1, ], =, zero, ;]
[[, 2, ], ;, c, [, 0, ], =, x, ;, c, [, 1, ], =, zero, ;, y, =]
[], ;, c, [, 0, ], =, x, ;, c, [, 1, ], =, zero, ;, y, =, sinInternal, (]
[c, [, 0, ], =, x, ;, c, [, 1, ], =, zero, ;, y, =, sinInternal, (, split, (]
[;, y, =, sinInternal, (, split, (, x, ), ), ;, }, else, {, final, Dfp, c, [, ], =]
[sinInternal, (, split, (, x, ), ), ;, }, else, {, final, Dfp, c, [, ], =, new, Dfp, []
[else, {, final, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, final, Dfp, [, ], piSplit, =]
[else, {, final, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, final, Dfp, [, ], piSplit, =]
[else, {, final, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, final, Dfp, [, ], piSplit, =]
[[, 2, ], ;, final, Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;]
[[, 2, ], ;, final, Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;]
[], ;, final, Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, []
[Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =]
[Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =]
[Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =]
[Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =]
[], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =, piSplit, []
[getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =, piSplit, [, 0, ], ., divide, (]
[(, ), ;, c, [, 0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (]
[c, [, 0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;]
[c, [, 0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;]
[0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, []
[piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =]
[piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =]
[piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =]
[0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =, piSplit, []
[2, ), ., subtract, (, x, ), ;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (]
[subtract, (, x, ), ;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, ), ;]
[x, ), ;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =]
[;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, cosInternal, (]
[piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, cosInternal, (, c, ), ;, }, if, (]
[], ., divide, (, 2, ), ;, y, =, cosInternal, (, c, ), ;, }, if, (, neg, ), {]
[divide, (, 2, ), ;, y, =, cosInternal, (, c, ), ;, }, if, (, neg, ), {, y, =]
[divide, (, 2, ), ;, y, =, cosInternal, (, c, ), ;, }, if, (, neg, ), {, y, =]
[(, c, ), ;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return]
[(, c, ), ;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return]
[}, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return, a, ., newInstance, (]
[., newInstance, (, y, ), ;, }, public, static, Dfp, cos, (, Dfp, a, ), {, final, Dfp, pi, =]
[., newInstance, (, y, ), ;, }, public, static, Dfp, cos, (, Dfp, a, ), {, final, Dfp, pi, =]
[., newInstance, (, y, ), ;, }, public, static, Dfp, cos, (, Dfp, a, ), {, final, Dfp, pi, =]
[), {, final, Dfp, pi, =, a, ., getField, (, ), ., getPi, (, ), ;, final, Dfp, zero, =]
[), {, final, Dfp, pi, =, a, ., getField, (, ), ., getPi, (, ), ;, final, Dfp, zero, =]
[), {, final, Dfp, pi, =, a, ., getField, (, ), ., getPi, (, ), ;, final, Dfp, zero, =]
[(, ), ;, final, Dfp, zero, =, a, ., getField, (, ), ., getZero, (, ), ;, boolean, neg, =]
[zero, =, a, ., getField, (, ), ., getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =]
[zero, =, a, ., getField, (, ), ., getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =]
[getField, (, ), ., getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =, a, ., remainder, (]
[getField, (, ), ., getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =, a, ., remainder, (]
[getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =, a, ., remainder, (, pi, ., multiply, (]
[=, false, ;, Dfp, x, =, a, ., remainder, (, pi, ., multiply, (, 2, ), ), ;, if, (]
[=, false, ;, Dfp, x, =, a, ., remainder, (, pi, ., multiply, (, 2, ), ), ;, if, (]
[x, =, a, ., remainder, (, pi, ., multiply, (, 2, ), ), ;, if, (, x, ., lessThan, (]
[remainder, (, pi, ., multiply, (, 2, ), ), ;, if, (, x, ., lessThan, (, zero, ), ), {]
[pi, ., multiply, (, 2, ), ), ;, if, (, x, ., lessThan, (, zero, ), ), {, x, =]
[pi, ., multiply, (, 2, ), ), ;, if, (, x, ., lessThan, (, zero, ), ), {, x, =]
[(, x, ., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, ), ;, }, if, (]
[(, x, ., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, ), ;, }, if, (]
[(, zero, ), ), {, x, =, x, ., negate, (, ), ;, }, if, (, x, ., greaterThan, (]
[(, zero, ), ), {, x, =, x, ., negate, (, ), ;, }, if, (, x, ., greaterThan, (]
[{, x, =, x, ., negate, (, ), ;, }, if, (, x, ., greaterThan, (, pi, ., divide, (]
[negate, (, ), ;, }, if, (, x, ., greaterThan, (, pi, ., divide, (, 2, ), ), ), {]
[), ;, }, if, (, x, ., greaterThan, (, pi, ., divide, (, 2, ), ), ), {, x, =]
[), ;, }, if, (, x, ., greaterThan, (, pi, ., divide, (, 2, ), ), ), {, x, =]
[(, x, ., greaterThan, (, pi, ., divide, (, 2, ), ), ), {, x, =, pi, ., subtract, (]
[greaterThan, (, pi, ., divide, (, 2, ), ), ), {, x, =, pi, ., subtract, (, x, ), ;]
[pi, ., divide, (, 2, ), ), ), {, x, =, pi, ., subtract, (, x, ), ;, neg, =]
[{, x, =, pi, ., subtract, (, x, ), ;, neg, =, true, ;, }, Dfp, y, ;, if, (]
[{, x, =, pi, ., subtract, (, x, ), ;, neg, =, true, ;, }, Dfp, y, ;, if, (]
[., subtract, (, x, ), ;, neg, =, true, ;, }, Dfp, y, ;, if, (, x, ., lessThan, (]
[., subtract, (, x, ), ;, neg, =, true, ;, }, Dfp, y, ;, if, (, x, ., lessThan, (]
[), ;, neg, =, true, ;, }, Dfp, y, ;, if, (, x, ., lessThan, (, pi, ., divide, (]
[if, (, x, ., lessThan, (, pi, ., divide, (, 4, ), ), ), {, Dfp, c, [, ], =]
[., lessThan, (, pi, ., divide, (, 4, ), ), ), {, Dfp, c, [, ], =, new, Dfp, []
[pi, ., divide, (, 4, ), ), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;]
[pi, ., divide, (, 4, ), ), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;]
[divide, (, 4, ), ), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, []
[), ), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =]
[), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =, x, ;]
[), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =, x, ;]
[Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =, x, ;, c, []
[], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =, x, ;, c, [, 1, ], =]
[new, Dfp, [, 2, ], ;, c, [, 0, ], =, x, ;, c, [, 1, ], =, zero, ;]
[[, 2, ], ;, c, [, 0, ], =, x, ;, c, [, 1, ], =, zero, ;, y, =]
[], ;, c, [, 0, ], =, x, ;, c, [, 1, ], =, zero, ;, y, =, cosInternal, (]
[], =, zero, ;, y, =, cosInternal, (, c, ), ;, }, else, {, final, Dfp, c, [, ], =]
[;, y, =, cosInternal, (, c, ), ;, }, else, {, final, Dfp, c, [, ], =, new, Dfp, []
[else, {, final, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, final, Dfp, [, ], piSplit, =]
[else, {, final, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, final, Dfp, [, ], piSplit, =]
[else, {, final, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, final, Dfp, [, ], piSplit, =]
[[, 2, ], ;, final, Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;]
[[, 2, ], ;, final, Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;]
[], ;, final, Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, []
[Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =]
[Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =]
[Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =]
[Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =]
[], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =, piSplit, []
[getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =, piSplit, [, 0, ], ., divide, (]
[(, ), ;, c, [, 0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (]
[c, [, 0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;]
[c, [, 0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;]
[0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, []
[piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =]
[piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =]
[piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =]
[0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =, piSplit, []
[2, ), ., subtract, (, x, ), ;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (]
[subtract, (, x, ), ;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, ), ;]
[x, ), ;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =]
[;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, sinInternal, (]
[piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, sinInternal, (, c, ), ;, }, if, (]
[], ., divide, (, 2, ), ;, y, =, sinInternal, (, c, ), ;, }, if, (, neg, ), {]
[divide, (, 2, ), ;, y, =, sinInternal, (, c, ), ;, }, if, (, neg, ), {, y, =]
[divide, (, 2, ), ;, y, =, sinInternal, (, c, ), ;, }, if, (, neg, ), {, y, =]
[(, c, ), ;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return]
[(, c, ), ;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return]
[}, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return, a, ., newInstance, (]
[return, a, ., newInstance, (, y, ), ;, }, public, static, Dfp, tan, (, final, Dfp, a, ), {, return]
[return, a, ., newInstance, (, y, ), ;, }, public, static, Dfp, tan, (, final, Dfp, a, ), {, return]
[., newInstance, (, y, ), ;, }, public, static, Dfp, tan, (, final, Dfp, a, ), {, return, sin, (]
[;, }, public, static, Dfp, tan, (, final, Dfp, a, ), {, return, sin, (, a, ), ., divide, (]
[public, static, Dfp, tan, (, final, Dfp, a, ), {, return, sin, (, a, ), ., divide, (, cos, (]
[cos, (, a, ), ), ;, }, protected, static, Dfp, atanInternal, (, final, Dfp, a, ), {, Dfp, y, =]
[), ), ;, }, protected, static, Dfp, atanInternal, (, final, Dfp, a, ), {, Dfp, y, =, new, Dfp, (]
[Dfp, atanInternal, (, final, Dfp, a, ), {, Dfp, y, =, new, Dfp, (, a, ), ;, Dfp, x, =]
[final, Dfp, a, ), {, Dfp, y, =, new, Dfp, (, a, ), ;, Dfp, x, =, new, Dfp, (]
[y, =, new, Dfp, (, a, ), ;, Dfp, x, =, new, Dfp, (, y, ), ;, Dfp, py, =]
[Dfp, (, a, ), ;, Dfp, x, =, new, Dfp, (, y, ), ;, Dfp, py, =, new, Dfp, (]
[new, Dfp, (, y, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =]
[(, y, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 3, ;]
[(, y, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 3, ;]
[), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 3, ;, i, <]
[Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 3, ;, i, <, 90, ;]
[=, new, Dfp, (, y, ), ;, for, (, int, i, =, 3, ;, i, <, 90, ;, i, +=]
[(, y, ), ;, for, (, int, i, =, 3, ;, i, <, 90, ;, i, +=, 2, ), {]
[), ;, for, (, int, i, =, 3, ;, i, <, 90, ;, i, +=, 2, ), {, x, =]
[), ;, for, (, int, i, =, 3, ;, i, <, 90, ;, i, +=, 2, ), {, x, =]
[int, i, =, 3, ;, i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (]
[3, ;, i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, a, ), ;]
[i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, a, ), ;, x, =]
[i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, a, ), ;, x, =]
[i, +=, 2, ), {, x, =, x, ., multiply, (, a, ), ;, x, =, x, ., multiply, (]
[), {, x, =, x, ., multiply, (, a, ), ;, x, =, x, ., multiply, (, a, ), ;]
[x, =, x, ., multiply, (, a, ), ;, x, =, x, ., multiply, (, a, ), ;, x, =]
[x, =, x, ., multiply, (, a, ), ;, x, =, x, ., multiply, (, a, ), ;, x, =]
[a, ), ;, x, =, x, ., multiply, (, a, ), ;, x, =, x, ., negate, (, ), ;]
[;, x, =, x, ., multiply, (, a, ), ;, x, =, x, ., negate, (, ), ;, y, =]
[;, x, =, x, ., multiply, (, a, ), ;, x, =, x, ., negate, (, ), ;, y, =]
[., multiply, (, a, ), ;, x, =, x, ., negate, (, ), ;, y, =, y, ., add, (]
[., multiply, (, a, ), ;, x, =, x, ., negate, (, ), ;, y, =, y, ., add, (]
[), ;, x, =, x, ., negate, (, ), ;, y, =, y, ., add, (, x, ., divide, (]
[negate, (, ), ;, y, =, y, ., add, (, x, ., divide, (, i, ), ), ;, if, (]
[negate, (, ), ;, y, =, y, ., add, (, x, ., divide, (, i, ), ), ;, if, (]
[y, =, y, ., add, (, x, ., divide, (, i, ), ), ;, if, (, y, ., equals, (]
[., divide, (, i, ), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }]
[(, i, ), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return]
[;, }, return, y, ;, }, public, static, Dfp, atan, (, final, Dfp, a, ), {, final, Dfp, zero, =]
[;, }, return, y, ;, }, public, static, Dfp, atan, (, final, Dfp, a, ), {, final, Dfp, zero, =]
[;, }, return, y, ;, }, public, static, Dfp, atan, (, final, Dfp, a, ), {, final, Dfp, zero, =]
[), {, final, Dfp, zero, =, a, ., getField, (, ), ., getZero, (, ), ;, final, Dfp, one, =]
[), {, final, Dfp, zero, =, a, ., getField, (, ), ., getZero, (, ), ;, final, Dfp, one, =]
[), {, final, Dfp, zero, =, a, ., getField, (, ), ., getZero, (, ), ;, final, Dfp, one, =]
[final, Dfp, one, =, a, ., getField, (, ), ., getOne, (, ), ;, final, Dfp, [, ], sqr2Split, =]
[final, Dfp, one, =, a, ., getField, (, ), ., getOne, (, ), ;, final, Dfp, [, ], sqr2Split, =]
[final, Dfp, one, =, a, ., getField, (, ), ., getOne, (, ), ;, final, Dfp, [, ], sqr2Split, =]
[[, ], sqr2Split, =, a, ., getField, (, ), ., getSqr2Split, (, ), ;, final, Dfp, [, ], piSplit, =]
[[, ], sqr2Split, =, a, ., getField, (, ), ., getSqr2Split, (, ), ;, final, Dfp, [, ], piSplit, =]
[[, ], sqr2Split, =, a, ., getField, (, ), ., getSqr2Split, (, ), ;, final, Dfp, [, ], piSplit, =]
[;, final, Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, boolean, recp, =]
[piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, boolean, recp, =, false, ;, boolean, neg, =]
[(, ), ., getPiSplit, (, ), ;, boolean, recp, =, false, ;, boolean, neg, =, false, ;, boolean, sub, =]
[;, boolean, recp, =, false, ;, boolean, neg, =, false, ;, boolean, sub, =, false, ;, final, Dfp, ty, =]
[;, boolean, recp, =, false, ;, boolean, neg, =, false, ;, boolean, sub, =, false, ;, final, Dfp, ty, =]
[;, boolean, recp, =, false, ;, boolean, neg, =, false, ;, boolean, sub, =, false, ;, final, Dfp, ty, =]
[;, boolean, recp, =, false, ;, boolean, neg, =, false, ;, boolean, sub, =, false, ;, final, Dfp, ty, =]
[recp, =, false, ;, boolean, neg, =, false, ;, boolean, sub, =, false, ;, final, Dfp, ty, =, sqr2Split, []
[neg, =, false, ;, boolean, sub, =, false, ;, final, Dfp, ty, =, sqr2Split, [, 0, ], ., subtract, (]
[sub, =, false, ;, final, Dfp, ty, =, sqr2Split, [, 0, ], ., subtract, (, one, ), ., add, (]
[sub, =, false, ;, final, Dfp, ty, =, sqr2Split, [, 0, ], ., subtract, (, one, ), ., add, (]
[false, ;, final, Dfp, ty, =, sqr2Split, [, 0, ], ., subtract, (, one, ), ., add, (, sqr2Split, []
[[, 0, ], ., subtract, (, one, ), ., add, (, sqr2Split, [, 1, ], ), ;, Dfp, x, =]
[., subtract, (, one, ), ., add, (, sqr2Split, [, 1, ], ), ;, Dfp, x, =, new, Dfp, (]
[., add, (, sqr2Split, [, 1, ], ), ;, Dfp, x, =, new, Dfp, (, a, ), ;, if, (]
[., add, (, sqr2Split, [, 1, ], ), ;, Dfp, x, =, new, Dfp, (, a, ), ;, if, (]
[[, 1, ], ), ;, Dfp, x, =, new, Dfp, (, a, ), ;, if, (, x, ., lessThan, (]
[;, Dfp, x, =, new, Dfp, (, a, ), ;, if, (, x, ., lessThan, (, zero, ), ), {]
[x, =, new, Dfp, (, a, ), ;, if, (, x, ., lessThan, (, zero, ), ), {, neg, =]
[new, Dfp, (, a, ), ;, if, (, x, ., lessThan, (, zero, ), ), {, neg, =, true, ;]
[(, a, ), ;, if, (, x, ., lessThan, (, zero, ), ), {, neg, =, true, ;, x, =]
[(, a, ), ;, if, (, x, ., lessThan, (, zero, ), ), {, neg, =, true, ;, x, =]
[(, zero, ), ), {, neg, =, true, ;, x, =, x, ., negate, (, ), ;, }, if, (]
[(, zero, ), ), {, neg, =, true, ;, x, =, x, ., negate, (, ), ;, }, if, (]
[{, neg, =, true, ;, x, =, x, ., negate, (, ), ;, }, if, (, x, ., greaterThan, (]
[;, x, =, x, ., negate, (, ), ;, }, if, (, x, ., greaterThan, (, one, ), ), {]
[=, x, ., negate, (, ), ;, }, if, (, x, ., greaterThan, (, one, ), ), {, recp, =]
[., negate, (, ), ;, }, if, (, x, ., greaterThan, (, one, ), ), {, recp, =, true, ;]
[(, ), ;, }, if, (, x, ., greaterThan, (, one, ), ), {, recp, =, true, ;, x, =]
[(, ), ;, }, if, (, x, ., greaterThan, (, one, ), ), {, recp, =, true, ;, x, =]
[if, (, x, ., greaterThan, (, one, ), ), {, recp, =, true, ;, x, =, one, ., divide, (]
[one, ), ), {, recp, =, true, ;, x, =, one, ., divide, (, x, ), ;, }, if, (]
[one, ), ), {, recp, =, true, ;, x, =, one, ., divide, (, x, ), ;, }, if, (]
[recp, =, true, ;, x, =, one, ., divide, (, x, ), ;, }, if, (, x, ., greaterThan, (]
[(, x, ), ;, }, if, (, x, ., greaterThan, (, ty, ), ), {, Dfp, sty, [, ], =]
[;, }, if, (, x, ., greaterThan, (, ty, ), ), {, Dfp, sty, [, ], =, new, Dfp, []
[(, x, ., greaterThan, (, ty, ), ), {, Dfp, sty, [, ], =, new, Dfp, [, 2, ], ;]
[., greaterThan, (, ty, ), ), {, Dfp, sty, [, ], =, new, Dfp, [, 2, ], ;, sub, =]
[(, ty, ), ), {, Dfp, sty, [, ], =, new, Dfp, [, 2, ], ;, sub, =, true, ;]
[(, ty, ), ), {, Dfp, sty, [, ], =, new, Dfp, [, 2, ], ;, sub, =, true, ;]
[), ), {, Dfp, sty, [, ], =, new, Dfp, [, 2, ], ;, sub, =, true, ;, sty, []
[Dfp, sty, [, ], =, new, Dfp, [, 2, ], ;, sub, =, true, ;, sty, [, 0, ], =]
[Dfp, sty, [, ], =, new, Dfp, [, 2, ], ;, sub, =, true, ;, sty, [, 0, ], =]
[Dfp, sty, [, ], =, new, Dfp, [, 2, ], ;, sub, =, true, ;, sty, [, 0, ], =]
[[, ], =, new, Dfp, [, 2, ], ;, sub, =, true, ;, sty, [, 0, ], =, sqr2Split, []
[[, 2, ], ;, sub, =, true, ;, sty, [, 0, ], =, sqr2Split, [, 0, ], ., subtract, (]
[;, sub, =, true, ;, sty, [, 0, ], =, sqr2Split, [, 0, ], ., subtract, (, one, ), ;]
[;, sub, =, true, ;, sty, [, 0, ], =, sqr2Split, [, 0, ], ., subtract, (, one, ), ;]
[=, true, ;, sty, [, 0, ], =, sqr2Split, [, 0, ], ., subtract, (, one, ), ;, sty, []
[sty, [, 0, ], =, sqr2Split, [, 0, ], ., subtract, (, one, ), ;, sty, [, 1, ], =]
[sty, [, 0, ], =, sqr2Split, [, 0, ], ., subtract, (, one, ), ;, sty, [, 1, ], =]
[0, ], =, sqr2Split, [, 0, ], ., subtract, (, one, ), ;, sty, [, 1, ], =, sqr2Split, []
[subtract, (, one, ), ;, sty, [, 1, ], =, sqr2Split, [, 1, ], ;, Dfp, [, ], xs, =]
[one, ), ;, sty, [, 1, ], =, sqr2Split, [, 1, ], ;, Dfp, [, ], xs, =, split, (]
[sqr2Split, [, 1, ], ;, Dfp, [, ], xs, =, split, (, x, ), ;, Dfp, [, ], ds, =]
[1, ], ;, Dfp, [, ], xs, =, split, (, x, ), ;, Dfp, [, ], ds, =, splitMult, (]
[;, Dfp, [, ], xs, =, split, (, x, ), ;, Dfp, [, ], ds, =, splitMult, (, xs, ,]
[], xs, =, split, (, x, ), ;, Dfp, [, ], ds, =, splitMult, (, xs, ,, sty, ), ;]
[], xs, =, split, (, x, ), ;, Dfp, [, ], ds, =, splitMult, (, xs, ,, sty, ), ;]
[=, split, (, x, ), ;, Dfp, [, ], ds, =, splitMult, (, xs, ,, sty, ), ;, ds, []
[x, ), ;, Dfp, [, ], ds, =, splitMult, (, xs, ,, sty, ), ;, ds, [, 0, ], =]
[x, ), ;, Dfp, [, ], ds, =, splitMult, (, xs, ,, sty, ), ;, ds, [, 0, ], =]
[x, ), ;, Dfp, [, ], ds, =, splitMult, (, xs, ,, sty, ), ;, ds, [, 0, ], =]
[;, Dfp, [, ], ds, =, splitMult, (, xs, ,, sty, ), ;, ds, [, 0, ], =, ds, []
[=, splitMult, (, xs, ,, sty, ), ;, ds, [, 0, ], =, ds, [, 0, ], ., add, (]
[xs, ,, sty, ), ;, ds, [, 0, ], =, ds, [, 0, ], ., add, (, one, ), ;]
[xs, ,, sty, ), ;, ds, [, 0, ], =, ds, [, 0, ], ., add, (, one, ), ;]
[sty, ), ;, ds, [, 0, ], =, ds, [, 0, ], ., add, (, one, ), ;, xs, []
[ds, [, 0, ], =, ds, [, 0, ], ., add, (, one, ), ;, xs, [, 0, ], =]
[ds, [, 0, ], =, ds, [, 0, ], ., add, (, one, ), ;, xs, [, 0, ], =]
[ds, [, 0, ], =, ds, [, 0, ], ., add, (, one, ), ;, xs, [, 0, ], =]
[0, ], =, ds, [, 0, ], ., add, (, one, ), ;, xs, [, 0, ], =, xs, []
[0, ], ., add, (, one, ), ;, xs, [, 0, ], =, xs, [, 0, ], ., subtract, (]
[0, ], ., add, (, one, ), ;, xs, [, 0, ], =, xs, [, 0, ], ., subtract, (]
[., add, (, one, ), ;, xs, [, 0, ], =, xs, [, 0, ], ., subtract, (, sty, []
[), ;, xs, [, 0, ], =, xs, [, 0, ], ., subtract, (, sty, [, 0, ], ), ;]
[), ;, xs, [, 0, ], =, xs, [, 0, ], ., subtract, (, sty, [, 0, ], ), ;]
[xs, [, 0, ], =, xs, [, 0, ], ., subtract, (, sty, [, 0, ], ), ;, xs, []
[], =, xs, [, 0, ], ., subtract, (, sty, [, 0, ], ), ;, xs, [, 1, ], =]
[], =, xs, [, 0, ], ., subtract, (, sty, [, 0, ], ), ;, xs, [, 1, ], =]
[], =, xs, [, 0, ], ., subtract, (, sty, [, 0, ], ), ;, xs, [, 1, ], =]
[xs, [, 0, ], ., subtract, (, sty, [, 0, ], ), ;, xs, [, 1, ], =, xs, []
[subtract, (, sty, [, 0, ], ), ;, xs, [, 1, ], =, xs, [, 1, ], ., subtract, (]
[subtract, (, sty, [, 0, ], ), ;, xs, [, 1, ], =, xs, [, 1, ], ., subtract, (]
[sty, [, 0, ], ), ;, xs, [, 1, ], =, xs, [, 1, ], ., subtract, (, sty, []
[), ;, xs, [, 1, ], =, xs, [, 1, ], ., subtract, (, sty, [, 1, ], ), ;]
[xs, [, 1, ], =, xs, [, 1, ], ., subtract, (, sty, [, 1, ], ), ;, xs, =]
[1, ], =, xs, [, 1, ], ., subtract, (, sty, [, 1, ], ), ;, xs, =, splitDiv, (]
[=, xs, [, 1, ], ., subtract, (, sty, [, 1, ], ), ;, xs, =, splitDiv, (, xs, ,]
[1, ], ., subtract, (, sty, [, 1, ], ), ;, xs, =, splitDiv, (, xs, ,, ds, ), ;]
[., subtract, (, sty, [, 1, ], ), ;, xs, =, splitDiv, (, xs, ,, ds, ), ;, x, =]
[., subtract, (, sty, [, 1, ], ), ;, xs, =, splitDiv, (, xs, ,, ds, ), ;, x, =]
[., subtract, (, sty, [, 1, ], ), ;, xs, =, splitDiv, (, xs, ,, ds, ), ;, x, =]
[(, sty, [, 1, ], ), ;, xs, =, splitDiv, (, xs, ,, ds, ), ;, x, =, xs, []
[), ;, xs, =, splitDiv, (, xs, ,, ds, ), ;, x, =, xs, [, 0, ], ., add, (]
[), ;, xs, =, splitDiv, (, xs, ,, ds, ), ;, x, =, xs, [, 0, ], ., add, (]
[xs, =, splitDiv, (, xs, ,, ds, ), ;, x, =, xs, [, 0, ], ., add, (, xs, []
[;, x, =, xs, [, 0, ], ., add, (, xs, [, 1, ], ), ;, }, Dfp, y, =]
[=, xs, [, 0, ], ., add, (, xs, [, 1, ], ), ;, }, Dfp, y, =, atanInternal, (]
[., add, (, xs, [, 1, ], ), ;, }, Dfp, y, =, atanInternal, (, x, ), ;, if, (]
[xs, [, 1, ], ), ;, }, Dfp, y, =, atanInternal, (, x, ), ;, if, (, sub, ), {]
[1, ], ), ;, }, Dfp, y, =, atanInternal, (, x, ), ;, if, (, sub, ), {, y, =]
[1, ], ), ;, }, Dfp, y, =, atanInternal, (, x, ), ;, if, (, sub, ), {, y, =]
[1, ], ), ;, }, Dfp, y, =, atanInternal, (, x, ), ;, if, (, sub, ), {, y, =]
[}, Dfp, y, =, atanInternal, (, x, ), ;, if, (, sub, ), {, y, =, y, ., add, (]
[}, Dfp, y, =, atanInternal, (, x, ), ;, if, (, sub, ), {, y, =, y, ., add, (]
[}, Dfp, y, =, atanInternal, (, x, ), ;, if, (, sub, ), {, y, =, y, ., add, (]
[y, =, atanInternal, (, x, ), ;, if, (, sub, ), {, y, =, y, ., add, (, piSplit, []
[), ;, if, (, sub, ), {, y, =, y, ., add, (, piSplit, [, 0, ], ., divide, (]
[{, y, =, y, ., add, (, piSplit, [, 0, ], ., divide, (, 8, ), ), ., add, (]
[{, y, =, y, ., add, (, piSplit, [, 0, ], ., divide, (, 8, ), ), ., add, (]
[{, y, =, y, ., add, (, piSplit, [, 0, ], ., divide, (, 8, ), ), ., add, (]
[=, y, ., add, (, piSplit, [, 0, ], ., divide, (, 8, ), ), ., add, (, piSplit, []
[piSplit, [, 0, ], ., divide, (, 8, ), ), ., add, (, piSplit, [, 1, ], ., divide, (]
[8, ), ), ., add, (, piSplit, [, 1, ], ., divide, (, 8, ), ), ;, }, if, (]
[., add, (, piSplit, [, 1, ], ., divide, (, 8, ), ), ;, }, if, (, recp, ), {]
[(, piSplit, [, 1, ], ., divide, (, 8, ), ), ;, }, if, (, recp, ), {, y, =]
[(, piSplit, [, 1, ], ., divide, (, 8, ), ), ;, }, if, (, recp, ), {, y, =]
[(, piSplit, [, 1, ], ., divide, (, 8, ), ), ;, }, if, (, recp, ), {, y, =]
[(, piSplit, [, 1, ], ., divide, (, 8, ), ), ;, }, if, (, recp, ), {, y, =]
[(, piSplit, [, 1, ], ., divide, (, 8, ), ), ;, }, if, (, recp, ), {, y, =]
[[, 1, ], ., divide, (, 8, ), ), ;, }, if, (, recp, ), {, y, =, piSplit, []
[(, 8, ), ), ;, }, if, (, recp, ), {, y, =, piSplit, [, 0, ], ., divide, (]
[}, if, (, recp, ), {, y, =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (]
[{, y, =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, y, ), ., add, (]
[{, y, =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, y, ), ., add, (]
[{, y, =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, y, ), ., add, (]
[=, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, y, ), ., add, (, piSplit, []
[., divide, (, 2, ), ., subtract, (, y, ), ., add, (, piSplit, [, 1, ], ., divide, (]
[(, y, ), ., add, (, piSplit, [, 1, ], ., divide, (, 2, ), ), ;, }, if, (]
[., add, (, piSplit, [, 1, ], ., divide, (, 2, ), ), ;, }, if, (, neg, ), {]
[(, piSplit, [, 1, ], ., divide, (, 2, ), ), ;, }, if, (, neg, ), {, y, =]
[(, piSplit, [, 1, ], ., divide, (, 2, ), ), ;, }, if, (, neg, ), {, y, =]
[2, ), ), ;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return]
[2, ), ), ;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return]
[}, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return, a, ., newInstance, (]
[return, a, ., newInstance, (, y, ), ;, }, public, static, Dfp, asin, (, final, Dfp, a, ), {, return]
[., newInstance, (, y, ), ;, }, public, static, Dfp, asin, (, final, Dfp, a, ), {, return, atan, (]
[., newInstance, (, y, ), ;, }, public, static, Dfp, asin, (, final, Dfp, a, ), {, return, atan, (]
[), ;, }, public, static, Dfp, asin, (, final, Dfp, a, ), {, return, atan, (, a, ., divide, (]
[), ;, }, public, static, Dfp, asin, (, final, Dfp, a, ), {, return, atan, (, a, ., divide, (]
[), ;, }, public, static, Dfp, asin, (, final, Dfp, a, ), {, return, atan, (, a, ., divide, (]
[), ;, }, public, static, Dfp, asin, (, final, Dfp, a, ), {, return, atan, (, a, ., divide, (]
[final, Dfp, a, ), {, return, atan, (, a, ., divide, (, a, ., getOne, (, ), ., subtract, (]
[final, Dfp, a, ), {, return, atan, (, a, ., divide, (, a, ., getOne, (, ), ., subtract, (]
[{, return, atan, (, a, ., divide, (, a, ., getOne, (, ), ., subtract, (, a, ., multiply, (]
[), ), ), ;, }, public, static, Dfp, acos, (, Dfp, a, ), {, Dfp, result, ;, boolean, negative, =]
[}, public, static, Dfp, acos, (, Dfp, a, ), {, Dfp, result, ;, boolean, negative, =, false, ;, if, (]
[}, public, static, Dfp, acos, (, Dfp, a, ), {, Dfp, result, ;, boolean, negative, =, false, ;, if, (]
[acos, (, Dfp, a, ), {, Dfp, result, ;, boolean, negative, =, false, ;, if, (, a, ., lessThan, (]
[acos, (, Dfp, a, ), {, Dfp, result, ;, boolean, negative, =, false, ;, if, (, a, ., lessThan, (]
[;, boolean, negative, =, false, ;, if, (, a, ., lessThan, (, a, ., getZero, (, ), ), ), {]
[negative, =, false, ;, if, (, a, ., lessThan, (, a, ., getZero, (, ), ), ), {, negative, =]
[;, if, (, a, ., lessThan, (, a, ., getZero, (, ), ), ), {, negative, =, true, ;, }]
[(, a, ., lessThan, (, a, ., getZero, (, ), ), ), {, negative, =, true, ;, }, a, =]
[(, a, ., lessThan, (, a, ., getZero, (, ), ), ), {, negative, =, true, ;, }, a, =]
[(, a, ., getZero, (, ), ), ), {, negative, =, true, ;, }, a, =, Dfp, ., copysign, (]
[., getZero, (, ), ), ), {, negative, =, true, ;, }, a, =, Dfp, ., copysign, (, a, ,]
[., getZero, (, ), ), ), {, negative, =, true, ;, }, a, =, Dfp, ., copysign, (, a, ,]
[negative, =, true, ;, }, a, =, Dfp, ., copysign, (, a, ,, a, ., getOne, (, ), ), ;]
[true, ;, }, a, =, Dfp, ., copysign, (, a, ,, a, ., getOne, (, ), ), ;, result, =]
[}, a, =, Dfp, ., copysign, (, a, ,, a, ., getOne, (, ), ), ;, result, =, atan, (]
[}, a, =, Dfp, ., copysign, (, a, ,, a, ., getOne, (, ), ), ;, result, =, atan, (]
[}, a, =, Dfp, ., copysign, (, a, ,, a, ., getOne, (, ), ), ;, result, =, atan, (]
[}, a, =, Dfp, ., copysign, (, a, ,, a, ., getOne, (, ), ), ;, result, =, atan, (]
[}, a, =, Dfp, ., copysign, (, a, ,, a, ., getOne, (, ), ), ;, result, =, atan, (]
[,, a, ., getOne, (, ), ), ;, result, =, atan, (, a, ., getOne, (, ), ., subtract, (]
[,, a, ., getOne, (, ), ), ;, result, =, atan, (, a, ., getOne, (, ), ., subtract, (]
[(, ), ), ;, result, =, atan, (, a, ., getOne, (, ), ., subtract, (, a, ., multiply, (]
[getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), ), ., sqrt, (, ), ., divide, (]
[a, ., multiply, (, a, ), ), ., sqrt, (, ), ., divide, (, a, ), ), ;, if, (]
[(, a, ), ), ., sqrt, (, ), ., divide, (, a, ), ), ;, if, (, negative, ), {]
[), ), ., sqrt, (, ), ., divide, (, a, ), ), ;, if, (, negative, ), {, result, =]
[), ), ., sqrt, (, ), ., divide, (, a, ), ), ;, if, (, negative, ), {, result, =]
[), ), ., sqrt, (, ), ., divide, (, a, ), ), ;, if, (, negative, ), {, result, =]
[), ), ., sqrt, (, ), ., divide, (, a, ), ), ;, if, (, negative, ), {, result, =]
[;, if, (, negative, ), {, result, =, a, ., getField, (, ), ., getPi, (, ), ., subtract, (]
[{, result, =, a, ., getField, (, ), ., getPi, (, ), ., subtract, (, result, ), ;, }, return]
[{, result, =, a, ., getField, (, ), ., getPi, (, ), ., subtract, (, result, ), ;, }, return]
[., getField, (, ), ., getPi, (, ), ., subtract, (, result, ), ;, }, return, a, ., newInstance, (]
