[;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, if, (, NodeUtil, .]
[., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;]
[;, ), {, Node, next, =, child, ., getNext, (, ), ;, if, (, NodeUtil, ., isExprAssign, (, child, )]
[!=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, if, (, NodeUtil, ., isExprAssign, (]
[;, ), {, Node, next, =, child, ., getNext, (, ), ;, if, (, NodeUtil, ., isExprAssign, (, child, )]
[;, if, (, NodeUtil, ., isExprAssign, (, child, ), ), {, collapseAssign, (, child, ., getFirstChild, (, ), ,, child]
[., getNext, (, ), ;, if, (, NodeUtil, ., isExprAssign, (, child, ), ), {, collapseAssign, (, child, ., getFirstChild]
[), {, collapseAssign, (, child, ., getFirstChild, (, ), ,, child, ,, subtree, ), ;, }, child, =, next, ;]
[., isExprAssign, (, child, ), ), {, collapseAssign, (, child, ., getFirstChild, (, ), ,, child, ,, subtree, ), ;]
[), ), {, collapseAssign, (, child, ., getFirstChild, (, ), ,, child, ,, subtree, ), ;, }, child, =, next]
[;, }, child, =, next, ;, }, return, subtree, ;, }, private, void, collapseAssign, (, Node, assign, ,, Node, expr]
[,, child, ,, subtree, ), ;, }, child, =, next, ;, }, return, subtree, ;, }, private, void, collapseAssign, (]
[., getFirstChild, (, ), ,, child, ,, subtree, ), ;, }, child, =, next, ;, }, return, subtree, ;, }]
[,, subtree, ), ;, }, child, =, next, ;, }, return, subtree, ;, }, private, void, collapseAssign, (, Node, assign]
[), ;, }, child, =, next, ;, }, return, subtree, ;, }, private, void, collapseAssign, (, Node, assign, ,, Node]
[=, next, ;, }, return, subtree, ;, }, private, void, collapseAssign, (, Node, assign, ,, Node, expr, ,, Node, exprParent]
[;, }, return, subtree, ;, }, private, void, collapseAssign, (, Node, assign, ,, Node, expr, ,, Node, exprParent, ), {]
[;, }, private, void, collapseAssign, (, Node, assign, ,, Node, expr, ,, Node, exprParent, ), {, Node, leftValue, =, assign]
[;, Node, rightValue, =, leftValue, ., getNext, (, ), ;, if, (, isCollapsibleValue, (, leftValue, ,, true, ), &&, collapseAssignEqualTo]
[., getFirstChild, (, ), ;, Node, rightValue, =, leftValue, ., getNext, (, ), ;, if, (, isCollapsibleValue, (, leftValue, ,]
[;, if, (, isCollapsibleValue, (, leftValue, ,, true, ), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, leftValue, ), ), {]
[., getNext, (, ), ;, if, (, isCollapsibleValue, (, leftValue, ,, true, ), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,]
[), {, reportCodeChange, (, ), ;, }, else, if, (, isCollapsibleValue, (, rightValue, ,, false, ), &&, collapseAssignEqualTo, (, expr]
[&&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, leftValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (, isCollapsibleValue]
[,, true, ), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, leftValue, ), ), {, reportCodeChange, (, ), ;, }, else]
[), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, leftValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (]
[), {, reportCodeChange, (, ), ;, }, else, if, (, isCollapsibleValue, (, rightValue, ,, false, ), &&, collapseAssignEqualTo, (, expr]
[,, exprParent, ,, leftValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (, isCollapsibleValue, (, rightValue, ,, false]
[,, leftValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (, isCollapsibleValue, (, rightValue, ,, false, ), &&]
[), ), {, reportCodeChange, (, ), ;, }, else, if, (, isCollapsibleValue, (, rightValue, ,, false, ), &&, collapseAssignEqualTo, (]
[;, }, else, if, (, isCollapsibleValue, (, rightValue, ,, false, ), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, rightValue, )]
[), {, reportCodeChange, (, ), ;, }, else, if, (, rightValue, ., isAssign, (, ), ), {, collapseAssign, (, rightValue]
[&&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, rightValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (, rightValue]
[,, false, ), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, rightValue, ), ), {, reportCodeChange, (, ), ;, }, else]
[), &&, collapseAssignEqualTo, (, expr, ,, exprParent, ,, rightValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (]
[), {, reportCodeChange, (, ), ;, }, else, if, (, rightValue, ., isAssign, (, ), ), {, collapseAssign, (, rightValue]
[,, exprParent, ,, rightValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (, rightValue, ., isAssign, (, )]
[,, rightValue, ), ), {, reportCodeChange, (, ), ;, }, else, if, (, rightValue, ., isAssign, (, ), ), {]
[), ), {, reportCodeChange, (, ), ;, }, else, if, (, rightValue, ., isAssign, (, ), ), {, collapseAssign, (]
[;, }, else, if, (, rightValue, ., isAssign, (, ), ), {, collapseAssign, (, rightValue, ,, expr, ,, exprParent, )]
[), {, collapseAssign, (, rightValue, ,, expr, ,, exprParent, ), ;, }, }, private, boolean, isCollapsibleValue, (, Node, value, ,]
[., isAssign, (, ), ), {, collapseAssign, (, rightValue, ,, expr, ,, exprParent, ), ;, }, }, private, boolean, isCollapsibleValue]
[;, }, }, private, boolean, isCollapsibleValue, (, Node, value, ,, boolean, isLValue, ), {, switch, (, value, ., getType, (]
[,, expr, ,, exprParent, ), ;, }, }, private, boolean, isCollapsibleValue, (, Node, value, ,, boolean, isLValue, ), {, switch]
[,, exprParent, ), ;, }, }, private, boolean, isCollapsibleValue, (, Node, value, ,, boolean, isLValue, ), {, switch, (, value]
[), ;, }, }, private, boolean, isCollapsibleValue, (, Node, value, ,, boolean, isLValue, ), {, switch, (, value, ., getType]
[), {, case, Token, ., GETPROP, :, return, !, isLValue, ||, value, ., getFirstChild, (, ), ., isThis, (, )]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, return, !, isLValue, ||, value, ., getFirstChild, (, )]
[:, return, !, isLValue, ||, value, ., getFirstChild, (, ), ., isThis, (, ), ;, case, Token, ., NAME, :]
[., GETPROP, :, return, !, isLValue, ||, value, ., getFirstChild, (, ), ., isThis, (, ), ;, case, Token, .]
[;, case, Token, ., NAME, :, return, true, ;, default, :, return, NodeUtil, ., isImmutableValue, (, value, ), ;, }]
[||, value, ., getFirstChild, (, ), ., isThis, (, ), ;, case, Token, ., NAME, :, return, true, ;, default]
[||, value, ., getFirstChild, (, ), ., isThis, (, ), ;, case, Token, ., NAME, :, return, true, ;, default]
[;, case, Token, ., NAME, :, return, true, ;, default, :, return, NodeUtil, ., isImmutableValue, (, value, ), ;, }]
[., isThis, (, ), ;, case, Token, ., NAME, :, return, true, ;, default, :, return, NodeUtil, ., isImmutableValue, (]
[., getFirstChild, (, ), ., isThis, (, ), ;, case, Token, ., NAME, :, return, true, ;, default, :, return]
[:, return, true, ;, default, :, return, NodeUtil, ., isImmutableValue, (, value, ), ;, }, }, private, boolean, collapseAssignEqualTo, (]
[., NAME, :, return, true, ;, default, :, return, NodeUtil, ., isImmutableValue, (, value, ), ;, }, }, private, boolean]
[;, default, :, return, NodeUtil, ., isImmutableValue, (, value, ), ;, }, }, private, boolean, collapseAssignEqualTo, (, Node, expr, ,]
[;, }, }, private, boolean, collapseAssignEqualTo, (, Node, expr, ,, Node, exprParent, ,, Node, value, ), {, Node, assign, =]
[., isImmutableValue, (, value, ), ;, }, }, private, boolean, collapseAssignEqualTo, (, Node, expr, ,, Node, exprParent, ,, Node, value]
[), ;, }, }, private, boolean, collapseAssignEqualTo, (, Node, expr, ,, Node, exprParent, ,, Node, value, ), {, Node, assign]
[;, Node, parent, =, exprParent, ;, Node, next, =, expr, ., getNext, (, ), ;, while, (, next, !=, null]
[., getFirstChild, (, ), ;, Node, parent, =, exprParent, ;, Node, next, =, expr, ., getNext, (, ), ;, while]
[;, Node, next, =, expr, ., getNext, (, ), ;, while, (, next, !=, null, ), {, switch, (, next]
[;, while, (, next, !=, null, ), {, switch, (, next, ., getType, (, ), ), {, case, Token, .]
[., getNext, (, ), ;, while, (, next, !=, null, ), {, switch, (, next, ., getType, (, ), )]
[), {, switch, (, next, ., getType, (, ), ), {, case, Token, ., AND, :, case, Token, ., OR]
[!=, null, ), {, switch, (, next, ., getType, (, ), ), {, case, Token, ., AND, :, case, Token]
[), {, switch, (, next, ., getType, (, ), ), {, case, Token, ., AND, :, case, Token, ., OR]
[), {, case, Token, ., AND, :, case, Token, ., OR, :, case, Token, ., HOOK, :, case, Token, .]
[., getType, (, ), ), {, case, Token, ., AND, :, case, Token, ., OR, :, case, Token, ., HOOK]
[:, case, Token, ., OR, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., RETURN]
[., AND, :, case, Token, ., OR, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token]
[:, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT]
[., OR, :, case, Token, ., HOOK, :, case, Token, ., IF, :, case, Token, ., RETURN, :, case, Token]
[:, case, Token, ., IF, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, parent, =, next, ;]
[., HOOK, :, case, Token, ., IF, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, parent, =]
[:, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, parent, =, next, ;, next, =, next, ., getFirstChild]
[., IF, :, case, Token, ., RETURN, :, case, Token, ., EXPR_RESULT, :, parent, =, next, ;, next, =, next]
[:, case, Token, ., EXPR_RESULT, :, parent, =, next, ;, next, =, next, ., getFirstChild, (, ), ;, break, ;]
[., RETURN, :, case, Token, ., EXPR_RESULT, :, parent, =, next, ;, next, =, next, ., getFirstChild, (, ), ;]
[:, parent, =, next, ;, next, =, next, ., getFirstChild, (, ), ;, break, ;, case, Token, ., VAR, :]
[., EXPR_RESULT, :, parent, =, next, ;, next, =, next, ., getFirstChild, (, ), ;, break, ;, case, Token, .]
[=, next, ;, next, =, next, ., getFirstChild, (, ), ;, break, ;, case, Token, ., VAR, :, if, (]
[;, next, =, next, ., getFirstChild, (, ), ;, break, ;, case, Token, ., VAR, :, if, (, next, .]
[=, next, ., getFirstChild, (, ), ;, break, ;, case, Token, ., VAR, :, if, (, next, ., getFirstChild, (]
[;, break, ;, case, Token, ., VAR, :, if, (, next, ., getFirstChild, (, ), ., hasChildren, (, ), )]
[., getFirstChild, (, ), ;, break, ;, case, Token, ., VAR, :, if, (, next, ., getFirstChild, (, ), .]
[:, if, (, next, ., getFirstChild, (, ), ., hasChildren, (, ), ), {, parent, =, next, ., getFirstChild, (]
[., VAR, :, if, (, next, ., getFirstChild, (, ), ., hasChildren, (, ), ), {, parent, =, next, .]
[), {, parent, =, next, ., getFirstChild, (, ), ;, next, =, parent, ., getFirstChild, (, ), ;, break, ;]
[., hasChildren, (, ), ), {, parent, =, next, ., getFirstChild, (, ), ;, next, =, parent, ., getFirstChild, (]
[., getFirstChild, (, ), ., hasChildren, (, ), ), {, parent, =, next, ., getFirstChild, (, ), ;, next, =]
[=, next, ., getFirstChild, (, ), ;, next, =, parent, ., getFirstChild, (, ), ;, break, ;, }, return, false]
[;, next, =, parent, ., getFirstChild, (, ), ;, break, ;, }, return, false, ;, case, Token, ., GETPROP, :]
[., getFirstChild, (, ), ;, next, =, parent, ., getFirstChild, (, ), ;, break, ;, }, return, false, ;, case]
[=, parent, ., getFirstChild, (, ), ;, break, ;, }, return, false, ;, case, Token, ., GETPROP, :, case, Token]
[;, break, ;, }, return, false, ;, case, Token, ., GETPROP, :, case, Token, ., NAME, :, if, (, next]
[., getFirstChild, (, ), ;, break, ;, }, return, false, ;, case, Token, ., GETPROP, :, case, Token, ., NAME]
[;, case, Token, ., GETPROP, :, case, Token, ., NAME, :, if, (, next, ., isQualifiedName, (, ), ), {]
[:, case, Token, ., NAME, :, if, (, next, ., isQualifiedName, (, ), ), {, String, nextName, =, next, .]
[., GETPROP, :, case, Token, ., NAME, :, if, (, next, ., isQualifiedName, (, ), ), {, String, nextName, =]
[:, if, (, next, ., isQualifiedName, (, ), ), {, String, nextName, =, next, ., getQualifiedName, (, ), ;, if]
[., NAME, :, if, (, next, ., isQualifiedName, (, ), ), {, String, nextName, =, next, ., getQualifiedName, (, )]
[), {, String, nextName, =, next, ., getQualifiedName, (, ), ;, if, (, value, ., isQualifiedName, (, ), &&, nextName]
[., isQualifiedName, (, ), ), {, String, nextName, =, next, ., getQualifiedName, (, ), ;, if, (, value, ., isQualifiedName]
[;, if, (, value, ., isQualifiedName, (, ), &&, nextName, ., equals, (, value, ., getQualifiedName, (, ), ), )]
[., getQualifiedName, (, ), ;, if, (, value, ., isQualifiedName, (, ), &&, nextName, ., equals, (, value, ., getQualifiedName]
[), {, if, (, !, isSafeReplacement, (, next, ,, assign, ), ), {, return, false, ;, }, exprParent, ., removeChild]
[&&, nextName, ., equals, (, value, ., getQualifiedName, (, ), ), ), {, if, (, !, isSafeReplacement, (, next, ,]
[., isQualifiedName, (, ), &&, nextName, ., equals, (, value, ., getQualifiedName, (, ), ), ), {, if, (, !]
[), {, if, (, !, isSafeReplacement, (, next, ,, assign, ), ), {, return, false, ;, }, exprParent, ., removeChild]
[., equals, (, value, ., getQualifiedName, (, ), ), ), {, if, (, !, isSafeReplacement, (, next, ,, assign, )]
[), ), {, if, (, !, isSafeReplacement, (, next, ,, assign, ), ), {, return, false, ;, }, exprParent, .]
[., getQualifiedName, (, ), ), ), {, if, (, !, isSafeReplacement, (, next, ,, assign, ), ), {, return, false]
[), {, return, false, ;, }, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;]
[), {, return, false, ;, }, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;]
[,, assign, ), ), {, return, false, ;, }, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (]
[), ), {, return, false, ;, }, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, )]
[;, }, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (]
[;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true, ;]
[., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,, assign]
[), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true]
[;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true, ;, }, }, return, false, ;, case, Token]
[., removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true, ;, }, }]
[), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true, ;, }, }, return, false, ;, case]
[;, return, true, ;, }, }, return, false, ;, case, Token, ., ASSIGN, :, Node, leftSide, =, next, ., getFirstChild]
[., replaceChild, (, next, ,, assign, ), ;, return, true, ;, }, }, return, false, ;, case, Token, ., ASSIGN]
[,, assign, ), ;, return, true, ;, }, }, return, false, ;, case, Token, ., ASSIGN, :, Node, leftSide, =]
[), ;, return, true, ;, }, }, return, false, ;, case, Token, ., ASSIGN, :, Node, leftSide, =, next, .]
[;, }, }, return, false, ;, case, Token, ., ASSIGN, :, Node, leftSide, =, next, ., getFirstChild, (, ), ;]
[;, case, Token, ., ASSIGN, :, Node, leftSide, =, next, ., getFirstChild, (, ), ;, if, (, leftSide, ., isName]
[:, Node, leftSide, =, next, ., getFirstChild, (, ), ;, if, (, leftSide, ., isName, (, ), ||, leftSide, .]
[., ASSIGN, :, Node, leftSide, =, next, ., getFirstChild, (, ), ;, if, (, leftSide, ., isName, (, ), ||]
[;, if, (, leftSide, ., isName, (, ), ||, leftSide, ., isGetProp, (, ), &&, leftSide, ., getFirstChild, (, )]
[., getFirstChild, (, ), ;, if, (, leftSide, ., isName, (, ), ||, leftSide, ., isGetProp, (, ), &&, leftSide]
[), {, parent, =, next, ;, next, =, leftSide, ., getNext, (, ), ;, break, ;, }, else, {, return]
[||, leftSide, ., isGetProp, (, ), &&, leftSide, ., getFirstChild, (, ), ., isThis, (, ), ), {, parent, =]
[., isName, (, ), ||, leftSide, ., isGetProp, (, ), &&, leftSide, ., getFirstChild, (, ), ., isThis, (, )]
[), {, parent, =, next, ;, next, =, leftSide, ., getNext, (, ), ;, break, ;, }, else, {, return]
[&&, leftSide, ., getFirstChild, (, ), ., isThis, (, ), ), {, parent, =, next, ;, next, =, leftSide, .]
[., isGetProp, (, ), &&, leftSide, ., getFirstChild, (, ), ., isThis, (, ), ), {, parent, =, next, ;]
[), {, parent, =, next, ;, next, =, leftSide, ., getNext, (, ), ;, break, ;, }, else, {, return]
[., isThis, (, ), ), {, parent, =, next, ;, next, =, leftSide, ., getNext, (, ), ;, break, ;]
[., getFirstChild, (, ), ., isThis, (, ), ), {, parent, =, next, ;, next, =, leftSide, ., getNext, (]
[=, next, ;, next, =, leftSide, ., getNext, (, ), ;, break, ;, }, else, {, return, false, ;, }]
[;, next, =, leftSide, ., getNext, (, ), ;, break, ;, }, else, {, return, false, ;, }, default, :]
[=, leftSide, ., getNext, (, ), ;, break, ;, }, else, {, return, false, ;, }, default, :, if, (]
[;, break, ;, }, else, {, return, false, ;, }, default, :, if, (, NodeUtil, ., isImmutableValue, (, next, )]
[., getNext, (, ), ;, break, ;, }, else, {, return, false, ;, }, default, :, if, (, NodeUtil, .]
[;, }, default, :, if, (, NodeUtil, ., isImmutableValue, (, next, ), &&, next, ., isEquivalentTo, (, value, ), )]
[), {, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (]
[&&, next, ., isEquivalentTo, (, value, ), ), {, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (]
[., isImmutableValue, (, next, ), &&, next, ., isEquivalentTo, (, value, ), ), {, exprParent, ., removeChild, (, expr, )]
[), &&, next, ., isEquivalentTo, (, value, ), ), {, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild]
[), {, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (]
[., isEquivalentTo, (, value, ), ), {, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, )]
[), ), {, exprParent, ., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild]
[;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true, ;]
[., removeChild, (, expr, ), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,, assign]
[), ;, expr, ., removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true]
[;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true, ;, }, return, false, ;, }, }, return]
[., removeChild, (, assign, ), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true, ;, }, return]
[), ;, parent, ., replaceChild, (, next, ,, assign, ), ;, return, true, ;, }, return, false, ;, }, }]
[;, return, true, ;, }, return, false, ;, }, }, return, false, ;, }, private, boolean, isSafeReplacement, (, Node, node]
[., replaceChild, (, next, ,, assign, ), ;, return, true, ;, }, return, false, ;, }, }, return, false, ;]
[,, assign, ), ;, return, true, ;, }, return, false, ;, }, }, return, false, ;, }, private, boolean, isSafeReplacement]
[), ;, return, true, ;, }, return, false, ;, }, }, return, false, ;, }, private, boolean, isSafeReplacement, (, Node]
[;, }, return, false, ;, }, }, return, false, ;, }, private, boolean, isSafeReplacement, (, Node, node, ,, Node, replacement]
[;, }, }, return, false, ;, }, private, boolean, isSafeReplacement, (, Node, node, ,, Node, replacement, ), {, if, (]
[;, }, private, boolean, isSafeReplacement, (, Node, node, ,, Node, replacement, ), {, if, (, node, ., isName, (, )]
[), {, return, true, ;, }, Preconditions, ., checkArgument, (, node, ., isGetProp, (, ), ), ;, Node, name, =]
[., isName, (, ), ), {, return, true, ;, }, Preconditions, ., checkArgument, (, node, ., isGetProp, (, ), )]
[;, }, Preconditions, ., checkArgument, (, node, ., isGetProp, (, ), ), ;, Node, name, =, node, ., getFirstChild, (]
[;, Node, name, =, node, ., getFirstChild, (, ), ;, if, (, name, ., isName, (, ), &&, isNameAssignedTo, (]
[., checkArgument, (, node, ., isGetProp, (, ), ), ;, Node, name, =, node, ., getFirstChild, (, ), ;, if]
[), ;, Node, name, =, node, ., getFirstChild, (, ), ;, if, (, name, ., isName, (, ), &&, isNameAssignedTo]
[., isGetProp, (, ), ), ;, Node, name, =, node, ., getFirstChild, (, ), ;, if, (, name, ., isName]
[;, if, (, name, ., isName, (, ), &&, isNameAssignedTo, (, name, ., getString, (, ), ,, replacement, ), )]
[., getFirstChild, (, ), ;, if, (, name, ., isName, (, ), &&, isNameAssignedTo, (, name, ., getString, (, )]
[), {, return, false, ;, }, return, true, ;, }, private, boolean, isNameAssignedTo, (, String, name, ,, Node, node, )]
[&&, isNameAssignedTo, (, name, ., getString, (, ), ,, replacement, ), ), {, return, false, ;, }, return, true, ;]
[., isName, (, ), &&, isNameAssignedTo, (, name, ., getString, (, ), ,, replacement, ), ), {, return, false, ;]
[), {, return, false, ;, }, return, true, ;, }, private, boolean, isNameAssignedTo, (, String, name, ,, Node, node, )]
[,, replacement, ), ), {, return, false, ;, }, return, true, ;, }, private, boolean, isNameAssignedTo, (, String, name, ,]
[., getString, (, ), ,, replacement, ), ), {, return, false, ;, }, return, true, ;, }, private, boolean, isNameAssignedTo]
[), ), {, return, false, ;, }, return, true, ;, }, private, boolean, isNameAssignedTo, (, String, name, ,, Node, node]
[;, }, return, true, ;, }, private, boolean, isNameAssignedTo, (, String, name, ,, Node, node, ), {, for, (, Node]
[;, }, private, boolean, isNameAssignedTo, (, String, name, ,, Node, node, ), {, for, (, Node, c, =, node, .]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, isNameAssignedTo, (, name, ,]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[;, c, =, c, ., getNext, (, ), ), {, if, (, isNameAssignedTo, (, name, ,, c, ), ), {]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, isNameAssignedTo, (, name, ,, c, )]
[;, c, =, c, ., getNext, (, ), ), {, if, (, isNameAssignedTo, (, name, ,, c, ), ), {]
[=, c, ., getNext, (, ), ), {, if, (, isNameAssignedTo, (, name, ,, c, ), ), {, return, true]
[), {, if, (, isNameAssignedTo, (, name, ,, c, ), ), {, return, true, ;, }, }, if, (, node]
[., getNext, (, ), ), {, if, (, isNameAssignedTo, (, name, ,, c, ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, if, (, node, ., isName, (, ), ), {, Node, parent, =, node]
[,, c, ), ), {, return, true, ;, }, }, if, (, node, ., isName, (, ), ), {, Node]
[), ), {, return, true, ;, }, }, if, (, node, ., isName, (, ), ), {, Node, parent, =]
[;, }, }, if, (, node, ., isName, (, ), ), {, Node, parent, =, node, ., getParent, (, )]
[), {, Node, parent, =, node, ., getParent, (, ), ;, if, (, parent, ., isAssign, (, ), &&, parent]
[., isName, (, ), ), {, Node, parent, =, node, ., getParent, (, ), ;, if, (, parent, ., isAssign]
[;, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, node, ), {, if, (]
[., getParent, (, ), ;, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, node]
[), {, if, (, name, ., equals, (, node, ., getString, (, ), ), ), {, return, true, ;, }]
[&&, parent, ., getFirstChild, (, ), ==, node, ), {, if, (, name, ., equals, (, node, ., getString, (]
[., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, node, ), {, if, (, name, ., equals, (]
[), {, if, (, name, ., equals, (, node, ., getString, (, ), ), ), {, return, true, ;, }]
[==, node, ), {, if, (, name, ., equals, (, node, ., getString, (, ), ), ), {, return, true]
[., getFirstChild, (, ), ==, node, ), {, if, (, name, ., equals, (, node, ., getString, (, ), )]
[), {, if, (, name, ., equals, (, node, ., getString, (, ), ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, }, return, false, ;, }, }]
[., equals, (, node, ., getString, (, ), ), ), {, return, true, ;, }, }, }, return, false, ;]
[), ), {, return, true, ;, }, }, }, return, false, ;, }, }]
[., getString, (, ), ), ), {, return, true, ;, }, }, }, return, false, ;, }, }]
[;, }, }, }, return, false, ;, }, }]
[;, }, }]
