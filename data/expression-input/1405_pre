[private, final, AbstractCompiler, compiler, ;, private, final, Callback, callback, ;, private, Node, curNode, ;, public, static, final, DiagnosticType, NODE_TRAVERSAL_ERROR, =]
[private, final, AbstractCompiler, compiler, ;, private, final, Callback, callback, ;, private, Node, curNode, ;, public, static, final, DiagnosticType, NODE_TRAVERSAL_ERROR, =]
[;, private, final, Callback, callback, ;, private, Node, curNode, ;, public, static, final, DiagnosticType, NODE_TRAVERSAL_ERROR, =, DiagnosticType, ., error, (]
[final, Callback, callback, ;, private, Node, curNode, ;, public, static, final, DiagnosticType, NODE_TRAVERSAL_ERROR, =, DiagnosticType, ., error, (, "JSC_NODE_TRAVERSAL_ERROR", ,]
[DiagnosticType, NODE_TRAVERSAL_ERROR, =, DiagnosticType, ., error, (, "JSC_NODE_TRAVERSAL_ERROR", ,, "{0}", ), ;, private, final, Deque, <, Scope, >, scopes, =]
[Scope, >, scopes, =, new, ArrayDeque, <, Scope, >, (, ), ;, private, final, Deque, <, Node, >, scopeRoots, =]
[>, scopeRoots, =, new, ArrayDeque, <, Node, >, (, ), ;, Deque, <, ControlFlowGraph, <, Node, >, >, cfgs, =]
[Callback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[ScopedCallback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[Callback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[Callback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[Callback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[Callback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[@, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, parent, ==]
[public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||]
[final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||, !]
[final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||, !]
[,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||]
[,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||]
[n, ,, Node, parent, ), {, return, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==]
[n, ,, Node, parent, ), {, return, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==]
[Callback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[Callback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[Callback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[Callback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[@, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, parent, ==]
[public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||]
[public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||]
[(, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||, NodeUtil, ., isControlStructure, (]
[,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||, NodeUtil, ., isControlStructure, (, parent, ), ||]
[,, Node, n, ,, Node, parent, ), {, return, parent, ==, null, ||, NodeUtil, ., isControlStructure, (, parent, ), ||]
[Node, parent, ), {, return, parent, ==, null, ||, NodeUtil, ., isControlStructure, (, parent, ), ||, NodeUtil, ., isStatementBlock, (]
[>, nodeTypes, ;, private, final, boolean, include, ;, public, AbstractNodeTypePruningCallback, (, Set, <, Integer, >, nodeTypes, ), {, this, (]
[;, private, final, boolean, include, ;, public, AbstractNodeTypePruningCallback, (, Set, <, Integer, >, nodeTypes, ), {, this, (, nodeTypes, ,]
[(, nodeTypes, ,, true, ), ;, }, public, AbstractNodeTypePruningCallback, (, Set, <, Integer, >, nodeTypes, ,, boolean, include, ), {]
[(, nodeTypes, ,, true, ), ;, }, public, AbstractNodeTypePruningCallback, (, Set, <, Integer, >, nodeTypes, ,, boolean, include, ), {]
[), ;, }, public, AbstractNodeTypePruningCallback, (, Set, <, Integer, >, nodeTypes, ,, boolean, include, ), {, this, ., nodeTypes, =]
[}, public, AbstractNodeTypePruningCallback, (, Set, <, Integer, >, nodeTypes, ,, boolean, include, ), {, this, ., nodeTypes, =, nodeTypes, ;]
[}, public, AbstractNodeTypePruningCallback, (, Set, <, Integer, >, nodeTypes, ,, boolean, include, ), {, this, ., nodeTypes, =, nodeTypes, ;]
[Set, <, Integer, >, nodeTypes, ,, boolean, include, ), {, this, ., nodeTypes, =, nodeTypes, ;, this, ., include, =]
[include, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[include, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return]
[}, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, include, ==]
[}, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, include, ==]
[boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, include, ==, nodeTypes, ., contains, (]
[boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, include, ==, nodeTypes, ., contains, (]
[., getType, (, ), ), ;, }, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ), {, this, (]
[(, ), ), ;, }, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ), {, this, (, compiler, ,]
[), ;, }, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ), {, this, (, compiler, ,, cb, ,]
[}, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ), {, this, (, compiler, ,, cb, ,, new, SyntacticScopeCreator, (]
[SyntacticScopeCreator, (, compiler, ), ), ;, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ,, ScopeCreator, scopeCreator, ), {]
[SyntacticScopeCreator, (, compiler, ), ), ;, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ,, ScopeCreator, scopeCreator, ), {]
[), ;, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ,, ScopeCreator, scopeCreator, ), {, this, ., callback, =]
[NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ,, ScopeCreator, scopeCreator, ), {, this, ., callback, =, cb, ;, if, (]
[NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ,, ScopeCreator, scopeCreator, ), {, this, ., callback, =, cb, ;, if, (]
[Callback, cb, ,, ScopeCreator, scopeCreator, ), {, this, ., callback, =, cb, ;, if, (, cb, instanceof, ScopedCallback, ), {]
[Callback, cb, ,, ScopeCreator, scopeCreator, ), {, this, ., callback, =, cb, ;, if, (, cb, instanceof, ScopedCallback, ), {]
[scopeCreator, ), {, this, ., callback, =, cb, ;, if, (, cb, instanceof, ScopedCallback, ), {, this, ., scopeCallback, =]
[this, ., callback, =, cb, ;, if, (, cb, instanceof, ScopedCallback, ), {, this, ., scopeCallback, =, (, ScopedCallback, )]
[=, cb, ;, if, (, cb, instanceof, ScopedCallback, ), {, this, ., scopeCallback, =, (, ScopedCallback, ), cb, ;, }]
[=, cb, ;, if, (, cb, instanceof, ScopedCallback, ), {, this, ., scopeCallback, =, (, ScopedCallback, ), cb, ;, }]
[(, cb, instanceof, ScopedCallback, ), {, this, ., scopeCallback, =, (, ScopedCallback, ), cb, ;, }, this, ., compiler, =]
[instanceof, ScopedCallback, ), {, this, ., scopeCallback, =, (, ScopedCallback, ), cb, ;, }, this, ., compiler, =, compiler, ;]
[instanceof, ScopedCallback, ), {, this, ., scopeCallback, =, (, ScopedCallback, ), cb, ;, }, this, ., compiler, =, compiler, ;]
[this, ., scopeCallback, =, (, ScopedCallback, ), cb, ;, }, this, ., compiler, =, compiler, ;, this, ., inputId, =]
[scopeCallback, =, (, ScopedCallback, ), cb, ;, }, this, ., compiler, =, compiler, ;, this, ., inputId, =, null, ;]
[scopeCallback, =, (, ScopedCallback, ), cb, ;, }, this, ., compiler, =, compiler, ;, this, ., inputId, =, null, ;]
[), cb, ;, }, this, ., compiler, =, compiler, ;, this, ., inputId, =, null, ;, this, ., sourceName, =]
[;, }, this, ., compiler, =, compiler, ;, this, ., inputId, =, null, ;, this, ., sourceName, =, "", ;]
[;, }, this, ., compiler, =, compiler, ;, this, ., inputId, =, null, ;, this, ., sourceName, =, "", ;]
[compiler, =, compiler, ;, this, ., inputId, =, null, ;, this, ., sourceName, =, "", ;, this, ., scopeCreator, =]
["", ;, this, ., scopeCreator, =, scopeCreator, ;, }, private, void, throwUnexpectedException, (, Exception, unexpectedException, ), {, String, message, =]
["", ;, this, ., scopeCreator, =, scopeCreator, ;, }, private, void, throwUnexpectedException, (, Exception, unexpectedException, ), {, String, message, =]
[}, private, void, throwUnexpectedException, (, Exception, unexpectedException, ), {, String, message, =, unexpectedException, ., getMessage, (, ), ;, if, (]
[}, private, void, throwUnexpectedException, (, Exception, unexpectedException, ), {, String, message, =, unexpectedException, ., getMessage, (, ), ;, if, (]
[void, throwUnexpectedException, (, Exception, unexpectedException, ), {, String, message, =, unexpectedException, ., getMessage, (, ), ;, if, (, inputId, !=]
[Exception, unexpectedException, ), {, String, message, =, unexpectedException, ., getMessage, (, ), ;, if, (, inputId, !=, null, ), {]
[), {, String, message, =, unexpectedException, ., getMessage, (, ), ;, if, (, inputId, !=, null, ), {, message, =]
[), {, String, message, =, unexpectedException, ., getMessage, (, ), ;, if, (, inputId, !=, null, ), {, message, =]
[), {, String, message, =, unexpectedException, ., getMessage, (, ), ;, if, (, inputId, !=, null, ), {, message, =]
[), {, String, message, =, unexpectedException, ., getMessage, (, ), ;, if, (, inputId, !=, null, ), {, message, =]
[), {, String, message, =, unexpectedException, ., getMessage, (, ), ;, if, (, inputId, !=, null, ), {, message, =]
[., getMessage, (, ), ;, if, (, inputId, !=, null, ), {, message, =, unexpectedException, ., getMessage, (, ), +]
[(, ), ;, if, (, inputId, !=, null, ), {, message, =, unexpectedException, ., getMessage, (, ), +, "\n", +]
[;, if, (, inputId, !=, null, ), {, message, =, unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (]
[(, inputId, !=, null, ), {, message, =, unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,]
[null, ), {, message, =, unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +]
[), {, message, =, unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (]
[), {, message, =, unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (]
[), {, message, =, unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (]
[message, =, unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (, curNode, ==]
[unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (, curNode, ==, null, ?]
[getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (, curNode, ==, null, ?, "", :]
[), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (, curNode, ==, null, ?, "", :, formatNodeContext, (]
["\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (, curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent", ,]
["\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (, curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent", ,]
[(, curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), ), ), ;, }]
[(, curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), ), ), ;, }]
[?, "", :, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), ), ), ;, }, compiler, ., throwInternalError, (]
[:, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), ), ), ;, }, compiler, ., throwInternalError, (, message, ,]
[(, message, ,, unexpectedException, ), ;, }, private, String, formatNodeContext, (, String, label, ,, Node, n, ), {, if, (]
[(, message, ,, unexpectedException, ), ;, }, private, String, formatNodeContext, (, String, label, ,, Node, n, ), {, if, (]
[,, unexpectedException, ), ;, }, private, String, formatNodeContext, (, String, label, ,, Node, n, ), {, if, (, n, ==]
[}, private, String, formatNodeContext, (, String, label, ,, Node, n, ), {, if, (, n, ==, null, ), {, return]
[}, private, String, formatNodeContext, (, String, label, ,, Node, n, ), {, if, (, n, ==, null, ), {, return]
[}, private, String, formatNodeContext, (, String, label, ,, Node, n, ), {, if, (, n, ==, null, ), {, return]
[String, formatNodeContext, (, String, label, ,, Node, n, ), {, if, (, n, ==, null, ), {, return, "  ", +]
[(, String, label, ,, Node, n, ), {, if, (, n, ==, null, ), {, return, "  ", +, label, +]
[Node, n, ), {, if, (, n, ==, null, ), {, return, "  ", +, label, +, ": NULL", ;, }, return]
[Node, n, ), {, if, (, n, ==, null, ), {, return, "  ", +, label, +, ": NULL", ;, }, return]
[Node, n, ), {, if, (, n, ==, null, ), {, return, "  ", +, label, +, ": NULL", ;, }, return]
[Node, n, ), {, if, (, n, ==, null, ), {, return, "  ", +, label, +, ": NULL", ;, }, return]
[Node, n, ), {, if, (, n, ==, null, ), {, return, "  ", +, label, +, ": NULL", ;, }, return]
[Node, n, ), {, if, (, n, ==, null, ), {, return, "  ", +, label, +, ": NULL", ;, }, return]
[), {, if, (, n, ==, null, ), {, return, "  ", +, label, +, ": NULL", ;, }, return, "  ", +]
[if, (, n, ==, null, ), {, return, "  ", +, label, +, ": NULL", ;, }, return, "  ", +, label, +]
[n, ==, null, ), {, return, "  ", +, label, +, ": NULL", ;, }, return, "  ", +, label, +, "(", +]
[n, ==, null, ), {, return, "  ", +, label, +, ": NULL", ;, }, return, "  ", +, label, +, "(", +]
[{, return, "  ", +, label, +, ": NULL", ;, }, return, "  ", +, label, +, "(", +, n, ., toString, (]
["  ", +, label, +, ": NULL", ;, }, return, "  ", +, label, +, "(", +, n, ., toString, (, false, ,]
[label, +, ": NULL", ;, }, return, "  ", +, label, +, "(", +, n, ., toString, (, false, ,, false, ,]
[;, }, return, "  ", +, label, +, "(", +, n, ., toString, (, false, ,, false, ,, false, ), +]
[return, "  ", +, label, +, "(", +, n, ., toString, (, false, ,, false, ,, false, ), +, "): ", +]
[+, label, +, "(", +, n, ., toString, (, false, ,, false, ,, false, ), +, "): ", +, formatNodePosition, (]
[), +, "): ", +, formatNodePosition, (, n, ), ;, }, public, void, traverse, (, Node, root, ), {, try, {]
["): ", +, formatNodePosition, (, n, ), ;, }, public, void, traverse, (, Node, root, ), {, try, {, inputId, =]
["): ", +, formatNodePosition, (, n, ), ;, }, public, void, traverse, (, Node, root, ), {, try, {, inputId, =]
[n, ), ;, }, public, void, traverse, (, Node, root, ), {, try, {, inputId, =, NodeUtil, ., getInputId, (]
[}, public, void, traverse, (, Node, root, ), {, try, {, inputId, =, NodeUtil, ., getInputId, (, root, ), ;]
[void, traverse, (, Node, root, ), {, try, {, inputId, =, NodeUtil, ., getInputId, (, root, ), ;, sourceName, =]
[(, Node, root, ), {, try, {, inputId, =, NodeUtil, ., getInputId, (, root, ), ;, sourceName, =, "", ;]
[root, ), {, try, {, inputId, =, NodeUtil, ., getInputId, (, root, ), ;, sourceName, =, "", ;, curNode, =]
[{, try, {, inputId, =, NodeUtil, ., getInputId, (, root, ), ;, sourceName, =, "", ;, curNode, =, root, ;]
[{, inputId, =, NodeUtil, ., getInputId, (, root, ), ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (]
[NodeUtil, ., getInputId, (, root, ), ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, root, ), ;]
[getInputId, (, root, ), ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, root, ), ;, traverseBranch, (]
[root, ), ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, root, ), ;, traverseBranch, (, root, ,]
[sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, root, ), ;, traverseBranch, (, root, ,, null, ), ;]
[), ;, traverseBranch, (, root, ,, null, ), ;, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, ), {]
[traverseBranch, (, root, ,, null, ), ;, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, ), {, throwUnexpectedException, (]
[Exception, unexpectedException, ), {, throwUnexpectedException, (, unexpectedException, ), ;, }, }, public, void, traverseRoots, (, Node, ..., roots, ), {]
[), {, throwUnexpectedException, (, unexpectedException, ), ;, }, }, public, void, traverseRoots, (, Node, ..., roots, ), {, traverseRoots, (]
[), {, throwUnexpectedException, (, unexpectedException, ), ;, }, }, public, void, traverseRoots, (, Node, ..., roots, ), {, traverseRoots, (]
[unexpectedException, ), ;, }, }, public, void, traverseRoots, (, Node, ..., roots, ), {, traverseRoots, (, Lists, ., newArrayList, (]
[newArrayList, (, roots, ), ), ;, }, public, void, traverseRoots, (, List, <, Node, >, roots, ), {, if, (]
[newArrayList, (, roots, ), ), ;, }, public, void, traverseRoots, (, List, <, Node, >, roots, ), {, if, (]
[roots, ), {, if, (, roots, ., isEmpty, (, ), ), {, return, ;, }, try, {, Node, scopeRoot, =]
[roots, ), {, if, (, roots, ., isEmpty, (, ), ), {, return, ;, }, try, {, Node, scopeRoot, =]
[roots, ), {, if, (, roots, ., isEmpty, (, ), ), {, return, ;, }, try, {, Node, scopeRoot, =]
[(, roots, ., isEmpty, (, ), ), {, return, ;, }, try, {, Node, scopeRoot, =, roots, ., get, (]
[{, return, ;, }, try, {, Node, scopeRoot, =, roots, ., get, (, 0, ), ., getParent, (, ), ;]
[{, return, ;, }, try, {, Node, scopeRoot, =, roots, ., get, (, 0, ), ., getParent, (, ), ;]
[try, {, Node, scopeRoot, =, roots, ., get, (, 0, ), ., getParent, (, ), ;, Preconditions, ., checkState, (]
[try, {, Node, scopeRoot, =, roots, ., get, (, 0, ), ., getParent, (, ), ;, Preconditions, ., checkState, (]
[Node, scopeRoot, =, roots, ., get, (, 0, ), ., getParent, (, ), ;, Preconditions, ., checkState, (, scopeRoot, !=]
[roots, ., get, (, 0, ), ., getParent, (, ), ;, Preconditions, ., checkState, (, scopeRoot, !=, null, ), ;]
[get, (, 0, ), ., getParent, (, ), ;, Preconditions, ., checkState, (, scopeRoot, !=, null, ), ;, inputId, =]
[get, (, 0, ), ., getParent, (, ), ;, Preconditions, ., checkState, (, scopeRoot, !=, null, ), ;, inputId, =]
[., getParent, (, ), ;, Preconditions, ., checkState, (, scopeRoot, !=, null, ), ;, inputId, =, NodeUtil, ., getInputId, (]
[), ;, Preconditions, ., checkState, (, scopeRoot, !=, null, ), ;, inputId, =, NodeUtil, ., getInputId, (, scopeRoot, ), ;]
[Preconditions, ., checkState, (, scopeRoot, !=, null, ), ;, inputId, =, NodeUtil, ., getInputId, (, scopeRoot, ), ;, sourceName, =]
[checkState, (, scopeRoot, !=, null, ), ;, inputId, =, NodeUtil, ., getInputId, (, scopeRoot, ), ;, sourceName, =, "", ;]
[scopeRoot, !=, null, ), ;, inputId, =, NodeUtil, ., getInputId, (, scopeRoot, ), ;, sourceName, =, "", ;, curNode, =]
[null, ), ;, inputId, =, NodeUtil, ., getInputId, (, scopeRoot, ), ;, sourceName, =, "", ;, curNode, =, scopeRoot, ;]
[;, inputId, =, NodeUtil, ., getInputId, (, scopeRoot, ), ;, sourceName, =, "", ;, curNode, =, scopeRoot, ;, pushScope, (]
[), ;, sourceName, =, "", ;, curNode, =, scopeRoot, ;, pushScope, (, scopeRoot, ), ;, for, (, Node, root, :]
[=, "", ;, curNode, =, scopeRoot, ;, pushScope, (, scopeRoot, ), ;, for, (, Node, root, :, roots, ), {]
[=, "", ;, curNode, =, scopeRoot, ;, pushScope, (, scopeRoot, ), ;, for, (, Node, root, :, roots, ), {]
[=, scopeRoot, ;, pushScope, (, scopeRoot, ), ;, for, (, Node, root, :, roots, ), {, Preconditions, ., checkState, (]
[=, scopeRoot, ;, pushScope, (, scopeRoot, ), ;, for, (, Node, root, :, roots, ), {, Preconditions, ., checkState, (]
[=, scopeRoot, ;, pushScope, (, scopeRoot, ), ;, for, (, Node, root, :, roots, ), {, Preconditions, ., checkState, (]
[), ;, for, (, Node, root, :, roots, ), {, Preconditions, ., checkState, (, root, ., getParent, (, ), ==]
[(, Node, root, :, roots, ), {, Preconditions, ., checkState, (, root, ., getParent, (, ), ==, scopeRoot, ), ;]
[root, :, roots, ), {, Preconditions, ., checkState, (, root, ., getParent, (, ), ==, scopeRoot, ), ;, traverseBranch, (]
[roots, ), {, Preconditions, ., checkState, (, root, ., getParent, (, ), ==, scopeRoot, ), ;, traverseBranch, (, root, ,]
[., checkState, (, root, ., getParent, (, ), ==, scopeRoot, ), ;, traverseBranch, (, root, ,, scopeRoot, ), ;, }]
[;, traverseBranch, (, root, ,, scopeRoot, ), ;, }, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, ), {]
[(, root, ,, scopeRoot, ), ;, }, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, ), {, throwUnexpectedException, (]
[}, catch, (, Exception, unexpectedException, ), {, throwUnexpectedException, (, unexpectedException, ), ;, }, }, private, static, final, String, MISSING_SOURCE, =]
[}, private, static, final, String, MISSING_SOURCE, =, "[source unknown]", ;, private, String, formatNodePosition, (, Node, n, ), {, String, sourceFileName, =]
[static, final, String, MISSING_SOURCE, =, "[source unknown]", ;, private, String, formatNodePosition, (, Node, n, ), {, String, sourceFileName, =, getBestSourceFileName, (]
["[source unknown]", ;, private, String, formatNodePosition, (, Node, n, ), {, String, sourceFileName, =, getBestSourceFileName, (, n, ), ;, if, (]
["[source unknown]", ;, private, String, formatNodePosition, (, Node, n, ), {, String, sourceFileName, =, getBestSourceFileName, (, n, ), ;, if, (]
[private, String, formatNodePosition, (, Node, n, ), {, String, sourceFileName, =, getBestSourceFileName, (, n, ), ;, if, (, sourceFileName, ==]
[Node, n, ), {, String, sourceFileName, =, getBestSourceFileName, (, n, ), ;, if, (, sourceFileName, ==, null, ), {, return]
[Node, n, ), {, String, sourceFileName, =, getBestSourceFileName, (, n, ), ;, if, (, sourceFileName, ==, null, ), {, return]
[), {, String, sourceFileName, =, getBestSourceFileName, (, n, ), ;, if, (, sourceFileName, ==, null, ), {, return, MISSING_SOURCE, +]
[(, n, ), ;, if, (, sourceFileName, ==, null, ), {, return, MISSING_SOURCE, +, "\n", ;, }, int, lineNumber, =]
[(, n, ), ;, if, (, sourceFileName, ==, null, ), {, return, MISSING_SOURCE, +, "\n", ;, }, int, lineNumber, =]
[), {, return, MISSING_SOURCE, +, "\n", ;, }, int, lineNumber, =, n, ., getLineno, (, ), ;, int, columnNumber, =]
[), {, return, MISSING_SOURCE, +, "\n", ;, }, int, lineNumber, =, n, ., getLineno, (, ), ;, int, columnNumber, =]
[lineNumber, =, n, ., getLineno, (, ), ;, int, columnNumber, =, n, ., getCharno, (, ), ;, String, src, =]
[lineNumber, =, n, ., getLineno, (, ), ;, int, columnNumber, =, n, ., getCharno, (, ), ;, String, src, =]
[getLineno, (, ), ;, int, columnNumber, =, n, ., getCharno, (, ), ;, String, src, =, compiler, ., getSourceLine, (]
[), ;, int, columnNumber, =, n, ., getCharno, (, ), ;, String, src, =, compiler, ., getSourceLine, (, sourceFileName, ,]
[n, ., getCharno, (, ), ;, String, src, =, compiler, ., getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (]
[n, ., getCharno, (, ), ;, String, src, =, compiler, ., getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (]
[getCharno, (, ), ;, String, src, =, compiler, ., getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src, ==]
[;, String, src, =, compiler, ., getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src, ==, null, ), {]
[src, =, compiler, ., getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src, ==, null, ), {, src, =]
[getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return]
[getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return]
[getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return]
[getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return]
[getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return]
[getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return]
[getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return]
[getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return]
[sourceFileName, ,, lineNumber, ), ;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return, sourceFileName, +]
[lineNumber, ), ;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return, sourceFileName, +, ":", +]
[;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return, sourceFileName, +, ":", +, lineNumber, +]
[(, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return, sourceFileName, +, ":", +, lineNumber, +, ":", +]
[==, null, ), {, src, =, MISSING_SOURCE, ;, }, return, sourceFileName, +, ":", +, lineNumber, +, ":", +, columnNumber, +]
[), {, src, =, MISSING_SOURCE, ;, }, return, sourceFileName, +, ":", +, lineNumber, +, ":", +, columnNumber, +, "\n", +]
[src, =, MISSING_SOURCE, ;, }, return, sourceFileName, +, ":", +, lineNumber, +, ":", +, columnNumber, +, "\n", +, src, +]
[+, columnNumber, +, "\n", +, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {]
[+, columnNumber, +, "\n", +, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {]
[+, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {, Preconditions, ., checkState, (]
[+, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {, Preconditions, ., checkState, (]
[traverseWithScope, (, Node, root, ,, Scope, s, ), {, Preconditions, ., checkState, (, s, ., isGlobal, (, ), ), ;]
[Node, root, ,, Scope, s, ), {, Preconditions, ., checkState, (, s, ., isGlobal, (, ), ), ;, inputId, =]
[,, Scope, s, ), {, Preconditions, ., checkState, (, s, ., isGlobal, (, ), ), ;, inputId, =, null, ;]
[s, ), {, Preconditions, ., checkState, (, s, ., isGlobal, (, ), ), ;, inputId, =, null, ;, sourceName, =]
[{, Preconditions, ., checkState, (, s, ., isGlobal, (, ), ), ;, inputId, =, null, ;, sourceName, =, "", ;]
[., checkState, (, s, ., isGlobal, (, ), ), ;, inputId, =, null, ;, sourceName, =, "", ;, curNode, =]
[(, s, ., isGlobal, (, ), ), ;, inputId, =, null, ;, sourceName, =, "", ;, curNode, =, root, ;]
[., isGlobal, (, ), ), ;, inputId, =, null, ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (]
[), ), ;, inputId, =, null, ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, s, ), ;]
[;, inputId, =, null, ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, s, ), ;, traverseBranch, (]
[=, null, ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, s, ), ;, traverseBranch, (, root, ,]
[sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, s, ), ;, traverseBranch, (, root, ,, null, ), ;]
[root, ,, null, ), ;, popScope, (, ), ;, }, void, traverseAtScope, (, Scope, s, ), {, Node, n, =]
[root, ,, null, ), ;, popScope, (, ), ;, }, void, traverseAtScope, (, Scope, s, ), {, Node, n, =]
[;, }, void, traverseAtScope, (, Scope, s, ), {, Node, n, =, s, ., getRootNode, (, ), ;, if, (]
[;, }, void, traverseAtScope, (, Scope, s, ), {, Node, n, =, s, ., getRootNode, (, ), ;, if, (]
[Node, n, =, s, ., getRootNode, (, ), ;, if, (, n, ., isFunction, (, ), ), {, if, (]
[Node, n, =, s, ., getRootNode, (, ), ;, if, (, n, ., isFunction, (, ), ), {, if, (]
[=, s, ., getRootNode, (, ), ;, if, (, n, ., isFunction, (, ), ), {, if, (, inputId, ==]
[getRootNode, (, ), ;, if, (, n, ., isFunction, (, ), ), {, if, (, inputId, ==, null, ), {]
[), ;, if, (, n, ., isFunction, (, ), ), {, if, (, inputId, ==, null, ), {, inputId, =]
[), ;, if, (, n, ., isFunction, (, ), ), {, if, (, inputId, ==, null, ), {, inputId, =]
[n, ., isFunction, (, ), ), {, if, (, inputId, ==, null, ), {, inputId, =, NodeUtil, ., getInputId, (]
[), ), {, if, (, inputId, ==, null, ), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }]
[{, if, (, inputId, ==, null, ), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, sourceName, =]
[(, inputId, ==, null, ), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, sourceName, =, getSourceName, (]
[null, ), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, sourceName, =, getSourceName, (, n, ), ;]
[{, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, sourceName, =, getSourceName, (, n, ), ;, curNode, =]
[=, NodeUtil, ., getInputId, (, n, ), ;, }, sourceName, =, getSourceName, (, n, ), ;, curNode, =, n, ;]
[., getInputId, (, n, ), ;, }, sourceName, =, getSourceName, (, n, ), ;, curNode, =, n, ;, pushScope, (]
[}, sourceName, =, getSourceName, (, n, ), ;, curNode, =, n, ;, pushScope, (, s, ), ;, Node, args, =]
[}, sourceName, =, getSourceName, (, n, ), ;, curNode, =, n, ;, pushScope, (, s, ), ;, Node, args, =]
[}, sourceName, =, getSourceName, (, n, ), ;, curNode, =, n, ;, pushScope, (, s, ), ;, Node, args, =]
[(, s, ), ;, Node, args, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, body, =]
[(, s, ), ;, Node, args, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, body, =]
[=, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, body, =, args, ., getNext, (, ), ;]
[., getFirstChild, (, ), ., getNext, (, ), ;, Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (]
[(, ), ., getNext, (, ), ;, Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,]
[getNext, (, ), ;, Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;]
[), ;, Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;, traverseBranch, (]
[Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;, traverseBranch, (, body, ,]
[args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;, traverseBranch, (, body, ,, n, ), ;]
[(, args, ,, n, ), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }, else, {]
[,, n, ), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }, else, {, traverseWithScope, (]
[), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }, else, {, traverseWithScope, (, n, ,]
[,, s, ), ;, }, }, protected, void, traverseInnerNode, (, Node, node, ,, Node, parent, ,, Scope, refinedScope, ), {]
[,, s, ), ;, }, }, protected, void, traverseInnerNode, (, Node, node, ,, Node, parent, ,, Scope, refinedScope, ), {]
[}, }, protected, void, traverseInnerNode, (, Node, node, ,, Node, parent, ,, Scope, refinedScope, ), {, Preconditions, ., checkNotNull, (]
[(, Node, node, ,, Node, parent, ,, Scope, refinedScope, ), {, Preconditions, ., checkNotNull, (, parent, ), ;, if, (]
[(, Node, node, ,, Node, parent, ,, Scope, refinedScope, ), {, Preconditions, ., checkNotNull, (, parent, ), ;, if, (]
[(, Node, node, ,, Node, parent, ,, Scope, refinedScope, ), {, Preconditions, ., checkNotNull, (, parent, ), ;, if, (]
[node, ,, Node, parent, ,, Scope, refinedScope, ), {, Preconditions, ., checkNotNull, (, parent, ), ;, if, (, refinedScope, !=]
[Node, parent, ,, Scope, refinedScope, ), {, Preconditions, ., checkNotNull, (, parent, ), ;, if, (, refinedScope, !=, null, &&]
[Node, parent, ,, Scope, refinedScope, ), {, Preconditions, ., checkNotNull, (, parent, ), ;, if, (, refinedScope, !=, null, &&]
[refinedScope, ), {, Preconditions, ., checkNotNull, (, parent, ), ;, if, (, refinedScope, !=, null, &&, getScope, (, ), !=]
[Preconditions, ., checkNotNull, (, parent, ), ;, if, (, refinedScope, !=, null, &&, getScope, (, ), !=, refinedScope, ), {]
[checkNotNull, (, parent, ), ;, if, (, refinedScope, !=, null, &&, getScope, (, ), !=, refinedScope, ), {, curNode, =]
[parent, ), ;, if, (, refinedScope, !=, null, &&, getScope, (, ), !=, refinedScope, ), {, curNode, =, node, ;]
[;, if, (, refinedScope, !=, null, &&, getScope, (, ), !=, refinedScope, ), {, curNode, =, node, ;, pushScope, (]
[refinedScope, !=, null, &&, getScope, (, ), !=, refinedScope, ), {, curNode, =, node, ;, pushScope, (, refinedScope, ), ;]
[null, &&, getScope, (, ), !=, refinedScope, ), {, curNode, =, node, ;, pushScope, (, refinedScope, ), ;, traverseBranch, (]
[getScope, (, ), !=, refinedScope, ), {, curNode, =, node, ;, pushScope, (, refinedScope, ), ;, traverseBranch, (, node, ,]
[!=, refinedScope, ), {, curNode, =, node, ;, pushScope, (, refinedScope, ), ;, traverseBranch, (, node, ,, parent, ), ;]
[;, pushScope, (, refinedScope, ), ;, traverseBranch, (, node, ,, parent, ), ;, popScope, (, ), ;, }, else, {]
[(, refinedScope, ), ;, traverseBranch, (, node, ,, parent, ), ;, popScope, (, ), ;, }, else, {, traverseBranch, (]
[), ;, traverseBranch, (, node, ,, parent, ), ;, popScope, (, ), ;, }, else, {, traverseBranch, (, node, ,]
[;, }, else, {, traverseBranch, (, node, ,, parent, ), ;, }, }, public, Compiler, getCompiler, (, ), {, return]
[{, traverseBranch, (, node, ,, parent, ), ;, }, }, public, Compiler, getCompiler, (, ), {, return, (, Compiler, )]
[getCompiler, (, ), {, return, (, Compiler, ), compiler, ;, }, public, int, getLineNumber, (, ), {, Node, cur, =]
[return, (, Compiler, ), compiler, ;, }, public, int, getLineNumber, (, ), {, Node, cur, =, curNode, ;, while, (]
[return, (, Compiler, ), compiler, ;, }, public, int, getLineNumber, (, ), {, Node, cur, =, curNode, ;, while, (]
[Compiler, ), compiler, ;, }, public, int, getLineNumber, (, ), {, Node, cur, =, curNode, ;, while, (, cur, !=]
[int, getLineNumber, (, ), {, Node, cur, =, curNode, ;, while, (, cur, !=, null, ), {, int, line, =]
[int, getLineNumber, (, ), {, Node, cur, =, curNode, ;, while, (, cur, !=, null, ), {, int, line, =]
[curNode, ;, while, (, cur, !=, null, ), {, int, line, =, cur, ., getLineno, (, ), ;, if, (]
[curNode, ;, while, (, cur, !=, null, ), {, int, line, =, cur, ., getLineno, (, ), ;, if, (]
[while, (, cur, !=, null, ), {, int, line, =, cur, ., getLineno, (, ), ;, if, (, line, >=]
[null, ), {, int, line, =, cur, ., getLineno, (, ), ;, if, (, line, >=, 0, ), {, return]
[int, line, =, cur, ., getLineno, (, ), ;, if, (, line, >=, 0, ), {, return, line, ;, }]
[=, cur, ., getLineno, (, ), ;, if, (, line, >=, 0, ), {, return, line, ;, }, cur, =]
[=, cur, ., getLineno, (, ), ;, if, (, line, >=, 0, ), {, return, line, ;, }, cur, =]
[(, line, >=, 0, ), {, return, line, ;, }, cur, =, cur, ., getParent, (, ), ;, }, return]
[cur, =, cur, ., getParent, (, ), ;, }, return, 0, ;, }, public, String, getSourceName, (, ), {, return]
[0, ;, }, public, String, getSourceName, (, ), {, return, sourceName, ;, }, public, CompilerInput, getInput, (, ), {, return]
[0, ;, }, public, String, getSourceName, (, ), {, return, sourceName, ;, }, public, CompilerInput, getInput, (, ), {, return]
[String, getSourceName, (, ), {, return, sourceName, ;, }, public, CompilerInput, getInput, (, ), {, return, compiler, ., getInput, (]
[), {, return, compiler, ., getInput, (, inputId, ), ;, }, public, JSModule, getModule, (, ), {, CompilerInput, input, =]
[getInput, (, inputId, ), ;, }, public, JSModule, getModule, (, ), {, CompilerInput, input, =, getInput, (, ), ;, return]
[getInput, (, inputId, ), ;, }, public, JSModule, getModule, (, ), {, CompilerInput, input, =, getInput, (, ), ;, return]
[getInput, (, inputId, ), ;, }, public, JSModule, getModule, (, ), {, CompilerInput, input, =, getInput, (, ), ;, return]
[inputId, ), ;, }, public, JSModule, getModule, (, ), {, CompilerInput, input, =, getInput, (, ), ;, return, input, ==]
[;, }, public, JSModule, getModule, (, ), {, CompilerInput, input, =, getInput, (, ), ;, return, input, ==, null, ?]
[public, JSModule, getModule, (, ), {, CompilerInput, input, =, getInput, (, ), ;, return, input, ==, null, ?, null, :]
[public, JSModule, getModule, (, ), {, CompilerInput, input, =, getInput, (, ), ;, return, input, ==, null, ?, null, :]
[input, ==, null, ?, null, :, input, ., getModule, (, ), ;, }, public, Node, getCurrentNode, (, ), {, return]
[;, }, public, static, void, traverse, (, AbstractCompiler, compiler, ,, Node, root, ,, Callback, cb, ), {, NodeTraversal, t, =]
[static, void, traverse, (, AbstractCompiler, compiler, ,, Node, root, ,, Callback, cb, ), {, NodeTraversal, t, =, new, NodeTraversal, (]
[traverse, (, AbstractCompiler, compiler, ,, Node, root, ,, Callback, cb, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,]
[compiler, ,, Node, root, ,, Callback, cb, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, cb, ), ;]
[compiler, ,, Node, root, ,, Callback, cb, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, cb, ), ;]
[,, Callback, cb, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, cb, ), ;, t, ., traverse, (]
[static, void, traverseRoots, (, AbstractCompiler, compiler, ,, List, <, Node, >, roots, ,, Callback, cb, ), {, NodeTraversal, t, =]
[(, AbstractCompiler, compiler, ,, List, <, Node, >, roots, ,, Callback, cb, ), {, NodeTraversal, t, =, new, NodeTraversal, (]
[compiler, ,, List, <, Node, >, roots, ,, Callback, cb, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,]
[<, Node, >, roots, ,, Callback, cb, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, cb, ), ;]
[<, Node, >, roots, ,, Callback, cb, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, cb, ), ;]
[,, Callback, cb, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, cb, ), ;, t, ., traverseRoots, (]
[}, public, static, void, traverseRoots, (, AbstractCompiler, compiler, ,, Callback, cb, ,, Node, ..., roots, ), {, NodeTraversal, t, =]
[void, traverseRoots, (, AbstractCompiler, compiler, ,, Callback, cb, ,, Node, ..., roots, ), {, NodeTraversal, t, =, new, NodeTraversal, (]
[(, AbstractCompiler, compiler, ,, Callback, cb, ,, Node, ..., roots, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,]
[,, Callback, cb, ,, Node, ..., roots, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, cb, ), ;]
[,, Callback, cb, ,, Node, ..., roots, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, cb, ), ;]
[Node, ..., roots, ), {, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, cb, ), ;, t, ., traverseRoots, (]
[{, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, cb, ), ;, t, ., traverseRoots, (, roots, ), ;, }]
[=, new, NodeTraversal, (, compiler, ,, cb, ), ;, t, ., traverseRoots, (, roots, ), ;, }, @, SuppressWarnings, (]
[}, @, SuppressWarnings, (, "fallthrough", ), private, void, traverseBranch, (, Node, n, ,, Node, parent, ), {, int, type, =]
[}, @, SuppressWarnings, (, "fallthrough", ), private, void, traverseBranch, (, Node, n, ,, Node, parent, ), {, int, type, =]
[traverseBranch, (, Node, n, ,, Node, parent, ), {, int, type, =, n, ., getType, (, ), ;, if, (]
[traverseBranch, (, Node, n, ,, Node, parent, ), {, int, type, =, n, ., getType, (, ), ;, if, (]
[Node, n, ,, Node, parent, ), {, int, type, =, n, ., getType, (, ), ;, if, (, type, ==]
[Node, n, ,, Node, parent, ), {, int, type, =, n, ., getType, (, ), ;, if, (, type, ==]
[), {, int, type, =, n, ., getType, (, ), ;, if, (, type, ==, Token, ., SCRIPT, ), {]
[int, type, =, n, ., getType, (, ), ;, if, (, type, ==, Token, ., SCRIPT, ), {, inputId, =]
[int, type, =, n, ., getType, (, ), ;, if, (, type, ==, Token, ., SCRIPT, ), {, inputId, =]
[(, ), ;, if, (, type, ==, Token, ., SCRIPT, ), {, inputId, =, n, ., getInputId, (, ), ;]
[;, if, (, type, ==, Token, ., SCRIPT, ), {, inputId, =, n, ., getInputId, (, ), ;, sourceName, =]
[(, type, ==, Token, ., SCRIPT, ), {, inputId, =, n, ., getInputId, (, ), ;, sourceName, =, getSourceName, (]
[., SCRIPT, ), {, inputId, =, n, ., getInputId, (, ), ;, sourceName, =, getSourceName, (, n, ), ;, }]
[), {, inputId, =, n, ., getInputId, (, ), ;, sourceName, =, getSourceName, (, n, ), ;, }, curNode, =]
[n, ., getInputId, (, ), ;, sourceName, =, getSourceName, (, n, ), ;, }, curNode, =, n, ;, if, (]
[., getInputId, (, ), ;, sourceName, =, getSourceName, (, n, ), ;, }, curNode, =, n, ;, if, (, !]
[., getInputId, (, ), ;, sourceName, =, getSourceName, (, n, ), ;, }, curNode, =, n, ;, if, (, !]
[;, sourceName, =, getSourceName, (, n, ), ;, }, curNode, =, n, ;, if, (, !, callback, ., shouldTraverse, (]
[=, getSourceName, (, n, ), ;, }, curNode, =, n, ;, if, (, !, callback, ., shouldTraverse, (, this, ,]
[(, n, ), ;, }, curNode, =, n, ;, if, (, !, callback, ., shouldTraverse, (, this, ,, n, ,]
[n, ;, if, (, !, callback, ., shouldTraverse, (, this, ,, n, ,, parent, ), ), return, ;, switch, (]
[!, callback, ., shouldTraverse, (, this, ,, n, ,, parent, ), ), return, ;, switch, (, type, ), {, case]
[!, callback, ., shouldTraverse, (, this, ,, n, ,, parent, ), ), return, ;, switch, (, type, ), {, case]
[(, this, ,, n, ,, parent, ), ), return, ;, switch, (, type, ), {, case, Token, ., FUNCTION, :]
[,, n, ,, parent, ), ), return, ;, switch, (, type, ), {, case, Token, ., FUNCTION, :, traverseFunction, (]
[,, parent, ), ), return, ;, switch, (, type, ), {, case, Token, ., FUNCTION, :, traverseFunction, (, n, ,]
[Token, ., FUNCTION, :, traverseFunction, (, n, ,, parent, ), ;, break, ;, default, :, for, (, Node, child, =]
[Token, ., FUNCTION, :, traverseFunction, (, n, ,, parent, ), ;, break, ;, default, :, for, (, Node, child, =]
[n, ,, parent, ), ;, break, ;, default, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[n, ,, parent, ), ;, break, ;, default, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[parent, ), ;, break, ;, default, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =]
[for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =]
[., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;]
[(, ), ;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, traverseBranch, (]
[;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, traverseBranch, (, child, ,]
[null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, traverseBranch, (, child, ,, n, ), ;]
[), {, Node, next, =, child, ., getNext, (, ), ;, traverseBranch, (, child, ,, n, ), ;, child, =]
[., getNext, (, ), ;, traverseBranch, (, child, ,, n, ), ;, child, =, next, ;, }, break, ;, }]
[(, ), ;, traverseBranch, (, child, ,, n, ), ;, child, =, next, ;, }, break, ;, }, curNode, =]
[;, traverseBranch, (, child, ,, n, ), ;, child, =, next, ;, }, break, ;, }, curNode, =, n, ;]
[;, traverseBranch, (, child, ,, n, ), ;, child, =, next, ;, }, break, ;, }, curNode, =, n, ;]
[,, n, ), ;, child, =, next, ;, }, break, ;, }, curNode, =, n, ;, callback, ., visit, (]
[), ;, child, =, next, ;, }, break, ;, }, curNode, =, n, ;, callback, ., visit, (, this, ,]
[child, =, next, ;, }, break, ;, }, curNode, =, n, ;, callback, ., visit, (, this, ,, n, ,]
[(, this, ,, n, ,, parent, ), ;, }, private, void, traverseFunction, (, Node, n, ,, Node, parent, ), {]
[(, this, ,, n, ,, parent, ), ;, }, private, void, traverseFunction, (, Node, n, ,, Node, parent, ), {]
[,, parent, ), ;, }, private, void, traverseFunction, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[,, parent, ), ;, }, private, void, traverseFunction, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[,, parent, ), ;, }, private, void, traverseFunction, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[void, traverseFunction, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==]
[Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 3, ), ;]
[Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 3, ), ;]
[parent, ), {, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 3, ), ;, Preconditions, ., checkState, (]
[parent, ), {, Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 3, ), ;, Preconditions, ., checkState, (]
[), ==, 3, ), ;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, fnName, =]
[), ==, 3, ), ;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, fnName, =]
[n, ., isFunction, (, ), ), ;, final, Node, fnName, =, n, ., getFirstChild, (, ), ;, boolean, isFunctionExpression, =]
[n, ., isFunction, (, ), ), ;, final, Node, fnName, =, n, ., getFirstChild, (, ), ;, boolean, isFunctionExpression, =]
[., isFunction, (, ), ), ;, final, Node, fnName, =, n, ., getFirstChild, (, ), ;, boolean, isFunctionExpression, =, (]
[., isFunction, (, ), ), ;, final, Node, fnName, =, n, ., getFirstChild, (, ), ;, boolean, isFunctionExpression, =, (]
[(, ), ), ;, final, Node, fnName, =, n, ., getFirstChild, (, ), ;, boolean, isFunctionExpression, =, (, parent, !=]
[;, final, Node, fnName, =, n, ., getFirstChild, (, ), ;, boolean, isFunctionExpression, =, (, parent, !=, null, ), &&]
[;, final, Node, fnName, =, n, ., getFirstChild, (, ), ;, boolean, isFunctionExpression, =, (, parent, !=, null, ), &&]
[=, n, ., getFirstChild, (, ), ;, boolean, isFunctionExpression, =, (, parent, !=, null, ), &&, NodeUtil, ., isFunctionExpression, (]
[), ;, boolean, isFunctionExpression, =, (, parent, !=, null, ), &&, NodeUtil, ., isFunctionExpression, (, n, ), ;, if, (]
[;, boolean, isFunctionExpression, =, (, parent, !=, null, ), &&, NodeUtil, ., isFunctionExpression, (, n, ), ;, if, (, !]
[=, (, parent, !=, null, ), &&, NodeUtil, ., isFunctionExpression, (, n, ), ;, if, (, !, isFunctionExpression, ), {]
[parent, !=, null, ), &&, NodeUtil, ., isFunctionExpression, (, n, ), ;, if, (, !, isFunctionExpression, ), {, traverseBranch, (]
[null, ), &&, NodeUtil, ., isFunctionExpression, (, n, ), ;, if, (, !, isFunctionExpression, ), {, traverseBranch, (, fnName, ,]
[., isFunctionExpression, (, n, ), ;, if, (, !, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;, }]
[(, n, ), ;, if, (, !, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;, }, curNode, =]
[), ;, if, (, !, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;, }, curNode, =, n, ;]
[if, (, !, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;, }, curNode, =, n, ;, pushScope, (]
[{, traverseBranch, (, fnName, ,, n, ), ;, }, curNode, =, n, ;, pushScope, (, n, ), ;, if, (]
[fnName, ,, n, ), ;, }, curNode, =, n, ;, pushScope, (, n, ), ;, if, (, isFunctionExpression, ), {]
[n, ), ;, }, curNode, =, n, ;, pushScope, (, n, ), ;, if, (, isFunctionExpression, ), {, traverseBranch, (]
[;, }, curNode, =, n, ;, pushScope, (, n, ), ;, if, (, isFunctionExpression, ), {, traverseBranch, (, fnName, ,]
[n, ), ;, if, (, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;, }, final, Node, args, =]
[n, ), ;, if, (, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;, }, final, Node, args, =]
[fnName, ,, n, ), ;, }, final, Node, args, =, fnName, ., getNext, (, ), ;, final, Node, body, =]
[fnName, ,, n, ), ;, }, final, Node, args, =, fnName, ., getNext, (, ), ;, final, Node, body, =]
[final, Node, args, =, fnName, ., getNext, (, ), ;, final, Node, body, =, args, ., getNext, (, ), ;]
[args, =, fnName, ., getNext, (, ), ;, final, Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (]
[fnName, ., getNext, (, ), ;, final, Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,]
[(, ), ;, final, Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;]
[(, ), ;, final, Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;]
[Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;, Preconditions, ., checkState, (]
[Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;, Preconditions, ., checkState, (]
[Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;, Preconditions, ., checkState, (]
[Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;, Preconditions, ., checkState, (]
[(, ), ;, traverseBranch, (, args, ,, n, ), ;, Preconditions, ., checkState, (, body, ., getNext, (, ), ==]
[;, traverseBranch, (, args, ,, n, ), ;, Preconditions, ., checkState, (, body, ., getNext, (, ), ==, null, &&]
[;, traverseBranch, (, args, ,, n, ), ;, Preconditions, ., checkState, (, body, ., getNext, (, ), ==, null, &&]
[), ;, Preconditions, ., checkState, (, body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ,]
[., checkState, (, body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ,, body, ), ;]
[(, body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ,, body, ), ;, traverseBranch, (]
[., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ,, body, ), ;, traverseBranch, (, body, ,]
[), ==, null, &&, body, ., isBlock, (, ), ,, body, ), ;, traverseBranch, (, body, ,, n, ), ;]
[., isBlock, (, ), ,, body, ), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }]
[), ,, body, ), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }, @, SuppressWarnings, (]
[), ;, popScope, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), public, Node, getEnclosingFunction, (, ), {, if, (]
[), ;, popScope, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), public, Node, getEnclosingFunction, (, ), {, if, (]
[), ;, popScope, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), public, Node, getEnclosingFunction, (, ), {, if, (]
[), ;, popScope, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), public, Node, getEnclosingFunction, (, ), {, if, (]
[}, @, SuppressWarnings, (, "unchecked", ), public, Node, getEnclosingFunction, (, ), {, if, (, scopes, ., size, (, ), +]
[}, @, SuppressWarnings, (, "unchecked", ), public, Node, getEnclosingFunction, (, ), {, if, (, scopes, ., size, (, ), +]
[public, Node, getEnclosingFunction, (, ), {, if, (, scopes, ., size, (, ), +, scopeRoots, ., size, (, ), <]
[), {, if, (, scopes, ., size, (, ), +, scopeRoots, ., size, (, ), <, 2, ), {, return]
[(, ), +, scopeRoots, ., size, (, ), <, 2, ), {, return, null, ;, }, else, {, if, (]
[(, ), +, scopeRoots, ., size, (, ), <, 2, ), {, return, null, ;, }, else, {, if, (]
[<, 2, ), {, return, null, ;, }, else, {, if, (, scopeRoots, ., isEmpty, (, ), ), {, return]
[<, 2, ), {, return, null, ;, }, else, {, if, (, scopeRoots, ., isEmpty, (, ), ), {, return]
[<, 2, ), {, return, null, ;, }, else, {, if, (, scopeRoots, ., isEmpty, (, ), ), {, return]
[isEmpty, (, ), ), {, return, scopes, ., peek, (, ), ., getRootNode, (, ), ;, }, else, {, return]
[isEmpty, (, ), ), {, return, scopes, ., peek, (, ), ., getRootNode, (, ), ;, }, else, {, return]
[else, {, return, scopeRoots, ., peek, (, ), ;, }, }, }, private, void, pushScope, (, Node, node, ), {]
[else, {, return, scopeRoots, ., peek, (, ), ;, }, }, }, private, void, pushScope, (, Node, node, ), {]
[., peek, (, ), ;, }, }, }, private, void, pushScope, (, Node, node, ), {, Preconditions, ., checkState, (]
[., peek, (, ), ;, }, }, }, private, void, pushScope, (, Node, node, ), {, Preconditions, ., checkState, (]
[(, ), ;, }, }, }, private, void, pushScope, (, Node, node, ), {, Preconditions, ., checkState, (, curNode, !=]
[}, }, }, private, void, pushScope, (, Node, node, ), {, Preconditions, ., checkState, (, curNode, !=, null, ), ;]
[}, }, }, private, void, pushScope, (, Node, node, ), {, Preconditions, ., checkState, (, curNode, !=, null, ), ;]
[void, pushScope, (, Node, node, ), {, Preconditions, ., checkState, (, curNode, !=, null, ), ;, scopeRoots, ., push, (]
[Node, node, ), {, Preconditions, ., checkState, (, curNode, !=, null, ), ;, scopeRoots, ., push, (, node, ), ;]
[Node, node, ), {, Preconditions, ., checkState, (, curNode, !=, null, ), ;, scopeRoots, ., push, (, node, ), ;]
[Preconditions, ., checkState, (, curNode, !=, null, ), ;, scopeRoots, ., push, (, node, ), ;, cfgs, ., push, (]
[!=, null, ), ;, scopeRoots, ., push, (, node, ), ;, cfgs, ., push, (, null, ), ;, if, (]
[!=, null, ), ;, scopeRoots, ., push, (, node, ), ;, cfgs, ., push, (, null, ), ;, if, (]
[), ;, scopeRoots, ., push, (, node, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=]
[., push, (, node, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {]
[., push, (, node, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {]
[), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., enterScope, (]
[null, ), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void, pushScope, (, Scope, s, ), {]
[null, ), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void, pushScope, (, Scope, s, ), {]
[., enterScope, (, this, ), ;, }, }, private, void, pushScope, (, Scope, s, ), {, Preconditions, ., checkState, (]
[., enterScope, (, this, ), ;, }, }, private, void, pushScope, (, Scope, s, ), {, Preconditions, ., checkState, (]
[(, this, ), ;, }, }, private, void, pushScope, (, Scope, s, ), {, Preconditions, ., checkState, (, curNode, !=]
[;, }, }, private, void, pushScope, (, Scope, s, ), {, Preconditions, ., checkState, (, curNode, !=, null, ), ;]
[;, }, }, private, void, pushScope, (, Scope, s, ), {, Preconditions, ., checkState, (, curNode, !=, null, ), ;]
[void, pushScope, (, Scope, s, ), {, Preconditions, ., checkState, (, curNode, !=, null, ), ;, scopes, ., push, (]
[Scope, s, ), {, Preconditions, ., checkState, (, curNode, !=, null, ), ;, scopes, ., push, (, s, ), ;]
[Scope, s, ), {, Preconditions, ., checkState, (, curNode, !=, null, ), ;, scopes, ., push, (, s, ), ;]
[Preconditions, ., checkState, (, curNode, !=, null, ), ;, scopes, ., push, (, s, ), ;, cfgs, ., push, (]
[!=, null, ), ;, scopes, ., push, (, s, ), ;, cfgs, ., push, (, null, ), ;, if, (]
[!=, null, ), ;, scopes, ., push, (, s, ), ;, cfgs, ., push, (, null, ), ;, if, (]
[), ;, scopes, ., push, (, s, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=]
[., push, (, s, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {]
[., push, (, s, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {]
[), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., enterScope, (]
[null, ), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void, popScope, (, ), {, if, (]
[null, ), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void, popScope, (, ), {, if, (]
[{, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void, popScope, (, ), {, if, (, scopeCallback, !=]
[enterScope, (, this, ), ;, }, }, private, void, popScope, (, ), {, if, (, scopeCallback, !=, null, ), {]
[enterScope, (, this, ), ;, }, }, private, void, popScope, (, ), {, if, (, scopeCallback, !=, null, ), {]
[;, }, }, private, void, popScope, (, ), {, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., exitScope, (]
[(, ), {, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., exitScope, (, this, ), ;, }, if, (]
[(, ), {, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., exitScope, (, this, ), ;, }, if, (]
[null, ), {, scopeCallback, ., exitScope, (, this, ), ;, }, if, (, scopeRoots, ., isEmpty, (, ), ), {]
[null, ), {, scopeCallback, ., exitScope, (, this, ), ;, }, if, (, scopeRoots, ., isEmpty, (, ), ), {]
[;, }, if, (, scopeRoots, ., isEmpty, (, ), ), {, scopes, ., pop, (, ), ;, }, else, {]
[;, }, if, (, scopeRoots, ., isEmpty, (, ), ), {, scopes, ., pop, (, ), ;, }, else, {]
[(, ), ), {, scopes, ., pop, (, ), ;, }, else, {, scopeRoots, ., pop, (, ), ;, }]
[(, ), ), {, scopes, ., pop, (, ), ;, }, else, {, scopeRoots, ., pop, (, ), ;, }]
[(, ), ;, }, cfgs, ., pop, (, ), ;, }, public, Scope, getScope, (, ), {, Scope, scope, =]
[(, ), ;, }, cfgs, ., pop, (, ), ;, }, public, Scope, getScope, (, ), {, Scope, scope, =]
[(, ), ;, }, cfgs, ., pop, (, ), ;, }, public, Scope, getScope, (, ), {, Scope, scope, =]
[pop, (, ), ;, }, public, Scope, getScope, (, ), {, Scope, scope, =, scopes, ., isEmpty, (, ), ?]
[), ;, }, public, Scope, getScope, (, ), {, Scope, scope, =, scopes, ., isEmpty, (, ), ?, null, :]
[), ;, }, public, Scope, getScope, (, ), {, Scope, scope, =, scopes, ., isEmpty, (, ), ?, null, :]
[{, Scope, scope, =, scopes, ., isEmpty, (, ), ?, null, :, scopes, ., peek, (, ), ;, if, (]
[{, Scope, scope, =, scopes, ., isEmpty, (, ), ?, null, :, scopes, ., peek, (, ), ;, if, (]
[), ?, null, :, scopes, ., peek, (, ), ;, if, (, scopeRoots, ., isEmpty, (, ), ), {, return]
[;, if, (, scopeRoots, ., isEmpty, (, ), ), {, return, scope, ;, }, Iterator, <, Node, >, it, =]
[;, if, (, scopeRoots, ., isEmpty, (, ), ), {, return, scope, ;, }, Iterator, <, Node, >, it, =]
[), {, return, scope, ;, }, Iterator, <, Node, >, it, =, scopeRoots, ., descendingIterator, (, ), ;, while, (]
[), {, return, scope, ;, }, Iterator, <, Node, >, it, =, scopeRoots, ., descendingIterator, (, ), ;, while, (]
[<, Node, >, it, =, scopeRoots, ., descendingIterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[>, it, =, scopeRoots, ., descendingIterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, scope, =]
[>, it, =, scopeRoots, ., descendingIterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, scope, =]
[., descendingIterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, scope, =, scopeCreator, ., createScope, (]
[., descendingIterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, scope, =, scopeCreator, ., createScope, (]
[(, it, ., hasNext, (, ), ), {, scope, =, scopeCreator, ., createScope, (, it, ., next, (, ), ,]
[hasNext, (, ), ), {, scope, =, scopeCreator, ., createScope, (, it, ., next, (, ), ,, scope, ), ;]
[hasNext, (, ), ), {, scope, =, scopeCreator, ., createScope, (, it, ., next, (, ), ,, scope, ), ;]
[{, scope, =, scopeCreator, ., createScope, (, it, ., next, (, ), ,, scope, ), ;, scopes, ., push, (]
[., createScope, (, it, ., next, (, ), ,, scope, ), ;, scopes, ., push, (, scope, ), ;, }]
[., createScope, (, it, ., next, (, ), ,, scope, ), ;, scopes, ., push, (, scope, ), ;, }]
[), ,, scope, ), ;, scopes, ., push, (, scope, ), ;, }, scopeRoots, ., clear, (, ), ;, return]
[., clear, (, ), ;, return, scope, ;, }, public, ControlFlowGraph, <, Node, >, getControlFlowGraph, (, ), {, if, (]
[., clear, (, ), ;, return, scope, ;, }, public, ControlFlowGraph, <, Node, >, getControlFlowGraph, (, ), {, if, (]
[., clear, (, ), ;, return, scope, ;, }, public, ControlFlowGraph, <, Node, >, getControlFlowGraph, (, ), {, if, (]
[scope, ;, }, public, ControlFlowGraph, <, Node, >, getControlFlowGraph, (, ), {, if, (, cfgs, ., peek, (, ), ==]
[Node, >, getControlFlowGraph, (, ), {, if, (, cfgs, ., peek, (, ), ==, null, ), {, ControlFlowAnalysis, cfa, =]
[(, ), {, if, (, cfgs, ., peek, (, ), ==, null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (]
[{, if, (, cfgs, ., peek, (, ), ==, null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,]
[(, cfgs, ., peek, (, ), ==, null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,]
[peek, (, ), ==, null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;]
[peek, (, ), ==, null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;]
[null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;, cfa, ., process, (]
[{, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;, cfa, ., process, (, null, ,]
[ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;, cfa, ., process, (, null, ,, getScopeRoot, (, ), ), ;]
[ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;, cfa, ., process, (, null, ,, getScopeRoot, (, ), ), ;]
[true, ), ;, cfa, ., process, (, null, ,, getScopeRoot, (, ), ), ;, cfgs, ., pop, (, ), ;]
[true, ), ;, cfa, ., process, (, null, ,, getScopeRoot, (, ), ), ;, cfgs, ., pop, (, ), ;]
[., process, (, null, ,, getScopeRoot, (, ), ), ;, cfgs, ., pop, (, ), ;, cfgs, ., push, (]
[., process, (, null, ,, getScopeRoot, (, ), ), ;, cfgs, ., pop, (, ), ;, cfgs, ., push, (]
[;, cfgs, ., pop, (, ), ;, cfgs, ., push, (, cfa, ., getCfg, (, ), ), ;, }, return]
[;, cfgs, ., pop, (, ), ;, cfgs, ., push, (, cfa, ., getCfg, (, ), ), ;, }, return]
[), ), ;, }, return, cfgs, ., peek, (, ), ;, }, public, Node, getScopeRoot, (, ), {, if, (]
[), ), ;, }, return, cfgs, ., peek, (, ), ;, }, public, Node, getScopeRoot, (, ), {, if, (]
[(, ), ;, }, public, Node, getScopeRoot, (, ), {, if, (, scopeRoots, ., isEmpty, (, ), ), {, return]
[(, ), ;, }, public, Node, getScopeRoot, (, ), {, if, (, scopeRoots, ., isEmpty, (, ), ), {, return]
[(, ), ;, }, public, Node, getScopeRoot, (, ), {, if, (, scopeRoots, ., isEmpty, (, ), ), {, return]
[isEmpty, (, ), ), {, return, scopes, ., peek, (, ), ., getRootNode, (, ), ;, }, else, {, return]
[isEmpty, (, ), ), {, return, scopes, ., peek, (, ), ., getRootNode, (, ), ;, }, else, {, return]
[), ;, }, else, {, return, scopeRoots, ., peek, (, ), ;, }, }, boolean, inGlobalScope, (, ), {, return]
[), ;, }, else, {, return, scopeRoots, ., peek, (, ), ;, }, }, boolean, inGlobalScope, (, ), {, return]
[{, return, scopeRoots, ., peek, (, ), ;, }, }, boolean, inGlobalScope, (, ), {, return, getScopeDepth, (, ), <=]
[}, boolean, inGlobalScope, (, ), {, return, getScopeDepth, (, ), <=, 1, ;, }, int, getScopeDepth, (, ), {, return]
[}, boolean, inGlobalScope, (, ), {, return, getScopeDepth, (, ), <=, 1, ;, }, int, getScopeDepth, (, ), {, return]
[}, boolean, inGlobalScope, (, ), {, return, getScopeDepth, (, ), <=, 1, ;, }, int, getScopeDepth, (, ), {, return]
[return, getScopeDepth, (, ), <=, 1, ;, }, int, getScopeDepth, (, ), {, return, scopes, ., size, (, ), +]
[return, getScopeDepth, (, ), <=, 1, ;, }, int, getScopeDepth, (, ), {, return, scopes, ., size, (, ), +]
[scopes, ., size, (, ), +, scopeRoots, ., size, (, ), ;, }, public, boolean, hasScope, (, ), {, return]
[., size, (, ), +, scopeRoots, ., size, (, ), ;, }, public, boolean, hasScope, (, ), {, return, !]
[size, (, ), +, scopeRoots, ., size, (, ), ;, }, public, boolean, hasScope, (, ), {, return, !, (]
[size, (, ), +, scopeRoots, ., size, (, ), ;, }, public, boolean, hasScope, (, ), {, return, !, (]
[size, (, ), +, scopeRoots, ., size, (, ), ;, }, public, boolean, hasScope, (, ), {, return, !, (]
[size, (, ), ;, }, public, boolean, hasScope, (, ), {, return, !, (, scopes, ., isEmpty, (, ), &&]
[size, (, ), ;, }, public, boolean, hasScope, (, ), {, return, !, (, scopes, ., isEmpty, (, ), &&]
[;, }, public, void, report, (, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, JSError, error, =]
[;, }, public, void, report, (, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, JSError, error, =]
[report, (, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, JSError, error, =, JSError, ., make, (]
[Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, JSError, error, =, JSError, ., make, (, getBestSourceFileName, (]
[DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, JSError, error, =, JSError, ., make, (, getBestSourceFileName, (, n, ), ,]
[,, String, ..., arguments, ), {, JSError, error, =, JSError, ., make, (, getBestSourceFileName, (, n, ), ,, n, ,]
[..., arguments, ), {, JSError, error, =, JSError, ., make, (, getBestSourceFileName, (, n, ), ,, n, ,, diagnosticType, ,]
[{, JSError, error, =, JSError, ., make, (, getBestSourceFileName, (, n, ), ,, n, ,, diagnosticType, ,, arguments, ), ;]
[{, JSError, error, =, JSError, ., make, (, getBestSourceFileName, (, n, ), ,, n, ,, diagnosticType, ,, arguments, ), ;]
[JSError, ., make, (, getBestSourceFileName, (, n, ), ,, n, ,, diagnosticType, ,, arguments, ), ;, compiler, ., report, (]
[compiler, ., report, (, error, ), ;, }, private, static, String, getSourceName, (, Node, n, ), {, String, name, =]
[compiler, ., report, (, error, ), ;, }, private, static, String, getSourceName, (, Node, n, ), {, String, name, =]
[}, private, static, String, getSourceName, (, Node, n, ), {, String, name, =, n, ., getSourceFileName, (, ), ;, return]
[}, private, static, String, getSourceName, (, Node, n, ), {, String, name, =, n, ., getSourceFileName, (, ), ;, return]
[}, private, static, String, getSourceName, (, Node, n, ), {, String, name, =, n, ., getSourceFileName, (, ), ;, return]
[static, String, getSourceName, (, Node, n, ), {, String, name, =, n, ., getSourceFileName, (, ), ;, return, name, ==]
[getSourceName, (, Node, n, ), {, String, name, =, n, ., getSourceFileName, (, ), ;, return, name, ==, null, ?]
[Node, n, ), {, String, name, =, n, ., getSourceFileName, (, ), ;, return, name, ==, null, ?, "", :]
[getSourceFileName, (, ), ;, return, name, ==, null, ?, "", :, name, ;, }, InputId, getInputId, (, ), {, return]
[}, public, JSError, makeError, (, Node, n, ,, CheckLevel, level, ,, DiagnosticType, type, ,, String, ..., arguments, ), {, return]
[}, public, JSError, makeError, (, Node, n, ,, CheckLevel, level, ,, DiagnosticType, type, ,, String, ..., arguments, ), {, return]
[(, Node, n, ,, CheckLevel, level, ,, DiagnosticType, type, ,, String, ..., arguments, ), {, return, JSError, ., make, (]
[n, ,, CheckLevel, level, ,, DiagnosticType, type, ,, String, ..., arguments, ), {, return, JSError, ., make, (, getBestSourceFileName, (]
[level, ,, DiagnosticType, type, ,, String, ..., arguments, ), {, return, JSError, ., make, (, getBestSourceFileName, (, n, ), ,]
[DiagnosticType, type, ,, String, ..., arguments, ), {, return, JSError, ., make, (, getBestSourceFileName, (, n, ), ,, n, ,]
[,, String, ..., arguments, ), {, return, JSError, ., make, (, getBestSourceFileName, (, n, ), ,, n, ,, level, ,]
[..., arguments, ), {, return, JSError, ., make, (, getBestSourceFileName, (, n, ), ,, n, ,, level, ,, type, ,]
[arguments, ), ;, }, public, JSError, makeError, (, Node, n, ,, DiagnosticType, type, ,, String, ..., arguments, ), {, return]
[arguments, ), ;, }, public, JSError, makeError, (, Node, n, ,, DiagnosticType, type, ,, String, ..., arguments, ), {, return]
[public, JSError, makeError, (, Node, n, ,, DiagnosticType, type, ,, String, ..., arguments, ), {, return, JSError, ., make, (]
[makeError, (, Node, n, ,, DiagnosticType, type, ,, String, ..., arguments, ), {, return, JSError, ., make, (, getBestSourceFileName, (]
[n, ,, DiagnosticType, type, ,, String, ..., arguments, ), {, return, JSError, ., make, (, getBestSourceFileName, (, n, ), ,]
[DiagnosticType, type, ,, String, ..., arguments, ), {, return, JSError, ., make, (, getBestSourceFileName, (, n, ), ,, n, ,]
[,, String, ..., arguments, ), {, return, JSError, ., make, (, getBestSourceFileName, (, n, ), ,, n, ,, type, ,]
[n, ), ,, n, ,, type, ,, arguments, ), ;, }, private, String, getBestSourceFileName, (, Node, n, ), {, return]
[n, ), ,, n, ,, type, ,, arguments, ), ;, }, private, String, getBestSourceFileName, (, Node, n, ), {, return]
[n, ), ,, n, ,, type, ,, arguments, ), ;, }, private, String, getBestSourceFileName, (, Node, n, ), {, return]
[,, n, ,, type, ,, arguments, ), ;, }, private, String, getBestSourceFileName, (, Node, n, ), {, return, n, ==]
[,, type, ,, arguments, ), ;, }, private, String, getBestSourceFileName, (, Node, n, ), {, return, n, ==, null, ?]
[,, arguments, ), ;, }, private, String, getBestSourceFileName, (, Node, n, ), {, return, n, ==, null, ?, sourceName, :]
[,, arguments, ), ;, }, private, String, getBestSourceFileName, (, Node, n, ), {, return, n, ==, null, ?, sourceName, :]
