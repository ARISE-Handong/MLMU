[;, public, static, final, double, DEFAULT_AXIS_MARGIN, =, 0.05, ;, public, static, final, double, DEFAULT_CATEGORY_MARGIN, =, 0.20, ;, private, double, lowerMargin]
[;, public, static, final, double, DEFAULT_CATEGORY_MARGIN, =, 0.20, ;, private, double, lowerMargin, ;, private, double, upperMargin, ;, private, double, categoryMargin]
[;, private, double, lowerMargin, ;, private, double, upperMargin, ;, private, double, categoryMargin, ;, private, int, maximumCategoryLabelLines, ;, private, float, maximumCategoryLabelWidthRatio]
[), ;, }, public, CategoryAxis, (, String, label, ), {, super, (, label, ), ;, this, ., lowerMargin, =, DEFAULT_AXIS_MARGIN]
[), ;, this, ., lowerMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., upperMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;]
[=, DEFAULT_AXIS_MARGIN, ;, this, ., upperMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1]
[., lowerMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., upperMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines]
[;, this, ., upperMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;, this]
[=, DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f]
[., upperMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio]
[;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this]
[=, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset, =, 4]
[., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset]
[;, this, ., maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset, =, 4, ;, this]
[=, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset, =, 4, ;, this, ., categoryLabelPositions, =, CategoryLabelPositions]
[., maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset, =, 4, ;, this, ., categoryLabelPositions]
[;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset, =, 4, ;, this, ., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD]
[=, 0.0f, ;, this, ., categoryLabelPositionOffset, =, 4, ;, this, ., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD, ;, this, ., tickLabelFontMap]
[., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset, =, 4, ;, this, ., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD, ;, this]
[;, this, ., categoryLabelPositionOffset, =, 4, ;, this, ., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD, ;, this, ., tickLabelFontMap, =, new]
[=, 4, ;, this, ., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD, ;, this, ., tickLabelFontMap, =, new, HashMap, (, ), ;]
[., categoryLabelPositionOffset, =, 4, ;, this, ., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD, ;, this, ., tickLabelFontMap, =, new, HashMap, (]
[;, this, ., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD, ;, this, ., tickLabelFontMap, =, new, HashMap, (, ), ;, this, .]
[=, CategoryLabelPositions, ., STANDARD, ;, this, ., tickLabelFontMap, =, new, HashMap, (, ), ;, this, ., tickLabelPaintMap, =, new, HashMap]
[., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD, ;, this, ., tickLabelFontMap, =, new, HashMap, (, ), ;, this, ., tickLabelPaintMap, =]
[;, this, ., tickLabelFontMap, =, new, HashMap, (, ), ;, this, ., tickLabelPaintMap, =, new, HashMap, (, ), ;, this]
[., STANDARD, ;, this, ., tickLabelFontMap, =, new, HashMap, (, ), ;, this, ., tickLabelPaintMap, =, new, HashMap, (, )]
[=, new, HashMap, (, ), ;, this, ., tickLabelPaintMap, =, new, HashMap, (, ), ;, this, ., categoryLabelToolTips, =, new]
[., tickLabelFontMap, =, new, HashMap, (, ), ;, this, ., tickLabelPaintMap, =, new, HashMap, (, ), ;, this, ., categoryLabelToolTips]
[;, this, ., tickLabelPaintMap, =, new, HashMap, (, ), ;, this, ., categoryLabelToolTips, =, new, HashMap, (, ), ;, }]
[=, new, HashMap, (, ), ;, this, ., categoryLabelToolTips, =, new, HashMap, (, ), ;, }, public, double, getLowerMargin, (]
[., tickLabelPaintMap, =, new, HashMap, (, ), ;, this, ., categoryLabelToolTips, =, new, HashMap, (, ), ;, }, public, double]
[;, this, ., categoryLabelToolTips, =, new, HashMap, (, ), ;, }, public, double, getLowerMargin, (, ), {, return, this, .]
[=, new, HashMap, (, ), ;, }, public, double, getLowerMargin, (, ), {, return, this, ., lowerMargin, ;, }, public]
[., categoryLabelToolTips, =, new, HashMap, (, ), ;, }, public, double, getLowerMargin, (, ), {, return, this, ., lowerMargin, ;]
[;, }, public, double, getLowerMargin, (, ), {, return, this, ., lowerMargin, ;, }, public, void, setLowerMargin, (, double, margin]
[;, }, public, void, setLowerMargin, (, double, margin, ), {, this, ., lowerMargin, =, margin, ;, notifyListeners, (, new, AxisChangeEvent]
[., lowerMargin, ;, }, public, void, setLowerMargin, (, double, margin, ), {, this, ., lowerMargin, =, margin, ;, notifyListeners, (]
[=, margin, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getUpperMargin, (, ), {, return]
[., lowerMargin, =, margin, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getUpperMargin, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getUpperMargin, (, ), {, return, this, .]
[;, }, public, double, getUpperMargin, (, ), {, return, this, ., upperMargin, ;, }, public, void, setUpperMargin, (, double, margin]
[), ;, }, public, double, getUpperMargin, (, ), {, return, this, ., upperMargin, ;, }, public, void, setUpperMargin, (, double]
[), ), ;, }, public, double, getUpperMargin, (, ), {, return, this, ., upperMargin, ;, }, public, void, setUpperMargin, (]
[;, }, public, void, setUpperMargin, (, double, margin, ), {, this, ., upperMargin, =, margin, ;, notifyListeners, (, new, AxisChangeEvent]
[., upperMargin, ;, }, public, void, setUpperMargin, (, double, margin, ), {, this, ., upperMargin, =, margin, ;, notifyListeners, (]
[=, margin, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getCategoryMargin, (, ), {, return]
[., upperMargin, =, margin, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getCategoryMargin, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getCategoryMargin, (, ), {, return, this, .]
[;, }, public, double, getCategoryMargin, (, ), {, return, this, ., categoryMargin, ;, }, public, void, setCategoryMargin, (, double, margin]
[), ;, }, public, double, getCategoryMargin, (, ), {, return, this, ., categoryMargin, ;, }, public, void, setCategoryMargin, (, double]
[), ), ;, }, public, double, getCategoryMargin, (, ), {, return, this, ., categoryMargin, ;, }, public, void, setCategoryMargin, (]
[;, }, public, void, setCategoryMargin, (, double, margin, ), {, this, ., categoryMargin, =, margin, ;, notifyListeners, (, new, AxisChangeEvent]
[., categoryMargin, ;, }, public, void, setCategoryMargin, (, double, margin, ), {, this, ., categoryMargin, =, margin, ;, notifyListeners, (]
[=, margin, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getMaximumCategoryLabelLines, (, ), {, return]
[., categoryMargin, =, margin, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getMaximumCategoryLabelLines, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getMaximumCategoryLabelLines, (, ), {, return, this, .]
[;, }, public, int, getMaximumCategoryLabelLines, (, ), {, return, this, ., maximumCategoryLabelLines, ;, }, public, void, setMaximumCategoryLabelLines, (, int, lines]
[), ;, }, public, int, getMaximumCategoryLabelLines, (, ), {, return, this, ., maximumCategoryLabelLines, ;, }, public, void, setMaximumCategoryLabelLines, (, int]
[), ), ;, }, public, int, getMaximumCategoryLabelLines, (, ), {, return, this, ., maximumCategoryLabelLines, ;, }, public, void, setMaximumCategoryLabelLines, (]
[;, }, public, void, setMaximumCategoryLabelLines, (, int, lines, ), {, this, ., maximumCategoryLabelLines, =, lines, ;, notifyListeners, (, new, AxisChangeEvent]
[., maximumCategoryLabelLines, ;, }, public, void, setMaximumCategoryLabelLines, (, int, lines, ), {, this, ., maximumCategoryLabelLines, =, lines, ;, notifyListeners, (]
[=, lines, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, float, getMaximumCategoryLabelWidthRatio, (, ), {, return]
[., maximumCategoryLabelLines, =, lines, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, float, getMaximumCategoryLabelWidthRatio, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, float, getMaximumCategoryLabelWidthRatio, (, ), {, return, this, .]
[;, }, public, float, getMaximumCategoryLabelWidthRatio, (, ), {, return, this, ., maximumCategoryLabelWidthRatio, ;, }, public, void, setMaximumCategoryLabelWidthRatio, (, float, ratio]
[), ;, }, public, float, getMaximumCategoryLabelWidthRatio, (, ), {, return, this, ., maximumCategoryLabelWidthRatio, ;, }, public, void, setMaximumCategoryLabelWidthRatio, (, float]
[), ), ;, }, public, float, getMaximumCategoryLabelWidthRatio, (, ), {, return, this, ., maximumCategoryLabelWidthRatio, ;, }, public, void, setMaximumCategoryLabelWidthRatio, (]
[;, }, public, void, setMaximumCategoryLabelWidthRatio, (, float, ratio, ), {, this, ., maximumCategoryLabelWidthRatio, =, ratio, ;, notifyListeners, (, new, AxisChangeEvent]
[., maximumCategoryLabelWidthRatio, ;, }, public, void, setMaximumCategoryLabelWidthRatio, (, float, ratio, ), {, this, ., maximumCategoryLabelWidthRatio, =, ratio, ;, notifyListeners, (]
[=, ratio, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getCategoryLabelPositionOffset, (, ), {, return]
[., maximumCategoryLabelWidthRatio, =, ratio, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getCategoryLabelPositionOffset, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getCategoryLabelPositionOffset, (, ), {, return, this, .]
[;, }, public, int, getCategoryLabelPositionOffset, (, ), {, return, this, ., categoryLabelPositionOffset, ;, }, public, void, setCategoryLabelPositionOffset, (, int, offset]
[), ;, }, public, int, getCategoryLabelPositionOffset, (, ), {, return, this, ., categoryLabelPositionOffset, ;, }, public, void, setCategoryLabelPositionOffset, (, int]
[), ), ;, }, public, int, getCategoryLabelPositionOffset, (, ), {, return, this, ., categoryLabelPositionOffset, ;, }, public, void, setCategoryLabelPositionOffset, (]
[;, }, public, void, setCategoryLabelPositionOffset, (, int, offset, ), {, this, ., categoryLabelPositionOffset, =, offset, ;, notifyListeners, (, new, AxisChangeEvent]
[., categoryLabelPositionOffset, ;, }, public, void, setCategoryLabelPositionOffset, (, int, offset, ), {, this, ., categoryLabelPositionOffset, =, offset, ;, notifyListeners, (]
[=, offset, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, CategoryLabelPositions, getCategoryLabelPositions, (, ), {, return]
[., categoryLabelPositionOffset, =, offset, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, CategoryLabelPositions, getCategoryLabelPositions, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, CategoryLabelPositions, getCategoryLabelPositions, (, ), {, return, this, .]
[;, }, public, CategoryLabelPositions, getCategoryLabelPositions, (, ), {, return, this, ., categoryLabelPositions, ;, }, public, void, setCategoryLabelPositions, (, CategoryLabelPositions, positions]
[), ;, }, public, CategoryLabelPositions, getCategoryLabelPositions, (, ), {, return, this, ., categoryLabelPositions, ;, }, public, void, setCategoryLabelPositions, (, CategoryLabelPositions]
[), ), ;, }, public, CategoryLabelPositions, getCategoryLabelPositions, (, ), {, return, this, ., categoryLabelPositions, ;, }, public, void, setCategoryLabelPositions, (]
[;, }, public, void, setCategoryLabelPositions, (, CategoryLabelPositions, positions, ), {, if, (, positions, ==, null, ), {, throw, new, IllegalArgumentException]
[., categoryLabelPositions, ;, }, public, void, setCategoryLabelPositions, (, CategoryLabelPositions, positions, ), {, if, (, positions, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'positions' argument.", ), ;, }, this, ., categoryLabelPositions, =, positions, ;, notifyListeners, (, new, AxisChangeEvent]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'positions' argument.", ), ;, }, this, ., categoryLabelPositions, =, positions, ;, notifyListeners, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'positions' argument.", ), ;, }, this, ., categoryLabelPositions, =, positions, ;, notifyListeners, (, new, AxisChangeEvent]
[;, }, this, ., categoryLabelPositions, =, positions, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Font]
[), ;, }, this, ., categoryLabelPositions, =, positions, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public]
[=, positions, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Font, getTickLabelFont, (, Comparable, category, )]
[., categoryLabelPositions, =, positions, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Font, getTickLabelFont, (, Comparable]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Font, getTickLabelFont, (, Comparable, category, ), {, if]
[;, }, public, Font, getTickLabelFont, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException]
[), ;, }, public, Font, getTickLabelFont, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new]
[), ), ;, }, public, Font, getTickLabelFont, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Font, result, =, (, Font, ), this, ., tickLabelFontMap, .]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Font, result, =, (, Font, ), this, .]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Font, result, =, (, Font, ), this, ., tickLabelFontMap, .]
[;, }, Font, result, =, (, Font, ), this, ., tickLabelFontMap, ., get, (, category, ), ;, if, (, result]
[), ;, }, Font, result, =, (, Font, ), this, ., tickLabelFontMap, ., get, (, category, ), ;, if, (]
[;, if, (, result, ==, null, ), {, result, =, getTickLabelFont, (, ), ;, }, return, result, ;, }, public]
[;, if, (, result, ==, null, ), {, result, =, getTickLabelFont, (, ), ;, }, return, result, ;, }, public]
[., get, (, category, ), ;, if, (, result, ==, null, ), {, result, =, getTickLabelFont, (, ), ;, }]
[., tickLabelFontMap, ., get, (, category, ), ;, if, (, result, ==, null, ), {, result, =, getTickLabelFont, (, )]
[), ;, if, (, result, ==, null, ), {, result, =, getTickLabelFont, (, ), ;, }, return, result, ;, }]
[), {, result, =, getTickLabelFont, (, ), ;, }, return, result, ;, }, public, void, setTickLabelFont, (, Comparable, category, ,]
[==, null, ), {, result, =, getTickLabelFont, (, ), ;, }, return, result, ;, }, public, void, setTickLabelFont, (, Comparable]
[), {, result, =, getTickLabelFont, (, ), ;, }, return, result, ;, }, public, void, setTickLabelFont, (, Comparable, category, ,]
[=, getTickLabelFont, (, ), ;, }, return, result, ;, }, public, void, setTickLabelFont, (, Comparable, category, ,, Font, font, )]
[;, }, return, result, ;, }, public, void, setTickLabelFont, (, Comparable, category, ,, Font, font, ), {, if, (, category]
[;, }, public, void, setTickLabelFont, (, Comparable, category, ,, Font, font, ), {, if, (, category, ==, null, ), {]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, font, ==, null, ), {, this, ., tickLabelFontMap]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, font, ==, null, ), {, this]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, font, ==, null, ), {, this, ., tickLabelFontMap]
[;, }, if, (, font, ==, null, ), {, this, ., tickLabelFontMap, ., remove, (, category, ), ;, }, else]
[), ;, }, if, (, font, ==, null, ), {, this, ., tickLabelFontMap, ., remove, (, category, ), ;, }]
[), {, this, ., tickLabelFontMap, ., remove, (, category, ), ;, }, else, {, this, ., tickLabelFontMap, ., put, (]
[==, null, ), {, this, ., tickLabelFontMap, ., remove, (, category, ), ;, }, else, {, this, ., tickLabelFontMap, .]
[), {, this, ., tickLabelFontMap, ., remove, (, category, ), ;, }, else, {, this, ., tickLabelFontMap, ., put, (]
[;, }, else, {, this, ., tickLabelFontMap, ., put, (, category, ,, font, ), ;, }, notifyListeners, (, new, AxisChangeEvent]
[., remove, (, category, ), ;, }, else, {, this, ., tickLabelFontMap, ., put, (, category, ,, font, ), ;]
[., tickLabelFontMap, ., remove, (, category, ), ;, }, else, {, this, ., tickLabelFontMap, ., put, (, category, ,, font]
[), ;, }, else, {, this, ., tickLabelFontMap, ., put, (, category, ,, font, ), ;, }, notifyListeners, (, new]
[;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getTickLabelPaint, (, Comparable, category, ), {]
[., put, (, category, ,, font, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public]
[., tickLabelFontMap, ., put, (, category, ,, font, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;]
[,, font, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getTickLabelPaint, (, Comparable]
[), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getTickLabelPaint, (, Comparable, category, )]
[;, }, public, Paint, getTickLabelPaint, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException]
[), ;, }, public, Paint, getTickLabelPaint, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new]
[), ), ;, }, public, Paint, getTickLabelPaint, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Paint, result, =, (, Paint, ), this, ., tickLabelPaintMap, .]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Paint, result, =, (, Paint, ), this, .]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Paint, result, =, (, Paint, ), this, ., tickLabelPaintMap, .]
[;, }, Paint, result, =, (, Paint, ), this, ., tickLabelPaintMap, ., get, (, category, ), ;, if, (, result]
[), ;, }, Paint, result, =, (, Paint, ), this, ., tickLabelPaintMap, ., get, (, category, ), ;, if, (]
[;, if, (, result, ==, null, ), {, result, =, getTickLabelPaint, (, ), ;, }, return, result, ;, }, public]
[;, if, (, result, ==, null, ), {, result, =, getTickLabelPaint, (, ), ;, }, return, result, ;, }, public]
[., get, (, category, ), ;, if, (, result, ==, null, ), {, result, =, getTickLabelPaint, (, ), ;, }]
[., tickLabelPaintMap, ., get, (, category, ), ;, if, (, result, ==, null, ), {, result, =, getTickLabelPaint, (, )]
[), ;, if, (, result, ==, null, ), {, result, =, getTickLabelPaint, (, ), ;, }, return, result, ;, }]
[), {, result, =, getTickLabelPaint, (, ), ;, }, return, result, ;, }, public, void, setTickLabelPaint, (, Comparable, category, ,]
[==, null, ), {, result, =, getTickLabelPaint, (, ), ;, }, return, result, ;, }, public, void, setTickLabelPaint, (, Comparable]
[), {, result, =, getTickLabelPaint, (, ), ;, }, return, result, ;, }, public, void, setTickLabelPaint, (, Comparable, category, ,]
[=, getTickLabelPaint, (, ), ;, }, return, result, ;, }, public, void, setTickLabelPaint, (, Comparable, category, ,, Paint, paint, )]
[;, }, return, result, ;, }, public, void, setTickLabelPaint, (, Comparable, category, ,, Paint, paint, ), {, if, (, category]
[;, }, public, void, setTickLabelPaint, (, Comparable, category, ,, Paint, paint, ), {, if, (, category, ==, null, ), {]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, paint, ==, null, ), {, this, ., tickLabelPaintMap]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, paint, ==, null, ), {, this]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, paint, ==, null, ), {, this, ., tickLabelPaintMap]
[;, }, if, (, paint, ==, null, ), {, this, ., tickLabelPaintMap, ., remove, (, category, ), ;, }, else]
[), ;, }, if, (, paint, ==, null, ), {, this, ., tickLabelPaintMap, ., remove, (, category, ), ;, }]
[), {, this, ., tickLabelPaintMap, ., remove, (, category, ), ;, }, else, {, this, ., tickLabelPaintMap, ., put, (]
[==, null, ), {, this, ., tickLabelPaintMap, ., remove, (, category, ), ;, }, else, {, this, ., tickLabelPaintMap, .]
[), {, this, ., tickLabelPaintMap, ., remove, (, category, ), ;, }, else, {, this, ., tickLabelPaintMap, ., put, (]
[;, }, else, {, this, ., tickLabelPaintMap, ., put, (, category, ,, paint, ), ;, }, notifyListeners, (, new, AxisChangeEvent]
[., remove, (, category, ), ;, }, else, {, this, ., tickLabelPaintMap, ., put, (, category, ,, paint, ), ;]
[., tickLabelPaintMap, ., remove, (, category, ), ;, }, else, {, this, ., tickLabelPaintMap, ., put, (, category, ,, paint]
[), ;, }, else, {, this, ., tickLabelPaintMap, ., put, (, category, ,, paint, ), ;, }, notifyListeners, (, new]
[;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, void, addCategoryLabelToolTip, (, Comparable, category, ,, String]
[., put, (, category, ,, paint, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public]
[., tickLabelPaintMap, ., put, (, category, ,, paint, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;]
[,, paint, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, void, addCategoryLabelToolTip, (, Comparable]
[), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, void, addCategoryLabelToolTip, (, Comparable, category, ,]
[;, }, public, void, addCategoryLabelToolTip, (, Comparable, category, ,, String, tooltip, ), {, if, (, category, ==, null, ), {]
[), ;, }, public, void, addCategoryLabelToolTip, (, Comparable, category, ,, String, tooltip, ), {, if, (, category, ==, null, )]
[), ), ;, }, public, void, addCategoryLabelToolTip, (, Comparable, category, ,, String, tooltip, ), {, if, (, category, ==, null]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., put, (, category, ,, tooltip, )]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., put, (, category, ,]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., put, (, category, ,, tooltip, )]
[;, }, this, ., categoryLabelToolTips, ., put, (, category, ,, tooltip, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, )]
[), ;, }, this, ., categoryLabelToolTips, ., put, (, category, ,, tooltip, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, String, getCategoryLabelToolTip, (, Comparable, category, ), {, if]
[., put, (, category, ,, tooltip, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, String]
[., categoryLabelToolTips, ., put, (, category, ,, tooltip, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }]
[,, tooltip, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, String, getCategoryLabelToolTip, (, Comparable, category]
[), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, String, getCategoryLabelToolTip, (, Comparable, category, ), {]
[;, }, public, String, getCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException]
[), ;, }, public, String, getCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new]
[), ), ;, }, public, String, getCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, return, (, String, ), this, ., categoryLabelToolTips, ., get, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, return, (, String, ), this, ., categoryLabelToolTips, .]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, return, (, String, ), this, ., categoryLabelToolTips, ., get, (]
[;, }, return, (, String, ), this, ., categoryLabelToolTips, ., get, (, category, ), ;, }, public, void, removeCategoryLabelToolTip, (]
[), ;, }, return, (, String, ), this, ., categoryLabelToolTips, ., get, (, category, ), ;, }, public, void, removeCategoryLabelToolTip]
[;, }, public, void, removeCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException]
[;, }, public, void, removeCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException]
[., get, (, category, ), ;, }, public, void, removeCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category, ==, null]
[., categoryLabelToolTips, ., get, (, category, ), ;, }, public, void, removeCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category]
[), ;, }, public, void, removeCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., remove, (, category, ), ;, notifyListeners]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., remove, (, category, )]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., remove, (, category, ), ;, notifyListeners]
[;, }, this, ., categoryLabelToolTips, ., remove, (, category, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;]
[), ;, }, this, ., categoryLabelToolTips, ., remove, (, category, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, void, clearCategoryLabelToolTips, (, ), {, this, ., categoryLabelToolTips]
[., remove, (, category, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, void, clearCategoryLabelToolTips, (]
[., categoryLabelToolTips, ., remove, (, category, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, void]
[), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, void, clearCategoryLabelToolTips, (, ), {, this, .]
[;, }, public, void, clearCategoryLabelToolTips, (, ), {, this, ., categoryLabelToolTips, ., clear, (, ), ;, notifyListeners, (, new, AxisChangeEvent]
[), ;, }, public, void, clearCategoryLabelToolTips, (, ), {, this, ., categoryLabelToolTips, ., clear, (, ), ;, notifyListeners, (, new]
[), ), ;, }, public, void, clearCategoryLabelToolTips, (, ), {, this, ., categoryLabelToolTips, ., clear, (, ), ;, notifyListeners, (]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getCategoryJava2DCoordinate, (, CategoryAnchor, anchor, ,, int, category]
[., clear, (, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getCategoryJava2DCoordinate, (, CategoryAnchor]
[., categoryLabelToolTips, ., clear, (, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getCategoryJava2DCoordinate]
[;, }, public, double, getCategoryJava2DCoordinate, (, CategoryAnchor, anchor, ,, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge]
[), ;, }, public, double, getCategoryJava2DCoordinate, (, CategoryAnchor, anchor, ,, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge]
[), ), ;, }, public, double, getCategoryJava2DCoordinate, (, CategoryAnchor, anchor, ,, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,]
[;, if, (, anchor, ==, CategoryAnchor, ., START, ), {, result, =, getCategoryStart, (, category, ,, categoryCount, ,, area, ,]
[), {, result, =, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor]
[==, CategoryAnchor, ., START, ), {, result, =, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }]
[), {, result, =, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor]
[., START, ), {, result, =, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if]
[=, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, .]
[;, }, else, if, (, anchor, ==, CategoryAnchor, ., MIDDLE, ), {, result, =, getCategoryMiddle, (, category, ,, categoryCount, ,]
[,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., MIDDLE, ), {, result]
[,, area, ,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., MIDDLE, ), {, result, =, getCategoryMiddle]
[,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., MIDDLE, ), {, result, =, getCategoryMiddle, (, category]
[), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., MIDDLE, ), {, result, =, getCategoryMiddle, (, category, ,, categoryCount]
[), {, result, =, getCategoryMiddle, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor]
[==, CategoryAnchor, ., MIDDLE, ), {, result, =, getCategoryMiddle, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }]
[), {, result, =, getCategoryMiddle, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor]
[., MIDDLE, ), {, result, =, getCategoryMiddle, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if]
[=, getCategoryMiddle, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, .]
[;, }, else, if, (, anchor, ==, CategoryAnchor, ., END, ), {, result, =, getCategoryEnd, (, category, ,, categoryCount, ,]
[,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., END, ), {, result]
[,, area, ,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., END, ), {, result, =, getCategoryEnd]
[,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., END, ), {, result, =, getCategoryEnd, (, category]
[), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., END, ), {, result, =, getCategoryEnd, (, category, ,, categoryCount]
[), {, result, =, getCategoryEnd, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, return, result, ;, }]
[==, CategoryAnchor, ., END, ), {, result, =, getCategoryEnd, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }]
[), {, result, =, getCategoryEnd, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, return, result, ;, }]
[., END, ), {, result, =, getCategoryEnd, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, return, result]
[=, getCategoryEnd, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, return, result, ;, }, public, double, getCategoryStart]
[;, }, return, result, ;, }, public, double, getCategoryStart, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge]
[,, categoryCount, ,, area, ,, edge, ), ;, }, return, result, ;, }, public, double, getCategoryStart, (, int, category, ,]
[,, area, ,, edge, ), ;, }, return, result, ;, }, public, double, getCategoryStart, (, int, category, ,, int, categoryCount]
[,, edge, ), ;, }, return, result, ;, }, public, double, getCategoryStart, (, int, category, ,, int, categoryCount, ,, Rectangle2D]
[), ;, }, return, result, ;, }, public, double, getCategoryStart, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,]
[;, }, public, double, getCategoryStart, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double]
[;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {]
[), {, result, =, area, ., getX, (, ), +, area, ., getWidth, (, ), *, getLowerMargin, (, ), ;]
[||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, result, =, area, ., getX, (, ), +, area, .]
[), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, result, =, area, ., getX, (, ), +, area]
[==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, result, =, area, ., getX]
[), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, result, =, area, ., getX, (, ), +, area]
[., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, result, =, area, ., getX, (, )]
[), {, result, =, area, ., getX, (, ), +, area, ., getWidth, (, ), *, getLowerMargin, (, ), ;]
[), ), {, result, =, area, ., getX, (, ), +, area, ., getWidth, (, ), *, getLowerMargin, (, )]
[==, RectangleEdge, ., BOTTOM, ), ), {, result, =, area, ., getX, (, ), +, area, ., getWidth, (, )]
[), ), {, result, =, area, ., getX, (, ), +, area, ., getWidth, (, ), *, getLowerMargin, (, )]
[., BOTTOM, ), ), {, result, =, area, ., getX, (, ), +, area, ., getWidth, (, ), *, getLowerMargin]
[=, area, ., getX, (, ), +, area, ., getWidth, (, ), *, getLowerMargin, (, ), ;, }, else, if]
[;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, )]
[+, area, ., getWidth, (, ), *, getLowerMargin, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, .]
[., getX, (, ), +, area, ., getWidth, (, ), *, getLowerMargin, (, ), ;, }, else, if, (, (]
[;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, )]
[*, getLowerMargin, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==]
[., getWidth, (, ), *, getLowerMargin, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, )]
[;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, )]
[), {, result, =, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, getLowerMargin, (, ), ;]
[||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, result, =, area, ., getMinY, (, ), +, area, .]
[), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, result, =, area, ., getMinY, (, ), +, area]
[==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, result, =, area, ., getMinY]
[), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, result, =, area, ., getMinY, (, ), +, area]
[., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, result, =, area, ., getMinY, (, )]
[), {, result, =, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, getLowerMargin, (, ), ;]
[), ), {, result, =, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, getLowerMargin, (, )]
[==, RectangleEdge, ., RIGHT, ), ), {, result, =, area, ., getMinY, (, ), +, area, ., getHeight, (, )]
[), ), {, result, =, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, getLowerMargin, (, )]
[., RIGHT, ), ), {, result, =, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, getLowerMargin]
[=, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, getLowerMargin, (, ), ;, }, double, categorySize]
[;, }, double, categorySize, =, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount]
[+, area, ., getHeight, (, ), *, getLowerMargin, (, ), ;, }, double, categorySize, =, calculateCategorySize, (, categoryCount, ,, area]
[., getMinY, (, ), +, area, ., getHeight, (, ), *, getLowerMargin, (, ), ;, }, double, categorySize, =, calculateCategorySize]
[;, }, double, categorySize, =, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount]
[*, getLowerMargin, (, ), ;, }, double, categorySize, =, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), ;, double, categoryGapWidth]
[., getHeight, (, ), *, getLowerMargin, (, ), ;, }, double, categorySize, =, calculateCategorySize, (, categoryCount, ,, area, ,, edge]
[;, }, double, categorySize, =, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount]
[;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, ), ;, result, =, result, +, category, *, (]
[,, area, ,, edge, ), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, ), ;, result, =]
[,, edge, ), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, ), ;, result, =, result, +]
[), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, ), ;, result, =, result, +, category, *]
[;, result, =, result, +, category, *, (, categorySize, +, categoryGapWidth, ), ;, return, result, ;, }, public, double, getCategoryMiddle]
[,, area, ,, edge, ), ;, result, =, result, +, category, *, (, categorySize, +, categoryGapWidth, ), ;, return, result]
[,, edge, ), ;, result, =, result, +, category, *, (, categorySize, +, categoryGapWidth, ), ;, return, result, ;, }]
[), ;, result, =, result, +, category, *, (, categorySize, +, categoryGapWidth, ), ;, return, result, ;, }, public, double]
[=, result, +, category, *, (, categorySize, +, categoryGapWidth, ), ;, return, result, ;, }, public, double, getCategoryMiddle, (, int]
[;, return, result, ;, }, public, double, getCategoryMiddle, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge]
[+, category, *, (, categorySize, +, categoryGapWidth, ), ;, return, result, ;, }, public, double, getCategoryMiddle, (, int, category, ,]
[;, return, result, ;, }, public, double, getCategoryMiddle, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge]
[*, (, categorySize, +, categoryGapWidth, ), ;, return, result, ;, }, public, double, getCategoryMiddle, (, int, category, ,, int, categoryCount]
[;, return, result, ;, }, public, double, getCategoryMiddle, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge]
[), ;, return, result, ;, }, public, double, getCategoryMiddle, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge]
[+, categoryGapWidth, ), ;, return, result, ;, }, public, double, getCategoryMiddle, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area]
[), ;, return, result, ;, }, public, double, getCategoryMiddle, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge]
[;, }, public, double, getCategoryMiddle, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if]
[), {, throw, new, IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return, getCategoryStart, (, category, ,, categoryCount, ,, area]
[||, category, >=, categoryCount, ), {, throw, new, IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return, getCategoryStart, (, category]
[<, 0, ||, category, >=, categoryCount, ), {, throw, new, IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return, getCategoryStart]
[||, category, >=, categoryCount, ), {, throw, new, IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return, getCategoryStart, (, category]
[), {, throw, new, IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return, getCategoryStart, (, category, ,, categoryCount, ,, area]
[>=, categoryCount, ), {, throw, new, IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return, getCategoryStart, (, category, ,, categoryCount]
[), {, throw, new, IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return, getCategoryStart, (, category, ,, categoryCount, ,, area]
[;, }, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area, ,]
[), ;, }, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area]
[+, category, ), ;, }, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount]
[), ;, }, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area]
[;, }, public, double, getCategoryEnd, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return]
[+, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), /, 2, ;, }, public, double, getCategoryEnd, (, int, category, ,]
[,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), /, 2, ;, }]
[,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), /, 2, ;, }, public, double]
[,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), /, 2, ;, }, public, double, getCategoryEnd, (]
[), +, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), /, 2, ;, }, public, double, getCategoryEnd, (, int, category]
[;, }, public, double, getCategoryEnd, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return]
[/, 2, ;, }, public, double, getCategoryEnd, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, )]
[,, area, ,, edge, ), /, 2, ;, }, public, double, getCategoryEnd, (, int, category, ,, int, categoryCount, ,, Rectangle2D]
[,, edge, ), /, 2, ;, }, public, double, getCategoryEnd, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,]
[), /, 2, ;, }, public, double, getCategoryEnd, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge]
[;, }, public, double, getCategoryEnd, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return]
[;, }, public, double, getCategoryMiddle, (, Comparable, category, ,, List, categories, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if]
[+, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), ;, }, public, double, getCategoryMiddle, (, Comparable, category, ,, List, categories]
[,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), ;, }, public, double]
[,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), ;, }, public, double, getCategoryMiddle, (]
[,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), ;, }, public, double, getCategoryMiddle, (, Comparable, category]
[), +, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), ;, }, public, double, getCategoryMiddle, (, Comparable, category, ,, List]
[;, }, public, double, getCategoryMiddle, (, Comparable, category, ,, List, categories, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if]
[,, area, ,, edge, ), ;, }, public, double, getCategoryMiddle, (, Comparable, category, ,, List, categories, ,, Rectangle2D, area, ,]
[,, edge, ), ;, }, public, double, getCategoryMiddle, (, Comparable, category, ,, List, categories, ,, Rectangle2D, area, ,, RectangleEdge, edge]
[), ;, }, public, double, getCategoryMiddle, (, Comparable, category, ,, List, categories, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {]
[), {, throw, new, IllegalArgumentException, (, "Null 'categories' argument.", ), ;, }, int, categoryIndex, =, categories, ., indexOf, (, category, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'categories' argument.", ), ;, }, int, categoryIndex, =, categories, ., indexOf, (, category]
[), {, throw, new, IllegalArgumentException, (, "Null 'categories' argument.", ), ;, }, int, categoryIndex, =, categories, ., indexOf, (, category, ), ;]
[;, }, int, categoryIndex, =, categories, ., indexOf, (, category, ), ;, int, categoryCount, =, categories, ., size, (, )]
[), ;, }, int, categoryIndex, =, categories, ., indexOf, (, category, ), ;, int, categoryCount, =, categories, ., size, (]
[;, int, categoryCount, =, categories, ., size, (, ), ;, return, getCategoryMiddle, (, categoryIndex, ,, categoryCount, ,, area, ,, edge]
[., indexOf, (, category, ), ;, int, categoryCount, =, categories, ., size, (, ), ;, return, getCategoryMiddle, (, categoryIndex, ,]
[), ;, int, categoryCount, =, categories, ., size, (, ), ;, return, getCategoryMiddle, (, categoryIndex, ,, categoryCount, ,, area, ,]
[;, return, getCategoryMiddle, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, }, public, double, getCategorySeriesMiddle, (, Comparable, category]
[., size, (, ), ;, return, getCategoryMiddle, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, }, public, double]
[;, }, public, double, getCategorySeriesMiddle, (, Comparable, category, ,, Comparable, seriesKey, ,, CategoryDataset, dataset, ,, double, itemMargin, ,, Rectangle2D, area]
[,, categoryCount, ,, area, ,, edge, ), ;, }, public, double, getCategorySeriesMiddle, (, Comparable, category, ,, Comparable, seriesKey, ,, CategoryDataset]
[,, area, ,, edge, ), ;, }, public, double, getCategorySeriesMiddle, (, Comparable, category, ,, Comparable, seriesKey, ,, CategoryDataset, dataset, ,]
[,, edge, ), ;, }, public, double, getCategorySeriesMiddle, (, Comparable, category, ,, Comparable, seriesKey, ,, CategoryDataset, dataset, ,, double, itemMargin]
[), ;, }, public, double, getCategorySeriesMiddle, (, Comparable, category, ,, Comparable, seriesKey, ,, CategoryDataset, dataset, ,, double, itemMargin, ,, Rectangle2D]
[;, int, categoryCount, =, dataset, ., getColumnCount, (, ), ;, int, seriesIndex, =, dataset, ., getRowIndex, (, seriesKey, ), ;]
[., getColumnIndex, (, category, ), ;, int, categoryCount, =, dataset, ., getColumnCount, (, ), ;, int, seriesIndex, =, dataset, .]
[), ;, int, categoryCount, =, dataset, ., getColumnCount, (, ), ;, int, seriesIndex, =, dataset, ., getRowIndex, (, seriesKey, )]
[;, int, seriesIndex, =, dataset, ., getRowIndex, (, seriesKey, ), ;, int, seriesCount, =, dataset, ., getRowCount, (, ), ;]
[., getColumnCount, (, ), ;, int, seriesIndex, =, dataset, ., getRowIndex, (, seriesKey, ), ;, int, seriesCount, =, dataset, .]
[;, int, seriesCount, =, dataset, ., getRowCount, (, ), ;, double, start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area]
[., getRowIndex, (, seriesKey, ), ;, int, seriesCount, =, dataset, ., getRowCount, (, ), ;, double, start, =, getCategoryStart, (]
[), ;, int, seriesCount, =, dataset, ., getRowCount, (, ), ;, double, start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,]
[;, double, start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, end, =, getCategoryEnd, (]
[., getRowCount, (, ), ;, double, start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double]
[;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end, -]
[,, categoryCount, ,, area, ,, edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge]
[,, area, ,, edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;]
[,, edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width]
[), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end]
[;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return, start, +, width, /]
[,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1]
[,, area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {]
[,, edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return, start]
[), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return, start, +, width]
[;, if, (, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap]
[-, start, ;, if, (, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {]
[;, if, (, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap]
[), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, )]
[==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *]
[), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, )]
[;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double]
[+, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -]
[;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double]
[/, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, )]
[;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double]
[;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (]
[/, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /]
[), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), )]
[*, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin]
[), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), )]
[;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (]
[), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +]
[-, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return]
[), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +]
[;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0, ;, }, }]
[/, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0, ;]
[), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0]
[*, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap]
[), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0]
[), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /]
[-, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +]
[), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /]
[;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0, ;, }, }]
[;, }, }, public, double, getCategorySeriesMiddle, (, int, categoryIndex, ,, int, categoryCount, ,, int, seriesIndex, ,, int, seriesCount, ,, double]
[+, ww, /, 2.0, ;, }, }, public, double, getCategorySeriesMiddle, (, int, categoryIndex, ,, int, categoryCount, ,, int, seriesIndex, ,]
[+, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0, ;, }, }, public, double, getCategorySeriesMiddle]
[+, ww, /, 2.0, ;, }, }, public, double, getCategorySeriesMiddle, (, int, categoryIndex, ,, int, categoryCount, ,, int, seriesIndex, ,]
[), +, ww, /, 2.0, ;, }, }, public, double, getCategorySeriesMiddle, (, int, categoryIndex, ,, int, categoryCount, ,, int, seriesIndex]
[*, (, ww, +, gap, ), ), +, ww, /, 2.0, ;, }, }, public, double, getCategorySeriesMiddle, (, int, categoryIndex]
[), +, ww, /, 2.0, ;, }, }, public, double, getCategorySeriesMiddle, (, int, categoryIndex, ,, int, categoryCount, ,, int, seriesIndex]
[), ), +, ww, /, 2.0, ;, }, }, public, double, getCategorySeriesMiddle, (, int, categoryIndex, ,, int, categoryCount, ,, int]
[+, gap, ), ), +, ww, /, 2.0, ;, }, }, public, double, getCategorySeriesMiddle, (, int, categoryIndex, ,, int, categoryCount]
[), ), +, ww, /, 2.0, ;, }, }, public, double, getCategorySeriesMiddle, (, int, categoryIndex, ,, int, categoryCount, ,, int]
[;, }, }, public, double, getCategorySeriesMiddle, (, int, categoryIndex, ,, int, categoryCount, ,, int, seriesIndex, ,, int, seriesCount, ,, double]
[/, 2.0, ;, }, }, public, double, getCategorySeriesMiddle, (, int, categoryIndex, ,, int, categoryCount, ,, int, seriesIndex, ,, int, seriesCount]
[;, }, }, public, double, getCategorySeriesMiddle, (, int, categoryIndex, ,, int, categoryCount, ,, int, seriesIndex, ,, int, seriesCount, ,, double]
[;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end, -]
[,, categoryCount, ,, area, ,, edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge]
[,, area, ,, edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;]
[,, edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width]
[), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end]
[;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return, start, +, width, /]
[,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1]
[,, area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {]
[,, edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return, start]
[), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return, start, +, width]
[;, if, (, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap]
[-, start, ;, if, (, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {]
[;, if, (, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap]
[), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, )]
[==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *]
[), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, )]
[;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double]
[+, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -]
[;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double]
[/, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, )]
[;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double]
[;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (]
[/, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /]
[), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), )]
[*, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin]
[), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), )]
[;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (]
[), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +]
[-, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return]
[), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +]
[;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0, ;, }, }]
[/, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0, ;]
[), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0]
[*, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap]
[), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0]
[), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /]
[-, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +]
[), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /]
[;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0, ;, }, }]
[;, }, }, protected, double, calculateCategorySize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =]
[+, ww, /, 2.0, ;, }, }, protected, double, calculateCategorySize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, )]
[+, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0, ;, }, }, protected, double, calculateCategorySize]
[+, ww, /, 2.0, ;, }, }, protected, double, calculateCategorySize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, )]
[), +, ww, /, 2.0, ;, }, }, protected, double, calculateCategorySize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge]
[*, (, ww, +, gap, ), ), +, ww, /, 2.0, ;, }, }, protected, double, calculateCategorySize, (, int, categoryCount]
[), +, ww, /, 2.0, ;, }, }, protected, double, calculateCategorySize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge]
[), ), +, ww, /, 2.0, ;, }, }, protected, double, calculateCategorySize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge]
[+, gap, ), ), +, ww, /, 2.0, ;, }, }, protected, double, calculateCategorySize, (, int, categoryCount, ,, Rectangle2D, area]
[), ), +, ww, /, 2.0, ;, }, }, protected, double, calculateCategorySize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge]
[;, }, }, protected, double, calculateCategorySize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =]
[/, 2.0, ;, }, }, protected, double, calculateCategorySize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double]
[;, }, }, protected, double, calculateCategorySize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =]
[;, double, available, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge]
[;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {]
[), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT]
[||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else]
[), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }]
[==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth]
[), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }]
[., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, )]
[), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT]
[), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, .]
[==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (]
[), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, .]
[., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==]
[=, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (]
[;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, )]
[., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==]
[), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =]
[||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if]
[), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }]
[==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight]
[), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }]
[., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, )]
[), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =]
[), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result]
[==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >]
[), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result]
[., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, )]
[=, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, (]
[;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, (, 1, -, getLowerMargin, (, ), -]
[., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, (, 1, -]
[), {, result, =, available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), -, getCategoryMargin, (, )]
[>, 1, ), {, result, =, available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), -, getCategoryMargin]
[), {, result, =, available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), -, getCategoryMargin, (, )]
[=, available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), -, getCategoryMargin, (, ), ), ;, result]
[;, result, =, result, /, categoryCount, ;, }, else, {, result, =, available, *, (, 1, -, getLowerMargin, (, )]
[*, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), -, getCategoryMargin, (, ), ), ;, result, =, result]
[;, result, =, result, /, categoryCount, ;, }, else, {, result, =, available, *, (, 1, -, getLowerMargin, (, )]
[), ;, result, =, result, /, categoryCount, ;, }, else, {, result, =, available, *, (, 1, -, getLowerMargin, (]
[-, getCategoryMargin, (, ), ), ;, result, =, result, /, categoryCount, ;, }, else, {, result, =, available, *, (]
[-, getUpperMargin, (, ), -, getCategoryMargin, (, ), ), ;, result, =, result, /, categoryCount, ;, }, else, {, result]
[-, getLowerMargin, (, ), -, getUpperMargin, (, ), -, getCategoryMargin, (, ), ), ;, result, =, result, /, categoryCount, ;]
[-, getUpperMargin, (, ), -, getCategoryMargin, (, ), ), ;, result, =, result, /, categoryCount, ;, }, else, {, result]
[-, getCategoryMargin, (, ), ), ;, result, =, result, /, categoryCount, ;, }, else, {, result, =, available, *, (]
[), ;, result, =, result, /, categoryCount, ;, }, else, {, result, =, available, *, (, 1, -, getLowerMargin, (]
[=, result, /, categoryCount, ;, }, else, {, result, =, available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin]
[;, }, else, {, result, =, available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), ), ;]
[/, categoryCount, ;, }, else, {, result, =, available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, )]
[;, }, else, {, result, =, available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), ), ;]
[=, available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), ), ;, }, return, result, ;, }]
[;, }, return, result, ;, }, protected, double, calculateCategoryGapSize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {]
[*, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), ), ;, }, return, result, ;, }, protected, double]
[;, }, return, result, ;, }, protected, double, calculateCategoryGapSize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {]
[), ;, }, return, result, ;, }, protected, double, calculateCategoryGapSize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, )]
[-, getUpperMargin, (, ), ), ;, }, return, result, ;, }, protected, double, calculateCategoryGapSize, (, int, categoryCount, ,, Rectangle2D, area]
[-, getLowerMargin, (, ), -, getUpperMargin, (, ), ), ;, }, return, result, ;, }, protected, double, calculateCategoryGapSize, (, int]
[-, getUpperMargin, (, ), ), ;, }, return, result, ;, }, protected, double, calculateCategoryGapSize, (, int, categoryCount, ,, Rectangle2D, area]
[), ;, }, return, result, ;, }, protected, double, calculateCategoryGapSize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, )]
[;, }, protected, double, calculateCategoryGapSize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0]
[;, double, available, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge]
[;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {]
[), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT]
[||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else]
[), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }]
[==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth]
[), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }]
[., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, )]
[), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT]
[), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, .]
[==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (]
[), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, .]
[., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==]
[=, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (]
[;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, )]
[., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==]
[), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =]
[||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if]
[), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }]
[==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight]
[), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }]
[., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, )]
[), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =]
[), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result]
[==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >]
[), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result]
[., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, )]
[=, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, getCategoryMargin]
[;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, getCategoryMargin, (, ), /, (, categoryCount, -]
[., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, getCategoryMargin, (, )]
[), {, result, =, available, *, getCategoryMargin, (, ), /, (, categoryCount, -, 1, ), ;, }, return, result, ;]
[>, 1, ), {, result, =, available, *, getCategoryMargin, (, ), /, (, categoryCount, -, 1, ), ;, }, return]
[), {, result, =, available, *, getCategoryMargin, (, ), /, (, categoryCount, -, 1, ), ;, }, return, result, ;]
[=, available, *, getCategoryMargin, (, ), /, (, categoryCount, -, 1, ), ;, }, return, result, ;, }, public, AxisSpace]
[;, }, return, result, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge]
[/, (, categoryCount, -, 1, ), ;, }, return, result, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot]
[*, getCategoryMargin, (, ), /, (, categoryCount, -, 1, ), ;, }, return, result, ;, }, public, AxisSpace, reserveSpace, (]
[/, (, categoryCount, -, 1, ), ;, }, return, result, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot]
[;, }, return, result, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge]
[), ;, }, return, result, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,]
[-, 1, ), ;, }, return, result, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D]
[), ;, }, return, result, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,]
[;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space]
[), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space]
[==, null, ), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {]
[), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space]
[=, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space, ;, }, double]
[;, }, if, (, !, isVisible, (, ), ), {, return, space, ;, }, double, tickLabelHeight, =, 0.0, ;, double]
[), {, return, space, ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (]
[), {, return, space, ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (]
[;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, g2]
[;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, g2, ., setFont, (, getTickLabelFont, (, )]
[;, if, (, isTickLabelsVisible, (, ), ), {, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, AxisState, state, =]
[), {, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, AxisState, state, =, new, AxisState, (, ), ;, refreshTicks]
[;, AxisState, state, =, new, AxisState, (, ), ;, refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, ), ;]
[., setFont, (, getTickLabelFont, (, ), ), ;, AxisState, state, =, new, AxisState, (, ), ;, refreshTicks, (, g2, ,]
[), ;, AxisState, state, =, new, AxisState, (, ), ;, refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, )]
[;, refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, )]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else]
[,, state, ,, plotArea, ,, edge, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, tickLabelHeight, =, state]
[,, plotArea, ,, edge, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, tickLabelHeight, =, state, ., getMax]
[,, edge, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, tickLabelHeight, =, state, ., getMax, (, )]
[), ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }]
[), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, )]
[==, RectangleEdge, ., TOP, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, )]
[., TOP, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[=, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, tickLabelHeight, =]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;]
[., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, tickLabelHeight, =, state, .]
[), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, )]
[==, RectangleEdge, ., BOTTOM, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, )]
[., BOTTOM, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[=, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, tickLabelWidth, =]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, tickLabelWidth, =, state, ., getMax, (, ), ;]
[., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, tickLabelWidth, =, state, .]
[), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, )]
[==, RectangleEdge, ., LEFT, ), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, )]
[., LEFT, ), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[=, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, tickLabelWidth, =]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, tickLabelWidth, =, state, ., getMax, (, ), ;]
[., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, tickLabelWidth, =, state, .]
[), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge]
[==, RectangleEdge, ., RIGHT, ), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure]
[), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge]
[., RIGHT, ), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2]
[=, state, ., getMax, (, ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge, ), ;, double]
[;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge, ), ;, double, labelHeight, =, 0.0, ;, double, labelWidth]
[., getMax, (, ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge, ), ;, double, labelHeight, =]
[;, double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), )]
[,, edge, ), ;, double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[), ;, double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, )]
[;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, .]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space]
[), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, +, this, .]
[., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight]
[), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, +, this]
[=, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, +, this, ., categoryLabelPositionOffset, ,, edge]
[;, space, ., add, (, labelHeight, +, tickLabelHeight, +, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, else, if, (]
[., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, +, this, ., categoryLabelPositionOffset, ,, edge, ), ;]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, )]
[., add, (, labelHeight, +, tickLabelHeight, +, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, else, if, (, RectangleEdge, .]
[,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, .]
[+, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[+, tickLabelHeight, +, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, )]
[+, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, .]
[., categoryLabelPositionOffset, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (]
[), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, +, this, .]
[., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth]
[), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, +, this]
[=, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, +, this, ., categoryLabelPositionOffset, ,, edge]
[;, space, ., add, (, labelWidth, +, tickLabelWidth, +, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, return, space, ;]
[., getWidth, (, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, +, this, ., categoryLabelPositionOffset, ,, edge, ), ;]
[;, }, return, space, ;, }, public, void, configure, (, ), {, }, public, AxisState, draw, (, Graphics2D, g2, ,]
[., add, (, labelWidth, +, tickLabelWidth, +, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, return, space, ;, }, public]
[,, edge, ), ;, }, return, space, ;, }, public, void, configure, (, ), {, }, public, AxisState, draw, (]
[+, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, return, space, ;, }, public, void, configure, (, ), {, }]
[+, tickLabelWidth, +, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, return, space, ;, }, public, void, configure, (, )]
[+, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, return, space, ;, }, public, void, configure, (, ), {, }]
[,, edge, ), ;, }, return, space, ;, }, public, void, configure, (, ), {, }, public, AxisState, draw, (]
[., categoryLabelPositionOffset, ,, edge, ), ;, }, return, space, ;, }, public, void, configure, (, ), {, }, public, AxisState]
[), ;, }, return, space, ;, }, public, void, configure, (, ), {, }, public, AxisState, draw, (, Graphics2D, g2]
[;, }, public, void, configure, (, ), {, }, public, AxisState, draw, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D]
[), {, return, new, AxisState, (, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2]
[), {, return, new, AxisState, (, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2]
[;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;]
[), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, )]
[), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;, }, AxisState, state, =, new, AxisState, (]
[;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, if, (, isTickMarksVisible, (, ), ), {, drawTickMarks, (]
[,, cursor, ,, dataArea, ,, edge, ), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, if, (]
[,, dataArea, ,, edge, ), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, if, (, isTickMarksVisible, (]
[,, edge, ), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, if, (, isTickMarksVisible, (, ), )]
[), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, if, (, isTickMarksVisible, (, ), ), {, drawTickMarks]
[;, if, (, isTickMarksVisible, (, ), ), {, drawTickMarks, (, g2, ,, cursor, ,, dataArea, ,, edge, ,, state, )]
[), ;, if, (, isTickMarksVisible, (, ), ), {, drawTickMarks, (, g2, ,, cursor, ,, dataArea, ,, edge, ,, state]
[), {, drawTickMarks, (, g2, ,, cursor, ,, dataArea, ,, edge, ,, state, ), ;, }, createAndAddEntity, (, cursor, ,]
[;, }, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2]
[,, cursor, ,, dataArea, ,, edge, ,, state, ), ;, }, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge]
[,, dataArea, ,, edge, ,, state, ), ;, }, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState]
[,, edge, ,, state, ), ;, }, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;]
[,, state, ), ;, }, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =]
[), ;, }, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawCategoryLabels, (]
[;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =]
[,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,]
[,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[,, edge, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,]
[,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, )]
[), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state]
[=, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (]
[;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState]
[,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,]
[,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,]
[,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,]
[,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,]
[,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,]
[=, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;]
[;, return, state, ;, }, protected, AxisState, drawCategoryLabels, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, return, state, ;, }, protected, AxisState]
[,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, return, state, ;, }, protected, AxisState, drawCategoryLabels, (]
[,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, return, state, ;, }, protected, AxisState, drawCategoryLabels, (, Graphics2D, g2]
[,, edge, ,, state, ,, plotState, ), ;, return, state, ;, }, protected, AxisState, drawCategoryLabels, (, Graphics2D, g2, ,, Rectangle2D]
[,, state, ,, plotState, ), ;, return, state, ;, }, protected, AxisState, drawCategoryLabels, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,]
[,, plotState, ), ;, return, state, ;, }, protected, AxisState, drawCategoryLabels, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea]
[), ;, return, state, ;, }, protected, AxisState, drawCategoryLabels, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[;, }, protected, AxisState, drawCategoryLabels, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, AxisState, state]
[), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, if, (, isTickLabelsVisible, (, ), ), {, List, ticks, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, if, (, isTickLabelsVisible, (, ), ), {, List]
[), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, if, (, isTickLabelsVisible, (, ), ), {, List, ticks, =]
[;, }, if, (, isTickLabelsVisible, (, ), ), {, List, ticks, =, refreshTicks, (, g2, ,, state, ,, plotArea, ,]
[), ;, }, if, (, isTickLabelsVisible, (, ), ), {, List, ticks, =, refreshTicks, (, g2, ,, state, ,, plotArea]
[), {, List, ticks, =, refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, ), ;, state, ., setTicks, (]
[;, state, ., setTicks, (, ticks, ), ;, int, categoryIndex, =, 0, ;, Iterator, iterator, =, ticks, ., iterator, (]
[,, state, ,, plotArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, int, categoryIndex, =, 0, ;]
[,, plotArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, int, categoryIndex, =, 0, ;, Iterator, iterator]
[,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, int, categoryIndex, =, 0, ;, Iterator, iterator, =, ticks]
[), ;, state, ., setTicks, (, ticks, ), ;, int, categoryIndex, =, 0, ;, Iterator, iterator, =, ticks, ., iterator]
[;, int, categoryIndex, =, 0, ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext]
[., setTicks, (, ticks, ), ;, int, categoryIndex, =, 0, ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;]
[), ;, int, categoryIndex, =, 0, ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, .]
[;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, CategoryTick]
[;, while, (, iterator, ., hasNext, (, ), ), {, CategoryTick, tick, =, (, CategoryTick, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, CategoryTick, tick, =, (, CategoryTick, )]
[), {, CategoryTick, tick, =, (, CategoryTick, ), iterator, ., next, (, ), ;, g2, ., setFont, (, getTickLabelFont, (]
[., hasNext, (, ), ), {, CategoryTick, tick, =, (, CategoryTick, ), iterator, ., next, (, ), ;, g2, .]
[;, g2, ., setFont, (, getTickLabelFont, (, tick, ., getCategory, (, ), ), ), ;, g2, ., setPaint, (, getTickLabelPaint]
[;, g2, ., setFont, (, getTickLabelFont, (, tick, ., getCategory, (, ), ), ), ;, g2, ., setPaint, (, getTickLabelPaint]
[., next, (, ), ;, g2, ., setFont, (, getTickLabelFont, (, tick, ., getCategory, (, ), ), ), ;, g2]
[;, g2, ., setPaint, (, getTickLabelPaint, (, tick, ., getCategory, (, ), ), ), ;, CategoryLabelPosition, position, =, this, .]
[., setFont, (, getTickLabelFont, (, tick, ., getCategory, (, ), ), ), ;, g2, ., setPaint, (, getTickLabelPaint, (, tick]
[), ;, g2, ., setPaint, (, getTickLabelPaint, (, tick, ., getCategory, (, ), ), ), ;, CategoryLabelPosition, position, =, this]
[), ), ;, g2, ., setPaint, (, getTickLabelPaint, (, tick, ., getCategory, (, ), ), ), ;, CategoryLabelPosition, position, =]
[., getCategory, (, ), ), ), ;, g2, ., setPaint, (, getTickLabelPaint, (, tick, ., getCategory, (, ), ), )]
[;, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, double, x0, =, 0.0, ;, double, x1]
[., setPaint, (, getTickLabelPaint, (, tick, ., getCategory, (, ), ), ), ;, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, .]
[), ;, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, double, x0, =, 0.0, ;, double]
[), ), ;, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, double, x0, =, 0.0, ;]
[., getCategory, (, ), ), ), ;, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, double]
[;, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =, 0.0]
[., getLabelPosition, (, edge, ), ;, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =, 0.0]
[., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double, y0]
[), ;, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =]
[;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==]
[;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[;, double, y1, =, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (]
[), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1]
[==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1]
[., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[=, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (]
[;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, .]
[,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (]
[,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1]
[=, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, state, .]
[;, y1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, y0, =, y1, -, state, ., getMax]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), -]
[,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, y0, =]
[., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), -, this, .]
[,, edge, ), ;, y1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, y0, =, y1, -]
[), ;, y1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, y0, =, y1, -, state, .]
[=, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, y0, =, y1, -, state, ., getMax, (, )]
[;, y0, =, y1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM]
[-, this, ., categoryLabelPositionOffset, ;, y0, =, y1, -, state, ., getMax, (, ), ;, }, else, if, (, edge]
[., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, y0, =, y1, -, state, ., getMax, (, ), ;, }]
[;, y0, =, y1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM]
[., categoryLabelPositionOffset, ;, y0, =, y1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge]
[=, y1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, .]
[-, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, .]
[., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (]
[), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1]
[==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1]
[., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[=, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (]
[;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y0, =]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, .]
[,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (]
[,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y0]
[=, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y0, =, state, .]
[;, y0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, y1, =, y0, +, state, ., getMax]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), +]
[,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, y1, =]
[., size, (, ), ,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), +, this, .]
[,, edge, ), ;, y0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, y1, =, y0, +]
[), ;, y0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, y1, =, y0, +, state, .]
[=, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, y1, =, y0, +, state, ., getMax, (, )]
[;, y1, =, y0, +, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT]
[+, this, ., categoryLabelPositionOffset, ;, y1, =, y0, +, state, ., getMax, (, ), ;, }, else, if, (, edge]
[., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, y1, =, y0, +, state, ., getMax, (, ), ;, }]
[;, y1, =, y0, +, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT]
[., categoryLabelPositionOffset, ;, y1, =, y0, +, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge]
[=, y0, +, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, .]
[+, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, .]
[., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (]
[), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1]
[==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1]
[., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[=, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (]
[;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, .]
[,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (]
[,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1]
[=, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, state, .]
[;, x1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, x0, =, x1, -, state, ., getMax]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), -]
[,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, x0, =]
[., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), -, this, .]
[,, edge, ), ;, x1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, x0, =, x1, -]
[), ;, x1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, x0, =, x1, -, state, .]
[=, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, x0, =, x1, -, state, ., getMax, (, )]
[;, x0, =, x1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT]
[-, this, ., categoryLabelPositionOffset, ;, x0, =, x1, -, state, ., getMax, (, ), ;, }, else, if, (, edge]
[., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, x0, =, x1, -, state, ., getMax, (, ), ;, }]
[;, x0, =, x1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT]
[., categoryLabelPositionOffset, ;, x0, =, x1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge]
[=, x1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, .]
[-, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, .]
[., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (]
[), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1]
[==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1]
[., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[=, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (]
[;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x0, =]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, .]
[,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (]
[,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x0]
[=, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x0, =, state, .]
[;, x0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, x1, =, x0, -, state, ., getMax]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), +]
[,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, x1, =]
[., size, (, ), ,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), +, this, .]
[,, edge, ), ;, x0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, x1, =, x0, -]
[), ;, x0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, x1, =, x0, -, state, .]
[=, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, x1, =, x0, -, state, ., getMax, (, )]
[;, x1, =, x0, -, state, ., getMax, (, ), ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (]
[+, this, ., categoryLabelPositionOffset, ;, x1, =, x0, -, state, ., getMax, (, ), ;, }, Rectangle2D, area, =, new]
[., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, x1, =, x0, -, state, ., getMax, (, ), ;, }]
[;, x1, =, x0, -, state, ., getMax, (, ), ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (]
[., categoryLabelPositionOffset, ;, x1, =, x0, -, state, ., getMax, (, ), ;, }, Rectangle2D, area, =, new, Rectangle2D, .]
[=, x0, -, state, ., getMax, (, ), ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,]
[;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0, ), ,]
[-, state, ., getMax, (, ), ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,]
[;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0, ), ,]
[., getMax, (, ), ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1]
[;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, area, ,, position, ., getCategoryAnchor, (, ), ), ;, TextBlock, block, =]
[,, y0, ,, (, x1, -, x0, ), ,, (, y1, -, y0, ), ), ;, Point2D, anchorPoint, =, RectangleAnchor]
[,, (, x1, -, x0, ), ,, (, y1, -, y0, ), ), ;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates]
[,, (, y1, -, y0, ), ), ;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, area, ,, position, ., getCategoryAnchor]
[), ,, (, y1, -, y0, ), ), ;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, area, ,, position, .]
[-, x0, ), ,, (, y1, -, y0, ), ), ;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, area, ,]
[), ,, (, y1, -, y0, ), ), ;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, area, ,, position, .]
[), ;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, area, ,, position, ., getCategoryAnchor, (, ), ), ;, TextBlock, block]
[), ), ;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, area, ,, position, ., getCategoryAnchor, (, ), ), ;, TextBlock]
[-, y0, ), ), ;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, area, ,, position, ., getCategoryAnchor, (, ), )]
[), ), ;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, area, ,, position, ., getCategoryAnchor, (, ), ), ;, TextBlock]
[;, TextBlock, block, =, tick, ., getLabel, (, ), ;, block, ., draw, (, g2, ,, (, float, ), anchorPoint]
[., coordinates, (, area, ,, position, ., getCategoryAnchor, (, ), ), ;, TextBlock, block, =, tick, ., getLabel, (, )]
[,, position, ., getCategoryAnchor, (, ), ), ;, TextBlock, block, =, tick, ., getLabel, (, ), ;, block, ., draw]
[), ;, TextBlock, block, =, tick, ., getLabel, (, ), ;, block, ., draw, (, g2, ,, (, float, )]
[., getCategoryAnchor, (, ), ), ;, TextBlock, block, =, tick, ., getLabel, (, ), ;, block, ., draw, (, g2]
[;, block, ., draw, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint]
[., getLabel, (, ), ;, block, ., draw, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,]
[;, Shape, bounds, =, block, ., calculateBounds, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (]
[., draw, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY]
[,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position]
[,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint]
[,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint]
[., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,]
[,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint]
[,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint]
[., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,]
[,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position]
[., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY]
[,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, Shape, bounds, =]
[,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, Shape, bounds, =]
[., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), )]
[,, position, ., getAngle, (, ), ), ;, Shape, bounds, =, block, ., calculateBounds, (, g2, ,, (, float, )]
[,, position, ., getAngle, (, ), ), ;, Shape, bounds, =, block, ., calculateBounds, (, g2, ,, (, float, )]
[., getY, (, ), ,, position, ., getAngle, (, ), ), ;, Shape, bounds, =, block, ., calculateBounds, (, g2]
[), ;, Shape, bounds, =, block, ., calculateBounds, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,]
[., getAngle, (, ), ), ;, Shape, bounds, =, block, ., calculateBounds, (, g2, ,, (, float, ), anchorPoint, .]
[;, if, (, plotState, !=, null, &&, plotState, ., getOwner, (, ), !=, null, ), {, EntityCollection, entities, =, plotState]
[., calculateBounds, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY]
[,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position]
[,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint]
[,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint]
[., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,]
[,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint]
[,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint]
[., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,]
[,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position]
[., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY]
[,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, if, (, plotState]
[,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, if, (, plotState]
[., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), )]
[,, position, ., getAngle, (, ), ), ;, if, (, plotState, !=, null, &&, plotState, ., getOwner, (, ), !=]
[,, position, ., getAngle, (, ), ), ;, if, (, plotState, !=, null, &&, plotState, ., getOwner, (, ), !=]
[., getY, (, ), ,, position, ., getAngle, (, ), ), ;, if, (, plotState, !=, null, &&, plotState, .]
[), ;, if, (, plotState, !=, null, &&, plotState, ., getOwner, (, ), !=, null, ), {, EntityCollection, entities, =]
[., getAngle, (, ), ), ;, if, (, plotState, !=, null, &&, plotState, ., getOwner, (, ), !=, null, )]
[), {, EntityCollection, entities, =, plotState, ., getOwner, (, ), ., getEntityCollection, (, ), ;, if, (, entities, !=, null]
[&&, plotState, ., getOwner, (, ), !=, null, ), {, EntityCollection, entities, =, plotState, ., getOwner, (, ), ., getEntityCollection]
[!=, null, &&, plotState, ., getOwner, (, ), !=, null, ), {, EntityCollection, entities, =, plotState, ., getOwner, (, )]
[&&, plotState, ., getOwner, (, ), !=, null, ), {, EntityCollection, entities, =, plotState, ., getOwner, (, ), ., getEntityCollection]
[), {, EntityCollection, entities, =, plotState, ., getOwner, (, ), ., getEntityCollection, (, ), ;, if, (, entities, !=, null]
[!=, null, ), {, EntityCollection, entities, =, plotState, ., getOwner, (, ), ., getEntityCollection, (, ), ;, if, (, entities]
[., getOwner, (, ), !=, null, ), {, EntityCollection, entities, =, plotState, ., getOwner, (, ), ., getEntityCollection, (, )]
[), {, EntityCollection, entities, =, plotState, ., getOwner, (, ), ., getEntityCollection, (, ), ;, if, (, entities, !=, null]
[;, if, (, entities, !=, null, ), {, String, tooltip, =, getCategoryLabelToolTip, (, tick, ., getCategory, (, ), ), ;]
[., getEntityCollection, (, ), ;, if, (, entities, !=, null, ), {, String, tooltip, =, getCategoryLabelToolTip, (, tick, ., getCategory]
[., getOwner, (, ), ., getEntityCollection, (, ), ;, if, (, entities, !=, null, ), {, String, tooltip, =, getCategoryLabelToolTip]
[), {, String, tooltip, =, getCategoryLabelToolTip, (, tick, ., getCategory, (, ), ), ;, entities, ., add, (, new, CategoryLabelEntity]
[!=, null, ), {, String, tooltip, =, getCategoryLabelToolTip, (, tick, ., getCategory, (, ), ), ;, entities, ., add, (]
[), {, String, tooltip, =, getCategoryLabelToolTip, (, tick, ., getCategory, (, ), ), ;, entities, ., add, (, new, CategoryLabelEntity]
[;, entities, ., add, (, new, CategoryLabelEntity, (, tick, ., getCategory, (, ), ,, bounds, ,, tooltip, ,, null, )]
[), ;, entities, ., add, (, new, CategoryLabelEntity, (, tick, ., getCategory, (, ), ,, bounds, ,, tooltip, ,, null]
[., getCategory, (, ), ), ;, entities, ., add, (, new, CategoryLabelEntity, (, tick, ., getCategory, (, ), ,, bounds]
[;, }, }, categoryIndex, ++, ;, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double]
[., add, (, new, CategoryLabelEntity, (, tick, ., getCategory, (, ), ,, bounds, ,, tooltip, ,, null, ), ), ;]
[), ;, }, }, categoryIndex, ++, ;, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {]
[,, bounds, ,, tooltip, ,, null, ), ), ;, }, }, categoryIndex, ++, ;, }, if, (, edge, ., equals]
[., getCategory, (, ), ,, bounds, ,, tooltip, ,, null, ), ), ;, }, }, categoryIndex, ++, ;, }, if]
[,, tooltip, ,, null, ), ), ;, }, }, categoryIndex, ++, ;, }, if, (, edge, ., equals, (, RectangleEdge]
[,, null, ), ), ;, }, }, categoryIndex, ++, ;, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP]
[), ), ;, }, }, categoryIndex, ++, ;, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), )]
[;, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =, state, ., getMax]
[++, ;, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =, state, .]
[), {, double, h, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorUp, (, h]
[., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =, state, ., getMax, (, ), +, this, .]
[), ), {, double, h, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorUp, (]
[., TOP, ), ), {, double, h, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, .]
[;, state, ., cursorUp, (, h, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, )]
[+, this, ., categoryLabelPositionOffset, ;, state, ., cursorUp, (, h, ), ;, }, else, if, (, edge, ., equals, (]
[., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorUp, (, h, ), ;, }, else, if, (]
[;, state, ., cursorUp, (, h, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, )]
[., categoryLabelPositionOffset, ;, state, ., cursorUp, (, h, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, .]
[;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =, state, .]
[., cursorUp, (, h, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {]
[), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =, state]
[), {, double, h, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorDown, (, h]
[., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =, state, ., getMax, (, ), +, this, .]
[), ), {, double, h, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorDown, (]
[., BOTTOM, ), ), {, double, h, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, .]
[;, state, ., cursorDown, (, h, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double]
[+, this, ., categoryLabelPositionOffset, ;, state, ., cursorDown, (, h, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorDown, (, h, ), ;, }, else, if, (]
[;, state, ., cursorDown, (, h, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double]
[., categoryLabelPositionOffset, ;, state, ., cursorDown, (, h, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, )]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =, state, ., getMax, (, )]
[., cursorDown, (, h, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =, state, ., getMax, (]
[), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorLeft, (, w]
[==, RectangleEdge, ., LEFT, ), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state]
[), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorLeft, (, w]
[., LEFT, ), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorLeft]
[;, state, ., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double]
[+, this, ., categoryLabelPositionOffset, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (]
[;, state, ., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double]
[., categoryLabelPositionOffset, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, )]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =, state, ., getMax, (, )]
[., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =, state, ., getMax, (]
[), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorRight, (, w]
[==, RectangleEdge, ., RIGHT, ), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state]
[), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorRight, (, w]
[., RIGHT, ), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorRight]
[;, state, ., cursorRight, (, w, ), ;, }, }, return, state, ;, }, public, List, refreshTicks, (, Graphics2D, g2]
[+, this, ., categoryLabelPositionOffset, ;, state, ., cursorRight, (, w, ), ;, }, }, return, state, ;, }, public, List]
[., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorRight, (, w, ), ;, }, }, return, state]
[;, state, ., cursorRight, (, w, ), ;, }, }, return, state, ;, }, public, List, refreshTicks, (, Graphics2D, g2]
[., categoryLabelPositionOffset, ;, state, ., cursorRight, (, w, ), ;, }, }, return, state, ;, }, public, List, refreshTicks, (]
[;, }, }, return, state, ;, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea, ,]
[., cursorRight, (, w, ), ;, }, }, return, state, ;, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState]
[), ;, }, }, return, state, ;, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea]
[;, }, public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List]
[;, if, (, dataArea, ., getHeight, (, ), <=, 0.0, ||, dataArea, ., getWidth, (, ), <, 0.0, ), {]
[), {, return, ticks, ;, }, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, List, categories, =, plot]
[||, dataArea, ., getWidth, (, ), <, 0.0, ), {, return, ticks, ;, }, CategoryPlot, plot, =, (, CategoryPlot, )]
[<=, 0.0, ||, dataArea, ., getWidth, (, ), <, 0.0, ), {, return, ticks, ;, }, CategoryPlot, plot, =, (]
[., getHeight, (, ), <=, 0.0, ||, dataArea, ., getWidth, (, ), <, 0.0, ), {, return, ticks, ;, }]
[||, dataArea, ., getWidth, (, ), <, 0.0, ), {, return, ticks, ;, }, CategoryPlot, plot, =, (, CategoryPlot, )]
[), {, return, ticks, ;, }, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, List, categories, =, plot]
[<, 0.0, ), {, return, ticks, ;, }, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, List, categories]
[., getWidth, (, ), <, 0.0, ), {, return, ticks, ;, }, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (]
[), {, return, ticks, ;, }, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, List, categories, =, plot]
[;, }, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, List, categories, =, plot, ., getCategoriesForAxis, (, this]
[;, List, categories, =, plot, ., getCategoriesForAxis, (, this, ), ;, double, max, =, 0.0, ;, if, (, categories, !=]
[;, List, categories, =, plot, ., getCategoriesForAxis, (, this, ), ;, double, max, =, 0.0, ;, if, (, categories, !=]
[;, double, max, =, 0.0, ;, if, (, categories, !=, null, ), {, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, .]
[., getCategoriesForAxis, (, this, ), ;, double, max, =, 0.0, ;, if, (, categories, !=, null, ), {, CategoryLabelPosition, position]
[), ;, double, max, =, 0.0, ;, if, (, categories, !=, null, ), {, CategoryLabelPosition, position, =, this, ., categoryLabelPositions]
[;, if, (, categories, !=, null, ), {, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;]
[), {, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, float, r, =, this, ., maximumCategoryLabelWidthRatio]
[!=, null, ), {, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, float, r, =, this]
[), {, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, float, r, =, this, ., maximumCategoryLabelWidthRatio]
[;, float, r, =, this, ., maximumCategoryLabelWidthRatio, ;, if, (, r, <=, 0.0, ), {, r, =, position, ., getWidthRatio]
[., getLabelPosition, (, edge, ), ;, float, r, =, this, ., maximumCategoryLabelWidthRatio, ;, if, (, r, <=, 0.0, ), {]
[., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, float, r, =, this, ., maximumCategoryLabelWidthRatio, ;, if, (, r, <=, 0.0]
[), ;, float, r, =, this, ., maximumCategoryLabelWidthRatio, ;, if, (, r, <=, 0.0, ), {, r, =, position, .]
[;, if, (, r, <=, 0.0, ), {, r, =, position, ., getWidthRatio, (, ), ;, }, float, l, =]
[., maximumCategoryLabelWidthRatio, ;, if, (, r, <=, 0.0, ), {, r, =, position, ., getWidthRatio, (, ), ;, }, float]
[), {, r, =, position, ., getWidthRatio, (, ), ;, }, float, l, =, 0.0f, ;, if, (, position, .]
[<=, 0.0, ), {, r, =, position, ., getWidthRatio, (, ), ;, }, float, l, =, 0.0f, ;, if, (]
[), {, r, =, position, ., getWidthRatio, (, ), ;, }, float, l, =, 0.0f, ;, if, (, position, .]
[=, position, ., getWidthRatio, (, ), ;, }, float, l, =, 0.0f, ;, if, (, position, ., getWidthType, (, )]
[;, }, float, l, =, 0.0f, ;, if, (, position, ., getWidthType, (, ), ==, CategoryLabelWidthType, ., CATEGORY, ), {]
[., getWidthRatio, (, ), ;, }, float, l, =, 0.0f, ;, if, (, position, ., getWidthType, (, ), ==, CategoryLabelWidthType]
[;, if, (, position, ., getWidthType, (, ), ==, CategoryLabelWidthType, ., CATEGORY, ), {, l, =, (, float, ), calculateCategorySize]
[), {, l, =, (, float, ), calculateCategorySize, (, categories, ., size, (, ), ,, dataArea, ,, edge, ), ;]
[==, CategoryLabelWidthType, ., CATEGORY, ), {, l, =, (, float, ), calculateCategorySize, (, categories, ., size, (, ), ,, dataArea]
[., getWidthType, (, ), ==, CategoryLabelWidthType, ., CATEGORY, ), {, l, =, (, float, ), calculateCategorySize, (, categories, ., size]
[), {, l, =, (, float, ), calculateCategorySize, (, categories, ., size, (, ), ,, dataArea, ,, edge, ), ;]
[., CATEGORY, ), {, l, =, (, float, ), calculateCategorySize, (, categories, ., size, (, ), ,, dataArea, ,, edge]
[=, (, float, ), calculateCategorySize, (, categories, ., size, (, ), ,, dataArea, ,, edge, ), ;, }, else, {]
[;, }, else, {, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, l, =, (, float, ), dataArea]
[;, }, else, {, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, l, =, (, float, ), dataArea]
[,, dataArea, ,, edge, ), ;, }, else, {, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, l]
[., size, (, ), ,, dataArea, ,, edge, ), ;, }, else, {, if, (, RectangleEdge, ., isLeftOrRight, (, edge]
[,, edge, ), ;, }, else, {, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, l, =, (]
[), ;, }, else, {, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, l, =, (, float, )]
[), {, l, =, (, float, ), dataArea, ., getWidth, (, ), ;, }, else, {, l, =, (, float]
[., isLeftOrRight, (, edge, ), ), {, l, =, (, float, ), dataArea, ., getWidth, (, ), ;, }, else]
[), ), {, l, =, (, float, ), dataArea, ., getWidth, (, ), ;, }, else, {, l, =, (]
[=, (, float, ), dataArea, ., getWidth, (, ), ;, }, else, {, l, =, (, float, ), dataArea, .]
[;, }, else, {, l, =, (, float, ), dataArea, ., getHeight, (, ), ;, }, }, int, categoryIndex, =]
[;, }, else, {, l, =, (, float, ), dataArea, ., getHeight, (, ), ;, }, }, int, categoryIndex, =]
[., getWidth, (, ), ;, }, else, {, l, =, (, float, ), dataArea, ., getHeight, (, ), ;, }]
[=, (, float, ), dataArea, ., getHeight, (, ), ;, }, }, int, categoryIndex, =, 0, ;, Iterator, iterator, =]
[;, }, }, int, categoryIndex, =, 0, ;, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator]
[;, }, }, int, categoryIndex, =, 0, ;, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator]
[., getHeight, (, ), ;, }, }, int, categoryIndex, =, 0, ;, Iterator, iterator, =, categories, ., iterator, (, )]
[;, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable]
[;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, category, =, (, Comparable, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, category, =, (, Comparable, )]
[), {, Comparable, category, =, (, Comparable, ), iterator, ., next, (, ), ;, g2, ., setFont, (, getTickLabelFont, (]
[., hasNext, (, ), ), {, Comparable, category, =, (, Comparable, ), iterator, ., next, (, ), ;, g2, .]
[;, g2, ., setFont, (, getTickLabelFont, (, category, ), ), ;, TextBlock, label, =, createLabel, (, category, ,, l, *]
[;, g2, ., setFont, (, getTickLabelFont, (, category, ), ), ;, TextBlock, label, =, createLabel, (, category, ,, l, *]
[., next, (, ), ;, g2, ., setFont, (, getTickLabelFont, (, category, ), ), ;, TextBlock, label, =, createLabel, (]
[;, TextBlock, label, =, createLabel, (, category, ,, l, *, r, ,, edge, ,, g2, ), ;, if, (, edge]
[., setFont, (, getTickLabelFont, (, category, ), ), ;, TextBlock, label, =, createLabel, (, category, ,, l, *, r, ,]
[), ;, TextBlock, label, =, createLabel, (, category, ,, l, *, r, ,, edge, ,, g2, ), ;, if, (]
[), ), ;, TextBlock, label, =, createLabel, (, category, ,, l, *, r, ,, edge, ,, g2, ), ;, if]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, max, =, Math, .]
[,, l, *, r, ,, edge, ,, g2, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==]
[,, edge, ,, g2, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, )]
[*, r, ,, edge, ,, g2, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, .]
[,, edge, ,, g2, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, )]
[,, g2, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, max]
[), ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, max, =, Math]
[), {, max, =, Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,, g2, ), ), ;]
[||, edge, ==, RectangleEdge, ., BOTTOM, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,]
[==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, max, =, Math, ., max, (, max, ,]
[||, edge, ==, RectangleEdge, ., BOTTOM, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,]
[., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockHeight, (]
[), {, max, =, Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,, g2, ), ), ;]
[==, RectangleEdge, ., BOTTOM, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,]
[), {, max, =, Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,, g2, ), ), ;]
[., BOTTOM, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,, g2, )]
[=, Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,, g2, ), ), ;, }, else, if]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, max, =]
[., max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,, g2, ), ), ;, }, else, if, (, edge]
[,, calculateTextBlockHeight, (, label, ,, position, ,, g2, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, max]
[,, position, ,, g2, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge]
[,, g2, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT]
[), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {]
[), {, max, =, Math, ., max, (, max, ,, calculateTextBlockWidth, (, label, ,, position, ,, g2, ), ), ;]
[||, edge, ==, RectangleEdge, ., RIGHT, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockWidth, (, label, ,]
[==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, max, =, Math, ., max, (, max, ,]
[||, edge, ==, RectangleEdge, ., RIGHT, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockWidth, (, label, ,]
[., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockWidth, (]
[), {, max, =, Math, ., max, (, max, ,, calculateTextBlockWidth, (, label, ,, position, ,, g2, ), ), ;]
[==, RectangleEdge, ., RIGHT, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockWidth, (, label, ,, position, ,]
[), {, max, =, Math, ., max, (, max, ,, calculateTextBlockWidth, (, label, ,, position, ,, g2, ), ), ;]
[., RIGHT, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockWidth, (, label, ,, position, ,, g2, )]
[=, Math, ., max, (, max, ,, calculateTextBlockWidth, (, label, ,, position, ,, g2, ), ), ;, }, Tick, tick]
[;, }, Tick, tick, =, new, CategoryTick, (, category, ,, label, ,, position, ., getLabelAnchor, (, ), ,, position, .]
[., max, (, max, ,, calculateTextBlockWidth, (, label, ,, position, ,, g2, ), ), ;, }, Tick, tick, =, new]
[,, calculateTextBlockWidth, (, label, ,, position, ,, g2, ), ), ;, }, Tick, tick, =, new, CategoryTick, (, category, ,]
[), ;, }, Tick, tick, =, new, CategoryTick, (, category, ,, label, ,, position, ., getLabelAnchor, (, ), ,, position]
[,, position, ,, g2, ), ), ;, }, Tick, tick, =, new, CategoryTick, (, category, ,, label, ,, position, .]
[,, g2, ), ), ;, }, Tick, tick, =, new, CategoryTick, (, category, ,, label, ,, position, ., getLabelAnchor, (]
[), ), ;, }, Tick, tick, =, new, CategoryTick, (, category, ,, label, ,, position, ., getLabelAnchor, (, ), ,]
[;, ticks, ., add, (, tick, ), ;, categoryIndex, =, categoryIndex, +, 1, ;, }, }, state, ., setMax, (]
[,, label, ,, position, ., getLabelAnchor, (, ), ,, position, ., getRotationAnchor, (, ), ,, position, ., getAngle, (, )]
[,, position, ., getLabelAnchor, (, ), ,, position, ., getRotationAnchor, (, ), ,, position, ., getAngle, (, ), ), ;]
[,, position, ., getRotationAnchor, (, ), ,, position, ., getAngle, (, ), ), ;, ticks, ., add, (, tick, )]
[., getLabelAnchor, (, ), ,, position, ., getRotationAnchor, (, ), ,, position, ., getAngle, (, ), ), ;, ticks, .]
[,, position, ., getAngle, (, ), ), ;, ticks, ., add, (, tick, ), ;, categoryIndex, =, categoryIndex, +, 1]
[., getRotationAnchor, (, ), ,, position, ., getAngle, (, ), ), ;, ticks, ., add, (, tick, ), ;, categoryIndex]
[), ;, ticks, ., add, (, tick, ), ;, categoryIndex, =, categoryIndex, +, 1, ;, }, }, state, ., setMax]
[., getAngle, (, ), ), ;, ticks, ., add, (, tick, ), ;, categoryIndex, =, categoryIndex, +, 1, ;, }]
[;, categoryIndex, =, categoryIndex, +, 1, ;, }, }, state, ., setMax, (, max, ), ;, return, ticks, ;, }]
[., add, (, tick, ), ;, categoryIndex, =, categoryIndex, +, 1, ;, }, }, state, ., setMax, (, max, )]
[), ;, categoryIndex, =, categoryIndex, +, 1, ;, }, }, state, ., setMax, (, max, ), ;, return, ticks, ;]
[=, categoryIndex, +, 1, ;, }, }, state, ., setMax, (, max, ), ;, return, ticks, ;, }, public, void]
[;, }, }, state, ., setMax, (, max, ), ;, return, ticks, ;, }, public, void, drawTickMarks, (, Graphics2D, g2]
[+, 1, ;, }, }, state, ., setMax, (, max, ), ;, return, ticks, ;, }, public, void, drawTickMarks, (]
[;, }, }, state, ., setMax, (, max, ), ;, return, ticks, ;, }, public, void, drawTickMarks, (, Graphics2D, g2]
[;, return, ticks, ;, }, public, void, drawTickMarks, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[., setMax, (, max, ), ;, return, ticks, ;, }, public, void, drawTickMarks, (, Graphics2D, g2, ,, double, cursor, ,]
[), ;, return, ticks, ;, }, public, void, drawTickMarks, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[;, }, public, void, drawTickMarks, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, AxisState, state]
[;, if, (, p, ==, null, ), {, return, ;, }, CategoryPlot, plot, =, (, CategoryPlot, ), p, ;, double]
[), {, return, ;, }, CategoryPlot, plot, =, (, CategoryPlot, ), p, ;, double, il, =, getTickMarkInsideLength, (, ), ;]
[==, null, ), {, return, ;, }, CategoryPlot, plot, =, (, CategoryPlot, ), p, ;, double, il, =, getTickMarkInsideLength, (]
[), {, return, ;, }, CategoryPlot, plot, =, (, CategoryPlot, ), p, ;, double, il, =, getTickMarkInsideLength, (, ), ;]
[;, double, il, =, getTickMarkInsideLength, (, ), ;, double, ol, =, getTickMarkOutsideLength, (, ), ;, Line2D, line, =, new, Line2D]
[;, double, il, =, getTickMarkInsideLength, (, ), ;, double, ol, =, getTickMarkOutsideLength, (, ), ;, Line2D, line, =, new, Line2D]
[;, double, ol, =, getTickMarkOutsideLength, (, ), ;, Line2D, line, =, new, Line2D, ., Double, (, ), ;, List, categories]
[;, Line2D, line, =, new, Line2D, ., Double, (, ), ;, List, categories, =, plot, ., getCategoriesForAxis, (, this, )]
[;, List, categories, =, plot, ., getCategoriesForAxis, (, this, ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;]
[;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, if]
[., getCategoriesForAxis, (, this, ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, g2, ., setStroke, (, getTickMarkStroke]
[), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;]
[;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, if, (, edge, ., equals, (, RectangleEdge, ., TOP, )]
[., setPaint, (, getTickMarkPaint, (, ), ), ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, if, (, edge]
[), ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, if, (, edge, ., equals, (, RectangleEdge, ., TOP]
[;, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, Iterator, iterator, =, categories, ., iterator, (]
[., setStroke, (, getTickMarkStroke, (, ), ), ;, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {]
[), ;, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, Iterator, iterator, =, categories, ., iterator]
[), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {]
[., equals, (, RectangleEdge, ., TOP, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), )]
[., TOP, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (]
[;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (, key]
[., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, x]
[;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x]
[;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x]
[., next, (, ), ;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line]
[;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, il, ), ;, g2, ., draw, (]
[,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +]
[,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, il, )]
[,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, il, ), ;, g2]
[), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, il, ), ;, g2, ., draw]
[;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -]
[., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, il, ), ;, g2, ., draw, (, line, )]
[,, cursor, ,, x, ,, cursor, +, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine]
[,, x, ,, cursor, +, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x]
[,, cursor, +, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor]
[), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor]
[+, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x]
[), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor]
[;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, ol, ), ;, g2, ., draw, (]
[., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, ol, )]
[), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, ol, ), ;, g2, ., draw]
[;, g2, ., draw, (, line, ), ;, }, state, ., cursorUp, (, ol, ), ;, }, else, if, (]
[., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, ol, ), ;, g2, ., draw, (, line, )]
[,, cursor, ,, x, ,, cursor, -, ol, ), ;, g2, ., draw, (, line, ), ;, }, state, .]
[,, x, ,, cursor, -, ol, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorUp, (]
[,, cursor, -, ol, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorUp, (, ol, )]
[), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorUp, (, ol, ), ;, }, else, if]
[-, ol, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorUp, (, ol, ), ;, }]
[), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorUp, (, ol, ), ;, }, else, if]
[;, }, state, ., cursorUp, (, ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM]
[., draw, (, line, ), ;, }, state, ., cursorUp, (, ol, ), ;, }, else, if, (, edge, .]
[), ;, }, state, ., cursorUp, (, ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, .]
[;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, Iterator, iterator, =, categories, .]
[., cursorUp, (, ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {]
[), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, Iterator, iterator, =, categories]
[), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {]
[., equals, (, RectangleEdge, ., BOTTOM, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), )]
[., BOTTOM, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (]
[;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (, key]
[., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, x]
[;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x]
[;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x]
[., next, (, ), ;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line]
[;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, il, ), ;, g2, ., draw, (]
[,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -]
[,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, il, )]
[,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, il, ), ;, g2]
[), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, il, ), ;, g2, ., draw]
[;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +]
[., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, il, ), ;, g2, ., draw, (, line, )]
[,, cursor, ,, x, ,, cursor, -, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine]
[,, x, ,, cursor, -, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x]
[,, cursor, -, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor]
[), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor]
[-, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x]
[), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor]
[;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, ol, ), ;, g2, ., draw, (]
[., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, ol, )]
[), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, ol, ), ;, g2, ., draw]
[;, g2, ., draw, (, line, ), ;, }, state, ., cursorDown, (, ol, ), ;, }, else, if, (]
[., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, ol, ), ;, g2, ., draw, (, line, )]
[,, cursor, ,, x, ,, cursor, +, ol, ), ;, g2, ., draw, (, line, ), ;, }, state, .]
[,, x, ,, cursor, +, ol, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorDown, (]
[,, cursor, +, ol, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorDown, (, ol, )]
[), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorDown, (, ol, ), ;, }, else, if]
[+, ol, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorDown, (, ol, ), ;, }]
[), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorDown, (, ol, ), ;, }, else, if]
[;, }, state, ., cursorDown, (, ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., LEFT]
[., draw, (, line, ), ;, }, state, ., cursorDown, (, ol, ), ;, }, else, if, (, edge, .]
[), ;, }, state, ., cursorDown, (, ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, .]
[;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., LEFT, ), ), {, Iterator, iterator, =, categories, .]
[., cursorDown, (, ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., LEFT, ), ), {]
[), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., LEFT, ), ), {, Iterator, iterator, =, categories]
[), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {]
[., equals, (, RectangleEdge, ., LEFT, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), )]
[., LEFT, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (]
[;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (, key]
[., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, y]
[;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor]
[;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor]
[., next, (, ), ;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line]
[;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, il, ,, y, ), ;, g2, ., draw, (]
[,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, il, ,]
[,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, il, ,, y, )]
[,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, il, ,, y, ), ;, g2]
[), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, il, ,, y, ), ;, g2, ., draw]
[;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, ol, ,]
[., setLine, (, cursor, ,, y, ,, cursor, +, il, ,, y, ), ;, g2, ., draw, (, line, )]
[,, y, ,, cursor, +, il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine]
[,, cursor, +, il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor]
[,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor]
[+, il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y]
[,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor]
[), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, ol]
[;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, ol, ,, y, ), ;, g2, ., draw, (]
[., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, ol, ,, y, )]
[), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, ol, ,, y, ), ;, g2, ., draw]
[;, g2, ., draw, (, line, ), ;, }, state, ., cursorLeft, (, ol, ), ;, }, else, if, (]
[., setLine, (, cursor, ,, y, ,, cursor, -, ol, ,, y, ), ;, g2, ., draw, (, line, )]
[,, y, ,, cursor, -, ol, ,, y, ), ;, g2, ., draw, (, line, ), ;, }, state, .]
[,, cursor, -, ol, ,, y, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorLeft, (]
[,, y, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorLeft, (, ol, ), ;, }]
[-, ol, ,, y, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorLeft, (, ol, )]
[,, y, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorLeft, (, ol, ), ;, }]
[), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorLeft, (, ol, ), ;, }, else, if]
[;, }, state, ., cursorLeft, (, ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., RIGHT]
[., draw, (, line, ), ;, }, state, ., cursorLeft, (, ol, ), ;, }, else, if, (, edge, .]
[), ;, }, state, ., cursorLeft, (, ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, .]
[;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., RIGHT, ), ), {, Iterator, iterator, =, categories, .]
[., cursorLeft, (, ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., RIGHT, ), ), {]
[), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., RIGHT, ), ), {, Iterator, iterator, =, categories]
[), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {]
[., equals, (, RectangleEdge, ., RIGHT, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), )]
[., RIGHT, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (]
[;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (, key]
[., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, y]
[;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor]
[;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor]
[., next, (, ), ;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line]
[;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, il, ,, y, ), ;, g2, ., draw, (]
[,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, il, ,]
[,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, il, ,, y, )]
[,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, il, ,, y, ), ;, g2]
[), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, il, ,, y, ), ;, g2, ., draw]
[;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, ol, ,]
[., setLine, (, cursor, ,, y, ,, cursor, -, il, ,, y, ), ;, g2, ., draw, (, line, )]
[,, y, ,, cursor, -, il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine]
[,, cursor, -, il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor]
[,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor]
[-, il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y]
[,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor]
[), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, ol]
[;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, ol, ,, y, ), ;, g2, ., draw, (]
[., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, ol, ,, y, )]
[), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, ol, ,, y, ), ;, g2, ., draw]
[;, g2, ., draw, (, line, ), ;, }, state, ., cursorRight, (, ol, ), ;, }, }, protected, TextBlock]
[., setLine, (, cursor, ,, y, ,, cursor, +, ol, ,, y, ), ;, g2, ., draw, (, line, )]
[,, y, ,, cursor, +, ol, ,, y, ), ;, g2, ., draw, (, line, ), ;, }, state, .]
[,, cursor, +, ol, ,, y, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorRight, (]
[,, y, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorRight, (, ol, ), ;, }]
[+, ol, ,, y, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorRight, (, ol, )]
[,, y, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorRight, (, ol, ), ;, }]
[), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorRight, (, ol, ), ;, }, }, protected]
[;, }, state, ., cursorRight, (, ol, ), ;, }, }, protected, TextBlock, createLabel, (, Comparable, category, ,, float, width]
[., draw, (, line, ), ;, }, state, ., cursorRight, (, ol, ), ;, }, }, protected, TextBlock, createLabel, (]
[), ;, }, state, ., cursorRight, (, ol, ), ;, }, }, protected, TextBlock, createLabel, (, Comparable, category, ,, float]
[;, }, }, protected, TextBlock, createLabel, (, Comparable, category, ,, float, width, ,, RectangleEdge, edge, ,, Graphics2D, g2, ), {]
[., cursorRight, (, ol, ), ;, }, }, protected, TextBlock, createLabel, (, Comparable, category, ,, float, width, ,, RectangleEdge, edge]
[), ;, }, }, protected, TextBlock, createLabel, (, Comparable, category, ,, float, width, ,, RectangleEdge, edge, ,, Graphics2D, g2, )]
[;, return, label, ;, }, protected, double, calculateTextBlockWidth, (, TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D, g2, ), {, RectangleInsets]
[., createTextBlock, (, category, ., toString, (, ), ,, getTickLabelFont, (, category, ), ,, getTickLabelPaint, (, category, ), ,, width]
[,, getTickLabelFont, (, category, ), ,, getTickLabelPaint, (, category, ), ,, width, ,, this, ., maximumCategoryLabelLines, ,, new, G2TextMeasurer, (]
[., toString, (, ), ,, getTickLabelFont, (, category, ), ,, getTickLabelPaint, (, category, ), ,, width, ,, this, ., maximumCategoryLabelLines]
[,, getTickLabelPaint, (, category, ), ,, width, ,, this, ., maximumCategoryLabelLines, ,, new, G2TextMeasurer, (, g2, ), ), ;, return]
[), ,, getTickLabelPaint, (, category, ), ,, width, ,, this, ., maximumCategoryLabelLines, ,, new, G2TextMeasurer, (, g2, ), ), ;]
[,, width, ,, this, ., maximumCategoryLabelLines, ,, new, G2TextMeasurer, (, g2, ), ), ;, return, label, ;, }, protected, double]
[), ,, width, ,, this, ., maximumCategoryLabelLines, ,, new, G2TextMeasurer, (, g2, ), ), ;, return, label, ;, }, protected]
[,, this, ., maximumCategoryLabelLines, ,, new, G2TextMeasurer, (, g2, ), ), ;, return, label, ;, }, protected, double, calculateTextBlockWidth, (]
[,, new, G2TextMeasurer, (, g2, ), ), ;, return, label, ;, }, protected, double, calculateTextBlockWidth, (, TextBlock, block, ,, CategoryLabelPosition]
[., maximumCategoryLabelLines, ,, new, G2TextMeasurer, (, g2, ), ), ;, return, label, ;, }, protected, double, calculateTextBlockWidth, (, TextBlock, block]
[), ;, return, label, ;, }, protected, double, calculateTextBlockWidth, (, TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D, g2, ), {]
[), ), ;, return, label, ;, }, protected, double, calculateTextBlockWidth, (, TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D, g2, )]
[;, }, protected, double, calculateTextBlockWidth, (, TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D, g2, ), {, RectangleInsets, insets, =, getTickLabelInsets]
[;, Size2D, size, =, block, ., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0]
[;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,, size]
[., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, size, .]
[), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,]
[;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, )]
[,, 0.0, ,, size, ., getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities]
[,, size, ., getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape]
[,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle]
[., getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box]
[), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f]
[., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, )]
[;, double, w, =, rotatedBox, ., getBounds2D, (, ), ., getWidth, (, ), +, insets, ., getLeft, (, ), +]
[., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, w, =, rotatedBox]
[,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, w, =, rotatedBox, ., getBounds2D, (, )]
[,, 0.0f, ,, 0.0f, ), ;, double, w, =, rotatedBox, ., getBounds2D, (, ), ., getWidth, (, ), +, insets]
[., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, w, =, rotatedBox, ., getBounds2D, (, ), ., getWidth]
[,, 0.0f, ), ;, double, w, =, rotatedBox, ., getBounds2D, (, ), ., getWidth, (, ), +, insets, ., getLeft]
[), ;, double, w, =, rotatedBox, ., getBounds2D, (, ), ., getWidth, (, ), +, insets, ., getLeft, (, )]
[;, return, w, ;, }, protected, double, calculateTextBlockHeight, (, TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D, g2, ), {, RectangleInsets]
[+, insets, ., getRight, (, ), ;, return, w, ;, }, protected, double, calculateTextBlockHeight, (, TextBlock, block, ,, CategoryLabelPosition, position]
[+, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), ;, return, w, ;, }, protected, double, calculateTextBlockHeight]
[., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), ;, return, w, ;]
[., getBounds2D, (, ), ., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, )]
[+, insets, ., getRight, (, ), ;, return, w, ;, }, protected, double, calculateTextBlockHeight, (, TextBlock, block, ,, CategoryLabelPosition, position]
[., getLeft, (, ), +, insets, ., getRight, (, ), ;, return, w, ;, }, protected, double, calculateTextBlockHeight, (, TextBlock]
[;, return, w, ;, }, protected, double, calculateTextBlockHeight, (, TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D, g2, ), {, RectangleInsets]
[., getRight, (, ), ;, return, w, ;, }, protected, double, calculateTextBlockHeight, (, TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D]
[;, }, protected, double, calculateTextBlockHeight, (, TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D, g2, ), {, RectangleInsets, insets, =, getTickLabelInsets]
[;, Size2D, size, =, block, ., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0]
[;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,, size]
[., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, size, .]
[), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,]
[;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, )]
[,, 0.0, ,, size, ., getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities]
[,, size, ., getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape]
[,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle]
[., getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box]
[), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f]
[., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, )]
[;, double, h, =, rotatedBox, ., getBounds2D, (, ), ., getHeight, (, ), +, insets, ., getTop, (, ), +]
[., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, h, =, rotatedBox]
[,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, h, =, rotatedBox, ., getBounds2D, (, )]
[,, 0.0f, ,, 0.0f, ), ;, double, h, =, rotatedBox, ., getBounds2D, (, ), ., getHeight, (, ), +, insets]
[., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, h, =, rotatedBox, ., getBounds2D, (, ), ., getHeight]
[,, 0.0f, ), ;, double, h, =, rotatedBox, ., getBounds2D, (, ), ., getHeight, (, ), +, insets, ., getTop]
[), ;, double, h, =, rotatedBox, ., getBounds2D, (, ), ., getHeight, (, ), +, insets, ., getTop, (, )]
[;, return, h, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CategoryAxis, clone, =, (, CategoryAxis, ), super]
[+, insets, ., getBottom, (, ), ;, return, h, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CategoryAxis]
[+, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, return, h, ;, }, public, Object, clone]
[., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, return, h, ;]
[., getBounds2D, (, ), ., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, )]
[+, insets, ., getBottom, (, ), ;, return, h, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CategoryAxis]
[., getTop, (, ), +, insets, ., getBottom, (, ), ;, return, h, ;, }, public, Object, clone, (, )]
[;, return, h, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CategoryAxis, clone, =, (, CategoryAxis, ), super]
[., getBottom, (, ), ;, return, h, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CategoryAxis, clone, =]
[;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CategoryAxis, clone, =, (, CategoryAxis, ), super, ., clone, (]
[;, clone, ., tickLabelFontMap, =, new, HashMap, (, this, ., tickLabelFontMap, ), ;, clone, ., tickLabelPaintMap, =, new, HashMap, (]
[;, clone, ., tickLabelFontMap, =, new, HashMap, (, this, ., tickLabelFontMap, ), ;, clone, ., tickLabelPaintMap, =, new, HashMap, (]
[., clone, (, ), ;, clone, ., tickLabelFontMap, =, new, HashMap, (, this, ., tickLabelFontMap, ), ;, clone, ., tickLabelPaintMap]
[=, new, HashMap, (, this, ., tickLabelFontMap, ), ;, clone, ., tickLabelPaintMap, =, new, HashMap, (, this, ., tickLabelPaintMap, )]
[., tickLabelFontMap, =, new, HashMap, (, this, ., tickLabelFontMap, ), ;, clone, ., tickLabelPaintMap, =, new, HashMap, (, this, .]
[;, clone, ., tickLabelPaintMap, =, new, HashMap, (, this, ., tickLabelPaintMap, ), ;, clone, ., categoryLabelToolTips, =, new, HashMap, (]
[), ;, clone, ., tickLabelPaintMap, =, new, HashMap, (, this, ., tickLabelPaintMap, ), ;, clone, ., categoryLabelToolTips, =, new, HashMap]
[., tickLabelFontMap, ), ;, clone, ., tickLabelPaintMap, =, new, HashMap, (, this, ., tickLabelPaintMap, ), ;, clone, ., categoryLabelToolTips, =]
[=, new, HashMap, (, this, ., tickLabelPaintMap, ), ;, clone, ., categoryLabelToolTips, =, new, HashMap, (, this, ., categoryLabelToolTips, )]
[., tickLabelPaintMap, =, new, HashMap, (, this, ., tickLabelPaintMap, ), ;, clone, ., categoryLabelToolTips, =, new, HashMap, (, this, .]
[;, clone, ., categoryLabelToolTips, =, new, HashMap, (, this, ., categoryLabelToolTips, ), ;, return, clone, ;, }, public, boolean, equals]
[), ;, clone, ., categoryLabelToolTips, =, new, HashMap, (, this, ., categoryLabelToolTips, ), ;, return, clone, ;, }, public, boolean]
[., tickLabelPaintMap, ), ;, clone, ., categoryLabelToolTips, =, new, HashMap, (, this, ., categoryLabelToolTips, ), ;, return, clone, ;, }]
[=, new, HashMap, (, this, ., categoryLabelToolTips, ), ;, return, clone, ;, }, public, boolean, equals, (, Object, obj, )]
[., categoryLabelToolTips, =, new, HashMap, (, this, ., categoryLabelToolTips, ), ;, return, clone, ;, }, public, boolean, equals, (, Object]
[;, return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {]
[), ;, return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, )]
[., categoryLabelToolTips, ), ;, return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, CategoryAxis, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, CategoryAxis, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, CategoryAxis, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, CategoryAxis, ), ), {, return, false, ;, }, if, (, !, super]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false]
[instanceof, CategoryAxis, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, CategoryAxis, that, =]
[), {, return, false, ;, }, CategoryAxis, that, =, (, CategoryAxis, ), obj, ;, if, (, that, ., lowerMargin, !=]
[), {, return, false, ;, }, CategoryAxis, that, =, (, CategoryAxis, ), obj, ;, if, (, that, ., lowerMargin, !=]
[., equals, (, obj, ), ), {, return, false, ;, }, CategoryAxis, that, =, (, CategoryAxis, ), obj, ;, if]
[), ), {, return, false, ;, }, CategoryAxis, that, =, (, CategoryAxis, ), obj, ;, if, (, that, ., lowerMargin]
[;, }, CategoryAxis, that, =, (, CategoryAxis, ), obj, ;, if, (, that, ., lowerMargin, !=, this, ., lowerMargin, )]
[;, if, (, that, ., lowerMargin, !=, this, ., lowerMargin, ), {, return, false, ;, }, if, (, that, .]
[;, if, (, that, ., lowerMargin, !=, this, ., lowerMargin, ), {, return, false, ;, }, if, (, that, .]
[), {, return, false, ;, }, if, (, that, ., upperMargin, !=, this, ., upperMargin, ), {, return, false, ;]
[!=, this, ., lowerMargin, ), {, return, false, ;, }, if, (, that, ., upperMargin, !=, this, ., upperMargin, )]
[., lowerMargin, !=, this, ., lowerMargin, ), {, return, false, ;, }, if, (, that, ., upperMargin, !=, this, .]
[), {, return, false, ;, }, if, (, that, ., upperMargin, !=, this, ., upperMargin, ), {, return, false, ;]
[., lowerMargin, ), {, return, false, ;, }, if, (, that, ., upperMargin, !=, this, ., upperMargin, ), {, return]
[;, }, if, (, that, ., upperMargin, !=, this, ., upperMargin, ), {, return, false, ;, }, if, (, that]
[), {, return, false, ;, }, if, (, that, ., categoryMargin, !=, this, ., categoryMargin, ), {, return, false, ;]
[!=, this, ., upperMargin, ), {, return, false, ;, }, if, (, that, ., categoryMargin, !=, this, ., categoryMargin, )]
[., upperMargin, !=, this, ., upperMargin, ), {, return, false, ;, }, if, (, that, ., categoryMargin, !=, this, .]
[), {, return, false, ;, }, if, (, that, ., categoryMargin, !=, this, ., categoryMargin, ), {, return, false, ;]
[., upperMargin, ), {, return, false, ;, }, if, (, that, ., categoryMargin, !=, this, ., categoryMargin, ), {, return]
[;, }, if, (, that, ., categoryMargin, !=, this, ., categoryMargin, ), {, return, false, ;, }, if, (, that]
[), {, return, false, ;, }, if, (, that, ., maximumCategoryLabelWidthRatio, !=, this, ., maximumCategoryLabelWidthRatio, ), {, return, false, ;]
[!=, this, ., categoryMargin, ), {, return, false, ;, }, if, (, that, ., maximumCategoryLabelWidthRatio, !=, this, ., maximumCategoryLabelWidthRatio, )]
[., categoryMargin, !=, this, ., categoryMargin, ), {, return, false, ;, }, if, (, that, ., maximumCategoryLabelWidthRatio, !=, this, .]
[), {, return, false, ;, }, if, (, that, ., maximumCategoryLabelWidthRatio, !=, this, ., maximumCategoryLabelWidthRatio, ), {, return, false, ;]
[., categoryMargin, ), {, return, false, ;, }, if, (, that, ., maximumCategoryLabelWidthRatio, !=, this, ., maximumCategoryLabelWidthRatio, ), {, return]
[;, }, if, (, that, ., maximumCategoryLabelWidthRatio, !=, this, ., maximumCategoryLabelWidthRatio, ), {, return, false, ;, }, if, (, that]
[), {, return, false, ;, }, if, (, that, ., categoryLabelPositionOffset, !=, this, ., categoryLabelPositionOffset, ), {, return, false, ;]
[!=, this, ., maximumCategoryLabelWidthRatio, ), {, return, false, ;, }, if, (, that, ., categoryLabelPositionOffset, !=, this, ., categoryLabelPositionOffset, )]
[., maximumCategoryLabelWidthRatio, !=, this, ., maximumCategoryLabelWidthRatio, ), {, return, false, ;, }, if, (, that, ., categoryLabelPositionOffset, !=, this, .]
[), {, return, false, ;, }, if, (, that, ., categoryLabelPositionOffset, !=, this, ., categoryLabelPositionOffset, ), {, return, false, ;]
[., maximumCategoryLabelWidthRatio, ), {, return, false, ;, }, if, (, that, ., categoryLabelPositionOffset, !=, this, ., categoryLabelPositionOffset, ), {, return]
[;, }, if, (, that, ., categoryLabelPositionOffset, !=, this, ., categoryLabelPositionOffset, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelPositions, ,, this, ., categoryLabelPositions]
[!=, this, ., categoryLabelPositionOffset, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelPositions]
[., categoryLabelPositionOffset, !=, this, ., categoryLabelPositionOffset, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelPositions, ,, this, ., categoryLabelPositions]
[., categoryLabelPositionOffset, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelPositions, ,, this]
[;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelPositions, ,, this, ., categoryLabelPositions, ), ), {, return]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelToolTips, ,, this, ., categoryLabelToolTips]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelToolTips, ,, this, ., categoryLabelToolTips]
[., equal, (, that, ., categoryLabelPositions, ,, this, ., categoryLabelPositions, ), ), {, return, false, ;, }, if, (, !]
[,, this, ., categoryLabelPositions, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that, .]
[., categoryLabelPositions, ,, this, ., categoryLabelPositions, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelToolTips, ,, this, .]
[., categoryLabelPositions, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelToolTips, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelToolTips, ,, this, ., categoryLabelToolTips, ), ), {, return]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFontMap, ,, that, ., tickLabelFontMap]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFontMap, ,, that, ., tickLabelFontMap]
[., equal, (, that, ., categoryLabelToolTips, ,, this, ., categoryLabelToolTips, ), ), {, return, false, ;, }, if, (, !]
[,, this, ., categoryLabelToolTips, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, .]
[., categoryLabelToolTips, ,, this, ., categoryLabelToolTips, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFontMap, ,, that, .]
[., categoryLabelToolTips, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFontMap, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFontMap, ,, that, ., tickLabelFontMap, ), ), {, return]
[), {, return, false, ;, }, if, (, !, equalPaintMaps, (, this, ., tickLabelPaintMap, ,, that, ., tickLabelPaintMap, ), )]
[), {, return, false, ;, }, if, (, !, equalPaintMaps, (, this, ., tickLabelPaintMap, ,, that, ., tickLabelPaintMap, ), )]
[., equal, (, this, ., tickLabelFontMap, ,, that, ., tickLabelFontMap, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., tickLabelFontMap, ), ), {, return, false, ;, }, if, (, !, equalPaintMaps, (, this, ., tickLabelPaintMap, ,]
[., tickLabelFontMap, ,, that, ., tickLabelFontMap, ), ), {, return, false, ;, }, if, (, !, equalPaintMaps, (, this, .]
[), ), {, return, false, ;, }, if, (, !, equalPaintMaps, (, this, ., tickLabelPaintMap, ,, that, ., tickLabelPaintMap, )]
[., tickLabelFontMap, ), ), {, return, false, ;, }, if, (, !, equalPaintMaps, (, this, ., tickLabelPaintMap, ,, that, .]
[;, }, if, (, !, equalPaintMaps, (, this, ., tickLabelPaintMap, ,, that, ., tickLabelPaintMap, ), ), {, return, false, ;]
[), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, if, (, getLabel, (]
[), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, if, (, getLabel, (]
[,, that, ., tickLabelPaintMap, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, )]
[., tickLabelPaintMap, ,, that, ., tickLabelPaintMap, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode]
[), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, if, (, getLabel]
[., tickLabelPaintMap, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, if]
[;, }, return, true, ;, }, public, int, hashCode, (, ), {, if, (, getLabel, (, ), !=, null, )]
[;, }, public, int, hashCode, (, ), {, if, (, getLabel, (, ), !=, null, ), {, return, getLabel, (]
[), {, return, getLabel, (, ), ., hashCode, (, ), ;, }, else, {, return, 0, ;, }, }, private]
[!=, null, ), {, return, getLabel, (, ), ., hashCode, (, ), ;, }, else, {, return, 0, ;, }]
[), {, return, getLabel, (, ), ., hashCode, (, ), ;, }, else, {, return, 0, ;, }, }, private]
[;, }, else, {, return, 0, ;, }, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream]
[., hashCode, (, ), ;, }, else, {, return, 0, ;, }, }, private, void, writeObject, (, ObjectOutputStream, stream, )]
[;, }, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, writePaintMap]
[;, writePaintMap, (, this, ., tickLabelPaintMap, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException]
[., defaultWriteObject, (, ), ;, writePaintMap, (, this, ., tickLabelPaintMap, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject]
[., tickLabelPaintMap, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream]
[), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, )]
[;, this, ., tickLabelPaintMap, =, readPaintMap, (, stream, ), ;, }, private, Map, readPaintMap, (, ObjectInputStream, in, ), throws, IOException]
[., defaultReadObject, (, ), ;, this, ., tickLabelPaintMap, =, readPaintMap, (, stream, ), ;, }, private, Map, readPaintMap, (, ObjectInputStream]
[=, readPaintMap, (, stream, ), ;, }, private, Map, readPaintMap, (, ObjectInputStream, in, ), throws, IOException, ,, ClassNotFoundException, {, boolean]
[., tickLabelPaintMap, =, readPaintMap, (, stream, ), ;, }, private, Map, readPaintMap, (, ObjectInputStream, in, ), throws, IOException, ,, ClassNotFoundException]
[;, }, private, Map, readPaintMap, (, ObjectInputStream, in, ), throws, IOException, ,, ClassNotFoundException, {, boolean, isNull, =, in, ., readBoolean]
[), ;, }, private, Map, readPaintMap, (, ObjectInputStream, in, ), throws, IOException, ,, ClassNotFoundException, {, boolean, isNull, =, in, .]
[;, if, (, isNull, ), {, return, null, ;, }, Map, result, =, new, HashMap, (, ), ;, int, count]
[., readBoolean, (, ), ;, if, (, isNull, ), {, return, null, ;, }, Map, result, =, new, HashMap, (]
[), {, return, null, ;, }, Map, result, =, new, HashMap, (, ), ;, int, count, =, in, ., readInt]
[;, }, Map, result, =, new, HashMap, (, ), ;, int, count, =, in, ., readInt, (, ), ;, for]
[;, int, count, =, in, ., readInt, (, ), ;, for, (, int, i, =, 0, ;, i, <, count]
[;, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, Comparable, category, =, (]
[., readInt, (, ), ;, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {]
[;, i, <, count, ;, i, ++, ), {, Comparable, category, =, (, Comparable, ), in, ., readObject, (, )]
[;, i, ++, ), {, Comparable, category, =, (, Comparable, ), in, ., readObject, (, ), ;, Paint, paint, =]
[<, count, ;, i, ++, ), {, Comparable, category, =, (, Comparable, ), in, ., readObject, (, ), ;, Paint]
[;, i, ++, ), {, Comparable, category, =, (, Comparable, ), in, ., readObject, (, ), ;, Paint, paint, =]
[), {, Comparable, category, =, (, Comparable, ), in, ., readObject, (, ), ;, Paint, paint, =, SerialUtilities, ., readPaint]
[++, ), {, Comparable, category, =, (, Comparable, ), in, ., readObject, (, ), ;, Paint, paint, =, SerialUtilities, .]
[;, Paint, paint, =, SerialUtilities, ., readPaint, (, in, ), ;, result, ., put, (, category, ,, paint, ), ;]
[;, Paint, paint, =, SerialUtilities, ., readPaint, (, in, ), ;, result, ., put, (, category, ,, paint, ), ;]
[., readObject, (, ), ;, Paint, paint, =, SerialUtilities, ., readPaint, (, in, ), ;, result, ., put, (, category]
[;, result, ., put, (, category, ,, paint, ), ;, }, return, result, ;, }, private, void, writePaintMap, (, Map]
[., readPaint, (, in, ), ;, result, ., put, (, category, ,, paint, ), ;, }, return, result, ;, }]
[), ;, result, ., put, (, category, ,, paint, ), ;, }, return, result, ;, }, private, void, writePaintMap, (]
[;, }, return, result, ;, }, private, void, writePaintMap, (, Map, map, ,, ObjectOutputStream, out, ), throws, IOException, {, if]
[., put, (, category, ,, paint, ), ;, }, return, result, ;, }, private, void, writePaintMap, (, Map, map, ,]
[,, paint, ), ;, }, return, result, ;, }, private, void, writePaintMap, (, Map, map, ,, ObjectOutputStream, out, ), throws]
[), ;, }, return, result, ;, }, private, void, writePaintMap, (, Map, map, ,, ObjectOutputStream, out, ), throws, IOException, {]
[;, }, private, void, writePaintMap, (, Map, map, ,, ObjectOutputStream, out, ), throws, IOException, {, if, (, map, ==, null]
[), {, out, ., writeBoolean, (, true, ), ;, }, else, {, out, ., writeBoolean, (, false, ), ;, Set]
[==, null, ), {, out, ., writeBoolean, (, true, ), ;, }, else, {, out, ., writeBoolean, (, false, )]
[), {, out, ., writeBoolean, (, true, ), ;, }, else, {, out, ., writeBoolean, (, false, ), ;, Set]
[;, }, else, {, out, ., writeBoolean, (, false, ), ;, Set, keys, =, map, ., keySet, (, ), ;]
[., writeBoolean, (, true, ), ;, }, else, {, out, ., writeBoolean, (, false, ), ;, Set, keys, =, map]
[), ;, }, else, {, out, ., writeBoolean, (, false, ), ;, Set, keys, =, map, ., keySet, (, )]
[;, Set, keys, =, map, ., keySet, (, ), ;, int, count, =, keys, ., size, (, ), ;, out]
[., writeBoolean, (, false, ), ;, Set, keys, =, map, ., keySet, (, ), ;, int, count, =, keys, .]
[), ;, Set, keys, =, map, ., keySet, (, ), ;, int, count, =, keys, ., size, (, ), ;]
[;, int, count, =, keys, ., size, (, ), ;, out, ., writeInt, (, count, ), ;, Iterator, iterator, =]
[., keySet, (, ), ;, int, count, =, keys, ., size, (, ), ;, out, ., writeInt, (, count, )]
[;, out, ., writeInt, (, count, ), ;, Iterator, iterator, =, keys, ., iterator, (, ), ;, while, (, iterator]
[., size, (, ), ;, out, ., writeInt, (, count, ), ;, Iterator, iterator, =, keys, ., iterator, (, )]
[;, Iterator, iterator, =, keys, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable]
[., writeInt, (, count, ), ;, Iterator, iterator, =, keys, ., iterator, (, ), ;, while, (, iterator, ., hasNext]
[), ;, Iterator, iterator, =, keys, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {]
[;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, out, ., writeObject, (, key, )]
[., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, out, .]
[;, out, ., writeObject, (, key, ), ;, SerialUtilities, ., writePaint, (, (, Paint, ), map, ., get, (, key]
[;, out, ., writeObject, (, key, ), ;, SerialUtilities, ., writePaint, (, (, Paint, ), map, ., get, (, key]
[., next, (, ), ;, out, ., writeObject, (, key, ), ;, SerialUtilities, ., writePaint, (, (, Paint, ), map]
[;, SerialUtilities, ., writePaint, (, (, Paint, ), map, ., get, (, key, ), ,, out, ), ;, }, }]
[., writeObject, (, key, ), ;, SerialUtilities, ., writePaint, (, (, Paint, ), map, ., get, (, key, ), ,]
[), ;, SerialUtilities, ., writePaint, (, (, Paint, ), map, ., get, (, key, ), ,, out, ), ;, }]
[;, }, }, }, private, boolean, equalPaintMaps, (, Map, map1, ,, Map, map2, ), {, if, (, map1, ., size]
[., writePaint, (, (, Paint, ), map, ., get, (, key, ), ,, out, ), ;, }, }, }, private]
[,, out, ), ;, }, }, }, private, boolean, equalPaintMaps, (, Map, map1, ,, Map, map2, ), {, if, (]
[,, out, ), ;, }, }, }, private, boolean, equalPaintMaps, (, Map, map1, ,, Map, map2, ), {, if, (]
[., get, (, key, ), ,, out, ), ;, }, }, }, private, boolean, equalPaintMaps, (, Map, map1, ,, Map]
[), ,, out, ), ;, }, }, }, private, boolean, equalPaintMaps, (, Map, map1, ,, Map, map2, ), {, if]
[), ;, }, }, }, private, boolean, equalPaintMaps, (, Map, map1, ,, Map, map2, ), {, if, (, map1, .]
[), {, return, false, ;, }, Set, entries, =, map1, ., entrySet, (, ), ;, Iterator, iterator, =, entries, .]
[!=, map2, ., size, (, ), ), {, return, false, ;, }, Set, entries, =, map1, ., entrySet, (, )]
[., size, (, ), !=, map2, ., size, (, ), ), {, return, false, ;, }, Set, entries, =, map1]
[), {, return, false, ;, }, Set, entries, =, map1, ., entrySet, (, ), ;, Iterator, iterator, =, entries, .]
[., size, (, ), ), {, return, false, ;, }, Set, entries, =, map1, ., entrySet, (, ), ;, Iterator]
[;, }, Set, entries, =, map1, ., entrySet, (, ), ;, Iterator, iterator, =, entries, ., iterator, (, ), ;]
[;, Iterator, iterator, =, entries, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Map]
[., entrySet, (, ), ;, Iterator, iterator, =, entries, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (]
[;, while, (, iterator, ., hasNext, (, ), ), {, Map, ., Entry, entry, =, (, Map, ., Entry, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Map, ., Entry, entry, =, (]
[), {, Map, ., Entry, entry, =, (, Map, ., Entry, ), iterator, ., next, (, ), ;, Paint, p1]
[., hasNext, (, ), ), {, Map, ., Entry, entry, =, (, Map, ., Entry, ), iterator, ., next, (]
[;, Paint, p1, =, (, Paint, ), entry, ., getValue, (, ), ;, Paint, p2, =, (, Paint, ), map2]
[;, Paint, p1, =, (, Paint, ), entry, ., getValue, (, ), ;, Paint, p2, =, (, Paint, ), map2]
[., next, (, ), ;, Paint, p1, =, (, Paint, ), entry, ., getValue, (, ), ;, Paint, p2, =]
[;, Paint, p2, =, (, Paint, ), map2, ., get, (, entry, ., getKey, (, ), ), ;, if, (]
[;, Paint, p2, =, (, Paint, ), map2, ., get, (, entry, ., getKey, (, ), ), ;, if, (]
[., getValue, (, ), ;, Paint, p2, =, (, Paint, ), map2, ., get, (, entry, ., getKey, (, )]
[;, if, (, !, PaintUtilities, ., equal, (, p1, ,, p2, ), ), {, return, false, ;, }, }, return]
[;, if, (, !, PaintUtilities, ., equal, (, p1, ,, p2, ), ), {, return, false, ;, }, }, return]
[., get, (, entry, ., getKey, (, ), ), ;, if, (, !, PaintUtilities, ., equal, (, p1, ,, p2]
[), ;, if, (, !, PaintUtilities, ., equal, (, p1, ,, p2, ), ), {, return, false, ;, }, }]
[., getKey, (, ), ), ;, if, (, !, PaintUtilities, ., equal, (, p1, ,, p2, ), ), {, return]
[), {, return, false, ;, }, }, return, true, ;, }, }]
[), {, return, false, ;, }, }, return, true, ;, }, }]
[., equal, (, p1, ,, p2, ), ), {, return, false, ;, }, }, return, true, ;, }, }]
[,, p2, ), ), {, return, false, ;, }, }, return, true, ;, }, }]
[), ), {, return, false, ;, }, }, return, true, ;, }, }]
[;, }, }, return, true, ;, }, }]
[;, }, }]
