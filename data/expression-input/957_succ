[=, new, HashMap, <, String, ,, CharSequence, >, (, ), ;, int, _shortest, =, Integer, ., MAX_VALUE, ;, int, _longest]
[;, int, _shortest, =, Integer, ., MAX_VALUE, ;, int, _longest, =, 0, ;, if, (, lookup, !=, null, ), {]
[;, int, _longest, =, 0, ;, if, (, lookup, !=, null, ), {, for, (, final, CharSequence, [, ], seq]
[., MAX_VALUE, ;, int, _longest, =, 0, ;, if, (, lookup, !=, null, ), {, for, (, final, CharSequence, []
[;, if, (, lookup, !=, null, ), {, for, (, final, CharSequence, [, ], seq, :, lookup, ), {, this]
[), {, for, (, final, CharSequence, [, ], seq, :, lookup, ), {, this, ., lookupMap, ., put, (, seq]
[!=, null, ), {, for, (, final, CharSequence, [, ], seq, :, lookup, ), {, this, ., lookupMap, ., put]
[), {, for, (, final, CharSequence, [, ], seq, :, lookup, ), {, this, ., lookupMap, ., put, (, seq]
[), {, this, ., lookupMap, ., put, (, seq, [, 0, ], ., toString, (, ), ,, seq, [, 1]
[;, final, int, sz, =, seq, [, 0, ], ., length, (, ), ;, if, (, sz, <, _shortest, )]
[., put, (, seq, [, 0, ], ., toString, (, ), ,, seq, [, 1, ], ), ;, final, int]
[., lookupMap, ., put, (, seq, [, 0, ], ., toString, (, ), ,, seq, [, 1, ], ), ;]
[,, seq, [, 1, ], ), ;, final, int, sz, =, seq, [, 0, ], ., length, (, ), ;]
[., toString, (, ), ,, seq, [, 1, ], ), ;, final, int, sz, =, seq, [, 0, ], .]
[[, 0, ], ., toString, (, ), ,, seq, [, 1, ], ), ;, final, int, sz, =, seq, []
[], ., toString, (, ), ,, seq, [, 1, ], ), ;, final, int, sz, =, seq, [, 0, ]]
[), ;, final, int, sz, =, seq, [, 0, ], ., length, (, ), ;, if, (, sz, <, _shortest]
[[, 1, ], ), ;, final, int, sz, =, seq, [, 0, ], ., length, (, ), ;, if, (]
[], ), ;, final, int, sz, =, seq, [, 0, ], ., length, (, ), ;, if, (, sz, <]
[;, if, (, sz, <, _shortest, ), {, _shortest, =, sz, ;, }, if, (, sz, >, _longest, ), {]
[., length, (, ), ;, if, (, sz, <, _shortest, ), {, _shortest, =, sz, ;, }, if, (, sz]
[[, 0, ], ., length, (, ), ;, if, (, sz, <, _shortest, ), {, _shortest, =, sz, ;, }]
[], ., length, (, ), ;, if, (, sz, <, _shortest, ), {, _shortest, =, sz, ;, }, if, (]
[), {, _shortest, =, sz, ;, }, if, (, sz, >, _longest, ), {, _longest, =, sz, ;, }, }]
[<, _shortest, ), {, _shortest, =, sz, ;, }, if, (, sz, >, _longest, ), {, _longest, =, sz, ;]
[), {, _shortest, =, sz, ;, }, if, (, sz, >, _longest, ), {, _longest, =, sz, ;, }, }]
[=, sz, ;, }, if, (, sz, >, _longest, ), {, _longest, =, sz, ;, }, }, }, shortest, =]
[;, }, if, (, sz, >, _longest, ), {, _longest, =, sz, ;, }, }, }, shortest, =, _shortest, ;]
[), {, _longest, =, sz, ;, }, }, }, shortest, =, _shortest, ;, longest, =, _longest, ;, }, @, Override]
[>, _longest, ), {, _longest, =, sz, ;, }, }, }, shortest, =, _shortest, ;, longest, =, _longest, ;, }]
[), {, _longest, =, sz, ;, }, }, }, shortest, =, _shortest, ;, longest, =, _longest, ;, }, @, Override]
[=, sz, ;, }, }, }, shortest, =, _shortest, ;, longest, =, _longest, ;, }, @, Override, public, int, translate]
[;, }, }, }, shortest, =, _shortest, ;, longest, =, _longest, ;, }, @, Override, public, int, translate, (, final]
[=, _shortest, ;, longest, =, _longest, ;, }, @, Override, public, int, translate, (, final, CharSequence, input, ,, final, int]
[;, longest, =, _longest, ;, }, @, Override, public, int, translate, (, final, CharSequence, input, ,, final, int, index, ,]
[=, _longest, ;, }, @, Override, public, int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer]
[;, }, @, Override, public, int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, )]
[;, if, (, index, +, longest, >, input, ., length, (, ), ), {, max, =, input, ., length, (]
[), {, max, =, input, ., length, (, ), -, index, ;, }, for, (, int, i, =, max, ;]
[>, input, ., length, (, ), ), {, max, =, input, ., length, (, ), -, index, ;, }, for]
[+, longest, >, input, ., length, (, ), ), {, max, =, input, ., length, (, ), -, index, ;]
[>, input, ., length, (, ), ), {, max, =, input, ., length, (, ), -, index, ;, }, for]
[), {, max, =, input, ., length, (, ), -, index, ;, }, for, (, int, i, =, max, ;]
[., length, (, ), ), {, max, =, input, ., length, (, ), -, index, ;, }, for, (, int]
[=, input, ., length, (, ), -, index, ;, }, for, (, int, i, =, max, ;, i, >=, shortest]
[;, }, for, (, int, i, =, max, ;, i, >=, shortest, ;, i, --, ), {, final, CharSequence, subSeq]
[-, index, ;, }, for, (, int, i, =, max, ;, i, >=, shortest, ;, i, --, ), {, final]
[., length, (, ), -, index, ;, }, for, (, int, i, =, max, ;, i, >=, shortest, ;, i]
[;, }, for, (, int, i, =, max, ;, i, >=, shortest, ;, i, --, ), {, final, CharSequence, subSeq]
[;, i, >=, shortest, ;, i, --, ), {, final, CharSequence, subSeq, =, input, ., subSequence, (, index, ,, index]
[;, i, --, ), {, final, CharSequence, subSeq, =, input, ., subSequence, (, index, ,, index, +, i, ), ;]
[>=, shortest, ;, i, --, ), {, final, CharSequence, subSeq, =, input, ., subSequence, (, index, ,, index, +, i]
[;, i, --, ), {, final, CharSequence, subSeq, =, input, ., subSequence, (, index, ,, index, +, i, ), ;]
[), {, final, CharSequence, subSeq, =, input, ., subSequence, (, index, ,, index, +, i, ), ;, final, CharSequence, result]
[--, ), {, final, CharSequence, subSeq, =, input, ., subSequence, (, index, ,, index, +, i, ), ;, final, CharSequence]
[;, final, CharSequence, result, =, lookupMap, ., get, (, subSeq, ., toString, (, ), ), ;, if, (, result, !=]
[., subSequence, (, index, ,, index, +, i, ), ;, final, CharSequence, result, =, lookupMap, ., get, (, subSeq, .]
[,, index, +, i, ), ;, final, CharSequence, result, =, lookupMap, ., get, (, subSeq, ., toString, (, ), )]
[), ;, final, CharSequence, result, =, lookupMap, ., get, (, subSeq, ., toString, (, ), ), ;, if, (, result]
[+, i, ), ;, final, CharSequence, result, =, lookupMap, ., get, (, subSeq, ., toString, (, ), ), ;, if]
[), ;, final, CharSequence, result, =, lookupMap, ., get, (, subSeq, ., toString, (, ), ), ;, if, (, result]
[;, if, (, result, !=, null, ), {, out, ., write, (, result, ., toString, (, ), ), ;, return]
[., get, (, subSeq, ., toString, (, ), ), ;, if, (, result, !=, null, ), {, out, ., write]
[), ;, if, (, result, !=, null, ), {, out, ., write, (, result, ., toString, (, ), ), ;]
[., toString, (, ), ), ;, if, (, result, !=, null, ), {, out, ., write, (, result, ., toString]
[), {, out, ., write, (, result, ., toString, (, ), ), ;, return, i, ;, }, }, return, 0]
[!=, null, ), {, out, ., write, (, result, ., toString, (, ), ), ;, return, i, ;, }, }]
[), {, out, ., write, (, result, ., toString, (, ), ), ;, return, i, ;, }, }, return, 0]
[;, return, i, ;, }, }, return, 0, ;, }, }]
[., write, (, result, ., toString, (, ), ), ;, return, i, ;, }, }, return, 0, ;, }, }]
[), ;, return, i, ;, }, }, return, 0, ;, }, }]
[., toString, (, ), ), ;, return, i, ;, }, }, return, 0, ;, }, }]
[;, }, }, return, 0, ;, }, }]
[;, }, }]
