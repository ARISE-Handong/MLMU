[commons, ., math3, ., util, ., FastMath, ;, public, class, EarthMoversDistance, implements, DistanceMeasure, {, private, static, final, long, serialVersionUID, =]
[., math3, ., util, ., FastMath, ;, public, class, EarthMoversDistance, implements, DistanceMeasure, {, private, static, final, long, serialVersionUID, =, -]
[5406732779747414922L, ;, public, double, compute, (, double, [, ], a, ,, double, [, ], b, ), {, double, lastDistance, =]
[(, double, [, ], a, ,, double, [, ], b, ), {, double, lastDistance, =, 0, ;, double, totalDistance, =]
[[, ], b, ), {, double, lastDistance, =, 0, ;, double, totalDistance, =, 0, ;, for, (, int, i, =]
[b, ), {, double, lastDistance, =, 0, ;, double, totalDistance, =, 0, ;, for, (, int, i, =, 0, ;]
[b, ), {, double, lastDistance, =, 0, ;, double, totalDistance, =, 0, ;, for, (, int, i, =, 0, ;]
[{, double, lastDistance, =, 0, ;, double, totalDistance, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[{, double, lastDistance, =, 0, ;, double, totalDistance, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[0, ;, double, totalDistance, =, 0, ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;]
[0, ;, double, totalDistance, =, 0, ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;]
[(, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, final, double, currentDistance, =]
[(, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, final, double, currentDistance, =]
[int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, final, double, currentDistance, =, (]
[int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, final, double, currentDistance, =, (]
[int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, final, double, currentDistance, =, (]
[=, 0, ;, i, <, a, ., length, ;, i, ++, ), {, final, double, currentDistance, =, (, a, []
[i, <, a, ., length, ;, i, ++, ), {, final, double, currentDistance, =, (, a, [, i, ], +]
[., length, ;, i, ++, ), {, final, double, currentDistance, =, (, a, [, i, ], +, lastDistance, ), -]
[., length, ;, i, ++, ), {, final, double, currentDistance, =, (, a, [, i, ], +, lastDistance, ), -]
[;, i, ++, ), {, final, double, currentDistance, =, (, a, [, i, ], +, lastDistance, ), -, b, []
[), {, final, double, currentDistance, =, (, a, [, i, ], +, lastDistance, ), -, b, [, i, ], ;]
[final, double, currentDistance, =, (, a, [, i, ], +, lastDistance, ), -, b, [, i, ], ;, totalDistance, +=]
[final, double, currentDistance, =, (, a, [, i, ], +, lastDistance, ), -, b, [, i, ], ;, totalDistance, +=]
[(, a, [, i, ], +, lastDistance, ), -, b, [, i, ], ;, totalDistance, +=, FastMath, ., abs, (]
[i, ], +, lastDistance, ), -, b, [, i, ], ;, totalDistance, +=, FastMath, ., abs, (, currentDistance, ), ;]
[+, lastDistance, ), -, b, [, i, ], ;, totalDistance, +=, FastMath, ., abs, (, currentDistance, ), ;, lastDistance, =]
[b, [, i, ], ;, totalDistance, +=, FastMath, ., abs, (, currentDistance, ), ;, lastDistance, =, currentDistance, ;, }, return]
