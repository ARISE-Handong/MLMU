[chart, ., util, ., SerialUtilities, ;, public, class, BlockBorder, implements, BlockFrame, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[BlockBorder, implements, BlockFrame, ,, Serializable, {, private, static, final, long, serialVersionUID, =, 4961579220410228283L, ;, public, static, final, BlockBorder, NONE, =]
[,, Serializable, {, private, static, final, long, serialVersionUID, =, 4961579220410228283L, ;, public, static, final, BlockBorder, NONE, =, new, BlockBorder, (]
[,, Serializable, {, private, static, final, long, serialVersionUID, =, 4961579220410228283L, ;, public, static, final, BlockBorder, NONE, =, new, BlockBorder, (]
[static, final, long, serialVersionUID, =, 4961579220410228283L, ;, public, static, final, BlockBorder, NONE, =, new, BlockBorder, (, RectangleInsets, ., ZERO_INSETS, ,]
[static, final, long, serialVersionUID, =, 4961579220410228283L, ;, public, static, final, BlockBorder, NONE, =, new, BlockBorder, (, RectangleInsets, ., ZERO_INSETS, ,]
[., white, ), ;, private, RectangleInsets, insets, ;, private, transient, Paint, paint, ;, public, BlockBorder, (, ), {, this, (]
[., white, ), ;, private, RectangleInsets, insets, ;, private, transient, Paint, paint, ;, public, BlockBorder, (, ), {, this, (]
[(, ), {, this, (, Color, ., black, ), ;, }, public, BlockBorder, (, Paint, paint, ), {, this, (]
[this, (, Color, ., black, ), ;, }, public, BlockBorder, (, Paint, paint, ), {, this, (, new, RectangleInsets, (]
[Color, ., black, ), ;, }, public, BlockBorder, (, Paint, paint, ), {, this, (, new, RectangleInsets, (, 1, ,]
[black, ), ;, }, public, BlockBorder, (, Paint, paint, ), {, this, (, new, RectangleInsets, (, 1, ,, 1, ,]
[;, }, public, BlockBorder, (, Paint, paint, ), {, this, (, new, RectangleInsets, (, 1, ,, 1, ,, 1, ,]
[BlockBorder, (, Paint, paint, ), {, this, (, new, RectangleInsets, (, 1, ,, 1, ,, 1, ,, 1, ), ,]
[;, }, public, BlockBorder, (, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, this, (]
[BlockBorder, (, double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, this, (, new, RectangleInsets, (]
[double, top, ,, double, left, ,, double, bottom, ,, double, right, ), {, this, (, new, RectangleInsets, (, top, ,]
[,, double, left, ,, double, bottom, ,, double, right, ), {, this, (, new, RectangleInsets, (, top, ,, left, ,]
[left, ,, double, bottom, ,, double, right, ), {, this, (, new, RectangleInsets, (, top, ,, left, ,, bottom, ,]
[bottom, ,, double, right, ), {, this, (, new, RectangleInsets, (, top, ,, left, ,, bottom, ,, right, ), ,]
[bottom, ,, double, right, ), {, this, (, new, RectangleInsets, (, top, ,, left, ,, bottom, ,, right, ), ,]
[BlockBorder, (, double, top, ,, double, left, ,, double, bottom, ,, double, right, ,, Paint, paint, ), {, this, (]
[top, ,, double, left, ,, double, bottom, ,, double, right, ,, Paint, paint, ), {, this, (, new, RectangleInsets, (]
[double, left, ,, double, bottom, ,, double, right, ,, Paint, paint, ), {, this, (, new, RectangleInsets, (, top, ,]
[,, double, bottom, ,, double, right, ,, Paint, paint, ), {, this, (, new, RectangleInsets, (, top, ,, left, ,]
[bottom, ,, double, right, ,, Paint, paint, ), {, this, (, new, RectangleInsets, (, top, ,, left, ,, bottom, ,]
[right, ,, Paint, paint, ), {, this, (, new, RectangleInsets, (, top, ,, left, ,, bottom, ,, right, ), ,]
[,, right, ), ,, paint, ), ;, }, public, BlockBorder, (, RectangleInsets, insets, ,, Paint, paint, ), {, if, (]
[,, right, ), ,, paint, ), ;, }, public, BlockBorder, (, RectangleInsets, insets, ,, Paint, paint, ), {, if, (]
[), ,, paint, ), ;, }, public, BlockBorder, (, RectangleInsets, insets, ,, Paint, paint, ), {, if, (, insets, ==]
[;, }, public, BlockBorder, (, RectangleInsets, insets, ,, Paint, paint, ), {, if, (, insets, ==, null, ), {, throw]
[BlockBorder, (, RectangleInsets, insets, ,, Paint, paint, ), {, if, (, insets, ==, null, ), {, throw, new, IllegalArgumentException, (]
[paint, ), {, if, (, insets, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'insets' argument.", ), ;, }, if, (]
[paint, ), {, if, (, insets, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'insets' argument.", ), ;, }, if, (]
[{, if, (, insets, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'insets' argument.", ), ;, }, if, (, paint, ==]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'insets' argument.", ), ;, }, if, (, paint, ==, null, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'insets' argument.", ), ;, }, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, "Null 'insets' argument.", ), ;, }, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[(, "Null 'insets' argument.", ), ;, }, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[}, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., insets, =]
[(, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., insets, =, insets, ;]
[(, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., insets, =, insets, ;]
[), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., insets, =, insets, ;, this, ., paint, =]
[this, ., insets, =, insets, ;, this, ., paint, =, paint, ;, }, public, RectangleInsets, getInsets, (, ), {, return]
[this, ., insets, =, insets, ;, this, ., paint, =, paint, ;, }, public, RectangleInsets, getInsets, (, ), {, return]
[}, public, RectangleInsets, getInsets, (, ), {, return, this, ., insets, ;, }, public, Paint, getPaint, (, ), {, return]
[}, public, RectangleInsets, getInsets, (, ), {, return, this, ., insets, ;, }, public, Paint, getPaint, (, ), {, return]
[return, this, ., paint, ;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, double, t, =]
[return, this, ., paint, ;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, double, t, =]
[return, this, ., paint, ;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, double, t, =]
[public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, double, t, =, this, ., insets, ., calculateTopInset, (]
[public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, double, t, =, this, ., insets, ., calculateTopInset, (]
[{, double, t, =, this, ., insets, ., calculateTopInset, (, area, ., getHeight, (, ), ), ;, double, b, =]
[{, double, t, =, this, ., insets, ., calculateTopInset, (, area, ., getHeight, (, ), ), ;, double, b, =]
[{, double, t, =, this, ., insets, ., calculateTopInset, (, area, ., getHeight, (, ), ), ;, double, b, =]
[insets, ., calculateTopInset, (, area, ., getHeight, (, ), ), ;, double, b, =, this, ., insets, ., calculateBottomInset, (]
[insets, ., calculateTopInset, (, area, ., getHeight, (, ), ), ;, double, b, =, this, ., insets, ., calculateBottomInset, (]
[;, double, b, =, this, ., insets, ., calculateBottomInset, (, area, ., getHeight, (, ), ), ;, double, l, =]
[;, double, b, =, this, ., insets, ., calculateBottomInset, (, area, ., getHeight, (, ), ), ;, double, l, =]
[;, double, b, =, this, ., insets, ., calculateBottomInset, (, area, ., getHeight, (, ), ), ;, double, l, =]
[insets, ., calculateBottomInset, (, area, ., getHeight, (, ), ), ;, double, l, =, this, ., insets, ., calculateLeftInset, (]
[insets, ., calculateBottomInset, (, area, ., getHeight, (, ), ), ;, double, l, =, this, ., insets, ., calculateLeftInset, (]
[;, double, l, =, this, ., insets, ., calculateLeftInset, (, area, ., getWidth, (, ), ), ;, double, r, =]
[;, double, l, =, this, ., insets, ., calculateLeftInset, (, area, ., getWidth, (, ), ), ;, double, r, =]
[;, double, l, =, this, ., insets, ., calculateLeftInset, (, area, ., getWidth, (, ), ), ;, double, r, =]
[insets, ., calculateLeftInset, (, area, ., getWidth, (, ), ), ;, double, r, =, this, ., insets, ., calculateRightInset, (]
[insets, ., calculateLeftInset, (, area, ., getWidth, (, ), ), ;, double, r, =, this, ., insets, ., calculateRightInset, (]
[;, double, r, =, this, ., insets, ., calculateRightInset, (, area, ., getWidth, (, ), ), ;, double, x, =]
[;, double, r, =, this, ., insets, ., calculateRightInset, (, area, ., getWidth, (, ), ), ;, double, x, =]
[(, area, ., getWidth, (, ), ), ;, double, x, =, area, ., getX, (, ), ;, double, y, =]
[(, area, ., getWidth, (, ), ), ;, double, x, =, area, ., getX, (, ), ;, double, y, =]
[x, =, area, ., getX, (, ), ;, double, y, =, area, ., getY, (, ), ;, double, w, =]
[x, =, area, ., getX, (, ), ;, double, y, =, area, ., getY, (, ), ;, double, w, =]
[y, =, area, ., getY, (, ), ;, double, w, =, area, ., getWidth, (, ), ;, double, h, =]
[y, =, area, ., getY, (, ), ;, double, w, =, area, ., getWidth, (, ), ;, double, h, =]
[), ;, double, w, =, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;]
[), ;, double, w, =, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;]
[=, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, g2, ., setPaint, (]
[=, area, ., getWidth, (, ), ;, double, h, =, area, ., getHeight, (, ), ;, g2, ., setPaint, (]
[h, =, area, ., getHeight, (, ), ;, g2, ., setPaint, (, this, ., paint, ), ;, Rectangle2D, rect, =]
[., setPaint, (, this, ., paint, ), ;, Rectangle2D, rect, =, new, Rectangle2D, ., Double, (, ), ;, if, (]
[., setPaint, (, this, ., paint, ), ;, Rectangle2D, rect, =, new, Rectangle2D, ., Double, (, ), ;, if, (]
[(, this, ., paint, ), ;, Rectangle2D, rect, =, new, Rectangle2D, ., Double, (, ), ;, if, (, t, >]
[paint, ), ;, Rectangle2D, rect, =, new, Rectangle2D, ., Double, (, ), ;, if, (, t, >, 0.0, ), {]
[paint, ), ;, Rectangle2D, rect, =, new, Rectangle2D, ., Double, (, ), ;, if, (, t, >, 0.0, ), {]
[rect, =, new, Rectangle2D, ., Double, (, ), ;, if, (, t, >, 0.0, ), {, rect, ., setRect, (]
[new, Rectangle2D, ., Double, (, ), ;, if, (, t, >, 0.0, ), {, rect, ., setRect, (, x, ,]
[., Double, (, ), ;, if, (, t, >, 0.0, ), {, rect, ., setRect, (, x, ,, y, ,]
[(, ), ;, if, (, t, >, 0.0, ), {, rect, ., setRect, (, x, ,, y, ,, w, ,]
[if, (, t, >, 0.0, ), {, rect, ., setRect, (, x, ,, y, ,, w, ,, t, ), ;]
[if, (, t, >, 0.0, ), {, rect, ., setRect, (, x, ,, y, ,, w, ,, t, ), ;]
[0.0, ), {, rect, ., setRect, (, x, ,, y, ,, w, ,, t, ), ;, g2, ., fill, (]
[(, x, ,, y, ,, w, ,, t, ), ;, g2, ., fill, (, rect, ), ;, }, if, (]
[(, x, ,, y, ,, w, ,, t, ), ;, g2, ., fill, (, rect, ), ;, }, if, (]
[,, y, ,, w, ,, t, ), ;, g2, ., fill, (, rect, ), ;, }, if, (, b, >]
[w, ,, t, ), ;, g2, ., fill, (, rect, ), ;, }, if, (, b, >, 0.0, ), {]
[w, ,, t, ), ;, g2, ., fill, (, rect, ), ;, }, if, (, b, >, 0.0, ), {]
[;, g2, ., fill, (, rect, ), ;, }, if, (, b, >, 0.0, ), {, rect, ., setRect, (]
[., fill, (, rect, ), ;, }, if, (, b, >, 0.0, ), {, rect, ., setRect, (, x, ,]
[., fill, (, rect, ), ;, }, if, (, b, >, 0.0, ), {, rect, ., setRect, (, x, ,]
[., fill, (, rect, ), ;, }, if, (, b, >, 0.0, ), {, rect, ., setRect, (, x, ,]
[(, rect, ), ;, }, if, (, b, >, 0.0, ), {, rect, ., setRect, (, x, ,, y, +]
[), ;, }, if, (, b, >, 0.0, ), {, rect, ., setRect, (, x, ,, y, +, h, -]
[}, if, (, b, >, 0.0, ), {, rect, ., setRect, (, x, ,, y, +, h, -, b, ,]
[(, b, >, 0.0, ), {, rect, ., setRect, (, x, ,, y, +, h, -, b, ,, w, ,]
[0.0, ), {, rect, ., setRect, (, x, ,, y, +, h, -, b, ,, w, ,, b, ), ;]
[0.0, ), {, rect, ., setRect, (, x, ,, y, +, h, -, b, ,, w, ,, b, ), ;]
[., setRect, (, x, ,, y, +, h, -, b, ,, w, ,, b, ), ;, g2, ., fill, (]
[+, h, -, b, ,, w, ,, b, ), ;, g2, ., fill, (, rect, ), ;, }, if, (]
[+, h, -, b, ,, w, ,, b, ), ;, g2, ., fill, (, rect, ), ;, }, if, (]
[-, b, ,, w, ,, b, ), ;, g2, ., fill, (, rect, ), ;, }, if, (, l, >]
[w, ,, b, ), ;, g2, ., fill, (, rect, ), ;, }, if, (, l, >, 0.0, ), {]
[w, ,, b, ), ;, g2, ., fill, (, rect, ), ;, }, if, (, l, >, 0.0, ), {]
[;, g2, ., fill, (, rect, ), ;, }, if, (, l, >, 0.0, ), {, rect, ., setRect, (]
[., fill, (, rect, ), ;, }, if, (, l, >, 0.0, ), {, rect, ., setRect, (, x, ,]
[(, rect, ), ;, }, if, (, l, >, 0.0, ), {, rect, ., setRect, (, x, ,, y, ,]
[), ;, }, if, (, l, >, 0.0, ), {, rect, ., setRect, (, x, ,, y, ,, l, ,]
[if, (, l, >, 0.0, ), {, rect, ., setRect, (, x, ,, y, ,, l, ,, h, ), ;]
[if, (, l, >, 0.0, ), {, rect, ., setRect, (, x, ,, y, ,, l, ,, h, ), ;]
[0.0, ), {, rect, ., setRect, (, x, ,, y, ,, l, ,, h, ), ;, g2, ., fill, (]
[(, x, ,, y, ,, l, ,, h, ), ;, g2, ., fill, (, rect, ), ;, }, if, (]
[(, x, ,, y, ,, l, ,, h, ), ;, g2, ., fill, (, rect, ), ;, }, if, (]
[,, y, ,, l, ,, h, ), ;, g2, ., fill, (, rect, ), ;, }, if, (, r, >]
[l, ,, h, ), ;, g2, ., fill, (, rect, ), ;, }, if, (, r, >, 0.0, ), {]
[l, ,, h, ), ;, g2, ., fill, (, rect, ), ;, }, if, (, r, >, 0.0, ), {]
[;, g2, ., fill, (, rect, ), ;, }, if, (, r, >, 0.0, ), {, rect, ., setRect, (]
[;, g2, ., fill, (, rect, ), ;, }, if, (, r, >, 0.0, ), {, rect, ., setRect, (]
[;, g2, ., fill, (, rect, ), ;, }, if, (, r, >, 0.0, ), {, rect, ., setRect, (]
[., fill, (, rect, ), ;, }, if, (, r, >, 0.0, ), {, rect, ., setRect, (, x, +]
[(, rect, ), ;, }, if, (, r, >, 0.0, ), {, rect, ., setRect, (, x, +, w, -]
[), ;, }, if, (, r, >, 0.0, ), {, rect, ., setRect, (, x, +, w, -, r, ,]
[}, if, (, r, >, 0.0, ), {, rect, ., setRect, (, x, +, w, -, r, ,, y, ,]
[(, r, >, 0.0, ), {, rect, ., setRect, (, x, +, w, -, r, ,, y, ,, r, ,]
[0.0, ), {, rect, ., setRect, (, x, +, w, -, r, ,, y, ,, r, ,, h, ), ;]
[0.0, ), {, rect, ., setRect, (, x, +, w, -, r, ,, y, ,, r, ,, h, ), ;]
[., setRect, (, x, +, w, -, r, ,, y, ,, r, ,, h, ), ;, g2, ., fill, (]
[;, g2, ., fill, (, rect, ), ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[;, g2, ., fill, (, rect, ), ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[., fill, (, rect, ), ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[), ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, BlockBorder, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, BlockBorder, ), ), {, return, false, ;, }, BlockBorder, that, =]
[if, (, !, (, obj, instanceof, BlockBorder, ), ), {, return, false, ;, }, BlockBorder, that, =, (, BlockBorder, )]
[obj, instanceof, BlockBorder, ), ), {, return, false, ;, }, BlockBorder, that, =, (, BlockBorder, ), obj, ;, if, (]
[instanceof, BlockBorder, ), ), {, return, false, ;, }, BlockBorder, that, =, (, BlockBorder, ), obj, ;, if, (, !]
[instanceof, BlockBorder, ), ), {, return, false, ;, }, BlockBorder, that, =, (, BlockBorder, ), obj, ;, if, (, !]
[instanceof, BlockBorder, ), ), {, return, false, ;, }, BlockBorder, that, =, (, BlockBorder, ), obj, ;, if, (, !]
[false, ;, }, BlockBorder, that, =, (, BlockBorder, ), obj, ;, if, (, !, this, ., insets, ., equals, (]
[false, ;, }, BlockBorder, that, =, (, BlockBorder, ), obj, ;, if, (, !, this, ., insets, ., equals, (]
[BlockBorder, ), obj, ;, if, (, !, this, ., insets, ., equals, (, that, ., insets, ), ), {, return]
[(, !, this, ., insets, ., equals, (, that, ., insets, ), ), {, return, false, ;, }, if, (]
[!, this, ., insets, ., equals, (, that, ., insets, ), ), {, return, false, ;, }, if, (, !]
[!, this, ., insets, ., equals, (, that, ., insets, ), ), {, return, false, ;, }, if, (, !]
[., equals, (, that, ., insets, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., equals, (, that, ., insets, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., insets, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., paint, ,]
[., insets, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., paint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., paint, ,, that, ., paint, ), ), {, return]
[!, PaintUtilities, ., equal, (, this, ., paint, ,, that, ., paint, ), ), {, return, false, ;, }, return]
[), {, return, false, ;, }, return, true, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[), {, return, false, ;, }, return, true, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[return, true, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[return, true, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (]
[ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., paint, ,]
[this, ., paint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[this, ., paint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., paint, =]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., paint, =]
[), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., paint, =, SerialUtilities, ., readPaint, (]
