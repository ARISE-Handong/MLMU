[Map, ;, public, class, CodingConventions, {, private, CodingConventions, (, ), {, }, public, static, CodingConvention, getDefault, (, ), {, return]
[}, public, static, class, Proxy, implements, CodingConvention, {, protected, final, CodingConvention, nextConvention, ;, protected, Proxy, (, CodingConvention, convention, ), {]
[}, public, static, class, Proxy, implements, CodingConvention, {, protected, final, CodingConvention, nextConvention, ;, protected, Proxy, (, CodingConvention, convention, ), {]
[Proxy, implements, CodingConvention, {, protected, final, CodingConvention, nextConvention, ;, protected, Proxy, (, CodingConvention, convention, ), {, this, ., nextConvention, =]
[), {, this, ., nextConvention, =, convention, ;, }, @, Override, public, boolean, isConstant, (, String, variableName, ), {, return]
[), {, this, ., nextConvention, =, convention, ;, }, @, Override, public, boolean, isConstant, (, String, variableName, ), {, return]
[nextConvention, =, convention, ;, }, @, Override, public, boolean, isConstant, (, String, variableName, ), {, return, nextConvention, ., isConstant, (]
[return, nextConvention, ., isConstant, (, variableName, ), ;, }, @, Override, public, boolean, isConstantKey, (, String, keyName, ), {, return]
[return, nextConvention, ., isConstant, (, variableName, ), ;, }, @, Override, public, boolean, isConstantKey, (, String, keyName, ), {, return]
[(, variableName, ), ;, }, @, Override, public, boolean, isConstantKey, (, String, keyName, ), {, return, nextConvention, ., isConstantKey, (]
[return, nextConvention, ., isConstantKey, (, keyName, ), ;, }, @, Override, public, boolean, isValidEnumKey, (, String, key, ), {, return]
[return, nextConvention, ., isConstantKey, (, keyName, ), ;, }, @, Override, public, boolean, isValidEnumKey, (, String, key, ), {, return]
[(, keyName, ), ;, }, @, Override, public, boolean, isValidEnumKey, (, String, key, ), {, return, nextConvention, ., isValidEnumKey, (]
[return, nextConvention, ., isValidEnumKey, (, key, ), ;, }, @, Override, public, boolean, isOptionalParameter, (, Node, parameter, ), {, return]
[return, nextConvention, ., isValidEnumKey, (, key, ), ;, }, @, Override, public, boolean, isOptionalParameter, (, Node, parameter, ), {, return]
[(, key, ), ;, }, @, Override, public, boolean, isOptionalParameter, (, Node, parameter, ), {, return, nextConvention, ., isOptionalParameter, (]
[return, nextConvention, ., isOptionalParameter, (, parameter, ), ;, }, @, Override, public, boolean, isVarArgsParameter, (, Node, parameter, ), {, return]
[return, nextConvention, ., isOptionalParameter, (, parameter, ), ;, }, @, Override, public, boolean, isVarArgsParameter, (, Node, parameter, ), {, return]
[(, parameter, ), ;, }, @, Override, public, boolean, isVarArgsParameter, (, Node, parameter, ), {, return, nextConvention, ., isVarArgsParameter, (]
[isVarArgsParameter, (, parameter, ), ;, }, @, Override, public, boolean, isExported, (, String, name, ,, boolean, local, ), {, return]
[isVarArgsParameter, (, parameter, ), ;, }, @, Override, public, boolean, isExported, (, String, name, ,, boolean, local, ), {, return]
[;, }, @, Override, public, boolean, isExported, (, String, name, ,, boolean, local, ), {, return, nextConvention, ., isExported, (]
[@, Override, public, boolean, isExported, (, String, name, ,, boolean, local, ), {, return, nextConvention, ., isExported, (, name, ,]
[isExported, (, name, ,, local, ), ;, }, @, Override, public, final, boolean, isExported, (, String, name, ), {, return]
[isExported, (, name, ,, local, ), ;, }, @, Override, public, final, boolean, isExported, (, String, name, ), {, return]
[name, ,, local, ), ;, }, @, Override, public, final, boolean, isExported, (, String, name, ), {, return, isExported, (]
[local, ), ;, }, @, Override, public, final, boolean, isExported, (, String, name, ), {, return, isExported, (, name, ,]
[}, @, Override, public, final, boolean, isExported, (, String, name, ), {, return, isExported, (, name, ,, false, ), ||]
[Override, public, final, boolean, isExported, (, String, name, ), {, return, isExported, (, name, ,, false, ), ||, isExported, (]
[final, boolean, isExported, (, String, name, ), {, return, isExported, (, name, ,, false, ), ||, isExported, (, name, ,]
[||, isExported, (, name, ,, true, ), ;, }, @, Override, public, boolean, isPrivate, (, String, name, ), {, return]
[||, isExported, (, name, ,, true, ), ;, }, @, Override, public, boolean, isPrivate, (, String, name, ), {, return]
[,, true, ), ;, }, @, Override, public, boolean, isPrivate, (, String, name, ), {, return, nextConvention, ., isPrivate, (]
[return, nextConvention, ., isPrivate, (, name, ), ;, }, @, Override, public, SubclassRelationship, getClassesDefinedByCall, (, Node, callNode, ), {, return]
[return, nextConvention, ., isPrivate, (, name, ), ;, }, @, Override, public, SubclassRelationship, getClassesDefinedByCall, (, Node, callNode, ), {, return]
[(, name, ), ;, }, @, Override, public, SubclassRelationship, getClassesDefinedByCall, (, Node, callNode, ), {, return, nextConvention, ., getClassesDefinedByCall, (]
[return, nextConvention, ., getClassesDefinedByCall, (, callNode, ), ;, }, @, Override, public, boolean, isSuperClassReference, (, String, propertyName, ), {, return]
[return, nextConvention, ., getClassesDefinedByCall, (, callNode, ), ;, }, @, Override, public, boolean, isSuperClassReference, (, String, propertyName, ), {, return]
[(, callNode, ), ;, }, @, Override, public, boolean, isSuperClassReference, (, String, propertyName, ), {, return, nextConvention, ., isSuperClassReference, (]
[isSuperClassReference, (, propertyName, ), ;, }, @, Override, public, String, extractClassNameIfProvide, (, Node, node, ,, Node, parent, ), {, return]
[isSuperClassReference, (, propertyName, ), ;, }, @, Override, public, String, extractClassNameIfProvide, (, Node, node, ,, Node, parent, ), {, return]
[;, }, @, Override, public, String, extractClassNameIfProvide, (, Node, node, ,, Node, parent, ), {, return, nextConvention, ., extractClassNameIfProvide, (]
[@, Override, public, String, extractClassNameIfProvide, (, Node, node, ,, Node, parent, ), {, return, nextConvention, ., extractClassNameIfProvide, (, node, ,]
[node, ,, parent, ), ;, }, @, Override, public, String, extractClassNameIfRequire, (, Node, node, ,, Node, parent, ), {, return]
[node, ,, parent, ), ;, }, @, Override, public, String, extractClassNameIfRequire, (, Node, node, ,, Node, parent, ), {, return]
[;, }, @, Override, public, String, extractClassNameIfRequire, (, Node, node, ,, Node, parent, ), {, return, nextConvention, ., extractClassNameIfRequire, (]
[@, Override, public, String, extractClassNameIfRequire, (, Node, node, ,, Node, parent, ), {, return, nextConvention, ., extractClassNameIfRequire, (, node, ,]
[return, nextConvention, ., extractClassNameIfRequire, (, node, ,, parent, ), ;, }, @, Override, public, String, getExportPropertyFunction, (, ), {, return]
[return, nextConvention, ., extractClassNameIfRequire, (, node, ,, parent, ), ;, }, @, Override, public, String, getExportPropertyFunction, (, ), {, return]
[(, ), {, return, nextConvention, ., getExportPropertyFunction, (, ), ;, }, @, Override, public, String, getExportSymbolFunction, (, ), {, return]
[(, ), {, return, nextConvention, ., getExportPropertyFunction, (, ), ;, }, @, Override, public, String, getExportSymbolFunction, (, ), {, return]
[., getExportSymbolFunction, (, ), ;, }, @, Override, public, List, <, String, >, identifyTypeDeclarationCall, (, Node, n, ), {, return]
[., getExportSymbolFunction, (, ), ;, }, @, Override, public, List, <, String, >, identifyTypeDeclarationCall, (, Node, n, ), {, return]
[;, }, @, Override, public, List, <, String, >, identifyTypeDeclarationCall, (, Node, n, ), {, return, nextConvention, ., identifyTypeDeclarationCall, (]
[n, ), ;, }, @, Override, public, void, applySubclassRelationship, (, FunctionType, parentCtor, ,, FunctionType, childCtor, ,, SubclassType, type, ), {]
[n, ), ;, }, @, Override, public, void, applySubclassRelationship, (, FunctionType, parentCtor, ,, FunctionType, childCtor, ,, SubclassType, type, ), {]
[@, Override, public, void, applySubclassRelationship, (, FunctionType, parentCtor, ,, FunctionType, childCtor, ,, SubclassType, type, ), {, nextConvention, ., applySubclassRelationship, (]
[public, void, applySubclassRelationship, (, FunctionType, parentCtor, ,, FunctionType, childCtor, ,, SubclassType, type, ), {, nextConvention, ., applySubclassRelationship, (, parentCtor, ,]
[applySubclassRelationship, (, FunctionType, parentCtor, ,, FunctionType, childCtor, ,, SubclassType, type, ), {, nextConvention, ., applySubclassRelationship, (, parentCtor, ,, childCtor, ,]
[., applySubclassRelationship, (, parentCtor, ,, childCtor, ,, type, ), ;, }, @, Override, public, String, getAbstractMethodName, (, ), {, return]
[., applySubclassRelationship, (, parentCtor, ,, childCtor, ,, type, ), ;, }, @, Override, public, String, getAbstractMethodName, (, ), {, return]
[{, return, nextConvention, ., getAbstractMethodName, (, ), ;, }, @, Override, public, String, getSingletonGetterClassName, (, Node, callNode, ), {, return]
[{, return, nextConvention, ., getAbstractMethodName, (, ), ;, }, @, Override, public, String, getSingletonGetterClassName, (, Node, callNode, ), {, return]
[getAbstractMethodName, (, ), ;, }, @, Override, public, String, getSingletonGetterClassName, (, Node, callNode, ), {, return, nextConvention, ., getSingletonGetterClassName, (]
[callNode, ), ;, }, @, Override, public, void, applySingletonGetter, (, FunctionType, functionType, ,, FunctionType, getterType, ,, ObjectType, objectType, ), {]
[callNode, ), ;, }, @, Override, public, void, applySingletonGetter, (, FunctionType, functionType, ,, FunctionType, getterType, ,, ObjectType, objectType, ), {]
[@, Override, public, void, applySingletonGetter, (, FunctionType, functionType, ,, FunctionType, getterType, ,, ObjectType, objectType, ), {, nextConvention, ., applySingletonGetter, (]
[public, void, applySingletonGetter, (, FunctionType, functionType, ,, FunctionType, getterType, ,, ObjectType, objectType, ), {, nextConvention, ., applySingletonGetter, (, functionType, ,]
[applySingletonGetter, (, FunctionType, functionType, ,, FunctionType, getterType, ,, ObjectType, objectType, ), {, nextConvention, ., applySingletonGetter, (, functionType, ,, getterType, ,]
[(, functionType, ,, getterType, ,, objectType, ), ;, }, @, Override, public, boolean, isInlinableFunction, (, Node, n, ), {, return]
[(, functionType, ,, getterType, ,, objectType, ), ;, }, @, Override, public, boolean, isInlinableFunction, (, Node, n, ), {, return]
[,, objectType, ), ;, }, @, Override, public, boolean, isInlinableFunction, (, Node, n, ), {, return, nextConvention, ., isInlinableFunction, (]
[return, nextConvention, ., isInlinableFunction, (, n, ), ;, }, @, Override, public, DelegateRelationship, getDelegateRelationship, (, Node, callNode, ), {, return]
[return, nextConvention, ., isInlinableFunction, (, n, ), ;, }, @, Override, public, DelegateRelationship, getDelegateRelationship, (, Node, callNode, ), {, return]
[(, n, ), ;, }, @, Override, public, DelegateRelationship, getDelegateRelationship, (, Node, callNode, ), {, return, nextConvention, ., getDelegateRelationship, (]
[public, void, applyDelegateRelationship, (, ObjectType, delegateSuperclass, ,, ObjectType, delegateBase, ,, ObjectType, delegator, ,, FunctionType, delegateProxy, ,, FunctionType, findDelegate, ), {]
[public, void, applyDelegateRelationship, (, ObjectType, delegateSuperclass, ,, ObjectType, delegateBase, ,, ObjectType, delegator, ,, FunctionType, delegateProxy, ,, FunctionType, findDelegate, ), {]
[ObjectType, delegateSuperclass, ,, ObjectType, delegateBase, ,, ObjectType, delegator, ,, FunctionType, delegateProxy, ,, FunctionType, findDelegate, ), {, nextConvention, ., applyDelegateRelationship, (]
[,, ObjectType, delegateBase, ,, ObjectType, delegator, ,, FunctionType, delegateProxy, ,, FunctionType, findDelegate, ), {, nextConvention, ., applyDelegateRelationship, (, delegateSuperclass, ,]
[delegateBase, ,, ObjectType, delegator, ,, FunctionType, delegateProxy, ,, FunctionType, findDelegate, ), {, nextConvention, ., applyDelegateRelationship, (, delegateSuperclass, ,, delegateBase, ,]
[ObjectType, delegator, ,, FunctionType, delegateProxy, ,, FunctionType, findDelegate, ), {, nextConvention, ., applyDelegateRelationship, (, delegateSuperclass, ,, delegateBase, ,, delegator, ,]
[,, FunctionType, delegateProxy, ,, FunctionType, findDelegate, ), {, nextConvention, ., applyDelegateRelationship, (, delegateSuperclass, ,, delegateBase, ,, delegator, ,, delegateProxy, ,]
[,, delegateBase, ,, delegator, ,, delegateProxy, ,, findDelegate, ), ;, }, @, Override, public, String, getDelegateSuperclassName, (, ), {, return]
[,, delegateBase, ,, delegator, ,, delegateProxy, ,, findDelegate, ), ;, }, @, Override, public, String, getDelegateSuperclassName, (, ), {, return]
[;, }, @, Override, public, void, checkForCallingConventionDefiningCalls, (, Node, n, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {]
[;, }, @, Override, public, void, checkForCallingConventionDefiningCalls, (, Node, n, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {]
[public, void, checkForCallingConventionDefiningCalls, (, Node, n, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {, nextConvention, ., checkForCallingConventionDefiningCalls, (]
[checkForCallingConventionDefiningCalls, (, Node, n, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {, nextConvention, ., checkForCallingConventionDefiningCalls, (, n, ,]
[<, JSType, >, scope, ,, List, <, ObjectType, >, delegateProxyPrototypes, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {]
[<, JSType, >, scope, ,, List, <, ObjectType, >, delegateProxyPrototypes, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {]
[,, List, <, ObjectType, >, delegateProxyPrototypes, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {, nextConvention, ., defineDelegateProxyPrototypeProperties, (]
[<, ObjectType, >, delegateProxyPrototypes, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {, nextConvention, ., defineDelegateProxyPrototypeProperties, (, registry, ,]
[>, delegateProxyPrototypes, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {, nextConvention, ., defineDelegateProxyPrototypeProperties, (, registry, ,, scope, ,]
[,, Map, <, String, ,, String, >, delegateCallingConventions, ), {, nextConvention, ., defineDelegateProxyPrototypeProperties, (, registry, ,, scope, ,, delegateProxyPrototypes, ,]
[(, registry, ,, scope, ,, delegateProxyPrototypes, ,, delegateCallingConventions, ), ;, }, @, Override, public, String, getGlobalObject, (, ), {, return]
[(, registry, ,, scope, ,, delegateProxyPrototypes, ,, delegateCallingConventions, ), ;, }, @, Override, public, String, getGlobalObject, (, ), {, return]
[return, nextConvention, ., getGlobalObject, (, ), ;, }, @, Override, public, Collection, <, AssertionFunctionSpec, >, getAssertionFunctions, (, ), {, return]
[return, nextConvention, ., getGlobalObject, (, ), ;, }, @, Override, public, Collection, <, AssertionFunctionSpec, >, getAssertionFunctions, (, ), {, return]
[{, return, nextConvention, ., getAssertionFunctions, (, ), ;, }, @, Override, public, Bind, describeFunctionBind, (, Node, n, ), {, return]
[nextConvention, ., getAssertionFunctions, (, ), ;, }, @, Override, public, Bind, describeFunctionBind, (, Node, n, ), {, return, describeFunctionBind, (]
[getAssertionFunctions, (, ), ;, }, @, Override, public, Bind, describeFunctionBind, (, Node, n, ), {, return, describeFunctionBind, (, n, ,]
[n, ,, false, ), ;, }, @, Override, public, Bind, describeFunctionBind, (, Node, n, ,, boolean, useTypeInfo, ), {, return]
[n, ,, false, ), ;, }, @, Override, public, Bind, describeFunctionBind, (, Node, n, ,, boolean, useTypeInfo, ), {, return]
[;, }, @, Override, public, Bind, describeFunctionBind, (, Node, n, ,, boolean, useTypeInfo, ), {, return, nextConvention, ., describeFunctionBind, (]
[@, Override, public, Bind, describeFunctionBind, (, Node, n, ,, boolean, useTypeInfo, ), {, return, nextConvention, ., describeFunctionBind, (, n, ,]
[., describeFunctionBind, (, n, ,, useTypeInfo, ), ;, }, @, Override, public, boolean, isPropertyTestFunction, (, Node, call, ), {, return]
[., describeFunctionBind, (, n, ,, useTypeInfo, ), ;, }, @, Override, public, boolean, isPropertyTestFunction, (, Node, call, ), {, return]
[,, useTypeInfo, ), ;, }, @, Override, public, boolean, isPropertyTestFunction, (, Node, call, ), {, return, nextConvention, ., isPropertyTestFunction, (]
[return, nextConvention, ., isPropertyTestFunction, (, call, ), ;, }, @, Override, public, boolean, isPrototypeAlias, (, Node, getProp, ), {, return]
[(, Node, getProp, ), {, return, false, ;, }, @, Override, public, ObjectLiteralCast, getObjectLiteralCast, (, Node, callNode, ), {, return]
[(, Node, getProp, ), {, return, false, ;, }, @, Override, public, ObjectLiteralCast, getObjectLiteralCast, (, Node, callNode, ), {, return]
[{, return, false, ;, }, @, Override, public, ObjectLiteralCast, getObjectLiteralCast, (, Node, callNode, ), {, return, nextConvention, ., getObjectLiteralCast, (]
[nextConvention, ., getObjectLiteralCast, (, callNode, ), ;, }, @, Override, public, Collection, <, String, >, getIndirectlyDeclaredProperties, (, ), {, return]
[nextConvention, ., getObjectLiteralCast, (, callNode, ), ;, }, @, Override, public, Collection, <, String, >, getIndirectlyDeclaredProperties, (, ), {, return]
[., getIndirectlyDeclaredProperties, (, ), ;, }, }, private, static, class, DefaultCodingConvention, implements, CodingConvention, {, private, static, final, long, serialVersionUID, =]
[{, private, static, final, long, serialVersionUID, =, 1L, ;, @, Override, public, boolean, isConstant, (, String, variableName, ), {, return]
[(, String, variableName, ), {, return, false, ;, }, @, Override, public, boolean, isConstantKey, (, String, variableName, ), {, return]
[(, String, variableName, ), {, return, false, ;, }, @, Override, public, boolean, isValidEnumKey, (, String, key, ), {, return]
[(, String, variableName, ), {, return, false, ;, }, @, Override, public, boolean, isValidEnumKey, (, String, key, ), {, return]
[(, String, variableName, ), {, return, false, ;, }, @, Override, public, boolean, isValidEnumKey, (, String, key, ), {, return]
[variableName, ), {, return, false, ;, }, @, Override, public, boolean, isValidEnumKey, (, String, key, ), {, return, key, !=]
[{, return, false, ;, }, @, Override, public, boolean, isValidEnumKey, (, String, key, ), {, return, key, !=, null, &&]
[{, return, false, ;, }, @, Override, public, boolean, isValidEnumKey, (, String, key, ), {, return, key, !=, null, &&]
[{, return, false, ;, }, @, Override, public, boolean, isValidEnumKey, (, String, key, ), {, return, key, !=, null, &&]
[Override, public, boolean, isValidEnumKey, (, String, key, ), {, return, key, !=, null, &&, key, ., length, (, ), >]
[key, ., length, (, ), >, 0, ;, }, @, Override, public, boolean, isOptionalParameter, (, Node, parameter, ), {, return]
[., length, (, ), >, 0, ;, }, @, Override, public, boolean, isOptionalParameter, (, Node, parameter, ), {, return, !]
[(, ), >, 0, ;, }, @, Override, public, boolean, isOptionalParameter, (, Node, parameter, ), {, return, !, isVarArgsParameter, (]
[{, return, !, isVarArgsParameter, (, parameter, ), ;, }, @, Override, public, boolean, isVarArgsParameter, (, Node, parameter, ), {, return]
[{, return, !, isVarArgsParameter, (, parameter, ), ;, }, @, Override, public, boolean, isVarArgsParameter, (, Node, parameter, ), {, return]
[{, return, !, isVarArgsParameter, (, parameter, ), ;, }, @, Override, public, boolean, isVarArgsParameter, (, Node, parameter, ), {, return]
[{, return, !, isVarArgsParameter, (, parameter, ), ;, }, @, Override, public, boolean, isVarArgsParameter, (, Node, parameter, ), {, return]
[Override, public, boolean, isVarArgsParameter, (, Node, parameter, ), {, return, parameter, ., getParent, (, ), ., getLastChild, (, ), ==]
[(, ), ==, parameter, ;, }, @, Override, public, boolean, isExported, (, String, name, ,, boolean, local, ), {, return]
[(, ), ==, parameter, ;, }, @, Override, public, boolean, isExported, (, String, name, ,, boolean, local, ), {, return]
[==, parameter, ;, }, @, Override, public, boolean, isExported, (, String, name, ,, boolean, local, ), {, return, local, &&]
[==, parameter, ;, }, @, Override, public, boolean, isExported, (, String, name, ,, boolean, local, ), {, return, local, &&]
[@, Override, public, boolean, isExported, (, String, name, ,, boolean, local, ), {, return, local, &&, name, ., startsWith, (]
[&&, name, ., startsWith, (, "$super", ), ;, }, @, Override, public, boolean, isExported, (, String, name, ), {, return]
[&&, name, ., startsWith, (, "$super", ), ;, }, @, Override, public, boolean, isExported, (, String, name, ), {, return]
[., startsWith, (, "$super", ), ;, }, @, Override, public, boolean, isExported, (, String, name, ), {, return, isExported, (]
[(, "$super", ), ;, }, @, Override, public, boolean, isExported, (, String, name, ), {, return, isExported, (, name, ,]
[;, }, @, Override, public, boolean, isExported, (, String, name, ), {, return, isExported, (, name, ,, false, ), ||]
[@, Override, public, boolean, isExported, (, String, name, ), {, return, isExported, (, name, ,, false, ), ||, isExported, (]
[public, boolean, isExported, (, String, name, ), {, return, isExported, (, name, ,, false, ), ||, isExported, (, name, ,]
[||, isExported, (, name, ,, true, ), ;, }, @, Override, public, boolean, isPrivate, (, String, name, ), {, return]
[(, String, name, ), {, return, false, ;, }, @, Override, public, SubclassRelationship, getClassesDefinedByCall, (, Node, callNode, ), {, return]
[(, Node, callNode, ), {, return, null, ;, }, @, Override, public, boolean, isSuperClassReference, (, String, propertyName, ), {, return]
[return, false, ;, }, @, Override, public, String, extractClassNameIfProvide, (, Node, node, ,, Node, parent, ), {, String, message, =]
[}, @, Override, public, String, extractClassNameIfProvide, (, Node, node, ,, Node, parent, ), {, String, message, =, "only implemented in GoogleCodingConvention", ;, throw]
[public, String, extractClassNameIfProvide, (, Node, node, ,, Node, parent, ), {, String, message, =, "only implemented in GoogleCodingConvention", ;, throw, new, UnsupportedOperationException, (]
[message, ), ;, }, @, Override, public, String, extractClassNameIfRequire, (, Node, node, ,, Node, parent, ), {, String, message, =]
[}, @, Override, public, String, extractClassNameIfRequire, (, Node, node, ,, Node, parent, ), {, String, message, =, "only implemented in GoogleCodingConvention", ;, throw]
[public, String, extractClassNameIfRequire, (, Node, node, ,, Node, parent, ), {, String, message, =, "only implemented in GoogleCodingConvention", ;, throw, new, UnsupportedOperationException, (]
[=, "only implemented in GoogleCodingConvention", ;, throw, new, UnsupportedOperationException, (, message, ), ;, }, @, Override, public, String, getExportPropertyFunction, (, ), {, return]
[Override, public, String, getExportPropertyFunction, (, ), {, return, null, ;, }, @, Override, public, String, getExportSymbolFunction, (, ), {, return]
[), {, return, null, ;, }, @, Override, public, List, <, String, >, identifyTypeDeclarationCall, (, Node, n, ), {, return]
[FunctionType, parentCtor, ,, FunctionType, childCtor, ,, SubclassType, type, ), {, }, @, Override, public, String, getAbstractMethodName, (, ), {, return]
[String, getAbstractMethodName, (, ), {, return, null, ;, }, @, Override, public, String, getSingletonGetterClassName, (, Node, callNode, ), {, return]
[functionType, ,, FunctionType, getterType, ,, ObjectType, objectType, ), {, }, @, Override, public, boolean, isInlinableFunction, (, Node, n, ), {]
[functionType, ,, FunctionType, getterType, ,, ObjectType, objectType, ), {, }, @, Override, public, boolean, isInlinableFunction, (, Node, n, ), {]
[,, ObjectType, objectType, ), {, }, @, Override, public, boolean, isInlinableFunction, (, Node, n, ), {, Preconditions, ., checkState, (]
[,, ObjectType, objectType, ), {, }, @, Override, public, boolean, isInlinableFunction, (, Node, n, ), {, Preconditions, ., checkState, (]
[public, boolean, isInlinableFunction, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, return]
[isFunction, (, ), ), ;, return, true, ;, }, @, Override, public, DelegateRelationship, getDelegateRelationship, (, Node, callNode, ), {, return]
[ObjectType, delegator, ,, FunctionType, delegateProxy, ,, FunctionType, findDelegate, ), {, }, @, Override, public, String, getDelegateSuperclassName, (, ), {, return]
[,, Map, <, String, ,, String, >, delegateCallingConventions, ), {, }, @, Override, public, String, getGlobalObject, (, ), {, return]
[String, getGlobalObject, (, ), {, return, "window", ;, }, @, Override, public, boolean, isPropertyTestFunction, (, Node, call, ), {, return]
[(, Node, call, ), {, return, false, ;, }, @, Override, public, boolean, isPrototypeAlias, (, Node, getProp, ), {, return]
[(, Node, getProp, ), {, return, false, ;, }, @, Override, public, ObjectLiteralCast, getObjectLiteralCast, (, Node, callNode, ), {, return]
[Node, callNode, ), {, return, null, ;, }, @, Override, public, Collection, <, AssertionFunctionSpec, >, getAssertionFunctions, (, ), {, return]
[Node, callNode, ), {, return, null, ;, }, @, Override, public, Collection, <, AssertionFunctionSpec, >, getAssertionFunctions, (, ), {, return]
[{, return, Collections, ., emptySet, (, ), ;, }, @, Override, public, Bind, describeFunctionBind, (, Node, n, ), {, return]
[Collections, ., emptySet, (, ), ;, }, @, Override, public, Bind, describeFunctionBind, (, Node, n, ), {, return, describeFunctionBind, (]
[emptySet, (, ), ;, }, @, Override, public, Bind, describeFunctionBind, (, Node, n, ), {, return, describeFunctionBind, (, n, ,]
[,, false, ), ;, }, @, Override, public, Bind, describeFunctionBind, (, Node, n, ,, boolean, useTypeInfo, ), {, if, (]
[false, ), ;, }, @, Override, public, Bind, describeFunctionBind, (, Node, n, ,, boolean, useTypeInfo, ), {, if, (, !]
[false, ), ;, }, @, Override, public, Bind, describeFunctionBind, (, Node, n, ,, boolean, useTypeInfo, ), {, if, (, !]
[describeFunctionBind, (, Node, n, ,, boolean, useTypeInfo, ), {, if, (, !, n, ., isCall, (, ), ), {, return]
[useTypeInfo, ), {, if, (, !, n, ., isCall, (, ), ), {, return, null, ;, }, Node, callTarget, =]
[useTypeInfo, ), {, if, (, !, n, ., isCall, (, ), ), {, return, null, ;, }, Node, callTarget, =]
[(, ), ), {, return, null, ;, }, Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, name, =]
[(, ), ), {, return, null, ;, }, Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, name, =]
[Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, name, =, callTarget, ., getQualifiedName, (, ), ;, if, (]
[Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, name, =, callTarget, ., getQualifiedName, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ;, String, name, =, callTarget, ., getQualifiedName, (, ), ;, if, (, name, !=]
[), ;, String, name, =, callTarget, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, if, (]
[), ;, String, name, =, callTarget, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, if, (]
[=, callTarget, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, if, (, name, ., equals, (]
[if, (, name, !=, null, ), {, if, (, name, ., equals, (, "Function.prototype.bind.call", ), ), {, Node, fn, =]
[if, (, name, !=, null, ), {, if, (, name, ., equals, (, "Function.prototype.bind.call", ), ), {, Node, fn, =]
[(, name, ., equals, (, "Function.prototype.bind.call", ), ), {, Node, fn, =, callTarget, ., getNext, (, ), ;, if, (]
[(, name, ., equals, (, "Function.prototype.bind.call", ), ), {, Node, fn, =, callTarget, ., getNext, (, ), ;, if, (]
[., equals, (, "Function.prototype.bind.call", ), ), {, Node, fn, =, callTarget, ., getNext, (, ), ;, if, (, fn, ==]
[), ), {, Node, fn, =, callTarget, ., getNext, (, ), ;, if, (, fn, ==, null, ), {, return]
[callTarget, ., getNext, (, ), ;, if, (, fn, ==, null, ), {, return, null, ;, }, Node, thisValue, =]
[getNext, (, ), ;, if, (, fn, ==, null, ), {, return, null, ;, }, Node, thisValue, =, safeNext, (]
[fn, ==, null, ), {, return, null, ;, }, Node, thisValue, =, safeNext, (, fn, ), ;, Node, parameters, =]
[null, ), {, return, null, ;, }, Node, thisValue, =, safeNext, (, fn, ), ;, Node, parameters, =, safeNext, (]
[null, ;, }, Node, thisValue, =, safeNext, (, fn, ), ;, Node, parameters, =, safeNext, (, thisValue, ), ;, return]
[Node, thisValue, =, safeNext, (, fn, ), ;, Node, parameters, =, safeNext, (, thisValue, ), ;, return, new, Bind, (]
[=, safeNext, (, fn, ), ;, Node, parameters, =, safeNext, (, thisValue, ), ;, return, new, Bind, (, fn, ,]
[(, fn, ), ;, Node, parameters, =, safeNext, (, thisValue, ), ;, return, new, Bind, (, fn, ,, thisValue, ,]
[safeNext, (, thisValue, ), ;, return, new, Bind, (, fn, ,, thisValue, ,, parameters, ), ;, }, }, if, (]
[safeNext, (, thisValue, ), ;, return, new, Bind, (, fn, ,, thisValue, ,, parameters, ), ;, }, }, if, (]
[safeNext, (, thisValue, ), ;, return, new, Bind, (, fn, ,, thisValue, ,, parameters, ), ;, }, }, if, (]
[new, Bind, (, fn, ,, thisValue, ,, parameters, ), ;, }, }, if, (, callTarget, ., isGetProp, (, ), &&]
[new, Bind, (, fn, ,, thisValue, ,, parameters, ), ;, }, }, if, (, callTarget, ., isGetProp, (, ), &&]
[new, Bind, (, fn, ,, thisValue, ,, parameters, ), ;, }, }, if, (, callTarget, ., isGetProp, (, ), &&]
[new, Bind, (, fn, ,, thisValue, ,, parameters, ), ;, }, }, if, (, callTarget, ., isGetProp, (, ), &&]
[if, (, callTarget, ., isGetProp, (, ), &&, callTarget, ., getLastChild, (, ), ., getString, (, ), ., equals, (]
[&&, callTarget, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "bind", ), ), {, Node, maybeFn, =]
[&&, callTarget, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "bind", ), ), {, Node, maybeFn, =]
[), ., equals, (, "bind", ), ), {, Node, maybeFn, =, callTarget, ., getFirstChild, (, ), ;, JSType, maybeFnType, =]
[), ., equals, (, "bind", ), ), {, Node, maybeFn, =, callTarget, ., getFirstChild, (, ), ;, JSType, maybeFnType, =]
[maybeFn, =, callTarget, ., getFirstChild, (, ), ;, JSType, maybeFnType, =, maybeFn, ., getJSType, (, ), ;, FunctionType, fnType, =]
[getFirstChild, (, ), ;, JSType, maybeFnType, =, maybeFn, ., getJSType, (, ), ;, FunctionType, fnType, =, null, ;, if, (]
[getFirstChild, (, ), ;, JSType, maybeFnType, =, maybeFn, ., getJSType, (, ), ;, FunctionType, fnType, =, null, ;, if, (]
[), ;, JSType, maybeFnType, =, maybeFn, ., getJSType, (, ), ;, FunctionType, fnType, =, null, ;, if, (, useTypeInfo, &&]
[), ;, JSType, maybeFnType, =, maybeFn, ., getJSType, (, ), ;, FunctionType, fnType, =, null, ;, if, (, useTypeInfo, &&]
[JSType, maybeFnType, =, maybeFn, ., getJSType, (, ), ;, FunctionType, fnType, =, null, ;, if, (, useTypeInfo, &&, maybeFnType, !=]
[maybeFn, ., getJSType, (, ), ;, FunctionType, fnType, =, null, ;, if, (, useTypeInfo, &&, maybeFnType, !=, null, ), {]
[getJSType, (, ), ;, FunctionType, fnType, =, null, ;, if, (, useTypeInfo, &&, maybeFnType, !=, null, ), {, fnType, =]
[getJSType, (, ), ;, FunctionType, fnType, =, null, ;, if, (, useTypeInfo, &&, maybeFnType, !=, null, ), {, fnType, =]
[getJSType, (, ), ;, FunctionType, fnType, =, null, ;, if, (, useTypeInfo, &&, maybeFnType, !=, null, ), {, fnType, =]
[maybeFnType, !=, null, ), {, fnType, =, maybeFnType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, }, if, (]
[maybeFnType, !=, null, ), {, fnType, =, maybeFnType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, }, if, (]
[maybeFnType, !=, null, ), {, fnType, =, maybeFnType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, }, if, (]
[null, ), {, fnType, =, maybeFnType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, }, if, (, fnType, !=]
[{, fnType, =, maybeFnType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, }, if, (, fnType, !=, null, ||]
[{, fnType, =, maybeFnType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, }, if, (, fnType, !=, null, ||]
[(, ), ;, }, if, (, fnType, !=, null, ||, maybeFn, ., isFunction, (, ), ), {, Node, thisValue, =]
[(, ), ;, }, if, (, fnType, !=, null, ||, maybeFn, ., isFunction, (, ), ), {, Node, thisValue, =]
[||, maybeFn, ., isFunction, (, ), ), {, Node, thisValue, =, callTarget, ., getNext, (, ), ;, Node, parameters, =]
[., isFunction, (, ), ), {, Node, thisValue, =, callTarget, ., getNext, (, ), ;, Node, parameters, =, safeNext, (]
[), {, Node, thisValue, =, callTarget, ., getNext, (, ), ;, Node, parameters, =, safeNext, (, thisValue, ), ;, return]
[thisValue, =, callTarget, ., getNext, (, ), ;, Node, parameters, =, safeNext, (, thisValue, ), ;, return, new, Bind, (]
[callTarget, ., getNext, (, ), ;, Node, parameters, =, safeNext, (, thisValue, ), ;, return, new, Bind, (, maybeFn, ,]
[getNext, (, ), ;, Node, parameters, =, safeNext, (, thisValue, ), ;, return, new, Bind, (, maybeFn, ,, thisValue, ,]
[=, safeNext, (, thisValue, ), ;, return, new, Bind, (, maybeFn, ,, thisValue, ,, parameters, ), ;, }, }, return]
[), ;, }, }, return, null, ;, }, @, Override, public, Collection, <, String, >, getIndirectlyDeclaredProperties, (, ), {, return]
[), ;, }, }, return, null, ;, }, @, Override, public, Collection, <, String, >, getIndirectlyDeclaredProperties, (, ), {, return]
[), {, return, ImmutableList, ., of, (, ), ;, }, private, Node, safeNext, (, Node, n, ), {, if, (]
[), {, return, ImmutableList, ., of, (, ), ;, }, private, Node, safeNext, (, Node, n, ), {, if, (]
[return, ImmutableList, ., of, (, ), ;, }, private, Node, safeNext, (, Node, n, ), {, if, (, n, !=]
[(, ), ;, }, private, Node, safeNext, (, Node, n, ), {, if, (, n, !=, null, ), {, return]
[(, ), ;, }, private, Node, safeNext, (, Node, n, ), {, if, (, n, !=, null, ), {, return]
[Node, n, ), {, if, (, n, !=, null, ), {, return, n, ., getNext, (, ), ;, }, return]
