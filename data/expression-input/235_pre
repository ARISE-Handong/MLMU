[commons, ., math3, ., random, ., Well19937c, ;, public, class, TDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =]
[public, class, TDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =]
[class, TDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =, -]
[final, double, degreesOfFreedom, ;, private, final, double, solverAbsoluteAccuracy, ;, public, TDistribution, (, double, degreesOfFreedom, ), throws, NotStrictlyPositiveException, {, this, (]
[degreesOfFreedom, ;, private, final, double, solverAbsoluteAccuracy, ;, public, TDistribution, (, double, degreesOfFreedom, ), throws, NotStrictlyPositiveException, {, this, (, degreesOfFreedom, ,]
[degreesOfFreedom, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, TDistribution, (, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (]
[}, public, TDistribution, (, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,]
[TDistribution, (, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,, degreesOfFreedom, ,]
[), ;, }, public, TDistribution, (, RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (]
[(, RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[(, RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, degreesOfFreedom, <=]
[,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, degreesOfFreedom, <=, 0, ), {, throw]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, degreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, degreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[super, (, rng, ), ;, if, (, degreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,]
[;, if, (, degreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, degreesOfFreedom, ), ;, }]
[;, if, (, degreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, degreesOfFreedom, ), ;, }]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, degreesOfFreedom, ), ;, }, this, ., degreesOfFreedom, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, degreesOfFreedom, ), ;, }, this, ., degreesOfFreedom, =, degreesOfFreedom, ;]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, degreesOfFreedom, ), ;, }, this, ., degreesOfFreedom, =, degreesOfFreedom, ;, solverAbsoluteAccuracy, =]
[;, }, this, ., degreesOfFreedom, =, degreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return]
[getDegreesOfFreedom, (, ), {, return, degreesOfFreedom, ;, }, public, double, density, (, double, x, ), {, final, double, n, =]
[;, }, public, double, density, (, double, x, ), {, final, double, n, =, degreesOfFreedom, ;, final, double, nPlus1Over2, =]
[;, }, public, double, density, (, double, x, ), {, final, double, n, =, degreesOfFreedom, ;, final, double, nPlus1Over2, =]
[}, public, double, density, (, double, x, ), {, final, double, n, =, degreesOfFreedom, ;, final, double, nPlus1Over2, =, (]
[}, public, double, density, (, double, x, ), {, final, double, n, =, degreesOfFreedom, ;, final, double, nPlus1Over2, =, (]
[double, density, (, double, x, ), {, final, double, n, =, degreesOfFreedom, ;, final, double, nPlus1Over2, =, (, n, +]
[double, x, ), {, final, double, n, =, degreesOfFreedom, ;, final, double, nPlus1Over2, =, (, n, +, 1, ), /]
[{, final, double, n, =, degreesOfFreedom, ;, final, double, nPlus1Over2, =, (, n, +, 1, ), /, 2, ;, return]
[{, final, double, n, =, degreesOfFreedom, ;, final, double, nPlus1Over2, =, (, n, +, 1, ), /, 2, ;, return]
[=, degreesOfFreedom, ;, final, double, nPlus1Over2, =, (, n, +, 1, ), /, 2, ;, return, FastMath, ., exp, (]
[=, degreesOfFreedom, ;, final, double, nPlus1Over2, =, (, n, +, 1, ), /, 2, ;, return, FastMath, ., exp, (]
[=, degreesOfFreedom, ;, final, double, nPlus1Over2, =, (, n, +, 1, ), /, 2, ;, return, FastMath, ., exp, (]
[=, degreesOfFreedom, ;, final, double, nPlus1Over2, =, (, n, +, 1, ), /, 2, ;, return, FastMath, ., exp, (]
[=, degreesOfFreedom, ;, final, double, nPlus1Over2, =, (, n, +, 1, ), /, 2, ;, return, FastMath, ., exp, (]
[double, nPlus1Over2, =, (, n, +, 1, ), /, 2, ;, return, FastMath, ., exp, (, Gamma, ., logGamma, (]
[(, n, +, 1, ), /, 2, ;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -]
[(, n, +, 1, ), /, 2, ;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -]
[+, 1, ), /, 2, ;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *]
[1, ), /, 2, ;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *, (]
[1, ), /, 2, ;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *, (]
[1, ), /, 2, ;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *, (]
[;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *, (, FastMath, ., log, (]
[;, return, FastMath, ., exp, (, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *, (, FastMath, ., log, (]
[(, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *, (, FastMath, ., log, (, FastMath, ., PI, ), +]
[(, Gamma, ., logGamma, (, nPlus1Over2, ), -, 0.5, *, (, FastMath, ., log, (, FastMath, ., PI, ), +]
[(, nPlus1Over2, ), -, 0.5, *, (, FastMath, ., log, (, FastMath, ., PI, ), +, FastMath, ., log, (]
[0.5, *, (, FastMath, ., log, (, FastMath, ., PI, ), +, FastMath, ., log, (, n, ), ), -]
[0.5, *, (, FastMath, ., log, (, FastMath, ., PI, ), +, FastMath, ., log, (, n, ), ), -]
[., log, (, FastMath, ., PI, ), +, FastMath, ., log, (, n, ), ), -, Gamma, ., logGamma, (]
[., log, (, FastMath, ., PI, ), +, FastMath, ., log, (, n, ), ), -, Gamma, ., logGamma, (]
[(, FastMath, ., PI, ), +, FastMath, ., log, (, n, ), ), -, Gamma, ., logGamma, (, n, /]
[PI, ), +, FastMath, ., log, (, n, ), ), -, Gamma, ., logGamma, (, n, /, 2, ), -]
[PI, ), +, FastMath, ., log, (, n, ), ), -, Gamma, ., logGamma, (, n, /, 2, ), -]
[+, FastMath, ., log, (, n, ), ), -, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *]
[+, FastMath, ., log, (, n, ), ), -, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *]
[(, n, ), ), -, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (]
[(, n, ), ), -, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (]
[), ), -, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (, 1, +]
[), ), -, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (, 1, +]
[), ), -, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (, 1, +]
[-, Gamma, ., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (, 1, +, x, *]
[., logGamma, (, n, /, 2, ), -, nPlus1Over2, *, FastMath, ., log, (, 1, +, x, *, x, /]
[x, /, n, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (]
[x, /, n, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (]
[n, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, ==]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, ==, 0, ), {]
[public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, ==, 0, ), {, ret, =]
[double, ret, ;, if, (, x, ==, 0, ), {, ret, =, 0.5, ;, }, else, {, double, t, =]
[double, ret, ;, if, (, x, ==, 0, ), {, ret, =, 0.5, ;, }, else, {, double, t, =]
[(, x, ==, 0, ), {, ret, =, 0.5, ;, }, else, {, double, t, =, Beta, ., regularizedBeta, (]
[(, x, ==, 0, ), {, ret, =, 0.5, ;, }, else, {, double, t, =, Beta, ., regularizedBeta, (]
[==, 0, ), {, ret, =, 0.5, ;, }, else, {, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /]
[0, ), {, ret, =, 0.5, ;, }, else, {, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /, (]
[0, ), {, ret, =, 0.5, ;, }, else, {, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /, (]
[{, ret, =, 0.5, ;, }, else, {, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /, (, degreesOfFreedom, +]
[ret, =, 0.5, ;, }, else, {, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /, (, degreesOfFreedom, +, (]
[ret, =, 0.5, ;, }, else, {, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /, (, degreesOfFreedom, +, (]
[0.5, ;, }, else, {, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /, (, degreesOfFreedom, +, (, x, *]
[{, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /, (, degreesOfFreedom, +, (, x, *, x, ), ), ,]
[{, double, t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /, (, degreesOfFreedom, +, (, x, *, x, ), ), ,]
[t, =, Beta, ., regularizedBeta, (, degreesOfFreedom, /, (, degreesOfFreedom, +, (, x, *, x, ), ), ,, 0.5, *]
[Beta, ., regularizedBeta, (, degreesOfFreedom, /, (, degreesOfFreedom, +, (, x, *, x, ), ), ,, 0.5, *, degreesOfFreedom, ,]
[/, (, degreesOfFreedom, +, (, x, *, x, ), ), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (]
[/, (, degreesOfFreedom, +, (, x, *, x, ), ), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (]
[degreesOfFreedom, +, (, x, *, x, ), ), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <]
[x, *, x, ), ), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <, 0.0, ), {]
[x, ), ), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret, =]
[x, ), ), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret, =]
[), ,, 0.5, *, degreesOfFreedom, ,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5, *]
[,, 0.5, ), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5, *, t, ;, }, else, {]
[), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5, *, t, ;, }, else, {, ret, =]
[), ;, if, (, x, <, 0.0, ), {, ret, =, 0.5, *, t, ;, }, else, {, ret, =]
[if, (, x, <, 0.0, ), {, ret, =, 0.5, *, t, ;, }, else, {, ret, =, 1.0, -]
[if, (, x, <, 0.0, ), {, ret, =, 0.5, *, t, ;, }, else, {, ret, =, 1.0, -]
[x, <, 0.0, ), {, ret, =, 0.5, *, t, ;, }, else, {, ret, =, 1.0, -, 0.5, *]
[ret, =, 0.5, *, t, ;, }, else, {, ret, =, 1.0, -, 0.5, *, t, ;, }, }, return]
[-, 0.5, *, t, ;, }, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, final, double, df, =]
[return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (]
[return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (]
[;, }, public, double, getNumericalMean, (, ), {, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (, df, >]
[getNumericalMean, (, ), {, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (, df, >, 1, ), {, return]
[final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (, df, >, 1, ), {, return, 0, ;, }, return]
[final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (, df, >, 1, ), {, return, 0, ;, }, return]
[return, 0, ;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, final, double, df, =]
[., NaN, ;, }, public, double, getNumericalVariance, (, ), {, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (]
[., NaN, ;, }, public, double, getNumericalVariance, (, ), {, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (, df, >]
[getNumericalVariance, (, ), {, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (, df, >, 2, ), {, return]
[getNumericalVariance, (, ), {, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (, df, >, 2, ), {, return]
[), {, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (, df, >, 2, ), {, return, df, /]
[{, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (, df, >, 2, ), {, return, df, /, (]
[{, final, double, df, =, getDegreesOfFreedom, (, ), ;, if, (, df, >, 2, ), {, return, df, /, (]
[double, df, =, getDegreesOfFreedom, (, ), ;, if, (, df, >, 2, ), {, return, df, /, (, df, -]
[;, if, (, df, >, 2, ), {, return, df, /, (, df, -, 2, ), ;, }, if, (]
[;, if, (, df, >, 2, ), {, return, df, /, (, df, -, 2, ), ;, }, if, (]
[;, if, (, df, >, 2, ), {, return, df, /, (, df, -, 2, ), ;, }, if, (]
[(, df, >, 2, ), {, return, df, /, (, df, -, 2, ), ;, }, if, (, df, >]
[>, 2, ), {, return, df, /, (, df, -, 2, ), ;, }, if, (, df, >, 1, &&]
[>, 2, ), {, return, df, /, (, df, -, 2, ), ;, }, if, (, df, >, 1, &&]
[), {, return, df, /, (, df, -, 2, ), ;, }, if, (, df, >, 1, &&, df, <=]
[/, (, df, -, 2, ), ;, }, if, (, df, >, 1, &&, df, <=, 2, ), {, return]
[/, (, df, -, 2, ), ;, }, if, (, df, >, 1, &&, df, <=, 2, ), {, return]
[;, }, if, (, df, >, 1, &&, df, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return]
[;, }, if, (, df, >, 1, &&, df, <=, 2, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, return]
[{, return, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return]
[{, return, Double, ., POSITIVE_INFINITY, ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return]
[}, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[}, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[}, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return]
[POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return]
[false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return]
