[;, private, int, rows, ;, private, int, columns, ;, public, GridArrangement, (, int, rows, ,, int, columns, ), {, this]
[;, private, int, rows, ;, private, int, columns, ;, public, GridArrangement, (, int, rows, ,, int, columns, ), {, this]
[=, rows, ;, this, ., columns, =, columns, ;, }, public, void, add, (, Block, block, ,, Object, key, )]
[., rows, =, rows, ;, this, ., columns, =, columns, ;, }, public, void, add, (, Block, block, ,, Object]
[;, this, ., columns, =, columns, ;, }, public, void, add, (, Block, block, ,, Object, key, ), {, }]
[=, columns, ;, }, public, void, add, (, Block, block, ,, Object, key, ), {, }, public, Size2D, arrange, (]
[., columns, =, columns, ;, }, public, void, add, (, Block, block, ,, Object, key, ), {, }, public, Size2D]
[;, }, public, void, add, (, Block, block, ,, Object, key, ), {, }, public, Size2D, arrange, (, BlockContainer, container]
[;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if]
[., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, .]
[;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }]
[==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }]
[., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, )]
[), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, )]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, )]
[., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint]
[,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,]
[), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeNR, (, container, ,, g2, ,, constraint]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeNR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeNR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeNR, (, container, ,, g2, ,]
[), {, return, arrangeNR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType]
[==, LengthConstraintType, ., RANGE, ), {, return, arrangeNR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if]
[), {, return, arrangeNR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType]
[., RANGE, ), {, return, arrangeNR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w]
[;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE]
[,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, )]
[==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, )]
[., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,]
[), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,]
[), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,]
[), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType]
[==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if]
[), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType]
[., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w]
[;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE]
[,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, )]
[==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, )]
[., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,]
[), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,]
[), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,]
[), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new, RuntimeException, (, "Should never get to here!", )]
[==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new]
[), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new, RuntimeException, (, "Should never get to here!", )]
[., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new, RuntimeException, (]
[;, }, }, throw, new, RuntimeException, (, "Should never get to here!", ), ;, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2]
[,, g2, ,, constraint, ), ;, }, }, throw, new, RuntimeException, (, "Should never get to here!", ), ;, }, protected, Size2D, arrangeNN, (]
[,, constraint, ), ;, }, }, throw, new, RuntimeException, (, "Should never get to here!", ), ;, }, protected, Size2D, arrangeNN, (, BlockContainer, container]
[), ;, }, }, throw, new, RuntimeException, (, "Should never get to here!", ), ;, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D]
[;, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, maxW, =, 0.0, ;, double, maxH]
[), ;, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, maxW, =, 0.0, ;, double]
[;, double, maxH, =, 0.0, ;, List, blocks, =, container, ., getBlocks, (, ), ;, Iterator, iterator, =, blocks, .]
[;, List, blocks, =, container, ., getBlocks, (, ), ;, Iterator, iterator, =, blocks, ., iterator, (, ), ;, while]
[;, Iterator, iterator, =, blocks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Block]
[., getBlocks, (, ), ;, Iterator, iterator, =, blocks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (]
[;, while, (, iterator, ., hasNext, (, ), ), {, Block, b, =, (, Block, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Block, b, =, (, Block, )]
[), {, Block, b, =, (, Block, ), iterator, ., next, (, ), ;, if, (, b, !=, null, )]
[., hasNext, (, ), ), {, Block, b, =, (, Block, ), iterator, ., next, (, ), ;, if, (]
[;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE]
[;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE]
[., next, (, ), ;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2]
[), {, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, maxW, =, Math, .]
[!=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, maxW, =]
[), {, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, maxW, =, Math, .]
[;, maxW, =, Math, ., max, (, maxW, ,, s, ., width, ), ;, maxH, =, Math, ., max, (]
[., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, maxW, =, Math, ., max, (, maxW, ,, s, .]
[,, RectangleConstraint, ., NONE, ), ;, maxW, =, Math, ., max, (, maxW, ,, s, ., width, ), ;, maxH]
[), ;, maxW, =, Math, ., max, (, maxW, ,, s, ., width, ), ;, maxH, =, Math, ., max]
[., NONE, ), ;, maxW, =, Math, ., max, (, maxW, ,, s, ., width, ), ;, maxH, =, Math]
[=, Math, ., max, (, maxW, ,, s, ., width, ), ;, maxH, =, Math, ., max, (, maxH, ,]
[;, maxH, =, Math, ., max, (, maxH, ,, s, ., height, ), ;, }, }, double, width, =, this]
[., max, (, maxW, ,, s, ., width, ), ;, maxH, =, Math, ., max, (, maxH, ,, s, .]
[,, s, ., width, ), ;, maxH, =, Math, ., max, (, maxH, ,, s, ., height, ), ;, }]
[), ;, maxH, =, Math, ., max, (, maxH, ,, s, ., height, ), ;, }, }, double, width, =]
[., width, ), ;, maxH, =, Math, ., max, (, maxH, ,, s, ., height, ), ;, }, }, double]
[=, Math, ., max, (, maxH, ,, s, ., height, ), ;, }, }, double, width, =, this, ., columns]
[;, }, }, double, width, =, this, ., columns, *, maxW, ;, double, height, =, this, ., rows, *, maxH]
[., max, (, maxH, ,, s, ., height, ), ;, }, }, double, width, =, this, ., columns, *, maxW]
[,, s, ., height, ), ;, }, }, double, width, =, this, ., columns, *, maxW, ;, double, height, =]
[), ;, }, }, double, width, =, this, ., columns, *, maxW, ;, double, height, =, this, ., rows, *]
[., height, ), ;, }, }, double, width, =, this, ., columns, *, maxW, ;, double, height, =, this, .]
[;, double, height, =, this, ., rows, *, maxH, ;, RectangleConstraint, c, =, new, RectangleConstraint, (, width, ,, height, )]
[*, maxW, ;, double, height, =, this, ., rows, *, maxH, ;, RectangleConstraint, c, =, new, RectangleConstraint, (, width, ,]
[., columns, *, maxW, ;, double, height, =, this, ., rows, *, maxH, ;, RectangleConstraint, c, =, new, RectangleConstraint, (]
[;, double, height, =, this, ., rows, *, maxH, ;, RectangleConstraint, c, =, new, RectangleConstraint, (, width, ,, height, )]
[;, RectangleConstraint, c, =, new, RectangleConstraint, (, width, ,, height, ), ;, return, arrangeFF, (, container, ,, g2, ,, c]
[*, maxH, ;, RectangleConstraint, c, =, new, RectangleConstraint, (, width, ,, height, ), ;, return, arrangeFF, (, container, ,, g2]
[., rows, *, maxH, ;, RectangleConstraint, c, =, new, RectangleConstraint, (, width, ,, height, ), ;, return, arrangeFF, (, container]
[;, RectangleConstraint, c, =, new, RectangleConstraint, (, width, ,, height, ), ;, return, arrangeFF, (, container, ,, g2, ,, c]
[;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D]
[,, height, ), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, protected, Size2D, arrangeFF, (, BlockContainer]
[), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,]
[;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, width, =, constraint]
[,, g2, ,, c, ), ;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, )]
[,, c, ), ;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double]
[), ;, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, width, =]
[;, double, height, =, constraint, ., getHeight, (, ), /, this, ., rows, ;, List, blocks, =, container, ., getBlocks]
[/, this, ., columns, ;, double, height, =, constraint, ., getHeight, (, ), /, this, ., rows, ;, List, blocks]
[., getWidth, (, ), /, this, ., columns, ;, double, height, =, constraint, ., getHeight, (, ), /, this, .]
[;, double, height, =, constraint, ., getHeight, (, ), /, this, ., rows, ;, List, blocks, =, container, ., getBlocks]
[., columns, ;, double, height, =, constraint, ., getHeight, (, ), /, this, ., rows, ;, List, blocks, =, container]
[;, List, blocks, =, container, ., getBlocks, (, ), ;, for, (, int, c, =, 0, ;, c, <, this]
[/, this, ., rows, ;, List, blocks, =, container, ., getBlocks, (, ), ;, for, (, int, c, =, 0]
[., getHeight, (, ), /, this, ., rows, ;, List, blocks, =, container, ., getBlocks, (, ), ;, for, (]
[;, List, blocks, =, container, ., getBlocks, (, ), ;, for, (, int, c, =, 0, ;, c, <, this]
[., rows, ;, List, blocks, =, container, ., getBlocks, (, ), ;, for, (, int, c, =, 0, ;, c]
[;, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, for, (]
[., getBlocks, (, ), ;, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++]
[;, c, <, this, ., columns, ;, c, ++, ), {, for, (, int, r, =, 0, ;, r, <]
[;, c, ++, ), {, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;, r, ++]
[<, this, ., columns, ;, c, ++, ), {, for, (, int, r, =, 0, ;, r, <, this, .]
[;, c, ++, ), {, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;, r, ++]
[., columns, ;, c, ++, ), {, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;]
[), {, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, int]
[++, ), {, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;, r, ++, ), {]
[;, r, <, this, ., rows, ;, r, ++, ), {, int, index, =, r, *, this, ., columns, +]
[;, r, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=]
[<, this, ., rows, ;, r, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;]
[;, r, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=]
[., rows, ;, r, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (]
[), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=, blocks, ., size]
[++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=, blocks, .]
[;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block]
[+, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =]
[*, this, ., columns, +, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;]
[+, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =]
[., columns, +, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block]
[;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block]
[), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (]
[>=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get]
[), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (]
[., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index]
[;, if, (, b, !=, null, ), {, b, ., setBounds, (, new, Rectangle2D, ., Double, (, c, *, width]
[;, if, (, b, !=, null, ), {, b, ., setBounds, (, new, Rectangle2D, ., Double, (, c, *, width]
[., get, (, index, ), ;, if, (, b, !=, null, ), {, b, ., setBounds, (, new, Rectangle2D, .]
[), ;, if, (, b, !=, null, ), {, b, ., setBounds, (, new, Rectangle2D, ., Double, (, c, *]
[), {, b, ., setBounds, (, new, Rectangle2D, ., Double, (, c, *, width, ,, r, *, height, ,, width]
[!=, null, ), {, b, ., setBounds, (, new, Rectangle2D, ., Double, (, c, *, width, ,, r, *, height]
[), {, b, ., setBounds, (, new, Rectangle2D, ., Double, (, c, *, width, ,, r, *, height, ,, width]
[;, }, }, }, return, new, Size2D, (, this, ., columns, *, width, ,, this, ., rows, *, height, )]
[., setBounds, (, new, Rectangle2D, ., Double, (, c, *, width, ,, r, *, height, ,, width, ,, height, )]
[), ;, }, }, }, return, new, Size2D, (, this, ., columns, *, width, ,, this, ., rows, *, height]
[,, r, *, height, ,, width, ,, height, ), ), ;, }, }, }, return, new, Size2D, (, this, .]
[*, width, ,, r, *, height, ,, width, ,, height, ), ), ;, }, }, }, return, new, Size2D, (]
[,, r, *, height, ,, width, ,, height, ), ), ;, }, }, }, return, new, Size2D, (, this, .]
[,, width, ,, height, ), ), ;, }, }, }, return, new, Size2D, (, this, ., columns, *, width, ,]
[*, height, ,, width, ,, height, ), ), ;, }, }, }, return, new, Size2D, (, this, ., columns, *]
[,, width, ,, height, ), ), ;, }, }, }, return, new, Size2D, (, this, ., columns, *, width, ,]
[,, height, ), ), ;, }, }, }, return, new, Size2D, (, this, ., columns, *, width, ,, this, .]
[), ), ;, }, }, }, return, new, Size2D, (, this, ., columns, *, width, ,, this, ., rows, *]
[;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =, constraint]
[,, this, ., rows, *, height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint]
[*, width, ,, this, ., rows, *, height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2]
[., columns, *, width, ,, this, ., rows, *, height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,]
[,, this, ., rows, *, height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint]
[), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =]
[*, height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint]
[., rows, *, height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, )]
[), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =]
[;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint, ., getHeightRange, (, )]
[., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint]
[;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {, return]
[,, g2, ,, c1, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (]
[,, c1, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), )]
[), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {]
[), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else]
[), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (]
[., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (]
[;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, )]
[;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (, container, ,, g2, ,, c2, )]
[., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;]
[., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight]
[), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (, container, ,, g2, ,, c2]
[., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (, container]
[;, return, arrange, (, container, ,, g2, ,, c2, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,]
[., toFixedHeight, (, h, ), ;, return, arrange, (, container, ,, g2, ,, c2, ), ;, }, }, protected, Size2D]
[), ;, return, arrange, (, container, ,, g2, ,, c2, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container]
[;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =]
[,, g2, ,, c2, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint]
[,, c2, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {]
[), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1]
[;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint, ., getWidthRange, (, )]
[., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint]
[;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {, return]
[,, g2, ,, c1, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (]
[,, c1, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), )]
[), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {]
[), {, return, size1, ;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1]
[., contains, (, size1, ., getWidth, (, ), ), ), {, return, size1, ;, }, else, {, double, w, =]
[., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {, return, size1, ;, }, else]
[), ), {, return, size1, ;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (]
[., getWidth, (, ), ), ), {, return, size1, ;, }, else, {, double, w, =, constraint, ., getWidthRange, (]
[;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, )]
[;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return, arrange, (, container, ,, g2, ,, c2, )]
[., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;]
[., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth]
[), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return, arrange, (, container, ,, g2, ,, c2]
[., getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return, arrange, (, container]
[;, return, arrange, (, container, ,, g2, ,, c2, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,]
[., toFixedWidth, (, w, ), ;, return, arrange, (, container, ,, g2, ,, c2, ), ;, }, }, protected, Size2D]
[), ;, return, arrange, (, container, ,, g2, ,, c2, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container]
[;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =]
[,, g2, ,, c2, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint]
[,, c2, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {]
[), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1]
[;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint, ., getWidthRange, (, )]
[., toUnconstrainedWidth, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint]
[;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {, return]
[,, g2, ,, c1, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (]
[,, c1, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), )]
[), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {]
[), {, return, size1, ;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1]
[., contains, (, size1, ., getWidth, (, ), ), ), {, return, size1, ;, }, else, {, double, w, =]
[., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {, return, size1, ;, }, else]
[), ), {, return, size1, ;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (]
[., getWidth, (, ), ), ), {, return, size1, ;, }, else, {, double, w, =, constraint, ., getWidthRange, (]
[;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, )]
[;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return, arrange, (, container, ,, g2, ,, c2, )]
[., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;]
[., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth]
[), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return, arrange, (, container, ,, g2, ,, c2]
[., getWidth, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedWidth, (, w, ), ;, return, arrange, (, container]
[;, return, arrange, (, container, ,, g2, ,, c2, ), ;, }, }, protected, Size2D, arrangeNR, (, BlockContainer, container, ,]
[., toFixedWidth, (, w, ), ;, return, arrange, (, container, ,, g2, ,, c2, ), ;, }, }, protected, Size2D]
[), ;, return, arrange, (, container, ,, g2, ,, c2, ), ;, }, }, protected, Size2D, arrangeNR, (, BlockContainer, container]
[;, }, }, protected, Size2D, arrangeNR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1, =]
[,, g2, ,, c2, ), ;, }, }, protected, Size2D, arrangeNR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint]
[,, c2, ), ;, }, }, protected, Size2D, arrangeNR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {]
[), ;, }, }, protected, Size2D, arrangeNR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, c1]
[;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint, ., getHeightRange, (, )]
[., toUnconstrainedHeight, (, ), ;, Size2D, size1, =, arrange, (, container, ,, g2, ,, c1, ), ;, if, (, constraint]
[;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {, return]
[,, g2, ,, c1, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (]
[,, c1, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), )]
[), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {]
[), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else]
[), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (]
[., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (]
[;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, )]
[;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (, container, ,, g2, ,, c2, )]
[., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;]
[., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight]
[), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (, container, ,, g2, ,, c2]
[., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (, container]
[;, return, arrange, (, container, ,, g2, ,, c2, ), ;, }, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,]
[., toFixedHeight, (, h, ), ;, return, arrange, (, container, ,, g2, ,, c2, ), ;, }, }, protected, Size2D]
[), ;, return, arrange, (, container, ,, g2, ,, c2, ), ;, }, }, protected, Size2D, arrangeRR, (, BlockContainer, container]
[;, }, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, size1, =]
[,, g2, ,, c2, ), ;, }, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint]
[,, c2, ), ;, }, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {]
[), ;, }, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, size1]
[;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {, if]
[,, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, .]
[,, RectangleConstraint, ., NONE, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (]
[), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {]
[., NONE, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), )]
[), {, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {]
[., contains, (, size1, ., getWidth, (, ), ), ), {, if, (, constraint, ., getHeightRange, (, ), ., contains]
[., getWidthRange, (, ), ., contains, (, size1, ., getWidth, (, ), ), ), {, if, (, constraint, ., getHeightRange]
[), ), {, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), )]
[., getWidth, (, ), ), ), {, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight]
[), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else]
[), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (]
[., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (]
[;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, )]
[;, RectangleConstraint, cc, =, new, RectangleConstraint, (, size1, ., getWidth, (, ), ,, h, ), ;, return, arrangeFF, (, container]
[., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, size1, ., getWidth, (]
[., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (]
[), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, size1, ., getWidth, (, ), ,, h, ), ;, return, arrangeFF, (]
[., getHeight, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, size1, ., getWidth, (, ), ,, h, )]
[;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, }, else, {, if, (, constraint, ., getHeightRange]
[,, h, ), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, }, else, {, if, (]
[., getWidth, (, ), ,, h, ), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, }]
[), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, }, else, {, if, (, constraint, .]
[;, }, }, else, {, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, )]
[,, g2, ,, cc, ), ;, }, }, else, {, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[,, cc, ), ;, }, }, else, {, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, .]
[), ;, }, }, else, {, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (]
[), {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;]
[., contains, (, size1, ., getHeight, (, ), ), ), {, double, w, =, constraint, ., getWidthRange, (, ), .]
[., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {, double, w, =, constraint, .]
[), ), {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), )]
[., getHeight, (, ), ), ), {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, .]
[;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, size1, ., getHeight, (, ), ), ;, return, arrangeFF, (, container]
[., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, size1, .]
[., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (]
[), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, size1, ., getHeight, (, ), ), ;, return, arrangeFF, (]
[., getWidth, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, size1, ., getHeight, (, ), )]
[;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, else, {, double, w, =, constraint, ., getWidthRange]
[,, size1, ., getHeight, (, ), ), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, else]
[), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, else, {, double, w, =, constraint, .]
[., getHeight, (, ), ), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, else, {, double]
[;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, )]
[,, g2, ,, cc, ), ;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (]
[,, cc, ), ;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, .]
[), ;, }, else, {, double, w, =, constraint, ., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (]
[;, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint]
[., constrain, (, size1, ., getWidth, (, ), ), ;, double, h, =, constraint, ., getHeightRange, (, ), ., constrain]
[., getWidthRange, (, ), ., constrain, (, size1, ., getWidth, (, ), ), ;, double, h, =, constraint, ., getHeightRange]
[), ;, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;]
[., getWidth, (, ), ), ;, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight]
[;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, h, ), ;, return, arrangeFF, (, container, ,, g2, ,, cc]
[., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, h, )]
[., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (]
[), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, h, ), ;, return, arrangeFF, (, container, ,, g2, ,]
[., getHeight, (, ), ), ;, RectangleConstraint, cc, =, new, RectangleConstraint, (, w, ,, h, ), ;, return, arrangeFF, (]
[;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, }, }, protected, Size2D, arrangeFN, (, BlockContainer, container]
[,, h, ), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, }, }, protected, Size2D, arrangeFN]
[), ;, return, arrangeFF, (, container, ,, g2, ,, cc, ), ;, }, }, }, protected, Size2D, arrangeFN, (, BlockContainer]
[;, }, }, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, width]
[,, g2, ,, cc, ), ;, }, }, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint]
[,, cc, ), ;, }, }, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, )]
[), ;, }, }, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double]
[;, RectangleConstraint, bc, =, constraint, ., toFixedWidth, (, width, ), ;, List, blocks, =, container, ., getBlocks, (, ), ;]
[/, this, ., columns, ;, RectangleConstraint, bc, =, constraint, ., toFixedWidth, (, width, ), ;, List, blocks, =, container, .]
[., getWidth, (, ), /, this, ., columns, ;, RectangleConstraint, bc, =, constraint, ., toFixedWidth, (, width, ), ;, List]
[;, RectangleConstraint, bc, =, constraint, ., toFixedWidth, (, width, ), ;, List, blocks, =, container, ., getBlocks, (, ), ;]
[., columns, ;, RectangleConstraint, bc, =, constraint, ., toFixedWidth, (, width, ), ;, List, blocks, =, container, ., getBlocks, (]
[;, List, blocks, =, container, ., getBlocks, (, ), ;, double, maxH, =, 0.0, ;, for, (, int, r, =]
[., toFixedWidth, (, width, ), ;, List, blocks, =, container, ., getBlocks, (, ), ;, double, maxH, =, 0.0, ;]
[), ;, List, blocks, =, container, ., getBlocks, (, ), ;, double, maxH, =, 0.0, ;, for, (, int, r]
[;, double, maxH, =, 0.0, ;, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;, r]
[., getBlocks, (, ), ;, double, maxH, =, 0.0, ;, for, (, int, r, =, 0, ;, r, <, this]
[;, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, for, (]
[;, r, <, this, ., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <]
[;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++]
[<, this, ., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, this, .]
[;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++]
[., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;]
[), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, int]
[++, ), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {]
[;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =, r, *, this, ., columns, +]
[;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=]
[<, this, ., columns, ;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;]
[;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=]
[., columns, ;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (]
[), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=, blocks, ., size]
[++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=, blocks, .]
[;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block]
[+, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =]
[*, this, ., columns, +, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;]
[+, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =]
[., columns, +, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block]
[;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block]
[), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (]
[>=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get]
[), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (]
[., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index]
[;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;]
[;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;]
[., get, (, index, ), ;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (]
[), ;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, )]
[), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxH, =, Math, ., max, (]
[!=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxH, =, Math, .]
[), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxH, =, Math, ., max, (]
[;, maxH, =, Math, ., max, (, maxH, ,, s, ., getHeight, (, ), ), ;, }, }, }, RectangleConstraint]
[., arrange, (, g2, ,, bc, ), ;, maxH, =, Math, ., max, (, maxH, ,, s, ., getHeight, (]
[,, bc, ), ;, maxH, =, Math, ., max, (, maxH, ,, s, ., getHeight, (, ), ), ;, }]
[), ;, maxH, =, Math, ., max, (, maxH, ,, s, ., getHeight, (, ), ), ;, }, }, }]
[=, Math, ., max, (, maxH, ,, s, ., getHeight, (, ), ), ;, }, }, }, RectangleConstraint, cc, =]
[;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedHeight, (, maxH, *, this, ., rows, ), ;, return, arrange]
[., max, (, maxH, ,, s, ., getHeight, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, .]
[,, s, ., getHeight, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedHeight, (, maxH, *]
[), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedHeight, (, maxH, *, this, ., rows, ), ;, return]
[., getHeight, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedHeight, (, maxH, *, this, .]
[;, return, arrange, (, container, ,, g2, ,, cc, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D]
[., toFixedHeight, (, maxH, *, this, ., rows, ), ;, return, arrange, (, container, ,, g2, ,, cc, ), ;]
[), ;, return, arrange, (, container, ,, g2, ,, cc, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,]
[*, this, ., rows, ), ;, return, arrange, (, container, ,, g2, ,, cc, ), ;, }, protected, Size2D, arrangeNF]
[), ;, return, arrange, (, container, ,, g2, ,, cc, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,]
[., rows, ), ;, return, arrange, (, container, ,, g2, ,, cc, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer]
[;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, height, =, constraint]
[,, g2, ,, cc, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, )]
[,, cc, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double]
[), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, height, =]
[;, RectangleConstraint, bc, =, constraint, ., toFixedHeight, (, height, ), ;, List, blocks, =, container, ., getBlocks, (, ), ;]
[/, this, ., rows, ;, RectangleConstraint, bc, =, constraint, ., toFixedHeight, (, height, ), ;, List, blocks, =, container, .]
[., getHeight, (, ), /, this, ., rows, ;, RectangleConstraint, bc, =, constraint, ., toFixedHeight, (, height, ), ;, List]
[;, RectangleConstraint, bc, =, constraint, ., toFixedHeight, (, height, ), ;, List, blocks, =, container, ., getBlocks, (, ), ;]
[., rows, ;, RectangleConstraint, bc, =, constraint, ., toFixedHeight, (, height, ), ;, List, blocks, =, container, ., getBlocks, (]
[;, List, blocks, =, container, ., getBlocks, (, ), ;, double, maxW, =, 0.0, ;, for, (, int, r, =]
[., toFixedHeight, (, height, ), ;, List, blocks, =, container, ., getBlocks, (, ), ;, double, maxW, =, 0.0, ;]
[), ;, List, blocks, =, container, ., getBlocks, (, ), ;, double, maxW, =, 0.0, ;, for, (, int, r]
[;, double, maxW, =, 0.0, ;, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;, r]
[., getBlocks, (, ), ;, double, maxW, =, 0.0, ;, for, (, int, r, =, 0, ;, r, <, this]
[;, for, (, int, r, =, 0, ;, r, <, this, ., rows, ;, r, ++, ), {, for, (]
[;, r, <, this, ., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <]
[;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++]
[<, this, ., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, this, .]
[;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++]
[., rows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;]
[), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {, int]
[++, ), {, for, (, int, c, =, 0, ;, c, <, this, ., columns, ;, c, ++, ), {]
[;, c, <, this, ., columns, ;, c, ++, ), {, int, index, =, r, *, this, ., columns, +]
[;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=]
[<, this, ., columns, ;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;]
[;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=]
[., columns, ;, c, ++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (]
[), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=, blocks, ., size]
[++, ), {, int, index, =, r, *, this, ., columns, +, c, ;, if, (, index, >=, blocks, .]
[;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block]
[+, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =]
[*, this, ., columns, +, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;]
[+, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =]
[., columns, +, c, ;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block]
[;, if, (, index, >=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block]
[), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (]
[>=, blocks, ., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get]
[), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index, ), ;, if, (]
[., size, (, ), ), {, break, ;, }, Block, b, =, (, Block, ), blocks, ., get, (, index]
[;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;]
[;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;]
[., get, (, index, ), ;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (]
[), ;, if, (, b, !=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, )]
[), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxW, =, Math, ., max, (]
[!=, null, ), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxW, =, Math, .]
[), {, Size2D, s, =, b, ., arrange, (, g2, ,, bc, ), ;, maxW, =, Math, ., max, (]
[;, maxW, =, Math, ., max, (, maxW, ,, s, ., getWidth, (, ), ), ;, }, }, }, RectangleConstraint]
[., arrange, (, g2, ,, bc, ), ;, maxW, =, Math, ., max, (, maxW, ,, s, ., getWidth, (]
[,, bc, ), ;, maxW, =, Math, ., max, (, maxW, ,, s, ., getWidth, (, ), ), ;, }]
[), ;, maxW, =, Math, ., max, (, maxW, ,, s, ., getWidth, (, ), ), ;, }, }, }]
[=, Math, ., max, (, maxW, ,, s, ., getWidth, (, ), ), ;, }, }, }, RectangleConstraint, cc, =]
[;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedWidth, (, maxW, *, this, ., columns, ), ;, return, arrange]
[., max, (, maxW, ,, s, ., getWidth, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, .]
[,, s, ., getWidth, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedWidth, (, maxW, *]
[), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedWidth, (, maxW, *, this, ., columns, ), ;, return]
[., getWidth, (, ), ), ;, }, }, }, RectangleConstraint, cc, =, constraint, ., toFixedWidth, (, maxW, *, this, .]
[;, return, arrange, (, container, ,, g2, ,, cc, ), ;, }, public, void, clear, (, ), {, }, public]
[., toFixedWidth, (, maxW, *, this, ., columns, ), ;, return, arrange, (, container, ,, g2, ,, cc, ), ;]
[), ;, return, arrange, (, container, ,, g2, ,, cc, ), ;, }, public, void, clear, (, ), {, }]
[*, this, ., columns, ), ;, return, arrange, (, container, ,, g2, ,, cc, ), ;, }, public, void, clear]
[), ;, return, arrange, (, container, ,, g2, ,, cc, ), ;, }, public, void, clear, (, ), {, }]
[., columns, ), ;, return, arrange, (, container, ,, g2, ,, cc, ), ;, }, public, void, clear, (, )]
[;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj]
[,, g2, ,, cc, ), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj]
[,, cc, ), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {]
[), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, GridArrangement, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, GridArrangement, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, GridArrangement, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, GridArrangement, ), ), {, return, false, ;, }, GridArrangement, that, =, (]
[), {, return, false, ;, }, GridArrangement, that, =, (, GridArrangement, ), obj, ;, if, (, this, ., columns, !=]
[), {, return, false, ;, }, GridArrangement, that, =, (, GridArrangement, ), obj, ;, if, (, this, ., columns, !=]
[), ), {, return, false, ;, }, GridArrangement, that, =, (, GridArrangement, ), obj, ;, if, (, this, ., columns]
[instanceof, GridArrangement, ), ), {, return, false, ;, }, GridArrangement, that, =, (, GridArrangement, ), obj, ;, if, (, this]
[;, }, GridArrangement, that, =, (, GridArrangement, ), obj, ;, if, (, this, ., columns, !=, that, ., columns, )]
[;, if, (, this, ., columns, !=, that, ., columns, ), {, return, false, ;, }, if, (, this, .]
[;, if, (, this, ., columns, !=, that, ., columns, ), {, return, false, ;, }, if, (, this, .]
[), {, return, false, ;, }, if, (, this, ., rows, !=, that, ., rows, ), {, return, false, ;]
[!=, that, ., columns, ), {, return, false, ;, }, if, (, this, ., rows, !=, that, ., rows, )]
[., columns, !=, that, ., columns, ), {, return, false, ;, }, if, (, this, ., rows, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., rows, !=, that, ., rows, ), {, return, false, ;]
[., columns, ), {, return, false, ;, }, if, (, this, ., rows, !=, that, ., rows, ), {, return]
[;, }, if, (, this, ., rows, !=, that, ., rows, ), {, return, false, ;, }, return, true, ;]
[), {, return, false, ;, }, return, true, ;, }, }]
[!=, that, ., rows, ), {, return, false, ;, }, return, true, ;, }, }]
[., rows, !=, that, ., rows, ), {, return, false, ;, }, return, true, ;, }, }]
[), {, return, false, ;, }, return, true, ;, }, }]
[., rows, ), {, return, false, ;, }, return, true, ;, }, }]
[;, }, return, true, ;, }, }]
[;, }, }]
