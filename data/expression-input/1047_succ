[;, private, final, double, [, ], [, ], lu, ;, private, final, int, [, ], pivot, ;, private, boolean, even]
[,, DEFAULT_TOO_SMALL, ), ;, }, public, LUDecomposition, (, RealMatrix, matrix, ,, double, singularityThreshold, ), {, if, (, !, matrix, .]
[), ;, }, public, LUDecomposition, (, RealMatrix, matrix, ,, double, singularityThreshold, ), {, if, (, !, matrix, ., isSquare, (]
[), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }]
[), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }]
[., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (]
[;, }, final, int, m, =, matrix, ., getColumnDimension, (, ), ;, lu, =, matrix, ., getData, (, ), ;]
[,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =, matrix, ., getColumnDimension, (, ), ;, lu]
[., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =, matrix, ., getColumnDimension]
[), ;, }, final, int, m, =, matrix, ., getColumnDimension, (, ), ;, lu, =, matrix, ., getData, (, )]
[., getColumnDimension, (, ), ), ;, }, final, int, m, =, matrix, ., getColumnDimension, (, ), ;, lu, =, matrix]
[;, lu, =, matrix, ., getData, (, ), ;, pivot, =, new, int, [, m, ], ;, cachedL, =, null]
[., getColumnDimension, (, ), ;, lu, =, matrix, ., getData, (, ), ;, pivot, =, new, int, [, m, ]]
[=, matrix, ., getData, (, ), ;, pivot, =, new, int, [, m, ], ;, cachedL, =, null, ;, cachedU]
[;, pivot, =, new, int, [, m, ], ;, cachedL, =, null, ;, cachedU, =, null, ;, cachedP, =, null]
[., getData, (, ), ;, pivot, =, new, int, [, m, ], ;, cachedL, =, null, ;, cachedU, =, null]
[=, new, int, [, m, ], ;, cachedL, =, null, ;, cachedU, =, null, ;, cachedP, =, null, ;, for]
[;, cachedL, =, null, ;, cachedU, =, null, ;, cachedP, =, null, ;, for, (, int, row, =, 0, ;]
[], ;, cachedL, =, null, ;, cachedU, =, null, ;, cachedP, =, null, ;, for, (, int, row, =, 0]
[=, null, ;, cachedU, =, null, ;, cachedP, =, null, ;, for, (, int, row, =, 0, ;, row, <]
[;, cachedU, =, null, ;, cachedP, =, null, ;, for, (, int, row, =, 0, ;, row, <, m, ;]
[=, null, ;, cachedP, =, null, ;, for, (, int, row, =, 0, ;, row, <, m, ;, row, ++]
[;, cachedP, =, null, ;, for, (, int, row, =, 0, ;, row, <, m, ;, row, ++, ), {]
[=, null, ;, for, (, int, row, =, 0, ;, row, <, m, ;, row, ++, ), {, pivot, []
[;, for, (, int, row, =, 0, ;, row, <, m, ;, row, ++, ), {, pivot, [, row, ]]
[;, row, <, m, ;, row, ++, ), {, pivot, [, row, ], =, row, ;, }, even, =, true]
[;, row, ++, ), {, pivot, [, row, ], =, row, ;, }, even, =, true, ;, singular, =, false]
[<, m, ;, row, ++, ), {, pivot, [, row, ], =, row, ;, }, even, =, true, ;, singular]
[;, row, ++, ), {, pivot, [, row, ], =, row, ;, }, even, =, true, ;, singular, =, false]
[), {, pivot, [, row, ], =, row, ;, }, even, =, true, ;, singular, =, false, ;, for, (]
[++, ), {, pivot, [, row, ], =, row, ;, }, even, =, true, ;, singular, =, false, ;, for]
[=, row, ;, }, even, =, true, ;, singular, =, false, ;, for, (, int, col, =, 0, ;, col]
[[, row, ], =, row, ;, }, even, =, true, ;, singular, =, false, ;, for, (, int, col, =]
[], =, row, ;, }, even, =, true, ;, singular, =, false, ;, for, (, int, col, =, 0, ;]
[;, }, even, =, true, ;, singular, =, false, ;, for, (, int, col, =, 0, ;, col, <, m]
[=, true, ;, singular, =, false, ;, for, (, int, col, =, 0, ;, col, <, m, ;, col, ++]
[;, singular, =, false, ;, for, (, int, col, =, 0, ;, col, <, m, ;, col, ++, ), {]
[=, false, ;, for, (, int, col, =, 0, ;, col, <, m, ;, col, ++, ), {, for, (]
[;, for, (, int, col, =, 0, ;, col, <, m, ;, col, ++, ), {, for, (, int, row]
[;, col, <, m, ;, col, ++, ), {, for, (, int, row, =, 0, ;, row, <, col, ;]
[;, col, ++, ), {, for, (, int, row, =, 0, ;, row, <, col, ;, row, ++, ), {]
[<, m, ;, col, ++, ), {, for, (, int, row, =, 0, ;, row, <, col, ;, row, ++]
[;, col, ++, ), {, for, (, int, row, =, 0, ;, row, <, col, ;, row, ++, ), {]
[), {, for, (, int, row, =, 0, ;, row, <, col, ;, row, ++, ), {, final, double, []
[++, ), {, for, (, int, row, =, 0, ;, row, <, col, ;, row, ++, ), {, final, double]
[;, row, <, col, ;, row, ++, ), {, final, double, [, ], luRow, =, lu, [, row, ], ;]
[;, row, ++, ), {, final, double, [, ], luRow, =, lu, [, row, ], ;, double, sum, =, luRow]
[<, col, ;, row, ++, ), {, final, double, [, ], luRow, =, lu, [, row, ], ;, double, sum]
[;, row, ++, ), {, final, double, [, ], luRow, =, lu, [, row, ], ;, double, sum, =, luRow]
[), {, final, double, [, ], luRow, =, lu, [, row, ], ;, double, sum, =, luRow, [, col, ]]
[++, ), {, final, double, [, ], luRow, =, lu, [, row, ], ;, double, sum, =, luRow, [, col]
[;, double, sum, =, luRow, [, col, ], ;, for, (, int, i, =, 0, ;, i, <, row, ;]
[[, row, ], ;, double, sum, =, luRow, [, col, ], ;, for, (, int, i, =, 0, ;, i]
[], ;, double, sum, =, luRow, [, col, ], ;, for, (, int, i, =, 0, ;, i, <, row]
[;, for, (, int, i, =, 0, ;, i, <, row, ;, i, ++, ), {, sum, -=, luRow, []
[[, col, ], ;, for, (, int, i, =, 0, ;, i, <, row, ;, i, ++, ), {, sum]
[], ;, for, (, int, i, =, 0, ;, i, <, row, ;, i, ++, ), {, sum, -=, luRow]
[;, i, <, row, ;, i, ++, ), {, sum, -=, luRow, [, i, ], *, lu, [, i, ]]
[;, i, ++, ), {, sum, -=, luRow, [, i, ], *, lu, [, i, ], [, col, ], ;]
[<, row, ;, i, ++, ), {, sum, -=, luRow, [, i, ], *, lu, [, i, ], [, col]
[;, i, ++, ), {, sum, -=, luRow, [, i, ], *, lu, [, i, ], [, col, ], ;]
[), {, sum, -=, luRow, [, i, ], *, lu, [, i, ], [, col, ], ;, }, luRow, []
[++, ), {, sum, -=, luRow, [, i, ], *, lu, [, i, ], [, col, ], ;, }, luRow]
[-=, luRow, [, i, ], *, lu, [, i, ], [, col, ], ;, }, luRow, [, col, ], =]
[;, }, luRow, [, col, ], =, sum, ;, }, int, max, =, col, ;, double, largest, =, Double, .]
[*, lu, [, i, ], [, col, ], ;, }, luRow, [, col, ], =, sum, ;, }, int, max]
[[, i, ], *, lu, [, i, ], [, col, ], ;, }, luRow, [, col, ], =, sum, ;]
[], *, lu, [, i, ], [, col, ], ;, }, luRow, [, col, ], =, sum, ;, }, int]
[;, }, luRow, [, col, ], =, sum, ;, }, int, max, =, col, ;, double, largest, =, Double, .]
[[, col, ], ;, }, luRow, [, col, ], =, sum, ;, }, int, max, =, col, ;, double, largest]
[[, i, ], [, col, ], ;, }, luRow, [, col, ], =, sum, ;, }, int, max, =, col]
[], [, col, ], ;, }, luRow, [, col, ], =, sum, ;, }, int, max, =, col, ;, double]
[], ;, }, luRow, [, col, ], =, sum, ;, }, int, max, =, col, ;, double, largest, =, Double]
[=, sum, ;, }, int, max, =, col, ;, double, largest, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, row]
[[, col, ], =, sum, ;, }, int, max, =, col, ;, double, largest, =, Double, ., NEGATIVE_INFINITY, ;, for]
[], =, sum, ;, }, int, max, =, col, ;, double, largest, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int]
[;, }, int, max, =, col, ;, double, largest, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, row, =, col]
[;, double, largest, =, Double, ., NEGATIVE_INFINITY, ;, for, (, int, row, =, col, ;, row, <, m, ;, row]
[;, for, (, int, row, =, col, ;, row, <, m, ;, row, ++, ), {, final, double, [, ]]
[., NEGATIVE_INFINITY, ;, for, (, int, row, =, col, ;, row, <, m, ;, row, ++, ), {, final, double]
[;, row, <, m, ;, row, ++, ), {, final, double, [, ], luRow, =, lu, [, row, ], ;]
[;, row, ++, ), {, final, double, [, ], luRow, =, lu, [, row, ], ;, double, sum, =, luRow]
[<, m, ;, row, ++, ), {, final, double, [, ], luRow, =, lu, [, row, ], ;, double, sum]
[;, row, ++, ), {, final, double, [, ], luRow, =, lu, [, row, ], ;, double, sum, =, luRow]
[), {, final, double, [, ], luRow, =, lu, [, row, ], ;, double, sum, =, luRow, [, col, ]]
[++, ), {, final, double, [, ], luRow, =, lu, [, row, ], ;, double, sum, =, luRow, [, col]
[;, double, sum, =, luRow, [, col, ], ;, for, (, int, i, =, 0, ;, i, <, col, ;]
[[, row, ], ;, double, sum, =, luRow, [, col, ], ;, for, (, int, i, =, 0, ;, i]
[], ;, double, sum, =, luRow, [, col, ], ;, for, (, int, i, =, 0, ;, i, <, col]
[;, for, (, int, i, =, 0, ;, i, <, col, ;, i, ++, ), {, sum, -=, luRow, []
[[, col, ], ;, for, (, int, i, =, 0, ;, i, <, col, ;, i, ++, ), {, sum]
[], ;, for, (, int, i, =, 0, ;, i, <, col, ;, i, ++, ), {, sum, -=, luRow]
[;, i, <, col, ;, i, ++, ), {, sum, -=, luRow, [, i, ], *, lu, [, i, ]]
[;, i, ++, ), {, sum, -=, luRow, [, i, ], *, lu, [, i, ], [, col, ], ;]
[<, col, ;, i, ++, ), {, sum, -=, luRow, [, i, ], *, lu, [, i, ], [, col]
[;, i, ++, ), {, sum, -=, luRow, [, i, ], *, lu, [, i, ], [, col, ], ;]
[), {, sum, -=, luRow, [, i, ], *, lu, [, i, ], [, col, ], ;, }, luRow, []
[++, ), {, sum, -=, luRow, [, i, ], *, lu, [, i, ], [, col, ], ;, }, luRow]
[-=, luRow, [, i, ], *, lu, [, i, ], [, col, ], ;, }, luRow, [, col, ], =]
[;, }, luRow, [, col, ], =, sum, ;, if, (, FastMath, ., abs, (, sum, ), >, largest, )]
[*, lu, [, i, ], [, col, ], ;, }, luRow, [, col, ], =, sum, ;, if, (, FastMath]
[[, i, ], *, lu, [, i, ], [, col, ], ;, }, luRow, [, col, ], =, sum, ;]
[], *, lu, [, i, ], [, col, ], ;, }, luRow, [, col, ], =, sum, ;, if, (]
[;, }, luRow, [, col, ], =, sum, ;, if, (, FastMath, ., abs, (, sum, ), >, largest, )]
[[, col, ], ;, }, luRow, [, col, ], =, sum, ;, if, (, FastMath, ., abs, (, sum, )]
[[, i, ], [, col, ], ;, }, luRow, [, col, ], =, sum, ;, if, (, FastMath, ., abs]
[], [, col, ], ;, }, luRow, [, col, ], =, sum, ;, if, (, FastMath, ., abs, (, sum]
[], ;, }, luRow, [, col, ], =, sum, ;, if, (, FastMath, ., abs, (, sum, ), >, largest]
[=, sum, ;, if, (, FastMath, ., abs, (, sum, ), >, largest, ), {, largest, =, FastMath, ., abs]
[[, col, ], =, sum, ;, if, (, FastMath, ., abs, (, sum, ), >, largest, ), {, largest, =]
[], =, sum, ;, if, (, FastMath, ., abs, (, sum, ), >, largest, ), {, largest, =, FastMath, .]
[;, if, (, FastMath, ., abs, (, sum, ), >, largest, ), {, largest, =, FastMath, ., abs, (, sum]
[), {, largest, =, FastMath, ., abs, (, sum, ), ;, max, =, row, ;, }, }, if, (, FastMath]
[>, largest, ), {, largest, =, FastMath, ., abs, (, sum, ), ;, max, =, row, ;, }, }, if]
[., abs, (, sum, ), >, largest, ), {, largest, =, FastMath, ., abs, (, sum, ), ;, max, =]
[), >, largest, ), {, largest, =, FastMath, ., abs, (, sum, ), ;, max, =, row, ;, }, }]
[), {, largest, =, FastMath, ., abs, (, sum, ), ;, max, =, row, ;, }, }, if, (, FastMath]
[=, FastMath, ., abs, (, sum, ), ;, max, =, row, ;, }, }, if, (, FastMath, ., abs, (]
[;, max, =, row, ;, }, }, if, (, FastMath, ., abs, (, lu, [, max, ], [, col, ]]
[., abs, (, sum, ), ;, max, =, row, ;, }, }, if, (, FastMath, ., abs, (, lu, []
[), ;, max, =, row, ;, }, }, if, (, FastMath, ., abs, (, lu, [, max, ], [, col]
[=, row, ;, }, }, if, (, FastMath, ., abs, (, lu, [, max, ], [, col, ], ), <]
[;, }, }, if, (, FastMath, ., abs, (, lu, [, max, ], [, col, ], ), <, singularityThreshold, )]
[), {, singular, =, true, ;, return, ;, }, if, (, max, !=, col, ), {, double, tmp, =, 0]
[<, singularityThreshold, ), {, singular, =, true, ;, return, ;, }, if, (, max, !=, col, ), {, double, tmp]
[., abs, (, lu, [, max, ], [, col, ], ), <, singularityThreshold, ), {, singular, =, true, ;, return]
[), <, singularityThreshold, ), {, singular, =, true, ;, return, ;, }, if, (, max, !=, col, ), {, double]
[[, col, ], ), <, singularityThreshold, ), {, singular, =, true, ;, return, ;, }, if, (, max, !=, col]
[[, max, ], [, col, ], ), <, singularityThreshold, ), {, singular, =, true, ;, return, ;, }, if, (]
[], [, col, ], ), <, singularityThreshold, ), {, singular, =, true, ;, return, ;, }, if, (, max, !=]
[], ), <, singularityThreshold, ), {, singular, =, true, ;, return, ;, }, if, (, max, !=, col, ), {]
[), {, singular, =, true, ;, return, ;, }, if, (, max, !=, col, ), {, double, tmp, =, 0]
[=, true, ;, return, ;, }, if, (, max, !=, col, ), {, double, tmp, =, 0, ;, final, double]
[;, return, ;, }, if, (, max, !=, col, ), {, double, tmp, =, 0, ;, final, double, [, ]]
[), {, double, tmp, =, 0, ;, final, double, [, ], luMax, =, lu, [, max, ], ;, final, double]
[!=, col, ), {, double, tmp, =, 0, ;, final, double, [, ], luMax, =, lu, [, max, ], ;]
[), {, double, tmp, =, 0, ;, final, double, [, ], luMax, =, lu, [, max, ], ;, final, double]
[;, final, double, [, ], luMax, =, lu, [, max, ], ;, final, double, [, ], luCol, =, lu, []
[;, final, double, [, ], luCol, =, lu, [, col, ], ;, for, (, int, i, =, 0, ;, i]
[[, max, ], ;, final, double, [, ], luCol, =, lu, [, col, ], ;, for, (, int, i, =]
[], ;, final, double, [, ], luCol, =, lu, [, col, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, tmp, =, luMax, []
[[, col, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, tmp]
[], ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, tmp, =, luMax]
[;, i, <, m, ;, i, ++, ), {, tmp, =, luMax, [, i, ], ;, luMax, [, i, ]]
[;, i, ++, ), {, tmp, =, luMax, [, i, ], ;, luMax, [, i, ], =, luCol, [, i]
[<, m, ;, i, ++, ), {, tmp, =, luMax, [, i, ], ;, luMax, [, i, ], =, luCol]
[;, i, ++, ), {, tmp, =, luMax, [, i, ], ;, luMax, [, i, ], =, luCol, [, i]
[), {, tmp, =, luMax, [, i, ], ;, luMax, [, i, ], =, luCol, [, i, ], ;, luCol]
[++, ), {, tmp, =, luMax, [, i, ], ;, luMax, [, i, ], =, luCol, [, i, ], ;]
[=, luMax, [, i, ], ;, luMax, [, i, ], =, luCol, [, i, ], ;, luCol, [, i, ]]
[;, luMax, [, i, ], =, luCol, [, i, ], ;, luCol, [, i, ], =, tmp, ;, }, int]
[[, i, ], ;, luMax, [, i, ], =, luCol, [, i, ], ;, luCol, [, i, ], =, tmp]
[], ;, luMax, [, i, ], =, luCol, [, i, ], ;, luCol, [, i, ], =, tmp, ;, }]
[=, luCol, [, i, ], ;, luCol, [, i, ], =, tmp, ;, }, int, temp, =, pivot, [, max]
[[, i, ], =, luCol, [, i, ], ;, luCol, [, i, ], =, tmp, ;, }, int, temp, =]
[], =, luCol, [, i, ], ;, luCol, [, i, ], =, tmp, ;, }, int, temp, =, pivot, []
[;, luCol, [, i, ], =, tmp, ;, }, int, temp, =, pivot, [, max, ], ;, pivot, [, max]
[[, i, ], ;, luCol, [, i, ], =, tmp, ;, }, int, temp, =, pivot, [, max, ], ;]
[], ;, luCol, [, i, ], =, tmp, ;, }, int, temp, =, pivot, [, max, ], ;, pivot, []
[=, tmp, ;, }, int, temp, =, pivot, [, max, ], ;, pivot, [, max, ], =, pivot, [, col]
[[, i, ], =, tmp, ;, }, int, temp, =, pivot, [, max, ], ;, pivot, [, max, ], =]
[], =, tmp, ;, }, int, temp, =, pivot, [, max, ], ;, pivot, [, max, ], =, pivot, []
[;, }, int, temp, =, pivot, [, max, ], ;, pivot, [, max, ], =, pivot, [, col, ], ;]
[;, pivot, [, max, ], =, pivot, [, col, ], ;, pivot, [, col, ], =, temp, ;, even, =]
[[, max, ], ;, pivot, [, max, ], =, pivot, [, col, ], ;, pivot, [, col, ], =, temp]
[], ;, pivot, [, max, ], =, pivot, [, col, ], ;, pivot, [, col, ], =, temp, ;, even]
[=, pivot, [, col, ], ;, pivot, [, col, ], =, temp, ;, even, =, !, even, ;, }, final]
[[, max, ], =, pivot, [, col, ], ;, pivot, [, col, ], =, temp, ;, even, =, !, even]
[], =, pivot, [, col, ], ;, pivot, [, col, ], =, temp, ;, even, =, !, even, ;, }]
[;, pivot, [, col, ], =, temp, ;, even, =, !, even, ;, }, final, double, luDiag, =, lu, []
[[, col, ], ;, pivot, [, col, ], =, temp, ;, even, =, !, even, ;, }, final, double, luDiag]
[], ;, pivot, [, col, ], =, temp, ;, even, =, !, even, ;, }, final, double, luDiag, =, lu]
[=, temp, ;, even, =, !, even, ;, }, final, double, luDiag, =, lu, [, col, ], [, col, ]]
[[, col, ], =, temp, ;, even, =, !, even, ;, }, final, double, luDiag, =, lu, [, col, ]]
[], =, temp, ;, even, =, !, even, ;, }, final, double, luDiag, =, lu, [, col, ], [, col]
[;, even, =, !, even, ;, }, final, double, luDiag, =, lu, [, col, ], [, col, ], ;, for]
[=, !, even, ;, }, final, double, luDiag, =, lu, [, col, ], [, col, ], ;, for, (, int]
[;, }, final, double, luDiag, =, lu, [, col, ], [, col, ], ;, for, (, int, row, =, col]
[;, }, final, double, luDiag, =, lu, [, col, ], [, col, ], ;, for, (, int, row, =, col]
[;, for, (, int, row, =, col, +, 1, ;, row, <, m, ;, row, ++, ), {, lu, []
[[, col, ], ;, for, (, int, row, =, col, +, 1, ;, row, <, m, ;, row, ++, )]
[[, col, ], [, col, ], ;, for, (, int, row, =, col, +, 1, ;, row, <, m, ;]
[], [, col, ], ;, for, (, int, row, =, col, +, 1, ;, row, <, m, ;, row, ++]
[], ;, for, (, int, row, =, col, +, 1, ;, row, <, m, ;, row, ++, ), {, lu]
[;, row, <, m, ;, row, ++, ), {, lu, [, row, ], [, col, ], /=, luDiag, ;, }]
[+, 1, ;, row, <, m, ;, row, ++, ), {, lu, [, row, ], [, col, ], /=, luDiag]
[;, row, <, m, ;, row, ++, ), {, lu, [, row, ], [, col, ], /=, luDiag, ;, }]
[;, row, ++, ), {, lu, [, row, ], [, col, ], /=, luDiag, ;, }, }, }, public, RealMatrix]
[<, m, ;, row, ++, ), {, lu, [, row, ], [, col, ], /=, luDiag, ;, }, }, }]
[;, row, ++, ), {, lu, [, row, ], [, col, ], /=, luDiag, ;, }, }, }, public, RealMatrix]
[), {, lu, [, row, ], [, col, ], /=, luDiag, ;, }, }, }, public, RealMatrix, getL, (, )]
[++, ), {, lu, [, row, ], [, col, ], /=, luDiag, ;, }, }, }, public, RealMatrix, getL, (]
[/=, luDiag, ;, }, }, }, public, RealMatrix, getL, (, ), {, if, (, (, cachedL, ==, null, ), &&]
[[, col, ], /=, luDiag, ;, }, }, }, public, RealMatrix, getL, (, ), {, if, (, (, cachedL, ==]
[[, row, ], [, col, ], /=, luDiag, ;, }, }, }, public, RealMatrix, getL, (, ), {, if, (]
[], [, col, ], /=, luDiag, ;, }, }, }, public, RealMatrix, getL, (, ), {, if, (, (, cachedL]
[], /=, luDiag, ;, }, }, }, public, RealMatrix, getL, (, ), {, if, (, (, cachedL, ==, null, )]
[;, }, }, }, public, RealMatrix, getL, (, ), {, if, (, (, cachedL, ==, null, ), &&, !, singular]
[), {, final, int, m, =, pivot, ., length, ;, cachedL, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, )]
[&&, !, singular, ), {, final, int, m, =, pivot, ., length, ;, cachedL, =, MatrixUtils, ., createRealMatrix, (, m]
[), &&, !, singular, ), {, final, int, m, =, pivot, ., length, ;, cachedL, =, MatrixUtils, ., createRealMatrix, (]
[==, null, ), &&, !, singular, ), {, final, int, m, =, pivot, ., length, ;, cachedL, =, MatrixUtils, .]
[), &&, !, singular, ), {, final, int, m, =, pivot, ., length, ;, cachedL, =, MatrixUtils, ., createRealMatrix, (]
[), {, final, int, m, =, pivot, ., length, ;, cachedL, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, )]
[), {, final, int, m, =, pivot, ., length, ;, cachedL, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, )]
[;, cachedL, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;, i]
[., length, ;, cachedL, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0]
[=, MatrixUtils, ., createRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;, i, <, m]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, final, double, [, ]]
[., createRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++]
[,, m, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, final]
[), ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, final, double, []
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], luI, =, lu, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], luI, =, lu, [, i, ], ;, for, (, int, j]
[<, m, ;, ++, i, ), {, final, double, [, ], luI, =, lu, [, i, ], ;, for, (]
[;, ++, i, ), {, final, double, [, ], luI, =, lu, [, i, ], ;, for, (, int, j]
[), {, final, double, [, ], luI, =, lu, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, double, [, ], luI, =, lu, [, i, ], ;, for, (, int, j, =, 0, ;]
[;, for, (, int, j, =, 0, ;, j, <, i, ;, ++, j, ), {, cachedL, ., setEntry, (]
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, i, ;, ++, j, ), {, cachedL]
[], ;, for, (, int, j, =, 0, ;, j, <, i, ;, ++, j, ), {, cachedL, ., setEntry]
[;, j, <, i, ;, ++, j, ), {, cachedL, ., setEntry, (, i, ,, j, ,, luI, [, j]
[;, ++, j, ), {, cachedL, ., setEntry, (, i, ,, j, ,, luI, [, j, ], ), ;, }]
[<, i, ;, ++, j, ), {, cachedL, ., setEntry, (, i, ,, j, ,, luI, [, j, ], )]
[;, ++, j, ), {, cachedL, ., setEntry, (, i, ,, j, ,, luI, [, j, ], ), ;, }]
[), {, cachedL, ., setEntry, (, i, ,, j, ,, luI, [, j, ], ), ;, }, cachedL, ., setEntry]
[), {, cachedL, ., setEntry, (, i, ,, j, ,, luI, [, j, ], ), ;, }, cachedL, ., setEntry]
[;, }, cachedL, ., setEntry, (, i, ,, i, ,, 1.0, ), ;, }, }, return, cachedL, ;, }, public]
[., setEntry, (, i, ,, j, ,, luI, [, j, ], ), ;, }, cachedL, ., setEntry, (, i, ,]
[,, j, ,, luI, [, j, ], ), ;, }, cachedL, ., setEntry, (, i, ,, i, ,, 1.0, )]
[,, luI, [, j, ], ), ;, }, cachedL, ., setEntry, (, i, ,, i, ,, 1.0, ), ;, }]
[), ;, }, cachedL, ., setEntry, (, i, ,, i, ,, 1.0, ), ;, }, }, return, cachedL, ;, }]
[[, j, ], ), ;, }, cachedL, ., setEntry, (, i, ,, i, ,, 1.0, ), ;, }, }, return]
[], ), ;, }, cachedL, ., setEntry, (, i, ,, i, ,, 1.0, ), ;, }, }, return, cachedL, ;]
[;, }, }, return, cachedL, ;, }, public, RealMatrix, getU, (, ), {, if, (, (, cachedU, ==, null, )]
[., setEntry, (, i, ,, i, ,, 1.0, ), ;, }, }, return, cachedL, ;, }, public, RealMatrix, getU, (]
[,, i, ,, 1.0, ), ;, }, }, return, cachedL, ;, }, public, RealMatrix, getU, (, ), {, if, (]
[,, 1.0, ), ;, }, }, return, cachedL, ;, }, public, RealMatrix, getU, (, ), {, if, (, (, cachedU]
[), ;, }, }, return, cachedL, ;, }, public, RealMatrix, getU, (, ), {, if, (, (, cachedU, ==, null]
[;, }, public, RealMatrix, getU, (, ), {, if, (, (, cachedU, ==, null, ), &&, !, singular, ), {]
[), {, final, int, m, =, pivot, ., length, ;, cachedU, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, )]
[&&, !, singular, ), {, final, int, m, =, pivot, ., length, ;, cachedU, =, MatrixUtils, ., createRealMatrix, (, m]
[), &&, !, singular, ), {, final, int, m, =, pivot, ., length, ;, cachedU, =, MatrixUtils, ., createRealMatrix, (]
[==, null, ), &&, !, singular, ), {, final, int, m, =, pivot, ., length, ;, cachedU, =, MatrixUtils, .]
[), &&, !, singular, ), {, final, int, m, =, pivot, ., length, ;, cachedU, =, MatrixUtils, ., createRealMatrix, (]
[), {, final, int, m, =, pivot, ., length, ;, cachedU, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, )]
[), {, final, int, m, =, pivot, ., length, ;, cachedU, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, )]
[;, cachedU, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;, i]
[., length, ;, cachedU, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0]
[=, MatrixUtils, ., createRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;, i, <, m]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, final, double, [, ]]
[., createRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++]
[,, m, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, final]
[), ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, final, double, []
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], luI, =, lu, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], luI, =, lu, [, i, ], ;, for, (, int, j]
[<, m, ;, ++, i, ), {, final, double, [, ], luI, =, lu, [, i, ], ;, for, (]
[;, ++, i, ), {, final, double, [, ], luI, =, lu, [, i, ], ;, for, (, int, j]
[), {, final, double, [, ], luI, =, lu, [, i, ], ;, for, (, int, j, =, i, ;]
[), {, final, double, [, ], luI, =, lu, [, i, ], ;, for, (, int, j, =, i, ;]
[;, for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {, cachedU, ., setEntry, (]
[[, i, ], ;, for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {, cachedU]
[], ;, for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {, cachedU, ., setEntry]
[;, j, <, m, ;, ++, j, ), {, cachedU, ., setEntry, (, i, ,, j, ,, luI, [, j]
[;, ++, j, ), {, cachedU, ., setEntry, (, i, ,, j, ,, luI, [, j, ], ), ;, }]
[<, m, ;, ++, j, ), {, cachedU, ., setEntry, (, i, ,, j, ,, luI, [, j, ], )]
[;, ++, j, ), {, cachedU, ., setEntry, (, i, ,, j, ,, luI, [, j, ], ), ;, }]
[), {, cachedU, ., setEntry, (, i, ,, j, ,, luI, [, j, ], ), ;, }, }, }, return]
[), {, cachedU, ., setEntry, (, i, ,, j, ,, luI, [, j, ], ), ;, }, }, }, return]
[;, }, }, }, return, cachedU, ;, }, public, RealMatrix, getP, (, ), {, if, (, (, cachedP, ==, null]
[., setEntry, (, i, ,, j, ,, luI, [, j, ], ), ;, }, }, }, return, cachedU, ;, }]
[,, j, ,, luI, [, j, ], ), ;, }, }, }, return, cachedU, ;, }, public, RealMatrix, getP, (]
[,, luI, [, j, ], ), ;, }, }, }, return, cachedU, ;, }, public, RealMatrix, getP, (, ), {]
[), ;, }, }, }, return, cachedU, ;, }, public, RealMatrix, getP, (, ), {, if, (, (, cachedP, ==]
[[, j, ], ), ;, }, }, }, return, cachedU, ;, }, public, RealMatrix, getP, (, ), {, if, (]
[], ), ;, }, }, }, return, cachedU, ;, }, public, RealMatrix, getP, (, ), {, if, (, (, cachedP]
[;, }, public, RealMatrix, getP, (, ), {, if, (, (, cachedP, ==, null, ), &&, !, singular, ), {]
[), {, final, int, m, =, pivot, ., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, )]
[&&, !, singular, ), {, final, int, m, =, pivot, ., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (, m]
[), &&, !, singular, ), {, final, int, m, =, pivot, ., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (]
[==, null, ), &&, !, singular, ), {, final, int, m, =, pivot, ., length, ;, cachedP, =, MatrixUtils, .]
[), &&, !, singular, ), {, final, int, m, =, pivot, ., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (]
[), {, final, int, m, =, pivot, ., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, )]
[), {, final, int, m, =, pivot, ., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, )]
[;, cachedP, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;, i]
[., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0]
[=, MatrixUtils, ., createRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;, i, <, m]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, cachedP, ., setEntry, (]
[., createRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++]
[,, m, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, cachedP]
[), ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, cachedP, ., setEntry]
[;, i, <, m, ;, ++, i, ), {, cachedP, ., setEntry, (, i, ,, pivot, [, i, ], ,]
[;, ++, i, ), {, cachedP, ., setEntry, (, i, ,, pivot, [, i, ], ,, 1.0, ), ;, }]
[<, m, ;, ++, i, ), {, cachedP, ., setEntry, (, i, ,, pivot, [, i, ], ,, 1.0, )]
[;, ++, i, ), {, cachedP, ., setEntry, (, i, ,, pivot, [, i, ], ,, 1.0, ), ;, }]
[), {, cachedP, ., setEntry, (, i, ,, pivot, [, i, ], ,, 1.0, ), ;, }, }, return, cachedP]
[), {, cachedP, ., setEntry, (, i, ,, pivot, [, i, ], ,, 1.0, ), ;, }, }, return, cachedP]
[;, }, }, return, cachedP, ;, }, public, int, [, ], getPivot, (, ), {, return, pivot, ., clone, (]
[., setEntry, (, i, ,, pivot, [, i, ], ,, 1.0, ), ;, }, }, return, cachedP, ;, }, public]
[,, pivot, [, i, ], ,, 1.0, ), ;, }, }, return, cachedP, ;, }, public, int, [, ], getPivot]
[,, 1.0, ), ;, }, }, return, cachedP, ;, }, public, int, [, ], getPivot, (, ), {, return, pivot]
[[, i, ], ,, 1.0, ), ;, }, }, return, cachedP, ;, }, public, int, [, ], getPivot, (, )]
[], ,, 1.0, ), ;, }, }, return, cachedP, ;, }, public, int, [, ], getPivot, (, ), {, return]
[), ;, }, }, return, cachedP, ;, }, public, int, [, ], getPivot, (, ), {, return, pivot, ., clone]
[;, }, public, int, [, ], getPivot, (, ), {, return, pivot, ., clone, (, ), ;, }, public, double]
[;, }, public, double, getDeterminant, (, ), {, if, (, singular, ), {, return, 0, ;, }, else, {, final]
[., clone, (, ), ;, }, public, double, getDeterminant, (, ), {, if, (, singular, ), {, return, 0, ;]
[), {, return, 0, ;, }, else, {, final, int, m, =, pivot, ., length, ;, double, determinant, =, even]
[;, }, else, {, final, int, m, =, pivot, ., length, ;, double, determinant, =, even, ?, 1, :, -]
[;, double, determinant, =, even, ?, 1, :, -, 1, ;, for, (, int, i, =, 0, ;, i, <]
[., length, ;, double, determinant, =, even, ?, 1, :, -, 1, ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, determinant, *=, lu, []
[?, 1, :, -, 1, ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, )]
[:, -, 1, ;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, determinant]
[;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, determinant, *=, lu, []
[;, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, determinant, *=, lu, []
[;, i, <, m, ;, i, ++, ), {, determinant, *=, lu, [, i, ], [, i, ], ;, }]
[;, i, ++, ), {, determinant, *=, lu, [, i, ], [, i, ], ;, }, return, determinant, ;, }]
[<, m, ;, i, ++, ), {, determinant, *=, lu, [, i, ], [, i, ], ;, }, return, determinant]
[;, i, ++, ), {, determinant, *=, lu, [, i, ], [, i, ], ;, }, return, determinant, ;, }]
[), {, determinant, *=, lu, [, i, ], [, i, ], ;, }, return, determinant, ;, }, }, public, DecompositionSolver]
[++, ), {, determinant, *=, lu, [, i, ], [, i, ], ;, }, return, determinant, ;, }, }, public]
[*=, lu, [, i, ], [, i, ], ;, }, return, determinant, ;, }, }, public, DecompositionSolver, getSolver, (, )]
[;, }, return, determinant, ;, }, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, lu, ,, pivot]
[[, i, ], ;, }, return, determinant, ;, }, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (]
[[, i, ], [, i, ], ;, }, return, determinant, ;, }, }, public, DecompositionSolver, getSolver, (, ), {, return]
[], [, i, ], ;, }, return, determinant, ;, }, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver]
[], ;, }, return, determinant, ;, }, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, lu, ,]
[;, }, }, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, lu, ,, pivot, ,, singular, ), ;]
[;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, double, [, ], [, ], lu, ;, private, final]
[,, pivot, ,, singular, ), ;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, double, [, ], []
[,, singular, ), ;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, double, [, ], [, ], lu]
[), ;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, double, [, ], [, ], lu, ;, private]
[=, lu, ;, this, ., pivot, =, pivot, ;, this, ., singular, =, singular, ;, }, public, boolean, isNonSingular, (]
[., lu, =, lu, ;, this, ., pivot, =, pivot, ;, this, ., singular, =, singular, ;, }, public, boolean]
[;, this, ., pivot, =, pivot, ;, this, ., singular, =, singular, ;, }, public, boolean, isNonSingular, (, ), {]
[=, pivot, ;, this, ., singular, =, singular, ;, }, public, boolean, isNonSingular, (, ), {, return, !, singular, ;]
[., pivot, =, pivot, ;, this, ., singular, =, singular, ;, }, public, boolean, isNonSingular, (, ), {, return, !]
[;, this, ., singular, =, singular, ;, }, public, boolean, isNonSingular, (, ), {, return, !, singular, ;, }, public]
[=, singular, ;, }, public, boolean, isNonSingular, (, ), {, return, !, singular, ;, }, public, RealVector, solve, (, RealVector]
[., singular, =, singular, ;, }, public, boolean, isNonSingular, (, ), {, return, !, singular, ;, }, public, RealVector, solve]
[;, }, public, boolean, isNonSingular, (, ), {, return, !, singular, ;, }, public, RealVector, solve, (, RealVector, b, )]
[;, }, public, RealVector, solve, (, RealVector, b, ), {, final, int, m, =, pivot, ., length, ;, if, (]
[;, }, public, RealVector, solve, (, RealVector, b, ), {, final, int, m, =, pivot, ., length, ;, if, (]
[;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (]
[., length, ;, if, (, b, ., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, .]
[), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, ), ;, }, if, (, singular, )]
[!=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, ), ;, }, if, (]
[., getDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, )]
[), {, throw, new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, ), ;, }, if, (, singular, )]
[;, }, if, (, singular, ), {, throw, new, SingularMatrixException, (, ), ;, }, final, double, [, ], bp, =]
[,, m, ), ;, }, if, (, singular, ), {, throw, new, SingularMatrixException, (, ), ;, }, final, double, []
[., getDimension, (, ), ,, m, ), ;, }, if, (, singular, ), {, throw, new, SingularMatrixException, (, ), ;]
[), ;, }, if, (, singular, ), {, throw, new, SingularMatrixException, (, ), ;, }, final, double, [, ], bp]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, double, [, ], bp, =, new, double, [, m, ]]
[;, }, final, double, [, ], bp, =, new, double, [, m, ], ;, for, (, int, row, =, 0]
[;, for, (, int, row, =, 0, ;, row, <, m, ;, row, ++, ), {, bp, [, row, ]]
[], ;, for, (, int, row, =, 0, ;, row, <, m, ;, row, ++, ), {, bp, [, row]
[;, row, <, m, ;, row, ++, ), {, bp, [, row, ], =, b, ., getEntry, (, pivot, []
[;, row, ++, ), {, bp, [, row, ], =, b, ., getEntry, (, pivot, [, row, ], ), ;]
[<, m, ;, row, ++, ), {, bp, [, row, ], =, b, ., getEntry, (, pivot, [, row, ]]
[;, row, ++, ), {, bp, [, row, ], =, b, ., getEntry, (, pivot, [, row, ], ), ;]
[), {, bp, [, row, ], =, b, ., getEntry, (, pivot, [, row, ], ), ;, }, for, (]
[++, ), {, bp, [, row, ], =, b, ., getEntry, (, pivot, [, row, ], ), ;, }, for]
[=, b, ., getEntry, (, pivot, [, row, ], ), ;, }, for, (, int, col, =, 0, ;, col]
[[, row, ], =, b, ., getEntry, (, pivot, [, row, ], ), ;, }, for, (, int, col, =]
[], =, b, ., getEntry, (, pivot, [, row, ], ), ;, }, for, (, int, col, =, 0, ;]
[;, }, for, (, int, col, =, 0, ;, col, <, m, ;, col, ++, ), {, final, double, bpCol]
[., getEntry, (, pivot, [, row, ], ), ;, }, for, (, int, col, =, 0, ;, col, <, m]
[), ;, }, for, (, int, col, =, 0, ;, col, <, m, ;, col, ++, ), {, final, double]
[[, row, ], ), ;, }, for, (, int, col, =, 0, ;, col, <, m, ;, col, ++, )]
[], ), ;, }, for, (, int, col, =, 0, ;, col, <, m, ;, col, ++, ), {, final]
[;, col, <, m, ;, col, ++, ), {, final, double, bpCol, =, bp, [, col, ], ;, for, (]
[;, col, ++, ), {, final, double, bpCol, =, bp, [, col, ], ;, for, (, int, i, =, col]
[<, m, ;, col, ++, ), {, final, double, bpCol, =, bp, [, col, ], ;, for, (, int, i]
[;, col, ++, ), {, final, double, bpCol, =, bp, [, col, ], ;, for, (, int, i, =, col]
[), {, final, double, bpCol, =, bp, [, col, ], ;, for, (, int, i, =, col, +, 1, ;]
[++, ), {, final, double, bpCol, =, bp, [, col, ], ;, for, (, int, i, =, col, +, 1]
[;, for, (, int, i, =, col, +, 1, ;, i, <, m, ;, i, ++, ), {, bp, []
[[, col, ], ;, for, (, int, i, =, col, +, 1, ;, i, <, m, ;, i, ++, )]
[], ;, for, (, int, i, =, col, +, 1, ;, i, <, m, ;, i, ++, ), {, bp]
[;, i, <, m, ;, i, ++, ), {, bp, [, i, ], -=, bpCol, *, lu, [, i, ]]
[+, 1, ;, i, <, m, ;, i, ++, ), {, bp, [, i, ], -=, bpCol, *, lu, []
[;, i, <, m, ;, i, ++, ), {, bp, [, i, ], -=, bpCol, *, lu, [, i, ]]
[;, i, ++, ), {, bp, [, i, ], -=, bpCol, *, lu, [, i, ], [, col, ], ;]
[<, m, ;, i, ++, ), {, bp, [, i, ], -=, bpCol, *, lu, [, i, ], [, col]
[;, i, ++, ), {, bp, [, i, ], -=, bpCol, *, lu, [, i, ], [, col, ], ;]
[), {, bp, [, i, ], -=, bpCol, *, lu, [, i, ], [, col, ], ;, }, }, for]
[++, ), {, bp, [, i, ], -=, bpCol, *, lu, [, i, ], [, col, ], ;, }, }]
[-=, bpCol, *, lu, [, i, ], [, col, ], ;, }, }, for, (, int, col, =, m, -]
[[, i, ], -=, bpCol, *, lu, [, i, ], [, col, ], ;, }, }, for, (, int, col]
[], -=, bpCol, *, lu, [, i, ], [, col, ], ;, }, }, for, (, int, col, =, m]
[;, }, }, for, (, int, col, =, m, -, 1, ;, col, >=, 0, ;, col, --, ), {]
[*, lu, [, i, ], [, col, ], ;, }, }, for, (, int, col, =, m, -, 1, ;]
[;, }, }, for, (, int, col, =, m, -, 1, ;, col, >=, 0, ;, col, --, ), {]
[[, col, ], ;, }, }, for, (, int, col, =, m, -, 1, ;, col, >=, 0, ;, col]
[[, i, ], [, col, ], ;, }, }, for, (, int, col, =, m, -, 1, ;, col, >=]
[], [, col, ], ;, }, }, for, (, int, col, =, m, -, 1, ;, col, >=, 0, ;]
[], ;, }, }, for, (, int, col, =, m, -, 1, ;, col, >=, 0, ;, col, --, )]
[;, col, >=, 0, ;, col, --, ), {, bp, [, col, ], /=, lu, [, col, ], [, col]
[-, 1, ;, col, >=, 0, ;, col, --, ), {, bp, [, col, ], /=, lu, [, col, ]]
[;, col, >=, 0, ;, col, --, ), {, bp, [, col, ], /=, lu, [, col, ], [, col]
[;, col, --, ), {, bp, [, col, ], /=, lu, [, col, ], [, col, ], ;, final, double]
[>=, 0, ;, col, --, ), {, bp, [, col, ], /=, lu, [, col, ], [, col, ], ;]
[;, col, --, ), {, bp, [, col, ], /=, lu, [, col, ], [, col, ], ;, final, double]
[), {, bp, [, col, ], /=, lu, [, col, ], [, col, ], ;, final, double, bpCol, =, bp]
[--, ), {, bp, [, col, ], /=, lu, [, col, ], [, col, ], ;, final, double, bpCol, =]
[/=, lu, [, col, ], [, col, ], ;, final, double, bpCol, =, bp, [, col, ], ;, for, (]
[[, col, ], /=, lu, [, col, ], [, col, ], ;, final, double, bpCol, =, bp, [, col, ]]
[], /=, lu, [, col, ], [, col, ], ;, final, double, bpCol, =, bp, [, col, ], ;, for]
[;, final, double, bpCol, =, bp, [, col, ], ;, for, (, int, i, =, 0, ;, i, <, col]
[[, col, ], ;, final, double, bpCol, =, bp, [, col, ], ;, for, (, int, i, =, 0, ;]
[[, col, ], [, col, ], ;, final, double, bpCol, =, bp, [, col, ], ;, for, (, int, i]
[], [, col, ], ;, final, double, bpCol, =, bp, [, col, ], ;, for, (, int, i, =, 0]
[], ;, final, double, bpCol, =, bp, [, col, ], ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, col, ;, i, ++, ), {, bp, [, i, ]]
[[, col, ], ;, for, (, int, i, =, 0, ;, i, <, col, ;, i, ++, ), {, bp]
[], ;, for, (, int, i, =, 0, ;, i, <, col, ;, i, ++, ), {, bp, [, i]
[;, i, <, col, ;, i, ++, ), {, bp, [, i, ], -=, bpCol, *, lu, [, i, ]]
[;, i, ++, ), {, bp, [, i, ], -=, bpCol, *, lu, [, i, ], [, col, ], ;]
[<, col, ;, i, ++, ), {, bp, [, i, ], -=, bpCol, *, lu, [, i, ], [, col]
[;, i, ++, ), {, bp, [, i, ], -=, bpCol, *, lu, [, i, ], [, col, ], ;]
[), {, bp, [, i, ], -=, bpCol, *, lu, [, i, ], [, col, ], ;, }, }, return]
[++, ), {, bp, [, i, ], -=, bpCol, *, lu, [, i, ], [, col, ], ;, }, }]
[-=, bpCol, *, lu, [, i, ], [, col, ], ;, }, }, return, new, ArrayRealVector, (, bp, ,, false]
[[, i, ], -=, bpCol, *, lu, [, i, ], [, col, ], ;, }, }, return, new, ArrayRealVector, (]
[], -=, bpCol, *, lu, [, i, ], [, col, ], ;, }, }, return, new, ArrayRealVector, (, bp, ,]
[;, }, }, return, new, ArrayRealVector, (, bp, ,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, )]
[*, lu, [, i, ], [, col, ], ;, }, }, return, new, ArrayRealVector, (, bp, ,, false, ), ;]
[;, }, }, return, new, ArrayRealVector, (, bp, ,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, )]
[[, col, ], ;, }, }, return, new, ArrayRealVector, (, bp, ,, false, ), ;, }, public, RealMatrix, solve, (]
[[, i, ], [, col, ], ;, }, }, return, new, ArrayRealVector, (, bp, ,, false, ), ;, }, public]
[], [, col, ], ;, }, }, return, new, ArrayRealVector, (, bp, ,, false, ), ;, }, public, RealMatrix, solve]
[], ;, }, }, return, new, ArrayRealVector, (, bp, ,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b]
[;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, m, =, pivot, ., length, ;, if, (]
[,, false, ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, m, =, pivot, ., length]
[), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, final, int, m, =, pivot, ., length, ;, if]
[;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (]
[., length, ;, if, (, b, ., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, .]
[), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, ), ;, }, if, (, singular, )]
[!=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, ), ;, }, if, (]
[., getRowDimension, (, ), !=, m, ), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, )]
[), {, throw, new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, ), ;, }, if, (, singular, )]
[;, }, if, (, singular, ), {, throw, new, SingularMatrixException, (, ), ;, }, final, int, nColB, =, b, .]
[,, m, ), ;, }, if, (, singular, ), {, throw, new, SingularMatrixException, (, ), ;, }, final, int, nColB]
[., getRowDimension, (, ), ,, m, ), ;, }, if, (, singular, ), {, throw, new, SingularMatrixException, (, ), ;]
[), ;, }, if, (, singular, ), {, throw, new, SingularMatrixException, (, ), ;, }, final, int, nColB, =, b]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, int, nColB, =, b, ., getColumnDimension, (, ), ;, final]
[;, }, final, int, nColB, =, b, ., getColumnDimension, (, ), ;, final, double, [, ], [, ], bp, =]
[;, final, double, [, ], [, ], bp, =, new, double, [, m, ], [, nColB, ], ;, for, (]
[., getColumnDimension, (, ), ;, final, double, [, ], [, ], bp, =, new, double, [, m, ], [, nColB]
[;, for, (, int, row, =, 0, ;, row, <, m, ;, row, ++, ), {, final, double, [, ]]
[], [, nColB, ], ;, for, (, int, row, =, 0, ;, row, <, m, ;, row, ++, ), {]
[], ;, for, (, int, row, =, 0, ;, row, <, m, ;, row, ++, ), {, final, double, []
[;, row, <, m, ;, row, ++, ), {, final, double, [, ], bpRow, =, bp, [, row, ], ;]
[;, row, ++, ), {, final, double, [, ], bpRow, =, bp, [, row, ], ;, final, int, pRow, =]
[<, m, ;, row, ++, ), {, final, double, [, ], bpRow, =, bp, [, row, ], ;, final, int]
[;, row, ++, ), {, final, double, [, ], bpRow, =, bp, [, row, ], ;, final, int, pRow, =]
[), {, final, double, [, ], bpRow, =, bp, [, row, ], ;, final, int, pRow, =, pivot, [, row]
[++, ), {, final, double, [, ], bpRow, =, bp, [, row, ], ;, final, int, pRow, =, pivot, []
[;, final, int, pRow, =, pivot, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, nColB]
[[, row, ], ;, final, int, pRow, =, pivot, [, row, ], ;, for, (, int, col, =, 0, ;]
[], ;, final, int, pRow, =, pivot, [, row, ], ;, for, (, int, col, =, 0, ;, col, <]
[;, for, (, int, col, =, 0, ;, col, <, nColB, ;, col, ++, ), {, bpRow, [, col, ]]
[[, row, ], ;, for, (, int, col, =, 0, ;, col, <, nColB, ;, col, ++, ), {, bpRow]
[], ;, for, (, int, col, =, 0, ;, col, <, nColB, ;, col, ++, ), {, bpRow, [, col]
[;, col, <, nColB, ;, col, ++, ), {, bpRow, [, col, ], =, b, ., getEntry, (, pRow, ,]
[;, col, ++, ), {, bpRow, [, col, ], =, b, ., getEntry, (, pRow, ,, col, ), ;, }]
[<, nColB, ;, col, ++, ), {, bpRow, [, col, ], =, b, ., getEntry, (, pRow, ,, col, )]
[;, col, ++, ), {, bpRow, [, col, ], =, b, ., getEntry, (, pRow, ,, col, ), ;, }]
[), {, bpRow, [, col, ], =, b, ., getEntry, (, pRow, ,, col, ), ;, }, }, for, (]
[++, ), {, bpRow, [, col, ], =, b, ., getEntry, (, pRow, ,, col, ), ;, }, }, for]
[=, b, ., getEntry, (, pRow, ,, col, ), ;, }, }, for, (, int, col, =, 0, ;, col]
[[, col, ], =, b, ., getEntry, (, pRow, ,, col, ), ;, }, }, for, (, int, col, =]
[], =, b, ., getEntry, (, pRow, ,, col, ), ;, }, }, for, (, int, col, =, 0, ;]
[;, }, }, for, (, int, col, =, 0, ;, col, <, m, ;, col, ++, ), {, final, double]
[., getEntry, (, pRow, ,, col, ), ;, }, }, for, (, int, col, =, 0, ;, col, <, m]
[,, col, ), ;, }, }, for, (, int, col, =, 0, ;, col, <, m, ;, col, ++, )]
[), ;, }, }, for, (, int, col, =, 0, ;, col, <, m, ;, col, ++, ), {, final]
[;, col, <, m, ;, col, ++, ), {, final, double, [, ], bpCol, =, bp, [, col, ], ;]
[;, col, ++, ), {, final, double, [, ], bpCol, =, bp, [, col, ], ;, for, (, int, i]
[<, m, ;, col, ++, ), {, final, double, [, ], bpCol, =, bp, [, col, ], ;, for, (]
[;, col, ++, ), {, final, double, [, ], bpCol, =, bp, [, col, ], ;, for, (, int, i]
[), {, final, double, [, ], bpCol, =, bp, [, col, ], ;, for, (, int, i, =, col, +]
[++, ), {, final, double, [, ], bpCol, =, bp, [, col, ], ;, for, (, int, i, =, col]
[;, for, (, int, i, =, col, +, 1, ;, i, <, m, ;, i, ++, ), {, final, double]
[[, col, ], ;, for, (, int, i, =, col, +, 1, ;, i, <, m, ;, i, ++, )]
[], ;, for, (, int, i, =, col, +, 1, ;, i, <, m, ;, i, ++, ), {, final]
[;, i, <, m, ;, i, ++, ), {, final, double, [, ], bpI, =, bp, [, i, ], ;]
[+, 1, ;, i, <, m, ;, i, ++, ), {, final, double, [, ], bpI, =, bp, [, i]
[;, i, <, m, ;, i, ++, ), {, final, double, [, ], bpI, =, bp, [, i, ], ;]
[;, i, ++, ), {, final, double, [, ], bpI, =, bp, [, i, ], ;, final, double, luICol, =]
[<, m, ;, i, ++, ), {, final, double, [, ], bpI, =, bp, [, i, ], ;, final, double]
[;, i, ++, ), {, final, double, [, ], bpI, =, bp, [, i, ], ;, final, double, luICol, =]
[), {, final, double, [, ], bpI, =, bp, [, i, ], ;, final, double, luICol, =, lu, [, i]
[++, ), {, final, double, [, ], bpI, =, bp, [, i, ], ;, final, double, luICol, =, lu, []
[;, final, double, luICol, =, lu, [, i, ], [, col, ], ;, for, (, int, j, =, 0, ;]
[[, i, ], ;, final, double, luICol, =, lu, [, i, ], [, col, ], ;, for, (, int, j]
[], ;, final, double, luICol, =, lu, [, i, ], [, col, ], ;, for, (, int, j, =, 0]
[;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++, ), {, bpI, [, j, ]]
[[, col, ], ;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++, ), {, bpI]
[[, i, ], [, col, ], ;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++]
[], [, col, ], ;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++, ), {]
[], ;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++, ), {, bpI, [, j]
[;, j, <, nColB, ;, j, ++, ), {, bpI, [, j, ], -=, bpCol, [, j, ], *, luICol]
[;, j, ++, ), {, bpI, [, j, ], -=, bpCol, [, j, ], *, luICol, ;, }, }, }]
[<, nColB, ;, j, ++, ), {, bpI, [, j, ], -=, bpCol, [, j, ], *, luICol, ;, }]
[;, j, ++, ), {, bpI, [, j, ], -=, bpCol, [, j, ], *, luICol, ;, }, }, }]
[), {, bpI, [, j, ], -=, bpCol, [, j, ], *, luICol, ;, }, }, }, for, (, int]
[++, ), {, bpI, [, j, ], -=, bpCol, [, j, ], *, luICol, ;, }, }, }, for, (]
[-=, bpCol, [, j, ], *, luICol, ;, }, }, }, for, (, int, col, =, m, -, 1, ;]
[[, j, ], -=, bpCol, [, j, ], *, luICol, ;, }, }, }, for, (, int, col, =, m]
[], -=, bpCol, [, j, ], *, luICol, ;, }, }, }, for, (, int, col, =, m, -, 1]
[;, }, }, }, for, (, int, col, =, m, -, 1, ;, col, >=, 0, ;, col, --, )]
[*, luICol, ;, }, }, }, for, (, int, col, =, m, -, 1, ;, col, >=, 0, ;, col]
[[, j, ], *, luICol, ;, }, }, }, for, (, int, col, =, m, -, 1, ;, col, >=]
[], *, luICol, ;, }, }, }, for, (, int, col, =, m, -, 1, ;, col, >=, 0, ;]
[;, }, }, }, for, (, int, col, =, m, -, 1, ;, col, >=, 0, ;, col, --, )]
[;, col, >=, 0, ;, col, --, ), {, final, double, [, ], bpCol, =, bp, [, col, ], ;]
[-, 1, ;, col, >=, 0, ;, col, --, ), {, final, double, [, ], bpCol, =, bp, [, col]
[;, col, >=, 0, ;, col, --, ), {, final, double, [, ], bpCol, =, bp, [, col, ], ;]
[;, col, --, ), {, final, double, [, ], bpCol, =, bp, [, col, ], ;, final, double, luDiag, =]
[>=, 0, ;, col, --, ), {, final, double, [, ], bpCol, =, bp, [, col, ], ;, final, double]
[;, col, --, ), {, final, double, [, ], bpCol, =, bp, [, col, ], ;, final, double, luDiag, =]
[), {, final, double, [, ], bpCol, =, bp, [, col, ], ;, final, double, luDiag, =, lu, [, col]
[--, ), {, final, double, [, ], bpCol, =, bp, [, col, ], ;, final, double, luDiag, =, lu, []
[;, final, double, luDiag, =, lu, [, col, ], [, col, ], ;, for, (, int, j, =, 0, ;]
[[, col, ], ;, final, double, luDiag, =, lu, [, col, ], [, col, ], ;, for, (, int, j]
[], ;, final, double, luDiag, =, lu, [, col, ], [, col, ], ;, for, (, int, j, =, 0]
[;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++, ), {, bpCol, [, j, ]]
[[, col, ], ;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++, ), {, bpCol]
[[, col, ], [, col, ], ;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++]
[], [, col, ], ;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++, ), {]
[], ;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++, ), {, bpCol, [, j]
[;, j, <, nColB, ;, j, ++, ), {, bpCol, [, j, ], /=, luDiag, ;, }, for, (, int]
[;, j, ++, ), {, bpCol, [, j, ], /=, luDiag, ;, }, for, (, int, i, =, 0, ;]
[<, nColB, ;, j, ++, ), {, bpCol, [, j, ], /=, luDiag, ;, }, for, (, int, i, =]
[;, j, ++, ), {, bpCol, [, j, ], /=, luDiag, ;, }, for, (, int, i, =, 0, ;]
[), {, bpCol, [, j, ], /=, luDiag, ;, }, for, (, int, i, =, 0, ;, i, <, col]
[++, ), {, bpCol, [, j, ], /=, luDiag, ;, }, for, (, int, i, =, 0, ;, i, <]
[/=, luDiag, ;, }, for, (, int, i, =, 0, ;, i, <, col, ;, i, ++, ), {, final]
[[, j, ], /=, luDiag, ;, }, for, (, int, i, =, 0, ;, i, <, col, ;, i, ++]
[], /=, luDiag, ;, }, for, (, int, i, =, 0, ;, i, <, col, ;, i, ++, ), {]
[;, }, for, (, int, i, =, 0, ;, i, <, col, ;, i, ++, ), {, final, double, []
[;, i, <, col, ;, i, ++, ), {, final, double, [, ], bpI, =, bp, [, i, ], ;]
[;, i, ++, ), {, final, double, [, ], bpI, =, bp, [, i, ], ;, final, double, luICol, =]
[<, col, ;, i, ++, ), {, final, double, [, ], bpI, =, bp, [, i, ], ;, final, double]
[;, i, ++, ), {, final, double, [, ], bpI, =, bp, [, i, ], ;, final, double, luICol, =]
[), {, final, double, [, ], bpI, =, bp, [, i, ], ;, final, double, luICol, =, lu, [, i]
[++, ), {, final, double, [, ], bpI, =, bp, [, i, ], ;, final, double, luICol, =, lu, []
[;, final, double, luICol, =, lu, [, i, ], [, col, ], ;, for, (, int, j, =, 0, ;]
[[, i, ], ;, final, double, luICol, =, lu, [, i, ], [, col, ], ;, for, (, int, j]
[], ;, final, double, luICol, =, lu, [, i, ], [, col, ], ;, for, (, int, j, =, 0]
[;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++, ), {, bpI, [, j, ]]
[[, col, ], ;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++, ), {, bpI]
[[, i, ], [, col, ], ;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++]
[], [, col, ], ;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++, ), {]
[], ;, for, (, int, j, =, 0, ;, j, <, nColB, ;, j, ++, ), {, bpI, [, j]
[;, j, <, nColB, ;, j, ++, ), {, bpI, [, j, ], -=, bpCol, [, j, ], *, luICol]
[;, j, ++, ), {, bpI, [, j, ], -=, bpCol, [, j, ], *, luICol, ;, }, }, }]
[<, nColB, ;, j, ++, ), {, bpI, [, j, ], -=, bpCol, [, j, ], *, luICol, ;, }]
[;, j, ++, ), {, bpI, [, j, ], -=, bpCol, [, j, ], *, luICol, ;, }, }, }]
[), {, bpI, [, j, ], -=, bpCol, [, j, ], *, luICol, ;, }, }, }, return, new, Array2DRowRealMatrix]
[++, ), {, bpI, [, j, ], -=, bpCol, [, j, ], *, luICol, ;, }, }, }, return, new]
[-=, bpCol, [, j, ], *, luICol, ;, }, }, }, return, new, Array2DRowRealMatrix, (, bp, ,, false, ), ;]
[[, j, ], -=, bpCol, [, j, ], *, luICol, ;, }, }, }, return, new, Array2DRowRealMatrix, (, bp, ,]
[], -=, bpCol, [, j, ], *, luICol, ;, }, }, }, return, new, Array2DRowRealMatrix, (, bp, ,, false, )]
[;, }, }, }, return, new, Array2DRowRealMatrix, (, bp, ,, false, ), ;, }, public, RealMatrix, getInverse, (, ), {]
[*, luICol, ;, }, }, }, return, new, Array2DRowRealMatrix, (, bp, ,, false, ), ;, }, public, RealMatrix, getInverse, (]
[[, j, ], *, luICol, ;, }, }, }, return, new, Array2DRowRealMatrix, (, bp, ,, false, ), ;, }, public]
[], *, luICol, ;, }, }, }, return, new, Array2DRowRealMatrix, (, bp, ,, false, ), ;, }, public, RealMatrix, getInverse]
[;, }, }, }, return, new, Array2DRowRealMatrix, (, bp, ,, false, ), ;, }, public, RealMatrix, getInverse, (, ), {]
[;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (, pivot, ., length, ), )]
[,, false, ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (, pivot, .]
[), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (, pivot, ., length, )]
[;, }, }, }]
[), ;, }, }, }]
[., createRealIdentityMatrix, (, pivot, ., length, ), ), ;, }, }, }]
[), ), ;, }, }, }]
[., length, ), ), ;, }, }, }]
