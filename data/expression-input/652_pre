[[, ], >, topDiagonal, ;, private, final, List, <, double, [, ], >, bottomDiagonal, ;, public, HermiteInterpolator, (, ), {]
[[, ], >, topDiagonal, ;, private, final, List, <, double, [, ], >, bottomDiagonal, ;, public, HermiteInterpolator, (, ), {]
[;, private, final, List, <, double, [, ], >, bottomDiagonal, ;, public, HermiteInterpolator, (, ), {, this, ., abscissae, =]
[>, bottomDiagonal, ;, public, HermiteInterpolator, (, ), {, this, ., abscissae, =, new, ArrayList, <, Double, >, (, ), ;]
[>, bottomDiagonal, ;, public, HermiteInterpolator, (, ), {, this, ., abscissae, =, new, ArrayList, <, Double, >, (, ), ;]
[HermiteInterpolator, (, ), {, this, ., abscissae, =, new, ArrayList, <, Double, >, (, ), ;, this, ., topDiagonal, =]
[<, Double, >, (, ), ;, this, ., topDiagonal, =, new, ArrayList, <, double, [, ], >, (, ), ;]
[<, Double, >, (, ), ;, this, ., topDiagonal, =, new, ArrayList, <, double, [, ], >, (, ), ;]
[), ;, this, ., topDiagonal, =, new, ArrayList, <, double, [, ], >, (, ), ;, this, ., bottomDiagonal, =]
[double, x, ,, final, double, [, ], ..., value, ), throws, ZeroException, ,, MathArithmeticException, {, for, (, int, i, =]
[,, final, double, [, ], ..., value, ), throws, ZeroException, ,, MathArithmeticException, {, for, (, int, i, =, 0, ;]
[,, final, double, [, ], ..., value, ), throws, ZeroException, ,, MathArithmeticException, {, for, (, int, i, =, 0, ;]
[double, [, ], ..., value, ), throws, ZeroException, ,, MathArithmeticException, {, for, (, int, i, =, 0, ;, i, <]
[double, [, ], ..., value, ), throws, ZeroException, ,, MathArithmeticException, {, for, (, int, i, =, 0, ;, i, <]
[value, ), throws, ZeroException, ,, MathArithmeticException, {, for, (, int, i, =, 0, ;, i, <, value, ., length, ;]
[), throws, ZeroException, ,, MathArithmeticException, {, for, (, int, i, =, 0, ;, i, <, value, ., length, ;, ++]
[i, =, 0, ;, i, <, value, ., length, ;, ++, i, ), {, final, double, [, ], y, =]
[i, =, 0, ;, i, <, value, ., length, ;, ++, i, ), {, final, double, [, ], y, =]
[i, =, 0, ;, i, <, value, ., length, ;, ++, i, ), {, final, double, [, ], y, =]
[0, ;, i, <, value, ., length, ;, ++, i, ), {, final, double, [, ], y, =, value, []
[i, ), {, final, double, [, ], y, =, value, [, i, ], ., clone, (, ), ;, if, (]
[i, ), {, final, double, [, ], y, =, value, [, i, ], ., clone, (, ), ;, if, (]
[{, final, double, [, ], y, =, value, [, i, ], ., clone, (, ), ;, if, (, i, >]
[=, value, [, i, ], ., clone, (, ), ;, if, (, i, >, 1, ), {, double, inv, =]
[=, value, [, i, ], ., clone, (, ), ;, if, (, i, >, 1, ), {, double, inv, =]
[[, i, ], ., clone, (, ), ;, if, (, i, >, 1, ), {, double, inv, =, 1.0, /]
[[, i, ], ., clone, (, ), ;, if, (, i, >, 1, ), {, double, inv, =, 1.0, /]
[clone, (, ), ;, if, (, i, >, 1, ), {, double, inv, =, 1.0, /, CombinatoricsUtils, ., factorial, (]
[1, ), {, double, inv, =, 1.0, /, CombinatoricsUtils, ., factorial, (, i, ), ;, for, (, int, j, =]
[{, double, inv, =, 1.0, /, CombinatoricsUtils, ., factorial, (, i, ), ;, for, (, int, j, =, 0, ;]
[{, double, inv, =, 1.0, /, CombinatoricsUtils, ., factorial, (, i, ), ;, for, (, int, j, =, 0, ;]
[inv, =, 1.0, /, CombinatoricsUtils, ., factorial, (, i, ), ;, for, (, int, j, =, 0, ;, j, <]
[inv, =, 1.0, /, CombinatoricsUtils, ., factorial, (, i, ), ;, for, (, int, j, =, 0, ;, j, <]
[CombinatoricsUtils, ., factorial, (, i, ), ;, for, (, int, j, =, 0, ;, j, <, y, ., length, ;]
[., factorial, (, i, ), ;, for, (, int, j, =, 0, ;, j, <, y, ., length, ;, ++]
[i, ), ;, for, (, int, j, =, 0, ;, j, <, y, ., length, ;, ++, j, ), {]
[i, ), ;, for, (, int, j, =, 0, ;, j, <, y, ., length, ;, ++, j, ), {]
[;, for, (, int, j, =, 0, ;, j, <, y, ., length, ;, ++, j, ), {, y, []
[int, j, =, 0, ;, j, <, y, ., length, ;, ++, j, ), {, y, [, j, ], *=]
[., length, ;, ++, j, ), {, y, [, j, ], *=, inv, ;, }, }, final, int, n, =]
[., length, ;, ++, j, ), {, y, [, j, ], *=, inv, ;, }, }, final, int, n, =]
[{, y, [, j, ], *=, inv, ;, }, }, final, int, n, =, abscissae, ., size, (, ), ;]
[{, y, [, j, ], *=, inv, ;, }, }, final, int, n, =, abscissae, ., size, (, ), ;]
[], *=, inv, ;, }, }, final, int, n, =, abscissae, ., size, (, ), ;, bottomDiagonal, ., add, (]
[], *=, inv, ;, }, }, final, int, n, =, abscissae, ., size, (, ), ;, bottomDiagonal, ., add, (]
[inv, ;, }, }, final, int, n, =, abscissae, ., size, (, ), ;, bottomDiagonal, ., add, (, n, -]
[}, }, final, int, n, =, abscissae, ., size, (, ), ;, bottomDiagonal, ., add, (, n, -, i, ,]
[size, (, ), ;, bottomDiagonal, ., add, (, n, -, i, ,, y, ), ;, double, [, ], bottom0, =]
[(, n, -, i, ,, y, ), ;, double, [, ], bottom0, =, y, ;, for, (, int, j, =]
[-, i, ,, y, ), ;, double, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;]
[-, i, ,, y, ), ;, double, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;]
[,, y, ), ;, double, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;, j, <]
[), ;, double, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;, j, <, n, ;]
[;, double, [, ], bottom0, =, y, ;, for, (, int, j, =, i, ;, j, <, n, ;, ++]
[(, int, j, =, i, ;, j, <, n, ;, ++, j, ), {, final, double, [, ], bottom1, =]
[(, int, j, =, i, ;, j, <, n, ;, ++, j, ), {, final, double, [, ], bottom1, =]
[i, ;, j, <, n, ;, ++, j, ), {, final, double, [, ], bottom1, =, bottomDiagonal, ., get, (]
[i, ;, j, <, n, ;, ++, j, ), {, final, double, [, ], bottom1, =, bottomDiagonal, ., get, (]
[j, <, n, ;, ++, j, ), {, final, double, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -]
[<, n, ;, ++, j, ), {, final, double, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -, (]
[<, n, ;, ++, j, ), {, final, double, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -, (]
[;, ++, j, ), {, final, double, [, ], bottom1, =, bottomDiagonal, ., get, (, n, -, (, j, +]
[], bottom1, =, bottomDiagonal, ., get, (, n, -, (, j, +, 1, ), ), ;, final, double, inv, =]
[], bottom1, =, bottomDiagonal, ., get, (, n, -, (, j, +, 1, ), ), ;, final, double, inv, =]
[=, bottomDiagonal, ., get, (, n, -, (, j, +, 1, ), ), ;, final, double, inv, =, 1.0, /]
[bottomDiagonal, ., get, (, n, -, (, j, +, 1, ), ), ;, final, double, inv, =, 1.0, /, (]
[bottomDiagonal, ., get, (, n, -, (, j, +, 1, ), ), ;, final, double, inv, =, 1.0, /, (]
[get, (, n, -, (, j, +, 1, ), ), ;, final, double, inv, =, 1.0, /, (, x, -]
[get, (, n, -, (, j, +, 1, ), ), ;, final, double, inv, =, 1.0, /, (, x, -]
[(, j, +, 1, ), ), ;, final, double, inv, =, 1.0, /, (, x, -, abscissae, ., get, (]
[(, j, +, 1, ), ), ;, final, double, inv, =, 1.0, /, (, x, -, abscissae, ., get, (]
[+, 1, ), ), ;, final, double, inv, =, 1.0, /, (, x, -, abscissae, ., get, (, n, -]
[1, ), ), ;, final, double, inv, =, 1.0, /, (, x, -, abscissae, ., get, (, n, -, (]
[1, ), ), ;, final, double, inv, =, 1.0, /, (, x, -, abscissae, ., get, (, n, -, (]
[), ;, final, double, inv, =, 1.0, /, (, x, -, abscissae, ., get, (, n, -, (, j, +]
[/, (, x, -, abscissae, ., get, (, n, -, (, j, +, 1, ), ), ), ;, if, (]
[/, (, x, -, abscissae, ., get, (, n, -, (, j, +, 1, ), ), ), ;, if, (]
[abscissae, ., get, (, n, -, (, j, +, 1, ), ), ), ;, if, (, Double, ., isInfinite, (]
[-, (, j, +, 1, ), ), ), ;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw]
[+, 1, ), ), ), ;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw, new, ZeroException, (]
[+, 1, ), ), ), ;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw, new, ZeroException, (]
[), ;, if, (, Double, ., isInfinite, (, inv, ), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,]
[), ), {, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, for, (, int, k, =]
[{, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, for, (, int, k, =, 0, ;]
[{, throw, new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, for, (, int, k, =, 0, ;]
[new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, for, (, int, k, =, 0, ;, k, <]
[new, ZeroException, (, LocalizedFormats, ., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, for, (, int, k, =, 0, ;, k, <]
[., DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, for, (, int, k, =, 0, ;, k, <, y, ., length, ;]
[DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, ,, x, ), ;, }, for, (, int, k, =, 0, ;, k, <, y, ., length, ;, ++]
[), ;, }, for, (, int, k, =, 0, ;, k, <, y, ., length, ;, ++, k, ), {]
[), ;, }, for, (, int, k, =, 0, ;, k, <, y, ., length, ;, ++, k, ), {]
[}, for, (, int, k, =, 0, ;, k, <, y, ., length, ;, ++, k, ), {, bottom1, []
[int, k, =, 0, ;, k, <, y, ., length, ;, ++, k, ), {, bottom1, [, k, ], =]
[int, k, =, 0, ;, k, <, y, ., length, ;, ++, k, ), {, bottom1, [, k, ], =]
[=, 0, ;, k, <, y, ., length, ;, ++, k, ), {, bottom1, [, k, ], =, inv, *]
[0, ;, k, <, y, ., length, ;, ++, k, ), {, bottom1, [, k, ], =, inv, *, (]
[0, ;, k, <, y, ., length, ;, ++, k, ), {, bottom1, [, k, ], =, inv, *, (]
[0, ;, k, <, y, ., length, ;, ++, k, ), {, bottom1, [, k, ], =, inv, *, (]
[k, <, y, ., length, ;, ++, k, ), {, bottom1, [, k, ], =, inv, *, (, bottom0, []
[., length, ;, ++, k, ), {, bottom1, [, k, ], =, inv, *, (, bottom0, [, k, ], -]
[., length, ;, ++, k, ), {, bottom1, [, k, ], =, inv, *, (, bottom0, [, k, ], -]
[;, ++, k, ), {, bottom1, [, k, ], =, inv, *, (, bottom0, [, k, ], -, bottom1, []
[bottom1, [, k, ], =, inv, *, (, bottom0, [, k, ], -, bottom1, [, k, ], ), ;, }]
[k, ], =, inv, *, (, bottom0, [, k, ], -, bottom1, [, k, ], ), ;, }, bottom0, =]
[inv, *, (, bottom0, [, k, ], -, bottom1, [, k, ], ), ;, }, bottom0, =, bottom1, ;, }]
[inv, *, (, bottom0, [, k, ], -, bottom1, [, k, ], ), ;, }, bottom0, =, bottom1, ;, }]
[[, k, ], -, bottom1, [, k, ], ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (]
[[, k, ], -, bottom1, [, k, ], ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (]
[], ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;]
[], ), ;, }, bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;]
[bottom0, =, bottom1, ;, }, topDiagonal, ., add, (, bottom0, ., clone, (, ), ), ;, abscissae, ., add, (]
[;, abscissae, ., add, (, x, ), ;, }, }, public, PolynomialFunction, [, ], getPolynomials, (, ), throws, NoDataException, {]
[}, }, public, PolynomialFunction, [, ], getPolynomials, (, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final, PolynomialFunction, zero, =]
[public, PolynomialFunction, [, ], getPolynomials, (, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final, PolynomialFunction, zero, =, polynomial, (]
[NoDataException, {, checkInterpolation, (, ), ;, final, PolynomialFunction, zero, =, polynomial, (, 0, ), ;, PolynomialFunction, [, ], polynomials, =]
[(, ), ;, final, PolynomialFunction, zero, =, polynomial, (, 0, ), ;, PolynomialFunction, [, ], polynomials, =, new, PolynomialFunction, []
[(, ), ;, final, PolynomialFunction, zero, =, polynomial, (, 0, ), ;, PolynomialFunction, [, ], polynomials, =, new, PolynomialFunction, []
[(, ), ;, final, PolynomialFunction, zero, =, polynomial, (, 0, ), ;, PolynomialFunction, [, ], polynomials, =, new, PolynomialFunction, []
[PolynomialFunction, zero, =, polynomial, (, 0, ), ;, PolynomialFunction, [, ], polynomials, =, new, PolynomialFunction, [, topDiagonal, ., get, (]
[polynomials, =, new, PolynomialFunction, [, topDiagonal, ., get, (, 0, ), ., length, ], ;, for, (, int, i, =]
[new, PolynomialFunction, [, topDiagonal, ., get, (, 0, ), ., length, ], ;, for, (, int, i, =, 0, ;]
[new, PolynomialFunction, [, topDiagonal, ., get, (, 0, ), ., length, ], ;, for, (, int, i, =, 0, ;]
[[, topDiagonal, ., get, (, 0, ), ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[[, topDiagonal, ., get, (, 0, ), ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[(, 0, ), ., length, ], ;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;]
[0, ), ., length, ], ;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, ), {]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, ), {, polynomials, []
[int, i, =, 0, ;, i, <, polynomials, ., length, ;, ++, i, ), {, polynomials, [, i, ], =]
[<, polynomials, ., length, ;, ++, i, ), {, polynomials, [, i, ], =, zero, ;, }, PolynomialFunction, coeff, =]
[., length, ;, ++, i, ), {, polynomials, [, i, ], =, zero, ;, }, PolynomialFunction, coeff, =, polynomial, (]
[[, i, ], =, zero, ;, }, PolynomialFunction, coeff, =, polynomial, (, 1, ), ;, for, (, int, i, =]
[], =, zero, ;, }, PolynomialFunction, coeff, =, polynomial, (, 1, ), ;, for, (, int, i, =, 0, ;]
[], =, zero, ;, }, PolynomialFunction, coeff, =, polynomial, (, 1, ), ;, for, (, int, i, =, 0, ;]
[zero, ;, }, PolynomialFunction, coeff, =, polynomial, (, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[zero, ;, }, PolynomialFunction, coeff, =, polynomial, (, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[polynomial, (, 1, ), ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;]
[(, 1, ), ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++]
[=, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], tdi, =]
[=, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], tdi, =]
[<, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], tdi, =, topDiagonal, ., get, (]
[i, ), {, double, [, ], tdi, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =]
[{, double, [, ], tdi, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;]
[{, double, [, ], tdi, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;]
[[, ], tdi, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <]
[[, ], tdi, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <]
[topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <, polynomials, ., length, ;]
[., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <, polynomials, ., length, ;, ++]
[i, ), ;, for, (, int, k, =, 0, ;, k, <, polynomials, ., length, ;, ++, k, ), {]
[i, ), ;, for, (, int, k, =, 0, ;, k, <, polynomials, ., length, ;, ++, k, ), {]
[;, for, (, int, k, =, 0, ;, k, <, polynomials, ., length, ;, ++, k, ), {, polynomials, []
[int, k, =, 0, ;, k, <, polynomials, ., length, ;, ++, k, ), {, polynomials, [, k, ], =]
[int, k, =, 0, ;, k, <, polynomials, ., length, ;, ++, k, ), {, polynomials, [, k, ], =]
[int, k, =, 0, ;, k, <, polynomials, ., length, ;, ++, k, ), {, polynomials, [, k, ], =]
[=, 0, ;, k, <, polynomials, ., length, ;, ++, k, ), {, polynomials, [, k, ], =, polynomials, []
[polynomials, ., length, ;, ++, k, ), {, polynomials, [, k, ], =, polynomials, [, k, ], ., add, (]
[polynomials, ., length, ;, ++, k, ), {, polynomials, [, k, ], =, polynomials, [, k, ], ., add, (]
[++, k, ), {, polynomials, [, k, ], =, polynomials, [, k, ], ., add, (, coeff, ., multiply, (]
[), {, polynomials, [, k, ], =, polynomials, [, k, ], ., add, (, coeff, ., multiply, (, polynomial, (]
[), {, polynomials, [, k, ], =, polynomials, [, k, ], ., add, (, coeff, ., multiply, (, polynomial, (]
[polynomials, [, k, ], =, polynomials, [, k, ], ., add, (, coeff, ., multiply, (, polynomial, (, tdi, []
[k, ], ., add, (, coeff, ., multiply, (, polynomial, (, tdi, [, k, ], ), ), ), ;, }]
[., add, (, coeff, ., multiply, (, polynomial, (, tdi, [, k, ], ), ), ), ;, }, coeff, =]
[., add, (, coeff, ., multiply, (, polynomial, (, tdi, [, k, ], ), ), ), ;, }, coeff, =]
[., multiply, (, polynomial, (, tdi, [, k, ], ), ), ), ;, }, coeff, =, coeff, ., multiply, (]
[(, polynomial, (, tdi, [, k, ], ), ), ), ;, }, coeff, =, coeff, ., multiply, (, polynomial, (]
[polynomial, (, tdi, [, k, ], ), ), ), ;, }, coeff, =, coeff, ., multiply, (, polynomial, (, -]
[polynomial, (, tdi, [, k, ], ), ), ), ;, }, coeff, =, coeff, ., multiply, (, polynomial, (, -]
[k, ], ), ), ), ;, }, coeff, =, coeff, ., multiply, (, polynomial, (, -, abscissae, ., get, (]
[), ), ;, }, coeff, =, coeff, ., multiply, (, polynomial, (, -, abscissae, ., get, (, i, ), ,]
[coeff, ., multiply, (, polynomial, (, -, abscissae, ., get, (, i, ), ,, 1.0, ), ), ;, }, return]
[), ), ;, }, return, polynomials, ;, }, public, double, [, ], value, (, double, x, ), throws, NoDataException, {]
[[, ], value, (, double, x, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final, double, [, ], value, =]
[(, double, x, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final, double, [, ], value, =, new, double, []
[(, double, x, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final, double, [, ], value, =, new, double, []
[(, double, x, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final, double, [, ], value, =, new, double, []
[throws, NoDataException, {, checkInterpolation, (, ), ;, final, double, [, ], value, =, new, double, [, topDiagonal, ., get, (]
[[, ], value, =, new, double, [, topDiagonal, ., get, (, 0, ), ., length, ], ;, double, valueCoeff, =]
[topDiagonal, ., get, (, 0, ), ., length, ], ;, double, valueCoeff, =, 1, ;, for, (, int, i, =]
[get, (, 0, ), ., length, ], ;, double, valueCoeff, =, 1, ;, for, (, int, i, =, 0, ;]
[get, (, 0, ), ., length, ], ;, double, valueCoeff, =, 1, ;, for, (, int, i, =, 0, ;]
[0, ), ., length, ], ;, double, valueCoeff, =, 1, ;, for, (, int, i, =, 0, ;, i, <]
[0, ), ., length, ], ;, double, valueCoeff, =, 1, ;, for, (, int, i, =, 0, ;, i, <]
[double, valueCoeff, =, 1, ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;]
[valueCoeff, =, 1, ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++]
[=, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], dividedDifference, =]
[=, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], dividedDifference, =]
[<, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (]
[i, ), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =]
[{, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;]
[{, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;]
[[, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <]
[[, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <]
[topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;]
[., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++]
[i, ), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {]
[i, ), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {]
[;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value, []
[int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value, [, k, ], +=]
[int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value, [, k, ], +=]
[int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value, [, k, ], +=]
[=, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value, [, k, ], +=, dividedDifference, []
[k, <, value, ., length, ;, ++, k, ), {, value, [, k, ], +=, dividedDifference, [, k, ], *]
[k, ), {, value, [, k, ], +=, dividedDifference, [, k, ], *, valueCoeff, ;, }, final, double, deltaX, =]
[k, ), {, value, [, k, ], +=, dividedDifference, [, k, ], *, valueCoeff, ;, }, final, double, deltaX, =]
[{, value, [, k, ], +=, dividedDifference, [, k, ], *, valueCoeff, ;, }, final, double, deltaX, =, x, -]
[{, value, [, k, ], +=, dividedDifference, [, k, ], *, valueCoeff, ;, }, final, double, deltaX, =, x, -]
[], +=, dividedDifference, [, k, ], *, valueCoeff, ;, }, final, double, deltaX, =, x, -, abscissae, ., get, (]
[[, k, ], *, valueCoeff, ;, }, final, double, deltaX, =, x, -, abscissae, ., get, (, i, ), ;]
[], *, valueCoeff, ;, }, final, double, deltaX, =, x, -, abscissae, ., get, (, i, ), ;, valueCoeff, *=]
[}, final, double, deltaX, =, x, -, abscissae, ., get, (, i, ), ;, valueCoeff, *=, deltaX, ;, }, return]
[deltaX, ;, }, return, value, ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, x, ), throws, NoDataException, {]
[], value, (, final, DerivativeStructure, x, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final, DerivativeStructure, [, ], value, =]
[final, DerivativeStructure, x, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, []
[final, DerivativeStructure, x, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, []
[final, DerivativeStructure, x, ), throws, NoDataException, {, checkInterpolation, (, ), ;, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, []
[throws, NoDataException, {, checkInterpolation, (, ), ;, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, [, topDiagonal, ., get, (]
[;, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, [, topDiagonal, ., get, (, 0, ), ., length, ], ;]
[;, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, [, topDiagonal, ., get, (, 0, ), ., length, ], ;]
[], value, =, new, DerivativeStructure, [, topDiagonal, ., get, (, 0, ), ., length, ], ;, Arrays, ., fill, (]
[=, new, DerivativeStructure, [, topDiagonal, ., get, (, 0, ), ., length, ], ;, Arrays, ., fill, (, value, ,]
[=, new, DerivativeStructure, [, topDiagonal, ., get, (, 0, ), ., length, ], ;, Arrays, ., fill, (, value, ,]
[=, new, DerivativeStructure, [, topDiagonal, ., get, (, 0, ), ., length, ], ;, Arrays, ., fill, (, value, ,]
[Arrays, ., fill, (, value, ,, x, ., getField, (, ), ., getZero, (, ), ), ;, DerivativeStructure, valueCoeff, =]
[Arrays, ., fill, (, value, ,, x, ., getField, (, ), ., getZero, (, ), ), ;, DerivativeStructure, valueCoeff, =]
[Arrays, ., fill, (, value, ,, x, ., getField, (, ), ., getZero, (, ), ), ;, DerivativeStructure, valueCoeff, =]
[), ;, DerivativeStructure, valueCoeff, =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =]
[DerivativeStructure, valueCoeff, =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0, ;]
[DerivativeStructure, valueCoeff, =, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0, ;]
[=, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, x, ., getField, (, ), ., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[., getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;]
[getOne, (, ), ;, for, (, int, i, =, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++]
[=, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], dividedDifference, =]
[=, 0, ;, i, <, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], dividedDifference, =]
[<, topDiagonal, ., size, (, ), ;, ++, i, ), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (]
[i, ), {, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =]
[{, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;]
[{, double, [, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;]
[[, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <]
[[, ], dividedDifference, =, topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <]
[topDiagonal, ., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;]
[., get, (, i, ), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++]
[i, ), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {]
[i, ), ;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {]
[;, for, (, int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value, []
[int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value, [, k, ], =]
[int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value, [, k, ], =]
[int, k, =, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value, [, k, ], =]
[=, 0, ;, k, <, value, ., length, ;, ++, k, ), {, value, [, k, ], =, value, []
[value, ., length, ;, ++, k, ), {, value, [, k, ], =, value, [, k, ], ., add, (]
[value, ., length, ;, ++, k, ), {, value, [, k, ], =, value, [, k, ], ., add, (]
[++, k, ), {, value, [, k, ], =, value, [, k, ], ., add, (, valueCoeff, ., multiply, (]
[++, k, ), {, value, [, k, ], =, value, [, k, ], ., add, (, valueCoeff, ., multiply, (]
[), {, value, [, k, ], =, value, [, k, ], ., add, (, valueCoeff, ., multiply, (, dividedDifference, []
[], ., add, (, valueCoeff, ., multiply, (, dividedDifference, [, k, ], ), ), ;, }, final, DerivativeStructure, deltaX, =]
[], ., add, (, valueCoeff, ., multiply, (, dividedDifference, [, k, ], ), ), ;, }, final, DerivativeStructure, deltaX, =]
[valueCoeff, ., multiply, (, dividedDifference, [, k, ], ), ), ;, }, final, DerivativeStructure, deltaX, =, x, ., subtract, (]
[valueCoeff, ., multiply, (, dividedDifference, [, k, ], ), ), ;, }, final, DerivativeStructure, deltaX, =, x, ., subtract, (]
[dividedDifference, [, k, ], ), ), ;, }, final, DerivativeStructure, deltaX, =, x, ., subtract, (, abscissae, ., get, (]
[), ), ;, }, final, DerivativeStructure, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, ), ), ;]
[;, }, final, DerivativeStructure, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, ), ), ;, valueCoeff, =]
[;, }, final, DerivativeStructure, deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, ), ), ;, valueCoeff, =]
[deltaX, =, x, ., subtract, (, abscissae, ., get, (, i, ), ), ;, valueCoeff, =, valueCoeff, ., multiply, (]
[(, abscissae, ., get, (, i, ), ), ;, valueCoeff, =, valueCoeff, ., multiply, (, deltaX, ), ;, }, return]
[multiply, (, deltaX, ), ;, }, return, value, ;, }, private, void, checkInterpolation, (, ), throws, NoDataException, {, if, (]
[multiply, (, deltaX, ), ;, }, return, value, ;, }, private, void, checkInterpolation, (, ), throws, NoDataException, {, if, (]
[;, }, private, void, checkInterpolation, (, ), throws, NoDataException, {, if, (, abscissae, ., isEmpty, (, ), ), {, throw]
[void, checkInterpolation, (, ), throws, NoDataException, {, if, (, abscissae, ., isEmpty, (, ), ), {, throw, new, NoDataException, (]
[void, checkInterpolation, (, ), throws, NoDataException, {, if, (, abscissae, ., isEmpty, (, ), ), {, throw, new, NoDataException, (]
[new, NoDataException, (, LocalizedFormats, ., EMPTY_INTERPOLATION_SAMPLE, ), ;, }, }, private, PolynomialFunction, polynomial, (, double, ..., c, ), {, return]
[LocalizedFormats, ., EMPTY_INTERPOLATION_SAMPLE, ), ;, }, }, private, PolynomialFunction, polynomial, (, double, ..., c, ), {, return, new, PolynomialFunction, (]
