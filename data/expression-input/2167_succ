[;, public, static, final, Complex, NaN, =, new, Complex, (, Double, ., NaN, ,, Double, ., NaN, ), ;, public]
[,, 1.0, ), ;, public, static, final, Complex, NaN, =, new, Complex, (, Double, ., NaN, ,, Double, ., NaN]
[), ;, public, static, final, Complex, NaN, =, new, Complex, (, Double, ., NaN, ,, Double, ., NaN, ), ;]
[;, public, static, final, Complex, INF, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public]
[,, Double, ., NaN, ), ;, public, static, final, Complex, INF, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double]
[., NaN, ,, Double, ., NaN, ), ;, public, static, final, Complex, INF, =, new, Complex, (, Double, ., POSITIVE_INFINITY]
[), ;, public, static, final, Complex, INF, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;]
[., NaN, ), ;, public, static, final, Complex, INF, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY]
[;, public, static, final, Complex, ONE, =, new, Complex, (, 1.0, ,, 0.0, ), ;, public, static, final, Complex, ZERO]
[,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Complex, ONE, =, new, Complex, (, 1.0, ,, 0.0, ), ;]
[., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Complex, ONE, =, new, Complex, (, 1.0, ,, 0.0]
[), ;, public, static, final, Complex, ONE, =, new, Complex, (, 1.0, ,, 0.0, ), ;, public, static, final, Complex]
[., POSITIVE_INFINITY, ), ;, public, static, final, Complex, ONE, =, new, Complex, (, 1.0, ,, 0.0, ), ;, public, static]
[;, public, static, final, Complex, ZERO, =, new, Complex, (, 0.0, ,, 0.0, ), ;, private, static, final, long, serialVersionUID]
[,, 0.0, ), ;, public, static, final, Complex, ZERO, =, new, Complex, (, 0.0, ,, 0.0, ), ;, private, static]
[), ;, public, static, final, Complex, ZERO, =, new, Complex, (, 0.0, ,, 0.0, ), ;, private, static, final, long]
[;, private, static, final, long, serialVersionUID, =, -, 6195664516687396620L, ;, private, final, double, imaginary, ;, private, final, double, real, ;]
[,, 0.0, ), ;, private, static, final, long, serialVersionUID, =, -, 6195664516687396620L, ;, private, final, double, imaginary, ;, private, final]
[), ;, private, static, final, long, serialVersionUID, =, -, 6195664516687396620L, ;, private, final, double, imaginary, ;, private, final, double, real]
[;, private, final, double, imaginary, ;, private, final, double, real, ;, private, final, transient, boolean, isNaN, ;, private, final, transient]
[;, private, final, double, imaginary, ;, private, final, double, real, ;, private, final, transient, boolean, isNaN, ;, private, final, transient]
[,, 0.0, ), ;, }, public, Complex, (, double, real, ,, double, imaginary, ), {, this, ., real, =, real]
[), ;, }, public, Complex, (, double, real, ,, double, imaginary, ), {, this, ., real, =, real, ;, this]
[=, real, ;, this, ., imaginary, =, imaginary, ;, isNaN, =, Double, ., isNaN, (, real, ), ||, Double, .]
[., real, =, real, ;, this, ., imaginary, =, imaginary, ;, isNaN, =, Double, ., isNaN, (, real, ), ||]
[;, this, ., imaginary, =, imaginary, ;, isNaN, =, Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (]
[=, imaginary, ;, isNaN, =, Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (, imaginary, ), ;, isInfinite]
[., imaginary, =, imaginary, ;, isNaN, =, Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (, imaginary, )]
[;, isNaN, =, Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (, imaginary, ), ;, isInfinite, =, !]
[=, Double, ., isNaN, (, real, ), ||, Double, ., isNaN, (, imaginary, ), ;, isInfinite, =, !, isNaN, &&]
[;, isInfinite, =, !, isNaN, &&, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, )]
[||, Double, ., isNaN, (, imaginary, ), ;, isInfinite, =, !, isNaN, &&, (, Double, ., isInfinite, (, real, )]
[., isNaN, (, real, ), ||, Double, ., isNaN, (, imaginary, ), ;, isInfinite, =, !, isNaN, &&, (, Double]
[), ||, Double, ., isNaN, (, imaginary, ), ;, isInfinite, =, !, isNaN, &&, (, Double, ., isInfinite, (, real]
[;, isInfinite, =, !, isNaN, &&, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, )]
[., isNaN, (, imaginary, ), ;, isInfinite, =, !, isNaN, &&, (, Double, ., isInfinite, (, real, ), ||, Double]
[), ;, isInfinite, =, !, isNaN, &&, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary]
[=, !, isNaN, &&, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ), ;]
[;, }, public, double, abs, (, ), {, if, (, isNaN, ), {, return, Double, ., NaN, ;, }, if]
[&&, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ), ;, }, public, double]
[&&, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ), ;, }, public, double]
[;, }, public, double, abs, (, ), {, if, (, isNaN, ), {, return, Double, ., NaN, ;, }, if]
[), ;, }, public, double, abs, (, ), {, if, (, isNaN, ), {, return, Double, ., NaN, ;, }]
[||, Double, ., isInfinite, (, imaginary, ), ), ;, }, public, double, abs, (, ), {, if, (, isNaN, )]
[., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ), ;, }, public, double, abs, (, )]
[), ||, Double, ., isInfinite, (, imaginary, ), ), ;, }, public, double, abs, (, ), {, if, (, isNaN]
[), ;, }, public, double, abs, (, ), {, if, (, isNaN, ), {, return, Double, ., NaN, ;, }]
[., isInfinite, (, imaginary, ), ), ;, }, public, double, abs, (, ), {, if, (, isNaN, ), {, return]
[), ), ;, }, public, double, abs, (, ), {, if, (, isNaN, ), {, return, Double, ., NaN, ;]
[), {, return, Double, ., NaN, ;, }, if, (, isInfinite, (, ), ), {, return, Double, ., POSITIVE_INFINITY, ;]
[;, }, if, (, isInfinite, (, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, FastMath, ., abs]
[., NaN, ;, }, if, (, isInfinite, (, ), ), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, FastMath]
[), {, return, Double, ., POSITIVE_INFINITY, ;, }, if, (, FastMath, ., abs, (, real, ), <, FastMath, ., abs]
[;, }, if, (, FastMath, ., abs, (, real, ), <, FastMath, ., abs, (, imaginary, ), ), {, if]
[., POSITIVE_INFINITY, ;, }, if, (, FastMath, ., abs, (, real, ), <, FastMath, ., abs, (, imaginary, ), )]
[), {, if, (, imaginary, ==, 0.0, ), {, return, FastMath, ., abs, (, real, ), ;, }, double, q]
[<, FastMath, ., abs, (, imaginary, ), ), {, if, (, imaginary, ==, 0.0, ), {, return, FastMath, ., abs]
[., abs, (, real, ), <, FastMath, ., abs, (, imaginary, ), ), {, if, (, imaginary, ==, 0.0, )]
[), <, FastMath, ., abs, (, imaginary, ), ), {, if, (, imaginary, ==, 0.0, ), {, return, FastMath, .]
[), {, if, (, imaginary, ==, 0.0, ), {, return, FastMath, ., abs, (, real, ), ;, }, double, q]
[., abs, (, imaginary, ), ), {, if, (, imaginary, ==, 0.0, ), {, return, FastMath, ., abs, (, real]
[), ), {, if, (, imaginary, ==, 0.0, ), {, return, FastMath, ., abs, (, real, ), ;, }, double]
[), {, return, FastMath, ., abs, (, real, ), ;, }, double, q, =, real, /, imaginary, ;, return, FastMath]
[==, 0.0, ), {, return, FastMath, ., abs, (, real, ), ;, }, double, q, =, real, /, imaginary, ;]
[), {, return, FastMath, ., abs, (, real, ), ;, }, double, q, =, real, /, imaginary, ;, return, FastMath]
[;, }, double, q, =, real, /, imaginary, ;, return, FastMath, ., abs, (, imaginary, ), *, FastMath, ., sqrt]
[., abs, (, real, ), ;, }, double, q, =, real, /, imaginary, ;, return, FastMath, ., abs, (, imaginary]
[), ;, }, double, q, =, real, /, imaginary, ;, return, FastMath, ., abs, (, imaginary, ), *, FastMath, .]
[;, return, FastMath, ., abs, (, imaginary, ), *, FastMath, ., sqrt, (, 1, +, q, *, q, ), ;]
[/, imaginary, ;, return, FastMath, ., abs, (, imaginary, ), *, FastMath, ., sqrt, (, 1, +, q, *, q]
[;, return, FastMath, ., abs, (, imaginary, ), *, FastMath, ., sqrt, (, 1, +, q, *, q, ), ;]
[;, }, else, {, if, (, real, ==, 0.0, ), {, return, FastMath, ., abs, (, imaginary, ), ;, }]
[*, FastMath, ., sqrt, (, 1, +, q, *, q, ), ;, }, else, {, if, (, real, ==, 0.0]
[., abs, (, imaginary, ), *, FastMath, ., sqrt, (, 1, +, q, *, q, ), ;, }, else, {]
[), *, FastMath, ., sqrt, (, 1, +, q, *, q, ), ;, }, else, {, if, (, real, ==]
[;, }, else, {, if, (, real, ==, 0.0, ), {, return, FastMath, ., abs, (, imaginary, ), ;, }]
[., sqrt, (, 1, +, q, *, q, ), ;, }, else, {, if, (, real, ==, 0.0, ), {]
[), ;, }, else, {, if, (, real, ==, 0.0, ), {, return, FastMath, ., abs, (, imaginary, ), ;]
[+, q, *, q, ), ;, }, else, {, if, (, real, ==, 0.0, ), {, return, FastMath, ., abs]
[), ;, }, else, {, if, (, real, ==, 0.0, ), {, return, FastMath, ., abs, (, imaginary, ), ;]
[*, q, ), ;, }, else, {, if, (, real, ==, 0.0, ), {, return, FastMath, ., abs, (, imaginary]
[), ;, }, else, {, if, (, real, ==, 0.0, ), {, return, FastMath, ., abs, (, imaginary, ), ;]
[), {, return, FastMath, ., abs, (, imaginary, ), ;, }, double, q, =, imaginary, /, real, ;, return, FastMath]
[==, 0.0, ), {, return, FastMath, ., abs, (, imaginary, ), ;, }, double, q, =, imaginary, /, real, ;]
[), {, return, FastMath, ., abs, (, imaginary, ), ;, }, double, q, =, imaginary, /, real, ;, return, FastMath]
[;, }, double, q, =, imaginary, /, real, ;, return, FastMath, ., abs, (, real, ), *, FastMath, ., sqrt]
[., abs, (, imaginary, ), ;, }, double, q, =, imaginary, /, real, ;, return, FastMath, ., abs, (, real]
[), ;, }, double, q, =, imaginary, /, real, ;, return, FastMath, ., abs, (, real, ), *, FastMath, .]
[;, return, FastMath, ., abs, (, real, ), *, FastMath, ., sqrt, (, 1, +, q, *, q, ), ;]
[/, real, ;, return, FastMath, ., abs, (, real, ), *, FastMath, ., sqrt, (, 1, +, q, *, q]
[;, return, FastMath, ., abs, (, real, ), *, FastMath, ., sqrt, (, 1, +, q, *, q, ), ;]
[;, }, }, public, Complex, add, (, Complex, addend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, addend, ), ;]
[*, FastMath, ., sqrt, (, 1, +, q, *, q, ), ;, }, }, public, Complex, add, (, Complex, addend]
[., abs, (, real, ), *, FastMath, ., sqrt, (, 1, +, q, *, q, ), ;, }, }, public]
[), *, FastMath, ., sqrt, (, 1, +, q, *, q, ), ;, }, }, public, Complex, add, (, Complex]
[;, }, }, public, Complex, add, (, Complex, addend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, addend, ), ;]
[., sqrt, (, 1, +, q, *, q, ), ;, }, }, public, Complex, add, (, Complex, addend, ), throws]
[), ;, }, }, public, Complex, add, (, Complex, addend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, addend, )]
[+, q, *, q, ), ;, }, }, public, Complex, add, (, Complex, addend, ), throws, NullArgumentException, {, MathUtils, .]
[), ;, }, }, public, Complex, add, (, Complex, addend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, addend, )]
[*, q, ), ;, }, }, public, Complex, add, (, Complex, addend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[), ;, }, }, public, Complex, add, (, Complex, addend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, addend, )]
[;, if, (, isNaN, ||, addend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, +, addend]
[., checkNotNull, (, addend, ), ;, if, (, isNaN, ||, addend, ., isNaN, ), {, return, NaN, ;, }, return]
[), ;, if, (, isNaN, ||, addend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, +]
[), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ., getReal, (, ), ,, imaginary, +, addend]
[||, addend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ., getReal, (, )]
[), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ., getReal, (, ), ,, imaginary, +, addend]
[., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ., getReal, (, ), ,, imaginary]
[;, }, return, createComplex, (, real, +, addend, ., getReal, (, ), ,, imaginary, +, addend, ., getImaginary, (, )]
[;, }, public, Complex, add, (, double, addend, ), {, if, (, isNaN, ||, Double, ., isNaN, (, addend, )]
[,, imaginary, +, addend, ., getImaginary, (, ), ), ;, }, public, Complex, add, (, double, addend, ), {, if]
[+, addend, ., getReal, (, ), ,, imaginary, +, addend, ., getImaginary, (, ), ), ;, }, public, Complex, add]
[,, imaginary, +, addend, ., getImaginary, (, ), ), ;, }, public, Complex, add, (, double, addend, ), {, if]
[., getReal, (, ), ,, imaginary, +, addend, ., getImaginary, (, ), ), ;, }, public, Complex, add, (, double]
[), ;, }, public, Complex, add, (, double, addend, ), {, if, (, isNaN, ||, Double, ., isNaN, (, addend]
[+, addend, ., getImaginary, (, ), ), ;, }, public, Complex, add, (, double, addend, ), {, if, (, isNaN]
[), ;, }, public, Complex, add, (, double, addend, ), {, if, (, isNaN, ||, Double, ., isNaN, (, addend]
[., getImaginary, (, ), ), ;, }, public, Complex, add, (, double, addend, ), {, if, (, isNaN, ||, Double]
[), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ,, imaginary, ), ;, }, public, Complex, conjugate]
[||, Double, ., isNaN, (, addend, ), ), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ,]
[), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ,, imaginary, ), ;, }, public, Complex, conjugate]
[., isNaN, (, addend, ), ), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ,, imaginary, )]
[), ), {, return, NaN, ;, }, return, createComplex, (, real, +, addend, ,, imaginary, ), ;, }, public, Complex]
[;, }, return, createComplex, (, real, +, addend, ,, imaginary, ), ;, }, public, Complex, conjugate, (, ), {, if]
[;, }, public, Complex, conjugate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[,, imaginary, ), ;, }, public, Complex, conjugate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }]
[+, addend, ,, imaginary, ), ;, }, public, Complex, conjugate, (, ), {, if, (, isNaN, ), {, return, NaN]
[,, imaginary, ), ;, }, public, Complex, conjugate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }]
[), ;, }, public, Complex, conjugate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex]
[), {, return, NaN, ;, }, return, createComplex, (, real, ,, -, imaginary, ), ;, }, public, Complex, divide, (]
[;, }, return, createComplex, (, real, ,, -, imaginary, ), ;, }, public, Complex, divide, (, Complex, divisor, ), throws]
[;, }, public, Complex, divide, (, Complex, divisor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, divisor, ), ;, if]
[,, -, imaginary, ), ;, }, public, Complex, divide, (, Complex, divisor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[), ;, }, public, Complex, divide, (, Complex, divisor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, divisor, ), ;]
[), ;, }, public, Complex, divide, (, Complex, divisor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, divisor, ), ;]
[;, if, (, isNaN, ||, divisor, ., isNaN, ), {, return, NaN, ;, }, final, double, c, =, divisor, .]
[., checkNotNull, (, divisor, ), ;, if, (, isNaN, ||, divisor, ., isNaN, ), {, return, NaN, ;, }, final]
[), ;, if, (, isNaN, ||, divisor, ., isNaN, ), {, return, NaN, ;, }, final, double, c, =, divisor]
[), {, return, NaN, ;, }, final, double, c, =, divisor, ., getReal, (, ), ;, final, double, d, =]
[||, divisor, ., isNaN, ), {, return, NaN, ;, }, final, double, c, =, divisor, ., getReal, (, ), ;]
[), {, return, NaN, ;, }, final, double, c, =, divisor, ., getReal, (, ), ;, final, double, d, =]
[., isNaN, ), {, return, NaN, ;, }, final, double, c, =, divisor, ., getReal, (, ), ;, final, double]
[;, }, final, double, c, =, divisor, ., getReal, (, ), ;, final, double, d, =, divisor, ., getImaginary, (]
[;, final, double, d, =, divisor, ., getImaginary, (, ), ;, if, (, c, ==, 0.0, &&, d, ==, 0.0]
[., getReal, (, ), ;, final, double, d, =, divisor, ., getImaginary, (, ), ;, if, (, c, ==, 0.0]
[;, if, (, c, ==, 0.0, &&, d, ==, 0.0, ), {, return, NaN, ;, }, if, (, divisor, .]
[., getImaginary, (, ), ;, if, (, c, ==, 0.0, &&, d, ==, 0.0, ), {, return, NaN, ;, }]
[), {, return, NaN, ;, }, if, (, divisor, ., isInfinite, (, ), &&, !, isInfinite, (, ), ), {]
[&&, d, ==, 0.0, ), {, return, NaN, ;, }, if, (, divisor, ., isInfinite, (, ), &&, !, isInfinite]
[==, 0.0, &&, d, ==, 0.0, ), {, return, NaN, ;, }, if, (, divisor, ., isInfinite, (, ), &&]
[&&, d, ==, 0.0, ), {, return, NaN, ;, }, if, (, divisor, ., isInfinite, (, ), &&, !, isInfinite]
[), {, return, NaN, ;, }, if, (, divisor, ., isInfinite, (, ), &&, !, isInfinite, (, ), ), {]
[==, 0.0, ), {, return, NaN, ;, }, if, (, divisor, ., isInfinite, (, ), &&, !, isInfinite, (, )]
[), {, return, NaN, ;, }, if, (, divisor, ., isInfinite, (, ), &&, !, isInfinite, (, ), ), {]
[;, }, if, (, divisor, ., isInfinite, (, ), &&, !, isInfinite, (, ), ), {, return, ZERO, ;, }]
[), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (, c, ), <, FastMath, ., abs, (, d]
[&&, !, isInfinite, (, ), ), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (, c, ), <]
[., isInfinite, (, ), &&, !, isInfinite, (, ), ), {, return, ZERO, ;, }, if, (, FastMath, ., abs]
[), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (, c, ), <, FastMath, ., abs, (, d]
[), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (, c, ), <, FastMath, ., abs, (, d]
[;, }, if, (, FastMath, ., abs, (, c, ), <, FastMath, ., abs, (, d, ), ), {, double]
[), {, double, q, =, c, /, d, ;, double, denominator, =, c, *, q, +, d, ;, return, createComplex]
[<, FastMath, ., abs, (, d, ), ), {, double, q, =, c, /, d, ;, double, denominator, =, c]
[., abs, (, c, ), <, FastMath, ., abs, (, d, ), ), {, double, q, =, c, /, d]
[), <, FastMath, ., abs, (, d, ), ), {, double, q, =, c, /, d, ;, double, denominator, =]
[), {, double, q, =, c, /, d, ;, double, denominator, =, c, *, q, +, d, ;, return, createComplex]
[., abs, (, d, ), ), {, double, q, =, c, /, d, ;, double, denominator, =, c, *, q]
[), ), {, double, q, =, c, /, d, ;, double, denominator, =, c, *, q, +, d, ;, return]
[;, double, denominator, =, c, *, q, +, d, ;, return, createComplex, (, (, real, *, q, +, imaginary, )]
[/, d, ;, double, denominator, =, c, *, q, +, d, ;, return, createComplex, (, (, real, *, q, +]
[;, double, denominator, =, c, *, q, +, d, ;, return, createComplex, (, (, real, *, q, +, imaginary, )]
[;, return, createComplex, (, (, real, *, q, +, imaginary, ), /, denominator, ,, (, imaginary, *, q, -, real]
[+, d, ;, return, createComplex, (, (, real, *, q, +, imaginary, ), /, denominator, ,, (, imaginary, *, q]
[*, q, +, d, ;, return, createComplex, (, (, real, *, q, +, imaginary, ), /, denominator, ,, (, imaginary]
[+, d, ;, return, createComplex, (, (, real, *, q, +, imaginary, ), /, denominator, ,, (, imaginary, *, q]
[;, return, createComplex, (, (, real, *, q, +, imaginary, ), /, denominator, ,, (, imaginary, *, q, -, real]
[;, }, else, {, double, q, =, d, /, c, ;, double, denominator, =, d, *, q, +, c, ;]
[,, (, imaginary, *, q, -, real, ), /, denominator, ), ;, }, else, {, double, q, =, d, /]
[/, denominator, ,, (, imaginary, *, q, -, real, ), /, denominator, ), ;, }, else, {, double, q, =]
[), /, denominator, ,, (, imaginary, *, q, -, real, ), /, denominator, ), ;, }, else, {, double, q]
[+, imaginary, ), /, denominator, ,, (, imaginary, *, q, -, real, ), /, denominator, ), ;, }, else, {]
[*, q, +, imaginary, ), /, denominator, ,, (, imaginary, *, q, -, real, ), /, denominator, ), ;, }]
[+, imaginary, ), /, denominator, ,, (, imaginary, *, q, -, real, ), /, denominator, ), ;, }, else, {]
[), /, denominator, ,, (, imaginary, *, q, -, real, ), /, denominator, ), ;, }, else, {, double, q]
[,, (, imaginary, *, q, -, real, ), /, denominator, ), ;, }, else, {, double, q, =, d, /]
[), ;, }, else, {, double, q, =, d, /, c, ;, double, denominator, =, d, *, q, +, c]
[/, denominator, ), ;, }, else, {, double, q, =, d, /, c, ;, double, denominator, =, d, *, q]
[), /, denominator, ), ;, }, else, {, double, q, =, d, /, c, ;, double, denominator, =, d, *]
[-, real, ), /, denominator, ), ;, }, else, {, double, q, =, d, /, c, ;, double, denominator, =]
[*, q, -, real, ), /, denominator, ), ;, }, else, {, double, q, =, d, /, c, ;, double]
[-, real, ), /, denominator, ), ;, }, else, {, double, q, =, d, /, c, ;, double, denominator, =]
[), /, denominator, ), ;, }, else, {, double, q, =, d, /, c, ;, double, denominator, =, d, *]
[), ;, }, else, {, double, q, =, d, /, c, ;, double, denominator, =, d, *, q, +, c]
[;, double, denominator, =, d, *, q, +, c, ;, return, createComplex, (, (, imaginary, *, q, +, real, )]
[/, c, ;, double, denominator, =, d, *, q, +, c, ;, return, createComplex, (, (, imaginary, *, q, +]
[;, double, denominator, =, d, *, q, +, c, ;, return, createComplex, (, (, imaginary, *, q, +, real, )]
[;, return, createComplex, (, (, imaginary, *, q, +, real, ), /, denominator, ,, (, imaginary, -, real, *, q]
[+, c, ;, return, createComplex, (, (, imaginary, *, q, +, real, ), /, denominator, ,, (, imaginary, -, real]
[*, q, +, c, ;, return, createComplex, (, (, imaginary, *, q, +, real, ), /, denominator, ,, (, imaginary]
[+, c, ;, return, createComplex, (, (, imaginary, *, q, +, real, ), /, denominator, ,, (, imaginary, -, real]
[;, return, createComplex, (, (, imaginary, *, q, +, real, ), /, denominator, ,, (, imaginary, -, real, *, q]
[;, }, }, public, Complex, divide, (, double, divisor, ), {, if, (, isNaN, ||, Double, ., isNaN, (, divisor]
[,, (, imaginary, -, real, *, q, ), /, denominator, ), ;, }, }, public, Complex, divide, (, double, divisor]
[/, denominator, ,, (, imaginary, -, real, *, q, ), /, denominator, ), ;, }, }, public, Complex, divide, (]
[), /, denominator, ,, (, imaginary, -, real, *, q, ), /, denominator, ), ;, }, }, public, Complex, divide]
[+, real, ), /, denominator, ,, (, imaginary, -, real, *, q, ), /, denominator, ), ;, }, }, public]
[*, q, +, real, ), /, denominator, ,, (, imaginary, -, real, *, q, ), /, denominator, ), ;, }]
[+, real, ), /, denominator, ,, (, imaginary, -, real, *, q, ), /, denominator, ), ;, }, }, public]
[), /, denominator, ,, (, imaginary, -, real, *, q, ), /, denominator, ), ;, }, }, public, Complex, divide]
[,, (, imaginary, -, real, *, q, ), /, denominator, ), ;, }, }, public, Complex, divide, (, double, divisor]
[), ;, }, }, public, Complex, divide, (, double, divisor, ), {, if, (, isNaN, ||, Double, ., isNaN, (]
[/, denominator, ), ;, }, }, public, Complex, divide, (, double, divisor, ), {, if, (, isNaN, ||, Double, .]
[), /, denominator, ), ;, }, }, public, Complex, divide, (, double, divisor, ), {, if, (, isNaN, ||, Double]
[-, real, *, q, ), /, denominator, ), ;, }, }, public, Complex, divide, (, double, divisor, ), {, if]
[), /, denominator, ), ;, }, }, public, Complex, divide, (, double, divisor, ), {, if, (, isNaN, ||, Double]
[*, q, ), /, denominator, ), ;, }, }, public, Complex, divide, (, double, divisor, ), {, if, (, isNaN]
[), /, denominator, ), ;, }, }, public, Complex, divide, (, double, divisor, ), {, if, (, isNaN, ||, Double]
[), ;, }, }, public, Complex, divide, (, double, divisor, ), {, if, (, isNaN, ||, Double, ., isNaN, (]
[), {, return, NaN, ;, }, if, (, divisor, ==, 0d, ), {, return, NaN, ;, }, if, (, Double]
[||, Double, ., isNaN, (, divisor, ), ), {, return, NaN, ;, }, if, (, divisor, ==, 0d, ), {]
[), {, return, NaN, ;, }, if, (, divisor, ==, 0d, ), {, return, NaN, ;, }, if, (, Double]
[., isNaN, (, divisor, ), ), {, return, NaN, ;, }, if, (, divisor, ==, 0d, ), {, return, NaN]
[), ), {, return, NaN, ;, }, if, (, divisor, ==, 0d, ), {, return, NaN, ;, }, if, (]
[;, }, if, (, divisor, ==, 0d, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, divisor]
[), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, divisor, ), ), {, return, !, isInfinite, (]
[==, 0d, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, divisor, ), ), {, return, !]
[), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, divisor, ), ), {, return, !, isInfinite, (]
[;, }, if, (, Double, ., isInfinite, (, divisor, ), ), {, return, !, isInfinite, (, ), ?, ZERO, :]
[), {, return, !, isInfinite, (, ), ?, ZERO, :, NaN, ;, }, return, createComplex, (, real, /, divisor, ,]
[., isInfinite, (, divisor, ), ), {, return, !, isInfinite, (, ), ?, ZERO, :, NaN, ;, }, return, createComplex]
[), ), {, return, !, isInfinite, (, ), ?, ZERO, :, NaN, ;, }, return, createComplex, (, real, /, divisor]
[;, }, return, createComplex, (, real, /, divisor, ,, imaginary, /, divisor, ), ;, }, public, Complex, reciprocal, (, )]
[?, ZERO, :, NaN, ;, }, return, createComplex, (, real, /, divisor, ,, imaginary, /, divisor, ), ;, }, public]
[?, ZERO, :, NaN, ;, }, return, createComplex, (, real, /, divisor, ,, imaginary, /, divisor, ), ;, }, public]
[:, NaN, ;, }, return, createComplex, (, real, /, divisor, ,, imaginary, /, divisor, ), ;, }, public, Complex, reciprocal]
[;, }, return, createComplex, (, real, /, divisor, ,, imaginary, /, divisor, ), ;, }, public, Complex, reciprocal, (, )]
[;, }, public, Complex, reciprocal, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (, real]
[,, imaginary, /, divisor, ), ;, }, public, Complex, reciprocal, (, ), {, if, (, isNaN, ), {, return, NaN]
[/, divisor, ,, imaginary, /, divisor, ), ;, }, public, Complex, reciprocal, (, ), {, if, (, isNaN, ), {]
[,, imaginary, /, divisor, ), ;, }, public, Complex, reciprocal, (, ), {, if, (, isNaN, ), {, return, NaN]
[), ;, }, public, Complex, reciprocal, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (]
[/, divisor, ), ;, }, public, Complex, reciprocal, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }]
[), ;, }, public, Complex, reciprocal, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (]
[), {, return, NaN, ;, }, if, (, real, ==, 0.0, &&, imaginary, ==, 0.0, ), {, return, INF, ;]
[;, }, if, (, real, ==, 0.0, &&, imaginary, ==, 0.0, ), {, return, INF, ;, }, if, (, isInfinite]
[), {, return, INF, ;, }, if, (, isInfinite, ), {, return, ZERO, ;, }, if, (, FastMath, ., abs]
[&&, imaginary, ==, 0.0, ), {, return, INF, ;, }, if, (, isInfinite, ), {, return, ZERO, ;, }, if]
[==, 0.0, &&, imaginary, ==, 0.0, ), {, return, INF, ;, }, if, (, isInfinite, ), {, return, ZERO, ;]
[&&, imaginary, ==, 0.0, ), {, return, INF, ;, }, if, (, isInfinite, ), {, return, ZERO, ;, }, if]
[), {, return, INF, ;, }, if, (, isInfinite, ), {, return, ZERO, ;, }, if, (, FastMath, ., abs]
[==, 0.0, ), {, return, INF, ;, }, if, (, isInfinite, ), {, return, ZERO, ;, }, if, (, FastMath]
[), {, return, INF, ;, }, if, (, isInfinite, ), {, return, ZERO, ;, }, if, (, FastMath, ., abs]
[;, }, if, (, isInfinite, ), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (, real, ), <]
[), {, return, ZERO, ;, }, if, (, FastMath, ., abs, (, real, ), <, FastMath, ., abs, (, imaginary]
[;, }, if, (, FastMath, ., abs, (, real, ), <, FastMath, ., abs, (, imaginary, ), ), {, double]
[), {, double, q, =, real, /, imaginary, ;, double, scale, =, 1., /, (, real, *, q, +, imaginary]
[<, FastMath, ., abs, (, imaginary, ), ), {, double, q, =, real, /, imaginary, ;, double, scale, =, 1.]
[., abs, (, real, ), <, FastMath, ., abs, (, imaginary, ), ), {, double, q, =, real, /, imaginary]
[), <, FastMath, ., abs, (, imaginary, ), ), {, double, q, =, real, /, imaginary, ;, double, scale, =]
[), {, double, q, =, real, /, imaginary, ;, double, scale, =, 1., /, (, real, *, q, +, imaginary]
[., abs, (, imaginary, ), ), {, double, q, =, real, /, imaginary, ;, double, scale, =, 1., /, (]
[), ), {, double, q, =, real, /, imaginary, ;, double, scale, =, 1., /, (, real, *, q, +]
[;, double, scale, =, 1., /, (, real, *, q, +, imaginary, ), ;, return, createComplex, (, scale, *, q]
[/, imaginary, ;, double, scale, =, 1., /, (, real, *, q, +, imaginary, ), ;, return, createComplex, (, scale]
[;, double, scale, =, 1., /, (, real, *, q, +, imaginary, ), ;, return, createComplex, (, scale, *, q]
[;, return, createComplex, (, scale, *, q, ,, -, scale, ), ;, }, else, {, double, q, =, imaginary, /]
[/, (, real, *, q, +, imaginary, ), ;, return, createComplex, (, scale, *, q, ,, -, scale, ), ;]
[;, return, createComplex, (, scale, *, q, ,, -, scale, ), ;, }, else, {, double, q, =, imaginary, /]
[), ;, return, createComplex, (, scale, *, q, ,, -, scale, ), ;, }, else, {, double, q, =, imaginary]
[+, imaginary, ), ;, return, createComplex, (, scale, *, q, ,, -, scale, ), ;, }, else, {, double, q]
[*, q, +, imaginary, ), ;, return, createComplex, (, scale, *, q, ,, -, scale, ), ;, }, else, {]
[+, imaginary, ), ;, return, createComplex, (, scale, *, q, ,, -, scale, ), ;, }, else, {, double, q]
[), ;, return, createComplex, (, scale, *, q, ,, -, scale, ), ;, }, else, {, double, q, =, imaginary]
[;, }, else, {, double, q, =, imaginary, /, real, ;, double, scale, =, 1., /, (, imaginary, *, q]
[,, -, scale, ), ;, }, else, {, double, q, =, imaginary, /, real, ;, double, scale, =, 1., /]
[*, q, ,, -, scale, ), ;, }, else, {, double, q, =, imaginary, /, real, ;, double, scale, =]
[,, -, scale, ), ;, }, else, {, double, q, =, imaginary, /, real, ;, double, scale, =, 1., /]
[), ;, }, else, {, double, q, =, imaginary, /, real, ;, double, scale, =, 1., /, (, imaginary, *]
[), ;, }, else, {, double, q, =, imaginary, /, real, ;, double, scale, =, 1., /, (, imaginary, *]
[;, double, scale, =, 1., /, (, imaginary, *, q, +, real, ), ;, return, createComplex, (, scale, ,, -]
[/, real, ;, double, scale, =, 1., /, (, imaginary, *, q, +, real, ), ;, return, createComplex, (, scale]
[;, double, scale, =, 1., /, (, imaginary, *, q, +, real, ), ;, return, createComplex, (, scale, ,, -]
[;, return, createComplex, (, scale, ,, -, scale, *, q, ), ;, }, }, @, Override, public, boolean, equals, (]
[/, (, imaginary, *, q, +, real, ), ;, return, createComplex, (, scale, ,, -, scale, *, q, ), ;]
[;, return, createComplex, (, scale, ,, -, scale, *, q, ), ;, }, }, @, Override, public, boolean, equals, (]
[), ;, return, createComplex, (, scale, ,, -, scale, *, q, ), ;, }, }, @, Override, public, boolean, equals]
[+, real, ), ;, return, createComplex, (, scale, ,, -, scale, *, q, ), ;, }, }, @, Override, public]
[*, q, +, real, ), ;, return, createComplex, (, scale, ,, -, scale, *, q, ), ;, }, }, @]
[+, real, ), ;, return, createComplex, (, scale, ,, -, scale, *, q, ), ;, }, }, @, Override, public]
[), ;, return, createComplex, (, scale, ,, -, scale, *, q, ), ;, }, }, @, Override, public, boolean, equals]
[;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {]
[,, -, scale, *, q, ), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if]
[), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, )]
[*, q, ), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==]
[*, q, ), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==]
[), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, )]
[), {, return, true, ;, }, if, (, other, instanceof, Complex, ), {, Complex, c, =, (, Complex, ), other]
[==, other, ), {, return, true, ;, }, if, (, other, instanceof, Complex, ), {, Complex, c, =, (, Complex]
[), {, return, true, ;, }, if, (, other, instanceof, Complex, ), {, Complex, c, =, (, Complex, ), other]
[;, }, if, (, other, instanceof, Complex, ), {, Complex, c, =, (, Complex, ), other, ;, if, (, c]
[), {, Complex, c, =, (, Complex, ), other, ;, if, (, c, ., isNaN, ), {, return, isNaN, ;]
[instanceof, Complex, ), {, Complex, c, =, (, Complex, ), other, ;, if, (, c, ., isNaN, ), {, return]
[;, if, (, c, ., isNaN, ), {, return, isNaN, ;, }, else, {, return, (, real, ==, c, .]
[;, if, (, c, ., isNaN, ), {, return, isNaN, ;, }, else, {, return, (, real, ==, c, .]
[), {, return, isNaN, ;, }, else, {, return, (, real, ==, c, ., real, ), &&, (, imaginary, ==]
[., isNaN, ), {, return, isNaN, ;, }, else, {, return, (, real, ==, c, ., real, ), &&, (]
[;, }, else, {, return, (, real, ==, c, ., real, ), &&, (, imaginary, ==, c, ., imaginary, )]
[;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, ), {]
[&&, (, imaginary, ==, c, ., imaginary, ), ;, }, }, return, false, ;, }, @, Override, public, int, hashCode]
[), &&, (, imaginary, ==, c, ., imaginary, ), ;, }, }, return, false, ;, }, @, Override, public, int]
[==, c, ., real, ), &&, (, imaginary, ==, c, ., imaginary, ), ;, }, }, return, false, ;, }]
[), &&, (, imaginary, ==, c, ., imaginary, ), ;, }, }, return, false, ;, }, @, Override, public, int]
[., real, ), &&, (, imaginary, ==, c, ., imaginary, ), ;, }, }, return, false, ;, }, @, Override]
[;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, ), {]
[), ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, )]
[==, c, ., imaginary, ), ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {]
[), ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, )]
[., imaginary, ), ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (]
[;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, ), {, return, 7, ;, }, return]
[), {, return, 7, ;, }, return, 37, *, (, 17, *, MathUtils, ., hash, (, imaginary, ), +, MathUtils]
[;, }, return, 37, *, (, 17, *, MathUtils, ., hash, (, imaginary, ), +, MathUtils, ., hash, (, real]
[;, }, public, double, getImaginary, (, ), {, return, imaginary, ;, }, public, double, getReal, (, ), {, return, real]
[*, (, 17, *, MathUtils, ., hash, (, imaginary, ), +, MathUtils, ., hash, (, real, ), ), ;, }]
[;, }, public, double, getImaginary, (, ), {, return, imaginary, ;, }, public, double, getReal, (, ), {, return, real]
[), ;, }, public, double, getImaginary, (, ), {, return, imaginary, ;, }, public, double, getReal, (, ), {, return]
[+, MathUtils, ., hash, (, real, ), ), ;, }, public, double, getImaginary, (, ), {, return, imaginary, ;, }]
[*, MathUtils, ., hash, (, imaginary, ), +, MathUtils, ., hash, (, real, ), ), ;, }, public, double, getImaginary]
[+, MathUtils, ., hash, (, real, ), ), ;, }, public, double, getImaginary, (, ), {, return, imaginary, ;, }]
[., hash, (, imaginary, ), +, MathUtils, ., hash, (, real, ), ), ;, }, public, double, getImaginary, (, )]
[), +, MathUtils, ., hash, (, real, ), ), ;, }, public, double, getImaginary, (, ), {, return, imaginary, ;]
[), ;, }, public, double, getImaginary, (, ), {, return, imaginary, ;, }, public, double, getReal, (, ), {, return]
[., hash, (, real, ), ), ;, }, public, double, getImaginary, (, ), {, return, imaginary, ;, }, public, double]
[), ), ;, }, public, double, getImaginary, (, ), {, return, imaginary, ;, }, public, double, getReal, (, ), {]
[;, }, public, double, getReal, (, ), {, return, real, ;, }, public, boolean, isNaN, (, ), {, return, isNaN]
[;, }, public, boolean, isNaN, (, ), {, return, isNaN, ;, }, public, boolean, isInfinite, (, ), {, return, isInfinite]
[;, }, public, boolean, isInfinite, (, ), {, return, isInfinite, ;, }, public, Complex, multiply, (, Complex, factor, ), throws]
[;, }, public, Complex, multiply, (, Complex, factor, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, factor, ), ;, if]
[;, if, (, isNaN, ||, factor, ., isNaN, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (]
[., checkNotNull, (, factor, ), ;, if, (, isNaN, ||, factor, ., isNaN, ), {, return, NaN, ;, }, if]
[), ;, if, (, isNaN, ||, factor, ., isNaN, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite]
[), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary]
[||, factor, ., isNaN, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double]
[), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary]
[., isNaN, ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite]
[;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||, Double, .]
[), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ., real, -, imaginary, *, factor, ., imaginary]
[||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *]
[||, Double, ., isInfinite, (, factor, ., real, ), ||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {]
[||, Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ., real, ), ||, Double, ., isInfinite]
[., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ., real]
[), ||, Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ., real, ), ||, Double, .]
[||, Double, ., isInfinite, (, factor, ., real, ), ||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {]
[., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ., real, ), ||, Double, ., isInfinite, (, factor]
[), ||, Double, ., isInfinite, (, factor, ., real, ), ||, Double, ., isInfinite, (, factor, ., imaginary, ), )]
[||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *]
[., isInfinite, (, factor, ., real, ), ||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {, return, INF]
[), ||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real]
[., real, ), ||, Double, ., isInfinite, (, factor, ., imaginary, ), ), {, return, INF, ;, }, return, createComplex]
[), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ., real, -, imaginary, *, factor, ., imaginary]
[., isInfinite, (, factor, ., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, .]
[), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ., real, -, imaginary, *, factor, .]
[., imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ., real, -, imaginary, *]
[;, }, return, createComplex, (, real, *, factor, ., real, -, imaginary, *, factor, ., imaginary, ,, real, *, factor]
[;, }, public, Complex, multiply, (, final, int, factor, ), {, if, (, isNaN, ), {, return, NaN, ;, }]
[,, real, *, factor, ., imaginary, +, imaginary, *, factor, ., real, ), ;, }, public, Complex, multiply, (, final]
[-, imaginary, *, factor, ., imaginary, ,, real, *, factor, ., imaginary, +, imaginary, *, factor, ., real, ), ;]
[*, factor, ., real, -, imaginary, *, factor, ., imaginary, ,, real, *, factor, ., imaginary, +, imaginary, *, factor]
[-, imaginary, *, factor, ., imaginary, ,, real, *, factor, ., imaginary, +, imaginary, *, factor, ., real, ), ;]
[., real, -, imaginary, *, factor, ., imaginary, ,, real, *, factor, ., imaginary, +, imaginary, *, factor, ., real]
[,, real, *, factor, ., imaginary, +, imaginary, *, factor, ., real, ), ;, }, public, Complex, multiply, (, final]
[*, factor, ., imaginary, ,, real, *, factor, ., imaginary, +, imaginary, *, factor, ., real, ), ;, }, public]
[,, real, *, factor, ., imaginary, +, imaginary, *, factor, ., real, ), ;, }, public, Complex, multiply, (, final]
[., imaginary, ,, real, *, factor, ., imaginary, +, imaginary, *, factor, ., real, ), ;, }, public, Complex, multiply]
[), ;, }, public, Complex, multiply, (, final, int, factor, ), {, if, (, isNaN, ), {, return, NaN, ;]
[+, imaginary, *, factor, ., real, ), ;, }, public, Complex, multiply, (, final, int, factor, ), {, if, (]
[*, factor, ., imaginary, +, imaginary, *, factor, ., real, ), ;, }, public, Complex, multiply, (, final, int, factor]
[+, imaginary, *, factor, ., real, ), ;, }, public, Complex, multiply, (, final, int, factor, ), {, if, (]
[., imaginary, +, imaginary, *, factor, ., real, ), ;, }, public, Complex, multiply, (, final, int, factor, ), {]
[), ;, }, public, Complex, multiply, (, final, int, factor, ), {, if, (, isNaN, ), {, return, NaN, ;]
[*, factor, ., real, ), ;, }, public, Complex, multiply, (, final, int, factor, ), {, if, (, isNaN, )]
[), ;, }, public, Complex, multiply, (, final, int, factor, ), {, if, (, isNaN, ), {, return, NaN, ;]
[., real, ), ;, }, public, Complex, multiply, (, final, int, factor, ), {, if, (, isNaN, ), {, return]
[), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary]
[;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ), {, return]
[), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,, imaginary, *, factor, ), ;, }, public]
[||, Double, ., isInfinite, (, imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,]
[., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ), {, return, INF, ;, }, return, createComplex]
[), ||, Double, ., isInfinite, (, imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor]
[), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,, imaginary, *, factor, ), ;, }, public]
[., isInfinite, (, imaginary, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,, imaginary, *]
[), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,, imaginary, *, factor, ), ;, }]
[;, }, return, createComplex, (, real, *, factor, ,, imaginary, *, factor, ), ;, }, public, Complex, multiply, (, double]
[;, }, public, Complex, multiply, (, double, factor, ), {, if, (, isNaN, ||, Double, ., isNaN, (, factor, )]
[,, imaginary, *, factor, ), ;, }, public, Complex, multiply, (, double, factor, ), {, if, (, isNaN, ||, Double]
[*, factor, ,, imaginary, *, factor, ), ;, }, public, Complex, multiply, (, double, factor, ), {, if, (, isNaN]
[,, imaginary, *, factor, ), ;, }, public, Complex, multiply, (, double, factor, ), {, if, (, isNaN, ||, Double]
[), ;, }, public, Complex, multiply, (, double, factor, ), {, if, (, isNaN, ||, Double, ., isNaN, (, factor]
[*, factor, ), ;, }, public, Complex, multiply, (, double, factor, ), {, if, (, isNaN, ||, Double, ., isNaN]
[), ;, }, public, Complex, multiply, (, double, factor, ), {, if, (, isNaN, ||, Double, ., isNaN, (, factor]
[), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary]
[||, Double, ., isNaN, (, factor, ), ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real]
[), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary]
[., isNaN, (, factor, ), ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||]
[), ), {, return, NaN, ;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (]
[;, }, if, (, Double, ., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||, Double, .]
[), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,, imaginary, *, factor, ), ;, }, public]
[||, Double, ., isInfinite, (, factor, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,]
[||, Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ), ), {, return, INF, ;, }]
[., isInfinite, (, real, ), ||, Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ), )]
[), ||, Double, ., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ), ), {, return, INF, ;]
[||, Double, ., isInfinite, (, factor, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,]
[., isInfinite, (, imaginary, ), ||, Double, ., isInfinite, (, factor, ), ), {, return, INF, ;, }, return, createComplex]
[), ||, Double, ., isInfinite, (, factor, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor]
[), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,, imaginary, *, factor, ), ;, }, public]
[., isInfinite, (, factor, ), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,, imaginary, *]
[), ), {, return, INF, ;, }, return, createComplex, (, real, *, factor, ,, imaginary, *, factor, ), ;, }]
[;, }, return, createComplex, (, real, *, factor, ,, imaginary, *, factor, ), ;, }, public, Complex, negate, (, )]
[;, }, public, Complex, negate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[,, imaginary, *, factor, ), ;, }, public, Complex, negate, (, ), {, if, (, isNaN, ), {, return, NaN]
[*, factor, ,, imaginary, *, factor, ), ;, }, public, Complex, negate, (, ), {, if, (, isNaN, ), {]
[,, imaginary, *, factor, ), ;, }, public, Complex, negate, (, ), {, if, (, isNaN, ), {, return, NaN]
[), ;, }, public, Complex, negate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex]
[*, factor, ), ;, }, public, Complex, negate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }]
[), ;, }, public, Complex, negate, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex]
[), {, return, NaN, ;, }, return, createComplex, (, -, real, ,, -, imaginary, ), ;, }, public, Complex, subtract]
[;, }, return, createComplex, (, -, real, ,, -, imaginary, ), ;, }, public, Complex, subtract, (, Complex, subtrahend, )]
[;, }, public, Complex, subtract, (, Complex, subtrahend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, subtrahend, ), ;, if]
[,, -, imaginary, ), ;, }, public, Complex, subtract, (, Complex, subtrahend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[,, -, imaginary, ), ;, }, public, Complex, subtract, (, Complex, subtrahend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[), ;, }, public, Complex, subtract, (, Complex, subtrahend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, subtrahend, ), ;]
[), ;, }, public, Complex, subtract, (, Complex, subtrahend, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, subtrahend, ), ;]
[;, if, (, isNaN, ||, subtrahend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend]
[., checkNotNull, (, subtrahend, ), ;, if, (, isNaN, ||, subtrahend, ., isNaN, ), {, return, NaN, ;, }, return]
[), ;, if, (, isNaN, ||, subtrahend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, -]
[), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ., getReal, (, ), ,, imaginary, -, subtrahend]
[||, subtrahend, ., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ., getReal, (, )]
[), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ., getReal, (, ), ,, imaginary, -, subtrahend]
[., isNaN, ), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ., getReal, (, ), ,, imaginary]
[;, }, return, createComplex, (, real, -, subtrahend, ., getReal, (, ), ,, imaginary, -, subtrahend, ., getImaginary, (, )]
[;, }, public, Complex, subtract, (, double, subtrahend, ), {, if, (, isNaN, ||, Double, ., isNaN, (, subtrahend, )]
[,, imaginary, -, subtrahend, ., getImaginary, (, ), ), ;, }, public, Complex, subtract, (, double, subtrahend, ), {, if]
[-, subtrahend, ., getReal, (, ), ,, imaginary, -, subtrahend, ., getImaginary, (, ), ), ;, }, public, Complex, subtract]
[,, imaginary, -, subtrahend, ., getImaginary, (, ), ), ;, }, public, Complex, subtract, (, double, subtrahend, ), {, if]
[., getReal, (, ), ,, imaginary, -, subtrahend, ., getImaginary, (, ), ), ;, }, public, Complex, subtract, (, double]
[), ;, }, public, Complex, subtract, (, double, subtrahend, ), {, if, (, isNaN, ||, Double, ., isNaN, (, subtrahend]
[-, subtrahend, ., getImaginary, (, ), ), ;, }, public, Complex, subtract, (, double, subtrahend, ), {, if, (, isNaN]
[), ;, }, public, Complex, subtract, (, double, subtrahend, ), {, if, (, isNaN, ||, Double, ., isNaN, (, subtrahend]
[., getImaginary, (, ), ), ;, }, public, Complex, subtract, (, double, subtrahend, ), {, if, (, isNaN, ||, Double]
[), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ,, imaginary, ), ;, }, public, Complex, acos]
[||, Double, ., isNaN, (, subtrahend, ), ), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ,]
[), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ,, imaginary, ), ;, }, public, Complex, acos]
[., isNaN, (, subtrahend, ), ), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ,, imaginary, )]
[), ), {, return, NaN, ;, }, return, createComplex, (, real, -, subtrahend, ,, imaginary, ), ;, }, public, Complex]
[;, }, return, createComplex, (, real, -, subtrahend, ,, imaginary, ), ;, }, public, Complex, acos, (, ), {, if]
[;, }, public, Complex, acos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, this, .]
[,, imaginary, ), ;, }, public, Complex, acos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }]
[-, subtrahend, ,, imaginary, ), ;, }, public, Complex, acos, (, ), {, if, (, isNaN, ), {, return, NaN]
[,, imaginary, ), ;, }, public, Complex, acos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }]
[), ;, }, public, Complex, acos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, this]
[), {, return, NaN, ;, }, return, this, ., add, (, this, ., sqrt1z, (, ), ., multiply, (, I]
[;, }, return, this, ., add, (, this, ., sqrt1z, (, ), ., multiply, (, I, ), ), ., log]
[;, }, public, Complex, asin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, sqrt1z, (]
[., multiply, (, I, ., negate, (, ), ), ;, }, public, Complex, asin, (, ), {, if, (, isNaN]
[., log, (, ), ., multiply, (, I, ., negate, (, ), ), ;, }, public, Complex, asin, (, )]
[., add, (, this, ., sqrt1z, (, ), ., multiply, (, I, ), ), ., log, (, ), ., multiply]
[), ., log, (, ), ., multiply, (, I, ., negate, (, ), ), ;, }, public, Complex, asin, (]
[., multiply, (, I, ), ), ., log, (, ), ., multiply, (, I, ., negate, (, ), ), ;]
[., sqrt1z, (, ), ., multiply, (, I, ), ), ., log, (, ), ., multiply, (, I, ., negate]
[), ), ., log, (, ), ., multiply, (, I, ., negate, (, ), ), ;, }, public, Complex, asin]
[), ;, }, public, Complex, asin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, sqrt1z]
[., negate, (, ), ), ;, }, public, Complex, asin, (, ), {, if, (, isNaN, ), {, return, NaN]
[), {, return, NaN, ;, }, return, sqrt1z, (, ), ., add, (, this, ., multiply, (, I, ), )]
[;, }, return, sqrt1z, (, ), ., add, (, this, ., multiply, (, I, ), ), ., log, (, )]
[;, }, public, Complex, atan, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, this, .]
[., multiply, (, I, ., negate, (, ), ), ;, }, public, Complex, atan, (, ), {, if, (, isNaN]
[., log, (, ), ., multiply, (, I, ., negate, (, ), ), ;, }, public, Complex, atan, (, )]
[., add, (, this, ., multiply, (, I, ), ), ., log, (, ), ., multiply, (, I, ., negate]
[), ., log, (, ), ., multiply, (, I, ., negate, (, ), ), ;, }, public, Complex, atan, (]
[., multiply, (, I, ), ), ., log, (, ), ., multiply, (, I, ., negate, (, ), ), ;]
[), ), ., log, (, ), ., multiply, (, I, ., negate, (, ), ), ;, }, public, Complex, atan]
[), ;, }, public, Complex, atan, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, this]
[., negate, (, ), ), ;, }, public, Complex, atan, (, ), {, if, (, isNaN, ), {, return, NaN]
[), {, return, NaN, ;, }, return, this, ., add, (, I, ), ., divide, (, I, ., subtract, (]
[;, }, return, this, ., add, (, I, ), ., divide, (, I, ., subtract, (, this, ), ), .]
[;, }, public, Complex, cos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[., multiply, (, I, ., divide, (, createComplex, (, 2.0, ,, 0.0, ), ), ), ;, }, public, Complex, cos]
[., log, (, ), ., multiply, (, I, ., divide, (, createComplex, (, 2.0, ,, 0.0, ), ), ), ;]
[., divide, (, I, ., subtract, (, this, ), ), ., log, (, ), ., multiply, (, I, ., divide]
[., add, (, I, ), ., divide, (, I, ., subtract, (, this, ), ), ., log, (, ), .]
[), ., divide, (, I, ., subtract, (, this, ), ), ., log, (, ), ., multiply, (, I, .]
[), ., log, (, ), ., multiply, (, I, ., divide, (, createComplex, (, 2.0, ,, 0.0, ), ), )]
[., subtract, (, this, ), ), ., log, (, ), ., multiply, (, I, ., divide, (, createComplex, (, 2.0]
[), ), ., log, (, ), ., multiply, (, I, ., divide, (, createComplex, (, 2.0, ,, 0.0, ), )]
[), ;, }, public, Complex, cos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex]
[., divide, (, createComplex, (, 2.0, ,, 0.0, ), ), ), ;, }, public, Complex, cos, (, ), {, if]
[), ), ;, }, public, Complex, cos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[,, 0.0, ), ), ), ;, }, public, Complex, cos, (, ), {, if, (, isNaN, ), {, return, NaN]
[), ), ), ;, }, public, Complex, cos, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }]
[), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., cos, (, real, ), *, FastMath, ., cosh, (]
[;, }, return, createComplex, (, FastMath, ., cos, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,, -]
[;, }, public, Complex, cosh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[,, -, FastMath, ., sin, (, real, ), *, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex]
[*, FastMath, ., cosh, (, imaginary, ), ,, -, FastMath, ., sin, (, real, ), *, FastMath, ., sinh, (]
[., cos, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,, -, FastMath, ., sin, (, real, )]
[), *, FastMath, ., cosh, (, imaginary, ), ,, -, FastMath, ., sin, (, real, ), *, FastMath, ., sinh]
[,, -, FastMath, ., sin, (, real, ), *, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex]
[., cosh, (, imaginary, ), ,, -, FastMath, ., sin, (, real, ), *, FastMath, ., sinh, (, imaginary, )]
[), ,, -, FastMath, ., sin, (, real, ), *, FastMath, ., sinh, (, imaginary, ), ), ;, }, public]
[), ;, }, public, Complex, cosh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex]
[*, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex, cosh, (, ), {, if, (, isNaN, )]
[*, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex, cosh, (, ), {, if, (, isNaN, )]
[., sin, (, real, ), *, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex, cosh, (, )]
[), *, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex, cosh, (, ), {, if, (, isNaN]
[), ;, }, public, Complex, cosh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex]
[., sinh, (, imaginary, ), ), ;, }, public, Complex, cosh, (, ), {, if, (, isNaN, ), {, return]
[), ), ;, }, public, Complex, cosh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., cosh, (, real, ), *, FastMath, ., cos, (]
[;, }, return, createComplex, (, FastMath, ., cosh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,, FastMath]
[;, }, public, Complex, exp, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, double, expReal, =]
[,, FastMath, ., sinh, (, real, ), *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, exp]
[*, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., sinh, (, real, ), *, FastMath, ., sin, (, imaginary]
[., cosh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., sinh, (, real, ), *]
[), *, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., sinh, (, real, ), *, FastMath, ., sin, (]
[,, FastMath, ., sinh, (, real, ), *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, exp]
[., cos, (, imaginary, ), ,, FastMath, ., sinh, (, real, ), *, FastMath, ., sin, (, imaginary, ), )]
[), ,, FastMath, ., sinh, (, real, ), *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex]
[), ;, }, public, Complex, exp, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, double, expReal]
[*, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, exp, (, ), {, if, (, isNaN, )]
[., sinh, (, real, ), *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, exp, (, )]
[), *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, exp, (, ), {, if, (, isNaN]
[), ;, }, public, Complex, exp, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, double, expReal]
[., sin, (, imaginary, ), ), ;, }, public, Complex, exp, (, ), {, if, (, isNaN, ), {, return]
[), ), ;, }, public, Complex, exp, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, double]
[), {, return, NaN, ;, }, double, expReal, =, FastMath, ., exp, (, real, ), ;, return, createComplex, (, expReal]
[;, }, double, expReal, =, FastMath, ., exp, (, real, ), ;, return, createComplex, (, expReal, *, FastMath, ., cos]
[;, return, createComplex, (, expReal, *, FastMath, ., cos, (, imaginary, ), ,, expReal, *, FastMath, ., sin, (, imaginary]
[., exp, (, real, ), ;, return, createComplex, (, expReal, *, FastMath, ., cos, (, imaginary, ), ,, expReal, *]
[), ;, return, createComplex, (, expReal, *, FastMath, ., cos, (, imaginary, ), ,, expReal, *, FastMath, ., sin, (]
[;, }, public, Complex, log, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[,, expReal, *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, log, (, ), {, if, (]
[*, FastMath, ., cos, (, imaginary, ), ,, expReal, *, FastMath, ., sin, (, imaginary, ), ), ;, }, public]
[,, expReal, *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, log, (, ), {, if, (]
[., cos, (, imaginary, ), ,, expReal, *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, log]
[), ,, expReal, *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, log, (, ), {, if]
[), ;, }, public, Complex, log, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex]
[*, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, log, (, ), {, if, (, isNaN, )]
[), ;, }, public, Complex, log, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex]
[., sin, (, imaginary, ), ), ;, }, public, Complex, log, (, ), {, if, (, isNaN, ), {, return]
[), ), ;, }, public, Complex, log, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., log, (, abs, (, ), ), ,, FastMath, .]
[;, }, return, createComplex, (, FastMath, ., log, (, abs, (, ), ), ,, FastMath, ., atan2, (, imaginary, ,]
[;, }, public, Complex, pow, (, Complex, x, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, x, ), ;, return]
[,, FastMath, ., atan2, (, imaginary, ,, real, ), ), ;, }, public, Complex, pow, (, Complex, x, ), throws]
[., log, (, abs, (, ), ), ,, FastMath, ., atan2, (, imaginary, ,, real, ), ), ;, }, public]
[), ,, FastMath, ., atan2, (, imaginary, ,, real, ), ), ;, }, public, Complex, pow, (, Complex, x, )]
[), ;, }, public, Complex, pow, (, Complex, x, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, x, ), ;]
[., atan2, (, imaginary, ,, real, ), ), ;, }, public, Complex, pow, (, Complex, x, ), throws, NullArgumentException, {]
[,, real, ), ), ;, }, public, Complex, pow, (, Complex, x, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[), ), ;, }, public, Complex, pow, (, Complex, x, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, x, )]
[;, return, this, ., log, (, ), ., multiply, (, x, ), ., exp, (, ), ;, }, public, Complex]
[., checkNotNull, (, x, ), ;, return, this, ., log, (, ), ., multiply, (, x, ), ., exp, (]
[), ;, return, this, ., log, (, ), ., multiply, (, x, ), ., exp, (, ), ;, }, public]
[;, }, public, Complex, pow, (, double, x, ), {, return, this, ., log, (, ), ., multiply, (, x]
[., exp, (, ), ;, }, public, Complex, pow, (, double, x, ), {, return, this, ., log, (, )]
[., multiply, (, x, ), ., exp, (, ), ;, }, public, Complex, pow, (, double, x, ), {, return]
[., log, (, ), ., multiply, (, x, ), ., exp, (, ), ;, }, public, Complex, pow, (, double]
[), ., exp, (, ), ;, }, public, Complex, pow, (, double, x, ), {, return, this, ., log, (]
[;, }, public, Complex, sin, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[., exp, (, ), ;, }, public, Complex, sin, (, ), {, if, (, isNaN, ), {, return, NaN, ;]
[., multiply, (, x, ), ., exp, (, ), ;, }, public, Complex, sin, (, ), {, if, (, isNaN]
[., log, (, ), ., multiply, (, x, ), ., exp, (, ), ;, }, public, Complex, sin, (, )]
[), ., exp, (, ), ;, }, public, Complex, sin, (, ), {, if, (, isNaN, ), {, return, NaN]
[), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., sin, (, real, ), *, FastMath, ., cosh, (]
[;, }, return, createComplex, (, FastMath, ., sin, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,, FastMath]
[;, }, public, Complex, sinh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex, (]
[,, FastMath, ., cos, (, real, ), *, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex, sinh]
[*, FastMath, ., cosh, (, imaginary, ), ,, FastMath, ., cos, (, real, ), *, FastMath, ., sinh, (, imaginary]
[., sin, (, real, ), *, FastMath, ., cosh, (, imaginary, ), ,, FastMath, ., cos, (, real, ), *]
[), *, FastMath, ., cosh, (, imaginary, ), ,, FastMath, ., cos, (, real, ), *, FastMath, ., sinh, (]
[,, FastMath, ., cos, (, real, ), *, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex, sinh]
[., cosh, (, imaginary, ), ,, FastMath, ., cos, (, real, ), *, FastMath, ., sinh, (, imaginary, ), )]
[), ,, FastMath, ., cos, (, real, ), *, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex]
[), ;, }, public, Complex, sinh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex]
[*, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex, sinh, (, ), {, if, (, isNaN, )]
[., cos, (, real, ), *, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex, sinh, (, )]
[), *, FastMath, ., sinh, (, imaginary, ), ), ;, }, public, Complex, sinh, (, ), {, if, (, isNaN]
[), ;, }, public, Complex, sinh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return, createComplex]
[., sinh, (, imaginary, ), ), ;, }, public, Complex, sinh, (, ), {, if, (, isNaN, ), {, return]
[), ), ;, }, public, Complex, sinh, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, return]
[), {, return, NaN, ;, }, return, createComplex, (, FastMath, ., sinh, (, real, ), *, FastMath, ., cos, (]
[;, }, return, createComplex, (, FastMath, ., sinh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,, FastMath]
[;, }, public, Complex, sqrt, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (, real]
[,, FastMath, ., cosh, (, real, ), *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, sqrt]
[*, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., cosh, (, real, ), *, FastMath, ., sin, (, imaginary]
[., sinh, (, real, ), *, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., cosh, (, real, ), *]
[), *, FastMath, ., cos, (, imaginary, ), ,, FastMath, ., cosh, (, real, ), *, FastMath, ., sin, (]
[,, FastMath, ., cosh, (, real, ), *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, sqrt]
[., cos, (, imaginary, ), ,, FastMath, ., cosh, (, real, ), *, FastMath, ., sin, (, imaginary, ), )]
[), ,, FastMath, ., cosh, (, real, ), *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex]
[), ;, }, public, Complex, sqrt, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (]
[*, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, sqrt, (, ), {, if, (, isNaN, )]
[., cosh, (, real, ), *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, sqrt, (, )]
[), *, FastMath, ., sin, (, imaginary, ), ), ;, }, public, Complex, sqrt, (, ), {, if, (, isNaN]
[), ;, }, public, Complex, sqrt, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if, (]
[., sin, (, imaginary, ), ), ;, }, public, Complex, sqrt, (, ), {, if, (, isNaN, ), {, return]
[), ), ;, }, public, Complex, sqrt, (, ), {, if, (, isNaN, ), {, return, NaN, ;, }, if]
[), {, return, NaN, ;, }, if, (, real, ==, 0.0, &&, imaginary, ==, 0.0, ), {, return, createComplex, (]
[;, }, if, (, real, ==, 0.0, &&, imaginary, ==, 0.0, ), {, return, createComplex, (, 0.0, ,, 0.0, )]
[), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =, FastMath, ., sqrt, (, (, FastMath]
[&&, imaginary, ==, 0.0, ), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =, FastMath, .]
[==, 0.0, &&, imaginary, ==, 0.0, ), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =]
[&&, imaginary, ==, 0.0, ), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =, FastMath, .]
[), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =, FastMath, ., sqrt, (, (, FastMath]
[==, 0.0, ), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =, FastMath, ., sqrt, (]
[), {, return, createComplex, (, 0.0, ,, 0.0, ), ;, }, double, t, =, FastMath, ., sqrt, (, (, FastMath]
[;, }, double, t, =, FastMath, ., sqrt, (, (, FastMath, ., abs, (, real, ), +, abs, (, )]
[,, 0.0, ), ;, }, double, t, =, FastMath, ., sqrt, (, (, FastMath, ., abs, (, real, ), +]
[), ;, }, double, t, =, FastMath, ., sqrt, (, (, FastMath, ., abs, (, real, ), +, abs, (]
[;, if, (, real, >=, 0.0, ), {, return, createComplex, (, t, ,, imaginary, /, (, 2.0, *, t, )]
[., sqrt, (, (, FastMath, ., abs, (, real, ), +, abs, (, ), ), /, 2.0, ), ;, if]
[), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (, t, ,, imaginary, /, (, 2.0, *, t]
[/, 2.0, ), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (, t, ,, imaginary, /, (, 2.0]
[), /, 2.0, ), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (, t, ,, imaginary, /, (]
[+, abs, (, ), ), /, 2.0, ), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (, t]
[., abs, (, real, ), +, abs, (, ), ), /, 2.0, ), ;, if, (, real, >=, 0.0, )]
[), +, abs, (, ), ), /, 2.0, ), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (]
[), /, 2.0, ), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (, t, ,, imaginary, /, (]
[), ;, if, (, real, >=, 0.0, ), {, return, createComplex, (, t, ,, imaginary, /, (, 2.0, *, t]
[), {, return, createComplex, (, t, ,, imaginary, /, (, 2.0, *, t, ), ), ;, }, else, {, return]
[>=, 0.0, ), {, return, createComplex, (, t, ,, imaginary, /, (, 2.0, *, t, ), ), ;, }, else]
[), {, return, createComplex, (, t, ,, imaginary, /, (, 2.0, *, t, ), ), ;, }, else, {, return]
[;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, ), /, (, 2.0, *, t, ), ,]
[,, imaginary, /, (, 2.0, *, t, ), ), ;, }, else, {, return, createComplex, (, FastMath, ., abs, (]
[), ;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, ), /, (, 2.0, *, t, )]
[/, (, 2.0, *, t, ), ), ;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, )]
[), ;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, ), /, (, 2.0, *, t, )]
[), ), ;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, ), /, (, 2.0, *, t]
[*, t, ), ), ;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, ), /, (, 2.0]
[), ), ;, }, else, {, return, createComplex, (, FastMath, ., abs, (, imaginary, ), /, (, 2.0, *, t]
[;, }, }, public, Complex, sqrt1z, (, ), {, return, createComplex, (, 1.0, ,, 0.0, ), ., subtract, (, this]
[,, FastMath, ., copySign, (, 1d, ,, imaginary, ), *, t, ), ;, }, }, public, Complex, sqrt1z, (, )]
[/, (, 2.0, *, t, ), ,, FastMath, ., copySign, (, 1d, ,, imaginary, ), *, t, ), ;, }]
[., abs, (, imaginary, ), /, (, 2.0, *, t, ), ,, FastMath, ., copySign, (, 1d, ,, imaginary, )]
[), /, (, 2.0, *, t, ), ,, FastMath, ., copySign, (, 1d, ,, imaginary, ), *, t, ), ;]
[,, FastMath, ., copySign, (, 1d, ,, imaginary, ), *, t, ), ;, }, }, public, Complex, sqrt1z, (, )]
[), ,, FastMath, ., copySign, (, 1d, ,, imaginary, ), *, t, ), ;, }, }, public, Complex, sqrt1z, (]
[*, t, ), ,, FastMath, ., copySign, (, 1d, ,, imaginary, ), *, t, ), ;, }, }, public, Complex]
[), ,, FastMath, ., copySign, (, 1d, ,, imaginary, ), *, t, ), ;, }, }, public, Complex, sqrt1z, (]
[), ;, }, }, public, Complex, sqrt1z, (, ), {, return, createComplex, (, 1.0, ,, 0.0, ), ., subtract, (]
[*, t, ), ;, }, }, public, Complex, sqrt1z, (, ), {, return, createComplex, (, 1.0, ,, 0.0, ), .]
[., copySign, (, 1d, ,, imaginary, ), *, t, ), ;, }, }, public, Complex, sqrt1z, (, ), {, return]
[,, imaginary, ), *, t, ), ;, }, }, public, Complex, sqrt1z, (, ), {, return, createComplex, (, 1.0, ,]
[), *, t, ), ;, }, }, public, Complex, sqrt1z, (, ), {, return, createComplex, (, 1.0, ,, 0.0, )]
[), ;, }, }, public, Complex, sqrt1z, (, ), {, return, createComplex, (, 1.0, ,, 0.0, ), ., subtract, (]
[;, }, public, Complex, tan, (, ), {, if, (, isNaN, ||, Double, ., isInfinite, (, real, ), ), {]
[., sqrt, (, ), ;, }, public, Complex, tan, (, ), {, if, (, isNaN, ||, Double, ., isInfinite, (]
[., subtract, (, this, ., multiply, (, this, ), ), ., sqrt, (, ), ;, }, public, Complex, tan, (]
[,, 0.0, ), ., subtract, (, this, ., multiply, (, this, ), ), ., sqrt, (, ), ;, }, public]
[), ., subtract, (, this, ., multiply, (, this, ), ), ., sqrt, (, ), ;, }, public, Complex, tan]
[), ., sqrt, (, ), ;, }, public, Complex, tan, (, ), {, if, (, isNaN, ||, Double, ., isInfinite]
[., multiply, (, this, ), ), ., sqrt, (, ), ;, }, public, Complex, tan, (, ), {, if, (]
[), ), ., sqrt, (, ), ;, }, public, Complex, tan, (, ), {, if, (, isNaN, ||, Double, .]
[), {, return, NaN, ;, }, if, (, imaginary, >, 20.0, ), {, return, createComplex, (, 0.0, ,, 1.0, )]
[||, Double, ., isInfinite, (, real, ), ), {, return, NaN, ;, }, if, (, imaginary, >, 20.0, ), {]
[), {, return, NaN, ;, }, if, (, imaginary, >, 20.0, ), {, return, createComplex, (, 0.0, ,, 1.0, )]
[., isInfinite, (, real, ), ), {, return, NaN, ;, }, if, (, imaginary, >, 20.0, ), {, return, createComplex]
[), ), {, return, NaN, ;, }, if, (, imaginary, >, 20.0, ), {, return, createComplex, (, 0.0, ,, 1.0]
[;, }, if, (, imaginary, >, 20.0, ), {, return, createComplex, (, 0.0, ,, 1.0, ), ;, }, if, (]
[), {, return, createComplex, (, 0.0, ,, 1.0, ), ;, }, if, (, imaginary, <, -, 20.0, ), {, return]
[>, 20.0, ), {, return, createComplex, (, 0.0, ,, 1.0, ), ;, }, if, (, imaginary, <, -, 20.0, )]
[), {, return, createComplex, (, 0.0, ,, 1.0, ), ;, }, if, (, imaginary, <, -, 20.0, ), {, return]
[;, }, if, (, imaginary, <, -, 20.0, ), {, return, createComplex, (, 0.0, ,, -, 1.0, ), ;, }]
[,, 1.0, ), ;, }, if, (, imaginary, <, -, 20.0, ), {, return, createComplex, (, 0.0, ,, -, 1.0]
[), ;, }, if, (, imaginary, <, -, 20.0, ), {, return, createComplex, (, 0.0, ,, -, 1.0, ), ;]
[), {, return, createComplex, (, 0.0, ,, -, 1.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double]
[<, -, 20.0, ), {, return, createComplex, (, 0.0, ,, -, 1.0, ), ;, }, double, real2, =, 2.0, *]
[), {, return, createComplex, (, 0.0, ,, -, 1.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double]
[), {, return, createComplex, (, 0.0, ,, -, 1.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double]
[;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath]
[,, -, 1.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;]
[), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =]
[), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =]
[;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cos, (, real2, ), +, FastMath, .]
[*, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cos, (, real2, ), +]
[;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cos, (, real2, ), +, FastMath, .]
[;, double, d, =, FastMath, ., cos, (, real2, ), +, FastMath, ., cosh, (, imaginary2, ), ;, return, createComplex]
[*, imaginary, ;, double, d, =, FastMath, ., cos, (, real2, ), +, FastMath, ., cosh, (, imaginary2, ), ;]
[;, double, d, =, FastMath, ., cos, (, real2, ), +, FastMath, ., cosh, (, imaginary2, ), ;, return, createComplex]
[;, return, createComplex, (, FastMath, ., sin, (, real2, ), /, d, ,, FastMath, ., sinh, (, imaginary2, ), /]
[+, FastMath, ., cosh, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sin, (, real2, ), /, d, ,]
[., cos, (, real2, ), +, FastMath, ., cosh, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sin, (]
[), +, FastMath, ., cosh, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sin, (, real2, ), /, d]
[;, return, createComplex, (, FastMath, ., sin, (, real2, ), /, d, ,, FastMath, ., sinh, (, imaginary2, ), /]
[., cosh, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sin, (, real2, ), /, d, ,, FastMath, .]
[), ;, return, createComplex, (, FastMath, ., sin, (, real2, ), /, d, ,, FastMath, ., sinh, (, imaginary2, )]
[;, }, public, Complex, tanh, (, ), {, if, (, isNaN, ||, Double, ., isInfinite, (, imaginary, ), ), {]
[,, FastMath, ., sinh, (, imaginary2, ), /, d, ), ;, }, public, Complex, tanh, (, ), {, if, (]
[/, d, ,, FastMath, ., sinh, (, imaginary2, ), /, d, ), ;, }, public, Complex, tanh, (, ), {]
[., sin, (, real2, ), /, d, ,, FastMath, ., sinh, (, imaginary2, ), /, d, ), ;, }, public]
[), /, d, ,, FastMath, ., sinh, (, imaginary2, ), /, d, ), ;, }, public, Complex, tanh, (, )]
[,, FastMath, ., sinh, (, imaginary2, ), /, d, ), ;, }, public, Complex, tanh, (, ), {, if, (]
[), ;, }, public, Complex, tanh, (, ), {, if, (, isNaN, ||, Double, ., isInfinite, (, imaginary, ), )]
[/, d, ), ;, }, public, Complex, tanh, (, ), {, if, (, isNaN, ||, Double, ., isInfinite, (, imaginary]
[., sinh, (, imaginary2, ), /, d, ), ;, }, public, Complex, tanh, (, ), {, if, (, isNaN, ||]
[), /, d, ), ;, }, public, Complex, tanh, (, ), {, if, (, isNaN, ||, Double, ., isInfinite, (]
[), ;, }, public, Complex, tanh, (, ), {, if, (, isNaN, ||, Double, ., isInfinite, (, imaginary, ), )]
[), {, return, NaN, ;, }, if, (, real, >, 20.0, ), {, return, createComplex, (, 1.0, ,, 0.0, )]
[||, Double, ., isInfinite, (, imaginary, ), ), {, return, NaN, ;, }, if, (, real, >, 20.0, ), {]
[), {, return, NaN, ;, }, if, (, real, >, 20.0, ), {, return, createComplex, (, 1.0, ,, 0.0, )]
[., isInfinite, (, imaginary, ), ), {, return, NaN, ;, }, if, (, real, >, 20.0, ), {, return, createComplex]
[), ), {, return, NaN, ;, }, if, (, real, >, 20.0, ), {, return, createComplex, (, 1.0, ,, 0.0]
[;, }, if, (, real, >, 20.0, ), {, return, createComplex, (, 1.0, ,, 0.0, ), ;, }, if, (]
[), {, return, createComplex, (, 1.0, ,, 0.0, ), ;, }, if, (, real, <, -, 20.0, ), {, return]
[>, 20.0, ), {, return, createComplex, (, 1.0, ,, 0.0, ), ;, }, if, (, real, <, -, 20.0, )]
[), {, return, createComplex, (, 1.0, ,, 0.0, ), ;, }, if, (, real, <, -, 20.0, ), {, return]
[;, }, if, (, real, <, -, 20.0, ), {, return, createComplex, (, -, 1.0, ,, 0.0, ), ;, }]
[,, 0.0, ), ;, }, if, (, real, <, -, 20.0, ), {, return, createComplex, (, -, 1.0, ,, 0.0]
[), ;, }, if, (, real, <, -, 20.0, ), {, return, createComplex, (, -, 1.0, ,, 0.0, ), ;]
[), {, return, createComplex, (, -, 1.0, ,, 0.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double]
[<, -, 20.0, ), {, return, createComplex, (, -, 1.0, ,, 0.0, ), ;, }, double, real2, =, 2.0, *]
[), {, return, createComplex, (, -, 1.0, ,, 0.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double]
[), {, return, createComplex, (, -, 1.0, ,, 0.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double]
[;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath]
[,, 0.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double]
[,, 0.0, ), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double]
[), ;, }, double, real2, =, 2.0, *, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =]
[;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cosh, (, real2, ), +, FastMath, .]
[*, real, ;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cosh, (, real2, ), +]
[;, double, imaginary2, =, 2.0, *, imaginary, ;, double, d, =, FastMath, ., cosh, (, real2, ), +, FastMath, .]
[;, double, d, =, FastMath, ., cosh, (, real2, ), +, FastMath, ., cos, (, imaginary2, ), ;, return, createComplex]
[*, imaginary, ;, double, d, =, FastMath, ., cosh, (, real2, ), +, FastMath, ., cos, (, imaginary2, ), ;]
[;, double, d, =, FastMath, ., cosh, (, real2, ), +, FastMath, ., cos, (, imaginary2, ), ;, return, createComplex]
[;, return, createComplex, (, FastMath, ., sinh, (, real2, ), /, d, ,, FastMath, ., sin, (, imaginary2, ), /]
[+, FastMath, ., cos, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sinh, (, real2, ), /, d, ,]
[., cosh, (, real2, ), +, FastMath, ., cos, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sinh, (]
[), +, FastMath, ., cos, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sinh, (, real2, ), /, d]
[;, return, createComplex, (, FastMath, ., sinh, (, real2, ), /, d, ,, FastMath, ., sin, (, imaginary2, ), /]
[., cos, (, imaginary2, ), ;, return, createComplex, (, FastMath, ., sinh, (, real2, ), /, d, ,, FastMath, .]
[), ;, return, createComplex, (, FastMath, ., sinh, (, real2, ), /, d, ,, FastMath, ., sin, (, imaginary2, )]
[;, }, public, double, getArgument, (, ), {, return, FastMath, ., atan2, (, getImaginary, (, ), ,, getReal, (, )]
[,, FastMath, ., sin, (, imaginary2, ), /, d, ), ;, }, public, double, getArgument, (, ), {, return, FastMath]
[/, d, ,, FastMath, ., sin, (, imaginary2, ), /, d, ), ;, }, public, double, getArgument, (, ), {]
[., sinh, (, real2, ), /, d, ,, FastMath, ., sin, (, imaginary2, ), /, d, ), ;, }, public]
[), /, d, ,, FastMath, ., sin, (, imaginary2, ), /, d, ), ;, }, public, double, getArgument, (, )]
[,, FastMath, ., sin, (, imaginary2, ), /, d, ), ;, }, public, double, getArgument, (, ), {, return, FastMath]
[), ;, }, public, double, getArgument, (, ), {, return, FastMath, ., atan2, (, getImaginary, (, ), ,, getReal, (]
[/, d, ), ;, }, public, double, getArgument, (, ), {, return, FastMath, ., atan2, (, getImaginary, (, ), ,]
[., sin, (, imaginary2, ), /, d, ), ;, }, public, double, getArgument, (, ), {, return, FastMath, ., atan2]
[), /, d, ), ;, }, public, double, getArgument, (, ), {, return, FastMath, ., atan2, (, getImaginary, (, )]
[), ;, }, public, double, getArgument, (, ), {, return, FastMath, ., atan2, (, getImaginary, (, ), ,, getReal, (]
[;, }, public, List, <, Complex, >, nthRoot, (, int, n, ), throws, NotPositiveException, {, if, (, n, <=, 0]
[., atan2, (, getImaginary, (, ), ,, getReal, (, ), ), ;, }, public, List, <, Complex, >, nthRoot, (]
[,, getReal, (, ), ), ;, }, public, List, <, Complex, >, nthRoot, (, int, n, ), throws, NotPositiveException, {]
[), ;, }, public, List, <, Complex, >, nthRoot, (, int, n, ), throws, NotPositiveException, {, if, (, n, <=]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, ,, n, ), ;, }, final, List, <, Complex, >, result]
[<=, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, ,, n, ), ;, }, final, List, <, Complex]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, ,, n, ), ;, }, final, List, <, Complex, >, result]
[;, }, final, List, <, Complex, >, result, =, new, ArrayList, <, Complex, >, (, ), ;, if, (, isNaN]
[,, n, ), ;, }, final, List, <, Complex, >, result, =, new, ArrayList, <, Complex, >, (, ), ;]
[., CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, ,, n, ), ;, }, final, List, <, Complex, >, result, =, new, ArrayList, <, Complex, >, (]
[), ;, }, final, List, <, Complex, >, result, =, new, ArrayList, <, Complex, >, (, ), ;, if, (]
[;, if, (, isNaN, ), {, result, ., add, (, NaN, ), ;, return, result, ;, }, if, (, isInfinite]
[), {, result, ., add, (, NaN, ), ;, return, result, ;, }, if, (, isInfinite, (, ), ), {]
[;, return, result, ;, }, if, (, isInfinite, (, ), ), {, result, ., add, (, INF, ), ;, return]
[., add, (, NaN, ), ;, return, result, ;, }, if, (, isInfinite, (, ), ), {, result, ., add]
[), ;, return, result, ;, }, if, (, isInfinite, (, ), ), {, result, ., add, (, INF, ), ;]
[;, }, if, (, isInfinite, (, ), ), {, result, ., add, (, INF, ), ;, return, result, ;, }]
[), {, result, ., add, (, INF, ), ;, return, result, ;, }, final, double, nthRootOfAbs, =, FastMath, ., pow]
[;, return, result, ;, }, final, double, nthRootOfAbs, =, FastMath, ., pow, (, abs, (, ), ,, 1.0, /, n]
[., add, (, INF, ), ;, return, result, ;, }, final, double, nthRootOfAbs, =, FastMath, ., pow, (, abs, (]
[), ;, return, result, ;, }, final, double, nthRootOfAbs, =, FastMath, ., pow, (, abs, (, ), ,, 1.0, /]
[;, }, final, double, nthRootOfAbs, =, FastMath, ., pow, (, abs, (, ), ,, 1.0, /, n, ), ;, final]
[;, final, double, nthPhi, =, getArgument, (, ), /, n, ;, final, double, slice, =, 2, *, FastMath, ., PI]
[., pow, (, abs, (, ), ,, 1.0, /, n, ), ;, final, double, nthPhi, =, getArgument, (, ), /]
[,, 1.0, /, n, ), ;, final, double, nthPhi, =, getArgument, (, ), /, n, ;, final, double, slice, =]
[), ;, final, double, nthPhi, =, getArgument, (, ), /, n, ;, final, double, slice, =, 2, *, FastMath, .]
[/, n, ), ;, final, double, nthPhi, =, getArgument, (, ), /, n, ;, final, double, slice, =, 2, *]
[), ;, final, double, nthPhi, =, getArgument, (, ), /, n, ;, final, double, slice, =, 2, *, FastMath, .]
[;, final, double, slice, =, 2, *, FastMath, ., PI, /, n, ;, double, innerPart, =, nthPhi, ;, for, (]
[/, n, ;, final, double, slice, =, 2, *, FastMath, ., PI, /, n, ;, double, innerPart, =, nthPhi, ;]
[;, final, double, slice, =, 2, *, FastMath, ., PI, /, n, ;, double, innerPart, =, nthPhi, ;, for, (]
[;, double, innerPart, =, nthPhi, ;, for, (, int, k, =, 0, ;, k, <, n, ;, k, ++, )]
[/, n, ;, double, innerPart, =, nthPhi, ;, for, (, int, k, =, 0, ;, k, <, n, ;, k]
[*, FastMath, ., PI, /, n, ;, double, innerPart, =, nthPhi, ;, for, (, int, k, =, 0, ;, k]
[/, n, ;, double, innerPart, =, nthPhi, ;, for, (, int, k, =, 0, ;, k, <, n, ;, k]
[., PI, /, n, ;, double, innerPart, =, nthPhi, ;, for, (, int, k, =, 0, ;, k, <, n]
[;, double, innerPart, =, nthPhi, ;, for, (, int, k, =, 0, ;, k, <, n, ;, k, ++, )]
[;, for, (, int, k, =, 0, ;, k, <, n, ;, k, ++, ), {, final, double, realPart, =]
[;, k, <, n, ;, k, ++, ), {, final, double, realPart, =, nthRootOfAbs, *, FastMath, ., cos, (, innerPart]
[;, k, ++, ), {, final, double, realPart, =, nthRootOfAbs, *, FastMath, ., cos, (, innerPart, ), ;, final, double]
[<, n, ;, k, ++, ), {, final, double, realPart, =, nthRootOfAbs, *, FastMath, ., cos, (, innerPart, ), ;]
[;, k, ++, ), {, final, double, realPart, =, nthRootOfAbs, *, FastMath, ., cos, (, innerPart, ), ;, final, double]
[), {, final, double, realPart, =, nthRootOfAbs, *, FastMath, ., cos, (, innerPart, ), ;, final, double, imaginaryPart, =, nthRootOfAbs]
[++, ), {, final, double, realPart, =, nthRootOfAbs, *, FastMath, ., cos, (, innerPart, ), ;, final, double, imaginaryPart, =]
[;, final, double, imaginaryPart, =, nthRootOfAbs, *, FastMath, ., sin, (, innerPart, ), ;, result, ., add, (, createComplex, (]
[*, FastMath, ., cos, (, innerPart, ), ;, final, double, imaginaryPart, =, nthRootOfAbs, *, FastMath, ., sin, (, innerPart, )]
[;, final, double, imaginaryPart, =, nthRootOfAbs, *, FastMath, ., sin, (, innerPart, ), ;, result, ., add, (, createComplex, (]
[., cos, (, innerPart, ), ;, final, double, imaginaryPart, =, nthRootOfAbs, *, FastMath, ., sin, (, innerPart, ), ;, result]
[), ;, final, double, imaginaryPart, =, nthRootOfAbs, *, FastMath, ., sin, (, innerPart, ), ;, result, ., add, (, createComplex]
[;, result, ., add, (, createComplex, (, realPart, ,, imaginaryPart, ), ), ;, innerPart, +=, slice, ;, }, return, result]
[*, FastMath, ., sin, (, innerPart, ), ;, result, ., add, (, createComplex, (, realPart, ,, imaginaryPart, ), ), ;]
[;, result, ., add, (, createComplex, (, realPart, ,, imaginaryPart, ), ), ;, innerPart, +=, slice, ;, }, return, result]
[., sin, (, innerPart, ), ;, result, ., add, (, createComplex, (, realPart, ,, imaginaryPart, ), ), ;, innerPart, +=]
[), ;, result, ., add, (, createComplex, (, realPart, ,, imaginaryPart, ), ), ;, innerPart, +=, slice, ;, }, return]
[;, innerPart, +=, slice, ;, }, return, result, ;, }, protected, Complex, createComplex, (, double, realPart, ,, double, imaginaryPart, )]
[., add, (, createComplex, (, realPart, ,, imaginaryPart, ), ), ;, innerPart, +=, slice, ;, }, return, result, ;, }]
[), ;, innerPart, +=, slice, ;, }, return, result, ;, }, protected, Complex, createComplex, (, double, realPart, ,, double, imaginaryPart]
[,, imaginaryPart, ), ), ;, innerPart, +=, slice, ;, }, return, result, ;, }, protected, Complex, createComplex, (, double, realPart]
[), ), ;, innerPart, +=, slice, ;, }, return, result, ;, }, protected, Complex, createComplex, (, double, realPart, ,, double]
[+=, slice, ;, }, return, result, ;, }, protected, Complex, createComplex, (, double, realPart, ,, double, imaginaryPart, ), {, return]
[;, }, return, result, ;, }, protected, Complex, createComplex, (, double, realPart, ,, double, imaginaryPart, ), {, return, new, Complex]
[;, }, protected, Complex, createComplex, (, double, realPart, ,, double, imaginaryPart, ), {, return, new, Complex, (, realPart, ,, imaginaryPart]
[;, }, public, static, Complex, valueOf, (, double, realPart, ,, double, imaginaryPart, ), {, if, (, Double, ., isNaN, (]
[,, imaginaryPart, ), ;, }, public, static, Complex, valueOf, (, double, realPart, ,, double, imaginaryPart, ), {, if, (, Double]
[), ;, }, public, static, Complex, valueOf, (, double, realPart, ,, double, imaginaryPart, ), {, if, (, Double, ., isNaN]
[), {, return, NaN, ;, }, return, new, Complex, (, realPart, ,, imaginaryPart, ), ;, }, public, static, Complex, valueOf]
[||, Double, ., isNaN, (, imaginaryPart, ), ), {, return, NaN, ;, }, return, new, Complex, (, realPart, ,, imaginaryPart]
[., isNaN, (, realPart, ), ||, Double, ., isNaN, (, imaginaryPart, ), ), {, return, NaN, ;, }, return, new]
[), ||, Double, ., isNaN, (, imaginaryPart, ), ), {, return, NaN, ;, }, return, new, Complex, (, realPart, ,]
[), {, return, NaN, ;, }, return, new, Complex, (, realPart, ,, imaginaryPart, ), ;, }, public, static, Complex, valueOf]
[., isNaN, (, imaginaryPart, ), ), {, return, NaN, ;, }, return, new, Complex, (, realPart, ,, imaginaryPart, ), ;]
[), ), {, return, NaN, ;, }, return, new, Complex, (, realPart, ,, imaginaryPart, ), ;, }, public, static, Complex]
[;, }, return, new, Complex, (, realPart, ,, imaginaryPart, ), ;, }, public, static, Complex, valueOf, (, double, realPart, )]
[;, }, public, static, Complex, valueOf, (, double, realPart, ), {, if, (, Double, ., isNaN, (, realPart, ), )]
[,, imaginaryPart, ), ;, }, public, static, Complex, valueOf, (, double, realPart, ), {, if, (, Double, ., isNaN, (]
[), ;, }, public, static, Complex, valueOf, (, double, realPart, ), {, if, (, Double, ., isNaN, (, realPart, )]
[), {, return, NaN, ;, }, return, new, Complex, (, realPart, ), ;, }, protected, final, Object, readResolve, (, )]
[., isNaN, (, realPart, ), ), {, return, NaN, ;, }, return, new, Complex, (, realPart, ), ;, }, protected]
[), ), {, return, NaN, ;, }, return, new, Complex, (, realPart, ), ;, }, protected, final, Object, readResolve, (]
[;, }, return, new, Complex, (, realPart, ), ;, }, protected, final, Object, readResolve, (, ), {, return, createComplex, (]
[;, }, protected, final, Object, readResolve, (, ), {, return, createComplex, (, real, ,, imaginary, ), ;, }, public, ComplexField]
[), ;, }, protected, final, Object, readResolve, (, ), {, return, createComplex, (, real, ,, imaginary, ), ;, }, public]
[;, }, public, ComplexField, getField, (, ), {, return, ComplexField, ., getInstance, (, ), ;, }, @, Override, public, String]
[,, imaginary, ), ;, }, public, ComplexField, getField, (, ), {, return, ComplexField, ., getInstance, (, ), ;, }, @]
[), ;, }, public, ComplexField, getField, (, ), {, return, ComplexField, ., getInstance, (, ), ;, }, @, Override, public]
[;, }, @, Override, public, String, toString, (, ), {, return, "(", +, real, +, ", ", +, imaginary, +, ")"]
[., getInstance, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, "(", +, real, +, ", "]
[;, }, }]
[+, ")", ;, }, }]
[+, imaginary, +, ")", ;, }, }]
[+, ", ", +, imaginary, +, ")", ;, }, }]
[+, real, +, ", ", +, imaginary, +, ")", ;, }, }]
[+, ", ", +, imaginary, +, ")", ;, }, }]
[+, imaginary, +, ")", ;, }, }]
[+, ")", ;, }, }]
[;, }, }]
