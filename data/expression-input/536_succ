[;, compiler, ., report, (, error, ), ;, }, protected, void, reportCodeChange, (, ), {, Preconditions, ., checkNotNull, (, compiler]
[., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, diagnostic, ,, n, ., toString, (, ), )]
[,, n, ,, diagnostic, ,, n, ., toString, (, ), ), ;, compiler, ., report, (, error, ), ;, }]
[., getSourceName, (, n, ), ,, n, ,, diagnostic, ,, n, ., toString, (, ), ), ;, compiler, ., report]
[), ,, n, ,, diagnostic, ,, n, ., toString, (, ), ), ;, compiler, ., report, (, error, ), ;]
[,, diagnostic, ,, n, ., toString, (, ), ), ;, compiler, ., report, (, error, ), ;, }, protected, void]
[,, n, ., toString, (, ), ), ;, compiler, ., report, (, error, ), ;, }, protected, void, reportCodeChange, (]
[), ;, compiler, ., report, (, error, ), ;, }, protected, void, reportCodeChange, (, ), {, Preconditions, ., checkNotNull, (]
[., toString, (, ), ), ;, compiler, ., report, (, error, ), ;, }, protected, void, reportCodeChange, (, ), {]
[;, }, protected, void, reportCodeChange, (, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, compiler, ., reportCodeChange, (, )]
[., report, (, error, ), ;, }, protected, void, reportCodeChange, (, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;]
[), ;, }, protected, void, reportCodeChange, (, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, compiler, ., reportCodeChange, (]
[;, compiler, ., reportCodeChange, (, ), ;, }, protected, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, Preconditions]
[., checkNotNull, (, compiler, ), ;, compiler, ., reportCodeChange, (, ), ;, }, protected, boolean, areNodesEqualForInlining, (, Node, n1, ,]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, protected, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {]
[;, }, protected, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;]
[., reportCodeChange, (, ), ;, }, protected, boolean, areNodesEqualForInlining, (, Node, n1, ,, Node, n2, ), {, Preconditions, ., checkNotNull]
[;, return, compiler, ., areNodesEqualForInlining, (, n1, ,, n2, ), ;, }, protected, boolean, isASTNormalized, (, ), {, Preconditions, .]
[., checkNotNull, (, compiler, ), ;, return, compiler, ., areNodesEqualForInlining, (, n1, ,, n2, ), ;, }, protected, boolean, isASTNormalized]
[), ;, return, compiler, ., areNodesEqualForInlining, (, n1, ,, n2, ), ;, }, protected, boolean, isASTNormalized, (, ), {, Preconditions]
[;, }, protected, boolean, isASTNormalized, (, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, return, compiler, ., getLifeCycleStage, (]
[., areNodesEqualForInlining, (, n1, ,, n2, ), ;, }, protected, boolean, isASTNormalized, (, ), {, Preconditions, ., checkNotNull, (, compiler]
[,, n2, ), ;, }, protected, boolean, isASTNormalized, (, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, return, compiler]
[), ;, }, protected, boolean, isASTNormalized, (, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, return, compiler, ., getLifeCycleStage]
[;, return, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ;, }, void, beginTraversal, (, AbstractCompiler, compiler, ), {]
[., checkNotNull, (, compiler, ), ;, return, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ;, }, void, beginTraversal]
[), ;, return, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ;, }, void, beginTraversal, (, AbstractCompiler, compiler, )]
[;, }, void, beginTraversal, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, void, endTraversal, (, AbstractCompiler]
[., isNormalized, (, ), ;, }, void, beginTraversal, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ;, }, void, beginTraversal, (, AbstractCompiler, compiler, ), {, this, ., compiler]
[=, compiler, ;, }, void, endTraversal, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, null, ;, }, boolean, mayEffectMutableState]
[., compiler, =, compiler, ;, }, void, endTraversal, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, null, ;, }]
[;, }, void, endTraversal, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, null, ;, }, boolean, mayEffectMutableState, (, Node]
[=, null, ;, }, boolean, mayEffectMutableState, (, Node, n, ), {, return, NodeUtil, ., mayEffectMutableState, (, n, ,, compiler, )]
[., compiler, =, null, ;, }, boolean, mayEffectMutableState, (, Node, n, ), {, return, NodeUtil, ., mayEffectMutableState, (, n, ,]
[;, }, boolean, mayEffectMutableState, (, Node, n, ), {, return, NodeUtil, ., mayEffectMutableState, (, n, ,, compiler, ), ;, }]
[;, }, boolean, mayHaveSideEffects, (, Node, n, ), {, return, NodeUtil, ., mayHaveSideEffects, (, n, ,, compiler, ), ;, }]
[., mayEffectMutableState, (, n, ,, compiler, ), ;, }, boolean, mayHaveSideEffects, (, Node, n, ), {, return, NodeUtil, ., mayHaveSideEffects]
[,, compiler, ), ;, }, boolean, mayHaveSideEffects, (, Node, n, ), {, return, NodeUtil, ., mayHaveSideEffects, (, n, ,, compiler]
[), ;, }, boolean, mayHaveSideEffects, (, Node, n, ), {, return, NodeUtil, ., mayHaveSideEffects, (, n, ,, compiler, ), ;]
[;, }, boolean, nodeTypeMayHaveSideEffects, (, Node, n, ), {, return, NodeUtil, ., nodeTypeMayHaveSideEffects, (, n, ,, compiler, ), ;, }]
[., mayHaveSideEffects, (, n, ,, compiler, ), ;, }, boolean, nodeTypeMayHaveSideEffects, (, Node, n, ), {, return, NodeUtil, ., nodeTypeMayHaveSideEffects]
[,, compiler, ), ;, }, boolean, nodeTypeMayHaveSideEffects, (, Node, n, ), {, return, NodeUtil, ., nodeTypeMayHaveSideEffects, (, n, ,, compiler]
[), ;, }, boolean, nodeTypeMayHaveSideEffects, (, Node, n, ), {, return, NodeUtil, ., nodeTypeMayHaveSideEffects, (, n, ,, compiler, ), ;]
[;, }, boolean, isEcmaScript5OrGreater, (, ), {, return, compiler, !=, null, &&, compiler, ., acceptEcmaScript5, (, ), ;, }, CodingConvention]
[., nodeTypeMayHaveSideEffects, (, n, ,, compiler, ), ;, }, boolean, isEcmaScript5OrGreater, (, ), {, return, compiler, !=, null, &&, compiler]
[,, compiler, ), ;, }, boolean, isEcmaScript5OrGreater, (, ), {, return, compiler, !=, null, &&, compiler, ., acceptEcmaScript5, (, )]
[), ;, }, boolean, isEcmaScript5OrGreater, (, ), {, return, compiler, !=, null, &&, compiler, ., acceptEcmaScript5, (, ), ;, }]
[;, }, CodingConvention, getCodingConvention, (, ), {, return, compiler, ., getCodingConvention, (, ), ;, }, @, VisibleForTesting, static, Node, validateResult]
[&&, compiler, ., acceptEcmaScript5, (, ), ;, }, CodingConvention, getCodingConvention, (, ), {, return, compiler, ., getCodingConvention, (, ), ;]
[!=, null, &&, compiler, ., acceptEcmaScript5, (, ), ;, }, CodingConvention, getCodingConvention, (, ), {, return, compiler, ., getCodingConvention, (]
[&&, compiler, ., acceptEcmaScript5, (, ), ;, }, CodingConvention, getCodingConvention, (, ), {, return, compiler, ., getCodingConvention, (, ), ;]
[;, }, CodingConvention, getCodingConvention, (, ), {, return, compiler, ., getCodingConvention, (, ), ;, }, @, VisibleForTesting, static, Node, validateResult]
[., acceptEcmaScript5, (, ), ;, }, CodingConvention, getCodingConvention, (, ), {, return, compiler, ., getCodingConvention, (, ), ;, }, @]
[;, }, @, VisibleForTesting, static, Node, validateResult, (, Node, n, ), {, done, :, {, if, (, n, !=, null]
[., getCodingConvention, (, ), ;, }, @, VisibleForTesting, static, Node, validateResult, (, Node, n, ), {, done, :, {, if]
[), {, for, (, Node, parent, :, n, ., getAncestors, (, ), ), {, if, (, parent, ., isScript, (]
[&&, (, !, n, ., isBlock, (, ), ||, !, n, ., isSyntheticBlock, (, ), ), ), {, for, (]
[&&, !, n, ., isScript, (, ), &&, (, !, n, ., isBlock, (, ), ||, !, n, ., isSyntheticBlock]
[!=, null, &&, !, n, ., isScript, (, ), &&, (, !, n, ., isBlock, (, ), ||, !, n]
[&&, !, n, ., isScript, (, ), &&, (, !, n, ., isBlock, (, ), ||, !, n, ., isSyntheticBlock]
[&&, (, !, n, ., isBlock, (, ), ||, !, n, ., isSyntheticBlock, (, ), ), ), {, for, (]
[&&, (, !, n, ., isBlock, (, ), ||, !, n, ., isSyntheticBlock, (, ), ), ), {, for, (]
[., isScript, (, ), &&, (, !, n, ., isBlock, (, ), ||, !, n, ., isSyntheticBlock, (, ), )]
[), {, for, (, Node, parent, :, n, ., getAncestors, (, ), ), {, if, (, parent, ., isScript, (]
[), ), {, for, (, Node, parent, :, n, ., getAncestors, (, ), ), {, if, (, parent, ., isScript]
[||, !, n, ., isSyntheticBlock, (, ), ), ), {, for, (, Node, parent, :, n, ., getAncestors, (, )]
[||, !, n, ., isSyntheticBlock, (, ), ), ), {, for, (, Node, parent, :, n, ., getAncestors, (, )]
[., isBlock, (, ), ||, !, n, ., isSyntheticBlock, (, ), ), ), {, for, (, Node, parent, :, n]
[), ), {, for, (, Node, parent, :, n, ., getAncestors, (, ), ), {, if, (, parent, ., isScript]
[), ), {, for, (, Node, parent, :, n, ., getAncestors, (, ), ), {, if, (, parent, ., isScript]
[., isSyntheticBlock, (, ), ), ), {, for, (, Node, parent, :, n, ., getAncestors, (, ), ), {, if]
[), {, if, (, parent, ., isScript, (, ), ), {, break, done, ;, }, }, Preconditions, ., checkState, (]
[., getAncestors, (, ), ), {, if, (, parent, ., isScript, (, ), ), {, break, done, ;, }, }]
[), {, break, done, ;, }, }, Preconditions, ., checkState, (, false, ), ;, }, }, return, n, ;, }]
[., isScript, (, ), ), {, break, done, ;, }, }, Preconditions, ., checkState, (, false, ), ;, }, }]
[;, }, }, return, n, ;, }, }]
[., checkState, (, false, ), ;, }, }, return, n, ;, }, }]
[), ;, }, }, return, n, ;, }, }]
[;, }, }]
