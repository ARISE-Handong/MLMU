[=, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null, ;, this]
[., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null]
[;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null, ;, this, ., scale]
[=, observations, ., clone, (, ), ;, this, ., weights, =, null, ;, this, ., scale, =, null, ;, }]
[., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null, ;, this, ., scale, =, null]
[;, this, ., weights, =, null, ;, this, ., scale, =, null, ;, }, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function]
[., clone, (, ), ;, this, ., weights, =, null, ;, this, ., scale, =, null, ;, }, public, LeastSquaresConverter]
[=, null, ;, this, ., scale, =, null, ;, }, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, []
[., weights, =, null, ;, this, ., scale, =, null, ;, }, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final]
[;, this, ., scale, =, null, ;, }, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations]
[=, null, ;, }, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final, double, []
[., scale, =, null, ;, }, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final]
[;, }, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final, double, [, ], weights]
[), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, weights, ., length, ), ;, }, this, ., function, =]
[!=, weights, ., length, ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, weights, ., length, ), ;, }]
[., length, !=, weights, ., length, ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, weights, ., length, )]
[), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, weights, ., length, ), ;, }, this, ., function, =]
[., length, ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, weights, ., length, ), ;, }, this, .]
[;, }, this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, .]
[,, weights, ., length, ), ;, }, this, ., function, =, function, ;, this, ., observations, =, observations, ., clone]
[., length, ,, weights, ., length, ), ;, }, this, ., function, =, function, ;, this, ., observations, =, observations]
[), ;, }, this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this]
[., length, ), ;, }, this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, )]
[=, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, weights, ., clone]
[., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, weights]
[;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, weights, ., clone, (, )]
[=, observations, ., clone, (, ), ;, this, ., weights, =, weights, ., clone, (, ), ;, this, ., scale]
[., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, weights, ., clone, (, ), ;, this]
[;, this, ., weights, =, weights, ., clone, (, ), ;, this, ., scale, =, null, ;, }, public, LeastSquaresConverter]
[., clone, (, ), ;, this, ., weights, =, weights, ., clone, (, ), ;, this, ., scale, =, null]
[=, weights, ., clone, (, ), ;, this, ., scale, =, null, ;, }, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function]
[., weights, =, weights, ., clone, (, ), ;, this, ., scale, =, null, ;, }, public, LeastSquaresConverter, (, final]
[;, this, ., scale, =, null, ;, }, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations]
[., clone, (, ), ;, this, ., scale, =, null, ;, }, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final]
[=, null, ;, }, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final, RealMatrix, scale]
[., scale, =, null, ;, }, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final]
[;, }, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final, RealMatrix, scale, ), {]
[), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, scale, ., getColumnDimension, (, ), ), ;, }, this, .]
[!=, scale, ., getColumnDimension, (, ), ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, scale, ., getColumnDimension, (]
[., length, !=, scale, ., getColumnDimension, (, ), ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, scale, .]
[), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, scale, ., getColumnDimension, (, ), ), ;, }, this, .]
[., getColumnDimension, (, ), ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, scale, ., getColumnDimension, (, ), )]
[;, }, this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, .]
[,, scale, ., getColumnDimension, (, ), ), ;, }, this, ., function, =, function, ;, this, ., observations, =, observations]
[., length, ,, scale, ., getColumnDimension, (, ), ), ;, }, this, ., function, =, function, ;, this, ., observations]
[), ;, }, this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this]
[., getColumnDimension, (, ), ), ;, }, this, ., function, =, function, ;, this, ., observations, =, observations, ., clone]
[=, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null, ;, this]
[., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null]
[;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null, ;, this, ., scale]
[=, observations, ., clone, (, ), ;, this, ., weights, =, null, ;, this, ., scale, =, scale, ., copy]
[., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null, ;, this, ., scale, =, scale]
[;, this, ., weights, =, null, ;, this, ., scale, =, scale, ., copy, (, ), ;, }, public, double]
[., clone, (, ), ;, this, ., weights, =, null, ;, this, ., scale, =, scale, ., copy, (, )]
[=, null, ;, this, ., scale, =, scale, ., copy, (, ), ;, }, public, double, value, (, final, double]
[., weights, =, null, ;, this, ., scale, =, scale, ., copy, (, ), ;, }, public, double, value, (]
[;, this, ., scale, =, scale, ., copy, (, ), ;, }, public, double, value, (, final, double, [, ]]
[=, scale, ., copy, (, ), ;, }, public, double, value, (, final, double, [, ], point, ), {, final]
[., scale, =, scale, ., copy, (, ), ;, }, public, double, value, (, final, double, [, ], point, )]
[;, }, public, double, value, (, final, double, [, ], point, ), {, final, double, [, ], residuals, =, function]
[., copy, (, ), ;, }, public, double, value, (, final, double, [, ], point, ), {, final, double, []
[;, if, (, residuals, ., length, !=, observations, ., length, ), {, throw, new, DimensionMismatchException, (, residuals, ., length, ,]
[., value, (, point, ), ;, if, (, residuals, ., length, !=, observations, ., length, ), {, throw, new, DimensionMismatchException]
[), ;, if, (, residuals, ., length, !=, observations, ., length, ), {, throw, new, DimensionMismatchException, (, residuals, ., length]
[), {, throw, new, DimensionMismatchException, (, residuals, ., length, ,, observations, ., length, ), ;, }, for, (, int, i]
[!=, observations, ., length, ), {, throw, new, DimensionMismatchException, (, residuals, ., length, ,, observations, ., length, ), ;, }]
[., length, !=, observations, ., length, ), {, throw, new, DimensionMismatchException, (, residuals, ., length, ,, observations, ., length, )]
[), {, throw, new, DimensionMismatchException, (, residuals, ., length, ,, observations, ., length, ), ;, }, for, (, int, i]
[., length, ), {, throw, new, DimensionMismatchException, (, residuals, ., length, ,, observations, ., length, ), ;, }, for, (]
[;, }, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;, ++, i, ), {, residuals]
[,, observations, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;]
[., length, ,, observations, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, residuals, .]
[), ;, }, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;, ++, i, ), {]
[., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;, ++, i]
[;, i, <, residuals, ., length, ;, ++, i, ), {, residuals, [, i, ], -=, observations, [, i, ]]
[;, ++, i, ), {, residuals, [, i, ], -=, observations, [, i, ], ;, }, double, sumSquares, =, 0]
[<, residuals, ., length, ;, ++, i, ), {, residuals, [, i, ], -=, observations, [, i, ], ;, }]
[;, ++, i, ), {, residuals, [, i, ], -=, observations, [, i, ], ;, }, double, sumSquares, =, 0]
[., length, ;, ++, i, ), {, residuals, [, i, ], -=, observations, [, i, ], ;, }, double, sumSquares]
[), {, residuals, [, i, ], -=, observations, [, i, ], ;, }, double, sumSquares, =, 0, ;, if, (]
[), {, residuals, [, i, ], -=, observations, [, i, ], ;, }, double, sumSquares, =, 0, ;, if, (]
[-=, observations, [, i, ], ;, }, double, sumSquares, =, 0, ;, if, (, weights, !=, null, ), {, for]
[[, i, ], -=, observations, [, i, ], ;, }, double, sumSquares, =, 0, ;, if, (, weights, !=, null]
[], -=, observations, [, i, ], ;, }, double, sumSquares, =, 0, ;, if, (, weights, !=, null, ), {]
[;, }, double, sumSquares, =, 0, ;, if, (, weights, !=, null, ), {, for, (, int, i, =, 0]
[[, i, ], ;, }, double, sumSquares, =, 0, ;, if, (, weights, !=, null, ), {, for, (, int]
[], ;, }, double, sumSquares, =, 0, ;, if, (, weights, !=, null, ), {, for, (, int, i, =]
[;, if, (, weights, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, residuals, ., length]
[), {, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;, ++, i, ), {, final]
[!=, null, ), {, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;, ++, i, )]
[), {, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;, ++, i, ), {, final]
[;, i, <, residuals, ., length, ;, ++, i, ), {, final, double, ri, =, residuals, [, i, ], ;]
[;, ++, i, ), {, final, double, ri, =, residuals, [, i, ], ;, sumSquares, +=, weights, [, i, ]]
[<, residuals, ., length, ;, ++, i, ), {, final, double, ri, =, residuals, [, i, ], ;, sumSquares, +=]
[;, ++, i, ), {, final, double, ri, =, residuals, [, i, ], ;, sumSquares, +=, weights, [, i, ]]
[., length, ;, ++, i, ), {, final, double, ri, =, residuals, [, i, ], ;, sumSquares, +=, weights, []
[), {, final, double, ri, =, residuals, [, i, ], ;, sumSquares, +=, weights, [, i, ], *, ri, *]
[), {, final, double, ri, =, residuals, [, i, ], ;, sumSquares, +=, weights, [, i, ], *, ri, *]
[;, sumSquares, +=, weights, [, i, ], *, ri, *, ri, ;, }, }, else, if, (, scale, !=, null]
[[, i, ], ;, sumSquares, +=, weights, [, i, ], *, ri, *, ri, ;, }, }, else, if, (]
[], ;, sumSquares, +=, weights, [, i, ], *, ri, *, ri, ;, }, }, else, if, (, scale, !=]
[+=, weights, [, i, ], *, ri, *, ri, ;, }, }, else, if, (, scale, !=, null, ), {]
[;, }, }, else, if, (, scale, !=, null, ), {, for, (, final, double, yi, :, scale, ., operate]
[*, ri, ;, }, }, else, if, (, scale, !=, null, ), {, for, (, final, double, yi, :, scale]
[*, ri, *, ri, ;, }, }, else, if, (, scale, !=, null, ), {, for, (, final, double, yi]
[[, i, ], *, ri, *, ri, ;, }, }, else, if, (, scale, !=, null, ), {, for, (]
[], *, ri, *, ri, ;, }, }, else, if, (, scale, !=, null, ), {, for, (, final, double]
[*, ri, ;, }, }, else, if, (, scale, !=, null, ), {, for, (, final, double, yi, :, scale]
[;, }, }, else, if, (, scale, !=, null, ), {, for, (, final, double, yi, :, scale, ., operate]
[), {, for, (, final, double, yi, :, scale, ., operate, (, residuals, ), ), {, sumSquares, +=, yi, *]
[!=, null, ), {, for, (, final, double, yi, :, scale, ., operate, (, residuals, ), ), {, sumSquares, +=]
[), {, for, (, final, double, yi, :, scale, ., operate, (, residuals, ), ), {, sumSquares, +=, yi, *]
[), {, sumSquares, +=, yi, *, yi, ;, }, }, else, {, for, (, final, double, ri, :, residuals, )]
[., operate, (, residuals, ), ), {, sumSquares, +=, yi, *, yi, ;, }, }, else, {, for, (, final]
[), ), {, sumSquares, +=, yi, *, yi, ;, }, }, else, {, for, (, final, double, ri, :, residuals]
[+=, yi, *, yi, ;, }, }, else, {, for, (, final, double, ri, :, residuals, ), {, sumSquares, +=]
[;, }, }, else, {, for, (, final, double, ri, :, residuals, ), {, sumSquares, +=, ri, *, ri, ;]
[*, yi, ;, }, }, else, {, for, (, final, double, ri, :, residuals, ), {, sumSquares, +=, ri, *]
[;, }, }, else, {, for, (, final, double, ri, :, residuals, ), {, sumSquares, +=, ri, *, ri, ;]
[), {, sumSquares, +=, ri, *, ri, ;, }, }, return, sumSquares, ;, }, }]
[+=, ri, *, ri, ;, }, }, return, sumSquares, ;, }, }]
[;, }, }, return, sumSquares, ;, }, }]
[*, ri, ;, }, }, return, sumSquares, ;, }, }]
[;, }, }, return, sumSquares, ;, }, }]
[;, }, }]
