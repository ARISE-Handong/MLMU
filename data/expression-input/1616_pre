[OptimizeParameters, implements, CompilerPass, ,, OptimizeCalls, ., CallGraphCompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, List, <, Node, >, removedNodes, =]
[OptimizeParameters, implements, CompilerPass, ,, OptimizeCalls, ., CallGraphCompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, List, <, Node, >, removedNodes, =]
[;, private, List, <, Node, >, removedNodes, =, Lists, ., newArrayList, (, ), ;, OptimizeParameters, (, AbstractCompiler, compiler, ), {]
[;, private, List, <, Node, >, removedNodes, =, Lists, ., newArrayList, (, ), ;, OptimizeParameters, (, AbstractCompiler, compiler, ), {]
[Node, >, removedNodes, =, Lists, ., newArrayList, (, ), ;, OptimizeParameters, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[compiler, =, compiler, ;, }, @, Override, @, VisibleForTesting, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, =, compiler, ;, }, @, Override, @, VisibleForTesting, public, void, process, (, Node, externs, ,, Node, root, ), {]
[}, @, Override, @, VisibleForTesting, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[}, @, Override, @, VisibleForTesting, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[}, @, Override, @, VisibleForTesting, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ==]
[void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ==]
[), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ==, LifeCycleStage, ., NORMALIZED, ), ;, SimpleDefinitionFinder, defFinder, =]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ==, LifeCycleStage, ., NORMALIZED, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (]
[compiler, ., getLifeCycleStage, (, ), ==, LifeCycleStage, ., NORMALIZED, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[compiler, ., getLifeCycleStage, (, ), ==, LifeCycleStage, ., NORMALIZED, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[), ==, LifeCycleStage, ., NORMALIZED, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (]
[LifeCycleStage, ., NORMALIZED, ), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,]
[), ;, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;]
[SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, process, (]
[=, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, process, (, externs, ,]
[SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, process, (, externs, ,, root, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, ), {, for, (, DefinitionSite, defSite, :]
[Override, public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, ), {, for, (, DefinitionSite, defSite, :]
[root, ,, SimpleDefinitionFinder, definitions, ), {, for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, if, (]
[SimpleDefinitionFinder, definitions, ), {, for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, if, (, canChangeSignature, (]
[), {, for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, if, (, canChangeSignature, (, defSite, ,]
[DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, if, (, canChangeSignature, (, defSite, ,, definitions, ), ), {]
[:, definitions, ., getDefinitionSites, (, ), ), {, if, (, canChangeSignature, (, defSite, ,, definitions, ), ), {, tryEliminateConstantArgs, (]
[., getDefinitionSites, (, ), ), {, if, (, canChangeSignature, (, defSite, ,, definitions, ), ), {, tryEliminateConstantArgs, (, defSite, ,]
[), ), {, if, (, canChangeSignature, (, defSite, ,, definitions, ), ), {, tryEliminateConstantArgs, (, defSite, ,, definitions, ), ;]
[{, if, (, canChangeSignature, (, defSite, ,, definitions, ), ), {, tryEliminateConstantArgs, (, defSite, ,, definitions, ), ;, tryEliminateOptionalArgs, (]
[(, canChangeSignature, (, defSite, ,, definitions, ), ), {, tryEliminateConstantArgs, (, defSite, ,, definitions, ), ;, tryEliminateOptionalArgs, (, defSite, ,]
[(, defSite, ,, definitions, ), ;, tryEliminateOptionalArgs, (, defSite, ,, definitions, ), ;, }, }, for, (, Node, n, :]
[definitions, ), ;, tryEliminateOptionalArgs, (, defSite, ,, definitions, ), ;, }, }, for, (, Node, n, :, removedNodes, ), {]
[definitions, ), ;, tryEliminateOptionalArgs, (, defSite, ,, definitions, ), ;, }, }, for, (, Node, n, :, removedNodes, ), {]
[(, defSite, ,, definitions, ), ;, }, }, for, (, Node, n, :, removedNodes, ), {, definitions, ., removeReferences, (]
[(, n, ), ;, }, }, private, boolean, canChangeSignature, (, DefinitionSite, definitionSite, ,, SimpleDefinitionFinder, defFinder, ), {, Definition, definition, =]
[(, n, ), ;, }, }, private, boolean, canChangeSignature, (, DefinitionSite, definitionSite, ,, SimpleDefinitionFinder, defFinder, ), {, Definition, definition, =]
[private, boolean, canChangeSignature, (, DefinitionSite, definitionSite, ,, SimpleDefinitionFinder, defFinder, ), {, Definition, definition, =, definitionSite, ., definition, ;, if, (]
[private, boolean, canChangeSignature, (, DefinitionSite, definitionSite, ,, SimpleDefinitionFinder, defFinder, ), {, Definition, definition, =, definitionSite, ., definition, ;, if, (]
[,, SimpleDefinitionFinder, defFinder, ), {, Definition, definition, =, definitionSite, ., definition, ;, if, (, definitionSite, ., inExterns, ), {, return]
[definition, =, definitionSite, ., definition, ;, if, (, definitionSite, ., inExterns, ), {, return, false, ;, }, Node, rValue, =]
[definition, =, definitionSite, ., definition, ;, if, (, definitionSite, ., inExterns, ), {, return, false, ;, }, Node, rValue, =]
[definitionSite, ., inExterns, ), {, return, false, ;, }, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[definitionSite, ., inExterns, ), {, return, false, ;, }, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[definitionSite, ., inExterns, ), {, return, false, ;, }, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[definitionSite, ., inExterns, ), {, return, false, ;, }, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[inExterns, ), {, return, false, ;, }, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==]
[{, return, false, ;, }, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||]
[return, false, ;, }, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !]
[return, false, ;, }, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !]
[=, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ||]
[=, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ||]
[(, ), ;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (]
[rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return]
[rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, if, (]
[., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, if, (, !]
[., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, if, (, !]
[||, NodeUtil, ., isVarArgsFunction, (, rValue, ), ), {, return, false, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (]
[rValue, ), ), {, return, false, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return]
[false, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, false, ;, }, if, (]
[;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, false, ;, }, if, (, !]
[;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, false, ;, }, if, (, !]
[!, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, false, ;, }, if, (, !, defFinder, ., canModifyDefinition, (]
[rValue, ), ), {, return, false, ;, }, if, (, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return]
[(, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return, false, ;, }, Collection, <, UseSite, >, useSites, =]
[(, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return, false, ;, }, Collection, <, UseSite, >, useSites, =]
[canModifyDefinition, (, definition, ), ), {, return, false, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (]
[{, return, false, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, if, (]
[{, return, false, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, if, (]
[>, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, if, (, useSites, ., isEmpty, (, ), ), {, return]
[), ;, if, (, useSites, ., isEmpty, (, ), ), {, return, false, ;, }, for, (, UseSite, site, :]
[., isEmpty, (, ), ), {, return, false, ;, }, for, (, UseSite, site, :, useSites, ), {, if, (]
[isEmpty, (, ), ), {, return, false, ;, }, for, (, UseSite, site, :, useSites, ), {, if, (, !]
[isEmpty, (, ), ), {, return, false, ;, }, for, (, UseSite, site, :, useSites, ), {, if, (, !]
[{, return, false, ;, }, for, (, UseSite, site, :, useSites, ), {, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (]
[for, (, UseSite, site, :, useSites, ), {, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, return]
[), {, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, return, false, ;, }, Node, nameNode, =]
[), {, if, (, !, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), {, return, false, ;, }, Node, nameNode, =]
[), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =]
[), ), {, return, false, ;, }, Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =]
[false, ;, }, Node, nameNode, =, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (]
[=, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (]
[=, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (]
[=, site, ., node, ;, Collection, <, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (]
[<, Definition, >, singleSiteDefinitions, =, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (, singleSiteDefinitions, ., size, (, ), >]
[=, defFinder, ., getDefinitionsReferencedAt, (, nameNode, ), ;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return]
[getDefinitionsReferencedAt, (, nameNode, ), ;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }]
[getDefinitionsReferencedAt, (, nameNode, ), ;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }]
[;, if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (]
[if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (, !]
[if, (, singleSiteDefinitions, ., size, (, ), >, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (, !]
[>, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;]
[>, 1, ), {, return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;]
[return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (]
[return, false, ;, }, Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (]
[Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (]
[., isEmpty, (, ), ), ;, Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), ), ;, }, return]
[;, }, return, true, ;, }, private, void, tryEliminateOptionalArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, int, maxArgs, =]
[}, return, true, ;, }, private, void, tryEliminateOptionalArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, int, maxArgs, =, -]
[private, void, tryEliminateOptionalArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, int, maxArgs, =, -, 1, ;, Definition, definition, =]
[private, void, tryEliminateOptionalArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, int, maxArgs, =, -, 1, ;, Definition, definition, =]
[{, int, maxArgs, =, -, 1, ;, Definition, definition, =, defSite, ., definition, ;, Collection, <, UseSite, >, useSites, =]
[{, int, maxArgs, =, -, 1, ;, Definition, definition, =, defSite, ., definition, ;, Collection, <, UseSite, >, useSites, =]
[-, 1, ;, Definition, definition, =, defSite, ., definition, ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (]
[definition, ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :]
[<, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {]
[<, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {]
[=, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (]
[=, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (]
[(, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (]
[site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =]
[site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =]
[site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =]
[isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, int, numArgs, =]
[isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, int, numArgs, =]
[isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, int, numArgs, =]
[Node, call, =, site, ., node, ., getParent, (, ), ;, int, numArgs, =, call, ., getChildCount, (, ), -]
[., node, ., getParent, (, ), ;, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, if, (]
[., node, ., getParent, (, ), ;, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, if, (]
[., getParent, (, ), ;, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, if, (, numArgs, >]
[), ;, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, if, (, numArgs, >, maxArgs, ), {]
[int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, if, (, numArgs, >, maxArgs, ), {, maxArgs, =]
[., getChildCount, (, ), -, 1, ;, if, (, numArgs, >, maxArgs, ), {, maxArgs, =, numArgs, ;, }, }]
[(, ), -, 1, ;, if, (, numArgs, >, maxArgs, ), {, maxArgs, =, numArgs, ;, }, }, eliminateParamsAfter, (]
[(, ), -, 1, ;, if, (, numArgs, >, maxArgs, ), {, maxArgs, =, numArgs, ;, }, }, eliminateParamsAfter, (]
[(, numArgs, >, maxArgs, ), {, maxArgs, =, numArgs, ;, }, }, eliminateParamsAfter, (, definition, ., getRValue, (, ), ,]
[), ;, }, private, void, tryEliminateConstantArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, List, <, Parameter, >, parameters, =]
[), ;, }, private, void, tryEliminateConstantArgs, (, DefinitionSite, defSite, ,, SimpleDefinitionFinder, defFinder, ), {, List, <, Parameter, >, parameters, =]
[,, SimpleDefinitionFinder, defFinder, ), {, List, <, Parameter, >, parameters, =, Lists, ., newArrayList, (, ), ;, boolean, firstCall, =]
[List, <, Parameter, >, parameters, =, Lists, ., newArrayList, (, ), ;, boolean, firstCall, =, true, ;, Definition, definition, =]
[List, <, Parameter, >, parameters, =, Lists, ., newArrayList, (, ), ;, boolean, firstCall, =, true, ;, Definition, definition, =]
[), ;, boolean, firstCall, =, true, ;, Definition, definition, =, defSite, ., definition, ;, Collection, <, UseSite, >, useSites, =]
[), ;, boolean, firstCall, =, true, ;, Definition, definition, =, defSite, ., definition, ;, Collection, <, UseSite, >, useSites, =]
[=, true, ;, Definition, definition, =, defSite, ., definition, ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (]
[defSite, ., definition, ;, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, boolean, continueLooking, =]
[>, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, boolean, continueLooking, =, false, ;, for, (, UseSite, site, :]
[defFinder, ., getUseSites, (, definition, ), ;, boolean, continueLooking, =, false, ;, for, (, UseSite, site, :, useSites, ), {]
[defFinder, ., getUseSites, (, definition, ), ;, boolean, continueLooking, =, false, ;, for, (, UseSite, site, :, useSites, ), {]
[definition, ), ;, boolean, continueLooking, =, false, ;, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (]
[definition, ), ;, boolean, continueLooking, =, false, ;, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (]
[continueLooking, =, false, ;, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (]
[site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =]
[site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =]
[site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =]
[isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, Node, cur, =]
[isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, Node, cur, =]
[=, site, ., node, ., getParent, (, ), ;, Node, cur, =, call, ., getFirstChild, (, ), ;, if, (]
[node, ., getParent, (, ), ;, Node, cur, =, call, ., getFirstChild, (, ), ;, if, (, firstCall, ), {]
[getParent, (, ), ;, Node, cur, =, call, ., getFirstChild, (, ), ;, if, (, firstCall, ), {, continueLooking, =]
[), ;, Node, cur, =, call, ., getFirstChild, (, ), ;, if, (, firstCall, ), {, continueLooking, =, buildParameterList, (]
[Node, cur, =, call, ., getFirstChild, (, ), ;, if, (, firstCall, ), {, continueLooking, =, buildParameterList, (, parameters, ,]
[=, call, ., getFirstChild, (, ), ;, if, (, firstCall, ), {, continueLooking, =, buildParameterList, (, parameters, ,, cur, ,]
[=, call, ., getFirstChild, (, ), ;, if, (, firstCall, ), {, continueLooking, =, buildParameterList, (, parameters, ,, cur, ,]
[), ;, if, (, firstCall, ), {, continueLooking, =, buildParameterList, (, parameters, ,, cur, ,, site, ., scope, ), ;]
[if, (, firstCall, ), {, continueLooking, =, buildParameterList, (, parameters, ,, cur, ,, site, ., scope, ), ;, firstCall, =]
[continueLooking, =, buildParameterList, (, parameters, ,, cur, ,, site, ., scope, ), ;, firstCall, =, false, ;, }, else, {]
[buildParameterList, (, parameters, ,, cur, ,, site, ., scope, ), ;, firstCall, =, false, ;, }, else, {, continueLooking, =]
[parameters, ,, cur, ,, site, ., scope, ), ;, firstCall, =, false, ;, }, else, {, continueLooking, =, findFixedParameters, (]
[cur, ,, site, ., scope, ), ;, firstCall, =, false, ;, }, else, {, continueLooking, =, findFixedParameters, (, parameters, ,]
[;, firstCall, =, false, ;, }, else, {, continueLooking, =, findFixedParameters, (, parameters, ,, cur, ), ;, }, if, (]
[firstCall, =, false, ;, }, else, {, continueLooking, =, findFixedParameters, (, parameters, ,, cur, ), ;, }, if, (, !]
[continueLooking, =, findFixedParameters, (, parameters, ,, cur, ), ;, }, if, (, !, continueLooking, ), {, return, ;, }, }]
[findFixedParameters, (, parameters, ,, cur, ), ;, }, if, (, !, continueLooking, ), {, return, ;, }, }, continueLooking, =]
[parameters, ,, cur, ), ;, }, if, (, !, continueLooking, ), {, return, ;, }, }, continueLooking, =, adjustForSideEffects, (]
[}, if, (, !, continueLooking, ), {, return, ;, }, }, continueLooking, =, adjustForSideEffects, (, parameters, ), ;, if, (]
[if, (, !, continueLooking, ), {, return, ;, }, }, continueLooking, =, adjustForSideEffects, (, parameters, ), ;, if, (, !]
[=, adjustForSideEffects, (, parameters, ), ;, if, (, !, continueLooking, ), {, return, ;, }, for, (, UseSite, site, :]
[parameters, ), ;, if, (, !, continueLooking, ), {, return, ;, }, for, (, UseSite, site, :, useSites, ), {]
[parameters, ), ;, if, (, !, continueLooking, ), {, return, ;, }, for, (, UseSite, site, :, useSites, ), {]
[(, !, continueLooking, ), {, return, ;, }, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (]
[(, !, continueLooking, ), {, return, ;, }, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (]
[{, return, ;, }, for, (, UseSite, site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (]
[site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =]
[site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =]
[site, :, useSites, ), {, Preconditions, ., checkState, (, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =]
[(, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;]
[., isCallOrNewSite, (, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, optimizeCallSite, (]
[(, site, ), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, optimizeCallSite, (, defFinder, ,]
[), ), ;, Node, call, =, site, ., node, ., getParent, (, ), ;, optimizeCallSite, (, defFinder, ,, parameters, ,]
[., node, ., getParent, (, ), ;, optimizeCallSite, (, defFinder, ,, parameters, ,, call, ), ;, }, Node, function, =]
[., node, ., getParent, (, ), ;, optimizeCallSite, (, defFinder, ,, parameters, ,, call, ), ;, }, Node, function, =]
[(, defFinder, ,, parameters, ,, call, ), ;, }, Node, function, =, definition, ., getRValue, (, ), ;, if, (]
[(, defFinder, ,, parameters, ,, call, ), ;, }, Node, function, =, definition, ., getRValue, (, ), ;, if, (]
[;, }, Node, function, =, definition, ., getRValue, (, ), ;, if, (, function, ., isFunction, (, ), ), {]
[Node, function, =, definition, ., getRValue, (, ), ;, if, (, function, ., isFunction, (, ), ), {, optimizeFunctionDefinition, (]
[=, definition, ., getRValue, (, ), ;, if, (, function, ., isFunction, (, ), ), {, optimizeFunctionDefinition, (, parameters, ,]
[,, function, ), ;, }, }, private, boolean, adjustForSideEffects, (, List, <, Parameter, >, parameters, ), {, boolean, anyMovable, =]
[}, private, boolean, adjustForSideEffects, (, List, <, Parameter, >, parameters, ), {, boolean, anyMovable, =, false, ;, boolean, seenUnmovableSideEffects, =]
[List, <, Parameter, >, parameters, ), {, boolean, anyMovable, =, false, ;, boolean, seenUnmovableSideEffects, =, false, ;, boolean, seenUnmoveableSideEfffected, =]
[boolean, anyMovable, =, false, ;, boolean, seenUnmovableSideEffects, =, false, ;, boolean, seenUnmoveableSideEfffected, =, false, ;, for, (, int, i, =]
[boolean, anyMovable, =, false, ;, boolean, seenUnmovableSideEffects, =, false, ;, boolean, seenUnmoveableSideEfffected, =, false, ;, for, (, int, i, =]
[boolean, anyMovable, =, false, ;, boolean, seenUnmovableSideEffects, =, false, ;, boolean, seenUnmoveableSideEfffected, =, false, ;, for, (, int, i, =]
[seenUnmovableSideEffects, =, false, ;, boolean, seenUnmoveableSideEfffected, =, false, ;, for, (, int, i, =, parameters, ., size, (, ), -]
[false, ;, boolean, seenUnmoveableSideEfffected, =, false, ;, for, (, int, i, =, parameters, ., size, (, ), -, 1, ;]
[false, ;, boolean, seenUnmoveableSideEfffected, =, false, ;, for, (, int, i, =, parameters, ., size, (, ), -, 1, ;]
[boolean, seenUnmoveableSideEfffected, =, false, ;, for, (, int, i, =, parameters, ., size, (, ), -, 1, ;, i, >=]
[=, false, ;, for, (, int, i, =, parameters, ., size, (, ), -, 1, ;, i, >=, 0, ;]
[=, false, ;, for, (, int, i, =, parameters, ., size, (, ), -, 1, ;, i, >=, 0, ;]
[=, parameters, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, Parameter, current, =]
[=, parameters, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, Parameter, current, =]
[(, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, Parameter, current, =, parameters, ., get, (]
[i, >=, 0, ;, i, --, ), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if, (]
[i, >=, 0, ;, i, --, ), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if, (]
[i, >=, 0, ;, i, --, ), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if, (]
[i, --, ), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if, (, current, ., shouldRemove, &&]
[--, ), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if, (, current, ., shouldRemove, &&, (]
[--, ), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if, (, current, ., shouldRemove, &&, (]
[), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if, (, current, ., shouldRemove, &&, (, (]
[), {, Parameter, current, =, parameters, ., get, (, i, ), ;, if, (, current, ., shouldRemove, &&, (, (]
[Parameter, current, =, parameters, ., get, (, i, ), ;, if, (, current, ., shouldRemove, &&, (, (, seenUnmovableSideEffects, &&]
[Parameter, current, =, parameters, ., get, (, i, ), ;, if, (, current, ., shouldRemove, &&, (, (, seenUnmovableSideEffects, &&]
[i, ), ;, if, (, current, ., shouldRemove, &&, (, (, seenUnmovableSideEffects, &&, current, ., canBeSideEffected, (, ), ), ||]
[), ;, if, (, current, ., shouldRemove, &&, (, (, seenUnmovableSideEffects, &&, current, ., canBeSideEffected, (, ), ), ||, (]
[), ;, if, (, current, ., shouldRemove, &&, (, (, seenUnmovableSideEffects, &&, current, ., canBeSideEffected, (, ), ), ||, (]
[if, (, current, ., shouldRemove, &&, (, (, seenUnmovableSideEffects, &&, current, ., canBeSideEffected, (, ), ), ||, (, seenUnmoveableSideEfffected, &&]
[if, (, current, ., shouldRemove, &&, (, (, seenUnmovableSideEffects, &&, current, ., canBeSideEffected, (, ), ), ||, (, seenUnmoveableSideEfffected, &&]
[&&, current, ., canBeSideEffected, (, ), ), ||, (, seenUnmoveableSideEfffected, &&, current, ., hasSideEffects, (, ), ), ), ), {]
[&&, current, ., canBeSideEffected, (, ), ), ||, (, seenUnmoveableSideEfffected, &&, current, ., hasSideEffects, (, ), ), ), ), {]
[(, ), ), ||, (, seenUnmoveableSideEfffected, &&, current, ., hasSideEffects, (, ), ), ), ), {, current, ., shouldRemove, =]
[seenUnmoveableSideEfffected, &&, current, ., hasSideEffects, (, ), ), ), ), {, current, ., shouldRemove, =, false, ;, }, if, (]
[seenUnmoveableSideEfffected, &&, current, ., hasSideEffects, (, ), ), ), ), {, current, ., shouldRemove, =, false, ;, }, if, (]
[(, ), ), ), ), {, current, ., shouldRemove, =, false, ;, }, if, (, current, ., shouldRemove, ), {]
[), ), ), {, current, ., shouldRemove, =, false, ;, }, if, (, current, ., shouldRemove, ), {, anyMovable, =]
[=, false, ;, }, if, (, current, ., shouldRemove, ), {, anyMovable, =, true, ;, }, else, {, if, (]
[=, false, ;, }, if, (, current, ., shouldRemove, ), {, anyMovable, =, true, ;, }, else, {, if, (]
[(, current, ., shouldRemove, ), {, anyMovable, =, true, ;, }, else, {, if, (, current, ., canBeSideEffected, ), {]
[., shouldRemove, ), {, anyMovable, =, true, ;, }, else, {, if, (, current, ., canBeSideEffected, ), {, seenUnmoveableSideEfffected, =]
[=, true, ;, }, else, {, if, (, current, ., canBeSideEffected, ), {, seenUnmoveableSideEfffected, =, true, ;, }, if, (]
[=, true, ;, }, else, {, if, (, current, ., canBeSideEffected, ), {, seenUnmoveableSideEfffected, =, true, ;, }, if, (]
[{, if, (, current, ., canBeSideEffected, ), {, seenUnmoveableSideEfffected, =, true, ;, }, if, (, current, ., hasSideEffects, ), {]
[(, current, ., canBeSideEffected, ), {, seenUnmoveableSideEfffected, =, true, ;, }, if, (, current, ., hasSideEffects, ), {, seenUnmovableSideEffects, =]
[seenUnmoveableSideEfffected, =, true, ;, }, if, (, current, ., hasSideEffects, ), {, seenUnmovableSideEffects, =, true, ;, }, }, }, return]
[anyMovable, ;, }, private, boolean, findFixedParameters, (, List, <, Parameter, >, parameters, ,, Node, cur, ), {, boolean, anyMovable, =]
[findFixedParameters, (, List, <, Parameter, >, parameters, ,, Node, cur, ), {, boolean, anyMovable, =, false, ;, int, index, =]
[Parameter, >, parameters, ,, Node, cur, ), {, boolean, anyMovable, =, false, ;, int, index, =, 0, ;, while, (]
[Parameter, >, parameters, ,, Node, cur, ), {, boolean, anyMovable, =, false, ;, int, index, =, 0, ;, while, (]
[>, parameters, ,, Node, cur, ), {, boolean, anyMovable, =, false, ;, int, index, =, 0, ;, while, (, (]
[,, Node, cur, ), {, boolean, anyMovable, =, false, ;, int, index, =, 0, ;, while, (, (, cur, =]
[,, Node, cur, ), {, boolean, anyMovable, =, false, ;, int, index, =, 0, ;, while, (, (, cur, =]
[=, false, ;, int, index, =, 0, ;, while, (, (, cur, =, cur, ., getNext, (, ), ), !=]
[while, (, (, cur, =, cur, ., getNext, (, ), ), !=, null, ), {, Parameter, p, ;, if, (]
[while, (, (, cur, =, cur, ., getNext, (, ), ), !=, null, ), {, Parameter, p, ;, if, (]
[(, cur, =, cur, ., getNext, (, ), ), !=, null, ), {, Parameter, p, ;, if, (, index, >=]
[(, cur, =, cur, ., getNext, (, ), ), !=, null, ), {, Parameter, p, ;, if, (, index, >=]
[), ), !=, null, ), {, Parameter, p, ;, if, (, index, >=, parameters, ., size, (, ), ), {]
[!=, null, ), {, Parameter, p, ;, if, (, index, >=, parameters, ., size, (, ), ), {, p, =]
[{, Parameter, p, ;, if, (, index, >=, parameters, ., size, (, ), ), {, p, =, new, Parameter, (]
[p, ;, if, (, index, >=, parameters, ., size, (, ), ), {, p, =, new, Parameter, (, cur, ,]
[(, index, >=, parameters, ., size, (, ), ), {, p, =, new, Parameter, (, cur, ,, false, ), ;]
[(, index, >=, parameters, ., size, (, ), ), {, p, =, new, Parameter, (, cur, ,, false, ), ;]
[., size, (, ), ), {, p, =, new, Parameter, (, cur, ,, false, ), ;, parameters, ., add, (]
[p, =, new, Parameter, (, cur, ,, false, ), ;, parameters, ., add, (, p, ), ;, }, else, {]
[new, Parameter, (, cur, ,, false, ), ;, parameters, ., add, (, p, ), ;, }, else, {, p, =]
[new, Parameter, (, cur, ,, false, ), ;, parameters, ., add, (, p, ), ;, }, else, {, p, =]
[,, false, ), ;, parameters, ., add, (, p, ), ;, }, else, {, p, =, parameters, ., get, (]
[., add, (, p, ), ;, }, else, {, p, =, parameters, ., get, (, index, ), ;, if, (]
[., add, (, p, ), ;, }, else, {, p, =, parameters, ., get, (, index, ), ;, if, (]
[=, parameters, ., get, (, index, ), ;, if, (, p, ., shouldRemove, (, ), ), {, Node, value, =]
[=, parameters, ., get, (, index, ), ;, if, (, p, ., shouldRemove, (, ), ), {, Node, value, =]
[if, (, p, ., shouldRemove, (, ), ), {, Node, value, =, p, ., getArg, (, ), ;, if, (]
[(, p, ., shouldRemove, (, ), ), {, Node, value, =, p, ., getArg, (, ), ;, if, (, !]
[(, p, ., shouldRemove, (, ), ), {, Node, value, =, p, ., getArg, (, ), ;, if, (, !]
[(, ), ), {, Node, value, =, p, ., getArg, (, ), ;, if, (, !, cur, ., isEquivalentTo, (]
[Node, value, =, p, ., getArg, (, ), ;, if, (, !, cur, ., isEquivalentTo, (, value, ), ), {]
[Node, value, =, p, ., getArg, (, ), ;, if, (, !, cur, ., isEquivalentTo, (, value, ), ), {]
[., getArg, (, ), ;, if, (, !, cur, ., isEquivalentTo, (, value, ), ), {, p, ., setShouldRemove, (]
[(, !, cur, ., isEquivalentTo, (, value, ), ), {, p, ., setShouldRemove, (, false, ), ;, }, else, {]
[cur, ., isEquivalentTo, (, value, ), ), {, p, ., setShouldRemove, (, false, ), ;, }, else, {, anyMovable, =]
[), ), {, p, ., setShouldRemove, (, false, ), ;, }, else, {, anyMovable, =, true, ;, }, }, }]
[{, p, ., setShouldRemove, (, false, ), ;, }, else, {, anyMovable, =, true, ;, }, }, }, setParameterSideEffectInfo, (]
[., setShouldRemove, (, false, ), ;, }, else, {, anyMovable, =, true, ;, }, }, }, setParameterSideEffectInfo, (, p, ,]
[false, ), ;, }, else, {, anyMovable, =, true, ;, }, }, }, setParameterSideEffectInfo, (, p, ,, cur, ), ;]
[false, ), ;, }, else, {, anyMovable, =, true, ;, }, }, }, setParameterSideEffectInfo, (, p, ,, cur, ), ;]
[=, true, ;, }, }, }, setParameterSideEffectInfo, (, p, ,, cur, ), ;, index, ++, ;, }, for, (, ;]
[=, true, ;, }, }, }, setParameterSideEffectInfo, (, p, ,, cur, ), ;, index, ++, ;, }, for, (, ;]
[;, }, }, }, setParameterSideEffectInfo, (, p, ,, cur, ), ;, index, ++, ;, }, for, (, ;, index, <]
[;, }, }, }, setParameterSideEffectInfo, (, p, ,, cur, ), ;, index, ++, ;, }, for, (, ;, index, <]
[p, ,, cur, ), ;, index, ++, ;, }, for, (, ;, index, <, parameters, ., size, (, ), ;]
[p, ,, cur, ), ;, index, ++, ;, }, for, (, ;, index, <, parameters, ., size, (, ), ;]
[;, index, ++, ;, }, for, (, ;, index, <, parameters, ., size, (, ), ;, index, ++, ), {]
[;, index, ++, ;, }, for, (, ;, index, <, parameters, ., size, (, ), ;, index, ++, ), {]
[;, index, ++, ;, }, for, (, ;, index, <, parameters, ., size, (, ), ;, index, ++, ), {]
[}, for, (, ;, index, <, parameters, ., size, (, ), ;, index, ++, ), {, parameters, ., get, (]
[<, parameters, ., size, (, ), ;, index, ++, ), {, parameters, ., get, (, index, ), ., setShouldRemove, (]
[), ;, index, ++, ), {, parameters, ., get, (, index, ), ., setShouldRemove, (, false, ), ;, }, return]
[private, boolean, buildParameterList, (, List, <, Parameter, >, parameters, ,, Node, cur, ,, Scope, s, ), {, boolean, anyMovable, =]
[List, <, Parameter, >, parameters, ,, Node, cur, ,, Scope, s, ), {, boolean, anyMovable, =, false, ;, while, (]
[List, <, Parameter, >, parameters, ,, Node, cur, ,, Scope, s, ), {, boolean, anyMovable, =, false, ;, while, (]
[<, Parameter, >, parameters, ,, Node, cur, ,, Scope, s, ), {, boolean, anyMovable, =, false, ;, while, (, (]
[>, parameters, ,, Node, cur, ,, Scope, s, ), {, boolean, anyMovable, =, false, ;, while, (, (, cur, =]
[>, parameters, ,, Node, cur, ,, Scope, s, ), {, boolean, anyMovable, =, false, ;, while, (, (, cur, =]
[s, ), {, boolean, anyMovable, =, false, ;, while, (, (, cur, =, cur, ., getNext, (, ), ), !=]
[false, ;, while, (, (, cur, =, cur, ., getNext, (, ), ), !=, null, ), {, boolean, movable, =]
[while, (, (, cur, =, cur, ., getNext, (, ), ), !=, null, ), {, boolean, movable, =, isMovableValue, (]
[(, cur, =, cur, ., getNext, (, ), ), !=, null, ), {, boolean, movable, =, isMovableValue, (, cur, ,]
[(, ), ), !=, null, ), {, boolean, movable, =, isMovableValue, (, cur, ,, s, ), ;, Parameter, p, =]
[!=, null, ), {, boolean, movable, =, isMovableValue, (, cur, ,, s, ), ;, Parameter, p, =, new, Parameter, (]
[), {, boolean, movable, =, isMovableValue, (, cur, ,, s, ), ;, Parameter, p, =, new, Parameter, (, cur, ,]
[movable, =, isMovableValue, (, cur, ,, s, ), ;, Parameter, p, =, new, Parameter, (, cur, ,, movable, ), ;]
[isMovableValue, (, cur, ,, s, ), ;, Parameter, p, =, new, Parameter, (, cur, ,, movable, ), ;, setParameterSideEffectInfo, (]
[cur, ,, s, ), ;, Parameter, p, =, new, Parameter, (, cur, ,, movable, ), ;, setParameterSideEffectInfo, (, p, ,]
[), ;, Parameter, p, =, new, Parameter, (, cur, ,, movable, ), ;, setParameterSideEffectInfo, (, p, ,, cur, ), ;]
[), ;, Parameter, p, =, new, Parameter, (, cur, ,, movable, ), ;, setParameterSideEffectInfo, (, p, ,, cur, ), ;]
[=, new, Parameter, (, cur, ,, movable, ), ;, setParameterSideEffectInfo, (, p, ,, cur, ), ;, parameters, ., add, (]
[,, movable, ), ;, setParameterSideEffectInfo, (, p, ,, cur, ), ;, parameters, ., add, (, p, ), ;, if, (]
[;, setParameterSideEffectInfo, (, p, ,, cur, ), ;, parameters, ., add, (, p, ), ;, if, (, movable, ), {]
[(, p, ,, cur, ), ;, parameters, ., add, (, p, ), ;, if, (, movable, ), {, anyMovable, =]
[;, parameters, ., add, (, p, ), ;, if, (, movable, ), {, anyMovable, =, true, ;, }, }, return]
[;, }, }, return, anyMovable, ;, }, private, void, setParameterSideEffectInfo, (, Parameter, p, ,, Node, value, ), {, if, (]
[}, }, return, anyMovable, ;, }, private, void, setParameterSideEffectInfo, (, Parameter, p, ,, Node, value, ), {, if, (, !]
[}, }, return, anyMovable, ;, }, private, void, setParameterSideEffectInfo, (, Parameter, p, ,, Node, value, ), {, if, (, !]
[void, setParameterSideEffectInfo, (, Parameter, p, ,, Node, value, ), {, if, (, !, p, ., hasSideEffects, (, ), ), {]
[void, setParameterSideEffectInfo, (, Parameter, p, ,, Node, value, ), {, if, (, !, p, ., hasSideEffects, (, ), ), {]
[p, ,, Node, value, ), {, if, (, !, p, ., hasSideEffects, (, ), ), {, p, ., setHasSideEffects, (]
[p, ,, Node, value, ), {, if, (, !, p, ., hasSideEffects, (, ), ), {, p, ., setHasSideEffects, (]
[), {, if, (, !, p, ., hasSideEffects, (, ), ), {, p, ., setHasSideEffects, (, NodeUtil, ., mayHaveSideEffects, (]
[if, (, !, p, ., hasSideEffects, (, ), ), {, p, ., setHasSideEffects, (, NodeUtil, ., mayHaveSideEffects, (, value, ,]
[), ), {, p, ., setHasSideEffects, (, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), ;, }, if, (]
[), {, p, ., setHasSideEffects, (, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), ;, }, if, (, !]
[), {, p, ., setHasSideEffects, (, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), ), ;, }, if, (, !]
[., mayHaveSideEffects, (, value, ,, compiler, ), ), ;, }, if, (, !, p, ., canBeSideEffected, (, ), ), {]
[., mayHaveSideEffects, (, value, ,, compiler, ), ), ;, }, if, (, !, p, ., canBeSideEffected, (, ), ), {]
[,, compiler, ), ), ;, }, if, (, !, p, ., canBeSideEffected, (, ), ), {, p, ., setCanBeSideEffected, (]
[,, compiler, ), ), ;, }, if, (, !, p, ., canBeSideEffected, (, ), ), {, p, ., setCanBeSideEffected, (]
[;, }, if, (, !, p, ., canBeSideEffected, (, ), ), {, p, ., setCanBeSideEffected, (, NodeUtil, ., canBeSideEffected, (]
[(, value, ), ), ;, }, }, private, boolean, isMovableValue, (, Node, n, ,, Scope, s, ), {, switch, (]
[(, value, ), ), ;, }, }, private, boolean, isMovableValue, (, Node, n, ,, Scope, s, ), {, switch, (]
[boolean, isMovableValue, (, Node, n, ,, Scope, s, ), {, switch, (, n, ., getType, (, ), ), {, case]
[boolean, isMovableValue, (, Node, n, ,, Scope, s, ), {, switch, (, n, ., getType, (, ), ), {, case]
[,, Scope, s, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., THIS, :, return]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., THIS, :, return, false, ;, case]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., THIS, :, return, false, ;, case]
[., getType, (, ), ), {, case, Token, ., THIS, :, return, false, ;, case, Token, ., FUNCTION, :, return]
[), ), {, case, Token, ., THIS, :, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case]
[), ), {, case, Token, ., THIS, :, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case]
[THIS, :, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case, Token, ., NAME, :, if, (]
[THIS, :, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case, Token, ., NAME, :, if, (]
[THIS, :, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case, Token, ., NAME, :, if, (]
[FUNCTION, :, return, false, ;, case, Token, ., NAME, :, if, (, n, ., getString, (, ), ., equals, (]
[case, Token, ., NAME, :, if, (, n, ., getString, (, ), ., equals, (, "arguments", ), ), {, return]
[., getString, (, ), ., equals, (, "arguments", ), ), {, return, false, ;, }, else, {, Var, v, =]
[., getString, (, ), ., equals, (, "arguments", ), ), {, return, false, ;, }, else, {, Var, v, =]
[., equals, (, "arguments", ), ), {, return, false, ;, }, else, {, Var, v, =, s, ., getVar, (]
[., equals, (, "arguments", ), ), {, return, false, ;, }, else, {, Var, v, =, s, ., getVar, (]
[;, }, else, {, Var, v, =, s, ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[;, }, else, {, Var, v, =, s, ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[;, }, else, {, Var, v, =, s, ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[else, {, Var, v, =, s, ., getVar, (, n, ., getString, (, ), ), ;, if, (, v, !=]
[Var, v, =, s, ., getVar, (, n, ., getString, (, ), ), ;, if, (, v, !=, null, &&]
[v, =, s, ., getVar, (, n, ., getString, (, ), ), ;, if, (, v, !=, null, &&, (]
[v, =, s, ., getVar, (, n, ., getString, (, ), ), ;, if, (, v, !=, null, &&, (]
[v, =, s, ., getVar, (, n, ., getString, (, ), ), ;, if, (, v, !=, null, &&, (]
[n, ., getString, (, ), ), ;, if, (, v, !=, null, &&, (, v, ., isLocal, (, ), ||]
[n, ., getString, (, ), ), ;, if, (, v, !=, null, &&, (, v, ., isLocal, (, ), ||]
[n, ., getString, (, ), ), ;, if, (, v, !=, null, &&, (, v, ., isLocal, (, ), ||]
[n, ., getString, (, ), ), ;, if, (, v, !=, null, &&, (, v, ., isLocal, (, ), ||]
[., isLocal, (, ), ||, v, ., nameNode, ., getParent, (, ), ., isCatch, (, ), ), ), {, return]
[., isCatch, (, ), ), ), {, return, false, ;, }, }, break, ;, }, for, (, Node, c, =]
[., isCatch, (, ), ), ), {, return, false, ;, }, }, break, ;, }, for, (, Node, c, =]
[{, return, false, ;, }, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[{, return, false, ;, }, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[false, ;, }, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[}, }, break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[break, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, !]
[), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, !, isMovableValue, (]
[c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, !, isMovableValue, (, c, ,]
[=, c, ., getNext, (, ), ), {, if, (, !, isMovableValue, (, c, ,, s, ), ), {, return]
[), ), {, if, (, !, isMovableValue, (, c, ,, s, ), ), {, return, false, ;, }, }, return]
[}, private, void, optimizeFunctionDefinition, (, List, <, Parameter, >, parameters, ,, Node, function, ), {, for, (, int, index, =]
[}, private, void, optimizeFunctionDefinition, (, List, <, Parameter, >, parameters, ,, Node, function, ), {, for, (, int, index, =]
[}, private, void, optimizeFunctionDefinition, (, List, <, Parameter, >, parameters, ,, Node, function, ), {, for, (, int, index, =]
[<, Parameter, >, parameters, ,, Node, function, ), {, for, (, int, index, =, parameters, ., size, (, ), -]
[>, parameters, ,, Node, function, ), {, for, (, int, index, =, parameters, ., size, (, ), -, 1, ;]
[>, parameters, ,, Node, function, ), {, for, (, int, index, =, parameters, ., size, (, ), -, 1, ;]
[,, Node, function, ), {, for, (, int, index, =, parameters, ., size, (, ), -, 1, ;, index, >=]
[function, ), {, for, (, int, index, =, parameters, ., size, (, ), -, 1, ;, index, >=, 0, ;]
[function, ), {, for, (, int, index, =, parameters, ., size, (, ), -, 1, ;, index, >=, 0, ;]
[index, =, parameters, ., size, (, ), -, 1, ;, index, >=, 0, ;, index, --, ), {, if, (]
[index, =, parameters, ., size, (, ), -, 1, ;, index, >=, 0, ;, index, --, ), {, if, (]
[index, =, parameters, ., size, (, ), -, 1, ;, index, >=, 0, ;, index, --, ), {, if, (]
[size, (, ), -, 1, ;, index, >=, 0, ;, index, --, ), {, if, (, parameters, ., get, (]
[--, ), {, if, (, parameters, ., get, (, index, ), ., shouldRemove, (, ), ), {, Node, paramName, =]
[{, if, (, parameters, ., get, (, index, ), ., shouldRemove, (, ), ), {, Node, paramName, =, eliminateFunctionParamAt, (]
[(, parameters, ., get, (, index, ), ., shouldRemove, (, ), ), {, Node, paramName, =, eliminateFunctionParamAt, (, function, ,]
[get, (, index, ), ., shouldRemove, (, ), ), {, Node, paramName, =, eliminateFunctionParamAt, (, function, ,, index, ), ;]
[index, ), ., shouldRemove, (, ), ), {, Node, paramName, =, eliminateFunctionParamAt, (, function, ,, index, ), ;, addVariableToFunction, (]
[., shouldRemove, (, ), ), {, Node, paramName, =, eliminateFunctionParamAt, (, function, ,, index, ), ;, addVariableToFunction, (, function, ,]
[(, ), ), {, Node, paramName, =, eliminateFunctionParamAt, (, function, ,, index, ), ;, addVariableToFunction, (, function, ,, paramName, ,]
[(, ), ), {, Node, paramName, =, eliminateFunctionParamAt, (, function, ,, index, ), ;, addVariableToFunction, (, function, ,, paramName, ,]
[(, ), ), {, Node, paramName, =, eliminateFunctionParamAt, (, function, ,, index, ), ;, addVariableToFunction, (, function, ,, paramName, ,]
[Node, paramName, =, eliminateFunctionParamAt, (, function, ,, index, ), ;, addVariableToFunction, (, function, ,, paramName, ,, parameters, ., get, (]
[optimizeCallSite, (, SimpleDefinitionFinder, defFinder, ,, List, <, Parameter, >, parameters, ,, Node, call, ), {, for, (, int, index, =]
[optimizeCallSite, (, SimpleDefinitionFinder, defFinder, ,, List, <, Parameter, >, parameters, ,, Node, call, ), {, for, (, int, index, =]
[optimizeCallSite, (, SimpleDefinitionFinder, defFinder, ,, List, <, Parameter, >, parameters, ,, Node, call, ), {, for, (, int, index, =]
[<, Parameter, >, parameters, ,, Node, call, ), {, for, (, int, index, =, parameters, ., size, (, ), -]
[>, parameters, ,, Node, call, ), {, for, (, int, index, =, parameters, ., size, (, ), -, 1, ;]
[>, parameters, ,, Node, call, ), {, for, (, int, index, =, parameters, ., size, (, ), -, 1, ;]
[,, Node, call, ), {, for, (, int, index, =, parameters, ., size, (, ), -, 1, ;, index, >=]
[call, ), {, for, (, int, index, =, parameters, ., size, (, ), -, 1, ;, index, >=, 0, ;]
[call, ), {, for, (, int, index, =, parameters, ., size, (, ), -, 1, ;, index, >=, 0, ;]
[=, parameters, ., size, (, ), -, 1, ;, index, >=, 0, ;, index, --, ), {, Parameter, p, =]
[=, parameters, ., size, (, ), -, 1, ;, index, >=, 0, ;, index, --, ), {, Parameter, p, =]
[(, ), -, 1, ;, index, >=, 0, ;, index, --, ), {, Parameter, p, =, parameters, ., get, (]
[index, >=, 0, ;, index, --, ), {, Parameter, p, =, parameters, ., get, (, index, ), ;, if, (]
[index, >=, 0, ;, index, --, ), {, Parameter, p, =, parameters, ., get, (, index, ), ;, if, (]
[{, Parameter, p, =, parameters, ., get, (, index, ), ;, if, (, p, ., shouldRemove, (, ), ), {]
[p, =, parameters, ., get, (, index, ), ;, if, (, p, ., shouldRemove, (, ), ), {, eliminateCallParamAt, (]
[parameters, ., get, (, index, ), ;, if, (, p, ., shouldRemove, (, ), ), {, eliminateCallParamAt, (, defFinder, ,]
[get, (, index, ), ;, if, (, p, ., shouldRemove, (, ), ), {, eliminateCallParamAt, (, defFinder, ,, p, ,]
[index, ), ;, if, (, p, ., shouldRemove, (, ), ), {, eliminateCallParamAt, (, defFinder, ,, p, ,, call, ,]
[shouldRemove, ;, private, boolean, hasSideEffects, ;, private, boolean, canBeSideEffected, ;, public, Parameter, (, Node, arg, ,, boolean, shouldRemove, ), {]
[shouldRemove, ;, private, boolean, hasSideEffects, ;, private, boolean, canBeSideEffected, ;, public, Parameter, (, Node, arg, ,, boolean, shouldRemove, ), {]
[hasSideEffects, ;, private, boolean, canBeSideEffected, ;, public, Parameter, (, Node, arg, ,, boolean, shouldRemove, ), {, this, ., shouldRemove, =]
[private, boolean, canBeSideEffected, ;, public, Parameter, (, Node, arg, ,, boolean, shouldRemove, ), {, this, ., shouldRemove, =, shouldRemove, ;]
[private, boolean, canBeSideEffected, ;, public, Parameter, (, Node, arg, ,, boolean, shouldRemove, ), {, this, ., shouldRemove, =, shouldRemove, ;]
[public, Parameter, (, Node, arg, ,, boolean, shouldRemove, ), {, this, ., shouldRemove, =, shouldRemove, ;, this, ., arg, =]
[this, ., shouldRemove, =, shouldRemove, ;, this, ., arg, =, arg, ;, }, public, Node, getArg, (, ), {, return]
[arg, ;, }, public, Node, getArg, (, ), {, return, arg, ;, }, public, boolean, shouldRemove, (, ), {, return]
[;, }, public, boolean, shouldRemove, (, ), {, return, shouldRemove, ;, }, public, void, setShouldRemove, (, boolean, value, ), {]
[public, boolean, shouldRemove, (, ), {, return, shouldRemove, ;, }, public, void, setShouldRemove, (, boolean, value, ), {, shouldRemove, =]
[void, setShouldRemove, (, boolean, value, ), {, shouldRemove, =, value, ;, }, public, void, setHasSideEffects, (, boolean, hasSideEffects, ), {]
[void, setShouldRemove, (, boolean, value, ), {, shouldRemove, =, value, ;, }, public, void, setHasSideEffects, (, boolean, hasSideEffects, ), {]
[value, ), {, shouldRemove, =, value, ;, }, public, void, setHasSideEffects, (, boolean, hasSideEffects, ), {, this, ., hasSideEffects, =]
[setHasSideEffects, (, boolean, hasSideEffects, ), {, this, ., hasSideEffects, =, hasSideEffects, ;, }, public, boolean, hasSideEffects, (, ), {, return]
[;, }, public, boolean, hasSideEffects, (, ), {, return, hasSideEffects, ;, }, public, void, setCanBeSideEffected, (, boolean, canBeSideEffected, ), {]
[;, }, public, boolean, hasSideEffects, (, ), {, return, hasSideEffects, ;, }, public, void, setCanBeSideEffected, (, boolean, canBeSideEffected, ), {]
[hasSideEffects, (, ), {, return, hasSideEffects, ;, }, public, void, setCanBeSideEffected, (, boolean, canBeSideEffected, ), {, this, ., canBeSideEffected, =]
[setCanBeSideEffected, (, boolean, canBeSideEffected, ), {, this, ., canBeSideEffected, =, canBeSideEffected, ;, }, public, boolean, canBeSideEffected, (, ), {, return]
[{, return, canBeSideEffected, ;, }, }, private, void, addVariableToFunction, (, Node, function, ,, Node, varName, ,, Node, value, ), {]
[{, return, canBeSideEffected, ;, }, }, private, void, addVariableToFunction, (, Node, function, ,, Node, varName, ,, Node, value, ), {]
[}, }, private, void, addVariableToFunction, (, Node, function, ,, Node, varName, ,, Node, value, ), {, Preconditions, ., checkArgument, (]
[}, }, private, void, addVariableToFunction, (, Node, function, ,, Node, varName, ,, Node, value, ), {, Preconditions, ., checkArgument, (]
[Node, function, ,, Node, varName, ,, Node, value, ), {, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ,]
[Node, value, ), {, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ,, "Node must be a function.", ), ;, Node, block, =]
[Node, value, ), {, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ,, "Node must be a function.", ), ;, Node, block, =]
[checkArgument, (, function, ., isFunction, (, ), ,, "Node must be a function.", ), ;, Node, block, =, function, ., getLastChild, (, ), ;]
[checkArgument, (, function, ., isFunction, (, ), ,, "Node must be a function.", ), ;, Node, block, =, function, ., getLastChild, (, ), ;]
[isFunction, (, ), ,, "Node must be a function.", ), ;, Node, block, =, function, ., getLastChild, (, ), ;, Preconditions, ., checkArgument, (]
[isFunction, (, ), ,, "Node must be a function.", ), ;, Node, block, =, function, ., getLastChild, (, ), ;, Preconditions, ., checkArgument, (]
[;, Node, block, =, function, ., getLastChild, (, ), ;, Preconditions, ., checkArgument, (, block, ., isBlock, (, ), ,]
[=, function, ., getLastChild, (, ), ;, Preconditions, ., checkArgument, (, block, ., isBlock, (, ), ,, "Node must be a block.", ), ;]
[=, function, ., getLastChild, (, ), ;, Preconditions, ., checkArgument, (, block, ., isBlock, (, ), ,, "Node must be a block.", ), ;]
[(, ), ;, Preconditions, ., checkArgument, (, block, ., isBlock, (, ), ,, "Node must be a block.", ), ;, Preconditions, ., checkState, (]
[(, ), ;, Preconditions, ., checkArgument, (, block, ., isBlock, (, ), ,, "Node must be a block.", ), ;, Preconditions, ., checkState, (]
[(, ), ;, Preconditions, ., checkArgument, (, block, ., isBlock, (, ), ,, "Node must be a block.", ), ;, Preconditions, ., checkState, (]
[(, block, ., isBlock, (, ), ,, "Node must be a block.", ), ;, Preconditions, ., checkState, (, value, ., getParent, (, ), ==]
[), ;, Preconditions, ., checkState, (, value, ., getParent, (, ), ==, null, ), ;, Node, stmt, ;, if, (]
[), ;, Preconditions, ., checkState, (, value, ., getParent, (, ), ==, null, ), ;, Node, stmt, ;, if, (]
[Preconditions, ., checkState, (, value, ., getParent, (, ), ==, null, ), ;, Node, stmt, ;, if, (, varName, !=]
[(, value, ., getParent, (, ), ==, null, ), ;, Node, stmt, ;, if, (, varName, !=, null, ), {]
[., getParent, (, ), ==, null, ), ;, Node, stmt, ;, if, (, varName, !=, null, ), {, stmt, =]
[., getParent, (, ), ==, null, ), ;, Node, stmt, ;, if, (, varName, !=, null, ), {, stmt, =]
[==, null, ), ;, Node, stmt, ;, if, (, varName, !=, null, ), {, stmt, =, NodeUtil, ., newVarNode, (]
[==, null, ), ;, Node, stmt, ;, if, (, varName, !=, null, ), {, stmt, =, NodeUtil, ., newVarNode, (]
[;, if, (, varName, !=, null, ), {, stmt, =, NodeUtil, ., newVarNode, (, varName, ., getString, (, ), ,]
[), {, stmt, =, NodeUtil, ., newVarNode, (, varName, ., getString, (, ), ,, value, ), ;, }, else, {]
[stmt, =, NodeUtil, ., newVarNode, (, varName, ., getString, (, ), ,, value, ), ;, }, else, {, stmt, =]
[stmt, =, NodeUtil, ., newVarNode, (, varName, ., getString, (, ), ,, value, ), ;, }, else, {, stmt, =]
[newVarNode, (, varName, ., getString, (, ), ,, value, ), ;, }, else, {, stmt, =, IR, ., exprResult, (]
[getString, (, ), ,, value, ), ;, }, else, {, stmt, =, IR, ., exprResult, (, value, ), ;, }]
[getString, (, ), ,, value, ), ;, }, else, {, stmt, =, IR, ., exprResult, (, value, ), ;, }]
[value, ), ;, }, else, {, stmt, =, IR, ., exprResult, (, value, ), ;, }, block, ., addChildToFront, (]
[}, else, {, stmt, =, IR, ., exprResult, (, value, ), ;, }, block, ., addChildToFront, (, stmt, ), ;]
[}, else, {, stmt, =, IR, ., exprResult, (, value, ), ;, }, block, ., addChildToFront, (, stmt, ), ;]
[., reportCodeChange, (, ), ;, }, private, boolean, eliminateParamsAfter, (, Node, function, ,, int, argIndex, ), {, boolean, paramRemoved, =]
[}, private, boolean, eliminateParamsAfter, (, Node, function, ,, int, argIndex, ), {, boolean, paramRemoved, =, false, ;, Node, formalArgPtr, =]
[}, private, boolean, eliminateParamsAfter, (, Node, function, ,, int, argIndex, ), {, boolean, paramRemoved, =, false, ;, Node, formalArgPtr, =]
[}, private, boolean, eliminateParamsAfter, (, Node, function, ,, int, argIndex, ), {, boolean, paramRemoved, =, false, ;, Node, formalArgPtr, =]
[}, private, boolean, eliminateParamsAfter, (, Node, function, ,, int, argIndex, ), {, boolean, paramRemoved, =, false, ;, Node, formalArgPtr, =]
[;, Node, formalArgPtr, =, function, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, while, (]
[;, Node, formalArgPtr, =, function, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, while, (]
[;, Node, formalArgPtr, =, function, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, while, (]
[formalArgPtr, =, function, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, while, (, argIndex, !=]
[function, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, while, (, argIndex, !=, 0, &&]
[function, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, while, (, argIndex, !=, 0, &&]
[getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, while, (, argIndex, !=, 0, &&, formalArgPtr, !=]
[., getNext, (, ), ., getFirstChild, (, ), ;, while, (, argIndex, !=, 0, &&, formalArgPtr, !=, null, ), {]
[(, ), ., getFirstChild, (, ), ;, while, (, argIndex, !=, 0, &&, formalArgPtr, !=, null, ), {, formalArgPtr, =]
[(, ), ., getFirstChild, (, ), ;, while, (, argIndex, !=, 0, &&, formalArgPtr, !=, null, ), {, formalArgPtr, =]
[;, while, (, argIndex, !=, 0, &&, formalArgPtr, !=, null, ), {, formalArgPtr, =, formalArgPtr, ., getNext, (, ), ;]
[;, while, (, argIndex, !=, 0, &&, formalArgPtr, !=, null, ), {, formalArgPtr, =, formalArgPtr, ., getNext, (, ), ;]
[0, &&, formalArgPtr, !=, null, ), {, formalArgPtr, =, formalArgPtr, ., getNext, (, ), ;, argIndex, --, ;, }, return]
[formalArgPtr, !=, null, ), {, formalArgPtr, =, formalArgPtr, ., getNext, (, ), ;, argIndex, --, ;, }, return, eliminateParamsAfter, (]
[null, ), {, formalArgPtr, =, formalArgPtr, ., getNext, (, ), ;, argIndex, --, ;, }, return, eliminateParamsAfter, (, function, ,]
[(, function, ,, formalArgPtr, ), ;, }, private, boolean, eliminateParamsAfter, (, Node, fnNode, ,, Node, argNode, ), {, if, (]
[(, function, ,, formalArgPtr, ), ;, }, private, boolean, eliminateParamsAfter, (, Node, fnNode, ,, Node, argNode, ), {, if, (]
[,, formalArgPtr, ), ;, }, private, boolean, eliminateParamsAfter, (, Node, fnNode, ,, Node, argNode, ), {, if, (, argNode, !=]
[;, }, private, boolean, eliminateParamsAfter, (, Node, fnNode, ,, Node, argNode, ), {, if, (, argNode, !=, null, ), {]
[private, boolean, eliminateParamsAfter, (, Node, fnNode, ,, Node, argNode, ), {, if, (, argNode, !=, null, ), {, eliminateParamsAfter, (]
[eliminateParamsAfter, (, Node, fnNode, ,, Node, argNode, ), {, if, (, argNode, !=, null, ), {, eliminateParamsAfter, (, fnNode, ,]
[eliminateParamsAfter, (, Node, fnNode, ,, Node, argNode, ), {, if, (, argNode, !=, null, ), {, eliminateParamsAfter, (, fnNode, ,]
[), {, if, (, argNode, !=, null, ), {, eliminateParamsAfter, (, fnNode, ,, argNode, ., getNext, (, ), ), ;]
[), {, if, (, argNode, !=, null, ), {, eliminateParamsAfter, (, fnNode, ,, argNode, ., getNext, (, ), ), ;]
[eliminateParamsAfter, (, fnNode, ,, argNode, ., getNext, (, ), ), ;, argNode, ., detachFromParent, (, ), ;, Node, var, =]
[eliminateParamsAfter, (, fnNode, ,, argNode, ., getNext, (, ), ), ;, argNode, ., detachFromParent, (, ), ;, Node, var, =]
[eliminateParamsAfter, (, fnNode, ,, argNode, ., getNext, (, ), ), ;, argNode, ., detachFromParent, (, ), ;, Node, var, =]
[argNode, ., getNext, (, ), ), ;, argNode, ., detachFromParent, (, ), ;, Node, var, =, IR, ., var, (]
[), ;, argNode, ., detachFromParent, (, ), ;, Node, var, =, IR, ., var, (, argNode, ), ., copyInformationFrom, (]
[., detachFromParent, (, ), ;, Node, var, =, IR, ., var, (, argNode, ), ., copyInformationFrom, (, argNode, ), ;]
[., detachFromParent, (, ), ;, Node, var, =, IR, ., var, (, argNode, ), ., copyInformationFrom, (, argNode, ), ;]
[., detachFromParent, (, ), ;, Node, var, =, IR, ., var, (, argNode, ), ., copyInformationFrom, (, argNode, ), ;]
[IR, ., var, (, argNode, ), ., copyInformationFrom, (, argNode, ), ;, fnNode, ., getLastChild, (, ), ., addChildrenToFront, (]
[(, argNode, ), ., copyInformationFrom, (, argNode, ), ;, fnNode, ., getLastChild, (, ), ., addChildrenToFront, (, var, ), ;]
[(, argNode, ), ., copyInformationFrom, (, argNode, ), ;, fnNode, ., getLastChild, (, ), ., addChildrenToFront, (, var, ), ;]
[), ;, fnNode, ., getLastChild, (, ), ., addChildrenToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, return]
[getLastChild, (, ), ., addChildrenToFront, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, return, true, ;, }, return]
[;, return, true, ;, }, return, false, ;, }, private, Node, eliminateFunctionParamAt, (, Node, function, ,, int, argIndex, ), {]
[;, return, true, ;, }, return, false, ;, }, private, Node, eliminateFunctionParamAt, (, Node, function, ,, int, argIndex, ), {]
[}, return, false, ;, }, private, Node, eliminateFunctionParamAt, (, Node, function, ,, int, argIndex, ), {, Preconditions, ., checkArgument, (]
[}, return, false, ;, }, private, Node, eliminateFunctionParamAt, (, Node, function, ,, int, argIndex, ), {, Preconditions, ., checkArgument, (]
[Node, eliminateFunctionParamAt, (, Node, function, ,, int, argIndex, ), {, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ,]
[int, argIndex, ), {, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ,, "Node must be a function.", ), ;, Node, formalArgPtr, =]
[int, argIndex, ), {, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ,, "Node must be a function.", ), ;, Node, formalArgPtr, =]
[Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ,, "Node must be a function.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (]
[checkArgument, (, function, ., isFunction, (, ), ,, "Node must be a function.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (, function, ,]
[(, ), ,, "Node must be a function.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (, function, ,, argIndex, ), ;, if, (]
[(, ), ,, "Node must be a function.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (, function, ,, argIndex, ), ;, if, (]
[,, "Node must be a function.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (, function, ,, argIndex, ), ;, if, (, formalArgPtr, !=]
[;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (, function, ,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {]
[;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (, function, ,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {]
[;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (, function, ,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {]
[;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForFunction, (, function, ,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {]
[;, if, (, formalArgPtr, !=, null, ), {, function, ., getFirstChild, (, ), ., getNext, (, ), ., removeChild, (]
[null, ), {, function, ., getFirstChild, (, ), ., getNext, (, ), ., removeChild, (, formalArgPtr, ), ;, }, return]
[formalArgPtr, ;, }, private, Node, eliminateCallParamAt, (, SimpleDefinitionFinder, defFinder, ,, Parameter, p, ,, Node, call, ,, int, argIndex, ), {]
[formalArgPtr, ;, }, private, Node, eliminateCallParamAt, (, SimpleDefinitionFinder, defFinder, ,, Parameter, p, ,, Node, call, ,, int, argIndex, ), {]
[Node, eliminateCallParamAt, (, SimpleDefinitionFinder, defFinder, ,, Parameter, p, ,, Node, call, ,, int, argIndex, ), {, Preconditions, ., checkArgument, (]
[Node, eliminateCallParamAt, (, SimpleDefinitionFinder, defFinder, ,, Parameter, p, ,, Node, call, ,, int, argIndex, ), {, Preconditions, ., checkArgument, (]
[defFinder, ,, Parameter, p, ,, Node, call, ,, int, argIndex, ), {, Preconditions, ., checkArgument, (, NodeUtil, ., isCallOrNew, (]
[p, ,, Node, call, ,, int, argIndex, ), {, Preconditions, ., checkArgument, (, NodeUtil, ., isCallOrNew, (, call, ), ,]
[argIndex, ), {, Preconditions, ., checkArgument, (, NodeUtil, ., isCallOrNew, (, call, ), ,, "Node must be a call or new.", ), ;, Node, formalArgPtr, =]
[argIndex, ), {, Preconditions, ., checkArgument, (, NodeUtil, ., isCallOrNew, (, call, ), ,, "Node must be a call or new.", ), ;, Node, formalArgPtr, =]
[., checkArgument, (, NodeUtil, ., isCallOrNew, (, call, ), ,, "Node must be a call or new.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForCallOrNew, (]
[(, NodeUtil, ., isCallOrNew, (, call, ), ,, "Node must be a call or new.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForCallOrNew, (, call, ,]
[call, ), ,, "Node must be a call or new.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForCallOrNew, (, call, ,, argIndex, ), ;, if, (]
[call, ), ,, "Node must be a call or new.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForCallOrNew, (, call, ,, argIndex, ), ;, if, (]
[,, "Node must be a call or new.", ), ;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForCallOrNew, (, call, ,, argIndex, ), ;, if, (, formalArgPtr, !=]
[;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForCallOrNew, (, call, ,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {]
[;, Node, formalArgPtr, =, NodeUtil, ., getArgumentForCallOrNew, (, call, ,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {]
[NodeUtil, ., getArgumentForCallOrNew, (, call, ,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {, call, ., removeChild, (]
[,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {, call, ., removeChild, (, formalArgPtr, ), ;, if, (]
[,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {, call, ., removeChild, (, formalArgPtr, ), ;, if, (]
[,, argIndex, ), ;, if, (, formalArgPtr, !=, null, ), {, call, ., removeChild, (, formalArgPtr, ), ;, if, (]
[formalArgPtr, !=, null, ), {, call, ., removeChild, (, formalArgPtr, ), ;, if, (, p, ., getArg, (, ), !=]
[), {, call, ., removeChild, (, formalArgPtr, ), ;, if, (, p, ., getArg, (, ), !=, formalArgPtr, ), {]
[), {, call, ., removeChild, (, formalArgPtr, ), ;, if, (, p, ., getArg, (, ), !=, formalArgPtr, ), {]
[removeChild, (, formalArgPtr, ), ;, if, (, p, ., getArg, (, ), !=, formalArgPtr, ), {, removedNodes, ., add, (]
[;, if, (, p, ., getArg, (, ), !=, formalArgPtr, ), {, removedNodes, ., add, (, formalArgPtr, ), ;, }]
[;, if, (, p, ., getArg, (, ), !=, formalArgPtr, ), {, removedNodes, ., add, (, formalArgPtr, ), ;, }]
[!=, formalArgPtr, ), {, removedNodes, ., add, (, formalArgPtr, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, return]
