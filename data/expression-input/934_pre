[import, java, ., util, ., logging, ., Logger, ;, class, AmbiguateProperties, implements, CompilerPass, {, private, static, final, Logger, logger, =]
[import, java, ., util, ., logging, ., Logger, ;, class, AmbiguateProperties, implements, CompilerPass, {, private, static, final, Logger, logger, =]
[., logging, ., Logger, ;, class, AmbiguateProperties, implements, CompilerPass, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[., logging, ., Logger, ;, class, AmbiguateProperties, implements, CompilerPass, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[class, ., getName, (, ), ), ;, private, final, AbstractCompiler, compiler, ;, private, final, List, <, Node, >, stringNodesToRename, =]
[class, ., getName, (, ), ), ;, private, final, AbstractCompiler, compiler, ;, private, final, List, <, Node, >, stringNodesToRename, =]
[(, ), ;, private, final, char, [, ], reservedCharacters, ;, private, final, Map, <, String, ,, Property, >, propertyMap, =]
[(, ), ;, private, final, char, [, ], reservedCharacters, ;, private, final, Map, <, String, ,, Property, >, propertyMap, =]
[String, ,, Property, >, propertyMap, =, Maps, ., newHashMap, (, ), ;, private, final, Set, <, String, >, externedNames, =]
[String, ,, Property, >, propertyMap, =, Maps, ., newHashMap, (, ), ;, private, final, Set, <, String, >, externedNames, =]
[Set, <, String, >, externedNames, =, Sets, ., newHashSet, (, ), ;, private, final, Set, <, String, >, quotedNames, =]
[Set, <, String, >, externedNames, =, Sets, ., newHashSet, (, ), ;, private, final, Set, <, String, >, quotedNames, =]
[String, >, quotedNames, =, Sets, ., newHashSet, (, ), ;, private, final, Map, <, String, ,, String, >, renamingMap, =]
[String, >, quotedNames, =, Sets, ., newHashSet, (, ), ;, private, final, Map, <, String, ,, String, >, renamingMap, =]
[,, String, >, renamingMap, =, Maps, ., newHashMap, (, ), ;, private, static, final, Comparator, <, Property, >, FREQUENCY_COMPARATOR, =]
[Property, >, (, ), {, @, Override, public, int, compare, (, Property, p1, ,, Property, p2, ), {, if, (]
[Property, >, (, ), {, @, Override, public, int, compare, (, Property, p1, ,, Property, p2, ), {, if, (]
[Property, >, (, ), {, @, Override, public, int, compare, (, Property, p1, ,, Property, p2, ), {, if, (]
[{, @, Override, public, int, compare, (, Property, p1, ,, Property, p2, ), {, if, (, p1, ., numOccurrences, !=]
[{, @, Override, public, int, compare, (, Property, p1, ,, Property, p2, ), {, if, (, p1, ., numOccurrences, !=]
[(, Property, p1, ,, Property, p2, ), {, if, (, p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return]
[(, Property, p1, ,, Property, p2, ), {, if, (, p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return]
[(, Property, p1, ,, Property, p2, ), {, if, (, p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return]
[Property, p2, ), {, if, (, p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -]
[Property, p2, ), {, if, (, p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -]
[p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, return]
[p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, return]
[p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, return]
[numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, return, p1, ., oldName, ., compareTo, (]
[numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, return, p1, ., oldName, ., compareTo, (]
[., compareTo, (, p2, ., oldName, ), ;, }, }, ;, private, BiMap, <, JSType, ,, Integer, >, intForType, =]
[., compareTo, (, p2, ., oldName, ), ;, }, }, ;, private, BiMap, <, JSType, ,, Integer, >, intForType, =]
[,, Integer, >, intForType, =, HashBiMap, ., create, (, ), ;, private, Map, <, JSType, ,, JSTypeBitSet, >, relatedBitsets, =]
[,, Integer, >, intForType, =, HashBiMap, ., create, (, ), ;, private, Map, <, JSType, ,, JSTypeBitSet, >, relatedBitsets, =]
[=, Maps, ., newHashMap, (, ), ;, private, final, Set, <, JSType, >, invalidatingTypes, ;, static, final, String, SKIP_PREFIX, =]
[invalidatingTypes, ;, static, final, String, SKIP_PREFIX, =, "JSAbstractCompiler", ;, AmbiguateProperties, (, AbstractCompiler, compiler, ,, char, [, ], reservedCharacters, ), {]
[invalidatingTypes, ;, static, final, String, SKIP_PREFIX, =, "JSAbstractCompiler", ;, AmbiguateProperties, (, AbstractCompiler, compiler, ,, char, [, ], reservedCharacters, ), {]
[String, SKIP_PREFIX, =, "JSAbstractCompiler", ;, AmbiguateProperties, (, AbstractCompiler, compiler, ,, char, [, ], reservedCharacters, ), {, Preconditions, ., checkState, (]
[String, SKIP_PREFIX, =, "JSAbstractCompiler", ;, AmbiguateProperties, (, AbstractCompiler, compiler, ,, char, [, ], reservedCharacters, ), {, Preconditions, ., checkState, (]
[String, SKIP_PREFIX, =, "JSAbstractCompiler", ;, AmbiguateProperties, (, AbstractCompiler, compiler, ,, char, [, ], reservedCharacters, ), {, Preconditions, ., checkState, (]
[[, ], reservedCharacters, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[[, ], reservedCharacters, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[{, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;, this, ., reservedCharacters, =]
[isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;, this, ., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r, =]
[isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;, this, ., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r, =]
[., compiler, =, compiler, ;, this, ., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (, ), ;]
[=, compiler, ;, this, ., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =]
[=, compiler, ;, this, ., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =]
[., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (]
[., reservedCharacters, =, reservedCharacters, ;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (]
[;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (, r, ., getNativeType, (]
[;, JSTypeRegistry, r, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (, r, ., getNativeType, (]
[., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (, r, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,]
[., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (, r, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,]
[;, invalidatingTypes, =, Sets, ., newHashSet, (, r, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, r, ., getNativeType, (]
[;, invalidatingTypes, =, Sets, ., newHashSet, (, r, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, r, ., getNativeType, (]
[newHashSet, (, r, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,]
[newHashSet, (, r, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,]
[getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, r, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, r, ., getNativeType, (]
[), ,, r, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,]
[), ,, r, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,]
[getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, r, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, r, ., getNativeType, (]
[), ,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,]
[), ,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,]
[getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,, r, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,, r, ., getNativeType, (]
[), ,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,]
[), ,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,]
[getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,, r, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,, r, ., getNativeType, (]
[), ,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,]
[), ,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,]
[getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,, r, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,, r, ., getNativeType, (]
[), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,]
[), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,]
[getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, r, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, r, ., getNativeType, (]
[), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,]
[), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,]
[getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, r, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, r, ., getNativeType, (]
[), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,]
[), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,]
[getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, r, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, r, ., getNativeType, (]
[), ,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,]
[), ,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,]
[getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,, r, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,, r, ., getNativeType, (]
[), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,]
[), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,]
[getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, r, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, r, ., getNativeType, (]
[), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,]
[), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,]
[getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,, r, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,, r, ., getNativeType, (]
[), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,]
[), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,]
[getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, r, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, r, ., getNativeType, (]
[JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, for, (, TypeMismatch, mis, :]
[JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, for, (, TypeMismatch, mis, :]
[JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, for, (, TypeMismatch, mis, :]
[UNKNOWN_TYPE, ), ), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {]
[), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (]
[), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (]
[mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (, mis, ., typeA, ), ;]
[compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (, mis, ., typeA, ), ;, addInvalidatingType, (]
[compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (, mis, ., typeA, ), ;, addInvalidatingType, (]
[typeA, ), ;, addInvalidatingType, (, mis, ., typeB, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ), {]
[;, addInvalidatingType, (, mis, ., typeB, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ), {, type, =]
[;, addInvalidatingType, (, mis, ., typeB, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ), {, type, =]
[}, }, private, void, addInvalidatingType, (, JSType, type, ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[}, }, private, void, addInvalidatingType, (, JSType, type, ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[(, ), ), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addInvalidatingType, (]
[alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addInvalidatingType, (, alt, ), ;, }, }]
[alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addInvalidatingType, (, alt, ), ;, }, }]
[toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addInvalidatingType, (, alt, ), ;, }, }, invalidatingTypes, ., add, (]
[), ), {, addInvalidatingType, (, alt, ), ;, }, }, invalidatingTypes, ., add, (, type, ), ;, ObjectType, objType, =]
[), ), {, addInvalidatingType, (, alt, ), ;, }, }, invalidatingTypes, ., add, (, type, ), ;, ObjectType, objType, =]
[(, alt, ), ;, }, }, invalidatingTypes, ., add, (, type, ), ;, ObjectType, objType, =, ObjectType, ., cast, (]
[}, invalidatingTypes, ., add, (, type, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[}, invalidatingTypes, ., add, (, type, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[}, invalidatingTypes, ., add, (, type, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[., add, (, type, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=]
[(, type, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&]
[(, type, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&]
[ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., isInstanceType, (, ), ), {]
[ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., isInstanceType, (, ), ), {]
[type, ), ;, if, (, objType, !=, null, &&, objType, ., isInstanceType, (, ), ), {, invalidatingTypes, ., add, (]
[type, ), ;, if, (, objType, !=, null, &&, objType, ., isInstanceType, (, ), ), {, invalidatingTypes, ., add, (]
[objType, ., getImplicitPrototype, (, ), ), ;, }, }, Map, <, String, ,, String, >, getRenamingMap, (, ), {, return]
[String, >, getRenamingMap, (, ), {, return, renamingMap, ;, }, private, int, getIntForType, (, JSType, type, ), {, if, (]
[String, >, getRenamingMap, (, ), {, return, renamingMap, ;, }, private, int, getIntForType, (, JSType, type, ), {, if, (]
[), {, return, renamingMap, ;, }, private, int, getIntForType, (, JSType, type, ), {, if, (, intForType, ., containsKey, (]
[}, private, int, getIntForType, (, JSType, type, ), {, if, (, intForType, ., containsKey, (, type, ), ), {, return]
[}, private, int, getIntForType, (, JSType, type, ), {, if, (, intForType, ., containsKey, (, type, ), ), {, return]
[}, private, int, getIntForType, (, JSType, type, ), {, if, (, intForType, ., containsKey, (, type, ), ), {, return]
[(, JSType, type, ), {, if, (, intForType, ., containsKey, (, type, ), ), {, return, intForType, ., get, (]
[type, ), ), {, return, intForType, ., get, (, type, ), ., intValue, (, ), ;, }, int, newInt, =]
[type, ), ), {, return, intForType, ., get, (, type, ), ., intValue, (, ), ;, }, int, newInt, =]
[type, ), ), {, return, intForType, ., get, (, type, ), ., intValue, (, ), ;, }, int, newInt, =]
[., get, (, type, ), ., intValue, (, ), ;, }, int, newInt, =, intForType, ., size, (, ), +]
[(, type, ), ., intValue, (, ), ;, }, int, newInt, =, intForType, ., size, (, ), +, 1, ;]
[(, type, ), ., intValue, (, ), ;, }, int, newInt, =, intForType, ., size, (, ), +, 1, ;]
[intValue, (, ), ;, }, int, newInt, =, intForType, ., size, (, ), +, 1, ;, intForType, ., put, (]
[), ;, }, int, newInt, =, intForType, ., size, (, ), +, 1, ;, intForType, ., put, (, type, ,]
[newInt, =, intForType, ., size, (, ), +, 1, ;, intForType, ., put, (, type, ,, newInt, ), ;, return]
[newInt, ), ;, return, newInt, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[newInt, ), ;, return, newInt, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[newInt, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;]
[externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;]
[), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =]
[root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (]
[root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (]
[root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (]
[), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, externedNames, ., size, (, ), +]
[), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, externedNames, ., size, (, ), +]
[=, new, HashSet, <, String, >, (, externedNames, ., size, (, ), +, quotedNames, ., size, (, ), ), ;]
[=, new, HashSet, <, String, >, (, externedNames, ., size, (, ), +, quotedNames, ., size, (, ), ), ;]
[String, >, (, externedNames, ., size, (, ), +, quotedNames, ., size, (, ), ), ;, reservedNames, ., addAll, (]
[externedNames, ., size, (, ), +, quotedNames, ., size, (, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;]
[externedNames, ., size, (, ), +, quotedNames, ., size, (, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;]
[), +, quotedNames, ., size, (, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (]
[), ), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, int, numRenamedPropertyNames, =]
[addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, int, numRenamedPropertyNames, =, 0, ;, int, numSkippedPropertyNames, =]
[(, quotedNames, ), ;, int, numRenamedPropertyNames, =, 0, ;, int, numSkippedPropertyNames, =, 0, ;, Set, <, Property, >, propsByFreq, =]
[=, 0, ;, int, numSkippedPropertyNames, =, 0, ;, Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >, (]
[Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, ), ;, for, (, Property, p, :]
[Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, ), ;, for, (, Property, p, :]
[Property, >, (, FREQUENCY_COMPARATOR, ), ;, for, (, Property, p, :, propertyMap, ., values, (, ), ), {, if, (]
[>, (, FREQUENCY_COMPARATOR, ), ;, for, (, Property, p, :, propertyMap, ., values, (, ), ), {, if, (, !]
[>, (, FREQUENCY_COMPARATOR, ), ;, for, (, Property, p, :, propertyMap, ., values, (, ), ), {, if, (, !]
[for, (, Property, p, :, propertyMap, ., values, (, ), ), {, if, (, !, p, ., skipAmbiguating, ), {]
[(, Property, p, :, propertyMap, ., values, (, ), ), {, if, (, !, p, ., skipAmbiguating, ), {, ++]
[p, :, propertyMap, ., values, (, ), ), {, if, (, !, p, ., skipAmbiguating, ), {, ++, numRenamedPropertyNames, ;]
[p, :, propertyMap, ., values, (, ), ), {, if, (, !, p, ., skipAmbiguating, ), {, ++, numRenamedPropertyNames, ;]
[values, (, ), ), {, if, (, !, p, ., skipAmbiguating, ), {, ++, numRenamedPropertyNames, ;, propsByFreq, ., add, (]
[(, !, p, ., skipAmbiguating, ), {, ++, numRenamedPropertyNames, ;, propsByFreq, ., add, (, p, ), ;, }, else, {]
[!, p, ., skipAmbiguating, ), {, ++, numRenamedPropertyNames, ;, propsByFreq, ., add, (, p, ), ;, }, else, {, ++]
[., skipAmbiguating, ), {, ++, numRenamedPropertyNames, ;, propsByFreq, ., add, (, p, ), ;, }, else, {, ++, numSkippedPropertyNames, ;]
[., skipAmbiguating, ), {, ++, numRenamedPropertyNames, ;, propsByFreq, ., add, (, p, ), ;, }, else, {, ++, numSkippedPropertyNames, ;]
[++, numRenamedPropertyNames, ;, propsByFreq, ., add, (, p, ), ;, }, else, {, ++, numSkippedPropertyNames, ;, reservedNames, ., add, (]
[++, numRenamedPropertyNames, ;, propsByFreq, ., add, (, p, ), ;, }, else, {, ++, numSkippedPropertyNames, ;, reservedNames, ., add, (]
[}, else, {, ++, numSkippedPropertyNames, ;, reservedNames, ., add, (, p, ., oldName, ), ;, }, }, PropertyGraph, graph, =]
[++, numSkippedPropertyNames, ;, reservedNames, ., add, (, p, ., oldName, ), ;, }, }, PropertyGraph, graph, =, new, PropertyGraph, (]
[++, numSkippedPropertyNames, ;, reservedNames, ., add, (, p, ., oldName, ), ;, }, }, PropertyGraph, graph, =, new, PropertyGraph, (]
[., add, (, p, ., oldName, ), ;, }, }, PropertyGraph, graph, =, new, PropertyGraph, (, Lists, ., newLinkedList, (]
[=, new, PropertyGraph, (, Lists, ., newLinkedList, (, propsByFreq, ), ), ;, GraphColoring, <, Property, ,, Void, >, coloring, =]
[propsByFreq, ), ), ;, GraphColoring, <, Property, ,, Void, >, coloring, =, new, GreedyGraphColoring, <, Property, ,, Void, >, (]
[), ;, GraphColoring, <, Property, ,, Void, >, coloring, =, new, GreedyGraphColoring, <, Property, ,, Void, >, (, graph, ,]
[Void, >, coloring, =, new, GreedyGraphColoring, <, Property, ,, Void, >, (, graph, ,, FREQUENCY_COMPARATOR, ), ;, int, numNewPropertyNames, =]
[Void, >, coloring, =, new, GreedyGraphColoring, <, Property, ,, Void, >, (, graph, ,, FREQUENCY_COMPARATOR, ), ;, int, numNewPropertyNames, =]
[Void, >, (, graph, ,, FREQUENCY_COMPARATOR, ), ;, int, numNewPropertyNames, =, coloring, ., color, (, ), ;, NameGenerator, nameGen, =]
[graph, ,, FREQUENCY_COMPARATOR, ), ;, int, numNewPropertyNames, =, coloring, ., color, (, ), ;, NameGenerator, nameGen, =, new, NameGenerator, (]
[FREQUENCY_COMPARATOR, ), ;, int, numNewPropertyNames, =, coloring, ., color, (, ), ;, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,]
[;, int, numNewPropertyNames, =, coloring, ., color, (, ), ;, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,]
[nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, ), ;, Map, <, Integer, ,, String, >, colorMap, =]
[nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, ), ;, Map, <, Integer, ,, String, >, colorMap, =]
[;, Map, <, Integer, ,, String, >, colorMap, =, Maps, ., newHashMap, (, ), ;, for, (, int, i, =]
[<, Integer, ,, String, >, colorMap, =, Maps, ., newHashMap, (, ), ;, for, (, int, i, =, 0, ;]
[<, Integer, ,, String, >, colorMap, =, Maps, ., newHashMap, (, ), ;, for, (, int, i, =, 0, ;]
[,, String, >, colorMap, =, Maps, ., newHashMap, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[>, colorMap, =, Maps, ., newHashMap, (, ), ;, for, (, int, i, =, 0, ;, i, <, numNewPropertyNames, ;]
[colorMap, =, Maps, ., newHashMap, (, ), ;, for, (, int, i, =, 0, ;, i, <, numNewPropertyNames, ;, ++]
[., newHashMap, (, ), ;, for, (, int, i, =, 0, ;, i, <, numNewPropertyNames, ;, ++, i, ), {]
[., newHashMap, (, ), ;, for, (, int, i, =, 0, ;, i, <, numNewPropertyNames, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, numNewPropertyNames, ;, ++, i, ), {, colorMap, ., put, (]
[(, int, i, =, 0, ;, i, <, numNewPropertyNames, ;, ++, i, ), {, colorMap, ., put, (, i, ,]
[(, int, i, =, 0, ;, i, <, numNewPropertyNames, ;, ++, i, ), {, colorMap, ., put, (, i, ,]
[i, ,, nameGen, ., generateNextName, (, ), ), ;, }, for, (, GraphNode, <, Property, ,, Void, >, node, :]
[i, ,, nameGen, ., generateNextName, (, ), ), ;, }, for, (, GraphNode, <, Property, ,, Void, >, node, :]
[), ;, }, for, (, GraphNode, <, Property, ,, Void, >, node, :, graph, ., getNodes, (, ), ), {]
[), ;, }, for, (, GraphNode, <, Property, ,, Void, >, node, :, graph, ., getNodes, (, ), ), {]
[), ;, }, for, (, GraphNode, <, Property, ,, Void, >, node, :, graph, ., getNodes, (, ), ), {]
[,, Void, >, node, :, graph, ., getNodes, (, ), ), {, node, ., getValue, (, ), ., newName, =]
[,, Void, >, node, :, graph, ., getNodes, (, ), ), {, node, ., getValue, (, ), ., newName, =]
[:, graph, ., getNodes, (, ), ), {, node, ., getValue, (, ), ., newName, =, colorMap, ., get, (]
[:, graph, ., getNodes, (, ), ), {, node, ., getValue, (, ), ., newName, =, colorMap, ., get, (]
[:, graph, ., getNodes, (, ), ), {, node, ., getValue, (, ), ., newName, =, colorMap, ., get, (]
[(, ), ., newName, =, colorMap, ., get, (, node, ., getAnnotation, (, ), ., hashCode, (, ), ), ;]
[(, ), ., newName, =, colorMap, ., get, (, node, ., getAnnotation, (, ), ., hashCode, (, ), ), ;]
[=, colorMap, ., get, (, node, ., getAnnotation, (, ), ., hashCode, (, ), ), ;, renamingMap, ., put, (]
[=, colorMap, ., get, (, node, ., getAnnotation, (, ), ., hashCode, (, ), ), ;, renamingMap, ., put, (]
[=, colorMap, ., get, (, node, ., getAnnotation, (, ), ., hashCode, (, ), ), ;, renamingMap, ., put, (]
[(, ), ., hashCode, (, ), ), ;, renamingMap, ., put, (, node, ., getValue, (, ), ., oldName, ,]
[(, ), ., hashCode, (, ), ), ;, renamingMap, ., put, (, node, ., getValue, (, ), ., oldName, ,]
[(, ), ., hashCode, (, ), ), ;, renamingMap, ., put, (, node, ., getValue, (, ), ., oldName, ,]
[(, ), ., oldName, ,, node, ., getValue, (, ), ., newName, ), ;, }, for, (, Node, n, :]
[., getValue, (, ), ., newName, ), ;, }, for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =]
[., getValue, (, ), ., newName, ), ;, }, for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =]
[for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =, n, ., getString, (, ), ;, Property, p, =]
[for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =, n, ., getString, (, ), ;, Property, p, =]
[:, stringNodesToRename, ), {, String, oldName, =, n, ., getString, (, ), ;, Property, p, =, propertyMap, ., get, (]
[oldName, =, n, ., getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (]
[oldName, =, n, ., getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (]
[oldName, =, n, ., getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (]
[n, ., getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=]
[getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&]
[getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&]
[getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&]
[Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&, p, ., newName, !=]
[propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {]
[propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {]
[oldName, ), ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (]
[oldName, ), ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (]
[(, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (]
[(, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (]
[!=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, if, (]
[null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, if, (, !]
[null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, if, (, !]
[null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, if, (, !]
[(, oldName, ., equals, (, p, ., oldName, ), ), ;, if, (, !, p, ., newName, ., equals, (]
[(, p, ., oldName, ), ), ;, if, (, !, p, ., newName, ., equals, (, oldName, ), ), {]
[(, p, ., oldName, ), ), ;, if, (, !, p, ., newName, ., equals, (, oldName, ), ), {]
[), ), ;, if, (, !, p, ., newName, ., equals, (, oldName, ), ), {, n, ., setString, (]
[), ), ;, if, (, !, p, ., newName, ., equals, (, oldName, ), ), {, n, ., setString, (]
[!, p, ., newName, ., equals, (, oldName, ), ), {, n, ., setString, (, p, ., newName, ), ;]
[!, p, ., newName, ., equals, (, oldName, ), ), {, n, ., setString, (, p, ., newName, ), ;]
[), {, n, ., setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[), {, n, ., setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (]
[setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (]
[setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (]
[setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (]
[setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (]
[setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (]
[setString, (, p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (]
[p, ., newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (, "Collapsed ", +]
[newName, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (, "Collapsed ", +, numRenamedPropertyNames, +]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (, "Collapsed ", +, numRenamedPropertyNames, +, " properties into ", +]
[., reportCodeChange, (, ), ;, }, }, }, logger, ., fine, (, "Collapsed ", +, numRenamedPropertyNames, +, " properties into ", +, numNewPropertyNames, +]
[(, ), ;, }, }, }, logger, ., fine, (, "Collapsed ", +, numRenamedPropertyNames, +, " properties into ", +, numNewPropertyNames, +, " and skipped renaming ", +]
[;, }, }, }, logger, ., fine, (, "Collapsed ", +, numRenamedPropertyNames, +, " properties into ", +, numNewPropertyNames, +, " and skipped renaming ", +, numSkippedPropertyNames, +]
[numNewPropertyNames, +, " and skipped renaming ", +, numSkippedPropertyNames, +, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (]
[numNewPropertyNames, +, " and skipped renaming ", +, numSkippedPropertyNames, +, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (]
[numSkippedPropertyNames, +, " properties.", ), ;, }, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (, relatedBitsets, ., containsKey, (]
[}, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (, relatedBitsets, ., containsKey, (, type, ), ), {, return]
[}, private, BitSet, getRelatedTypesOnNonUnion, (, JSType, type, ), {, if, (, relatedBitsets, ., containsKey, (, type, ), ), {, return]
[(, JSType, type, ), {, if, (, relatedBitsets, ., containsKey, (, type, ), ), {, return, relatedBitsets, ., get, (]
[relatedBitsets, ., containsKey, (, type, ), ), {, return, relatedBitsets, ., get, (, type, ), ;, }, else, {, throw]
[(, type, ), ), {, return, relatedBitsets, ., get, (, type, ), ;, }, else, {, throw, new, RuntimeException, (]
[(, type, ), ), {, return, relatedBitsets, ., get, (, type, ), ;, }, else, {, throw, new, RuntimeException, (]
[(, type, ), ), {, return, relatedBitsets, ., get, (, type, ), ;, }, else, {, throw, new, RuntimeException, (]
[(, type, ), ), {, return, relatedBitsets, ., get, (, type, ), ;, }, else, {, throw, new, RuntimeException, (]
[), ), {, return, relatedBitsets, ., get, (, type, ), ;, }, else, {, throw, new, RuntimeException, (, "Related types should have been computed for", +]
[{, return, relatedBitsets, ., get, (, type, ), ;, }, else, {, throw, new, RuntimeException, (, "Related types should have been computed for", +, " type: ", +]
[relatedBitsets, ., get, (, type, ), ;, }, else, {, throw, new, RuntimeException, (, "Related types should have been computed for", +, " type: ", +, type, +]
[+, " type: ", +, type, +, " but have not been.", ), ;, }, }, private, void, computeRelatedTypes, (, JSType, type, ), {, if, (]
[+, " type: ", +, type, +, " but have not been.", ), ;, }, }, private, void, computeRelatedTypes, (, JSType, type, ), {, if, (]
[;, }, }, private, void, computeRelatedTypes, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {]
[}, private, void, computeRelatedTypes, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {, type, =]
[}, private, void, computeRelatedTypes, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {, type, =]
[{, if, (, type, ., isUnionType, (, ), ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[{, if, (, type, ., isUnionType, (, ), ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[(, ), ), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, computeRelatedTypes, (]
[(, ), ., getAlternates, (, ), ), {, computeRelatedTypes, (, alt, ), ;, }, return, ;, }, }, if, (]
[(, ), ., getAlternates, (, ), ), {, computeRelatedTypes, (, alt, ), ;, }, return, ;, }, }, if, (]
[(, ), ), {, computeRelatedTypes, (, alt, ), ;, }, return, ;, }, }, if, (, relatedBitsets, ., containsKey, (]
[return, ;, }, }, if, (, relatedBitsets, ., containsKey, (, type, ), ), {, return, ;, }, JSTypeBitSet, related, =]
[}, if, (, relatedBitsets, ., containsKey, (, type, ), ), {, return, ;, }, JSTypeBitSet, related, =, new, JSTypeBitSet, (]
[}, if, (, relatedBitsets, ., containsKey, (, type, ), ), {, return, ;, }, JSTypeBitSet, related, =, new, JSTypeBitSet, (]
[type, ), ), {, return, ;, }, JSTypeBitSet, related, =, new, JSTypeBitSet, (, intForType, ., size, (, ), ), ;]
[type, ), ), {, return, ;, }, JSTypeBitSet, related, =, new, JSTypeBitSet, (, intForType, ., size, (, ), ), ;]
[return, ;, }, JSTypeBitSet, related, =, new, JSTypeBitSet, (, intForType, ., size, (, ), ), ;, relatedBitsets, ., put, (]
[}, JSTypeBitSet, related, =, new, JSTypeBitSet, (, intForType, ., size, (, ), ), ;, relatedBitsets, ., put, (, type, ,]
[=, new, JSTypeBitSet, (, intForType, ., size, (, ), ), ;, relatedBitsets, ., put, (, type, ,, related, ), ;]
[=, new, JSTypeBitSet, (, intForType, ., size, (, ), ), ;, relatedBitsets, ., put, (, type, ,, related, ), ;]
[intForType, ., size, (, ), ), ;, relatedBitsets, ., put, (, type, ,, related, ), ;, related, ., set, (]
[size, (, ), ), ;, relatedBitsets, ., put, (, type, ,, related, ), ;, related, ., set, (, getIntForType, (]
[., put, (, type, ,, related, ), ;, related, ., set, (, getIntForType, (, type, ), ), ;, if, (]
[., put, (, type, ,, related, ), ;, related, ., set, (, getIntForType, (, type, ), ), ;, if, (]
[;, related, ., set, (, getIntForType, (, type, ), ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ), {]
[., set, (, getIntForType, (, type, ), ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ), {, addRelatedInstance, (]
[., set, (, getIntForType, (, type, ), ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ), {, addRelatedInstance, (]
[set, (, getIntForType, (, type, ), ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ), {, addRelatedInstance, (, (]
[(, type, ), ), ;, if, (, type, ., isFunctionPrototypeType, (, ), ), {, addRelatedInstance, (, (, (, ObjectType, )]
[type, ., isFunctionPrototypeType, (, ), ), {, addRelatedInstance, (, (, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ,]
[(, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ,, related, ), ;, return, ;, }, FunctionType, constructor, =]
[(, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ,, related, ), ;, return, ;, }, FunctionType, constructor, =]
[(, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ,, related, ), ;, return, ;, }, FunctionType, constructor, =]
[), ;, return, ;, }, FunctionType, constructor, =, type, ., toObjectType, (, ), ., getConstructor, (, ), ;, if, (]
[), ;, return, ;, }, FunctionType, constructor, =, type, ., toObjectType, (, ), ., getConstructor, (, ), ;, if, (]
[), ;, return, ;, }, FunctionType, constructor, =, type, ., toObjectType, (, ), ., getConstructor, (, ), ;, if, (]
[return, ;, }, FunctionType, constructor, =, type, ., toObjectType, (, ), ., getConstructor, (, ), ;, if, (, constructor, !=]
[}, FunctionType, constructor, =, type, ., toObjectType, (, ), ., getConstructor, (, ), ;, if, (, constructor, !=, null, &&]
[}, FunctionType, constructor, =, type, ., toObjectType, (, ), ., getConstructor, (, ), ;, if, (, constructor, !=, null, &&]
[}, FunctionType, constructor, =, type, ., toObjectType, (, ), ., getConstructor, (, ), ;, if, (, constructor, !=, null, &&]
[toObjectType, (, ), ., getConstructor, (, ), ;, if, (, constructor, !=, null, &&, constructor, ., getSubTypes, (, ), !=]
[if, (, constructor, !=, null, &&, constructor, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subType, :]
[if, (, constructor, !=, null, &&, constructor, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subType, :]
[., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subType, :, constructor, ., getSubTypes, (, ), ), {]
[(, ), !=, null, ), {, for, (, FunctionType, subType, :, constructor, ., getSubTypes, (, ), ), {, addRelatedInstance, (]
[!=, null, ), {, for, (, FunctionType, subType, :, constructor, ., getSubTypes, (, ), ), {, addRelatedInstance, (, subType, ,]
[., getSubTypes, (, ), ), {, addRelatedInstance, (, subType, ,, related, ), ;, }, }, for, (, FunctionType, implementor, :]
[., getSubTypes, (, ), ), {, addRelatedInstance, (, subType, ,, related, ), ;, }, }, for, (, FunctionType, implementor, :]
[., getSubTypes, (, ), ), {, addRelatedInstance, (, subType, ,, related, ), ;, }, }, for, (, FunctionType, implementor, :]
[subType, ,, related, ), ;, }, }, for, (, FunctionType, implementor, :, compiler, ., getTypeRegistry, (, ), ., getDirectImplementors, (]
[subType, ,, related, ), ;, }, }, for, (, FunctionType, implementor, :, compiler, ., getTypeRegistry, (, ), ., getDirectImplementors, (]
[(, FunctionType, implementor, :, compiler, ., getTypeRegistry, (, ), ., getDirectImplementors, (, type, ., toObjectType, (, ), ), ), {]
[implementor, :, compiler, ., getTypeRegistry, (, ), ., getDirectImplementors, (, type, ., toObjectType, (, ), ), ), {, addRelatedInstance, (]
[compiler, ., getTypeRegistry, (, ), ., getDirectImplementors, (, type, ., toObjectType, (, ), ), ), {, addRelatedInstance, (, implementor, ,]
[implementor, ,, related, ), ;, }, }, private, void, addRelatedInstance, (, FunctionType, constructor, ,, JSTypeBitSet, related, ), {, if, (]
[implementor, ,, related, ), ;, }, }, private, void, addRelatedInstance, (, FunctionType, constructor, ,, JSTypeBitSet, related, ), {, if, (]
[(, FunctionType, constructor, ,, JSTypeBitSet, related, ), {, if, (, constructor, ., hasInstanceType, (, ), ), {, ObjectType, instanceType, =]
[(, FunctionType, constructor, ,, JSTypeBitSet, related, ), {, if, (, constructor, ., hasInstanceType, (, ), ), {, ObjectType, instanceType, =]
[), {, if, (, constructor, ., hasInstanceType, (, ), ), {, ObjectType, instanceType, =, constructor, ., getInstanceType, (, ), ;]
[), {, if, (, constructor, ., hasInstanceType, (, ), ), {, ObjectType, instanceType, =, constructor, ., getInstanceType, (, ), ;]
[constructor, ., hasInstanceType, (, ), ), {, ObjectType, instanceType, =, constructor, ., getInstanceType, (, ), ;, related, ., set, (]
[hasInstanceType, (, ), ), {, ObjectType, instanceType, =, constructor, ., getInstanceType, (, ), ;, related, ., set, (, getIntForType, (]
[hasInstanceType, (, ), ), {, ObjectType, instanceType, =, constructor, ., getInstanceType, (, ), ;, related, ., set, (, getIntForType, (]
[constructor, ., getInstanceType, (, ), ;, related, ., set, (, getIntForType, (, instanceType, ., getImplicitPrototype, (, ), ), ), ;]
[getInstanceType, (, ), ;, related, ., set, (, getIntForType, (, instanceType, ., getImplicitPrototype, (, ), ), ), ;, computeRelatedTypes, (]
[;, related, ., set, (, getIntForType, (, instanceType, ., getImplicitPrototype, (, ), ), ), ;, computeRelatedTypes, (, instanceType, ), ;]
[;, related, ., set, (, getIntForType, (, instanceType, ., getImplicitPrototype, (, ), ), ), ;, computeRelatedTypes, (, instanceType, ), ;]
[(, getIntForType, (, instanceType, ., getImplicitPrototype, (, ), ), ), ;, computeRelatedTypes, (, instanceType, ), ;, related, ., or, (]
[(, getIntForType, (, instanceType, ., getImplicitPrototype, (, ), ), ), ;, computeRelatedTypes, (, instanceType, ), ;, related, ., or, (]
[., getImplicitPrototype, (, ), ), ), ;, computeRelatedTypes, (, instanceType, ), ;, related, ., or, (, relatedBitsets, ., get, (]
[class, PropertyGraph, implements, AdjacencyGraph, <, Property, ,, Void, >, {, protected, final, Map, <, Property, ,, PropertyGraphNode, >, nodes, =]
[class, PropertyGraph, implements, AdjacencyGraph, <, Property, ,, Void, >, {, protected, final, Map, <, Property, ,, PropertyGraphNode, >, nodes, =]
[Maps, ., newHashMap, (, ), ;, PropertyGraph, (, Collection, <, Property, >, props, ), {, for, (, Property, prop, :]
[(, ), ;, PropertyGraph, (, Collection, <, Property, >, props, ), {, for, (, Property, prop, :, props, ), {]
[(, ), ;, PropertyGraph, (, Collection, <, Property, >, props, ), {, for, (, Property, prop, :, props, ), {]
[(, Collection, <, Property, >, props, ), {, for, (, Property, prop, :, props, ), {, nodes, ., put, (]
[<, Property, >, props, ), {, for, (, Property, prop, :, props, ), {, nodes, ., put, (, prop, ,]
[props, ), {, for, (, Property, prop, :, props, ), {, nodes, ., put, (, prop, ,, new, PropertyGraphNode, (]
[;, }, }, @, Override, public, List, <, GraphNode, <, Property, ,, Void, >, >, getNodes, (, ), {, return]
[;, }, }, @, Override, public, List, <, GraphNode, <, Property, ,, Void, >, >, getNodes, (, ), {, return]
[Void, >, >, getNodes, (, ), {, return, Lists, ., <, GraphNode, <, Property, ,, Void, >, >, newArrayList, (]
[Void, >, >, getNodes, (, ), {, return, Lists, ., <, GraphNode, <, Property, ,, Void, >, >, newArrayList, (]
[), ), ;, }, @, Override, public, GraphNode, <, Property, ,, Void, >, getNode, (, Property, property, ), {, return]
[), ), ;, }, @, Override, public, GraphNode, <, Property, ,, Void, >, getNode, (, Property, property, ), {, return]
[@, Override, public, GraphNode, <, Property, ,, Void, >, getNode, (, Property, property, ), {, return, nodes, ., get, (]
[get, (, property, ), ;, }, @, Override, public, SubGraph, <, Property, ,, Void, >, newSubGraph, (, ), {, return]
[return, new, PropertySubGraph, (, ), ;, }, @, Override, public, void, clearNodeAnnotations, (, ), {, for, (, PropertyGraphNode, node, :]
[return, new, PropertySubGraph, (, ), ;, }, @, Override, public, void, clearNodeAnnotations, (, ), {, for, (, PropertyGraphNode, node, :]
[@, Override, public, void, clearNodeAnnotations, (, ), {, for, (, PropertyGraphNode, node, :, nodes, ., values, (, ), ), {]
[@, Override, public, void, clearNodeAnnotations, (, ), {, for, (, PropertyGraphNode, node, :, nodes, ., values, (, ), ), {]
[clearNodeAnnotations, (, ), {, for, (, PropertyGraphNode, node, :, nodes, ., values, (, ), ), {, node, ., setAnnotation, (]
[node, ., setAnnotation, (, null, ), ;, }, }, @, Override, public, int, getWeight, (, Property, value, ), {, return]
[node, ., setAnnotation, (, null, ), ;, }, }, @, Override, public, int, getWeight, (, Property, value, ), {, return]
[return, value, ., numOccurrences, ;, }, }, class, PropertySubGraph, implements, SubGraph, <, Property, ,, Void, >, {, JSTypeBitSet, relatedTypes, =]
[numOccurrences, ;, }, }, class, PropertySubGraph, implements, SubGraph, <, Property, ,, Void, >, {, JSTypeBitSet, relatedTypes, =, new, JSTypeBitSet, (]
[numOccurrences, ;, }, }, class, PropertySubGraph, implements, SubGraph, <, Property, ,, Void, >, {, JSTypeBitSet, relatedTypes, =, new, JSTypeBitSet, (]
[JSTypeBitSet, (, intForType, ., size, (, ), ), ;, @, Override, public, boolean, isIndependentOf, (, Property, prop, ), {, return]
[(, intForType, ., size, (, ), ), ;, @, Override, public, boolean, isIndependentOf, (, Property, prop, ), {, return, !]
[(, intForType, ., size, (, ), ), ;, @, Override, public, boolean, isIndependentOf, (, Property, prop, ), {, return, !]
[(, ), ), ;, @, Override, public, boolean, isIndependentOf, (, Property, prop, ), {, return, !, relatedTypes, ., intersects, (]
[(, ), ), ;, @, Override, public, boolean, isIndependentOf, (, Property, prop, ), {, return, !, relatedTypes, ., intersects, (]
[relatedTypes, ., intersects, (, prop, ., relatedTypes, ), ;, }, @, Override, public, void, addNode, (, Property, prop, ), {]
[relatedTypes, ., intersects, (, prop, ., relatedTypes, ), ;, }, @, Override, public, void, addNode, (, Property, prop, ), {]
[prop, ., relatedTypes, ), ;, }, @, Override, public, void, addNode, (, Property, prop, ), {, relatedTypes, ., or, (]
[prop, ., relatedTypes, ), ;, }, @, Override, public, void, addNode, (, Property, prop, ), {, relatedTypes, ., or, (]
[GraphNode, <, Property, ,, Void, >, {, Property, property, ;, protected, Annotation, annotation, ;, PropertyGraphNode, (, Property, property, ), {]
[GraphNode, <, Property, ,, Void, >, {, Property, property, ;, protected, Annotation, annotation, ;, PropertyGraphNode, (, Property, property, ), {]
[Void, >, {, Property, property, ;, protected, Annotation, annotation, ;, PropertyGraphNode, (, Property, property, ), {, this, ., property, =]
[Property, property, ), {, this, ., property, =, property, ;, }, @, Override, public, Property, getValue, (, ), {, return]
[., property, =, property, ;, }, @, Override, public, Property, getValue, (, ), {, return, property, ;, }, @, Override]
[property, ;, }, @, Override, public, Property, getValue, (, ), {, return, property, ;, }, @, Override, @, SuppressWarnings, (]
[}, @, Override, @, SuppressWarnings, (, "unchecked", ), public, <, A, extends, Annotation, >, A, getAnnotation, (, ), {, return]
[@, SuppressWarnings, (, "unchecked", ), public, <, A, extends, Annotation, >, A, getAnnotation, (, ), {, return, (, A, )]
[(, ), {, return, (, A, ), annotation, ;, }, @, Override, public, void, setAnnotation, (, Annotation, data, ), {]
[{, return, (, A, ), annotation, ;, }, @, Override, public, void, setAnnotation, (, Annotation, data, ), {, annotation, =]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, dest, =]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, dest, =]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, dest, =]
[), {, case, Token, ., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[), {, case, Token, ., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, externedNames, ., add, (]
[., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, externedNames, ., add, (]
[), ., getNext, (, ), ;, externedNames, ., add, (, dest, ., getString, (, ), ), ;, break, ;, case]
[), ., getNext, (, ), ;, externedNames, ., add, (, dest, ., getString, (, ), ), ;, break, ;, case]
[(, dest, ., getString, (, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =]
[(, dest, ., getString, (, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;]
[., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[=, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[=, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, externedNames, ., add, (]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, externedNames, ., add, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, {, Node, propNode, =]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, {, Node, propNode, =]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, {, Node, propNode, =]
[., GETPROP, :, {, Node, propNode, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, JSType, jstype, =]
[:, {, Node, propNode, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, JSType, jstype, =, getJSType, (]
[:, {, Node, propNode, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, JSType, jstype, =, getJSType, (]
[getFirstChild, (, ), ., getNext, (, ), ;, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), ), ;]
[), ., getNext, (, ), ;, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (]
[getNext, (, ), ;, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, propNode, ,]
[), ;, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, propNode, ,, jstype, ,]
[n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, propNode, ,, jstype, ,, t, ), ;, break, ;, }, case]
[n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, propNode, ,, jstype, ,, t, ), ;, break, ;, }, case]
[propNode, ,, jstype, ,, t, ), ;, break, ;, }, case, Token, ., OBJECTLIT, :, for, (, Node, key, =]
[propNode, ,, jstype, ,, t, ), ;, break, ;, }, case, Token, ., OBJECTLIT, :, for, (, Node, key, =]
[;, break, ;, }, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[;, break, ;, }, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[;, }, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=]
[case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;]
[., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !]
[key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {, JSType, jstype, =]
[getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {, JSType, jstype, =, getJSType, (]
[getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {, JSType, jstype, =, getJSType, (]
[!, key, ., isQuotedString, (, ), ), {, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), ), ;]
[., isQuotedString, (, ), ), {, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (]
[(, ), ), {, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, key, ,]
[), {, JSType, jstype, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, key, ,, jstype, ,]
[(, n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, key, ,, jstype, ,, t, ), ;, }, else, {]
[(, n, ., getFirstChild, (, ), ), ;, maybeMarkCandidate, (, key, ,, jstype, ,, t, ), ;, }, else, {]
[(, ), ), ;, maybeMarkCandidate, (, key, ,, jstype, ,, t, ), ;, }, else, {, quotedNames, ., add, (]
[(, ), ), ;, maybeMarkCandidate, (, key, ,, jstype, ,, t, ), ;, }, else, {, quotedNames, ., add, (]
[;, }, else, {, quotedNames, ., add, (, key, ., getString, (, ), ), ;, }, }, break, ;, case]
[;, }, else, {, quotedNames, ., add, (, key, ., getString, (, ), ), ;, }, }, break, ;, case]
[(, key, ., getString, (, ), ), ;, }, }, break, ;, case, Token, ., GETELEM, :, Node, child, =]
[(, key, ., getString, (, ), ), ;, }, }, break, ;, case, Token, ., GETELEM, :, Node, child, =]
[}, }, break, ;, case, Token, ., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if, (]
[}, }, break, ;, case, Token, ., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if, (]
[GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if, (, child, ., isString, (, ), ), {]
[GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if, (, child, ., isString, (, ), ), {]
[=, n, ., getLastChild, (, ), ;, if, (, child, ., isString, (, ), ), {, quotedNames, ., add, (]
[=, n, ., getLastChild, (, ), ;, if, (, child, ., isString, (, ), ), {, quotedNames, ., add, (]
[;, }, }, private, void, maybeMarkCandidate, (, Node, n, ,, JSType, type, ,, NodeTraversal, t, ), {, String, name, =]
[;, }, }, private, void, maybeMarkCandidate, (, Node, n, ,, JSType, type, ,, NodeTraversal, t, ), {, String, name, =]
[n, ,, JSType, type, ,, NodeTraversal, t, ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[,, JSType, type, ,, NodeTraversal, t, ), {, String, name, =, n, ., getString, (, ), ;, if, (, !]
[,, JSType, type, ,, NodeTraversal, t, ), {, String, name, =, n, ., getString, (, ), ;, if, (, !]
[NodeTraversal, t, ), {, String, name, =, n, ., getString, (, ), ;, if, (, !, externedNames, ., contains, (]
[String, name, =, n, ., getString, (, ), ;, if, (, !, externedNames, ., contains, (, name, ), ), {]
[String, name, =, n, ., getString, (, ), ;, if, (, !, externedNames, ., contains, (, name, ), ), {]
[., getString, (, ), ;, if, (, !, externedNames, ., contains, (, name, ), ), {, stringNodesToRename, ., add, (]
[), ;, if, (, !, externedNames, ., contains, (, name, ), ), {, stringNodesToRename, ., add, (, n, ), ;]
[if, (, !, externedNames, ., contains, (, name, ), ), {, stringNodesToRename, ., add, (, n, ), ;, recordProperty, (]
[!, externedNames, ., contains, (, name, ), ), {, stringNodesToRename, ., add, (, n, ), ;, recordProperty, (, name, ,]
[,, type, ), ;, }, }, private, Property, recordProperty, (, String, name, ,, JSType, type, ), {, Property, prop, =]
[), ;, }, }, private, Property, recordProperty, (, String, name, ,, JSType, type, ), {, Property, prop, =, getProperty, (]
[}, private, Property, recordProperty, (, String, name, ,, JSType, type, ), {, Property, prop, =, getProperty, (, name, ), ;]
[}, private, Property, recordProperty, (, String, name, ,, JSType, type, ), {, Property, prop, =, getProperty, (, name, ), ;]
[(, String, name, ,, JSType, type, ), {, Property, prop, =, getProperty, (, name, ), ;, prop, ., addType, (]
[JSType, type, ), {, Property, prop, =, getProperty, (, name, ), ;, prop, ., addType, (, type, ), ;, return]
[addType, (, type, ), ;, return, prop, ;, }, }, private, boolean, isInvalidatingType, (, JSType, type, ), {, if, (]
[addType, (, type, ), ;, return, prop, ;, }, }, private, boolean, isInvalidatingType, (, JSType, type, ), {, if, (]
[;, }, }, private, boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {]
[}, private, boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {, type, =]
[}, private, boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {, type, =]
[{, if, (, type, ., isUnionType, (, ), ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[{, if, (, type, ., isUnionType, (, ), ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, if, (]
[for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, if, (, isInvalidatingType, (]
[type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, if, (, isInvalidatingType, (, alt, ), ), {, return]
[., getAlternates, (, ), ), {, if, (, isInvalidatingType, (, alt, ), ), {, return, true, ;, }, }, return]
[(, isInvalidatingType, (, alt, ), ), {, return, true, ;, }, }, return, false, ;, }, }, ObjectType, objType, =]
[(, isInvalidatingType, (, alt, ), ), {, return, true, ;, }, }, return, false, ;, }, }, ObjectType, objType, =]
[), ), {, return, true, ;, }, }, return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (]
[true, ;, }, }, return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return]
[true, ;, }, }, return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return]
[true, ;, }, }, return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return]
[true, ;, }, }, return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return]
[true, ;, }, }, return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return]
[true, ;, }, }, return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return]
[true, ;, }, }, return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return]
[true, ;, }, }, return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return]
[}, }, return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return, objType, ==]
[return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return, objType, ==, null, ||]
[return, false, ;, }, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return, objType, ==, null, ||]
[}, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return, objType, ==, null, ||, invalidatingTypes, ., contains, (]
[=, ObjectType, ., cast, (, type, ), ;, return, objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||]
[ObjectType, ., cast, (, type, ), ;, return, objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||, !]
[ObjectType, ., cast, (, type, ), ;, return, objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||, !]
[;, return, objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, ), ||]
[;, return, objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, ), ||]
[invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, ), ||]
[invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, ), ||]
[||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||]
[||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||]
[), ||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||, objType, ., isEnumType, (, ), ||]
[), ||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||, objType, ., isEnumType, (, ), ||]
[), ||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||, objType, ., isEnumType, (, ), ||]
[), ||, objType, ., isEmptyType, (, ), ||, objType, ., isEnumType, (, ), ||, objType, ., autoboxesTo, (, ), !=]
[objType, ., autoboxesTo, (, ), !=, null, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =]
[objType, ., autoboxesTo, (, ), !=, null, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =]
[), !=, null, ;, }, private, Property, getProperty, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (]
[private, Property, getProperty, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (, name, ), ;, if, (]
[private, Property, getProperty, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (, name, ), ;, if, (]
[getProperty, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (, name, ), ;, if, (, prop, ==]
[name, ), {, Property, prop, =, propertyMap, ., get, (, name, ), ;, if, (, prop, ==, null, ), {]
[{, Property, prop, =, propertyMap, ., get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =]
[=, propertyMap, ., get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (]
[get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;]
[get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;]
[;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (]
[(, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,]
[{, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,, prop, ), ;, }, return]
[,, prop, ), ;, }, return, prop, ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =]
[,, prop, ), ;, }, return, prop, ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =]
[}, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (]
[}, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (]
[JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (, jsType, ==]
[n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return]
[n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return]
[n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return]
[getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[), {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, {, return]
[private, class, Property, {, final, String, oldName, ;, String, newName, ;, int, numOccurrences, ;, boolean, skipAmbiguating, ;, JSTypeBitSet, relatedTypes, =]
[{, final, String, oldName, ;, String, newName, ;, int, numOccurrences, ;, boolean, skipAmbiguating, ;, JSTypeBitSet, relatedTypes, =, new, JSTypeBitSet, (]
[{, final, String, oldName, ;, String, newName, ;, int, numOccurrences, ;, boolean, skipAmbiguating, ;, JSTypeBitSet, relatedTypes, =, new, JSTypeBitSet, (]
[;, JSTypeBitSet, relatedTypes, =, new, JSTypeBitSet, (, intForType, ., size, (, ), ), ;, Property, (, String, name, ), {]
[;, JSTypeBitSet, relatedTypes, =, new, JSTypeBitSet, (, intForType, ., size, (, ), ), ;, Property, (, String, name, ), {]
[new, JSTypeBitSet, (, intForType, ., size, (, ), ), ;, Property, (, String, name, ), {, this, ., oldName, =]
[., size, (, ), ), ;, Property, (, String, name, ), {, this, ., oldName, =, name, ;, if, (]
[., size, (, ), ), ;, Property, (, String, name, ), {, this, ., oldName, =, name, ;, if, (]
[), ;, Property, (, String, name, ), {, this, ., oldName, =, name, ;, if, (, name, ., startsWith, (]
[String, name, ), {, this, ., oldName, =, name, ;, if, (, name, ., startsWith, (, SKIP_PREFIX, ), ), {]
[), {, this, ., oldName, =, name, ;, if, (, name, ., startsWith, (, SKIP_PREFIX, ), ), {, skipAmbiguating, =]
[(, SKIP_PREFIX, ), ), {, skipAmbiguating, =, true, ;, }, }, void, addType, (, JSType, newType, ), {, if, (]
[=, true, ;, }, }, void, addType, (, JSType, newType, ), {, if, (, skipAmbiguating, ), {, return, ;, }]
[true, ;, }, }, void, addType, (, JSType, newType, ), {, if, (, skipAmbiguating, ), {, return, ;, }, ++]
[void, addType, (, JSType, newType, ), {, if, (, skipAmbiguating, ), {, return, ;, }, ++, numOccurrences, ;, if, (]
[void, addType, (, JSType, newType, ), {, if, (, skipAmbiguating, ), {, return, ;, }, ++, numOccurrences, ;, if, (]
[if, (, skipAmbiguating, ), {, return, ;, }, ++, numOccurrences, ;, if, (, newType, ., isUnionType, (, ), ), {]
[skipAmbiguating, ), {, return, ;, }, ++, numOccurrences, ;, if, (, newType, ., isUnionType, (, ), ), {, newType, =]
[skipAmbiguating, ), {, return, ;, }, ++, numOccurrences, ;, if, (, newType, ., isUnionType, (, ), ), {, newType, =]
[;, if, (, newType, ., isUnionType, (, ), ), {, newType, =, newType, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[;, if, (, newType, ., isUnionType, (, ), ), {, newType, =, newType, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[newType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, newType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[newType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, newType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[newType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, newType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[(, ), ), {, for, (, JSType, alt, :, newType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[), {, for, (, JSType, alt, :, newType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addNonUnionType, (]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addNonUnionType, (, alt, ), ;, }, return, ;, }, }]
[(, ), ., getAlternates, (, ), ), {, addNonUnionType, (, alt, ), ;, }, return, ;, }, }, addNonUnionType, (]
[return, ;, }, }, addNonUnionType, (, newType, ), ;, }, private, void, addNonUnionType, (, JSType, newType, ), {, if, (]
[return, ;, }, }, addNonUnionType, (, newType, ), ;, }, private, void, addNonUnionType, (, JSType, newType, ), {, if, (]
[}, }, addNonUnionType, (, newType, ), ;, }, private, void, addNonUnionType, (, JSType, newType, ), {, if, (, skipAmbiguating, ||]
[addNonUnionType, (, newType, ), ;, }, private, void, addNonUnionType, (, JSType, newType, ), {, if, (, skipAmbiguating, ||, isInvalidatingType, (]
[;, }, private, void, addNonUnionType, (, JSType, newType, ), {, if, (, skipAmbiguating, ||, isInvalidatingType, (, newType, ), ), {]
[private, void, addNonUnionType, (, JSType, newType, ), {, if, (, skipAmbiguating, ||, isInvalidatingType, (, newType, ), ), {, skipAmbiguating, =]
[{, if, (, skipAmbiguating, ||, isInvalidatingType, (, newType, ), ), {, skipAmbiguating, =, true, ;, return, ;, }, if, (]
[if, (, skipAmbiguating, ||, isInvalidatingType, (, newType, ), ), {, skipAmbiguating, =, true, ;, return, ;, }, if, (, !]
[if, (, skipAmbiguating, ||, isInvalidatingType, (, newType, ), ), {, skipAmbiguating, =, true, ;, return, ;, }, if, (, !]
[isInvalidatingType, (, newType, ), ), {, skipAmbiguating, =, true, ;, return, ;, }, if, (, !, relatedTypes, ., get, (]
[newType, ), ), {, skipAmbiguating, =, true, ;, return, ;, }, if, (, !, relatedTypes, ., get, (, getIntForType, (]
[=, true, ;, return, ;, }, if, (, !, relatedTypes, ., get, (, getIntForType, (, newType, ), ), ), {]
[;, return, ;, }, if, (, !, relatedTypes, ., get, (, getIntForType, (, newType, ), ), ), {, computeRelatedTypes, (]
[}, if, (, !, relatedTypes, ., get, (, getIntForType, (, newType, ), ), ), {, computeRelatedTypes, (, newType, ), ;]
[}, if, (, !, relatedTypes, ., get, (, getIntForType, (, newType, ), ), ), {, computeRelatedTypes, (, newType, ), ;]
[relatedTypes, ., get, (, getIntForType, (, newType, ), ), ), {, computeRelatedTypes, (, newType, ), ;, relatedTypes, ., or, (]
[get, (, getIntForType, (, newType, ), ), ), {, computeRelatedTypes, (, newType, ), ;, relatedTypes, ., or, (, getRelatedTypesOnNonUnion, (]
[(, newType, ), ), ;, }, }, }, private, class, JSTypeBitSet, extends, BitSet, {, private, static, final, long, serialVersionUID, =]
[extends, BitSet, {, private, static, final, long, serialVersionUID, =, 1L, ;, private, JSTypeBitSet, (, int, size, ), {, super, (]
[JSTypeBitSet, (, ), {, super, (, ), ;, }, @, Override, public, String, toString, (, ), {, int, from, =]
[(, ), ;, }, @, Override, public, String, toString, (, ), {, int, from, =, 0, ;, int, current, =]
[toString, (, ), {, int, from, =, 0, ;, int, current, =, 0, ;, List, <, String, >, types, =]
[toString, (, ), {, int, from, =, 0, ;, int, current, =, 0, ;, List, <, String, >, types, =]
[;, int, current, =, 0, ;, List, <, String, >, types, =, Lists, ., newArrayList, (, ), ;, while, (]
[;, int, current, =, 0, ;, List, <, String, >, types, =, Lists, ., newArrayList, (, ), ;, while, (]
[int, current, =, 0, ;, List, <, String, >, types, =, Lists, ., newArrayList, (, ), ;, while, (, -]
[=, 0, ;, List, <, String, >, types, =, Lists, ., newArrayList, (, ), ;, while, (, -, 1, !=]
[0, ;, List, <, String, >, types, =, Lists, ., newArrayList, (, ), ;, while, (, -, 1, !=, (]
[List, <, String, >, types, =, Lists, ., newArrayList, (, ), ;, while, (, -, 1, !=, (, current, =]
[String, >, types, =, Lists, ., newArrayList, (, ), ;, while, (, -, 1, !=, (, current, =, nextSetBit, (]
[., newArrayList, (, ), ;, while, (, -, 1, !=, (, current, =, nextSetBit, (, from, ), ), ), {]
[., newArrayList, (, ), ;, while, (, -, 1, !=, (, current, =, nextSetBit, (, from, ), ), ), {]
[;, while, (, -, 1, !=, (, current, =, nextSetBit, (, from, ), ), ), {, types, ., add, (]
[;, while, (, -, 1, !=, (, current, =, nextSetBit, (, from, ), ), ), {, types, ., add, (]
[;, while, (, -, 1, !=, (, current, =, nextSetBit, (, from, ), ), ), {, types, ., add, (]
[;, while, (, -, 1, !=, (, current, =, nextSetBit, (, from, ), ), ), {, types, ., add, (]
[=, nextSetBit, (, from, ), ), ), {, types, ., add, (, intForType, ., inverse, (, ), ., get, (]
[types, ., add, (, intForType, ., inverse, (, ), ., get, (, current, ), ., toString, (, ), ), ;]
[add, (, intForType, ., inverse, (, ), ., get, (, current, ), ., toString, (, ), ), ;, from, =]
[add, (, intForType, ., inverse, (, ), ., get, (, current, ), ., toString, (, ), ), ;, from, =]
[intForType, ., inverse, (, ), ., get, (, current, ), ., toString, (, ), ), ;, from, =, current, +]
[), ., get, (, current, ), ., toString, (, ), ), ;, from, =, current, +, 1, ;, }, return]
[), ., get, (, current, ), ., toString, (, ), ), ;, from, =, current, +, 1, ;, }, return]
[), ., get, (, current, ), ., toString, (, ), ), ;, from, =, current, +, 1, ;, }, return]
[current, ), ., toString, (, ), ), ;, from, =, current, +, 1, ;, }, return, Joiner, ., on, (]
[), ), ;, from, =, current, +, 1, ;, }, return, Joiner, ., on, (, " && ", ), ., join, (]
