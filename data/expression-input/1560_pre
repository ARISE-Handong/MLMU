[;, import, java, ., util, ., *, ;, class, ConstCheck, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, CONST_REASSIGNED_VALUE_ERROR, =]
[;, import, java, ., util, ., *, ;, class, ConstCheck, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, CONST_REASSIGNED_VALUE_ERROR, =]
[util, ., *, ;, class, ConstCheck, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, CONST_REASSIGNED_VALUE_ERROR, =, DiagnosticType, ., error, (]
[*, ;, class, ConstCheck, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, CONST_REASSIGNED_VALUE_ERROR, =, DiagnosticType, ., error, (, "JSC_CONSTANT_REASSIGNED_VALUE_ERROR", ,]
[AbstractCompiler, compiler, ;, private, final, Set, <, Scope, ., Var, >, initializedConstants, ;, public, ConstCheck, (, AbstractCompiler, compiler, ), {]
[AbstractCompiler, compiler, ;, private, final, Set, <, Scope, ., Var, >, initializedConstants, ;, public, ConstCheck, (, AbstractCompiler, compiler, ), {]
[final, Set, <, Scope, ., Var, >, initializedConstants, ;, public, ConstCheck, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[<, Scope, ., Var, >, initializedConstants, ;, public, ConstCheck, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[<, Scope, ., Var, >, initializedConstants, ;, public, ConstCheck, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[>, initializedConstants, ;, public, ConstCheck, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., initializedConstants, =]
[., Var, >, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[., Var, >, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[,, Node, root, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[,, Node, root, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[{, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[(, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, parent, !=]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, parent, !=, null, &&]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, parent, !=, null, &&]
[), ), {, case, Token, ., NAME, :, if, (, parent, !=, null, &&, parent, ., isVar, (, ), &&]
[), ), {, case, Token, ., NAME, :, if, (, parent, !=, null, &&, parent, ., isVar, (, ), &&]
[parent, !=, null, &&, parent, ., isVar, (, ), &&, n, ., hasChildren, (, ), ), {, String, name, =]
[parent, !=, null, &&, parent, ., isVar, (, ), &&, n, ., hasChildren, (, ), ), {, String, name, =]
[., hasChildren, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =]
[., hasChildren, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =]
[., hasChildren, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =]
[=, n, ., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant, (]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, if, (]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, if, (]
[., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (]
[), ;, if, (, isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {]
[if, (, isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {, reportError, (]
[isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {, reportError, (, t, ,]
[var, ), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {, reportError, (, t, ,, n, ,]
[initializedConstants, ., contains, (, var, ), ), {, reportError, (, t, ,, n, ,, name, ), ;, }, else, {]
[initializedConstants, ., contains, (, var, ), ), {, reportError, (, t, ,, n, ,, name, ), ;, }, else, {]
[var, ), ), {, reportError, (, t, ,, n, ,, name, ), ;, }, else, {, initializedConstants, ., add, (]
[,, name, ), ;, }, else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, case]
[,, name, ), ;, }, else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, case]
[else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case]
[else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case]
[(, var, ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case]
[(, var, ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case]
[}, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[}, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case]
[Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case]
[:, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, {, Node, lhs, =]
[:, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, {, Node, lhs, =]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), ), {, String, name, =]
[lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), ), {, String, name, =]
[., isName, (, ), ), {, String, name, =, lhs, ., getString, (, ), ;, Scope, ., Var, var, =]
[., isName, (, ), ), {, String, name, =, lhs, ., getString, (, ), ;, Scope, ., Var, var, =]
[., isName, (, ), ), {, String, name, =, lhs, ., getString, (, ), ;, Scope, ., Var, var, =]
[=, lhs, ., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant, (]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, if, (]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, if, (]
[., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (]
[), ;, if, (, isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {]
[if, (, isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {, reportError, (]
[isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {, reportError, (, t, ,]
[var, ), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {, reportError, (, t, ,, n, ,]
[initializedConstants, ., contains, (, var, ), ), {, reportError, (, t, ,, n, ,, name, ), ;, }, else, {]
[initializedConstants, ., contains, (, var, ), ), {, reportError, (, t, ,, n, ,, name, ), ;, }, else, {]
[var, ), ), {, reportError, (, t, ,, n, ,, name, ), ;, }, else, {, initializedConstants, ., add, (]
[name, ), ;, }, else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, }, case]
[name, ), ;, }, else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, }, case]
[{, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, }, case, Token, ., INC, :, case]
[{, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, }, case, Token, ., INC, :, case]
[}, }, }, break, ;, }, case, Token, ., INC, :, case, Token, ., DEC, :, {, Node, lhs, =]
[}, }, }, break, ;, }, case, Token, ., INC, :, case, Token, ., DEC, :, {, Node, lhs, =]
[., INC, :, case, Token, ., DEC, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[., INC, :, case, Token, ., DEC, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), ), {, String, name, =]
[lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), ), {, String, name, =]
[., isName, (, ), ), {, String, name, =, lhs, ., getString, (, ), ;, Scope, ., Var, var, =]
[., isName, (, ), ), {, String, name, =, lhs, ., getString, (, ), ;, Scope, ., Var, var, =]
[., isName, (, ), ), {, String, name, =, lhs, ., getString, (, ), ;, Scope, ., Var, var, =]
[=, lhs, ., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant, (]
[=, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, reportError, (]
[(, ), ., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, reportError, (, t, ,]
[., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, reportError, (, t, ,, n, ,]
[), ;, }, }, break, ;, }, }, }, private, boolean, isConstant, (, Scope, ., Var, var, ), {, return]
[), ;, }, }, break, ;, }, }, }, private, boolean, isConstant, (, Scope, ., Var, var, ), {, return]
[), ;, }, }, break, ;, }, }, }, private, boolean, isConstant, (, Scope, ., Var, var, ), {, return]
[}, }, break, ;, }, }, }, private, boolean, isConstant, (, Scope, ., Var, var, ), {, return, var, !=]
[break, ;, }, }, }, private, boolean, isConstant, (, Scope, ., Var, var, ), {, return, var, !=, null, &&]
[break, ;, }, }, }, private, boolean, isConstant, (, Scope, ., Var, var, ), {, return, var, !=, null, &&]
[var, ., isConst, (, ), ;, }, void, reportError, (, NodeTraversal, t, ,, Node, n, ,, String, name, ), {]
[var, ., isConst, (, ), ;, }, void, reportError, (, NodeTraversal, t, ,, Node, n, ,, String, name, ), {]
[), ;, }, void, reportError, (, NodeTraversal, t, ,, Node, n, ,, String, name, ), {, compiler, ., report, (]
[), ;, }, void, reportError, (, NodeTraversal, t, ,, Node, n, ,, String, name, ), {, compiler, ., report, (]
[reportError, (, NodeTraversal, t, ,, Node, n, ,, String, name, ), {, compiler, ., report, (, t, ., makeError, (]
[NodeTraversal, t, ,, Node, n, ,, String, name, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[,, Node, n, ,, String, name, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONST_REASSIGNED_VALUE_ERROR, ,]
