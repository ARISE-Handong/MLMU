[private, static, final, long, serialVersionUID, =, -, 5586801265774496376L, ;, private, final, int, iRange, ;, private, final, DurationField, iRangeField, ;, public]
[), private, static, final, long, serialVersionUID, =, -, 5586801265774496376L, ;, private, final, int, iRange, ;, private, final, DurationField, iRangeField, ;]
[;, private, final, int, iRange, ;, private, final, DurationField, iRangeField, ;, public, PreciseDateTimeField, (, DateTimeFieldType, type, ,, DurationField, unit, ,]
[;, private, final, int, iRange, ;, private, final, DurationField, iRangeField, ;, public, PreciseDateTimeField, (, DateTimeFieldType, type, ,, DurationField, unit, ,]
[,, unit, ), ;, if, (, !, range, ., isPrecise, (, ), ), {, throw, new, IllegalArgumentException, (, "Range duration field must be precise", )]
[), ;, if, (, !, range, ., isPrecise, (, ), ), {, throw, new, IllegalArgumentException, (, "Range duration field must be precise", ), ;, }]
[), {, throw, new, IllegalArgumentException, (, "Range duration field must be precise", ), ;, }, long, rangeMillis, =, range, ., getUnitMillis, (, ), ;, iRange]
[), {, throw, new, IllegalArgumentException, (, "Range duration field must be precise", ), ;, }, long, rangeMillis, =, range, ., getUnitMillis, (, ), ;, iRange]
[., isPrecise, (, ), ), {, throw, new, IllegalArgumentException, (, "Range duration field must be precise", ), ;, }, long, rangeMillis, =, range, ., getUnitMillis]
[;, }, long, rangeMillis, =, range, ., getUnitMillis, (, ), ;, iRange, =, (, int, ), (, rangeMillis, /, getUnitMillis]
[), ;, }, long, rangeMillis, =, range, ., getUnitMillis, (, ), ;, iRange, =, (, int, ), (, rangeMillis, /]
[;, iRange, =, (, int, ), (, rangeMillis, /, getUnitMillis, (, ), ), ;, if, (, iRange, <, 2, )]
[., getUnitMillis, (, ), ;, iRange, =, (, int, ), (, rangeMillis, /, getUnitMillis, (, ), ), ;, if, (]
[=, (, int, ), (, rangeMillis, /, getUnitMillis, (, ), ), ;, if, (, iRange, <, 2, ), {, throw]
[;, if, (, iRange, <, 2, ), {, throw, new, IllegalArgumentException, (, "The effective range must be at least 2", ), ;, }, iRangeField, =, range, ;]
[;, if, (, iRange, <, 2, ), {, throw, new, IllegalArgumentException, (, "The effective range must be at least 2", ), ;, }, iRangeField, =, range, ;]
[), ;, if, (, iRange, <, 2, ), {, throw, new, IllegalArgumentException, (, "The effective range must be at least 2", ), ;, }, iRangeField, =, range]
[/, getUnitMillis, (, ), ), ;, if, (, iRange, <, 2, ), {, throw, new, IllegalArgumentException, (, "The effective range must be at least 2", ), ;]
[), ;, if, (, iRange, <, 2, ), {, throw, new, IllegalArgumentException, (, "The effective range must be at least 2", ), ;, }, iRangeField, =, range]
[), {, throw, new, IllegalArgumentException, (, "The effective range must be at least 2", ), ;, }, iRangeField, =, range, ;, }, public, int, get, (, long]
[<, 2, ), {, throw, new, IllegalArgumentException, (, "The effective range must be at least 2", ), ;, }, iRangeField, =, range, ;, }, public, int, get]
[), {, throw, new, IllegalArgumentException, (, "The effective range must be at least 2", ), ;, }, iRangeField, =, range, ;, }, public, int, get, (, long]
[;, }, iRangeField, =, range, ;, }, public, int, get, (, long, instant, ), {, if, (, instant, >=, 0]
[), ;, }, iRangeField, =, range, ;, }, public, int, get, (, long, instant, ), {, if, (, instant, >=]
[=, range, ;, }, public, int, get, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return]
[;, }, public, int, get, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, (, int]
[), {, return, (, int, ), (, (, instant, /, getUnitMillis, (, ), ), %, iRange, ), ;, }, else]
[>=, 0, ), {, return, (, int, ), (, (, instant, /, getUnitMillis, (, ), ), %, iRange, ), ;]
[), {, return, (, int, ), (, (, instant, /, getUnitMillis, (, ), ), %, iRange, ), ;, }, else]
[;, }, else, {, return, iRange, -, 1, +, (, int, ), (, (, (, instant, +, 1, ), /]
[;, }, else, {, return, iRange, -, 1, +, (, int, ), (, (, (, instant, +, 1, ), /]
[), ;, }, else, {, return, iRange, -, 1, +, (, int, ), (, (, (, instant, +, 1, )]
[%, iRange, ), ;, }, else, {, return, iRange, -, 1, +, (, int, ), (, (, (, instant, +]
[), %, iRange, ), ;, }, else, {, return, iRange, -, 1, +, (, int, ), (, (, (, instant]
[/, getUnitMillis, (, ), ), %, iRange, ), ;, }, else, {, return, iRange, -, 1, +, (, int, )]
[), %, iRange, ), ;, }, else, {, return, iRange, -, 1, +, (, int, ), (, (, (, instant]
[), ;, }, else, {, return, iRange, -, 1, +, (, int, ), (, (, (, instant, +, 1, )]
[;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, int, thisValue, =, get, (, instant]
[+, (, int, ), (, (, (, instant, +, 1, ), /, getUnitMillis, (, ), ), %, iRange, ), ;]
[-, 1, +, (, int, ), (, (, (, instant, +, 1, ), /, getUnitMillis, (, ), ), %, iRange]
[+, (, int, ), (, (, (, instant, +, 1, ), /, getUnitMillis, (, ), ), %, iRange, ), ;]
[;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, int, thisValue, =, get, (, instant]
[;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, int, thisValue, =, get, (, instant]
[), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, int, thisValue, =, get, (]
[%, iRange, ), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, int, thisValue, =]
[), %, iRange, ), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, int, thisValue]
[/, getUnitMillis, (, ), ), %, iRange, ), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount]
[), /, getUnitMillis, (, ), ), %, iRange, ), ;, }, }, public, long, addWrapField, (, long, instant, ,, int]
[+, 1, ), /, getUnitMillis, (, ), ), %, iRange, ), ;, }, }, public, long, addWrapField, (, long, instant]
[), /, getUnitMillis, (, ), ), %, iRange, ), ;, }, }, public, long, addWrapField, (, long, instant, ,, int]
[), %, iRange, ), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, int, thisValue]
[), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, int, thisValue, =, get, (]
[;, int, wrappedValue, =, FieldUtils, ., getWrappedValue, (, thisValue, ,, amount, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), )]
[), ;, int, wrappedValue, =, FieldUtils, ., getWrappedValue, (, thisValue, ,, amount, ,, getMinimumValue, (, ), ,, getMaximumValue, (, )]
[;, return, instant, +, (, wrappedValue, -, thisValue, ), *, getUnitMillis, (, ), ;, }, public, long, set, (, long]
[., getWrappedValue, (, thisValue, ,, amount, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (]
[,, amount, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (, wrappedValue, -, thisValue, )]
[,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (, wrappedValue, -, thisValue, ), *, getUnitMillis]
[,, getMaximumValue, (, ), ), ;, return, instant, +, (, wrappedValue, -, thisValue, ), *, getUnitMillis, (, ), ;, }]
[), ;, return, instant, +, (, wrappedValue, -, thisValue, ), *, getUnitMillis, (, ), ;, }, public, long, set, (]
[;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value]
[+, (, wrappedValue, -, thisValue, ), *, getUnitMillis, (, ), ;, }, public, long, set, (, long, instant, ,, int]
[;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value]
[*, getUnitMillis, (, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds]
[), *, getUnitMillis, (, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, .]
[-, thisValue, ), *, getUnitMillis, (, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {]
[), *, getUnitMillis, (, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, .]
[;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value]
[;, return, instant, +, (, value, -, get, (, instant, ), ), *, iUnitMillis, ;, }, public, DurationField, getRangeDurationField, (]
[., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (]
[,, value, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (, value, -, get, (]
[,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (, value, -, get, (, instant, )]
[,, getMaximumValue, (, ), ), ;, return, instant, +, (, value, -, get, (, instant, ), ), *, iUnitMillis, ;]
[), ;, return, instant, +, (, value, -, get, (, instant, ), ), *, iUnitMillis, ;, }, public, DurationField, getRangeDurationField]
[;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeField, ;, }, public, int, getMaximumValue, (, ), {, return, iRange]
[+, (, value, -, get, (, instant, ), ), *, iUnitMillis, ;, }, public, DurationField, getRangeDurationField, (, ), {, return]
[;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeField, ;, }, public, int, getMaximumValue, (, ), {, return, iRange]
[*, iUnitMillis, ;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeField, ;, }, public, int, getMaximumValue, (, ), {]
[), *, iUnitMillis, ;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeField, ;, }, public, int, getMaximumValue, (, )]
[-, get, (, instant, ), ), *, iUnitMillis, ;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeField, ;, }]
[), *, iUnitMillis, ;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeField, ;, }, public, int, getMaximumValue, (, )]
[), ), *, iUnitMillis, ;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeField, ;, }, public, int, getMaximumValue, (]
[;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeField, ;, }, public, int, getMaximumValue, (, ), {, return, iRange]
[;, }, public, int, getMaximumValue, (, ), {, return, iRange, -, 1, ;, }, public, int, getRange, (, ), {]
[;, }, public, int, getRange, (, ), {, return, iRange, ;, }, }]
[-, 1, ;, }, public, int, getRange, (, ), {, return, iRange, ;, }, }]
[;, }, public, int, getRange, (, ), {, return, iRange, ;, }, }]
[;, }, }]
