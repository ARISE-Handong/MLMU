[., general, ., SeriesException, ;, public, class, XYSeries, extends, Series, implements, Cloneable, ,, Serializable, {, static, final, long, serialVersionUID, =]
[general, ., SeriesException, ;, public, class, XYSeries, extends, Series, implements, Cloneable, ,, Serializable, {, static, final, long, serialVersionUID, =, -]
[Cloneable, ,, Serializable, {, static, final, long, serialVersionUID, =, -, 5908509288197150436L, ;, protected, List, data, ;, private, int, maximumItemCount, =]
[Cloneable, ,, Serializable, {, static, final, long, serialVersionUID, =, -, 5908509288197150436L, ;, protected, List, data, ;, private, int, maximumItemCount, =]
[double, maxX, ;, private, double, minY, ;, private, double, maxY, ;, public, XYSeries, (, Comparable, key, ), {, this, (]
[;, private, double, minY, ;, private, double, maxY, ;, public, XYSeries, (, Comparable, key, ), {, this, (, key, ,]
[double, minY, ;, private, double, maxY, ;, public, XYSeries, (, Comparable, key, ), {, this, (, key, ,, true, ,]
[key, ,, true, ,, true, ), ;, }, public, XYSeries, (, Comparable, key, ,, boolean, autoSort, ), {, this, (]
[true, ,, true, ), ;, }, public, XYSeries, (, Comparable, key, ,, boolean, autoSort, ), {, this, (, key, ,]
[true, ), ;, }, public, XYSeries, (, Comparable, key, ,, boolean, autoSort, ), {, this, (, key, ,, autoSort, ,]
[,, true, ), ;, }, public, XYSeries, (, Comparable, key, ,, boolean, autoSort, ,, boolean, allowDuplicateXValues, ), {, super, (]
[;, }, public, XYSeries, (, Comparable, key, ,, boolean, autoSort, ,, boolean, allowDuplicateXValues, ), {, super, (, key, ), ;]
[;, }, public, XYSeries, (, Comparable, key, ,, boolean, autoSort, ,, boolean, allowDuplicateXValues, ), {, super, (, key, ), ;]
[(, Comparable, key, ,, boolean, autoSort, ,, boolean, allowDuplicateXValues, ), {, super, (, key, ), ;, this, ., data, =]
[), {, super, (, key, ), ;, this, ., data, =, new, java, ., util, ., ArrayList, (, ), ;]
[), {, super, (, key, ), ;, this, ., data, =, new, java, ., util, ., ArrayList, (, ), ;]
[key, ), ;, this, ., data, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., autoSort, =]
[;, this, ., data, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., autoSort, =, autoSort, ;]
[;, this, ., data, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., autoSort, =, autoSort, ;]
[=, new, java, ., util, ., ArrayList, (, ), ;, this, ., autoSort, =, autoSort, ;, this, ., allowDuplicateXValues, =]
[java, ., util, ., ArrayList, (, ), ;, this, ., autoSort, =, autoSort, ;, this, ., allowDuplicateXValues, =, allowDuplicateXValues, ;]
[java, ., util, ., ArrayList, (, ), ;, this, ., autoSort, =, autoSort, ;, this, ., allowDuplicateXValues, =, allowDuplicateXValues, ;]
[ArrayList, (, ), ;, this, ., autoSort, =, autoSort, ;, this, ., allowDuplicateXValues, =, allowDuplicateXValues, ;, this, ., minX, =]
[ArrayList, (, ), ;, this, ., autoSort, =, autoSort, ;, this, ., allowDuplicateXValues, =, allowDuplicateXValues, ;, this, ., minX, =]
[this, ., autoSort, =, autoSort, ;, this, ., allowDuplicateXValues, =, allowDuplicateXValues, ;, this, ., minX, =, Double, ., NaN, ;]
[this, ., autoSort, =, autoSort, ;, this, ., allowDuplicateXValues, =, allowDuplicateXValues, ;, this, ., minX, =, Double, ., NaN, ;]
[autoSort, ;, this, ., allowDuplicateXValues, =, allowDuplicateXValues, ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =]
[autoSort, ;, this, ., allowDuplicateXValues, =, allowDuplicateXValues, ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =]
[allowDuplicateXValues, =, allowDuplicateXValues, ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;]
[allowDuplicateXValues, =, allowDuplicateXValues, ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;]
[this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =]
[this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =]
[Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;]
[Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;]
[this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =]
[this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =]
[Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, }, public, double, getMinX, (, ), {, return]
[Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, }, public, double, getMinX, (, ), {, return]
[}, public, double, getMinX, (, ), {, return, this, ., minX, ;, }, public, double, getMaxX, (, ), {, return]
[}, public, double, getMinX, (, ), {, return, this, ., minX, ;, }, public, double, getMaxX, (, ), {, return]
[}, public, double, getMaxX, (, ), {, return, this, ., maxX, ;, }, public, double, getMinY, (, ), {, return]
[}, public, double, getMaxX, (, ), {, return, this, ., maxX, ;, }, public, double, getMinY, (, ), {, return]
[}, public, double, getMinY, (, ), {, return, this, ., minY, ;, }, public, double, getMaxY, (, ), {, return]
[}, public, double, getMinY, (, ), {, return, this, ., minY, ;, }, public, double, getMaxY, (, ), {, return]
[(, ), {, return, this, ., maxY, ;, }, private, void, updateBoundsForAddedItem, (, XYDataItem, item, ), {, double, x, =]
[(, ), {, return, this, ., maxY, ;, }, private, void, updateBoundsForAddedItem, (, XYDataItem, item, ), {, double, x, =]
[maxY, ;, }, private, void, updateBoundsForAddedItem, (, XYDataItem, item, ), {, double, x, =, item, ., getXValue, (, ), ;]
[maxY, ;, }, private, void, updateBoundsForAddedItem, (, XYDataItem, item, ), {, double, x, =, item, ., getXValue, (, ), ;]
[void, updateBoundsForAddedItem, (, XYDataItem, item, ), {, double, x, =, item, ., getXValue, (, ), ;, this, ., minX, =]
[(, XYDataItem, item, ), {, double, x, =, item, ., getXValue, (, ), ;, this, ., minX, =, minIgnoreNaN, (]
[(, XYDataItem, item, ), {, double, x, =, item, ., getXValue, (, ), ;, this, ., minX, =, minIgnoreNaN, (]
[{, double, x, =, item, ., getXValue, (, ), ;, this, ., minX, =, minIgnoreNaN, (, this, ., minX, ,]
[=, item, ., getXValue, (, ), ;, this, ., minX, =, minIgnoreNaN, (, this, ., minX, ,, x, ), ;]
[=, item, ., getXValue, (, ), ;, this, ., minX, =, minIgnoreNaN, (, this, ., minX, ,, x, ), ;]
[(, ), ;, this, ., minX, =, minIgnoreNaN, (, this, ., minX, ,, x, ), ;, this, ., maxX, =]
[;, this, ., minX, =, minIgnoreNaN, (, this, ., minX, ,, x, ), ;, this, ., maxX, =, maxIgnoreNaN, (]
[;, this, ., minX, =, minIgnoreNaN, (, this, ., minX, ,, x, ), ;, this, ., maxX, =, maxIgnoreNaN, (]
[=, minIgnoreNaN, (, this, ., minX, ,, x, ), ;, this, ., maxX, =, maxIgnoreNaN, (, this, ., maxX, ,]
[minX, ,, x, ), ;, this, ., maxX, =, maxIgnoreNaN, (, this, ., maxX, ,, x, ), ;, if, (]
[minX, ,, x, ), ;, this, ., maxX, =, maxIgnoreNaN, (, this, ., maxX, ,, x, ), ;, if, (]
[minX, ,, x, ), ;, this, ., maxX, =, maxIgnoreNaN, (, this, ., maxX, ,, x, ), ;, if, (]
[., maxX, =, maxIgnoreNaN, (, this, ., maxX, ,, x, ), ;, if, (, item, ., getY, (, ), !=]
[., maxX, ,, x, ), ;, if, (, item, ., getY, (, ), !=, null, ), {, double, y, =]
[., maxX, ,, x, ), ;, if, (, item, ., getY, (, ), !=, null, ), {, double, y, =]
[if, (, item, ., getY, (, ), !=, null, ), {, double, y, =, item, ., getYValue, (, ), ;]
[if, (, item, ., getY, (, ), !=, null, ), {, double, y, =, item, ., getYValue, (, ), ;]
[getY, (, ), !=, null, ), {, double, y, =, item, ., getYValue, (, ), ;, this, ., minY, =]
[), !=, null, ), {, double, y, =, item, ., getYValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (]
[), !=, null, ), {, double, y, =, item, ., getYValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (]
[{, double, y, =, item, ., getYValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,]
[=, item, ., getYValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, y, ), ;]
[=, item, ., getYValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, y, ), ;]
[(, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, y, ), ;, this, ., maxY, =]
[;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, y, ), ;, this, ., maxY, =, maxIgnoreNaN, (]
[;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, y, ), ;, this, ., maxY, =, maxIgnoreNaN, (]
[=, minIgnoreNaN, (, this, ., minY, ,, y, ), ;, this, ., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,]
[this, ., maxY, ,, y, ), ;, }, }, private, void, updateBoundsForRemovedItem, (, XYDataItem, item, ), {, boolean, itemContributesToXBounds, =]
[), ;, }, }, private, void, updateBoundsForRemovedItem, (, XYDataItem, item, ), {, boolean, itemContributesToXBounds, =, false, ;, boolean, itemContributesToYBounds, =]
[void, updateBoundsForRemovedItem, (, XYDataItem, item, ), {, boolean, itemContributesToXBounds, =, false, ;, boolean, itemContributesToYBounds, =, false, ;, double, x, =]
[void, updateBoundsForRemovedItem, (, XYDataItem, item, ), {, boolean, itemContributesToXBounds, =, false, ;, boolean, itemContributesToYBounds, =, false, ;, double, x, =]
[itemContributesToXBounds, =, false, ;, boolean, itemContributesToYBounds, =, false, ;, double, x, =, item, ., getXValue, (, ), ;, if, (]
[=, false, ;, boolean, itemContributesToYBounds, =, false, ;, double, x, =, item, ., getXValue, (, ), ;, if, (, !]
[=, false, ;, boolean, itemContributesToYBounds, =, false, ;, double, x, =, item, ., getXValue, (, ), ;, if, (, !]
[itemContributesToYBounds, =, false, ;, double, x, =, item, ., getXValue, (, ), ;, if, (, !, Double, ., isNaN, (]
[=, item, ., getXValue, (, ), ;, if, (, !, Double, ., isNaN, (, x, ), ), {, if, (]
[=, item, ., getXValue, (, ), ;, if, (, !, Double, ., isNaN, (, x, ), ), {, if, (]
[=, item, ., getXValue, (, ), ;, if, (, !, Double, ., isNaN, (, x, ), ), {, if, (]
[., getXValue, (, ), ;, if, (, !, Double, ., isNaN, (, x, ), ), {, if, (, x, <=]
[., getXValue, (, ), ;, if, (, !, Double, ., isNaN, (, x, ), ), {, if, (, x, <=]
[;, if, (, !, Double, ., isNaN, (, x, ), ), {, if, (, x, <=, this, ., minX, ||]
[;, if, (, !, Double, ., isNaN, (, x, ), ), {, if, (, x, <=, this, ., minX, ||]
[(, !, Double, ., isNaN, (, x, ), ), {, if, (, x, <=, this, ., minX, ||, x, >=]
[(, !, Double, ., isNaN, (, x, ), ), {, if, (, x, <=, this, ., minX, ||, x, >=]
[(, x, ), ), {, if, (, x, <=, this, ., minX, ||, x, >=, this, ., maxX, ), {]
[), ), {, if, (, x, <=, this, ., minX, ||, x, >=, this, ., maxX, ), {, itemContributesToXBounds, =]
[<=, this, ., minX, ||, x, >=, this, ., maxX, ), {, itemContributesToXBounds, =, true, ;, }, }, if, (]
[<=, this, ., minX, ||, x, >=, this, ., maxX, ), {, itemContributesToXBounds, =, true, ;, }, }, if, (]
[<=, this, ., minX, ||, x, >=, this, ., maxX, ), {, itemContributesToXBounds, =, true, ;, }, }, if, (]
[>=, this, ., maxX, ), {, itemContributesToXBounds, =, true, ;, }, }, if, (, item, ., getY, (, ), !=]
[itemContributesToXBounds, =, true, ;, }, }, if, (, item, ., getY, (, ), !=, null, ), {, double, y, =]
[itemContributesToXBounds, =, true, ;, }, }, if, (, item, ., getY, (, ), !=, null, ), {, double, y, =]
[item, ., getY, (, ), !=, null, ), {, double, y, =, item, ., getYValue, (, ), ;, if, (]
[., getY, (, ), !=, null, ), {, double, y, =, item, ., getYValue, (, ), ;, if, (, !]
[., getY, (, ), !=, null, ), {, double, y, =, item, ., getYValue, (, ), ;, if, (, !]
[!=, null, ), {, double, y, =, item, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (]
[=, item, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, y, ), ), {, if, (]
[=, item, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, y, ), ), {, if, (]
[=, item, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, y, ), ), {, if, (]
[., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, y, ), ), {, if, (, y, <=]
[., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, y, ), ), {, if, (, y, <=]
[;, if, (, !, Double, ., isNaN, (, y, ), ), {, if, (, y, <=, this, ., minY, ||]
[;, if, (, !, Double, ., isNaN, (, y, ), ), {, if, (, y, <=, this, ., minY, ||]
[(, !, Double, ., isNaN, (, y, ), ), {, if, (, y, <=, this, ., minY, ||, y, >=]
[(, !, Double, ., isNaN, (, y, ), ), {, if, (, y, <=, this, ., minY, ||, y, >=]
[(, y, ), ), {, if, (, y, <=, this, ., minY, ||, y, >=, this, ., maxY, ), {]
[), ), {, if, (, y, <=, this, ., minY, ||, y, >=, this, ., maxY, ), {, itemContributesToYBounds, =]
[this, ., minY, ||, y, >=, this, ., maxY, ), {, itemContributesToYBounds, =, true, ;, }, }, }, if, (]
[||, y, >=, this, ., maxY, ), {, itemContributesToYBounds, =, true, ;, }, }, }, if, (, itemContributesToYBounds, ), {]
[itemContributesToYBounds, =, true, ;, }, }, }, if, (, itemContributesToYBounds, ), {, findBoundsByIteration, (, ), ;, }, else, if, (]
[}, }, if, (, itemContributesToYBounds, ), {, findBoundsByIteration, (, ), ;, }, else, if, (, itemContributesToXBounds, ), {, if, (]
[), {, findBoundsByIteration, (, ), ;, }, else, if, (, itemContributesToXBounds, ), {, if, (, getAutoSort, (, ), ), {]
[), {, findBoundsByIteration, (, ), ;, }, else, if, (, itemContributesToXBounds, ), {, if, (, getAutoSort, (, ), ), {]
[), ;, }, else, if, (, itemContributesToXBounds, ), {, if, (, getAutoSort, (, ), ), {, this, ., minX, =]
[), ;, }, else, if, (, itemContributesToXBounds, ), {, if, (, getAutoSort, (, ), ), {, this, ., minX, =]
[}, else, if, (, itemContributesToXBounds, ), {, if, (, getAutoSort, (, ), ), {, this, ., minX, =, getX, (]
[if, (, getAutoSort, (, ), ), {, this, ., minX, =, getX, (, 0, ), ., doubleValue, (, ), ;]
[if, (, getAutoSort, (, ), ), {, this, ., minX, =, getX, (, 0, ), ., doubleValue, (, ), ;]
[), ), {, this, ., minX, =, getX, (, 0, ), ., doubleValue, (, ), ;, this, ., maxX, =]
[), ), {, this, ., minX, =, getX, (, 0, ), ., doubleValue, (, ), ;, this, ., maxX, =]
[{, this, ., minX, =, getX, (, 0, ), ., doubleValue, (, ), ;, this, ., maxX, =, getX, (]
[{, this, ., minX, =, getX, (, 0, ), ., doubleValue, (, ), ;, this, ., maxX, =, getX, (]
[=, getX, (, 0, ), ., doubleValue, (, ), ;, this, ., maxX, =, getX, (, getItemCount, (, ), -]
[this, ., maxX, =, getX, (, getItemCount, (, ), -, 1, ), ., doubleValue, (, ), ;, }, else, {]
[doubleValue, (, ), ;, }, else, {, findBoundsByIteration, (, ), ;, }, }, }, private, void, findBoundsByIteration, (, ), {]
[doubleValue, (, ), ;, }, else, {, findBoundsByIteration, (, ), ;, }, }, }, private, void, findBoundsByIteration, (, ), {]
[}, else, {, findBoundsByIteration, (, ), ;, }, }, }, private, void, findBoundsByIteration, (, ), {, this, ., minX, =]
[}, else, {, findBoundsByIteration, (, ), ;, }, }, }, private, void, findBoundsByIteration, (, ), {, this, ., minX, =]
[(, ), ;, }, }, }, private, void, findBoundsByIteration, (, ), {, this, ., minX, =, Double, ., NaN, ;]
[(, ), ;, }, }, }, private, void, findBoundsByIteration, (, ), {, this, ., minX, =, Double, ., NaN, ;]
[}, }, private, void, findBoundsByIteration, (, ), {, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =]
[}, }, private, void, findBoundsByIteration, (, ), {, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =]
[findBoundsByIteration, (, ), {, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;]
[findBoundsByIteration, (, ), {, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;]
[this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =]
[this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =]
[Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;]
[Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;]
[this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =]
[this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =]
[;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, Iterator, iterator, =]
[;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, Iterator, iterator, =]
[;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, Iterator, iterator, =]
[., maxY, =, Double, ., NaN, ;, Iterator, iterator, =, this, ., data, ., iterator, (, ), ;, while, (]
[., maxY, =, Double, ., NaN, ;, Iterator, iterator, =, this, ., data, ., iterator, (, ), ;, while, (]
[this, ., data, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYDataItem, item, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYDataItem, item, =, (, XYDataItem, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYDataItem, item, =, (, XYDataItem, )]
[(, iterator, ., hasNext, (, ), ), {, XYDataItem, item, =, (, XYDataItem, ), iterator, ., next, (, ), ;]
[., hasNext, (, ), ), {, XYDataItem, item, =, (, XYDataItem, ), iterator, ., next, (, ), ;, updateBoundsForAddedItem, (]
[iterator, ., next, (, ), ;, updateBoundsForAddedItem, (, item, ), ;, }, }, public, boolean, getAutoSort, (, ), {, return]
[iterator, ., next, (, ), ;, updateBoundsForAddedItem, (, item, ), ;, }, }, public, boolean, getAutoSort, (, ), {, return]
[}, public, boolean, getAutoSort, (, ), {, return, this, ., autoSort, ;, }, public, boolean, getAllowDuplicateXValues, (, ), {, return]
[}, public, boolean, getAutoSort, (, ), {, return, this, ., autoSort, ;, }, public, boolean, getAllowDuplicateXValues, (, ), {, return]
[}, public, boolean, getAllowDuplicateXValues, (, ), {, return, this, ., allowDuplicateXValues, ;, }, public, int, getItemCount, (, ), {, return]
[}, public, boolean, getAllowDuplicateXValues, (, ), {, return, this, ., allowDuplicateXValues, ;, }, public, int, getItemCount, (, ), {, return]
[}, public, boolean, getAllowDuplicateXValues, (, ), {, return, this, ., allowDuplicateXValues, ;, }, public, int, getItemCount, (, ), {, return]
[(, ), {, return, this, ., data, ., size, (, ), ;, }, public, List, getItems, (, ), {, return]
[(, ), {, return, this, ., data, ., size, (, ), ;, }, public, List, getItems, (, ), {, return]
[this, ., data, ., size, (, ), ;, }, public, List, getItems, (, ), {, return, Collections, ., unmodifiableList, (]
[this, ., data, ., size, (, ), ;, }, public, List, getItems, (, ), {, return, Collections, ., unmodifiableList, (]
[), {, return, Collections, ., unmodifiableList, (, this, ., data, ), ;, }, public, int, getMaximumItemCount, (, ), {, return]
[), {, return, Collections, ., unmodifiableList, (, this, ., data, ), ;, }, public, int, getMaximumItemCount, (, ), {, return]
[public, int, getMaximumItemCount, (, ), {, return, this, ., maximumItemCount, ;, }, public, void, setMaximumItemCount, (, int, maximum, ), {]
[public, int, getMaximumItemCount, (, ), {, return, this, ., maximumItemCount, ;, }, public, void, setMaximumItemCount, (, int, maximum, ), {]
[), {, return, this, ., maximumItemCount, ;, }, public, void, setMaximumItemCount, (, int, maximum, ), {, this, ., maximumItemCount, =]
[maximumItemCount, ;, }, public, void, setMaximumItemCount, (, int, maximum, ), {, this, ., maximumItemCount, =, maximum, ;, int, remove, =]
[maximumItemCount, ;, }, public, void, setMaximumItemCount, (, int, maximum, ), {, this, ., maximumItemCount, =, maximum, ;, int, remove, =]
[maximumItemCount, ;, }, public, void, setMaximumItemCount, (, int, maximum, ), {, this, ., maximumItemCount, =, maximum, ;, int, remove, =]
[maximumItemCount, ;, }, public, void, setMaximumItemCount, (, int, maximum, ), {, this, ., maximumItemCount, =, maximum, ;, int, remove, =]
[maximum, ), {, this, ., maximumItemCount, =, maximum, ;, int, remove, =, this, ., data, ., size, (, ), -]
[., maximumItemCount, =, maximum, ;, int, remove, =, this, ., data, ., size, (, ), -, maximum, ;, if, (]
[., maximumItemCount, =, maximum, ;, int, remove, =, this, ., data, ., size, (, ), -, maximum, ;, if, (]
[=, maximum, ;, int, remove, =, this, ., data, ., size, (, ), -, maximum, ;, if, (, remove, >]
[int, remove, =, this, ., data, ., size, (, ), -, maximum, ;, if, (, remove, >, 0, ), {]
[int, remove, =, this, ., data, ., size, (, ), -, maximum, ;, if, (, remove, >, 0, ), {]
[int, remove, =, this, ., data, ., size, (, ), -, maximum, ;, if, (, remove, >, 0, ), {]
[int, remove, =, this, ., data, ., size, (, ), -, maximum, ;, if, (, remove, >, 0, ), {]
[., size, (, ), -, maximum, ;, if, (, remove, >, 0, ), {, this, ., data, ., subList, (]
[(, ), -, maximum, ;, if, (, remove, >, 0, ), {, this, ., data, ., subList, (, 0, ,]
[remove, >, 0, ), {, this, ., data, ., subList, (, 0, ,, remove, ), ., clear, (, ), ;]
[{, this, ., data, ., subList, (, 0, ,, remove, ), ., clear, (, ), ;, findBoundsByIteration, (, ), ;]
[), ;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;, }, }, public, void, add, (, XYDataItem, item, ), {]
[findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;, }, }, public, void, add, (, XYDataItem, item, ), {, add, (]
[), ;, fireSeriesChanged, (, ), ;, }, }, public, void, add, (, XYDataItem, item, ), {, add, (, item, ,]
[{, add, (, item, ,, true, ), ;, }, public, void, add, (, double, x, ,, double, y, ), {]
[(, item, ,, true, ), ;, }, public, void, add, (, double, x, ,, double, y, ), {, add, (]
[true, ), ;, }, public, void, add, (, double, x, ,, double, y, ), {, add, (, new, Double, (]
[}, public, void, add, (, double, x, ,, double, y, ), {, add, (, new, Double, (, x, ), ,]
[add, (, double, x, ,, double, y, ), {, add, (, new, Double, (, x, ), ,, new, Double, (]
[x, ,, double, y, ), {, add, (, new, Double, (, x, ), ,, new, Double, (, y, ), ,]
[), ,, true, ), ;, }, public, void, add, (, double, x, ,, double, y, ,, boolean, notify, ), {]
[true, ), ;, }, public, void, add, (, double, x, ,, double, y, ,, boolean, notify, ), {, add, (]
[}, public, void, add, (, double, x, ,, double, y, ,, boolean, notify, ), {, add, (, new, Double, (]
[add, (, double, x, ,, double, y, ,, boolean, notify, ), {, add, (, new, Double, (, x, ), ,]
[x, ,, double, y, ,, boolean, notify, ), {, add, (, new, Double, (, x, ), ,, new, Double, (]
[y, ,, boolean, notify, ), {, add, (, new, Double, (, x, ), ,, new, Double, (, y, ), ,]
[Double, (, y, ), ,, notify, ), ;, }, public, void, add, (, double, x, ,, Number, y, ), {]
[y, ), ,, notify, ), ;, }, public, void, add, (, double, x, ,, Number, y, ), {, add, (]
[notify, ), ;, }, public, void, add, (, double, x, ,, Number, y, ), {, add, (, new, Double, (]
[}, public, void, add, (, double, x, ,, Number, y, ), {, add, (, new, Double, (, x, ), ,]
[), ,, y, ), ;, }, public, void, add, (, double, x, ,, Number, y, ,, boolean, notify, ), {]
[y, ), ;, }, public, void, add, (, double, x, ,, Number, y, ,, boolean, notify, ), {, add, (]
[}, public, void, add, (, double, x, ,, Number, y, ,, boolean, notify, ), {, add, (, new, Double, (]
[add, (, double, x, ,, Number, y, ,, boolean, notify, ), {, add, (, new, Double, (, x, ), ,]
[double, x, ,, Number, y, ,, boolean, notify, ), {, add, (, new, Double, (, x, ), ,, y, ,]
[x, ), ,, y, ,, notify, ), ;, }, public, void, add, (, Number, x, ,, Number, y, ), {]
[,, y, ,, notify, ), ;, }, public, void, add, (, Number, x, ,, Number, y, ), {, add, (]
[,, notify, ), ;, }, public, void, add, (, Number, x, ,, Number, y, ), {, add, (, x, ,]
[), ;, }, public, void, add, (, Number, x, ,, Number, y, ), {, add, (, x, ,, y, ,]
[), ;, }, public, void, add, (, Number, x, ,, Number, y, ,, boolean, notify, ), {, XYDataItem, item, =]
[public, void, add, (, Number, x, ,, Number, y, ,, boolean, notify, ), {, XYDataItem, item, =, new, XYDataItem, (]
[add, (, Number, x, ,, Number, y, ,, boolean, notify, ), {, XYDataItem, item, =, new, XYDataItem, (, x, ,]
[x, ,, Number, y, ,, boolean, notify, ), {, XYDataItem, item, =, new, XYDataItem, (, x, ,, y, ), ;]
[Number, y, ,, boolean, notify, ), {, XYDataItem, item, =, new, XYDataItem, (, x, ,, y, ), ;, add, (]
[,, boolean, notify, ), {, XYDataItem, item, =, new, XYDataItem, (, x, ,, y, ), ;, add, (, item, ,]
[(, item, ,, notify, ), ;, }, public, void, add, (, XYDataItem, item, ,, boolean, notify, ), {, if, (]
[(, item, ,, notify, ), ;, }, public, void, add, (, XYDataItem, item, ,, boolean, notify, ), {, if, (]
[,, notify, ), ;, }, public, void, add, (, XYDataItem, item, ,, boolean, notify, ), {, if, (, item, ==]
[}, public, void, add, (, XYDataItem, item, ,, boolean, notify, ), {, if, (, item, ==, null, ), {, throw]
[add, (, XYDataItem, item, ,, boolean, notify, ), {, if, (, item, ==, null, ), {, throw, new, IllegalArgumentException, (]
[,, boolean, notify, ), {, if, (, item, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }]
[notify, ), {, if, (, item, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, item, =]
[if, (, item, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, item, =, (, XYDataItem, )]
[if, (, item, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, item, =, (, XYDataItem, )]
[new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, item, =, (, XYDataItem, ), item, ., clone, (, ), ;, if, (]
[new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, item, =, (, XYDataItem, ), item, ., clone, (, ), ;, if, (]
[=, (, XYDataItem, ), item, ., clone, (, ), ;, if, (, this, ., autoSort, ), {, int, index, =]
[=, (, XYDataItem, ), item, ., clone, (, ), ;, if, (, this, ., autoSort, ), {, int, index, =]
[item, ., clone, (, ), ;, if, (, this, ., autoSort, ), {, int, index, =, Collections, ., binarySearch, (]
[item, ., clone, (, ), ;, if, (, this, ., autoSort, ), {, int, index, =, Collections, ., binarySearch, (]
[), ;, if, (, this, ., autoSort, ), {, int, index, =, Collections, ., binarySearch, (, this, ., data, ,]
[., autoSort, ), {, int, index, =, Collections, ., binarySearch, (, this, ., data, ,, item, ), ;, if, (]
[., autoSort, ), {, int, index, =, Collections, ., binarySearch, (, this, ., data, ,, item, ), ;, if, (]
[), {, int, index, =, Collections, ., binarySearch, (, this, ., data, ,, item, ), ;, if, (, index, <]
[index, =, Collections, ., binarySearch, (, this, ., data, ,, item, ), ;, if, (, index, <, 0, ), {]
[index, =, Collections, ., binarySearch, (, this, ., data, ,, item, ), ;, if, (, index, <, 0, ), {]
[index, =, Collections, ., binarySearch, (, this, ., data, ,, item, ), ;, if, (, index, <, 0, ), {]
[this, ., data, ,, item, ), ;, if, (, index, <, 0, ), {, this, ., data, ., add, (]
[this, ., data, ,, item, ), ;, if, (, index, <, 0, ), {, this, ., data, ., add, (]
[., data, ,, item, ), ;, if, (, index, <, 0, ), {, this, ., data, ., add, (, -]
[,, item, ), ;, if, (, index, <, 0, ), {, this, ., data, ., add, (, -, index, -]
[), ;, if, (, index, <, 0, ), {, this, ., data, ., add, (, -, index, -, 1, ,]
[{, this, ., data, ., add, (, -, index, -, 1, ,, item, ), ;, }, else, {, if, (]
[{, this, ., data, ., add, (, -, index, -, 1, ,, item, ), ;, }, else, {, if, (]
[index, -, 1, ,, item, ), ;, }, else, {, if, (, this, ., allowDuplicateXValues, ), {, int, size, =]
[index, -, 1, ,, item, ), ;, }, else, {, if, (, this, ., allowDuplicateXValues, ), {, int, size, =]
[index, -, 1, ,, item, ), ;, }, else, {, if, (, this, ., allowDuplicateXValues, ), {, int, size, =]
[if, (, this, ., allowDuplicateXValues, ), {, int, size, =, this, ., data, ., size, (, ), ;, while, (]
[if, (, this, ., allowDuplicateXValues, ), {, int, size, =, this, ., data, ., size, (, ), ;, while, (]
[if, (, this, ., allowDuplicateXValues, ), {, int, size, =, this, ., data, ., size, (, ), ;, while, (]
[this, ., allowDuplicateXValues, ), {, int, size, =, this, ., data, ., size, (, ), ;, while, (, index, <]
[allowDuplicateXValues, ), {, int, size, =, this, ., data, ., size, (, ), ;, while, (, index, <, size, &&]
[allowDuplicateXValues, ), {, int, size, =, this, ., data, ., size, (, ), ;, while, (, index, <, size, &&]
[allowDuplicateXValues, ), {, int, size, =, this, ., data, ., size, (, ), ;, while, (, index, <, size, &&]
[size, =, this, ., data, ., size, (, ), ;, while, (, index, <, size, &&, item, ., compareTo, (]
[size, =, this, ., data, ., size, (, ), ;, while, (, index, <, size, &&, item, ., compareTo, (]
[size, =, this, ., data, ., size, (, ), ;, while, (, index, <, size, &&, item, ., compareTo, (]
[size, (, ), ;, while, (, index, <, size, &&, item, ., compareTo, (, this, ., data, ., get, (]
[while, (, index, <, size, &&, item, ., compareTo, (, this, ., data, ., get, (, index, ), ), ==]
[<, size, &&, item, ., compareTo, (, this, ., data, ., get, (, index, ), ), ==, 0, ), {]
[<, size, &&, item, ., compareTo, (, this, ., data, ., get, (, index, ), ), ==, 0, ), {]
[(, this, ., data, ., get, (, index, ), ), ==, 0, ), {, index, ++, ;, }, if, (]
[(, this, ., data, ., get, (, index, ), ), ==, 0, ), {, index, ++, ;, }, if, (]
[., data, ., get, (, index, ), ), ==, 0, ), {, index, ++, ;, }, if, (, index, <]
[., data, ., get, (, index, ), ), ==, 0, ), {, index, ++, ;, }, if, (, index, <]
[., data, ., get, (, index, ), ), ==, 0, ), {, index, ++, ;, }, if, (, index, <]
[0, ), {, index, ++, ;, }, if, (, index, <, this, ., data, ., size, (, ), ), {]
[0, ), {, index, ++, ;, }, if, (, index, <, this, ., data, ., size, (, ), ), {]
[0, ), {, index, ++, ;, }, if, (, index, <, this, ., data, ., size, (, ), ), {]
[}, if, (, index, <, this, ., data, ., size, (, ), ), {, this, ., data, ., add, (]
[(, index, <, this, ., data, ., size, (, ), ), {, this, ., data, ., add, (, index, ,]
[., size, (, ), ), {, this, ., data, ., add, (, index, ,, item, ), ;, }, else, {]
[., size, (, ), ), {, this, ., data, ., add, (, index, ,, item, ), ;, }, else, {]
[., size, (, ), ), {, this, ., data, ., add, (, index, ,, item, ), ;, }, else, {]
[this, ., data, ., add, (, index, ,, item, ), ;, }, else, {, this, ., data, ., add, (]
[item, ), ;, }, else, {, this, ., data, ., add, (, item, ), ;, }, }, else, {, throw]
[}, else, {, this, ., data, ., add, (, item, ), ;, }, }, else, {, throw, new, SeriesException, (]
[), ;, }, }, else, {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }, }, else, {, if, (]
[;, }, }, else, {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }, }, else, {, if, (, !]
[;, }, }, else, {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }, }, else, {, if, (, !]
[(, "X-value already exists.", ), ;, }, }, }, else, {, if, (, !, this, ., allowDuplicateXValues, ), {, int, index, =]
[), ;, }, }, }, else, {, if, (, !, this, ., allowDuplicateXValues, ), {, int, index, =, indexOf, (]
[), ;, }, }, }, else, {, if, (, !, this, ., allowDuplicateXValues, ), {, int, index, =, indexOf, (]
[!, this, ., allowDuplicateXValues, ), {, int, index, =, indexOf, (, item, ., getX, (, ), ), ;, if, (]
[!, this, ., allowDuplicateXValues, ), {, int, index, =, indexOf, (, item, ., getX, (, ), ), ;, if, (]
[., allowDuplicateXValues, ), {, int, index, =, indexOf, (, item, ., getX, (, ), ), ;, if, (, index, >=]
[int, index, =, indexOf, (, item, ., getX, (, ), ), ;, if, (, index, >=, 0, ), {, throw]
[indexOf, (, item, ., getX, (, ), ), ;, if, (, index, >=, 0, ), {, throw, new, SeriesException, (]
[(, ), ), ;, if, (, index, >=, 0, ), {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }]
[(, ), ), ;, if, (, index, >=, 0, ), {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }]
[(, ), ), ;, if, (, index, >=, 0, ), {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }]
[index, >=, 0, ), {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }, this, ., data, ., add, (]
[{, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }, this, ., data, ., add, (, item, ), ;, }]
[new, SeriesException, (, "X-value already exists.", ), ;, }, }, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (]
[;, }, }, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (]
[;, }, }, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (]
[., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >]
[., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >]
[}, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =]
[item, ), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, )]
[item, ), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, )]
[item, ), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, )]
[(, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (]
[this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, 0, ), ;]
[maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem, (]
[(, XYDataItem, ), this, ., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem, (, removed, ), ;, }, if, (]
[this, ., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem, (, removed, ), ;, }, if, (, notify, ), {]
[notify, ), {, fireSeriesChanged, (, ), ;, }, }, public, void, delete, (, int, start, ,, int, end, ), {]
[notify, ), {, fireSeriesChanged, (, ), ;, }, }, public, void, delete, (, int, start, ,, int, end, ), {]
[notify, ), {, fireSeriesChanged, (, ), ;, }, }, public, void, delete, (, int, start, ,, int, end, ), {]
[notify, ), {, fireSeriesChanged, (, ), ;, }, }, public, void, delete, (, int, start, ,, int, end, ), {]
[;, }, }, public, void, delete, (, int, start, ,, int, end, ), {, this, ., data, ., subList, (]
[}, public, void, delete, (, int, start, ,, int, end, ), {, this, ., data, ., subList, (, start, ,]
[}, public, void, delete, (, int, start, ,, int, end, ), {, this, ., data, ., subList, (, start, ,]
[void, delete, (, int, start, ,, int, end, ), {, this, ., data, ., subList, (, start, ,, end, +]
[end, ), {, this, ., data, ., subList, (, start, ,, end, +, 1, ), ., clear, (, ), ;]
[., data, ., subList, (, start, ,, end, +, 1, ), ., clear, (, ), ;, findBoundsByIteration, (, ), ;]
[findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;, }, public, XYDataItem, remove, (, int, index, ), {, XYDataItem, removed, =]
[;, fireSeriesChanged, (, ), ;, }, public, XYDataItem, remove, (, int, index, ), {, XYDataItem, removed, =, (, XYDataItem, )]
[;, fireSeriesChanged, (, ), ;, }, public, XYDataItem, remove, (, int, index, ), {, XYDataItem, removed, =, (, XYDataItem, )]
[;, fireSeriesChanged, (, ), ;, }, public, XYDataItem, remove, (, int, index, ), {, XYDataItem, removed, =, (, XYDataItem, )]
[public, XYDataItem, remove, (, int, index, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (]
[(, int, index, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, index, ), ;]
[index, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, index, ), ;, updateBoundsForRemovedItem, (]
[XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, index, ), ;, updateBoundsForRemovedItem, (, removed, ), ;]
[), this, ., data, ., remove, (, index, ), ;, updateBoundsForRemovedItem, (, removed, ), ;, fireSeriesChanged, (, ), ;, return]
[removed, ), ;, fireSeriesChanged, (, ), ;, return, removed, ;, }, public, XYDataItem, remove, (, Number, x, ), {, return]
[;, fireSeriesChanged, (, ), ;, return, removed, ;, }, public, XYDataItem, remove, (, Number, x, ), {, return, remove, (]
[(, ), ;, return, removed, ;, }, public, XYDataItem, remove, (, Number, x, ), {, return, remove, (, indexOf, (]
[), {, return, remove, (, indexOf, (, x, ), ), ;, }, public, void, clear, (, ), {, if, (]
[), {, return, remove, (, indexOf, (, x, ), ), ;, }, public, void, clear, (, ), {, if, (]
[), {, return, remove, (, indexOf, (, x, ), ), ;, }, public, void, clear, (, ), {, if, (]
[), {, return, remove, (, indexOf, (, x, ), ), ;, }, public, void, clear, (, ), {, if, (]
[), ), ;, }, public, void, clear, (, ), {, if, (, this, ., data, ., size, (, ), >]
[}, public, void, clear, (, ), {, if, (, this, ., data, ., size, (, ), >, 0, ), {]
[}, public, void, clear, (, ), {, if, (, this, ., data, ., size, (, ), >, 0, ), {]
[}, public, void, clear, (, ), {, if, (, this, ., data, ., size, (, ), >, 0, ), {]
[(, this, ., data, ., size, (, ), >, 0, ), {, this, ., data, ., clear, (, ), ;]
[(, this, ., data, ., size, (, ), >, 0, ), {, this, ., data, ., clear, (, ), ;]
[., size, (, ), >, 0, ), {, this, ., data, ., clear, (, ), ;, this, ., minX, =]
[., size, (, ), >, 0, ), {, this, ., data, ., clear, (, ), ;, this, ., minX, =]
[>, 0, ), {, this, ., data, ., clear, (, ), ;, this, ., minX, =, Double, ., NaN, ;]
[>, 0, ), {, this, ., data, ., clear, (, ), ;, this, ., minX, =, Double, ., NaN, ;]
[this, ., data, ., clear, (, ), ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =]
[this, ., data, ., clear, (, ), ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =]
[clear, (, ), ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;]
[clear, (, ), ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;]
[this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =]
[this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =]
[Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;]
[Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;]
[this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =]
[this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =]
[Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;]
[., NaN, ;, fireSeriesChanged, (, ), ;, }, }, public, XYDataItem, getDataItem, (, int, index, ), {, XYDataItem, item, =]
[fireSeriesChanged, (, ), ;, }, }, public, XYDataItem, getDataItem, (, int, index, ), {, XYDataItem, item, =, (, XYDataItem, )]
[fireSeriesChanged, (, ), ;, }, }, public, XYDataItem, getDataItem, (, int, index, ), {, XYDataItem, item, =, (, XYDataItem, )]
[fireSeriesChanged, (, ), ;, }, }, public, XYDataItem, getDataItem, (, int, index, ), {, XYDataItem, item, =, (, XYDataItem, )]
[public, XYDataItem, getDataItem, (, int, index, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (]
[int, index, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, return]
[{, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, return, (, XYDataItem, )]
[{, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, return, (, XYDataItem, )]
[;, return, (, XYDataItem, ), item, ., clone, (, ), ;, }, XYDataItem, getRawDataItem, (, int, index, ), {, return]
[XYDataItem, ), item, ., clone, (, ), ;, }, XYDataItem, getRawDataItem, (, int, index, ), {, return, (, XYDataItem, )]
[XYDataItem, ), item, ., clone, (, ), ;, }, XYDataItem, getRawDataItem, (, int, index, ), {, return, (, XYDataItem, )]
[XYDataItem, ), item, ., clone, (, ), ;, }, XYDataItem, getRawDataItem, (, int, index, ), {, return, (, XYDataItem, )]
[), ;, }, XYDataItem, getRawDataItem, (, int, index, ), {, return, (, XYDataItem, ), this, ., data, ., get, (]
[), this, ., data, ., get, (, index, ), ;, }, public, Number, getX, (, int, index, ), {, return]
[), this, ., data, ., get, (, index, ), ;, }, public, Number, getX, (, int, index, ), {, return]
[., data, ., get, (, index, ), ;, }, public, Number, getX, (, int, index, ), {, return, getRawDataItem, (]
[return, getRawDataItem, (, index, ), ., getX, (, ), ;, }, public, Number, getY, (, int, index, ), {, return]
[return, getRawDataItem, (, index, ), ., getX, (, ), ;, }, public, Number, getY, (, int, index, ), {, return]
[(, index, ), ., getX, (, ), ;, }, public, Number, getY, (, int, index, ), {, return, getRawDataItem, (]
[., getY, (, ), ;, }, public, void, updateByIndex, (, int, index, ,, Number, y, ), {, XYDataItem, item, =]
[(, ), ;, }, public, void, updateByIndex, (, int, index, ,, Number, y, ), {, XYDataItem, item, =, getRawDataItem, (]
[updateByIndex, (, int, index, ,, Number, y, ), {, XYDataItem, item, =, getRawDataItem, (, index, ), ;, boolean, iterate, =]
[Number, y, ), {, XYDataItem, item, =, getRawDataItem, (, index, ), ;, boolean, iterate, =, false, ;, double, oldY, =]
[Number, y, ), {, XYDataItem, item, =, getRawDataItem, (, index, ), ;, boolean, iterate, =, false, ;, double, oldY, =]
[(, index, ), ;, boolean, iterate, =, false, ;, double, oldY, =, item, ., getYValue, (, ), ;, if, (]
[index, ), ;, boolean, iterate, =, false, ;, double, oldY, =, item, ., getYValue, (, ), ;, if, (, !]
[index, ), ;, boolean, iterate, =, false, ;, double, oldY, =, item, ., getYValue, (, ), ;, if, (, !]
[iterate, =, false, ;, double, oldY, =, item, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (]
[double, oldY, =, item, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {]
[=, item, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =]
[=, item, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =]
[=, item, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =]
[., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=]
[., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=]
[;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||]
[;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||]
[(, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=]
[(, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=]
[(, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }]
[(, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }]
[{, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, item, ., setY, (]
[this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, item, ., setY, (, y, ), ;, if, (]
[||, oldY, >=, this, ., maxY, ;, }, item, ., setY, (, y, ), ;, if, (, iterate, ), {]
[item, ., setY, (, y, ), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (]
[item, ., setY, (, y, ), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (]
[setY, (, y, ), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (, y, !=]
[(, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (, y, !=, null, ), {, double, yy, =]
[(, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (, y, !=, null, ), {, double, yy, =]
[), ;, }, else, if, (, y, !=, null, ), {, double, yy, =, y, ., doubleValue, (, ), ;]
[), ;, }, else, if, (, y, !=, null, ), {, double, yy, =, y, ., doubleValue, (, ), ;]
[if, (, y, !=, null, ), {, double, yy, =, y, ., doubleValue, (, ), ;, this, ., minY, =]
[y, !=, null, ), {, double, yy, =, y, ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (]
[y, !=, null, ), {, double, yy, =, y, ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (]
[{, double, yy, =, y, ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,]
[=, y, ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;]
[=, y, ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;]
[(, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =]
[;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =, maxIgnoreNaN, (]
[;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =, maxIgnoreNaN, (]
[=, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,]
[., minY, ,, yy, ), ;, this, ., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }]
[;, }, fireSeriesChanged, (, ), ;, }, private, double, minIgnoreNaN, (, double, a, ,, double, b, ), {, if, (]
[;, }, fireSeriesChanged, (, ), ;, }, private, double, minIgnoreNaN, (, double, a, ,, double, b, ), {, if, (]
[), ;, }, private, double, minIgnoreNaN, (, double, a, ,, double, b, ), {, if, (, Double, ., isNaN, (]
[minIgnoreNaN, (, double, a, ,, double, b, ), {, if, (, Double, ., isNaN, (, a, ), ), {, return]
[), {, if, (, Double, ., isNaN, (, a, ), ), {, return, b, ;, }, else, {, if, (]
[), {, if, (, Double, ., isNaN, (, a, ), ), {, return, b, ;, }, else, {, if, (]
[Double, ., isNaN, (, a, ), ), {, return, b, ;, }, else, {, if, (, Double, ., isNaN, (]
[), ), {, return, b, ;, }, else, {, if, (, Double, ., isNaN, (, b, ), ), {, return]
[}, else, {, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[}, else, {, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[(, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., min, (]
[., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., min, (, a, ,]
[,, b, ), ;, }, }, }, private, double, maxIgnoreNaN, (, double, a, ,, double, b, ), {, if, (]
[,, b, ), ;, }, }, }, private, double, maxIgnoreNaN, (, double, a, ,, double, b, ), {, if, (]
[}, }, }, private, double, maxIgnoreNaN, (, double, a, ,, double, b, ), {, if, (, Double, ., isNaN, (]
[maxIgnoreNaN, (, double, a, ,, double, b, ), {, if, (, Double, ., isNaN, (, a, ), ), {, return]
[), {, if, (, Double, ., isNaN, (, a, ), ), {, return, b, ;, }, else, {, if, (]
[), {, if, (, Double, ., isNaN, (, a, ), ), {, return, b, ;, }, else, {, if, (]
[Double, ., isNaN, (, a, ), ), {, return, b, ;, }, else, {, if, (, Double, ., isNaN, (]
[), ), {, return, b, ;, }, else, {, if, (, Double, ., isNaN, (, b, ), ), {, return]
[}, else, {, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[}, else, {, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return]
[(, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., max, (]
[., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., max, (, a, ,]
[b, ), ;, }, }, }, public, void, update, (, Number, x, ,, Number, y, ), {, int, index, =]
[;, }, }, }, public, void, update, (, Number, x, ,, Number, y, ), {, int, index, =, indexOf, (]
[void, update, (, Number, x, ,, Number, y, ), {, int, index, =, indexOf, (, x, ), ;, if, (]
[void, update, (, Number, x, ,, Number, y, ), {, int, index, =, indexOf, (, x, ), ;, if, (]
[(, Number, x, ,, Number, y, ), {, int, index, =, indexOf, (, x, ), ;, if, (, index, <]
[Number, y, ), {, int, index, =, indexOf, (, x, ), ;, if, (, index, <, 0, ), {, throw]
[{, int, index, =, indexOf, (, x, ), ;, if, (, index, <, 0, ), {, throw, new, SeriesException, (]
[{, int, index, =, indexOf, (, x, ), ;, if, (, index, <, 0, ), {, throw, new, SeriesException, (]
[index, =, indexOf, (, x, ), ;, if, (, index, <, 0, ), {, throw, new, SeriesException, (, "No observation for x = ", +]
[;, if, (, index, <, 0, ), {, throw, new, SeriesException, (, "No observation for x = ", +, x, ), ;, }, else, {]
[(, index, <, 0, ), {, throw, new, SeriesException, (, "No observation for x = ", +, x, ), ;, }, else, {, updateByIndex, (]
[<, 0, ), {, throw, new, SeriesException, (, "No observation for x = ", +, x, ), ;, }, else, {, updateByIndex, (, index, ,]
[(, index, ,, y, ), ;, }, }, public, XYDataItem, addOrUpdate, (, double, x, ,, double, y, ), {, return]
[,, y, ), ;, }, }, public, XYDataItem, addOrUpdate, (, double, x, ,, double, y, ), {, return, addOrUpdate, (]
[;, }, }, public, XYDataItem, addOrUpdate, (, double, x, ,, double, y, ), {, return, addOrUpdate, (, new, Double, (]
[public, XYDataItem, addOrUpdate, (, double, x, ,, double, y, ), {, return, addOrUpdate, (, new, Double, (, x, ), ,]
[(, double, x, ,, double, y, ), {, return, addOrUpdate, (, new, Double, (, x, ), ,, new, Double, (]
[new, Double, (, y, ), ), ;, }, public, XYDataItem, addOrUpdate, (, Number, x, ,, Number, y, ), {, return]
[(, y, ), ), ;, }, public, XYDataItem, addOrUpdate, (, Number, x, ,, Number, y, ), {, return, addOrUpdate, (]
[), ;, }, public, XYDataItem, addOrUpdate, (, Number, x, ,, Number, y, ), {, return, addOrUpdate, (, new, XYDataItem, (]
[}, public, XYDataItem, addOrUpdate, (, Number, x, ,, Number, y, ), {, return, addOrUpdate, (, new, XYDataItem, (, x, ,]
[new, XYDataItem, (, x, ,, y, ), ), ;, }, public, XYDataItem, addOrUpdate, (, XYDataItem, item, ), {, if, (]
[new, XYDataItem, (, x, ,, y, ), ), ;, }, public, XYDataItem, addOrUpdate, (, XYDataItem, item, ), {, if, (]
[(, x, ,, y, ), ), ;, }, public, XYDataItem, addOrUpdate, (, XYDataItem, item, ), {, if, (, item, ==]
[), ), ;, }, public, XYDataItem, addOrUpdate, (, XYDataItem, item, ), {, if, (, item, ==, null, ), {, throw]
[}, public, XYDataItem, addOrUpdate, (, XYDataItem, item, ), {, if, (, item, ==, null, ), {, throw, new, IllegalArgumentException, (]
[item, ), {, if, (, item, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, if, (]
[item, ), {, if, (, item, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, if, (]
[item, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, if, (, this, ., allowDuplicateXValues, ), {]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, if, (, this, ., allowDuplicateXValues, ), {, add, (]
[new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, if, (, this, ., allowDuplicateXValues, ), {, add, (, item, ), ;, return]
[}, if, (, this, ., allowDuplicateXValues, ), {, add, (, item, ), ;, return, null, ;, }, XYDataItem, overwritten, =]
[allowDuplicateXValues, ), {, add, (, item, ), ;, return, null, ;, }, XYDataItem, overwritten, =, null, ;, int, index, =]
[{, add, (, item, ), ;, return, null, ;, }, XYDataItem, overwritten, =, null, ;, int, index, =, indexOf, (]
[{, add, (, item, ), ;, return, null, ;, }, XYDataItem, overwritten, =, null, ;, int, index, =, indexOf, (]
[}, XYDataItem, overwritten, =, null, ;, int, index, =, indexOf, (, item, ., getX, (, ), ), ;, if, (]
[}, XYDataItem, overwritten, =, null, ;, int, index, =, indexOf, (, item, ., getX, (, ), ), ;, if, (]
[overwritten, =, null, ;, int, index, =, indexOf, (, item, ., getX, (, ), ), ;, if, (, index, >=]
[=, indexOf, (, item, ., getX, (, ), ), ;, if, (, index, >=, 0, ), {, XYDataItem, existing, =]
[item, ., getX, (, ), ), ;, if, (, index, >=, 0, ), {, XYDataItem, existing, =, (, XYDataItem, )]
[item, ., getX, (, ), ), ;, if, (, index, >=, 0, ), {, XYDataItem, existing, =, (, XYDataItem, )]
[item, ., getX, (, ), ), ;, if, (, index, >=, 0, ), {, XYDataItem, existing, =, (, XYDataItem, )]
[;, if, (, index, >=, 0, ), {, XYDataItem, existing, =, (, XYDataItem, ), this, ., data, ., get, (]
[index, >=, 0, ), {, XYDataItem, existing, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;]
[0, ), {, XYDataItem, existing, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, overwritten, =]
[XYDataItem, existing, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, overwritten, =, (, XYDataItem, )]
[XYDataItem, existing, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, overwritten, =, (, XYDataItem, )]
[., get, (, index, ), ;, overwritten, =, (, XYDataItem, ), existing, ., clone, (, ), ;, boolean, iterate, =]
[;, overwritten, =, (, XYDataItem, ), existing, ., clone, (, ), ;, boolean, iterate, =, false, ;, double, oldY, =]
[;, overwritten, =, (, XYDataItem, ), existing, ., clone, (, ), ;, boolean, iterate, =, false, ;, double, oldY, =]
[clone, (, ), ;, boolean, iterate, =, false, ;, double, oldY, =, existing, ., getYValue, (, ), ;, if, (]
[(, ), ;, boolean, iterate, =, false, ;, double, oldY, =, existing, ., getYValue, (, ), ;, if, (, !]
[(, ), ;, boolean, iterate, =, false, ;, double, oldY, =, existing, ., getYValue, (, ), ;, if, (, !]
[iterate, =, false, ;, double, oldY, =, existing, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (]
[double, oldY, =, existing, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {]
[=, existing, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =]
[=, existing, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =]
[=, existing, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =]
[., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=]
[., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=]
[;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||]
[;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||]
[(, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=]
[(, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=]
[(, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }]
[(, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }]
[{, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, existing, ., setY, (]
[{, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, existing, ., setY, (]
[oldY, >=, this, ., maxY, ;, }, existing, ., setY, (, item, ., getY, (, ), ), ;, if, (]
[., maxY, ;, }, existing, ., setY, (, item, ., getY, (, ), ), ;, if, (, iterate, ), {]
[item, ., getY, (, ), ), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (]
[item, ., getY, (, ), ), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (]
[item, ., getY, (, ), ), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (]
[;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (, item, ., getY, (, ), !=]
[findBoundsByIteration, (, ), ;, }, else, if, (, item, ., getY, (, ), !=, null, ), {, double, yy, =]
[findBoundsByIteration, (, ), ;, }, else, if, (, item, ., getY, (, ), !=, null, ), {, double, yy, =]
[findBoundsByIteration, (, ), ;, }, else, if, (, item, ., getY, (, ), !=, null, ), {, double, yy, =]
[getY, (, ), !=, null, ), {, double, yy, =, item, ., getY, (, ), ., doubleValue, (, ), ;]
[getY, (, ), !=, null, ), {, double, yy, =, item, ., getY, (, ), ., doubleValue, (, ), ;]
[null, ), {, double, yy, =, item, ., getY, (, ), ., doubleValue, (, ), ;, this, ., minY, =]
[{, double, yy, =, item, ., getY, (, ), ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (]
[{, double, yy, =, item, ., getY, (, ), ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (]
[item, ., getY, (, ), ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,]
[(, ), ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;]
[(, ), ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;]
[(, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =]
[;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =, minIgnoreNaN, (]
[;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =, minIgnoreNaN, (]
[=, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =, minIgnoreNaN, (, this, ., maxY, ,]
[yy, ), ;, this, ., maxY, =, minIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, }, else, {]
[;, this, ., maxY, =, minIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, }, else, {, item, =]
[maxY, =, minIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, }, else, {, item, =, (, XYDataItem, )]
[maxY, =, minIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, }, else, {, item, =, (, XYDataItem, )]
[yy, ), ;, }, }, else, {, item, =, (, XYDataItem, ), item, ., clone, (, ), ;, if, (]
[yy, ), ;, }, }, else, {, item, =, (, XYDataItem, ), item, ., clone, (, ), ;, if, (]
[else, {, item, =, (, XYDataItem, ), item, ., clone, (, ), ;, if, (, this, ., autoSort, ), {]
[else, {, item, =, (, XYDataItem, ), item, ., clone, (, ), ;, if, (, this, ., autoSort, ), {]
[else, {, item, =, (, XYDataItem, ), item, ., clone, (, ), ;, if, (, this, ., autoSort, ), {]
[), item, ., clone, (, ), ;, if, (, this, ., autoSort, ), {, this, ., data, ., add, (]
[), item, ., clone, (, ), ;, if, (, this, ., autoSort, ), {, this, ., data, ., add, (]
[item, ., clone, (, ), ;, if, (, this, ., autoSort, ), {, this, ., data, ., add, (, -]
[clone, (, ), ;, if, (, this, ., autoSort, ), {, this, ., data, ., add, (, -, index, -]
[), ;, if, (, this, ., autoSort, ), {, this, ., data, ., add, (, -, index, -, 1, ,]
[autoSort, ), {, this, ., data, ., add, (, -, index, -, 1, ,, item, ), ;, }, else, {]
[autoSort, ), {, this, ., data, ., add, (, -, index, -, 1, ,, item, ), ;, }, else, {]
[autoSort, ), {, this, ., data, ., add, (, -, index, -, 1, ,, item, ), ;, }, else, {]
[., add, (, -, index, -, 1, ,, item, ), ;, }, else, {, this, ., data, ., add, (]
[index, -, 1, ,, item, ), ;, }, else, {, this, ., data, ., add, (, item, ), ;, }]
[1, ,, item, ), ;, }, else, {, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (]
[}, else, {, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (]
[}, else, {, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (]
[., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >]
[., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >]
[}, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =]
[item, ), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, )]
[item, ), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, )]
[item, ), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, )]
[(, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (]
[this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, 0, ), ;]
[maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem, (]
[=, (, XYDataItem, ), this, ., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem, (, removed, ), ;, }, }]
[., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem, (, removed, ), ;, }, }, fireSeriesChanged, (, ), ;, return]
[}, }, fireSeriesChanged, (, ), ;, return, overwritten, ;, }, public, int, indexOf, (, Number, x, ), {, if, (]
[}, }, fireSeriesChanged, (, ), ;, return, overwritten, ;, }, public, int, indexOf, (, Number, x, ), {, if, (]
[return, overwritten, ;, }, public, int, indexOf, (, Number, x, ), {, if, (, this, ., autoSort, ), {, return]
[return, overwritten, ;, }, public, int, indexOf, (, Number, x, ), {, if, (, this, ., autoSort, ), {, return]
[public, int, indexOf, (, Number, x, ), {, if, (, this, ., autoSort, ), {, return, Collections, ., binarySearch, (]
[public, int, indexOf, (, Number, x, ), {, if, (, this, ., autoSort, ), {, return, Collections, ., binarySearch, (]
[Number, x, ), {, if, (, this, ., autoSort, ), {, return, Collections, ., binarySearch, (, this, ., data, ,]
[{, if, (, this, ., autoSort, ), {, return, Collections, ., binarySearch, (, this, ., data, ,, new, XYDataItem, (]
[(, this, ., autoSort, ), {, return, Collections, ., binarySearch, (, this, ., data, ,, new, XYDataItem, (, x, ,]
[., data, ,, new, XYDataItem, (, x, ,, null, ), ), ;, }, else, {, for, (, int, i, =]
[,, new, XYDataItem, (, x, ,, null, ), ), ;, }, else, {, for, (, int, i, =, 0, ;]
[,, new, XYDataItem, (, x, ,, null, ), ), ;, }, else, {, for, (, int, i, =, 0, ;]
[XYDataItem, (, x, ,, null, ), ), ;, }, else, {, for, (, int, i, =, 0, ;, i, <]
[XYDataItem, (, x, ,, null, ), ), ;, }, else, {, for, (, int, i, =, 0, ;, i, <]
[XYDataItem, (, x, ,, null, ), ), ;, }, else, {, for, (, int, i, =, 0, ;, i, <]
[}, else, {, for, (, int, i, =, 0, ;, i, <, this, ., data, ., size, (, ), ;]
[}, else, {, for, (, int, i, =, 0, ;, i, <, this, ., data, ., size, (, ), ;]
[=, 0, ;, i, <, this, ., data, ., size, (, ), ;, i, ++, ), {, XYDataItem, item, =]
[i, <, this, ., data, ., size, (, ), ;, i, ++, ), {, XYDataItem, item, =, (, XYDataItem, )]
[i, <, this, ., data, ., size, (, ), ;, i, ++, ), {, XYDataItem, item, =, (, XYDataItem, )]
[i, <, this, ., data, ., size, (, ), ;, i, ++, ), {, XYDataItem, item, =, (, XYDataItem, )]
[size, (, ), ;, i, ++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (]
[++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, i, ), ;, if, (]
[++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, i, ), ;, if, (]
[++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, i, ), ;, if, (]
[), this, ., data, ., get, (, i, ), ;, if, (, item, ., getX, (, ), ., equals, (]
[get, (, i, ), ;, if, (, item, ., getX, (, ), ., equals, (, x, ), ), {, return]
[if, (, item, ., getX, (, ), ., equals, (, x, ), ), {, return, i, ;, }, }, return]
[(, item, ., getX, (, ), ., equals, (, x, ), ), {, return, i, ;, }, }, return, -]
[}, return, -, 1, ;, }, }, public, double, [, ], [, ], toArray, (, ), {, int, itemCount, =]
[[, ], toArray, (, ), {, int, itemCount, =, getItemCount, (, ), ;, double, [, ], [, ], result, =]
[(, ), {, int, itemCount, =, getItemCount, (, ), ;, double, [, ], [, ], result, =, new, double, []
[int, itemCount, =, getItemCount, (, ), ;, double, [, ], [, ], result, =, new, double, [, 2, ], []
[[, ], [, ], result, =, new, double, [, 2, ], [, itemCount, ], ;, for, (, int, i, =]
[[, ], result, =, new, double, [, 2, ], [, itemCount, ], ;, for, (, int, i, =, 0, ;]
[[, ], result, =, new, double, [, 2, ], [, itemCount, ], ;, for, (, int, i, =, 0, ;]
[result, =, new, double, [, 2, ], [, itemCount, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, 2, ], [, itemCount, ], ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;]
[new, double, [, 2, ], [, itemCount, ], ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;]
[], [, itemCount, ], ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {]
[], [, itemCount, ], ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {]
[], [, itemCount, ], ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {]
[itemCount, ], ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, result, []
[for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, result, [, 0, ], []
[i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, result, [, 0, ], [, i, ], =]
[i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, result, [, 0, ], [, i, ], =]
[i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, result, [, 0, ], [, i, ], =]
[i, <, itemCount, ;, i, ++, ), {, result, [, 0, ], [, i, ], =, this, ., getX, (]
[0, ], [, i, ], =, this, ., getX, (, i, ), ., doubleValue, (, ), ;, Number, y, =]
[[, i, ], =, this, ., getX, (, i, ), ., doubleValue, (, ), ;, Number, y, =, getY, (]
[., getX, (, i, ), ., doubleValue, (, ), ;, Number, y, =, getY, (, i, ), ;, if, (]
[., getX, (, i, ), ., doubleValue, (, ), ;, Number, y, =, getY, (, i, ), ;, if, (]
[(, i, ), ., doubleValue, (, ), ;, Number, y, =, getY, (, i, ), ;, if, (, y, !=]
[., doubleValue, (, ), ;, Number, y, =, getY, (, i, ), ;, if, (, y, !=, null, ), {]
[., doubleValue, (, ), ;, Number, y, =, getY, (, i, ), ;, if, (, y, !=, null, ), {]
[., doubleValue, (, ), ;, Number, y, =, getY, (, i, ), ;, if, (, y, !=, null, ), {]
[(, ), ;, Number, y, =, getY, (, i, ), ;, if, (, y, !=, null, ), {, result, []
[Number, y, =, getY, (, i, ), ;, if, (, y, !=, null, ), {, result, [, 1, ], []
[getY, (, i, ), ;, if, (, y, !=, null, ), {, result, [, 1, ], [, i, ], =]
[getY, (, i, ), ;, if, (, y, !=, null, ), {, result, [, 1, ], [, i, ], =]
[null, ), {, result, [, 1, ], [, i, ], =, y, ., doubleValue, (, ), ;, }, else, {]
[null, ), {, result, [, 1, ], [, i, ], =, y, ., doubleValue, (, ), ;, }, else, {]
[null, ), {, result, [, 1, ], [, i, ], =, y, ., doubleValue, (, ), ;, }, else, {]
[{, result, [, 1, ], [, i, ], =, y, ., doubleValue, (, ), ;, }, else, {, result, []
[1, ], [, i, ], =, y, ., doubleValue, (, ), ;, }, else, {, result, [, 1, ], []
[i, ], =, y, ., doubleValue, (, ), ;, }, else, {, result, [, 1, ], [, i, ], =]
[i, ], =, y, ., doubleValue, (, ), ;, }, else, {, result, [, 1, ], [, i, ], =]
[), ;, }, else, {, result, [, 1, ], [, i, ], =, Double, ., NaN, ;, }, }, return]
[., NaN, ;, }, }, return, result, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeries, clone, =]
[}, }, return, result, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeries, clone, =, (, XYSeries, )]
[}, }, return, result, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeries, clone, =, (, XYSeries, )]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeries, clone, =, (, XYSeries, ), super, ., clone, (, ), ;]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeries, clone, =, (, XYSeries, ), super, ., clone, (, ), ;]
[), throws, CloneNotSupportedException, {, XYSeries, clone, =, (, XYSeries, ), super, ., clone, (, ), ;, clone, ., data, =]
[{, XYSeries, clone, =, (, XYSeries, ), super, ., clone, (, ), ;, clone, ., data, =, (, List, )]
[{, XYSeries, clone, =, (, XYSeries, ), super, ., clone, (, ), ;, clone, ., data, =, (, List, )]
[(, XYSeries, ), super, ., clone, (, ), ;, clone, ., data, =, (, List, ), ObjectUtilities, ., deepClone, (]
[(, XYSeries, ), super, ., clone, (, ), ;, clone, ., data, =, (, List, ), ObjectUtilities, ., deepClone, (]
[(, ), ;, clone, ., data, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., data, ), ;, return]
[return, clone, ;, }, public, XYSeries, createCopy, (, int, start, ,, int, end, ), throws, CloneNotSupportedException, {, XYSeries, copy, =]
[}, public, XYSeries, createCopy, (, int, start, ,, int, end, ), throws, CloneNotSupportedException, {, XYSeries, copy, =, (, XYSeries, )]
[}, public, XYSeries, createCopy, (, int, start, ,, int, end, ), throws, CloneNotSupportedException, {, XYSeries, copy, =, (, XYSeries, )]
[start, ,, int, end, ), throws, CloneNotSupportedException, {, XYSeries, copy, =, (, XYSeries, ), super, ., clone, (, ), ;]
[start, ,, int, end, ), throws, CloneNotSupportedException, {, XYSeries, copy, =, (, XYSeries, ), super, ., clone, (, ), ;]
[), throws, CloneNotSupportedException, {, XYSeries, copy, =, (, XYSeries, ), super, ., clone, (, ), ;, copy, ., data, =]
[., clone, (, ), ;, copy, ., data, =, new, java, ., util, ., ArrayList, (, ), ;, if, (]
[., clone, (, ), ;, copy, ., data, =, new, java, ., util, ., ArrayList, (, ), ;, if, (]
[., clone, (, ), ;, copy, ., data, =, new, java, ., util, ., ArrayList, (, ), ;, if, (]
[., clone, (, ), ;, copy, ., data, =, new, java, ., util, ., ArrayList, (, ), ;, if, (]
[=, new, java, ., util, ., ArrayList, (, ), ;, if, (, this, ., data, ., size, (, ), >]
[), ;, if, (, this, ., data, ., size, (, ), >, 0, ), {, for, (, int, index, =]
[if, (, this, ., data, ., size, (, ), >, 0, ), {, for, (, int, index, =, start, ;]
[if, (, this, ., data, ., size, (, ), >, 0, ), {, for, (, int, index, =, start, ;]
[this, ., data, ., size, (, ), >, 0, ), {, for, (, int, index, =, start, ;, index, <=]
[data, ., size, (, ), >, 0, ), {, for, (, int, index, =, start, ;, index, <=, end, ;]
[data, ., size, (, ), >, 0, ), {, for, (, int, index, =, start, ;, index, <=, end, ;]
[), {, for, (, int, index, =, start, ;, index, <=, end, ;, index, ++, ), {, XYDataItem, item, =]
[(, int, index, =, start, ;, index, <=, end, ;, index, ++, ), {, XYDataItem, item, =, (, XYDataItem, )]
[(, int, index, =, start, ;, index, <=, end, ;, index, ++, ), {, XYDataItem, item, =, (, XYDataItem, )]
[(, int, index, =, start, ;, index, <=, end, ;, index, ++, ), {, XYDataItem, item, =, (, XYDataItem, )]
[index, <=, end, ;, index, ++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (]
[), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, XYDataItem, clone, =]
[item, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, XYDataItem, clone, =, (, XYDataItem, )]
[item, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, XYDataItem, clone, =, (, XYDataItem, )]
[., get, (, index, ), ;, XYDataItem, clone, =, (, XYDataItem, ), item, ., clone, (, ), ;, try, {]
[., get, (, index, ), ;, XYDataItem, clone, =, (, XYDataItem, ), item, ., clone, (, ), ;, try, {]
[), ;, XYDataItem, clone, =, (, XYDataItem, ), item, ., clone, (, ), ;, try, {, copy, ., add, (]
[clone, (, ), ;, try, {, copy, ., add, (, clone, ), ;, }, catch, (, SeriesException, e, ), {]
[clone, (, ), ;, try, {, copy, ., add, (, clone, ), ;, }, catch, (, SeriesException, e, ), {]
[clone, (, ), ;, try, {, copy, ., add, (, clone, ), ;, }, catch, (, SeriesException, e, ), {]
[copy, ., add, (, clone, ), ;, }, catch, (, SeriesException, e, ), {, System, ., err, ., println, (]
[}, catch, (, SeriesException, e, ), {, System, ., err, ., println, (, "Unable to add cloned data item.", ), ;, }, }, }, return]
["Unable to add cloned data item.", ), ;, }, }, }, return, copy, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
["Unable to add cloned data item.", ), ;, }, }, }, return, copy, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[;, }, }, }, return, copy, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[return, copy, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, XYSeries, ), ), {, return]
[return, true, ;, }, if, (, !, (, obj, instanceof, XYSeries, ), ), {, return, false, ;, }, if, (]
[true, ;, }, if, (, !, (, obj, instanceof, XYSeries, ), ), {, return, false, ;, }, if, (, !]
[true, ;, }, if, (, !, (, obj, instanceof, XYSeries, ), ), {, return, false, ;, }, if, (, !]
[(, !, (, obj, instanceof, XYSeries, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (]
[XYSeries, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, XYSeries, that, =]
[(, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, XYSeries, that, =, (, XYSeries, )]
[equals, (, obj, ), ), {, return, false, ;, }, XYSeries, that, =, (, XYSeries, ), obj, ;, if, (]
[equals, (, obj, ), ), {, return, false, ;, }, XYSeries, that, =, (, XYSeries, ), obj, ;, if, (]
[equals, (, obj, ), ), {, return, false, ;, }, XYSeries, that, =, (, XYSeries, ), obj, ;, if, (]
[), {, return, false, ;, }, XYSeries, that, =, (, XYSeries, ), obj, ;, if, (, this, ., maximumItemCount, !=]
[), {, return, false, ;, }, XYSeries, that, =, (, XYSeries, ), obj, ;, if, (, this, ., maximumItemCount, !=]
[XYSeries, that, =, (, XYSeries, ), obj, ;, if, (, this, ., maximumItemCount, !=, that, ., maximumItemCount, ), {, return]
[), obj, ;, if, (, this, ., maximumItemCount, !=, that, ., maximumItemCount, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., maximumItemCount, !=, that, ., maximumItemCount, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., maximumItemCount, !=, that, ., maximumItemCount, ), {, return, false, ;, }, if, (]
[(, this, ., maximumItemCount, !=, that, ., maximumItemCount, ), {, return, false, ;, }, if, (, this, ., autoSort, !=]
[(, this, ., maximumItemCount, !=, that, ., maximumItemCount, ), {, return, false, ;, }, if, (, this, ., autoSort, !=]
[., maximumItemCount, ), {, return, false, ;, }, if, (, this, ., autoSort, !=, that, ., autoSort, ), {, return]
[false, ;, }, if, (, this, ., autoSort, !=, that, ., autoSort, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., autoSort, !=, that, ., autoSort, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., autoSort, !=, that, ., autoSort, ), {, return, false, ;, }, if, (]
[(, this, ., autoSort, !=, that, ., autoSort, ), {, return, false, ;, }, if, (, this, ., allowDuplicateXValues, !=]
[(, this, ., autoSort, !=, that, ., autoSort, ), {, return, false, ;, }, if, (, this, ., allowDuplicateXValues, !=]
[., autoSort, ), {, return, false, ;, }, if, (, this, ., allowDuplicateXValues, !=, that, ., allowDuplicateXValues, ), {, return]
[false, ;, }, if, (, this, ., allowDuplicateXValues, !=, that, ., allowDuplicateXValues, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., allowDuplicateXValues, !=, that, ., allowDuplicateXValues, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., allowDuplicateXValues, !=, that, ., allowDuplicateXValues, ), {, return, false, ;, }, if, (, !]
[this, ., allowDuplicateXValues, !=, that, ., allowDuplicateXValues, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[this, ., allowDuplicateXValues, !=, that, ., allowDuplicateXValues, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[that, ., allowDuplicateXValues, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., data, ,]
[that, ., allowDuplicateXValues, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., data, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., data, ,, that, ., data, ), ), {, return]
[!, ObjectUtilities, ., equal, (, this, ., data, ,, that, ., data, ), ), {, return, false, ;, }, return]
[), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =]
[), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =]
[;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, int, count, =]
[), {, int, result, =, super, ., hashCode, (, ), ;, int, count, =, getItemCount, (, ), ;, if, (]
[), {, int, result, =, super, ., hashCode, (, ), ;, int, count, =, getItemCount, (, ), ;, if, (]
[int, result, =, super, ., hashCode, (, ), ;, int, count, =, getItemCount, (, ), ;, if, (, count, >]
[(, ), ;, int, count, =, getItemCount, (, ), ;, if, (, count, >, 0, ), {, XYDataItem, item, =]
[;, int, count, =, getItemCount, (, ), ;, if, (, count, >, 0, ), {, XYDataItem, item, =, getRawDataItem, (]
[=, getItemCount, (, ), ;, if, (, count, >, 0, ), {, XYDataItem, item, =, getRawDataItem, (, 0, ), ;]
[(, ), ;, if, (, count, >, 0, ), {, XYDataItem, item, =, getRawDataItem, (, 0, ), ;, result, =]
[(, ), ;, if, (, count, >, 0, ), {, XYDataItem, item, =, getRawDataItem, (, 0, ), ;, result, =]
[(, ), ;, if, (, count, >, 0, ), {, XYDataItem, item, =, getRawDataItem, (, 0, ), ;, result, =]
[;, if, (, count, >, 0, ), {, XYDataItem, item, =, getRawDataItem, (, 0, ), ;, result, =, 29, *]
[(, count, >, 0, ), {, XYDataItem, item, =, getRawDataItem, (, 0, ), ;, result, =, 29, *, result, +]
[(, count, >, 0, ), {, XYDataItem, item, =, getRawDataItem, (, 0, ), ;, result, =, 29, *, result, +]
[getRawDataItem, (, 0, ), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (]
[getRawDataItem, (, 0, ), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (]
[0, ), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (, count, >]
[*, result, +, item, ., hashCode, (, ), ;, }, if, (, count, >, 1, ), {, XYDataItem, item, =]
[+, item, ., hashCode, (, ), ;, }, if, (, count, >, 1, ), {, XYDataItem, item, =, getRawDataItem, (]
[+, item, ., hashCode, (, ), ;, }, if, (, count, >, 1, ), {, XYDataItem, item, =, getRawDataItem, (]
[., hashCode, (, ), ;, }, if, (, count, >, 1, ), {, XYDataItem, item, =, getRawDataItem, (, count, -]
[), ;, }, if, (, count, >, 1, ), {, XYDataItem, item, =, getRawDataItem, (, count, -, 1, ), ;]
[}, if, (, count, >, 1, ), {, XYDataItem, item, =, getRawDataItem, (, count, -, 1, ), ;, result, =]
[}, if, (, count, >, 1, ), {, XYDataItem, item, =, getRawDataItem, (, count, -, 1, ), ;, result, =]
[}, if, (, count, >, 1, ), {, XYDataItem, item, =, getRawDataItem, (, count, -, 1, ), ;, result, =]
[(, count, >, 1, ), {, XYDataItem, item, =, getRawDataItem, (, count, -, 1, ), ;, result, =, 29, *]
[>, 1, ), {, XYDataItem, item, =, getRawDataItem, (, count, -, 1, ), ;, result, =, 29, *, result, +]
[>, 1, ), {, XYDataItem, item, =, getRawDataItem, (, count, -, 1, ), ;, result, =, 29, *, result, +]
[count, -, 1, ), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (]
[count, -, 1, ), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (]
[1, ), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (, count, >]
[*, result, +, item, ., hashCode, (, ), ;, }, if, (, count, >, 2, ), {, XYDataItem, item, =]
[+, item, ., hashCode, (, ), ;, }, if, (, count, >, 2, ), {, XYDataItem, item, =, getRawDataItem, (]
[+, item, ., hashCode, (, ), ;, }, if, (, count, >, 2, ), {, XYDataItem, item, =, getRawDataItem, (]
[., hashCode, (, ), ;, }, if, (, count, >, 2, ), {, XYDataItem, item, =, getRawDataItem, (, count, /]
[), ;, }, if, (, count, >, 2, ), {, XYDataItem, item, =, getRawDataItem, (, count, /, 2, ), ;]
[}, if, (, count, >, 2, ), {, XYDataItem, item, =, getRawDataItem, (, count, /, 2, ), ;, result, =]
[}, if, (, count, >, 2, ), {, XYDataItem, item, =, getRawDataItem, (, count, /, 2, ), ;, result, =]
[}, if, (, count, >, 2, ), {, XYDataItem, item, =, getRawDataItem, (, count, /, 2, ), ;, result, =]
[(, count, >, 2, ), {, XYDataItem, item, =, getRawDataItem, (, count, /, 2, ), ;, result, =, 29, *]
[>, 2, ), {, XYDataItem, item, =, getRawDataItem, (, count, /, 2, ), ;, result, =, 29, *, result, +]
[>, 2, ), {, XYDataItem, item, =, getRawDataItem, (, count, /, 2, ), ;, result, =, 29, *, result, +]
[getRawDataItem, (, count, /, 2, ), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }]
[count, /, 2, ), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, result, =]
[count, /, 2, ), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, result, =]
[count, /, 2, ), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, result, =]
[2, ), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, result, =, 29, *]
[;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, result, =, 29, *, result, +]
[;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, result, =, 29, *, result, +]
[*, result, +, item, ., hashCode, (, ), ;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;]
[+, item, ., hashCode, (, ), ;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;, result, =]
[+, item, ., hashCode, (, ), ;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;, result, =]
[+, item, ., hashCode, (, ), ;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;, result, =]
[., hashCode, (, ), ;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;, result, =, 29, *]
[(, ), ;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;, result, =, 29, *, result, +]
[), ;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;, result, =, 29, *, result, +, (]
[), ;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;, result, =, 29, *, result, +, (]
[), ;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;, result, =, 29, *, result, +, (]
[=, 29, *, result, +, this, ., maximumItemCount, ;, result, =, 29, *, result, +, (, this, ., autoSort, ?]
[*, result, +, this, ., maximumItemCount, ;, result, =, 29, *, result, +, (, this, ., autoSort, ?, 1, :]
[this, ., maximumItemCount, ;, result, =, 29, *, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;]
[maximumItemCount, ;, result, =, 29, *, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =]
[maximumItemCount, ;, result, =, 29, *, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =]
[maximumItemCount, ;, result, =, 29, *, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =]
[result, =, 29, *, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =, 29, *]
[29, *, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =, 29, *, result, +]
[*, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =, 29, *, result, +, (]
[*, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =, 29, *, result, +, (]
[*, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =, 29, *, result, +, (]
[this, ., autoSort, ?, 1, :, 0, ), ;, result, =, 29, *, result, +, (, this, ., allowDuplicateXValues, ?]
[autoSort, ?, 1, :, 0, ), ;, result, =, 29, *, result, +, (, this, ., allowDuplicateXValues, ?, 1, :]
[0, ), ;, result, =, 29, *, result, +, (, this, ., allowDuplicateXValues, ?, 1, :, 0, ), ;, return]
