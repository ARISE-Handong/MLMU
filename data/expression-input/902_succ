[=, hyperplane, ;, this, ., remainingRegion, =, remainingRegion, ;, }, protected, abstract, AbstractSubHyperplane, <, S, ,, T, >, buildNew, (]
[., hyperplane, =, hyperplane, ;, this, ., remainingRegion, =, remainingRegion, ;, }, protected, abstract, AbstractSubHyperplane, <, S, ,, T, >]
[;, this, ., remainingRegion, =, remainingRegion, ;, }, protected, abstract, AbstractSubHyperplane, <, S, ,, T, >, buildNew, (, final, Hyperplane]
[=, remainingRegion, ;, }, protected, abstract, AbstractSubHyperplane, <, S, ,, T, >, buildNew, (, final, Hyperplane, <, S, >, hyper]
[., remainingRegion, =, remainingRegion, ;, }, protected, abstract, AbstractSubHyperplane, <, S, ,, T, >, buildNew, (, final, Hyperplane, <, S]
[;, }, protected, abstract, AbstractSubHyperplane, <, S, ,, T, >, buildNew, (, final, Hyperplane, <, S, >, hyper, ,, final]
[;, }, public, Hyperplane, <, S, >, getHyperplane, (, ), {, return, hyperplane, ;, }, public, Region, <, T, >]
[,, remainingRegion, ), ;, }, public, Hyperplane, <, S, >, getHyperplane, (, ), {, return, hyperplane, ;, }, public, Region]
[), ;, }, public, Hyperplane, <, S, >, getHyperplane, (, ), {, return, hyperplane, ;, }, public, Region, <, T]
[;, }, public, Region, <, T, >, getRemainingRegion, (, ), {, return, remainingRegion, ;, }, public, double, getSize, (, )]
[;, }, public, double, getSize, (, ), {, return, remainingRegion, ., getSize, (, ), ;, }, public, AbstractSubHyperplane, <, S]
[;, }, public, AbstractSubHyperplane, <, S, ,, T, >, reunite, (, final, SubHyperplane, <, S, >, other, ), {, @]
[., getSize, (, ), ;, }, public, AbstractSubHyperplane, <, S, ,, T, >, reunite, (, final, SubHyperplane, <, S, >]
[AbstractSubHyperplane, <, S, ,, T, >, o, =, (, AbstractSubHyperplane, <, S, ,, T, >, ), other, ;, return, buildNew]
[), AbstractSubHyperplane, <, S, ,, T, >, o, =, (, AbstractSubHyperplane, <, S, ,, T, >, ), other, ;, return]
[;, return, buildNew, (, hyperplane, ,, new, RegionFactory, <, T, >, (, ), ., union, (, remainingRegion, ,, o, .]
[;, return, buildNew, (, hyperplane, ,, new, RegionFactory, <, T, >, (, ), ., union, (, remainingRegion, ,, o, .]
[;, }, public, AbstractSubHyperplane, <, S, ,, T, >, applyTransform, (, final, Transform, <, S, ,, T, >, transform, )]
[,, new, RegionFactory, <, T, >, (, ), ., union, (, remainingRegion, ,, o, ., remainingRegion, ), ), ;, }]
[), ;, }, public, AbstractSubHyperplane, <, S, ,, T, >, applyTransform, (, final, Transform, <, S, ,, T, >, transform]
[., union, (, remainingRegion, ,, o, ., remainingRegion, ), ), ;, }, public, AbstractSubHyperplane, <, S, ,, T, >, applyTransform]
[,, o, ., remainingRegion, ), ), ;, }, public, AbstractSubHyperplane, <, S, ,, T, >, applyTransform, (, final, Transform, <]
[), ), ;, }, public, AbstractSubHyperplane, <, S, ,, T, >, applyTransform, (, final, Transform, <, S, ,, T, >]
[., remainingRegion, ), ), ;, }, public, AbstractSubHyperplane, <, S, ,, T, >, applyTransform, (, final, Transform, <, S, ,]
[;, final, BSPTree, <, T, >, tTree, =, recurseTransform, (, remainingRegion, ., getTree, (, false, ), ,, tHyperplane, ,, transform]
[., apply, (, hyperplane, ), ;, final, BSPTree, <, T, >, tTree, =, recurseTransform, (, remainingRegion, ., getTree, (, false]
[), ;, final, BSPTree, <, T, >, tTree, =, recurseTransform, (, remainingRegion, ., getTree, (, false, ), ,, tHyperplane, ,]
[;, return, buildNew, (, tHyperplane, ,, remainingRegion, ., buildNew, (, tTree, ), ), ;, }, private, BSPTree, <, T, >]
[,, tHyperplane, ,, transform, ), ;, return, buildNew, (, tHyperplane, ,, remainingRegion, ., buildNew, (, tTree, ), ), ;, }]
[., getTree, (, false, ), ,, tHyperplane, ,, transform, ), ;, return, buildNew, (, tHyperplane, ,, remainingRegion, ., buildNew, (]
[), ,, tHyperplane, ,, transform, ), ;, return, buildNew, (, tHyperplane, ,, remainingRegion, ., buildNew, (, tTree, ), ), ;]
[,, transform, ), ;, return, buildNew, (, tHyperplane, ,, remainingRegion, ., buildNew, (, tTree, ), ), ;, }, private, BSPTree]
[), ;, return, buildNew, (, tHyperplane, ,, remainingRegion, ., buildNew, (, tTree, ), ), ;, }, private, BSPTree, <, T]
[;, }, private, BSPTree, <, T, >, recurseTransform, (, final, BSPTree, <, T, >, node, ,, final, Hyperplane, <, S]
[,, remainingRegion, ., buildNew, (, tTree, ), ), ;, }, private, BSPTree, <, T, >, recurseTransform, (, final, BSPTree, <]
[), ;, }, private, BSPTree, <, T, >, recurseTransform, (, final, BSPTree, <, T, >, node, ,, final, Hyperplane, <]
[., buildNew, (, tTree, ), ), ;, }, private, BSPTree, <, T, >, recurseTransform, (, final, BSPTree, <, T, >]
[), ), ;, }, private, BSPTree, <, T, >, recurseTransform, (, final, BSPTree, <, T, >, node, ,, final, Hyperplane]
[), {, return, new, BSPTree, <, T, >, (, node, ., getAttribute, (, ), ), ;, }, @, SuppressWarnings, (]
[==, null, ), {, return, new, BSPTree, <, T, >, (, node, ., getAttribute, (, ), ), ;, }, @]
[., getCut, (, ), ==, null, ), {, return, new, BSPTree, <, T, >, (, node, ., getAttribute, (, )]
[), {, return, new, BSPTree, <, T, >, (, node, ., getAttribute, (, ), ), ;, }, @, SuppressWarnings, (]
[;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, T, >, attribute, =, (, BoundaryAttribute, <, T, >, ), node]
[), ;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, T, >, attribute, =, (, BoundaryAttribute, <, T, >, )]
[., getAttribute, (, ), ), ;, }, @, SuppressWarnings, (, "unchecked", ), BoundaryAttribute, <, T, >, attribute, =, (, BoundaryAttribute]
[BoundaryAttribute, <, T, >, attribute, =, (, BoundaryAttribute, <, T, >, ), node, ., getAttribute, (, ), ;, if, (]
[), BoundaryAttribute, <, T, >, attribute, =, (, BoundaryAttribute, <, T, >, ), node, ., getAttribute, (, ), ;, if]
[;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, T, >, tPO, =, (, attribute, ., getPlusOutside, (]
[;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, T, >, tPO, =, (, attribute, ., getPlusOutside, (]
[., getAttribute, (, ), ;, if, (, attribute, !=, null, ), {, final, SubHyperplane, <, T, >, tPO, =, (]
[), {, final, SubHyperplane, <, T, >, tPO, =, (, attribute, ., getPlusOutside, (, ), ==, null, ), ?, null]
[!=, null, ), {, final, SubHyperplane, <, T, >, tPO, =, (, attribute, ., getPlusOutside, (, ), ==, null, )]
[), {, final, SubHyperplane, <, T, >, tPO, =, (, attribute, ., getPlusOutside, (, ), ==, null, ), ?, null]
[;, final, SubHyperplane, <, T, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==, null, ), ?, null, :]
[?, null, :, transform, ., apply, (, attribute, ., getPlusOutside, (, ), ,, hyperplane, ,, transformed, ), ;, final, SubHyperplane]
[), ?, null, :, transform, ., apply, (, attribute, ., getPlusOutside, (, ), ,, hyperplane, ,, transformed, ), ;, final]
[==, null, ), ?, null, :, transform, ., apply, (, attribute, ., getPlusOutside, (, ), ,, hyperplane, ,, transformed, )]
[., getPlusOutside, (, ), ==, null, ), ?, null, :, transform, ., apply, (, attribute, ., getPlusOutside, (, ), ,]
[), ?, null, :, transform, ., apply, (, attribute, ., getPlusOutside, (, ), ,, hyperplane, ,, transformed, ), ;, final]
[:, transform, ., apply, (, attribute, ., getPlusOutside, (, ), ,, hyperplane, ,, transformed, ), ;, final, SubHyperplane, <, T]
[;, final, SubHyperplane, <, T, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==, null, ), ?, null, :]
[., apply, (, attribute, ., getPlusOutside, (, ), ,, hyperplane, ,, transformed, ), ;, final, SubHyperplane, <, T, >, tPI]
[,, hyperplane, ,, transformed, ), ;, final, SubHyperplane, <, T, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==]
[., getPlusOutside, (, ), ,, hyperplane, ,, transformed, ), ;, final, SubHyperplane, <, T, >, tPI, =, (, attribute, .]
[,, transformed, ), ;, final, SubHyperplane, <, T, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==, null, )]
[), ;, final, SubHyperplane, <, T, >, tPI, =, (, attribute, ., getPlusInside, (, ), ==, null, ), ?, null]
[;, attribute, =, new, BoundaryAttribute, <, T, >, (, tPO, ,, tPI, ), ;, }, return, new, BSPTree, <, T]
[?, null, :, transform, ., apply, (, attribute, ., getPlusInside, (, ), ,, hyperplane, ,, transformed, ), ;, attribute, =]
[), ?, null, :, transform, ., apply, (, attribute, ., getPlusInside, (, ), ,, hyperplane, ,, transformed, ), ;, attribute]
[==, null, ), ?, null, :, transform, ., apply, (, attribute, ., getPlusInside, (, ), ,, hyperplane, ,, transformed, )]
[., getPlusInside, (, ), ==, null, ), ?, null, :, transform, ., apply, (, attribute, ., getPlusInside, (, ), ,]
[), ?, null, :, transform, ., apply, (, attribute, ., getPlusInside, (, ), ,, hyperplane, ,, transformed, ), ;, attribute]
[:, transform, ., apply, (, attribute, ., getPlusInside, (, ), ,, hyperplane, ,, transformed, ), ;, attribute, =, new, BoundaryAttribute]
[;, attribute, =, new, BoundaryAttribute, <, T, >, (, tPO, ,, tPI, ), ;, }, return, new, BSPTree, <, T]
[., apply, (, attribute, ., getPlusInside, (, ), ,, hyperplane, ,, transformed, ), ;, attribute, =, new, BoundaryAttribute, <, T]
[,, hyperplane, ,, transformed, ), ;, attribute, =, new, BoundaryAttribute, <, T, >, (, tPO, ,, tPI, ), ;, }]
[., getPlusInside, (, ), ,, hyperplane, ,, transformed, ), ;, attribute, =, new, BoundaryAttribute, <, T, >, (, tPO, ,]
[,, transformed, ), ;, attribute, =, new, BoundaryAttribute, <, T, >, (, tPO, ,, tPI, ), ;, }, return, new]
[), ;, attribute, =, new, BoundaryAttribute, <, T, >, (, tPO, ,, tPI, ), ;, }, return, new, BSPTree, <]
[=, new, BoundaryAttribute, <, T, >, (, tPO, ,, tPI, ), ;, }, return, new, BSPTree, <, T, >, (]
[;, }, return, new, BSPTree, <, T, >, (, transform, ., apply, (, node, ., getCut, (, ), ,, hyperplane]
[,, tPI, ), ;, }, return, new, BSPTree, <, T, >, (, transform, ., apply, (, node, ., getCut, (]
[), ;, }, return, new, BSPTree, <, T, >, (, transform, ., apply, (, node, ., getCut, (, ), ,]
[;, }, public, abstract, Side, side, (, Hyperplane, <, S, >, hyper, ), ;, public, abstract, SplitSubHyperplane, <, S, >]
[,, recurseTransform, (, node, ., getPlus, (, ), ,, transformed, ,, transform, ), ,, recurseTransform, (, node, ., getMinus, (]
[., apply, (, node, ., getCut, (, ), ,, hyperplane, ,, transformed, ), ,, recurseTransform, (, node, ., getPlus, (]
[,, hyperplane, ,, transformed, ), ,, recurseTransform, (, node, ., getPlus, (, ), ,, transformed, ,, transform, ), ,, recurseTransform]
[., getCut, (, ), ,, hyperplane, ,, transformed, ), ,, recurseTransform, (, node, ., getPlus, (, ), ,, transformed, ,]
[,, transformed, ), ,, recurseTransform, (, node, ., getPlus, (, ), ,, transformed, ,, transform, ), ,, recurseTransform, (, node]
[), ,, recurseTransform, (, node, ., getPlus, (, ), ,, transformed, ,, transform, ), ,, recurseTransform, (, node, ., getMinus]
[,, recurseTransform, (, node, ., getMinus, (, ), ,, transformed, ,, transform, ), ,, attribute, ), ;, }, public, abstract]
[,, transformed, ,, transform, ), ,, recurseTransform, (, node, ., getMinus, (, ), ,, transformed, ,, transform, ), ,, attribute]
[., getPlus, (, ), ,, transformed, ,, transform, ), ,, recurseTransform, (, node, ., getMinus, (, ), ,, transformed, ,]
[,, transform, ), ,, recurseTransform, (, node, ., getMinus, (, ), ,, transformed, ,, transform, ), ,, attribute, ), ;]
[), ,, recurseTransform, (, node, ., getMinus, (, ), ,, transformed, ,, transform, ), ,, attribute, ), ;, }, public]
[,, attribute, ), ;, }, public, abstract, Side, side, (, Hyperplane, <, S, >, hyper, ), ;, public, abstract, SplitSubHyperplane]
[,, transformed, ,, transform, ), ,, attribute, ), ;, }, public, abstract, Side, side, (, Hyperplane, <, S, >, hyper]
[., getMinus, (, ), ,, transformed, ,, transform, ), ,, attribute, ), ;, }, public, abstract, Side, side, (, Hyperplane]
[,, transform, ), ,, attribute, ), ;, }, public, abstract, Side, side, (, Hyperplane, <, S, >, hyper, ), ;]
[), ,, attribute, ), ;, }, public, abstract, Side, side, (, Hyperplane, <, S, >, hyper, ), ;, public, abstract]
[), ;, }, public, abstract, Side, side, (, Hyperplane, <, S, >, hyper, ), ;, public, abstract, SplitSubHyperplane, <, S]
[;, }, }]
[., isEmpty, (, ), ;, }, }]
