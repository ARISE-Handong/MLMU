[;, private, List, list, ;, private, HistogramType, type, ;, public, HistogramDataset, (, ), {, this, ., list, =, new, ArrayList]
[;, private, List, list, ;, private, HistogramType, type, ;, public, HistogramDataset, (, ), {, this, ., list, =, new, ArrayList]
[=, new, ArrayList, (, ), ;, this, ., type, =, HistogramType, ., FREQUENCY, ;, }, public, HistogramType, getType, (, )]
[., list, =, new, ArrayList, (, ), ;, this, ., type, =, HistogramType, ., FREQUENCY, ;, }, public, HistogramType, getType]
[;, this, ., type, =, HistogramType, ., FREQUENCY, ;, }, public, HistogramType, getType, (, ), {, return, this, ., type]
[=, HistogramType, ., FREQUENCY, ;, }, public, HistogramType, getType, (, ), {, return, this, ., type, ;, }, public, void]
[., type, =, HistogramType, ., FREQUENCY, ;, }, public, HistogramType, getType, (, ), {, return, this, ., type, ;, }]
[;, }, public, HistogramType, getType, (, ), {, return, this, ., type, ;, }, public, void, setType, (, HistogramType, type]
[., FREQUENCY, ;, }, public, HistogramType, getType, (, ), {, return, this, ., type, ;, }, public, void, setType, (]
[;, }, public, void, setType, (, HistogramType, type, ), {, if, (, type, ==, null, ), {, throw, new, IllegalArgumentException]
[., type, ;, }, public, void, setType, (, HistogramType, type, ), {, if, (, type, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'type' argument", ), ;, }, this, ., type, =, type, ;, fireDatasetChanged, (, new, DatasetChangeInfo]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'type' argument", ), ;, }, this, ., type, =, type, ;, fireDatasetChanged, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'type' argument", ), ;, }, this, ., type, =, type, ;, fireDatasetChanged, (, new, DatasetChangeInfo]
[;, }, this, ., type, =, type, ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, addSeries]
[), ;, }, this, ., type, =, type, ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void]
[=, type, ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, addSeries, (, Comparable, key, ,, double]
[., type, =, type, ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, addSeries, (, Comparable, key]
[;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, addSeries, (, Comparable, key, ,, double, [, ]]
[;, }, public, void, addSeries, (, Comparable, key, ,, double, [, ], values, ,, int, bins, ), {, double, minimum]
[), ;, }, public, void, addSeries, (, Comparable, key, ,, double, [, ], values, ,, int, bins, ), {, double]
[;, double, maximum, =, getMaximum, (, values, ), ;, addSeries, (, key, ,, values, ,, bins, ,, minimum, ,, maximum]
[), ;, double, maximum, =, getMaximum, (, values, ), ;, addSeries, (, key, ,, values, ,, bins, ,, minimum, ,]
[;, addSeries, (, key, ,, values, ,, bins, ,, minimum, ,, maximum, ), ;, }, public, void, addSeries, (, Comparable]
[), ;, addSeries, (, key, ,, values, ,, bins, ,, minimum, ,, maximum, ), ;, }, public, void, addSeries, (]
[;, }, public, void, addSeries, (, Comparable, key, ,, double, [, ], values, ,, int, bins, ,, double, minimum, ,]
[,, values, ,, bins, ,, minimum, ,, maximum, ), ;, }, public, void, addSeries, (, Comparable, key, ,, double, []
[,, bins, ,, minimum, ,, maximum, ), ;, }, public, void, addSeries, (, Comparable, key, ,, double, [, ], values]
[,, minimum, ,, maximum, ), ;, }, public, void, addSeries, (, Comparable, key, ,, double, [, ], values, ,, int]
[,, maximum, ), ;, }, public, void, addSeries, (, Comparable, key, ,, double, [, ], values, ,, int, bins, ,]
[), ;, }, public, void, addSeries, (, Comparable, key, ,, double, [, ], values, ,, int, bins, ,, double, minimum]
[), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, if, (, values, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException]
[;, }, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, else, if, (]
[), ;, }, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, else, if]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, else, if, (, bins, <, 1, ), {, throw, new]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, else, if, (, bins, <, 1, ), {]
[), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, else, if, (, bins, <, 1, ), {, throw, new]
[;, }, else, if, (, bins, <, 1, ), {, throw, new, IllegalArgumentException, (, "The 'bins' value must be at least 1.", ), ;, }, double, binWidth]
[), ;, }, else, if, (, bins, <, 1, ), {, throw, new, IllegalArgumentException, (, "The 'bins' value must be at least 1.", ), ;, }, double]
[), {, throw, new, IllegalArgumentException, (, "The 'bins' value must be at least 1.", ), ;, }, double, binWidth, =, (, maximum, -, minimum, ), /, bins]
[<, 1, ), {, throw, new, IllegalArgumentException, (, "The 'bins' value must be at least 1.", ), ;, }, double, binWidth, =, (, maximum, -, minimum, )]
[), {, throw, new, IllegalArgumentException, (, "The 'bins' value must be at least 1.", ), ;, }, double, binWidth, =, (, maximum, -, minimum, ), /, bins]
[;, }, double, binWidth, =, (, maximum, -, minimum, ), /, bins, ;, double, lower, =, minimum, ;, double, upper]
[), ;, }, double, binWidth, =, (, maximum, -, minimum, ), /, bins, ;, double, lower, =, minimum, ;, double]
[;, double, lower, =, minimum, ;, double, upper, ;, List, binList, =, new, ArrayList, (, bins, ), ;, for, (]
[/, bins, ;, double, lower, =, minimum, ;, double, upper, ;, List, binList, =, new, ArrayList, (, bins, ), ;]
[), /, bins, ;, double, lower, =, minimum, ;, double, upper, ;, List, binList, =, new, ArrayList, (, bins, )]
[-, minimum, ), /, bins, ;, double, lower, =, minimum, ;, double, upper, ;, List, binList, =, new, ArrayList, (]
[), /, bins, ;, double, lower, =, minimum, ;, double, upper, ;, List, binList, =, new, ArrayList, (, bins, )]
[;, double, lower, =, minimum, ;, double, upper, ;, List, binList, =, new, ArrayList, (, bins, ), ;, for, (]
[;, double, upper, ;, List, binList, =, new, ArrayList, (, bins, ), ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, bins, ;, i, ++, ), {, HistogramBin, bin, ;, if]
[), ;, for, (, int, i, =, 0, ;, i, <, bins, ;, i, ++, ), {, HistogramBin, bin, ;]
[;, i, <, bins, ;, i, ++, ), {, HistogramBin, bin, ;, if, (, i, ==, bins, -, 1, )]
[;, i, ++, ), {, HistogramBin, bin, ;, if, (, i, ==, bins, -, 1, ), {, bin, =, new]
[<, bins, ;, i, ++, ), {, HistogramBin, bin, ;, if, (, i, ==, bins, -, 1, ), {, bin]
[;, i, ++, ), {, HistogramBin, bin, ;, if, (, i, ==, bins, -, 1, ), {, bin, =, new]
[), {, HistogramBin, bin, ;, if, (, i, ==, bins, -, 1, ), {, bin, =, new, HistogramBin, (, lower]
[++, ), {, HistogramBin, bin, ;, if, (, i, ==, bins, -, 1, ), {, bin, =, new, HistogramBin, (]
[), {, bin, =, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper, =, minimum, +, (]
[==, bins, -, 1, ), {, bin, =, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper]
[), {, bin, =, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper, =, minimum, +, (]
[-, 1, ), {, bin, =, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper, =, minimum]
[), {, bin, =, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper, =, minimum, +, (]
[=, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper, =, minimum, +, (, i, +, 1]
[;, }, else, {, upper, =, minimum, +, (, i, +, 1, ), *, binWidth, ;, bin, =, new, HistogramBin]
[,, maximum, ), ;, }, else, {, upper, =, minimum, +, (, i, +, 1, ), *, binWidth, ;, bin]
[), ;, }, else, {, upper, =, minimum, +, (, i, +, 1, ), *, binWidth, ;, bin, =, new]
[=, minimum, +, (, i, +, 1, ), *, binWidth, ;, bin, =, new, HistogramBin, (, lower, ,, upper, )]
[;, bin, =, new, HistogramBin, (, lower, ,, upper, ), ;, lower, =, upper, ;, }, binList, ., add, (]
[+, (, i, +, 1, ), *, binWidth, ;, bin, =, new, HistogramBin, (, lower, ,, upper, ), ;, lower]
[;, bin, =, new, HistogramBin, (, lower, ,, upper, ), ;, lower, =, upper, ;, }, binList, ., add, (]
[*, binWidth, ;, bin, =, new, HistogramBin, (, lower, ,, upper, ), ;, lower, =, upper, ;, }, binList, .]
[), *, binWidth, ;, bin, =, new, HistogramBin, (, lower, ,, upper, ), ;, lower, =, upper, ;, }, binList]
[+, 1, ), *, binWidth, ;, bin, =, new, HistogramBin, (, lower, ,, upper, ), ;, lower, =, upper, ;]
[), *, binWidth, ;, bin, =, new, HistogramBin, (, lower, ,, upper, ), ;, lower, =, upper, ;, }, binList]
[;, bin, =, new, HistogramBin, (, lower, ,, upper, ), ;, lower, =, upper, ;, }, binList, ., add, (]
[=, new, HistogramBin, (, lower, ,, upper, ), ;, lower, =, upper, ;, }, binList, ., add, (, bin, )]
[;, lower, =, upper, ;, }, binList, ., add, (, bin, ), ;, }, for, (, int, i, =, 0]
[,, upper, ), ;, lower, =, upper, ;, }, binList, ., add, (, bin, ), ;, }, for, (, int]
[), ;, lower, =, upper, ;, }, binList, ., add, (, bin, ), ;, }, for, (, int, i, =]
[=, upper, ;, }, binList, ., add, (, bin, ), ;, }, for, (, int, i, =, 0, ;, i]
[;, }, binList, ., add, (, bin, ), ;, }, for, (, int, i, =, 0, ;, i, <, values]
[;, }, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, int]
[., add, (, bin, ), ;, }, for, (, int, i, =, 0, ;, i, <, values, ., length, ;]
[), ;, }, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {]
[;, i, <, values, ., length, ;, i, ++, ), {, int, binIndex, =, bins, -, 1, ;, if, (]
[;, i, ++, ), {, int, binIndex, =, bins, -, 1, ;, if, (, values, [, i, ], <, maximum]
[<, values, ., length, ;, i, ++, ), {, int, binIndex, =, bins, -, 1, ;, if, (, values, []
[;, i, ++, ), {, int, binIndex, =, bins, -, 1, ;, if, (, values, [, i, ], <, maximum]
[., length, ;, i, ++, ), {, int, binIndex, =, bins, -, 1, ;, if, (, values, [, i, ]]
[), {, int, binIndex, =, bins, -, 1, ;, if, (, values, [, i, ], <, maximum, ), {, double]
[++, ), {, int, binIndex, =, bins, -, 1, ;, if, (, values, [, i, ], <, maximum, ), {]
[;, if, (, values, [, i, ], <, maximum, ), {, double, fraction, =, (, values, [, i, ], -]
[-, 1, ;, if, (, values, [, i, ], <, maximum, ), {, double, fraction, =, (, values, [, i]
[;, if, (, values, [, i, ], <, maximum, ), {, double, fraction, =, (, values, [, i, ], -]
[), {, double, fraction, =, (, values, [, i, ], -, minimum, ), /, (, maximum, -, minimum, ), ;]
[<, maximum, ), {, double, fraction, =, (, values, [, i, ], -, minimum, ), /, (, maximum, -, minimum]
[[, i, ], <, maximum, ), {, double, fraction, =, (, values, [, i, ], -, minimum, ), /, (]
[], <, maximum, ), {, double, fraction, =, (, values, [, i, ], -, minimum, ), /, (, maximum, -]
[), {, double, fraction, =, (, values, [, i, ], -, minimum, ), /, (, maximum, -, minimum, ), ;]
[;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }, binIndex, =, (, int, ), (, fraction]
[/, (, maximum, -, minimum, ), ;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }, binIndex]
[), /, (, maximum, -, minimum, ), ;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }]
[-, minimum, ), /, (, maximum, -, minimum, ), ;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0]
[[, i, ], -, minimum, ), /, (, maximum, -, minimum, ), ;, if, (, fraction, <, 0.0, ), {]
[], -, minimum, ), /, (, maximum, -, minimum, ), ;, if, (, fraction, <, 0.0, ), {, fraction, =]
[), /, (, maximum, -, minimum, ), ;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }]
[;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }, binIndex, =, (, int, ), (, fraction]
[), ;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }, binIndex, =, (, int, ), (]
[-, minimum, ), ;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }, binIndex, =, (, int]
[), ;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }, binIndex, =, (, int, ), (]
[), {, fraction, =, 0.0, ;, }, binIndex, =, (, int, ), (, fraction, *, bins, ), ;, if, (]
[<, 0.0, ), {, fraction, =, 0.0, ;, }, binIndex, =, (, int, ), (, fraction, *, bins, ), ;]
[), {, fraction, =, 0.0, ;, }, binIndex, =, (, int, ), (, fraction, *, bins, ), ;, if, (]
[=, 0.0, ;, }, binIndex, =, (, int, ), (, fraction, *, bins, ), ;, if, (, binIndex, >=, bins]
[;, }, binIndex, =, (, int, ), (, fraction, *, bins, ), ;, if, (, binIndex, >=, bins, ), {]
[=, (, int, ), (, fraction, *, bins, ), ;, if, (, binIndex, >=, bins, ), {, binIndex, =, bins]
[;, if, (, binIndex, >=, bins, ), {, binIndex, =, bins, -, 1, ;, }, }, HistogramBin, bin, =, (]
[;, if, (, binIndex, >=, bins, ), {, binIndex, =, bins, -, 1, ;, }, }, HistogramBin, bin, =, (]
[), ;, if, (, binIndex, >=, bins, ), {, binIndex, =, bins, -, 1, ;, }, }, HistogramBin, bin, =]
[*, bins, ), ;, if, (, binIndex, >=, bins, ), {, binIndex, =, bins, -, 1, ;, }, }, HistogramBin]
[), ;, if, (, binIndex, >=, bins, ), {, binIndex, =, bins, -, 1, ;, }, }, HistogramBin, bin, =]
[), {, binIndex, =, bins, -, 1, ;, }, }, HistogramBin, bin, =, (, HistogramBin, ), binList, ., get, (]
[>=, bins, ), {, binIndex, =, bins, -, 1, ;, }, }, HistogramBin, bin, =, (, HistogramBin, ), binList, .]
[), {, binIndex, =, bins, -, 1, ;, }, }, HistogramBin, bin, =, (, HistogramBin, ), binList, ., get, (]
[=, bins, -, 1, ;, }, }, HistogramBin, bin, =, (, HistogramBin, ), binList, ., get, (, binIndex, ), ;]
[;, }, }, HistogramBin, bin, =, (, HistogramBin, ), binList, ., get, (, binIndex, ), ;, bin, ., incrementCount, (]
[-, 1, ;, }, }, HistogramBin, bin, =, (, HistogramBin, ), binList, ., get, (, binIndex, ), ;, bin, .]
[;, }, }, HistogramBin, bin, =, (, HistogramBin, ), binList, ., get, (, binIndex, ), ;, bin, ., incrementCount, (]
[;, bin, ., incrementCount, (, ), ;, }, Map, map, =, new, HashMap, (, ), ;, map, ., put, (]
[;, bin, ., incrementCount, (, ), ;, }, Map, map, =, new, HashMap, (, ), ;, map, ., put, (]
[., get, (, binIndex, ), ;, bin, ., incrementCount, (, ), ;, }, Map, map, =, new, HashMap, (, )]
[), ;, bin, ., incrementCount, (, ), ;, }, Map, map, =, new, HashMap, (, ), ;, map, ., put]
[;, }, Map, map, =, new, HashMap, (, ), ;, map, ., put, (, "key", ,, key, ), ;, map]
[., incrementCount, (, ), ;, }, Map, map, =, new, HashMap, (, ), ;, map, ., put, (, "key", ,]
[;, map, ., put, (, "key", ,, key, ), ;, map, ., put, (, "bins", ,, binList, ), ;, map]
[;, map, ., put, (, "bins", ,, binList, ), ;, map, ., put, (, "values.length", ,, new, Integer, (, values]
[., put, (, "key", ,, key, ), ;, map, ., put, (, "bins", ,, binList, ), ;, map, ., put]
[,, key, ), ;, map, ., put, (, "bins", ,, binList, ), ;, map, ., put, (, "values.length", ,, new]
[), ;, map, ., put, (, "bins", ,, binList, ), ;, map, ., put, (, "values.length", ,, new, Integer, (]
[;, map, ., put, (, "values.length", ,, new, Integer, (, values, ., length, ), ), ;, map, ., put, (]
[., put, (, "bins", ,, binList, ), ;, map, ., put, (, "values.length", ,, new, Integer, (, values, ., length]
[,, binList, ), ;, map, ., put, (, "values.length", ,, new, Integer, (, values, ., length, ), ), ;, map]
[), ;, map, ., put, (, "values.length", ,, new, Integer, (, values, ., length, ), ), ;, map, ., put]
[;, map, ., put, (, "bin width", ,, new, Double, (, binWidth, ), ), ;, this, ., list, ., add, (]
[., put, (, "values.length", ,, new, Integer, (, values, ., length, ), ), ;, map, ., put, (, "bin width", ,]
[,, new, Integer, (, values, ., length, ), ), ;, map, ., put, (, "bin width", ,, new, Double, (, binWidth]
[), ;, map, ., put, (, "bin width", ,, new, Double, (, binWidth, ), ), ;, this, ., list, ., add]
[), ), ;, map, ., put, (, "bin width", ,, new, Double, (, binWidth, ), ), ;, this, ., list, .]
[., length, ), ), ;, map, ., put, (, "bin width", ,, new, Double, (, binWidth, ), ), ;, this, .]
[;, this, ., list, ., add, (, map, ), ;, }, private, double, getMinimum, (, double, [, ], values, )]
[., put, (, "bin width", ,, new, Double, (, binWidth, ), ), ;, this, ., list, ., add, (, map, )]
[,, new, Double, (, binWidth, ), ), ;, this, ., list, ., add, (, map, ), ;, }, private, double]
[), ;, this, ., list, ., add, (, map, ), ;, }, private, double, getMinimum, (, double, [, ], values]
[), ), ;, this, ., list, ., add, (, map, ), ;, }, private, double, getMinimum, (, double, [, ]]
[;, }, private, double, getMinimum, (, double, [, ], values, ), {, if, (, values, ==, null, ||, values, .]
[., add, (, map, ), ;, }, private, double, getMinimum, (, double, [, ], values, ), {, if, (, values]
[., list, ., add, (, map, ), ;, }, private, double, getMinimum, (, double, [, ], values, ), {, if]
[), ;, }, private, double, getMinimum, (, double, [, ], values, ), {, if, (, values, ==, null, ||, values]
[), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, min, =, Double, ., MAX_VALUE, ;, for, (, int]
[||, values, ., length, <, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, min, =, Double]
[==, null, ||, values, ., length, <, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, min]
[||, values, ., length, <, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, min, =, Double]
[), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, min, =, Double, ., MAX_VALUE, ;, for, (, int]
[<, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, min, =, Double, ., MAX_VALUE, ;, for]
[., length, <, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, min, =, Double, ., MAX_VALUE]
[), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, min, =, Double, ., MAX_VALUE, ;, for, (, int]
[;, }, double, min, =, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <, values, .]
[), ;, }, double, min, =, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <, values]
[;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (]
[., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {]
[;, i, <, values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], <, min, )]
[;, i, ++, ), {, if, (, values, [, i, ], <, min, ), {, min, =, values, [, i]
[<, values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], <, min, ), {, min]
[;, i, ++, ), {, if, (, values, [, i, ], <, min, ), {, min, =, values, [, i]
[., length, ;, i, ++, ), {, if, (, values, [, i, ], <, min, ), {, min, =, values]
[), {, if, (, values, [, i, ], <, min, ), {, min, =, values, [, i, ], ;, }]
[++, ), {, if, (, values, [, i, ], <, min, ), {, min, =, values, [, i, ], ;]
[), {, min, =, values, [, i, ], ;, }, }, return, min, ;, }, private, double, getMaximum, (, double]
[<, min, ), {, min, =, values, [, i, ], ;, }, }, return, min, ;, }, private, double, getMaximum]
[[, i, ], <, min, ), {, min, =, values, [, i, ], ;, }, }, return, min, ;, }]
[], <, min, ), {, min, =, values, [, i, ], ;, }, }, return, min, ;, }, private, double]
[), {, min, =, values, [, i, ], ;, }, }, return, min, ;, }, private, double, getMaximum, (, double]
[=, values, [, i, ], ;, }, }, return, min, ;, }, private, double, getMaximum, (, double, [, ], values]
[;, }, }, return, min, ;, }, private, double, getMaximum, (, double, [, ], values, ), {, if, (, values]
[[, i, ], ;, }, }, return, min, ;, }, private, double, getMaximum, (, double, [, ], values, ), {]
[], ;, }, }, return, min, ;, }, private, double, getMaximum, (, double, [, ], values, ), {, if, (]
[;, }, private, double, getMaximum, (, double, [, ], values, ), {, if, (, values, ==, null, ||, values, .]
[), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, max, =, -, Double, ., MAX_VALUE, ;, for, (]
[||, values, ., length, <, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, max, =, -]
[==, null, ||, values, ., length, <, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, max]
[||, values, ., length, <, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, max, =, -]
[), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, max, =, -, Double, ., MAX_VALUE, ;, for, (]
[<, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, max, =, -, Double, ., MAX_VALUE, ;]
[., length, <, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, max, =, -, Double, .]
[), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, max, =, -, Double, ., MAX_VALUE, ;, for, (]
[;, }, double, max, =, -, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <, values]
[), ;, }, double, max, =, -, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (]
[., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {]
[;, i, <, values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], >, max, )]
[;, i, ++, ), {, if, (, values, [, i, ], >, max, ), {, max, =, values, [, i]
[<, values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], >, max, ), {, max]
[;, i, ++, ), {, if, (, values, [, i, ], >, max, ), {, max, =, values, [, i]
[., length, ;, i, ++, ), {, if, (, values, [, i, ], >, max, ), {, max, =, values]
[), {, if, (, values, [, i, ], >, max, ), {, max, =, values, [, i, ], ;, }]
[++, ), {, if, (, values, [, i, ], >, max, ), {, max, =, values, [, i, ], ;]
[), {, max, =, values, [, i, ], ;, }, }, return, max, ;, }, List, getBins, (, int, series]
[>, max, ), {, max, =, values, [, i, ], ;, }, }, return, max, ;, }, List, getBins, (]
[[, i, ], >, max, ), {, max, =, values, [, i, ], ;, }, }, return, max, ;, }]
[], >, max, ), {, max, =, values, [, i, ], ;, }, }, return, max, ;, }, List, getBins]
[), {, max, =, values, [, i, ], ;, }, }, return, max, ;, }, List, getBins, (, int, series]
[=, values, [, i, ], ;, }, }, return, max, ;, }, List, getBins, (, int, series, ), {, Map]
[;, }, }, return, max, ;, }, List, getBins, (, int, series, ), {, Map, map, =, (, Map, )]
[[, i, ], ;, }, }, return, max, ;, }, List, getBins, (, int, series, ), {, Map, map, =]
[], ;, }, }, return, max, ;, }, List, getBins, (, int, series, ), {, Map, map, =, (, Map]
[;, }, List, getBins, (, int, series, ), {, Map, map, =, (, Map, ), this, ., list, ., get]
[;, return, (, List, ), map, ., get, (, "bins", ), ;, }, private, int, getTotal, (, int, series, )]
[;, return, (, List, ), map, ., get, (, "bins", ), ;, }, private, int, getTotal, (, int, series, )]
[., get, (, series, ), ;, return, (, List, ), map, ., get, (, "bins", ), ;, }, private, int]
[., list, ., get, (, series, ), ;, return, (, List, ), map, ., get, (, "bins", ), ;, }]
[), ;, return, (, List, ), map, ., get, (, "bins", ), ;, }, private, int, getTotal, (, int, series]
[;, }, private, int, getTotal, (, int, series, ), {, Map, map, =, (, Map, ), this, ., list, .]
[;, }, private, int, getTotal, (, int, series, ), {, Map, map, =, (, Map, ), this, ., list, .]
[., get, (, "bins", ), ;, }, private, int, getTotal, (, int, series, ), {, Map, map, =, (, Map]
[), ;, }, private, int, getTotal, (, int, series, ), {, Map, map, =, (, Map, ), this, ., list]
[;, return, (, (, Integer, ), map, ., get, (, "values.length", ), ), ., intValue, (, ), ;, }, private]
[;, return, (, (, Integer, ), map, ., get, (, "values.length", ), ), ., intValue, (, ), ;, }, private]
[., get, (, series, ), ;, return, (, (, Integer, ), map, ., get, (, "values.length", ), ), ., intValue]
[., list, ., get, (, series, ), ;, return, (, (, Integer, ), map, ., get, (, "values.length", ), )]
[), ;, return, (, (, Integer, ), map, ., get, (, "values.length", ), ), ., intValue, (, ), ;, }]
[;, }, private, double, getBinWidth, (, int, series, ), {, Map, map, =, (, Map, ), this, ., list, .]
[., intValue, (, ), ;, }, private, double, getBinWidth, (, int, series, ), {, Map, map, =, (, Map, )]
[), ., intValue, (, ), ;, }, private, double, getBinWidth, (, int, series, ), {, Map, map, =, (, Map]
[), ., intValue, (, ), ;, }, private, double, getBinWidth, (, int, series, ), {, Map, map, =, (, Map]
[., get, (, "values.length", ), ), ., intValue, (, ), ;, }, private, double, getBinWidth, (, int, series, ), {]
[), ), ., intValue, (, ), ;, }, private, double, getBinWidth, (, int, series, ), {, Map, map, =, (]
[;, return, (, (, Double, ), map, ., get, (, "bin width", ), ), ., doubleValue, (, ), ;, }, public]
[;, return, (, (, Double, ), map, ., get, (, "bin width", ), ), ., doubleValue, (, ), ;, }, public]
[., get, (, series, ), ;, return, (, (, Double, ), map, ., get, (, "bin width", ), ), ., doubleValue]
[., list, ., get, (, series, ), ;, return, (, (, Double, ), map, ., get, (, "bin width", ), )]
[), ;, return, (, (, Double, ), map, ., get, (, "bin width", ), ), ., doubleValue, (, ), ;, }]
[;, }, public, int, getSeriesCount, (, ), {, return, this, ., list, ., size, (, ), ;, }, public, Comparable]
[., doubleValue, (, ), ;, }, public, int, getSeriesCount, (, ), {, return, this, ., list, ., size, (, )]
[), ., doubleValue, (, ), ;, }, public, int, getSeriesCount, (, ), {, return, this, ., list, ., size, (]
[), ., doubleValue, (, ), ;, }, public, int, getSeriesCount, (, ), {, return, this, ., list, ., size, (]
[., get, (, "bin width", ), ), ., doubleValue, (, ), ;, }, public, int, getSeriesCount, (, ), {, return, this]
[), ), ., doubleValue, (, ), ;, }, public, int, getSeriesCount, (, ), {, return, this, ., list, ., size]
[;, }, public, Comparable, getSeriesKey, (, int, series, ), {, Map, map, =, (, Map, ), this, ., list, .]
[., size, (, ), ;, }, public, Comparable, getSeriesKey, (, int, series, ), {, Map, map, =, (, Map, )]
[., list, ., size, (, ), ;, }, public, Comparable, getSeriesKey, (, int, series, ), {, Map, map, =, (]
[;, return, (, Comparable, ), map, ., get, (, "key", ), ;, }, public, int, getItemCount, (, int, series, )]
[;, return, (, Comparable, ), map, ., get, (, "key", ), ;, }, public, int, getItemCount, (, int, series, )]
[., get, (, series, ), ;, return, (, Comparable, ), map, ., get, (, "key", ), ;, }, public, int]
[., list, ., get, (, series, ), ;, return, (, Comparable, ), map, ., get, (, "key", ), ;, }]
[), ;, return, (, Comparable, ), map, ., get, (, "key", ), ;, }, public, int, getItemCount, (, int, series]
[;, }, public, int, getItemCount, (, int, series, ), {, return, getBins, (, series, ), ., size, (, ), ;]
[;, }, public, int, getItemCount, (, int, series, ), {, return, getBins, (, series, ), ., size, (, ), ;]
[., get, (, "key", ), ;, }, public, int, getItemCount, (, int, series, ), {, return, getBins, (, series, )]
[), ;, }, public, int, getItemCount, (, int, series, ), {, return, getBins, (, series, ), ., size, (, )]
[;, }, public, Number, getX, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (, series, )]
[., size, (, ), ;, }, public, Number, getX, (, int, series, ,, int, item, ), {, List, bins, =]
[), ., size, (, ), ;, }, public, Number, getX, (, int, series, ,, int, item, ), {, List, bins]
[;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, double, x, =, (, bin, .]
[), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, double, x, =, (, bin]
[;, double, x, =, (, bin, ., getStartBoundary, (, ), +, bin, ., getEndBoundary, (, ), ), /, 2., ;]
[;, double, x, =, (, bin, ., getStartBoundary, (, ), +, bin, ., getEndBoundary, (, ), ), /, 2., ;]
[., get, (, item, ), ;, double, x, =, (, bin, ., getStartBoundary, (, ), +, bin, ., getEndBoundary, (]
[), ;, double, x, =, (, bin, ., getStartBoundary, (, ), +, bin, ., getEndBoundary, (, ), ), /, 2.]
[;, return, new, Double, (, x, ), ;, }, public, Number, getY, (, int, series, ,, int, item, ), {]
[/, 2., ;, return, new, Double, (, x, ), ;, }, public, Number, getY, (, int, series, ,, int, item]
[), /, 2., ;, return, new, Double, (, x, ), ;, }, public, Number, getY, (, int, series, ,, int]
[+, bin, ., getEndBoundary, (, ), ), /, 2., ;, return, new, Double, (, x, ), ;, }, public, Number]
[., getStartBoundary, (, ), +, bin, ., getEndBoundary, (, ), ), /, 2., ;, return, new, Double, (, x, )]
[), /, 2., ;, return, new, Double, (, x, ), ;, }, public, Number, getY, (, int, series, ,, int]
[., getEndBoundary, (, ), ), /, 2., ;, return, new, Double, (, x, ), ;, }, public, Number, getY, (]
[;, return, new, Double, (, x, ), ;, }, public, Number, getY, (, int, series, ,, int, item, ), {]
[;, }, public, Number, getY, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (, series, )]
[), ;, }, public, Number, getY, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (, series]
[;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, double, total, =, getTotal, (, series]
[), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, double, total, =, getTotal, (]
[;, double, total, =, getTotal, (, series, ), ;, double, binWidth, =, getBinWidth, (, series, ), ;, if, (, this]
[;, double, total, =, getTotal, (, series, ), ;, double, binWidth, =, getBinWidth, (, series, ), ;, if, (, this]
[., get, (, item, ), ;, double, total, =, getTotal, (, series, ), ;, double, binWidth, =, getBinWidth, (, series]
[), ;, double, total, =, getTotal, (, series, ), ;, double, binWidth, =, getBinWidth, (, series, ), ;, if, (]
[;, double, binWidth, =, getBinWidth, (, series, ), ;, if, (, this, ., type, ==, HistogramType, ., FREQUENCY, ), {]
[), ;, double, binWidth, =, getBinWidth, (, series, ), ;, if, (, this, ., type, ==, HistogramType, ., FREQUENCY, )]
[;, if, (, this, ., type, ==, HistogramType, ., FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (]
[), ;, if, (, this, ., type, ==, HistogramType, ., FREQUENCY, ), {, return, new, Double, (, bin, ., getCount]
[), {, return, new, Double, (, bin, ., getCount, (, ), ), ;, }, else, if, (, this, ., type]
[==, HistogramType, ., FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (, ), ), ;, }, else, if]
[., type, ==, HistogramType, ., FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (, ), ), ;, }]
[), {, return, new, Double, (, bin, ., getCount, (, ), ), ;, }, else, if, (, this, ., type]
[., FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (, ), ), ;, }, else, if, (, this]
[;, }, else, if, (, this, ., type, ==, HistogramType, ., RELATIVE_FREQUENCY, ), {, return, new, Double, (, bin, .]
[), ;, }, else, if, (, this, ., type, ==, HistogramType, ., RELATIVE_FREQUENCY, ), {, return, new, Double, (, bin]
[., getCount, (, ), ), ;, }, else, if, (, this, ., type, ==, HistogramType, ., RELATIVE_FREQUENCY, ), {, return]
[), {, return, new, Double, (, bin, ., getCount, (, ), /, total, ), ;, }, else, if, (, this]
[==, HistogramType, ., RELATIVE_FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (, ), /, total, ), ;, }]
[., type, ==, HistogramType, ., RELATIVE_FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (, ), /, total, )]
[), {, return, new, Double, (, bin, ., getCount, (, ), /, total, ), ;, }, else, if, (, this]
[., RELATIVE_FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (, ), /, total, ), ;, }, else, if]
[;, }, else, if, (, this, ., type, ==, HistogramType, ., SCALE_AREA_TO_1, ), {, return, new, Double, (, bin, .]
[), ;, }, else, if, (, this, ., type, ==, HistogramType, ., SCALE_AREA_TO_1, ), {, return, new, Double, (, bin]
[/, total, ), ;, }, else, if, (, this, ., type, ==, HistogramType, ., SCALE_AREA_TO_1, ), {, return, new, Double]
[., getCount, (, ), /, total, ), ;, }, else, if, (, this, ., type, ==, HistogramType, ., SCALE_AREA_TO_1, )]
[), ;, }, else, if, (, this, ., type, ==, HistogramType, ., SCALE_AREA_TO_1, ), {, return, new, Double, (, bin]
[), {, return, new, Double, (, bin, ., getCount, (, ), /, (, binWidth, *, total, ), ), ;, }]
[==, HistogramType, ., SCALE_AREA_TO_1, ), {, return, new, Double, (, bin, ., getCount, (, ), /, (, binWidth, *, total]
[., type, ==, HistogramType, ., SCALE_AREA_TO_1, ), {, return, new, Double, (, bin, ., getCount, (, ), /, (, binWidth]
[), {, return, new, Double, (, bin, ., getCount, (, ), /, (, binWidth, *, total, ), ), ;, }]
[., SCALE_AREA_TO_1, ), {, return, new, Double, (, bin, ., getCount, (, ), /, (, binWidth, *, total, ), )]
[;, }, else, {, throw, new, IllegalStateException, (, ), ;, }, }, public, Number, getStartX, (, int, series, ,, int]
[), ;, }, else, {, throw, new, IllegalStateException, (, ), ;, }, }, public, Number, getStartX, (, int, series, ,]
[/, (, binWidth, *, total, ), ), ;, }, else, {, throw, new, IllegalStateException, (, ), ;, }, }, public]
[., getCount, (, ), /, (, binWidth, *, total, ), ), ;, }, else, {, throw, new, IllegalStateException, (, )]
[), ;, }, else, {, throw, new, IllegalStateException, (, ), ;, }, }, public, Number, getStartX, (, int, series, ,]
[), ), ;, }, else, {, throw, new, IllegalStateException, (, ), ;, }, }, public, Number, getStartX, (, int, series]
[*, total, ), ), ;, }, else, {, throw, new, IllegalStateException, (, ), ;, }, }, public, Number, getStartX, (]
[), ), ;, }, else, {, throw, new, IllegalStateException, (, ), ;, }, }, public, Number, getStartX, (, int, series]
[;, }, }, public, Number, getStartX, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (, series]
[;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, return, new, Double, (, bin, .]
[), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, return, new, Double, (, bin]
[;, return, new, Double, (, bin, ., getStartBoundary, (, ), ), ;, }, public, Number, getEndX, (, int, series, ,]
[;, return, new, Double, (, bin, ., getStartBoundary, (, ), ), ;, }, public, Number, getEndX, (, int, series, ,]
[., get, (, item, ), ;, return, new, Double, (, bin, ., getStartBoundary, (, ), ), ;, }, public, Number]
[), ;, return, new, Double, (, bin, ., getStartBoundary, (, ), ), ;, }, public, Number, getEndX, (, int, series]
[;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (, series, )]
[), ;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (, series]
[., getStartBoundary, (, ), ), ;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, List, bins]
[;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, return, new, Double, (, bin, .]
[), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, return, new, Double, (, bin]
[;, return, new, Double, (, bin, ., getEndBoundary, (, ), ), ;, }, public, Number, getStartY, (, int, series, ,]
[;, return, new, Double, (, bin, ., getEndBoundary, (, ), ), ;, }, public, Number, getStartY, (, int, series, ,]
[., get, (, item, ), ;, return, new, Double, (, bin, ., getEndBoundary, (, ), ), ;, }, public, Number]
[), ;, return, new, Double, (, bin, ., getEndBoundary, (, ), ), ;, }, public, Number, getStartY, (, int, series]
[;, }, public, Number, getStartY, (, int, series, ,, int, item, ), {, return, getY, (, series, ,, item, )]
[), ;, }, public, Number, getStartY, (, int, series, ,, int, item, ), {, return, getY, (, series, ,, item]
[., getEndBoundary, (, ), ), ;, }, public, Number, getStartY, (, int, series, ,, int, item, ), {, return, getY]
[;, }, public, Number, getEndY, (, int, series, ,, int, item, ), {, return, getY, (, series, ,, item, )]
[,, item, ), ;, }, public, Number, getEndY, (, int, series, ,, int, item, ), {, return, getY, (, series]
[), ;, }, public, Number, getEndY, (, int, series, ,, int, item, ), {, return, getY, (, series, ,, item]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[,, item, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {]
[), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, HistogramDataset, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, HistogramDataset, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, HistogramDataset, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, HistogramDataset, ), ), {, return, false, ;, }, HistogramDataset, that, =, (]
[), {, return, false, ;, }, HistogramDataset, that, =, (, HistogramDataset, ), obj, ;, if, (, !, ObjectUtilities, ., equal]
[), {, return, false, ;, }, HistogramDataset, that, =, (, HistogramDataset, ), obj, ;, if, (, !, ObjectUtilities, ., equal]
[), ), {, return, false, ;, }, HistogramDataset, that, =, (, HistogramDataset, ), obj, ;, if, (, !, ObjectUtilities, .]
[instanceof, HistogramDataset, ), ), {, return, false, ;, }, HistogramDataset, that, =, (, HistogramDataset, ), obj, ;, if, (, !]
[;, }, HistogramDataset, that, =, (, HistogramDataset, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., type]
[;, if, (, !, ObjectUtilities, ., equal, (, this, ., type, ,, that, ., type, ), ), {, return, false]
[;, if, (, !, ObjectUtilities, ., equal, (, this, ., type, ,, that, ., type, ), ), {, return, false]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., list, ,, that, ., list]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., list, ,, that, ., list]
[., equal, (, this, ., type, ,, that, ., type, ), ), {, return, false, ;, }, if, (, !]
[,, that, ., type, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, .]
[., type, ,, that, ., type, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., list, ,, that, .]
[., type, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., list, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., list, ,, that, ., list, ), ), {, return]
[), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, HistogramDataset, clone]
[), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, HistogramDataset, clone]
[., equal, (, this, ., list, ,, that, ., list, ), ), {, return, false, ;, }, return, true, ;]
[,, that, ., list, ), ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, )]
[., list, ,, that, ., list, ), ), {, return, false, ;, }, return, true, ;, }, public, Object, clone]
[), ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, HistogramDataset]
[., list, ), ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, HistogramDataset, clone, =, (, HistogramDataset, )]
[;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, HistogramDataset, clone, =, (, HistogramDataset, ), super, ., clone, (]
[;, int, seriesCount, =, getSeriesCount, (, ), ;, clone, ., list, =, new, java, ., util, ., ArrayList, (, seriesCount]
[;, int, seriesCount, =, getSeriesCount, (, ), ;, clone, ., list, =, new, java, ., util, ., ArrayList, (, seriesCount]
[., clone, (, ), ;, int, seriesCount, =, getSeriesCount, (, ), ;, clone, ., list, =, new, java, ., util]
[;, clone, ., list, =, new, java, ., util, ., ArrayList, (, seriesCount, ), ;, for, (, int, i, =]
[=, new, java, ., util, ., ArrayList, (, seriesCount, ), ;, for, (, int, i, =, 0, ;, i, <]
[., list, =, new, java, ., util, ., ArrayList, (, seriesCount, ), ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, seriesCount, ;, i, ++, ), {, clone, ., list, .]
[), ;, for, (, int, i, =, 0, ;, i, <, seriesCount, ;, i, ++, ), {, clone, ., list]
[;, i, <, seriesCount, ;, i, ++, ), {, clone, ., list, ., add, (, new, HashMap, (, (, Map]
[;, i, ++, ), {, clone, ., list, ., add, (, new, HashMap, (, (, Map, ), this, ., list]
[<, seriesCount, ;, i, ++, ), {, clone, ., list, ., add, (, new, HashMap, (, (, Map, ), this]
[;, i, ++, ), {, clone, ., list, ., add, (, new, HashMap, (, (, Map, ), this, ., list]
[), {, clone, ., list, ., add, (, new, HashMap, (, (, Map, ), this, ., list, ., get, (]
[++, ), {, clone, ., list, ., add, (, new, HashMap, (, (, Map, ), this, ., list, ., get]
[;, }, return, clone, ;, }, }]
[., add, (, new, HashMap, (, (, Map, ), this, ., list, ., get, (, i, ), ), ), ;]
[., list, ., add, (, new, HashMap, (, (, Map, ), this, ., list, ., get, (, i, ), )]
[), ;, }, return, clone, ;, }, }]
[), ), ;, }, return, clone, ;, }, }]
[), ), ;, }, return, clone, ;, }, }]
[., get, (, i, ), ), ), ;, }, return, clone, ;, }, }]
[., list, ., get, (, i, ), ), ), ;, }, return, clone, ;, }, }]
[), ), ), ;, }, return, clone, ;, }, }]
[;, }, }]
