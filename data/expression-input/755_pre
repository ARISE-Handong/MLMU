[commons, ., math3, ., exception, ., TooManyEvaluationsException, ;, public, class, SecantSolver, extends, AbstractUnivariateSolver, {, protected, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =]
[class, SecantSolver, extends, AbstractUnivariateSolver, {, protected, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =, 1e-6, ;, public, SecantSolver, (, ), {, super, (]
[SecantSolver, (, ), {, super, (, DEFAULT_ABSOLUTE_ACCURACY, ), ;, }, public, SecantSolver, (, final, double, absoluteAccuracy, ), {, super, (]
[super, (, absoluteAccuracy, ), ;, }, public, SecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), {, super, (]
[absoluteAccuracy, ), ;, }, public, SecantSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), {, super, (, relativeAccuracy, ,]
[absoluteAccuracy, ), ;, }, @, Override, protected, final, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NoBracketingException, {, double, x0, =]
[final, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NoBracketingException, {, double, x0, =, getMin, (, ), ;, double, x1, =]
[,, NoBracketingException, {, double, x0, =, getMin, (, ), ;, double, x1, =, getMax, (, ), ;, double, f0, =]
[{, double, x0, =, getMin, (, ), ;, double, x1, =, getMax, (, ), ;, double, f0, =, computeObjectiveValue, (]
[), ;, double, x1, =, getMax, (, ), ;, double, f0, =, computeObjectiveValue, (, x0, ), ;, double, f1, =]
[double, x1, =, getMax, (, ), ;, double, f0, =, computeObjectiveValue, (, x0, ), ;, double, f1, =, computeObjectiveValue, (]
[), ;, double, f0, =, computeObjectiveValue, (, x0, ), ;, double, f1, =, computeObjectiveValue, (, x1, ), ;, if, (]
[), ;, double, f0, =, computeObjectiveValue, (, x0, ), ;, double, f1, =, computeObjectiveValue, (, x1, ), ;, if, (]
[double, f0, =, computeObjectiveValue, (, x0, ), ;, double, f1, =, computeObjectiveValue, (, x1, ), ;, if, (, f0, ==]
[(, x0, ), ;, double, f1, =, computeObjectiveValue, (, x1, ), ;, if, (, f0, ==, 0.0, ), {, return]
[f1, =, computeObjectiveValue, (, x1, ), ;, if, (, f0, ==, 0.0, ), {, return, x0, ;, }, if, (]
[f1, =, computeObjectiveValue, (, x1, ), ;, if, (, f0, ==, 0.0, ), {, return, x0, ;, }, if, (]
[computeObjectiveValue, (, x1, ), ;, if, (, f0, ==, 0.0, ), {, return, x0, ;, }, if, (, f1, ==]
[;, if, (, f0, ==, 0.0, ), {, return, x0, ;, }, if, (, f1, ==, 0.0, ), {, return]
[f0, ==, 0.0, ), {, return, x0, ;, }, if, (, f1, ==, 0.0, ), {, return, x1, ;, }]
[0.0, ), {, return, x0, ;, }, if, (, f1, ==, 0.0, ), {, return, x1, ;, }, verifyBracketing, (]
[{, return, x0, ;, }, if, (, f1, ==, 0.0, ), {, return, x1, ;, }, verifyBracketing, (, x0, ,]
[f1, ==, 0.0, ), {, return, x1, ;, }, verifyBracketing, (, x0, ,, x1, ), ;, final, double, ftol, =]
[}, verifyBracketing, (, x0, ,, x1, ), ;, final, double, ftol, =, getFunctionValueAccuracy, (, ), ;, final, double, atol, =]
[final, double, ftol, =, getFunctionValueAccuracy, (, ), ;, final, double, atol, =, getAbsoluteAccuracy, (, ), ;, final, double, rtol, =]
[), ;, final, double, atol, =, getAbsoluteAccuracy, (, ), ;, final, double, rtol, =, getRelativeAccuracy, (, ), ;, while, (]
[(, ), ;, final, double, rtol, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, final, double, x, =]
[(, ), ;, final, double, rtol, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, final, double, x, =]
[;, final, double, rtol, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, final, double, x, =, x1, -]
[final, double, rtol, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, final, double, x, =, x1, -, (]
[final, double, rtol, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, final, double, x, =, x1, -, (]
[double, rtol, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, final, double, x, =, x1, -, (, (]
[double, rtol, =, getRelativeAccuracy, (, ), ;, while, (, true, ), {, final, double, x, =, x1, -, (, (]
[=, getRelativeAccuracy, (, ), ;, while, (, true, ), {, final, double, x, =, x1, -, (, (, f1, *]
[getRelativeAccuracy, (, ), ;, while, (, true, ), {, final, double, x, =, x1, -, (, (, f1, *, (]
[getRelativeAccuracy, (, ), ;, while, (, true, ), {, final, double, x, =, x1, -, (, (, f1, *, (]
[), ;, while, (, true, ), {, final, double, x, =, x1, -, (, (, f1, *, (, x1, -]
[true, ), {, final, double, x, =, x1, -, (, (, f1, *, (, x1, -, x0, ), ), /]
[), {, final, double, x, =, x1, -, (, (, f1, *, (, x1, -, x0, ), ), /, (]
[), {, final, double, x, =, x1, -, (, (, f1, *, (, x1, -, x0, ), ), /, (]
[final, double, x, =, x1, -, (, (, f1, *, (, x1, -, x0, ), ), /, (, f1, -]
[f1, *, (, x1, -, x0, ), ), /, (, f1, -, f0, ), ), ;, final, double, fx, =]
[(, x1, -, x0, ), ), /, (, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (]
[), /, (, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (]
[), /, (, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (]
[(, f1, -, f0, ), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==]
[), ), ;, final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return]
[final, double, fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return, x, ;, }]
[fx, =, computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return, x, ;, }, x0, =]
[computeObjectiveValue, (, x, ), ;, if, (, fx, ==, 0.0, ), {, return, x, ;, }, x0, =, x1, ;]
[x, ), ;, if, (, fx, ==, 0.0, ), {, return, x, ;, }, x0, =, x1, ;, f0, =]
[;, if, (, fx, ==, 0.0, ), {, return, x, ;, }, x0, =, x1, ;, f0, =, f1, ;]
[(, fx, ==, 0.0, ), {, return, x, ;, }, x0, =, x1, ;, f0, =, f1, ;, x1, =]
[==, 0.0, ), {, return, x, ;, }, x0, =, x1, ;, f0, =, f1, ;, x1, =, x, ;]
[), {, return, x, ;, }, x0, =, x1, ;, f0, =, f1, ;, x1, =, x, ;, f1, =]
[;, }, x0, =, x1, ;, f0, =, f1, ;, x1, =, x, ;, f1, =, fx, ;, if, (]
[;, }, x0, =, x1, ;, f0, =, f1, ;, x1, =, x, ;, f1, =, fx, ;, if, (]
[;, }, x0, =, x1, ;, f0, =, f1, ;, x1, =, x, ;, f1, =, fx, ;, if, (]
[x1, ;, f0, =, f1, ;, x1, =, x, ;, f1, =, fx, ;, if, (, FastMath, ., abs, (]
[=, f1, ;, x1, =, x, ;, f1, =, fx, ;, if, (, FastMath, ., abs, (, f1, ), <=]
[=, x, ;, f1, =, fx, ;, if, (, FastMath, ., abs, (, f1, ), <=, ftol, ), {, return]
[fx, ;, if, (, FastMath, ., abs, (, f1, ), <=, ftol, ), {, return, x1, ;, }, if, (]
[fx, ;, if, (, FastMath, ., abs, (, f1, ), <=, ftol, ), {, return, x1, ;, }, if, (]
[fx, ;, if, (, FastMath, ., abs, (, f1, ), <=, ftol, ), {, return, x1, ;, }, if, (]
[FastMath, ., abs, (, f1, ), <=, ftol, ), {, return, x1, ;, }, if, (, FastMath, ., abs, (]
[FastMath, ., abs, (, f1, ), <=, ftol, ), {, return, x1, ;, }, if, (, FastMath, ., abs, (]
[abs, (, f1, ), <=, ftol, ), {, return, x1, ;, }, if, (, FastMath, ., abs, (, x1, -]
[), <=, ftol, ), {, return, x1, ;, }, if, (, FastMath, ., abs, (, x1, -, x0, ), <]
[), <=, ftol, ), {, return, x1, ;, }, if, (, FastMath, ., abs, (, x1, -, x0, ), <]
[{, return, x1, ;, }, if, (, FastMath, ., abs, (, x1, -, x0, ), <, FastMath, ., max, (]
[{, return, x1, ;, }, if, (, FastMath, ., abs, (, x1, -, x0, ), <, FastMath, ., max, (]
[x1, ;, }, if, (, FastMath, ., abs, (, x1, -, x0, ), <, FastMath, ., max, (, rtol, *]
[x1, ;, }, if, (, FastMath, ., abs, (, x1, -, x0, ), <, FastMath, ., max, (, rtol, *]
[(, FastMath, ., abs, (, x1, -, x0, ), <, FastMath, ., max, (, rtol, *, FastMath, ., abs, (]
[abs, (, x1, -, x0, ), <, FastMath, ., max, (, rtol, *, FastMath, ., abs, (, x1, ), ,]
[), <, FastMath, ., max, (, rtol, *, FastMath, ., abs, (, x1, ), ,, atol, ), ), {, return]
