[;, private, final, boolean, removeAbstractMethods, ;, private, final, boolean, removeAssertionCalls, ;, private, final, List, <, RemovableAssignment, >, abstractMethodAssignmentNodes, =, Lists]
[;, private, final, List, <, Node, >, assertionCalls, =, Lists, ., newArrayList, (, ), ;, private, class, RemovableAssignment, {, final]
[., newArrayList, (, ), ;, private, final, List, <, Node, >, assertionCalls, =, Lists, ., newArrayList, (, ), ;, private]
[;, private, class, RemovableAssignment, {, final, Node, node, ;, final, Node, parent, ;, final, List, <, Node, >, assignAncestors, =]
[., newArrayList, (, ), ;, private, class, RemovableAssignment, {, final, Node, node, ;, final, Node, parent, ;, final, List, <]
[;, final, Node, lastAncestor, ;, public, RemovableAssignment, (, Node, nameNode, ,, Node, assignNode, ,, NodeTraversal, traversal, ), {, this, .]
[., newArrayList, (, ), ;, final, Node, lastAncestor, ;, public, RemovableAssignment, (, Node, nameNode, ,, Node, assignNode, ,, NodeTraversal, traversal]
[=, nameNode, ;, this, ., parent, =, assignNode, ;, Node, ancestor, =, assignNode, ;, do, {, ancestor, =, ancestor, .]
[., node, =, nameNode, ;, this, ., parent, =, assignNode, ;, Node, ancestor, =, assignNode, ;, do, {, ancestor, =]
[;, this, ., parent, =, assignNode, ;, Node, ancestor, =, assignNode, ;, do, {, ancestor, =, ancestor, ., getParent, (]
[=, assignNode, ;, Node, ancestor, =, assignNode, ;, do, {, ancestor, =, ancestor, ., getParent, (, ), ;, assignAncestors, .]
[., parent, =, assignNode, ;, Node, ancestor, =, assignNode, ;, do, {, ancestor, =, ancestor, ., getParent, (, ), ;]
[;, Node, ancestor, =, assignNode, ;, do, {, ancestor, =, ancestor, ., getParent, (, ), ;, assignAncestors, ., add, (]
[;, do, {, ancestor, =, ancestor, ., getParent, (, ), ;, assignAncestors, ., add, (, ancestor, ), ;, }, while]
[=, ancestor, ., getParent, (, ), ;, assignAncestors, ., add, (, ancestor, ), ;, }, while, (, ancestor, ., isAssign]
[;, assignAncestors, ., add, (, ancestor, ), ;, }, while, (, ancestor, ., isAssign, (, ), &&, ancestor, ., getFirstChild]
[., getParent, (, ), ;, assignAncestors, ., add, (, ancestor, ), ;, }, while, (, ancestor, ., isAssign, (, )]
[;, }, while, (, ancestor, ., isAssign, (, ), &&, ancestor, ., getFirstChild, (, ), ., isQualifiedName, (, ), )]
[., add, (, ancestor, ), ;, }, while, (, ancestor, ., isAssign, (, ), &&, ancestor, ., getFirstChild, (, )]
[), ;, }, while, (, ancestor, ., isAssign, (, ), &&, ancestor, ., getFirstChild, (, ), ., isQualifiedName, (, )]
[), ;, lastAncestor, =, ancestor, ., getParent, (, ), ;, }, public, void, remove, (, ), {, Node, rhs, =]
[&&, ancestor, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), ;, lastAncestor, =, ancestor, ., getParent, (, ), ;]
[., isAssign, (, ), &&, ancestor, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), ;, lastAncestor, =, ancestor, .]
[), ;, lastAncestor, =, ancestor, ., getParent, (, ), ;, }, public, void, remove, (, ), {, Node, rhs, =]
[., isQualifiedName, (, ), ), ;, lastAncestor, =, ancestor, ., getParent, (, ), ;, }, public, void, remove, (, )]
[., getFirstChild, (, ), ., isQualifiedName, (, ), ), ;, lastAncestor, =, ancestor, ., getParent, (, ), ;, }, public]
[=, ancestor, ., getParent, (, ), ;, }, public, void, remove, (, ), {, Node, rhs, =, node, ., getNext]
[;, }, public, void, remove, (, ), {, Node, rhs, =, node, ., getNext, (, ), ;, Node, last, =]
[., getParent, (, ), ;, }, public, void, remove, (, ), {, Node, rhs, =, node, ., getNext, (, )]
[;, Node, last, =, parent, ;, for, (, Node, ancestor, :, assignAncestors, ), {, if, (, ancestor, ., isExprResult, (]
[., getNext, (, ), ;, Node, last, =, parent, ;, for, (, Node, ancestor, :, assignAncestors, ), {, if, (]
[;, for, (, Node, ancestor, :, assignAncestors, ), {, if, (, ancestor, ., isExprResult, (, ), ), {, lastAncestor, .]
[), {, if, (, ancestor, ., isExprResult, (, ), ), {, lastAncestor, ., removeChild, (, ancestor, ), ;, }, else]
[), {, lastAncestor, ., removeChild, (, ancestor, ), ;, }, else, {, rhs, ., detachFromParent, (, ), ;, ancestor, .]
[., isExprResult, (, ), ), {, lastAncestor, ., removeChild, (, ancestor, ), ;, }, else, {, rhs, ., detachFromParent, (]
[;, }, else, {, rhs, ., detachFromParent, (, ), ;, ancestor, ., replaceChild, (, last, ,, rhs, ), ;, }]
[., removeChild, (, ancestor, ), ;, }, else, {, rhs, ., detachFromParent, (, ), ;, ancestor, ., replaceChild, (, last]
[), ;, }, else, {, rhs, ., detachFromParent, (, ), ;, ancestor, ., replaceChild, (, last, ,, rhs, ), ;]
[;, ancestor, ., replaceChild, (, last, ,, rhs, ), ;, }, last, =, ancestor, ;, }, compiler, ., reportCodeChange, (]
[., detachFromParent, (, ), ;, ancestor, ., replaceChild, (, last, ,, rhs, ), ;, }, last, =, ancestor, ;, }]
[;, }, last, =, ancestor, ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, class, FindAbstractMethods, extends, AbstractPostOrderCallback]
[., replaceChild, (, last, ,, rhs, ), ;, }, last, =, ancestor, ;, }, compiler, ., reportCodeChange, (, ), ;]
[,, rhs, ), ;, }, last, =, ancestor, ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, class]
[), ;, }, last, =, ancestor, ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, class, FindAbstractMethods, extends]
[=, ancestor, ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, class, FindAbstractMethods, extends, AbstractPostOrderCallback, {, @, Override]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, class, FindAbstractMethods, extends, AbstractPostOrderCallback, {, @, Override, public, void]
[;, }, }, private, class, FindAbstractMethods, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[., reportCodeChange, (, ), ;, }, }, private, class, FindAbstractMethods, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal]
[), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, Node, valueNode, =, n, ., getLastChild, (, ), ;]
[., isAssign, (, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, Node, valueNode, =, n, .]
[;, Node, valueNode, =, n, ., getLastChild, (, ), ;, if, (, nameNode, ., isQualifiedName, (, ), &&, valueNode, .]
[., getFirstChild, (, ), ;, Node, valueNode, =, n, ., getLastChild, (, ), ;, if, (, nameNode, ., isQualifiedName, (]
[;, if, (, nameNode, ., isQualifiedName, (, ), &&, valueNode, ., isQualifiedName, (, ), &&, ABSTRACT_METHOD_NAME, ., equals, (, valueNode]
[., getLastChild, (, ), ;, if, (, nameNode, ., isQualifiedName, (, ), &&, valueNode, ., isQualifiedName, (, ), &&, ABSTRACT_METHOD_NAME]
[), {, abstractMethodAssignmentNodes, ., add, (, new, RemovableAssignment, (, n, ., getFirstChild, (, ), ,, n, ,, t, ), )]
[&&, ABSTRACT_METHOD_NAME, ., equals, (, valueNode, ., getQualifiedName, (, ), ), ), {, abstractMethodAssignmentNodes, ., add, (, new, RemovableAssignment, (]
[&&, valueNode, ., isQualifiedName, (, ), &&, ABSTRACT_METHOD_NAME, ., equals, (, valueNode, ., getQualifiedName, (, ), ), ), {, abstractMethodAssignmentNodes]
[., isQualifiedName, (, ), &&, valueNode, ., isQualifiedName, (, ), &&, ABSTRACT_METHOD_NAME, ., equals, (, valueNode, ., getQualifiedName, (, )]
[&&, ABSTRACT_METHOD_NAME, ., equals, (, valueNode, ., getQualifiedName, (, ), ), ), {, abstractMethodAssignmentNodes, ., add, (, new, RemovableAssignment, (]
[., isQualifiedName, (, ), &&, ABSTRACT_METHOD_NAME, ., equals, (, valueNode, ., getQualifiedName, (, ), ), ), {, abstractMethodAssignmentNodes, ., add]
[), {, abstractMethodAssignmentNodes, ., add, (, new, RemovableAssignment, (, n, ., getFirstChild, (, ), ,, n, ,, t, ), )]
[., equals, (, valueNode, ., getQualifiedName, (, ), ), ), {, abstractMethodAssignmentNodes, ., add, (, new, RemovableAssignment, (, n, .]
[), ), {, abstractMethodAssignmentNodes, ., add, (, new, RemovableAssignment, (, n, ., getFirstChild, (, ), ,, n, ,, t, )]
[., getQualifiedName, (, ), ), ), {, abstractMethodAssignmentNodes, ., add, (, new, RemovableAssignment, (, n, ., getFirstChild, (, ), ,]
[;, }, }, }, }, private, class, FindAssertionCalls, extends, AbstractPostOrderCallback, {, Set, <, String, >, assertionNames, =, Sets, ., newHashSet]
[., add, (, new, RemovableAssignment, (, n, ., getFirstChild, (, ), ,, n, ,, t, ), ), ;, }, }]
[), ;, }, }, }, }, private, class, FindAssertionCalls, extends, AbstractPostOrderCallback, {, Set, <, String, >, assertionNames, =, Sets, .]
[,, n, ,, t, ), ), ;, }, }, }, }, private, class, FindAssertionCalls, extends, AbstractPostOrderCallback, {, Set, <, String]
[., getFirstChild, (, ), ,, n, ,, t, ), ), ;, }, }, }, }, private, class, FindAssertionCalls, extends, AbstractPostOrderCallback]
[,, t, ), ), ;, }, }, }, }, private, class, FindAssertionCalls, extends, AbstractPostOrderCallback, {, Set, <, String, >, assertionNames]
[), ), ;, }, }, }, }, private, class, FindAssertionCalls, extends, AbstractPostOrderCallback, {, Set, <, String, >, assertionNames, =, Sets]
[;, FindAssertionCalls, (, ), {, for, (, AssertionFunctionSpec, spec, :, compiler, ., getCodingConvention, (, ), ., getAssertionFunctions, (, ), )]
[., newHashSet, (, ), ;, FindAssertionCalls, (, ), {, for, (, AssertionFunctionSpec, spec, :, compiler, ., getCodingConvention, (, ), .]
[), {, assertionNames, ., add, (, spec, ., getFunctionName, (, ), ), ;, }, }, @, Override, public, void, visit]
[., getAssertionFunctions, (, ), ), {, assertionNames, ., add, (, spec, ., getFunctionName, (, ), ), ;, }, }, @]
[., getCodingConvention, (, ), ., getAssertionFunctions, (, ), ), {, assertionNames, ., add, (, spec, ., getFunctionName, (, ), )]
[;, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[., add, (, spec, ., getFunctionName, (, ), ), ;, }, }, @, Override, public, void, visit, (, NodeTraversal, t]
[), ;, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., getFunctionName, (, ), ), ;, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[), {, String, fnName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, assertionNames, ., contains]
[., isCall, (, ), ), {, String, fnName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if]
[;, if, (, assertionNames, ., contains, (, fnName, ), ), {, assertionCalls, ., add, (, n, ), ;, }, }]
[., getQualifiedName, (, ), ;, if, (, assertionNames, ., contains, (, fnName, ), ), {, assertionCalls, ., add, (, n]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, assertionNames, ., contains, (, fnName, ), ), {, assertionCalls]
[), {, assertionCalls, ., add, (, n, ), ;, }, }, }, }, ClosureCodeRemoval, (, AbstractCompiler, compiler, ,, boolean, removeAbstractMethods]
[., contains, (, fnName, ), ), {, assertionCalls, ., add, (, n, ), ;, }, }, }, }, ClosureCodeRemoval, (]
[), ), {, assertionCalls, ., add, (, n, ), ;, }, }, }, }, ClosureCodeRemoval, (, AbstractCompiler, compiler, ,, boolean]
[;, }, }, }, }, ClosureCodeRemoval, (, AbstractCompiler, compiler, ,, boolean, removeAbstractMethods, ,, boolean, removeAssertionCalls, ), {, this, ., compiler]
[., add, (, n, ), ;, }, }, }, }, ClosureCodeRemoval, (, AbstractCompiler, compiler, ,, boolean, removeAbstractMethods, ,, boolean, removeAssertionCalls]
[), ;, }, }, }, }, ClosureCodeRemoval, (, AbstractCompiler, compiler, ,, boolean, removeAbstractMethods, ,, boolean, removeAssertionCalls, ), {, this, .]
[=, compiler, ;, this, ., removeAbstractMethods, =, removeAbstractMethods, ;, this, ., removeAssertionCalls, =, removeAssertionCalls, ;, }, @, Override, public, void]
[., compiler, =, compiler, ;, this, ., removeAbstractMethods, =, removeAbstractMethods, ;, this, ., removeAssertionCalls, =, removeAssertionCalls, ;, }, @, Override]
[;, this, ., removeAbstractMethods, =, removeAbstractMethods, ;, this, ., removeAssertionCalls, =, removeAssertionCalls, ;, }, @, Override, public, void, process, (]
[=, removeAbstractMethods, ;, this, ., removeAssertionCalls, =, removeAssertionCalls, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., removeAbstractMethods, =, removeAbstractMethods, ;, this, ., removeAssertionCalls, =, removeAssertionCalls, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., removeAssertionCalls, =, removeAssertionCalls, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, removeAssertionCalls, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, List, <, Callback]
[., removeAssertionCalls, =, removeAssertionCalls, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, List]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, List, <, Callback, >, passes]
[;, if, (, removeAbstractMethods, ), {, passes, ., add, (, new, FindAbstractMethods, (, ), ), ;, }, if, (, removeAssertionCalls]
[., newArrayList, (, ), ;, if, (, removeAbstractMethods, ), {, passes, ., add, (, new, FindAbstractMethods, (, ), ), ;]
[), {, passes, ., add, (, new, FindAbstractMethods, (, ), ), ;, }, if, (, removeAssertionCalls, ), {, passes, .]
[;, }, if, (, removeAssertionCalls, ), {, passes, ., add, (, new, FindAssertionCalls, (, ), ), ;, }, CombinedCompilerPass, .]
[., add, (, new, FindAbstractMethods, (, ), ), ;, }, if, (, removeAssertionCalls, ), {, passes, ., add, (, new]
[), ;, }, if, (, removeAssertionCalls, ), {, passes, ., add, (, new, FindAssertionCalls, (, ), ), ;, }, CombinedCompilerPass]
[), {, passes, ., add, (, new, FindAssertionCalls, (, ), ), ;, }, CombinedCompilerPass, ., traverse, (, compiler, ,, root]
[;, }, CombinedCompilerPass, ., traverse, (, compiler, ,, root, ,, passes, ), ;, for, (, RemovableAssignment, assignment, :, abstractMethodAssignmentNodes, )]
[., add, (, new, FindAssertionCalls, (, ), ), ;, }, CombinedCompilerPass, ., traverse, (, compiler, ,, root, ,, passes, )]
[), ;, }, CombinedCompilerPass, ., traverse, (, compiler, ,, root, ,, passes, ), ;, for, (, RemovableAssignment, assignment, :, abstractMethodAssignmentNodes]
[;, for, (, RemovableAssignment, assignment, :, abstractMethodAssignmentNodes, ), {, assignment, ., remove, (, ), ;, }, for, (, Node, call]
[., traverse, (, compiler, ,, root, ,, passes, ), ;, for, (, RemovableAssignment, assignment, :, abstractMethodAssignmentNodes, ), {, assignment, .]
[,, root, ,, passes, ), ;, for, (, RemovableAssignment, assignment, :, abstractMethodAssignmentNodes, ), {, assignment, ., remove, (, ), ;]
[,, passes, ), ;, for, (, RemovableAssignment, assignment, :, abstractMethodAssignmentNodes, ), {, assignment, ., remove, (, ), ;, }, for]
[), ;, for, (, RemovableAssignment, assignment, :, abstractMethodAssignmentNodes, ), {, assignment, ., remove, (, ), ;, }, for, (, Node]
[), {, assignment, ., remove, (, ), ;, }, for, (, Node, call, :, assertionCalls, ), {, Node, parent, =]
[;, }, for, (, Node, call, :, assertionCalls, ), {, Node, parent, =, call, ., getParent, (, ), ;, if]
[., remove, (, ), ;, }, for, (, Node, call, :, assertionCalls, ), {, Node, parent, =, call, ., getParent]
[), {, Node, parent, =, call, ., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {]
[;, if, (, parent, ., isExprResult, (, ), ), {, parent, ., getParent, (, ), ., removeChild, (, parent, )]
[., getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {, parent, ., getParent, (, ), .]
[), {, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, }, else, {, Node, firstArg, =, call]
[., isExprResult, (, ), ), {, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, }, else, {]
[;, }, else, {, Node, firstArg, =, call, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, firstArg]
[., removeChild, (, parent, ), ;, }, else, {, Node, firstArg, =, call, ., getFirstChild, (, ), ., getNext, (]
[., getParent, (, ), ., removeChild, (, parent, ), ;, }, else, {, Node, firstArg, =, call, ., getFirstChild, (]
[), ;, }, else, {, Node, firstArg, =, call, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[;, if, (, firstArg, ==, null, ), {, parent, ., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (, call, )]
[., getNext, (, ), ;, if, (, firstArg, ==, null, ), {, parent, ., replaceChild, (, call, ,, NodeUtil, .]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, firstArg, ==, null, ), {, parent, ., replaceChild, (]
[), {, parent, ., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (, call, ), ), ;, }, else, {, parent]
[==, null, ), {, parent, ., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (, call, ), ), ;, }, else]
[), {, parent, ., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (, call, ), ), ;, }, else, {, parent]
[;, }, else, {, parent, ., replaceChild, (, call, ,, firstArg, ., detachFromParent, (, ), ), ;, }, }, compiler]
[., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (, call, ), ), ;, }, else, {, parent, ., replaceChild, (]
[,, NodeUtil, ., newUndefinedNode, (, call, ), ), ;, }, else, {, parent, ., replaceChild, (, call, ,, firstArg, .]
[), ;, }, else, {, parent, ., replaceChild, (, call, ,, firstArg, ., detachFromParent, (, ), ), ;, }, }]
[., newUndefinedNode, (, call, ), ), ;, }, else, {, parent, ., replaceChild, (, call, ,, firstArg, ., detachFromParent, (]
[), ), ;, }, else, {, parent, ., replaceChild, (, call, ,, firstArg, ., detachFromParent, (, ), ), ;, }]
[;, }, }, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[., replaceChild, (, call, ,, firstArg, ., detachFromParent, (, ), ), ;, }, }, compiler, ., reportCodeChange, (, ), ;]
[,, firstArg, ., detachFromParent, (, ), ), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[., detachFromParent, (, ), ), ;, }, }, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[;, }, }, }]
[., reportCodeChange, (, ), ;, }, }, }]
