[direction, ;, private, Vector3D, zero, ;, public, Line, (, final, Vector3D, p1, ,, final, Vector3D, p2, ), throws, MathIllegalArgumentException, {]
[private, Vector3D, zero, ;, public, Line, (, final, Vector3D, p1, ,, final, Vector3D, p2, ), throws, MathIllegalArgumentException, {, reset, (]
[zero, ;, public, Line, (, final, Vector3D, p1, ,, final, Vector3D, p2, ), throws, MathIllegalArgumentException, {, reset, (, p1, ,]
[), throws, MathIllegalArgumentException, {, reset, (, p1, ,, p2, ), ;, }, public, Line, (, final, Line, line, ), {]
[), throws, MathIllegalArgumentException, {, reset, (, p1, ,, p2, ), ;, }, public, Line, (, final, Line, line, ), {]
[reset, (, p1, ,, p2, ), ;, }, public, Line, (, final, Line, line, ), {, this, ., direction, =]
[reset, (, p1, ,, p2, ), ;, }, public, Line, (, final, Line, line, ), {, this, ., direction, =]
[p2, ), ;, }, public, Line, (, final, Line, line, ), {, this, ., direction, =, line, ., direction, ;]
[p2, ), ;, }, public, Line, (, final, Line, line, ), {, this, ., direction, =, line, ., direction, ;]
[public, Line, (, final, Line, line, ), {, this, ., direction, =, line, ., direction, ;, this, ., zero, =]
[public, Line, (, final, Line, line, ), {, this, ., direction, =, line, ., direction, ;, this, ., zero, =]
[}, public, void, reset, (, final, Vector3D, p1, ,, final, Vector3D, p2, ), throws, MathIllegalArgumentException, {, final, Vector3D, delta, =]
[}, public, void, reset, (, final, Vector3D, p1, ,, final, Vector3D, p2, ), throws, MathIllegalArgumentException, {, final, Vector3D, delta, =]
[(, final, Vector3D, p1, ,, final, Vector3D, p2, ), throws, MathIllegalArgumentException, {, final, Vector3D, delta, =, p2, ., subtract, (]
[p2, ), throws, MathIllegalArgumentException, {, final, Vector3D, delta, =, p2, ., subtract, (, p1, ), ;, final, double, norm2, =]
[p2, ), throws, MathIllegalArgumentException, {, final, Vector3D, delta, =, p2, ., subtract, (, p1, ), ;, final, double, norm2, =]
[=, p2, ., subtract, (, p1, ), ;, final, double, norm2, =, delta, ., getNormSq, (, ), ;, if, (]
[=, p2, ., subtract, (, p1, ), ;, final, double, norm2, =, delta, ., getNormSq, (, ), ;, if, (]
[., subtract, (, p1, ), ;, final, double, norm2, =, delta, ., getNormSq, (, ), ;, if, (, norm2, ==]
[), ;, final, double, norm2, =, delta, ., getNormSq, (, ), ;, if, (, norm2, ==, 0.0, ), {, throw]
[double, norm2, =, delta, ., getNormSq, (, ), ;, if, (, norm2, ==, 0.0, ), {, throw, new, MathIllegalArgumentException, (]
[double, norm2, =, delta, ., getNormSq, (, ), ;, if, (, norm2, ==, 0.0, ), {, throw, new, MathIllegalArgumentException, (]
[(, ), ;, if, (, norm2, ==, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }]
[(, ), ;, if, (, norm2, ==, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }]
[(, norm2, ==, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, this, ., direction, =]
[0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, this, ., direction, =, new, Vector3D, (]
[0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, this, ., direction, =, new, Vector3D, (]
[{, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, this, ., direction, =, new, Vector3D, (, 1.0, /]
[{, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, this, ., direction, =, new, Vector3D, (, 1.0, /]
[(, LocalizedFormats, ., ZERO_NORM, ), ;, }, this, ., direction, =, new, Vector3D, (, 1.0, /, FastMath, ., sqrt, (]
[ZERO_NORM, ), ;, }, this, ., direction, =, new, Vector3D, (, 1.0, /, FastMath, ., sqrt, (, norm2, ), ,]
[}, this, ., direction, =, new, Vector3D, (, 1.0, /, FastMath, ., sqrt, (, norm2, ), ,, delta, ), ;]
[., direction, =, new, Vector3D, (, 1.0, /, FastMath, ., sqrt, (, norm2, ), ,, delta, ), ;, zero, =]
[new, Vector3D, (, 1.0, /, FastMath, ., sqrt, (, norm2, ), ,, delta, ), ;, zero, =, new, Vector3D, (]
[(, 1.0, /, FastMath, ., sqrt, (, norm2, ), ,, delta, ), ;, zero, =, new, Vector3D, (, 1.0, ,]
[/, FastMath, ., sqrt, (, norm2, ), ,, delta, ), ;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,]
[/, FastMath, ., sqrt, (, norm2, ), ,, delta, ), ;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,]
[FastMath, ., sqrt, (, norm2, ), ,, delta, ), ;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,, -]
[FastMath, ., sqrt, (, norm2, ), ,, delta, ), ;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,, -]
[norm2, ), ,, delta, ), ;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,, -, p1, ., dotProduct, (]
[delta, ), ;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,, -, p1, ., dotProduct, (, delta, ), /]
[;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,, -, p1, ., dotProduct, (, delta, ), /, norm2, ,]
[(, delta, ), /, norm2, ,, delta, ), ;, }, public, Line, revert, (, ), {, final, Line, reverted, =]
[/, norm2, ,, delta, ), ;, }, public, Line, revert, (, ), {, final, Line, reverted, =, new, Line, (]
[delta, ), ;, }, public, Line, revert, (, ), {, final, Line, reverted, =, new, Line, (, this, ), ;]
[delta, ), ;, }, public, Line, revert, (, ), {, final, Line, reverted, =, new, Line, (, this, ), ;]
[public, Line, revert, (, ), {, final, Line, reverted, =, new, Line, (, this, ), ;, reverted, ., direction, =]
[public, Line, revert, (, ), {, final, Line, reverted, =, new, Line, (, this, ), ;, reverted, ., direction, =]
[public, Line, revert, (, ), {, final, Line, reverted, =, new, Line, (, this, ), ;, reverted, ., direction, =]
[=, new, Line, (, this, ), ;, reverted, ., direction, =, reverted, ., direction, ., negate, (, ), ;, return]
[=, reverted, ., direction, ., negate, (, ), ;, return, reverted, ;, }, public, Vector3D, getDirection, (, ), {, return]
[reverted, ;, }, public, Vector3D, getDirection, (, ), {, return, direction, ;, }, public, Vector3D, getOrigin, (, ), {, return]
[public, Vector3D, getOrigin, (, ), {, return, zero, ;, }, public, double, getAbscissa, (, final, Vector3D, point, ), {, return]
[public, Vector3D, getOrigin, (, ), {, return, zero, ;, }, public, double, getAbscissa, (, final, Vector3D, point, ), {, return]
[public, Vector3D, getOrigin, (, ), {, return, zero, ;, }, public, double, getAbscissa, (, final, Vector3D, point, ), {, return]
[), {, return, zero, ;, }, public, double, getAbscissa, (, final, Vector3D, point, ), {, return, point, ., subtract, (]
[}, public, double, getAbscissa, (, final, Vector3D, point, ), {, return, point, ., subtract, (, zero, ), ., dotProduct, (]
[(, zero, ), ., dotProduct, (, direction, ), ;, }, public, Vector3D, pointAt, (, final, double, abscissa, ), {, return]
[., dotProduct, (, direction, ), ;, }, public, Vector3D, pointAt, (, final, double, abscissa, ), {, return, new, Vector3D, (]
[(, direction, ), ;, }, public, Vector3D, pointAt, (, final, double, abscissa, ), {, return, new, Vector3D, (, 1.0, ,]
[), ;, }, public, Vector3D, pointAt, (, final, double, abscissa, ), {, return, new, Vector3D, (, 1.0, ,, zero, ,]
[}, public, Vector3D, pointAt, (, final, double, abscissa, ), {, return, new, Vector3D, (, 1.0, ,, zero, ,, abscissa, ,]
[,, abscissa, ,, direction, ), ;, }, public, Vector1D, toSubSpace, (, final, Vector, <, Euclidean3D, >, point, ), {, return]
[direction, ), ;, }, public, Vector1D, toSubSpace, (, final, Vector, <, Euclidean3D, >, point, ), {, return, new, Vector1D, (]
[;, }, public, Vector1D, toSubSpace, (, final, Vector, <, Euclidean3D, >, point, ), {, return, new, Vector1D, (, getAbscissa, (]
[Vector1D, toSubSpace, (, final, Vector, <, Euclidean3D, >, point, ), {, return, new, Vector1D, (, getAbscissa, (, (, Vector3D, )]
[Vector3D, ), point, ), ), ;, }, public, Vector3D, toSpace, (, final, Vector, <, Euclidean1D, >, point, ), {, return]
[point, ), ), ;, }, public, Vector3D, toSpace, (, final, Vector, <, Euclidean1D, >, point, ), {, return, pointAt, (]
[point, ), ), ;, }, public, Vector3D, toSpace, (, final, Vector, <, Euclidean1D, >, point, ), {, return, pointAt, (]
[), ), ;, }, public, Vector3D, toSpace, (, final, Vector, <, Euclidean1D, >, point, ), {, return, pointAt, (, (]
[}, public, Vector3D, toSpace, (, final, Vector, <, Euclidean1D, >, point, ), {, return, pointAt, (, (, (, Vector1D, )]
[., getX, (, ), ), ;, }, public, boolean, isSimilarTo, (, final, Line, line, ), {, final, double, angle, =]
[., getX, (, ), ), ;, }, public, boolean, isSimilarTo, (, final, Line, line, ), {, final, double, angle, =]
[), ;, }, public, boolean, isSimilarTo, (, final, Line, line, ), {, final, double, angle, =, Vector3D, ., angle, (]
[}, public, boolean, isSimilarTo, (, final, Line, line, ), {, final, double, angle, =, Vector3D, ., angle, (, direction, ,]
[}, public, boolean, isSimilarTo, (, final, Line, line, ), {, final, double, angle, =, Vector3D, ., angle, (, direction, ,]
[Line, line, ), {, final, double, angle, =, Vector3D, ., angle, (, direction, ,, line, ., direction, ), ;, return]
[Line, line, ), {, final, double, angle, =, Vector3D, ., angle, (, direction, ,, line, ., direction, ), ;, return]
[line, ), {, final, double, angle, =, Vector3D, ., angle, (, direction, ,, line, ., direction, ), ;, return, (]
[line, ), {, final, double, angle, =, Vector3D, ., angle, (, direction, ,, line, ., direction, ), ;, return, (]
[), {, final, double, angle, =, Vector3D, ., angle, (, direction, ,, line, ., direction, ), ;, return, (, (]
[), {, final, double, angle, =, Vector3D, ., angle, (, direction, ,, line, ., direction, ), ;, return, (, (]
[final, double, angle, =, Vector3D, ., angle, (, direction, ,, line, ., direction, ), ;, return, (, (, angle, <]
[=, Vector3D, ., angle, (, direction, ,, line, ., direction, ), ;, return, (, (, angle, <, 1.0e-10, ), ||]
[Vector3D, ., angle, (, direction, ,, line, ., direction, ), ;, return, (, (, angle, <, 1.0e-10, ), ||, (]
[Vector3D, ., angle, (, direction, ,, line, ., direction, ), ;, return, (, (, angle, <, 1.0e-10, ), ||, (]
[angle, (, direction, ,, line, ., direction, ), ;, return, (, (, angle, <, 1.0e-10, ), ||, (, angle, >]
[(, direction, ,, line, ., direction, ), ;, return, (, (, angle, <, 1.0e-10, ), ||, (, angle, >, (]
[(, direction, ,, line, ., direction, ), ;, return, (, (, angle, <, 1.0e-10, ), ||, (, angle, >, (]
[(, direction, ,, line, ., direction, ), ;, return, (, (, angle, <, 1.0e-10, ), ||, (, angle, >, (]
[., direction, ), ;, return, (, (, angle, <, 1.0e-10, ), ||, (, angle, >, (, FastMath, ., PI, -]
[(, (, angle, <, 1.0e-10, ), ||, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), ), &&]
[angle, <, 1.0e-10, ), ||, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), ), &&, contains, (]
[angle, <, 1.0e-10, ), ||, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), ), &&, contains, (]
[), &&, contains, (, line, ., zero, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return]
[), &&, contains, (, line, ., zero, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return]
[contains, (, line, ., zero, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return, distance, (]
[., zero, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return, distance, (, p, ), <]
[(, p, ), <, 1.0e-10, ;, }, public, double, distance, (, final, Vector3D, p, ), {, final, Vector3D, d, =]
[(, p, ), <, 1.0e-10, ;, }, public, double, distance, (, final, Vector3D, p, ), {, final, Vector3D, d, =]
[1.0e-10, ;, }, public, double, distance, (, final, Vector3D, p, ), {, final, Vector3D, d, =, p, ., subtract, (]
[final, Vector3D, p, ), {, final, Vector3D, d, =, p, ., subtract, (, zero, ), ;, final, Vector3D, n, =]
[), {, final, Vector3D, d, =, p, ., subtract, (, zero, ), ;, final, Vector3D, n, =, new, Vector3D, (]
[final, Vector3D, d, =, p, ., subtract, (, zero, ), ;, final, Vector3D, n, =, new, Vector3D, (, 1.0, ,]
[d, =, p, ., subtract, (, zero, ), ;, final, Vector3D, n, =, new, Vector3D, (, 1.0, ,, d, ,]
[=, p, ., subtract, (, zero, ), ;, final, Vector3D, n, =, new, Vector3D, (, 1.0, ,, d, ,, -]
[=, p, ., subtract, (, zero, ), ;, final, Vector3D, n, =, new, Vector3D, (, 1.0, ,, d, ,, -]
[(, zero, ), ;, final, Vector3D, n, =, new, Vector3D, (, 1.0, ,, d, ,, -, d, ., dotProduct, (]
[;, final, Vector3D, n, =, new, Vector3D, (, 1.0, ,, d, ,, -, d, ., dotProduct, (, direction, ), ,]
[=, new, Vector3D, (, 1.0, ,, d, ,, -, d, ., dotProduct, (, direction, ), ,, direction, ), ;, return]
[=, new, Vector3D, (, 1.0, ,, d, ,, -, d, ., dotProduct, (, direction, ), ,, direction, ), ;, return]
[n, ., getNorm, (, ), ;, }, public, double, distance, (, final, Line, line, ), {, final, Vector3D, normal, =]
[n, ., getNorm, (, ), ;, }, public, double, distance, (, final, Line, line, ), {, final, Vector3D, normal, =]
[), ;, }, public, double, distance, (, final, Line, line, ), {, final, Vector3D, normal, =, Vector3D, ., crossProduct, (]
[}, public, double, distance, (, final, Line, line, ), {, final, Vector3D, normal, =, Vector3D, ., crossProduct, (, direction, ,]
[}, public, double, distance, (, final, Line, line, ), {, final, Vector3D, normal, =, Vector3D, ., crossProduct, (, direction, ,]
[{, final, Vector3D, normal, =, Vector3D, ., crossProduct, (, direction, ,, line, ., direction, ), ;, final, double, n, =]
[{, final, Vector3D, normal, =, Vector3D, ., crossProduct, (, direction, ,, line, ., direction, ), ;, final, double, n, =]
[(, direction, ,, line, ., direction, ), ;, final, double, n, =, normal, ., getNorm, (, ), ;, if, (]
[(, direction, ,, line, ., direction, ), ;, final, double, n, =, normal, ., getNorm, (, ), ;, if, (]
[,, line, ., direction, ), ;, final, double, n, =, normal, ., getNorm, (, ), ;, if, (, n, <]
[,, line, ., direction, ), ;, final, double, n, =, normal, ., getNorm, (, ), ;, if, (, n, <]
[final, double, n, =, normal, ., getNorm, (, ), ;, if, (, n, <, Precision, ., SAFE_MIN, ), {, return]
[n, =, normal, ., getNorm, (, ), ;, if, (, n, <, Precision, ., SAFE_MIN, ), {, return, distance, (]
[n, =, normal, ., getNorm, (, ), ;, if, (, n, <, Precision, ., SAFE_MIN, ), {, return, distance, (]
[n, <, Precision, ., SAFE_MIN, ), {, return, distance, (, line, ., zero, ), ;, }, final, double, offset, =]
[n, <, Precision, ., SAFE_MIN, ), {, return, distance, (, line, ., zero, ), ;, }, final, double, offset, =]
[n, <, Precision, ., SAFE_MIN, ), {, return, distance, (, line, ., zero, ), ;, }, final, double, offset, =]
[n, <, Precision, ., SAFE_MIN, ), {, return, distance, (, line, ., zero, ), ;, }, final, double, offset, =]
[n, <, Precision, ., SAFE_MIN, ), {, return, distance, (, line, ., zero, ), ;, }, final, double, offset, =]
[{, return, distance, (, line, ., zero, ), ;, }, final, double, offset, =, line, ., zero, ., subtract, (]
[., zero, ), ;, }, final, double, offset, =, line, ., zero, ., subtract, (, zero, ), ., dotProduct, (]
[;, }, final, double, offset, =, line, ., zero, ., subtract, (, zero, ), ., dotProduct, (, normal, ), /]
[double, offset, =, line, ., zero, ., subtract, (, zero, ), ., dotProduct, (, normal, ), /, n, ;, return]
[double, offset, =, line, ., zero, ., subtract, (, zero, ), ., dotProduct, (, normal, ), /, n, ;, return]
[., zero, ., subtract, (, zero, ), ., dotProduct, (, normal, ), /, n, ;, return, FastMath, ., abs, (]
[., abs, (, offset, ), ;, }, public, Vector3D, closestPoint, (, final, Line, line, ), {, final, double, cos, =]
[., abs, (, offset, ), ;, }, public, Vector3D, closestPoint, (, final, Line, line, ), {, final, double, cos, =]
[), ;, }, public, Vector3D, closestPoint, (, final, Line, line, ), {, final, double, cos, =, direction, ., dotProduct, (]
[), ;, }, public, Vector3D, closestPoint, (, final, Line, line, ), {, final, double, cos, =, direction, ., dotProduct, (]
[line, ), {, final, double, cos, =, direction, ., dotProduct, (, line, ., direction, ), ;, final, double, n, =]
[line, ), {, final, double, cos, =, direction, ., dotProduct, (, line, ., direction, ), ;, final, double, n, =]
[{, final, double, cos, =, direction, ., dotProduct, (, line, ., direction, ), ;, final, double, n, =, 1, -]
[{, final, double, cos, =, direction, ., dotProduct, (, line, ., direction, ), ;, final, double, n, =, 1, -]
[double, cos, =, direction, ., dotProduct, (, line, ., direction, ), ;, final, double, n, =, 1, -, cos, *]
[., dotProduct, (, line, ., direction, ), ;, final, double, n, =, 1, -, cos, *, cos, ;, if, (]
[., dotProduct, (, line, ., direction, ), ;, final, double, n, =, 1, -, cos, *, cos, ;, if, (]
[(, line, ., direction, ), ;, final, double, n, =, 1, -, cos, *, cos, ;, if, (, n, <]
[(, line, ., direction, ), ;, final, double, n, =, 1, -, cos, *, cos, ;, if, (, n, <]
[final, double, n, =, 1, -, cos, *, cos, ;, if, (, n, <, Precision, ., EPSILON, ), {, return]
[*, cos, ;, if, (, n, <, Precision, ., EPSILON, ), {, return, zero, ;, }, final, Vector3D, delta0, =]
[*, cos, ;, if, (, n, <, Precision, ., EPSILON, ), {, return, zero, ;, }, final, Vector3D, delta0, =]
[*, cos, ;, if, (, n, <, Precision, ., EPSILON, ), {, return, zero, ;, }, final, Vector3D, delta0, =]
[<, Precision, ., EPSILON, ), {, return, zero, ;, }, final, Vector3D, delta0, =, line, ., zero, ., subtract, (]
[zero, ;, }, final, Vector3D, delta0, =, line, ., zero, ., subtract, (, zero, ), ;, final, double, a, =]
[zero, ;, }, final, Vector3D, delta0, =, line, ., zero, ., subtract, (, zero, ), ;, final, double, a, =]
[Vector3D, delta0, =, line, ., zero, ., subtract, (, zero, ), ;, final, double, a, =, delta0, ., dotProduct, (]
[subtract, (, zero, ), ;, final, double, a, =, delta0, ., dotProduct, (, direction, ), ;, final, double, b, =]
[subtract, (, zero, ), ;, final, double, a, =, delta0, ., dotProduct, (, direction, ), ;, final, double, b, =]
[;, final, double, a, =, delta0, ., dotProduct, (, direction, ), ;, final, double, b, =, delta0, ., dotProduct, (]
[;, final, double, a, =, delta0, ., dotProduct, (, direction, ), ;, final, double, b, =, delta0, ., dotProduct, (]
[., dotProduct, (, direction, ), ;, final, double, b, =, delta0, ., dotProduct, (, line, ., direction, ), ;, return]
[direction, ), ;, final, double, b, =, delta0, ., dotProduct, (, line, ., direction, ), ;, return, new, Vector3D, (]
[;, final, double, b, =, delta0, ., dotProduct, (, line, ., direction, ), ;, return, new, Vector3D, (, 1, ,]
[double, b, =, delta0, ., dotProduct, (, line, ., direction, ), ;, return, new, Vector3D, (, 1, ,, zero, ,]
[double, b, =, delta0, ., dotProduct, (, line, ., direction, ), ;, return, new, Vector3D, (, 1, ,, zero, ,]
[b, =, delta0, ., dotProduct, (, line, ., direction, ), ;, return, new, Vector3D, (, 1, ,, zero, ,, (]
[b, =, delta0, ., dotProduct, (, line, ., direction, ), ;, return, new, Vector3D, (, 1, ,, zero, ,, (]
[delta0, ., dotProduct, (, line, ., direction, ), ;, return, new, Vector3D, (, 1, ,, zero, ,, (, a, -]
[delta0, ., dotProduct, (, line, ., direction, ), ;, return, new, Vector3D, (, 1, ,, zero, ,, (, a, -]
[dotProduct, (, line, ., direction, ), ;, return, new, Vector3D, (, 1, ,, zero, ,, (, a, -, b, *]
[., direction, ), ;, return, new, Vector3D, (, 1, ,, zero, ,, (, a, -, b, *, cos, ), /]
[), ;, return, new, Vector3D, (, 1, ,, zero, ,, (, a, -, b, *, cos, ), /, n, ,]
[/, n, ,, direction, ), ;, }, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, closest, =]
[,, direction, ), ;, }, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, closest, =, closestPoint, (]
[}, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, closest, =, closestPoint, (, line, ), ;, return]
[}, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, closest, =, closestPoint, (, line, ), ;, return]
[}, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, closest, =, closestPoint, (, line, ), ;, return]
[(, final, Line, line, ), {, final, Vector3D, closest, =, closestPoint, (, line, ), ;, return, line, ., contains, (]
[line, ), {, final, Vector3D, closest, =, closestPoint, (, line, ), ;, return, line, ., contains, (, closest, ), ?]
[{, final, Vector3D, closest, =, closestPoint, (, line, ), ;, return, line, ., contains, (, closest, ), ?, closest, :]
[return, line, ., contains, (, closest, ), ?, closest, :, null, ;, }, public, SubLine, wholeLine, (, ), {, return]
[contains, (, closest, ), ?, closest, :, null, ;, }, public, SubLine, wholeLine, (, ), {, return, new, SubLine, (]
[closest, ), ?, closest, :, null, ;, }, public, SubLine, wholeLine, (, ), {, return, new, SubLine, (, this, ,]
