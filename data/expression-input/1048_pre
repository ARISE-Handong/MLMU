[., Node, ;, import, java, ., util, ., Map, ;, class, TypeInferencePass, implements, CompilerPass, {, static, final, DiagnosticType, DATAFLOW_ERROR, =]
[., Node, ;, import, java, ., util, ., Map, ;, class, TypeInferencePass, implements, CompilerPass, {, static, final, DiagnosticType, DATAFLOW_ERROR, =]
[java, ., util, ., Map, ;, class, TypeInferencePass, implements, CompilerPass, {, static, final, DiagnosticType, DATAFLOW_ERROR, =, DiagnosticType, ., warning, (]
[util, ., Map, ;, class, TypeInferencePass, implements, CompilerPass, {, static, final, DiagnosticType, DATAFLOW_ERROR, =, DiagnosticType, ., warning, (, "JSC_INTERNAL_ERROR_DATAFLOW", ,]
[,, AssertionFunctionSpec, >, assertionFunctionsMap, ;, TypeInferencePass, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ), {]
[,, AssertionFunctionSpec, >, assertionFunctionsMap, ;, TypeInferencePass, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ), {]
[;, TypeInferencePass, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ), {, this, ., compiler, =]
[(, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ), {, this, ., compiler, =, compiler, ;]
[(, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ), {, this, ., compiler, =, compiler, ;]
[ReverseAbstractInterpreter, reverseInterpreter, ,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ), {, this, ., compiler, =, compiler, ;, this, ., reverseInterpreter, =]
[,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ), {, this, ., compiler, =, compiler, ;, this, ., reverseInterpreter, =, reverseInterpreter, ;]
[,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ), {, this, ., compiler, =, compiler, ;, this, ., reverseInterpreter, =, reverseInterpreter, ;]
[MemoizedScopeCreator, scopeCreator, ), {, this, ., compiler, =, compiler, ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., topScope, =]
[), {, this, ., compiler, =, compiler, ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., topScope, =, topScope, ;]
[), {, this, ., compiler, =, compiler, ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., topScope, =, topScope, ;]
[compiler, =, compiler, ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =]
[compiler, ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;]
[this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, assertionFunctionsMap, =]
[this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, assertionFunctionsMap, =]
[;, this, ., scopeCreator, =, scopeCreator, ;, assertionFunctionsMap, =, Maps, ., newHashMap, (, ), ;, for, (, AssertionFunctionSpec, assertionFucntion, :]
[;, this, ., scopeCreator, =, scopeCreator, ;, assertionFunctionsMap, =, Maps, ., newHashMap, (, ), ;, for, (, AssertionFunctionSpec, assertionFucntion, :]
[;, this, ., scopeCreator, =, scopeCreator, ;, assertionFunctionsMap, =, Maps, ., newHashMap, (, ), ;, for, (, AssertionFunctionSpec, assertionFucntion, :]
[newHashMap, (, ), ;, for, (, AssertionFunctionSpec, assertionFucntion, :, compiler, ., getCodingConvention, (, ), ., getAssertionFunctions, (, ), ), {]
[newHashMap, (, ), ;, for, (, AssertionFunctionSpec, assertionFucntion, :, compiler, ., getCodingConvention, (, ), ., getAssertionFunctions, (, ), ), {]
[for, (, AssertionFunctionSpec, assertionFucntion, :, compiler, ., getCodingConvention, (, ), ., getAssertionFunctions, (, ), ), {, assertionFunctionsMap, ., put, (]
[for, (, AssertionFunctionSpec, assertionFucntion, :, compiler, ., getCodingConvention, (, ), ., getAssertionFunctions, (, ), ), {, assertionFunctionsMap, ., put, (]
[., getCodingConvention, (, ), ., getAssertionFunctions, (, ), ), {, assertionFunctionsMap, ., put, (, assertionFucntion, ., getFunctionName, (, ), ,]
[), ;, }, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Node, externsAndJs, =]
[), ;, }, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Node, externsAndJs, =]
[public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;]
[public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;]
[Node, externsRoot, ,, Node, jsRoot, ), {, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[Node, externsRoot, ,, Node, jsRoot, ), {, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[,, Node, jsRoot, ), {, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=]
[), {, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;]
[), {, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;]
[=, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (]
[=, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (]
[=, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (]
[., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==]
[(, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||]
[(, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||]
[., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (]
[!=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;]
[), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, inferAllScopes, (]
[., hasChild, (, externsRoot, ), ), ;, inferAllScopes, (, externsAndJs, ), ;, }, void, inferAllScopes, (, Node, node, ), {]
[., hasChild, (, externsRoot, ), ), ;, inferAllScopes, (, externsAndJs, ), ;, }, void, inferAllScopes, (, Node, node, ), {]
[hasChild, (, externsRoot, ), ), ;, inferAllScopes, (, externsAndJs, ), ;, }, void, inferAllScopes, (, Node, node, ), {, (]
[), ), ;, inferAllScopes, (, externsAndJs, ), ;, }, void, inferAllScopes, (, Node, node, ), {, (, new, NodeTraversal, (]
[;, inferAllScopes, (, externsAndJs, ), ;, }, void, inferAllScopes, (, Node, node, ), {, (, new, NodeTraversal, (, compiler, ,]
[;, }, void, inferAllScopes, (, Node, node, ), {, (, new, NodeTraversal, (, compiler, ,, new, FirstScopeBuildingCallback, (, ), ,]
[node, ), {, (, new, NodeTraversal, (, compiler, ,, new, FirstScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (]
[{, (, new, NodeTraversal, (, compiler, ,, new, FirstScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (, node, ,]
[NodeTraversal, (, compiler, ,, new, FirstScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (, node, ,, topScope, ), ;]
[NodeTraversal, (, compiler, ,, new, FirstScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (, node, ,, topScope, ), ;]
[(, compiler, ,, new, FirstScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (, node, ,, topScope, ), ;, (]
[new, FirstScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (, node, ,, topScope, ), ;, (, new, NodeTraversal, (]
[(, ), ,, scopeCreator, ), ), ., traverseWithScope, (, node, ,, topScope, ), ;, (, new, NodeTraversal, (, compiler, ,]
[), ., traverseWithScope, (, node, ,, topScope, ), ;, (, new, NodeTraversal, (, compiler, ,, new, SecondScopeBuildingCallback, (, ), ,]
[topScope, ), ;, (, new, NodeTraversal, (, compiler, ,, new, SecondScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (]
[;, (, new, NodeTraversal, (, compiler, ,, new, SecondScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (, node, ,]
[(, node, ,, topScope, ), ;, }, void, inferScope, (, Node, n, ,, Scope, scope, ), {, TypeInference, typeInference, =]
[topScope, ), ;, }, void, inferScope, (, Node, n, ,, Scope, scope, ), {, TypeInference, typeInference, =, new, TypeInference, (]
[;, }, void, inferScope, (, Node, n, ,, Scope, scope, ), {, TypeInference, typeInference, =, new, TypeInference, (, compiler, ,]
[void, inferScope, (, Node, n, ,, Scope, scope, ), {, TypeInference, typeInference, =, new, TypeInference, (, compiler, ,, computeCfg, (]
[Node, n, ,, Scope, scope, ), {, TypeInference, typeInference, =, new, TypeInference, (, compiler, ,, computeCfg, (, n, ), ,]
[,, Scope, scope, ), {, TypeInference, typeInference, =, new, TypeInference, (, compiler, ,, computeCfg, (, n, ), ,, reverseInterpreter, ,]
[scope, ), {, TypeInference, typeInference, =, new, TypeInference, (, compiler, ,, computeCfg, (, n, ), ,, reverseInterpreter, ,, scope, ,]
[=, new, TypeInference, (, compiler, ,, computeCfg, (, n, ), ,, reverseInterpreter, ,, scope, ,, assertionFunctionsMap, ), ;, try, {]
[=, new, TypeInference, (, compiler, ,, computeCfg, (, n, ), ,, reverseInterpreter, ,, scope, ,, assertionFunctionsMap, ), ;, try, {]
[computeCfg, (, n, ), ,, reverseInterpreter, ,, scope, ,, assertionFunctionsMap, ), ;, try, {, typeInference, ., analyze, (, ), ;]
[computeCfg, (, n, ), ,, reverseInterpreter, ,, scope, ,, assertionFunctionsMap, ), ;, try, {, typeInference, ., analyze, (, ), ;]
[computeCfg, (, n, ), ,, reverseInterpreter, ,, scope, ,, assertionFunctionsMap, ), ;, try, {, typeInference, ., analyze, (, ), ;]
[,, assertionFunctionsMap, ), ;, try, {, typeInference, ., analyze, (, ), ;, compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (]
[compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (, scope, ), ;, }, catch, (, DataFlowAnalysis, ., MaxIterationsExceededException, e, ), {]
[compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (, scope, ), ;, }, catch, (, DataFlowAnalysis, ., MaxIterationsExceededException, e, ), {]
[), ., resolveTypesInScope, (, scope, ), ;, }, catch, (, DataFlowAnalysis, ., MaxIterationsExceededException, e, ), {, compiler, ., report, (]
[), ., resolveTypesInScope, (, scope, ), ;, }, catch, (, DataFlowAnalysis, ., MaxIterationsExceededException, e, ), {, compiler, ., report, (]
[scope, ), ;, }, catch, (, DataFlowAnalysis, ., MaxIterationsExceededException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[scope, ), ;, }, catch, (, DataFlowAnalysis, ., MaxIterationsExceededException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[DataFlowAnalysis, ., MaxIterationsExceededException, e, ), {, compiler, ., report, (, JSError, ., make, (, n, ., getSourceFileName, (, ), ,]
[MaxIterationsExceededException, e, ), {, compiler, ., report, (, JSError, ., make, (, n, ., getSourceFileName, (, ), ,, n, ,]
[), ;, }, }, private, class, FirstScopeBuildingCallback, extends, AbstractScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {]
[), ;, }, }, private, class, FirstScopeBuildingCallback, extends, AbstractScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {]
[), {, }, }, private, class, SecondScopeBuildingCallback, extends, AbstractScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {]
[}, }, private, class, SecondScopeBuildingCallback, extends, AbstractScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, inferScope, (]
[}, }, private, class, SecondScopeBuildingCallback, extends, AbstractScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, inferScope, (]
[AbstractScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, inferScope, (, t, ., getCurrentNode, (, ), ,]
[AbstractScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, inferScope, (, t, ., getCurrentNode, (, ), ,]
[Node, parent, ), {, }, }, private, ControlFlowGraph, <, Node, >, computeCfg, (, Node, n, ), {, ControlFlowAnalysis, cfa, =]
[{, }, }, private, ControlFlowGraph, <, Node, >, computeCfg, (, Node, n, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (]
[}, private, ControlFlowGraph, <, Node, >, computeCfg, (, Node, n, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,]
[ControlFlowGraph, <, Node, >, computeCfg, (, Node, n, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,]
[>, computeCfg, (, Node, n, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, false, ), ;]
[>, computeCfg, (, Node, n, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, false, ), ;]
[n, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, false, ), ;, cfa, ., process, (]
[{, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, false, ), ;, cfa, ., process, (, null, ,]
[new, ControlFlowAnalysis, (, compiler, ,, false, ,, false, ), ;, cfa, ., process, (, null, ,, n, ), ;, return]
[new, ControlFlowAnalysis, (, compiler, ,, false, ,, false, ), ;, cfa, ., process, (, null, ,, n, ), ;, return]
