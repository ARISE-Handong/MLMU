[index, ,, Writer, out, ), throws, IOException, ;, public, final, String, translate, (, final, CharSequence, input, ), {, if, (]
[index, ,, Writer, out, ), throws, IOException, ;, public, final, String, translate, (, final, CharSequence, input, ), {, if, (]
[Writer, out, ), throws, IOException, ;, public, final, String, translate, (, final, CharSequence, input, ), {, if, (, input, ==]
[IOException, ;, public, final, String, translate, (, final, CharSequence, input, ), {, if, (, input, ==, null, ), {, return]
[input, ), {, if, (, input, ==, null, ), {, return, null, ;, }, try, {, final, StringWriter, writer, =]
[if, (, input, ==, null, ), {, return, null, ;, }, try, {, final, StringWriter, writer, =, new, StringWriter, (]
[if, (, input, ==, null, ), {, return, null, ;, }, try, {, final, StringWriter, writer, =, new, StringWriter, (]
[if, (, input, ==, null, ), {, return, null, ;, }, try, {, final, StringWriter, writer, =, new, StringWriter, (]
[{, return, null, ;, }, try, {, final, StringWriter, writer, =, new, StringWriter, (, input, ., length, (, ), *]
[;, }, try, {, final, StringWriter, writer, =, new, StringWriter, (, input, ., length, (, ), *, 2, ), ;]
[try, {, final, StringWriter, writer, =, new, StringWriter, (, input, ., length, (, ), *, 2, ), ;, translate, (]
[final, StringWriter, writer, =, new, StringWriter, (, input, ., length, (, ), *, 2, ), ;, translate, (, input, ,]
[new, StringWriter, (, input, ., length, (, ), *, 2, ), ;, translate, (, input, ,, writer, ), ;, return]
[new, StringWriter, (, input, ., length, (, ), *, 2, ), ;, translate, (, input, ,, writer, ), ;, return]
[,, writer, ), ;, return, writer, ., toString, (, ), ;, }, catch, (, final, IOException, ioe, ), {, throw]
[;, return, writer, ., toString, (, ), ;, }, catch, (, final, IOException, ioe, ), {, throw, new, RuntimeException, (]
[}, }, public, final, void, translate, (, final, CharSequence, input, ,, final, Writer, out, ), throws, IOException, {, if, (]
[}, }, public, final, void, translate, (, final, CharSequence, input, ,, final, Writer, out, ), throws, IOException, {, if, (]
[public, final, void, translate, (, final, CharSequence, input, ,, final, Writer, out, ), throws, IOException, {, if, (, out, ==]
[(, final, CharSequence, input, ,, final, Writer, out, ), throws, IOException, {, if, (, out, ==, null, ), {, throw]
[input, ,, final, Writer, out, ), throws, IOException, {, if, (, out, ==, null, ), {, throw, new, IllegalArgumentException, (]
[throws, IOException, {, if, (, out, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Writer must not be null", ), ;, }, if, (]
[throws, IOException, {, if, (, out, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Writer must not be null", ), ;, }, if, (]
[{, if, (, out, ==, null, ), {, throw, new, IllegalArgumentException, (, "The Writer must not be null", ), ;, }, if, (, input, ==]
[new, IllegalArgumentException, (, "The Writer must not be null", ), ;, }, if, (, input, ==, null, ), {, return, ;, }, int, pos, =]
[}, if, (, input, ==, null, ), {, return, ;, }, int, pos, =, 0, ;, final, int, len, =]
[}, if, (, input, ==, null, ), {, return, ;, }, int, pos, =, 0, ;, final, int, len, =]
[return, ;, }, int, pos, =, 0, ;, final, int, len, =, input, ., length, (, ), ;, while, (]
[return, ;, }, int, pos, =, 0, ;, final, int, len, =, input, ., length, (, ), ;, while, (]
[}, int, pos, =, 0, ;, final, int, len, =, input, ., length, (, ), ;, while, (, pos, <]
[int, len, =, input, ., length, (, ), ;, while, (, pos, <, len, ), {, final, int, consumed, =]
[=, input, ., length, (, ), ;, while, (, pos, <, len, ), {, final, int, consumed, =, translate, (]
[., length, (, ), ;, while, (, pos, <, len, ), {, final, int, consumed, =, translate, (, input, ,]
[(, ), ;, while, (, pos, <, len, ), {, final, int, consumed, =, translate, (, input, ,, pos, ,]
[pos, <, len, ), {, final, int, consumed, =, translate, (, input, ,, pos, ,, out, ), ;, if, (]
[pos, <, len, ), {, final, int, consumed, =, translate, (, input, ,, pos, ,, out, ), ;, if, (]
[len, ), {, final, int, consumed, =, translate, (, input, ,, pos, ,, out, ), ;, if, (, consumed, ==]
[input, ,, pos, ,, out, ), ;, if, (, consumed, ==, 0, ), {, final, char, [, ], c, =]
[input, ,, pos, ,, out, ), ;, if, (, consumed, ==, 0, ), {, final, char, [, ], c, =]
[out, ), ;, if, (, consumed, ==, 0, ), {, final, char, [, ], c, =, Character, ., toChars, (]
[out, ), ;, if, (, consumed, ==, 0, ), {, final, char, [, ], c, =, Character, ., toChars, (]
[(, consumed, ==, 0, ), {, final, char, [, ], c, =, Character, ., toChars, (, Character, ., codePointAt, (]
[==, 0, ), {, final, char, [, ], c, =, Character, ., toChars, (, Character, ., codePointAt, (, input, ,]
[final, char, [, ], c, =, Character, ., toChars, (, Character, ., codePointAt, (, input, ,, pos, ), ), ;]
[final, char, [, ], c, =, Character, ., toChars, (, Character, ., codePointAt, (, input, ,, pos, ), ), ;]
[c, =, Character, ., toChars, (, Character, ., codePointAt, (, input, ,, pos, ), ), ;, out, ., write, (]
[., toChars, (, Character, ., codePointAt, (, input, ,, pos, ), ), ;, out, ., write, (, c, ), ;]
[(, Character, ., codePointAt, (, input, ,, pos, ), ), ;, out, ., write, (, c, ), ;, pos, +=]
[(, Character, ., codePointAt, (, input, ,, pos, ), ), ;, out, ., write, (, c, ), ;, pos, +=]
[., write, (, c, ), ;, pos, +=, c, ., length, ;, continue, ;, }, for, (, int, pt, =]
[(, c, ), ;, pos, +=, c, ., length, ;, continue, ;, }, for, (, int, pt, =, 0, ;]
[(, c, ), ;, pos, +=, c, ., length, ;, continue, ;, }, for, (, int, pt, =, 0, ;]
[), ;, pos, +=, c, ., length, ;, continue, ;, }, for, (, int, pt, =, 0, ;, pt, <]
[pos, +=, c, ., length, ;, continue, ;, }, for, (, int, pt, =, 0, ;, pt, <, consumed, ;]
[pos, +=, c, ., length, ;, continue, ;, }, for, (, int, pt, =, 0, ;, pt, <, consumed, ;]
[length, ;, continue, ;, }, for, (, int, pt, =, 0, ;, pt, <, consumed, ;, pt, ++, ), {]
[continue, ;, }, for, (, int, pt, =, 0, ;, pt, <, consumed, ;, pt, ++, ), {, pos, +=]
[continue, ;, }, for, (, int, pt, =, 0, ;, pt, <, consumed, ;, pt, ++, ), {, pos, +=]
[(, int, pt, =, 0, ;, pt, <, consumed, ;, pt, ++, ), {, pos, +=, Character, ., charCount, (]
[(, int, pt, =, 0, ;, pt, <, consumed, ;, pt, ++, ), {, pos, +=, Character, ., charCount, (]
[0, ;, pt, <, consumed, ;, pt, ++, ), {, pos, +=, Character, ., charCount, (, Character, ., codePointAt, (]
[pt, <, consumed, ;, pt, ++, ), {, pos, +=, Character, ., charCount, (, Character, ., codePointAt, (, input, ,]
[}, }, }, public, final, CharSequenceTranslator, with, (, final, CharSequenceTranslator, ..., translators, ), {, final, CharSequenceTranslator, [, ], newArray, =]
[public, final, CharSequenceTranslator, with, (, final, CharSequenceTranslator, ..., translators, ), {, final, CharSequenceTranslator, [, ], newArray, =, new, CharSequenceTranslator, []
[public, final, CharSequenceTranslator, with, (, final, CharSequenceTranslator, ..., translators, ), {, final, CharSequenceTranslator, [, ], newArray, =, new, CharSequenceTranslator, []
[public, final, CharSequenceTranslator, with, (, final, CharSequenceTranslator, ..., translators, ), {, final, CharSequenceTranslator, [, ], newArray, =, new, CharSequenceTranslator, []
[(, final, CharSequenceTranslator, ..., translators, ), {, final, CharSequenceTranslator, [, ], newArray, =, new, CharSequenceTranslator, [, translators, ., length, +]
[..., translators, ), {, final, CharSequenceTranslator, [, ], newArray, =, new, CharSequenceTranslator, [, translators, ., length, +, 1, ], ;]
[..., translators, ), {, final, CharSequenceTranslator, [, ], newArray, =, new, CharSequenceTranslator, [, translators, ., length, +, 1, ], ;]
[), {, final, CharSequenceTranslator, [, ], newArray, =, new, CharSequenceTranslator, [, translators, ., length, +, 1, ], ;, newArray, []
[CharSequenceTranslator, [, ], newArray, =, new, CharSequenceTranslator, [, translators, ., length, +, 1, ], ;, newArray, [, 0, ], =]
[], newArray, =, new, CharSequenceTranslator, [, translators, ., length, +, 1, ], ;, newArray, [, 0, ], =, this, ;]
[], newArray, =, new, CharSequenceTranslator, [, translators, ., length, +, 1, ], ;, newArray, [, 0, ], =, this, ;]
[CharSequenceTranslator, [, translators, ., length, +, 1, ], ;, newArray, [, 0, ], =, this, ;, System, ., arraycopy, (]
[translators, ., length, +, 1, ], ;, newArray, [, 0, ], =, this, ;, System, ., arraycopy, (, translators, ,]
[length, +, 1, ], ;, newArray, [, 0, ], =, this, ;, System, ., arraycopy, (, translators, ,, 0, ,]
[1, ], ;, newArray, [, 0, ], =, this, ;, System, ., arraycopy, (, translators, ,, 0, ,, newArray, ,]
[;, newArray, [, 0, ], =, this, ;, System, ., arraycopy, (, translators, ,, 0, ,, newArray, ,, 1, ,]
[;, newArray, [, 0, ], =, this, ;, System, ., arraycopy, (, translators, ,, 0, ,, newArray, ,, 1, ,]
[this, ;, System, ., arraycopy, (, translators, ,, 0, ,, newArray, ,, 1, ,, translators, ., length, ), ;, return]
[., arraycopy, (, translators, ,, 0, ,, newArray, ,, 1, ,, translators, ., length, ), ;, return, new, AggregateTranslator, (]
[;, return, new, AggregateTranslator, (, newArray, ), ;, }, public, static, String, hex, (, final, int, codepoint, ), {, return]
[;, return, new, AggregateTranslator, (, newArray, ), ;, }, public, static, String, hex, (, final, int, codepoint, ), {, return]
[;, return, new, AggregateTranslator, (, newArray, ), ;, }, public, static, String, hex, (, final, int, codepoint, ), {, return]
[(, newArray, ), ;, }, public, static, String, hex, (, final, int, codepoint, ), {, return, Integer, ., toHexString, (]
[public, static, String, hex, (, final, int, codepoint, ), {, return, Integer, ., toHexString, (, codepoint, ), ., toUpperCase, (]
[public, static, String, hex, (, final, int, codepoint, ), {, return, Integer, ., toHexString, (, codepoint, ), ., toUpperCase, (]
