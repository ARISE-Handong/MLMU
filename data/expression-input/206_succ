[;, static, final, String, PROTECTOR_FN, =, "JSCOMPILER_PRESERVE", ;, private, final, CheckLevel, level, ;, private, final, List, <, Node, >, problemNodes]
[., warning, (, "JSC_USELESS_CODE", ,, "Suspicious code. {0}", ), ;, static, final, String, PROTECTOR_FN, =, "JSCOMPILER_PRESERVE", ;, private, final, CheckLevel, level, ;]
[,, "Suspicious code. {0}", ), ;, static, final, String, PROTECTOR_FN, =, "JSCOMPILER_PRESERVE", ;, private, final, CheckLevel, level, ;, private, final, List, <]
[), ;, static, final, String, PROTECTOR_FN, =, "JSCOMPILER_PRESERVE", ;, private, final, CheckLevel, level, ;, private, final, List, <, Node, >]
[;, private, final, CheckLevel, level, ;, private, final, List, <, Node, >, problemNodes, =, Lists, ., newArrayList, (, ), ;]
[;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, protectSideEffectFreeCode, ;, CheckSideEffects, (, AbstractCompiler, compiler, ,, CheckLevel, level, ,, boolean]
[., newArrayList, (, ), ;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, protectSideEffectFreeCode, ;, CheckSideEffects, (, AbstractCompiler, compiler, ,]
[=, compiler, ;, this, ., level, =, level, ;, this, ., protectSideEffectFreeCode, =, protectSideEffectFreeCode, ;, }, @, Override, public, void]
[., compiler, =, compiler, ;, this, ., level, =, level, ;, this, ., protectSideEffectFreeCode, =, protectSideEffectFreeCode, ;, }, @, Override]
[;, this, ., level, =, level, ;, this, ., protectSideEffectFreeCode, =, protectSideEffectFreeCode, ;, }, @, Override, public, void, process, (]
[=, level, ;, this, ., protectSideEffectFreeCode, =, protectSideEffectFreeCode, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., level, =, level, ;, this, ., protectSideEffectFreeCode, =, protectSideEffectFreeCode, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., protectSideEffectFreeCode, =, protectSideEffectFreeCode, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, protectSideEffectFreeCode, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., protectSideEffectFreeCode, =, protectSideEffectFreeCode, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, if, (, protectSideEffectFreeCode, ), {, protectSideEffects, (, ), ;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot]
[., traverse, (, compiler, ,, root, ,, this, ), ;, if, (, protectSideEffectFreeCode, ), {, protectSideEffects, (, ), ;, }]
[,, root, ,, this, ), ;, if, (, protectSideEffectFreeCode, ), {, protectSideEffects, (, ), ;, }, }, @, Override, public]
[,, this, ), ;, if, (, protectSideEffectFreeCode, ), {, protectSideEffects, (, ), ;, }, }, @, Override, public, void, hotSwapScript]
[), ;, if, (, protectSideEffectFreeCode, ), {, protectSideEffects, (, ), ;, }, }, @, Override, public, void, hotSwapScript, (, Node]
[), {, protectSideEffects, (, ), ;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, )]
[;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[., traverse, (, compiler, ,, scriptRoot, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[,, scriptRoot, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[), {, return, ;, }, if, (, parent, ==, null, ), {, return, ;, }, if, (, n, ., isExprResult]
[||, n, ., isComma, (, ), ), {, return, ;, }, if, (, parent, ==, null, ), {, return, ;]
[., isEmpty, (, ), ||, n, ., isComma, (, ), ), {, return, ;, }, if, (, parent, ==, null]
[), {, return, ;, }, if, (, parent, ==, null, ), {, return, ;, }, if, (, n, ., isExprResult]
[., isComma, (, ), ), {, return, ;, }, if, (, parent, ==, null, ), {, return, ;, }, if]
[), {, return, ;, }, if, (, n, ., isExprResult, (, ), ||, n, ., isBlock, (, ), ), {]
[==, null, ), {, return, ;, }, if, (, n, ., isExprResult, (, ), ||, n, ., isBlock, (, )]
[), {, return, ;, }, if, (, n, ., isExprResult, (, ), ||, n, ., isBlock, (, ), ), {]
[), {, return, ;, }, if, (, n, ., isQualifiedName, (, ), &&, n, ., getJSDocInfo, (, ), !=, null]
[||, n, ., isBlock, (, ), ), {, return, ;, }, if, (, n, ., isQualifiedName, (, ), &&, n]
[., isExprResult, (, ), ||, n, ., isBlock, (, ), ), {, return, ;, }, if, (, n, ., isQualifiedName]
[), {, return, ;, }, if, (, n, ., isQualifiedName, (, ), &&, n, ., getJSDocInfo, (, ), !=, null]
[., isBlock, (, ), ), {, return, ;, }, if, (, n, ., isQualifiedName, (, ), &&, n, ., getJSDocInfo]
[), {, return, ;, }, boolean, isResultUsed, =, NodeUtil, ., isExpressionResultUsed, (, n, ), ;, boolean, isSimpleOp, =, NodeUtil, .]
[&&, n, ., getJSDocInfo, (, ), !=, null, ), {, return, ;, }, boolean, isResultUsed, =, NodeUtil, ., isExpressionResultUsed, (]
[., isQualifiedName, (, ), &&, n, ., getJSDocInfo, (, ), !=, null, ), {, return, ;, }, boolean, isResultUsed, =]
[), {, return, ;, }, boolean, isResultUsed, =, NodeUtil, ., isExpressionResultUsed, (, n, ), ;, boolean, isSimpleOp, =, NodeUtil, .]
[!=, null, ), {, return, ;, }, boolean, isResultUsed, =, NodeUtil, ., isExpressionResultUsed, (, n, ), ;, boolean, isSimpleOp, =]
[., getJSDocInfo, (, ), !=, null, ), {, return, ;, }, boolean, isResultUsed, =, NodeUtil, ., isExpressionResultUsed, (, n, )]
[), {, return, ;, }, boolean, isResultUsed, =, NodeUtil, ., isExpressionResultUsed, (, n, ), ;, boolean, isSimpleOp, =, NodeUtil, .]
[;, boolean, isSimpleOp, =, NodeUtil, ., isSimpleOperator, (, n, ), ;, if, (, !, isResultUsed, &&, (, isSimpleOp, ||, !]
[., isExpressionResultUsed, (, n, ), ;, boolean, isSimpleOp, =, NodeUtil, ., isSimpleOperator, (, n, ), ;, if, (, !, isResultUsed]
[), ;, boolean, isSimpleOp, =, NodeUtil, ., isSimpleOperator, (, n, ), ;, if, (, !, isResultUsed, &&, (, isSimpleOp, ||]
[;, if, (, !, isResultUsed, &&, (, isSimpleOp, ||, !, NodeUtil, ., mayHaveSideEffects, (, n, ,, t, ., getCompiler, (]
[., isSimpleOperator, (, n, ), ;, if, (, !, isResultUsed, &&, (, isSimpleOp, ||, !, NodeUtil, ., mayHaveSideEffects, (, n]
[), ;, if, (, !, isResultUsed, &&, (, isSimpleOp, ||, !, NodeUtil, ., mayHaveSideEffects, (, n, ,, t, ., getCompiler]
[), {, String, msg, =, "This code lacks side-effects. Is there a bug?", ;, if, (, n, ., isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?", ;]
[&&, (, isSimpleOp, ||, !, NodeUtil, ., mayHaveSideEffects, (, n, ,, t, ., getCompiler, (, ), ), ), ), {]
[&&, (, isSimpleOp, ||, !, NodeUtil, ., mayHaveSideEffects, (, n, ,, t, ., getCompiler, (, ), ), ), ), {]
[), {, String, msg, =, "This code lacks side-effects. Is there a bug?", ;, if, (, n, ., isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?", ;]
[), ), {, String, msg, =, "This code lacks side-effects. Is there a bug?", ;, if, (, n, ., isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?"]
[||, !, NodeUtil, ., mayHaveSideEffects, (, n, ,, t, ., getCompiler, (, ), ), ), ), {, String, msg, =]
[), ), {, String, msg, =, "This code lacks side-effects. Is there a bug?", ;, if, (, n, ., isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?"]
[), ), {, String, msg, =, "This code lacks side-effects. Is there a bug?", ;, if, (, n, ., isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?"]
[., mayHaveSideEffects, (, n, ,, t, ., getCompiler, (, ), ), ), ), {, String, msg, =, "This code lacks side-effects. Is there a bug?", ;, if]
[,, t, ., getCompiler, (, ), ), ), ), {, String, msg, =, "This code lacks side-effects. Is there a bug?", ;, if, (, n, ., isString]
[), ), ), {, String, msg, =, "This code lacks side-effects. Is there a bug?", ;, if, (, n, ., isString, (, ), ), {, msg, =]
[., getCompiler, (, ), ), ), ), {, String, msg, =, "This code lacks side-effects. Is there a bug?", ;, if, (, n, ., isString, (, )]
[;, if, (, n, ., isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?", ;, }, else, if, (, isSimpleOp, )]
[), {, msg, =, "Is there a missing '+' on the previous line?", ;, }, else, if, (, isSimpleOp, ), {, msg, =, "The result of the '", +, Token, ., name]
[., isString, (, ), ), {, msg, =, "Is there a missing '+' on the previous line?", ;, }, else, if, (, isSimpleOp, ), {, msg, =, "The result of the '"]
[=, "Is there a missing '+' on the previous line?", ;, }, else, if, (, isSimpleOp, ), {, msg, =, "The result of the '", +, Token, ., name, (, n, .]
[;, }, else, if, (, isSimpleOp, ), {, msg, =, "The result of the '", +, Token, ., name, (, n, ., getType, (]
[), {, msg, =, "The result of the '", +, Token, ., name, (, n, ., getType, (, ), ), ., toLowerCase, (, )]
[=, "The result of the '", +, Token, ., name, (, n, ., getType, (, ), ), ., toLowerCase, (, ), +, "' operator is not being used.", ;]
[;, }, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, n, ,, level, ,, USELESS_CODE_ERROR, ,]
[+, "' operator is not being used.", ;, }, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, n, ,, level, ,]
[+, Token, ., name, (, n, ., getType, (, ), ), ., toLowerCase, (, ), +, "' operator is not being used.", ;, }, t]
[+, "' operator is not being used.", ;, }, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, n, ,, level, ,]
[., toLowerCase, (, ), +, "' operator is not being used.", ;, }, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (]
[., name, (, n, ., getType, (, ), ), ., toLowerCase, (, ), +, "' operator is not being used.", ;, }, t, ., getCompiler]
[), ., toLowerCase, (, ), +, "' operator is not being used.", ;, }, t, ., getCompiler, (, ), ., report, (, t, ., makeError]
[., getType, (, ), ), ., toLowerCase, (, ), +, "' operator is not being used.", ;, }, t, ., getCompiler, (, ), ., report]
[;, }, t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, n, ,, level, ,, USELESS_CODE_ERROR, ,]
[;, if, (, !, NodeUtil, ., isStatement, (, n, ), ), {, problemNodes, ., add, (, n, ), ;, }]
[., report, (, t, ., makeError, (, n, ,, level, ,, USELESS_CODE_ERROR, ,, msg, ), ), ;, if, (, !]
[., getCompiler, (, ), ., report, (, t, ., makeError, (, n, ,, level, ,, USELESS_CODE_ERROR, ,, msg, ), )]
[), ;, if, (, !, NodeUtil, ., isStatement, (, n, ), ), {, problemNodes, ., add, (, n, ), ;]
[., makeError, (, n, ,, level, ,, USELESS_CODE_ERROR, ,, msg, ), ), ;, if, (, !, NodeUtil, ., isStatement, (]
[,, level, ,, USELESS_CODE_ERROR, ,, msg, ), ), ;, if, (, !, NodeUtil, ., isStatement, (, n, ), ), {]
[,, USELESS_CODE_ERROR, ,, msg, ), ), ;, if, (, !, NodeUtil, ., isStatement, (, n, ), ), {, problemNodes, .]
[,, msg, ), ), ;, if, (, !, NodeUtil, ., isStatement, (, n, ), ), {, problemNodes, ., add, (]
[), ), ;, if, (, !, NodeUtil, ., isStatement, (, n, ), ), {, problemNodes, ., add, (, n, )]
[), {, problemNodes, ., add, (, n, ), ;, }, }, }, private, void, protectSideEffects, (, ), {, if, (]
[), {, problemNodes, ., add, (, n, ), ;, }, }, }, private, void, protectSideEffects, (, ), {, if, (]
[., isStatement, (, n, ), ), {, problemNodes, ., add, (, n, ), ;, }, }, }, private, void, protectSideEffects]
[), ), {, problemNodes, ., add, (, n, ), ;, }, }, }, private, void, protectSideEffects, (, ), {, if]
[;, }, }, }, private, void, protectSideEffects, (, ), {, if, (, !, problemNodes, ., isEmpty, (, ), ), {]
[., add, (, n, ), ;, }, }, }, private, void, protectSideEffects, (, ), {, if, (, !, problemNodes, .]
[), ;, }, }, }, private, void, protectSideEffects, (, ), {, if, (, !, problemNodes, ., isEmpty, (, ), )]
[), {, addExtern, (, ), ;, for, (, Node, n, :, problemNodes, ), {, Node, name, =, IR, ., name]
[), {, addExtern, (, ), ;, for, (, Node, n, :, problemNodes, ), {, Node, name, =, IR, ., name]
[., isEmpty, (, ), ), {, addExtern, (, ), ;, for, (, Node, n, :, problemNodes, ), {, Node, name]
[;, for, (, Node, n, :, problemNodes, ), {, Node, name, =, IR, ., name, (, PROTECTOR_FN, ), ., srcref]
[), {, Node, name, =, IR, ., name, (, PROTECTOR_FN, ), ., srcref, (, n, ), ;, name, ., putBooleanProp]
[;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, replacement, =, IR, ., call, (, name]
[., srcref, (, n, ), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, replacement, =]
[., name, (, PROTECTOR_FN, ), ., srcref, (, n, ), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true]
[), ., srcref, (, n, ), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, replacement]
[), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, replacement, =, IR, ., call, (]
[;, Node, replacement, =, IR, ., call, (, name, ), ., srcref, (, n, ), ;, replacement, ., putBooleanProp, (]
[., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, replacement, =, IR, ., call, (, name, ), .]
[,, true, ), ;, Node, replacement, =, IR, ., call, (, name, ), ., srcref, (, n, ), ;, replacement]
[., IS_CONSTANT_NAME, ,, true, ), ;, Node, replacement, =, IR, ., call, (, name, ), ., srcref, (, n, )]
[), ;, Node, replacement, =, IR, ., call, (, name, ), ., srcref, (, n, ), ;, replacement, ., putBooleanProp]
[;, replacement, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, n, ., getParent, (, ), ., replaceChild, (]
[., srcref, (, n, ), ;, replacement, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, n, ., getParent]
[., call, (, name, ), ., srcref, (, n, ), ;, replacement, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true]
[), ., srcref, (, n, ), ;, replacement, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, n, .]
[), ;, replacement, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, n, ., getParent, (, ), ., replaceChild]
[;, n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;, replacement, ., addChildToBack, (, n, )]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[,, true, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;, replacement, ., addChildToBack]
[., FREE_CALL, ,, true, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;, replacement]
[), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;, replacement, ., addChildToBack, (, n]
[;, replacement, ., addChildToBack, (, n, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, addExtern]
[., replaceChild, (, n, ,, replacement, ), ;, replacement, ., addChildToBack, (, n, ), ;, }, compiler, ., reportCodeChange, (]
[., getParent, (, ), ., replaceChild, (, n, ,, replacement, ), ;, replacement, ., addChildToBack, (, n, ), ;, }]
[,, replacement, ), ;, replacement, ., addChildToBack, (, n, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }]
[), ;, replacement, ., addChildToBack, (, n, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, addExtern, (, ), {, Node, name, =, IR]
[., addChildToBack, (, n, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, addExtern, (, )]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, addExtern, (, ), {, Node, name, =]
[;, }, }, private, void, addExtern, (, ), {, Node, name, =, IR, ., name, (, PROTECTOR_FN, ), ;, name]
[., reportCodeChange, (, ), ;, }, }, private, void, addExtern, (, ), {, Node, name, =, IR, ., name, (]
[;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, var, =, IR, ., var, (, name]
[., name, (, PROTECTOR_FN, ), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, var, =]
[), ;, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, var, =, IR, ., var, (]
[;, Node, var, =, IR, ., var, (, name, ), ;, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;]
[., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, Node, var, =, IR, ., var, (, name, ), ;]
[,, true, ), ;, Node, var, =, IR, ., var, (, name, ), ;, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (]
[., IS_CONSTANT_NAME, ,, true, ), ;, Node, var, =, IR, ., var, (, name, ), ;, JSDocInfoBuilder, builder, =, new]
[), ;, Node, var, =, IR, ., var, (, name, ), ;, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, )]
[;, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;, builder, ., recordNoAlias, (, ), ;, var, ., setJSDocInfo, (]
[., var, (, name, ), ;, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;, builder, ., recordNoAlias, (, )]
[), ;, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;, builder, ., recordNoAlias, (, ), ;, var, ., setJSDocInfo]
[;, builder, ., recordNoAlias, (, ), ;, var, ., setJSDocInfo, (, builder, ., build, (, var, ), ), ;, CompilerInput]
[), ;, builder, ., recordNoAlias, (, ), ;, var, ., setJSDocInfo, (, builder, ., build, (, var, ), ), ;]
[;, var, ., setJSDocInfo, (, builder, ., build, (, var, ), ), ;, CompilerInput, input, =, compiler, ., getSynthesizedExternsInput, (]
[., recordNoAlias, (, ), ;, var, ., setJSDocInfo, (, builder, ., build, (, var, ), ), ;, CompilerInput, input, =]
[;, CompilerInput, input, =, compiler, ., getSynthesizedExternsInput, (, ), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (, var]
[., setJSDocInfo, (, builder, ., build, (, var, ), ), ;, CompilerInput, input, =, compiler, ., getSynthesizedExternsInput, (, ), ;]
[), ;, CompilerInput, input, =, compiler, ., getSynthesizedExternsInput, (, ), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (]
[., build, (, var, ), ), ;, CompilerInput, input, =, compiler, ., getSynthesizedExternsInput, (, ), ;, input, ., getAstRoot, (]
[), ), ;, CompilerInput, input, =, compiler, ., getSynthesizedExternsInput, (, ), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack]
[;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[., getSynthesizedExternsInput, (, ), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (, var, ), ;, compiler, ., reportCodeChange]
[;, compiler, ., reportCodeChange, (, ), ;, }, static, class, StripProtection, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler]
[., addChildrenToBack, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, }, static, class, StripProtection, extends, AbstractPostOrderCallback, implements, CompilerPass]
[., getAstRoot, (, compiler, ), ., addChildrenToBack, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, }, static, class]
[), ., addChildrenToBack, (, var, ), ;, compiler, ., reportCodeChange, (, ), ;, }, static, class, StripProtection, extends, AbstractPostOrderCallback, implements]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, static, class, StripProtection, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler]
[;, }, static, class, StripProtection, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, StripProtection, (, AbstractCompiler, compiler, )]
[., reportCodeChange, (, ), ;, }, static, class, StripProtection, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, StripProtection]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, target, ., isName, (, ), &&, target]
[., isCall, (, ), ), {, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, target, ., isName]
[;, if, (, target, ., isName, (, ), &&, target, ., getString, (, ), ., equals, (, PROTECTOR_FN, ), )]
[., getFirstChild, (, ), ;, if, (, target, ., isName, (, ), &&, target, ., getString, (, ), ., equals]
[), {, Node, expr, =, n, ., getLastChild, (, ), ;, n, ., detachChildren, (, ), ;, parent, ., replaceChild]
[&&, target, ., getString, (, ), ., equals, (, PROTECTOR_FN, ), ), {, Node, expr, =, n, ., getLastChild, (]
[., isName, (, ), &&, target, ., getString, (, ), ., equals, (, PROTECTOR_FN, ), ), {, Node, expr, =]
[), {, Node, expr, =, n, ., getLastChild, (, ), ;, n, ., detachChildren, (, ), ;, parent, ., replaceChild]
[., equals, (, PROTECTOR_FN, ), ), {, Node, expr, =, n, ., getLastChild, (, ), ;, n, ., detachChildren, (]
[., getString, (, ), ., equals, (, PROTECTOR_FN, ), ), {, Node, expr, =, n, ., getLastChild, (, ), ;]
[), ), {, Node, expr, =, n, ., getLastChild, (, ), ;, n, ., detachChildren, (, ), ;, parent, .]
[;, n, ., detachChildren, (, ), ;, parent, ., replaceChild, (, n, ,, expr, ), ;, }, }, }, }]
[., getLastChild, (, ), ;, n, ., detachChildren, (, ), ;, parent, ., replaceChild, (, n, ,, expr, ), ;]
[;, parent, ., replaceChild, (, n, ,, expr, ), ;, }, }, }, }, }]
[., detachChildren, (, ), ;, parent, ., replaceChild, (, n, ,, expr, ), ;, }, }, }, }, }]
[;, }, }, }, }, }]
[., replaceChild, (, n, ,, expr, ), ;, }, }, }, }, }]
[,, expr, ), ;, }, }, }, }, }]
[), ;, }, }, }, }, }]
