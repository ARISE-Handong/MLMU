[SideEffectsAnalysis, implements, CompilerPass, {, enum, LocationAbstractionMode, {, DEGENERATE, ,, VISIBILITY_BASED, }, private, static, final, Predicate, <, Node, >, NOT_FUNCTION_PREDICATE, =]
[=, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, !]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, !]
[;, private, LocationAbstraction, locationAbstraction, ;, private, final, LocationAbstractionMode, locationAbstractionIdentifier, ;, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ,, LocationAbstractionMode, locationAbstractionMode, ), {]
[;, private, LocationAbstraction, locationAbstraction, ;, private, final, LocationAbstractionMode, locationAbstractionIdentifier, ;, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ,, LocationAbstractionMode, locationAbstractionMode, ), {]
[;, private, final, LocationAbstractionMode, locationAbstractionIdentifier, ;, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ,, LocationAbstractionMode, locationAbstractionMode, ), {, this, ., compiler, =]
[final, LocationAbstractionMode, locationAbstractionIdentifier, ;, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ,, LocationAbstractionMode, locationAbstractionMode, ), {, this, ., compiler, =, compiler, ;]
[final, LocationAbstractionMode, locationAbstractionIdentifier, ;, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ,, LocationAbstractionMode, locationAbstractionMode, ), {, this, ., compiler, =, compiler, ;]
[public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ,, LocationAbstractionMode, locationAbstractionMode, ), {, this, ., compiler, =, compiler, ;, this, ., locationAbstractionIdentifier, =]
[compiler, =, compiler, ;, this, ., locationAbstractionIdentifier, =, locationAbstractionMode, ;, }, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ), {, this, (]
[compiler, ;, this, ., locationAbstractionIdentifier, =, locationAbstractionMode, ;, }, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,]
[compiler, ;, this, ., locationAbstractionIdentifier, =, locationAbstractionMode, ;, }, public, SideEffectsAnalysis, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,]
[., DEGENERATE, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, switch, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, switch, (, locationAbstractionIdentifier, ), {, case]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, switch, (, locationAbstractionIdentifier, ), {, case, DEGENERATE, :]
[void, process, (, Node, externs, ,, Node, root, ), {, switch, (, locationAbstractionIdentifier, ), {, case, DEGENERATE, :, locationAbstraction, =]
[), {, switch, (, locationAbstractionIdentifier, ), {, case, DEGENERATE, :, locationAbstraction, =, new, DegenerateLocationAbstraction, (, ), ;, break, ;, case]
[switch, (, locationAbstractionIdentifier, ), {, case, DEGENERATE, :, locationAbstraction, =, new, DegenerateLocationAbstraction, (, ), ;, break, ;, case, VISIBILITY_BASED, :]
[locationAbstractionIdentifier, ), {, case, DEGENERATE, :, locationAbstraction, =, new, DegenerateLocationAbstraction, (, ), ;, break, ;, case, VISIBILITY_BASED, :, locationAbstraction, =]
[{, case, DEGENERATE, :, locationAbstraction, =, new, DegenerateLocationAbstraction, (, ), ;, break, ;, case, VISIBILITY_BASED, :, locationAbstraction, =, createVisibilityAbstraction, (]
[DEGENERATE, :, locationAbstraction, =, new, DegenerateLocationAbstraction, (, ), ;, break, ;, case, VISIBILITY_BASED, :, locationAbstraction, =, createVisibilityAbstraction, (, externs, ,]
[;, break, ;, case, VISIBILITY_BASED, :, locationAbstraction, =, createVisibilityAbstraction, (, externs, ,, root, ), ;, break, ;, default, :, throw]
[case, VISIBILITY_BASED, :, locationAbstraction, =, createVisibilityAbstraction, (, externs, ,, root, ), ;, break, ;, default, :, throw, new, IllegalStateException, (]
[case, VISIBILITY_BASED, :, locationAbstraction, =, createVisibilityAbstraction, (, externs, ,, root, ), ;, break, ;, default, :, throw, new, IllegalStateException, (]
[case, VISIBILITY_BASED, :, locationAbstraction, =, createVisibilityAbstraction, (, externs, ,, root, ), ;, break, ;, default, :, throw, new, IllegalStateException, (]
[:, locationAbstraction, =, createVisibilityAbstraction, (, externs, ,, root, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized location abstraction ", +]
[=, createVisibilityAbstraction, (, externs, ,, root, ), ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized location abstraction ", +, "identifier: ", +]
[+, locationAbstractionIdentifier, ), ;, }, }, private, LocationAbstraction, createVisibilityAbstraction, (, Node, externs, ,, Node, root, ), {, VariableVisibilityAnalysis, variableVisibility, =]
[;, }, }, private, LocationAbstraction, createVisibilityAbstraction, (, Node, externs, ,, Node, root, ), {, VariableVisibilityAnalysis, variableVisibility, =, new, VariableVisibilityAnalysis, (]
[private, LocationAbstraction, createVisibilityAbstraction, (, Node, externs, ,, Node, root, ), {, VariableVisibilityAnalysis, variableVisibility, =, new, VariableVisibilityAnalysis, (, compiler, ), ;]
[private, LocationAbstraction, createVisibilityAbstraction, (, Node, externs, ,, Node, root, ), {, VariableVisibilityAnalysis, variableVisibility, =, new, VariableVisibilityAnalysis, (, compiler, ), ;]
[Node, externs, ,, Node, root, ), {, VariableVisibilityAnalysis, variableVisibility, =, new, VariableVisibilityAnalysis, (, compiler, ), ;, variableVisibility, ., process, (]
[,, Node, root, ), {, VariableVisibilityAnalysis, variableVisibility, =, new, VariableVisibilityAnalysis, (, compiler, ), ;, variableVisibility, ., process, (, externs, ,]
[variableVisibility, =, new, VariableVisibilityAnalysis, (, compiler, ), ;, variableVisibility, ., process, (, externs, ,, root, ), ;, VariableUseDeclarationMap, variableMap, =]
[VariableVisibilityAnalysis, (, compiler, ), ;, variableVisibility, ., process, (, externs, ,, root, ), ;, VariableUseDeclarationMap, variableMap, =, new, VariableUseDeclarationMap, (]
[), ;, variableVisibility, ., process, (, externs, ,, root, ), ;, VariableUseDeclarationMap, variableMap, =, new, VariableUseDeclarationMap, (, compiler, ), ;]
[), ;, variableVisibility, ., process, (, externs, ,, root, ), ;, VariableUseDeclarationMap, variableMap, =, new, VariableUseDeclarationMap, (, compiler, ), ;]
[process, (, externs, ,, root, ), ;, VariableUseDeclarationMap, variableMap, =, new, VariableUseDeclarationMap, (, compiler, ), ;, variableMap, ., mapUses, (]
[root, ), ;, VariableUseDeclarationMap, variableMap, =, new, VariableUseDeclarationMap, (, compiler, ), ;, variableMap, ., mapUses, (, root, ), ;, return]
[VariableUseDeclarationMap, variableMap, =, new, VariableUseDeclarationMap, (, compiler, ), ;, variableMap, ., mapUses, (, root, ), ;, return, new, VisibilityLocationAbstraction, (]
[=, new, VariableUseDeclarationMap, (, compiler, ), ;, variableMap, ., mapUses, (, root, ), ;, return, new, VisibilityLocationAbstraction, (, compiler, ,]
[VariableUseDeclarationMap, (, compiler, ), ;, variableMap, ., mapUses, (, root, ), ;, return, new, VisibilityLocationAbstraction, (, compiler, ,, variableVisibility, ,]
[variableVisibility, ,, variableMap, ), ;, }, public, boolean, safeToMoveBefore, (, Node, source, ,, AbstractMotionEnvironment, environment, ,, Node, destination, ), {]
[variableVisibility, ,, variableMap, ), ;, }, public, boolean, safeToMoveBefore, (, Node, source, ,, AbstractMotionEnvironment, environment, ,, Node, destination, ), {]
[;, }, public, boolean, safeToMoveBefore, (, Node, source, ,, AbstractMotionEnvironment, environment, ,, Node, destination, ), {, Preconditions, ., checkNotNull, (]
[boolean, safeToMoveBefore, (, Node, source, ,, AbstractMotionEnvironment, environment, ,, Node, destination, ), {, Preconditions, ., checkNotNull, (, locationAbstraction, ), ;]
[boolean, safeToMoveBefore, (, Node, source, ,, AbstractMotionEnvironment, environment, ,, Node, destination, ), {, Preconditions, ., checkNotNull, (, locationAbstraction, ), ;]
[source, ,, AbstractMotionEnvironment, environment, ,, Node, destination, ), {, Preconditions, ., checkNotNull, (, locationAbstraction, ), ;, Preconditions, ., checkArgument, (]
[,, AbstractMotionEnvironment, environment, ,, Node, destination, ), {, Preconditions, ., checkNotNull, (, locationAbstraction, ), ;, Preconditions, ., checkArgument, (, !]
[environment, ,, Node, destination, ), {, Preconditions, ., checkNotNull, (, locationAbstraction, ), ;, Preconditions, ., checkArgument, (, !, nodeHasAncestor, (]
[Node, destination, ), {, Preconditions, ., checkNotNull, (, locationAbstraction, ), ;, Preconditions, ., checkArgument, (, !, nodeHasAncestor, (, destination, ,]
[checkNotNull, (, locationAbstraction, ), ;, Preconditions, ., checkArgument, (, !, nodeHasAncestor, (, destination, ,, source, ), ), ;, if, (]
[locationAbstraction, ), ;, Preconditions, ., checkArgument, (, !, nodeHasAncestor, (, destination, ,, source, ), ), ;, if, (, isPure, (]
[checkArgument, (, !, nodeHasAncestor, (, destination, ,, source, ), ), ;, if, (, isPure, (, source, ), ), {, return]
[destination, ,, source, ), ), ;, if, (, isPure, (, source, ), ), {, return, true, ;, }, if, (]
[source, ), ), ;, if, (, isPure, (, source, ), ), {, return, true, ;, }, if, (, nodeHasCall, (]
[(, isPure, (, source, ), ), {, return, true, ;, }, if, (, nodeHasCall, (, source, ), ), {, return]
[{, return, true, ;, }, if, (, nodeHasCall, (, source, ), ), {, return, false, ;, }, LocationSummary, sourceLocationSummary, =]
[{, return, true, ;, }, if, (, nodeHasCall, (, source, ), ), {, return, false, ;, }, LocationSummary, sourceLocationSummary, =]
[}, if, (, nodeHasCall, (, source, ), ), {, return, false, ;, }, LocationSummary, sourceLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (]
[), ), {, return, false, ;, }, LocationSummary, sourceLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (, source, ), ;, EffectLocation, sourceModSet, =]
[), ), {, return, false, ;, }, LocationSummary, sourceLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (, source, ), ;, EffectLocation, sourceModSet, =]
[sourceLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (, source, ), ;, EffectLocation, sourceModSet, =, sourceLocationSummary, ., getModSet, (, ), ;, if, (]
[sourceLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (, source, ), ;, EffectLocation, sourceModSet, =, sourceLocationSummary, ., getModSet, (, ), ;, if, (]
[=, locationAbstraction, ., calculateLocationSummary, (, source, ), ;, EffectLocation, sourceModSet, =, sourceLocationSummary, ., getModSet, (, ), ;, if, (, !]
[=, locationAbstraction, ., calculateLocationSummary, (, source, ), ;, EffectLocation, sourceModSet, =, sourceLocationSummary, ., getModSet, (, ), ;, if, (, !]
[), ;, EffectLocation, sourceModSet, =, sourceLocationSummary, ., getModSet, (, ), ;, if, (, !, sourceModSet, ., isEmpty, (, ), &&]
[;, EffectLocation, sourceModSet, =, sourceLocationSummary, ., getModSet, (, ), ;, if, (, !, sourceModSet, ., isEmpty, (, ), &&, !]
[sourceModSet, =, sourceLocationSummary, ., getModSet, (, ), ;, if, (, !, sourceModSet, ., isEmpty, (, ), &&, !, nodesHaveSameControlFlow, (]
[sourceLocationSummary, ., getModSet, (, ), ;, if, (, !, sourceModSet, ., isEmpty, (, ), &&, !, nodesHaveSameControlFlow, (, source, ,]
[;, if, (, !, sourceModSet, ., isEmpty, (, ), &&, !, nodesHaveSameControlFlow, (, source, ,, destination, ), ), {, return]
[isEmpty, (, ), &&, !, nodesHaveSameControlFlow, (, source, ,, destination, ), ), {, return, false, ;, }, EffectLocation, sourceRefSet, =]
[isEmpty, (, ), &&, !, nodesHaveSameControlFlow, (, source, ,, destination, ), ), {, return, false, ;, }, EffectLocation, sourceRefSet, =]
[{, return, false, ;, }, EffectLocation, sourceRefSet, =, sourceLocationSummary, ., getRefSet, (, ), ;, Set, <, Node, >, environmentNodes, =]
[{, return, false, ;, }, EffectLocation, sourceRefSet, =, sourceLocationSummary, ., getRefSet, (, ), ;, Set, <, Node, >, environmentNodes, =]
[(, ), ;, Set, <, Node, >, environmentNodes, =, environment, ., calculateEnvironment, (, ), ;, for, (, Node, environmentNode, :]
[Node, >, environmentNodes, =, environment, ., calculateEnvironment, (, ), ;, for, (, Node, environmentNode, :, environmentNodes, ), {, if, (]
[environmentNodes, =, environment, ., calculateEnvironment, (, ), ;, for, (, Node, environmentNode, :, environmentNodes, ), {, if, (, nodeHasCall, (]
[(, ), ;, for, (, Node, environmentNode, :, environmentNodes, ), {, if, (, nodeHasCall, (, environmentNode, ), ), {, return]
[:, environmentNodes, ), {, if, (, nodeHasCall, (, environmentNode, ), ), {, return, false, ;, }, }, LocationSummary, environmentLocationSummary, =]
[:, environmentNodes, ), {, if, (, nodeHasCall, (, environmentNode, ), ), {, return, false, ;, }, }, LocationSummary, environmentLocationSummary, =]
[if, (, nodeHasCall, (, environmentNode, ), ), {, return, false, ;, }, }, LocationSummary, environmentLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (]
[), {, return, false, ;, }, }, LocationSummary, environmentLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (, environmentNodes, ), ;, EffectLocation, environmentModSet, =]
[), {, return, false, ;, }, }, LocationSummary, environmentLocationSummary, =, locationAbstraction, ., calculateLocationSummary, (, environmentNodes, ), ;, EffectLocation, environmentModSet, =]
[=, locationAbstraction, ., calculateLocationSummary, (, environmentNodes, ), ;, EffectLocation, environmentModSet, =, environmentLocationSummary, ., getModSet, (, ), ;, EffectLocation, environmentRefSet, =]
[=, locationAbstraction, ., calculateLocationSummary, (, environmentNodes, ), ;, EffectLocation, environmentModSet, =, environmentLocationSummary, ., getModSet, (, ), ;, EffectLocation, environmentRefSet, =]
[EffectLocation, environmentModSet, =, environmentLocationSummary, ., getModSet, (, ), ;, EffectLocation, environmentRefSet, =, environmentLocationSummary, ., getRefSet, (, ), ;, if, (]
[EffectLocation, environmentModSet, =, environmentLocationSummary, ., getModSet, (, ), ;, EffectLocation, environmentRefSet, =, environmentLocationSummary, ., getRefSet, (, ), ;, if, (]
[EffectLocation, environmentModSet, =, environmentLocationSummary, ., getModSet, (, ), ;, EffectLocation, environmentRefSet, =, environmentLocationSummary, ., getRefSet, (, ), ;, if, (]
[environmentModSet, =, environmentLocationSummary, ., getModSet, (, ), ;, EffectLocation, environmentRefSet, =, environmentLocationSummary, ., getRefSet, (, ), ;, if, (, !]
[environmentModSet, =, environmentLocationSummary, ., getModSet, (, ), ;, EffectLocation, environmentRefSet, =, environmentLocationSummary, ., getRefSet, (, ), ;, if, (, !]
[getModSet, (, ), ;, EffectLocation, environmentRefSet, =, environmentLocationSummary, ., getRefSet, (, ), ;, if, (, !, environmentModSet, ., intersectsLocation, (]
[;, EffectLocation, environmentRefSet, =, environmentLocationSummary, ., getRefSet, (, ), ;, if, (, !, environmentModSet, ., intersectsLocation, (, sourceRefSet, ), &&]
[EffectLocation, environmentRefSet, =, environmentLocationSummary, ., getRefSet, (, ), ;, if, (, !, environmentModSet, ., intersectsLocation, (, sourceRefSet, ), &&, !]
[EffectLocation, environmentRefSet, =, environmentLocationSummary, ., getRefSet, (, ), ;, if, (, !, environmentModSet, ., intersectsLocation, (, sourceRefSet, ), &&, !]
[., getRefSet, (, ), ;, if, (, !, environmentModSet, ., intersectsLocation, (, sourceRefSet, ), &&, !, environmentRefSet, ., intersectsLocation, (]
[), ;, if, (, !, environmentModSet, ., intersectsLocation, (, sourceRefSet, ), &&, !, environmentRefSet, ., intersectsLocation, (, sourceModSet, ), &&]
[;, if, (, !, environmentModSet, ., intersectsLocation, (, sourceRefSet, ), &&, !, environmentRefSet, ., intersectsLocation, (, sourceModSet, ), &&, !]
[;, if, (, !, environmentModSet, ., intersectsLocation, (, sourceRefSet, ), &&, !, environmentRefSet, ., intersectsLocation, (, sourceModSet, ), &&, !]
[environmentModSet, ., intersectsLocation, (, sourceRefSet, ), &&, !, environmentRefSet, ., intersectsLocation, (, sourceModSet, ), &&, !, environmentModSet, ., intersectsLocation, (]
[), &&, !, environmentRefSet, ., intersectsLocation, (, sourceModSet, ), &&, !, environmentModSet, ., intersectsLocation, (, sourceModSet, ), ), {, return]
[., intersectsLocation, (, sourceModSet, ), &&, !, environmentModSet, ., intersectsLocation, (, sourceModSet, ), ), {, return, true, ;, }, return]
[), ), {, return, true, ;, }, return, false, ;, }, private, boolean, isPure, (, Node, node, ), {, return]
[{, return, false, ;, }, private, static, boolean, nodesHaveSameControlFlow, (, Node, node1, ,, Node, node2, ), {, Node, node1DeepestControlDependentBlock, =]
[false, ;, }, private, static, boolean, nodesHaveSameControlFlow, (, Node, node1, ,, Node, node2, ), {, Node, node1DeepestControlDependentBlock, =, closestControlDependentAncestor, (]
[nodesHaveSameControlFlow, (, Node, node1, ,, Node, node2, ), {, Node, node1DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node1, ), ;, Node, node2DeepestControlDependentBlock, =]
[Node, node1, ,, Node, node2, ), {, Node, node1DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node1, ), ;, Node, node2DeepestControlDependentBlock, =, closestControlDependentAncestor, (]
[), {, Node, node1DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node1, ), ;, Node, node2DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node2, ), ;, if, (]
[), {, Node, node1DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node1, ), ;, Node, node2DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node2, ), ;, if, (]
[Node, node1DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node1, ), ;, Node, node2DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node2, ), ;, if, (, node1DeepestControlDependentBlock, ==]
[node1, ), ;, Node, node2DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node2, ), ;, if, (, node1DeepestControlDependentBlock, ==, node2DeepestControlDependentBlock, ), {, if, (]
[node1, ), ;, Node, node2DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node2, ), ;, if, (, node1DeepestControlDependentBlock, ==, node2DeepestControlDependentBlock, ), {, if, (]
[;, Node, node2DeepestControlDependentBlock, =, closestControlDependentAncestor, (, node2, ), ;, if, (, node1DeepestControlDependentBlock, ==, node2DeepestControlDependentBlock, ), {, if, (, node2DeepestControlDependentBlock, !=]
[(, node2, ), ;, if, (, node1DeepestControlDependentBlock, ==, node2DeepestControlDependentBlock, ), {, if, (, node2DeepestControlDependentBlock, !=, null, ), {, if, (]
[(, node2, ), ;, if, (, node1DeepestControlDependentBlock, ==, node2DeepestControlDependentBlock, ), {, if, (, node2DeepestControlDependentBlock, !=, null, ), {, if, (]
[node2DeepestControlDependentBlock, ), {, if, (, node2DeepestControlDependentBlock, !=, null, ), {, if, (, node2DeepestControlDependentBlock, ., isCase, (, ), ), {, return]
[{, if, (, node2DeepestControlDependentBlock, ., isCase, (, ), ), {, return, false, ;, }, Predicate, <, Node, >, isEarlyExitPredicate, =]
[Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, int, nodeType, =]
[Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, int, nodeType, =]
[@, Override, public, boolean, apply, (, Node, input, ), {, int, nodeType, =, input, ., getType, (, ), ;, return]
[@, Override, public, boolean, apply, (, Node, input, ), {, int, nodeType, =, input, ., getType, (, ), ;, return]
[@, Override, public, boolean, apply, (, Node, input, ), {, int, nodeType, =, input, ., getType, (, ), ;, return]
[@, Override, public, boolean, apply, (, Node, input, ), {, int, nodeType, =, input, ., getType, (, ), ;, return]
[public, boolean, apply, (, Node, input, ), {, int, nodeType, =, input, ., getType, (, ), ;, return, nodeType, ==]
[public, boolean, apply, (, Node, input, ), {, int, nodeType, =, input, ., getType, (, ), ;, return, nodeType, ==]
[Node, input, ), {, int, nodeType, =, input, ., getType, (, ), ;, return, nodeType, ==, Token, ., RETURN, ||]
[Node, input, ), {, int, nodeType, =, input, ., getType, (, ), ;, return, nodeType, ==, Token, ., RETURN, ||]
[), {, int, nodeType, =, input, ., getType, (, ), ;, return, nodeType, ==, Token, ., RETURN, ||, nodeType, ==]
[), {, int, nodeType, =, input, ., getType, (, ), ;, return, nodeType, ==, Token, ., RETURN, ||, nodeType, ==]
[=, input, ., getType, (, ), ;, return, nodeType, ==, Token, ., RETURN, ||, nodeType, ==, Token, ., BREAK, ||]
[=, input, ., getType, (, ), ;, return, nodeType, ==, Token, ., RETURN, ||, nodeType, ==, Token, ., BREAK, ||]
[., getType, (, ), ;, return, nodeType, ==, Token, ., RETURN, ||, nodeType, ==, Token, ., BREAK, ||, nodeType, ==]
[., getType, (, ), ;, return, nodeType, ==, Token, ., RETURN, ||, nodeType, ==, Token, ., BREAK, ||, nodeType, ==]
[Token, ., RETURN, ||, nodeType, ==, Token, ., BREAK, ||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return]
[., RETURN, ||, nodeType, ==, Token, ., BREAK, ||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return, !]
[., RETURN, ||, nodeType, ==, Token, ., BREAK, ||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return, !]
[==, Token, ., BREAK, ||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return, !, NodeUtil, ., has, (]
[., BREAK, ||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return, !, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,]
[||, nodeType, ==, Token, ., CONTINUE, ;, }, }, ;, return, !, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,]
[}, }, ;, return, !, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,, NOT_FUNCTION_PREDICATE, ), ;, }, else, {, return]
[has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,, NOT_FUNCTION_PREDICATE, ), ;, }, else, {, return, true, ;, }, }, else, {, return]
[}, else, {, return, false, ;, }, }, private, static, boolean, isControlDependentChild, (, Node, child, ), {, Node, parent, =]
[}, else, {, return, false, ;, }, }, private, static, boolean, isControlDependentChild, (, Node, child, ), {, Node, parent, =]
[private, static, boolean, isControlDependentChild, (, Node, child, ), {, Node, parent, =, child, ., getParent, (, ), ;, if, (]
[private, static, boolean, isControlDependentChild, (, Node, child, ), {, Node, parent, =, child, ., getParent, (, ), ;, if, (]
[boolean, isControlDependentChild, (, Node, child, ), {, Node, parent, =, child, ., getParent, (, ), ;, if, (, parent, ==]
[child, ), {, Node, parent, =, child, ., getParent, (, ), ;, if, (, parent, ==, null, ), {, return]
[(, ), ;, if, (, parent, ==, null, ), {, return, false, ;, }, ArrayList, <, Node, >, siblings, =]
[(, ), ;, if, (, parent, ==, null, ), {, return, false, ;, }, ArrayList, <, Node, >, siblings, =]
[(, parent, ==, null, ), {, return, false, ;, }, ArrayList, <, Node, >, siblings, =, Lists, ., newArrayList, (]
[(, parent, ==, null, ), {, return, false, ;, }, ArrayList, <, Node, >, siblings, =, Lists, ., newArrayList, (]
[ArrayList, <, Node, >, siblings, =, Lists, ., newArrayList, (, parent, ., children, (, ), ), ;, int, indexOfChildInParent, =]
[ArrayList, <, Node, >, siblings, =, Lists, ., newArrayList, (, parent, ., children, (, ), ), ;, int, indexOfChildInParent, =]
[siblings, =, Lists, ., newArrayList, (, parent, ., children, (, ), ), ;, int, indexOfChildInParent, =, siblings, ., indexOf, (]
[(, parent, ., children, (, ), ), ;, int, indexOfChildInParent, =, siblings, ., indexOf, (, child, ), ;, switch, (]
[(, parent, ., children, (, ), ), ;, int, indexOfChildInParent, =, siblings, ., indexOf, (, child, ), ;, switch, (]
[int, indexOfChildInParent, =, siblings, ., indexOf, (, child, ), ;, switch, (, parent, ., getType, (, ), ), {, case]
[int, indexOfChildInParent, =, siblings, ., indexOf, (, child, ), ;, switch, (, parent, ., getType, (, ), ), {, case]
[indexOf, (, child, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case]
[indexOf, (, child, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case]
[switch, (, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., HOOK, :, return]
[(, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., HOOK, :, return, (]
[(, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., HOOK, :, return, (]
[(, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., HOOK, :, return, (]
[., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., HOOK, :, return, (, indexOfChildInParent, ==]
[(, ), ), {, case, Token, ., IF, :, case, Token, ., HOOK, :, return, (, indexOfChildInParent, ==, 1, ||]
[(, ), ), {, case, Token, ., IF, :, case, Token, ., HOOK, :, return, (, indexOfChildInParent, ==, 1, ||]
[), {, case, Token, ., IF, :, case, Token, ., HOOK, :, return, (, indexOfChildInParent, ==, 1, ||, indexOfChildInParent, ==]
[., IF, :, case, Token, ., HOOK, :, return, (, indexOfChildInParent, ==, 1, ||, indexOfChildInParent, ==, 2, ), ;, case]
[., IF, :, case, Token, ., HOOK, :, return, (, indexOfChildInParent, ==, 1, ||, indexOfChildInParent, ==, 2, ), ;, case]
[., HOOK, :, return, (, indexOfChildInParent, ==, 1, ||, indexOfChildInParent, ==, 2, ), ;, case, Token, ., WHILE, :, case]
[., HOOK, :, return, (, indexOfChildInParent, ==, 1, ||, indexOfChildInParent, ==, 2, ), ;, case, Token, ., WHILE, :, case]
[indexOfChildInParent, ==, 1, ||, indexOfChildInParent, ==, 2, ), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, return]
[||, indexOfChildInParent, ==, 2, ), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, return, true, ;, case]
[||, indexOfChildInParent, ==, 2, ), ;, case, Token, ., WHILE, :, case, Token, ., DO, :, return, true, ;, case]
[;, case, Token, ., WHILE, :, case, Token, ., DO, :, return, true, ;, case, Token, ., FOR, :, return]
[;, case, Token, ., WHILE, :, case, Token, ., DO, :, return, true, ;, case, Token, ., FOR, :, return]
[Token, ., WHILE, :, case, Token, ., DO, :, return, true, ;, case, Token, ., FOR, :, return, indexOfChildInParent, !=]
[:, case, Token, ., DO, :, return, true, ;, case, Token, ., FOR, :, return, indexOfChildInParent, !=, 0, ;, case]
[:, case, Token, ., DO, :, return, true, ;, case, Token, ., FOR, :, return, indexOfChildInParent, !=, 0, ;, case]
[:, return, true, ;, case, Token, ., FOR, :, return, indexOfChildInParent, !=, 0, ;, case, Token, ., SWITCH, :, return]
[:, return, true, ;, case, Token, ., FOR, :, return, indexOfChildInParent, !=, 0, ;, case, Token, ., SWITCH, :, return]
[true, ;, case, Token, ., FOR, :, return, indexOfChildInParent, !=, 0, ;, case, Token, ., SWITCH, :, return, indexOfChildInParent, >]
[Token, ., FOR, :, return, indexOfChildInParent, !=, 0, ;, case, Token, ., SWITCH, :, return, indexOfChildInParent, >, 0, ;, case]
[Token, ., FOR, :, return, indexOfChildInParent, !=, 0, ;, case, Token, ., SWITCH, :, return, indexOfChildInParent, >, 0, ;, case]
[indexOfChildInParent, !=, 0, ;, case, Token, ., SWITCH, :, return, indexOfChildInParent, >, 0, ;, case, Token, ., AND, :, return]
[;, case, Token, ., SWITCH, :, return, indexOfChildInParent, >, 0, ;, case, Token, ., AND, :, return, true, ;, case]
[;, case, Token, ., SWITCH, :, return, indexOfChildInParent, >, 0, ;, case, Token, ., AND, :, return, true, ;, case]
[:, return, indexOfChildInParent, >, 0, ;, case, Token, ., AND, :, return, true, ;, case, Token, ., OR, :, return]
[>, 0, ;, case, Token, ., AND, :, return, true, ;, case, Token, ., OR, :, return, true, ;, case]
[>, 0, ;, case, Token, ., AND, :, return, true, ;, case, Token, ., OR, :, return, true, ;, case]
[., AND, :, return, true, ;, case, Token, ., OR, :, return, true, ;, case, Token, ., FUNCTION, :, return]
[;, case, Token, ., OR, :, return, true, ;, case, Token, ., FUNCTION, :, return, true, ;, default, :, return]
[true, ;, default, :, return, false, ;, }, }, private, static, Node, closestControlDependentAncestor, (, Node, node, ), {, if, (]
[default, :, return, false, ;, }, }, private, static, Node, closestControlDependentAncestor, (, Node, node, ), {, if, (, isControlDependentChild, (]
[}, }, private, static, Node, closestControlDependentAncestor, (, Node, node, ), {, if, (, isControlDependentChild, (, node, ), ), {, return]
[node, ), {, if, (, isControlDependentChild, (, node, ), ), {, return, node, ;, }, for, (, Node, ancestor, :]
[node, ), {, if, (, isControlDependentChild, (, node, ), ), {, return, node, ;, }, for, (, Node, ancestor, :]
[), {, return, node, ;, }, for, (, Node, ancestor, :, node, ., getAncestors, (, ), ), {, if, (]
[return, node, ;, }, for, (, Node, ancestor, :, node, ., getAncestors, (, ), ), {, if, (, isControlDependentChild, (]
[(, Node, ancestor, :, node, ., getAncestors, (, ), ), {, if, (, isControlDependentChild, (, ancestor, ), ), {, return]
[., getAncestors, (, ), ), {, if, (, isControlDependentChild, (, ancestor, ), ), {, return, ancestor, ;, }, }, return]
[null, ;, }, private, static, boolean, nodeHasAncestor, (, Node, node, ,, Node, possibleAncestor, ), {, for, (, Node, ancestor, :]
[null, ;, }, private, static, boolean, nodeHasAncestor, (, Node, node, ,, Node, possibleAncestor, ), {, for, (, Node, ancestor, :]
[node, ,, Node, possibleAncestor, ), {, for, (, Node, ancestor, :, node, ., getAncestors, (, ), ), {, if, (]
[node, ,, Node, possibleAncestor, ), {, for, (, Node, ancestor, :, node, ., getAncestors, (, ), ), {, if, (]
[Node, possibleAncestor, ), {, for, (, Node, ancestor, :, node, ., getAncestors, (, ), ), {, if, (, ancestor, ==]
[for, (, Node, ancestor, :, node, ., getAncestors, (, ), ), {, if, (, ancestor, ==, possibleAncestor, ), {, return]
[node, ., getAncestors, (, ), ), {, if, (, ancestor, ==, possibleAncestor, ), {, return, true, ;, }, }, return]
[), {, return, true, ;, }, }, return, false, ;, }, private, boolean, nodeHasCall, (, Node, node, ), {, return]
[), {, return, true, ;, }, }, return, false, ;, }, private, boolean, nodeHasCall, (, Node, node, ), {, return]
[;, }, }, return, false, ;, }, private, boolean, nodeHasCall, (, Node, node, ), {, return, NodeUtil, ., has, (]
[}, return, false, ;, }, private, boolean, nodeHasCall, (, Node, node, ), {, return, NodeUtil, ., has, (, node, ,]
[,, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return]
[,, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return]
[,, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return]
[(, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, input, ., isCall, (, ), ||]
[(, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, input, ., isCall, (, ), ||]
[Node, input, ), {, return, input, ., isCall, (, ), ||, input, ., isNew, (, ), ;, }, }, ,]
[Node, cfgSource, ,, Node, cfgDestination, ), {, }, @, Override, public, Set, <, Node, >, calculateEnvironment, (, ), {, return]
[JSModule, destinationModule, ,, JSModuleGraph, moduleGraph, ), {, }, @, Override, public, Set, <, Node, >, calculateEnvironment, (, ), {, return]
[RawMotionEnvironment, extends, AbstractMotionEnvironment, {, Set, <, Node, >, environment, ;, public, RawMotionEnvironment, (, Set, <, Node, >, environment, ), {]
[RawMotionEnvironment, extends, AbstractMotionEnvironment, {, Set, <, Node, >, environment, ;, public, RawMotionEnvironment, (, Set, <, Node, >, environment, ), {]
[Set, <, Node, >, environment, ;, public, RawMotionEnvironment, (, Set, <, Node, >, environment, ), {, this, ., environment, =]
[{, this, ., environment, =, environment, ;, }, @, Override, public, Set, <, Node, >, calculateEnvironment, (, ), {, return]
[LocationSummary, {, private, EffectLocation, modSet, ;, private, EffectLocation, refSet, ;, public, LocationSummary, (, EffectLocation, modSet, ,, EffectLocation, refSet, ), {]
[LocationSummary, {, private, EffectLocation, modSet, ;, private, EffectLocation, refSet, ;, public, LocationSummary, (, EffectLocation, modSet, ,, EffectLocation, refSet, ), {]
[modSet, ;, private, EffectLocation, refSet, ;, public, LocationSummary, (, EffectLocation, modSet, ,, EffectLocation, refSet, ), {, this, ., modSet, =]
[private, EffectLocation, refSet, ;, public, LocationSummary, (, EffectLocation, modSet, ,, EffectLocation, refSet, ), {, this, ., modSet, =, modSet, ;]
[private, EffectLocation, refSet, ;, public, LocationSummary, (, EffectLocation, modSet, ,, EffectLocation, refSet, ), {, this, ., modSet, =, modSet, ;]
[public, LocationSummary, (, EffectLocation, modSet, ,, EffectLocation, refSet, ), {, this, ., modSet, =, modSet, ;, this, ., refSet, =]
[this, ., modSet, =, modSet, ;, this, ., refSet, =, refSet, ;, }, public, EffectLocation, getModSet, (, ), {, return]
[refSet, ;, }, public, EffectLocation, getModSet, (, ), {, return, modSet, ;, }, public, EffectLocation, getRefSet, (, ), {, return]
[abstract, EffectLocation, getBottomLocation, (, ), ;, public, LocationSummary, calculateLocationSummary, (, Set, <, Node, >, nodes, ), {, EffectLocation, modAccumulator, =]
[LocationSummary, calculateLocationSummary, (, Set, <, Node, >, nodes, ), {, EffectLocation, modAccumulator, =, getBottomLocation, (, ), ;, EffectLocation, refAccumulator, =]
[{, EffectLocation, modAccumulator, =, getBottomLocation, (, ), ;, EffectLocation, refAccumulator, =, getBottomLocation, (, ), ;, for, (, Node, node, :]
[), ;, EffectLocation, refAccumulator, =, getBottomLocation, (, ), ;, for, (, Node, node, :, nodes, ), {, LocationSummary, nodeLocationSummary, =]
[EffectLocation, refAccumulator, =, getBottomLocation, (, ), ;, for, (, Node, node, :, nodes, ), {, LocationSummary, nodeLocationSummary, =, calculateLocationSummary, (]
[getBottomLocation, (, ), ;, for, (, Node, node, :, nodes, ), {, LocationSummary, nodeLocationSummary, =, calculateLocationSummary, (, node, ), ;]
[), ;, for, (, Node, node, :, nodes, ), {, LocationSummary, nodeLocationSummary, =, calculateLocationSummary, (, node, ), ;, modAccumulator, =]
[), ;, for, (, Node, node, :, nodes, ), {, LocationSummary, nodeLocationSummary, =, calculateLocationSummary, (, node, ), ;, modAccumulator, =]
[Node, node, :, nodes, ), {, LocationSummary, nodeLocationSummary, =, calculateLocationSummary, (, node, ), ;, modAccumulator, =, modAccumulator, ., join, (]
[Node, node, :, nodes, ), {, LocationSummary, nodeLocationSummary, =, calculateLocationSummary, (, node, ), ;, modAccumulator, =, modAccumulator, ., join, (]
[nodeLocationSummary, =, calculateLocationSummary, (, node, ), ;, modAccumulator, =, modAccumulator, ., join, (, nodeLocationSummary, ., getModSet, (, ), ), ;]
[calculateLocationSummary, (, node, ), ;, modAccumulator, =, modAccumulator, ., join, (, nodeLocationSummary, ., getModSet, (, ), ), ;, refAccumulator, =]
[calculateLocationSummary, (, node, ), ;, modAccumulator, =, modAccumulator, ., join, (, nodeLocationSummary, ., getModSet, (, ), ), ;, refAccumulator, =]
[;, modAccumulator, =, modAccumulator, ., join, (, nodeLocationSummary, ., getModSet, (, ), ), ;, refAccumulator, =, refAccumulator, ., join, (]
[;, modAccumulator, =, modAccumulator, ., join, (, nodeLocationSummary, ., getModSet, (, ), ), ;, refAccumulator, =, refAccumulator, ., join, (]
[getModSet, (, ), ), ;, refAccumulator, =, refAccumulator, ., join, (, nodeLocationSummary, ., getRefSet, (, ), ), ;, }, return]
[), ;, refAccumulator, =, refAccumulator, ., join, (, nodeLocationSummary, ., getRefSet, (, ), ), ;, }, return, new, LocationSummary, (]
[refAccumulator, =, refAccumulator, ., join, (, nodeLocationSummary, ., getRefSet, (, ), ), ;, }, return, new, LocationSummary, (, modAccumulator, ,]
[modAccumulator, ,, refAccumulator, ), ;, }, }, private, static, class, DegenerateLocationAbstraction, extends, LocationAbstraction, {, private, static, final, EffectLocation, EVERY_LOCATION, =]
[extends, LocationAbstraction, {, private, static, final, EffectLocation, EVERY_LOCATION, =, new, DegenerateEffectLocation, (, ), ;, private, static, final, EffectLocation, NO_LOCATION, =]
[;, private, static, final, EffectLocation, NO_LOCATION, =, new, DegenerateEffectLocation, (, ), ;, @, Override, EffectLocation, getBottomLocation, (, ), {, return]
[EffectLocation, getBottomLocation, (, ), {, return, NO_LOCATION, ;, }, @, Override, public, LocationSummary, calculateLocationSummary, (, Node, node, ), {, return]
[), {, return, NO_LOCATION, ;, }, @, Override, public, LocationSummary, calculateLocationSummary, (, Node, node, ), {, return, new, LocationSummary, (]
[return, NO_LOCATION, ;, }, @, Override, public, LocationSummary, calculateLocationSummary, (, Node, node, ), {, return, new, LocationSummary, (, calculateModSet, (]
[}, @, Override, public, LocationSummary, calculateLocationSummary, (, Node, node, ), {, return, new, LocationSummary, (, calculateModSet, (, node, ), ,]
[Override, public, LocationSummary, calculateLocationSummary, (, Node, node, ), {, return, new, LocationSummary, (, calculateModSet, (, node, ), ,, calculateRefSet, (]
[(, node, ), ,, calculateRefSet, (, node, ), ), ;, }, EffectLocation, calculateRefSet, (, Node, node, ), {, if, (]
[(, node, ), ,, calculateRefSet, (, node, ), ), ;, }, EffectLocation, calculateRefSet, (, Node, node, ), {, if, (]
[calculateRefSet, (, node, ), ), ;, }, EffectLocation, calculateRefSet, (, Node, node, ), {, if, (, NodeUtil, ., canBeSideEffected, (]
[;, }, EffectLocation, calculateRefSet, (, Node, node, ), {, if, (, NodeUtil, ., canBeSideEffected, (, node, ), ), {, return]
[node, ), {, if, (, NodeUtil, ., canBeSideEffected, (, node, ), ), {, return, EVERY_LOCATION, ;, }, else, {, return]
[return, EVERY_LOCATION, ;, }, else, {, return, NO_LOCATION, ;, }, }, EffectLocation, calculateModSet, (, Node, node, ), {, if, (]
[return, EVERY_LOCATION, ;, }, else, {, return, NO_LOCATION, ;, }, }, EffectLocation, calculateModSet, (, Node, node, ), {, if, (]
[else, {, return, NO_LOCATION, ;, }, }, EffectLocation, calculateModSet, (, Node, node, ), {, if, (, NodeUtil, ., mayHaveSideEffects, (]
[}, }, EffectLocation, calculateModSet, (, Node, node, ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, node, ), ), {, return]
[node, ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, node, ), ), {, return, EVERY_LOCATION, ;, }, else, {, return]
[}, private, static, class, DegenerateEffectLocation, implements, EffectLocation, {, @, Override, public, EffectLocation, join, (, EffectLocation, otherLocation, ), {, if, (]
[}, private, static, class, DegenerateEffectLocation, implements, EffectLocation, {, @, Override, public, EffectLocation, join, (, EffectLocation, otherLocation, ), {, if, (]
[static, class, DegenerateEffectLocation, implements, EffectLocation, {, @, Override, public, EffectLocation, join, (, EffectLocation, otherLocation, ), {, if, (, otherLocation, ==]
[EffectLocation, {, @, Override, public, EffectLocation, join, (, EffectLocation, otherLocation, ), {, if, (, otherLocation, ==, EVERY_LOCATION, ), {, return]
[join, (, EffectLocation, otherLocation, ), {, if, (, otherLocation, ==, EVERY_LOCATION, ), {, return, otherLocation, ;, }, else, {, return]
[;, }, else, {, return, this, ;, }, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, return]
[;, }, else, {, return, this, ;, }, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, return]
[;, }, else, {, return, this, ;, }, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, return]
[else, {, return, this, ;, }, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, return, this, ==]
[return, this, ;, }, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, return, this, ==, EVERY_LOCATION, &&]
[return, this, ;, }, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, return, this, ==, EVERY_LOCATION, &&]
[;, }, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, return, this, ==, EVERY_LOCATION, &&, otherLocation, ==]
[{, return, this, ==, EVERY_LOCATION, &&, otherLocation, ==, EVERY_LOCATION, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return]
[{, return, this, ==, EVERY_LOCATION, &&, otherLocation, ==, EVERY_LOCATION, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return]
[this, ==, EVERY_LOCATION, &&, otherLocation, ==, EVERY_LOCATION, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return, this, ==]
[this, ==, NO_LOCATION, ;, }, }, }, private, static, class, VisibilityLocationAbstraction, extends, LocationAbstraction, {, private, static, final, int, VISIBILITY_LOCATION_NONE, =]
[static, class, VisibilityLocationAbstraction, extends, LocationAbstraction, {, private, static, final, int, VISIBILITY_LOCATION_NONE, =, 0, ;, private, static, final, int, UNKNOWN_LOCATION_MASK, =]
[final, int, VISIBILITY_LOCATION_NONE, =, 0, ;, private, static, final, int, UNKNOWN_LOCATION_MASK, =, 0xFFFFFFFF, ;, private, static, final, int, LOCAL_VARIABLE_LOCATION_MASK, =]
[final, int, VISIBILITY_LOCATION_NONE, =, 0, ;, private, static, final, int, UNKNOWN_LOCATION_MASK, =, 0xFFFFFFFF, ;, private, static, final, int, LOCAL_VARIABLE_LOCATION_MASK, =]
[VISIBILITY_LOCATION_NONE, =, 0, ;, private, static, final, int, UNKNOWN_LOCATION_MASK, =, 0xFFFFFFFF, ;, private, static, final, int, LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<]
[UNKNOWN_LOCATION_MASK, =, 0xFFFFFFFF, ;, private, static, final, int, LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<, 1, ;, private, static, final, int, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, =]
[UNKNOWN_LOCATION_MASK, =, 0xFFFFFFFF, ;, private, static, final, int, LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<, 1, ;, private, static, final, int, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, =]
[0xFFFFFFFF, ;, private, static, final, int, LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<, 1, ;, private, static, final, int, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<]
[1, <<, 1, ;, private, static, final, int, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<, 2, ;, private, static, final, int, GLOBAL_VARIABLE_LOCATION_MASK, =]
[1, <<, 1, ;, private, static, final, int, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<, 2, ;, private, static, final, int, GLOBAL_VARIABLE_LOCATION_MASK, =]
[1, ;, private, static, final, int, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, =, 1, <<, 2, ;, private, static, final, int, GLOBAL_VARIABLE_LOCATION_MASK, =, 1, <<]
[1, <<, 2, ;, private, static, final, int, GLOBAL_VARIABLE_LOCATION_MASK, =, 1, <<, 3, ;, private, static, final, int, HEAP_LOCATION_MASK, =]
[1, <<, 2, ;, private, static, final, int, GLOBAL_VARIABLE_LOCATION_MASK, =, 1, <<, 3, ;, private, static, final, int, HEAP_LOCATION_MASK, =]
[2, ;, private, static, final, int, GLOBAL_VARIABLE_LOCATION_MASK, =, 1, <<, 3, ;, private, static, final, int, HEAP_LOCATION_MASK, =, 1, <<]
[;, VariableVisibilityAnalysis, variableVisibilityAnalysis, ;, VariableUseDeclarationMap, variableUseMap, ;, private, VisibilityLocationAbstraction, (, AbstractCompiler, compiler, ,, VariableVisibilityAnalysis, variableVisibilityAnalysis, ,, VariableUseDeclarationMap, variableUseMap, ), {]
[;, VariableVisibilityAnalysis, variableVisibilityAnalysis, ;, VariableUseDeclarationMap, variableUseMap, ;, private, VisibilityLocationAbstraction, (, AbstractCompiler, compiler, ,, VariableVisibilityAnalysis, variableVisibilityAnalysis, ,, VariableUseDeclarationMap, variableUseMap, ), {]
[VariableUseDeclarationMap, variableUseMap, ;, private, VisibilityLocationAbstraction, (, AbstractCompiler, compiler, ,, VariableVisibilityAnalysis, variableVisibilityAnalysis, ,, VariableUseDeclarationMap, variableUseMap, ), {, this, ., compiler, =]
[;, private, VisibilityLocationAbstraction, (, AbstractCompiler, compiler, ,, VariableVisibilityAnalysis, variableVisibilityAnalysis, ,, VariableUseDeclarationMap, variableUseMap, ), {, this, ., compiler, =, compiler, ;]
[;, private, VisibilityLocationAbstraction, (, AbstractCompiler, compiler, ,, VariableVisibilityAnalysis, variableVisibilityAnalysis, ,, VariableUseDeclarationMap, variableUseMap, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, VariableVisibilityAnalysis, variableVisibilityAnalysis, ,, VariableUseDeclarationMap, variableUseMap, ), {, this, ., compiler, =, compiler, ;, this, ., variableVisibilityAnalysis, =]
[,, VariableVisibilityAnalysis, variableVisibilityAnalysis, ,, VariableUseDeclarationMap, variableUseMap, ), {, this, ., compiler, =, compiler, ;, this, ., variableVisibilityAnalysis, =, variableVisibilityAnalysis, ;]
[,, VariableVisibilityAnalysis, variableVisibilityAnalysis, ,, VariableUseDeclarationMap, variableUseMap, ), {, this, ., compiler, =, compiler, ;, this, ., variableVisibilityAnalysis, =, variableVisibilityAnalysis, ;]
[VariableUseDeclarationMap, variableUseMap, ), {, this, ., compiler, =, compiler, ;, this, ., variableVisibilityAnalysis, =, variableVisibilityAnalysis, ;, this, ., variableUseMap, =]
[;, this, ., variableUseMap, =, variableUseMap, ;, }, @, Override, LocationSummary, calculateLocationSummary, (, Node, node, ), {, int, visibilityRefLocations, =]
[variableUseMap, ;, }, @, Override, LocationSummary, calculateLocationSummary, (, Node, node, ), {, int, visibilityRefLocations, =, VISIBILITY_LOCATION_NONE, ;, int, visibilityModLocations, =]
[(, Node, node, ), {, int, visibilityRefLocations, =, VISIBILITY_LOCATION_NONE, ;, int, visibilityModLocations, =, VISIBILITY_LOCATION_NONE, ;, for, (, Node, reference, :]
[node, ), {, int, visibilityRefLocations, =, VISIBILITY_LOCATION_NONE, ;, int, visibilityModLocations, =, VISIBILITY_LOCATION_NONE, ;, for, (, Node, reference, :, findStorageLocationReferences, (]
[visibilityModLocations, =, VISIBILITY_LOCATION_NONE, ;, for, (, Node, reference, :, findStorageLocationReferences, (, node, ), ), {, int, effectMask, ;, if, (]
[visibilityModLocations, =, VISIBILITY_LOCATION_NONE, ;, for, (, Node, reference, :, findStorageLocationReferences, (, node, ), ), {, int, effectMask, ;, if, (]
[reference, :, findStorageLocationReferences, (, node, ), ), {, int, effectMask, ;, if, (, reference, ., isName, (, ), ), {]
[findStorageLocationReferences, (, node, ), ), {, int, effectMask, ;, if, (, reference, ., isName, (, ), ), {, effectMask, =]
[node, ), ), {, int, effectMask, ;, if, (, reference, ., isName, (, ), ), {, effectMask, =, effectMaskForVariableReference, (]
[;, if, (, reference, ., isName, (, ), ), {, effectMask, =, effectMaskForVariableReference, (, reference, ), ;, }, else, {]
[(, reference, ., isName, (, ), ), {, effectMask, =, effectMaskForVariableReference, (, reference, ), ;, }, else, {, effectMask, =]
[), ), {, effectMask, =, effectMaskForVariableReference, (, reference, ), ;, }, else, {, effectMask, =, HEAP_LOCATION_MASK, ;, }, if, (]
[{, effectMask, =, effectMaskForVariableReference, (, reference, ), ;, }, else, {, effectMask, =, HEAP_LOCATION_MASK, ;, }, if, (, storageNodeIsLValue, (]
[(, reference, ), ;, }, else, {, effectMask, =, HEAP_LOCATION_MASK, ;, }, if, (, storageNodeIsLValue, (, reference, ), ), {]
[), ;, }, else, {, effectMask, =, HEAP_LOCATION_MASK, ;, }, if, (, storageNodeIsLValue, (, reference, ), ), {, visibilityModLocations, |=]
[effectMask, =, HEAP_LOCATION_MASK, ;, }, if, (, storageNodeIsLValue, (, reference, ), ), {, visibilityModLocations, |=, effectMask, ;, }, if, (]
[HEAP_LOCATION_MASK, ;, }, if, (, storageNodeIsLValue, (, reference, ), ), {, visibilityModLocations, |=, effectMask, ;, }, if, (, storageNodeIsRValue, (]
[(, storageNodeIsLValue, (, reference, ), ), {, visibilityModLocations, |=, effectMask, ;, }, if, (, storageNodeIsRValue, (, reference, ), ), {]
[(, reference, ), ), {, visibilityModLocations, |=, effectMask, ;, }, if, (, storageNodeIsRValue, (, reference, ), ), {, visibilityRefLocations, |=]
[effectMask, ;, }, if, (, storageNodeIsRValue, (, reference, ), ), {, visibilityRefLocations, |=, effectMask, ;, }, }, VisibilityBasedEffectLocation, modSet, =]
[if, (, storageNodeIsRValue, (, reference, ), ), {, visibilityRefLocations, |=, effectMask, ;, }, }, VisibilityBasedEffectLocation, modSet, =, new, VisibilityBasedEffectLocation, (]
[), {, visibilityRefLocations, |=, effectMask, ;, }, }, VisibilityBasedEffectLocation, modSet, =, new, VisibilityBasedEffectLocation, (, visibilityModLocations, ), ;, VisibilityBasedEffectLocation, refSet, =]
[|=, effectMask, ;, }, }, VisibilityBasedEffectLocation, modSet, =, new, VisibilityBasedEffectLocation, (, visibilityModLocations, ), ;, VisibilityBasedEffectLocation, refSet, =, new, VisibilityBasedEffectLocation, (]
[}, VisibilityBasedEffectLocation, modSet, =, new, VisibilityBasedEffectLocation, (, visibilityModLocations, ), ;, VisibilityBasedEffectLocation, refSet, =, new, VisibilityBasedEffectLocation, (, visibilityRefLocations, ), ;, return]
[=, new, VisibilityBasedEffectLocation, (, visibilityModLocations, ), ;, VisibilityBasedEffectLocation, refSet, =, new, VisibilityBasedEffectLocation, (, visibilityRefLocations, ), ;, return, new, LocationSummary, (]
[VisibilityBasedEffectLocation, (, visibilityModLocations, ), ;, VisibilityBasedEffectLocation, refSet, =, new, VisibilityBasedEffectLocation, (, visibilityRefLocations, ), ;, return, new, LocationSummary, (, modSet, ,]
[;, }, private, Set, <, Node, >, findStorageLocationReferences, (, Node, root, ), {, final, Set, <, Node, >, references, =]
[;, }, private, Set, <, Node, >, findStorageLocationReferences, (, Node, root, ), {, final, Set, <, Node, >, references, =]
[>, findStorageLocationReferences, (, Node, root, ), {, final, Set, <, Node, >, references, =, Sets, ., newHashSet, (, ), ;]
[>, findStorageLocationReferences, (, Node, root, ), {, final, Set, <, Node, >, references, =, Sets, ., newHashSet, (, ), ;]
[root, ), {, final, Set, <, Node, >, references, =, Sets, ., newHashSet, (, ), ;, NodeTraversal, ., traverse, (]
[{, final, Set, <, Node, >, references, =, Sets, ., newHashSet, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[Set, <, Node, >, references, =, Sets, ., newHashSet, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isGet, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isGet, (, n, ), ||]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isGet, (, n, ), ||, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isGet, (, n, ), ||, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isGet, (, n, ), ||, (]
[Node, parent, ), {, if, (, NodeUtil, ., isGet, (, n, ), ||, (, n, ., isName, (, ), &&]
[parent, ), {, if, (, NodeUtil, ., isGet, (, n, ), ||, (, n, ., isName, (, ), &&, !]
[parent, ), {, if, (, NodeUtil, ., isGet, (, n, ), ||, (, n, ., isName, (, ), &&, !]
[(, n, ), ||, (, n, ., isName, (, ), &&, !, parent, ., isFunction, (, ), ), ), {]
[(, n, ), ||, (, n, ., isName, (, ), &&, !, parent, ., isFunction, (, ), ), ), {]
[(, n, ., isName, (, ), &&, !, parent, ., isFunction, (, ), ), ), {, references, ., add, (]
[., isFunction, (, ), ), ), {, references, ., add, (, n, ), ;, }, }, }, ), ;, return]
[n, ), ;, }, }, }, ), ;, return, references, ;, }, private, int, effectMaskForVariableReference, (, Node, variableReference, ), {]
[n, ), ;, }, }, }, ), ;, return, references, ;, }, private, int, effectMaskForVariableReference, (, Node, variableReference, ), {]
[}, }, ), ;, return, references, ;, }, private, int, effectMaskForVariableReference, (, Node, variableReference, ), {, Preconditions, ., checkArgument, (]
[}, }, ), ;, return, references, ;, }, private, int, effectMaskForVariableReference, (, Node, variableReference, ), {, Preconditions, ., checkArgument, (]
[effectMaskForVariableReference, (, Node, variableReference, ), {, Preconditions, ., checkArgument, (, variableReference, ., isName, (, ), ), ;, int, effectMask, =]
[{, Preconditions, ., checkArgument, (, variableReference, ., isName, (, ), ), ;, int, effectMask, =, VISIBILITY_LOCATION_NONE, ;, Node, declaringNameNode, =]
[{, Preconditions, ., checkArgument, (, variableReference, ., isName, (, ), ), ;, int, effectMask, =, VISIBILITY_LOCATION_NONE, ;, Node, declaringNameNode, =]
[(, variableReference, ., isName, (, ), ), ;, int, effectMask, =, VISIBILITY_LOCATION_NONE, ;, Node, declaringNameNode, =, variableUseMap, ., findDeclaringNameNodeForUse, (]
[), ), ;, int, effectMask, =, VISIBILITY_LOCATION_NONE, ;, Node, declaringNameNode, =, variableUseMap, ., findDeclaringNameNodeForUse, (, variableReference, ), ;, if, (]
[), ), ;, int, effectMask, =, VISIBILITY_LOCATION_NONE, ;, Node, declaringNameNode, =, variableUseMap, ., findDeclaringNameNodeForUse, (, variableReference, ), ;, if, (]
[;, int, effectMask, =, VISIBILITY_LOCATION_NONE, ;, Node, declaringNameNode, =, variableUseMap, ., findDeclaringNameNodeForUse, (, variableReference, ), ;, if, (, declaringNameNode, !=]
[Node, declaringNameNode, =, variableUseMap, ., findDeclaringNameNodeForUse, (, variableReference, ), ;, if, (, declaringNameNode, !=, null, ), {, VariableVisibility, visibility, =]
[Node, declaringNameNode, =, variableUseMap, ., findDeclaringNameNodeForUse, (, variableReference, ), ;, if, (, declaringNameNode, !=, null, ), {, VariableVisibility, visibility, =]
[., findDeclaringNameNodeForUse, (, variableReference, ), ;, if, (, declaringNameNode, !=, null, ), {, VariableVisibility, visibility, =, variableVisibilityAnalysis, ., getVariableVisibility, (]
[;, if, (, declaringNameNode, !=, null, ), {, VariableVisibility, visibility, =, variableVisibilityAnalysis, ., getVariableVisibility, (, declaringNameNode, ), ;, switch, (]
[!=, null, ), {, VariableVisibility, visibility, =, variableVisibilityAnalysis, ., getVariableVisibility, (, declaringNameNode, ), ;, switch, (, visibility, ), {, case]
[), {, VariableVisibility, visibility, =, variableVisibilityAnalysis, ., getVariableVisibility, (, declaringNameNode, ), ;, switch, (, visibility, ), {, case, LOCAL, :]
[VariableVisibility, visibility, =, variableVisibilityAnalysis, ., getVariableVisibility, (, declaringNameNode, ), ;, switch, (, visibility, ), {, case, LOCAL, :, effectMask, =]
[getVariableVisibility, (, declaringNameNode, ), ;, switch, (, visibility, ), {, case, LOCAL, :, effectMask, =, LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case]
[declaringNameNode, ), ;, switch, (, visibility, ), {, case, LOCAL, :, effectMask, =, LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, CAPTURED_LOCAL, :]
[;, switch, (, visibility, ), {, case, LOCAL, :, effectMask, =, LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, CAPTURED_LOCAL, :, effectMask, =]
[{, case, LOCAL, :, effectMask, =, LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, CAPTURED_LOCAL, :, effectMask, =, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case]
[LOCAL, :, effectMask, =, LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, CAPTURED_LOCAL, :, effectMask, =, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, PARAMETER, :]
[effectMask, =, LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, CAPTURED_LOCAL, :, effectMask, =, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, PARAMETER, :, effectMask, =]
[;, case, CAPTURED_LOCAL, :, effectMask, =, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, PARAMETER, :, effectMask, =, HEAP_LOCATION_MASK, ;, break, ;, case]
[CAPTURED_LOCAL, :, effectMask, =, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, PARAMETER, :, effectMask, =, HEAP_LOCATION_MASK, ;, break, ;, case, GLOBAL, :]
[effectMask, =, CAPTURED_LOCAL_VARIABLE_LOCATION_MASK, ;, break, ;, case, PARAMETER, :, effectMask, =, HEAP_LOCATION_MASK, ;, break, ;, case, GLOBAL, :, effectMask, =]
[PARAMETER, :, effectMask, =, HEAP_LOCATION_MASK, ;, break, ;, case, GLOBAL, :, effectMask, =, GLOBAL_VARIABLE_LOCATION_MASK, ;, break, ;, default, :, throw]
[=, HEAP_LOCATION_MASK, ;, break, ;, case, GLOBAL, :, effectMask, =, GLOBAL_VARIABLE_LOCATION_MASK, ;, break, ;, default, :, throw, new, IllegalStateException, (]
[=, HEAP_LOCATION_MASK, ;, break, ;, case, GLOBAL, :, effectMask, =, GLOBAL_VARIABLE_LOCATION_MASK, ;, break, ;, default, :, throw, new, IllegalStateException, (]
[=, HEAP_LOCATION_MASK, ;, break, ;, case, GLOBAL, :, effectMask, =, GLOBAL_VARIABLE_LOCATION_MASK, ;, break, ;, default, :, throw, new, IllegalStateException, (]
[;, break, ;, case, GLOBAL, :, effectMask, =, GLOBAL_VARIABLE_LOCATION_MASK, ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized variable", +]
[;, case, GLOBAL, :, effectMask, =, GLOBAL_VARIABLE_LOCATION_MASK, ;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized variable", +, " visibility: ", +]
[;, break, ;, default, :, throw, new, IllegalStateException, (, "Unrecognized variable", +, " visibility: ", +, visibility, ), ;, }, }, else, {]
[;, default, :, throw, new, IllegalStateException, (, "Unrecognized variable", +, " visibility: ", +, visibility, ), ;, }, }, else, {, effectMask, =]
[new, IllegalStateException, (, "Unrecognized variable", +, " visibility: ", +, visibility, ), ;, }, }, else, {, effectMask, =, UNKNOWN_LOCATION_MASK, ;, }, return]
[}, else, {, effectMask, =, UNKNOWN_LOCATION_MASK, ;, }, return, effectMask, ;, }, @, Override, EffectLocation, getBottomLocation, (, ), {, return]
[effectMask, =, UNKNOWN_LOCATION_MASK, ;, }, return, effectMask, ;, }, @, Override, EffectLocation, getBottomLocation, (, ), {, return, new, VisibilityBasedEffectLocation, (]
[), {, return, new, VisibilityBasedEffectLocation, (, VISIBILITY_LOCATION_NONE, ), ;, }, private, static, boolean, isStorageNode, (, Node, node, ), {, return]
[), {, return, new, VisibilityBasedEffectLocation, (, VISIBILITY_LOCATION_NONE, ), ;, }, private, static, boolean, isStorageNode, (, Node, node, ), {, return]
[), {, return, new, VisibilityBasedEffectLocation, (, VISIBILITY_LOCATION_NONE, ), ;, }, private, static, boolean, isStorageNode, (, Node, node, ), {, return]
[VISIBILITY_LOCATION_NONE, ), ;, }, private, static, boolean, isStorageNode, (, Node, node, ), {, return, node, ., isName, (, ), ||]
[VISIBILITY_LOCATION_NONE, ), ;, }, private, static, boolean, isStorageNode, (, Node, node, ), {, return, node, ., isName, (, ), ||]
[private, static, boolean, isStorageNode, (, Node, node, ), {, return, node, ., isName, (, ), ||, NodeUtil, ., isGet, (]
[(, ), ||, NodeUtil, ., isGet, (, node, ), ;, }, private, static, boolean, storageNodeIsRValue, (, Node, node, ), {]
[(, ), ||, NodeUtil, ., isGet, (, node, ), ;, }, private, static, boolean, storageNodeIsRValue, (, Node, node, ), {]
[., isGet, (, node, ), ;, }, private, static, boolean, storageNodeIsRValue, (, Node, node, ), {, Preconditions, ., checkArgument, (]
[(, node, ), ;, }, private, static, boolean, storageNodeIsRValue, (, Node, node, ), {, Preconditions, ., checkArgument, (, isStorageNode, (]
[boolean, storageNodeIsRValue, (, Node, node, ), {, Preconditions, ., checkArgument, (, isStorageNode, (, node, ), ), ;, Node, parent, =]
[boolean, storageNodeIsRValue, (, Node, node, ), {, Preconditions, ., checkArgument, (, isStorageNode, (, node, ), ), ;, Node, parent, =]
[., checkArgument, (, isStorageNode, (, node, ), ), ;, Node, parent, =, node, ., getParent, (, ), ;, if, (]
[(, isStorageNode, (, node, ), ), ;, Node, parent, =, node, ., getParent, (, ), ;, if, (, storageNodeIsLValue, (]
[Node, parent, =, node, ., getParent, (, ), ;, if, (, storageNodeIsLValue, (, node, ), ), {, boolean, nonSimpleAssign, =]
[Node, parent, =, node, ., getParent, (, ), ;, if, (, storageNodeIsLValue, (, node, ), ), {, boolean, nonSimpleAssign, =]
[Node, parent, =, node, ., getParent, (, ), ;, if, (, storageNodeIsLValue, (, node, ), ), {, boolean, nonSimpleAssign, =]
[., getParent, (, ), ;, if, (, storageNodeIsLValue, (, node, ), ), {, boolean, nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (]
[), ;, if, (, storageNodeIsLValue, (, node, ), ), {, boolean, nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[;, if, (, storageNodeIsLValue, (, node, ), ), {, boolean, nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, !]
[;, if, (, storageNodeIsLValue, (, node, ), ), {, boolean, nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, !]
[), {, boolean, nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, !, parent, ., isAssign, (, ), ;, return]
[{, boolean, nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, !, parent, ., isAssign, (, ), ;, return, (]
[{, boolean, nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, !, parent, ., isAssign, (, ), ;, return, (]
[{, boolean, nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, !, parent, ., isAssign, (, ), ;, return, (]
[nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, !, parent, ., isAssign, (, ), ;, return, (, nonSimpleAssign, ||]
[nonSimpleAssign, =, NodeUtil, ., isAssignmentOp, (, parent, ), &&, !, parent, ., isAssign, (, ), ;, return, (, nonSimpleAssign, ||]
[parent, ), &&, !, parent, ., isAssign, (, ), ;, return, (, nonSimpleAssign, ||, parent, ., isDec, (, ), ||]
[parent, ), &&, !, parent, ., isAssign, (, ), ;, return, (, nonSimpleAssign, ||, parent, ., isDec, (, ), ||]
[;, return, (, nonSimpleAssign, ||, parent, ., isDec, (, ), ||, parent, ., isInc, (, ), ), ;, }, return]
[., isInc, (, ), ), ;, }, return, true, ;, }, private, static, boolean, storageNodeIsLValue, (, Node, node, ), {]
[., isInc, (, ), ), ;, }, return, true, ;, }, private, static, boolean, storageNodeIsLValue, (, Node, node, ), {]
[), ;, }, return, true, ;, }, private, static, boolean, storageNodeIsLValue, (, Node, node, ), {, Preconditions, ., checkArgument, (]
[}, return, true, ;, }, private, static, boolean, storageNodeIsLValue, (, Node, node, ), {, Preconditions, ., checkArgument, (, isStorageNode, (]
[private, static, boolean, storageNodeIsLValue, (, Node, node, ), {, Preconditions, ., checkArgument, (, isStorageNode, (, node, ), ), ;, return]
[private, static, boolean, storageNodeIsLValue, (, Node, node, ), {, Preconditions, ., checkArgument, (, isStorageNode, (, node, ), ), ;, return]
[(, Node, node, ), {, Preconditions, ., checkArgument, (, isStorageNode, (, node, ), ), ;, return, NodeUtil, ., isLValue, (]
[;, return, NodeUtil, ., isLValue, (, node, ), ;, }, private, static, class, VisibilityBasedEffectLocation, implements, EffectLocation, {, int, visibilityMask, =]
[}, private, static, class, VisibilityBasedEffectLocation, implements, EffectLocation, {, int, visibilityMask, =, VISIBILITY_LOCATION_NONE, ;, public, VisibilityBasedEffectLocation, (, int, visibilityMask, ), {]
[}, private, static, class, VisibilityBasedEffectLocation, implements, EffectLocation, {, int, visibilityMask, =, VISIBILITY_LOCATION_NONE, ;, public, VisibilityBasedEffectLocation, (, int, visibilityMask, ), {]
[VisibilityBasedEffectLocation, implements, EffectLocation, {, int, visibilityMask, =, VISIBILITY_LOCATION_NONE, ;, public, VisibilityBasedEffectLocation, (, int, visibilityMask, ), {, this, ., visibilityMask, =]
[visibilityMask, ), {, this, ., visibilityMask, =, visibilityMask, ;, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {]
[visibilityMask, ), {, this, ., visibilityMask, =, visibilityMask, ;, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {]
[., visibilityMask, =, visibilityMask, ;, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (]
[., visibilityMask, =, visibilityMask, ;, }, @, Override, public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (]
[public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =]
[public, boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =]
[boolean, intersectsLocation, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (]
[EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, )]
[checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, return]
[checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, return]
[(, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, return, (]
[(, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, return, (]
[instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, return, (, visibilityMask, &]
[;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, return, (, visibilityMask, &, otherMask, ), >]
[;, return, (, visibilityMask, &, otherMask, ), >, 0, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return]
[;, return, (, visibilityMask, &, otherMask, ), >, 0, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return]
[(, visibilityMask, &, otherMask, ), >, 0, ;, }, @, Override, public, boolean, isEmpty, (, ), {, return, visibilityMask, ==]
[isEmpty, (, ), {, return, visibilityMask, ==, VISIBILITY_LOCATION_NONE, ;, }, @, Override, public, EffectLocation, join, (, EffectLocation, otherLocation, ), {]
[isEmpty, (, ), {, return, visibilityMask, ==, VISIBILITY_LOCATION_NONE, ;, }, @, Override, public, EffectLocation, join, (, EffectLocation, otherLocation, ), {]
[return, visibilityMask, ==, VISIBILITY_LOCATION_NONE, ;, }, @, Override, public, EffectLocation, join, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (]
[return, visibilityMask, ==, VISIBILITY_LOCATION_NONE, ;, }, @, Override, public, EffectLocation, join, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (]
[public, EffectLocation, join, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =]
[public, EffectLocation, join, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =]
[EffectLocation, join, (, EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (]
[EffectLocation, otherLocation, ), {, Preconditions, ., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, )]
[otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, int, joinedMask, =]
[otherLocation, instanceof, VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, int, joinedMask, =]
[VisibilityBasedEffectLocation, ), ;, int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, int, joinedMask, =, visibilityMask, |]
[int, otherMask, =, (, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, int, joinedMask, =, visibilityMask, |, otherMask, ;, return]
[(, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask, ;, int, joinedMask, =, visibilityMask, |, otherMask, ;, return, new, VisibilityBasedEffectLocation, (]
[private, AbstractCompiler, compiler, ;, private, Map, <, Node, ,, Node, >, referencesByNameNode, ;, public, VariableUseDeclarationMap, (, AbstractCompiler, compiler, ), {]
[private, AbstractCompiler, compiler, ;, private, Map, <, Node, ,, Node, >, referencesByNameNode, ;, public, VariableUseDeclarationMap, (, AbstractCompiler, compiler, ), {]
[private, Map, <, Node, ,, Node, >, referencesByNameNode, ;, public, VariableUseDeclarationMap, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[(, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, public, void, mapUses, (, Node, root, ), {]
[compiler, ), {, this, ., compiler, =, compiler, ;, }, public, void, mapUses, (, Node, root, ), {, referencesByNameNode, =]
[compiler, ), {, this, ., compiler, =, compiler, ;, }, public, void, mapUses, (, Node, root, ), {, referencesByNameNode, =]
[}, public, void, mapUses, (, Node, root, ), {, referencesByNameNode, =, Maps, ., newHashMap, (, ), ;, ReferenceCollectingCallback, callback, =]
[mapUses, (, Node, root, ), {, referencesByNameNode, =, Maps, ., newHashMap, (, ), ;, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (]
[Node, root, ), {, referencesByNameNode, =, Maps, ., newHashMap, (, ), ;, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,]
[Node, root, ), {, referencesByNameNode, =, Maps, ., newHashMap, (, ), ;, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,]
[=, Maps, ., newHashMap, (, ), ;, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;]
[=, Maps, ., newHashMap, (, ), ;, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;]
[(, ), ;, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (]
[;, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[callback, =, new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var, variable, :]
[., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var, variable, :]
[root, ,, callback, ), ;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =]
[root, ,, callback, ), ;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =]
[;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences, (]
[getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences, (, variable, ), ;, for, (, Reference, reference, :]
[getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences, (, variable, ), ;, for, (, Reference, reference, :]
[callback, ., getReferences, (, variable, ), ;, for, (, Reference, reference, :, referenceCollection, ., references, ), {, Node, referenceNameNode, =]
[callback, ., getReferences, (, variable, ), ;, for, (, Reference, reference, :, referenceCollection, ., references, ), {, Node, referenceNameNode, =]
[;, for, (, Reference, reference, :, referenceCollection, ., references, ), {, Node, referenceNameNode, =, reference, ., getNode, (, ), ;]
[;, for, (, Reference, reference, :, referenceCollection, ., references, ), {, Node, referenceNameNode, =, reference, ., getNode, (, ), ;]
[reference, :, referenceCollection, ., references, ), {, Node, referenceNameNode, =, reference, ., getNode, (, ), ;, referencesByNameNode, ., put, (]
[referenceCollection, ., references, ), {, Node, referenceNameNode, =, reference, ., getNode, (, ), ;, referencesByNameNode, ., put, (, referenceNameNode, ,]
[referenceCollection, ., references, ), {, Node, referenceNameNode, =, reference, ., getNode, (, ), ;, referencesByNameNode, ., put, (, referenceNameNode, ,]
[referenceNameNode, ,, variable, ., getNameNode, (, ), ), ;, }, }, }, public, Node, findDeclaringNameNodeForUse, (, Node, usingNameNode, ), {]
[referenceNameNode, ,, variable, ., getNameNode, (, ), ), ;, }, }, }, public, Node, findDeclaringNameNodeForUse, (, Node, usingNameNode, ), {]
[getNameNode, (, ), ), ;, }, }, }, public, Node, findDeclaringNameNodeForUse, (, Node, usingNameNode, ), {, Preconditions, ., checkArgument, (]
[getNameNode, (, ), ), ;, }, }, }, public, Node, findDeclaringNameNodeForUse, (, Node, usingNameNode, ), {, Preconditions, ., checkArgument, (]
[public, Node, findDeclaringNameNodeForUse, (, Node, usingNameNode, ), {, Preconditions, ., checkArgument, (, usingNameNode, ., isName, (, ), ), ;, return]
[public, Node, findDeclaringNameNodeForUse, (, Node, usingNameNode, ), {, Preconditions, ., checkArgument, (, usingNameNode, ., isName, (, ), ), ;, return]
[Node, usingNameNode, ), {, Preconditions, ., checkArgument, (, usingNameNode, ., isName, (, ), ), ;, return, referencesByNameNode, ., get, (]
