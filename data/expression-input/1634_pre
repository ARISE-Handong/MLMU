[Map, ;, import, javax, ., annotation, ., Nullable, ;, final, class, TypedScopeCreator, implements, ScopeCreator, {, static, final, String, DELEGATE_PROXY_SUFFIX, =]
[Map, ;, import, javax, ., annotation, ., Nullable, ;, final, class, TypedScopeCreator, implements, ScopeCreator, {, static, final, String, DELEGATE_PROXY_SUFFIX, =]
[., annotation, ., Nullable, ;, final, class, TypedScopeCreator, implements, ScopeCreator, {, static, final, String, DELEGATE_PROXY_SUFFIX, =, ObjectType, ., createDelegateSuffix, (]
[implements, ScopeCreator, {, static, final, String, DELEGATE_PROXY_SUFFIX, =, ObjectType, ., createDelegateSuffix, (, "Proxy", ), ;, static, final, DiagnosticType, MALFORMED_TYPEDEF, =]
[implements, ScopeCreator, {, static, final, String, DELEGATE_PROXY_SUFFIX, =, ObjectType, ., createDelegateSuffix, (, "Proxy", ), ;, static, final, DiagnosticType, MALFORMED_TYPEDEF, =]
[final, String, DELEGATE_PROXY_SUFFIX, =, ObjectType, ., createDelegateSuffix, (, "Proxy", ), ;, static, final, DiagnosticType, MALFORMED_TYPEDEF, =, DiagnosticType, ., warning, (]
[DELEGATE_PROXY_SUFFIX, =, ObjectType, ., createDelegateSuffix, (, "Proxy", ), ;, static, final, DiagnosticType, MALFORMED_TYPEDEF, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_TYPEDEF", ,]
[;, static, final, DiagnosticType, MALFORMED_TYPEDEF, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_TYPEDEF", ,, "Typedef for {0} does not have any type information", ), ;, static, final, DiagnosticType, ENUM_INITIALIZER, =]
[;, static, final, DiagnosticType, MALFORMED_TYPEDEF, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_TYPEDEF", ,, "Typedef for {0} does not have any type information", ), ;, static, final, DiagnosticType, ENUM_INITIALIZER, =]
[MALFORMED_TYPEDEF, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_TYPEDEF", ,, "Typedef for {0} does not have any type information", ), ;, static, final, DiagnosticType, ENUM_INITIALIZER, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_MALFORMED_TYPEDEF", ,, "Typedef for {0} does not have any type information", ), ;, static, final, DiagnosticType, ENUM_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_ENUM_INITIALIZER_NOT_ENUM", ,]
[;, static, final, DiagnosticType, ENUM_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_ENUM_INITIALIZER_NOT_ENUM", ,, "enum initializer must be an object literal or an enum", ), ;, static, final, DiagnosticType, CTOR_INITIALIZER, =]
[;, static, final, DiagnosticType, ENUM_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_ENUM_INITIALIZER_NOT_ENUM", ,, "enum initializer must be an object literal or an enum", ), ;, static, final, DiagnosticType, CTOR_INITIALIZER, =]
[ENUM_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_ENUM_INITIALIZER_NOT_ENUM", ,, "enum initializer must be an object literal or an enum", ), ;, static, final, DiagnosticType, CTOR_INITIALIZER, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_ENUM_INITIALIZER_NOT_ENUM", ,, "enum initializer must be an object literal or an enum", ), ;, static, final, DiagnosticType, CTOR_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_CTOR_INITIALIZER_NOT_CTOR", ,]
[;, static, final, DiagnosticType, CTOR_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_CTOR_INITIALIZER_NOT_CTOR", ,, "Constructor {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, IFACE_INITIALIZER, =]
[;, static, final, DiagnosticType, CTOR_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_CTOR_INITIALIZER_NOT_CTOR", ,, "Constructor {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, IFACE_INITIALIZER, =]
[CTOR_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_CTOR_INITIALIZER_NOT_CTOR", ,, "Constructor {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, IFACE_INITIALIZER, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_CTOR_INITIALIZER_NOT_CTOR", ,, "Constructor {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, IFACE_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_IFACE_INITIALIZER_NOT_IFACE", ,]
[;, static, final, DiagnosticType, IFACE_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_IFACE_INITIALIZER_NOT_IFACE", ,, "Interface {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, CONSTRUCTOR_EXPECTED, =]
[;, static, final, DiagnosticType, IFACE_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_IFACE_INITIALIZER_NOT_IFACE", ,, "Interface {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, CONSTRUCTOR_EXPECTED, =]
[IFACE_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_IFACE_INITIALIZER_NOT_IFACE", ,, "Interface {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, CONSTRUCTOR_EXPECTED, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_IFACE_INITIALIZER_NOT_IFACE", ,, "Interface {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, CONSTRUCTOR_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_REFLECT_CONSTRUCTOR_EXPECTED", ,]
[;, static, final, DiagnosticType, CONSTRUCTOR_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_REFLECT_CONSTRUCTOR_EXPECTED", ,, "Constructor expected as first argument", ), ;, static, final, DiagnosticType, UNKNOWN_LENDS, =]
[;, static, final, DiagnosticType, CONSTRUCTOR_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_REFLECT_CONSTRUCTOR_EXPECTED", ,, "Constructor expected as first argument", ), ;, static, final, DiagnosticType, UNKNOWN_LENDS, =]
[CONSTRUCTOR_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_REFLECT_CONSTRUCTOR_EXPECTED", ,, "Constructor expected as first argument", ), ;, static, final, DiagnosticType, UNKNOWN_LENDS, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_REFLECT_CONSTRUCTOR_EXPECTED", ,, "Constructor expected as first argument", ), ;, static, final, DiagnosticType, UNKNOWN_LENDS, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_LENDS", ,]
[;, static, final, DiagnosticType, UNKNOWN_LENDS, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_LENDS", ,, "Variable {0} not declared before @lends annotation.", ), ;, static, final, DiagnosticType, LENDS_ON_NON_OBJECT, =]
[;, static, final, DiagnosticType, UNKNOWN_LENDS, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_LENDS", ,, "Variable {0} not declared before @lends annotation.", ), ;, static, final, DiagnosticType, LENDS_ON_NON_OBJECT, =]
[UNKNOWN_LENDS, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_LENDS", ,, "Variable {0} not declared before @lends annotation.", ), ;, static, final, DiagnosticType, LENDS_ON_NON_OBJECT, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_UNKNOWN_LENDS", ,, "Variable {0} not declared before @lends annotation.", ), ;, static, final, DiagnosticType, LENDS_ON_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_LENDS_ON_NON_OBJECT", ,]
[validator, ;, private, final, CodingConvention, codingConvention, ;, private, final, JSTypeRegistry, typeRegistry, ;, private, final, List, <, ObjectType, >, delegateProxyPrototypes, =]
[validator, ;, private, final, CodingConvention, codingConvention, ;, private, final, JSTypeRegistry, typeRegistry, ;, private, final, List, <, ObjectType, >, delegateProxyPrototypes, =]
[ObjectType, >, delegateProxyPrototypes, =, Lists, ., newArrayList, (, ), ;, private, final, Map, <, String, ,, String, >, delegateCallingConventions, =]
[ObjectType, >, delegateProxyPrototypes, =, Lists, ., newArrayList, (, ), ;, private, final, Map, <, String, ,, String, >, delegateCallingConventions, =]
[String, >, delegateCallingConventions, =, Maps, ., newHashMap, (, ), ;, private, final, Map, <, Node, ,, AstFunctionContents, >, functionAnalysisResults, =]
[String, >, delegateCallingConventions, =, Maps, ., newHashMap, (, ), ;, private, final, Map, <, Node, ,, AstFunctionContents, >, functionAnalysisResults, =]
[class, DeferredSetType, {, final, Node, node, ;, final, JSType, type, ;, DeferredSetType, (, Node, node, ,, JSType, type, ), {]
[class, DeferredSetType, {, final, Node, node, ;, final, JSType, type, ;, DeferredSetType, (, Node, node, ,, JSType, type, ), {]
[Node, node, ;, final, JSType, type, ;, DeferredSetType, (, Node, node, ,, JSType, type, ), {, Preconditions, ., checkNotNull, (]
[final, JSType, type, ;, DeferredSetType, (, Node, node, ,, JSType, type, ), {, Preconditions, ., checkNotNull, (, node, ), ;]
[final, JSType, type, ;, DeferredSetType, (, Node, node, ,, JSType, type, ), {, Preconditions, ., checkNotNull, (, node, ), ;]
[DeferredSetType, (, Node, node, ,, JSType, type, ), {, Preconditions, ., checkNotNull, (, node, ), ;, Preconditions, ., checkNotNull, (]
[node, ,, JSType, type, ), {, Preconditions, ., checkNotNull, (, node, ), ;, Preconditions, ., checkNotNull, (, type, ), ;]
[node, ,, JSType, type, ), {, Preconditions, ., checkNotNull, (, node, ), ;, Preconditions, ., checkNotNull, (, type, ), ;]
[), {, Preconditions, ., checkNotNull, (, node, ), ;, Preconditions, ., checkNotNull, (, type, ), ;, this, ., node, =]
[Preconditions, ., checkNotNull, (, node, ), ;, Preconditions, ., checkNotNull, (, type, ), ;, this, ., node, =, node, ;]
[Preconditions, ., checkNotNull, (, node, ), ;, Preconditions, ., checkNotNull, (, type, ), ;, this, ., node, =, node, ;]
[node, ), ;, Preconditions, ., checkNotNull, (, type, ), ;, this, ., node, =, node, ;, this, ., type, =]
[;, Preconditions, ., checkNotNull, (, type, ), ;, this, ., node, =, node, ;, this, ., type, =, type, ;]
[;, Preconditions, ., checkNotNull, (, type, ), ;, this, ., node, =, node, ;, this, ., type, =, type, ;]
[(, type, ), ;, this, ., node, =, node, ;, this, ., type, =, type, ;, node, ., setJSType, (]
[., type, =, type, ;, node, ., setJSType, (, type, ), ;, }, void, resolve, (, Scope, scope, ), {]
[., type, =, type, ;, node, ., setJSType, (, type, ), ;, }, void, resolve, (, Scope, scope, ), {]
[;, node, ., setJSType, (, type, ), ;, }, void, resolve, (, Scope, scope, ), {, node, ., setJSType, (]
[;, node, ., setJSType, (, type, ), ;, }, void, resolve, (, Scope, scope, ), {, node, ., setJSType, (]
[(, type, ), ;, }, void, resolve, (, Scope, scope, ), {, node, ., setJSType, (, type, ., resolve, (]
[), ;, }, void, resolve, (, Scope, scope, ), {, node, ., setJSType, (, type, ., resolve, (, typeParsingErrorReporter, ,]
[type, ., resolve, (, typeParsingErrorReporter, ,, scope, ), ), ;, }, }, TypedScopeCreator, (, AbstractCompiler, compiler, ), {, this, (]
[resolve, (, typeParsingErrorReporter, ,, scope, ), ), ;, }, }, TypedScopeCreator, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,]
[resolve, (, typeParsingErrorReporter, ,, scope, ), ), ;, }, }, TypedScopeCreator, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,]
[(, compiler, ,, compiler, ., getCodingConvention, (, ), ), ;, }, TypedScopeCreator, (, AbstractCompiler, compiler, ,, CodingConvention, codingConvention, ), {]
[(, compiler, ,, compiler, ., getCodingConvention, (, ), ), ;, }, TypedScopeCreator, (, AbstractCompiler, compiler, ,, CodingConvention, codingConvention, ), {]
[., getCodingConvention, (, ), ), ;, }, TypedScopeCreator, (, AbstractCompiler, compiler, ,, CodingConvention, codingConvention, ), {, this, ., compiler, =]
[(, ), ), ;, }, TypedScopeCreator, (, AbstractCompiler, compiler, ,, CodingConvention, codingConvention, ), {, this, ., compiler, =, compiler, ;]
[(, ), ), ;, }, TypedScopeCreator, (, AbstractCompiler, compiler, ,, CodingConvention, codingConvention, ), {, this, ., compiler, =, compiler, ;]
[}, TypedScopeCreator, (, AbstractCompiler, compiler, ,, CodingConvention, codingConvention, ), {, this, ., compiler, =, compiler, ;, this, ., validator, =]
[}, TypedScopeCreator, (, AbstractCompiler, compiler, ,, CodingConvention, codingConvention, ), {, this, ., compiler, =, compiler, ;, this, ., validator, =]
[CodingConvention, codingConvention, ), {, this, ., compiler, =, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;]
[CodingConvention, codingConvention, ), {, this, ., compiler, =, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;]
[this, ., compiler, =, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., codingConvention, =]
[compiler, =, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., codingConvention, =, codingConvention, ;]
[compiler, =, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., codingConvention, =, codingConvention, ;]
[this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., codingConvention, =, codingConvention, ;, this, ., typeRegistry, =]
[this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., codingConvention, =, codingConvention, ;, this, ., typeRegistry, =]
[getTypeValidator, (, ), ;, this, ., codingConvention, =, codingConvention, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;]
[getTypeValidator, (, ), ;, this, ., codingConvention, =, codingConvention, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;]
[this, ., codingConvention, =, codingConvention, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., typeParsingErrorReporter, =]
[this, ., codingConvention, =, codingConvention, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., typeParsingErrorReporter, =]
[this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., typeParsingErrorReporter, =, typeRegistry, ., getErrorReporter, (, ), ;]
[this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., typeParsingErrorReporter, =, typeRegistry, ., getErrorReporter, (, ), ;]
[compiler, ., getTypeRegistry, (, ), ;, this, ., typeParsingErrorReporter, =, typeRegistry, ., getErrorReporter, (, ), ;, this, ., unknownType, =]
[compiler, ., getTypeRegistry, (, ), ;, this, ., typeParsingErrorReporter, =, typeRegistry, ., getErrorReporter, (, ), ;, this, ., unknownType, =]
[), ;, this, ., typeParsingErrorReporter, =, typeRegistry, ., getErrorReporter, (, ), ;, this, ., unknownType, =, typeRegistry, ., getNativeObjectType, (]
[UNKNOWN_TYPE, ), ;, }, @, Override, public, Scope, createScope, (, Node, root, ,, Scope, parent, ), {, Scope, newScope, =]
[Override, public, Scope, createScope, (, Node, root, ,, Scope, parent, ), {, Scope, newScope, =, null, ;, AbstractScopeBuilder, scopeBuilder, =]
[(, Node, root, ,, Scope, parent, ), {, Scope, newScope, =, null, ;, AbstractScopeBuilder, scopeBuilder, =, null, ;, if, (]
[(, Node, root, ,, Scope, parent, ), {, Scope, newScope, =, null, ;, AbstractScopeBuilder, scopeBuilder, =, null, ;, if, (]
[root, ,, Scope, parent, ), {, Scope, newScope, =, null, ;, AbstractScopeBuilder, scopeBuilder, =, null, ;, if, (, parent, ==]
[Scope, newScope, =, null, ;, AbstractScopeBuilder, scopeBuilder, =, null, ;, if, (, parent, ==, null, ), {, JSType, globalThis, =]
[Scope, newScope, =, null, ;, AbstractScopeBuilder, scopeBuilder, =, null, ;, if, (, parent, ==, null, ), {, JSType, globalThis, =]
[;, AbstractScopeBuilder, scopeBuilder, =, null, ;, if, (, parent, ==, null, ), {, JSType, globalThis, =, typeRegistry, ., getNativeObjectType, (]
[;, AbstractScopeBuilder, scopeBuilder, =, null, ;, if, (, parent, ==, null, ), {, JSType, globalThis, =, typeRegistry, ., getNativeObjectType, (]
[;, if, (, parent, ==, null, ), {, JSType, globalThis, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., GLOBAL_THIS, ), ;]
[;, if, (, parent, ==, null, ), {, JSType, globalThis, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., GLOBAL_THIS, ), ;]
[==, null, ), {, JSType, globalThis, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., GLOBAL_THIS, ), ;, root, ., setJSType, (]
[{, JSType, globalThis, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., GLOBAL_THIS, ), ;, root, ., setJSType, (, globalThis, ), ;]
[{, JSType, globalThis, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., GLOBAL_THIS, ), ;, root, ., setJSType, (, globalThis, ), ;]
[{, JSType, globalThis, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., GLOBAL_THIS, ), ;, root, ., setJSType, (, globalThis, ), ;]
[JSTypeNative, ., GLOBAL_THIS, ), ;, root, ., setJSType, (, globalThis, ), ;, root, ., getFirstChild, (, ), ., setJSType, (]
[), ;, root, ., setJSType, (, globalThis, ), ;, root, ., getFirstChild, (, ), ., setJSType, (, globalThis, ), ;]
[), ;, root, ., setJSType, (, globalThis, ), ;, root, ., getFirstChild, (, ), ., setJSType, (, globalThis, ), ;]
[), ;, root, ., setJSType, (, globalThis, ), ;, root, ., getFirstChild, (, ), ., setJSType, (, globalThis, ), ;]
[;, root, ., getFirstChild, (, ), ., setJSType, (, globalThis, ), ;, root, ., getLastChild, (, ), ., setJSType, (]
[getFirstChild, (, ), ., setJSType, (, globalThis, ), ;, root, ., getLastChild, (, ), ., setJSType, (, globalThis, ), ;]
[getFirstChild, (, ), ., setJSType, (, globalThis, ), ;, root, ., getLastChild, (, ), ., setJSType, (, globalThis, ), ;]
[(, ), ., setJSType, (, globalThis, ), ;, root, ., getLastChild, (, ), ., setJSType, (, globalThis, ), ;, (]
[setJSType, (, globalThis, ), ;, root, ., getLastChild, (, ), ., setJSType, (, globalThis, ), ;, (, new, FirstOrderFunctionAnalyzer, (]
[globalThis, ), ;, root, ., getLastChild, (, ), ., setJSType, (, globalThis, ), ;, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,]
[(, ), ., setJSType, (, globalThis, ), ;, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (]
[(, ), ., setJSType, (, globalThis, ), ;, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (]
[), ;, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (, root, ., getFirstChild, (, ), ,]
[), ;, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (, root, ., getFirstChild, (, ), ,]
[,, functionAnalysisResults, ), ), ., process, (, root, ., getFirstChild, (, ), ,, root, ., getLastChild, (, ), ), ;]
[), ), ., process, (, root, ., getFirstChild, (, ), ,, root, ., getLastChild, (, ), ), ;, newScope, =]
[., process, (, root, ., getFirstChild, (, ), ,, root, ., getLastChild, (, ), ), ;, newScope, =, createInitialScope, (]
[(, ), ,, root, ., getLastChild, (, ), ), ;, newScope, =, createInitialScope, (, root, ), ;, GlobalScopeBuilder, globalScopeBuilder, =]
[root, ., getLastChild, (, ), ), ;, newScope, =, createInitialScope, (, root, ), ;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder, (]
[(, ), ), ;, newScope, =, createInitialScope, (, root, ), ;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder, (, newScope, ), ;]
[), ;, newScope, =, createInitialScope, (, root, ), ;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder, (, newScope, ), ;, scopeBuilder, =]
[newScope, =, createInitialScope, (, root, ), ;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, globalScopeBuilder, ;]
[newScope, =, createInitialScope, (, root, ), ;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, globalScopeBuilder, ;]
[root, ), ;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, globalScopeBuilder, ;, NodeTraversal, ., traverse, (]
[;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, globalScopeBuilder, ;, NodeTraversal, ., traverse, (, compiler, ,]
[globalScopeBuilder, =, new, GlobalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, globalScopeBuilder, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[), ;, scopeBuilder, =, globalScopeBuilder, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, scopeBuilder, ), ;, }, else, {]
[scopeBuilder, =, globalScopeBuilder, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, scopeBuilder, ), ;, }, else, {, newScope, =]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, scopeBuilder, ), ;, }, else, {, newScope, =, new, Scope, (]
[., traverse, (, compiler, ,, root, ,, scopeBuilder, ), ;, }, else, {, newScope, =, new, Scope, (, parent, ,]
[,, scopeBuilder, ), ;, }, else, {, newScope, =, new, Scope, (, parent, ,, root, ), ;, LocalScopeBuilder, localScopeBuilder, =]
[;, }, else, {, newScope, =, new, Scope, (, parent, ,, root, ), ;, LocalScopeBuilder, localScopeBuilder, =, new, LocalScopeBuilder, (]
[{, newScope, =, new, Scope, (, parent, ,, root, ), ;, LocalScopeBuilder, localScopeBuilder, =, new, LocalScopeBuilder, (, newScope, ), ;]
[=, new, Scope, (, parent, ,, root, ), ;, LocalScopeBuilder, localScopeBuilder, =, new, LocalScopeBuilder, (, newScope, ), ;, scopeBuilder, =]
[Scope, (, parent, ,, root, ), ;, LocalScopeBuilder, localScopeBuilder, =, new, LocalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, localScopeBuilder, ;]
[Scope, (, parent, ,, root, ), ;, LocalScopeBuilder, localScopeBuilder, =, new, LocalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, localScopeBuilder, ;]
[LocalScopeBuilder, localScopeBuilder, =, new, LocalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, localScopeBuilder, ;, localScopeBuilder, ., build, (, ), ;, }]
[LocalScopeBuilder, localScopeBuilder, =, new, LocalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, localScopeBuilder, ;, localScopeBuilder, ., build, (, ), ;, }]
[newScope, ), ;, scopeBuilder, =, localScopeBuilder, ;, localScopeBuilder, ., build, (, ), ;, }, scopeBuilder, ., resolveStubDeclarations, (, ), ;]
[newScope, ), ;, scopeBuilder, =, localScopeBuilder, ;, localScopeBuilder, ., build, (, ), ;, }, scopeBuilder, ., resolveStubDeclarations, (, ), ;]
[), ;, }, scopeBuilder, ., resolveStubDeclarations, (, ), ;, scopeBuilder, ., resolveTypes, (, ), ;, for, (, Node, functionNode, :]
[), ;, }, scopeBuilder, ., resolveStubDeclarations, (, ), ;, scopeBuilder, ., resolveTypes, (, ), ;, for, (, Node, functionNode, :]
[;, scopeBuilder, ., resolveTypes, (, ), ;, for, (, Node, functionNode, :, scopeBuilder, ., nonExternFunctions, ), {, JSType, type, =]
[;, scopeBuilder, ., resolveTypes, (, ), ;, for, (, Node, functionNode, :, scopeBuilder, ., nonExternFunctions, ), {, JSType, type, =]
[(, Node, functionNode, :, scopeBuilder, ., nonExternFunctions, ), {, JSType, type, =, functionNode, ., getJSType, (, ), ;, if, (]
[(, Node, functionNode, :, scopeBuilder, ., nonExternFunctions, ), {, JSType, type, =, functionNode, ., getJSType, (, ), ;, if, (]
[(, Node, functionNode, :, scopeBuilder, ., nonExternFunctions, ), {, JSType, type, =, functionNode, ., getJSType, (, ), ;, if, (]
[functionNode, :, scopeBuilder, ., nonExternFunctions, ), {, JSType, type, =, functionNode, ., getJSType, (, ), ;, if, (, type, !=]
[scopeBuilder, ., nonExternFunctions, ), {, JSType, type, =, functionNode, ., getJSType, (, ), ;, if, (, type, !=, null, &&]
[scopeBuilder, ., nonExternFunctions, ), {, JSType, type, =, functionNode, ., getJSType, (, ), ;, if, (, type, !=, null, &&]
[getJSType, (, ), ;, if, (, type, !=, null, &&, type, ., isFunctionType, (, ), ), {, FunctionType, fnType, =]
[getJSType, (, ), ;, if, (, type, !=, null, &&, type, ., isFunctionType, (, ), ), {, FunctionType, fnType, =]
[&&, type, ., isFunctionType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, JSType, fnThisType, =]
[&&, type, ., isFunctionType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, JSType, fnThisType, =]
[FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, JSType, fnThisType, =, fnType, ., getTypeOfThis, (, ), ;, if, (]
[fnType, =, type, ., toMaybeFunctionType, (, ), ;, JSType, fnThisType, =, fnType, ., getTypeOfThis, (, ), ;, if, (, !]
[fnType, =, type, ., toMaybeFunctionType, (, ), ;, JSType, fnThisType, =, fnType, ., getTypeOfThis, (, ), ;, if, (, !]
[;, JSType, fnThisType, =, fnType, ., getTypeOfThis, (, ), ;, if, (, !, fnThisType, ., isUnknownType, (, ), ), {]
[;, JSType, fnThisType, =, fnType, ., getTypeOfThis, (, ), ;, if, (, !, fnThisType, ., isUnknownType, (, ), ), {]
[fnType, ., getTypeOfThis, (, ), ;, if, (, !, fnThisType, ., isUnknownType, (, ), ), {, NodeTraversal, ., traverse, (]
[getTypeOfThis, (, ), ;, if, (, !, fnThisType, ., isUnknownType, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,]
[getTypeOfThis, (, ), ;, if, (, !, fnThisType, ., isUnknownType, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,]
[!, fnThisType, ., isUnknownType, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, functionNode, ., getLastChild, (, ), ,]
[!, fnThisType, ., isUnknownType, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, functionNode, ., getLastChild, (, ), ,]
[), ), {, NodeTraversal, ., traverse, (, compiler, ,, functionNode, ., getLastChild, (, ), ,, scopeBuilder, ., new, CollectProperties, (]
[functionNode, ., getLastChild, (, ), ,, scopeBuilder, ., new, CollectProperties, (, fnThisType, ), ), ;, }, }, }, if, (]
[functionNode, ., getLastChild, (, ), ,, scopeBuilder, ., new, CollectProperties, (, fnThisType, ), ), ;, }, }, }, if, (]
[getLastChild, (, ), ,, scopeBuilder, ., new, CollectProperties, (, fnThisType, ), ), ;, }, }, }, if, (, parent, ==]
[,, scopeBuilder, ., new, CollectProperties, (, fnThisType, ), ), ;, }, }, }, if, (, parent, ==, null, ), {]
[,, scopeBuilder, ., new, CollectProperties, (, fnThisType, ), ), ;, }, }, }, if, (, parent, ==, null, ), {]
[CollectProperties, (, fnThisType, ), ), ;, }, }, }, if, (, parent, ==, null, ), {, codingConvention, ., defineDelegateProxyPrototypeProperties, (]
[fnThisType, ), ), ;, }, }, }, if, (, parent, ==, null, ), {, codingConvention, ., defineDelegateProxyPrototypeProperties, (, typeRegistry, ,]
[), ;, }, }, }, if, (, parent, ==, null, ), {, codingConvention, ., defineDelegateProxyPrototypeProperties, (, typeRegistry, ,, newScope, ,]
[}, }, }, if, (, parent, ==, null, ), {, codingConvention, ., defineDelegateProxyPrototypeProperties, (, typeRegistry, ,, newScope, ,, delegateProxyPrototypes, ,]
[parent, ==, null, ), {, codingConvention, ., defineDelegateProxyPrototypeProperties, (, typeRegistry, ,, newScope, ,, delegateProxyPrototypes, ,, delegateCallingConventions, ), ;, }, return]
[delegateProxyPrototypes, ,, delegateCallingConventions, ), ;, }, return, newScope, ;, }, void, patchGlobalScope, (, Scope, globalScope, ,, Node, scriptRoot, ), {]
[delegateProxyPrototypes, ,, delegateCallingConventions, ), ;, }, return, newScope, ;, }, void, patchGlobalScope, (, Scope, globalScope, ,, Node, scriptRoot, ), {]
[;, }, return, newScope, ;, }, void, patchGlobalScope, (, Scope, globalScope, ,, Node, scriptRoot, ), {, Preconditions, ., checkState, (]
[;, }, return, newScope, ;, }, void, patchGlobalScope, (, Scope, globalScope, ,, Node, scriptRoot, ), {, Preconditions, ., checkState, (]
[patchGlobalScope, (, Scope, globalScope, ,, Node, scriptRoot, ), {, Preconditions, ., checkState, (, scriptRoot, ., isScript, (, ), ), ;]
[patchGlobalScope, (, Scope, globalScope, ,, Node, scriptRoot, ), {, Preconditions, ., checkState, (, scriptRoot, ., isScript, (, ), ), ;]
[,, Node, scriptRoot, ), {, Preconditions, ., checkState, (, scriptRoot, ., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (]
[), {, Preconditions, ., checkState, (, scriptRoot, ., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (, globalScope, ), ;]
[), {, Preconditions, ., checkState, (, scriptRoot, ., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (, globalScope, ), ;]
[checkState, (, scriptRoot, ., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (, globalScope, ), ;, Preconditions, ., checkState, (]
[checkState, (, scriptRoot, ., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (, globalScope, ), ;, Preconditions, ., checkState, (]
[., checkNotNull, (, globalScope, ), ;, Preconditions, ., checkState, (, globalScope, ., isGlobal, (, ), ), ;, String, scriptName, =]
[., checkNotNull, (, globalScope, ), ;, Preconditions, ., checkState, (, globalScope, ., isGlobal, (, ), ), ;, String, scriptName, =]
[), ;, Preconditions, ., checkState, (, globalScope, ., isGlobal, (, ), ), ;, String, scriptName, =, NodeUtil, ., getSourceName, (]
[., checkState, (, globalScope, ., isGlobal, (, ), ), ;, String, scriptName, =, NodeUtil, ., getSourceName, (, scriptRoot, ), ;]
[., checkState, (, globalScope, ., isGlobal, (, ), ), ;, String, scriptName, =, NodeUtil, ., getSourceName, (, scriptRoot, ), ;]
[., isGlobal, (, ), ), ;, String, scriptName, =, NodeUtil, ., getSourceName, (, scriptRoot, ), ;, Preconditions, ., checkNotNull, (]
[=, NodeUtil, ., getSourceName, (, scriptRoot, ), ;, Preconditions, ., checkNotNull, (, scriptName, ), ;, for, (, Node, node, :]
[=, NodeUtil, ., getSourceName, (, scriptRoot, ), ;, Preconditions, ., checkNotNull, (, scriptName, ), ;, for, (, Node, node, :]
[(, scriptRoot, ), ;, Preconditions, ., checkNotNull, (, scriptName, ), ;, for, (, Node, node, :, ImmutableList, ., copyOf, (]
[(, scriptRoot, ), ;, Preconditions, ., checkNotNull, (, scriptName, ), ;, for, (, Node, node, :, ImmutableList, ., copyOf, (]
[;, for, (, Node, node, :, ImmutableList, ., copyOf, (, functionAnalysisResults, ., keySet, (, ), ), ), {, if, (]
[;, for, (, Node, node, :, ImmutableList, ., copyOf, (, functionAnalysisResults, ., keySet, (, ), ), ), {, if, (]
[node, :, ImmutableList, ., copyOf, (, functionAnalysisResults, ., keySet, (, ), ), ), {, if, (, scriptName, ., equals, (]
[node, :, ImmutableList, ., copyOf, (, functionAnalysisResults, ., keySet, (, ), ), ), {, if, (, scriptName, ., equals, (]
[copyOf, (, functionAnalysisResults, ., keySet, (, ), ), ), {, if, (, scriptName, ., equals, (, NodeUtil, ., getSourceName, (]
[(, ), ), ), {, if, (, scriptName, ., equals, (, NodeUtil, ., getSourceName, (, node, ), ), ), {]
[(, ), ), ), {, if, (, scriptName, ., equals, (, NodeUtil, ., getSourceName, (, node, ), ), ), {]
[{, if, (, scriptName, ., equals, (, NodeUtil, ., getSourceName, (, node, ), ), ), {, functionAnalysisResults, ., remove, (]
[equals, (, NodeUtil, ., getSourceName, (, node, ), ), ), {, functionAnalysisResults, ., remove, (, node, ), ;, }, }]
[equals, (, NodeUtil, ., getSourceName, (, node, ), ), ), {, functionAnalysisResults, ., remove, (, node, ), ;, }, }]
[(, NodeUtil, ., getSourceName, (, node, ), ), ), {, functionAnalysisResults, ., remove, (, node, ), ;, }, }, (]
[getSourceName, (, node, ), ), ), {, functionAnalysisResults, ., remove, (, node, ), ;, }, }, (, new, FirstOrderFunctionAnalyzer, (]
[node, ), ), ), {, functionAnalysisResults, ., remove, (, node, ), ;, }, }, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,]
[., remove, (, node, ), ;, }, }, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (]
[(, node, ), ;, }, }, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (, null, ,]
[(, compiler, ,, functionAnalysisResults, ), ), ., process, (, null, ,, scriptRoot, ), ;, Iterator, <, Var, >, varIter, =]
[(, compiler, ,, functionAnalysisResults, ), ), ., process, (, null, ,, scriptRoot, ), ;, Iterator, <, Var, >, varIter, =]
[), ;, Iterator, <, Var, >, varIter, =, globalScope, ., getVars, (, ), ;, List, <, Var, >, varsToRemove, =]
[), ;, Iterator, <, Var, >, varIter, =, globalScope, ., getVars, (, ), ;, List, <, Var, >, varsToRemove, =]
[globalScope, ., getVars, (, ), ;, List, <, Var, >, varsToRemove, =, Lists, ., newArrayList, (, ), ;, while, (]
[globalScope, ., getVars, (, ), ;, List, <, Var, >, varsToRemove, =, Lists, ., newArrayList, (, ), ;, while, (]
[varsToRemove, =, Lists, ., newArrayList, (, ), ;, while, (, varIter, ., hasNext, (, ), ), {, Var, oldVar, =]
[varsToRemove, =, Lists, ., newArrayList, (, ), ;, while, (, varIter, ., hasNext, (, ), ), {, Var, oldVar, =]
[while, (, varIter, ., hasNext, (, ), ), {, Var, oldVar, =, varIter, ., next, (, ), ;, if, (]
[while, (, varIter, ., hasNext, (, ), ), {, Var, oldVar, =, varIter, ., next, (, ), ;, if, (]
[hasNext, (, ), ), {, Var, oldVar, =, varIter, ., next, (, ), ;, if, (, scriptName, ., equals, (]
[hasNext, (, ), ), {, Var, oldVar, =, varIter, ., next, (, ), ;, if, (, scriptName, ., equals, (]
[varIter, ., next, (, ), ;, if, (, scriptName, ., equals, (, oldVar, ., getInputName, (, ), ), ), {]
[varIter, ., next, (, ), ;, if, (, scriptName, ., equals, (, oldVar, ., getInputName, (, ), ), ), {]
[), ;, if, (, scriptName, ., equals, (, oldVar, ., getInputName, (, ), ), ), {, varsToRemove, ., add, (]
[getInputName, (, ), ), ), {, varsToRemove, ., add, (, oldVar, ), ;, }, }, for, (, Var, var, :]
[), ), {, varsToRemove, ., add, (, oldVar, ), ;, }, }, for, (, Var, var, :, varsToRemove, ), {]
[), ), {, varsToRemove, ., add, (, oldVar, ), ;, }, }, for, (, Var, var, :, varsToRemove, ), {]
[., add, (, oldVar, ), ;, }, }, for, (, Var, var, :, varsToRemove, ), {, globalScope, ., undeclare, (]
[oldVar, ), ;, }, }, for, (, Var, var, :, varsToRemove, ), {, globalScope, ., undeclare, (, var, ), ;]
[oldVar, ), ;, }, }, for, (, Var, var, :, varsToRemove, ), {, globalScope, ., undeclare, (, var, ), ;]
[oldVar, ), ;, }, }, for, (, Var, var, :, varsToRemove, ), {, globalScope, ., undeclare, (, var, ), ;]
[oldVar, ), ;, }, }, for, (, Var, var, :, varsToRemove, ), {, globalScope, ., undeclare, (, var, ), ;]
[{, globalScope, ., undeclare, (, var, ), ;, globalScope, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., removeProperty, (]
[{, globalScope, ., undeclare, (, var, ), ;, globalScope, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., removeProperty, (]
[(, ), ., toObjectType, (, ), ., removeProperty, (, var, ., getName, (, ), ), ;, }, GlobalScopeBuilder, scopeBuilder, =]
[toObjectType, (, ), ., removeProperty, (, var, ., getName, (, ), ), ;, }, GlobalScopeBuilder, scopeBuilder, =, new, GlobalScopeBuilder, (]
[., removeProperty, (, var, ., getName, (, ), ), ;, }, GlobalScopeBuilder, scopeBuilder, =, new, GlobalScopeBuilder, (, globalScope, ), ;]
[., removeProperty, (, var, ., getName, (, ), ), ;, }, GlobalScopeBuilder, scopeBuilder, =, new, GlobalScopeBuilder, (, globalScope, ), ;]
[., getName, (, ), ), ;, }, GlobalScopeBuilder, scopeBuilder, =, new, GlobalScopeBuilder, (, globalScope, ), ;, NodeTraversal, ., traverse, (]
[(, ), ), ;, }, GlobalScopeBuilder, scopeBuilder, =, new, GlobalScopeBuilder, (, globalScope, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, }, GlobalScopeBuilder, scopeBuilder, =, new, GlobalScopeBuilder, (, globalScope, ), ;, NodeTraversal, ., traverse, (, compiler, ,, scriptRoot, ,]
[., traverse, (, compiler, ,, scriptRoot, ,, scopeBuilder, ), ;, }, @, VisibleForTesting, Scope, createInitialScope, (, Node, root, ), {]
[., traverse, (, compiler, ,, scriptRoot, ,, scopeBuilder, ), ;, }, @, VisibleForTesting, Scope, createInitialScope, (, Node, root, ), {]
[,, scriptRoot, ,, scopeBuilder, ), ;, }, @, VisibleForTesting, Scope, createInitialScope, (, Node, root, ), {, NodeTraversal, ., traverse, (]
[,, scopeBuilder, ), ;, }, @, VisibleForTesting, Scope, createInitialScope, (, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, }, @, VisibleForTesting, Scope, createInitialScope, (, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[@, VisibleForTesting, Scope, createInitialScope, (, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, DiscoverEnumsAndTypedefs, (]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, DiscoverEnumsAndTypedefs, (, typeRegistry, ), ), ;, Scope, s, =]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, DiscoverEnumsAndTypedefs, (, typeRegistry, ), ), ;, Scope, s, =]
[traverse, (, compiler, ,, root, ,, new, DiscoverEnumsAndTypedefs, (, typeRegistry, ), ), ;, Scope, s, =, Scope, ., createGlobalScope, (]
[,, root, ,, new, DiscoverEnumsAndTypedefs, (, typeRegistry, ), ), ;, Scope, s, =, Scope, ., createGlobalScope, (, root, ), ;]
[,, new, DiscoverEnumsAndTypedefs, (, typeRegistry, ), ), ;, Scope, s, =, Scope, ., createGlobalScope, (, root, ), ;, declareNativeFunctionType, (]
[DiscoverEnumsAndTypedefs, (, typeRegistry, ), ), ;, Scope, s, =, Scope, ., createGlobalScope, (, root, ), ;, declareNativeFunctionType, (, s, ,]
[), ), ;, Scope, s, =, Scope, ., createGlobalScope, (, root, ), ;, declareNativeFunctionType, (, s, ,, ARRAY_FUNCTION_TYPE, ), ;]
[;, Scope, s, =, Scope, ., createGlobalScope, (, root, ), ;, declareNativeFunctionType, (, s, ,, ARRAY_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[s, =, Scope, ., createGlobalScope, (, root, ), ;, declareNativeFunctionType, (, s, ,, ARRAY_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[., createGlobalScope, (, root, ), ;, declareNativeFunctionType, (, s, ,, ARRAY_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;]
[(, root, ), ;, declareNativeFunctionType, (, s, ,, ARRAY_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, ARRAY_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[(, s, ,, ARRAY_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE, ), ;]
[,, ARRAY_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[(, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE, ), ;]
[,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[(, s, ,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE, ), ;]
[,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[(, s, ,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE, ), ;]
[,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[(, s, ,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;]
[,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[(, s, ,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE, ), ;]
[,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[(, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE, ), ;]
[,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[(, s, ,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;]
[,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[(, s, ,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE, ), ;]
[,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[(, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE, ), ;]
[,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[(, s, ,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;]
[,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[(, s, ,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, ), ;]
[,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[(, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, ), ;]
[,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (]
[), ;, declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (, s, ,]
[declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (, s, ,, "undefined", ,]
[,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (, s, ,, "undefined", ,, VOID_TYPE, ), ;]
[), ;, declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (, s, ,, "undefined", ,, VOID_TYPE, ), ;, declareNativeValueType, (]
[declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (, s, ,, "undefined", ,, VOID_TYPE, ), ;, declareNativeValueType, (, s, ,]
[s, ,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (, s, ,, "undefined", ,, VOID_TYPE, ), ;, declareNativeValueType, (, s, ,, "ActiveXObject", ,]
[;, declareNativeValueType, (, s, ,, "undefined", ,, VOID_TYPE, ), ;, declareNativeValueType, (, s, ,, "ActiveXObject", ,, FUNCTION_INSTANCE_TYPE, ), ;, return]
[), ;, return, s, ;, }, private, void, declareNativeFunctionType, (, Scope, scope, ,, JSTypeNative, tId, ), {, FunctionType, t, =]
[), ;, return, s, ;, }, private, void, declareNativeFunctionType, (, Scope, scope, ,, JSTypeNative, tId, ), {, FunctionType, t, =]
[;, }, private, void, declareNativeFunctionType, (, Scope, scope, ,, JSTypeNative, tId, ), {, FunctionType, t, =, typeRegistry, ., getNativeFunctionType, (]
[void, declareNativeFunctionType, (, Scope, scope, ,, JSTypeNative, tId, ), {, FunctionType, t, =, typeRegistry, ., getNativeFunctionType, (, tId, ), ;]
[(, Scope, scope, ,, JSTypeNative, tId, ), {, FunctionType, t, =, typeRegistry, ., getNativeFunctionType, (, tId, ), ;, declareNativeType, (]
[scope, ,, JSTypeNative, tId, ), {, FunctionType, t, =, typeRegistry, ., getNativeFunctionType, (, tId, ), ;, declareNativeType, (, scope, ,]
[scope, ,, JSTypeNative, tId, ), {, FunctionType, t, =, typeRegistry, ., getNativeFunctionType, (, tId, ), ;, declareNativeType, (, scope, ,]
[scope, ,, JSTypeNative, tId, ), {, FunctionType, t, =, typeRegistry, ., getNativeFunctionType, (, tId, ), ;, declareNativeType, (, scope, ,]
[., getNativeFunctionType, (, tId, ), ;, declareNativeType, (, scope, ,, t, ., getInstanceType, (, ), ., getReferenceName, (, ), ,]
[tId, ), ;, declareNativeType, (, scope, ,, t, ., getInstanceType, (, ), ., getReferenceName, (, ), ,, t, ), ;]
[;, declareNativeType, (, scope, ,, t, ., getInstanceType, (, ), ., getReferenceName, (, ), ,, t, ), ;, declareNativeType, (]
[(, scope, ,, t, ., getInstanceType, (, ), ., getReferenceName, (, ), ,, t, ), ;, declareNativeType, (, scope, ,]
[(, scope, ,, t, ., getInstanceType, (, ), ., getReferenceName, (, ), ,, t, ), ;, declareNativeType, (, scope, ,]
[(, scope, ,, t, ., getInstanceType, (, ), ., getReferenceName, (, ), ,, t, ), ;, declareNativeType, (, scope, ,]
[(, ), ,, t, ), ;, declareNativeType, (, scope, ,, t, ., getPrototype, (, ), ., getReferenceName, (, ), ,]
[(, ), ,, t, ), ;, declareNativeType, (, scope, ,, t, ., getPrototype, (, ), ., getReferenceName, (, ), ,]
[getPrototype, (, ), ), ;, }, private, void, declareNativeValueType, (, Scope, scope, ,, String, name, ,, JSTypeNative, tId, ), {]
[), ), ;, }, private, void, declareNativeValueType, (, Scope, scope, ,, String, name, ,, JSTypeNative, tId, ), {, declareNativeType, (]
[;, }, private, void, declareNativeValueType, (, Scope, scope, ,, String, name, ,, JSTypeNative, tId, ), {, declareNativeType, (, scope, ,]
[private, void, declareNativeValueType, (, Scope, scope, ,, String, name, ,, JSTypeNative, tId, ), {, declareNativeType, (, scope, ,, name, ,]
[private, void, declareNativeValueType, (, Scope, scope, ,, String, name, ,, JSTypeNative, tId, ), {, declareNativeType, (, scope, ,, name, ,]
[Scope, scope, ,, String, name, ,, JSTypeNative, tId, ), {, declareNativeType, (, scope, ,, name, ,, typeRegistry, ., getNativeType, (]
[(, tId, ), ), ;, }, private, void, declareNativeType, (, Scope, scope, ,, String, name, ,, JSType, t, ), {]
[(, tId, ), ), ;, }, private, void, declareNativeType, (, Scope, scope, ,, String, name, ,, JSType, t, ), {]
[;, }, private, void, declareNativeType, (, Scope, scope, ,, String, name, ,, JSType, t, ), {, scope, ., declare, (]
[private, void, declareNativeType, (, Scope, scope, ,, String, name, ,, JSType, t, ), {, scope, ., declare, (, name, ,]
[declareNativeType, (, Scope, scope, ,, String, name, ,, JSType, t, ), {, scope, ., declare, (, name, ,, null, ,]
[Scope, scope, ,, String, name, ,, JSType, t, ), {, scope, ., declare, (, name, ,, null, ,, t, ,]
[,, String, name, ,, JSType, t, ), {, scope, ., declare, (, name, ,, null, ,, t, ,, null, ,]
[;, }, private, static, class, DiscoverEnumsAndTypedefs, extends, AbstractShallowStatementCallback, {, private, final, JSTypeRegistry, registry, ;, DiscoverEnumsAndTypedefs, (, JSTypeRegistry, registry, ), {]
[;, }, private, static, class, DiscoverEnumsAndTypedefs, extends, AbstractShallowStatementCallback, {, private, final, JSTypeRegistry, registry, ;, DiscoverEnumsAndTypedefs, (, JSTypeRegistry, registry, ), {]
[class, DiscoverEnumsAndTypedefs, extends, AbstractShallowStatementCallback, {, private, final, JSTypeRegistry, registry, ;, DiscoverEnumsAndTypedefs, (, JSTypeRegistry, registry, ), {, this, ., registry, =]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, Node, nameNode, =]
[void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, Node, nameNode, =, null, ;, switch, (]
[void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, Node, nameNode, =, null, ;, switch, (]
[,, Node, parent, ), {, Node, nameNode, =, null, ;, switch, (, node, ., getType, (, ), ), {, case]
[,, Node, parent, ), {, Node, nameNode, =, null, ;, switch, (, node, ., getType, (, ), ), {, case]
[;, switch, (, node, ., getType, (, ), ), {, case, Token, ., VAR, :, for, (, Node, child, =]
[;, switch, (, node, ., getType, (, ), ), {, case, Token, ., VAR, :, for, (, Node, child, =]
[(, ), ), {, case, Token, ., VAR, :, for, (, Node, child, =, node, ., getFirstChild, (, ), ;]
[(, ), ), {, case, Token, ., VAR, :, for, (, Node, child, =, node, ., getFirstChild, (, ), ;]
[), {, case, Token, ., VAR, :, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=]
[case, Token, ., VAR, :, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;]
[., VAR, :, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., VAR, :, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[=, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, identifyNameNode, (]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, identifyNameNode, (, child, ,]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, identifyNameNode, (, child, ,]
[;, child, =, child, ., getNext, (, ), ), {, identifyNameNode, (, child, ,, child, ., getFirstChild, (, ), ,]
[;, child, =, child, ., getNext, (, ), ), {, identifyNameNode, (, child, ,, child, ., getFirstChild, (, ), ,]
[., getNext, (, ), ), {, identifyNameNode, (, child, ,, child, ., getFirstChild, (, ), ,, NodeUtil, ., getBestJSDocInfo, (]
[child, ,, child, ., getFirstChild, (, ), ,, NodeUtil, ., getBestJSDocInfo, (, child, ), ), ;, }, break, ;, case]
[child, ,, child, ., getFirstChild, (, ), ,, NodeUtil, ., getBestJSDocInfo, (, child, ), ), ;, }, break, ;, case]
[,, NodeUtil, ., getBestJSDocInfo, (, child, ), ), ;, }, break, ;, case, Token, ., EXPR_RESULT, :, Node, firstChild, =]
[,, NodeUtil, ., getBestJSDocInfo, (, child, ), ), ;, }, break, ;, case, Token, ., EXPR_RESULT, :, Node, firstChild, =]
[;, }, break, ;, case, Token, ., EXPR_RESULT, :, Node, firstChild, =, node, ., getFirstChild, (, ), ;, if, (]
[;, }, break, ;, case, Token, ., EXPR_RESULT, :, Node, firstChild, =, node, ., getFirstChild, (, ), ;, if, (]
[EXPR_RESULT, :, Node, firstChild, =, node, ., getFirstChild, (, ), ;, if, (, firstChild, ., isAssign, (, ), ), {]
[Node, firstChild, =, node, ., getFirstChild, (, ), ;, if, (, firstChild, ., isAssign, (, ), ), {, identifyNameNode, (]
[Node, firstChild, =, node, ., getFirstChild, (, ), ;, if, (, firstChild, ., isAssign, (, ), ), {, identifyNameNode, (]
[(, ), ;, if, (, firstChild, ., isAssign, (, ), ), {, identifyNameNode, (, firstChild, ., getFirstChild, (, ), ,]
[(, ), ;, if, (, firstChild, ., isAssign, (, ), ), {, identifyNameNode, (, firstChild, ., getFirstChild, (, ), ,]
[., isAssign, (, ), ), {, identifyNameNode, (, firstChild, ., getFirstChild, (, ), ,, firstChild, ., getLastChild, (, ), ,]
[., isAssign, (, ), ), {, identifyNameNode, (, firstChild, ., getFirstChild, (, ), ,, firstChild, ., getLastChild, (, ), ,]
[getFirstChild, (, ), ,, firstChild, ., getLastChild, (, ), ,, firstChild, ., getJSDocInfo, (, ), ), ;, }, else, {]
[), ,, firstChild, ., getLastChild, (, ), ,, firstChild, ., getJSDocInfo, (, ), ), ;, }, else, {, identifyNameNode, (]
[firstChild, ., getLastChild, (, ), ,, firstChild, ., getJSDocInfo, (, ), ), ;, }, else, {, identifyNameNode, (, firstChild, ,]
[getLastChild, (, ), ,, firstChild, ., getJSDocInfo, (, ), ), ;, }, else, {, identifyNameNode, (, firstChild, ,, null, ,]
[getLastChild, (, ), ,, firstChild, ., getJSDocInfo, (, ), ), ;, }, else, {, identifyNameNode, (, firstChild, ,, null, ,]
[break, ;, }, }, private, void, identifyNameNode, (, Node, nameNode, ,, Node, valueNode, ,, JSDocInfo, info, ), {, if, (]
[break, ;, }, }, private, void, identifyNameNode, (, Node, nameNode, ,, Node, valueNode, ,, JSDocInfo, info, ), {, if, (]
[nameNode, ,, Node, valueNode, ,, JSDocInfo, info, ), {, if, (, nameNode, ., isQualifiedName, (, ), ), {, if, (]
[nameNode, ,, Node, valueNode, ,, JSDocInfo, info, ), {, if, (, nameNode, ., isQualifiedName, (, ), ), {, if, (]
[Node, valueNode, ,, JSDocInfo, info, ), {, if, (, nameNode, ., isQualifiedName, (, ), ), {, if, (, info, !=]
[), {, if, (, nameNode, ., isQualifiedName, (, ), ), {, if, (, info, !=, null, ), {, if, (]
[), {, if, (, nameNode, ., isQualifiedName, (, ), ), {, if, (, info, !=, null, ), {, if, (]
[(, ), ), {, if, (, info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {]
[(, ), ), {, if, (, info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {]
[if, (, info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {, registry, ., identifyNonNullableName, (]
[if, (, info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {, registry, ., identifyNonNullableName, (]
[hasEnumParameterType, (, ), ), {, registry, ., identifyNonNullableName, (, nameNode, ., getQualifiedName, (, ), ), ;, }, else, if, (]
[hasEnumParameterType, (, ), ), {, registry, ., identifyNonNullableName, (, nameNode, ., getQualifiedName, (, ), ), ;, }, else, if, (]
[identifyNonNullableName, (, nameNode, ., getQualifiedName, (, ), ), ;, }, else, if, (, info, ., hasTypedefType, (, ), ), {]
[identifyNonNullableName, (, nameNode, ., getQualifiedName, (, ), ), ;, }, else, if, (, info, ., hasTypedefType, (, ), ), {]
[getQualifiedName, (, ), ), ;, }, else, if, (, info, ., hasTypedefType, (, ), ), {, registry, ., identifyNonNullableName, (]
[getQualifiedName, (, ), ), ;, }, else, if, (, info, ., hasTypedefType, (, ), ), {, registry, ., identifyNonNullableName, (]
[., getQualifiedName, (, ), ), ;, }, }, }, }, }, private, JSType, getNativeType, (, JSTypeNative, nativeType, ), {, return]
[., getQualifiedName, (, ), ), ;, }, }, }, }, }, private, JSType, getNativeType, (, JSTypeNative, nativeType, ), {, return]
[), ;, }, }, }, }, }, private, JSType, getNativeType, (, JSTypeNative, nativeType, ), {, return, typeRegistry, ., getNativeType, (]
[abstract, class, AbstractScopeBuilder, implements, NodeTraversal, ., Callback, {, final, Scope, scope, ;, private, final, List, <, DeferredSetType, >, deferredSetTypes, =]
[abstract, class, AbstractScopeBuilder, implements, NodeTraversal, ., Callback, {, final, Scope, scope, ;, private, final, List, <, DeferredSetType, >, deferredSetTypes, =]
[List, <, DeferredSetType, >, deferredSetTypes, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Node, >, nonExternFunctions, =]
[List, <, DeferredSetType, >, deferredSetTypes, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Node, >, nonExternFunctions, =]
[final, List, <, Node, >, nonExternFunctions, =, Lists, ., newArrayList, (, ), ;, private, List, <, Node, >, lentObjectLiterals, =]
[(, ), ;, private, List, <, Node, >, lentObjectLiterals, =, null, ;, private, final, List, <, StubDeclaration, >, stubDeclarations, =]
[(, ), ;, private, List, <, Node, >, lentObjectLiterals, =, null, ;, private, final, List, <, StubDeclaration, >, stubDeclarations, =]
[null, ;, private, final, List, <, StubDeclaration, >, stubDeclarations, =, Lists, ., newArrayList, (, ), ;, private, String, sourceName, =]
[(, ), ;, private, String, sourceName, =, null, ;, private, InputId, inputId, ;, private, AbstractScopeBuilder, (, Scope, scope, ), {]
[(, ), ;, private, String, sourceName, =, null, ;, private, InputId, inputId, ;, private, AbstractScopeBuilder, (, Scope, scope, ), {]
[String, sourceName, =, null, ;, private, InputId, inputId, ;, private, AbstractScopeBuilder, (, Scope, scope, ), {, this, ., scope, =]
[scope, ), {, this, ., scope, =, scope, ;, }, void, setDeferredType, (, Node, node, ,, JSType, type, ), {]
[scope, ), {, this, ., scope, =, scope, ;, }, void, setDeferredType, (, Node, node, ,, JSType, type, ), {]
[., scope, =, scope, ;, }, void, setDeferredType, (, Node, node, ,, JSType, type, ), {, deferredSetTypes, ., add, (]
[scope, ;, }, void, setDeferredType, (, Node, node, ,, JSType, type, ), {, deferredSetTypes, ., add, (, new, DeferredSetType, (]
[}, void, setDeferredType, (, Node, node, ,, JSType, type, ), {, deferredSetTypes, ., add, (, new, DeferredSetType, (, node, ,]
[new, DeferredSetType, (, node, ,, type, ), ), ;, }, void, resolveTypes, (, ), {, for, (, DeferredSetType, deferred, :]
[node, ,, type, ), ), ;, }, void, resolveTypes, (, ), {, for, (, DeferredSetType, deferred, :, deferredSetTypes, ), {]
[node, ,, type, ), ), ;, }, void, resolveTypes, (, ), {, for, (, DeferredSetType, deferred, :, deferredSetTypes, ), {]
[), ;, }, void, resolveTypes, (, ), {, for, (, DeferredSetType, deferred, :, deferredSetTypes, ), {, deferred, ., resolve, (]
[DeferredSetType, deferred, :, deferredSetTypes, ), {, deferred, ., resolve, (, scope, ), ;, }, Iterator, <, Var, >, vars, =]
[DeferredSetType, deferred, :, deferredSetTypes, ), {, deferred, ., resolve, (, scope, ), ;, }, Iterator, <, Var, >, vars, =]
[resolve, (, scope, ), ;, }, Iterator, <, Var, >, vars, =, scope, ., getVars, (, ), ;, while, (]
[resolve, (, scope, ), ;, }, Iterator, <, Var, >, vars, =, scope, ., getVars, (, ), ;, while, (]
[<, Var, >, vars, =, scope, ., getVars, (, ), ;, while, (, vars, ., hasNext, (, ), ), {]
[<, Var, >, vars, =, scope, ., getVars, (, ), ;, while, (, vars, ., hasNext, (, ), ), {]
[<, Var, >, vars, =, scope, ., getVars, (, ), ;, while, (, vars, ., hasNext, (, ), ), {]
[(, ), ;, while, (, vars, ., hasNext, (, ), ), {, vars, ., next, (, ), ., resolveType, (]
[(, vars, ., hasNext, (, ), ), {, vars, ., next, (, ), ., resolveType, (, typeParsingErrorReporter, ), ;, }]
[(, vars, ., hasNext, (, ), ), {, vars, ., next, (, ), ., resolveType, (, typeParsingErrorReporter, ), ;, }]
[(, ), ), {, vars, ., next, (, ), ., resolveType, (, typeParsingErrorReporter, ), ;, }, typeRegistry, ., resolveTypesInScope, (]
[), ;, }, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[}, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, inputId, =]
[}, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, inputId, =]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, inputId, =, t, ., getInputId, (, ), ;, if, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, inputId, =, t, ., getInputId, (, ), ;, if, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, inputId, =, t, ., getInputId, (, ), ;, if, (]
[Node, parent, ), {, inputId, =, t, ., getInputId, (, ), ;, if, (, n, ., isFunction, (, ), ||]
[Node, parent, ), {, inputId, =, t, ., getInputId, (, ), ;, if, (, n, ., isFunction, (, ), ||]
[., getInputId, (, ), ;, if, (, n, ., isFunction, (, ), ||, n, ., isScript, (, ), ), {]
[., getInputId, (, ), ;, if, (, n, ., isFunction, (, ), ||, n, ., isScript, (, ), ), {]
[;, if, (, n, ., isFunction, (, ), ||, n, ., isScript, (, ), ), {, Preconditions, ., checkNotNull, (]
[n, ., isFunction, (, ), ||, n, ., isScript, (, ), ), {, Preconditions, ., checkNotNull, (, inputId, ), ;]
[isFunction, (, ), ||, n, ., isScript, (, ), ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, sourceName, =]
[isFunction, (, ), ||, n, ., isScript, (, ), ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, sourceName, =]
[n, ., isScript, (, ), ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, sourceName, =, NodeUtil, ., getSourceName, (]
[Preconditions, ., checkNotNull, (, inputId, ), ;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean, descend, =]
[Preconditions, ., checkNotNull, (, inputId, ), ;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean, descend, =]
[Preconditions, ., checkNotNull, (, inputId, ), ;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean, descend, =]
[Preconditions, ., checkNotNull, (, inputId, ), ;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean, descend, =]
[Preconditions, ., checkNotNull, (, inputId, ), ;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean, descend, =]
[checkNotNull, (, inputId, ), ;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean, descend, =, parent, ==]
[inputId, ), ;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean, descend, =, parent, ==, null, ||]
[), ;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean, descend, =, parent, ==, null, ||, !]
[), ;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean, descend, =, parent, ==, null, ||, !]
[getSourceName, (, n, ), ;, }, boolean, descend, =, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||]
[getSourceName, (, n, ), ;, }, boolean, descend, =, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||]
[n, ), ;, }, boolean, descend, =, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==]
[n, ), ;, }, boolean, descend, =, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==]
[=, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ||]
[=, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ||]
[==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ||, parent, ==]
[==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ||, parent, ==]
[), ||, n, ==, parent, ., getFirstChild, (, ), ||, parent, ==, scope, ., getRootNode, (, ), ;, if, (]
[., getFirstChild, (, ), ||, parent, ==, scope, ., getRootNode, (, ), ;, if, (, descend, ), {, if, (]
[., getFirstChild, (, ), ||, parent, ==, scope, ., getRootNode, (, ), ;, if, (, descend, ), {, if, (]
[||, parent, ==, scope, ., getRootNode, (, ), ;, if, (, descend, ), {, if, (, NodeUtil, ., isStatementParent, (]
[if, (, descend, ), {, if, (, NodeUtil, ., isStatementParent, (, n, ), ), {, for, (, Node, child, =]
[if, (, descend, ), {, if, (, NodeUtil, ., isStatementParent, (, n, ), ), {, for, (, Node, child, =]
[(, NodeUtil, ., isStatementParent, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[(, NodeUtil, ., isStatementParent, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[., isStatementParent, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[(, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;]
[), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, NodeUtil, ., isHoistedFunctionDeclaration, (]
[;, child, =, child, ., getNext, (, ), ), {, if, (, NodeUtil, ., isHoistedFunctionDeclaration, (, child, ), ), {]
[=, child, ., getNext, (, ), ), {, if, (, NodeUtil, ., isHoistedFunctionDeclaration, (, child, ), ), {, defineFunctionLiteral, (]
[if, (, NodeUtil, ., isHoistedFunctionDeclaration, (, child, ), ), {, defineFunctionLiteral, (, child, ), ;, }, }, }, }, return]
[return, descend, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, inputId, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, inputId, =]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, inputId, =, t, ., getInputId, (, ), ;]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, inputId, =, t, ., getInputId, (, ), ;, attachLiteralTypes, (]
[,, Node, n, ,, Node, parent, ), {, inputId, =, t, ., getInputId, (, ), ;, attachLiteralTypes, (, t, ,]
[parent, ), {, inputId, =, t, ., getInputId, (, ), ;, attachLiteralTypes, (, t, ,, n, ), ;, switch, (]
[parent, ), {, inputId, =, t, ., getInputId, (, ), ;, attachLiteralTypes, (, t, ,, n, ), ;, switch, (]
[(, ), ;, attachLiteralTypes, (, t, ,, n, ), ;, switch, (, n, ., getType, (, ), ), {, case]
[(, ), ;, attachLiteralTypes, (, t, ,, n, ), ;, switch, (, n, ., getType, (, ), ), {, case]
[(, t, ,, n, ), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., CALL, :]
[,, n, ), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., CALL, :, checkForClassDefiningCalls, (]
[), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., CALL, :, checkForClassDefiningCalls, (, t, ,]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., CALL, :, checkForClassDefiningCalls, (, t, ,, n, ,]
[., getType, (, ), ), {, case, Token, ., CALL, :, checkForClassDefiningCalls, (, t, ,, n, ,, parent, ), ;]
[(, ), ), {, case, Token, ., CALL, :, checkForClassDefiningCalls, (, t, ,, n, ,, parent, ), ;, checkForCallingConventionDefiningCalls, (]
[), {, case, Token, ., CALL, :, checkForClassDefiningCalls, (, t, ,, n, ,, parent, ), ;, checkForCallingConventionDefiningCalls, (, n, ,]
[:, checkForClassDefiningCalls, (, t, ,, n, ,, parent, ), ;, checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, ), ;, break, ;, case]
[:, checkForClassDefiningCalls, (, t, ,, n, ,, parent, ), ;, checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, ), ;, break, ;, case]
[,, parent, ), ;, checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (]
[,, parent, ), ;, checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (]
[,, parent, ), ;, checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (]
[,, parent, ), ;, checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (]
[n, ,, delegateCallingConventions, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., getInput, (, ), ==]
[delegateCallingConventions, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., getInput, (, ), ==, null, ||]
[), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., getInput, (, ), ==, null, ||, !]
[), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., getInput, (, ), ==, null, ||, !]
[), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., getInput, (, ), ==, null, ||, !]
[t, ., getInput, (, ), ==, null, ||, !, t, ., getInput, (, ), ., isExtern, (, ), ), {]
[t, ., getInput, (, ), ==, null, ||, !, t, ., getInput, (, ), ., isExtern, (, ), ), {]
[), ==, null, ||, !, t, ., getInput, (, ), ., isExtern, (, ), ), {, nonExternFunctions, ., add, (]
[., getInput, (, ), ., isExtern, (, ), ), {, nonExternFunctions, ., add, (, n, ), ;, }, if, (]
[getInput, (, ), ., isExtern, (, ), ), {, nonExternFunctions, ., add, (, n, ), ;, }, if, (, !]
[getInput, (, ), ., isExtern, (, ), ), {, nonExternFunctions, ., add, (, n, ), ;, }, if, (, !]
[isExtern, (, ), ), {, nonExternFunctions, ., add, (, n, ), ;, }, if, (, !, NodeUtil, ., isHoistedFunctionDeclaration, (]
[{, nonExternFunctions, ., add, (, n, ), ;, }, if, (, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {]
[., add, (, n, ), ;, }, if, (, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {, defineFunctionLiteral, (]
[if, (, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {, defineFunctionLiteral, (, n, ), ;, }, break, ;, case]
[if, (, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {, defineFunctionLiteral, (, n, ), ;, }, break, ;, case]
[n, ), ), {, defineFunctionLiteral, (, n, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, firstChild, =]
[n, ), ), {, defineFunctionLiteral, (, n, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, firstChild, =]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, firstChild, =, n, ., getFirstChild, (, ), ;, if, (]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, firstChild, =, n, ., getFirstChild, (, ), ;, if, (]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, firstChild, =, n, ., getFirstChild, (, ), ;, if, (]
[., ASSIGN, :, Node, firstChild, =, n, ., getFirstChild, (, ), ;, if, (, firstChild, ., isGetProp, (, ), &&]
[., ASSIGN, :, Node, firstChild, =, n, ., getFirstChild, (, ), ;, if, (, firstChild, ., isGetProp, (, ), &&]
[., getFirstChild, (, ), ;, if, (, firstChild, ., isGetProp, (, ), &&, firstChild, ., isQualifiedName, (, ), ), {]
[(, ), ;, if, (, firstChild, ., isGetProp, (, ), &&, firstChild, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (]
[;, if, (, firstChild, ., isGetProp, (, ), &&, firstChild, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,]
[;, if, (, firstChild, ., isGetProp, (, ), &&, firstChild, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,]
[(, ), &&, firstChild, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,]
[&&, firstChild, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, firstChild, ,]
[., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, firstChild, ,, n, ,]
[., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, firstChild, ,, n, ,]
[., getJSDocInfo, (, ), ,, firstChild, ,, n, ,, firstChild, ., getNext, (, ), ), ;, }, break, ;, case]
[., getJSDocInfo, (, ), ,, firstChild, ,, n, ,, firstChild, ., getNext, (, ), ), ;, }, break, ;, case]
[,, firstChild, ,, n, ,, firstChild, ., getNext, (, ), ), ;, }, break, ;, case, Token, ., CATCH, :]
[,, n, ,, firstChild, ., getNext, (, ), ), ;, }, break, ;, case, Token, ., CATCH, :, defineCatch, (]
[(, ), ), ;, }, break, ;, case, Token, ., CATCH, :, defineCatch, (, n, ), ;, break, ;, case]
[(, ), ), ;, }, break, ;, case, Token, ., CATCH, :, defineCatch, (, n, ), ;, break, ;, case]
[}, break, ;, case, Token, ., CATCH, :, defineCatch, (, n, ), ;, break, ;, case, Token, ., VAR, :]
[;, case, Token, ., CATCH, :, defineCatch, (, n, ), ;, break, ;, case, Token, ., VAR, :, defineVar, (]
[defineCatch, (, n, ), ;, break, ;, case, Token, ., VAR, :, defineVar, (, n, ), ;, break, ;, case]
[defineCatch, (, n, ), ;, break, ;, case, Token, ., VAR, :, defineVar, (, n, ), ;, break, ;, case]
[;, case, Token, ., VAR, :, defineVar, (, n, ), ;, break, ;, case, Token, ., GETPROP, :, if, (]
[;, case, Token, ., VAR, :, defineVar, (, n, ), ;, break, ;, case, Token, ., GETPROP, :, if, (]
[;, case, Token, ., VAR, :, defineVar, (, n, ), ;, break, ;, case, Token, ., GETPROP, :, if, (]
[defineVar, (, n, ), ;, break, ;, case, Token, ., GETPROP, :, if, (, parent, ., isExprResult, (, ), &&]
[defineVar, (, n, ), ;, break, ;, case, Token, ., GETPROP, :, if, (, parent, ., isExprResult, (, ), &&]
[case, Token, ., GETPROP, :, if, (, parent, ., isExprResult, (, ), &&, n, ., isQualifiedName, (, ), ), {]
[., GETPROP, :, if, (, parent, ., isExprResult, (, ), &&, n, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (]
[:, if, (, parent, ., isExprResult, (, ), &&, n, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,]
[:, if, (, parent, ., isExprResult, (, ), &&, n, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,]
[(, ), &&, n, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,]
[&&, n, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, n, ,]
[., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, n, ,, parent, ,]
[,, n, ., getJSDocInfo, (, ), ,, n, ,, parent, ,, null, ), ;, }, break, ;, }, if, (]
[,, n, ., getJSDocInfo, (, ), ,, n, ,, parent, ,, null, ), ;, }, break, ;, }, if, (]
[,, n, ., getJSDocInfo, (, ), ,, n, ,, parent, ,, null, ), ;, }, break, ;, }, if, (]
[,, n, ., getJSDocInfo, (, ), ,, n, ,, parent, ,, null, ), ;, }, break, ;, }, if, (]
[,, n, ., getJSDocInfo, (, ), ,, n, ,, parent, ,, null, ), ;, }, break, ;, }, if, (]
[,, n, ,, parent, ,, null, ), ;, }, break, ;, }, if, (, n, ., getParent, (, ), !=]
[,, parent, ,, null, ), ;, }, break, ;, }, if, (, n, ., getParent, (, ), !=, null, &&]
[,, parent, ,, null, ), ;, }, break, ;, }, if, (, n, ., getParent, (, ), !=, null, &&]
[), ;, }, break, ;, }, if, (, n, ., getParent, (, ), !=, null, &&, NodeUtil, ., isStatement, (]
[break, ;, }, if, (, n, ., getParent, (, ), !=, null, &&, NodeUtil, ., isStatement, (, n, ), &&]
[break, ;, }, if, (, n, ., getParent, (, ), !=, null, &&, NodeUtil, ., isStatement, (, n, ), &&]
[}, if, (, n, ., getParent, (, ), !=, null, &&, NodeUtil, ., isStatement, (, n, ), &&, lentObjectLiterals, !=]
[!=, null, &&, NodeUtil, ., isStatement, (, n, ), &&, lentObjectLiterals, !=, null, ), {, for, (, Node, objLit, :]
[NodeUtil, ., isStatement, (, n, ), &&, lentObjectLiterals, !=, null, ), {, for, (, Node, objLit, :, lentObjectLiterals, ), {]
[isStatement, (, n, ), &&, lentObjectLiterals, !=, null, ), {, for, (, Node, objLit, :, lentObjectLiterals, ), {, defineObjectLiteral, (]
[&&, lentObjectLiterals, !=, null, ), {, for, (, Node, objLit, :, lentObjectLiterals, ), {, defineObjectLiteral, (, objLit, ), ;, }]
[&&, lentObjectLiterals, !=, null, ), {, for, (, Node, objLit, :, lentObjectLiterals, ), {, defineObjectLiteral, (, objLit, ), ;, }]
[., clear, (, ), ;, }, }, private, void, attachLiteralTypes, (, NodeTraversal, t, ,, Node, n, ), {, switch, (]
[., clear, (, ), ;, }, }, private, void, attachLiteralTypes, (, NodeTraversal, t, ,, Node, n, ), {, switch, (]
[void, attachLiteralTypes, (, NodeTraversal, t, ,, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[void, attachLiteralTypes, (, NodeTraversal, t, ,, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[t, ,, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NULL, :]
[t, ,, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NULL, :]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NULL, :, n, ., setJSType, (]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., NULL, :, n, ., setJSType, (, getNativeType, (]
[), {, case, Token, ., NULL, :, n, ., setJSType, (, getNativeType, (, NULL_TYPE, ), ), ;, break, ;, case]
[), {, case, Token, ., NULL, :, n, ., setJSType, (, getNativeType, (, NULL_TYPE, ), ), ;, break, ;, case]
[., NULL, :, n, ., setJSType, (, getNativeType, (, NULL_TYPE, ), ), ;, break, ;, case, Token, ., VOID, :]
[., NULL, :, n, ., setJSType, (, getNativeType, (, NULL_TYPE, ), ), ;, break, ;, case, Token, ., VOID, :]
[., setJSType, (, getNativeType, (, NULL_TYPE, ), ), ;, break, ;, case, Token, ., VOID, :, n, ., setJSType, (]
[(, getNativeType, (, NULL_TYPE, ), ), ;, break, ;, case, Token, ., VOID, :, n, ., setJSType, (, getNativeType, (]
[break, ;, case, Token, ., VOID, :, n, ., setJSType, (, getNativeType, (, VOID_TYPE, ), ), ;, break, ;, case]
[break, ;, case, Token, ., VOID, :, n, ., setJSType, (, getNativeType, (, VOID_TYPE, ), ), ;, break, ;, case]
[., VOID, :, n, ., setJSType, (, getNativeType, (, VOID_TYPE, ), ), ;, break, ;, case, Token, ., STRING, :]
[., VOID, :, n, ., setJSType, (, getNativeType, (, VOID_TYPE, ), ), ;, break, ;, case, Token, ., STRING, :]
[., setJSType, (, getNativeType, (, VOID_TYPE, ), ), ;, break, ;, case, Token, ., STRING, :, n, ., setJSType, (]
[(, getNativeType, (, VOID_TYPE, ), ), ;, break, ;, case, Token, ., STRING, :, n, ., setJSType, (, getNativeType, (]
[break, ;, case, Token, ., STRING, :, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case]
[break, ;, case, Token, ., STRING, :, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case]
[., STRING, :, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., NUMBER, :]
[., STRING, :, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., NUMBER, :]
[., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., NUMBER, :, n, ., setJSType, (]
[(, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., NUMBER, :, n, ., setJSType, (, getNativeType, (]
[break, ;, case, Token, ., NUMBER, :, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case]
[break, ;, case, Token, ., NUMBER, :, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case]
[NUMBER, :, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., TRUE, :, case]
[NUMBER, :, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., TRUE, :, case]
[setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :]
[setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :]
[NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :, n, ., setJSType, (]
[), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :, n, ., setJSType, (, getNativeType, (]
[TRUE, :, case, Token, ., FALSE, :, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case]
[TRUE, :, case, Token, ., FALSE, :, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case]
[., FALSE, :, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., REGEXP, :]
[., FALSE, :, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., REGEXP, :]
[., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., REGEXP, :, n, ., setJSType, (]
[(, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., REGEXP, :, n, ., setJSType, (, getNativeType, (]
[break, ;, case, Token, ., REGEXP, :, n, ., setJSType, (, getNativeType, (, REGEXP_TYPE, ), ), ;, break, ;, case]
[break, ;, case, Token, ., REGEXP, :, n, ., setJSType, (, getNativeType, (, REGEXP_TYPE, ), ), ;, break, ;, case]
[n, ., setJSType, (, getNativeType, (, REGEXP_TYPE, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, JSDocInfo, info, =]
[n, ., setJSType, (, getNativeType, (, REGEXP_TYPE, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, JSDocInfo, info, =]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[break, ;, case, Token, ., OBJECTLIT, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[case, Token, ., OBJECTLIT, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[case, Token, ., OBJECTLIT, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[case, Token, ., OBJECTLIT, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., getLendsName, (, ), !=]
[(, ), ;, if, (, info, !=, null, &&, info, ., getLendsName, (, ), !=, null, ), {, if, (]
[(, ), ;, if, (, info, !=, null, &&, info, ., getLendsName, (, ), !=, null, ), {, if, (]
[;, if, (, info, !=, null, &&, info, ., getLendsName, (, ), !=, null, ), {, if, (, lentObjectLiterals, ==]
[info, !=, null, &&, info, ., getLendsName, (, ), !=, null, ), {, if, (, lentObjectLiterals, ==, null, ), {]
[null, &&, info, ., getLendsName, (, ), !=, null, ), {, if, (, lentObjectLiterals, ==, null, ), {, lentObjectLiterals, =]
[null, &&, info, ., getLendsName, (, ), !=, null, ), {, if, (, lentObjectLiterals, ==, null, ), {, lentObjectLiterals, =]
[!=, null, ), {, if, (, lentObjectLiterals, ==, null, ), {, lentObjectLiterals, =, Lists, ., newArrayList, (, ), ;, }]
[!=, null, ), {, if, (, lentObjectLiterals, ==, null, ), {, lentObjectLiterals, =, Lists, ., newArrayList, (, ), ;, }]
[if, (, lentObjectLiterals, ==, null, ), {, lentObjectLiterals, =, Lists, ., newArrayList, (, ), ;, }, lentObjectLiterals, ., add, (]
[{, lentObjectLiterals, =, Lists, ., newArrayList, (, ), ;, }, lentObjectLiterals, ., add, (, n, ), ;, }, else, {]
[=, Lists, ., newArrayList, (, ), ;, }, lentObjectLiterals, ., add, (, n, ), ;, }, else, {, defineObjectLiteral, (]
[(, n, ), ;, }, break, ;, }, }, private, void, defineObjectLiteral, (, Node, objectLit, ), {, JSType, type, =]
[break, ;, }, }, private, void, defineObjectLiteral, (, Node, objectLit, ), {, JSType, type, =, null, ;, JSDocInfo, info, =]
[break, ;, }, }, private, void, defineObjectLiteral, (, Node, objectLit, ), {, JSType, type, =, null, ;, JSDocInfo, info, =]
[Node, objectLit, ), {, JSType, type, =, null, ;, JSDocInfo, info, =, objectLit, ., getJSDocInfo, (, ), ;, if, (]
[Node, objectLit, ), {, JSType, type, =, null, ;, JSDocInfo, info, =, objectLit, ., getJSDocInfo, (, ), ;, if, (]
[Node, objectLit, ), {, JSType, type, =, null, ;, JSDocInfo, info, =, objectLit, ., getJSDocInfo, (, ), ;, if, (]
[), {, JSType, type, =, null, ;, JSDocInfo, info, =, objectLit, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[JSType, type, =, null, ;, JSDocInfo, info, =, objectLit, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[JSType, type, =, null, ;, JSDocInfo, info, =, objectLit, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[JSType, type, =, null, ;, JSDocInfo, info, =, objectLit, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&]
[info, =, objectLit, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., getLendsName, (, ), !=]
[), ;, if, (, info, !=, null, &&, info, ., getLendsName, (, ), !=, null, ), {, String, lendsName, =]
[), ;, if, (, info, !=, null, &&, info, ., getLendsName, (, ), !=, null, ), {, String, lendsName, =]
[., getLendsName, (, ), !=, null, ), {, String, lendsName, =, info, ., getLendsName, (, ), ;, Var, lendsVar, =]
[., getLendsName, (, ), !=, null, ), {, String, lendsName, =, info, ., getLendsName, (, ), ;, Var, lendsVar, =]
[!=, null, ), {, String, lendsName, =, info, ., getLendsName, (, ), ;, Var, lendsVar, =, scope, ., getVar, (]
[lendsName, =, info, ., getLendsName, (, ), ;, Var, lendsVar, =, scope, ., getVar, (, lendsName, ), ;, if, (]
[lendsName, =, info, ., getLendsName, (, ), ;, Var, lendsVar, =, scope, ., getVar, (, lendsName, ), ;, if, (]
[info, ., getLendsName, (, ), ;, Var, lendsVar, =, scope, ., getVar, (, lendsName, ), ;, if, (, lendsVar, ==]
[(, ), ;, Var, lendsVar, =, scope, ., getVar, (, lendsName, ), ;, if, (, lendsVar, ==, null, ), {]
[(, ), ;, Var, lendsVar, =, scope, ., getVar, (, lendsName, ), ;, if, (, lendsVar, ==, null, ), {]
[lendsVar, =, scope, ., getVar, (, lendsName, ), ;, if, (, lendsVar, ==, null, ), {, compiler, ., report, (]
[lendsVar, =, scope, ., getVar, (, lendsName, ), ;, if, (, lendsVar, ==, null, ), {, compiler, ., report, (]
[getVar, (, lendsName, ), ;, if, (, lendsVar, ==, null, ), {, compiler, ., report, (, JSError, ., make, (]
[lendsName, ), ;, if, (, lendsVar, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,]
[;, if, (, lendsVar, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,]
[(, lendsVar, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, UNKNOWN_LENDS, ,]
[., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, UNKNOWN_LENDS, ,, lendsName, ), ), ;, }, else, {]
[(, JSError, ., make, (, sourceName, ,, objectLit, ,, UNKNOWN_LENDS, ,, lendsName, ), ), ;, }, else, {, type, =]
[(, JSError, ., make, (, sourceName, ,, objectLit, ,, UNKNOWN_LENDS, ,, lendsName, ), ), ;, }, else, {, type, =]
[,, UNKNOWN_LENDS, ,, lendsName, ), ), ;, }, else, {, type, =, lendsVar, ., getType, (, ), ;, if, (]
[,, UNKNOWN_LENDS, ,, lendsName, ), ), ;, }, else, {, type, =, lendsVar, ., getType, (, ), ;, if, (]
[,, lendsName, ), ), ;, }, else, {, type, =, lendsVar, ., getType, (, ), ;, if, (, type, ==]
[), ;, }, else, {, type, =, lendsVar, ., getType, (, ), ;, if, (, type, ==, null, ), {]
[}, else, {, type, =, lendsVar, ., getType, (, ), ;, if, (, type, ==, null, ), {, type, =]
[lendsVar, ., getType, (, ), ;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, if, (]
[., getType, (, ), ;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, if, (, !]
[., getType, (, ), ;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, if, (, !]
[;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, if, (, !, type, ., isSubtype, (]
[;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, if, (, !, type, ., isSubtype, (]
[==, null, ), {, type, =, unknownType, ;, }, if, (, !, type, ., isSubtype, (, typeRegistry, ., getNativeType, (]
[=, unknownType, ;, }, if, (, !, type, ., isSubtype, (, typeRegistry, ., getNativeType, (, OBJECT_TYPE, ), ), ), {]
[=, unknownType, ;, }, if, (, !, type, ., isSubtype, (, typeRegistry, ., getNativeType, (, OBJECT_TYPE, ), ), ), {]
[if, (, !, type, ., isSubtype, (, typeRegistry, ., getNativeType, (, OBJECT_TYPE, ), ), ), {, compiler, ., report, (]
[if, (, !, type, ., isSubtype, (, typeRegistry, ., getNativeType, (, OBJECT_TYPE, ), ), ), {, compiler, ., report, (]
[., isSubtype, (, typeRegistry, ., getNativeType, (, OBJECT_TYPE, ), ), ), {, compiler, ., report, (, JSError, ., make, (]
[(, typeRegistry, ., getNativeType, (, OBJECT_TYPE, ), ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,]
[., getNativeType, (, OBJECT_TYPE, ), ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,]
[(, OBJECT_TYPE, ), ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, LENDS_ON_NON_OBJECT, ,]
[), ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, LENDS_ON_NON_OBJECT, ,, lendsName, ,]
[), ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, LENDS_ON_NON_OBJECT, ,, lendsName, ,]
[JSError, ., make, (, sourceName, ,, objectLit, ,, LENDS_ON_NON_OBJECT, ,, lendsName, ,, type, ., toString, (, ), ), ), ;]
[make, (, sourceName, ,, objectLit, ,, LENDS_ON_NON_OBJECT, ,, lendsName, ,, type, ., toString, (, ), ), ), ;, type, =]
[,, LENDS_ON_NON_OBJECT, ,, lendsName, ,, type, ., toString, (, ), ), ), ;, type, =, null, ;, }, else, {]
[,, LENDS_ON_NON_OBJECT, ,, lendsName, ,, type, ., toString, (, ), ), ), ;, type, =, null, ;, }, else, {]
[,, type, ., toString, (, ), ), ), ;, type, =, null, ;, }, else, {, objectLit, ., setJSType, (]
[), ), ;, type, =, null, ;, }, else, {, objectLit, ., setJSType, (, type, ), ;, }, }, }]
[;, type, =, null, ;, }, else, {, objectLit, ., setJSType, (, type, ), ;, }, }, }, info, =]
[;, type, =, null, ;, }, else, {, objectLit, ., setJSType, (, type, ), ;, }, }, }, info, =]
[;, }, else, {, objectLit, ., setJSType, (, type, ), ;, }, }, }, info, =, NodeUtil, ., getBestJSDocInfo, (]
[setJSType, (, type, ), ;, }, }, }, info, =, NodeUtil, ., getBestJSDocInfo, (, objectLit, ), ;, Node, lValue, =]
[setJSType, (, type, ), ;, }, }, }, info, =, NodeUtil, ., getBestJSDocInfo, (, objectLit, ), ;, Node, lValue, =]
[;, }, }, }, info, =, NodeUtil, ., getBestJSDocInfo, (, objectLit, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (]
[NodeUtil, ., getBestJSDocInfo, (, objectLit, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (, objectLit, ), ;, String, lValueName, =]
[NodeUtil, ., getBestJSDocInfo, (, objectLit, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (, objectLit, ), ;, String, lValueName, =]
[objectLit, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (, objectLit, ), ;, String, lValueName, =, NodeUtil, ., getBestLValueName, (]
[NodeUtil, ., getBestLValue, (, objectLit, ), ;, String, lValueName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, boolean, createdEnumType, =]
[objectLit, ), ;, String, lValueName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, boolean, createdEnumType, =, false, ;, if, (]
[objectLit, ), ;, String, lValueName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, boolean, createdEnumType, =, false, ;, if, (]
[objectLit, ), ;, String, lValueName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, boolean, createdEnumType, =, false, ;, if, (]
[;, String, lValueName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, boolean, createdEnumType, =, false, ;, if, (, info, !=]
[lValueName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, boolean, createdEnumType, =, false, ;, if, (, info, !=, null, &&]
[lValueName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, boolean, createdEnumType, =, false, ;, if, (, info, !=, null, &&]
[), ;, boolean, createdEnumType, =, false, ;, if, (, info, !=, null, &&, info, ., hasEnumParameterType, (, ), ), {]
[boolean, createdEnumType, =, false, ;, if, (, info, !=, null, &&, info, ., hasEnumParameterType, (, ), ), {, type, =]
[=, false, ;, if, (, info, !=, null, &&, info, ., hasEnumParameterType, (, ), ), {, type, =, createEnumTypeFromNodes, (]
[;, if, (, info, !=, null, &&, info, ., hasEnumParameterType, (, ), ), {, type, =, createEnumTypeFromNodes, (, objectLit, ,]
[(, info, !=, null, &&, info, ., hasEnumParameterType, (, ), ), {, type, =, createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,]
[!=, null, &&, info, ., hasEnumParameterType, (, ), ), {, type, =, createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,]
[info, ., hasEnumParameterType, (, ), ), {, type, =, createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,, lValue, ), ;]
[hasEnumParameterType, (, ), ), {, type, =, createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,, lValue, ), ;, createdEnumType, =]
[type, =, createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,, lValue, ), ;, createdEnumType, =, true, ;, }, if, (]
[type, =, createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,, lValue, ), ;, createdEnumType, =, true, ;, }, if, (]
[createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,, lValue, ), ;, createdEnumType, =, true, ;, }, if, (, type, ==]
[,, lValueName, ,, info, ,, lValue, ), ;, createdEnumType, =, true, ;, }, if, (, type, ==, null, ), {]
[,, info, ,, lValue, ), ;, createdEnumType, =, true, ;, }, if, (, type, ==, null, ), {, type, =]
[,, info, ,, lValue, ), ;, createdEnumType, =, true, ;, }, if, (, type, ==, null, ), {, type, =]
[), ;, createdEnumType, =, true, ;, }, if, (, type, ==, null, ), {, type, =, typeRegistry, ., createAnonymousObjectType, (]
[true, ;, }, if, (, type, ==, null, ), {, type, =, typeRegistry, ., createAnonymousObjectType, (, info, ), ;, }]
[}, if, (, type, ==, null, ), {, type, =, typeRegistry, ., createAnonymousObjectType, (, info, ), ;, }, setDeferredType, (]
[(, type, ==, null, ), {, type, =, typeRegistry, ., createAnonymousObjectType, (, info, ), ;, }, setDeferredType, (, objectLit, ,]
[null, ), {, type, =, typeRegistry, ., createAnonymousObjectType, (, info, ), ;, }, setDeferredType, (, objectLit, ,, type, ), ;]
[{, type, =, typeRegistry, ., createAnonymousObjectType, (, info, ), ;, }, setDeferredType, (, objectLit, ,, type, ), ;, processObjectLitProperties, (]
[=, typeRegistry, ., createAnonymousObjectType, (, info, ), ;, }, setDeferredType, (, objectLit, ,, type, ), ;, processObjectLitProperties, (, objectLit, ,]
[=, typeRegistry, ., createAnonymousObjectType, (, info, ), ;, }, setDeferredType, (, objectLit, ,, type, ), ;, processObjectLitProperties, (, objectLit, ,]
[(, info, ), ;, }, setDeferredType, (, objectLit, ,, type, ), ;, processObjectLitProperties, (, objectLit, ,, ObjectType, ., cast, (]
[(, info, ), ;, }, setDeferredType, (, objectLit, ,, type, ), ;, processObjectLitProperties, (, objectLit, ,, ObjectType, ., cast, (]
[objectLit, ,, type, ), ;, processObjectLitProperties, (, objectLit, ,, ObjectType, ., cast, (, objectLit, ., getJSType, (, ), ), ,]
[,, type, ), ;, processObjectLitProperties, (, objectLit, ,, ObjectType, ., cast, (, objectLit, ., getJSType, (, ), ), ,, !]
[;, }, void, processObjectLitProperties, (, Node, objLit, ,, ObjectType, objLitType, ,, boolean, declareOnOwner, ), {, for, (, Node, keyNode, =]
[;, }, void, processObjectLitProperties, (, Node, objLit, ,, ObjectType, objLitType, ,, boolean, declareOnOwner, ), {, for, (, Node, keyNode, =]
[objLit, ,, ObjectType, objLitType, ,, boolean, declareOnOwner, ), {, for, (, Node, keyNode, =, objLit, ., getFirstChild, (, ), ;]
[objLit, ,, ObjectType, objLitType, ,, boolean, declareOnOwner, ), {, for, (, Node, keyNode, =, objLit, ., getFirstChild, (, ), ;]
[ObjectType, objLitType, ,, boolean, declareOnOwner, ), {, for, (, Node, keyNode, =, objLit, ., getFirstChild, (, ), ;, keyNode, !=]
[,, boolean, declareOnOwner, ), {, for, (, Node, keyNode, =, objLit, ., getFirstChild, (, ), ;, keyNode, !=, null, ;]
[declareOnOwner, ), {, for, (, Node, keyNode, =, objLit, ., getFirstChild, (, ), ;, keyNode, !=, null, ;, keyNode, =]
[declareOnOwner, ), {, for, (, Node, keyNode, =, objLit, ., getFirstChild, (, ), ;, keyNode, !=, null, ;, keyNode, =]
[getFirstChild, (, ), ;, keyNode, !=, null, ;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, value, =]
[getFirstChild, (, ), ;, keyNode, !=, null, ;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, value, =]
[=, keyNode, ., getNext, (, ), ), {, Node, value, =, keyNode, ., getFirstChild, (, ), ;, String, memberName, =]
[=, keyNode, ., getNext, (, ), ), {, Node, value, =, keyNode, ., getFirstChild, (, ), ;, String, memberName, =]
[(, ), ), {, Node, value, =, keyNode, ., getFirstChild, (, ), ;, String, memberName, =, NodeUtil, ., getObjectLitKeyName, (]
[=, keyNode, ., getFirstChild, (, ), ;, String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, keyNode, ), ;, JSDocInfo, info, =]
[=, keyNode, ., getFirstChild, (, ), ;, String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, keyNode, ), ;, JSDocInfo, info, =]
[=, NodeUtil, ., getObjectLitKeyName, (, keyNode, ), ;, JSDocInfo, info, =, keyNode, ., getJSDocInfo, (, ), ;, JSType, valueType, =]
[., getObjectLitKeyName, (, keyNode, ), ;, JSDocInfo, info, =, keyNode, ., getJSDocInfo, (, ), ;, JSType, valueType, =, getDeclaredType, (]
[., getObjectLitKeyName, (, keyNode, ), ;, JSDocInfo, info, =, keyNode, ., getJSDocInfo, (, ), ;, JSType, valueType, =, getDeclaredType, (]
[JSDocInfo, info, =, keyNode, ., getJSDocInfo, (, ), ;, JSType, valueType, =, getDeclaredType, (, keyNode, ., getSourceFileName, (, ), ,]
[=, keyNode, ., getJSDocInfo, (, ), ;, JSType, valueType, =, getDeclaredType, (, keyNode, ., getSourceFileName, (, ), ,, info, ,]
[., getJSDocInfo, (, ), ;, JSType, valueType, =, getDeclaredType, (, keyNode, ., getSourceFileName, (, ), ,, info, ,, keyNode, ,]
[valueType, =, getDeclaredType, (, keyNode, ., getSourceFileName, (, ), ,, info, ,, keyNode, ,, value, ), ;, JSType, keyType, =]
[valueType, =, getDeclaredType, (, keyNode, ., getSourceFileName, (, ), ,, info, ,, keyNode, ,, value, ), ;, JSType, keyType, =]
[valueType, =, getDeclaredType, (, keyNode, ., getSourceFileName, (, ), ,, info, ,, keyNode, ,, value, ), ;, JSType, keyType, =]
[getSourceFileName, (, ), ,, info, ,, keyNode, ,, value, ), ;, JSType, keyType, =, objLitType, ., isEnumType, (, ), ?]
[getSourceFileName, (, ), ,, info, ,, keyNode, ,, value, ), ;, JSType, keyType, =, objLitType, ., isEnumType, (, ), ?]
[getSourceFileName, (, ), ,, info, ,, keyNode, ,, value, ), ;, JSType, keyType, =, objLitType, ., isEnumType, (, ), ?]
[;, JSType, keyType, =, objLitType, ., isEnumType, (, ), ?, objLitType, ., toMaybeEnumType, (, ), ., getElementsType, (, ), :]
[;, JSType, keyType, =, objLitType, ., isEnumType, (, ), ?, objLitType, ., toMaybeEnumType, (, ), ., getElementsType, (, ), :]
[objLitType, ., isEnumType, (, ), ?, objLitType, ., toMaybeEnumType, (, ), ., getElementsType, (, ), :, NodeUtil, ., getObjectLitKeyTypeFromValueType, (]
[isEnumType, (, ), ?, objLitType, ., toMaybeEnumType, (, ), ., getElementsType, (, ), :, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, keyNode, ,]
[toMaybeEnumType, (, ), ., getElementsType, (, ), :, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, keyNode, ,, valueType, ), ;, String, qualifiedName, =]
[toMaybeEnumType, (, ), ., getElementsType, (, ), :, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, keyNode, ,, valueType, ), ;, String, qualifiedName, =]
[getElementsType, (, ), :, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, keyNode, ,, valueType, ), ;, String, qualifiedName, =, NodeUtil, ., getBestLValueName, (]
[., getObjectLitKeyTypeFromValueType, (, keyNode, ,, valueType, ), ;, String, qualifiedName, =, NodeUtil, ., getBestLValueName, (, keyNode, ), ;, if, (]
[., getObjectLitKeyTypeFromValueType, (, keyNode, ,, valueType, ), ;, String, qualifiedName, =, NodeUtil, ., getBestLValueName, (, keyNode, ), ;, if, (]
[(, keyNode, ,, valueType, ), ;, String, qualifiedName, =, NodeUtil, ., getBestLValueName, (, keyNode, ), ;, if, (, qualifiedName, !=]
[String, qualifiedName, =, NodeUtil, ., getBestLValueName, (, keyNode, ), ;, if, (, qualifiedName, !=, null, ), {, boolean, inferred, =]
[String, qualifiedName, =, NodeUtil, ., getBestLValueName, (, keyNode, ), ;, if, (, qualifiedName, !=, null, ), {, boolean, inferred, =]
[=, NodeUtil, ., getBestLValueName, (, keyNode, ), ;, if, (, qualifiedName, !=, null, ), {, boolean, inferred, =, keyType, ==]
[., getBestLValueName, (, keyNode, ), ;, if, (, qualifiedName, !=, null, ), {, boolean, inferred, =, keyType, ==, null, ;]
[(, keyNode, ), ;, if, (, qualifiedName, !=, null, ), {, boolean, inferred, =, keyType, ==, null, ;, defineSlot, (]
[), ;, if, (, qualifiedName, !=, null, ), {, boolean, inferred, =, keyType, ==, null, ;, defineSlot, (, keyNode, ,]
[if, (, qualifiedName, !=, null, ), {, boolean, inferred, =, keyType, ==, null, ;, defineSlot, (, keyNode, ,, objLit, ,]
[qualifiedName, !=, null, ), {, boolean, inferred, =, keyType, ==, null, ;, defineSlot, (, keyNode, ,, objLit, ,, qualifiedName, ,]
[null, ), {, boolean, inferred, =, keyType, ==, null, ;, defineSlot, (, keyNode, ,, objLit, ,, qualifiedName, ,, keyType, ,]
[==, null, ;, defineSlot, (, keyNode, ,, objLit, ,, qualifiedName, ,, keyType, ,, inferred, ), ;, }, else, if, (]
[==, null, ;, defineSlot, (, keyNode, ,, objLit, ,, qualifiedName, ,, keyType, ,, inferred, ), ;, }, else, if, (]
[;, defineSlot, (, keyNode, ,, objLit, ,, qualifiedName, ,, keyType, ,, inferred, ), ;, }, else, if, (, keyType, !=]
[keyNode, ,, objLit, ,, qualifiedName, ,, keyType, ,, inferred, ), ;, }, else, if, (, keyType, !=, null, ), {]
[objLit, ,, qualifiedName, ,, keyType, ,, inferred, ), ;, }, else, if, (, keyType, !=, null, ), {, setDeferredType, (]
[qualifiedName, ,, keyType, ,, inferred, ), ;, }, else, if, (, keyType, !=, null, ), {, setDeferredType, (, keyNode, ,]
[;, }, else, if, (, keyType, !=, null, ), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if, (]
[;, }, else, if, (, keyType, !=, null, ), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if, (]
[;, }, else, if, (, keyType, !=, null, ), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if, (]
[;, }, else, if, (, keyType, !=, null, ), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if, (]
[else, if, (, keyType, !=, null, ), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if, (, keyType, !=]
[(, keyType, !=, null, ), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if, (, keyType, !=, null, &&]
[(, keyType, !=, null, ), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if, (, keyType, !=, null, &&]
[!=, null, ), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if, (, keyType, !=, null, &&, objLitType, !=]
[), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if, (, keyType, !=, null, &&, objLitType, !=, null, &&]
[keyType, ), ;, }, if, (, keyType, !=, null, &&, objLitType, !=, null, &&, declareOnOwner, ), {, boolean, isExtern, =]
[keyType, ), ;, }, if, (, keyType, !=, null, &&, objLitType, !=, null, &&, declareOnOwner, ), {, boolean, isExtern, =]
[keyType, !=, null, &&, objLitType, !=, null, &&, declareOnOwner, ), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;]
[keyType, !=, null, &&, objLitType, !=, null, &&, declareOnOwner, ), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;]
[objLitType, !=, null, &&, declareOnOwner, ), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;, objLitType, ., defineDeclaredProperty, (]
[null, &&, declareOnOwner, ), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;, objLitType, ., defineDeclaredProperty, (, memberName, ,]
[declareOnOwner, ), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;, objLitType, ., defineDeclaredProperty, (, memberName, ,, keyType, ,]
[}, }, }, private, JSType, getDeclaredTypeInAnnotation, (, String, sourceName, ,, Node, node, ,, JSDocInfo, info, ), {, JSType, jsType, =]
[getDeclaredTypeInAnnotation, (, String, sourceName, ,, Node, node, ,, JSDocInfo, info, ), {, JSType, jsType, =, null, ;, Node, objNode, =]
[getDeclaredTypeInAnnotation, (, String, sourceName, ,, Node, node, ,, JSDocInfo, info, ), {, JSType, jsType, =, null, ;, Node, objNode, =]
[getDeclaredTypeInAnnotation, (, String, sourceName, ,, Node, node, ,, JSDocInfo, info, ), {, JSType, jsType, =, null, ;, Node, objNode, =]
[node, ,, JSDocInfo, info, ), {, JSType, jsType, =, null, ;, Node, objNode, =, node, ., isGetProp, (, ), ?]
[node, ,, JSDocInfo, info, ), {, JSType, jsType, =, null, ;, Node, objNode, =, node, ., isGetProp, (, ), ?]
[JSType, jsType, =, null, ;, Node, objNode, =, node, ., isGetProp, (, ), ?, node, ., getFirstChild, (, ), :]
[JSType, jsType, =, null, ;, Node, objNode, =, node, ., isGetProp, (, ), ?, node, ., getFirstChild, (, ), :]
[JSType, jsType, =, null, ;, Node, objNode, =, node, ., isGetProp, (, ), ?, node, ., getFirstChild, (, ), :]
[;, Node, objNode, =, node, ., isGetProp, (, ), ?, node, ., getFirstChild, (, ), :, NodeUtil, ., isObjectLitKey, (]
[objNode, =, node, ., isGetProp, (, ), ?, node, ., getFirstChild, (, ), :, NodeUtil, ., isObjectLitKey, (, node, ,]
[objNode, =, node, ., isGetProp, (, ), ?, node, ., getFirstChild, (, ), :, NodeUtil, ., isObjectLitKey, (, node, ,]
[?, node, ., getFirstChild, (, ), :, NodeUtil, ., isObjectLitKey, (, node, ,, node, ., getParent, (, ), ), ?]
[?, node, ., getFirstChild, (, ), :, NodeUtil, ., isObjectLitKey, (, node, ,, node, ., getParent, (, ), ), ?]
[:, NodeUtil, ., isObjectLitKey, (, node, ,, node, ., getParent, (, ), ), ?, node, ., getParent, (, ), :]
[(, node, ,, node, ., getParent, (, ), ), ?, node, ., getParent, (, ), :, null, ;, if, (]
[(, node, ,, node, ., getParent, (, ), ), ?, node, ., getParent, (, ), :, null, ;, if, (]
[,, node, ., getParent, (, ), ), ?, node, ., getParent, (, ), :, null, ;, if, (, info, !=]
[), ), ?, node, ., getParent, (, ), :, null, ;, if, (, info, !=, null, ), {, if, (]
[), ), ?, node, ., getParent, (, ), :, null, ;, if, (, info, !=, null, ), {, if, (]
[), :, null, ;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (, ), ), {]
[null, ;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (, ), ), {, jsType, =]
[null, ;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (, ), ), {, jsType, =]
[null, ;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (, ), ), {, jsType, =]
[{, if, (, info, ., hasType, (, ), ), {, jsType, =, info, ., getType, (, ), ., evaluate, (]
[(, info, ., hasType, (, ), ), {, jsType, =, info, ., getType, (, ), ., evaluate, (, scope, ,]
[{, jsType, =, info, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (]
[{, jsType, =, info, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (]
[., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (]
[scope, ,, typeRegistry, ), ;, }, else, if, (, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), {, String, fnName, =]
[scope, ,, typeRegistry, ), ;, }, else, if, (, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), {, String, fnName, =]
[else, if, (, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), {, String, fnName, =, node, ., getQualifiedName, (, ), ;]
[(, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), {, String, fnName, =, node, ., getQualifiedName, (, ), ;, jsType, =]
[., isFunctionTypeDeclaration, (, info, ), ), {, String, fnName, =, node, ., getQualifiedName, (, ), ;, jsType, =, createFunctionTypeFromNodes, (]
[(, info, ), ), {, String, fnName, =, node, ., getQualifiedName, (, ), ;, jsType, =, createFunctionTypeFromNodes, (, null, ,]
[), ), {, String, fnName, =, node, ., getQualifiedName, (, ), ;, jsType, =, createFunctionTypeFromNodes, (, null, ,, fnName, ,]
[{, String, fnName, =, node, ., getQualifiedName, (, ), ;, jsType, =, createFunctionTypeFromNodes, (, null, ,, fnName, ,, info, ,]
[getQualifiedName, (, ), ;, jsType, =, createFunctionTypeFromNodes, (, null, ,, fnName, ,, info, ,, node, ), ;, }, }, return]
[,, node, ), ;, }, }, return, jsType, ;, }, void, assertDefinitionNode, (, Node, n, ,, int, type, ), {]
[,, node, ), ;, }, }, return, jsType, ;, }, void, assertDefinitionNode, (, Node, n, ,, int, type, ), {]
[}, }, return, jsType, ;, }, void, assertDefinitionNode, (, Node, n, ,, int, type, ), {, Preconditions, ., checkState, (]
[}, }, return, jsType, ;, }, void, assertDefinitionNode, (, Node, n, ,, int, type, ), {, Preconditions, ., checkState, (]
[return, jsType, ;, }, void, assertDefinitionNode, (, Node, n, ,, int, type, ), {, Preconditions, ., checkState, (, sourceName, !=]
[}, void, assertDefinitionNode, (, Node, n, ,, int, type, ), {, Preconditions, ., checkState, (, sourceName, !=, null, ), ;]
[}, void, assertDefinitionNode, (, Node, n, ,, int, type, ), {, Preconditions, ., checkState, (, sourceName, !=, null, ), ;]
[Node, n, ,, int, type, ), {, Preconditions, ., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (]
[Node, n, ,, int, type, ), {, Preconditions, ., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (]
[Node, n, ,, int, type, ), {, Preconditions, ., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (]
[{, Preconditions, ., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (, n, ., getType, (, ), ==]
[., checkState, (, n, ., getType, (, ), ==, type, ), ;, }, void, defineCatch, (, Node, n, ), {]
[(, n, ., getType, (, ), ==, type, ), ;, }, void, defineCatch, (, Node, n, ), {, assertDefinitionNode, (]
[., getType, (, ), ==, type, ), ;, }, void, defineCatch, (, Node, n, ), {, assertDefinitionNode, (, n, ,]
[., getType, (, ), ==, type, ), ;, }, void, defineCatch, (, Node, n, ), {, assertDefinitionNode, (, n, ,]
[}, void, defineCatch, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., CATCH, ), ;, Node, catchName, =]
[}, void, defineCatch, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., CATCH, ), ;, Node, catchName, =]
[), {, assertDefinitionNode, (, n, ,, Token, ., CATCH, ), ;, Node, catchName, =, n, ., getFirstChild, (, ), ;]
[assertDefinitionNode, (, n, ,, Token, ., CATCH, ), ;, Node, catchName, =, n, ., getFirstChild, (, ), ;, defineSlot, (]
[n, ,, Token, ., CATCH, ), ;, Node, catchName, =, n, ., getFirstChild, (, ), ;, defineSlot, (, catchName, ,]
[Token, ., CATCH, ), ;, Node, catchName, =, n, ., getFirstChild, (, ), ;, defineSlot, (, catchName, ,, n, ,]
[CATCH, ), ;, Node, catchName, =, n, ., getFirstChild, (, ), ;, defineSlot, (, catchName, ,, n, ,, getDeclaredType, (]
[;, Node, catchName, =, n, ., getFirstChild, (, ), ;, defineSlot, (, catchName, ,, n, ,, getDeclaredType, (, sourceName, ,]
[;, Node, catchName, =, n, ., getFirstChild, (, ), ;, defineSlot, (, catchName, ,, n, ,, getDeclaredType, (, sourceName, ,]
[getFirstChild, (, ), ;, defineSlot, (, catchName, ,, n, ,, getDeclaredType, (, sourceName, ,, catchName, ., getJSDocInfo, (, ), ,]
[), ;, defineSlot, (, catchName, ,, n, ,, getDeclaredType, (, sourceName, ,, catchName, ., getJSDocInfo, (, ), ,, catchName, ,]
[catchName, ., getJSDocInfo, (, ), ,, catchName, ,, null, ), ), ;, }, void, defineVar, (, Node, n, ), {]
[getJSDocInfo, (, ), ,, catchName, ,, null, ), ), ;, }, void, defineVar, (, Node, n, ), {, assertDefinitionNode, (]
[), ,, catchName, ,, null, ), ), ;, }, void, defineVar, (, Node, n, ), {, assertDefinitionNode, (, n, ,]
[), ,, catchName, ,, null, ), ), ;, }, void, defineVar, (, Node, n, ), {, assertDefinitionNode, (, n, ,]
[}, void, defineVar, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., VAR, ), ;, JSDocInfo, info, =]
[}, void, defineVar, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., VAR, ), ;, JSDocInfo, info, =]
[assertDefinitionNode, (, n, ,, Token, ., VAR, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[assertDefinitionNode, (, n, ,, Token, ., VAR, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), ), {, if, (]
[JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), ), {, if, (]
[=, n, ., getJSDocInfo, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), ), {, if, (, info, !=]
[getJSDocInfo, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), ), {, if, (, info, !=, null, ), {]
[getJSDocInfo, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), ), {, if, (, info, !=, null, ), {]
[if, (, n, ., hasMoreThanOneChild, (, ), ), {, if, (, info, !=, null, ), {, compiler, ., report, (]
[if, (, n, ., hasMoreThanOneChild, (, ), ), {, if, (, info, !=, null, ), {, compiler, ., report, (]
[hasMoreThanOneChild, (, ), ), {, if, (, info, !=, null, ), {, compiler, ., report, (, JSError, ., make, (]
[), ), {, if, (, info, !=, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,]
[{, if, (, info, !=, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,]
[report, (, JSError, ., make, (, sourceName, ,, n, ,, MULTIPLE_VAR_DEF, ), ), ;, }, for, (, Node, name, :]
[report, (, JSError, ., make, (, sourceName, ,, n, ,, MULTIPLE_VAR_DEF, ), ), ;, }, for, (, Node, name, :]
[,, n, ,, MULTIPLE_VAR_DEF, ), ), ;, }, for, (, Node, name, :, n, ., children, (, ), ), {]
[,, MULTIPLE_VAR_DEF, ), ), ;, }, for, (, Node, name, :, n, ., children, (, ), ), {, defineName, (]
[), ), ;, }, for, (, Node, name, :, n, ., children, (, ), ), {, defineName, (, name, ,]
[;, }, for, (, Node, name, :, n, ., children, (, ), ), {, defineName, (, name, ,, n, ,]
[;, }, for, (, Node, name, :, n, ., children, (, ), ), {, defineName, (, name, ,, n, ,]
[defineName, (, name, ,, n, ,, name, ., getJSDocInfo, (, ), ), ;, }, }, else, {, Node, name, =]
[defineName, (, name, ,, n, ,, name, ., getJSDocInfo, (, ), ), ;, }, }, else, {, Node, name, =]
[name, ., getJSDocInfo, (, ), ), ;, }, }, else, {, Node, name, =, n, ., getFirstChild, (, ), ;]
[getJSDocInfo, (, ), ), ;, }, }, else, {, Node, name, =, n, ., getFirstChild, (, ), ;, defineName, (]
[), ), ;, }, }, else, {, Node, name, =, n, ., getFirstChild, (, ), ;, defineName, (, name, ,]
[;, }, }, else, {, Node, name, =, n, ., getFirstChild, (, ), ;, defineName, (, name, ,, n, ,]
[;, }, }, else, {, Node, name, =, n, ., getFirstChild, (, ), ;, defineName, (, name, ,, n, ,]
[}, }, else, {, Node, name, =, n, ., getFirstChild, (, ), ;, defineName, (, name, ,, n, ,, (]
[}, }, else, {, Node, name, =, n, ., getFirstChild, (, ), ;, defineName, (, name, ,, n, ,, (]
[else, {, Node, name, =, n, ., getFirstChild, (, ), ;, defineName, (, name, ,, n, ,, (, info, !=]
[name, =, n, ., getFirstChild, (, ), ;, defineName, (, name, ,, n, ,, (, info, !=, null, ), ?]
[n, ., getFirstChild, (, ), ;, defineName, (, name, ,, n, ,, (, info, !=, null, ), ?, info, :]
[n, ., getFirstChild, (, ), ;, defineName, (, name, ,, n, ,, (, info, !=, null, ), ?, info, :]
[), ?, info, :, name, ., getJSDocInfo, (, ), ), ;, }, }, void, defineFunctionLiteral, (, Node, n, ), {]
[info, :, name, ., getJSDocInfo, (, ), ), ;, }, }, void, defineFunctionLiteral, (, Node, n, ), {, assertDefinitionNode, (]
[name, ., getJSDocInfo, (, ), ), ;, }, }, void, defineFunctionLiteral, (, Node, n, ), {, assertDefinitionNode, (, n, ,]
[name, ., getJSDocInfo, (, ), ), ;, }, }, void, defineFunctionLiteral, (, Node, n, ), {, assertDefinitionNode, (, n, ,]
[}, void, defineFunctionLiteral, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., FUNCTION, ), ;, Node, lValue, =]
[}, void, defineFunctionLiteral, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., FUNCTION, ), ;, Node, lValue, =]
[Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., FUNCTION, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (]
[n, ,, Token, ., FUNCTION, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (, n, ), ;, JSDocInfo, info, =]
[n, ,, Token, ., FUNCTION, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (, n, ), ;, JSDocInfo, info, =]
[FUNCTION, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (]
[NodeUtil, ., getBestLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, String, functionName, =]
[NodeUtil, ., getBestLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, String, functionName, =]
[n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, String, functionName, =, NodeUtil, ., getBestLValueName, (]
[NodeUtil, ., getBestJSDocInfo, (, n, ), ;, String, functionName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, FunctionType, functionType, =]
[getBestJSDocInfo, (, n, ), ;, String, functionName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, FunctionType, functionType, =, createFunctionTypeFromNodes, (]
[n, ), ;, String, functionName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, FunctionType, functionType, =, createFunctionTypeFromNodes, (, n, ,]
[;, String, functionName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, FunctionType, functionType, =, createFunctionTypeFromNodes, (, n, ,, functionName, ,]
[functionName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, FunctionType, functionType, =, createFunctionTypeFromNodes, (, n, ,, functionName, ,, info, ,]
[., getBestLValueName, (, lValue, ), ;, FunctionType, functionType, =, createFunctionTypeFromNodes, (, n, ,, functionName, ,, info, ,, lValue, ), ;]
[(, lValue, ), ;, FunctionType, functionType, =, createFunctionTypeFromNodes, (, n, ,, functionName, ,, info, ,, lValue, ), ;, setDeferredType, (]
[), ;, FunctionType, functionType, =, createFunctionTypeFromNodes, (, n, ,, functionName, ,, info, ,, lValue, ), ;, setDeferredType, (, n, ,]
[createFunctionTypeFromNodes, (, n, ,, functionName, ,, info, ,, lValue, ), ;, setDeferredType, (, n, ,, functionType, ), ;, if, (]
[createFunctionTypeFromNodes, (, n, ,, functionName, ,, info, ,, lValue, ), ;, setDeferredType, (, n, ,, functionType, ), ;, if, (]
[functionName, ,, info, ,, lValue, ), ;, setDeferredType, (, n, ,, functionType, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (]
[lValue, ), ;, setDeferredType, (, n, ,, functionType, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {]
[;, setDeferredType, (, n, ,, functionType, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, defineSlot, (]
[;, setDeferredType, (, n, ,, functionType, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, defineSlot, (]
[), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, defineSlot, (, n, ., getFirstChild, (, ), ,]
[if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, defineSlot, (, n, ., getFirstChild, (, ), ,, n, ,]
[;, }, }, private, void, defineName, (, Node, name, ,, Node, var, ,, JSDocInfo, info, ), {, Node, value, =]
[;, }, }, private, void, defineName, (, Node, name, ,, Node, var, ,, JSDocInfo, info, ), {, Node, value, =]
[,, Node, var, ,, JSDocInfo, info, ), {, Node, value, =, name, ., getFirstChild, (, ), ;, JSType, type, =]
[var, ,, JSDocInfo, info, ), {, Node, value, =, name, ., getFirstChild, (, ), ;, JSType, type, =, getDeclaredType, (]
[JSDocInfo, info, ), {, Node, value, =, name, ., getFirstChild, (, ), ;, JSType, type, =, getDeclaredType, (, sourceName, ,]
[), {, Node, value, =, name, ., getFirstChild, (, ), ;, JSType, type, =, getDeclaredType, (, sourceName, ,, info, ,]
[Node, value, =, name, ., getFirstChild, (, ), ;, JSType, type, =, getDeclaredType, (, sourceName, ,, info, ,, name, ,]
[getFirstChild, (, ), ;, JSType, type, =, getDeclaredType, (, sourceName, ,, info, ,, name, ,, value, ), ;, if, (]
[getFirstChild, (, ), ;, JSType, type, =, getDeclaredType, (, sourceName, ,, info, ,, name, ,, value, ), ;, if, (]
[), ;, JSType, type, =, getDeclaredType, (, sourceName, ,, info, ,, name, ,, value, ), ;, if, (, type, ==]
[type, =, getDeclaredType, (, sourceName, ,, info, ,, name, ,, value, ), ;, if, (, type, ==, null, ), {]
[getDeclaredType, (, sourceName, ,, info, ,, name, ,, value, ), ;, if, (, type, ==, null, ), {, type, =]
[getDeclaredType, (, sourceName, ,, info, ,, name, ,, value, ), ;, if, (, type, ==, null, ), {, type, =]
[getDeclaredType, (, sourceName, ,, info, ,, name, ,, value, ), ;, if, (, type, ==, null, ), {, type, =]
[name, ,, value, ), ;, if, (, type, ==, null, ), {, type, =, name, ., isFromExterns, (, ), ?]
[value, ), ;, if, (, type, ==, null, ), {, type, =, name, ., isFromExterns, (, ), ?, unknownType, :]
[if, (, type, ==, null, ), {, type, =, name, ., isFromExterns, (, ), ?, unknownType, :, null, ;, }]
[type, ==, null, ), {, type, =, name, ., isFromExterns, (, ), ?, unknownType, :, null, ;, }, defineSlot, (]
[null, ), {, type, =, name, ., isFromExterns, (, ), ?, unknownType, :, null, ;, }, defineSlot, (, name, ,]
[{, type, =, name, ., isFromExterns, (, ), ?, unknownType, :, null, ;, }, defineSlot, (, name, ,, var, ,]
[type, ), ;, }, private, boolean, shouldUseFunctionLiteralType, (, FunctionType, type, ,, JSDocInfo, info, ,, Node, lValue, ), {, if, (]
[type, ), ;, }, private, boolean, shouldUseFunctionLiteralType, (, FunctionType, type, ,, JSDocInfo, info, ,, Node, lValue, ), {, if, (]
[;, }, private, boolean, shouldUseFunctionLiteralType, (, FunctionType, type, ,, JSDocInfo, info, ,, Node, lValue, ), {, if, (, info, !=]
[shouldUseFunctionLiteralType, (, FunctionType, type, ,, JSDocInfo, info, ,, Node, lValue, ), {, if, (, info, !=, null, ), {, return]
[JSDocInfo, info, ,, Node, lValue, ), {, if, (, info, !=, null, ), {, return, true, ;, }, if, (]
[JSDocInfo, info, ,, Node, lValue, ), {, if, (, info, !=, null, ), {, return, true, ;, }, if, (]
[JSDocInfo, info, ,, Node, lValue, ), {, if, (, info, !=, null, ), {, return, true, ;, }, if, (]
[,, Node, lValue, ), {, if, (, info, !=, null, ), {, return, true, ;, }, if, (, lValue, !=]
[lValue, ), {, if, (, info, !=, null, ), {, return, true, ;, }, if, (, lValue, !=, null, &&]
[lValue, ), {, if, (, info, !=, null, ), {, return, true, ;, }, if, (, lValue, !=, null, &&]
[(, info, !=, null, ), {, return, true, ;, }, if, (, lValue, !=, null, &&, NodeUtil, ., isObjectLitKey, (]
[!=, null, ), {, return, true, ;, }, if, (, lValue, !=, null, &&, NodeUtil, ., isObjectLitKey, (, lValue, ,]
[!=, null, ), {, return, true, ;, }, if, (, lValue, !=, null, &&, NodeUtil, ., isObjectLitKey, (, lValue, ,]
[(, lValue, !=, null, &&, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ), {, return]
[&&, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ), {, return, false, ;, }, return]
[&&, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ), {, return, false, ;, }, return]
[&&, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ), {, return, false, ;, }, return]
[,, lValue, ., getParent, (, ), ), ), {, return, false, ;, }, return, scope, ., isGlobal, (, ), ||]
[lValue, ., getParent, (, ), ), ), {, return, false, ;, }, return, scope, ., isGlobal, (, ), ||, !]
[lValue, ., getParent, (, ), ), ), {, return, false, ;, }, return, scope, ., isGlobal, (, ), ||, !]
[,, @, Nullable, String, name, ,, @, Nullable, JSDocInfo, info, ,, @, Nullable, Node, lvalueNode, ), {, FunctionType, functionType, =]
[name, ,, @, Nullable, JSDocInfo, info, ,, @, Nullable, Node, lvalueNode, ), {, FunctionType, functionType, =, null, ;, if, (]
[name, ,, @, Nullable, JSDocInfo, info, ,, @, Nullable, Node, lvalueNode, ), {, FunctionType, functionType, =, null, ;, if, (]
[name, ,, @, Nullable, JSDocInfo, info, ,, @, Nullable, Node, lvalueNode, ), {, FunctionType, functionType, =, null, ;, if, (]
[name, ,, @, Nullable, JSDocInfo, info, ,, @, Nullable, Node, lvalueNode, ), {, FunctionType, functionType, =, null, ;, if, (]
[@, Nullable, JSDocInfo, info, ,, @, Nullable, Node, lvalueNode, ), {, FunctionType, functionType, =, null, ;, if, (, rValue, !=]
[JSDocInfo, info, ,, @, Nullable, Node, lvalueNode, ), {, FunctionType, functionType, =, null, ;, if, (, rValue, !=, null, &&]
[JSDocInfo, info, ,, @, Nullable, Node, lvalueNode, ), {, FunctionType, functionType, =, null, ;, if, (, rValue, !=, null, &&]
[lvalueNode, ), {, FunctionType, functionType, =, null, ;, if, (, rValue, !=, null, &&, rValue, ., isQualifiedName, (, ), &&]
[lvalueNode, ), {, FunctionType, functionType, =, null, ;, if, (, rValue, !=, null, &&, rValue, ., isQualifiedName, (, ), &&]
[rValue, !=, null, &&, rValue, ., isQualifiedName, (, ), &&, scope, ., isGlobal, (, ), ), {, Var, var, =]
[rValue, !=, null, &&, rValue, ., isQualifiedName, (, ), &&, scope, ., isGlobal, (, ), ), {, Var, var, =]
[rValue, ., isQualifiedName, (, ), &&, scope, ., isGlobal, (, ), ), {, Var, var, =, scope, ., getVar, (]
[rValue, ., isQualifiedName, (, ), &&, scope, ., isGlobal, (, ), ), {, Var, var, =, scope, ., getVar, (]
[(, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (]
[(, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (]
[(, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (]
[(, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (]
[), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=]
[Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&]
[Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&]
[Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&]
[(, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&, var, ., getType, (, ), !=]
[., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&, var, ., getType, (, ), !=, null, &&]
[., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&, var, ., getType, (, ), !=, null, &&]
[., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&, var, ., getType, (, ), !=, null, &&]
[getType, (, ), !=, null, &&, var, ., getType, (, ), ., isFunctionType, (, ), ), {, FunctionType, aliasedType, =]
[getType, (, ), !=, null, &&, var, ., getType, (, ), ., isFunctionType, (, ), ), {, FunctionType, aliasedType, =]
[getType, (, ), !=, null, &&, var, ., getType, (, ), ., isFunctionType, (, ), ), {, FunctionType, aliasedType, =]
[isFunctionType, (, ), ), {, FunctionType, aliasedType, =, var, ., getType, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[isFunctionType, (, ), ), {, FunctionType, aliasedType, =, var, ., getType, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[(, ), ), {, FunctionType, aliasedType, =, var, ., getType, (, ), ., toMaybeFunctionType, (, ), ;, if, (, (]
[(, ), ), {, FunctionType, aliasedType, =, var, ., getType, (, ), ., toMaybeFunctionType, (, ), ;, if, (, (]
[(, ), ), {, FunctionType, aliasedType, =, var, ., getType, (, ), ., toMaybeFunctionType, (, ), ;, if, (, (]
[=, var, ., getType, (, ), ., toMaybeFunctionType, (, ), ;, if, (, (, aliasedType, ., isConstructor, (, ), ||]
[=, var, ., getType, (, ), ., toMaybeFunctionType, (, ), ;, if, (, (, aliasedType, ., isConstructor, (, ), ||]
[toMaybeFunctionType, (, ), ;, if, (, (, aliasedType, ., isConstructor, (, ), ||, aliasedType, ., isInterface, (, ), ), &&]
[(, ), ;, if, (, (, aliasedType, ., isConstructor, (, ), ||, aliasedType, ., isInterface, (, ), ), &&, !]
[(, ), ;, if, (, (, aliasedType, ., isConstructor, (, ), ||, aliasedType, ., isInterface, (, ), ), &&, !]
[., isConstructor, (, ), ||, aliasedType, ., isInterface, (, ), ), &&, !, aliasedType, ., isNativeObjectType, (, ), ), {]
[(, ), ||, aliasedType, ., isInterface, (, ), ), &&, !, aliasedType, ., isNativeObjectType, (, ), ), {, functionType, =]
[., isInterface, (, ), ), &&, !, aliasedType, ., isNativeObjectType, (, ), ), {, functionType, =, aliasedType, ;, if, (]
[., isInterface, (, ), ), &&, !, aliasedType, ., isNativeObjectType, (, ), ), {, functionType, =, aliasedType, ;, if, (]
[., isInterface, (, ), ), &&, !, aliasedType, ., isNativeObjectType, (, ), ), {, functionType, =, aliasedType, ;, if, (]
[(, ), ), &&, !, aliasedType, ., isNativeObjectType, (, ), ), {, functionType, =, aliasedType, ;, if, (, name, !=]
[), &&, !, aliasedType, ., isNativeObjectType, (, ), ), {, functionType, =, aliasedType, ;, if, (, name, !=, null, &&]
[), &&, !, aliasedType, ., isNativeObjectType, (, ), ), {, functionType, =, aliasedType, ;, if, (, name, !=, null, &&]
[), ), {, functionType, =, aliasedType, ;, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {]
[), ), {, functionType, =, aliasedType, ;, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {]
[=, aliasedType, ;, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (]
[;, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,]
[;, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,]
[{, typeRegistry, ., declareType, (, name, ,, functionType, ., getInstanceType, (, ), ), ;, }, }, }, }, if, (]
[{, typeRegistry, ., declareType, (, name, ,, functionType, ., getInstanceType, (, ), ), ;, }, }, }, }, if, (]
[., declareType, (, name, ,, functionType, ., getInstanceType, (, ), ), ;, }, }, }, }, if, (, functionType, ==]
[., getInstanceType, (, ), ), ;, }, }, }, }, if, (, functionType, ==, null, ), {, Node, errorRoot, =]
[., getInstanceType, (, ), ), ;, }, }, }, }, if, (, functionType, ==, null, ), {, Node, errorRoot, =]
[., getInstanceType, (, ), ), ;, }, }, }, }, if, (, functionType, ==, null, ), {, Node, errorRoot, =]
[(, ), ), ;, }, }, }, }, if, (, functionType, ==, null, ), {, Node, errorRoot, =, rValue, ==]
[), ;, }, }, }, }, if, (, functionType, ==, null, ), {, Node, errorRoot, =, rValue, ==, null, ?]
[}, }, }, }, if, (, functionType, ==, null, ), {, Node, errorRoot, =, rValue, ==, null, ?, lvalueNode, :]
[(, functionType, ==, null, ), {, Node, errorRoot, =, rValue, ==, null, ?, lvalueNode, :, rValue, ;, boolean, isFnLiteral, =]
[(, functionType, ==, null, ), {, Node, errorRoot, =, rValue, ==, null, ?, lvalueNode, :, rValue, ;, boolean, isFnLiteral, =]
[(, functionType, ==, null, ), {, Node, errorRoot, =, rValue, ==, null, ?, lvalueNode, :, rValue, ;, boolean, isFnLiteral, =]
[==, null, ), {, Node, errorRoot, =, rValue, ==, null, ?, lvalueNode, :, rValue, ;, boolean, isFnLiteral, =, rValue, !=]
[), {, Node, errorRoot, =, rValue, ==, null, ?, lvalueNode, :, rValue, ;, boolean, isFnLiteral, =, rValue, !=, null, &&]
[), {, Node, errorRoot, =, rValue, ==, null, ?, lvalueNode, :, rValue, ;, boolean, isFnLiteral, =, rValue, !=, null, &&]
[lvalueNode, :, rValue, ;, boolean, isFnLiteral, =, rValue, !=, null, &&, rValue, ., isFunction, (, ), ;, Node, fnRoot, =]
[lvalueNode, :, rValue, ;, boolean, isFnLiteral, =, rValue, !=, null, &&, rValue, ., isFunction, (, ), ;, Node, fnRoot, =]
[rValue, ;, boolean, isFnLiteral, =, rValue, !=, null, &&, rValue, ., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral, ?]
[boolean, isFnLiteral, =, rValue, !=, null, &&, rValue, ., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral, ?, rValue, :]
[null, &&, rValue, ., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral, ?, rValue, :, null, ;, Node, parametersNode, =]
[null, &&, rValue, ., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral, ?, rValue, :, null, ;, Node, parametersNode, =]
[rValue, ., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral, ?, rValue, :, null, ;, Node, parametersNode, =, isFnLiteral, ?]
[rValue, ., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral, ?, rValue, :, null, ;, Node, parametersNode, =, isFnLiteral, ?]
[rValue, ., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral, ?, rValue, :, null, ;, Node, parametersNode, =, isFnLiteral, ?]
[?, rValue, :, null, ;, Node, parametersNode, =, isFnLiteral, ?, rValue, ., getFirstChild, (, ), ., getNext, (, ), :]
[Node, parametersNode, =, isFnLiteral, ?, rValue, ., getFirstChild, (, ), ., getNext, (, ), :, null, ;, Node, fnBlock, =]
[Node, parametersNode, =, isFnLiteral, ?, rValue, ., getFirstChild, (, ), ., getNext, (, ), :, null, ;, Node, fnBlock, =]
[=, isFnLiteral, ?, rValue, ., getFirstChild, (, ), ., getNext, (, ), :, null, ;, Node, fnBlock, =, isFnLiteral, ?]
[=, isFnLiteral, ?, rValue, ., getFirstChild, (, ), ., getNext, (, ), :, null, ;, Node, fnBlock, =, isFnLiteral, ?]
[(, ), ., getNext, (, ), :, null, ;, Node, fnBlock, =, isFnLiteral, ?, parametersNode, ., getNext, (, ), :]
[(, ), :, null, ;, Node, fnBlock, =, isFnLiteral, ?, parametersNode, ., getNext, (, ), :, null, ;, if, (]
[(, ), :, null, ;, Node, fnBlock, =, isFnLiteral, ?, parametersNode, ., getNext, (, ), :, null, ;, if, (]
[(, ), :, null, ;, Node, fnBlock, =, isFnLiteral, ?, parametersNode, ., getNext, (, ), :, null, ;, if, (]
[:, null, ;, Node, fnBlock, =, isFnLiteral, ?, parametersNode, ., getNext, (, ), :, null, ;, if, (, info, !=]
[;, Node, fnBlock, =, isFnLiteral, ?, parametersNode, ., getNext, (, ), :, null, ;, if, (, info, !=, null, &&]
[;, Node, fnBlock, =, isFnLiteral, ?, parametersNode, ., getNext, (, ), :, null, ;, if, (, info, !=, null, &&]
[), :, null, ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, JSType, type, =]
[), :, null, ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, JSType, type, =]
[), :, null, ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, JSType, type, =]
[null, &&, info, ., hasType, (, ), ), {, JSType, type, =, info, ., getType, (, ), ., evaluate, (]
[info, ., hasType, (, ), ), {, JSType, type, =, info, ., getType, (, ), ., evaluate, (, scope, ,]
[(, ), ), {, JSType, type, =, info, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;]
[), {, JSType, type, =, info, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, type, =]
[), {, JSType, type, =, info, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, type, =]
[(, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[(, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[typeRegistry, ), ;, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isFunctionType, (, ), ), {]
[;, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isFunctionType, (, ), ), {, functionType, =]
[;, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isFunctionType, (, ), ), {, functionType, =]
[(, ), ;, if, (, type, ., isFunctionType, (, ), ), {, functionType, =, type, ., toMaybeFunctionType, (, ), ;]
[(, ), ;, if, (, type, ., isFunctionType, (, ), ), {, functionType, =, type, ., toMaybeFunctionType, (, ), ;]
[(, type, ., isFunctionType, (, ), ), {, functionType, =, type, ., toMaybeFunctionType, (, ), ;, functionType, ., setJSDocInfo, (]
[{, functionType, =, type, ., toMaybeFunctionType, (, ), ;, functionType, ., setJSDocInfo, (, info, ), ;, }, }, if, (]
[{, functionType, =, type, ., toMaybeFunctionType, (, ), ;, functionType, ., setJSDocInfo, (, info, ), ;, }, }, if, (]
[=, type, ., toMaybeFunctionType, (, ), ;, functionType, ., setJSDocInfo, (, info, ), ;, }, }, if, (, functionType, ==]
[;, functionType, ., setJSDocInfo, (, info, ), ;, }, }, if, (, functionType, ==, null, ), {, Node, ownerNode, =]
[;, functionType, ., setJSDocInfo, (, info, ), ;, }, }, if, (, functionType, ==, null, ), {, Node, ownerNode, =]
[(, info, ), ;, }, }, if, (, functionType, ==, null, ), {, Node, ownerNode, =, NodeUtil, ., getBestLValueOwner, (]
[if, (, functionType, ==, null, ), {, Node, ownerNode, =, NodeUtil, ., getBestLValueOwner, (, lvalueNode, ), ;, String, ownerName, =]
[if, (, functionType, ==, null, ), {, Node, ownerNode, =, NodeUtil, ., getBestLValueOwner, (, lvalueNode, ), ;, String, ownerName, =]
[null, ), {, Node, ownerNode, =, NodeUtil, ., getBestLValueOwner, (, lvalueNode, ), ;, String, ownerName, =, NodeUtil, ., getBestLValueName, (]
[NodeUtil, ., getBestLValueOwner, (, lvalueNode, ), ;, String, ownerName, =, NodeUtil, ., getBestLValueName, (, ownerNode, ), ;, Var, ownerVar, =]
[), ;, String, ownerName, =, NodeUtil, ., getBestLValueName, (, ownerNode, ), ;, Var, ownerVar, =, null, ;, String, propName, =]
[NodeUtil, ., getBestLValueName, (, ownerNode, ), ;, Var, ownerVar, =, null, ;, String, propName, =, null, ;, ObjectType, ownerType, =]
[ownerNode, ), ;, Var, ownerVar, =, null, ;, String, propName, =, null, ;, ObjectType, ownerType, =, null, ;, if, (]
[ownerNode, ), ;, Var, ownerVar, =, null, ;, String, propName, =, null, ;, ObjectType, ownerType, =, null, ;, if, (]
[;, Var, ownerVar, =, null, ;, String, propName, =, null, ;, ObjectType, ownerType, =, null, ;, if, (, ownerName, !=]
[=, null, ;, String, propName, =, null, ;, ObjectType, ownerType, =, null, ;, if, (, ownerName, !=, null, ), {]
[;, String, propName, =, null, ;, ObjectType, ownerType, =, null, ;, if, (, ownerName, !=, null, ), {, ownerVar, =]
[;, String, propName, =, null, ;, ObjectType, ownerType, =, null, ;, if, (, ownerName, !=, null, ), {, ownerVar, =]
[null, ;, ObjectType, ownerType, =, null, ;, if, (, ownerName, !=, null, ), {, ownerVar, =, scope, ., getVar, (]
[null, ;, if, (, ownerName, !=, null, ), {, ownerVar, =, scope, ., getVar, (, ownerName, ), ;, if, (]
[null, ;, if, (, ownerName, !=, null, ), {, ownerVar, =, scope, ., getVar, (, ownerName, ), ;, if, (]
[if, (, ownerName, !=, null, ), {, ownerVar, =, scope, ., getVar, (, ownerName, ), ;, if, (, ownerVar, !=]
[!=, null, ), {, ownerVar, =, scope, ., getVar, (, ownerName, ), ;, if, (, ownerVar, !=, null, ), {]
[), {, ownerVar, =, scope, ., getVar, (, ownerName, ), ;, if, (, ownerVar, !=, null, ), {, ownerType, =]
[), {, ownerVar, =, scope, ., getVar, (, ownerName, ), ;, if, (, ownerVar, !=, null, ), {, ownerType, =]
[scope, ., getVar, (, ownerName, ), ;, if, (, ownerVar, !=, null, ), {, ownerType, =, ObjectType, ., cast, (]
[scope, ., getVar, (, ownerName, ), ;, if, (, ownerVar, !=, null, ), {, ownerType, =, ObjectType, ., cast, (]
[!=, null, ), {, ownerType, =, ObjectType, ., cast, (, ownerVar, ., getType, (, ), ), ;, }, if, (]
[!=, null, ), {, ownerType, =, ObjectType, ., cast, (, ownerVar, ., getType, (, ), ), ;, }, if, (]
[), {, ownerType, =, ObjectType, ., cast, (, ownerVar, ., getType, (, ), ), ;, }, if, (, name, !=]
[=, ObjectType, ., cast, (, ownerVar, ., getType, (, ), ), ;, }, if, (, name, !=, null, ), {]
[., cast, (, ownerVar, ., getType, (, ), ), ;, }, if, (, name, !=, null, ), {, propName, =]
[., cast, (, ownerVar, ., getType, (, ), ), ;, }, if, (, name, !=, null, ), {, propName, =]
[., getType, (, ), ), ;, }, if, (, name, !=, null, ), {, propName, =, name, ., substring, (]
[., getType, (, ), ), ;, }, if, (, name, !=, null, ), {, propName, =, name, ., substring, (]
[., getType, (, ), ), ;, }, if, (, name, !=, null, ), {, propName, =, name, ., substring, (]
[}, if, (, name, !=, null, ), {, propName, =, name, ., substring, (, ownerName, ., length, (, ), +]
[propName, =, name, ., substring, (, ownerName, ., length, (, ), +, 1, ), ;, }, }, FunctionType, overriddenType, =]
[substring, (, ownerName, ., length, (, ), +, 1, ), ;, }, }, FunctionType, overriddenType, =, null, ;, if, (]
[substring, (, ownerName, ., length, (, ), +, 1, ), ;, }, }, FunctionType, overriddenType, =, null, ;, if, (]
[substring, (, ownerName, ., length, (, ), +, 1, ), ;, }, }, FunctionType, overriddenType, =, null, ;, if, (]
[ownerName, ., length, (, ), +, 1, ), ;, }, }, FunctionType, overriddenType, =, null, ;, if, (, ownerType, !=]
[length, (, ), +, 1, ), ;, }, }, FunctionType, overriddenType, =, null, ;, if, (, ownerType, !=, null, &&]
[length, (, ), +, 1, ), ;, }, }, FunctionType, overriddenType, =, null, ;, if, (, ownerType, !=, null, &&]
[), +, 1, ), ;, }, }, FunctionType, overriddenType, =, null, ;, if, (, ownerType, !=, null, &&, propName, !=]
[), ;, }, }, FunctionType, overriddenType, =, null, ;, if, (, ownerType, !=, null, &&, propName, !=, null, ), {]
[}, }, FunctionType, overriddenType, =, null, ;, if, (, ownerType, !=, null, &&, propName, !=, null, ), {, overriddenType, =]
[FunctionType, overriddenType, =, null, ;, if, (, ownerType, !=, null, &&, propName, !=, null, ), {, overriddenType, =, findOverriddenFunction, (]
[=, null, ;, if, (, ownerType, !=, null, &&, propName, !=, null, ), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,]
[null, &&, propName, !=, null, ), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =]
[null, &&, propName, !=, null, ), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =]
[null, &&, propName, !=, null, ), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =]
[null, &&, propName, !=, null, ), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =]
[null, &&, propName, !=, null, ), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =]
[null, &&, propName, !=, null, ), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =]
[!=, null, ), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (]
[), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (, name, ,]
[overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (, name, ,, compiler, ,]
[findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot, ,]
[ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot, ,, sourceName, ,]
[}, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot, ,, sourceName, ,, scope, ), ., setContents, (]
[builder, =, new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot, ,, sourceName, ,, scope, ), ., setContents, (, getFunctionAnalysisResults, (]
[,, compiler, ,, errorRoot, ,, sourceName, ,, scope, ), ., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (]
[,, errorRoot, ,, sourceName, ,, scope, ), ., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (, overriddenType, ,]
[scope, ), ., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, ), ., inferTemplateTypeName, (]
[getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, ), ., inferTemplateTypeName, (, info, ), ., inferReturnType, (]
[., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, ), ., inferTemplateTypeName, (, info, ), ., inferReturnType, (, info, ), ., inferInheritance, (]
[), ., inferTemplateTypeName, (, info, ), ., inferReturnType, (, info, ), ., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =]
[info, ), ., inferReturnType, (, info, ), ., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =, false, ;, if, (]
[info, ), ., inferReturnType, (, info, ), ., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =, false, ;, if, (]
[info, ), ., inferReturnType, (, info, ), ., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =, false, ;, if, (]
[info, ), ., inferReturnType, (, info, ), ., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =, false, ;, if, (]
[., inferReturnType, (, info, ), ., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =, false, ;, if, (, ownerType, !=]
[(, info, ), ., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =, false, ;, if, (, ownerType, !=, null, &&]
[(, info, ), ., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =, false, ;, if, (, ownerType, !=, null, &&]
[info, ), ;, boolean, searchedForThisType, =, false, ;, if, (, ownerType, !=, null, &&, ownerType, ., isFunctionPrototypeType, (, ), &&]
[info, ), ;, boolean, searchedForThisType, =, false, ;, if, (, ownerType, !=, null, &&, ownerType, ., isFunctionPrototypeType, (, ), &&]
[info, ), ;, boolean, searchedForThisType, =, false, ;, if, (, ownerType, !=, null, &&, ownerType, ., isFunctionPrototypeType, (, ), &&]
[!=, null, &&, ownerType, ., isFunctionPrototypeType, (, ), &&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, ), ), {]
[!=, null, &&, ownerType, ., isFunctionPrototypeType, (, ), &&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, ), ), {]
[., isFunctionPrototypeType, (, ), &&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, ), ), {, builder, ., inferThisType, (]
[(, ), &&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, ), ), {, builder, ., inferThisType, (, info, ,]
[(, ), &&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, ), ), {, builder, ., inferThisType, (, info, ,]
[(, ), &&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, ), ), {, builder, ., inferThisType, (, info, ,]
[), ), {, builder, ., inferThisType, (, info, ,, ownerType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ), ;]
[{, builder, ., inferThisType, (, info, ,, ownerType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ), ;, searchedForThisType, =]
[,, ownerType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ), ;, searchedForThisType, =, true, ;, }, else, if, (]
[,, ownerType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ), ;, searchedForThisType, =, true, ;, }, else, if, (]
[,, ownerType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ), ;, searchedForThisType, =, true, ;, }, else, if, (]
[., getOwnerFunction, (, ), ., getInstanceType, (, ), ), ;, searchedForThisType, =, true, ;, }, else, if, (, ownerNode, !=]
[(, ), ., getInstanceType, (, ), ), ;, searchedForThisType, =, true, ;, }, else, if, (, ownerNode, !=, null, &&]
[(, ), ., getInstanceType, (, ), ), ;, searchedForThisType, =, true, ;, }, else, if, (, ownerNode, !=, null, &&]
[true, ;, }, else, if, (, ownerNode, !=, null, &&, ownerNode, ., isThis, (, ), ), {, JSType, injectedThisType, =]
[true, ;, }, else, if, (, ownerNode, !=, null, &&, ownerNode, ., isThis, (, ), ), {, JSType, injectedThisType, =]
[ownerNode, !=, null, &&, ownerNode, ., isThis, (, ), ), {, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;]
[ownerNode, !=, null, &&, ownerNode, ., isThis, (, ), ), {, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;]
[ownerNode, ., isThis, (, ), ), {, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;, builder, ., inferThisType, (]
[isThis, (, ), ), {, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;, builder, ., inferThisType, (, info, ,]
[isThis, (, ), ), {, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;, builder, ., inferThisType, (, info, ,]
[isThis, (, ), ), {, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;, builder, ., inferThisType, (, info, ,]
[), ), {, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;, builder, ., inferThisType, (, info, ,, injectedThisType, ==]
[{, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;, builder, ., inferThisType, (, info, ,, injectedThisType, ==, null, ?]
[{, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;, builder, ., inferThisType, (, info, ,, injectedThisType, ==, null, ?]
[getJSType, (, ), ;, builder, ., inferThisType, (, info, ,, injectedThisType, ==, null, ?, scope, ., getTypeOfThis, (, ), :]
[;, builder, ., inferThisType, (, info, ,, injectedThisType, ==, null, ?, scope, ., getTypeOfThis, (, ), :, injectedThisType, ), ;]
[., inferThisType, (, info, ,, injectedThisType, ==, null, ?, scope, ., getTypeOfThis, (, ), :, injectedThisType, ), ;, searchedForThisType, =]
[injectedThisType, ==, null, ?, scope, ., getTypeOfThis, (, ), :, injectedThisType, ), ;, searchedForThisType, =, true, ;, }, if, (]
[==, null, ?, scope, ., getTypeOfThis, (, ), :, injectedThisType, ), ;, searchedForThisType, =, true, ;, }, if, (, !]
[scope, ., getTypeOfThis, (, ), :, injectedThisType, ), ;, searchedForThisType, =, true, ;, }, if, (, !, searchedForThisType, ), {]
[scope, ., getTypeOfThis, (, ), :, injectedThisType, ), ;, searchedForThisType, =, true, ;, }, if, (, !, searchedForThisType, ), {]
[), :, injectedThisType, ), ;, searchedForThisType, =, true, ;, }, if, (, !, searchedForThisType, ), {, builder, ., inferThisType, (]
[;, searchedForThisType, =, true, ;, }, if, (, !, searchedForThisType, ), {, builder, ., inferThisType, (, info, ), ;, }]
[=, true, ;, }, if, (, !, searchedForThisType, ), {, builder, ., inferThisType, (, info, ), ;, }, functionType, =]
[=, true, ;, }, if, (, !, searchedForThisType, ), {, builder, ., inferThisType, (, info, ), ;, }, functionType, =]
[=, true, ;, }, if, (, !, searchedForThisType, ), {, builder, ., inferThisType, (, info, ), ;, }, functionType, =]
[if, (, !, searchedForThisType, ), {, builder, ., inferThisType, (, info, ), ;, }, functionType, =, builder, ., inferParameterTypes, (]
[!, searchedForThisType, ), {, builder, ., inferThisType, (, info, ), ;, }, functionType, =, builder, ., inferParameterTypes, (, parametersNode, ,]
[;, }, functionType, =, builder, ., inferParameterTypes, (, parametersNode, ,, info, ), ., buildAndRegister, (, ), ;, }, }, return]
[}, }, return, functionType, ;, }, private, FunctionType, findOverriddenFunction, (, ObjectType, ownerType, ,, String, propName, ), {, JSType, propType, =]
[}, }, return, functionType, ;, }, private, FunctionType, findOverriddenFunction, (, ObjectType, ownerType, ,, String, propName, ), {, JSType, propType, =]
[;, }, private, FunctionType, findOverriddenFunction, (, ObjectType, ownerType, ,, String, propName, ), {, JSType, propType, =, ownerType, ., getPropertyType, (]
[(, ObjectType, ownerType, ,, String, propName, ), {, JSType, propType, =, ownerType, ., getPropertyType, (, propName, ), ;, if, (]
[(, ObjectType, ownerType, ,, String, propName, ), {, JSType, propType, =, ownerType, ., getPropertyType, (, propName, ), ;, if, (]
[(, ObjectType, ownerType, ,, String, propName, ), {, JSType, propType, =, ownerType, ., getPropertyType, (, propName, ), ;, if, (]
[ownerType, ,, String, propName, ), {, JSType, propType, =, ownerType, ., getPropertyType, (, propName, ), ;, if, (, propType, !=]
[String, propName, ), {, JSType, propType, =, ownerType, ., getPropertyType, (, propName, ), ;, if, (, propType, !=, null, &&]
[String, propName, ), {, JSType, propType, =, ownerType, ., getPropertyType, (, propName, ), ;, if, (, propType, !=, null, &&]
[., getPropertyType, (, propName, ), ;, if, (, propType, !=, null, &&, propType, ., isFunctionType, (, ), ), {, return]
[., getPropertyType, (, propName, ), ;, if, (, propType, !=, null, &&, propType, ., isFunctionType, (, ), ), {, return]
[isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, else, {, for, (, ObjectType, iface, :]
[isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, else, {, for, (, ObjectType, iface, :]
[., toMaybeFunctionType, (, ), ;, }, else, {, for, (, ObjectType, iface, :, ownerType, ., getCtorImplementedInterfaces, (, ), ), {]
[(, ), ;, }, else, {, for, (, ObjectType, iface, :, ownerType, ., getCtorImplementedInterfaces, (, ), ), {, propType, =]
[(, ), ;, }, else, {, for, (, ObjectType, iface, :, ownerType, ., getCtorImplementedInterfaces, (, ), ), {, propType, =]
[else, {, for, (, ObjectType, iface, :, ownerType, ., getCtorImplementedInterfaces, (, ), ), {, propType, =, iface, ., getPropertyType, (]
[iface, :, ownerType, ., getCtorImplementedInterfaces, (, ), ), {, propType, =, iface, ., getPropertyType, (, propName, ), ;, if, (]
[iface, :, ownerType, ., getCtorImplementedInterfaces, (, ), ), {, propType, =, iface, ., getPropertyType, (, propName, ), ;, if, (]
[iface, :, ownerType, ., getCtorImplementedInterfaces, (, ), ), {, propType, =, iface, ., getPropertyType, (, propName, ), ;, if, (]
[ownerType, ., getCtorImplementedInterfaces, (, ), ), {, propType, =, iface, ., getPropertyType, (, propName, ), ;, if, (, propType, !=]
[getCtorImplementedInterfaces, (, ), ), {, propType, =, iface, ., getPropertyType, (, propName, ), ;, if, (, propType, !=, null, &&]
[getCtorImplementedInterfaces, (, ), ), {, propType, =, iface, ., getPropertyType, (, propName, ), ;, if, (, propType, !=, null, &&]
[., getPropertyType, (, propName, ), ;, if, (, propType, !=, null, &&, propType, ., isFunctionType, (, ), ), {, return]
[., getPropertyType, (, propName, ), ;, if, (, propType, !=, null, &&, propType, ., isFunctionType, (, ), ), {, return]
[null, &&, propType, ., isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, }, }, return]
[null, ;, }, private, EnumType, createEnumTypeFromNodes, (, Node, rValue, ,, String, name, ,, JSDocInfo, info, ,, Node, lValueNode, ), {]
[null, ;, }, private, EnumType, createEnumTypeFromNodes, (, Node, rValue, ,, String, name, ,, JSDocInfo, info, ,, Node, lValueNode, ), {]
[EnumType, createEnumTypeFromNodes, (, Node, rValue, ,, String, name, ,, JSDocInfo, info, ,, Node, lValueNode, ), {, Preconditions, ., checkNotNull, (]
[Node, rValue, ,, String, name, ,, JSDocInfo, info, ,, Node, lValueNode, ), {, Preconditions, ., checkNotNull, (, info, ), ;]
[Node, rValue, ,, String, name, ,, JSDocInfo, info, ,, Node, lValueNode, ), {, Preconditions, ., checkNotNull, (, info, ), ;]
[name, ,, JSDocInfo, info, ,, Node, lValueNode, ), {, Preconditions, ., checkNotNull, (, info, ), ;, Preconditions, ., checkState, (]
[name, ,, JSDocInfo, info, ,, Node, lValueNode, ), {, Preconditions, ., checkNotNull, (, info, ), ;, Preconditions, ., checkState, (]
[., checkNotNull, (, info, ), ;, Preconditions, ., checkState, (, info, ., hasEnumParameterType, (, ), ), ;, EnumType, enumType, =]
[), ;, Preconditions, ., checkState, (, info, ., hasEnumParameterType, (, ), ), ;, EnumType, enumType, =, null, ;, if, (]
[), ;, Preconditions, ., checkState, (, info, ., hasEnumParameterType, (, ), ), ;, EnumType, enumType, =, null, ;, if, (]
[), ;, Preconditions, ., checkState, (, info, ., hasEnumParameterType, (, ), ), ;, EnumType, enumType, =, null, ;, if, (]
[Preconditions, ., checkState, (, info, ., hasEnumParameterType, (, ), ), ;, EnumType, enumType, =, null, ;, if, (, rValue, !=]
[checkState, (, info, ., hasEnumParameterType, (, ), ), ;, EnumType, enumType, =, null, ;, if, (, rValue, !=, null, &&]
[checkState, (, info, ., hasEnumParameterType, (, ), ), ;, EnumType, enumType, =, null, ;, if, (, rValue, !=, null, &&]
[enumType, =, null, ;, if, (, rValue, !=, null, &&, rValue, ., isQualifiedName, (, ), ), {, Var, var, =]
[enumType, =, null, ;, if, (, rValue, !=, null, &&, rValue, ., isQualifiedName, (, ), ), {, Var, var, =]
[if, (, rValue, !=, null, &&, rValue, ., isQualifiedName, (, ), ), {, Var, var, =, scope, ., getVar, (]
[if, (, rValue, !=, null, &&, rValue, ., isQualifiedName, (, ), ), {, Var, var, =, scope, ., getVar, (]
[(, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (]
[(, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (]
[(, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (]
[), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=]
[Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&]
[Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&]
[Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&]
[getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&, var, ., getType, (, ), instanceof, EnumType, ), {]
[), ), ;, if, (, var, !=, null, &&, var, ., getType, (, ), instanceof, EnumType, ), {, enumType, =]
[if, (, var, !=, null, &&, var, ., getType, (, ), instanceof, EnumType, ), {, enumType, =, (, EnumType, )]
[if, (, var, !=, null, &&, var, ., getType, (, ), instanceof, EnumType, ), {, enumType, =, (, EnumType, )]
[), instanceof, EnumType, ), {, enumType, =, (, EnumType, ), var, ., getType, (, ), ;, }, }, if, (]
[), instanceof, EnumType, ), {, enumType, =, (, EnumType, ), var, ., getType, (, ), ;, }, }, if, (]
[EnumType, ), {, enumType, =, (, EnumType, ), var, ., getType, (, ), ;, }, }, if, (, enumType, ==]
[EnumType, ), var, ., getType, (, ), ;, }, }, if, (, enumType, ==, null, ), {, JSType, elementsType, =]
[EnumType, ), var, ., getType, (, ), ;, }, }, if, (, enumType, ==, null, ), {, JSType, elementsType, =]
[EnumType, ), var, ., getType, (, ), ;, }, }, if, (, enumType, ==, null, ), {, JSType, elementsType, =]
[}, }, if, (, enumType, ==, null, ), {, JSType, elementsType, =, info, ., getEnumParameterType, (, ), ., evaluate, (]
[if, (, enumType, ==, null, ), {, JSType, elementsType, =, info, ., getEnumParameterType, (, ), ., evaluate, (, scope, ,]
[==, null, ), {, JSType, elementsType, =, info, ., getEnumParameterType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;]
[), {, JSType, elementsType, =, info, ., getEnumParameterType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, enumType, =]
[), {, JSType, elementsType, =, info, ., getEnumParameterType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, enumType, =]
[=, info, ., getEnumParameterType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, enumType, =, typeRegistry, ., createEnumType, (]
[., getEnumParameterType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, enumType, =, typeRegistry, ., createEnumType, (, name, ,]
[(, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, enumType, =, typeRegistry, ., createEnumType, (, name, ,, rValue, ,]
[scope, ,, typeRegistry, ), ;, enumType, =, typeRegistry, ., createEnumType, (, name, ,, rValue, ,, elementsType, ), ;, if, (]
[scope, ,, typeRegistry, ), ;, enumType, =, typeRegistry, ., createEnumType, (, name, ,, rValue, ,, elementsType, ), ;, if, (]
[scope, ,, typeRegistry, ), ;, enumType, =, typeRegistry, ., createEnumType, (, name, ,, rValue, ,, elementsType, ), ;, if, (]
[typeRegistry, ), ;, enumType, =, typeRegistry, ., createEnumType, (, name, ,, rValue, ,, elementsType, ), ;, if, (, rValue, !=]
[;, enumType, =, typeRegistry, ., createEnumType, (, name, ,, rValue, ,, elementsType, ), ;, if, (, rValue, !=, null, &&]
[;, enumType, =, typeRegistry, ., createEnumType, (, name, ,, rValue, ,, elementsType, ), ;, if, (, rValue, !=, null, &&]
[,, elementsType, ), ;, if, (, rValue, !=, null, &&, rValue, ., isObjectLit, (, ), ), {, Node, key, =]
[,, elementsType, ), ;, if, (, rValue, !=, null, &&, rValue, ., isObjectLit, (, ), ), {, Node, key, =]
[null, &&, rValue, ., isObjectLit, (, ), ), {, Node, key, =, rValue, ., getFirstChild, (, ), ;, while, (]
[null, &&, rValue, ., isObjectLit, (, ), ), {, Node, key, =, rValue, ., getFirstChild, (, ), ;, while, (]
[rValue, ., isObjectLit, (, ), ), {, Node, key, =, rValue, ., getFirstChild, (, ), ;, while, (, key, !=]
[{, Node, key, =, rValue, ., getFirstChild, (, ), ;, while, (, key, !=, null, ), {, String, keyName, =]
[{, Node, key, =, rValue, ., getFirstChild, (, ), ;, while, (, key, !=, null, ), {, String, keyName, =]
[rValue, ., getFirstChild, (, ), ;, while, (, key, !=, null, ), {, String, keyName, =, NodeUtil, ., getStringValue, (]
[;, while, (, key, !=, null, ), {, String, keyName, =, NodeUtil, ., getStringValue, (, key, ), ;, if, (]
[;, while, (, key, !=, null, ), {, String, keyName, =, NodeUtil, ., getStringValue, (, key, ), ;, if, (]
[(, key, !=, null, ), {, String, keyName, =, NodeUtil, ., getStringValue, (, key, ), ;, if, (, keyName, ==]
[null, ), {, String, keyName, =, NodeUtil, ., getStringValue, (, key, ), ;, if, (, keyName, ==, null, ), {]
[null, ), {, String, keyName, =, NodeUtil, ., getStringValue, (, key, ), ;, if, (, keyName, ==, null, ), {]
[keyName, =, NodeUtil, ., getStringValue, (, key, ), ;, if, (, keyName, ==, null, ), {, compiler, ., report, (]
[keyName, =, NodeUtil, ., getStringValue, (, key, ), ;, if, (, keyName, ==, null, ), {, compiler, ., report, (]
[getStringValue, (, key, ), ;, if, (, keyName, ==, null, ), {, compiler, ., report, (, JSError, ., make, (]
[key, ), ;, if, (, keyName, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,]
[;, if, (, keyName, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,]
[(, keyName, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,]
[report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, if, (]
[(, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, if, (, !]
[(, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, if, (, !]
[(, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, if, (, !, codingConvention, ., isValidEnumKey, (]
[,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, if, (, !, codingConvention, ., isValidEnumKey, (, keyName, ), ), {]
[,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, if, (, !, codingConvention, ., isValidEnumKey, (, keyName, ), ), {]
[), ), ;, }, else, if, (, !, codingConvention, ., isValidEnumKey, (, keyName, ), ), {, compiler, ., report, (]
[), ), ;, }, else, if, (, !, codingConvention, ., isValidEnumKey, (, keyName, ), ), {, compiler, ., report, (]
[else, if, (, !, codingConvention, ., isValidEnumKey, (, keyName, ), ), {, compiler, ., report, (, JSError, ., make, (]
[(, !, codingConvention, ., isValidEnumKey, (, keyName, ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,]
[codingConvention, ., isValidEnumKey, (, keyName, ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,]
[isValidEnumKey, (, keyName, ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,]
[., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, {]
[., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, {]
[., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, {, enumType, ., defineElement, (]
[(, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, {, enumType, ., defineElement, (, keyName, ,]
[,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, {, enumType, ., defineElement, (, keyName, ,, key, ), ;, }]
[,, keyName, ), ), ;, }, else, {, enumType, ., defineElement, (, keyName, ,, key, ), ;, }, key, =]
[,, keyName, ), ), ;, }, else, {, enumType, ., defineElement, (, keyName, ,, key, ), ;, }, key, =]
[(, keyName, ,, key, ), ;, }, key, =, key, ., getNext, (, ), ;, }, }, }, if, (]
[(, keyName, ,, key, ), ;, }, key, =, key, ., getNext, (, ), ;, }, }, }, if, (]
[(, keyName, ,, key, ), ;, }, key, =, key, ., getNext, (, ), ;, }, }, }, if, (]
[,, key, ), ;, }, key, =, key, ., getNext, (, ), ;, }, }, }, if, (, name, !=]
[), ;, }, key, =, key, ., getNext, (, ), ;, }, }, }, if, (, name, !=, null, &&]
[), ;, }, key, =, key, ., getNext, (, ), ;, }, }, }, if, (, name, !=, null, &&]
[getNext, (, ), ;, }, }, }, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {]
[getNext, (, ), ;, }, }, }, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {]
[}, }, }, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (]
[}, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,]
[}, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,]
[isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,, enumType, ., getElementsType, (, ), ), ;, }, return]
[;, }, return, enumType, ;, }, private, void, defineSlot, (, Node, name, ,, Node, parent, ,, JSType, type, ), {]
[return, enumType, ;, }, private, void, defineSlot, (, Node, name, ,, Node, parent, ,, JSType, type, ), {, defineSlot, (]
[;, }, private, void, defineSlot, (, Node, name, ,, Node, parent, ,, JSType, type, ), {, defineSlot, (, name, ,]
[private, void, defineSlot, (, Node, name, ,, Node, parent, ,, JSType, type, ), {, defineSlot, (, name, ,, parent, ,]
[defineSlot, (, Node, name, ,, Node, parent, ,, JSType, type, ), {, defineSlot, (, name, ,, parent, ,, type, ,]
[defineSlot, (, Node, name, ,, Node, parent, ,, JSType, type, ), {, defineSlot, (, name, ,, parent, ,, type, ,]
[Node, name, ,, Node, parent, ,, JSType, type, ), {, defineSlot, (, name, ,, parent, ,, type, ,, type, ==]
[null, ), ;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,, JSType, type, ,, boolean, inferred, ), {]
[null, ), ;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,, JSType, type, ,, boolean, inferred, ), {]
[void, defineSlot, (, Node, n, ,, Node, parent, ,, JSType, type, ,, boolean, inferred, ), {, Preconditions, ., checkArgument, (]
[void, defineSlot, (, Node, n, ,, Node, parent, ,, JSType, type, ,, boolean, inferred, ), {, Preconditions, ., checkArgument, (]
[(, Node, n, ,, Node, parent, ,, JSType, type, ,, boolean, inferred, ), {, Preconditions, ., checkArgument, (, inferred, ||]
[(, Node, n, ,, Node, parent, ,, JSType, type, ,, boolean, inferred, ), {, Preconditions, ., checkArgument, (, inferred, ||]
[n, ,, Node, parent, ,, JSType, type, ,, boolean, inferred, ), {, Preconditions, ., checkArgument, (, inferred, ||, type, !=]
[JSType, type, ,, boolean, inferred, ), {, Preconditions, ., checkArgument, (, inferred, ||, type, !=, null, ), ;, if, (]
[JSType, type, ,, boolean, inferred, ), {, Preconditions, ., checkArgument, (, inferred, ||, type, !=, null, ), ;, if, (]
[Preconditions, ., checkArgument, (, inferred, ||, type, !=, null, ), ;, if, (, n, ., isName, (, ), ), {]
[Preconditions, ., checkArgument, (, inferred, ||, type, !=, null, ), ;, if, (, n, ., isName, (, ), ), {]
[inferred, ||, type, !=, null, ), ;, if, (, n, ., isName, (, ), ), {, Preconditions, ., checkArgument, (]
[inferred, ||, type, !=, null, ), ;, if, (, n, ., isName, (, ), ), {, Preconditions, ., checkArgument, (]
[inferred, ||, type, !=, null, ), ;, if, (, n, ., isName, (, ), ), {, Preconditions, ., checkArgument, (]
[inferred, ||, type, !=, null, ), ;, if, (, n, ., isName, (, ), ), {, Preconditions, ., checkArgument, (]
[inferred, ||, type, !=, null, ), ;, if, (, n, ., isName, (, ), ), {, Preconditions, ., checkArgument, (]
[;, if, (, n, ., isName, (, ), ), {, Preconditions, ., checkArgument, (, parent, ., isFunction, (, ), ||]
[;, if, (, n, ., isName, (, ), ), {, Preconditions, ., checkArgument, (, parent, ., isFunction, (, ), ||]
[(, ), ), {, Preconditions, ., checkArgument, (, parent, ., isFunction, (, ), ||, parent, ., isVar, (, ), ||]
[(, ), ), {, Preconditions, ., checkArgument, (, parent, ., isFunction, (, ), ||, parent, ., isVar, (, ), ||]
[checkArgument, (, parent, ., isFunction, (, ), ||, parent, ., isVar, (, ), ||, parent, ., isParamList, (, ), ||]
[checkArgument, (, parent, ., isFunction, (, ), ||, parent, ., isVar, (, ), ||, parent, ., isParamList, (, ), ||]
[isVar, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), ;, }, else, {]
[isVar, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), ;, }, else, {]
[parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), ;, }, else, {, Preconditions, ., checkArgument, (]
[parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), ;, }, else, {, Preconditions, ., checkArgument, (]
[parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), ;, }, else, {, Preconditions, ., checkArgument, (]
[parent, ., isCatch, (, ), ), ;, }, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), &&]
[., isCatch, (, ), ), ;, }, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), &&, (]
[., isCatch, (, ), ), ;, }, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), &&, (]
[., isCatch, (, ), ), ;, }, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), &&, (]
[}, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), &&, (, parent, ., isAssign, (, ), ||]
[}, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), &&, (, parent, ., isAssign, (, ), ||]
[isGetProp, (, ), &&, (, parent, ., isAssign, (, ), ||, parent, ., isExprResult, (, ), ), ), ;, }]
[), &&, (, parent, ., isAssign, (, ), ||, parent, ., isExprResult, (, ), ), ), ;, }, defineSlot, (]
[(, parent, ., isAssign, (, ), ||, parent, ., isExprResult, (, ), ), ), ;, }, defineSlot, (, n, ,]
[., isAssign, (, ), ||, parent, ., isExprResult, (, ), ), ), ;, }, defineSlot, (, n, ,, parent, ,]
[., isAssign, (, ), ||, parent, ., isExprResult, (, ), ), ), ;, }, defineSlot, (, n, ,, parent, ,]
[., isExprResult, (, ), ), ), ;, }, defineSlot, (, n, ,, parent, ,, n, ., getQualifiedName, (, ), ,]
[(, ), ), ), ;, }, defineSlot, (, n, ,, parent, ,, n, ., getQualifiedName, (, ), ,, type, ,]
[}, void, defineSlot, (, Node, n, ,, Node, parent, ,, String, variableName, ,, JSType, type, ,, boolean, inferred, ), {]
[}, void, defineSlot, (, Node, n, ,, Node, parent, ,, String, variableName, ,, JSType, type, ,, boolean, inferred, ), {]
[Node, n, ,, Node, parent, ,, String, variableName, ,, JSType, type, ,, boolean, inferred, ), {, Preconditions, ., checkArgument, (]
[n, ,, Node, parent, ,, String, variableName, ,, JSType, type, ,, boolean, inferred, ), {, Preconditions, ., checkArgument, (, !]
[n, ,, Node, parent, ,, String, variableName, ,, JSType, type, ,, boolean, inferred, ), {, Preconditions, ., checkArgument, (, !]
[,, boolean, inferred, ), {, Preconditions, ., checkArgument, (, !, variableName, ., isEmpty, (, ), ), ;, boolean, isGlobalVar, =]
[,, boolean, inferred, ), {, Preconditions, ., checkArgument, (, !, variableName, ., isEmpty, (, ), ), ;, boolean, isGlobalVar, =]
[,, boolean, inferred, ), {, Preconditions, ., checkArgument, (, !, variableName, ., isEmpty, (, ), ), ;, boolean, isGlobalVar, =]
[., checkArgument, (, !, variableName, ., isEmpty, (, ), ), ;, boolean, isGlobalVar, =, n, ., isName, (, ), &&]
[., checkArgument, (, !, variableName, ., isEmpty, (, ), ), ;, boolean, isGlobalVar, =, n, ., isName, (, ), &&]
[), ;, boolean, isGlobalVar, =, n, ., isName, (, ), &&, scope, ., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =]
[), ;, boolean, isGlobalVar, =, n, ., isName, (, ), &&, scope, ., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =]
[boolean, isGlobalVar, =, n, ., isName, (, ), &&, scope, ., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =, isGlobalVar, &&]
[isGlobalVar, =, n, ., isName, (, ), &&, scope, ., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =, isGlobalVar, &&, (]
[isGlobalVar, =, n, ., isName, (, ), &&, scope, ., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =, isGlobalVar, &&, (]
[isGlobalVar, =, n, ., isName, (, ), &&, scope, ., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =, isGlobalVar, &&, (]
[), &&, scope, ., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =, isGlobalVar, &&, (, parent, ., isVar, (, ), ||]
[), &&, scope, ., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =, isGlobalVar, &&, (, parent, ., isVar, (, ), ||]
[=, isGlobalVar, &&, (, parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ), ;, Scope, scopeToDeclareIn, =]
[parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ), ;, Scope, scopeToDeclareIn, =, scope, ;, if, (]
[parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ), ;, Scope, scopeToDeclareIn, =, scope, ;, if, (]
[parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ), ;, Scope, scopeToDeclareIn, =, scope, ;, if, (]
[parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ), ;, Scope, scopeToDeclareIn, =, scope, ;, if, (]
[parent, ., isFunction, (, ), ), ;, Scope, scopeToDeclareIn, =, scope, ;, if, (, n, ., isGetProp, (, ), &&]
[., isFunction, (, ), ), ;, Scope, scopeToDeclareIn, =, scope, ;, if, (, n, ., isGetProp, (, ), &&, !]
[., isFunction, (, ), ), ;, Scope, scopeToDeclareIn, =, scope, ;, if, (, n, ., isGetProp, (, ), &&, !]
[Scope, scopeToDeclareIn, =, scope, ;, if, (, n, ., isGetProp, (, ), &&, !, scope, ., isGlobal, (, ), &&]
[=, scope, ;, if, (, n, ., isGetProp, (, ), &&, !, scope, ., isGlobal, (, ), &&, isQnameRootedInGlobalScope, (]
[isGetProp, (, ), &&, !, scope, ., isGlobal, (, ), &&, isQnameRootedInGlobalScope, (, n, ), ), {, Scope, globalScope, =]
[isGetProp, (, ), &&, !, scope, ., isGlobal, (, ), &&, isQnameRootedInGlobalScope, (, n, ), ), {, Scope, globalScope, =]
[(, ), &&, isQnameRootedInGlobalScope, (, n, ), ), {, Scope, globalScope, =, scope, ., getGlobalScope, (, ), ;, if, (]
[), &&, isQnameRootedInGlobalScope, (, n, ), ), {, Scope, globalScope, =, scope, ., getGlobalScope, (, ), ;, if, (, !]
[), &&, isQnameRootedInGlobalScope, (, n, ), ), {, Scope, globalScope, =, scope, ., getGlobalScope, (, ), ;, if, (, !]
[n, ), ), {, Scope, globalScope, =, scope, ., getGlobalScope, (, ), ;, if, (, !, globalScope, ., isDeclared, (]
[), {, Scope, globalScope, =, scope, ., getGlobalScope, (, ), ;, if, (, !, globalScope, ., isDeclared, (, variableName, ,]
[=, scope, ., getGlobalScope, (, ), ;, if, (, !, globalScope, ., isDeclared, (, variableName, ,, false, ), ), {]
[., getGlobalScope, (, ), ;, if, (, !, globalScope, ., isDeclared, (, variableName, ,, false, ), ), {, scopeToDeclareIn, =]
[., getGlobalScope, (, ), ;, if, (, !, globalScope, ., isDeclared, (, variableName, ,, false, ), ), {, scopeToDeclareIn, =]
[(, variableName, ,, false, ), ), {, scopeToDeclareIn, =, scope, ., getGlobalScope, (, ), ;, }, }, boolean, isExtern, =]
[(, variableName, ,, false, ), ), {, scopeToDeclareIn, =, scope, ., getGlobalScope, (, ), ;, }, }, boolean, isExtern, =]
[scope, ., getGlobalScope, (, ), ;, }, }, boolean, isExtern, =, n, ., isFromExterns, (, ), ;, Var, newVar, =]
[;, }, }, boolean, isExtern, =, n, ., isFromExterns, (, ), ;, Var, newVar, =, null, ;, CompilerInput, input, =]
[;, }, }, boolean, isExtern, =, n, ., isFromExterns, (, ), ;, Var, newVar, =, null, ;, CompilerInput, input, =]
[isExtern, =, n, ., isFromExterns, (, ), ;, Var, newVar, =, null, ;, CompilerInput, input, =, compiler, ., getInput, (]
[(, ), ;, Var, newVar, =, null, ;, CompilerInput, input, =, compiler, ., getInput, (, inputId, ), ;, if, (]
[(, ), ;, Var, newVar, =, null, ;, CompilerInput, input, =, compiler, ., getInput, (, inputId, ), ;, if, (]
[newVar, =, null, ;, CompilerInput, input, =, compiler, ., getInput, (, inputId, ), ;, if, (, scopeToDeclareIn, ., isDeclared, (]
[null, ;, CompilerInput, input, =, compiler, ., getInput, (, inputId, ), ;, if, (, scopeToDeclareIn, ., isDeclared, (, variableName, ,]
[getInput, (, inputId, ), ;, if, (, scopeToDeclareIn, ., isDeclared, (, variableName, ,, false, ), ), {, Var, oldVar, =]
[getInput, (, inputId, ), ;, if, (, scopeToDeclareIn, ., isDeclared, (, variableName, ,, false, ), ), {, Var, oldVar, =]
[;, if, (, scopeToDeclareIn, ., isDeclared, (, variableName, ,, false, ), ), {, Var, oldVar, =, scopeToDeclareIn, ., getVar, (]
[scopeToDeclareIn, ., isDeclared, (, variableName, ,, false, ), ), {, Var, oldVar, =, scopeToDeclareIn, ., getVar, (, variableName, ), ;]
[isDeclared, (, variableName, ,, false, ), ), {, Var, oldVar, =, scopeToDeclareIn, ., getVar, (, variableName, ), ;, newVar, =]
[isDeclared, (, variableName, ,, false, ), ), {, Var, oldVar, =, scopeToDeclareIn, ., getVar, (, variableName, ), ;, newVar, =]
[false, ), ), {, Var, oldVar, =, scopeToDeclareIn, ., getVar, (, variableName, ), ;, newVar, =, validator, ., expectUndeclaredVariable, (]
[), {, Var, oldVar, =, scopeToDeclareIn, ., getVar, (, variableName, ), ;, newVar, =, validator, ., expectUndeclaredVariable, (, sourceName, ,]
[Var, oldVar, =, scopeToDeclareIn, ., getVar, (, variableName, ), ;, newVar, =, validator, ., expectUndeclaredVariable, (, sourceName, ,, input, ,]
[=, scopeToDeclareIn, ., getVar, (, variableName, ), ;, newVar, =, validator, ., expectUndeclaredVariable, (, sourceName, ,, input, ,, n, ,]
[., getVar, (, variableName, ), ;, newVar, =, validator, ., expectUndeclaredVariable, (, sourceName, ,, input, ,, n, ,, parent, ,]
[(, variableName, ), ;, newVar, =, validator, ., expectUndeclaredVariable, (, sourceName, ,, input, ,, n, ,, parent, ,, oldVar, ,]
[), ;, newVar, =, validator, ., expectUndeclaredVariable, (, sourceName, ,, input, ,, n, ,, parent, ,, oldVar, ,, variableName, ,]
[sourceName, ,, input, ,, n, ,, parent, ,, oldVar, ,, variableName, ,, type, ), ;, }, else, {, if, (]
[sourceName, ,, input, ,, n, ,, parent, ,, oldVar, ,, variableName, ,, type, ), ;, }, else, {, if, (]
[input, ,, n, ,, parent, ,, oldVar, ,, variableName, ,, type, ), ;, }, else, {, if, (, type, !=]
[,, parent, ,, oldVar, ,, variableName, ,, type, ), ;, }, else, {, if, (, type, !=, null, ), {]
[,, oldVar, ,, variableName, ,, type, ), ;, }, else, {, if, (, type, !=, null, ), {, setDeferredType, (]
[,, variableName, ,, type, ), ;, }, else, {, if, (, type, !=, null, ), {, setDeferredType, (, n, ,]
[), ;, }, else, {, if, (, type, !=, null, ), {, setDeferredType, (, n, ,, type, ), ;, }]
[}, else, {, if, (, type, !=, null, ), {, setDeferredType, (, n, ,, type, ), ;, }, newVar, =]
[}, else, {, if, (, type, !=, null, ), {, setDeferredType, (, n, ,, type, ), ;, }, newVar, =]
[(, type, !=, null, ), {, setDeferredType, (, n, ,, type, ), ;, }, newVar, =, scopeToDeclareIn, ., declare, (]
[!=, null, ), {, setDeferredType, (, n, ,, type, ), ;, }, newVar, =, scopeToDeclareIn, ., declare, (, variableName, ,]
[), {, setDeferredType, (, n, ,, type, ), ;, }, newVar, =, scopeToDeclareIn, ., declare, (, variableName, ,, n, ,]
[setDeferredType, (, n, ,, type, ), ;, }, newVar, =, scopeToDeclareIn, ., declare, (, variableName, ,, n, ,, type, ,]
[n, ,, type, ), ;, }, newVar, =, scopeToDeclareIn, ., declare, (, variableName, ,, n, ,, type, ,, input, ,]
[}, newVar, =, scopeToDeclareIn, ., declare, (, variableName, ,, n, ,, type, ,, input, ,, inferred, ), ;, if, (]
[}, newVar, =, scopeToDeclareIn, ., declare, (, variableName, ,, n, ,, type, ,, input, ,, inferred, ), ;, if, (]
[,, n, ,, type, ,, input, ,, inferred, ), ;, if, (, type, instanceof, EnumType, ), {, Node, initialValue, =]
[,, n, ,, type, ,, input, ,, inferred, ), ;, if, (, type, instanceof, EnumType, ), {, Node, initialValue, =]
[;, if, (, type, instanceof, EnumType, ), {, Node, initialValue, =, newVar, ., getInitialValue, (, ), ;, boolean, isValidValue, =]
[;, if, (, type, instanceof, EnumType, ), {, Node, initialValue, =, newVar, ., getInitialValue, (, ), ;, boolean, isValidValue, =]
[;, if, (, type, instanceof, EnumType, ), {, Node, initialValue, =, newVar, ., getInitialValue, (, ), ;, boolean, isValidValue, =]
[(, type, instanceof, EnumType, ), {, Node, initialValue, =, newVar, ., getInitialValue, (, ), ;, boolean, isValidValue, =, initialValue, !=]
[instanceof, EnumType, ), {, Node, initialValue, =, newVar, ., getInitialValue, (, ), ;, boolean, isValidValue, =, initialValue, !=, null, &&]
[EnumType, ), {, Node, initialValue, =, newVar, ., getInitialValue, (, ), ;, boolean, isValidValue, =, initialValue, !=, null, &&, (]
[EnumType, ), {, Node, initialValue, =, newVar, ., getInitialValue, (, ), ;, boolean, isValidValue, =, initialValue, !=, null, &&, (]
[EnumType, ), {, Node, initialValue, =, newVar, ., getInitialValue, (, ), ;, boolean, isValidValue, =, initialValue, !=, null, &&, (]
[newVar, ., getInitialValue, (, ), ;, boolean, isValidValue, =, initialValue, !=, null, &&, (, initialValue, ., isObjectLit, (, ), ||]
[newVar, ., getInitialValue, (, ), ;, boolean, isValidValue, =, initialValue, !=, null, &&, (, initialValue, ., isObjectLit, (, ), ||]
[initialValue, !=, null, &&, (, initialValue, ., isObjectLit, (, ), ||, initialValue, ., isQualifiedName, (, ), ), ;, if, (]
[!=, null, &&, (, initialValue, ., isObjectLit, (, ), ||, initialValue, ., isQualifiedName, (, ), ), ;, if, (, !]
[(, initialValue, ., isObjectLit, (, ), ||, initialValue, ., isQualifiedName, (, ), ), ;, if, (, !, isValidValue, ), {]
[(, initialValue, ., isObjectLit, (, ), ||, initialValue, ., isQualifiedName, (, ), ), ;, if, (, !, isValidValue, ), {]
[(, ), ||, initialValue, ., isQualifiedName, (, ), ), ;, if, (, !, isValidValue, ), {, compiler, ., report, (]
[(, ), ||, initialValue, ., isQualifiedName, (, ), ), ;, if, (, !, isValidValue, ), {, compiler, ., report, (]
[., isQualifiedName, (, ), ), ;, if, (, !, isValidValue, ), {, compiler, ., report, (, JSError, ., make, (]
[(, ), ), ;, if, (, !, isValidValue, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,]
[), ;, if, (, !, isValidValue, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,]
[report, (, JSError, ., make, (, sourceName, ,, n, ,, ENUM_INITIALIZER, ), ), ;, }, }, }, FunctionType, fnType, =]
[report, (, JSError, ., make, (, sourceName, ,, n, ,, ENUM_INITIALIZER, ), ), ;, }, }, }, FunctionType, fnType, =]
[make, (, sourceName, ,, n, ,, ENUM_INITIALIZER, ), ), ;, }, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType, (]
[,, ENUM_INITIALIZER, ), ), ;, }, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType, (, type, ), ;, if, (]
[,, ENUM_INITIALIZER, ), ), ;, }, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType, (, type, ), ;, if, (]
[,, ENUM_INITIALIZER, ), ), ;, }, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType, (, type, ), ;, if, (]
[), ), ;, }, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType, (, type, ), ;, if, (, fnType, !=]
[;, }, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType, (, type, ), ;, if, (, fnType, !=, null, &&]
[}, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType, (, type, ), ;, if, (, fnType, !=, null, &&, !]
[}, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType, (, type, ), ;, if, (, fnType, !=, null, &&, !]
[(, type, ), ;, if, (, fnType, !=, null, &&, !, type, ., isEmptyType, (, ), ), {, if, (]
[(, type, ), ;, if, (, fnType, !=, null, &&, !, type, ., isEmptyType, (, ), ), {, if, (]
[type, ), ;, if, (, fnType, !=, null, &&, !, type, ., isEmptyType, (, ), ), {, if, (, (]
[type, ), ;, if, (, fnType, !=, null, &&, !, type, ., isEmptyType, (, ), ), {, if, (, (]
[type, ), ;, if, (, fnType, !=, null, &&, !, type, ., isEmptyType, (, ), ), {, if, (, (]
[!=, null, &&, !, type, ., isEmptyType, (, ), ), {, if, (, (, fnType, ., isConstructor, (, ), ||]
[!=, null, &&, !, type, ., isEmptyType, (, ), ), {, if, (, (, fnType, ., isConstructor, (, ), ||]
[(, ), ), {, if, (, (, fnType, ., isConstructor, (, ), ||, fnType, ., isInterface, (, ), ), &&]
[(, ), ), {, if, (, (, fnType, ., isConstructor, (, ), ||, fnType, ., isInterface, (, ), ), &&]
[if, (, (, fnType, ., isConstructor, (, ), ||, fnType, ., isInterface, (, ), ), &&, variableName, ., equals, (]
[if, (, (, fnType, ., isConstructor, (, ), ||, fnType, ., isInterface, (, ), ), &&, variableName, ., equals, (]
[||, fnType, ., isInterface, (, ), ), &&, variableName, ., equals, (, fnType, ., getReferenceName, (, ), ), ), {]
[., isInterface, (, ), ), &&, variableName, ., equals, (, fnType, ., getReferenceName, (, ), ), ), {, finishConstructorDefinition, (]
[(, ), ), &&, variableName, ., equals, (, fnType, ., getReferenceName, (, ), ), ), {, finishConstructorDefinition, (, n, ,]
[), &&, variableName, ., equals, (, fnType, ., getReferenceName, (, ), ), ), {, finishConstructorDefinition, (, n, ,, variableName, ,]
[variableName, ., equals, (, fnType, ., getReferenceName, (, ), ), ), {, finishConstructorDefinition, (, n, ,, variableName, ,, fnType, ,]
[equals, (, fnType, ., getReferenceName, (, ), ), ), {, finishConstructorDefinition, (, n, ,, variableName, ,, fnType, ,, scopeToDeclareIn, ,]
[fnType, ., getReferenceName, (, ), ), ), {, finishConstructorDefinition, (, n, ,, variableName, ,, fnType, ,, scopeToDeclareIn, ,, input, ,]
[{, finishConstructorDefinition, (, n, ,, variableName, ,, fnType, ,, scopeToDeclareIn, ,, input, ,, newVar, ), ;, }, }, if, (]
[,, fnType, ,, scopeToDeclareIn, ,, input, ,, newVar, ), ;, }, }, if, (, shouldDeclareOnGlobalThis, ), {, ObjectType, globalThis, =]
[,, fnType, ,, scopeToDeclareIn, ,, input, ,, newVar, ), ;, }, }, if, (, shouldDeclareOnGlobalThis, ), {, ObjectType, globalThis, =]
[,, input, ,, newVar, ), ;, }, }, if, (, shouldDeclareOnGlobalThis, ), {, ObjectType, globalThis, =, typeRegistry, ., getNativeObjectType, (]
[;, }, }, if, (, shouldDeclareOnGlobalThis, ), {, ObjectType, globalThis, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ;, if, (]
[if, (, shouldDeclareOnGlobalThis, ), {, ObjectType, globalThis, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ;, if, (, inferred, ), {]
[if, (, shouldDeclareOnGlobalThis, ), {, ObjectType, globalThis, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ;, if, (, inferred, ), {]
[{, ObjectType, globalThis, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ;, if, (, inferred, ), {, globalThis, ., defineInferredProperty, (]
[globalThis, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ;, if, (, inferred, ), {, globalThis, ., defineInferredProperty, (, variableName, ,]
[globalThis, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ;, if, (, inferred, ), {, globalThis, ., defineInferredProperty, (, variableName, ,]
[globalThis, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ;, if, (, inferred, ), {, globalThis, ., defineInferredProperty, (, variableName, ,]
[typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ;, if, (, inferred, ), {, globalThis, ., defineInferredProperty, (, variableName, ,, type, ==]
[getNativeObjectType, (, GLOBAL_THIS, ), ;, if, (, inferred, ), {, globalThis, ., defineInferredProperty, (, variableName, ,, type, ==, null, ?]
[GLOBAL_THIS, ), ;, if, (, inferred, ), {, globalThis, ., defineInferredProperty, (, variableName, ,, type, ==, null, ?, getNativeType, (]
[GLOBAL_THIS, ), ;, if, (, inferred, ), {, globalThis, ., defineInferredProperty, (, variableName, ,, type, ==, null, ?, getNativeType, (]
[inferred, ), {, globalThis, ., defineInferredProperty, (, variableName, ,, type, ==, null, ?, getNativeType, (, JSTypeNative, ., NO_TYPE, ), :]
[{, globalThis, ., defineInferredProperty, (, variableName, ,, type, ==, null, ?, getNativeType, (, JSTypeNative, ., NO_TYPE, ), :, type, ,]
[,, type, ==, null, ?, getNativeType, (, JSTypeNative, ., NO_TYPE, ), :, type, ,, n, ), ;, }, else, {]
[,, type, ==, null, ?, getNativeType, (, JSTypeNative, ., NO_TYPE, ), :, type, ,, n, ), ;, }, else, {]
[?, getNativeType, (, JSTypeNative, ., NO_TYPE, ), :, type, ,, n, ), ;, }, else, {, globalThis, ., defineDeclaredProperty, (]
[(, JSTypeNative, ., NO_TYPE, ), :, type, ,, n, ), ;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,]
[., NO_TYPE, ), :, type, ,, n, ), ;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,]
[), ;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;, }, }, if, (]
[), ;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;, }, }, if, (]
[), ;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;, }, }, if, (]
[), ;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;, }, }, if, (]
[), ;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;, }, }, if, (]
[}, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;, }, }, if, (, isGlobalVar, &&]
[}, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;, }, }, if, (, isGlobalVar, &&]
[., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;, }, }, if, (, isGlobalVar, &&, "Window", ., equals, (]
[variableName, ,, type, ,, n, ), ;, }, }, if, (, isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&]
[variableName, ,, type, ,, n, ), ;, }, }, if, (, isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&]
[type, ,, n, ), ;, }, }, if, (, isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&, type, !=]
[n, ), ;, }, }, if, (, isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&, type, !=, null, &&]
[n, ), ;, }, }, if, (, isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&, type, !=, null, &&]
[(, isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&, type, !=, null, &&, type, ., isFunctionType, (, ), &&]
[(, isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&, type, !=, null, &&, type, ., isFunctionType, (, ), &&]
[type, !=, null, &&, type, ., isFunctionType, (, ), &&, type, ., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =]
[type, !=, null, &&, type, ., isFunctionType, (, ), &&, type, ., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =]
[type, !=, null, &&, type, ., isFunctionType, (, ), &&, type, ., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =]
[type, ., isFunctionType, (, ), &&, type, ., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =, typeRegistry, ., getNativeObjectType, (]
[., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ., getConstructor, (, ), ;]
[., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ., getConstructor, (, ), ;]
[., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ., getConstructor, (, ), ;]
[., getNativeObjectType, (, GLOBAL_THIS, ), ., getConstructor, (, ), ;, globalThisCtor, ., getInstanceType, (, ), ., clearCachedValues, (, ), ;]
[., getNativeObjectType, (, GLOBAL_THIS, ), ., getConstructor, (, ), ;, globalThisCtor, ., getInstanceType, (, ), ., clearCachedValues, (, ), ;]
[., getNativeObjectType, (, GLOBAL_THIS, ), ., getConstructor, (, ), ;, globalThisCtor, ., getInstanceType, (, ), ., clearCachedValues, (, ), ;]
[globalThisCtor, ., getInstanceType, (, ), ., clearCachedValues, (, ), ;, globalThisCtor, ., getPrototype, (, ), ., clearCachedValues, (, ), ;]
[globalThisCtor, ., getInstanceType, (, ), ., clearCachedValues, (, ), ;, globalThisCtor, ., getPrototype, (, ), ., clearCachedValues, (, ), ;]
[), ., clearCachedValues, (, ), ;, globalThisCtor, ., getPrototype, (, ), ., clearCachedValues, (, ), ;, globalThisCtor, ., setPrototypeBasedOn, (]
[), ., clearCachedValues, (, ), ;, globalThisCtor, ., getPrototype, (, ), ., clearCachedValues, (, ), ;, globalThisCtor, ., setPrototypeBasedOn, (]
[., clearCachedValues, (, ), ;, globalThisCtor, ., getPrototype, (, ), ., clearCachedValues, (, ), ;, globalThisCtor, ., setPrototypeBasedOn, (, (]
[., clearCachedValues, (, ), ;, globalThisCtor, ., getPrototype, (, ), ., clearCachedValues, (, ), ;, globalThisCtor, ., setPrototypeBasedOn, (, (]
[,, String, variableName, ,, FunctionType, fnType, ,, Scope, scopeToDeclareIn, ,, CompilerInput, input, ,, Var, newVar, ), {, FunctionType, superClassCtor, =]
[,, String, variableName, ,, FunctionType, fnType, ,, Scope, scopeToDeclareIn, ,, CompilerInput, input, ,, Var, newVar, ), {, FunctionType, superClassCtor, =]
[,, CompilerInput, input, ,, Var, newVar, ), {, FunctionType, superClassCtor, =, fnType, ., getSuperClassConstructor, (, ), ;, Property, prototypeSlot, =]
[,, CompilerInput, input, ,, Var, newVar, ), {, FunctionType, superClassCtor, =, fnType, ., getSuperClassConstructor, (, ), ;, Property, prototypeSlot, =]
[Var, newVar, ), {, FunctionType, superClassCtor, =, fnType, ., getSuperClassConstructor, (, ), ;, Property, prototypeSlot, =, fnType, ., getSlot, (]
[{, FunctionType, superClassCtor, =, fnType, ., getSuperClassConstructor, (, ), ;, Property, prototypeSlot, =, fnType, ., getSlot, (, "prototype", ), ;]
[{, FunctionType, superClassCtor, =, fnType, ., getSuperClassConstructor, (, ), ;, Property, prototypeSlot, =, fnType, ., getSlot, (, "prototype", ), ;]
[fnType, ., getSuperClassConstructor, (, ), ;, Property, prototypeSlot, =, fnType, ., getSlot, (, "prototype", ), ;, prototypeSlot, ., setNode, (]
[Property, prototypeSlot, =, fnType, ., getSlot, (, "prototype", ), ;, prototypeSlot, ., setNode, (, n, ), ;, String, prototypeName, =]
[Property, prototypeSlot, =, fnType, ., getSlot, (, "prototype", ), ;, prototypeSlot, ., setNode, (, n, ), ;, String, prototypeName, =]
[=, fnType, ., getSlot, (, "prototype", ), ;, prototypeSlot, ., setNode, (, n, ), ;, String, prototypeName, =, variableName, +]
["prototype", ), ;, prototypeSlot, ., setNode, (, n, ), ;, String, prototypeName, =, variableName, +, ".prototype", ;, Var, prototypeVar, =]
["prototype", ), ;, prototypeSlot, ., setNode, (, n, ), ;, String, prototypeName, =, variableName, +, ".prototype", ;, Var, prototypeVar, =]
[., setNode, (, n, ), ;, String, prototypeName, =, variableName, +, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (]
[;, String, prototypeName, =, variableName, +, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (]
[;, String, prototypeName, =, variableName, +, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (]
[;, String, prototypeName, =, variableName, +, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (]
[prototypeName, =, variableName, +, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (, prototypeVar, !=]
[variableName, +, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (, prototypeVar, !=, null, &&]
[variableName, +, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (, prototypeVar, !=, null, &&]
[variableName, +, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (, prototypeVar, !=, null, &&]
[Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (, prototypeVar, !=, null, &&, prototypeVar, ., scope, ==]
[scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (, prototypeVar, !=, null, &&, prototypeVar, ., scope, ==, scopeToDeclareIn, ), {]
[scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (, prototypeVar, !=, null, &&, prototypeVar, ., scope, ==, scopeToDeclareIn, ), {]
[prototypeName, ), ;, if, (, prototypeVar, !=, null, &&, prototypeVar, ., scope, ==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (]
[(, prototypeVar, !=, null, &&, prototypeVar, ., scope, ==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }]
[(, prototypeVar, !=, null, &&, prototypeVar, ., scope, ==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }]
[&&, prototypeVar, ., scope, ==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (]
[., scope, ==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,]
[==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,]
[==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,]
[undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, ., getType, (, ), ,]
[prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, ., getType, (, ), ,, input, ,]
[prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, ., getType, (, ), ,, input, ,]
[prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, ., getType, (, ), ,, input, ,]
[;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, ., getType, (, ), ,, input, ,, superClassCtor, ==]
[scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, ., getType, (, ), ,, input, ,, superClassCtor, ==, null, ||]
[scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, ., getType, (, ), ,, input, ,, superClassCtor, ==, null, ||]
[scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, ., getType, (, ), ,, input, ,, superClassCtor, ==, null, ||]
[prototypeSlot, ., getType, (, ), ,, input, ,, superClassCtor, ==, null, ||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (]
[getType, (, ), ,, input, ,, superClassCtor, ==, null, ||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (]
[==, null, ||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;, if, (]
[==, null, ||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;, if, (]
[==, null, ||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;, if, (]
[==, null, ||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;, if, (]
[(, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;, if, (, newVar, ., getInitialValue, (, ), ==]
[., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;, if, (, newVar, ., getInitialValue, (, ), ==, null, &&]
[isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;, if, (, newVar, ., getInitialValue, (, ), ==, null, &&, !]
[isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;, if, (, newVar, ., getInitialValue, (, ), ==, null, &&, !]
[), ;, if, (, newVar, ., getInitialValue, (, ), ==, null, &&, !, n, ., isFromExterns, (, ), ), {]
[), ;, if, (, newVar, ., getInitialValue, (, ), ==, null, &&, !, n, ., isFromExterns, (, ), ), {]
[newVar, ., getInitialValue, (, ), ==, null, &&, !, n, ., isFromExterns, (, ), ), {, compiler, ., report, (]
[newVar, ., getInitialValue, (, ), ==, null, &&, !, n, ., isFromExterns, (, ), ), {, compiler, ., report, (]
[), ==, null, &&, !, n, ., isFromExterns, (, ), ), {, compiler, ., report, (, JSError, ., make, (]
[null, &&, !, n, ., isFromExterns, (, ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,]
[!, n, ., isFromExterns, (, ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,]
[!, n, ., isFromExterns, (, ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,]
[!, n, ., isFromExterns, (, ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, fnType, ., isConstructor, (, ), ?]
[compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, fnType, ., isConstructor, (, ), ?, CTOR_INITIALIZER, :]
[report, (, JSError, ., make, (, sourceName, ,, n, ,, fnType, ., isConstructor, (, ), ?, CTOR_INITIALIZER, :, IFACE_INITIALIZER, ,]
[:, IFACE_INITIALIZER, ,, variableName, ), ), ;, }, }, private, boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =]
[,, variableName, ), ), ;, }, }, private, boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =, getQnameRootScope, (]
[;, }, }, private, boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =, getQnameRootScope, (, n, ), ;, return]
[;, }, }, private, boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =, getQnameRootScope, (, n, ), ;, return]
[;, }, }, private, boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =, getQnameRootScope, (, n, ), ;, return]
[}, private, boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =, getQnameRootScope, (, n, ), ;, return, scope, !=]
[boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =, getQnameRootScope, (, n, ), ;, return, scope, !=, null, &&]
[boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =, getQnameRootScope, (, n, ), ;, return, scope, !=, null, &&]
[null, &&, scope, ., isGlobal, (, ), ;, }, private, Scope, getQnameRootScope, (, Node, n, ), {, Node, root, =]
[null, &&, scope, ., isGlobal, (, ), ;, }, private, Scope, getQnameRootScope, (, Node, n, ), {, Node, root, =]
[isGlobal, (, ), ;, }, private, Scope, getQnameRootScope, (, Node, n, ), {, Node, root, =, NodeUtil, ., getRootOfQualifiedName, (]
[private, Scope, getQnameRootScope, (, Node, n, ), {, Node, root, =, NodeUtil, ., getRootOfQualifiedName, (, n, ), ;, if, (]
[private, Scope, getQnameRootScope, (, Node, n, ), {, Node, root, =, NodeUtil, ., getRootOfQualifiedName, (, n, ), ;, if, (]
[=, NodeUtil, ., getRootOfQualifiedName, (, n, ), ;, if, (, root, ., isName, (, ), ), {, Var, var, =]
[=, NodeUtil, ., getRootOfQualifiedName, (, n, ), ;, if, (, root, ., isName, (, ), ), {, Var, var, =]
[(, n, ), ;, if, (, root, ., isName, (, ), ), {, Var, var, =, scope, ., getVar, (]
[(, n, ), ;, if, (, root, ., isName, (, ), ), {, Var, var, =, scope, ., getVar, (]
[(, ), ), {, Var, var, =, scope, ., getVar, (, root, ., getString, (, ), ), ;, if, (]
[(, ), ), {, Var, var, =, scope, ., getVar, (, root, ., getString, (, ), ), ;, if, (]
[), {, Var, var, =, scope, ., getVar, (, root, ., getString, (, ), ), ;, if, (, var, !=]
[=, scope, ., getVar, (, root, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, return]
[=, scope, ., getVar, (, root, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, return]
[), ), ;, if, (, var, !=, null, ), {, return, var, ., getScope, (, ), ;, }, }, return]
[JSType, getDeclaredType, (, String, sourceName, ,, JSDocInfo, info, ,, Node, lValue, ,, @, Nullable, Node, rValue, ), {, if, (]
[JSType, getDeclaredType, (, String, sourceName, ,, JSDocInfo, info, ,, Node, lValue, ,, @, Nullable, Node, rValue, ), {, if, (]
[JSType, getDeclaredType, (, String, sourceName, ,, JSDocInfo, info, ,, Node, lValue, ,, @, Nullable, Node, rValue, ), {, if, (]
[(, String, sourceName, ,, JSDocInfo, info, ,, Node, lValue, ,, @, Nullable, Node, rValue, ), {, if, (, info, !=]
[sourceName, ,, JSDocInfo, info, ,, Node, lValue, ,, @, Nullable, Node, rValue, ), {, if, (, info, !=, null, &&]
[sourceName, ,, JSDocInfo, info, ,, Node, lValue, ,, @, Nullable, Node, rValue, ), {, if, (, info, !=, null, &&]
[@, Nullable, Node, rValue, ), {, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, return]
[Node, rValue, ), {, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, return, getDeclaredTypeInAnnotation, (]
[), {, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,]
[if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,]
[., hasType, (, ), ), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;, }, else, if, (]
[., hasType, (, ), ), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;, }, else, if, (]
[., hasType, (, ), ), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;, }, else, if, (]
[., hasType, (, ), ), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;, }, else, if, (]
[(, ), ), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;, }, else, if, (, rValue, !=]
[), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;, }, else, if, (, rValue, !=, null, &&]
[), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;, }, else, if, (, rValue, !=, null, &&]
[,, lValue, ,, info, ), ;, }, else, if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), &&]
[,, info, ), ;, }, else, if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), &&, shouldUseFunctionLiteralType, (]
[,, info, ), ;, }, else, if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), &&, shouldUseFunctionLiteralType, (]
[}, else, if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), &&, shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (]
[}, else, if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), &&, shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (]
[&&, rValue, ., isFunction, (, ), &&, shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (, rValue, ., getJSType, (, ), ), ,]
[., isFunction, (, ), &&, shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (, rValue, ., getJSType, (, ), ), ,, info, ,]
[shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (, rValue, ., getJSType, (, ), ), ,, info, ,, lValue, ), ), {, return]
[shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (, rValue, ., getJSType, (, ), ), ,, info, ,, lValue, ), ), {, return]
[), ), ,, info, ,, lValue, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (]
[), ), ,, info, ,, lValue, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (]
[,, info, ,, lValue, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (, info, !=]
[), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (, info, !=, null, ), {, if, (]
[), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (, info, !=, null, ), {, if, (]
[}, else, if, (, info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {, if, (]
[}, else, if, (, info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {, if, (]
[}, else, if, (, info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {, if, (]
[if, (, info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {, if, (, rValue, !=]
[info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {, if, (, rValue, !=, null, &&]
[info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {, if, (, rValue, !=, null, &&]
[., hasEnumParameterType, (, ), ), {, if, (, rValue, !=, null, &&, rValue, ., isObjectLit, (, ), ), {, return]
[., hasEnumParameterType, (, ), ), {, if, (, rValue, !=, null, &&, rValue, ., isObjectLit, (, ), ), {, return]
[null, &&, rValue, ., isObjectLit, (, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, {, return]
[rValue, ., isObjectLit, (, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, {, return, createEnumTypeFromNodes, (]
[isObjectLit, (, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, {, return, createEnumTypeFromNodes, (, rValue, ,]
[isObjectLit, (, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, {, return, createEnumTypeFromNodes, (, rValue, ,]
[rValue, ., getJSType, (, ), ;, }, else, {, return, createEnumTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,]
[getJSType, (, ), ;, }, else, {, return, createEnumTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info, ,]
[createEnumTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info, ,, lValue, ), ;, }, }, else, if, (]
[createEnumTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info, ,, lValue, ), ;, }, }, else, if, (]
[createEnumTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info, ,, lValue, ), ;, }, }, else, if, (]
[getQualifiedName, (, ), ,, info, ,, lValue, ), ;, }, }, else, if, (, info, ., isConstructor, (, ), ||]
[getQualifiedName, (, ), ,, info, ,, lValue, ), ;, }, }, else, if, (, info, ., isConstructor, (, ), ||]
[;, }, }, else, if, (, info, ., isConstructor, (, ), ||, info, ., isInterface, (, ), ), {, return]
[}, else, if, (, info, ., isConstructor, (, ), ||, info, ., isInterface, (, ), ), {, return, createFunctionTypeFromNodes, (]
[if, (, info, ., isConstructor, (, ), ||, info, ., isInterface, (, ), ), {, return, createFunctionTypeFromNodes, (, rValue, ,]
[if, (, info, ., isConstructor, (, ), ||, info, ., isInterface, (, ), ), {, return, createFunctionTypeFromNodes, (, rValue, ,]
[), ||, info, ., isInterface, (, ), ), {, return, createFunctionTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,]
[info, ., isInterface, (, ), ), {, return, createFunctionTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info, ,]
[createFunctionTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info, ,, lValue, ), ;, }, else, {, if, (]
[createFunctionTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info, ,, lValue, ), ;, }, else, {, if, (]
[info, ,, lValue, ), ;, }, else, {, if, (, info, ., isConstant, (, ), ), {, JSType, knownType, =]
[;, }, else, {, if, (, info, ., isConstant, (, ), ), {, JSType, knownType, =, null, ;, if, (]
[;, }, else, {, if, (, info, ., isConstant, (, ), ), {, JSType, knownType, =, null, ;, if, (]
[else, {, if, (, info, ., isConstant, (, ), ), {, JSType, knownType, =, null, ;, if, (, rValue, !=]
[isConstant, (, ), ), {, JSType, knownType, =, null, ;, if, (, rValue, !=, null, ), {, JSDocInfo, rValueInfo, =]
[isConstant, (, ), ), {, JSType, knownType, =, null, ;, if, (, rValue, !=, null, ), {, JSDocInfo, rValueInfo, =]
[null, ;, if, (, rValue, !=, null, ), {, JSDocInfo, rValueInfo, =, rValue, ., getJSDocInfo, (, ), ;, if, (]
[null, ;, if, (, rValue, !=, null, ), {, JSDocInfo, rValueInfo, =, rValue, ., getJSDocInfo, (, ), ;, if, (]
[null, ;, if, (, rValue, !=, null, ), {, JSDocInfo, rValueInfo, =, rValue, ., getJSDocInfo, (, ), ;, if, (]
[if, (, rValue, !=, null, ), {, JSDocInfo, rValueInfo, =, rValue, ., getJSDocInfo, (, ), ;, if, (, rValueInfo, !=]
[rValue, !=, null, ), {, JSDocInfo, rValueInfo, =, rValue, ., getJSDocInfo, (, ), ;, if, (, rValueInfo, !=, null, &&]
[rValue, !=, null, ), {, JSDocInfo, rValueInfo, =, rValue, ., getJSDocInfo, (, ), ;, if, (, rValueInfo, !=, null, &&]
[rValue, ., getJSDocInfo, (, ), ;, if, (, rValueInfo, !=, null, &&, rValueInfo, ., hasType, (, ), ), {, return]
[rValue, ., getJSDocInfo, (, ), ;, if, (, rValueInfo, !=, null, &&, rValueInfo, ., hasType, (, ), ), {, return]
[rValue, ., getJSDocInfo, (, ), ;, if, (, rValueInfo, !=, null, &&, rValueInfo, ., hasType, (, ), ), {, return]
[rValueInfo, !=, null, &&, rValueInfo, ., hasType, (, ), ), {, return, rValueInfo, ., getType, (, ), ., evaluate, (]
[null, &&, rValueInfo, ., hasType, (, ), ), {, return, rValueInfo, ., getType, (, ), ., evaluate, (, scope, ,]
[), {, return, rValueInfo, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (]
[), {, return, rValueInfo, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (]
[), {, return, rValueInfo, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (]
[), {, return, rValueInfo, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (]
[(, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, rValue, ., getJSType, (, ), !=]
[., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, rValue, ., getJSType, (, ), !=, null, &&]
[evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, rValue, ., getJSType, (, ), !=, null, &&, !]
[evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, rValue, ., getJSType, (, ), !=, null, &&, !]
[evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, rValue, ., getJSType, (, ), !=, null, &&, !]
[., getJSType, (, ), !=, null, &&, !, rValue, ., getJSType, (, ), ., isUnknownType, (, ), ), {, return]
[., getJSType, (, ), !=, null, &&, !, rValue, ., getJSType, (, ), ., isUnknownType, (, ), ), {, return]
[getJSType, (, ), ., isUnknownType, (, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (]
[getJSType, (, ), ., isUnknownType, (, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (]
[rValue, ., getJSType, (, ), ;, }, else, if, (, rValue, ., isOr, (, ), ), {, Node, firstClause, =]
[rValue, ., getJSType, (, ), ;, }, else, if, (, rValue, ., isOr, (, ), ), {, Node, firstClause, =]
[(, rValue, ., isOr, (, ), ), {, Node, firstClause, =, rValue, ., getFirstChild, (, ), ;, Node, secondClause, =]
[(, rValue, ., isOr, (, ), ), {, Node, firstClause, =, rValue, ., getFirstChild, (, ), ;, Node, secondClause, =]
[firstClause, =, rValue, ., getFirstChild, (, ), ;, Node, secondClause, =, firstClause, ., getNext, (, ), ;, boolean, namesMatch, =]
[firstClause, =, rValue, ., getFirstChild, (, ), ;, Node, secondClause, =, firstClause, ., getNext, (, ), ;, boolean, namesMatch, =]
[firstClause, =, rValue, ., getFirstChild, (, ), ;, Node, secondClause, =, firstClause, ., getNext, (, ), ;, boolean, namesMatch, =]
[firstClause, =, rValue, ., getFirstChild, (, ), ;, Node, secondClause, =, firstClause, ., getNext, (, ), ;, boolean, namesMatch, =]
[), ;, Node, secondClause, =, firstClause, ., getNext, (, ), ;, boolean, namesMatch, =, firstClause, ., isName, (, ), &&]
[), ;, Node, secondClause, =, firstClause, ., getNext, (, ), ;, boolean, namesMatch, =, firstClause, ., isName, (, ), &&]
[., getNext, (, ), ;, boolean, namesMatch, =, firstClause, ., isName, (, ), &&, lValue, ., isName, (, ), &&]
[., getNext, (, ), ;, boolean, namesMatch, =, firstClause, ., isName, (, ), &&, lValue, ., isName, (, ), &&]
[., getNext, (, ), ;, boolean, namesMatch, =, firstClause, ., isName, (, ), &&, lValue, ., isName, (, ), &&]
[firstClause, ., isName, (, ), &&, lValue, ., isName, (, ), &&, firstClause, ., getString, (, ), ., equals, (]
[firstClause, ., isName, (, ), &&, lValue, ., isName, (, ), &&, firstClause, ., getString, (, ), ., equals, (]
[(, ), &&, firstClause, ., getString, (, ), ., equals, (, lValue, ., getString, (, ), ), ;, if, (]
[(, ), &&, firstClause, ., getString, (, ), ., equals, (, lValue, ., getString, (, ), ), ;, if, (]
[(, ), &&, firstClause, ., getString, (, ), ., equals, (, lValue, ., getString, (, ), ), ;, if, (]
[&&, firstClause, ., getString, (, ), ., equals, (, lValue, ., getString, (, ), ), ;, if, (, namesMatch, &&]
[&&, firstClause, ., getString, (, ), ., equals, (, lValue, ., getString, (, ), ), ;, if, (, namesMatch, &&]
[&&, firstClause, ., getString, (, ), ., equals, (, lValue, ., getString, (, ), ), ;, if, (, namesMatch, &&]
[., equals, (, lValue, ., getString, (, ), ), ;, if, (, namesMatch, &&, secondClause, ., getJSType, (, ), !=]
[(, lValue, ., getString, (, ), ), ;, if, (, namesMatch, &&, secondClause, ., getJSType, (, ), !=, null, &&]
[lValue, ., getString, (, ), ), ;, if, (, namesMatch, &&, secondClause, ., getJSType, (, ), !=, null, &&, !]
[lValue, ., getString, (, ), ), ;, if, (, namesMatch, &&, secondClause, ., getJSType, (, ), !=, null, &&, !]
[lValue, ., getString, (, ), ), ;, if, (, namesMatch, &&, secondClause, ., getJSType, (, ), !=, null, &&, !]
[., getJSType, (, ), !=, null, &&, !, secondClause, ., getJSType, (, ), ., isUnknownType, (, ), ), {, return]
[., getJSType, (, ), !=, null, &&, !, secondClause, ., getJSType, (, ), ., isUnknownType, (, ), ), {, return]
[., isUnknownType, (, ), ), {, return, secondClause, ., getJSType, (, ), ;, }, }, }, }, }, }, return]
[(, ), ), {, return, secondClause, ., getJSType, (, ), ;, }, }, }, }, }, }, return, getDeclaredTypeInAnnotation, (]
[), {, return, secondClause, ., getJSType, (, ), ;, }, }, }, }, }, }, return, getDeclaredTypeInAnnotation, (, sourceName, ,]
[return, secondClause, ., getJSType, (, ), ;, }, }, }, }, }, }, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,]
[,, lValue, ,, info, ), ;, }, private, FunctionType, getFunctionType, (, @, Nullable, Var, v, ), {, JSType, t, =]
[,, lValue, ,, info, ), ;, }, private, FunctionType, getFunctionType, (, @, Nullable, Var, v, ), {, JSType, t, =]
[,, lValue, ,, info, ), ;, }, private, FunctionType, getFunctionType, (, @, Nullable, Var, v, ), {, JSType, t, =]
[,, info, ), ;, }, private, FunctionType, getFunctionType, (, @, Nullable, Var, v, ), {, JSType, t, =, v, ==]
[), ;, }, private, FunctionType, getFunctionType, (, @, Nullable, Var, v, ), {, JSType, t, =, v, ==, null, ?]
[}, private, FunctionType, getFunctionType, (, @, Nullable, Var, v, ), {, JSType, t, =, v, ==, null, ?, null, :]
[}, private, FunctionType, getFunctionType, (, @, Nullable, Var, v, ), {, JSType, t, =, v, ==, null, ?, null, :]
[), {, JSType, t, =, v, ==, null, ?, null, :, v, ., getType, (, ), ;, ObjectType, o, =]
[), {, JSType, t, =, v, ==, null, ?, null, :, v, ., getType, (, ), ;, ObjectType, o, =]
[), {, JSType, t, =, v, ==, null, ?, null, :, v, ., getType, (, ), ;, ObjectType, o, =]
[JSType, t, =, v, ==, null, ?, null, :, v, ., getType, (, ), ;, ObjectType, o, =, t, ==]
[=, v, ==, null, ?, null, :, v, ., getType, (, ), ;, ObjectType, o, =, t, ==, null, ?]
[==, null, ?, null, :, v, ., getType, (, ), ;, ObjectType, o, =, t, ==, null, ?, null, :]
[==, null, ?, null, :, v, ., getType, (, ), ;, ObjectType, o, =, t, ==, null, ?, null, :]
[getType, (, ), ;, ObjectType, o, =, t, ==, null, ?, null, :, t, ., dereference, (, ), ;, return]
[getType, (, ), ;, ObjectType, o, =, t, ==, null, ?, null, :, t, ., dereference, (, ), ;, return]
[ObjectType, o, =, t, ==, null, ?, null, :, t, ., dereference, (, ), ;, return, JSType, ., toMaybeFunctionType, (]
[o, ), ;, }, private, void, checkForCallingConventionDefiningCalls, (, Node, n, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {]
[o, ), ;, }, private, void, checkForCallingConventionDefiningCalls, (, Node, n, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {]
[private, void, checkForCallingConventionDefiningCalls, (, Node, n, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {, codingConvention, ., checkForCallingConventionDefiningCalls, (]
[checkForCallingConventionDefiningCalls, (, Node, n, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {, codingConvention, ., checkForCallingConventionDefiningCalls, (, n, ,]
[), ;, }, private, void, checkForClassDefiningCalls, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, SubclassRelationship, relationship, =]
[), ;, }, private, void, checkForClassDefiningCalls, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, SubclassRelationship, relationship, =]
[void, checkForClassDefiningCalls, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, SubclassRelationship, relationship, =, codingConvention, ., getClassesDefinedByCall, (]
[,, Node, n, ,, Node, parent, ), {, SubclassRelationship, relationship, =, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (]
[,, Node, n, ,, Node, parent, ), {, SubclassRelationship, relationship, =, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (]
[n, ,, Node, parent, ), {, SubclassRelationship, relationship, =, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (, relationship, !=]
[SubclassRelationship, relationship, =, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (, relationship, !=, null, ), {, FunctionType, superCtor, =]
[=, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (, relationship, !=, null, ), {, FunctionType, superCtor, =, getFunctionType, (]
[=, codingConvention, ., getClassesDefinedByCall, (, n, ), ;, if, (, relationship, !=, null, ), {, FunctionType, superCtor, =, getFunctionType, (]
[(, n, ), ;, if, (, relationship, !=, null, ), {, FunctionType, superCtor, =, getFunctionType, (, scope, ., getVar, (]
[(, n, ), ;, if, (, relationship, !=, null, ), {, FunctionType, superCtor, =, getFunctionType, (, scope, ., getVar, (]
[), {, FunctionType, superCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., superclassName, ), ), ;, FunctionType, subCtor, =]
[FunctionType, superCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., superclassName, ), ), ;, FunctionType, subCtor, =, getFunctionType, (]
[FunctionType, superCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., superclassName, ), ), ;, FunctionType, subCtor, =, getFunctionType, (]
[(, scope, ., getVar, (, relationship, ., superclassName, ), ), ;, FunctionType, subCtor, =, getFunctionType, (, scope, ., getVar, (]
[(, scope, ., getVar, (, relationship, ., superclassName, ), ), ;, FunctionType, subCtor, =, getFunctionType, (, scope, ., getVar, (]
[), ), ;, FunctionType, subCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., subclassName, ), ), ;, if, (]
[), ), ;, FunctionType, subCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., subclassName, ), ), ;, if, (]
[), ), ;, FunctionType, subCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., subclassName, ), ), ;, if, (]
[), ), ;, FunctionType, subCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., subclassName, ), ), ;, if, (]
[), ), ;, FunctionType, subCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., subclassName, ), ), ;, if, (]
[;, FunctionType, subCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., subclassName, ), ), ;, if, (, superCtor, !=]
[subCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., subclassName, ), ), ;, if, (, superCtor, !=, null, &&]
[subCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., subclassName, ), ), ;, if, (, superCtor, !=, null, &&]
[getVar, (, relationship, ., subclassName, ), ), ;, if, (, superCtor, !=, null, &&, superCtor, ., isConstructor, (, ), &&]
[getVar, (, relationship, ., subclassName, ), ), ;, if, (, superCtor, !=, null, &&, superCtor, ., isConstructor, (, ), &&]
[relationship, ., subclassName, ), ), ;, if, (, superCtor, !=, null, &&, superCtor, ., isConstructor, (, ), &&, subCtor, !=]
[subclassName, ), ), ;, if, (, superCtor, !=, null, &&, superCtor, ., isConstructor, (, ), &&, subCtor, !=, null, &&]
[subclassName, ), ), ;, if, (, superCtor, !=, null, &&, superCtor, ., isConstructor, (, ), &&, subCtor, !=, null, &&]
[superCtor, ., isConstructor, (, ), &&, subCtor, !=, null, &&, subCtor, ., isConstructor, (, ), ), {, ObjectType, superClass, =]
[superCtor, ., isConstructor, (, ), &&, subCtor, !=, null, &&, subCtor, ., isConstructor, (, ), ), {, ObjectType, superClass, =]
[&&, subCtor, ., isConstructor, (, ), ), {, ObjectType, superClass, =, superCtor, ., getInstanceType, (, ), ;, ObjectType, subClass, =]
[&&, subCtor, ., isConstructor, (, ), ), {, ObjectType, superClass, =, superCtor, ., getInstanceType, (, ), ;, ObjectType, subClass, =]
[), {, ObjectType, superClass, =, superCtor, ., getInstanceType, (, ), ;, ObjectType, subClass, =, subCtor, ., getInstanceType, (, ), ;]
[ObjectType, superClass, =, superCtor, ., getInstanceType, (, ), ;, ObjectType, subClass, =, subCtor, ., getInstanceType, (, ), ;, superCtor, =]
[ObjectType, superClass, =, superCtor, ., getInstanceType, (, ), ;, ObjectType, subClass, =, subCtor, ., getInstanceType, (, ), ;, superCtor, =]
[(, ), ;, ObjectType, subClass, =, subCtor, ., getInstanceType, (, ), ;, superCtor, =, superClass, ., getConstructor, (, ), ;]
[;, ObjectType, subClass, =, subCtor, ., getInstanceType, (, ), ;, superCtor, =, superClass, ., getConstructor, (, ), ;, subCtor, =]
[;, ObjectType, subClass, =, subCtor, ., getInstanceType, (, ), ;, superCtor, =, superClass, ., getConstructor, (, ), ;, subCtor, =]
[), ;, superCtor, =, superClass, ., getConstructor, (, ), ;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (]
[), ;, superCtor, =, superClass, ., getConstructor, (, ), ;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (]
[), ;, superCtor, =, superClass, ., getConstructor, (, ), ;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (]
[), ;, superCtor, =, superClass, ., getConstructor, (, ), ;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (]
[), ;, superCtor, =, superClass, ., getConstructor, (, ), ;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (]
[superClass, ., getConstructor, (, ), ;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (, relationship, ., type, ==]
[superClass, ., getConstructor, (, ), ;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (, relationship, ., type, ==]
[), ;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (, relationship, ., type, ==, SubclassType, ., INHERITS, &&]
[;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (, relationship, ., type, ==, SubclassType, ., INHERITS, &&, !]
[;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (, relationship, ., type, ==, SubclassType, ., INHERITS, &&, !]
[(, ), ;, if, (, relationship, ., type, ==, SubclassType, ., INHERITS, &&, !, superClass, ., isEmptyType, (, ), &&]
[), ;, if, (, relationship, ., type, ==, SubclassType, ., INHERITS, &&, !, superClass, ., isEmptyType, (, ), &&, !]
[), ;, if, (, relationship, ., type, ==, SubclassType, ., INHERITS, &&, !, superClass, ., isEmptyType, (, ), &&, !]
[==, SubclassType, ., INHERITS, &&, !, superClass, ., isEmptyType, (, ), &&, !, subClass, ., isEmptyType, (, ), ), {]
[==, SubclassType, ., INHERITS, &&, !, superClass, ., isEmptyType, (, ), &&, !, subClass, ., isEmptyType, (, ), ), {]
[&&, !, superClass, ., isEmptyType, (, ), &&, !, subClass, ., isEmptyType, (, ), ), {, validator, ., expectSuperType, (]
[superClass, ., isEmptyType, (, ), &&, !, subClass, ., isEmptyType, (, ), ), {, validator, ., expectSuperType, (, t, ,]
[isEmptyType, (, ), &&, !, subClass, ., isEmptyType, (, ), ), {, validator, ., expectSuperType, (, t, ,, n, ,]
[), &&, !, subClass, ., isEmptyType, (, ), ), {, validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,]
[(, ), ), {, validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass, ), ;, }, if, (]
[(, ), ), {, validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass, ), ;, }, if, (]
[(, ), ), {, validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass, ), ;, }, if, (]
[), {, validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass, ), ;, }, if, (, superCtor, !=]
[validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass, ), ;, }, if, (, superCtor, !=, null, &&]
[validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass, ), ;, }, if, (, superCtor, !=, null, &&]
[expectSuperType, (, t, ,, n, ,, superClass, ,, subClass, ), ;, }, if, (, superCtor, !=, null, &&, subCtor, !=]
[,, n, ,, superClass, ,, subClass, ), ;, }, if, (, superCtor, !=, null, &&, subCtor, !=, null, ), {]
[,, n, ,, superClass, ,, subClass, ), ;, }, if, (, superCtor, !=, null, &&, subCtor, !=, null, ), {]
[,, subClass, ), ;, }, if, (, superCtor, !=, null, &&, subCtor, !=, null, ), {, codingConvention, ., applySubclassRelationship, (]
[), ;, }, if, (, superCtor, !=, null, &&, subCtor, !=, null, ), {, codingConvention, ., applySubclassRelationship, (, superCtor, ,]
[}, if, (, superCtor, !=, null, &&, subCtor, !=, null, ), {, codingConvention, ., applySubclassRelationship, (, superCtor, ,, subCtor, ,]
[}, if, (, superCtor, !=, null, &&, subCtor, !=, null, ), {, codingConvention, ., applySubclassRelationship, (, superCtor, ,, subCtor, ,]
[{, codingConvention, ., applySubclassRelationship, (, superCtor, ,, subCtor, ,, relationship, ., type, ), ;, }, }, }, String, singletonGetterClassName, =]
[{, codingConvention, ., applySubclassRelationship, (, superCtor, ,, subCtor, ,, relationship, ., type, ), ;, }, }, }, String, singletonGetterClassName, =]
[(, superCtor, ,, subCtor, ,, relationship, ., type, ), ;, }, }, }, String, singletonGetterClassName, =, codingConvention, ., getSingletonGetterClassName, (]
[relationship, ., type, ), ;, }, }, }, String, singletonGetterClassName, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (]
[relationship, ., type, ), ;, }, }, }, String, singletonGetterClassName, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (]
[type, ), ;, }, }, }, String, singletonGetterClassName, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, singletonGetterClassName, !=]
[String, singletonGetterClassName, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, singletonGetterClassName, !=, null, ), {, ObjectType, objectType, =]
[String, singletonGetterClassName, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, singletonGetterClassName, !=, null, ), {, ObjectType, objectType, =]
[., getSingletonGetterClassName, (, n, ), ;, if, (, singletonGetterClassName, !=, null, ), {, ObjectType, objectType, =, ObjectType, ., cast, (]
[., getSingletonGetterClassName, (, n, ), ;, if, (, singletonGetterClassName, !=, null, ), {, ObjectType, objectType, =, ObjectType, ., cast, (]
[), ;, if, (, singletonGetterClassName, !=, null, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, typeRegistry, ., getType, (]
[null, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, singletonGetterClassName, ), ), ;, if, (]
[null, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, singletonGetterClassName, ), ), ;, if, (]
[{, ObjectType, objectType, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, singletonGetterClassName, ), ), ;, if, (, objectType, !=]
[cast, (, typeRegistry, ., getType, (, singletonGetterClassName, ), ), ;, if, (, objectType, !=, null, ), {, FunctionType, functionType, =]
[cast, (, typeRegistry, ., getType, (, singletonGetterClassName, ), ), ;, if, (, objectType, !=, null, ), {, FunctionType, functionType, =]
[), ;, if, (, objectType, !=, null, ), {, FunctionType, functionType, =, objectType, ., getConstructor, (, ), ;, if, (]
[), ;, if, (, objectType, !=, null, ), {, FunctionType, functionType, =, objectType, ., getConstructor, (, ), ;, if, (]
[if, (, objectType, !=, null, ), {, FunctionType, functionType, =, objectType, ., getConstructor, (, ), ;, if, (, functionType, !=]
[{, FunctionType, functionType, =, objectType, ., getConstructor, (, ), ;, if, (, functionType, !=, null, ), {, FunctionType, getterType, =]
[{, FunctionType, functionType, =, objectType, ., getConstructor, (, ), ;, if, (, functionType, !=, null, ), {, FunctionType, getterType, =]
[objectType, ., getConstructor, (, ), ;, if, (, functionType, !=, null, ), {, FunctionType, getterType, =, typeRegistry, ., createFunctionType, (]
[(, ), ;, if, (, functionType, !=, null, ), {, FunctionType, getterType, =, typeRegistry, ., createFunctionType, (, objectType, ), ;]
[(, ), ;, if, (, functionType, !=, null, ), {, FunctionType, getterType, =, typeRegistry, ., createFunctionType, (, objectType, ), ;]
[(, functionType, !=, null, ), {, FunctionType, getterType, =, typeRegistry, ., createFunctionType, (, objectType, ), ;, codingConvention, ., applySingletonGetter, (]
[!=, null, ), {, FunctionType, getterType, =, typeRegistry, ., createFunctionType, (, objectType, ), ;, codingConvention, ., applySingletonGetter, (, functionType, ,]
[), {, FunctionType, getterType, =, typeRegistry, ., createFunctionType, (, objectType, ), ;, codingConvention, ., applySingletonGetter, (, functionType, ,, getterType, ,]
[objectType, ), ;, codingConvention, ., applySingletonGetter, (, functionType, ,, getterType, ,, objectType, ), ;, }, }, }, DelegateRelationship, delegateRelationship, =]
[objectType, ), ;, codingConvention, ., applySingletonGetter, (, functionType, ,, getterType, ,, objectType, ), ;, }, }, }, DelegateRelationship, delegateRelationship, =]
[., applySingletonGetter, (, functionType, ,, getterType, ,, objectType, ), ;, }, }, }, DelegateRelationship, delegateRelationship, =, codingConvention, ., getDelegateRelationship, (]
[getterType, ,, objectType, ), ;, }, }, }, DelegateRelationship, delegateRelationship, =, codingConvention, ., getDelegateRelationship, (, n, ), ;, if, (]
[getterType, ,, objectType, ), ;, }, }, }, DelegateRelationship, delegateRelationship, =, codingConvention, ., getDelegateRelationship, (, n, ), ;, if, (]
[objectType, ), ;, }, }, }, DelegateRelationship, delegateRelationship, =, codingConvention, ., getDelegateRelationship, (, n, ), ;, if, (, delegateRelationship, !=]
[}, }, }, DelegateRelationship, delegateRelationship, =, codingConvention, ., getDelegateRelationship, (, n, ), ;, if, (, delegateRelationship, !=, null, ), {]
[}, DelegateRelationship, delegateRelationship, =, codingConvention, ., getDelegateRelationship, (, n, ), ;, if, (, delegateRelationship, !=, null, ), {, applyDelegateRelationship, (]
[(, n, ), ;, if, (, delegateRelationship, !=, null, ), {, applyDelegateRelationship, (, delegateRelationship, ), ;, }, ObjectLiteralCast, objectLiteralCast, =]
[(, n, ), ;, if, (, delegateRelationship, !=, null, ), {, applyDelegateRelationship, (, delegateRelationship, ), ;, }, ObjectLiteralCast, objectLiteralCast, =]
[if, (, delegateRelationship, !=, null, ), {, applyDelegateRelationship, (, delegateRelationship, ), ;, }, ObjectLiteralCast, objectLiteralCast, =, codingConvention, ., getObjectLiteralCast, (]
[), {, applyDelegateRelationship, (, delegateRelationship, ), ;, }, ObjectLiteralCast, objectLiteralCast, =, codingConvention, ., getObjectLiteralCast, (, n, ), ;, if, (]
[), {, applyDelegateRelationship, (, delegateRelationship, ), ;, }, ObjectLiteralCast, objectLiteralCast, =, codingConvention, ., getObjectLiteralCast, (, n, ), ;, if, (]
[applyDelegateRelationship, (, delegateRelationship, ), ;, }, ObjectLiteralCast, objectLiteralCast, =, codingConvention, ., getObjectLiteralCast, (, n, ), ;, if, (, objectLiteralCast, !=]
[}, ObjectLiteralCast, objectLiteralCast, =, codingConvention, ., getObjectLiteralCast, (, n, ), ;, if, (, objectLiteralCast, !=, null, ), {, if, (]
[}, ObjectLiteralCast, objectLiteralCast, =, codingConvention, ., getObjectLiteralCast, (, n, ), ;, if, (, objectLiteralCast, !=, null, ), {, if, (]
[}, ObjectLiteralCast, objectLiteralCast, =, codingConvention, ., getObjectLiteralCast, (, n, ), ;, if, (, objectLiteralCast, !=, null, ), {, if, (]
[codingConvention, ., getObjectLiteralCast, (, n, ), ;, if, (, objectLiteralCast, !=, null, ), {, if, (, objectLiteralCast, ., diagnosticType, ==]
[;, if, (, objectLiteralCast, !=, null, ), {, if, (, objectLiteralCast, ., diagnosticType, ==, null, ), {, ObjectType, type, =]
[;, if, (, objectLiteralCast, !=, null, ), {, if, (, objectLiteralCast, ., diagnosticType, ==, null, ), {, ObjectType, type, =]
[!=, null, ), {, if, (, objectLiteralCast, ., diagnosticType, ==, null, ), {, ObjectType, type, =, ObjectType, ., cast, (]
[!=, null, ), {, if, (, objectLiteralCast, ., diagnosticType, ==, null, ), {, ObjectType, type, =, ObjectType, ., cast, (]
[if, (, objectLiteralCast, ., diagnosticType, ==, null, ), {, ObjectType, type, =, ObjectType, ., cast, (, typeRegistry, ., getType, (]
[if, (, objectLiteralCast, ., diagnosticType, ==, null, ), {, ObjectType, type, =, ObjectType, ., cast, (, typeRegistry, ., getType, (]
[{, ObjectType, type, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, objectLiteralCast, ., typeName, ), ), ;, if, (]
[{, ObjectType, type, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, objectLiteralCast, ., typeName, ), ), ;, if, (]
[{, ObjectType, type, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, objectLiteralCast, ., typeName, ), ), ;, if, (]
[type, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, objectLiteralCast, ., typeName, ), ), ;, if, (, type, !=]
[ObjectType, ., cast, (, typeRegistry, ., getType, (, objectLiteralCast, ., typeName, ), ), ;, if, (, type, !=, null, &&]
[ObjectType, ., cast, (, typeRegistry, ., getType, (, objectLiteralCast, ., typeName, ), ), ;, if, (, type, !=, null, &&]
[ObjectType, ., cast, (, typeRegistry, ., getType, (, objectLiteralCast, ., typeName, ), ), ;, if, (, type, !=, null, &&]
[getType, (, objectLiteralCast, ., typeName, ), ), ;, if, (, type, !=, null, &&, type, ., getConstructor, (, ), !=]
[., typeName, ), ), ;, if, (, type, !=, null, &&, type, ., getConstructor, (, ), !=, null, ), {]
[), ), ;, if, (, type, !=, null, &&, type, ., getConstructor, (, ), !=, null, ), {, setDeferredType, (]
[), ), ;, if, (, type, !=, null, &&, type, ., getConstructor, (, ), !=, null, ), {, setDeferredType, (]
[(, type, !=, null, &&, type, ., getConstructor, (, ), !=, null, ), {, setDeferredType, (, objectLiteralCast, ., objectNode, ,]
[., getConstructor, (, ), !=, null, ), {, setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, ), ;, }, else, {]
[., getConstructor, (, ), !=, null, ), {, setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, ), ;, }, else, {]
[!=, null, ), {, setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, ), ;, }, else, {, compiler, ., report, (]
[!=, null, ), {, setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, ), ;, }, else, {, compiler, ., report, (]
[setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, ), ;, }, else, {, compiler, ., report, (, JSError, ., make, (]
[setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, ), ;, }, else, {, compiler, ., report, (, JSError, ., make, (]
[type, ), ;, }, else, {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,]
[;, }, else, {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,]
[JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, CONSTRUCTOR_EXPECTED, ), ), ;, }, }, else, {]
[JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, CONSTRUCTOR_EXPECTED, ), ), ;, }, }, else, {]
[t, ., getSourceName, (, ), ,, n, ,, CONSTRUCTOR_EXPECTED, ), ), ;, }, }, else, {, compiler, ., report, (]
[t, ., getSourceName, (, ), ,, n, ,, CONSTRUCTOR_EXPECTED, ), ), ;, }, }, else, {, compiler, ., report, (]
[), ,, n, ,, CONSTRUCTOR_EXPECTED, ), ), ;, }, }, else, {, compiler, ., report, (, JSError, ., make, (]
[), ,, n, ,, CONSTRUCTOR_EXPECTED, ), ), ;, }, }, else, {, compiler, ., report, (, JSError, ., make, (]
[), ;, }, }, else, {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,]
[}, }, else, {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,]
[}, }, else, {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,]
[objectLiteralCast, ., diagnosticType, ), ), ;, }, }, }, private, void, applyDelegateRelationship, (, DelegateRelationship, delegateRelationship, ), {, ObjectType, delegatorObject, =]
[objectLiteralCast, ., diagnosticType, ), ), ;, }, }, }, private, void, applyDelegateRelationship, (, DelegateRelationship, delegateRelationship, ), {, ObjectType, delegatorObject, =]
[), ;, }, }, }, private, void, applyDelegateRelationship, (, DelegateRelationship, delegateRelationship, ), {, ObjectType, delegatorObject, =, ObjectType, ., cast, (]
[), ;, }, }, }, private, void, applyDelegateRelationship, (, DelegateRelationship, delegateRelationship, ), {, ObjectType, delegatorObject, =, ObjectType, ., cast, (]
[}, private, void, applyDelegateRelationship, (, DelegateRelationship, delegateRelationship, ), {, ObjectType, delegatorObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (]
[}, private, void, applyDelegateRelationship, (, DelegateRelationship, delegateRelationship, ), {, ObjectType, delegatorObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (]
[ObjectType, delegatorObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegator, ), ), ;, ObjectType, delegateBaseObject, =]
[ObjectType, delegatorObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegator, ), ), ;, ObjectType, delegateBaseObject, =]
[., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegator, ), ), ;, ObjectType, delegateBaseObject, =, ObjectType, ., cast, (]
[., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegator, ), ), ;, ObjectType, delegateBaseObject, =, ObjectType, ., cast, (]
[., getType, (, delegateRelationship, ., delegator, ), ), ;, ObjectType, delegateBaseObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (]
[., getType, (, delegateRelationship, ., delegator, ), ), ;, ObjectType, delegateBaseObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (]
[ObjectType, delegateBaseObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegateBase, ), ), ;, ObjectType, delegateSuperObject, =]
[ObjectType, delegateBaseObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegateBase, ), ), ;, ObjectType, delegateSuperObject, =]
[., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegateBase, ), ), ;, ObjectType, delegateSuperObject, =, ObjectType, ., cast, (]
[., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegateBase, ), ), ;, ObjectType, delegateSuperObject, =, ObjectType, ., cast, (]
[., getType, (, delegateRelationship, ., delegateBase, ), ), ;, ObjectType, delegateSuperObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (]
[., getType, (, delegateRelationship, ., delegateBase, ), ), ;, ObjectType, delegateSuperObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (]
[delegateSuperObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;, if, (]
[delegateSuperObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;, if, (]
[delegateSuperObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;, if, (]
[delegateSuperObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;, if, (]
[ObjectType, ., cast, (, typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;, if, (, delegatorObject, !=]
[cast, (, typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;, if, (, delegatorObject, !=, null, &&]
[cast, (, typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;, if, (, delegatorObject, !=, null, &&]
[typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;, if, (, delegatorObject, !=, null, &&, delegateBaseObject, !=]
[getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;, if, (, delegatorObject, !=, null, &&, delegateBaseObject, !=, null, &&]
[getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;, if, (, delegatorObject, !=, null, &&, delegateBaseObject, !=, null, &&]
[codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;, if, (, delegatorObject, !=, null, &&, delegateBaseObject, !=, null, &&, delegateSuperObject, !=]
[), ;, if, (, delegatorObject, !=, null, &&, delegateBaseObject, !=, null, &&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor, =]
[), ;, if, (, delegatorObject, !=, null, &&, delegateBaseObject, !=, null, &&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor, =]
[!=, null, &&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType, delegateBaseCtor, =]
[!=, null, &&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType, delegateBaseCtor, =]
[delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType, delegateBaseCtor, =, delegateBaseObject, ., getConstructor, (, ), ;, FunctionType, delegateSuperCtor, =]
[delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType, delegateBaseCtor, =, delegateBaseObject, ., getConstructor, (, ), ;, FunctionType, delegateSuperCtor, =]
[FunctionType, delegateBaseCtor, =, delegateBaseObject, ., getConstructor, (, ), ;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if, (]
[FunctionType, delegateBaseCtor, =, delegateBaseObject, ., getConstructor, (, ), ;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if, (]
[FunctionType, delegateBaseCtor, =, delegateBaseObject, ., getConstructor, (, ), ;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if, (]
[FunctionType, delegateBaseCtor, =, delegateBaseObject, ., getConstructor, (, ), ;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if, (]
[=, delegateBaseObject, ., getConstructor, (, ), ;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if, (, delegatorCtor, !=]
[., getConstructor, (, ), ;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if, (, delegatorCtor, !=, null, &&]
[., getConstructor, (, ), ;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if, (, delegatorCtor, !=, null, &&]
[(, ), ;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if, (, delegatorCtor, !=, null, &&, delegateBaseCtor, !=]
[;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if, (, delegatorCtor, !=, null, &&, delegateBaseCtor, !=, null, &&]
[;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if, (, delegatorCtor, !=, null, &&, delegateBaseCtor, !=, null, &&]
[delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if, (, delegatorCtor, !=, null, &&, delegateBaseCtor, !=, null, &&, delegateSuperCtor, !=]
[), ;, if, (, delegatorCtor, !=, null, &&, delegateBaseCtor, !=, null, &&, delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =]
[(, delegatorCtor, !=, null, &&, delegateBaseCtor, !=, null, &&, delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (]
[null, &&, delegateBaseCtor, !=, null, &&, delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;]
[null, &&, delegateBaseCtor, !=, null, &&, delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;]
[null, &&, delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams, (]
[delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams, (, getNativeType, (]
[=, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams, (, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, FunctionType, findDelegate, =]
[=, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams, (, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, FunctionType, findDelegate, =]
[typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams, (, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, FunctionType, findDelegate, =, typeRegistry, ., createFunctionType, (]
[typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams, (, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, FunctionType, findDelegate, =, typeRegistry, ., createFunctionType, (]
[., addRequiredParams, (, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, FunctionType, findDelegate, =, typeRegistry, ., createFunctionType, (, typeRegistry, ., createDefaultObjectUnion, (]
[getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, FunctionType, findDelegate, =, typeRegistry, ., createFunctionType, (, typeRegistry, ., createDefaultObjectUnion, (, delegateBaseObject, ), ,]
[getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, FunctionType, findDelegate, =, typeRegistry, ., createFunctionType, (, typeRegistry, ., createDefaultObjectUnion, (, delegateBaseObject, ), ,]
[., createFunctionType, (, typeRegistry, ., createDefaultObjectUnion, (, delegateBaseObject, ), ,, functionParamBuilder, ., build, (, ), ), ;, FunctionType, delegateProxy, =]
[., createFunctionType, (, typeRegistry, ., createDefaultObjectUnion, (, delegateBaseObject, ), ,, functionParamBuilder, ., build, (, ), ), ;, FunctionType, delegateProxy, =]
[., createDefaultObjectUnion, (, delegateBaseObject, ), ,, functionParamBuilder, ., build, (, ), ), ;, FunctionType, delegateProxy, =, typeRegistry, ., createConstructorType, (]
[., createDefaultObjectUnion, (, delegateBaseObject, ), ,, functionParamBuilder, ., build, (, ), ), ;, FunctionType, delegateProxy, =, typeRegistry, ., createConstructorType, (]
[., createDefaultObjectUnion, (, delegateBaseObject, ), ,, functionParamBuilder, ., build, (, ), ), ;, FunctionType, delegateProxy, =, typeRegistry, ., createConstructorType, (]
[functionParamBuilder, ., build, (, ), ), ;, FunctionType, delegateProxy, =, typeRegistry, ., createConstructorType, (, delegateBaseObject, ., getReferenceName, (, ), +]
[build, (, ), ), ;, FunctionType, delegateProxy, =, typeRegistry, ., createConstructorType, (, delegateBaseObject, ., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX, ,]
[), ), ;, FunctionType, delegateProxy, =, typeRegistry, ., createConstructorType, (, delegateBaseObject, ., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX, ,, null, ,]
[;, FunctionType, delegateProxy, =, typeRegistry, ., createConstructorType, (, delegateBaseObject, ., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX, ,, null, ,, null, ,]
[delegateProxy, =, typeRegistry, ., createConstructorType, (, delegateBaseObject, ., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX, ,, null, ,, null, ,, null, ,]
[., createConstructorType, (, delegateBaseObject, ., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX, ,, null, ,, null, ,, null, ,, null, ), ;]
[., createConstructorType, (, delegateBaseObject, ., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX, ,, null, ,, null, ,, null, ,, null, ), ;]
[., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX, ,, null, ,, null, ,, null, ,, null, ), ;, delegateProxy, ., setPrototypeBasedOn, (]
[), +, DELEGATE_PROXY_SUFFIX, ,, null, ,, null, ,, null, ,, null, ), ;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;]
[), +, DELEGATE_PROXY_SUFFIX, ,, null, ,, null, ,, null, ,, null, ), ;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;]
[null, ,, null, ,, null, ,, null, ), ;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship, (]
[null, ,, null, ,, null, ), ;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,]
[null, ,, null, ), ;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,]
[null, ), ;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject, ,]
[;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject, ,, delegateProxy, ,]
[setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject, ,, delegateProxy, ,, findDelegate, ), ;]
[setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject, ,, delegateProxy, ,, findDelegate, ), ;]
[;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject, ,, delegateProxy, ,, findDelegate, ), ;, delegateProxyPrototypes, ., add, (]
[;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject, ,, delegateProxy, ,, findDelegate, ), ;, delegateProxyPrototypes, ., add, (]
[(, NodeTraversal, t, ,, JSDocInfo, info, ,, Node, n, ,, Node, parent, ,, Node, rhsValue, ), {, Node, ownerNode, =]
[(, NodeTraversal, t, ,, JSDocInfo, info, ,, Node, n, ,, Node, parent, ,, Node, rhsValue, ), {, Node, ownerNode, =]
[,, Node, parent, ,, Node, rhsValue, ), {, Node, ownerNode, =, n, ., getFirstChild, (, ), ;, String, ownerName, =]
[,, Node, parent, ,, Node, rhsValue, ), {, Node, ownerNode, =, n, ., getFirstChild, (, ), ;, String, ownerName, =]
[ownerNode, =, n, ., getFirstChild, (, ), ;, String, ownerName, =, ownerNode, ., getQualifiedName, (, ), ;, String, qName, =]
[ownerNode, =, n, ., getFirstChild, (, ), ;, String, ownerName, =, ownerNode, ., getQualifiedName, (, ), ;, String, qName, =]
[ownerName, =, ownerNode, ., getQualifiedName, (, ), ;, String, qName, =, n, ., getQualifiedName, (, ), ;, String, propName, =]
[ownerName, =, ownerNode, ., getQualifiedName, (, ), ;, String, qName, =, n, ., getQualifiedName, (, ), ;, String, propName, =]
[ownerName, =, ownerNode, ., getQualifiedName, (, ), ;, String, qName, =, n, ., getQualifiedName, (, ), ;, String, propName, =]
[=, n, ., getQualifiedName, (, ), ;, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;]
[=, n, ., getQualifiedName, (, ), ;, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;]
[(, ), ;, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, Preconditions, ., checkArgument, (]
[(, ), ;, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, Preconditions, ., checkArgument, (]
[(, ), ;, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, Preconditions, ., checkArgument, (]
[;, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, Preconditions, ., checkArgument, (, qName, !=]
[propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, Preconditions, ., checkArgument, (, qName, !=, null, &&]
[propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, Preconditions, ., checkArgument, (, qName, !=, null, &&]
[n, ., getLastChild, (, ), ., getString, (, ), ;, Preconditions, ., checkArgument, (, qName, !=, null, &&, ownerName, !=]
[getString, (, ), ;, Preconditions, ., checkArgument, (, qName, !=, null, &&, ownerName, !=, null, ), ;, JSType, valueType, =]
[), ;, Preconditions, ., checkArgument, (, qName, !=, null, &&, ownerName, !=, null, ), ;, JSType, valueType, =, getDeclaredType, (]
[), ;, Preconditions, ., checkArgument, (, qName, !=, null, &&, ownerName, !=, null, ), ;, JSType, valueType, =, getDeclaredType, (]
[qName, !=, null, &&, ownerName, !=, null, ), ;, JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,]
[null, &&, ownerName, !=, null, ), ;, JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,]
[ownerName, !=, null, ), ;, JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, n, ,]
[JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, n, ,, rhsValue, ), ;, if, (]
[JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, n, ,, rhsValue, ), ;, if, (]
[JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, n, ,, rhsValue, ), ;, if, (]
[=, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, n, ,, rhsValue, ), ;, if, (, valueType, ==]
[(, t, ., getSourceName, (, ), ,, info, ,, n, ,, rhsValue, ), ;, if, (, valueType, ==, null, &&]
[(, t, ., getSourceName, (, ), ,, info, ,, n, ,, rhsValue, ), ;, if, (, valueType, ==, null, &&]
[., getSourceName, (, ), ,, info, ,, n, ,, rhsValue, ), ;, if, (, valueType, ==, null, &&, rhsValue, !=]
[), ,, info, ,, n, ,, rhsValue, ), ;, if, (, valueType, ==, null, &&, rhsValue, !=, null, ), {]
[info, ,, n, ,, rhsValue, ), ;, if, (, valueType, ==, null, &&, rhsValue, !=, null, ), {, valueType, =]
[info, ,, n, ,, rhsValue, ), ;, if, (, valueType, ==, null, &&, rhsValue, !=, null, ), {, valueType, =]
[valueType, ==, null, &&, rhsValue, !=, null, ), {, valueType, =, rhsValue, ., getJSType, (, ), ;, }, if, (]
[valueType, ==, null, &&, rhsValue, !=, null, ), {, valueType, =, rhsValue, ., getJSType, (, ), ;, }, if, (]
[rhsValue, !=, null, ), {, valueType, =, rhsValue, ., getJSType, (, ), ;, }, if, (, "prototype", ., equals, (]
[rhsValue, ., getJSType, (, ), ;, }, if, (, "prototype", ., equals, (, propName, ), ), {, Var, qVar, =]
[rhsValue, ., getJSType, (, ), ;, }, if, (, "prototype", ., equals, (, propName, ), ), {, Var, qVar, =]
[), ;, }, if, (, "prototype", ., equals, (, propName, ), ), {, Var, qVar, =, scope, ., getVar, (]
["prototype", ., equals, (, propName, ), ), {, Var, qVar, =, scope, ., getVar, (, qName, ), ;, if, (]
["prototype", ., equals, (, propName, ), ), {, Var, qVar, =, scope, ., getVar, (, qName, ), ;, if, (]
[equals, (, propName, ), ), {, Var, qVar, =, scope, ., getVar, (, qName, ), ;, if, (, qVar, !=]
[Var, qVar, =, scope, ., getVar, (, qName, ), ;, if, (, qVar, !=, null, ), {, ObjectType, qVarType, =]
[Var, qVar, =, scope, ., getVar, (, qName, ), ;, if, (, qVar, !=, null, ), {, ObjectType, qVarType, =]
[., getVar, (, qName, ), ;, if, (, qVar, !=, null, ), {, ObjectType, qVarType, =, ObjectType, ., cast, (]
[., getVar, (, qName, ), ;, if, (, qVar, !=, null, ), {, ObjectType, qVarType, =, ObjectType, ., cast, (]
[!=, null, ), {, ObjectType, qVarType, =, ObjectType, ., cast, (, qVar, ., getType, (, ), ), ;, if, (]
[!=, null, ), {, ObjectType, qVarType, =, ObjectType, ., cast, (, qVar, ., getType, (, ), ), ;, if, (]
[!=, null, ), {, ObjectType, qVarType, =, ObjectType, ., cast, (, qVar, ., getType, (, ), ), ;, if, (]
[!=, null, ), {, ObjectType, qVarType, =, ObjectType, ., cast, (, qVar, ., getType, (, ), ), ;, if, (]
[), {, ObjectType, qVarType, =, ObjectType, ., cast, (, qVar, ., getType, (, ), ), ;, if, (, qVarType, !=]
[ObjectType, qVarType, =, ObjectType, ., cast, (, qVar, ., getType, (, ), ), ;, if, (, qVarType, !=, null, &&]
[ObjectType, qVarType, =, ObjectType, ., cast, (, qVar, ., getType, (, ), ), ;, if, (, qVarType, !=, null, &&]
[=, ObjectType, ., cast, (, qVar, ., getType, (, ), ), ;, if, (, qVarType, !=, null, &&, rhsValue, !=]
[., cast, (, qVar, ., getType, (, ), ), ;, if, (, qVarType, !=, null, &&, rhsValue, !=, null, &&]
[., cast, (, qVar, ., getType, (, ), ), ;, if, (, qVarType, !=, null, &&, rhsValue, !=, null, &&]
[), ), ;, if, (, qVarType, !=, null, &&, rhsValue, !=, null, &&, rhsValue, ., isObjectLit, (, ), ), {]
[), ), ;, if, (, qVarType, !=, null, &&, rhsValue, !=, null, &&, rhsValue, ., isObjectLit, (, ), ), {]
[(, qVarType, !=, null, &&, rhsValue, !=, null, &&, rhsValue, ., isObjectLit, (, ), ), {, typeRegistry, ., resetImplicitPrototype, (]
[(, qVarType, !=, null, &&, rhsValue, !=, null, &&, rhsValue, ., isObjectLit, (, ), ), {, typeRegistry, ., resetImplicitPrototype, (]
[!=, null, &&, rhsValue, ., isObjectLit, (, ), ), {, typeRegistry, ., resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,]
[!=, null, &&, rhsValue, ., isObjectLit, (, ), ), {, typeRegistry, ., resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,]
[., resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,, qVarType, ., getImplicitPrototype, (, ), ), ;, }, else, if, (]
[resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,, qVarType, ., getImplicitPrototype, (, ), ), ;, }, else, if, (, !]
[resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,, qVarType, ., getImplicitPrototype, (, ), ), ;, }, else, if, (, !]
[), ), ;, }, else, if, (, !, qVar, ., isTypeInferred, (, ), ), {, return, ;, }, if, (]
[), ), ;, }, else, if, (, !, qVar, ., isTypeInferred, (, ), ), {, return, ;, }, if, (]
[), ), ;, }, else, if, (, !, qVar, ., isTypeInferred, (, ), ), {, return, ;, }, if, (]
[(, !, qVar, ., isTypeInferred, (, ), ), {, return, ;, }, if, (, qVar, ., getScope, (, ), ==]
[., isTypeInferred, (, ), ), {, return, ;, }, if, (, qVar, ., getScope, (, ), ==, scope, ), {]
[., isTypeInferred, (, ), ), {, return, ;, }, if, (, qVar, ., getScope, (, ), ==, scope, ), {]
[), {, return, ;, }, if, (, qVar, ., getScope, (, ), ==, scope, ), {, scope, ., undeclare, (]
[., getScope, (, ), ==, scope, ), {, scope, ., undeclare, (, qVar, ), ;, }, }, }, if, (]
[., getScope, (, ), ==, scope, ), {, scope, ., undeclare, (, qVar, ), ;, }, }, }, if, (]
[(, ), ==, scope, ), {, scope, ., undeclare, (, qVar, ), ;, }, }, }, if, (, valueType, ==]
[{, scope, ., undeclare, (, qVar, ), ;, }, }, }, if, (, valueType, ==, null, ), {, if, (]
[{, scope, ., undeclare, (, qVar, ), ;, }, }, }, if, (, valueType, ==, null, ), {, if, (]
[;, }, }, }, if, (, valueType, ==, null, ), {, if, (, parent, ., isExprResult, (, ), ), {]
[;, }, }, }, if, (, valueType, ==, null, ), {, if, (, parent, ., isExprResult, (, ), ), {]
[if, (, valueType, ==, null, ), {, if, (, parent, ., isExprResult, (, ), ), {, stubDeclarations, ., add, (]
[==, null, ), {, if, (, parent, ., isExprResult, (, ), ), {, stubDeclarations, ., add, (, new, StubDeclaration, (]
[), {, if, (, parent, ., isExprResult, (, ), ), {, stubDeclarations, ., add, (, new, StubDeclaration, (, n, ,]
[), {, if, (, parent, ., isExprResult, (, ), ), {, stubDeclarations, ., add, (, new, StubDeclaration, (, n, ,]
[), {, if, (, parent, ., isExprResult, (, ), ), {, stubDeclarations, ., add, (, new, StubDeclaration, (, n, ,]
[), {, if, (, parent, ., isExprResult, (, ), ), {, stubDeclarations, ., add, (, new, StubDeclaration, (, n, ,]
[isExprResult, (, ), ), {, stubDeclarations, ., add, (, new, StubDeclaration, (, n, ,, t, ., getInput, (, ), !=]
[), ), {, stubDeclarations, ., add, (, new, StubDeclaration, (, n, ,, t, ., getInput, (, ), !=, null, &&]
[), ), {, stubDeclarations, ., add, (, new, StubDeclaration, (, n, ,, t, ., getInput, (, ), !=, null, &&]
[), ), {, stubDeclarations, ., add, (, new, StubDeclaration, (, n, ,, t, ., getInput, (, ), !=, null, &&]
[n, ,, t, ., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ,]
[., getInput, (, ), ., isExtern, (, ), ,, ownerName, ), ), ;, }, return, ;, }, boolean, inferred, =]
[(, ), ., isExtern, (, ), ,, ownerName, ), ), ;, }, return, ;, }, boolean, inferred, =, isQualifiedNameInferred, (]
[., isExtern, (, ), ,, ownerName, ), ), ;, }, return, ;, }, boolean, inferred, =, isQualifiedNameInferred, (, qName, ,]
[(, ), ,, ownerName, ), ), ;, }, return, ;, }, boolean, inferred, =, isQualifiedNameInferred, (, qName, ,, n, ,]
[,, ownerName, ), ), ;, }, return, ;, }, boolean, inferred, =, isQualifiedNameInferred, (, qName, ,, n, ,, info, ,]
[), ), ;, }, return, ;, }, boolean, inferred, =, isQualifiedNameInferred, (, qName, ,, n, ,, info, ,, rhsValue, ,]
[;, }, boolean, inferred, =, isQualifiedNameInferred, (, qName, ,, n, ,, info, ,, rhsValue, ,, valueType, ), ;, if, (]
[}, boolean, inferred, =, isQualifiedNameInferred, (, qName, ,, n, ,, info, ,, rhsValue, ,, valueType, ), ;, if, (, !]
[qName, ,, n, ,, info, ,, rhsValue, ,, valueType, ), ;, if, (, !, inferred, ), {, ObjectType, ownerType, =]
[n, ,, info, ,, rhsValue, ,, valueType, ), ;, if, (, !, inferred, ), {, ObjectType, ownerType, =, getObjectSlot, (]
[,, valueType, ), ;, if, (, !, inferred, ), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, if, (]
[,, valueType, ), ;, if, (, !, inferred, ), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, if, (]
[), ;, if, (, !, inferred, ), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, if, (, ownerType, !=]
[), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, if, (, ownerType, !=, null, ), {, boolean, isExtern, =]
[), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, if, (, ownerType, !=, null, ), {, boolean, isExtern, =]
[), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, if, (, ownerType, !=, null, ), {, boolean, isExtern, =]
[), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, if, (, ownerType, !=, null, ), {, boolean, isExtern, =]
[(, ownerName, ), ;, if, (, ownerType, !=, null, ), {, boolean, isExtern, =, t, ., getInput, (, ), !=]
[), ;, if, (, ownerType, !=, null, ), {, boolean, isExtern, =, t, ., getInput, (, ), !=, null, &&]
[), ;, if, (, ownerType, !=, null, ), {, boolean, isExtern, =, t, ., getInput, (, ), !=, null, &&]
[), ;, if, (, ownerType, !=, null, ), {, boolean, isExtern, =, t, ., getInput, (, ), !=, null, &&]
[t, ., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ;, if, (]
[t, ., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ;, if, (]
[., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ;, if, (, (]
[., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ;, if, (, (]
[getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ;, if, (, (, !]
[getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ;, if, (, (, !]
[null, &&, t, ., getInput, (, ), ., isExtern, (, ), ;, if, (, (, !, ownerType, ., hasOwnProperty, (]
[., getInput, (, ), ., isExtern, (, ), ;, if, (, (, !, ownerType, ., hasOwnProperty, (, propName, ), ||]
[., getInput, (, ), ., isExtern, (, ), ;, if, (, (, !, ownerType, ., hasOwnProperty, (, propName, ), ||]
[., isExtern, (, ), ;, if, (, (, !, ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (]
[;, if, (, (, !, ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&]
[if, (, (, !, ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&, (]
[if, (, (, !, ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&, (]
[(, (, !, ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&, (, (]
[(, (, !, ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&, (, (]
[!, ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&, (, (, isExtern, &&]
[ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&, (, (, isExtern, &&, !]
[ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&, (, (, isExtern, &&, !]
[ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&, (, (, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), ), ||]
[., isPropertyTypeInferred, (, propName, ), ), &&, (, (, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), ), ||, !]
[., isPropertyTypeInferred, (, propName, ), ), &&, (, (, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), ), ||, !]
[(, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), ), ||, !, ownerType, ., isInstanceType, (, ), ), ), {]
[(, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), ), ||, !, ownerType, ., isInstanceType, (, ), ), ), {]
[ownerType, ., isNativeObjectType, (, ), ), ||, !, ownerType, ., isInstanceType, (, ), ), ), {, ownerType, ., defineDeclaredProperty, (]
[isNativeObjectType, (, ), ), ||, !, ownerType, ., isInstanceType, (, ), ), ), {, ownerType, ., defineDeclaredProperty, (, propName, ,]
[), ), ||, !, ownerType, ., isInstanceType, (, ), ), ), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,]
[., isInstanceType, (, ), ), ), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n, ), ;, }, }]
[(, ), ), ), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n, ), ;, }, }, defineSlot, (]
[), ), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n, ), ;, }, }, defineSlot, (, n, ,]
[{, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n, ), ;, }, }, defineSlot, (, n, ,, parent, ,]
[., defineDeclaredProperty, (, propName, ,, valueType, ,, n, ), ;, }, }, defineSlot, (, n, ,, parent, ,, valueType, ,]
[n, ), ;, }, }, defineSlot, (, n, ,, parent, ,, valueType, ,, inferred, ), ;, }, else, if, (]
[n, ), ;, }, }, defineSlot, (, n, ,, parent, ,, valueType, ,, inferred, ), ;, }, else, if, (]
[n, ), ;, }, }, defineSlot, (, n, ,, parent, ,, valueType, ,, inferred, ), ;, }, else, if, (]
[;, }, }, defineSlot, (, n, ,, parent, ,, valueType, ,, inferred, ), ;, }, else, if, (, rhsValue, !=]
[}, defineSlot, (, n, ,, parent, ,, valueType, ,, inferred, ), ;, }, else, if, (, rhsValue, !=, null, &&]
[}, defineSlot, (, n, ,, parent, ,, valueType, ,, inferred, ), ;, }, else, if, (, rhsValue, !=, null, &&]
[), ;, }, else, if, (, rhsValue, !=, null, &&, rhsValue, ., isTrue, (, ), ), {, FunctionType, ownerType, =]
[), ;, }, else, if, (, rhsValue, !=, null, &&, rhsValue, ., isTrue, (, ), ), {, FunctionType, ownerType, =]
[if, (, rhsValue, !=, null, &&, rhsValue, ., isTrue, (, ), ), {, FunctionType, ownerType, =, JSType, ., toMaybeFunctionType, (]
[rhsValue, !=, null, &&, rhsValue, ., isTrue, (, ), ), {, FunctionType, ownerType, =, JSType, ., toMaybeFunctionType, (, getObjectSlot, (]
[isTrue, (, ), ), {, FunctionType, ownerType, =, JSType, ., toMaybeFunctionType, (, getObjectSlot, (, ownerName, ), ), ;, if, (]
[isTrue, (, ), ), {, FunctionType, ownerType, =, JSType, ., toMaybeFunctionType, (, getObjectSlot, (, ownerName, ), ), ;, if, (]
[), ), {, FunctionType, ownerType, =, JSType, ., toMaybeFunctionType, (, getObjectSlot, (, ownerName, ), ), ;, if, (, ownerType, !=]
[JSType, ., toMaybeFunctionType, (, getObjectSlot, (, ownerName, ), ), ;, if, (, ownerType, !=, null, ), {, JSType, ownerTypeOfThis, =]
[JSType, ., toMaybeFunctionType, (, getObjectSlot, (, ownerName, ), ), ;, if, (, ownerType, !=, null, ), {, JSType, ownerTypeOfThis, =]
[;, if, (, ownerType, !=, null, ), {, JSType, ownerTypeOfThis, =, ownerType, ., getTypeOfThis, (, ), ;, String, delegateName, =]
[;, if, (, ownerType, !=, null, ), {, JSType, ownerTypeOfThis, =, ownerType, ., getTypeOfThis, (, ), ;, String, delegateName, =]
[ownerTypeOfThis, =, ownerType, ., getTypeOfThis, (, ), ;, String, delegateName, =, codingConvention, ., getDelegateSuperclassName, (, ), ;, JSType, delegateType, =]
[ownerTypeOfThis, =, ownerType, ., getTypeOfThis, (, ), ;, String, delegateName, =, codingConvention, ., getDelegateSuperclassName, (, ), ;, JSType, delegateType, =]
[ownerTypeOfThis, =, ownerType, ., getTypeOfThis, (, ), ;, String, delegateName, =, codingConvention, ., getDelegateSuperclassName, (, ), ;, JSType, delegateType, =]
[ownerType, ., getTypeOfThis, (, ), ;, String, delegateName, =, codingConvention, ., getDelegateSuperclassName, (, ), ;, JSType, delegateType, =, delegateName, ==]
[getTypeOfThis, (, ), ;, String, delegateName, =, codingConvention, ., getDelegateSuperclassName, (, ), ;, JSType, delegateType, =, delegateName, ==, null, ?]
[), ;, String, delegateName, =, codingConvention, ., getDelegateSuperclassName, (, ), ;, JSType, delegateType, =, delegateName, ==, null, ?, null, :]
[), ;, String, delegateName, =, codingConvention, ., getDelegateSuperclassName, (, ), ;, JSType, delegateType, =, delegateName, ==, null, ?, null, :]
[=, codingConvention, ., getDelegateSuperclassName, (, ), ;, JSType, delegateType, =, delegateName, ==, null, ?, null, :, typeRegistry, ., getType, (]
[), ;, JSType, delegateType, =, delegateName, ==, null, ?, null, :, typeRegistry, ., getType, (, delegateName, ), ;, if, (]
[), ;, JSType, delegateType, =, delegateName, ==, null, ?, null, :, typeRegistry, ., getType, (, delegateName, ), ;, if, (]
[), ;, JSType, delegateType, =, delegateName, ==, null, ?, null, :, typeRegistry, ., getType, (, delegateName, ), ;, if, (]
[JSType, delegateType, =, delegateName, ==, null, ?, null, :, typeRegistry, ., getType, (, delegateName, ), ;, if, (, delegateType, !=]
[=, delegateName, ==, null, ?, null, :, typeRegistry, ., getType, (, delegateName, ), ;, if, (, delegateType, !=, null, &&]
[=, delegateName, ==, null, ?, null, :, typeRegistry, ., getType, (, delegateName, ), ;, if, (, delegateType, !=, null, &&]
[?, null, :, typeRegistry, ., getType, (, delegateName, ), ;, if, (, delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (]
[., getType, (, delegateName, ), ;, if, (, delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (, delegateType, ), ), {]
[(, delegateName, ), ;, if, (, delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (, delegateType, ), ), {, defineSlot, (]
[), ;, if, (, delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (, delegateType, ), ), {, defineSlot, (, n, ,]
[if, (, delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (, delegateType, ), ), {, defineSlot, (, n, ,, parent, ,]
[delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (, delegateType, ), ), {, defineSlot, (, n, ,, parent, ,, getNativeType, (]
[&&, ownerTypeOfThis, ., isSubtype, (, delegateType, ), ), {, defineSlot, (, n, ,, parent, ,, getNativeType, (, BOOLEAN_TYPE, ), ,]
[isQualifiedNameInferred, (, String, qName, ,, Node, n, ,, JSDocInfo, info, ,, Node, rhsValue, ,, JSType, valueType, ), {, if, (]
[isQualifiedNameInferred, (, String, qName, ,, Node, n, ,, JSDocInfo, info, ,, Node, rhsValue, ,, JSType, valueType, ), {, if, (]
[String, qName, ,, Node, n, ,, JSDocInfo, info, ,, Node, rhsValue, ,, JSType, valueType, ), {, if, (, valueType, ==]
[n, ,, JSDocInfo, info, ,, Node, rhsValue, ,, JSType, valueType, ), {, if, (, valueType, ==, null, ), {, return]
[rhsValue, ,, JSType, valueType, ), {, if, (, valueType, ==, null, ), {, return, true, ;, }, boolean, inferred, =]
[), {, if, (, valueType, ==, null, ), {, return, true, ;, }, boolean, inferred, =, true, ;, if, (]
[), {, if, (, valueType, ==, null, ), {, return, true, ;, }, boolean, inferred, =, true, ;, if, (]
[if, (, valueType, ==, null, ), {, return, true, ;, }, boolean, inferred, =, true, ;, if, (, info, !=]
[==, null, ), {, return, true, ;, }, boolean, inferred, =, true, ;, if, (, info, !=, null, ), {]
[), {, return, true, ;, }, boolean, inferred, =, true, ;, if, (, info, !=, null, ), {, inferred, =]
[{, return, true, ;, }, boolean, inferred, =, true, ;, if, (, info, !=, null, ), {, inferred, =, !]
[return, true, ;, }, boolean, inferred, =, true, ;, if, (, info, !=, null, ), {, inferred, =, !, (]
[return, true, ;, }, boolean, inferred, =, true, ;, if, (, info, !=, null, ), {, inferred, =, !, (]
[return, true, ;, }, boolean, inferred, =, true, ;, if, (, info, !=, null, ), {, inferred, =, !, (]
[return, true, ;, }, boolean, inferred, =, true, ;, if, (, info, !=, null, ), {, inferred, =, !, (]
[return, true, ;, }, boolean, inferred, =, true, ;, if, (, info, !=, null, ), {, inferred, =, !, (]
[=, true, ;, if, (, info, !=, null, ), {, inferred, =, !, (, info, ., hasType, (, ), ||]
[=, true, ;, if, (, info, !=, null, ), {, inferred, =, !, (, info, ., hasType, (, ), ||]
[!=, null, ), {, inferred, =, !, (, info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||]
[null, ), {, inferred, =, !, (, info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (]
[null, ), {, inferred, =, !, (, info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (]
[null, ), {, inferred, =, !, (, info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (]
[null, ), {, inferred, =, !, (, info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (]
[(, info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (, ), &&]
[(, info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (, ), &&]
[., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (, ), &&, valueType, !=]
[(, ), ||, info, ., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (, ), &&, valueType, !=, null, &&]
[), ||, info, ., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (, ), &&, valueType, !=, null, &&, !]
[), ||, info, ., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (, ), &&, valueType, !=, null, &&, !]
[||, (, info, ., isConstant, (, ), &&, valueType, !=, null, &&, !, valueType, ., isUnknownType, (, ), ), ||]
[||, (, info, ., isConstant, (, ), &&, valueType, !=, null, &&, !, valueType, ., isUnknownType, (, ), ), ||]
[isConstant, (, ), &&, valueType, !=, null, &&, !, valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (]
[&&, !, valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (]
[&&, !, valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (]
[&&, !, valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (]
[valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (, inferred, &&]
[valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (, inferred, &&]
[isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (, inferred, &&, rhsValue, !=]
[), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (, inferred, &&, rhsValue, !=, null, &&]
[), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (, inferred, &&, rhsValue, !=, null, &&]
[), ;, }, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue, ., isFunction, (, ), ), {, if, (]
[), ;, }, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue, ., isFunction, (, ), ), {, if, (]
[}, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue, ., isFunction, (, ), ), {, if, (, info, !=]
[&&, rhsValue, !=, null, &&, rhsValue, ., isFunction, (, ), ), {, if, (, info, !=, null, ), {, return]
[., isFunction, (, ), ), {, if, (, info, !=, null, ), {, return, false, ;, }, else, if, (]
[., isFunction, (, ), ), {, if, (, info, !=, null, ), {, return, false, ;, }, else, if, (]
[isFunction, (, ), ), {, if, (, info, !=, null, ), {, return, false, ;, }, else, if, (, !]
[isFunction, (, ), ), {, if, (, info, !=, null, ), {, return, false, ;, }, else, if, (, !]
[{, if, (, info, !=, null, ), {, return, false, ;, }, else, if, (, !, scope, ., isDeclared, (]
[(, info, !=, null, ), {, return, false, ;, }, else, if, (, !, scope, ., isDeclared, (, qName, ,]
[null, ), {, return, false, ;, }, else, if, (, !, scope, ., isDeclared, (, qName, ,, false, ), &&]
[null, ), {, return, false, ;, }, else, if, (, !, scope, ., isDeclared, (, qName, ,, false, ), &&]
[., isDeclared, (, qName, ,, false, ), &&, n, ., isUnscopedQualifiedName, (, ), ), {, for, (, Node, current, =]
[., isDeclared, (, qName, ,, false, ), &&, n, ., isUnscopedQualifiedName, (, ), ), {, for, (, Node, current, =]
[), &&, n, ., isUnscopedQualifiedName, (, ), ), {, for, (, Node, current, =, n, ., getParent, (, ), ;]
[&&, n, ., isUnscopedQualifiedName, (, ), ), {, for, (, Node, current, =, n, ., getParent, (, ), ;, !]
[n, ., isUnscopedQualifiedName, (, ), ), {, for, (, Node, current, =, n, ., getParent, (, ), ;, !, (]
[n, ., isUnscopedQualifiedName, (, ), ), {, for, (, Node, current, =, n, ., getParent, (, ), ;, !, (]
[n, ., isUnscopedQualifiedName, (, ), ), {, for, (, Node, current, =, n, ., getParent, (, ), ;, !, (]
[{, for, (, Node, current, =, n, ., getParent, (, ), ;, !, (, current, ., isScript, (, ), ||]
[{, for, (, Node, current, =, n, ., getParent, (, ), ;, !, (, current, ., isScript, (, ), ||]
[., getParent, (, ), ;, !, (, current, ., isScript, (, ), ||, current, ., isFunction, (, ), ), ;]
[(, ), ;, !, (, current, ., isScript, (, ), ||, current, ., isFunction, (, ), ), ;, current, =]
[(, ), ;, !, (, current, ., isScript, (, ), ||, current, ., isFunction, (, ), ), ;, current, =]
[), ||, current, ., isFunction, (, ), ), ;, current, =, current, ., getParent, (, ), ), {, if, (]
[), ||, current, ., isFunction, (, ), ), ;, current, =, current, ., getParent, (, ), ), {, if, (]
[isFunction, (, ), ), ;, current, =, current, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (]
[current, =, current, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, current, ), ), {, return]
[), {, if, (, NodeUtil, ., isControlStructure, (, current, ), ), {, return, true, ;, }, }, AstFunctionContents, contents, =]
[if, (, NodeUtil, ., isControlStructure, (, current, ), ), {, return, true, ;, }, }, AstFunctionContents, contents, =, getFunctionAnalysisResults, (]
[if, (, NodeUtil, ., isControlStructure, (, current, ), ), {, return, true, ;, }, }, AstFunctionContents, contents, =, getFunctionAnalysisResults, (]
[{, return, true, ;, }, }, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (]
[{, return, true, ;, }, }, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (]
[{, return, true, ;, }, }, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (]
[true, ;, }, }, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (, contents, ==]
[}, }, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (, contents, ==, null, ||]
[}, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (, contents, ==, null, ||, !]
[}, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (, contents, ==, null, ||, !]
[}, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (, contents, ==, null, ||, !]
[getRootNode, (, ), ), ;, if, (, contents, ==, null, ||, !, contents, ., getEscapedQualifiedNames, (, ), ., contains, (]
[if, (, contents, ==, null, ||, !, contents, ., getEscapedQualifiedNames, (, ), ., contains, (, qName, ), ), {, return]
[!, contents, ., getEscapedQualifiedNames, (, ), ., contains, (, qName, ), ), {, return, false, ;, }, }, }, return]
[false, ;, }, }, }, return, inferred, ;, }, private, ObjectType, getObjectSlot, (, String, slotName, ), {, Var, ownerVar, =]
[false, ;, }, }, }, return, inferred, ;, }, private, ObjectType, getObjectSlot, (, String, slotName, ), {, Var, ownerVar, =]
[}, return, inferred, ;, }, private, ObjectType, getObjectSlot, (, String, slotName, ), {, Var, ownerVar, =, scope, ., getVar, (]
[private, ObjectType, getObjectSlot, (, String, slotName, ), {, Var, ownerVar, =, scope, ., getVar, (, slotName, ), ;, if, (]
[private, ObjectType, getObjectSlot, (, String, slotName, ), {, Var, ownerVar, =, scope, ., getVar, (, slotName, ), ;, if, (]
[getObjectSlot, (, String, slotName, ), {, Var, ownerVar, =, scope, ., getVar, (, slotName, ), ;, if, (, ownerVar, !=]
[Var, ownerVar, =, scope, ., getVar, (, slotName, ), ;, if, (, ownerVar, !=, null, ), {, JSType, ownerVarType, =]
[Var, ownerVar, =, scope, ., getVar, (, slotName, ), ;, if, (, ownerVar, !=, null, ), {, JSType, ownerVarType, =]
[slotName, ), ;, if, (, ownerVar, !=, null, ), {, JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return]
[slotName, ), ;, if, (, ownerVar, !=, null, ), {, JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return]
[(, ownerVar, !=, null, ), {, JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return, ObjectType, ., cast, (]
[(, ownerVar, !=, null, ), {, JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return, ObjectType, ., cast, (]
[(, ownerVar, !=, null, ), {, JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return, ObjectType, ., cast, (]
[!=, null, ), {, JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return, ObjectType, ., cast, (, ownerVarType, ==]
[), {, JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return, ObjectType, ., cast, (, ownerVarType, ==, null, ?]
[JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return, ObjectType, ., cast, (, ownerVarType, ==, null, ?, null, :]
[JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return, ObjectType, ., cast, (, ownerVarType, ==, null, ?, null, :]
[return, ObjectType, ., cast, (, ownerVarType, ==, null, ?, null, :, ownerVarType, ., restrictByNotNullOrUndefined, (, ), ), ;, }, return]
[restrictByNotNullOrUndefined, (, ), ), ;, }, return, null, ;, }, void, resolveStubDeclarations, (, ), {, for, (, StubDeclaration, stub, :]
[return, null, ;, }, void, resolveStubDeclarations, (, ), {, for, (, StubDeclaration, stub, :, stubDeclarations, ), {, Node, n, =]
[return, null, ;, }, void, resolveStubDeclarations, (, ), {, for, (, StubDeclaration, stub, :, stubDeclarations, ), {, Node, n, =]
[), {, for, (, StubDeclaration, stub, :, stubDeclarations, ), {, Node, n, =, stub, ., node, ;, Node, parent, =]
[), {, for, (, StubDeclaration, stub, :, stubDeclarations, ), {, Node, n, =, stub, ., node, ;, Node, parent, =]
[{, Node, n, =, stub, ., node, ;, Node, parent, =, n, ., getParent, (, ), ;, String, qName, =]
[{, Node, n, =, stub, ., node, ;, Node, parent, =, n, ., getParent, (, ), ;, String, qName, =]
[parent, =, n, ., getParent, (, ), ;, String, qName, =, n, ., getQualifiedName, (, ), ;, String, propName, =]
[parent, =, n, ., getParent, (, ), ;, String, qName, =, n, ., getQualifiedName, (, ), ;, String, propName, =]
[parent, =, n, ., getParent, (, ), ;, String, qName, =, n, ., getQualifiedName, (, ), ;, String, propName, =]
[getQualifiedName, (, ), ;, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, String, ownerName, =]
[getQualifiedName, (, ), ;, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, String, ownerName, =]
[n, ., getLastChild, (, ), ., getString, (, ), ;, String, ownerName, =, stub, ., ownerName, ;, boolean, isExtern, =]
[n, ., getLastChild, (, ), ., getString, (, ), ;, String, ownerName, =, stub, ., ownerName, ;, boolean, isExtern, =]
[getString, (, ), ;, String, ownerName, =, stub, ., ownerName, ;, boolean, isExtern, =, stub, ., isExtern, ;, if, (]
[getString, (, ), ;, String, ownerName, =, stub, ., ownerName, ;, boolean, isExtern, =, stub, ., isExtern, ;, if, (]
[String, ownerName, =, stub, ., ownerName, ;, boolean, isExtern, =, stub, ., isExtern, ;, if, (, scope, ., isDeclared, (]
[=, stub, ., ownerName, ;, boolean, isExtern, =, stub, ., isExtern, ;, if, (, scope, ., isDeclared, (, qName, ,]
[isExtern, ;, if, (, scope, ., isDeclared, (, qName, ,, false, ), ), {, continue, ;, }, ObjectType, ownerType, =]
[if, (, scope, ., isDeclared, (, qName, ,, false, ), ), {, continue, ;, }, ObjectType, ownerType, =, getObjectSlot, (]
[., isDeclared, (, qName, ,, false, ), ), {, continue, ;, }, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;]
[(, qName, ,, false, ), ), {, continue, ;, }, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, defineSlot, (]
[,, false, ), ), {, continue, ;, }, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, defineSlot, (, n, ,]
[), ), {, continue, ;, }, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, defineSlot, (, n, ,, parent, ,]
[{, continue, ;, }, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, defineSlot, (, n, ,, parent, ,, unknownType, ,]
[ownerType, =, getObjectSlot, (, ownerName, ), ;, defineSlot, (, n, ,, parent, ,, unknownType, ,, true, ), ;, if, (]
[ownerType, =, getObjectSlot, (, ownerName, ), ;, defineSlot, (, n, ,, parent, ,, unknownType, ,, true, ), ;, if, (]
[ownerType, =, getObjectSlot, (, ownerName, ), ;, defineSlot, (, n, ,, parent, ,, unknownType, ,, true, ), ;, if, (]
[getObjectSlot, (, ownerName, ), ;, defineSlot, (, n, ,, parent, ,, unknownType, ,, true, ), ;, if, (, ownerType, !=]
[ownerName, ), ;, defineSlot, (, n, ,, parent, ,, unknownType, ,, true, ), ;, if, (, ownerType, !=, null, &&]
[), ;, defineSlot, (, n, ,, parent, ,, unknownType, ,, true, ), ;, if, (, ownerType, !=, null, &&, (]
[), ;, defineSlot, (, n, ,, parent, ,, unknownType, ,, true, ), ;, if, (, ownerType, !=, null, &&, (]
[defineSlot, (, n, ,, parent, ,, unknownType, ,, true, ), ;, if, (, ownerType, !=, null, &&, (, isExtern, ||]
[defineSlot, (, n, ,, parent, ,, unknownType, ,, true, ), ;, if, (, ownerType, !=, null, &&, (, isExtern, ||]
[true, ), ;, if, (, ownerType, !=, null, &&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, ), ), ), {]
[true, ), ;, if, (, ownerType, !=, null, &&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, ), ), ), {]
[(, ownerType, !=, null, &&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, ), ), ), {, ownerType, ., defineInferredProperty, (]
[!=, null, &&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, ), ), ), {, ownerType, ., defineInferredProperty, (, propName, ,]
[&&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, ), ), ), {, ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,]
[isFunctionPrototypeType, (, ), ), ), {, ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;, }, else, {]
[isFunctionPrototypeType, (, ), ), ), {, ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;, }, else, {]
[), {, ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType, (]
[ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType, (, propName, ,]
[ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType, (, propName, ,]
[ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType, (, propName, ,]
[defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType, (, propName, ,, ownerType, ==]
[propName, ,, unknownType, ,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType, (, propName, ,, ownerType, ==, null, ?]
[unknownType, ,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType, (, propName, ,, ownerType, ==, null, ?, unknownType, :]
[}, }, private, final, class, CollectProperties, extends, AbstractShallowStatementCallback, {, private, final, JSType, thisType, ;, CollectProperties, (, JSType, thisType, ), {]
[}, }, private, final, class, CollectProperties, extends, AbstractShallowStatementCallback, {, private, final, JSType, thisType, ;, CollectProperties, (, JSType, thisType, ), {]
[class, CollectProperties, extends, AbstractShallowStatementCallback, {, private, final, JSType, thisType, ;, CollectProperties, (, JSType, thisType, ), {, this, ., thisType, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isExprResult, (, ), ), {, Node, child, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isExprResult, (, ), ), {, Node, child, =]
[if, (, n, ., isExprResult, (, ), ), {, Node, child, =, n, ., getFirstChild, (, ), ;, switch, (]
[if, (, n, ., isExprResult, (, ), ), {, Node, child, =, n, ., getFirstChild, (, ), ;, switch, (]
[{, Node, child, =, n, ., getFirstChild, (, ), ;, switch, (, child, ., getType, (, ), ), {, case]
[{, Node, child, =, n, ., getFirstChild, (, ), ;, switch, (, child, ., getType, (, ), ), {, case]
[n, ., getFirstChild, (, ), ;, switch, (, child, ., getType, (, ), ), {, case, Token, ., ASSIGN, :]
[getFirstChild, (, ), ;, switch, (, child, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, maybeCollectMember, (]
[), ;, switch, (, child, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, maybeCollectMember, (, t, ,]
[), ;, switch, (, child, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, maybeCollectMember, (, t, ,]
[getType, (, ), ), {, case, Token, ., ASSIGN, :, maybeCollectMember, (, t, ,, child, ., getFirstChild, (, ), ,]
[), ), {, case, Token, ., ASSIGN, :, maybeCollectMember, (, t, ,, child, ., getFirstChild, (, ), ,, child, ,]
[), ), {, case, Token, ., ASSIGN, :, maybeCollectMember, (, t, ,, child, ., getFirstChild, (, ), ,, child, ,]
[t, ,, child, ., getFirstChild, (, ), ,, child, ,, child, ., getLastChild, (, ), ), ;, break, ;, case]
[t, ,, child, ., getFirstChild, (, ), ,, child, ,, child, ., getLastChild, (, ), ), ;, break, ;, case]
[getFirstChild, (, ), ,, child, ,, child, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., GETPROP, :]
[), ,, child, ,, child, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., GETPROP, :, maybeCollectMember, (]
[child, ,, child, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., GETPROP, :, maybeCollectMember, (, t, ,]
[child, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., GETPROP, :, maybeCollectMember, (, t, ,, child, ,]
[getLastChild, (, ), ), ;, break, ;, case, Token, ., GETPROP, :, maybeCollectMember, (, t, ,, child, ,, child, ,]
[maybeCollectMember, (, NodeTraversal, t, ,, Node, member, ,, Node, nodeWithJsDocInfo, ,, @, Nullable, Node, value, ), {, JSDocInfo, info, =]
[maybeCollectMember, (, NodeTraversal, t, ,, Node, member, ,, Node, nodeWithJsDocInfo, ,, @, Nullable, Node, value, ), {, JSDocInfo, info, =]
[Node, nodeWithJsDocInfo, ,, @, Nullable, Node, value, ), {, JSDocInfo, info, =, nodeWithJsDocInfo, ., getJSDocInfo, (, ), ;, if, (]
[Node, nodeWithJsDocInfo, ,, @, Nullable, Node, value, ), {, JSDocInfo, info, =, nodeWithJsDocInfo, ., getJSDocInfo, (, ), ;, if, (]
[Node, nodeWithJsDocInfo, ,, @, Nullable, Node, value, ), {, JSDocInfo, info, =, nodeWithJsDocInfo, ., getJSDocInfo, (, ), ;, if, (]
[Node, nodeWithJsDocInfo, ,, @, Nullable, Node, value, ), {, JSDocInfo, info, =, nodeWithJsDocInfo, ., getJSDocInfo, (, ), ;, if, (]
[,, @, Nullable, Node, value, ), {, JSDocInfo, info, =, nodeWithJsDocInfo, ., getJSDocInfo, (, ), ;, if, (, info, ==]
[Nullable, Node, value, ), {, JSDocInfo, info, =, nodeWithJsDocInfo, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ||]
[Node, value, ), {, JSDocInfo, info, =, nodeWithJsDocInfo, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ||, !]
[Node, value, ), {, JSDocInfo, info, =, nodeWithJsDocInfo, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ||, !]
[=, nodeWithJsDocInfo, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ||, !, member, ., isGetProp, (, ), ||]
[nodeWithJsDocInfo, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ||, !, member, ., isGetProp, (, ), ||, !]
[nodeWithJsDocInfo, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ||, !, member, ., isGetProp, (, ), ||, !]
[nodeWithJsDocInfo, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ||, !, member, ., isGetProp, (, ), ||, !]
[., isGetProp, (, ), ||, !, member, ., getFirstChild, (, ), ., isThis, (, ), ), {, return, ;, }]
[., isGetProp, (, ), ||, !, member, ., getFirstChild, (, ), ., isThis, (, ), ), {, return, ;, }]
[., isGetProp, (, ), ||, !, member, ., getFirstChild, (, ), ., isThis, (, ), ), {, return, ;, }]
[getFirstChild, (, ), ., isThis, (, ), ), {, return, ;, }, member, ., getFirstChild, (, ), ., setJSType, (]
[), ), {, return, ;, }, member, ., getFirstChild, (, ), ., setJSType, (, thisType, ), ;, JSType, jsType, =]
[{, return, ;, }, member, ., getFirstChild, (, ), ., setJSType, (, thisType, ), ;, JSType, jsType, =, getDeclaredType, (]
[{, return, ;, }, member, ., getFirstChild, (, ), ., setJSType, (, thisType, ), ;, JSType, jsType, =, getDeclaredType, (]
[getFirstChild, (, ), ., setJSType, (, thisType, ), ;, JSType, jsType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,]
[), ., setJSType, (, thisType, ), ;, JSType, jsType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,]
[setJSType, (, thisType, ), ;, JSType, jsType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, member, ,]
[jsType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, member, ,, value, ), ;, Node, name, =]
[jsType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, member, ,, value, ), ;, Node, name, =]
[), ,, info, ,, member, ,, value, ), ;, Node, name, =, member, ., getLastChild, (, ), ;, if, (]
[), ,, info, ,, member, ,, value, ), ;, Node, name, =, member, ., getLastChild, (, ), ;, if, (]
[), ,, info, ,, member, ,, value, ), ;, Node, name, =, member, ., getLastChild, (, ), ;, if, (]
[), ,, info, ,, member, ,, value, ), ;, Node, name, =, member, ., getLastChild, (, ), ;, if, (]
[info, ,, member, ,, value, ), ;, Node, name, =, member, ., getLastChild, (, ), ;, if, (, jsType, !=]
[member, ,, value, ), ;, Node, name, =, member, ., getLastChild, (, ), ;, if, (, jsType, !=, null, &&]
[,, value, ), ;, Node, name, =, member, ., getLastChild, (, ), ;, if, (, jsType, !=, null, &&, (]
[,, value, ), ;, Node, name, =, member, ., getLastChild, (, ), ;, if, (, jsType, !=, null, &&, (]
[,, value, ), ;, Node, name, =, member, ., getLastChild, (, ), ;, if, (, jsType, !=, null, &&, (]
[=, member, ., getLastChild, (, ), ;, if, (, jsType, !=, null, &&, (, name, ., isName, (, ), ||]
[=, member, ., getLastChild, (, ), ;, if, (, jsType, !=, null, &&, (, name, ., isName, (, ), ||]
[if, (, jsType, !=, null, &&, (, name, ., isName, (, ), ||, name, ., isString, (, ), ), &&]
[if, (, jsType, !=, null, &&, (, name, ., isName, (, ), ||, name, ., isString, (, ), ), &&]
[if, (, jsType, !=, null, &&, (, name, ., isName, (, ), ||, name, ., isString, (, ), ), &&]
[(, name, ., isName, (, ), ||, name, ., isString, (, ), ), &&, thisType, ., toObjectType, (, ), !=]
[isName, (, ), ||, name, ., isString, (, ), ), &&, thisType, ., toObjectType, (, ), !=, null, ), {]
[isName, (, ), ||, name, ., isString, (, ), ), &&, thisType, ., toObjectType, (, ), !=, null, ), {]
[isName, (, ), ||, name, ., isString, (, ), ), &&, thisType, ., toObjectType, (, ), !=, null, ), {]
[), ), &&, thisType, ., toObjectType, (, ), !=, null, ), {, thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (]
[), ), &&, thisType, ., toObjectType, (, ), !=, null, ), {, thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (]
[(, ), !=, null, ), {, thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (, name, ., getString, (, ), ,]
[!=, null, ), {, thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (, name, ., getString, (, ), ,, jsType, ,]
[isExtern, ;, private, final, String, ownerName, ;, private, StubDeclaration, (, Node, node, ,, boolean, isExtern, ,, String, ownerName, ), {]
[isExtern, ;, private, final, String, ownerName, ;, private, StubDeclaration, (, Node, node, ,, boolean, isExtern, ,, String, ownerName, ), {]
[String, ownerName, ;, private, StubDeclaration, (, Node, node, ,, boolean, isExtern, ,, String, ownerName, ), {, this, ., node, =]
[;, private, StubDeclaration, (, Node, node, ,, boolean, isExtern, ,, String, ownerName, ), {, this, ., node, =, node, ;]
[;, private, StubDeclaration, (, Node, node, ,, boolean, isExtern, ,, String, ownerName, ), {, this, ., node, =, node, ;]
[Node, node, ,, boolean, isExtern, ,, String, ownerName, ), {, this, ., node, =, node, ;, this, ., isExtern, =]
[,, boolean, isExtern, ,, String, ownerName, ), {, this, ., node, =, node, ;, this, ., isExtern, =, isExtern, ;]
[,, boolean, isExtern, ,, String, ownerName, ), {, this, ., node, =, node, ;, this, ., isExtern, =, isExtern, ;]
[String, ownerName, ), {, this, ., node, =, node, ;, this, ., isExtern, =, isExtern, ;, this, ., ownerName, =]
[ownerName, ;, }, }, private, final, class, GlobalScopeBuilder, extends, AbstractScopeBuilder, {, private, GlobalScopeBuilder, (, Scope, scope, ), {, super, (]
[scope, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[scope, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, super, ., visit, (]
[public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, super, ., visit, (, t, ,]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, super, ., visit, (, t, ,, n, ,]
[Node, n, ,, Node, parent, ), {, super, ., visit, (, t, ,, n, ,, parent, ), ;, switch, (]
[Node, n, ,, Node, parent, ), {, super, ., visit, (, t, ,, n, ,, parent, ), ;, switch, (]
[., visit, (, t, ,, n, ,, parent, ), ;, switch, (, n, ., getType, (, ), ), {, case]
[., visit, (, t, ,, n, ,, parent, ), ;, switch, (, n, ., getType, (, ), ), {, case]
[,, parent, ), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :, if, (]
[,, parent, ), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :, if, (]
[., getType, (, ), ), {, case, Token, ., VAR, :, if, (, n, ., hasOneChild, (, ), ), {]
[(, ), ), {, case, Token, ., VAR, :, if, (, n, ., hasOneChild, (, ), ), {, checkForTypedef, (]
[), {, case, Token, ., VAR, :, if, (, n, ., hasOneChild, (, ), ), {, checkForTypedef, (, t, ,]
[), {, case, Token, ., VAR, :, if, (, n, ., hasOneChild, (, ), ), {, checkForTypedef, (, t, ,]
[:, if, (, n, ., hasOneChild, (, ), ), {, checkForTypedef, (, t, ,, n, ., getFirstChild, (, ), ,]
[:, if, (, n, ., hasOneChild, (, ), ), {, checkForTypedef, (, t, ,, n, ., getFirstChild, (, ), ,]
[Override, void, maybeDeclareQualifiedName, (, NodeTraversal, t, ,, JSDocInfo, info, ,, Node, n, ,, Node, parent, ,, Node, rhsValue, ), {]
[maybeDeclareQualifiedName, (, NodeTraversal, t, ,, JSDocInfo, info, ,, Node, n, ,, Node, parent, ,, Node, rhsValue, ), {, checkForTypedef, (]
[NodeTraversal, t, ,, JSDocInfo, info, ,, Node, n, ,, Node, parent, ,, Node, rhsValue, ), {, checkForTypedef, (, t, ,]
[,, JSDocInfo, info, ,, Node, n, ,, Node, parent, ,, Node, rhsValue, ), {, checkForTypedef, (, t, ,, n, ,]
[,, Node, n, ,, Node, parent, ,, Node, rhsValue, ), {, checkForTypedef, (, t, ,, n, ,, info, ), ;]
[,, Node, n, ,, Node, parent, ,, Node, rhsValue, ), {, checkForTypedef, (, t, ,, n, ,, info, ), ;]
[Node, parent, ,, Node, rhsValue, ), {, checkForTypedef, (, t, ,, n, ,, info, ), ;, super, ., maybeDeclareQualifiedName, (]
[,, Node, rhsValue, ), {, checkForTypedef, (, t, ,, n, ,, info, ), ;, super, ., maybeDeclareQualifiedName, (, t, ,]
[rhsValue, ), {, checkForTypedef, (, t, ,, n, ,, info, ), ;, super, ., maybeDeclareQualifiedName, (, t, ,, info, ,]
[{, checkForTypedef, (, t, ,, n, ,, info, ), ;, super, ., maybeDeclareQualifiedName, (, t, ,, info, ,, n, ,]
[(, t, ,, n, ,, info, ), ;, super, ., maybeDeclareQualifiedName, (, t, ,, info, ,, n, ,, parent, ,]
[rhsValue, ), ;, }, private, void, checkForTypedef, (, NodeTraversal, t, ,, Node, candidate, ,, JSDocInfo, info, ), {, if, (]
[rhsValue, ), ;, }, private, void, checkForTypedef, (, NodeTraversal, t, ,, Node, candidate, ,, JSDocInfo, info, ), {, if, (]
[rhsValue, ), ;, }, private, void, checkForTypedef, (, NodeTraversal, t, ,, Node, candidate, ,, JSDocInfo, info, ), {, if, (]
[;, }, private, void, checkForTypedef, (, NodeTraversal, t, ,, Node, candidate, ,, JSDocInfo, info, ), {, if, (, info, ==]
[private, void, checkForTypedef, (, NodeTraversal, t, ,, Node, candidate, ,, JSDocInfo, info, ), {, if, (, info, ==, null, ||]
[void, checkForTypedef, (, NodeTraversal, t, ,, Node, candidate, ,, JSDocInfo, info, ), {, if, (, info, ==, null, ||, !]
[void, checkForTypedef, (, NodeTraversal, t, ,, Node, candidate, ,, JSDocInfo, info, ), {, if, (, info, ==, null, ||, !]
[if, (, info, ==, null, ||, !, info, ., hasTypedefType, (, ), ), {, return, ;, }, String, typedef, =]
[if, (, info, ==, null, ||, !, info, ., hasTypedefType, (, ), ), {, return, ;, }, String, typedef, =]
[., hasTypedefType, (, ), ), {, return, ;, }, String, typedef, =, candidate, ., getQualifiedName, (, ), ;, if, (]
[., hasTypedefType, (, ), ), {, return, ;, }, String, typedef, =, candidate, ., getQualifiedName, (, ), ;, if, (]
[(, ), ), {, return, ;, }, String, typedef, =, candidate, ., getQualifiedName, (, ), ;, if, (, typedef, ==]
[}, String, typedef, =, candidate, ., getQualifiedName, (, ), ;, if, (, typedef, ==, null, ), {, return, ;, }]
[}, String, typedef, =, candidate, ., getQualifiedName, (, ), ;, if, (, typedef, ==, null, ), {, return, ;, }]
[candidate, ., getQualifiedName, (, ), ;, if, (, typedef, ==, null, ), {, return, ;, }, typeRegistry, ., declareType, (]
[getQualifiedName, (, ), ;, if, (, typedef, ==, null, ), {, return, ;, }, typeRegistry, ., declareType, (, typedef, ,]
[typedef, ==, null, ), {, return, ;, }, typeRegistry, ., declareType, (, typedef, ,, unknownType, ), ;, JSType, realType, =]
[typedef, ==, null, ), {, return, ;, }, typeRegistry, ., declareType, (, typedef, ,, unknownType, ), ;, JSType, realType, =]
[typedef, ==, null, ), {, return, ;, }, typeRegistry, ., declareType, (, typedef, ,, unknownType, ), ;, JSType, realType, =]
[typeRegistry, ., declareType, (, typedef, ,, unknownType, ), ;, JSType, realType, =, info, ., getTypedefType, (, ), ., evaluate, (]
[declareType, (, typedef, ,, unknownType, ), ;, JSType, realType, =, info, ., getTypedefType, (, ), ., evaluate, (, scope, ,]
[), ;, JSType, realType, =, info, ., getTypedefType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[), ;, JSType, realType, =, info, ., getTypedefType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[JSType, realType, =, info, ., getTypedefType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, realType, ==]
[info, ., getTypedefType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, realType, ==, null, ), {]
[info, ., getTypedefType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, realType, ==, null, ), {]
[), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, realType, ==, null, ), {, compiler, ., report, (]
[), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, realType, ==, null, ), {, compiler, ., report, (]
[scope, ,, typeRegistry, ), ;, if, (, realType, ==, null, ), {, compiler, ., report, (, JSError, ., make, (]
[scope, ,, typeRegistry, ), ;, if, (, realType, ==, null, ), {, compiler, ., report, (, JSError, ., make, (]
[(, realType, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,]
[==, null, ), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, candidate, ,]
[), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, candidate, ,, MALFORMED_TYPEDEF, ,]
[(, JSError, ., make, (, t, ., getSourceName, (, ), ,, candidate, ,, MALFORMED_TYPEDEF, ,, typedef, ), ), ;, }]
[(, JSError, ., make, (, t, ., getSourceName, (, ), ,, candidate, ,, MALFORMED_TYPEDEF, ,, typedef, ), ), ;, }]
[(, t, ., getSourceName, (, ), ,, candidate, ,, MALFORMED_TYPEDEF, ,, typedef, ), ), ;, }, typeRegistry, ., overwriteDeclaredType, (]
[., getSourceName, (, ), ,, candidate, ,, MALFORMED_TYPEDEF, ,, typedef, ), ), ;, }, typeRegistry, ., overwriteDeclaredType, (, typedef, ,]
[candidate, ,, MALFORMED_TYPEDEF, ,, typedef, ), ), ;, }, typeRegistry, ., overwriteDeclaredType, (, typedef, ,, realType, ), ;, if, (]
[candidate, ,, MALFORMED_TYPEDEF, ,, typedef, ), ), ;, }, typeRegistry, ., overwriteDeclaredType, (, typedef, ,, realType, ), ;, if, (]
[;, }, typeRegistry, ., overwriteDeclaredType, (, typedef, ,, realType, ), ;, if, (, candidate, ., isGetProp, (, ), ), {]
[typeRegistry, ., overwriteDeclaredType, (, typedef, ,, realType, ), ;, if, (, candidate, ., isGetProp, (, ), ), {, defineSlot, (]
[overwriteDeclaredType, (, typedef, ,, realType, ), ;, if, (, candidate, ., isGetProp, (, ), ), {, defineSlot, (, candidate, ,]
[overwriteDeclaredType, (, typedef, ,, realType, ), ;, if, (, candidate, ., isGetProp, (, ), ), {, defineSlot, (, candidate, ,]
[;, if, (, candidate, ., isGetProp, (, ), ), {, defineSlot, (, candidate, ,, candidate, ., getParent, (, ), ,]
[(, candidate, ., isGetProp, (, ), ), {, defineSlot, (, candidate, ,, candidate, ., getParent, (, ), ,, getNativeType, (]
[isGetProp, (, ), ), {, defineSlot, (, candidate, ,, candidate, ., getParent, (, ), ,, getNativeType, (, NO_TYPE, ), ,]
[;, }, }, }, private, final, class, LocalScopeBuilder, extends, AbstractScopeBuilder, {, private, LocalScopeBuilder, (, Scope, scope, ), {, super, (]
[AbstractScopeBuilder, {, private, LocalScopeBuilder, (, Scope, scope, ), {, super, (, scope, ), ;, }, void, build, (, ), {]
[AbstractScopeBuilder, {, private, LocalScopeBuilder, (, Scope, scope, ), {, super, (, scope, ), ;, }, void, build, (, ), {]
[(, Scope, scope, ), {, super, (, scope, ), ;, }, void, build, (, ), {, NodeTraversal, ., traverse, (]
[scope, ), {, super, (, scope, ), ;, }, void, build, (, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[scope, ), {, super, (, scope, ), ;, }, void, build, (, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, }, void, build, (, ), {, NodeTraversal, ., traverse, (, compiler, ,, scope, ., getRootNode, (, ), ,]
[), {, NodeTraversal, ., traverse, (, compiler, ,, scope, ., getRootNode, (, ), ,, this, ), ;, AstFunctionContents, contents, =]
[NodeTraversal, ., traverse, (, compiler, ,, scope, ., getRootNode, (, ), ,, this, ), ;, AstFunctionContents, contents, =, getFunctionAnalysisResults, (]
[NodeTraversal, ., traverse, (, compiler, ,, scope, ., getRootNode, (, ), ,, this, ), ;, AstFunctionContents, contents, =, getFunctionAnalysisResults, (]
[(, ), ,, this, ), ;, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (]
[(, ), ,, this, ), ;, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (]
[,, this, ), ;, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (, contents, !=]
[(, scope, ., getRootNode, (, ), ), ;, if, (, contents, !=, null, ), {, for, (, String, varName, :]
[(, scope, ., getRootNode, (, ), ), ;, if, (, contents, !=, null, ), {, for, (, String, varName, :]
[contents, !=, null, ), {, for, (, String, varName, :, contents, ., getEscapedVarNames, (, ), ), {, Var, v, =]
[contents, !=, null, ), {, for, (, String, varName, :, contents, ., getEscapedVarNames, (, ), ), {, Var, v, =]
[{, for, (, String, varName, :, contents, ., getEscapedVarNames, (, ), ), {, Var, v, =, scope, ., getVar, (]
[String, varName, :, contents, ., getEscapedVarNames, (, ), ), {, Var, v, =, scope, ., getVar, (, varName, ), ;]
[String, varName, :, contents, ., getEscapedVarNames, (, ), ), {, Var, v, =, scope, ., getVar, (, varName, ), ;]
[., getEscapedVarNames, (, ), ), {, Var, v, =, scope, ., getVar, (, varName, ), ;, Preconditions, ., checkState, (]
[., getEscapedVarNames, (, ), ), {, Var, v, =, scope, ., getVar, (, varName, ), ;, Preconditions, ., checkState, (]
[., getEscapedVarNames, (, ), ), {, Var, v, =, scope, ., getVar, (, varName, ), ;, Preconditions, ., checkState, (]
[Var, v, =, scope, ., getVar, (, varName, ), ;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==]
[scope, ., getVar, (, varName, ), ;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==, scope, ), ;]
[scope, ., getVar, (, varName, ), ;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==, scope, ), ;]
[scope, ), ;, v, ., markEscaped, (, ), ;, }, for, (, Multiset, ., Entry, <, String, >, entry, :]
[scope, ), ;, v, ., markEscaped, (, ), ;, }, for, (, Multiset, ., Entry, <, String, >, entry, :]
[scope, ), ;, v, ., markEscaped, (, ), ;, }, for, (, Multiset, ., Entry, <, String, >, entry, :]
[Entry, <, String, >, entry, :, contents, ., getAssignedNameCounts, (, ), ., entrySet, (, ), ), {, Var, v, =]
[Entry, <, String, >, entry, :, contents, ., getAssignedNameCounts, (, ), ., entrySet, (, ), ), {, Var, v, =]
[entry, :, contents, ., getAssignedNameCounts, (, ), ., entrySet, (, ), ), {, Var, v, =, scope, ., getVar, (]
[entry, :, contents, ., getAssignedNameCounts, (, ), ., entrySet, (, ), ), {, Var, v, =, scope, ., getVar, (]
[., entrySet, (, ), ), {, Var, v, =, scope, ., getVar, (, entry, ., getElement, (, ), ), ;]
[., entrySet, (, ), ), {, Var, v, =, scope, ., getVar, (, entry, ., getElement, (, ), ), ;]
[), {, Var, v, =, scope, ., getVar, (, entry, ., getElement, (, ), ), ;, Preconditions, ., checkState, (]
[), {, Var, v, =, scope, ., getVar, (, entry, ., getElement, (, ), ), ;, Preconditions, ., checkState, (]
[), {, Var, v, =, scope, ., getVar, (, entry, ., getElement, (, ), ), ;, Preconditions, ., checkState, (]
[., getVar, (, entry, ., getElement, (, ), ), ;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==]
[getElement, (, ), ), ;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==, scope, ), ;, if, (]
[getElement, (, ), ), ;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==, scope, ), ;, if, (]
[getElement, (, ), ), ;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==, scope, ), ;, if, (]
[., checkState, (, v, ., getScope, (, ), ==, scope, ), ;, if, (, entry, ., getCount, (, ), ==]
[v, ., getScope, (, ), ==, scope, ), ;, if, (, entry, ., getCount, (, ), ==, 1, ), {]
[v, ., getScope, (, ), ==, scope, ), ;, if, (, entry, ., getCount, (, ), ==, 1, ), {]
[}, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ==]
[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ==]
[n, ,, Node, parent, ), {, if, (, n, ==, scope, ., getRootNode, (, ), ), return, ;, if, (]
[n, ,, Node, parent, ), {, if, (, n, ==, scope, ., getRootNode, (, ), ), return, ;, if, (]
[n, ,, Node, parent, ), {, if, (, n, ==, scope, ., getRootNode, (, ), ), return, ;, if, (]
[if, (, n, ==, scope, ., getRootNode, (, ), ), return, ;, if, (, n, ., isParamList, (, ), &&]
[if, (, n, ==, scope, ., getRootNode, (, ), ), return, ;, if, (, n, ., isParamList, (, ), &&]
[n, ==, scope, ., getRootNode, (, ), ), return, ;, if, (, n, ., isParamList, (, ), &&, parent, ==]
[n, ==, scope, ., getRootNode, (, ), ), return, ;, if, (, n, ., isParamList, (, ), &&, parent, ==]
[), return, ;, if, (, n, ., isParamList, (, ), &&, parent, ==, scope, ., getRootNode, (, ), ), {]
[;, if, (, n, ., isParamList, (, ), &&, parent, ==, scope, ., getRootNode, (, ), ), {, handleFunctionInputs, (]
[(, ), &&, parent, ==, scope, ., getRootNode, (, ), ), {, handleFunctionInputs, (, parent, ), ;, return, ;, }]
[(, ), &&, parent, ==, scope, ., getRootNode, (, ), ), {, handleFunctionInputs, (, parent, ), ;, return, ;, }]
[==, scope, ., getRootNode, (, ), ), {, handleFunctionInputs, (, parent, ), ;, return, ;, }, super, ., visit, (]
[., getRootNode, (, ), ), {, handleFunctionInputs, (, parent, ), ;, return, ;, }, super, ., visit, (, t, ,]
[(, ), ), {, handleFunctionInputs, (, parent, ), ;, return, ;, }, super, ., visit, (, t, ,, n, ,]
[(, t, ,, n, ,, parent, ), ;, }, private, void, handleFunctionInputs, (, Node, fnNode, ), {, Node, fnNameNode, =]
[(, t, ,, n, ,, parent, ), ;, }, private, void, handleFunctionInputs, (, Node, fnNode, ), {, Node, fnNameNode, =]
[private, void, handleFunctionInputs, (, Node, fnNode, ), {, Node, fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, fnName, =]
[private, void, handleFunctionInputs, (, Node, fnNode, ), {, Node, fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, fnName, =]
[Node, fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, fnName, =, fnNameNode, ., getString, (, ), ;, if, (]
[fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, fnName, =, fnNameNode, ., getString, (, ), ;, if, (, !]
[fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, fnName, =, fnNameNode, ., getString, (, ), ;, if, (, !]
[., getString, (, ), ;, if, (, !, fnName, ., isEmpty, (, ), ), {, Scope, ., Var, fnVar, =]
[., getString, (, ), ;, if, (, !, fnName, ., isEmpty, (, ), ), {, Scope, ., Var, fnVar, =]
[;, if, (, !, fnName, ., isEmpty, (, ), ), {, Scope, ., Var, fnVar, =, scope, ., getVar, (]
[., isEmpty, (, ), ), {, Scope, ., Var, fnVar, =, scope, ., getVar, (, fnName, ), ;, if, (]
[., isEmpty, (, ), ), {, Scope, ., Var, fnVar, =, scope, ., getVar, (, fnName, ), ;, if, (]
[., isEmpty, (, ), ), {, Scope, ., Var, fnVar, =, scope, ., getVar, (, fnName, ), ;, if, (]
[(, ), ), {, Scope, ., Var, fnVar, =, scope, ., getVar, (, fnName, ), ;, if, (, fnVar, ==]
[), {, Scope, ., Var, fnVar, =, scope, ., getVar, (, fnName, ), ;, if, (, fnVar, ==, null, ||]
[{, Scope, ., Var, fnVar, =, scope, ., getVar, (, fnName, ), ;, if, (, fnVar, ==, null, ||, (]
[{, Scope, ., Var, fnVar, =, scope, ., getVar, (, fnName, ), ;, if, (, fnVar, ==, null, ||, (]
[{, Scope, ., Var, fnVar, =, scope, ., getVar, (, fnName, ), ;, if, (, fnVar, ==, null, ||, (]
[{, Scope, ., Var, fnVar, =, scope, ., getVar, (, fnName, ), ;, if, (, fnVar, ==, null, ||, (]
[scope, ., getVar, (, fnName, ), ;, if, (, fnVar, ==, null, ||, (, fnVar, ., getNameNode, (, ), !=]
[getVar, (, fnName, ), ;, if, (, fnVar, ==, null, ||, (, fnVar, ., getNameNode, (, ), !=, null, &&]
[getVar, (, fnName, ), ;, if, (, fnVar, ==, null, ||, (, fnVar, ., getNameNode, (, ), !=, null, &&]
[getVar, (, fnName, ), ;, if, (, fnVar, ==, null, ||, (, fnVar, ., getNameNode, (, ), !=, null, &&]
[(, fnVar, ==, null, ||, (, fnVar, ., getNameNode, (, ), !=, null, &&, fnVar, ., getInitialValue, (, ), !=]
[||, (, fnVar, ., getNameNode, (, ), !=, null, &&, fnVar, ., getInitialValue, (, ), !=, fnNode, ), ), {]
[fnVar, ., getNameNode, (, ), !=, null, &&, fnVar, ., getInitialValue, (, ), !=, fnNode, ), ), {, defineSlot, (]
[getNameNode, (, ), !=, null, &&, fnVar, ., getInitialValue, (, ), !=, fnNode, ), ), {, defineSlot, (, fnNameNode, ,]
[), !=, null, &&, fnVar, ., getInitialValue, (, ), !=, fnNode, ), ), {, defineSlot, (, fnNameNode, ,, fnNode, ,]
[), !=, null, &&, fnVar, ., getInitialValue, (, ), !=, fnNode, ), ), {, defineSlot, (, fnNameNode, ,, fnNode, ,]
[getInitialValue, (, ), !=, fnNode, ), ), {, defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode, ., getJSType, (, ), ,]
[), ), {, defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode, ., getJSType, (, ), ,, false, ), ;, }, }]
[{, defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode, ., getJSType, (, ), ,, false, ), ;, }, }, declareArguments, (]
[;, }, }, declareArguments, (, fnNode, ), ;, }, private, void, declareArguments, (, Node, functionNode, ), {, Node, astParameters, =]
[;, }, }, declareArguments, (, fnNode, ), ;, }, private, void, declareArguments, (, Node, functionNode, ), {, Node, astParameters, =]
[;, }, }, declareArguments, (, fnNode, ), ;, }, private, void, declareArguments, (, Node, functionNode, ), {, Node, astParameters, =]
[Node, functionNode, ), {, Node, astParameters, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, iifeArgumentNode, =]
[Node, astParameters, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, iifeArgumentNode, =, null, ;, if, (]
[Node, astParameters, =, functionNode, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, iifeArgumentNode, =, null, ;, if, (]
[., getFirstChild, (, ), ., getNext, (, ), ;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (]
[., getNext, (, ), ;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {]
[(, ), ;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =]
[(, ), ;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =]
[NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }, Node, body, =]
[NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }, Node, body, =]
[=, functionNode, ., getNext, (, ), ;, }, Node, body, =, astParameters, ., getNext, (, ), ;, FunctionType, functionType, =]
[=, functionNode, ., getNext, (, ), ;, }, Node, body, =, astParameters, ., getNext, (, ), ;, FunctionType, functionType, =]
[(, ), ;, }, Node, body, =, astParameters, ., getNext, (, ), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (]
[(, ), ;, }, Node, body, =, astParameters, ., getNext, (, ), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (]
[getNext, (, ), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (]
[getNext, (, ), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (]
[), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, functionType, !=]
[., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, functionType, !=, null, ), {, Node, jsDocParameters, =]
[., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, functionType, !=, null, ), {, Node, jsDocParameters, =]
[), ;, if, (, functionType, !=, null, ), {, Node, jsDocParameters, =, functionType, ., getParametersNode, (, ), ;, if, (]
[), ;, if, (, functionType, !=, null, ), {, Node, jsDocParameters, =, functionType, ., getParametersNode, (, ), ;, if, (]
[if, (, functionType, !=, null, ), {, Node, jsDocParameters, =, functionType, ., getParametersNode, (, ), ;, if, (, jsDocParameters, !=]
[{, Node, jsDocParameters, =, functionType, ., getParametersNode, (, ), ;, if, (, jsDocParameters, !=, null, ), {, Node, jsDocParameter, =]
[{, Node, jsDocParameters, =, functionType, ., getParametersNode, (, ), ;, if, (, jsDocParameters, !=, null, ), {, Node, jsDocParameter, =]
[(, jsDocParameters, !=, null, ), {, Node, jsDocParameter, =, jsDocParameters, ., getFirstChild, (, ), ;, for, (, Node, astParameter, :]
[(, jsDocParameters, !=, null, ), {, Node, jsDocParameter, =, jsDocParameters, ., getFirstChild, (, ), ;, for, (, Node, astParameter, :]
[., getFirstChild, (, ), ;, for, (, Node, astParameter, :, astParameters, ., children, (, ), ), {, JSType, paramType, =]
[., getFirstChild, (, ), ;, for, (, Node, astParameter, :, astParameters, ., children, (, ), ), {, JSType, paramType, =]
[., getFirstChild, (, ), ;, for, (, Node, astParameter, :, astParameters, ., children, (, ), ), {, JSType, paramType, =]
[(, ), ;, for, (, Node, astParameter, :, astParameters, ., children, (, ), ), {, JSType, paramType, =, jsDocParameter, ==]
[;, for, (, Node, astParameter, :, astParameters, ., children, (, ), ), {, JSType, paramType, =, jsDocParameter, ==, null, ?]
[(, Node, astParameter, :, astParameters, ., children, (, ), ), {, JSType, paramType, =, jsDocParameter, ==, null, ?, unknownType, :]
[(, Node, astParameter, :, astParameters, ., children, (, ), ), {, JSType, paramType, =, jsDocParameter, ==, null, ?, unknownType, :]
[), {, JSType, paramType, =, jsDocParameter, ==, null, ?, unknownType, :, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =]
[), {, JSType, paramType, =, jsDocParameter, ==, null, ?, unknownType, :, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =]
[), {, JSType, paramType, =, jsDocParameter, ==, null, ?, unknownType, :, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =]
[JSType, paramType, =, jsDocParameter, ==, null, ?, unknownType, :, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =, paramType, ==]
[=, jsDocParameter, ==, null, ?, unknownType, :, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =, paramType, ==, null, ||]
[=, jsDocParameter, ==, null, ?, unknownType, :, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =, paramType, ==, null, ||]
[==, null, ?, unknownType, :, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =, paramType, ==, null, ||, paramType, ==]
[:, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =, paramType, ==, null, ||, paramType, ==, unknownType, ;, if, (]
[:, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =, paramType, ==, null, ||, paramType, ==, unknownType, ;, if, (]
[:, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =, paramType, ==, null, ||, paramType, ==, unknownType, ;, if, (]
[., getJSType, (, ), ;, boolean, inferred, =, paramType, ==, null, ||, paramType, ==, unknownType, ;, if, (, iifeArgumentNode, !=]
[(, ), ;, boolean, inferred, =, paramType, ==, null, ||, paramType, ==, unknownType, ;, if, (, iifeArgumentNode, !=, null, &&]
[paramType, ==, null, ||, paramType, ==, unknownType, ;, if, (, iifeArgumentNode, !=, null, &&, inferred, ), {, String, argumentName, =]
[paramType, ==, null, ||, paramType, ==, unknownType, ;, if, (, iifeArgumentNode, !=, null, &&, inferred, ), {, String, argumentName, =]
[(, iifeArgumentNode, !=, null, &&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =]
[(, iifeArgumentNode, !=, null, &&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =]
[(, iifeArgumentNode, !=, null, &&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =]
[(, iifeArgumentNode, !=, null, &&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =]
[!=, null, &&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =, argumentName, ==]
[&&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =, argumentName, ==, null, ||]
[&&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =, argumentName, ==, null, ||]
[&&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =, argumentName, ==, null, ||]
[=, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =, argumentName, ==, null, ||, scope, ., getParent, (, ), ==]
[., getQualifiedName, (, ), ;, Var, argumentVar, =, argumentName, ==, null, ||, scope, ., getParent, (, ), ==, null, ?]
[(, ), ;, Var, argumentVar, =, argumentName, ==, null, ||, scope, ., getParent, (, ), ==, null, ?, null, :]
[(, ), ;, Var, argumentVar, =, argumentName, ==, null, ||, scope, ., getParent, (, ), ==, null, ?, null, :]
[(, ), ;, Var, argumentVar, =, argumentName, ==, null, ||, scope, ., getParent, (, ), ==, null, ?, null, :]
[null, ||, scope, ., getParent, (, ), ==, null, ?, null, :, scope, ., getParent, (, ), ., getVar, (]
[(, ), ==, null, ?, null, :, scope, ., getParent, (, ), ., getVar, (, argumentName, ), ;, if, (]
[(, ), ==, null, ?, null, :, scope, ., getParent, (, ), ., getVar, (, argumentName, ), ;, if, (]
[(, ), ==, null, ?, null, :, scope, ., getParent, (, ), ., getVar, (, argumentName, ), ;, if, (]
[==, null, ?, null, :, scope, ., getParent, (, ), ., getVar, (, argumentName, ), ;, if, (, argumentVar, !=]
[?, null, :, scope, ., getParent, (, ), ., getVar, (, argumentName, ), ;, if, (, argumentVar, !=, null, &&]
[null, :, scope, ., getParent, (, ), ., getVar, (, argumentName, ), ;, if, (, argumentVar, !=, null, &&, !]
[null, :, scope, ., getParent, (, ), ., getVar, (, argumentName, ), ;, if, (, argumentVar, !=, null, &&, !]
[., getVar, (, argumentName, ), ;, if, (, argumentVar, !=, null, &&, !, argumentVar, ., isTypeInferred, (, ), ), {]
[(, argumentName, ), ;, if, (, argumentVar, !=, null, &&, !, argumentVar, ., isTypeInferred, (, ), ), {, paramType, =]
[(, argumentName, ), ;, if, (, argumentVar, !=, null, &&, !, argumentVar, ., isTypeInferred, (, ), ), {, paramType, =]
[!, argumentVar, ., isTypeInferred, (, ), ), {, paramType, =, argumentVar, ., getType, (, ), ;, }, }, if, (]
[!, argumentVar, ., isTypeInferred, (, ), ), {, paramType, =, argumentVar, ., getType, (, ), ;, }, }, if, (]
[., isTypeInferred, (, ), ), {, paramType, =, argumentVar, ., getType, (, ), ;, }, }, if, (, paramType, ==]
[), ), {, paramType, =, argumentVar, ., getType, (, ), ;, }, }, if, (, paramType, ==, null, ), {]
[{, paramType, =, argumentVar, ., getType, (, ), ;, }, }, if, (, paramType, ==, null, ), {, paramType, =]
[argumentVar, ., getType, (, ), ;, }, }, if, (, paramType, ==, null, ), {, paramType, =, unknownType, ;, }]
[getType, (, ), ;, }, }, if, (, paramType, ==, null, ), {, paramType, =, unknownType, ;, }, defineSlot, (]
[), ;, }, }, if, (, paramType, ==, null, ), {, paramType, =, unknownType, ;, }, defineSlot, (, astParameter, ,]
[}, }, if, (, paramType, ==, null, ), {, paramType, =, unknownType, ;, }, defineSlot, (, astParameter, ,, functionNode, ,]
[if, (, paramType, ==, null, ), {, paramType, =, unknownType, ;, }, defineSlot, (, astParameter, ,, functionNode, ,, paramType, ,]
[), {, paramType, =, unknownType, ;, }, defineSlot, (, astParameter, ,, functionNode, ,, paramType, ,, inferred, ), ;, if, (]
[), {, paramType, =, unknownType, ;, }, defineSlot, (, astParameter, ,, functionNode, ,, paramType, ,, inferred, ), ;, if, (]
[paramType, =, unknownType, ;, }, defineSlot, (, astParameter, ,, functionNode, ,, paramType, ,, inferred, ), ;, if, (, jsDocParameter, !=]
[;, }, defineSlot, (, astParameter, ,, functionNode, ,, paramType, ,, inferred, ), ;, if, (, jsDocParameter, !=, null, ), {]
[defineSlot, (, astParameter, ,, functionNode, ,, paramType, ,, inferred, ), ;, if, (, jsDocParameter, !=, null, ), {, jsDocParameter, =]
[defineSlot, (, astParameter, ,, functionNode, ,, paramType, ,, inferred, ), ;, if, (, jsDocParameter, !=, null, ), {, jsDocParameter, =]
[), ;, if, (, jsDocParameter, !=, null, ), {, jsDocParameter, =, jsDocParameter, ., getNext, (, ), ;, }, if, (]
[), ;, if, (, jsDocParameter, !=, null, ), {, jsDocParameter, =, jsDocParameter, ., getNext, (, ), ;, }, if, (]
[if, (, jsDocParameter, !=, null, ), {, jsDocParameter, =, jsDocParameter, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=]
[!=, null, ), {, jsDocParameter, =, jsDocParameter, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {]
[), {, jsDocParameter, =, jsDocParameter, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =]
[), {, jsDocParameter, =, jsDocParameter, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =]
[Node, ,, AstFunctionContents, >, data, ;, FirstOrderFunctionAnalyzer, (, AbstractCompiler, compiler, ,, Map, <, Node, ,, AstFunctionContents, >, outParam, ), {]
[Node, ,, AstFunctionContents, >, data, ;, FirstOrderFunctionAnalyzer, (, AbstractCompiler, compiler, ,, Map, <, Node, ,, AstFunctionContents, >, outParam, ), {]
[data, ;, FirstOrderFunctionAnalyzer, (, AbstractCompiler, compiler, ,, Map, <, Node, ,, AstFunctionContents, >, outParam, ), {, this, ., compiler, =]
[FirstOrderFunctionAnalyzer, (, AbstractCompiler, compiler, ,, Map, <, Node, ,, AstFunctionContents, >, outParam, ), {, this, ., compiler, =, compiler, ;]
[FirstOrderFunctionAnalyzer, (, AbstractCompiler, compiler, ,, Map, <, Node, ,, AstFunctionContents, >, outParam, ), {, this, ., compiler, =, compiler, ;]
[,, Map, <, Node, ,, AstFunctionContents, >, outParam, ), {, this, ., compiler, =, compiler, ;, this, ., data, =]
[data, =, outParam, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[data, =, outParam, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[outParam, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, externs, ==]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, externs, ==, null, ), {]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, externs, ==, null, ), {]
[process, (, Node, externs, ,, Node, root, ), {, if, (, externs, ==, null, ), {, NodeTraversal, ., traverse, (]
[Node, externs, ,, Node, root, ), {, if, (, externs, ==, null, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[,, Node, root, ), {, if, (, externs, ==, null, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[(, externs, ==, null, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, else, {]
[(, externs, ==, null, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, else, {]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, else, {, NodeTraversal, ., traverseRoots, (]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, else, {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, else, {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[compiler, ,, root, ,, this, ), ;, }, else, {, NodeTraversal, ., traverseRoots, (, compiler, ,, ImmutableList, ., of, (]
[root, ,, this, ), ;, }, else, {, NodeTraversal, ., traverseRoots, (, compiler, ,, ImmutableList, ., of, (, externs, ,]
[), ;, }, else, {, NodeTraversal, ., traverseRoots, (, compiler, ,, ImmutableList, ., of, (, externs, ,, root, ), ,]
[root, ), ,, this, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[), ,, this, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !]
[), ,, this, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !]
[void, enterScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope, (, ), ), {, Node, n, =]
[void, enterScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope, (, ), ), {, Node, n, =]
[{, if, (, !, t, ., inGlobalScope, (, ), ), {, Node, n, =, t, ., getScopeRoot, (, ), ;]
[{, if, (, !, t, ., inGlobalScope, (, ), ), {, Node, n, =, t, ., getScopeRoot, (, ), ;]
[t, ., inGlobalScope, (, ), ), {, Node, n, =, t, ., getScopeRoot, (, ), ;, data, ., put, (]
[inGlobalScope, (, ), ), {, Node, n, =, t, ., getScopeRoot, (, ), ;, data, ., put, (, n, ,]
[), {, Node, n, =, t, ., getScopeRoot, (, ), ;, data, ., put, (, n, ,, new, AstFunctionContents, (]
[}, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[n, ,, Node, parent, ), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (]
[n, ,, Node, parent, ), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (]
[n, ,, Node, parent, ), {, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (]
[if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (, n, ., isReturn, (, ), &&]
[if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (, n, ., isReturn, (, ), &&]
[if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, if, (, n, ., isReturn, (, ), &&]
[), ), {, return, ;, }, if, (, n, ., isReturn, (, ), &&, n, ., getFirstChild, (, ), !=]
[return, ;, }, if, (, n, ., isReturn, (, ), &&, n, ., getFirstChild, (, ), !=, null, ), {]
[return, ;, }, if, (, n, ., isReturn, (, ), &&, n, ., getFirstChild, (, ), !=, null, ), {]
[return, ;, }, if, (, n, ., isReturn, (, ), &&, n, ., getFirstChild, (, ), !=, null, ), {]
[(, n, ., isReturn, (, ), &&, n, ., getFirstChild, (, ), !=, null, ), {, data, ., get, (]
[(, n, ., isReturn, (, ), &&, n, ., getFirstChild, (, ), !=, null, ), {, data, ., get, (]
[), {, data, ., get, (, t, ., getScopeRoot, (, ), ), ., recordNonEmptyReturn, (, ), ;, }, if, (]
[), {, data, ., get, (, t, ., getScopeRoot, (, ), ), ., recordNonEmptyReturn, (, ), ;, }, if, (]
[), {, data, ., get, (, t, ., getScopeRoot, (, ), ), ., recordNonEmptyReturn, (, ), ;, }, if, (]
[t, ., getScopeRoot, (, ), ), ., recordNonEmptyReturn, (, ), ;, }, if, (, t, ., getScopeDepth, (, ), <=]
[(, ), ;, }, if, (, t, ., getScopeDepth, (, ), <=, 1, ), {, return, ;, }, if, (]
[(, ), ;, }, if, (, t, ., getScopeDepth, (, ), <=, 1, ), {, return, ;, }, if, (]
[(, ), ;, }, if, (, t, ., getScopeDepth, (, ), <=, 1, ), {, return, ;, }, if, (]
[(, ), ;, }, if, (, t, ., getScopeDepth, (, ), <=, 1, ), {, return, ;, }, if, (]
[t, ., getScopeDepth, (, ), <=, 1, ), {, return, ;, }, if, (, n, ., isName, (, ), &&]
[t, ., getScopeDepth, (, ), <=, 1, ), {, return, ;, }, if, (, n, ., isName, (, ), &&]
[), <=, 1, ), {, return, ;, }, if, (, n, ., isName, (, ), &&, NodeUtil, ., isLValue, (]
[), {, return, ;, }, if, (, n, ., isName, (, ), &&, NodeUtil, ., isLValue, (, n, ), &&]
[{, return, ;, }, if, (, n, ., isName, (, ), &&, NodeUtil, ., isLValue, (, n, ), &&, !]
[{, return, ;, }, if, (, n, ., isName, (, ), &&, NodeUtil, ., isLValue, (, n, ), &&, !]
[if, (, n, ., isName, (, ), &&, NodeUtil, ., isLValue, (, n, ), &&, !, NodeUtil, ., isBleedingFunctionName, (]
[&&, NodeUtil, ., isLValue, (, n, ), &&, !, NodeUtil, ., isBleedingFunctionName, (, n, ), ), {, String, name, =]
[&&, NodeUtil, ., isLValue, (, n, ), &&, !, NodeUtil, ., isBleedingFunctionName, (, n, ), ), {, String, name, =]
[NodeUtil, ., isBleedingFunctionName, (, n, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope, scope, =]
[NodeUtil, ., isBleedingFunctionName, (, n, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope, scope, =]
[name, =, n, ., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Var, var, =]
[name, =, n, ., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Var, var, =]
[getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (]
[scope, =, t, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (, name, ), ;, if, (]
[scope, =, t, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (, name, ), ;, if, (]
[t, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (, name, ), ;, if, (, var, !=]
[Var, var, =, scope, ., getVar, (, name, ), ;, if, (, var, !=, null, ), {, Scope, ownerScope, =]
[Var, var, =, scope, ., getVar, (, name, ), ;, if, (, var, !=, null, ), {, Scope, ownerScope, =]
[), ;, if, (, var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (]
[), ;, if, (, var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (]
[), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, ownerScope, ., isLocal, (, ), ), {]
[), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, ownerScope, ., isLocal, (, ), ), {]
[), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, ownerScope, ., isLocal, (, ), ), {]
[=, var, ., getScope, (, ), ;, if, (, ownerScope, ., isLocal, (, ), ), {, data, ., get, (]
[=, var, ., getScope, (, ), ;, if, (, ownerScope, ., isLocal, (, ), ), {, data, ., get, (]
[ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordAssignedName, (]
[{, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordAssignedName, (, name, ), ;, }, if, (]
[{, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordAssignedName, (, name, ), ;, }, if, (]
[{, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordAssignedName, (, name, ), ;, }, if, (]
[., get, (, ownerScope, ., getRootNode, (, ), ), ., recordAssignedName, (, name, ), ;, }, if, (, scope, !=]
[(, ownerScope, ., getRootNode, (, ), ), ., recordAssignedName, (, name, ), ;, }, if, (, scope, !=, ownerScope, &&]
[(, ownerScope, ., getRootNode, (, ), ), ., recordAssignedName, (, name, ), ;, }, if, (, scope, !=, ownerScope, &&]
[., recordAssignedName, (, name, ), ;, }, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {]
[., recordAssignedName, (, name, ), ;, }, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {]
[., recordAssignedName, (, name, ), ;, }, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {]
[), ;, }, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {, data, ., get, (]
[), ;, }, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {, data, ., get, (]
[ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedVarName, (]
[get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedVarName, (, name, ), ;, }, }, }, else, if, (]
[get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedVarName, (, name, ), ;, }, }, }, else, if, (]
[get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedVarName, (, name, ), ;, }, }, }, else, if, (]
[get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedVarName, (, name, ), ;, }, }, }, else, if, (]
[), ), ., recordEscapedVarName, (, name, ), ;, }, }, }, else, if, (, n, ., isGetProp, (, ), &&]
[), ), ., recordEscapedVarName, (, name, ), ;, }, }, }, else, if, (, n, ., isGetProp, (, ), &&]
[), ;, }, }, }, else, if, (, n, ., isGetProp, (, ), &&, n, ., isUnscopedQualifiedName, (, ), &&]
[), ;, }, }, }, else, if, (, n, ., isGetProp, (, ), &&, n, ., isUnscopedQualifiedName, (, ), &&]
[}, else, if, (, n, ., isGetProp, (, ), &&, n, ., isUnscopedQualifiedName, (, ), &&, NodeUtil, ., isLValue, (]
[(, ), &&, n, ., isUnscopedQualifiedName, (, ), &&, NodeUtil, ., isLValue, (, n, ), ), {, String, name, =]
[(, ), &&, n, ., isUnscopedQualifiedName, (, ), &&, NodeUtil, ., isLValue, (, n, ), ), {, String, name, =]
[(, ), &&, n, ., isUnscopedQualifiedName, (, ), &&, NodeUtil, ., isLValue, (, n, ), ), {, String, name, =]
[., isUnscopedQualifiedName, (, ), &&, NodeUtil, ., isLValue, (, n, ), ), {, String, name, =, NodeUtil, ., getRootOfQualifiedName, (]
[), ), {, String, name, =, NodeUtil, ., getRootOfQualifiedName, (, n, ), ., getString, (, ), ;, Scope, scope, =]
[), ), {, String, name, =, NodeUtil, ., getRootOfQualifiedName, (, n, ), ., getString, (, ), ;, Scope, scope, =]
[(, n, ), ., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Var, var, =]
[(, n, ), ., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Var, var, =]
[getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (]
[scope, =, t, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (, name, ), ;, if, (]
[scope, =, t, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (, name, ), ;, if, (]
[t, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (, name, ), ;, if, (, var, !=]
[Var, var, =, scope, ., getVar, (, name, ), ;, if, (, var, !=, null, ), {, Scope, ownerScope, =]
[Var, var, =, scope, ., getVar, (, name, ), ;, if, (, var, !=, null, ), {, Scope, ownerScope, =]
[), ;, if, (, var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (]
[), ;, if, (, var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (]
[), ;, if, (, var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (]
[if, (, var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, scope, !=]
[var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, scope, !=, ownerScope, &&]
[var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, scope, !=, ownerScope, &&]
[=, var, ., getScope, (, ), ;, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {]
[=, var, ., getScope, (, ), ;, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {]
[=, var, ., getScope, (, ), ;, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {]
[(, ), ;, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {, data, ., get, (]
[(, ), ;, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {, data, ., get, (]
[ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedQualifiedName, (]
[ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedQualifiedName, (]
[), ), ;, }, }, }, }, }, private, AstFunctionContents, getFunctionAnalysisResults, (, @, Nullable, Node, n, ), {, if, (]
[), ), ;, }, }, }, }, }, private, AstFunctionContents, getFunctionAnalysisResults, (, @, Nullable, Node, n, ), {, if, (]
[;, }, }, }, }, }, private, AstFunctionContents, getFunctionAnalysisResults, (, @, Nullable, Node, n, ), {, if, (, n, ==]
[}, }, private, AstFunctionContents, getFunctionAnalysisResults, (, @, Nullable, Node, n, ), {, if, (, n, ==, null, ), {, return]
[getFunctionAnalysisResults, (, @, Nullable, Node, n, ), {, if, (, n, ==, null, ), {, return, null, ;, }, return]
[getFunctionAnalysisResults, (, @, Nullable, Node, n, ), {, if, (, n, ==, null, ), {, return, null, ;, }, return]
[Node, n, ), {, if, (, n, ==, null, ), {, return, null, ;, }, return, functionAnalysisResults, ., get, (]
