[., util, ., Set, ;, class, TightenTypes, implements, CompilerPass, ,, ConcreteType, ., Factory, {, public, static, final, String, NON_HALTING_ERROR_MSG, =]
[String, NON_HALTING_ERROR_MSG, =, "TightenTypes pass appears to be stuck in an infinite loop.", ;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, Node, ,, ConcreteFunctionType, >, functionFromDeclaration, =]
[String, NON_HALTING_ERROR_MSG, =, "TightenTypes pass appears to be stuck in an infinite loop.", ;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, Node, ,, ConcreteFunctionType, >, functionFromDeclaration, =]
[ConcreteFunctionType, >, functionFromDeclaration, =, Maps, ., newHashMap, (, ), ;, private, final, Map, <, FunctionType, ,, ConcreteFunctionType, >, functionFromJSType, =]
[ConcreteFunctionType, >, functionFromDeclaration, =, Maps, ., newHashMap, (, ), ;, private, final, Map, <, FunctionType, ,, ConcreteFunctionType, >, functionFromJSType, =]
[ConcreteFunctionType, >, functionFromJSType, =, Maps, ., newIdentityHashMap, (, ), ;, private, final, Map, <, ObjectType, ,, ConcreteInstanceType, >, instanceFromJSType, =]
[ConcreteFunctionType, >, functionFromJSType, =, Maps, ., newIdentityHashMap, (, ), ;, private, final, Map, <, ObjectType, ,, ConcreteInstanceType, >, instanceFromJSType, =]
[ConcreteInstanceType, >, instanceFromJSType, =, Maps, ., newHashMap, (, ), ;, private, final, Map, <, ConcreteJSTypePair, ,, ConcreteType, >, typeIntersectionMemos, =]
[ConcreteInstanceType, >, instanceFromJSType, =, Maps, ., newHashMap, (, ), ;, private, final, Map, <, ConcreteJSTypePair, ,, ConcreteType, >, typeIntersectionMemos, =]
[ConcreteType, >, typeIntersectionMemos, =, Maps, ., newHashMap, (, ), ;, private, ConcreteScope, topScope, ;, TightenTypes, (, AbstractCompiler, compiler, ), {]
[ConcreteType, >, typeIntersectionMemos, =, Maps, ., newHashMap, (, ), ;, private, ConcreteScope, topScope, ;, TightenTypes, (, AbstractCompiler, compiler, ), {]
[Maps, ., newHashMap, (, ), ;, private, ConcreteScope, topScope, ;, TightenTypes, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[;, TightenTypes, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, ConcreteScope, getTopScope, (, ), {, return]
[;, }, ConcreteScope, getTopScope, (, ), {, return, topScope, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, return]
[;, }, ConcreteScope, getTopScope, (, ), {, return, topScope, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, return]
[JSTypeRegistry, getTypeRegistry, (, ), {, return, compiler, ., getTypeRegistry, (, ), ;, }, private, Set, <, ConcreteType, >, allInstantiatedTypes, =]
[JSTypeRegistry, getTypeRegistry, (, ), {, return, compiler, ., getTypeRegistry, (, ), ;, }, private, Set, <, ConcreteType, >, allInstantiatedTypes, =]
[=, Sets, ., newHashSet, (, ), ;, @, Override, public, void, process, (, Node, externRoot, ,, Node, jsRoot, ), {]
[., newHashSet, (, ), ;, @, Override, public, void, process, (, Node, externRoot, ,, Node, jsRoot, ), {, topScope, =]
[), ;, @, Override, public, void, process, (, Node, externRoot, ,, Node, jsRoot, ), {, topScope, =, new, ConcreteScope, (]
[Override, public, void, process, (, Node, externRoot, ,, Node, jsRoot, ), {, topScope, =, new, ConcreteScope, (, null, ), ;]
[Override, public, void, process, (, Node, externRoot, ,, Node, jsRoot, ), {, topScope, =, new, ConcreteScope, (, null, ), ;]
[(, Node, externRoot, ,, Node, jsRoot, ), {, topScope, =, new, ConcreteScope, (, null, ), ;, topScope, ., initForExternRoot, (]
[,, Node, jsRoot, ), {, topScope, =, new, ConcreteScope, (, null, ), ;, topScope, ., initForExternRoot, (, externRoot, ), ;]
[,, Node, jsRoot, ), {, topScope, =, new, ConcreteScope, (, null, ), ;, topScope, ., initForExternRoot, (, externRoot, ), ;]
[{, topScope, =, new, ConcreteScope, (, null, ), ;, topScope, ., initForExternRoot, (, externRoot, ), ;, topScope, ., initForScopeRoot, (]
[null, ), ;, topScope, ., initForExternRoot, (, externRoot, ), ;, topScope, ., initForScopeRoot, (, jsRoot, ), ;, long, maxIterations, =]
[initForExternRoot, (, externRoot, ), ;, topScope, ., initForScopeRoot, (, jsRoot, ), ;, long, maxIterations, =, 1000, ;, long, iterations, =]
[(, jsRoot, ), ;, long, maxIterations, =, 1000, ;, long, iterations, =, 0, ;, Set, <, ConcreteScope, >, workSet, =]
[(, jsRoot, ), ;, long, maxIterations, =, 1000, ;, long, iterations, =, 0, ;, Set, <, ConcreteScope, >, workSet, =]
[long, maxIterations, =, 1000, ;, long, iterations, =, 0, ;, Set, <, ConcreteScope, >, workSet, =, Sets, ., newHashSet, (]
[;, Set, <, ConcreteScope, >, workSet, =, Sets, ., newHashSet, (, topScope, ), ;, List, <, ConcreteScope, >, workList, =]
[;, Set, <, ConcreteScope, >, workSet, =, Sets, ., newHashSet, (, topScope, ), ;, List, <, ConcreteScope, >, workList, =]
[>, workSet, =, Sets, ., newHashSet, (, topScope, ), ;, List, <, ConcreteScope, >, workList, =, Lists, ., newArrayList, (]
[), ;, List, <, ConcreteScope, >, workList, =, Lists, ., newArrayList, (, topScope, ), ;, boolean, changed, ;, do, {]
[List, <, ConcreteScope, >, workList, =, Lists, ., newArrayList, (, topScope, ), ;, boolean, changed, ;, do, {, changed, =]
[., newArrayList, (, topScope, ), ;, boolean, changed, ;, do, {, changed, =, false, ;, for, (, int, i, =]
[(, topScope, ), ;, boolean, changed, ;, do, {, changed, =, false, ;, for, (, int, i, =, 0, ;]
[(, topScope, ), ;, boolean, changed, ;, do, {, changed, =, false, ;, for, (, int, i, =, 0, ;]
[), ;, boolean, changed, ;, do, {, changed, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, boolean, changed, ;, do, {, changed, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[{, changed, =, false, ;, for, (, int, i, =, 0, ;, i, <, workList, ., size, (, ), ;]
[changed, =, false, ;, for, (, int, i, =, 0, ;, i, <, workList, ., size, (, ), ;, ++]
[int, i, =, 0, ;, i, <, workList, ., size, (, ), ;, ++, i, ), {, ConcreteScope, scope, =]
[int, i, =, 0, ;, i, <, workList, ., size, (, ), ;, ++, i, ), {, ConcreteScope, scope, =]
[;, i, <, workList, ., size, (, ), ;, ++, i, ), {, ConcreteScope, scope, =, workList, ., get, (]
[;, ++, i, ), {, ConcreteScope, scope, =, workList, ., get, (, i, ), ;, for, (, Action, action, :]
[;, ++, i, ), {, ConcreteScope, scope, =, workList, ., get, (, i, ), ;, for, (, Action, action, :]
[i, ), ;, for, (, Action, action, :, scope, ., getActions, (, ), ), {, for, (, Assignment, assign, :]
[i, ), ;, for, (, Action, action, :, scope, ., getActions, (, ), ), {, for, (, Assignment, assign, :]
[(, Action, action, :, scope, ., getActions, (, ), ), {, for, (, Assignment, assign, :, action, ., getAssignments, (]
[getActions, (, ), ), {, for, (, Assignment, assign, :, action, ., getAssignments, (, scope, ), ), {, if, (]
[getActions, (, ), ), {, for, (, Assignment, assign, :, action, ., getAssignments, (, scope, ), ), {, if, (]
[getActions, (, ), ), {, for, (, Assignment, assign, :, action, ., getAssignments, (, scope, ), ), {, if, (]
[(, Assignment, assign, :, action, ., getAssignments, (, scope, ), ), {, if, (, assign, ., slot, ., addConcreteType, (]
[(, Assignment, assign, :, action, ., getAssignments, (, scope, ), ), {, if, (, assign, ., slot, ., addConcreteType, (]
[getAssignments, (, scope, ), ), {, if, (, assign, ., slot, ., addConcreteType, (, assign, ., type, ), ), {]
[scope, ), ), {, if, (, assign, ., slot, ., addConcreteType, (, assign, ., type, ), ), {, changed, =]
[(, assign, ., slot, ., addConcreteType, (, assign, ., type, ), ), {, changed, =, true, ;, ConcreteScope, varScope, =]
[(, assign, ., slot, ., addConcreteType, (, assign, ., type, ), ), {, changed, =, true, ;, ConcreteScope, varScope, =]
[(, assign, ., slot, ., addConcreteType, (, assign, ., type, ), ), {, changed, =, true, ;, ConcreteScope, varScope, =]
[), ), {, changed, =, true, ;, ConcreteScope, varScope, =, assign, ., slot, ., getScope, (, ), ;, if, (]
[), ), {, changed, =, true, ;, ConcreteScope, varScope, =, assign, ., slot, ., getScope, (, ), ;, if, (]
[), {, changed, =, true, ;, ConcreteScope, varScope, =, assign, ., slot, ., getScope, (, ), ;, if, (, (]
[), {, changed, =, true, ;, ConcreteScope, varScope, =, assign, ., slot, ., getScope, (, ), ;, if, (, (]
[changed, =, true, ;, ConcreteScope, varScope, =, assign, ., slot, ., getScope, (, ), ;, if, (, (, varScope, !=]
[;, ConcreteScope, varScope, =, assign, ., slot, ., getScope, (, ), ;, if, (, (, varScope, !=, scope, ), &&]
[ConcreteScope, varScope, =, assign, ., slot, ., getScope, (, ), ;, if, (, (, varScope, !=, scope, ), &&, !]
[ConcreteScope, varScope, =, assign, ., slot, ., getScope, (, ), ;, if, (, (, varScope, !=, scope, ), &&, !]
[., slot, ., getScope, (, ), ;, if, (, (, varScope, !=, scope, ), &&, !, workSet, ., contains, (]
[(, ), ;, if, (, (, varScope, !=, scope, ), &&, !, workSet, ., contains, (, varScope, ), ), {]
[(, ), ;, if, (, (, varScope, !=, scope, ), &&, !, workSet, ., contains, (, varScope, ), ), {]
[(, (, varScope, !=, scope, ), &&, !, workSet, ., contains, (, varScope, ), ), {, workSet, ., add, (]
[!=, scope, ), &&, !, workSet, ., contains, (, varScope, ), ), {, workSet, ., add, (, varScope, ), ;]
[!=, scope, ), &&, !, workSet, ., contains, (, varScope, ), ), {, workSet, ., add, (, varScope, ), ;]
[!, workSet, ., contains, (, varScope, ), ), {, workSet, ., add, (, varScope, ), ;, workList, ., add, (]
[{, workSet, ., add, (, varScope, ), ;, workList, ., add, (, varScope, ), ;, }, }, }, }, }]
[{, workSet, ., add, (, varScope, ), ;, workList, ., add, (, varScope, ), ;, }, }, }, }, }]
[(, varScope, ), ;, workList, ., add, (, varScope, ), ;, }, }, }, }, }, Preconditions, ., checkState, (]
[(, varScope, ), ;, workList, ., add, (, varScope, ), ;, }, }, }, }, }, Preconditions, ., checkState, (]
[varScope, ), ;, workList, ., add, (, varScope, ), ;, }, }, }, }, }, Preconditions, ., checkState, (, ++]
[;, workList, ., add, (, varScope, ), ;, }, }, }, }, }, Preconditions, ., checkState, (, ++, iterations, !=]
[., add, (, varScope, ), ;, }, }, }, }, }, Preconditions, ., checkState, (, ++, iterations, !=, maxIterations, ,]
[}, }, }, }, }, Preconditions, ., checkState, (, ++, iterations, !=, maxIterations, ,, NON_HALTING_ERROR_MSG, ), ;, }, while, (]
[String, ,, ConcreteSlot, >, slots, ;, private, final, List, <, Action, >, actions, ;, ConcreteScope, (, ConcreteScope, parent, ), {]
[String, ,, ConcreteSlot, >, slots, ;, private, final, List, <, Action, >, actions, ;, ConcreteScope, (, ConcreteScope, parent, ), {]
[slots, ;, private, final, List, <, Action, >, actions, ;, ConcreteScope, (, ConcreteScope, parent, ), {, this, ., parent, =]
[private, final, List, <, Action, >, actions, ;, ConcreteScope, (, ConcreteScope, parent, ), {, this, ., parent, =, parent, ;]
[private, final, List, <, Action, >, actions, ;, ConcreteScope, (, ConcreteScope, parent, ), {, this, ., parent, =, parent, ;]
[Action, >, actions, ;, ConcreteScope, (, ConcreteScope, parent, ), {, this, ., parent, =, parent, ;, this, ., slots, =]
[Action, >, actions, ;, ConcreteScope, (, ConcreteScope, parent, ), {, this, ., parent, =, parent, ;, this, ., slots, =]
[ConcreteScope, parent, ), {, this, ., parent, =, parent, ;, this, ., slots, =, Maps, ., newHashMap, (, ), ;]
[ConcreteScope, parent, ), {, this, ., parent, =, parent, ;, this, ., slots, =, Maps, ., newHashMap, (, ), ;]
[this, ., parent, =, parent, ;, this, ., slots, =, Maps, ., newHashMap, (, ), ;, this, ., actions, =]
[this, ., parent, =, parent, ;, this, ., slots, =, Maps, ., newHashMap, (, ), ;, this, ., actions, =]
[this, ., actions, =, Lists, ., newArrayList, (, ), ;, }, @, Override, public, Node, getRootNode, (, ), {, return]
[getRootNode, (, ), {, return, null, ;, }, @, Override, public, StaticScope, <, ConcreteType, >, getParentScope, (, ), {, return]
[), {, return, parent, ;, }, @, Override, public, StaticSlot, <, ConcreteType, >, getOwnSlot, (, String, name, ), {, return]
[), {, return, parent, ;, }, @, Override, public, StaticSlot, <, ConcreteType, >, getOwnSlot, (, String, name, ), {, return]
[;, }, @, Override, public, StaticSlot, <, ConcreteType, >, getOwnSlot, (, String, name, ), {, return, slots, ., get, (]
[}, @, Override, public, StaticSlot, <, ConcreteType, >, getSlot, (, String, name, ), {, StaticSlot, <, ConcreteType, >, var, =]
[Override, public, StaticSlot, <, ConcreteType, >, getSlot, (, String, name, ), {, StaticSlot, <, ConcreteType, >, var, =, getOwnSlot, (]
[>, getSlot, (, String, name, ), {, StaticSlot, <, ConcreteType, >, var, =, getOwnSlot, (, name, ), ;, if, (]
[>, getSlot, (, String, name, ), {, StaticSlot, <, ConcreteType, >, var, =, getOwnSlot, (, name, ), ;, if, (]
[(, String, name, ), {, StaticSlot, <, ConcreteType, >, var, =, getOwnSlot, (, name, ), ;, if, (, var, !=]
[{, StaticSlot, <, ConcreteType, >, var, =, getOwnSlot, (, name, ), ;, if, (, var, !=, null, ), {, return]
[=, getOwnSlot, (, name, ), ;, if, (, var, !=, null, ), {, return, var, ;, }, else, if, (]
[=, getOwnSlot, (, name, ), ;, if, (, var, !=, null, ), {, return, var, ;, }, else, if, (]
[(, name, ), ;, if, (, var, !=, null, ), {, return, var, ;, }, else, if, (, parent, !=]
[if, (, var, !=, null, ), {, return, var, ;, }, else, if, (, parent, !=, null, ), {, return]
[if, (, var, !=, null, ), {, return, var, ;, }, else, if, (, parent, !=, null, ), {, return]
[null, ), {, return, var, ;, }, else, if, (, parent, !=, null, ), {, return, parent, ., getSlot, (]
[else, if, (, parent, !=, null, ), {, return, parent, ., getSlot, (, name, ), ;, }, else, {, return]
[name, ), ;, }, else, {, return, null, ;, }, }, Collection, <, ConcreteSlot, >, getSlots, (, ), {, return]
[name, ), ;, }, else, {, return, null, ;, }, }, Collection, <, ConcreteSlot, >, getSlots, (, ), {, return]
[{, return, slots, ., values, (, ), ;, }, @, Override, public, ConcreteType, getTypeOfThis, (, ), {, ConcreteSlot, thisVar, =]
[{, return, slots, ., values, (, ), ;, }, @, Override, public, ConcreteType, getTypeOfThis, (, ), {, ConcreteSlot, thisVar, =]
[values, (, ), ;, }, @, Override, public, ConcreteType, getTypeOfThis, (, ), {, ConcreteSlot, thisVar, =, slots, ., get, (]
[values, (, ), ;, }, @, Override, public, ConcreteType, getTypeOfThis, (, ), {, ConcreteSlot, thisVar, =, slots, ., get, (]
[Override, public, ConcreteType, getTypeOfThis, (, ), {, ConcreteSlot, thisVar, =, slots, ., get, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ), ;, return]
[Override, public, ConcreteType, getTypeOfThis, (, ), {, ConcreteSlot, thisVar, =, slots, ., get, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ), ;, return]
[public, ConcreteType, getTypeOfThis, (, ), {, ConcreteSlot, thisVar, =, slots, ., get, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ), ;, return, (]
[public, ConcreteType, getTypeOfThis, (, ), {, ConcreteSlot, thisVar, =, slots, ., get, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ), ;, return, (]
[getTypeOfThis, (, ), {, ConcreteSlot, thisVar, =, slots, ., get, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ), ;, return, (, thisVar, !=]
[{, ConcreteSlot, thisVar, =, slots, ., get, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ), ;, return, (, thisVar, !=, null, ), ?]
[{, ConcreteSlot, thisVar, =, slots, ., get, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ), ;, return, (, thisVar, !=, null, ), ?]
[get, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ), ;, return, (, thisVar, !=, null, ), ?, thisVar, ., getType, (, ), :]
[get, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ), ;, return, (, thisVar, !=, null, ), ?, thisVar, ., getType, (, ), :]
[., getType, (, ), :, ConcreteType, ., NONE, ;, }, void, declareSlot, (, String, name, ,, Node, declaration, ), {]
[., getType, (, ), :, ConcreteType, ., NONE, ;, }, void, declareSlot, (, String, name, ,, Node, declaration, ), {]
[:, ConcreteType, ., NONE, ;, }, void, declareSlot, (, String, name, ,, Node, declaration, ), {, slots, ., put, (]
[., NONE, ;, }, void, declareSlot, (, String, name, ,, Node, declaration, ), {, slots, ., put, (, name, ,]
[}, void, declareSlot, (, String, name, ,, Node, declaration, ), {, slots, ., put, (, name, ,, new, ConcreteSlot, (]
[declareSlot, (, String, name, ,, Node, declaration, ), {, slots, ., put, (, name, ,, new, ConcreteSlot, (, this, ,]
[), ), ;, }, void, declareSlot, (, String, name, ,, Node, declaration, ,, ConcreteType, type, ), {, ConcreteSlot, var, =]
[}, void, declareSlot, (, String, name, ,, Node, declaration, ,, ConcreteType, type, ), {, ConcreteSlot, var, =, new, ConcreteSlot, (]
[declareSlot, (, String, name, ,, Node, declaration, ,, ConcreteType, type, ), {, ConcreteSlot, var, =, new, ConcreteSlot, (, this, ,]
[name, ,, Node, declaration, ,, ConcreteType, type, ), {, ConcreteSlot, var, =, new, ConcreteSlot, (, this, ,, name, ), ;]
[name, ,, Node, declaration, ,, ConcreteType, type, ), {, ConcreteSlot, var, =, new, ConcreteSlot, (, this, ,, name, ), ;]
[,, ConcreteType, type, ), {, ConcreteSlot, var, =, new, ConcreteSlot, (, this, ,, name, ), ;, var, ., addConcreteType, (]
[), {, ConcreteSlot, var, =, new, ConcreteSlot, (, this, ,, name, ), ;, var, ., addConcreteType, (, type, ), ;]
[), {, ConcreteSlot, var, =, new, ConcreteSlot, (, this, ,, name, ), ;, var, ., addConcreteType, (, type, ), ;]
[=, new, ConcreteSlot, (, this, ,, name, ), ;, var, ., addConcreteType, (, type, ), ;, slots, ., put, (]
[ConcreteSlot, (, this, ,, name, ), ;, var, ., addConcreteType, (, type, ), ;, slots, ., put, (, name, ,]
[;, slots, ., put, (, name, ,, var, ), ;, }, List, <, Action, >, getActions, (, ), {, return]
[}, List, <, Action, >, getActions, (, ), {, return, actions, ;, }, void, initForScopeRoot, (, Node, decl, ), {]
[}, List, <, Action, >, getActions, (, ), {, return, actions, ;, }, void, initForScopeRoot, (, Node, decl, ), {]
[>, getActions, (, ), {, return, actions, ;, }, void, initForScopeRoot, (, Node, decl, ), {, Preconditions, ., checkNotNull, (]
[return, actions, ;, }, void, initForScopeRoot, (, Node, decl, ), {, Preconditions, ., checkNotNull, (, decl, ), ;, if, (]
[return, actions, ;, }, void, initForScopeRoot, (, Node, decl, ), {, Preconditions, ., checkNotNull, (, decl, ), ;, if, (]
[Node, decl, ), {, Preconditions, ., checkNotNull, (, decl, ), ;, if, (, decl, ., isFunction, (, ), ), {]
[), {, Preconditions, ., checkNotNull, (, decl, ), ;, if, (, decl, ., isFunction, (, ), ), {, decl, =]
[), {, Preconditions, ., checkNotNull, (, decl, ), ;, if, (, decl, ., isFunction, (, ), ), {, decl, =]
[), ;, if, (, decl, ., isFunction, (, ), ), {, decl, =, decl, ., getLastChild, (, ), ;, }]
[), ;, if, (, decl, ., isFunction, (, ), ), {, decl, =, decl, ., getLastChild, (, ), ;, }]
[decl, ., isFunction, (, ), ), {, decl, =, decl, ., getLastChild, (, ), ;, }, Preconditions, ., checkArgument, (]
[decl, ., isFunction, (, ), ), {, decl, =, decl, ., getLastChild, (, ), ;, }, Preconditions, ., checkArgument, (]
[decl, =, decl, ., getLastChild, (, ), ;, }, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;]
[decl, =, decl, ., getLastChild, (, ), ;, }, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;]
[getLastChild, (, ), ;, }, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (]
[), ;, }, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[}, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,]
[checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope, (]
[decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope, (, this, ,]
[,, decl, ,, new, CreateScope, (, this, ,, false, ), ), ;, }, void, initForExternRoot, (, Node, decl, ), {]
[,, decl, ,, new, CreateScope, (, this, ,, false, ), ), ;, }, void, initForExternRoot, (, Node, decl, ), {]
[CreateScope, (, this, ,, false, ), ), ;, }, void, initForExternRoot, (, Node, decl, ), {, Preconditions, ., checkNotNull, (]
[,, false, ), ), ;, }, void, initForExternRoot, (, Node, decl, ), {, Preconditions, ., checkNotNull, (, decl, ), ;]
[,, false, ), ), ;, }, void, initForExternRoot, (, Node, decl, ), {, Preconditions, ., checkNotNull, (, decl, ), ;]
[;, }, void, initForExternRoot, (, Node, decl, ), {, Preconditions, ., checkNotNull, (, decl, ), ;, Preconditions, ., checkArgument, (]
[;, }, void, initForExternRoot, (, Node, decl, ), {, Preconditions, ., checkNotNull, (, decl, ), ;, Preconditions, ., checkArgument, (]
[), {, Preconditions, ., checkNotNull, (, decl, ), ;, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;]
[), {, Preconditions, ., checkNotNull, (, decl, ), ;, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;]
[checkNotNull, (, decl, ), ;, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (]
[decl, ), ;, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[;, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,]
[checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope, (]
[decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope, (, this, ,]
[,, decl, ,, new, CreateScope, (, this, ,, true, ), ), ;, }, void, addAction, (, Action, action, ), {]
[,, decl, ,, new, CreateScope, (, this, ,, true, ), ), ;, }, void, addAction, (, Action, action, ), {]
[CreateScope, (, this, ,, true, ), ), ;, }, void, addAction, (, Action, action, ), {, actions, ., add, (]
[action, ), {, actions, ., add, (, action, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[action, ), {, actions, ., add, (, action, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[action, ), {, actions, ., add, (, action, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[action, ), {, actions, ., add, (, action, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[), ;, }, @, Override, public, String, toString, (, ), {, return, getTypeOfThis, (, ), ., toString, (, ), +]
[}, @, Override, public, String, toString, (, ), {, return, getTypeOfThis, (, ), ., toString, (, ), +, " ", +]
[scope, ;, private, final, String, name, ;, private, ConcreteType, type, ;, ConcreteSlot, (, ConcreteScope, scope, ,, String, name, ), {]
[scope, ;, private, final, String, name, ;, private, ConcreteType, type, ;, ConcreteSlot, (, ConcreteScope, scope, ,, String, name, ), {]
[String, name, ;, private, ConcreteType, type, ;, ConcreteSlot, (, ConcreteScope, scope, ,, String, name, ), {, this, ., scope, =]
[;, private, ConcreteType, type, ;, ConcreteSlot, (, ConcreteScope, scope, ,, String, name, ), {, this, ., scope, =, scope, ;]
[;, private, ConcreteType, type, ;, ConcreteSlot, (, ConcreteScope, scope, ,, String, name, ), {, this, ., scope, =, scope, ;]
[;, ConcreteSlot, (, ConcreteScope, scope, ,, String, name, ), {, this, ., scope, =, scope, ;, this, ., name, =]
[(, ConcreteScope, scope, ,, String, name, ), {, this, ., scope, =, scope, ;, this, ., name, =, name, ;]
[(, ConcreteScope, scope, ,, String, name, ), {, this, ., scope, =, scope, ;, this, ., name, =, name, ;]
[String, name, ), {, this, ., scope, =, scope, ;, this, ., name, =, name, ;, this, ., type, =]
[String, name, ), {, this, ., scope, =, scope, ;, this, ., name, =, name, ;, this, ., type, =]
[., name, =, name, ;, this, ., type, =, ConcreteType, ., NONE, ;, }, ConcreteScope, getScope, (, ), {, return]
[;, }, ConcreteScope, getScope, (, ), {, return, scope, ;, }, @, Override, public, String, getName, (, ), {, return]
[Override, public, String, getName, (, ), {, return, name, ;, }, @, Override, public, ConcreteType, getType, (, ), {, return]
[Override, public, ConcreteType, getType, (, ), {, return, type, ;, }, @, Override, public, boolean, isTypeInferred, (, ), {, return]
[isTypeInferred, (, ), {, return, true, ;, }, @, Override, public, StaticReference, <, ConcreteType, >, getDeclaration, (, ), {, return]
[<, ConcreteType, >, getDeclaration, (, ), {, return, null, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return]
[public, JSDocInfo, getJSDocInfo, (, ), {, return, null, ;, }, boolean, addConcreteType, (, ConcreteType, type, ), {, ConcreteType, origType, =]
[public, JSDocInfo, getJSDocInfo, (, ), {, return, null, ;, }, boolean, addConcreteType, (, ConcreteType, type, ), {, ConcreteType, origType, =]
[), {, return, null, ;, }, boolean, addConcreteType, (, ConcreteType, type, ), {, ConcreteType, origType, =, this, ., type, ;]
[), {, return, null, ;, }, boolean, addConcreteType, (, ConcreteType, type, ), {, ConcreteType, origType, =, this, ., type, ;]
[;, }, boolean, addConcreteType, (, ConcreteType, type, ), {, ConcreteType, origType, =, this, ., type, ;, this, ., type, =]
[;, }, boolean, addConcreteType, (, ConcreteType, type, ), {, ConcreteType, origType, =, this, ., type, ;, this, ., type, =]
[(, ConcreteType, type, ), {, ConcreteType, origType, =, this, ., type, ;, this, ., type, =, origType, ., unionWith, (]
[{, ConcreteType, origType, =, this, ., type, ;, this, ., type, =, origType, ., unionWith, (, type, ), ;, return]
[ConcreteType, origType, =, this, ., type, ;, this, ., type, =, origType, ., unionWith, (, type, ), ;, return, !]
[ConcreteType, origType, =, this, ., type, ;, this, ., type, =, origType, ., unionWith, (, type, ), ;, return, !]
[ConcreteType, origType, =, this, ., type, ;, this, ., type, =, origType, ., unionWith, (, type, ), ;, return, !]
[;, this, ., type, =, origType, ., unionWith, (, type, ), ;, return, !, this, ., type, ., equals, (]
[!, this, ., type, ., equals, (, origType, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[!, this, ., type, ., equals, (, origType, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[!, this, ., type, ., equals, (, origType, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[., equals, (, origType, ), ;, }, @, Override, public, String, toString, (, ), {, return, getName, (, ), +]
[(, origType, ), ;, }, @, Override, public, String, toString, (, ), {, return, getName, (, ), +, ": ", +]
[{, private, final, ConcreteSlot, slot, ;, private, final, ConcreteType, type, ;, Assignment, (, ConcreteSlot, slot, ,, ConcreteType, type, ), {]
[{, private, final, ConcreteSlot, slot, ;, private, final, ConcreteType, type, ;, Assignment, (, ConcreteSlot, slot, ,, ConcreteType, type, ), {]
[slot, ;, private, final, ConcreteType, type, ;, Assignment, (, ConcreteSlot, slot, ,, ConcreteType, type, ), {, this, ., slot, =]
[private, final, ConcreteType, type, ;, Assignment, (, ConcreteSlot, slot, ,, ConcreteType, type, ), {, this, ., slot, =, slot, ;]
[private, final, ConcreteType, type, ;, Assignment, (, ConcreteSlot, slot, ,, ConcreteType, type, ), {, this, ., slot, =, slot, ;]
[;, Assignment, (, ConcreteSlot, slot, ,, ConcreteType, type, ), {, this, ., slot, =, slot, ;, this, ., type, =]
[(, ConcreteSlot, slot, ,, ConcreteType, type, ), {, this, ., slot, =, slot, ;, this, ., type, =, type, ;]
[(, ConcreteSlot, slot, ,, ConcreteType, type, ), {, this, ., slot, =, slot, ;, this, ., type, =, type, ;]
[ConcreteType, type, ), {, this, ., slot, =, slot, ;, this, ., type, =, type, ;, Preconditions, ., checkNotNull, (]
[{, this, ., slot, =, slot, ;, this, ., type, =, type, ;, Preconditions, ., checkNotNull, (, slot, ), ;]
[{, this, ., slot, =, slot, ;, this, ., type, =, type, ;, Preconditions, ., checkNotNull, (, slot, ), ;]
[=, slot, ;, this, ., type, =, type, ;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (]
[{, private, final, ConcreteSlot, slot, ;, private, final, Node, expression, ;, VariableAssignAction, (, ConcreteSlot, slot, ,, Node, expr, ), {]
[{, private, final, ConcreteSlot, slot, ;, private, final, Node, expression, ;, VariableAssignAction, (, ConcreteSlot, slot, ,, Node, expr, ), {]
[slot, ;, private, final, Node, expression, ;, VariableAssignAction, (, ConcreteSlot, slot, ,, Node, expr, ), {, this, ., slot, =]
[private, final, Node, expression, ;, VariableAssignAction, (, ConcreteSlot, slot, ,, Node, expr, ), {, this, ., slot, =, slot, ;]
[private, final, Node, expression, ;, VariableAssignAction, (, ConcreteSlot, slot, ,, Node, expr, ), {, this, ., slot, =, slot, ;]
[;, VariableAssignAction, (, ConcreteSlot, slot, ,, Node, expr, ), {, this, ., slot, =, slot, ;, this, ., expression, =]
[(, ConcreteSlot, slot, ,, Node, expr, ), {, this, ., slot, =, slot, ;, this, ., expression, =, expr, ;]
[(, ConcreteSlot, slot, ,, Node, expr, ), {, this, ., slot, =, slot, ;, this, ., expression, =, expr, ;]
[Node, expr, ), {, this, ., slot, =, slot, ;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (]
[{, this, ., slot, =, slot, ;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, slot, ), ;]
[{, this, ., slot, =, slot, ;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, slot, ), ;]
[=, slot, ;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (]
[checkNotNull, (, expr, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return]
[checkNotNull, (, expr, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return]
[;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return, Lists, ., newArrayList, (]
[Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return, Lists, ., newArrayList, (, new, Assignment, (]
[Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return, Lists, ., newArrayList, (, new, Assignment, (, slot, ,]
[Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return, Lists, ., newArrayList, (, new, Assignment, (, slot, ,, inferConcreteType, (]
[getAssignments, (, ConcreteScope, scope, ), {, return, Lists, ., newArrayList, (, new, Assignment, (, slot, ,, inferConcreteType, (, scope, ,]
[;, private, final, String, propName, ;, private, final, Node, expression, ;, PropertyAssignAction, (, Node, receiver, ,, Node, expr, ), {]
[;, private, final, String, propName, ;, private, final, Node, expression, ;, PropertyAssignAction, (, Node, receiver, ,, Node, expr, ), {]
[propName, ;, private, final, Node, expression, ;, PropertyAssignAction, (, Node, receiver, ,, Node, expr, ), {, this, ., receiver, =]
[private, final, Node, expression, ;, PropertyAssignAction, (, Node, receiver, ,, Node, expr, ), {, this, ., receiver, =, receiver, ;]
[private, final, Node, expression, ;, PropertyAssignAction, (, Node, receiver, ,, Node, expr, ), {, this, ., receiver, =, receiver, ;]
[;, PropertyAssignAction, (, Node, receiver, ,, Node, expr, ), {, this, ., receiver, =, receiver, ;, this, ., propName, =]
[;, PropertyAssignAction, (, Node, receiver, ,, Node, expr, ), {, this, ., receiver, =, receiver, ;, this, ., propName, =]
[;, PropertyAssignAction, (, Node, receiver, ,, Node, expr, ), {, this, ., receiver, =, receiver, ;, this, ., propName, =]
[this, ., receiver, =, receiver, ;, this, ., propName, =, receiver, ., getNext, (, ), ., getString, (, ), ;]
[this, ., receiver, =, receiver, ;, this, ., propName, =, receiver, ., getNext, (, ), ., getString, (, ), ;]
[receiver, ;, this, ., propName, =, receiver, ., getNext, (, ), ., getString, (, ), ;, this, ., expression, =]
[this, ., propName, =, receiver, ., getNext, (, ), ., getString, (, ), ;, this, ., expression, =, expr, ;]
[this, ., propName, =, receiver, ., getNext, (, ), ., getString, (, ), ;, this, ., expression, =, expr, ;]
[receiver, ., getNext, (, ), ., getString, (, ), ;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (]
[(, ), ., getString, (, ), ;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, receiver, ), ;]
[(, ), ., getString, (, ), ;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, receiver, ), ;]
[(, ), ;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, Preconditions, ., checkNotNull, (]
[this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, Preconditions, ., checkNotNull, (, propName, ), ;]
[this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, Preconditions, ., checkNotNull, (, propName, ), ;]
[expr, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, Preconditions, ., checkNotNull, (, propName, ), ;, Preconditions, ., checkNotNull, (]
[expr, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, recvType, =]
[;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, recvType, =, inferConcreteType, (]
[@, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, recvType, =, inferConcreteType, (, scope, ,]
[>, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, ConcreteType, exprType, =]
[(, ConcreteScope, scope, ), {, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, ConcreteType, exprType, =, inferConcreteType, (]
[scope, ), {, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, ConcreteType, exprType, =, inferConcreteType, (, scope, ,]
[,, receiver, ), ;, ConcreteType, exprType, =, inferConcreteType, (, scope, ,, expression, ), ;, List, <, Assignment, >, assigns, =]
[,, receiver, ), ;, ConcreteType, exprType, =, inferConcreteType, (, scope, ,, expression, ), ;, List, <, Assignment, >, assigns, =]
[List, <, Assignment, >, assigns, =, Lists, ., newArrayList, (, ), ;, for, (, StaticSlot, <, ConcreteType, >, prop, :]
[List, <, Assignment, >, assigns, =, Lists, ., newArrayList, (, ), ;, for, (, StaticSlot, <, ConcreteType, >, prop, :]
[assigns, =, Lists, ., newArrayList, (, ), ;, for, (, StaticSlot, <, ConcreteType, >, prop, :, recvType, ., getPropertySlots, (]
[newArrayList, (, ), ;, for, (, StaticSlot, <, ConcreteType, >, prop, :, recvType, ., getPropertySlots, (, propName, ), ), {]
[newArrayList, (, ), ;, for, (, StaticSlot, <, ConcreteType, >, prop, :, recvType, ., getPropertySlots, (, propName, ), ), {]
[for, (, StaticSlot, <, ConcreteType, >, prop, :, recvType, ., getPropertySlots, (, propName, ), ), {, assigns, ., add, (]
[<, ConcreteType, >, prop, :, recvType, ., getPropertySlots, (, propName, ), ), {, assigns, ., add, (, new, Assignment, (]
[prop, :, recvType, ., getPropertySlots, (, propName, ), ), {, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, )]
[recvType, ., getPropertySlots, (, propName, ), ), {, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), prop, ,]
[), {, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), prop, ,, exprType, ), ), ;, }, return]
[prop, ,, exprType, ), ), ;, }, return, assigns, ;, }, }, private, class, FunctionCallBuilder, {, private, boolean, isNewCall, =]
[}, return, assigns, ;, }, }, private, class, FunctionCallBuilder, {, private, boolean, isNewCall, =, false, ;, private, boolean, isCallFunction, =]
[private, boolean, isCallFunction, =, false, ;, private, final, Node, receiver, ;, private, final, Node, firstArgument, ;, private, String, propName, =]
[private, final, Node, firstArgument, ;, private, String, propName, =, null, ;, FunctionCallBuilder, (, Node, receiver, ,, Node, firstArgument, ), {]
[private, final, Node, firstArgument, ;, private, String, propName, =, null, ;, FunctionCallBuilder, (, Node, receiver, ,, Node, firstArgument, ), {]
[;, private, String, propName, =, null, ;, FunctionCallBuilder, (, Node, receiver, ,, Node, firstArgument, ), {, this, ., receiver, =]
[String, propName, =, null, ;, FunctionCallBuilder, (, Node, receiver, ,, Node, firstArgument, ), {, this, ., receiver, =, receiver, ;]
[String, propName, =, null, ;, FunctionCallBuilder, (, Node, receiver, ,, Node, firstArgument, ), {, this, ., receiver, =, receiver, ;]
[;, FunctionCallBuilder, (, Node, receiver, ,, Node, firstArgument, ), {, this, ., receiver, =, receiver, ;, this, ., firstArgument, =]
[this, ., receiver, =, receiver, ;, this, ., firstArgument, =, firstArgument, ;, }, FunctionCallBuilder, setPropName, (, String, propName, ), {]
[this, ., receiver, =, receiver, ;, this, ., firstArgument, =, firstArgument, ;, }, FunctionCallBuilder, setPropName, (, String, propName, ), {]
[receiver, ;, this, ., firstArgument, =, firstArgument, ;, }, FunctionCallBuilder, setPropName, (, String, propName, ), {, this, ., propName, =]
[., firstArgument, =, firstArgument, ;, }, FunctionCallBuilder, setPropName, (, String, propName, ), {, this, ., propName, =, propName, ;, return]
[propName, ), {, this, ., propName, =, propName, ;, return, this, ;, }, FunctionCallBuilder, setIsNewCall, (, boolean, isNew, ), {]
[propName, ), {, this, ., propName, =, propName, ;, return, this, ;, }, FunctionCallBuilder, setIsNewCall, (, boolean, isNew, ), {]
[., propName, =, propName, ;, return, this, ;, }, FunctionCallBuilder, setIsNewCall, (, boolean, isNew, ), {, Preconditions, ., checkState, (]
[propName, =, propName, ;, return, this, ;, }, FunctionCallBuilder, setIsNewCall, (, boolean, isNew, ), {, Preconditions, ., checkState, (, !]
[=, propName, ;, return, this, ;, }, FunctionCallBuilder, setIsNewCall, (, boolean, isNew, ), {, Preconditions, ., checkState, (, !, (]
[=, propName, ;, return, this, ;, }, FunctionCallBuilder, setIsNewCall, (, boolean, isNew, ), {, Preconditions, ., checkState, (, !, (]
[;, return, this, ;, }, FunctionCallBuilder, setIsNewCall, (, boolean, isNew, ), {, Preconditions, ., checkState, (, !, (, isCallFunction, &&]
[;, }, FunctionCallBuilder, setIsNewCall, (, boolean, isNew, ), {, Preconditions, ., checkState, (, !, (, isCallFunction, &&, isNew, ), ,]
[setIsNewCall, (, boolean, isNew, ), {, Preconditions, ., checkState, (, !, (, isCallFunction, &&, isNew, ), ,, "A function call cannot be of the form: new Object.call()", ), ;]
[boolean, isNew, ), {, Preconditions, ., checkState, (, !, (, isCallFunction, &&, isNew, ), ,, "A function call cannot be of the form: new Object.call()", ), ;, isNewCall, =]
[{, Preconditions, ., checkState, (, !, (, isCallFunction, &&, isNew, ), ,, "A function call cannot be of the form: new Object.call()", ), ;, isNewCall, =, isNew, ;, return]
[&&, isNew, ), ,, "A function call cannot be of the form: new Object.call()", ), ;, isNewCall, =, isNew, ;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {]
[&&, isNew, ), ,, "A function call cannot be of the form: new Object.call()", ), ;, isNewCall, =, isNew, ;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {]
["A function call cannot be of the form: new Object.call()", ), ;, isNewCall, =, isNew, ;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, ., checkState, (]
[), ;, isNewCall, =, isNew, ;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, ., checkState, (, !]
[isNewCall, =, isNew, ;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, ., checkState, (, !, isNewCall, ,]
[;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, ., checkState, (, !, isNewCall, ,, "A function call cannot be of the form: new Object.call()", ), ;]
[this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, ., checkState, (, !, isNewCall, ,, "A function call cannot be of the form: new Object.call()", ), ;, isCallFunction, =]
[FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, ., checkState, (, !, isNewCall, ,, "A function call cannot be of the form: new Object.call()", ), ;, isCallFunction, =, true, ;, return]
[isNewCall, ,, "A function call cannot be of the form: new Object.call()", ), ;, isCallFunction, =, true, ;, return, this, ;, }, Action, build, (, ), {, if, (]
[;, isCallFunction, =, true, ;, return, this, ;, }, Action, build, (, ), {, if, (, isCallFunction, ), {, return]
[true, ;, return, this, ;, }, Action, build, (, ), {, if, (, isCallFunction, ), {, return, new, NativeCallFunctionCall, (]
[return, this, ;, }, Action, build, (, ), {, if, (, isCallFunction, ), {, return, new, NativeCallFunctionCall, (, receiver, ,]
[;, }, Action, build, (, ), {, if, (, isCallFunction, ), {, return, new, NativeCallFunctionCall, (, receiver, ,, propName, ,]
[if, (, isCallFunction, ), {, return, new, NativeCallFunctionCall, (, receiver, ,, propName, ,, firstArgument, ), ;, }, else, {, return]
[), {, return, new, NativeCallFunctionCall, (, receiver, ,, propName, ,, firstArgument, ), ;, }, else, {, return, new, FunctionCall, (]
[return, new, NativeCallFunctionCall, (, receiver, ,, propName, ,, firstArgument, ), ;, }, else, {, return, new, FunctionCall, (, isNewCall, ,]
[NativeCallFunctionCall, (, receiver, ,, propName, ,, firstArgument, ), ;, }, else, {, return, new, FunctionCall, (, isNewCall, ,, receiver, ,]
[receiver, ,, propName, ,, firstArgument, ), ;, }, else, {, return, new, FunctionCall, (, isNewCall, ,, receiver, ,, propName, ,]
[(, ConcreteType, recvType, ,, ConcreteType, thisType, ,, List, <, ConcreteType, >, argTypes, ), {, List, <, Assignment, >, assigns, =]
[(, ConcreteType, recvType, ,, ConcreteType, thisType, ,, List, <, ConcreteType, >, argTypes, ), {, List, <, Assignment, >, assigns, =]
[argTypes, ), {, List, <, Assignment, >, assigns, =, Lists, ., newArrayList, (, ), ;, for, (, ConcreteFunctionType, fType, :]
[argTypes, ), {, List, <, Assignment, >, assigns, =, Lists, ., newArrayList, (, ), ;, for, (, ConcreteFunctionType, fType, :]
[assigns, =, Lists, ., newArrayList, (, ), ;, for, (, ConcreteFunctionType, fType, :, recvType, ., getFunctions, (, ), ), {]
[assigns, =, Lists, ., newArrayList, (, ), ;, for, (, ConcreteFunctionType, fType, :, recvType, ., getFunctions, (, ), ), {]
[newArrayList, (, ), ;, for, (, ConcreteFunctionType, fType, :, recvType, ., getFunctions, (, ), ), {, assigns, ., add, (]
[;, for, (, ConcreteFunctionType, fType, :, recvType, ., getFunctions, (, ), ), {, assigns, ., add, (, new, Assignment, (]
[ConcreteFunctionType, fType, :, recvType, ., getFunctions, (, ), ), {, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, )]
[ConcreteFunctionType, fType, :, recvType, ., getFunctions, (, ), ), {, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, )]
[(, ), ), {, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getCallSlot, (, ), ,]
[assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getCallSlot, (, ), ,, fType, ), ), ;]
[assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getCallSlot, (, ), ,, fType, ), ), ;]
[new, Assignment, (, (, ConcreteSlot, ), fType, ., getCallSlot, (, ), ,, fType, ), ), ;, assigns, ., add, (]
[(, ConcreteSlot, ), fType, ., getCallSlot, (, ), ,, fType, ), ), ;, assigns, ., add, (, new, Assignment, (]
[fType, ., getCallSlot, (, ), ,, fType, ), ), ;, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, )]
[fType, ., getCallSlot, (, ), ,, fType, ), ), ;, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, )]
[fType, ), ), ;, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getThisSlot, (, ), ,]
[Assignment, (, (, ConcreteSlot, ), fType, ., getThisSlot, (, ), ,, thisType, ), ), ;, for, (, int, i, =]
[(, ConcreteSlot, ), fType, ., getThisSlot, (, ), ,, thisType, ), ), ;, for, (, int, i, =, 0, ;]
[(, ConcreteSlot, ), fType, ., getThisSlot, (, ), ,, thisType, ), ), ;, for, (, int, i, =, 0, ;]
[), fType, ., getThisSlot, (, ), ,, thisType, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[), fType, ., getThisSlot, (, ), ,, thisType, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[,, thisType, ), ), ;, for, (, int, i, =, 0, ;, i, <, argTypes, ., size, (, ), ;]
[thisType, ), ), ;, for, (, int, i, =, 0, ;, i, <, argTypes, ., size, (, ), ;, ++]
[int, i, =, 0, ;, i, <, argTypes, ., size, (, ), ;, ++, i, ), {, ConcreteSlot, variable, =]
[0, ;, i, <, argTypes, ., size, (, ), ;, ++, i, ), {, ConcreteSlot, variable, =, (, ConcreteSlot, )]
[0, ;, i, <, argTypes, ., size, (, ), ;, ++, i, ), {, ConcreteSlot, variable, =, (, ConcreteSlot, )]
[argTypes, ., size, (, ), ;, ++, i, ), {, ConcreteSlot, variable, =, (, ConcreteSlot, ), fType, ., getParameterSlot, (]
[;, ++, i, ), {, ConcreteSlot, variable, =, (, ConcreteSlot, ), fType, ., getParameterSlot, (, i, ), ;, if, (]
[;, ++, i, ), {, ConcreteSlot, variable, =, (, ConcreteSlot, ), fType, ., getParameterSlot, (, i, ), ;, if, (]
[i, ), {, ConcreteSlot, variable, =, (, ConcreteSlot, ), fType, ., getParameterSlot, (, i, ), ;, if, (, variable, !=]
[ConcreteSlot, variable, =, (, ConcreteSlot, ), fType, ., getParameterSlot, (, i, ), ;, if, (, variable, !=, null, ), {]
[ConcreteSlot, variable, =, (, ConcreteSlot, ), fType, ., getParameterSlot, (, i, ), ;, if, (, variable, !=, null, ), {]
[ConcreteSlot, ), fType, ., getParameterSlot, (, i, ), ;, if, (, variable, !=, null, ), {, assigns, ., add, (]
[., getParameterSlot, (, i, ), ;, if, (, variable, !=, null, ), {, assigns, ., add, (, new, Assignment, (]
[(, i, ), ;, if, (, variable, !=, null, ), {, assigns, ., add, (, new, Assignment, (, variable, ,]
[(, i, ), ;, if, (, variable, !=, null, ), {, assigns, ., add, (, new, Assignment, (, variable, ,]
[if, (, variable, !=, null, ), {, assigns, ., add, (, new, Assignment, (, variable, ,, argTypes, ., get, (]
[add, (, new, Assignment, (, variable, ,, argTypes, ., get, (, i, ), ), ), ;, }, }, }, return]
[<, ConcreteType, >, argTypes, ;, ExternFunctionCall, (, Node, receiver, ,, ConcreteType, thisType, ,, List, <, ConcreteType, >, argTypes, ), {]
[<, ConcreteType, >, argTypes, ;, ExternFunctionCall, (, Node, receiver, ,, ConcreteType, thisType, ,, List, <, ConcreteType, >, argTypes, ), {]
[;, ExternFunctionCall, (, Node, receiver, ,, ConcreteType, thisType, ,, List, <, ConcreteType, >, argTypes, ), {, this, ., receiver, =]
[(, Node, receiver, ,, ConcreteType, thisType, ,, List, <, ConcreteType, >, argTypes, ), {, this, ., receiver, =, receiver, ;]
[(, Node, receiver, ,, ConcreteType, thisType, ,, List, <, ConcreteType, >, argTypes, ), {, this, ., receiver, =, receiver, ;]
[ConcreteType, thisType, ,, List, <, ConcreteType, >, argTypes, ), {, this, ., receiver, =, receiver, ;, this, ., thisType, =]
[,, List, <, ConcreteType, >, argTypes, ), {, this, ., receiver, =, receiver, ;, this, ., thisType, =, thisType, ;]
[,, List, <, ConcreteType, >, argTypes, ), {, this, ., receiver, =, receiver, ;, this, ., thisType, =, thisType, ;]
[>, argTypes, ), {, this, ., receiver, =, receiver, ;, this, ., thisType, =, thisType, ;, this, ., argTypes, =]
[., argTypes, =, argTypes, ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return]
[=, argTypes, ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return, getFunctionCallAssignments, (]
[;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return, getFunctionCallAssignments, (, inferConcreteType, (]
[@, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return, getFunctionCallAssignments, (, inferConcreteType, (, scope, ,]
[Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return, getFunctionCallAssignments, (, inferConcreteType, (, scope, ,, receiver, ), ,]
[Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return, getFunctionCallAssignments, (, inferConcreteType, (, scope, ,, receiver, ), ,, thisType, ,]
[private, final, Node, firstArgument, ;, FunctionCall, (, boolean, isNewCall, ,, Node, receiver, ,, String, propName, ,, Node, firstArgument, ), {]
[private, final, Node, firstArgument, ;, FunctionCall, (, boolean, isNewCall, ,, Node, receiver, ,, String, propName, ,, Node, firstArgument, ), {]
[;, FunctionCall, (, boolean, isNewCall, ,, Node, receiver, ,, String, propName, ,, Node, firstArgument, ), {, this, ., isNewCall, =]
[(, boolean, isNewCall, ,, Node, receiver, ,, String, propName, ,, Node, firstArgument, ), {, this, ., isNewCall, =, isNewCall, ;]
[(, boolean, isNewCall, ,, Node, receiver, ,, String, propName, ,, Node, firstArgument, ), {, this, ., isNewCall, =, isNewCall, ;]
[Node, receiver, ,, String, propName, ,, Node, firstArgument, ), {, this, ., isNewCall, =, isNewCall, ;, this, ., receiver, =]
[,, String, propName, ,, Node, firstArgument, ), {, this, ., isNewCall, =, isNewCall, ;, this, ., receiver, =, receiver, ;]
[,, String, propName, ,, Node, firstArgument, ), {, this, ., isNewCall, =, isNewCall, ;, this, ., receiver, =, receiver, ;]
[Node, firstArgument, ), {, this, ., isNewCall, =, isNewCall, ;, this, ., receiver, =, receiver, ;, this, ., propName, =]
[), {, this, ., isNewCall, =, isNewCall, ;, this, ., receiver, =, receiver, ;, this, ., propName, =, propName, ;]
[), {, this, ., isNewCall, =, isNewCall, ;, this, ., receiver, =, receiver, ;, this, ., propName, =, propName, ;]
[isNewCall, =, isNewCall, ;, this, ., receiver, =, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =]
[isNewCall, ;, this, ., receiver, =, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;]
[isNewCall, ;, this, ., receiver, =, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;]
[receiver, =, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (]
[receiver, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =]
[receiver, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =]
[Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =, ConcreteType, ., NONE, ;, ConcreteType, recvType, =]
[Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =, ConcreteType, ., NONE, ;, ConcreteType, recvType, =, inferConcreteType, (]
[getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =, ConcreteType, ., NONE, ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,]
[{, ConcreteType, thisType, =, ConcreteType, ., NONE, ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (]
[{, ConcreteType, thisType, =, ConcreteType, ., NONE, ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (]
[thisType, =, ConcreteType, ., NONE, ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (, propName, !=]
[., NONE, ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (, propName, !=, null, ), {]
[;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (, propName, !=, null, ), {, thisType, =]
[recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (, propName, !=, null, ), {, thisType, =, recvType, ;]
[inferConcreteType, (, scope, ,, receiver, ), ;, if, (, propName, !=, null, ), {, thisType, =, recvType, ;, recvType, =]
[inferConcreteType, (, scope, ,, receiver, ), ;, if, (, propName, !=, null, ), {, thisType, =, recvType, ;, recvType, =]
[receiver, ), ;, if, (, propName, !=, null, ), {, thisType, =, recvType, ;, recvType, =, thisType, ., getPropertyType, (]
[!=, null, ), {, thisType, =, recvType, ;, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, if, (]
[!=, null, ), {, thisType, =, recvType, ;, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, if, (]
[recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, if, (, recvType, ., isAll, (, ), ), {, throw]
[., getPropertyType, (, propName, ), ;, }, if, (, recvType, ., isAll, (, ), ), {, throw, new, AssertionError, (]
[}, if, (, recvType, ., isAll, (, ), ), {, throw, new, AssertionError, (, "Found call on all type, which makes tighten types useless.", ), ;, }, if, (]
[recvType, ., isAll, (, ), ), {, throw, new, AssertionError, (, "Found call on all type, which makes tighten types useless.", ), ;, }, if, (, isNewCall, ), {]
[isAll, (, ), ), {, throw, new, AssertionError, (, "Found call on all type, which makes tighten types useless.", ), ;, }, if, (, isNewCall, ), {, thisType, =]
[isAll, (, ), ), {, throw, new, AssertionError, (, "Found call on all type, which makes tighten types useless.", ), ;, }, if, (, isNewCall, ), {, thisType, =]
["Found call on all type, which makes tighten types useless.", ), ;, }, if, (, isNewCall, ), {, thisType, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :]
["Found call on all type, which makes tighten types useless.", ), ;, }, if, (, isNewCall, ), {, thisType, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :]
[), {, thisType, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :, recvType, ., getFunctionInstanceTypes, (, ), ), {]
[thisType, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :, recvType, ., getFunctionInstanceTypes, (, ), ), {, thisType, =]
[thisType, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :, recvType, ., getFunctionInstanceTypes, (, ), ), {, thisType, =]
[NONE, ;, for, (, ConcreteInstanceType, instType, :, recvType, ., getFunctionInstanceTypes, (, ), ), {, thisType, =, thisType, ., unionWith, (]
[recvType, ., getFunctionInstanceTypes, (, ), ), {, thisType, =, thisType, ., unionWith, (, instType, ), ;, }, boolean, added, =]
[recvType, ., getFunctionInstanceTypes, (, ), ), {, thisType, =, thisType, ., unionWith, (, instType, ), ;, }, boolean, added, =]
[), ), {, thisType, =, thisType, ., unionWith, (, instType, ), ;, }, boolean, added, =, allInstantiatedTypes, ., add, (]
[thisType, ., unionWith, (, instType, ), ;, }, boolean, added, =, allInstantiatedTypes, ., add, (, thisType, ), ;, if, (]
[(, instType, ), ;, }, boolean, added, =, allInstantiatedTypes, ., add, (, thisType, ), ;, if, (, added, ), {]
[(, instType, ), ;, }, boolean, added, =, allInstantiatedTypes, ., add, (, thisType, ), ;, if, (, added, ), {]
[;, if, (, added, ), {, typeIntersectionMemos, ., clear, (, ), ;, }, }, List, <, ConcreteType, >, argTypes, =]
[;, if, (, added, ), {, typeIntersectionMemos, ., clear, (, ), ;, }, }, List, <, ConcreteType, >, argTypes, =]
[;, }, }, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =]
[}, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =, firstArgument, ;]
[}, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =, firstArgument, ;]
[<, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =, firstArgument, ;, arg, !=]
[>, argTypes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =, firstArgument, ;, arg, !=, null, ;]
[=, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =, firstArgument, ;, arg, !=, null, ;, arg, =]
[=, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =, firstArgument, ;, arg, !=, null, ;, arg, =]
[for, (, Node, arg, =, firstArgument, ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {]
[for, (, Node, arg, =, firstArgument, ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {]
[=, firstArgument, ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (]
[;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (]
[!=, null, ;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,]
[., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return]
[(, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return, getFunctionCallAssignments, (]
[), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return, getFunctionCallAssignments, (, recvType, ,]
[argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return, getFunctionCallAssignments, (, recvType, ,, thisType, ,]
[String, propName, ;, private, final, Node, firstArgument, ;, NativeCallFunctionCall, (, Node, receiver, ,, String, propName, ,, Node, firstArgument, ), {]
[String, propName, ;, private, final, Node, firstArgument, ;, NativeCallFunctionCall, (, Node, receiver, ,, String, propName, ,, Node, firstArgument, ), {]
[final, Node, firstArgument, ;, NativeCallFunctionCall, (, Node, receiver, ,, String, propName, ,, Node, firstArgument, ), {, this, ., receiver, =]
[firstArgument, ;, NativeCallFunctionCall, (, Node, receiver, ,, String, propName, ,, Node, firstArgument, ), {, this, ., receiver, =, receiver, ;]
[firstArgument, ;, NativeCallFunctionCall, (, Node, receiver, ,, String, propName, ,, Node, firstArgument, ), {, this, ., receiver, =, receiver, ;]
[Node, receiver, ,, String, propName, ,, Node, firstArgument, ), {, this, ., receiver, =, receiver, ;, this, ., propName, =]
[,, String, propName, ,, Node, firstArgument, ), {, this, ., receiver, =, receiver, ;, this, ., propName, =, propName, ;]
[,, String, propName, ,, Node, firstArgument, ), {, this, ., receiver, =, receiver, ;, this, ., propName, =, propName, ;]
[Node, firstArgument, ), {, this, ., receiver, =, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =]
[), {, this, ., receiver, =, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;]
[), {, this, ., receiver, =, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;]
[receiver, =, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (]
[receiver, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =]
[receiver, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =]
[), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =, (]
[), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =, (]
[}, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =, (, firstArgument, !=]
[public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =, (, firstArgument, !=, null, ), ?]
[<, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =, (, firstArgument, !=, null, ), ?, inferConcreteType, (]
[>, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =, (, firstArgument, !=, null, ), ?, inferConcreteType, (, scope, ,]
[ConcreteScope, scope, ), {, ConcreteType, thisType, =, (, firstArgument, !=, null, ), ?, inferConcreteType, (, scope, ,, firstArgument, ), :]
[ConcreteScope, scope, ), {, ConcreteType, thisType, =, (, firstArgument, !=, null, ), ?, inferConcreteType, (, scope, ,, firstArgument, ), :]
[), ?, inferConcreteType, (, scope, ,, firstArgument, ), :, getTopScope, (, ), ., getTypeOfThis, (, ), ;, ConcreteType, recvType, =]
[inferConcreteType, (, scope, ,, firstArgument, ), :, getTopScope, (, ), ., getTypeOfThis, (, ), ;, ConcreteType, recvType, =, inferConcreteType, (]
[scope, ,, firstArgument, ), :, getTopScope, (, ), ., getTypeOfThis, (, ), ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,]
[getTopScope, (, ), ., getTypeOfThis, (, ), ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (]
[getTopScope, (, ), ., getTypeOfThis, (, ), ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (]
[getTopScope, (, ), ., getTypeOfThis, (, ), ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (]
[getTypeOfThis, (, ), ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (, recvType, instanceof, ConcreteInstanceType, &&]
[getTypeOfThis, (, ), ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (, recvType, instanceof, ConcreteInstanceType, &&]
[(, ), ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (, recvType, instanceof, ConcreteInstanceType, &&, (]
[ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (, recvType, instanceof, ConcreteInstanceType, &&, (, (, ConcreteInstanceType, )]
[), ;, if, (, recvType, instanceof, ConcreteInstanceType, &&, (, (, ConcreteInstanceType, ), recvType, ), ., isFunctionPrototype, (, ), ), {]
[if, (, recvType, instanceof, ConcreteInstanceType, &&, (, (, ConcreteInstanceType, ), recvType, ), ., isFunctionPrototype, (, ), ), {, recvType, =]
[if, (, recvType, instanceof, ConcreteInstanceType, &&, (, (, ConcreteInstanceType, ), recvType, ), ., isFunctionPrototype, (, ), ), {, recvType, =]
[ConcreteInstanceType, &&, (, (, ConcreteInstanceType, ), recvType, ), ., isFunctionPrototype, (, ), ), {, recvType, =, thisType, ., getPropertyType, (]
[(, ), ), {, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, List, <, ConcreteType, >, argTypes, =]
[(, ), ), {, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, List, <, ConcreteType, >, argTypes, =]
[), ;, }, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =]
[), ;, }, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =]
[>, argTypes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =, firstArgument, ., getNext, (, ), ;]
[>, argTypes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =, firstArgument, ., getNext, (, ), ;]
[=, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =, firstArgument, ., getNext, (, ), ;, arg, !=]
[., newArrayList, (, ), ;, for, (, Node, arg, =, firstArgument, ., getNext, (, ), ;, arg, !=, null, ;]
[(, ), ;, for, (, Node, arg, =, firstArgument, ., getNext, (, ), ;, arg, !=, null, ;, arg, =]
[(, ), ;, for, (, Node, arg, =, firstArgument, ., getNext, (, ), ;, arg, !=, null, ;, arg, =]
[=, firstArgument, ., getNext, (, ), ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {]
[=, firstArgument, ., getNext, (, ), ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {]
[(, ), ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (]
[;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (]
[!=, null, ;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,]
[., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return]
[(, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return, getFunctionCallAssignments, (]
[), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return, getFunctionCallAssignments, (, recvType, ,]
[argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return, getFunctionCallAssignments, (, recvType, ,, thisType, ,]
[{, private, final, ConcreteScope, scope, ;, private, final, boolean, inExterns, ;, CreateScope, (, ConcreteScope, scope, ,, boolean, inExterns, ), {]
[{, private, final, ConcreteScope, scope, ;, private, final, boolean, inExterns, ;, CreateScope, (, ConcreteScope, scope, ,, boolean, inExterns, ), {]
[scope, ;, private, final, boolean, inExterns, ;, CreateScope, (, ConcreteScope, scope, ,, boolean, inExterns, ), {, this, ., scope, =]
[private, final, boolean, inExterns, ;, CreateScope, (, ConcreteScope, scope, ,, boolean, inExterns, ), {, this, ., scope, =, scope, ;]
[private, final, boolean, inExterns, ;, CreateScope, (, ConcreteScope, scope, ,, boolean, inExterns, ), {, this, ., scope, =, scope, ;]
[;, CreateScope, (, ConcreteScope, scope, ,, boolean, inExterns, ), {, this, ., scope, =, scope, ;, this, ., inExterns, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[{, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :, Node, name, ;, for, (]
[(, n, ., getType, (, ), ), {, case, Token, ., VAR, :, Node, name, ;, for, (, name, =]
[(, n, ., getType, (, ), ), {, case, Token, ., VAR, :, Node, name, ;, for, (, name, =]
[), {, case, Token, ., VAR, :, Node, name, ;, for, (, name, =, n, ., getFirstChild, (, ), ;]
[), {, case, Token, ., VAR, :, Node, name, ;, for, (, name, =, n, ., getFirstChild, (, ), ;]
[case, Token, ., VAR, :, Node, name, ;, for, (, name, =, n, ., getFirstChild, (, ), ;, name, !=]
[., VAR, :, Node, name, ;, for, (, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;]
[:, Node, name, ;, for, (, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =]
[:, Node, name, ;, for, (, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =]
[., getFirstChild, (, ), ;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, if, (]
[), ;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, if, (, inExterns, ), {]
[), ;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, if, (, inExterns, ), {]
[null, ;, name, =, name, ., getNext, (, ), ), {, if, (, inExterns, ), {, scope, ., declareSlot, (]
[null, ;, name, =, name, ., getNext, (, ), ), {, if, (, inExterns, ), {, scope, ., declareSlot, (]
[getNext, (, ), ), {, if, (, inExterns, ), {, scope, ., declareSlot, (, name, ., getString, (, ), ,]
[), ), {, if, (, inExterns, ), {, scope, ., declareSlot, (, name, ., getString, (, ), ,, n, ,]
[{, if, (, inExterns, ), {, scope, ., declareSlot, (, name, ., getString, (, ), ,, n, ,, createType, (]
[(, inExterns, ), {, scope, ., declareSlot, (, name, ., getString, (, ), ,, n, ,, createType, (, name, ,]
[(, name, ., getString, (, ), ,, n, ,, createType, (, name, ,, scope, ), ), ;, }, else, {]
[(, name, ., getString, (, ), ,, n, ,, createType, (, name, ,, scope, ), ), ;, }, else, {]
[(, ), ,, n, ,, createType, (, name, ,, scope, ), ), ;, }, else, {, scope, ., declareSlot, (]
[(, ), ,, n, ,, createType, (, name, ,, scope, ), ), ;, }, else, {, scope, ., declareSlot, (]
[(, name, ,, scope, ), ), ;, }, else, {, scope, ., declareSlot, (, name, ., getString, (, ), ,]
[), ;, }, else, {, scope, ., declareSlot, (, name, ., getString, (, ), ,, n, ), ;, if, (]
[), ;, }, else, {, scope, ., declareSlot, (, name, ., getString, (, ), ,, n, ), ;, if, (]
[), ;, }, else, {, scope, ., declareSlot, (, name, ., getString, (, ), ,, n, ), ;, if, (]
[., declareSlot, (, name, ., getString, (, ), ,, n, ), ;, if, (, name, ., getFirstChild, (, ), !=]
[name, ., getString, (, ), ,, n, ), ;, if, (, name, ., getFirstChild, (, ), !=, null, ), {]
[getString, (, ), ,, n, ), ;, if, (, name, ., getFirstChild, (, ), !=, null, ), {, addActions, (]
[), ,, n, ), ;, if, (, name, ., getFirstChild, (, ), !=, null, ), {, addActions, (, createAssignmentActions, (]
[n, ), ;, if, (, name, ., getFirstChild, (, ), !=, null, ), {, addActions, (, createAssignmentActions, (, name, ,]
[n, ), ;, if, (, name, ., getFirstChild, (, ), !=, null, ), {, addActions, (, createAssignmentActions, (, name, ,]
[., getFirstChild, (, ), !=, null, ), {, addActions, (, createAssignmentActions, (, name, ,, name, ., getFirstChild, (, ), ,]
[createAssignmentActions, (, name, ,, name, ., getFirstChild, (, ), ,, n, ), ), ;, }, }, }, break, ;, case]
[createAssignmentActions, (, name, ,, name, ., getFirstChild, (, ), ,, n, ), ), ;, }, }, }, break, ;, case]
[getFirstChild, (, ), ,, n, ), ), ;, }, }, }, break, ;, case, Token, ., GETPROP, :, if, (]
[), ;, }, }, }, break, ;, case, Token, ., GETPROP, :, if, (, inExterns, ), {, ConcreteType, type, =]
[}, }, }, break, ;, case, Token, ., GETPROP, :, if, (, inExterns, ), {, ConcreteType, type, =, inferConcreteType, (]
[;, case, Token, ., GETPROP, :, if, (, inExterns, ), {, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,]
[:, if, (, inExterns, ), {, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n, ), ;, if, (]
[:, if, (, inExterns, ), {, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n, ), ;, if, (]
[(, getTopScope, (, ), ,, n, ), ;, if, (, type, ., isNone, (, ), ), {, ConcreteScope, scope, =]
[), ,, n, ), ;, if, (, type, ., isNone, (, ), ), {, ConcreteScope, scope, =, (, ConcreteScope, )]
[), ,, n, ), ;, if, (, type, ., isNone, (, ), ), {, ConcreteScope, scope, =, (, ConcreteScope, )]
[n, ), ;, if, (, type, ., isNone, (, ), ), {, ConcreteScope, scope, =, (, ConcreteScope, ), inferConcreteType, (]
[(, type, ., isNone, (, ), ), {, ConcreteScope, scope, =, (, ConcreteScope, ), inferConcreteType, (, getTopScope, (, ), ,]
[(, type, ., isNone, (, ), ), {, ConcreteScope, scope, =, (, ConcreteScope, ), inferConcreteType, (, getTopScope, (, ), ,]
[), inferConcreteType, (, getTopScope, (, ), ,, n, ., getFirstChild, (, ), ), ., getScope, (, ), ;, if, (]
[), inferConcreteType, (, getTopScope, (, ), ,, n, ., getFirstChild, (, ), ), ., getScope, (, ), ;, if, (]
[(, getTopScope, (, ), ,, n, ., getFirstChild, (, ), ), ., getScope, (, ), ;, if, (, scope, !=]
[), ,, n, ., getFirstChild, (, ), ), ., getScope, (, ), ;, if, (, scope, !=, null, ), {]
[n, ., getFirstChild, (, ), ), ., getScope, (, ), ;, if, (, scope, !=, null, ), {, type, =]
[getFirstChild, (, ), ), ., getScope, (, ), ;, if, (, scope, !=, null, ), {, type, =, createType, (]
[getFirstChild, (, ), ), ., getScope, (, ), ;, if, (, scope, !=, null, ), {, type, =, createType, (]
[if, (, scope, !=, null, ), {, type, =, createType, (, n, ., getJSType, (, ), ), ;, if, (]
[if, (, scope, !=, null, ), {, type, =, createType, (, n, ., getJSType, (, ), ), ;, if, (]
[if, (, scope, !=, null, ), {, type, =, createType, (, n, ., getJSType, (, ), ), ;, if, (]
[{, type, =, createType, (, n, ., getJSType, (, ), ), ;, if, (, type, ., isNone, (, ), ||]
[{, type, =, createType, (, n, ., getJSType, (, ), ), ;, if, (, type, ., isNone, (, ), ||]
[), ;, if, (, type, ., isNone, (, ), ||, type, ., isAll, (, ), ), {, break, ;, }]
[if, (, type, ., isNone, (, ), ||, type, ., isAll, (, ), ), {, break, ;, }, type, =]
[type, ., isNone, (, ), ||, type, ., isAll, (, ), ), {, break, ;, }, type, =, createUnionWithSubTypes, (]
[type, ., isAll, (, ), ), {, break, ;, }, type, =, createUnionWithSubTypes, (, type, ), ;, Node, nameNode, =]
[type, ., isAll, (, ), ), {, break, ;, }, type, =, createUnionWithSubTypes, (, type, ), ;, Node, nameNode, =]
[{, break, ;, }, type, =, createUnionWithSubTypes, (, type, ), ;, Node, nameNode, =, n, ., getLastChild, (, ), ;]
[{, break, ;, }, type, =, createUnionWithSubTypes, (, type, ), ;, Node, nameNode, =, n, ., getLastChild, (, ), ;]
[type, =, createUnionWithSubTypes, (, type, ), ;, Node, nameNode, =, n, ., getLastChild, (, ), ;, scope, ., declareSlot, (]
[type, =, createUnionWithSubTypes, (, type, ), ;, Node, nameNode, =, n, ., getLastChild, (, ), ;, scope, ., declareSlot, (]
[;, Node, nameNode, =, n, ., getLastChild, (, ), ;, scope, ., declareSlot, (, nameNode, ., getString, (, ), ,]
[nameNode, =, n, ., getLastChild, (, ), ;, scope, ., declareSlot, (, nameNode, ., getString, (, ), ,, n, ,]
[., declareSlot, (, nameNode, ., getString, (, ), ,, n, ,, type, ), ;, }, }, }, break, ;, case]
[., declareSlot, (, nameNode, ., getString, (, ), ,, n, ,, type, ), ;, }, }, }, break, ;, case]
[(, ), ,, n, ,, type, ), ;, }, }, }, break, ;, case, Token, ., FUNCTION, :, if, (]
[(, ), ,, n, ,, type, ), ;, }, }, }, break, ;, case, Token, ., FUNCTION, :, if, (]
[,, type, ), ;, }, }, }, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (]
[}, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, if, (]
[break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, if, (, !]
[break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, if, (, !]
[break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, if, (, !]
[), ), {, if, (, !, n, ., getJSType, (, ), ., isNoObjectType, (, ), ), {, ConcreteFunctionType, type, =]
[{, if, (, !, n, ., getJSType, (, ), ., isNoObjectType, (, ), ), {, ConcreteFunctionType, type, =, createConcreteFunction, (]
[(, !, n, ., getJSType, (, ), ., isNoObjectType, (, ), ), {, ConcreteFunctionType, type, =, createConcreteFunction, (, n, ,]
[., getJSType, (, ), ., isNoObjectType, (, ), ), {, ConcreteFunctionType, type, =, createConcreteFunction, (, n, ,, scope, ), ;]
[., getJSType, (, ), ., isNoObjectType, (, ), ), {, ConcreteFunctionType, type, =, createConcreteFunction, (, n, ,, scope, ), ;]
[., isNoObjectType, (, ), ), {, ConcreteFunctionType, type, =, createConcreteFunction, (, n, ,, scope, ), ;, scope, ., declareSlot, (]
[., isNoObjectType, (, ), ), {, ConcreteFunctionType, type, =, createConcreteFunction, (, n, ,, scope, ), ;, scope, ., declareSlot, (]
[., isNoObjectType, (, ), ), {, ConcreteFunctionType, type, =, createConcreteFunction, (, n, ,, scope, ), ;, scope, ., declareSlot, (]
[(, n, ,, scope, ), ;, scope, ., declareSlot, (, n, ., getFirstChild, (, ), ., getString, (, ), ,]
[,, scope, ), ;, scope, ., declareSlot, (, n, ., getFirstChild, (, ), ., getString, (, ), ,, n, ,]
[., declareSlot, (, n, ., getFirstChild, (, ), ., getString, (, ), ,, n, ,, type, ), ;, if, (]
[., declareSlot, (, n, ., getFirstChild, (, ), ., getString, (, ), ,, n, ,, type, ), ;, if, (]
[(, n, ., getFirstChild, (, ), ., getString, (, ), ,, n, ,, type, ), ;, if, (, inExterns, &&]
[(, n, ., getFirstChild, (, ), ., getString, (, ), ,, n, ,, type, ), ;, if, (, inExterns, &&]
[(, n, ., getFirstChild, (, ), ., getString, (, ), ,, n, ,, type, ), ;, if, (, inExterns, &&]
[., getString, (, ), ,, n, ,, type, ), ;, if, (, inExterns, &&, type, ., getInstanceType, (, ), !=]
[), ,, n, ,, type, ), ;, if, (, inExterns, &&, type, ., getInstanceType, (, ), !=, null, ), {]
[), ,, n, ,, type, ), ;, if, (, inExterns, &&, type, ., getInstanceType, (, ), !=, null, ), {]
[type, ), ;, if, (, inExterns, &&, type, ., getInstanceType, (, ), !=, null, ), {, allInstantiatedTypes, ., add, (]
[type, ), ;, if, (, inExterns, &&, type, ., getInstanceType, (, ), !=, null, ), {, allInstantiatedTypes, ., add, (]
[null, ), {, allInstantiatedTypes, ., add, (, type, ., getInstanceType, (, ), ), ;, }, }, }, break, ;, case]
[null, ), {, allInstantiatedTypes, ., add, (, type, ., getInstanceType, (, ), ), ;, }, }, }, break, ;, case]
[type, ., getInstanceType, (, ), ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =]
[type, ., getInstanceType, (, ), ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =]
[}, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[:, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, inExterns, ), {, ConcreteScope, scope, ;, if, (]
[:, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, inExterns, ), {, ConcreteScope, scope, ;, if, (]
[if, (, inExterns, ), {, ConcreteScope, scope, ;, if, (, lhs, ., isGetProp, (, ), ), {, ConcreteType, type, =]
[inExterns, ), {, ConcreteScope, scope, ;, if, (, lhs, ., isGetProp, (, ), ), {, ConcreteType, type, =, inferConcreteType, (]
[scope, ;, if, (, lhs, ., isGetProp, (, ), ), {, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,]
[scope, ;, if, (, lhs, ., isGetProp, (, ), ), {, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,]
[(, ), ), {, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, lhs, ., getFirstChild, (, ), ), ;]
[), {, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, lhs, ., getFirstChild, (, ), ), ;, scope, =]
[type, =, inferConcreteType, (, getTopScope, (, ), ,, lhs, ., getFirstChild, (, ), ), ;, scope, =, (, ConcreteScope, )]
[type, =, inferConcreteType, (, getTopScope, (, ), ,, lhs, ., getFirstChild, (, ), ), ;, scope, =, (, ConcreteScope, )]
[., getFirstChild, (, ), ), ;, scope, =, (, ConcreteScope, ), type, ., getScope, (, ), ;, }, else, {]
[(, ), ), ;, scope, =, (, ConcreteScope, ), type, ., getScope, (, ), ;, }, else, {, scope, =]
[ConcreteScope, ), type, ., getScope, (, ), ;, }, else, {, scope, =, getTopScope, (, ), ;, }, if, (]
[ConcreteScope, ), type, ., getScope, (, ), ;, }, else, {, scope, =, getTopScope, (, ), ;, }, if, (]
[type, ., getScope, (, ), ;, }, else, {, scope, =, getTopScope, (, ), ;, }, if, (, scope, ==]
[else, {, scope, =, getTopScope, (, ), ;, }, if, (, scope, ==, null, ), break, ;, ConcreteType, type, =]
[scope, =, getTopScope, (, ), ;, }, if, (, scope, ==, null, ), break, ;, ConcreteType, type, =, inferConcreteType, (]
[), ;, }, if, (, scope, ==, null, ), break, ;, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,]
[scope, ==, null, ), break, ;, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n, ), ;, if, (]
[scope, ==, null, ), break, ;, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n, ), ;, if, (]
[scope, ==, null, ), break, ;, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n, ), ;, if, (]
[ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n, ), ;, if, (, type, ., isNone, (, ), ||]
[ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n, ), ;, if, (, type, ., isNone, (, ), ||]
[if, (, type, ., isNone, (, ), ||, type, ., isAll, (, ), ), {, break, ;, }, if, (]
[if, (, type, ., isNone, (, ), ||, type, ., isAll, (, ), ), {, break, ;, }, if, (]
[isAll, (, ), ), {, break, ;, }, if, (, type, ., isFunction, (, ), ), {, JSType, lhsType, =]
[isAll, (, ), ), {, break, ;, }, if, (, type, ., isFunction, (, ), ), {, JSType, lhsType, =]
[if, (, type, ., isFunction, (, ), ), {, JSType, lhsType, =, lhs, ., getJSType, (, ), ;, if, (]
[if, (, type, ., isFunction, (, ), ), {, JSType, lhsType, =, lhs, ., getJSType, (, ), ;, if, (]
[type, ., isFunction, (, ), ), {, JSType, lhsType, =, lhs, ., getJSType, (, ), ;, if, (, lhsType, ==]
[=, lhs, ., getJSType, (, ), ;, if, (, lhsType, ==, null, ), {, break, ;, }, FunctionType, funType, =]
[=, lhs, ., getJSType, (, ), ;, if, (, lhsType, ==, null, ), {, break, ;, }, FunctionType, funType, =]
[=, lhs, ., getJSType, (, ), ;, if, (, lhsType, ==, null, ), {, break, ;, }, FunctionType, funType, =]
[), {, break, ;, }, FunctionType, funType, =, lhsType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[), {, break, ;, }, FunctionType, funType, =, lhsType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[break, ;, }, FunctionType, funType, =, lhsType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, funType, ==]
[(, ), ., toMaybeFunctionType, (, ), ;, if, (, funType, ==, null, ), {, break, ;, }, ConcreteType, retType, =]
[., toMaybeFunctionType, (, ), ;, if, (, funType, ==, null, ), {, break, ;, }, ConcreteType, retType, =, createType, (]
[., toMaybeFunctionType, (, ), ;, if, (, funType, ==, null, ), {, break, ;, }, ConcreteType, retType, =, createType, (]
[funType, ==, null, ), {, break, ;, }, ConcreteType, retType, =, createType, (, funType, ., getReturnType, (, ), ), ;]
[null, ), {, break, ;, }, ConcreteType, retType, =, createType, (, funType, ., getReturnType, (, ), ), ;, retType, =]
[{, break, ;, }, ConcreteType, retType, =, createType, (, funType, ., getReturnType, (, ), ), ;, retType, =, createUnionWithSubTypes, (]
[=, createType, (, funType, ., getReturnType, (, ), ), ;, retType, =, createUnionWithSubTypes, (, retType, ), ;, ConcreteType, newret, =]
[=, createType, (, funType, ., getReturnType, (, ), ), ;, retType, =, createUnionWithSubTypes, (, retType, ), ;, ConcreteType, newret, =]
[=, createType, (, funType, ., getReturnType, (, ), ), ;, retType, =, createUnionWithSubTypes, (, retType, ), ;, ConcreteType, newret, =]
[=, createType, (, funType, ., getReturnType, (, ), ), ;, retType, =, createUnionWithSubTypes, (, retType, ), ;, ConcreteType, newret, =]
[=, createType, (, funType, ., getReturnType, (, ), ), ;, retType, =, createUnionWithSubTypes, (, retType, ), ;, ConcreteType, newret, =]
[;, ConcreteType, newret, =, type, ., toFunction, (, ), ., getReturnSlot, (, ), ., getType, (, ), ., unionWith, (]
[=, type, ., toFunction, (, ), ., getReturnSlot, (, ), ., getType, (, ), ., unionWith, (, retType, ), ;]
[=, type, ., toFunction, (, ), ., getReturnSlot, (, ), ., getType, (, ), ., unionWith, (, retType, ), ;]
[type, ., toFunction, (, ), ., getReturnSlot, (, ), ., getType, (, ), ., unionWith, (, retType, ), ;, (]
[(, ), ., getReturnSlot, (, ), ., getType, (, ), ., unionWith, (, retType, ), ;, (, (, ConcreteScope, )]
[(, ), ., getReturnSlot, (, ), ., getType, (, ), ., unionWith, (, retType, ), ;, (, (, ConcreteScope, )]
[), ., unionWith, (, retType, ), ;, (, (, ConcreteScope, ), type, ., getScope, (, ), ), ., declareSlot, (]
[), ., unionWith, (, retType, ), ;, (, (, ConcreteScope, ), type, ., getScope, (, ), ), ., declareSlot, (]
[retType, ), ;, (, (, ConcreteScope, ), type, ., getScope, (, ), ), ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,]
[;, (, (, ConcreteScope, ), type, ., getScope, (, ), ), ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, n, ,]
[), type, ., getScope, (, ), ), ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, n, ,, newret, ), ;, }]
[), type, ., getScope, (, ), ), ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, n, ,, newret, ), ;, }]
[(, ), ), ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, n, ,, newret, ), ;, }, scope, ., declareSlot, (]
[(, ), ), ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, n, ,, newret, ), ;, }, scope, ., declareSlot, (]
[(, ), ), ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, n, ,, newret, ), ;, }, scope, ., declareSlot, (]
[n, ,, newret, ), ;, }, scope, ., declareSlot, (, lhs, ., getLastChild, (, ), ., getString, (, ), ,]
[newret, ), ;, }, scope, ., declareSlot, (, lhs, ., getLastChild, (, ), ., getString, (, ), ,, n, ,]
[declareSlot, (, lhs, ., getLastChild, (, ), ., getString, (, ), ,, n, ,, type, ), ;, }, else, {]
[lhs, ., getLastChild, (, ), ., getString, (, ), ,, n, ,, type, ), ;, }, else, {, addActions, (]
[getLastChild, (, ), ., getString, (, ), ,, n, ,, type, ), ;, }, else, {, addActions, (, createAssignmentActions, (]
[), ., getString, (, ), ,, n, ,, type, ), ;, }, else, {, addActions, (, createAssignmentActions, (, lhs, ,]
[), ., getString, (, ), ,, n, ,, type, ), ;, }, else, {, addActions, (, createAssignmentActions, (, lhs, ,]
[n, ,, type, ), ;, }, else, {, addActions, (, createAssignmentActions, (, lhs, ,, n, ., getLastChild, (, ), ,]
[addActions, (, createAssignmentActions, (, lhs, ,, n, ., getLastChild, (, ), ,, n, ), ), ;, }, break, ;, case]
[addActions, (, createAssignmentActions, (, lhs, ,, n, ., getLastChild, (, ), ,, n, ), ), ;, }, break, ;, case]
[,, n, ., getLastChild, (, ), ,, n, ), ), ;, }, break, ;, case, Token, ., NEW, :, case]
[,, n, ., getLastChild, (, ), ,, n, ), ), ;, }, break, ;, case, Token, ., NEW, :, case]
[n, ), ), ;, }, break, ;, case, Token, ., NEW, :, case, Token, ., CALL, :, Node, receiver, =]
[n, ), ), ;, }, break, ;, case, Token, ., NEW, :, case, Token, ., CALL, :, Node, receiver, =]
[Token, ., NEW, :, case, Token, ., CALL, :, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (]
[Token, ., NEW, :, case, Token, ., CALL, :, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (]
[receiver, =, n, ., getFirstChild, (, ), ;, if, (, receiver, ., isGetProp, (, ), ), {, Node, first, =]
[receiver, =, n, ., getFirstChild, (, ), ;, if, (, receiver, ., isGetProp, (, ), ), {, Node, first, =]
[if, (, receiver, ., isGetProp, (, ), ), {, Node, first, =, receiver, ., getFirstChild, (, ), ;, if, (]
[if, (, receiver, ., isGetProp, (, ), ), {, Node, first, =, receiver, ., getFirstChild, (, ), ;, if, (]
[isGetProp, (, ), ), {, Node, first, =, receiver, ., getFirstChild, (, ), ;, if, (, "call", ., equals, (]
[isGetProp, (, ), ), {, Node, first, =, receiver, ., getFirstChild, (, ), ;, if, (, "call", ., equals, (]
[isGetProp, (, ), ), {, Node, first, =, receiver, ., getFirstChild, (, ), ;, if, (, "call", ., equals, (]
[if, (, "call", ., equals, (, first, ., getNext, (, ), ., getString, (, ), ), ), {, if, (]
[if, (, "call", ., equals, (, first, ., getNext, (, ), ., getString, (, ), ), ), {, if, (]
[., getNext, (, ), ., getString, (, ), ), ), {, if, (, first, ., isGetProp, (, ), ), {]
[(, ), ., getString, (, ), ), ), {, if, (, first, ., isGetProp, (, ), ), {, addAction, (]
[(, ), ., getString, (, ), ), ), {, if, (, first, ., isGetProp, (, ), ), {, addAction, (]
[(, ), ., getString, (, ), ), ), {, if, (, first, ., isGetProp, (, ), ), {, addAction, (]
[(, ), ., getString, (, ), ), ), {, if, (, first, ., isGetProp, (, ), ), {, addAction, (]
[getString, (, ), ), ), {, if, (, first, ., isGetProp, (, ), ), {, addAction, (, new, FunctionCallBuilder, (]
[), ), ), {, if, (, first, ., isGetProp, (, ), ), {, addAction, (, new, FunctionCallBuilder, (, first, ,]
[), ), ), {, if, (, first, ., isGetProp, (, ), ), {, addAction, (, new, FunctionCallBuilder, (, first, ,]
[(, ), ), {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (]
[(, ), ), {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (]
[(, ), ), {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (]
[(, ), ), {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (]
[(, ), ., getString, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, else, {]
[., getString, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, else, {, addAction, (]
[., getString, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, else, {, addAction, (]
[., getString, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, else, {, addAction, (]
[), ), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, else, {, addAction, (, new, FunctionCallBuilder, (]
[., setIsCallFunction, (, ), ., build, (, ), ), ;, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,]
[., setIsCallFunction, (, ), ., build, (, ), ), ;, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,]
[receiver, ., getNext, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, }, else, {]
[getNext, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, }, else, {, addAction, (]
[getNext, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, }, else, {, addAction, (]
[getNext, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, }, else, {, addAction, (]
[), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (]
[setIsCallFunction, (, ), ., build, (, ), ), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,]
[setIsCallFunction, (, ), ., build, (, ), ), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,]
[}, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (]
[}, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (]
[}, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (]
[first, ., getNext, (, ), ., getString, (, ), ), ., build, (, ), ), ;, }, }, else, {]
[getNext, (, ), ., getString, (, ), ), ., build, (, ), ), ;, }, }, else, {, addAction, (]
[getNext, (, ), ., getString, (, ), ), ., build, (, ), ), ;, }, }, else, {, addAction, (]
[getNext, (, ), ., getString, (, ), ), ., build, (, ), ), ;, }, }, else, {, addAction, (]
[., getString, (, ), ), ., build, (, ), ), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (]
[(, ), ), ., build, (, ), ), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (, receiver, ,]
[(, ), ), ., build, (, ), ), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (, receiver, ,]
[}, }, else, {, addAction, (, new, FunctionCallBuilder, (, receiver, ,, receiver, ., getNext, (, ), ), ., setIsNewCall, (]
[}, }, else, {, addAction, (, new, FunctionCallBuilder, (, receiver, ,, receiver, ., getNext, (, ), ), ., setIsNewCall, (]
[), ., setIsNewCall, (, n, ., isNew, (, ), ), ., build, (, ), ), ;, }, break, ;, case]
[), ., setIsNewCall, (, n, ., isNew, (, ), ), ., build, (, ), ), ;, }, break, ;, case]
[isNew, (, ), ), ., build, (, ), ), ;, }, break, ;, case, Token, ., NAME, :, if, (]
[isNew, (, ), ), ., build, (, ), ), ;, }, break, ;, case, Token, ., NAME, :, if, (]
[isNew, (, ), ), ., build, (, ), ), ;, }, break, ;, case, Token, ., NAME, :, if, (]
[(, ), ), ;, }, break, ;, case, Token, ., NAME, :, if, (, parent, ., isCatch, (, ), &&]
[(, ), ), ;, }, break, ;, case, Token, ., NAME, :, if, (, parent, ., isCatch, (, ), &&]
[(, ), ), ;, }, break, ;, case, Token, ., NAME, :, if, (, parent, ., isCatch, (, ), &&]
[;, case, Token, ., NAME, :, if, (, parent, ., isCatch, (, ), &&, parent, ., getFirstChild, (, ), ==]
[., NAME, :, if, (, parent, ., isCatch, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {]
[., NAME, :, if, (, parent, ., isCatch, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {]
[(, parent, ., isCatch, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, scope, ., declareSlot, (]
[(, parent, ., isCatch, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, scope, ., declareSlot, (]
[&&, parent, ., getFirstChild, (, ), ==, n, ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,]
[., getFirstChild, (, ), ==, n, ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ,]
[(, ), ==, n, ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ,, createUnionWithSubTypes, (]
[(, ), ==, n, ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ,, createUnionWithSubTypes, (]
[==, n, ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ,, createUnionWithSubTypes, (, createType, (]
[==, n, ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ,, createUnionWithSubTypes, (, createType, (]
[declareSlot, (, n, ., getString, (, ), ,, n, ,, createUnionWithSubTypes, (, createType, (, getTypeRegistry, (, ), ., getType, (]
[getTypeRegistry, (, ), ., getType, (, "Error", ), ), ., toInstance, (, ), ), ), ;, }, break, ;, case]
[getTypeRegistry, (, ), ., getType, (, "Error", ), ), ., toInstance, (, ), ), ), ;, }, break, ;, case]
["Error", ), ), ., toInstance, (, ), ), ), ;, }, break, ;, case, Token, ., RETURN, :, if, (]
["Error", ), ), ., toInstance, (, ), ), ), ;, }, break, ;, case, Token, ., RETURN, :, if, (]
["Error", ), ), ., toInstance, (, ), ), ), ;, }, break, ;, case, Token, ., RETURN, :, if, (]
[), ), ), ;, }, break, ;, case, Token, ., RETURN, :, if, (, n, ., getFirstChild, (, ), !=]
[;, }, break, ;, case, Token, ., RETURN, :, if, (, n, ., getFirstChild, (, ), !=, null, ), {]
[break, ;, case, Token, ., RETURN, :, if, (, n, ., getFirstChild, (, ), !=, null, ), {, addAction, (]
[Token, ., RETURN, :, if, (, n, ., getFirstChild, (, ), !=, null, ), {, addAction, (, new, VariableAssignAction, (]
[:, if, (, n, ., getFirstChild, (, ), !=, null, ), {, addAction, (, new, VariableAssignAction, (, (, ConcreteSlot, )]
[:, if, (, n, ., getFirstChild, (, ), !=, null, ), {, addAction, (, new, VariableAssignAction, (, (, ConcreteSlot, )]
[., getFirstChild, (, ), !=, null, ), {, addAction, (, new, VariableAssignAction, (, (, ConcreteSlot, ), scope, ., getOwnSlot, (]
[., getFirstChild, (, ), !=, null, ), {, addAction, (, new, VariableAssignAction, (, (, ConcreteSlot, ), scope, ., getOwnSlot, (]
[null, ), {, addAction, (, new, VariableAssignAction, (, (, ConcreteSlot, ), scope, ., getOwnSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ), ,]
[null, ), {, addAction, (, new, VariableAssignAction, (, (, ConcreteSlot, ), scope, ., getOwnSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ), ,]
[), ,, n, ., getFirstChild, (, ), ), ), ;, }, break, ;, }, Collection, <, Action, >, actions, =]
[n, ., getFirstChild, (, ), ), ), ;, }, break, ;, }, Collection, <, Action, >, actions, =, getImplicitActions, (]
[), ), ;, }, break, ;, }, Collection, <, Action, >, actions, =, getImplicitActions, (, n, ), ;, if, (]
[), ), ;, }, break, ;, }, Collection, <, Action, >, actions, =, getImplicitActions, (, n, ), ;, if, (]
[;, }, break, ;, }, Collection, <, Action, >, actions, =, getImplicitActions, (, n, ), ;, if, (, actions, !=]
[>, actions, =, getImplicitActions, (, n, ), ;, if, (, actions, !=, null, ), {, for, (, Action, action, :]
[getImplicitActions, (, n, ), ;, if, (, actions, !=, null, ), {, for, (, Action, action, :, actions, ), {]
[n, ), ;, if, (, actions, !=, null, ), {, for, (, Action, action, :, actions, ), {, addAction, (]
[:, actions, ), {, addAction, (, action, ), ;, }, }, }, private, void, addAction, (, Action, action, ), {]
[:, actions, ), {, addAction, (, action, ), ;, }, }, }, private, void, addAction, (, Action, action, ), {]
[addAction, (, action, ), ;, }, }, }, private, void, addAction, (, Action, action, ), {, Preconditions, ., checkState, (]
[(, action, ), ;, }, }, }, private, void, addAction, (, Action, action, ), {, Preconditions, ., checkState, (, !]
[), ;, }, }, }, private, void, addAction, (, Action, action, ), {, Preconditions, ., checkState, (, !, inExterns, ,]
[}, }, private, void, addAction, (, Action, action, ), {, Preconditions, ., checkState, (, !, inExterns, ,, "Unexpected action in externs.", ), ;]
[}, }, private, void, addAction, (, Action, action, ), {, Preconditions, ., checkState, (, !, inExterns, ,, "Unexpected action in externs.", ), ;]
[addAction, (, Action, action, ), {, Preconditions, ., checkState, (, !, inExterns, ,, "Unexpected action in externs.", ), ;, scope, ., addAction, (]
[;, scope, ., addAction, (, action, ), ;, }, private, void, addActions, (, List, <, Action, >, actions, ), {]
[;, scope, ., addAction, (, action, ), ;, }, private, void, addActions, (, List, <, Action, >, actions, ), {]
[(, action, ), ;, }, private, void, addActions, (, List, <, Action, >, actions, ), {, Preconditions, ., checkState, (]
[action, ), ;, }, private, void, addActions, (, List, <, Action, >, actions, ), {, Preconditions, ., checkState, (, !]
[;, }, private, void, addActions, (, List, <, Action, >, actions, ), {, Preconditions, ., checkState, (, !, inExterns, ,]
[Action, >, actions, ), {, Preconditions, ., checkState, (, !, inExterns, ,, "Unexpected action in externs.", ), ;, for, (, Action, action, :]
[), {, Preconditions, ., checkState, (, !, inExterns, ,, "Unexpected action in externs.", ), ;, for, (, Action, action, :, actions, ), {]
[), {, Preconditions, ., checkState, (, !, inExterns, ,, "Unexpected action in externs.", ), ;, for, (, Action, action, :, actions, ), {]
[checkState, (, !, inExterns, ,, "Unexpected action in externs.", ), ;, for, (, Action, action, :, actions, ), {, scope, ., addAction, (]
[}, private, List, <, Action, >, createAssignmentActions, (, Node, lhs, ,, Node, rhs, ,, Node, parent, ), {, switch, (]
[}, private, List, <, Action, >, createAssignmentActions, (, Node, lhs, ,, Node, rhs, ,, Node, parent, ), {, switch, (]
[Node, lhs, ,, Node, rhs, ,, Node, parent, ), {, switch, (, lhs, ., getType, (, ), ), {, case]
[Node, lhs, ,, Node, rhs, ,, Node, parent, ), {, switch, (, lhs, ., getType, (, ), ), {, case]
[parent, ), {, switch, (, lhs, ., getType, (, ), ), {, case, Token, ., NAME, :, ConcreteSlot, var, =]
[switch, (, lhs, ., getType, (, ), ), {, case, Token, ., NAME, :, ConcreteSlot, var, =, (, ConcreteSlot, )]
[switch, (, lhs, ., getType, (, ), ), {, case, Token, ., NAME, :, ConcreteSlot, var, =, (, ConcreteSlot, )]
[getType, (, ), ), {, case, Token, ., NAME, :, ConcreteSlot, var, =, (, ConcreteSlot, ), scope, ., getSlot, (]
[getType, (, ), ), {, case, Token, ., NAME, :, ConcreteSlot, var, =, (, ConcreteSlot, ), scope, ., getSlot, (]
[., NAME, :, ConcreteSlot, var, =, (, ConcreteSlot, ), scope, ., getSlot, (, lhs, ., getString, (, ), ), ;]
[., NAME, :, ConcreteSlot, var, =, (, ConcreteSlot, ), scope, ., getSlot, (, lhs, ., getString, (, ), ), ;]
[var, =, (, ConcreteSlot, ), scope, ., getSlot, (, lhs, ., getString, (, ), ), ;, Preconditions, ., checkState, (]
[var, =, (, ConcreteSlot, ), scope, ., getSlot, (, lhs, ., getString, (, ), ), ;, Preconditions, ., checkState, (]
[(, ConcreteSlot, ), scope, ., getSlot, (, lhs, ., getString, (, ), ), ;, Preconditions, ., checkState, (, var, !=]
[), scope, ., getSlot, (, lhs, ., getString, (, ), ), ;, Preconditions, ., checkState, (, var, !=, null, ,]
[., getSlot, (, lhs, ., getString, (, ), ), ;, Preconditions, ., checkState, (, var, !=, null, ,, "Type tightener could not find variable with name %s", ,]
[., getSlot, (, lhs, ., getString, (, ), ), ;, Preconditions, ., checkState, (, var, !=, null, ,, "Type tightener could not find variable with name %s", ,]
[), ;, Preconditions, ., checkState, (, var, !=, null, ,, "Type tightener could not find variable with name %s", ,, lhs, ., getString, (, ), ), ;, return]
[), ;, Preconditions, ., checkState, (, var, !=, null, ,, "Type tightener could not find variable with name %s", ,, lhs, ., getString, (, ), ), ;, return]
[!=, null, ,, "Type tightener could not find variable with name %s", ,, lhs, ., getString, (, ), ), ;, return, Lists, ., <, Action, >, newArrayList, (]
["Type tightener could not find variable with name %s", ,, lhs, ., getString, (, ), ), ;, return, Lists, ., <, Action, >, newArrayList, (, new, VariableAssignAction, (]
[lhs, ., getString, (, ), ), ;, return, Lists, ., <, Action, >, newArrayList, (, new, VariableAssignAction, (, var, ,]
[), ;, return, Lists, ., <, Action, >, newArrayList, (, new, VariableAssignAction, (, var, ,, rhs, ), ), ;, case]
[), ;, return, Lists, ., <, Action, >, newArrayList, (, new, VariableAssignAction, (, var, ,, rhs, ), ), ;, case]
[>, newArrayList, (, new, VariableAssignAction, (, var, ,, rhs, ), ), ;, case, Token, ., GETPROP, :, Node, receiver, =]
[>, newArrayList, (, new, VariableAssignAction, (, var, ,, rhs, ), ), ;, case, Token, ., GETPROP, :, Node, receiver, =]
[,, rhs, ), ), ;, case, Token, ., GETPROP, :, Node, receiver, =, lhs, ., getFirstChild, (, ), ;, return]
[,, rhs, ), ), ;, case, Token, ., GETPROP, :, Node, receiver, =, lhs, ., getFirstChild, (, ), ;, return]
[., GETPROP, :, Node, receiver, =, lhs, ., getFirstChild, (, ), ;, return, Lists, ., <, Action, >, newArrayList, (]
[Node, receiver, =, lhs, ., getFirstChild, (, ), ;, return, Lists, ., <, Action, >, newArrayList, (, new, PropertyAssignAction, (]
[=, lhs, ., getFirstChild, (, ), ;, return, Lists, ., <, Action, >, newArrayList, (, new, PropertyAssignAction, (, receiver, ,]
[), ;, return, Lists, ., <, Action, >, newArrayList, (, new, PropertyAssignAction, (, receiver, ,, rhs, ), ), ;, case]
[), ;, return, Lists, ., <, Action, >, newArrayList, (, new, PropertyAssignAction, (, receiver, ,, rhs, ), ), ;, case]
[<, Action, >, newArrayList, (, new, PropertyAssignAction, (, receiver, ,, rhs, ), ), ;, case, Token, ., GETELEM, :, return]
[<, Action, >, newArrayList, (, new, PropertyAssignAction, (, receiver, ,, rhs, ), ), ;, case, Token, ., GETELEM, :, return]
[,, rhs, ), ), ;, case, Token, ., GETELEM, :, return, Lists, ., newArrayList, (, ), ;, default, :, throw]
[), ;, case, Token, ., GETELEM, :, return, Lists, ., newArrayList, (, ), ;, default, :, throw, new, AssertionError, (]
[), ;, case, Token, ., GETELEM, :, return, Lists, ., newArrayList, (, ), ;, default, :, throw, new, AssertionError, (]
[case, Token, ., GETELEM, :, return, Lists, ., newArrayList, (, ), ;, default, :, throw, new, AssertionError, (, "Bad LHS for assignment: ", +]
[case, Token, ., GETELEM, :, return, Lists, ., newArrayList, (, ), ;, default, :, throw, new, AssertionError, (, "Bad LHS for assignment: ", +]
[private, ExternFunctionCall, createExternFunctionCall, (, Node, receiver, ,, JSType, jsThisType, ,, FunctionType, fun, ), {, List, <, ConcreteType, >, argTypes, =]
[private, ExternFunctionCall, createExternFunctionCall, (, Node, receiver, ,, JSType, jsThisType, ,, FunctionType, fun, ), {, List, <, ConcreteType, >, argTypes, =]
[fun, ), {, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, ConcreteType, thisType, ;, if, (]
[fun, ), {, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, ConcreteType, thisType, ;, if, (]
[{, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, ConcreteType, thisType, ;, if, (, fun, !=]
[ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, ConcreteType, thisType, ;, if, (, fun, !=, null, ), {]
[argTypes, =, Lists, ., newArrayList, (, ), ;, ConcreteType, thisType, ;, if, (, fun, !=, null, ), {, thisType, =]
[Lists, ., newArrayList, (, ), ;, ConcreteType, thisType, ;, if, (, fun, !=, null, ), {, thisType, =, createType, (]
[;, if, (, fun, !=, null, ), {, thisType, =, createType, (, jsThisType, ), ;, for, (, Node, arg, :]
[;, if, (, fun, !=, null, ), {, thisType, =, createType, (, jsThisType, ), ;, for, (, Node, arg, :]
[{, thisType, =, createType, (, jsThisType, ), ;, for, (, Node, arg, :, fun, ., getParameters, (, ), ), {]
[{, thisType, =, createType, (, jsThisType, ), ;, for, (, Node, arg, :, fun, ., getParameters, (, ), ), {]
[(, jsThisType, ), ;, for, (, Node, arg, :, fun, ., getParameters, (, ), ), {, argTypes, ., add, (]
[), ;, for, (, Node, arg, :, fun, ., getParameters, (, ), ), {, argTypes, ., add, (, createType, (]
[for, (, Node, arg, :, fun, ., getParameters, (, ), ), {, argTypes, ., add, (, createType, (, arg, ,]
[(, ), ), {, argTypes, ., add, (, createType, (, arg, ,, scope, ), ), ;, }, }, else, {]
[), {, argTypes, ., add, (, createType, (, arg, ,, scope, ), ), ;, }, }, else, {, thisType, =]
[), {, argTypes, ., add, (, createType, (, arg, ,, scope, ), ), ;, }, }, else, {, thisType, =]
[createType, (, arg, ,, scope, ), ), ;, }, }, else, {, thisType, =, ConcreteType, ., NONE, ;, }, return]
[,, scope, ), ), ;, }, }, else, {, thisType, =, ConcreteType, ., NONE, ;, }, return, new, ExternFunctionCall, (]
[), ), ;, }, }, else, {, thisType, =, ConcreteType, ., NONE, ;, }, return, new, ExternFunctionCall, (, receiver, ,]
[;, }, }, else, {, thisType, =, ConcreteType, ., NONE, ;, }, return, new, ExternFunctionCall, (, receiver, ,, thisType, ,]
[ExternFunctionCall, (, receiver, ,, thisType, ,, argTypes, ), ;, }, private, JSType, getJSType, (, Node, n, ), {, if, (]
[ExternFunctionCall, (, receiver, ,, thisType, ,, argTypes, ), ;, }, private, JSType, getJSType, (, Node, n, ), {, if, (]
[ExternFunctionCall, (, receiver, ,, thisType, ,, argTypes, ), ;, }, private, JSType, getJSType, (, Node, n, ), {, if, (]
[argTypes, ), ;, }, private, JSType, getJSType, (, Node, n, ), {, if, (, n, ., getJSType, (, ), !=]
[private, JSType, getJSType, (, Node, n, ), {, if, (, n, ., getJSType, (, ), !=, null, ), {, return]
[private, JSType, getJSType, (, Node, n, ), {, if, (, n, ., getJSType, (, ), !=, null, ), {, return]
[n, ., getJSType, (, ), !=, null, ), {, return, n, ., getJSType, (, ), ;, }, else, {, return]
[n, ., getJSType, (, ), !=, null, ), {, return, n, ., getJSType, (, ), ;, }, else, {, return]
[null, ), {, return, n, ., getJSType, (, ), ;, }, else, {, return, getTypeRegistry, (, ), ., getNativeType, (]
[getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, Collection, <, Action, >, getImplicitActions, (, Node, n, ), {, switch, (]
[getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, Collection, <, Action, >, getImplicitActions, (, Node, n, ), {, switch, (]
[Collection, <, Action, >, getImplicitActions, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[Collection, <, Action, >, getImplicitActions, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., CALL, :, Node, receiver, =]
[n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., CALL, :, Node, receiver, =]
[(, ), ), {, case, Token, ., CALL, :, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (]
[(, ), ), {, case, Token, ., CALL, :, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (]
[), ), {, case, Token, ., CALL, :, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (, !]
[{, case, Token, ., CALL, :, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (, !, inExterns, &&]
[{, case, Token, ., CALL, :, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (, !, inExterns, &&]
[=, n, ., getFirstChild, (, ), ;, if, (, !, inExterns, &&, receiver, ., isGetProp, (, ), ), {, return]
[., getFirstChild, (, ), ;, if, (, !, inExterns, &&, receiver, ., isGetProp, (, ), ), {, return, getImplicitActionsFromCall, (]
[(, ), ;, if, (, !, inExterns, &&, receiver, ., isGetProp, (, ), ), {, return, getImplicitActionsFromCall, (, n, ,]
[(, ), ;, if, (, !, inExterns, &&, receiver, ., isGetProp, (, ), ), {, return, getImplicitActionsFromCall, (, n, ,]
[(, ), ), {, return, getImplicitActionsFromCall, (, n, ,, receiver, ., getJSType, (, ), ), ;, }, break, ;, case]
[(, ), ), {, return, getImplicitActionsFromCall, (, n, ,, receiver, ., getJSType, (, ), ), ;, }, break, ;, case]
[n, ,, receiver, ., getJSType, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =]
[n, ,, receiver, ., getJSType, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[}, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !]
[;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !, inExterns, &&]
[;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !, inExterns, &&]
[=, n, ., getFirstChild, (, ), ;, if, (, !, inExterns, &&, lhs, ., isGetProp, (, ), ), {, return]
[., getFirstChild, (, ), ;, if, (, !, inExterns, &&, lhs, ., isGetProp, (, ), ), {, return, getImplicitActionsFromProp, (]
[., getFirstChild, (, ), ;, if, (, !, inExterns, &&, lhs, ., isGetProp, (, ), ), {, return, getImplicitActionsFromProp, (]
[., getFirstChild, (, ), ;, if, (, !, inExterns, &&, lhs, ., isGetProp, (, ), ), {, return, getImplicitActionsFromProp, (]
[lhs, ., isGetProp, (, ), ), {, return, getImplicitActionsFromProp, (, lhs, ., getFirstChild, (, ), ., getJSType, (, ), ,]
[lhs, ., isGetProp, (, ), ), {, return, getImplicitActionsFromProp, (, lhs, ., getFirstChild, (, ), ., getJSType, (, ), ,]
[lhs, ., isGetProp, (, ), ), {, return, getImplicitActionsFromProp, (, lhs, ., getFirstChild, (, ), ., getJSType, (, ), ,]
[lhs, ., getFirstChild, (, ), ., getJSType, (, ), ,, lhs, ., getLastChild, (, ), ., getString, (, ), ,]
[lhs, ., getFirstChild, (, ), ., getJSType, (, ), ,, lhs, ., getLastChild, (, ), ., getString, (, ), ,]
[getLastChild, (, ), ., getString, (, ), ,, n, ., getLastChild, (, ), ), ;, }, break, ;, }, return]
[null, ;, }, private, Collection, <, Action, >, getImplicitActionsFromCall, (, Node, n, ,, JSType, recvType, ), {, Node, receiver, =]
[null, ;, }, private, Collection, <, Action, >, getImplicitActionsFromCall, (, Node, n, ,, JSType, recvType, ), {, Node, receiver, =]
[getImplicitActionsFromCall, (, Node, n, ,, JSType, recvType, ), {, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (]
[getImplicitActionsFromCall, (, Node, n, ,, JSType, recvType, ), {, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (]
[., getFirstChild, (, ), ;, if, (, recvType, ., isUnionType, (, ), ), {, List, <, Action, >, actions, =]
[., getFirstChild, (, ), ;, if, (, recvType, ., isUnionType, (, ), ), {, List, <, Action, >, actions, =]
[), ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, for, (, JSType, alt, :]
[), ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, for, (, JSType, alt, :]
[), ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, for, (, JSType, alt, :]
[newArrayList, (, ), ;, for, (, JSType, alt, :, recvType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[newArrayList, (, ), ;, for, (, JSType, alt, :, recvType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[for, (, JSType, alt, :, recvType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, actions, ., addAll, (]
[JSType, alt, :, recvType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromCall, (]
[:, recvType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromCall, (, n, ,]
[., getAlternates, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromCall, (, n, ,, alt, ), ), ;, }, return]
[actions, ., addAll, (, getImplicitActionsFromCall, (, n, ,, alt, ), ), ;, }, return, actions, ;, }, else, if, (]
[., addAll, (, getImplicitActionsFromCall, (, n, ,, alt, ), ), ;, }, return, actions, ;, }, else, if, (, !]
[addAll, (, getImplicitActionsFromCall, (, n, ,, alt, ), ), ;, }, return, actions, ;, }, else, if, (, !, (]
[addAll, (, getImplicitActionsFromCall, (, n, ,, alt, ), ), ;, }, return, actions, ;, }, else, if, (, !, (]
[;, }, return, actions, ;, }, else, if, (, !, (, recvType, ., isFunctionType, (, ), ), ), {, return]
[;, }, return, actions, ;, }, else, if, (, !, (, recvType, ., isFunctionType, (, ), ), ), {, return]
[isFunctionType, (, ), ), ), {, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, ObjectType, objType, =]
[isFunctionType, (, ), ), ), {, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, ObjectType, objType, =]
[), {, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, ObjectType, objType, =, ObjectType, ., cast, (]
[), {, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, ObjectType, objType, =, ObjectType, ., cast, (]
[return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, ObjectType, objType, =, ObjectType, ., cast, (, getJSType, (]
[return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, ObjectType, objType, =, ObjectType, ., cast, (, getJSType, (]
[., cast, (, getJSType, (, receiver, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, String, prop, =]
[., cast, (, getJSType, (, receiver, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, String, prop, =]
[., cast, (, getJSType, (, receiver, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, String, prop, =]
[restrictByNotNullOrUndefined, (, ), ), ;, String, prop, =, receiver, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[restrictByNotNullOrUndefined, (, ), ), ;, String, prop, =, receiver, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[restrictByNotNullOrUndefined, (, ), ), ;, String, prop, =, receiver, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[restrictByNotNullOrUndefined, (, ), ), ;, String, prop, =, receiver, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[), ), ;, String, prop, =, receiver, ., getLastChild, (, ), ., getString, (, ), ;, if, (, objType, !=]
[;, String, prop, =, receiver, ., getLastChild, (, ), ., getString, (, ), ;, if, (, objType, !=, null, &&]
[String, prop, =, receiver, ., getLastChild, (, ), ., getString, (, ), ;, if, (, objType, !=, null, &&, (]
[String, prop, =, receiver, ., getLastChild, (, ), ., getString, (, ), ;, if, (, objType, !=, null, &&, (]
[., getLastChild, (, ), ., getString, (, ), ;, if, (, objType, !=, null, &&, (, objType, ., isPropertyInExterns, (]
[., getString, (, ), ;, if, (, objType, !=, null, &&, (, objType, ., isPropertyInExterns, (, prop, ), ), &&]
[., getString, (, ), ;, if, (, objType, !=, null, &&, (, objType, ., isPropertyInExterns, (, prop, ), ), &&]
[., getString, (, ), ;, if, (, objType, !=, null, &&, (, objType, ., isPropertyInExterns, (, prop, ), ), &&]
[getString, (, ), ;, if, (, objType, !=, null, &&, (, objType, ., isPropertyInExterns, (, prop, ), ), &&, (]
[getString, (, ), ;, if, (, objType, !=, null, &&, (, objType, ., isPropertyInExterns, (, prop, ), ), &&, (]
[objType, ., isPropertyInExterns, (, prop, ), ), &&, (, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, ), !=]
[recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, ), !=, null, ), {, List, <, Action, >, actions, =]
[recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, ), !=, null, ), {, List, <, Action, >, actions, =]
[), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, Iterator, <, Node, >, paramIter, =]
[), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, Iterator, <, Node, >, paramIter, =]
[), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, Iterator, <, Node, >, paramIter, =]
[{, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, Iterator, <, Node, >, paramIter, =, (]
[{, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, Iterator, <, Node, >, paramIter, =, (]
[., toMaybeFunctionType, (, ), ), ., getParameters, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, argumentIter, =]
[., toMaybeFunctionType, (, ), ), ., getParameters, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, argumentIter, =]
[., toMaybeFunctionType, (, ), ), ., getParameters, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, argumentIter, =]
[iterator, (, ), ;, Iterator, <, Node, >, argumentIter, =, n, ., children, (, ), ., iterator, (, ), ;]
[iterator, (, ), ;, Iterator, <, Node, >, argumentIter, =, n, ., children, (, ), ., iterator, (, ), ;]
[argumentIter, =, n, ., children, (, ), ., iterator, (, ), ;, argumentIter, ., next, (, ), ;, while, (]
[argumentIter, =, n, ., children, (, ), ., iterator, (, ), ;, argumentIter, ., next, (, ), ;, while, (]
[argumentIter, =, n, ., children, (, ), ., iterator, (, ), ;, argumentIter, ., next, (, ), ;, while, (]
[), ., iterator, (, ), ;, argumentIter, ., next, (, ), ;, while, (, paramIter, ., hasNext, (, ), &&]
[), ., iterator, (, ), ;, argumentIter, ., next, (, ), ;, while, (, paramIter, ., hasNext, (, ), &&]
[), ;, while, (, paramIter, ., hasNext, (, ), &&, argumentIter, ., hasNext, (, ), ), {, Node, arg, =]
[), ;, while, (, paramIter, ., hasNext, (, ), &&, argumentIter, ., hasNext, (, ), ), {, Node, arg, =]
[&&, argumentIter, ., hasNext, (, ), ), {, Node, arg, =, argumentIter, ., next, (, ), ;, Node, param, =]
[&&, argumentIter, ., hasNext, (, ), ), {, Node, arg, =, argumentIter, ., next, (, ), ;, Node, param, =]
[Node, arg, =, argumentIter, ., next, (, ), ;, Node, param, =, paramIter, ., next, (, ), ;, if, (]
[Node, arg, =, argumentIter, ., next, (, ), ;, Node, param, =, paramIter, ., next, (, ), ;, if, (]
[Node, arg, =, argumentIter, ., next, (, ), ;, Node, param, =, paramIter, ., next, (, ), ;, if, (]
[Node, arg, =, argumentIter, ., next, (, ), ;, Node, param, =, paramIter, ., next, (, ), ;, if, (]
[(, ), ;, Node, param, =, paramIter, ., next, (, ), ;, if, (, arg, ., getJSType, (, ), !=]
[;, Node, param, =, paramIter, ., next, (, ), ;, if, (, arg, ., getJSType, (, ), !=, null, &&]
[;, Node, param, =, paramIter, ., next, (, ), ;, if, (, arg, ., getJSType, (, ), !=, null, &&]
[;, Node, param, =, paramIter, ., next, (, ), ;, if, (, arg, ., getJSType, (, ), !=, null, &&]
[(, arg, ., getJSType, (, ), !=, null, &&, arg, ., getJSType, (, ), ., isFunctionType, (, ), ), {]
[(, arg, ., getJSType, (, ), !=, null, &&, arg, ., getJSType, (, ), ., isFunctionType, (, ), ), {]
[(, ), !=, null, &&, arg, ., getJSType, (, ), ., isFunctionType, (, ), ), {, actions, ., addAll, (]
[!=, null, &&, arg, ., getJSType, (, ), ., isFunctionType, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (]
[&&, arg, ., getJSType, (, ), ., isFunctionType, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,]
[&&, arg, ., getJSType, (, ), ., isFunctionType, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,]
[&&, arg, ., getJSType, (, ), ., isFunctionType, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,]
[&&, arg, ., getJSType, (, ), ., isFunctionType, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,]
[&&, arg, ., getJSType, (, ), ., isFunctionType, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,]
[arg, ,, arg, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ., toObjectType, (, ), ,]
[arg, ,, arg, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ., toObjectType, (, ), ,]
[., getTypeOfThis, (, ), ., toObjectType, (, ), ,, param, ., getJSType, (, ), ), ), ;, }, }, return]
[., toObjectType, (, ), ,, param, ., getJSType, (, ), ), ), ;, }, }, return, actions, ;, }, return]
[., toObjectType, (, ), ,, param, ., getJSType, (, ), ), ), ;, }, }, return, actions, ;, }, return]
[}, private, Collection, <, Action, >, getImplicitActionsFromArgument, (, Node, arg, ,, ObjectType, thisType, ,, JSType, paramType, ), {, if, (]
[}, private, Collection, <, Action, >, getImplicitActionsFromArgument, (, Node, arg, ,, ObjectType, thisType, ,, JSType, paramType, ), {, if, (]
[,, JSType, paramType, ), {, if, (, paramType, ., isUnionType, (, ), ), {, List, <, Action, >, actions, =]
[,, JSType, paramType, ), {, if, (, paramType, ., isUnionType, (, ), ), {, List, <, Action, >, actions, =]
[), ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, for, (, JSType, paramAlt, :]
[), ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, for, (, JSType, paramAlt, :]
[), ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, for, (, JSType, paramAlt, :]
[newArrayList, (, ), ;, for, (, JSType, paramAlt, :, paramType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[newArrayList, (, ), ;, for, (, JSType, paramAlt, :, paramType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[for, (, JSType, paramAlt, :, paramType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, actions, ., addAll, (]
[JSType, paramAlt, :, paramType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (]
[:, paramType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,, thisType, ,]
[(, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,, thisType, ,, paramAlt, ), ), ;, }, return]
[addAll, (, getImplicitActionsFromArgument, (, arg, ,, thisType, ,, paramAlt, ), ), ;, }, return, actions, ;, }, else, if, (]
[addAll, (, getImplicitActionsFromArgument, (, arg, ,, thisType, ,, paramAlt, ), ), ;, }, return, actions, ;, }, else, if, (]
[paramAlt, ), ), ;, }, return, actions, ;, }, else, if, (, paramType, ., isFunctionType, (, ), ), {, return]
[paramAlt, ), ), ;, }, return, actions, ;, }, else, if, (, paramType, ., isFunctionType, (, ), ), {, return]
[;, }, else, if, (, paramType, ., isFunctionType, (, ), ), {, return, Lists, ., <, Action, >, newArrayList, (]
[else, if, (, paramType, ., isFunctionType, (, ), ), {, return, Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (]
[(, paramType, ., isFunctionType, (, ), ), {, return, Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,]
[., isFunctionType, (, ), ), {, return, Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,]
[., isFunctionType, (, ), ), {, return, Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,]
[newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,, paramType, ., toMaybeFunctionType, (, ), ), ), ;, }, else, {, return]
[newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,, paramType, ., toMaybeFunctionType, (, ), ), ), ;, }, else, {, return]
[,, paramType, ., toMaybeFunctionType, (, ), ), ), ;, }, else, {, return, Lists, ., <, Action, >, newArrayList, (]
[., toMaybeFunctionType, (, ), ), ), ;, }, else, {, return, Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (]
[(, ), ), ), ;, }, else, {, return, Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,]
[), ), ;, }, else, {, return, Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,]
[Action, >, getImplicitActionsFromProp, (, JSType, jsType, ,, String, prop, ,, Node, fnNode, ), {, List, <, Action, >, actions, =]
[Action, >, getImplicitActionsFromProp, (, JSType, jsType, ,, String, prop, ,, Node, fnNode, ), {, List, <, Action, >, actions, =]
[prop, ,, Node, fnNode, ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, if, (]
[prop, ,, Node, fnNode, ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, if, (]
[actions, =, Lists, ., newArrayList, (, ), ;, if, (, jsType, ., isUnionType, (, ), ), {, boolean, found, =]
[;, if, (, jsType, ., isUnionType, (, ), ), {, boolean, found, =, false, ;, for, (, JSType, alt, :]
[;, if, (, jsType, ., isUnionType, (, ), ), {, boolean, found, =, false, ;, for, (, JSType, alt, :]
[;, if, (, jsType, ., isUnionType, (, ), ), {, boolean, found, =, false, ;, for, (, JSType, alt, :]
[;, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, ObjectType, altObj, =]
[;, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, ObjectType, altObj, =]
[alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, ObjectType, altObj, =, ObjectType, ., cast, (]
[(, ), ., getAlternates, (, ), ), {, ObjectType, altObj, =, ObjectType, ., cast, (, alt, ), ;, if, (]
[(, ), ., getAlternates, (, ), ), {, ObjectType, altObj, =, ObjectType, ., cast, (, alt, ), ;, if, (]
[., getAlternates, (, ), ), {, ObjectType, altObj, =, ObjectType, ., cast, (, alt, ), ;, if, (, altObj, !=]
[), ), {, ObjectType, altObj, =, ObjectType, ., cast, (, alt, ), ;, if, (, altObj, !=, null, ), {]
[), ), {, ObjectType, altObj, =, ObjectType, ., cast, (, alt, ), ;, if, (, altObj, !=, null, ), {]
[altObj, =, ObjectType, ., cast, (, alt, ), ;, if, (, altObj, !=, null, ), {, actions, ., addAll, (]
[ObjectType, ., cast, (, alt, ), ;, if, (, altObj, !=, null, ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (]
[cast, (, alt, ), ;, if, (, altObj, !=, null, ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, altObj, ,]
[alt, ), ;, if, (, altObj, !=, null, ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, altObj, ,, prop, ,]
[!=, null, ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, altObj, ,, prop, ,, fnNode, ), ), ;, if, (]
[!=, null, ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, altObj, ,, prop, ,, fnNode, ), ), ;, if, (]
[actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, altObj, ,, prop, ,, fnNode, ), ), ;, if, (, altObj, ., hasProperty, (]
[getImplicitActionsFromPropNonUnion, (, altObj, ,, prop, ,, fnNode, ), ), ;, if, (, altObj, ., hasProperty, (, prop, ), ), {]
[altObj, ,, prop, ,, fnNode, ), ), ;, if, (, altObj, ., hasProperty, (, prop, ), ), {, found, =]
[;, if, (, altObj, ., hasProperty, (, prop, ), ), {, found, =, true, ;, }, }, }, if, (]
[., hasProperty, (, prop, ), ), {, found, =, true, ;, }, }, }, if, (, found, ), {, return]
[true, ;, }, }, }, if, (, found, ), {, return, actions, ;, }, }, else, {, ObjectType, objType, =]
[true, ;, }, }, }, if, (, found, ), {, return, actions, ;, }, }, else, {, ObjectType, objType, =]
[}, if, (, found, ), {, return, actions, ;, }, }, else, {, ObjectType, objType, =, ObjectType, ., cast, (]
[{, return, actions, ;, }, }, else, {, ObjectType, objType, =, ObjectType, ., cast, (, jsType, ), ;, if, (]
[{, return, actions, ;, }, }, else, {, ObjectType, objType, =, ObjectType, ., cast, (, jsType, ), ;, if, (]
[{, return, actions, ;, }, }, else, {, ObjectType, objType, =, ObjectType, ., cast, (, jsType, ), ;, if, (]
[{, return, actions, ;, }, }, else, {, ObjectType, objType, =, ObjectType, ., cast, (, jsType, ), ;, if, (]
[actions, ;, }, }, else, {, ObjectType, objType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, objType, !=]
[}, }, else, {, ObjectType, objType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, objType, !=, null, &&]
[}, else, {, ObjectType, objType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, objType, !=, null, &&, !]
[}, else, {, ObjectType, objType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, objType, !=, null, &&, !]
[ObjectType, ., cast, (, jsType, ), ;, if, (, objType, !=, null, &&, !, objType, ., isUnknownType, (, ), &&]
[ObjectType, ., cast, (, jsType, ), ;, if, (, objType, !=, null, &&, !, objType, ., isUnknownType, (, ), &&]
[jsType, ), ;, if, (, objType, !=, null, &&, !, objType, ., isUnknownType, (, ), &&, objType, ., hasProperty, (]
[objType, !=, null, &&, !, objType, ., isUnknownType, (, ), &&, objType, ., hasProperty, (, prop, ), ), {, return]
[null, &&, !, objType, ., isUnknownType, (, ), &&, objType, ., hasProperty, (, prop, ), ), {, return, getImplicitActionsFromPropNonUnion, (]
[!, objType, ., isUnknownType, (, ), &&, objType, ., hasProperty, (, prop, ), ), {, return, getImplicitActionsFromPropNonUnion, (, objType, ,]
[., isUnknownType, (, ), &&, objType, ., hasProperty, (, prop, ), ), {, return, getImplicitActionsFromPropNonUnion, (, objType, ,, prop, ,]
[), ), {, return, getImplicitActionsFromPropNonUnion, (, objType, ,, prop, ,, fnNode, ), ;, }, }, for, (, ObjectType, type, :]
[), ), {, return, getImplicitActionsFromPropNonUnion, (, objType, ,, prop, ,, fnNode, ), ;, }, }, for, (, ObjectType, type, :]
[objType, ,, prop, ,, fnNode, ), ;, }, }, for, (, ObjectType, type, :, getTypeRegistry, (, ), ., getEachReferenceTypeWithProperty, (]
[fnNode, ), ;, }, }, for, (, ObjectType, type, :, getTypeRegistry, (, ), ., getEachReferenceTypeWithProperty, (, prop, ), ), {]
[fnNode, ), ;, }, }, for, (, ObjectType, type, :, getTypeRegistry, (, ), ., getEachReferenceTypeWithProperty, (, prop, ), ), {]
[}, for, (, ObjectType, type, :, getTypeRegistry, (, ), ., getEachReferenceTypeWithProperty, (, prop, ), ), {, actions, ., addAll, (]
[(, ObjectType, type, :, getTypeRegistry, (, ), ., getEachReferenceTypeWithProperty, (, prop, ), ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (]
[type, :, getTypeRegistry, (, ), ., getEachReferenceTypeWithProperty, (, prop, ), ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, type, ,]
[getTypeRegistry, (, ), ., getEachReferenceTypeWithProperty, (, prop, ), ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, type, ,, prop, ,]
[prop, ), ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, type, ,, prop, ,, fnNode, ), ), ;, }, return]
[private, Collection, <, Action, >, getImplicitActionsFromPropNonUnion, (, ObjectType, jsType, ,, String, prop, ,, Node, fnNode, ), {, JSType, propType, =]
[private, Collection, <, Action, >, getImplicitActionsFromPropNonUnion, (, ObjectType, jsType, ,, String, prop, ,, Node, fnNode, ), {, JSType, propType, =]
[private, Collection, <, Action, >, getImplicitActionsFromPropNonUnion, (, ObjectType, jsType, ,, String, prop, ,, Node, fnNode, ), {, JSType, propType, =]
[>, getImplicitActionsFromPropNonUnion, (, ObjectType, jsType, ,, String, prop, ,, Node, fnNode, ), {, JSType, propType, =, jsType, ., getPropertyType, (]
[Node, fnNode, ), {, JSType, propType, =, jsType, ., getPropertyType, (, prop, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[Node, fnNode, ), {, JSType, propType, =, jsType, ., getPropertyType, (, prop, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[Node, fnNode, ), {, JSType, propType, =, jsType, ., getPropertyType, (, prop, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[JSType, propType, =, jsType, ., getPropertyType, (, prop, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, jsType, ., isPropertyInExterns, (]
[jsType, ., getPropertyType, (, prop, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, jsType, ., isPropertyInExterns, (, prop, ), &&]
[jsType, ., getPropertyType, (, prop, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, jsType, ., isPropertyInExterns, (, prop, ), &&]
[;, if, (, jsType, ., isPropertyInExterns, (, prop, ), &&, propType, ., isFunctionType, (, ), ), {, ObjectType, thisType, =]
[., isPropertyInExterns, (, prop, ), &&, propType, ., isFunctionType, (, ), ), {, ObjectType, thisType, =, jsType, ;, if, (]
[., isPropertyInExterns, (, prop, ), &&, propType, ., isFunctionType, (, ), ), {, ObjectType, thisType, =, jsType, ;, if, (]
[., isFunctionType, (, ), ), {, ObjectType, thisType, =, jsType, ;, if, (, jsType, ., isFunctionPrototypeType, (, ), ), {]
[(, ), ), {, ObjectType, thisType, =, jsType, ;, if, (, jsType, ., isFunctionPrototypeType, (, ), ), {, thisType, =]
[(, ), ), {, ObjectType, thisType, =, jsType, ;, if, (, jsType, ., isFunctionPrototypeType, (, ), ), {, thisType, =]
[(, ), ), {, ObjectType, thisType, =, jsType, ;, if, (, jsType, ., isFunctionPrototypeType, (, ), ), {, thisType, =]
[(, ), ), {, thisType, =, thisType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, }, FunctionType, callType, =]
[(, ), ), {, thisType, =, thisType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, }, FunctionType, callType, =]
[(, ), ., getInstanceType, (, ), ;, }, FunctionType, callType, =, propType, ., toMaybeFunctionType, (, ), ;, Action, action, =]
[., getInstanceType, (, ), ;, }, FunctionType, callType, =, propType, ., toMaybeFunctionType, (, ), ;, Action, action, =, createExternFunctionCall, (]
[(, ), ;, }, FunctionType, callType, =, propType, ., toMaybeFunctionType, (, ), ;, Action, action, =, createExternFunctionCall, (, fnNode, ,]
[;, }, FunctionType, callType, =, propType, ., toMaybeFunctionType, (, ), ;, Action, action, =, createExternFunctionCall, (, fnNode, ,, thisType, ,]
[=, propType, ., toMaybeFunctionType, (, ), ;, Action, action, =, createExternFunctionCall, (, fnNode, ,, thisType, ,, callType, ), ;, return]
[=, propType, ., toMaybeFunctionType, (, ), ;, Action, action, =, createExternFunctionCall, (, fnNode, ,, thisType, ,, callType, ), ;, return]
[Action, action, =, createExternFunctionCall, (, fnNode, ,, thisType, ,, callType, ), ;, return, Lists, ., <, Action, >, newArrayList, (]
[fnNode, ,, thisType, ,, callType, ), ;, return, Lists, ., <, Action, >, newArrayList, (, action, ), ;, }, return]
[fnNode, ,, thisType, ,, callType, ), ;, return, Lists, ., <, Action, >, newArrayList, (, action, ), ;, }, return]
[<, Action, >, newArrayList, (, ), ;, }, }, private, ConcreteType, createType, (, Node, name, ,, ConcreteScope, scope, ), {]
[<, Action, >, newArrayList, (, ), ;, }, }, private, ConcreteType, createType, (, Node, name, ,, ConcreteScope, scope, ), {]
[(, ), ;, }, }, private, ConcreteType, createType, (, Node, name, ,, ConcreteScope, scope, ), {, Preconditions, ., checkNotNull, (]
[}, }, private, ConcreteType, createType, (, Node, name, ,, ConcreteScope, scope, ), {, Preconditions, ., checkNotNull, (, name, ), ;]
[}, }, private, ConcreteType, createType, (, Node, name, ,, ConcreteScope, scope, ), {, Preconditions, ., checkNotNull, (, name, ), ;]
[createType, (, Node, name, ,, ConcreteScope, scope, ), {, Preconditions, ., checkNotNull, (, name, ), ;, Preconditions, ., checkArgument, (]
[createType, (, Node, name, ,, ConcreteScope, scope, ), {, Preconditions, ., checkNotNull, (, name, ), ;, Preconditions, ., checkArgument, (]
[Preconditions, ., checkNotNull, (, name, ), ;, Preconditions, ., checkArgument, (, name, ., isName, (, ), ), ;, if, (]
[Preconditions, ., checkNotNull, (, name, ), ;, Preconditions, ., checkArgument, (, name, ., isName, (, ), ), ;, if, (]
[Preconditions, ., checkNotNull, (, name, ), ;, Preconditions, ., checkArgument, (, name, ., isName, (, ), ), ;, if, (]
[;, Preconditions, ., checkArgument, (, name, ., isName, (, ), ), ;, if, (, name, ., getJSType, (, ), ==]
[(, name, ., isName, (, ), ), ;, if, (, name, ., getJSType, (, ), ==, null, ), {, return]
[(, name, ., isName, (, ), ), ;, if, (, name, ., getJSType, (, ), ==, null, ), {, return]
[;, if, (, name, ., getJSType, (, ), ==, null, ), {, return, ConcreteType, ., ALL, ;, }, if, (]
[;, if, (, name, ., getJSType, (, ), ==, null, ), {, return, ConcreteType, ., ALL, ;, }, if, (]
[if, (, name, ., getJSType, (, ), ==, null, ), {, return, ConcreteType, ., ALL, ;, }, if, (, (]
[if, (, name, ., getJSType, (, ), ==, null, ), {, return, ConcreteType, ., ALL, ;, }, if, (, (]
[if, (, name, ., getJSType, (, ), ==, null, ), {, return, ConcreteType, ., ALL, ;, }, if, (, (]
[), ==, null, ), {, return, ConcreteType, ., ALL, ;, }, if, (, (, name, ., getFirstChild, (, ), !=]
[), {, return, ConcreteType, ., ALL, ;, }, if, (, (, name, ., getFirstChild, (, ), !=, null, ), &&]
[{, return, ConcreteType, ., ALL, ;, }, if, (, (, name, ., getFirstChild, (, ), !=, null, ), &&, (]
[{, return, ConcreteType, ., ALL, ;, }, if, (, (, name, ., getFirstChild, (, ), !=, null, ), &&, (]
[{, return, ConcreteType, ., ALL, ;, }, if, (, (, name, ., getFirstChild, (, ), !=, null, ), &&, (]
[(, ), !=, null, ), &&, (, name, ., getFirstChild, (, ), ., isFunction, (, ), ), ), {, return]
[!=, null, ), &&, (, name, ., getFirstChild, (, ), ., isFunction, (, ), ), ), {, return, createConcreteFunction, (]
[!=, null, ), &&, (, name, ., getFirstChild, (, ), ., isFunction, (, ), ), ), {, return, createConcreteFunction, (]
[., getFirstChild, (, ), ., isFunction, (, ), ), ), {, return, createConcreteFunction, (, name, ., getFirstChild, (, ), ,]
[isFunction, (, ), ), ), {, return, createConcreteFunction, (, name, ., getFirstChild, (, ), ,, scope, ), ;, }, return]
[), ), ), {, return, createConcreteFunction, (, name, ., getFirstChild, (, ), ,, scope, ), ;, }, return, createType, (]
[), ), ), {, return, createConcreteFunction, (, name, ., getFirstChild, (, ), ,, scope, ), ;, }, return, createType, (]
[createType, (, name, ., getJSType, (, ), ), ;, }, private, ConcreteType, createType, (, JSType, jsType, ), {, if, (]
[createType, (, name, ., getJSType, (, ), ), ;, }, private, ConcreteType, createType, (, JSType, jsType, ), {, if, (]
[createType, (, name, ., getJSType, (, ), ), ;, }, private, ConcreteType, createType, (, JSType, jsType, ), {, if, (]
[), ), ;, }, private, ConcreteType, createType, (, JSType, jsType, ), {, if, (, jsType, ., isUnknownType, (, ), ||]
[), ), ;, }, private, ConcreteType, createType, (, JSType, jsType, ), {, if, (, jsType, ., isUnknownType, (, ), ||]
[JSType, jsType, ), {, if, (, jsType, ., isUnknownType, (, ), ||, jsType, ., isEmptyType, (, ), ), {, return]
[JSType, jsType, ), {, if, (, jsType, ., isUnknownType, (, ), ||, jsType, ., isEmptyType, (, ), ), {, return]
[., isUnknownType, (, ), ||, jsType, ., isEmptyType, (, ), ), {, return, ConcreteType, ., ALL, ;, }, if, (]
[., isUnknownType, (, ), ||, jsType, ., isEmptyType, (, ), ), {, return, ConcreteType, ., ALL, ;, }, if, (]
[), {, return, ConcreteType, ., ALL, ;, }, if, (, jsType, ., isUnionType, (, ), ), {, ConcreteType, type, =]
[), {, return, ConcreteType, ., ALL, ;, }, if, (, jsType, ., isUnionType, (, ), ), {, ConcreteType, type, =]
[(, jsType, ., isUnionType, (, ), ), {, ConcreteType, type, =, ConcreteType, ., NONE, ;, for, (, JSType, alt, :]
[(, jsType, ., isUnionType, (, ), ), {, ConcreteType, type, =, ConcreteType, ., NONE, ;, for, (, JSType, alt, :]
[(, jsType, ., isUnionType, (, ), ), {, ConcreteType, type, =, ConcreteType, ., NONE, ;, for, (, JSType, alt, :]
[ConcreteType, ., NONE, ;, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[NONE, ;, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, type, =]
[NONE, ;, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, type, =]
[JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, type, =, type, ., unionWith, (]
[:, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, type, =, type, ., unionWith, (, createType, (]
[., getAlternates, (, ), ), {, type, =, type, ., unionWith, (, createType, (, alt, ), ), ;, }, return]
[{, type, =, type, ., unionWith, (, createType, (, alt, ), ), ;, }, return, type, ;, }, if, (]
[{, type, =, type, ., unionWith, (, createType, (, alt, ), ), ;, }, return, type, ;, }, if, (]
[alt, ), ), ;, }, return, type, ;, }, if, (, jsType, ., isFunctionType, (, ), ), {, if, (]
[alt, ), ), ;, }, return, type, ;, }, if, (, jsType, ., isFunctionType, (, ), ), {, if, (]
[), ;, }, return, type, ;, }, if, (, jsType, ., isFunctionType, (, ), ), {, if, (, getConcreteFunction, (]
[), ;, }, return, type, ;, }, if, (, jsType, ., isFunctionType, (, ), ), {, if, (, getConcreteFunction, (]
[if, (, jsType, ., isFunctionType, (, ), ), {, if, (, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), !=]
[isFunctionType, (, ), ), {, if, (, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), !=, null, ), {, return]
[), ), {, if, (, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), !=, null, ), {, return, getConcreteFunction, (]
[), ), {, if, (, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), !=, null, ), {, return, getConcreteFunction, (]
[toMaybeFunctionType, (, ), ), !=, null, ), {, return, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), ;, }, return]
[toMaybeFunctionType, (, ), ), !=, null, ), {, return, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), ;, }, return]
[{, return, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), ;, }, return, ConcreteType, ., ALL, ;, }, if, (]
[{, return, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), ;, }, return, ConcreteType, ., ALL, ;, }, if, (]
[), ), ;, }, return, ConcreteType, ., ALL, ;, }, if, (, jsType, ., isObject, (, ), ), {, return]
[;, }, return, ConcreteType, ., ALL, ;, }, if, (, jsType, ., isObject, (, ), ), {, return, createConcreteInstance, (]
[;, }, return, ConcreteType, ., ALL, ;, }, if, (, jsType, ., isObject, (, ), ), {, return, createConcreteInstance, (]
[(, jsType, ., isObject, (, ), ), {, return, createConcreteInstance, (, jsType, ., toObjectType, (, ), ), ;, }, return]
[(, jsType, ., isObject, (, ), ), {, return, createConcreteInstance, (, jsType, ., toObjectType, (, ), ), ;, }, return]
[), ;, }, return, ConcreteType, ., NONE, ;, }, private, ConcreteType, createTypeWithSubTypes, (, JSType, jsType, ), {, ConcreteType, ret, =]
[), ;, }, return, ConcreteType, ., NONE, ;, }, private, ConcreteType, createTypeWithSubTypes, (, JSType, jsType, ), {, ConcreteType, ret, =]
[NONE, ;, }, private, ConcreteType, createTypeWithSubTypes, (, JSType, jsType, ), {, ConcreteType, ret, =, ConcreteType, ., NONE, ;, if, (]
[NONE, ;, }, private, ConcreteType, createTypeWithSubTypes, (, JSType, jsType, ), {, ConcreteType, ret, =, ConcreteType, ., NONE, ;, if, (]
[ret, =, ConcreteType, ., NONE, ;, if, (, jsType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[ret, =, ConcreteType, ., NONE, ;, if, (, jsType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[ret, =, ConcreteType, ., NONE, ;, if, (, jsType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[(, ), ), {, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[), {, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, ret, =]
[), {, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, ret, =]
[JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, ret, =, ret, ., unionWith, (]
[:, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, ret, =, ret, ., unionWith, (, createTypeWithSubTypes, (]
[{, ret, =, ret, ., unionWith, (, createTypeWithSubTypes, (, alt, ), ), ;, }, }, else, {, ObjectType, instType, =]
[{, ret, =, ret, ., unionWith, (, createTypeWithSubTypes, (, alt, ), ), ;, }, }, else, {, ObjectType, instType, =]
[., unionWith, (, createTypeWithSubTypes, (, alt, ), ), ;, }, }, else, {, ObjectType, instType, =, ObjectType, ., cast, (]
[alt, ), ), ;, }, }, else, {, ObjectType, instType, =, ObjectType, ., cast, (, jsType, ), ;, if, (]
[alt, ), ), ;, }, }, else, {, ObjectType, instType, =, ObjectType, ., cast, (, jsType, ), ;, if, (]
[alt, ), ), ;, }, }, else, {, ObjectType, instType, =, ObjectType, ., cast, (, jsType, ), ;, if, (]
[alt, ), ), ;, }, }, else, {, ObjectType, instType, =, ObjectType, ., cast, (, jsType, ), ;, if, (]
[), ;, }, }, else, {, ObjectType, instType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, instType, !=]
[}, }, else, {, ObjectType, instType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, instType, !=, null, &&]
[}, }, else, {, ObjectType, instType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, instType, !=, null, &&]
[}, }, else, {, ObjectType, instType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, instType, !=, null, &&]
[=, ObjectType, ., cast, (, jsType, ), ;, if, (, instType, !=, null, &&, instType, ., getConstructor, (, ), !=]
[., cast, (, jsType, ), ;, if, (, instType, !=, null, &&, instType, ., getConstructor, (, ), !=, null, &&]
[., cast, (, jsType, ), ;, if, (, instType, !=, null, &&, instType, ., getConstructor, (, ), !=, null, &&]
[., cast, (, jsType, ), ;, if, (, instType, !=, null, &&, instType, ., getConstructor, (, ), !=, null, &&]
[!=, null, &&, instType, ., getConstructor, (, ), ., isInterface, (, ), ), {, Collection, <, FunctionType, >, implementors, =]
[!=, null, &&, instType, ., getConstructor, (, ), ., isInterface, (, ), ), {, Collection, <, FunctionType, >, implementors, =]
[(, ), ., isInterface, (, ), ), {, Collection, <, FunctionType, >, implementors, =, getTypeRegistry, (, ), ., getDirectImplementors, (]
[Collection, <, FunctionType, >, implementors, =, getTypeRegistry, (, ), ., getDirectImplementors, (, instType, ), ;, for, (, FunctionType, implementor, :]
[>, implementors, =, getTypeRegistry, (, ), ., getDirectImplementors, (, instType, ), ;, for, (, FunctionType, implementor, :, implementors, ), {]
[=, getTypeRegistry, (, ), ., getDirectImplementors, (, instType, ), ;, for, (, FunctionType, implementor, :, implementors, ), {, ret, =]
[=, getTypeRegistry, (, ), ., getDirectImplementors, (, instType, ), ;, for, (, FunctionType, implementor, :, implementors, ), {, ret, =]
[., getDirectImplementors, (, instType, ), ;, for, (, FunctionType, implementor, :, implementors, ), {, ret, =, ret, ., unionWith, (]
[(, instType, ), ;, for, (, FunctionType, implementor, :, implementors, ), {, ret, =, ret, ., unionWith, (, createTypeWithSubTypes, (]
[(, instType, ), ;, for, (, FunctionType, implementor, :, implementors, ), {, ret, =, ret, ., unionWith, (, createTypeWithSubTypes, (]
[ret, =, ret, ., unionWith, (, createTypeWithSubTypes, (, implementor, ., getInstanceType, (, ), ), ), ;, }, }, else, {]
[ret, ., unionWith, (, createTypeWithSubTypes, (, implementor, ., getInstanceType, (, ), ), ), ;, }, }, else, {, ret, =]
[ret, ., unionWith, (, createTypeWithSubTypes, (, implementor, ., getInstanceType, (, ), ), ), ;, }, }, else, {, ret, =]
[createTypeWithSubTypes, (, implementor, ., getInstanceType, (, ), ), ), ;, }, }, else, {, ret, =, ret, ., unionWith, (]
[implementor, ., getInstanceType, (, ), ), ), ;, }, }, else, {, ret, =, ret, ., unionWith, (, createUnionWithSubTypes, (]
[getInstanceType, (, ), ), ), ;, }, }, else, {, ret, =, ret, ., unionWith, (, createUnionWithSubTypes, (, createType, (]
[else, {, ret, =, ret, ., unionWith, (, createUnionWithSubTypes, (, createType, (, jsType, ), ), ), ;, }, }, return]
[), ), ), ;, }, }, return, ret, ;, }, ConcreteType, inferConcreteType, (, ConcreteScope, scope, ,, Node, expr, ), {]
[), ), ), ;, }, }, return, ret, ;, }, ConcreteType, inferConcreteType, (, ConcreteScope, scope, ,, Node, expr, ), {]
[}, }, return, ret, ;, }, ConcreteType, inferConcreteType, (, ConcreteScope, scope, ,, Node, expr, ), {, Preconditions, ., checkNotNull, (]
[ret, ;, }, ConcreteType, inferConcreteType, (, ConcreteScope, scope, ,, Node, expr, ), {, Preconditions, ., checkNotNull, (, scope, ), ;]
[ret, ;, }, ConcreteType, inferConcreteType, (, ConcreteScope, scope, ,, Node, expr, ), {, Preconditions, ., checkNotNull, (, scope, ), ;]
[inferConcreteType, (, ConcreteScope, scope, ,, Node, expr, ), {, Preconditions, ., checkNotNull, (, scope, ), ;, Preconditions, ., checkNotNull, (]
[{, Preconditions, ., checkNotNull, (, scope, ), ;, Preconditions, ., checkNotNull, (, expr, ), ;, ConcreteType, ret, ;, switch, (]
[{, Preconditions, ., checkNotNull, (, scope, ), ;, Preconditions, ., checkNotNull, (, expr, ), ;, ConcreteType, ret, ;, switch, (]
[Preconditions, ., checkNotNull, (, expr, ), ;, ConcreteType, ret, ;, switch, (, expr, ., getType, (, ), ), {, case]
[Preconditions, ., checkNotNull, (, expr, ), ;, ConcreteType, ret, ;, switch, (, expr, ., getType, (, ), ), {, case]
[switch, (, expr, ., getType, (, ), ), {, case, Token, ., NAME, :, StaticSlot, <, ConcreteType, >, slot, =]
[switch, (, expr, ., getType, (, ), ), {, case, Token, ., NAME, :, StaticSlot, <, ConcreteType, >, slot, =]
[getType, (, ), ), {, case, Token, ., NAME, :, StaticSlot, <, ConcreteType, >, slot, =, scope, ., getSlot, (]
[getType, (, ), ), {, case, Token, ., NAME, :, StaticSlot, <, ConcreteType, >, slot, =, scope, ., getSlot, (]
[:, StaticSlot, <, ConcreteType, >, slot, =, scope, ., getSlot, (, expr, ., getString, (, ), ), ;, if, (]
[:, StaticSlot, <, ConcreteType, >, slot, =, scope, ., getSlot, (, expr, ., getString, (, ), ), ;, if, (]
[<, ConcreteType, >, slot, =, scope, ., getSlot, (, expr, ., getString, (, ), ), ;, if, (, slot, !=]
[slot, =, scope, ., getSlot, (, expr, ., getString, (, ), ), ;, if, (, slot, !=, null, ), {]
[scope, ., getSlot, (, expr, ., getString, (, ), ), ;, if, (, slot, !=, null, ), {, ret, =]
[scope, ., getSlot, (, expr, ., getString, (, ), ), ;, if, (, slot, !=, null, ), {, ret, =]
[), ;, if, (, slot, !=, null, ), {, ret, =, slot, ., getType, (, ), ;, }, else, {]
[if, (, slot, !=, null, ), {, ret, =, slot, ., getType, (, ), ;, }, else, {, ret, =]
[if, (, slot, !=, null, ), {, ret, =, slot, ., getType, (, ), ;, }, else, {, ret, =]
[=, slot, ., getType, (, ), ;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case]
[=, slot, ., getType, (, ), ;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case]
[(, ), ;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case, Token, ., THIS, :]
[;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case, Token, ., THIS, :, ret, =]
[;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case, Token, ., THIS, :, ret, =]
[;, }, break, ;, case, Token, ., THIS, :, ret, =, scope, ., getTypeOfThis, (, ), ;, break, ;, case]
[;, }, break, ;, case, Token, ., THIS, :, ret, =, scope, ., getTypeOfThis, (, ), ;, break, ;, case]
[case, Token, ., THIS, :, ret, =, scope, ., getTypeOfThis, (, ), ;, break, ;, case, Token, ., ASSIGN, :]
[., THIS, :, ret, =, scope, ., getTypeOfThis, (, ), ;, break, ;, case, Token, ., ASSIGN, :, ret, =]
[:, ret, =, scope, ., getTypeOfThis, (, ), ;, break, ;, case, Token, ., ASSIGN, :, ret, =, inferConcreteType, (]
[=, scope, ., getTypeOfThis, (, ), ;, break, ;, case, Token, ., ASSIGN, :, ret, =, inferConcreteType, (, scope, ,]
[=, scope, ., getTypeOfThis, (, ), ;, break, ;, case, Token, ., ASSIGN, :, ret, =, inferConcreteType, (, scope, ,]
[Token, ., ASSIGN, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case]
[Token, ., ASSIGN, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case]
[ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., COMMA, :]
[inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., COMMA, :, ret, =]
[scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., COMMA, :, ret, =, inferConcreteType, (]
[expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., COMMA, :, ret, =, inferConcreteType, (, scope, ,]
[expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., COMMA, :, ret, =, inferConcreteType, (, scope, ,]
[Token, ., COMMA, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case]
[Token, ., COMMA, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case]
[ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., AND, :]
[inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., AND, :, ret, =]
[scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., AND, :, ret, =, inferConcreteType, (]
[expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., AND, :, ret, =, inferConcreteType, (, scope, ,]
[expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., AND, :, ret, =, inferConcreteType, (, scope, ,]
[Token, ., AND, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case]
[Token, ., AND, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case]
[ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., OR, :]
[inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., OR, :, ret, =]
[inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., OR, :, ret, =]
[scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., OR, :, ret, =, inferConcreteType, (]
[expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., OR, :, ret, =, inferConcreteType, (, scope, ,]
[expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., OR, :, ret, =, inferConcreteType, (, scope, ,]
[case, Token, ., OR, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ., unionWith, (]
[., OR, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ., unionWith, (, inferConcreteType, (]
[:, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ., unionWith, (, inferConcreteType, (, scope, ,]
[:, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ., unionWith, (, inferConcreteType, (, scope, ,]
[), ), ., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case]
[), ), ., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case]
[(, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., HOOK, :]
[(, scope, ,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., HOOK, :, ret, =]
[(, scope, ,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., HOOK, :, ret, =]
[,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., HOOK, :, ret, =, inferConcreteType, (]
[., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., HOOK, :, ret, =, inferConcreteType, (, scope, ,]
[., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., HOOK, :, ret, =, inferConcreteType, (, scope, ,]
[., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., HOOK, :, ret, =, inferConcreteType, (, scope, ,]
[:, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ., getNext, (, ), ), ., unionWith, (]
[=, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ., getNext, (, ), ), ., unionWith, (, inferConcreteType, (]
[(, scope, ,, expr, ., getFirstChild, (, ), ., getNext, (, ), ), ., unionWith, (, inferConcreteType, (, scope, ,]
[(, scope, ,, expr, ., getFirstChild, (, ), ., getNext, (, ), ), ., unionWith, (, inferConcreteType, (, scope, ,]
[), ), ., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case]
[), ), ., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case]
[scope, ,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., GETPROP, :, ConcreteType, recvType, =]
[expr, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., GETPROP, :, ConcreteType, recvType, =, inferConcreteType, (]
[getLastChild, (, ), ), ), ;, break, ;, case, Token, ., GETPROP, :, ConcreteType, recvType, =, inferConcreteType, (, scope, ,]
[getLastChild, (, ), ), ), ;, break, ;, case, Token, ., GETPROP, :, ConcreteType, recvType, =, inferConcreteType, (, scope, ,]
[Token, ., GETPROP, :, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (]
[Token, ., GETPROP, :, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (]
[inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (, recvType, ., isAll, (, ), ), {]
[scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (, recvType, ., isAll, (, ), ), {, ret, =]
[;, if, (, recvType, ., isAll, (, ), ), {, ret, =, recvType, ;, break, ;, }, Node, prop, =]
[;, if, (, recvType, ., isAll, (, ), ), {, ret, =, recvType, ;, break, ;, }, Node, prop, =]
[{, ret, =, recvType, ;, break, ;, }, Node, prop, =, expr, ., getLastChild, (, ), ;, String, propName, =]
[{, ret, =, recvType, ;, break, ;, }, Node, prop, =, expr, ., getLastChild, (, ), ;, String, propName, =]
[prop, =, expr, ., getLastChild, (, ), ;, String, propName, =, prop, ., getString, (, ), ;, ConcreteType, type, =]
[prop, =, expr, ., getLastChild, (, ), ;, String, propName, =, prop, ., getString, (, ), ;, ConcreteType, type, =]
[getLastChild, (, ), ;, String, propName, =, prop, ., getString, (, ), ;, ConcreteType, type, =, recvType, ., getPropertyType, (]
[propName, =, prop, ., getString, (, ), ;, ConcreteType, type, =, recvType, ., getPropertyType, (, propName, ), ;, if, (]
[propName, =, prop, ., getString, (, ), ;, ConcreteType, type, =, recvType, ., getPropertyType, (, propName, ), ;, if, (]
[getString, (, ), ;, ConcreteType, type, =, recvType, ., getPropertyType, (, propName, ), ;, if, (, "prototype", ., equals, (]
[getPropertyType, (, propName, ), ;, if, (, "prototype", ., equals, (, propName, ), ), {, for, (, ConcreteFunctionType, funType, :]
[getPropertyType, (, propName, ), ;, if, (, "prototype", ., equals, (, propName, ), ), {, for, (, ConcreteFunctionType, funType, :]
["prototype", ., equals, (, propName, ), ), {, for, (, ConcreteFunctionType, funType, :, recvType, ., getFunctions, (, ), ), {]
[equals, (, propName, ), ), {, for, (, ConcreteFunctionType, funType, :, recvType, ., getFunctions, (, ), ), {, type, =]
[equals, (, propName, ), ), {, for, (, ConcreteFunctionType, funType, :, recvType, ., getFunctions, (, ), ), {, type, =]
[), {, for, (, ConcreteFunctionType, funType, :, recvType, ., getFunctions, (, ), ), {, type, =, type, ., unionWith, (]
[), {, for, (, ConcreteFunctionType, funType, :, recvType, ., getFunctions, (, ), ), {, type, =, type, ., unionWith, (]
[), {, type, =, type, ., unionWith, (, funType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (]
[), {, type, =, type, ., unionWith, (, funType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (]
[), {, type, =, type, ., unionWith, (, funType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (]
[funType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (, compiler, ., getCodingConvention, (, ), ., isSuperClassReference, (]
[else, if, (, compiler, ., getCodingConvention, (, ), ., isSuperClassReference, (, propName, ), ), {, for, (, ConcreteFunctionType, superType, :]
[else, if, (, compiler, ., getCodingConvention, (, ), ., isSuperClassReference, (, propName, ), ), {, for, (, ConcreteFunctionType, superType, :]
[), ., isSuperClassReference, (, propName, ), ), {, for, (, ConcreteFunctionType, superType, :, recvType, ., getSuperclassTypes, (, ), ), {]
[isSuperClassReference, (, propName, ), ), {, for, (, ConcreteFunctionType, superType, :, recvType, ., getSuperclassTypes, (, ), ), {, type, =]
[isSuperClassReference, (, propName, ), ), {, for, (, ConcreteFunctionType, superType, :, recvType, ., getSuperclassTypes, (, ), ), {, type, =]
[), {, for, (, ConcreteFunctionType, superType, :, recvType, ., getSuperclassTypes, (, ), ), {, type, =, type, ., unionWith, (]
[), {, for, (, ConcreteFunctionType, superType, :, recvType, ., getSuperclassTypes, (, ), ), {, type, =, type, ., unionWith, (]
[), {, type, =, type, ., unionWith, (, superType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (]
[), {, type, =, type, ., unionWith, (, superType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (]
[type, ., unionWith, (, superType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (, "call", ., equals, (]
[superType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (, "call", ., equals, (, propName, ), ), {]
[getPrototypeType, (, ), ), ;, }, }, else, if, (, "call", ., equals, (, propName, ), ), {, type, =]
[), ;, }, }, else, if, (, "call", ., equals, (, propName, ), ), {, type, =, recvType, ;, }]
[}, }, else, if, (, "call", ., equals, (, propName, ), ), {, type, =, recvType, ;, }, ret, =]
["call", ., equals, (, propName, ), ), {, type, =, recvType, ;, }, ret, =, type, ;, break, ;, case]
["call", ., equals, (, propName, ), ), {, type, =, recvType, ;, }, ret, =, type, ;, break, ;, case]
[propName, ), ), {, type, =, recvType, ;, }, ret, =, type, ;, break, ;, case, Token, ., GETELEM, :]
[), {, type, =, recvType, ;, }, ret, =, type, ;, break, ;, case, Token, ., GETELEM, :, ret, =]
[), {, type, =, recvType, ;, }, ret, =, type, ;, break, ;, case, Token, ., GETELEM, :, ret, =]
[ret, =, type, ;, break, ;, case, Token, ., GETELEM, :, ret, =, ConcreteType, ., ALL, ;, break, ;, case]
[ret, =, type, ;, break, ;, case, Token, ., GETELEM, :, ret, =, ConcreteType, ., ALL, ;, break, ;, case]
[Token, ., GETELEM, :, ret, =, ConcreteType, ., ALL, ;, break, ;, case, Token, ., CALL, :, ConcreteType, targetType, =]
[GETELEM, :, ret, =, ConcreteType, ., ALL, ;, break, ;, case, Token, ., CALL, :, ConcreteType, targetType, =, inferConcreteType, (]
[ret, =, ConcreteType, ., ALL, ;, break, ;, case, Token, ., CALL, :, ConcreteType, targetType, =, inferConcreteType, (, scope, ,]
[ret, =, ConcreteType, ., ALL, ;, break, ;, case, Token, ., CALL, :, ConcreteType, targetType, =, inferConcreteType, (, scope, ,]
[Token, ., CALL, :, ConcreteType, targetType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (]
[Token, ., CALL, :, ConcreteType, targetType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (]
[inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (, targetType, ., isAll, (, ), ), {]
[scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (, targetType, ., isAll, (, ), ), {, ret, =]
[(, ), ), ;, if, (, targetType, ., isAll, (, ), ), {, ret, =, targetType, ;, break, ;, }]
[), ;, if, (, targetType, ., isAll, (, ), ), {, ret, =, targetType, ;, break, ;, }, ret, =]
[), ;, if, (, targetType, ., isAll, (, ), ), {, ret, =, targetType, ;, break, ;, }, ret, =]
[), {, ret, =, targetType, ;, break, ;, }, ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteFunctionType, funType, :]
[), {, ret, =, targetType, ;, break, ;, }, ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteFunctionType, funType, :]
[;, }, ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteFunctionType, funType, :, targetType, ., getFunctions, (, ), ), {]
[ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteFunctionType, funType, :, targetType, ., getFunctions, (, ), ), {, ret, =]
[ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteFunctionType, funType, :, targetType, ., getFunctions, (, ), ), {, ret, =]
[NONE, ;, for, (, ConcreteFunctionType, funType, :, targetType, ., getFunctions, (, ), ), {, ret, =, ret, ., unionWith, (]
[NONE, ;, for, (, ConcreteFunctionType, funType, :, targetType, ., getFunctions, (, ), ), {, ret, =, ret, ., unionWith, (]
[NONE, ;, for, (, ConcreteFunctionType, funType, :, targetType, ., getFunctions, (, ), ), {, ret, =, ret, ., unionWith, (]
[=, ret, ., unionWith, (, funType, ., getReturnSlot, (, ), ., getType, (, ), ), ;, }, break, ;, case]
[=, ret, ., unionWith, (, funType, ., getReturnSlot, (, ), ., getType, (, ), ), ;, }, break, ;, case]
[getReturnSlot, (, ), ., getType, (, ), ), ;, }, break, ;, case, Token, ., NEW, :, ConcreteType, constructorType, =]
[), ., getType, (, ), ), ;, }, break, ;, case, Token, ., NEW, :, ConcreteType, constructorType, =, inferConcreteType, (]
[getType, (, ), ), ;, }, break, ;, case, Token, ., NEW, :, ConcreteType, constructorType, =, inferConcreteType, (, scope, ,]
[getType, (, ), ), ;, }, break, ;, case, Token, ., NEW, :, ConcreteType, constructorType, =, inferConcreteType, (, scope, ,]
[Token, ., NEW, :, ConcreteType, constructorType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (]
[Token, ., NEW, :, ConcreteType, constructorType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (]
[(, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (, constructorType, ., isAll, (, ), ), {, throw]
[expr, ., getFirstChild, (, ), ), ;, if, (, constructorType, ., isAll, (, ), ), {, throw, new, AssertionError, (]
[), ), ;, if, (, constructorType, ., isAll, (, ), ), {, throw, new, AssertionError, (, "Attempted new call on all type!", ), ;, }]
[;, if, (, constructorType, ., isAll, (, ), ), {, throw, new, AssertionError, (, "Attempted new call on all type!", ), ;, }, ret, =]
[;, if, (, constructorType, ., isAll, (, ), ), {, throw, new, AssertionError, (, "Attempted new call on all type!", ), ;, }, ret, =]
[{, throw, new, AssertionError, (, "Attempted new call on all type!", ), ;, }, ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :]
[{, throw, new, AssertionError, (, "Attempted new call on all type!", ), ;, }, ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :]
[;, }, ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :, constructorType, ., getFunctionInstanceTypes, (, ), ), {]
[ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :, constructorType, ., getFunctionInstanceTypes, (, ), ), {, ret, =]
[ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :, constructorType, ., getFunctionInstanceTypes, (, ), ), {, ret, =]
[NONE, ;, for, (, ConcreteInstanceType, instType, :, constructorType, ., getFunctionInstanceTypes, (, ), ), {, ret, =, ret, ., unionWith, (]
[ConcreteInstanceType, instType, :, constructorType, ., getFunctionInstanceTypes, (, ), ), {, ret, =, ret, ., unionWith, (, instType, ), ;, }]
[ConcreteInstanceType, instType, :, constructorType, ., getFunctionInstanceTypes, (, ), ), {, ret, =, ret, ., unionWith, (, instType, ), ;, }]
[., getFunctionInstanceTypes, (, ), ), {, ret, =, ret, ., unionWith, (, instType, ), ;, }, allInstantiatedTypes, ., add, (]
[ret, =, ret, ., unionWith, (, instType, ), ;, }, allInstantiatedTypes, ., add, (, ret, ), ;, break, ;, case]
[ret, =, ret, ., unionWith, (, instType, ), ;, }, allInstantiatedTypes, ., add, (, ret, ), ;, break, ;, case]
[unionWith, (, instType, ), ;, }, allInstantiatedTypes, ., add, (, ret, ), ;, break, ;, case, Token, ., FUNCTION, :]
[instType, ), ;, }, allInstantiatedTypes, ., add, (, ret, ), ;, break, ;, case, Token, ., FUNCTION, :, ret, =]
[;, }, allInstantiatedTypes, ., add, (, ret, ), ;, break, ;, case, Token, ., FUNCTION, :, ret, =, createConcreteFunction, (]
[allInstantiatedTypes, ., add, (, ret, ), ;, break, ;, case, Token, ., FUNCTION, :, ret, =, createConcreteFunction, (, expr, ,]
[;, break, ;, case, Token, ., FUNCTION, :, ret, =, createConcreteFunction, (, expr, ,, scope, ), ;, break, ;, case]
[;, break, ;, case, Token, ., FUNCTION, :, ret, =, createConcreteFunction, (, expr, ,, scope, ), ;, break, ;, case]
[FUNCTION, :, ret, =, createConcreteFunction, (, expr, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, if, (]
[FUNCTION, :, ret, =, createConcreteFunction, (, expr, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, if, (]
[:, ret, =, createConcreteFunction, (, expr, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, if, (, (]
[:, ret, =, createConcreteFunction, (, expr, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, if, (, (]
[:, ret, =, createConcreteFunction, (, expr, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, if, (, (]
[,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, if, (, (, expr, ., getJSType, (, ), !=]
[;, break, ;, case, Token, ., OBJECTLIT, :, if, (, (, expr, ., getJSType, (, ), !=, null, ), &&]
[break, ;, case, Token, ., OBJECTLIT, :, if, (, (, expr, ., getJSType, (, ), !=, null, ), &&, !]
[break, ;, case, Token, ., OBJECTLIT, :, if, (, (, expr, ., getJSType, (, ), !=, null, ), &&, !]
[break, ;, case, Token, ., OBJECTLIT, :, if, (, (, expr, ., getJSType, (, ), !=, null, ), &&, !]
[), !=, null, ), &&, !, expr, ., getJSType, (, ), ., isUnknownType, (, ), ), {, JSType, exprType, =]
[), !=, null, ), &&, !, expr, ., getJSType, (, ), ., isUnknownType, (, ), ), {, JSType, exprType, =]
[), !=, null, ), &&, !, expr, ., getJSType, (, ), ., isUnknownType, (, ), ), {, JSType, exprType, =]
[(, ), ), {, JSType, exprType, =, expr, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, ConcreteType, inst, =]
[), {, JSType, exprType, =, expr, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, ConcreteType, inst, =, createConcreteInstance, (]
[), {, JSType, exprType, =, expr, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, ConcreteType, inst, =, createConcreteInstance, (]
[getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, ConcreteType, inst, =, createConcreteInstance, (, exprType, ., toObjectType, (, ), ), ;]
[getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, ConcreteType, inst, =, createConcreteInstance, (, exprType, ., toObjectType, (, ), ), ;]
[restrictByNotNullOrUndefined, (, ), ;, ConcreteType, inst, =, createConcreteInstance, (, exprType, ., toObjectType, (, ), ), ;, allInstantiatedTypes, ., add, (]
[;, ConcreteType, inst, =, createConcreteInstance, (, exprType, ., toObjectType, (, ), ), ;, allInstantiatedTypes, ., add, (, inst, ), ;]
[inst, =, createConcreteInstance, (, exprType, ., toObjectType, (, ), ), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =]
[., toObjectType, (, ), ), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst, ;, }, else, {]
[(, ), ), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst, ;, }, else, {, ret, =]
[(, ), ), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst, ;, }, else, {, ret, =]
[inst, ), ;, ret, =, inst, ;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case]
[inst, ), ;, ret, =, inst, ;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case]
[}, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case, Token, ., ARRAYLIT, :, ObjectType, arrayType, =]
[ret, =, ConcreteType, ., ALL, ;, }, break, ;, case, Token, ., ARRAYLIT, :, ObjectType, arrayType, =, (, ObjectType, )]
[ret, =, ConcreteType, ., ALL, ;, }, break, ;, case, Token, ., ARRAYLIT, :, ObjectType, arrayType, =, (, ObjectType, )]
[}, break, ;, case, Token, ., ARRAYLIT, :, ObjectType, arrayType, =, (, ObjectType, ), getTypeRegistry, (, ), ., getNativeType, (]
[}, break, ;, case, Token, ., ARRAYLIT, :, ObjectType, arrayType, =, (, ObjectType, ), getTypeRegistry, (, ), ., getNativeType, (]
[ObjectType, arrayType, =, (, ObjectType, ), getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., ARRAY_TYPE, ), ;, ConcreteInstanceType, inst, =]
[=, (, ObjectType, ), getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., ARRAY_TYPE, ), ;, ConcreteInstanceType, inst, =, createConcreteInstance, (]
[), getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., ARRAY_TYPE, ), ;, ConcreteInstanceType, inst, =, createConcreteInstance, (, arrayType, ), ;]
[), getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., ARRAY_TYPE, ), ;, ConcreteInstanceType, inst, =, createConcreteInstance, (, arrayType, ), ;]
[., getNativeType, (, JSTypeNative, ., ARRAY_TYPE, ), ;, ConcreteInstanceType, inst, =, createConcreteInstance, (, arrayType, ), ;, allInstantiatedTypes, ., add, (]
[JSTypeNative, ., ARRAY_TYPE, ), ;, ConcreteInstanceType, inst, =, createConcreteInstance, (, arrayType, ), ;, allInstantiatedTypes, ., add, (, inst, ), ;]
[ARRAY_TYPE, ), ;, ConcreteInstanceType, inst, =, createConcreteInstance, (, arrayType, ), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =]
[createConcreteInstance, (, arrayType, ), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst, ;, break, ;, default, :]
[arrayType, ), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst, ;, break, ;, default, :, ret, =]
[arrayType, ), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst, ;, break, ;, default, :, ret, =]
[(, inst, ), ;, ret, =, inst, ;, break, ;, default, :, ret, =, ConcreteType, ., NONE, ;, }, return]
[), ;, ret, =, inst, ;, break, ;, default, :, ret, =, ConcreteType, ., NONE, ;, }, return, createTypeIntersection, (]
[ret, =, inst, ;, break, ;, default, :, ret, =, ConcreteType, ., NONE, ;, }, return, createTypeIntersection, (, ret, ,]
[ret, =, inst, ;, break, ;, default, :, ret, =, ConcreteType, ., NONE, ;, }, return, createTypeIntersection, (, ret, ,]
[getJSType, (, ), ), ;, }, private, ConcreteType, createTypeIntersection, (, ConcreteType, concreteType, ,, JSType, jsType, ), {, ConcreteJSTypePair, key, =]
[), ;, }, private, ConcreteType, createTypeIntersection, (, ConcreteType, concreteType, ,, JSType, jsType, ), {, ConcreteJSTypePair, key, =, new, ConcreteJSTypePair, (]
[}, private, ConcreteType, createTypeIntersection, (, ConcreteType, concreteType, ,, JSType, jsType, ), {, ConcreteJSTypePair, key, =, new, ConcreteJSTypePair, (, concreteType, ,]
[concreteType, ,, JSType, jsType, ), {, ConcreteJSTypePair, key, =, new, ConcreteJSTypePair, (, concreteType, ,, jsType, ), ;, ConcreteType, ret, =]
[concreteType, ,, JSType, jsType, ), {, ConcreteJSTypePair, key, =, new, ConcreteJSTypePair, (, concreteType, ,, jsType, ), ;, ConcreteType, ret, =]
[), {, ConcreteJSTypePair, key, =, new, ConcreteJSTypePair, (, concreteType, ,, jsType, ), ;, ConcreteType, ret, =, typeIntersectionMemos, ., get, (]
[new, ConcreteJSTypePair, (, concreteType, ,, jsType, ), ;, ConcreteType, ret, =, typeIntersectionMemos, ., get, (, key, ), ;, if, (]
[new, ConcreteJSTypePair, (, concreteType, ,, jsType, ), ;, ConcreteType, ret, =, typeIntersectionMemos, ., get, (, key, ), ;, if, (]
[(, concreteType, ,, jsType, ), ;, ConcreteType, ret, =, typeIntersectionMemos, ., get, (, key, ), ;, if, (, ret, !=]
[), ;, ConcreteType, ret, =, typeIntersectionMemos, ., get, (, key, ), ;, if, (, ret, !=, null, ), {, return]
[typeIntersectionMemos, ., get, (, key, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, if, (]
[typeIntersectionMemos, ., get, (, key, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, if, (]
[typeIntersectionMemos, ., get, (, key, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, if, (]
[typeIntersectionMemos, ., get, (, key, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, if, (]
[get, (, key, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, if, (, jsType, ==]
[key, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, if, (, jsType, ==, null, ||]
[key, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, if, (, jsType, ==, null, ||]
[!=, null, ), {, return, ret, ;, }, if, (, jsType, ==, null, ||, jsType, ., isUnknownType, (, ), ||]
[!=, null, ), {, return, ret, ;, }, if, (, jsType, ==, null, ||, jsType, ., isUnknownType, (, ), ||]
[}, if, (, jsType, ==, null, ||, jsType, ., isUnknownType, (, ), ||, concreteType, ., isNone, (, ), ), {]
[(, jsType, ==, null, ||, jsType, ., isUnknownType, (, ), ||, concreteType, ., isNone, (, ), ), {, ret, =]
[., isUnknownType, (, ), ||, concreteType, ., isNone, (, ), ), {, ret, =, concreteType, ;, }, else, if, (]
[., isUnknownType, (, ), ||, concreteType, ., isNone, (, ), ), {, ret, =, concreteType, ;, }, else, if, (]
[., isUnknownType, (, ), ||, concreteType, ., isNone, (, ), ), {, ret, =, concreteType, ;, }, else, if, (]
[., isNone, (, ), ), {, ret, =, concreteType, ;, }, else, if, (, concreteType, ., isUnion, (, ), ||]
[., isNone, (, ), ), {, ret, =, concreteType, ;, }, else, if, (, concreteType, ., isUnion, (, ), ||]
[=, concreteType, ;, }, else, if, (, concreteType, ., isUnion, (, ), ||, concreteType, ., isSingleton, (, ), ), {]
[;, }, else, if, (, concreteType, ., isUnion, (, ), ||, concreteType, ., isSingleton, (, ), ), {, ret, =]
[;, }, else, if, (, concreteType, ., isUnion, (, ), ||, concreteType, ., isSingleton, (, ), ), {, ret, =]
[(, concreteType, ., isUnion, (, ), ||, concreteType, ., isSingleton, (, ), ), {, ret, =, concreteType, ., intersectWith, (]
[., isUnion, (, ), ||, concreteType, ., isSingleton, (, ), ), {, ret, =, concreteType, ., intersectWith, (, createTypeWithSubTypes, (]
[isSingleton, (, ), ), {, ret, =, concreteType, ., intersectWith, (, createTypeWithSubTypes, (, jsType, ), ), ;, }, else, {]
[isSingleton, (, ), ), {, ret, =, concreteType, ., intersectWith, (, createTypeWithSubTypes, (, jsType, ), ), ;, }, else, {]
[{, ret, =, concreteType, ., intersectWith, (, createTypeWithSubTypes, (, jsType, ), ), ;, }, else, {, Preconditions, ., checkState, (]
[{, ret, =, concreteType, ., intersectWith, (, createTypeWithSubTypes, (, jsType, ), ), ;, }, else, {, Preconditions, ., checkState, (]
[createTypeWithSubTypes, (, jsType, ), ), ;, }, else, {, Preconditions, ., checkState, (, concreteType, ., isAll, (, ), ), ;]
[jsType, ), ), ;, }, else, {, Preconditions, ., checkState, (, concreteType, ., isAll, (, ), ), ;, ret, =]
[), ;, }, else, {, Preconditions, ., checkState, (, concreteType, ., isAll, (, ), ), ;, ret, =, createTypeWithSubTypes, (]
[{, Preconditions, ., checkState, (, concreteType, ., isAll, (, ), ), ;, ret, =, createTypeWithSubTypes, (, jsType, ), ;, }]
[., checkState, (, concreteType, ., isAll, (, ), ), ;, ret, =, createTypeWithSubTypes, (, jsType, ), ;, }, ret, =]
[., checkState, (, concreteType, ., isAll, (, ), ), ;, ret, =, createTypeWithSubTypes, (, jsType, ), ;, }, ret, =]
[., isAll, (, ), ), ;, ret, =, createTypeWithSubTypes, (, jsType, ), ;, }, ret, =, ret, ., intersectWith, (]
[., isAll, (, ), ), ;, ret, =, createTypeWithSubTypes, (, jsType, ), ;, }, ret, =, ret, ., intersectWith, (]
[), ;, ret, =, createTypeWithSubTypes, (, jsType, ), ;, }, ret, =, ret, ., intersectWith, (, ConcreteType, ., createForTypes, (]
[}, ret, =, ret, ., intersectWith, (, ConcreteType, ., createForTypes, (, allInstantiatedTypes, ), ), ;, for, (, ConcreteFunctionType, functionType, :]
[}, ret, =, ret, ., intersectWith, (, ConcreteType, ., createForTypes, (, allInstantiatedTypes, ), ), ;, for, (, ConcreteFunctionType, functionType, :]
[ConcreteType, ., createForTypes, (, allInstantiatedTypes, ), ), ;, for, (, ConcreteFunctionType, functionType, :, concreteType, ., getFunctions, (, ), ), {]
[createForTypes, (, allInstantiatedTypes, ), ), ;, for, (, ConcreteFunctionType, functionType, :, concreteType, ., getFunctions, (, ), ), {, ret, =]
[createForTypes, (, allInstantiatedTypes, ), ), ;, for, (, ConcreteFunctionType, functionType, :, concreteType, ., getFunctions, (, ), ), {, ret, =]
[), ;, for, (, ConcreteFunctionType, functionType, :, concreteType, ., getFunctions, (, ), ), {, ret, =, ret, ., unionWith, (]
[getFunctions, (, ), ), {, ret, =, ret, ., unionWith, (, functionType, ), ;, }, for, (, ConcreteInstanceType, prototype, :]
[getFunctions, (, ), ), {, ret, =, ret, ., unionWith, (, functionType, ), ;, }, for, (, ConcreteInstanceType, prototype, :]
[ret, ., unionWith, (, functionType, ), ;, }, for, (, ConcreteInstanceType, prototype, :, concreteType, ., getPrototypeTypes, (, ), ), {]
[unionWith, (, functionType, ), ;, }, for, (, ConcreteInstanceType, prototype, :, concreteType, ., getPrototypeTypes, (, ), ), {, ret, =]
[unionWith, (, functionType, ), ;, }, for, (, ConcreteInstanceType, prototype, :, concreteType, ., getPrototypeTypes, (, ), ), {, ret, =]
[;, }, for, (, ConcreteInstanceType, prototype, :, concreteType, ., getPrototypeTypes, (, ), ), {, ret, =, ret, ., unionWith, (]
[getPrototypeTypes, (, ), ), {, ret, =, ret, ., unionWith, (, prototype, ), ;, }, for, (, ConcreteInstanceType, instance, :]
[getPrototypeTypes, (, ), ), {, ret, =, ret, ., unionWith, (, prototype, ), ;, }, for, (, ConcreteInstanceType, instance, :]
[unionWith, (, prototype, ), ;, }, for, (, ConcreteInstanceType, instance, :, concreteType, ., getInstances, (, ), ), {, if, (]
[unionWith, (, prototype, ), ;, }, for, (, ConcreteInstanceType, instance, :, concreteType, ., getInstances, (, ), ), {, if, (]
[(, prototype, ), ;, }, for, (, ConcreteInstanceType, instance, :, concreteType, ., getInstances, (, ), ), {, if, (, !]
[(, prototype, ), ;, }, for, (, ConcreteInstanceType, instance, :, concreteType, ., getInstances, (, ), ), {, if, (, !]
[(, prototype, ), ;, }, for, (, ConcreteInstanceType, instance, :, concreteType, ., getInstances, (, ), ), {, if, (, !]
[instance, :, concreteType, ., getInstances, (, ), ), {, if, (, !, instance, ., instanceType, ., isInstanceType, (, ), &&]
[:, concreteType, ., getInstances, (, ), ), {, if, (, !, instance, ., instanceType, ., isInstanceType, (, ), &&, !]
[:, concreteType, ., getInstances, (, ), ), {, if, (, !, instance, ., instanceType, ., isInstanceType, (, ), &&, !]
[{, if, (, !, instance, ., instanceType, ., isInstanceType, (, ), &&, !, instance, ., isFunctionPrototype, (, ), ), {]
[(, !, instance, ., instanceType, ., isInstanceType, (, ), &&, !, instance, ., isFunctionPrototype, (, ), ), {, ret, =]
[(, !, instance, ., instanceType, ., isInstanceType, (, ), &&, !, instance, ., isFunctionPrototype, (, ), ), {, ret, =]
[instanceType, ., isInstanceType, (, ), &&, !, instance, ., isFunctionPrototype, (, ), ), {, ret, =, ret, ., unionWith, (]
[&&, !, instance, ., isFunctionPrototype, (, ), ), {, ret, =, ret, ., unionWith, (, instance, ), ;, }, }]
[&&, !, instance, ., isFunctionPrototype, (, ), ), {, ret, =, ret, ., unionWith, (, instance, ), ;, }, }]
[isFunctionPrototype, (, ), ), {, ret, =, ret, ., unionWith, (, instance, ), ;, }, }, typeIntersectionMemos, ., put, (]
[), ), {, ret, =, ret, ., unionWith, (, instance, ), ;, }, }, typeIntersectionMemos, ., put, (, key, ,]
[=, ret, ., unionWith, (, instance, ), ;, }, }, typeIntersectionMemos, ., put, (, key, ,, ret, ), ;, return]
[}, @, Override, public, ConcreteFunctionType, createConcreteFunction, (, Node, decl, ,, StaticScope, <, ConcreteType, >, parent, ), {, ConcreteFunctionType, funType, =]
[}, @, Override, public, ConcreteFunctionType, createConcreteFunction, (, Node, decl, ,, StaticScope, <, ConcreteType, >, parent, ), {, ConcreteFunctionType, funType, =]
[ConcreteFunctionType, createConcreteFunction, (, Node, decl, ,, StaticScope, <, ConcreteType, >, parent, ), {, ConcreteFunctionType, funType, =, functionFromDeclaration, ., get, (]
[,, StaticScope, <, ConcreteType, >, parent, ), {, ConcreteFunctionType, funType, =, functionFromDeclaration, ., get, (, decl, ), ;, if, (]
[,, StaticScope, <, ConcreteType, >, parent, ), {, ConcreteFunctionType, funType, =, functionFromDeclaration, ., get, (, decl, ), ;, if, (]
[<, ConcreteType, >, parent, ), {, ConcreteFunctionType, funType, =, functionFromDeclaration, ., get, (, decl, ), ;, if, (, funType, ==]
[parent, ), {, ConcreteFunctionType, funType, =, functionFromDeclaration, ., get, (, decl, ), ;, if, (, funType, ==, null, ), {]
[parent, ), {, ConcreteFunctionType, funType, =, functionFromDeclaration, ., get, (, decl, ), ;, if, (, funType, ==, null, ), {]
[funType, =, functionFromDeclaration, ., get, (, decl, ), ;, if, (, funType, ==, null, ), {, functionFromDeclaration, ., put, (]
[functionFromDeclaration, ., get, (, decl, ), ;, if, (, funType, ==, null, ), {, functionFromDeclaration, ., put, (, decl, ,]
[get, (, decl, ), ;, if, (, funType, ==, null, ), {, functionFromDeclaration, ., put, (, decl, ,, funType, =]
[), ;, if, (, funType, ==, null, ), {, functionFromDeclaration, ., put, (, decl, ,, funType, =, new, ConcreteFunctionType, (]
[if, (, funType, ==, null, ), {, functionFromDeclaration, ., put, (, decl, ,, funType, =, new, ConcreteFunctionType, (, this, ,]
[funType, ==, null, ), {, functionFromDeclaration, ., put, (, decl, ,, funType, =, new, ConcreteFunctionType, (, this, ,, decl, ,]
[., put, (, decl, ,, funType, =, new, ConcreteFunctionType, (, this, ,, decl, ,, parent, ), ), ;, if, (]
[., put, (, decl, ,, funType, =, new, ConcreteFunctionType, (, this, ,, decl, ,, parent, ), ), ;, if, (]
[., put, (, decl, ,, funType, =, new, ConcreteFunctionType, (, this, ,, decl, ,, parent, ), ), ;, if, (]
[=, new, ConcreteFunctionType, (, this, ,, decl, ,, parent, ), ), ;, if, (, decl, ., getJSType, (, ), !=]
[(, this, ,, decl, ,, parent, ), ), ;, if, (, decl, ., getJSType, (, ), !=, null, ), {]
[(, this, ,, decl, ,, parent, ), ), ;, if, (, decl, ., getJSType, (, ), !=, null, ), {]
[,, parent, ), ), ;, if, (, decl, ., getJSType, (, ), !=, null, ), {, functionFromJSType, ., put, (]
[,, parent, ), ), ;, if, (, decl, ., getJSType, (, ), !=, null, ), {, functionFromJSType, ., put, (]
[,, parent, ), ), ;, if, (, decl, ., getJSType, (, ), !=, null, ), {, functionFromJSType, ., put, (]
[(, ), !=, null, ), {, functionFromJSType, ., put, (, decl, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ,]
[functionFromJSType, ., put, (, decl, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ,, funType, ), ;, }, }, return]
[,, funType, ), ;, }, }, return, funType, ;, }, @, Override, public, ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {]
[,, funType, ), ;, }, }, return, funType, ;, }, @, Override, public, ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {]
[}, }, return, funType, ;, }, @, Override, public, ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {, Preconditions, ., checkArgument, (]
[}, }, return, funType, ;, }, @, Override, public, ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {, Preconditions, ., checkArgument, (]
[}, return, funType, ;, }, @, Override, public, ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {, Preconditions, ., checkArgument, (, !]
[}, return, funType, ;, }, @, Override, public, ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {, Preconditions, ., checkArgument, (, !]
[Override, public, ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {, Preconditions, ., checkArgument, (, !, instanceType, ., isFunctionType, (, ), ||]
[Override, public, ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {, Preconditions, ., checkArgument, (, !, instanceType, ., isFunctionType, (, ), ||]
[ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {, Preconditions, ., checkArgument, (, !, instanceType, ., isFunctionType, (, ), ||, instanceType, ==]
[ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {, Preconditions, ., checkArgument, (, !, instanceType, ., isFunctionType, (, ), ||, instanceType, ==]
[{, Preconditions, ., checkArgument, (, !, instanceType, ., isFunctionType, (, ), ||, instanceType, ==, getTypeRegistry, (, ), ., getNativeType, (]
[., isFunctionType, (, ), ||, instanceType, ==, getTypeRegistry, (, ), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, ConcreteInstanceType, instType, =]
[., isFunctionType, (, ), ||, instanceType, ==, getTypeRegistry, (, ), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, ConcreteInstanceType, instType, =]
[||, instanceType, ==, getTypeRegistry, (, ), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (]
[), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (, instanceType, ), ;, if, (]
[), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (, instanceType, ), ;, if, (]
[getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (, instanceType, ), ;, if, (, instType, ==]
[), ), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (, instanceType, ), ;, if, (, instType, ==, null, ), {]
[), ), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (, instanceType, ), ;, if, (, instType, ==, null, ), {]
[instType, =, instanceFromJSType, ., get, (, instanceType, ), ;, if, (, instType, ==, null, ), {, instanceFromJSType, ., put, (]
[instanceFromJSType, ., get, (, instanceType, ), ;, if, (, instType, ==, null, ), {, instanceFromJSType, ., put, (, instanceType, ,]
[get, (, instanceType, ), ;, if, (, instType, ==, null, ), {, instanceFromJSType, ., put, (, instanceType, ,, instType, =]
[), ;, if, (, instType, ==, null, ), {, instanceFromJSType, ., put, (, instanceType, ,, instType, =, new, ConcreteInstanceType, (]
[if, (, instType, ==, null, ), {, instanceFromJSType, ., put, (, instanceType, ,, instType, =, new, ConcreteInstanceType, (, this, ,]
[{, instanceFromJSType, ., put, (, instanceType, ,, instType, =, new, ConcreteInstanceType, (, this, ,, instanceType, ), ), ;, }, return]
[(, this, ,, instanceType, ), ), ;, }, return, instType, ;, }, ConcreteFunctionType, getConcreteFunction, (, Node, decl, ), {, return]
[(, this, ,, instanceType, ), ), ;, }, return, instType, ;, }, ConcreteFunctionType, getConcreteFunction, (, Node, decl, ), {, return]
[), ), ;, }, return, instType, ;, }, ConcreteFunctionType, getConcreteFunction, (, Node, decl, ), {, return, functionFromDeclaration, ., get, (]
[return, functionFromDeclaration, ., get, (, decl, ), ;, }, @, Override, public, ConcreteFunctionType, getConcreteFunction, (, FunctionType, functionType, ), {, return]
[return, functionFromDeclaration, ., get, (, decl, ), ;, }, @, Override, public, ConcreteFunctionType, getConcreteFunction, (, FunctionType, functionType, ), {, return]
[(, decl, ), ;, }, @, Override, public, ConcreteFunctionType, getConcreteFunction, (, FunctionType, functionType, ), {, return, functionFromJSType, ., get, (]
[return, functionFromJSType, ., get, (, functionType, ), ;, }, @, Override, public, ConcreteInstanceType, getConcreteInstance, (, ObjectType, instanceType, ), {, return]
[return, functionFromJSType, ., get, (, functionType, ), ;, }, @, Override, public, ConcreteInstanceType, getConcreteInstance, (, ObjectType, instanceType, ), {, return]
[(, functionType, ), ;, }, @, Override, public, ConcreteInstanceType, getConcreteInstance, (, ObjectType, instanceType, ), {, return, instanceFromJSType, ., get, (]
[public, StaticScope, <, ConcreteType, >, createFunctionScope, (, Node, decl, ,, StaticScope, <, ConcreteType, >, parent, ), {, ConcreteScope, scope, =]
[ConcreteType, >, createFunctionScope, (, Node, decl, ,, StaticScope, <, ConcreteType, >, parent, ), {, ConcreteScope, scope, =, new, ConcreteScope, (]
[(, Node, decl, ,, StaticScope, <, ConcreteType, >, parent, ), {, ConcreteScope, scope, =, new, ConcreteScope, (, (, ConcreteScope, )]
[,, StaticScope, <, ConcreteType, >, parent, ), {, ConcreteScope, scope, =, new, ConcreteScope, (, (, ConcreteScope, ), parent, ), ;]
[,, StaticScope, <, ConcreteType, >, parent, ), {, ConcreteScope, scope, =, new, ConcreteScope, (, (, ConcreteScope, ), parent, ), ;]
[>, parent, ), {, ConcreteScope, scope, =, new, ConcreteScope, (, (, ConcreteScope, ), parent, ), ;, scope, ., declareSlot, (]
[>, parent, ), {, ConcreteScope, scope, =, new, ConcreteScope, (, (, ConcreteScope, ), parent, ), ;, scope, ., declareSlot, (]
[ConcreteScope, scope, =, new, ConcreteScope, (, (, ConcreteScope, ), parent, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., CALL_SLOT_NAME, ,]
[new, ConcreteScope, (, (, ConcreteScope, ), parent, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., CALL_SLOT_NAME, ,, decl, ), ;]
[new, ConcreteScope, (, (, ConcreteScope, ), parent, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., CALL_SLOT_NAME, ,, decl, ), ;]
[ConcreteScope, ), parent, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., CALL_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (]
[ConcreteScope, ), parent, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., CALL_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (]
[;, scope, ., declareSlot, (, ConcreteFunctionType, ., CALL_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,]
[declareSlot, (, ConcreteFunctionType, ., CALL_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,, decl, ), ;]
[declareSlot, (, ConcreteFunctionType, ., CALL_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,, decl, ), ;]
[CALL_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (]
[CALL_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (]
[;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,]
[,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, decl, ), ;, for, (, Node, n, =]
[,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, decl, ), ;, for, (, Node, n, =]
[,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, decl, ), ;, for, (, Node, n, =]
[,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, decl, ), ;, for, (, Node, n, =]
[;, for, (, Node, n, =, decl, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;]
[;, for, (, Node, n, =, decl, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;]
[(, Node, n, =, decl, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, n, !=]
[n, =, decl, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, n, !=, null, ;]
[decl, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, n, !=, null, ;, n, =]
[decl, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, n, !=, null, ;, n, =]
[(, ), ., getFirstChild, (, ), ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {]
[(, ), ., getFirstChild, (, ), ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {]
[(, ), ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, scope, ., declareSlot, (]
[(, ), ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, scope, ., declareSlot, (]
[;, n, =, n, ., getNext, (, ), ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,]
[., getNext, (, ), ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ), ;, }]
[., getNext, (, ), ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ), ;, }]
[), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ), ;, }, scope, ., initForScopeRoot, (]
[), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ), ;, }, scope, ., initForScopeRoot, (]
[getString, (, ), ,, n, ), ;, }, scope, ., initForScopeRoot, (, decl, ., getLastChild, (, ), ), ;, return]
[return, scope, ;, }, @, Override, public, StaticScope, <, ConcreteType, >, createInstanceScope, (, ObjectType, instanceType, ), {, ConcreteScope, parentScope, =]
[Override, public, StaticScope, <, ConcreteType, >, createInstanceScope, (, ObjectType, instanceType, ), {, ConcreteScope, parentScope, =, null, ;, ObjectType, implicitProto, =]
[Override, public, StaticScope, <, ConcreteType, >, createInstanceScope, (, ObjectType, instanceType, ), {, ConcreteScope, parentScope, =, null, ;, ObjectType, implicitProto, =]
[ObjectType, instanceType, ), {, ConcreteScope, parentScope, =, null, ;, ObjectType, implicitProto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (]
[ObjectType, instanceType, ), {, ConcreteScope, parentScope, =, null, ;, ObjectType, implicitProto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (]
[ObjectType, instanceType, ), {, ConcreteScope, parentScope, =, null, ;, ObjectType, implicitProto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (]
[), {, ConcreteScope, parentScope, =, null, ;, ObjectType, implicitProto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, implicitProto, !=]
[ConcreteScope, parentScope, =, null, ;, ObjectType, implicitProto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, implicitProto, !=, null, &&]
[parentScope, =, null, ;, ObjectType, implicitProto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, implicitProto, !=, null, &&, !]
[parentScope, =, null, ;, ObjectType, implicitProto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, implicitProto, !=, null, &&, !]
[(, ), ;, if, (, implicitProto, !=, null, &&, !, implicitProto, ., isUnknownType, (, ), ), {, ConcreteInstanceType, prototype, =]
[;, if, (, implicitProto, !=, null, &&, !, implicitProto, ., isUnknownType, (, ), ), {, ConcreteInstanceType, prototype, =, createConcreteInstance, (]
[implicitProto, !=, null, &&, !, implicitProto, ., isUnknownType, (, ), ), {, ConcreteInstanceType, prototype, =, createConcreteInstance, (, implicitProto, ), ;]
[null, &&, !, implicitProto, ., isUnknownType, (, ), ), {, ConcreteInstanceType, prototype, =, createConcreteInstance, (, implicitProto, ), ;, parentScope, =]
[implicitProto, ., isUnknownType, (, ), ), {, ConcreteInstanceType, prototype, =, createConcreteInstance, (, implicitProto, ), ;, parentScope, =, (, ConcreteScope, )]
[implicitProto, ., isUnknownType, (, ), ), {, ConcreteInstanceType, prototype, =, createConcreteInstance, (, implicitProto, ), ;, parentScope, =, (, ConcreteScope, )]
[createConcreteInstance, (, implicitProto, ), ;, parentScope, =, (, ConcreteScope, ), prototype, ., getScope, (, ), ;, }, ConcreteScope, scope, =]
[), ;, parentScope, =, (, ConcreteScope, ), prototype, ., getScope, (, ), ;, }, ConcreteScope, scope, =, new, ConcreteScope, (]
[., getScope, (, ), ;, }, ConcreteScope, scope, =, new, ConcreteScope, (, parentScope, ), ;, for, (, String, propName, :]
[., getScope, (, ), ;, }, ConcreteScope, scope, =, new, ConcreteScope, (, parentScope, ), ;, for, (, String, propName, :]
[scope, =, new, ConcreteScope, (, parentScope, ), ;, for, (, String, propName, :, instanceType, ., getOwnPropertyNames, (, ), ), {]
[scope, =, new, ConcreteScope, (, parentScope, ), ;, for, (, String, propName, :, instanceType, ., getOwnPropertyNames, (, ), ), {]
[(, parentScope, ), ;, for, (, String, propName, :, instanceType, ., getOwnPropertyNames, (, ), ), {, scope, ., declareSlot, (]
[), ;, for, (, String, propName, :, instanceType, ., getOwnPropertyNames, (, ), ), {, scope, ., declareSlot, (, propName, ,]
[propName, :, instanceType, ., getOwnPropertyNames, (, ), ), {, scope, ., declareSlot, (, propName, ,, null, ), ;, }, return]
[), ;, }, return, scope, ;, }, ConcreteType, createUnionWithSubTypes, (, ConcreteType, type, ), {, Set, <, ConcreteType, >, set, =]
[scope, ;, }, ConcreteType, createUnionWithSubTypes, (, ConcreteType, type, ), {, Set, <, ConcreteType, >, set, =, null, ;, if, (]
[scope, ;, }, ConcreteType, createUnionWithSubTypes, (, ConcreteType, type, ), {, Set, <, ConcreteType, >, set, =, null, ;, if, (]
[type, ), {, Set, <, ConcreteType, >, set, =, null, ;, if, (, type, ., isInstance, (, ), ), {]
[{, Set, <, ConcreteType, >, set, =, null, ;, if, (, type, ., isInstance, (, ), ), {, set, =]
[<, ConcreteType, >, set, =, null, ;, if, (, type, ., isInstance, (, ), ), {, set, =, getSubTypes, (]
[<, ConcreteType, >, set, =, null, ;, if, (, type, ., isInstance, (, ), ), {, set, =, getSubTypes, (]
[type, ., isInstance, (, ), ), {, set, =, getSubTypes, (, type, ., toInstance, (, ), ), ;, }, return]
[type, ., isInstance, (, ), ), {, set, =, getSubTypes, (, type, ., toInstance, (, ), ), ;, }, return]
[type, ., isInstance, (, ), ), {, set, =, getSubTypes, (, type, ., toInstance, (, ), ), ;, }, return]
[), ), {, set, =, getSubTypes, (, type, ., toInstance, (, ), ), ;, }, return, ConcreteType, ., createForTypes, (]
[getSubTypes, (, type, ., toInstance, (, ), ), ;, }, return, ConcreteType, ., createForTypes, (, set, ), ., unionWith, (]
[., unionWith, (, type, ), ;, }, private, Set, <, ConcreteType, >, getSubTypes, (, ConcreteInstanceType, type, ), {, if, (]
[., unionWith, (, type, ), ;, }, private, Set, <, ConcreteType, >, getSubTypes, (, ConcreteInstanceType, type, ), {, if, (]
[., unionWith, (, type, ), ;, }, private, Set, <, ConcreteType, >, getSubTypes, (, ConcreteInstanceType, type, ), {, if, (]
[}, private, Set, <, ConcreteType, >, getSubTypes, (, ConcreteInstanceType, type, ), {, if, (, type, ., getConstructorType, (, ), ==]
[ConcreteType, >, getSubTypes, (, ConcreteInstanceType, type, ), {, if, (, type, ., getConstructorType, (, ), ==, null, ), {, return]
[(, type, ., getConstructorType, (, ), ==, null, ), {, return, null, ;, }, Set, <, ConcreteType, >, set, =]
[(, type, ., getConstructorType, (, ), ==, null, ), {, return, null, ;, }, Set, <, ConcreteType, >, set, =]
[==, null, ), {, return, null, ;, }, Set, <, ConcreteType, >, set, =, Sets, ., newHashSet, (, ), ;]
[), {, return, null, ;, }, Set, <, ConcreteType, >, set, =, Sets, ., newHashSet, (, ), ;, getSubTypes, (]
[), {, return, null, ;, }, Set, <, ConcreteType, >, set, =, Sets, ., newHashSet, (, ), ;, getSubTypes, (]
[), {, return, null, ;, }, Set, <, ConcreteType, >, set, =, Sets, ., newHashSet, (, ), ;, getSubTypes, (]
[set, =, Sets, ., newHashSet, (, ), ;, getSubTypes, (, type, ., getConstructorType, (, ), ., getJSType, (, ), ,]
[newHashSet, (, ), ;, getSubTypes, (, type, ., getConstructorType, (, ), ., getJSType, (, ), ,, set, ), ;, return]
[return, set, ;, }, private, boolean, getSubTypes, (, FunctionType, type, ,, Set, <, ConcreteType, >, set, ), {, if, (]
[return, set, ;, }, private, boolean, getSubTypes, (, FunctionType, type, ,, Set, <, ConcreteType, >, set, ), {, if, (]
[return, set, ;, }, private, boolean, getSubTypes, (, FunctionType, type, ,, Set, <, ConcreteType, >, set, ), {, if, (]
[getSubTypes, (, FunctionType, type, ,, Set, <, ConcreteType, >, set, ), {, if, (, type, ., getSubTypes, (, ), !=]
[>, set, ), {, if, (, type, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, sub, :]
[>, set, ), {, if, (, type, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, sub, :]
[), !=, null, ), {, for, (, FunctionType, sub, :, type, ., getSubTypes, (, ), ), {, ConcreteType, concrete, =]
[null, ), {, for, (, FunctionType, sub, :, type, ., getSubTypes, (, ), ), {, ConcreteType, concrete, =, createType, (]
[FunctionType, sub, :, type, ., getSubTypes, (, ), ), {, ConcreteType, concrete, =, createType, (, sub, ), ;, if, (]
[FunctionType, sub, :, type, ., getSubTypes, (, ), ), {, ConcreteType, concrete, =, createType, (, sub, ), ;, if, (]
[FunctionType, sub, :, type, ., getSubTypes, (, ), ), {, ConcreteType, concrete, =, createType, (, sub, ), ;, if, (]
[(, ), ), {, ConcreteType, concrete, =, createType, (, sub, ), ;, if, (, concrete, ., isFunction, (, ), &&]
[(, ), ), {, ConcreteType, concrete, =, createType, (, sub, ), ;, if, (, concrete, ., isFunction, (, ), &&]
[(, ), ), {, ConcreteType, concrete, =, createType, (, sub, ), ;, if, (, concrete, ., isFunction, (, ), &&]
[(, ), ), {, ConcreteType, concrete, =, createType, (, sub, ), ;, if, (, concrete, ., isFunction, (, ), &&]
[), ;, if, (, concrete, ., isFunction, (, ), &&, concrete, ., toFunction, (, ), ., getInstanceType, (, ), !=]
[(, concrete, ., isFunction, (, ), &&, concrete, ., toFunction, (, ), ., getInstanceType, (, ), !=, null, ), {]
[., isFunction, (, ), &&, concrete, ., toFunction, (, ), ., getInstanceType, (, ), !=, null, ), {, concrete, =]
[., isFunction, (, ), &&, concrete, ., toFunction, (, ), ., getInstanceType, (, ), !=, null, ), {, concrete, =]
[., isFunction, (, ), &&, concrete, ., toFunction, (, ), ., getInstanceType, (, ), !=, null, ), {, concrete, =]
[(, ), !=, null, ), {, concrete, =, concrete, ., toFunction, (, ), ., getInstanceType, (, ), ;, if, (]
[), !=, null, ), {, concrete, =, concrete, ., toFunction, (, ), ., getInstanceType, (, ), ;, if, (, !]
[), !=, null, ), {, concrete, =, concrete, ., toFunction, (, ), ., getInstanceType, (, ), ;, if, (, !]
[{, concrete, =, concrete, ., toFunction, (, ), ., getInstanceType, (, ), ;, if, (, !, set, ., contains, (]
[., toFunction, (, ), ., getInstanceType, (, ), ;, if, (, !, set, ., contains, (, concrete, ), ), {]
[., toFunction, (, ), ., getInstanceType, (, ), ;, if, (, !, set, ., contains, (, concrete, ), ), {]
[., getInstanceType, (, ), ;, if, (, !, set, ., contains, (, concrete, ), ), {, set, ., add, (]
[if, (, !, set, ., contains, (, concrete, ), ), {, set, ., add, (, concrete, ), ;, if, (]
[(, !, set, ., contains, (, concrete, ), ), {, set, ., add, (, concrete, ), ;, if, (, !]
[set, ., contains, (, concrete, ), ), {, set, ., add, (, concrete, ), ;, if, (, !, getSubTypes, (]
[contains, (, concrete, ), ), {, set, ., add, (, concrete, ), ;, if, (, !, getSubTypes, (, sub, ,]
[{, set, ., add, (, concrete, ), ;, if, (, !, getSubTypes, (, sub, ,, set, ), ), {, return]
[;, if, (, !, getSubTypes, (, sub, ,, set, ), ), {, return, false, ;, }, }, }, else, {]
[;, if, (, !, getSubTypes, (, sub, ,, set, ), ), {, return, false, ;, }, }, }, else, {]
[sub, ,, set, ), ), {, return, false, ;, }, }, }, else, {, set, ., clear, (, ), ;]
[sub, ,, set, ), ), {, return, false, ;, }, }, }, else, {, set, ., clear, (, ), ;]
[), {, return, false, ;, }, }, }, else, {, set, ., clear, (, ), ;, set, ., add, (]
[), {, return, false, ;, }, }, }, else, {, set, ., clear, (, ), ;, set, ., add, (]
[}, }, else, {, set, ., clear, (, ), ;, set, ., add, (, ConcreteType, ., ALL, ), ;, return]
[clear, (, ), ;, set, ., add, (, ConcreteType, ., ALL, ), ;, return, false, ;, }, }, }, return]
[ConcreteType, concrete, ;, final, JSType, jstype, ;, final, int, hashcode, ;, ConcreteJSTypePair, (, ConcreteType, concrete, ,, JSType, jstype, ), {]
[ConcreteType, concrete, ;, final, JSType, jstype, ;, final, int, hashcode, ;, ConcreteJSTypePair, (, ConcreteType, concrete, ,, JSType, jstype, ), {]
[JSType, jstype, ;, final, int, hashcode, ;, ConcreteJSTypePair, (, ConcreteType, concrete, ,, JSType, jstype, ), {, this, ., concrete, =]
[;, final, int, hashcode, ;, ConcreteJSTypePair, (, ConcreteType, concrete, ,, JSType, jstype, ), {, this, ., concrete, =, concrete, ;]
[;, final, int, hashcode, ;, ConcreteJSTypePair, (, ConcreteType, concrete, ,, JSType, jstype, ), {, this, ., concrete, =, concrete, ;]
[;, ConcreteJSTypePair, (, ConcreteType, concrete, ,, JSType, jstype, ), {, this, ., concrete, =, concrete, ;, this, ., jstype, =]
[(, ConcreteType, concrete, ,, JSType, jstype, ), {, this, ., concrete, =, concrete, ;, this, ., jstype, =, jstype, ;]
[(, ConcreteType, concrete, ,, JSType, jstype, ), {, this, ., concrete, =, concrete, ;, this, ., jstype, =, jstype, ;]
[JSType, jstype, ), {, this, ., concrete, =, concrete, ;, this, ., jstype, =, jstype, ;, this, ., hashcode, =]
[JSType, jstype, ), {, this, ., concrete, =, concrete, ;, this, ., jstype, =, jstype, ;, this, ., hashcode, =]
[JSType, jstype, ), {, this, ., concrete, =, concrete, ;, this, ., jstype, =, jstype, ;, this, ., hashcode, =]
[concrete, =, concrete, ;, this, ., jstype, =, jstype, ;, this, ., hashcode, =, concrete, ., hashCode, (, ), +]
[hashcode, =, concrete, ., hashCode, (, ), +, getJSTypeHashCode, (, ), ;, }, private, int, getJSTypeHashCode, (, ), {, return]
[hashcode, =, concrete, ., hashCode, (, ), +, getJSTypeHashCode, (, ), ;, }, private, int, getJSTypeHashCode, (, ), {, return]
[hashcode, =, concrete, ., hashCode, (, ), +, getJSTypeHashCode, (, ), ;, }, private, int, getJSTypeHashCode, (, ), {, return]
[concrete, ., hashCode, (, ), +, getJSTypeHashCode, (, ), ;, }, private, int, getJSTypeHashCode, (, ), {, return, jstype, !=]
[hashCode, (, ), +, getJSTypeHashCode, (, ), ;, }, private, int, getJSTypeHashCode, (, ), {, return, jstype, !=, null, ?]
[hashCode, (, ), +, getJSTypeHashCode, (, ), ;, }, private, int, getJSTypeHashCode, (, ), {, return, jstype, !=, null, ?]
[), ;, }, private, int, getJSTypeHashCode, (, ), {, return, jstype, !=, null, ?, jstype, ., hashCode, (, ), :]
[?, jstype, ., hashCode, (, ), :, 0, ;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (]
[?, jstype, ., hashCode, (, ), :, 0, ;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (]
[?, jstype, ., hashCode, (, ), :, 0, ;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (]
[., hashCode, (, ), :, 0, ;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (, jsType, ==]
[(, ), :, 0, ;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (, jsType, ==, null, ||]
[(, ), :, 0, ;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (, jsType, ==, null, ||]
[:, 0, ;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (, jsType, ==, null, ||, jstype, ==]
[private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (, jsType, ==, null, ||, jstype, ==, null, ), {, return]
[private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (, jsType, ==, null, ||, jstype, ==, null, ), {, return]
[equalsJSType, (, JSType, jsType, ), {, if, (, jsType, ==, null, ||, jstype, ==, null, ), {, return, jstype, ==]
[if, (, jsType, ==, null, ||, jstype, ==, null, ), {, return, jstype, ==, jsType, ;, }, else, {, return]
[if, (, jsType, ==, null, ||, jstype, ==, null, ), {, return, jstype, ==, jsType, ;, }, else, {, return]
[null, ||, jstype, ==, null, ), {, return, jstype, ==, jsType, ;, }, else, {, return, jsType, ., equals, (]
[null, ||, jstype, ==, null, ), {, return, jstype, ==, jsType, ;, }, else, {, return, jsType, ., equals, (]
[(, this, ., jstype, ), ;, }, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (]
[(, this, ., jstype, ), ;, }, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (]
[@, Override, public, boolean, equals, (, Object, o, ), {, if, (, o, instanceof, ConcreteJSTypePair, ), {, ConcreteJSTypePair, pair, =]
[boolean, equals, (, Object, o, ), {, if, (, o, instanceof, ConcreteJSTypePair, ), {, ConcreteJSTypePair, pair, =, (, ConcreteJSTypePair, )]
[o, ), {, if, (, o, instanceof, ConcreteJSTypePair, ), {, ConcreteJSTypePair, pair, =, (, ConcreteJSTypePair, ), o, ;, if, (]
[), {, if, (, o, instanceof, ConcreteJSTypePair, ), {, ConcreteJSTypePair, pair, =, (, ConcreteJSTypePair, ), o, ;, if, (, (]
[), {, if, (, o, instanceof, ConcreteJSTypePair, ), {, ConcreteJSTypePair, pair, =, (, ConcreteJSTypePair, ), o, ;, if, (, (]
[), {, if, (, o, instanceof, ConcreteJSTypePair, ), {, ConcreteJSTypePair, pair, =, (, ConcreteJSTypePair, ), o, ;, if, (, (]
[), {, if, (, o, instanceof, ConcreteJSTypePair, ), {, ConcreteJSTypePair, pair, =, (, ConcreteJSTypePair, ), o, ;, if, (, (]
[ConcreteJSTypePair, ), {, ConcreteJSTypePair, pair, =, (, ConcreteJSTypePair, ), o, ;, if, (, (, pair, ., concrete, ., equals, (]
[ConcreteJSTypePair, ), {, ConcreteJSTypePair, pair, =, (, ConcreteJSTypePair, ), o, ;, if, (, (, pair, ., concrete, ., equals, (]
[=, (, ConcreteJSTypePair, ), o, ;, if, (, (, pair, ., concrete, ., equals, (, this, ., concrete, ), &&]
[ConcreteJSTypePair, ), o, ;, if, (, (, pair, ., concrete, ., equals, (, this, ., concrete, ), &&, equalsJSType, (]
[ConcreteJSTypePair, ), o, ;, if, (, (, pair, ., concrete, ., equals, (, this, ., concrete, ), &&, equalsJSType, (]
[., concrete, ., equals, (, this, ., concrete, ), &&, equalsJSType, (, pair, ., jstype, ), ), ), {, return]
[this, ., concrete, ), &&, equalsJSType, (, pair, ., jstype, ), ), ), {, return, true, ;, }, }, return]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
