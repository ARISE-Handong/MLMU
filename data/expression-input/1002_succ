[), {, int, i, =, 2, ;, while, (, index, +, i, <, input, ., length, (, ), &&, input]
[&&, input, ., charAt, (, index, +, 1, ), ==, 'u', ), {, int, i, =, 2, ;, while, (]
[&&, index, +, 1, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, 1, ), ==]
[==, '\\', &&, index, +, 1, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, 1]
[., charAt, (, index, ), ==, '\\', &&, index, +, 1, <, input, ., length, (, ), &&, input, .]
[), ==, '\\', &&, index, +, 1, <, input, ., length, (, ), &&, input, ., charAt, (, index, +]
[&&, index, +, 1, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, 1, ), ==]
[&&, input, ., charAt, (, index, +, 1, ), ==, 'u', ), {, int, i, =, 2, ;, while, (]
[<, input, ., length, (, ), &&, input, ., charAt, (, index, +, 1, ), ==, 'u', ), {, int]
[+, 1, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, 1, ), ==, 'u', )]
[<, input, ., length, (, ), &&, input, ., charAt, (, index, +, 1, ), ==, 'u', ), {, int]
[&&, input, ., charAt, (, index, +, 1, ), ==, 'u', ), {, int, i, =, 2, ;, while, (]
[., length, (, ), &&, input, ., charAt, (, index, +, 1, ), ==, 'u', ), {, int, i, =]
[), {, int, i, =, 2, ;, while, (, index, +, i, <, input, ., length, (, ), &&, input]
[==, 'u', ), {, int, i, =, 2, ;, while, (, index, +, i, <, input, ., length, (, )]
[., charAt, (, index, +, 1, ), ==, 'u', ), {, int, i, =, 2, ;, while, (, index, +]
[), ==, 'u', ), {, int, i, =, 2, ;, while, (, index, +, i, <, input, ., length, (]
[+, 1, ), ==, 'u', ), {, int, i, =, 2, ;, while, (, index, +, i, <, input, .]
[), ==, 'u', ), {, int, i, =, 2, ;, while, (, index, +, i, <, input, ., length, (]
[), {, int, i, =, 2, ;, while, (, index, +, i, <, input, ., length, (, ), &&, input]
[;, while, (, index, +, i, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, i]
[), {, i, ++, ;, }, if, (, index, +, i, <, input, ., length, (, ), &&, input, .]
[&&, input, ., charAt, (, index, +, i, ), ==, 'u', ), {, i, ++, ;, }, if, (, index]
[<, input, ., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==, 'u', ), {, i]
[+, i, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==, 'u', )]
[<, input, ., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==, 'u', ), {, i]
[&&, input, ., charAt, (, index, +, i, ), ==, 'u', ), {, i, ++, ;, }, if, (, index]
[., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==, 'u', ), {, i, ++, ;]
[), {, i, ++, ;, }, if, (, index, +, i, <, input, ., length, (, ), &&, input, .]
[==, 'u', ), {, i, ++, ;, }, if, (, index, +, i, <, input, ., length, (, ), &&]
[., charAt, (, index, +, i, ), ==, 'u', ), {, i, ++, ;, }, if, (, index, +, i]
[), ==, 'u', ), {, i, ++, ;, }, if, (, index, +, i, <, input, ., length, (, )]
[+, i, ), ==, 'u', ), {, i, ++, ;, }, if, (, index, +, i, <, input, ., length]
[), ==, 'u', ), {, i, ++, ;, }, if, (, index, +, i, <, input, ., length, (, )]
[), {, i, ++, ;, }, if, (, index, +, i, <, input, ., length, (, ), &&, input, .]
[;, }, if, (, index, +, i, <, input, ., length, (, ), &&, input, ., charAt, (, index, +]
[++, ;, }, if, (, index, +, i, <, input, ., length, (, ), &&, input, ., charAt, (, index]
[), {, i, ++, ;, }, if, (, index, +, i, +, 4, <=, input, ., length, (, ), )]
[&&, input, ., charAt, (, index, +, i, ), ==, '+', ), {, i, ++, ;, }, if, (, index]
[<, input, ., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==, '+', ), {, i]
[+, i, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==, '+', )]
[<, input, ., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==, '+', ), {, i]
[&&, input, ., charAt, (, index, +, i, ), ==, '+', ), {, i, ++, ;, }, if, (, index]
[., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==, '+', ), {, i, ++, ;]
[), {, i, ++, ;, }, if, (, index, +, i, +, 4, <=, input, ., length, (, ), )]
[==, '+', ), {, i, ++, ;, }, if, (, index, +, i, +, 4, <=, input, ., length, (]
[., charAt, (, index, +, i, ), ==, '+', ), {, i, ++, ;, }, if, (, index, +, i]
[), ==, '+', ), {, i, ++, ;, }, if, (, index, +, i, +, 4, <=, input, ., length]
[+, i, ), ==, '+', ), {, i, ++, ;, }, if, (, index, +, i, +, 4, <=, input]
[), ==, '+', ), {, i, ++, ;, }, if, (, index, +, i, +, 4, <=, input, ., length]
[), {, i, ++, ;, }, if, (, index, +, i, +, 4, <=, input, ., length, (, ), )]
[;, }, if, (, index, +, i, +, 4, <=, input, ., length, (, ), ), {, final, CharSequence, unicode]
[++, ;, }, if, (, index, +, i, +, 4, <=, input, ., length, (, ), ), {, final, CharSequence]
[), {, final, CharSequence, unicode, =, input, ., subSequence, (, index, +, i, ,, index, +, i, +, 4, )]
[<=, input, ., length, (, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (, index, +, i, ,]
[+, 4, <=, input, ., length, (, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (, index, +]
[+, i, +, 4, <=, input, ., length, (, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (]
[+, 4, <=, input, ., length, (, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (, index, +]
[<=, input, ., length, (, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (, index, +, i, ,]
[), {, final, CharSequence, unicode, =, input, ., subSequence, (, index, +, i, ,, index, +, i, +, 4, )]
[., length, (, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (, index, +, i, ,, index, +]
[;, try, {, final, int, value, =, Integer, ., parseInt, (, unicode, ., toString, (, ), ,, 16, ), ;]
[., subSequence, (, index, +, i, ,, index, +, i, +, 4, ), ;, try, {, final, int, value, =]
[,, index, +, i, +, 4, ), ;, try, {, final, int, value, =, Integer, ., parseInt, (, unicode, .]
[+, i, ,, index, +, i, +, 4, ), ;, try, {, final, int, value, =, Integer, ., parseInt, (]
[,, index, +, i, +, 4, ), ;, try, {, final, int, value, =, Integer, ., parseInt, (, unicode, .]
[), ;, try, {, final, int, value, =, Integer, ., parseInt, (, unicode, ., toString, (, ), ,, 16, )]
[+, 4, ), ;, try, {, final, int, value, =, Integer, ., parseInt, (, unicode, ., toString, (, ), ,]
[+, i, +, 4, ), ;, try, {, final, int, value, =, Integer, ., parseInt, (, unicode, ., toString, (]
[+, 4, ), ;, try, {, final, int, value, =, Integer, ., parseInt, (, unicode, ., toString, (, ), ,]
[), ;, try, {, final, int, value, =, Integer, ., parseInt, (, unicode, ., toString, (, ), ,, 16, )]
[;, out, ., write, (, (, char, ), value, ), ;, }, catch, (, final, NumberFormatException, nfe, ), {, throw]
[., parseInt, (, unicode, ., toString, (, ), ,, 16, ), ;, out, ., write, (, (, char, ), value]
[,, 16, ), ;, out, ., write, (, (, char, ), value, ), ;, }, catch, (, final, NumberFormatException, nfe]
[., toString, (, ), ,, 16, ), ;, out, ., write, (, (, char, ), value, ), ;, }, catch]
[), ;, out, ., write, (, (, char, ), value, ), ;, }, catch, (, final, NumberFormatException, nfe, ), {]
[;, }, catch, (, final, NumberFormatException, nfe, ), {, throw, new, IllegalArgumentException, (, "Unable to parse unicode value: ", +, unicode, ,, nfe, ), ;]
[., write, (, (, char, ), value, ), ;, }, catch, (, final, NumberFormatException, nfe, ), {, throw, new, IllegalArgumentException]
[), ;, }, catch, (, final, NumberFormatException, nfe, ), {, throw, new, IllegalArgumentException, (, "Unable to parse unicode value: ", +, unicode, ,, nfe, )]
[), ;, }, catch, (, final, NumberFormatException, nfe, ), {, throw, new, IllegalArgumentException, (, "Unable to parse unicode value: ", +, unicode, ,, nfe, )]
[;, }, return, i, +, 4, ;, }, else, {, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '", +, input, ., subSequence, (]
[,, nfe, ), ;, }, return, i, +, 4, ;, }, else, {, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '", +, input]
[+, unicode, ,, nfe, ), ;, }, return, i, +, 4, ;, }, else, {, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '"]
[,, nfe, ), ;, }, return, i, +, 4, ;, }, else, {, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '", +, input]
[), ;, }, return, i, +, 4, ;, }, else, {, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '", +, input, ., subSequence]
[;, }, else, {, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '", +, input, ., subSequence, (, index, ,, input, ., length, (]
[+, 4, ;, }, else, {, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '", +, input, ., subSequence, (, index, ,, input, .]
[;, }, else, {, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '", +, input, ., subSequence, (, index, ,, input, ., length, (]
[;, }, }, return, 0, ;, }, }]
[), ;, }, }, return, 0, ;, }, }]
[+, "' due to end of CharSequence", ), ;, }, }, return, 0, ;, }, }]
[+, input, ., subSequence, (, index, ,, input, ., length, (, ), ), +, "' due to end of CharSequence", ), ;, }, }, return]
[+, "' due to end of CharSequence", ), ;, }, }, return, 0, ;, }, }]
[., subSequence, (, index, ,, input, ., length, (, ), ), +, "' due to end of CharSequence", ), ;, }, }, return, 0, ;]
[,, input, ., length, (, ), ), +, "' due to end of CharSequence", ), ;, }, }, return, 0, ;, }, }]
[), +, "' due to end of CharSequence", ), ;, }, }, return, 0, ;, }, }]
[., length, (, ), ), +, "' due to end of CharSequence", ), ;, }, }, return, 0, ;, }, }]
[), ;, }, }, return, 0, ;, }, }]
[;, }, }]
