[,, final, double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (]
[double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, name, ,]
[,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, name, ,, minStep, ,]
[double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, name, ,, minStep, ,, maxStep, ,]
[,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, name, ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,]
[scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, name, ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;]
[scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, name, ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;]
[scalRelativeTolerance, ), {, super, (, name, ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, this, ., fsal, =]
[{, super, (, name, ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;]
[{, super, (, name, ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;]
[,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =]
[,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;]
[,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;]
[,, scalRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =]
[), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;]
[), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;]
[fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;, this, ., b, =]
[fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;]
[fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;]
[c, =, c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =]
[c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;]
[this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =]
[this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =]
[., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -]
[=, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /]
[., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;]
[=, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (]
[this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;]
[prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (]
[;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;]
[=, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (]
[,, final, double, maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (]
[double, maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, name, ,]
[,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, name, ,, minStep, ,]
[double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, name, ,, minStep, ,, maxStep, ,]
[], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, name, ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,]
[final, double, [, ], vecRelativeTolerance, ), {, super, (, name, ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;]
[final, double, [, ], vecRelativeTolerance, ), {, super, (, name, ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;]
[vecRelativeTolerance, ), {, super, (, name, ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, this, ., fsal, =]
[{, super, (, name, ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;]
[{, super, (, name, ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;]
[,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =]
[,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;]
[,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;]
[,, vecRelativeTolerance, ), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =]
[), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;]
[), ;, this, ., fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;]
[fsal, =, fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;, this, ., b, =]
[fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;]
[fsal, ;, this, ., c, =, c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;]
[c, =, c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =]
[c, ;, this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;]
[this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =]
[this, ., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =]
[., a, =, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -]
[=, a, ;, this, ., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /]
[., b, =, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;]
[=, b, ;, this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (]
[this, ., prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;]
[prototype, =, prototype, ;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (]
[;, exp, =, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;]
[=, -, 1.0, /, getOrder, (, ), ;, setSafety, (, 0.9, ), ;, setMinReduction, (, 0.2, ), ;, setMaxGrowth, (]
[setMaxGrowth, (, 10.0, ), ;, }, public, abstract, int, getOrder, (, ), ;, public, double, getSafety, (, ), {, return]
[;, public, double, getSafety, (, ), {, return, safety, ;, }, public, void, setSafety, (, final, double, safety, ), {]
[;, public, double, getSafety, (, ), {, return, safety, ;, }, public, void, setSafety, (, final, double, safety, ), {]
[(, ), {, return, safety, ;, }, public, void, setSafety, (, final, double, safety, ), {, this, ., safety, =]
[void, integrate, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, NumberIsTooSmallException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NoBracketingException, {]
[(, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, NumberIsTooSmallException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NoBracketingException, {, sanityChecks, (]
[ExpandableStatefulODE, equations, ,, final, double, t, ), throws, NumberIsTooSmallException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NoBracketingException, {, sanityChecks, (, equations, ,]
[final, double, t, ), throws, NumberIsTooSmallException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NoBracketingException, {, sanityChecks, (, equations, ,, t, ), ;]
[t, ), throws, NumberIsTooSmallException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NoBracketingException, {, sanityChecks, (, equations, ,, t, ), ;, setEquations, (]
[MaxCountExceededException, ,, NoBracketingException, {, sanityChecks, (, equations, ,, t, ), ;, setEquations, (, equations, ), ;, final, boolean, forward, =]
[MaxCountExceededException, ,, NoBracketingException, {, sanityChecks, (, equations, ,, t, ), ;, setEquations, (, equations, ), ;, final, boolean, forward, =]
[NoBracketingException, {, sanityChecks, (, equations, ,, t, ), ;, setEquations, (, equations, ), ;, final, boolean, forward, =, t, >]
[NoBracketingException, {, sanityChecks, (, equations, ,, t, ), ;, setEquations, (, equations, ), ;, final, boolean, forward, =, t, >]
[), ;, final, boolean, forward, =, t, >, equations, ., getTime, (, ), ;, final, double, [, ], y0, =]
[), ;, final, boolean, forward, =, t, >, equations, ., getTime, (, ), ;, final, double, [, ], y0, =]
[), ;, final, double, [, ], y0, =, equations, ., getCompleteState, (, ), ;, final, double, [, ], y, =]
[), ;, final, double, [, ], y0, =, equations, ., getCompleteState, (, ), ;, final, double, [, ], y, =]
[getCompleteState, (, ), ;, final, double, [, ], y, =, y0, ., clone, (, ), ;, final, int, stages, =]
[getCompleteState, (, ), ;, final, double, [, ], y, =, y0, ., clone, (, ), ;, final, int, stages, =]
[getCompleteState, (, ), ;, final, double, [, ], y, =, y0, ., clone, (, ), ;, final, int, stages, =]
[final, double, [, ], y, =, y0, ., clone, (, ), ;, final, int, stages, =, c, ., length, +]
[), ;, final, int, stages, =, c, ., length, +, 1, ;, final, double, [, ], [, ], yDotK, =]
[int, stages, =, c, ., length, +, 1, ;, final, double, [, ], [, ], yDotK, =, new, double, []
[c, ., length, +, 1, ;, final, double, [, ], [, ], yDotK, =, new, double, [, stages, ], []
[c, ., length, +, 1, ;, final, double, [, ], [, ], yDotK, =, new, double, [, stages, ], []
[], yDotK, =, new, double, [, stages, ], [, y, ., length, ], ;, final, double, [, ], yTmp, =]
[], yDotK, =, new, double, [, stages, ], [, y, ., length, ], ;, final, double, [, ], yTmp, =]
[], ;, final, double, [, ], yTmp, =, y0, ., clone, (, ), ;, final, double, [, ], yDotTmp, =]
[double, [, ], yTmp, =, y0, ., clone, (, ), ;, final, double, [, ], yDotTmp, =, new, double, []
[double, [, ], yTmp, =, y0, ., clone, (, ), ;, final, double, [, ], yDotTmp, =, new, double, []
[), ;, final, double, [, ], yDotTmp, =, new, double, [, y, ., length, ], ;, final, RungeKuttaStepInterpolator, interpolator, =]
[double, [, ], yDotTmp, =, new, double, [, y, ., length, ], ;, final, RungeKuttaStepInterpolator, interpolator, =, (, RungeKuttaStepInterpolator, )]
[double, [, ], yDotTmp, =, new, double, [, y, ., length, ], ;, final, RungeKuttaStepInterpolator, interpolator, =, (, RungeKuttaStepInterpolator, )]
[double, [, y, ., length, ], ;, final, RungeKuttaStepInterpolator, interpolator, =, (, RungeKuttaStepInterpolator, ), prototype, ., copy, (, ), ;]
[double, [, y, ., length, ], ;, final, RungeKuttaStepInterpolator, interpolator, =, (, RungeKuttaStepInterpolator, ), prototype, ., copy, (, ), ;]
[length, ], ;, final, RungeKuttaStepInterpolator, interpolator, =, (, RungeKuttaStepInterpolator, ), prototype, ., copy, (, ), ;, interpolator, ., reinitialize, (]
[;, final, RungeKuttaStepInterpolator, interpolator, =, (, RungeKuttaStepInterpolator, ), prototype, ., copy, (, ), ;, interpolator, ., reinitialize, (, this, ,]
[RungeKuttaStepInterpolator, interpolator, =, (, RungeKuttaStepInterpolator, ), prototype, ., copy, (, ), ;, interpolator, ., reinitialize, (, this, ,, yTmp, ,]
[=, (, RungeKuttaStepInterpolator, ), prototype, ., copy, (, ), ;, interpolator, ., reinitialize, (, this, ,, yTmp, ,, yDotK, ,]
[RungeKuttaStepInterpolator, ), prototype, ., copy, (, ), ;, interpolator, ., reinitialize, (, this, ,, yTmp, ,, yDotK, ,, forward, ,]
[RungeKuttaStepInterpolator, ), prototype, ., copy, (, ), ;, interpolator, ., reinitialize, (, this, ,, yTmp, ,, yDotK, ,, forward, ,]
[), ;, interpolator, ., reinitialize, (, this, ,, yTmp, ,, yDotK, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,]
[), ;, interpolator, ., reinitialize, (, this, ,, yTmp, ,, yDotK, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,]
[,, yTmp, ,, yDotK, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;]
[,, yTmp, ,, yDotK, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;]
[,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (]
[,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (]
[), ,, equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;]
[equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =]
[equations, ., getSecondaryMappers, (, ), ), ;, interpolator, ., storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =]
[storeTime, (, equations, ., getTime, (, ), ), ;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =]
[(, ), ), ;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, boolean, firstTime, =]
[), ;, stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, boolean, firstTime, =, true, ;]
[stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, boolean, firstTime, =, true, ;, initIntegration, (]
[stepStart, =, equations, ., getTime, (, ), ;, double, hNew, =, 0, ;, boolean, firstTime, =, true, ;, initIntegration, (]
[), ;, double, hNew, =, 0, ;, boolean, firstTime, =, true, ;, initIntegration, (, equations, ., getTime, (, ), ,]
[double, hNew, =, 0, ;, boolean, firstTime, =, true, ;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,]
[0, ;, boolean, firstTime, =, true, ;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, ), ;]
[boolean, firstTime, =, true, ;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, ), ;, isLastStep, =]
[;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, ), ;, isLastStep, =, false, ;, do, {]
[;, initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, ), ;, isLastStep, =, false, ;, do, {]
[y0, ,, t, ), ;, isLastStep, =, false, ;, do, {, interpolator, ., shift, (, ), ;, double, error, =]
[;, isLastStep, =, false, ;, do, {, interpolator, ., shift, (, ), ;, double, error, =, 10, ;, while, (]
[;, isLastStep, =, false, ;, do, {, interpolator, ., shift, (, ), ;, double, error, =, 10, ;, while, (]
[=, false, ;, do, {, interpolator, ., shift, (, ), ;, double, error, =, 10, ;, while, (, error, >=]
[interpolator, ., shift, (, ), ;, double, error, =, 10, ;, while, (, error, >=, 1.0, ), {, if, (]
[interpolator, ., shift, (, ), ;, double, error, =, 10, ;, while, (, error, >=, 1.0, ), {, if, (]
[shift, (, ), ;, double, error, =, 10, ;, while, (, error, >=, 1.0, ), {, if, (, firstTime, ||]
[(, ), ;, double, error, =, 10, ;, while, (, error, >=, 1.0, ), {, if, (, firstTime, ||, !]
[double, error, =, 10, ;, while, (, error, >=, 1.0, ), {, if, (, firstTime, ||, !, fsal, ), {]
[=, 10, ;, while, (, error, >=, 1.0, ), {, if, (, firstTime, ||, !, fsal, ), {, computeDerivatives, (]
[;, while, (, error, >=, 1.0, ), {, if, (, firstTime, ||, !, fsal, ), {, computeDerivatives, (, stepStart, ,]
[(, error, >=, 1.0, ), {, if, (, firstTime, ||, !, fsal, ), {, computeDerivatives, (, stepStart, ,, y, ,]
[(, error, >=, 1.0, ), {, if, (, firstTime, ||, !, fsal, ), {, computeDerivatives, (, stepStart, ,, y, ,]
[>=, 1.0, ), {, if, (, firstTime, ||, !, fsal, ), {, computeDerivatives, (, stepStart, ,, y, ,, yDotK, []
[||, !, fsal, ), {, computeDerivatives, (, stepStart, ,, y, ,, yDotK, [, 0, ], ), ;, }, if, (]
[y, ,, yDotK, [, 0, ], ), ;, }, if, (, firstTime, ), {, final, double, [, ], scale, =]
[[, 0, ], ), ;, }, if, (, firstTime, ), {, final, double, [, ], scale, =, new, double, []
[}, if, (, firstTime, ), {, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, if, (]
[}, if, (, firstTime, ), {, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, if, (]
[(, firstTime, ), {, final, double, [, ], scale, =, new, double, [, mainSetDimension, ], ;, if, (, vecAbsoluteTolerance, ==]
[scale, =, new, double, [, mainSetDimension, ], ;, if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =]
[new, double, [, mainSetDimension, ], ;, if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;]
[new, double, [, mainSetDimension, ], ;, if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;]
[[, mainSetDimension, ], ;, if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;, i, <]
[[, mainSetDimension, ], ;, if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;]
[(, vecAbsoluteTolerance, ==, null, ), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++]
[null, ), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {]
[null, ), {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {]
[{, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, scale, []
[int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =]
[int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =]
[=, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =, scalAbsoluteTolerance, +]
[=, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =, scalAbsoluteTolerance, +]
[;, i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *]
[;, i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *]
[., length, ;, ++, i, ), {, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, FastMath, ., abs, (]
[., length, ;, ++, i, ), {, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, FastMath, ., abs, (]
[;, ++, i, ), {, scale, [, i, ], =, scalAbsoluteTolerance, +, scalRelativeTolerance, *, FastMath, ., abs, (, y, []
[*, FastMath, ., abs, (, y, [, i, ], ), ;, }, }, else, {, for, (, int, i, =]
[., abs, (, y, [, i, ], ), ;, }, }, else, {, for, (, int, i, =, 0, ;]
[., abs, (, y, [, i, ], ), ;, }, }, else, {, for, (, int, i, =, 0, ;]
[(, y, [, i, ], ), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <]
[(, y, [, i, ], ), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <]
[], ), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;]
[), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++]
[}, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {]
[}, else, {, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {]
[{, for, (, int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, scale, []
[int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =]
[int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =]
[int, i, =, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =]
[=, 0, ;, i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =, vecAbsoluteTolerance, []
[i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +]
[i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +]
[i, <, scale, ., length, ;, ++, i, ), {, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +]
[scale, ., length, ;, ++, i, ), {, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, []
[;, ++, i, ), {, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *]
[;, ++, i, ), {, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *]
[{, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, FastMath, ., abs, (]
[{, scale, [, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, FastMath, ., abs, (]
[[, i, ], =, vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, FastMath, ., abs, (, y, []
[i, ], +, vecRelativeTolerance, [, i, ], *, FastMath, ., abs, (, y, [, i, ], ), ;, }, }]
[+, vecRelativeTolerance, [, i, ], *, FastMath, ., abs, (, y, [, i, ], ), ;, }, }, hNew, =]
[[, i, ], *, FastMath, ., abs, (, y, [, i, ], ), ;, }, }, hNew, =, initializeStep, (]
[], *, FastMath, ., abs, (, y, [, i, ], ), ;, }, }, hNew, =, initializeStep, (, forward, ,]
[abs, (, y, [, i, ], ), ;, }, }, hNew, =, initializeStep, (, forward, ,, getOrder, (, ), ,]
[y, [, i, ], ), ;, }, }, hNew, =, initializeStep, (, forward, ,, getOrder, (, ), ,, scale, ,]
[i, ], ), ;, }, }, hNew, =, initializeStep, (, forward, ,, getOrder, (, ), ,, scale, ,, stepStart, ,]
[), ;, }, }, hNew, =, initializeStep, (, forward, ,, getOrder, (, ), ,, scale, ,, stepStart, ,, y, ,]
[), ;, }, }, hNew, =, initializeStep, (, forward, ,, getOrder, (, ), ,, scale, ,, stepStart, ,, y, ,]
[}, }, hNew, =, initializeStep, (, forward, ,, getOrder, (, ), ,, scale, ,, stepStart, ,, y, ,, yDotK, []
[=, initializeStep, (, forward, ,, getOrder, (, ), ,, scale, ,, stepStart, ,, y, ,, yDotK, [, 0, ], ,]
[(, forward, ,, getOrder, (, ), ,, scale, ,, stepStart, ,, y, ,, yDotK, [, 0, ], ,, yTmp, ,]
[(, forward, ,, getOrder, (, ), ,, scale, ,, stepStart, ,, y, ,, yDotK, [, 0, ], ,, yTmp, ,]
[,, getOrder, (, ), ,, scale, ,, stepStart, ,, y, ,, yDotK, [, 0, ], ,, yTmp, ,, yDotK, []
[,, scale, ,, stepStart, ,, y, ,, yDotK, [, 0, ], ,, yTmp, ,, yDotK, [, 1, ], ), ;]
[,, stepStart, ,, y, ,, yDotK, [, 0, ], ,, yTmp, ,, yDotK, [, 1, ], ), ;, firstTime, =]
[y, ,, yDotK, [, 0, ], ,, yTmp, ,, yDotK, [, 1, ], ), ;, firstTime, =, false, ;, }]
[yDotK, [, 0, ], ,, yTmp, ,, yDotK, [, 1, ], ), ;, firstTime, =, false, ;, }, stepSize, =]
[,, yTmp, ,, yDotK, [, 1, ], ), ;, firstTime, =, false, ;, }, stepSize, =, hNew, ;, if, (]
[1, ], ), ;, firstTime, =, false, ;, }, stepSize, =, hNew, ;, if, (, forward, ), {, if, (]
[1, ], ), ;, firstTime, =, false, ;, }, stepSize, =, hNew, ;, if, (, forward, ), {, if, (]
[1, ], ), ;, firstTime, =, false, ;, }, stepSize, =, hNew, ;, if, (, forward, ), {, if, (]
[), ;, firstTime, =, false, ;, }, stepSize, =, hNew, ;, if, (, forward, ), {, if, (, stepStart, +]
[firstTime, =, false, ;, }, stepSize, =, hNew, ;, if, (, forward, ), {, if, (, stepStart, +, stepSize, >=]
[;, }, stepSize, =, hNew, ;, if, (, forward, ), {, if, (, stepStart, +, stepSize, >=, t, ), {]
[stepSize, =, hNew, ;, if, (, forward, ), {, if, (, stepStart, +, stepSize, >=, t, ), {, stepSize, =]
[stepSize, =, hNew, ;, if, (, forward, ), {, if, (, stepStart, +, stepSize, >=, t, ), {, stepSize, =]
[hNew, ;, if, (, forward, ), {, if, (, stepStart, +, stepSize, >=, t, ), {, stepSize, =, t, -]
[(, stepStart, +, stepSize, >=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, else, {, if, (]
[(, stepStart, +, stepSize, >=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, else, {, if, (]
[(, stepStart, +, stepSize, >=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, else, {, if, (]
[+, stepSize, >=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, else, {, if, (, stepStart, +]
[>=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, else, {, if, (, stepStart, +, stepSize, <=]
[{, stepSize, =, t, -, stepStart, ;, }, }, else, {, if, (, stepStart, +, stepSize, <=, t, ), {]
[=, t, -, stepStart, ;, }, }, else, {, if, (, stepStart, +, stepSize, <=, t, ), {, stepSize, =]
[=, t, -, stepStart, ;, }, }, else, {, if, (, stepStart, +, stepSize, <=, t, ), {, stepSize, =]
[-, stepStart, ;, }, }, else, {, if, (, stepStart, +, stepSize, <=, t, ), {, stepSize, =, t, -]
[stepStart, +, stepSize, <=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, for, (, int, k, =]
[stepSize, <=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, for, (, int, k, =, 1, ;]
[stepSize, <=, t, ), {, stepSize, =, t, -, stepStart, ;, }, }, for, (, int, k, =, 1, ;]
[t, ), {, stepSize, =, t, -, stepStart, ;, }, }, for, (, int, k, =, 1, ;, k, <]
[{, stepSize, =, t, -, stepStart, ;, }, }, for, (, int, k, =, 1, ;, k, <, stages, ;]
[stepSize, =, t, -, stepStart, ;, }, }, for, (, int, k, =, 1, ;, k, <, stages, ;, ++]
[for, (, int, k, =, 1, ;, k, <, stages, ;, ++, k, ), {, for, (, int, j, =]
[int, k, =, 1, ;, k, <, stages, ;, ++, k, ), {, for, (, int, j, =, 0, ;]
[int, k, =, 1, ;, k, <, stages, ;, ++, k, ), {, for, (, int, j, =, 0, ;]
[=, 1, ;, k, <, stages, ;, ++, k, ), {, for, (, int, j, =, 0, ;, j, <]
[=, 1, ;, k, <, stages, ;, ++, k, ), {, for, (, int, j, =, 0, ;, j, <]
[<, stages, ;, ++, k, ), {, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;]
[stages, ;, ++, k, ), {, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++]
[for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =]
[for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =]
[for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =]
[for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =]
[int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =, a, []
[int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =, a, []
[=, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =, a, [, k, -]
[j, <, y0, ., length, ;, ++, j, ), {, double, sum, =, a, [, k, -, 1, ], []
[., length, ;, ++, j, ), {, double, sum, =, a, [, k, -, 1, ], [, 0, ], *]
[., length, ;, ++, j, ), {, double, sum, =, a, [, k, -, 1, ], [, 0, ], *]
[., length, ;, ++, j, ), {, double, sum, =, a, [, k, -, 1, ], [, 0, ], *]
[;, ++, j, ), {, double, sum, =, a, [, k, -, 1, ], [, 0, ], *, yDotK, []
[), {, double, sum, =, a, [, k, -, 1, ], [, 0, ], *, yDotK, [, 0, ], []
[-, 1, ], [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =]
[], [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;]
[], [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;]
[0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <]
[*, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, k, ;]
[yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, k, ;, ++]
[], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, k, ;, ++, l, ), {]
[j, ], ;, for, (, int, l, =, 1, ;, l, <, k, ;, ++, l, ), {, sum, +=]
[j, ], ;, for, (, int, l, =, 1, ;, l, <, k, ;, ++, l, ), {, sum, +=]
[j, ], ;, for, (, int, l, =, 1, ;, l, <, k, ;, ++, l, ), {, sum, +=]
[j, ], ;, for, (, int, l, =, 1, ;, l, <, k, ;, ++, l, ), {, sum, +=]
[;, for, (, int, l, =, 1, ;, l, <, k, ;, ++, l, ), {, sum, +=, a, []
[;, for, (, int, l, =, 1, ;, l, <, k, ;, ++, l, ), {, sum, +=, a, []
[(, int, l, =, 1, ;, l, <, k, ;, ++, l, ), {, sum, +=, a, [, k, -]
[=, 1, ;, l, <, k, ;, ++, l, ), {, sum, +=, a, [, k, -, 1, ], []
[l, <, k, ;, ++, l, ), {, sum, +=, a, [, k, -, 1, ], [, l, ], *]
[l, <, k, ;, ++, l, ), {, sum, +=, a, [, k, -, 1, ], [, l, ], *]
[l, <, k, ;, ++, l, ), {, sum, +=, a, [, k, -, 1, ], [, l, ], *]
[k, ;, ++, l, ), {, sum, +=, a, [, k, -, 1, ], [, l, ], *, yDotK, []
[l, ), {, sum, +=, a, [, k, -, 1, ], [, l, ], *, yDotK, [, l, ], []
[+=, a, [, k, -, 1, ], [, l, ], *, yDotK, [, l, ], [, j, ], ;, }]
[+=, a, [, k, -, 1, ], [, l, ], *, yDotK, [, l, ], [, j, ], ;, }]
[[, k, -, 1, ], [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, []
[1, ], [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =]
[1, ], [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =]
[1, ], [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =]
[[, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, []
[*, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +]
[*, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +]
[[, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *]
[[, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }]
[], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (]
[], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (]
[}, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +]
[}, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +]
[}, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +]
[[, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +, c, []
[[, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +, c, []
[], =, y, [, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +, c, [, k, -]
[[, j, ], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +, c, [, k, -, 1, ], *]
[], +, stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +, c, [, k, -, 1, ], *, stepSize, ,]
[stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +, c, [, k, -, 1, ], *, stepSize, ,, yTmp, ,]
[stepSize, *, sum, ;, }, computeDerivatives, (, stepStart, +, c, [, k, -, 1, ], *, stepSize, ,, yTmp, ,]
[sum, ;, }, computeDerivatives, (, stepStart, +, c, [, k, -, 1, ], *, stepSize, ,, yTmp, ,, yDotK, []
[-, 1, ], *, stepSize, ,, yTmp, ,, yDotK, [, k, ], ), ;, }, for, (, int, j, =]
[], *, stepSize, ,, yTmp, ,, yDotK, [, k, ], ), ;, }, for, (, int, j, =, 0, ;]
[], *, stepSize, ,, yTmp, ,, yDotK, [, k, ], ), ;, }, for, (, int, j, =, 0, ;]
[stepSize, ,, yTmp, ,, yDotK, [, k, ], ), ;, }, for, (, int, j, =, 0, ;, j, <]
[stepSize, ,, yTmp, ,, yDotK, [, k, ], ), ;, }, for, (, int, j, =, 0, ;, j, <]
[yDotK, [, k, ], ), ;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;]
[[, k, ], ), ;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++]
[for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =]
[for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =]
[for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =]
[int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =, b, []
[0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =, b, [, 0, ], *]
[0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =, b, [, 0, ], *]
[0, ;, j, <, y0, ., length, ;, ++, j, ), {, double, sum, =, b, [, 0, ], *]
[j, <, y0, ., length, ;, ++, j, ), {, double, sum, =, b, [, 0, ], *, yDotK, []
[., length, ;, ++, j, ), {, double, sum, =, b, [, 0, ], *, yDotK, [, 0, ], []
[sum, =, b, [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =]
[b, [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;]
[b, [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;]
[0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <]
[*, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, stages, ;]
[yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, stages, ;, ++]
[], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, stages, ;, ++, l, ), {]
[j, ], ;, for, (, int, l, =, 1, ;, l, <, stages, ;, ++, l, ), {, sum, +=]
[j, ], ;, for, (, int, l, =, 1, ;, l, <, stages, ;, ++, l, ), {, sum, +=]
[j, ], ;, for, (, int, l, =, 1, ;, l, <, stages, ;, ++, l, ), {, sum, +=]
[;, for, (, int, l, =, 1, ;, l, <, stages, ;, ++, l, ), {, sum, +=, b, []
[int, l, =, 1, ;, l, <, stages, ;, ++, l, ), {, sum, +=, b, [, l, ], *]
[int, l, =, 1, ;, l, <, stages, ;, ++, l, ), {, sum, +=, b, [, l, ], *]
[int, l, =, 1, ;, l, <, stages, ;, ++, l, ), {, sum, +=, b, [, l, ], *]
[=, 1, ;, l, <, stages, ;, ++, l, ), {, sum, +=, b, [, l, ], *, yDotK, []
[l, <, stages, ;, ++, l, ), {, sum, +=, b, [, l, ], *, yDotK, [, l, ], []
[++, l, ), {, sum, +=, b, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }]
[++, l, ), {, sum, +=, b, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }]
[), {, sum, +=, b, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, []
[+=, b, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =]
[+=, b, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =]
[+=, b, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =]
[[, l, ], *, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, []
[*, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +]
[*, yDotK, [, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +]
[[, l, ], [, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *]
[[, j, ], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }]
[], ;, }, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, error, =]
[}, yTmp, [, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, error, =, estimateError, (]
[[, j, ], =, y, [, j, ], +, stepSize, *, sum, ;, }, error, =, estimateError, (, yDotK, ,]
[], =, y, [, j, ], +, stepSize, *, sum, ;, }, error, =, estimateError, (, yDotK, ,, y, ,]
[y, [, j, ], +, stepSize, *, sum, ;, }, error, =, estimateError, (, yDotK, ,, y, ,, yTmp, ,]
[stepSize, *, sum, ;, }, error, =, estimateError, (, yDotK, ,, y, ,, yTmp, ,, stepSize, ), ;, if, (]
[stepSize, *, sum, ;, }, error, =, estimateError, (, yDotK, ,, y, ,, yTmp, ,, stepSize, ), ;, if, (]
[sum, ;, }, error, =, estimateError, (, yDotK, ,, y, ,, yTmp, ,, stepSize, ), ;, if, (, error, >=]
[yDotK, ,, y, ,, yTmp, ,, stepSize, ), ;, if, (, error, >=, 1.0, ), {, final, double, factor, =]
[yDotK, ,, y, ,, yTmp, ,, stepSize, ), ;, if, (, error, >=, 1.0, ), {, final, double, factor, =]
[yTmp, ,, stepSize, ), ;, if, (, error, >=, 1.0, ), {, final, double, factor, =, FastMath, ., min, (]
[stepSize, ), ;, if, (, error, >=, 1.0, ), {, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,]
[stepSize, ), ;, if, (, error, >=, 1.0, ), {, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,]
[(, error, >=, 1.0, ), {, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (]
[>=, 1.0, ), {, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,]
[>=, 1.0, ), {, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,]
[), {, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety, *]
[), {, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety, *]
[factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety, *, FastMath, ., pow, (]
[FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,]
[,, FastMath, ., max, (, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;]
[., max, (, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, hNew, =]
[(, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, hNew, =, filterStep, (]
[(, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, hNew, =, filterStep, (]
[,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, hNew, =, filterStep, (, stepSize, *]
[*, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, hNew, =, filterStep, (, stepSize, *, factor, ,]
[., pow, (, error, ,, exp, ), ), ), ;, hNew, =, filterStep, (, stepSize, *, factor, ,, forward, ,]
[exp, ), ), ), ;, hNew, =, filterStep, (, stepSize, *, factor, ,, forward, ,, false, ), ;, }, }]
[exp, ), ), ), ;, hNew, =, filterStep, (, stepSize, *, factor, ,, forward, ,, false, ), ;, }, }]
[;, hNew, =, filterStep, (, stepSize, *, factor, ,, forward, ,, false, ), ;, }, }, interpolator, ., storeTime, (]
[;, hNew, =, filterStep, (, stepSize, *, factor, ,, forward, ,, false, ), ;, }, }, interpolator, ., storeTime, (]
[=, filterStep, (, stepSize, *, factor, ,, forward, ,, false, ), ;, }, }, interpolator, ., storeTime, (, stepStart, +]
[stepSize, *, factor, ,, forward, ,, false, ), ;, }, }, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;]
[stepSize, *, factor, ,, forward, ,, false, ), ;, }, }, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;]
[forward, ,, false, ), ;, }, }, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, System, ., arraycopy, (]
[false, ), ;, }, }, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, System, ., arraycopy, (, yTmp, ,]
[;, }, }, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, System, ., arraycopy, (, yTmp, ,, 0, ,]
[}, interpolator, ., storeTime, (, stepStart, +, stepSize, ), ;, System, ., arraycopy, (, yTmp, ,, 0, ,, y, ,]
[., storeTime, (, stepStart, +, stepSize, ), ;, System, ., arraycopy, (, yTmp, ,, 0, ,, y, ,, 0, ,]
[., storeTime, (, stepStart, +, stepSize, ), ;, System, ., arraycopy, (, yTmp, ,, 0, ,, y, ,, 0, ,]
[stepSize, ), ;, System, ., arraycopy, (, yTmp, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;]
[stepSize, ), ;, System, ., arraycopy, (, yTmp, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;]
[., arraycopy, (, yTmp, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (]
[., arraycopy, (, yTmp, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (]
[(, yTmp, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDotK, []
[(, yTmp, ,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDotK, []
[,, 0, ,, y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDotK, [, stages, -]
[y, ,, 0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDotK, [, stages, -, 1, ], ,]
[0, ,, y0, ., length, ), ;, System, ., arraycopy, (, yDotK, [, stages, -, 1, ], ,, 0, ,]
[y0, ., length, ), ;, System, ., arraycopy, (, yDotK, [, stages, -, 1, ], ,, 0, ,, yDotTmp, ,]
[length, ), ;, System, ., arraycopy, (, yDotK, [, stages, -, 1, ], ,, 0, ,, yDotTmp, ,, 0, ,]
[length, ), ;, System, ., arraycopy, (, yDotK, [, stages, -, 1, ], ,, 0, ,, yDotTmp, ,, 0, ,]
[arraycopy, (, yDotK, [, stages, -, 1, ], ,, 0, ,, yDotTmp, ,, 0, ,, y0, ., length, ), ;]
[yDotK, [, stages, -, 1, ], ,, 0, ,, yDotTmp, ,, 0, ,, y0, ., length, ), ;, stepStart, =]
[stages, -, 1, ], ,, 0, ,, yDotTmp, ,, 0, ,, y0, ., length, ), ;, stepStart, =, acceptStep, (]
[1, ], ,, 0, ,, yDotTmp, ,, 0, ,, y0, ., length, ), ;, stepStart, =, acceptStep, (, interpolator, ,]
[,, 0, ,, yDotTmp, ,, 0, ,, y0, ., length, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y, ,]
[,, yDotTmp, ,, 0, ,, y0, ., length, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y, ,, yDotTmp, ,]
[0, ,, y0, ., length, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y, ,, yDotTmp, ,, t, ), ;]
[0, ,, y0, ., length, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y, ,, yDotTmp, ,, t, ), ;]
[length, ), ;, stepStart, =, acceptStep, (, interpolator, ,, y, ,, yDotTmp, ,, t, ), ;, System, ., arraycopy, (]
[;, stepStart, =, acceptStep, (, interpolator, ,, y, ,, yDotTmp, ,, t, ), ;, System, ., arraycopy, (, y, ,]
[=, acceptStep, (, interpolator, ,, y, ,, yDotTmp, ,, t, ), ;, System, ., arraycopy, (, y, ,, 0, ,]
[(, interpolator, ,, y, ,, yDotTmp, ,, t, ), ;, System, ., arraycopy, (, y, ,, 0, ,, yTmp, ,]
[,, y, ,, yDotTmp, ,, t, ), ;, System, ., arraycopy, (, y, ,, 0, ,, yTmp, ,, 0, ,]
[,, y, ,, yDotTmp, ,, t, ), ;, System, ., arraycopy, (, y, ,, 0, ,, yTmp, ,, 0, ,]
[;, System, ., arraycopy, (, y, ,, 0, ,, yTmp, ,, 0, ,, y, ., length, ), ;, if, (]
[System, ., arraycopy, (, y, ,, 0, ,, yTmp, ,, 0, ,, y, ., length, ), ;, if, (, !]
[(, y, ,, 0, ,, yTmp, ,, 0, ,, y, ., length, ), ;, if, (, !, isLastStep, ), {]
[(, y, ,, 0, ,, yTmp, ,, 0, ,, y, ., length, ), ;, if, (, !, isLastStep, ), {]
[,, yTmp, ,, 0, ,, y, ., length, ), ;, if, (, !, isLastStep, ), {, interpolator, ., storeTime, (]
[y, ., length, ), ;, if, (, !, isLastStep, ), {, interpolator, ., storeTime, (, stepStart, ), ;, if, (]
[), ;, if, (, !, isLastStep, ), {, interpolator, ., storeTime, (, stepStart, ), ;, if, (, fsal, ), {]
[), ;, if, (, !, isLastStep, ), {, interpolator, ., storeTime, (, stepStart, ), ;, if, (, fsal, ), {]
[!, isLastStep, ), {, interpolator, ., storeTime, (, stepStart, ), ;, if, (, fsal, ), {, System, ., arraycopy, (]
[), {, interpolator, ., storeTime, (, stepStart, ), ;, if, (, fsal, ), {, System, ., arraycopy, (, yDotTmp, ,]
[interpolator, ., storeTime, (, stepStart, ), ;, if, (, fsal, ), {, System, ., arraycopy, (, yDotTmp, ,, 0, ,]
[interpolator, ., storeTime, (, stepStart, ), ;, if, (, fsal, ), {, System, ., arraycopy, (, yDotTmp, ,, 0, ,]
[storeTime, (, stepStart, ), ;, if, (, fsal, ), {, System, ., arraycopy, (, yDotTmp, ,, 0, ,, yDotK, []
[), ;, if, (, fsal, ), {, System, ., arraycopy, (, yDotTmp, ,, 0, ,, yDotK, [, 0, ], ,]
[if, (, fsal, ), {, System, ., arraycopy, (, yDotTmp, ,, 0, ,, yDotK, [, 0, ], ,, 0, ,]
[if, (, fsal, ), {, System, ., arraycopy, (, yDotTmp, ,, 0, ,, yDotK, [, 0, ], ,, 0, ,]
[,, 0, ,, yDotK, [, 0, ], ,, 0, ,, y0, ., length, ), ;, }, final, double, factor, =]
[,, 0, ,, yDotK, [, 0, ], ,, 0, ,, y0, ., length, ), ;, }, final, double, factor, =]
[[, 0, ], ,, 0, ,, y0, ., length, ), ;, }, final, double, factor, =, FastMath, ., min, (]
[], ,, 0, ,, y0, ., length, ), ;, }, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,]
[], ,, 0, ,, y0, ., length, ), ;, }, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,]
[y0, ., length, ), ;, }, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (]
[length, ), ;, }, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,]
[length, ), ;, }, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,]
[;, }, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety, *]
[;, }, final, double, factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety, *]
[factor, =, FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety, *, FastMath, ., pow, (]
[FastMath, ., min, (, maxGrowth, ,, FastMath, ., max, (, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,]
[(, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, final, double, scaledH, =]
[(, minReduction, ,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, final, double, scaledH, =]
[,, safety, *, FastMath, ., pow, (, error, ,, exp, ), ), ), ;, final, double, scaledH, =, stepSize, *]
[(, error, ,, exp, ), ), ), ;, final, double, scaledH, =, stepSize, *, factor, ;, final, double, nextT, =]
[(, error, ,, exp, ), ), ), ;, final, double, scaledH, =, stepSize, *, factor, ;, final, double, nextT, =]
[,, exp, ), ), ), ;, final, double, scaledH, =, stepSize, *, factor, ;, final, double, nextT, =, stepStart, +]
[final, double, scaledH, =, stepSize, *, factor, ;, final, double, nextT, =, stepStart, +, scaledH, ;, final, boolean, nextIsLast, =]
[final, double, scaledH, =, stepSize, *, factor, ;, final, double, nextT, =, stepStart, +, scaledH, ;, final, boolean, nextIsLast, =]
[scaledH, =, stepSize, *, factor, ;, final, double, nextT, =, stepStart, +, scaledH, ;, final, boolean, nextIsLast, =, forward, ?]
[=, stepSize, *, factor, ;, final, double, nextT, =, stepStart, +, scaledH, ;, final, boolean, nextIsLast, =, forward, ?, (]
[=, stepSize, *, factor, ;, final, double, nextT, =, stepStart, +, scaledH, ;, final, boolean, nextIsLast, =, forward, ?, (]
[*, factor, ;, final, double, nextT, =, stepStart, +, scaledH, ;, final, boolean, nextIsLast, =, forward, ?, (, nextT, >=]
[final, double, nextT, =, stepStart, +, scaledH, ;, final, boolean, nextIsLast, =, forward, ?, (, nextT, >=, t, ), :]
[double, nextT, =, stepStart, +, scaledH, ;, final, boolean, nextIsLast, =, forward, ?, (, nextT, >=, t, ), :, (]
[double, nextT, =, stepStart, +, scaledH, ;, final, boolean, nextIsLast, =, forward, ?, (, nextT, >=, t, ), :, (]
[=, stepStart, +, scaledH, ;, final, boolean, nextIsLast, =, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=]
[scaledH, ;, final, boolean, nextIsLast, =, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;]
[final, boolean, nextIsLast, =, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, hNew, =]
[nextIsLast, =, forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, hNew, =, filterStep, (]
[forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, hNew, =, filterStep, (, scaledH, ,]
[(, nextT, >=, t, ), :, (, nextT, <=, t, ), ;, hNew, =, filterStep, (, scaledH, ,, forward, ,]
[nextT, <=, t, ), ;, hNew, =, filterStep, (, scaledH, ,, forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =]
[nextT, <=, t, ), ;, hNew, =, filterStep, (, scaledH, ,, forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =]
[t, ), ;, hNew, =, filterStep, (, scaledH, ,, forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +]
[(, scaledH, ,, forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =]
[(, scaledH, ,, forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =]
[,, forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =, forward, ?]
[forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =, forward, ?, (]
[forward, ,, nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =, forward, ?, (]
[nextIsLast, ), ;, final, double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =, forward, ?, (, filteredNextT, >=]
[final, double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =, forward, ?, (, filteredNextT, >=, t, ), :]
[double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =, forward, ?, (, filteredNextT, >=, t, ), :, (]
[double, filteredNextT, =, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =, forward, ?, (, filteredNextT, >=, t, ), :, (]
[=, stepStart, +, hNew, ;, final, boolean, filteredNextIsLast, =, forward, ?, (, filteredNextT, >=, t, ), :, (, filteredNextT, <=]
[final, boolean, filteredNextIsLast, =, forward, ?, (, filteredNextT, >=, t, ), :, (, filteredNextT, <=, t, ), ;, if, (]
[=, forward, ?, (, filteredNextT, >=, t, ), :, (, filteredNextT, <=, t, ), ;, if, (, filteredNextIsLast, ), {]
[?, (, filteredNextT, >=, t, ), :, (, filteredNextT, <=, t, ), ;, if, (, filteredNextIsLast, ), {, hNew, =]
[?, (, filteredNextT, >=, t, ), :, (, filteredNextT, <=, t, ), ;, if, (, filteredNextIsLast, ), {, hNew, =]
[filteredNextT, >=, t, ), :, (, filteredNextT, <=, t, ), ;, if, (, filteredNextIsLast, ), {, hNew, =, t, -]
[<=, t, ), ;, if, (, filteredNextIsLast, ), {, hNew, =, t, -, stepStart, ;, }, }, }, while, (]
[t, ), ;, if, (, filteredNextIsLast, ), {, hNew, =, t, -, stepStart, ;, }, }, }, while, (, !]
[if, (, filteredNextIsLast, ), {, hNew, =, t, -, stepStart, ;, }, }, }, while, (, !, isLastStep, ), ;]
[if, (, filteredNextIsLast, ), {, hNew, =, t, -, stepStart, ;, }, }, }, while, (, !, isLastStep, ), ;]
[{, hNew, =, t, -, stepStart, ;, }, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (]
[t, -, stepStart, ;, }, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, ), ;]
[t, -, stepStart, ;, }, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, ), ;]
[}, }, }, while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, ), ;, equations, ., setCompleteState, (]
[while, (, !, isLastStep, ), ;, equations, ., setTime, (, stepStart, ), ;, equations, ., setCompleteState, (, y, ), ;]
[;, equations, ., setCompleteState, (, y, ), ;, resetInternalState, (, ), ;, }, public, double, getMinReduction, (, ), {, return]
[}, public, double, getMinReduction, (, ), {, return, minReduction, ;, }, public, void, setMinReduction, (, final, double, minReduction, ), {]
[}, public, double, getMinReduction, (, ), {, return, minReduction, ;, }, public, void, setMinReduction, (, final, double, minReduction, ), {]
[(, ), {, return, minReduction, ;, }, public, void, setMinReduction, (, final, double, minReduction, ), {, this, ., minReduction, =]
[(, final, double, minReduction, ), {, this, ., minReduction, =, minReduction, ;, }, public, double, getMaxGrowth, (, ), {, return]
[}, public, double, getMaxGrowth, (, ), {, return, maxGrowth, ;, }, public, void, setMaxGrowth, (, final, double, maxGrowth, ), {]
[}, public, double, getMaxGrowth, (, ), {, return, maxGrowth, ;, }, public, void, setMaxGrowth, (, final, double, maxGrowth, ), {]
[(, ), {, return, maxGrowth, ;, }, public, void, setMaxGrowth, (, final, double, maxGrowth, ), {, this, ., maxGrowth, =]
