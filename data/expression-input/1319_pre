[commons, ., math3, ., exception, ., TooManyEvaluationsException, ;, public, class, MullerSolver, extends, AbstractUnivariateSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =]
[class, MullerSolver, extends, AbstractUnivariateSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =, 1e-6, ;, public, MullerSolver, (, ), {, this, (]
[public, MullerSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ), ;, }, public, MullerSolver, (, double, absoluteAccuracy, ), {, super, (]
[), {, super, (, absoluteAccuracy, ), ;, }, public, MullerSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (]
[super, (, absoluteAccuracy, ), ;, }, public, MullerSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (, relativeAccuracy, ,]
[;, }, @, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, min, =]
[), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, min, =, getMin, (, ), ;, final, double, max, =]
[final, double, min, =, getMin, (, ), ;, final, double, max, =, getMax, (, ), ;, final, double, initial, =]
[final, double, max, =, getMax, (, ), ;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =]
[getMax, (, ), ;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;]
[), ;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (]
[final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,]
[initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,, initial, ,]
[double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,, initial, ,, max, ), ;, final, double, fMin, =]
[=, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,, initial, ,, max, ), ;, final, double, fMin, =, computeObjectiveValue, (]
[verifySequence, (, min, ,, initial, ,, max, ), ;, final, double, fMin, =, computeObjectiveValue, (, min, ), ;, if, (]
[verifySequence, (, min, ,, initial, ,, max, ), ;, final, double, fMin, =, computeObjectiveValue, (, min, ), ;, if, (]
[verifySequence, (, min, ,, initial, ,, max, ), ;, final, double, fMin, =, computeObjectiveValue, (, min, ), ;, if, (]
[initial, ,, max, ), ;, final, double, fMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (]
[), ;, final, double, fMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (, fMin, ), <]
[fMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (, fMin, ), <, functionValueAccuracy, ), {, return]
[if, (, FastMath, ., abs, (, fMin, ), <, functionValueAccuracy, ), {, return, min, ;, }, final, double, fMax, =]
[FastMath, ., abs, (, fMin, ), <, functionValueAccuracy, ), {, return, min, ;, }, final, double, fMax, =, computeObjectiveValue, (]
[), <, functionValueAccuracy, ), {, return, min, ;, }, final, double, fMax, =, computeObjectiveValue, (, max, ), ;, if, (]
[), <, functionValueAccuracy, ), {, return, min, ;, }, final, double, fMax, =, computeObjectiveValue, (, max, ), ;, if, (]
[), <, functionValueAccuracy, ), {, return, min, ;, }, final, double, fMax, =, computeObjectiveValue, (, max, ), ;, if, (]
[{, return, min, ;, }, final, double, fMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (]
[;, }, final, double, fMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (, fMax, ), <]
[fMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (, fMax, ), <, functionValueAccuracy, ), {, return]
[if, (, FastMath, ., abs, (, fMax, ), <, functionValueAccuracy, ), {, return, max, ;, }, final, double, fInitial, =]
[FastMath, ., abs, (, fMax, ), <, functionValueAccuracy, ), {, return, max, ;, }, final, double, fInitial, =, computeObjectiveValue, (]
[), <, functionValueAccuracy, ), {, return, max, ;, }, final, double, fInitial, =, computeObjectiveValue, (, initial, ), ;, if, (]
[), <, functionValueAccuracy, ), {, return, max, ;, }, final, double, fInitial, =, computeObjectiveValue, (, initial, ), ;, if, (]
[), <, functionValueAccuracy, ), {, return, max, ;, }, final, double, fInitial, =, computeObjectiveValue, (, initial, ), ;, if, (]
[{, return, max, ;, }, final, double, fInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (]
[;, }, final, double, fInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (, fInitial, ), <]
[fInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (, fInitial, ), <, functionValueAccuracy, ), {, return]
[(, initial, ), ;, if, (, FastMath, ., abs, (, fInitial, ), <, functionValueAccuracy, ), {, return, initial, ;, }]
[), ;, if, (, FastMath, ., abs, (, fInitial, ), <, functionValueAccuracy, ), {, return, initial, ;, }, verifyBracketing, (]
[if, (, FastMath, ., abs, (, fInitial, ), <, functionValueAccuracy, ), {, return, initial, ;, }, verifyBracketing, (, min, ,]
[(, fInitial, ), <, functionValueAccuracy, ), {, return, initial, ;, }, verifyBracketing, (, min, ,, max, ), ;, if, (]
[), <, functionValueAccuracy, ), {, return, initial, ;, }, verifyBracketing, (, min, ,, max, ), ;, if, (, isBracketing, (]
[functionValueAccuracy, ), {, return, initial, ;, }, verifyBracketing, (, min, ,, max, ), ;, if, (, isBracketing, (, min, ,]
[;, }, verifyBracketing, (, min, ,, max, ), ;, if, (, isBracketing, (, min, ,, initial, ), ), {, return]
[verifyBracketing, (, min, ,, max, ), ;, if, (, isBracketing, (, min, ,, initial, ), ), {, return, solve, (]
[min, ,, max, ), ;, if, (, isBracketing, (, min, ,, initial, ), ), {, return, solve, (, min, ,]
[max, ), ;, if, (, isBracketing, (, min, ,, initial, ), ), {, return, solve, (, min, ,, initial, ,]
[;, if, (, isBracketing, (, min, ,, initial, ), ), {, return, solve, (, min, ,, initial, ,, fMin, ,]
[initial, ), ), {, return, solve, (, min, ,, initial, ,, fMin, ,, fInitial, ), ;, }, else, {, return]
[), {, return, solve, (, min, ,, initial, ,, fMin, ,, fInitial, ), ;, }, else, {, return, solve, (]
[return, solve, (, min, ,, initial, ,, fMin, ,, fInitial, ), ;, }, else, {, return, solve, (, initial, ,]
[(, min, ,, initial, ,, fMin, ,, fInitial, ), ;, }, else, {, return, solve, (, initial, ,, max, ,]
[,, initial, ,, fMin, ,, fInitial, ), ;, }, else, {, return, solve, (, initial, ,, max, ,, fInitial, ,]
[(, double, min, ,, double, max, ,, double, fMin, ,, double, fMax, ), throws, TooManyEvaluationsException, {, final, double, relativeAccuracy, =]
[fMin, ,, double, fMax, ), throws, TooManyEvaluationsException, {, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, final, double, absoluteAccuracy, =]
[final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy, =]
[;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, double, x0, =]
[getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, double, x0, =, min, ;, double, y0, =]
[double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, double, x0, =, min, ;, double, y0, =, fMin, ;, double, x2, =]
[), ;, double, x0, =, min, ;, double, y0, =, fMin, ;, double, x2, =, max, ;, double, y2, =]
[min, ;, double, y0, =, fMin, ;, double, x2, =, max, ;, double, y2, =, fMax, ;, double, x1, =]
[min, ;, double, y0, =, fMin, ;, double, x2, =, max, ;, double, y2, =, fMax, ;, double, x1, =]
[double, y0, =, fMin, ;, double, x2, =, max, ;, double, y2, =, fMax, ;, double, x1, =, 0.5, *]
[y0, =, fMin, ;, double, x2, =, max, ;, double, y2, =, fMax, ;, double, x1, =, 0.5, *, (]
[y0, =, fMin, ;, double, x2, =, max, ;, double, y2, =, fMax, ;, double, x1, =, 0.5, *, (]
[fMin, ;, double, x2, =, max, ;, double, y2, =, fMax, ;, double, x1, =, 0.5, *, (, x0, +]
[;, double, y2, =, fMax, ;, double, x1, =, 0.5, *, (, x0, +, x2, ), ;, double, y1, =]
[y2, =, fMax, ;, double, x1, =, 0.5, *, (, x0, +, x2, ), ;, double, y1, =, computeObjectiveValue, (]
[=, 0.5, *, (, x0, +, x2, ), ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, oldx, =]
[=, 0.5, *, (, x0, +, x2, ), ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, oldx, =]
[x2, ), ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (]
[(, x1, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, d01, =]
[(, x1, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, d01, =]
[x1, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, d01, =, (]
[x1, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, d01, =, (]
[;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, d01, =, (, y1, -]
[=, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, d01, =, (, y1, -, y0, ), /]
[Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, d01, =, (, y1, -, y0, ), /, (]
[Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, d01, =, (, y1, -, y0, ), /, (]
[POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, d01, =, (, y1, -, y0, ), /, (, x1, -]
[final, double, d01, =, (, y1, -, y0, ), /, (, x1, -, x0, ), ;, final, double, d12, =]
[final, double, d01, =, (, y1, -, y0, ), /, (, x1, -, x0, ), ;, final, double, d12, =]
[double, d01, =, (, y1, -, y0, ), /, (, x1, -, x0, ), ;, final, double, d12, =, (]
[double, d01, =, (, y1, -, y0, ), /, (, x1, -, x0, ), ;, final, double, d12, =, (]
[=, (, y1, -, y0, ), /, (, x1, -, x0, ), ;, final, double, d12, =, (, y2, -]
[-, y0, ), /, (, x1, -, x0, ), ;, final, double, d12, =, (, y2, -, y1, ), /]
[y0, ), /, (, x1, -, x0, ), ;, final, double, d12, =, (, y2, -, y1, ), /, (]
[y0, ), /, (, x1, -, x0, ), ;, final, double, d12, =, (, y2, -, y1, ), /, (]
[/, (, x1, -, x0, ), ;, final, double, d12, =, (, y2, -, y1, ), /, (, x2, -]
[final, double, d12, =, (, y2, -, y1, ), /, (, x2, -, x1, ), ;, final, double, d012, =]
[final, double, d12, =, (, y2, -, y1, ), /, (, x2, -, x1, ), ;, final, double, d012, =]
[double, d12, =, (, y2, -, y1, ), /, (, x2, -, x1, ), ;, final, double, d012, =, (]
[double, d12, =, (, y2, -, y1, ), /, (, x2, -, x1, ), ;, final, double, d012, =, (]
[=, (, y2, -, y1, ), /, (, x2, -, x1, ), ;, final, double, d012, =, (, d12, -]
[-, y1, ), /, (, x2, -, x1, ), ;, final, double, d012, =, (, d12, -, d01, ), /]
[y1, ), /, (, x2, -, x1, ), ;, final, double, d012, =, (, d12, -, d01, ), /, (]
[y1, ), /, (, x2, -, x1, ), ;, final, double, d012, =, (, d12, -, d01, ), /, (]
[/, (, x2, -, x1, ), ;, final, double, d012, =, (, d12, -, d01, ), /, (, x2, -]
[final, double, d012, =, (, d12, -, d01, ), /, (, x2, -, x0, ), ;, final, double, c1, =]
[final, double, d012, =, (, d12, -, d01, ), /, (, x2, -, x0, ), ;, final, double, c1, =]
[d012, =, (, d12, -, d01, ), /, (, x2, -, x0, ), ;, final, double, c1, =, d01, +]
[d012, =, (, d12, -, d01, ), /, (, x2, -, x0, ), ;, final, double, c1, =, d01, +]
[=, (, d12, -, d01, ), /, (, x2, -, x0, ), ;, final, double, c1, =, d01, +, (]
[=, (, d12, -, d01, ), /, (, x2, -, x0, ), ;, final, double, c1, =, d01, +, (]
[d12, -, d01, ), /, (, x2, -, x0, ), ;, final, double, c1, =, d01, +, (, x1, -]
[), /, (, x2, -, x0, ), ;, final, double, c1, =, d01, +, (, x1, -, x0, ), *]
[), ;, final, double, c1, =, d01, +, (, x1, -, x0, ), *, d012, ;, final, double, delta, =]
[), ;, final, double, c1, =, d01, +, (, x1, -, x0, ), *, d012, ;, final, double, delta, =]
[), ;, final, double, c1, =, d01, +, (, x1, -, x0, ), *, d012, ;, final, double, delta, =]
[final, double, c1, =, d01, +, (, x1, -, x0, ), *, d012, ;, final, double, delta, =, c1, *]
[c1, =, d01, +, (, x1, -, x0, ), *, d012, ;, final, double, delta, =, c1, *, c1, -]
[c1, =, d01, +, (, x1, -, x0, ), *, d012, ;, final, double, delta, =, c1, *, c1, -]
[c1, =, d01, +, (, x1, -, x0, ), *, d012, ;, final, double, delta, =, c1, *, c1, -]
[d01, +, (, x1, -, x0, ), *, d012, ;, final, double, delta, =, c1, *, c1, -, 4, *]
[(, x1, -, x0, ), *, d012, ;, final, double, delta, =, c1, *, c1, -, 4, *, y1, *]
[d012, ;, final, double, delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;, final, double, xplus, =]
[d012, ;, final, double, delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;, final, double, xplus, =]
[final, double, delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;, final, double, xplus, =, x1, +]
[final, double, delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;, final, double, xplus, =, x1, +]
[double, delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;, final, double, xplus, =, x1, +, (]
[double, delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;, final, double, xplus, =, x1, +, (]
[delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;, final, double, xplus, =, x1, +, (, -]
[c1, *, c1, -, 4, *, y1, *, d012, ;, final, double, xplus, =, x1, +, (, -, 2.0, *]
[-, 4, *, y1, *, d012, ;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /]
[4, *, y1, *, d012, ;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /, (]
[4, *, y1, *, d012, ;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /, (]
[y1, *, d012, ;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, +]
[y1, *, d012, ;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, +]
[final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, +, FastMath, ., sqrt, (]
[2.0, *, y1, ), /, (, c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =]
[2.0, *, y1, ), /, (, c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =]
[y1, ), /, (, c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +]
[y1, ), /, (, c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +]
[), /, (, c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +, (]
[), /, (, c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +, (]
[/, (, c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +, (, -]
[c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +, (, -, 2.0, *]
[., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +, (, -, 2.0, *, y1, ), /]
[sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +, (, -, 2.0, *, y1, ), /, (]
[sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +, (, -, 2.0, *, y1, ), /, (]
[delta, ), ), ;, final, double, xminus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, -]
[delta, ), ), ;, final, double, xminus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, -]
[final, double, xminus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, -, FastMath, ., sqrt, (]
[2.0, *, y1, ), /, (, c1, -, FastMath, ., sqrt, (, delta, ), ), ;, final, double, x, =]
[2.0, *, y1, ), /, (, c1, -, FastMath, ., sqrt, (, delta, ), ), ;, final, double, x, =]
[y1, ), /, (, c1, -, FastMath, ., sqrt, (, delta, ), ), ;, final, double, x, =, isSequence, (]
[/, (, c1, -, FastMath, ., sqrt, (, delta, ), ), ;, final, double, x, =, isSequence, (, x0, ,]
[c1, -, FastMath, ., sqrt, (, delta, ), ), ;, final, double, x, =, isSequence, (, x0, ,, xplus, ,]
[., sqrt, (, delta, ), ), ;, final, double, x, =, isSequence, (, x0, ,, xplus, ,, x2, ), ?]
[(, delta, ), ), ;, final, double, x, =, isSequence, (, x0, ,, xplus, ,, x2, ), ?, xplus, :]
[double, x, =, isSequence, (, x0, ,, xplus, ,, x2, ), ?, xplus, :, xminus, ;, final, double, y, =]
[=, isSequence, (, x0, ,, xplus, ,, x2, ), ?, xplus, :, xminus, ;, final, double, y, =, computeObjectiveValue, (]
[x2, ), ?, xplus, :, xminus, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =]
[x2, ), ?, xplus, :, xminus, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =]
[:, xminus, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (]
[:, xminus, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (]
[;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *]
[;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *]
[=, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (]
[x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,]
[tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (]
[tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (]
[tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (]
[tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (]
[max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (]
[max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (]
[relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -]
[., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=]
[(, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||]
[(, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||]
[(, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||]
[absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs, (]
[if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=]
[abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return]
[<=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =]
[<=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =]
[<=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =]
[tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (]
[tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (]
[tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (]
[FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (, x, <]
[abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (, x, <, x1, &&]
[abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (, x, <, x1, &&]
[(, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (, x, <, x1, &&, (]
[(, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (, x, <, x1, &&, (]
[), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (, x, <, x1, &&, (, x1, -]
[), {, return, x, ;, }, boolean, bisect, =, (, x, <, x1, &&, (, x1, -, x0, ), >]
[), {, return, x, ;, }, boolean, bisect, =, (, x, <, x1, &&, (, x1, -, x0, ), >]
[return, x, ;, }, boolean, bisect, =, (, x, <, x1, &&, (, x1, -, x0, ), >, 0.95, *]
[x, ;, }, boolean, bisect, =, (, x, <, x1, &&, (, x1, -, x0, ), >, 0.95, *, (]
[x, ;, }, boolean, bisect, =, (, x, <, x1, &&, (, x1, -, x0, ), >, 0.95, *, (]
[}, boolean, bisect, =, (, x, <, x1, &&, (, x1, -, x0, ), >, 0.95, *, (, x2, -]
[(, x, <, x1, &&, (, x1, -, x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||]
[x, <, x1, &&, (, x1, -, x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (]
[x, <, x1, &&, (, x1, -, x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (]
[x, <, x1, &&, (, x1, -, x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (]
[x1, &&, (, x1, -, x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, >]
[(, x1, -, x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, >, x1, &&]
[(, x1, -, x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, >, x1, &&]
[x1, -, x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, >, x1, &&, (]
[x1, -, x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, >, x1, &&, (]
[x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, >, x1, &&, (, x2, -]
[0.95, *, (, x2, -, x0, ), ), ||, (, x, >, x1, &&, (, x2, -, x1, ), >]
[0.95, *, (, x2, -, x0, ), ), ||, (, x, >, x1, &&, (, x2, -, x1, ), >]
[(, x2, -, x0, ), ), ||, (, x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *]
[x2, -, x0, ), ), ||, (, x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (]
[x2, -, x0, ), ), ||, (, x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (]
[x0, ), ), ||, (, x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2, -]
[(, x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0, ), ), ||]
[x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (]
[x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (]
[x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, ==]
[x1, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, ==, x1, ), ;, if, (]
[), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, ==, x1, ), ;, if, (, !]
[*, (, x2, -, x0, ), ), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {]
[x2, -, x0, ), ), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =]
[x2, -, x0, ), ), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =]
[x2, -, x0, ), ), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =]
[x0, ), ), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x, <]
[), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?]
[(, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?, x0, :]
[==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?, x0, :, x1, ;]
[), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?, x0, :, x1, ;, y0, =]
[), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?, x0, :, x1, ;, y0, =]
[), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?, x0, :, x1, ;, y0, =]
[if, (, !, bisect, ), {, x0, =, x, <, x1, ?, x0, :, x1, ;, y0, =, x, <]
[!, bisect, ), {, x0, =, x, <, x1, ?, x0, :, x1, ;, y0, =, x, <, x1, ?]
[), {, x0, =, x, <, x1, ?, x0, :, x1, ;, y0, =, x, <, x1, ?, y0, :]
[x0, =, x, <, x1, ?, x0, :, x1, ;, y0, =, x, <, x1, ?, y0, :, y1, ;]
[x, <, x1, ?, x0, :, x1, ;, y0, =, x, <, x1, ?, y0, :, y1, ;, x2, =]
[x, <, x1, ?, x0, :, x1, ;, y0, =, x, <, x1, ?, y0, :, y1, ;, x2, =]
[x, <, x1, ?, x0, :, x1, ;, y0, =, x, <, x1, ?, y0, :, y1, ;, x2, =]
[x1, ?, x0, :, x1, ;, y0, =, x, <, x1, ?, y0, :, y1, ;, x2, =, x, >]
[x0, :, x1, ;, y0, =, x, <, x1, ?, y0, :, y1, ;, x2, =, x, >, x1, ?]
[x1, ;, y0, =, x, <, x1, ?, y0, :, y1, ;, x2, =, x, >, x1, ?, x2, :]
[y0, =, x, <, x1, ?, y0, :, y1, ;, x2, =, x, >, x1, ?, x2, :, x1, ;]
[x, <, x1, ?, y0, :, y1, ;, x2, =, x, >, x1, ?, x2, :, x1, ;, y2, =]
[x, <, x1, ?, y0, :, y1, ;, x2, =, x, >, x1, ?, x2, :, x1, ;, y2, =]
[x, <, x1, ?, y0, :, y1, ;, x2, =, x, >, x1, ?, x2, :, x1, ;, y2, =]
[x1, ?, y0, :, y1, ;, x2, =, x, >, x1, ?, x2, :, x1, ;, y2, =, x, >]
[y0, :, y1, ;, x2, =, x, >, x1, ?, x2, :, x1, ;, y2, =, x, >, x1, ?]
[y1, ;, x2, =, x, >, x1, ?, x2, :, x1, ;, y2, =, x, >, x1, ?, y2, :]
[x2, =, x, >, x1, ?, x2, :, x1, ;, y2, =, x, >, x1, ?, y2, :, y1, ;]
[x, >, x1, ?, x2, :, x1, ;, y2, =, x, >, x1, ?, y2, :, y1, ;, x1, =]
[x1, ?, x2, :, x1, ;, y2, =, x, >, x1, ?, y2, :, y1, ;, x1, =, x, ;]
[x2, :, x1, ;, y2, =, x, >, x1, ?, y2, :, y1, ;, x1, =, x, ;, y1, =]
[x1, ;, y2, =, x, >, x1, ?, y2, :, y1, ;, x1, =, x, ;, y1, =, y, ;]
[y2, =, x, >, x1, ?, y2, :, y1, ;, x1, =, x, ;, y1, =, y, ;, oldx, =]
[y1, ;, x1, =, x, ;, y1, =, y, ;, oldx, =, x, ;, }, else, {, double, xm, =]
[y1, ;, x1, =, x, ;, y1, =, y, ;, oldx, =, x, ;, }, else, {, double, xm, =]
[x1, =, x, ;, y1, =, y, ;, oldx, =, x, ;, }, else, {, double, xm, =, 0.5, *]
[=, x, ;, y1, =, y, ;, oldx, =, x, ;, }, else, {, double, xm, =, 0.5, *, (]
[=, x, ;, y1, =, y, ;, oldx, =, x, ;, }, else, {, double, xm, =, 0.5, *, (]
[;, y1, =, y, ;, oldx, =, x, ;, }, else, {, double, xm, =, 0.5, *, (, x0, +]
[=, x, ;, }, else, {, double, xm, =, 0.5, *, (, x0, +, x2, ), ;, double, ym, =]
[;, }, else, {, double, xm, =, 0.5, *, (, x0, +, x2, ), ;, double, ym, =, computeObjectiveValue, (]
[xm, =, 0.5, *, (, x0, +, x2, ), ;, double, ym, =, computeObjectiveValue, (, xm, ), ;, if, (]
[xm, =, 0.5, *, (, x0, +, x2, ), ;, double, ym, =, computeObjectiveValue, (, xm, ), ;, if, (]
[xm, =, 0.5, *, (, x0, +, x2, ), ;, double, ym, =, computeObjectiveValue, (, xm, ), ;, if, (]
[xm, =, 0.5, *, (, x0, +, x2, ), ;, double, ym, =, computeObjectiveValue, (, xm, ), ;, if, (]
[(, x0, +, x2, ), ;, double, ym, =, computeObjectiveValue, (, xm, ), ;, if, (, FastMath, ., signum, (]
[x2, ), ;, double, ym, =, computeObjectiveValue, (, xm, ), ;, if, (, FastMath, ., signum, (, y0, ), +]
[x2, ), ;, double, ym, =, computeObjectiveValue, (, xm, ), ;, if, (, FastMath, ., signum, (, y0, ), +]
[ym, =, computeObjectiveValue, (, xm, ), ;, if, (, FastMath, ., signum, (, y0, ), +, FastMath, ., signum, (]
[(, xm, ), ;, if, (, FastMath, ., signum, (, y0, ), +, FastMath, ., signum, (, ym, ), ==]
[;, if, (, FastMath, ., signum, (, y0, ), +, FastMath, ., signum, (, ym, ), ==, 0.0, ), {]
[(, FastMath, ., signum, (, y0, ), +, FastMath, ., signum, (, ym, ), ==, 0.0, ), {, x2, =]
[., signum, (, y0, ), +, FastMath, ., signum, (, ym, ), ==, 0.0, ), {, x2, =, xm, ;]
[(, y0, ), +, FastMath, ., signum, (, ym, ), ==, 0.0, ), {, x2, =, xm, ;, y2, =]
[., signum, (, ym, ), ==, 0.0, ), {, x2, =, xm, ;, y2, =, ym, ;, }, else, {]
[(, ym, ), ==, 0.0, ), {, x2, =, xm, ;, y2, =, ym, ;, }, else, {, x0, =]
[), ==, 0.0, ), {, x2, =, xm, ;, y2, =, ym, ;, }, else, {, x0, =, xm, ;]
[0.0, ), {, x2, =, xm, ;, y2, =, ym, ;, }, else, {, x0, =, xm, ;, y0, =]
[x2, =, xm, ;, y2, =, ym, ;, }, else, {, x0, =, xm, ;, y0, =, ym, ;, }]
[xm, ;, y2, =, ym, ;, }, else, {, x0, =, xm, ;, y0, =, ym, ;, }, x1, =]
[xm, ;, y2, =, ym, ;, }, else, {, x0, =, xm, ;, y0, =, ym, ;, }, x1, =]
[y2, =, ym, ;, }, else, {, x0, =, xm, ;, y0, =, ym, ;, }, x1, =, 0.5, *]
[=, ym, ;, }, else, {, x0, =, xm, ;, y0, =, ym, ;, }, x1, =, 0.5, *, (]
[=, ym, ;, }, else, {, x0, =, xm, ;, y0, =, ym, ;, }, x1, =, 0.5, *, (]
[;, }, else, {, x0, =, xm, ;, y0, =, ym, ;, }, x1, =, 0.5, *, (, x0, +]
[{, x0, =, xm, ;, y0, =, ym, ;, }, x1, =, 0.5, *, (, x0, +, x2, ), ;]
[=, xm, ;, y0, =, ym, ;, }, x1, =, 0.5, *, (, x0, +, x2, ), ;, y1, =]
[;, y0, =, ym, ;, }, x1, =, 0.5, *, (, x0, +, x2, ), ;, y1, =, computeObjectiveValue, (]
[ym, ;, }, x1, =, 0.5, *, (, x0, +, x2, ), ;, y1, =, computeObjectiveValue, (, x1, ), ;]
[}, x1, =, 0.5, *, (, x0, +, x2, ), ;, y1, =, computeObjectiveValue, (, x1, ), ;, oldx, =]
[}, x1, =, 0.5, *, (, x0, +, x2, ), ;, y1, =, computeObjectiveValue, (, x1, ), ;, oldx, =]
