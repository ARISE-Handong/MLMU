[;, private, DateTickUnitType, unitType, ;, private, int, count, ;, private, DateTickUnitType, rollUnitType, ;, private, int, rollCount, ;, private, DateFormat, formatter]
[;, private, DateTickUnitType, unitType, ;, private, int, count, ;, private, DateTickUnitType, rollUnitType, ;, private, int, rollCount, ;, private, DateFormat, formatter]
[,, multiple, ,, DateFormat, ., getDateInstance, (, DateFormat, ., SHORT, ), ), ;, }, public, DateTickUnit, (, DateTickUnitType, unitType, ,]
[,, DateFormat, ., getDateInstance, (, DateFormat, ., SHORT, ), ), ;, }, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple]
[), ;, }, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateFormat, formatter, ), {, this, (, unitType, ,]
[., getDateInstance, (, DateFormat, ., SHORT, ), ), ;, }, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateFormat]
[), ), ;, }, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateFormat, formatter, ), {, this, (, unitType]
[., SHORT, ), ), ;, }, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateFormat, formatter, ), {, this]
[,, multiple, ,, unitType, ,, multiple, ,, formatter, ), ;, }, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,]
[,, unitType, ,, multiple, ,, formatter, ), ;, }, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateTickUnitType, rollUnitType]
[,, multiple, ,, formatter, ), ;, }, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateTickUnitType, rollUnitType, ,, int]
[,, formatter, ), ;, }, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateTickUnitType, rollUnitType, ,, int, rollMultiple, ,]
[), ;, }, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateTickUnitType, rollUnitType, ,, int, rollMultiple, ,, DateFormat, formatter]
[), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, if, (, multiple]
[., getMillisecondCount, (, unitType, ,, multiple, ), ), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (]
[,, multiple, ), ), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }]
[), ), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, if, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, if, (, multiple, <=, 0, ), {, throw, new, IllegalArgumentException]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, if, (, multiple, <=, 0, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, if, (, multiple, <=, 0, ), {, throw, new, IllegalArgumentException]
[;, }, if, (, multiple, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'multiple' > 0.", ), ;, }, if, (, rollMultiple]
[), ;, }, if, (, multiple, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'multiple' > 0.", ), ;, }, if, (]
[), {, throw, new, IllegalArgumentException, (, "Requires 'multiple' > 0.", ), ;, }, if, (, rollMultiple, <=, 0, ), {, throw, new, IllegalArgumentException]
[<=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'multiple' > 0.", ), ;, }, if, (, rollMultiple, <=, 0, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Requires 'multiple' > 0.", ), ;, }, if, (, rollMultiple, <=, 0, ), {, throw, new, IllegalArgumentException]
[;, }, if, (, rollMultiple, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", ), ;, }, this, ., unitType]
[), ;, }, if, (, rollMultiple, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", ), ;, }, this, .]
[), {, throw, new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", ), ;, }, this, ., unitType, =, unitType, ;, this, ., count, =]
[<=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", ), ;, }, this, ., unitType, =, unitType, ;, this, .]
[), {, throw, new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", ), ;, }, this, ., unitType, =, unitType, ;, this, ., count, =]
[;, }, this, ., unitType, =, unitType, ;, this, ., count, =, multiple, ;, this, ., rollUnitType, =, rollUnitType, ;]
[), ;, }, this, ., unitType, =, unitType, ;, this, ., count, =, multiple, ;, this, ., rollUnitType, =, rollUnitType]
[=, unitType, ;, this, ., count, =, multiple, ;, this, ., rollUnitType, =, rollUnitType, ;, this, ., rollCount, =, rollMultiple]
[., unitType, =, unitType, ;, this, ., count, =, multiple, ;, this, ., rollUnitType, =, rollUnitType, ;, this, ., rollCount]
[;, this, ., count, =, multiple, ;, this, ., rollUnitType, =, rollUnitType, ;, this, ., rollCount, =, rollMultiple, ;, this]
[=, multiple, ;, this, ., rollUnitType, =, rollUnitType, ;, this, ., rollCount, =, rollMultiple, ;, this, ., formatter, =, formatter]
[., count, =, multiple, ;, this, ., rollUnitType, =, rollUnitType, ;, this, ., rollCount, =, rollMultiple, ;, this, ., formatter]
[;, this, ., rollUnitType, =, rollUnitType, ;, this, ., rollCount, =, rollMultiple, ;, this, ., formatter, =, formatter, ;, }]
[=, rollUnitType, ;, this, ., rollCount, =, rollMultiple, ;, this, ., formatter, =, formatter, ;, }, public, DateTickUnitType, getUnitType, (]
[., rollUnitType, =, rollUnitType, ;, this, ., rollCount, =, rollMultiple, ;, this, ., formatter, =, formatter, ;, }, public, DateTickUnitType]
[;, this, ., rollCount, =, rollMultiple, ;, this, ., formatter, =, formatter, ;, }, public, DateTickUnitType, getUnitType, (, ), {]
[=, rollMultiple, ;, this, ., formatter, =, formatter, ;, }, public, DateTickUnitType, getUnitType, (, ), {, return, this, ., unitType]
[., rollCount, =, rollMultiple, ;, this, ., formatter, =, formatter, ;, }, public, DateTickUnitType, getUnitType, (, ), {, return, this]
[;, this, ., formatter, =, formatter, ;, }, public, DateTickUnitType, getUnitType, (, ), {, return, this, ., unitType, ;, }]
[=, formatter, ;, }, public, DateTickUnitType, getUnitType, (, ), {, return, this, ., unitType, ;, }, public, int, getMultiple, (]
[., formatter, =, formatter, ;, }, public, DateTickUnitType, getUnitType, (, ), {, return, this, ., unitType, ;, }, public, int]
[;, }, public, DateTickUnitType, getUnitType, (, ), {, return, this, ., unitType, ;, }, public, int, getMultiple, (, ), {]
[;, }, public, int, getMultiple, (, ), {, return, this, ., count, ;, }, public, DateTickUnitType, getRollUnitType, (, ), {]
[., unitType, ;, }, public, int, getMultiple, (, ), {, return, this, ., count, ;, }, public, DateTickUnitType, getRollUnitType, (]
[;, }, public, DateTickUnitType, getRollUnitType, (, ), {, return, this, ., rollUnitType, ;, }, public, int, getRollMultiple, (, ), {]
[., count, ;, }, public, DateTickUnitType, getRollUnitType, (, ), {, return, this, ., rollUnitType, ;, }, public, int, getRollMultiple, (]
[;, }, public, int, getRollMultiple, (, ), {, return, this, ., rollCount, ;, }, public, String, valueToString, (, double, milliseconds]
[., rollUnitType, ;, }, public, int, getRollMultiple, (, ), {, return, this, ., rollCount, ;, }, public, String, valueToString, (]
[;, }, public, String, valueToString, (, double, milliseconds, ), {, return, this, ., formatter, ., format, (, new, Date, (]
[., rollCount, ;, }, public, String, valueToString, (, double, milliseconds, ), {, return, this, ., formatter, ., format, (, new]
[;, }, public, String, dateToString, (, Date, date, ), {, return, this, ., formatter, ., format, (, date, ), ;]
[., format, (, new, Date, (, (, long, ), milliseconds, ), ), ;, }, public, String, dateToString, (, Date, date]
[., formatter, ., format, (, new, Date, (, (, long, ), milliseconds, ), ), ;, }, public, String, dateToString, (]
[), ;, }, public, String, dateToString, (, Date, date, ), {, return, this, ., formatter, ., format, (, date, )]
[), ), ;, }, public, String, dateToString, (, Date, date, ), {, return, this, ., formatter, ., format, (, date]
[), ), ;, }, public, String, dateToString, (, Date, date, ), {, return, this, ., formatter, ., format, (, date]
[;, }, public, Date, addToDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (]
[., format, (, date, ), ;, }, public, Date, addToDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar]
[., formatter, ., format, (, date, ), ;, }, public, Date, addToDate, (, Date, base, ,, TimeZone, zone, ), {]
[), ;, }, public, Date, addToDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =, Calendar, ., getInstance]
[;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (, this, ., unitType, ., getCalendarField, (, ), ,]
[., getInstance, (, zone, ), ;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (, this, ., unitType]
[), ;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (, this, ., unitType, ., getCalendarField, (, )]
[;, calendar, ., add, (, this, ., unitType, ., getCalendarField, (, ), ,, this, ., count, ), ;, return, calendar]
[., setTime, (, base, ), ;, calendar, ., add, (, this, ., unitType, ., getCalendarField, (, ), ,, this, .]
[), ;, calendar, ., add, (, this, ., unitType, ., getCalendarField, (, ), ,, this, ., count, ), ;, return]
[;, return, calendar, ., getTime, (, ), ;, }, public, Date, rollDate, (, Date, base, ), {, return, rollDate, (]
[., add, (, this, ., unitType, ., getCalendarField, (, ), ,, this, ., count, ), ;, return, calendar, ., getTime]
[,, this, ., count, ), ;, return, calendar, ., getTime, (, ), ;, }, public, Date, rollDate, (, Date, base]
[., getCalendarField, (, ), ,, this, ., count, ), ;, return, calendar, ., getTime, (, ), ;, }, public, Date]
[., unitType, ., getCalendarField, (, ), ,, this, ., count, ), ;, return, calendar, ., getTime, (, ), ;, }]
[), ;, return, calendar, ., getTime, (, ), ;, }, public, Date, rollDate, (, Date, base, ), {, return, rollDate]
[., count, ), ;, return, calendar, ., getTime, (, ), ;, }, public, Date, rollDate, (, Date, base, ), {]
[;, }, public, Date, rollDate, (, Date, base, ), {, return, rollDate, (, base, ,, TimeZone, ., getDefault, (, )]
[., getTime, (, ), ;, }, public, Date, rollDate, (, Date, base, ), {, return, rollDate, (, base, ,, TimeZone]
[;, }, public, Date, rollDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (]
[,, TimeZone, ., getDefault, (, ), ), ;, }, public, Date, rollDate, (, Date, base, ,, TimeZone, zone, ), {]
[), ;, }, public, Date, rollDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =, Calendar, ., getInstance]
[., getDefault, (, ), ), ;, }, public, Date, rollDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar]
[;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (, this, ., rollUnitType, ., getCalendarField, (, ), ,]
[., getInstance, (, zone, ), ;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (, this, ., rollUnitType]
[), ;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (, this, ., rollUnitType, ., getCalendarField, (, )]
[;, calendar, ., add, (, this, ., rollUnitType, ., getCalendarField, (, ), ,, this, ., rollCount, ), ;, return, calendar]
[., setTime, (, base, ), ;, calendar, ., add, (, this, ., rollUnitType, ., getCalendarField, (, ), ,, this, .]
[), ;, calendar, ., add, (, this, ., rollUnitType, ., getCalendarField, (, ), ,, this, ., rollCount, ), ;, return]
[;, return, calendar, ., getTime, (, ), ;, }, public, int, getCalendarField, (, ), {, return, this, ., unitType, .]
[., add, (, this, ., rollUnitType, ., getCalendarField, (, ), ,, this, ., rollCount, ), ;, return, calendar, ., getTime]
[,, this, ., rollCount, ), ;, return, calendar, ., getTime, (, ), ;, }, public, int, getCalendarField, (, ), {]
[., getCalendarField, (, ), ,, this, ., rollCount, ), ;, return, calendar, ., getTime, (, ), ;, }, public, int]
[., rollUnitType, ., getCalendarField, (, ), ,, this, ., rollCount, ), ;, return, calendar, ., getTime, (, ), ;, }]
[), ;, return, calendar, ., getTime, (, ), ;, }, public, int, getCalendarField, (, ), {, return, this, ., unitType]
[., rollCount, ), ;, return, calendar, ., getTime, (, ), ;, }, public, int, getCalendarField, (, ), {, return, this]
[;, }, public, int, getCalendarField, (, ), {, return, this, ., unitType, ., getCalendarField, (, ), ;, }, private, static]
[., getTime, (, ), ;, }, public, int, getCalendarField, (, ), {, return, this, ., unitType, ., getCalendarField, (, )]
[;, }, private, static, long, getMillisecondCount, (, DateTickUnitType, unit, ,, int, count, ), {, if, (, unit, ., equals, (]
[., getCalendarField, (, ), ;, }, private, static, long, getMillisecondCount, (, DateTickUnitType, unit, ,, int, count, ), {, if, (]
[., unitType, ., getCalendarField, (, ), ;, }, private, static, long, getMillisecondCount, (, DateTickUnitType, unit, ,, int, count, ), {]
[), {, return, (, 365L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if]
[., equals, (, DateTickUnitType, ., YEAR, ), ), {, return, (, 365L, *, 24L, *, 60L, *, 60L, *, 1000L]
[), ), {, return, (, 365L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else]
[., YEAR, ), ), {, return, (, 365L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;]
[;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (, 31L, *, 24L]
[*, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (, 31L]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (]
[*, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {]
[*, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, )]
[*, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, .]
[*, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (]
[*, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, .]
[*, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, )]
[*, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (]
[;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (, 31L, *, 24L]
[), {, return, (, 31L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if]
[., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (, 31L, *, 24L, *, 60L, *, 60L, *, 1000L]
[), ), {, return, (, 31L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else]
[., MONTH, ), ), {, return, (, 31L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;]
[;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (, 24L, *, 60L]
[*, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (, 24L]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (]
[*, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {]
[*, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, )]
[*, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, .]
[*, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (]
[*, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, .]
[*, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, )]
[*, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (]
[;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (, 24L, *, 60L]
[), {, return, (, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit]
[., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (, 24L, *, 60L, *, 60L, *, 1000L, ), *]
[), ), {, return, (, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (]
[., DAY, ), ), {, return, (, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else]
[;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {, return, (, 60L, *, 60L]
[*, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {, return, (, 60L]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {, return, (]
[*, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {]
[*, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, )]
[*, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, .]
[*, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, )]
[*, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {, return, (]
[;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {, return, (, 60L, *, 60L]
[), {, return, (, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals]
[., equals, (, DateTickUnitType, ., HOUR, ), ), {, return, (, 60L, *, 60L, *, 1000L, ), *, count, ;]
[), ), {, return, (, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, .]
[., HOUR, ), ), {, return, (, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (]
[;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, ), ), {, return, (, 60L, *, 1000L]
[*, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, ), ), {, return, (, 60L]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, ), ), {, return, (]
[*, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, ), ), {]
[*, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, )]
[*, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, ), ), {]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, ), ), {, return, (]
[;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, ), ), {, return, (, 60L, *, 1000L]
[), {, return, (, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType]
[., equals, (, DateTickUnitType, ., MINUTE, ), ), {, return, (, 60L, *, 1000L, ), *, count, ;, }, else]
[), ), {, return, (, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (]
[., MINUTE, ), ), {, return, (, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, .]
[;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., SECOND, ), ), {, return, 1000L, *, count, ;]
[*, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., SECOND, ), ), {, return, 1000L, *]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., SECOND, ), ), {, return, 1000L]
[*, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., SECOND, ), ), {]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., SECOND, ), ), {, return, 1000L]
[;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., SECOND, ), ), {, return, 1000L, *, count, ;]
[), {, return, 1000L, *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MILLISECOND, ), )]
[., equals, (, DateTickUnitType, ., SECOND, ), ), {, return, 1000L, *, count, ;, }, else, if, (, unit, .]
[), ), {, return, 1000L, *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MILLISECOND, )]
[., SECOND, ), ), {, return, 1000L, *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, .]
[;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MILLISECOND, ), ), {, return, count, ;, }, else]
[*, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MILLISECOND, ), ), {, return, count, ;]
[;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MILLISECOND, ), ), {, return, count, ;, }, else]
[), {, return, count, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'unit' argument has a ", +, "value that is not recognised.", ), ;, }, }, private]
[., equals, (, DateTickUnitType, ., MILLISECOND, ), ), {, return, count, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'unit' argument has a "]
[), ), {, return, count, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'unit' argument has a ", +, "value that is not recognised.", ), ;, }, }]
[., MILLISECOND, ), ), {, return, count, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'unit' argument has a ", +, "value that is not recognised.", ), ;]
[;, }, else, {, throw, new, IllegalArgumentException, (, "The 'unit' argument has a ", +, "value that is not recognised.", ), ;, }, }, private, static, DateFormat, notNull, (]
[;, }, }, private, static, DateFormat, notNull, (, DateFormat, formatter, ), {, if, (, formatter, ==, null, ), {, return]
[), ;, }, }, private, static, DateFormat, notNull, (, DateFormat, formatter, ), {, if, (, formatter, ==, null, ), {]
[+, "value that is not recognised.", ), ;, }, }, private, static, DateFormat, notNull, (, DateFormat, formatter, ), {, if, (, formatter, ==, null]
[), ;, }, }, private, static, DateFormat, notNull, (, DateFormat, formatter, ), {, if, (, formatter, ==, null, ), {]
[), {, return, DateFormat, ., getDateInstance, (, DateFormat, ., SHORT, ), ;, }, else, {, return, formatter, ;, }, }]
[==, null, ), {, return, DateFormat, ., getDateInstance, (, DateFormat, ., SHORT, ), ;, }, else, {, return, formatter, ;]
[), {, return, DateFormat, ., getDateInstance, (, DateFormat, ., SHORT, ), ;, }, else, {, return, formatter, ;, }, }]
[;, }, else, {, return, formatter, ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj]
[., getDateInstance, (, DateFormat, ., SHORT, ), ;, }, else, {, return, formatter, ;, }, }, public, boolean, equals, (]
[), ;, }, else, {, return, formatter, ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[., SHORT, ), ;, }, else, {, return, formatter, ;, }, }, public, boolean, equals, (, Object, obj, ), {]
[;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, DateTickUnit, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, DateTickUnit, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, DateTickUnit, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, DateTickUnit, ), ), {, return, false, ;, }, if, (, !, super]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false]
[instanceof, DateTickUnit, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, DateTickUnit, that, =]
[), {, return, false, ;, }, DateTickUnit, that, =, (, DateTickUnit, ), obj, ;, if, (, !, (, this, .]
[), {, return, false, ;, }, DateTickUnit, that, =, (, DateTickUnit, ), obj, ;, if, (, !, (, this, .]
[., equals, (, obj, ), ), {, return, false, ;, }, DateTickUnit, that, =, (, DateTickUnit, ), obj, ;, if]
[), ), {, return, false, ;, }, DateTickUnit, that, =, (, DateTickUnit, ), obj, ;, if, (, !, (, this]
[;, }, DateTickUnit, that, =, (, DateTickUnit, ), obj, ;, if, (, !, (, this, ., unitType, ., equals, (]
[;, if, (, !, (, this, ., unitType, ., equals, (, that, ., unitType, ), ), ), {, return, false]
[;, if, (, !, (, this, ., unitType, ., equals, (, that, ., unitType, ), ), ), {, return, false]
[), {, return, false, ;, }, if, (, this, ., count, !=, that, ., count, ), {, return, false, ;]
[), {, return, false, ;, }, if, (, this, ., count, !=, that, ., count, ), {, return, false, ;]
[), ), {, return, false, ;, }, if, (, this, ., count, !=, that, ., count, ), {, return, false]
[., equals, (, that, ., unitType, ), ), ), {, return, false, ;, }, if, (, this, ., count, !=]
[., unitType, ., equals, (, that, ., unitType, ), ), ), {, return, false, ;, }, if, (, this, .]
[), ), ), {, return, false, ;, }, if, (, this, ., count, !=, that, ., count, ), {, return]
[., unitType, ), ), ), {, return, false, ;, }, if, (, this, ., count, !=, that, ., count, )]
[;, }, if, (, this, ., count, !=, that, ., count, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., formatter, ,, that, ., formatter]
[!=, that, ., count, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., formatter]
[., count, !=, that, ., count, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., formatter, ,, that, ., formatter]
[., count, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., formatter, ,, that]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., formatter, ,, that, ., formatter, ), ), {, return]
[), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, 19]
[), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, 19]
[., equal, (, this, ., formatter, ,, that, ., formatter, ), ), {, return, false, ;, }, return, true, ;]
[,, that, ., formatter, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, )]
[., formatter, ,, that, ., formatter, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode]
[), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =]
[., formatter, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int]
[;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, 19, ;, result, =, 37]
[;, }, public, int, hashCode, (, ), {, int, result, =, 19, ;, result, =, 37, *, result, +, this]
[;, result, =, 37, *, result, +, this, ., unitType, ., hashCode, (, ), ;, result, =, 37, *, result]
[=, 37, *, result, +, this, ., unitType, ., hashCode, (, ), ;, result, =, 37, *, result, +, this]
[;, result, =, 37, *, result, +, this, ., count, ;, result, =, 37, *, result, +, this, ., formatter]
[+, this, ., unitType, ., hashCode, (, ), ;, result, =, 37, *, result, +, this, ., count, ;, result]
[*, result, +, this, ., unitType, ., hashCode, (, ), ;, result, =, 37, *, result, +, this, ., count]
[+, this, ., unitType, ., hashCode, (, ), ;, result, =, 37, *, result, +, this, ., count, ;, result]
[;, result, =, 37, *, result, +, this, ., count, ;, result, =, 37, *, result, +, this, ., formatter]
[., hashCode, (, ), ;, result, =, 37, *, result, +, this, ., count, ;, result, =, 37, *, result]
[., unitType, ., hashCode, (, ), ;, result, =, 37, *, result, +, this, ., count, ;, result, =, 37]
[=, 37, *, result, +, this, ., count, ;, result, =, 37, *, result, +, this, ., formatter, ., hashCode]
[;, result, =, 37, *, result, +, this, ., formatter, ., hashCode, (, ), ;, return, result, ;, }, public]
[+, this, ., count, ;, result, =, 37, *, result, +, this, ., formatter, ., hashCode, (, ), ;, return]
[*, result, +, this, ., count, ;, result, =, 37, *, result, +, this, ., formatter, ., hashCode, (, )]
[+, this, ., count, ;, result, =, 37, *, result, +, this, ., formatter, ., hashCode, (, ), ;, return]
[;, result, =, 37, *, result, +, this, ., formatter, ., hashCode, (, ), ;, return, result, ;, }, public]
[., count, ;, result, =, 37, *, result, +, this, ., formatter, ., hashCode, (, ), ;, return, result, ;]
[=, 37, *, result, +, this, ., formatter, ., hashCode, (, ), ;, return, result, ;, }, public, String, toString]
[;, return, result, ;, }, public, String, toString, (, ), {, return, "DateTickUnit[", +, this, ., unitType, ., toString, (]
[+, this, ., formatter, ., hashCode, (, ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[*, result, +, this, ., formatter, ., hashCode, (, ), ;, return, result, ;, }, public, String, toString, (, )]
[+, this, ., formatter, ., hashCode, (, ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[;, return, result, ;, }, public, String, toString, (, ), {, return, "DateTickUnit[", +, this, ., unitType, ., toString, (]
[., hashCode, (, ), ;, return, result, ;, }, public, String, toString, (, ), {, return, "DateTickUnit[", +, this, .]
[., formatter, ., hashCode, (, ), ;, return, result, ;, }, public, String, toString, (, ), {, return, "DateTickUnit[", +]
[;, }, public, String, toString, (, ), {, return, "DateTickUnit[", +, this, ., unitType, ., toString, (, ), +, ", "]
[;, }, }]
[+, "]", ;, }, }]
[+, this, ., count, +, "]", ;, }, }]
[+, ", ", +, this, ., count, +, "]", ;, }, }]
[+, this, ., unitType, ., toString, (, ), +, ", ", +, this, ., count, +, "]", ;, }, }]
[+, ", ", +, this, ., count, +, "]", ;, }, }]
[., toString, (, ), +, ", ", +, this, ., count, +, "]", ;, }, }]
[., unitType, ., toString, (, ), +, ", ", +, this, ., count, +, "]", ;, }, }]
[+, this, ., count, +, "]", ;, }, }]
[+, "]", ;, }, }]
[., count, +, "]", ;, }, }]
[;, }, }]
