[;, public, static, final, String, DEFAULT_FILENAME_PREFIX, =, ".", +, MODULE_SLASH, ;, private, static, final, String, MODULE_NAME_SEPARATOR, =, "\\$", ;, private]
[;, private, static, final, String, MODULE_NAME_SEPARATOR, =, "\\$", ;, private, static, final, String, MODULE_NAME_PREFIX, =, "module$", ;, private, final, AbstractCompiler]
[+, MODULE_SLASH, ;, private, static, final, String, MODULE_NAME_SEPARATOR, =, "\\$", ;, private, static, final, String, MODULE_NAME_PREFIX, =, "module$", ;, private]
[;, private, static, final, String, MODULE_NAME_SEPARATOR, =, "\\$", ;, private, static, final, String, MODULE_NAME_PREFIX, =, "module$", ;, private, final, AbstractCompiler]
[;, private, static, final, String, MODULE_NAME_PREFIX, =, "module$", ;, private, final, AbstractCompiler, compiler, ;, private, final, String, filenamePrefix, ;, private]
[;, private, final, AbstractCompiler, compiler, ;, private, final, String, filenamePrefix, ;, private, final, boolean, reportDependencies, ;, private, JSModule, module, ;]
[,, filenamePrefix, ,, true, ), ;, }, ProcessCommonJSModules, (, AbstractCompiler, compiler, ,, String, filenamePrefix, ,, boolean, reportDependencies, ), {, this]
[,, true, ), ;, }, ProcessCommonJSModules, (, AbstractCompiler, compiler, ,, String, filenamePrefix, ,, boolean, reportDependencies, ), {, this, ., compiler]
[), ;, }, ProcessCommonJSModules, (, AbstractCompiler, compiler, ,, String, filenamePrefix, ,, boolean, reportDependencies, ), {, this, ., compiler, =, compiler]
[=, compiler, ;, this, ., filenamePrefix, =, filenamePrefix, ., endsWith, (, MODULE_SLASH, ), ?, filenamePrefix, :, filenamePrefix, +, MODULE_SLASH, ;]
[., compiler, =, compiler, ;, this, ., filenamePrefix, =, filenamePrefix, ., endsWith, (, MODULE_SLASH, ), ?, filenamePrefix, :, filenamePrefix, +]
[;, this, ., filenamePrefix, =, filenamePrefix, ., endsWith, (, MODULE_SLASH, ), ?, filenamePrefix, :, filenamePrefix, +, MODULE_SLASH, ;, this, .]
[=, filenamePrefix, ., endsWith, (, MODULE_SLASH, ), ?, filenamePrefix, :, filenamePrefix, +, MODULE_SLASH, ;, this, ., reportDependencies, =, reportDependencies, ;]
[., filenamePrefix, =, filenamePrefix, ., endsWith, (, MODULE_SLASH, ), ?, filenamePrefix, :, filenamePrefix, +, MODULE_SLASH, ;, this, ., reportDependencies, =]
[;, this, ., reportDependencies, =, reportDependencies, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[?, filenamePrefix, :, filenamePrefix, +, MODULE_SLASH, ;, this, ., reportDependencies, =, reportDependencies, ;, }, @, Override, public, void, process, (]
[., endsWith, (, MODULE_SLASH, ), ?, filenamePrefix, :, filenamePrefix, +, MODULE_SLASH, ;, this, ., reportDependencies, =, reportDependencies, ;, }, @]
[), ?, filenamePrefix, :, filenamePrefix, +, MODULE_SLASH, ;, this, ., reportDependencies, =, reportDependencies, ;, }, @, Override, public, void, process]
[:, filenamePrefix, +, MODULE_SLASH, ;, this, ., reportDependencies, =, reportDependencies, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., reportDependencies, =, reportDependencies, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[+, MODULE_SLASH, ;, this, ., reportDependencies, =, reportDependencies, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[;, this, ., reportDependencies, =, reportDependencies, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, reportDependencies, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., reportDependencies, =, reportDependencies, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, String, guessCJSModuleName, (, String, filename, ), {, return, toModuleName, (, normalizeSourceName, (, filename, ), ), ;, }, JSModule]
[., traverse, (, compiler, ,, root, ,, new, ProcessCommonJsModulesCallback, (, ), ), ;, }, String, guessCJSModuleName, (, String, filename, )]
[,, root, ,, new, ProcessCommonJsModulesCallback, (, ), ), ;, }, String, guessCJSModuleName, (, String, filename, ), {, return, toModuleName, (]
[,, new, ProcessCommonJsModulesCallback, (, ), ), ;, }, String, guessCJSModuleName, (, String, filename, ), {, return, toModuleName, (, normalizeSourceName, (]
[), ;, }, String, guessCJSModuleName, (, String, filename, ), {, return, toModuleName, (, normalizeSourceName, (, filename, ), ), ;, }]
[;, }, JSModule, getModule, (, ), {, return, module, ;, }, public, static, String, toModuleName, (, String, filename, ), {]
[), ;, }, JSModule, getModule, (, ), {, return, module, ;, }, public, static, String, toModuleName, (, String, filename, )]
[), ), ;, }, JSModule, getModule, (, ), {, return, module, ;, }, public, static, String, toModuleName, (, String, filename]
[;, }, public, static, String, toModuleName, (, String, filename, ), {, return, MODULE_NAME_PREFIX, +, filename, ., replaceAll, (, "^\\.", +]
[;, }, public, static, String, toModuleName, (, String, requiredFilename, ,, String, currentFilename, ), {, requiredFilename, =, requiredFilename, ., replaceAll, (]
[+, filename, ., replaceAll, (, "^\\.", +, Pattern, ., quote, (, MODULE_SLASH, ), ,, "", ), ., replaceAll, (, Pattern]
[;, }, public, static, String, toModuleName, (, String, requiredFilename, ,, String, currentFilename, ), {, requiredFilename, =, requiredFilename, ., replaceAll, (]
[., replaceAll, (, "-", ,, "_", ), ;, }, public, static, String, toModuleName, (, String, requiredFilename, ,, String, currentFilename, )]
[., replaceAll, (, "\\.js$", ,, "", ), ., replaceAll, (, "-", ,, "_", ), ;, }, public, static, String, toModuleName]
[., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$", ,, "", ), .]
[., replaceAll, (, "^\\.", +, Pattern, ., quote, (, MODULE_SLASH, ), ,, "", ), ., replaceAll, (, Pattern, ., quote]
[,, "", ), ., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$", ,]
[+, Pattern, ., quote, (, MODULE_SLASH, ), ,, "", ), ., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,]
[,, "", ), ., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$", ,]
[., quote, (, MODULE_SLASH, ), ,, "", ), ., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, )]
[), ,, "", ), ., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$"]
[), ., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$", ,, "", )]
[,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$", ,, "", ), ., replaceAll, (, "-", ,, "_", ), ;, }, public]
[., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$", ,, "", ), ., replaceAll, (, "-", ,]
[), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$", ,, "", ), ., replaceAll, (, "-", ,, "_", ), ;, }]
[), ., replaceAll, (, "\\.js$", ,, "", ), ., replaceAll, (, "-", ,, "_", ), ;, }, public, static, String]
[,, "", ), ., replaceAll, (, "-", ,, "_", ), ;, }, public, static, String, toModuleName, (, String, requiredFilename, ,]
[), ., replaceAll, (, "-", ,, "_", ), ;, }, public, static, String, toModuleName, (, String, requiredFilename, ,, String, currentFilename]
[,, "_", ), ;, }, public, static, String, toModuleName, (, String, requiredFilename, ,, String, currentFilename, ), {, requiredFilename, =, requiredFilename]
[), ;, }, public, static, String, toModuleName, (, String, requiredFilename, ,, String, currentFilename, ), {, requiredFilename, =, requiredFilename, ., replaceAll]
[=, requiredFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, currentFilename, =, currentFilename, ., replaceAll, (, "\\.js$", ,, "", )]
[;, currentFilename, =, currentFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, if, (, requiredFilename, ., startsWith, (, ".", +]
[., replaceAll, (, "\\.js$", ,, "", ), ;, currentFilename, =, currentFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, if]
[,, "", ), ;, currentFilename, =, currentFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, if, (, requiredFilename, ., startsWith]
[), ;, currentFilename, =, currentFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, if, (, requiredFilename, ., startsWith, (, "."]
[=, currentFilename, ., replaceAll, (, "\\.js$", ,, "", ), ;, if, (, requiredFilename, ., startsWith, (, ".", +, MODULE_SLASH, )]
[;, if, (, requiredFilename, ., startsWith, (, ".", +, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, )]
[., replaceAll, (, "\\.js$", ,, "", ), ;, if, (, requiredFilename, ., startsWith, (, ".", +, MODULE_SLASH, ), ||, requiredFilename]
[,, "", ), ;, if, (, requiredFilename, ., startsWith, (, ".", +, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (, ".."]
[), ;, if, (, requiredFilename, ., startsWith, (, ".", +, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH]
[), {, try, {, requiredFilename, =, (, new, URI, (, currentFilename, ), ), ., resolve, (, new, URI, (, requiredFilename]
[||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, ), ), {, try, {, requiredFilename, =, (, new, URI, (, currentFilename]
[., startsWith, (, ".", +, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, ), ), {, try, {]
[), ||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, ), ), {, try, {, requiredFilename, =, (, new, URI, (]
[+, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, ), ), {, try, {, requiredFilename, =, (, new]
[), ||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, ), ), {, try, {, requiredFilename, =, (, new, URI, (]
[), {, try, {, requiredFilename, =, (, new, URI, (, currentFilename, ), ), ., resolve, (, new, URI, (, requiredFilename]
[., startsWith, (, "..", +, MODULE_SLASH, ), ), {, try, {, requiredFilename, =, (, new, URI, (, currentFilename, ), )]
[), ), {, try, {, requiredFilename, =, (, new, URI, (, currentFilename, ), ), ., resolve, (, new, URI, (]
[+, MODULE_SLASH, ), ), {, try, {, requiredFilename, =, (, new, URI, (, currentFilename, ), ), ., resolve, (, new]
[), ), {, try, {, requiredFilename, =, (, new, URI, (, currentFilename, ), ), ., resolve, (, new, URI, (]
[=, (, new, URI, (, currentFilename, ), ), ., resolve, (, new, URI, (, requiredFilename, ), ), ., toString, (]
[;, }, catch, (, URISyntaxException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, }, return, toModuleName, (]
[., toString, (, ), ;, }, catch, (, URISyntaxException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }]
[., resolve, (, new, URI, (, requiredFilename, ), ), ., toString, (, ), ;, }, catch, (, URISyntaxException, e, )]
[), ., resolve, (, new, URI, (, requiredFilename, ), ), ., toString, (, ), ;, }, catch, (, URISyntaxException, e]
[), ), ., resolve, (, new, URI, (, requiredFilename, ), ), ., toString, (, ), ;, }, catch, (, URISyntaxException]
[), ., toString, (, ), ;, }, catch, (, URISyntaxException, e, ), {, throw, new, RuntimeException, (, e, ), ;]
[), ), ., toString, (, ), ;, }, catch, (, URISyntaxException, e, ), {, throw, new, RuntimeException, (, e, )]
[;, }, }, return, toModuleName, (, requiredFilename, ), ;, }, private, String, normalizeSourceName, (, String, filename, ), {, filename, =]
[), ;, }, }, return, toModuleName, (, requiredFilename, ), ;, }, private, String, normalizeSourceName, (, String, filename, ), {, filename]
[;, }, private, String, normalizeSourceName, (, String, filename, ), {, filename, =, filename, ., replace, (, "\\", ,, "/", )]
[), ;, }, private, String, normalizeSourceName, (, String, filename, ), {, filename, =, filename, ., replace, (, "\\", ,, "/"]
[=, filename, ., replace, (, "\\", ,, "/", ), ;, if, (, filename, ., indexOf, (, filenamePrefix, ), ==, 0]
[;, if, (, filename, ., indexOf, (, filenamePrefix, ), ==, 0, ), {, filename, =, filename, ., substring, (, filenamePrefix]
[., replace, (, "\\", ,, "/", ), ;, if, (, filename, ., indexOf, (, filenamePrefix, ), ==, 0, ), {]
[,, "/", ), ;, if, (, filename, ., indexOf, (, filenamePrefix, ), ==, 0, ), {, filename, =, filename, .]
[), ;, if, (, filename, ., indexOf, (, filenamePrefix, ), ==, 0, ), {, filename, =, filename, ., substring, (]
[), {, filename, =, filename, ., substring, (, filenamePrefix, ., length, (, ), ), ;, }, return, filename, ;, }]
[==, 0, ), {, filename, =, filename, ., substring, (, filenamePrefix, ., length, (, ), ), ;, }, return, filename]
[., indexOf, (, filenamePrefix, ), ==, 0, ), {, filename, =, filename, ., substring, (, filenamePrefix, ., length, (, )]
[), ==, 0, ), {, filename, =, filename, ., substring, (, filenamePrefix, ., length, (, ), ), ;, }, return]
[), {, filename, =, filename, ., substring, (, filenamePrefix, ., length, (, ), ), ;, }, return, filename, ;, }]
[=, filename, ., substring, (, filenamePrefix, ., length, (, ), ), ;, }, return, filename, ;, }, private, class, ProcessCommonJsModulesCallback]
[;, }, return, filename, ;, }, private, class, ProcessCommonJsModulesCallback, extends, AbstractPostOrderCallback, {, private, int, scriptNodeCount, =, 0, ;, private, Set]
[., substring, (, filenamePrefix, ., length, (, ), ), ;, }, return, filename, ;, }, private, class, ProcessCommonJsModulesCallback, extends, AbstractPostOrderCallback]
[), ;, }, return, filename, ;, }, private, class, ProcessCommonJsModulesCallback, extends, AbstractPostOrderCallback, {, private, int, scriptNodeCount, =, 0, ;, private]
[., length, (, ), ), ;, }, return, filename, ;, }, private, class, ProcessCommonJsModulesCallback, extends, AbstractPostOrderCallback, {, private, int, scriptNodeCount]
[;, }, private, class, ProcessCommonJsModulesCallback, extends, AbstractPostOrderCallback, {, private, int, scriptNodeCount, =, 0, ;, private, Set, <, String, >, modulesWithExports]
[;, private, Set, <, String, >, modulesWithExports, =, Sets, ., newHashSet, (, ), ;, @, Override, public, void, visit, (]
[;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n]
[., newHashSet, (, ), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), {, visitRequireCall, (, t, ,, n, ,, parent, ), ;, }, if, (, n, ., isScript, (, ), )]
[&&, n, ., getChildAtIndex, (, 1, ), ., isString, (, ), ), {, visitRequireCall, (, t, ,, n, ,, parent]
[&&, "require", ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&, n, ., getChildAtIndex, (]
[&&, n, ., getChildCount, (, ), ==, 2, &&, "require", ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName]
[., isCall, (, ), &&, n, ., getChildCount, (, ), ==, 2, &&, "require", ., equals, (, n, ., getFirstChild]
[&&, "require", ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&, n, ., getChildAtIndex, (]
[==, 2, &&, "require", ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&, n, .]
[., getChildCount, (, ), ==, 2, &&, "require", ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[&&, "require", ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&, n, ., getChildAtIndex, (]
[&&, n, ., getChildAtIndex, (, 1, ), ., isString, (, ), ), {, visitRequireCall, (, t, ,, n, ,, parent]
[., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&, n, ., getChildAtIndex, (, 1, )]
[), &&, n, ., getChildAtIndex, (, 1, ), ., isString, (, ), ), {, visitRequireCall, (, t, ,, n, ,]
[., getQualifiedName, (, ), ), &&, n, ., getChildAtIndex, (, 1, ), ., isString, (, ), ), {, visitRequireCall, (]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&, n, ., getChildAtIndex, (, 1, ), ., isString, (, )]
[), {, visitRequireCall, (, t, ,, n, ,, parent, ), ;, }, if, (, n, ., isScript, (, ), )]
[., isString, (, ), ), {, visitRequireCall, (, t, ,, n, ,, parent, ), ;, }, if, (, n, .]
[., getChildAtIndex, (, 1, ), ., isString, (, ), ), {, visitRequireCall, (, t, ,, n, ,, parent, ), ;]
[), ., isString, (, ), ), {, visitRequireCall, (, t, ,, n, ,, parent, ), ;, }, if, (, n]
[;, }, if, (, n, ., isScript, (, ), ), {, scriptNodeCount, ++, ;, visitScript, (, t, ,, n, )]
[,, n, ,, parent, ), ;, }, if, (, n, ., isScript, (, ), ), {, scriptNodeCount, ++, ;, visitScript]
[,, parent, ), ;, }, if, (, n, ., isScript, (, ), ), {, scriptNodeCount, ++, ;, visitScript, (, t]
[), ;, }, if, (, n, ., isScript, (, ), ), {, scriptNodeCount, ++, ;, visitScript, (, t, ,, n]
[), {, scriptNodeCount, ++, ;, visitScript, (, t, ,, n, ), ;, }, if, (, n, ., isGetProp, (, )]
[., isScript, (, ), ), {, scriptNodeCount, ++, ;, visitScript, (, t, ,, n, ), ;, }, if, (, n]
[;, visitScript, (, t, ,, n, ), ;, }, if, (, n, ., isGetProp, (, ), &&, "module.exports", ., equals]
[++, ;, visitScript, (, t, ,, n, ), ;, }, if, (, n, ., isGetProp, (, ), &&, "module.exports", .]
[;, }, if, (, n, ., isGetProp, (, ), &&, "module.exports", ., equals, (, n, ., getQualifiedName, (, ), )]
[,, n, ), ;, }, if, (, n, ., isGetProp, (, ), &&, "module.exports", ., equals, (, n, ., getQualifiedName]
[), ;, }, if, (, n, ., isGetProp, (, ), &&, "module.exports", ., equals, (, n, ., getQualifiedName, (, )]
[), {, visitModuleExports, (, n, ), ;, }, }, private, void, visitRequireCall, (, NodeTraversal, t, ,, Node, require, ,, Node]
[&&, "module.exports", ., equals, (, n, ., getQualifiedName, (, ), ), ), {, visitModuleExports, (, n, ), ;, }, }]
[., isGetProp, (, ), &&, "module.exports", ., equals, (, n, ., getQualifiedName, (, ), ), ), {, visitModuleExports, (, n]
[), {, visitModuleExports, (, n, ), ;, }, }, private, void, visitRequireCall, (, NodeTraversal, t, ,, Node, require, ,, Node]
[., equals, (, n, ., getQualifiedName, (, ), ), ), {, visitModuleExports, (, n, ), ;, }, }, private, void]
[), ), {, visitModuleExports, (, n, ), ;, }, }, private, void, visitRequireCall, (, NodeTraversal, t, ,, Node, require, ,]
[., getQualifiedName, (, ), ), ), {, visitModuleExports, (, n, ), ;, }, }, private, void, visitRequireCall, (, NodeTraversal, t]
[;, }, }, private, void, visitRequireCall, (, NodeTraversal, t, ,, Node, require, ,, Node, parent, ), {, String, moduleName, =]
[), ;, }, }, private, void, visitRequireCall, (, NodeTraversal, t, ,, Node, require, ,, Node, parent, ), {, String, moduleName]
[;, Node, moduleRef, =, IR, ., name, (, moduleName, ), ., srcref, (, require, ), ;, parent, ., replaceChild, (]
[,, normalizeSourceName, (, t, ., getSourceName, (, ), ), ), ;, Node, moduleRef, =, IR, ., name, (, moduleName, )]
[., getString, (, ), ,, normalizeSourceName, (, t, ., getSourceName, (, ), ), ), ;, Node, moduleRef, =, IR, .]
[., getChildAtIndex, (, 1, ), ., getString, (, ), ,, normalizeSourceName, (, t, ., getSourceName, (, ), ), ), ;]
[), ., getString, (, ), ,, normalizeSourceName, (, t, ., getSourceName, (, ), ), ), ;, Node, moduleRef, =, IR]
[), ;, Node, moduleRef, =, IR, ., name, (, moduleName, ), ., srcref, (, require, ), ;, parent, ., replaceChild]
[), ), ;, Node, moduleRef, =, IR, ., name, (, moduleName, ), ., srcref, (, require, ), ;, parent, .]
[., getSourceName, (, ), ), ), ;, Node, moduleRef, =, IR, ., name, (, moduleName, ), ., srcref, (, require]
[;, parent, ., replaceChild, (, require, ,, moduleRef, ), ;, Node, script, =, getCurrentScriptNode, (, parent, ), ;, if, (]
[., srcref, (, require, ), ;, parent, ., replaceChild, (, require, ,, moduleRef, ), ;, Node, script, =, getCurrentScriptNode, (]
[., name, (, moduleName, ), ., srcref, (, require, ), ;, parent, ., replaceChild, (, require, ,, moduleRef, ), ;]
[), ., srcref, (, require, ), ;, parent, ., replaceChild, (, require, ,, moduleRef, ), ;, Node, script, =, getCurrentScriptNode]
[), ;, parent, ., replaceChild, (, require, ,, moduleRef, ), ;, Node, script, =, getCurrentScriptNode, (, parent, ), ;, if]
[;, Node, script, =, getCurrentScriptNode, (, parent, ), ;, if, (, reportDependencies, ), {, t, ., getInput, (, ), .]
[., replaceChild, (, require, ,, moduleRef, ), ;, Node, script, =, getCurrentScriptNode, (, parent, ), ;, if, (, reportDependencies, )]
[,, moduleRef, ), ;, Node, script, =, getCurrentScriptNode, (, parent, ), ;, if, (, reportDependencies, ), {, t, ., getInput]
[), ;, Node, script, =, getCurrentScriptNode, (, parent, ), ;, if, (, reportDependencies, ), {, t, ., getInput, (, )]
[;, if, (, reportDependencies, ), {, t, ., getInput, (, ), ., addRequire, (, moduleName, ), ;, }, script, .]
[), ;, if, (, reportDependencies, ), {, t, ., getInput, (, ), ., addRequire, (, moduleName, ), ;, }, script]
[), {, t, ., getInput, (, ), ., addRequire, (, moduleName, ), ;, }, script, ., addChildToFront, (, IR, .]
[;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, .]
[., addRequire, (, moduleName, ), ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR]
[., getInput, (, ), ., addRequire, (, moduleName, ), ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR]
[), ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, void, visitScript, (, NodeTraversal, t, ,, Node, script, ), {, Preconditions]
[., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog"]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, visitScript, (, NodeTraversal, t, ,, Node, script, ), {]
[., copyInformationFromForTree, (, require, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, visitScript, (, NodeTraversal, t]
[., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, .]
[), ., copyInformationFromForTree, (, require, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, visitScript, (, NodeTraversal]
[., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "require", )]
[,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, require, ), ), ;, compiler, ., reportCodeChange, (]
[., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "require", ), ), ,, IR, .]
[,, IR, ., string, (, "require", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (]
[., name, (, "goog", ), ,, IR, ., string, (, "require", ), ), ,, IR, ., string, (, moduleName, )]
[), ,, IR, ., string, (, "require", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree]
[), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, require, ), ), ;, compiler, ., reportCodeChange]
[., string, (, "require", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, require, )]
[), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, require, ), ), ;, compiler, .]
[), ), ., copyInformationFromForTree, (, require, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, visitScript, (]
[., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, require, ), ), ;, compiler, ., reportCodeChange, (, ), ;]
[), ), ), ., copyInformationFromForTree, (, require, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, visitScript]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, visitScript, (, NodeTraversal, t, ,, Node, script, )]
[;, }, private, void, visitScript, (, NodeTraversal, t, ,, Node, script, ), {, Preconditions, ., checkArgument, (, scriptNodeCount, ==, 1]
[., reportCodeChange, (, ), ;, }, private, void, visitScript, (, NodeTraversal, t, ,, Node, script, ), {, Preconditions, ., checkArgument]
[;, String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;, script, ., addChildToFront, (, IR, ., var]
[., checkArgument, (, scriptNodeCount, ==, 1, ,, "ProcessCommonJSModules supports only one invocation per ", +, "CompilerInput / script node", ), ;, String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName]
[,, "ProcessCommonJSModules supports only one invocation per ", +, "CompilerInput / script node", ), ;, String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;, script, .]
[==, 1, ,, "ProcessCommonJSModules supports only one invocation per ", +, "CompilerInput / script node", ), ;, String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;]
[,, "ProcessCommonJSModules supports only one invocation per ", +, "CompilerInput / script node", ), ;, String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;, script, .]
[), ;, String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;, script, ., addChildToFront, (, IR, .]
[+, "CompilerInput / script node", ), ;, String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;, script, ., addChildToFront, (]
[), ;, String, moduleName, =, guessCJSModuleName, (, script, ., getSourceFileName, (, ), ), ;, script, ., addChildToFront, (, IR, .]
[;, script, ., addChildToFront, (, IR, ., var, (, IR, ., name, (, moduleName, ), ,, IR, ., objectlit, (]
[), ;, script, ., addChildToFront, (, IR, ., var, (, IR, ., name, (, moduleName, ), ,, IR, ., objectlit]
[., getSourceFileName, (, ), ), ;, script, ., addChildToFront, (, IR, ., var, (, IR, ., name, (, moduleName, )]
[;, if, (, reportDependencies, ), {, CompilerInput, ci, =, t, ., getInput, (, ), ;, ci, ., addProvide, (, moduleName]
[., addChildToFront, (, IR, ., var, (, IR, ., name, (, moduleName, ), ,, IR, ., objectlit, (, ), )]
[), ;, if, (, reportDependencies, ), {, CompilerInput, ci, =, t, ., getInput, (, ), ;, ci, ., addProvide, (]
[., copyInformationFromForTree, (, script, ), ), ;, if, (, reportDependencies, ), {, CompilerInput, ci, =, t, ., getInput, (, )]
[., var, (, IR, ., name, (, moduleName, ), ,, IR, ., objectlit, (, ), ), ., copyInformationFromForTree, (, script]
[,, IR, ., objectlit, (, ), ), ., copyInformationFromForTree, (, script, ), ), ;, if, (, reportDependencies, ), {, CompilerInput]
[., name, (, moduleName, ), ,, IR, ., objectlit, (, ), ), ., copyInformationFromForTree, (, script, ), ), ;, if]
[), ,, IR, ., objectlit, (, ), ), ., copyInformationFromForTree, (, script, ), ), ;, if, (, reportDependencies, ), {]
[), ., copyInformationFromForTree, (, script, ), ), ;, if, (, reportDependencies, ), {, CompilerInput, ci, =, t, ., getInput, (]
[., objectlit, (, ), ), ., copyInformationFromForTree, (, script, ), ), ;, if, (, reportDependencies, ), {, CompilerInput, ci, =]
[), ), ;, if, (, reportDependencies, ), {, CompilerInput, ci, =, t, ., getInput, (, ), ;, ci, ., addProvide]
[), {, CompilerInput, ci, =, t, ., getInput, (, ), ;, ci, ., addProvide, (, moduleName, ), ;, JSModule, m]
[;, ci, ., addProvide, (, moduleName, ), ;, JSModule, m, =, new, JSModule, (, moduleName, ), ;, m, ., addAndOverrideModule]
[., getInput, (, ), ;, ci, ., addProvide, (, moduleName, ), ;, JSModule, m, =, new, JSModule, (, moduleName, )]
[;, JSModule, m, =, new, JSModule, (, moduleName, ), ;, m, ., addAndOverrideModule, (, ci, ), ;, module, =, m]
[., addProvide, (, moduleName, ), ;, JSModule, m, =, new, JSModule, (, moduleName, ), ;, m, ., addAndOverrideModule, (, ci]
[), ;, JSModule, m, =, new, JSModule, (, moduleName, ), ;, m, ., addAndOverrideModule, (, ci, ), ;, module, =]
[;, m, ., addAndOverrideModule, (, ci, ), ;, module, =, m, ;, }, script, ., addChildToFront, (, IR, ., exprResult]
[), ;, m, ., addAndOverrideModule, (, ci, ), ;, module, =, m, ;, }, script, ., addChildToFront, (, IR, .]
[;, module, =, m, ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, .]
[., addAndOverrideModule, (, ci, ), ;, module, =, m, ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR]
[), ;, module, =, m, ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR]
[=, m, ;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (]
[;, }, script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, .]
[;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, ), ;, NodeTraversal, ., traverse, (, compiler, ,, script, ,, new, SuffixVarsCallback, (, moduleName]
[., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog"]
[), ;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, ), ;, NodeTraversal, ., traverse, (, compiler, ,, script, ,, new, SuffixVarsCallback, (]
[., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, .]
[), ., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, ), ;, NodeTraversal, ., traverse, (, compiler]
[., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "provide", )]
[,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (, script, ,]
[., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "provide", ), ), ,, IR, .]
[,, IR, ., string, (, "provide", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (]
[., name, (, "goog", ), ,, IR, ., string, (, "provide", ), ), ,, IR, ., string, (, moduleName, )]
[), ,, IR, ., string, (, "provide", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree]
[), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (, script]
[., string, (, "provide", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, script, )]
[), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (]
[), ), ., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, ), ;, NodeTraversal, ., traverse, (]
[., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, )]
[), ), ), ., copyInformationFromForTree, (, script, ), ), ;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, ), ;, NodeTraversal, ., traverse]
[), ), ;, emitOptionalModuleExportsOverride, (, script, ,, moduleName, ), ;, NodeTraversal, ., traverse, (, compiler, ,, script, ,, new, SuffixVarsCallback]
[;, NodeTraversal, ., traverse, (, compiler, ,, script, ,, new, SuffixVarsCallback, (, moduleName, ), ), ;, compiler, ., reportCodeChange, (]
[,, moduleName, ), ;, NodeTraversal, ., traverse, (, compiler, ,, script, ,, new, SuffixVarsCallback, (, moduleName, ), ), ;, compiler]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, script, ,, new, SuffixVarsCallback, (, moduleName, ), ), ;, compiler, ., reportCodeChange]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, void, emitOptionalModuleExportsOverride, (, Node, script, ,, String, moduleName, ), {, if]
[., traverse, (, compiler, ,, script, ,, new, SuffixVarsCallback, (, moduleName, ), ), ;, compiler, ., reportCodeChange, (, ), ;]
[,, script, ,, new, SuffixVarsCallback, (, moduleName, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, emitOptionalModuleExportsOverride]
[,, new, SuffixVarsCallback, (, moduleName, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, emitOptionalModuleExportsOverride, (, Node]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, emitOptionalModuleExportsOverride, (, Node, script, ,, String, moduleName, ), {]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, emitOptionalModuleExportsOverride, (, Node, script, ,, String, moduleName, )]
[;, }, private, void, emitOptionalModuleExportsOverride, (, Node, script, ,, String, moduleName, ), {, if, (, !, modulesWithExports, ., contains, (]
[., reportCodeChange, (, ), ;, }, private, void, emitOptionalModuleExportsOverride, (, Node, script, ,, String, moduleName, ), {, if, (, !]
[), {, return, ;, }, Node, moduleExportsProp, =, IR, ., getprop, (, IR, ., name, (, moduleName, ), ,, IR]
[), {, return, ;, }, Node, moduleExportsProp, =, IR, ., getprop, (, IR, ., name, (, moduleName, ), ,, IR]
[., contains, (, moduleName, ), ), {, return, ;, }, Node, moduleExportsProp, =, IR, ., getprop, (, IR, ., name]
[), ), {, return, ;, }, Node, moduleExportsProp, =, IR, ., getprop, (, IR, ., name, (, moduleName, ), ,]
[;, script, ., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block, (, IR, ., exprResult, (, IR]
[., getprop, (, IR, ., name, (, moduleName, ), ,, IR, ., string, (, "module$exports", ), ), ;, script, .]
[,, IR, ., string, (, "module$exports", ), ), ;, script, ., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,, IR]
[., name, (, moduleName, ), ,, IR, ., string, (, "module$exports", ), ), ;, script, ., addChildToBack, (, IR, .]
[), ,, IR, ., string, (, "module$exports", ), ), ;, script, ., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,]
[), ;, script, ., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block, (, IR, ., exprResult, (]
[., string, (, "module$exports", ), ), ;, script, ., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block]
[), ), ;, script, ., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block, (, IR, ., exprResult]
[;, }, private, void, visitModuleExports, (, Node, prop, ), {, String, moduleName, =, guessCJSModuleName, (, prop, ., getSourceFileName, (, )]
[., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block, (, IR, ., exprResult, (, IR, ., assign]
[), ;, }, private, void, visitModuleExports, (, Node, prop, ), {, String, moduleName, =, guessCJSModuleName, (, prop, ., getSourceFileName, (]
[., copyInformationFromForTree, (, script, ), ), ;, }, private, void, visitModuleExports, (, Node, prop, ), {, String, moduleName, =, guessCJSModuleName]
[., ifNode, (, moduleExportsProp, ,, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., name]
[,, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, moduleName, ), ,]
[), ., copyInformationFromForTree, (, script, ), ), ;, }, private, void, visitModuleExports, (, Node, prop, ), {, String, moduleName, =]
[., block, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, moduleName, ), ,, moduleExportsProp, .]
[), ), ., copyInformationFromForTree, (, script, ), ), ;, }, private, void, visitModuleExports, (, Node, prop, ), {, String, moduleName]
[., exprResult, (, IR, ., assign, (, IR, ., name, (, moduleName, ), ,, moduleExportsProp, ., cloneTree, (, ), )]
[), ), ), ., copyInformationFromForTree, (, script, ), ), ;, }, private, void, visitModuleExports, (, Node, prop, ), {, String]
[., assign, (, IR, ., name, (, moduleName, ), ,, moduleExportsProp, ., cloneTree, (, ), ), ), ), ), .]
[,, moduleExportsProp, ., cloneTree, (, ), ), ), ), ), ., copyInformationFromForTree, (, script, ), ), ;, }, private, void]
[., name, (, moduleName, ), ,, moduleExportsProp, ., cloneTree, (, ), ), ), ), ), ., copyInformationFromForTree, (, script, )]
[), ,, moduleExportsProp, ., cloneTree, (, ), ), ), ), ), ., copyInformationFromForTree, (, script, ), ), ;, }, private]
[), ), ), ), ., copyInformationFromForTree, (, script, ), ), ;, }, private, void, visitModuleExports, (, Node, prop, ), {]
[., cloneTree, (, ), ), ), ), ), ., copyInformationFromForTree, (, script, ), ), ;, }, private, void, visitModuleExports, (]
[), ), ;, }, private, void, visitModuleExports, (, Node, prop, ), {, String, moduleName, =, guessCJSModuleName, (, prop, ., getSourceFileName]
[;, Node, module, =, prop, ., getChildAtIndex, (, 0, ), ;, module, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "module"]
[), ;, Node, module, =, prop, ., getChildAtIndex, (, 0, ), ;, module, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,]
[., getSourceFileName, (, ), ), ;, Node, module, =, prop, ., getChildAtIndex, (, 0, ), ;, module, ., putProp, (]
[;, module, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "module", ), ;, module, ., setString, (, moduleName, ), ;, Node]
[., getChildAtIndex, (, 0, ), ;, module, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "module", ), ;, module, ., setString]
[), ;, module, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "module", ), ;, module, ., setString, (, moduleName, ), ;]
[;, module, ., setString, (, moduleName, ), ;, Node, exports, =, prop, ., getChildAtIndex, (, 1, ), ;, exports, .]
[., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "module", ), ;, module, ., setString, (, moduleName, ), ;, Node, exports, =]
[,, "module", ), ;, module, ., setString, (, moduleName, ), ;, Node, exports, =, prop, ., getChildAtIndex, (, 1, )]
[., ORIGINALNAME_PROP, ,, "module", ), ;, module, ., setString, (, moduleName, ), ;, Node, exports, =, prop, ., getChildAtIndex, (]
[), ;, module, ., setString, (, moduleName, ), ;, Node, exports, =, prop, ., getChildAtIndex, (, 1, ), ;, exports]
[;, Node, exports, =, prop, ., getChildAtIndex, (, 1, ), ;, exports, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "exports"]
[., setString, (, moduleName, ), ;, Node, exports, =, prop, ., getChildAtIndex, (, 1, ), ;, exports, ., putProp, (]
[), ;, Node, exports, =, prop, ., getChildAtIndex, (, 1, ), ;, exports, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,]
[;, exports, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "exports", ), ;, exports, ., setString, (, "module$exports", ), ;, modulesWithExports]
[., getChildAtIndex, (, 1, ), ;, exports, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "exports", ), ;, exports, ., setString]
[), ;, exports, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "exports", ), ;, exports, ., setString, (, "module$exports", ), ;]
[;, exports, ., setString, (, "module$exports", ), ;, modulesWithExports, ., add, (, moduleName, ), ;, }, private, Node, getCurrentScriptNode, (]
[., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "exports", ), ;, exports, ., setString, (, "module$exports", ), ;, modulesWithExports, ., add]
[,, "exports", ), ;, exports, ., setString, (, "module$exports", ), ;, modulesWithExports, ., add, (, moduleName, ), ;, }, private]
[., ORIGINALNAME_PROP, ,, "exports", ), ;, exports, ., setString, (, "module$exports", ), ;, modulesWithExports, ., add, (, moduleName, ), ;]
[), ;, exports, ., setString, (, "module$exports", ), ;, modulesWithExports, ., add, (, moduleName, ), ;, }, private, Node, getCurrentScriptNode]
[;, modulesWithExports, ., add, (, moduleName, ), ;, }, private, Node, getCurrentScriptNode, (, Node, n, ), {, while, (, true]
[., setString, (, "module$exports", ), ;, modulesWithExports, ., add, (, moduleName, ), ;, }, private, Node, getCurrentScriptNode, (, Node, n]
[), ;, modulesWithExports, ., add, (, moduleName, ), ;, }, private, Node, getCurrentScriptNode, (, Node, n, ), {, while, (]
[;, }, private, Node, getCurrentScriptNode, (, Node, n, ), {, while, (, true, ), {, if, (, n, ., isScript]
[., add, (, moduleName, ), ;, }, private, Node, getCurrentScriptNode, (, Node, n, ), {, while, (, true, ), {]
[), ;, }, private, Node, getCurrentScriptNode, (, Node, n, ), {, while, (, true, ), {, if, (, n, .]
[), {, if, (, n, ., isScript, (, ), ), {, return, n, ;, }, n, =, n, ., getParent]
[), {, return, n, ;, }, n, =, n, ., getParent, (, ), ;, }, }, }, private, class, SuffixVarsCallback]
[., isScript, (, ), ), {, return, n, ;, }, n, =, n, ., getParent, (, ), ;, }, }]
[;, }, n, =, n, ., getParent, (, ), ;, }, }, }, private, class, SuffixVarsCallback, extends, AbstractPostOrderCallback, {, private]
[=, n, ., getParent, (, ), ;, }, }, }, private, class, SuffixVarsCallback, extends, AbstractPostOrderCallback, {, private, static, final, String]
[;, }, }, }, private, class, SuffixVarsCallback, extends, AbstractPostOrderCallback, {, private, static, final, String, EXPORTS, =, "exports", ;, private, final]
[., getParent, (, ), ;, }, }, }, private, class, SuffixVarsCallback, extends, AbstractPostOrderCallback, {, private, static, final, String, EXPORTS, =]
[;, private, final, String, suffix, ;, SuffixVarsCallback, (, String, suffix, ), {, this, ., suffix, =, suffix, ;, }, @]
[=, suffix, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., suffix, =, suffix, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, String, name, =, n, ., getString, (, ), ;, if, (, suffix, ., equals, (, name, ), )]
[., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (, suffix, ., equals]
[;, if, (, suffix, ., equals, (, name, ), ), {, return, ;, }, if, (, EXPORTS, ., equals, (]
[., getString, (, ), ;, if, (, suffix, ., equals, (, name, ), ), {, return, ;, }, if, (]
[), {, return, ;, }, if, (, EXPORTS, ., equals, (, name, ), ), {, n, ., setString, (, suffix]
[., equals, (, name, ), ), {, return, ;, }, if, (, EXPORTS, ., equals, (, name, ), ), {]
[), ), {, return, ;, }, if, (, EXPORTS, ., equals, (, name, ), ), {, n, ., setString, (]
[), {, n, ., setString, (, suffix, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, EXPORTS, ), ;]
[., equals, (, name, ), ), {, n, ., setString, (, suffix, ), ;, n, ., putProp, (, Node, .]
[), ), {, n, ., setString, (, suffix, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, EXPORTS, )]
[;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, EXPORTS, ), ;, }, else, {, Scope, ., Var, var, =]
[., setString, (, suffix, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, EXPORTS, ), ;, }, else, {]
[), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, EXPORTS, ), ;, }, else, {, Scope, ., Var, var]
[;, }, else, {, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;]
[., putProp, (, Node, ., ORIGINALNAME_PROP, ,, EXPORTS, ), ;, }, else, {, Scope, ., Var, var, =, t, .]
[,, EXPORTS, ), ;, }, else, {, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[., ORIGINALNAME_PROP, ,, EXPORTS, ), ;, }, else, {, Scope, ., Var, var, =, t, ., getScope, (, ), .]
[), ;, }, else, {, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, )]
[;, if, (, var, !=, null, &&, var, ., isGlobal, (, ), ), {, n, ., setString, (, name, +]
[., getVar, (, name, ), ;, if, (, var, !=, null, &&, var, ., isGlobal, (, ), ), {, n]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, &&, var, ., isGlobal, (]
[), ;, if, (, var, !=, null, &&, var, ., isGlobal, (, ), ), {, n, ., setString, (, name]
[), {, n, ., setString, (, name, +, "$$", +, suffix, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP]
[&&, var, ., isGlobal, (, ), ), {, n, ., setString, (, name, +, "$$", +, suffix, ), ;, n]
[!=, null, &&, var, ., isGlobal, (, ), ), {, n, ., setString, (, name, +, "$$", +, suffix, )]
[&&, var, ., isGlobal, (, ), ), {, n, ., setString, (, name, +, "$$", +, suffix, ), ;, n]
[), {, n, ., setString, (, name, +, "$$", +, suffix, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP]
[., isGlobal, (, ), ), {, n, ., setString, (, name, +, "$$", +, suffix, ), ;, n, ., putProp]
[;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }, }, }, }]
[., setString, (, name, +, "$$", +, suffix, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, )]
[), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }, }, }, }]
[+, suffix, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }, }, }]
[+, "$$", +, suffix, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }]
[+, suffix, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }, }, }]
[), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }, }, }, }]
[;, }, }, }, }, }, }]
[., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }, }, }, }]
[,, name, ), ;, }, }, }, }, }, }]
[., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }, }, }, }]
[), ;, }, }, }, }, }, }]
