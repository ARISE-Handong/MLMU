[;, private, final, boolean, declared, ;, private, boolean, isFrozen, =, false, ;, RecordType, (, JSTypeRegistry, registry, ,, Map, <, String]
[;, RecordType, (, JSTypeRegistry, registry, ,, Map, <, String, ,, RecordProperty, >, properties, ), {, this, (, registry, ,, properties]
[,, properties, ,, true, ), ;, }, RecordType, (, JSTypeRegistry, registry, ,, Map, <, String, ,, RecordProperty, >, properties, ,]
[,, true, ), ;, }, RecordType, (, JSTypeRegistry, registry, ,, Map, <, String, ,, RecordProperty, >, properties, ,, boolean, declared]
[), ;, }, RecordType, (, JSTypeRegistry, registry, ,, Map, <, String, ,, RecordProperty, >, properties, ,, boolean, declared, ), {]
[,, null, ,, null, ), ;, setPrettyPrint, (, true, ), ;, this, ., declared, =, declared, ;, for, (, String]
[,, null, ), ;, setPrettyPrint, (, true, ), ;, this, ., declared, =, declared, ;, for, (, String, property, :]
[), ;, setPrettyPrint, (, true, ), ;, this, ., declared, =, declared, ;, for, (, String, property, :, properties, .]
[;, this, ., declared, =, declared, ;, for, (, String, property, :, properties, ., keySet, (, ), ), {, RecordProperty]
[), ;, this, ., declared, =, declared, ;, for, (, String, property, :, properties, ., keySet, (, ), ), {]
[=, declared, ;, for, (, String, property, :, properties, ., keySet, (, ), ), {, RecordProperty, prop, =, properties, .]
[., declared, =, declared, ;, for, (, String, property, :, properties, ., keySet, (, ), ), {, RecordProperty, prop, =]
[;, for, (, String, property, :, properties, ., keySet, (, ), ), {, RecordProperty, prop, =, properties, ., get, (]
[), {, RecordProperty, prop, =, properties, ., get, (, property, ), ;, if, (, prop, ==, null, ), {, throw]
[., keySet, (, ), ), {, RecordProperty, prop, =, properties, ., get, (, property, ), ;, if, (, prop, ==]
[;, if, (, prop, ==, null, ), {, throw, new, IllegalStateException, (, "RecordProperty associated with a property should not be null!", ), ;, }, if, (, declared, )]
[., get, (, property, ), ;, if, (, prop, ==, null, ), {, throw, new, IllegalStateException, (, "RecordProperty associated with a property should not be null!", ), ;]
[), ;, if, (, prop, ==, null, ), {, throw, new, IllegalStateException, (, "RecordProperty associated with a property should not be null!", ), ;, }, if, (, declared]
[), {, throw, new, IllegalStateException, (, "RecordProperty associated with a property should not be null!", ), ;, }, if, (, declared, ), {, defineDeclaredProperty, (, property, ,, prop]
[==, null, ), {, throw, new, IllegalStateException, (, "RecordProperty associated with a property should not be null!", ), ;, }, if, (, declared, ), {, defineDeclaredProperty, (, property]
[), {, throw, new, IllegalStateException, (, "RecordProperty associated with a property should not be null!", ), ;, }, if, (, declared, ), {, defineDeclaredProperty, (, property, ,, prop]
[;, }, if, (, declared, ), {, defineDeclaredProperty, (, property, ,, prop, ., getType, (, ), ,, prop, ., getPropertyNode]
[), ;, }, if, (, declared, ), {, defineDeclaredProperty, (, property, ,, prop, ., getType, (, ), ,, prop, .]
[), {, defineDeclaredProperty, (, property, ,, prop, ., getType, (, ), ,, prop, ., getPropertyNode, (, ), ), ;, }]
[;, }, else, {, defineSynthesizedProperty, (, property, ,, prop, ., getType, (, ), ,, prop, ., getPropertyNode, (, ), )]
[,, prop, ., getType, (, ), ,, prop, ., getPropertyNode, (, ), ), ;, }, else, {, defineSynthesizedProperty, (, property]
[,, prop, ., getPropertyNode, (, ), ), ;, }, else, {, defineSynthesizedProperty, (, property, ,, prop, ., getType, (, )]
[., getType, (, ), ,, prop, ., getPropertyNode, (, ), ), ;, }, else, {, defineSynthesizedProperty, (, property, ,, prop]
[), ;, }, else, {, defineSynthesizedProperty, (, property, ,, prop, ., getType, (, ), ,, prop, ., getPropertyNode, (, )]
[., getPropertyNode, (, ), ), ;, }, else, {, defineSynthesizedProperty, (, property, ,, prop, ., getType, (, ), ,, prop]
[;, }, }, isFrozen, =, true, ;, }, boolean, isSynthetic, (, ), {, return, !, declared, ;, }, boolean, checkRecordEquivalenceHelper]
[,, prop, ., getType, (, ), ,, prop, ., getPropertyNode, (, ), ), ;, }, }, isFrozen, =, true, ;]
[,, prop, ., getPropertyNode, (, ), ), ;, }, }, isFrozen, =, true, ;, }, boolean, isSynthetic, (, ), {]
[., getType, (, ), ,, prop, ., getPropertyNode, (, ), ), ;, }, }, isFrozen, =, true, ;, }, boolean]
[), ;, }, }, isFrozen, =, true, ;, }, boolean, isSynthetic, (, ), {, return, !, declared, ;, }, boolean]
[., getPropertyNode, (, ), ), ;, }, }, isFrozen, =, true, ;, }, boolean, isSynthetic, (, ), {, return, !]
[=, true, ;, }, boolean, isSynthetic, (, ), {, return, !, declared, ;, }, boolean, checkRecordEquivalenceHelper, (, RecordType, otherRecord, ,]
[;, }, boolean, isSynthetic, (, ), {, return, !, declared, ;, }, boolean, checkRecordEquivalenceHelper, (, RecordType, otherRecord, ,, EquivalenceMethod, eqMethod]
[;, }, boolean, checkRecordEquivalenceHelper, (, RecordType, otherRecord, ,, EquivalenceMethod, eqMethod, ), {, Set, <, String, >, keySet, =, getOwnPropertyNames, (]
[;, }, boolean, checkRecordEquivalenceHelper, (, RecordType, otherRecord, ,, EquivalenceMethod, eqMethod, ), {, Set, <, String, >, keySet, =, getOwnPropertyNames, (]
[;, Set, <, String, >, otherKeySet, =, otherRecord, ., getOwnPropertyNames, (, ), ;, if, (, !, otherKeySet, ., equals, (]
[;, if, (, !, otherKeySet, ., equals, (, keySet, ), ), {, return, false, ;, }, for, (, String, key]
[., getOwnPropertyNames, (, ), ;, if, (, !, otherKeySet, ., equals, (, keySet, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, for, (, String, key, :, keySet, ), {, if, (, !, otherRecord, ., getPropertyType]
[), {, return, false, ;, }, for, (, String, key, :, keySet, ), {, if, (, !, otherRecord, ., getPropertyType]
[., equals, (, keySet, ), ), {, return, false, ;, }, for, (, String, key, :, keySet, ), {, if]
[), ), {, return, false, ;, }, for, (, String, key, :, keySet, ), {, if, (, !, otherRecord, .]
[;, }, for, (, String, key, :, keySet, ), {, if, (, !, otherRecord, ., getPropertyType, (, key, ), .]
[), {, if, (, !, otherRecord, ., getPropertyType, (, key, ), ., checkEquivalenceHelper, (, getPropertyType, (, key, ), ,, eqMethod]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, ObjectType, getImplicitPrototype, (, ), {, return]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, ObjectType, getImplicitPrototype, (, ), {, return]
[., checkEquivalenceHelper, (, getPropertyType, (, key, ), ,, eqMethod, ), ), {, return, false, ;, }, }, return, true, ;]
[., getPropertyType, (, key, ), ., checkEquivalenceHelper, (, getPropertyType, (, key, ), ,, eqMethod, ), ), {, return, false, ;]
[), ., checkEquivalenceHelper, (, getPropertyType, (, key, ), ,, eqMethod, ), ), {, return, false, ;, }, }, return, true]
[,, eqMethod, ), ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, ObjectType, getImplicitPrototype, (]
[), ,, eqMethod, ), ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, ObjectType, getImplicitPrototype]
[), ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, ObjectType, getImplicitPrototype, (, ), {]
[;, }, }, return, true, ;, }, @, Override, public, ObjectType, getImplicitPrototype, (, ), {, return, registry, ., getNativeObjectType, (]
[;, }, @, Override, public, ObjectType, getImplicitPrototype, (, ), {, return, registry, ., getNativeObjectType, (, JSTypeNative, ., OBJECT_TYPE, ), ;]
[;, }, @, Override, boolean, defineProperty, (, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {]
[., getNativeObjectType, (, JSTypeNative, ., OBJECT_TYPE, ), ;, }, @, Override, boolean, defineProperty, (, String, propertyName, ,, JSType, type, ,]
[), ;, }, @, Override, boolean, defineProperty, (, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, )]
[., OBJECT_TYPE, ), ;, }, @, Override, boolean, defineProperty, (, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node]
[), {, return, false, ;, }, return, super, ., defineProperty, (, propertyName, ,, type, ,, inferred, ,, propertyNode, ), ;]
[;, }, return, super, ., defineProperty, (, propertyName, ,, type, ,, inferred, ,, propertyNode, ), ;, }, JSType, getGreatestSubtypeHelper, (]
[;, }, JSType, getGreatestSubtypeHelper, (, JSType, that, ), {, if, (, that, ., isRecordType, (, ), ), {, RecordType, thatRecord]
[., defineProperty, (, propertyName, ,, type, ,, inferred, ,, propertyNode, ), ;, }, JSType, getGreatestSubtypeHelper, (, JSType, that, ), {]
[,, type, ,, inferred, ,, propertyNode, ), ;, }, JSType, getGreatestSubtypeHelper, (, JSType, that, ), {, if, (, that, .]
[,, inferred, ,, propertyNode, ), ;, }, JSType, getGreatestSubtypeHelper, (, JSType, that, ), {, if, (, that, ., isRecordType, (]
[,, propertyNode, ), ;, }, JSType, getGreatestSubtypeHelper, (, JSType, that, ), {, if, (, that, ., isRecordType, (, ), )]
[), ;, }, JSType, getGreatestSubtypeHelper, (, JSType, that, ), {, if, (, that, ., isRecordType, (, ), ), {, RecordType]
[), {, RecordType, thatRecord, =, that, ., toMaybeRecordType, (, ), ;, RecordTypeBuilder, builder, =, new, RecordTypeBuilder, (, registry, ), ;]
[., isRecordType, (, ), ), {, RecordType, thatRecord, =, that, ., toMaybeRecordType, (, ), ;, RecordTypeBuilder, builder, =, new, RecordTypeBuilder]
[;, RecordTypeBuilder, builder, =, new, RecordTypeBuilder, (, registry, ), ;, builder, ., setSynthesized, (, true, ), ;, for, (, String]
[., toMaybeRecordType, (, ), ;, RecordTypeBuilder, builder, =, new, RecordTypeBuilder, (, registry, ), ;, builder, ., setSynthesized, (, true, )]
[;, builder, ., setSynthesized, (, true, ), ;, for, (, String, property, :, getOwnPropertyNames, (, ), ), {, if, (]
[), ;, builder, ., setSynthesized, (, true, ), ;, for, (, String, property, :, getOwnPropertyNames, (, ), ), {, if]
[;, for, (, String, property, :, getOwnPropertyNames, (, ), ), {, if, (, thatRecord, ., hasProperty, (, property, ), &&]
[., setSynthesized, (, true, ), ;, for, (, String, property, :, getOwnPropertyNames, (, ), ), {, if, (, thatRecord, .]
[), ;, for, (, String, property, :, getOwnPropertyNames, (, ), ), {, if, (, thatRecord, ., hasProperty, (, property, )]
[), {, if, (, thatRecord, ., hasProperty, (, property, ), &&, !, thatRecord, ., getPropertyType, (, property, ), ., isInvariant]
[), {, return, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, ), ;, }, builder, ., addProperty, (, property, ,, getPropertyType]
[&&, !, thatRecord, ., getPropertyType, (, property, ), ., isInvariant, (, getPropertyType, (, property, ), ), ), {, return, registry]
[., hasProperty, (, property, ), &&, !, thatRecord, ., getPropertyType, (, property, ), ., isInvariant, (, getPropertyType, (, property, )]
[), &&, !, thatRecord, ., getPropertyType, (, property, ), ., isInvariant, (, getPropertyType, (, property, ), ), ), {, return]
[), {, return, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, ), ;, }, builder, ., addProperty, (, property, ,, getPropertyType]
[), {, return, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, ), ;, }, builder, ., addProperty, (, property, ,, getPropertyType]
[., isInvariant, (, getPropertyType, (, property, ), ), ), {, return, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, ), ;]
[., getPropertyType, (, property, ), ., isInvariant, (, getPropertyType, (, property, ), ), ), {, return, registry, ., getNativeObjectType, (]
[), ., isInvariant, (, getPropertyType, (, property, ), ), ), {, return, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, )]
[), ), {, return, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, ), ;, }, builder, ., addProperty, (, property, ,]
[), ), ), {, return, registry, ., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, ), ;, }, builder, ., addProperty, (, property]
[;, }, builder, ., addProperty, (, property, ,, getPropertyType, (, property, ), ,, getPropertyNode, (, property, ), ), ;, }]
[., getNativeObjectType, (, JSTypeNative, ., NO_TYPE, ), ;, }, builder, ., addProperty, (, property, ,, getPropertyType, (, property, ), ,]
[), ;, }, builder, ., addProperty, (, property, ,, getPropertyType, (, property, ), ,, getPropertyNode, (, property, ), ), ;]
[., NO_TYPE, ), ;, }, builder, ., addProperty, (, property, ,, getPropertyType, (, property, ), ,, getPropertyNode, (, property, )]
[;, }, for, (, String, property, :, thatRecord, ., getOwnPropertyNames, (, ), ), {, if, (, !, hasProperty, (, property]
[., addProperty, (, property, ,, getPropertyType, (, property, ), ,, getPropertyNode, (, property, ), ), ;, }, for, (, String]
[,, getPropertyType, (, property, ), ,, getPropertyNode, (, property, ), ), ;, }, for, (, String, property, :, thatRecord, .]
[,, getPropertyNode, (, property, ), ), ;, }, for, (, String, property, :, thatRecord, ., getOwnPropertyNames, (, ), ), {]
[), ,, getPropertyNode, (, property, ), ), ;, }, for, (, String, property, :, thatRecord, ., getOwnPropertyNames, (, ), )]
[), ;, }, for, (, String, property, :, thatRecord, ., getOwnPropertyNames, (, ), ), {, if, (, !, hasProperty, (]
[), ), ;, }, for, (, String, property, :, thatRecord, ., getOwnPropertyNames, (, ), ), {, if, (, !, hasProperty]
[), {, if, (, !, hasProperty, (, property, ), ), {, builder, ., addProperty, (, property, ,, thatRecord, ., getPropertyType]
[., getOwnPropertyNames, (, ), ), {, if, (, !, hasProperty, (, property, ), ), {, builder, ., addProperty, (, property]
[), {, builder, ., addProperty, (, property, ,, thatRecord, ., getPropertyType, (, property, ), ,, thatRecord, ., getPropertyNode, (, property]
[), {, builder, ., addProperty, (, property, ,, thatRecord, ., getPropertyType, (, property, ), ,, thatRecord, ., getPropertyNode, (, property]
[), ), {, builder, ., addProperty, (, property, ,, thatRecord, ., getPropertyType, (, property, ), ,, thatRecord, ., getPropertyNode, (]
[;, }, }, return, builder, ., build, (, ), ;, }, JSType, greatestSubtype, =, registry, ., getNativeType, (, JSTypeNative, .]
[., addProperty, (, property, ,, thatRecord, ., getPropertyType, (, property, ), ,, thatRecord, ., getPropertyNode, (, property, ), ), ;]
[,, thatRecord, ., getPropertyType, (, property, ), ,, thatRecord, ., getPropertyNode, (, property, ), ), ;, }, }, return, builder]
[,, thatRecord, ., getPropertyNode, (, property, ), ), ;, }, }, return, builder, ., build, (, ), ;, }, JSType]
[., getPropertyType, (, property, ), ,, thatRecord, ., getPropertyNode, (, property, ), ), ;, }, }, return, builder, ., build]
[), ,, thatRecord, ., getPropertyNode, (, property, ), ), ;, }, }, return, builder, ., build, (, ), ;, }]
[), ;, }, }, return, builder, ., build, (, ), ;, }, JSType, greatestSubtype, =, registry, ., getNativeType, (, JSTypeNative]
[., getPropertyNode, (, property, ), ), ;, }, }, return, builder, ., build, (, ), ;, }, JSType, greatestSubtype, =]
[), ), ;, }, }, return, builder, ., build, (, ), ;, }, JSType, greatestSubtype, =, registry, ., getNativeType, (]
[;, }, JSType, greatestSubtype, =, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, JSType, thatRestrictedToObj, =, registry, ., getNativeType]
[., build, (, ), ;, }, JSType, greatestSubtype, =, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, JSType, thatRestrictedToObj]
[;, JSType, thatRestrictedToObj, =, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ., getGreatestSubtype, (, that, ), ;, if, (]
[., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, JSType, thatRestrictedToObj, =, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), .]
[), ;, JSType, thatRestrictedToObj, =, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ., getGreatestSubtype, (, that, ), ;, if]
[., NO_OBJECT_TYPE, ), ;, JSType, thatRestrictedToObj, =, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ., getGreatestSubtype, (, that, )]
[;, if, (, !, thatRestrictedToObj, ., isEmptyType, (, ), ), {, for, (, String, propName, :, getOwnPropertyNames, (, ), )]
[., getGreatestSubtype, (, that, ), ;, if, (, !, thatRestrictedToObj, ., isEmptyType, (, ), ), {, for, (, String, propName]
[., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ., getGreatestSubtype, (, that, ), ;, if, (, !, thatRestrictedToObj, ., isEmptyType, (]
[), ., getGreatestSubtype, (, that, ), ;, if, (, !, thatRestrictedToObj, ., isEmptyType, (, ), ), {, for, (, String]
[., OBJECT_TYPE, ), ., getGreatestSubtype, (, that, ), ;, if, (, !, thatRestrictedToObj, ., isEmptyType, (, ), ), {, for]
[), ;, if, (, !, thatRestrictedToObj, ., isEmptyType, (, ), ), {, for, (, String, propName, :, getOwnPropertyNames, (, )]
[), {, for, (, String, propName, :, getOwnPropertyNames, (, ), ), {, JSType, propType, =, getPropertyType, (, propName, ), ;]
[), {, for, (, String, propName, :, getOwnPropertyNames, (, ), ), {, JSType, propType, =, getPropertyType, (, propName, ), ;]
[., isEmptyType, (, ), ), {, for, (, String, propName, :, getOwnPropertyNames, (, ), ), {, JSType, propType, =, getPropertyType]
[), {, JSType, propType, =, getPropertyType, (, propName, ), ;, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, registry, ), ;, for]
[;, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, ObjectType, alt, :, registry, ., getEachReferenceTypeWithProperty, (, propName]
[), ;, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, registry, ), ;, for, (, ObjectType, alt, :, registry, ., getEachReferenceTypeWithProperty, (]
[;, for, (, ObjectType, alt, :, registry, ., getEachReferenceTypeWithProperty, (, propName, ), ), {, JSType, altPropType, =, alt, ., getPropertyType]
[), ;, for, (, ObjectType, alt, :, registry, ., getEachReferenceTypeWithProperty, (, propName, ), ), {, JSType, altPropType, =, alt, .]
[), {, JSType, altPropType, =, alt, ., getPropertyType, (, propName, ), ;, if, (, altPropType, !=, null, &&, !, alt]
[., getEachReferenceTypeWithProperty, (, propName, ), ), {, JSType, altPropType, =, alt, ., getPropertyType, (, propName, ), ;, if, (, altPropType]
[), ), {, JSType, altPropType, =, alt, ., getPropertyType, (, propName, ), ;, if, (, altPropType, !=, null, &&, !]
[;, if, (, altPropType, !=, null, &&, !, alt, ., isEquivalentTo, (, this, ), &&, alt, ., isSubtype, (, that]
[., getPropertyType, (, propName, ), ;, if, (, altPropType, !=, null, &&, !, alt, ., isEquivalentTo, (, this, ), &&]
[), ;, if, (, altPropType, !=, null, &&, !, alt, ., isEquivalentTo, (, this, ), &&, alt, ., isSubtype, (]
[), {, builder, ., addAlternate, (, alt, ), ;, }, }, greatestSubtype, =, greatestSubtype, ., getLeastSupertype, (, builder, ., build]
[&&, propType, ., isInvariant, (, altPropType, ), ), {, builder, ., addAlternate, (, alt, ), ;, }, }, greatestSubtype, =]
[&&, alt, ., isSubtype, (, that, ), &&, propType, ., isInvariant, (, altPropType, ), ), {, builder, ., addAlternate, (]
[&&, !, alt, ., isEquivalentTo, (, this, ), &&, alt, ., isSubtype, (, that, ), &&, propType, ., isInvariant, (]
[!=, null, &&, !, alt, ., isEquivalentTo, (, this, ), &&, alt, ., isSubtype, (, that, ), &&, propType, .]
[&&, !, alt, ., isEquivalentTo, (, this, ), &&, alt, ., isSubtype, (, that, ), &&, propType, ., isInvariant, (]
[&&, alt, ., isSubtype, (, that, ), &&, propType, ., isInvariant, (, altPropType, ), ), {, builder, ., addAlternate, (]
[&&, alt, ., isSubtype, (, that, ), &&, propType, ., isInvariant, (, altPropType, ), ), {, builder, ., addAlternate, (]
[., isEquivalentTo, (, this, ), &&, alt, ., isSubtype, (, that, ), &&, propType, ., isInvariant, (, altPropType, ), )]
[), &&, alt, ., isSubtype, (, that, ), &&, propType, ., isInvariant, (, altPropType, ), ), {, builder, ., addAlternate]
[&&, propType, ., isInvariant, (, altPropType, ), ), {, builder, ., addAlternate, (, alt, ), ;, }, }, greatestSubtype, =]
[., isSubtype, (, that, ), &&, propType, ., isInvariant, (, altPropType, ), ), {, builder, ., addAlternate, (, alt, )]
[), &&, propType, ., isInvariant, (, altPropType, ), ), {, builder, ., addAlternate, (, alt, ), ;, }, }, greatestSubtype]
[), {, builder, ., addAlternate, (, alt, ), ;, }, }, greatestSubtype, =, greatestSubtype, ., getLeastSupertype, (, builder, ., build]
[., isInvariant, (, altPropType, ), ), {, builder, ., addAlternate, (, alt, ), ;, }, }, greatestSubtype, =, greatestSubtype, .]
[), ), {, builder, ., addAlternate, (, alt, ), ;, }, }, greatestSubtype, =, greatestSubtype, ., getLeastSupertype, (, builder, .]
[;, }, }, greatestSubtype, =, greatestSubtype, ., getLeastSupertype, (, builder, ., build, (, ), ), ;, }, }, return, greatestSubtype]
[., addAlternate, (, alt, ), ;, }, }, greatestSubtype, =, greatestSubtype, ., getLeastSupertype, (, builder, ., build, (, ), )]
[), ;, }, }, greatestSubtype, =, greatestSubtype, ., getLeastSupertype, (, builder, ., build, (, ), ), ;, }, }, return]
[=, greatestSubtype, ., getLeastSupertype, (, builder, ., build, (, ), ), ;, }, }, return, greatestSubtype, ;, }, @, Override]
[;, }, }, return, greatestSubtype, ;, }, @, Override, RecordType, toMaybeRecordType, (, ), {, return, this, ;, }, @, Override]
[., getLeastSupertype, (, builder, ., build, (, ), ), ;, }, }, return, greatestSubtype, ;, }, @, Override, RecordType, toMaybeRecordType]
[), ;, }, }, return, greatestSubtype, ;, }, @, Override, RecordType, toMaybeRecordType, (, ), {, return, this, ;, }, @]
[., build, (, ), ), ;, }, }, return, greatestSubtype, ;, }, @, Override, RecordType, toMaybeRecordType, (, ), {, return]
[;, }, @, Override, RecordType, toMaybeRecordType, (, ), {, return, this, ;, }, @, Override, public, boolean, isSubtype, (, JSType]
[;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, if, (, JSType, ., isSubtypeHelper, (, this, ,]
[), {, return, true, ;, }, if, (, registry, ., getNativeObjectType, (, JSTypeNative, ., OBJECT_TYPE, ), ., isSubtype, (, that]
[., isSubtypeHelper, (, this, ,, that, ), ), {, return, true, ;, }, if, (, registry, ., getNativeObjectType, (, JSTypeNative]
[,, that, ), ), {, return, true, ;, }, if, (, registry, ., getNativeObjectType, (, JSTypeNative, ., OBJECT_TYPE, ), .]
[), ), {, return, true, ;, }, if, (, registry, ., getNativeObjectType, (, JSTypeNative, ., OBJECT_TYPE, ), ., isSubtype, (]
[;, }, if, (, registry, ., getNativeObjectType, (, JSTypeNative, ., OBJECT_TYPE, ), ., isSubtype, (, that, ), ), {, return]
[), {, return, true, ;, }, if, (, !, that, ., isRecordType, (, ), ), {, return, false, ;, }]
[., isSubtype, (, that, ), ), {, return, true, ;, }, if, (, !, that, ., isRecordType, (, ), )]
[., getNativeObjectType, (, JSTypeNative, ., OBJECT_TYPE, ), ., isSubtype, (, that, ), ), {, return, true, ;, }, if, (]
[), ., isSubtype, (, that, ), ), {, return, true, ;, }, if, (, !, that, ., isRecordType, (, )]
[., OBJECT_TYPE, ), ., isSubtype, (, that, ), ), {, return, true, ;, }, if, (, !, that, ., isRecordType]
[), ), {, return, true, ;, }, if, (, !, that, ., isRecordType, (, ), ), {, return, false, ;]
[;, }, if, (, !, that, ., isRecordType, (, ), ), {, return, false, ;, }, return, RecordType, ., isSubtype]
[), {, return, false, ;, }, return, RecordType, ., isSubtype, (, this, ,, that, ., toMaybeRecordType, (, ), ), ;]
[), {, return, false, ;, }, return, RecordType, ., isSubtype, (, this, ,, that, ., toMaybeRecordType, (, ), ), ;]
[., isRecordType, (, ), ), {, return, false, ;, }, return, RecordType, ., isSubtype, (, this, ,, that, ., toMaybeRecordType]
[;, }, return, RecordType, ., isSubtype, (, this, ,, that, ., toMaybeRecordType, (, ), ), ;, }, static, boolean, isSubtype]
[;, }, static, boolean, isSubtype, (, ObjectType, typeA, ,, RecordType, typeB, ), {, for, (, String, property, :, typeB, .]
[., isSubtype, (, this, ,, that, ., toMaybeRecordType, (, ), ), ;, }, static, boolean, isSubtype, (, ObjectType, typeA, ,]
[,, that, ., toMaybeRecordType, (, ), ), ;, }, static, boolean, isSubtype, (, ObjectType, typeA, ,, RecordType, typeB, ), {]
[), ;, }, static, boolean, isSubtype, (, ObjectType, typeA, ,, RecordType, typeB, ), {, for, (, String, property, :, typeB]
[., toMaybeRecordType, (, ), ), ;, }, static, boolean, isSubtype, (, ObjectType, typeA, ,, RecordType, typeB, ), {, for, (]
[), {, if, (, !, typeA, ., hasProperty, (, property, ), ), {, return, false, ;, }, JSType, propA, =]
[., getOwnPropertyNames, (, ), ), {, if, (, !, typeA, ., hasProperty, (, property, ), ), {, return, false, ;]
[), {, return, false, ;, }, JSType, propA, =, typeA, ., getPropertyType, (, property, ), ;, JSType, propB, =, typeB]
[), {, return, false, ;, }, JSType, propA, =, typeA, ., getPropertyType, (, property, ), ;, JSType, propB, =, typeB]
[., hasProperty, (, property, ), ), {, return, false, ;, }, JSType, propA, =, typeA, ., getPropertyType, (, property, )]
[), ), {, return, false, ;, }, JSType, propA, =, typeA, ., getPropertyType, (, property, ), ;, JSType, propB, =]
[;, }, JSType, propA, =, typeA, ., getPropertyType, (, property, ), ;, JSType, propB, =, typeB, ., getPropertyType, (, property]
[;, JSType, propB, =, typeB, ., getPropertyType, (, property, ), ;, if, (, typeA, ., isPropertyTypeDeclared, (, property, ), )]
[., getPropertyType, (, property, ), ;, JSType, propB, =, typeB, ., getPropertyType, (, property, ), ;, if, (, typeA, .]
[), ;, JSType, propB, =, typeB, ., getPropertyType, (, property, ), ;, if, (, typeA, ., isPropertyTypeDeclared, (, property, )]
[;, if, (, typeA, ., isPropertyTypeDeclared, (, property, ), ), {, if, (, !, propA, ., isInvariant, (, propB, )]
[., getPropertyType, (, property, ), ;, if, (, typeA, ., isPropertyTypeDeclared, (, property, ), ), {, if, (, !, propA]
[), ;, if, (, typeA, ., isPropertyTypeDeclared, (, property, ), ), {, if, (, !, propA, ., isInvariant, (, propB]
[), {, if, (, !, propA, ., isInvariant, (, propB, ), ), {, return, false, ;, }, }, else, {]
[., isPropertyTypeDeclared, (, property, ), ), {, if, (, !, propA, ., isInvariant, (, propB, ), ), {, return, false]
[), ), {, if, (, !, propA, ., isInvariant, (, propB, ), ), {, return, false, ;, }, }, else]
[), {, return, false, ;, }, }, else, {, if, (, !, propA, ., isSubtype, (, propB, ), ), {]
[), {, return, false, ;, }, }, else, {, if, (, !, propA, ., isSubtype, (, propB, ), ), {]
[., isInvariant, (, propB, ), ), {, return, false, ;, }, }, else, {, if, (, !, propA, ., isSubtype]
[), ), {, return, false, ;, }, }, else, {, if, (, !, propA, ., isSubtype, (, propB, ), )]
[;, }, }, else, {, if, (, !, propA, ., isSubtype, (, propB, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, }, }, return, true, ;, }, }]
[), {, return, false, ;, }, }, }, return, true, ;, }, }]
[., isSubtype, (, propB, ), ), {, return, false, ;, }, }, }, return, true, ;, }, }]
[), ), {, return, false, ;, }, }, }, return, true, ;, }, }]
[;, }, }, }, return, true, ;, }, }]
[;, }, }]
