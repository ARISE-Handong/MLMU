[;, private, static, final, StackTraceCleaner, CLEANER, =, Plugins, ., getStackTraceCleanerProvider, (, ), ., getStackTraceCleaner, (, new, DefaultStackTraceCleaner, (, ), )]
[;, private, static, final, StackTraceCleaner, CLEANER, =, Plugins, ., getStackTraceCleanerProvider, (, ), ., getStackTraceCleaner, (, new, DefaultStackTraceCleaner, (, ), )]
[;, public, StackTraceElement, [, ], filter, (, StackTraceElement, [, ], target, ,, boolean, keepTop, ), {, List, <, StackTraceElement, >]
[., getStackTraceCleaner, (, new, DefaultStackTraceCleaner, (, ), ), ;, public, StackTraceElement, [, ], filter, (, StackTraceElement, [, ], target, ,]
[., getStackTraceCleanerProvider, (, ), ., getStackTraceCleaner, (, new, DefaultStackTraceCleaner, (, ), ), ;, public, StackTraceElement, [, ], filter, (, StackTraceElement]
[), ;, public, StackTraceElement, [, ], filter, (, StackTraceElement, [, ], target, ,, boolean, keepTop, ), {, List, <, StackTraceElement]
[;, int, lastBad, =, -, 1, ;, int, firstBad, =, -, 1, ;, for, (, int, i, =, 0, ;]
[., asList, (, target, ), ;, int, lastBad, =, -, 1, ;, int, firstBad, =, -, 1, ;, for, (]
[), ;, int, lastBad, =, -, 1, ;, int, firstBad, =, -, 1, ;, for, (, int, i, =, 0]
[;, int, firstBad, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, unfilteredStackTrace, ., size, (]
[;, int, firstBad, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, unfilteredStackTrace, ., size, (]
[;, for, (, int, i, =, 0, ;, i, <, unfilteredStackTrace, ., size, (, ), ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, unfilteredStackTrace, ., size, (, ), ;, i, ++, ), {]
[;, i, <, unfilteredStackTrace, ., size, (, ), ;, i, ++, ), {, if, (, !, CLEANER, ., isOut, (]
[;, i, ++, ), {, if, (, !, CLEANER, ., isOut, (, unfilteredStackTrace, ., get, (, i, ), ), )]
[<, unfilteredStackTrace, ., size, (, ), ;, i, ++, ), {, if, (, !, CLEANER, ., isOut, (, unfilteredStackTrace, .]
[;, i, ++, ), {, if, (, !, CLEANER, ., isOut, (, unfilteredStackTrace, ., get, (, i, ), ), )]
[., size, (, ), ;, i, ++, ), {, if, (, !, CLEANER, ., isOut, (, unfilteredStackTrace, ., get, (]
[), {, if, (, !, CLEANER, ., isOut, (, unfilteredStackTrace, ., get, (, i, ), ), ), {, continue, ;]
[++, ), {, if, (, !, CLEANER, ., isOut, (, unfilteredStackTrace, ., get, (, i, ), ), ), {, continue]
[), {, continue, ;, }, lastBad, =, i, ;, if, (, firstBad, ==, -, 1, ), {, firstBad, =, i]
[), {, continue, ;, }, lastBad, =, i, ;, if, (, firstBad, ==, -, 1, ), {, firstBad, =, i]
[., isOut, (, unfilteredStackTrace, ., get, (, i, ), ), ), {, continue, ;, }, lastBad, =, i, ;, if]
[), ), {, continue, ;, }, lastBad, =, i, ;, if, (, firstBad, ==, -, 1, ), {, firstBad, =]
[., get, (, i, ), ), ), {, continue, ;, }, lastBad, =, i, ;, if, (, firstBad, ==, -]
[), ), ), {, continue, ;, }, lastBad, =, i, ;, if, (, firstBad, ==, -, 1, ), {, firstBad]
[=, i, ;, if, (, firstBad, ==, -, 1, ), {, firstBad, =, i, ;, }, }, List, <, StackTraceElement]
[;, if, (, firstBad, ==, -, 1, ), {, firstBad, =, i, ;, }, }, List, <, StackTraceElement, >, top]
[), {, firstBad, =, i, ;, }, }, List, <, StackTraceElement, >, top, ;, if, (, keepTop, &&, firstBad, !=]
[==, -, 1, ), {, firstBad, =, i, ;, }, }, List, <, StackTraceElement, >, top, ;, if, (, keepTop]
[), {, firstBad, =, i, ;, }, }, List, <, StackTraceElement, >, top, ;, if, (, keepTop, &&, firstBad, !=]
[), {, firstBad, =, i, ;, }, }, List, <, StackTraceElement, >, top, ;, if, (, keepTop, &&, firstBad, !=]
[=, i, ;, }, }, List, <, StackTraceElement, >, top, ;, if, (, keepTop, &&, firstBad, !=, -, 1, )]
[;, }, }, List, <, StackTraceElement, >, top, ;, if, (, keepTop, &&, firstBad, !=, -, 1, ), {, top]
[), {, top, =, unfilteredStackTrace, ., subList, (, 0, ,, firstBad, ), ;, }, else, {, top, =, new, LinkedList]
[&&, firstBad, !=, -, 1, ), {, top, =, unfilteredStackTrace, ., subList, (, 0, ,, firstBad, ), ;, }, else]
[), {, top, =, unfilteredStackTrace, ., subList, (, 0, ,, firstBad, ), ;, }, else, {, top, =, new, LinkedList]
[!=, -, 1, ), {, top, =, unfilteredStackTrace, ., subList, (, 0, ,, firstBad, ), ;, }, else, {, top]
[), {, top, =, unfilteredStackTrace, ., subList, (, 0, ,, firstBad, ), ;, }, else, {, top, =, new, LinkedList]
[), {, top, =, unfilteredStackTrace, ., subList, (, 0, ,, firstBad, ), ;, }, else, {, top, =, new, LinkedList]
[=, unfilteredStackTrace, ., subList, (, 0, ,, firstBad, ), ;, }, else, {, top, =, new, LinkedList, <, StackTraceElement, >]
[;, }, else, {, top, =, new, LinkedList, <, StackTraceElement, >, (, ), ;, }, List, <, StackTraceElement, >, bottom]
[., subList, (, 0, ,, firstBad, ), ;, }, else, {, top, =, new, LinkedList, <, StackTraceElement, >, (, )]
[,, firstBad, ), ;, }, else, {, top, =, new, LinkedList, <, StackTraceElement, >, (, ), ;, }, List, <]
[), ;, }, else, {, top, =, new, LinkedList, <, StackTraceElement, >, (, ), ;, }, List, <, StackTraceElement, >]
[=, new, LinkedList, <, StackTraceElement, >, (, ), ;, }, List, <, StackTraceElement, >, bottom, =, unfilteredStackTrace, ., subList, (]
[;, }, List, <, StackTraceElement, >, bottom, =, unfilteredStackTrace, ., subList, (, lastBad, +, 1, ,, unfilteredStackTrace, ., size, (]
[;, List, <, StackTraceElement, >, filtered, =, new, ArrayList, <, StackTraceElement, >, (, top, ), ;, filtered, ., addAll, (]
[., subList, (, lastBad, +, 1, ,, unfilteredStackTrace, ., size, (, ), ), ;, List, <, StackTraceElement, >, filtered, =]
[,, unfilteredStackTrace, ., size, (, ), ), ;, List, <, StackTraceElement, >, filtered, =, new, ArrayList, <, StackTraceElement, >, (]
[+, 1, ,, unfilteredStackTrace, ., size, (, ), ), ;, List, <, StackTraceElement, >, filtered, =, new, ArrayList, <, StackTraceElement]
[,, unfilteredStackTrace, ., size, (, ), ), ;, List, <, StackTraceElement, >, filtered, =, new, ArrayList, <, StackTraceElement, >, (]
[), ;, List, <, StackTraceElement, >, filtered, =, new, ArrayList, <, StackTraceElement, >, (, top, ), ;, filtered, ., addAll]
[., size, (, ), ), ;, List, <, StackTraceElement, >, filtered, =, new, ArrayList, <, StackTraceElement, >, (, top, )]
[;, filtered, ., addAll, (, bottom, ), ;, return, filtered, ., toArray, (, new, StackTraceElement, [, ], {, }, )]
[), ;, filtered, ., addAll, (, bottom, ), ;, return, filtered, ., toArray, (, new, StackTraceElement, [, ], {, }]
[;, return, filtered, ., toArray, (, new, StackTraceElement, [, ], {, }, ), ;, }, }]
[., addAll, (, bottom, ), ;, return, filtered, ., toArray, (, new, StackTraceElement, [, ], {, }, ), ;, }]
[), ;, return, filtered, ., toArray, (, new, StackTraceElement, [, ], {, }, ), ;, }, }]
[;, }, }]
[., toArray, (, new, StackTraceElement, [, ], {, }, ), ;, }, }]
[), ;, }, }]
[), ;, }, }]
