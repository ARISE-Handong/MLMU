[;, NameReferenceGraphReport, (, NameReferenceGraph, g, ), {, this, ., graph, =, g, ;, }, public, String, getHtmlReport, (, ), {]
[=, g, ;, }, public, String, getHtmlReport, (, ), {, StringBuilder, builder, =, new, StringBuilder, (, ), ;, List, <]
[., graph, =, g, ;, }, public, String, getHtmlReport, (, ), {, StringBuilder, builder, =, new, StringBuilder, (, ), ;]
[;, }, public, String, getHtmlReport, (, ), {, StringBuilder, builder, =, new, StringBuilder, (, ), ;, List, <, DiGraphNode, <]
[;, List, <, DiGraphNode, <, Name, ,, Reference, >, >, nodes, =, Lists, ., newArrayList, (, graph, ., getDirectedGraphNodes, (]
[;, generateHtmlReportHeader, (, builder, ), ;, builder, ., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;, builder, ., append, (, "OVERALL STATS\n", ), ;]
[., newArrayList, (, graph, ., getDirectedGraphNodes, (, ), ), ;, generateHtmlReportHeader, (, builder, ), ;, builder, ., append, (, "<h1>Name Reference Graph Dump</h1>\n"]
[), ;, generateHtmlReportHeader, (, builder, ), ;, builder, ., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;, builder, ., append, (, "OVERALL STATS\n", )]
[., getDirectedGraphNodes, (, ), ), ;, generateHtmlReportHeader, (, builder, ), ;, builder, ., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;, builder, .]
[;, builder, ., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;, builder, ., append, (, "OVERALL STATS\n", ), ;, builder, ., append, (, "<ul>\n"]
[), ;, builder, ., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;, builder, ., append, (, "OVERALL STATS\n", ), ;, builder, ., append, (]
[;, builder, ., append, (, "OVERALL STATS\n", ), ;, builder, ., append, (, "<ul>\n", ), ;, builder, ., append, (, "<li>Total names: "]
[., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;, builder, ., append, (, "OVERALL STATS\n", ), ;, builder, ., append, (, "<ul>\n", ), ;]
[), ;, builder, ., append, (, "OVERALL STATS\n", ), ;, builder, ., append, (, "<ul>\n", ), ;, builder, ., append, (]
[;, builder, ., append, (, "<ul>\n", ), ;, builder, ., append, (, "<li>Total names: ", +, nodes, ., size, (, ), )]
[., append, (, "OVERALL STATS\n", ), ;, builder, ., append, (, "<ul>\n", ), ;, builder, ., append, (, "<li>Total names: ", +, nodes]
[), ;, builder, ., append, (, "<ul>\n", ), ;, builder, ., append, (, "<li>Total names: ", +, nodes, ., size, (, )]
[;, builder, ., append, (, "<li>Total names: ", +, nodes, ., size, (, ), ), ;, builder, ., append, (, "</ul>\n", )]
[., append, (, "<ul>\n", ), ;, builder, ., append, (, "<li>Total names: ", +, nodes, ., size, (, ), ), ;, builder]
[), ;, builder, ., append, (, "<li>Total names: ", +, nodes, ., size, (, ), ), ;, builder, ., append, (, "</ul>\n"]
[;, builder, ., append, (, "</ul>\n", ), ;, builder, ., append, (, "ALL NAMES\n", ), ;, builder, ., append, (, "<UL>\n"]
[., append, (, "<li>Total names: ", +, nodes, ., size, (, ), ), ;, builder, ., append, (, "</ul>\n", ), ;, builder]
[), ;, builder, ., append, (, "</ul>\n", ), ;, builder, ., append, (, "ALL NAMES\n", ), ;, builder, ., append, (]
[+, nodes, ., size, (, ), ), ;, builder, ., append, (, "</ul>\n", ), ;, builder, ., append, (, "ALL NAMES\n"]
[), ;, builder, ., append, (, "</ul>\n", ), ;, builder, ., append, (, "ALL NAMES\n", ), ;, builder, ., append, (]
[., size, (, ), ), ;, builder, ., append, (, "</ul>\n", ), ;, builder, ., append, (, "ALL NAMES\n", ), ;]
[;, builder, ., append, (, "ALL NAMES\n", ), ;, builder, ., append, (, "<UL>\n", ), ;, Collections, ., sort, (, nodes]
[., append, (, "</ul>\n", ), ;, builder, ., append, (, "ALL NAMES\n", ), ;, builder, ., append, (, "<UL>\n", ), ;]
[), ;, builder, ., append, (, "ALL NAMES\n", ), ;, builder, ., append, (, "<UL>\n", ), ;, Collections, ., sort, (]
[;, builder, ., append, (, "<UL>\n", ), ;, Collections, ., sort, (, nodes, ,, new, DiGraphNodeComparator, (, ), ), ;]
[., append, (, "ALL NAMES\n", ), ;, builder, ., append, (, "<UL>\n", ), ;, Collections, ., sort, (, nodes, ,, new]
[), ;, builder, ., append, (, "<UL>\n", ), ;, Collections, ., sort, (, nodes, ,, new, DiGraphNodeComparator, (, ), )]
[;, Collections, ., sort, (, nodes, ,, new, DiGraphNodeComparator, (, ), ), ;, for, (, DiGraphNode, <, Name, ,, Reference]
[., append, (, "<UL>\n", ), ;, Collections, ., sort, (, nodes, ,, new, DiGraphNodeComparator, (, ), ), ;, for, (]
[), ;, Collections, ., sort, (, nodes, ,, new, DiGraphNodeComparator, (, ), ), ;, for, (, DiGraphNode, <, Name, ,]
[;, for, (, DiGraphNode, <, Name, ,, Reference, >, n, :, nodes, ), {, generateDeclarationReport, (, builder, ,, n, )]
[., sort, (, nodes, ,, new, DiGraphNodeComparator, (, ), ), ;, for, (, DiGraphNode, <, Name, ,, Reference, >, n]
[,, new, DiGraphNodeComparator, (, ), ), ;, for, (, DiGraphNode, <, Name, ,, Reference, >, n, :, nodes, ), {]
[), ;, for, (, DiGraphNode, <, Name, ,, Reference, >, n, :, nodes, ), {, generateDeclarationReport, (, builder, ,, n]
[), {, generateDeclarationReport, (, builder, ,, n, ), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, outEdges, =]
[;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, outEdges, =, graph, ., getOutEdges, (, n, ., getValue, (]
[,, n, ), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, outEdges, =, graph, ., getOutEdges, (, n]
[), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, outEdges, =, graph, ., getOutEdges, (, n, ., getValue]
[;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, inEdges, =, graph, ., getInEdges, (, n, ., getValue, (]
[., getOutEdges, (, n, ., getValue, (, ), ), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, inEdges]
[), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, inEdges, =, graph, ., getInEdges, (, n, ., getValue]
[., getValue, (, ), ), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, inEdges, =, graph, ., getInEdges]
[;, if, (, !, outEdges, ., isEmpty, (, ), ||, !, inEdges, ., isEmpty, (, ), ), {, builder, .]
[., getInEdges, (, n, ., getValue, (, ), ), ;, if, (, !, outEdges, ., isEmpty, (, ), ||, !]
[), ;, if, (, !, outEdges, ., isEmpty, (, ), ||, !, inEdges, ., isEmpty, (, ), ), {, builder]
[., getValue, (, ), ), ;, if, (, !, outEdges, ., isEmpty, (, ), ||, !, inEdges, ., isEmpty, (]
[), {, builder, ., append, (, "<ul>", ), ;, if, (, outEdges, ., size, (, ), >, 0, ), {]
[||, !, inEdges, ., isEmpty, (, ), ), {, builder, ., append, (, "<ul>", ), ;, if, (, outEdges, .]
[||, !, inEdges, ., isEmpty, (, ), ), {, builder, ., append, (, "<ul>", ), ;, if, (, outEdges, .]
[., isEmpty, (, ), ||, !, inEdges, ., isEmpty, (, ), ), {, builder, ., append, (, "<ul>", ), ;]
[), {, builder, ., append, (, "<ul>", ), ;, if, (, outEdges, ., size, (, ), >, 0, ), {]
[), {, builder, ., append, (, "<ul>", ), ;, if, (, outEdges, ., size, (, ), >, 0, ), {]
[., isEmpty, (, ), ), {, builder, ., append, (, "<ul>", ), ;, if, (, outEdges, ., size, (, )]
[;, if, (, outEdges, ., size, (, ), >, 0, ), {, builder, ., append, (, "<li>REFERS TO:<br>\n", ), ;, builder]
[., append, (, "<ul>", ), ;, if, (, outEdges, ., size, (, ), >, 0, ), {, builder, ., append]
[), ;, if, (, outEdges, ., size, (, ), >, 0, ), {, builder, ., append, (, "<li>REFERS TO:<br>\n", ), ;]
[), {, builder, ., append, (, "<li>REFERS TO:<br>\n", ), ;, builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <]
[>, 0, ), {, builder, ., append, (, "<li>REFERS TO:<br>\n", ), ;, builder, ., append, (, "<ul>", ), ;, for, (]
[., size, (, ), >, 0, ), {, builder, ., append, (, "<li>REFERS TO:<br>\n", ), ;, builder, ., append, (, "<ul>"]
[), {, builder, ., append, (, "<li>REFERS TO:<br>\n", ), ;, builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <]
[;, builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, outEdges, )]
[., append, (, "<li>REFERS TO:<br>\n", ), ;, builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference]
[), ;, builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, outEdges]
[;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, outEdges, ), {, generateEdgeReport, (, builder, ,, edge, .]
[., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, outEdges, ), {, generateEdgeReport]
[), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, outEdges, ), {, generateEdgeReport, (, builder, ,, edge]
[), {, generateEdgeReport, (, builder, ,, edge, ., getDestination, (, ), ., getValue, (, ), ,, edge, ), ;, }]
[;, }, builder, ., append, (, "</ul>\n", ), ;, }, if, (, inEdges, ., size, (, ), >, 0, )]
[,, edge, ., getDestination, (, ), ., getValue, (, ), ,, edge, ), ;, }, builder, ., append, (, "</ul>\n"]
[,, edge, ), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, if, (, inEdges, ., size, (, )]
[., getValue, (, ), ,, edge, ), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, if, (, inEdges]
[., getDestination, (, ), ., getValue, (, ), ,, edge, ), ;, }, builder, ., append, (, "</ul>\n", ), ;]
[), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, if, (, inEdges, ., size, (, ), >, 0]
[;, }, if, (, inEdges, ., size, (, ), >, 0, ), {, builder, ., append, (, "<li>REFERENCED BY:<br>\n", ), ;]
[., append, (, "</ul>\n", ), ;, }, if, (, inEdges, ., size, (, ), >, 0, ), {, builder, .]
[), ;, }, if, (, inEdges, ., size, (, ), >, 0, ), {, builder, ., append, (, "<li>REFERENCED BY:<br>\n", )]
[), {, builder, ., append, (, "<li>REFERENCED BY:<br>\n", ), ;, builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <]
[>, 0, ), {, builder, ., append, (, "<li>REFERENCED BY:<br>\n", ), ;, builder, ., append, (, "<ul>", ), ;, for, (]
[., size, (, ), >, 0, ), {, builder, ., append, (, "<li>REFERENCED BY:<br>\n", ), ;, builder, ., append, (, "<ul>"]
[), {, builder, ., append, (, "<li>REFERENCED BY:<br>\n", ), ;, builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <]
[;, builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, inEdges, )]
[., append, (, "<li>REFERENCED BY:<br>\n", ), ;, builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference]
[), ;, builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, inEdges]
[;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, inEdges, ), {, generateEdgeReport, (, builder, ,, edge, .]
[., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, inEdges, ), {, generateEdgeReport]
[), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, inEdges, ), {, generateEdgeReport, (, builder, ,, edge]
[), {, generateEdgeReport, (, builder, ,, edge, ., getSource, (, ), ., getValue, (, ), ,, edge, ), ;, }]
[;, }, builder, ., append, (, "</ul>", ), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, }, builder]
[,, edge, ., getSource, (, ), ., getValue, (, ), ,, edge, ), ;, }, builder, ., append, (, "</ul>"]
[,, edge, ), ;, }, builder, ., append, (, "</ul>", ), ;, }, builder, ., append, (, "</ul>\n", ), ;]
[., getValue, (, ), ,, edge, ), ;, }, builder, ., append, (, "</ul>", ), ;, }, builder, ., append]
[., getSource, (, ), ., getValue, (, ), ,, edge, ), ;, }, builder, ., append, (, "</ul>", ), ;]
[), ;, }, builder, ., append, (, "</ul>", ), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, }]
[;, }, builder, ., append, (, "</ul>\n", ), ;, }, }, builder, ., append, (, "</ul>\n", ), ;, generateHtmlReportFooter, (]
[., append, (, "</ul>", ), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, }, builder, ., append, (]
[), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, }, builder, ., append, (, "</ul>\n", ), ;, generateHtmlReportFooter]
[;, }, }, builder, ., append, (, "</ul>\n", ), ;, generateHtmlReportFooter, (, builder, ), ;, return, builder, ., toString, (]
[., append, (, "</ul>\n", ), ;, }, }, builder, ., append, (, "</ul>\n", ), ;, generateHtmlReportFooter, (, builder, ), ;]
[), ;, }, }, builder, ., append, (, "</ul>\n", ), ;, generateHtmlReportFooter, (, builder, ), ;, return, builder, ., toString]
[;, generateHtmlReportFooter, (, builder, ), ;, return, builder, ., toString, (, ), ;, }, private, String, getSourceFile, (, Node, node]
[., append, (, "</ul>\n", ), ;, generateHtmlReportFooter, (, builder, ), ;, return, builder, ., toString, (, ), ;, }, private]
[), ;, generateHtmlReportFooter, (, builder, ), ;, return, builder, ., toString, (, ), ;, }, private, String, getSourceFile, (, Node]
[;, return, builder, ., toString, (, ), ;, }, private, String, getSourceFile, (, Node, node, ), {, String, filename, =]
[), ;, return, builder, ., toString, (, ), ;, }, private, String, getSourceFile, (, Node, node, ), {, String, filename]
[;, }, private, String, getSourceFile, (, Node, node, ), {, String, filename, =, node, ., getSourceFileName, (, ), ;, if]
[., toString, (, ), ;, }, private, String, getSourceFile, (, Node, node, ), {, String, filename, =, node, ., getSourceFileName]
[;, if, (, filename, ==, null, ), {, return, "", ;, }, return, filename, ;, }, private, void, generateDeclarationReport, (]
[., getSourceFileName, (, ), ;, if, (, filename, ==, null, ), {, return, "", ;, }, return, filename, ;, }]
[), {, return, "", ;, }, return, filename, ;, }, private, void, generateDeclarationReport, (, StringBuilder, builder, ,, DiGraphNode, <, Name]
[==, null, ), {, return, "", ;, }, return, filename, ;, }, private, void, generateDeclarationReport, (, StringBuilder, builder, ,, DiGraphNode]
[), {, return, "", ;, }, return, filename, ;, }, private, void, generateDeclarationReport, (, StringBuilder, builder, ,, DiGraphNode, <, Name]
[;, }, return, filename, ;, }, private, void, generateDeclarationReport, (, StringBuilder, builder, ,, DiGraphNode, <, Name, ,, Reference, >, declarationNode]
[;, }, private, void, generateDeclarationReport, (, StringBuilder, builder, ,, DiGraphNode, <, Name, ,, Reference, >, declarationNode, ), {, String, declName]
[;, JSType, declType, =, declarationNode, ., getValue, (, ), ., getType, (, ), ;, builder, ., append, (, "<LI> ", )]
[., getQualifiedName, (, ), ;, JSType, declType, =, declarationNode, ., getValue, (, ), ., getType, (, ), ;, builder, .]
[., getValue, (, ), ., getQualifiedName, (, ), ;, JSType, declType, =, declarationNode, ., getValue, (, ), ., getType, (]
[;, builder, ., append, (, "<LI> ", ), ;, builder, ., append, (, "<A NAME=\"", +, declName, +, "\">", ), ;, builder]
[., getType, (, ), ;, builder, ., append, (, "<LI> ", ), ;, builder, ., append, (, "<A NAME=\"", +, declName, +]
[., getValue, (, ), ., getType, (, ), ;, builder, ., append, (, "<LI> ", ), ;, builder, ., append, (]
[;, builder, ., append, (, "<A NAME=\"", +, declName, +, "\">", ), ;, builder, ., append, (, declName, ), ;, builder]
[., append, (, "<LI> ", ), ;, builder, ., append, (, "<A NAME=\"", +, declName, +, "\">", ), ;, builder, ., append]
[), ;, builder, ., append, (, "<A NAME=\"", +, declName, +, "\">", ), ;, builder, ., append, (, declName, ), ;]
[;, builder, ., append, (, declName, ), ;, builder, ., append, (, "\n", ), ;, generateType, (, builder, ,, declType]
[., append, (, "<A NAME=\"", +, declName, +, "\">", ), ;, builder, ., append, (, declName, ), ;, builder, ., append]
[), ;, builder, ., append, (, declName, ), ;, builder, ., append, (, "\n", ), ;, generateType, (, builder, ,]
[+, "\">", ), ;, builder, ., append, (, declName, ), ;, builder, ., append, (, "\n", ), ;, generateType, (]
[+, declName, +, "\">", ), ;, builder, ., append, (, declName, ), ;, builder, ., append, (, "\n", ), ;]
[+, "\">", ), ;, builder, ., append, (, declName, ), ;, builder, ., append, (, "\n", ), ;, generateType, (]
[), ;, builder, ., append, (, declName, ), ;, builder, ., append, (, "\n", ), ;, generateType, (, builder, ,]
[;, builder, ., append, (, "\n", ), ;, generateType, (, builder, ,, declType, ), ;, List, <, DefinitionsRemover, ., Definition]
[., append, (, declName, ), ;, builder, ., append, (, "\n", ), ;, generateType, (, builder, ,, declType, ), ;]
[), ;, builder, ., append, (, "\n", ), ;, generateType, (, builder, ,, declType, ), ;, List, <, DefinitionsRemover, .]
[;, generateType, (, builder, ,, declType, ), ;, List, <, DefinitionsRemover, ., Definition, >, defs, =, declarationNode, ., getValue, (]
[., append, (, "\n", ), ;, generateType, (, builder, ,, declType, ), ;, List, <, DefinitionsRemover, ., Definition, >, defs]
[), ;, generateType, (, builder, ,, declType, ), ;, List, <, DefinitionsRemover, ., Definition, >, defs, =, declarationNode, ., getValue]
[;, List, <, DefinitionsRemover, ., Definition, >, defs, =, declarationNode, ., getValue, (, ), ., getDeclarations, (, ), ;, if]
[,, declType, ), ;, List, <, DefinitionsRemover, ., Definition, >, defs, =, declarationNode, ., getValue, (, ), ., getDeclarations, (]
[), ;, List, <, DefinitionsRemover, ., Definition, >, defs, =, declarationNode, ., getValue, (, ), ., getDeclarations, (, ), ;]
[;, if, (, defs, ., size, (, ), ==, 0, ), {, builder, ., append, (, "<br>No definitions found<br>", ), ;, }]
[., getDeclarations, (, ), ;, if, (, defs, ., size, (, ), ==, 0, ), {, builder, ., append, (]
[., getValue, (, ), ., getDeclarations, (, ), ;, if, (, defs, ., size, (, ), ==, 0, ), {]
[), {, builder, ., append, (, "<br>No definitions found<br>", ), ;, }, else, {, builder, ., append, (, "<ul>", ), ;, for]
[==, 0, ), {, builder, ., append, (, "<br>No definitions found<br>", ), ;, }, else, {, builder, ., append, (, "<ul>", )]
[., size, (, ), ==, 0, ), {, builder, ., append, (, "<br>No definitions found<br>", ), ;, }, else, {, builder, .]
[), {, builder, ., append, (, "<br>No definitions found<br>", ), ;, }, else, {, builder, ., append, (, "<ul>", ), ;, for]
[;, }, else, {, builder, ., append, (, "<ul>", ), ;, for, (, DefinitionsRemover, ., Definition, def, :, defs, )]
[., append, (, "<br>No definitions found<br>", ), ;, }, else, {, builder, ., append, (, "<ul>", ), ;, for, (, DefinitionsRemover, .]
[), ;, }, else, {, builder, ., append, (, "<ul>", ), ;, for, (, DefinitionsRemover, ., Definition, def, :, defs]
[;, for, (, DefinitionsRemover, ., Definition, def, :, defs, ), {, Node, fnDef, =, def, ., getRValue, (, ), ;]
[., append, (, "<ul>", ), ;, for, (, DefinitionsRemover, ., Definition, def, :, defs, ), {, Node, fnDef, =, def]
[), ;, for, (, DefinitionsRemover, ., Definition, def, :, defs, ), {, Node, fnDef, =, def, ., getRValue, (, )]
[), {, Node, fnDef, =, def, ., getRValue, (, ), ;, String, sourceFileName, =, getSourceFile, (, fnDef, ), ;, builder]
[;, String, sourceFileName, =, getSourceFile, (, fnDef, ), ;, builder, ., append, (, "<li> Defined: ", ), ;, generateSourceReferenceLink, (, builder, ,]
[., getRValue, (, ), ;, String, sourceFileName, =, getSourceFile, (, fnDef, ), ;, builder, ., append, (, "<li> Defined: ", ), ;]
[;, builder, ., append, (, "<li> Defined: ", ), ;, generateSourceReferenceLink, (, builder, ,, sourceFileName, ,, fnDef, ., getLineno, (, ), ,]
[), ;, builder, ., append, (, "<li> Defined: ", ), ;, generateSourceReferenceLink, (, builder, ,, sourceFileName, ,, fnDef, ., getLineno, (, )]
[;, generateSourceReferenceLink, (, builder, ,, sourceFileName, ,, fnDef, ., getLineno, (, ), ,, fnDef, ., getCharno, (, ), ), ;]
[., append, (, "<li> Defined: ", ), ;, generateSourceReferenceLink, (, builder, ,, sourceFileName, ,, fnDef, ., getLineno, (, ), ,, fnDef, .]
[), ;, generateSourceReferenceLink, (, builder, ,, sourceFileName, ,, fnDef, ., getLineno, (, ), ,, fnDef, ., getCharno, (, ), )]
[;, }, builder, ., append, (, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder]
[,, sourceFileName, ,, fnDef, ., getLineno, (, ), ,, fnDef, ., getCharno, (, ), ), ;, }, builder, ., append]
[,, fnDef, ., getLineno, (, ), ,, fnDef, ., getCharno, (, ), ), ;, }, builder, ., append, (, "</ul>"]
[,, fnDef, ., getCharno, (, ), ), ;, }, builder, ., append, (, "</ul>", ), ;, }, }, private, void]
[., getLineno, (, ), ,, fnDef, ., getCharno, (, ), ), ;, }, builder, ., append, (, "</ul>", ), ;]
[), ;, }, builder, ., append, (, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {]
[., getCharno, (, ), ), ;, }, builder, ., append, (, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (]
[;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (, "<!DOCTYPE html>\n", +, "<html>", +, "<head>"]
[., append, (, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (]
[), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (, "<!DOCTYPE html>\n", +, "<html>", +]
[;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, ., append, (, "li {margin-top:3px; margin-left:24px;"]
[., append, (, "<!DOCTYPE html>\n", +, "<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, .]
[), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, ., append, (]
[+, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, .]
[+, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;]
[+, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}"]
[+, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append]
[+, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder]
[+, "<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", )]
[+, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder]
[+, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append]
[+, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}"]
[+, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;]
[+, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, .]
[), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, ., append, (]
[;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, ., append, (, "li {margin-top:3px; margin-left:24px;", +, "padding-left:0px;padding-bottom: 4px}", ), ;, builder, ., append]
[., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, ., append, (, "li {margin-top:3px; margin-left:24px;", +, "padding-left:0px;padding-bottom: 4px}"]
[), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, ., append, (, "li {margin-top:3px; margin-left:24px;", +, "padding-left:0px;padding-bottom: 4px}", ), ;, builder, .]
[;, builder, ., append, (, "li {margin-top:3px; margin-left:24px;", +, "padding-left:0px;padding-bottom: 4px}", ), ;, builder, ., append, (, "</style></head><body>\n", ), ;, }, private, void]
[., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, ., append, (, "li {margin-top:3px; margin-left:24px;", +, "padding-left:0px;padding-bottom: 4px}", ), ;, builder, ., append, (, "</style></head><body>\n"]
[), ;, builder, ., append, (, "li {margin-top:3px; margin-left:24px;", +, "padding-left:0px;padding-bottom: 4px}", ), ;, builder, ., append, (, "</style></head><body>\n", ), ;, }, private]
[;, builder, ., append, (, "</style></head><body>\n", ), ;, }, private, void, generateHtmlReportFooter, (, StringBuilder, builder, ), {, builder, ., append]
[., append, (, "li {margin-top:3px; margin-left:24px;", +, "padding-left:0px;padding-bottom: 4px}", ), ;, builder, ., append, (, "</style></head><body>\n", ), ;, }, private, void, generateHtmlReportFooter, (]
[), ;, builder, ., append, (, "</style></head><body>\n", ), ;, }, private, void, generateHtmlReportFooter, (, StringBuilder, builder, ), {, builder, .]
[+, "padding-left:0px;padding-bottom: 4px}", ), ;, builder, ., append, (, "</style></head><body>\n", ), ;, }, private, void, generateHtmlReportFooter, (, StringBuilder, builder, ), {]
[), ;, builder, ., append, (, "</style></head><body>\n", ), ;, }, private, void, generateHtmlReportFooter, (, StringBuilder, builder, ), {, builder, .]
[;, }, private, void, generateHtmlReportFooter, (, StringBuilder, builder, ), {, builder, ., append, (, "</body></html>", ), ;, }, private, void]
[., append, (, "</style></head><body>\n", ), ;, }, private, void, generateHtmlReportFooter, (, StringBuilder, builder, ), {, builder, ., append, (, "</body></html>"]
[), ;, }, private, void, generateHtmlReportFooter, (, StringBuilder, builder, ), {, builder, ., append, (, "</body></html>", ), ;, }, private]
[;, }, private, void, generateEdgeReport, (, StringBuilder, builder, ,, Name, referencedDecl, ,, DiGraphEdge, <, Name, ,, Reference, >, edge, )]
[., append, (, "</body></html>", ), ;, }, private, void, generateEdgeReport, (, StringBuilder, builder, ,, Name, referencedDecl, ,, DiGraphEdge, <, Name]
[), ;, }, private, void, generateEdgeReport, (, StringBuilder, builder, ,, Name, referencedDecl, ,, DiGraphEdge, <, Name, ,, Reference, >, edge]
[;, builder, ., append, (, "<li><A HREF=\"#", +, srcDeclName, +, "\">", ), ;, builder, ., append, (, srcDeclName, ), ;, builder]
[., getQualifiedName, (, ), ;, builder, ., append, (, "<li><A HREF=\"#", +, srcDeclName, +, "\">", ), ;, builder, ., append, (]
[;, builder, ., append, (, srcDeclName, ), ;, builder, ., append, (, "</a> ", ), ;, Node, def, =, edge, .]
[., append, (, "<li><A HREF=\"#", +, srcDeclName, +, "\">", ), ;, builder, ., append, (, srcDeclName, ), ;, builder, ., append]
[), ;, builder, ., append, (, srcDeclName, ), ;, builder, ., append, (, "</a> ", ), ;, Node, def, =, edge]
[+, "\">", ), ;, builder, ., append, (, srcDeclName, ), ;, builder, ., append, (, "</a> ", ), ;, Node, def]
[+, srcDeclName, +, "\">", ), ;, builder, ., append, (, srcDeclName, ), ;, builder, ., append, (, "</a> ", ), ;]
[+, "\">", ), ;, builder, ., append, (, srcDeclName, ), ;, builder, ., append, (, "</a> ", ), ;, Node, def]
[), ;, builder, ., append, (, srcDeclName, ), ;, builder, ., append, (, "</a> ", ), ;, Node, def, =, edge]
[;, builder, ., append, (, "</a> ", ), ;, Node, def, =, edge, ., getValue, (, ), ., getSite, (, )]
[., append, (, srcDeclName, ), ;, builder, ., append, (, "</a> ", ), ;, Node, def, =, edge, ., getValue, (]
[), ;, builder, ., append, (, "</a> ", ), ;, Node, def, =, edge, ., getValue, (, ), ., getSite, (]
[;, Node, def, =, edge, ., getValue, (, ), ., getSite, (, ), ;, int, lineNumber, =, def, ., getLineno]
[., append, (, "</a> ", ), ;, Node, def, =, edge, ., getValue, (, ), ., getSite, (, ), ;, int]
[), ;, Node, def, =, edge, ., getValue, (, ), ., getSite, (, ), ;, int, lineNumber, =, def, .]
[;, int, lineNumber, =, def, ., getLineno, (, ), ;, int, columnNumber, =, def, ., getCharno, (, ), ;, String]
[., getSite, (, ), ;, int, lineNumber, =, def, ., getLineno, (, ), ;, int, columnNumber, =, def, ., getCharno]
[., getValue, (, ), ., getSite, (, ), ;, int, lineNumber, =, def, ., getLineno, (, ), ;, int, columnNumber]
[;, int, columnNumber, =, def, ., getCharno, (, ), ;, String, sourceFile, =, getSourceFile, (, def, ), ;, generateSourceReferenceLink, (]
[., getLineno, (, ), ;, int, columnNumber, =, def, ., getCharno, (, ), ;, String, sourceFile, =, getSourceFile, (, def]
[;, String, sourceFile, =, getSourceFile, (, def, ), ;, generateSourceReferenceLink, (, builder, ,, sourceFile, ,, lineNumber, ,, columnNumber, ), ;]
[., getCharno, (, ), ;, String, sourceFile, =, getSourceFile, (, def, ), ;, generateSourceReferenceLink, (, builder, ,, sourceFile, ,, lineNumber]
[;, generateSourceReferenceLink, (, builder, ,, sourceFile, ,, lineNumber, ,, columnNumber, ), ;, JSType, defType, =, edge, ., getValue, (, )]
[), ;, generateSourceReferenceLink, (, builder, ,, sourceFile, ,, lineNumber, ,, columnNumber, ), ;, JSType, defType, =, edge, ., getValue, (]
[;, JSType, defType, =, edge, ., getValue, (, ), ., getSite, (, ), ., getJSType, (, ), ;, generateType, (]
[,, sourceFile, ,, lineNumber, ,, columnNumber, ), ;, JSType, defType, =, edge, ., getValue, (, ), ., getSite, (, )]
[,, lineNumber, ,, columnNumber, ), ;, JSType, defType, =, edge, ., getValue, (, ), ., getSite, (, ), ., getJSType]
[,, columnNumber, ), ;, JSType, defType, =, edge, ., getValue, (, ), ., getSite, (, ), ., getJSType, (, )]
[), ;, JSType, defType, =, edge, ., getValue, (, ), ., getSite, (, ), ., getJSType, (, ), ;, generateType]
[;, generateType, (, builder, ,, defType, ), ;, }, private, void, generateSourceReferenceLink, (, StringBuilder, builder, ,, String, sourceFile, ,, int]
[., getJSType, (, ), ;, generateType, (, builder, ,, defType, ), ;, }, private, void, generateSourceReferenceLink, (, StringBuilder, builder, ,]
[., getSite, (, ), ., getJSType, (, ), ;, generateType, (, builder, ,, defType, ), ;, }, private, void, generateSourceReferenceLink]
[., getValue, (, ), ., getSite, (, ), ., getJSType, (, ), ;, generateType, (, builder, ,, defType, ), ;]
[;, }, private, void, generateSourceReferenceLink, (, StringBuilder, builder, ,, String, sourceFile, ,, int, lineNumber, ,, int, columnNumber, ), {, assert]
[,, defType, ), ;, }, private, void, generateSourceReferenceLink, (, StringBuilder, builder, ,, String, sourceFile, ,, int, lineNumber, ,, int, columnNumber]
[), ;, }, private, void, generateSourceReferenceLink, (, StringBuilder, builder, ,, String, sourceFile, ,, int, lineNumber, ,, int, columnNumber, ), {]
[;, builder, ., append, (, "(", ), ;, builder, ., append, (, sourceFile, +, ":", +, lineNumber, +, ",", +]
[), ;, builder, ., append, (, "(", ), ;, builder, ., append, (, sourceFile, +, ":", +, lineNumber, +, ","]
[!=, null, ), ;, builder, ., append, (, "(", ), ;, builder, ., append, (, sourceFile, +, ":", +, lineNumber]
[), ;, builder, ., append, (, "(", ), ;, builder, ., append, (, sourceFile, +, ":", +, lineNumber, +, ","]
[;, builder, ., append, (, sourceFile, +, ":", +, lineNumber, +, ",", +, columnNumber, ), ;, builder, ., append, (]
[., append, (, "(", ), ;, builder, ., append, (, sourceFile, +, ":", +, lineNumber, +, ",", +, columnNumber, )]
[), ;, builder, ., append, (, sourceFile, +, ":", +, lineNumber, +, ",", +, columnNumber, ), ;, builder, ., append]
[;, builder, ., append, (, ")", ), ;, }, private, void, generateType, (, StringBuilder, builder, ,, JSType, defType, ), {]
[., append, (, sourceFile, +, ":", +, lineNumber, +, ",", +, columnNumber, ), ;, builder, ., append, (, ")", )]
[), ;, builder, ., append, (, ")", ), ;, }, private, void, generateType, (, StringBuilder, builder, ,, JSType, defType, )]
[+, columnNumber, ), ;, builder, ., append, (, ")", ), ;, }, private, void, generateType, (, StringBuilder, builder, ,, JSType]
[+, ",", +, columnNumber, ), ;, builder, ., append, (, ")", ), ;, }, private, void, generateType, (, StringBuilder, builder]
[+, lineNumber, +, ",", +, columnNumber, ), ;, builder, ., append, (, ")", ), ;, }, private, void, generateType, (]
[+, ":", +, lineNumber, +, ",", +, columnNumber, ), ;, builder, ., append, (, ")", ), ;, }, private, void]
[+, lineNumber, +, ",", +, columnNumber, ), ;, builder, ., append, (, ")", ), ;, }, private, void, generateType, (]
[+, ",", +, columnNumber, ), ;, builder, ., append, (, ")", ), ;, }, private, void, generateType, (, StringBuilder, builder]
[+, columnNumber, ), ;, builder, ., append, (, ")", ), ;, }, private, void, generateType, (, StringBuilder, builder, ,, JSType]
[), ;, builder, ., append, (, ")", ), ;, }, private, void, generateType, (, StringBuilder, builder, ,, JSType, defType, )]
[;, }, private, void, generateType, (, StringBuilder, builder, ,, JSType, defType, ), {, if, (, defType, ==, null, ), {]
[., append, (, ")", ), ;, }, private, void, generateType, (, StringBuilder, builder, ,, JSType, defType, ), {, if, (]
[), ;, }, private, void, generateType, (, StringBuilder, builder, ,, JSType, defType, ), {, if, (, defType, ==, null, )]
[), {, builder, ., append, (, " (type: null) ", ), ;, }, else, if, (, defType, ., isUnknownType, (, ), ), {]
[==, null, ), {, builder, ., append, (, " (type: null) ", ), ;, }, else, if, (, defType, ., isUnknownType, (, )]
[), {, builder, ., append, (, " (type: null) ", ), ;, }, else, if, (, defType, ., isUnknownType, (, ), ), {]
[;, }, else, if, (, defType, ., isUnknownType, (, ), ), {, builder, ., append, (, " (type: unknown) ", ), ;, }]
[., append, (, " (type: null) ", ), ;, }, else, if, (, defType, ., isUnknownType, (, ), ), {, builder, ., append]
[), ;, }, else, if, (, defType, ., isUnknownType, (, ), ), {, builder, ., append, (, " (type: unknown) ", ), ;]
[), {, builder, ., append, (, " (type: unknown) ", ), ;, }, else, {, builder, ., append, (, " (type: ", +, defType, .]
[., isUnknownType, (, ), ), {, builder, ., append, (, " (type: unknown) ", ), ;, }, else, {, builder, ., append, (]
[;, }, else, {, builder, ., append, (, " (type: ", +, defType, ., toString, (, ), +, ") ", ), ;, }]
[., append, (, " (type: unknown) ", ), ;, }, else, {, builder, ., append, (, " (type: ", +, defType, ., toString, (, )]
[), ;, }, else, {, builder, ., append, (, " (type: ", +, defType, ., toString, (, ), +, ") ", ), ;]
[;, }, }, class, DiGraphNodeComparator, implements, Comparator, <, DiGraphNode, <, Name, ,, Reference, >, >, {, @, Override, public, int]
[., append, (, " (type: ", +, defType, ., toString, (, ), +, ") ", ), ;, }, }, class, DiGraphNodeComparator, implements, Comparator]
[), ;, }, }, class, DiGraphNodeComparator, implements, Comparator, <, DiGraphNode, <, Name, ,, Reference, >, >, {, @, Override, public]
[+, ") ", ), ;, }, }, class, DiGraphNodeComparator, implements, Comparator, <, DiGraphNode, <, Name, ,, Reference, >, >, {, @]
[+, defType, ., toString, (, ), +, ") ", ), ;, }, }, class, DiGraphNodeComparator, implements, Comparator, <, DiGraphNode, <, Name]
[+, ") ", ), ;, }, }, class, DiGraphNodeComparator, implements, Comparator, <, DiGraphNode, <, Name, ,, Reference, >, >, {, @]
[., toString, (, ), +, ") ", ), ;, }, }, class, DiGraphNodeComparator, implements, Comparator, <, DiGraphNode, <, Name, ,, Reference]
[), ;, }, }, class, DiGraphNodeComparator, implements, Comparator, <, DiGraphNode, <, Name, ,, Reference, >, >, {, @, Override, public]
[;, Preconditions, ., checkNotNull, (, node2, ., getValue, (, ), ), ;, if, (, (, node1, ., getValue, (, )]
[., checkNotNull, (, node1, ., getValue, (, ), ), ;, Preconditions, ., checkNotNull, (, node2, ., getValue, (, ), )]
[), ;, Preconditions, ., checkNotNull, (, node2, ., getValue, (, ), ), ;, if, (, (, node1, ., getValue, (]
[., getValue, (, ), ), ;, Preconditions, ., checkNotNull, (, node2, ., getValue, (, ), ), ;, if, (, (]
[;, if, (, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), &&, (, node2, .]
[., checkNotNull, (, node2, ., getValue, (, ), ), ;, if, (, (, node1, ., getValue, (, ), ., getQualifiedName]
[), ;, if, (, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), &&, (, node2]
[., getValue, (, ), ), ;, if, (, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null]
[), {, return, 0, ;, }, if, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, )]
[&&, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), ), {, return, 0, ;, }]
[), &&, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), ), {, return, 0, ;]
[==, null, ), &&, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), ), {, return]
[., getQualifiedName, (, ), ==, null, ), &&, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null]
[., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), &&, (, node2, ., getValue, (, ), ., getQualifiedName]
[), &&, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), ), {, return, 0, ;]
[), {, return, 0, ;, }, if, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, )]
[), ), {, return, 0, ;, }, if, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null]
[==, null, ), ), {, return, 0, ;, }, if, (, node1, ., getValue, (, ), ., getQualifiedName, (, )]
[., getQualifiedName, (, ), ==, null, ), ), {, return, 0, ;, }, if, (, node1, ., getValue, (, )]
[., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), ), {, return, 0, ;, }, if, (, node1]
[), ), {, return, 0, ;, }, if, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null]
[;, }, if, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, -, 1]
[), {, return, -, 1, ;, }, if, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null]
[==, null, ), {, return, -, 1, ;, }, if, (, node2, ., getValue, (, ), ., getQualifiedName, (, )]
[., getQualifiedName, (, ), ==, null, ), {, return, -, 1, ;, }, if, (, node2, ., getValue, (, )]
[., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, -, 1, ;, }, if, (, node2]
[), {, return, -, 1, ;, }, if, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null]
[;, }, if, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, 1, ;]
[;, }, if, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, 1, ;]
[), {, return, 1, ;, }, return, node1, ., getValue, (, ), ., getQualifiedName, (, ), ., compareTo, (, node2]
[==, null, ), {, return, 1, ;, }, return, node1, ., getValue, (, ), ., getQualifiedName, (, ), ., compareTo]
[., getQualifiedName, (, ), ==, null, ), {, return, 1, ;, }, return, node1, ., getValue, (, ), ., getQualifiedName]
[., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, 1, ;, }, return, node1, ., getValue]
[), {, return, 1, ;, }, return, node1, ., getValue, (, ), ., getQualifiedName, (, ), ., compareTo, (, node2]
[;, }, return, node1, ., getValue, (, ), ., getQualifiedName, (, ), ., compareTo, (, node2, ., getValue, (, )]
[;, }, }, }]
[., compareTo, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ), ;, }, }, }]
[., getQualifiedName, (, ), ., compareTo, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ), ;, }, }]
[., getValue, (, ), ., getQualifiedName, (, ), ., compareTo, (, node2, ., getValue, (, ), ., getQualifiedName, (, )]
[), ;, }, }, }]
[., getQualifiedName, (, ), ), ;, }, }, }]
[., getValue, (, ), ., getQualifiedName, (, ), ), ;, }, }, }]
