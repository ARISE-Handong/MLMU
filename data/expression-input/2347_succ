[;, private, final, double, mu, ;, private, final, double, c, ;, private, final, double, halfC, ;, public, LevyDistribution, (, final]
[), ;, this, ., mu, =, mu, ;, this, ., c, =, c, ;, this, ., halfC, =, 0.5, *]
[=, mu, ;, this, ., c, =, c, ;, this, ., halfC, =, 0.5, *, c, ;, }, public, double]
[., mu, =, mu, ;, this, ., c, =, c, ;, this, ., halfC, =, 0.5, *, c, ;, }]
[;, this, ., c, =, c, ;, this, ., halfC, =, 0.5, *, c, ;, }, public, double, density, (]
[=, c, ;, this, ., halfC, =, 0.5, *, c, ;, }, public, double, density, (, final, double, x, )]
[., c, =, c, ;, this, ., halfC, =, 0.5, *, c, ;, }, public, double, density, (, final, double]
[;, this, ., halfC, =, 0.5, *, c, ;, }, public, double, density, (, final, double, x, ), {, if]
[=, 0.5, *, c, ;, }, public, double, density, (, final, double, x, ), {, if, (, x, <, mu]
[., halfC, =, 0.5, *, c, ;, }, public, double, density, (, final, double, x, ), {, if, (, x]
[;, }, public, double, density, (, final, double, x, ), {, if, (, x, <, mu, ), {, return, Double]
[*, c, ;, }, public, double, density, (, final, double, x, ), {, if, (, x, <, mu, ), {]
[;, }, public, double, density, (, final, double, x, ), {, if, (, x, <, mu, ), {, return, Double]
[), {, return, Double, ., NaN, ;, }, final, double, delta, =, x, -, mu, ;, final, double, f, =]
[<, mu, ), {, return, Double, ., NaN, ;, }, final, double, delta, =, x, -, mu, ;, final, double]
[), {, return, Double, ., NaN, ;, }, final, double, delta, =, x, -, mu, ;, final, double, f, =]
[;, }, final, double, delta, =, x, -, mu, ;, final, double, f, =, halfC, /, delta, ;, return, FastMath]
[., NaN, ;, }, final, double, delta, =, x, -, mu, ;, final, double, f, =, halfC, /, delta, ;]
[;, final, double, f, =, halfC, /, delta, ;, return, FastMath, ., sqrt, (, f, /, FastMath, ., PI, )]
[-, mu, ;, final, double, f, =, halfC, /, delta, ;, return, FastMath, ., sqrt, (, f, /, FastMath, .]
[;, final, double, f, =, halfC, /, delta, ;, return, FastMath, ., sqrt, (, f, /, FastMath, ., PI, )]
[;, return, FastMath, ., sqrt, (, f, /, FastMath, ., PI, ), *, FastMath, ., exp, (, -, f, )]
[/, delta, ;, return, FastMath, ., sqrt, (, f, /, FastMath, ., PI, ), *, FastMath, ., exp, (, -]
[;, return, FastMath, ., sqrt, (, f, /, FastMath, ., PI, ), *, FastMath, ., exp, (, -, f, )]
[;, }, public, double, cumulativeProbability, (, final, double, x, ), {, if, (, x, <, mu, ), {, return, Double]
[/, delta, ;, }, public, double, cumulativeProbability, (, final, double, x, ), {, if, (, x, <, mu, ), {]
[*, FastMath, ., exp, (, -, f, ), /, delta, ;, }, public, double, cumulativeProbability, (, final, double, x, )]
[., sqrt, (, f, /, FastMath, ., PI, ), *, FastMath, ., exp, (, -, f, ), /, delta, ;]
[), *, FastMath, ., exp, (, -, f, ), /, delta, ;, }, public, double, cumulativeProbability, (, final, double, x]
[/, FastMath, ., PI, ), *, FastMath, ., exp, (, -, f, ), /, delta, ;, }, public, double, cumulativeProbability]
[), *, FastMath, ., exp, (, -, f, ), /, delta, ;, }, public, double, cumulativeProbability, (, final, double, x]
[., PI, ), *, FastMath, ., exp, (, -, f, ), /, delta, ;, }, public, double, cumulativeProbability, (, final]
[/, delta, ;, }, public, double, cumulativeProbability, (, final, double, x, ), {, if, (, x, <, mu, ), {]
[., exp, (, -, f, ), /, delta, ;, }, public, double, cumulativeProbability, (, final, double, x, ), {, if]
[), /, delta, ;, }, public, double, cumulativeProbability, (, final, double, x, ), {, if, (, x, <, mu, )]
[), /, delta, ;, }, public, double, cumulativeProbability, (, final, double, x, ), {, if, (, x, <, mu, )]
[;, }, public, double, cumulativeProbability, (, final, double, x, ), {, if, (, x, <, mu, ), {, return, Double]
[), {, return, Double, ., NaN, ;, }, return, Erf, ., erfc, (, FastMath, ., sqrt, (, halfC, /, (]
[<, mu, ), {, return, Double, ., NaN, ;, }, return, Erf, ., erfc, (, FastMath, ., sqrt, (, halfC]
[), {, return, Double, ., NaN, ;, }, return, Erf, ., erfc, (, FastMath, ., sqrt, (, halfC, /, (]
[;, }, return, Erf, ., erfc, (, FastMath, ., sqrt, (, halfC, /, (, x, -, mu, ), ), )]
[., NaN, ;, }, return, Erf, ., erfc, (, FastMath, ., sqrt, (, halfC, /, (, x, -, mu, )]
[;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0]
[., erfc, (, FastMath, ., sqrt, (, halfC, /, (, x, -, mu, ), ), ), ;, }, @, Override]
[), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <]
[., sqrt, (, halfC, /, (, x, -, mu, ), ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (]
[), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p]
[/, (, x, -, mu, ), ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, )]
[), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p]
[), ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[-, mu, ), ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {]
[), ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, final, double, t, =, Erf, .]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, final, double]
[<, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, final, double]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, final, double, t, =, Erf, .]
[>, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, final, double, t, =]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, final, double, t, =, Erf, .]
[;, }, final, double, t, =, Erf, ., erfcInv, (, p, ), ;, return, mu, +, halfC, /, (, t]
[,, 0, ,, 1, ), ;, }, final, double, t, =, Erf, ., erfcInv, (, p, ), ;, return, mu]
[,, 1, ), ;, }, final, double, t, =, Erf, ., erfcInv, (, p, ), ;, return, mu, +, halfC]
[), ;, }, final, double, t, =, Erf, ., erfcInv, (, p, ), ;, return, mu, +, halfC, /, (]
[;, return, mu, +, halfC, /, (, t, *, t, ), ;, }, public, double, getScale, (, ), {, return]
[., erfcInv, (, p, ), ;, return, mu, +, halfC, /, (, t, *, t, ), ;, }, public, double]
[), ;, return, mu, +, halfC, /, (, t, *, t, ), ;, }, public, double, getScale, (, ), {]
[;, }, public, double, getScale, (, ), {, return, c, ;, }, public, double, getLocation, (, ), {, return, mu]
[+, halfC, /, (, t, *, t, ), ;, }, public, double, getScale, (, ), {, return, c, ;, }]
[;, }, public, double, getScale, (, ), {, return, c, ;, }, public, double, getLocation, (, ), {, return, mu]
[/, (, t, *, t, ), ;, }, public, double, getScale, (, ), {, return, c, ;, }, public, double]
[;, }, public, double, getScale, (, ), {, return, c, ;, }, public, double, getLocation, (, ), {, return, mu]
[), ;, }, public, double, getScale, (, ), {, return, c, ;, }, public, double, getLocation, (, ), {, return]
[*, t, ), ;, }, public, double, getScale, (, ), {, return, c, ;, }, public, double, getLocation, (, )]
[), ;, }, public, double, getScale, (, ), {, return, c, ;, }, public, double, getLocation, (, ), {, return]
[;, }, public, double, getLocation, (, ), {, return, mu, ;, }, public, double, getNumericalMean, (, ), {, return, Double]
[;, }, public, double, getNumericalMean, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, double, getNumericalVariance, (, ), {]
[;, }, public, double, getNumericalVariance, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, double, getSupportLowerBound, (, ), {]
[., POSITIVE_INFINITY, ;, }, public, double, getNumericalVariance, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, double, getSupportLowerBound, (]
[;, }, public, double, getSupportLowerBound, (, ), {, return, mu, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double]
[., POSITIVE_INFINITY, ;, }, public, double, getSupportLowerBound, (, ), {, return, mu, ;, }, public, double, getSupportUpperBound, (, ), {]
[;, }, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false]
[., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return, true]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[;, }, }]
