[;, @, Deprecated, protected, final, RandomDataImpl, randomData, =, new, RandomDataImpl, (, ), ;, protected, final, RandomGenerator, random, ;, @, Deprecated]
[;, @, Deprecated, protected, final, RandomDataImpl, randomData, =, new, RandomDataImpl, (, ), ;, protected, final, RandomGenerator, random, ;, @, Deprecated]
[;, protected, final, RandomGenerator, random, ;, @, Deprecated, protected, AbstractIntegerDistribution, (, ), {, random, =, null, ;, }, protected, AbstractIntegerDistribution]
[=, null, ;, }, protected, AbstractIntegerDistribution, (, RandomGenerator, rng, ), {, random, =, rng, ;, }, public, double, cumulativeProbability, (]
[;, }, protected, AbstractIntegerDistribution, (, RandomGenerator, rng, ), {, random, =, rng, ;, }, public, double, cumulativeProbability, (, int, x0]
[=, rng, ;, }, public, double, cumulativeProbability, (, int, x0, ,, int, x1, ), throws, NumberIsTooLargeException, {, if, (, x1]
[;, }, public, double, cumulativeProbability, (, int, x0, ,, int, x1, ), throws, NumberIsTooLargeException, {, if, (, x1, <, x0]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability]
[<, x0, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability]
[;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (, x0, ), ;, }, public, int, inverseCumulativeProbability, (, final, double]
[,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (, x0, ), ;]
[., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (, x0]
[,, x1, ,, true, ), ;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (, x0, ), ;, }, public]
[,, true, ), ;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (, x0, ), ;, }, public, int, inverseCumulativeProbability]
[), ;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (, x0, ), ;, }, public, int, inverseCumulativeProbability, (, final]
[;, }, public, int, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p]
[-, cumulativeProbability, (, x0, ), ;, }, public, int, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[), -, cumulativeProbability, (, x0, ), ;, }, public, int, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if]
[;, }, public, int, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p]
[), ;, }, public, int, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, int, lower, =, getSupportLowerBound, (, )]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, int, lower]
[<, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, int, lower]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, int, lower, =, getSupportLowerBound, (, )]
[>, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, int, lower, =, getSupportLowerBound]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, int, lower, =, getSupportLowerBound, (, )]
[;, }, int, lower, =, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, ), {, return, lower, ;, }]
[,, 0, ,, 1, ), ;, }, int, lower, =, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, )]
[,, 1, ), ;, }, int, lower, =, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, ), {, return]
[), ;, }, int, lower, =, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, ), {, return, lower, ;]
[;, if, (, p, ==, 0.0, ), {, return, lower, ;, }, if, (, lower, ==, Integer, ., MIN_VALUE, )]
[), {, return, lower, ;, }, if, (, lower, ==, Integer, ., MIN_VALUE, ), {, if, (, checkedCumulativeProbability, (, lower]
[==, 0.0, ), {, return, lower, ;, }, if, (, lower, ==, Integer, ., MIN_VALUE, ), {, if, (, checkedCumulativeProbability]
[), {, return, lower, ;, }, if, (, lower, ==, Integer, ., MIN_VALUE, ), {, if, (, checkedCumulativeProbability, (, lower]
[;, }, if, (, lower, ==, Integer, ., MIN_VALUE, ), {, if, (, checkedCumulativeProbability, (, lower, ), >=, p, )]
[), {, if, (, checkedCumulativeProbability, (, lower, ), >=, p, ), {, return, lower, ;, }, }, else, {, lower]
[==, Integer, ., MIN_VALUE, ), {, if, (, checkedCumulativeProbability, (, lower, ), >=, p, ), {, return, lower, ;, }]
[), {, if, (, checkedCumulativeProbability, (, lower, ), >=, p, ), {, return, lower, ;, }, }, else, {, lower]
[., MIN_VALUE, ), {, if, (, checkedCumulativeProbability, (, lower, ), >=, p, ), {, return, lower, ;, }, }, else]
[), {, return, lower, ;, }, }, else, {, lower, -=, 1, ;, }, int, upper, =, getSupportUpperBound, (, )]
[>=, p, ), {, return, lower, ;, }, }, else, {, lower, -=, 1, ;, }, int, upper, =, getSupportUpperBound]
[), >=, p, ), {, return, lower, ;, }, }, else, {, lower, -=, 1, ;, }, int, upper, =]
[), {, return, lower, ;, }, }, else, {, lower, -=, 1, ;, }, int, upper, =, getSupportUpperBound, (, )]
[;, }, }, else, {, lower, -=, 1, ;, }, int, upper, =, getSupportUpperBound, (, ), ;, if, (, p]
[-=, 1, ;, }, int, upper, =, getSupportUpperBound, (, ), ;, if, (, p, ==, 1.0, ), {, return, upper]
[;, }, int, upper, =, getSupportUpperBound, (, ), ;, if, (, p, ==, 1.0, ), {, return, upper, ;, }]
[;, if, (, p, ==, 1.0, ), {, return, upper, ;, }, final, double, mu, =, getNumericalMean, (, ), ;]
[), {, return, upper, ;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sigma, =, FastMath, .]
[==, 1.0, ), {, return, upper, ;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sigma, =]
[), {, return, upper, ;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sigma, =, FastMath, .]
[;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sigma, =, FastMath, ., sqrt, (, getNumericalVariance, (]
[;, final, double, sigma, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, =, !, (]
[;, final, boolean, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, )]
[., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, )]
[), ;, final, boolean, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu]
[;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (, (, 1.0, -, p, ), /, p]
[;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (, (, 1.0, -, p, ), /, p]
[), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (, (, 1.0, -, p, ), /]
[||, sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (, (, 1.0]
[||, Double, ., isNaN, (, sigma, ), ||, sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k]
[||, Double, ., isInfinite, (, sigma, ), ||, Double, ., isNaN, (, sigma, ), ||, sigma, ==, 0.0, ), ;]
[||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sigma, ), ||, Double, ., isNaN, (, sigma]
[., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sigma, ), ||]
[), ||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sigma, ), ||, Double, ., isNaN, (]
[||, Double, ., isInfinite, (, sigma, ), ||, Double, ., isNaN, (, sigma, ), ||, sigma, ==, 0.0, ), ;]
[., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sigma, ), ||, Double, ., isNaN, (, sigma, ), ||]
[), ||, Double, ., isInfinite, (, sigma, ), ||, Double, ., isNaN, (, sigma, ), ||, sigma, ==, 0.0, )]
[||, Double, ., isNaN, (, sigma, ), ||, sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k]
[., isInfinite, (, sigma, ), ||, Double, ., isNaN, (, sigma, ), ||, sigma, ==, 0.0, ), ;, if, (]
[), ||, Double, ., isNaN, (, sigma, ), ||, sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double]
[||, sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (, (, 1.0]
[., isNaN, (, sigma, ), ||, sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath]
[), ||, sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (, (]
[), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (, (, 1.0, -, p, ), /]
[==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (, (, 1.0, -, p]
[), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (, (, 1.0, -, p, ), /]
[), {, double, k, =, FastMath, ., sqrt, (, (, 1.0, -, p, ), /, p, ), ;, double, tmp]
[;, double, tmp, =, mu, -, k, *, sigma, ;, if, (, tmp, >, lower, ), {, lower, =, (]
[., sqrt, (, (, 1.0, -, p, ), /, p, ), ;, double, tmp, =, mu, -, k, *, sigma]
[), ;, double, tmp, =, mu, -, k, *, sigma, ;, if, (, tmp, >, lower, ), {, lower, =]
[/, p, ), ;, double, tmp, =, mu, -, k, *, sigma, ;, if, (, tmp, >, lower, ), {]
[), /, p, ), ;, double, tmp, =, mu, -, k, *, sigma, ;, if, (, tmp, >, lower, )]
[-, p, ), /, p, ), ;, double, tmp, =, mu, -, k, *, sigma, ;, if, (, tmp, >]
[), /, p, ), ;, double, tmp, =, mu, -, k, *, sigma, ;, if, (, tmp, >, lower, )]
[), ;, double, tmp, =, mu, -, k, *, sigma, ;, if, (, tmp, >, lower, ), {, lower, =]
[;, if, (, tmp, >, lower, ), {, lower, =, (, (, int, ), Math, ., ceil, (, tmp, )]
[-, k, *, sigma, ;, if, (, tmp, >, lower, ), {, lower, =, (, (, int, ), Math, .]
[;, if, (, tmp, >, lower, ), {, lower, =, (, (, int, ), Math, ., ceil, (, tmp, )]
[*, sigma, ;, if, (, tmp, >, lower, ), {, lower, =, (, (, int, ), Math, ., ceil, (]
[;, if, (, tmp, >, lower, ), {, lower, =, (, (, int, ), Math, ., ceil, (, tmp, )]
[), {, lower, =, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, k]
[>, lower, ), {, lower, =, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;]
[), {, lower, =, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, k]
[=, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, k, =, 1.0, /]
[;, }, k, =, 1.0, /, k, ;, tmp, =, mu, +, k, *, sigma, ;, if, (, tmp, <]
[-, 1, ;, }, k, =, 1.0, /, k, ;, tmp, =, mu, +, k, *, sigma, ;, if, (]
[), -, 1, ;, }, k, =, 1.0, /, k, ;, tmp, =, mu, +, k, *, sigma, ;, if]
[), -, 1, ;, }, k, =, 1.0, /, k, ;, tmp, =, mu, +, k, *, sigma, ;, if]
[., ceil, (, tmp, ), ), -, 1, ;, }, k, =, 1.0, /, k, ;, tmp, =, mu, +]
[), ), -, 1, ;, }, k, =, 1.0, /, k, ;, tmp, =, mu, +, k, *, sigma, ;]
[;, }, k, =, 1.0, /, k, ;, tmp, =, mu, +, k, *, sigma, ;, if, (, tmp, <]
[=, 1.0, /, k, ;, tmp, =, mu, +, k, *, sigma, ;, if, (, tmp, <, upper, ), {]
[;, tmp, =, mu, +, k, *, sigma, ;, if, (, tmp, <, upper, ), {, upper, =, (, (]
[/, k, ;, tmp, =, mu, +, k, *, sigma, ;, if, (, tmp, <, upper, ), {, upper, =]
[;, tmp, =, mu, +, k, *, sigma, ;, if, (, tmp, <, upper, ), {, upper, =, (, (]
[=, mu, +, k, *, sigma, ;, if, (, tmp, <, upper, ), {, upper, =, (, (, int, )]
[;, if, (, tmp, <, upper, ), {, upper, =, (, (, int, ), Math, ., ceil, (, tmp, )]
[+, k, *, sigma, ;, if, (, tmp, <, upper, ), {, upper, =, (, (, int, ), Math, .]
[;, if, (, tmp, <, upper, ), {, upper, =, (, (, int, ), Math, ., ceil, (, tmp, )]
[*, sigma, ;, if, (, tmp, <, upper, ), {, upper, =, (, (, int, ), Math, ., ceil, (]
[;, if, (, tmp, <, upper, ), {, upper, =, (, (, int, ), Math, ., ceil, (, tmp, )]
[), {, upper, =, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, }]
[<, upper, ), {, upper, =, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;]
[), {, upper, =, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, }]
[=, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, }, return, solveInverseCumulativeProbability, (]
[;, }, }, return, solveInverseCumulativeProbability, (, p, ,, lower, ,, upper, ), ;, }, protected, int, solveInverseCumulativeProbability, (, final, double]
[-, 1, ;, }, }, return, solveInverseCumulativeProbability, (, p, ,, lower, ,, upper, ), ;, }, protected, int, solveInverseCumulativeProbability, (]
[), -, 1, ;, }, }, return, solveInverseCumulativeProbability, (, p, ,, lower, ,, upper, ), ;, }, protected, int, solveInverseCumulativeProbability]
[), -, 1, ;, }, }, return, solveInverseCumulativeProbability, (, p, ,, lower, ,, upper, ), ;, }, protected, int, solveInverseCumulativeProbability]
[., ceil, (, tmp, ), ), -, 1, ;, }, }, return, solveInverseCumulativeProbability, (, p, ,, lower, ,, upper, )]
[), ), -, 1, ;, }, }, return, solveInverseCumulativeProbability, (, p, ,, lower, ,, upper, ), ;, }, protected, int]
[;, }, }, return, solveInverseCumulativeProbability, (, p, ,, lower, ,, upper, ), ;, }, protected, int, solveInverseCumulativeProbability, (, final, double]
[;, }, protected, int, solveInverseCumulativeProbability, (, final, double, p, ,, int, lower, ,, int, upper, ), {, while, (, lower]
[,, lower, ,, upper, ), ;, }, protected, int, solveInverseCumulativeProbability, (, final, double, p, ,, int, lower, ,, int, upper]
[,, upper, ), ;, }, protected, int, solveInverseCumulativeProbability, (, final, double, p, ,, int, lower, ,, int, upper, ), {]
[), ;, }, protected, int, solveInverseCumulativeProbability, (, final, double, p, ,, int, lower, ,, int, upper, ), {, while, (]
[), {, int, xm, =, (, lower, +, upper, ), /, 2, ;, if, (, xm, <, lower, ||, xm]
[<, upper, ), {, int, xm, =, (, lower, +, upper, ), /, 2, ;, if, (, xm, <, lower]
[+, 1, <, upper, ), {, int, xm, =, (, lower, +, upper, ), /, 2, ;, if, (, xm]
[<, upper, ), {, int, xm, =, (, lower, +, upper, ), /, 2, ;, if, (, xm, <, lower]
[), {, int, xm, =, (, lower, +, upper, ), /, 2, ;, if, (, xm, <, lower, ||, xm]
[;, if, (, xm, <, lower, ||, xm, >, upper, ), {, xm, =, lower, +, (, upper, -, lower]
[/, 2, ;, if, (, xm, <, lower, ||, xm, >, upper, ), {, xm, =, lower, +, (, upper]
[), /, 2, ;, if, (, xm, <, lower, ||, xm, >, upper, ), {, xm, =, lower, +, (]
[+, upper, ), /, 2, ;, if, (, xm, <, lower, ||, xm, >, upper, ), {, xm, =, lower]
[), /, 2, ;, if, (, xm, <, lower, ||, xm, >, upper, ), {, xm, =, lower, +, (]
[;, if, (, xm, <, lower, ||, xm, >, upper, ), {, xm, =, lower, +, (, upper, -, lower]
[), {, xm, =, lower, +, (, upper, -, lower, ), /, 2, ;, }, double, pm, =, checkedCumulativeProbability, (]
[||, xm, >, upper, ), {, xm, =, lower, +, (, upper, -, lower, ), /, 2, ;, }, double]
[<, lower, ||, xm, >, upper, ), {, xm, =, lower, +, (, upper, -, lower, ), /, 2, ;]
[||, xm, >, upper, ), {, xm, =, lower, +, (, upper, -, lower, ), /, 2, ;, }, double]
[), {, xm, =, lower, +, (, upper, -, lower, ), /, 2, ;, }, double, pm, =, checkedCumulativeProbability, (]
[>, upper, ), {, xm, =, lower, +, (, upper, -, lower, ), /, 2, ;, }, double, pm, =]
[), {, xm, =, lower, +, (, upper, -, lower, ), /, 2, ;, }, double, pm, =, checkedCumulativeProbability, (]
[=, lower, +, (, upper, -, lower, ), /, 2, ;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;]
[;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;, if, (, pm, >=, p, ), {, upper, =, xm]
[+, (, upper, -, lower, ), /, 2, ;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;, if, (]
[;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;, if, (, pm, >=, p, ), {, upper, =, xm]
[/, 2, ;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;, if, (, pm, >=, p, ), {, upper]
[), /, 2, ;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;, if, (, pm, >=, p, ), {]
[-, lower, ), /, 2, ;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;, if, (, pm, >=, p]
[), /, 2, ;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;, if, (, pm, >=, p, ), {]
[;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;, if, (, pm, >=, p, ), {, upper, =, xm]
[;, if, (, pm, >=, p, ), {, upper, =, xm, ;, }, else, {, lower, =, xm, ;, }]
[), ;, if, (, pm, >=, p, ), {, upper, =, xm, ;, }, else, {, lower, =, xm, ;]
[), {, upper, =, xm, ;, }, else, {, lower, =, xm, ;, }, }, return, upper, ;, }, public]
[>=, p, ), {, upper, =, xm, ;, }, else, {, lower, =, xm, ;, }, }, return, upper, ;]
[), {, upper, =, xm, ;, }, else, {, lower, =, xm, ;, }, }, return, upper, ;, }, public]
[=, xm, ;, }, else, {, lower, =, xm, ;, }, }, return, upper, ;, }, public, void, reseedRandomGenerator, (]
[;, }, else, {, lower, =, xm, ;, }, }, return, upper, ;, }, public, void, reseedRandomGenerator, (, long, seed]
[=, xm, ;, }, }, return, upper, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed]
[;, }, }, return, upper, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (, seed]
[;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (, seed, ), ;, randomData, ., reSeed]
[;, randomData, ., reSeed, (, seed, ), ;, }, public, int, sample, (, ), {, return, inverseCumulativeProbability, (, random, .]
[., setSeed, (, seed, ), ;, randomData, ., reSeed, (, seed, ), ;, }, public, int, sample, (, ), {]
[), ;, randomData, ., reSeed, (, seed, ), ;, }, public, int, sample, (, ), {, return, inverseCumulativeProbability, (, random]
[;, }, public, int, sample, (, ), {, return, inverseCumulativeProbability, (, random, ., nextDouble, (, ), ), ;, }, public]
[., reSeed, (, seed, ), ;, }, public, int, sample, (, ), {, return, inverseCumulativeProbability, (, random, ., nextDouble, (]
[), ;, }, public, int, sample, (, ), {, return, inverseCumulativeProbability, (, random, ., nextDouble, (, ), ), ;, }]
[;, }, public, int, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw]
[), ;, }, public, int, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {]
[., nextDouble, (, ), ), ;, }, public, int, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, int, [, ], out, =, new]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, int, [, ], out]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, int, [, ], out, =, new]
[;, }, int, [, ], out, =, new, int, [, sampleSize, ], ;, for, (, int, i, =, 0, ;]
[,, sampleSize, ), ;, }, int, [, ], out, =, new, int, [, sampleSize, ], ;, for, (, int, i]
[., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, int, [, ], out, =, new, int, [, sampleSize, ], ;, for, (]
[), ;, }, int, [, ], out, =, new, int, [, sampleSize, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, [, i]
[;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return]
[;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, private]
[<, sampleSize, ;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;]
[;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, private]
[), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, private, double, checkedCumulativeProbability, (]
[++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, private, double, checkedCumulativeProbability]
[=, sample, (, ), ;, }, return, out, ;, }, private, double, checkedCumulativeProbability, (, int, argument, ), throws, MathInternalError, {]
[[, i, ], =, sample, (, ), ;, }, return, out, ;, }, private, double, checkedCumulativeProbability, (, int, argument, )]
[], =, sample, (, ), ;, }, return, out, ;, }, private, double, checkedCumulativeProbability, (, int, argument, ), throws, MathInternalError]
[;, }, return, out, ;, }, private, double, checkedCumulativeProbability, (, int, argument, ), throws, MathInternalError, {, double, result, =, Double]
[;, }, private, double, checkedCumulativeProbability, (, int, argument, ), throws, MathInternalError, {, double, result, =, Double, ., NaN, ;, result]
[;, result, =, cumulativeProbability, (, argument, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, throw, new]
[., NaN, ;, result, =, cumulativeProbability, (, argument, ), ;, if, (, Double, ., isNaN, (, result, ), ), {]
[=, cumulativeProbability, (, argument, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, throw, new, MathInternalError, (]
[;, if, (, Double, ., isNaN, (, result, ), ), {, throw, new, MathInternalError, (, LocalizedFormats, ., DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, ,, argument]
[), ;, if, (, Double, ., isNaN, (, result, ), ), {, throw, new, MathInternalError, (, LocalizedFormats, ., DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, ,]
[), {, throw, new, MathInternalError, (, LocalizedFormats, ., DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, ,, argument, ), ;, }, return, result, ;, }, }]
[., isNaN, (, result, ), ), {, throw, new, MathInternalError, (, LocalizedFormats, ., DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, ,, argument, ), ;, }, return]
[), ), {, throw, new, MathInternalError, (, LocalizedFormats, ., DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, ,, argument, ), ;, }, return, result, ;, }, }]
[;, }, return, result, ;, }, }]
[,, argument, ), ;, }, return, result, ;, }, }]
[., DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, ,, argument, ), ;, }, return, result, ;, }, }]
[), ;, }, return, result, ;, }, }]
[;, }, }]
