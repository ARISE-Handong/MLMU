[IntervalXYDataset, ,, DomainInfo, ,, RangeInfo, ,, XYDatasetSelectionState, ,, SelectableXYDataset, ,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[,, DomainInfo, ,, RangeInfo, ,, XYDatasetSelectionState, ,, SelectableXYDataset, ,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[serialVersionUID, =, -, 7590013825931496766L, ;, private, List, data, ;, private, IntervalXYDelegate, intervalDelegate, ;, public, XYSeriesCollection, (, ), {, this, (]
[intervalDelegate, ;, public, XYSeriesCollection, (, ), {, this, (, null, ), ;, }, public, XYSeriesCollection, (, XYSeries, series, ), {]
[intervalDelegate, ;, public, XYSeriesCollection, (, ), {, this, (, null, ), ;, }, public, XYSeriesCollection, (, XYSeries, series, ), {]
[(, ), {, this, (, null, ), ;, }, public, XYSeriesCollection, (, XYSeries, series, ), {, this, ., data, =]
[public, XYSeriesCollection, (, XYSeries, series, ), {, this, ., data, =, new, java, ., util, ., ArrayList, (, ), ;]
[public, XYSeriesCollection, (, XYSeries, series, ), {, this, ., data, =, new, java, ., util, ., ArrayList, (, ), ;]
[series, ), {, this, ., data, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., intervalDelegate, =]
[this, ., data, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., intervalDelegate, =, new, IntervalXYDelegate, (]
[data, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., intervalDelegate, =, new, IntervalXYDelegate, (, this, ,]
[java, ., util, ., ArrayList, (, ), ;, this, ., intervalDelegate, =, new, IntervalXYDelegate, (, this, ,, false, ), ;]
[util, ., ArrayList, (, ), ;, this, ., intervalDelegate, =, new, IntervalXYDelegate, (, this, ,, false, ), ;, addChangeListener, (]
[util, ., ArrayList, (, ), ;, this, ., intervalDelegate, =, new, IntervalXYDelegate, (, this, ,, false, ), ;, addChangeListener, (]
[., intervalDelegate, =, new, IntervalXYDelegate, (, this, ,, false, ), ;, addChangeListener, (, this, ., intervalDelegate, ), ;, if, (]
[., intervalDelegate, =, new, IntervalXYDelegate, (, this, ,, false, ), ;, addChangeListener, (, this, ., intervalDelegate, ), ;, if, (]
[=, new, IntervalXYDelegate, (, this, ,, false, ), ;, addChangeListener, (, this, ., intervalDelegate, ), ;, if, (, series, !=]
[(, this, ,, false, ), ;, addChangeListener, (, this, ., intervalDelegate, ), ;, if, (, series, !=, null, ), {]
[(, this, ,, false, ), ;, addChangeListener, (, this, ., intervalDelegate, ), ;, if, (, series, !=, null, ), {]
[(, this, ,, false, ), ;, addChangeListener, (, this, ., intervalDelegate, ), ;, if, (, series, !=, null, ), {]
[addChangeListener, (, this, ., intervalDelegate, ), ;, if, (, series, !=, null, ), {, this, ., data, ., add, (]
[., intervalDelegate, ), ;, if, (, series, !=, null, ), {, this, ., data, ., add, (, series, ), ;]
[., intervalDelegate, ), ;, if, (, series, !=, null, ), {, this, ., data, ., add, (, series, ), ;]
[if, (, series, !=, null, ), {, this, ., data, ., add, (, series, ), ;, series, ., addChangeListener, (]
[null, ), {, this, ., data, ., add, (, series, ), ;, series, ., addChangeListener, (, this, ), ;, }]
[{, this, ., data, ., add, (, series, ), ;, series, ., addChangeListener, (, this, ), ;, }, setSelectionState, (]
[(, this, ), ;, }, setSelectionState, (, this, ), ;, }, public, DomainOrder, getDomainOrder, (, ), {, int, seriesCount, =]
[;, }, public, DomainOrder, getDomainOrder, (, ), {, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, i, =]
[public, DomainOrder, getDomainOrder, (, ), {, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, i, =, 0, ;]
[public, DomainOrder, getDomainOrder, (, ), {, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, i, =, 0, ;]
[getDomainOrder, (, ), {, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), {, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, i, =, 0, ;, i, <, seriesCount, ;]
[), {, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, i, =, 0, ;, i, <, seriesCount, ;]
[), ;, for, (, int, i, =, 0, ;, i, <, seriesCount, ;, i, ++, ), {, XYSeries, s, =]
[for, (, int, i, =, 0, ;, i, <, seriesCount, ;, i, ++, ), {, XYSeries, s, =, getSeries, (]
[0, ;, i, <, seriesCount, ;, i, ++, ), {, XYSeries, s, =, getSeries, (, i, ), ;, if, (]
[;, i, <, seriesCount, ;, i, ++, ), {, XYSeries, s, =, getSeries, (, i, ), ;, if, (, !]
[;, i, <, seriesCount, ;, i, ++, ), {, XYSeries, s, =, getSeries, (, i, ), ;, if, (, !]
[{, XYSeries, s, =, getSeries, (, i, ), ;, if, (, !, s, ., getAutoSort, (, ), ), {, return]
[{, XYSeries, s, =, getSeries, (, i, ), ;, if, (, !, s, ., getAutoSort, (, ), ), {, return]
[), ;, if, (, !, s, ., getAutoSort, (, ), ), {, return, DomainOrder, ., NONE, ;, }, }, return]
[), ;, if, (, !, s, ., getAutoSort, (, ), ), {, return, DomainOrder, ., NONE, ;, }, }, return]
[NONE, ;, }, }, return, DomainOrder, ., ASCENDING, ;, }, public, void, addSeries, (, XYSeries, series, ), {, if, (]
[NONE, ;, }, }, return, DomainOrder, ., ASCENDING, ;, }, public, void, addSeries, (, XYSeries, series, ), {, if, (]
[}, }, return, DomainOrder, ., ASCENDING, ;, }, public, void, addSeries, (, XYSeries, series, ), {, if, (, series, ==]
[., ASCENDING, ;, }, public, void, addSeries, (, XYSeries, series, ), {, if, (, series, ==, null, ), {, throw]
[}, public, void, addSeries, (, XYSeries, series, ), {, if, (, series, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, XYSeries, series, ), {, if, (, series, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }]
[(, XYSeries, series, ), {, if, (, series, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }]
[(, XYSeries, series, ), {, if, (, series, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }]
[(, series, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, this, ., data, ., add, (]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, this, ., data, ., add, (, series, ), ;]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, this, ., data, ., add, (, series, ), ;]
[new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, this, ., data, ., add, (, series, ), ;, series, ., addChangeListener, (]
["Null 'series' argument.", ), ;, }, this, ., data, ., add, (, series, ), ;, series, ., addChangeListener, (, this, ), ;]
[;, }, this, ., data, ., add, (, series, ), ;, series, ., addChangeListener, (, this, ), ;, fireDatasetChanged, (]
[;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, removeSeries, (, int, series, ), {, if, (]
[;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, removeSeries, (, int, series, ), {, if, (]
[fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, removeSeries, (, int, series, ), {, if, (, (]
[fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, removeSeries, (, int, series, ), {, if, (, (]
[new, DatasetChangeInfo, (, ), ), ;, }, public, void, removeSeries, (, int, series, ), {, if, (, (, series, <]
[), ), ;, }, public, void, removeSeries, (, int, series, ), {, if, (, (, series, <, 0, ), ||]
[), ;, }, public, void, removeSeries, (, int, series, ), {, if, (, (, series, <, 0, ), ||, (]
[), ;, }, public, void, removeSeries, (, int, series, ), {, if, (, (, series, <, 0, ), ||, (]
[}, public, void, removeSeries, (, int, series, ), {, if, (, (, series, <, 0, ), ||, (, series, >=]
[), {, if, (, (, series, <, 0, ), ||, (, series, >=, getSeriesCount, (, ), ), ), {, throw]
[(, (, series, <, 0, ), ||, (, series, >=, getSeriesCount, (, ), ), ), {, throw, new, IllegalArgumentException, (]
[(, series, >=, getSeriesCount, (, ), ), ), {, throw, new, IllegalArgumentException, (, "Series index out of bounds.", ), ;, }, XYSeries, ts, =]
[getSeriesCount, (, ), ), ), {, throw, new, IllegalArgumentException, (, "Series index out of bounds.", ), ;, }, XYSeries, ts, =, (, XYSeries, )]
[getSeriesCount, (, ), ), ), {, throw, new, IllegalArgumentException, (, "Series index out of bounds.", ), ;, }, XYSeries, ts, =, (, XYSeries, )]
[getSeriesCount, (, ), ), ), {, throw, new, IllegalArgumentException, (, "Series index out of bounds.", ), ;, }, XYSeries, ts, =, (, XYSeries, )]
[throw, new, IllegalArgumentException, (, "Series index out of bounds.", ), ;, }, XYSeries, ts, =, (, XYSeries, ), this, ., data, ., get, (]
[(, "Series index out of bounds.", ), ;, }, XYSeries, ts, =, (, XYSeries, ), this, ., data, ., get, (, series, ), ;]
[(, "Series index out of bounds.", ), ;, }, XYSeries, ts, =, (, XYSeries, ), this, ., data, ., get, (, series, ), ;]
[}, XYSeries, ts, =, (, XYSeries, ), this, ., data, ., get, (, series, ), ;, ts, ., removeChangeListener, (]
[=, (, XYSeries, ), this, ., data, ., get, (, series, ), ;, ts, ., removeChangeListener, (, this, ), ;]
[=, (, XYSeries, ), this, ., data, ., get, (, series, ), ;, ts, ., removeChangeListener, (, this, ), ;]
[=, (, XYSeries, ), this, ., data, ., get, (, series, ), ;, ts, ., removeChangeListener, (, this, ), ;]
[data, ., get, (, series, ), ;, ts, ., removeChangeListener, (, this, ), ;, this, ., data, ., remove, (]
[(, series, ), ;, ts, ., removeChangeListener, (, this, ), ;, this, ., data, ., remove, (, series, ), ;]
[), ;, ts, ., removeChangeListener, (, this, ), ;, this, ., data, ., remove, (, series, ), ;, fireDatasetChanged, (]
[;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, removeSeries, (, XYSeries, series, ), {, if, (]
[;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, void, removeSeries, (, XYSeries, series, ), {, if, (]
[(, new, DatasetChangeInfo, (, ), ), ;, }, public, void, removeSeries, (, XYSeries, series, ), {, if, (, series, ==]
[), ), ;, }, public, void, removeSeries, (, XYSeries, series, ), {, if, (, series, ==, null, ), {, throw]
[}, public, void, removeSeries, (, XYSeries, series, ), {, if, (, series, ==, null, ), {, throw, new, IllegalArgumentException, (]
[series, ), {, if, (, series, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, if, (]
[series, ), {, if, (, series, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, if, (]
[series, ), {, if, (, series, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, if, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, if, (, this, ., data, ., contains, (]
[throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, if, (, this, ., data, ., contains, (, series, ), ), {]
[throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, if, (, this, ., data, ., contains, (, series, ), ), {]
["Null 'series' argument.", ), ;, }, if, (, this, ., data, ., contains, (, series, ), ), {, series, ., removeChangeListener, (]
[}, if, (, this, ., data, ., contains, (, series, ), ), {, series, ., removeChangeListener, (, this, ), ;]
[}, if, (, this, ., data, ., contains, (, series, ), ), {, series, ., removeChangeListener, (, this, ), ;]
[}, if, (, this, ., data, ., contains, (, series, ), ), {, series, ., removeChangeListener, (, this, ), ;]
[., contains, (, series, ), ), {, series, ., removeChangeListener, (, this, ), ;, this, ., data, ., remove, (]
[series, ), ), {, series, ., removeChangeListener, (, this, ), ;, this, ., data, ., remove, (, series, ), ;]
[), {, series, ., removeChangeListener, (, this, ), ;, this, ., data, ., remove, (, series, ), ;, fireDatasetChanged, (]
[(, new, DatasetChangeInfo, (, ), ), ;, }, }, public, void, removeAllSeries, (, ), {, for, (, int, i, =]
[DatasetChangeInfo, (, ), ), ;, }, }, public, void, removeAllSeries, (, ), {, for, (, int, i, =, 0, ;]
[DatasetChangeInfo, (, ), ), ;, }, }, public, void, removeAllSeries, (, ), {, for, (, int, i, =, 0, ;]
[), ), ;, }, }, public, void, removeAllSeries, (, ), {, for, (, int, i, =, 0, ;, i, <]
[), ), ;, }, }, public, void, removeAllSeries, (, ), {, for, (, int, i, =, 0, ;, i, <]
[), ), ;, }, }, public, void, removeAllSeries, (, ), {, for, (, int, i, =, 0, ;, i, <]
[(, ), {, for, (, int, i, =, 0, ;, i, <, this, ., data, ., size, (, ), ;]
[(, ), {, for, (, int, i, =, 0, ;, i, <, this, ., data, ., size, (, ), ;]
[=, 0, ;, i, <, this, ., data, ., size, (, ), ;, i, ++, ), {, XYSeries, series, =]
[i, <, this, ., data, ., size, (, ), ;, i, ++, ), {, XYSeries, series, =, (, XYSeries, )]
[i, <, this, ., data, ., size, (, ), ;, i, ++, ), {, XYSeries, series, =, (, XYSeries, )]
[i, <, this, ., data, ., size, (, ), ;, i, ++, ), {, XYSeries, series, =, (, XYSeries, )]
[size, (, ), ;, i, ++, ), {, XYSeries, series, =, (, XYSeries, ), this, ., data, ., get, (]
[;, i, ++, ), {, XYSeries, series, =, (, XYSeries, ), this, ., data, ., get, (, i, ), ;]
[;, i, ++, ), {, XYSeries, series, =, (, XYSeries, ), this, ., data, ., get, (, i, ), ;]
[{, XYSeries, series, =, (, XYSeries, ), this, ., data, ., get, (, i, ), ;, series, ., removeChangeListener, (]
[(, XYSeries, ), this, ., data, ., get, (, i, ), ;, series, ., removeChangeListener, (, this, ), ;, }]
[(, XYSeries, ), this, ., data, ., get, (, i, ), ;, series, ., removeChangeListener, (, this, ), ;, }]
[(, XYSeries, ), this, ., data, ., get, (, i, ), ;, series, ., removeChangeListener, (, this, ), ;, }]
[(, i, ), ;, series, ., removeChangeListener, (, this, ), ;, }, this, ., data, ., clear, (, ), ;]
[), ;, series, ., removeChangeListener, (, this, ), ;, }, this, ., data, ., clear, (, ), ;, fireDatasetChanged, (]
[clear, (, ), ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, int, getSeriesCount, (, ), {, return]
[clear, (, ), ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, int, getSeriesCount, (, ), {, return]
[clear, (, ), ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, int, getSeriesCount, (, ), {, return]
[(, ), {, return, this, ., data, ., size, (, ), ;, }, public, List, getSeries, (, ), {, return]
[(, ), {, return, this, ., data, ., size, (, ), ;, }, public, List, getSeries, (, ), {, return]
[this, ., data, ., size, (, ), ;, }, public, List, getSeries, (, ), {, return, Collections, ., unmodifiableList, (]
[this, ., data, ., size, (, ), ;, }, public, List, getSeries, (, ), {, return, Collections, ., unmodifiableList, (]
[Collections, ., unmodifiableList, (, this, ., data, ), ;, }, public, int, indexOf, (, XYSeries, series, ), {, if, (]
[Collections, ., unmodifiableList, (, this, ., data, ), ;, }, public, int, indexOf, (, XYSeries, series, ), {, if, (]
[unmodifiableList, (, this, ., data, ), ;, }, public, int, indexOf, (, XYSeries, series, ), {, if, (, series, ==]
[data, ), ;, }, public, int, indexOf, (, XYSeries, series, ), {, if, (, series, ==, null, ), {, throw]
[}, public, int, indexOf, (, XYSeries, series, ), {, if, (, series, ==, null, ), {, throw, new, IllegalArgumentException, (]
[XYSeries, series, ), {, if, (, series, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, return]
[XYSeries, series, ), {, if, (, series, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, return]
[XYSeries, series, ), {, if, (, series, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, return]
[series, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'series' argument.", ), ;, }, return, this, ., data, ., indexOf, (]
[this, ., data, ., indexOf, (, series, ), ;, }, public, XYSeries, getSeries, (, int, series, ), {, if, (]
[this, ., data, ., indexOf, (, series, ), ;, }, public, XYSeries, getSeries, (, int, series, ), {, if, (]
[., data, ., indexOf, (, series, ), ;, }, public, XYSeries, getSeries, (, int, series, ), {, if, (, (]
[., data, ., indexOf, (, series, ), ;, }, public, XYSeries, getSeries, (, int, series, ), {, if, (, (]
[., indexOf, (, series, ), ;, }, public, XYSeries, getSeries, (, int, series, ), {, if, (, (, series, <]
[series, ), ;, }, public, XYSeries, getSeries, (, int, series, ), {, if, (, (, series, <, 0, ), ||]
[), ;, }, public, XYSeries, getSeries, (, int, series, ), {, if, (, (, series, <, 0, ), ||, (]
[), ;, }, public, XYSeries, getSeries, (, int, series, ), {, if, (, (, series, <, 0, ), ||, (]
[}, public, XYSeries, getSeries, (, int, series, ), {, if, (, (, series, <, 0, ), ||, (, series, >=]
[), {, if, (, (, series, <, 0, ), ||, (, series, >=, getSeriesCount, (, ), ), ), {, throw]
[(, (, series, <, 0, ), ||, (, series, >=, getSeriesCount, (, ), ), ), {, throw, new, IllegalArgumentException, (]
[), ||, (, series, >=, getSeriesCount, (, ), ), ), {, throw, new, IllegalArgumentException, (, "Series index out of bounds", ), ;, }, return]
[series, >=, getSeriesCount, (, ), ), ), {, throw, new, IllegalArgumentException, (, "Series index out of bounds", ), ;, }, return, (, XYSeries, )]
[series, >=, getSeriesCount, (, ), ), ), {, throw, new, IllegalArgumentException, (, "Series index out of bounds", ), ;, }, return, (, XYSeries, )]
[series, >=, getSeriesCount, (, ), ), ), {, throw, new, IllegalArgumentException, (, "Series index out of bounds", ), ;, }, return, (, XYSeries, )]
[), {, throw, new, IllegalArgumentException, (, "Series index out of bounds", ), ;, }, return, (, XYSeries, ), this, ., data, ., get, (]
[this, ., data, ., get, (, series, ), ;, }, public, XYSeries, getSeries, (, Comparable, key, ), {, if, (]
[this, ., data, ., get, (, series, ), ;, }, public, XYSeries, getSeries, (, Comparable, key, ), {, if, (]
[data, ., get, (, series, ), ;, }, public, XYSeries, getSeries, (, Comparable, key, ), {, if, (, key, ==]
[series, ), ;, }, public, XYSeries, getSeries, (, Comparable, key, ), {, if, (, key, ==, null, ), {, throw]
[}, public, XYSeries, getSeries, (, Comparable, key, ), {, if, (, key, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, key, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, Iterator, iterator, =]
[), {, if, (, key, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, Iterator, iterator, =]
[), {, if, (, key, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, Iterator, iterator, =]
[new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, Iterator, iterator, =, this, ., data, ., iterator, (, ), ;, while, (]
[new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, Iterator, iterator, =, this, ., data, ., iterator, (, ), ;, while, (]
[this, ., data, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYSeries, series, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYSeries, series, =, (, XYSeries, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYSeries, series, =, (, XYSeries, )]
[., hasNext, (, ), ), {, XYSeries, series, =, (, XYSeries, ), iterator, ., next, (, ), ;, if, (]
[., hasNext, (, ), ), {, XYSeries, series, =, (, XYSeries, ), iterator, ., next, (, ), ;, if, (]
[), {, XYSeries, series, =, (, XYSeries, ), iterator, ., next, (, ), ;, if, (, key, ., equals, (]
[), {, XYSeries, series, =, (, XYSeries, ), iterator, ., next, (, ), ;, if, (, key, ., equals, (]
[., next, (, ), ;, if, (, key, ., equals, (, series, ., getKey, (, ), ), ), {, return]
[if, (, key, ., equals, (, series, ., getKey, (, ), ), ), {, return, series, ;, }, }, throw]
[., equals, (, series, ., getKey, (, ), ), ), {, return, series, ;, }, }, throw, new, UnknownKeyException, (]
[., equals, (, series, ., getKey, (, ), ), ), {, return, series, ;, }, }, throw, new, UnknownKeyException, (]
[(, series, ., getKey, (, ), ), ), {, return, series, ;, }, }, throw, new, UnknownKeyException, (, "Key not found: ", +]
[}, throw, new, UnknownKeyException, (, "Key not found: ", +, key, ), ;, }, public, Comparable, getSeriesKey, (, int, series, ), {, return]
[}, throw, new, UnknownKeyException, (, "Key not found: ", +, key, ), ;, }, public, Comparable, getSeriesKey, (, int, series, ), {, return]
[new, UnknownKeyException, (, "Key not found: ", +, key, ), ;, }, public, Comparable, getSeriesKey, (, int, series, ), {, return, getSeries, (]
[return, getSeries, (, series, ), ., getKey, (, ), ;, }, public, int, getItemCount, (, int, series, ), {, return]
[return, getSeries, (, series, ), ., getKey, (, ), ;, }, public, int, getItemCount, (, int, series, ), {, return]
[(, series, ), ., getKey, (, ), ;, }, public, int, getItemCount, (, int, series, ), {, return, getSeries, (]
[., getItemCount, (, ), ;, }, public, Number, getX, (, int, series, ,, int, item, ), {, XYSeries, s, =]
[), ;, }, public, Number, getX, (, int, series, ,, int, item, ), {, XYSeries, s, =, (, XYSeries, )]
[), ;, }, public, Number, getX, (, int, series, ,, int, item, ), {, XYSeries, s, =, (, XYSeries, )]
[), ;, }, public, Number, getX, (, int, series, ,, int, item, ), {, XYSeries, s, =, (, XYSeries, )]
[(, int, series, ,, int, item, ), {, XYSeries, s, =, (, XYSeries, ), this, ., data, ., get, (]
[int, item, ), {, XYSeries, s, =, (, XYSeries, ), this, ., data, ., get, (, series, ), ;, return]
[int, item, ), {, XYSeries, s, =, (, XYSeries, ), this, ., data, ., get, (, series, ), ;, return]
[XYSeries, s, =, (, XYSeries, ), this, ., data, ., get, (, series, ), ;, return, s, ., getX, (]
[s, ., getX, (, item, ), ;, }, public, Number, getStartX, (, int, series, ,, int, item, ), {, return]
[s, ., getX, (, item, ), ;, }, public, Number, getStartX, (, int, series, ,, int, item, ), {, return]
[s, ., getX, (, item, ), ;, }, public, Number, getStartX, (, int, series, ,, int, item, ), {, return]
[;, }, public, Number, getStartX, (, int, series, ,, int, item, ), {, return, this, ., intervalDelegate, ., getStartX, (]
[public, Number, getStartX, (, int, series, ,, int, item, ), {, return, this, ., intervalDelegate, ., getStartX, (, series, ,]
[getStartX, (, series, ,, item, ), ;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, return]
[getStartX, (, series, ,, item, ), ;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, return]
[getStartX, (, series, ,, item, ), ;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, return]
[;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, return, this, ., intervalDelegate, ., getEndX, (]
[public, Number, getEndX, (, int, series, ,, int, item, ), {, return, this, ., intervalDelegate, ., getEndX, (, series, ,]
[series, ,, item, ), ;, }, public, Number, getY, (, int, series, ,, int, index, ), {, XYSeries, s, =]
[), ;, }, public, Number, getY, (, int, series, ,, int, index, ), {, XYSeries, s, =, (, XYSeries, )]
[), ;, }, public, Number, getY, (, int, series, ,, int, index, ), {, XYSeries, s, =, (, XYSeries, )]
[), ;, }, public, Number, getY, (, int, series, ,, int, index, ), {, XYSeries, s, =, (, XYSeries, )]
[(, int, series, ,, int, index, ), {, XYSeries, s, =, (, XYSeries, ), this, ., data, ., get, (]
[int, index, ), {, XYSeries, s, =, (, XYSeries, ), this, ., data, ., get, (, series, ), ;, return]
[int, index, ), {, XYSeries, s, =, (, XYSeries, ), this, ., data, ., get, (, series, ), ;, return]
[XYSeries, s, =, (, XYSeries, ), this, ., data, ., get, (, series, ), ;, return, s, ., getY, (]
[s, ., getY, (, index, ), ;, }, public, Number, getStartY, (, int, series, ,, int, item, ), {, return]
[getY, (, index, ), ;, }, public, Number, getStartY, (, int, series, ,, int, item, ), {, return, getY, (]
[index, ), ;, }, public, Number, getStartY, (, int, series, ,, int, item, ), {, return, getY, (, series, ,]
[getY, (, series, ,, item, ), ;, }, public, Number, getEndY, (, int, series, ,, int, item, ), {, return]
[series, ,, item, ), ;, }, public, Number, getEndY, (, int, series, ,, int, item, ), {, return, getY, (]
[item, ), ;, }, public, Number, getEndY, (, int, series, ,, int, item, ), {, return, getY, (, series, ,]
[series, ,, item, ), ;, }, public, boolean, isSelected, (, int, series, ,, int, item, ), {, XYSeries, s, =]
[item, ), ;, }, public, boolean, isSelected, (, int, series, ,, int, item, ), {, XYSeries, s, =, getSeries, (]
[isSelected, (, int, series, ,, int, item, ), {, XYSeries, s, =, getSeries, (, series, ), ;, XYDataItem, i, =]
[isSelected, (, int, series, ,, int, item, ), {, XYSeries, s, =, getSeries, (, series, ), ;, XYDataItem, i, =]
[,, int, item, ), {, XYSeries, s, =, getSeries, (, series, ), ;, XYDataItem, i, =, s, ., getRawDataItem, (]
[{, XYSeries, s, =, getSeries, (, series, ), ;, XYDataItem, i, =, s, ., getRawDataItem, (, item, ), ;, return]
[{, XYSeries, s, =, getSeries, (, series, ), ;, XYDataItem, i, =, s, ., getRawDataItem, (, item, ), ;, return]
[., isSelected, (, ), ;, }, public, void, setSelected, (, int, series, ,, int, item, ,, boolean, selected, ), {]
[(, ), ;, }, public, void, setSelected, (, int, series, ,, int, item, ,, boolean, selected, ), {, setSelected, (]
[;, }, public, void, setSelected, (, int, series, ,, int, item, ,, boolean, selected, ), {, setSelected, (, series, ,]
[public, void, setSelected, (, int, series, ,, int, item, ,, boolean, selected, ), {, setSelected, (, series, ,, item, ,]
[setSelected, (, int, series, ,, int, item, ,, boolean, selected, ), {, setSelected, (, series, ,, item, ,, selected, ,]
[public, void, setSelected, (, int, series, ,, int, item, ,, boolean, selected, ,, boolean, notify, ), {, XYSeries, s, =]
[setSelected, (, int, series, ,, int, item, ,, boolean, selected, ,, boolean, notify, ), {, XYSeries, s, =, getSeries, (]
[item, ,, boolean, selected, ,, boolean, notify, ), {, XYSeries, s, =, getSeries, (, series, ), ;, XYDataItem, i, =]
[item, ,, boolean, selected, ,, boolean, notify, ), {, XYSeries, s, =, getSeries, (, series, ), ;, XYDataItem, i, =]
[,, boolean, notify, ), {, XYSeries, s, =, getSeries, (, series, ), ;, XYDataItem, i, =, s, ., getRawDataItem, (]
[), {, XYSeries, s, =, getSeries, (, series, ), ;, XYDataItem, i, =, s, ., getRawDataItem, (, item, ), ;]
[), {, XYSeries, s, =, getSeries, (, series, ), ;, XYDataItem, i, =, s, ., getRawDataItem, (, item, ), ;]
[=, getSeries, (, series, ), ;, XYDataItem, i, =, s, ., getRawDataItem, (, item, ), ;, i, ., setSelected, (]
[;, XYDataItem, i, =, s, ., getRawDataItem, (, item, ), ;, i, ., setSelected, (, selected, ), ;, if, (]
[=, s, ., getRawDataItem, (, item, ), ;, i, ., setSelected, (, selected, ), ;, if, (, notify, ), {]
[if, (, notify, ), {, fireSelectionEvent, (, ), ;, }, }, public, void, clearSelection, (, ), {, int, seriesCount, =]
[}, }, public, void, clearSelection, (, ), {, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =]
[public, void, clearSelection, (, ), {, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[public, void, clearSelection, (, ), {, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[clearSelection, (, ), {, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <]
[), {, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[), {, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, int, itemCount, =]
[for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, int, itemCount, =, getItemCount, (]
[<, seriesCount, ;, s, ++, ), {, int, itemCount, =, getItemCount, (, s, ), ;, for, (, int, i, =]
[;, s, ++, ), {, int, itemCount, =, getItemCount, (, s, ), ;, for, (, int, i, =, 0, ;]
[;, s, ++, ), {, int, itemCount, =, getItemCount, (, s, ), ;, for, (, int, i, =, 0, ;]
[++, ), {, int, itemCount, =, getItemCount, (, s, ), ;, for, (, int, i, =, 0, ;, i, <]
[{, int, itemCount, =, getItemCount, (, s, ), ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;]
[{, int, itemCount, =, getItemCount, (, s, ), ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;]
[getItemCount, (, s, ), ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {]
[s, ), ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, setSelected, (]
[;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, setSelected, (, s, ,]
[(, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, setSelected, (, s, ,, i, ,]
[i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, setSelected, (, s, ,, i, ,, false, ,]
[setSelected, (, s, ,, i, ,, false, ,, false, ), ;, }, }, }, public, void, fireSelectionEvent, (, ), {]
[s, ,, i, ,, false, ,, false, ), ;, }, }, }, public, void, fireSelectionEvent, (, ), {, fireDatasetChanged, (]
[{, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[{, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[(, new, DatasetChangeInfo, (, ), ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[), ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, XYSeriesCollection, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, XYSeriesCollection, ), ), {, return, false, ;, }, XYSeriesCollection, that, =]
[if, (, !, (, obj, instanceof, XYSeriesCollection, ), ), {, return, false, ;, }, XYSeriesCollection, that, =, (, XYSeriesCollection, )]
[obj, instanceof, XYSeriesCollection, ), ), {, return, false, ;, }, XYSeriesCollection, that, =, (, XYSeriesCollection, ), obj, ;, if, (]
[instanceof, XYSeriesCollection, ), ), {, return, false, ;, }, XYSeriesCollection, that, =, (, XYSeriesCollection, ), obj, ;, if, (, !]
[instanceof, XYSeriesCollection, ), ), {, return, false, ;, }, XYSeriesCollection, that, =, (, XYSeriesCollection, ), obj, ;, if, (, !]
[instanceof, XYSeriesCollection, ), ), {, return, false, ;, }, XYSeriesCollection, that, =, (, XYSeriesCollection, ), obj, ;, if, (, !]
[false, ;, }, XYSeriesCollection, that, =, (, XYSeriesCollection, ), obj, ;, if, (, !, this, ., intervalDelegate, ., equals, (]
[false, ;, }, XYSeriesCollection, that, =, (, XYSeriesCollection, ), obj, ;, if, (, !, this, ., intervalDelegate, ., equals, (]
[XYSeriesCollection, ), obj, ;, if, (, !, this, ., intervalDelegate, ., equals, (, that, ., intervalDelegate, ), ), {, return]
[if, (, !, this, ., intervalDelegate, ., equals, (, that, ., intervalDelegate, ), ), {, return, false, ;, }, return]
[if, (, !, this, ., intervalDelegate, ., equals, (, that, ., intervalDelegate, ), ), {, return, false, ;, }, return]
[., intervalDelegate, ., equals, (, that, ., intervalDelegate, ), ), {, return, false, ;, }, return, ObjectUtilities, ., equal, (]
[., intervalDelegate, ., equals, (, that, ., intervalDelegate, ), ), {, return, false, ;, }, return, ObjectUtilities, ., equal, (]
[(, that, ., intervalDelegate, ), ), {, return, false, ;, }, return, ObjectUtilities, ., equal, (, this, ., data, ,]
[(, that, ., intervalDelegate, ), ), {, return, false, ;, }, return, ObjectUtilities, ., equal, (, this, ., data, ,]
[., data, ,, that, ., data, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeriesCollection, clone, =]
[that, ., data, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeriesCollection, clone, =, (, XYSeriesCollection, )]
[that, ., data, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeriesCollection, clone, =, (, XYSeriesCollection, )]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeriesCollection, clone, =, (, XYSeriesCollection, ), super, ., clone, (, ), ;]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeriesCollection, clone, =, (, XYSeriesCollection, ), super, ., clone, (, ), ;]
[), throws, CloneNotSupportedException, {, XYSeriesCollection, clone, =, (, XYSeriesCollection, ), super, ., clone, (, ), ;, clone, ., data, =]
[{, XYSeriesCollection, clone, =, (, XYSeriesCollection, ), super, ., clone, (, ), ;, clone, ., data, =, (, List, )]
[{, XYSeriesCollection, clone, =, (, XYSeriesCollection, ), super, ., clone, (, ), ;, clone, ., data, =, (, List, )]
[(, XYSeriesCollection, ), super, ., clone, (, ), ;, clone, ., data, =, (, List, ), ObjectUtilities, ., deepClone, (]
[(, XYSeriesCollection, ), super, ., clone, (, ), ;, clone, ., data, =, (, List, ), ObjectUtilities, ., deepClone, (]
[clone, (, ), ;, clone, ., data, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., data, ), ;]
[clone, (, ), ;, clone, ., data, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., data, ), ;]
[clone, ., data, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., data, ), ;, clone, ., intervalDelegate, =]
[=, (, List, ), ObjectUtilities, ., deepClone, (, this, ., data, ), ;, clone, ., intervalDelegate, =, (, IntervalXYDelegate, )]
[=, (, List, ), ObjectUtilities, ., deepClone, (, this, ., data, ), ;, clone, ., intervalDelegate, =, (, IntervalXYDelegate, )]
[=, (, List, ), ObjectUtilities, ., deepClone, (, this, ., data, ), ;, clone, ., intervalDelegate, =, (, IntervalXYDelegate, )]
[., data, ), ;, clone, ., intervalDelegate, =, (, IntervalXYDelegate, ), this, ., intervalDelegate, ., clone, (, ), ;, return]
[., intervalDelegate, ., clone, (, ), ;, return, clone, ;, }, public, int, hashCode, (, ), {, int, hash, =]
[., clone, (, ), ;, return, clone, ;, }, public, int, hashCode, (, ), {, int, hash, =, 5, ;]
[(, ), ;, return, clone, ;, }, public, int, hashCode, (, ), {, int, hash, =, 5, ;, hash, =]
[(, ), ;, return, clone, ;, }, public, int, hashCode, (, ), {, int, hash, =, 5, ;, hash, =]
[clone, ;, }, public, int, hashCode, (, ), {, int, hash, =, 5, ;, hash, =, HashUtilities, ., hashCode, (]
[}, public, int, hashCode, (, ), {, int, hash, =, 5, ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[}, public, int, hashCode, (, ), {, int, hash, =, 5, ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[), {, int, hash, =, 5, ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalDelegate, ), ;]
[int, hash, =, 5, ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalDelegate, ), ;, hash, =]
[int, hash, =, 5, ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalDelegate, ), ;, hash, =]
[;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalDelegate, ), ;, hash, =, HashUtilities, ., hashCode, (]
[=, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalDelegate, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[=, HashUtilities, ., hashCode, (, hash, ,, this, ., intervalDelegate, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,]
[,, this, ., intervalDelegate, ), ;, hash, =, HashUtilities, ., hashCode, (, hash, ,, this, ., data, ), ;, return]
[,, this, ., data, ), ;, return, hash, ;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, if, (]
[), ;, return, hash, ;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, if, (, includeInterval, ), {, return]
[), ;, return, hash, ;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, if, (, includeInterval, ), {, return]
[), ;, return, hash, ;, }, public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, if, (, includeInterval, ), {, return]
[public, double, getDomainLowerBound, (, boolean, includeInterval, ), {, if, (, includeInterval, ), {, return, this, ., intervalDelegate, ., getDomainLowerBound, (]
[(, includeInterval, ), {, return, this, ., intervalDelegate, ., getDomainLowerBound, (, includeInterval, ), ;, }, else, {, double, result, =]
[(, includeInterval, ), {, return, this, ., intervalDelegate, ., getDomainLowerBound, (, includeInterval, ), ;, }, else, {, double, result, =]
[intervalDelegate, ., getDomainLowerBound, (, includeInterval, ), ;, }, else, {, double, result, =, Double, ., NaN, ;, int, seriesCount, =]
[{, double, result, =, Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =]
[result, =, Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[result, =, Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <]
[NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =]
[for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (]
[;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (, s, ), ;, double, lowX, =]
[;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (, s, ), ;, double, lowX, =]
[{, XYSeries, series, =, getSeries, (, s, ), ;, double, lowX, =, series, ., getMinX, (, ), ;, if, (]
[{, XYSeries, series, =, getSeries, (, s, ), ;, double, lowX, =, series, ., getMinX, (, ), ;, if, (]
[getSeries, (, s, ), ;, double, lowX, =, series, ., getMinX, (, ), ;, if, (, Double, ., isNaN, (]
[;, double, lowX, =, series, ., getMinX, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {]
[lowX, =, series, ., getMinX, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, lowX, ;, }, else, {, if, (]
[if, (, Double, ., isNaN, (, result, ), ), {, result, =, lowX, ;, }, else, {, if, (, !]
[if, (, Double, ., isNaN, (, result, ), ), {, result, =, lowX, ;, }, else, {, if, (, !]
[isNaN, (, result, ), ), {, result, =, lowX, ;, }, else, {, if, (, !, Double, ., isNaN, (]
[), {, result, =, lowX, ;, }, else, {, if, (, !, Double, ., isNaN, (, lowX, ), ), {]
[result, =, lowX, ;, }, else, {, if, (, !, Double, ., isNaN, (, lowX, ), ), {, result, =]
[result, =, lowX, ;, }, else, {, if, (, !, Double, ., isNaN, (, lowX, ), ), {, result, =]
[}, else, {, if, (, !, Double, ., isNaN, (, lowX, ), ), {, result, =, Math, ., min, (]
[{, if, (, !, Double, ., isNaN, (, lowX, ), ), {, result, =, Math, ., min, (, result, ,]
[(, lowX, ), ), {, result, =, Math, ., min, (, result, ,, lowX, ), ;, }, }, }, return]
[), ;, }, }, }, return, result, ;, }, }, public, double, getDomainUpperBound, (, boolean, includeInterval, ), {, if, (]
[}, return, result, ;, }, }, public, double, getDomainUpperBound, (, boolean, includeInterval, ), {, if, (, includeInterval, ), {, return]
[}, return, result, ;, }, }, public, double, getDomainUpperBound, (, boolean, includeInterval, ), {, if, (, includeInterval, ), {, return]
[}, return, result, ;, }, }, public, double, getDomainUpperBound, (, boolean, includeInterval, ), {, if, (, includeInterval, ), {, return]
[public, double, getDomainUpperBound, (, boolean, includeInterval, ), {, if, (, includeInterval, ), {, return, this, ., intervalDelegate, ., getDomainUpperBound, (]
[(, includeInterval, ), {, return, this, ., intervalDelegate, ., getDomainUpperBound, (, includeInterval, ), ;, }, else, {, double, result, =]
[(, includeInterval, ), {, return, this, ., intervalDelegate, ., getDomainUpperBound, (, includeInterval, ), ;, }, else, {, double, result, =]
[intervalDelegate, ., getDomainUpperBound, (, includeInterval, ), ;, }, else, {, double, result, =, Double, ., NaN, ;, int, seriesCount, =]
[{, double, result, =, Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =]
[result, =, Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[result, =, Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <]
[NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =]
[for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (]
[;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (, s, ), ;, double, hiX, =]
[;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (, s, ), ;, double, hiX, =]
[{, XYSeries, series, =, getSeries, (, s, ), ;, double, hiX, =, series, ., getMaxX, (, ), ;, if, (]
[{, XYSeries, series, =, getSeries, (, s, ), ;, double, hiX, =, series, ., getMaxX, (, ), ;, if, (]
[getSeries, (, s, ), ;, double, hiX, =, series, ., getMaxX, (, ), ;, if, (, Double, ., isNaN, (]
[;, double, hiX, =, series, ., getMaxX, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {]
[hiX, =, series, ., getMaxX, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, hiX, ;, }, else, {, if, (]
[if, (, Double, ., isNaN, (, result, ), ), {, result, =, hiX, ;, }, else, {, if, (, !]
[if, (, Double, ., isNaN, (, result, ), ), {, result, =, hiX, ;, }, else, {, if, (, !]
[isNaN, (, result, ), ), {, result, =, hiX, ;, }, else, {, if, (, !, Double, ., isNaN, (]
[), {, result, =, hiX, ;, }, else, {, if, (, !, Double, ., isNaN, (, hiX, ), ), {]
[result, =, hiX, ;, }, else, {, if, (, !, Double, ., isNaN, (, hiX, ), ), {, result, =]
[result, =, hiX, ;, }, else, {, if, (, !, Double, ., isNaN, (, hiX, ), ), {, result, =]
[}, else, {, if, (, !, Double, ., isNaN, (, hiX, ), ), {, result, =, Math, ., max, (]
[{, if, (, !, Double, ., isNaN, (, hiX, ), ), {, result, =, Math, ., max, (, result, ,]
[(, hiX, ), ), {, result, =, Math, ., max, (, result, ,, hiX, ), ;, }, }, }, return]
[), ;, }, }, }, return, result, ;, }, }, public, Range, getDomainBounds, (, boolean, includeInterval, ), {, if, (]
[}, return, result, ;, }, }, public, Range, getDomainBounds, (, boolean, includeInterval, ), {, if, (, includeInterval, ), {, return]
[}, return, result, ;, }, }, public, Range, getDomainBounds, (, boolean, includeInterval, ), {, if, (, includeInterval, ), {, return]
[}, return, result, ;, }, }, public, Range, getDomainBounds, (, boolean, includeInterval, ), {, if, (, includeInterval, ), {, return]
[public, Range, getDomainBounds, (, boolean, includeInterval, ), {, if, (, includeInterval, ), {, return, this, ., intervalDelegate, ., getDomainBounds, (]
[(, includeInterval, ), {, return, this, ., intervalDelegate, ., getDomainBounds, (, includeInterval, ), ;, }, else, {, double, lower, =]
[(, includeInterval, ), {, return, this, ., intervalDelegate, ., getDomainBounds, (, includeInterval, ), ;, }, else, {, double, lower, =]
[intervalDelegate, ., getDomainBounds, (, includeInterval, ), ;, }, else, {, double, lower, =, Double, ., POSITIVE_INFINITY, ;, double, upper, =]
[intervalDelegate, ., getDomainBounds, (, includeInterval, ), ;, }, else, {, double, lower, =, Double, ., POSITIVE_INFINITY, ;, double, upper, =]
[}, else, {, double, lower, =, Double, ., POSITIVE_INFINITY, ;, double, upper, =, Double, ., NEGATIVE_INFINITY, ;, int, seriesCount, =]
[;, double, upper, =, Double, ., NEGATIVE_INFINITY, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =]
[upper, =, Double, ., NEGATIVE_INFINITY, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[upper, =, Double, ., NEGATIVE_INFINITY, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[Double, ., NEGATIVE_INFINITY, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <]
[NEGATIVE_INFINITY, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[NEGATIVE_INFINITY, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =]
[for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (]
[;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (, s, ), ;, double, minX, =]
[;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (, s, ), ;, double, minX, =]
[{, XYSeries, series, =, getSeries, (, s, ), ;, double, minX, =, series, ., getMinX, (, ), ;, if, (]
[XYSeries, series, =, getSeries, (, s, ), ;, double, minX, =, series, ., getMinX, (, ), ;, if, (, !]
[XYSeries, series, =, getSeries, (, s, ), ;, double, minX, =, series, ., getMinX, (, ), ;, if, (, !]
[(, s, ), ;, double, minX, =, series, ., getMinX, (, ), ;, if, (, !, Double, ., isNaN, (]
[double, minX, =, series, ., getMinX, (, ), ;, if, (, !, Double, ., isNaN, (, minX, ), ), {]
[=, series, ., getMinX, (, ), ;, if, (, !, Double, ., isNaN, (, minX, ), ), {, lower, =]
[=, series, ., getMinX, (, ), ;, if, (, !, Double, ., isNaN, (, minX, ), ), {, lower, =]
[(, ), ;, if, (, !, Double, ., isNaN, (, minX, ), ), {, lower, =, Math, ., min, (]
[;, if, (, !, Double, ., isNaN, (, minX, ), ), {, lower, =, Math, ., min, (, lower, ,]
[(, minX, ), ), {, lower, =, Math, ., min, (, lower, ,, minX, ), ;, }, double, maxX, =]
[(, minX, ), ), {, lower, =, Math, ., min, (, lower, ,, minX, ), ;, }, double, maxX, =]
[., min, (, lower, ,, minX, ), ;, }, double, maxX, =, series, ., getMaxX, (, ), ;, if, (]
[min, (, lower, ,, minX, ), ;, }, double, maxX, =, series, ., getMaxX, (, ), ;, if, (, !]
[min, (, lower, ,, minX, ), ;, }, double, maxX, =, series, ., getMaxX, (, ), ;, if, (, !]
[minX, ), ;, }, double, maxX, =, series, ., getMaxX, (, ), ;, if, (, !, Double, ., isNaN, (]
[double, maxX, =, series, ., getMaxX, (, ), ;, if, (, !, Double, ., isNaN, (, maxX, ), ), {]
[=, series, ., getMaxX, (, ), ;, if, (, !, Double, ., isNaN, (, maxX, ), ), {, upper, =]
[=, series, ., getMaxX, (, ), ;, if, (, !, Double, ., isNaN, (, maxX, ), ), {, upper, =]
[(, ), ;, if, (, !, Double, ., isNaN, (, maxX, ), ), {, upper, =, Math, ., max, (]
[;, if, (, !, Double, ., isNaN, (, maxX, ), ), {, upper, =, Math, ., max, (, upper, ,]
[(, maxX, ), ), {, upper, =, Math, ., max, (, upper, ,, maxX, ), ;, }, }, if, (]
[(, maxX, ), ), {, upper, =, Math, ., max, (, upper, ,, maxX, ), ;, }, }, if, (]
[), ), {, upper, =, Math, ., max, (, upper, ,, maxX, ), ;, }, }, if, (, lower, >]
[=, Math, ., max, (, upper, ,, maxX, ), ;, }, }, if, (, lower, >, upper, ), {, return]
[,, maxX, ), ;, }, }, if, (, lower, >, upper, ), {, return, null, ;, }, else, {, return]
[;, }, }, if, (, lower, >, upper, ), {, return, null, ;, }, else, {, return, new, Range, (]
[}, if, (, lower, >, upper, ), {, return, null, ;, }, else, {, return, new, Range, (, lower, ,]
[{, return, new, Range, (, lower, ,, upper, ), ;, }, }, }, public, double, getIntervalWidth, (, ), {, return]
[{, return, new, Range, (, lower, ,, upper, ), ;, }, }, }, public, double, getIntervalWidth, (, ), {, return]
[{, return, new, Range, (, lower, ,, upper, ), ;, }, }, }, public, double, getIntervalWidth, (, ), {, return]
[return, this, ., intervalDelegate, ., getIntervalWidth, (, ), ;, }, public, void, setIntervalWidth, (, double, width, ), {, if, (]
[return, this, ., intervalDelegate, ., getIntervalWidth, (, ), ;, }, public, void, setIntervalWidth, (, double, width, ), {, if, (]
[., intervalDelegate, ., getIntervalWidth, (, ), ;, }, public, void, setIntervalWidth, (, double, width, ), {, if, (, width, <]
[(, ), ;, }, public, void, setIntervalWidth, (, double, width, ), {, if, (, width, <, 0.0, ), {, throw]
[}, public, void, setIntervalWidth, (, double, width, ), {, if, (, width, <, 0.0, ), {, throw, new, IllegalArgumentException, (]
[(, double, width, ), {, if, (, width, <, 0.0, ), {, throw, new, IllegalArgumentException, (, "Negative 'width' argument.", ), ;, }]
[(, double, width, ), {, if, (, width, <, 0.0, ), {, throw, new, IllegalArgumentException, (, "Negative 'width' argument.", ), ;, }]
[(, double, width, ), {, if, (, width, <, 0.0, ), {, throw, new, IllegalArgumentException, (, "Negative 'width' argument.", ), ;, }]
[(, width, <, 0.0, ), {, throw, new, IllegalArgumentException, (, "Negative 'width' argument.", ), ;, }, this, ., intervalDelegate, ., setFixedIntervalWidth, (]
[0.0, ), {, throw, new, IllegalArgumentException, (, "Negative 'width' argument.", ), ;, }, this, ., intervalDelegate, ., setFixedIntervalWidth, (, width, ), ;]
[{, throw, new, IllegalArgumentException, (, "Negative 'width' argument.", ), ;, }, this, ., intervalDelegate, ., setFixedIntervalWidth, (, width, ), ;, fireDatasetChanged, (]
[(, width, ), ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, double, getIntervalPositionFactor, (, ), {, return]
[(, width, ), ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, double, getIntervalPositionFactor, (, ), {, return]
[(, width, ), ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, double, getIntervalPositionFactor, (, ), {, return]
[), {, return, this, ., intervalDelegate, ., getIntervalPositionFactor, (, ), ;, }, public, void, setIntervalPositionFactor, (, double, factor, ), {]
[), {, return, this, ., intervalDelegate, ., getIntervalPositionFactor, (, ), ;, }, public, void, setIntervalPositionFactor, (, double, factor, ), {]
[), {, return, this, ., intervalDelegate, ., getIntervalPositionFactor, (, ), ;, }, public, void, setIntervalPositionFactor, (, double, factor, ), {]
[., getIntervalPositionFactor, (, ), ;, }, public, void, setIntervalPositionFactor, (, double, factor, ), {, this, ., intervalDelegate, ., setIntervalPositionFactor, (]
[), ;, }, public, void, setIntervalPositionFactor, (, double, factor, ), {, this, ., intervalDelegate, ., setIntervalPositionFactor, (, factor, ), ;]
[}, public, void, setIntervalPositionFactor, (, double, factor, ), {, this, ., intervalDelegate, ., setIntervalPositionFactor, (, factor, ), ;, fireDatasetChanged, (]
[(, factor, ), ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, boolean, isAutoWidth, (, ), {, return]
[(, factor, ), ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, boolean, isAutoWidth, (, ), {, return]
[(, factor, ), ;, fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, boolean, isAutoWidth, (, ), {, return]
[), {, return, this, ., intervalDelegate, ., isAutoWidth, (, ), ;, }, public, void, setAutoWidth, (, boolean, b, ), {]
[), {, return, this, ., intervalDelegate, ., isAutoWidth, (, ), ;, }, public, void, setAutoWidth, (, boolean, b, ), {]
[), {, return, this, ., intervalDelegate, ., isAutoWidth, (, ), ;, }, public, void, setAutoWidth, (, boolean, b, ), {]
[., isAutoWidth, (, ), ;, }, public, void, setAutoWidth, (, boolean, b, ), {, this, ., intervalDelegate, ., setAutoWidth, (]
[), ;, }, public, void, setAutoWidth, (, boolean, b, ), {, this, ., intervalDelegate, ., setAutoWidth, (, b, ), ;]
[}, public, void, setAutoWidth, (, boolean, b, ), {, this, ., intervalDelegate, ., setAutoWidth, (, b, ), ;, fireDatasetChanged, (]
[fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, Range, getRangeBounds, (, boolean, includeInterval, ), {, double, lower, =]
[fireDatasetChanged, (, new, DatasetChangeInfo, (, ), ), ;, }, public, Range, getRangeBounds, (, boolean, includeInterval, ), {, double, lower, =]
[;, }, public, Range, getRangeBounds, (, boolean, includeInterval, ), {, double, lower, =, Double, ., POSITIVE_INFINITY, ;, double, upper, =]
[;, }, public, Range, getRangeBounds, (, boolean, includeInterval, ), {, double, lower, =, Double, ., POSITIVE_INFINITY, ;, double, upper, =]
[includeInterval, ), {, double, lower, =, Double, ., POSITIVE_INFINITY, ;, double, upper, =, Double, ., NEGATIVE_INFINITY, ;, int, seriesCount, =]
[;, double, upper, =, Double, ., NEGATIVE_INFINITY, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =]
[upper, =, Double, ., NEGATIVE_INFINITY, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[upper, =, Double, ., NEGATIVE_INFINITY, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[Double, ., NEGATIVE_INFINITY, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <]
[NEGATIVE_INFINITY, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[NEGATIVE_INFINITY, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =]
[for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (]
[;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (, s, ), ;, double, minY, =]
[;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (, s, ), ;, double, minY, =]
[{, XYSeries, series, =, getSeries, (, s, ), ;, double, minY, =, series, ., getMinY, (, ), ;, if, (]
[XYSeries, series, =, getSeries, (, s, ), ;, double, minY, =, series, ., getMinY, (, ), ;, if, (, !]
[XYSeries, series, =, getSeries, (, s, ), ;, double, minY, =, series, ., getMinY, (, ), ;, if, (, !]
[(, s, ), ;, double, minY, =, series, ., getMinY, (, ), ;, if, (, !, Double, ., isNaN, (]
[double, minY, =, series, ., getMinY, (, ), ;, if, (, !, Double, ., isNaN, (, minY, ), ), {]
[=, series, ., getMinY, (, ), ;, if, (, !, Double, ., isNaN, (, minY, ), ), {, lower, =]
[=, series, ., getMinY, (, ), ;, if, (, !, Double, ., isNaN, (, minY, ), ), {, lower, =]
[(, ), ;, if, (, !, Double, ., isNaN, (, minY, ), ), {, lower, =, Math, ., min, (]
[;, if, (, !, Double, ., isNaN, (, minY, ), ), {, lower, =, Math, ., min, (, lower, ,]
[(, minY, ), ), {, lower, =, Math, ., min, (, lower, ,, minY, ), ;, }, double, maxY, =]
[(, minY, ), ), {, lower, =, Math, ., min, (, lower, ,, minY, ), ;, }, double, maxY, =]
[., min, (, lower, ,, minY, ), ;, }, double, maxY, =, series, ., getMaxY, (, ), ;, if, (]
[min, (, lower, ,, minY, ), ;, }, double, maxY, =, series, ., getMaxY, (, ), ;, if, (, !]
[min, (, lower, ,, minY, ), ;, }, double, maxY, =, series, ., getMaxY, (, ), ;, if, (, !]
[minY, ), ;, }, double, maxY, =, series, ., getMaxY, (, ), ;, if, (, !, Double, ., isNaN, (]
[double, maxY, =, series, ., getMaxY, (, ), ;, if, (, !, Double, ., isNaN, (, maxY, ), ), {]
[=, series, ., getMaxY, (, ), ;, if, (, !, Double, ., isNaN, (, maxY, ), ), {, upper, =]
[=, series, ., getMaxY, (, ), ;, if, (, !, Double, ., isNaN, (, maxY, ), ), {, upper, =]
[(, ), ;, if, (, !, Double, ., isNaN, (, maxY, ), ), {, upper, =, Math, ., max, (]
[;, if, (, !, Double, ., isNaN, (, maxY, ), ), {, upper, =, Math, ., max, (, upper, ,]
[(, maxY, ), ), {, upper, =, Math, ., max, (, upper, ,, maxY, ), ;, }, }, if, (]
[(, maxY, ), ), {, upper, =, Math, ., max, (, upper, ,, maxY, ), ;, }, }, if, (]
[), ), {, upper, =, Math, ., max, (, upper, ,, maxY, ), ;, }, }, if, (, lower, >]
[=, Math, ., max, (, upper, ,, maxY, ), ;, }, }, if, (, lower, >, upper, ), {, return]
[,, maxY, ), ;, }, }, if, (, lower, >, upper, ), {, return, null, ;, }, else, {, return]
[;, }, }, if, (, lower, >, upper, ), {, return, null, ;, }, else, {, return, new, Range, (]
[}, if, (, lower, >, upper, ), {, return, null, ;, }, else, {, return, new, Range, (, lower, ,]
[Range, (, lower, ,, upper, ), ;, }, }, public, double, getRangeLowerBound, (, boolean, includeInterval, ), {, double, result, =]
[Range, (, lower, ,, upper, ), ;, }, }, public, double, getRangeLowerBound, (, boolean, includeInterval, ), {, double, result, =]
[}, }, public, double, getRangeLowerBound, (, boolean, includeInterval, ), {, double, result, =, Double, ., NaN, ;, int, seriesCount, =]
[{, double, result, =, Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =]
[result, =, Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[result, =, Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <]
[NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =]
[for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (]
[;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (, s, ), ;, double, lowY, =]
[;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (, s, ), ;, double, lowY, =]
[{, XYSeries, series, =, getSeries, (, s, ), ;, double, lowY, =, series, ., getMinY, (, ), ;, if, (]
[{, XYSeries, series, =, getSeries, (, s, ), ;, double, lowY, =, series, ., getMinY, (, ), ;, if, (]
[getSeries, (, s, ), ;, double, lowY, =, series, ., getMinY, (, ), ;, if, (, Double, ., isNaN, (]
[;, double, lowY, =, series, ., getMinY, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {]
[lowY, =, series, ., getMinY, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, lowY, ;, }, else, {, if, (]
[if, (, Double, ., isNaN, (, result, ), ), {, result, =, lowY, ;, }, else, {, if, (, !]
[if, (, Double, ., isNaN, (, result, ), ), {, result, =, lowY, ;, }, else, {, if, (, !]
[isNaN, (, result, ), ), {, result, =, lowY, ;, }, else, {, if, (, !, Double, ., isNaN, (]
[), {, result, =, lowY, ;, }, else, {, if, (, !, Double, ., isNaN, (, lowY, ), ), {]
[result, =, lowY, ;, }, else, {, if, (, !, Double, ., isNaN, (, lowY, ), ), {, result, =]
[result, =, lowY, ;, }, else, {, if, (, !, Double, ., isNaN, (, lowY, ), ), {, result, =]
[}, else, {, if, (, !, Double, ., isNaN, (, lowY, ), ), {, result, =, Math, ., min, (]
[{, if, (, !, Double, ., isNaN, (, lowY, ), ), {, result, =, Math, ., min, (, result, ,]
[(, lowY, ), ), {, result, =, Math, ., min, (, result, ,, lowY, ), ;, }, }, }, return]
[), ;, }, }, }, return, result, ;, }, public, double, getRangeUpperBound, (, boolean, includeInterval, ), {, double, result, =]
[), ;, }, }, }, return, result, ;, }, public, double, getRangeUpperBound, (, boolean, includeInterval, ), {, double, result, =]
[;, }, public, double, getRangeUpperBound, (, boolean, includeInterval, ), {, double, result, =, Double, ., NaN, ;, int, seriesCount, =]
[{, double, result, =, Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =]
[result, =, Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[result, =, Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;]
[Double, ., NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <]
[NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[NaN, ;, int, seriesCount, =, getSeriesCount, (, ), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;]
[), ;, for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =]
[for, (, int, s, =, 0, ;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (]
[;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (, s, ), ;, double, hiY, =]
[;, s, <, seriesCount, ;, s, ++, ), {, XYSeries, series, =, getSeries, (, s, ), ;, double, hiY, =]
[{, XYSeries, series, =, getSeries, (, s, ), ;, double, hiY, =, series, ., getMaxY, (, ), ;, if, (]
[{, XYSeries, series, =, getSeries, (, s, ), ;, double, hiY, =, series, ., getMaxY, (, ), ;, if, (]
[getSeries, (, s, ), ;, double, hiY, =, series, ., getMaxY, (, ), ;, if, (, Double, ., isNaN, (]
[;, double, hiY, =, series, ., getMaxY, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {]
[hiY, =, series, ., getMaxY, (, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, hiY, ;, }, else, {, if, (]
[if, (, Double, ., isNaN, (, result, ), ), {, result, =, hiY, ;, }, else, {, if, (, !]
[if, (, Double, ., isNaN, (, result, ), ), {, result, =, hiY, ;, }, else, {, if, (, !]
[isNaN, (, result, ), ), {, result, =, hiY, ;, }, else, {, if, (, !, Double, ., isNaN, (]
[), {, result, =, hiY, ;, }, else, {, if, (, !, Double, ., isNaN, (, hiY, ), ), {]
[result, =, hiY, ;, }, else, {, if, (, !, Double, ., isNaN, (, hiY, ), ), {, result, =]
[result, =, hiY, ;, }, else, {, if, (, !, Double, ., isNaN, (, hiY, ), ), {, result, =]
[}, else, {, if, (, !, Double, ., isNaN, (, hiY, ), ), {, result, =, Math, ., max, (]
[{, if, (, !, Double, ., isNaN, (, hiY, ), ), {, result, =, Math, ., max, (, result, ,]
[(, hiY, ), ), {, result, =, Math, ., max, (, result, ,, hiY, ), ;, }, }, }, return]
