[=, compiler, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, }, @, Override, public, void, process, (]
[., compiler, =, compiler, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, }, @, Override, public, void]
[;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, }, @, Override, public, void, process, (, Node, externs]
[=, compiler, ., getModuleGraph, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction]
[., getModuleGraph, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameReferenceGraphConstruction]
[;, gc, ., process, (, externs, ,, root, ), ;, graph, =, gc, ., getNameReferenceGraph, (, ), ;, FixedPointGraphTraversal, <]
[), ;, gc, ., process, (, externs, ,, root, ), ;, graph, =, gc, ., getNameReferenceGraph, (, ), ;, FixedPointGraphTraversal]
[;, graph, =, gc, ., getNameReferenceGraph, (, ), ;, FixedPointGraphTraversal, <, Name, ,, Reference, >, t, =, FixedPointGraphTraversal, ., newTraversal]
[., process, (, externs, ,, root, ), ;, graph, =, gc, ., getNameReferenceGraph, (, ), ;, FixedPointGraphTraversal, <, Name, ,]
[,, root, ), ;, graph, =, gc, ., getNameReferenceGraph, (, ), ;, FixedPointGraphTraversal, <, Name, ,, Reference, >, t, =]
[), ;, graph, =, gc, ., getNameReferenceGraph, (, ), ;, FixedPointGraphTraversal, <, Name, ,, Reference, >, t, =, FixedPointGraphTraversal, .]
[=, gc, ., getNameReferenceGraph, (, ), ;, FixedPointGraphTraversal, <, Name, ,, Reference, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new]
[;, FixedPointGraphTraversal, <, Name, ,, Reference, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;, getInfo]
[., getNameReferenceGraph, (, ), ;, FixedPointGraphTraversal, <, Name, ,, Reference, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (]
[;, getInfo, (, graph, ., MAIN, ), ., markReference, (, null, ), ;, t, ., computeFixedPoint, (, graph, ,, Sets]
[., newTraversal, (, new, PropagateReferences, (, ), ), ;, getInfo, (, graph, ., MAIN, ), ., markReference, (, null, )]
[), ;, getInfo, (, graph, ., MAIN, ), ., markReference, (, null, ), ;, t, ., computeFixedPoint, (, graph, ,]
[;, t, ., computeFixedPoint, (, graph, ,, Sets, ., newHashSet, (, graph, ., MAIN, ), ), ;, }, public, NameReferenceGraph]
[., markReference, (, null, ), ;, t, ., computeFixedPoint, (, graph, ,, Sets, ., newHashSet, (, graph, ., MAIN, )]
[), ., markReference, (, null, ), ;, t, ., computeFixedPoint, (, graph, ,, Sets, ., newHashSet, (, graph, ., MAIN]
[., MAIN, ), ., markReference, (, null, ), ;, t, ., computeFixedPoint, (, graph, ,, Sets, ., newHashSet, (, graph]
[), ;, t, ., computeFixedPoint, (, graph, ,, Sets, ., newHashSet, (, graph, ., MAIN, ), ), ;, }, public]
[;, }, public, NameReferenceGraph, getGraph, (, ), {, return, graph, ;, }, private, class, PropagateReferences, implements, EdgeCallback, <, Name, ,]
[., computeFixedPoint, (, graph, ,, Sets, ., newHashSet, (, graph, ., MAIN, ), ), ;, }, public, NameReferenceGraph, getGraph, (]
[,, Sets, ., newHashSet, (, graph, ., MAIN, ), ), ;, }, public, NameReferenceGraph, getGraph, (, ), {, return, graph]
[), ;, }, public, NameReferenceGraph, getGraph, (, ), {, return, graph, ;, }, private, class, PropagateReferences, implements, EdgeCallback, <, Name]
[., newHashSet, (, graph, ., MAIN, ), ), ;, }, public, NameReferenceGraph, getGraph, (, ), {, return, graph, ;, }]
[), ), ;, }, public, NameReferenceGraph, getGraph, (, ), {, return, graph, ;, }, private, class, PropagateReferences, implements, EdgeCallback, <]
[., MAIN, ), ), ;, }, public, NameReferenceGraph, getGraph, (, ), {, return, graph, ;, }, private, class, PropagateReferences, implements]
[;, }, private, class, PropagateReferences, implements, EdgeCallback, <, Name, ,, Reference, >, {, @, Override, public, boolean, traverseEdge, (, Name]
[;, NameInfo, destInfo, =, getInfo, (, dest, ), ;, if, (, startInfo, ., isReferenced, (, ), ), {, JSModule, startModule]
[), ;, NameInfo, destInfo, =, getInfo, (, dest, ), ;, if, (, startInfo, ., isReferenced, (, ), ), {, JSModule]
[;, if, (, startInfo, ., isReferenced, (, ), ), {, JSModule, startModule, =, startInfo, ., getDeepestCommonModuleRef, (, ), ;, if]
[), ;, if, (, startInfo, ., isReferenced, (, ), ), {, JSModule, startModule, =, startInfo, ., getDeepestCommonModuleRef, (, ), ;]
[), {, JSModule, startModule, =, startInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null, &&, moduleGraph, ., dependsOn]
[., isReferenced, (, ), ), {, JSModule, startModule, =, startInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null]
[;, if, (, startModule, !=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ., getModule, (, ), ), )]
[., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ., getModule]
[), {, return, destInfo, ., markReference, (, startModule, ), ;, }, else, {, return, destInfo, ., markReference, (, edge, .]
[&&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ., getModule, (, ), ), ), {, return, destInfo, ., markReference, (]
[!=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ., getModule, (, ), ), ), {, return, destInfo, .]
[&&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ., getModule, (, ), ), ), {, return, destInfo, ., markReference, (]
[), {, return, destInfo, ., markReference, (, startModule, ), ;, }, else, {, return, destInfo, ., markReference, (, edge, .]
[., dependsOn, (, startModule, ,, edge, ., getModule, (, ), ), ), {, return, destInfo, ., markReference, (, startModule, )]
[,, edge, ., getModule, (, ), ), ), {, return, destInfo, ., markReference, (, startModule, ), ;, }, else, {]
[), ), {, return, destInfo, ., markReference, (, startModule, ), ;, }, else, {, return, destInfo, ., markReference, (, edge]
[., getModule, (, ), ), ), {, return, destInfo, ., markReference, (, startModule, ), ;, }, else, {, return, destInfo]
[;, }, else, {, return, destInfo, ., markReference, (, edge, ., getModule, (, ), ), ;, }, }, return, false]
[., markReference, (, startModule, ), ;, }, else, {, return, destInfo, ., markReference, (, edge, ., getModule, (, ), )]
[), ;, }, else, {, return, destInfo, ., markReference, (, edge, ., getModule, (, ), ), ;, }, }, return]
[;, }, }, return, false, ;, }, }, private, NameInfo, getInfo, (, Name, symbol, ), {, GraphNode, <, Name, ,]
[., markReference, (, edge, ., getModule, (, ), ), ;, }, }, return, false, ;, }, }, private, NameInfo, getInfo]
[), ;, }, }, return, false, ;, }, }, private, NameInfo, getInfo, (, Name, symbol, ), {, GraphNode, <, Name]
[., getModule, (, ), ), ;, }, }, return, false, ;, }, }, private, NameInfo, getInfo, (, Name, symbol, )]
[;, }, }, private, NameInfo, getInfo, (, Name, symbol, ), {, GraphNode, <, Name, ,, Reference, >, name, =, graph]
[;, NameInfo, info, =, name, ., getAnnotation, (, ), ;, if, (, info, ==, null, ), {, info, =, new]
[., getNode, (, symbol, ), ;, NameInfo, info, =, name, ., getAnnotation, (, ), ;, if, (, info, ==, null]
[), ;, NameInfo, info, =, name, ., getAnnotation, (, ), ;, if, (, info, ==, null, ), {, info, =]
[;, if, (, info, ==, null, ), {, info, =, new, NameInfo, (, ), ;, name, ., setAnnotation, (, info]
[., getAnnotation, (, ), ;, if, (, info, ==, null, ), {, info, =, new, NameInfo, (, ), ;, name]
[), {, info, =, new, NameInfo, (, ), ;, name, ., setAnnotation, (, info, ), ;, }, return, info, ;]
[==, null, ), {, info, =, new, NameInfo, (, ), ;, name, ., setAnnotation, (, info, ), ;, }, return]
[), {, info, =, new, NameInfo, (, ), ;, name, ., setAnnotation, (, info, ), ;, }, return, info, ;]
[=, new, NameInfo, (, ), ;, name, ., setAnnotation, (, info, ), ;, }, return, info, ;, }, final, class]
[;, name, ., setAnnotation, (, info, ), ;, }, return, info, ;, }, final, class, NameInfo, implements, Annotation, {, private]
[;, }, return, info, ;, }, final, class, NameInfo, implements, Annotation, {, private, boolean, referenced, =, false, ;, private, JSModule]
[., setAnnotation, (, info, ), ;, }, return, info, ;, }, final, class, NameInfo, implements, Annotation, {, private, boolean, referenced]
[), ;, }, return, info, ;, }, final, class, NameInfo, implements, Annotation, {, private, boolean, referenced, =, false, ;, private]
[;, }, final, class, NameInfo, implements, Annotation, {, private, boolean, referenced, =, false, ;, private, JSModule, deepestCommonModuleRef, =, null, ;]
[;, private, JSModule, deepestCommonModuleRef, =, null, ;, boolean, isReferenced, (, ), {, return, referenced, ;, }, JSModule, getDeepestCommonModuleRef, (, )]
[;, boolean, isReferenced, (, ), {, return, referenced, ;, }, JSModule, getDeepestCommonModuleRef, (, ), {, return, deepestCommonModuleRef, ;, }, boolean]
[;, }, JSModule, getDeepestCommonModuleRef, (, ), {, return, deepestCommonModuleRef, ;, }, boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged]
[;, }, boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged, =, false, ;, if, (, !, referenced, ), {]
[;, if, (, !, referenced, ), {, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=]
[), {, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon]
[), {, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon]
[=, true, ;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;]
[;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (]
[=, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==]
[;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, )]
[), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else]
[!=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;]
[), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else]
[;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive]
[), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;]
[==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module]
[), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;]
[=, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (]
[;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=]
[=, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =]
[;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =, true, ;, }, }, return, hasChanged, ;, }, }]
[., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =, true, ;]
[,, module, ), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =, true, ;, }, }, return, hasChanged]
[), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =, true, ;, }, }, return, hasChanged, ;, }]
[), {, hasChanged, =, true, ;, }, }, return, hasChanged, ;, }, }, }]
[!=, deepestCommonModuleRef, ), {, hasChanged, =, true, ;, }, }, return, hasChanged, ;, }, }, }]
[), {, hasChanged, =, true, ;, }, }, return, hasChanged, ;, }, }, }]
[=, true, ;, }, }, return, hasChanged, ;, }, }, }]
[;, }, }, return, hasChanged, ;, }, }, }]
[;, }, }, }]
