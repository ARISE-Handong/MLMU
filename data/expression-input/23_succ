[;, private, static, final, long, serialVersionUID, =, 8589540077390120676L, ;, private, final, double, median, ;, private, final, double, scale, ;, private]
[;, private, final, double, median, ;, private, final, double, scale, ;, private, final, double, solverAbsoluteAccuracy, ;, public, CauchyDistribution, (, )]
[,, 1, ), ;, }, public, CauchyDistribution, (, double, median, ,, double, scale, ), {, this, (, median, ,, scale]
[), ;, }, public, CauchyDistribution, (, double, median, ,, double, scale, ), {, this, (, median, ,, scale, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY]
[,, scale, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, CauchyDistribution, (, double, median, ,, double, scale, ,, double, inverseCumAccuracy, ), {]
[,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, CauchyDistribution, (, double, median, ,, double, scale, ,, double, inverseCumAccuracy, ), {, this, (]
[), ;, }, public, CauchyDistribution, (, double, median, ,, double, scale, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c]
[,, median, ,, scale, ,, inverseCumAccuracy, ), ;, }, public, CauchyDistribution, (, RandomGenerator, rng, ,, double, median, ,, double, scale]
[,, scale, ,, inverseCumAccuracy, ), ;, }, public, CauchyDistribution, (, RandomGenerator, rng, ,, double, median, ,, double, scale, ,, double]
[,, inverseCumAccuracy, ), ;, }, public, CauchyDistribution, (, RandomGenerator, rng, ,, double, median, ,, double, scale, ,, double, inverseCumAccuracy, )]
[), ;, }, public, CauchyDistribution, (, RandomGenerator, rng, ,, double, median, ,, double, scale, ,, double, inverseCumAccuracy, ), {, super]
[), ;, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., scale, =, scale, ;]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., scale, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., scale, =, scale, ;]
[;, }, this, ., scale, =, scale, ;, this, ., median, =, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public]
[,, scale, ), ;, }, this, ., scale, =, scale, ;, this, ., median, =, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy]
[., SCALE, ,, scale, ), ;, }, this, ., scale, =, scale, ;, this, ., median, =, median, ;, solverAbsoluteAccuracy]
[), ;, }, this, ., scale, =, scale, ;, this, ., median, =, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }]
[=, scale, ;, this, ., median, =, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x]
[., scale, =, scale, ;, this, ., median, =, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (]
[;, this, ., median, =, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {]
[=, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5, +, (]
[., median, =, median, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5]
[;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5, +, (, FastMath, .]
[=, inverseCumAccuracy, ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5, +, (, FastMath, ., atan, (]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, return, 0.5, +, (, FastMath, ., atan, (, (, x]
[;, }, public, double, getMedian, (, ), {, return, median, ;, }, public, double, getScale, (, ), {, return, scale]
[+, (, FastMath, ., atan, (, (, x, -, median, ), /, scale, ), /, FastMath, ., PI, ), ;]
[;, }, public, double, getMedian, (, ), {, return, median, ;, }, public, double, getScale, (, ), {, return, scale]
[), ;, }, public, double, getMedian, (, ), {, return, median, ;, }, public, double, getScale, (, ), {, return]
[/, FastMath, ., PI, ), ;, }, public, double, getMedian, (, ), {, return, median, ;, }, public, double, getScale]
[., atan, (, (, x, -, median, ), /, scale, ), /, FastMath, ., PI, ), ;, }, public, double]
[), /, FastMath, ., PI, ), ;, }, public, double, getMedian, (, ), {, return, median, ;, }, public, double]
[/, scale, ), /, FastMath, ., PI, ), ;, }, public, double, getMedian, (, ), {, return, median, ;, }]
[), /, scale, ), /, FastMath, ., PI, ), ;, }, public, double, getMedian, (, ), {, return, median, ;]
[-, median, ), /, scale, ), /, FastMath, ., PI, ), ;, }, public, double, getMedian, (, ), {, return]
[), /, scale, ), /, FastMath, ., PI, ), ;, }, public, double, getMedian, (, ), {, return, median, ;]
[), /, FastMath, ., PI, ), ;, }, public, double, getMedian, (, ), {, return, median, ;, }, public, double]
[), ;, }, public, double, getMedian, (, ), {, return, median, ;, }, public, double, getScale, (, ), {, return]
[., PI, ), ;, }, public, double, getMedian, (, ), {, return, median, ;, }, public, double, getScale, (, )]
[;, }, public, double, getScale, (, ), {, return, scale, ;, }, public, double, density, (, double, x, ), {]
[;, }, public, double, density, (, double, x, ), {, final, double, dev, =, x, -, median, ;, return, (]
[;, return, (, 1, /, FastMath, ., PI, ), *, (, scale, /, (, dev, *, dev, +, scale, *]
[-, median, ;, return, (, 1, /, FastMath, ., PI, ), *, (, scale, /, (, dev, *, dev, +]
[;, return, (, 1, /, FastMath, ., PI, ), *, (, scale, /, (, dev, *, dev, +, scale, *]
[;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (, p]
[*, (, scale, /, (, dev, *, dev, +, scale, *, scale, ), ), ;, }, @, Override, public, double]
[), *, (, scale, /, (, dev, *, dev, +, scale, *, scale, ), ), ;, }, @, Override, public]
[/, FastMath, ., PI, ), *, (, scale, /, (, dev, *, dev, +, scale, *, scale, ), ), ;]
[), *, (, scale, /, (, dev, *, dev, +, scale, *, scale, ), ), ;, }, @, Override, public]
[., PI, ), *, (, scale, /, (, dev, *, dev, +, scale, *, scale, ), ), ;, }, @]
[;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (, p]
[), ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (]
[/, (, dev, *, dev, +, scale, *, scale, ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, double]
[), ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (]
[), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if]
[+, scale, *, scale, ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {]
[*, dev, +, scale, *, scale, ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws]
[+, scale, *, scale, ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {]
[), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if]
[*, scale, ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret]
[), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, else, if, (, p, ==, 0]
[||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, else, if]
[<, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }]
[||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, else, if]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, else, if, (, p, ==, 0]
[>, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, else, if, (, p]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, else, if, (, p, ==, 0]
[;, }, else, if, (, p, ==, 0, ), {, ret, =, Double, ., NEGATIVE_INFINITY, ;, }, else, if, (]
[,, 0, ,, 1, ), ;, }, else, if, (, p, ==, 0, ), {, ret, =, Double, ., NEGATIVE_INFINITY]
[,, 1, ), ;, }, else, if, (, p, ==, 0, ), {, ret, =, Double, ., NEGATIVE_INFINITY, ;, }]
[), ;, }, else, if, (, p, ==, 0, ), {, ret, =, Double, ., NEGATIVE_INFINITY, ;, }, else, if]
[), {, ret, =, Double, ., NEGATIVE_INFINITY, ;, }, else, if, (, p, ==, 1, ), {, ret, =, Double]
[==, 0, ), {, ret, =, Double, ., NEGATIVE_INFINITY, ;, }, else, if, (, p, ==, 1, ), {, ret]
[), {, ret, =, Double, ., NEGATIVE_INFINITY, ;, }, else, if, (, p, ==, 1, ), {, ret, =, Double]
[=, Double, ., NEGATIVE_INFINITY, ;, }, else, if, (, p, ==, 1, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;]
[;, }, else, if, (, p, ==, 1, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret]
[., NEGATIVE_INFINITY, ;, }, else, if, (, p, ==, 1, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else]
[), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +, scale, *, FastMath, ., tan]
[==, 1, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +, scale, *, FastMath]
[), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +, scale, *, FastMath, ., tan]
[=, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +, scale, *, FastMath, ., tan, (, FastMath, .]
[;, }, else, {, ret, =, median, +, scale, *, FastMath, ., tan, (, FastMath, ., PI, *, (, p]
[., POSITIVE_INFINITY, ;, }, else, {, ret, =, median, +, scale, *, FastMath, ., tan, (, FastMath, ., PI, *]
[=, median, +, scale, *, FastMath, ., tan, (, FastMath, ., PI, *, (, p, -, .5, ), ), ;]
[;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double]
[+, scale, *, FastMath, ., tan, (, FastMath, ., PI, *, (, p, -, .5, ), ), ;, }, return]
[;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double]
[*, FastMath, ., tan, (, FastMath, ., PI, *, (, p, -, .5, ), ), ;, }, return, ret, ;]
[;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double]
[., tan, (, FastMath, ., PI, *, (, p, -, .5, ), ), ;, }, return, ret, ;, }, @]
[), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public]
[*, (, p, -, .5, ), ), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, )]
[., PI, *, (, p, -, .5, ), ), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy]
[), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public]
[), ), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }]
[-, .5, ), ), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy]
[), ), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }]
[;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {]
[;, }, public, double, getNumericalMean, (, ), {, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {]
[;, }, public, double, getNumericalVariance, (, ), {, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {]
[., NaN, ;, }, public, double, getNumericalVariance, (, ), {, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (]
[;, }, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (, ), {]
[., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (]
[;, }, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {]
[., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (]
[;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false]
[., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return, true]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[;, }, }]
