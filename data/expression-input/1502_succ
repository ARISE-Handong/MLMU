[;, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[., checkArgument, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;]
[), ;, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[., isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;, }, @, Override, public]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, private, class, Callback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[., traverse, (, compiler, ,, root, ,, new, Callback, (, ), ), ;, }, private, class, Callback, extends, AbstractPostOrderCallback, {]
[,, root, ,, new, Callback, (, ), ), ;, }, private, class, Callback, extends, AbstractPostOrderCallback, {, @, Override, public, void]
[,, new, Callback, (, ), ), ;, }, private, class, Callback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[), ;, }, private, class, Callback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), {, return, ;, }, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, !, (, parent, .]
[), {, return, ;, }, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (, !, (, parent, .]
[., isVar, (, ), ), {, return, ;, }, Node, grandparent, =, parent, ., getParent, (, ), ;, if, (]
[;, if, (, !, (, parent, ., isScript, (, ), ||, grandparent, !=, null, &&, grandparent, ., isFunction, (, )]
[., getParent, (, ), ;, if, (, !, (, parent, ., isScript, (, ), ||, grandparent, !=, null, &&, grandparent]
[), {, return, ;, }, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, Node, name, =, n]
[), {, return, ;, }, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, Node, name, =, n]
[), ), {, return, ;, }, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, Node, name, =]
[||, grandparent, !=, null, &&, grandparent, ., isFunction, (, ), &&, parent, ., isBlock, (, ), ), ), {, return]
[., isScript, (, ), ||, grandparent, !=, null, &&, grandparent, ., isFunction, (, ), &&, parent, ., isBlock, (, )]
[), ), {, return, ;, }, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, Node, name, =]
[&&, parent, ., isBlock, (, ), ), ), {, return, ;, }, Preconditions, ., checkState, (, n, ., hasOneChild, (]
[&&, grandparent, ., isFunction, (, ), &&, parent, ., isBlock, (, ), ), ), {, return, ;, }, Preconditions, .]
[!=, null, &&, grandparent, ., isFunction, (, ), &&, parent, ., isBlock, (, ), ), ), {, return, ;, }]
[&&, grandparent, ., isFunction, (, ), &&, parent, ., isBlock, (, ), ), ), {, return, ;, }, Preconditions, .]
[&&, parent, ., isBlock, (, ), ), ), {, return, ;, }, Preconditions, ., checkState, (, n, ., hasOneChild, (]
[., isFunction, (, ), &&, parent, ., isBlock, (, ), ), ), {, return, ;, }, Preconditions, ., checkState, (]
[), ), {, return, ;, }, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, Node, name, =]
[., isBlock, (, ), ), ), {, return, ;, }, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), )]
[;, Node, name, =, n, ., getFirstChild, (, ), ;, Node, value, =, name, ., getFirstChild, (, ), ;, if]
[., checkState, (, n, ., hasOneChild, (, ), ), ;, Node, name, =, n, ., getFirstChild, (, ), ;, Node]
[), ;, Node, name, =, n, ., getFirstChild, (, ), ;, Node, value, =, name, ., getFirstChild, (, ), ;]
[., hasOneChild, (, ), ), ;, Node, name, =, n, ., getFirstChild, (, ), ;, Node, value, =, name, .]
[;, Node, value, =, name, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&, value, ., isFunction, (]
[., getFirstChild, (, ), ;, Node, value, =, name, ., getFirstChild, (, ), ;, if, (, value, !=, null, &&]
[;, if, (, value, !=, null, &&, value, ., isFunction, (, ), &&, !, isRecursiveFunction, (, value, ), ), {]
[., getFirstChild, (, ), ;, if, (, value, !=, null, &&, value, ., isFunction, (, ), &&, !, isRecursiveFunction, (]
[), {, Node, fnName, =, value, ., getFirstChild, (, ), ;, fnName, ., setString, (, name, ., getString, (, )]
[&&, !, isRecursiveFunction, (, value, ), ), {, Node, fnName, =, value, ., getFirstChild, (, ), ;, fnName, ., setString]
[&&, value, ., isFunction, (, ), &&, !, isRecursiveFunction, (, value, ), ), {, Node, fnName, =, value, ., getFirstChild]
[!=, null, &&, value, ., isFunction, (, ), &&, !, isRecursiveFunction, (, value, ), ), {, Node, fnName, =, value]
[&&, value, ., isFunction, (, ), &&, !, isRecursiveFunction, (, value, ), ), {, Node, fnName, =, value, ., getFirstChild]
[&&, !, isRecursiveFunction, (, value, ), ), {, Node, fnName, =, value, ., getFirstChild, (, ), ;, fnName, ., setString]
[., isFunction, (, ), &&, !, isRecursiveFunction, (, value, ), ), {, Node, fnName, =, value, ., getFirstChild, (, )]
[), {, Node, fnName, =, value, ., getFirstChild, (, ), ;, fnName, ., setString, (, name, ., getString, (, )]
[), {, Node, fnName, =, value, ., getFirstChild, (, ), ;, fnName, ., setString, (, name, ., getString, (, )]
[), ), {, Node, fnName, =, value, ., getFirstChild, (, ), ;, fnName, ., setString, (, name, ., getString, (]
[;, fnName, ., setString, (, name, ., getString, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (, name, ,, fnName, )]
[., getFirstChild, (, ), ;, fnName, ., setString, (, name, ., getString, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (]
[;, NodeUtil, ., copyNameAnnotations, (, name, ,, fnName, ), ;, name, ., removeChild, (, value, ), ;, parent, ., replaceChild]
[., setString, (, name, ., getString, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (, name, ,, fnName, ), ;, name]
[), ;, NodeUtil, ., copyNameAnnotations, (, name, ,, fnName, ), ;, name, ., removeChild, (, value, ), ;, parent, .]
[., getString, (, ), ), ;, NodeUtil, ., copyNameAnnotations, (, name, ,, fnName, ), ;, name, ., removeChild, (, value]
[;, name, ., removeChild, (, value, ), ;, parent, ., replaceChild, (, n, ,, value, ), ;, if, (, !]
[., copyNameAnnotations, (, name, ,, fnName, ), ;, name, ., removeChild, (, value, ), ;, parent, ., replaceChild, (, n]
[,, fnName, ), ;, name, ., removeChild, (, value, ), ;, parent, ., replaceChild, (, n, ,, value, ), ;]
[), ;, name, ., removeChild, (, value, ), ;, parent, ., replaceChild, (, n, ,, value, ), ;, if, (]
[;, parent, ., replaceChild, (, n, ,, value, ), ;, if, (, !, t, ., inGlobalScope, (, ), &&, NodeUtil]
[., removeChild, (, value, ), ;, parent, ., replaceChild, (, n, ,, value, ), ;, if, (, !, t, .]
[), ;, parent, ., replaceChild, (, n, ,, value, ), ;, if, (, !, t, ., inGlobalScope, (, ), &&]
[;, if, (, !, t, ., inGlobalScope, (, ), &&, NodeUtil, ., isHoistedFunctionDeclaration, (, value, ), ), {, parent, .]
[., replaceChild, (, n, ,, value, ), ;, if, (, !, t, ., inGlobalScope, (, ), &&, NodeUtil, ., isHoistedFunctionDeclaration]
[,, value, ), ;, if, (, !, t, ., inGlobalScope, (, ), &&, NodeUtil, ., isHoistedFunctionDeclaration, (, value, ), )]
[), ;, if, (, !, t, ., inGlobalScope, (, ), &&, NodeUtil, ., isHoistedFunctionDeclaration, (, value, ), ), {, parent]
[), {, parent, ., addChildToFront, (, value, ., detachFromParent, (, ), ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[&&, NodeUtil, ., isHoistedFunctionDeclaration, (, value, ), ), {, parent, ., addChildToFront, (, value, ., detachFromParent, (, ), ), ;]
[&&, NodeUtil, ., isHoistedFunctionDeclaration, (, value, ), ), {, parent, ., addChildToFront, (, value, ., detachFromParent, (, ), ), ;]
[., inGlobalScope, (, ), &&, NodeUtil, ., isHoistedFunctionDeclaration, (, value, ), ), {, parent, ., addChildToFront, (, value, ., detachFromParent]
[), {, parent, ., addChildToFront, (, value, ., detachFromParent, (, ), ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[., isHoistedFunctionDeclaration, (, value, ), ), {, parent, ., addChildToFront, (, value, ., detachFromParent, (, ), ), ;, }, compiler]
[), ), {, parent, ., addChildToFront, (, value, ., detachFromParent, (, ), ), ;, }, compiler, ., reportCodeChange, (, )]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, isRecursiveFunction, (, Node, function, ), {, Node, name]
[., addChildToFront, (, value, ., detachFromParent, (, ), ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, isRecursiveFunction, (, Node, function, ), {, Node]
[., detachFromParent, (, ), ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, isRecursiveFunction, (, Node]
[;, }, }, private, boolean, isRecursiveFunction, (, Node, function, ), {, Node, name, =, function, ., getFirstChild, (, ), ;]
[., reportCodeChange, (, ), ;, }, }, private, boolean, isRecursiveFunction, (, Node, function, ), {, Node, name, =, function, .]
[;, if, (, name, ., getString, (, ), ., isEmpty, (, ), ), {, return, false, ;, }, Node, args]
[., getFirstChild, (, ), ;, if, (, name, ., getString, (, ), ., isEmpty, (, ), ), {, return, false]
[), {, return, false, ;, }, Node, args, =, name, ., getNext, (, ), ;, Node, body, =, args, .]
[., isEmpty, (, ), ), {, return, false, ;, }, Node, args, =, name, ., getNext, (, ), ;, Node]
[., getString, (, ), ., isEmpty, (, ), ), {, return, false, ;, }, Node, args, =, name, ., getNext]
[;, }, Node, args, =, name, ., getNext, (, ), ;, Node, body, =, args, ., getNext, (, ), ;]
[;, Node, body, =, args, ., getNext, (, ), ;, return, containsName, (, body, ,, name, ., getString, (, )]
[., getNext, (, ), ;, Node, body, =, args, ., getNext, (, ), ;, return, containsName, (, body, ,, name]
[;, return, containsName, (, body, ,, name, ., getString, (, ), ), ;, }, private, boolean, containsName, (, Node, n]
[., getNext, (, ), ;, return, containsName, (, body, ,, name, ., getString, (, ), ), ;, }, private, boolean]
[;, }, private, boolean, containsName, (, Node, n, ,, String, name, ), {, if, (, n, ., isName, (, )]
[,, name, ., getString, (, ), ), ;, }, private, boolean, containsName, (, Node, n, ,, String, name, ), {]
[), ;, }, private, boolean, containsName, (, Node, n, ,, String, name, ), {, if, (, n, ., isName, (]
[., getString, (, ), ), ;, }, private, boolean, containsName, (, Node, n, ,, String, name, ), {, if, (]
[), {, return, true, ;, }, for, (, Node, child, :, n, ., children, (, ), ), {, if, (]
[&&, n, ., getString, (, ), ., equals, (, name, ), ), {, return, true, ;, }, for, (, Node]
[., isName, (, ), &&, n, ., getString, (, ), ., equals, (, name, ), ), {, return, true, ;]
[), {, return, true, ;, }, for, (, Node, child, :, n, ., children, (, ), ), {, if, (]
[., equals, (, name, ), ), {, return, true, ;, }, for, (, Node, child, :, n, ., children, (]
[., getString, (, ), ., equals, (, name, ), ), {, return, true, ;, }, for, (, Node, child, :]
[), ), {, return, true, ;, }, for, (, Node, child, :, n, ., children, (, ), ), {, if]
[;, }, for, (, Node, child, :, n, ., children, (, ), ), {, if, (, containsName, (, child, ,]
[), {, if, (, containsName, (, child, ,, name, ), ), {, return, true, ;, }, }, return, false, ;]
[., children, (, ), ), {, if, (, containsName, (, child, ,, name, ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, }, }]
[,, name, ), ), {, return, true, ;, }, }, return, false, ;, }, }, }]
[), ), {, return, true, ;, }, }, return, false, ;, }, }, }]
[;, }, }, return, false, ;, }, }, }]
[;, }, }, }]
