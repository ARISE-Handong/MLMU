[., time, ., DateTimeFieldType, ;, import, org, ., joda, ., time, ., DurationField, ;, public, class, OffsetDateTimeField, extends, DecoratedDateTimeField, {]
[DateTimeFieldType, ;, import, org, ., joda, ., time, ., DurationField, ;, public, class, OffsetDateTimeField, extends, DecoratedDateTimeField, {, @, SuppressWarnings, (]
[., DurationField, ;, public, class, OffsetDateTimeField, extends, DecoratedDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[int, iMin, ;, private, final, int, iMax, ;, public, OffsetDateTimeField, (, DateTimeField, field, ,, int, offset, ), {, this, (]
[;, private, final, int, iMax, ;, public, OffsetDateTimeField, (, DateTimeField, field, ,, int, offset, ), {, this, (, field, ,]
[private, final, int, iMax, ;, public, OffsetDateTimeField, (, DateTimeField, field, ,, int, offset, ), {, this, (, field, ,, (]
[private, final, int, iMax, ;, public, OffsetDateTimeField, (, DateTimeField, field, ,, int, offset, ), {, this, (, field, ,, (]
[private, final, int, iMax, ;, public, OffsetDateTimeField, (, DateTimeField, field, ,, int, offset, ), {, this, (, field, ,, (]
[int, iMax, ;, public, OffsetDateTimeField, (, DateTimeField, field, ,, int, offset, ), {, this, (, field, ,, (, field, ==]
[;, public, OffsetDateTimeField, (, DateTimeField, field, ,, int, offset, ), {, this, (, field, ,, (, field, ==, null, ?]
[OffsetDateTimeField, (, DateTimeField, field, ,, int, offset, ), {, this, (, field, ,, (, field, ==, null, ?, null, :]
[OffsetDateTimeField, (, DateTimeField, field, ,, int, offset, ), {, this, (, field, ,, (, field, ==, null, ?, null, :]
[), {, this, (, field, ,, (, field, ==, null, ?, null, :, field, ., getType, (, ), ), ,]
[this, (, field, ,, (, field, ==, null, ?, null, :, field, ., getType, (, ), ), ,, offset, ,]
[this, (, field, ,, (, field, ==, null, ?, null, :, field, ., getType, (, ), ), ,, offset, ,]
[(, field, ==, null, ?, null, :, field, ., getType, (, ), ), ,, offset, ,, Integer, ., MIN_VALUE, ,]
[(, field, ==, null, ?, null, :, field, ., getType, (, ), ), ,, offset, ,, Integer, ., MIN_VALUE, ,]
[., MAX_VALUE, ), ;, }, public, OffsetDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ,, int, offset, ), {, this, (]
[), ;, }, public, OffsetDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ,, int, offset, ), {, this, (, field, ,]
[}, public, OffsetDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ,, int, offset, ), {, this, (, field, ,, type, ,]
[OffsetDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ,, int, offset, ), {, this, (, field, ,, type, ,, offset, ,]
[OffsetDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ,, int, offset, ), {, this, (, field, ,, type, ,, offset, ,]
[,, DateTimeFieldType, type, ,, int, offset, ), {, this, (, field, ,, type, ,, offset, ,, Integer, ., MIN_VALUE, ,]
[,, DateTimeFieldType, type, ,, int, offset, ), {, this, (, field, ,, type, ,, offset, ,, Integer, ., MIN_VALUE, ,]
[OffsetDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ,, int, offset, ,, int, minValue, ,, int, maxValue, ), {, super, (]
[DateTimeField, field, ,, DateTimeFieldType, type, ,, int, offset, ,, int, minValue, ,, int, maxValue, ), {, super, (, field, ,]
[,, int, offset, ,, int, minValue, ,, int, maxValue, ), {, super, (, field, ,, type, ), ;, if, (]
[,, int, offset, ,, int, minValue, ,, int, maxValue, ), {, super, (, field, ,, type, ), ;, if, (]
[offset, ,, int, minValue, ,, int, maxValue, ), {, super, (, field, ,, type, ), ;, if, (, offset, ==]
[,, int, maxValue, ), {, super, (, field, ,, type, ), ;, if, (, offset, ==, 0, ), {, throw]
[), {, super, (, field, ,, type, ), ;, if, (, offset, ==, 0, ), {, throw, new, IllegalArgumentException, (]
[field, ,, type, ), ;, if, (, offset, ==, 0, ), {, throw, new, IllegalArgumentException, (, "The offset cannot be zero", ), ;, }]
[type, ), ;, if, (, offset, ==, 0, ), {, throw, new, IllegalArgumentException, (, "The offset cannot be zero", ), ;, }, iOffset, =]
[(, offset, ==, 0, ), {, throw, new, IllegalArgumentException, (, "The offset cannot be zero", ), ;, }, iOffset, =, offset, ;, if, (]
[(, offset, ==, 0, ), {, throw, new, IllegalArgumentException, (, "The offset cannot be zero", ), ;, }, iOffset, =, offset, ;, if, (]
[==, 0, ), {, throw, new, IllegalArgumentException, (, "The offset cannot be zero", ), ;, }, iOffset, =, offset, ;, if, (, minValue, <]
[0, ), {, throw, new, IllegalArgumentException, (, "The offset cannot be zero", ), ;, }, iOffset, =, offset, ;, if, (, minValue, <, (]
[0, ), {, throw, new, IllegalArgumentException, (, "The offset cannot be zero", ), ;, }, iOffset, =, offset, ;, if, (, minValue, <, (]
[0, ), {, throw, new, IllegalArgumentException, (, "The offset cannot be zero", ), ;, }, iOffset, =, offset, ;, if, (, minValue, <, (]
[(, "The offset cannot be zero", ), ;, }, iOffset, =, offset, ;, if, (, minValue, <, (, field, ., getMinimumValue, (, ), +]
[}, iOffset, =, offset, ;, if, (, minValue, <, (, field, ., getMinimumValue, (, ), +, offset, ), ), {]
[=, offset, ;, if, (, minValue, <, (, field, ., getMinimumValue, (, ), +, offset, ), ), {, iMin, =]
[=, offset, ;, if, (, minValue, <, (, field, ., getMinimumValue, (, ), +, offset, ), ), {, iMin, =]
[=, offset, ;, if, (, minValue, <, (, field, ., getMinimumValue, (, ), +, offset, ), ), {, iMin, =]
[<, (, field, ., getMinimumValue, (, ), +, offset, ), ), {, iMin, =, field, ., getMinimumValue, (, ), +]
[(, ), +, offset, ), ), {, iMin, =, field, ., getMinimumValue, (, ), +, offset, ;, }, else, {]
[+, offset, ), ), {, iMin, =, field, ., getMinimumValue, (, ), +, offset, ;, }, else, {, iMin, =]
[iMin, =, field, ., getMinimumValue, (, ), +, offset, ;, }, else, {, iMin, =, minValue, ;, }, if, (]
[iMin, =, field, ., getMinimumValue, (, ), +, offset, ;, }, else, {, iMin, =, minValue, ;, }, if, (]
[field, ., getMinimumValue, (, ), +, offset, ;, }, else, {, iMin, =, minValue, ;, }, if, (, maxValue, >]
[., getMinimumValue, (, ), +, offset, ;, }, else, {, iMin, =, minValue, ;, }, if, (, maxValue, >, (]
[., getMinimumValue, (, ), +, offset, ;, }, else, {, iMin, =, minValue, ;, }, if, (, maxValue, >, (]
[., getMinimumValue, (, ), +, offset, ;, }, else, {, iMin, =, minValue, ;, }, if, (, maxValue, >, (]
[;, }, else, {, iMin, =, minValue, ;, }, if, (, maxValue, >, (, field, ., getMaximumValue, (, ), +]
[iMin, =, minValue, ;, }, if, (, maxValue, >, (, field, ., getMaximumValue, (, ), +, offset, ), ), {]
[minValue, ;, }, if, (, maxValue, >, (, field, ., getMaximumValue, (, ), +, offset, ), ), {, iMax, =]
[minValue, ;, }, if, (, maxValue, >, (, field, ., getMaximumValue, (, ), +, offset, ), ), {, iMax, =]
[minValue, ;, }, if, (, maxValue, >, (, field, ., getMaximumValue, (, ), +, offset, ), ), {, iMax, =]
[>, (, field, ., getMaximumValue, (, ), +, offset, ), ), {, iMax, =, field, ., getMaximumValue, (, ), +]
[(, ), +, offset, ), ), {, iMax, =, field, ., getMaximumValue, (, ), +, offset, ;, }, else, {]
[+, offset, ), ), {, iMax, =, field, ., getMaximumValue, (, ), +, offset, ;, }, else, {, iMax, =]
[offset, ;, }, else, {, iMax, =, maxValue, ;, }, }, public, int, get, (, long, instant, ), {, return]
[offset, ;, }, else, {, iMax, =, maxValue, ;, }, }, public, int, get, (, long, instant, ), {, return]
[offset, ;, }, else, {, iMax, =, maxValue, ;, }, }, public, int, get, (, long, instant, ), {, return]
[{, iMax, =, maxValue, ;, }, }, public, int, get, (, long, instant, ), {, return, super, ., get, (]
[maxValue, ;, }, }, public, int, get, (, long, instant, ), {, return, super, ., get, (, instant, ), +]
[., get, (, instant, ), +, iOffset, ;, }, public, long, add, (, long, instant, ,, int, amount, ), {]
[(, instant, ), +, iOffset, ;, }, public, long, add, (, long, instant, ,, int, amount, ), {, instant, =]
[(, instant, ), +, iOffset, ;, }, public, long, add, (, long, instant, ,, int, amount, ), {, instant, =]
[iOffset, ;, }, public, long, add, (, long, instant, ,, int, amount, ), {, instant, =, super, ., add, (]
[}, public, long, add, (, long, instant, ,, int, amount, ), {, instant, =, super, ., add, (, instant, ,]
[add, (, long, instant, ,, int, amount, ), {, instant, =, super, ., add, (, instant, ,, amount, ), ;]
[add, (, long, instant, ,, int, amount, ), {, instant, =, super, ., add, (, instant, ,, amount, ), ;]
[,, int, amount, ), {, instant, =, super, ., add, (, instant, ,, amount, ), ;, FieldUtils, ., verifyValueBounds, (]
[amount, ), {, instant, =, super, ., add, (, instant, ,, amount, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,]
[{, instant, =, super, ., add, (, instant, ,, amount, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,, get, (]
[super, ., add, (, instant, ,, amount, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,, get, (, instant, ), ,]
[add, (, instant, ,, amount, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,, get, (, instant, ), ,, iMin, ,]
[amount, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,, get, (, instant, ), ,, iMin, ,, iMax, ), ;, return]
[iMin, ,, iMax, ), ;, return, instant, ;, }, public, long, add, (, long, instant, ,, long, amount, ), {]
[iMax, ), ;, return, instant, ;, }, public, long, add, (, long, instant, ,, long, amount, ), {, instant, =]
[iMax, ), ;, return, instant, ;, }, public, long, add, (, long, instant, ,, long, amount, ), {, instant, =]
[instant, ;, }, public, long, add, (, long, instant, ,, long, amount, ), {, instant, =, super, ., add, (]
[}, public, long, add, (, long, instant, ,, long, amount, ), {, instant, =, super, ., add, (, instant, ,]
[add, (, long, instant, ,, long, amount, ), {, instant, =, super, ., add, (, instant, ,, amount, ), ;]
[add, (, long, instant, ,, long, amount, ), {, instant, =, super, ., add, (, instant, ,, amount, ), ;]
[,, long, amount, ), {, instant, =, super, ., add, (, instant, ,, amount, ), ;, FieldUtils, ., verifyValueBounds, (]
[amount, ), {, instant, =, super, ., add, (, instant, ,, amount, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,]
[{, instant, =, super, ., add, (, instant, ,, amount, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,, get, (]
[super, ., add, (, instant, ,, amount, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,, get, (, instant, ), ,]
[add, (, instant, ,, amount, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,, get, (, instant, ), ,, iMin, ,]
[amount, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,, get, (, instant, ), ,, iMin, ,, iMax, ), ;, return]
[,, iMax, ), ;, return, instant, ;, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return]
[), ;, return, instant, ;, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (]
[return, instant, ;, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,]
[return, instant, ;, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,]
[public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (]
[addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (]
[instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,]
[int, amount, ), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,, amount, ,]
[), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,, amount, ,, iMin, ,]
[amount, ,, iMin, ,, iMax, ), ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {]
[amount, ,, iMin, ,, iMax, ), ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {]
[iMax, ), ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (]
[), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[}, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,]
[long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMin, ,]
[instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMin, ,, iMax, ), ;, return]
[instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMin, ,, iMax, ), ;, return]
[), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMin, ,, iMax, ), ;, return, super, ., set, (]
[FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMin, ,, iMax, ), ;, return, super, ., set, (, instant, ,]
[FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMin, ,, iMax, ), ;, return, super, ., set, (, instant, ,]
[verifyValueBounds, (, this, ,, value, ,, iMin, ,, iMax, ), ;, return, super, ., set, (, instant, ,, value, -]
[., set, (, instant, ,, value, -, iOffset, ), ;, }, public, boolean, isLeap, (, long, instant, ), {, return]
[., set, (, instant, ,, value, -, iOffset, ), ;, }, public, boolean, isLeap, (, long, instant, ), {, return]
[-, iOffset, ), ;, }, public, boolean, isLeap, (, long, instant, ), {, return, getWrappedField, (, ), ., isLeap, (]
[return, getWrappedField, (, ), ., isLeap, (, instant, ), ;, }, public, int, getLeapAmount, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., isLeap, (, instant, ), ;, }, public, int, getLeapAmount, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, int, getLeapAmount, (, long, instant, ), {, return, getWrappedField, (, ), ., getLeapAmount, (]
[), {, return, getWrappedField, (, ), ., getLeapAmount, (, instant, ), ;, }, public, DurationField, getLeapDurationField, (, ), {, return]
[), {, return, getWrappedField, (, ), ., getLeapAmount, (, instant, ), ;, }, public, DurationField, getLeapDurationField, (, ), {, return]
[(, ), {, return, getWrappedField, (, ), ., getLeapDurationField, (, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[), ;, }, public, int, getMinimumValue, (, ), {, return, iMin, ;, }, public, int, getMaximumValue, (, ), {, return]
[}, public, int, getMaximumValue, (, ), {, return, iMax, ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[}, public, int, getMaximumValue, (, ), {, return, iMax, ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[{, return, iMax, ;, }, public, long, roundFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundFloor, (]
[return, getWrappedField, (, ), ., roundFloor, (, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundFloor, (, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundCeiling, (]
[return, getWrappedField, (, ), ., roundCeiling, (, instant, ), ;, }, public, long, roundHalfFloor, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundCeiling, (, instant, ), ;, }, public, long, roundHalfFloor, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundHalfFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfFloor, (]
[return, getWrappedField, (, ), ., roundHalfFloor, (, instant, ), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundHalfFloor, (, instant, ), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfCeiling, (]
[return, getWrappedField, (, ), ., roundHalfCeiling, (, instant, ), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundHalfCeiling, (, instant, ), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfEven, (]
[return, getWrappedField, (, ), ., roundHalfEven, (, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundHalfEven, (, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return, getWrappedField, (, ), ., remainder, (]
[), {, return, getWrappedField, (, ), ., remainder, (, instant, ), ;, }, public, int, getOffset, (, ), {, return]
